In this part, we're going to focus on designing a provenance entity.
So we've seen that the platform does allow you to do these kinds of things.
Now, how do you do it in practice?
And again, I will not get into technical detail of actually writing an entity in this lecture, but just how does an entity look like.
The most important thing is to give it a name and it sounds like a very simple thing to say but naming things appropriately, meaningfully, so that the community can refer to it and understand very easily what your entity is is extremely important.
So naming your entity something that is understood by everyone around is going to help a lot.
So, like I said, you're going to define it through a schema and you have the ability to extend entities from one and other.
So I gave already an example, which is extending the generic provenance entity defined by the W3C Prov to define your own but for instance,
I'll take an example you have defined a data set entity and say that the data set has a category which is an ontology term, it has a name.
This is fine.
Now I took earlier an example of an electro physiology data set and we have briefly discussed that this type of data set has also another piece of information that is the Stimuli that was used to stimulate the specific neuron in order to observe it's electrical response.
So, this is also a data set.
It is an electro-physiology data set.
And so at this stage what you could do is to extend the data set and we'll write it if is, for the sake of writing it showed and at this stage I could define a stimuli property, and what this means is we have the data set defined with it's own fields and the electro-physiology data set extends the data set, that means it inherits the category fields, the name fields, and in addition it brings a stimuli field.
So that allows you to build a hierarchy of entities that borrow information from one and other and organize your domain in a very logical way.
So, that's my second point, entities can extend each other.
All entities can be used in provenance, however it is not mandatory if all you wanted was to create a few electro-physiology data sets and save them into the system without referring to any provenance information you could do it, we do not force you to save provenance.
Now we do believe that adding provenance information does increase the value of the data sets, does give a lot of context to potential users of your data sets, and allows them to build trust in what you're generating by being transparent about the protocoles you have used, what specific mouse or rat you have been using, how you have extracted your slices and so on, and so forth.
So, you can push your entities into the platform and at the later stage you can also involve them in provenance there's no constrain there, you can do it at the later stage.
So the second thing you have to do, and I guess
I want to be ahead of myself by designing this example is to define the properties of your entity.
And really you have to think of it as what questions do you want to ask the system, the platform, about your entities and thinking of it in this way the listing of all the properties necessary in your entities is going to become a lot more intuitive, because, okay, in order to as a question about:"Give me all electro-physiology recording"
"that have a stimuli called ID Rest" which is a type of stimuli or a square simulation... and obviously you need to capture this information in the meta data of your entities.
It becomes obvious that you need to create a property that is stimuli, and if the community has already defined an ontology that's described this stimuli, let's import it because let's speak the same language it makes everybody's job a lot simpler.
And maybe if the specific property you want to use doesn't have a well know vocabulary defined, then let's define it and import it into the platform !
So, that's the way we like to approach property definition of entities, and it works really well.
So what can you put into a property?
What can this be, what types can we give them?
We can have literal types, and by literal we mean simply integers, floating point values strings, we can have structured objects which themselves can be defined with their own schemas and registered into the platform we're going to look at some specific examples of that later and finally, and this is an important one we can use ontology terms.
And we're going to expand a little bit in a later slide on ontologies and why they are so useful there.
Finally you can define semantic constrains so this is really what you want to enforce.
When someone submits an entity, one of such entity into the system, so an instance of that entity.
What do you want the platform to check for you?
Maybe complain if one of these is broken so that the user knows, where we were expecting you to define it in this way and not in that way.
Please, fix it, it is your gate-keeper really when registering data into the platform.
So, what is at your disposal here: you can use enumerations, so sets of strict values that you must use to fill one of these property you can have numerical ranges like it has to be a value between zero and ten, and nothing else.
If someone submits an instance with the value 11 the system will say:
"I'm sorry, you broke that rule."
"Fix it and then you will be able to save it."
And finally you can give specific entity types so when I said you can use structured object this semantic constraint can show the value you have provided to this kind of structured object properties does match the expected types.
Also if you use ontology terms it can make sure that you use a term that is really belonging to the defined ontology.
And finally... Because some entities will have raw data attached like an electro physiology recording but some of the entities will not have any raw data directly attached, for instance, a neuron.
A neuron by itself is a logical entity, it doesn't have raw data, now, it can be derived into a data set itself as raw data, so you also have to make this decision as to whether your entity has or has not raw data attached.
But it is just a simple check box, you have to click or not.
