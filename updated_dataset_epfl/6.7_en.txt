Welcome back: Nature, In Code.
We're in Chapter 6, Lecture 7.
In this chapter, so far we've learned about natural selection, evolution by natural selection, and what happens when we have alleles, we package these alleles together in genotypes and then these genotypes have different fitnesses.
Well, we've learned that depending on exactly what those fitnesses are, relative to each other, we get the very different evolutionary outcomes.
But in this chapter so far, and in fact in the entire course so far, we've made the simplifying assumption that we're only focusing on a single population in a single species.
And now we're going to relax this assumption a little bit and we're going to assume that there are in fact, two populations and two species, and they interact in interesting ways giving rise to a phenomenon called co-evolution.
So let's get going.
So far, we have assumed that fitness, i.e. the ability to survive and reproduce, it's a fixed value, but it's very easy to see that this isn't always the case.
Consider for example a predator-prey system.
These two species depend crucially on each other, and the fitnesses depend crucially on who else is around.
The fitness of a predator depends on the ability to spot prey.
The fitness of the prey depends on the ability to avoid being spotted by predators.
And so, fitness can mean being adapted, well adapted to a biotic environment that can be affected by being well adapted to an abiotic environment, but often the environment is, in fact, biotic, and is composed of other species, and if that's the case, this can lead to something called co-evolution.
So evolution, again meaning change of allele frequencies.
But now it's co-evolution, which means we have changes in allele frequencies in multiple species that crucially depend on each other in one way or another.
A really interesting general system of co-evolution is that of a host/parasite situation.
So, a host/parasite system where a parasite needs to infect the host in order to reproduce, and vice versa, a host has a reduced fitness when it's infected by a parasite, and higher fitness if it can avoid being infected by a parasite.
So, assume here we have some host individuals, these host individuals are doing just fine normally, but then occasionally get infected by a parasite.
The parasite survives within the host, gets to reproduce, infects other hosts.
This is bad for a host, okay?
So, the host fitness here in this case will be reduced because of the parasite infection, the host can get ill, or in the worst case can even die.
Now, from the perspective of the parasite though, this is great.
So here, for-- 
Let me use red here.
The parasite fitness is up because the parasite has a great time surviving and reproducing.
Now, assume there's a genetic mutation in this host over here that prohibits the parasite to infect this host.
So, this host is now resistant.
That is bad news for the parasite, because the parasite cannot now infect, indeed it will perhaps get into the host, but there it will not be able to reproduce, or it might not even get in.
So in this-- In any case, the fitness of the parasite will be severely reduced, but for the host, because it avoided infection, the fitness will again be comparatively high.
And so this is like the predator-prey system, where the fitnesses of these two players depend crucially on each other.
So I'd like to formalize this host/parasite system a little bit more, because ultimately we want to implement it in Java Script.
So here's how we can think of this.
We have a host, we have a parasite species.
We're again going to assume two alleles, A1 and A2, but to make things a little simpler here, we're actually going to assume now that these species are haploid.
Okay, so they only have one copy of an allele or of a gene.
So in other words, if there are two possible alleles,
A1 and A2, there are only two genotypes here.
You're either A1 or you are A2.
So same for the parasite.
We're going to assume haploid parasites, also with an A1 and an A2 alleles.
Now, these alleles need not be identical but we just call them the same because we found that the A1 parasite can infect the A1 host, and the A2 parasite can infect the A2 host, but the A1 cannot infect the A2 host, and the A2 parasite cannot infect the A1 host.
So this is the so-called matching allele model, where if the allele matches the host allele in any meaningful way, then the parasite can infect, and that's why we simply labeled them the same.
Now, such a system actually has an interesting dynamic if you think about it.
Assume, for example, that the parasite A1 at the moment is quite common.
Okay?
So, consequently the A2 parasite is rare.
What does that mean?
Well, it means this is bad news for the A1 host, right?
Because there are lots of A1 parasites that can infect the A1 host.
Conversely, for the A2 host, that's great news because the parasite that can infect the A2 host is rare.
So, as a consequence, we would expect the A1 host frequency to go down, because it's heavily parasitized and the A2 host frequency to go up.
So, is that the end of the story?
No, it's not, and that's exactly what makes co-evolution so fascinating.
Because it's not just that the host depends on the parasite, it's that the parasite depends also on the host.
And what this means here, for example, if the A1 host frequency goes down, that's bad news for the A1 parasite, because the parasite A1 depends on the A1 host to survive and reproduce.
Consequently, it's good for the A2 parasite because there are now lots of A2 hosts.
So in other words, parasite A1 has a hard time, parasite A2 has a great time.
Now, with the exact same logic that brought us from here to here, we can now go over to another situation where we can say, okay, while now that A1 is down, that's great, parasite A1, that's great for host A1, because it doesn't suffer the same parasite load as it just did before.
And vice versa for the host A2.
The fact that parasite A2 now becomes more frequent is bad news.
And then again, with the exact same logic, we would, in fact, go from this situation to this situation, where it's great for parasite A1 that there's now more A1 host and it's bad for the parasite A2 that there's now less A2.
And so, now you can see the cyclical nature here of this system, and we will now implement this in Java Script and you will see exactly this cyclical nature in the frequency of the genotypes.
But before we do this,
I want to mention one more concept that we're actually talking about here, and this is the concept of negative frequency-dependent selection, negative frequency-dependent selection.
"Frequency-dependent."
Okay, so we know what selection is, we've talked about this, but what does frequency-dependent selection mean?
And in particular, what does negative frequency-dependent selection mean?
Well, frequency-dependent simply means that the fitness of the genotypes depends on their frequencies.
That it's not a fixed value, it can change over time and it depends on the frequencies.
Negative simply means that this correlation is negative.
So, genotypes are less fit when they're more common and they're more fit when they're less common.
And it's this negative frequency-dependence that so often leads to this cyclical dynamics.
So, with that established, let's go ahead and implement such a system in Java Script.
