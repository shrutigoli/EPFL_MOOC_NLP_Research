In our introduction, we have discussed the different steps leading to the creation of a program.
We know that we should start by thinking, conceptualizing, and planning the sequence of instructions we aim to realize.
Then, we will translate this conception into a known programming language, such as C++.
Then we will go through several steps, such as compiling and testing, before we finally end up with an executable program.
Now, we will enter the heart of the matter and acquire the tools necessary to translate a program conception into a C++ program.
A program is nothing but a sequence of instructions, working with data.
Actually, the sequence of instructions are closely related to the notion of processing.
These processing operate on data while the data also operate on processing.
Depending on the nature of the data, different types of processing will be performed.
Let us imagine that we wish to write a brief program tasked with resolving a quadratic equation of this kind.
We can picture rather easily the different steps leading to the solving of such an equation.
First of all, we should figure out the involved coefficients, the b, the c in order to know concretely what equation we are working with.
Then, we will calculate the discriminant (delta).
According to the value of this delta, there will be different possible situations.
Thus, different processing will be held.
For example, if the delta is negative, we will simply print that there is no solution.
If delta is zero, we will calculate the unique solution and print it.
Otherwise, there is the case where we have two solutions.
We will not treat this last case explicitly now.
We can see that there are several processing.
Here, at the step two, we have a processing calculating the delta.
These processing operate on data; indeed we see that calculating delta means working with the data b and c, which are provided at the beginning.
We also see that data influence processing, for example, here, the newly-calculated data delta will impact the performed processing.
Here, depending on the value of delta, we will either print that there is no solution or calculate the unique solution and so on.
We clearly see that there is a codependency between data and processing.
Processing operate on data, which then impact the performed processing.
We can draw two conclusions here.
The first is that one of the fundamental component to express processing is the notion of expression.
Here, we need to evaluate a short arithmetic expression in order to calculate our delta.
The second is related to the notion of data.
For exemple, here, we see that a data like delta is associated with a value.
At different stages of the program, we need to find the value associated with this data.
Having a name, such as "delta" gives
access to the value of this data, at different stages of the program and to reference this value using a name.
This brings us to a fundamental notion called the notion of variable.
The objective of this introductory programming course is to present the necessary components in order to perform processing and manipulate data in a suitable way.
As processing, we have declared that the notion of expression was fundamental and will examine it thouroughly later, along with the notion of operators.
Regarding data, we have just demonstrated, through our little example, the fact that memorizing data through variables is primordial.
This is the subject of today's episode.
In programming, a variable is a way to store a data, to associate a name with it.
Concretely, in a program executed on a machine, a variable corresponds to an area named in the memory, a named area.
We usually call this name an identifier, the identifier of the variable.
This memory area will contain a value, as we can see here, will store a value associated with the name "n".
An important fact is that C++ deems mandatory to clearly define the genre associated with every data we wish to manipulate.
We call this, the type of the variable.
For example, we may want to manipulate integer-type, decimal-type or character string-type data.
We need to clearly specify it when, in our program,
I indicate that I want to use a variable.
In our example, we would thus have a variable called n, storing the value 123.
Its type is the integer type, which is written
"int" in C++.
But what should we do concretely in a C++ program, when we wish to declare a variable ?
You have here the little shell of a C++ program, ready to receive your instructions.
We will now declare an integer-type data, storing the value 4.
To this end, we type the name of the data.
We specify its type : integer.
And we associate it with a value, here, the value 4.
We have here the aforementioned components : we declare a variable n, containing the value 4, with the int type.
When we write such a line in a program, as we just did in an editor, we are actually declaring a variable.
We declare, in our program, that we wish to use a variable called n.
Referring to our former terminology, the identifier of the variable here, is "n".
Through this identifier, we will be able to access the value stored in this variable.
Associated to this data, is a type, the integer type, which is written "int" in C++.
In C++, we do not absolutely need to give an initial value to our variable when we declare it.
We can declare a variable leaving it empty, which we did here.
Here, we have an identifier "n_carrÃ©" of the type int, but with no initial value associated.
These two lines are both valid variable declarations in C++.
To initialize a variable is to give it an initial value.
This usually done along with the declaration
Here, we declare an int-type variable n and  initialize it to the value 4. this translates into such a memory diagram.
We now have an area, identified by "n", containing the initial value 4.
This is the recommanded way to proceed.
We have seen previously that it was possible in C++ to declare a variable without initializing it.
We find ourselves in such a situation : the variable n_carrÃ© can contain absolutely anything.
Therefore, the processing manipulating this variable n_carrÃ© are utterly unfathomable and can result in any type of results.
These results will probably be incorrect.
This is why we need to initialize a variable before using the value it contains.
The type associated with the variable upon its declaration is absolutely fundamental.
This type will condition the type of processing we may perform with this variable.
When we realize such a declaration in our program, we indicate that n can contain integers and integers only.
Similarly, if we declare a double-type variable in our program, where double means decimal in C++, we declare that the variable x will contain decimal numbers and decimal numbers only.
To sum up, the declaration of a variable in C++, follows this layout : we indicate the variable type, its identifier and, in parentheses, its initial value.
Also, we should not forget the semicolon at the end.
This second way to declare a variable is valid, but disadvised, for we do not give any initial value to the variable.
By the way, please note that the type of a variable cannot be changed later on.
When we declare a variable of a certain type, this variable will keep its type for all its existence in the program.
In C++, it is possible to declare two variables on the same line.
In this case, we indicate the associated type only once and separate both declarations by a comma.
This can lead to ambiguities, therefore it is recommanded not to overruse it.
There a few conventions one needs to respect when declaring a vairable.
When we give an identifier to a variable, this identifier may only be constituted of letters and digit.
By the way, the underscore character is considered as a letter.
You have here the example of a valid identifier.
Accents are not allowed.
You have here the example of an invalid identifier, containing an accent.
Also, the first character has to be a letter.
You have here an example of an invalid identifier, the first character being a digit.
Of course, the identifier cannot be a reserved keyword of the programming language.
There are several reserved keywords which we cannot use as the name of a variable.
Upper case and lower case are authorized but not equivalent, meaning that, for example, the identifiers "ligne" and "Ligne" are not equivalent.
They do not refer to the same variable.
We have already discussed the notion of type, essential when declaring variables.
The two main elementary types, allowing, in a program, to manipulate numerical data or declare numerical-type variables are int and double.
We have already encountered them in several examples.
There are, of course, many more predefined types in C++.
For example, if, in a program, I wish to manipulate positive integers, for example, the number of students attending this course, we will resort to the "unsigned int" type.
This type precisely means positive integer and lets us characterize our data in a more precise way than an int would.
Similarly, if, in a program, we need to manipulate characters, namely the usual characters from a to z, we can use the type "char".
Later in this course, we will expand further on the predefined types in the C++ language.
Right now, we know how to declare and initialize a variable in order to have it store a data.
Very often, it will be required to change the value of the variable, during the execution of the program.
This can be accomplished through an assignment.
Assignment is performed through the "equal to" operator, also called assignment operator.
Such a line is read : we assign the new value n times n to the variable n_carrÃ©.
This means that we are changing the value of the variable in order to store inside it the new value n times n.
Be very careful not to mistake this with a mathematical equality.
The executuion of an assignment operation actually occurs in two steps.
First of all, the expression on the right side of the assignment symbol
"equal to" will be evaluated.
Here, in our example, we have a variable n, storing the value 4.
Knowing that in C++, the asterisk represents the multiplication, the result of the evaluation n times n will simply return 16.
Then, what we have evaluated during the first step will be stored inside the variable on the left side of the assignment symbol.
Here, the variable n_carrÃ© stores the value 16.
It is important to understand, that if n_carrÃ© formerly contained something else than 16, this result would have been erased and replaced by the new value 16.
In general, the assignment goes as follows :
You have a variable name, followed by the assignment symbol "equal to" followed by an expression, which will define the new value the variable will take through the assignment.
Naturally, we will examine expressions thouroughly later.
You can see a few of them here :
An expression can be reduced to an elementary value, a simple expression like n squared here.
We will use the usual arithmetic operators, which we will discuss later on : multiplication, soustraction...
Of course, do not forget the famous semicolon at the end; it is essential for the well-functioning the compilation process,
As we stated previously, one should not mistake the assignment with the mathematical equality.
Despite the "equal to" symbal being the same, it does not carry the same meaning in mathematics and programming !
Let us analyse these two instructions here : in mathematics, these two lines would mean that a and b have the same values, in both cases.
In C++ though, this is not exactly what is going to happen.
Let us pay attention to the first instruction, supposing that we have variables a and b, each storing a different value.
Executing this instruction will result in evaluating b, which has the value 2, taking the result of b's evaluation and storing it inside a; this will produce this result.
Now, let us do the same with the second instruction, supposing that we still have our variables a and b, with the values 1 and 2.
We will evaluate a, take the result of the evaluation and store it inside b.
We take a, and shove it inside b.
Therefore, we end with both a and b, having the value 1,
We can see that, in programming, a and b indeed end up with the same values, but these values are not the same in both cases.
Moreover, if, later, one variable is modified, the other will not be impacted.
For example, if a is then modified to 3, b will keep the value 1.
Similarly in mathematics, if we were to write something like this, it would mean that, throughout all calculations, a and b will always verify this property.
In C++, the situation is not quite the same.
Let us imagine a situation where we assign the value 5 to the variable a.
Then, we write this line, not unlike what we previously expressed in mathematics.
This will result in storing inside b, the result of the evaluation "a plus 1", that is, 6.
Then, we can perfectly, when we execute the next instruction, modify the value of a again.
We clearly see that this relation is not verified anymore here, which would be the case in mathematics.
Therefore, in C++, it is absolutely valid to write such an instruction, meaning to calculate the expression
" a plus 1 " and store this result inside a.
Here, concretely, if we have a variable a, formerly containing, let us say, the value 3, we will start by evaluating the expression on the right side of the assignment operator.
The result of this evaluation will be 
" 3 plus 1 ", that is, 4.
Then only, we will store this newly-calculated value inside a, leading to this result.
This here, is an instruction very frequent and useful in programming.
You will have the opportunity to use it intensively through many an exercise.
We have now seen hwo assignment permits to modify the value of a variable during the course of a program.
However, in certain situations, once a variable has been granted an initial value, we do not wish to see this value change later; we wish to ensure it will not change anymore.
In such case, we will precede the declaration of the variable with the keyword "const".
The rest of the declarations remains identical: a type, an identifier, an intial value.
We simply added the reserved keyword "const".
You have here an example of a constant declaration.
We declare VITESSE_DE_LA_LUMIERE as a double-typed constant having this for value.
After this declaration, it will not be possible to modify, via assignment, the speed of light.
If I attempted it, it would cause a compiling error.
Now, you know how to declare and initialize a variable.
You also know how to change its value in the course of the execution thanks to the assignment.
We still need to discuss some fundamental elements, such as printing, for example, the value of a variable, or such as the different expressions we can use to assign a new value to variable.
This will keep us busy for the next episodes.
