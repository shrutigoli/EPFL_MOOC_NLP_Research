In the last episodes, you learned how to write a class in Java.
Now you know how to define data members and methods, and you know how to implement different aspects of encapsulation, such as defining what is publicly accessible, and what is inaccessible.
In this lesson, we will anchor these notions with some examples.
And we will see that encapsulating properly requires taking a certain number of measures.
At this stage, defining a class in a program implies defining a new type that is characterized by data members and methods.
In order to encapsulate this class you'll have to define everything that constitutes the implementation details as private, and everything that is part of the user interface for external access as public.
It is important to examine how this is enacted through a real example, and this is the goal of this video.
If we want a program to be able to work with the notion of rectangle, the first thing to do is to is to define a class Rectangle by defining its properties with data members, and its abilities with its own methods.
Another thing to do is to decide what will go into the user interface,
and what will constitute the hidden implementation details.
So here is one possible implementation of the class Rectangle that was our introductory example.
To define a class, we use the special keyword "class", followed by the name that we chose for our class, with the convention in Java, that the class name is capitalized.
Then, we defined some data members specific to the class, as well as some methods.
We implemented some aspects of encapsulation by deciding what constituted the implementation details, typically the data members, and what constituted the interface, that the external user can use that we specified using the keyword "public".
This class Rectangle right here will provide a number of functionalities that allow the user to access the data members of an rectangle, modify its values, and calculate its area.
Note that it is generally not necessary to systematically define get/set methods for each of the class data fields.
Here we defined them because at this stage of the course, we only know how to interact with a class rudimentarily.
We have tried here to respect the guidelines for encapsulation, which means that only allow the user access to the class functionalities through the interface.
This means that the class programmer has the freedom to modify the implementation details.
Here I can decide to change how the rectangle is represented, for example using an array with
2 doubles to store the height and width.
And in this case, it's my job, as class programmer to adapt the class methods.
For instance, instead of returning
"hauteur", I would return "dims[0]".
It's my responsibility to adapt the methods so that the user can continue using the class without being effected.
He can continue using getHauteur, setHauteur, and surface without even knowing that I had made internal modifications to the class.
And because the user is forced to use these predefined methods, to manipulate an object, a certain number of measures implemented in these methods can prevent the user from incorrectly manipulating the object and its contents.
So do you see how the class can be improved in this aspect?
Here you have the code of the class programmer of Rectangle, who conceived this new data type.
Let's see what happens on the user's side.
The user can be the same person who coded the class Rectangle, but not necessarily.
The code that you have here, is the implementation of a class "Geometrie" that uses the type Rectangle of the class Rectangle that was just defined.
This means that Geometrie can use this type just like any other type.
So here I can declare a variable rect of type Rectangle.
This declaration follows the same syntax as declarations of variables of normal types.
We also saw, at this stage of the course, that to initialize an object, you had to use an expression like this in Java.
We will learn what this means in the next episode.
For right now, it's unavoidable.
When this line is executed, we will have this situation in the memory.
We have a variable called rect that contains a reference or address to an object of type Rectangle that has 2 fields: one for the width and one for the height.
Of course, the first thing we want to do here is initialize these fields that are right now set at 0 to particular values.
This can be done by asking the user to enter some values for the width and height on the keyboard.
Once the user has introduced a value for the height, we can put this value into
"hauteur" of the object rect with the method setHauteur.
We use this notation which means that we invoke the method "setHauteur" on the object rect to set its value.
Imagine that the user enters the value 5.0, which leads to this situation.
The same goes for these lines that initialize the width of the rectangle.
Now we have an object properly initialized.
Now we can use other functionalities of the class Rectangle for example, to compute the area.
We use the dot operator again like this to compute the area of the rectangle that have just declared and initialized.
