So in the previous part, we extracted some basic morphometrics from the neuron.
What weâ€™re gonna do in this part is perform some statistics on the morphometrics that we extracted before, and those can be basic statistics such as the average or the variance within a feature but that is not always sufficient.
So what we want to do is also to draw the distribution to get an idea about the whole say.
In order to do that, we will use some basic Python modules.
After that, we will be able to compute features between different neurons or either different types of trees.
So now that we have extracted our features, we can perform some statistics on them.
What weâ€™re gonna need for that is "numpy" which is a mathematical module of Python.
So numpy has available a lot of the basic statistical functions that you might want to perform on your features, so that would be the sum and then you can compute the total length that we've seen before, or the mean volume, or the standard deviation, minimum or maximum.
So just by using numpy dot and then minimum, maximum standard deviation, you can get all the values that might be interesting.
So now that youâ€™ve extracted your feature, we can perform some statistical analysis.
To do so, we will use numpy, a module that is available in Python.
So we import numpy and then, we can start performing some statistics on our section lengths.
So the first one is the sum, this will sum up all the section lengths so we can get the total length of the neuron.
Same way, we can get the mean volume or the standard deviation, or the minimum, and maximum of the section lengths, and if we run this command, we can print all those interesting statistics on the section lengths that weâ€™ve computed before.
So now you might wanna go into more details and perform statistics on the individual parts of the neuron.
So before we have been working with a whole neuron, now weâ€™re concentrating on the individual parts which is basal dendrites, apical dendrites, and axons.
To do so, we have to select the neurite type.
So itâ€™s exactly what we did before but we add an option neurite type equals neuron dot basal dendrite.
So that will give you the section length of the basal dendrites.
And then you can do exactly the same for the apical dendrites and the axons.
So you just have to choose the correct neuron type and you can play with the morphometrics of individual parts of the neuron.
So now we can compare the morphometrics that we have extracted for the three different types of trees.
So exactly as we did before, we can use numpy dot sum to get the values of the total length of the three different tree types.
And as you can see, the axons are much longer than both the apical and the basal dendrites.
Even though the basal dendrites are many more, you only have one apical dendrite and one axon, but still the total length of the basal dendrites is much lower because they just stay locally.
The axons are reaching much further regions and so are the apical dendrites.
So now we can compute the average length of each tree type.
We do that using numpy once again but now weâ€™re gonna use numpy dot average.
So if we do this, we get three values for the different tree types.
As you can see, the differences are not as large as the total length differences.
So now we are going to compute the averages of the section lengths for those three tree types.
We do so using numpy once again, but now weâ€™re gonna do numpy dot average. So if we do so, we get the average value of the section length for those three different tree types.
As you can see, the differences are not as large as the total length differences which indicates that even though the extend, the total extend of the trees is so different, the individual sections are comparable.
So now that we have extracted our morphological feature, we might wanna go and plot the distribution.
This will give us a much better picture of the overall profile of the feature.
It is also very useful if we want to compare features: so if you want to compare a neuron to a different neuron, or a tree type to a different tree type.
So the first function weâ€™re gonna use is a histogram. To do that, we will use the hist from Pylab that we have imported before.
So we do "pylab dot hist" of our section lengths that we have extracted, and this gives us this distribution.
However, as you can see, the tail of the distribution is not very well defined and that is because of the small number of bins.
So we might wanna go and add more bins, so here we have only 10, letâ€™s do 25.
Here you get a much better picture of the distribution.
Another way of presenting the same distribution is to do the cumulative plot.
So we do "pylab dot hist" once again, but now we activate the cumulative option, and by doing that, we get a distribution that extends from the minimum to the maximum number.
So now, we might want to normalize the distribution.
As you can see here, you just have numbers.
So, if you want to compare two different distributions for two different neurons, thatâ€™s not gonna be very helpful.
What we want instead is to have percentages, so which percentage of the section lengths falls into each of those bins? 
And in order to do that, we need to activate the normed function, the normed option of the histogram of pylab.
And in order to do that, we wanna activate the normed option of the histogram function of pylab.
So we just select normed equals true, and we get the percentage as opposed to the absolute values that we got before.
We can use that to compare different distributions.
So another way of representing the same distribution is the boxplot, so we can use the boxplot function of pylab to generate an equivalent figure to the previous one.
The difference here is that you get the medium value, the 50% of the data, then 75%, and 25%, and then you can see the outliers of the distribution.
So this is an important feature to see how many outliers you have.
Now, that we have analyzed our feature with a histogram, we wanna go and check another representation which is a boxplot.
So weâ€™re gonna use "pylab dot boxplot" to generate the overall distribution of the same feature section lengths.
The advantage of this representation is you donâ€™t have to choose the bin size and you can get the outliers.
So what does the boxplot means?
This line is the medium value of the distribution.
This box annotates 50% of the data.
So 50% of the sections have a length that lies within those values.
Then 75% of the data allocated in here, and then with the small circles you see the outliers of the distributions so this is anything that is outside the 75% of the distribution.
So using the previous plots, the histogram and the boxplot, we can start comparing morphometrics between different tree types or between different neurons.
Here, we will try to see what are the differences between the distribution of section lengths of basal, apicals, and axons.
So we create a list with those three tree type features and we call once again,
"pylab dot hist" with the same bin size and a normalized distribution.
We also select the labels so that we can annotate the color of the distributions.
In order to do that, we call "pylab dot legend".
So this legend is generated with the labels weâ€™ve selected, and then you can see the three different colors for the three different tree types.
This is not consistent with the colors we chose because those are the colors of Pylab, not of NeuroM.
So once youâ€™ve plotted your distribution for the three tree types, you can understand more about the behavior of those tree types.
For example, you see that you have a high peak for the apicals here, indicating that there is a high percentage of sections with this length.
Similarly, you can see that sections of large length are merely axonal sections, so you were not able to get that just by the statistical comparison that we did before because we just computed the average section length.
Now, with the distributions, you can get the full picture, and you can see at which section length you have the highest concentration for each tree type.
Another way to compare the same distributions is to use the boxplot.
So we do these by creating the same list that we did before for basal, apical, and axonal section lengths, but here, you have to notice yet that the option is labels.
So we label once again the basal, the apical, and the axon trees.
And if we do that, we get three different boxplots.
What is interesting here is that you can see the axons have way many more outliers than the basal or the apical dendrites which means that the distribution of the dendrites is much more constrained.
So the section lengths of the dendrites are much more uniform than the axonal ones.
