1
00:00:04,550 --> 00:00:08,150
Defined functions by you in an Mpoint file

2
00:00:08,800 --> 00:00:13,010
are very useful to be reused on one side,
and the other

3
00:00:13,010 --> 00:00:16,660
also to make a fairly complex
program structure.

4
00:00:18,180 --> 00:00:21,370
So you can have a library of several
functions

5
00:00:21,680 --> 00:00:24,650
and you know after which to call
at the right time.

6
00:00:25,710 --> 00:00:29,330
There are also anonymous functions,
they are much

7
00:00:29,330 --> 00:00:33,120
easier, faster to use, but only after
you put

8
00:00:34,160 --> 00:00:37,600
them in the trash and you may not
use them again.

9
00:00:37,600 --> 00:00:41,190
How do we build these anonymous functions?

10
00:00:42,970 --> 00:00:44,790
We arrived here. It was A, then Z

11
00:00:45,180 --> 00:00:49,180
Now we would like to build a function
that does the same

12
00:00:49,180 --> 00:00:52,490
thing, so A times Z or A times X.

13
00:00:54,910 --> 00:00:59,530
But we did not want to build a file that
erases all these.

14
00:01:00,930 --> 00:01:02,260
The syntax is quite simple.

15
00:01:02,360 --> 00:01:05,120
It is F. What is F?

16
00:01:05,480 --> 00:01:14,820
This is a function that takes as input
A and X.

17
00:01:14,820 --> 00:01:17,590
And as output, it will make A times X.

18
00:01:23,400 --> 00:01:25,710
Now we can turn my script.

19
00:01:27,190 --> 00:01:28,780
My function F is defined.

20
00:01:28,950 --> 00:01:32,800
You see. it's F, which takes A and X.

21
00:01:32,800 --> 00:01:34,350
I can evaluate it somewhere.

22
00:01:34,410 --> 00:01:38,250
So, I can evaluate it here, since the
script gave me

23
00:01:38,250 --> 00:01:44,390
access to its variables. I can take
A and Z and I get

24
00:01:44,390 --> 00:01:47,620
the vector, which incidentally is
the same as V.

25
00:01:50,380 --> 00:01:53,180
So here it is not possible to integrate
comments.

26
00:01:53,180 --> 00:01:55,330
The only possible comments we can do is
just

27
00:01:55,330 --> 00:01:59,810
before its definition, and say F
calculates AX .

28
00:01:59,900 --> 00:02:04,630
That's the first thing.

29
00:02:05,260 --> 00:02:09,370
Now, there is another feature of these
anonymous functions.

30
00:02:09,370 --> 00:02:14,480
Suppose we have a parameter to be
inserted, for example

31
00:02:16,150 --> 00:02:22,600
a parameter which is 3 equal to 3, and
I want to use it here.

32
00:02:22,970 --> 00:02:25,930
A lowercase a times X.

33
00:02:27,470 --> 00:02:31,140
I backup. I clean my window.

34
00:02:31,270 --> 00:02:43,110
Now I run my script, and I can check

35
00:02:43,110 --> 00:02:46,870
what it gives, A, Z.

36
00:02:47,110 --> 00:02:50,360
I multiplied by 3, the earlier results.

37
00:02:51,330 --> 00:02:55,690
If I change A, will I get a different
result?

38
00:02:55,690 --> 00:02:57,490
For example, I say A 0.

39
00:02:58,510 --> 00:03:01,950
Ok. I again call F of A Z.

40
00:03:03,110 --> 00:03:08,490
And indeed, we have not changed
the value of the evaluation function.

41
00:03:09,280 --> 00:03:14,010
Why? Because the value of A has been
incorporated directly

42
00:03:14,010 --> 00:03:15,650
in the anonymous function.

43
00:03:16,100 --> 00:03:21,610
I can even clean the variable A, evaluate
the function F.

44
00:03:25,510 --> 00:03:29,820
This function will work even if, when
I look at the function,

45
00:03:29,820 --> 00:03:33,490
it shows, it's function A, so the small a

46
00:03:33,490 --> 00:03:35,900
times the matrix A times X.

47
00:03:40,000 --> 00:03:45,080
So it is also useful to use these
anonymous functions

48
00:03:45,110 --> 00:03:49,210
to integrate parameters directly and
after, forget these parameters.

49
00:03:49,210 --> 00:03:54,480
So here I can tell myself that we will
clean the small a.

50
00:03:55,890 --> 00:04:00,460
Thus there is another way to quickly
define functions.

51
00:04:01,130 --> 00:04:03,050
It's called inline functions.

52
00:04:03,030 --> 00:04:05,370
So how is the syntax?

53
00:04:05,370 --> 00:04:06,840
I must say G.

54
00:04:06,850 --> 00:04:10,110
So I take another function,
but this time I say

55
00:04:10,110 --> 00:04:18,720
this inline function equals A times X.

56
00:04:20,310 --> 00:04:27,570
So here I have a string of characters
that describes the operations to do.

57
00:04:27,570 --> 00:04:30,860
And now I have to say what are the
inputs of my function.

58
00:04:31,210 --> 00:04:34,730
So here the inputs are A and X.

59
00:04:34,760 --> 00:04:37,920
I have to tell it explicitly what are
the inputs.

60
00:04:39,510 --> 00:04:46,300
I can make this definition and I can
also do

61
00:04:46,300 --> 00:04:50,200
a call, therefore equals W G2A, Z.

62
00:04:58,850 --> 00:05:03,060
And I can rotate my script.

63
00:05:03,620 --> 00:05:07,560
Look at what W is and I see it's the
same as V.

64
00:05:08,660 --> 00:05:11,360
Let's try to put this parameter A inside.

65
00:05:11,400 --> 00:05:12,530
So I need it .

66
00:05:13,600 --> 00:05:14,440
I erase the client A.

67
00:05:14,440 --> 00:05:19,720
I say A equals, this time I take 0, so
I'm going

68
00:05:19,720 --> 00:05:21,360
to see if it is taken into account or not.

69
00:05:21,960 --> 00:05:30,900
I do A times call it P, it is a
supplementary parameter.

70
00:05:32,790 --> 00:05:34,050
Therefore, P times A times X.

71
00:05:36,000 --> 00:05:42,360
And now I'll run my script.

72
00:05:44,430 --> 00:05:51,720
W is 0. Actually the parameter was
considered.

73
00:05:52,270 --> 00:05:53,870
Let's see if I can clean it.

74
00:05:54,250 --> 00:06:03,420
I'll clean the parameter P, but before
calling the function.

75
00:06:05,760 --> 00:06:06,890
As we ought to do here.

76
00:06:11,960 --> 00:06:15,590
So here, before we cleaned it immediately

77
00:06:15,590 --> 00:06:18,900
and still use the function.
Is this still the case?

78
00:06:19,790 --> 00:06:25,610
I'll run. And the parameter was
considered.

79
00:06:28,120 --> 00:06:31,470
P is not defined, but when you define
the function G,

80
00:06:32,110 --> 00:06:35,830
in fact if you call the function
G with A and a, you find

81
00:06:36,160 --> 00:06:37,730
the parameter.

82
00:06:38,610 --> 00:06:42,040
Note, it's possible that in some
versions of Octave or Matlab.

83
00:06:44,350 --> 00:06:47,640
When you run these last three lines,
you have an error.

84
00:06:48,230 --> 00:06:50,180
There are functions that are predefined.

85
00:06:50,160 --> 00:06:50,960
Build in functions.

86
00:06:50,700 --> 00:06:55,540
These are accessible at any time,
and you can see

87
00:06:56,680 --> 00:06:59,110
their use by dividing L.

88
00:06:59,110 --> 00:07:01,310
Then there are functions defined
by the user.

89
00:07:01,350 --> 00:07:05,030
We saw a small example of how to
implement it.

90
00:07:05,030 --> 00:07:07,060
We will see more later in the course.

91
00:07:08,030 --> 00:07:10,870
After there are inline anonymous
functions that we will use

92
00:07:10,870 --> 00:07:16,780
rather for calculations or very fast uses.

93
00:07:17,000 --> 00:07:21,610
We will not save them somewhere
for later use.

94
00:07:22,320 --> 00:07:24,860
Use proper function, or define new ones,

95
00:07:24,860 --> 00:07:28,290
it is essential to be able to write
algorithms or programs.

96
00:07:28,830 --> 00:07:33,280
Organizing them into files
helps isolate some features,

97
00:07:33,450 --> 00:07:36,140
and also avoid possible bugs.

98
00:07:36,950 --> 00:07:40,600
Unfortunately it is not possible to
avoid all the bugs.

99
00:07:40,600 --> 00:07:42,410
There is no recipe for it.

100
00:07:42,830 --> 00:07:46,190
Often, it is the experience that will
help you to solve

101
00:07:46,430 --> 00:07:48,780
bug problems, when you meet them.

