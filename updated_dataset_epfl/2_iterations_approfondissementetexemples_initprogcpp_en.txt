Let us start by discussing a few more examples of
"for loops". In this loop, we declared a variable p, initialized to 0, the condition is
"p strictly less than 10" and the increment statement is p += 2.
Be reminded that p += 2 is strictly equivalent to p = p + 2. p is thus initialized to 0. At the end of the first iteration, we add
2 to p;  p will thus have the value 2, then 4 and so on until 10.
In this case, the condition will become false and we will exit the loop. 
Thus, in the loop, p will take the values 0, 2, 4
6 and 8.
Let us now consider this instruction "for", which declares a variable k initialized to 10, the condition is now "k strictly greater than 0"
Please note that the sense of inequality
has changed. Also, the increment statement is --k, meaning k = k  - 1 .
In other words, we will substract 1 from k at every iteration.
Thus, k is initialized to 10, at the end of the first iteration, we substract 1 from k; k will therefore have the value 9, then 8 and so on until k will be 0.
In this case, the condition will become false and we will exit the loop.
Thus within the loop, k will successively have the values 10, 9 et cetera until 1.
Let us now consider a third example, in which we declare a variable i, initialized to
0, the condition is
"i greater or equal to 0" and the increment statement is ++i, meaning we add 
1 to i at every iteration. i will initially be 0, at the end of the first iteration, we add 1 to i; i will thus have the value 1, the condition will be true and we keep going.
At the end of the second cycle, we add 1 to i, which will be 2.
The condition is once again true and we repeat.
As you can see, theoretically
at least, i will take every possible positive value without the condition ever becoming false : the loop will repeat indefinitely.
So why "at least theoretically"?
For technical reasons, which we won't explain, it isn't completely true. But the loop will still be repeated many a time.
A "for loop" may thus keep going forever.
This happens when the condition is always true.
Several causes thereof are possible, as in the previous example.
Mayhaps we erred in the condition.
Once again, in such a case, the loop will still stop eventually but only after a lot of iterations.
Another possible cause is the misspelling of the increment statement : like here where we incremented the variable j, while the condition relates to the variable i.
If the value of i is not modified within the block of instructions, since i is initialized to 0, this condition will always be true.
Practically, if you ever find yourself in a situation where a "for loop" is not stopping, you can always use the shortcut ctrl-c in order to shut down your program.
Let us consider a few mistakes, frequent among beginners.
First of all, note that there is no semicolon at the end of the line starting with the keyword "for".
Namely there is no semicolon here.
However, if you were to type a semicolon here, the compiler would still accept your program, though your program will behave strangely. Indeed, this code with a semicolon, will only print "bonjour" once.
Why ?
Because the semicolon here, is considered as an instruction; an instruction doing nothing at all.
Thus, your code will be interpreted as, first of all, a "for loop", the body of which is nothing but a semicolon.
Thus, this loop will repeat ten times the blank instruction, doing strictly nothing, while the "cout" instruction will be considered as outside the loop and will be executed only once.
Let us consider these three lines of code. These lines will result in the following print: namely the first instruction "cout" will be repeated five times, and the second instruction "cout" will be executed but once.
Then why ?
Because, in fact, this code is interpreted like this : the first instruction 
"cout" is within the
"for loop", while the second "cout" instruction is placed after the "for loop" and will thus not be repeated.
And be careful !
It is not enough to shift these lines right, to make them both be placed inside the "for loop".
If you want both these lines effectively repeated, one has to place the two instructions between braces
In this new version, the code will indeed produce the printing
"i=0 Bonjour", "i=1 Bonsoir" et cetera.
Also, refrain from modifying the variable controlling the number of iterations within the loop's body; namely do not attempt to proceed as in this example, declaring a variable i at the start
of the "for loop" and then modifying the variable i, here in the loop body.
But why ?
First of all because it probably will not result in what you expect; do not forget that the "for loop" will modify the variable i aswell, through the increment statement. And secondly, a  human rereader may not notice that you were modifying the variable i within the loop's body.
Let us now treat a new example, clearly demonstrating some problems we may encounter with "for loops"
This example consists of a program, asking four grades from the user and printing the average of these four grades.
We will start with a very simple version, not taking advantage of the "for loop", simply declaring four different variables.
These variables are called note 1, note 2, note 3 and note 4, storing the four values inputted by the user. (TN: note means grade )
At this time, the variables note
1, 2, 3, and 4 are storing the four values inputted by the user.
We can thus calculate the sum of these four variables, store the result in a variable we decided to call "somme" and divide this variable by 4 in order to obtain the average.
However, the fact we have declared and used four different variables in order to store the four grades inputted by the user, prevents us, from directly introducing a
"for loop" and rewriting the program accordingly.
Thus, we will start by modifying this code, in an equivalent version using one single variable to store the four grades inputted by the user.
Here is our new version where we, indeed, only have one variable called "note" used to store the four grades inputted by the user and a second variable, called "somme", initialized to 0.
We will ask the user to enter a value and store it inside "note". Then we have an assignment : "somme = somme + note".
This code will be repeated four times.
At this point, the variable "somme" will, indeed, contain the sum of the four variables inputted by the user, which we will demonstrate by an example.
With this goal in mind, let us suppose that the user types the values 5, 4, 6 and 4.
The variable "note" is not initialized, thus we have no clue what it contains now.
The variable "somme" has been intialized to 0.
As said, the first value entered by the user, was 5. Therefore, this instruction will assign 5 to the variable "note".
We move forward to this assignment, which will compute the value of this expression, namely compute : sum, that is, 0 plus note, which is 5, obtain the result of this expression, 5 again and store it inside the variable 
"somme".
The second value entered by the user is, here, 4. For this assignment we compute
"somme", which is 5, plus "note", which is 4, obtain 9 and store this 9 inside the variable "somme".
Obviously, at this point, the variable "somme" will be
0, plus 5, plus 4, plus 6 plus 4, which is indeed the sum of the 4 values entered by the user.
The edge of this new version is that we can now move this portion of code, repeated four times, into a "for loop".
This is precisely what we did here:
We reused the code from the last slide and simply modified the the "note" index while using a "for loop" with a variable declared inside the
"for loop", called i, intialized to 1 and going up to 4.
Do not forget to initialize the variable "somme" to 0.
Now, our program is only relevant in case the user wishes to compute the average of FOUR grades.
Let us suppose we are to leave the user choose the number of grades.
How should we modify the program ?
First of all, we set aside some space to add the modifications.
Now, we declare an int-type variable called
"nombre de notes".
We ask the user to input a value for this variable "nombre de notes".
Now, all we need to do is to replace this 4 here by the variable "nombre de notes".
Also, we should not forget to replace this 4 aswell so that we indeed compute the average.
This was not very difficult.
However, we have just spawned an error in our program.
Can you spot it ?
This error will manifest itself when the user enters the value 0 for the variable "nombre de notes".
In this case, a division by 0 will occur, causing a severe error.
There are several solutions to this problem. For example, we could test if the number of grades is, as expected, greater than 0.
To this end, we simply add a conditional statement, move the portion of code asking for the number of grades inside this conditional branch aswell as the instruction printing the average.
Let us conclude with the so-called nested loops.
To this end, let us go back to the example regarding the multiplication table of 5 which used a "for loop" to print the table. 
Now let us suppose that we wish to print all multiplication tables from 2 to 10.
We only need to move this
"for loop" into another "for loop" and modify it ever so slightly.
If we proceed this way, which we did here, keeping the "for loop" exactly as it was and moving it inside another
"for loop" using a variable j, initialized to 2 with the condition
"j less or equal to 10".
Thus, j will successively take the values from 2 to 10.
As such, this code will print 9 times the multiplication table of 5.
However, since we wish to print all the tables from 2 to 10, we only need to modify this 5 here to j and, most importantly, to modify this 5 to j aswell.
We obtain this code, which we will detail in order to verify its accuracy.
The first "for loop" starts with the declaration of a variable j initialized to 2 followed by testing the condition "j less or equal to 10". The condition is true and we thus enter the body of the
"for loop" j and exececute this instruction here printing "table de multiplication par", then the value of j, that is 2, then a " : ". Now we execute the
"for loop" i here, declaring a variable i, intialized to 1.
Then we test the condition
"i smaller or equal to 10", which is true. and thus enter the "for loop" i, executing this instruction here, with j's value being
2. We will print "multipliÃ© par " then the value of i being 1, then
"vaut" and finally the value of j times i, which is simply 2.
We then keep going, executing the "for loop" i, namely coming back here.
The increment statement will add 1 to the value of i. i will thus take the value 2.
The condition remains true and therefore we execute the body of the "for loop" i, with j still being 2.
Now, i is 2, we thus print 2 here and the expression j times i is now 2 times 2, that is 4.
And so on until i has the value 10. Through the increment statement, i will pass to 11, the condition will become false and we'll exit the i-loop.
Exiting the loop means resuming here.
We reach the end of the
"for loop"'s body.
Thus we will keep iterating within the "for loop" j, thus jumping back here, incrementing j, through the increment statement ++j. j therefore has the value 3.
The condition "j smaller or equal to 10" is still true and we enter the body of the loop, first executing this instruction, printing "Table de multiplication par", with j's value, which is now 3.
Again, we enter the 
"for loop" i. The variable i is initalized anew to 1. The condition is true, thus we enter the body of the "for loop" i and execute this instruction here.
This time, j is 3. We print
"multipliÃ© par", the value of i, which is 1, then then "vaut" and the value of this expression, which is 3 times
1, that is 3 and so on.