Welcome back Nature, In Code.
We're in Chapter three lecture nine.
In the previous video we briefly touched upon the concept of an array data structure into which we can store multiple values which will come in really, really handy.
Now in this lecture,
I'd like to delve just a little deeper into this concept of an array.
So here we have our code and as you can see here we set up this variable data and then we assigned it an empty array and we said we do this using these brackets here, these square brackets, not curly brackets because that will mean something quite different.
But the square brackets and then down here we pushed values into this data array.
So here we we pushed a current value of <i>P</i> into data.
And by the way we can, of course, this is just a variable, so we can call it whatever we want to as long as it's legal variable name.
And then later we passed that data around, so here we pass it to the drawline chart function which then visualizes the contents of this data.
And if we go over to browser, we can see this is, for example, what it looks like.
So here in this data array, we know we have a thousand elements and these are the <i>P</i> values of each generation and the draw line chart functions is basically programmed that it visualizes this array in this particular fashion.
So to understand more, learn more about this concept of an array, let's go straight into the JavaScript console here in the browser.
So what we did in the code was basically this, right, we said, var data equals an empty array and this is how one does it.
This is how one sets up an array.
And if you now would just look at the contents of this array, you can see, okay, it's an empty array and whenever you see these brackets, we're talking array.
And now we can put elements into this array as we did with the push method.
So we can say <i>data.push</i> and now we could, for example, push the values three into this array.
And then if you look at data, well we can see, okay, it's an array, these brackets here and it has the element three.
Let's push another element in the here-- whoops.
Push, let's say we're going to push five in here.
Okay, <i>data.push[5]</i>
If we now look at data, huh, now it has two elements, but still an array, of course, but it has two elements and you can see this because the elements are separated by a comma, which is what arrays look like, how they're structured in JavaScript.
Let's just go ahead and push another value.
Okay, let's push say... nine into this array and again take a look at the content.
So now you can see we have three elements here in this particular array.
All right.
So how do we access elements because here this is a clear and straightforward way how to add data into an array.
But how do we then access the data if we want to access certain elements?
Well, easy way to do it is-- so let me reload here the page so that we clear to console and I'm going to set up another array here, so I'm still going to say
<i>var data =</i> actually I'm going to initialize the array now with values right away.
This is something you can do as well.
So there's no need to always set up an empty array and then add elements by pushing them into the array.
You can also initialize the array with values right away, right here right here at the initialization, if you want to.
It's up to you.
Sometimes this can be quite handy.
And even if you do this, of course, in later you can say,
I want to add more elements, so I'm going to add push.
I'm going to add an eight here, for example, and so now data contains three, five, nine as we initialize it here and then another eight.
And by the way, I don't want to give the wrong impression that all values have to be unique,
I can just add another another value that's already in there.
So I'm just going to push another eight into this array.
And now if I look at data it contains the values three, five, nine, eight, and eight.
So there's nothing unique here about these values.
No, that's not a condition of an array.
An array can can contain many, many elements and they can be the same or they can be unique.
Another thing you note or certainly notice here is that the order in which the array contains the element will be preserved.
If you keep adding elements using push they will just be appended at the end but unless you go into the array and you start moving elements around, this structure, this particular ordering, the three being the first element, five being the second and so on will remain.
Here's an another really handy thing, something to you need to know how you can access the number of elements, how we can investigate how many elements to currently have,
I mean here it's easy, because you can see it.
Okay, there's five elements here.
But often you don't know because you're adding them programmatically or you're getting data from somewhere and you first need to know, okay, how many elements are we actually talking about?
So this length property here is quite handy.
Simply say <i>data</i> or whatever the name of your array is, <i>.length</i>
And you can see this correctly returns five here.
So how do I now access these elements?
So that's an extremely important idea here and it's also one of the major in gotchas in arrays and perhaps in all of programming, certainly for beginners, which is that you use the index of the element and you have to be careful because indexing starts at zero.
So what is the mean?
Well, if you want to access an element in an array you simply state the array and then directly these curly brackets-- sorry not curly brackets, directly these non-curly brackets.
Okay, these are array brackets.
And then you use the corresponding index.
So say you want the first element here.
Okay, so this element has index zero.
Okay, that's very important because we start counting at zero.
Okay, so I could say <i>data[0]</i> and it would correctly return the first element.
So, correspondingly if I wanted this next element here, the second element, 
I will have to say <i>data[1]</i>
Again, not <i>data[2]</i> because that would actually be at this element here, but <i>data[1]</i> because we start counting zero.
So this has index zero, index one, index two, index three, index four.
So this is important, okay, because it has a number of implications.
Number one, okay, indexing starts at zero, fine, but also indexing ends at length minus one.
And that's a typical mistake because we think, okay, we have five elements,
I want the fifth element so I'm going to say <i>data[5]</i> but this would of course be wrong because there is no fifth element, or there is no element with the index five.
Rather, that's the correct way to put it.
The last element in an array of five, length five, with five elements has index four.
Okay, so this is very, very important and if you stumble over this in the future,
I hope you quickly recognize the error because it's one that is easy to make in the beginning.
So let me reload this and look at something else about arrays.
So I'm going to set up this data array again and now I'm just going to initialize it with a couple of values.
For example, five, three, seven, nine, eight.
Okay, so this is our array; it has five elements.
So now what I would like to do is
I would like to iterate over this array and I would like to then output the elements here and this is something we'll use quite often actually.
Often we have some data stored in an array and then, we'd like to do something with it.
So for example, we'd like to plot it or we'd like to do some calculations with the elements, but we need to do with with each element.
And so how do we do this?
Well, iteration is something we've already talked about.
So we can use our old friend the four loop for example, to iterate over this array or to iterate through the elements.
So here's how we can do this.
You now know, of course, the four loop.
So we're going to set this up as we have before and I'm gong to initialize this counter variable here,
<i>i = 0</i>
Now what's the condition?
So what I'm going to do here is
I'm going to say,
<i>i</i> is smaller than <i>data.length</i> and we'll talk about this in a second.
Okay, as you know, <i>data.length</i> is five.
Okay because it's got five elements and so basically I'm going to say, as long as <i>i</i> is smaller than five, continue.
And of course, finally, we need to be sure to increment <i>i</i> by one here otherwise we'll get infinite loop, and we don't want infinite loops.
Then the curly brackets, <i>Shift Return</i>.
Okay, otherwise it would be executed right away.
So now let's for example outputs the... the value of <i>i</i> at each iteration.
Okay, <i>Enter</i>.
So as you can see here, this now starts at zero as it should.
And then it continues incriminating by one, up to four, so doesn't go to five because the last condition that is true here is if four is smaller than five, then it stops.
And so if you look at these numbers here, these are, of course, exactly the correct indexes of this array.
Okay, this is element zero, element one, element two, element three, element four.
So we can use this--
So I'm simply going to redo this loop and rather than saying <i>console.log (i)</i>
I am going to say <i>console.log</i>-- well data brackets <i>i</i> or the <i>i</i> elements, so to speak, of this array, and then if I do this 
I do get the elements and this is how we iterate over an array; very handy.
And you'll see this a ton of times throughout the rest of this course.
Okay, we iterate over some data structure, an array, using this condition here 
<i>i</i> smaller than our data structure <i>.length</i> and then we can use the fact that <i>i</i> is actually exactly the correct index of the array during the iteration.
Good; so something else I want to show you the last bit here,
I'm going to reload this again, so I have an empty console.
What we did so far is basically we initialized arrays and then we started storing numbers in them, something like you know this-- and oops.
And this works great, so we can see here, okay, we have four numbers stored here but actually a raise can contain any data type, not just numbers.
So I could, for example, now push another data type.
So for example, 
I could push a string in here.
Okay, I'm going to push the string data-- sorry "hello" into data and not a problem.
So let's take a look at data.
Yeah, data contains now the numbers: three, five, eight, six, as we initialized them here and then the string "hello".
So there's absolutely no problem with that.
You can add any type of of data into an array.
And so this actually it's very interesting when we consider that the array itself of course, is a data type and we can actually add arrays into arrays.
So this is often where things get a little confusing to beginners but it's really quite simple.
I mean think of an array as a box and, of course, you can imagine that you have a relatively large box and you put smaller boxes into this large box and the smaller boxes now contain the elements of interest but of course you wouldn't say that the larger box is empty now simply contains other boxes and it's the exact same way with with arrays.
So you know, we could, for example, say something like, okay, we're going to initialize an array,
I'm going to call it <i>A</i> here.
Okay, values one, two, three, for example, and I'm going to initialize an array <i>B</i>.
It has the values nine, eight, seven-- doesn't matter.
Okay, so now I have two arrays here and now what I could do, for example, is I could define an array, this would be our large box here <i>C</i>, that contains as the elements those two arrays.
Okay, so now <i>C</i> will be an array and the first element will be eight, which is another array with elements: one, two, three, and <i>B</i>, which is also another array with elements: nine, eight, seven.
So if I do this and now I take a look at <i>C</i>, here's what you see, you see ah ha, this is an array because you can see these two brackets and now Chrome here tells you,
"Hey, we have two arrays here" and you can actually click on these, on these little arrows here and you can see the elements, which actually nicely the index here and the length.
So this first one has a length of three and it has these elements and this was second one has a length of three as well and that's these elements.
And by the way these can have very different lengths.
As we said you can store anything into an array if you want to.
So this is now called a two-dimensional array because this was a one-dimensional array, okay, it has a list of elements.
But here, this is an array of arrays.
So it's a two-dimensional array and there can in fact be three-dimensional, four-dimensional, however many dimensions, you can imagine.
Now we're not going to go there for the time being we will eventually use three-dimensional arrays.
But for the time being, if you can wrap your head around the two-dimensional arrays like a box of boxes that contain the elements, then that's all great.
Why do we use this concretely?
Why do we need this?
Well if you now look over here again this a line of a simulation of genetic drift.
We have here the data array, it stores the thousand values for <i>P</i>.
Now what we want to do in the next lecture actually is to not only show one simulation but actually a couple, say 10.
So what we need now is a way to store 10 arrays that contain these different values of <i>P</i> and that information, those arrays themselves need to be stored somehow and of course we're going to use an array.
We're going to use a two-dimensional array and this is the basic idea behind it.
All right, so this concludes our brief introduction into arrays.
In the next lecture, we'll put that knowledge to use.
I'll see you there.
