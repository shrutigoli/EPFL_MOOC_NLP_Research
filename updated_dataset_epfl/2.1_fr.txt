1
00:00:04,290 --> 00:00:06,780
Now that our environment is ready, we can

2
00:00:06,780 --> 00:00:09,060
start working with Octave or Mat Lab.

3
00:00:09,730 --> 00:00:13,420
First we must define our objects called
variables,

4
00:00:13,630 --> 00:00:16,130
it can be numbers, vectors, matrices, and

5
00:00:16,130 --> 00:00:17,670
later we'll see something else.

6
00:00:18,390 --> 00:00:21,410
But first you must choose a name
for these variables

7
00:00:22,000 --> 00:00:24,820
in order to define them.

8
00:00:24,770 --> 00:00:26,690
It is not necessary to declare a variable.

9
00:00:26,800 --> 00:00:29,250
Its size and type are set automatically.

10
00:00:29,910 --> 00:00:37,200
So for example, if I want to set the
variable at - 3,4 I

11
00:00:37,200 --> 00:00:44,190
can simply type A equal - 3.4 and
Mat Lab or Octave recognizes

12
00:00:44,220 --> 00:00:47,400
automatically the size and value
of this variable.

13
00:00:48,650 --> 00:00:52,260
I can simply define column vectors.

14
00:00:53,090 --> 00:00:55,210
At that time, I have to use brackets.

15
00:00:57,620 --> 00:01:07,710
For example [- 3.1, further 1 semicolon
4.9, I close the brackets.

16
00:01:09,480 --> 00:01:13,800
And again, the variable b is
computationally created

17
00:01:13,800 --> 00:01:16,150
and defined size 1 by 2.

18
00:01:19,380 --> 00:01:21,510
Now I can also set row vectors.

19
00:01:22,330 --> 00:01:24,880
The same principle only that instead
of the semicolon, I

20
00:01:25,190 --> 00:01:27,140
just have to put a space.

21
00:01:27,380 --> 00:01:37,570
-2 space 1 4,67 I close the brackets.

22
00:01:39,530 --> 00:01:40,560
And here's my new variable.

23
00:01:42,910 --> 00:01:46,780
With the same principle, we can define
matrices of a size

24
00:01:47,980 --> 00:01:54,950
we can decide. D equals 2, 3 and 0,
that is the first line.

25
00:01:55,510 --> 00:01:59,610
And the second line: - 4, 5, 6.

26
00:02:04,730 --> 00:02:10,030
We have seen that the semicolon separates
the lines and

27
00:02:10,030 --> 00:02:11,110
the spaces separates the columns.

28
00:02:11,990 --> 00:02:15,330
When defining a matrix, we will first
define the first

29
00:02:15,330 --> 00:02:17,310
line and then the second.

30
00:02:18,360 --> 00:02:23,930
The variable name is important to be
able to reuse it

31
00:02:24,530 --> 00:02:26,410
thereafter for example within a program.

32
00:02:27,610 --> 00:02:34,140
We have an open choice for the name,
but it must begin

33
00:02:34,690 --> 00:02:38,420
with a letter. For example, if you start
with a number

34
00:02:38,440 --> 00:02:42,610
12 A equals 3, it will not work.

35
00:02:42,890 --> 00:02:45,330
And indeed, you have an error.

36
00:02:45,890 --> 00:02:50,730
Also you have a limitation regarding
the length of

37
00:02:50,730 --> 00:02:54,000
your name is the name (length) max.

38
00:02:53,880 --> 00:02:57,770
It will tell you the maximum length
in terms of

39
00:02:57,770 --> 00:02:59,450
characters in your variable.

40
00:03:01,450 --> 00:03:07,580
Also, be aware that if you have a
lowercase variable

41
00:03:08,010 --> 00:03:12,970
and a variable named almost the same,
but in capital letters,

42
00:03:13,690 --> 00:03:18,540
Mat Lab will consider these two
variables as different.

43
00:03:18,550 --> 00:03:25,940
And, if I minus one from the other,
I'll see

44
00:03:25,890 --> 00:03:30,410
there is a difference. Names must begin
with a

45
00:03:30,410 --> 00:03:35,020
letter, the number of characters
must be less than 63,

46
00:03:35,020 --> 00:03:38,320
which is still very large, and I have
to be careful if

47
00:03:38,320 --> 00:03:40,110
I write in lowercase or uppercase.

48
00:03:40,450 --> 00:03:43,620
They say the program is case sensitive.

49
00:03:45,760 --> 00:03:49,800
In your choice, be careful not to use
the name

50
00:03:49,800 --> 00:03:50,800
an existing variable.

51
00:03:52,150 --> 00:03:55,110
For example, there is the sine function.

52
00:03:56,290 --> 00:04:03,830
You write sin 3 times Pi, Pi is an
existing variable

53
00:04:03,830 --> 00:04:08,510
in Octave, it gives about 0.

54
00:04:09,040 --> 00:04:12,610
Now I do sin 3, it gives another number.

55
00:04:13,290 --> 00:04:19,870
But , if you mistakenly define sin 3
equals 2,

56
00:04:20,130 --> 00:04:21,870
what happens

57
00:04:21,850 --> 00:04:25,520
We will define a new variable different
from the function

58
00:04:26,050 --> 00:04:30,550
with 3 entries, because we put the 3
in brackets, and

59
00:04:30,930 --> 00:04:33,300
will be filled with a 0 and a 2.

60
00:04:34,210 --> 00:04:37,230
Now when you want to calculate sin of 3,
you find

61
00:04:37,420 --> 00:04:41,610
the variable that you defined yourself.

62
00:04:41,610 --> 00:04:47,490
If you want to recover the old, clean the
variable sin.

63
00:04:47,490 --> 00:04:53,710
Now, if I do sin 3 with the arrows, I find

64
00:04:53,770 --> 00:04:55,210
again the value of the function.

65
00:04:55,210 --> 00:04:59,800
You must also be careful there are
words called reserved

66
00:04:59,910 --> 00:05:04,900
words, that can not be used.

67
00:05:05,330 --> 00:05:08,340
We will see it later, but they are
for example: for, end,

68
00:05:08,560 --> 00:05:10,790
function and many others.

69
00:05:12,050 --> 00:05:18,270
I just spoke of Pi, Pi the number
that is more used

70
00:05:18,270 --> 00:05:21,340
in mathematics and if I want to see it,
I can type Pi

71
00:05:21,190 --> 00:05:25,760
and I get 3.1416. Now,  we known it's not

72
00:05:25,760 --> 00:05:29,890
the value of Pi we know every day.

73
00:05:29,890 --> 00:05:34,030
We would like to know some more figures.

74
00:05:34,100 --> 00:05:38,340
Then we can ask our Octave program
or Mat Lab to display

75
00:05:41,080 --> 00:05:46,530
more digits. Anyway, we won't have the
exact value

76
00:05:46,550 --> 00:05:51,120
of Pi, we will have a good approximation.

77
00:05:52,590 --> 00:05:55,100
You can still change the format.

78
00:05:56,010 --> 00:05:59,580
For example, having a lot of
significant figures

79
00:06:00,180 --> 00:06:10,070
but in scientific format. So now I have
3.1415 times

80
00:06:10,170 --> 00:06:12,300
10 raised to 0 therefore times 1.

81
00:06:13,690 --> 00:06:21,360
Now I can also do Pi times 100 and
I see that the

82
00:06:21,360 --> 00:06:26,270
only change I have is at the power of
10 in the end.

83
00:06:28,970 --> 00:06:32,850
To know more about the format,type

84
00:06:32,850 --> 00:06:38,430
help format and there is a whole series
of help is displayed

85
00:06:38,370 --> 00:06:42,500
After you can play them on your screen.

