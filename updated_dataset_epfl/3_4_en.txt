The choice of the quadrature nodes and weights is guided by the following theorem, theorem 3.1 of the book.
I recall the data: we have a quadrature rule that is M a positive integer, for example 1,2,3,4 or 5, quadrature nodes named t_1, t_2 up to t_M, quadrature weights called omega_1, omega_2 up to omega_M, so I have quadrature rule
J(g) which is the sum over j from 1 to M of the weights omega_j times g( t_j).
This formula is here to numerically approximate the integral between 
-1 and 1 of a function g( t ) dt, for g( t ) a continuous function defined on the interval [-1,1].
Next, once I have specified this quadrature formula, this comes down to using a formula to approximate numerically the integral between a and b of f(x) dx.
I denoted this formula L_h (f), and by using these nodes and weights
I obtain a quadrature rule which can be written this way: h over 2 times the sum over all the sub-intervals [x_i, x_1+1] which comes down to the sum for i from 0 to N-1 then you have the sum for j from 1 to M of the quadrature nodes times their weights, the weights omega_j, and the function f must be evaluated in the points (x_i + h (t_j + 1) / 2.
That is the numerical approximation of the integral between a and b of f(x) dx.
This is the problem statement.
The assumptions are the following.
Assumptions.
There are two for this theorem.
The first is the exactness of the quadrature formula, written J(g), that is the sum of omega_j times g( t_j ) for polynomials of degree r. de degrÃ© <i>r</i>,
Here r is any positive integer,
This means that for any polynomial of degree r, remember that I denoted, in chapter 1,
P_r the vector space of polynomials of degree smaller or equal to r, let p be a polynomial of degree smaller or equal to r,
I can calculate the integral on the interval [-1,1] of p(t) dt,
I can compare it with J(p) which by definition is the sum over j from 1 to M of the weights omega_j times p( t_j ), and I assume these two quantities, the integral and the approximation of the integral are equal.
Thus, I assume that the quadrature rule is exact for all polynomials of degree small or equal to r.
Next, the assumption is on the function f. I recall that my goal is to numerically approximate the integral between a and b of f(x) dx.
The assumption on f is that it is (r + 1) times continuously differentiable, where r is the polynomial degree here.
So f is (r + 1) times differentiable on the interval [a,b].
The conclusion is the following.
Conclusion.
For each function f (r + 1) times continuously differentiable on the interval [a,b], there exists a positive constant C such that for all h, h being the parameter tending to 0, that is the distance between two consecutive points x_i and x_i+1 which is assumed to be constant, so for all h positive, h smaller than b minus a and strictly positive, for all f there exists a constant C such that for all h we have the integral over a and b of f(x) dx minus L_h( f ),
L_h( f ) given by this formula, well this quantity is the error, and the error is smaller than C times h to the power (r + 1), we will use the notation O(h^(r + 1)).
The conclusion of the theorem reads: if the assumptions are fulfilled that is, if the quadrature rule is exact for polynomials of degree r, and if f is r + 1 times differentiable, then the error is of order h to the power r + 1.
The consequence of this theorem is the following: choose a function f which is r + 1 times differentiable, compute the error, and we can observe that the error, this quantity here, the error is divided by 
2 to the power r + 1, this power r + 1 here, each time that h is divided by 2. 
This is the result.
Therefore, we should choose the quadrature nodes and weights which specify the quadrature formula J(g), and therefore the formula L_h( f ), we should choose the nodes t_j and weights omega_j for j from 1 to M, so that r , the polynomial degree for which the quadrature rule coincides with the integral, so that r is the largest possible. 
For the rest of the lesson we will answer these two questions: suppose the quadrature nodes t1, t2, .. t_M given, how do you calculate the weights omega_1, omega_2 up to omega_M?
Given the nodes of the quadrature formula, how to compute the weights?
And the second question is: what is a good choice for the quadrature nodes t_1, t_2 up to t_M ?
These two questions will be answered by the end of the lesson.
