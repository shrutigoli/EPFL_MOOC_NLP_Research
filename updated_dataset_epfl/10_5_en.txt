Now I want to solve a nonlinear boundary value problem.
This nonlinear problem is the following. u must satisfy the following equation: 
-u''(x) plus a non linear term which
I write x times u(x)^3, equal to f(x) with x in the interval [0,1] with the boundary conditions u (0) = 0 and u( 1 ) = 0.
I remind you that the function f is defined on the 0,1 interval and I am searching for u which satisfies this equation.
In the previous linear example dans le cas linÃ©aire, c'est-Ã -dire si cet terme n'existe pas, when I apply 2 times f, well the solution to the problem is 2 times u.
This is not the case in the nonlinear problem.
As before, I subdivide the interval [0,1] into sub-intervals.
Here in 2, 4 and 8 and so on.
And again like previously,
I name the first node x_1, and x_N the last. 
So h, the space between two consecutive nodes is constant; it is 1 over N + 1.
I set x_i = i times h, for i from 0 to N + 1. 
Here I have a node x_i, to its left the node x_i-1 and to its right the node x_i+1.
And still like before, the goal is to calculate u_i, an approximation of u at point x_i. la solution du problÃ¨me au point <i>xi</i>.
So what do we do?
Like the linear example, we write the differential equation at node x_i.
So I have - u''(x_i) + x_i * (u(x_i)^3), where x_i is i times h, all this equal to f(x_i) which is known.
I can write these equations for all i from 1 to N. 
Now I can approach the second derivative using a central finite difference formula,
<i>FDF</i>, centrÃ©e, pour l'approximation de la dÃ©rivÃ©e seconde, the same formula as before.
Hence I have 2u(x_i), to the left minus u(x_i - h), the same as u(x_i-1), and to the right u(x_i+1), divided by h^2. comme tout Ã  l'heure.
There is an extrra term which is x_i times u(x_i)^3, this must be equal to f(x_i).
And of course, I have approximated the second derivative using a finite difference formula, so we have a remainder term O(h^2), this error term depends on the fourth derivative of u.
Now I can write a scheme, as before,
I replace u(x_i) by its approximation u_i, which I can compute using a computer. 
So the scheme is the following.
Scheme: something which can be implemented on a computer.
I have 2 u_i, minus u_i-1 to the left and u_i+1 to the right, all divided by h squared.
This term is the same as the linear example since it corresponds to the second derivative. 
There is another term which is x_i times u_i^3, which corresponds to x * u(x)^3, with x_i equal to i times h.
These two terms are equal to f(x_i), and I insist that f(x_i) is known. 
Like the previous case I drop the term in O(h^2).
So this must be satisfied for all i from 1 to N, with the same convention where for i = 1 the term u_0 which is involved is given by the boundary conditions: u_0 = 0.
The same for i = N,
I have u_N+1 also equal to 0, u_N+1 = 0 from the other boundary condition.
Here we now have scheme which can be implemented. 
Solving the linear boundary value problem led to solving a linear system, and now a nonlinear system must be solved.
I started from a nonlinear differential equation and I have a nonlinear system to solve, which I will re-write in a more compact form, the vector F(u) = 0.
Here u is the vector of unknowns, u_1, u_2 up to u_N, which are approximations of u(x_1), u(x_2) up to u(x_N), and then F(u), here I make a reference to chapter 8, about nonlinear systems, so F(u) can be written as F_1(u) where u is a vector, but the vector u has the components u_1, u_2 up to u_N, this is the first line,
F_2 depends on u_1, u_2 up to u_N, and so on up to the last equation
F_N depending on u_1, u_2, ... u_N. 
In this particular case, the first equation is
(2u_1 - u_2)/h^2  + x_1 * u_1^3 - f(x_1).
Here I have (2u_1 - u_2)/h^2, plus x_1 * u_1^3 minus f(x_1).
This must be equal to 0, and is my first equation. 
In the same way  I can write the second equation.
It will be - u_1 + 2_u2 - u_3 all divided by h^2, now this term for i=2, x_2 times u_2^3 minus f(x_2).
And so on until the last line which I will write.
So for i = N,
I have -u_N + 2u_N+1 all divided by h^2 plus x_N times u_N^3 minus f(x_N) and this equation must be equal to 0.
This is indeed a nonlinear system of N equations, here the N equations. 
And I also have
N unknowns, these are u_1, u_2 up to u_N.
These equations can't be solved independently one from another, they are linked, u_1 is linked to u_2, and u_2 is linked to u_3 and so on. 
These relations between the variables are nonlinear, so we have a nonlinear system to solve. 
To solve this system of nonlinear equations, we shall use Newton's method from chapter 8.
