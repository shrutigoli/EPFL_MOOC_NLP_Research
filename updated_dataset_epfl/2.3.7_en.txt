In this part we are going to focus on designing a provenance entity.
So we've seen that the platform does allow you to do these kind of things now, how do you do it in practice?
Again, I will not get into the technical details of actually writing an entity in this lecture but just: how does an entity look like.
The most important thing is to give it a name.
It sounds like a very simple thing to say but naming things appropriately and meaningfully so that the community can refer to it and understand very easily what your entity is is extremely important.
So naming your entity something that is understood by everyone around is going to help a lot.
So, like I said, you're going to define it through a schema and you have the ability to extend entities from one and other.
So, I already gave an example which is extending the generic provenance entity defined by the W3C prov to define your own but for instance,
I'll think of an example you have defined a data set entity and say, the data set has a category which is an ontology term and it has a name.
This is fine, now, earlier I took an example of an electrophysiology data set and we have briefly discussed that this type of data set also has another piece of information that is the stimuli that was used to stimulate the specific neuron in order to observe its electrical response.
So, this is also a data set.
It is an electrophysiology data set.
And so on this stage what you can do is to extend the data set.
And we'll write it if it is, for the sake of writing it short and at this stage I could define a stimuli property.
And what this means is, we have the data set defined with its own fields, and the electrophysiology data set extends the data set, that means it inherits the category fields, the name fields and in addition it brings a stimuli field.
So that allows you to build a hierarchy of entities that borrow information from one and other and organize your domain in a very logical way.
So, that's my second point, entities can extend each other.
All entities can be used in provenance, however it is not mandatory if all you wanted was to create a few electrophysiology data sets and save them into the system without referring to any provenance information you could do it, we do not force you to save the provenance.
Now, we do believe that adding provenance information does increase the value of your data sets does give a lot of context to potential users of your data sets and allows them to build trust in what you're generating by being transparent about the protocols you have used what specific mouse or rat you have been using how have you extracted your slices, and so on and so forth.
So you can push your entities into the platform and at a later stage you can also involve them in provenance.
There's no constrain there, you can do it at a later stage.
So, the second thing you have to do and I guess I want to be ahead of myself by designing this example is to define the properties of your entity.
And you really have to think of it as what questions do you want to ask the system, the platform, about your entities. 
And thinking of it in this way the listing of all the properties necessary in your entities are going to become a lot more intuitive because, in order to ask a question about:
"Give me all electrophysiology recording that has a stimuli called IDrest", which is a type of stimuli or a square , and obviously you need to capture this information in the meta data of your entities, it becomes obvious that you need to create a property that is stimuli and if the community has already defined an ontology that described this stimuli, let's import it because let's speak the same language it makes everybody's job a lot simpler and maybe if the specific property you want to use doesn't have a well-known vocabulary defined then let's define it and import it into the platform.
So, that's the way we like to approach the property definition of entities, and we find that it works really well.
So, what can you put into a property?
What can this be, what types can we give them?
We can have literal types, and by literal we mean simply integers, floating point values, strings.
We can have structured objects, which themselves can be defined with their own schemas and registered into the platform we're going to look at specific examples of that later and finally, this is an important one we can use ontology terms.
And we're going to expand a little bit in a later slide on ontologies and why are they so useful there.
Finally, you can define
Semantic constrains.
So this is really what you want to enforce when someone submits an entity, one of such entities into the system, so an instance of that entity, what do you want the platform to check for you? and maybe complain if one of these rules is broken so that the user knows:
"We were expecting you to define it in this way and not in that way."
"Please, fix it."
So it is really your gatekeeper when registering data into the platform.
What is at your disposal here?
You can use enumerations, so sets of strict values that you must use to fill one of these properties.
You can have numerical ranges, like it has to be a value between zero and ten and nothing else.
If someone submits an instance with a value eleven the system will say:
"Sorry, you broke that rule, fix it, then you will be able to save it."
And finally you can give specific entity types.
So when I said you can use structured objects this semantic constrain can then show that the value you've provided to this kind of structured object properties does match the expected types.
Also, if you use ontology terms, it can make sure that you use the term that really belongs to the defined ontology.
And finally, it may, and I say may, because some entities will have raw data attached, like an electrophysiology recording but some other entities will not have any raw data directly attached, for instance, a neuron.
A neuron by itself is a logical entity it doesn't have raw data.
It can be derived into a data set that itself has raw data.
So you have to make this decision, as to whether your entity has or has no raw data attached.
But it is just a simple tick box, you have to tick or not.
