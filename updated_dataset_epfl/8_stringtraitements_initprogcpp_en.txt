In this episode we will discuss the processing we can apply on character strings.
We can access the different characters of a string individually.
For example, let "chaine" be a string-type variable.
So, " chaine[i] " is the (i+1)th character of a "chaine".
It will be a char-type character.
Be careful though! as for arrays the first character has 0 for index.
The last one has  
" taille - 1 " for index, if "taille" (TN: means "size") is the number of characters in the string.
For example, we declare here a variable "demo" of the type "string".
It contains the character string "ABCD".
We declare here to characters :
"premier" and "dernier".
(TN: "premier" means "first", "dernier" means "last"). 
For now, they are not initialized.
We assign "premier" with the following assignment.
" demo[0] ". What is this?
Why, "demo" is the string here.
[0] corresponds to this first character.
Therefore, "premier" will receive the character 'A'.
Here, in "dernier" we will store the character with the index 3 of the string
"demo".
The character with the index 3 is :
0 , 1, 2, 3 this 'D' here.
We will thus store 'D' in our variable "dernier".
Here is another example : a quiz.
In your opinion, what will this code print upon execution?
We start here by declaring a variable called "essai" (TN: means "attempt", "trial").
It contains the character string "essai".
Here, we declare another character string initialized to the empty character string.
Now, we keep going with a "for loop".
There, the variable " i " will take the values 1, 2 and 3.
For now, " i " is 1.
Now, we enter the "for loop".
" essai[6 - 2 * i] what does it mean?
First, it will be a character.
Since "i" is 1, the index is 4.
The character with the index 4 in "essai" is : 0, 1, 2, 3, 3 the character 'i'.
All this is actually the character 'i'.
We will add it to what is contained in the "test" string.
Since "test" is empty, we will simply obtain the string "i" which we will store in the variable "test".
Now to this assignment :
" essai[i] ". Since "i" is 1, it is the character 's' here.
For now, "test" contains the string "i".
All this is now the string "si" which we will assign to "test".
Now, "i" is 2.
We can keep going inside the "for loop".
We will execute this assignment here.
This expression is 2.
Therefore, this is the character with the index 2 in the string "essai".
It is this 's' here.
Remember that "test" contains "si".
Thus, the result of this assignment is that we will store "sis" into our variable "test".
Let us keep going here.
"essai[i] " is the element with the index 2 of our variable "essai"; it is this 's' here.
"test" contains "sis".
Through this assignment, we will obtain "ssis" in the variable "test".
Let us keep going.
This time, "i" is 3.
The expression in this assignment is now 0.
This all here is therefore the character of the index 0 in the string "essai".
This is this 'e' here.
Let us add it to "test".
Now, we get 6 and move on to this assignment.
"essai[3]" is : this character here.
That means an 'a'.
We will add it to "ssise".
We thus obtain the string "assise" which we will put in the variable "test".
Ultimately, we will thus print "assise".
There are several functions specific to the type "string" defined in C++ just like for the vectors.
They are used with the following syntax.
First of all the name of the string-type variable followed by a period, followed by the name of the function we wish to use, followed by the eventual arguments required by the function.
For example, we may use the "size" function.
We will call it like this.
Let "chaine" be a string-type variable.
This function will return the size of the string, that is, the number of characters of the variable "chaine".
We also have a function called "insert".
It has two arguments.
First of all, the position of a character, defining where we wish to insert a second string.
It is defined with this argument here.
The call to this function will insert "chaine2" into the variable "chaine", starting with this position here.
For example, let us declare a string-type variable containing the string "abcd".
Now, we are calling the function
"insert" with the position "1" (this one) and the string "xx".
Why, this function "insert" will insert the string "xx" between the character index 0 and the character index 1, that is, here.
Then, we will store the result into the string "exemple".
After the call to this "insert" function, our variable "exemple" will contain the string
"axxbcd".
We may also use the
"replace" function.
It needs 3 arguments.
First of all, the position (just like the "insert" function we have just seen).
A number of characters.
The third argument is a character string.
This "replace" functions works a little like the "insert" function.
In stead, it will replace n character of the variable "string".
To make things clear, let us take an example.
After this declaration-initialization, the variable "exemple" contains the string
"abcd".
We are now calling the "replace" function with, for position, the value 1.
It corresponds to this 'b' here.
The "replace" function will replace two characters starting with this character 'b'.
That means we will replace this 'b' and this 'c'.
We will replace them with this string here which is "1234".
In the variable "exemple", we thus obtain the string "a1234d".
By the way, we may use this "replace" function to suppress the characters of a string.
To that end, we simply need to use the empty string as the third argument.
In this new example, our variable "exemple" contains the string "abcd".
As before, we will replace the characters "b" and "c".
But we will replace them with the empty string.
Ultimately, we will obtain the string "ad" in our variable "exemple".
The "find" function expects only one argument of the type "string".
It will return the index in "chaine" of the first character of the leftmost appearance of the string passed as argument.
So, what does it mean?
Let us take an example.
Let "exemple" be a variable initialized to this character string here.
We are  calling the "find" function, passing "ab" as parameter.
Starting from the left, "ab" appears for the first time here, in "exemple".
The index of the first character is 2 since we start from 0.
Our "find" function will thus return the value 2.
There is also the reverse function, starting from the right.
It is the function "rfind".
So, if we call our "rfind" function on this same "exemple" string.
As we said, we are starting from the right.
The first time "ab" appears in this string is here.
The index of this character here is 0, 1, 2, 3, 4, 5, 6
Thus, our "rfind" function will return the value 6 in this case.
By the way, please note that we cannot be sure the string passed as argument to the functions "find" and "rfind" will be found in the string to which we apply these functions.
In this case, the functions "find" and "rfind" will return a predefined value written " string::npos " meaning that we have not found the string passed as argument.
For example, with this instruction here.
Let "exemple" be, like in the previous examples, contain "baabbaab".
Here, we are seeking the string "xy".
Since the string "xy" does not appear in the string "exemple", the function "find" will return the predefined value
" string::npos ".
Finally, a last function called "substr".
It has two parameters : "depart" and "longueur" (TN: "depart" means "start" and "longueur" means "length").
On this example, it is applied on the character string "chaine".
This call to the function "substr" will return the sub-string of "chaine" which has, as length, "longueur" passed as argument and starting with the starting position "depart".
For example, we are considering this character string
"exemple" which contains this value.
The call to this function :
" exemple.substr(8, 4) " will return a sub-string beginning with the character of the index 8.
So, 0, 1, 2, 3, 4, 5, 6, 7, 8 we will thus jump here.
We will take 4 characters starting with this 't'.
Thus, the call to this function will return the string "tous".
VoilÃ ! this is all we will see regarding the string-type functionalities.
Be aware that there are many others, all operating based on the same principles.
