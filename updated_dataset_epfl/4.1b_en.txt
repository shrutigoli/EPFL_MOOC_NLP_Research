Defined functions by you in an Mpoint file are very useful to be reused on one side, and the other also to make a fairly complex program structure.
So you can have a library of several functions and you know after which to call at the right time.
There are also anonymous functions, they are much easier, faster to use, but only after you put them in the trash and you may not use them again.
How do we build these anonymous functions?
We arrived here. It was A, then Z
Now we would like to build a function that does the same thing, so A times Z or A times X.
But we did not want to build a file that erases all these.
The syntax is quite simple.
It is F. What is F?
This is a function that takes as input
A and X.
And as output, it will make A times X.
Now we can turn my script.
My function F is defined.
You see. it's F, which takes A and X.
I can evaluate it somewhere.
So, I can evaluate it here, since the script gave me access to its variables. I can take
A and Z and I get the vector, which incidentally is the same as V.
So here it is not possible to integrate comments.
The only possible comments we can do is just before its definition, and say F calculates AX .
That's the first thing.
Now, there is another feature of these anonymous functions.
Suppose we have a parameter to be inserted, for example a parameter which is 3 equal to 3, and
I want to use it here.
A lowercase a times X.
I backup. I clean my window.
Now I run my script, and I can check what it gives, A, Z.
I multiplied by 3, the earlier results.
If I change A, will I get a different result?
For example, I say A 0.
Ok. I again call F of A Z.
And indeed, we have not changed the value of the evaluation function.
Why? Because the value of A has been incorporated directly in the anonymous function.
I can even clean the variable A, evaluate the function F.
This function will work even if, when
I look at the function, it shows, it's function A, so the small a times the matrix A times X.
So it is also useful to use these anonymous functions to integrate parameters directly and after, forget these parameters.
So here I can tell myself that we will clean the small a.
Thus there is another way to quickly define functions.
It's called inline functions.
So how is the syntax?
I must say G.
So I take another function, but this time I say this inline function equals A times X.
So here I have a string of characters that describes the operations to do.
And now I have to say what are the inputs of my function.
So here the inputs are A and X.
I have to tell it explicitly what are the inputs.
I can make this definition and I can also do a call, therefore equals W G2A, Z.
And I can rotate my script.
Look at what W is and I see it's the same as V.
Let's try to put this parameter A inside.
So I need it .
I erase the client A.
I say A equals, this time I take 0, so
I'm going to see if it is taken into account or not.
I do A times call it P, it is a supplementary parameter.
Therefore, P times A times X.
And now I'll run my script.
W is 0. Actually the parameter was considered.
Let's see if I can clean it.
I'll clean the parameter P, but before calling the function.
As we ought to do here.
So here, before we cleaned it immediately and still use the function.
Is this still the case?
I'll run. And the parameter was considered.
P is not defined, but when you define the function G, in fact if you call the function
G with A and a, you find the parameter.
Note, it's possible that in some versions of Octave or Matlab.
When you run these last three lines, you have an error.
There are functions that are predefined.
Build in functions.
These are accessible at any time, and you can see their use by dividing L.
Then there are functions defined by the user.
We saw a small example of how to implement it.
We will see more later in the course.
After there are inline anonymous functions that we will use rather for calculations or very fast uses.
We will not save them somewhere for later use.
Use proper function, or define new ones, it is essential to be able to write algorithms or programs.
Organizing them into files helps isolate some features, and also avoid possible bugs.
Unfortunately it is not possible to avoid all the bugs.
There is no recipe for it.
Often, it is the experience that will help you to solve bug problems, when you meet them.
