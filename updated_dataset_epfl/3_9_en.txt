Now I will present some numerical experiments with different quadrature formula, in the interval [a,b], with a equal to 0 and b equal to 1.
Let us take the function f defined by x times sin(2 k pi x ) with k equal to 10. Now I calculate by hand the integral between a and b of f(x) dx.
After integrating by parts,
I find minus (1 / 2) times k pi.
We can plot this function, with gnuplot for example.
Here the command plot on the interval 0 to 1 of x sin(20 pi x).
You can see that this function oscillates strongly on the interval [0,1].
Now I can write a program which allows me to calculate L_h( f ).
L_h( f ) is the approximation of the integral between a and b of f(x) dx.
First I consider the trapezoidal formula.
I have 2 quadrature nodes which are the nodes equal to t_1 = -1 and t_2 = 1.
I will also use the Gauss formula with two nodes.
So M is still equal to 2.
This time the quadrature nodes are t_1 equal to -1 / sqrt(3) and t_2 equal to 1 / sqrt(3).
Finally I will also consider the
Gauss formula with three nodes,
I haven't presented this one so far but here it is:
I use 3 nodes, the first is minus the square root of 3 over 5, the second t_1 equal to 0, and the third equal to sqrt( 3 / 5 ).
Now I have  a program that calculates the error, which is the integral from a to b of f(x) dx, previously calculated here, minus 1 / 2 times k pi, and the error is the difference between this exact value and the corresponding approximated value calculated using L_h( f ), depending on h.
Here is such a program.
This program takes as input N, the number of sub-intervals in the interval [a,b] and returns three errors the one corresponding to the trapezoidal rule, the error corresponding to the
2-node Gauss rule, and the error corresponding to the
3-node Gauss rule.
With h equal to b minus a divided by N, the length of each sub-interval which approaches 0.
For example the trapezoidal rule, the function L_h( f ) is given by the following formula:
You have the sum of h times f(x_i) plus f (x_i+1).
If I run this code, I get the errors [e1, e2, e3] equal to "integration(10)".
Here with N equal to 10, well the error for the trapezoidal rule is 0.016, for the 2-node Gauss rule it is 0.012 and for the 3-node Gauss rule the error is 0.019.
Now by repeating the same calculation with 20 points instead of 10, so twice as many points, you can observe that the error for the trapezoidal rule has not diminshed since the function oscillates strongly.
We need a larger N to have a correct approximation.
Nevertheless, you see here that the error corresponding to the Gauss formula with 2 nodes is much lower than previously. and even more so in the case of the 3-node Gauss rule.
Here i use 40 sub-intervals and this time you can observe that all three errors are smaller.
The order of magnitudes are 10 minus 4,
10 minus 6 and 10 minus 9 for the 3-nodes Gauss rule. 
Now the question is to know whether the observed convergence rate matches the theoretical rate stated previously in the lesson?
In this figure, we have plotted the error, on the y axis, with respect to to h, on the x axis, in a log-log scale. 
One can observe that the points are found on lines with different slopes. 
The trapezoidal formula has a slope of 2 which indicates that the error has convergence of order 2.
The Gauss formula with 2 nodes has a slope of 4, which indicates an error of h to the power 4.
And finally the 3-node Gauss rule has a slope of 6 which indicates an error following h to the power 6.
The experimental results indeed match the theoretical ones.
