1
00:00:00,680 --> 00:00:06,030
Alright, so last lesson we looked at
creating observables, and in

2
00:00:06,030 --> 00:00:11,680
particular we were left with the exercise
to create an observable from an iterable.

3
00:00:11,680 --> 00:00:14,470
And we're going to tackle that problem
right now.

4
00:00:14,470 --> 00:00:16,990
So here's a picture of what we want to do.

5
00:00:16,990 --> 00:00:21,260
We want to define a function from.
That takes an iterable,

6
00:00:23,500 --> 00:00:28,460
here, collection of values, and returns it
into an observable.

7
00:00:28,460 --> 00:00:31,400
And the way we want to do that is by
pulling each

8
00:00:31,400 --> 00:00:37,190
value out of the iterable and then pushing
it into the observable.

9
00:00:37,190 --> 00:00:41,280
Now the real challenge is that we don't
want to do this only for a finite

10
00:00:41,280 --> 00:00:43,920
sequence like we see here, but we also

11
00:00:43,920 --> 00:00:46,110
want this to work for an infinite
sequence.

12
00:00:47,750 --> 00:00:48,320
Okay.

13
00:00:48,320 --> 00:00:52,280
Here's our signature of the function that
we are going to define.

14
00:00:52,280 --> 00:00:55,640
Function from takes an iterable of t and
returns

15
00:00:55,640 --> 00:00:59,050
an observable of t, and this is our test
case.

16
00:00:59,050 --> 00:01:04,150
We want to define an infinite sequence of
numbers, nats.

17
00:01:04,150 --> 00:01:09,040
Then we want to turn that infinite
sequence into an observable sequence.

18
00:01:09,040 --> 00:01:10,530
We want to subscribe to it.

19
00:01:10,530 --> 00:01:14,000
But then we want to unsubscribe to it, and
terminate

20
00:01:14,000 --> 00:01:16,590
the subscription.
Can we make this work?

21
00:01:18,690 --> 00:01:23,630
First of all, let's define this infinite
sequence of numbers as an iterable.

22
00:01:24,710 --> 00:01:31,080
To do that, we just use anonymous classes,
so we define a new iterable.

23
00:01:31,080 --> 00:01:32,050
How do we do that?

24
00:01:32,050 --> 00:01:37,220
Well, in order to define a new iterable,
we need to define and iterator.

25
00:01:37,220 --> 00:01:43,010
And in order to define an iterator, we
need to define has next and next.

26
00:01:43,010 --> 00:01:43,760
And in this case,

27
00:01:43,760 --> 00:01:49,290
what we will do is just before we create
the iterator, we will allocate

28
00:01:49,290 --> 00:01:54,190
a mutable variable, and then our iterator
will always say that it has

29
00:01:54,190 --> 00:01:58,990
a next value, and when you ask for the
next value, it increments.

30
00:02:00,060 --> 00:02:04,970
And the counter and returns the value, so
when you iterate over this collection of

31
00:02:04,970 --> 00:02:10,144
natural numbers, you get 0, 1, 2, et
cetera.

32
00:02:10,144 --> 00:02:18,430
To create our observable, we're going to
use, of course, our factory method create.

33
00:02:18,430 --> 00:02:23,380
The signature of the method is here just
for reminder.

34
00:02:24,610 --> 00:02:27,790
Observable apply it has a subscribe that

35
00:02:27,790 --> 00:02:30,270
takes an observer and returns a
subscription.

36
00:02:30,270 --> 00:02:35,850
And as the picture shows in that function
you can use the observer to go onNext

37
00:02:35,850 --> 00:02:40,280
if you want to produce a value on the
output observable.

38
00:02:40,280 --> 00:02:43,640
And you call onComplete or onError when
you're done.

39
00:02:43,640 --> 00:02:47,600
And the subscription that you return here
is the subscription

40
00:02:47,600 --> 00:02:51,000
that you get back when you subscribe to
this observable.

41
00:02:51,000 --> 00:02:53,110
And we have seen this method before, but
we

42
00:02:53,110 --> 00:02:55,660
will see much more of it in this lecture.

43
00:02:58,150 --> 00:03:00,380
Here's our first attempt to define from.

44
00:03:01,490 --> 00:03:05,010
What we do is, we call our constructor
function,

45
00:03:05,010 --> 00:03:07,370
pass it in observer, and what do we do?

46
00:03:07,370 --> 00:03:11,290
Well, the only thing we can really do is
to, foreach over the

47
00:03:11,290 --> 00:03:17,110
sequence, and whenever we get the next
value, push it into the observer.

48
00:03:17,110 --> 00:03:19,440
And when we're done, we call onCompleted.

49
00:03:20,450 --> 00:03:23,990
Of course, this function here must return
Subscription.

50
00:03:23,990 --> 00:03:24,810
But what can we do?

51
00:03:24,810 --> 00:03:26,930
Well, I think the only thing that we can

52
00:03:26,930 --> 00:03:30,920
do at this point is return an empty
Subscription.

53
00:03:30,920 --> 00:03:33,010
Now let's see if our test works.

54
00:03:33,010 --> 00:03:38,310
So what we do, is we call our natural
numbers, infinite stream of numbers.

55
00:03:38,310 --> 00:03:42,100
We subscribe to it, with print line.

56
00:03:42,100 --> 00:03:46,540
And guess what?
We will never reach the unsubscribe.

57
00:03:46,540 --> 00:03:50,230
And why is that?
Well, if this stream is infinite,

58
00:03:50,230 --> 00:03:51,460
this will not terminate.

59
00:03:51,460 --> 00:03:55,270
So, we will never reach this point, which
means that we

60
00:03:55,270 --> 00:03:59,210
will never reach this point because the
subscription is never returned.

61
00:03:59,210 --> 00:04:02,118
Oops, Houston, we have a problem.

62
00:04:02,118 --> 00:04:07,440
So to recapitulate, here is our code
again.

63
00:04:07,440 --> 00:04:10,250
The problem was that we never got there,
we never

64
00:04:10,250 --> 00:04:15,140
got past the onCompleted, and hence, we
never got here,

65
00:04:15,140 --> 00:04:18,450
on the consumer side, past the
subscription.

66
00:04:18,450 --> 00:04:19,940
So, what should we do?

67
00:04:19,940 --> 00:04:23,250
Well, the solution is that we should
introduce

68
00:04:23,250 --> 00:04:26,720
schedulers, we should introduce
concurrency and what we're going

69
00:04:26,720 --> 00:04:28,460
to do is, we're going to do the

70
00:04:28,460 --> 00:04:33,050
iteration over the source interval on a
separate thread.

71
00:04:33,050 --> 00:04:36,440
That calls on next on the observer, such
that

72
00:04:36,440 --> 00:04:40,090
the consumer here can unsubscribe on its
own thread,

73
00:04:40,090 --> 00:04:43,130
and then we will not be stuck at this
point.

74
00:04:45,730 --> 00:04:52,440
Let's look back in the past at future.
When we talked about futures we saw that

75
00:04:52,440 --> 00:05:00,670
every future took a execution context on
which the work of that future was run.

76
00:05:00,670 --> 00:05:04,410
So, the constructor function for future
takes.

77
00:05:04,410 --> 00:05:10,350
A block for the body.
An execution context and returns a future.

78
00:05:10,350 --> 00:05:10,698
In,

79
00:05:10,698 --> 00:05:14,760
for observables, we have a similar
concept.

80
00:05:14,760 --> 00:05:19,020
Except, that instead of an execution
context, we have a scheduler.

81
00:05:19,020 --> 00:05:21,520
And, what we'll do know is we'll look at

82
00:05:21,520 --> 00:05:25,620
the differences between the execution
context and the scheduler.

83
00:05:25,620 --> 00:05:29,680
Because, there's a difference between
observables and futures, remember.

84
00:05:29,680 --> 00:05:32,840
That futures are things that return one
result,

85
00:05:32,840 --> 00:05:36,480
and observables are things that return
multiple results, and

86
00:05:36,480 --> 00:05:40,120
that will have an influence on the way
that we define scheduling.

87
00:05:43,220 --> 00:05:47,080
The execution context for futures is
defined as follows.

88
00:05:47,080 --> 00:05:52,790
It has a single method, execute, that
takes a runnable and returns unit.

89
00:05:52,790 --> 00:05:55,590
The reason that it takes a runnable is for
legacy reasons.

90
00:05:55,590 --> 00:05:58,560
So a runnable is an existing java type
that

91
00:05:58,560 --> 00:06:04,510
really corresponds to a, a block that
returns unit.

92
00:06:04,510 --> 00:06:08,180
So in our x we can do the more modern
thing,

93
00:06:08,180 --> 00:06:10,550
the more scholar thing.
So instead of runnable.

94
00:06:10,550 --> 00:06:14,410
We take work of type you know, arrow unit.

95
00:06:14,410 --> 00:06:17,020
Now the other difference is that in

96
00:06:17,020 --> 00:06:19,740
the future, it's impossible to cancel the
work.

97
00:06:19,740 --> 00:06:26,110
So once you execute a runnable, there's no
way to cancel it, it will start running.

98
00:06:26,110 --> 00:06:30,310
But for our x, as we have seen, we want to
unsubscribe.

99
00:06:30,310 --> 00:06:33,600
So, instead of returning unit,

100
00:06:33,600 --> 00:06:35,390
we return our subscriptions.

101
00:06:35,390 --> 00:06:38,770
And we have seen, a lot of things about
subscriptions in the

102
00:06:38,770 --> 00:06:42,710
previous lesson and we will use some of
them here as well.

103
00:06:44,420 --> 00:06:48,180
Okay, here's a very small example of using
a scheduler.

104
00:06:48,180 --> 00:06:52,820
one of the, schedulers that we will use a
lot is the NewThreadScheduler.

105
00:06:52,820 --> 00:06:54,110
And what that will do, is, when you

106
00:06:54,110 --> 00:06:58,940
schedule work on the NewThreadScheduler,
it will take that

107
00:06:58,940 --> 00:07:02,930
block, schedule it on another thread, and
it will run there.

108
00:07:02,930 --> 00:07:06,710
And in this case, it will just print line
from a different thread.

109
00:07:06,710 --> 00:07:10,150
Very simple.
Okay then.

110
00:07:10,150 --> 00:07:13,160
Let's try to define our function from
using schedulers.

111
00:07:14,330 --> 00:07:17,040
Here is the signature from takes an

112
00:07:17,040 --> 00:07:21,210
iterable, now it takes also an implicit
scheduler.

113
00:07:21,210 --> 00:07:24,170
Returns an observable, all clear.

114
00:07:24,170 --> 00:07:25,200
So what can we do?

115
00:07:25,200 --> 00:07:30,810
Well, we call again our observable create,
taking an observer, and what

116
00:07:30,810 --> 00:07:36,410
we do this time is we schedule the foreach
on a new thread.

117
00:07:36,410 --> 00:07:36,960
And when the

118
00:07:39,140 --> 00:07:44,430
foreach terminates we call onCompleted.
Does this work?

119
00:07:45,850 --> 00:07:49,430
Well, unfortunately, it doesn't work yet.

120
00:07:49,430 --> 00:07:53,270
Because when you schedule work on the
scheduler, it can

121
00:07:53,270 --> 00:07:58,240
only be unsubscribed, when the work has
not yet started.

122
00:07:58,240 --> 00:08:00,560
So once this work has been scheduled,

123
00:08:00,560 --> 00:08:04,290
once you start foreach-ing over your
collection,

124
00:08:04,290 --> 00:08:07,750
there's typically no way you can cancel
that work anymore.

125
00:08:07,750 --> 00:08:11,770
So you only have a very brief moment in
time where you can cancel

126
00:08:11,770 --> 00:08:16,410
this, but you can only do that when onNext
has not been called yet.

127
00:08:16,410 --> 00:08:18,670
So this is not a very useful
implementation.

128
00:08:20,750 --> 00:08:25,000
In order to do, do a second attempt to
write a front function,

129
00:08:25,000 --> 00:08:29,230
we will look at some of the other methods
in the scheduler trait.

130
00:08:29,230 --> 00:08:33,830
We have already seen the first one, takes
a unit of work and reduces subscription.

131
00:08:34,880 --> 00:08:39,060
What we'll use next is the second
signature here.

132
00:08:39,060 --> 00:08:42,200
Which is more interesting and more
powerful.

133
00:08:42,200 --> 00:08:46,340
Because, what it does is, it takes a
function that gets a Scheduler

134
00:08:46,340 --> 00:08:47,790
as an argument.

135
00:08:47,790 --> 00:08:53,510
And this function can then use that
Scheduler to schedule multiple steps.

136
00:08:53,510 --> 00:08:57,250
It also returns the subscription that is
then returned to

137
00:08:57,250 --> 00:09:00,700
the caller, that the caller can use to
cancel these steps.

138
00:09:01,870 --> 00:09:05,400
And then, what we will do is we will take
that function

139
00:09:05,400 --> 00:09:10,910
and implement the third overload here with
that, with the second one.

140
00:09:10,910 --> 00:09:11,400
And the third

141
00:09:11,400 --> 00:09:16,310
overload has this rather bizarre looking
type here.

142
00:09:16,310 --> 00:09:18,790
Takes an arrow unit to unit.

143
00:09:18,790 --> 00:09:22,780
And it returns a subscription.
Let's look at that guy.

144
00:09:24,640 --> 00:09:30,960
Here's our second attempt to define from.
Again, should be no surprise, we use

145
00:09:30,960 --> 00:09:36,540
our create function, taking of the server.
But, what we will do now is, we will

146
00:09:36,540 --> 00:09:41,970
unfold the loop that was done by the
foreach and do it ourselves.

147
00:09:41,970 --> 00:09:44,600
So, the first thing we do, is we take the

148
00:09:44,600 --> 00:09:51,490
iterator from the iterable, and then we
schedule the following work.

149
00:09:51,490 --> 00:09:54,590
We first look if there's still a value.

150
00:09:54,590 --> 00:09:57,610
In which case we call onNext.

151
00:09:57,610 --> 00:10:01,480
And then we have rescheduled our self
recursively.

152
00:10:01,480 --> 00:10:04,640
And if there is no more work, we stay, we
are completed.

153
00:10:06,750 --> 00:10:08,820
Here's how this looks in a picture.

154
00:10:08,820 --> 00:10:13,900
Here we see our condition if there's still
a next value, what do we do?

155
00:10:13,900 --> 00:10:18,600
We call on next with the next value, and
then what we do

156
00:10:18,600 --> 00:10:23,570
is we recursively schedule ourselves in
the future, and what will happen there?

157
00:10:23,570 --> 00:10:26,360
Well this will call the same condition
again.

158
00:10:26,360 --> 00:10:31,810
So we will go on and on and on, until at
some point our source

159
00:10:31,810 --> 00:10:34,364
is exhausted, and then we call on
completed.

160
00:10:37,170 --> 00:10:39,830
Does this work?
Let's run our test.

161
00:10:39,830 --> 00:10:44,560
Again, there's our infinite stream, we
turn it into

162
00:10:44,560 --> 00:10:47,508
an observable and subscribe to it with
print line.

163
00:10:47,508 --> 00:10:52,430
And guess what, when we now unsubscribe
from it we will

164
00:10:52,430 --> 00:10:57,380
terminate the stream, because this guy
will schedule itself

165
00:10:57,380 --> 00:11:02,670
recursively and at each schedule there's a
chance for it to unsubscribe.

166
00:11:06,080 --> 00:11:11,370
Of course, we're all curious how this
recursive scheduler works.

167
00:11:11,370 --> 00:11:13,750
So let's drill down into the
implementation.

168
00:11:15,120 --> 00:11:21,620
The recursive scheduler, schedule, takes
work, that takes

169
00:11:21,620 --> 00:11:26,890
the continuation and returns unit, and it
returns as always a subscription.

170
00:11:27,890 --> 00:11:31,100
Now how are we going to make this work?
Well of course if we are going

171
00:11:31,100 --> 00:11:34,435
to take multiple steps, what we need to do
is we need

172
00:11:34,435 --> 00:11:38,770
at every step we need to be able to
unsubscribe from this step.

173
00:11:38,770 --> 00:11:39,720
So what we will do is we

174
00:11:39,720 --> 00:11:44,250
will use our good friend
MultipleAssignmentSubscription to create

175
00:11:44,250 --> 00:11:47,510
a subscription that we pass to the
outside,

176
00:11:47,510 --> 00:11:49,990
that the outside can use to unsubscribe
for.

177
00:11:49,990 --> 00:11:51,370
And what we will now do is we

178
00:11:51,370 --> 00:11:56,630
will schedule work and then update the
MultipleAssignmentSubscription every

179
00:11:56,630 --> 00:11:58,930
time we reschedule work.

180
00:11:58,930 --> 00:12:02,330
So every time we reschedule work, we will
update

181
00:12:02,330 --> 00:12:06,130
the subscription with the current batch
that's in the scheduler.

182
00:12:07,970 --> 00:12:08,970
Sounds simple?

183
00:12:08,970 --> 00:12:10,760
It is simple.
Let's look at it.

184
00:12:10,760 --> 00:12:12,010
What we do is we schedule.

185
00:12:12,010 --> 00:12:15,900
We get a scheduler.
What we do is do is we schedule some work.

186
00:12:15,900 --> 00:12:17,420
And we return the subscription.

187
00:12:18,420 --> 00:12:21,770
And what work did we schedule?
Well, as soon as we get

188
00:12:21,770 --> 00:12:27,540
run, we update a subscription with
scheduling ourselves, doing

189
00:12:27,540 --> 00:12:31,750
the work, and passing the continuation
which will call itself.

190
00:12:33,780 --> 00:12:38,190
Here's a picture that explains this in a
more visual way.

191
00:12:38,190 --> 00:12:40,200
So here we see a scheduler.

192
00:12:40,200 --> 00:12:43,580
That's the red bubble here.
And this is our work.

193
00:12:43,580 --> 00:12:46,880
So, every time the work gets scheduled to

194
00:12:46,880 --> 00:12:51,320
run, it does some work, and then
reschedules itself.

195
00:12:51,320 --> 00:12:53,670
And when it reschedules itself, it updates
the

196
00:12:53,670 --> 00:12:57,830
multiple assignment subscription to point
to the current work.

197
00:12:57,830 --> 00:12:58,960
So when you sub,

198
00:12:58,960 --> 00:13:02,040
unsubscribe here, it will always cancel
this work.

199
00:13:02,040 --> 00:13:04,690
If you don't get cancelled, you get run
again.

200
00:13:04,690 --> 00:13:08,300
You do it again, and then you reschedule
yourself on and on and

201
00:13:08,300 --> 00:13:14,180
on, until you either don't reschedule
yourself, or when you get here canceled.

202
00:13:16,930 --> 00:13:19,070
Now, anyone that has seen this
implementation

203
00:13:19,070 --> 00:13:22,870
of schedule here, would ask why did

204
00:13:22,870 --> 00:13:28,700
you do this kind of, you know, really
weird function here with three parameters?

205
00:13:28,700 --> 00:13:31,710
Because as real scholar programmers, we
all know

206
00:13:31,710 --> 00:13:34,950
that we can define a local definition
right

207
00:13:34,950 --> 00:13:37,240
up there such that we can capture the

208
00:13:37,240 --> 00:13:41,250
parameters in the closure instead of
passing them explicitly.

209
00:13:41,250 --> 00:13:41,950
So let's simply

210
00:13:41,950 --> 00:13:43,490
find this code a little bit.

211
00:13:43,490 --> 00:13:47,510
To make it look more like, you know, that
we're functional programming ninjas.

212
00:13:49,750 --> 00:13:55,435
Hear this, what we do is we have a local
definition now for loop.

213
00:13:55,435 --> 00:14:00,620
It still returns Unit, but now you see
that it can close over the schedule.

214
00:14:00,620 --> 00:14:05,810
It can close over work, and of course it
still calls itself recursively.

215
00:14:07,300 --> 00:14:08,670
As an argument to work.

216
00:14:12,030 --> 00:14:14,550
This is all nice and well to do this

217
00:14:14,550 --> 00:14:19,050
crazy thing with recursive scheduling, but
as functional programmers

218
00:14:19,050 --> 00:14:21,310
we also know that we always want to
capture

219
00:14:21,310 --> 00:14:24,900
patterns that we often use as a high order
function.

220
00:14:24,900 --> 00:14:26,660
And that's what we're going to do now.

221
00:14:26,660 --> 00:14:32,390
What we want to do is, we want to use this
weird recursive scheduler to define

222
00:14:32,390 --> 00:14:37,280
a new constructor function for observable,
that will just return

223
00:14:37,280 --> 00:14:42,410
an infinite stream of units by recursively
scheduling itself.

224
00:14:42,410 --> 00:14:44,780
So here's a picture of that stream, so
what we

225
00:14:44,780 --> 00:14:46,280
want to do is you want to have a stream of

226
00:14:46,280 --> 00:14:50,330
ticks, and each of these ticks is
scheduled recursively, such

227
00:14:50,330 --> 00:14:55,240
that we can cancel the subscription in
between all these steps.

228
00:14:58,860 --> 00:15:02,640
In order to write this code, of course I
could do it

229
00:15:02,640 --> 00:15:06,810
right here, but I think its more
interesting if you try it yourself.

230
00:15:09,280 --> 00:15:10,980
lets see what it does.

231
00:15:10,980 --> 00:15:15,670
Well first of all, it of course calls our
friend observable create, and then it

232
00:15:15,670 --> 00:15:20,310
uses the recursive scheduler to schedule
itself but what should it do in the body?

233
00:15:21,780 --> 00:15:23,790
You pick a, b, c or d.

234
00:15:28,380 --> 00:15:30,190
you guessed the right answer.

235
00:15:30,190 --> 00:15:36,871
What you have to do is you have to first
call OnNext and then re-schedule yourself.

236
00:15:36,871 --> 00:15:41,845
So, operationally again what happens is
you schedule, you call OnNext,

237
00:15:41,845 --> 00:15:46,860
you call yourself, which schedules itself,
calls OnNext, et cetera, et cetera.

238
00:15:46,860 --> 00:15:49,340
So if we get our friend, the

239
00:15:49,340 --> 00:15:53,470
NewThreadScheduler here in scope, then we
can define

240
00:15:53,470 --> 00:15:56,050
the infinite stream of ticks just by

241
00:15:56,050 --> 00:15:59,030
calling this new default constructor for
observable.

242
00:16:00,350 --> 00:16:04,380
And let's see how this really works,
because I can tell you, you know that

243
00:16:04,380 --> 00:16:09,700
this thing goes on recursively, but we
really, really want to see how that works.

244
00:16:10,920 --> 00:16:18,080
To understand how ticks work, we first
come to revisit observable create.

245
00:16:18,080 --> 00:16:18,570
And we're going

246
00:16:18,570 --> 00:16:23,910
to get a little bit of a algebraic law
that we can use to reason about it.

247
00:16:23,910 --> 00:16:29,210
So, here's the signature again, observable
has an apply method that takes

248
00:16:29,210 --> 00:16:32,300
this function from observer to
subscription

249
00:16:32,300 --> 00:16:34,620
and it returns a new observable.

250
00:16:34,620 --> 00:16:39,140
And, what this does is conceptually it
just defines the

251
00:16:39,140 --> 00:16:44,100
subscribe method, by calling the function
that you passed in,

252
00:16:44,100 --> 00:16:49,750
which as you can see has exactly the same
argument as the subscribe function.

253
00:16:49,750 --> 00:16:51,620
Takes an observer to a subscription.

254
00:16:51,620 --> 00:16:53,940
Takes an observer to a subscription.

255
00:16:53,940 --> 00:17:00,000
So, what it does, it calls your function
here with the observer here.

256
00:17:00,000 --> 00:17:06,050
And so, now you get here Subscription, and
that's exactly what's your return.

257
00:17:06,050 --> 00:17:07,170
But that's not all.

258
00:17:07,170 --> 00:17:09,420
And that's why I say this is just
conceptually,

259
00:17:09,420 --> 00:17:12,370
because what it does is that it also some
magic going on.

260
00:17:13,980 --> 00:17:16,820
Now we will talk about this magic later.

261
00:17:16,820 --> 00:17:22,270
But given this conceptual definition, we
get the following rewrite rule.

262
00:17:22,270 --> 00:17:27,740
If you have an observable that you create
using this function, so you

263
00:17:27,740 --> 00:17:32,800
do that by passing, you know, our usual
function from observer to subscription.

264
00:17:32,800 --> 00:17:35,590
When you subscribe to that with an
observer,

265
00:17:35,590 --> 00:17:40,520
that is really the same as calling the
function directly with the observer.

266
00:17:41,530 --> 00:17:43,290
Put some magic around it.

267
00:17:43,290 --> 00:17:45,790
And that's the subscription that you'll
return.

268
00:17:45,790 --> 00:17:49,770
So this is the model that we will use to
understand our ticks function.

269
00:17:52,460 --> 00:17:59,150
One of the magic things that observable
create does for us is how to unsubscribe.

270
00:17:59,150 --> 00:18:00,350
What does that mean?

271
00:18:00,350 --> 00:18:05,150
Well it means that when you create an
observable using observer.create by

272
00:18:05,150 --> 00:18:11,284
passing this function F.
When that function F calls uncompleted or

273
00:18:11,284 --> 00:18:17,480
on error on the observer, the magic will
automatically call unsubscribe on

274
00:18:17,480 --> 00:18:18,250
the subscription.

275
00:18:19,410 --> 00:18:24,630
And that guarantees that onCompleted and
onError are only called once.

276
00:18:24,630 --> 00:18:30,560
And then, any subsequent onNext calls on
the observer will do nothing.

277
00:18:32,600 --> 00:18:35,510
The main reason that we have all this
magic.

278
00:18:35,510 --> 00:18:40,110
In the observable create, is to enforce
the Rx contract.

279
00:18:40,110 --> 00:18:45,270
And the Rx contract says that a stream in
Rx always has the following shape.

280
00:18:45,270 --> 00:18:47,580
It consists of zero or more onNext

281
00:18:47,580 --> 00:18:53,200
calls, followed by exactly one onCompleted
onError.

282
00:18:53,200 --> 00:18:55,280
But that can be optional because we have
already

283
00:18:55,280 --> 00:18:57,630
seen that we can have an infinite stream
that never

284
00:18:57,630 --> 00:19:03,300
calls onCompleted onError.
So here you see two correct Rx sequences.

285
00:19:03,300 --> 00:19:07,670
This one here terminates nicely with an
onCompleted.

286
00:19:07,670 --> 00:19:10,690
This one terminates nicely with an
onError,

287
00:19:10,690 --> 00:19:12,930
but the third one here is completely
wrong.

288
00:19:12,930 --> 00:19:16,070
First of all, it has both in onCompleted.

289
00:19:16,070 --> 00:19:20,360
And then, afterwards, it calls an onNext
and even an onError.

290
00:19:20,360 --> 00:19:23,170
And the other thing that Rx also
guarantees

291
00:19:23,170 --> 00:19:26,190
is that all the onNext calls are, happen
sequentially.

292
00:19:26,190 --> 00:19:28,600
So, they never happen concurrently.

293
00:19:28,600 --> 00:19:32,860
So you can always be sure that your onNext
call is called.

294
00:19:32,860 --> 00:19:36,940
By itself without having to care about any
race conditions.

295
00:19:39,680 --> 00:19:41,270
What do we learn from this?

296
00:19:41,270 --> 00:19:43,680
Well, that you never, ever have to

297
00:19:43,680 --> 00:19:47,520
implement Observable or Observer yourself,
but always

298
00:19:47,520 --> 00:19:51,410
should use the factory methods Observable
create

299
00:19:51,410 --> 00:19:54,410
and we have also similar methods for
Observer.

