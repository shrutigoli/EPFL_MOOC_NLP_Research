1
00:00:00,700 --> 00:00:04,340
In the third and final part of the
discrete event simulation.

2
00:00:04,340 --> 00:00:06,270
We will look at the implementation of the

3
00:00:06,270 --> 00:00:09,428
call libraries, and then we will put
everything together.

4
00:00:09,428 --> 00:00:14,470
And draw on a concrete simulation to
demonstrate and test how everything works.

5
00:00:15,660 --> 00:00:19,800
All we have left to do now is to implement
the simulation trait.

6
00:00:19,800 --> 00:00:22,530
The principle idea is to keep in every
instance

7
00:00:22,530 --> 00:00:26,710
of the trait an agenda of actions to
perform.

8
00:00:26,710 --> 00:00:31,720
The agenda would be a list of simulated
events, and each event would

9
00:00:31,720 --> 00:00:37,410
consist of an action and the time when
that action should be produced.

10
00:00:37,410 --> 00:00:42,228
We sort the agenda list in such a way that
the actions to be performed first are in

11
00:00:42,228 --> 00:00:45,148
the beginning, that way we can simply pick
them

12
00:00:45,148 --> 00:00:47,793
off the front of the list to execute them.

13
00:00:47,793 --> 00:00:52,380
That leads to the following start of the
implementation

14
00:00:52,380 --> 00:00:54,070
of the trade simulation.

15
00:00:54,070 --> 00:00:59,090
There's the type action that takes an
anti-parameter list to unit.

16
00:00:59,090 --> 00:01:01,920
Then we would have a class of events.

17
00:01:01,920 --> 00:01:05,153
For convenience we make into a case class,
that way

18
00:01:05,153 --> 00:01:08,910
it's easy to pad a match on that an event

19
00:01:08,910 --> 00:01:11,570
would have a time when it should be
executed and

20
00:01:11,570 --> 00:01:16,025
an action which gives us the function that
should be executed.

21
00:01:16,025 --> 00:01:18,150
There's the agenda

22
00:01:18,150 --> 00:01:21,240
which is just a list of events, and
there's the private

23
00:01:21,240 --> 00:01:25,540
variable agenda of type agenda, which is
initially the empty list.

24
00:01:26,810 --> 00:01:31,940
To handle time, we do that with another
private variable, call it curtime.

25
00:01:31,940 --> 00:01:34,910
That contains the current simulation time.

26
00:01:34,910 --> 00:01:38,670
And that one can be then be accessed with
the getter function current time.

27
00:01:39,990 --> 00:01:43,410
So, the implementation of the method after
delay, with a given

28
00:01:43,410 --> 00:01:49,970
delay and of given block, would then
insert the task event at current time plus

29
00:01:49,970 --> 00:01:57,620
delay to the action that when invoked will
perform the operations in the block.

30
00:01:57,620 --> 00:02:01,560
And, it would put that event into the
agenda list at the right position.

31
00:02:02,598 --> 00:02:04,970
Here's the implementation of after delay,
as we have

32
00:02:04,970 --> 00:02:08,290
seen it creates the event at the given
time.

33
00:02:08,290 --> 00:02:14,150
With the given actions to perform, and it
inserts it into the agenda.

34
00:02:14,150 --> 00:02:16,070
The implementation of the insert function

35
00:02:16,070 --> 00:02:18,970
is straightforward, remember what it needs
to

36
00:02:18,970 --> 00:02:23,736
do is insert an event at the right place
into, in the list.

37
00:02:23,736 --> 00:02:27,500
That it appears at the right position
given its time, so

38
00:02:27,500 --> 00:02:31,270
we do that by doing a parent match on the
agenda.

39
00:02:31,270 --> 00:02:33,650
If the agenda has a first

40
00:02:33,650 --> 00:02:40,100
element, that has a time, that is less or
equal to the current items time.

41
00:02:40,100 --> 00:02:43,120
Then we insert the item in the rest of the
list.

42
00:02:43,120 --> 00:02:46,630
Because we should still keep first as the
first element.

43
00:02:46,630 --> 00:02:50,950
If that's not the case, that means the
list is either empty, or the

44
00:02:50,950 --> 00:02:55,670
first element of the list should appear at
a later time than the current item.

45
00:02:55,670 --> 00:02:58,970
In both of these cases we take the item as
first

46
00:02:58,970 --> 00:03:02,680
element of the list and follow with the
agenda.

47
00:03:02,680 --> 00:03:05,160
The last part of the simulation
implementation

48
00:03:05,160 --> 00:03:07,190
has to do with actually running the

49
00:03:07,190 --> 00:03:10,170
event loop, so that event handling loop

50
00:03:10,170 --> 00:03:13,730
would remove successive elements from the
agenda.

51
00:03:13,730 --> 00:03:15,480
That would be correct because we know that
the

52
00:03:15,480 --> 00:03:20,860
agenda is already time sorted, and perform
the associated actions.

53
00:03:20,860 --> 00:03:24,136
Here's the implementation of the event
handling

54
00:03:24,136 --> 00:03:27,169
loop, it performs a para-match on agenda.

55
00:03:27,169 --> 00:03:30,144
If agenda is not empty, then it will strip

56
00:03:30,144 --> 00:03:33,884
off the first item from agenda, set the
current time

57
00:03:33,884 --> 00:03:37,284
to the indicated time of that item,
perform the

58
00:03:37,284 --> 00:03:41,921
item's action, and continue with the
recursive call to loop.

59
00:03:41,921 --> 00:03:44,216
If the agenda is empty, then the

60
00:03:44,216 --> 00:03:47,990
simulation has ended and the function
connects it.

61
00:03:50,350 --> 00:03:54,481
So to run the simulation we simply call
loop, but before

62
00:03:54,481 --> 00:03:58,222
we do that we install our first action to
be performed.

63
00:03:58,222 --> 00:04:01,302
And that action actually tells us that the

64
00:04:01,302 --> 00:04:05,443
simulation has started, and what the
current time is.

65
00:04:05,443 --> 00:04:08,278
Before we can launch the simulation, we
still need to

66
00:04:08,278 --> 00:04:11,070
wait to exam the changes of the signals on
the wires.

67
00:04:11,070 --> 00:04:14,340
So far, the simulation doesn't give us any
output.

68
00:04:14,340 --> 00:04:15,720
So we would be flying blind.

69
00:04:15,720 --> 00:04:20,050
To change that, we define a function,
probe.

70
00:04:20,050 --> 00:04:23,680
So probe is something that you can attach
to a wire

71
00:04:25,900 --> 00:04:30,120
Sort of like an oscillator that tracks a
digital signal.

72
00:04:32,290 --> 00:04:33,828
Something like that.

73
00:04:33,828 --> 00:04:39,480
And the form it takes here is just like a
gate or another component.

74
00:04:39,480 --> 00:04:42,555
So probe takes the form of a component,
much like

75
00:04:42,555 --> 00:04:46,720
an AND gate or all the other components in
the system.

76
00:04:46,720 --> 00:04:48,510
here's the function probe.

77
00:04:48,510 --> 00:04:50,420
You attach it to a wire.

78
00:04:50,420 --> 00:04:54,070
It has a name that is typically the name
of the wire.

79
00:04:54,070 --> 00:04:57,310
It is an action.
The action consists in printing the

80
00:04:57,310 --> 00:05:02,950
name of the wire, the current time, and
the new signal on that wire.

81
00:05:02,950 --> 00:05:07,400
And what it would do on installation is,
it would add this action to the wire.

82
00:05:07,400 --> 00:05:12,279
So, as always the action gets executed
each time, the signal on the wire changes.

83
00:05:13,630 --> 00:05:17,326
What the example also shows is a neat
feature of scala

84
00:05:17,326 --> 00:05:21,572
in string formatting, so you can write a
string like this.

85
00:05:21,572 --> 00:05:22,430
You prefix it

86
00:05:22,430 --> 00:05:25,628
with an s, which means it's the standard
string

87
00:05:25,628 --> 00:05:29,294
interpolator, and then you can write
anything you want

88
00:05:29,294 --> 00:05:32,102
to embed in the string with a dollar and

89
00:05:32,102 --> 00:05:35,049
the name of the thing that you want to
embed.

90
00:05:35,049 --> 00:05:37,729
Or if the thing that you want to embed is
more than

91
00:05:37,729 --> 00:05:41,850
a single identifier, you can put it in
braces and write that here.

92
00:05:41,850 --> 00:05:43,690
So the string that you see here, you

93
00:05:43,690 --> 00:05:47,190
could have done also by concatenating
strings with plus.

94
00:05:47,190 --> 00:05:47,652
It would

95
00:05:47,652 --> 00:05:52,390
look something like this.
Name, plus space,

96
00:05:52,390 --> 00:05:57,278
plus current time, plus value

97
00:05:57,278 --> 00:06:02,612
equals plus wire.getsignal.
The

98
00:06:02,612 --> 00:06:07,860
tool would print to the same string, but
of course the first one is far easier

99
00:06:07,860 --> 00:06:12,862
to understand what actually gets embedded
where in the string, than the

100
00:06:12,862 --> 00:06:17,070
second version, that relies on the string
concatenation.

101
00:06:17,070 --> 00:06:19,578
The last thing we have to do before we can

102
00:06:19,578 --> 00:06:24,990
start the simulation is define all the
technology dependent parameters.

103
00:06:24,990 --> 00:06:30,660
Remember that our gates use constants in
InverterDelay, AndGateDelay and

104
00:06:30,660 --> 00:06:36,700
OrGateDelay, which were abstract on the
level of basic circuit simulations.

105
00:06:36,700 --> 00:06:38,110
we need to define

106
00:06:38,110 --> 00:06:43,470
them to fit the technology that we use in
the simulation.

107
00:06:43,470 --> 00:06:46,640
A convenient way to do that is to pack
them all in a

108
00:06:46,640 --> 00:06:51,400
separate trait, that can then be mixed in
in the actual simulation object.

109
00:06:51,400 --> 00:06:56,240
So you could define trade parameters with
the delays, and then the actual

110
00:06:56,240 --> 00:07:01,400
simulation object would extend the
circuits class with parameters.

111
00:07:03,530 --> 00:07:05,430
If we look at the class diagrams, then
there

112
00:07:05,430 --> 00:07:10,690
would be another trade called parameters
that gets inherited

113
00:07:13,640 --> 00:07:15,750
from the concrete simulation objects.

114
00:07:17,370 --> 00:07:22,500
Let's try out a concrete simulation,
before we do that in a work sheet.

115
00:07:22,500 --> 00:07:26,410
Let's take a tour of the classes that
we've seen so far.

116
00:07:26,410 --> 00:07:30,880
So there's first the simulation class that
you have seen here.

117
00:07:30,880 --> 00:07:37,190
With its Action type, its Event type, and
the Simulation API.

118
00:07:37,190 --> 00:07:38,850
Which consists of the method after

119
00:07:38,850 --> 00:07:46,340
Delay run and Current time.
You then have the label of Gates.

120
00:07:46,340 --> 00:07:50,630
Where we have the three delays as abstract
methods.

121
00:07:50,630 --> 00:07:53,400
So these need to be filled in later on.

122
00:07:53,400 --> 00:07:57,000
And we have the definition of the wire
class that you have seen.

123
00:07:57,000 --> 00:08:02,450
Of, and then of the gates, inverter gate,
AND gate, and OR gate.

124
00:08:02,450 --> 00:08:03,740
And we also put for pro,

125
00:08:03,740 --> 00:08:08,030
convenience the probe method on that
layer.

126
00:08:08,030 --> 00:08:14,260
Finally we have the layer of circuits
which contains things

127
00:08:14,260 --> 00:08:16,990
like the half Adder that you've seen and
the full Adder.

128
00:08:18,280 --> 00:08:24,120
And the last part is parameters, which is
the trait that

129
00:08:24,120 --> 00:08:29,160
fixes the technology specific constants.
So here we have taken two for inverted

130
00:08:29,160 --> 00:08:34,720
delay, three for the AND gate delay, and
five for the OR Gate delay.

131
00:08:34,720 --> 00:08:36,740
With all that in place, let's launch

132
00:08:36,740 --> 00:08:39,370
a work sheet that does a concrete
simulation.

133
00:08:39,370 --> 00:08:42,670
So I create a new scala work sheet, call
it test.

134
00:08:46,810 --> 00:08:51,690
What I need to do is first create an
object for the actual simulation, so that

135
00:08:51,690 --> 00:08:54,720
would extend the circuits that I have
defined

136
00:08:54,720 --> 00:08:59,099
so far, and would mix in the parameters.

137
00:09:02,710 --> 00:09:06,060
I import everything in that object from,
for convenience.

138
00:09:07,090 --> 00:09:13,570
Then I can get started by creating some
wires for a half adder.

139
00:09:13,570 --> 00:09:15,020
Let's, call them in1.

140
00:09:16,279 --> 00:09:20,090
>> In2, and the output wires would be
Sum, and Carry.

141
00:09:24,200 --> 00:09:26,980
So that would give us four wires that we
see here.

142
00:09:28,840 --> 00:09:32,210
We next connect these wires, with a half
adder.

143
00:09:32,210 --> 00:09:40,290
So we write half adder, in1, in2, sum and
carry.

144
00:09:40,290 --> 00:09:44,100
And to see something, we put probes on the
two output wires.

145
00:09:44,100 --> 00:09:48,410
So we would have a probe, sum, on the sum
wire.

146
00:09:48,410 --> 00:09:50,460
And a probe carry

147
00:09:51,950 --> 00:09:52,830
on the carry wire.

148
00:09:55,420 --> 00:10:00,610
So, that already gives us immediately the
values of the wires.

149
00:10:00,610 --> 00:10:03,010
Sum and carry would both be false.

150
00:10:03,010 --> 00:10:08,180
That's a side effect of immediately
executing an action, once we install it.

151
00:10:08,180 --> 00:10:13,530
And, the action of the probe is simply to
print the current value of the wire.

152
00:10:13,530 --> 00:10:16,800
To run a simulation, let's change a signal
of one of the wires.

153
00:10:16,800 --> 00:10:20,580
So let's say, let's put a one on in

154
00:10:20,580 --> 00:10:23,650
one and run the simulation.

155
00:10:26,140 --> 00:10:29,500
What we see is the welcome message,
simulation has started.

156
00:10:29,500 --> 00:10:37,670
The time 0 and at the time eight, the
new-value of the sum would be true.

157
00:10:37,670 --> 00:10:41,240
The value of the carry has not changed, so
we don't see anything there.

158
00:10:42,280 --> 00:10:46,090
We can continue by placing an input signal

159
00:10:46,090 --> 00:10:51,240
on in two, and running s, the simulation
again.

160
00:10:52,500 --> 00:10:56,670
What you will see now is that the
simulation has restarted at the

161
00:10:56,670 --> 00:11:01,110
time eight, the last time that we saw a
signal change earlier.

162
00:11:01,110 --> 00:11:06,480
And now we see at time 11 the carry signal
would get a new value,

163
00:11:06,480 --> 00:11:11,920
true, and sometimes later, at time 16, the
sum would be false.

164
00:11:12,980 --> 00:11:18,620
We can now retract the signal on in1, and

165
00:11:18,620 --> 00:11:24,171
run the simulation a third time.
And that would give us a time 19, that

166
00:11:24,171 --> 00:11:29,850
the new carry value is false and the sum
value is again true at some later time.

167
00:11:32,640 --> 00:11:36,260
So I hope that gave you a little taste,
what you can do with simulations.

168
00:11:36,260 --> 00:11:39,140
Of course, you could also, in the same
way, simulate

169
00:11:39,140 --> 00:11:45,560
other circuits, and also create your own
circuits to simulate them.

170
00:11:45,560 --> 00:11:49,460
Let's finish the simulation by studying a
variant

171
00:11:49,460 --> 00:11:51,910
of the gates that we have seen so far.

172
00:11:51,910 --> 00:11:54,050
We have seen so far the OR gate

173
00:11:54,050 --> 00:11:57,380
in a manner completely analogous to the
AND gate.

174
00:11:57,380 --> 00:11:57,965
it defines

175
00:11:57,965 --> 00:12:01,370
an action that gets installed from its
input wires.

176
00:12:01,370 --> 00:12:05,248
But in fact another, an alternative way
would be to construct

177
00:12:05,248 --> 00:12:09,100
an OR gate out of the AND gate and in the
inverter.

178
00:12:09,100 --> 00:12:14,576
Because after all we can use, make use of
the

179
00:12:14,576 --> 00:12:20,860
formula that a or b is the same as not not
a and not b.

180
00:12:21,950 --> 00:12:28,700
So to implement that formula, inverters,
and AND gates are enough.

181
00:12:28,700 --> 00:12:30,630
we can have a circuit like this one here.

182
00:12:33,310 --> 00:12:34,850
If the a and the b,

183
00:12:37,330 --> 00:12:39,070
then we invert both inputs.

184
00:12:43,020 --> 00:12:47,720
We make an AND gate and we invert the
output.

185
00:12:49,210 --> 00:12:54,159
So, that leads to this circuit here where
we have

186
00:12:54,159 --> 00:12:59,108
three internal wires, notIn1, notIn2, and
notOut,

187
00:12:59,108 --> 00:13:03,760
replace the inverters and the AND gate as
you see here.

188
00:13:06,510 --> 00:13:11,020
My question to you is if you replaced our
implementation of OR

189
00:13:11,020 --> 00:13:16,620
gate by the alternative OR gate that
you've just seen, what would happen.

190
00:13:16,620 --> 00:13:21,680
Would you compare to the earlier
simulation would you see a change?

191
00:13:21,680 --> 00:13:24,010
Possible answers are no, nothing would

192
00:13:24,010 --> 00:13:26,362
happen, the two simulations behave the
same.

193
00:13:26,362 --> 00:13:31,480
Or maybe the two simulations would produce
the same events,

194
00:13:31,480 --> 00:13:33,274
but the indicated times are different.

195
00:13:33,274 --> 00:13:38,730
Or maybe the times are different, and also
the alternative application of OR

196
00:13:38,730 --> 00:13:44,580
gate could produce additional events that
you don't see in the original simulation.

197
00:13:44,580 --> 00:13:46,580
Or, as a fourth choice, the two

198
00:13:46,580 --> 00:13:50,150
simulations would produce completely
different events all together.

199
00:13:50,150 --> 00:13:50,850
What do you think?

200
00:13:54,100 --> 00:13:57,960
Let's try this out.
I have changed the alternative version of

201
00:13:57,960 --> 00:14:02,810
the OR gate to the standard one.
And I renamed the first standard

202
00:14:02,810 --> 00:14:07,550
one to out.
So let's launch

203
00:14:07,550 --> 00:14:11,360
the simulation again with this alternative
version of the OR gate.

204
00:14:13,270 --> 00:14:19,340
And what we see is that initially we get
some glitches on the sum value.

205
00:14:19,340 --> 00:14:22,619
So it changes value before we can
stabilize.

206
00:14:22,619 --> 00:14:27,665
We see a, at the time five, it has a value
of true, at ten it is false,

207
00:14:27,665 --> 00:14:32,855
and again at ten it is true, so there is
some different behavior here.

208
00:14:32,855 --> 00:14:34,740
Let's see whether we can explain that.

209
00:14:37,920 --> 00:14:42,910
So what I've done here is I've placed the
new version of the OR

210
00:14:42,910 --> 00:14:48,700
Gate into the half adder circuit, and
let's see what happens.

211
00:14:48,700 --> 00:14:52,850
So initially, the value of this wire here
would be zero.

212
00:14:52,850 --> 00:14:58,010
After two, time units the inverter would
make

213
00:14:58,010 --> 00:15:02,930
that wire to be one, after again two time
units,

214
00:15:02,930 --> 00:15:07,610
that inverter would make that wire to be
one.

215
00:15:07,610 --> 00:15:10,568
So, after five time units, the AND gate

216
00:15:10,568 --> 00:15:13,890
here would return a true value, a one
value.

217
00:15:15,550 --> 00:15:20,830
After ten current time units similarly the
initial signal here, the zero here

218
00:15:20,830 --> 00:15:26,272
would propagate to be a one here a one
here and everything would flip around.

219
00:15:26,272 --> 00:15:28,246
And again at the same time

220
00:15:28,246 --> 00:15:34,450
after ten time units, the final set value
of the signal a would take place, and

221
00:15:34,450 --> 00:15:38,680
the propagation would chase each other and
would

222
00:15:38,680 --> 00:15:42,684
produce the final value true for the sum
signal.

223
00:15:42,684 --> 00:15:46,634
So the moral of this is that in these
circuit simulations you

224
00:15:46,634 --> 00:15:51,160
have to give it some time to let the
circuit stabilize itself.

225
00:15:51,160 --> 00:15:54,490
That's also true for the actual
simulations

226
00:15:54,490 --> 00:15:58,580
so the initial results here can sometimes
be misleading.

227
00:15:59,660 --> 00:16:04,550
So the answer which maybe was surprising
to you would be the times are different.

228
00:16:04,550 --> 00:16:09,080
And the added version of OR gate can also
produce additional events.

229
00:16:09,080 --> 00:16:09,820
Why?

230
00:16:09,820 --> 00:16:11,955
Because it's built from more components

231
00:16:11,955 --> 00:16:14,400
that take more time to stabilize
themselves.

232
00:16:17,990 --> 00:16:21,450
So, to summarize, we've seen that adding
state and

233
00:16:21,450 --> 00:16:26,640
assignments makes our mental model of
computation more complicated.

234
00:16:26,640 --> 00:16:28,920
In particular, we lose the property

235
00:16:28,920 --> 00:16:31,510
of referential transparency which says
that it

236
00:16:31,510 --> 00:16:36,440
doesn't matter whether we use a named or
the thing it refers to.

237
00:16:36,440 --> 00:16:39,938
We've seen with the bank account example
that it matters quite

238
00:16:39,938 --> 00:16:42,908
a lot whether we refer to it an existing
bank account,

239
00:16:42,908 --> 00:16:44,830
or we create a new one.

240
00:16:44,830 --> 00:16:48,700
The other thing that we lose is the
substitution model so we

241
00:16:48,700 --> 00:16:54,830
do not have anymore an easy way to trace
computations by rewriting.

242
00:16:54,830 --> 00:16:56,810
On the other hand, assignments allow us to

243
00:16:56,810 --> 00:17:00,790
formulate some programs in an elegant and
concise way.

244
00:17:00,790 --> 00:17:04,520
We've seen that with the example of
discrete events simulation

245
00:17:04,520 --> 00:17:08,730
where a system was represented by a list
of action.

246
00:17:08,730 --> 00:17:14,250
And that list was a mutable variable.
It changed during the time of simulations.

247
00:17:14,250 --> 00:17:19,330
The effect of the actions when they're
called would in turn change the state of

248
00:17:19,330 --> 00:17:24,710
objects, and they could also install other
actions to be executed in the future.

249
00:17:26,040 --> 00:17:29,330
You've seen that in this way combining
higher

250
00:17:29,330 --> 00:17:33,640
functions and assignments in state led to
some very,

251
00:17:33,640 --> 00:17:40,340
very powerful techniques that let you
express fundamentally complex computations

252
00:17:40,340 --> 00:17:45,320
in a concise and understandable way.
So in the end it's a trade off.

253
00:17:45,320 --> 00:17:48,360
You get more expressiveness that helps you
tackle

254
00:17:48,360 --> 00:17:51,270
certain problems in a simpler way, but on

255
00:17:51,270 --> 00:17:53,690
the other hand you loose tools for
reasoning

256
00:17:53,690 --> 00:17:58,060
about your program, referential
transparency, and the substitution model.

257
00:17:58,060 --> 00:17:58,710
So

258
00:17:58,710 --> 00:18:02,220
I guess the moral would be that you should
stick to the purely

259
00:18:02,220 --> 00:18:05,180
functional model whenever you can, and you

260
00:18:05,180 --> 00:18:07,980
should use state responsibly when you
must.

