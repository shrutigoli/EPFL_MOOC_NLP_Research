1
00:00:00,460 --> 00:00:03,830
Welcome to the course on Principles of
Reactive Programming.

2
00:00:03,830 --> 00:00:07,120
One year ago, when I finished the course
on function programming,

3
00:00:07,120 --> 00:00:11,430
many people asked me for a second course
on more advanced material.

4
00:00:11,430 --> 00:00:15,550
At the time I was too flat out exhausted
to consider anything of the kind.

5
00:00:15,550 --> 00:00:18,550
But now, one year later, there is a second
course.

6
00:00:18,550 --> 00:00:23,210
But the topic is reactive programming.
So, why this topic?

7
00:00:23,210 --> 00:00:25,760
Three reasons really.
The first is that

8
00:00:25,760 --> 00:00:28,870
reactive programming is becoming
ubiquitous.

9
00:00:28,870 --> 00:00:33,470
Nowadays if you write any web service or
mobile app, or really any

10
00:00:33,470 --> 00:00:36,480
large system with a real-time component,
then

11
00:00:36,480 --> 00:00:40,470
knowing the reactive programming
techniques is essential.

12
00:00:40,470 --> 00:00:42,610
The second reason is that reactive

13
00:00:42,610 --> 00:00:45,900
programming really builds on functional
programming.

14
00:00:45,900 --> 00:00:47,790
In fact we will spend the first two weeks

15
00:00:47,790 --> 00:00:51,020
of this course with some of the more
advanced concepts

16
00:00:51,020 --> 00:00:54,070
of functional programming, which then will
lead naturally

17
00:00:54,070 --> 00:00:57,600
into the reactive programming content of
the course.

18
00:00:57,600 --> 00:01:01,200
Third, I'm really happy that I could draw
on the help and

19
00:01:01,200 --> 00:01:06,150
expertise of two of the masters of the
field, namely Eric Meyer,

20
00:01:06,150 --> 00:01:11,390
who's the inventor of RX, the reactive
extensions framework, and Roland Kuhn

21
00:01:11,390 --> 00:01:16,360
who's the lead of the Akka library for
actors concurrency, who will both

22
00:01:16,360 --> 00:01:21,019
teach the, co-teach the course with me.
So, let's get started.

23
00:01:22,090 --> 00:01:25,700
Reactive programming describes a set of
programming patterns and

24
00:01:25,700 --> 00:01:30,830
techniques that have become increasingly
important over the last years.

25
00:01:30,830 --> 00:01:35,400
And the reason for that is mostly driven
by change in requirements.

26
00:01:36,450 --> 00:01:40,875
Ten years ago, a typical large
installations would have tens of servers.

27
00:01:40,875 --> 00:01:41,200
[INAUDIBLE]

28
00:01:41,200 --> 00:01:44,250
response times would be measured in
seconds.

29
00:01:44,250 --> 00:01:49,050
There would be maintenance downtimes, a
couple hours per month, say.

30
00:01:49,050 --> 00:01:51,970
And data volume would be measured in
gigabites.

31
00:01:51,970 --> 00:01:54,890
Nowadays, a large server installation or

32
00:01:54,890 --> 00:01:58,060
cloud installation would have thousands of
nodes.

33
00:01:58,060 --> 00:02:03,440
Users expect sub-second response times,
response times in milliseconds.

34
00:02:03,440 --> 00:02:05,852
There should be no maintenance down time,

35
00:02:05,852 --> 00:02:09,068
system should be available 24 seven and
our data volume

36
00:02:09,068 --> 00:02:12,700
has easily reached a terabyte and is going
into the petabytes.

37
00:02:15,570 --> 00:02:19,450
So these new requirements also need new
architectures.

38
00:02:19,450 --> 00:02:21,650
The classical architectures is optimized
by

39
00:02:21,650 --> 00:02:24,990
something like the Java Enterprise
architecture.

40
00:02:24,990 --> 00:02:29,650
It consists of managed servers and
application containers.

41
00:02:29,650 --> 00:02:34,750
What you see now is more and more a shift
towards so called reactive applications

42
00:02:34,750 --> 00:02:40,180
that are event driven, and that makes them
also scalable, resilient, and responsive.

43
00:02:42,040 --> 00:02:45,820
The Merriam Webster diction defines
reactive as being readily

44
00:02:45,820 --> 00:02:50,360
responsive to a stimulus.
What we mean by that in the world of

45
00:02:50,360 --> 00:02:59,510
software systems is a system that can
react to events, so it's event-driven.

46
00:02:59,510 --> 00:03:02,730
And the system should also be able to
react

47
00:03:02,730 --> 00:03:07,170
to changing amounts of loads, system load,
that means

48
00:03:07,170 --> 00:03:08,310
it should be scalable.

49
00:03:10,360 --> 00:03:12,730
Furthermore, such a system should be able
to

50
00:03:12,730 --> 00:03:16,050
react to failures and we call that
resilient.

51
00:03:18,360 --> 00:03:21,240
And finally, and probably most
importantly,

52
00:03:21,240 --> 00:03:24,180
the system should react to its users.

53
00:03:24,180 --> 00:03:25,570
It should be responsive.

54
00:03:27,740 --> 00:03:33,070
Now, being event driven is a technical
property that enables the properties of

55
00:03:33,070 --> 00:03:39,069
being scalable, and being resilient.
And all three properties

56
00:03:39,069 --> 00:03:44,089
together enable systems that are
responsive to the users.

57
00:03:46,030 --> 00:03:48,360
So let's start with event-driven.

58
00:03:48,360 --> 00:03:53,020
Traditionally, concurrent software systems
were composed of multiple threads,

59
00:03:53,020 --> 00:03:56,290
communicating with shared and synchronized
state.

60
00:03:56,290 --> 00:03:57,920
That let to a very high degree of

61
00:03:57,920 --> 00:04:01,500
coupling, and also such systems were hard
to compose.

62
00:04:01,500 --> 00:04:04,770
Event-driven systems, by contrast, are

63
00:04:04,770 --> 00:04:08,290
composed from loosely coupled event
handlers.

64
00:04:08,290 --> 00:04:12,270
Events in such a system can be handled
asynchronously.

65
00:04:12,270 --> 00:04:14,940
They do not incur any blocking.

66
00:04:14,940 --> 00:04:18,510
And because there's no blocking, that
means that typically resources

67
00:04:18,510 --> 00:04:21,600
can be utilized much more efficiently.

68
00:04:21,600 --> 00:04:25,710
The next property of a reactive system is
being scalable.

69
00:04:25,710 --> 00:04:31,230
An application is scalable if it's able to
be expanded according to it's usage.

70
00:04:31,230 --> 00:04:35,280
And typically we distinguish two
directions of scaling.

71
00:04:35,280 --> 00:04:38,390
They scale up which means they make use of
parallelism

72
00:04:38,390 --> 00:04:43,510
in multi-core systems, which become more
and more common in computers

73
00:04:43,510 --> 00:04:49,257
today, and then their scaling out, which
means we make use of multiple server nodes

74
00:04:49,257 --> 00:04:53,580
of an, in a data center, or in the cloud.
Important for

75
00:04:53,580 --> 00:04:58,520
scalability here is always to minimize
shared multiple state.

76
00:04:58,520 --> 00:05:01,670
Because we will see that that actually has
implications

77
00:05:01,670 --> 00:05:06,122
on the ease and the, the efficiency of
scaling.

78
00:05:06,122 --> 00:05:08,980
Important furthermore for scaling out, is
the property

79
00:05:08,980 --> 00:05:11,480
of location transparency.

80
00:05:11,480 --> 00:05:15,610
What that means is that it shouldn't
matter where a location is located.

81
00:05:15,610 --> 00:05:18,030
It could be at the same computer as a

82
00:05:18,030 --> 00:05:22,340
client, or, at some other computer across
the internet.

83
00:05:22,340 --> 00:05:25,280
The functionality should always stay the
same.

84
00:05:25,280 --> 00:05:28,590
The other important property for scaling
out is resilience, because

85
00:05:28,590 --> 00:05:32,020
once you have multiple nodes, some of
these can fail.

86
00:05:32,020 --> 00:05:33,620
And the system has to cope with that.

87
00:05:35,360 --> 00:05:39,320
The third property of reactive system is
resiliency, an

88
00:05:39,320 --> 00:05:43,970
application is resilient if it can recover
quickly from failures.

89
00:05:43,970 --> 00:05:49,310
Such failures could be software failures
such as throwing an exception, or hardware

90
00:05:49,310 --> 00:05:52,480
failures, a computer going down, or maybe

91
00:05:52,480 --> 00:05:56,210
connection failures, an internet
connection going down.

92
00:05:56,210 --> 00:06:00,360
Typically, resilience cannot be added as
an afterthought, it needs to

93
00:06:00,360 --> 00:06:03,790
be a part of the system design from the
beginning.

94
00:06:03,790 --> 00:06:07,420
Important techniques for constructing
resilient systems

95
00:06:07,420 --> 00:06:10,170
are, keeping your components loosely
coupled.

96
00:06:11,200 --> 00:06:14,400
Having a strong encapsulation of mutable
state.

97
00:06:14,400 --> 00:06:17,050
And having pervasive supervisor
hierarchies.

98
00:06:18,480 --> 00:06:22,540
Finally, an application is responsive if
it provides a rich,

99
00:06:22,540 --> 00:06:25,840
real time interaction with its users even
under load, and

100
00:06:25,840 --> 00:06:27,000
in the presence of failures.

101
00:06:29,360 --> 00:06:31,630
Response of applications can be built on

102
00:06:31,630 --> 00:06:35,210
an event driven, scalable, and resilient
architecture.

103
00:06:35,210 --> 00:06:38,590
That doesn't automatically lead to a
responsive application.

104
00:06:38,590 --> 00:06:41,540
You still need to pay careful attention to
algorithms,

105
00:06:41,540 --> 00:06:45,478
system designs, including back pressure,
and many other details.

106
00:06:45,478 --> 00:06:51,600
But being event-driven, scalable, and
resilient are important

107
00:06:51,600 --> 00:06:54,720
some would argue, even necessary building
blocks to

108
00:06:54,720 --> 00:06:56,860
arrive at a responsive application.

109
00:06:59,730 --> 00:07:03,410
Now let's take a closer look at events and
event handling.

110
00:07:03,410 --> 00:07:05,280
Of course event handling is not new.

111
00:07:05,280 --> 00:07:08,370
It's traditionally being done using
call-backs.

112
00:07:08,370 --> 00:07:12,220
A common form of call-backs is found in
Java.

113
00:07:12,220 --> 00:07:16,470
In the subject observer pattern.
So you see an example here.

114
00:07:16,470 --> 00:07:20,020
we can define a class counter that extends
a class called action

115
00:07:20,020 --> 00:07:24,760
listener, which is part of the Java screen
framework, and then what the

116
00:07:24,760 --> 00:07:28,870
counter would do, it would register itself
with an event source.

117
00:07:28,870 --> 00:07:30,230
In this case, the event source is

118
00:07:30,230 --> 00:07:34,110
a button, so we would set, say
addActionListener(this).

119
00:07:34,110 --> 00:07:37,610
That would register the counter, itself,
at the event source.

120
00:07:37,610 --> 00:07:41,020
Then the event source would call, whenever

121
00:07:41,020 --> 00:07:44,400
there's a new event, this method action
performed.

122
00:07:44,400 --> 00:07:45,650
So that's a callback.

123
00:07:45,650 --> 00:07:48,860
You register yourself to be called back
here.

124
00:07:48,860 --> 00:07:49,770
And when the callback

125
00:07:49,770 --> 00:07:52,550
comes, there's an event that, gets
triggered

126
00:07:52,550 --> 00:07:54,320
which gives you details about the event.

127
00:07:54,320 --> 00:07:56,270
And then, every time that gets triggered.

128
00:07:56,270 --> 00:07:59,960
You perform an action like increment the
counter by one.

129
00:08:01,350 --> 00:08:06,330
Now, this is the common model that I guess
most of you have already seen today.

130
00:08:06,330 --> 00:08:08,880
But it's also a model that has quite a few
problems.

131
00:08:10,040 --> 00:08:12,670
So the first problem is already apparent

132
00:08:12,670 --> 00:08:15,080
in the type of this actionPerformed
method,

133
00:08:15,080 --> 00:08:17,570
its return type is Unit.

134
00:08:17,570 --> 00:08:22,460
So that means to have any effect at all,
the actionPerformed method has to

135
00:08:22,460 --> 00:08:27,370
have a side effect, in this case the side
effect is on the variable count.

136
00:08:27,370 --> 00:08:34,760
So a design using listeners and callbacks
naturally leads to shared mutable state.

137
00:08:34,760 --> 00:08:36,530
The second problem is that it's very hard

138
00:08:36,530 --> 00:08:41,030
to construct higher abstractions out of
simple listeners.

139
00:08:41,030 --> 00:08:45,270
So event handlers have a hard time being
composed.

140
00:08:45,270 --> 00:08:51,250
And, in summary, all this leads quickly to
what has been called call back hell.

141
00:08:51,250 --> 00:08:56,560
So that means applications that
essentially consist

142
00:08:56,560 --> 00:09:01,770
of a big web of call backs that are very,
very hard to track and understand.

143
00:09:03,890 --> 00:09:05,140
So how can we do better?

144
00:09:05,140 --> 00:09:09,960
So the idea that is promoted in this
course is to use fundamental

145
00:09:09,960 --> 00:09:15,579
constructions from functional programming
to get composable event abstractions.

146
00:09:17,450 --> 00:09:19,620
In particular, some of the core principles
of

147
00:09:19,620 --> 00:09:23,290
this course is that events should be first
class.

148
00:09:23,290 --> 00:09:25,690
They are often represented as messages.

149
00:09:25,690 --> 00:09:28,920
Handlers of events should also be first
class so that

150
00:09:28,920 --> 00:09:32,330
complex handlers can be composed from
primitive ones.

151
00:09:34,430 --> 00:09:36,330
So here are the topics that we are going

152
00:09:36,330 --> 00:09:39,670
to cover in the next seven weeks of this
course.

153
00:09:39,670 --> 00:09:41,340
We're going to start this week with a

154
00:09:41,340 --> 00:09:44,660
review of functional programming, about to
the degree that

155
00:09:44,660 --> 00:09:47,210
you have already seen it in the first
course

156
00:09:47,210 --> 00:09:50,830
of prin-, on principles of functional
programming in scalar.

157
00:09:50,830 --> 00:09:54,430
But we are also going to introduce some
new topics.

158
00:09:54,430 --> 00:09:56,480
In particular, we are going to cover

159
00:09:56,480 --> 00:09:59,899
an important class of functional patterns
called monads.

160
00:10:02,010 --> 00:10:05,390
However, reactive systems are not
typically described

161
00:10:05,390 --> 00:10:08,170
as pure functional programs, so next week

162
00:10:08,170 --> 00:10:13,040
we are going to open up the paradigm of
pure functional programming and combine it

163
00:10:13,040 --> 00:10:18,070
with the more typical world where we have
mutable states and non-deterministic

164
00:10:18,070 --> 00:10:22,840
computations, including events After these
two more

165
00:10:22,840 --> 00:10:28,500
preparatory sessions, we apply what we
know to reactive abstractions.

166
00:10:28,500 --> 00:10:33,880
We first cover how to abstract over events
that will lead us to futures.

167
00:10:33,880 --> 00:10:36,330
Then, how to abstract over event streams

168
00:10:36,330 --> 00:10:39,490
that will lead us to so-called
observables.

169
00:10:39,490 --> 00:10:44,880
We will then look at message passing
architectures, where the nodes are actors.

170
00:10:44,880 --> 00:10:47,240
We will look at how to handle failures.

171
00:10:47,240 --> 00:10:50,390
Including the concept of supervisors, and
finally we

172
00:10:50,390 --> 00:10:53,670
will look at scaling out, to distributed
systems

173
00:10:53,670 --> 00:10:56,130
looking at distributed actors.

174
00:10:56,130 --> 00:11:01,030
The course is given by three lecturers, I
will cover the first two weeks.

175
00:11:09,830 --> 00:11:14,550
Eric Meier will will cover futures and
observeables.

176
00:11:14,550 --> 00:11:15,730
That's week three and four.

177
00:11:15,730 --> 00:11:24,270
And finally Roland Call will cover actors,
supervisors and distributed actors

178
00:11:24,270 --> 00:11:26,350
[SOUND].

179
00:11:26,350 --> 00:11:30,288
As prerequisites, you should have a solid
grounding in functional programming.

180
00:11:30,288 --> 00:11:32,210
Ideally, you've followed the principles of

181
00:11:32,210 --> 00:11:35,170
functional programming in Scala class on
Coursera.

182
00:11:35,170 --> 00:11:36,610
But if you know some other functional

183
00:11:36,610 --> 00:11:38,940
language, the switch should be rather
easy.

