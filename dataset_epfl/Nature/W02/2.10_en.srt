1
00:00:03,209 --> 00:00:04,836
Welcome back Nature, In Code.

2
00:00:04,836 --> 00:00:06,475
We're in chapter 2, lecture 10.

3
00:00:06,475 --> 00:00:08,597
This is the last lecture of this chapter.

4
00:00:09,234 --> 00:00:14,258
In this last lecture, I'd like to talk 
about a very important concept,

5
00:00:14,258 --> 00:00:16,120
namely that of the variable scope.

6
00:00:16,728 --> 00:00:19,213
The variable scope is rarely talked about

7
00:00:19,213 --> 00:00:21,041
but I wanna mention it here briefly

8
00:00:21,041 --> 00:00:23,890
because it is potentially 
the source of many, many errors

9
00:00:23,890 --> 00:00:26,547
and I'd like you to avoid 
all of these errors,

10
00:00:26,547 --> 00:00:28,988
and there's a simple trick
how to do that.

11
00:00:28,988 --> 00:00:30,743
<i>(lecturer) So here we're back in our code.</i>

12
00:00:30,743 --> 00:00:32,361
<i>Let's take a look at this function here.</i>

13
00:00:32,361 --> 00:00:34,368
<i>function create_next_generation</i>

14
00:00:34,368 --> 00:00:38,369
<i>We're now very familiar
with this function and what it does.</i>

15
00:00:38,371 --> 00:00:41,793
<i>It simply calculates 
the new genotype frequencies</i>

16
00:00:41,793 --> 00:00:44,793
<i>based on existing allele frequencies.</i>

17
00:00:44,793 --> 00:00:49,304
<i>And we're using variables p and q 
and a1a1 and so on</i>

18
00:00:49,304 --> 00:00:51,159
<i>that we've defined up here.</i>

19
00:00:52,003 --> 00:00:54,230
<i>And this feels quite natural, right?</i>

20
00:00:54,233 --> 00:00:57,321
<i>I mean we're defining variables
here outside of the function</i>

21
00:00:57,325 --> 00:01:00,592
<i>and then we're using those variables 
inside of the function.</i>

22
00:01:01,371 --> 00:01:04,355
<i>Now the reason why we can 
actually do this,</i>

23
00:01:04,355 --> 00:01:07,356
<i>the reason why we
can access these variables here</i>

24
00:01:07,356 --> 00:01:09,636
<i>or in fact from anywhere in our code</i>

25
00:01:09,636 --> 00:01:15,347
<i>is because these variables out here,
defined outside of functions,</i>

26
00:01:15,347 --> 00:01:17,542
<i>they are in the global scope.</i>

27
00:01:18,272 --> 00:01:23,661
<i>And that simply means they can
be accessed from anywhere in your code.</i>

28
00:01:23,661 --> 00:01:27,691
<i>Now, that often comes in quite handy.</i>

29
00:01:27,691 --> 00:01:32,060
<i>Now, if you would talk to 
very experienced JavaScript developers,</i>

30
00:01:32,060 --> 00:01:36,261
<i>they would tell you that the global scope
is in fact a dangerous thing</i>

31
00:01:36,261 --> 00:01:41,962
<i>because it means that variables can now
be accessed and also overwritten</i>

32
00:01:41,962 --> 00:01:43,963
<i>from anywhere in the code.</i>

33
00:01:43,963 --> 00:01:45,618
<i>And if you have to maintain
large JavaScript projects,</i>

34
00:01:45,618 --> 00:01:49,342
<i>that can be quite an issue.</i>

35
00:01:49,528 --> 00:01:54,617
<i>And that's true, but here
in the context of this course,</i>

36
00:01:54,617 --> 00:02:00,739
<i>our programs, our code snippets
will often be, or always be actually,</i>

37
00:02:00,739 --> 00:02:02,143
<i>totally self-contained.</i>

38
00:02:02,143 --> 00:02:05,354
<i>So the global scope is not 
a dangerous thing here,</i>

39
00:02:05,355 --> 00:02:09,047
<i>but it can be if the project 
gets very large.</i>

40
00:02:09,749 --> 00:02:11,762
<i>Most of the time though, 
it's quite handy,</i>

41
00:02:11,772 --> 00:02:15,962
<i>certainly for us, to define variables
here outside of functions</i>

42
00:02:15,967 --> 00:02:20,131
<i>so that they are in the global scope
and they can be accessed from anywhere.</i>

43
00:02:20,566 --> 00:02:23,447
<i>Now, the fact that there's a global scope</i>

44
00:02:23,452 --> 00:02:25,790
<i>of course indicates
that there's something else</i>

45
00:02:25,790 --> 00:02:28,053
<i>and indeed there is,
there is in fact a local scope.</i>

46
00:02:28,053 --> 00:02:29,959
<i>So what is a local scope?</i>

47
00:02:29,959 --> 00:02:32,345
<i>Well let's take a look
at the function here.</i>

48
00:02:32,682 --> 00:02:35,510
<i>This variable here, also defined with 
the keyword</i> 'var',

49
00:02:35,908 --> 00:02:38,296
<i>is defined inside this function.</i>

50
00:02:39,321 --> 00:02:44,075
<i>As a consequence, it
is in the local scope of this function.</i>

51
00:02:44,330 --> 00:02:50,791
<i>That means we can 
of course access it within the function,</i>

52
00:02:50,791 --> 00:02:53,582
<i>but we can't access it 
from anywhere else.</i>

53
00:02:54,165 --> 00:02:59,292
<i>It's only local to the function,
it's only available to the function.</i>

54
00:02:59,292 --> 00:03:01,034
<i>And that's of course how it should be.</i>

55
00:03:01,034 --> 00:03:04,743
<i>Many times we define variables
inside of functions,</i>

56
00:03:04,743 --> 00:03:07,242
<i>that help us do a particular job,</i>

57
00:03:07,244 --> 00:03:11,269
<i>the job that this particular function
is designed to do.</i>

58
00:03:11,269 --> 00:03:15,516
<i>And then once we're outside of 
the function, once we leave the function,</i>

59
00:03:15,516 --> 00:03:17,515
<i>we want to forget about those variables</i>

60
00:03:17,515 --> 00:03:21,434
<i>and we certainly don't want anyone else
to mess with these variables.</i>

61
00:03:21,434 --> 00:03:26,898
<i>So it's typically quite handy actually
to have variables that are local</i>

62
00:03:28,642 --> 00:03:29,902
<i>to the functions.</i>

63
00:03:29,920 --> 00:03:32,818
<i>And most of the time, in fact,
when we will write functions,</i>

64
00:03:32,818 --> 00:03:36,142
<i>we will use local variables</i>

65
00:03:36,142 --> 00:03:37,338
<i>but not always.</i>

66
00:03:37,348 --> 00:03:39,637
<i>But, in any case, this is the local scope.</i>

67
00:03:39,637 --> 00:03:42,250
<i>So, hope you understand this now.</i>

68
00:03:42,252 --> 00:03:45,473
<i>If you define things 
outside of the functions here,</i>

69
00:03:45,473 --> 00:03:48,241
<i>then they're in the global scope,
accessible from anywhere.</i>

70
00:03:48,255 --> 00:03:52,213
<i>If you define them
inside the function here,</i>

71
00:03:52,213 --> 00:03:54,108
<i>then they're local--</i>

72
00:03:54,108 --> 00:03:55,979
<i>Only accessible to the function.</i>

73
00:03:55,979 --> 00:03:58,523
<i>So, you may wonder, okay,
that's pretty straightforward,</i>

74
00:03:58,523 --> 00:03:59,824
<i>where's the catch?</i>

75
00:03:59,824 --> 00:04:01,016
<i>Here's the catch.</i>

76
00:04:01,016 --> 00:04:03,822
<i>It turns out 
that you can define variables</i>

77
00:04:03,822 --> 00:04:05,489
<i>without the keyword</i> 'var'.

78
00:04:05,829 --> 00:04:08,686
<i>You could simply leave this </i>'var'<i> away.</i>

79
00:04:09,296 --> 00:04:13,946
<i>Now, you haven't heard that from me,
because it's very bad practice</i>

80
00:04:13,961 --> 00:04:19,621
<i>and it leads to a very subtle
but difficult problem.</i>

81
00:04:19,621 --> 00:04:21,919
<i>And as a following,
if you would actually</i>

82
00:04:21,919 --> 00:04:26,198
<i>leave </i>'var'<i> away
in the declaration of a variable</i>

83
00:04:26,198 --> 00:04:27,861
<i>inside of a function,</i>

84
00:04:28,825 --> 00:04:33,795
<i>confusingly, that variable would now
be in the global scope.</i>

85
00:04:34,371 --> 00:04:37,551
<i>Even though you defined it 
in the function.</i>

86
00:04:38,437 --> 00:04:43,674
<i>And so, that leads to all kinds of
hard to track down bugs.</i>

87
00:04:43,674 --> 00:04:48,275
<i>So, there's a very simple rule
how to avoid this</i>

88
00:04:48,275 --> 00:04:53,534
<i>which is always use the keyword </i>'var'<i>
when you declare variables.</i>

89
00:04:53,534 --> 00:04:57,299
<i>Whether it's outside functions
or inside a functions, doesn't matter,</i>

90
00:04:57,306 --> 00:04:59,963
<i>always use the keyword</i> 'var'.

91
00:04:59,963 --> 00:05:06,101
<i>Now, let me show you how this works
and how subtle these errors could be.</i>

92
00:05:07,118 --> 00:05:09,232
<i>Let me simply
take this file here, this code,</i>

93
00:05:09,232 --> 00:05:14,168
<i>I'm just going to select
the entirety of the code here</i>

94
00:05:14,168 --> 00:05:18,451
<i>and copy it and then 
I'm going to create a new file, okay?</i>

95
00:05:18,451 --> 00:05:21,151
<i>New &gt; Text Document</i>

96
00:05:21,151 --> 00:05:23,622
<i>and I'm going to paste this code in here</i>

97
00:05:23,622 --> 00:05:29,052
<i>and now I'm going
to delete this code here.</i>

98
00:05:29,672 --> 00:05:33,171
<i>Okay, so now we have 
an empty JavaScript file.</i>

99
00:05:33,672 --> 00:05:40,524
<i>So, what I'm going to do here
is I'm going to declare a function,</i>

100
00:05:40,560 --> 00:05:44,853
<i>function test1</i>

101
00:05:49,703 --> 00:05:53,356
<i>And what I'm going to do here
is something, you know, that's bad</i>

102
00:05:53,356 --> 00:05:56,494
<i>and that you shouldn't do but I'm
going to do it nonetheless as a demo.</i>

103
00:05:56,504 --> 00:06:00,566
<i>I'm going to declare a variable
without the </i>'var'<i> keyword.</i>

104
00:06:00,566 --> 00:06:05,653
<i>Okay, so </i>foo = 4<i> and then semicolon.</i>

105
00:06:06,484 --> 00:06:11,585
<i>Now I'm going to declare 
a second function</i>

106
00:06:11,585 --> 00:06:13,635
<i>that I'm going to name</i> test2.

107
00:06:14,584 --> 00:06:21,088
<i>And what this function does is it simply
printing the value of variable</i> foo

108
00:06:21,088 --> 00:06:25,456
<i>into the console.
So I'm going to say</i> console.log(foo);.

109
00:06:26,257 --> 00:06:29,179
<i>Now both of these are pretty 
straightforward functions</i>

110
00:06:29,179 --> 00:06:30,906
<i>and they don't take any--</i>

111
00:06:31,346 --> 00:06:34,476
<i>we're not going to define
any parameters here.</i>

112
00:06:34,476 --> 00:06:39,957
<i>Now simply like that, I wouldn't 
of course have any issues</i>

113
00:06:39,957 --> 00:06:42,661
<i>because this code
will actually not execute</i>

114
00:06:42,661 --> 00:06:45,528
<i>we're simply defining functions,
we're not calling them yet.</i>

115
00:06:45,528 --> 00:06:51,081
<i>So, let's call these functions.
Let's first call this function</i> test1

116
00:06:52,203 --> 00:06:55,864
<i>and then let's call
the other function </i>test2.

117
00:06:56,713 --> 00:06:57,875
<i>Alright.</i>

118
00:06:57,875 --> 00:07:00,581
<i>And now let's go ahead and save this file</i>

119
00:07:02,151 --> 00:07:10,620
<i>as, save as, whatever you want to.
I'm going to call this 'Scope demo'.</i>

120
00:07:11,180 --> 00:07:13,081
<i>Okay?</i>
Scope_demo.

121
00:07:13,081 --> 00:07:14,475
<i>Alright.</i>

122
00:07:14,475 --> 00:07:17,766
<i>Save this, and now let's
go over to the browser.</i>

123
00:07:19,527 --> 00:07:26,434
<i>We still have the first example open here
with the Hardy-Weinberg frequencies.</i>

124
00:07:26,434 --> 00:07:30,245
<i>So I'm going to open</i> scope_demo.html.

125
00:07:30,245 --> 00:07:35,976
<i>Just going to type this directly into 
the browser address bar here.</i>

126
00:07:35,976 --> 00:07:38,275
<i>because it's in the same directory.</i>

127
00:07:38,275 --> 00:07:42,272
<i>But you can also just say</i> File &gt; Open<i>
and find your scope demo file.</i>

128
00:07:42,272 --> 00:07:46,912
<i>Okay so I'm going to hit
return, scope demo.</i>

129
00:07:46,912 --> 00:07:51,877
<i>File has not been found, okay,
let's see where have I gone wrong.</i>

130
00:07:51,877 --> 00:07:56,484
<i>Scope demo.html.
Did I save this in the wrong location?</i>

131
00:07:56,484 --> 00:08:00,120
<i>Save as, ah yes, I saved it in
the wrong location.</i>

132
00:08:00,120 --> 00:08:04,900
<i>Okay,</i> Code examples &gt; scope demo &gt; Save.

133
00:08:04,900 --> 00:08:08,999
<i>By the way, I'm going to keep these,
if I make these types of mistakes,</i>

134
00:08:08,999 --> 00:08:10,829
<i>I'm actually going
to keep them in the video</i>

135
00:08:10,829 --> 00:08:12,805
<i>because these will be mistakes</i>

136
00:08:12,805 --> 00:08:17,661
<i>that I hope you can learn from
that happens to all of us all of the time</i>

137
00:08:17,661 --> 00:08:21,909
<i>and the same if I happen to make
coding mistakes and a code won't run,</i>

138
00:08:21,909 --> 00:08:24,968
<i>I will not actually edit
that out of the videos,</i>

139
00:08:24,968 --> 00:08:27,235
<i>because I think it's
actually quite educational.</i>

140
00:08:27,235 --> 00:08:31,457
<i>Okay, in any case, let's save this file,
okay we're now in code examples</i>

141
00:08:31,457 --> 00:08:35,198
<i>Okay, that worked well.
So let's go back here, reload.</i>

142
00:08:36,148 --> 00:08:40,134
<i>I've found the file and let's take
a look at the console.</i>

143
00:08:40,134 --> 00:08:43,114
<i>So it prints </i>'4'<i> here.</i>

144
00:08:43,114 --> 00:08:45,287
<i>So is this what we expect?</i>

145
00:08:45,287 --> 00:08:46,808
<i>Well let's take a look at the code.</i>

146
00:08:46,808 --> 00:08:48,778
<i>So what have we done here?</i>

147
00:08:48,778 --> 00:08:52,119
<i>So in the first function,
that we're calling </i>function test1,

148
00:08:52,119 --> 00:08:56,311
<i>we're declaring a variable '4'
because we're not using the </i>var<i> keyword,</i>

149
00:08:56,311 --> 00:08:59,680
<i>this variable is in the global scope
which means it can be accessed</i>

150
00:08:59,680 --> 00:09:01,326
<i>from anywhere else.</i>

151
00:09:01,326 --> 00:09:04,439
<i>Then, we're calling</i> function test2.

152
00:09:04,439 --> 00:09:10,464
Function test2 <i>is asked
to print </i>foo<i> into the console.</i>

153
00:09:10,464 --> 00:09:14,378
<i>It finds </i>foo<i> in the global scope.</i>

154
00:09:14,378 --> 00:09:17,136
<i>There's no local scope</i>
foo<i> variable here</i>

155
00:09:17,276 --> 00:09:24,299
<i>but there is one in the global scope</i>
<i>and so it correctly prints this '4' value.</i>

156
00:09:24,299 --> 00:09:28,194
<i>Now let's do a subtle modification here.</i>

157
00:09:28,194 --> 00:09:33,517
<i>Let's do it correctly by saying</i>
var foo = 4.

158
00:09:33,517 --> 00:09:39,316
<i>Now this variable is in the local scope
here of this function.</i>

159
00:09:39,316 --> 00:09:43,608
<i>So what would happen if I saved this
and went over to the browser</i>

160
00:09:43,608 --> 00:09:45,605
<i>and reload this document.</i>

161
00:09:45,605 --> 00:09:47,189
<i>Think about this for a second.</i>

162
00:09:47,189 --> 00:09:49,097
<i>Alright, ready, let's reload.</i>

163
00:09:49,097 --> 00:09:50,656
<i>Boom, error.</i>

164
00:09:50,656 --> 00:09:53,026
Uncaught ReferenceError.

165
00:09:53,026 --> 00:09:54,777
foo is not defined

166
00:09:55,577 --> 00:10:00,946
<i>So, you'll probably see these errors,
this one in particular, quite a bit.</i>

167
00:10:01,956 --> 00:10:04,061
<i>What does this mean</i>
'foo is not defined'?

168
00:10:04,061 --> 00:10:05,798
<i>Well, let's go back to the code.</i>

169
00:10:06,875 --> 00:10:10,018
<i>So, we're declaring this variable here,</i>

170
00:10:10,018 --> 00:10:15,587
<i>and it's declared with the </i>var<i> keyword,
which is the right way to do it.</i>

171
00:10:15,587 --> 00:10:20,675
<i>It is now part of the local scope
of this function.</i>

172
00:10:21,540 --> 00:10:24,537
<i>So when we are then calling</i>
function test2,

173
00:10:24,834 --> 00:10:28,797
test2<i> is searching for </i>'foo'<i>
in its local scope,</i>

174
00:10:28,797 --> 00:10:31,893
<i>doesn't find any, because there's
no variable declaration here.</i>

175
00:10:31,893 --> 00:10:34,460
<i>Then, it's going to
check the global scope.</i>

176
00:10:34,460 --> 00:10:37,112
<i>Now, </i>'foo'<i> is not in the global scope.</i>

177
00:10:37,112 --> 00:10:41,437
<i>So there's no </i>'foo'<i> variable 
that this </i>test2<i> can work with.</i>

178
00:10:41,437 --> 00:10:45,274
<i>So this variable here
is hidden from this function here</i>

179
00:10:45,274 --> 00:10:50,205
<i>because it's simply local to
this scope here of this function.</i>

180
00:10:51,265 --> 00:10:56,375
<i>So that's why here in the browser
you get this</i> Uncaught ReferenceError

181
00:10:56,375 --> 00:10:58,542
'foo is not defined'.

182
00:10:58,542 --> 00:11:03,435
<i>This line here simply
does not know what </i>'foo'<i> is</i>

183
00:11:03,435 --> 00:11:06,173
<i>because </i>'foo'<i> here
is declared to be local.</i>

184
00:11:06,174 --> 00:11:08,930
<i>And so that's an important concept</i>

185
00:11:08,930 --> 00:11:12,956
<i>and, again, the takeaway message 
from this video is quite simple.</i>

186
00:11:12,956 --> 00:11:16,741
<i>Always use use </i>'var'<i>
when you declare variables.</i>

187
00:11:16,741 --> 00:11:20,453
<i>Whether it's outside 
or inside of functions, always use</i> 'var'

188
00:11:20,453 --> 00:11:28,453
<i>and then, if you do that, you can follow
the simple rule or the simple concept</i>

189
00:11:28,465 --> 00:11:33,828
<i>that variables that are defined outside
the function are in the global scope,</i>

190
00:11:33,828 --> 00:11:37,782
<i>variables that are defined inside
of the functions are in the local scope.</i>

191
00:11:37,782 --> 00:11:42,032
<i>This is pretty straightforward if you
use the keyword</i> 'var'

192
00:11:42,032 --> 00:11:44,167
<i>whenever you declare variables.</i>

193
00:11:44,167 --> 00:11:46,827
Alright this concludes not only
this video lecture ten

194
00:11:46,827 --> 00:11:48,738
but also chapter two.

195
00:11:48,738 --> 00:11:51,453
So, you learned a whole lot
in this chapter.

196
00:11:51,453 --> 00:11:54,785
We started out defining
a couple of key terms

197
00:11:54,785 --> 00:11:57,075
that we'll use throughout the course.

198
00:11:57,075 --> 00:11:59,785
Evolution, genes, alleles...

199
00:11:59,785 --> 00:12:05,814
Then we developed an intuition
for the normal of evolutionary biology

200
00:12:05,814 --> 00:12:07,560
which is the Hardy-Weinberg model

201
00:12:07,560 --> 00:12:10,570
and then we implemented
the Hardy-Weinberg model

202
00:12:10,570 --> 00:12:15,735
in JavaScript, and thereby learning
key basic concepts of JavaScript

203
00:12:15,735 --> 00:12:19,263
such as declaring variables, 
assigning variables

204
00:12:19,263 --> 00:12:22,051
through some basic arithmetic in code,

205
00:12:22,051 --> 00:12:25,260
defining functions, iterations
and now at the end,

206
00:12:25,260 --> 00:12:28,721
you've even heard
about the concept of a scope.

207
00:12:28,721 --> 00:12:33,339
So we're doing really well.
Congratulations if you made it up to here.

208
00:12:33,339 --> 00:12:38,079
In the next chapter that we'll begin
with the following video,

209
00:12:38,079 --> 00:12:40,749
the next video, chapter three,

210
00:12:40,749 --> 00:12:44,304
we will loosen up
some of the assumptions

211
00:12:44,304 --> 00:12:46,334
of the Hardy-Weinberg model

212
00:12:46,334 --> 00:12:50,604
and that will lead to very 
interesting dynamics.

213
00:12:50,604 --> 00:12:55,002
And along the way, of course,
we'll learn new JavaScript concepts.

214
00:12:55,002 --> 00:12:56,947
So I'll see you in the next chapter.
