1
00:00:03,470 --> 00:00:06,940
Bienvenue à la Nature, dans le code,
nous sommes dans le chapitre 2 leçon 8,

2
00:00:06,940 --> 00:00:11,990
Dans la dernière vidéo, nous avons introduit
un concept très puissant à savoir les fonctions

3
00:00:11,990 --> 00:00:15,950
et des fonctions permet d'encapsuler
le code, puis exécuter plus tard

4
00:00:16,100 --> 00:00:18,710
que le code en appelant simplement
la fonction.

5
00:00:18,710 --> 00:00:23,980
Dans cette vidéo, nous allons apprendre d'un
autre concept très puissant appelé itération.

6
00:00:23,980 --> 00:00:25,170
Alors allons-y.

7
00:00:25,170 --> 00:00:26,100
D'accord !

8
00:00:26,100 --> 00:00:29,540
c'est donc l'état actuel de notre code,
nous l'avons nettoyé un peu.

9
00:00:29,540 --> 00:00:33,460
En créant cette fonction ici,
encapsulant ce code ici

10
00:00:33,460 --> 00:00:37,540
où nous calculons [neutrino] type de
fréquences basé sur la fréquence des allèles

11
00:00:38,910 --> 00:00:41,310
mais il reste un peu de redondance ici,

12
00:00:41,310 --> 00:00:42,460
Je veux dire ces lignes ici,

13
00:00:42,460 --> 00:00:46,020
ces 2 lignes ici, ils ont répété 5 fois,

14
00:00:46,020 --> 00:00:48,960
à l'exception du compteur de génération ici

15
00:00:48,960 --> 00:00:52,610
mais encore beaucoup de redondance
et cela fonctionne très bien ici fait

16
00:00:52,610 --> 00:00:53,420
Dans cet exemple,

17
00:00:53,420 --> 00:00:56,040
mais si nous voulons exécuter ces 2 lignes.

18
00:00:56,040 --> 00:01:02,310
Vous connaissez un million de fois au lieu
de seulement 5 fois donc pour le faire.

19
00:01:02,310 --> 00:01:06,430
Nous avons besoin de ce concept d'une itération
et d'itération est habituellement

20
00:01:06,500 --> 00:01:10,660
mis en œuvre avec la boucle
et le plus célèbre exemple

21
00:01:10,660 --> 00:01:13,070
d'une boucle est la boucle "pour".

22
00:01:13,070 --> 00:01:15,940
Voilà donc ce que je vais utiliser ici

23
00:01:15,940 --> 00:01:19,180
mais avant nous allons réellement
le mettre en œuvre dans le code.

24
00:01:19,180 --> 00:01:22,120
Permettez-moi de vous expliquer comment
cela fonctionne en principe.

25
00:01:22,320 --> 00:01:23,980
En Javascript.

26
00:01:23,980 --> 00:01:27,690
Alors, voici comment une boucle "pour"
est structuré en Javascript.

27
00:01:27,690 --> 00:01:32,100
Donc, on va écrire "pour",
puis entre parenthèses.

28
00:01:32,100 --> 00:01:38,830
Il va falloir une liste de 3 choses,
à savoir, le premier point ici,

29
00:01:38,830 --> 00:01:41,320
le premier élément est celui
d'une initialisation.

30
00:01:43,970 --> 00:01:48,830
Bon, alors initialisation,
je vais vous expliquer dans un second

31
00:01:48,830 --> 00:01:50,080
Qu'est ce que c'est,

32
00:01:50,080 --> 00:01:52,670
donc nous allons mettre un point-virgule.

33
00:01:52,670 --> 00:01:59,280
Ensuite, nous devons définir la condition,
d'accord, condition point-virgule.

34
00:01:59,280 --> 00:02:03,640
Et la troisième chose que nous devons
définir ce que je vais appeler

35
00:02:03,640 --> 00:02:10,430
l'expression finale, expression finale
puis nous fermons les parenthèses

36
00:02:11,220 --> 00:02:15,820
et maintenant entre accolades,
très semblable à la fonction,

37
00:02:15,820 --> 00:02:17,840
nous pouvons maintenant écrire ici.

38
00:02:19,440 --> 00:02:20,720
Le code.

39
00:02:20,720 --> 00:02:21,430
D'accord ?

40
00:02:21,430 --> 00:02:26,440
Le code à itérer.

41
00:02:26,440 --> 00:02:27,300
D'accord !

42
00:02:27,300 --> 00:02:28,960
alors comment est ce travail?

43
00:02:28,960 --> 00:02:31,600
Donc, fondamentalement, au début,

44
00:02:31,600 --> 00:02:35,970
la première fois que vous touchez cette boucle,
l'initialisation sera exécutée

45
00:02:35,970 --> 00:02:38,290
et ça va être une chose importante.

46
00:02:38,290 --> 00:02:39,770
Ainsi, la première,

47
00:02:39,770 --> 00:02:42,570
ici vous pouvez faire un peu
de mise en place, d'accord, alors

48
00:02:45,060 --> 00:02:48,980
JavaScript vérifiera l'état
et si la condition est vraie,

49
00:02:48,980 --> 00:02:51,300
alors le code ici,

50
00:02:51,300 --> 00:02:55,890
malgré la complexité sera effectivement
exécuté et puis après

51
00:02:55,890 --> 00:02:57,440
cela.

52
00:02:57,440 --> 00:03:00,120
L'expression finale sera exécutée.

53
00:03:00,120 --> 00:03:02,390
Alors là, vous pouvez faire
un peu de nettoyage.

54
00:03:02,390 --> 00:03:03,160
D'accord.

55
00:03:03,160 --> 00:03:05,660
Donc, l'expression finale sera exécutée.

56
00:03:05,660 --> 00:03:07,520
Puis la même chose recommence.

57
00:03:07,520 --> 00:03:10,020
Mais on ne va pas revenir
à l'initialisation

58
00:03:10,020 --> 00:03:12,510
Cela se passera seulemnt dans le début,

59
00:03:12,510 --> 00:03:15,550
mais nous allons revenir et vérifier l'état

60
00:03:15,550 --> 00:03:18,150
si cela est encore vrai.
Si elle est encore vrai,

61
00:03:18,150 --> 00:03:22,580
alors le code continue à être exécuté,
l'expression finale sera exécutée.

62
00:03:22,650 --> 00:03:24,780
Retouner en arriére,
vérifier l'état et ainsi de suite,

63
00:03:24,780 --> 00:03:26,870
aussi longtemps que
cette condition est vraie.

64
00:03:26,870 --> 00:03:29,430
Le code sera répété,

65
00:03:29,430 --> 00:03:33,410
donc il doit y avoir un moyen
de nous assurer que cette condition

66
00:03:33,930 --> 00:03:38,120
finira par ne plus être vrai
pour que cette itération arrête,

67
00:03:38,120 --> 00:03:41,290
sinon vous êtes dans
une boucle dite infinie.

68
00:03:41,290 --> 00:03:43,870
Donc, nous allons mettre en œuvre
ceci dans Javascript.

69
00:03:44,050 --> 00:03:44,820
Très bien.

70
00:03:44,820 --> 00:03:48,150
Alors, maintenant que nous savons
comment la boucle "pour" est structuré,

71
00:03:48,150 --> 00:03:51,810
pourquoi ne pas aller et mettre en œuvre un,
maintenant, au lieu de le faire

72
00:03:51,840 --> 00:03:53,420
dans le code ici tout de suite,

73
00:03:53,420 --> 00:03:55,490
que nous finirons par faire.

74
00:03:55,490 --> 00:03:59,290
Nous allons effectivement aller vers
le navigateur, dans la console

75
00:03:59,290 --> 00:04:01,120
et nous allons le faire,

76
00:04:01,120 --> 00:04:01,840
nous allons,

77
00:04:01,840 --> 00:04:03,440
nous allons faire une boucle ici.

78
00:04:03,440 --> 00:04:05,600
Nous allons créer un ici.

79
00:04:05,600 --> 00:04:06,950
Afin que vous puissiez,

80
00:04:06,950 --> 00:04:08,250
comme je l'ai dit au début.

81
00:04:08,250 --> 00:04:10,870
Vous pouvez effectivement coder ici
dans la console,

82
00:04:10,870 --> 00:04:18,720
de sorte que vous avez un curseur clignotant
ici et je peux juste dire d'accord "pour"

83
00:04:18,720 --> 00:04:20,050
et vous savez,

84
00:04:20,050 --> 00:04:25,040
voici déjà un exemple d'une boucle
que j'ai créé avant,

85
00:04:25,040 --> 00:04:29,340
mais écrivons-le simplement
en détail, d'accord?

86
00:04:29,340 --> 00:04:33,330
Donc "pour", puis ouvrir les parenthèses,
maintenant l'initialisation

87
00:04:33,330 --> 00:04:40,450
que je vais faire est en fait
le suivant var i est égal à zéro.

88
00:04:40,720 --> 00:04:41,700
D'accord.

89
00:04:41,700 --> 00:04:43,260
Maintenant, c'est l'initialisation

90
00:04:43,260 --> 00:04:47,150
et ici j'initialise essentiellement
une variable que je vais utiliser

91
00:04:47,150 --> 00:04:51,300
comme un intervalle de compteur
dans la boucle et je vais l'appeler,

92
00:04:51,300 --> 00:04:53,880
vous pouvez l'appeler ce que vous voulez.

93
00:04:53,880 --> 00:04:58,640
Je sais que je l'ai dit au début,
vous savez appeler vos variables,

94
00:04:58,640 --> 00:04:59,580
Vous savez ?

95
00:04:59,580 --> 00:05:01,750
selon ce qu'ils font réellement

96
00:05:01,750 --> 00:05:04,840
ou ce qu'ils le stocke,
ce qu'ils représentent.

97
00:05:04,840 --> 00:05:08,920
Maintenant, je viole cette règle ici un peu

98
00:05:08,920 --> 00:05:14,390
mais comme un compteur dans une itération
est une chose extrêmement courante

99
00:05:14,390 --> 00:05:17,920
à faire et donc je vais rester
avec cette convention,

100
00:05:17,920 --> 00:05:19,930
tu sais que je vais juste 'i' ici

101
00:05:19,930 --> 00:05:23,540
Comme une variable que je vais utiliser
dans la boucle.

102
00:05:23,540 --> 00:05:24,310
Ok.

103
00:05:24,310 --> 00:05:29,960
donc la condition va être que
'i' va être inférieure à 10

104
00:05:29,960 --> 00:05:30,740
Ok.

105
00:05:30,740 --> 00:05:34,440
de sorte que ma condition
est donc tant que 'i'

106
00:05:34,440 --> 00:05:37,120
est inférieur à 10, qui est, au début,

107
00:05:37,120 --> 00:05:38,200
parce que nous commençons

108
00:05:38,200 --> 00:05:40,880
avec 'i' égal à zéro
la boucle sera exécutée.

109
00:05:40,880 --> 00:05:41,630
Ok.

110
00:05:41,630 --> 00:05:42,680
Elle sera itérée.

111
00:05:43,610 --> 00:05:45,080
Et puis l'expression finale,

112
00:05:46,250 --> 00:05:50,740
ici, je vais dire, 'i' est égal
à i + 1, d'accord.

113
00:05:50,740 --> 00:05:52,760
Et puis je vais fermer les parenthèses

114
00:05:52,760 --> 00:05:58,790
et ce que cela fait est qu'il ajoute
essentiellement un à ce qui est stocké dans i

115
00:05:58,790 --> 00:06:01,350
donc il augmente cette valeur par un

116
00:06:01,350 --> 00:06:03,400
puis il le stocke dans i.

117
00:06:03,400 --> 00:06:08,630
Donc, en réalité ce que cela fait ici
c'est, il augmente la valeur de i

118
00:06:08,710 --> 00:06:10,890
par un, bien.

119
00:06:10,890 --> 00:06:12,830
Maintenant, je vais mettre en œuvre

120
00:06:12,910 --> 00:06:17,110
Le code à itérer, donc je vais écrire
ici dans ces accolades

121
00:06:17,110 --> 00:06:22,250
et maintenant je vais toucher
shift-entrer d'accord?

122
00:06:22,250 --> 00:06:25,420
parce que si vous appuyez sur Entrée
dans la console et le code est exécuté

123
00:06:25,420 --> 00:06:26,430
et je ne veux pas cela.

124
00:06:26,430 --> 00:06:31,490
Nous créerons simplement la boucle,
je vais appuyer shift puis entrer

125
00:06:31,490 --> 00:06:32,870
encore une fois.

126
00:06:32,870 --> 00:06:33,710
D'accord.

127
00:06:33,710 --> 00:06:37,440
Et maintenant, nous allons mettre en œuvre
le corps ici de cette boucle.

128
00:06:37,440 --> 00:06:38,210
Donc, ici,

129
00:06:38,210 --> 00:06:40,190
dans ce cas, je voudrais simplement dire,

130
00:06:40,190 --> 00:06:40,900
Vous savez?

131
00:06:40,900 --> 00:06:47,100
la console, connecte i,
donc fondamentalement juste imprimer i

132
00:06:47,340 --> 00:06:49,790
dans ceci dans la console.

133
00:06:49,790 --> 00:06:50,520
D'accord.

134
00:06:50,520 --> 00:06:51,750
Donc maintenant je vais appuyer sur entrer,

135
00:06:51,750 --> 00:06:54,600
pas shift-entrer, mais entrer
pour exécuter ce code

136
00:06:54,600 --> 00:06:56,060
et voici ce qui se passe,

137
00:06:56,060 --> 00:06:58,850
de sorte que vous pouvez ignorer
ce qui est indéfini ici

138
00:07:00,610 --> 00:07:03,090
0, 1, 2 etc,

139
00:07:03,470 --> 00:07:05,730
sera imprimé dans la console jusqu'à 9.

140
00:07:05,730 --> 00:07:06,920
Alors qu'est-ce qui se passe ici.

141
00:07:06,920 --> 00:07:07,660
Eh bien,

142
00:07:07,660 --> 00:07:09,080
c'est assez simple.

143
00:07:09,080 --> 00:07:12,220
Comprenez-vous maintenant
ce que font ces 3 choses

144
00:07:12,360 --> 00:07:17,200
Alors d'abord, nous avons initialisé
cette variable i à 0 alors la condition

145
00:07:17,200 --> 00:07:19,870
est vérifié et oui c'est vrai
zéro est inférieur à 10

146
00:07:19,870 --> 00:07:22,900
donc ce code sera exécuté,
et nous sortant i,

147
00:07:22,900 --> 00:07:26,020
qui, à ce point est égal à zéro, d'accord.

148
00:07:26,020 --> 00:07:30,660
Alors maintenant, nous allons exécuter
l'expression de fichier i augmentant par un.

149
00:07:30,660 --> 00:07:31,420
Ok.

150
00:07:31,420 --> 00:07:33,120
nous allons revenir à la condition.

151
00:07:33,120 --> 00:07:37,400
Rappelez-vous que nous allons jamais revenir
à cette initialisation seulement

152
00:07:37,400 --> 00:07:38,950
une fois dans le début.

153
00:07:38,950 --> 00:07:42,560
Donc, nous allons revenir à la condition i
est-il toujours inférieure à 10?

154
00:07:42,560 --> 00:07:43,360
Hé bien oui,

155
00:07:43,360 --> 00:07:45,350
on est encore inférieur à 10.

156
00:07:45,350 --> 00:07:46,740
Donc, cela est encore vrai.

157
00:07:46,740 --> 00:07:50,450
Donc, ce sera maintenant exécutée,
console log et bien sûr nous sortant

158
00:07:50,490 --> 00:07:52,760
un ici car i est un

159
00:07:52,760 --> 00:07:54,590
encore une fois, l'expression finale,

160
00:07:54,590 --> 00:07:57,380
i sera augmenté d'un et nous trouvons deux

161
00:07:57,380 --> 00:08:00,960
nous allons revenir à cette condition,
deux est plus petits que 10, toujours vrai,

162
00:08:00,960 --> 00:08:02,360
et ainsi de suite, ok.

163
00:08:02,360 --> 00:08:05,010
Donc, ce sera vrai tout le chemin.

164
00:08:05,010 --> 00:08:09,290
Maintenant, ici, supposons
que nous sommes à i est égal à 9,

165
00:08:09,290 --> 00:08:12,010
alors 9 est encore plus petit que 10,
d'accord.

166
00:08:12,010 --> 00:08:13,540
donc cette ligne sera exécutée.

167
00:08:13,540 --> 00:08:17,090
9 sera imprimé dans la console,
maintenant une expression finale.

168
00:08:17,090 --> 00:08:22,880
9 sera augmenté de 1 et donc
i est maintenant 10.

169
00:08:22,880 --> 00:08:26,480
Maintenant, nous allons revenir à la condition,
est-ce que 10 est inférieur à 10?

170
00:08:26,480 --> 00:08:28,220
Non, il est certainement pas.

171
00:08:28,220 --> 00:08:30,010
Donc, ce n'est pas plus vrai.

172
00:08:30,010 --> 00:08:35,620
Et maintenant l'itération s'arrêtera
et voilà pourquoi il s'arrête à 9 ici

173
00:08:35,790 --> 00:08:38,550
Il va de 0 à 9.

174
00:08:38,550 --> 00:08:41,840
Maintenant, vous pouvez le faire,
vous pouvez commencer ici de un

175
00:08:41,840 --> 00:08:44,660
et aller à toute autre valeur.

176
00:08:44,660 --> 00:08:46,900
En fait, vous pouvez faire
ce que vous voulez?

177
00:08:46,900 --> 00:08:49,310
vous pouvez initialiser cette valeur ici

178
00:08:49,310 --> 00:08:52,200
à quelque valeur que vous souhaitez faire.

179
00:08:52,200 --> 00:08:55,950
Vous pouvez avoir tout type
de condition que vous aimeriez avoir

180
00:08:55,950 --> 00:08:59,570
et vous pouvez avoir tout type
d'expression de fichier

181
00:08:59,570 --> 00:09:03,680
que vous aimeriez avoir ici,
ceci est juste la façon la plus commune

182
00:09:03,680 --> 00:09:07,200
que nous commençons à zéro,
nous avons la plus petite que condition.

183
00:09:07,200 --> 00:09:08,520
Donc, cela nous dit,

184
00:09:08,520 --> 00:09:12,330
ça va faire 10 fois, puis
un incrément simple par un

185
00:09:12,890 --> 00:09:14,250
mais un avis bien sûr ici,

186
00:09:14,250 --> 00:09:15,990
on ne va pas de l'un à 10,

187
00:09:15,990 --> 00:09:20,320
nous allons de zéro à 9,
ce qui est un moyen très courant

188
00:09:20,320 --> 00:09:25,750
de faire les choses parce que beaucoup, vous savez,
de nombreux aspects de la programmation

189
00:09:25,750 --> 00:09:32,000
sorte de zéro basé: alors compter
commencant généralement à zéro.

190
00:09:32,000 --> 00:09:37,300
Ceci est un concept que nous allons venir
à travers de nombreuses fois dans ce cours

191
00:09:37,300 --> 00:09:40,730
que nous commençons, vous savez,
qui traite des structures de données

192
00:09:42,370 --> 00:09:46,000
qui est une erreur typique que
la marque de programmation débutant

193
00:09:46,000 --> 00:09:48,610
qu'ils pensent compter devraient
commencer à un,

194
00:09:48,610 --> 00:09:52,790
qui, bien sûr, est ce que nous faisons
dans l'utilisation quotidienne normale

195
00:09:52,790 --> 00:09:57,150
en langage naturel, mais dans la programmation
comptant généralement commence à zéro,

196
00:09:57,150 --> 00:10:00,020
le premier élément a un index 0,
et ainsi de suite.

197
00:10:00,020 --> 00:10:04,780
Et voilà pourquoi j'ai utilisé
cet exemple ici en initialisant

198
00:10:04,820 --> 00:10:06,880
cette variable à zéro et non à un.

199
00:10:07,300 --> 00:10:08,040
D'accord.

200
00:10:08,040 --> 00:10:13,270
Alors maintenant, nous allons revenir au code
et à mettre en œuvre cela concrètement

201
00:10:13,270 --> 00:10:16,120
pour notre exemple Hardy Weinberg ici.

202
00:10:16,120 --> 00:10:18,640
Donc, ce que nous avons ici
est que nous avons ces 2 lignes

203
00:10:18,640 --> 00:10:22,060
et nous aimerions avoir ces itérés 5 fois.

204
00:10:22,060 --> 00:10:24,690
Donc, ce que nous pouvons faire maintenant
avec cette connaissance dans la main,

205
00:10:24,690 --> 00:10:28,830
nous pouvons créer cette boucle
"pour" en écrivant simplement «pour».

206
00:10:30,270 --> 00:10:33,160
var i égal à zéro.

207
00:10:33,160 --> 00:10:35,870
Alors, voici mon initialisation

208
00:10:35,870 --> 00:10:40,880
Et donc la condition serait ici
i moins de 5

209
00:10:40,880 --> 00:10:44,500
parce que je veuxexécuter
cette boucle 5 fois

210
00:10:44,500 --> 00:10:49,410
et puis je vais simplement
augmenter i par un.

211
00:10:49,410 --> 00:10:53,470
Comme je viens de le faire
dans l'exemple de la console.

212
00:10:53,470 --> 00:10:58,730
Et puis le code à itéré ici
est essentiellement ce code ici,

213
00:10:58,730 --> 00:11:02,690
donc je vais copier et en fait,
je vais juste couper

214
00:11:02,690 --> 00:11:04,660
et collé ici.

215
00:11:04,660 --> 00:11:05,480
D'accord.

216
00:11:05,480 --> 00:11:07,690
Je vais faire une belle indentation,

217
00:11:07,690 --> 00:11:11,310
non pas parce qu'il est absolument
nécessaire, car il est mieux

218
00:11:11,310 --> 00:11:13,760
pour le code esthétique et
plus propre, d'accord.

219
00:11:13,760 --> 00:11:17,300
Alors maintenant, nous pouvons
nous débarrasser de ces lignes ici.

220
00:11:17,300 --> 00:11:18,060
Donc,

221
00:11:18,060 --> 00:11:21,680
nous allonscontinuer et essayer de sortir,
nous allons sauver cela

222
00:11:21,680 --> 00:11:23,570
et nous allons passer à notre console.

223
00:11:24,460 --> 00:11:28,180
Et recharger le document et
nous allons voir ce qui se passe ici

224
00:11:28,180 --> 00:11:33,420
de sorte qu'il fonctionne en principe,
maintenant, nous faisons la sortie

225
00:11:33,420 --> 00:11:38,510
exactement la même ligne 5 fois
et chrome ici est agréable,

226
00:11:38,510 --> 00:11:41,910
pas perdre de l'espace et essentiellement
nous dire regardons je fais

227
00:11:41,970 --> 00:11:46,250
ce 5 fois la même chose exacte
donc plutôt que de délivrer,

228
00:11:46,250 --> 00:11:48,100
exactement les mêmes temps de chose.

229
00:11:48,100 --> 00:11:53,060
J'ai juste une sortie, une fois, puis
je vais vous dire combien de fois.

230
00:11:53,060 --> 00:11:54,700
Je suis en fait censé sortie cela.

231
00:11:55,450 --> 00:11:56,900
Donc, cela fonctionne en principe.

232
00:11:56,900 --> 00:11:58,750
Revenons à notre code.

233
00:11:58,750 --> 00:11:59,560
La raison pour laquelle,

234
00:11:59,560 --> 00:12:02,050
nous voyons principe est parce que
nous ne sortons pas

235
00:12:02,050 --> 00:12:04,720
nous ne voulons pas la sortie
de la génération une tout le temps,

236
00:12:04,720 --> 00:12:08,300
ils veulent réellement sortie 1 génération
dans 2,

237
00:12:08,300 --> 00:12:08,820
3,

238
00:12:08,820 --> 00:12:09,540
4,

239
00:12:09,540 --> 00:12:10,310
etc..

240
00:12:10,310 --> 00:12:12,410
alors comment est ce que ça va fonctionner?

241
00:12:12,410 --> 00:12:18,270
Eh bien, je besoin d'un moyen de remplacer
celui-là à partir d'une chaîne littérale

242
00:12:18,270 --> 00:12:22,300
ou le caractère réellement
quelque chose qui est calculé

243
00:12:22,300 --> 00:12:25,340
et nous avons un compteur dans cette boucle,

244
00:12:25,340 --> 00:12:29,600
ce qui est tout à fait à portée de main que
nous utilisons pour assurer que la boucle

245
00:12:29,640 --> 00:12:34,610
ne fonctionne pas toujours, mais nous pouvons
maintenant utiliser pour une deuxième question,

246
00:12:34,610 --> 00:12:38,450
à savoir - à la sortie, pour corriger
un certain nombre ici.

247
00:12:38,450 --> 00:12:43,900
Alors rappelez-vous la première fois
cette boucle est itérée, i est nul.

248
00:12:43,900 --> 00:12:45,900
la deuxième fois i est un,

249
00:12:45,900 --> 00:12:46,630
la 3ème fois.

250
00:12:46,630 --> 00:12:47,970
J'ai utilisé deux et ainsi de suite.

251
00:12:47,970 --> 00:12:50,130
Alors, vraiment ce que
nous aimerions faire ici est,

252
00:12:50,130 --> 00:12:53,150
sortie le nombre qui est plus grand,

253
00:12:53,150 --> 00:12:55,670
qui est un plus grand que i.

254
00:12:55,670 --> 00:12:58,460
Donc, nous pouvons le faire
avec force et annotation

255
00:12:58,460 --> 00:13:05,820
Donc, je vais tout simplement faire,
ce qui suit concaténer la chaîne ici.

256
00:13:05,960 --> 00:13:13,810
En disant, d'accord, sortie tout
simplement ici la valeur, i plus un.

257
00:13:13,840 --> 00:13:14,570
D'accord.

258
00:13:14,570 --> 00:13:18,040
Aller faire ceci belle en termes
d'espacement ici.

259
00:13:19,190 --> 00:13:21,150
Alors qu'est-ce qui va
se passer ici est que,

260
00:13:21,150 --> 00:13:25,030
génération sera émise,
la valeur qui est en plus un i.

261
00:13:25,110 --> 00:13:29,210
puis le côlon et les autres valeurs.

262
00:13:29,210 --> 00:13:32,720
Il est donc important pour vous de réaliser
que nous sommes tout simplement en sortie

263
00:13:32,800 --> 00:13:34,700
cette valeur, d'accord,
nous allons tout simplement la lecture.

264
00:13:34,700 --> 00:13:37,940
Nous ne stockons pas cela nul part.

265
00:13:37,940 --> 00:13:38,660
Ok.

266
00:13:38,660 --> 00:13:43,780
nous utilisons simplement en utilisant cette i
comme un moyen de sortie de la bonne génération.

267
00:13:43,910 --> 00:13:47,680
Nous ne le stockons pas nous
l'utilisons simplement pour écrire

268
00:13:47,680 --> 00:13:48,890
dans la console.

269
00:13:48,890 --> 00:13:49,610
Ok.

270
00:13:49,610 --> 00:13:52,570
Donc, enregistrons cela,
nous allons revenir à la console

271
00:13:52,570 --> 00:13:55,740
et recharger le document et boom,

272
00:13:55,740 --> 00:13:59,240
Ici, nous voyons, 1,2,3,4,5
génération correcte.

273
00:14:00,990 --> 00:14:03,250
et nous avons ici, avant,

274
00:14:03,250 --> 00:14:04,790
Les 3 valeurs.

275
00:14:04,790 --> 00:14:06,440
Alors revenons au code.

276
00:14:06,440 --> 00:14:07,160
Très brièvement

277
00:14:07,160 --> 00:14:09,280
juste pour que ce soit clair,

278
00:14:09,280 --> 00:14:11,740
j'aurais simplement dit, vous
le savez, la sortie i,

279
00:14:11,740 --> 00:14:13,540
donc ce qui serait arrivé ici?

280
00:14:13,540 --> 00:14:16,171
Je veux dire cela est un peu plus
propre mais il est mauvais

281
00:14:16,171 --> 00:14:20,510
parce que ce qui se passe ici, si nous enregistrons
cela et revenir en arrière et rechargeons,

282
00:14:20,510 --> 00:14:24,450
est que nous commencerions ici
Generation Zero,

283
00:14:24,450 --> 00:14:25,440
ce qui est faux.

284
00:14:25,440 --> 00:14:30,060
Donc, ceci est la partie de ces lignes ici
sont les lignes sorties

285
00:14:30,060 --> 00:14:31,420
par une boucle.

286
00:14:31,420 --> 00:14:34,710
Nous serions donc commencer ici
une génération zéro, ce qui est bien sûr pas vrai,

287
00:14:34,710 --> 00:14:38,310
nous avions déjà génération zéro,
puis nous arrêtons à 4.

288
00:14:38,350 --> 00:14:40,710
Voilà pourquoi, pour revenir au code.

289
00:14:40,710 --> 00:14:44,970
Nous devons ajouter ici, plus un, d'accord.

290
00:14:47,710 --> 00:14:48,500
Donc,

291
00:14:48,500 --> 00:14:49,470
mais ceci est une boucle.

292
00:14:49,470 --> 00:14:52,290
Donc, ce qui explique en fait
un certain nombre de choses.

293
00:14:52,290 --> 00:14:57,020
Donc la première chose que
nous comprenons maintenant ici est que

294
00:14:57,020 --> 00:15:03,540
nous pouvons créer ces boucles en itérant
nombreuses fois et que vous connaissez,

295
00:15:03,540 --> 00:15:06,080
répétant le même code encore et encore,

296
00:15:06,080 --> 00:15:09,280
et cela est bien sûr parfois,
il est fondamental

297
00:15:09,280 --> 00:15:10,660
dans l'informatique.

298
00:15:10,660 --> 00:15:14,150
Nous pouvons également utiliser
effectivement, à chaque itération.

299
00:15:14,150 --> 00:15:15,800
Nous avons un indice.

300
00:15:15,800 --> 00:15:20,810
Merci à cette variable i ici,
où dans l'itération nous sommes.

301
00:15:20,810 --> 00:15:23,430
Combien de fois nous avons déjà i
téré et c'est

302
00:15:23,430 --> 00:15:28,290
un élément d'information très puissant
que nous pouvons utiliser

303
00:15:28,290 --> 00:15:31,850
assez largement et nous verrons beaucoup
de nombreux exemples dans l'avenir.

304
00:15:32,080 --> 00:15:37,390
Ici, nous sommes tout simplement l'utiliser
pour produire le nombre correct de génération.

305
00:15:37,390 --> 00:15:38,080
D'accord !

306
00:15:38,080 --> 00:15:40,850
donc ce que je veux dire
au sujet de boucles et ensuite,

307
00:15:40,850 --> 00:15:44,430
en particulier de 'pour' boucles,
au moment où nous allons rencontrer

308
00:15:44,430 --> 00:15:48,600
d'autres types de boucles
tout au long pour le moment

309
00:15:48,600 --> 00:15:52,720
ceci est la boucle principale
que nous allons utiliser cette boucle "pour".

310
00:15:52,720 --> 00:15:54,890
C'est un concept très puissant.

311
00:15:54,890 --> 00:16:00,820
Donc, ceci conclut maintenant,
notre exemple Hardy Weinberg

312
00:16:00,820 --> 00:16:04,780
et je veux juste que vous regardez
ce code et vous savez,

313
00:16:04,780 --> 00:16:06,450
réfléchir sur ce que nous venons de faire.

314
00:16:06,450 --> 00:16:10,620
Alors tout d'abord, si vous avez réussi
à suivre tout jusqu'à ici

315
00:16:10,620 --> 00:16:16,290
et votre code est exécuté,
félicitations que vous utilisez déjà 90%

316
00:16:16,290 --> 00:16:19,250
des éléments clés de la programmation.

317
00:16:19,250 --> 00:16:21,190
Je veux dire que j'exagère un peu

318
00:16:21,190 --> 00:16:22,720
mais-- mais pas trop en fait,

319
00:16:22,720 --> 00:16:26,440
Je veux dire que vous utilisez
des variables, vous calculez les choses.

320
00:16:26,870 --> 00:16:30,500
Vous êtes sortie de choses,
vous utilisez les fonctions.

321
00:16:30,500 --> 00:16:32,590
Vous utilisez itération.

322
00:16:32,590 --> 00:16:33,570
Ils sont,

323
00:16:33,570 --> 00:16:35,820
ce sont des éléments clés
dans la programmation.

324
00:16:35,820 --> 00:16:37,910
Et comme vous le verrez en bas de la ligne,

325
00:16:37,910 --> 00:16:41,100
comme nous allons générer
un code plus compliqué.

326
00:16:41,100 --> 00:16:41,870
C'est,

327
00:16:41,870 --> 00:16:44,940
il est à peu près toujours ces éléments,
nous allons utiliser les fonctions

328
00:16:44,940 --> 00:16:49,470
largement et utilisera itération
intensivement et bien sûr

329
00:16:49,610 --> 00:16:52,640
les variables sont soient: un aspect clé.

330
00:16:52,780 --> 00:16:53,480
D'accord.

331
00:16:53,480 --> 00:16:57,410
Félicitations encore une fois, si vous l'avez fait ici,
vous avez vraiment mis en œuvre

332
00:16:57,410 --> 00:17:01,040
des concepts clés de la programmation
déjà, donc bravo.

333
00:17:01,040 --> 00:17:03,140
Dans les 2 vidéos suivantes,

334
00:17:03,140 --> 00:17:06,360
Je vais vous expliquer quelques
autres choses, on va nettoyer le code,

335
00:17:06,360 --> 00:17:10,420
un peu, faire les choses un peu plus agréable
et expliquer quelques aspects

336
00:17:10,420 --> 00:17:12,150
que nous ignorions jusqu'à présent.

337
00:17:12,150 --> 00:17:13,870
et je vais vous voir dans la vidéo suivante!

