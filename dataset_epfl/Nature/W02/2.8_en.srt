1
00:00:03,470 --> 00:00:06,940
Welcome back to Nature, in Code,
we're in chapter 2 lecture 8,

2
00:00:06,940 --> 00:00:11,990
In the last video, we just introduced
a really powerful concept namely functions

3
00:00:11,990 --> 00:00:15,950
and functions allows to encapsulate 
code and then later execute

4
00:00:16,100 --> 00:00:18,710
that code by simply calling the function.

5
00:00:18,710 --> 00:00:23,980
In this video we'll learn about another
really powerful concept called iteration.

6
00:00:23,980 --> 00:00:25,170
So let's get going.

7
00:00:25,170 --> 00:00:26,100
Alright,

8
00:00:26,100 --> 00:00:29,540
so this is the current state of our 
code, we cleaned this up quite a bit.

9
00:00:29,540 --> 00:00:33,460
By creating this function here, 
encapsulating this code here

10
00:00:33,460 --> 00:00:37,540
where we calculate [neutrino] type
frequencies based on allele frequencies

11
00:00:38,910 --> 00:00:41,310
but there still quite
a bit of redundancy here,

12
00:00:41,310 --> 00:00:42,460
I mean these lines here,

13
00:00:42,460 --> 00:00:46,020
these 2 lines here,
they've repeated 5 times,

14
00:00:46,020 --> 00:00:48,960
with the exception of the generation 
counter here

15
00:00:48,960 --> 00:00:52,610
but still a lot of redundancy
and this works fine here actually

16
00:00:52,610 --> 00:00:53,420
in this example,

17
00:00:53,420 --> 00:00:56,040
but what if we want execute these 2 lines.

18
00:00:56,040 --> 00:01:02,310
You know a million times instead of
just 5 times so in order to do this.

19
00:01:02,310 --> 00:01:06,430
We need this concept of an iteration 
and iteration is usually

20
00:01:06,500 --> 00:01:10,660
implemented with loop
and the most famous example

21
00:01:10,660 --> 00:01:13,070
of a loop is the "for" loop.

22
00:01:13,070 --> 00:01:15,940
So this is what I'm going 
to use here

23
00:01:15,940 --> 00:01:19,180
but before we're actually
going to implement this in code.

24
00:01:19,180 --> 00:01:22,120
Let me explain to you
how this works in principle.

25
00:01:22,320 --> 00:01:23,980
In Javascript.

26
00:01:23,980 --> 00:01:27,690
So here's how a "for" loop is structured 
in Javascript.

27
00:01:27,690 --> 00:01:32,100
So we're gonna write "for"
and then in parentheses.

28
00:01:32,100 --> 00:01:38,830
We're gonna have a list of 3 things,
namely, the first item here,

29
00:01:38,830 --> 00:01:41,320
the first element is that
of an initialisation.

30
00:01:43,970 --> 00:01:48,830
Okay, so initialisation--
I'll explain in a second

31
00:01:48,830 --> 00:01:50,080
what this is,

32
00:01:50,080 --> 00:01:52,670
so then we'll put a semicolon.

33
00:01:52,670 --> 00:01:59,280
Then we have to define the condition,
okay, condition semicolon.

34
00:01:59,280 --> 00:02:03,640
And the 3rd thing that
we have to define what I'm gonna call

35
00:02:03,640 --> 00:02:10,430
the final expression, final expression
then we close the parentheses

36
00:02:11,220 --> 00:02:15,820
and now in curly brackets,
very similar to the function,

37
00:02:15,820 --> 00:02:17,840
we now actually can write here.

38
00:02:19,440 --> 00:02:20,720
The code.

39
00:02:20,720 --> 00:02:21,430
Okay?

40
00:02:21,430 --> 00:02:26,440
The code to be iterated, 
to be iterated.

41
00:02:26,440 --> 00:02:27,300
Alright,

42
00:02:27,300 --> 00:02:28,960
so how's this work?

43
00:02:28,960 --> 00:02:31,600
So basically, in the beginning,

44
00:02:31,600 --> 00:02:35,970
the first time you hit this loop,
the initialisation will be executed

45
00:02:35,970 --> 00:02:38,290
and that's going to be an important thing.

46
00:02:38,290 --> 00:02:39,770
So the first,

47
00:02:39,770 --> 00:02:42,570
here you can do some set up,
okay, then..

48
00:02:45,060 --> 00:02:48,980
JavaScript will check the condition 
and if the condition is true,

49
00:02:48,980 --> 00:02:51,300
then the code in here,

50
00:02:51,300 --> 00:02:55,890
however complex will actually
be executed and then after

51
00:02:55,890 --> 00:02:57,440
that has happened.

52
00:02:57,440 --> 00:03:00,120
The final expression will be executed.

53
00:03:00,120 --> 00:03:02,390
So here you can do some cleanup.

54
00:03:02,390 --> 00:03:03,160
Okay.

55
00:03:03,160 --> 00:03:05,660
So the final expression will be executed.

56
00:03:05,660 --> 00:03:07,520
And then the same thing starts again.

57
00:03:07,520 --> 00:03:10,020
But we're not going to go back 
to the initialisation

58
00:03:10,020 --> 00:03:12,510
That really will only happen 
in the very beginning,

59
00:03:12,510 --> 00:03:15,550
but we're going back and checking 
the condition

60
00:03:15,550 --> 00:03:18,150
if that's still true.
If it's still true,

61
00:03:18,150 --> 00:03:22,580
then the code continues to be executed,
final expression will be executed.

62
00:03:22,650 --> 00:03:24,780
Go back again, check the 
condition and so on,

63
00:03:24,780 --> 00:03:26,870
so as long as this condition is true.

64
00:03:26,870 --> 00:03:29,430
The code will be iterated,

65
00:03:29,430 --> 00:03:33,410
so there has to be some way for us 
to ensure that this condition

66
00:03:33,930 --> 00:03:38,120
will eventually not be true anymore 
so that this iteration stops,

67
00:03:38,120 --> 00:03:41,290
otherwise you're in
a so called infinite loop.

68
00:03:41,290 --> 00:03:43,870
So let's implement this in Javascript.

69
00:03:44,050 --> 00:03:44,820
All right.

70
00:03:44,820 --> 00:03:48,150
So now that we know how "for" loop
is structured,

71
00:03:48,150 --> 00:03:51,810
why don't we go ahead and implement one,
now instead of doing this

72
00:03:51,840 --> 00:03:53,420
in code here right away,

73
00:03:53,420 --> 00:03:55,490
which we will eventually do.

74
00:03:55,490 --> 00:03:59,290
Let's actually go over to the browser,
into the console

75
00:03:59,290 --> 00:04:01,120
and let's do,

76
00:04:01,120 --> 00:04:01,840
let's,

77
00:04:01,840 --> 00:04:03,440
let's do a loop right here.

78
00:04:03,440 --> 00:04:05,600
Let's create one right here.

79
00:04:05,600 --> 00:04:06,950
So you can,

80
00:04:06,950 --> 00:04:08,250
as I said in the beginning.

81
00:04:08,250 --> 00:04:10,870
You can actually code right here 
into the console,

82
00:04:10,870 --> 00:04:18,720
so you have a blinking cursor here
and I can just say okay "for"

83
00:04:18,720 --> 00:04:20,050
and, you know,

84
00:04:20,050 --> 00:04:25,040
here's already an example of a--
of a loop that I created before,

85
00:04:25,040 --> 00:04:29,340
but let's just write it out
in in detail, okay?

86
00:04:29,340 --> 00:04:33,330
So "for" then opening the parentheses,
now the initialisation

87
00:04:33,330 --> 00:04:40,450
that I'm gonna do is actually 
the following var i equals to zero.

88
00:04:40,720 --> 00:04:41,700
Okay.

89
00:04:41,700 --> 00:04:43,260
Now this is the initialisation

90
00:04:43,260 --> 00:04:47,150
and here I'm essentially initialising 
a variable that I'm going to use

91
00:04:47,150 --> 00:04:51,300
as a counter interval in the loop 
and I'm gonna got call it,

92
00:04:51,300 --> 00:04:53,880
you can call it whatever you want to.

93
00:04:53,880 --> 00:04:58,640
I know I said in the beginning,
you know call your variables,

94
00:04:58,640 --> 00:04:59,580
you know,

95
00:04:59,580 --> 00:05:01,750
depending on-- on
what they're actually doing

96
00:05:01,750 --> 00:05:04,840
or what they're storing,
what they stand for.

97
00:05:04,840 --> 00:05:08,920
Now I'm kind of violating this rule 
here a little bit

98
00:05:08,920 --> 00:05:14,390
but I as a counter in a iteration 
is an extremely common thing

99
00:05:14,390 --> 00:05:17,920
to do and so I'm gonna stick 
with this convention,

100
00:05:17,920 --> 00:05:19,930
you know I'm just gonna 'i' here

101
00:05:19,930 --> 00:05:23,540
As a variable that I'm going to use
in the loop.

102
00:05:23,540 --> 00:05:24,310
Okay,

103
00:05:24,310 --> 00:05:29,960
so the condition is gonna be that 
'i' is going to be smaller than 10

104
00:05:29,960 --> 00:05:30,740
Okay,

105
00:05:30,740 --> 00:05:34,440
so that's my condition so as long as 'i'

106
00:05:34,440 --> 00:05:37,120
is smaller than 10,
which it is at the beginning,

107
00:05:37,120 --> 00:05:38,200
because we're starting

108
00:05:38,200 --> 00:05:40,880
with 'i' equal zero the loop
will be executed.

109
00:05:40,880 --> 00:05:41,630
Okay,

110
00:05:41,630 --> 00:05:42,680
Will be iterated.

111
00:05:43,610 --> 00:05:45,080
And then the final expression,

112
00:05:46,250 --> 00:05:50,740
here I'm going to say,
'i' equals i + 1, okay.

113
00:05:50,740 --> 00:05:52,760
And then I'm going to close
the parentheses

114
00:05:52,760 --> 00:05:58,790
and what this does is it essentially
adds one to whatever currently stored in i

115
00:05:58,790 --> 00:06:01,350
so it's increasing this value by one

116
00:06:01,350 --> 00:06:03,400
and then it's storing that into i.

117
00:06:03,400 --> 00:06:08,630
So effectively what this does here 
is, it increases the value of i

118
00:06:08,710 --> 00:06:10,890
by one, alright.

119
00:06:10,890 --> 00:06:12,830
Now, I'm going to implement

120
00:06:12,910 --> 00:06:17,110
The code to be iterated, so I'm going to
write here in these curly braces

121
00:06:17,110 --> 00:06:22,250
and now I am going hit
shift-enter okay?

122
00:06:22,250 --> 00:06:25,420
because if you hit enter in the console
and the code gets executed

123
00:06:25,420 --> 00:06:26,430
and we don't want that.

124
00:06:26,430 --> 00:06:31,490
We're still just creating the loop, 
I'm gonna hit shift and enter

125
00:06:31,490 --> 00:06:32,870
once again.

126
00:06:32,870 --> 00:06:33,710
Okay.

127
00:06:33,710 --> 00:06:37,440
And now we're gonna implement 
the body here of this loop.

128
00:06:37,440 --> 00:06:38,210
So here,

129
00:06:38,210 --> 00:06:40,190
in this case I would simply like to say,

130
00:06:40,190 --> 00:06:40,900
you know,

131
00:06:40,900 --> 00:06:47,100
console, log i, so basically 
just print out i

132
00:06:47,340 --> 00:06:49,790
into this-- into the console.

133
00:06:49,790 --> 00:06:50,520
Okay.

134
00:06:50,520 --> 00:06:51,750
Some now gonna hit enter,

135
00:06:51,750 --> 00:06:54,600
not shift-enter but simply enter
to run this code

136
00:06:54,600 --> 00:06:56,060
and here's what's happening,

137
00:06:56,060 --> 00:06:58,850
so you can ignore this on undefined here

138
00:07:00,610 --> 00:07:03,090
0, 1, 2 and so on.

139
00:07:03,470 --> 00:07:05,730
Will be printed into to console up to 9.

140
00:07:05,730 --> 00:07:06,920
So what's happening here.

141
00:07:06,920 --> 00:07:07,660
Well,

142
00:07:07,660 --> 00:07:09,080
it's pretty straightforward.

143
00:07:09,080 --> 00:07:12,220
Now do you understand what these 
3 things do

144
00:07:12,360 --> 00:07:17,200
So first we initialised this--
this variable i at 0 then the condition

145
00:07:17,200 --> 00:07:19,870
is checked and yes it's true
zero is smaller than 10

146
00:07:19,870 --> 00:07:22,900
so this code will be executed
and we're out putting i,

147
00:07:22,900 --> 00:07:26,020
which at this point is zero, Okay.

148
00:07:26,020 --> 00:07:30,660
So now we're gonna execute
the file expression increasing i by one.

149
00:07:30,660 --> 00:07:31,420
Okay,

150
00:07:31,420 --> 00:07:33,120
we're going back to the condition.

151
00:07:33,120 --> 00:07:37,400
Remember we're never going back 
to this initialisation only

152
00:07:37,400 --> 00:07:38,950
once in the very beginning.

153
00:07:38,950 --> 00:07:42,560
So we're going back to the condition 
is i still smaller than 10?

154
00:07:42,560 --> 00:07:43,360
well yes,

155
00:07:43,360 --> 00:07:45,350
one is still smaller than 10.

156
00:07:45,350 --> 00:07:46,740
So this is still true.

157
00:07:46,740 --> 00:07:50,450
So this will now be executed,
console log and of course we're out

158
00:07:50,490 --> 00:07:52,760
putting one here cause i is one

159
00:07:52,760 --> 00:07:54,590
again, the final expression.

160
00:07:54,590 --> 00:07:57,380
i will be increased by one
so now lies two

161
00:07:57,380 --> 00:08:00,960
we're going back to this condition,
two smaller than 10, still true,

162
00:08:00,960 --> 00:08:02,360
and so on, right.

163
00:08:02,360 --> 00:08:05,010
So this will be true all the way.

164
00:08:05,010 --> 00:08:09,290
Now down here, assume that
we're at i equals 9,

165
00:08:09,290 --> 00:08:12,010
so 9 is still smaller than 10, Okay.

166
00:08:12,010 --> 00:08:13,540
so this line will be executed.

167
00:08:13,540 --> 00:08:17,090
9 will be printed into the console,
now a final expression.

168
00:08:17,090 --> 00:08:22,880
9 will be increased by 1
and so i is now 10.

169
00:08:22,880 --> 00:08:26,480
Now we're going back to the condition,
it's 10 smaller than 10?

170
00:08:26,480 --> 00:08:28,220
No, it's definitely not.

171
00:08:28,220 --> 00:08:30,010
So this is not true anymore.

172
00:08:30,010 --> 00:08:35,620
And so now the iteration will stop
and that's why it stops at 9 here

173
00:08:35,790 --> 00:08:38,550
It goes from 0 to 9.

174
00:08:38,550 --> 00:08:41,840
Now you could do you could start 
here from one

175
00:08:41,840 --> 00:08:44,660
and go to any other value.

176
00:08:44,660 --> 00:08:46,900
In fact,
you can do whatever you want to right?

177
00:08:46,900 --> 00:08:49,310
you can initialise this value here

178
00:08:49,310 --> 00:08:52,200
at whatever value 
you'd like to do that.

179
00:08:52,200 --> 00:08:55,950
You can have any type of condition 
you'd like to have

180
00:08:55,950 --> 00:08:59,570
and you can have any type
of file expression

181
00:08:59,570 --> 00:09:03,680
that you'd like to have here,
this is just the most common way

182
00:09:03,680 --> 00:09:07,200
that we start at zero,
we have the smaller than condition.

183
00:09:07,200 --> 00:09:08,520
So this tells us, Okay--

184
00:09:08,520 --> 00:09:12,330
This is gonna do it 10 times
and then a simple increment by one

185
00:09:12,890 --> 00:09:14,250
but notice of course here,

186
00:09:14,250 --> 00:09:15,990
we're not going from one to 10,

187
00:09:15,990 --> 00:09:20,320
we're going from zero to 9
and this is a very common way

188
00:09:20,320 --> 00:09:25,750
to do things because much, you know,
many aspects in programming

189
00:09:25,750 --> 00:09:32,000
are-- sort of zero based
so counting starts typically at zero.

190
00:09:32,000 --> 00:09:37,300
This is a concept we'll come across many,
many times in this course

191
00:09:37,300 --> 00:09:40,730
as we start, you know, dealing
with data structures

192
00:09:42,370 --> 00:09:46,000
that's a typical mistake
that programming beginner's make

193
00:09:46,000 --> 00:09:48,610
that they think counting
should start at one,

194
00:09:48,610 --> 00:09:52,790
which, of course, is what we do
in normal everyday usage

195
00:09:52,790 --> 00:09:57,150
in natural language but in programming
typically counting starts at zero,

196
00:09:57,150 --> 00:10:00,020
the first element has index 0 and so on.

197
00:10:00,020 --> 00:10:04,780
And this is why I've used
this example here by initialing

198
00:10:04,820 --> 00:10:06,880
this variable at zero and not at one.

199
00:10:07,300 --> 00:10:08,040
Alright.

200
00:10:08,040 --> 00:10:13,270
So now let's go back to the code
and implement this concretely

201
00:10:13,270 --> 00:10:16,120
for our Hardy Weinberg example here.

202
00:10:16,120 --> 00:10:18,640
So what we have here is
we have these 2 lines

203
00:10:18,640 --> 00:10:22,060
and we'd like to have those
iterated 5 times.

204
00:10:22,060 --> 00:10:24,690
So what we can do now
with this knowledge in hand,

205
00:10:24,690 --> 00:10:28,830
we can create this 'for' loop 
by simply writing 'for'.

206
00:10:30,270 --> 00:10:33,160
var I equal zero.

207
00:10:33,160 --> 00:10:35,870
So here's my initialisation

208
00:10:35,870 --> 00:10:40,880
And so the condition here
would be i less than 5

209
00:10:40,880 --> 00:10:44,500
because I want to run this loop
5 times

210
00:10:44,500 --> 00:10:49,410
and then I'm simply
going to increase i by one.

211
00:10:49,410 --> 00:10:53,470
As I have just done
in the example in the console.

212
00:10:53,470 --> 00:10:58,730
And then the code to be iterated here
is essentially this code here,

213
00:10:58,730 --> 00:11:02,690
so I'm going to copy and in fact,
I'm going to just cut it

214
00:11:02,690 --> 00:11:04,660
and pasted here.

215
00:11:04,660 --> 00:11:05,480
Okay.

216
00:11:05,480 --> 00:11:07,690
I'm gonna do a nice indentation,

217
00:11:07,690 --> 00:11:11,310
not because it's absolutely necessary 
because it's better

218
00:11:11,310 --> 00:11:13,760
for aesthetic and cleaner code, okay.

219
00:11:13,760 --> 00:11:17,300
So now we can get rid
of these lines down here.

220
00:11:17,300 --> 00:11:18,060
So,

221
00:11:18,060 --> 00:11:21,680
let's go ahead and try to out,
let's save that

222
00:11:21,680 --> 00:11:23,570
and let's go over to our console.

223
00:11:24,460 --> 00:11:28,180
And reload the document
and let's see what happens here

224
00:11:28,180 --> 00:11:33,420
so it works in principle,
now we're outputting

225
00:11:33,420 --> 00:11:38,510
the exact same line 5 times 
and chrome here is nice,

226
00:11:38,510 --> 00:11:41,910
not a wasting any space
and basically telling us look I'm doing

227
00:11:41,970 --> 00:11:46,250
this 5 times the exact same thing
so rather than outputting,

228
00:11:46,250 --> 00:11:48,100
the exact same thing times.

229
00:11:48,100 --> 00:11:53,060
I'm just an output in, once,
then I'm gonna tell you how many times.

230
00:11:53,060 --> 00:11:54,700
I'm actually supposed to output that.

231
00:11:55,450 --> 00:11:56,900
So this works in principle.

232
00:11:56,900 --> 00:11:58,750
Let's go back to our code.

233
00:11:58,750 --> 00:11:59,560
The reason why,

234
00:11:59,560 --> 00:12:02,050
see principle is because 
we're not out putting,

235
00:12:02,050 --> 00:12:04,720
we don't want output the generation 
one all the time,

236
00:12:04,720 --> 00:12:08,300
they actually want to output generation
one and in 2,

237
00:12:08,300 --> 00:12:08,820
3,

238
00:12:08,820 --> 00:12:09,540
4,

239
00:12:09,540 --> 00:12:10,310
and so on,

240
00:12:10,310 --> 00:12:12,410
so how is this gonna work?

241
00:12:12,410 --> 00:12:18,270
Well, I need a way to replace
this one here from a literal string

242
00:12:18,270 --> 00:12:22,300
or character to actually something that's 
calculated

243
00:12:22,300 --> 00:12:25,340
and we do have a counter in this loop,

244
00:12:25,340 --> 00:12:29,600
which is quite handy which we use 
to-- to make sure that the loop

245
00:12:29,640 --> 00:12:34,610
doesn't run forever but we can now
use for a second issue,

246
00:12:34,610 --> 00:12:38,450
namely to--to output,
to correct a number here.

247
00:12:38,450 --> 00:12:43,900
So remember the first time this loop
is iterated, i is zero.

248
00:12:43,900 --> 00:12:45,900
the second time i is one,

249
00:12:45,900 --> 00:12:46,630
the 3rd time.

250
00:12:46,630 --> 00:12:47,970
I used two and so on.

251
00:12:47,970 --> 00:12:50,130
So really what we'd like to do here is,

252
00:12:50,130 --> 00:12:53,150
would like to output the number 
that is larger,

253
00:12:53,150 --> 00:12:55,670
that is one larger than i.

254
00:12:55,670 --> 00:12:58,460
So we can do this with strength 
and annotation

255
00:12:58,460 --> 00:13:05,820
So I'm simply going to do,
the following concatenate the string here.

256
00:13:05,960 --> 00:13:13,810
By saying, okay, simply output here
the value, i plus one.

257
00:13:13,840 --> 00:13:14,570
Okay.

258
00:13:14,570 --> 00:13:18,040
Going to make this nice
in terms of spacing here.

259
00:13:19,190 --> 00:13:21,150
So what's gonna happen here is that,

260
00:13:21,150 --> 00:13:25,030
generation will be outputted,
then the value that is in i plus one.

261
00:13:25,110 --> 00:13:29,210
and then the colon
and then the other values.

262
00:13:29,210 --> 00:13:32,720
So it's important for you to realize 
that we're simply outputting

263
00:13:32,800 --> 00:13:34,700
this value, okay, we're simply reading.

264
00:13:34,700 --> 00:13:37,940
We're not storing this anywhere.

265
00:13:37,940 --> 00:13:38,660
Okay,

266
00:13:38,660 --> 00:13:43,780
we're simply using this i as a means 
to output the correct generation.

267
00:13:43,910 --> 00:13:47,680
We're not storing it anywhere,
we're simply using it to write

268
00:13:47,680 --> 00:13:48,890
into the console.

269
00:13:48,890 --> 00:13:49,610
Okay,

270
00:13:49,610 --> 00:13:52,570
So let's save that, let's go back 
to the console

271
00:13:52,570 --> 00:13:55,740
and reload the document
and boom,

272
00:13:55,740 --> 00:13:59,240
Here we see, correct generation
1,2,3,4,5.

273
00:14:00,990 --> 00:14:03,250
and here we have, before,

274
00:14:03,250 --> 00:14:04,790
The 3 values.

275
00:14:04,790 --> 00:14:06,440
So let's go back to the code.

276
00:14:06,440 --> 00:14:07,160
Just briefly,

277
00:14:07,160 --> 00:14:09,280
just to make this clear:

278
00:14:09,280 --> 00:14:11,740
I could have simply said, you know,
output i,

279
00:14:11,740 --> 00:14:13,540
so what would have happened here?

280
00:14:13,540 --> 00:14:16,171
I mean this is a little cleaner 
but it's wrong

281
00:14:16,171 --> 00:14:20,510
because what happens here,
if we save this and go back and reload,

282
00:14:20,510 --> 00:14:24,450
is that we would start here 
at Generation Zero,

283
00:14:24,450 --> 00:14:25,440
which is not true.

284
00:14:25,440 --> 00:14:30,060
So this is the part of these lines here
are-- are the lines outputted

285
00:14:30,060 --> 00:14:31,420
by a loop.

286
00:14:31,420 --> 00:14:34,710
So we would start here a generation zero,
which is of course not true,

287
00:14:34,710 --> 00:14:38,310
we already had generation zero
and then we would stop at 4.

288
00:14:38,350 --> 00:14:40,710
This is why, going back to the code.

289
00:14:40,710 --> 00:14:44,970
We have to add here, plus one, okay.

290
00:14:47,710 --> 00:14:48,500
So,

291
00:14:48,500 --> 00:14:49,470
but this is a loop.

292
00:14:49,470 --> 00:14:52,290
So this explains actually 
a number of things.

293
00:14:52,290 --> 00:14:57,020
So the first thing that we now 
understand here is that

294
00:14:57,020 --> 00:15:03,540
we can create these loops by iterating
many, many times and-- you know,

295
00:15:03,540 --> 00:15:06,080
repeating the same code 
over and over again,

296
00:15:06,080 --> 00:15:09,280
and this is of course sometimes,
it's fundamental importance

297
00:15:09,280 --> 00:15:10,660
in computing.

298
00:15:10,660 --> 00:15:14,150
We can also use actually,
at each iteration.

299
00:15:14,150 --> 00:15:15,800
We have a clue.

300
00:15:15,800 --> 00:15:20,810
Thanks to this i variable here, 
where in the iteration we are.

301
00:15:20,810 --> 00:15:23,430
How many times we've already 
iterated and that's--

302
00:15:23,430 --> 00:15:28,290
that's a really powerful piece of 
information that we can use

303
00:15:28,290 --> 00:15:31,850
quite extensively and we'll see many 
many examples in the future.

304
00:15:32,080 --> 00:15:37,390
Here we're simply using it to output 
the correct generation number.

305
00:15:37,390 --> 00:15:38,080
Alright,

306
00:15:38,080 --> 00:15:40,850
so this is what I want to say 
about loops and then,

307
00:15:40,850 --> 00:15:44,430
in particular about 'for' loops,
at the moment we'll encounter

308
00:15:44,430 --> 00:15:48,600
other types of loops throughout
the course for the time being

309
00:15:48,600 --> 00:15:52,720
this is the main loop that
we will be using this 'for' loop.

310
00:15:52,720 --> 00:15:54,890
It's a very powerful concept.

311
00:15:54,890 --> 00:16:00,820
So this kind of concludes now,
our Hardy Weinberg example

312
00:16:00,820 --> 00:16:04,780
and I just want you to look
at this code and you know,

313
00:16:04,780 --> 00:16:06,450
reflect on what we've just done.

314
00:16:06,450 --> 00:16:10,620
So first of all, if you managed to follow
everything up to here

315
00:16:10,620 --> 00:16:16,290
and your code is executing,
congratulations you're already using 90%

316
00:16:16,290 --> 00:16:19,250
of the key elements of programing.

317
00:16:19,250 --> 00:16:21,190
I mean I'm exaggerating a little bit

318
00:16:21,190 --> 00:16:22,720
but-- but not too much actually,

319
00:16:22,720 --> 00:16:26,440
I mean you're using variables
you're-- you're calculating things.

320
00:16:26,870 --> 00:16:30,500
You're outputting things,
you're using functions.

321
00:16:30,500 --> 00:16:32,590
You're using iteration.

322
00:16:32,590 --> 00:16:33,570
These are--

323
00:16:33,570 --> 00:16:35,820
these are key elements in programing.

324
00:16:35,820 --> 00:16:37,910
And as you'll see down the line,

325
00:16:37,910 --> 00:16:41,100
as we'll generate more complicated code.

326
00:16:41,100 --> 00:16:41,870
It's--

327
00:16:41,870 --> 00:16:44,940
it's pretty much always
these elements, we'll use functions

328
00:16:44,940 --> 00:16:49,470
extensively and will use iteration 
extensively and of course

329
00:16:49,610 --> 00:16:52,640
variables are-- are a key aspect as well.

330
00:16:52,780 --> 00:16:53,480
Alright.

331
00:16:53,480 --> 00:16:57,410
Congrats again if you made it to here,
you really implemented

332
00:16:57,410 --> 00:17:01,040
key concepts of programming already,
so thumbs-up.

333
00:17:01,040 --> 00:17:03,140
In the next 2 videos,

334
00:17:03,140 --> 00:17:06,360
I'm going to explain a few other things,
going to clean up the code,

335
00:17:06,360 --> 00:17:10,420
a little bit, make things look
a little nicer and explain a few aspects

336
00:17:10,420 --> 00:17:12,150
that we ignored so far.

337
00:17:12,150 --> 00:17:13,870
So, I'll see you in the next video.
