Welcome back to Nature, in Code, we're in chapter 2 lecture 8,
In the last video, we just introduced a really powerful concept namely functions and functions allows to encapsulate code and then later execute that code by simply calling the function.
In this video we'll learn about another really powerful concept called iteration.
So let's get going.
Alright, so this is the current state of our code, we cleaned this up quite a bit.
By creating this function here, encapsulating this code here where we calculate [neutrino] type frequencies based on allele frequencies but there still quite a bit of redundancy here,
I mean these lines here, these 2 lines here, they've repeated 5 times, with the exception of the generation counter here but still a lot of redundancy and this works fine here actually in this example, but what if we want execute these 2 lines.
You know a million times instead of just 5 times so in order to do this.
We need this concept of an iteration and iteration is usually implemented with loop and the most famous example of a loop is the "for" loop.
So this is what I'm going to use here but before we're actually going to implement this in code.
Let me explain to you how this works in principle.
In Javascript.
So here's how a "for" loop is structured in Javascript.
So we're gonna write "for" and then in parentheses.
We're gonna have a list of 3 things, namely, the first item here, the first element is that of an initialisation.
Okay, so initialisation--
I'll explain in a second what this is, so then we'll put a semicolon.
Then we have to define the condition, okay, condition semicolon.
And the 3rd thing that we have to define what I'm gonna call the final expression, final expression then we close the parentheses and now in curly brackets, very similar to the function, we now actually can write here.
The code.
Okay?
The code to be iterated, to be iterated.
Alright, so how's this work?
So basically, in the beginning, the first time you hit this loop, the initialisation will be executed and that's going to be an important thing.
So the first, here you can do some set up, okay, then..
JavaScript will check the condition and if the condition is true, then the code in here, however complex will actually be executed and then after that has happened.
The final expression will be executed.
So here you can do some cleanup.
Okay.
So the final expression will be executed.
And then the same thing starts again.
But we're not going to go back to the initialisation
That really will only happen in the very beginning, but we're going back and checking the condition if that's still true.
If it's still true, then the code continues to be executed, final expression will be executed.
Go back again, check the condition and so on, so as long as this condition is true.
The code will be iterated, so there has to be some way for us to ensure that this condition will eventually not be true anymore so that this iteration stops, otherwise you're in a so called infinite loop.
So let's implement this in Javascript.
All right.
So now that we know how "for" loop is structured, why don't we go ahead and implement one, now instead of doing this in code here right away, which we will eventually do.
Let's actually go over to the browser, into the console and let's do, let's, let's do a loop right here.
Let's create one right here.
So you can, as I said in the beginning.
You can actually code right here into the console, so you have a blinking cursor here and I can just say okay "for" and, you know, here's already an example of a-- of a loop that I created before, but let's just write it out in in detail, okay?
So "for" then opening the parentheses, now the initialisation that I'm gonna do is actually the following var i equals to zero.
Okay.
Now this is the initialisation and here I'm essentially initialising a variable that I'm going to use as a counter interval in the loop and I'm gonna got call it, you can call it whatever you want to.
I know I said in the beginning, you know call your variables, you know, depending on-- on what they're actually doing or what they're storing, what they stand for.
Now I'm kind of violating this rule here a little bit but I as a counter in a iteration is an extremely common thing to do and so I'm gonna stick with this convention, you know I'm just gonna 'i' here
As a variable that I'm going to use in the loop.
Okay, so the condition is gonna be that 
'i' is going to be smaller than 10
Okay, so that's my condition so as long as 'i' is smaller than 10, which it is at the beginning, because we're starting with 'i' equal zero the loop will be executed.
Okay,
Will be iterated.
And then the final expression, here I'm going to say,
'i' equals i + 1, okay.
And then I'm going to close the parentheses and what this does is it essentially adds one to whatever currently stored in i so it's increasing this value by one and then it's storing that into i.
So effectively what this does here is, it increases the value of i by one, alright.
Now, I'm going to implement
The code to be iterated, so I'm going to write here in these curly braces and now I am going hit shift-enter okay? because if you hit enter in the console and the code gets executed and we don't want that.
We're still just creating the loop, 
I'm gonna hit shift and enter once again.
Okay.
And now we're gonna implement the body here of this loop.
So here, in this case I would simply like to say, you know, console, log i, so basically just print out i into this-- into the console.
Okay.
Some now gonna hit enter, not shift-enter but simply enter to run this code and here's what's happening, so you can ignore this on undefined here
0, 1, 2 and so on.
Will be printed into to console up to 9.
So what's happening here.
Well, it's pretty straightforward.
Now do you understand what these 
3 things do
So first we initialised this-- this variable i at 0 then the condition is checked and yes it's true zero is smaller than 10 so this code will be executed and we're out putting i, which at this point is zero, Okay.
So now we're gonna execute the file expression increasing i by one.
Okay, we're going back to the condition.
Remember we're never going back to this initialisation only once in the very beginning.
So we're going back to the condition is i still smaller than 10? well yes, one is still smaller than 10.
So this is still true.
So this will now be executed, console log and of course we're out putting one here cause i is one again, the final expression. i will be increased by one so now lies two we're going back to this condition, two smaller than 10, still true, and so on, right.
So this will be true all the way.
Now down here, assume that we're at i equals 9, so 9 is still smaller than 10, Okay. so this line will be executed.
9 will be printed into the console, now a final expression.
9 will be increased by 1 and so i is now 10.
Now we're going back to the condition, it's 10 smaller than 10?
No, it's definitely not.
So this is not true anymore.
And so now the iteration will stop and that's why it stops at 9 here
It goes from 0 to 9.
Now you could do you could start here from one and go to any other value.
In fact, you can do whatever you want to right? you can initialise this value here at whatever value you'd like to do that.
You can have any type of condition you'd like to have and you can have any type of file expression that you'd like to have here, this is just the most common way that we start at zero, we have the smaller than condition.
So this tells us, Okay--
This is gonna do it 10 times and then a simple increment by one but notice of course here, we're not going from one to 10, we're going from zero to 9 and this is a very common way to do things because much, you know, many aspects in programming are-- sort of zero based so counting starts typically at zero.
This is a concept we'll come across many, many times in this course as we start, you know, dealing with data structures that's a typical mistake that programming beginner's make that they think counting should start at one, which, of course, is what we do in normal everyday usage in natural language but in programming typically counting starts at zero, the first element has index 0 and so on.
And this is why I've used this example here by initialing this variable at zero and not at one.
Alright.
So now let's go back to the code and implement this concretely for our Hardy Weinberg example here.
So what we have here is we have these 2 lines and we'd like to have those iterated 5 times.
So what we can do now with this knowledge in hand, we can create this 'for' loop by simply writing 'for'. var I equal zero.
So here's my initialisation
And so the condition here would be i less than 5 because I want to run this loop
5 times and then I'm simply going to increase i by one.
As I have just done in the example in the console.
And then the code to be iterated here is essentially this code here, so I'm going to copy and in fact,
I'm going to just cut it and pasted here.
Okay.
I'm gonna do a nice indentation, not because it's absolutely necessary because it's better for aesthetic and cleaner code, okay.
So now we can get rid of these lines down here.
So, let's go ahead and try to out, let's save that and let's go over to our console.
And reload the document and let's see what happens here so it works in principle, now we're outputting the exact same line 5 times and chrome here is nice, not a wasting any space and basically telling us look I'm doing this 5 times the exact same thing so rather than outputting, the exact same thing times.
I'm just an output in, once, then I'm gonna tell you how many times.
I'm actually supposed to output that.
So this works in principle.
Let's go back to our code.
The reason why, see principle is because we're not out putting, we don't want output the generation one all the time, they actually want to output generation one and in 2, and so on, so how is this gonna work?
Well, I need a way to replace this one here from a literal string or character to actually something that's calculated and we do have a counter in this loop, which is quite handy which we use to-- to make sure that the loop doesn't run forever but we can now use for a second issue, namely to--to output, to correct a number here.
So remember the first time this loop is iterated, i is zero. the second time i is one, the 3rd time.
I used two and so on.
So really what we'd like to do here is, would like to output the number that is larger, that is one larger than i.
So we can do this with strength and annotation
So I'm simply going to do, the following concatenate the string here.
By saying, okay, simply output here the value, i plus one.
Okay.
Going to make this nice in terms of spacing here.
So what's gonna happen here is that, generation will be outputted, then the value that is in i plus one. and then the colon and then the other values.
So it's important for you to realize that we're simply outputting this value, okay, we're simply reading.
We're not storing this anywhere.
Okay, we're simply using this i as a means to output the correct generation.
We're not storing it anywhere, we're simply using it to write into the console.
Okay,
So let's save that, let's go back to the console and reload the document and boom,
Here we see, correct generation and here we have, before,
The 3 values.
So let's go back to the code.
Just briefly, just to make this clear:
I could have simply said, you know, output i, so what would have happened here?
I mean this is a little cleaner but it's wrong because what happens here, if we save this and go back and reload, is that we would start here at Generation Zero, which is not true.
So this is the part of these lines here are-- are the lines outputted by a loop.
So we would start here a generation zero, which is of course not true, we already had generation zero and then we would stop at 4.
This is why, going back to the code.
We have to add here, plus one, okay.
So, but this is a loop.
So this explains actually a number of things.
So the first thing that we now understand here is that we can create these loops by iterating many, many times and-- you know, repeating the same code over and over again, and this is of course sometimes, it's fundamental importance in computing.
We can also use actually, at each iteration.
We have a clue.
Thanks to this i variable here, where in the iteration we are.
How many times we've already iterated and that's-- that's a really powerful piece of information that we can use quite extensively and we'll see many many examples in the future.
Here we're simply using it to output the correct generation number.
Alright, so this is what I want to say about loops and then, in particular about 'for' loops, at the moment we'll encounter other types of loops throughout the course for the time being this is the main loop that we will be using this 'for' loop.
It's a very powerful concept.
So this kind of concludes now, our Hardy Weinberg example and I just want you to look at this code and you know, reflect on what we've just done.
So first of all, if you managed to follow everything up to here and your code is executing, congratulations you're already using 90% of the key elements of programing.
I mean I'm exaggerating a little bit but-- but not too much actually,
I mean you're using variables you're-- you're calculating things.
You're outputting things, you're using functions.
You're using iteration.
These are-- these are key elements in programing.
And as you'll see down the line, as we'll generate more complicated code.
It's-- it's pretty much always these elements, we'll use functions extensively and will use iteration extensively and of course variables are-- are a key aspect as well.
Alright.
Congrats again if you made it to here, you really implemented key concepts of programming already, so thumbs-up.
In the next 2 videos,
I'm going to explain a few other things, going to clean up the code, a little bit, make things look a little nicer and explain a few aspects that we ignored so far.
So, I'll see you in the next video.
