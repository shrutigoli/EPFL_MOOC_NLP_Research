1
00:00:03,710 --> 00:00:05,170
Bienvenue, la Nature dans le Code.

2
00:00:05,170 --> 00:00:07,790
Nous sommes dans le chapitre 2,  Leçon 9.

3
00:00:07,790 --> 00:00:11,680
Dans cette vidéo, je veux nettoyer
quelques choses avec l'erreur d'arrondi

4
00:00:11,680 --> 00:00:14,530
et d'introduire un concept important,

5
00:00:14,530 --> 00:00:18,210
à savoir que de retourner
les valeurs des fonctions.

6
00:00:18,210 --> 00:00:21,560
Donc, si vous jetez un oeil ici sur notre console,
nous avons cette erreur d'arrondi.

7
00:00:21,560 --> 00:00:24,960
Il est assez laid et il n'est pas
important pour notre but ici.

8
00:00:24,960 --> 00:00:27,600
Alors, pourquoi ne pas simplement
émettre un nombre arrondi?

9
00:00:27,600 --> 00:00:32,240
Quelque chose qui est arrondi à peut-être
2 chiffres après la virgule.

10
00:00:32,340 --> 00:00:33,820
Un truc de ce genre.

11
00:00:33,820 --> 00:00:35,590
Alors, comment ferions-nous cela?

12
00:00:35,590 --> 00:00:38,810
Eh bien, il se trouve que JavaScript
dans le navigateur,

13
00:00:38,810 --> 00:00:45,090
est livré avec une fonction très
pratique appelée <i> Math.round </ i>.

14
00:00:45,090 --> 00:00:48,880
Donc, encore une fois
ce "M", majuscule  <i> Math.round </ i>.

15
00:00:49,220 --> 00:00:52,480
Cette méthode prend en fait un argument,

16
00:00:52,480 --> 00:00:53,630
à savoir un certain nombre.

17
00:00:53,630 --> 00:00:57,570
Disons par exemple mis 1,23456.

18
00:00:57,570 --> 00:01:02,070
Si nous appuyons sur Entrée,
ce que nous voyons ici est la valeur 1.

19
00:01:02,160 --> 00:01:06,220
donc cela a été arrondi vers le bas
et c'est ce que <i> Math.round </ i> fait.

20
00:01:06,470 --> 00:01:11,410
Il prend un nombre et l'arrondit vers
le bas ou haut au nombre entier suivant,

21
00:01:11,410 --> 00:01:12,830
le prochain nombre entier.

22
00:01:12,830 --> 00:01:19,830
Donc, si nous voulons plutôt dire
"<i> Math.round </ i> 1.6", par exemple,

23
00:01:20,280 --> 00:01:25,890
ce serait arrondi parce que 1.6 est
plus proche de 2 qu'il est à 1.

24
00:01:26,190 --> 00:01:29,480
Maintenant, malheureusement,
<i> Math.round </ i> ne fait que cela.

25
00:01:29,480 --> 00:01:37,020
Il ne vient pas avec la capacité à arrondir
deux nombres spécifiques désiré,

26
00:01:37,020 --> 00:01:38,260
après la virgule.

27
00:01:38,260 --> 00:01:40,620
Nous avons donc en quelque
sorte à le faire nous-mêmes.

28
00:01:40,620 --> 00:01:44,430
mais nous pouvons utiliser la fonctionnalité
de <i> Math.round </ i>.

29
00:01:44,430 --> 00:01:46,270
alors comment pourrions-nous faire cela?

30
00:01:46,270 --> 00:01:47,880
Comment pourrions-nous dire, vous le savez,

31
00:01:47,880 --> 00:01:52,400
arrondi à deux points après la virgule ici.

32
00:01:52,400 --> 00:01:54,250
Deux chiffres après la virgule.

33
00:01:54,250 --> 00:01:56,200
Il y a en fait une petite astuce.

34
00:01:56,580 --> 00:02:02,300
Ce que nous devons faire est, nous avons
simplement besoin d'abord de déplacer la virgule ici

35
00:02:02,300 --> 00:02:04,370
par de 2,

36
00:02:04,370 --> 00:02:07,740
alors nous avons besoin d'utiliser
la fonctionnalité<i> Math.round </ i>

37
00:02:07,740 --> 00:02:11,770
pour se débarrasser de tout
ce qui suit ces deux chiffres

38
00:02:11,770 --> 00:02:15,400
et nous devons changer
le décimal arrière.

39
00:02:15,610 --> 00:02:18,940
donc concrètement ce que
cela ressemblerait c'est,

40
00:02:19,270 --> 00:02:24,640
si vous prenez par exemple 1,23456,
nous multiplions cela par des centaines,

41
00:02:24,640 --> 00:02:25,640
On obtient quoi?

42
00:02:25,640 --> 00:02:27,480
Eh bien, nous obtenons le tout déplacé,

43
00:02:27,480 --> 00:02:31,220
le décimal a été décalé de deux points ici

44
00:02:31,220 --> 00:02:35,650
et voici notre nouveau ami ou ancien,
l'erreur d'arrondi à nouveau.

45
00:02:35,650 --> 00:02:38,790
Mais on ne vas s'inquieter de cela,
parce que ce qu'on va faire maintenant

46
00:02:38,830 --> 00:02:42,630
c'est que nous allons essentiellement prendre
ce nombre et nous le passons à <i> Math.round </ i>.

47
00:02:42,630 --> 00:02:46,010
Donc, ce que nous allons faire c'est,
nous prendrions <i> Math.round </ i>

48
00:02:46,010 --> 00:02:51,440
et maintenant passer (1.23456 fois 100).

49
00:02:53,670 --> 00:02:57,130
Je manquai la parenthèse fermante.

50
00:02:57,130 --> 00:02:57,870
Très bien.

51
00:02:57,870 --> 00:03:02,490
Alors maintenant, nous avons réussi
à se débarrasser de tout ce qui suit le 3,

52
00:03:02,490 --> 00:03:06,240
ce qui est exactement ce que nous voulions
parce que nous avons multiplié par 100

53
00:03:06,240 --> 00:03:10,440
décalant ainsi le point décimal
deux places vers la droite

54
00:03:10,440 --> 00:03:12,100
puis l'arrondissant.

55
00:03:12,100 --> 00:03:16,980
Et maintenant, nous avons simplement besoin
de revenir à l'ordre de grandeur correct.

56
00:03:16,980 --> 00:03:22,310
nous avons multiplié par 100, alors maintenant
nous avons simplement besoin de le diviser par 100 à nouveau.

57
00:03:22,310 --> 00:03:24,620
Très bien, donc en gros
ce que ce serait, alors,

58
00:03:24,620 --> 00:03:30,990
il serait
"<i> Math.round </ i> (1,23456 x 100)"

59
00:03:30,990 --> 00:03:32,860
et maintenant le tout ici,

60
00:03:32,860 --> 00:03:35,470
nous avons simplement le diviser par 100

61
00:03:35,970 --> 00:03:38,390
et cela c'est 1,23

62
00:03:38,390 --> 00:03:42,570
et cela est exactement comment
ce nombre doit être arrondi

63
00:03:42,570 --> 00:03:47,720
si nous voulions arrondir
à deux chiffres après la virgule.

64
00:03:47,720 --> 00:03:49,430
Voilà donc une petite astuce.

65
00:03:49,430 --> 00:03:52,610
Nous allons mettre en œuvre ceci
dans une fonction générique,

66
00:03:53,290 --> 00:03:59,130
donc nous allons revenir à notre code
et nous allons peut-être ajouter une fonction ici.

67
00:03:59,310 --> 00:04:00,090
Ok,

68
00:04:00,090 --> 00:04:03,740
donc je vais appeler cette fonction
<i> round_number </ i>.

69
00:04:04,130 --> 00:04:05,620
Cela semble être un bon nom,

70
00:04:05,620 --> 00:04:07,380
parce que, comme nous l'avons dit au début,

71
00:04:07,380 --> 00:04:10,260
nous devrions nommer nos fonctions
en fonction de ce qu'ils font

72
00:04:10,260 --> 00:04:12,610
et cette fonction est censée
arrondir le nombre.

73
00:04:12,610 --> 00:04:14,080
Donc, ça va.

74
00:04:14,080 --> 00:04:18,470
Et puis cette fonction maintenant,
avec les parenthèses comme toujours,

75
00:04:18,470 --> 00:04:22,680
devrait maintenant prendre un argument,
je dois donc définir un paramètre ici

76
00:04:22,680 --> 00:04:28,020
et je vais l'appeler <i> valeur </ i> parce que
c'est un terme assez générique

77
00:04:28,020 --> 00:04:31,650
et qui est essentiellement
ce que je pense être passé dans

78
00:04:31,650 --> 00:04:33,580
lorsque cette fonction est appelée.

79
00:04:34,090 --> 00:04:39,600
Ainsi, le corps de la fonction
ici doit contenir ce code

80
00:04:39,600 --> 00:04:44,160
"Math dot aléatoire", désolé,
"rond", pas au hasard.

81
00:04:44,160 --> 00:04:47,900
nous prenons le nombre qui a été
adoptée pour nous, <i> valeur </ i>

82
00:04:47,900 --> 00:04:50,680
on multiplie par 100,
comme nous l'avons vu

83
00:04:51,240 --> 00:04:54,070
alors nous arrondissons
ce produit vers le bas

84
00:04:55,180 --> 00:04:58,670
au prochain nombre entier
et maintenant nous le divisons

85
00:05:00,240 --> 00:05:01,370
par 100,

86
00:05:01,370 --> 00:05:04,470
donc qu'ils étaient dans
la bonne grandeur.

87
00:05:06,000 --> 00:05:09,800
et un point-virgule à la fin
de l'expression.

88
00:05:09,800 --> 00:05:10,850
Très bien.

89
00:05:10,850 --> 00:05:12,430
Alors maintenant,

90
00:05:12,430 --> 00:05:17,540
ceci est une fonction qui prend
un argument, un paramètre

91
00:05:17,540 --> 00:05:20,750
nous pouvons appeler cette fonction
et nous pouvons en passer un argument,

92
00:05:20,750 --> 00:05:22,930
donc tout, un nombre que nous voulons,

93
00:05:22,930 --> 00:05:25,040
et il sera arrondi correctement

94
00:05:25,040 --> 00:05:30,630
à deux points après la virgule,
deux chiffres après la virgule.

95
00:05:30,630 --> 00:05:34,370
Le seul problème ici c'est que ce calcul,

96
00:05:34,370 --> 00:05:37,600
le résultat de ce calcul serait
effectivement perdu,

97
00:05:38,070 --> 00:05:40,970
il serait tout simplement calculé
puis "boom",

98
00:05:40,970 --> 00:05:42,710
Il serait perdu.

99
00:05:42,710 --> 00:05:47,270
Ce que nous avons besoin est, nous avons besoin
d'un moyen pour réellement retourner cette valeur

100
00:05:47,310 --> 00:05:51,680
au point où la fonction
a été appelée en premier lieu

101
00:05:51,680 --> 00:05:55,580
et ceci est un concept très important
en ce qui concerne les fonctions

102
00:05:55,950 --> 00:05:58,010
et en faisant cela,

103
00:05:58,190 --> 00:05:59,390
ce retour.

104
00:05:59,390 --> 00:06:04,230
Nous utilisons en fait un mot-clé très
significatif qui est appelé <i> retour </ i>.

105
00:06:04,430 --> 00:06:07,780
D'accord, et vous pouvez voir ici par
le codage automatique des couleurs

106
00:06:07,780 --> 00:06:10,700
qu'il reconnaît cela comme un mot-clé.

107
00:06:10,790 --> 00:06:14,600
Nous sommes donc ici calculons
cette expression

108
00:06:14,600 --> 00:06:17,240
puis nous retournons cette valeur

109
00:06:17,280 --> 00:06:21,430
à celui qui a appelé cette fonction
en premier lieu.

110
00:06:22,240 --> 00:06:24,990
Alors, où est-ce que nous aimerions
appeler cette fonction?

111
00:06:24,990 --> 00:06:26,910
Eh bien, ici, dans ce code particulier,

112
00:06:26,910 --> 00:06:30,970
nous aimerions l'appeler en six endroits,
à savoir, ici, ici et ici.

113
00:06:31,070 --> 00:06:33,440
Et puis ici, ici et ici.

114
00:06:33,590 --> 00:06:35,130
Donc, nous allons continuer et faire cela.

115
00:06:35,130 --> 00:06:38,500
Donc, plutôt que de passer ici "A1A1",

116
00:06:38,500 --> 00:06:45,000
au verrou de la console, nous voulons
d'abord filtrer cette valeur

117
00:06:45,000 --> 00:06:48,390
en la faisant passer à travers la <i> fonction round_number</ i> ,

118
00:06:48,390 --> 00:06:55,380
donc je vais dire simplement
"round_number (A1A1)"

119
00:06:55,380 --> 00:06:56,510
D'accord.

120
00:06:56,510 --> 00:06:58,630
Au lieu de simplement "A1A1".

121
00:06:58,630 --> 00:07:03,480
Alors ce qui se passe ici c'est que
nous allons prendre cette valeur,

122
00:07:03,480 --> 00:07:05,200
nous allons la fait passer
à cette fonction,

123
00:07:05,470 --> 00:07:07,340
quelque chose est calculée,

124
00:07:07,340 --> 00:07:09,700
je l'espère bien, si nous avons fait
cela correctment.

125
00:07:10,150 --> 00:07:12,280
Et puis cette valeur est retournée

126
00:07:12,590 --> 00:07:17,540
à l'endroit où nous avons effectivement
appelé cette fonction en premier lieu.

127
00:07:17,710 --> 00:07:19,960
Essentiellement mis ici.

128
00:07:21,190 --> 00:07:25,830
Et nous pouvons le faire avec
les six autres,

129
00:07:25,830 --> 00:07:28,440
aussi bien les cinq autres exemples, .

130
00:07:28,440 --> 00:07:32,170
Donc, ici, nous aurions simplement
à mettre un "arrondi_numéro (A1A2),

131
00:07:32,170 --> 00:07:37,280
et ici, nous aurions tout simplement
"arrondi_numéror (A2A2)"

132
00:07:37,280 --> 00:07:41,990
et la même chose ici
"arrondi_numéro (A1A1)",

133
00:07:41,990 --> 00:07:49,210
"arrondi_numéro (A1A2)"
et "arrondi_numéro(A2A2)."

134
00:07:50,090 --> 00:07:53,270
Très bien, nous allons donc enregistrer
cela et revenir au navigateur

135
00:07:53,270 --> 00:07:54,420
et voir si cela a fonctionné

136
00:07:54,420 --> 00:07:56,220
Ok, donc je suis ici dans ce document,

137
00:07:56,220 --> 00:07:59,570
Je recharge et boom,
il a fonctionné magnifiquement.

138
00:07:59,570 --> 00:08:03,540
Donc, comme vous pouvez voir les chiffres
ici sont maintenant arrondies correctement

139
00:08:03,540 --> 00:08:08,140
jusqu'à deux chiffres après la virgule.

140
00:08:08,840 --> 00:08:10,990
Donc, cela a fonctionné très bien.

141
00:08:10,990 --> 00:08:13,240
maintenant, peut-être une autre question.

142
00:08:13,240 --> 00:08:17,330
Donc, cela est excellent que nous avons
maintenant cet outil qui arrondit un nombre,

143
00:08:17,330 --> 00:08:22,520
mais il arrondit à deux chiffres
après la virgule.

144
00:08:22,520 --> 00:08:24,570
Et cela est codé en dur.

145
00:08:24,570 --> 00:08:29,020
Y a-t-il un moyen pour nous de rendre
cette fonction encore plus générique,

146
00:08:29,020 --> 00:08:33,400
afin que nous puissions permettre à un utilisateur,
non seulement passer le nombre

147
00:08:33,560 --> 00:08:36,440
à arrondir, mais aussi la précision?

148
00:08:36,440 --> 00:08:40,170
Combien de chiffres après la virgule?

149
00:08:41,030 --> 00:08:42,730
Eh bien, tout à fait,
nous pouvons le faire.

150
00:08:42,730 --> 00:08:48,380
Alors, pourquoi ne pas continuer
et définir simplement

151
00:08:48,380 --> 00:08:53,000
un second paramètre pour cette fonction,
que je vais maintenant appeler <i> décimales</ i>.

152
00:08:53,460 --> 00:08:59,460
Ok, donc ce que cela serait
par exemple dans ce cas concret

153
00:08:59,520 --> 00:09:03,620
où nous voudrions qu'il soit
à deux chiffres après la virgule,

154
00:09:06,840 --> 00:09:10,540
cette valeur doit être 2, parce que
nous voulons qu'elle soit décalée par 2,

155
00:09:11,240 --> 00:09:13,950
et donc cette valeur ici,
comme nous le savons, est correcte,

156
00:09:13,950 --> 00:09:18,990
nous devons donc multiplier la valeur par 100,
puis diviser à nouveau par 100.

157
00:09:19,090 --> 00:09:21,830
Donc, si cette valeur,
par exemple, était 3,

158
00:09:21,830 --> 00:09:22,970
ce <i> décimales </ i>,

159
00:09:23,940 --> 00:09:26,870
qui signifie que nous aimerions
que le nombre soit arrondir à

160
00:09:26,870 --> 00:09:29,920
trois chiffres après la virgule.

161
00:09:30,500 --> 00:09:35,730
Ensuite, il faudrait multiplier
par 1000 et le diviser par 1000.

162
00:09:35,860 --> 00:09:40,650
Si elle était 4, il faudrait
multiplié par 10.000, puis

163
00:09:40,650 --> 00:09:43,140
divisé par 10 000 et ainsi de suite,

164
00:09:43,290 --> 00:09:47,290
le truc ici est que ce nombre
devrait être codé en dur

165
00:09:47,290 --> 00:09:52,350
mais il devrait en fait dépendre
de <i> décimales</ i> ici.

166
00:09:52,350 --> 00:09:54,890
Et nous pouvons le faire,

167
00:09:54,890 --> 00:09:59,380
donc il devrait tout simplement être de 10 à la puissance
de tout ce que nous avons dans les <i> décimales</ i>,

168
00:10:00,140 --> 00:10:04,130
et il y a une fonction vraiment bien fait
qui nous aide à faire cela

169
00:10:04,130 --> 00:10:08,110
et il est appelé
<i> Math.pow </ i>,

170
00:10:08,110 --> 00:10:10,740
il prend deux arguments,

171
00:10:10,740 --> 00:10:12,880
à savoir la base et l'exposant,

172
00:10:12,880 --> 00:10:18,020
donc, dans notre cas, il serait "10 exposant
décimales".

173
00:10:18,020 --> 00:10:19,490
donc si la <i> décimale </ i> est 2,

174
00:10:19,490 --> 00:10:22,180
alors ce serait 10 à la puissance de 2,

175
00:10:22,180 --> 00:10:25,410
si elle était 3, il serait
10 à la puissance 3 et ainsi de suite.

176
00:10:25,670 --> 00:10:31,200
Maintenant, nous allons stocker ceci dans
une variable que je vais appeler <i> shifter </ i>.

177
00:10:31,580 --> 00:10:33,650
"Shifter", parce qu'il est
en train de changer.

178
00:10:33,650 --> 00:10:35,600
Il déplace la décimale.

179
00:10:35,600 --> 00:10:39,740
Et puis il ne faut pas oublier de mettre fin
à cette ligne ici avec un point-virgule,

180
00:10:39,950 --> 00:10:43,400
et maintenant au lieu de
ce 100 codé en dur ici,

181
00:10:43,400 --> 00:10:47,570
je vais simplement remplacer
ce 100 avec le <i> shifter </ i>,

182
00:10:47,570 --> 00:10:49,910
quelle que soit la valeur que
nous avons dans le <i> shifter </ i>.

183
00:10:50,610 --> 00:10:51,700
Donc,

184
00:10:52,250 --> 00:10:55,160
maintenant, la seule chose que
nous devons faire c'est,

185
00:10:55,160 --> 00:10:56,980
quand nous appelons cette fonction,

186
00:10:56,980 --> 00:11:01,200
nous sommes censés de passer
dans deux arguments, pas seulement un.

187
00:11:01,200 --> 00:11:02,570
Donc, nous allons faire cela ici, d'accord?

188
00:11:02,630 --> 00:11:07,560
Mettons dans un 2 ici,
donc la virgule 2, comme la decimale,

189
00:11:07,560 --> 00:11:11,060
de sorte que nous passons
la valeur, et les décimales,

190
00:11:11,060 --> 00:11:15,860
et la même chose ici-bas, 0,2 et 0,2

191
00:11:16,810 --> 00:11:19,860
et désolé, "virgule" 2.

192
00:11:19,960 --> 00:11:21,170
Ok, <i> Enregistrer </ i>,

193
00:11:21,480 --> 00:11:24,550
et maintenant, nous allons passer
au navigateur et voir si cela fonctionne.

194
00:11:24,550 --> 00:11:27,960
Nous allons donc recharger
ce document et rien a changé,

195
00:11:27,960 --> 00:11:29,820
de sorte que la sortie ici
est toujours le même,

196
00:11:29,820 --> 00:11:30,990
qui est correct,

197
00:11:30,990 --> 00:11:34,200
mais en réalité derrière les scènes, on fait:

198
00:11:34,640 --> 00:11:38,830
nous avons fait une fonction
de nombre rond plus générique.

199
00:11:38,830 --> 00:11:39,750
En effet,

200
00:11:39,750 --> 00:11:43,780
si nous devions revenir en arrière
et remplacer ces 2s avec, par exemple, 1

201
00:11:45,420 --> 00:11:52,060
nous devrions voir tous ces nombres
arrondis à un chiffre après la virgule.

202
00:11:52,060 --> 00:11:53,490
Permettez-moi d'enregistrer cela,

203
00:11:53,490 --> 00:11:55,370
revenons au navigateur et recharger.

204
00:11:55,370 --> 00:11:57,360
Et en effet, cela se passe,

205
00:11:57,360 --> 00:12:00,680
mais vous pouvez voir que
ce n'est pas une bonne idée ici

206
00:12:00,770 --> 00:12:04,380
parce que les choses sont
individuellement, correctement arrondi,

207
00:12:04,380 --> 00:12:08,330
mais ceux-ci sont des calculs
indépendants les uns des autres.

208
00:12:08,330 --> 00:12:11,470
Et donc ce qui se passe c'est que effectivement
ces chiffres seraient ajouter jusqu'à

209
00:12:11,550 --> 00:12:13,150
ce qui est un supérieur à 1.

210
00:12:13,150 --> 00:12:15,940
Et cela n'est pas évidemment souhaité.

211
00:12:15,940 --> 00:12:19,260
Donc, nous allons laisser ceci avec 2 ici.

212
00:12:19,800 --> 00:12:23,610
Nous pourrions écrire une fonction
qui prend les trois valeurs en compte

213
00:12:23,610 --> 00:12:25,700
et arrondit correctement,

214
00:12:25,700 --> 00:12:29,160
de telle sorte que la somme
sera toujours 1.

215
00:12:29,160 --> 00:12:33,510
mais ici c'est juste une fonction simple
qui prend toute valeur,

216
00:12:33,510 --> 00:12:36,530
ne se soucie pas d'autres
valeurs dans le code

217
00:12:36,530 --> 00:12:42,140
et arrondit ensuite vers le bas à un certain
nombre de chiffres après la virgule.

218
00:12:42,460 --> 00:12:46,200
Donc, cela résout essentiellement
notre problème,

219
00:12:46,200 --> 00:12:50,530
permettez-moi d'enregistrer encore et de revenir
en arrière et voir si tout fonctionne comme prévu,

220
00:12:50,530 --> 00:12:52,160
oui en effet,

221
00:12:52,160 --> 00:12:53,740
donc si vous regardez
maintenant à ce code.

222
00:12:53,740 --> 00:12:55,430
Nous avons fait un certain
nombre de choses ici.

223
00:12:55,430 --> 00:12:58,140
Tout d'abord nous nous sommes
débarrassés du problème d'arrondi

224
00:12:58,160 --> 00:13:01,100
dans le contexte de la sortie du numéro.

225
00:13:01,100 --> 00:13:02,740
Voilà c'est bien,

226
00:13:02,740 --> 00:13:08,140
mais nous avons aussi appris comment
écrire une fonction qui prend un ou deux

227
00:13:08,140 --> 00:13:10,140
ou en fait les paramètres multiples,

228
00:13:10,140 --> 00:13:15,840
ce qui nous donne un outil très puissant
pour écrire des fonctions très génériques.

229
00:13:16,070 --> 00:13:17,810
Si vous prenez cette fonction ici,

230
00:13:17,810 --> 00:13:18,840
Par exemple,

231
00:13:18,840 --> 00:13:20,510
ce n'est pas une fonction générique.

232
00:13:20,510 --> 00:13:25,390
Il ne prend pas de valeurs.
Vous calculez simplement quelque chose

233
00:13:25,390 --> 00:13:27,950
et c'est bien ici dans
le cadre de cet exemple,

234
00:13:27,950 --> 00:13:29,860
mais ce n'est pas une fonction
très générique.

235
00:13:29,860 --> 00:13:32,090
Cette fonction ici est beaucoup
plus générique,

236
00:13:32,090 --> 00:13:35,340
vous pouvez maintenant passer
toute valeur que vous voulez,

237
00:13:35,340 --> 00:13:38,950
et un certain nombre de décimales
pour votre précision que vous voulez

238
00:13:38,950 --> 00:13:42,320
et il sera de retour à la valeur correcte.

239
00:13:42,360 --> 00:13:44,910
Ceci est un concept très puissant.

240
00:13:44,930 --> 00:13:47,990
et l'autre chose qui est vraiment
important ici est ce retour.

241
00:13:47,990 --> 00:13:51,740
vous pouvez explicitement retourner
les choses à partir d'une fonction.

242
00:13:51,770 --> 00:13:55,450
Et c'est en fait un moyen
très courant d'utiliser.

243
00:13:55,450 --> 00:13:59,070
Donc, ici, par exemple,
nous allons retourner le calcul.

244
00:13:59,070 --> 00:14:00,890
Le résultat de ce calcul ici,

245
00:14:01,810 --> 00:14:03,870
mais comme vous pouvez
le voir ci-dessous ici,

246
00:14:04,490 --> 00:14:08,900
nous n'avons pas besoin explicitement
à retourner quoi que ce soit.

247
00:14:09,260 --> 00:14:11,420
Les fonctions fonctionnent
sans le mot clé retour.

248
00:14:11,420 --> 00:14:16,560
Si vous ne retournez pas quoi que ce soit,
en fait dans les coulisses, l'indéfini est retourné.

249
00:14:16,560 --> 00:14:19,090
Et voilà pourquoi, parfois,
il apparaît dans la console.

250
00:14:19,090 --> 00:14:22,050
Mais il est vraiment pas important
pour nous ici.

251
00:14:22,050 --> 00:14:25,260
Vous pouvez retourner quelque chose
si vous voulez, vous n'etes pas obligés.

252
00:14:25,260 --> 00:14:28,050
Plusieurs fois, vous voulez réellement
retourner quelque chose.

253
00:14:28,080 --> 00:14:31,190
Et enfin, l'autre chose que
je voudrais mentionner ici c'est,

254
00:14:31,190 --> 00:14:36,520
une fois que vous revenez de la fonction,
la fonction est terminée.

255
00:14:37,010 --> 00:14:42,170
D'accord? Parce que vous retournez
essentiellement le contrôle à l'endroit

256
00:14:42,170 --> 00:14:43,890
où la fonction a été appelée.

257
00:14:43,890 --> 00:14:44,860
Ainsi, par exemple,

258
00:14:44,860 --> 00:14:50,540
quoi que ce soit ici,
vous savez, "var bla = 5;"

259
00:14:50,650 --> 00:14:54,320
cela ne serait jamais être exécuté,
parce que vous

260
00:14:54,320 --> 00:14:57,580
retournerez toujours la fonction
ici et ce serait la fin.

261
00:14:57,980 --> 00:14:59,590
Alors permettez-moi
de me débarrasser de cela.

262
00:14:59,920 --> 00:15:05,690
Ok, donc quelques idées puissantes ici
mis en œuvre en JavaScript.

263
00:15:05,690 --> 00:15:09,490
Donc ceci conclut cette vidéo.
Nous avons appris sur les valeurs retournées

264
00:15:09,490 --> 00:15:13,690
et sur la génération de puissantes
fonctions, génériques.

265
00:15:14,040 --> 00:15:17,080
Dans la vidéo suivante
et finale du chapitre 2,

266
00:15:17,080 --> 00:15:21,530
Je voudrais expliquer autre chose que
nous avons examiné à ce jour,

267
00:15:21,530 --> 00:15:23,440
qui est le concept d'un champ.

268
00:15:23,440 --> 00:15:25,310
et je vous verrai dans la vidéo suivante!

