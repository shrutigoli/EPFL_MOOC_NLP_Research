1
00:00:03,500 --> 00:00:07,030
(Marcel) Bienvenue. Nature, dans le code.
Nous sommes dans le chapitre 2, leçon 6.

2
00:00:07,030 --> 00:00:11,600
Nous avons commencé la mise en œuvre
de Hardy-Weinberg en JavaScript et dans cette vidéo,

3
00:00:11,600 --> 00:00:15,840
nous allons sortir des valeurs
et puis on va effectivement générer

4
00:00:15,840 --> 00:00:18,780
et de calculer la prochaine génération.

5
00:00:18,780 --> 00:00:20,930
Donc, ceci est où
nous nous sommes arrêtés.

6
00:00:20,930 --> 00:00:24,460
Nous avons attribué des valeurs
pour ces fréquences génotype,

7
00:00:24,460 --> 00:00:27,610
puis nous avons calculé
les fréquences des allèles en JavaScript

8
00:00:27,610 --> 00:00:29,930
mais nous avons remarqué que rien

9
00:00:29,930 --> 00:00:34,420
est enregistré dans le <i> Console. </ i>
Et c'est bien sûr parce qu'on n'a pas ajouté

10
00:00:34,420 --> 00:00:38,220
une instruction ici pour réellement
dire JavaScript de le faire.

11
00:00:38,220 --> 00:00:42,480
Nous allons donc utiliser
cette commande <i> console.log</ i> encore.

12
00:00:44,210 --> 00:00:49,740
Et je vais vous demander de me suivre
encore et faire ce que je fais ici

13
00:00:49,740 --> 00:00:52,720
et je vais vous expliquer comment
cela fonctionne dans une seconde.

14
00:00:52,720 --> 00:00:56,060
J'ai donc ceci <i> console.log </ i>
avec des parenthèses,

15
00:00:56,060 --> 00:00:59,360
et le point-virgule ici à la fin.

16
00:00:59,360 --> 00:01:03,340
Maintenant, ce que je vais faire
c'est que je vais écrire entre guillemets.

17
00:01:03,340 --> 00:01:10,160
Donc, d'abord guillemets puis
"génération" <i> Espace </ i> "0" colon.

18
00:01:10,160 --> 00:01:15,220
Ensuite, <i> Backslash T </ i>.
Maintenant, guillemets encore.

19
00:01:15,220 --> 00:01:17,420
<I> Plus </ i> "A1A1."

20
00:01:18,940 --> 00:01:25,570
Et là encore, <i> Plus </ i>,
guillemets, <i> Backslash T </ i>, guillemets.

21
00:01:25,570 --> 00:01:28,790
Puis à nouveau, <i> Plus </ i>
"a1a2" cette fois ci.

22
00:01:28,790 --> 00:01:34,900
Et puis <i> Plus </ i>, guillemets,
<i> Backslash T </ i>, guillemets,

23
00:01:34,900 --> 00:01:39,130
puis à nouveau <i> Plus </ i>,
maintenant "A2A2."

24
00:01:39,130 --> 00:01:45,340
Donc, cela est maintenant la bonne ligne
et nous en parleronsdans une seconde.

25
00:01:45,350 --> 00:01:49,070
Tout d'abord, nous verrons si cela a effectivement
fonctionné. Donc, nous allons enregistré ceci.

26
00:01:49,070 --> 00:01:53,250
Revenons au navigateur
et jetons un coup d'oeil ici.

27
00:01:53,250 --> 00:01:58,640
Donc, je vais recharger ce document ici.
Bon, attention, recharger, et boom,

28
00:01:58,640 --> 00:02:03,880
elle est ici, "génération
0", "0.15", "0,5", "0,35".

29
00:02:03,880 --> 00:02:05,410
Ceci est tout à fait correct,

30
00:02:05,410 --> 00:02:06,480
comme cela devrait être.

31
00:02:06,480 --> 00:02:10,500
Alors revenons au code et nous allons
jeter un coup d'oeil à cette ligne ici.

32
00:02:10,500 --> 00:02:13,430
Donc, il y a pas mal de choses que
je veux mentionner ici.

33
00:02:13,430 --> 00:02:18,580
Tout d'abord, que sont ces guillemets
et ce qu'ils représentent?

34
00:02:18,580 --> 00:02:23,270
Et puis qu'est ce "+", ne doit pas
nous utiliser "+" pour l'addition?

35
00:02:23,270 --> 00:02:26,110
Ajoutons-nous ici des valeurs?
Que se passe t-il ici?

36
00:02:26,110 --> 00:02:29,390
Et puis la dernière chose que
je voudrais aborder c'est

37
00:02:29,390 --> 00:02:32,040
qu'est ce que ce "\ t"?

38
00:02:32,340 --> 00:02:34,340
Alors d'abord les guillemets.

39
00:02:34,340 --> 00:02:36,550
Les guillemets sont en fait
extrêmement important.

40
00:02:36,550 --> 00:02:42,280
Les guillemets simplement instruisent
JavaScript pour l'essentiel pas de soins

41
00:02:42,280 --> 00:02:44,240
à propos de ce qui est ici.

42
00:02:44,240 --> 00:02:45,960
Ou de ne pas penser à ce sujet,

43
00:02:45,960 --> 00:02:49,280
pour lui donner une touche
légèrement humaine. Il dit juste, regardez,

44
00:02:49,280 --> 00:02:53,550
ce que nous avons ici
c'est une chaîne de caractères.

45
00:02:53,550 --> 00:02:57,540
Et en fait, nous appelons cela
<i> une chaîne </ i> en sténographie.

46
00:02:57,540 --> 00:03:03,570
Si vous voyez une chaîne, traitez-le juste
comme une chaîne de caractères.

47
00:03:03,570 --> 00:03:06,600
Ne pas trop penser. Ne pas l'interpréter
comme toute autre chose.

48
00:03:06,600 --> 00:03:09,280
C'est juste une chaîne de caractères.

49
00:03:09,280 --> 00:03:12,470
Donc, si nous le demandons
d'imprimer une chaîne de caractères,

50
00:03:12,470 --> 00:03:17,630
voilà ce qu'il va faire. Il va tout simplement
imprimer une chaîne de caractères.

51
00:03:17,630 --> 00:03:21,920
Un exemple qui pourrait peut-être
le rendre un peu plus clair c'est

52
00:03:21,920 --> 00:03:22,890
regarde ça.

53
00:03:22,890 --> 00:03:26,550
Je veux dire ici que nous n'avons pas
les guillemets autour de cette "a1a1"

54
00:03:26,560 --> 00:03:30,710
Ainsi, dans le cadre de cette méthode,
JavaScript,

55
00:03:31,050 --> 00:03:33,480
verra simplement
ce qu'il ya dans cette variable.

56
00:03:33,480 --> 00:03:37,440
Dans ce cas, c'est "0.15"
et alors il va l'interpréter

57
00:03:37,440 --> 00:03:42,600
comme une chaîne et la sortie dans
le <i> Console </ i> comme «0,15».

58
00:03:42,600 --> 00:03:46,470
Voyons voir ce qui se passerait
si nous mettons effectivement les guillemets

59
00:03:46,470 --> 00:03:48,150
autour de cette "A1A1".

60
00:03:48,450 --> 00:03:50,190
Alors maintenant ce que cela signifierait,

61
00:03:50,190 --> 00:03:52,740
c'est tout simplement, nous disons
essentiellement à JavaScript,

62
00:03:52,740 --> 00:03:54,410
Ne t'en fais pas pour ça.

63
00:03:54,420 --> 00:03:58,940
C'est juste le caractère
'a', '1' et 'a' et '1'.

64
00:03:58,940 --> 00:04:00,990
Ces quatre personnages comme une chaîne.

65
00:04:00,990 --> 00:04:02,950
Ne vous inquiétez pas,
il suffit de le sortir. "

66
00:04:02,960 --> 00:04:07,650
Et si nécessaire enregistrer ceci,
revenir au navigateur et rechargez-le,

67
00:04:07,650 --> 00:04:10,240
vous pouvez voir qu'en effet "A1A1"

68
00:04:10,240 --> 00:04:14,250
littéralement est imprimé ici
dans le <i> Console. </ i>

69
00:04:14,250 --> 00:04:16,090
Mais c'est bien sûr pas
ce que nous voulons.

70
00:04:16,090 --> 00:04:21,080
Nous voulons que la valeur stockée dans
le "A1A1" variable soit imprimée.

71
00:04:21,090 --> 00:04:25,220
Donc, nous n'utilisons pas les guillemets
ici. Donc citations signifient simplement,

72
00:04:25,220 --> 00:04:30,230
nous utilisons simplement des guillemets
pour entourer de texte littéral.

73
00:04:30,230 --> 00:04:31,900
Voilà ce que les guillemets sont pour.

74
00:04:31,900 --> 00:04:34,090
Vous pouvez utiliser des guillemets doubles
ou utiliser des guillemets simples.

75
00:04:34,090 --> 00:04:36,430
Quoi que vous fassiez,
soyez juste cohérent.

76
00:04:36,990 --> 00:04:42,740
Donc, la deuxième question
c'est avec ce "\ t".

77
00:04:42,740 --> 00:04:46,650
Ceci est simplement une notation
abrégée pour <i> Tab </ i>.

78
00:04:46,650 --> 00:04:52,700
Donc, parfois, vous voulez séparer des valeurs
en ayant un peu de <i> Tab </ i> au millieu

79
00:04:52,700 --> 00:04:54,510
pour la visuelle esthétique.

80
00:04:54,510 --> 00:04:59,300
Voici comment vous le faites, "\ t".
Cela peut être pratique assez souvent

81
00:04:59,300 --> 00:05:01,640
lorsque vous sortez
un tas de choses ensemble

82
00:05:01,640 --> 00:05:04,960
et vous avez besoin d'un peu
d'espace entre ces valeurs.

83
00:05:04,960 --> 00:05:08,770
Donc finalement, que fait est ce "+" ici?

84
00:05:08,770 --> 00:05:11,780
Nous utilisons normalement "+"
pour ajouter des valeurs?

85
00:05:11,780 --> 00:05:12,850
Oui c'est vrai,

86
00:05:12,850 --> 00:05:16,930
mais il y a une exception importante ici
dans JavaScript.

87
00:05:16,930 --> 00:05:23,340
Nous pouvons effectivement ajouter des chaînes
ensemble et donc construire des grandes chaînes.

88
00:05:23,340 --> 00:05:26,290
Donc, ceci est appelé
<i> la concaténation de chaînes. </ I>

89
00:05:26,290 --> 00:05:28,610
Ici, dans ce cas,
si nous revenons au navigateur,

90
00:05:28,610 --> 00:05:31,190
ce que nous aimerions construire,
et laissez-moi recharger cela.

91
00:05:31,460 --> 00:05:33,590
Ceci n'est en fait pas encore enregistré.

92
00:05:33,590 --> 00:05:36,130
Permettez-moi d'enregistrer cette
version sans les guillemets ici.

93
00:05:36,130 --> 00:05:40,180
Je vais l'enregistrer et puis
je vais revenir en arrière et le recharger.

94
00:05:40,180 --> 00:05:41,880
Maintenant, nous avons à nouveau
la valeur correcte.

95
00:05:41,880 --> 00:05:46,910
Nous aimerions construire cette
chaîne ici, «génération 0 colon",

96
00:05:46,910 --> 00:05:50,090
<I> Tab </ i> 0,15, <i> Tab </ i> 0,5,
<i> Tab </ i> 0,35.

97
00:05:51,050 --> 00:05:54,700
Et nous faisons cela en ajoutant
les morceaux ensemble.

98
00:05:54,700 --> 00:05:58,500
Et nous ajoutons ceux-là simplement
avec l'opérateur "+".

99
00:05:58,500 --> 00:06:02,020
Et quand JavaScript
voit cet opérateur "+",

100
00:06:02,020 --> 00:06:05,800
si l'un des éléments
qui sont ajoutés est une chaîne,

101
00:06:05,800 --> 00:06:08,440
comme c'est le cas ici,

102
00:06:08,440 --> 00:06:11,560
le premier élément est en fait ici
une chaîne de caractères,

103
00:06:11,560 --> 00:06:14,630
alors il va traiter tout le reste
sous forme de chaîne.

104
00:06:14,630 --> 00:06:17,940
Donc, si ce n'est pas une chaîne,
il recherchera simplement la valeur

105
00:06:17,940 --> 00:06:19,710
et traiter ceci comme une chaîne.

106
00:06:19,710 --> 00:06:24,720
Ceci est une chose pratique. Il peut
potentiellement causer une certaine confusion,

107
00:06:25,130 --> 00:06:29,350
si vous ajoutez des choses qui sont
réellement destinés à être des valeurs réelles,

108
00:06:29,350 --> 00:06:32,390
valeurs numériques, mais de toute façon
vous avez les guillemets là-dedans,

109
00:06:32,390 --> 00:06:34,510
et certains d'entre elle
est interprétée comme une chaîne.

110
00:06:34,510 --> 00:06:37,900
Mais ce n'est pas vraiment
quelque chose à se soucier à ce stade.

111
00:06:37,900 --> 00:06:40,420
Je veux dire que c'est en fait
une méthode très pratique

112
00:06:41,080 --> 00:06:46,450
pour construire les grandes chaînes des morceaux
que vous ajoutez simplement ensemble.

113
00:06:46,450 --> 00:06:50,270
Donc, cela est un phénomène qui
est appelé <i> la concaténation de chaînes. </ I>

114
00:06:50,270 --> 00:06:54,650
Vous verrez tout au long de JavaScript.
Nous ne l'utiliserons pas beaucoup,

115
00:06:54,650 --> 00:06:58,820
mais il est pratiquement impossible
de comprendre tout autre

116
00:06:58,820 --> 00:07:01,650
code JavaScript si vous ne comprenez
pas que vous pouvez

117
00:07:01,650 --> 00:07:06,890
simplement ajouter des chaînes ensemble, ou des
valeurs ensemble comme une chaîne plus grande.

118
00:07:07,330 --> 00:07:09,350
Voilà <i> la concaténation de chaînes. </ I>

119
00:07:09,350 --> 00:07:12,840
Maintenant, je dis que nous
n'utilisons pas cela parce qu'il est en fait

120
00:07:12,840 --> 00:07:16,160
une autre façon de délivrer ces valeurs.

121
00:07:16,160 --> 00:07:21,370
Donc, je vais supprimer tout ici
jusqu'au côlon.

122
00:07:21,380 --> 00:07:26,660
Et je vais mettre les guillemets de la fin ici
et maintenant, je vais simplement dire

123
00:07:26,670 --> 00:07:33,070
"Comma A1A1", "virgule a1a2",
et "virgule A2A2."

124
00:07:34,240 --> 00:07:37,840
Maintenant, la première chose à observer
c'est que cela est déjà plus agréable

125
00:07:37,840 --> 00:07:39,780
C'est déjà plus agréable à regarder,

126
00:07:39,780 --> 00:07:45,090
et c'est en fait assez important
parce que vous

127
00:07:45,090 --> 00:07:47,520
et d'autres qui lisent votre code
seront reconnaissants

128
00:07:47,520 --> 00:07:50,560
si vous écrivez de code agréable à regarder
et facile à comprendre .

129
00:07:50,590 --> 00:07:53,330
Donc, nous allons enregistrer ceci.
Nous en parlerons dans une seconde.

130
00:07:53,330 --> 00:07:59,110
Nous allons l'enregistrer,
revenir au navigateur, rechargez-le ici et,

131
00:07:59,110 --> 00:08:02,850
boom, nous voyons cela fonctionne, "génération 0".
Encore une fois les valeurs correctes,

132
00:08:02,850 --> 00:08:08,450
"0,15", "0,5", "0,35".
Maintenant déjà espacées correctement

133
00:08:08,450 --> 00:08:14,780
et en effet, même la couleur codée ici
comme de nombres en bleu.

134
00:08:14,780 --> 00:08:18,900
Dans ce cas, dans Chrome, dans votre
navigateur, il peut sembler un peu différent.

135
00:08:18,910 --> 00:08:20,950
Mais cela semble tout à fait agréable.

136
00:08:20,950 --> 00:08:23,630
Revenons au code
et voir ce qui se passe ici.

137
00:08:23,630 --> 00:08:27,130
Comment faisons-nous cela?
Eh bien ce qui se passe maintenant

138
00:08:27,130 --> 00:08:29,350
dans les coulisses, pour ainsi dire,

139
00:08:29,350 --> 00:08:36,080
mais vous devez savoir que <i> console.log </ i>
comme une méthode vous permet vraiment

140
00:08:36,080 --> 00:08:39,840
de passer dans plusieurs valeurs
non seulement un.

141
00:08:39,840 --> 00:08:44,550
Avant nous avons passé une grande chaîne
que nous avons créé à travers

142
00:08:44,550 --> 00:08:48,340
la <I>concaténation de chaîne. </ I>
Dans ce cas,nous allons simplement le passer

143
00:08:48,340 --> 00:08:52,530
quatre valeurs, et si vous passez
plusieurs valeurs à une fonction

144
00:08:52,530 --> 00:08:54,280
vous les séparez par des virgules,

145
00:08:54,280 --> 00:08:56,930
et nous allons en apprendre beaucoup plus
sur ce sujet dans la vidéo suivante.

146
00:08:56,930 --> 00:09:03,010
Mais ici, passant essentiellement dans
quatre valeurs et <i> console.log </ i> s'en occupera

147
00:09:03,010 --> 00:09:05,910
de tout automatiquement dans les coulisses.

148
00:09:05,910 --> 00:09:10,220
Et donc je préfère plus cette façon
d'écrire les<i> console.log </ i>,

149
00:09:10,220 --> 00:09:14,460
et nous allons utiliser cela maintenant
dans tout le reste du code.

150
00:09:15,300 --> 00:09:16,990
Alors maintenant, passons au coeur
de celui-ci.

151
00:09:17,150 --> 00:09:19,780
Donc, nous sortant maintenant ces valeurs.

152
00:09:19,780 --> 00:09:24,940
Mais ce que nous aimerions faire est que
nous aimerions maintenant calculer la prochaine génération.

153
00:09:24,950 --> 00:09:27,030
Alors, comment ferons-nous cela?

154
00:09:27,740 --> 00:09:33,520
Alors ce qu'on va faire est simplement
recalculer ces valeurs "A1A1".

155
00:09:33,650 --> 00:09:38,420
Donc "A1A1", et le "A2A2,"
et évidemment "a1a2" aussi.

156
00:09:38,420 --> 00:09:40,900
Donc "A1A1" dans la prochaine génération,

157
00:09:40,900 --> 00:09:44,010
nous pouvons calculer comme nous l'avons
fait auparavant sur les diapositives,

158
00:09:44,010 --> 00:09:49,880
en calculant simplement le produit
de la fréquence de A1, qui est "p".

159
00:09:49,880 --> 00:09:57,310
Donc "A1A1" peut être calculée dans la prochaine
génération comme «p fois p point virgule"

160
00:09:58,660 --> 00:10:01,190
Et de façon similaire,

161
00:10:01,190 --> 00:10:06,990
"A1A2" peut être calculé
comme «2 fois p fois q."

162
00:10:08,270 --> 00:10:16,470
Et "A2A2" peut être recalculé
comme "q fois q."

163
00:10:16,890 --> 00:10:21,420
Voilà comment nous le développons sur
les diapositives et comment elle fonctionne.

164
00:10:21,420 --> 00:10:23,150
Maintenant, vous pouvez vous demander,

165
00:10:23,160 --> 00:10:28,470
"Eh bien, qu'est-ce qui se passe ici?
Initialisons-nous à nouveau ces variables?"

166
00:10:28,470 --> 00:10:30,800
Non, ils existent déjà.

167
00:10:30,860 --> 00:10:36,810
Parce que nous les avons défini ici.
Si vous attribuez une valeur

168
00:10:36,850 --> 00:10:41,550
à une variable déjà existante,
la valeur sera tout simplement écrasé.

169
00:10:41,550 --> 00:10:46,390
Donc "A1A1" avant, donc ici, à ce stade,

170
00:10:46,390 --> 00:10:48,930
il stockera toujours la valeur "0,15",

171
00:10:48,930 --> 00:10:52,900
mais dès que nous arrivons à cette ligne,
ce produit ici est calculé,

172
00:10:52,900 --> 00:10:54,440
et quelle que soit ce qu'est
cette valeur maintenant,

173
00:10:54,440 --> 00:11:00,230
il sera stocké dans "A1A1",
et cette valeur "0.15" avant sera perdue.

174
00:11:00,230 --> 00:11:03,180
Donc, il écrase simplement les valeurs.

175
00:11:03,560 --> 00:11:06,190
Voyons donc maintenant,
en fait, si cela a fonctionné.

176
00:11:06,190 --> 00:11:08,840
Donc la première chose que je vais faire
maintenant parce que le code

177
00:11:08,840 --> 00:11:10,320
devient un peu plus complexe,

178
00:11:10,320 --> 00:11:11,960
Je vais ajouter un commentaire ici.

179
00:11:11,960 --> 00:11:13,330
Alors, qu'est ce qu'un commentaire?

180
00:11:13,330 --> 00:11:16,740
Eh bien, je vais simplement écrire ici,

181
00:11:16,740 --> 00:11:21,500
"Calcul de la prochaine génération"

182
00:11:23,870 --> 00:11:29,510
Ceci "//" ici est extrêmement pratique car
il est utilisé pour ajouter un commentaire.

183
00:11:29,510 --> 00:11:33,020
Alors qu'est-ce que cela signifie? Cela signifie
simplement lorsque JavaScript rencontres

184
00:11:33,020 --> 00:11:37,540
ceci "//", il ignore tout ce qui suit

185
00:11:37,540 --> 00:11:39,690
sur la ligne après.

186
00:11:39,690 --> 00:11:44,610
Et c'est un moyen très pratique pour
nous d'écrire des commentaires,

187
00:11:44,610 --> 00:11:49,510
et encore une fois cela est utile
à vous-même à l'avenir.

188
00:11:49,510 --> 00:11:53,380
Parfois, le code semble facile
parce que vous avez pensé à ce sujet

189
00:11:53,380 --> 00:11:56,940
pour un certain temps et vous avez
finalement écrire ce morceau de code.

190
00:11:56,970 --> 00:12:00,630
Mais si vous regardez
ce code dans quelques mois,

191
00:12:00,860 --> 00:12:05,230
vous ne le comprendrez pas facilement à nouveau
ou il vous faudra beaucoup de temps encore.

192
00:12:05,230 --> 00:12:09,340
Et donc c'est habituellement
un point où l'ajout d'un commentaire

193
00:12:09,340 --> 00:12:11,780
peut être vraiment utile pour le future,

194
00:12:11,780 --> 00:12:15,350
et encore pour tout le monde
qui travaille avec votre code,

195
00:12:15,400 --> 00:12:18,170
ou lire votre code dans le future.

196
00:12:18,480 --> 00:12:21,290
Alors permettez-moi de sortie maintenant
ces nouvelles valeurs.

197
00:12:21,290 --> 00:12:24,550
Et pour ce faire, je vais tout simplement
copier cette ligne ici.

198
00:12:24,550 --> 00:12:28,110
Je vais être un peu paresseux.
Je vais copier et coller ici.

199
00:12:28,110 --> 00:12:31,040
Bien sûr, cela est maintenant
«génération 1», non «0»,

200
00:12:31,040 --> 00:12:34,400
mais tout le reste reste le même.

201
00:12:34,400 --> 00:12:38,330
Alors permettez-moi d'enregistré cela.
Aller vers le navigateur,

202
00:12:38,330 --> 00:12:41,690
et recharger ce document,
et, boom, cela fonctionne.

203
00:12:41,690 --> 00:12:45,640
Ce que nous voyons ici c'est «génération 1»,
et ce sont les nouvelles valeurs.

204
00:12:45,640 --> 00:12:51,700
Donc, "0,16", "0,48", "0,36",
comme nous l'avons calculé précédemment

205
00:12:51,700 --> 00:12:52,600
dans les vidéos.

206
00:12:52,600 --> 00:12:54,710
Maintenant, voici une question.

207
00:12:54,710 --> 00:12:56,460
Qu'est-ce qui se passe ici ?

208
00:12:56,470 --> 00:12:59,020
Eh bien, il semble y avoir
une erreur d'arrondi.

209
00:12:59,020 --> 00:13:04,220
Alors 0.160000, beaucoup de zéros,
puis "3".

210
00:13:04,220 --> 00:13:05,410
Qu'est-ce que ceci ?

211
00:13:05,420 --> 00:13:11,550
Eh bien, il se trouve qu'il ya souvent
des erreurs JavaScript,

212
00:13:11,550 --> 00:13:17,290
erreurs d'arrondi lorsque vous faites des opérations
mathématiques dans les ordinateurs.

213
00:13:17,290 --> 00:13:21,430
Et cela peut sembler un peu étrange
parce que des ordinateurs doit être

214
00:13:21,430 --> 00:13:22,900
extrêmement précis.

215
00:13:22,900 --> 00:13:24,410
Oui c'est vrai,

216
00:13:24,420 --> 00:13:27,360
mais nous ne devons jamais oublier
qu'en arrière,

217
00:13:27,360 --> 00:13:31,540
à la base de tout cela,
les ordinateurs n'utilisent pas

218
00:13:31,540 --> 00:13:32,960
le système décimal.

219
00:13:32,960 --> 00:13:36,580
Ils utilisent en fait le système binaire
et parfois il est difficile

220
00:13:36,850 --> 00:13:42,830
pour un ordinateur / impossible, pour
représenter effectivement avec précision

221
00:13:42,830 --> 00:13:47,420
un nombre donné
sans aucune erreur d'arrondi.

222
00:13:47,420 --> 00:13:51,290
Alors permettez-moi d'essayer d'expliquer
cela dans le contexte du système décimal

223
00:13:51,380 --> 00:13:55,440
que nous utilisons dans l'usage quotidien.

224
00:13:55,440 --> 00:14:00,470
Donc, disons que nous avons commencé
avec ce numéro un tiers.

225
00:14:00,470 --> 00:14:06,040
Donc, si je vous demande d'écrire un tiers
ceci est probablement la façon dont vous le feriez.

226
00:14:06,040 --> 00:14:09,870
Et cela est en fait un joli raccourci

227
00:14:09,870 --> 00:14:16,310
d'écrire un tiers
et si nous ajoutons trois fois un tiers,

228
00:14:16,310 --> 00:14:22,400
qui est mathématiquement un
parce que chacun de ces un tiers

229
00:14:22,400 --> 00:14:26,050
est exactement un tiers.
Maintenant, cela semble trivial,

230
00:14:26,050 --> 00:14:31,080
mais voici le point, essayer d'exprimer
ce numéro maintenant un tiers,

231
00:14:31,990 --> 00:14:34,940
sans utiliser cette notation
de la division.

232
00:14:35,150 --> 00:14:37,780
Il suffit d'utiliser le système numérique.

233
00:14:37,960 --> 00:14:41,830
Eh bien, il se trouve que vous ne pouvez pas
réellement le faire correctement.

234
00:14:41,830 --> 00:14:46,830
Ce que vous pouvez faire
c'est que vous pouvez écrire "0,33",

235
00:14:46,830 --> 00:14:52,310
mais "0,33" plus "0.33", plus "0,33",

236
00:14:52,310 --> 00:14:56,460
est non  "1". Il est «0,99».

237
00:14:56,460 --> 00:14:58,560
Donc, vous pourriez dire: «Bon d'accord,

238
00:14:58,570 --> 00:15:03,820
laissez-moi être un peu plus précis ici
et je vais ajouter trois chiffres ici.

239
00:15:04,260 --> 00:15:06,140
Et ici et ici.

240
00:15:06,140 --> 00:15:10,670
Mais peu importe le nombre de chiffres
que vous ajoutez ici,

241
00:15:10,670 --> 00:15:15,660
il y aura toujours une erreur d'arrondi.
Et c'est tout simplement parce que nous

242
00:15:15,660 --> 00:15:21,070
n'avons pas un moyen de saisir avec précision
un tiers en utilisant cette notation

243
00:15:21,070 --> 00:15:25,150
dans le système décimal.
Et c'est essentiel pour la même raison,

244
00:15:25,150 --> 00:15:29,910
que nous ne disposons pas d'une bonne notation
pour certains numéros dans le système binaire,

245
00:15:29,910 --> 00:15:33,480
que les ordinateurs utilisent,
et c'est pourquoi vous occasionnellement

246
00:15:33,480 --> 00:15:36,050
obtient ces types d'erreurs d'arrondi.

247
00:15:36,970 --> 00:15:41,340
J'espère que vous comprenez maintenant
pourquoi nous avons cette question ici.

248
00:15:41,340 --> 00:15:45,060
C'est fondamentalement juste une erreur d'arrondi
parce qu'un ordinateur le trouve difficile

249
00:15:45,060 --> 00:15:48,020
pour exprimer ce numéro correctement

250
00:15:49,980 --> 00:15:54,720
dans cette notation en utilisant
le système binaire.

251
00:15:54,730 --> 00:15:59,500
Mais vous pouvez voir
l'erreur d'arrondi est extrêmement faible.

252
00:15:59,500 --> 00:16:01,070
Et pour toutes fins utiles,

253
00:16:01,070 --> 00:16:03,010
ce qui est généralement pas
un gros problème.

254
00:16:03,010 --> 00:16:05,450
Ces erreurs d'arrondi,
ils sont un peu laid,

255
00:16:05,450 --> 00:16:10,130
et nous nous en occuperons dans la vidéo
suivante ou l'une des prochaines vidéos.

256
00:16:10,130 --> 00:16:15,020
Mais d'un point de vue mathématique,
vous pouvez largement les ignorer.

257
00:16:15,020 --> 00:16:17,400
Si vous ajoutez de nombreux numéros
comme ça,

258
00:16:17,400 --> 00:16:20,320
alors c'est potentiellement un problème
car une erreur d'arrondi

259
00:16:20,320 --> 00:16:25,710
comme vous continuer à ajouter des erreurs d'arrondi,
ils peuvent rapidement devenir très grand,

260
00:16:25,710 --> 00:16:28,750
et donc c'est potentiellement
une source de préoccupation.

261
00:16:28,750 --> 00:16:31,140
Il faut donc toujours être sûr
de vérifier un peu à ce sujet.

262
00:16:31,140 --> 00:16:32,650
Mais, en gros,

263
00:16:32,650 --> 00:16:36,410
ce n'est pas un problème
qui jamais viendra vous mordre.

264
00:16:36,410 --> 00:16:39,200
Alors revenons au code.

265
00:16:39,200 --> 00:16:41,560
Cela fonctionne bien.

266
00:16:41,770 --> 00:16:45,280
Nous avons écrit ce code ici
qui calcule ce qui se passe dans la

267
00:16:45,280 --> 00:16:48,510
prochaine génération, nous sortant ceci,
et vous savez quoi,

268
00:16:48,510 --> 00:16:51,040
nous allons le faire
pour plusieurs générations,

269
00:16:51,040 --> 00:16:53,510
juste pour voir ce qui se passe réellement.

270
00:16:53,510 --> 00:16:56,060
Donc, je vais simplement copier
ces quatre lignes ici,

271
00:16:56,060 --> 00:17:00,220
et je vais les coller,
«génération 2», «génération 3»,

272
00:17:00,220 --> 00:17:04,080
«Génération 4», «génération 5»,
disons, et, évidemment,

273
00:17:04,080 --> 00:17:05,410
ce que nous devons faire ici c'est,

274
00:17:05,410 --> 00:17:09,630
nous avons besoin de mettre à jour
les compteurs. Alors, voici "0", "1".

275
00:17:10,690 --> 00:17:16,090
Nous avons ici "2", "3", "4" et "5"

276
00:17:16,090 --> 00:17:18,700
Nous recalculons toujours
les fréquences génotype.

277
00:17:18,700 --> 00:17:22,360
Mais bien sûr, nous savons déjà
que ceux-ci resterons constant,

278
00:17:22,375 --> 00:17:25,270
nous allons donc enregistrer cela.
Se déplacer vers le navigateur,

279
00:17:25,270 --> 00:17:28,270
recharger, et oui, en effet,

280
00:17:28,270 --> 00:17:31,830
ceux-ci bien sûr resterons constante
car nous utilisons le même

281
00:17:32,020 --> 00:17:34,250
fréquences des allèles
pour calculer ceux-ci,

282
00:17:34,250 --> 00:17:36,260
et ainsi ceux-ci devraient
toujours être le même.

283
00:17:36,260 --> 00:17:42,440
Maintenant, cela est en quelque sorte Hardy-Weinberg
parce que nous calculons maintenant

284
00:17:42,440 --> 00:17:44,350
chaque fois les fréquences des génotypes

285
00:17:44,350 --> 00:17:47,310
sur la base des fréquences des allèles
et nous voyons au début,

286
00:17:47,310 --> 00:17:49,960
ceci n'est pas dans les fréquences
de Hardy-Weinberg.

287
00:17:49,960 --> 00:17:54,190
Il y parviendra en une génération
et y restera pour toujours.

288
00:17:54,200 --> 00:17:56,110
Maintenant, si vous retournez au code,

289
00:17:56,110 --> 00:18:02,800
J'espère que vous vous etes senti un peu
étrange en me regardant copier le code,

290
00:18:02,800 --> 00:18:07,800
parce que copier-coller le code
est une pratique trés mauvaise.

291
00:18:07,800 --> 00:18:10,770
Fondamentalement, ce qui se passe ici
est que je prends un morceau de code,

292
00:18:10,770 --> 00:18:14,630
Je prends un morceau de fonctionnalité,
concrètement celui-ci,

293
00:18:14,630 --> 00:18:18,340
que je veux réutiliser,
et je le fais de façon stupide,

294
00:18:18,340 --> 00:18:23,370
Je copie le code encore et encore,
tout au long de mon fichier.

295
00:18:23,370 --> 00:18:24,890
Ce n'est pas très intelligent.

296
00:18:24,890 --> 00:18:26,750
Pourquoi pas?

297
00:18:26,750 --> 00:18:30,140
C'est pas intelligent parce que supposons
que je trouve plus tard sur,

298
00:18:30,140 --> 00:18:32,130
"Whoops, il y avait une erreur ici,

299
00:18:32,130 --> 00:18:35,040
Ceci devrait être quelque chose d'autre,
c'est pas grave.

300
00:18:35,040 --> 00:18:38,900
Il n'y a en fait aucune erreur ici.
Supposons qu'il y'en avait un.

301
00:18:38,900 --> 00:18:42,710
Eh bien maintenant, parce que j'ai copie-collé
ce code à travers mon fichier,

302
00:18:42,710 --> 00:18:47,040
Je dois y aller et trouver tous
les endroits où j'ai collé ce code

303
00:18:47,040 --> 00:18:52,410
et corriger l'erreur là. Donc, très mauvaise idée,
copier et coller le code.

304
00:18:52,410 --> 00:18:55,970
C'est particulièrement une mauvaise idée,
car effectivement JavaScript,

305
00:18:55,970 --> 00:19:00,400
comme beaucoup d'autres langages
de programmation, fournit un outil très pratique

306
00:19:01,320 --> 00:19:04,690
qui vous aide à éviter de copier-coller
le code autour

307
00:19:04,690 --> 00:19:09,090
et ceci est le principe des fonctions et dans
la vidéo suivante, nous apprendrons sur

308
00:19:09,090 --> 00:19:12,730
ce principe super important de fonctions,

309
00:19:12,730 --> 00:19:15,730
cet outil, et en particulier, bien sûr,

310
00:19:15,730 --> 00:19:18,330
comment nous les utilisons en JavaScript.

311
00:19:18,330 --> 00:19:22,620
Nous avons donc maintenant terminé
de sortir les fréquences génotypes

312
00:19:22,620 --> 00:19:25,580
depuis de nombreuses générations.
Nous avons vu que les choses fonctionnaient

313
00:19:25,580 --> 00:19:29,700
comme nous les attendions basée
sur les calculs que nous avons fait avant,

314
00:19:29,700 --> 00:19:31,790
mais il y a quelque chose de louche
avec notre code.

315
00:19:31,790 --> 00:19:34,930
Nous copiant et collant des bits
et des morceaux de code autour.

316
00:19:34,930 --> 00:19:36,520
Cela n'est pas une bonne pratique.

317
00:19:36,520 --> 00:19:41,870
Il y a un outil appelé Fonctions
et nous allons utiliser cet outil

318
00:19:41,870 --> 00:19:44,440
fortement tout au long du cours
et dans la vidéo suivante,

319
00:19:44,440 --> 00:19:46,440
Je vais vous expliquer
comment cela fonctionne.

320
00:19:46,450 --> 00:19:47,600
Donc, on se verra là bas.

