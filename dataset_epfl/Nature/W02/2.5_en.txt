Welcome back, <i>Nature, In Code</i>, we're in Chapter 2, Lecture 5.
In the previous video, you wrote your first line of JavaScript.
Congrats, if everything worked well.
So, in this video, we will now implement the <i>Hardyâ€“Weinberg principle</i> in JavaScript.
So, in order to do that, let me just recap on one slide what we learned so far and how we're going to start this.
All right, so where's what we know:
We know that we're going to need, somehow, to define the frequency of the A1 allele.
And this, actually, we're going to do with a variable that we're going to call <i>p</i>.
So <i>p</i> from now on, for the rest of this course, in fact, will denote the frequency of the A1 allele.
The frequency of the A2 allele we're going to denote with <i>q</i>.
Now, because you know that these two need to add up,
<i>q</i> simply equals <i>1 - p</i>.
And, of course, vice versa, and <i>p</i> simply equals <i>1 - q</i>.
Now, we can calculate the frequencies of the genotypes following these allele frequencies.
And we did this before with concrete numbers.
In the examples in the slides before we used 40% and 60%, but we're now going to express this more generically with these two variables.
So, the probability that we generate in A1 A1 allele, is the frequency of this A1 allele times the frequency of the A1 allele, because those are the probabilities that we picked those alleles from the infinitely-sized gamete pool, and so that's, of course, simply <i>p^2</i>.
Vice versa, I'm going to do the A2 A2 first here, and that's, of course, now simply, <i>q x q</i>, so <i>q^2</i>,
<i>q</i> being the probability that I pick an A2 allele, because <i>q</i> is the frequency of the A2 allele.
And for the A1 A2 genotype, we learned that there are two ways that we can do this:
First, we can pick an A1 allele, and then we can pick an A2 allele, so the probabilities are <i>p</i> and <i>q</i>.
Or we can do it the other way around-- so first pick an A2 allele and then pick an A1 allele.
And that's, of course, the exact same term, so the total here is <i>2 p q</i>.
And so these are the three frequencies--
<i>p^2</i>, <i>2 p q</i>, and <i>q^2</i>-- of the three genotypes.
And just like the two allele frequencies need to add up, those need to add up.
So, basically, 
<i>p^2 + 2 p q</i>
<i>+ q^2 = 1.</i>
So, this is how we'll do it, this is how we'll start the whole program, and now we're going to go over to the text editor, and we are going to implement this <i>in</i> JavaScript.
Now that we have this all figured out, let's go back here to our code.
So, we're still here in our <i>first_example.html</i> file.
We can simply reuse this and we can get rid of the "Hello World" here in the body.
We don't need this anymore.
We can also get rid of the <i>console.log
("Hello World from JavaScript")</i>.
We don't need this anymore either, so let's get rid of this.
So, now, what I'd like to do is,
I'd like to write three lines of code, where I'm actually going to initialize the genotype frequencies.
Now, I'm asking you simply to follow me-- type these three lines as well-- and then we'll walk through what they mean and how they're set up.
So the first line is going to be
<i>var a1a1 = 0.5;</i>
And then, on a new line,
I'm going to say <i>var a2a2</i>-- so the other homozygote-- equals, and this we defined as 0.35, and then, end the line with a semicolon.
And now, I'm going to write <i>var a1a2</i>, that is now the heterozygote.
Now, we know this to be 0.5, but I'm now simply, actually, going to calculate this by saying this is one minus the sum of these two numbers, and I have already stored these two numbers, so I'm simply going to say, 
<i>a1a1 + a2a2</i>.
Now, I'm going to close it, semicolon.
So, now, a couple of interesting things are happening here, and I want you to understand those because they're pretty basic, and it's important that we get the basics sorted out, of course.
So, the first thing that you note here, is this <i>var</i>.
<i>var</i> is a keyword in JavaScript and it simply means:
You're now defining a variable.
So, we'll use this quite heavily.
Then, you're actually giving this variable a name.
Here, in this case, we're giving it the name <i>a1a1</i>.
Now, you can be pretty liberal with giving variables names.
There's a few rules.
The first rule is: You're not allowed to use any keyword in JavaScript, such as, for example, <i>var</i>.
There are a few.
As we'll go through the course, you'll learn many, many of those and should you ever get into the situation where you use a keyword as a variable, you'll notice, probably, fairly quickly.
So, this is probably a mistake you won't really make.
In general, as a general rule, try to give variables meaningful names, and then it's very unlikely that you'll ever get in conflict with this rule.
So, the second consideration is that you cannot start it with a number, so that's an important rule.
In fact, the actual rule is that:
It can start with a dollar sign, and underscore, or any letter.
But for practical purposes, simply start with a letter and you'll be fine.
So here this is a perfectly legal name, it starts with a letter and then it has numbers and letters, so <i>a1a1</i>, that's fine.
Or, of course, <i>a2a2</i>, <i>a1a2</i>, just as fine.
Now, this is, actually, the most irrelevant part here, and this is a source of confusion, especially, by people who have never coded before, so this is, obviously, the equals sign.
But, it's important not to think of this term now, here, of this expression, as an equation.
This is, in fact, the <i>assignment operator</i> because it assigns values to variables.
Not just in JavaScript, but, actually, in many programming languages.
And, the way to think about this is that, here, on the right-hand side, you have this number.
This is now going to get assigned to this variable <i>a1a1</i>.
So, <i>a1a1</i> here is like a <i>container</i>, and it can contain many things.
In this particular line, we're assigning a number to this <i>container</i>.
And so that's really important to understand, that this is not, in fact, a mathematical equation, it's simply an <i>assignment</i>.
And the reason why this is important is because, otherwise, it could get confusing down the line.
So, we're doing the same, actually, down here.
We're, again, initializing a variable.
We're naming it <i>a2a2</i>, and then we're assigning the value 0.35 to this variable.
And then, here, on the third line, we're doing something slightly different.
We're, again, creating a variable, we're naming it <i>a1a2</i>, and we're, again, assigning it a value, but we're not simply typing the value, we're actually letting JavaScript calculate the value using minus and plus, and these parentheses-- you can use just like you would use them in math-- to simply group things together.
And so the way to read this when you see this equals sign is that, first, the right-hand side of the equals sign gets interpreted, gets executed, gets calculated, and then the result of that gets stored into whatever is here, or assigned, on the left-hand side.
So in this case we simply add these two numbers together that are currently stored here, in these two variables, and then we subtract that sum from one.
And, this is another important thing here:
Statements end, in JavaScript, with the semicolon.
Okay, so, always terminate your lines, when it's a statement, with a semicolon.
Now I'm going to do something else, which is:
I would like to calculate the allele frequencies based on those genotype frequencies, and we've done this before.
And we've just seen this <i>p</i> and <i>q</i> notation, so let's assign two variables.
Let's create them first--
<i>p</i> and <i>q</i>-- and then assign values to those.
So, how do we calculate the allele frequency of A1, given those genotype frequencies?
And, of course, we've done this now, a couple of times in the previous videos.
It is simply, the frequency of the <i>a1a1</i> genotype because all the alleles of that genotype are, in fact, of type A1, plus, half of the <i>a1a2</i>.
So <i>a1a2 / 2</i>.
Divided by two because only half of the alleles in the heterozygote genotype are, in fact, A1.
And we can now do the same with <i>q</i>, but we're going to save us some time, and we're simply going to say, this is <i>1 - p</i> because we know that <i>p</i> and <i>q</i> must add up to one.
So we've got this code in place.
Let's <i>Save</i> it and let's go back to the browser, and let's take a look at what this looks like.
Here, this is still the old version:
"Hello World from JavaScript," so let's reload this, and there's nothing here.
So, why is there nothing here?
Is the code not working?
Is it not executing?
Well, it is probably working because if there were some error-- some syntax error or something like that-- the console would actually show you an error here.
So, this indicates, or at least suggests, that the code is probably working, so, why is it not outputting anything?
Well, let's go back to our code, and, of course, we'll notice here, well, we're not actually instructing
JavaScript to output anything.
And this is just the general rule, of course, that's true in every programming language:
You need to instruct the language to do something, otherwise, things will not just simply happen automatically.
So, we're assigning these values by <i>direct assignment</i> or by <i>indirect assignment</i> through calculation, as we do down here.
And here, this all works correctly, but we're not actually outputting the values here.
So, we'll do this in the next video.
In this video, it was just important to me that you get this notation down:
How we assign values to variables that we initiate.
And then, here, you can see, you can use some basic math, pretty simple: plus, divided by, minus, and you could use the asterisks to do multiplication.
So, those are some pretty elementary 
JavaScript elements.
So, in the next video we'll output these values, and then we'll calculate the genotype frequencies, in the next generation, so I'll see you there.
