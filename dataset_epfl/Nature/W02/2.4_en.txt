Welcome back. <i>Nature, in Code</i>. 
We're in Chapter 2, Lecture 4, and in this video, we'll finally get coding.
So, just to recap, why is it that we're using 
JavaScript in this course?
So there's a couple of reasons.
JavaScript being very fast,
JavaScript being an easy language to learn, in my view.
But I think one of the most important aspects about JavaScript is that it runs in every browser and that's a real asset because all you need to do is you need to open up a text editor, you can start writing a JavaScript document then save that and load it up in any browser.
And, that's really powerful because it means there's nothing you need to install.
And, even more importantly, right now, there are billions, literally, billions of devices that can run your code because they come with a browser, and browsers always have JavaScript pre-installed.
And so, to me, that's a great, great asset, and that's why we're using JavaScript.
So let's get coding.
So the first thing we need to do is open up any web page of your choice.
I'm actually here in the Google Sign In page and let me just click here on About Google.
That gives us a more, sort of, average-looking web page.
It's not a sign-in form, but it has images, it has links, it has texts, and so on, your prototypical web page, here.
Now, how does this work?
What is the code behind this page, and how does the browser know what to do with it?
Well, it turns out that, every time you enter an address here, in the URL bar, and then hit <i>Enter</i>, or you actually click on a link, as I just did, then a request is being made for a particular HTML document.
And so, your browser makes this request, and eventually, a machine somewhere on the internet called a <i>server</i>, returns that document, and then your browser renders that document for you.
So let's take a look what this looks like, actually, behind the scenes.
So here, in Chrome, you can go to
<i>View &gt; Developer &gt; View Source</i>.
Now, you should have a similar menu in the browser that you may be using, if you're not using Chrome.
The alternative, is that most browsers have this functionality where you can <i>Right-Click</i> on the document, and then here, say, <i>View Page Source</i>.
But, yeah, all browsers come with that functionality built in, so in Chrome it's 
<i>View &gt; Developer &gt; View Source</i>.
And here, were actually viewing the source, an HTML source of that document.
And, if you scroll through this document, you can see a bit of a structure here.
This structure is, in fact, HTML.
<i>HTML</i> stands for Hypertext Markup Language.
Now, we're not gonna learn 
HTML in this course.
We're just gonna learn the very, very basics that we need.
The first thing to notice is that the first line here, defines that this is a document HTML.
This is not actually necessary, but it's a convention and we're gonna use it throughout the course.
And then you have, you can see these brackets here.
What are those?
Well, those are actually so-called <i>HTML tags</i>, and almost all HTML tags have the following structure:
There's a word that defines the tag.
So this, for example, is the <i>head</i> tag.
And then, many of those actually contain other tags or other type of content and then, eventually, that tag gets closed.
So the <i>head</i> tag gets closed, down here, with this forward slash.
And so, this is a typical example and you will be able to see this throughout these documents that some tags contain other tags, which contain other tags, and then, eventually, those tags get closed.
So this is a type of <i>nesting</i> that HTML allows.
Now, we won't used that heavily, but it's just generally important to know that.
Now, where is the JavaScript?
So, JavaScript is actually used quite heavily on this page, which may be surprising.
But, the most obvious use of JavaScript is down here.
And, by the way, don't get scared of this, okay?
This is very complicated JavaScript code.
I look at this code, and I frankly have no clue what this code is doing.
I could, of course, analyze it and I would eventually understand what it is, but this is extremely <i>terse</i> code.
And it's <i>terse</i> not so that it's easy to read for us, but so that it doesn't consume a lot of bandwidth.
But in any case, the point being, don't get scared away by this.
We'll write much clearer and much more beautiful code.
Not because Google couldn't do this, but because we are not actually constrained by bandwidth, at this point.
But, in any case, this is JavaScript code.
So, you'll also note that, here's a <i>script</i> tag that's opening up and then it's closing down here.
Actually, down here, you see something else.
You see a <i>script</i> tag opening and closing, but there's no JavaScript code within, but there's some reference to a file.
And that's, actually, also a JavaScript file here, that will be loaded into this document.
We'll use that technology extremely rarely.
We'll, usually, just write straight into the document, as we do here.
By the way, up here, there's a bit more JavaScript.
Here's two other files that are loaded.
And then, if we go back to the top, here's a single line of JavaScript that's written right into this document, here.
And then, we have another line, for example, here, and you'll note again, the <i>script</i> tag, and then the <i>/script</i>.
Actually, some more 
JavaScript here, again, loaded from an external file.
The point being, there's quite a bit of JavaScript all over the map here, and that's a very typical example.
So, in order to do this ourselves, we now need to write our first HTML document, and in that document, we'll write our first line of JavaScript.
Now, in order to do that, we need a text editor.
I'm using, here, a program called TextWrangler.
I quite like it. It's free.
It has a lot of functionality, but it's not too complicated to use.
But you can use any text editor that you want, whether it's free, or whether you're already using one that you bought.
It's really up to you, as long as it's easy for you to work with.
And for me, TextWrangler is very easy to work with.
Also, your particular setting may look different, you may have a white background.
I'm using this slightly darker theme here, but you can use any theme, any look that that you want.
This is really not the point.
The point is that you have a text editor that you feel comfortable working with.
If you're on a Mac, 
I recommend TextWrangler.
It's a free tool and it's pretty nice.
All right, so let's get started.
Let's write our first document and I'm gonna go with convention here, and I'm gonna start with this <i>DOCTYPE html</i>.
Whoops, I should actually write
<i>DOCTYPE</i>, not <i>SOCTYPE</i>.
Okay, <i>DOCTYPE html</i>, a line that indicates to the browser that is an HTML document.
But again, actually, the code would work without this, but I'm just gonna go with convention here, and be nice.
Good. Then, an HTML document is almost always contained by this <i>HTML</i> tag.
So I'm gonna write this <i>HTML</i> tag, and then I'm gonna close it again.
And now, within this tag here, 
I'm now gonna create my HTML page.
Another thing that's typically done is that an HTML page is programmatically structured in two parts: a <i>head</i> and a <i>body</i>.
So I'm gonna go ahead and create these two tags.
Okay, there's the <i>head</i> tag-- you may have seen this before-- and then, <i>/head</i>,
I'm gonna close this right away.
And then, the so-called <i>body</i> tag, which I'm also gonna open and close-- whoops-- slash, close, right away.
And, by the way, that's just something 
I've gotten used to over the years.
When I open a tag, I immediately close it so I don't forget it later on.
Okay, so another thing I'm gonna do now, is I'm actually gonna indent those two tags and here in TextWrangler,
I'm using the <i>Tab</i>.
You can also just use <i>Space</i>, as you wish.
And, you know, depending on your text editor a little bit.
So, what is this? Is this necessary?
No, this is not theoretically necessary.
In fact, you could have an entire HTML document on a single line, but it would be very hard to read.
And as we've seen before--
Actually, if we go back to this <i>source code</i> here, you can see that Google, itself, does this indentation, okay, and that just makes it easier.
You can, kind of, understand the level of nesting.
You can understand that this <i>div</i> class, this <i>div</i> tag, sorry, closes here and this one closes here, and this one closes here, and this one corresponds to this one.
So, it just makes things much easier to understand, visually.
But you could, in principle, have his entire HTML document on one single line, but it will be a complete nightmare to work with.
All right, let me go back to the text editor.
So, here we have the <i>head</i> and we have the <i>body</i> tag.
So what are those for?
Well, normally, in the head, you have all kinds of information about the document, like the title, maybe, what is this document about, some keywords, things like that.
It's also quite typical to put the JavaScript code in here and we'll do this quite a lot.
What's the <i>body</i> tag for?
Well, the body typically contains all those tags that are actually used to show to render content on a web page.
So the visual things, those would typically be part of the body.
And very typically, the body is actually 90%, or even more, of all your HTML code.
In our case, that's not normally what we're gonna do.
Because we're learning JavaScript here, most of our code will be JavaScript code, and they will be here, in the head.
So, I'm gonna go ahead and add a little bit of JavaScript here.
Actually, before I do that, let's add something to the body, just to be sure, okay?
So let's just write: "Hello World." and then save the document and see what this actually looks like.
So we're gonna go ahead and we're gonna save this document, and you can save this wherever you want to.
I'm gonna save this here in a folder that I prepared already, called <i>code examples</i>.
You can save it wherever you want on your machine, just remember where you saved it.
And I'm gonna call this <i>first_example</i>.
And then, be sure to end this with <i>.html</i>, or <i>.htm</i> is also an option, but I'm gonna use <i>.html</i>.
Okay. I'm gonna save it, and now, two things happened.
First of all, we saved the document, and we'll open this in a second.
The other thing that happen here, because I was using this <i>.html</i> ending for the file name,
TextWrangler automatically recognized that this is now an HTML file and it color-coded things accordingly.
So here, the way I have set this up, you can see that this first line here is coded in red, and then the proper tags are coded in kind of a gray, and then, text is in white.
Again, this may look different for you, and this is why I actually like to use a proper editor because this color syntax really helps you with code, especially when your code gets more complicated. Okay.
So, we're gonna go over to the browser and we're now gonna open this document.
So I'm gonna close all of this and just leave one open.
And I'm now gonna go to <i>Open File</i>.
And again, this maybe somewhere different depending on which browser you use, but I'm confident you'll manage to open a file in your browser.
So just find an <i>Open</i> or <i>Open File</i> somewhere in your browser.
Here in Chrome, it's right here under <i>File &gt; Open File</i>.
And then go to the <i>code examples</i>, 
<i>first_example</i> here, and then <i>Open</i> the file.
And so, what you can see here is the location on my machine where this is stored,
This will, obviously, look slightly different for you, but what you should see here is this Hello World.
And again, it may look a little bit different depending on your browser settings, but you should see nothing else other than this Hello World.
So, if that worked, then congratulations.
You now, basically, created your first HTML file.
So let's go back to that file.
All right. Here we are, back to that file.
Okay, so this works.
Now, what we're gonna do is, we're gonna do something slightly different, and we'll get to the point, which is writing JavaScript code.
So, I'm gonna add a <i>script</i> tag here.
And again, because the <i>script</i> tag is nested within the <i>head</i> tag,
I am indenting it a little bit.
You don't have to, but I find it more visually pleasing.
All right. So now, I'm actually gonna write JavaScript.
So, if you're at this stage, please follow me in typing the following:
<i>console.log</i> open parentheses double quotes
Hello World from JavaScript.
Okay.
Double quotes again, closing of parentheses, and then semicolon.
And again, don't worry.
We'll walk through this line and many other lines and you'll understand exactly what's what, shortly.
For now, just write this line:
<i>console.log</i> opening parentheses, and then in quotes,
Hello World from JavaScript, then close the parentheses, and a semicolon at the end of the line.
If you've done that, save your file.
Again, just go to <i>File &gt; Save</i>.
Or, you can also use a keyboard shortcut, which I'm actually gonna do from now on.
Okay, I'm just gonna say,
I'm gonna save the file, and then you can trust me that I actually saved the file.
All right. Now, let's go over to the browser.
This document here is still open.
That's great.
So now what we can do is reload the document.
There's many ways to do this.
You can either click on this <i>Reload Arrow</i> here, and again, this may look differently depending on which browser you're using.
You can go to <i>File</i>--
I think it is <i>File</i>-- and then...
Is it <i>View</i>? <i>Reload</i>. 
It's under <i>View &gt; Reload This Page</i>.
And you can tell from my uncertainty that I never do it like this because there's, in fact, a really handy shortcut that I think is the same in every browser, which is <i>Command+R</i>.
And again, when I say, okay, I gonna reload the page,
I'm not gonna go through the menu here,
I'm just gonna actually reload it with the shortcut.
Okay, so I reloaded the document and I'm reloading this a couple of times here, but nothing seems to be happening.
Why is that?
Well, if we go back to the code, what we'll actually see here is that-- what's happening here is I'm--
This is a <i>string</i>, okay, a set of characters, and I'm logging this, or outputting it, into the so-called console.
Okay?
And, what you see here, over in the browser. this whole thing here, the browser window, that's not the console.
The console is actually hidden, and you would need to go to
<i>View</i> &gt; Developer &gt; JavaScript Console*, in Chrome.
Again, in your browser, this will look slightly differently if you're not using Chrome.
And, it's probably in a similar setting somewhere in the menu, in <i>View</i>.
You can also search the internet if you're not sure, but I'm confident you'll find it.
If you're on Chrome, it's <i>View &gt; Developer &gt; JavaScript Console</i>.
Now, if I click on this, what happens is over here, the console opened.
You can see here, it says <i>Console</i> and it's underlined, so we're in the console.
And indeed, here is our text that we logged, or that we outputted into the console, which is called 
Hello World from JavaScript.
So, indeed, this worked.
Now, if you, in your browser, see this line in the console, then congratulations.
What you just did is to write your first line of JavaScript code.
So again, congrats to this achievement.
You saved and created an HTML document with some JavaScript embedded in the HTML document.
And then, if everything worked, you should have seen this line:
Hello World from JavaScript.
If you managed to do that, great.
There's now nothing in the way between you and JavaScript.
And in the next video, we'll use this type of programming to implement what we learned in the earlier videos of this chapter, which is to implement the Hardy-Weinberg principle, in JavaScript
I'll see you in the next video.
