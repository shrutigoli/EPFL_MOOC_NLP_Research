1
00:00:03,860 --> 00:00:07,150
Welcome back, Nature in code 
We're in Chapter 2 lecture 7

2
00:00:07,170 --> 00:00:10,050
In the previous video,
we started copy/pasting

3
00:00:10,050 --> 00:00:11,400
around a lot of code.

4
00:00:11,400 --> 00:00:12,900
That's not a good idea.

5
00:00:12,900 --> 00:00:17,210
So, this video, We'll learn about 
the concept called a function.

6
00:00:17,210 --> 00:00:23,580
And the function is a really wonderful
you know, tool to be used in JavaScript

7
00:00:23,580 --> 00:00:28,870
And among many other things, it allows you
to not have to copy/paste a lot of code

8
00:00:28,870 --> 00:00:30,730
So let's take a look at how this works.

9
00:00:30,730 --> 00:00:34,860
So here we're back at our code
and we see all this you know

10
00:00:34,860 --> 00:00:37,020
copy/pasted code here lying around,

11
00:00:37,020 --> 00:00:40,580
and you know that's
problematic for many reasons.

12
00:00:40,580 --> 00:00:44,350
Including the fact that 
if you make a mistake somewhere

13
00:00:44,350 --> 00:00:46,640
and you start copy/pasting 
that code around

14
00:00:46,640 --> 00:00:49,830
It'll be very hard to 
trace that error.

15
00:00:49,830 --> 00:00:53,690
So, let's use the concept of a function.

16
00:00:53,690 --> 00:00:55,240
So what is a function a function?

17
00:00:55,240 --> 00:00:58,020
A function, basically helps
you to encapsulate a bit of code.

18
00:00:58,020 --> 00:01:03,220
And in our case, that bit of code,
for example, could be this code here

19
00:01:03,220 --> 00:01:06,580
Right, because we're copy/pasting 
this piece of code over and over again

20
00:01:06,580 --> 00:01:08,760
it does the exact same thing.

21
00:01:08,760 --> 00:01:11,730
So how do we do this?

22
00:01:11,730 --> 00:01:16,750
So, let's just simply implement it
and then thereby learn how we do this.

23
00:01:16,750 --> 00:01:20,260
So you can define a function
with the keyword function

24
00:01:20,260 --> 00:01:24,930
and as you can see this is indeed a 
keyword, text Wrangler is nice

25
00:01:24,930 --> 00:01:27,470
and highlights that automatically.

26
00:01:27,470 --> 00:01:30,030
Indicating this a special word.

27
00:01:30,030 --> 00:01:35,340
So, function is the keyword and then 
you have to name the function.

28
00:01:35,340 --> 00:01:41,280
Now I'm gonna name it,
Create_next_generation

29
00:01:42,930 --> 00:01:47,050
Again, try to be liberal in 
how you name functions.

30
00:01:47,050 --> 00:01:52,540
Just in the same way as you 
should name variables.

31
00:01:53,580 --> 00:01:57,740
It's basically, you know sometimes, 
where we were tempted to be lazy

32
00:01:57,740 --> 00:02:00,950
and give those functions or 
variables very short names

33
00:02:00,950 --> 00:02:07,120
because at the moment as we code,
it's very clear what these functions do

34
00:02:07,120 --> 00:02:09,000
but you know your future self,

35
00:02:09,000 --> 00:02:14,780
may not be recalling every detail 
and also your your colleagues

36
00:02:14,780 --> 00:02:18,930
who will work with your code
will be quite glad that you give

37
00:02:18,930 --> 00:02:21,230
functions proper names.

38
00:02:21,230 --> 00:02:24,590
So like in variables,
give functions names

39
00:02:24,590 --> 00:02:25,590
that mean something useful.

40
00:02:25,590 --> 00:02:32,060
And in particular with the function,
give it the name that encapsulates

41
00:02:32,060 --> 00:02:34,720
that represents what the function does.

42
00:02:34,720 --> 00:02:37,590
So here, we simply create
the next generation.

43
00:02:37,590 --> 00:02:40,270
So that seems like like an okay name.

44
00:02:40,270 --> 00:02:41,390
All right.

45
00:02:41,390 --> 00:02:44,000
Something else every function 
needs other than a name

46
00:02:44,000 --> 00:02:46,140
is this set of parenthesis, okay.

47
00:02:46,140 --> 00:02:51,740
In these parenthesis,
we would usually pass values.

48
00:02:51,740 --> 00:02:55,840
Here's a good example, log is a function.

49
00:02:55,840 --> 00:02:58,560
It has these parentheses.
That's how you can tell.

50
00:02:58,560 --> 00:03:05,590
Now this particular function can take
any number of parameters.

51
00:03:05,590 --> 00:03:08,910
In this in this respect, 
it is a little bit special.

52
00:03:08,910 --> 00:03:13,820
But the point is that here
we're passing in four arguments

53
00:03:13,820 --> 00:03:17,080
and these are comma separated.

54
00:03:17,090 --> 00:03:18,130
So,by the way,

55
00:03:18,130 --> 00:03:21,220
Just to get the language down 
when we define a function,

56
00:03:21,220 --> 00:03:23,350
whatever it is here in the...

57
00:03:23,350 --> 00:03:26,980
whatever we have here in 
the parenthesis,we call those parameters.

58
00:03:26,980 --> 00:03:29,700
Once we start using the function,

59
00:03:29,700 --> 00:03:34,140
and we start passing values along 
we call them arguments,

60
00:03:34,140 --> 00:03:35,490
but that's really a detail,

61
00:03:35,490 --> 00:03:38,430
so, here you would have 
your comma separated

62
00:03:38,430 --> 00:03:40,650
list of parameters

63
00:03:40,650 --> 00:03:42,780
and I will talk about 
this in great detail

64
00:03:42,780 --> 00:03:44,220
throughout the course,

65
00:03:44,220 --> 00:03:49,590
but here in this particular example
I actually don't want parameters.

66
00:03:50,820 --> 00:03:52,770
So I'm just gonna leave as empty.

67
00:03:52,770 --> 00:03:56,280
I still need the parentheses,okay.
Every function has parentheses.

68
00:03:56,280 --> 00:03:58,910
But in this case,
we have no parameters in there

69
00:03:58,910 --> 00:04:01,860
and then I'm got to 
use these curly brackets

70
00:04:01,860 --> 00:04:05,500
Okay, curly brackets.
These curly brackets

71
00:04:05,500 --> 00:04:09,130
will now actually enclose
to function body.

72
00:04:09,140 --> 00:04:11,910
So the function body 
is the thing, the code

73
00:04:11,910 --> 00:04:16,450
that should get executed 
once a function is called

74
00:04:16,450 --> 00:04:19,710
So I'm just gonna take these 
3 lines here in a cut them

75
00:04:19,710 --> 00:04:22,220
and I'm gonna copy/paste them over here.

76
00:04:22,220 --> 00:04:26,770
Also copy/pasting but a 
different kind of copy/pasting.

77
00:04:26,770 --> 00:04:28,580
Actually cutting and pasting.

78
00:04:28,580 --> 00:04:32,200
So, this now is the function body.

79
00:04:32,200 --> 00:04:35,340
It's indented here 
just for visual aesthetics.

80
00:04:35,340 --> 00:04:38,070
So that I can quickly see
okay, this is the function body

81
00:04:38,070 --> 00:04:40,540
and it's encapsulated here 
in these curly brackets.

82
00:04:40,540 --> 00:04:42,220
So these are important.

83
00:04:42,220 --> 00:04:46,250
So now I have a function,
it has a name, it takes no parameter.

84
00:04:46,250 --> 00:04:47,230
That's fine.

85
00:04:47,230 --> 00:04:51,590
And here's the code that should be 
executed whenever I call this function.

86
00:04:51,590 --> 00:04:54,260
So what is a mean to call a function?

87
00:04:54,260 --> 00:04:58,520
So it's important to note that 
when he find the function here

88
00:04:58,520 --> 00:05:00,940
this code will not get executed.

89
00:05:00,940 --> 00:05:02,470
Okay.

90
00:05:02,470 --> 00:05:04,940
It's just now defining the function,

91
00:05:04,940 --> 00:05:07,510
what it should do once it gets called.

92
00:05:07,510 --> 00:05:11,300
But now you first have to
call the function.

93
00:05:11,300 --> 00:05:13,430
So that this code gets executed.

94
00:05:13,430 --> 00:05:18,900
And we're simply calling the function
by basically calling it's name.

95
00:05:18,900 --> 00:05:24,260
Okay, So create next 
generation parentheses.

96
00:05:24,260 --> 00:05:26,820
Again, we always need these
parenthesis with functions

97
00:05:26,820 --> 00:05:31,440
but as I have no parameters here, 
I don't have to pass any arguments.

98
00:05:31,440 --> 00:05:32,810
So this is empty as well.

99
00:05:32,810 --> 00:05:37,140
I can simply say create next generation
that's the end of my statement.

100
00:05:37,140 --> 00:05:39,770
So I'm gonna just terminate
this would a semi colon.

101
00:05:39,770 --> 00:05:44,460
Create next generation 
now this code will be executed.

102
00:05:44,460 --> 00:05:47,660
And then I have the console lock here.

103
00:05:47,660 --> 00:05:49,390
That's great.

104
00:05:49,390 --> 00:05:50,340
And so,

105
00:05:50,340 --> 00:05:54,330
you know that works that works fine.

106
00:05:54,330 --> 00:05:56,520
Now I can get rid of 
all of this code here.

107
00:05:56,520 --> 00:05:58,600
so I don't need this.

108
00:05:58,600 --> 00:06:02,330
I'm simply going to replace this 
now with this function call.

109
00:06:02,330 --> 00:06:03,440
So, I don't need this.

110
00:06:03,440 --> 00:06:06,120
Just replace it and 
create next generation.

111
00:06:06,120 --> 00:06:07,120
I don't need this.

112
00:06:07,120 --> 00:06:09,590
Just replace it with 
create next generation.

113
00:06:09,590 --> 00:06:12,110
Same here.

114
00:06:12,110 --> 00:06:17,520
Same here and now this looks 
much much cleaner.

115
00:06:17,520 --> 00:06:22,010
So this code is now not copy/pasted 
throughout the document

116
00:06:22,010 --> 00:06:26,900
it simply exist once if I ever decide
if I need to change something here.

117
00:06:26,900 --> 00:06:30,900
I can just go and change it 
in the definition of the function.

118
00:06:30,900 --> 00:06:35,330
Now, to actually make sure 
that what we did here works

119
00:06:35,330 --> 00:06:37,110
let's save the document.

120
00:06:37,110 --> 00:06:40,940
Let's go over to the 
browser and let's reload this

121
00:06:40,940 --> 00:06:44,150
and if everything worked,
yes it did nothing should change

122
00:06:44,150 --> 00:06:46,780
because we simply restructured the code.

123
00:06:46,780 --> 00:06:48,390
It doesn't do anything else,

124
00:06:48,390 --> 00:06:50,860
it simply written in a nicer way.

125
00:06:50,860 --> 00:06:53,030
By the way,
if we go back to the code,

126
00:06:53,030 --> 00:06:58,990
That's something you'll find quite often.
a coding being able to code is not just,

127
00:06:58,990 --> 00:07:03,430
to make the computer do 
whatever it is you wanted to do.

128
00:07:03,430 --> 00:07:06,690
I mean, that's obviously 
a key point about coding

129
00:07:06,690 --> 00:07:10,140
but code can very quickly
become very complex

130
00:07:10,140 --> 00:07:16,080
and I've said this a couple of times 
and I'll keep saying it,

131
00:07:16,080 --> 00:07:24,030
your future self will really be quite 
happy if you write clean and clear code.

132
00:07:24,030 --> 00:07:27,950
and so this is a good example now.

133
00:07:27,950 --> 00:07:30,750
This code is much cleaner 
than the previous one.

134
00:07:30,750 --> 00:07:32,630
Not because it's shorter,

135
00:07:32,630 --> 00:07:37,870
but because it's actually more 
compact and it's you know this

136
00:07:37,870 --> 00:07:42,110
functionality here is nicely 
encapsulated in a function.

137
00:07:42,110 --> 00:07:46,820
There's a principle called D-R-Y 
"dry" don't repeat yourself

138
00:07:46,820 --> 00:07:53,680
We've done this here exactly.
We've encapsulated this code in a function

139
00:07:53,680 --> 00:07:57,750
And then we simply called the 
function name multiple times.

140
00:07:57,750 --> 00:08:01,700
So this is quite good now.

141
00:08:01,700 --> 00:08:03,600
It's not perfect yet

142
00:08:03,600 --> 00:08:08,450
because as you can see 
there's a little bit of an issue here.

143
00:08:08,450 --> 00:08:13,840
Yes,we have encapsulated 
this functionality into a function,

144
00:08:13,840 --> 00:08:20,440
and we can reuse this now many times 
but we still have copied code around,

145
00:08:20,450 --> 00:08:23,890
I mean now basically just
copied the the function name.

146
00:08:23,890 --> 00:08:29,080
Of course in the works,
but what if I want to print.

147
00:08:29,080 --> 00:08:34,540
Now the next generation ,not just 5 times
but actually 50 times 500 times,

148
00:08:34,540 --> 00:08:36,410
a million times.

149
00:08:36,410 --> 00:08:42,430
Obviously I can't just take these 2 lines
of code and copy them over and over again

150
00:08:42,430 --> 00:08:48,180
And and just defining a new function here
you know wouldn't do the trick either.

151
00:08:48,180 --> 00:08:52,300
Now it turns out there is another's 
super powerful concept that's

152
00:08:52,300 --> 00:08:53,890
called iteration,

153
00:08:53,890 --> 00:08:56,990
will you said in the next video 
to deal with this issue.

154
00:08:56,990 --> 00:09:00,630
So in this video, we just learned 
about the concept of a function

155
00:09:00,630 --> 00:09:04,460
We'll use functions 
throughout this course.

156
00:09:04,460 --> 00:09:09,020
If you take a look at random pages 
on the internet that used Javascript

157
00:09:09,020 --> 00:09:15,280
you'll find many many functions.
Functions are a key concept JavaScript.

158
00:09:15,280 --> 00:09:18,030
and in this video we 
started exploring them.

159
00:09:18,030 --> 00:09:21,450
In the next video we'll 
explore another super important

160
00:09:21,450 --> 00:09:23,060
concept in JavaScript

161
00:09:23,060 --> 00:09:26,670
or programing in general 
that concept is iteration,

162
00:09:26,670 --> 00:09:29,370
and it'll be the content 
of the next video.

163
00:09:29,370 --> 00:09:31,230
I'll see you in the next video.
