1
00:00:03,209 --> 00:00:04,836
Bienvenue : La Nature, dans le code.

2
00:00:04,836 --> 00:00:06,475
Nous sommes dans le chapitre 6, leçon 7.

3
00:00:06,475 --> 00:00:08,597
Ceci est la dernière leçon de ce chapitre

4
00:00:09,234 --> 00:00:14,258
Dans cette dernière leçon,
je voudrais parler d'un concept très important,

5
00:00:14,258 --> 00:00:16,120
à savoir celle de la portée variable.

6
00:00:16,728 --> 00:00:19,213
La portée variable est rarement parlé

7
00:00:19,213 --> 00:00:21,041
mais je veux mentionner ici brièvement

8
00:00:21,041 --> 00:00:23,890
car il est potentiellement
la source de nombreuses erreurs

9
00:00:23,890 --> 00:00:26,547
et je voudrais vous éviter toutes
ces erreurs,

10
00:00:26,547 --> 00:00:28,988
et il y a une astuce simple
comment faire cela.

11
00:00:28,988 --> 00:00:30,743
<I> (maître de conférences) Donc
nous sommes de retour dans notre code. </ I>

12
00:00:30,743 --> 00:00:32,361
<I> Jetons un coup d'oeil à cette fonction ici. </ I>

13
00:00:32,361 --> 00:00:34,368
<I> Fonction create_next_generation </ i>

14
00:00:34,368 --> 00:00:38,369
<I> Nous sommes maintenant très familier
avec cette fonction et ce qu'il fait. </ I>

15
00:00:38,371 --> 00:00:41,793
<I> Il calcule tout simplement
les nouvelles fréquences de génotype </ i>

16
00:00:41,793 --> 00:00:44,793
<I> sur la base de la fréquence
des allèles existants. </ I>

17
00:00:44,793 --> 00:00:49,304
<I> Et nous utilisons les variables
p et q et A1A1 et ainsi de suite </ i>

18
00:00:49,304 --> 00:00:51,159
<I> que nous avons défini ici. </ I>

19
00:00:52,003 --> 00:00:54,230
<I> Et cela se sent tout
à fait naturel, non? </ I>

20
00:00:54,233 --> 00:00:57,321
<I> Je veux dire que nous allons définir
des variables ici en dehors de la fonction </ i>

21
00:00:57,325 --> 00:01:00,592
<I> et ensuite nous utilisons ces variables
à l'intérieur de la fonction. </ I>

22
00:01:01,371 --> 00:01:04,355
<I> Maintenant, la raison pour
laquelle nous pouvons le faire, </ i>

23
00:01:04,355 --> 00:01:07,356
<I> la raison pour laquelle nous
pouvons accéder à ces variables ici </ i>

24
00:01:07,356 --> 00:01:09,636
<I> ou en fait de partout dans notre code </ i>

25
00:01:09,636 --> 00:01:15,347
<I> est parce que ces variables ici,
définies en dehors des fonctions, </ i>

26
00:01:15,347 --> 00:01:17,542
<I> ils sont dans la portée globale. </ I>

27
00:01:18,272 --> 00:01:23,661
<I> Et cela signifie simplement qu'ils peuvent
être accessibles de partout dans votre code. </ I>

28
00:01:23,661 --> 00:01:27,691
<I> Maintenant, qui vient
souvent assez pratique. </ I>

29
00:01:27,691 --> 00:01:32,060
<I> Maintenant, si vous voulez parler à des
développeurs très expérimenté de JavaScript, </ i>

30
00:01:32,060 --> 00:01:36,261
<I> ils vous dirais que la portée globale
est en fait une chose dangereuse </ i>

31
00:01:36,261 --> 00:01:41,962
<I> parce que cela signifie que les variables
sont désormais accessibles et aussi écrasées </ i>

32
00:01:41,962 --> 00:01:43,963
<I> de partout dans le code. </ I>

33
00:01:43,963 --> 00:01:45,618
<I> Et si vous avez à maintenir
de grands projets JavaScript, </ i>

34
00:01:45,618 --> 00:01:49,342
<I> qui peut être tout à fait un problème. </ I>

35
00:01:49,528 --> 00:01:54,617
<I> Et cela est vrai, mais ici,
dans le cadre de ce cours, </ i>

36
00:01:54,617 --> 00:02:00,739
<I> nos programmes, nos extraits de
code sera souvent ou toujours en fait, </ i>

37
00:02:00,739 --> 00:02:02,143
<I> totalement autonome. </ I>

38
00:02:02,143 --> 00:02:05,354
<I> Ainsi, la portée globale n'est
pas une chose dangereuse ici, </ i>

39
00:02:05,355 --> 00:02:09,047
<I> mais il peut être si
le projet devient très grand. </ I>

40
00:02:09,749 --> 00:02:11,762
<I> La plupart du temps cependant,
il est tout à fait à portée de main, </ i>

41
00:02:11,772 --> 00:02:15,962
<I> certainement pour nous, de définir
des variables ici en dehors des fonctions </ i>

42
00:02:15,967 --> 00:02:20,131
<I> de sorte qu'ils sont dans la portée globale
et ils peuvent être accessible partout. </ I>

43
00:02:20,566 --> 00:02:23,447
<I> Maintenant, le fait qu'il
y ait une portée globale </ i>

44
00:02:23,452 --> 00:02:25,790
<I> bien sûr indique qu'il ya autre chose </ i>

45
00:02:25,790 --> 00:02:28,053
<I> et en effet il est, il y a
en fait une portée locale. </ I>

46
00:02:28,053 --> 00:02:29,959
<I> Alors, quelle est une portée locale? </ I>

47
00:02:29,959 --> 00:02:32,345
<I> Eh bien, nous allons regarder
la fonction ici. </ I>

48
00:02:32,682 --> 00:02:35,510
<I> Cette variable ici,
également défini avec le mot-clé </ i> 'var',

49
00:02:35,908 --> 00:02:38,296
<I> est défini à l'intérieur
de cette fonction. </ I>

50
00:02:39,321 --> 00:02:44,075
<I> En conséquence, il est dans
la portée locale de cette fonction. </ I>

51
00:02:44,330 --> 00:02:50,791
<I> Cela signifie que nous pouvons
bien sûr l'acceder dans la fonction, </ i>

52
00:02:50,791 --> 00:02:53,582
<I> mais nous ne pouvons pas
y accéder ailleurs. </ I>

53
00:02:54,165 --> 00:02:59,292
<I> Il est seulement locale à la fonction, il est
uniquement disponible à la fonction. </ I>

54
00:02:59,292 --> 00:03:01,034
<I> Et c'est bien sûr
comment il devrait être. </ I>

55
00:03:01,034 --> 00:03:04,743
<I> Plusieurs fois on définit les variables
à l'intérieur des fonctions, </ i>

56
00:03:04,743 --> 00:03:07,242
<I> qui nous aident à faire
un travail particulier, </ i>

57
00:03:07,244 --> 00:03:11,269
<I> le travail que cette fonction
particulière est conçu pour faire. </ I>

58
00:03:11,269 --> 00:03:15,516
<I> Et puis une fois que nous sommes en dehors
de la fonction, une fois que nous laissons la fonction, </ i>

59
00:03:15,516 --> 00:03:17,515
<I> nous voulons oublier ces variables </ i>

60
00:03:17,515 --> 00:03:21,434
<I> et nous ne voulons certainement pas que
quelqu'un d'autre joue avec ces variables. </ I>

61
00:03:21,434 --> 00:03:26,898
<I> il est donc généralement assez pratique
d'avoir des variables qui sont locales </ i>

62
00:03:28,642 --> 00:03:29,902
<I> pour les fonctions. </ I>

63
00:03:29,920 --> 00:03:32,818
<I> Et la plupart du temps, en fait,
quand nous allons écrire des fonctions, </ i>

64
00:03:32,818 --> 00:03:36,142
<I> nous allons utiliser
des variables locales </ i>

65
00:03:36,142 --> 00:03:37,338
<I> mais pas toujours. </ I>

66
00:03:37,348 --> 00:03:39,637
<I> Mais, en tout cas,
c'est la portée locale. </ I>

67
00:03:39,637 --> 00:03:42,250
<I> Alors, espère que
vous comprenez maintenant. </ I>

68
00:03:42,252 --> 00:03:45,473
<I> Si vous définissez les choses
en dehors des fonctions ici, </ i>

69
00:03:45,473 --> 00:03:48,241
<I> puis ils sont dans la portée globale,
accessible de partout. </ I>

70
00:03:48,255 --> 00:03:52,213
<I> Si vous les définissez
dans la fonction ici, </ i>

71
00:03:52,213 --> 00:03:54,108
<I> puis ils sont locaux - </ i>

72
00:03:54,108 --> 00:03:55,979
<I> accessible uniquement à la fonction. </ I>

73
00:03:55,979 --> 00:03:58,523
<I> Ainsi, vous pouvez vous demander,
d'accord, c'est assez simple, </ i>

74
00:03:58,523 --> 00:03:59,824
<I> où est le piège? </ I>

75
00:03:59,824 --> 00:04:01,016
<I> Voici les captures. </ I>

76
00:04:01,016 --> 00:04:03,822
<I> Il se trouve que vous pouvez
définir des variables </ i>

77
00:04:03,822 --> 00:04:05,489
<I> sans le mot clé </ i> 'var'.

78
00:04:05,829 --> 00:04:08,686
<I> vous pouvez simplement laisser
ce </ i> 'var' <i> de suite. </ I>

79
00:04:09,296 --> 00:04:13,946
<I> Maintenant, ne vous n'avez pas entendu cela
de moi, parce que c'est une très mauvaise pratique </ i>

80
00:04:13,961 --> 00:04:19,621
<I> et il conduit à un problème
très subtile mais difficile. </ I>

81
00:04:19,621 --> 00:04:21,919
<I> Et comme une suite,
si vous voulez réellement </ i>

82
00:04:21,919 --> 00:04:26,198
<I> laisse </ i> 'var' <i> loin
dans la déclaration d'une variable </ i>

83
00:04:26,198 --> 00:04:27,861
<I> à l'intérieur d'une fonction, </ i>

84
00:04:28,825 --> 00:04:33,795
<I> confusion, cette variable fera
maintenant dans la portée globale. </ I>

85
00:04:34,371 --> 00:04:37,551
<I> Même si vous l'avez
défini dans la fonction. </ I>

86
00:04:38,437 --> 00:04:43,674
<I> Et donc, cela mène à toutes
sortes de mal à traquer les bugs. </ I>

87
00:04:43,674 --> 00:04:48,275
<I> Donc, il y a une règle très
simple comment éviter ceci </ i>

88
00:04:48,275 --> 00:04:53,534
<I> qui est toujours utiliser le mot-clé </ i> 'var' <i>
lorsque vous déclarez des variables. </ I>

89
00:04:53,534 --> 00:04:57,299
<I> Que ce soit des fonctions à l'extérieur ou
à l'intérieur d'une fonction, ce n'est pas d'importance, </ i>

90
00:04:57,306 --> 00:04:59,963
<I> toujours utiliser le mot-clé </ i> 'var'.

91
00:04:59,963 --> 00:05:06,101
<I> Maintenant, laissez-moi vous montrer comment cela
fonctionne et comment subtile ces erreurs pourrait être. </ I>

92
00:05:07,118 --> 00:05:09,232
<I> Permettez-moi tout simplement
de prendre ce fichier ici, ce code, </ i>

93
00:05:09,232 --> 00:05:14,168
<I> Je vais juste sélectionner
l'intégralité du code ici </ i>

94
00:05:14,168 --> 00:05:18,451
<I> et copiez-le et puis je vais créer
un nouveau fichier, d'accord? </ I>

95
00:05:18,451 --> 00:05:21,151
<I> Nouveau & gt; Document texte </ i>

96
00:05:21,151 --> 00:05:23,622
<I> et je vais coller ce code ici </ i>

97
00:05:23,622 --> 00:05:29,052
<I> et maintenant
je vais supprimer ce code ici. </ I>

98
00:05:29,672 --> 00:05:33,171
<I> Bon, alors maintenant nous avons
un fichier vide JavaScript. </ I>

99
00:05:33,672 --> 00:05:40,524
<I> Alors, ce que je vais faire ici est que
je vais déclarer une fonction, </ i>

100
00:05:40,560 --> 00:05:44,853
<I> test1 de fonction </ i>

101
00:05:49,703 --> 00:05:53,356
<I> Et ce que je vais faire ici est quelque
chose, vous savez, c'est mauvais </ i>

102
00:05:53,356 --> 00:05:56,494
<I> et que vous ne devriez pas faire, mais je vais
le faire quand même comme une démo. </ I>

103
00:05:56,504 --> 00:06:00,566
<I> Je vais déclarer une variable
sans le </ i> 'var' <i> mot-clé. </ I>

104
00:06:00,566 --> 00:06:05,653
<I> OK, donc </ i> foo = 4 <i>,
puis virgule. </ I>

105
00:06:06,484 --> 00:06:11,585
<I> Maintenant, je vais déclarer
une seconde fonction </ i>

106
00:06:11,585 --> 00:06:13,635
<I> que je vais nom </ i> test2.

107
00:06:14,584 --> 00:06:21,088
<I> Et ce que fait cette fonction est
l'impression de la valeur de la variable </ i> foo

108
00:06:21,088 --> 00:06:25,456
<I> dans la console. Donc,
je vais dire </ i> console.log (foo) ;.

109
00:06:26,257 --> 00:06:29,179
<I> Maintenant, ces deux fonctions
sont assez simples</ i>

110
00:06:29,179 --> 00:06:30,906
<I> et ils ne prennent pas </ i>

111
00:06:31,346 --> 00:06:34,476
<I> nous n'allons pas
définir tous les paramètres ici. </ I>

112
00:06:34,476 --> 00:06:39,957
<I> Maintenant, tout simplement comme ça,
je n'aurai pas avoir bien sûr des problèmes </ i>

113
00:06:39,957 --> 00:06:42,661
<I> parce que ce code ne fait pas exécuter </ i>

114
00:06:42,661 --> 00:06:45,528
<I> nous definissons simplement de fonctions,
nous les appelons pas encore. </ I>

115
00:06:45,528 --> 00:06:51,081
<I> Alors, appelons ces fonctions.
Appelons premierement cette fonction </ i> test1

116
00:06:52,203 --> 00:06:55,864
<I> et puis nous allons appeler
l'autre fonction </ i> test2.

117
00:06:56,713 --> 00:06:57,875
<I> Très bien. </ I>

118
00:06:57,875 --> 00:07:00,581
<I> Et maintenant, nous allons
continuer et enregistrer ce fichier </ i>

119
00:07:02,151 --> 00:07:10,620
<I> comme, enregistrez sous, tout ce que vous voulez.
Je vais appeler cette «Champ d'application demo '. </ I>

120
00:07:11,180 --> 00:07:13,081
<I> D'accord? </ I> Scope_demo.

121
00:07:13,081 --> 00:07:14,475
<I> Très bien. </ I>

122
00:07:14,475 --> 00:07:17,766
<I> Enregistrer cela, et maintenant
nous allons passer au navigateur. </ I>

123
00:07:19,527 --> 00:07:26,434
<I> Nous avons encore le premier exemple
ouvert ici avec les fréquences Hardy-Weinberg. </ I>

124
00:07:26,434 --> 00:07:30,245
<I> Je vais donc ouvrir </ i> scope_demo.html.

125
00:07:30,245 --> 00:07:35,976
<I> Je vais taper cela directement dans
la barre d'adresse du navigateur ici. </ I>

126
00:07:35,976 --> 00:07:38,275
<I> car c'est dans le même répertoire. </ I>

127
00:07:38,275 --> 00:07:42,272
<I> Mais vous pouvez aussi dire </ i> Fichier & gt; Ouvrir
<i> et trouver votre fichier de démonstration de portée. </ I>

128
00:07:42,272 --> 00:07:46,912
<I> Bon alors je vais cliquer retour,
démonstration de la portée. </ I>

129
00:07:46,912 --> 00:07:51,877
<I> fichier n'a pas été trouvé, d'accord,
nous allons voir où j'ai fait l'erreur. </ I>

130
00:07:51,877 --> 00:07:56,484
<I> Portée demo.html. Ai-je enregistrer
cela dans le mauvais endroit? </ I>

131
00:07:56,484 --> 00:08:00,120
<I> Enregistrer sous, ah oui, je l'ai
enregistré dans le mauvais endroit. </ I>

132
00:08:00,120 --> 00:08:04,900
<I> D'accord, </ i> Les exemples de code & gt;
portée démo & gt; Sauvegarder.

133
00:08:04,900 --> 00:08:08,999
<I> D'ailleurs, je vais garder ceux-ci,
si je fais ces types d'erreurs, </ i>

134
00:08:08,999 --> 00:08:10,829
<I> Je vais en fait pour
les garder dans la vidéo </ i>

135
00:08:10,829 --> 00:08:12,805
<I> parce que ces erreurs seront </ i>

136
00:08:12,805 --> 00:08:17,661
<I> que j'espère que vous pouvez apprendre que
cela arrive à chacun d'entre nous tout le temps </ i>

137
00:08:17,661 --> 00:08:21,909
<I> et même si j'arrive à faire des erreurs
de codage et un code n'exécute pas, </ i>

138
00:08:21,909 --> 00:08:24,968
<I> Je ne vais pas réellement
modifier cela sur les vidéos, </ i>

139
00:08:24,968 --> 00:08:27,235
<I> parce que je pense qu'il est
en fait assez d'éducation. </ I>

140
00:08:27,235 --> 00:08:31,457
<I> Bon, en tout cas, enregistrons ce fichier, d'accord,
nous sommes maintenant dans les exemples de code </ i>

141
00:08:31,457 --> 00:08:35,198
<I> D'accord, qui a bien fonctionné. Donc,
nous allons revenir ici, rechargez. </ I>

142
00:08:36,148 --> 00:08:40,134
<I> J'ai trouvé le fichier et nous allons
jeter un coup d'oeil à la console. </ I>

143
00:08:40,134 --> 00:08:43,114
<I> Alors il imprime </ i> '4' <i> ici. </ I>

144
00:08:43,114 --> 00:08:45,287
<I> est donc ce que nous attendons? </ I>

145
00:08:45,287 --> 00:08:46,808
<I> Eh bien nous allons regarder
sur le code. </ I>

146
00:08:46,808 --> 00:08:48,778
<I> Alors qu'est-ce que
nous avons fait ici? </ I>

147
00:08:48,778 --> 00:08:52,119
<I> Ainsi, dans la première fonction,
que nous appelons </ i> fonction test1,

148
00:08:52,119 --> 00:08:56,311
<I> Nous déclarons une variable "4" parce que
nous n'utilisons pas le </ i> var <i> mot-clé, </ i>

149
00:08:56,311 --> 00:08:59,680
<I> cette variable est dans la portée globale
qui signifie qu'il peut être consulté </ i>

150
00:08:59,680 --> 00:09:01,326
<I> de nulle part ailleurs. </ I>

151
00:09:01,326 --> 00:09:04,439
<I> Ensuite, nous appelons </ i> fonction test2.

152
00:09:04,439 --> 00:09:10,464
test2 Fonction <i> est demandé d'imprimer </ i>
foo <i> dans la console. </ i>

153
00:09:10,464 --> 00:09:14,378
<I> Il trouve </ i> foo
<i> dans la portée globale. </ I>

154
00:09:14,378 --> 00:09:17,136
<I> Il n'y a pas de portée locale </ i>
foo <i> variables ici </ i>

155
00:09:17,276 --> 00:09:24,299
<I> mais il y en a un dans la portée globale </ i>
<i> et il imprime correctement cette valeur '4'. </ I>

156
00:09:24,299 --> 00:09:28,194
<I> Maintenant, nous allons faire
une modification subtile ici. </ I>

157
00:09:28,194 --> 00:09:33,517
<I> Faisons-le correctement en disant </ i>
var foo = 4.

158
00:09:33,517 --> 00:09:39,316
<I> Maintenant, cette variable est dans
la portée locale ici de cette fonction. </ I>

159
00:09:39,316 --> 00:09:43,608
<I> Alors qu'est-ce qui se passerait si j'enregistre
cela et me dirigeai vers le navigateur </ i>

160
00:09:43,608 --> 00:09:45,605
<I> et recharger ce document. </ I>

161
00:09:45,605 --> 00:09:47,189
<I> Pensez-y une seconde. </ I>

162
00:09:47,189 --> 00:09:49,097
<I> D'accord, prêt, allons recharger. </ I>

163
00:09:49,097 --> 00:09:50,656
<I> Boom, erreur. </ I>

164
00:09:50,656 --> 00:09:53,026
"ReferenceError Uncaught."

165
00:09:53,026 --> 00:09:54,777
foo est pas défini

166
00:09:55,577 --> 00:10:00,946
<I> Alors, vous verrez probablement
ces erreurs, celui-ci en particulier, un peu. </ I>

167
00:10:01,956 --> 00:10:04,061
<I> Qu'est-ce que cela signifie </ i>
'foo n'est pas défini?

168
00:10:04,061 --> 00:10:05,798
<I> Eh bien, allons-y revenir au code. </ I>

169
00:10:06,875 --> 00:10:10,018
<I> Alors, nous déclarer cette variable ici, </ i>

170
00:10:10,018 --> 00:10:15,587
<I> et il est déclaré avec le </ i> var <i> mot-clé,
qui est la bonne façon de le faire. </ I>

171
00:10:15,587 --> 00:10:20,675
<I> Il fait maintenant partie de
la portée locale de cette fonction. </ I>

172
00:10:21,540 --> 00:10:24,537
<I> Alors, quand nous appelons </ i>
fonction test2,

173
00:10:24,834 --> 00:10:28,797
test2 <i> est à la recherche </ i> 'foo'
<i> dans son champ d'application locale, </ i>

174
00:10:28,797 --> 00:10:31,893
<I> ne trouve pas, parce qu'il n'y a pas
de déclaration de variable ici. </ I>

175
00:10:31,893 --> 00:10:34,460
<I> Alors, ça va vérifier la portée globale. </ I>

176
00:10:34,460 --> 00:10:37,112
<I> Maintenant, </ i> 'foo'
<i> est pas dans la portée globale. </ I>

177
00:10:37,112 --> 00:10:41,437
<I> Donc il n'y a pas de variable </ i> 'foo',
test2 <i> peut marcher avec. </ I>

178
00:10:41,437 --> 00:10:45,274
<I> Donc cette variable ici
est caché de cette fonction ici </ i>

179
00:10:45,274 --> 00:10:50,205
<I> car il est tout simplement locale à
ce champ d'application ici de cette fonction. </ I>

180
00:10:51,265 --> 00:10:56,375
<I> Voilà pourquoi ici dans le navigateur
vous obtenez ceci </ i> ReferenceError Uncaught

181
00:10:56,375 --> 00:10:58,542
'Foo' nest pas défini.

182
00:10:58,542 --> 00:11:03,435
<I> Cette ligne ici ne sait
pas ce que </ i> 'foo' <i> est </ i>

183
00:11:03,435 --> 00:11:06,173
<I> car </ i> 'foo' <i>
ici est déclaré local. </ I>

184
00:11:06,174 --> 00:11:08,930
<I> Et c'est un concept important </ i>

185
00:11:08,930 --> 00:11:12,956
<I> et, encore une fois, ce qu'il faut retenir
de cette vidéo est tout à fait simple. </ I>

186
00:11:12,956 --> 00:11:16,741
<I> Utilisez toujours l'utilisation </ i> 'var'<i>
lorsque vous déclarez des variables. </ I>

187
00:11:16,741 --> 00:11:20,453
<I> Que ce soit à l'extérieur ou à l'intérieur
des fonctions, utilisez toujours </ i> 'var'

188
00:11:20,453 --> 00:11:28,453
<I> et ensuite, si vous faites cela, vous pouvez
suivre la règle simple ou le concept simple </ i>

189
00:11:28,465 --> 00:11:33,828
<I> que les variables qui sont définies en dehors
de la fonction sont dans la portée globale, </ i>

190
00:11:33,828 --> 00:11:37,782
<I> des variables qui sont définies à l'intérieur
des fonctions sont dans la portée locale. </ I>

191
00:11:37,782 --> 00:11:42,032
<I> Ceci est assez simple
si vous utilisez le mot-clé </ i> 'var'

192
00:11:42,032 --> 00:11:44,167
<I> chaque fois que vous déclarez
des variables. </ I>

193
00:11:44,167 --> 00:11:46,827
Bon ceci conclut non seulement
cette vidéo leçon dix

194
00:11:46,827 --> 00:11:48,738
mais aussi chapitre deux.

195
00:11:48,738 --> 00:11:51,453
Donc, vous avez appris
beaucoup dans ce chapitre.

196
00:11:51,453 --> 00:11:54,785
Nous avons commencé la définition
de certains termes clés

197
00:11:54,785 --> 00:11:57,075
que nous allons utiliser tout
au long du cours.

198
00:11:57,075 --> 00:11:59,785
Evolution, gènes, allèles.

199
00:11:59,785 --> 00:12:05,814
Ensuite, nous avons développé une intuition
pour la normale de la biologie évolutionniste

200
00:12:05,814 --> 00:12:07,560
qui est le modèle de Hardy-Weinberg

201
00:12:07,560 --> 00:12:10,570
puis nous avons implémenté
le modèle de Hardy-Weinberg

202
00:12:10,570 --> 00:12:15,735
en JavaScript, et appris ainsi les concepts
de base clés de JavaScript

203
00:12:15,735 --> 00:12:19,263
tels que la déclaration de variables,
les variables assignant

204
00:12:19,263 --> 00:12:22,051
grâce à un peu d'arithmétique
de base en code,

205
00:12:22,051 --> 00:12:25,260
la définition des fonctions,
des itérations et maintenant, à la fin,

206
00:12:25,260 --> 00:12:28,721
vous avez même entendu parler
de la notion de champ d'application.

207
00:12:28,721 --> 00:12:33,339
Nous faisons donc très bien.
Félicitations si vous l'avez fait jusque-là.

208
00:12:33,339 --> 00:12:38,079
Dans le chapitre suivant que nous allons
commencer par la vidéo suivante,

209
00:12:38,079 --> 00:12:40,749
la vidéo suivante, chapitre trois,

210
00:12:40,749 --> 00:12:44,304
nous allons assouplir
certaines des hypothèses

211
00:12:44,304 --> 00:12:46,334
du modèle de Hardy-Weinberg

212
00:12:46,334 --> 00:12:50,604
et qui va conduire à
une dynamique très intéressante.

213
00:12:50,604 --> 00:12:55,002
Et le long du chemin, bien sûr, nous allons
apprendre de nouveaux concepts JavaScript.

214
00:12:55,002 --> 00:12:56,947
Donc, je vous verrai
dans le chapitre suivant.

