(Marcel) Welcome back. Nature, In Code. 
We're in Chapter 2, Lecture 6.
We started implementing Hardy-Weinberg in JavaScript and in this video, we're gonna output values and then we're gonna actually generate and calculate the next generation.
So this is where we left off.
We assigned values for these genotype frequencies, and then we calculated the allele frequencies in JavaScript but we noticed that nothing is logged into the <i>Console.</i>
And that's of course because we didn't add an instruction here to actually tell JavaScript to do that.
So we're gonna use this 
<i>console.log</i> command again.
And I'm gonna ask you to again follow me and do what I do here and I'll explain how this works in a second.
So I have this <i>console.log</i> with parentheses, and the semicolon here at the end.
Now what I'm gonna do is 
I'm gonna write in quotes.
So first quote then
"generation" <i>Space</i> "0" colon.
Then <i>Backslash T</i>. 
Now, quotes again.
<i>Plus</i> "a1a1."
And then again, <i>Plus</i>, quote, 
<i>Backslash T</i>, quote.
Then again, <i>Plus</i> "a1a2" this time.
And then again <i>Plus</i>, quote, 
<i>Backslash T</i>, quote, and then again <i>Plus</i>, now "a2a2."
So this is now the correct line and we'll talk about this in a second.
First, let's see if this actually worked.
So let's save this.
Go back to the browser and let's take a look here.
So I'm gonna reload this document here.
Okay, careful, reload, and boom, here it is, "generation 0", 
This is exactly correct, as it should be.
So let's go back to the code and let's take a look at this line here.
So there's a couple of things 
I want to mention here.
First of all, what are those quotes and what do they stand for?
And then what is this "+", shouldn't we use "+" for additions?
Are we adding here values? 
What's going on here?
And then the last thing 
I'd like to address is what on earth is this "\t"?
So first the quotes.
The quotes are actually incredibly important.
The quotes simply instruct JavaScript to essentially not care about what's in here.
Or to not think about it, to give it a slightly human touch.
It basically just says, look, what we have here is a string of characters.
And in fact we call this <i>a string</i> in shorthand.
If you see a string, just treat it as a string of characters.
Don't over think it.
Don't interpret it as anything else.
It's just a string of characters.
So if we ask it to print a string of characters, that's what it will do.
It'll simply print a string of characters.
One example that could maybe make this a bit clearer is take a look at this.
I mean here we don't have the quotes around this "a1a1"
So in the context of this method, 
JavaScript will actually, simply see what's in this variable.
In this case it's "0.15" and then it will interpret this as a string and output it into the <i>Console</i> as "0.15."
Let's see what would happen if we actually put quotes around this "a1a1".
So now what this would mean, is simply, we're essentially telling JavaScript,
"Don't worry about it.
It's just the character 
'a', '1', and 'a', and '1'.
Those four characters as a string.
Don't worry about it, just output it."
And if you need to save this, go back to the browser and reload this, you can see that indeed "a1a1" literally is printed here in the <i>Console.</i>
But that's of course not what we want.
We want the value that's stored in the variable "a1a1" to be printed.
So we don't use the quotes here. 
So quotes simply mean, we simply use quotes to enclose literal text.
So that's what the quotes are for.
You can use double quotes or use single quotes.
Whatever you do, just be consistent.
So the second issue is with this "\t".
This is simply a shorthand notation for <i>Tab</i>.
So sometimes you wanna separate values by having a bit of a <i>Tab</i> in between for visual aesthetics.
This is how you do it, "\t".
This can come in handy quite often when you're outputting a bunch of things together and you need a little bit of space between those values.
So finally, what is this
"+" thing doing here?
Don't we normally use "+" to add values?
Yes, that's true, but there's an important exception here in JavaScript.
We can actually add strings together and therefore build larger strings.
So this is called <i>string concatenation.</i>
Here in this case, if we go back to the browser, what we'd like to build, and let me reload this.
This is actually not saved yet.
Let me save this version without the quotes here.
I'm gonna save it and then 
I'm gonna go back and reload it.
Now we have again the proper value.
We'd like to build this string here,
"generation 0 colon",
<i>Tab</i> 0.15, <i>Tab</i> 0.5, <i>Tab</i> 0.35.
And we're doing this by adding the pieces together.
And we're adding those simply with the "+" operator.
And when JavaScript sees this "+" operator, if one of the elements that are being added is a string, like is the case here, the first element here actually is a string, then it will treat everything else as a string.
So if this is not a string it will simply look up the value and treat this as a string.
This is just a handy thing.
It can potentially cause some confusion, if you're adding up things that are actually meant to be actual values, numerical values, but somehow you have a quote in there, and some of it's interpreted as a string.
But this is not really something to worry about at this stage.
I mean it's actually a very handy method to build larger strings out of chunks you're simply adding together.
So this is a phenomenon that's called 
<i>string concatenation.</i>
You'll see it throughout JavaScript.
We won't use it very heavily, but it's virtually impossible to understand any other
JavaScript code if you don't understand that you can simply add strings together, or values together as a larger string.
So that's <i>string concatenation.</i>
Now I'm saying we don't use this because there's actually another way of outputting these values.
So I'm gonna get rid of everything here up to the colon.
And I'm gonna put the end quote here and now I'm simply gonna say
"comma a1a1", "comma a1a2", and "comma a2a2."
Now, first thing to observe is that's actually already nicer
It's already nicer to look at, and that's actually kind of important because your future self and others who read your code will be thankful if you write nice looking and easy to understand code.
So let's save this. 
We'll talk about this in a second.
Let's save it, go back to the browser, reload it here and, boom, we see this works, "generation 0". 
Again the correct values,
Now already properly spaced and indeed, in fact, even color coded here as numbers in blue.
In this case, in Chrome, in your browser it may look a bit different.
But this looks quite nice.
Let's go back to the code and see what's happening here.
How do we do this? 
Well this now happens behind the scenes, so to speak, but you should know that <i>console.log</i> as a method really allows you to pass in multiple values not just one.
Before we just passed one large string that we created through
<i>string concatenation.</i>
In this case we're simply passing it four values, and if you pass multiple values to a function you separate them with commas, and we'll learn much more about this in the next video.
But here, basically passing in four values and <i>console.log</i> will take care of everything automatically behind the scenes.
And so I much prefer this way of writing <i>console.log</i> statements, and we'll use that now throughout the rest of the code.
So now let's get to the meat of it.
So we're now outputting these values.
But what we'd like to do is we'd now like to calculate the next generation.
So how are we gonna do this?
So what we're gonna do is simply recalculate these "a1a1" values.
So "a1a1", and the "a2a2," and "a1a2" obviously as well.
So "a1a1" in the next generation, we can calculate as we've done before on the slides, by simply calculating the product of the a1 frequency, which is "p".
So "a1a1" can be calculated in the next generation as "p times p semicolon"
And in a similar way,
"a1a2" can be calculated as "2 times p times q."
And "a2a2" can be recalculated as "q times q."
That's how we develop it on the slides and that's how it works.
Now, you may ask yourself,
"Well, so what's happening here?
Are we initializing these variables again?"
No. They already exist.
Because we defined them up here. 
If you assign a value to an already existing variable, then the value will simply be overwritten.
So "a1a1" before, so up here at this point, it will still store the value "0.15", but then as soon as we get to this line, this product here is calculated, and whatever this value is now, it will be stored into "a1a1", and this value "0.15" before will be lost.
So it's simply overwriting values.
So let's see now, actually if this worked.
So the first thing I'm gonna do because the code now gets a little bit more complex,
I'm gonna add a comment here.
So what's a comment?
Well I'm simply gonna write here,
"calculating the next generation"
This "//" here is extremely handy because it's used to add a comment.
So what does it mean? 
It simply means when JavaScript encounters this "//", it will ignore anything that follows on that line after it.
And that's a very convenient way for us to write comments, and again this is helpful to yourself in the future.
Sometimes the code looks easy because you've thought about it for quite some time and you finally write this piece of code.
But if you look at this code in a few months, you wouldn't easily figure it out again or it will take you a lot of time again.
And so that's usually a point where adding a comment can be really helpful to your future self, and again for everyone else who's actually working with your code, or reading your code in the future.
So let me output now these new values.
And to do that, I'm simply gonna copy this line here.
I'm going to be a bit lazy.
I'm gonna copy and paste it here.
Of course, this is now 
"generation 1", not "0", but everything else stays the same.
So let me save that. 
Go over to the browser, and reload this document, and, boom, it works.
What we see here is "generation 1", and these are the new values.
So "0.16", "0.48", "0.36", as we calculated it previously in the videos.
Now here's one issue.
What's going on here?
Well, there seems to be some rounding error.
So 0.160000, many zeros and then "3".
What is this?
Well, it turns out that there are often JavaScript errors, rounding errors when you do math operations in computers.
And this may seem a little strange because aren't computers to be extremely precise.
Yes, that's true, but we should never forget that in the back end, at the base of all of it, computers are not using the decimal system.
They're actually using the binary system and sometimes it's hard for a computer/impossible, to actually accurately represent a given number without any rounding error.
So let me try to explain this in the context of the decimal system that we use in everyday usage.
So let's say we started with this number one third.
So if I ask you to write down one third this is probably how you would do it.
And this is actually a nice shortcut sort of writing down one third and if we add three times one third, that is mathematically one because each of those one thirds is exactly one third. 
Now this sounds trivial, but here's the point, try to express this number now one third, without using this notation of division.
Just using the number system.
Well, it turns out you can't actually do this properly.
What you can do is you can write down "0.33", but "0.33" plus "0.33", plus "0.33", is not "1". 
It's "0.99."
So you could say, "Well okay, let me be a bit more precise here and I'm gonna add three digits here.
And here and here.
But no matter how many digits you add here, there will always be a rounding error. 
And that's because we simply don't have a way to accurately capture one third using this notation in the decimal system. 
And it is essentially for the same reason, that we don't have a good notation for some numbers in the binary system, that computers use, and that's why you occasionally get these types of rounding errors.
So I hope you now understand why we have this issue here.
It's basically just a rounding error because a computer finds it hard to express this number correctly in this notation using the binary system.
But you can see the rounding error is extremely small.
And for all intents and purposes, this is usually not a big problem.
These rounding errors, they're a bit ugly, and we'll deal with that in the next video or one of the next videos.
But from a mathematical perspective, you can largely ignore them.
If you add up many numbers like that, then it's potentially an issue because a rounding error as you keep adding rounding errors they can quickly become very large, and so that's potentially a cause for concern.
So always be sure to check a bit on this.
But, by and large, this is not a problem that will ever come to bite you.
So let's go back to the code.
This works, so great.
We wrote this code here that calculates what's happening in the next generation, then we output this and you know what, let's do this for a couple of generations, just to see what's actually going on.
So I'm just gonna copy these four lines here, and I'm gonna paste them,
"generation 2", "generation 3",
"generation 4", "generation 5", let's say, and obviously what we need to do here is, we need to update the counters.
So here's "0", "1".
We have here "2", "3", "4", and "5."
We're always recalculating the genotype frequencies.
But of course we already know that these are gonna stay constant, so let's save this. 
Move over to the browser, reload, and yes indeed, these will of course remain constant because we're using the same allele frequencies to calculate those, and so those should always be the same.
Now this is in some sense Hardy-Weinberg because we now are calculating each time the genotype frequencies based on the allele frequencies and we see in the beginning, this is not in Hardy-Weinberg frequencies.
It will get there within one generation and then will stay there forever.
Now if you go back to the code,
I hope you felt a bit strange watching me copy code, because copy-pasting code is very bad practice.
Basically what's happening here is 
I'm taking a piece of code,
I'm taking a piece of functionality, concretely this one, that I want to reuse, and I'm doing it the stupid way,
I'm copying the code over and over again, throughout my file.
That's not very smart.
Why not?
It's not smart because let's assume I later find out,
"Whoops, there was a mistake here, this should actually be something else", doesn't matter.
There is in fact no mistake here. 
Let's just assume there was one.
Well now, because I copy-pasted this code throughout my document,
I have to go and find all the places where I pasted this code and fix the error there.
So very bad idea, copy and paste code.
It's a particularly bad idea because actually JavaScript, like many other programming languages, provides a very handy tool that helps you avoid copy-pasting code around and this is the principle of functions and in the next video we'll learn about that super important principle of functions, this tool and particularly, of course, how we use them in JavaScript.
So we've now finished outputting the genotype frequencies over many generations.
We saw that things worked as we expected them to based on the calculations we did before, but there's something fishy with our code.
We're copy-pasting bits and pieces of code around.
That's not good practice.
There's a tool called Functions and we'll use this tool heavily throughout the course and in the next video,
I'll explain how this works.
So, I'll see you there.
