1
00:00:03,860 --> 00:00:07,150
Bienvenue, la Nature dans le code.
Nous sommes dans le chapitre 2 leçon 7

2
00:00:07,170 --> 00:00:10,050
Dans la vidéo précédente,
nous avons commencé à copier / coller

3
00:00:10,050 --> 00:00:11,400
autour d'une grande quantité de code.

4
00:00:11,400 --> 00:00:12,900
Ce n'est pas une bonne idee.

5
00:00:12,900 --> 00:00:17,210
Donc dans cette vidéo, nous allons apprendre
sur le concept appelé une fonction.

6
00:00:17,210 --> 00:00:23,580
Et la fonction est vraiment un merveilleux
outil pour être utilisé en JavaScript

7
00:00:23,580 --> 00:00:28,870
Et parmi beaucoup d'autres choses, il vous permet
de ne pas copier / coller beaucoup de code

8
00:00:28,870 --> 00:00:30,730
Donc, nous allons regarder
la façon dont cela fonctionne.

9
00:00:30,730 --> 00:00:34,860
Donc, ici, nous sommes revenus à notre code
et nous voyons tout cela, vous savez

10
00:00:34,860 --> 00:00:37,020
de code copie /collé ici par tout,

11
00:00:37,020 --> 00:00:40,580
et vous savez que cela est
problèmatique pour de nombreuses raisons.

12
00:00:40,580 --> 00:00:44,350
Y compris le fait que si vous faites
une erreur quelque part

13
00:00:44,350 --> 00:00:46,640
et vous commencez à copier / coller
ce code par tout

14
00:00:46,640 --> 00:00:49,830
Ça va être très difficile
de retracer cette erreur.

15
00:00:49,830 --> 00:00:53,690
Donc, nous allons utiliser le concept
d'une fonction.

16
00:00:53,690 --> 00:00:55,240
Alors, qu'est ce qu'une fonction?

17
00:00:55,240 --> 00:00:58,020
Une fonction, permet essentiellement
d'encapsuler un peu de code.

18
00:00:58,020 --> 00:01:03,220
Et dans notre cas, ce peu de code,
par exemple, pourrait être ce code ici

19
00:01:03,220 --> 00:01:06,580
Bien, parce que nous faisons copier / coller
de ce code encore et encore

20
00:01:06,580 --> 00:01:08,760
il fait exactement la même chose.

21
00:01:08,760 --> 00:01:11,730
Alors, comment faisons-nous cela?

22
00:01:11,730 --> 00:01:16,750
Donc, nous allons simplement la mettre en oeuvre
et ainsi apprendre comment nous le faisons.

23
00:01:16,750 --> 00:01:20,260
Ainsi, vous pouvez définir une fonction
avec mot-clé fonction

24
00:01:20,260 --> 00:01:24,930
et comme vous pouvez le voir ceci est
un mot-clé, le texte Wrangler est agréable

25
00:01:24,930 --> 00:01:27,470
et le met en évidence que automatiquement.

26
00:01:27,470 --> 00:01:30,030
Indiquant ceci un mot spécial.

27
00:01:30,030 --> 00:01:35,340
Donc, fonction est le mot-clé,
puis vous devez nommer la fonction.

28
00:01:35,340 --> 00:01:41,280
Maintenant, je vais la nommer,
Create_next_generation

29
00:01:42,930 --> 00:01:47,050
Encore une fois, essayez d'être libérale
dans la nomination des fonctions.

30
00:01:47,050 --> 00:01:52,540
Juste de la même manière que
vous devez nommer les variables.

31
00:01:53,580 --> 00:01:57,740
Il est fondamentalement, vous savez parfois,
où nous sommes tentés d'être paresseux

32
00:01:57,740 --> 00:02:00,950
et donner à ces fonctions ou variables
des noms très courts

33
00:02:00,950 --> 00:02:07,120
car pour le moment comme nous codons,
c'est très clair ce que font ces fonctions

34
00:02:07,120 --> 00:02:09,000
mais vous savez que dal le future,

35
00:02:09,000 --> 00:02:14,780
vous ne pourrez pas vous rappeler tous
les détails ainsi que vos collègues

36
00:02:14,780 --> 00:02:18,930
qui travaillera avec votre code seront
très heureux que vous donnez

37
00:02:18,930 --> 00:02:21,230
les fonctions des noms propres.

38
00:02:21,230 --> 00:02:24,590
Donc, comme dans les variables,
donner les fonctions des noms

39
00:02:24,590 --> 00:02:25,590
qui signifient quelque chose d'utile.

40
00:02:25,590 --> 00:02:32,060
Et en particulier, avec la fonction,
donnez un nom qui encapsule

41
00:02:32,060 --> 00:02:34,720
qui représente ce que la fonction fait.

42
00:02:34,720 --> 00:02:37,590
Donc, ici, nous créons simplement
la prochaine génération.

43
00:02:37,590 --> 00:02:40,270
Donc, cela semble comme un nom correct.

44
00:02:40,270 --> 00:02:41,390
Très bien.

45
00:02:41,390 --> 00:02:44,000
Quelque chose d'autre chaque fonction
a besoin d'autre qu'un nom

46
00:02:44,000 --> 00:02:46,140
c'est cet ensemble de parenthèses,
d'accord.

47
00:02:46,140 --> 00:02:51,740
Dans ces parenthèses,
nous passons des valeurs.

48
00:02:51,740 --> 00:02:55,840
Voici un bon exemple,
log est une fonction.

49
00:02:55,840 --> 00:02:58,560
Il a ces parenthèses.
Voilà comment vous pouvez le dire.

50
00:02:58,560 --> 00:03:05,590
Maintenant, cette fonction particulière peut
prendre un certain nombre de paramètres.

51
00:03:05,590 --> 00:03:08,910
Dans cet égard, c'est un peu spécial.

52
00:03:08,910 --> 00:03:13,820
Mais le point c'est qu'ici, nous passons
dans quatre arguments

53
00:03:13,820 --> 00:03:17,080
et ceux-ci sont séparées par des virgules.

54
00:03:17,090 --> 00:03:18,130
Donc, au fait,

55
00:03:18,130 --> 00:03:21,220
Juste pour avoir la langue claire
lorsque nous définissons une fonction,

56
00:03:21,220 --> 00:03:23,350
quoi que ce soit ici, dans le ...

57
00:03:23,350 --> 00:03:26,980
tout ce que nous avons ici dans la
parenthèse,nous les appelons paramètres.

58
00:03:26,980 --> 00:03:29,700
Une fois que nous commençons
à utiliser la fonction,

59
00:03:29,700 --> 00:03:34,140
et nous commençons à passer des valeurs,
nous les appelons des arguments,

60
00:03:34,140 --> 00:03:35,490
mais c'est vraiment un détail,

61
00:03:35,490 --> 00:03:38,430
donc, ici, vous auriez votre
liste des paramètres

62
00:03:38,430 --> 00:03:40,650
séparées par des virgules

63
00:03:40,650 --> 00:03:42,780
et je vais en parler en détail

64
00:03:42,780 --> 00:03:44,220
tout au long du parcours,

65
00:03:44,220 --> 00:03:49,590
mais ici, dans cet exemple particulier,
je ne veux pas les paramètres.

66
00:03:50,820 --> 00:03:52,770
Donc, je vais juste les laisser vide.

67
00:03:52,770 --> 00:03:56,280
J'ai besoin encore des parenthèses, d'accord.
Chaque fonction a des parenthèses.

68
00:03:56,280 --> 00:03:58,910
Mais dans ce cas, nous avons
aucun paramètre là-dedans

69
00:03:58,910 --> 00:04:01,860
puis je dois utiliser ces accolades

70
00:04:01,860 --> 00:04:05,500
Ok, accolades. Ces accolades

71
00:04:05,500 --> 00:04:09,130
va maintenant effectivement enfermer
le corps de la fonction.

72
00:04:09,140 --> 00:04:11,910
Donc, le corps de la fonction
est la chose, le code

73
00:04:11,910 --> 00:04:16,450
qui devrait être exécuté une fois
qu'une fonction est appelée

74
00:04:16,450 --> 00:04:19,710
Donc, je vais juste prendre ces 3
lignes ici et les couper

75
00:04:19,710 --> 00:04:22,220
et je vais les copier / coller ici.

76
00:04:22,220 --> 00:04:26,770
Egalement copie/ coller, mais
un autre type de copie / coller.

77
00:04:26,770 --> 00:04:28,580
En fait, couper et coller.

78
00:04:28,580 --> 00:04:32,200
Donc, ceci est maintenant
le corps de la fonction.

79
00:04:32,200 --> 00:04:35,340
Il est dentelé ici juste pour
la visuelle esthétique

80
00:04:35,340 --> 00:04:38,070
Donc je peux voir rapidement,
ceci est le corps de la fonction

81
00:04:38,070 --> 00:04:40,540
et il est encapsulé ici dans
ces accolades.

82
00:04:40,540 --> 00:04:42,220
Donc, ces éléments sont importants.

83
00:04:42,220 --> 00:04:46,250
Alors maintenant, j'ai une fonction,
il a un nom, il prend aucun paramètre.

84
00:04:46,250 --> 00:04:47,230
Pas de probleme.

85
00:04:47,230 --> 00:04:51,590
Et voici le code qui doit être exécuté
chaque fois j'appelle cette fonction.

86
00:04:51,590 --> 00:04:54,260
Donc, que signifie appeler une fonction?

87
00:04:54,260 --> 00:04:58,520
Il est donc important de noter que
quand on defini la fonction ici

88
00:04:58,520 --> 00:05:00,940
ce code ne sera pas exécuté.

89
00:05:00,940 --> 00:05:02,470
D'accord.

90
00:05:02,470 --> 00:05:04,940
Il défini la fonction,

91
00:05:04,940 --> 00:05:07,510
ce qu'il doit faire une fois
qu'il est appelé.

92
00:05:07,510 --> 00:05:11,300
Mais maintenant, vous devez d'abord
appeler la fonction.

93
00:05:11,300 --> 00:05:13,430
Pour que ce code soit exécuté.

94
00:05:13,430 --> 00:05:18,900
Et nous appelons simplement la fonction
en appelant essentiellement son nom.

95
00:05:18,900 --> 00:05:24,260
Ok, donc créer des parenthèses
de prochaines générations.

96
00:05:24,260 --> 00:05:26,820
Encore une fois, nous avons toujours besoin
de ces parenthèses avec des fonctions

97
00:05:26,820 --> 00:05:31,440
mais comme je n'ai aucun paramètre ici,
je n'ai pas besoin de passer des arguments.

98
00:05:31,440 --> 00:05:32,810
Donc, il est vide aussi.

99
00:05:32,810 --> 00:05:37,140
Je peux simplement dire créer la prochaine
génération qui est la fin de ma phrase.

100
00:05:37,140 --> 00:05:39,770
Donc, je vais simplement terminer
ceci avec un point-virgule.

101
00:05:39,770 --> 00:05:44,460
Créer la prochaine génération
maintenant ce code sera exécuté.

102
00:05:44,460 --> 00:05:47,660
Et puis j'ai la console verrou ici.

103
00:05:47,660 --> 00:05:49,390
C'est génial.

104
00:05:49,390 --> 00:05:50,340
Et donc

105
00:05:50,340 --> 00:05:54,330
vous savez que cela fonctionne bien.

106
00:05:54,330 --> 00:05:56,520
Maintenant, je peux me débarrasser
de tout ce code ici.

107
00:05:56,520 --> 00:05:58,600
donc je n'ai pas besoin de ceci.

108
00:05:58,600 --> 00:06:02,330
Je vais tout simplement remplacer ceci
maintenant avec cet appel de fonction.

109
00:06:02,330 --> 00:06:03,440
donc je n'ai pas besoin de ceci.

110
00:06:03,440 --> 00:06:06,120
Il suffit de le remplacer et de créer
la prochaine génération.

111
00:06:06,120 --> 00:06:07,120
je n'ai pas besoin de ceci

112
00:06:07,120 --> 00:06:09,590
Remplacez le juste avec
créer la prochaine génération.

113
00:06:09,590 --> 00:06:12,110
Pareil ici.

114
00:06:12,110 --> 00:06:17,520
Même ici et maintenant cela ressemble
beaucoup plus propre.

115
00:06:17,520 --> 00:06:22,010
Donc, ce code n'est pas maintenant
copier / coller dans tout le document

116
00:06:22,010 --> 00:06:26,900
il existe simplement une fois si jamais je
décide si je dois changer quelque chose ici.

117
00:06:26,900 --> 00:06:30,900
Je peux juste le changer
dans la définition de la fonction.

118
00:06:30,900 --> 00:06:35,330
Maintenant, pour réellement s'assurer que
ce que nous avons fait ici fonctionne

119
00:06:35,330 --> 00:06:37,110
nous allons enregistrer le document.

120
00:06:37,110 --> 00:06:40,940
Allons vers le navigateur
et recharger ceci

121
00:06:40,940 --> 00:06:44,150
et si tout fonctionnait, oui,
il fonctionne rien ne devrait changer

122
00:06:44,150 --> 00:06:46,780
parce que nous avons simplement
restructuré le code.

123
00:06:46,780 --> 00:06:48,390
Il ne fait rien d'autre,

124
00:06:48,390 --> 00:06:50,860
c'est écrit simplement
d'une manière plus agréable.

125
00:06:50,860 --> 00:06:53,030
Par ailleurs, si nous revenons au code,

126
00:06:53,030 --> 00:06:58,990
Cela vous trouverez assez souvent.
un codage capable à coder est non seulement,

127
00:06:58,990 --> 00:07:03,430
pour que l'ordinateur fasse tout
ce que vous vouliez faire.

128
00:07:03,430 --> 00:07:06,690
Je veux dire, que c'est évidemment
un point clé sur le codage

129
00:07:06,690 --> 00:07:10,140
mais le code peut très vit
devenir très complexe

130
00:07:10,140 --> 00:07:16,080
et je l'ai déjà dit plusieurs fois
et je le dirai encore,

131
00:07:16,080 --> 00:07:24,030
vous serez très heureux
si vous écrivez du code propre et claire.

132
00:07:24,030 --> 00:07:27,950
et ceci est un bon exemple maintenant.

133
00:07:27,950 --> 00:07:30,750
Ce code est beaucoup plus propre
que la précédente.

134
00:07:30,750 --> 00:07:32,630
Non pas parce qu'il est plus court,

135
00:07:32,630 --> 00:07:37,870
mais parce qu'il est effectivement
plus compact et cette

136
00:07:37,870 --> 00:07:42,110
fonctionnalité ici est bien encapsulé
dans une fonction.

137
00:07:42,110 --> 00:07:46,820
Il y a un principe appelé DRY "sec"
ne vous répétez pas

138
00:07:46,820 --> 00:07:53,680
Nous l'avons fait ici exactement. Nous avons
encapsulé ce code dans une fonction

139
00:07:53,680 --> 00:07:57,750
Et puis nous avons simplement appelé
le nom de la fonction plusieurs fois.

140
00:07:57,750 --> 00:08:01,700
Donc, ceci est très bien maintenant.

141
00:08:01,700 --> 00:08:03,600
Il n'est pas encore parfait

142
00:08:03,600 --> 00:08:08,450
parce que, comme vous pouvez le voir,
il y a un petit problème ici.

143
00:08:08,450 --> 00:08:13,840
Oui, nous avons encapsulé cette
fonctionnalité dans une fonction,

144
00:08:13,840 --> 00:08:20,440
et nous pouvons réutiliser ceci plusieurs
fois,mais on a encore de code copié autour,

145
00:08:20,450 --> 00:08:23,890
Je veux dire maintenant,
j'ai juste copié le nom de la fonction.

146
00:08:23,890 --> 00:08:29,080
Bien sûr, dans les œuvres,
mais si je veux imprimer.

147
00:08:29,080 --> 00:08:34,540
Maintenant, la prochaine génération, et pas
seulement 5 fois, mais en fait 50 fois 500 fois,

148
00:08:34,540 --> 00:08:36,410
un million de fois.

149
00:08:36,410 --> 00:08:42,430
Évidemment, je ne peux pas prendre ces 2
lignes de code et les copier encore et encore

150
00:08:42,430 --> 00:08:48,180
Et juste définissant une nouvelle fonction ici,
vous savez ne ferait pas l'affaire non plus.

151
00:08:48,180 --> 00:08:52,300
Maintenant, il se trouve, qu'il y a un autre
concept super puissant qui est

152
00:08:52,300 --> 00:08:53,890
l'itération,

153
00:08:53,890 --> 00:08:56,990
dans la vidéo suivante pour faire
face à ce problème.

154
00:08:56,990 --> 00:09:00,630
Donc, dans cette vidéo, nous venons
d'apprendre sur le concept d'une fonction

155
00:09:00,630 --> 00:09:04,460
Nous allons utiliser des fonctions
tout au long de ce cours.

156
00:09:04,460 --> 00:09:09,020
Si vous regardez les pages aléatoires
sur l'Internet qui utilise Javascript

157
00:09:09,020 --> 00:09:15,280
vous trouverez de nombreuses fonctions.Les
fonctions sont un concept clé de JavaScript.

158
00:09:15,280 --> 00:09:18,030
et dans cette vidéo nous avons
commencé à les explorer.

159
00:09:18,030 --> 00:09:21,450
Dans la vidéo suivante, nous allons
explorer un autre concept super

160
00:09:21,450 --> 00:09:23,060
importante dans JavaScript

161
00:09:23,060 --> 00:09:26,670
ou la programmation en général,
ce concept c'est l'itération,

162
00:09:26,670 --> 00:09:29,370
et ce sera le contenu
de la prochain vidéo.

163
00:09:29,370 --> 00:09:31,230
Je vous retrouve à la prochaine vidéo.

