1
00:00:03,194 --> 00:00:06,393
Bienvenue,<i> Nature, Dans le code </ i>,
nous sommes dans le chapitre 2,leçon 5.

2
00:00:06,393 --> 00:00:09,988
Dans la vidéo précédente, vous avez
écrit votre première ligne de JavaScript.

3
00:00:09,988 --> 00:00:12,154
Felicitation, si tout a bien fonctionné.

4
00:00:12,154 --> 00:00:14,422
Ainsi, dans cette vidéo,
nous allons maintenant mettre en œuvre

5
00:00:14,422 --> 00:00:17,022
le principe <i> Hardy-Weinberg </ i>
dans JavaScript.

6
00:00:17,022 --> 00:00:18,711
Ainsi, afin de le faire,

7
00:00:18,711 --> 00:00:22,004
permettez-moi de récapituler sur une diapositive
que nous avons appris jusqu'à présent

8
00:00:22,004 --> 00:00:24,047
et comment nous allons commencer cela.

9
00:00:24,047 --> 00:00:25,962
Très bien, alors où est ce que nous savons:

10
00:00:25,962 --> 00:00:28,995
Nous savons que nous allons
besoin, en quelque sorte,

11
00:00:28,995 --> 00:00:31,584
de définir la fréquence de l'allèle A1.

12
00:00:31,584 --> 00:00:33,754
Et cela, en fait, nous allons
le faire avec une variable

13
00:00:33,754 --> 00:00:35,235
que nous allons appeler <i> p </ i>.

14
00:00:35,235 --> 00:00:39,243
Donc, <i> p </ i> à partir de maintenant,
pour le reste de ce cours, en fait,

15
00:00:39,243 --> 00:00:42,363
désignera par la fréquence de l'allèle A1.

16
00:00:43,433 --> 00:00:48,665
La fréquence de l'allèle A2
nous allons le désigner avec <i> q </ i>.

17
00:00:48,665 --> 00:00:51,906
Maintenant, parce que vous savez
que ces deux ont besoin de s'ajouter,

18
00:00:51,906 --> 00:00:55,235
<I> q </ i> est égal simplement à <i> 1 - p </ i>.

19
00:00:55,235 --> 00:01:00,425
Et, bien sûr, vice versa, et <i> p </ i>
est égal simplement à <i> 1 - q </ i>.

20
00:01:01,442 --> 00:01:06,681
Maintenant, nous pouvons calculer
les fréquences des génotypes

21
00:01:06,681 --> 00:01:10,065
suivant ces fréquences des allèles.

22
00:01:10,065 --> 00:01:12,670
Et nous l'avons fait auparavant
avec des chiffres concrets.

23
00:01:12,670 --> 00:01:16,762
Dans les exemples dans les diapositives
avant que nous utilisions 40% et 60%,

24
00:01:16,762 --> 00:01:21,952
mais nous allons maintenant exprimer de manière
plus générique avec ces deux variables.

25
00:01:21,952 --> 00:01:26,104
Ainsi, la probabilité que
nous générons dans A1 A1 allèle,

26
00:01:26,104 --> 00:01:31,132
est la fréquence de cet allèle A1 fois
la fréquence de l'allèle A1,

27
00:01:31,132 --> 00:01:33,953
parce que ce sont les probabilités
que nous avons choisi ces allèles

28
00:01:33,953 --> 00:01:36,125
de la piscine de gamète de taille infinie,

29
00:01:36,125 --> 00:01:38,469
et donc c'est, bien sûr,
simplement <i> p ^ 2 </ i>.

30
00:01:39,729 --> 00:01:43,890
Vice versa, je vais faire d'abord l'A2 A2,

31
00:01:43,890 --> 00:01:50,063
et c'est, bien sûr, maintenant simplement,
<i> qx q </ i>, de sorte que <i> q ^ 2 </ i>,

32
00:01:50,063 --> 00:01:53,733
<I> q </ i> étant la probabilité
que je prends un allèle A2,

33
00:01:53,733 --> 00:01:56,973
parce que <i> q </ i> est
la fréquence de l'allèle A2.

34
00:01:56,973 --> 00:02:01,002
Et pour le génotype A1 A2,

35
00:02:01,002 --> 00:02:04,493
nous avons appris qu'il ya deux façons
que nous pouvons faire cela:

36
00:02:04,493 --> 00:02:07,333
Premièrement,
nous pouvons choisir un allèle A1,

37
00:02:07,333 --> 00:02:09,903
et alors nous pouvons choisir un allèle A2,

38
00:02:09,903 --> 00:02:12,433
de sorte que les probabilités
sont <i> p </ i> et <i> q </ i>.

39
00:02:12,433 --> 00:02:15,423
Ou nous pouvons le faire dans l'autre sens

40
00:02:15,423 --> 00:02:20,907
donc d'abord choisir un allèle A2
et ensuite choisir un allèle A1.

41
00:02:20,907 --> 00:02:23,273
Et c'est, bien sûr, le même terme exact,

42
00:02:23,273 --> 00:02:27,572
donc ici le total est <i> 2 p q </ i>.

43
00:02:28,202 --> 00:02:31,153
Et ce sont les trois fréquences

44
00:02:31,153 --> 00:02:34,684
<I> p ^ 2 </ i>, <i> 2 p q </ i> et <i> q ^ 2 </ i>

45
00:02:34,684 --> 00:02:36,436
des trois génotypes.

46
00:02:36,436 --> 00:02:39,253
Et tout comme les deux fréquences
des allèles doivent s'ajouter,

47
00:02:39,253 --> 00:02:40,942
ceux qui ont besoin de s'ajouter.

48
00:02:40,942 --> 00:02:46,012
Donc, en gros, <i> p ^ 2 + 2 p q </ i>

49
00:02:46,693 --> 00:02:51,173
<I> + q ^ 2 = 1. </ I>

50
00:02:51,703 --> 00:02:56,323
Alors, voici comment nous allons le faire, voici comment
nous allons commencer l'ensemble du programme,

51
00:02:56,323 --> 00:02:58,717
et maintenant nous allons
passer à l'éditeur de texte,

52
00:02:58,717 --> 00:03:01,726
et nous allons mettre en œuvre
ceci <i> dans </ i> JavaScript.

53
00:03:02,217 --> 00:03:04,532
Maintenant que nous avons
tout cela compris,

54
00:03:04,532 --> 00:03:06,566
revenons ici à notre code.

55
00:03:06,566 --> 00:03:11,026
Donc, nous sommes toujours là dans
notre fichier <i> first_example.html </ i>.

56
00:03:11,736 --> 00:03:14,017
Nous ne pouvons tout simplement
réutiliser cela

57
00:03:14,017 --> 00:03:16,377
et nous pouvons nous débarrasser de
la "Bonjour tout le monde" ici dans le corps.

58
00:03:16,377 --> 00:03:18,219
On n'a plus besoin de cela.

59
00:03:18,219 --> 00:03:22,237
Nous pouvons également nous débarrasser de la <i> console.log
( "Bonjour tout le monde à partir de JavaScript") </ i>.

60
00:03:22,237 --> 00:03:26,226
On n'a pas besoin de ceci non plus,
nous allons donc nous débarrasser de cela.

61
00:03:26,226 --> 00:03:29,485
Donc, maintenant, ce que
je voudrais faire est,

62
00:03:29,485 --> 00:03:32,215
Je voudrais écrire trois lignes de code,

63
00:03:32,215 --> 00:03:35,462
où je vais en fait initialiser
les fréquences génotypiques.

64
00:03:35,462 --> 00:03:38,191
Maintenant, je vous demande
simplement de me suivre

65
00:03:38,191 --> 00:03:39,599
taper ces trois lignes aussi

66
00:03:39,599 --> 00:03:43,944
puis nous marcherons à travers ce qu'ils
signifient et comment ils sont mis en place.

67
00:03:43,944 --> 00:03:46,253
Donc, la première ligne va être

68
00:03:46,253 --> 00:03:55,233
<I> var A1A1 = 0,5; </ i>

69
00:03:56,666 --> 00:04:00,152
Et puis, sur une nouvelle ligne,

70
00:04:00,152 --> 00:04:04,098
Je vais dire <i> var A2A2 </ i>

71
00:04:04,098 --> 00:04:07,179
si l'autre homozygote

72
00:04:07,179 --> 00:04:13,440
égal, et cela nous avons défini comme 0,35,

73
00:04:13,440 --> 00:04:16,498
puis, terminer la ligne
avec un point-virgule.

74
00:04:16,498 --> 00:04:20,996
Et maintenant, je vais écrire
<i> var a1a2 </ i>,

75
00:04:23,456 --> 00:04:25,500
qui est maintenant l'hétérozygote.

76
00:04:25,500 --> 00:04:28,710
Maintenant, nous savons que cela est 0,5,

77
00:04:28,710 --> 00:04:32,930
mais je vais maintenant tout simplement,
en fait, va calculer ceci

78
00:04:32,930 --> 00:04:38,511
en disant ceci est un moins
la somme de ces deux nombres,

79
00:04:38,511 --> 00:04:40,981
et je l'ai déjà stocké ces deux nombres,

80
00:04:40,981 --> 00:04:46,661
donc je vais simplement dire,
<i> A1A1 + A2A2 </ i>.

81
00:04:46,661 --> 00:04:49,832
Maintenant, je vais le fermer, virgule.

82
00:04:49,832 --> 00:04:54,075
Donc, maintenant, un peu de choses
intéressantes se produisent ici,

83
00:04:54,075 --> 00:04:56,654
et je veux que vous compreniez ceux-là
parce qu'ils sont assez basique,

84
00:04:56,654 --> 00:05:00,612
et il est important que nous obtenons
les bases triées, bien sûr.

85
00:05:00,612 --> 00:05:04,089
Donc, la première chose que
vous notez ici, est-ce <i> var </ i>.

86
00:05:05,189 --> 00:05:08,511
<I> var </ i> est un mot-clé en
JavaScript et cela signifie simplement:

87
00:05:09,331 --> 00:05:11,251
Vous êtes maintenant définir une variable.

88
00:05:11,251 --> 00:05:14,071
Donc, nous allons utiliser ceci
assez fortement.

89
00:05:14,711 --> 00:05:16,852
Ensuite, vous donnez cette variable un nom.

90
00:05:16,852 --> 00:05:20,823
Ici, dans ce cas, nous lui donnons
le nom <i> A1A1 </ i>.

91
00:05:20,823 --> 00:05:26,828
Maintenant, vous pouvez être assez
libérale pour donner des noms de variables.

92
00:05:27,688 --> 00:05:29,861
Il y a quelques règles.

93
00:05:29,861 --> 00:05:34,955
La première règle est: Vous n'êtes pas autorisé
à utiliser un mot clé en JavaScript,

94
00:05:35,595 --> 00:05:37,623
tel que, par exemple, <i> var </ i>.

95
00:05:37,623 --> 00:05:38,877
Il y a un peu.

96
00:05:38,877 --> 00:05:42,361
Comme nous continuer dans le cours, vous
apprendrez beaucoup, beaucoup de ceux-là

97
00:05:42,361 --> 00:05:48,933
et si jamais vous entrer dans la situation où
vous utilisez un mot-clé comme une variable,

98
00:05:48,933 --> 00:05:51,881
vous remarquerez probablement
assez rapidement.

99
00:05:51,881 --> 00:05:54,853
Donc, ceci est probablement une erreur,
vous ne serez pas vraiment faire.

100
00:05:54,853 --> 00:05:57,695
D'une manière générale, en règle générale,

101
00:05:57,695 --> 00:06:01,063
essayer de donner des variables
des noms significatifs,

102
00:06:01,063 --> 00:06:06,654
puis il est très peu probable que vous seriez
jamais en conflit avec cette règle.

103
00:06:06,654 --> 00:06:12,146
Donc, la deuxième considération est que
vous ne pouvez pas démarrer avec un certain nombre,

104
00:06:12,146 --> 00:06:14,815
donc cela est une règle importante.

105
00:06:14,815 --> 00:06:17,035
En fait, la règle actuelle est que:

106
00:06:17,035 --> 00:06:21,925
Il peut commencer par un signe
de dollar, et de souligner, ou toute lettre.

107
00:06:21,925 --> 00:06:23,704
Mais pour des raisons pratiques,

108
00:06:23,704 --> 00:06:27,496
commencez simplement
par une lettre et vous serez très bien.

109
00:06:27,496 --> 00:06:29,894
Voici donc ceci est
un nom parfaitement légal,

110
00:06:29,894 --> 00:06:32,985
il commence par une lettre
et il a des chiffres et des lettres,

111
00:06:32,985 --> 00:06:35,230
donc<i> A1A1 </ i>, qui est très bien.

112
00:06:35,230 --> 00:06:38,613
Ou, bien sûr, <i> A2A2 </ i>,
<i> a1a2 </ i>, tout comme bien.

113
00:06:39,703 --> 00:06:44,323
Maintenant, cela est, en fait, la partie
la plus inutiles ici sans importance,

114
00:06:44,323 --> 00:06:46,728
ce qui est une source de confusion,

115
00:06:46,728 --> 00:06:49,861
en particulier, par des gens
qui n'ont jamais codés avant,

116
00:06:49,861 --> 00:06:52,706
donc ceci est, évidemment, le signe égal.

117
00:06:52,706 --> 00:06:55,889
Mais, il est important de ne pas
penser à ce terme maintenant, ici,

118
00:06:55,889 --> 00:06:58,566
de cette expression, comme une équation.

119
00:06:58,566 --> 00:07:04,045
Ceci est, en fait, le <i> opérateur d'affectation
</ i> car il attribue des valeurs aux variables.

120
00:07:04,045 --> 00:07:07,526
Pas seulement en JavaScript, mais, en fait,
dans de nombreux langages de programmation.

121
00:07:08,226 --> 00:07:10,333
Et, la façon de penser à ce sujet est que,

122
00:07:10,333 --> 00:07:13,196
ici, sur le côté droit,
vous avez ce numéro.

123
00:07:13,196 --> 00:07:18,185
Cela va maintenant s'affecté
à cette variable <i> A1A1 </ i>.

124
00:07:18,185 --> 00:07:22,966
Donc, <i> A1A1 </ i> ici est comme un <i> conteneur </ i>,
et il peut contenir beaucoup de choses.

125
00:07:22,966 --> 00:07:24,387
Dans cette ligne particulière,

126
00:07:24,387 --> 00:07:27,266
nous attribuons un numéro
à cette <i> conteneur </ i>.

127
00:07:28,126 --> 00:07:29,918
Et c'est vraiment important de comprendre,

128
00:07:29,918 --> 00:07:33,297
que cela ne constitue, en fait,
une équation mathématique,

129
00:07:33,297 --> 00:07:35,236
il est tout simplement une <i>mission </ i>.

130
00:07:35,236 --> 00:07:38,446
Et la raison pour laquelle
cela est important est parce que, sinon,

131
00:07:38,446 --> 00:07:40,657
il pourrait se confondre sur la ligne.

132
00:07:40,657 --> 00:07:43,160
Donc, nous faisons la même chose,
en fait, ici-bas.

133
00:07:43,160 --> 00:07:45,607
Nous initialisons encore une variable.

134
00:07:45,607 --> 00:07:47,246
Nous la nommant <i> A2A2 </ i>,

135
00:07:47,246 --> 00:07:51,278
puis nous affecter la valeur
de 0,35 à cette variable.

136
00:07:51,278 --> 00:07:55,157
Et puis, ici, sur la troisième ligne, nous faisons
quelque chose de légèrement différent.

137
00:07:55,157 --> 00:08:00,407
Nous créons encore une fois une variable,
nous la nommant <i> a1a2 </ i>,

138
00:08:00,407 --> 00:08:02,447
et nous attribuons encore une valeur,

139
00:08:02,447 --> 00:08:04,888
mais nous ne tapons pas
simplement la valeur,

140
00:08:04,888 --> 00:08:10,488
nous laissons JavaScript calculer
la valeur en utilisant moins et plus,

141
00:08:10,488 --> 00:08:11,516
et ces parentheses

142
00:08:11,516 --> 00:08:14,556
vous pouvez les utiliser comme
vous les utiliserez en math

143
00:08:14,556 --> 00:08:17,427
pour simplement regrouper les choses.

144
00:08:17,427 --> 00:08:21,098
Et la façon de lire cela quand
vous voyez ce signe égal

145
00:08:21,098 --> 00:08:24,987
est que, d'abord,
le côté droit du signe égal

146
00:08:24,987 --> 00:08:27,856
est interprété, est exécuté,
obtient calculée,

147
00:08:27,856 --> 00:08:32,890
puis le résultat de cela est stockée
dans tout ce qui est ici,

148
00:08:32,890 --> 00:08:36,124
ou affecté, sur le côté gauche.

149
00:08:36,684 --> 00:08:39,836
Donc, dans ce cas, nous ajoutons
simplement ces deux nombres

150
00:08:39,836 --> 00:08:42,261
qui sont actuellement stockés ici,
dans ces deux variables,

151
00:08:42,261 --> 00:08:45,349
puis on soustrait cette somme de un.

152
00:08:45,349 --> 00:08:48,240
Et, ceci est une autre chose importante ici:

153
00:08:48,840 --> 00:08:53,299
Déclarations finissent,
en JavaScript, avec le point-virgule.

154
00:08:53,299 --> 00:08:58,950
D'accord, donc, toujours mettre fin à vos lignes,
quand c'est une déclaration, avec un point-virgule.

155
00:08:59,690 --> 00:09:05,137
Maintenant, je vais faire
quelque chose d'autre, qui est:

156
00:09:05,137 --> 00:09:09,020
Je voudrais calculer
les fréquences des allèles

157
00:09:09,020 --> 00:09:12,428
basés sur les fréquences des génotypes,
et nous l'avons fait auparavant.

158
00:09:12,428 --> 00:09:15,315
Et nous venons de voir
cette notation<i> p </ i> et <i> q </ i>,

159
00:09:15,315 --> 00:09:18,509
nous allons donc assigner deux variables.

160
00:09:18,509 --> 00:09:20,963
Créons les first-- <i> p </ i> et <i> q </ i>

161
00:09:20,963 --> 00:09:23,738
puis attribuer des valeurs à celles-ci.

162
00:09:23,738 --> 00:09:27,584
Alors, comment nous calculons
la fréquence de l'allèle de A1,

163
00:09:27,584 --> 00:09:29,370
compte tenu de ces fréquences de génotype?

164
00:09:29,370 --> 00:09:33,527
Et, bien sûr, nous avons fait cela maintenant,
deux ou trois fois dans les vidéos précédentes.

165
00:09:33,527 --> 00:09:37,656
C'est tout simplement, la fréquence
de  génotype <i> A1A1 </ i>

166
00:09:37,656 --> 00:09:42,077
parce que tous les alleles de
ce génotype sont, en fait, de type A1,

167
00:09:42,077 --> 00:09:46,906
en plus, la moitié de la <i> a1a2 </ i>.

168
00:09:46,906 --> 00:09:49,608
Donc, <i> a1a2 / 2 </ i>.

169
00:09:50,598 --> 00:09:53,195
Divisé par deux parce que
seulement la moitié des allèles

170
00:09:53,195 --> 00:09:56,535
dans le génotype hétérozygote
sont, en fait, A1.

171
00:09:57,287 --> 00:09:59,828
Et nous pouvons maintenant
faire la même chose avec <i> q </ i>,

172
00:09:59,828 --> 00:10:03,237
mais nous allons nous faire gagner du temps,
et nous allons simplement dire,

173
00:10:03,237 --> 00:10:06,518
ceci est <i> 1 - p </ i>

174
00:10:06,518 --> 00:10:10,093
parce que nous savons que <i> p </ i>
et <i> q </ i> dois ajouter jusqu'à un.

175
00:10:10,093 --> 00:10:12,401
Nous avons donc ce code en place.

176
00:10:12,401 --> 00:10:16,778
<i> Enregistrons </ i> et nous allons
revenir au navigateur,

177
00:10:16,778 --> 00:10:20,072
et nous allons voir ce que cela ressemble.

178
00:10:20,616 --> 00:10:23,693
Ici, cela est encore l'ancienne version:
"Bonjour tout le monde à partir de JavaScript,"

179
00:10:23,693 --> 00:10:28,243
nous allons donc recharger
cela, et il n'y a rien ici.

180
00:10:28,703 --> 00:10:30,941
Alors, pourquoi est-il rien ici?

181
00:10:30,941 --> 00:10:33,768
Est-ce que le code ne fonctionne pas?
Est-il pas en cours d'exécution?

182
00:10:33,768 --> 00:10:37,793
Eh bien, il travaille probablement
parce que s'il y avait des erreurs

183
00:10:38,953 --> 00:10:40,943
une erreur de syntaxe ou
quelque chose comme cela

184
00:10:40,943 --> 00:10:43,494
la console vous montrera en fait
une erreur ici.

185
00:10:43,494 --> 00:10:48,045
Donc, cela signifie, ou tout au moins sugére,
que le code fonctionne sans doute,

186
00:10:48,045 --> 00:10:50,748
alors, pourquoi est-il ne sort rien?

187
00:10:50,748 --> 00:10:54,725
Eh bien, revenons à notre code,
et, bien sûr, nous remarquons ici,

188
00:10:54,725 --> 00:10:59,025
eh bien, nous n'instruisons pas réellement
JavaScript pour produire quoi que ce soit.

189
00:10:59,705 --> 00:11:02,516
Et cela est tout simplement
la règle générale, bien sûr,

190
00:11:02,516 --> 00:11:05,018
cela est vrai dans toutes
les langues de programmation:

191
00:11:06,468 --> 00:11:09,505
Vous avez besoin de charger
la langue de faire quelque chose,

192
00:11:09,505 --> 00:11:12,876
sinon, les choses ne se ferons pas
simplement automatiquement.

193
00:11:12,876 --> 00:11:17,002
Donc, nous allons attribuer
ces valeurs par <i> affectation directe </ i>

194
00:11:17,002 --> 00:11:20,807
ou par <i> cession indirecte </ i>
par le calcul,

195
00:11:21,407 --> 00:11:22,672
comme nous le faisons ici.

196
00:11:22,672 --> 00:11:25,926
Et ici, cela fonctionne tout correctement,

197
00:11:25,926 --> 00:11:29,446
mais nous ne sommes pas
en fait sortir les valeurs ici.

198
00:11:29,446 --> 00:11:31,989
Donc, nous allons faire cela
dans la vidéo suivante.

199
00:11:31,989 --> 00:11:36,706
Dans cette vidéo, il était important pour moi
que vous obtenez cette notation ici bas:

200
00:11:36,706 --> 00:11:41,518
Comment pouvons-nous attribuer des valeurs
à des variables que nous initions.

201
00:11:41,518 --> 00:11:44,508
Et puis, ici, vous pouvez le voir, vous pouvez utiliser
un peu de mathématiques de base,

202
00:11:44,508 --> 00:11:48,726
assez simple: plus, divisé par, moins,

203
00:11:48,726 --> 00:11:52,137
et vous pouvez utiliser les astérisques
pour faire la multiplication.

204
00:11:52,137 --> 00:11:56,865
Donc, ce sont des éléments
JavaScript assez élémentaires.

205
00:11:57,449 --> 00:12:00,454
Ainsi, dans la vidéo suivante
nous allons émettre ces valeurs,

206
00:12:00,454 --> 00:12:02,899
puis nous calculons
les fréquences génotypiques,

207
00:12:02,899 --> 00:12:05,346
dans la prochaine génération,
donc je vais vous y voir.

