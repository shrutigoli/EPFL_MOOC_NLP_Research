1
00:00:03,710 --> 00:00:05,170
Welcome back, Nature in Code.

2
00:00:05,170 --> 00:00:07,790
We are in Chapter 2, Lecture 9.

3
00:00:07,790 --> 00:00:11,680
In this video, I want to clean up a
few things with the rounding error

4
00:00:11,680 --> 00:00:14,530
and introduce an important concept,

5
00:00:14,530 --> 00:00:18,210
namely that of returning 
values from functions.

6
00:00:18,210 --> 00:00:21,560
So if you take a look here at our console,
we have this rounding error.

7
00:00:21,560 --> 00:00:24,960
It's pretty ugly and it's irrelevant 
for our purpose here.

8
00:00:24,960 --> 00:00:27,600
So, why don't we just
output a rounded number?

9
00:00:27,600 --> 00:00:32,240
Something that's rounded down to 
maybe 2 digits after the decimal point.

10
00:00:32,340 --> 00:00:33,820
Something like that.

11
00:00:33,820 --> 00:00:35,590
So how would we do this?

12
00:00:35,590 --> 00:00:38,810
Well, it turns out
that JavaScript in the browser,

13
00:00:38,810 --> 00:00:45,090
comes with a pretty handy function
called <i>Math.round</i>.

14
00:00:45,090 --> 00:00:48,880
So again this capital "M", <i>Math.round</i>.

15
00:00:49,220 --> 00:00:52,480
This method actually takes one argument,

16
00:00:52,480 --> 00:00:53,630
namely a number.

17
00:00:53,630 --> 00:00:57,570
Let's for example put 1.23456.

18
00:00:57,570 --> 00:01:02,070
If we hit enter,
what we see here is the value 1.

19
00:01:02,160 --> 00:01:06,220
so this has been rounded down and 
that's what <i>Math.round</i> does.

20
00:01:06,470 --> 00:01:11,410
It takes a number and rounds it
down or up to the next integer,

21
00:01:11,410 --> 00:01:12,830
the next whole number.

22
00:01:12,830 --> 00:01:19,830
So if we would instead say 
"<i>Math.round</i> 1.6", for example,

23
00:01:20,280 --> 00:01:25,890
this would be round up because 1.6 
is closer to 2 then it is to 1.

24
00:01:26,190 --> 00:01:29,480
Now, unfortunately,
<i>Math.round</i> does only that.

25
00:01:29,480 --> 00:01:37,020
It doesn't come with the ability to round
two specific, desired number of digits

26
00:01:37,020 --> 00:01:38,260
after the decimal point.

27
00:01:38,260 --> 00:01:40,620
So we somehow have to do this ourselves.

28
00:01:40,620 --> 00:01:44,430
but we can use the functionality
of <i>Math.round</i>.

29
00:01:44,430 --> 00:01:46,270
so how would we do this?

30
00:01:46,270 --> 00:01:47,880
How would we say, you know,

31
00:01:47,880 --> 00:01:52,400
rounded down to two points
after the decimal point here.

32
00:01:52,400 --> 00:01:54,250
Two digits after 
the decimal point.

33
00:01:54,250 --> 00:01:56,200
There's actually a neat little trick.

34
00:01:56,580 --> 00:02:02,300
What we need to do is, we simply 
need to first shift the decimal here

35
00:02:02,300 --> 00:02:04,370
over by 2,

36
00:02:04,370 --> 00:02:07,740
then we need to use
the <i>Math.round</i> functionality

37
00:02:07,740 --> 00:02:11,770
to get rid of everything
after those two digits

38
00:02:11,770 --> 00:02:15,400
and then we need
to shift the decimal point back.

39
00:02:15,610 --> 00:02:18,940
so concretely what
this would look like is,

40
00:02:19,270 --> 00:02:24,640
if you take for example 1.23456,
we multiply this by hundreds,

41
00:02:24,640 --> 00:02:25,640
what do we get?

42
00:02:25,640 --> 00:02:27,480
Well, we get the whole thing shifted,

43
00:02:27,480 --> 00:02:31,220
the decimal point shifted
by two points over here

44
00:02:31,220 --> 00:02:35,650
and here is our new or old friend,
the rounding error again.

45
00:02:35,650 --> 00:02:38,790
But we're not gonna care about this,
because what will do now

46
00:02:38,830 --> 00:02:42,630
is we will essentially take this number 
and we pass it to <i>Math.round</i>.

47
00:02:42,630 --> 00:02:46,010
So what we will do is
we would take <i>Math.round</i>

48
00:02:46,010 --> 00:02:51,440
and now pass in (1.23456 times 100).

49
00:02:53,670 --> 00:02:57,130
I was missing the closing parenthesis.

50
00:02:57,130 --> 00:02:57,870
All right.

51
00:02:57,870 --> 00:03:02,490
So now we've gotten rid of 
everything after the 3,

52
00:03:02,490 --> 00:03:06,240
which is exactly what we wanted
because we multiplied by 100

53
00:03:06,240 --> 00:03:10,440
thereby shifting the decimal point
two places to the right

54
00:03:10,440 --> 00:03:12,100
and then rounding it.

55
00:03:12,100 --> 00:03:16,980
And now we simply need to go back
to the correct order of magnitude.

56
00:03:16,980 --> 00:03:22,310
we multiplied it by 100, so now
we simply need to divide it by 100 again.

57
00:03:22,310 --> 00:03:24,620
All right, so basically
what this would be, then,

58
00:03:24,620 --> 00:03:30,990
it would be "<i>Math.round</i>(1.23456 x 100)"

59
00:03:30,990 --> 00:03:32,860
and now the whole thing here,

60
00:03:32,860 --> 00:03:35,470
we simply divide it by 100 --

61
00:03:35,970 --> 00:03:38,390
and that is 1.23

62
00:03:38,390 --> 00:03:42,570
and that is exactly how this 
number should be rounded

63
00:03:42,570 --> 00:03:47,720
if we wanted to round it to two digits 
after the decimal point.

64
00:03:47,720 --> 00:03:49,430
So that's a neat little trick.

65
00:03:49,430 --> 00:03:52,610
Let's implement this
into a generic function,

66
00:03:53,290 --> 00:03:59,130
so let's go back to our code and 
let's maybe add a function here.

67
00:03:59,310 --> 00:04:00,090
Okay,

68
00:04:00,090 --> 00:04:03,740
so I'm gonna call this function
<i>round_number</i>.

69
00:04:04,130 --> 00:04:05,620
That seems like a good name,

70
00:04:05,620 --> 00:04:07,380
because as we said in the beginning,

71
00:04:07,380 --> 00:04:10,260
we should name our functions
according to what they do

72
00:04:10,260 --> 00:04:12,610
and this function is supposed
to round the number.

73
00:04:12,610 --> 00:04:14,080
So that's fine.

74
00:04:14,080 --> 00:04:18,470
And then this function now,
with the parentheses as always,

75
00:04:18,470 --> 00:04:22,680
should now take an argument,
so I have to define a parameter here

76
00:04:22,680 --> 00:04:28,020
and I am going to call it <i>value</i>
because that's a pretty generic term

77
00:04:28,020 --> 00:04:31,650
and that is essentially
what I expect to be passed in

78
00:04:31,650 --> 00:04:33,580
when this function is called.

79
00:04:34,090 --> 00:04:39,600
So, the function body here
should contain this code

80
00:04:39,600 --> 00:04:44,160
"math dot random",
sorry, "round", not random.

81
00:04:44,160 --> 00:04:47,900
we take the number 
that was passed to us, so <i>value</i>

82
00:04:47,900 --> 00:04:50,680
we multiply it by 100
as we have seen

83
00:04:51,240 --> 00:04:54,070
then we round this product down

84
00:04:55,180 --> 00:04:58,670
to the next integer
and now we divide it back

85
00:05:00,240 --> 00:05:01,370
by 100,

86
00:05:01,370 --> 00:05:04,470
so they were in the correct magnitude.

87
00:05:06,000 --> 00:05:09,800
and a semicolon to end the expression.

88
00:05:09,800 --> 00:05:10,850
All right.

89
00:05:10,850 --> 00:05:12,430
So now,

90
00:05:12,430 --> 00:05:17,540
this is a function that takes one 
argument, one parameter

91
00:05:17,540 --> 00:05:20,750
we can call this function
and we can pass in an argument

92
00:05:20,750 --> 00:05:22,930
so anything, any number
that we want to

93
00:05:22,930 --> 00:05:25,040
and it will be rounded down correctly

94
00:05:25,040 --> 00:05:30,630
to two points after the decimal,
two digits after the decimal point.

95
00:05:30,630 --> 00:05:34,370
The only problem here
is that that calculation,

96
00:05:34,370 --> 00:05:37,600
the result of the calculation
would actually be lost

97
00:05:38,070 --> 00:05:40,970
it would just be calculated
and then "boom",

98
00:05:40,970 --> 00:05:42,710
It would be gone.

99
00:05:42,710 --> 00:05:47,270
What we need is, we need a way
to actually return this value

100
00:05:47,310 --> 00:05:51,680
to the point where the function
was called in the first place

101
00:05:51,680 --> 00:05:55,580
and this is an very important concept 
when it comes to functions

102
00:05:55,950 --> 00:05:58,010
and doing this,

103
00:05:58,190 --> 00:05:59,390
this returning.

104
00:05:59,390 --> 00:06:04,230
We actually use a very meaningful 
keyword which is called <i>return</i>.

105
00:06:04,430 --> 00:06:07,780
Okay, and you can see here
by the automatic color coding

106
00:06:07,780 --> 00:06:10,700
that it recognizes this as a key word.

107
00:06:10,790 --> 00:06:14,600
So we are here
calculating this expression

108
00:06:14,600 --> 00:06:17,240
and then we are returning that value

109
00:06:17,280 --> 00:06:21,430
to whomever called this function
in the first place.

110
00:06:22,240 --> 00:06:24,990
So where would we like
to call this function?

111
00:06:24,990 --> 00:06:26,910
Well, here in this particular code,

112
00:06:26,910 --> 00:06:30,970
we would like to call it in six places,
namely, here, here and here.

113
00:06:31,070 --> 00:06:33,440
And then down here,
here and here.

114
00:06:33,590 --> 00:06:35,130
So, let's go ahead and do this.

115
00:06:35,130 --> 00:06:38,500
So rather than passing here "a1a1",

116
00:06:38,500 --> 00:06:45,000
to console lock, we actually
first want to filter this value

117
00:06:45,000 --> 00:06:48,390
by passing it through
the <i>round_number</i> function,

118
00:06:48,390 --> 00:06:55,380
so I'm simply gonna say
"round_number(a1a1)"

119
00:06:55,380 --> 00:06:56,510
Okay.

120
00:06:56,510 --> 00:06:58,630
Instead of just "a1a1".

121
00:06:58,630 --> 00:07:03,480
So what happens here is 
we'll take this value,

122
00:07:03,480 --> 00:07:05,200
we will pass it to this function,

123
00:07:05,470 --> 00:07:07,340
something is being calculated,

124
00:07:07,340 --> 00:07:09,700
hopefully correctly,
If we did this right.

125
00:07:10,150 --> 00:07:12,280
And then this value is returned

126
00:07:12,590 --> 00:07:17,540
to where we actually called
this function in the first place.

127
00:07:17,710 --> 00:07:19,960
Essentially put here.

128
00:07:21,190 --> 00:07:25,830
And so we can do this
with the with the other six,

129
00:07:25,830 --> 00:07:28,440
the other five examples, as well.

130
00:07:28,440 --> 00:07:32,170
So here we would simply put a
"round _number(a1a2)~,

131
00:07:32,170 --> 00:07:37,280
and here we would simply put
"round_number(a2a2)"

132
00:07:37,280 --> 00:07:41,990
and the same thing down here
so "round_number(a1a1)",

133
00:07:41,990 --> 00:07:49,210
"round_number(a1a2)",
and "round_number(a2a2)"

134
00:07:50,090 --> 00:07:53,270
All right, so let's save this 
and go back to the browser

135
00:07:53,270 --> 00:07:54,420
and see if this worked

136
00:07:54,420 --> 00:07:56,220
Okay, so I am here in this document,

137
00:07:56,220 --> 00:07:59,570
I am reloading and boom--
it worked beautifully.

138
00:07:59,570 --> 00:08:03,540
So as you can see the numbers here 
are now rounded correctly

139
00:08:03,540 --> 00:08:08,140
down to two digits
after the decimal point.

140
00:08:08,840 --> 00:08:10,990
So this worked great.

141
00:08:10,990 --> 00:08:13,240
now, maybe 
one other question.

142
00:08:13,240 --> 00:08:17,330
So this is great that we now have 
this tool that rounds a number,

143
00:08:17,330 --> 00:08:22,520
but it rounds it to two digits
after the decimal point.

144
00:08:22,520 --> 00:08:24,570
And this is hard-coded.

145
00:08:24,570 --> 00:08:29,020
is there a way for us
to make this function even more generic,

146
00:08:29,020 --> 00:08:33,400
so that we can let a user,
not only pass in the number that is

147
00:08:33,560 --> 00:08:36,440
to be rounded, but also the precision?

148
00:08:36,440 --> 00:08:40,170
How many digits after the decimal point?

149
00:08:41,030 --> 00:08:42,730
Well, absolutely we can do this.

150
00:08:42,730 --> 00:08:48,380
So, why don't we go ahead
and simply define

151
00:08:48,380 --> 00:08:53,000
a second parameter for this function,
which I'm now gonna call <i>decimals</i>.

152
00:08:53,460 --> 00:08:59,460
Okay, so what this would be
for example in this concrete case

153
00:08:59,520 --> 00:09:03,620
where we would like it to be
two digits after the decimal point

154
00:09:06,840 --> 00:09:10,540
This value should be 2,
because we want it shifted by 2

155
00:09:11,240 --> 00:09:13,950
and so this value here,
as we know, is correct,

156
00:09:13,950 --> 00:09:18,990
we need to, therefore, multiply the value
by 100 and then divide it again by 100.

157
00:09:19,090 --> 00:09:21,830
So if this value, for example, were 3,

158
00:09:21,830 --> 00:09:22,970
this <i>decimals</i>,

159
00:09:23,940 --> 00:09:26,870
which means that we would like 
the number to be rounded to

160
00:09:26,870 --> 00:09:29,920
three digits after the decimal point,

161
00:09:30,500 --> 00:09:35,730
Then, we would have to multiply this
by 1,000 and divide it by 1,000

162
00:09:35,860 --> 00:09:40,650
If it were 4, we would have to that 
multiplied by 10,000 and then

163
00:09:40,650 --> 00:09:43,140
divided by 10,000 and so on,

164
00:09:43,290 --> 00:09:47,290
so the trick here is that
this number should be hard-coded

165
00:09:47,290 --> 00:09:52,350
but it should actually
be dependent on the <i>decimals</i> here.

166
00:09:52,350 --> 00:09:54,890
And we can do this,

167
00:09:54,890 --> 00:09:59,380
so it's should simply be 10 to the power
of whatever we have in <i>decimals</i>

168
00:10:00,140 --> 00:10:04,130
and there's a really nice function
actually that helps us do this

169
00:10:04,130 --> 00:10:08,110
and it's called <i>math.pow</i>,

170
00:10:08,110 --> 00:10:10,740
it takes two arguments,

171
00:10:10,740 --> 00:10:12,880
namely the base and the exponent,

172
00:10:12,880 --> 00:10:18,020
so, in our cases it would be
"10 exponent decimals".

173
00:10:18,020 --> 00:10:19,490
so if <i>decimals</i> is 2,

174
00:10:19,490 --> 00:10:22,180
then this would be
10 to the power of 2,

175
00:10:22,180 --> 00:10:25,410
if it were 3, it would be
10 to the power of 3 and so on.

176
00:10:25,670 --> 00:10:31,200
Now we're gonna store this here
in a variable that I'm gonna call <i>shifter</i>.

177
00:10:31,580 --> 00:10:33,650
"Shifter", because it is shifting.

178
00:10:33,650 --> 00:10:35,600
It is shifting the decimal point.

179
00:10:35,600 --> 00:10:39,740
And then we shouldn't forget to 
end this line here with a semicolon,

180
00:10:39,950 --> 00:10:43,400
and now instead of this
hard-coded 100 here

181
00:10:43,400 --> 00:10:47,570
I am simply gonna replaced
this 100 with the <i>shifter</i>,

182
00:10:47,570 --> 00:10:49,910
whatever value we have in the <i>shifter</i>.

183
00:10:50,610 --> 00:10:51,700
So--

184
00:10:52,250 --> 00:10:55,160
Now, the only thing
that we need to do is we need--

185
00:10:55,160 --> 00:10:56,980
wherever we are calling this function,

186
00:10:56,980 --> 00:11:01,200
we are now expected to pass in
two arguments, not just one.

187
00:11:01,200 --> 00:11:02,570
So let's do that here, Okay?

188
00:11:02,630 --> 00:11:07,560
Let's put in a 2 here,
so comma 2, as the decimal,

189
00:11:07,560 --> 00:11:11,060
so we're passing the value,
and that the decimals,

190
00:11:11,060 --> 00:11:15,860
and same down here, 0.2 and 0.2

191
00:11:16,810 --> 00:11:19,860
and sorry, "comma" 2.

192
00:11:19,960 --> 00:11:21,170
Okay, <i>save</i>,

193
00:11:21,480 --> 00:11:24,550
and now, let's move over
to the browser and see if this works.

194
00:11:24,550 --> 00:11:27,960
So we're going to reload this document 
and nothing changed,

195
00:11:27,960 --> 00:11:29,820
so the output here is still the same,

196
00:11:29,820 --> 00:11:30,990
which is correct,

197
00:11:30,990 --> 00:11:34,200
but actually behind the scenes we made--

198
00:11:34,640 --> 00:11:38,830
we made a much more generic 
round number function.

199
00:11:38,830 --> 00:11:39,750
Indeed,

200
00:11:39,750 --> 00:11:43,780
if we were to go back and replace 
these 2s with, for example, 1

201
00:11:45,420 --> 00:11:52,060
we should see all those numbers rounded
to one digit after the decimal point.

202
00:11:52,060 --> 00:11:53,490
Let me save this,

203
00:11:53,490 --> 00:11:55,370
go back to the browser reload.

204
00:11:55,370 --> 00:11:57,360
And indeed this is happening,

205
00:11:57,360 --> 00:12:00,680
but you can see that
this is not a good idea here

206
00:12:00,770 --> 00:12:04,380
because things are individually,
correctly rounded,

207
00:12:04,380 --> 00:12:08,330
but these are independent calculations 
from each other.

208
00:12:08,330 --> 00:12:11,470
And so what happens is that actually 
these numbers would add up to

209
00:12:11,550 --> 00:12:13,150
something that is greater than 1.

210
00:12:13,150 --> 00:12:15,940
And that's obviously not desired.

211
00:12:15,940 --> 00:12:19,260
So we're gonna leave this as--
with a 2 here.

212
00:12:19,800 --> 00:12:23,610
We could write a function that
takes all three values into account

213
00:12:23,610 --> 00:12:25,700
and correctly rounds,

214
00:12:25,700 --> 00:12:29,160
so that the sum will still be 1.

215
00:12:29,160 --> 00:12:33,510
but here it's just a simple function
that just takes any value,

216
00:12:33,510 --> 00:12:36,530
doesn't care about
any other values in the code

217
00:12:36,530 --> 00:12:42,140
and then rounds it down to a specific
number of digits after the decimal point.

218
00:12:42,460 --> 00:12:46,200
So this essentially solves our problem,

219
00:12:46,200 --> 00:12:50,530
let me save this again and just go back
and see if everything works as planned,

220
00:12:50,530 --> 00:12:52,160
yes indeed,

221
00:12:52,160 --> 00:12:53,740
so if you now look at this code.

222
00:12:53,740 --> 00:12:55,430
We've done a couple of things here.

223
00:12:55,430 --> 00:12:58,140
First of all we got rid
of the rounding problem

224
00:12:58,160 --> 00:13:01,100
in the context of outputting the number.

225
00:13:01,100 --> 00:13:02,740
So that's nice,

226
00:13:02,740 --> 00:13:08,140
but we also learned how to write a 
function that takes one or two

227
00:13:08,140 --> 00:13:10,140
or in fact the multiple parameters,

228
00:13:10,140 --> 00:13:15,840
which gives us a really powerful 
tool to write very generic functions.

229
00:13:16,070 --> 00:13:17,810
If you take this function down here,

230
00:13:17,810 --> 00:13:18,840
for example,

231
00:13:18,840 --> 00:13:20,510
that is not a generic function.

232
00:13:20,510 --> 00:13:25,390
It doesn't take any values. 
You simply calculate something

233
00:13:25,390 --> 00:13:27,950
and that's fine here
in the context of this example,

234
00:13:27,950 --> 00:13:29,860
but it's not a very generic function.

235
00:13:29,860 --> 00:13:32,090
This function here 
is much more generic,

236
00:13:32,090 --> 00:13:35,340
you can now pass in any 
value that you want to,

237
00:13:35,340 --> 00:13:38,950
and any number of decimals
for your precision that you want

238
00:13:38,950 --> 00:13:42,320
and it will return to correct value.

239
00:13:42,360 --> 00:13:44,910
This is a very powerful concept.

240
00:13:44,930 --> 00:13:47,990
and the other thing that
is really important here is this return.

241
00:13:47,990 --> 00:13:51,740
you can explicitly
return things from a function

242
00:13:51,770 --> 00:13:55,450
And that's actually
a very common way to go about.

243
00:13:55,450 --> 00:13:59,070
So here, for example,
we will return the calculation.

244
00:13:59,070 --> 00:14:00,890
The result this calculation here,

245
00:14:01,810 --> 00:14:03,870
but as you can see below here,

246
00:14:04,490 --> 00:14:08,900
we don't specifically, explicitly 
need to return anything.

247
00:14:09,260 --> 00:14:11,420
Functions work
without the return key word.

248
00:14:11,420 --> 00:14:16,560
if you don't return anything, actually
behind the scenes, undefined is returned.

249
00:14:16,560 --> 00:14:19,090
And that's why sometimes
it shows up in the console.

250
00:14:19,090 --> 00:14:22,050
But it's really not important for us here.

251
00:14:22,050 --> 00:14:25,260
You can return something if you want to,
you don't have to.

252
00:14:25,260 --> 00:14:28,050
Many times you actually
want to return something.

253
00:14:28,080 --> 00:14:31,190
And finally, the other thing
I'd like to mention here is that,

254
00:14:31,190 --> 00:14:36,520
once you return from the function,
then the function is terminated.

255
00:14:37,010 --> 00:14:42,170
Okay? Because you basically return 
control over to the place

256
00:14:42,170 --> 00:14:43,890
where to function has been called.

257
00:14:43,890 --> 00:14:44,860
So for example,

258
00:14:44,860 --> 00:14:50,540
anything down here,
you know, "var bla = 5;"

259
00:14:50,650 --> 00:14:54,320
that would actually never be executed,
because you would always

260
00:14:54,320 --> 00:14:57,580
return the function here
and that would be it.

261
00:14:57,980 --> 00:14:59,590
So let me get rid of this.

262
00:14:59,920 --> 00:15:05,690
Okay, so a couple of powerful ideas here
implemented in JavaScript.

263
00:15:05,690 --> 00:15:09,490
So this concludes this video.
We have learned about returned values

264
00:15:09,490 --> 00:15:13,690
and about generating
powerful, generic functions.

265
00:15:14,040 --> 00:15:17,080
In the next and final video of Chapter 2,

266
00:15:17,080 --> 00:15:21,530
I'd like to explain something else
that we have looked over so far,

267
00:15:21,530 --> 00:15:23,440
which is the concept of a scope.

268
00:15:23,440 --> 00:15:25,310
So, I'll see you in the next video.
