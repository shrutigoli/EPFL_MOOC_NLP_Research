1
00:00:03,500 --> 00:00:07,030
(Marcel) Welcome back. Nature, In Code. 
We're in Chapter 2, Lecture 6.

2
00:00:07,030 --> 00:00:11,600
We started implementing Hardy-Weinberg 
in JavaScript and in this video,

3
00:00:11,600 --> 00:00:15,840
we're gonna output values and then 
we're gonna actually generate

4
00:00:15,840 --> 00:00:18,780
and calculate the next generation.

5
00:00:18,780 --> 00:00:20,930
So this is where we left off.

6
00:00:20,930 --> 00:00:24,460
We assigned values for these
genotype frequencies,

7
00:00:24,460 --> 00:00:27,610
and then we calculated 
the allele frequencies in JavaScript

8
00:00:27,610 --> 00:00:29,930
but we noticed that nothing

9
00:00:29,930 --> 00:00:34,420
is logged into the <i>Console.</i>
And that's of course because we didn't add

10
00:00:34,420 --> 00:00:38,220
an instruction here to actually 
tell JavaScript to do that.

11
00:00:38,220 --> 00:00:42,480
So we're gonna use this 
<i>console.log</i> command again.

12
00:00:44,210 --> 00:00:49,740
And I'm gonna ask you to again 
follow me and do what I do here

13
00:00:49,740 --> 00:00:52,720
and I'll explain how this 
works in a second.

14
00:00:52,720 --> 00:00:56,060
So I have this <i>console.log</i>
with parentheses,

15
00:00:56,060 --> 00:00:59,360
and the semicolon here at the end.

16
00:00:59,360 --> 00:01:03,340
Now what I'm gonna do is 
I'm gonna write in quotes.

17
00:01:03,340 --> 00:01:10,160
So first quote then
"generation" <i>Space</i> "0" colon.

18
00:01:10,160 --> 00:01:15,220
Then <i>Backslash T</i>. 
Now, quotes again.

19
00:01:15,220 --> 00:01:17,420
<i>Plus</i> "a1a1."

20
00:01:18,940 --> 00:01:25,570
And then again, <i>Plus</i>, quote, 
<i>Backslash T</i>, quote.

21
00:01:25,570 --> 00:01:28,790
Then again, <i>Plus</i> "a1a2" this time.

22
00:01:28,790 --> 00:01:34,900
And then again <i>Plus</i>, quote, 
<i>Backslash T</i>, quote,

23
00:01:34,900 --> 00:01:39,130
and then again <i>Plus</i>, now "a2a2."

24
00:01:39,130 --> 00:01:45,340
So this is now the correct line 
and we'll talk about this in a second.

25
00:01:45,350 --> 00:01:49,070
First, let's see if this actually worked.
So let's save this.

26
00:01:49,070 --> 00:01:53,250
Go back to the browser 
and let's take a look here.

27
00:01:53,250 --> 00:01:58,640
So I'm gonna reload this document here.
Okay, careful, reload, and boom,

28
00:01:58,640 --> 00:02:03,880
here it is, "generation 0", 
"0.15", "0.5", "0.35."

29
00:02:03,880 --> 00:02:05,410
This is exactly correct,

30
00:02:05,410 --> 00:02:06,480
as it should be.

31
00:02:06,480 --> 00:02:10,500
So let's go back to the code
and let's take a look at this line here.

32
00:02:10,500 --> 00:02:13,430
So there's a couple of things 
I want to mention here.

33
00:02:13,430 --> 00:02:18,580
First of all, what are those quotes 
and what do they stand for?

34
00:02:18,580 --> 00:02:23,270
And then what is this "+", shouldn't 
we use "+" for additions?

35
00:02:23,270 --> 00:02:26,110
Are we adding here values? 
What's going on here?

36
00:02:26,110 --> 00:02:29,390
And then the last thing 
I'd like to address is

37
00:02:29,390 --> 00:02:32,040
what on earth is this "\t"?

38
00:02:32,340 --> 00:02:34,340
So first the quotes.

39
00:02:34,340 --> 00:02:36,550
The quotes are actually
incredibly important.

40
00:02:36,550 --> 00:02:42,280
The quotes simply instruct JavaScript
to essentially not care

41
00:02:42,280 --> 00:02:44,240
about what's in here.

42
00:02:44,240 --> 00:02:45,960
Or to not think about it,

43
00:02:45,960 --> 00:02:49,280
to give it a slightly human touch.
It basically just says, look,

44
00:02:49,280 --> 00:02:53,550
what we have here is a string 
of characters.

45
00:02:53,550 --> 00:02:57,540
And in fact we call this <i>a string</i>
in shorthand.

46
00:02:57,540 --> 00:03:03,570
If you see a string,
just treat it as a string of characters.

47
00:03:03,570 --> 00:03:06,600
Don't over think it.
Don't interpret it as anything else.

48
00:03:06,600 --> 00:03:09,280
It's just a string of characters.

49
00:03:09,280 --> 00:03:12,470
So if we ask it to print
a string of characters,

50
00:03:12,470 --> 00:03:17,630
that's what it will do.
It'll simply print a string of characters.

51
00:03:17,630 --> 00:03:21,920
One example that could maybe make 
this a bit clearer is

52
00:03:21,920 --> 00:03:22,890
take a look at this.

53
00:03:22,890 --> 00:03:26,550
I mean here we don't have
the quotes around this "a1a1"

54
00:03:26,560 --> 00:03:30,710
So in the context of this method, 
JavaScript will actually,

55
00:03:31,050 --> 00:03:33,480
simply see what's in this variable.

56
00:03:33,480 --> 00:03:37,440
In this case it's "0.15"
and then it will interpret this

57
00:03:37,440 --> 00:03:42,600
as a string and output it 
into the <i>Console</i> as "0.15."

58
00:03:42,600 --> 00:03:46,470
Let's see what would happen 
if we actually put quotes

59
00:03:46,470 --> 00:03:48,150
around this "a1a1".

60
00:03:48,450 --> 00:03:50,190
So now what this would mean,

61
00:03:50,190 --> 00:03:52,740
is simply, we're essentially
telling JavaScript,

62
00:03:52,740 --> 00:03:54,410
"Don't worry about it.

63
00:03:54,420 --> 00:03:58,940
It's just the character 
'a', '1', and 'a', and '1'.

64
00:03:58,940 --> 00:04:00,990
Those four characters as a string.

65
00:04:00,990 --> 00:04:02,950
Don't worry about it,
just output it."

66
00:04:02,960 --> 00:04:07,650
And if you need to save this, 
go back to the browser and reload this,

67
00:04:07,650 --> 00:04:10,240
you can see that indeed "a1a1"

68
00:04:10,240 --> 00:04:14,250
literally is printed here
in the <i>Console.</i>

69
00:04:14,250 --> 00:04:16,090
But that's of course not what we want.

70
00:04:16,090 --> 00:04:21,080
We want the value that's stored 
in the variable "a1a1" to be printed.

71
00:04:21,090 --> 00:04:25,220
So we don't use the quotes here. 
So quotes simply mean,

72
00:04:25,220 --> 00:04:30,230
we simply use quotes 
to enclose literal text.

73
00:04:30,230 --> 00:04:31,900
So that's what the quotes are for.

74
00:04:31,900 --> 00:04:34,090
You can use double quotes
or use single quotes.

75
00:04:34,090 --> 00:04:36,430
Whatever you do,
just be consistent.

76
00:04:36,990 --> 00:04:42,740
So the second issue is 
with this "\t".

77
00:04:42,740 --> 00:04:46,650
This is simply 
a shorthand notation for <i>Tab</i>.

78
00:04:46,650 --> 00:04:52,700
So sometimes you wanna separate values
by having a bit of a <i>Tab</i> in between

79
00:04:52,700 --> 00:04:54,510
for visual aesthetics.

80
00:04:54,510 --> 00:04:59,300
This is how you do it, "\t".
This can come in handy quite often

81
00:04:59,300 --> 00:05:01,640
when you're outputting 
a bunch of things together

82
00:05:01,640 --> 00:05:04,960
and you need a little bit of space
between those values.

83
00:05:04,960 --> 00:05:08,770
So finally, what is this
"+" thing doing here?

84
00:05:08,770 --> 00:05:11,780
Don't we normally use "+" to add values?

85
00:05:11,780 --> 00:05:12,850
Yes, that's true,

86
00:05:12,850 --> 00:05:16,930
but there's an important exception 
here in JavaScript.

87
00:05:16,930 --> 00:05:23,340
We can actually add strings together 
and therefore build larger strings.

88
00:05:23,340 --> 00:05:26,290
So this is called <i>string concatenation.</i>

89
00:05:26,290 --> 00:05:28,610
Here in this case,
if we go back to the browser,

90
00:05:28,610 --> 00:05:31,190
what we'd like to build,
and let me reload this.

91
00:05:31,460 --> 00:05:33,590
This is actually not saved yet.

92
00:05:33,590 --> 00:05:36,130
Let me save this version without 
the quotes here.

93
00:05:36,130 --> 00:05:40,180
I'm gonna save it and then 
I'm gonna go back and reload it.

94
00:05:40,180 --> 00:05:41,880
Now we have again the proper value.

95
00:05:41,880 --> 00:05:46,910
We'd like to build this string here,
"generation 0 colon",

96
00:05:46,910 --> 00:05:50,090
<i>Tab</i> 0.15, <i>Tab</i> 0.5, <i>Tab</i> 0.35.

97
00:05:51,050 --> 00:05:54,700
And we're doing this by 
adding the pieces together.

98
00:05:54,700 --> 00:05:58,500
And we're adding those simply 
with the "+" operator.

99
00:05:58,500 --> 00:06:02,020
And when JavaScript 
sees this "+" operator,

100
00:06:02,020 --> 00:06:05,800
if one of the elements 
that are being added is a string,

101
00:06:05,800 --> 00:06:08,440
like is the case here,

102
00:06:08,440 --> 00:06:11,560
the first element here 
actually is a string,

103
00:06:11,560 --> 00:06:14,630
then it will treat 
everything else as a string.

104
00:06:14,630 --> 00:06:17,940
So if this is not a string it will 
simply look up the value

105
00:06:17,940 --> 00:06:19,710
and treat this as a string.

106
00:06:19,710 --> 00:06:24,720
This is just a handy thing.
It can potentially cause some confusion,

107
00:06:25,130 --> 00:06:29,350
if you're adding up things that 
are actually meant to be actual values,

108
00:06:29,350 --> 00:06:32,390
numerical values, but somehow 
you have a quote in there,

109
00:06:32,390 --> 00:06:34,510
and some of it's interpreted as a string.

110
00:06:34,510 --> 00:06:37,900
But this is not really something 
to worry about at this stage.

111
00:06:37,900 --> 00:06:40,420
I mean it's actually a very handy method

112
00:06:41,080 --> 00:06:46,450
to build larger strings out of 
chunks you're simply adding together.

113
00:06:46,450 --> 00:06:50,270
So this is a phenomenon that's called 
<i>string concatenation.</i>

114
00:06:50,270 --> 00:06:54,650
You'll see it throughout JavaScript.
We won't use it very heavily,

115
00:06:54,650 --> 00:06:58,820
but it's virtually impossible
to understand any other

116
00:06:58,820 --> 00:07:01,650
JavaScript code if you 
don't understand that you can

117
00:07:01,650 --> 00:07:06,890
simply add strings together, 
or values together as a larger string.

118
00:07:07,330 --> 00:07:09,350
So that's <i>string concatenation.</i>

119
00:07:09,350 --> 00:07:12,840
Now I'm saying we don't use this
because there's actually

120
00:07:12,840 --> 00:07:16,160
another way of outputting these values.

121
00:07:16,160 --> 00:07:21,370
So I'm gonna get rid of everything here
up to the colon.

122
00:07:21,380 --> 00:07:26,660
And I'm gonna put the end quote 
here and now I'm simply gonna say

123
00:07:26,670 --> 00:07:33,070
"comma a1a1", "comma a1a2",
and "comma a2a2."

124
00:07:34,240 --> 00:07:37,840
Now, first thing to observe is
that's actually already nicer

125
00:07:37,840 --> 00:07:39,780
It's already nicer to look at,

126
00:07:39,780 --> 00:07:45,090
and that's actually kind of important 
because your future self

127
00:07:45,090 --> 00:07:47,520
and others who read your code
will be thankful

128
00:07:47,520 --> 00:07:50,560
if you write nice looking 
and easy to understand code.

129
00:07:50,590 --> 00:07:53,330
So let's save this. 
We'll talk about this in a second.

130
00:07:53,330 --> 00:07:59,110
Let's save it, go back to the browser,
reload it here and,

131
00:07:59,110 --> 00:08:02,850
boom, we see this works, "generation 0". 
Again the correct values,

132
00:08:02,850 --> 00:08:08,450
"0.15", "0.5", "0.35."
Now already properly spaced

133
00:08:08,450 --> 00:08:14,780
and indeed, in fact, even color coded 
here as numbers in blue.

134
00:08:14,780 --> 00:08:18,900
In this case, in Chrome, in your browser
it may look a bit different.

135
00:08:18,910 --> 00:08:20,950
But this looks quite nice.

136
00:08:20,950 --> 00:08:23,630
Let's go back to the code 
and see what's happening here.

137
00:08:23,630 --> 00:08:27,130
How do we do this? 
Well this now happens

138
00:08:27,130 --> 00:08:29,350
behind the scenes, so to speak,

139
00:08:29,350 --> 00:08:36,080
but you should know that <i>console.log</i>
as a method really allows you

140
00:08:36,080 --> 00:08:39,840
to pass in multiple values 
not just one.

141
00:08:39,840 --> 00:08:44,550
Before we just passed one large string 
that we created through

142
00:08:44,550 --> 00:08:48,340
<i>string concatenation.</i>
In this case we're simply passing it

143
00:08:48,340 --> 00:08:52,530
four values, and if you pass
multiple values to a function

144
00:08:52,530 --> 00:08:54,280
you separate them with commas,

145
00:08:54,280 --> 00:08:56,930
and we'll learn much more about this 
in the next video.

146
00:08:56,930 --> 00:09:03,010
But here, basically passing in four values
and <i>console.log</i> will take care

147
00:09:03,010 --> 00:09:05,910
of everything automatically
behind the scenes.

148
00:09:05,910 --> 00:09:10,220
And so I much prefer this way 
of writing <i>console.log</i> statements,

149
00:09:10,220 --> 00:09:14,460
and we'll use that now throughout 
the rest of the code.

150
00:09:15,300 --> 00:09:16,990
So now let's get to the meat of it.

151
00:09:17,150 --> 00:09:19,780
So we're now outputting these values.

152
00:09:19,780 --> 00:09:24,940
But what we'd like to do is we'd now 
like to calculate the next generation.

153
00:09:24,950 --> 00:09:27,030
So how are we gonna do this?

154
00:09:27,740 --> 00:09:33,520
So what we're gonna do is simply 
recalculate these "a1a1" values.

155
00:09:33,650 --> 00:09:38,420
So "a1a1", and the "a2a2,"
and "a1a2" obviously as well.

156
00:09:38,420 --> 00:09:40,900
So "a1a1" in the next generation,

157
00:09:40,900 --> 00:09:44,010
we can calculate 
as we've done before on the slides,

158
00:09:44,010 --> 00:09:49,880
by simply calculating the product 
of the a1 frequency, which is "p".

159
00:09:49,880 --> 00:09:57,310
So "a1a1" can be calculated in the 
next generation as "p times p semicolon"

160
00:09:58,660 --> 00:10:01,190
And in a similar way,

161
00:10:01,190 --> 00:10:06,990
"a1a2" can be calculated 
as "2 times p times q."

162
00:10:08,270 --> 00:10:16,470
And "a2a2" can be recalculated 
as "q times q."

163
00:10:16,890 --> 00:10:21,420
That's how we develop it on the slides
and that's how it works.

164
00:10:21,420 --> 00:10:23,150
Now, you may ask yourself,

165
00:10:23,160 --> 00:10:28,470
"Well, so what's happening here?
Are we initializing these variables again?"

166
00:10:28,470 --> 00:10:30,800
No. They already exist.

167
00:10:30,860 --> 00:10:36,810
Because we defined them up here. 
If you assign a value

168
00:10:36,850 --> 00:10:41,550
to an already existing variable,
then the value will simply be overwritten.

169
00:10:41,550 --> 00:10:46,390
So "a1a1" before, 
so up here at this point,

170
00:10:46,390 --> 00:10:48,930
it will still store the value "0.15",

171
00:10:48,930 --> 00:10:52,900
but then as soon as we get to this line, 
this product here is calculated,

172
00:10:52,900 --> 00:10:54,440
and whatever this value is now,

173
00:10:54,440 --> 00:11:00,230
it will be stored into "a1a1",
and this value "0.15" before will be lost.

174
00:11:00,230 --> 00:11:03,180
So it's simply overwriting values.

175
00:11:03,560 --> 00:11:06,190
So let's see now, 
actually if this worked.

176
00:11:06,190 --> 00:11:08,840
So the first thing I'm gonna do
because the code now

177
00:11:08,840 --> 00:11:10,320
gets a little bit more complex,

178
00:11:10,320 --> 00:11:11,960
I'm gonna add a comment here.

179
00:11:11,960 --> 00:11:13,330
So what's a comment?

180
00:11:13,330 --> 00:11:16,740
Well I'm simply gonna write here,

181
00:11:16,740 --> 00:11:21,500
"calculating the next generation"

182
00:11:23,870 --> 00:11:29,510
This "//" here is extremely handy 
because it's used to add a comment.

183
00:11:29,510 --> 00:11:33,020
So what does it mean? 
It simply means when JavaScript encounters

184
00:11:33,020 --> 00:11:37,540
this "//", it will ignore
anything that follows

185
00:11:37,540 --> 00:11:39,690
on that line after it.

186
00:11:39,690 --> 00:11:44,610
And that's a very convenient 
way for us to write comments,

187
00:11:44,610 --> 00:11:49,510
and again this is helpful 
to yourself in the future.

188
00:11:49,510 --> 00:11:53,380
Sometimes the code looks easy 
because you've thought about it

189
00:11:53,380 --> 00:11:56,940
for quite some time and 
you finally write this piece of code.

190
00:11:56,970 --> 00:12:00,630
But if you look at this 
code in a few months,

191
00:12:00,860 --> 00:12:05,230
you wouldn't easily figure it out again
or it will take you a lot of time again.

192
00:12:05,230 --> 00:12:09,340
And so that's usually a point 
where adding a comment

193
00:12:09,340 --> 00:12:11,780
can be really helpful to your future self,

194
00:12:11,780 --> 00:12:15,350
and again for everyone else 
who's actually working with your code,

195
00:12:15,400 --> 00:12:18,170
or reading your code in the future.

196
00:12:18,480 --> 00:12:21,290
So let me output now 
these new values.

197
00:12:21,290 --> 00:12:24,550
And to do that, I'm simply gonna 
copy this line here.

198
00:12:24,550 --> 00:12:28,110
I'm going to be a bit lazy.
I'm gonna copy and paste it here.

199
00:12:28,110 --> 00:12:31,040
Of course, this is now 
"generation 1", not "0",

200
00:12:31,040 --> 00:12:34,400
but everything else stays the same.

201
00:12:34,400 --> 00:12:38,330
So let me save that. 
Go over to the browser,

202
00:12:38,330 --> 00:12:41,690
and reload this document, 
and, boom, it works.

203
00:12:41,690 --> 00:12:45,640
What we see here is "generation 1", 
and these are the new values.

204
00:12:45,640 --> 00:12:51,700
So "0.16", "0.48", "0.36", 
as we calculated it previously

205
00:12:51,700 --> 00:12:52,600
in the videos.

206
00:12:52,600 --> 00:12:54,710
Now here's one issue.

207
00:12:54,710 --> 00:12:56,460
What's going on here?

208
00:12:56,470 --> 00:12:59,020
Well, there seems to be 
some rounding error.

209
00:12:59,020 --> 00:13:04,220
So 0.160000, many zeros and then "3".

210
00:13:04,220 --> 00:13:05,410
What is this?

211
00:13:05,420 --> 00:13:11,550
Well, it turns out that 
there are often JavaScript errors,

212
00:13:11,550 --> 00:13:17,290
rounding errors when you do
math operations in computers.

213
00:13:17,290 --> 00:13:21,430
And this may seem a little strange 
because aren't computers to be

214
00:13:21,430 --> 00:13:22,900
extremely precise.

215
00:13:22,900 --> 00:13:24,410
Yes, that's true,

216
00:13:24,420 --> 00:13:27,360
but we should never forget that 
in the back end,

217
00:13:27,360 --> 00:13:31,540
at the base of all of it, 
computers are not using

218
00:13:31,540 --> 00:13:32,960
the decimal system.

219
00:13:32,960 --> 00:13:36,580
They're actually using the binary system 
and sometimes it's hard

220
00:13:36,850 --> 00:13:42,830
for a computer/impossible, 
to actually accurately represent

221
00:13:42,830 --> 00:13:47,420
a given number without any rounding error.

222
00:13:47,420 --> 00:13:51,290
So let me try to explain this 
in the context of the decimal system

223
00:13:51,380 --> 00:13:55,440
that we use in everyday usage.

224
00:13:55,440 --> 00:14:00,470
So let's say we started with 
this number one third.

225
00:14:00,470 --> 00:14:06,040
So if I ask you to write down one third
this is probably how you would do it.

226
00:14:06,040 --> 00:14:09,870
And this is actually a nice shortcut

227
00:14:09,870 --> 00:14:16,310
sort of writing down one third 
and if we add three times one third,

228
00:14:16,310 --> 00:14:22,400
that is mathematically one 
because each of those one thirds

229
00:14:22,400 --> 00:14:26,050
is exactly one third. 
Now this sounds trivial,

230
00:14:26,050 --> 00:14:31,080
but here's the point, 
try to express this number now one third,

231
00:14:31,990 --> 00:14:34,940
without using this notation of division.

232
00:14:35,150 --> 00:14:37,780
Just using the number system.

233
00:14:37,960 --> 00:14:41,830
Well, it turns out you can't actually 
do this properly.

234
00:14:41,830 --> 00:14:46,830
What you can do is 
you can write down "0.33",

235
00:14:46,830 --> 00:14:52,310
but "0.33" plus "0.33", plus "0.33",

236
00:14:52,310 --> 00:14:56,460
is not "1". 
It's "0.99."

237
00:14:56,460 --> 00:14:58,560
So you could say, "Well okay,

238
00:14:58,570 --> 00:15:03,820
let me be a bit more precise here 
and I'm gonna add three digits here.

239
00:15:04,260 --> 00:15:06,140
And here and here.

240
00:15:06,140 --> 00:15:10,670
But no matter how many digits 
you add here,

241
00:15:10,670 --> 00:15:15,660
there will always be a rounding error. 
And that's because we simply

242
00:15:15,660 --> 00:15:21,070
don't have a way to accurately capture 
one third using this notation

243
00:15:21,070 --> 00:15:25,150
in the decimal system. 
And it is essentially for the same reason,

244
00:15:25,150 --> 00:15:29,910
that we don't have a good notation
for some numbers in the binary system,

245
00:15:29,910 --> 00:15:33,480
that computers use, 
and that's why you occasionally

246
00:15:33,480 --> 00:15:36,050
get these types of rounding errors.

247
00:15:36,970 --> 00:15:41,340
So I hope you now understand 
why we have this issue here.

248
00:15:41,340 --> 00:15:45,060
It's basically just a rounding error 
because a computer finds it hard

249
00:15:45,060 --> 00:15:48,020
to express this number correctly

250
00:15:49,980 --> 00:15:54,720
in this notation using the binary system.

251
00:15:54,730 --> 00:15:59,500
But you can see the rounding error 
is extremely small.

252
00:15:59,500 --> 00:16:01,070
And for all intents and purposes,

253
00:16:01,070 --> 00:16:03,010
this is usually not a big problem.

254
00:16:03,010 --> 00:16:05,450
These rounding errors, 
they're a bit ugly,

255
00:16:05,450 --> 00:16:10,130
and we'll deal with that in the
next video or one of the next videos.

256
00:16:10,130 --> 00:16:15,020
But from a mathematical perspective, 
you can largely ignore them.

257
00:16:15,020 --> 00:16:17,400
If you add up many numbers like that,

258
00:16:17,400 --> 00:16:20,320
then it's potentially an issue 
because a rounding error

259
00:16:20,320 --> 00:16:25,710
as you keep adding rounding errors 
they can quickly become very large,

260
00:16:25,710 --> 00:16:28,750
and so that's potentially
a cause for concern.

261
00:16:28,750 --> 00:16:31,140
So always be sure to check a bit on this.

262
00:16:31,140 --> 00:16:32,650
But, by and large,

263
00:16:32,650 --> 00:16:36,410
this is not a problem 
that will ever come to bite you.

264
00:16:36,410 --> 00:16:39,200
So let's go back to the code.

265
00:16:39,200 --> 00:16:41,560
This works, so great.

266
00:16:41,770 --> 00:16:45,280
We wrote this code here that 
calculates what's happening in the

267
00:16:45,280 --> 00:16:48,510
next generation, then we output this 
and you know what,

268
00:16:48,510 --> 00:16:51,040
let's do this for a couple of generations,

269
00:16:51,040 --> 00:16:53,510
just to see what's actually going on.

270
00:16:53,510 --> 00:16:56,060
So I'm just gonna copy
these four lines here,

271
00:16:56,060 --> 00:17:00,220
and I'm gonna paste them,
"generation 2", "generation 3",

272
00:17:00,220 --> 00:17:04,080
"generation 4", "generation 5", 
let's say, and obviously

273
00:17:04,080 --> 00:17:05,410
what we need to do here is,

274
00:17:05,410 --> 00:17:09,630
we need to update the counters.
So here's "0", "1".

275
00:17:10,690 --> 00:17:16,090
We have here "2", "3", "4", and "5."

276
00:17:16,090 --> 00:17:18,700
We're always recalculating 
the genotype frequencies.

277
00:17:18,700 --> 00:17:22,360
But of course we already know 
that these are gonna stay constant,

278
00:17:22,375 --> 00:17:25,270
so let's save this. 
Move over to the browser,

279
00:17:25,270 --> 00:17:28,270
reload, and yes indeed,

280
00:17:28,270 --> 00:17:31,830
these will of course remain constant 
because we're using the same

281
00:17:32,020 --> 00:17:34,250
allele frequencies to calculate those,

282
00:17:34,250 --> 00:17:36,260
and so those should always be the same.

283
00:17:36,260 --> 00:17:42,440
Now this is in some sense Hardy-Weinberg 
because we now are calculating

284
00:17:42,440 --> 00:17:44,350
each time the genotype frequencies

285
00:17:44,350 --> 00:17:47,310
based on the allele frequencies 
and we see in the beginning,

286
00:17:47,310 --> 00:17:49,960
this is not in Hardy-Weinberg frequencies.

287
00:17:49,960 --> 00:17:54,190
It will get there within one generation 
and then will stay there forever.

288
00:17:54,200 --> 00:17:56,110
Now if you go back to the code,

289
00:17:56,110 --> 00:18:02,800
I hope you felt a bit strange 
watching me copy code,

290
00:18:02,800 --> 00:18:07,800
because copy-pasting code 
is very bad practice.

291
00:18:07,800 --> 00:18:10,770
Basically what's happening here is 
I'm taking a piece of code,

292
00:18:10,770 --> 00:18:14,630
I'm taking a piece of functionality, 
concretely this one,

293
00:18:14,630 --> 00:18:18,340
that I want to reuse,
and I'm doing it the stupid way,

294
00:18:18,340 --> 00:18:23,370
I'm copying the code 
over and over again, throughout my file.

295
00:18:23,370 --> 00:18:24,890
That's not very smart.

296
00:18:24,890 --> 00:18:26,750
Why not?

297
00:18:26,750 --> 00:18:30,140
It's not smart because 
let's assume I later find out,

298
00:18:30,140 --> 00:18:32,130
"Whoops, there was a mistake here,

299
00:18:32,130 --> 00:18:35,040
this should actually be 
something else", doesn't matter.

300
00:18:35,040 --> 00:18:38,900
There is in fact no mistake here. 
Let's just assume there was one.

301
00:18:38,900 --> 00:18:42,710
Well now, because I copy-pasted this code
throughout my document,

302
00:18:42,710 --> 00:18:47,040
I have to go and find all the places 
where I pasted this code

303
00:18:47,040 --> 00:18:52,410
and fix the error there.
So very bad idea, copy and paste code.

304
00:18:52,410 --> 00:18:55,970
It's a particularly bad idea 
because actually JavaScript,

305
00:18:55,970 --> 00:19:00,400
like many other programming languages,
provides a very handy tool

306
00:19:01,320 --> 00:19:04,690
that helps you avoid 
copy-pasting code around

307
00:19:04,690 --> 00:19:09,090
and this is the principle of functions 
and in the next video we'll learn about

308
00:19:09,090 --> 00:19:12,730
that super important 
principle of functions,

309
00:19:12,730 --> 00:19:15,730
this tool and particularly, of course,

310
00:19:15,730 --> 00:19:18,330
how we use them in JavaScript.

311
00:19:18,330 --> 00:19:22,620
So we've now finished outputting 
the genotype frequencies

312
00:19:22,620 --> 00:19:25,580
over many generations.
We saw that things worked

313
00:19:25,580 --> 00:19:29,700
as we expected them to based on 
the calculations we did before,

314
00:19:29,700 --> 00:19:31,790
but there's something fishy with our code.

315
00:19:31,790 --> 00:19:34,930
We're copy-pasting 
bits and pieces of code around.

316
00:19:34,930 --> 00:19:36,520
That's not good practice.

317
00:19:36,520 --> 00:19:41,870
There's a tool called Functions 
and we'll use this tool

318
00:19:41,870 --> 00:19:44,440
heavily throughout the course 
and in the next video,

319
00:19:44,440 --> 00:19:46,440
I'll explain how this works.

320
00:19:46,450 --> 00:19:47,600
So, I'll see you there.
