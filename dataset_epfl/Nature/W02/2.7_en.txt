Welcome back, Nature in code 
We're in Chapter 2 lecture 7
In the previous video, we started copy/pasting around a lot of code.
That's not a good idea.
So, this video, We'll learn about the concept called a function.
And the function is a really wonderful you know, tool to be used in JavaScript
And among many other things, it allows you to not have to copy/paste a lot of code
So let's take a look at how this works.
So here we're back at our code and we see all this you know copy/pasted code here lying around, and you know that's problematic for many reasons.
Including the fact that if you make a mistake somewhere and you start copy/pasting that code around
It'll be very hard to trace that error.
So, let's use the concept of a function.
So what is a function a function?
A function, basically helps you to encapsulate a bit of code.
And in our case, that bit of code, for example, could be this code here
Right, because we're copy/pasting this piece of code over and over again it does the exact same thing.
So how do we do this?
So, let's just simply implement it and then thereby learn how we do this.
So you can define a function with the keyword function and as you can see this is indeed a keyword, text Wrangler is nice and highlights that automatically.
Indicating this a special word.
So, function is the keyword and then you have to name the function.
Now I'm gonna name it,
Create_next_generation
Again, try to be liberal in how you name functions.
Just in the same way as you should name variables.
It's basically, you know sometimes, where we were tempted to be lazy and give those functions or variables very short names because at the moment as we code, it's very clear what these functions do but you know your future self, may not be recalling every detail and also your your colleagues who will work with your code will be quite glad that you give functions proper names.
So like in variables, give functions names that mean something useful.
And in particular with the function, give it the name that encapsulates that represents what the function does.
So here, we simply create the next generation.
So that seems like like an okay name.
All right.
Something else every function needs other than a name is this set of parenthesis, okay.
In these parenthesis, we would usually pass values.
Here's a good example, log is a function.
It has these parentheses.
That's how you can tell.
Now this particular function can take any number of parameters.
In this in this respect, it is a little bit special.
But the point is that here we're passing in four arguments and these are comma separated.
So,by the way,
Just to get the language down when we define a function, whatever it is here in the... whatever we have here in the parenthesis,we call those parameters.
Once we start using the function, and we start passing values along we call them arguments, but that's really a detail, so, here you would have your comma separated list of parameters and I will talk about this in great detail throughout the course, but here in this particular example
I actually don't want parameters.
So I'm just gonna leave as empty.
I still need the parentheses,okay.
Every function has parentheses.
But in this case, we have no parameters in there and then I'm got to use these curly brackets
Okay, curly brackets.
These curly brackets will now actually enclose to function body.
So the function body is the thing, the code that should get executed once a function is called
So I'm just gonna take these 
3 lines here in a cut them and I'm gonna copy/paste them over here.
Also copy/pasting but a different kind of copy/pasting.
Actually cutting and pasting.
So, this now is the function body.
It's indented here just for visual aesthetics.
So that I can quickly see okay, this is the function body and it's encapsulated here in these curly brackets.
So these are important.
So now I have a function, it has a name, it takes no parameter.
That's fine.
And here's the code that should be executed whenever I call this function.
So what is a mean to call a function?
So it's important to note that when he find the function here this code will not get executed.
Okay.
It's just now defining the function, what it should do once it gets called.
But now you first have to call the function.
So that this code gets executed.
And we're simply calling the function by basically calling it's name.
Okay, So create next generation parentheses.
Again, we always need these parenthesis with functions but as I have no parameters here, 
I don't have to pass any arguments.
So this is empty as well.
I can simply say create next generation that's the end of my statement.
So I'm gonna just terminate this would a semi colon.
Create next generation now this code will be executed.
And then I have the console lock here.
That's great.
And so, you know that works that works fine.
Now I can get rid of all of this code here. so I don't need this.
I'm simply going to replace this now with this function call.
So, I don't need this.
Just replace it and create next generation.
I don't need this.
Just replace it with create next generation.
Same here.
Same here and now this looks much much cleaner.
So this code is now not copy/pasted throughout the document it simply exist once if I ever decide if I need to change something here.
I can just go and change it in the definition of the function.
Now, to actually make sure that what we did here works let's save the document.
Let's go over to the browser and let's reload this and if everything worked, yes it did nothing should change because we simply restructured the code.
It doesn't do anything else, it simply written in a nicer way.
By the way, if we go back to the code,
That's something you'll find quite often. a coding being able to code is not just, to make the computer do whatever it is you wanted to do.
I mean, that's obviously a key point about coding but code can very quickly become very complex and I've said this a couple of times and I'll keep saying it, your future self will really be quite happy if you write clean and clear code. and so this is a good example now.
This code is much cleaner than the previous one.
Not because it's shorter, but because it's actually more compact and it's you know this functionality here is nicely encapsulated in a function.
There's a principle called D-R-Y 
"dry" don't repeat yourself
We've done this here exactly.
We've encapsulated this code in a function
And then we simply called the function name multiple times.
So this is quite good now.
It's not perfect yet because as you can see there's a little bit of an issue here.
Yes,we have encapsulated this functionality into a function, and we can reuse this now many times but we still have copied code around,
I mean now basically just copied the the function name.
Of course in the works, but what if I want to print.
Now the next generation ,not just 5 times but actually 50 times 500 times, a million times.
Obviously I can't just take these 2 lines of code and copy them over and over again
And and just defining a new function here you know wouldn't do the trick either.
Now it turns out there is another's super powerful concept that's called iteration, will you said in the next video to deal with this issue.
So in this video, we just learned about the concept of a function
We'll use functions throughout this course.
If you take a look at random pages on the internet that used Javascript you'll find many many functions.
Functions are a key concept JavaScript. and in this video we started exploring them.
In the next video we'll explore another super important concept in JavaScript or programing in general that concept is iteration, and it'll be the content of the next video.
I'll see you in the next video.
