Welcome back Nature, In Code.
We're in chapter 2, lecture 10.
This is the last lecture of this chapter.
In this last lecture, I'd like to talk about a very important concept, namely that of the variable scope.
The variable scope is rarely talked about but I wanna mention it here briefly because it is potentially the source of many, many errors and I'd like you to avoid all of these errors, and there's a simple trick how to do that.
<i>(lecturer) So here we're back in our code.</i>
<i>Let's take a look at this function here.</i>
<i>function create_next_generation</i>
<i>We're now very familiar with this function and what it does.</i>
<i>It simply calculates the new genotype frequencies</i>
<i>based on existing allele frequencies.</i>
<i>And we're using variables p and q and a1a1 and so on</i>
<i>that we've defined up here.</i>
<i>And this feels quite natural, right?</i>
<i>I mean we're defining variables here outside of the function</i>
<i>and then we're using those variables inside of the function.</i>
<i>Now the reason why we can actually do this,</i>
<i>the reason why we can access these variables here</i>
<i>or in fact from anywhere in our code</i>
<i>is because these variables out here, defined outside of functions,</i>
<i>they are in the global scope.</i>
<i>And that simply means they can be accessed from anywhere in your code.</i>
<i>Now, that often comes in quite handy.</i>
<i>Now, if you would talk to very experienced JavaScript developers,</i>
<i>they would tell you that the global scope is in fact a dangerous thing</i>
<i>because it means that variables can now be accessed and also overwritten</i>
<i>from anywhere in the code.</i>
<i>And if you have to maintain large JavaScript projects,</i>
<i>that can be quite an issue.</i>
<i>And that's true, but here in the context of this course,</i>
<i>our programs, our code snippets will often be, or always be actually,</i>
<i>totally self-contained.</i>
<i>So the global scope is not a dangerous thing here,</i>
<i>but it can be if the project gets very large.</i>
<i>Most of the time though, it's quite handy,</i>
<i>certainly for us, to define variables here outside of functions</i>
<i>so that they are in the global scope and they can be accessed from anywhere.</i>
<i>Now, the fact that there's a global scope</i>
<i>of course indicates that there's something else</i>
<i>and indeed there is, there is in fact a local scope.</i>
<i>So what is a local scope?</i>
<i>Well let's take a look at the function here.</i>
<i>This variable here, also defined with the keyword</i> 'var',
<i>is defined inside this function.</i>
<i>As a consequence, it is in the local scope of this function.</i>
<i>That means we can of course access it within the function,</i>
<i>but we can't access it from anywhere else.</i>
<i>It's only local to the function, it's only available to the function.</i>
<i>And that's of course how it should be.</i>
<i>Many times we define variables inside of functions,</i>
<i>that help us do a particular job,</i>
<i>the job that this particular function is designed to do.</i>
<i>And then once we're outside of the function, once we leave the function,</i>
<i>we want to forget about those variables</i>
<i>and we certainly don't want anyone else to mess with these variables.</i>
<i>So it's typically quite handy actually to have variables that are local</i>
<i>to the functions.</i>
<i>And most of the time, in fact, when we will write functions,</i>
<i>we will use local variables</i>
<i>but not always.</i>
<i>But, in any case, this is the local scope.</i>
<i>So, hope you understand this now.</i>
<i>If you define things outside of the functions here,</i>
<i>then they're in the global scope, accessible from anywhere.</i>
<i>If you define them inside the function here,</i>
<i>then they're local--</i>
<i>Only accessible to the function.</i>
<i>So, you may wonder, okay, that's pretty straightforward,</i>
<i>where's the catch?</i>
<i>Here's the catch.</i>
<i>It turns out that you can define variables</i>
<i>without the keyword</i> 'var'.
<i>You could simply leave this </i>'var'<i> away.</i>
<i>Now, you haven't heard that from me, because it's very bad practice</i>
<i>and it leads to a very subtle but difficult problem.</i>
<i>And as a following, if you would actually</i>
<i>leave </i>'var'<i> away in the declaration of a variable</i>
<i>inside of a function,</i>
<i>confusingly, that variable would now be in the global scope.</i>
<i>Even though you defined it in the function.</i>
<i>And so, that leads to all kinds of hard to track down bugs.</i>
<i>So, there's a very simple rule how to avoid this</i>
<i>which is always use the keyword </i>'var'<i> when you declare variables.</i>
<i>Whether it's outside functions or inside a functions, doesn't matter,</i>
<i>always use the keyword</i> 'var'.
<i>Now, let me show you how this works and how subtle these errors could be.</i>
<i>Let me simply take this file here, this code,</i>
<i>I'm just going to select the entirety of the code here</i>
<i>and copy it and then 
I'm going to create a new file, okay?</i>
<i>New &gt; Text Document</i>
<i>and I'm going to paste this code in here</i>
<i>and now I'm going to delete this code here.</i>
<i>Okay, so now we have an empty JavaScript file.</i>
<i>So, what I'm going to do here is I'm going to declare a function,</i>
<i>function test1</i>
<i>And what I'm going to do here is something, you know, that's bad</i>
<i>and that you shouldn't do but I'm going to do it nonetheless as a demo.</i>
<i>I'm going to declare a variable without the </i>'var'<i> keyword.</i>
<i>Okay, so </i>foo = 4<i> and then semicolon.</i>
<i>Now I'm going to declare a second function</i>
<i>that I'm going to name</i> test2.
<i>And what this function does is it simply printing the value of variable</i> foo
<i>into the console.
So I'm going to say</i> console.log(foo);.
<i>Now both of these are pretty straightforward functions</i>
<i>and they don't take any--</i>
<i>we're not going to define any parameters here.</i>
<i>Now simply like that, I wouldn't of course have any issues</i>
<i>because this code will actually not execute</i>
<i>we're simply defining functions, we're not calling them yet.</i>
<i>So, let's call these functions.
Let's first call this function</i> test1
<i>and then let's call the other function </i>test2.
<i>Alright.</i>
<i>And now let's go ahead and save this file</i>
<i>as, save as, whatever you want to.
I'm going to call this 'Scope demo'.</i>
<i>Okay?</i>
Scope_demo.
<i>Alright.</i>
<i>Save this, and now let's go over to the browser.</i>
<i>We still have the first example open here with the Hardy-Weinberg frequencies.</i>
<i>So I'm going to open</i> scope_demo.html.
<i>Just going to type this directly into the browser address bar here.</i>
<i>because it's in the same directory.</i>
<i>But you can also just say</i> File &gt; Open<i> and find your scope demo file.</i>
<i>Okay so I'm going to hit return, scope demo.</i>
<i>File has not been found, okay, let's see where have I gone wrong.</i>
<i>Scope demo.html.
Did I save this in the wrong location?</i>
<i>Save as, ah yes, I saved it in the wrong location.</i>
<i>Okay,</i> Code examples &gt; scope demo &gt; Save.
<i>By the way, I'm going to keep these, if I make these types of mistakes,</i>
<i>I'm actually going to keep them in the video</i>
<i>because these will be mistakes</i>
<i>that I hope you can learn from that happens to all of us all of the time</i>
<i>and the same if I happen to make coding mistakes and a code won't run,</i>
<i>I will not actually edit that out of the videos,</i>
<i>because I think it's actually quite educational.</i>
<i>Okay, in any case, let's save this file, okay we're now in code examples</i>
<i>Okay, that worked well.
So let's go back here, reload.</i>
<i>I've found the file and let's take a look at the console.</i>
<i>So it prints </i>'4'<i> here.</i>
<i>So is this what we expect?</i>
<i>Well let's take a look at the code.</i>
<i>So what have we done here?</i>
<i>So in the first function, that we're calling </i>function test1,
<i>we're declaring a variable '4' because we're not using the </i>var<i> keyword,</i>
<i>this variable is in the global scope which means it can be accessed</i>
<i>from anywhere else.</i>
<i>Then, we're calling</i> function test2.
Function test2 <i>is asked to print </i>foo<i> into the console.</i>
<i>It finds </i>foo<i> in the global scope.</i>
<i>There's no local scope</i> foo<i> variable here</i>
<i>but there is one in the global scope</i>
<i>and so it correctly prints this '4' value.</i>
<i>Now let's do a subtle modification here.</i>
<i>Let's do it correctly by saying</i> var foo = 4.
<i>Now this variable is in the local scope here of this function.</i>
<i>So what would happen if I saved this and went over to the browser</i>
<i>and reload this document.</i>
<i>Think about this for a second.</i>
<i>Alright, ready, let's reload.</i>
<i>Boom, error.</i>
Uncaught ReferenceError. foo is not defined
<i>So, you'll probably see these errors, this one in particular, quite a bit.</i>
<i>What does this mean</i>
'foo is not defined'?
<i>Well, let's go back to the code.</i>
<i>So, we're declaring this variable here,</i>
<i>and it's declared with the </i>var<i> keyword, which is the right way to do it.</i>
<i>It is now part of the local scope of this function.</i>
<i>So when we are then calling</i> function test2, test2<i> is searching for </i>'foo'<i> in its local scope,</i>
<i>doesn't find any, because there's no variable declaration here.</i>
<i>Then, it's going to check the global scope.</i>
<i>Now, </i>'foo'<i> is not in the global scope.</i>
<i>So there's no </i>'foo'<i> variable that this </i>test2<i> can work with.</i>
<i>So this variable here is hidden from this function here</i>
<i>because it's simply local to this scope here of this function.</i>
<i>So that's why here in the browser you get this</i> Uncaught ReferenceError
'foo is not defined'.
<i>This line here simply does not know what </i>'foo'<i> is</i>
<i>because </i>'foo'<i> here is declared to be local.</i>
<i>And so that's an important concept</i>
<i>and, again, the takeaway message from this video is quite simple.</i>
<i>Always use use </i>'var'<i> when you declare variables.</i>
<i>Whether it's outside or inside of functions, always use</i> 'var'
<i>and then, if you do that, you can follow the simple rule or the simple concept</i>
<i>that variables that are defined outside the function are in the global scope,</i>
<i>variables that are defined inside of the functions are in the local scope.</i>
<i>This is pretty straightforward if you use the keyword</i> 'var'
<i>whenever you declare variables.</i>
Alright this concludes not only this video lecture ten but also chapter two.
So, you learned a whole lot in this chapter.
We started out defining a couple of key terms that we'll use throughout the course.
Evolution, genes, alleles...
Then we developed an intuition for the normal of evolutionary biology which is the Hardy-Weinberg model and then we implemented the Hardy-Weinberg model in JavaScript, and thereby learning key basic concepts of JavaScript such as declaring variables, assigning variables through some basic arithmetic in code, defining functions, iterations and now at the end, you've even heard about the concept of a scope.
So we're doing really well.
Congratulations if you made it up to here.
In the next chapter that we'll begin with the following video, the next video, chapter three, we will loosen up some of the assumptions of the Hardy-Weinberg model and that will lead to very interesting dynamics.
And along the way, of course, we'll learn new JavaScript concepts.
So I'll see you in the next chapter.
