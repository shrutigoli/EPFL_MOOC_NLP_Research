1
00:00:03,500 --> 00:00:07,380
Welcome back Matron Code,
we're in Chapter three, lecture six.

2
00:00:07,380 --> 00:00:09,230
In the past few lectures,

3
00:00:09,230 --> 00:00:11,550
we looked at randomness and in particular,

4
00:00:11,550 --> 00:00:14,840
how we can implement randomness 
in JavaScript

5
00:00:14,840 --> 00:00:18,090
and we use coin flipping as an example.

6
00:00:18,090 --> 00:00:19,450
So now this video,

7
00:00:19,450 --> 00:00:22,160
I'm going to focus on genetic drift

8
00:00:22,160 --> 00:00:25,120
and I'm going to explain 
the concept of genetic drift

9
00:00:25,120 --> 00:00:28,550
and how that ties to randomness 
and coin flipping.

10
00:00:28,550 --> 00:00:32,100
So let's recall what we did in the 
context of evolutionary biology

11
00:00:32,350 --> 00:00:33,910
until now.

12
00:00:33,910 --> 00:00:38,480
Basically, we had this simple model 
with two alleles: A1 and A2

13
00:00:38,480 --> 00:00:44,176
and we at the node at the frequency 
of the A1 allele as P

14
00:00:44,330 --> 00:00:51,230
and the frequency of the A2 allele as Q
and then in the Hardy Weinberg world

15
00:00:51,230 --> 00:00:54,090
where the population size was infinite

16
00:00:54,090 --> 00:00:57,080
we could calculate 
the genotype frequencies,

17
00:00:58,630 --> 00:01:00,140
the Hardy Weinberg frequencies,

18
00:01:00,140 --> 00:01:05,780
namely <i>A1A1</i> would be <i>P times P</i>,
so <i>P squared A1A2</i>,

19
00:01:06,280 --> 00:01:08,800
would be <i>2pq</i>

20
00:01:08,800 --> 00:01:14,130
and <i>A2A2</i> would be <i>Q square.</i>

21
00:01:14,130 --> 00:01:16,640
And remember these are 
just the probabilities of

22
00:01:16,740 --> 00:01:19,860
essentially picking 
the corresponding alleles.

23
00:01:19,860 --> 00:01:21,767
So <i>P times P A1A1,</i>

24
00:01:21,930 --> 00:01:25,423
<i>P times Q plus Q times P</i>
for <i>A1A2</i>

25
00:01:27,220 --> 00:01:30,517
<i>Q times Q</i> for <i>A2A2</i>.

26
00:01:30,940 --> 00:01:34,430
Now the key change that we're going to

27
00:01:34,720 --> 00:01:37,640
implement now-- 
that we're going to think about is

28
00:01:37,640 --> 00:01:39,962
that of the population size.

29
00:01:39,980 --> 00:01:44,230
So <i>N</i> is typically the letter,
capital N

30
00:01:44,230 --> 00:01:48,258
that's used to denote the population size

31
00:01:48,550 --> 00:01:52,570
and so far in the Hardy Weinberg world,

32
00:01:52,570 --> 00:01:56,478
we assumed this to be infinite.

33
00:01:57,710 --> 00:02:01,580
The key change now that 
we're going to implement is that

34
00:02:01,580 --> 00:02:05,390
we're not going to assume that the 
population size is infinite.

35
00:02:05,390 --> 00:02:07,247
But indeed that it is finite.

36
00:02:07,520 --> 00:02:11,440
It is finite and it has an <i>N</i> individuals.

37
00:02:11,440 --> 00:02:13,740
These are diploid individuals as usual.

38
00:02:13,740 --> 00:02:19,720
So in fact what we have is 
<i>2N</i> alleles in the population

39
00:02:20,680 --> 00:02:22,660
and that's a key aspect.

40
00:02:22,660 --> 00:02:24,820
So from now on we assume 
a population size,

41
00:02:24,820 --> 00:02:28,340
a finite population size of <i>N</i> 
which also means that

42
00:02:28,340 --> 00:02:31,748
we have <i>2N</i> alleles in the population.

43
00:02:32,220 --> 00:02:37,560
What we've also done is we thought 
about flipping random coins

44
00:02:37,560 --> 00:02:39,180
or rather fair coins

45
00:02:39,180 --> 00:02:42,600
but there of course coming up 
heads and tails randomly

46
00:02:42,600 --> 00:02:44,080
and if it's a fair coin

47
00:02:44,080 --> 00:02:50,650
then those probabilities of 
heads or tails coming up are exactly 50%

48
00:02:50,650 --> 00:02:52,470
and so what we did, right,

49
00:02:52,470 --> 00:02:53,910
we had this example, where we said,

50
00:02:53,910 --> 00:02:56,520
"Okay, we're gonna flipped this 10 times"--

51
00:02:56,520 --> 00:02:59,430
six, seven, eight, nine, 10

52
00:02:59,830 --> 00:03:03,250
and then basically 
we're going to fill in the H's an T's here

53
00:03:03,250 --> 00:03:05,020
as heads or tails come up

54
00:03:05,020 --> 00:03:10,146
and then we even calculated 
the probabilities of certain outcomes

55
00:03:10,360 --> 00:03:13,120
and indeed we then implemented this

56
00:03:13,120 --> 00:03:16,660
with a simulation in JavaScript 
for one particular case,

57
00:03:16,660 --> 00:03:19,890
namely the probability of exactly

58
00:03:19,890 --> 00:03:22,365
eight heads coming up and two tails.

59
00:03:24,400 --> 00:03:26,210
Why do this in the first place?

60
00:03:26,210 --> 00:03:29,610
So we can now essentially 
think of these probabilities

61
00:03:29,610 --> 00:03:34,608
not as the heads and tails probabilities 
of flipping a coin

62
00:03:34,810 --> 00:03:39,010
but actually of the allele frequencies.

63
00:03:39,010 --> 00:03:40,020
So we can, for example,

64
00:03:40,020 --> 00:03:45,102
assume here the equivalent 
would be that both <i>P</i> and <i>Q</i>,

65
00:03:46,370 --> 00:03:47,870
are 0.5.

66
00:03:47,870 --> 00:03:51,190
So let's say we just happen to be 
in a population currently

67
00:03:51,190 --> 00:03:53,520
where the allele frequencies are 50/50.

68
00:03:53,520 --> 00:03:58,708
So 50% is <i>A1</i> allele and 
50% is a <i>A2</i> allele

69
00:03:59,030 --> 00:04:00,840
and so the equivalent here would be

70
00:04:00,840 --> 00:04:05,340
that we have a admittedly 
very small population of five individuals,

71
00:04:05,340 --> 00:04:07,830
which would of course mean--

72
00:04:08,200 --> 00:04:11,530
individuals,

73
00:04:11,530 --> 00:04:16,069
which would also mean that 
we have 10 alleles.

74
00:04:16,360 --> 00:04:19,819
And now if we were to generate 
the next generation.

75
00:04:20,960 --> 00:04:22,550
Basically what we need to do is

76
00:04:22,550 --> 00:04:26,130
we would need to pick 
randomly alleles

77
00:04:26,130 --> 00:04:28,910
from this pool with these frequencies

78
00:04:28,910 --> 00:04:32,460
and that is exactly identical in this case

79
00:04:32,460 --> 00:04:34,730
to flipping a fair coin

80
00:04:34,730 --> 00:04:36,860
and that's how this whole thing

81
00:04:38,160 --> 00:04:43,112
coin flipping exercise 
ties into genetic drift.

82
00:04:43,620 --> 00:04:45,270
So what I'm going to do now is

83
00:04:45,270 --> 00:04:47,620
I'm essentially going to set up a siutation

84
00:04:48,210 --> 00:04:50,420
where we have a small population

85
00:04:50,740 --> 00:04:53,650
and I'm now going to pick 
randomly individuals

86
00:04:53,650 --> 00:04:57,130
and I'm actually going do this-- sorry--
randomly alleles

87
00:04:57,130 --> 00:05:01,242
and I'm going to do this 
using Google's coin flipper.

88
00:05:01,500 --> 00:05:03,350
Okay so what we're going to do is

89
00:05:03,350 --> 00:05:06,690
we're going to assume a population 
of 10 individuals,

90
00:05:06,690 --> 00:05:08,150
which also means that we have

91
00:05:08,150 --> 00:05:13,462
<i>2N</i> equals 20 alleles here 
in this population,

92
00:05:14,200 --> 00:05:19,070
and even though 
the population sizes finite,

93
00:05:19,070 --> 00:05:22,350
basically we have this gamete 
pool here has many,

94
00:05:22,350 --> 00:05:24,580
many, many, many, many, many, many,

95
00:05:25,550 --> 00:05:27,026
<i>A1</i> and <i>A2</i> alleles.

96
00:05:28,030 --> 00:05:33,893
It would be inaccurate to say it 
has infinitely-many alleles,

97
00:05:34,150 --> 00:05:37,430
but we'll assume that
each individual creates

98
00:05:37,720 --> 00:05:40,690
enormous numbers of gametes

99
00:05:40,690 --> 00:05:43,910
and that's the the effect 
here of the population size

100
00:05:43,910 --> 00:05:47,750
is basically can be ignored.

101
00:05:47,750 --> 00:05:49,190
We can roughly assume that

102
00:05:49,190 --> 00:05:52,370
this is essentially an infinite gamete pool

103
00:05:53,560 --> 00:05:55,930
even though that is technically 
not quite correct.

104
00:05:55,930 --> 00:05:59,990
I mean, you can't really create 
an infinite amount of gametes

105
00:05:59,990 --> 00:06:01,680
from only 10 individuals,

106
00:06:01,680 --> 00:06:04,800
but let's just say we have 
millions and millions,

107
00:06:04,800 --> 00:06:08,360
or even billions of gametes 
that we can effectively ignore

108
00:06:08,360 --> 00:06:11,096
the fact that this is also of a finite size.

109
00:06:11,990 --> 00:06:15,730
Good and we're going assume 
the allele frequencies

110
00:06:15,730 --> 00:06:17,170
are equal to each other,

111
00:06:17,170 --> 00:06:19,575
namely exactly 0.5

112
00:06:19,950 --> 00:06:25,130
and that means that 
there are half of those alleles here

113
00:06:25,130 --> 00:06:27,880
of this enormously large gamete pool,

114
00:06:27,880 --> 00:06:32,235
half of those gametes are <i>A1</i> 
and half of those gametes are <i>A2</i>

115
00:06:32,270 --> 00:06:37,000
and our job now is to create 
the new population ,

116
00:06:37,390 --> 00:06:40,020
which is made up of 10 individuals

117
00:06:40,020 --> 00:06:43,020
or in other words of 20 alleles

118
00:06:43,020 --> 00:06:47,740
and we're now going to go over 
to the coin flipper in the browser

119
00:06:47,740 --> 00:06:50,750
and we're essentially going 
to flip a coin 20 times

120
00:06:50,750 --> 00:06:53,925
and when a heads comes up 
that means it's an <i>A1</i> allele,

121
00:06:54,220 --> 00:06:55,400
if a tails comes up,

122
00:06:55,400 --> 00:06:58,298
that means we just picked an <i>A2</i> allele.

123
00:06:58,670 --> 00:07:00,233
All right, so let's do this.

124
00:07:00,970 --> 00:07:03,430
So I'm here in a browser;
I'm using Google Chrome,

125
00:07:03,430 --> 00:07:05,800
but you can use any browser 
that you'd like to use.

126
00:07:05,800 --> 00:07:09,700
I'm going to search here 
for "flip a coin"

127
00:07:09,700 --> 00:07:14,322
and this automatic flipper comes up

128
00:07:14,630 --> 00:07:19,260
where either heads or tails is the result.

129
00:07:20,020 --> 00:07:23,010
I'm pretty sure this is a fair coin 
that's implemented here.

130
00:07:23,010 --> 00:07:26,510
So we're going to use this for our purposes.

131
00:07:26,510 --> 00:07:29,807
And when a heads comes up I essentially...

132
00:07:31,130 --> 00:07:33,670
take this to mean 
that an <i>A1</i> allele is picked

133
00:07:35,180 --> 00:07:36,810
and if a tails comes up,

134
00:07:36,810 --> 00:07:39,330
then that means an <i>A2</i> allele is picked

135
00:07:39,330 --> 00:07:42,780
and so I'm essentially now going 
to reload this page 20 times

136
00:07:42,780 --> 00:07:47,936
and I'm going to keep track 
of how many heads and tails come up.

137
00:07:48,380 --> 00:07:50,146
All right, let's get going.

138
00:07:52,330 --> 00:07:53,250
Tails.

139
00:07:53,250 --> 00:07:54,990
So that's an <i>A2</i> allele.

140
00:07:56,850 --> 00:07:59,101
Heads and that's the <i>A1</i> allele.

141
00:08:01,230 --> 00:08:02,272
Tails.

142
00:08:03,800 --> 00:08:04,979
Tails.

143
00:08:06,735 --> 00:08:07,819
Heads.

144
00:08:09,642 --> 00:08:10,636
Heads.

145
00:08:12,846 --> 00:08:13,790
Heads.

146
00:08:15,918 --> 00:08:16,881
Heads.

147
00:08:19,234 --> 00:08:20,117
Heads.

148
00:08:22,320 --> 00:08:23,590
Tails.

149
00:08:25,315 --> 00:08:26,336
Heads.

150
00:08:28,720 --> 00:08:29,791
Tails.

151
00:08:31,490 --> 00:08:32,747
Tails.

152
00:08:34,975 --> 00:08:35,880
Heads.

153
00:08:37,867 --> 00:08:38,935
Tails.

154
00:08:41,183 --> 00:08:42,065
Tails.

155
00:08:43,791 --> 00:08:44,776
Tails.

156
00:08:46,870 --> 00:08:47,720
Tails.

157
00:08:49,580 --> 00:08:50,517
Heads.

158
00:08:52,190 --> 00:08:53,530
And tails.

159
00:08:53,530 --> 00:08:55,460
All right, so let's take a look.

160
00:08:55,460 --> 00:08:59,890
We had nine times heads come up

161
00:08:59,890 --> 00:09:04,176
or in other words we picked an <i>A1</i> allele 
nine times out of the 20

162
00:09:04,260 --> 00:09:08,800
and we picked the <i>A2</i> allele 
11 times of the 20.

163
00:09:08,800 --> 00:09:10,060
So what is a mean?

164
00:09:10,060 --> 00:09:12,820
Well it means had now 
in our new generation

165
00:09:12,820 --> 00:09:15,019
that we just composed like this,

166
00:09:16,140 --> 00:09:22,580
we have a new <i>P</i>,
namely nine alleles out of 20,

167
00:09:22,580 --> 00:09:27,974
which corresponds to 45% 
and we also have a new <i>Q</i>,

168
00:09:28,070 --> 00:09:34,850
namely 11 out of 20 are <i>A2</i> alleles
and we have 55%.

169
00:09:35,860 --> 00:09:37,890
And so this is it.

170
00:09:37,890 --> 00:09:40,400
So take a look very closely,

171
00:09:40,400 --> 00:09:45,500
we started with a population 
that has a <i>P</i> and a <i>Q</i> value of 0.5

172
00:09:45,500 --> 00:09:48,033
so the allele frequencies were 50 and 50.

173
00:09:49,350 --> 00:09:52,850
If we had made no assumption

174
00:09:52,850 --> 00:09:55,200
about a finite population size--

175
00:09:55,200 --> 00:09:57,520
So if we were still in the Hardy Weinberg

176
00:09:57,520 --> 00:09:59,810
and we would have assumed 
that this is infinite,

177
00:09:59,810 --> 00:10:02,780
we would have picked 
infinitely-many alleles,

178
00:10:02,780 --> 00:10:05,180
and of course at the end,
so to speak,

179
00:10:05,180 --> 00:10:07,810
of picking infinitely-many alleles,

180
00:10:07,810 --> 00:10:09,650
this will be exactly 50-50.

181
00:10:10,110 --> 00:10:14,730
And so that is why the allele frequencies 
never change in the Hardy Weinberg world

182
00:10:14,730 --> 00:10:17,640
which also means that 
there is no evolution

183
00:10:17,640 --> 00:10:19,760
according to our definition of evolution,

184
00:10:19,760 --> 00:10:22,100
which is to change an allele frequencies

185
00:10:22,100 --> 00:10:26,270
but here because we have 
this finite population size

186
00:10:27,010 --> 00:10:29,380
these random effects start kicking in.

187
00:10:29,380 --> 00:10:32,301
Where we're only picking 
a finite number of alleles

188
00:10:32,360 --> 00:10:34,310
and of course that means that

189
00:10:35,820 --> 00:10:37,110
quite often actually

190
00:10:37,110 --> 00:10:41,820
the allele frequencies after 
we've picked a fine amount of times

191
00:10:41,820 --> 00:10:44,086
are not exactly what they were before.

192
00:10:44,420 --> 00:10:46,950
And here is a great example,

193
00:10:46,950 --> 00:10:50,810
so we're now at 45% and 55%.

194
00:10:50,810 --> 00:10:54,260
We started with 50-50% so within one generation

195
00:10:54,260 --> 00:10:57,680
we actually had quite 
a large change in allele frequencies

196
00:10:58,270 --> 00:11:01,480
and that is really the gist of genetic drift.

197
00:11:01,480 --> 00:11:03,540
So the allele frequencies have changed,

198
00:11:03,540 --> 00:11:05,770
in other words evolution has occurred,

199
00:11:05,770 --> 00:11:08,020
according to our definition,

200
00:11:08,020 --> 00:11:11,554
simply because of these random 
chance effects

201
00:11:11,820 --> 00:11:15,205
and that is in a nutshell 
what genetic drift is

202
00:11:15,860 --> 00:11:19,770
And so if you understand this 
then you understand genetic drift

203
00:11:19,770 --> 00:11:22,660
and what we're now going to do 
in the next lecture is

204
00:11:22,660 --> 00:11:26,393
we're going to implement this concept 
in JavaScript code.

205
00:11:26,460 --> 00:11:29,400
We already have all the tools to do this

206
00:11:29,560 --> 00:11:32,580
and so we can now implement this 
in JavaScript code.

207
00:11:32,580 --> 00:11:34,030
We will also visualize this

208
00:11:34,030 --> 00:11:37,215
and then we can investigate 
this much further.

209
00:11:37,470 --> 00:11:39,130
So, I'll see you in the next lecture.
