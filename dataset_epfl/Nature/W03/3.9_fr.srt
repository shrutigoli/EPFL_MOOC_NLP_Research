1
00:00:03,360 --> 00:00:06,303
Bienvenue, la nature, dans le code.
Nous sommes dans le chapitre 3 leçon 9.

2
00:00:06,400 --> 00:00:07,400
Dans la vidéo précédente

3
00:00:07,400 --> 00:00:11,950
nous avons brièvement abordé sur le concept
d'une structure de données de réseau

4
00:00:11,950 --> 00:00:14,580
dans lequel nous pouvons
stocker plusieurs valeurs

5
00:00:14,580 --> 00:00:17,000
qui viendra à vraiment,
vraiment à portée de main.

6
00:00:17,000 --> 00:00:18,460
Maintenant, dans cette conférence,

7
00:00:18,460 --> 00:00:22,960
je voudrais plonger un peu plus profondément
dans ce concept d'un tableau.

8
00:00:23,100 --> 00:00:26,350
Nous avons donc ici notre code
et que vous pouvez voir

9
00:00:26,350 --> 00:00:28,680
ici nous avons créé ces données variables

10
00:00:28,680 --> 00:00:31,190
puis nous l'avons attribué un tableau vide

11
00:00:31,190 --> 00:00:34,200
et nous avons dit que nous faisons
cela en utilisant ces supports ici,

12
00:00:34,200 --> 00:00:36,550
ces crochets, pas les accolades

13
00:00:36,550 --> 00:00:38,480
parce que cela va signifier
tout autre chose.

14
00:00:38,480 --> 00:00:39,924
Mais les crochets

15
00:00:40,260 --> 00:00:46,740
puis ici nous avons poussé des valeurs
dans ce tableau de données.

16
00:00:46,740 --> 00:00:52,180
Donc, ici, nous nous avons poussé
une valeur actuelle de <i> P </ i> en données.

17
00:00:52,180 --> 00:00:53,700
Et par la façon dont nous pouvons,
bien sûr,

18
00:00:53,700 --> 00:00:54,630
ceci est juste une variable,

19
00:00:54,630 --> 00:01:00,350
afin que nous puissions l'appeler tout ce que nous voulons
aussi longtemps que son nom de variable juridique.

20
00:01:00,940 --> 00:01:03,760
Et puis plus tard, nous avons passé
que les données autour,

21
00:01:03,760 --> 00:01:06,170
ici nous passons à la fonction
ligne de traçage de graphe

22
00:01:06,170 --> 00:01:09,230
qui a ensuite visualise
le contenu de ces données.

23
00:01:09,230 --> 00:01:12,640
Et si nous allons plus au navigateur,
nous pouvons voir cela est, par exemple,

24
00:01:12,640 --> 00:01:13,510
à quoi il ressemble.

25
00:01:13,510 --> 00:01:15,800
Donc, ici, dans ce tableau de données,

26
00:01:15,800 --> 00:01:18,130
nous savons que nous avons mille éléments

27
00:01:18,610 --> 00:01:21,620
et ce sont les <i> P </ i> des valeurs
de chaque génération

28
00:01:21,900 --> 00:01:24,270
et les fonctions ligne de traçage de graphe
est essentiellement programmés

29
00:01:24,270 --> 00:01:27,703
qu'il visualise ce tableau
de cette façon particulière.

30
00:01:28,180 --> 00:01:32,640
Donc, pour mieux comprendre, en savoir
plus sur ce concept d'un tableau,

31
00:01:32,640 --> 00:01:35,460
Allons directement
dans la console JavaScript

32
00:01:35,460 --> 00:01:37,128
ici dans le navigateur.

33
00:01:37,970 --> 00:01:40,710
Donc, ce que nous avons fait dans
le code était fondamentalement ce, à droite,

34
00:01:40,710 --> 00:01:44,650
nous avons dit, les données
de var est égale à un tableau vide

35
00:01:44,650 --> 00:01:46,190
et voilà comment on le fait.

36
00:01:46,190 --> 00:01:48,864
Voilà comment on met en place un tableau.

37
00:01:49,380 --> 00:01:52,710
Et si vous voulez maintenant il suffit
de regarder le contenu de ce tableau,

38
00:01:52,710 --> 00:01:54,690
vous pouvez voir, d'accord,
c'est un tableau vide

39
00:01:54,690 --> 00:01:57,550
et chaque fois que vous voyez
ces parenthèses, nous parlons ensemble.

40
00:01:58,440 --> 00:02:00,960
Et maintenant, nous pouvons mettre
des éléments dans ce tableau

41
00:02:00,960 --> 00:02:03,470
comme nous l'avons fait avec
la méthode de poussée.

42
00:02:03,470 --> 00:02:05,530
On peut donc dire <i> data.push </ i>

43
00:02:05,530 --> 00:02:06,990
et maintenant nous avons pu, par exemple,

44
00:02:06,990 --> 00:02:09,654
pousser les trois valeurs dans ce tableau.

45
00:02:09,990 --> 00:02:11,620
Et puis si vous regardez les données,

46
00:02:11,870 --> 00:02:15,310
ainsi nous pouvons voir, d'accord,
il est un tableau, ces crochets ici

47
00:02:15,310 --> 00:02:16,796
et il a l'élément trois.

48
00:02:16,920 --> 00:02:21,520
Poussons un autre élément
dans les whoops ici.

49
00:02:21,520 --> 00:02:25,193
Push, disons que nous allons
pousser cinq ici.

50
00:02:26,470 --> 00:02:28,400
Ok, <i> data.push [5] </ i>

51
00:02:28,400 --> 00:02:32,899
Si on regarde maintenant les données,
hein, maintenant il a deux éléments,

52
00:02:33,840 --> 00:02:36,650
mais toujours un tableau, bien sûr,
mais il dispose de deux éléments

53
00:02:36,650 --> 00:02:37,797
et vous pouvez le voir

54
00:02:38,070 --> 00:02:40,840
car les éléments sont séparés
par une virgule,

55
00:02:40,940 --> 00:02:44,960
qui est ce que les tableaux ressemblent,

56
00:02:44,960 --> 00:02:46,849
comment ils sont structurés en JavaScript.

57
00:02:47,960 --> 00:02:49,920
Disons simplement aller de l'avant
et pousser une autre valeur.

58
00:02:49,920 --> 00:02:52,300
D'accord, nous allons pousser, disons

59
00:02:52,300 --> 00:02:54,260
neuf dans ce tableau

60
00:02:54,260 --> 00:02:57,260
et de prendre à nouveau
un regard sur le contenu.

61
00:02:57,260 --> 00:03:03,540
Alors maintenant, vous pouvez voir que nous avons
trois éléments ici dans ce tableau particulier.

62
00:03:04,290 --> 00:03:04,980
Très bien.

63
00:03:04,980 --> 00:03:07,540
Alors, comment pouvons-nous
accéder à des éléments

64
00:03:07,540 --> 00:03:10,710
parce qu'ici c'est une façon
claire et simple

65
00:03:10,710 --> 00:03:14,019
comment ajouter des données
dans un tableau.

66
00:03:14,910 --> 00:03:19,274
Mais comment pouvons-nous accédons ensuite
les données si nous voulons accéder à certains éléments?

67
00:03:20,150 --> 00:03:21,860
Eh bien, moyen facile de le faire est

68
00:03:21,860 --> 00:03:25,730
alors laissez-moi recharger la page ici
afin que nous dégageons pour consoler

69
00:03:25,730 --> 00:03:29,240
et je vais mettre en place
un autre tableau ici,

70
00:03:29,240 --> 00:03:31,540
donc je vais encore dire

71
00:03:31,540 --> 00:03:33,240
<I> var data = </ i>

72
00:03:33,240 --> 00:03:37,090
en fait je vais initialiser
le tableau maintenant

73
00:03:37,090 --> 00:03:39,420
avec des valeurs tout de suite.

74
00:03:39,420 --> 00:03:41,370
Ceci est quelque chose que
vous pouvez faire aussi bien.

75
00:03:41,370 --> 00:03:45,130
Donc, il n'y a pas besoin de toujours
mettre en place un tableau vide

76
00:03:45,130 --> 00:03:49,150
puis ajouter des éléments
en les poussant dans le tableau.

77
00:03:49,150 --> 00:03:55,050
Vous pouvez également initialiser
le tableau avec des valeurs tout de suite, ici

78
00:03:55,520 --> 00:03:57,910
ici lors de l'initialisation,
si vous voulez.

79
00:03:57,910 --> 00:03:59,150
A vous de voir.

80
00:03:59,150 --> 00:04:01,098
Parfois, cela peut être assez pratique.

81
00:04:02,150 --> 00:04:04,180
Et même si vous faites cela,
bien sûr, au plus tard

82
00:04:04,180 --> 00:04:07,840
vous pouvez dire,
je veux ajouter plus d'éléments,

83
00:04:07,840 --> 00:04:10,430
donc je vais ajouter pousser.

84
00:04:10,460 --> 00:04:12,664
Je vais ajouter huit ici, par exemple,

85
00:04:13,980 --> 00:04:19,420
et maintenant des données contient trois,
cinq, neuf comme on initialise ici

86
00:04:19,420 --> 00:04:20,307
puis huit autres.

87
00:04:20,570 --> 00:04:22,920
Et en passant, je ne veux pas
donner l'impression erronée

88
00:04:22,920 --> 00:04:25,020
que toutes les valeurs doivent être uniques,

89
00:04:25,020 --> 00:04:27,820
Je peux juste ajouter une autre
une autre valeur qui est déjà là.

90
00:04:27,820 --> 00:04:30,821
Donc, je vais juste pousser
huit autres dans ce tableau.

91
00:04:32,010 --> 00:04:34,990
Et maintenant, si je regarde
les données qu'il contient les valeurs

92
00:04:34,990 --> 00:04:37,750
trois, cinq, neuf, huit et huit.

93
00:04:37,750 --> 00:04:41,160
Donc, il n'y a rien d'unique ici
au sujet de ces valeurs.

94
00:04:41,160 --> 00:04:42,750
Non

95
00:04:43,740 --> 00:04:45,590
ce n'est pas une condition d'un tableau.

96
00:04:45,590 --> 00:04:48,650
Un tableau peut contenir de nombreux éléments

97
00:04:48,650 --> 00:04:51,920
et ils peuvent être identiques
ou ils peuvent être uniques.

98
00:04:52,050 --> 00:04:55,705
Une autre chose que vous remarquerez
ou certainement remarquer ici est que

99
00:04:56,210 --> 00:05:01,134
l'ordre dans lequel la matrice
contient l'élément est conservé.

100
00:05:01,800 --> 00:05:04,920
Si vous continuez à ajouter
des éléments à l'aide poussoir

101
00:05:04,920 --> 00:05:07,645
ils vont tout simplement
être ajoutés à la fin

102
00:05:08,890 --> 00:05:11,282
mais à moins que vous allez dans le tableau

103
00:05:11,282 --> 00:05:13,980
et vous commencez à déplacer des éléments,

104
00:05:13,980 --> 00:05:16,820
cette structure, cette commande particulière,

105
00:05:16,820 --> 00:05:19,980
les trois étant le premier élément,
cinq étant la seconde et ainsi de suite

106
00:05:21,700 --> 00:05:22,520
restera.

107
00:05:22,520 --> 00:05:24,480
Voici une autre chose très pratique,

108
00:05:24,480 --> 00:05:26,320
quelque chose à vous devez savoir

109
00:05:26,930 --> 00:05:29,880
comment vous pouvez accéder
au nombre d'éléments,

110
00:05:29,880 --> 00:05:33,138
comment nous pouvons enquêter
sur combien d'éléments d'avoir actuellement,

111
00:05:33,190 --> 00:05:35,020
Je veux dire ici, il est facile,
parce que vous pouvez le voir.

112
00:05:35,020 --> 00:05:37,150
D'accord, il y a cinq éléments ici.

113
00:05:37,150 --> 00:05:38,650
Mais souvent, vous ne savez pas

114
00:05:38,650 --> 00:05:41,290
parce que vous êtes
en leur ajoutant programme

115
00:05:41,670 --> 00:05:43,690
ou vous obtenez des données de quelque part

116
00:05:43,690 --> 00:05:44,500
et vous devez d'abord savoir,

117
00:05:44,500 --> 00:05:47,149
ok, combien d'éléments
parlons-nous réellement à propos?

118
00:05:47,490 --> 00:05:50,210
Donc, cette longueur propriété ici
est tout à fait à portée de main.

119
00:05:50,210 --> 00:05:55,180
Il suffit de dire <i> Données </ i> ou quel que soit
le nom de votre réseau est, <i> .length </ i>

120
00:05:55,180 --> 00:05:58,260
Et vous pouvez voir cela
renvoie correctement cinq ici.

121
00:05:58,260 --> 00:06:01,820
Alors, comment puis-je
accéder maintenant ces éléments?

122
00:06:01,820 --> 00:06:05,240
Voilà donc une idée extrêmement
importante ici

123
00:06:05,300 --> 00:06:08,590
et il est également l'un des principaux
en gotchas des tableaux

124
00:06:08,590 --> 00:06:11,960
et peut-être dans l'ensemble de la programmation,
certainement pour les débutants,

125
00:06:11,960 --> 00:06:17,100
qui est que vous utilisez
l'index de l'élément

126
00:06:17,860 --> 00:06:20,938
et vous devez être prudent parce
que l'indexation commence à zéro.

127
00:06:21,290 --> 00:06:22,420
Alors, quelle est la moyenne?

128
00:06:22,420 --> 00:06:25,110
Eh bien, si vous souhaitez accéder
à un élément dans un tableau

129
00:06:25,110 --> 00:06:27,880
vous dites simplement le tableau

130
00:06:27,880 --> 00:06:33,220
puis directement ces bouclés brackets,
désolé crochets pas bouclés,

131
00:06:33,220 --> 00:06:35,060
directement ces supports non bouclés.

132
00:06:35,060 --> 00:06:36,439
D'accord, ce sont des supports de tableau.

133
00:06:37,320 --> 00:06:40,450
Et puis vous utilisez
l'index correspondant.

134
00:06:40,450 --> 00:06:43,400
Donc, dites que vous voulez
que le premier élément ici.

135
00:06:43,400 --> 00:06:47,620
Bon, alors cet élément a l'indice zéro.

136
00:06:47,900 --> 00:06:51,284
D'accord, ce qui est très important parce que
nous commençons à compter à zéro.

137
00:06:52,290 --> 00:06:54,175
Bon, alors je pourrais dire <i> data [0] </ i>

138
00:06:54,460 --> 00:06:57,793
et il retournera correctement
le premier élément.

139
00:06:58,720 --> 00:07:02,960
Donc, en conséquence si je voulais
que cet élément suivant ici,

140
00:07:02,960 --> 00:07:05,527
le deuxième élément,
je dois dire que <i> données [1] </ i>

141
00:07:05,730 --> 00:07:07,360
Encore une fois, pas <i> data [2] </ i>

142
00:07:07,360 --> 00:07:11,370
parce que ce serait en fait
à cet élément, mais <i> données [1] </ i>

143
00:07:11,370 --> 00:07:13,959
parce que nous commençons
à compter de zéro.

144
00:07:14,530 --> 00:07:19,948
Donc, cela a l'indice zéro, l'indice un,
indice deux, trois index, indice quatre.

145
00:07:20,660 --> 00:07:24,300
Donc, ce qui est important, d'accord,
car il a un certain nombre d'implications.

146
00:07:24,300 --> 00:07:26,850
Le numéro un, d'accord,
l'indexation commence à zéro,

147
00:07:26,850 --> 00:07:31,690
très bien, mais aussi l'indexation
se termine à la longueur moins un.

148
00:07:31,690 --> 00:07:33,893
Et c'est une erreur typique
parce que nous pensons,

149
00:07:33,893 --> 00:07:36,870
d'accord, nous avons cinq éléments,
je veux le cinquième élément

150
00:07:36,870 --> 00:07:39,290
donc je vais dire <i> données [5] </ i>

151
00:07:39,290 --> 00:07:43,180
mais cela serait bien sûr de mal
parce qu'il n'y a pas de cinquième élément,

152
00:07:43,180 --> 00:07:46,780
ou il n'y a aucun élément à l'indice de cinq.

153
00:07:46,780 --> 00:07:48,518
Au contraire,
c'est la bonne façon de le mettre.

154
00:07:49,360 --> 00:07:54,340
Le dernier élément d'un tableau
de cinq ans, la longueur de cinq,

155
00:07:54,340 --> 00:07:57,746
avec cinq éléments a indice quatre.

156
00:07:58,260 --> 00:08:00,770
D'accord, donc cela
est très, très important

157
00:08:02,040 --> 00:08:04,520
et si vous trébuchez sur cela à l'avenir,

158
00:08:04,520 --> 00:08:07,330
J'espère que vous reconnaissez
rapidement l'erreur

159
00:08:07,330 --> 00:08:11,128
parce qu'il est celui qui
est facile à faire au début.

160
00:08:11,890 --> 00:08:17,880
Alors laissez-moi recharger cela et regarder
quelque chose d'autre sur les tableaux.

161
00:08:17,880 --> 00:08:21,190
Je vais donc mettre en place
ce réseau de données à nouveau

162
00:08:21,480 --> 00:08:25,540
et maintenant je vais juste
l'initialiser avec un couple de valeurs.

163
00:08:25,540 --> 00:08:29,000
Par exemple, cinq, trois, sept, neuf, huit.

164
00:08:29,000 --> 00:08:31,970
Bon, alors ceci est notre réseau;
il dispose de cinq éléments.

165
00:08:31,970 --> 00:08:34,470
Alors maintenant,
ce que je voudrais faire est

166
00:08:34,470 --> 00:08:37,660
Je voudrais parcourir ce tableau

167
00:08:37,660 --> 00:08:40,890
et je voudrais ensuite sortir
les éléments ici

168
00:08:40,890 --> 00:08:43,440
et ceci est quelque chose que
nous allons utiliser assez souvent en fait.

169
00:08:43,470 --> 00:08:46,290
Souvent, nous avons des données
stockées dans un tableau

170
00:08:46,290 --> 00:08:48,140
puis, nous aimerions faire quelque
chose avec elle.

171
00:08:48,140 --> 00:08:49,090
Ainsi, par exemple,

172
00:08:49,090 --> 00:08:54,011
nous aimerions tracer ou nous aimerions
faire quelques calculs avec les éléments,

173
00:08:54,660 --> 00:08:57,150
mais nous devons faire avec chaque élément.

174
00:08:57,150 --> 00:08:58,462
Et alors comment faisons-nous cela?

175
00:08:58,690 --> 00:09:01,560
Eh bien, l'itération c'est
quelque chose que nous avons déjà parlé.

176
00:09:01,560 --> 00:09:04,820
Donc, nous pouvons utiliser
notre vieil ami les quatre boucles

177
00:09:04,820 --> 00:09:11,021
par exemple, pour itérer sur ce tableau
ou pour parcourir les éléments.

178
00:09:11,730 --> 00:09:13,250
Donc, voici comment nous pouvons le faire.

179
00:09:13,250 --> 00:09:15,890
Vous savez maintenant,
bien sûr, les quatre boucles.

180
00:09:15,890 --> 00:09:18,310
Donc, nous allons le mettre en place
comme nous l'avons avant

181
00:09:18,310 --> 00:09:21,316
et je vais initialiser
ce compteur de variable ici,

182
00:09:22,380 --> 00:09:23,486
<I> i = 0 </ i>

183
00:09:24,670 --> 00:09:26,050
Maintenant, quelle est la condition?

184
00:09:26,050 --> 00:09:29,740
Donc ce que je vais faire ici
c'est que je vais dire,

185
00:09:29,805 --> 00:09:33,200
<I> i </ i> est plus petit que
<i> data.Length </ i>

186
00:09:33,200 --> 00:09:34,890
et nous en parlerons dans une seconde.

187
00:09:34,890 --> 00:09:38,300
Bon, comme vous le savez,
<i> data.Length </ i> est cinq.

188
00:09:38,300 --> 00:09:40,627
D'accord, car il a obtenu cinq éléments

189
00:09:40,810 --> 00:09:42,150
et donc, fondamentalement, je vais dire,

190
00:09:42,150 --> 00:09:45,850
aussi longtemps que
<i> i </ i> est inférieur à cinq, continuer.

191
00:09:45,850 --> 00:09:48,150
Et bien sûr, enfin,

192
00:09:48,150 --> 00:09:51,220
nous avons besoin pour être sûr
d'incrémenter <i> i </ i> par un ici

193
00:09:51,220 --> 00:09:53,180
sinon nous aurons une boucle infinie,

194
00:09:53,590 --> 00:09:55,195
et nous ne voulons pas des boucles infinies.

195
00:09:55,320 --> 00:09:58,700
Ensuite, les accolades, <i> Maj Retour </ i>.

196
00:09:58,700 --> 00:10:01,210
D'accord, sinon il serait exécuté immédiatement.

197
00:10:01,210 --> 00:10:03,904
Donc, maintenant nous allons
par exemple sorties de

198
00:10:06,440 --> 00:10:08,690
la valeur de <i> i </ i> à chaque itération.

199
00:10:09,620 --> 00:10:10,910
Ok, <i> Entrée </ i>.

200
00:10:10,910 --> 00:10:15,444
Donc, comme vous pouvez le voir ici, cela
commence maintenant à zéro comme il se doit.

201
00:10:16,110 --> 00:10:20,200
Et puis il continue à charge par un,

202
00:10:20,680 --> 00:10:23,200
jusqu'à quatre, donc ne va pas à cinq

203
00:10:23,200 --> 00:10:25,960
parce que la dernière condition
qui est vrai ici est

204
00:10:25,960 --> 00:10:30,051
si quatre est inférieur à cinq,
puis il arrête.

205
00:10:31,100 --> 00:10:35,210
Et donc si vous regardez ces chiffres ici,

206
00:10:35,210 --> 00:10:40,530
ce sont, bien sûr, exactement
les bons index de ce tableau.

207
00:10:40,530 --> 00:10:45,230
D'accord, cela est l'élément zéro, un élément,
l'élément deux, élément à trois, à quatre éléments.

208
00:10:45,230 --> 00:10:46,593
Donc, nous pouvons utiliser cela.

209
00:10:48,440 --> 00:10:53,850
Donc, je vais tout simplement refaire cette boucle
et plutôt que de dire <i> console.log (i) </ i>

210
00:10:53,850 --> 00:10:59,210
Je vais vous dire <i> console.log </ i>
et supports de données <i> i </ i>

211
00:10:59,210 --> 00:11:02,510
ou <i> i </ i> éléments,
pour ainsi dire, de ce tableau,

212
00:11:02,510 --> 00:11:06,680
et puis si je fais ce que
je fais obtenir les éléments

213
00:11:07,020 --> 00:11:12,050
et voilà comment
nous parcourons un tableau; très utile.

214
00:11:12,050 --> 00:11:16,090
Et vous verrez ceci une tonne de fois
tout au long du reste de ce cours.

215
00:11:16,090 --> 00:11:20,530
D'accord, nous parcourons
une structure de données, un tableau,

216
00:11:20,530 --> 00:11:25,869
en utilisant cette condition ici <i> i </ i> plus petite
que notre structure de données <i> .length </ i>

217
00:11:26,060 --> 00:11:28,120
et alors nous pouvons utiliser le fait

218
00:11:28,120 --> 00:11:33,190
que <i> i </ i> est en fait exactement
l'indice correct du tableau

219
00:11:33,190 --> 00:11:34,612
au cours de l'itération.

220
00:11:34,690 --> 00:11:39,550
Bien; donc autre chose que
je veux vous montrer le dernier bit ici,

221
00:11:39,550 --> 00:11:43,497
je vais recharger cette fois,
donc j'avoir une console vide.

222
00:11:46,110 --> 00:11:49,890
Ce que nous avons fait jusqu'à présent est
fondamentalement nous avons initialisé les tableaux

223
00:11:49,890 --> 00:11:52,440
puis nous avons commencé
à stocker des nombres en eux,

224
00:11:52,440 --> 00:11:56,822
quelque chose vous savez comme ceci et oops.

225
00:11:59,870 --> 00:12:02,180
Et cela fonctionne très bien,
donc nous pouvons voir ici,

226
00:12:02,180 --> 00:12:04,420
d'accord, nous avons quatre
numéros stockés ici

227
00:12:04,420 --> 00:12:09,710
mais en réalité une augmentation
peut contenir tout type de données,

228
00:12:09,710 --> 00:12:11,398
pas seulement des chiffres.

229
00:12:11,398 --> 00:12:17,071
Je pourrais, par exemple, maintenant
pousser un autre type de données.

230
00:12:17,280 --> 00:12:20,020
Ainsi, par exemple,
je pourrais pousser une chaîne ici.

231
00:12:20,020 --> 00:12:25,650
D'accord, je vais pousser la chaîne data
désolé "bonjour" en données

232
00:12:27,280 --> 00:12:28,840
et non pas un problème.

233
00:12:28,840 --> 00:12:32,060
Donc, nous allons jeter
un coup d'oeil à des données.

234
00:12:32,060 --> 00:12:35,060
Oui, les données contient maintenant
les numéros: trois, cinq, huit, six,

235
00:12:35,060 --> 00:12:36,500
comme nous les initialisé ici

236
00:12:36,500 --> 00:12:37,758
puis la chaîne "bonjour".

237
00:12:38,070 --> 00:12:40,313
Donc, il n'y a absolument
aucun problème avec cela.

238
00:12:40,313 --> 00:12:46,208
Vous pouvez ajouter tout
type de données dans un tableau.

239
00:12:46,470 --> 00:12:52,383
Et donc ce fait, il est très intéressant
si l'on considère que le tableau lui-même

240
00:12:52,383 --> 00:12:55,180
bien entendu, est un type de données

241
00:12:55,180 --> 00:12:59,620
et nous pouvons ajouter
des matrices dans des tableaux.

242
00:12:59,620 --> 00:13:04,130
Donc, ce qui est souvent là où les choses
deviennent un peu déroutant pour les débutants

243
00:13:04,130 --> 00:13:05,520
mais c'est vraiment très simple.

244
00:13:05,520 --> 00:13:07,690
Je veux dire penser
à un tableau comme une boîte

245
00:13:08,020 --> 00:13:11,600
et, bien sûr, vous pouvez imaginer
que vous avez une assez grande boîte

246
00:13:11,600 --> 00:13:15,530
et vous mettez des boîtes
plus petites dans cette grande boîte

247
00:13:15,530 --> 00:13:19,920
et les petites boîtes contiennent
maintenant les éléments d'intérêt

248
00:13:20,270 --> 00:13:21,870
mais bien sûr, vous ne diriez pas

249
00:13:21,870 --> 00:13:26,620
que la plus grande boîte est vide maintenant
contient simplement d'autres boîtes

250
00:13:27,280 --> 00:13:30,660
et il est de la même manière
exacte avec des tableaux.

251
00:13:30,660 --> 00:13:32,170
Donc, vous savez, nous pourrions,
par exemple,

252
00:13:32,170 --> 00:13:35,020
dire quelque chose comme, d'accord,
nous allons initialiser un tableau,

253
00:13:35,990 --> 00:13:37,880
Je vais l'appeler <i> A </ i> ici.

254
00:13:37,880 --> 00:13:41,050
D'accord, les valeurs un, deux, trois,
par exemple,

255
00:13:41,050 --> 00:13:43,922
et je vais initialiser
un tableau <i> B </ i>.

256
00:13:44,640 --> 00:13:48,043
Il a les valeurs de neuf, huit, seven,
n'a pas d'importance.

257
00:13:49,170 --> 00:13:51,350
Bon, alors maintenant
j'ai deux tableaux ici

258
00:13:51,350 --> 00:13:53,130
et maintenant ce que
je pouvais faire, par exemple,

259
00:13:53,130 --> 00:13:55,280
est que je pourrais définir un tableau,

260
00:13:55,280 --> 00:13:57,595
ce serait notre grande boîte ici <i> C </ i>,

261
00:13:57,870 --> 00:14:02,610
qui contient les éléments
de ces deux tableaux.

262
00:14:03,160 --> 00:14:06,680
Bon, alors maintenant <i> C </ i>
sera un tableau

263
00:14:06,680 --> 00:14:08,873
et le premier élément sera huit,

264
00:14:08,873 --> 00:14:11,500
qui est un autre tableau avec
les éléments: un, deux, trois,

265
00:14:11,500 --> 00:14:15,477
et <i> B </ i>, qui est aussi un autre tableau
avec des éléments: neuf, huit, sept.

266
00:14:15,840 --> 00:14:19,298
Donc, si je fais cela et maintenant
je prends un coup d'oeil à <i> C </ i>,

267
00:14:20,810 --> 00:14:21,790
voici ce que vous voyez,

268
00:14:21,790 --> 00:14:23,190
vous voyez ah ha, c'est un tableau

269
00:14:23,190 --> 00:14:24,682
parce que vous pouvez
voir ces deux supports

270
00:14:24,890 --> 00:14:27,640
et maintenant Chrome ici vous dit,

271
00:14:27,640 --> 00:14:31,565
"Hey, nous avons deux tableaux ici" et
vous pouvez effectivement cliquer sur ceux-ci,

272
00:14:32,880 --> 00:14:36,905
sur ces petites flèches ici
et vous pouvez voir les éléments,

273
00:14:37,680 --> 00:14:40,948
qui fait très bien l'indice
ici et la longueur.

274
00:14:41,480 --> 00:14:46,730
Donc, cette première a une longueur
de trois et possède ces éléments

275
00:14:46,730 --> 00:14:51,310
et ce fut second a une longueur
de trois aussi bien

276
00:14:51,310 --> 00:14:52,500
et que ce sont ces éléments.

277
00:14:52,500 --> 00:14:55,270
Et par la façon dont ceux-ci peuvent
avoir des longueurs très différentes.

278
00:14:55,770 --> 00:15:00,379
Comme nous l'avons dit, vous pouvez stocker
quoi que ce soit dans un tableau si vous voulez.

279
00:15:00,750 --> 00:15:03,870
Donc, ceci est maintenant appelé
un tableau à deux dimensions

280
00:15:03,870 --> 00:15:05,720
parce que ce fut un tableau à une dimension,

281
00:15:05,720 --> 00:15:09,400
ok, il a une liste d'éléments.

282
00:15:09,400 --> 00:15:10,920
Mais ici,

283
00:15:10,920 --> 00:15:12,860
ceci est un tableau de tableaux.

284
00:15:12,860 --> 00:15:17,190
Donc, il est un tableau à
deux dimensions et il peut en fait être

285
00:15:17,190 --> 00:15:20,895
en trois dimensions, à quatre dimensions, mais de
nombreuses dimensions, vous pouvez imaginer.

286
00:15:21,230 --> 00:15:24,289
Maintenant, on ne va pas y aller
pour le moment

287
00:15:24,800 --> 00:15:27,530
nous finirons par utiliser
des tableaux en trois dimensions.

288
00:15:27,530 --> 00:15:29,560
Mais pour le moment,

289
00:15:29,560 --> 00:15:32,570
si vous pouvez envelopper votre tête
autour des tableaux à deux dimensions

290
00:15:32,570 --> 00:15:35,360
comme une boîte de boîtes
qui contiennent les éléments,

291
00:15:35,360 --> 00:15:37,230
puis c'est tout grand.

292
00:15:38,330 --> 00:15:41,250
Pourquoi utilisons-nous ceci concrètement?
Pourquoi avons nous besoin de ça?

293
00:15:41,580 --> 00:15:44,635
Eh bien, si vous regardez
maintenant ici à nouveau

294
00:15:46,230 --> 00:15:49,290
cette ligne d'une simulation
de la dérive génétique.

295
00:15:49,290 --> 00:15:53,032
Nous avons ici le tableau de données,
il stocke les valeurs mille pour <i> P </ i>.

296
00:15:53,350 --> 00:15:56,530
Maintenant, ce que nous voulons
faire dans la prochaine session en fait

297
00:15:56,530 --> 00:16:01,515
est de montrer non seulement une simulation
mais en fait un couple, soit 10.

298
00:16:02,390 --> 00:16:08,520
Donc, ce que nous avons besoin maintenant
est un moyen de stocker 10 tableaux

299
00:16:08,520 --> 00:16:12,110
qui contiennent ces différentes
valeurs de <i> P </ i>

300
00:16:12,110 --> 00:16:16,100
et que l'information, les réseaux eux-mêmes

301
00:16:16,100 --> 00:16:17,830
doivent être stockés en quelque sorte

302
00:16:17,830 --> 00:16:19,770
et bien sûr, nous allons utiliser un tableau.

303
00:16:20,390 --> 00:16:22,410
Nous allons utiliser un tableau
à deux dimensions

304
00:16:22,410 --> 00:16:24,700
et ceci est l'idée de base derrière elle.

305
00:16:24,700 --> 00:16:27,888
D'accord, donc cela conclut notre brève
introduction dans des tableaux.

306
00:16:28,248 --> 00:16:30,883
Dans la prochaine session, nous allons mettre
ces connaissances en utilisation.

307
00:16:31,199 --> 00:16:32,129
On se verra là bas.

