Welcome back Matron Code, we're in Chapter three, lecture six.
In the past few lectures, we looked at randomness and in particular, how we can implement randomness in JavaScript and we use coin flipping as an example.
So now this video,
I'm going to focus on genetic drift and I'm going to explain the concept of genetic drift and how that ties to randomness and coin flipping.
So let's recall what we did in the context of evolutionary biology until now.
Basically, we had this simple model with two alleles: A1 and A2 and we at the node at the frequency of the A1 allele as P and the frequency of the A2 allele as Q and then in the Hardy Weinberg world where the population size was infinite we could calculate the genotype frequencies, the Hardy Weinberg frequencies, namely <i>A1A1</i> would be <i>P times P</i>, so <i>P squared A1A2</i>, would be <i>2pq</i> and <i>A2A2</i> would be <i>Q square.</i>
And remember these are just the probabilities of essentially picking the corresponding alleles.
So <i>P times P A1A1,</i>
<i>P times Q plus Q times P</i> for <i>A1A2</i>
<i>Q times Q</i> for <i>A2A2</i>.
Now the key change that we're going to implement now-- that we're going to think about is that of the population size.
So <i>N</i> is typically the letter, capital N that's used to denote the population size and so far in the Hardy Weinberg world, we assumed this to be infinite.
The key change now that we're going to implement is that we're not going to assume that the population size is infinite.
But indeed that it is finite.
It is finite and it has an <i>N</i> individuals.
These are diploid individuals as usual.
So in fact what we have is 
<i>2N</i> alleles in the population and that's a key aspect.
So from now on we assume a population size, a finite population size of <i>N</i> which also means that we have <i>2N</i> alleles in the population.
What we've also done is we thought about flipping random coins or rather fair coins but there of course coming up heads and tails randomly and if it's a fair coin then those probabilities of heads or tails coming up are exactly 50% and so what we did, right, we had this example, where we said,
"Okay, we're gonna flipped this 10 times"-- six, seven, eight, nine, 10 and then basically we're going to fill in the H's an T's here as heads or tails come up and then we even calculated the probabilities of certain outcomes and indeed we then implemented this with a simulation in JavaScript for one particular case, namely the probability of exactly eight heads coming up and two tails.
Why do this in the first place?
So we can now essentially think of these probabilities not as the heads and tails probabilities of flipping a coin but actually of the allele frequencies.
So we can, for example, assume here the equivalent would be that both <i>P</i> and <i>Q</i>, are 0.5.
So let's say we just happen to be in a population currently where the allele frequencies are 50/50.
So 50% is <i>A1</i> allele and 
50% is a <i>A2</i> allele and so the equivalent here would be that we have a admittedly very small population of five individuals, which would of course mean-- individuals, which would also mean that we have 10 alleles.
And now if we were to generate the next generation.
Basically what we need to do is we would need to pick randomly alleles from this pool with these frequencies and that is exactly identical in this case to flipping a fair coin and that's how this whole thing coin flipping exercise ties into genetic drift.
So what I'm going to do now is
I'm essentially going to set up a siutation where we have a small population and I'm now going to pick randomly individuals and I'm actually going do this-- sorry-- randomly alleles and I'm going to do this using Google's coin flipper.
Okay so what we're going to do is we're going to assume a population of 10 individuals, which also means that we have
<i>2N</i> equals 20 alleles here in this population, and even though the population sizes finite, basically we have this gamete pool here has many, many, many, many, many, many, many,
<i>A1</i> and <i>A2</i> alleles.
It would be inaccurate to say it has infinitely-many alleles, but we'll assume that each individual creates enormous numbers of gametes and that's the the effect here of the population size is basically can be ignored.
We can roughly assume that this is essentially an infinite gamete pool even though that is technically not quite correct.
I mean, you can't really create an infinite amount of gametes from only 10 individuals, but let's just say we have millions and millions, or even billions of gametes that we can effectively ignore the fact that this is also of a finite size.
Good and we're going assume the allele frequencies are equal to each other, namely exactly 0.5 and that means that there are half of those alleles here of this enormously large gamete pool, half of those gametes are <i>A1</i> and half of those gametes are <i>A2</i> and our job now is to create the new population , which is made up of 10 individuals or in other words of 20 alleles and we're now going to go over to the coin flipper in the browser and we're essentially going to flip a coin 20 times and when a heads comes up that means it's an <i>A1</i> allele, if a tails comes up, that means we just picked an <i>A2</i> allele.
All right, so let's do this.
So I'm here in a browser;
I'm using Google Chrome, but you can use any browser that you'd like to use.
I'm going to search here for "flip a coin" and this automatic flipper comes up where either heads or tails is the result.
I'm pretty sure this is a fair coin that's implemented here.
So we're going to use this for our purposes.
And when a heads comes up I essentially... take this to mean that an <i>A1</i> allele is picked and if a tails comes up, then that means an <i>A2</i> allele is picked and so I'm essentially now going to reload this page 20 times and I'm going to keep track of how many heads and tails come up.
All right, let's get going.
Tails.
So that's an <i>A2</i> allele.
Heads and that's the <i>A1</i> allele.
Tails.
Tails.
Heads.
Heads.
Heads.
Heads.
Heads.
Tails.
Heads.
Tails.
Tails.
Heads.
Tails.
Tails.
Tails.
Tails.
Heads.
And tails.
All right, so let's take a look.
We had nine times heads come up or in other words we picked an <i>A1</i> allele nine times out of the 20 and we picked the <i>A2</i> allele 
11 times of the 20.
So what is a mean?
Well it means had now in our new generation that we just composed like this, we have a new <i>P</i>, namely nine alleles out of 20, which corresponds to 45% and we also have a new <i>Q</i>, namely 11 out of 20 are <i>A2</i> alleles and we have 55%.
And so this is it.
So take a look very closely, we started with a population that has a <i>P</i> and a <i>Q</i> value of 0.5 so the allele frequencies were 50 and 50.
If we had made no assumption about a finite population size--
So if we were still in the Hardy Weinberg and we would have assumed that this is infinite, we would have picked infinitely-many alleles, and of course at the end, so to speak, of picking infinitely-many alleles, this will be exactly 50-50.
And so that is why the allele frequencies never change in the Hardy Weinberg world which also means that there is no evolution according to our definition of evolution, which is to change an allele frequencies but here because we have this finite population size these random effects start kicking in.
Where we're only picking a finite number of alleles and of course that means that quite often actually the allele frequencies after we've picked a fine amount of times are not exactly what they were before.
And here is a great example, so we're now at 45% and 55%.
We started with 50-50% so within one generation we actually had quite a large change in allele frequencies and that is really the gist of genetic drift.
So the allele frequencies have changed, in other words evolution has occurred, according to our definition, simply because of these random chance effects and that is in a nutshell what genetic drift is
And so if you understand this then you understand genetic drift and what we're now going to do in the next lecture is we're going to implement this concept in JavaScript code.
We already have all the tools to do this and so we can now implement this in JavaScript code.
We will also visualize this and then we can investigate this much further.
So, I'll see you in the next lecture.
