Welcome back.
Nature, In Code.
We're in chapter three, lecture five.
In this lecture, we're going to go a little bit deeper into some of the technical details that we brushed over a little bit in the past couple of lectures.
And then once we've sorted out those important details, in the next lecture we're going to go ahead and we're going to use all of this knowledge that we've accumulated over the past few videos to actually implement genetic drift in JavaScript.
So here's our code that we developed in the last lecture.
It's already quite...
You know, I wouldn't say complicated, but fairly complex, specifically for someone who may just get started with programming, but I hope so far everything is by and large roughly clear what we're doing here.
So I want to talk a little bit more about these conditional statements here and control flow in general because control flow is incredibly important in programming.
And it will be important for all the things that we'll be doing in this course.
So what I'm going to do is,
I'm now simply going to, you know, select all the code here, and I'm going to delete it and then save this as a new file. and I'm going to name this <i>control_flow</i>.
All right.
And so I can use this to develop new code to explain some of these principles.
Now let's do something like this.
Let me define a variable.
I'm going to call it <i>x</i>. and we're simply going to assign a random number to this variable.
So now we could do something like...
Well, if this <i>x</i> is, say, smaller than...
... 0.3, for example, then we're going to say, <i>console.log</i>,
We're actually going to put out a statement saying, <i>x</i>, and I'm going to use string concatenation, just to occasionally switch the way we put strings.
Sometimes you do this with commas, sometimes with plus as concatenation,
<i>x</i> is smaller than 0.3.
Just basically putting out a statement saying that this number is now smaller than 0.3.
And if <i>x</i> is indeed not smaller than 0.3, well then I'm going to output <i>console.log</i>
<i>x</i>, okay, is larger than or equal to 0.3.
Which it obviously will be.
I mean it's either smaller than 0.3 or it is larger or equal to 0.3.
And so we could save this and we could now go over to the browser and open the file here...
<i>control.flow.html</i>, and we would see here in the console these statements, 0.52 and so on, is larger/equal to 0.3.
That's, of course, correct.
I'm going to reload this, reload it again...
Let me see if I can get here a number that's smaller here.
0.14 is smaller than 0.3.
Okay, so this works.
Now let's go over to the code again.
Now let's say for example,
I would like to test, not only for these two conditions but for a third.
Now, let's say I would like to do something as follows,
I would like to do something, if <i>x</i> is indeed smaller than 0.3, but then I would like to do another thing if <i>x</i> is larger than 0.3, but smaller than 0.6.
So somewhere in an intermediary range.
And then finally, if that's not the case either then, so if <i>x</i> is larger than 0.6,
I'd like to do a third thing.
So how can I do this?
Well, this is where this <i>else/if</i> comes in handy.
So we can just here add another condition using this <i>else/if</i>.
<i>else/if</i>...
And so the condition here would be,
<i>x</i> is smaller than 0.6.
And again, curly brackets, same structure as usual.
So here the correct statement would be:
<i>console.log</i>, okay?
<i>x</i> is...
Whoops. Wrong. is certainly larger or equal to 0.3, otherwise we would be up here.
But it is also smaller than 0.6.
So we're now in this intermediary range and then finally if you now get to this <i>else</i> here, well, the <i>x</i> is now larger than 0.6, so we have to adapt this here.
So I'm going to save this.
Just briefly going to go over to the browser to see if it worked.
I'm going to reload this.
So, 0.6 is indeed larger or equal to 0.6.
0.2 is indeed smaller than 0.3, and let's see if we can get some intermediary value.
Here we are, 0.46 is larger or equal to 0.3 and it is also smaller than 0.6.
So this works.
And so the way to read this is basically first in JavaScript will evaluate that statement.
If it's true it will execute whatever you have here and then be done with this whole <i>if/else</i> block.
Okay?
So once one of these evaluates a true, we're done.
If it's not true, then it will just move on to the next.
<i>Else</i>, so it's not true, but it will test another condition.
Now, if that is true, it will simply execute this code, and then be done with it.
And again, if that is also not true, then it will go to the final 
<i>else</i> and say okay,
I'm going to now execute this code here, because none of these conditions were true.
And you can see this here in the browser, right?
We never have multiple lines that are being output.
It's always a single line, always.
So these are treated independently in the sense that one of them is evaluated--
Once one of them is evaluated as true, the whole thing gets terminated and you will move to the next block of code that's outside of this <i>if/else</i> construct and so that's an important concept.
We'll use this quite often where we throw a random number, and we say, well, if it's in this range then do "a", if it's in this other range here, then do "b", and if it's in this third range then do "c", and potentially we even have a fourth and a fifth.
Then we can stack together many of those <i>else/ifs</i> if we want to, but that's just an important consideration.
So there's also this <i>else/if</i>.
Most of the time you'll simply see <i>ifs</i>.
Also, frequently, you see <i>if/else</i>, but sometimes you see it combined like this.
<i>if</i>, <i>else/if</i>, and then <i>else.</i>
Now, another important concept that I mentioned in the previous lecture is that of these curly brackets.
So, I said that, in principle, you can if you only have one line after an <i>if</i>, you can, in principle, remove those curly brackets.
But I told you, really urged you, not to do it and I'm going to show you now why I'm urging you not to do this.
So, I'm going to again make an example.
So I'm going to leave this line here of our <i>x=</i><i>Math.random</i>, and just to be sure,
I'm just going to output this value here of <i>x</i>, okay?
Just so we have this in the console.
Okay.
So now let's say I had something like this:
If <i>x</i> is smaller than 0.3,
Okay, 0.3?
Then I'd like to do something.
For example, I'd simply like to output that it is indeed smaller than 0.3.
So normally, right,
I would do it like this and then here just have the <i>console.log</i>.
And then here I'll put the value,
<i>x +</i> is smaller than 0.3 as we had before.
So this would obviously work.
Now, I could do,
I could basically now remove those lines here and it would still work.
So let's do this, okay?
Let's save it and go back to the browser and reload it.
So we have 0.78.
Well, this is not smaller than 0.3, so nothing is being shown here.
0.7, 0.91, okay, let's see, reload.
Okay, here we have a number that is indeed smaller than 0.3, and we get this statement.
So you can see this <i>if</i> condition works, however, this is dangerous because essentially what's happening here is that JavaScript will ignore the line breaks and the white space and will essentially treat it as just one line.
But now, if you don't know this, you may think, okay, so if this condition is true, then this should be executed and you know what?
Later you may come along and say, "Hey, I want to do something else actually."
In this case I would also like to log something else or execute something, something else you know.
Something important.
Let's just write
"something important" here.
Okay.
So now you look at this code and you think, okay, if <i>x</i> is smaller than 0.3, then we'll output that fact and then we'll also output something important.
Okay, let's save this.
Move over 0.74, boom, something important.
Hang on, that's not what should happen.
0.74 is obviously <i>not</i> smaller than 0.3.
But, nevertheless something important is being output here.
So, what's going on?
Obviously this code is breaking, it's failing.
It's not doing what we thought it would do.
So, why is that?
Well, as I said, basically JavaScript will ignore line breaks and white space and it will essentially treat it like this.
Okay, we'll simply remove this, and then it will also remove this, okay?
So everything will be executed one by one, on one line, so to speak, and in fact, you know, no white space, but I'm just going to add this here just for visual esthetics.
And so now you can see why this is indeed working the way it is because we're essentially saying if <i>x</i> is smaller than 0.3, then this will be executed.
End of statement.
And so now this next statement basically is independent of this if <i>x</i> is smaller than 0.3.
So in order to avoid this problem, please simply follow a simple rule:
Always put the curly brackets.
And then if you have something like this, okay?
It's very clear what's happening here if <i>x</i> is smaller than 0.3, then everything in these curly brackets will be executed.
So if we would save this, now "something important" should happen because this is indeed smaller than 0.3, but now it doesn't, and that's the correct way.
Because otherwise basically the way we wrote it before, would be interpreted like this, okay?
Which is not at all what you thought it would do.
So, simple rule to avoid this mistake which can be very, very tricky to find.
Don't be lazy.
Always use these curly brackets when you use <i>control.flow.</i>
Now, there's one more thing
I'd like to talk about, and to do that, let's just move over into the JavaScript console.
So we have these conditions, right, where we said, if <i>x</i> is smaller than 0.3 and so on.
So how does this work?
So basically, we have these operators where we can compare values.
So, for example, we can say 3, smaller than 4.
Now, this expression will be evaluated and into Boolean and of course, this is the Boolean <i>true</i>, right?
Because 3 is indeed smaller than 4.
You can also use
3 is smaller than or equal to 4.
This will be evaluated and, of course, it will also be evaluated as true.
Vice versa, you could say
3 is greater than 4.
And this statement is clearly false,
So this would be evaluated as false.
Similarly, you can say greater or equal to 4.
That is, of course, also false.
So will also be evaluated to <i>false</i>.
So these are, you know the four operators to compare for whether something is smaller or equal to and greater or equal to a certain value.
You can also check directly for equality, and namely using this double equal sign.
So 3 being equal to 4, well that's not true.
So this will evaluate to false.
On the other hand, 3 equals 3, that equality test will evaluate to true.
Okay, so there are two things here
I'd like to explain about this.
Two important details and I'm just going to reload this so I can clear the console here.
So imagine if we have a variable.
Let's say <i>a</i> that we're going to define and initialize with the number 5.
So if we, now would just output <i>a</i>, yeah?
We would see it as 5.
Now let's say we have another variable there were going to call <i>b</i>, and we're going to initialize this variable as the <i>string</i> 5 or the character 5, okay?
So a string is just a set of characters, it can be indeed an empty string or it can just have one character here.
Okay.
And now if we type <i>b</i>, then this would correctly output the string <i>b</i> because that's what's currently stored in <i>b</i>.
Now these are different types, right, as we said in another video.
This is a number, and this is a string, and indeed you can in fact check for a type of JavaScript variable by using this type of operator.
Okay, so if you type type of <i>a</i> and then hit enter, it will tell you that <i>a</i> indeed currently stores a number.
And if you type type of <i>b</i>, then it will tell you that <i>b</i> currently stores a string.
So that's, you know, occasionally a handy operator.
If you're not sure this is now a number or is this a string?
But here's the important part.
So I said we can do something like
<i>a</i> double equal sign <i>b</i> and this would now check for equality of the values in those two variables.
The point is that in many programming languages actually this will give you now some type of an error, or it would you know be confusing in one way or another because essentially you are now comparing a number with a string and you know most programming languages would immediately tell you, again in the form of an error or a warning, this doesn't make sense.
You can't compare a string to a number.
Now JavaScript is much more lenient, it will basically say, okay, I have a 5 in one variable and I have a 5 in the other variable.
Fine, they're different types, but, you know, as far as I'm concerned those are equal values.
So what's happening here is that 
JavaScript actually implicitly converts the types to be the same.
In this case it will convert the string 2 to a number implicitly under the hood.
You won't even realize that this is the case.
If you want to check whether those are also the same type, that's when this triple equal sign comes in.
So this now means I'm not only checking for equality of the values,
I'm also checking for the equality of the type.
So this will now evaluate to false because yes, 5 and 5, are the same in terms of the values, but they're not the same type because they are two different types.
One of them is a number, and one of them is a string.
And so there's quite a bit of discussion about which of those is the better operator.
And of course, you know, a lot of arguments can be made that this is the better operator because it does not only compare the value, but also the type, but I'm a bit two minds about this.
I obviously very much see the point but for most intents and purposes and certainly for the purposes of what we do here in this class,
I'm going to stick with this double equal sign simply because we won't run into this problem.
And also it is what's being used in almost any other programming language so I'm going to stick with that, but I want you to be aware of this fact that this operator exists.
That it checks not only for the equality of the values but also of the types.
And you can check the types using this type of operator and normally you actually already know what the types are.
The really important thing here is actually not, you know, the go-on, philosophical discussions whether the double equal or the triple equal is better.
The really important point, and one that I mentioned in an earlier lecture already is that you don't do this when you want to test for equality, right?
Because if you test for equality, this won't do it.
This is the assignment operator, you're now assigning the value that's stored in <i>b</i> into <i>a</i> this is not at all what you wanted, if you want to test for equality.
So be sure you don't use this for an equality check but you use one of those.
I'm going to keep using this for the rest of this course.
Be aware that this exists simply don't do this if you want to do an equality test.
All right.
So this concludes this video.
We learned about the different types.
We saw that there are three types at the moment.
We have numbers, Booleans and strings.
There are other types we get to know further down the road.
We also looked at some of the subtleties of control flow and now we're completely perfectly equipped to actually implement genetic drift in JavaScript.
And we'll start doing that in the next video and I'll see you there.
