1
00:00:03,400 --> 00:00:07,399
Bienvenue: Nature, dans le code.
Nous sommes dans le chapitre 3, leçon 15.

2
00:00:07,399 --> 00:00:11,140
Ceci est la dernière leçon du chapitre 3,
et dans cette conférence,

3
00:00:11,140 --> 00:00:14,950
nous allons mettre en œuvre les goulets d'étranglement,
les goulots d'étranglement de la population,

4
00:00:15,380 --> 00:00:20,420
en JavaScript dans nos simulations,
et nous verrons ensuite si l'informé,

5
00:00:20,420 --> 00:00:23,700
ou la prédiction mal informé était la bonne.

6
00:00:23,700 --> 00:00:26,755
Je pense avoir une idée,
mais nous allons voir.

7
00:00:27,020 --> 00:00:31,197
Donc, ceci est le code comme nous l'avons
laissé la dernière fois que nous l'avons développé.

8
00:00:31,197 --> 00:00:32,530
Nous avons ici

9
00:00:32,530 --> 00:00:34,510
Nous montrant l'effet de
la taille de la population.

10
00:00:34,510 --> 00:00:36,900
Nous le calculons ici avec cette fonction.

11
00:00:36,900 --> 00:00:39,902
Voici ce que nous avons développé
dans la dernière leçon,

12
00:00:39,902 --> 00:00:42,816
et cela semble fonctionner très bien.

13
00:00:43,510 --> 00:00:49,187
Ce que nous ne faisons pas à l'heure actuelle mais est de
mettre en œuvre effectivement de véritables goulots d'étranglement.

14
00:00:50,110 --> 00:00:53,590
Notre taille de la population est encore
<i> N </ i> et on ne change <i> N </ i>.

15
00:00:54,040 --> 00:00:56,050
Nous avons simplement mis ici,

16
00:00:56,050 --> 00:00:57,320
mais nous ne changeons.

17
00:00:57,320 --> 00:01:00,100
Nous ne changeons jamais
la taille de la population.

18
00:01:00,100 --> 00:01:02,708
Alors, comment allons-nous faire cela?
Comment allons-nous changer

19
00:01:02,708 --> 00:01:06,110
la taille de la population,
et qui devrait le faire?

20
00:01:06,110 --> 00:01:07,520
Qui devrait prendre la responsabilité?

21
00:01:07,520 --> 00:01:09,300
Qui devrait prendre soin d'elle?

22
00:01:09,300 --> 00:01:10,670
Donc, pour le moment,

23
00:01:10,670 --> 00:01:13,766
le seul endroit où la taille de
la population compte vraiment

24
00:01:13,766 --> 00:01:16,080
en termes de simulations,
qui est cette ligne ici,

25
00:01:16,080 --> 00:01:18,520
cette première ligne ici
<i> next_generation </ i>,

26
00:01:18,520 --> 00:01:23,749
où nous disons que nous allons tirer deux
<i> N </ i> allèles pour la prochaine génération.

27
00:01:24,520 --> 00:01:26,450
Alors faut-il faire ici?

28
00:01:26,450 --> 00:01:28,900
Faut-il vérifier quelle génération
nous sommes, et ainsi de suite?

29
00:01:28,900 --> 00:01:31,119
Non, nous ne devrions pas,
je ne le pense pas.

30
00:01:31,119 --> 00:01:34,143
<I> next_generation </ i> ne voudrais pas

31
00:01:34,143 --> 00:01:36,860
à propos de l'heure actuelle
dans la simulation.

32
00:01:36,860 --> 00:01:38,410
C'est tout simplement une génération.

33
00:01:38,410 --> 00:01:41,140
Il ne devrait pas avoir à se soucier
de la taille de la population.

34
00:01:41,140 --> 00:01:46,033
Donc, ce que nous ferons est que nous allons
simplement passer la taille de la population

35
00:01:46,033 --> 00:01:50,280
en tant que paramètre, donc je vais
mettre en place ici un second paramètre,

36
00:01:50,280 --> 00:01:55,539
et je vais appeler cela <i> current_N </ i>,
puis ici, je vais simplement dire

37
00:01:55,539 --> 00:01:59,120
le nombre de tirages est 2 fois
<i> current_N </ i>.

38
00:01:59,120 --> 00:02:00,900
Et avec cette simple modification,

39
00:02:00,900 --> 00:02:04,437
je déléguer la responsabilité de cela

40
00:02:04,437 --> 00:02:08,050
à celui qui appelle cette fonction,
et je dis:

41
00:02:08,050 --> 00:02:11,773
Regardez, il vous suffit de me
passer la taille de la population.

42
00:02:11,773 --> 00:02:12,890
Quoi que ce soit,

43
00:02:12,890 --> 00:02:14,322
Je vais travailler avec elle.

44
00:02:14,790 --> 00:02:17,425
Donc, je pense que ce la bonne approche.

45
00:02:18,130 --> 00:02:20,423
D'accord, mais maintenant nous venons
de passer sur le problème,

46
00:02:20,423 --> 00:02:24,840
alors qui doit prendre soin de régler
la taille de la population correcte?

47
00:02:24,840 --> 00:02:28,272
Eh bien, je pense que cela devrait
se passer ici dans la simulation,

48
00:02:28,272 --> 00:02:32,700
parce que ce que nous avons notre iterator,

49
00:02:32,700 --> 00:02:35,880
qui exécute
un certain nombre de générations,

50
00:02:35,880 --> 00:02:39,890
qui pousse la taille de la population
dans le tableau <i> population_size </ i>,

51
00:02:39,890 --> 00:02:44,161
afin que nous puissions plus tard
calculer correctement la taille de la population,

52
00:02:44,161 --> 00:02:48,130
et qui appelle surtout la fonction
<i> next_generation.</ i>

53
00:02:48,130 --> 00:02:49,970
Donc, je pense que cela
devrait se produire ici.

54
00:02:49,970 --> 00:02:51,800
Ceci est le bon endroit pour le faire.

55
00:02:51,800 --> 00:02:55,130
Donc ce que je vais faire est que
je vais mettre en place ici une variable locale.

56
00:02:55,130 --> 00:02:57,882
Je ne vais pas utiliser cela partout
en dehors de cette fonction,

57
00:02:57,882 --> 00:02:59,903
si cela peut être une variable locale,

58
00:02:59,903 --> 00:03:03,110
et je vais l'appeler <i> population_size </ i>.

59
00:03:08,420 --> 00:03:10,864
Et je ne vais pas le mettre
à une valeur particulière,

60
00:03:10,864 --> 00:03:13,565
Je vais juste de le définir pour le moment.

61
00:03:14,323 --> 00:03:20,008
Et maintenant, ici-bas dans
la boucle où nous exécutons les générations,

62
00:03:20,008 --> 00:03:24,600
ici, je pouvais maintenant attribuer
une valeur à cette taille de la population.

63
00:03:24,600 --> 00:03:26,497
Donc ce que je vais faire ici est

64
00:03:26,497 --> 00:03:32,308
Je vais dire <i> population_size </ i>
est égal, par exemple, <i> N </ i>.

65
00:03:33,670 --> 00:03:36,096
Maintenant, ce sera vrai
la plupart du temps,

66
00:03:36,096 --> 00:03:39,320
mais d'autres fois,
nous voulons le mettre à 10.

67
00:03:39,320 --> 00:03:42,420
Donc, avant que je le fais,
ce que nous devons faire maintenant

68
00:03:42,420 --> 00:03:46,223
est que nous devons pousser
cette variable<i> population_size </ i>

69
00:03:46,223 --> 00:03:51,320
dans le tableau <i> population_sizes </ i>, et quand
nous appelons <i> la prochaine génération </ i>

70
00:03:51,320 --> 00:03:56,193
nous devons passer cette variable
comme un argument, parce que

71
00:03:56,193 --> 00:03:59,418
nous venons de rappeler, nous avons juste modifié
cette fonction ici.

72
00:03:59,418 --> 00:04:02,070
Il attendre maintenant
la taille actuelle de la population

73
00:04:02,070 --> 00:04:04,358
qui est stocké dans <i> population_size </ i>.

74
00:04:04,982 --> 00:04:09,370
Donc, cette variable <i> population_size </ i>
contient la taille actuelle de la population.

75
00:04:09,370 --> 00:04:11,960
Maintenant, si nous voulons juste rester là,
cela fonctionne encore,

76
00:04:11,960 --> 00:04:14,750
mais nous aurions pas les goulots d'étranglement
et aussi ce serait un peu ridicule

77
00:04:14,750 --> 00:04:18,570
d'avoir cette variable supplémentaire
quand nous avons déjà <i> N </ i>.

78
00:04:18,570 --> 00:04:22,133
Mais bien sûr, ce que nous voulons faire est que
nous voulons mettre en œuvre un goulot d'étranglement,

79
00:04:22,133 --> 00:04:23,850
et donc je vais le faire ici,

80
00:04:23,850 --> 00:04:27,533
et je vais maintenant remplacer
cette ligne avec ce qui suit,

81
00:04:28,396 --> 00:04:30,477
et vous devez juste me suivre
et saisir avec moi,

82
00:04:30,477 --> 00:04:33,490
et je vais vous expliquer dans
une minute comment cela fonctionne.

83
00:04:33,490 --> 00:04:39,370
Donc ce que je vais dire
est que <i> if (i% 10 == </ i>

84
00:04:39,370 --> 00:04:40,957
et vous devez utiliser la double égalité,

85
00:04:40,957 --> 00:04:46,548
parce que cela est une condition
d'égalité ici,

86
00:04:46,548 --> 00:04:48,586
si cela est égal à 9,

87
00:04:48,586 --> 00:04:57,914
alors nous allons définir
l<i> population_size </ i> à 10.

88
00:04:58,180 --> 00:04:59,640
Donc, cela est le goulot d'étranglement.

89
00:05:00,772 --> 00:05:03,218
Et si cela n'est pas le cas,
donc <i> autre </ i>,

90
00:05:03,854 --> 00:05:07,720
alors nous allons le mettre à <i> N </ i>.

91
00:05:08,592 --> 00:05:13,140
Donc, ce <i> population_size </ i>,
qui est la <i> population_size </ i>normale

92
00:05:13,140 --> 00:05:16,076
que nous avons définie
là-haut dans les variables.

93
00:05:17,150 --> 00:05:19,561
Et la plupart du temps, ce sera vrai,

94
00:05:19,561 --> 00:05:22,957
mais chaque dixième génération,
ce sera vrai.

95
00:05:22,957 --> 00:05:26,453
Et maintenant nous travaillons vraiment avec
un véritable goulot d'étranglement,

96
00:05:26,453 --> 00:05:31,249
parce que nous mettons en place cette
<i> population_size </ i> de temps en temps à 10.

97
00:05:31,249 --> 00:05:34,700
puis nous poussons cela dans
le tableau de <i> population_sizes </ i>,

98
00:05:34,700 --> 00:05:39,800
et nous le passons à la fonction
<i> next_generation</ i> .

99
00:05:40,450 --> 00:05:43,870
Maintenant, bien sûr,
voici la ligne de l'argent,

100
00:05:43,870 --> 00:05:46,638
c'est là, nous vérifions
si elle est la dixième génération,

101
00:05:46,638 --> 00:05:48,920
et je vais vous parler un peu de
la façon dont cela fonctionne.

102
00:05:48,920 --> 00:05:52,896
Disons simplement allons
voir ce que la dynamique sont maintenant.

103
00:05:52,896 --> 00:05:57,601
Donc, nous allons enregistrer, et nous allons
passer en revue dans le navigateur,

104
00:05:57,601 --> 00:06:00,600
et nous allons recharger, et maintenant
nous avons un roulement de tambour,

105
00:06:00,600 --> 00:06:05,620
! Et <i> boom </ i> - 92 est en effet
la taille effective de la population.

106
00:06:05,620 --> 00:06:07,510
Donc, il est calculé maintenant à la volée

107
00:06:07,510 --> 00:06:10,310
avec notre fonction efficace
<i> population_size</ i>

108
00:06:10,310 --> 00:06:12,930
et comme vous pouvez voir
lorsque vous rechargez cela,

109
00:06:12,930 --> 00:06:19,000
la dynamique ici maintenant semble vraiment
comme une population constante de 92.

110
00:06:19,010 --> 00:06:24,016
Tout ne ressemble pas à une taille
constante de la population de 901,

111
00:06:24,016 --> 00:06:29,270
de sorte que la prédiction était informé,
sans surprise, la bonne.

112
00:06:29,610 --> 00:06:34,210
C'est vraiment la moyenne harmonique
qui compte, et ceci bien

113
00:06:34,210 --> 00:06:38,111
beaucoup plus ressemble à une taille
constante de la population de 92.

114
00:06:38,111 --> 00:06:44,015
Donc, cette population, même si elle a
une taille moyenne de la population de 901,

115
00:06:44,015 --> 00:06:50,280
du point de vue génétique, il se comporte
comme une population de 92 personnes.

116
00:06:51,230 --> 00:06:54,210
Et si vous regardez maintenant
à ce qui se passe ici,

117
00:06:54,210 --> 00:06:56,520
vous pouvez gagner beaucoup
de points de vue.

118
00:06:56,520 --> 00:07:01,820
La première chose que vous reconnaissez
immédiatement est que vous avez ces sauts,

119
00:07:01,820 --> 00:07:04,969
sauts ou chutes rapides,

120
00:07:04,969 --> 00:07:08,160
mais ceux-ci se produisent maintenant
tous les dixième génération,

121
00:07:08,160 --> 00:07:12,297
et cela est bien sûr exactement quand les goulots
d'étranglement de la population se produisent.

122
00:07:12,297 --> 00:07:16,790
Ceci est lorsque la taille de
la population se réduit à 10 personnes;

123
00:07:16,790 --> 00:07:20,950
lorsque vous avez seulement 10 personnes
dérive génétique sera très forte.

124
00:07:20,950 --> 00:07:25,087
Et cela se reflète ici dans
ces sauts énormes,

125
00:07:25,087 --> 00:07:27,080
puis entre ces goulots d'étranglement,

126
00:07:27,080 --> 00:07:29,060
vous voyez bien sûr un peu de variation.

127
00:07:29,060 --> 00:07:31,410
La taille de la population n'est pas énorme.

128
00:07:31,410 --> 00:07:33,910
C'est mille en ces temps,

129
00:07:33,910 --> 00:07:37,250
mais vous ne disposez pas
de ces sortes de sauts.

130
00:07:37,250 --> 00:07:41,291
Mais ce sont les sauts maintenant
qui sont complètement déterminer

131
00:07:41,291 --> 00:07:44,580
la dynamique de ces simulations.

132
00:07:45,090 --> 00:07:47,590
Donc, pour rendre cela encore
plus comprehensible,

133
00:07:47,590 --> 00:07:51,663
Revenons au code,
et nous allons définir <i> N </ i>,

134
00:07:51,663 --> 00:07:57,970
de sorte que la taille de la population normale,
en dehors des goulets d'étranglement, à 100.000.

135
00:07:57,970 --> 00:08:02,850
Donc, nous allons augmenter
cela maintenant par un facteur 100.

136
00:08:02,850 --> 00:08:06,190
De ce fait,
la taille moyenne de la population

137
00:08:06,190 --> 00:08:10,050
augmenterait de quelque chose
d'un peu moins de 100.

138
00:08:10,050 --> 00:08:12,610
Mais nous avons maintenant
une taille moyenne de la population

139
00:08:12,610 --> 00:08:16,580
d'environ 90.000 personnes

140
00:08:16,580 --> 00:08:20,460
au cours d'une simulation.

141
00:08:20,460 --> 00:08:24,842
Mais si nous rechargeons cela,
et cela va prendre quelques secondes,

142
00:08:24,842 --> 00:08:26,450
Ça ressemble à ceci :

143
00:08:26,450 --> 00:08:29,001
je pense que cela est très beau,
car ici, tout d'abord,

144
00:08:29,001 --> 00:08:33,289
vous voyez la taille effective
de la population est seulement 100.

145
00:08:34,300 --> 00:08:37,140
Pourquoi donc? Eh bien encore
une fois parce que ce qui compte vraiment

146
00:08:37,140 --> 00:08:40,690
je veux dire qu'il bougeait à peine, non ?
De 92 à 100

147
00:08:40,690 --> 00:08:44,660
parce que ce qui compte vraiment
sont ces goulets d'étranglement.

148
00:08:44,660 --> 00:08:48,690
Dans la moyenne harmonique,
les petits nombres compte beaucoup plus

149
00:08:48,690 --> 00:08:51,120
que les grands nombres,

150
00:08:51,120 --> 00:08:53,790
et donc c'est exactement
ce qui se passe ici.

151
00:08:53,790 --> 00:08:56,590
Cette population, même si, en moyenne,

152
00:08:56,590 --> 00:08:59,590
vous avez quelque chose
comme 90.000 personnes,

153
00:08:59,590 --> 00:09:03,970
il se comporte comme une population de 100.

154
00:09:03,970 --> 00:09:07,770
Donc, vous surestimerez sérieusement
la taille de la population,

155
00:09:07,770 --> 00:09:11,110
et donc sous-estimer
les effets de la dérive génétique,

156
00:09:11,110 --> 00:09:12,510
si vous ne saviez pas.

157
00:09:12,510 --> 00:09:15,630
Et vous pouvez voir ici tout à fait bien,
aussi, comment cela fonctionne.

158
00:09:15,630 --> 00:09:18,100
Encore une fois, vous obtenez
ces sauts énormes,

159
00:09:18,100 --> 00:09:22,010
et la dynamique sont maintenant
complètement entraînés par ces sauts,

160
00:09:22,010 --> 00:09:25,960
parce qu'ici entre vous avez à peine
un mouvement vers le haut ou vers le bas.

161
00:09:25,960 --> 00:09:28,600
Certes, vous ne pouvez pas voir
cela ici. Quelque chose se passe,

162
00:09:28,600 --> 00:09:32,051
mais il est à peine visible,
parce que les effets sont si petits,

163
00:09:32,051 --> 00:09:36,150
parce que la population est assezgrande ici,
il est de 100.000 personnes,

164
00:09:36,150 --> 00:09:39,728
mais ici, entre ces goulots d'étranglement,
il est seulement 10 personnes.

165
00:09:39,728 --> 00:09:41,194
Voilà pourquoi vous obtenez ces sauts,

166
00:09:41,194 --> 00:09:45,982
et ces sauts déterminent complètement
le résultat de la simulation.

167
00:09:46,370 --> 00:09:49,600
Alors félicitations,
si vous avez réussi à en arriver là!

168
00:09:49,610 --> 00:09:51,922
C'est assez étonnant
ce que vous faites ici:

169
00:09:51,922 --> 00:09:55,160
vous mettez en œuvre
la simulation de la dérive génétique,

170
00:09:55,160 --> 00:09:58,160
une simulation stochastique en JavaScript,

171
00:09:58,160 --> 00:10:00,700
et vous avez maintenant juste
mis en œuvre les goulots d'étranglement

172
00:10:00,700 --> 00:10:03,666
montrant que la taille effective
de la population

173
00:10:03,666 --> 00:10:08,114
est en effet donnée
par la moyenne harmonique

174
00:10:08,114 --> 00:10:12,310
de la population tailles au fil du temps. Voilà tout un exploit.

175
00:10:12,310 --> 00:10:15,794
Alors félicitations,
si vous avez réussi à aller jusque-là!

176
00:10:16,170 --> 00:10:20,100
Maintenant, une chose que je veux encore faire
est de voir la façon dont cela fonctionne,

177
00:10:20,100 --> 00:10:23,213
avec cette ligne de code
que nous pouvons regarder ici,

178
00:10:23,213 --> 00:10:25,993
où nous déterminons effectivement

179
00:10:25,993 --> 00:10:29,560
s'il est maintenant temps pour
un goulot d'étranglement de la population.

180
00:10:29,560 --> 00:10:36,240
Alors, comment faisons-nous cela?
Eh bien, nous disons ici, <i> if (i% 10 == 9) </ i>

181
00:10:36,240 --> 00:10:40,140
Alors qu'est-ce que cela?
Eh bien, c'est l'opérateur modulo,

182
00:10:40,140 --> 00:10:46,020
et l'opérateur modulo
vous donne le reste d'une division,

183
00:10:46,020 --> 00:10:48,594
prenant la division entière en compte.

184
00:10:48,594 --> 00:10:52,420
Passons donc à la console et regadons
à la façon dont cela fonctionne.

185
00:10:52,621 --> 00:10:54,773
Voici donc dans le navigateur,
je suis toujours dans Chrome,

186
00:10:54,773 --> 00:10:58,260
donc je vais dire
<i> Voir & gt; Développeur & gt; JavaScript Console </ i>,

187
00:10:58,260 --> 00:10:59,750
pour obtenir la console.

188
00:10:59,750 --> 00:11:04,002
Et maintenant nous pouvons travailler ici.
Et encore une fois, l'opérateur modulo

189
00:11:04,002 --> 00:11:07,936
vous donne le reste de la division entière,

190
00:11:07,936 --> 00:11:11,590
de sorte <i> 0% 10 </ i>,

191
00:11:11,590 --> 00:11:15,319
la façon de penser à ce sujet
est 0 divisé par 10,

192
00:11:15,319 --> 00:11:18,777
bien que cela donne exactement zéro,
pas de reste,

193
00:11:18,777 --> 00:11:20,822
alors le reste est nul ici.

194
00:11:20,822 --> 00:11:26,936
<I> 1% 10 </ i> - comme une division entière,
cela vous donne 0, avec un reste de 1.

195
00:11:27,966 --> 00:11:34,450
<I> 2% 10 </ i> - comme une division entière
vous donne à nouveau 0 avec un reste de 2,

196
00:11:34,450 --> 00:11:39,140
et ainsi de suite, et vous pouvez
continuer jusqu'à ce <i> 9% 10 </ i>,

197
00:11:39,140 --> 00:11:42,020
cela vous donne 0 avec un reste de 9.

198
00:11:42,020 --> 00:11:44,830
Et puis enfin, quand
vous faites <i> 10% 10 </ i>,

199
00:11:44,830 --> 00:11:50,080
cela ressemble à 10 divisé par 10
qui est évidemment 1, donc pas de reste ici,

200
00:11:50,080 --> 00:11:55,092
puis <i> 11% 10 </ i> vous donne 1.

201
00:11:55,813 --> 00:11:59,660
11 divisé par 10 division entière v
ous donne 1 reste 1.

202
00:11:59,660 --> 00:12:01,550
Donc, cela commence maintenant à nouveau,

203
00:12:01,550 --> 00:12:05,476
compter à partir de zéro
tout le chemin jusqu'à 9.

204
00:12:05,476 --> 00:12:09,720
Et lorsque vous à <i> 19% 10 </ i>,

205
00:12:09,720 --> 00:12:13,164
puis le reste est à nouveau 9,
parce que le résultat

206
00:12:13,164 --> 00:12:17,060
de la division entière est 1,
et le reste est 9 et ainsi de suite.

207
00:12:17,060 --> 00:12:23,400
Donc, <i> 29% 10 </ i> est également reste 9.

208
00:12:23,400 --> 00:12:27,690
Et cela se passe et ainsi de suite,
et qui est maintenant chaque 10e génération,

209
00:12:27,690 --> 00:12:30,111
parce que nous commençons à zéro,

210
00:12:30,111 --> 00:12:34,119
puis la 10e génération
est quand ce reste est 9.

211
00:12:34,650 --> 00:12:39,069
Et chaque fois que le reste est 9
alors nous sommes à la 10e génération.

212
00:12:39,470 --> 00:12:44,953
On aurait aussi pu tester pour savoir
si cela est effectivement 5,

213
00:12:46,010 --> 00:12:49,674
parce que  si?
Permettez-moi de recharger cela ici.

214
00:12:50,431 --> 00:12:53,478
Si je mets <i> 5% </ i>

215
00:12:54,930 --> 00:12:59,740
désolé, <i> i </ i>, de sorte que
<i> i </ i> étant, par exemple, 5,

216
00:13:00,220 --> 00:13:04,000
puis <i>% 10 </ i>, qui est reste 5.

217
00:13:04,000 --> 00:13:09,225
Et puis de nouveau en 10 générations,
de sorte que <i> 15% 10 </ i>,

218
00:13:10,120 --> 00:13:11,990
ceci est également 5 et ainsi de suite.

219
00:13:12,190 --> 00:13:15,228
<i>25%10</i>...5.

220
00:13:15,228 --> 00:13:20,794
Donc, cela donne également toujours
le même nombre chaque 10e génération,

221
00:13:20,794 --> 00:13:23,303
et vous pouvez le faire
avec un seul chiffre.

222
00:13:23,303 --> 00:13:28,259
Vous pouvez vérifier l'égalité
avec 3 ou 8 ou 7, il n'a pas d'importance,

223
00:13:28,259 --> 00:13:32,969
il serait encore correct.
Mais ce qui est essentiel est que

224
00:13:32,969 --> 00:13:37,429
vous faites la division modulo avec 10.

225
00:13:38,363 --> 00:13:43,580
Je choisis 9 parce que
c'est la façon très précise pour ce faire,

226
00:13:43,580 --> 00:13:47,410
parce que vous avez en effet 9 générations,

227
00:13:47,410 --> 00:13:51,117
puis à la 10e génération,
ce goulot d'étranglement se passe.

228
00:13:51,117 --> 00:13:56,980
si vous aviez dit <i> if (i% 10 == 5) </ i>,
dans le long terme,

229
00:13:56,980 --> 00:14:00,355
vous auriez aussi eu raison,
qu'il se produit chaque 10e génération,

230
00:14:00,355 --> 00:14:02,923
mais la première fois
qu'il serait arrivé aurait été

231
00:14:02,923 --> 00:14:06,310
à la 6ème génération lorsque <i> i == 5 </ i>.

232
00:14:06,310 --> 00:14:09,927
Et donc la première fois qu'il
aurait été précisément correcte,

233
00:14:09,927 --> 00:14:13,011
mais cela aurait été un détail.
Il est important juste que vous comprenez

234
00:14:13,011 --> 00:14:15,411
comment cet opérateur modulo fonctionne.

235
00:14:15,660 --> 00:14:19,517
Donc ceci conclut cette leçon,
mais il conclut également ce chapitre.

236
00:14:19,517 --> 00:14:23,197
Donc, si vous l'avez fait jusqu'ici,
félicitations, très bien fait!

237
00:14:23,197 --> 00:14:25,380
Nous avons beaucoup appris dans ce chapitre.

238
00:14:25,380 --> 00:14:27,423
Il était assez riche en termes de contenu.

239
00:14:27,423 --> 00:14:29,728
Vous avez appris beaucoup
sur la programmation JavaScript,

240
00:14:29,728 --> 00:14:31,570
de nouvelles idées, de nouveaux concepts,

241
00:14:31,570 --> 00:14:33,550
mais vous avez aussi appris
sur la dérive génétique,

242
00:14:33,550 --> 00:14:36,364
qui est vraiment une idée clé
dans la génétique,

243
00:14:36,364 --> 00:14:39,400
et biologie évolutive, plus largement.

244
00:14:39,400 --> 00:14:43,077
Ainsi, dans le chapitre suivant,
nous allons maintenant passer

245
00:14:43,077 --> 00:14:47,630
à l'autre des quatre grandes
forces de l'évolution.

246
00:14:47,630 --> 00:14:50,160
Nous avons eu
la dérive génétique jusqu'à présent,

247
00:14:50,160 --> 00:14:55,362
qui est l'effet de l'aléatoire en raison
de la taille de la population finie,

248
00:14:55,362 --> 00:14:59,672
et nous avons vu que l'une des
conséquences serait un joli triste,

249
00:14:59,672 --> 00:15:03,870
à savoir que toute la diversité génétique
serait finalement perdue.

250
00:15:03,870 --> 00:15:06,290
Il est clair que ce n'est pas
le cas dans le monde réel.

251
00:15:06,290 --> 00:15:10,086
Il est donc clair qu'il doit y avoir
un autre processus qui rétorque cela.

252
00:15:10,086 --> 00:15:11,900
Ce processus est la mutation,

253
00:15:11,900 --> 00:15:15,470
et c'est un processus que nous allons
examiner dans le chapitre suivant.

254
00:15:15,470 --> 00:15:17,767
Donc, je vous verrai au chapitre 4.

