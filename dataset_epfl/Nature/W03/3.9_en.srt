1
00:00:03,360 --> 00:00:06,303
Welcome back Nature, In Code.
We're in Chapter three lecture nine.

2
00:00:06,400 --> 00:00:07,400
In the previous video

3
00:00:07,400 --> 00:00:11,950
we briefly touched upon the concept 
of an array data structure

4
00:00:11,950 --> 00:00:14,580
into which we can store multiple values

5
00:00:14,580 --> 00:00:17,000
which will come in really, really handy.

6
00:00:17,000 --> 00:00:18,460
Now in this lecture,

7
00:00:18,460 --> 00:00:22,960
I'd like to delve just a little deeper 
into this concept of an array.

8
00:00:23,100 --> 00:00:26,350
So here we have our code
and as you can see

9
00:00:26,350 --> 00:00:28,680
here we set up this variable data

10
00:00:28,680 --> 00:00:31,190
and then we assigned it an empty array

11
00:00:31,190 --> 00:00:34,200
and we said we do this using 
these brackets here,

12
00:00:34,200 --> 00:00:36,550
these square brackets, not curly brackets

13
00:00:36,550 --> 00:00:38,480
because that will mean 
something quite different.

14
00:00:38,480 --> 00:00:39,924
But the square brackets

15
00:00:40,260 --> 00:00:46,740
and then down here we pushed values 
into this data array.

16
00:00:46,740 --> 00:00:52,180
So here we we pushed 
a current value of <i>P</i> into data.

17
00:00:52,180 --> 00:00:53,700
And by the way we can, of course,

18
00:00:53,700 --> 00:00:54,630
this is just a variable,

19
00:00:54,630 --> 00:01:00,350
so we can call it whatever we want to
as long as it's legal variable name.

20
00:01:00,940 --> 00:01:03,760
And then later we passed that data around,

21
00:01:03,760 --> 00:01:06,170
so here we pass it to 
the drawline chart function

22
00:01:06,170 --> 00:01:09,230
which then visualizes 
the contents of this data.

23
00:01:09,230 --> 00:01:12,640
And if we go over to browser,
we can see this is, for example,

24
00:01:12,640 --> 00:01:13,510
what it looks like.

25
00:01:13,510 --> 00:01:15,800
So here in this data array,

26
00:01:15,800 --> 00:01:18,130
we know we have a thousand elements

27
00:01:18,610 --> 00:01:21,620
and these are the <i>P</i> values 
of each generation

28
00:01:21,900 --> 00:01:24,270
and the draw line chart functions
is basically programmed

29
00:01:24,270 --> 00:01:27,703
that it visualizes this array
in this particular fashion.

30
00:01:28,180 --> 00:01:32,640
So to understand more, learn more 
about this concept of an array,

31
00:01:32,640 --> 00:01:35,460
let's go straight into 
the JavaScript console

32
00:01:35,460 --> 00:01:37,128
here in the browser.

33
00:01:37,970 --> 00:01:40,710
So what we did in the code 
was basically this, right,

34
00:01:40,710 --> 00:01:44,650
we said, var data equals an empty array

35
00:01:44,650 --> 00:01:46,190
and this is how one does it.

36
00:01:46,190 --> 00:01:48,864
This is how one sets up an array.

37
00:01:49,380 --> 00:01:52,710
And if you now would just 
look at the contents of this array,

38
00:01:52,710 --> 00:01:54,690
you can see, okay, it's an empty array

39
00:01:54,690 --> 00:01:57,550
and whenever you 
see these brackets, we're talking array.

40
00:01:58,440 --> 00:02:00,960
And now we can put elements 
into this array

41
00:02:00,960 --> 00:02:03,470
as we did with the push method.

42
00:02:03,470 --> 00:02:05,530
So we can say <i>data.push</i>

43
00:02:05,530 --> 00:02:06,990
and now we could, for example,

44
00:02:06,990 --> 00:02:09,654
push the values three into this array.

45
00:02:09,990 --> 00:02:11,620
And then if you look at data,

46
00:02:11,870 --> 00:02:15,310
well we can see, okay, it's an array, 
these brackets here

47
00:02:15,310 --> 00:02:16,796
and it has the element three.

48
00:02:16,920 --> 00:02:21,520
Let's push another element 
in the here-- whoops.

49
00:02:21,520 --> 00:02:25,193
Push, let's say we're going 
to push five in here.

50
00:02:26,470 --> 00:02:28,400
Okay, <i>data.push[5]</i>

51
00:02:28,400 --> 00:02:32,899
If we now look at data, huh, 
now it has two elements,

52
00:02:33,840 --> 00:02:36,650
but still an array, of course,
but it has two elements

53
00:02:36,650 --> 00:02:37,797
and you can see this

54
00:02:38,070 --> 00:02:40,840
because the elements are separated 
by a comma,

55
00:02:40,940 --> 00:02:44,960
which is what arrays look like,

56
00:02:44,960 --> 00:02:46,849
how they're structured in JavaScript.

57
00:02:47,960 --> 00:02:49,920
Let's just go ahead 
and push another value.

58
00:02:49,920 --> 00:02:52,300
Okay, let's push say...

59
00:02:52,300 --> 00:02:54,260
nine into this array

60
00:02:54,260 --> 00:02:57,260
and again take a look at the content.

61
00:02:57,260 --> 00:03:03,540
So now you can see we have three elements 
here in this particular array.

62
00:03:04,290 --> 00:03:04,980
All right.

63
00:03:04,980 --> 00:03:07,540
So how do we access elements

64
00:03:07,540 --> 00:03:10,710
because here this is a clear 
and straightforward way

65
00:03:10,710 --> 00:03:14,019
how to add data into an array.

66
00:03:14,910 --> 00:03:19,274
But how do we then access the data 
if we want to access certain elements?

67
00:03:20,150 --> 00:03:21,860
Well, easy way to do it is--

68
00:03:21,860 --> 00:03:25,730
so let me reload here the page 
so that we clear to console

69
00:03:25,730 --> 00:03:29,240
and I'm going to set up another array here,

70
00:03:29,240 --> 00:03:31,540
so I'm still going to say

71
00:03:31,540 --> 00:03:33,240
<i>var data =</i>

72
00:03:33,240 --> 00:03:37,090
actually I'm going to 
initialize the array now

73
00:03:37,090 --> 00:03:39,420
with values right away.

74
00:03:39,420 --> 00:03:41,370
This is something you can do as well.

75
00:03:41,370 --> 00:03:45,130
So there's no need to 
always set up an empty array

76
00:03:45,130 --> 00:03:49,150
and then add elements 
by pushing them into the array.

77
00:03:49,150 --> 00:03:55,050
You can also initialize the array
with values right away, right here

78
00:03:55,520 --> 00:03:57,910
right here at the initialization, 
if you want to.

79
00:03:57,910 --> 00:03:59,150
It's up to you.

80
00:03:59,150 --> 00:04:01,098
Sometimes this can be quite handy.

81
00:04:02,150 --> 00:04:04,180
And even if you do this, 
of course, in later

82
00:04:04,180 --> 00:04:07,840
you can say,
I want to add more elements,

83
00:04:07,840 --> 00:04:10,430
so I'm going to add push.

84
00:04:10,460 --> 00:04:12,664
I'm going to add an eight here, 
for example,

85
00:04:13,980 --> 00:04:19,420
and so now data contains three, five, nine
as we initialize it here

86
00:04:19,420 --> 00:04:20,307
and then another eight.

87
00:04:20,570 --> 00:04:22,920
And by the way, I don't want 
to give the wrong impression

88
00:04:22,920 --> 00:04:25,020
that all values have to be unique,

89
00:04:25,020 --> 00:04:27,820
I can just add another another value 
that's already in there.

90
00:04:27,820 --> 00:04:30,821
So I'm just going to push 
another eight into this array.

91
00:04:32,010 --> 00:04:34,990
And now if I look at data 
it contains the values

92
00:04:34,990 --> 00:04:37,750
three, five, nine, eight, and eight.

93
00:04:37,750 --> 00:04:41,160
So there's nothing unique here 
about these values.

94
00:04:41,160 --> 00:04:42,750
No,

95
00:04:43,740 --> 00:04:45,590
that's not a condition of an array.

96
00:04:45,590 --> 00:04:48,650
An array can can contain 
many, many elements

97
00:04:48,650 --> 00:04:51,920
and they can be the same 
or they can be unique.

98
00:04:52,050 --> 00:04:55,705
Another thing you note 
or certainly notice here is that

99
00:04:56,210 --> 00:05:01,134
the order in which the array 
contains the element will be preserved.

100
00:05:01,800 --> 00:05:04,920
If you keep adding elements using push

101
00:05:04,920 --> 00:05:07,645
they will just be appended at the end

102
00:05:08,890 --> 00:05:11,282
but unless you go into the array

103
00:05:11,282 --> 00:05:13,980
and you start moving elements around,

104
00:05:13,980 --> 00:05:16,820
this structure, this particular ordering,

105
00:05:16,820 --> 00:05:19,980
the three being the first element,
five being the second and so on

106
00:05:21,700 --> 00:05:22,520
will remain.

107
00:05:22,520 --> 00:05:24,480
Here's an another really handy thing,

108
00:05:24,480 --> 00:05:26,320
something to you need to know

109
00:05:26,930 --> 00:05:29,880
how you can access the number of elements,

110
00:05:29,880 --> 00:05:33,138
how we can investigate 
how many elements to currently have,

111
00:05:33,190 --> 00:05:35,020
I mean here it's easy,
because you can see it.

112
00:05:35,020 --> 00:05:37,150
Okay, there's five elements here.

113
00:05:37,150 --> 00:05:38,650
But often you don't know

114
00:05:38,650 --> 00:05:41,290
because you're adding them programmatically

115
00:05:41,670 --> 00:05:43,690
or you're getting data from somewhere

116
00:05:43,690 --> 00:05:44,500
and you first need to know,

117
00:05:44,500 --> 00:05:47,149
okay, how many elements 
are we actually talking about?

118
00:05:47,490 --> 00:05:50,210
So this length property here 
is quite handy.

119
00:05:50,210 --> 00:05:55,180
Simply say <i>data</i> or whatever 
the name of your array is, <i>.length</i>

120
00:05:55,180 --> 00:05:58,260
And you can see 
this correctly returns five here.

121
00:05:58,260 --> 00:06:01,820
So how do I now access these elements?

122
00:06:01,820 --> 00:06:05,240
So that's an extremely 
important idea here

123
00:06:05,300 --> 00:06:08,590
and it's also one of 
the major in gotchas in arrays

124
00:06:08,590 --> 00:06:11,960
and perhaps in all of programming,
certainly for beginners,

125
00:06:11,960 --> 00:06:17,100
which is that you use 
the index of the element

126
00:06:17,860 --> 00:06:20,938
and you have to be careful 
because indexing starts at zero.

127
00:06:21,290 --> 00:06:22,420
So what is the mean?

128
00:06:22,420 --> 00:06:25,110
Well, if you want to access 
an element in an array

129
00:06:25,110 --> 00:06:27,880
you simply state the array

130
00:06:27,880 --> 00:06:33,220
and then directly these curly brackets--
sorry not curly brackets,

131
00:06:33,220 --> 00:06:35,060
directly these non-curly brackets.

132
00:06:35,060 --> 00:06:36,439
Okay, these are array brackets.

133
00:06:37,320 --> 00:06:40,450
And then you use the corresponding index.

134
00:06:40,450 --> 00:06:43,400
So say you want the first element here.

135
00:06:43,400 --> 00:06:47,620
Okay, so this element has index zero.

136
00:06:47,900 --> 00:06:51,284
Okay, that's very important 
because we start counting at zero.

137
00:06:52,290 --> 00:06:54,175
Okay, so I could say <i>data[0]</i>

138
00:06:54,460 --> 00:06:57,793
and it would correctly return 
the first element.

139
00:06:58,720 --> 00:07:02,960
So, correspondingly if I wanted 
this next element here,

140
00:07:02,960 --> 00:07:05,527
the second element, 
I will have to say <i>data[1]</i>

141
00:07:05,730 --> 00:07:07,360
Again, not <i>data[2]</i>

142
00:07:07,360 --> 00:07:11,370
because that would actually be 
at this element here, but <i>data[1]</i>

143
00:07:11,370 --> 00:07:13,959
because we start counting zero.

144
00:07:14,530 --> 00:07:19,948
So this has index zero, index one, 
index two, index three, index four.

145
00:07:20,660 --> 00:07:24,300
So this is important, okay, 
because it has a number of implications.

146
00:07:24,300 --> 00:07:26,850
Number one, okay, indexing starts at zero,

147
00:07:26,850 --> 00:07:31,690
fine, but also indexing ends 
at length minus one.

148
00:07:31,690 --> 00:07:33,893
And that's a typical mistake 
because we think,

149
00:07:33,893 --> 00:07:36,870
okay, we have five elements,
I want the fifth element

150
00:07:36,870 --> 00:07:39,290
so I'm going to say <i>data[5]</i>

151
00:07:39,290 --> 00:07:43,180
but this would of course be wrong 
because there is no fifth element,

152
00:07:43,180 --> 00:07:46,780
or there is no element with the index five.

153
00:07:46,780 --> 00:07:48,518
Rather, that's the correct way to put it.

154
00:07:49,360 --> 00:07:54,340
The last element 
in an array of five, length five,

155
00:07:54,340 --> 00:07:57,746
with five elements has index four.

156
00:07:58,260 --> 00:08:00,770
Okay, so this is very, very important

157
00:08:02,040 --> 00:08:04,520
and if you stumble over this 
in the future,

158
00:08:04,520 --> 00:08:07,330
I hope you quickly recognize the error

159
00:08:07,330 --> 00:08:11,128
because it's one that is easy to make 
in the beginning.

160
00:08:11,890 --> 00:08:17,880
So let me reload this and look at 
something else about arrays.

161
00:08:17,880 --> 00:08:21,190
So I'm going to set up 
this data array again

162
00:08:21,480 --> 00:08:25,540
and now I'm just going to initialize it
with a couple of values.

163
00:08:25,540 --> 00:08:29,000
For example, five, three, 
seven, nine, eight.

164
00:08:29,000 --> 00:08:31,970
Okay, so this is our array;
it has five elements.

165
00:08:31,970 --> 00:08:34,470
So now what I would like to do is

166
00:08:34,470 --> 00:08:37,660
I would like to iterate over this array

167
00:08:37,660 --> 00:08:40,890
and I would like to then 
output the elements here

168
00:08:40,890 --> 00:08:43,440
and this is something 
we'll use quite often actually.

169
00:08:43,470 --> 00:08:46,290
Often we have some data stored in an array

170
00:08:46,290 --> 00:08:48,140
and then, we'd like to do something with it.

171
00:08:48,140 --> 00:08:49,090
So for example,

172
00:08:49,090 --> 00:08:54,011
we'd like to plot it or we'd like to do 
some calculations with the elements,

173
00:08:54,660 --> 00:08:57,150
but we need to do with with each element.

174
00:08:57,150 --> 00:08:58,462
And so how do we do this?

175
00:08:58,690 --> 00:09:01,560
Well, iteration is something 
we've already talked about.

176
00:09:01,560 --> 00:09:04,820
So we can use our old friend the four loop

177
00:09:04,820 --> 00:09:11,021
for example, to iterate over this array 
or to iterate through the elements.

178
00:09:11,730 --> 00:09:13,250
So here's how we can do this.

179
00:09:13,250 --> 00:09:15,890
You now know, of course, the four loop.

180
00:09:15,890 --> 00:09:18,310
So we're going to set this up 
as we have before

181
00:09:18,310 --> 00:09:21,316
and I'm gong to initialize 
this counter variable here,

182
00:09:22,380 --> 00:09:23,486
<i>i = 0</i>

183
00:09:24,670 --> 00:09:26,050
Now what's the condition?

184
00:09:26,050 --> 00:09:29,740
So what I'm going to do here is
I'm going to say,

185
00:09:29,805 --> 00:09:33,200
<i>i</i> is smaller than <i>data.length</i>

186
00:09:33,200 --> 00:09:34,890
and we'll talk about this in a second.

187
00:09:34,890 --> 00:09:38,300
Okay, as you know, <i>data.length</i> is five.

188
00:09:38,300 --> 00:09:40,627
Okay because it's got five elements

189
00:09:40,810 --> 00:09:42,150
and so basically I'm going to say,

190
00:09:42,150 --> 00:09:45,850
as long as <i>i</i> is smaller than five, continue.

191
00:09:45,850 --> 00:09:48,150
And of course, finally,

192
00:09:48,150 --> 00:09:51,220
we need to be sure 
to increment <i>i</i> by one here

193
00:09:51,220 --> 00:09:53,180
otherwise we'll get infinite loop,

194
00:09:53,590 --> 00:09:55,195
and we don't want infinite loops.

195
00:09:55,320 --> 00:09:58,700
Then the curly brackets, <i>Shift Return</i>.

196
00:09:58,700 --> 00:10:01,210
Okay, otherwise it would be 
executed right away.

197
00:10:01,210 --> 00:10:03,904
So now let's for example outputs the...

198
00:10:06,440 --> 00:10:08,690
the value of <i>i</i> at each iteration.

199
00:10:09,620 --> 00:10:10,910
Okay, <i>Enter</i>.

200
00:10:10,910 --> 00:10:15,444
So as you can see here,
this now starts at zero as it should.

201
00:10:16,110 --> 00:10:20,200
And then it continues 
incriminating by one,

202
00:10:20,680 --> 00:10:23,200
up to four, so doesn't go to five

203
00:10:23,200 --> 00:10:25,960
because the last condition 
that is true here is

204
00:10:25,960 --> 00:10:30,051
if four is smaller than five, 
then it stops.

205
00:10:31,100 --> 00:10:35,210
And so if you look at these numbers here,

206
00:10:35,210 --> 00:10:40,530
these are, of course, 
exactly the correct indexes of this array.

207
00:10:40,530 --> 00:10:45,230
Okay, this is element zero, element one,
element two, element three, element four.

208
00:10:45,230 --> 00:10:46,593
So we can use this--

209
00:10:48,440 --> 00:10:53,850
So I'm simply going to redo this loop 
and rather than saying <i>console.log (i)</i>

210
00:10:53,850 --> 00:10:59,210
I am going to say <i>console.log</i>--
well data brackets <i>i</i>

211
00:10:59,210 --> 00:11:02,510
or the <i>i</i> elements, so to speak,
of this array,

212
00:11:02,510 --> 00:11:06,680
and then if I do this 
I do get the elements

213
00:11:07,020 --> 00:11:12,050
and this is how we iterate over an array; 
very handy.

214
00:11:12,050 --> 00:11:16,090
And you'll see this a ton of times 
throughout the rest of this course.

215
00:11:16,090 --> 00:11:20,530
Okay, we iterate over 
some data structure, an array,

216
00:11:20,530 --> 00:11:25,869
using this condition here 
<i>i</i> smaller than our data structure <i>.length</i>

217
00:11:26,060 --> 00:11:28,120
and then we can use the fact

218
00:11:28,120 --> 00:11:33,190
that <i>i</i> is actually exactly 
the correct index of the array

219
00:11:33,190 --> 00:11:34,612
during the iteration.

220
00:11:34,690 --> 00:11:39,550
Good; so something else I want to show you
the last bit here,

221
00:11:39,550 --> 00:11:43,497
I'm going to reload this again,
so I have an empty console.

222
00:11:46,110 --> 00:11:49,890
What we did so far is basically 
we initialized arrays

223
00:11:49,890 --> 00:11:52,440
and then we started 
storing numbers in them,

224
00:11:52,440 --> 00:11:56,822
something like you know this--
and oops.

225
00:11:59,870 --> 00:12:02,180
And this works great, 
so we can see here,

226
00:12:02,180 --> 00:12:04,420
okay, we have four numbers stored here

227
00:12:04,420 --> 00:12:09,710
but actually a raise 
can contain any data type,

228
00:12:09,710 --> 00:12:11,398
not just numbers.

229
00:12:11,398 --> 00:12:17,071
So I could, for example, 
now push another data type.

230
00:12:17,280 --> 00:12:20,020
So for example, 
I could push a string in here.

231
00:12:20,020 --> 00:12:25,650
Okay, I'm going to push the string data--
sorry "hello" into data

232
00:12:27,280 --> 00:12:28,840
and not a problem.

233
00:12:28,840 --> 00:12:32,060
So let's take a look at data.

234
00:12:32,060 --> 00:12:35,060
Yeah, data contains now the numbers:
three, five, eight, six,

235
00:12:35,060 --> 00:12:36,500
as we initialized them here

236
00:12:36,500 --> 00:12:37,758
and then the string "hello".

237
00:12:38,070 --> 00:12:40,313
So there's absolutely no problem with that.

238
00:12:40,313 --> 00:12:46,208
You can add any type of of data
into an array.

239
00:12:46,470 --> 00:12:52,383
And so this actually it's very interesting 
when we consider that the array itself

240
00:12:52,383 --> 00:12:55,180
of course, is a data type

241
00:12:55,180 --> 00:12:59,620
and we can actually 
add arrays into arrays.

242
00:12:59,620 --> 00:13:04,130
So this is often where things get 
a little confusing to beginners

243
00:13:04,130 --> 00:13:05,520
but it's really quite simple.

244
00:13:05,520 --> 00:13:07,690
I mean think of an array as a box

245
00:13:08,020 --> 00:13:11,600
and, of course, you can imagine that
you have a relatively large box

246
00:13:11,600 --> 00:13:15,530
and you put smaller boxes 
into this large box

247
00:13:15,530 --> 00:13:19,920
and the smaller boxes now contain 
the elements of interest

248
00:13:20,270 --> 00:13:21,870
but of course you wouldn't say

249
00:13:21,870 --> 00:13:26,620
that the larger box is empty now 
simply contains other boxes

250
00:13:27,280 --> 00:13:30,660
and it's the exact same 
way with with arrays.

251
00:13:30,660 --> 00:13:32,170
So you know, we could, for example,

252
00:13:32,170 --> 00:13:35,020
say something like, okay, 
we're going to initialize an array,

253
00:13:35,990 --> 00:13:37,880
I'm going to call it <i>A</i> here.

254
00:13:37,880 --> 00:13:41,050
Okay, values one, two, three, for example,

255
00:13:41,050 --> 00:13:43,922
and I'm going to initialize an array <i>B</i>.

256
00:13:44,640 --> 00:13:48,043
It has the values nine, eight, seven-- 
doesn't matter.

257
00:13:49,170 --> 00:13:51,350
Okay, so now I have two arrays here

258
00:13:51,350 --> 00:13:53,130
and now what I could do, for example,

259
00:13:53,130 --> 00:13:55,280
is I could define an array,

260
00:13:55,280 --> 00:13:57,595
this would be our large box here <i>C</i>,

261
00:13:57,870 --> 00:14:02,610
that contains as the elements 
those two arrays.

262
00:14:03,160 --> 00:14:06,680
Okay, so now <i>C</i> will be an array

263
00:14:06,680 --> 00:14:08,873
and the first element will be eight,

264
00:14:08,873 --> 00:14:11,500
which is another array with elements: 
one, two, three,

265
00:14:11,500 --> 00:14:15,477
and <i>B</i>, which is also another array 
with elements: nine, eight, seven.

266
00:14:15,840 --> 00:14:19,298
So if I do this and now I take a look at <i>C</i>,

267
00:14:20,810 --> 00:14:21,790
here's what you see,

268
00:14:21,790 --> 00:14:23,190
you see ah ha, this is an array

269
00:14:23,190 --> 00:14:24,682
because you can see these two brackets

270
00:14:24,890 --> 00:14:27,640
and now Chrome here tells you,

271
00:14:27,640 --> 00:14:31,565
"Hey, we have two arrays here"
and you can actually click on these,

272
00:14:32,880 --> 00:14:36,905
on these little arrows here 
and you can see the elements,

273
00:14:37,680 --> 00:14:40,948
which actually nicely 
the index here and the length.

274
00:14:41,480 --> 00:14:46,730
So this first one has a length of three
and it has these elements

275
00:14:46,730 --> 00:14:51,310
and this was second one 
has a length of three as well

276
00:14:51,310 --> 00:14:52,500
and that's these elements.

277
00:14:52,500 --> 00:14:55,270
And by the way these can have 
very different lengths.

278
00:14:55,770 --> 00:15:00,379
As we said you can store anything 
into an array if you want to.

279
00:15:00,750 --> 00:15:03,870
So this is now called 
a two-dimensional array

280
00:15:03,870 --> 00:15:05,720
because this was a one-dimensional array,

281
00:15:05,720 --> 00:15:09,400
okay, it has a list of elements.

282
00:15:09,400 --> 00:15:10,920
But here,

283
00:15:10,920 --> 00:15:12,860
this is an array of arrays.

284
00:15:12,860 --> 00:15:17,190
So it's a two-dimensional array 
and there can in fact be

285
00:15:17,190 --> 00:15:20,895
three-dimensional, four-dimensional,
however many dimensions, you can imagine.

286
00:15:21,230 --> 00:15:24,289
Now we're not going to go there 
for the time being

287
00:15:24,800 --> 00:15:27,530
we will eventually use 
three-dimensional arrays.

288
00:15:27,530 --> 00:15:29,560
But for the time being,

289
00:15:29,560 --> 00:15:32,570
if you can wrap your head 
around the two-dimensional arrays

290
00:15:32,570 --> 00:15:35,360
like a box of boxes 
that contain the elements,

291
00:15:35,360 --> 00:15:37,230
then that's all great.

292
00:15:38,330 --> 00:15:41,250
Why do we use this concretely?
Why do we need this?

293
00:15:41,580 --> 00:15:44,635
Well if you now look over here again

294
00:15:46,230 --> 00:15:49,290
this a line of a simulation 
of genetic drift.

295
00:15:49,290 --> 00:15:53,032
We have here the data array,
it stores the thousand values for <i>P</i>.

296
00:15:53,350 --> 00:15:56,530
Now what we want to do 
in the next lecture actually

297
00:15:56,530 --> 00:16:01,515
is to not only show one simulation 
but actually a couple, say 10.

298
00:16:02,390 --> 00:16:08,520
So what we need now is a way 
to store 10 arrays

299
00:16:08,520 --> 00:16:12,110
that contain these different values of <i>P</i>

300
00:16:12,110 --> 00:16:16,100
and that information, those arrays themselves

301
00:16:16,100 --> 00:16:17,830
need to be stored somehow

302
00:16:17,830 --> 00:16:19,770
and of course we're going to use an array.

303
00:16:20,390 --> 00:16:22,410
We're going to use a two-dimensional array

304
00:16:22,410 --> 00:16:24,700
and this is the basic idea behind it.

305
00:16:24,700 --> 00:16:27,888
All right, so this concludes 
our brief introduction into arrays.

306
00:16:28,248 --> 00:16:30,883
In the next lecture, 
we'll put that knowledge to use.

307
00:16:31,199 --> 00:16:32,129
I'll see you there.
