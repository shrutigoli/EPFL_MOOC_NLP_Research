Welcome back Nature, in Code.
We're in Chapter 3, Lecture 2.
In the last video, we developed an intuition for coin flipping and the probability of the outcomes of these coin-flipping experiments.
In this video, we're going to solidify this a little bit more quantitatively, and then we're actually going to implement this in JavaScript.
So this is the binomial distribution as we saw it in the last lecture, and here is the possible outcome when you flip the coin, a fair coin, ten times.
So here we could say these are the number of tails that come up, and this would be the probability of this number of tails coming up if you did this many, many times.
And now we can sort of zoom in into one of those outcomes.
So let's say, for example, we're going to zoom in on this one.
So this one means that exactly two tails came up.
So we can now calculate what is the probability of this happening.
So what is the probability that when you flip a fair coin ten times, you get exactly two tails coming up, and therefore exactly eight heads?
So we're now going to calculate this, and then we're going to implement this in JavaScript.
So we can very easily calculate this, we can basically just say we're going to flip ten coins, so we have ten slots.
Each of these slots can have one of two outcomes: namely heads or tails.
And now we can basically ask ourselves what is the probability that we get exactly two tails?
So, first of all, we need to know how many possible outcomes are there in the first place.
That's relatively straightforward to calculate.
I mean, consider if we were only flipping one coin, how many outcomes could we have?
Well, basically two, right?
Two possible outcomes because it could be either heads or tails.
Now imagine we would be flipping a coin twice, how many possible outcomes could we have now?
Well, the answer is <i>2 X 2</i>, which is, of course, <i>4</i>.
Namely, we could have twice heads coming up, we could have first heads and then tails.
We could have first tails and then heads, and we could have both tails.
If you flip it three times, what is the number of outcomes now?
Well, for the exact same logic, the number of outcomes now is <i>2 X 2 X 2</i>, which is, of course, <i>8</i>, namely, <i>HHH, HHT</i>, and so on.
I'm not going to spell these out now, but you can, of course, easily see that you can get eight possible outcomes.
And so on, and so basically, if you do it this ten times, then you simply have to multiply 2 ten times, in other words, 2 to the power of 10, and that is 1,024 possibilities.
There are 1,024 distinct outcomes of flipping a coin, a fair coin ten times.
So this is the set of possibilities.
Now we have to ask ourselves how many can we get to exactly two tails?
So, in other words, how many of these combinations have exactly two tails?
-- not less and not more.
And then that gives us the fraction or the probability that we do indeed get exactly two tails.
So we can easily calculate this.
So these are the ten possible slots, and so you're going to fill these by flipping a coin, and you either get a heads or tails.
So, now let's basically prepopulate them, so we're going to say, we want to have at the end, we want to have two tails in here, and eight heads.
So let's do the two tails and then we can just fill out the rest.
So the first tail, you can choose any of those ten slots.
You could, for example, put it here.
But basically you have ten options to fill this slot, or to put the <i>T</i> in any of the free slots.
So ten options, you could put in any of those.
So now you need to put the second one
-- where are you going to put this?
Well, you can put it anywhere, except where you've just put the first one,
So let's say you're going to put it here.
All right, so essentially you had nine possible slots.
Good, so does that mean that there are 90 possible combinations?
No, we have to correct this for one factor.
You could first have chosen this slot for the first tails and then the second slot for these tails, and this would have been the exact same outcome, namely a <i>T</i> here and a <i>T</i> here.
So there are two ways to put those.
The first option is to put it here and then there, the second option is to put it to here and then there, and these are both included in this number 90, but they're obviously the same outcome.
And so the whole thing here has to be divided by 2, and that of course gives us 45 possible ways to put two <i>Ts</i> into these ten slots here.
So, in other words, out of 
1,024 possible outcomes,
45 will be exactly containing two <i>Ts</i>.
So let's do the math here:
45 divided by 1,024, you can put this into a calculator and you will get something like 0.0439.
Or, in other words,
4.39% is our probability that we get exactly two tails when we flip a fair coin ten times.
So this is the math behind it, this is basic probability.
And now we're going to implement the coin flipping in JavaScript, and we're going to see how often when we do this actually stochastically.
So randomly flipping these coins many, many times, randomly flipping ten coins, many, many times, how often do we get these two <i>Ts</i>, these two tails?
And if we do this correctly, we should indeed get a number that is extremely close to 4.39%.
So, let's go ahead and do this.
All right, I'm back here at my text editor, TextWrangler, and I would like now to implement a coin flipper.
So how am I going to do this?
First of all, I need to have some concept of randomness,
I need to have a way to generate randomness in code.
Well, it turns out that JavaScript actually comes with a really handy method that's called <i>Math.random()</i>.
So what I'm going to do first here is I'm going to set up a new document, so <i>&lt;DOCTYPE html&gt;</i>, and then I'm going to set up my html tag: <i>&lt;html&gt;</i>, and I'm going to close this right away.
Again, I'm going to structure this with a head tag that I'm going to close, and a body tag that I'm also going to close right away.
And then here within the head we'll have our script tag.
This is exactly how we did it before.
If you do this a couple times it will very quickly become second nature.
All right, and so now here
I'm going to develop my code.
So the method that I just referred to is called <i>Math.random()</i>, so capital M Math.random parentheses.
So this method is really handy because it returns a random number between 0 and 1.
So let's take a look at how this works.
Let's first output whatever number
<i>Math.random()</i> returns here using the <i>console.log</i> method.
So I'm going to call <i>console.log</i>, and then I'm going to pass in whatever <i>Math.random()</i> returns here which is supposedly a random number between 0 and 1.
So let me save this, <i>Save As</i>, and then I'm going to call this <i>random.html</i>.
Okay, save.
All right, we've got the color coding here correct, syntax highlighting.
So now that I've saved this,
I'm going to go over to the browser, and I'm going to open this document, so <i>Open File</i>.
Um, where is it?
I didn't save it in the correct location.
Once again, <i>Save As</i>, not in <i>Documents</i> but actually in <i>Code Examples</i>.
Okay, <i>Save</i>.
All right, moving over to the browser, <i>Open File</i>.
Here it is <i>random.html</i>.
Okay, so open it, and of course we don't see anything here; again we need to take a look at the JavaScript console that in Chrome you find here under <i>View &gt; Developer 
&gt; JavaScript Console</i> as before.
And here we see a random number.
Now, you know, if you look at this number it's hard to say whether it's actually truly random because it's fairly close to 1, but, of course, it could happen.
So let's reload this document and let's keep looking at the number here:
0.91, 0.92 -- wow, a lot of 0.92s,
0.61, 0.2, 0.7, 0.4, and so on.
So you can do this a couple of times and, you know, it may look as if there's a sort of bias towards 0.9, but it looks fairly random, and I can in fact guarantee you that it's random, and each number that you see here coming up comes up with equal probabilities.
So all the numbers are equally distributed between 0 and 1, in terms of the probability of showing up.
So if we go back to the code, we now have this concept of a random number between 0 and 1.
So if it's really true that they all show up with equal probability, then if we do this many, many times, the average of those numbers should be 0.5.
So why don't we go ahead and test that?
So I'm going to implement this now in JavaScript, this idea.
So what I'm going to do is I'm going to draw random numbers using this <i>Math.random()</i> method many, many times, and then I'm going to add them up, and I'm going to divide them by the number of draws and see what this average is.
So, in order to do that, let's first define how often we are actually going to draw these numbers.
And I'm going to store this value in a variable that I'm going to call <i>Repeats</i>, 
I'm going to set it to say, a 100.
And now what I'm going to do is I'd like to have my code such that <i>Math.random()</i> is drawn or is called a hundred times.
So this seems like a job for <i>for a loop</i>.
So I'm going to implement a <i>for loop</i> here.
Okay, so <i>for(var i = 0;</i> this is our initialization step.
So now <i>i</i> should simply be smaller than <i>repeats</i>, and finally the final expression which is simply the increment of <i>i</i> by 1, so that we don't have an infinite loop.
So here I can call now <i>Math.random()</i> exactly 100 times or whatever
I have defined here in <i>repeats</i>; at the moment it's 100.
But of course I don't just want to draw these numbers.
I now want to add them up, so I need to keep track of the sum somehow.
So what I'm going to do, actually to do this, is I'm going to create a variable here called <i>sum</i> which I'm going to initialize at zero, because in the beginning, the sum is zero.
And then I'm going to actually store this value,
I'm going to add this value that <i>Math.random()</i> returns at two <i>sum</i>.
So similar to here where we're taking a value, we're adding something to it, and then the outcome of that will be stored back into the value.
I'm going to use the same idea here,
I'm going to say:
<i>sum = sum + Math.random()</i>.
So what this does basically again, recall that the right-hand side here is executed first.
So we're going to take whatever we have in <i>sum</i>, and then we're going to add whatever <i>Math.random()</i> returns, and this new <i>sum</i> we're now going to store back into the <i>sum</i> variable.
So now this <i>sum</i> variable, the value will increase every iteration by whatever <i>Math.random()</i> returns in any particular iteration.
And so that at the end we can calculate the average using these two values; so I'm going to now say:
<i>var average =</i>
-- well, whatever we have in <i>sum</i> -- divided by the number of <i>repeats</i>, because that's the definition of the average.
The total, the sum of all these values divided by however often we actually iterate it.
And all that's left to do now is basically output these values.
I'm going to say: <i>console.log</i> and I'm going to say here:
<i>The average is</i> and I'm going to terminate the string: <i>, average</i>.
So this is now basically just using the same types of concepts that we learned in Chapter 2.
We're initializing variables, we're setting up a loop that allows us to iterate; we're using this new method
<i>Math.random()</i>, and then we're doing some calculation, and at the end we're outputting the result.
So let's go ahead and do this, let's save this document.
Okay, I saved it,
I'm going to go over to the browser, and let's reload this document here and take a look at the console.
So here it says the average is 0.46.
Let me reload this.
Now it's 0.52, 0.53, 0.49, 0.48.
All right, it sort of hovers around 0.5, so this seems to be working and it seems to be true that the average is close to 0.5.
Actually, let's go back to the code here and let's do this maybe a thousand times, rather than just a hundred times.
So if we did this, go back to the browser, reload this, and now it's a little closer, see here we're actually getting extremely close to 0.5.
This is 0.49999, and so on.
So we're generally in the 0.49 or 0.51 region.
Let's go the other way, actually, let's only do this ten times; save it, go back.
Now you can see it's a bit all over the map, it's still sort of converging towards 0.5, but we're now seeing values around 0.6, we're now seeing values around 0.4, 0.3, here even 0.28 -- that's very low.
And so you can see just like in the coin-tossing example the variance here in the results is actually much larger, because we occasionally get these rather extreme values.
But by and large, we're still sort of zoning into this 0.5 value average.
So, let's quickly go back and let's do another extreme, let's do this a million times.
A 100 thousand and a million here.
Save.
Reload.
Now, two things: first you saw this was blazingly fast, it was just basically instant.
The other thing you see here, it's extremely close now to precisely 0.5.
Now, your values may look slightly different,
I mean I can reload this a couple of times, but you can see now we're always in the sort of 0.4999 area or in the 0.500 something area, so we're extremely close.
Let's increment this again by another factor 10, so we're now doing 10 million; go back here, reload.
There's a bit of a delay here, but you can tell that this is very fast.
Actually, let's go back and do this, just for fun, 100 million times.
So now when you reload this
-- and this depends a little bit on the power of your computer --, if you reload this, it takes a few seconds, maybe two or three seconds, actually a little longer here.
But it may take somewhere between two and ten seconds
-- and again this may depend on your browser --, but very close to 0.5.
The point being, we're doing here
100 million iterations and the browser basically calculates a little bit and it's going to take some time, but it's super fast.
It's incredibly fast, and that is of course the power of computers; we can do things now at scale that even in a random browser, in a random PC, that simply is astounding.
So, the take-home message here is that we can have a random number generator by using this <i>Math.random()</i> method; this comes in very handy.
And now we have all the tools in place to actually generate a coin flipper, something where two events, two outcomes are possible, and they happen exactly with 50% probability.
And this is what we're going to do in the next video in Lecture 3.
So in this video, we learned about an incredibly important method called <i>Math.random()</i> that really allows us to generate randomness in our code, and we'll use that heavily throughout the rest of this course, in fact.
And so in the next video, we'll use it to implement a coin flipper in JavaScript.
We'll see you there.
