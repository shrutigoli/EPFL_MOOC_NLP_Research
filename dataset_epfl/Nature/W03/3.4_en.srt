1
00:00:03,060 --> 00:00:07,260
Welcome back nature in code 
We're in Chapter 3 this is lecture four.

2
00:00:07,270 --> 00:00:11,360
In this video we're going 
to finish our coin tossing example.

3
00:00:11,360 --> 00:00:14,450
So this is the code and
that we developed so far

4
00:00:14,450 --> 00:00:16,710
and as we saw this works great.

5
00:00:16,710 --> 00:00:21,390
It uses math random to essentially 
implement a fair coin tosser.

6
00:00:21,390 --> 00:00:25,470
Now, what this does here,
right, is it flips 10 coins

7
00:00:25,470 --> 00:00:30,740
and then it simply reports on 
how many heads and tails came up.

8
00:00:30,740 --> 00:00:35,490
Now, What I'd like to do is, I'd like to 
wrap this whole thing in a function.

9
00:00:35,490 --> 00:00:41,430
A function that when executed 
basically flips 10 coins

10
00:00:41,430 --> 00:00:46,700
and then reports back whether the event
that we would like to observe,

11
00:00:46,700 --> 00:00:51,340
namely, 8 heads and 2 tales
did indeed happen.

12
00:00:51,340 --> 00:00:55,540
And then we can call this 
function many many times

13
00:00:55,540 --> 00:00:58,830
and then calculate how often 
this particular event happened

14
00:00:58,830 --> 00:01:00,440
and how often it didn't.

15
00:01:00,440 --> 00:01:02,400
So, let's go ahead and do this.

16
00:01:02,400 --> 00:01:04,350
So what I'm gonna do here is,

17
00:01:04,350 --> 00:01:09,710
I'm gonna wrap this whole thing here now
into function and I'm gonna call this

18
00:01:09,710 --> 00:01:15,300
function now into a function and I'm 
gonna call this function toss coins.

19
00:01:15,300 --> 00:01:18,300
Okay, toss coins.

20
00:01:18,310 --> 00:01:22,530
No parameters.
So curly brackets.

21
00:01:22,530 --> 00:01:24,000
So basically,

22
00:01:24,000 --> 00:01:30,700
this will be the entire function body.
So I'm gonna cut this and move it up here.

23
00:01:30,700 --> 00:01:36,830
Okay, so I'm just gonna make sure 
I got everything correctly indented,

24
00:01:36,830 --> 00:01:40,700
just for esthetic purposes.

25
00:01:40,720 --> 00:01:42,760
All right.

26
00:01:42,760 --> 00:01:47,300
So now you can see this whole code
that we developed in the last lecture

27
00:01:47,300 --> 00:01:52,620
is now wrapped within this 
function called toss coins

28
00:01:52,620 --> 00:01:56,650
and we can simply now call 
this function and execute this code.

29
00:01:56,650 --> 00:01:57,510
All right.

30
00:01:57,510 --> 00:02:01,800
But to achieve the goal that I set 
out in the beginning of this lecture,

31
00:02:01,800 --> 00:02:03,880
I need to change a few things.

32
00:02:03,880 --> 00:02:04,780
So number one,

33
00:02:04,780 --> 00:02:09,180
we can get rid of those console lock 
here we don't need that for the moment.

34
00:02:09,180 --> 00:02:15,410
What we'd like to do though is after 
this code here is executed we

35
00:02:15,560 --> 00:02:19,970
our heads and tails variables contain 
the values of how often

36
00:02:20,050 --> 00:02:20,700
heads came,

37
00:02:20,700 --> 00:02:24,510
that came up and how often tales 
came up and so now would like to

38
00:02:24,530 --> 00:02:25,870
basically say,

39
00:02:25,870 --> 00:02:26,450
you know,

40
00:02:26,450 --> 00:02:28,720
did this particular event happened,

41
00:02:28,720 --> 00:02:29,310
namely.

42
00:02:29,310 --> 00:02:32,500
That 8 heads came up and two tales.

43
00:02:32,500 --> 00:02:38,930
So we can now , simply say if, 
so here now after the 4 loop

44
00:02:38,930 --> 00:02:39,700
Okay,

45
00:02:39,700 --> 00:02:46,380
So 4 loop closes here 
if at this point now heads equals 8

46
00:02:46,380 --> 00:02:53,350
then it did happen. Then indeed 8 times 
heads came up and 2 times tales.

47
00:02:53,350 --> 00:02:56,590
We don't need to check for 2 times 
tales because it's clear that

48
00:02:56,590 --> 00:03:00,040
this happened if heads equals to 8,

49
00:03:00,060 --> 00:03:02,200
I'll talk about this condition 
in a second,

50
00:03:02,200 --> 00:03:03,750
but for the time being,

51
00:03:03,750 --> 00:03:06,560
let's simply say if that is the case,

52
00:03:06,560 --> 00:03:10,920
then I'm going to return a particular 
value from this function,

53
00:03:10,920 --> 00:03:13,250
namely true.

54
00:03:13,250 --> 00:03:18,870
And we'll talk about this as well.
If not, okay, so if this didn't happen

55
00:03:18,870 --> 00:03:25,650
so else well I'm gonna 
do is I'm going to return false.

56
00:03:25,650 --> 00:03:27,130
All right,

57
00:03:27,140 --> 00:03:30,150
and this is all within this function,

58
00:03:30,150 --> 00:03:30,810
right.

59
00:03:30,810 --> 00:03:33,390
So this function if you call it.

60
00:03:33,390 --> 00:03:37,400
if you execute it sets of these 
variables and these variables

61
00:03:37,430 --> 00:03:42,530
are now local variables in the 
local scope of this function

62
00:03:42,530 --> 00:03:48,330
and then it executes this iteration 
this loop throws essentially 10

63
00:03:48,480 --> 00:03:52,850
fair coins keeps count keeps track 
of the heads and tails,

64
00:03:52,850 --> 00:03:54,660
and then at the end,
if it says, well, okay,

65
00:03:54,660 --> 00:03:56,940
if we had exactly 8 heads.

66
00:03:56,940 --> 00:04:00,220
that I'm gonna return true and 
terminate this function

67
00:04:00,220 --> 00:04:02,130
because return always 
terminate the function.

68
00:04:02,130 --> 00:04:04,140
If that's not the case.

69
00:04:04,140 --> 00:04:07,920
I'm gonna return false and 
terminate the function.

70
00:04:07,920 --> 00:04:08,960
Okay,

71
00:04:08,960 --> 00:04:10,930
so what is this here,

72
00:04:10,930 --> 00:04:12,730
so this is a very,

73
00:04:12,730 --> 00:04:14,250
a very important operator.

74
00:04:14,250 --> 00:04:16,050
Okay. It's the equality operator.

75
00:04:16,050 --> 00:04:21,170
So basically you're comparing 2 values 
and you're checking whether their equal.

76
00:04:21,170 --> 00:04:26,850
Now it does use a double equal sign 
here and that's very important

77
00:04:26,850 --> 00:04:32,960
and it may be in fact the number 
one beginner mistake in JavaScript.

78
00:04:32,960 --> 00:04:37,440
You can see here we have an equal 
sign and I spent some time

79
00:04:37,440 --> 00:04:41,380
explaining this in the first few lectures 
of this course that this

80
00:04:41,380 --> 00:04:43,670
is really the assignment operator.

81
00:04:43,670 --> 00:04:46,790
This is not to be thought 
of as an equation.

82
00:04:46,790 --> 00:04:50,660
It is simply an assignment operator 
where we say into this

83
00:04:50,660 --> 00:04:55,900
variable tales I assign the value zero.

84
00:04:55,900 --> 00:05:01,140
This operator cannot 
be used to check for

85
00:05:01,140 --> 00:05:02,660
equality.

86
00:05:02,660 --> 00:05:03,420
Okay,

87
00:05:03,420 --> 00:05:04,930
that's very,very important

88
00:05:04,930 --> 00:05:08,190
I'm gonna repeated this equal sign 
is not meant to check for

89
00:05:08,190 --> 00:05:08,810
equality.

90
00:05:08,810 --> 00:05:11,010
If you wanna check for equality.

91
00:05:11,010 --> 00:05:14,210
This is the one that you use.
The double equal sign.

92
00:05:14,210 --> 00:05:19,880
Now just a bit of a spoiler is something that we're 
gonna do and talk about in

93
00:05:19,880 --> 00:05:21,070
the next lecture.

94
00:05:21,070 --> 00:05:26,830
There is also a triple equal sign

95
00:05:26,850 --> 00:05:31,850
and whether this triple equal sign 
or this double equal sign

96
00:05:31,900 --> 00:05:33,100
should be used.

97
00:05:33,100 --> 00:05:38,980
He is probably the content of maybe 
100 million blogs and webpages

98
00:05:38,980 --> 00:05:41,940
discussing which one is better now,

99
00:05:41,940 --> 00:05:44,770
we don't have time to 
discuss this in great detail.

100
00:05:44,770 --> 00:05:48,190
I'm going to explain the 
difference in the next lecture.

101
00:05:48,200 --> 00:05:52,710
For our purposes and 
for the purpose of this course

102
00:05:52,710 --> 00:05:55,710
I'm gonna use this double equal sign

103
00:05:55,710 --> 00:06:00,130
because that's also a standard in 
many other programming languages.

104
00:06:00,130 --> 00:06:05,380
But I'll explain this 
difference in another lecture.

105
00:06:05,380 --> 00:06:09,570
But the key point here 
really is don't use the single

106
00:06:09,580 --> 00:06:13,140
equal sign because the single equal
sign is an assignment operator.

107
00:06:13,140 --> 00:06:18,450
The signs of value to a variable
whereas the double equal

108
00:06:18,450 --> 00:06:20,640
sign or if you will,

109
00:06:20,640 --> 00:06:22,420
at least 2 equal signs.

110
00:06:22,420 --> 00:06:26,790
That's when you use for 
for equality checks.

111
00:06:26,790 --> 00:06:31,990
so if heads equals 8 and I'm just 
spending a few minutes on this

112
00:06:32,310 --> 00:06:36,510
because I'm afraid, I know that you're 
gonna make this mistake.

113
00:06:36,510 --> 00:06:40,980
If you're a beginner in fact I occasionally 
make this a mistake to this day.

114
00:06:40,980 --> 00:06:43,550
So it's a common mistake to make,

115
00:06:43,550 --> 00:06:47,770
don't worry about it but I want you 
to know that this is a source

116
00:06:47,800 --> 00:06:50,820
of of many mistakes,
specifically for beginners.

117
00:06:50,820 --> 00:06:51,620
All right,

118
00:06:51,620 --> 00:06:55,140
so if heads equals 8 then were gonna 
return true otherwise we're

119
00:06:55,140 --> 00:06:56,170
gonna return false.

120
00:06:56,170 --> 00:06:57,230
So what is true.

121
00:06:57,230 --> 00:06:58,500
And what is this false.

122
00:06:58,500 --> 00:07:02,070
Well, this is actually now
the 3rd type of variable that we

123
00:07:02,070 --> 00:07:03,590
encounter in JavaScript.

124
00:07:03,590 --> 00:07:05,520
So far we've encountered 2 types,

125
00:07:05,520 --> 00:07:13,010
namely simply numbers okay
10, 0, 0.5 and so on.

126
00:07:13,010 --> 00:07:21,090
Another variable type that 
we encountered was that of a string.

127
00:07:21,090 --> 00:07:25,870
Remember using the double quote or 
single quote simply a string of characters

128
00:07:25,870 --> 00:07:29,080
and now we have a 3rd type and that is the

129
00:07:29,080 --> 00:07:33,720
so-called boolean and the boolean 
can either be true or false.

130
00:07:33,720 --> 00:07:35,660
Only one of those 2 options.

131
00:07:35,660 --> 00:07:40,200
And these are the only 2 correct ways 
of spelling those values in JavaScript.

132
00:07:40,200 --> 00:07:42,680
Okay, True or False.

133
00:07:42,680 --> 00:07:44,930
Good.

134
00:07:44,930 --> 00:07:49,770
Now what we can do now that 
we defined this function,

135
00:07:49,780 --> 00:07:52,430
I'm gonna delete this line here.

136
00:07:52,430 --> 00:07:54,380
We can actually call it.

137
00:07:54,380 --> 00:07:58,120
So we could simply call this function 
toss coins and it would now

138
00:07:58,190 --> 00:08:03,220
return true if in this coin tossing 
experiment 8 heads came up and

139
00:08:03,220 --> 00:08:04,190
it would return false.

140
00:08:04,190 --> 00:08:05,880
If that's not the case.

141
00:08:05,880 --> 00:08:06,530
So indeed,

142
00:08:06,530 --> 00:08:09,940
what we can do now is we can call 
this function many many times

143
00:08:10,350 --> 00:08:16,240
and then basically keep track of 
how often true was returned.

144
00:08:16,240 --> 00:08:16,870
In other words,

145
00:08:16,870 --> 00:08:20,950
how often we did indeed 
throw 8 heads and two tails

146
00:08:20,950 --> 00:08:24,030
So, let's go ahead and do this below here.

147
00:08:24,040 --> 00:08:28,390
So I'm gonna do again right I 
do something many many times,

148
00:08:28,390 --> 00:08:30,950
namely I'm gonna call this function
many many times.

149
00:08:30,950 --> 00:08:32,940
So I'm gonna use 4 loop.

150
00:08:32,940 --> 00:08:34,170
Okay.

151
00:08:34,170 --> 00:08:35,240
So first,

152
00:08:35,240 --> 00:08:39,940
I'm gonna define how many repeats
I wanna perform here.

153
00:08:39,940 --> 00:08:43,390
So I'm gonna define this 
variable of repeats

154
00:08:43,390 --> 00:08:47,740
I'm gonna set it to
let's say 100,000.

155
00:08:47,740 --> 00:08:48,890
Okay,

156
00:08:48,890 --> 00:08:52,840
and then I'm going to

157
00:08:52,840 --> 00:09:00,120
I keep track of how often true will be
returned with this counter variable.

158
00:09:00,120 --> 00:09:04,240
That I'm gonna set to zero.

159
00:09:04,240 --> 00:09:07,970
Now let's implement the loop.

160
00:09:07,970 --> 00:09:11,830
Okay and you know now exactly
how we're implementing the loop okay.

161
00:09:11,830 --> 00:09:14,840
So I'm gonna have this 
initializer While I equals zero

162
00:09:14,840 --> 00:09:19,540
Here I'm gonna say I smaller than
the number of repeats.

163
00:09:19,540 --> 00:09:24,030
And then of course the increments 
by one in order to avoid

164
00:09:24,030 --> 00:09:25,830
infinite loops.

165
00:09:25,830 --> 00:09:32,360
Alright, So what do I want to do in this 
case 10,000 times or actually

166
00:09:32,360 --> 00:09:34,830
lives to 100,000 times.

167
00:09:34,830 --> 00:09:42,080
Well, what I'd like to do is I would like 
to call this function toss coins.

168
00:09:45,060 --> 00:09:46,220
Okay.

169
00:09:47,390 --> 00:09:53,470
Now if this were all I did then it 
which is simply close the coins

170
00:09:53,470 --> 00:09:57,230
Which it would do 10 times and 
would do that 100,000 times,

171
00:09:57,230 --> 00:10:01,370
so it would run 100,000 of these 
coin tossing experiments.

172
00:10:03,230 --> 00:10:07,210
But I wouldn't keep track of anything 
so I need to store this

173
00:10:07,210 --> 00:10:10,210
variable this return 
value somewhere.

174
00:10:10,210 --> 00:10:14,320
And then I need to somehow 
understand what just happened.

175
00:10:14,320 --> 00:10:19,060
So whatever it is toss coins
returns which is either true or false.

176
00:10:19,060 --> 00:10:23,510
I'm gonna store it in a variable 
that I'm gonna call.

177
00:10:23,510 --> 00:10:26,190
Well, let's call it desired outcome.

178
00:10:26,190 --> 00:10:29,520
Because it is essentially the desired outcome.

179
00:10:29,520 --> 00:10:31,600
Whether that is true or false.

180
00:10:31,600 --> 00:10:33,210
Whether this is really,

181
00:10:33,210 --> 00:10:37,320
hasn't desired outcomes 
of of 8 heads or not.

182
00:10:37,320 --> 00:10:41,090
So this function will get called 
the return value true or false

183
00:10:41,090 --> 00:10:48,230
will be stored in this here.
And now I can simply check for the

184
00:10:48,230 --> 00:10:51,370
the value of this desired 
outcome variable.

185
00:10:51,370 --> 00:10:56,590
So I can simply say if desired outcome

186
00:10:56,590 --> 00:11:02,270
And now I could simply 
say if it equal to true

187
00:11:02,280 --> 00:11:10,640
then can then indeed we just threw 
10 points and 8 times heads came up.

188
00:11:10,650 --> 00:11:11,520
So this is,

189
00:11:11,520 --> 00:11:12,350
yeah,

190
00:11:12,350 --> 00:11:12,860
right.

191
00:11:12,860 --> 00:11:17,120
It came it happened the way we wanted 
it to happen so I'm gonna up

192
00:11:17,200 --> 00:11:22,610
to counter by one. Counter 
equals counter plus one

193
00:11:22,610 --> 00:11:26,050
and else I'm gonna do nothing,

194
00:11:26,050 --> 00:11:28,910
so there's no else here I 
don't needs to have an else.

195
00:11:28,910 --> 00:11:34,120
I could ofcourse have an else 
and then essentially do nothing but that's

196
00:11:34,160 --> 00:11:36,100
useless going to get rid of it

197
00:11:38,280 --> 00:11:44,160
and other thing, all these if
and else statements right there

198
00:11:44,420 --> 00:11:45,690
Based on conditions.

199
00:11:45,690 --> 00:11:51,090
So if a certain condition is true 
if math random smaller than or

200
00:11:51,090 --> 00:11:57,720
equal to.5 or here if heads equals 
8 or here if desired

201
00:11:57,770 --> 00:12:02,280
outcome equals true they all evaluate 
to something that's either

202
00:12:02,280 --> 00:12:04,060
true or false.

203
00:12:04,060 --> 00:12:06,950
They in fact evaluate 
who boolean value and

204
00:12:06,950 --> 00:12:10,290
so this is in fact redundant.

205
00:12:10,290 --> 00:12:13,290
You can leave it if you want to,

206
00:12:13,290 --> 00:12:19,220
but we can also just right if desired 
outcome because this will

207
00:12:19,270 --> 00:12:22,870
evaluate if desired how comes equal 
true will evaluate in the

208
00:12:22,870 --> 00:12:24,180
boolean anyways.

209
00:12:24,180 --> 00:12:25,650
And we already have a boolean.

210
00:12:25,650 --> 00:12:28,180
This is already either true or false.

211
00:12:28,180 --> 00:12:31,340
So you can simply say if desired outcome.

212
00:12:31,340 --> 00:12:37,230
And then we can essentially run 
this now we're calculating everything.

213
00:12:37,230 --> 00:12:39,840
but we're not out putting anything 
into the console so let's.

214
00:12:39,890 --> 00:12:41,790
Let's go ahead and do this right,

215
00:12:41,790 --> 00:12:45,470
let's go ahead and same console log

216
00:12:48,120 --> 00:12:51,840
you know I'm just gonna 
say getting 8 heads.

217
00:12:54,730 --> 00:12:56,420
And 2 tails.

218
00:13:00,950 --> 00:13:01,990
Now.

219
00:13:03,190 --> 00:13:07,420
I'm gonna have to calculate the percentage 
here which I'm gonna do

220
00:13:07,420 --> 00:13:10,740
it in a minute and I'm gonna say

221
00:13:10,740 --> 00:13:14,460
percent of the time came.

222
00:13:14,460 --> 00:13:19,150
So how do I calculate what 
they have to put here.

223
00:13:19,150 --> 00:13:22,960
How do I calculate this percentage 
well it's simply

224
00:13:24,060 --> 00:13:27,700
the number of counter or 
the value that we have

225
00:13:27,700 --> 00:13:31,490
encountered as the counter keeps 
track of how often this happens in deed.

226
00:13:31,490 --> 00:13:32,460
Okay,

227
00:13:32,460 --> 00:13:37,990
divided by the total number that 
we ran this experiment which is

228
00:13:38,250 --> 00:13:42,980
stored in repeats and that gives 
us the fraction and in order to

229
00:13:43,030 --> 00:13:46,000
turn a fraction into a percentage 
value of course we need to and

230
00:13:46,000 --> 00:13:48,550
simply multiply this by 100.

231
00:13:51,010 --> 00:13:52,310
All right.

232
00:13:52,310 --> 00:13:57,380
So now we have everything set up 
we can save this and we can move

233
00:13:57,380 --> 00:14:00,580
over to the browser and 
see if this is working.

234
00:14:00,580 --> 00:14:04,050
So here's our console still showing 
the results from the previous

235
00:14:04,270 --> 00:14:07,710
heads and tails coin tossing 
some gonna reload this.

236
00:14:08,800 --> 00:14:14,120
And here it says getting 8 heads 
to tales 4.4-3 8 and some

237
00:14:14,120 --> 00:14:14,710
rounding error.

238
00:14:14,710 --> 00:14:16,060
Percent of the time.

239
00:14:16,060 --> 00:14:21,500
So this is in fact pretty close to 
4.3 9% which we calculated in

240
00:14:21,500 --> 00:14:28,360
an earlier lecture.
Let me reload this 4.3-5 1-4.3-6 9-4.3-6

241
00:14:29,150 --> 00:14:29,860
and so on,

242
00:14:29,860 --> 00:14:34,100
so you can see is sort of hovers 
around this value with a little

243
00:14:34,100 --> 00:14:38,190
bit of variance of course. 
seems to be pretty fast.

244
00:14:38,190 --> 00:14:41,450
So let's go back to our code and
up this here by an order of

245
00:14:41,470 --> 00:14:42,410
magnitude of care,

246
00:14:42,410 --> 00:14:47,350
have 100,000 here from just 
going to add another 0,

247
00:14:47,350 --> 00:14:50,040
and again whether you can do it this 
or not depends a bit on the

248
00:14:50,040 --> 00:14:52,370
speed of of the machine,

249
00:14:52,370 --> 00:14:56,070
you're running this on here seem to 
be pretty fast gonna save this

250
00:14:56,070 --> 00:15:02,180
gonna move over and gonna reload this 
4.3-9 3-6 of us is now very

251
00:15:02,180 --> 00:15:05,110
close 4.4-0.

252
00:15:05,110 --> 00:15:10,310
You can see it's still hovering 4.4-3 
a bit around this value but

253
00:15:10,490 --> 00:15:13,880
but the variance around this value 
is now little smaller so we're

254
00:15:13,880 --> 00:15:18,920
closer now as we would expect because 
we're running many many more experiments.

255
00:15:18,920 --> 00:15:22,920
Let me go back once again 
there seems to be some room to

256
00:15:23,690 --> 00:15:27,930
increase this number by another order 
of magnitude 7 now running

257
00:15:27,930 --> 00:15:30,600
this 10 million times.

258
00:15:30,600 --> 00:15:31,090
Okay.

259
00:15:31,090 --> 00:15:35,550
Save this and I'm gonna reload this 
and that's probably gonna take

260
00:15:35,880 --> 00:15:37,220
a couple of seconds.

261
00:15:37,220 --> 00:15:42,810
But you can see here 4.4 oh 2 so 
this is very close to 4.39

262
00:15:42,810 --> 00:15:46,460
4.3-9 see we get here.

263
00:15:46,460 --> 00:15:47,230
3rd time.

264
00:15:51,750 --> 00:15:52,890
4.3-9.

265
00:15:56,090 --> 00:16:01,750
4.3-9 so you can see this now comes 
up 4.3-9 pretty much all the

266
00:16:01,750 --> 00:16:02,150
time,

267
00:16:02,150 --> 00:16:03,450
were very close to it,

268
00:16:03,450 --> 00:16:06,890
I don't increase it by yet another 
order of magnitude.

269
00:16:06,890 --> 00:16:09,030
There will probably take too long,

270
00:16:09,030 --> 00:16:13,080
but you can see this code actually 
now works and it's now a great

271
00:16:13,080 --> 00:16:17,270
example because you look at this 
code you now actually using many

272
00:16:17,410 --> 00:16:22,790
many elements of of the 
JavaScript you're using functions

273
00:16:22,980 --> 00:16:27,180
you're using variables using math 
random you're using iteration

274
00:16:27,490 --> 00:16:34,130
you using control flow if else you 
using strings booleans numbers

275
00:16:34,430 --> 00:16:38,500
you're using all kinds of things 
so so great work if you,

276
00:16:38,500 --> 00:16:43,460
if you've got the done and if things 
were correctly here and also

277
00:16:43,760 --> 00:16:44,400
what we,

278
00:16:44,400 --> 00:16:48,280
what we've done here is essentially 
to implement this coin tosser

279
00:16:48,280 --> 00:16:52,780
where were with with a 
very simple JavaScript code

280
00:16:53,130 --> 00:16:58,900
basically demonstrating that if you 
throw 10 fair coins then

281
00:16:59,490 --> 00:17:05,240
heads come up 8 times and 
tails 2 times in 4.39%

282
00:17:05,240 --> 00:17:10,210
of the experiments.

283
00:17:10,210 --> 00:17:15,210
Now you could of course argue well 
it seems like a bit of a waste

284
00:17:15,210 --> 00:17:19,330
of time to implement this Code to 
get this resolved because we got

285
00:17:19,330 --> 00:17:24,530
it mathematically you know much 
faster and of course I couldn't

286
00:17:24,630 --> 00:17:25,820
argue with the logic.

287
00:17:25,820 --> 00:17:27,530
He would be absolutely right,

288
00:17:27,530 --> 00:17:29,250
but that wasn't the point here.

289
00:17:29,250 --> 00:17:33,490
The point is really to show how 
you can do this because,

290
00:17:33,490 --> 00:17:38,370
as we'll see as we go on in the course 
will implement many fairly

291
00:17:38,370 --> 00:17:45,110
complex simulations that will be 
very hard to track exactly with

292
00:17:45,210 --> 00:17:48,660
mathematical tools now here to 
the coin tossing example is a

293
00:17:48,660 --> 00:17:50,090
simple example.

294
00:17:50,090 --> 00:17:54,060
And this is something you can track 
very easily with simple math.

295
00:17:54,070 --> 00:17:57,880
but many of the models that we're 
gonna run you won't you wouldn't

296
00:17:57,880 --> 00:18:02,220
be able to do this but you now 
have all the tools in place to

297
00:18:02,220 --> 00:18:08,490
basically implement this stochastic 
Lee in your browser.

298
00:18:08,490 --> 00:18:12,320
Using Java script so great,

299
00:18:12,320 --> 00:18:13,810
great work a great job.

300
00:18:13,810 --> 00:18:17,110
If you got to hear and if everything 
is working now if

301
00:18:17,140 --> 00:18:21,830
everything's still feels a little 
and unclear at times.

302
00:18:21,830 --> 00:18:22,120
You know,

303
00:18:22,120 --> 00:18:22,760
don't worry.

304
00:18:22,760 --> 00:18:24,410
This is completely normal.

305
00:18:24,410 --> 00:18:28,340
You're learning programing and I'm 
throwing a lot of material here

306
00:18:29,140 --> 00:18:33,930
at you but will used to same concepts 
over and over and over and

307
00:18:33,990 --> 00:18:39,200
over again and it's it's completely 
normal that it may feel of a

308
00:18:39,200 --> 00:18:41,650
bit confusing,

309
00:18:41,650 --> 00:18:43,990
you'll get the hang of it in due time.

310
00:18:44,930 --> 00:18:45,380
All right.

311
00:18:45,380 --> 00:18:49,990
This concludes this video we just 
implemented coin tosser using a

312
00:18:49,990 --> 00:18:54,090
stochastic simulation in JavaScript 
and using all kinds of

313
00:18:54,090 --> 00:18:59,410
concepts is a great work if you made 
it to here in the following

314
00:18:59,410 --> 00:19:01,980
lecture room I'll go a little 
bit deeper into some of the

315
00:19:01,980 --> 00:19:06,010
technical details of the new concepts 
that we learned here so I'll

316
00:19:06,010 --> 00:19:06,580
see you there.
