Welcome back, <i>Nature, In Code</i>.
We're in Chapter 3, Lecture 8.
This lecture is a pivotal moment in this course because we are now, finally, starting to visualize the data that we generate, so let's get going.
So here we have our code as we developed it.
This is <i>Genetic Drift</i>. It's working.
So now our goal is to visualize these values.
We're currently outputting those values, 
<i>p</i> and <i>q</i>, in the console, and then if we go to our browser, we can look through these values here, and we can see how they change, but it's kind of cumbersome to scroll here through these values and try to understand what the dynamics are.
So this is a case now, for visualization.
So let's do this.
So how do we visualize?
So, we will visualize using a library called <i>D3</i>, and if you search for <i>D3</i>, then you will get to this website here,
<i>D3.js</i> or <i>D3js.org</i>.
And <i>D3</i> is this library that we'll be using.
<i>D3</i> stands for Data-Driven Documents.
And as you can see here from this screen, this is an extremely powerful library that can do absolutely magnificent visualizations.
Correspondingly, it's actually not very trivial, and it would be beyond the scope of this course to teach you the details of <i>D3</i>.
If you're interested, please go ahead.
There's many, many examples here, there's the whole documentation.
There's entire books and tutorials online where you can learn <i>D3</i>.
It's an absolutely fascinating tool, but we're not going to cover that in this course.
What I'm simply going to do is I'm going to hand you some code that does everything for you, and then we'll just use this to visualize our results.
So, what you have to do is, basically, when you want to use <i>D3</i>, you have to load this library, and here's the instruction, how you do this.
So you can either load it locally-- or if you're connected to the internet, which you are now, otherwise you probably, or you certainly have been, otherwise you wouldn't see this video-- you can simply use this code snippet here, which is, as you recognize, a <i>script</i> tag, but which has this <i>source</i> attribute.
It means it loads a particular file here-- it's called <i>d3.v3.min.js</i>-- from a server somewhere, into your code.
So this is what we'll do.
And, by the way, if you're curious, feel free to copy this URL here and paste it into the browser and then you will see, basically, what this library looks like.
So this is the library and it's, obviously, extremely condensed.
You can barely understand what this all means.
I mean, I certainly don't.
But that's the point, it has been minified.
It has been condensed so that it takes a little bandwidth, but this is essentially the entire library right here.
So, let's go ahead and do this.
So let's copy this tag here.
Okay, and I'm going to copy this, and then we're going to go our <i>Genetic Drift</i> code here, and we're going to load this here, in the <i>head</i>, as a separate <i>script</i> tag, like this.
So now when the browser sees this, it' loading--it's trying to load, at least,-- this document from the web, so this will only work if you're online.
Now, the other thing that you need now--
So this loads the library, but we haven't written any code yet to basically tell JavaScript what exactly to visualize and how.
So that code, again, to write this code and understand it in detail, would be beyond the scope of this course.
So I'm going to hand you this file, basically, or this code.
And, if you're looking at this video in the context of the MOOC, on the page that you currently are, you will find a link to the download of this code, 
<i>draw_line_chart</i>.
So, find it somewhere on this page.
If you can't find it, you can always go to the website of <i>Nature, In Code</i>, which is at <i>natureincode.com</i>, and it looks like this-- or at least at the moment it looks like this.
As you know, websites are changing all the time, so at the moment where you're watching this video, it might actually look a little different.
That's quite possible.
Nevertheless, you will find the code here, somewhere, where we have See Code in Action, and then you can see, for example here, <i>Genetic Drift</i>.
If you would go to the example code here, you could find here, the <i>draw_line_chart</i> function, which is built with <i>D3</i>, and it can be found here.
So, this is the <i>draw_line_chart</i> function.
Again, this might look a little different by the time you watch this video, but it will be on this website, and it's certainly also on the MOOC website, so it should be easy to find.
So I'm just going to go ahead and I'm going to copy this code.
It's a bit complex, as you can see here, but again, we don't need to worry about this because this is just code to visualize it.
But copy it and then go back to your document and then paste this code here, above our <i>Genetic Drift</i> code.
So just paste it, and you can leave it like that if you want to.
I'm going to indent it a little bit, just so that it looks nice.
So, indent here, like this. All right.
So there's one more thing that we have to do and that is, this code now, this visualization code, uses our <i>body</i> elements to basically dynamically put content into the <i>body</i>, that's how visualization works.
And, as you may recall, the <i>head</i> is for information like generic scripts and information about the authorship of the page or the title, things like that.
And the <i>body</i> is where we actually show the visual things.
So, this entire <i>script</i> tag here, actually, with the <i>draw_line_chart</i> function, and with our codes, we have to move it into the <i>body</i>, otherwise this is not going to work.
So copy the entire <i>script</i> tag here so that you have only this <i>D3</i> line left, and just move it here, into the body, and that's pretty much it.
So I'm just going to copy this here, and now, we're essentially ready to visualize this code.
So, you can see now here, we have the <i>script</i> tag that loads the <i>D3</i>, this we can absolutely put in the head.
But here, the other <i>script</i> tag, where we use this <i>draw_line_chart</i> function, and then also at the bottom, our <i>Genetic Drift</i> code, this <i>script</i> tag now, has to be in the <i>body</i>.
Okay. Good.
So, are we ready to visualize this? Almost.
Well, first we have to get rid of a couple of things.
So first of all, we don't need this <i>console.log</i> anymore, because we don't actually want to output it into the console anymore.
I mean, you could keep it if you want to.
You can, of course, output values both into the console and visualize them in the browser, but I'm just going to remove this.
Good.
And also, this <i>round_number</i>, correspondingly, won't be necessary any more, so I'm going to get rid of that here as well, just to keep our code quite clean.
So now what I have to do though is,
I have to call this <i>draw_line_chart</i> function.
And now, if we go up and take a look at this <i>draw_line_chart</i> function, we can see here, here it is, that it actually has a number of parameters defined, and those are called <i>data</i>, 
<i>x_label</i>, <i>y_label</i>,
<i>legend_values</i>,
<i>x_max</i>, and <i>y_max_flex</i>.
So, what do those stand for?
What do they mean?
Well, basically, what they mean is that I have to pass on the data that I want to visualize, then I have to pass on two strings, an <i>x_label</i> and a <i>y_label</i>, for our axes.
And if I want a legend, 
I have to pass some values here, to this function, as an argument.
These are two parameters that I'll explain a bit later.
We don't need this here, at the moment.
We're not going to pass these parameters, and the function, actually, all ready takes care of the fact that you're not passing anything here.
But these will be the values that we will need to provide.
So this will be a string, this will be a string.
This will be a mix, I'll explain that in a bit.
But here, this is the data, this is what we want to visualize.
So, what is it, actually, that we want to visualize?
Well, what we'd like to visualize are these <i>p</i> values, how they change over time.
So, what I have to do is,
I somehow have to store all of those values, the changing <i>p</i> 's, over time.
And then, I have to pass all of these values to this function, <i>draw_line_chart</i>.
So how am I going to temporarily store many, many values, concretely, 1000 values, temporarily?
Well, there's a really handy variable type in JavaScript, and it's called an array.
And an array is, in fact, potentially, the most important construct in JavaScript, and I'll talk about this, in detail, in the next lecture.
For now, there's just a few things that you need to know.
First, I'm going to add here a variable,
I'm going to call it <i>data</i>, and I'm going to initialize it with these two square brackets.
Open and close, so it's empty, basically.
These brackets here, this type of bracket, is used to denote an array.
So this is an empty array.
So an array is basically just a set of values.
It can be empty if there's no value in there, but it can have many, many values.
That's quite handy because variables, as you can see here, only allow you to store one value.
This one stores one value, this one here stores one value, this one here stores one value.
There's no way to store multiple values.
That's what the <i>array</i> can do.
So this is an array-- it can store multiple values.
So, down here, after I've calculated the new <i>p</i>,
I'm going to say, <i>data.push(p)</i>.
So what this does is, it pushes the <i>p</i> value into the <i>data</i> array.
Again, we're gonna talk about this, in detail, in the next lecture.
For now, you just need to understand that this is an array which can contain multiple values.
And here, we're pushing <i>p</i> values into this <i>data</i> array.
And then, at the end, once we're done here with calling <i>next_generation</i> however many times--
1000 times at the moment-- we would like to visualize now, this data.
So we're going to now call this <i>draw_line_chart</i> method, and we're going to pass it now a couple of arguments.
So the first is this <i>data</i> array, so I'm now passing this array which is now filled with, currently, 1000 values.
And then, the second, if you go back up here to the definition of this function, the second argument that we need to pass is the <i>x_label</i>, the third is the <i>y_label</i>, and then the values we'd like to have in the legend.
So let's go back here, and let's pass in the <i>x_label</i>.
So on the x-axis we will have the time, or basically, the generations.
So, I'm just here going to type <i>Generation</i>.
That's going to be my <i>x_label</i>, my label on the x-axis.
What I would like to do is,
I would like to have just the letter <i>p</i> on the y-axis, because that's going to be the frequency of the <i>a1 allele</i>, or <i>p</i>, as we're calculating it here.
And then, the legend itself, in fact, has to be an array-- and you can just type this with me-- but I'm going to pass here, an array to this function and it has four values, namely, the label <i>Population Size</i>.
The actual population size, which is stored in <i>N</i>.
Actually, let me add a colon here, it's a little nicer.
And then, the number of generations as a label, so I'm just going to say <i>Generations</i>.
And then, of course, the number of generations, which is currently stored in <i>Generations</i>.
So now we're calling this function, and this should now, essentially, work.
So, let's save this and let's hope everything worked.
Let's go back to our browser.
I'm going to close these tabs here, and I'm still back here at my <i>Genetic Drift</i> example, so I won't need the console here anymore.
So I'm going to close this, and I'm going to reload this document, and boom--
Here is our first visualization.
Look at this.
So, here we have the number of Generations.
Here, you can see <i>p</i>, the <i>a1 allele</i> frequency between zero and one.
And here, you can see how it changes over time.
And this is the legend.
This is what we passed in, the string <i>Population Size</i> and <i>Generations</i>, and those two values.
You can now reload this, and this simulation will immediately change.
Isn't that cool?
Actually, let's go back to the code, and let's reduce, now, the population size a little bit.
I'm going to just type here: 
N = 500 instead of 1000.
So this population is now half the size of what it was before.
So save it, go back.
So here, you can now see two things:
Number one, so first of all, of course, this legend got automatically, correctly updated.
And the other thing that you see is, you actually see here, a fixation simulation.
<i>p</i> now goes here, a little bit up and down, but by and large it goes up, and it eventually goes to fixation.
So let's reload this.
Here, it's actually lost.
First, that's really interesting here.
So first, it goes up and it reaches 80%, so it's looking, actually, really good for the <i>a1 allele</i>, but then it crashes.
It almost gets lost from the population, makes a bit of recovery, but then around generation 900, gets completely lost from the population.
And that, of course, means that the <i>a2 allele</i> goes to fixation.
So we could, in principle, plot the <i>a2 allele</i>, but it would just be the exact mirrored curve because <i>q</i> and <i>p</i>, or the a1 and the a2 frequencies, always add up to one.
Let's reload this again.
Yeah, it almost went to fixation.
This is a really interesting one, look at this.
<i>p</i> goes down, so the <i>a1 allele</i> frequency goes down to a few percentage points here, at generation 5, but it actually stages a comeback to more than 50%, and who knows what's going to happen here, in the future.
So, this is really exciting.
You can reload this a couple of times, and you can observe two things:
Number one, these are stochastic, random simulations, so no two simulations will look the same.
You can also observe that sometimes the <i>allele</i> frequency will go to zero or one, as we observed in the <i>console.log</i> before.
And that means, one of the allele goes to fixation, and you lose genetic variation, basically, because now you just have one allele, you have no more variation.
And the other thing that you'll notice is that this is actually blazingly fast.
I mean, we're running at 1000 generations here, and it's just being visualized instantly.
So this is why I think this is so cool to do this in the browser.
It's so fast, and it's just so easy to do.
And you can now look at this in any browser, whether it's on a mobile phone or a tablet, or on a desktop computer or laptop.
So, essentially, a couple of billion devices right now who can run this code, and I think that's quite fascinating.
So this concludes this video. 
Congratulations.
You visualized <i>Genetic Drift</i> in a browser, and that's quite amazing.
We're going to use this <i>D3</i> functionality, this library, to plot things, to visualize things, quite extensively in the future.
It may have felt a little cumbersome to copy and paste code-- and normally we don't do this-- but, as I said, it's okay here because I just wanted to hand you this code, rather than you having to understand <i>D3</i> from scratch.
And it turns out, the way 
I actually developed this code-- it's very generic-- so we'll be able to use this for many, many different plots.
So, in the next video,
I'd like to briefly speak a little bit and investigate this concept of an <i>array</i> that we encountered here.
It's a very powerful tool in your JavaScript arsenal, and we'll talk about it in detail in the next lecture.
So I'll see you there.
