Welcome back Nature, In Code.
This is Chapter three, lecture three.
In this video will implement the coin tossing example in JavaScript and as we do this, we'll learn about a very important concept in programing, namely that of control flow.
So let's get going.
So here we have our code from last time essentially using math random, demonstrating math random as this method that returns a random number between zero and one and it's going to be very handy for us in the future.
So, let's go ahead and implement our coin toss.
So I'm going do is I'm just going to take this cold here,
I'm going to get rid of it, and then I'm going to <i>Save As</i>.
So don't <i>Save</i>, otherwise you will overwrite your file.
<i>Save As</i> and I'm going to name this--
I'm going to call this file 
"Coin Tossing."
Okay "Coin Tossing."
All right.
What we did in the previous lectures is to look at the probability of throwing 10 coins-- flipping 10 coins this resulting in eight heads coming up and two tails coming up and we calculated this as 4.39%.
And now we want to do, rather than calculating it is we actually want to throw 10 coins many, many times and calculate how often, actually, this particular result, eight heads and two tales does indeed come up.
So how can we do this in JavaScript?
Well, first of all, let's define some variables to set things up.
So I'm going to define this of <i>var coins</i> and we're going to set it to 10.
So this variable is basically going to contain the number of coins that I have and we said we want have 10 and then I need to keep track of how many heads and tails will come up.
So I'm going to define two variables, one that I'm going to name, whoops, <i>heads</i>, and then I'm going to initialize at zero and the other I'm going to call <i>tails</i> and I'm going to initialize at zero as well.
All right.
So now what I'd like to do is
I'd like to throw 10 coins, which means I basically have to call this math random
10 times or however many times I have in coins.
So I have to do something repeatedly.
This of course is the signal for iteration, for loop and in particular we're going to use the for loop.
So I'm going build here a for loop, as we have before, so <i>var i = 0</i>
This is our initialization.
The condition will be <i>i</i> smaller than whatever I have coins and the final expression here is simply the increment of <i>i</i> by one.
So basically the exact same thing as before and we're going to use this construct over and over again.
Good; so I like to call math random in here.
All right, but what I'm going to do with this?
I mean, how can I now go from this math random, which will return any random number between zero and one to a fair coin?
Well, basically we can now use the fact that each number between zero and one comes up with equal probability when calling math random.
So what I can say here, for example, is and I'm going now using new statement.
So you just have to follow me.
I'll explain this in great detail.
<i>if (math.random ()</i>
I'm going to get rid here of this semicolon-- is smaller or equal to 0.5
I'm going to close parentheses here-- then in curly brackets,
I'm going to do something.
So what this means, again, we'll talk about the statement, but you can clearly I think understand what this does, <i>if</i> this math random call returns a number that is smaller or equal than 0.5 then I'm going to do something.
So what this means is this will essentially be let's say the the throwing of a coin and heads comes up.
So what I'm going to do in that case is
I'm simply going to increase the heads variable by one and if this is not the case, so if math random has actually returned a number that is greater than 0.5 and for that I can use the <i>else</i> statement, so <i>else</i>.
Well in this case tails came up, so tails equals plus one.
So this is how we read it, right.
We're going to call this math random if it brings up a number that's smaller or equal to 0.5.
Then were going to increased is heads by one
'cause then we're going to assume the coin came up heads otherwise we're going to assume tails came up and so we're going to increase tails by one.
And so this is now essentially our coin tosser because we can simply call this method here and say,
"Well, you know, in exactly half of the time, the result here is going to be smaller or equal to 0.5 and in exactly half of the time, the result is going to be greater than 0.5."
So this is exactly the same probability distribution, if you will, as a fair coin.
So all we have to do now basically is to say or to output into the console how often things happen here.
So what I'm going to do is 
I'm going to write
<i>console.log(heads</i>
I'm just going to say heads.
And tails the number and <i>tails</i>.
Okay, so this will output the value that we have in the variable, then the string heads the value that we have a variable tails and then the string tails.
So let's save this and let's go over to the browser and open this file.
So here's our previous random HTML file.
So I'm going to be in the same directory.
So I'm just going to say
<i>cointossing.html</i>
All right, and here's our result: so six heads, four tails.
So that's pretty nice.
Let's reload this.
Five heads, five tails, five heads, five tails, three and seven, four and six, two and eight.
So you can see this is basically exactly what this web page did that we recently looked at with the coins. it mostly brings up five/five and four/six but occasionally there's a seven/three.
Here's a two/eight.
If we will keep doing this for a long time we would get a one/nine.
But as you can see that is fairly rare.
In any case, this works.
So let's go back to the code.
Now this is our coin flipping example and this works fine.
So we'll talk in greater detail about this but just for now essentially how this works is you have this <i>if</i> statement and then you need parentheses and in those parentheses you need to have a condition and if this condition-- so for example here, math random needs to be smaller than or equal to 0.5.
If this evaluates to <i>true</i> then whatever follows here in the curly brackets will be executed.
And if not, so this <i>else</i> then this statement, or these statements here in the curly brackets following the <i>else</i> will be executed.
And this is super handy.
Now, couple of things, first of all, you actually don't need an <i>else</i> at all times.
I mean, here we need it, but it's perfectly correct from a syntax perspective to have simply an <i>if</i> statement and say well, "If something is true, then I'm going to execute these lines of code, without an <i>else</i>"
But sometimes you have an <i>if else</i> situation and then this <i>else</i> comes in quite handy.
So if this is true,then do this, if it's not true, so <i>else</i>, then do this.
There is also a third element that you could add, namely the combined <i>else.if</i> some condition and then some statement and we'll be talking about this in another lecture but I just want you do know for now that this exists.
All right, I'm going to remove this.
All right, so one one word of warning that I want to mention here as well if you actually look at real world 
JavaScript code, sometimes you see something like this.
You see an <i>if</i> statement case something like, for example, <i>if (math.random)</i> smaller than 0.1-- doesn't matter-- then you know heads equals one or something.
It doesn't exactly matter what the content of this line is what is crucial here is that you can see the <i>if</i> statement then you can see the condition.
Okay, if this is true and then immediately following on the same line one line of code that has to be executed.
Now this is technically correct JavaScript.
Okay you don't need the curly brackets.
But again you haven't heard this from me because my very strong advice to you is don't ever do this.
This will lead to all kinds of bugs down the road if you're not careful and I'm going to explain in another lecture what those bugs look like and why that's a problem.
So don't do this but it is principle technically correct.
Do it instead like this: <i>if</i> the condition, then curly brackets.
And if you need an <i>else</i>,
<i>else</i> curly brackets and all this conditional code here in those curly brackets.
And now you can also see why this is called control flow because you're essentially controlling the flow of your code depending on certain conditions and as you can imagine this will come in extremely handy down the line and we'll use this construct <i>if else</i> very heavily throughout the rest of the course.
All right, this concludes this video.
You just learned about the <i>if else</i> statement, a very important statement in programing and we used the math random method to implement a coin tosser.
In the next lecture we're going to take this a step further.
I'll see you there.
