1
00:00:03,330 --> 00:00:07,280
Bienvenue: Nature, dans le code.
Nous sommes dans le chapitre 3, leçon 14.

2
00:00:07,280 --> 00:00:10,650
Dans cette leçon, nous allons maintenant
mettre en oeuvre ces idées que nous venons d'apprendre

3
00:00:10,650 --> 00:00:15,570
à propos de la taille effective de la population
en raison, par exemple, les goulots d'étranglement

4
00:00:15,570 --> 00:00:17,540
dans notre code Java Script.

5
00:00:17,770 --> 00:00:19,550
Donc, pour récapituler,

6
00:00:19,550 --> 00:00:22,440
ce que nous avons ici
est la taille de la population

7
00:00:22,440 --> 00:00:27,940
qui s'effondre dans ce type de dynamique
goulot d'étranglement.

8
00:00:27,940 --> 00:00:30,350
Donc, cela est temps,
c'est la taille de la population,

9
00:00:30,350 --> 00:00:34,680
une baisse massive de la taille de la population
et la taille de la population récupère.

10
00:00:34,680 --> 00:00:37,620
Et nous avons appris que cela a l'effet

11
00:00:37,620 --> 00:00:42,200
que la taille effective de la population
va être sensiblement plus petite

12
00:00:42,200 --> 00:00:44,390
que la taille réelle de la population.

13
00:00:44,390 --> 00:00:47,720
Et nous avons aussi trouvé un moyen
de calculer ceci à savoir

14
00:00:47,720 --> 00:00:53,060
simplement en prenant la moyenne harmonique
des nombreuses tailles de population

15
00:00:53,060 --> 00:00:55,250
ou des générations, nous avons

16
00:00:55,260 --> 00:01:02,130
n plus de 1 sur x1 plus 1 sur x2
et ainsi de suite,

17
00:01:02,130 --> 00:01:05,090
plus 1 sur xn,

18
00:01:05,240 --> 00:01:10,280
et donc les x étant ici les
tailles de population au fil du temps.

19
00:01:10,290 --> 00:01:14,070
Mais ceci est simplement la définition
de la moyenne harmonique.

20
00:01:14,070 --> 00:01:17,910
Donc, concrètement, comment nous allons
implémenter dans Java Script

21
00:01:17,910 --> 00:01:19,870
est comme suit.

22
00:01:19,870 --> 00:01:24,630
Ce que nous allons faire est, nous pouvons
prendre une taille de la population,

23
00:01:24,630 --> 00:01:30,050
une taille de population normale
au fil du temps, vous savez, disons 1000.

24
00:01:30,050 --> 00:01:32,260
Voilà un certain nombre nous avons travaillé
avec précédemment dans le code.

25
00:01:32,260 --> 00:01:33,440
Et puis nous allons dire

26
00:01:33,440 --> 00:01:36,790
chaque 10e génération,
nous avons cet effondrement,

27
00:01:37,730 --> 00:01:43,570
où la population s'effondre
à dire 10 personnes,

28
00:01:43,740 --> 00:01:47,640
puis immédiatement après,
une génération remonte,

29
00:01:48,250 --> 00:01:51,900
puis le même schéma se répète
encore et encore.

30
00:01:52,740 --> 00:01:57,210
Chaque 10e génération
de la population s'effondre

31
00:01:57,210 --> 00:01:59,080
à 10 personnes.

32
00:01:59,740 --> 00:02:02,070
Encore une fois, nous continuons
à faire cela.

33
00:02:02,080 --> 00:02:05,750
Chaque 10e génération
de la population s'effondre

34
00:02:05,750 --> 00:02:07,370
à 10 personnes,

35
00:02:07,370 --> 00:02:11,500
puis va immédiatement remonter
à 1000 générations.

36
00:02:11,690 --> 00:02:17,470
Donc, essentiellement, nous avons ici
neuf générations à cette taille de la population

37
00:02:17,470 --> 00:02:19,600
et une génération
à cette taille de la population,

38
00:02:19,600 --> 00:02:24,300
et encore, neuf générations
à cette taille de la population et ainsi de suite.

39
00:02:25,610 --> 00:02:31,280
Maintenant, nous pouvons déjà
établir ce que les attentes seraient,

40
00:02:31,280 --> 00:02:35,320
aussi bien connaître les tailles de population
efficaces, la moyenne harmonique,

41
00:02:35,320 --> 00:02:37,050
et non pas le savoir.

42
00:02:37,050 --> 00:02:38,350
Si nous ne saurions pas,

43
00:02:38,350 --> 00:02:42,480
nous prenons simplement la moyenne
globale de ces chiffres, non?

44
00:02:42,480 --> 00:02:45,890
Donc, nous aurions tout simplement
prendre la moyenne de, vous savez,

45
00:02:45,890 --> 00:02:51,410
9 fois mille populations,
mille individus, excusez-moi,

46
00:02:51,560 --> 00:02:58,210
plus 1 fois ces 10 individus
divisés par 10,

47
00:02:58,590 --> 00:03:02,490
et que bien sûr est 9010 divisé par 10,

48
00:03:02,490 --> 00:03:05,760
qui est 901 et donc, vous le savez,

49
00:03:05,760 --> 00:03:08,240
cette tendance ne cesse
de se répéter et se répéter.

50
00:03:08,240 --> 00:03:13,830
Ainsi, la taille moyenne
de la population est de 901.

51
00:03:13,830 --> 00:03:15,890
Maintenant à la question c'est quoi

52
00:03:16,390 --> 00:03:18,770
sachant que la taille effective
de la population

53
00:03:18,770 --> 00:03:21,930
doit en effet être calculée
non pas comme celui-ci,

54
00:03:21,930 --> 00:03:24,320
ce serait la mauvaise attente,

55
00:03:24,320 --> 00:03:25,970
mais de la moyenne harmonique.

56
00:03:25,970 --> 00:03:27,820
Quelle est la moyenne harmonique?

57
00:03:28,520 --> 00:03:32,490
Eh bien, si vous branchez
ces chiffres ici,

58
00:03:34,240 --> 00:03:39,800
Vous savez, 10 plus de 1 sur 1000
plus 1 sur 1000

59
00:03:39,800 --> 00:03:43,290
plus 1 plus de 1000 neuf fois,
puis plus 1 plus de 10,

60
00:03:43,290 --> 00:03:45,250
et vous pouvez le faire
dans une calculatrice,

61
00:03:45,250 --> 00:03:52,000
vous obtenez quelque chose
qui est autour de 92 individus.

62
00:03:52,890 --> 00:03:54,590
Et je ne vais pas le faire maintenant,

63
00:03:54,590 --> 00:03:56,640
Je suis convaincu que vous pouvez
le faire vous-même.

64
00:03:56,640 --> 00:04:02,950
Mais si vous prenez la moyenne harmonique
de 9 fois 1000 et 1 fois 10,

65
00:04:02,950 --> 00:04:06,520
la moyenne harmonique sera
d'environ 92 personnes.

66
00:04:06,520 --> 00:04:12,260
Donc, encore une fois, une jolie dramatique,
vous le savez, mismatch ici,

67
00:04:12,260 --> 00:04:16,480
nous allons voir que la population
se comporte

68
00:04:16,480 --> 00:04:22,910
comme si cela était une population
de 92 personnes, et non 901.

69
00:04:23,030 --> 00:04:28,500
Et donc nous allons maintenant implémenter
dans Script Java en utilisant nos simulations.

70
00:04:28,890 --> 00:04:31,660
Donc, ceci c'est où nous avons
terminé la dernière fois,

71
00:04:32,000 --> 00:04:35,450
lorsque nous avons examiné notre code et
développé notre code de dérive génétique,

72
00:04:35,450 --> 00:04:37,870
nous avons eu la taille de la population
ici à 2000

73
00:04:37,870 --> 00:04:41,730
et nous avons exécuté les simulations
pour 20.000 générations,

74
00:04:41,730 --> 00:04:44,360
juste pour montrer que, même si nous avons
de plus grandes tailles population

75
00:04:44,830 --> 00:04:46,200
avec suffisamment de temps,

76
00:04:46,200 --> 00:04:49,230
ils finiront par perdre
toute variation génétique.

77
00:04:49,230 --> 00:04:52,540
Alors revenons au code ici
qui a créé cela.

78
00:04:53,110 --> 00:04:55,290
Voici donc notre code
et ce que je vais faire ici est,

79
00:04:55,290 --> 00:04:59,460
Je vais remettre ceci, la taille de
la population de 1000 personnes

80
00:04:59,910 --> 00:05:03,150
et les générations, en effet, à 100.

81
00:05:03,150 --> 00:05:06,170
Et nous voulons que ce soit,
vous le savez, une liste génération,

82
00:05:06,170 --> 00:05:07,640
une liste des simulations.

83
00:05:09,350 --> 00:05:13,260
Par ailleurs, il y a une chose
qui me dérange ici sur ce code.

84
00:05:14,150 --> 00:05:15,970
C'est ce numéro ici.

85
00:05:16,410 --> 00:05:20,540
Je n'aime pas les numéros codés en dur
s'il est logique de les éviter.

86
00:05:20,540 --> 00:05:23,310
Ceci est un où, voyons voir.

87
00:05:23,310 --> 00:05:26,720
Celui-ci définit le nombre
de simulations que nous exécutons.

88
00:05:26,910 --> 00:05:30,510
Vous savez, parfois, vous pouvez
exécuter un seul, peut-être cinq,

89
00:05:30,510 --> 00:05:31,560
peut-être dix, peut-être une centaine.

90
00:05:32,270 --> 00:05:34,990
Donc, je n'aime pas que cela soit
codé en dur ici,

91
00:05:34,990 --> 00:05:36,580
nous allons le remplacer par une variable.

92
00:05:37,030 --> 00:05:39,240
Juste, vous savez,
juste pour nettoyer le code un peu,

93
00:05:39,240 --> 00:05:43,380
Je vais remplacer ce 10 ici
avec des simulations variables,

94
00:05:43,690 --> 00:05:45,960
et ensuite en conséquence, bien sûr,

95
00:05:46,130 --> 00:05:49,260
apparaît quelque part
je dois définir cette variable.

96
00:05:49,260 --> 00:05:52,370
Je veux dire, je pourrais aussi
la définir dans le code quelque part,

97
00:05:52,370 --> 00:05:55,310
mais je tiens à garder toutes mes variables
soigneusement dans un seul endroit.

98
00:05:55,310 --> 00:05:58,690
Donc, je vais simplement dire
<i> simulations est égal à 10 </ i>.

99
00:05:58,690 --> 00:06:01,770
Et rien ne changera ici,
mais il est maintenant,

100
00:06:02,050 --> 00:06:04,360
vous savez, plus agréable,
parce que j'ai quelque

101
00:06:04,360 --> 00:06:07,810
J'ai supprime une valeur codée en dur.

102
00:06:07,990 --> 00:06:09,380
Et bien sûr, vous pouvez argumenter,

103
00:06:09,380 --> 00:06:11,800
"Bon, d'accord, mais nous avons toutes
sortes de valeurs codées en dur.

104
00:06:11,800 --> 00:06:13,890
Je veux dire, sont-ils tous mauvais?
Non, ils ne sont pas.

105
00:06:13,890 --> 00:06:16,100
Je veux dire, il est vraiment à vous

106
00:06:16,190 --> 00:06:19,270
combien de la flexibilité que vous voulez
avoir dans votre code.

107
00:06:19,270 --> 00:06:21,160
Ici, vous savez, par exemple, je dirais,

108
00:06:21,160 --> 00:06:24,520
"Eh bien, nous allons tirer
deux allèles N chaque fois,"

109
00:06:24,520 --> 00:06:26,340
parce que nous allons nous
en tenir à ce modèle déployé

110
00:06:26,460 --> 00:06:28,330
pour le reste du cours.

111
00:06:28,330 --> 00:06:31,270
Donc, cela n'a rien que
je vais jamais vouloir changer

112
00:06:31,270 --> 00:06:33,960
et il peut rester codé en dur.

113
00:06:34,120 --> 00:06:37,440
Il est vraiment une question de ce qui est
ce que vous voulez changer par la suite.

114
00:06:37,990 --> 00:06:40,710
Simulation,
Les chiffres de certaines simulations

115
00:06:40,710 --> 00:06:42,160
je vais probablement vouloir
éventuellement changer,

116
00:06:42,160 --> 00:06:46,890
donc je préfère avoir cela comme une variable
plutôt que d'une valeur codée en dur.

117
00:06:47,240 --> 00:06:50,280
D'accord. Alors maintenant,
au sujet de la taille des populations

118
00:06:50,280 --> 00:06:52,680
et sur les tailles de population efficaces.

119
00:06:52,740 --> 00:06:57,600
Nous avons juste développé cette intuition
que si nous avons maintenant 1000

120
00:06:57,830 --> 00:06:59,860
une taille de population de 1000 individus

121
00:06:59,860 --> 00:07:04,690
et nous changeons cela à 10
chaque 10e génération,

122
00:07:04,960 --> 00:07:09,390
alors nous devrions avoir une taille
effective de la population de 92 ans.

123
00:07:10,050 --> 00:07:12,800
Mais ceci est quelque chose
que nous pensons étre vrai,

124
00:07:13,470 --> 00:07:16,940
et il est ce que j'appelle
la prédiction non averti.

125
00:07:17,590 --> 00:07:20,880
La prédiction non averti serait ici
de simplement prendre la moyenne,

126
00:07:21,060 --> 00:07:25,470
que nous savons maintenant conduirait
à plus quelque chose comme 901.

127
00:07:26,230 --> 00:07:30,500
Et donc, tout le concept de vous  montrez ceci

128
00:07:30,500 --> 00:07:33,210
et de parler de la taille
des populations efficaces,

129
00:07:33,210 --> 00:07:35,420
que si nous ne calculons
pas cela correctement,

130
00:07:35,420 --> 00:07:37,940
alors nos prévisions seront très mal.

131
00:07:37,940 --> 00:07:39,110
Et qu'est-ce que je veux dire par là?

132
00:07:39,110 --> 00:07:42,000
Eh bien, si nous etions mal informés
maintenant simplement.

133
00:07:42,000 --> 00:07:45,260
et nous pensons que la moyenne
est de seulement 901 personnes

134
00:07:45,260 --> 00:07:48,330
et c'est, par conséquent,
la taille effective de la population,

135
00:07:48,330 --> 00:07:49,670
ce serait tout à fait tort,

136
00:07:49,670 --> 00:07:53,300
parce que si nous avons mis cela
ici à 901 et nous économisons cela,

137
00:07:53,300 --> 00:07:57,250
et nous revenons au navigateur
pour regarder à cette simulation,

138
00:07:58,010 --> 00:07:59,400
c'est ce que cela ressemblerait, non?

139
00:07:59,560 --> 00:08:04,180
Voici ce que la dérive génétique
fera à la variation génétique

140
00:08:04,180 --> 00:08:09,840
d'une population de 901 personnes
de plus d'une centaine de générations,

141
00:08:09,840 --> 00:08:11,980
et vous pouvez recharger
cette une couple de fois

142
00:08:11,980 --> 00:08:14,850
et vous pouvez voir
c'est un modèle assez uniforme.

143
00:08:14,850 --> 00:08:17,560
Un peu de diversions ici
parmi les simulations,

144
00:08:17,560 --> 00:08:20,270
mais en gros, je veux dire, no, certainement

145
00:08:20,890 --> 00:08:25,280
aucune des simulations ici a perdu
la totalité de leur variation génétique,

146
00:08:25,280 --> 00:08:29,510
ils ont perdu un peu, mais il est,
vous le savez, encore assez faible.

147
00:08:29,510 --> 00:08:31,130
Maintenant, si nous revenons au code

148
00:08:31,130 --> 00:08:34,370
et nous regardons la dynamique
d'une population

149
00:08:34,370 --> 00:08:37,810
qui a 92 personnes, d'accord?

150
00:08:37,810 --> 00:08:41,320
Donc, nous allons simplement mettre cela à 92,
je vais mettre cela et nous revenir en arrière

151
00:08:41,510 --> 00:08:43,120
et rechargez cette.

152
00:08:43,630 --> 00:08:47,230
Cela semble assez différent.
Il semble très différent, en fait.

153
00:08:47,230 --> 00:08:53,270
Vous pouvez voir de nombreuses fois
les populations perdront toute variation génétique,

154
00:08:53,270 --> 00:08:57,690
ou obtenir très près de lui, et il ne
se produit pas tout le temps mais,

155
00:08:57,690 --> 00:08:59,770
vous le savez, il arrive très souvent.

156
00:08:59,770 --> 00:09:02,950
Dans tous les cas, vous pouvez voir que
ce schéma est très différent

157
00:09:02,950 --> 00:09:04,260
de l'autre motif, non?

158
00:09:04,260 --> 00:09:06,380
Ce motif, alors, jetez un oeil à ce modèle,

159
00:09:06,380 --> 00:09:08,800
parce que je pense que
ce que nous allons à peu près le voit,

160
00:09:08,800 --> 00:09:11,760
c'est la taille de la population
de 92 individus.

161
00:09:12,210 --> 00:09:16,270
Ceci est la prévision éclairée
si vous connaissez la moyenne harmonique.

162
00:09:16,270 --> 00:09:19,270
Je vais rapidement régler
à nouveau ce retour à 901,

163
00:09:19,270 --> 00:09:24,520
de sorte que vous pouvez
comparer, 901 ressemble à ceci, très,

164
00:09:24,520 --> 00:09:26,040
très différent.

165
00:09:26,970 --> 00:09:28,250
Donc, nous allons aller
de l'avant maintenant

166
00:09:28,250 --> 00:09:32,110
et mettre en œuvre la taille effective de
la population et les goulets d'étranglement.

167
00:09:33,030 --> 00:09:37,780
Donc, nous avons mis en N ici à 1000
parce que c'est là où nous commençons,

168
00:09:37,780 --> 00:09:41,420
et maintenant ce que nous devons
faire est que nous devons faire deux choses.

169
00:09:41,420 --> 00:09:44,890
La première chose est que
nous devons nous assurer

170
00:09:44,890 --> 00:09:48,110
que nous avons en fait
une taille de population variable.

171
00:09:48,320 --> 00:09:54,980
Et puis, étant donné que, nous avons
besoin de mettre en œuvre une fonction

172
00:09:54,980 --> 00:09:58,770
qui calcule l'efficacité globale
de la taille de la population.

173
00:09:58,900 --> 00:10:00,810
Donc, je vais en fait commencer par cela,

174
00:10:00,810 --> 00:10:03,320
avec le calcul de la taille
de la population

175
00:10:03,320 --> 00:10:04,460
parce que nous pouvons le faire

176
00:10:04,460 --> 00:10:07,430
même lorsque la taille
de la population reste constante.

177
00:10:08,320 --> 00:10:12,980
Mais je dois planifier pour le fait que
j'ai des tailles de population variables.

178
00:10:12,980 --> 00:10:18,370
Je dois donc stocker toutes
les valeurs de N de

179
00:10:18,370 --> 00:10:22,370
comme ils changent au fil
du temps en quelque sorte,

180
00:10:22,370 --> 00:10:25,950
de sorte qu'à la fin, je peux alors
calculer correctement

181
00:10:26,160 --> 00:10:28,040
la taille de la population affective

182
00:10:28,040 --> 00:10:31,270
compte tenu de tous ces différents N
est dans les simulations.

183
00:10:31,270 --> 00:10:34,810
Donc, si je dois stocker
plusieurs valeurs quelque part,

184
00:10:34,810 --> 00:10:39,720
nous savons maintenant quel outil
utiliser pour cela, à savoir une course.

185
00:10:39,990 --> 00:10:42,040
Donc, je vais mettre en place
un autre tableau ici

186
00:10:42,040 --> 00:10:46,710
que je vais appeler la taille
de la population, d'accord?

187
00:10:46,710 --> 00:10:49,426
<I> population_sizes </ i>

188
00:10:49,426 --> 00:10:52,970
Je vais initialiser cela comme
un tableau vide au début.

189
00:10:53,110 --> 00:10:57,180
Donc, cela est le tableau maintenant
où je vais stocker

190
00:10:57,180 --> 00:11:00,280
toutes les tailles de population
à chaque génération.

191
00:11:00,630 --> 00:11:03,360
Alors, où vais-je faire cela? Voyons voir.

192
00:11:03,360 --> 00:11:06,680
Où puis-je exécuter chaque génération?

193
00:11:07,010 --> 00:11:10,870
Eh bien, il est fondamentalement ici, à droite,
ce que j'appelle la fonction de la prochaine génération.

194
00:11:10,870 --> 00:11:13,280
C'est alors une nouvelle génération arrive.

195
00:11:13,280 --> 00:11:16,290
Donc, juste avant que
j'appele cette fonction,

196
00:11:16,300 --> 00:11:20,320
Je vais pousser la taille actuelle
de la population dans ce tableau.

197
00:11:20,510 --> 00:11:25,530
Donc, je vais simplement dire
la taille des populations poussent.

198
00:11:25,530 --> 00:11:29,690
Donc, <i> .Le bouton </ i> et puis
je vais pousser cette valeur de N.

199
00:11:30,010 --> 00:11:33,160
Maintenant, encore une fois, à l'heure actuelle,
cette valeur de N en fait ne change jamais

200
00:11:33,160 --> 00:11:36,040
parce que nous ne changeons pas partout.

201
00:11:36,040 --> 00:11:37,840
Nous allons un peu,

202
00:11:37,840 --> 00:11:39,000
mais dans tous les cas,

203
00:11:39,000 --> 00:11:41,310
tout ce que nous avons stocké ici
maintenant en N

204
00:11:41,310 --> 00:11:45,030
est poussé dans cette taille
de la population tableau.

205
00:11:45,820 --> 00:11:47,940
Ainsi donc, à la fin de tout cela,

206
00:11:47,940 --> 00:11:51,120
J'ai ce tableau avec toutes
les tailles de population,

207
00:11:51,120 --> 00:11:55,830
et maintenant je peux calculer
la moyenne harmonique de cet ensemble de nombres.

208
00:11:56,470 --> 00:11:58,700
Alors, comment dois-je faire cela?
Bon tu sais,

209
00:11:58,700 --> 00:12:00,330
cela ressemble à quelque chose
que, vous le savez,

210
00:12:00,330 --> 00:12:03,500
est logique d'encapsuler dans une fonction.

211
00:12:04,200 --> 00:12:06,320
Donc, ce que je vais faire ici c'est,

212
00:12:06,320 --> 00:12:09,450
Je vais calculer cette taille effective
de la population.

213
00:12:09,450 --> 00:12:13,780
Tout d'abord, je vais définir
cette variable ici, <i> Ne, </ i>

214
00:12:14,400 --> 00:12:17,000
et puis je voudrais dire,
vous savez quoi,

215
00:12:17,000 --> 00:12:19,540
calculer cela pour moi dans une fonction.

216
00:12:19,540 --> 00:12:22,710
Je vais remettre cette fonction, le tableau
de toutes les tailles de population

217
00:12:23,080 --> 00:12:27,400
et je voudrais obtenir en retour
de la fonction de cette valeur correcte

218
00:12:27,400 --> 00:12:31,130
pour la taille de la population,
et puis je vais stocker dans Ne.

219
00:12:31,130 --> 00:12:35,500
Donc, je vais appeler une fonction ici
que je, en fait, ne l'ai pas encore défini,

220
00:12:35,500 --> 00:12:37,130
mais je le ferai en une seconde,

221
00:12:37,130 --> 00:12:43,030
et je vais appeler cette fonction
<i> effective_population_size </ i>.

222
00:12:44,230 --> 00:12:47,140
On n'a pas encore défini cela,
donc ce code ne fonctionnerait pas,

223
00:12:47,140 --> 00:12:49,230
mais je vais le faire dans une seconde.

224
00:12:49,370 --> 00:12:52,240
Maintenant, cette fonction doit
prendre un ensemble de valeurs,

225
00:12:52,240 --> 00:12:55,610
puis calculer correctement
la taille effective de la population.

226
00:12:55,610 --> 00:12:58,810
Donc, je dois passer, l'ensemble
des valeurs,

227
00:12:58,810 --> 00:13:03,610
et un ensemble de valeurs est ici
simplement la taille de la population.

228
00:13:03,900 --> 00:13:07,890
Maintenant, d'accord,
ce serait cette fonction ressembler?

229
00:13:07,890 --> 00:13:09,440
Comment ai-je besoin
de définir cette fonction?

230
00:13:09,440 --> 00:13:11,160
D'accord, je vais le faire ici.

231
00:13:11,160 --> 00:13:15,680
Je vais appeler cette fonction, comme
je le disais, la taille effective de la population.

232
00:13:17,020 --> 00:13:20,570
Ça va prendre un argument,

233
00:13:20,570 --> 00:13:23,540
donc je dois définir ici
le paramètre en conséquence,

234
00:13:23,540 --> 00:13:25,870
Je vais appeler cette <i> all_Ns </ i>

235
00:13:25,870 --> 00:13:29,250
parce que ce qu'il est, il est de toutes
les tailles de population, non?

236
00:13:29,250 --> 00:13:32,640
Et ici, entre accolades maintenant,
je peux définir le corps de la fonction.

237
00:13:33,140 --> 00:13:37,620
Voici donc ma tâche, et étant donné
un ensemble de nombres dans un tableau,

238
00:13:37,620 --> 00:13:39,560
Je dois retourner la moyenne harmonique.

239
00:13:39,560 --> 00:13:42,520
Nous savons maintenant comment
calculer la moyenne harmonique.

240
00:13:42,520 --> 00:13:48,480
Nous savons qu'il est
une division du nombre total

241
00:13:48,480 --> 00:13:51,760
des chiffres que nous avons
dans ce <i> all_Ns </ i>

242
00:13:52,020 --> 00:13:56,610
puis divisée par la somme
de l'univers de valeurs.

243
00:13:56,610 --> 00:13:57,960
Nous avons donc un dénominateur.

244
00:13:57,960 --> 00:14:03,020
Dénominateur est très facile,
pour le dénominateur nous devons calculer,

245
00:14:03,020 --> 00:14:05,330
il est la somme de l'univers de valeurs.

246
00:14:05,330 --> 00:14:06,710
Donc, je vais faire est d'abord

247
00:14:06,710 --> 00:14:11,380
et je vais juste définir
une variable ici, <i> dénominateur </ i>

248
00:14:12,650 --> 00:14:15,550
et je vais initialiser cela à zéro.

249
00:14:15,550 --> 00:14:18,070
Donc, maintenant ce que je voudrais
faire est que je voudrais itérer

250
00:14:18,070 --> 00:14:22,150
sur toutes les valeurs ici,
tous les éléments de ce tableau,

251
00:14:23,110 --> 00:14:29,330
puis à l'inverse de tous
ces éléments pour le dénominateur,

252
00:14:29,330 --> 00:14:31,230
créant de ce fait la somme.

253
00:14:31,230 --> 00:14:33,340
Donc, itérant plus dans un tableau.

254
00:14:33,340 --> 00:14:34,730
Nous savons maintenant comment faire,

255
00:14:34,730 --> 00:14:36,200
nous utilisons un <i> pour </ i> boucle.

256
00:14:36,200 --> 00:14:40,190
Donc, <i> [var i = 0; </ i>

257
00:14:40,190 --> 00:14:46,720
puis nous disons, comme
condition <i> i & lt; all_Ns.length </ i>

258
00:14:46,720 --> 00:14:49,940
parce que vous pouvez rappeler,
la propriété length ici est--

259
00:14:49,940 --> 00:14:55,140
est la valeur raconte essentiellement
le nombre d'éléments, il y a dans ce tableau.

260
00:14:55,140 --> 00:14:56,770
Donc, nous pouvons l'utiliser.

261
00:14:56,770 --> 00:15:00,410
Et puis bien sûr, comme toujours,
<i> i = i + 1 </ i>

262
00:15:00,410 --> 00:15:02,190
Nous avons besoin d'incrémenter
ici <i> i </ i>

263
00:15:02,190 --> 00:15:05,240
sinon nous nous retrouvons
avec une boucle infinie.

264
00:15:07,040 --> 00:15:08,350
Alors, que dois-je?

265
00:15:08,350 --> 00:15:11,570
Je besoin de ces éléments,

266
00:15:11,780 --> 00:15:16,280
de sorte que l'élément actif à chaque
itération est le nom de réseau

267
00:15:16,280 --> 00:15:18,510
puis index <i> i </ i>,

268
00:15:18,510 --> 00:15:22,770
i à partir de 0 et tout le chemin
à la longueur -1

269
00:15:22,770 --> 00:15:25,530
comme nous avons discuté
dans la leçon de tableau.

270
00:15:25,530 --> 00:15:29,050
Je voudrais, je l'ai dit, j'ai besoin de
l'inverse de cela,

271
00:15:29,050 --> 00:15:33,220
il est donc <i> 1 / all_Ns [i] </ i>

272
00:15:33,220 --> 00:15:36,200
et maintenant, je dis que
j'ai besoin de la somme de tout cela.

273
00:15:36,200 --> 00:15:38,500
Donc ce que je vais faire
est que je vais simplement dire,

274
00:15:38,500 --> 00:15:43,980
le dénominateur égal
dénominateur plus, plus cela ici,

275
00:15:43,990 --> 00:15:46,560
et je vais mettre cela entre parenthèses

276
00:15:48,260 --> 00:15:52,000
juste pour la simplicité visuelle.

277
00:15:52,000 --> 00:15:56,860
Et cela crée maintenant la somme
de tout l'univers de valeurs ici,

278
00:15:56,860 --> 00:16:00,570
en prenant simplement les valeurs de l'univers,
l'ajout n'aurait pas actuellement

279
00:16:00,570 --> 00:16:04,110
un dénominateur et stocker
cette nouvelle valeur dans le dénominateur.

280
00:16:04,110 --> 00:16:06,110
Nous avons fait cela avant,

281
00:16:06,110 --> 00:16:08,820
la création d'une somme
d'une boucle, puis, à la fin ici

282
00:16:08,820 --> 00:16:11,870
J'ai dans le dénominateur

283
00:16:11,870 --> 00:16:14,700
la somme de toutes
ces valeurs de l'univers.

284
00:16:14,700 --> 00:16:19,560
Et puis, je peux très simplement
retourner cette moyenne harmonique,

285
00:16:19,560 --> 00:16:21,060
donc ça va être:

286
00:16:21,060 --> 00:16:24,160
<I> all_Ns.length </ i>.

287
00:16:24,160 --> 00:16:26,990
Donc, c'est un certain nombre
d'éléments que nous avons dans le tableau,

288
00:16:27,320 --> 00:16:30,340
et diviser par le dénominateur.

289
00:16:30,340 --> 00:16:32,970
Donc, je vais juste copier ceci ici,
dénominateur.

290
00:16:34,780 --> 00:16:38,360
Et nous ne nous soucions pas de précision,

291
00:16:38,360 --> 00:16:39,930
une valeur inter-partage sera bien,

292
00:16:39,930 --> 00:16:44,050
certains allant simplement au radeau
ici en rond de mathématiques.

293
00:16:44,050 --> 00:16:47,790
D'accord, un tour de mathématiques
de cette division

294
00:16:48,220 --> 00:16:50,380
ça va être suffisamment précis.

295
00:16:51,130 --> 00:16:53,580
Donc, cela est maintenant
cette fonction qui calcule

296
00:16:53,580 --> 00:16:55,570
la taille  effective population, la  taille de population,

297
00:16:55,570 --> 00:16:58,060
étant donné un ensemble, dans ce cas ici

298
00:16:58,060 --> 00:17:02,290
dans le tableau de
ces tailles population au fil du temps.

299
00:17:03,630 --> 00:17:05,040
Donc, juste une chose.

300
00:17:05,040 --> 00:17:08,800
Entre parenthèses,
vous avez peut-être réalisé

301
00:17:08,800 --> 00:17:11,700
et correctement souligné
tout en regardant cela,

302
00:17:11,700 --> 00:17:16,770
que je fais maintenant ce pour l'ensemble

303
00:17:16,770 --> 00:17:18,960
des simulations.

304
00:17:19,430 --> 00:17:22,740
Je ne fait pas la mise en place
d'un tableau à 2 dimensions

305
00:17:22,740 --> 00:17:25,640
où nous calculpns la taille de la population

306
00:17:25,640 --> 00:17:28,780
pour chacune de ces simulations
de manière indépendante.

307
00:17:28,780 --> 00:17:30,430
Nous pourrions bien sûr faire cela,

308
00:17:30,430 --> 00:17:34,760
mais parce que ce sera exactement
le même nombre pour chaque simulation,

309
00:17:34,760 --> 00:17:38,980
J'ajoute juste tous les Ns au-dessus
de toutes les simulations,

310
00:17:38,980 --> 00:17:41,980
alors je divisant en conséquence par,

311
00:17:41,980 --> 00:17:44,390
donc je vais prendre cela en compte,

312
00:17:44,390 --> 00:17:46,270
Mais, vous savez,
cela n'a pas d'importance.

313
00:17:46,270 --> 00:17:48,040
Vous pouvez, si vous voulez,

314
00:17:48,040 --> 00:17:52,420
vous pouvez calculer ceci indépendamment
pour chaque simulation

315
00:17:52,420 --> 00:17:54,990
au moyen d'un tableau à 2 dimensions,
mais il ne sera pas nécessaire

316
00:17:54,990 --> 00:17:58,330
parce que ça va être le même numéro
pour chaque simulation,

317
00:17:58,330 --> 00:18:00,380
mais c'est juste entre parenthèses.

318
00:18:00,700 --> 00:18:02,270
Maintenant que nous avons cela,

319
00:18:02,270 --> 00:18:04,270
nous allons voir si cela
fonctionne réellement.

320
00:18:04,270 --> 00:18:07,150
Nous ne changeons pas l'Ns pour le moment,

321
00:18:07,150 --> 00:18:09,540
nous avons pas vraiment
mis en œuvre les goulots d'étranglement.

322
00:18:09,540 --> 00:18:12,870
Mais nous avons tout mis en place
pour que nous puissions le faire

323
00:18:12,900 --> 00:18:14,160
et nous allons voir que si cela fonctionne.

324
00:18:14,160 --> 00:18:17,080
Donc, ici-bas, dans la légende

325
00:18:17,080 --> 00:18:21,740
Je ne vais pas montrer N.
fait, je vais maintenant montrer Ne.

326
00:18:21,740 --> 00:18:26,030
Et ici, l'étiquette puis aurait correctement
pour être la taille effective de la population.

327
00:18:26,030 --> 00:18:28,690
Et je vais abréger cela pour
les questions spatiales.

328
00:18:29,140 --> 00:18:32,800
Donc, nous allons enregistrer cela et revenir
en arrière et voir si cela a effectivement fonctionné.

329
00:18:32,800 --> 00:18:36,790
Donc, nous allons revenir au navigateur,
recharger ceci. Oui, en effet cela fonctionne

330
00:18:37,680 --> 00:18:42,140
Nous avons donc 1000 comme la taille effective
de la population qui est correct,

331
00:18:42,660 --> 00:18:45,550
parce que nous ne pourrons jamais
changer la taille de la population.

332
00:18:45,550 --> 00:18:49,730
Il est une constante de 1000
et la moyenne harmonique,

333
00:18:50,060 --> 00:18:54,340
Cependant de nombreux numéros
de milliers seront toujours exactement mille.

334
00:18:54,470 --> 00:18:57,270
Bon donc cela fonction bien, excellent travail.

335
00:18:57,270 --> 00:19:01,850
Donc, ce que nous pouvons maintenant faire est
de mettre en œuvre effectivement les goulots d'étranglement.

336
00:19:01,850 --> 00:19:04,200
Nous allons faire cela dans
la prochaine session. On se verra là bas.

