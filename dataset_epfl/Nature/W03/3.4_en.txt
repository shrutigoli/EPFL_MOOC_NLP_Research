Welcome back nature in code 
We're in Chapter 3 this is lecture four.
In this video we're going to finish our coin tossing example.
So this is the code and that we developed so far and as we saw this works great.
It uses math random to essentially implement a fair coin tosser.
Now, what this does here, right, is it flips 10 coins and then it simply reports on how many heads and tails came up.
Now, What I'd like to do is, I'd like to wrap this whole thing in a function.
A function that when executed basically flips 10 coins and then reports back whether the event that we would like to observe, namely, 8 heads and 2 tales did indeed happen.
And then we can call this function many many times and then calculate how often this particular event happened and how often it didn't.
So, let's go ahead and do this.
So what I'm gonna do here is,
I'm gonna wrap this whole thing here now into function and I'm gonna call this function now into a function and I'm gonna call this function toss coins.
Okay, toss coins.
No parameters.
So curly brackets.
So basically, this will be the entire function body.
So I'm gonna cut this and move it up here.
Okay, so I'm just gonna make sure 
I got everything correctly indented, just for esthetic purposes.
All right.
So now you can see this whole code that we developed in the last lecture is now wrapped within this function called toss coins and we can simply now call this function and execute this code.
All right.
But to achieve the goal that I set out in the beginning of this lecture,
I need to change a few things.
So number one, we can get rid of those console lock here we don't need that for the moment.
What we'd like to do though is after this code here is executed we our heads and tails variables contain the values of how often heads came, that came up and how often tales came up and so now would like to basically say, you know, did this particular event happened, namely.
That 8 heads came up and two tales.
So we can now , simply say if, so here now after the 4 loop
Okay,
So 4 loop closes here if at this point now heads equals 8 then it did happen. Then indeed 8 times heads came up and 2 times tales.
We don't need to check for 2 times tales because it's clear that this happened if heads equals to 8,
I'll talk about this condition in a second, but for the time being, let's simply say if that is the case, then I'm going to return a particular value from this function, namely true.
And we'll talk about this as well.
If not, okay, so if this didn't happen so else well I'm gonna do is I'm going to return false.
All right, and this is all within this function, right.
So this function if you call it. if you execute it sets of these variables and these variables are now local variables in the local scope of this function and then it executes this iteration this loop throws essentially 10 fair coins keeps count keeps track of the heads and tails, and then at the end, if it says, well, okay, if we had exactly 8 heads. that I'm gonna return true and terminate this function because return always terminate the function.
If that's not the case.
I'm gonna return false and terminate the function.
Okay, so what is this here, so this is a very, a very important operator.
Okay. It's the equality operator.
So basically you're comparing 2 values and you're checking whether their equal.
Now it does use a double equal sign here and that's very important and it may be in fact the number one beginner mistake in JavaScript.
You can see here we have an equal sign and I spent some time explaining this in the first few lectures of this course that this is really the assignment operator.
This is not to be thought of as an equation.
It is simply an assignment operator where we say into this variable tales I assign the value zero.
This operator cannot be used to check for equality.
Okay, that's very,very important
I'm gonna repeated this equal sign is not meant to check for equality.
If you wanna check for equality.
This is the one that you use.
The double equal sign.
Now just a bit of a spoiler is something that we're gonna do and talk about in the next lecture.
There is also a triple equal sign and whether this triple equal sign or this double equal sign should be used.
He is probably the content of maybe 
100 million blogs and webpages discussing which one is better now, we don't have time to discuss this in great detail.
I'm going to explain the difference in the next lecture.
For our purposes and for the purpose of this course
I'm gonna use this double equal sign because that's also a standard in many other programming languages.
But I'll explain this difference in another lecture.
But the key point here really is don't use the single equal sign because the single equal sign is an assignment operator.
The signs of value to a variable whereas the double equal sign or if you will, at least 2 equal signs.
That's when you use for for equality checks. so if heads equals 8 and I'm just spending a few minutes on this because I'm afraid, I know that you're gonna make this mistake.
If you're a beginner in fact I occasionally make this a mistake to this day.
So it's a common mistake to make, don't worry about it but I want you to know that this is a source of of many mistakes, specifically for beginners.
All right, so if heads equals 8 then were gonna return true otherwise we're gonna return false.
So what is true.
And what is this false.
Well, this is actually now the 3rd type of variable that we encounter in JavaScript.
So far we've encountered 2 types, namely simply numbers okay
10, 0, 0.5 and so on.
Another variable type that we encountered was that of a string.
Remember using the double quote or single quote simply a string of characters and now we have a 3rd type and that is the so-called boolean and the boolean can either be true or false.
Only one of those 2 options.
And these are the only 2 correct ways of spelling those values in JavaScript.
Okay, True or False.
Good.
Now what we can do now that we defined this function,
I'm gonna delete this line here.
We can actually call it.
So we could simply call this function toss coins and it would now return true if in this coin tossing experiment 8 heads came up and it would return false.
If that's not the case.
So indeed, what we can do now is we can call this function many many times and then basically keep track of how often true was returned.
In other words, how often we did indeed throw 8 heads and two tails
So, let's go ahead and do this below here.
So I'm gonna do again right I do something many many times, namely I'm gonna call this function many many times.
So I'm gonna use 4 loop.
Okay.
So first,
I'm gonna define how many repeats
I wanna perform here.
So I'm gonna define this variable of repeats
I'm gonna set it to let's say 100,000.
Okay, and then I'm going to
I keep track of how often true will be returned with this counter variable.
That I'm gonna set to zero.
Now let's implement the loop.
Okay and you know now exactly how we're implementing the loop okay.
So I'm gonna have this initializer While I equals zero
Here I'm gonna say I smaller than the number of repeats.
And then of course the increments by one in order to avoid infinite loops.
Alright, So what do I want to do in this case 10,000 times or actually lives to 100,000 times.
Well, what I'd like to do is I would like to call this function toss coins.
Okay.
Now if this were all I did then it which is simply close the coins
Which it would do 10 times and would do that 100,000 times, so it would run 100,000 of these coin tossing experiments.
But I wouldn't keep track of anything so I need to store this variable this return value somewhere.
And then I need to somehow understand what just happened.
So whatever it is toss coins returns which is either true or false.
I'm gonna store it in a variable that I'm gonna call.
Well, let's call it desired outcome.
Because it is essentially the desired outcome.
Whether that is true or false.
Whether this is really, hasn't desired outcomes of of 8 heads or not.
So this function will get called the return value true or false will be stored in this here.
And now I can simply check for the the value of this desired outcome variable.
So I can simply say if desired outcome
And now I could simply say if it equal to true then can then indeed we just threw 
10 points and 8 times heads came up.
So this is, yeah, right.
It came it happened the way we wanted it to happen so I'm gonna up to counter by one. Counter equals counter plus one and else I'm gonna do nothing, so there's no else here I don't needs to have an else.
I could ofcourse have an else and then essentially do nothing but that's useless going to get rid of it and other thing, all these if and else statements right there
Based on conditions.
So if a certain condition is true if math random smaller than or equal to.5 or here if heads equals 
8 or here if desired outcome equals true they all evaluate to something that's either true or false.
They in fact evaluate who boolean value and so this is in fact redundant.
You can leave it if you want to, but we can also just right if desired outcome because this will evaluate if desired how comes equal true will evaluate in the boolean anyways.
And we already have a boolean.
This is already either true or false.
So you can simply say if desired outcome.
And then we can essentially run this now we're calculating everything. but we're not out putting anything into the console so let's.
Let's go ahead and do this right, let's go ahead and same console log you know I'm just gonna say getting 8 heads.
And 2 tails.
Now.
I'm gonna have to calculate the percentage here which I'm gonna do it in a minute and I'm gonna say percent of the time came.
So how do I calculate what they have to put here.
How do I calculate this percentage well it's simply the number of counter or the value that we have encountered as the counter keeps track of how often this happens in deed.
Okay, divided by the total number that we ran this experiment which is stored in repeats and that gives us the fraction and in order to turn a fraction into a percentage value of course we need to and simply multiply this by 100.
All right.
So now we have everything set up we can save this and we can move over to the browser and see if this is working.
So here's our console still showing the results from the previous heads and tails coin tossing some gonna reload this.
And here it says getting 8 heads to tales 4.4-3 8 and some rounding error.
Percent of the time.
So this is in fact pretty close to 
4.3 9% which we calculated in an earlier lecture.
Let me reload this 4.3-5 1-4.3-6 9-4.3-6 and so on, so you can see is sort of hovers around this value with a little bit of variance of course. seems to be pretty fast.
So let's go back to our code and up this here by an order of magnitude of care, have 100,000 here from just going to add another 0, and again whether you can do it this or not depends a bit on the speed of of the machine, you're running this on here seem to be pretty fast gonna save this gonna move over and gonna reload this 
4.3-9 3-6 of us is now very close 4.4-0.
You can see it's still hovering 4.4-3 a bit around this value but but the variance around this value is now little smaller so we're closer now as we would expect because we're running many many more experiments.
Let me go back once again there seems to be some room to increase this number by another order of magnitude 7 now running this 10 million times.
Okay.
Save this and I'm gonna reload this and that's probably gonna take a couple of seconds.
But you can see here 4.4 oh 2 so this is very close to 4.39
4.3-9 see we get here.
3rd time.
4.3-9 so you can see this now comes up 4.3-9 pretty much all the time, were very close to it,
I don't increase it by yet another order of magnitude.
There will probably take too long, but you can see this code actually now works and it's now a great example because you look at this code you now actually using many many elements of of the 
JavaScript you're using functions you're using variables using math random you're using iteration you using control flow if else you using strings booleans numbers you're using all kinds of things so so great work if you, if you've got the done and if things were correctly here and also what we, what we've done here is essentially to implement this coin tosser where were with with a very simple JavaScript code basically demonstrating that if you throw 10 fair coins then heads come up 8 times and tails 2 times in 4.39% of the experiments.
Now you could of course argue well it seems like a bit of a waste of time to implement this Code to get this resolved because we got it mathematically you know much faster and of course I couldn't argue with the logic.
He would be absolutely right, but that wasn't the point here.
The point is really to show how you can do this because, as we'll see as we go on in the course will implement many fairly complex simulations that will be very hard to track exactly with mathematical tools now here to the coin tossing example is a simple example.
And this is something you can track very easily with simple math. but many of the models that we're gonna run you won't you wouldn't be able to do this but you now have all the tools in place to basically implement this stochastic 
Lee in your browser.
Using Java script so great, great work a great job.
If you got to hear and if everything is working now if everything's still feels a little and unclear at times.
You know, don't worry.
This is completely normal.
You're learning programing and I'm throwing a lot of material here at you but will used to same concepts over and over and over and over again and it's it's completely normal that it may feel of a bit confusing, you'll get the hang of it in due time.
All right.
This concludes this video we just implemented coin tosser using a stochastic simulation in JavaScript and using all kinds of concepts is a great work if you made it to here in the following lecture room I'll go a little bit deeper into some of the technical details of the new concepts that we learned here so I'll see you there.
