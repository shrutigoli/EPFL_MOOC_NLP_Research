1
00:00:03,370 --> 00:00:04,783
Bienvenue. La Nature, dans le code.

2
00:00:04,783 --> 00:00:06,776
Nous sommes dans le chapitre trois,
leçon cinq.

3
00:00:06,776 --> 00:00:09,350
Dans cette leçon,
nous allons aller un peu plus profond

4
00:00:09,350 --> 00:00:13,100
dans certains des détails techniques
que nous avons effleuré un peu

5
00:00:13,100 --> 00:00:15,260
au cours des deux dernières leçons.

6
00:00:15,260 --> 00:00:18,490
Et puis une fois que nous avons trié
sur ces détails importants,

7
00:00:18,490 --> 00:00:20,220
dans la prochaine session, nous allons
continuer

8
00:00:20,220 --> 00:00:22,590
et nous allons utiliser toutes
ces connaissances

9
00:00:22,590 --> 00:00:25,670
que nous avons accumulé
au cours des dernières vidéos

10
00:00:25,670 --> 00:00:29,760
à mettre en œuvre effectivement
la dérive génétique en JavaScript.

11
00:00:29,760 --> 00:00:33,030
Alors, voici notre code que nous avons
développé dans la dernière leçon.

12
00:00:33,810 --> 00:00:35,110
Il est déjà tout à fait ...

13
00:00:35,110 --> 00:00:37,210
Vous savez, je ne dirais pas compliqué,

14
00:00:37,210 --> 00:00:41,130
mais assez complexe,
en particulier pour quelqu'un

15
00:00:41,130 --> 00:00:45,340
qui peut juste commencé la programmation,

16
00:00:45,340 --> 00:00:48,020
mais j'espère que jusqu'a là tout est en grande

17
00:00:48,020 --> 00:00:50,470
à peu près ce clair
ce que nous faisons ici.

18
00:00:51,370 --> 00:00:53,270
Je veux donc parler un peu plus

19
00:00:53,270 --> 00:00:59,090
au sujet de ces énoncés conditionnelles
ici et flux de contrôle en général,

20
00:00:59,090 --> 00:01:03,090
parce que le flux de contrôle est
extrêmement important dans la programmation.

21
00:01:03,090 --> 00:01:04,510
Et il sera important

22
00:01:04,510 --> 00:01:08,090
pour toutes les choses que nous allons
faire dans ce cours.

23
00:01:08,090 --> 00:01:09,380
Donc ce que je vais faire est,

24
00:01:09,380 --> 00:01:14,080
je vais maintenant tout simplement,
vous savez,sélectionner tout le code ici,

25
00:01:14,080 --> 00:01:18,760
et je vais le supprimer puis
l'enregistrer comme un nouveau fichier.

26
00:01:19,680 --> 00:01:25,960
et je vais nommer cet <i> control_flow </ i>.

27
00:01:27,510 --> 00:01:28,510
Très bien.

28
00:01:28,510 --> 00:01:32,110
Et donc je peux l'utiliser
pour élaborer un nouveau code

29
00:01:32,110 --> 00:01:35,040
pour expliquer certains de ces principes.

30
00:01:35,040 --> 00:01:38,400
Maintenant, nous allons
faire quelque chose comme ça.

31
00:01:38,400 --> 00:01:41,160
Permettez-moi de définir
une variable. Je vais l'appeler <i> x </ i>.

32
00:01:41,160 --> 00:01:47,350
et nous allons simplement attribuer
un numéro aléatoire à cette variable.

33
00:01:47,710 --> 00:01:49,790
Alors maintenant, nous pourrions
faire quelque chose comme ...

34
00:01:49,790 --> 00:01:54,180
Eh bien, si cet <i> x </ i> est,
disons, plus petit que ...

35
00:01:55,850 --> 00:01:57,680
0,3 par exemple,

36
00:01:58,230 --> 00:02:04,630
alors nous allons dire,
<i> console.log </ i>,

37
00:02:05,860 --> 00:02:09,950
Nous allons en fait de mettre
une déclaration disant: <i> x </ i>,

38
00:02:11,320 --> 00:02:14,100
et je vais utiliser
la concaténation de chaîne,

39
00:02:14,100 --> 00:02:20,290
juste pour changer de temps en temps
la façon dont nous mettons des chaînes.

40
00:02:20,290 --> 00:02:24,060
Parfois, vous faites cela avec des virgules,
parfois avec plus comme concaténation,

41
00:02:25,200 --> 00:02:30,200
<I> x </ i> est inférieur à 0,3.

42
00:02:31,170 --> 00:02:36,640
Juste mettre essentiellement
une déclaration disant que ce nombre

43
00:02:36,640 --> 00:02:38,790
est maintenant inférieur à 0,3.

44
00:02:38,790 --> 00:02:43,560
Et si <i> x </ i> est en effet pas
inférieur à 0,3,

45
00:02:43,560 --> 00:02:47,560
eh bien, je vais sortir <i> console.log </ i>

46
00:02:49,710 --> 00:02:52,350
<I> x </ i>, d'accord,

47
00:02:53,045 --> 00:02:59,355
est supérieur ou égal à 0,3.

48
00:03:01,270 --> 00:03:02,540
Ce qu'il sera évidemment.

49
00:03:02,540 --> 00:03:09,370
Je veux dire qu'il est soit inférieur à 0,3
ou il est supérieur ou égal à 0,3.

50
00:03:09,370 --> 00:03:15,620
Et nous pouvons enregistrer cela
et maintenant aller sur le navigateur

51
00:03:15,620 --> 00:03:17,780
et ouvrez le fichier ici ...

52
00:03:19,410 --> 00:03:24,490
<I> control.flow.html </ i>,

53
00:03:25,300 --> 00:03:28,660
et nous verrions ici dans la console

54
00:03:28,660 --> 00:03:34,960
ces déclarations, 0,52 et ainsi de suite,
est plus grand / égal à 0,3.

55
00:03:34,960 --> 00:03:36,200
C'est, bien sûr, correct.

56
00:03:36,200 --> 00:03:39,590
Je vais recharger cela,
recharger à nouveau ...

57
00:03:39,590 --> 00:03:42,170
Permettez-moi de voir si je peux obtenir ici
un nombre qui est plus petit ici.

58
00:03:42,170 --> 00:03:45,880
0,14 est inférieur à 0,3.

59
00:03:45,880 --> 00:03:47,870
D'accord, donc cela fonctionne.

60
00:03:47,870 --> 00:03:50,670
Maintenant, nous allons revoir
à nouveau le code.

61
00:03:52,100 --> 00:03:57,100
Maintenant, disons par exemple,
je voudrais tester,

62
00:03:57,100 --> 00:03:59,490
non seulement pour ces deux conditions,
mais pour un tiers.

63
00:03:59,980 --> 00:04:02,510
Maintenant, disons que je voudrais
faire quelque chose comme suit,

64
00:04:02,520 --> 00:04:06,220
Je voudrais faire quelque chose,

65
00:04:06,220 --> 00:04:10,070
si <i> x </ i> est en effet inférieur à 0,3,

66
00:04:10,070 --> 00:04:12,050
mais je voudrais faire une autre chose

67
00:04:12,050 --> 00:04:16,580
si <i> x </ i> est supérieure à 0,3,
mais inférieure à 0,6.

68
00:04:16,580 --> 00:04:19,240
Donc, quelque part dans
une gamme intermédiaire.

69
00:04:19,240 --> 00:04:23,050
Et puis finalement,
si cela ne soit le cas alors,

70
00:04:23,050 --> 00:04:27,610
donc si <i> x </ i> est supérieur à 0,6,
je voudrais faire une troisième chose.

71
00:04:27,610 --> 00:04:29,530
Alors, comment puis-je faire cela?

72
00:04:29,530 --> 00:04:32,060
Eh bien, c'est là où
ce <i> else / if </ i> est très pratique.

73
00:04:32,060 --> 00:04:36,160
Donc, nous ne pouvons ici ajouter une autre
condition en utilisant cet <i> else / if </ i>.

74
00:04:36,160 --> 00:04:38,120
<I> else / if </ i> ...

75
00:04:38,120 --> 00:04:40,080
Et donc la condition serait ici,

76
00:04:41,910 --> 00:04:45,700
<I> x </ i> est inférieur à 0,6.

77
00:04:47,080 --> 00:04:50,400
Et encore une fois, des accolades,
même structure que d'habitude.

78
00:04:50,400 --> 00:04:53,190
Voici donc la déclaration correcte serait:

79
00:04:53,190 --> 00:04:59,570
<I> console.log </ i>, d'accord?
<I> x </ i> est ...

80
00:04:59,570 --> 00:05:01,360
Whoops. Faux.

81
00:05:03,380 --> 00:05:10,540
est certainement supérieur ou égal à 0,3,

82
00:05:10,540 --> 00:05:13,580
sinon nous serions ici.

83
00:05:15,210 --> 00:05:21,280
Mais il est aussi petit que 0,6.

84
00:05:21,280 --> 00:05:24,800
Donc, nous sommes maintenant
dans cette gamme intermédiaire

85
00:05:24,800 --> 00:05:28,380
et puis finalement si vous arrivez
maintenant à cette<I> else / if </ i> ici,

86
00:05:28,380 --> 00:05:32,450
ainsi, <i> x </ i> est maintenant
supérieur à 0,6,

87
00:05:32,450 --> 00:05:34,860
nous devons donc adapter ceci ici.

88
00:05:34,860 --> 00:05:36,480
Donc, je vais enregistrer ceci.

89
00:05:37,400 --> 00:05:40,880
je vais aller brièvement sur
le navigateur pour voir si cela a fonctionné.

90
00:05:40,880 --> 00:05:46,140
Je vais recharger ceci. Donc, 0,6 est
en effet supérieure ou égale à 0,6.

91
00:05:46,140 --> 00:05:50,100
0,2 est en effet inférieur à 0,3,

92
00:05:50,100 --> 00:05:52,820
et nous allons voir si nous pouvons
obtenir une certaine valeur intermédiaire.

93
00:05:52,820 --> 00:05:56,710
Ici, nous sommes, 0,46
est supérieur ou égal à 0,3

94
00:05:56,710 --> 00:06:00,300
et il est également plus petit que 0,6.

95
00:06:00,300 --> 00:06:02,420
Donc, cela fonctionne.

96
00:06:02,420 --> 00:06:06,950
Et la façon de lire ceci
est fondamentalement en JavaScript

97
00:06:06,950 --> 00:06:09,170
évaluera cette déclaration.

98
00:06:09,170 --> 00:06:13,630
S'il est vrai il va exécuter
tout ce que vous avez ici,

99
00:06:13,630 --> 00:06:16,470
puis fini avec tout ce bloc
<i> if / else </ i>.

100
00:06:16,470 --> 00:06:17,540
D'accord ?

101
00:06:17,540 --> 00:06:20,640
Donc, une fois l'un d'eux évalue un vrai,
nous avons terminé.

102
00:06:21,990 --> 00:06:23,500
Si ce n'est pas vrai,

103
00:06:23,500 --> 00:06:25,360
alors il va tout simplement
passer à la suivante.

104
00:06:25,360 --> 00:06:27,630
<I> Else </ i>, donc ce n'est pas vrai,

105
00:06:27,630 --> 00:06:30,460
mais il permettra de tester
une autre condition.

106
00:06:30,460 --> 00:06:32,290
Maintenant, si cela est vrai,

107
00:06:32,290 --> 00:06:36,570
il exécutera tout simplement ce code,
puis soit fini avec elle.

108
00:06:37,970 --> 00:06:40,150
Et encore, si cela n'est pas vrai,

109
00:06:40,150 --> 00:06:43,610
puis il ira à la finale <i> autre </ i>
et dire d'accord,

110
00:06:43,610 --> 00:06:45,810
Je vais maintenant exécuter ce code ici,

111
00:06:45,810 --> 00:06:48,160
car aucun de ces conditions était vrai.

112
00:06:48,160 --> 00:06:50,340
Et vous pouvez le voir ici
dans le navigateur, à droite?

113
00:06:50,340 --> 00:06:53,360
Nous avons jamais plusieurs lignes
comme résultats.

114
00:06:53,360 --> 00:06:56,890
C'est toujours une seule ligne, toujours.

115
00:06:56,890 --> 00:07:00,130
Donc, ils sont traités
de façon indépendante

116
00:07:00,130 --> 00:07:03,840
en ce sens que l'un d'eux est evaluée.

117
00:07:03,840 --> 00:07:06,660
Une fois que l'un d'eux est évaluée
comme étant vraie,

118
00:07:06,660 --> 00:07:12,060
tout se termine et vous passer au prochain

119
00:07:13,030 --> 00:07:16,970
bloc de code qui est en dehors
de cette construction<i> if / else </ i>

120
00:07:17,680 --> 00:07:19,620
et donc c'est un concept important.

121
00:07:19,620 --> 00:07:22,900
Nous utiliserons ceci assez souvent
lorsque nous lançons un nombre aléatoire,

122
00:07:22,900 --> 00:07:25,720
et nous disons, eh bien,si elle est
dans cette gamme, puis faire "a",

123
00:07:25,720 --> 00:07:29,360
si elle est dans cette autre gamme ici,
puis faire "b",

124
00:07:29,360 --> 00:07:32,250
et si elle est dans cette troisième gamme,
puis faire "c",

125
00:07:32,250 --> 00:07:34,700
et potentiellement nous avons
même un quatrième et un cinquième.

126
00:07:34,700 --> 00:07:39,190
Ensuite, nous pouvons empiler beaucoup
de ces <i> else / ifs </ i> si nous voulons,

127
00:07:40,410 --> 00:07:42,640
mais c'est juste une considération
importante.

128
00:07:42,640 --> 00:07:44,640
Donc, il y a aussi ce <i> else / if </ i>.

129
00:07:44,640 --> 00:07:47,030
La plupart du temps,
vous verrez simplement <i> ifs </ i>.

130
00:07:47,620 --> 00:07:49,730
En outre, souvent,
vous voyez <i> if / else </ i>,

131
00:07:49,730 --> 00:07:52,240
mais parfois vous le voyez combiné
comme ça.

132
00:07:52,460 --> 00:07:55,010
<I> si </ i>, <i> else / if </ i>,
puis <i> else </ I>

133
00:07:57,070 --> 00:08:00,780
Maintenant, un autre concept important
que j'ai mentionné dans la leçon précédente

134
00:08:00,780 --> 00:08:02,730
est celui de ces accolades.

135
00:08:03,320 --> 00:08:06,530
Donc, je dis qu'en principe,

136
00:08:06,530 --> 00:08:09,710
vous pouvez si vous avez
seulement une ligne après un <i> si </ i>,

137
00:08:09,710 --> 00:08:14,420
vous pouvez, en principe,
supprimer ces accolades.

138
00:08:14,420 --> 00:08:17,750
Mais je vous ai dit, vraiment encouragé,
de ne pas le faire

139
00:08:17,750 --> 00:08:22,400
et je vais vous montrer maintenant pourquoi
je vous demande de ne pas le faire.

140
00:08:22,400 --> 00:08:25,710
Donc, je vais faire encore un exemple.

141
00:08:25,710 --> 00:08:31,090
Je vais donc quitter cette ligne ici
de notre <i> x = </ i> <i> Math.random </ i>,

142
00:08:31,090 --> 00:08:33,030
et juste pour être sûr,

143
00:08:33,030 --> 00:08:36,500
je vais sortir cette valeur ici
de <i> x </ i>, d'accord.

144
00:08:36,500 --> 00:08:38,880
Juste pour que nous ayons cela
dans la console.

145
00:08:38,880 --> 00:08:40,170
D'accord.

146
00:08:40,170 --> 00:08:42,690
Alors maintenant, disons que
j'avais quelque chose comme ceci:

147
00:08:42,690 --> 00:08:48,570
Si <i> x </ i> est inférieur à 0,3,

148
00:08:48,570 --> 00:08:50,290
D'accord.

149
00:08:50,290 --> 00:08:52,120
Ensuite, je voudrais faire quelque chose.

150
00:08:52,120 --> 00:08:56,450
Par exemple, je voudrais sortir simplement
qu'il est en effet inférieur à 0,3.

151
00:08:56,450 --> 00:08:59,990
Donc, normalement, okay,
je le ferais comme ça

152
00:08:59,990 --> 00:09:02,940
puis ici avoir juste la <i>console.log</i>.

153
00:09:08,100 --> 00:09:15,160
Et puis ici, je vais mettre la valeur,
<i> x + </ i> est inférieur à 0,3

154
00:09:15,160 --> 00:09:16,720
que nous avions avant.

155
00:09:17,930 --> 00:09:19,440
Donc, ce serait évidemment fonctionnera.

156
00:09:19,440 --> 00:09:21,630
Maintenant, je pouvais faire,

157
00:09:21,630 --> 00:09:24,990
je pourrais essentiellement
maintenant supprimer ces lignes ici

158
00:09:26,870 --> 00:09:29,270
et il fonctionnera encore.

159
00:09:29,270 --> 00:09:30,930
Donc, nous allons le faire, d'accord?

160
00:09:30,930 --> 00:09:35,900
Nous allons l'enregistrer et revenir
au navigateur et le recharger.

161
00:09:35,900 --> 00:09:37,320
Nous avons donc 0,78.

162
00:09:37,320 --> 00:09:39,090
de plus, ceci n'est pas inférieur à 0,3,

163
00:09:39,090 --> 00:09:41,310
donc rien est montré ici.

164
00:09:41,310 --> 00:09:46,140
0,7, 0,91, d'accord, nous allons voir,
recharger.

165
00:09:46,140 --> 00:09:50,130
D'accord, nous avons ici un nombre
qui est en effet inférieur à 0,3,

166
00:09:50,130 --> 00:09:52,080
et nous obtenons cette déclaration.

167
00:09:52,080 --> 00:09:55,290
Vous pouvez donc voir cette condition
<i> si </ i> fonctionne,

168
00:09:55,290 --> 00:10:00,860
Cependant, cela est dangereux parce que
essentiellement ce qui se passe ici

169
00:10:00,860 --> 00:10:06,600
c'est que JavaScript ignore
les sauts de ligne et l'espace blanc

170
00:10:06,600 --> 00:10:09,500
et sera le traitera essentiellement
comme une seule ligne.

171
00:10:10,480 --> 00:10:12,990
Mais maintenant, si vous ne savez pas,

172
00:10:12,990 --> 00:10:14,280
vous pouvez penser,

173
00:10:14,280 --> 00:10:16,160
ok, donc si cette condition est vraie,

174
00:10:16,160 --> 00:10:18,820
alors cela devrait être exécuté
et vous savez quoi?

175
00:10:18,820 --> 00:10:20,310
Plus tard, vous pouvez venir

176
00:10:20,310 --> 00:10:22,430
et dire: «Hé, je veux faire quelque
chose d'autre en fait."

177
00:10:22,430 --> 00:10:25,710
Dans ce cas, je voudrais également
connecter autre chose

178
00:10:25,710 --> 00:10:30,320
ou d'exécuter quelque chose,
autre chose que vous savez.

179
00:10:30,320 --> 00:10:31,640
Quelque chose d'important.

180
00:10:31,640 --> 00:10:34,820
Ecrivons "quelque chose d'important" ici.

181
00:10:35,990 --> 00:10:37,050
D'accord.

182
00:10:37,050 --> 00:10:39,070
Alors maintenant, vous regardez
ce code et vous pensez,

183
00:10:39,070 --> 00:10:41,490
OK, si <i> x </ i> est inférieur à 0,3,

184
00:10:41,490 --> 00:10:43,650
alors nous allons sortir ce fait

185
00:10:43,650 --> 00:10:46,090
et puis nous allons aussi sortir
quelque chose importante.

186
00:10:46,090 --> 00:10:47,730
D'accord, nous allons enregistrer ceci.

187
00:10:47,730 --> 00:10:53,750
Passez sur 0,74, boom,
quelque chose d'important.

188
00:10:53,750 --> 00:10:56,580
Attendez, ce n'est pas
ce qui devrait arriver.

189
00:10:56,580 --> 00:10:59,950
0,74 est évidemment
<i> pas </ i> inférieur à 0,3.

190
00:10:59,950 --> 00:11:04,150
Mais, néanmoins quelque chose d'important
est en cours de production ici.

191
00:11:04,150 --> 00:11:05,780
Alors.. Qu'est-ce qui se passe ?

192
00:11:05,780 --> 00:11:08,980
De toute évidence, ce code
est la rupture, il est défaillant.

193
00:11:08,980 --> 00:11:12,930
Il ne fait pas ce que nous pensions
qu'il ferait.

194
00:11:12,930 --> 00:11:14,170
Alors, pourquoi est-ce cela ?

195
00:11:14,170 --> 00:11:15,630
Eh bien, comme je l'ai dit,

196
00:11:15,630 --> 00:11:19,730
essentiellement JavaScript
ignore les sauts de ligne

197
00:11:19,730 --> 00:11:24,280
et d'espace blanc et il les traitera
essentiellement comme ça.

198
00:11:24,280 --> 00:11:26,330
D'accord, nous allons tout
simplement supprimer ceci,

199
00:11:26,330 --> 00:11:29,730
puis on va également supprimer ceci,
d'accord?

200
00:11:29,730 --> 00:11:32,480
Donc, tout sera exécuté un par un,

201
00:11:32,480 --> 00:11:34,460
sur une seule ligne, pour ainsi dire,

202
00:11:35,310 --> 00:11:38,090
et en fait, vous savez, pas d'espace blanc,

203
00:11:38,090 --> 00:11:41,830
mais je vais juste ajouter ceci ici
juste pour l'esthétique visuelle.

204
00:11:41,830 --> 00:11:45,810
Et maintenant vous pouvez voir pourquoi
cela fonctionne vraiment la façon dont il est

205
00:11:45,810 --> 00:11:50,010
parce que nous disons essentiellement
si <i> x </ i> est inférieur à 0,3,

206
00:11:50,010 --> 00:11:52,350
alors ce sera exécuté.

207
00:11:52,350 --> 00:11:54,390
Fin de la déclaration.

208
00:11:54,390 --> 00:12:00,540
Et maintenant cette déclaration suivante
est essentiellement indépendante de ceci

209
00:12:00,540 --> 00:12:02,860
si <i> x </ i> est inférieur à 0,3.

210
00:12:04,440 --> 00:12:07,830
Ainsi, afin d'éviter ce problème,

211
00:12:07,830 --> 00:12:13,980
s'il vous plaît suivez simplement une règle
simple: Toujours mettre les accolades.

212
00:12:13,980 --> 00:12:17,950
Et puis si vous avez quelque
chose comme ça, d'accord?

213
00:12:17,950 --> 00:12:20,850
Il est très clair ce qui se passe ici,

214
00:12:20,850 --> 00:12:23,330
si <i> x </ i> est inférieur à 0,3,

215
00:12:23,330 --> 00:12:27,690
puis tout dans ces accolades sera exécuté.

216
00:12:27,690 --> 00:12:29,570
Donc, si nous voulons enregistrer ceci,

217
00:12:32,890 --> 00:12:37,290
maintenant "quelque chose d'important" devrait
se produire parce que cela est en effet inférieur à 0,3,

218
00:12:37,290 --> 00:12:40,030
mais maintenant il ne le fait pas,
et c'est la bonne façon.

219
00:12:40,030 --> 00:12:43,400
Parce que sinon fondamentalement la façon
dont nous l'avons écrit précédemment,

220
00:12:43,400 --> 00:12:48,250
serait interprété comme ça, d'accord.

221
00:12:48,250 --> 00:12:51,570
Ce qui n'est pas du tout
ce que vous pensiez qu'il ferait.

222
00:12:51,570 --> 00:12:57,590
Donc, règle simple pour éviter cette erreur
qui peut être très difficile à trouver.

223
00:12:57,590 --> 00:12:59,090
Ne soyez pas paresseux.

224
00:12:59,090 --> 00:13:03,890
Toujours utiliser ces accolades lorsque
vous utilisez <i> control.flow. </ i>

225
00:13:05,310 --> 00:13:07,420
Maintenant, il y a une chose
que je voudrais traiter,

226
00:13:07,420 --> 00:13:10,860
et pour ce faire, nous allons simplement
se déplacer

227
00:13:10,860 --> 00:13:13,970
dans la console JavaScript.

228
00:13:13,970 --> 00:13:15,610
Nous avons donc ces conditions, à droite,

229
00:13:15,610 --> 00:13:20,360
où nous l'avons dit, si <i> x </ i>
est inférieur à 0,3 et ainsi de suite.

230
00:13:20,360 --> 00:13:21,670
Alors, comment ça marche?

231
00:13:21,670 --> 00:13:22,770
Donc en gros,

232
00:13:22,770 --> 00:13:26,010
nous avons ces opérateurs
où l'on peut comparer les valeurs.

233
00:13:26,010 --> 00:13:30,150
Ainsi, par exemple,
nous pouvons dire 3, inférieur à 4.

234
00:13:30,860 --> 00:13:37,210
Maintenant, cette expression sera évaluée
et en booléenne et bien sûr,

235
00:13:37,210 --> 00:13:38,760
c'est le Boolean <i> vrai</ i>, à droite?

236
00:13:38,760 --> 00:13:42,990
Parce que 3 est en effet inférieur à 4.

237
00:13:42,990 --> 00:13:48,300
Vous pouvez utiliser aussi 3
est inférieur ou égale à 4.

238
00:13:48,300 --> 00:13:53,210
Ceci sera évalué et bien sûr,
il sera aussi évalué comme vrai

239
00:13:53,210 --> 00:13:57,740
Vice versa, vous pouvez dire
3 est supérieur que 4.

240
00:13:57,740 --> 00:14:00,300
Et cette déclaration est clairement fausse,

241
00:14:00,300 --> 00:14:03,180
Donc ceci sera évalué comme faux.

242
00:14:03,180 --> 00:14:07,880
Similairement, vous pouvez
dire supérieur ou égale à 4.

243
00:14:07,880 --> 00:14:10,000
Ceci est bien sur faux.

244
00:14:10,000 --> 00:14:13,550
Donc il sera aussi évalué comme <i>faux</i>.

245
00:14:13,550 --> 00:14:14,650
Donc ceeu-ci sont,

246
00:14:14,650 --> 00:14:16,880
vous savez les quatre operateurs à comparer

247
00:14:16,880 --> 00:14:20,290
pour qu'une chose soit inférieure ou égale à

248
00:14:20,290 --> 00:14:23,630
et supérieure ou égale à une certaine valeur.

249
00:14:23,630 --> 00:14:29,080
Vous pouvez aussi vérifier directement
pour l'égalité avec le signe double égale.

250
00:14:30,350 --> 00:14:35,570
Donc 3 étant égale à 4,
bon cela n'est pas vrai.

251
00:14:35,570 --> 00:14:38,160
Donc nous évaluons au faux.

252
00:14:38,160 --> 00:14:40,690
D'une autre coté, 3 égale à 3,

253
00:14:40,690 --> 00:14:44,420
ce test d'égalité évaluera vrai.

254
00:14:46,190 --> 00:14:52,370
Donc il y a deux choses ici que
je veux expliquer concernant ceci.

255
00:14:52,370 --> 00:14:57,130
Deux détails importants
et je vais recharger ceci

256
00:14:57,130 --> 00:14:59,370
pour effacer la console ici.

257
00:14:59,370 --> 00:15:01,450
Donc imaginons nous avons une variable.

258
00:15:02,200 --> 00:15:07,090
Disons <i>a</i> que nous allons définir
et initialiser avec le numéro 5.

259
00:15:08,480 --> 00:15:10,190
Donc si nous,

260
00:15:11,300 --> 00:15:14,600
sortons <i>a</i> maintenant,

261
00:15:14,600 --> 00:15:16,150
nous le verrons comme 5.

262
00:15:17,040 --> 00:15:21,510
Alors disons nous avons une autre
variable que nous appellerons <i>b</i>,

263
00:15:21,510 --> 00:15:28,620
et nous initialisons cette variable comme
la <i>chaîne</i> 5 ou le caractère 5.

264
00:15:28,620 --> 00:15:31,400
Donc une chaîne est juste
un ensemble des caractères,

265
00:15:31,400 --> 00:15:33,380
il peut être une chaîne vide

266
00:15:33,380 --> 00:15:35,710
ou il peut avoir juste une caractère ici.

267
00:15:36,950 --> 00:15:38,010
D'accord.

268
00:15:38,010 --> 00:15:42,730
Et maintenant nous tapons <i>b</i>, alors
ceci sortira correctement la chaîne <i>b</i>

269
00:15:42,730 --> 00:15:45,840
parce que c'est actuelement
ce qui est stocké dans <i>b</i>.

270
00:15:45,840 --> 00:15:48,620
Maintenant ceux-ci sont de types different,

271
00:15:48,620 --> 00:15:50,920
et nous avons dit dans une autre video.

272
00:15:50,920 --> 00:15:54,450
Ceci est un nombre et ceci est une chaîne

273
00:15:54,450 --> 00:15:57,170
et en effet vous pouvez vérifier

274
00:15:57,170 --> 00:15:59,980
pour un type de variable JavaScript

275
00:15:59,980 --> 00:16:02,850
en utilisant l'operateur de saisir.

276
00:16:02,850 --> 00:16:07,740
Okay, si vous taper type <i>a</i>
et appuyer entrer,

277
00:16:07,740 --> 00:16:12,330
il vous dira que <i>a</i> en effet
stocke actuellement un numbre.

278
00:16:13,540 --> 00:16:17,710
Et si vous taper type <i>b</i>,

279
00:16:17,710 --> 00:16:22,730
alors il vous dira que <i>b</i>
stocke actuellement une chaîne.

280
00:16:23,710 --> 00:16:24,690
Donc cela est,

281
00:16:24,690 --> 00:16:26,710
vous savez, occasionnellement
un operateur pratique

282
00:16:26,710 --> 00:16:29,580
si vous n'êtes pas sûr que c'est
un nombre ou une chaîne.

283
00:16:29,580 --> 00:16:31,280
Mais voici la partie la plus importante.

284
00:16:31,280 --> 00:16:36,110
Donc j'ai dit nous pouvons faire quelque chose
comme  <i>a</i> double signe égale <i>b</i>

285
00:16:36,110 --> 00:16:43,020
et ceci vérifiera pour l'égalité
des valeurs dans ces deux variables.

286
00:16:43,020 --> 00:16:45,450
L'idée c'est que dans plusieurs
langages de programmations

287
00:16:45,450 --> 00:16:48,720
ceci en fait vous donnera
un type d'erreur,

288
00:16:48,720 --> 00:16:52,370
ou il sera troublant d'une manière
ou une autre

289
00:16:52,370 --> 00:16:57,470
parce que maintenant vous comparez
un numéro avec une chaîne

290
00:16:57,470 --> 00:17:01,410
et vous savez beaucoup de langage
de programmation vous dira immediatement,

291
00:17:01,410 --> 00:17:03,960
encore dans la forme d'une erreur
ou menance

292
00:17:03,960 --> 00:17:05,310
ceci n'est pas logique.

293
00:17:05,310 --> 00:17:08,350
Vous ne pouvez pas comparer
une chaîne avec un numéro.

294
00:17:08,350 --> 00:17:10,590
Maintenant JavaScript est plus permissif,

295
00:17:10,590 --> 00:17:12,010
il dira essentiellement,

296
00:17:12,010 --> 00:17:15,840
Okay, j'ai un 5 dans une variable
et 5 dans l'autre.

297
00:17:15,840 --> 00:17:20,850
Bon, ils sont de types differents,
mais, vous savez,

298
00:17:20,850 --> 00:17:24,860
aussi longtemps que je suis concerné
ces sont des valeurs égales.

299
00:17:24,860 --> 00:17:28,970
Donc ce qui se passe ici c'est que
JavaScript en fait

300
00:17:28,970 --> 00:17:31,970
convertit les types à être les mêmes.

301
00:17:31,970 --> 00:17:38,260
Dans ce cas il convertit la chaîne 2
à un nombre implicitement.

302
00:17:38,260 --> 00:17:41,180
Vous ne réaliserez pas que c'est le cas.

303
00:17:43,180 --> 00:17:46,800
Si vous voulez vérifier si ceux-là
sont les mêmes types,

304
00:17:46,800 --> 00:17:49,790
c'est là où vient ce signe de triple égal.

305
00:17:50,650 --> 00:17:55,580
Donc cela signifie que je ne vérifie pas
juste les valeurs d'égalités,

306
00:17:55,900 --> 00:17:59,730
je vérifie aussi l'égalité de type.

307
00:17:59,730 --> 00:18:04,790
Donc ceci évaluera au faux
parce que oui, 5 et 5,

308
00:18:04,790 --> 00:18:07,290
sont les mêmes en termes de valeurs,

309
00:18:07,290 --> 00:18:11,790
mais ces ne sont pas les mêmes types
car ils sont deux types diffèrent.

310
00:18:11,790 --> 00:18:13,980
L'une d'elle est un numéro
et l'autre est une chaîne

311
00:18:13,980 --> 00:18:16,510
Et donc il y a une sorte de débat

312
00:18:16,510 --> 00:18:21,720
sur lequel entre les deux
est un bon operateur.

313
00:18:21,720 --> 00:18:24,960
Et bien sûr, vous savez,
beaucoup d'arguments peut être faite

314
00:18:24,960 --> 00:18:28,020
que ceci est le meilleur opérateur

315
00:18:28,020 --> 00:18:30,180
car il ne compare pas seulement la valeur,

316
00:18:30,180 --> 00:18:31,480
mais aussi le type,

317
00:18:31,480 --> 00:18:35,040
mais je suis un peu de
deux esprits à ce sujet.

318
00:18:35,040 --> 00:18:40,360
Je vois évidemment le point,
mais pour toutes fins pratiques

319
00:18:40,360 --> 00:18:43,550
et certainement pour les besoins de
ce que nous faisons ici dans cette classe,

320
00:18:43,550 --> 00:18:45,870
Je vais rester avec ce double signe égal

321
00:18:45,870 --> 00:18:49,210
tout simplement parce que nous ne
serons pas confrontés à ce problème.

322
00:18:49,210 --> 00:18:51,500
Et aussi, c'est ce qui est utilisé

323
00:18:51,500 --> 00:18:53,400
dans presque tout autre langage
de programmation

324
00:18:53,400 --> 00:18:55,510
donc je vais rester avec cela,

325
00:18:55,510 --> 00:18:58,860
mais je veux que vous soyez conscient
de ce fait que cet opérateur existe.

326
00:18:59,220 --> 00:19:01,790
Qu'il vérifie non seulement
pour l'égalité des valeurs

327
00:19:01,790 --> 00:19:03,860
mais aussi des types.

328
00:19:03,860 --> 00:19:06,510
Et vous pouvez vérifier les types
en utilisant ce type d'opérateur

329
00:19:06,510 --> 00:19:10,350
et, normalement, vous savez déjà
ce que les types sont.

330
00:19:11,230 --> 00:19:14,130
La chose vraiment importante ici est
en fait pas que vous saviez,

331
00:19:14,130 --> 00:19:15,940
les discussions philosophiques

332
00:19:15,940 --> 00:19:19,060
si la double égalité ou la triple égalité est mieux.

333
00:19:19,060 --> 00:19:20,960
Le point vraiment important,

334
00:19:20,960 --> 00:19:23,730
et qui je l'ai mentionné dans
une leçon plus tôt déjà

335
00:19:23,730 --> 00:19:27,810
est que vous ne faites pas cela quand
vous voulez tester l'égalité, okay.

336
00:19:27,990 --> 00:19:31,110
Parce que si vous testez pour l'égalité,
ceci ne  le fera pas.

337
00:19:31,110 --> 00:19:33,240
Ceci est l'opérateur d'affectation,

338
00:19:33,240 --> 00:19:38,050
vous attribuez maintenant la valeur qui est
stockée dans <i> b </ i> dans <i> a </ i>

339
00:19:38,050 --> 00:19:40,110
ce n'est pas du tout ce que vous vouliez,

340
00:19:40,110 --> 00:19:41,960
si vous voulez tester l'égalité.

341
00:19:41,960 --> 00:19:46,490
Donc, assurez-vous de ne pas
utiliser ceci pour un contrôle d'égalité

342
00:19:46,490 --> 00:19:48,690
mais vous utilisez un de ceux-ci.

343
00:19:48,690 --> 00:19:52,070
Je vais continuer à utiliser
ceci pour le reste de ce cours.

344
00:19:52,070 --> 00:19:53,910
Soyez conscient que cela existe

345
00:19:53,910 --> 00:19:57,540
il suffit de ne pas faire cela
si vous voulez faire un test d'égalité.

346
00:19:57,540 --> 00:19:58,610
Très bien.

347
00:19:58,610 --> 00:20:00,080
Donc ceci conclut cette vidéo.

348
00:20:00,080 --> 00:20:01,860
Nous avons appris sur les différents types.

349
00:20:01,860 --> 00:20:04,140
Nous avons vu qu'il ya trois types
pour le moment.

350
00:20:04,140 --> 00:20:07,620
Nous avons des chiffres,
des booléens et des chaînes.

351
00:20:07,620 --> 00:20:11,300
Il existe d'autres types que
nous apprenons plus tard dans le cours.

352
00:20:11,300 --> 00:20:15,540
Nous avons également examiné
quelques-unes des subtilités de flux de contrôle

353
00:20:15,540 --> 00:20:19,200
et maintenant nous sommes
tout à fait parfaitement équipé

354
00:20:19,200 --> 00:20:22,770
à mettre en œuvre effectivement
la dérive génétique en JavaScript.

355
00:20:22,770 --> 00:20:24,950
Et nous allons commencer à faire
cela dans la vidéo suivante

356
00:20:24,950 --> 00:20:26,330
et à bientôt !

