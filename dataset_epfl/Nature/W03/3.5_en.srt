1
00:00:03,370 --> 00:00:04,783
Welcome back.
Nature, In Code.

2
00:00:04,783 --> 00:00:06,776
We're in chapter three, lecture five.

3
00:00:06,776 --> 00:00:09,350
In this lecture, we're going to go
a little bit deeper

4
00:00:09,350 --> 00:00:13,100
into some of the technical details
that we brushed over a little bit

5
00:00:13,100 --> 00:00:15,260
in the past couple of lectures.

6
00:00:15,260 --> 00:00:18,490
And then once we've sorted out
those important details,

7
00:00:18,490 --> 00:00:20,220
in the next lecture
we're going to go ahead

8
00:00:20,220 --> 00:00:22,590
and we're going to use
all of this knowledge

9
00:00:22,590 --> 00:00:25,670
that we've accumulated 
over the past few videos

10
00:00:25,670 --> 00:00:29,760
to actually implement
genetic drift in JavaScript.

11
00:00:29,760 --> 00:00:33,030
So here's our code that we
developed in the last lecture.

12
00:00:33,810 --> 00:00:35,110
It's already quite...

13
00:00:35,110 --> 00:00:37,210
You know, I wouldn't say complicated,

14
00:00:37,210 --> 00:00:41,130
but fairly complex,
specifically for someone

15
00:00:41,130 --> 00:00:45,340
who may just get started 
with programming,

16
00:00:45,340 --> 00:00:48,020
but I hope so far
everything is by and large

17
00:00:48,020 --> 00:00:50,470
roughly clear what we're doing here.

18
00:00:51,370 --> 00:00:53,270
So I want to talk a little bit more

19
00:00:53,270 --> 00:00:59,090
about these conditional statements here 
and control flow in general

20
00:00:59,090 --> 00:01:03,090
because control flow is incredibly 
important in programming.

21
00:01:03,090 --> 00:01:04,510
And it will be important

22
00:01:04,510 --> 00:01:08,090
for all the things
that we'll be doing in this course.

23
00:01:08,090 --> 00:01:09,380
So what I'm going to do is,

24
00:01:09,380 --> 00:01:14,080
I'm now simply going to, you know,
select all the code here,

25
00:01:14,080 --> 00:01:18,760
and I'm going to delete it
and then save this as a new file.

26
00:01:19,680 --> 00:01:25,960
and I'm going to name this <i>control_flow</i>.

27
00:01:27,510 --> 00:01:28,510
All right.

28
00:01:28,510 --> 00:01:32,110
And so I can use this
to develop new code

29
00:01:32,110 --> 00:01:35,040
to explain some of these principles.

30
00:01:35,040 --> 00:01:38,400
Now let's do something like this.

31
00:01:38,400 --> 00:01:41,160
Let me define a variable.
I'm going to call it <i>x</i>.

32
00:01:41,160 --> 00:01:47,350
and we're simply going to assign
a random number to this variable.

33
00:01:47,710 --> 00:01:49,790
So now we could do something like...

34
00:01:49,790 --> 00:01:54,180
Well, if this <i>x</i> is, say,
smaller than...

35
00:01:55,850 --> 00:01:57,680
... 0.3, for example,

36
00:01:58,230 --> 00:02:04,630
then we're going to say, <i>console.log</i>,

37
00:02:05,860 --> 00:02:09,950
We're actually going
to put out a statement saying, <i>x</i>,

38
00:02:11,320 --> 00:02:14,100
and I'm going to use string concatenation,

39
00:02:14,100 --> 00:02:20,290
just to occasionally switch
the way we put strings.

40
00:02:20,290 --> 00:02:24,060
Sometimes you do this with commas,
sometimes with plus as concatenation,

41
00:02:25,200 --> 00:02:30,200
<i>x</i> is smaller than 0.3.

42
00:02:31,170 --> 00:02:36,640
Just basically putting out a statement 
saying that this number

43
00:02:36,640 --> 00:02:38,790
is now smaller than 0.3.

44
00:02:38,790 --> 00:02:43,560
And if <i>x</i> is indeed not smaller than 0.3,

45
00:02:43,560 --> 00:02:47,560
well then I'm going to output <i>console.log</i>

46
00:02:49,710 --> 00:02:52,350
<i>x</i>, okay,

47
00:02:53,045 --> 00:02:59,355
is larger than or equal to 0.3.

48
00:03:01,270 --> 00:03:02,540
Which it obviously will be.

49
00:03:02,540 --> 00:03:09,370
I mean it's either smaller than 0.3 
or it is larger or equal to 0.3.

50
00:03:09,370 --> 00:03:15,620
And so we could save this
and we could now go over to the browser

51
00:03:15,620 --> 00:03:17,780
and open the file here...

52
00:03:19,410 --> 00:03:24,490
<i>control.flow.html</i>,

53
00:03:25,300 --> 00:03:28,660
and we would see here in the console

54
00:03:28,660 --> 00:03:34,960
these statements, 0.52 and so on,
is larger/equal to 0.3.

55
00:03:34,960 --> 00:03:36,200
That's, of course, correct.

56
00:03:36,200 --> 00:03:39,590
I'm going to reload this,
reload it again...

57
00:03:39,590 --> 00:03:42,170
Let me see if I can get here
a number that's smaller here.

58
00:03:42,170 --> 00:03:45,880
0.14 is smaller than 0.3.

59
00:03:45,880 --> 00:03:47,870
Okay, so this works.

60
00:03:47,870 --> 00:03:50,670
Now let's go over to the code again.

61
00:03:52,100 --> 00:03:57,100
Now let's say for example,
I would like to test,

62
00:03:57,100 --> 00:03:59,490
not only for these two conditions 
but for a third.

63
00:03:59,980 --> 00:04:02,510
Now, let's say I would
like to do something as follows,

64
00:04:02,520 --> 00:04:06,220
I would like to do something,

65
00:04:06,220 --> 00:04:10,070
if <i>x</i> is indeed smaller than 0.3,

66
00:04:10,070 --> 00:04:12,050
but then I would like to do another thing

67
00:04:12,050 --> 00:04:16,580
if <i>x</i> is larger than 0.3,
but smaller than 0.6.

68
00:04:16,580 --> 00:04:19,240
So somewhere in an intermediary range.

69
00:04:19,240 --> 00:04:23,050
And then finally,
if that's not the case either then,

70
00:04:23,050 --> 00:04:27,610
so if <i>x</i> is larger than 0.6,
I'd like to do a third thing.

71
00:04:27,610 --> 00:04:29,530
So how can I do this?

72
00:04:29,530 --> 00:04:32,060
Well, this is where
this <i>else/if</i> comes in handy.

73
00:04:32,060 --> 00:04:36,160
So we can just here
add another condition using this <i>else/if</i>.

74
00:04:36,160 --> 00:04:38,120
<i>else/if</i>...

75
00:04:38,120 --> 00:04:40,080
And so the condition here would be,

76
00:04:41,910 --> 00:04:45,700
<i>x</i> is smaller than 0.6.

77
00:04:47,080 --> 00:04:50,400
And again, curly brackets,
same structure as usual.

78
00:04:50,400 --> 00:04:53,190
So here the correct statement would be:

79
00:04:53,190 --> 00:04:59,570
<i>console.log</i>, okay?
<i>x</i> is...

80
00:04:59,570 --> 00:05:01,360
Whoops. Wrong.

81
00:05:03,380 --> 00:05:10,540
is certainly larger or equal to 0.3,

82
00:05:10,540 --> 00:05:13,580
otherwise we would be up here.

83
00:05:15,210 --> 00:05:21,280
But it is also smaller than 0.6.

84
00:05:21,280 --> 00:05:24,800
So we're now in this intermediary range

85
00:05:24,800 --> 00:05:28,380
and then finally if you
now get to this <i>else</i> here,

86
00:05:28,380 --> 00:05:32,450
well, the <i>x</i> is now larger than 0.6,

87
00:05:32,450 --> 00:05:34,860
so we have to adapt this here.

88
00:05:34,860 --> 00:05:36,480
So I'm going to save this.

89
00:05:37,400 --> 00:05:40,880
Just briefly going to go
over to the browser to see if it worked.

90
00:05:40,880 --> 00:05:46,140
I'm going to reload this.
So, 0.6 is indeed larger or equal to 0.6.

91
00:05:46,140 --> 00:05:50,100
0.2 is indeed smaller than 0.3,

92
00:05:50,100 --> 00:05:52,820
and let's see if we can get
some intermediary value.

93
00:05:52,820 --> 00:05:56,710
Here we are, 0.46
is larger or equal to 0.3

94
00:05:56,710 --> 00:06:00,300
and it is also smaller than 0.6.

95
00:06:00,300 --> 00:06:02,420
So this works.

96
00:06:02,420 --> 00:06:06,950
And so the way to read this
is basically first in JavaScript

97
00:06:06,950 --> 00:06:09,170
will evaluate that statement.

98
00:06:09,170 --> 00:06:13,630
If it's true it will execute
whatever you have here

99
00:06:13,630 --> 00:06:16,470
and then be done
with this whole <i>if/else</i> block.

100
00:06:16,470 --> 00:06:17,540
Okay?

101
00:06:17,540 --> 00:06:20,640
So once one of these
evaluates a true, we're done.

102
00:06:21,990 --> 00:06:23,500
If it's not true,

103
00:06:23,500 --> 00:06:25,360
then it will just move on to the next.

104
00:06:25,360 --> 00:06:27,630
<i>Else</i>, so it's not true,

105
00:06:27,630 --> 00:06:30,460
but it will test another condition.

106
00:06:30,460 --> 00:06:32,290
Now, if that is true,

107
00:06:32,290 --> 00:06:36,570
it will simply execute this code,
and then be done with it.

108
00:06:37,970 --> 00:06:40,150
And again, if that is also not true,

109
00:06:40,150 --> 00:06:43,610
then it will go to the final 
<i>else</i> and say okay,

110
00:06:43,610 --> 00:06:45,810
I'm going to now execute this code here,

111
00:06:45,810 --> 00:06:48,160
because none of these 
conditions were true.

112
00:06:48,160 --> 00:06:50,340
And you can see this here
in the browser, right?

113
00:06:50,340 --> 00:06:53,360
We never have multiple lines 
that are being output.

114
00:06:53,360 --> 00:06:56,890
It's always a single line, always.

115
00:06:56,890 --> 00:07:00,130
So these are treated independently

116
00:07:00,130 --> 00:07:03,840
in the sense that one
of them is evaluated--

117
00:07:03,840 --> 00:07:06,660
Once one of them is evaluated as true,

118
00:07:06,660 --> 00:07:12,060
the whole thing gets terminated 
and you will move to the next

119
00:07:13,030 --> 00:07:16,970
block of code that's
outside of this <i>if/else</i> construct

120
00:07:17,680 --> 00:07:19,620
and so that's an important concept.

121
00:07:19,620 --> 00:07:22,900
We'll use this quite often
where we throw a random number,

122
00:07:22,900 --> 00:07:25,720
and we say,
well, if it's in this range then do "a",

123
00:07:25,720 --> 00:07:29,360
if it's in this other range here,
then do "b",

124
00:07:29,360 --> 00:07:32,250
and if it's in this third
range then do "c",

125
00:07:32,250 --> 00:07:34,700
and potentially we
even have a fourth and a fifth.

126
00:07:34,700 --> 00:07:39,190
Then we can stack together many 
of those <i>else/ifs</i> if we want to,

127
00:07:40,410 --> 00:07:42,640
but that's just
an important consideration.

128
00:07:42,640 --> 00:07:44,640
So there's also this <i>else/if</i>.

129
00:07:44,640 --> 00:07:47,030
Most of the time you'll simply see <i>ifs</i>.

130
00:07:47,620 --> 00:07:49,730
Also, frequently, you see <i>if/else</i>,

131
00:07:49,730 --> 00:07:52,240
but sometimes you
see it combined like this.

132
00:07:52,460 --> 00:07:55,010
<i>if</i>, <i>else/if</i>, and then <i>else.</i>

133
00:07:57,070 --> 00:08:00,780
Now, another important concept
that I mentioned in the previous lecture

134
00:08:00,780 --> 00:08:02,730
is that of these curly brackets.

135
00:08:03,320 --> 00:08:06,530
So, I said that, in principle,

136
00:08:06,530 --> 00:08:09,710
you can if you
only have one line after an <i>if</i>,

137
00:08:09,710 --> 00:08:14,420
you can, in principle,
remove those curly brackets.

138
00:08:14,420 --> 00:08:17,750
But I told you,
really urged you, not to do it

139
00:08:17,750 --> 00:08:22,400
and I'm going to show you now
why I'm urging you not to do this.

140
00:08:22,400 --> 00:08:25,710
So, I'm going to again
make an example.

141
00:08:25,710 --> 00:08:31,090
So I'm going to leave
this line here of our <i>x=</i><i>Math.random</i>,

142
00:08:31,090 --> 00:08:33,030
and just to be sure,

143
00:08:33,030 --> 00:08:36,500
I'm just going to output
this value here of <i>x</i>, okay?

144
00:08:36,500 --> 00:08:38,880
Just so we have this in the console.

145
00:08:38,880 --> 00:08:40,170
Okay.

146
00:08:40,170 --> 00:08:42,690
So now let's say I had
something like this:

147
00:08:42,690 --> 00:08:48,570
If <i>x</i> is smaller than 0.3,

148
00:08:48,570 --> 00:08:50,290
Okay, 0.3?

149
00:08:50,290 --> 00:08:52,120
Then I'd like to do something.

150
00:08:52,120 --> 00:08:56,450
For example, I'd simply like to output
that it is indeed smaller than 0.3.

151
00:08:56,450 --> 00:08:59,990
So normally, right,
I would do it like this

152
00:08:59,990 --> 00:09:02,940
and then here just have the <i>console.log</i>.

153
00:09:08,100 --> 00:09:15,160
And then here I'll put the value,
<i>x +</i> is smaller than 0.3

154
00:09:15,160 --> 00:09:16,720
as we had before.

155
00:09:17,930 --> 00:09:19,440
So this would obviously work.

156
00:09:19,440 --> 00:09:21,630
Now, I could do,

157
00:09:21,630 --> 00:09:24,990
I could basically now remove 
those lines here

158
00:09:26,870 --> 00:09:29,270
and it would still work.

159
00:09:29,270 --> 00:09:30,930
So let's do this, okay?

160
00:09:30,930 --> 00:09:35,900
Let's save it and go back
to the browser and reload it.

161
00:09:35,900 --> 00:09:37,320
So we have 0.78.

162
00:09:37,320 --> 00:09:39,090
Well, this is not smaller than 0.3,

163
00:09:39,090 --> 00:09:41,310
so nothing is being shown here.

164
00:09:41,310 --> 00:09:46,140
0.7, 0.91, okay, let's see, reload.

165
00:09:46,140 --> 00:09:50,130
Okay, here we have a number
that is indeed smaller than 0.3,

166
00:09:50,130 --> 00:09:52,080
and we get this statement.

167
00:09:52,080 --> 00:09:55,290
So you can see this <i>if</i> condition works,

168
00:09:55,290 --> 00:10:00,860
however, this is dangerous
because essentially what's happening here

169
00:10:00,860 --> 00:10:06,600
is that JavaScript will ignore
the line breaks and the white space

170
00:10:06,600 --> 00:10:09,500
and will essentially treat it
as just one line.

171
00:10:10,480 --> 00:10:12,990
But now, if you don't know this,

172
00:10:12,990 --> 00:10:14,280
you may think,

173
00:10:14,280 --> 00:10:16,160
okay, so if this condition is true,

174
00:10:16,160 --> 00:10:18,820
then this should be executed
and you know what?

175
00:10:18,820 --> 00:10:20,310
Later you may come along

176
00:10:20,310 --> 00:10:22,430
and say, "Hey, I want to do
something else actually."

177
00:10:22,430 --> 00:10:25,710
In this case I would also like
to log something else

178
00:10:25,710 --> 00:10:30,320
or execute something,
something else you know.

179
00:10:30,320 --> 00:10:31,640
Something important.

180
00:10:31,640 --> 00:10:34,820
Let's just write
"something important" here.

181
00:10:35,990 --> 00:10:37,050
Okay.

182
00:10:37,050 --> 00:10:39,070
So now you look
at this code and you think,

183
00:10:39,070 --> 00:10:41,490
okay, if <i>x</i> is smaller than 0.3,

184
00:10:41,490 --> 00:10:43,650
then we'll output that fact

185
00:10:43,650 --> 00:10:46,090
and then we'll also output
something important.

186
00:10:46,090 --> 00:10:47,730
Okay, let's save this.

187
00:10:47,730 --> 00:10:53,750
Move over 0.74,
boom, something important.

188
00:10:53,750 --> 00:10:56,580
Hang on, that's not what should happen.

189
00:10:56,580 --> 00:10:59,950
0.74 is obviously <i>not</i> smaller than 0.3.

190
00:10:59,950 --> 00:11:04,150
But, nevertheless something 
important is being output here.

191
00:11:04,150 --> 00:11:05,780
So, what's going on?

192
00:11:05,780 --> 00:11:08,980
Obviously this code
is breaking, it's failing.

193
00:11:08,980 --> 00:11:12,930
It's not doing what we
thought it would do.

194
00:11:12,930 --> 00:11:14,170
So, why is that?

195
00:11:14,170 --> 00:11:15,630
Well, as I said,

196
00:11:15,630 --> 00:11:19,730
basically JavaScript
will ignore line breaks

197
00:11:19,730 --> 00:11:24,280
and white space and it will
essentially treat it like this.

198
00:11:24,280 --> 00:11:26,330
Okay, we'll simply remove this,

199
00:11:26,330 --> 00:11:29,730
and then it will also remove this, okay?

200
00:11:29,730 --> 00:11:32,480
So everything
will be executed one by one,

201
00:11:32,480 --> 00:11:34,460
on one line, so to speak,

202
00:11:35,310 --> 00:11:38,090
and in fact, you know, no white space,

203
00:11:38,090 --> 00:11:41,830
but I'm just going to add this here
just for visual esthetics.

204
00:11:41,830 --> 00:11:45,810
And so now you can see why
this is indeed working the way it is

205
00:11:45,810 --> 00:11:50,010
because we're essentially saying
if <i>x</i> is smaller than 0.3,

206
00:11:50,010 --> 00:11:52,350
then this will be executed.

207
00:11:52,350 --> 00:11:54,390
End of statement.

208
00:11:54,390 --> 00:12:00,540
And so now this next statement
basically is independent of this

209
00:12:00,540 --> 00:12:02,860
if <i>x</i> is smaller than 0.3.

210
00:12:04,440 --> 00:12:07,830
So in order to avoid this problem,

211
00:12:07,830 --> 00:12:13,980
please simply follow a simple rule:
Always put the curly brackets.

212
00:12:13,980 --> 00:12:17,950
And then if you
have something like this, okay?

213
00:12:17,950 --> 00:12:20,850
It's very clear
what's happening here

214
00:12:20,850 --> 00:12:23,330
if <i>x</i> is smaller than 0.3,

215
00:12:23,330 --> 00:12:27,690
then everything in these curly brackets
will be executed.

216
00:12:27,690 --> 00:12:29,570
So if we would save this,

217
00:12:32,890 --> 00:12:37,290
now "something important" should happen
because this is indeed smaller than 0.3,

218
00:12:37,290 --> 00:12:40,030
but now it doesn't,
and that's the correct way.

219
00:12:40,030 --> 00:12:43,400
Because otherwise basically
the way we wrote it before,

220
00:12:43,400 --> 00:12:48,250
would be interpreted like this, okay?

221
00:12:48,250 --> 00:12:51,570
Which is not at all
what you thought it would do.

222
00:12:51,570 --> 00:12:57,590
So, simple rule to avoid this mistake
which can be very, very tricky to find.

223
00:12:57,590 --> 00:12:59,090
Don't be lazy.

224
00:12:59,090 --> 00:13:03,890
Always use these curly brackets
when you use <i>control.flow.</i>

225
00:13:05,310 --> 00:13:07,420
Now, there's one more thing
I'd like to talk about,

226
00:13:07,420 --> 00:13:10,860
and to do that,
let's just move over

227
00:13:10,860 --> 00:13:13,970
into the JavaScript console.

228
00:13:13,970 --> 00:13:15,610
So we have these conditions, right,

229
00:13:15,610 --> 00:13:20,360
where we said,
if <i>x</i> is smaller than 0.3 and so on.

230
00:13:20,360 --> 00:13:21,670
So how does this work?

231
00:13:21,670 --> 00:13:22,770
So basically,

232
00:13:22,770 --> 00:13:26,010
we have these operators
where we can compare values.

233
00:13:26,010 --> 00:13:30,150
So, for example,
we can say 3, smaller than 4.

234
00:13:30,860 --> 00:13:37,210
Now, this expression will be evaluated 
and into Boolean and of course,

235
00:13:37,210 --> 00:13:38,760
this is the Boolean <i>true</i>, right?

236
00:13:38,760 --> 00:13:42,990
Because 3 is indeed smaller than 4.

237
00:13:42,990 --> 00:13:48,300
You can also use
3 is smaller than or equal to 4.

238
00:13:48,300 --> 00:13:53,210
This will be evaluated and, of course,
it will also be evaluated as true.

239
00:13:53,210 --> 00:13:57,740
Vice versa, you could say
3 is greater than 4.

240
00:13:57,740 --> 00:14:00,300
And this statement is clearly false,

241
00:14:00,300 --> 00:14:03,180
So this would be evaluated as false.

242
00:14:03,180 --> 00:14:07,880
Similarly, you can say
greater or equal to 4.

243
00:14:07,880 --> 00:14:10,000
That is, of course, also false.

244
00:14:10,000 --> 00:14:13,550
So will also be evaluated to <i>false</i>.

245
00:14:13,550 --> 00:14:14,650
So these are,

246
00:14:14,650 --> 00:14:16,880
you know the four operators to compare

247
00:14:16,880 --> 00:14:20,290
for whether something
is smaller or equal to

248
00:14:20,290 --> 00:14:23,630
and greater or equal to a certain value.

249
00:14:23,630 --> 00:14:29,080
You can also check directly for equality,
and namely using this double equal sign.

250
00:14:30,350 --> 00:14:35,570
So 3 being equal to 4,
well that's not true.

251
00:14:35,570 --> 00:14:38,160
So this will evaluate to false.

252
00:14:38,160 --> 00:14:40,690
On the other hand, 3 equals 3,

253
00:14:40,690 --> 00:14:44,420
that equality test will evaluate to true.

254
00:14:46,190 --> 00:14:52,370
Okay, so there are two things here
I'd like to explain about this.

255
00:14:52,370 --> 00:14:57,130
Two important details
and I'm just going to reload this

256
00:14:57,130 --> 00:14:59,370
so I can clear the console here.

257
00:14:59,370 --> 00:15:01,450
So imagine if we have a variable.

258
00:15:02,200 --> 00:15:07,090
Let's say <i>a</i> that we're going to define
and initialize with the number 5.

259
00:15:08,480 --> 00:15:10,190
So if we,

260
00:15:11,300 --> 00:15:14,600
now would just output <i>a</i>, yeah?

261
00:15:14,600 --> 00:15:16,150
We would see it as 5.

262
00:15:17,040 --> 00:15:21,510
Now let's say we have another variable 
there were going to call <i>b</i>,

263
00:15:21,510 --> 00:15:28,620
and we're going to initialize this variable
as the <i>string</i> 5 or the character 5, okay?

264
00:15:28,620 --> 00:15:31,400
So a string is just a set of characters,

265
00:15:31,400 --> 00:15:33,380
it can be indeed an empty string

266
00:15:33,380 --> 00:15:35,710
or it can just have one character here.

267
00:15:36,950 --> 00:15:38,010
Okay.

268
00:15:38,010 --> 00:15:42,730
And now if we type <i>b</i>, then this
would correctly output the string <i>b</i>

269
00:15:42,730 --> 00:15:45,840
because that's
what's currently stored in <i>b</i>.

270
00:15:45,840 --> 00:15:48,620
Now these are different types, right,

271
00:15:48,620 --> 00:15:50,920
as we said in another video.

272
00:15:50,920 --> 00:15:54,450
This is a number,
and this is a string,

273
00:15:54,450 --> 00:15:57,170
and indeed you can in fact check

274
00:15:57,170 --> 00:15:59,980
for a type of JavaScript variable

275
00:15:59,980 --> 00:16:02,850
by using this type of operator.

276
00:16:02,850 --> 00:16:07,740
Okay, so if you type
type of <i>a</i> and then hit enter,

277
00:16:07,740 --> 00:16:12,330
it will tell you that <i>a</i> indeed
currently stores a number.

278
00:16:13,540 --> 00:16:17,710
And if you type type of <i>b</i>,

279
00:16:17,710 --> 00:16:22,730
then it will tell you that <i>b</i> 
currently stores a string.

280
00:16:23,710 --> 00:16:24,690
So that's,

281
00:16:24,690 --> 00:16:26,710
you know, occasionally a handy operator.

282
00:16:26,710 --> 00:16:29,580
If you're not sure this is now 
a number or is this a string?

283
00:16:29,580 --> 00:16:31,280
But here's the important part.

284
00:16:31,280 --> 00:16:36,110
So I said we can do something like
<i>a</i> double equal sign <i>b</i>

285
00:16:36,110 --> 00:16:43,020
and this would now check for equality
of the values in those two variables.

286
00:16:43,020 --> 00:16:45,450
The point is that
in many programming languages

287
00:16:45,450 --> 00:16:48,720
actually this will give you now
some type of an error,

288
00:16:48,720 --> 00:16:52,370
or it would you know be confusing
in one way or another

289
00:16:52,370 --> 00:16:57,470
because essentially you are now comparing
a number with a string

290
00:16:57,470 --> 00:17:01,410
and you know most programming languages
would immediately tell you,

291
00:17:01,410 --> 00:17:03,960
again in the form
of an error or a warning,

292
00:17:03,960 --> 00:17:05,310
this doesn't make sense.

293
00:17:05,310 --> 00:17:08,350
You can't compare a string to a number.

294
00:17:08,350 --> 00:17:10,590
Now JavaScript is much more lenient,

295
00:17:10,590 --> 00:17:12,010
it will basically say,

296
00:17:12,010 --> 00:17:15,840
okay, I have a 5 in one variable
and I have a 5 in the other variable.

297
00:17:15,840 --> 00:17:20,850
Fine, they're different types,
but, you know,

298
00:17:20,850 --> 00:17:24,860
as far as I'm concerned
those are equal values.

299
00:17:24,860 --> 00:17:28,970
So what's happening here is that 
JavaScript actually implicitly

300
00:17:28,970 --> 00:17:31,970
converts the types to be the same.

301
00:17:31,970 --> 00:17:38,260
In this case it will convert the string 2
to a number implicitly under the hood.

302
00:17:38,260 --> 00:17:41,180
You won't even realize
that this is the case.

303
00:17:43,180 --> 00:17:46,800
If you want to check
whether those are also the same type,

304
00:17:46,800 --> 00:17:49,790
that's when this triple
equal sign comes in.

305
00:17:50,650 --> 00:17:55,580
So this now means I'm not only checking 
for equality of the values,

306
00:17:55,900 --> 00:17:59,730
I'm also checking
for the equality of the type.

307
00:17:59,730 --> 00:18:04,790
So this will now evaluate 
to false because yes, 5 and 5,

308
00:18:04,790 --> 00:18:07,290
are the same in terms of the values,

309
00:18:07,290 --> 00:18:11,790
but they're not the same type
because they are two different types.

310
00:18:11,790 --> 00:18:13,980
One of them is a number,
and one of them is a string.

311
00:18:13,980 --> 00:18:16,510
And so there's quite a bit of discussion

312
00:18:16,510 --> 00:18:21,720
about which of those
is the better operator.

313
00:18:21,720 --> 00:18:24,960
And of course, you know,
a lot of arguments can be made

314
00:18:24,960 --> 00:18:28,020
that this is the better operator

315
00:18:28,020 --> 00:18:30,180
because it does not only
compare the value,

316
00:18:30,180 --> 00:18:31,480
but also the type,

317
00:18:31,480 --> 00:18:35,040
but I'm a bit two minds about this.

318
00:18:35,040 --> 00:18:40,360
I obviously very much see the point
but for most intents and purposes

319
00:18:40,360 --> 00:18:43,550
and certainly for the purposes
of what we do here in this class,

320
00:18:43,550 --> 00:18:45,870
I'm going to stick
with this double equal sign

321
00:18:45,870 --> 00:18:49,210
simply because we
won't run into this problem.

322
00:18:49,210 --> 00:18:51,500
And also it is what's being used

323
00:18:51,500 --> 00:18:53,400
in almost any other programming language

324
00:18:53,400 --> 00:18:55,510
so I'm going to stick with that,

325
00:18:55,510 --> 00:18:58,860
but I want you to be aware of this fact
that this operator exists.

326
00:18:59,220 --> 00:19:01,790
That it checks not only
for the equality of the values

327
00:19:01,790 --> 00:19:03,860
but also of the types.

328
00:19:03,860 --> 00:19:06,510
And you can check the types 
using this type of operator

329
00:19:06,510 --> 00:19:10,350
and normally you actually already know
what the types are.

330
00:19:11,230 --> 00:19:14,130
The really important thing here
is actually not, you know,

331
00:19:14,130 --> 00:19:15,940
the go-on, philosophical discussions

332
00:19:15,940 --> 00:19:19,060
whether the double equal
or the triple equal is better.

333
00:19:19,060 --> 00:19:20,960
The really important point,

334
00:19:20,960 --> 00:19:23,730
and one that I mentioned
in an earlier lecture already

335
00:19:23,730 --> 00:19:27,810
is that you don't do this
when you want to test for equality, right?

336
00:19:27,990 --> 00:19:31,110
Because if you test for equality,
this won't do it.

337
00:19:31,110 --> 00:19:33,240
This is the assignment operator,

338
00:19:33,240 --> 00:19:38,050
you're now assigning the value
that's stored in <i>b</i> into <i>a</i>

339
00:19:38,050 --> 00:19:40,110
this is not at all what you wanted,

340
00:19:40,110 --> 00:19:41,960
if you want to test for equality.

341
00:19:41,960 --> 00:19:46,490
So be sure you don't use this
for an equality check

342
00:19:46,490 --> 00:19:48,690
but you use one of those.

343
00:19:48,690 --> 00:19:52,070
I'm going to keep using this
for the rest of this course.

344
00:19:52,070 --> 00:19:53,910
Be aware that this exists

345
00:19:53,910 --> 00:19:57,540
simply don't do this
if you want to do an equality test.

346
00:19:57,540 --> 00:19:58,610
All right.

347
00:19:58,610 --> 00:20:00,080
So this concludes this video.

348
00:20:00,080 --> 00:20:01,860
We learned about the different types.

349
00:20:01,860 --> 00:20:04,140
We saw that there
are three types at the moment.

350
00:20:04,140 --> 00:20:07,620
We have numbers, Booleans and strings.

351
00:20:07,620 --> 00:20:11,300
There are other types
we get to know further down the road.

352
00:20:11,300 --> 00:20:15,540
We also looked at some
of the subtleties of control flow

353
00:20:15,540 --> 00:20:19,200
and now we're completely
perfectly equipped

354
00:20:19,200 --> 00:20:22,770
to actually implement
genetic drift in JavaScript.

355
00:20:22,770 --> 00:20:24,950
And we'll start doing that
in the next video

356
00:20:24,950 --> 00:20:26,330
and I'll see you there.
