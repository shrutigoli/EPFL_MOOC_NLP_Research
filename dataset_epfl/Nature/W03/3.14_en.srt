1
00:00:03,330 --> 00:00:07,280
Welcome back: Nature, In Code. 
We're in Chapter 3, lecture 14.

2
00:00:07,280 --> 00:00:10,650
In this lecture, we'll now implement 
these ideas that we just learned

3
00:00:10,650 --> 00:00:15,570
about the Effective Population Size 
due to, for example, bottlenecks

4
00:00:15,570 --> 00:00:17,540
in our Java Script code.

5
00:00:17,770 --> 00:00:19,550
So just to recap,

6
00:00:19,550 --> 00:00:22,440
what we have here 
is the population size

7
00:00:22,440 --> 00:00:27,940
which collapses into this type
of bottleneck dynamic.

8
00:00:27,940 --> 00:00:30,350
So, this is time, 
this is the population size,

9
00:00:30,350 --> 00:00:34,680
a massive decline in population size
and then the population size recovers.

10
00:00:34,680 --> 00:00:37,620
And we learned that this has the effect--

11
00:00:37,620 --> 00:00:42,200
that the effective population size
is going to be substantially smaller

12
00:00:42,200 --> 00:00:44,390
than the actual population size.

13
00:00:44,390 --> 00:00:47,720
And we also found a way 
to calculate this namely

14
00:00:47,720 --> 00:00:53,060
simply by taking the harmonic mean 
of however many population sizes

15
00:00:53,060 --> 00:00:55,250
or generations we have--

16
00:00:55,260 --> 00:01:02,130
n over 1 over x1 
plus 1 over x2 and so on,

17
00:01:02,130 --> 00:01:05,090
plus 1 over xn,

18
00:01:05,240 --> 00:01:10,280
and so the x's here 
being the population sizes over time.

19
00:01:10,290 --> 00:01:14,070
But this is simply the definition 
of the harmonic mean.

20
00:01:14,070 --> 00:01:17,910
So, concretely, how we're going 
to implement this in Java Script

21
00:01:17,910 --> 00:01:19,870
is as follows.

22
00:01:19,870 --> 00:01:24,630
What we're going to do is, 
we can take a population size,

23
00:01:24,630 --> 00:01:30,050
a normal population size over time
of, you know, let's say 1,000.

24
00:01:30,050 --> 00:01:32,260
That's a number we worked with 
previously in the code.

25
00:01:32,260 --> 00:01:33,440
And then we're going to say

26
00:01:33,440 --> 00:01:36,790
every 10th generation 
we have this collapse,

27
00:01:37,730 --> 00:01:43,570
where the population collapses down
to say 10 individuals,

28
00:01:43,740 --> 00:01:47,640
and then immediately after, 
one generation goes back up,

29
00:01:48,250 --> 00:01:51,900
and then the same pattern 
repeats over and over again.

30
00:01:52,740 --> 00:01:57,210
Every 10th generation 
the population collapses down

31
00:01:57,210 --> 00:01:59,080
to 10 individuals.

32
00:01:59,740 --> 00:02:02,070
Again, we just keep doing this
and keep doing this.

33
00:02:02,080 --> 00:02:05,750
Every 10th generation 
the population collapses down

34
00:02:05,750 --> 00:02:07,370
to 10 individuals,

35
00:02:07,370 --> 00:02:11,500
and then immediately 
goes back up to 1,000 generations.

36
00:02:11,690 --> 00:02:17,470
So essentially, here we have 
nine generations at this population size

37
00:02:17,470 --> 00:02:19,600
and one generation 
at this population size,

38
00:02:19,600 --> 00:02:24,300
and again, nine generations 
at this population size and so on.

39
00:02:25,610 --> 00:02:31,280
Now we can already establish 
what the expectations would be,

40
00:02:31,280 --> 00:02:35,320
both knowing the effective
population sizes, the harmonic mean,

41
00:02:35,320 --> 00:02:37,050
and not knowing it.

42
00:02:37,050 --> 00:02:38,350
If we wouldn't know it,

43
00:02:38,350 --> 00:02:42,480
we would simply take the mean 
overall these numbers, right?

44
00:02:42,480 --> 00:02:45,890
So we would simply take 
the mean of, you know,

45
00:02:45,890 --> 00:02:51,410
9 times a thousand populations-- 
a thousand individuals, excuse me,

46
00:02:51,560 --> 00:02:58,210
plus 1 time these 10 individuals
divided by 10,

47
00:02:58,590 --> 00:03:02,490
and that of course 
is 9,010 divided by 10,

48
00:03:02,490 --> 00:03:05,760
that is 901 and so we--
you know,

49
00:03:05,760 --> 00:03:08,240
this pattern keeps repeating
and repeating.

50
00:03:08,240 --> 00:03:13,830
So the average population size is 901.

51
00:03:13,830 --> 00:03:15,890
Now to question is what--

52
00:03:16,390 --> 00:03:18,770
knowing that the effective population size

53
00:03:18,770 --> 00:03:21,930
indeed has to be calculated not like this,

54
00:03:21,930 --> 00:03:24,320
this would be the wrong expectation,

55
00:03:24,320 --> 00:03:25,970
but from the harmonic mean.

56
00:03:25,970 --> 00:03:27,820
What is the harmonic mean?

57
00:03:28,520 --> 00:03:32,490
Well, if you plug these numbers in here,
so you'd have--

58
00:03:34,240 --> 00:03:39,800
You know, 10 over 1 over 1,000
plus 1 over 1,000

59
00:03:39,800 --> 00:03:43,290
plus 1 over 1,000 nine times, 
and then plus 1 over 10,

60
00:03:43,290 --> 00:03:45,250
and you can do this in a calculator,

61
00:03:45,250 --> 00:03:52,000
you get something 
that's around 92 individuals.

62
00:03:52,890 --> 00:03:54,590
And I'm not gonna do that now,

63
00:03:54,590 --> 00:03:56,640
I'm confident 
that you can do this yourself.

64
00:03:56,640 --> 00:04:02,950
But if you take the harmonic mean
of 9 times 1,000 and 1 times 10,

65
00:04:02,950 --> 00:04:06,520
the harmonic mean 
will be roughly 92 individuals.

66
00:04:06,520 --> 00:04:12,260
So again, a pretty dramatic, 
you know, mismatch here,

67
00:04:12,260 --> 00:04:16,480
we will see that the population behaves

68
00:04:16,480 --> 00:04:22,910
as if this was a population
of 92 individuals, and not 901.

69
00:04:23,030 --> 00:04:28,500
And so we are now going to implement this
in Java Script using our simulations.

70
00:04:28,890 --> 00:04:31,660
So, this is where we left off
in the last time,

71
00:04:32,000 --> 00:04:35,450
when we looked at our code 
and we developed our genetic drift code,

72
00:04:35,450 --> 00:04:37,870
we had the population size here at 2000

73
00:04:37,870 --> 00:04:41,730
and we ran the simulations 
for 20,000 generations,

74
00:04:41,730 --> 00:04:44,360
just to show that even 
when we have larger population sizes

75
00:04:44,830 --> 00:04:46,200
given enough time,

76
00:04:46,200 --> 00:04:49,230
they will eventually lose 
all genetic variation.

77
00:04:49,230 --> 00:04:52,540
So let's go back to the code here
that created this.

78
00:04:53,110 --> 00:04:55,290
So this is our code 
and what I'm going to do here is,

79
00:04:55,290 --> 00:04:59,460
I'm going to set this back here, 
the population size to 1,000 individuals

80
00:04:59,910 --> 00:05:03,150
and the generations, in fact, to 100.

81
00:05:03,150 --> 00:05:06,170
And we want this to be, you know, 
a shortlist generation--

82
00:05:06,170 --> 00:05:07,640
a shortlist simulations.

83
00:05:09,350 --> 00:05:13,260
By the way, there's one thing 
that bothers me here about this code.

84
00:05:14,150 --> 00:05:15,970
It's this number here.

85
00:05:16,410 --> 00:05:20,540
I don't like hard-coded numbers
if it makes sense to avoid them.

86
00:05:20,540 --> 00:05:23,310
This is one where-- Let's see.

87
00:05:23,310 --> 00:05:26,720
This one defines the number 
of simulations that we're running.

88
00:05:26,910 --> 00:05:30,510
You know, sometimes you may want
to run just one, maybe five,

89
00:05:30,510 --> 00:05:31,560
maybe ten, maybe a hundred.

90
00:05:32,270 --> 00:05:34,990
So I don't like this 
to be hard-coded here,

91
00:05:34,990 --> 00:05:36,580
let's replace this with a variable.

92
00:05:37,030 --> 00:05:39,240
Just, you know, just to clean up
the code a little bit,

93
00:05:39,240 --> 00:05:43,380
I'm going to replace this 10 here
with variable simulations,

94
00:05:43,690 --> 00:05:45,960
and then correspondingly, of course,

95
00:05:46,130 --> 00:05:49,260
appears somewhere I have
to define this variable.

96
00:05:49,260 --> 00:05:52,370
I mean, I could also defined it 
down in the code somewhere,

97
00:05:52,370 --> 00:05:55,310
but I like to keep all my variables
neatly in one place.

98
00:05:55,310 --> 00:05:58,690
So, I'm simply going to say 
<i>simulations equals 10</i>.

99
00:05:58,690 --> 00:06:01,770
And nothing will change here
but it's just now,

100
00:06:02,050 --> 00:06:04,360
you know, nicer, because I have some--

101
00:06:04,360 --> 00:06:07,810
I've removes one hard-coded value.

102
00:06:07,990 --> 00:06:09,380
And of course you may argue,

103
00:06:09,380 --> 00:06:11,800
"Well, okay, but we have
all kinds of hard-coded values.

104
00:06:11,800 --> 00:06:13,890
I mean, are they all bad?
No, they're not.

105
00:06:13,890 --> 00:06:16,100
I mean, it's really up to you

106
00:06:16,190 --> 00:06:19,270
how much flexibility 
you want to have in your code.

107
00:06:19,270 --> 00:06:21,160
Here, you know, 
for example, I would say,

108
00:06:21,160 --> 00:06:24,520
"Well, we're going to draw 
two N alleles every time,"

109
00:06:24,520 --> 00:06:26,340
because we're going to stick
with this deployed model

110
00:06:26,460 --> 00:06:28,330
for the rest of the course.

111
00:06:28,330 --> 00:06:31,270
So this is nothing 
that I ever will want to change

112
00:06:31,270 --> 00:06:33,960
and so it can remain hard-coded.

113
00:06:34,120 --> 00:06:37,440
It's really a question of what is it
that you want to change eventually.

114
00:06:37,990 --> 00:06:40,710
Simulation-- The numbers 
of some simulations

115
00:06:40,710 --> 00:06:42,160
I'll probably eventually
want to change,

116
00:06:42,160 --> 00:06:46,890
so I prefer to have this as a variable
rather than a hard-coded value.

117
00:06:47,240 --> 00:06:50,280
Okay. So now, about population sizes

118
00:06:50,280 --> 00:06:52,680
and about effective population sizes.

119
00:06:52,740 --> 00:06:57,600
We just developed this intuition 
that if we have now a thousand--

120
00:06:57,830 --> 00:06:59,860
a population size of 1,000 individuals

121
00:06:59,860 --> 00:07:04,690
and we change this to 10
every 10th generation,

122
00:07:04,960 --> 00:07:09,390
then we should have 
an effective population size of 92.

123
00:07:10,050 --> 00:07:12,800
But this is something 
that we think is true,

124
00:07:13,470 --> 00:07:16,940
and it's what I call 
the uninformed prediction.

125
00:07:17,590 --> 00:07:20,880
The uninformed prediction here
would be to simply take the average,

126
00:07:21,060 --> 00:07:25,470
which we now know would lead 
to more something like 901.

127
00:07:26,230 --> 00:07:30,500
And so, the whole concept 
about showing you this

128
00:07:30,500 --> 00:07:33,210
and talking about the effective
population sizes,

129
00:07:33,210 --> 00:07:35,420
that if we don't calculate this correctly,

130
00:07:35,420 --> 00:07:37,940
then our predictions will be very wrong.

131
00:07:37,940 --> 00:07:39,110
And what do I mean by this?

132
00:07:39,110 --> 00:07:42,000
Well, if we now simply were uninformed

133
00:07:42,000 --> 00:07:45,260
and we would think the average
is just 901 individuals

134
00:07:45,260 --> 00:07:48,330
and that's, therefore, 
the effective population size,

135
00:07:48,330 --> 00:07:49,670
that would be quite wrong,

136
00:07:49,670 --> 00:07:53,300
because if we set this here to 901 
and we save this,

137
00:07:53,300 --> 00:07:57,250
and we go back to the browser 
to take a look at this simulation,

138
00:07:58,010 --> 00:07:59,400
this is what it would look like, right?

139
00:07:59,560 --> 00:08:04,180
This is what the genetic drift
will do to genetic variation

140
00:08:04,180 --> 00:08:09,840
of a population of 901 individuals
over a hundred generations,

141
00:08:09,840 --> 00:08:11,980
and you can reload this
a couple of times

142
00:08:11,980 --> 00:08:14,850
and you can see 
this is a fairly consistent pattern.

143
00:08:14,850 --> 00:08:17,560
A bit of diversions here 
among the simulations,

144
00:08:17,560 --> 00:08:20,270
but by and large, 
I mean, certainly no--

145
00:08:20,890 --> 00:08:25,280
none of the simulations here 
has lost all of their genetic variation,

146
00:08:25,280 --> 00:08:29,510
they have lost a little but it's,
you know, still fairly small.

147
00:08:29,510 --> 00:08:31,130
Now, if we go back to the code

148
00:08:31,130 --> 00:08:34,370
and we look at the dynamics
of a population

149
00:08:34,370 --> 00:08:37,810
that has 92 individuals, okay?

150
00:08:37,810 --> 00:08:41,320
So, we're simply going to set this to 92,
I'll save this and we go back

151
00:08:41,510 --> 00:08:43,120
and reload this.

152
00:08:43,630 --> 00:08:47,230
This looks rather different. 
It looks very different, in fact.

153
00:08:47,230 --> 00:08:53,270
You can see many times the populations
will lose all genetic variation,

154
00:08:53,270 --> 00:08:57,690
or get very close to it, 
and it doesn't happen all the time but,

155
00:08:57,690 --> 00:08:59,770
you know, it happens very often.

156
00:08:59,770 --> 00:09:02,950
In any case, you can see 
that this pattern looks very different

157
00:09:02,950 --> 00:09:04,260
from the other pattern, right?

158
00:09:04,260 --> 00:09:06,380
This pattern-- So, take a look
at this pattern,

159
00:09:06,380 --> 00:09:08,800
because I think 
that's what we'll roughly see,

160
00:09:08,800 --> 00:09:11,760
this is the population size
of 92 individuals.

161
00:09:12,210 --> 00:09:16,270
This is the informed prediction 
if you know about harmonic mean.

162
00:09:16,270 --> 00:09:19,270
I'm just quickly going 
to set this back again to 901,

163
00:09:19,270 --> 00:09:24,520
so you can compare this, 
901 looks like this, very,

164
00:09:24,520 --> 00:09:26,040
very different.

165
00:09:26,970 --> 00:09:28,250
So, let's go ahead now

166
00:09:28,250 --> 00:09:32,110
and implement effective 
population size and the bottlenecks.

167
00:09:33,030 --> 00:09:37,780
So, we set N here to 1,000 
because that's how we begin,

168
00:09:37,780 --> 00:09:41,420
and now what we need to do
is we need to do two things.

169
00:09:41,420 --> 00:09:44,890
The first thing is we need to ensure

170
00:09:44,890 --> 00:09:48,110
that we actually have 
a variable population size.

171
00:09:48,320 --> 00:09:54,980
And then, given that, 
we need to implement some function

172
00:09:54,980 --> 00:09:58,770
that calculates the effective 
population size overall.

173
00:09:58,900 --> 00:10:00,810
So, I'm actually going to begin with this,

174
00:10:00,810 --> 00:10:03,320
with calculating the effective 
population size

175
00:10:03,320 --> 00:10:04,460
because we can do this

176
00:10:04,460 --> 00:10:07,430
even when the population size
remains constant.

177
00:10:08,320 --> 00:10:12,980
But I need to plan for the fact 
that I have variable population sizes.

178
00:10:12,980 --> 00:10:18,370
So I need to store 
all the values of the N's

179
00:10:18,370 --> 00:10:22,370
as they change over time somehow,

180
00:10:22,370 --> 00:10:25,950
so that at the end 
I can then calculate correctly

181
00:10:26,160 --> 00:10:28,040
the affective population size

182
00:10:28,040 --> 00:10:31,270
given all these different N's
in the simulations.

183
00:10:31,270 --> 00:10:34,810
So, if I need to store 
multiple values somewhere,

184
00:10:34,810 --> 00:10:39,720
we now know which tool to use for that,
namely a race.

185
00:10:39,990 --> 00:10:42,040
So, I'm going to set up
another array here

186
00:10:42,040 --> 00:10:46,710
that I'm going to call 
population sizes, okay?

187
00:10:46,710 --> 00:10:49,426
<i>population_sizes</i>

188
00:10:49,426 --> 00:10:52,970
I'm gonna initialize this 
as an empty array in the beginning.

189
00:10:53,110 --> 00:10:57,180
So, this is the array now 
where I'm going to store

190
00:10:57,180 --> 00:11:00,280
all the population sizes
in each generation.

191
00:11:00,630 --> 00:11:03,360
So, where am I going to do this?
Well, let's see.

192
00:11:03,360 --> 00:11:06,680
Where do I run each generation?

193
00:11:07,010 --> 00:11:10,870
Well, it's basically here, right, 
what I call the next generation function.

194
00:11:10,870 --> 00:11:13,280
That's when a new generation happens.

195
00:11:13,280 --> 00:11:16,290
So, just before I'm going
to call this function,

196
00:11:16,300 --> 00:11:20,320
I'm gonna push the current 
population size into this array.

197
00:11:20,510 --> 00:11:25,530
So, I'm simply going to say 
population sizes push.

198
00:11:25,530 --> 00:11:29,690
So <i>.push</i> and then I'm going
to push in this N value.

199
00:11:30,010 --> 00:11:33,160
Now again, at the moment, 
this N value actually never changes

200
00:11:33,160 --> 00:11:36,040
because we don't change it anywhere.

201
00:11:36,040 --> 00:11:37,840
We will in a bit,

202
00:11:37,840 --> 00:11:39,000
but in any case,

203
00:11:39,000 --> 00:11:41,310
whatever we have stored here now in N

204
00:11:41,310 --> 00:11:45,030
gets pushed into 
this population sizes array.

205
00:11:45,820 --> 00:11:47,940
So then, at the end of all of this,

206
00:11:47,940 --> 00:11:51,120
I have this array 
with all the population sizes,

207
00:11:51,120 --> 00:11:55,830
and now I can calculate the harmonic mean
of this set of numbers.

208
00:11:56,470 --> 00:11:58,700
So, how do I do this? 
Well, you know,

209
00:11:58,700 --> 00:12:00,330
this sounds like something that, you know,

210
00:12:00,330 --> 00:12:03,500
makes sense to encapsulate
into a function.

211
00:12:04,200 --> 00:12:06,320
So, what I'm going to do here is,

212
00:12:06,320 --> 00:12:09,450
I'm going to calculate 
this effective population size.

213
00:12:09,450 --> 00:12:13,780
First of all, I'm going 
to define this variable here, <i>Ne,</i>

214
00:12:14,400 --> 00:12:17,000
and then I would like to say,
you know what,

215
00:12:17,000 --> 00:12:19,540
calculate this for me in a function.

216
00:12:19,540 --> 00:12:22,710
I'm going to hand this function 
the array of all the population sizes

217
00:12:23,080 --> 00:12:27,400
and I'd like to get in return 
from the function this correct value

218
00:12:27,400 --> 00:12:31,130
for the effective population size, 
and then I'm going to store it into Ne.

219
00:12:31,130 --> 00:12:35,500
So, I'm going to call a function here 
that I, in fact, haven't yet defined,

220
00:12:35,500 --> 00:12:37,130
but I wil in a second,

221
00:12:37,130 --> 00:12:43,030
and I'm going to call this function
<i>effective_population_size</i>.

222
00:12:44,230 --> 00:12:47,140
Haven't defined this yet, 
so this code wouldn't work,

223
00:12:47,140 --> 00:12:49,230
but I will do this in a second.

224
00:12:49,370 --> 00:12:52,240
Now, this function should take
a set of values,

225
00:12:52,240 --> 00:12:55,610
and then correctly calculate 
the effective population size.

226
00:12:55,610 --> 00:12:58,810
So, I need to pass it, the set of values,

227
00:12:58,810 --> 00:13:03,610
and a set of values is simply here
population size.

228
00:13:03,900 --> 00:13:07,890
Now okay, what would 
this function look like?

229
00:13:07,890 --> 00:13:09,440
How do I need to define this function?

230
00:13:09,440 --> 00:13:11,160
Okay, I'll do this up here.

231
00:13:11,160 --> 00:13:15,680
I'm going to call this function, 
as I said, effective population size.

232
00:13:17,020 --> 00:13:20,570
It's gonna take one argument,

233
00:13:20,570 --> 00:13:23,540
so I need to define here 
the parameter correspondingly,

234
00:13:23,540 --> 00:13:25,870
I'm going to call this <i>all_Ns</i>

235
00:13:25,870 --> 00:13:29,250
because that's what it is, 
it's all the population sizes, right?

236
00:13:29,250 --> 00:13:32,640
And here, in curly brackets now, 
I can define the function body.

237
00:13:33,140 --> 00:13:37,620
So here's my task, and given 
a set of numbers in an array,

238
00:13:37,620 --> 00:13:39,560
I need to return the harmonic mean.

239
00:13:39,560 --> 00:13:42,520
We now know how to calculate
the harmonic mean.

240
00:13:42,520 --> 00:13:48,480
We know it's a division 
of the total number

241
00:13:48,480 --> 00:13:51,760
of numbers that we have in this <i>all_Ns</i>

242
00:13:52,020 --> 00:13:56,610
and then divided by the sum
of the universe of values.

243
00:13:56,610 --> 00:13:57,960
So we have a denominator.

244
00:13:57,960 --> 00:14:03,020
Denominator is very easy-- 
To denominator we need to calculate,

245
00:14:03,020 --> 00:14:05,330
it's the sum of the universe of values.

246
00:14:05,330 --> 00:14:06,710
So, I'm going to do is first

247
00:14:06,710 --> 00:14:11,380
and I'm just going to define
a variable here, <i>denominator</i>

248
00:14:12,650 --> 00:14:15,550
and I'm going to initialize this at zero.

249
00:14:15,550 --> 00:14:18,070
So, now what I would like to do
is I would like to iterate

250
00:14:18,070 --> 00:14:22,150
over all the values here, 
all the elements in this array,

251
00:14:23,110 --> 00:14:29,330
and then at the inverse of all 
these elements to the denominator,

252
00:14:29,330 --> 00:14:31,230
thereby creating the sum.

253
00:14:31,230 --> 00:14:33,340
So, itirating over in an array.

254
00:14:33,340 --> 00:14:34,730
We now know how to do this,

255
00:14:34,730 --> 00:14:36,200
we use a <i>for</i> loop.

256
00:14:36,200 --> 00:14:40,190
So, <i>for [var i = 0;</i>

257
00:14:40,190 --> 00:14:46,720
and then we say, as a condition
<i>i &lt; all_Ns.length</i>

258
00:14:46,720 --> 00:14:49,940
because as you may recall, 
the length property here is--

259
00:14:49,940 --> 00:14:55,140
is the value tells essentially how many
elements there are in this array.

260
00:14:55,140 --> 00:14:56,770
So we can use this.

261
00:14:56,770 --> 00:15:00,410
And then of course, as always, <i>i = i+1</i>

262
00:15:00,410 --> 00:15:02,190
We need to increment here <i>i</i>

263
00:15:02,190 --> 00:15:05,240
otherwise we end up with an infinite loop.

264
00:15:07,040 --> 00:15:08,350
So, what do I need?

265
00:15:08,350 --> 00:15:11,570
I need these elements,

266
00:15:11,780 --> 00:15:16,280
so that the current element 
in each iteration is array name

267
00:15:16,280 --> 00:15:18,510
and then index <i>i</i>,

268
00:15:18,510 --> 00:15:22,770
i starting from 0 and going
all the way to length -1

269
00:15:22,770 --> 00:15:25,530
as we discussed in the array lecture.

270
00:15:25,530 --> 00:15:29,050
I would like the-- I said, 
I need the inverse of that,

271
00:15:29,050 --> 00:15:33,220
so it's <i>1 / all_Ns[i]</i>

272
00:15:33,220 --> 00:15:36,200
and now, I said I need
the sum of all these.

273
00:15:36,200 --> 00:15:38,500
So what I'm going to do 
is I'm simply going to say,

274
00:15:38,500 --> 00:15:43,980
denominator equal denominator
plus-- plus this here,

275
00:15:43,990 --> 00:15:46,560
--and I'm going to put this in parentheses

276
00:15:48,260 --> 00:15:52,000
just for visual simplicity.

277
00:15:52,000 --> 00:15:56,860
And this is now creating the sum 
of all the universe of values here,

278
00:15:56,860 --> 00:16:00,570
simply taking the universe values, 
it's adding wont currently

279
00:16:00,570 --> 00:16:04,110
have a denominator and storing
this new value in denominator.

280
00:16:04,110 --> 00:16:06,110
We've done this before,

281
00:16:06,110 --> 00:16:08,820
creating a sum with a loop, 
and then at the end here

282
00:16:08,820 --> 00:16:11,870
I have in the denominator

283
00:16:11,870 --> 00:16:14,700
the sum of all these universe values.

284
00:16:14,700 --> 00:16:19,560
And then I can very simply
return this harmonic mean,

285
00:16:19,560 --> 00:16:21,060
so it's going to be:

286
00:16:21,060 --> 00:16:24,160
<i>all_Ns.length</i>.

287
00:16:24,160 --> 00:16:26,990
So, that's a number of elements
we have in the array,

288
00:16:27,320 --> 00:16:30,340
and divide by the denominator.

289
00:16:30,340 --> 00:16:32,970
So, I'm just going to copy this here, 
denominator.

290
00:16:34,780 --> 00:16:38,360
And we don't care about precision,

291
00:16:38,360 --> 00:16:39,930
an inter-share value will be fine,

292
00:16:39,930 --> 00:16:44,050
some simply going to raft here
into math round.

293
00:16:44,050 --> 00:16:47,790
Okay, a math round of this division

294
00:16:48,220 --> 00:16:50,380
it's going to be sufficiently precise.

295
00:16:51,130 --> 00:16:53,580
So this is now this function 
that calculates

296
00:16:53,580 --> 00:16:55,570
the effective population
size population size,

297
00:16:55,570 --> 00:16:58,060
given a set, in this case here

298
00:16:58,060 --> 00:17:02,290
in array of these population
sizes over time.

299
00:17:03,630 --> 00:17:05,040
So just one thing.

300
00:17:05,040 --> 00:17:08,800
In parentheses you may have realized

301
00:17:08,800 --> 00:17:11,700
and correctly pointed out
while watching this,

302
00:17:11,700 --> 00:17:16,770
that I am now doing this 
for the entire set

303
00:17:16,770 --> 00:17:18,960
of simulations.

304
00:17:19,430 --> 00:17:22,740
I'm not setting up a 2-dimensional array

305
00:17:22,740 --> 00:17:25,640
where we're calculating 
the effective population size

306
00:17:25,640 --> 00:17:28,780
for each of these simulations
independently.

307
00:17:28,780 --> 00:17:30,430
We could of course do this,

308
00:17:30,430 --> 00:17:34,760
but because it will be the exact
same number for each simulation,

309
00:17:34,760 --> 00:17:38,980
I'm just adding all of the Ns up
over all the simulations,

310
00:17:38,980 --> 00:17:41,980
then I'm correspondingly 
dividing by--

311
00:17:41,980 --> 00:17:44,390
so I'm taking this into account,

312
00:17:44,390 --> 00:17:46,270
But, you know, this doesn't matter.

313
00:17:46,270 --> 00:17:48,040
You could-- 
If you want to,

314
00:17:48,040 --> 00:17:52,420
you could calculate this 
independently for each simulation

315
00:17:52,420 --> 00:17:54,990
using a 2-dimensional array, 
but it won't be necessary

316
00:17:54,990 --> 00:17:58,330
because it's going to be the same number
for every simulation,

317
00:17:58,330 --> 00:18:00,380
but that's just in parentheses.

318
00:18:00,700 --> 00:18:02,270
Now that we have this,

319
00:18:02,270 --> 00:18:04,270
let's see if this actually works..

320
00:18:04,270 --> 00:18:07,150
We're not changing the Ns at the moment,

321
00:18:07,150 --> 00:18:09,540
we haven't really 
implemented the bottlenecks.

322
00:18:09,540 --> 00:18:12,870
But we have everything set up
so that we could do this

323
00:18:12,900 --> 00:18:14,160
and let's just see if this works.

324
00:18:14,160 --> 00:18:17,080
So down here, in the legend

325
00:18:17,080 --> 00:18:21,740
I'm not going to show N. 
I'm actually now going to show Ne.

326
00:18:21,740 --> 00:18:26,030
And here the label then would correctly 
have to be effective population size.

327
00:18:26,030 --> 00:18:28,690
And I'm just going to abbreviate this
for space issues.

328
00:18:29,140 --> 00:18:32,800
So let's save this and go back 
and see if this actually worked.

329
00:18:32,800 --> 00:18:36,790
So let's go back to the browser, 
reload this. Yes, indeed this works

330
00:18:37,680 --> 00:18:42,140
So we have 1,000 as the effective 
population size which is correct,

331
00:18:42,660 --> 00:18:45,550
because we'll never change 
the population size.

332
00:18:45,550 --> 00:18:49,730
It is a constant 1,000 
and the harmonic mean of,

333
00:18:50,060 --> 00:18:54,340
however many numbers of thousands
will always be exactly one thousand.

334
00:18:54,470 --> 00:18:57,270
Good, so that works, great job.

335
00:18:57,270 --> 00:19:01,850
So what we can now do 
is to actually implement the bottlenecks.

336
00:19:01,850 --> 00:19:04,200
We'll do this in the next lecture.
I'll see you there.
