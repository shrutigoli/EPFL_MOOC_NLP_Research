1
00:00:03,619 --> 00:00:07,318
Bienvenue la nature, dans le Code.
Nous sommes dans le chapitre 3, leçon10.

2
00:00:07,318 --> 00:00:08,750
Dans les leçons précédentes,

3
00:00:08,750 --> 00:00:12,100
nous avons implémenté des simulations
de dérive génétique en javascript

4
00:00:12,100 --> 00:00:15,309
puis tracer les résultats et tout
fonctionne à merveille jusqu'à présent.

5
00:00:15,345 --> 00:00:18,004
Donc, ce que nous aimons faire
maintenant est d'étendre ceci un peu

6
00:00:18,004 --> 00:00:22,404
et effectivement tracer plusieurs
simulations en un seul chiffre.

7
00:00:22,404 --> 00:00:23,825
Alors, comment allons-nous faire cela?

8
00:00:23,825 --> 00:00:26,454
Eh bien, nous avons besoin
de tableaux à deux dimensions

9
00:00:26,454 --> 00:00:29,895
et nous les avons brièvement abordé
dans la leçon précédente.

10
00:00:29,895 --> 00:00:34,395
Dans cette vidéo, nous allons étendre
notre simulation de la dérive génétique

11
00:00:34,395 --> 00:00:37,608
à plusieurs simulations en utilisant
des réseaux à deux dimensions

12
00:00:37,608 --> 00:00:38,824
Alors allons-y.

13
00:00:38,911 --> 00:00:42,392
Ce que nous avons en ce moment
c'est ce tableau de données.

14
00:00:42,392 --> 00:00:49,790
Ce tableau de données contient de
nombreuses valeurs telles que 0,49, 0,48,

15
00:00:50,320 --> 00:00:54,140
0,485, et ainsi de suite
beaucoup, beaucoup de valeurs.

16
00:00:54,140 --> 00:00:57,736
en fait, elle contient exactement
un millier de valeurs.

17
00:00:57,736 --> 00:01:01,392
D'accord, donc il va y avoir
1000 points de données,

18
00:01:02,950 --> 00:01:06,264
ce qui correspond à une simulation.

19
00:01:06,264 --> 00:01:09,622
Et puis nous traçons essentiellement
ces 1000 points de données.

20
00:01:09,686 --> 00:01:12,361
Ceci c'est ce que nous faisons déjà.

21
00:01:12,361 --> 00:01:14,667
Maintenant, nous aimerions étendre cela,

22
00:01:14,667 --> 00:01:20,734
et nous aimerions donné dix simulations
par exemple, ou 20 ou des centaines,

23
00:01:20,734 --> 00:01:25,525
mais concentrons-nous sur l'hypothèse
que nous aurons dix simulations.

24
00:01:25,525 --> 00:01:27,087
Donc dix simulations,

25
00:01:27,087 --> 00:01:30,082
et chacun de ces simulations
auront 1000 points de données.

26
00:01:30,082 --> 00:01:32,077
Alors, comment nous stockons cela?

27
00:01:32,077 --> 00:01:37,225
Eh bien, nous pourrions simplement stocker 10.000
points de données dans un tableau à une dimension

28
00:01:37,225 --> 00:01:39,507
mais ce n'est pas une bonne
façon de structurer ceci.

29
00:01:39,507 --> 00:01:43,637
La meilleure façon de structurer c'est-à-dire
«Eh bien, notre réseau de données

30
00:01:43,637 --> 00:01:49,378
contiendra lui-même dix tableaux."

31
00:01:50,647 --> 00:01:53,135
Donc dix tableaux
on ne va pas dessiner dix ici

32
00:01:53,135 --> 00:01:56,550
mais nous aurons dix éléments ici ...

33
00:01:56,550 --> 00:01:59,859
ok, dix tableaux ...

34
00:01:59,859 --> 00:02:02,446
qui sera contenu dans ce tableau.

35
00:02:03,370 --> 00:02:06,199
Et puis chacun de ces tableaux, d'accord,

36
00:02:06,199 --> 00:02:12,468
chacun d'entre eux  auront maintenant
les valeurs ... 0,49, 0,48,

37
00:02:12,468 --> 00:02:14,737
Peu importe.

38
00:02:14,737 --> 00:02:19,317
1000 points de données,
tout comme nous avions avant,

39
00:02:19,317 --> 00:02:25,018
1000 points de données,
ce qui correspond à une simulation.

40
00:02:27,089 --> 00:02:31,405
Mais tout cela est maintenant stocké
dans un seul tableau ici,

41
00:02:31,405 --> 00:02:35,572
et ce tableau de données contient
dix de ces tableaux.

42
00:02:35,572 --> 00:02:42,532
Nous avons donc
un réseau de 10 fois 1000 éléments.

43
00:02:42,555 --> 00:02:46,427
La dimension de ce tableau de données
sera 10 fois 1000,

44
00:02:46,427 --> 00:02:49,952
alors nous pouvons simplement passer
ce tableau de données maintenant

45
00:02:49,952 --> 00:02:51,601
à la fonction de traçage.

46
00:02:51,601 --> 00:02:54,341
La fonction de traçage est déjà programmé
de telle manière

47
00:02:54,341 --> 00:02:56,827
qu'il sait comment traiter cela.

48
00:02:56,827 --> 00:02:58,980
Nous allons mettre en œuvre ceci en javascript.

49
00:02:59,063 --> 00:03:03,674
Voici notre simulation de dérive génétique
comme il est à l'heure actuelle.

50
00:03:03,674 --> 00:03:05,133
Il a tout simplement ce tableau,

51
00:03:05,133 --> 00:03:10,334
Les valeurs sont poussés dans ce tableau,
les valeurs de P, et puis

52
00:03:11,077 --> 00:03:15,244
nous allons remettre ces données sur
la fonction de traçage de graphe linéaire

53
00:03:15,244 --> 00:03:16,934
et les données sont tracées.

54
00:03:16,934 --> 00:03:19,024
Maintenant, nous devons étendre ce code

55
00:03:19,024 --> 00:03:23,718
de sorte que la matrice de données
contient plusieurs matrices,

56
00:03:23,718 --> 00:03:27,395
qui contiennent chacun
des résultats de simulation.

57
00:03:28,058 --> 00:03:30,369
Je vais continuer et le faire

58
00:03:30,369 --> 00:03:35,720
Disons que je voudrais que le code fasse
dix simulations.

59
00:03:36,550 --> 00:03:39,658
Donc, cela est actuellement
une simulation, n'est ce pas?

60
00:03:39,658 --> 00:03:42,582
Parce que, pour autant de fois que
je l'ai stocké dans les générations,

61
00:03:42,582 --> 00:03:44,887
au moment où il est 1000,

62
00:03:45,221 --> 00:03:48,363
Je vais appeler cette fonction
<i> prochaine Génération </ i>

63
00:03:48,363 --> 00:03:50,613
puis voilà, c'est une simulation.

64
00:03:50,707 --> 00:03:54,036
Ce que je vais faire c'est que
je vais conclure cette boucle ici

65
00:03:54,036 --> 00:03:57,696
dans une fonction,

66
00:03:58,106 --> 00:04:01,766
et je vais appeler cette fonction,
"simulation"

67
00:04:01,766 --> 00:04:04,838
parce que c'est essentiellement
une seule simulation.

68
00:04:04,856 --> 00:04:08,555
Donc, <i> Simulation </ i> ok.

69
00:04:08,593 --> 00:04:12,582
Et puis je vais conclure cela ici,
avec des accolades.

70
00:04:12,582 --> 00:04:14,841
Maintenant, je vais couper cette boucle

71
00:04:14,841 --> 00:04:19,320
et nous allons la recoller ici
en utilisant la bonne indentation.

72
00:04:19,398 --> 00:04:23,578
C'est la même boucle que nous avions avant,
mais maintenant c'est dans une fonction.

73
00:04:23,578 --> 00:04:26,990
Maintenant, je peux simplement
appeler cette fonction dix fois,

74
00:04:26,990 --> 00:04:30,935
et que bien sûr, je peux le faire
en utilisant, à nouveau, une boucle.

75
00:04:30,935 --> 00:04:37,986
Donc, je vais mettre en place une autre boucle ici
qui dit: <i> pour var i = 0 </ i> de manière habituelle.

76
00:04:37,986 --> 00:04:41,617
Et puis disons,
nous allons le faire dix fois,

77
00:04:42,757 --> 00:04:49,243
et ensuite augmenter le compteur,
évidemment pour éviter les boucles sans fin.

78
00:04:50,290 --> 00:04:53,510
Maintenant, je vais simplement
appeler, simulation.

79
00:04:53,571 --> 00:04:56,222
Ok, donc ici maintenant,
je vous appelle cette fonction,

80
00:04:56,222 --> 00:04:58,262
simulation dix fois,

81
00:04:58,262 --> 00:05:01,923
et cette simulation est essentiellement
juste une fonction de commodité

82
00:05:01,923 --> 00:05:05,972
qui appelle «prochaine génération»,quel que
soit le nombre de fois que nous le voulons.

83
00:05:06,558 --> 00:05:07,911
Voilà donc un bon début,

84
00:05:07,911 --> 00:05:12,317
mais maintenant nous devons nous adapter
cette fonction ici, «prochaine génération»

85
00:05:12,317 --> 00:05:14,258
pour être en mesure de traiter le fait que

86
00:05:14,258 --> 00:05:19,476
nous ne pouvons pas maintenant pousser stupidement
les valeurs de p dans un tableau de données.

87
00:05:19,476 --> 00:05:23,970
Sinon, nous aurions cette longue série
de dix mille numéros.

88
00:05:23,970 --> 00:05:27,918
Ce que nous voulons à la place,
c'est que nous voulons dix tableaux,

89
00:05:27,918 --> 00:05:30,374
un pour chaque simulation,

90
00:05:30,374 --> 00:05:33,990
puis ces dix tableaux sont enregistrés
dans le tableau de données.

91
00:05:33,990 --> 00:05:36,108
Alors, comment faisons-nous cela?

92
00:05:36,108 --> 00:05:40,701
Eh bien, tout d'abord, la fonction
de la prochaine génération

93
00:05:40,701 --> 00:05:43,800
ne devrait pas vraiment pas traiter cela.

94
00:05:43,800 --> 00:05:48,217
Donc ce que je vais faire ici,
je vais en fait corriger

95
00:05:48,293 --> 00:05:53,825
remettre le bon sous-tableau
de la simulation en cours

96
00:05:53,825 --> 00:05:55,981
à cette fonction "prochaine génération",

97
00:05:56,005 --> 00:05:58,056
et il poussera alors là-bas,

98
00:05:58,056 --> 00:06:02,588
et nous devons régler un autre endroit
où nous traitons cela.

99
00:06:02,617 --> 00:06:07,199
Fondamentalement, je demande
«prochaine génération» de prendre une valeur

100
00:06:07,199 --> 00:06:11,248
et je vais appeler ceci
<i> données de simulation </ i>

101
00:06:11,248 --> 00:06:13,803
les données de simulation.

102
00:06:14,367 --> 00:06:16,296
Donc, un paramètre ici.

103
00:06:16,296 --> 00:06:18,256
Et dans le fond maintenant,
quand j'appelle cette fonction

104
00:06:18,256 --> 00:06:23,757
Je dois passer le tableau de données correct
pour cette simulation en cours.

105
00:06:23,792 --> 00:06:28,044
Et puis plutôt que de pousser
les valeurs de p ici en données,

106
00:06:28,044 --> 00:06:32,391
Je vais les pousser maintenant
dans ces données de simulation.

107
00:06:32,391 --> 00:06:34,409
Permettez-moi de copier ceci et puis ici,

108
00:06:34,409 --> 00:06:37,736
Je vais juste dire,
"les données de simulation poussent p".

109
00:06:37,736 --> 00:06:41,561
Alors maintenant, «prochaine génération»
est complètement agnostique à ce sujet.

110
00:06:41,561 --> 00:06:45,573
Il vient recevra un tableau de données ici,

111
00:06:45,573 --> 00:06:49,222
et puis quand il est appelé comme argument,

112
00:06:49,222 --> 00:06:53,802
alors il va pousser la valeur p
qu'il calcule dans ce tableau.

113
00:06:55,145 --> 00:07:01,518
Maintenant, nous devons traiter simplement le fait
que nous devrions avoir dix de ces tableaux

114
00:07:01,518 --> 00:07:05,145
et ils doivent être stockés correctement
dans la matrice de données.

115
00:07:06,775 --> 00:07:13,852
Ce que nous pouvons faire c'est,
nous avons maintenant ici dix itérations,

116
00:07:13,901 --> 00:07:16,148
de sorte que nous itérons dix fois.

117
00:07:17,602 --> 00:07:21,515
Donc, <i> i </ i> ici est vraiment
le compteur pour nos simulations

118
00:07:21,515 --> 00:07:24,473
et donc aussi, pour nos tableaux.

119
00:07:25,311 --> 00:07:30,035
Ce que je vais faire c'est à chaque fois
avant que je lance une simulation,

120
00:07:31,065 --> 00:07:36,591
je vais pousser un nouveau tableau
dans un tableau vide,

121
00:07:36,591 --> 00:07:38,826
dans ce tableau de données.

122
00:07:38,826 --> 00:07:40,731
Bon, donc comme ça.

123
00:07:40,731 --> 00:07:44,401
Alors maintenant, à chaque fois avant que
je lance cette fonction de simulation,

124
00:07:44,401 --> 00:07:45,860
avant que je l'exécute,

125
00:07:45,860 --> 00:07:52,394
Je pousse un autre tableau vide
dans le tableau de données.

126
00:07:52,421 --> 00:07:57,082
C'est super parce qu'à la fin nous voulons
avoir dix tableaux dans les données,

127
00:07:57,082 --> 00:07:58,822
et chacun de ces tableaux,

128
00:07:58,822 --> 00:08:03,504
chacun d'entre eux étant une matrice de simulation
de données dans le tableaux de données.

129
00:08:04,313 --> 00:08:08,433
Maintenant, la seule chose que je dois prendre soin de
c'est que je dois faire en quelque sorte assurer que

130
00:08:08,433 --> 00:08:11,904
quand j'appelle cette fonction
«prochaine génération»,

131
00:08:11,904 --> 00:08:16,055
il passe sur la matrice de données
de simulation correcte,

132
00:08:16,055 --> 00:08:19,673
le sous-réseau correct dans les données.

133
00:08:21,503 --> 00:08:26,803
Ici, dans «prochaine génération»,
je dois passer maintenant ce tableau.

134
00:08:28,007 --> 00:08:31,713
Il va être un tableau qui est dans
les données.

135
00:08:32,831 --> 00:08:36,491
Donc, les données contiendront
dix tableaux,

136
00:08:36,491 --> 00:08:41,972
et donc je peux accéder à ce sous- tableau
en accédant tout simplement son élément.

137
00:08:41,972 --> 00:08:43,552
Comment vais-je faire cela?

138
00:08:43,552 --> 00:08:46,755
Eh bien, je vais simplement dire ici
des choses comme, "données 0".

139
00:08:46,755 --> 00:08:51,369
Cela va maintenant être le premier
élément, qui est lui-même un tableau,

140
00:08:51,369 --> 00:08:54,555
ou je vais dire "données 1",
qui est un autre tableau,

141
00:08:54,555 --> 00:08:56,033
ou «données 2», et ainsi de suite.

142
00:08:56,944 --> 00:08:59,706
Quel est l'indice correct ici?

143
00:08:59,706 --> 00:09:05,252
Eh bien, j'ai besoin d'un moyen de savoir
quel simulation nous sommes actuellement.

144
00:09:06,517 --> 00:09:07,688
Comment le savons-nous?

145
00:09:07,688 --> 00:09:10,631
Eh bien, bien sûr on le connaît ici-bas,
n'est ce pas?

146
00:09:10,631 --> 00:09:15,968
Lorsque <i> i </ i> est 0, nous sommes
dans la première simulation,

147
00:09:15,968 --> 00:09:18,258
et ainsi l'indice correct serait zéro.

148
00:09:18,258 --> 00:09:21,630
Lorsque <i> i </ i> est 1, nous sommes
dans la deuxième simulation

149
00:09:21,630 --> 00:09:24,264
Et donc l'indice correct sera 1,
et ainsi de suite.

150
00:09:24,264 --> 00:09:26,750
Ce que je vais faire c'est,
je vais transmettre cette information,

151
00:09:26,750 --> 00:09:30,399
cet <i> i </ i> à la simulation.

152
00:09:31,309 --> 00:09:33,755
Je vais passer <i> i </ i> à la simulation,

153
00:09:33,780 --> 00:09:36,328
en d'autres termes, je dois
le recevoir ici,

154
00:09:36,328 --> 00:09:39,236
donc je vais trouver un paramètre ici,

155
00:09:39,236 --> 00:09:42,496
et je vais appeler cela,
"compteur de paramètre de simulation  "

156
00:09:42,496 --> 00:09:44,235
parce que c'est ce qu'elle est.

157
00:09:44,849 --> 00:09:48,098
Et cette compteur de simulation,
donc la première fois ça va être 0,

158
00:09:48,098 --> 00:09:49,426
la deuxième fois ça va être 1,

159
00:09:49,426 --> 00:09:51,519
la troisième fois ça va être 2,
et ainsi de suite,

160
00:09:51,519 --> 00:09:56,536
cela va être mon index
pour le tableau de données.

161
00:09:57,521 --> 00:09:59,269
J'espère que vous comprenez
comment cela fonctionne

162
00:09:59,269 --> 00:10:02,088
mais je vais vous guider à travers ceci,
encore une fois.

163
00:10:03,722 --> 00:10:06,422
Qu'est-ce qui se passe ici
c'est que nous itérerons dix fois.

164
00:10:07,172 --> 00:10:09,133
Chaque itération,
la première chose que je fais

165
00:10:09,133 --> 00:10:12,672
c'est je pousse un autre tableau vide
dans le tableau de données,

166
00:10:12,672 --> 00:10:15,603
et ceci est celui qui doit désormais
contenir toutes les valeurs

167
00:10:15,603 --> 00:10:17,681
pour cette simulation particulière.

168
00:10:17,681 --> 00:10:22,040
Ensuite, je vais appeler la simulation,
et je vais passer la valeur</ i> i<i>,

169
00:10:22,040 --> 00:10:24,938
juste pour qu'il sache,
que la simulation sait

170
00:10:24,938 --> 00:10:27,423
dans quelle itération nous sommes
actuellement.

171
00:10:27,532 --> 00:10:29,733
Ok, donc au début, il va être zéro.

172
00:10:29,733 --> 00:10:31,671
Donc, cette fonction est appelée,

173
00:10:31,671 --> 00:10:34,678
cette valeur sera transmise
au «compteur de simulation ,"

174
00:10:34,678 --> 00:10:37,863
et maintenant je vais appeler
la «prochaine génération»

175
00:10:37,863 --> 00:10:41,530
et je vais passer le tableau
de simulation correcte

176
00:10:41,530 --> 00:10:46,151
qui est le "compteur de simulation
d'index de données."

177
00:10:46,151 --> 00:10:48,583
Donc, ça va être 0
pour la première simulation,

178
00:10:48,583 --> 00:10:50,591
1, pour la deuxième simulation,
et ainsi de suite,

179
00:10:50,591 --> 00:10:52,681
et 9 pour la dernière simulation.

180
00:10:53,185 --> 00:10:55,332
Et ici, la «prochaine génération»
ne se soucie pas vraiment.

181
00:10:55,332 --> 00:11:00,463
Chaque obtient juste un tableau
et il pousse les valeurs dans ceci.

182
00:11:00,673 --> 00:11:04,727
Donc, nous allons enregistrer cela
et voir si tout fonctionne bien.

183
00:11:04,727 --> 00:11:06,603
D'accord, je vais l'enregistrer,

184
00:11:07,106 --> 00:11:11,113
et maintenant nous allons sur
le navigateur.

185
00:11:11,113 --> 00:11:14,673
Nous allons recharger les choses ici.

186
00:11:14,673 --> 00:11:18,842
Et quelque chose fonctionne,
mais il semble un peu bizarre.

187
00:11:18,842 --> 00:11:21,413
Qu'avons-nous là? Nous allons
recharger ceci plusieurs fois.

188
00:11:21,413 --> 00:11:23,093
Oh, ça semble intéressant.

189
00:11:23,093 --> 00:11:24,831
Donc, nous avons fait une erreur,

190
00:11:24,831 --> 00:11:28,037
et je l'ai fait exprès juste pour démontrer.

191
00:11:28,037 --> 00:11:30,833
Regardez ce qui se passe ici,
donc nous commençons, 0,5

192
00:11:30,833 --> 00:11:33,301
puis passez rapidement
à la valeur de la commande.

193
00:11:33,386 --> 00:11:36,675
Et puis ici, cette simulation

194
00:11:36,729 --> 00:11:40,888
l'allèle A1 ne va pas à la fixation,
ni l'A2,

195
00:11:40,891 --> 00:11:43,850
Nous sommes donc ici quelque part
autour de 0,75.

196
00:11:44,288 --> 00:11:48,466
Ensuite, la prochaine simulation
semble commencer à cette valeur,

197
00:11:48,466 --> 00:11:50,319
et va finalement à la fixation,

198
00:11:50,437 --> 00:11:53,297
puis la simulation suivante commence à 1.

199
00:11:53,297 --> 00:11:55,718
Et bien sûr, une fois que vous avez perdu
toute variation génétique,

200
00:11:55,718 --> 00:11:57,837
il n'y a aucun moyen de
le récupérer au moment

201
00:11:57,837 --> 00:11:59,709
parce que nous ne disposons pas
d'autre procéssus,

202
00:11:59,709 --> 00:12:01,837
et nous ne disposons pas de mutation
ou quelque chose comme ça.

203
00:12:02,210 --> 00:12:03,749
Donc, il y a quelque chose qui cloche.

204
00:12:03,749 --> 00:12:06,798
Si je recharge cette fois plusieurs fois,
vous pouvez voir le même phénomène.

205
00:12:06,798 --> 00:12:10,479
Donc, la première simulation ici
en bleu s'arrête quelque part ici,

206
00:12:10,479 --> 00:12:15,888
puis la simulation suivante continue mal
à cette valeur.

207
00:12:15,978 --> 00:12:17,635
Permettez-moi de recharger ceci encore,

208
00:12:17,635 --> 00:12:19,208
Ceci est un cas intéressant,

209
00:12:19,208 --> 00:12:22,432
et aucun des simulations va effectivement
à la fixation.

210
00:12:22,432 --> 00:12:24,832
Le quatrième va et il est fini.

211
00:12:24,968 --> 00:12:26,765
Voici également un bon exemple.

212
00:12:26,765 --> 00:12:30,218
La première simulation perd presque
l'allèle A1,

213
00:12:30,218 --> 00:12:34,626
se termine ici à environ 0,1 après
1000 génération.

214
00:12:34,626 --> 00:12:38,674
Ensuite, la simulation suivante
commence par erreur à 0,1

215
00:12:38,674 --> 00:12:41,100
puis obtenir rapidement le A1,
se perd rapidement.

216
00:12:41,540 --> 00:12:44,911
Comment réparons nous ça?
Revenons au code.

217
00:12:44,911 --> 00:12:49,481
Le problème est nous poussons simplement
<i> p </ i> dans ces tableaux,

218
00:12:49,481 --> 00:12:51,019
ça semble fonctionner,

219
00:12:51,019 --> 00:12:55,098
mais nous réinitialisons jamais
<i> p </ i> à 0,5.

220
00:12:55,098 --> 00:12:58,762
Et bien sûr, nous devons le faire,
sinon la prochaine,

221
00:12:58,762 --> 00:13:00,381
une fois que la simulation est effectuée,

222
00:13:00,381 --> 00:13:05,072
la prochaine simulation commencera
à la valeur où <i> p </ i> est actuellement.

223
00:13:05,072 --> 00:13:09,361
Voici donc ce que je vais faire ici
dans cette simulation,

224
00:13:09,361 --> 00:13:14,951
lorsque la simulation de fonction est exécuté,
la première chose que nous faisons

225
00:13:14,951 --> 00:13:17,632
avant que nous appelons
la prochaine génération mille fois,

226
00:13:17,632 --> 00:13:22,313
est que nous allons raméner <i> p </ i> à 0,5.

227
00:13:22,313 --> 00:13:24,805
Nous allons donc réinitialiser <i> p </ i>.

228
00:13:25,202 --> 00:13:29,338
Notez que je n'utilise pas <i> var p </ i>,
et j'espère, vous savez maintenant pourquoi

229
00:13:29,338 --> 00:13:34,566
parce que ce que je voudrais faire
maintenant ici je parle du global,

230
00:13:34,566 --> 00:13:38,256
la variable et la portée globale,
celle que nous avons définie ici.

231
00:13:38,256 --> 00:13:40,146
Cela doit être réinitialisé.

232
00:13:40,146 --> 00:13:42,909
Si je dirais <i> var p </ i>,
cela ne fonctionnerait pas

233
00:13:42,909 --> 00:13:47,637
parce que ce serait simplement une variable
locale que personne ne se soucie.

234
00:13:47,637 --> 00:13:51,246
Alors, soyez prudent de dire ici "p"

235
00:13:51,246 --> 00:13:54,125
parce que nous parlons de ce "p" global ici.

236
00:13:54,125 --> 00:13:55,365
<I> P </ i>, nous ne définissons pas
une variable,

237
00:13:55,365 --> 00:14:00,955
nous redéfinissons simplement
cette variable p ici la réinitialisons à 0,5

238
00:14:00,968 --> 00:14:04,728
D'accord,
quelque chose que nous pourrions faire

239
00:14:04,728 --> 00:14:06,565
puisque nous réinitialisons ici,

240
00:14:06,565 --> 00:14:10,706
nous pouvons aussi essentiellement
se débarrasser de cette initialisation

241
00:14:10,706 --> 00:14:14,989
parce que nous réinitialisons chaque fois
que la simulation est appelée de toute façon,

242
00:14:14,989 --> 00:14:20,338
qui est aussi le cas dans la première fois
que nous avons appelé la fonction de simulation.

243
00:14:20,649 --> 00:14:26,673
Enregistrons cela. Allons vers
le navigateur et laissez le recharger.

244
00:14:27,392 --> 00:14:29,425
Cela ressemble beaucoup mieux maintenant.

245
00:14:29,425 --> 00:14:34,235
Vous pouvez voir toutes
les simulations ici commencent à 0,5,

246
00:14:35,482 --> 00:14:43,033
Et toutes ces simulations sont maintenant
indépendants les uns des autres, correctement.

247
00:14:43,150 --> 00:14:49,281
Et vous pouvez maintenant observer
la dynamique très intéressantes ici.

248
00:14:49,492 --> 00:14:50,850
Ici, dans ce cas particulier,

249
00:14:50,850 --> 00:14:55,436
vous pouvez voir que, fondamentalement,
deux des simulations,

250
00:14:55,436 --> 00:14:58,310
vous avez une situation où
l'un des allèles va à la fixation

251
00:14:58,310 --> 00:15:01,093
et l'autre se perd dans la population.

252
00:15:01,164 --> 00:15:04,148
Eh bien, peut-être c'est trois,
ce n'est pas trés clair ici,

253
00:15:04,148 --> 00:15:05,853
quelle que soit cette ligne grise
va à la fixation,

254
00:15:05,853 --> 00:15:09,105
mais nous allons recharger cela,
nous allons regarder un autre cas.

255
00:15:09,211 --> 00:15:12,673
Ici donc en fait, quelques
un vont à la fixations.

256
00:15:12,717 --> 00:15:15,863
1, 2, 3 ... 4 des simulations vont à la fixation.

257
00:15:16,020 --> 00:15:20,979
Il semble que le violet ici aussi
va à la fixation ou le A1 se perd,

258
00:15:20,987 --> 00:15:23,533
mais en conséquence, 2 vont à la fixation,

259
00:15:23,533 --> 00:15:27,596
et il n'y a que quelques-uns, 1, 2, 3, 4, 5
correspondant qui restent

260
00:15:27,596 --> 00:15:31,425
où la variation génétique
n'a pas encore été perdue.

261
00:15:31,425 --> 00:15:34,196
Et cela est tout à fait agréable, vous pouvez
recharger ceci plusieurs fois

262
00:15:34,196 --> 00:15:36,843
et vous pouvez voir
les différentes dynamiques.

263
00:15:36,843 --> 00:15:40,108
La plupart du temps,
environ la moitié du temps

264
00:15:40,108 --> 00:15:45,014
il semble que la variation génétique reste
à peu près dans la moitié des simulations,

265
00:15:45,014 --> 00:15:50,304
un des allèles va à la fixation
et vous perdez toute variation génétique.

266
00:15:50,544 --> 00:15:51,632
Voilà donc c'est vraiment intéressant.

267
00:15:51,632 --> 00:15:53,751
Maintenant, nous avons ce système en place,

268
00:15:53,751 --> 00:15:57,652
ces simulations stochastiques
au hasard de la dérive génétique

269
00:15:57,652 --> 00:15:59,677
Alors maintenant, nous pourrions
aller et jouer avec ces valeurs.

270
00:15:59,677 --> 00:16:02,620
Revenons au code, par exemple,

271
00:16:02,620 --> 00:16:07,060
et nous allons définir la taille
de la population à 200,

272
00:16:07,060 --> 00:16:11,678
et aussi les générations ici,
nous allons faire un peu plus court

273
00:16:11,678 --> 00:16:15,084
à 200 pas de temps,
d'accord, 200 générations.

274
00:16:15,103 --> 00:16:19,068
Donc, nous allons enregistrer cela,
et revenir en arrière et recharger cela.

275
00:16:19,068 --> 00:16:20,472
Voici ce que nous pouvons voir.

276
00:16:20,472 --> 00:16:23,666
Ceci est maintenant la résolution un peu plus élevé,
car il est à seulement 200 générations.

277
00:16:23,717 --> 00:16:29,087
Certains des simulations vont
à la fixation,et quelques-uns non.

278
00:16:30,297 --> 00:16:31,785
C'est interessant.

279
00:16:31,785 --> 00:16:33,768
Maintenant, nous pourrions dire:
«Eh bien, vous savez quoi,

280
00:16:33,768 --> 00:16:38,342
nous allons réduire la taille de
la population à seulement 20 individus ".

281
00:16:38,354 --> 00:16:42,789
Nous avons donc mis <i> n </ i> à 20,
nous allons revenir au navigateur.

282
00:16:42,853 --> 00:16:48,544
Et regardez ceci. Dans tous les dix simulations,
la variation génétique est complètement perdu.

283
00:16:49,004 --> 00:16:52,303
L'allèle A1 sera soit perdu
et A2 ira à la fixation

284
00:16:52,303 --> 00:16:54,241
ou l'allèle A1 va à la fixation.

285
00:16:55,848 --> 00:17:00,172
Cela se produit à des vitesses différentes ici.
Chacun d'entre eux est allé très vite.

286
00:17:00,263 --> 00:17:04,492
Voilà en fait un où il ne se perd pas
par la génération 200.

287
00:17:04,492 --> 00:17:08,077
Je pense que ce assez rare,
mais bien sûr, il peut parfois se produire.

288
00:17:08,077 --> 00:17:09,981
Voici un autre.

289
00:17:09,981 --> 00:17:15,636
Mais vous pouvez voir, en général, très rapidement
une telle petite taille de la population

290
00:17:15,636 --> 00:17:19,004
à l'intérieur de typiquement
moins de 100 générations,

291
00:17:19,004 --> 00:17:22,362
toute la diversité génétique est perdu
de cette population.

292
00:17:22,362 --> 00:17:25,054
Ainsi, lorsque vous avez
de petites tailles de population,

293
00:17:25,054 --> 00:17:28,083
les effets de la dérive génétique
sont très, très fort.

294
00:17:28,083 --> 00:17:33,514
En fait, allons maintenant
et augmenter la taille de la population,

295
00:17:33,514 --> 00:17:38,916
pas à 200, mais en fait, dans un autre
ordre de grandeur, à 2000.

296
00:17:38,916 --> 00:17:41,657
Enregistrons cela, revenons.

297
00:17:41,657 --> 00:17:43,526
Donc, cela est maintenant le contraire.

298
00:17:43,631 --> 00:17:49,601
Vous avez toujours la dérive ici, et
vous pouvez recharger ceci plus de fois.

299
00:17:49,601 --> 00:17:52,132
Il semblera toujours à peu près la même.

300
00:17:52,132 --> 00:17:56,605
Et vous savez, éventuellement
certains d'eux iront à la fixation.

301
00:17:56,605 --> 00:17:58,544
Mais après 200 générations,

302
00:17:58,544 --> 00:18:01,242
vous avez encore la majeure partie
de la diversité génétique.

303
00:18:01,242 --> 00:18:07,184
Vous pouvez voir clairement l'effet de la dérive
et comment elle devient plus fort au fil du temps,

304
00:18:07,184 --> 00:18:10,055
juste parce que ces effets
ont commencé à accumuler,

305
00:18:10,055 --> 00:18:12,846
mais clairement l'effet est ici beaucoup,
beaucoup plus faible

306
00:18:12,846 --> 00:18:16,835
lorsque nous avons une taille de
la population qui est 100 fois plus grandes.

307
00:18:16,835 --> 00:18:20,045
Je viens de dire, dans ce cas aussi

308
00:18:20,045 --> 00:18:24,326
avec cette grande taille de la population
de 2000, il ira à la fixation.

309
00:18:24,326 --> 00:18:27,032
Est-ce vraiment vrai?
Eh bien, nous pouvons le tester.

310
00:18:27,032 --> 00:18:31,003
Mettons simplement le numéro
de génération ici à 2000.

311
00:18:31,003 --> 00:18:32,562
Donc, cela pourrait prendre
un peu plus long

312
00:18:32,562 --> 00:18:35,573
car c'est maintenant dix fois
plus de calculs

313
00:18:35,573 --> 00:18:38,312
mais nous allons le recharger ...yup.

314
00:18:38,312 --> 00:18:41,622
Donc vous pouvez voir la diversité ici
c'est déjà beaucoup plus grande.

315
00:18:41,622 --> 00:18:43,649
Je n'ai pas vu quelque chose
aller à la fixation.

316
00:18:43,649 --> 00:18:49,623
En fait, ici, celui-ci va à la fixation
autour de la génération 1000.

317
00:18:50,533 --> 00:18:53,323
Aucun ici, bien que ce soit très proche.

318
00:18:53,323 --> 00:18:58,270
Ici et autour de la génération 2000,
l'allèle A2 est allé à la fixation

319
00:18:58,270 --> 00:19:00,643
l'allèle A1 est perdu.

320
00:19:00,643 --> 00:19:05,716
Et en fait, disons simplement augmentant
cela à 20.000 générations.

321
00:19:05,716 --> 00:19:08,484
Donc, si nous rechargeons cela, cela va
maintenant prendre un certain temps,

322
00:19:08,484 --> 00:19:11,744
car il doit calculer un peu,

323
00:19:11,744 --> 00:19:16,346
mais elle finira par le faire, je l'espère.

324
00:19:16,346 --> 00:19:17,656
Et ici il est.

325
00:19:17,656 --> 00:19:21,625
Vous pouvez donc voir maintenant
plus de 20.000 générations,

326
00:19:21,625 --> 00:19:24,989
l'ensemble de ces 10 simulations
effectivement vont à la fixation.

327
00:19:25,127 --> 00:19:26,926
Je vais recharger cette fois.

328
00:19:27,115 --> 00:19:30,406
Donc, cela est essentiellement
le même effet que précédemment,

329
00:19:30,406 --> 00:19:36,995
quand nous avions la taille de la population 20,
et seulement 200 générations ici aussi.

330
00:19:37,052 --> 00:19:42,495
Tout d'entre eux vont à la fixation par ici,
autour de la génération de 10.000.

331
00:19:43,154 --> 00:19:48,114
Mais vous pouvez voir dans ces simulations
les principaux effets de la dérive.

332
00:19:48,114 --> 00:19:54,165
Alors ce qui se passe avec la dérive c'est que
vous finirez par perdre la variation génétique

333
00:19:54,165 --> 00:19:58,726
parce que les allèles iront à la fixation,
ce qui signifie que d'autres se perdent.

334
00:19:58,726 --> 00:20:02,795
C'est la conséquence ultime
de la dérive génétique.

335
00:20:03,205 --> 00:20:05,666
Lorsque cela se produit, à quelle vitesse?

336
00:20:05,666 --> 00:20:10,156
Décidément dépendante
de la taille de la population.

337
00:20:10,156 --> 00:20:14,335
Si la population est très faible,
ceci se produit beaucoup plus rapidement.

338
00:20:14,335 --> 00:20:18,056
Si elle est très grand,
cela se produira beaucoup plus lent.

339
00:20:18,056 --> 00:20:23,175
Voilà comment la taille de la population
se rapporte à la dérive génétique.

340
00:20:23,175 --> 00:20:27,013
Et intuitivement,
cela a un sens je l'espère.

341
00:20:27,013 --> 00:20:30,316
Il est juste comme un exemple
de lance de pièce.

342
00:20:30,316 --> 00:20:35,808
Si nous ne renversons quelques pièces
de monnaie, l'effet peut être très traumatisant.

343
00:20:35,808 --> 00:20:40,067
Vous obtenez très rapidement les cas
où nous avons neuf têtes une queue

344
00:20:40,067 --> 00:20:44,176
ou même dix têtes, 0 queues.

345
00:20:44,182 --> 00:20:50,424
Mais si vous avez 1.000 pièces de monnaie
les données vont jamais se passer.

346
00:20:50,424 --> 00:20:56,413
Et parce que ces effets s'accumuler si vous
avez de grandes tailles de population,

347
00:20:56,413 --> 00:21:00,084
ces effets prendront du temps,
mais ils finiront par accumuler

348
00:21:00,084 --> 00:21:04,123
dans une mesure telle qu'elle
va perdre l'un ou l'autre allele

349
00:21:04,123 --> 00:21:08,383
et finalement, même si vous aviez
des allèles multiples, non seulement deux,

350
00:21:08,383 --> 00:21:12,213
tous d'entre eux seraient perdus,
sauf un qu'ira à la fixation.

351
00:21:12,717 --> 00:21:15,938
Félicitations pour l'application du présent.
Ceci est tout à fait un aliment.

352
00:21:15,938 --> 00:21:19,406
Vous êtes maintenant à la mise en œuvre
de simulation multiple,

353
00:21:19,406 --> 00:21:23,638
plusieurs simulations stochastiques
de dérive génétique en javascript,

354
00:21:23,638 --> 00:21:28,725
en utilisant la bibliothèque D3 traçage,
et nous ne sommes même pas dans le chapitre 4,

355
00:21:28,725 --> 00:21:30,898
donc tout à fait l'exploit, bien fait.

356
00:21:30,898 --> 00:21:34,760
Maintenant, nous avons mis ce tableau
à deux dimensions en utilisant.

357
00:21:34,760 --> 00:21:37,779
J'espère que vous avez eu un peu de temps
pour comprendre cela.

358
00:21:37,779 --> 00:21:40,640
Et dans les prochains chapitres,

359
00:21:40,640 --> 00:21:44,758
nous allons regarder certains cas spéciaux,
de phénomène intéressant

360
00:21:44,758 --> 00:21:46,609
dans le contexte de la dérive génétique,

361
00:21:46,609 --> 00:21:52,428
et nous allons également obtenir un peu plus
de mathématique sur la dérive génétique.

362
00:21:52,428 --> 00:21:54,390
Donc, je vous verres dans
la prochaine leçon.

