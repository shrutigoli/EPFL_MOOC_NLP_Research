1
00:00:03,131 --> 00:00:03,810
Welcome back!

2
00:00:03,967 --> 00:00:06,185
Nature, In Code, we are
in Chapter 6, Lecture 5.

3
00:00:06,348 --> 00:00:09,183
In this lecture we will take a look
at Balancing Selection.

4
00:00:09,334 --> 00:00:12,213
Alright, just as a reminder,
Balancing selection means that

5
00:00:12,375 --> 00:00:14,412
the hetero zygote
effect is negative.

6
00:00:14,599 --> 00:00:19,738
In other words, the fitness of the
 genotype is actually larger than 1.

7
00:00:19,912 --> 00:00:24,342
It is indeed the hereto zygote has
the highest fitness of the three

8
00:00:24,520 --> 00:00:28,933
genotypes and that's why
we get this kind of fitness peak.

9
00:00:29,371 --> 00:00:32,358
So what does that mean
in terms of Delta P

10
00:00:32,558 --> 00:00:34,946
and in terms of the 
dynamic of p over time?

11
00:00:35,146 --> 00:00:38,684
Well we have the Java script code
in place so let's go ahead and

12
00:00:38,881 --> 00:00:42,480
find out. Alright so I have both
files open here, Delta p versus

13
00:00:42,652 --> 00:00:44,315
p and p versus time.

14
00:00:44,480 --> 00:00:49,733
So the first that I want to modify 
quickly is the one Delta p versus p.

15
00:00:49,895 --> 00:00:52,788
In here we don't need to change
anything other than actually

16
00:00:52,950 --> 00:00:55,237
changing the value of h.

17
00:00:55,401 --> 00:01:00,277
So now we would like to set this to 
minus, for example, 0.5 and now

18
00:01:00,452 --> 00:01:03,640
we can simply save this and that's
all we need to change here.

19
00:01:03,823 --> 00:01:05,773
We simply change the value of h.

20
00:01:06,132 --> 00:01:11,797
Then we go to the browser and here
is our Delta p versus p and we are

21
00:01:11,972 --> 00:01:15,988
going to reload this and this is
now what it looks like. 

22
00:01:16,632 --> 00:01:19,507
So you can see a fundamental 
change here.

23
00:01:20,351 --> 00:01:25,830
That is, we still see Delta p being
positive for a large fraction here

24
00:01:26,018 --> 00:01:30,355
 of this space, but there is one
point here where it's actually zero

25
00:01:30,532 --> 00:01:31,857
in the middle.

26
00:01:32,041 --> 00:01:38,535
So not only at 1, p1 and p0, 
but also at something like p0.75.

27
00:01:39,989 --> 00:01:42,953
And in this region here it's in 
fact a negative. 

28
00:01:43,669 --> 00:01:44,767
So what does that mean?

29
00:01:44,975 --> 00:01:46,330
Well it means the following.

30
00:01:46,482 --> 00:01:49,603
Imagine you are somewhere here now
 in the simulation you have a p

31
00:01:49,753 --> 00:01:53,528
of I don't know 0.1 or you know
 slightly above 0.

32
00:01:53,705 --> 00:01:59,081
Your Delta p is positive so the
next  generation your p is larger so

33
00:01:59,256 --> 00:02:02,369
you are essentially moving towards
the right here, in this space.

34
00:02:02,861 --> 00:02:06,118
And because Delta p in this 
space keeps being positive

35
00:02:06,306 --> 00:02:09,751
you keep moving to the right here, 
you keep increasing p.

36
00:02:10,411 --> 00:02:15,168
And so this happens all the time, 
then it will slow down, until you

37
00:02:15,318 --> 00:02:22,492
reach p roughly 0.75 here, from
this graph, and then it stops.

38
00:02:22,941 --> 00:02:27,346
Then Delta p is 0, so p is not 
going to change.

39
00:02:28,881 --> 00:02:32,641
On the other hand if you would start
here from a condition were p was

40
00:02:32,829 --> 00:02:36,757
very large and close to one but not
quite one, well Delta p would be

41
00:02:36,937 --> 00:02:40,441
negative. In other words, in the
next generation your p is going

42
00:02:40,595 --> 00:02:42,858
to be a little bit reduced

43
00:02:43,028 --> 00:02:46,340
so you are actually moving to the 
left here on this axis and because

44
00:02:46,497 --> 00:02:49,802
Delta p keeps being negative, you
keep moving to the left, keep moving

45
00:02:49,964 --> 00:02:51,026
to the left, to the left.

46
00:02:51,178 --> 00:02:57,076
and same thing here, eventually, 
you will reach this point of 0.75

47
00:02:57,543 --> 00:03:00,050
and then Delta p is 0.

48
00:03:00,308 --> 00:03:05,825
So same thing you will also converge
to this equilibrium value of 0.75.

49
00:03:06,802 --> 00:03:10,813
So let's use now our other code the
one we developed in p versus time

50
00:03:11,002 --> 00:03:13,090
to see if this is really true.

51
00:03:13,278 --> 00:03:16,889
So p versus time is this one here
right before in the directional

52
00:03:17,048 --> 00:03:19,071
selection we saw it
go straight to one. 

53
00:03:19,364 --> 00:03:23,484
So we can very quickly test this
by simply going back to our code.

54
00:03:23,813 --> 00:03:27,441
Now we are going to open the file p
versus time, so that's the one here

55
00:03:27,616 --> 00:03:33,882
and, I am going to change this
value here to -0.5

56
00:03:34,041 --> 00:03:35,812
so that we have balancing selection.

57
00:03:35,969 --> 00:03:38,671
I'm gonna save this and I'm gonna
go back to the browser and

58
00:03:38,833 --> 00:03:39,596
I'm gonna reload

59
00:03:39,759 --> 00:03:44,882
this and indeed as you can see this
goes up as expected relatively

60
00:03:45,072 --> 00:03:50,603
 quickly but then it flattens out
and it  is here flatten out at this

61
00:03:50,790 --> 00:03:55,680
 value, somewhere here between 7 and
 8 so roughly 0.75 probably.

62
00:03:55,963 --> 00:03:59,627
But what we seen is that this seems
to be happening independent of

63
00:03:59,775 --> 00:04:00,988
where we are with p.

64
00:04:01,144 --> 00:04:04,932
What I would like to do is I'd like
to extend the code that generates

65
00:04:05,107 --> 00:04:08,983
this figure a little bit by having
many simulations at the same time

66
00:04:09,183 --> 00:04:12,960
that start at different values of p
and we want to see what happens

67
00:04:13,120 --> 00:04:17,494
 to those. So let's go back to the
code of p versus time and change

68
00:04:17,661 --> 00:04:19,086
the code correspondingly.

69
00:04:19,257 --> 00:04:22,794
Alright so I'm here back in p versus
time,  so I would like to modify

70
00:04:22,969 --> 00:04:25,768
this code here a little bit to have
multiple simulations.

71
00:04:25,946 --> 00:04:30,107
So we are obviously going to 
keep here h-0

72
00:04:30,295 --> 00:04:33,295
but we don't need this p 
anymore because we

73
00:04:33,495 --> 00:04:36,899
are going to have many 
many different types of ps'

74
00:04:37,112 --> 00:04:40,013
at which we start the simulation.

75
00:04:40,292 --> 00:04:44,183
So I'm simply going to 
rename this to initial p.

76
00:04:44,602 --> 00:04:47,851
This is the one, this is sort of the
minimum p that I would like to

77
00:04:48,033 --> 00:04:49,783
have here.

78
00:04:49,987 --> 00:04:56,072
And then I want to have many other 
initial ps increasing going to

79
00:04:56,284 --> 00:04:59,284
you know close to 1 
but not quite for the

80
00:04:59,464 --> 00:05:02,464
initial p value of the
particular simulation.

81
00:05:02,984 --> 00:05:07,980
All these initial p values 
I'm ultimately going to store

82
00:05:08,168 --> 00:05:12,399
in some array so I'm going
to call this p values

83
00:05:13,704 --> 00:05:16,704
and I'm going to initialize this
as an empty array.

84
00:05:17,152 --> 00:05:20,014
So this is where I'm going to store 
the initial p values

85
00:05:20,189 --> 00:05:23,264
for many different simulations.

86
00:05:24,613 --> 00:05:25,160
Good!

87
00:05:25,350 --> 00:05:28,410
So data we can keep, 
we still need the data array.

88
00:05:28,654 --> 00:05:32,412
In this case it's going to be two 
dimensional as we had it back in

89
00:05:32,587 --> 00:05:38,122
Chapter 3, and 400 generations 
is still fine so all good here.

90
00:05:38,672 --> 00:05:41,967
So the first thing I'd like to do is
I'd like  to fill up this p values

91
00:05:42,117 --> 00:05:44,092
array with values.

92
00:05:44,249 --> 00:05:48,792
And I am going to do this by 
introducing a new type of a loop

93
00:05:48,979 --> 00:05:51,323
and this is simply called 
the while loop.

94
00:05:51,727 --> 00:05:54,023
You have encountered before 
the do while loop.

95
00:05:54,204 --> 00:05:59,049
The do while loop does something at
least once and then it checks if

96
00:05:59,211 --> 00:06:03,463
the condition is true in the while
clause and it will just continue

97
00:06:03,702 --> 00:06:06,528
to reiterate while
the condition is true.

98
00:06:06,705 --> 00:06:12,146
Here in the while loop we only have
the while clause and so basically

99
00:06:12,333 --> 00:06:16,024
we simply going to test is this
true in here and then we are going

100
00:06:16,200 --> 00:06:19,709
to reiterate. So it's kinda
simplified version of do while loop.

101
00:06:19,891 --> 00:06:23,246
The condition I want to have
here is that the initial p

102
00:06:23,408 --> 00:06:31,056
initial p value is smaller than 1.

103
00:06:31,272 --> 00:06:34,128
Okay, I don't want to go up to 1
because this will be a trivial

104
00:06:34,316 --> 00:06:36,686
simulation, because
p will just remain at 1.

105
00:06:36,948 --> 00:06:44,629
Okay so while, why it is smaller, 
basically push the corresponding

106
00:06:44,804 --> 00:06:46,477
value into this p value's array.

107
00:06:46,664 --> 00:06:52,074
So p values push, oops!

108
00:06:53,648 --> 00:06:59,894
Okay put this initial p value,
in the first time is 0.01 as we

109
00:07:00,048 --> 00:07:01,135
defined it up

110
00:07:01,295 --> 00:07:05,030
in the global variables and then
we are essentially going to

111
00:07:05,200 --> 00:07:13,621
 increment it by, let's say, 
initial p =initial p + 0.01.

112
00:07:14,245 --> 00:07:18,045
So we get lots of simulations that 
are only different in one aspect

113
00:07:18,270 --> 00:07:21,146
which is that the initial
p value is 0.01 larger

114
00:07:21,344 --> 00:07:23,269
than the previous simulation.

115
00:07:23,450 --> 00:07:28,472
Okay so this will now fill up this
p values array with different

116
00:07:28,655 --> 00:07:30,517
types of initial ps'.

117
00:07:31,308 --> 00:07:31,830
Good!

118
00:07:32,019 --> 00:07:34,865
So now I need to run
 multiple simulations

119
00:07:35,031 --> 00:07:37,616
here we only ran one simulation.

120
00:07:37,807 --> 00:07:41,555
So what I'm actually going to do is
I'm going to wrap this into

121
00:07:41,714 --> 00:07:42,852
a function

122
00:07:43,017 --> 00:07:49,087
and I'm going to call this function,
run simulation, okay run simulation

123
00:07:49,703 --> 00:07:52,346
and then I'm going to wrap 
this whole thing here.

124
00:07:52,526 --> 00:07:56,033
So this whole thing here, 
I'm going to move these over

125
00:07:56,208 --> 00:07:58,016
I'm going to indent it correctly.

126
00:07:58,263 --> 00:08:01,392
All of this is now wrapped
into this function.

127
00:08:01,590 --> 00:08:06,136
But I'm calling it run simulation
and I'm gonna pass it one value

128
00:08:06,304 --> 00:08:08,545
which is this p value,
that it should start with

129
00:08:08,736 --> 00:08:11,860
so I'm simply going to 
call this parameter p.

130
00:08:13,410 --> 00:08:18,262
So now here I'm pushing p values 
into the data array but because

131
00:08:18,424 --> 00:08:21,187
this is going to be a two
dimensional array actually don't

132
00:08:21,350 --> 00:08:22,425
want to do this.

133
00:08:22,589 --> 00:08:25,640
What I want to do is, I want to have
some temporary array where I am

134
00:08:25,803 --> 00:08:29,234
gonna push the p values of a
simulation and then at the end

135
00:08:29,444 --> 00:08:34,599
I'm going to put this entire array
of p values of a single simulation

136
00:08:34,774 --> 00:08:38,806
into the data array. This is exactly
identical to what we did before

137
00:08:39,020 --> 00:08:40,783
in the drift simulations.

138
00:08:40,941 --> 00:08:45,741
So I'm gonna call this temporary
array that contains all

139
00:08:45,916 --> 00:08:48,687
the p values of one simulation,
results.

140
00:08:48,887 --> 00:08:51,837
I'm gonna initialize this
as an empty array.

141
00:08:52,553 --> 00:08:57,006
And so now basically, here 
what we doing is exactly the 

142
00:08:57,155 --> 00:08:59,566
same we are gonna run
 this a couple of generations.

143
00:08:59,728 --> 00:09:03,959
q is of course 1-p, then we are 
calculating Delta p correctly

144
00:09:04,134 --> 00:09:07,134
we are updating p correctly
but now we are pushing p

145
00:09:07,359 --> 00:09:09,928
not into data but 
into this temporary

146
00:09:10,153 --> 00:09:11,521
array, results.

147
00:09:12,015 --> 00:09:14,874
So this now over one
simulation fills up this

148
00:09:15,074 --> 00:09:18,961
results array with the values
of p for each generation.

149
00:09:19,158 --> 00:09:23,444
And then at the end we cannow push
this results array into

150
00:09:23,604 --> 00:09:27,980
the data array. So here
I'm gonna say, data push, results.

151
00:09:28,445 --> 00:09:32,046
Okay, so this is how we create
this two dimensional array.

152
00:09:35,205 --> 00:09:38,479
Alright, so almost there so now I 
have this run simulation function

153
00:09:38,667 --> 00:09:42,427
I simply need to call this now,
you know, how many ever times

154
00:09:42,615 --> 00:09:46,975
I want to, depending on how 
many initial p values I have.

155
00:09:47,152 --> 00:09:48,101
How many do I have?

156
00:09:48,292 --> 00:09:51,593
Well, how ever many I put 
here in this p values array.

157
00:09:51,751 --> 00:09:54,990
We just need to look at the length
properties of this p values array

158
00:09:55,153 --> 00:09:57,465
and then we will know how
often we need to do this.

159
00:09:57,635 --> 00:10:01,762
So I'm gonna set up
a for loop here for var i =0, 

160
00:10:01,947 --> 00:10:04,947
so I here simply needs 
to be smaller than

161
00:10:05,308 --> 00:10:09,766
p values dot length and
of course we are going

162
00:10:09,922 --> 00:10:12,137
increment here i by 1.

163
00:10:13,735 --> 00:10:16,556
And so now what we are doing 
is we are calling this function

164
00:10:16,719 --> 00:10:19,184
 run simulation


165
00:10:19,359 --> 00:10:22,359
okay and we need to pass
one p value.

166
00:10:22,763 --> 00:10:23,755
Which p value?

167
00:10:24,071 --> 00:10:29,486
Well the one that we are now 
currently at in this p values array.

168
00:10:29,659 --> 00:10:33,081
So the i-th element of p values.

169
00:10:34,022 --> 00:10:35,547
And that's pretty much it.

170
00:10:35,740 --> 00:10:38,736
So data is now a two dimensional
array but this draw line chart

171
00:10:38,892 --> 00:10:42,247
 function was created to be able 
to deal with this.

172
00:10:42,424 --> 00:10:45,645
Here we are still going
to plot generation p and 

173
00:10:45,822 --> 00:10:48,822
we still don't want
a legend so all this is fine.

174
00:10:49,095 --> 00:10:51,781
So we can save this code
and now go to the browser

175
00:10:51,956 --> 00:10:54,956
and reload this p versus time.

176
00:10:55,193 --> 00:10:58,193
So here is p versus
time let's reload this.

177
00:10:58,984 --> 00:10:59,509
Error!

178
00:10:59,990 --> 00:11:01,513
Okay, something is not working.

179
00:11:01,657 --> 00:11:04,325
So I'm actually glad that
his is finally happening, 

180
00:11:04,438 --> 00:11:07,275
so because now we can do
something that's called debugging.

181
00:11:07,450 --> 00:11:10,559
Okay, so we are going to take a look
here at the Java script console

182
00:11:10,722 --> 00:11:12,760
somewhere here I made a mistake.

183
00:11:12,901 --> 00:11:17,301
On caught reference,
initial p is not defined.

184
00:11:17,472 --> 00:11:20,863
Alright so let's go ahead
and see what's going on here.

185
00:11:21,185 --> 00:11:23,935
So this is initial p,
this is initial p as well.

186
00:11:24,118 --> 00:11:26,109
So why would it
say it's not defined?

187
00:11:26,315 --> 00:11:29,983
Because I defined it,
oh no I didn't define it here

188
00:11:30,188 --> 00:11:33,866
because he is a typo
so I need to fix this typo

189
00:11:34,141 --> 00:11:38,935
alright save, go back
to the browser, reload

190
00:11:39,485 --> 00:11:40,300
Here we are.

191
00:11:40,475 --> 00:11:43,657
No more mistakes here, so I'm going
to close the Java script console.

192
00:11:44,585 --> 00:11:47,736
And this now is
Balancing selection

193
00:11:47,961 --> 00:11:50,961
and I find it quite beautiful
 if you plot it like this.

194
00:11:51,122 --> 00:11:55,157
So you can see here, independent
of where you start with p

195
00:11:55,357 --> 00:12:00,789
you are actually going to converge
to this equilibrium value here

196
00:12:01,106 --> 00:12:05,529
of, it seems to be
exactly between 0.7 and 0.8.

197
00:12:06,134 --> 00:12:06,973
Why is that?

198
00:12:07,148 --> 00:12:09,266
Well remember we
have balancing selection, 

199
00:12:09,441 --> 00:12:10,991
so we have this peak where

200
00:12:11,253 --> 00:12:14,216
the hetero zygote actually
has the highest fitness.

201
00:12:14,346 --> 00:12:20,045
So when we start with
very low levels of A2

202
00:12:20,206 --> 00:12:23,193
then whenever we create the

203
00:12:23,356 --> 00:12:25,893
hetero zygote this
has the highest fitness.

204
00:12:26,073 --> 00:12:28,759
So ideally you would like to
have all hetero zygotes

205
00:12:28,934 --> 00:12:30,691
but as we know
this is not possible

206
00:12:30,879 --> 00:12:34,016
because when hetero zygotes 
mate under Mendelian inheritance

207
00:12:34,266 --> 00:12:36,265
you get half hetero zygotes

208
00:12:36,453 --> 00:12:39,847
but you also always get 
the homo zygotes, and so

209
00:12:40,035 --> 00:12:44,778
as a consequence this will not go
up to 1 because the hetero zygote

210
00:12:44,962 --> 00:12:50,028
which is always both 
alleles is the fittest

211
00:12:50,191 --> 00:12:52,139
and that's why you
have this equilibrium,

212
00:12:52,306 --> 00:12:55,371
but in some sense this is actually
quite a nice situation

213
00:12:55,508 --> 00:13:01,341
that simply means that you 
actually maintain genetic diversity,

214
00:13:01,726 --> 00:13:04,848
and that's something that you
wouldn't in the case of directional

215
00:13:05,010 --> 00:13:08,123
selection because one of the
alleles is going to be out competed.

216
00:13:08,288 --> 00:13:12,730
So this value looks interesting, 
can this somehow be calculated?

217
00:13:13,142 --> 00:13:18,257
Yes it can, you can actually
calculated this value mathematically.

218
00:13:18,439 --> 00:13:21,968
This equilibrium value can be 
calculated relatively easily.

219
00:13:22,181 --> 00:13:25,181
I'm going to call it p*

220
00:13:25,439 --> 00:13:33,489
and it has a very simple formula
and that is h-1/2h-1

221
00:13:33,892 --> 00:13:37,841
So,for example, if we would 
put it in the h value

222
00:13:38,046 --> 00:13:41,225
that we have in our codec
sample minus 0.05

223
00:13:41,425 --> 00:13:56,069
then we would here get 
-1.5/ (2*-0.05=-1, -1-1=-2,)=0.75.

224
00:13:56,599 --> 00:13:59,341
Okay, so we calculated
this value now as 0.75

225
00:13:59,503 --> 00:14:01,198
and that's exactly 
what we saw here.

226
00:14:01,351 --> 00:14:04,240
We thought it was somewhere
between 0.7 and 0.8.

227
00:14:04,433 --> 00:14:07,308
It turns out its 
actually exactly at 0.75.

228
00:14:07,917 --> 00:14:10,911
You also might have 
noticed that what was not

229
00:14:11,099 --> 00:14:15,971
in this equation h-1/2h-1, was s.

230
00:14:16,444 --> 00:14:19,653
So if we go back to 
the code this s here,

231
00:14:19,866 --> 00:14:22,715
the selection 
coefficient it does not

232
00:14:22,890 --> 00:14:25,079
affect where this 
equilibrium is going to be.

233
00:14:25,250 --> 00:14:27,059
So what does it affect then?

234
00:14:27,270 --> 00:14:28,939
Well, let's go ahead and find out.

235
00:14:29,115 --> 00:14:33,105
Let's change this value here to
0.2 okay, so we double this value.

236
00:14:33,485 --> 00:14:35,728
So the selection coefficient
is now double

237
00:14:35,953 --> 00:14:37,265
and if we save this and go

238
00:14:37,453 --> 00:14:39,421
back to the browser and reload.

239
00:14:39,583 --> 00:14:42,599
We will find that the 
same thing happens

240
00:14:42,761 --> 00:14:44,233
but now it just happens faster

241
00:14:44,395 --> 00:14:46,219
because selection
is stronger, right

242
00:14:46,381 --> 00:14:48,974
because the selection 
coefficient is larger.

243
00:14:49,181 --> 00:14:52,968
Let's go back to the code and now 
reduce this value

244
00:14:53,142 --> 00:14:56,142
so not to 0.1 to 0.05.

245
00:14:56,698 --> 00:14:59,622
Okay so now if we go back 
to the browser

246
00:15:03,008 --> 00:15:04,775
we can still see the
exact same thing

247
00:15:04,936 --> 00:15:07,698
thing so again it goes to the same
exact value as it should

248
00:15:07,878 --> 00:15:10,484
because it only depends on h 
but we didn't change h

249
00:15:10,646 --> 00:15:13,408
but now this process is
just simply slower.

250
00:15:13,643 --> 00:15:17,670
So s will effect the speed at 
which this process

251
00:15:17,845 --> 00:15:22,305
here happens but not where it's
gonna go to, that is given by h.

252
00:15:22,482 --> 00:15:25,290
So this h value is really 
important not only

253
00:15:25,453 --> 00:15:27,670
does it tell us here 
where this

254
00:15:27,844 --> 00:15:30,494
equilibrium is going to be, 
but it also tells us the type

255
00:15:30,651 --> 00:15:34,054
of selection and so really really 
important value.

256
00:15:34,918 --> 00:15:36,676
So this is now balancing selection

257
00:15:36,867 --> 00:15:39,069
the one type of selection 
that is now

258
00:15:39,251 --> 00:15:42,251
still missing is that of 
disruptive selection.

259
00:15:42,540 --> 00:15:45,964
So now there is one type of selection
we need to look at and that's

260
00:15:46,139 --> 00:15:49,139
that of disruptive selection and
 we will do this in the next lecture.

261
00:15:49,286 --> 00:15:52,186
I'll see you there.

