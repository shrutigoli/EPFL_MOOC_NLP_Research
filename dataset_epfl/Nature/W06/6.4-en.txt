Welcome back, Nature In Code we're in Chapter, Lecture four.
In the previous lecture we learned about three types of selection
Namely directional selection,
Balancing selection and disruptive selection.
So, in this lecture and the following
We are actually going to implement these three types in Java script and we'll see that they have very different dynamics.
So just as a reminder, this is the situation, here we have the three genotypes.
We defined A one A one to have a fitness of one and A two A two to have a reduced fitness namely, one minus S, where S is the selection co-efficient.
And then we said okay the intermediary genotype the hetero zygote is going to have fitness 1-hs and so depending on the value of these ages we get different types of landscapes here.
So if h is larger than one then we get this fitness value in in the sense that the header zygote has the lowest fitness of all three.
If H is smaller than zero we get this fitness peak the hetero zygote has the highest fitness of the three genotypes.
And in the intermediary case where H is between zero and one we have the hetero zygote fitness to be somewhere in between so somewhere in between one and one minus S and this will then generate a kind of a slope and we said okay these are the three types the slope will cause directional selection the peak would cause balancing selection and the value would cause disruptive selection.
So what we are going to do now is that we are now going
to implement these three types of selections.
And how are we gonna do this? 
So what are we exactly going to measure or plot?
So here is what we are gonna do.
We gonna plot actually two things the first is that we are gonna plot delta P so to change in a leo frequency of of M one as a function of P.
So given any P here between zero and one.
What will the change in a leo frequency be?
The other thing that we are gonna plot is something that we are more familiar with which essentially is P as it changes overtime.
This is similar to what we did in a drift chapter where we plotted P as it changed overtime.
So we are gonna do these two things importantly of course we have no stochastic effects here anymore remember, we went back to the assumption of infinite population size so that we can study the effect of selection in isolation.
So what we are gonna do now is gonna go ahead and create these two plots in Java script.
There is one thing we need to be a bit careful about when we implement this plot here.
So far we haven't really spoken much about the X- axis here we just assumed that we are going to plot each time stamp here on the X-axis.
Here these are not time steps these are in fact, many values between zero and one, perhaps you know, in increments of point zero one.
So we'll have to be, we'll have to be a bit careful that we implement this correctly but i'll walk you through this and the draw line chart function that we keep on using already has you covered.
Alright, so let's go ahead and implement this in Java script.
Alright we have here our drift and selection file from previous lectures
Let's just go ahead and use this as a template.
So here you have the code of drift and selection.
Up here you have all the three code, the function draw line chart, but we don't wanna touch that so just delete anything but the draw line chart function so delete this part here.
Okay, so now we can start coding here
Before we do this let's be sure that we save this as a new file so save and here i am gonna make sure I store this in the codec samples and i'm gonna call this
Delta P vs P, cause that's what we are essentially plotting.
Delta P vs P.
I'm gonna save this and now
I can start coding here.
So what are we gonna do?
Well first of all, we need to define those two important values the selection co-efficient and the heterozygous effect so we gonna set this to point zero one.
This is a very strong selection co-efficient but you know you can later change this if you want to.
And then we gonna set the hetero zyogote effect to well anything between zero and one we said.
So you know let's set it to point two for example.
Good.
So now what are we gonna do?
Well we would like to calculate
Delta P, for many many steps for many values of P and then we would like to plot this.
So what we gonna do is we going to calculate this for many values of P and then we are gonna push it into an array and then we are gonna hand that array over to the draw line chart function essentially as we did in Chapter 3. So I'm gonna set up this variable here.
Data that will contain the data that we want to plot in particular here is gonna be the Delta Ps and then i'm gonna set up a for loop.
So this is now going to look slightly different, so I am gonna start at zero, but now i would like this loop to stop at one.
So I wanna go from zero to one with my values.
So here i'm going to say, okay I as long as it's smaller or equal to one it's fine, but that's when i stop.
And then what i am going to do is I'm going to say now i would like to increment my I not by one but by point zero one
Okay, so what this does is that this loop goes from zero to one in steps of point zero one.
So my I is essentially exactly what
I want for my P, so i can say here var P is, this is essentially the value that I have in I.
So i'm now incrementing the P value or the I value by steps of point zero one, going from zero to one and that's exactly what we're gonna have on the X axis.
Correspondingly my Q is as always one minus P
And so now I'm going to implement this formula that we have just developed earlier in this chapter for Delta P.
And so this formula if you remember it, or look it up, it is okay, Delta p equals, first of all we have here, so we have a term divided by another term.
So i'm just going to set up those parentheses right away.
So here we have in the numerator we have P times Q times S times, and now we have here P times
H plus Q times, something which is one minus H, and now I want to make sure I'm closing the parentheses here that i opened here.
Quite a few parenthesis but you can easily follow that this is correct.
So here we have one opening parenthesis, we have the second and then we have the third so and here we close one, two, three, so that's correct.
Alright lets move over here.
Here its more straight forward, it's one minus, two times P times
Q times H times,
S minus two, times Q times S.
So this is the formula.
As I said previously a bit of a beast but as you can see thi is totally easy to implement here.
You just have to make sure that you keep track of the parentheses.
But all looking good here.
Alright, so this is essentially what we want to calculate and what we want to plot on the Y-axis so we are gonna push this value here into data. So data push to delta P, oops P.
Good!
So basically job done here, so all we need to do is we need to plot these now and so we gonna do is we're gonna say here draw line chart and then we gonna pass, as before first at data, then the X-axis label so that's gonna be P.
And then the Y-axis label.
That's gonna be Delta P.
And legend, actually don't want a legend but still have to pass something so i'm just going to pass the empty array here.
Before here we plotted effective, well we labelled here the effective population size, and things like that.
But now we don't need that, so I'm just going to pass in an empty array so nothing will be, there will be no legend.
By the way, if you want to be a bit fancier here, we can use the Greek letter for Delta.
So this, to do this we will need to use the Unicode symbol which happens to be "\u0394" that's essentially the
Unicode code for Greek delta.
Okay, let's save this and now let's go to the browser and here we still have our drift and selection so let's open the file here that we just created, which we called, Delta P vs P.
You can of cause also open this file from the menu here. File. Open.
Alright, so what do we have here?
Well, we have here something that's interesting namely we have some kind of curve, but first of all it's very flat and it's showing Delta P so that works and it's showing P, but there are a couple of problems here.
So the first problem here is that this seems to be going from zero to one hundred, but that's kinda weird because we said, hey we want this to go from zero to one.
Well it's because by default this function just essentially plots the array indices, and if we go back to the code here
If we go back to this draw line chart function where it's defined we can actually see here that the fifth parameter that we so far ignored is this "x_max value" where we can essentially say, look we don't want this X-axis to be between zero and the number of elements in the array.
We actually want it to be between zero and a particular value.
So here our particular value would be one.
So we would have to pass in one, so let's go ahead and do this.
So, let's just add the fifth parameter here, the 5th argument that we are passing as one.
We are gonna save this and we are gonna reload this and now this is correct.this goes from zero to one.
So the other problem is it still looks very flat and that's because this axis here is also fixed from zero to one by default and that made sense before, when we plotted P over time, because P was
always the value between zero and one, but now it doesn't make sense.
Delta P can be anything, so we kind of need to change the code here.
So let's go back to the code, and again let's scroll up to this function here we can see here that the sixth parameter is called
"y_max_flex".
What does it do?
I programmed it such that if you don't pass this parameter then the Y-axis is going to between zero and one.
However, sometimes you want this to be flexible and span a certain range that allows you to plot all the values but that makes maximum use of the space. So you can do this by just passing the bullion value true as the argument for this parameter. 
And this is exactly what we gonna do and we going to set this to true and we gonna save this.
We going to go back to the browser.
Okay, let's reload this here, and here we go.
This now looks like a much better use of space and you can see here that the Y-axis now spans from zero to something like point zero one seven-ish or so.
This is interesting, this work now, we have the axis figured out, but there is still a tiny little problem here, if you notice here
At zero, Delta P is zero, which is correct, because you don't have any leo, it can go nowhere, but here that's also a bit strange.
Here, if P has actually reached fixation one
Delta P still seems to be slightly positive and that's not possible.
Because, P cannot go above one.
So what is going on here?
Well back at the code we can figure this out, by plotting I here in the for loop.
Let's go ahead and plot I.
Okay, console log I, save this.
Okay, back in the browser, we reload this of course nothing should change here, but now if we open the Java script console here view developer Java script console
We can see here that this increase of point zero one by and large works but what you can also see here is our old friend form chapters two and three, the rounding error.
And, what that means is that, here you can see, we go up to point nine nine, bunch of zeroes, and so on, seven.
So now if we would add point zero one in the loop again we would be at one point zero, and so on, to something like zero seven at the very insignificant position here.
But, if we go back to code, we can see that because of this condition
This value one point, bunch of zeroes, seven would actually mean that this condition would not be true anymore and so it would stop.
So because of this rounding error we actually get tripped here and so in order to avoid this we need to add a little bit of a buffer here.
I'm gonna remove this console log, well actually let me leave it in here for the time being but what I'm gonna do is I'm gonna set up a variable here called
I'm also going to call this "x_max" as in the draw line chart function and i'm going to set this to one, right, this should be our maximum value on the X-axis.
Here i'm going to replace this one with "x_max" and let me also replace it down here, because that's the same. okay, here in the arguments that we passed through draw line chart. 
Okay, but now I'm going to add a bit of a buffer, okay let me say we going to add something very very  small.
It doesn't matter how small it is, it should just be obviously smaller than the increment here.
So, we could say for example say point, three zeroes, five, but this could be even smaller, but now essentially the condition is 
I, smaller than or equal to, one point zero zero five.
So, if we save this and go back to the browser and take a look here then we can see that now this value is included.
Now this value is included, and we can ignore mathematically this is completely insignificant here, but it doesn't trip our for loop.
And indeed, if we now look here at the plot then we can now see this is now correct at P equals one, the value here for Delta P is plotted as exactly zero. 
So now this fixes this issue and we can now see what this curve this Delta P in response to P looks like.
And we can see that this is always positive right.
It doesn't matter, of cause when the P is zero and one this means the fixation of one of the two allele so there is no more evolution but any value in between delta P is larger than zero and that means that P will always go to fixation.
But, don't believe me lets implement actually the second plot also in Java script.
So back in the code here, I'm gonna actually create another file.
So I'm simply going to save this file as, and now we would like to do
P versus time.
So we would like to have the time on the X-axis now and P on
Y-axis as we have seen, for example, in the drift simulations.
So i need to change a couple of things here we gonna remain with these two values here S and H and, of course, we gonna keep this data array but one thing that I need first of all is, I need a P value that starts somewhere, so
I'm gonna set this here at the initial value of point zero one for example.
And then I need to keep track of the generations. Okay, I need to keep track of generations and I'm going to do this for example, down here, var generations, let's say, I don't really need to keep track but
I need to define how many generations i want. I'm gonna run this for four-hundred  generations.
Now we need a different type of loop now, so here we have for I going up to this value here and then an increment by point zero one.
Now we don't need this anymore, we will simply do this as we have done
 before in chapter 3, we simply say,
I is the generation counter so I'm gonna do this as long as
I is smaller than generations and i'm gonna increase I by one. So this was the default case that we had before, so I don't need these
"x_max" anymore here we won't have that issue.
I don't need to console log I either.
What i need to say though, so this P needs need to go because we have, it's not something we are setting  it's something that we are actually dynamically calculating.
So i'm gonna remove this line here as well.
We still have Q equals one minus P, so that's correct we are still calculating Delta P, so nothing new here but now we are basically updating P to be what it was before plus whatever it is Delta P is.
Alright, cause that's exactly what the Delta P is of course its simply the change of P over generations so we simply need to update the P here and then I don't want to push Delta P in here but P because I want to plot
P as it changes over time.
So that's pretty much it we should probably update the correct labels here so here on the X-axis we have generation on the Y-axis we not plotting Delta P we simply plotting P.
We still don't want a legend and these we can now get rid of, because because we are back at the default cases that we had in chapter 3.
So i'm gonna save this and now I'm going to open this
P versus time in the browser.
I'm going to open a second tab so that we can easily compare this 
So i'm gonna open file here,
P versus time, here it is and he is our simulation.
Now you can see here, P goes from the initial value we said to point zero one very quickly up to fixation and it fixes
It's really hard to say, when exactly it fixes because, remember we now have infinite population size so it asymptotically goes to one.
But, you know you can see here around generation two-hundered you can basically say that it's now gone to fixation and you can also see that the fixation process itself happens very quickly here in this period.
Why is that?
Well let's now simply compare this to our Delta versus P.
Here what this plot has shown us is that, Delta P as a function of P is largest, when P is somewhere in the middle and that's you know, here for example, the maximum is somewhere between point three and point four.
Now if you look at this graph here, indeed here between point three and point four, that's when it's mathematically steepest that's where you have the fastest increase and then as you go over here the increase slows that's because you are approaching now very high values of P point nine, and if you over here again at point nine, the Delta P's
are getting smaller and smaller and going to really small values and approaching zero.
So that makes a lot of sense, this is Delta P as a function of P and this is consequently how P changes over time.
And the key take home message here is for directional selection and of course you can reload this right, this is now not a stochastic simulation, it's a deterministic simulation.
There is no random effect here anymore, there is no math random that we use in the code.
So this is mathematically always going to be of course  the exact same thing, and what you can see here is that, P goes from very low values to fixation. Why?
Because, over here  we can see Delta
P is always positive and that's a consequence of directional selection.
And that's also why it's called directional selection in the first place because starting from any P there is only one direction this will go, and in this case, because there is a selection benefit it's up so it will go to fixation.
So that is directional selection and in the next lectures we'll take a look at balancing and disruptive selection, which is not as straight forward in the dynamics as directional selection.
Alright, so with this code in place we can now move to the next type of selection, namely that of balancing selection.
I'll see you in the next lecture.
