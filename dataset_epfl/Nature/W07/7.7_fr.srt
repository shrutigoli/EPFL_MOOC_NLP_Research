1
00:00:03,180 --> 00:00:06,840
Bienvenue, la Nature dans le Code.
Nous sommes dans le chapitre 7, leçon 7.

2
00:00:06,840 --> 00:00:09,470
Ceci est la dernière leçon de ce chapitre

3
00:00:09,470 --> 00:00:11,900
et en elle, nous allons
raisonner quantitativement

4
00:00:11,900 --> 00:00:14,030
sur la taille de l'apparition d'épidémies.

5
00:00:14,030 --> 00:00:16,990
Mon idée, en observant nos simulations
dans le navigateur,

6
00:00:16,990 --> 00:00:22,300
c'était que les épidémies sont en moyenne large
dans le réseau de contact de petit monde

7
00:00:22,300 --> 00:00:25,370
par opposition au réseau de contacts
complètement local.

8
00:00:25,370 --> 00:00:26,770
Donc, nous allons découvrir.

9
00:00:26,770 --> 00:00:28,580
D'accord. Donc, voici notre code.

10
00:00:29,800 --> 00:00:35,500
Nous avons ici cette méthode de
"set intervalle" que nous avons mis en place

11
00:00:35,540 --> 00:00:38,420
afin que nous puissions réellement visualiser
les choses d'une manière significative.

12
00:00:38,420 --> 00:00:42,790
Nous avons essentiellement ralenti
artificiellement l'appel de

13
00:00:43,160 --> 00:00:44,870
cette fonction ici.

14
00:00:44,920 --> 00:00:48,470
Maintenant, on n'a plus besoin de ceci,
en fait maintenant quelques simulations

15
00:00:48,470 --> 00:00:51,540
et puis calculer la taille de l'épidémie.

16
00:00:51,540 --> 00:00:54,000
Alors combien de personnes
ont été infecté au total

17
00:00:54,000 --> 00:00:56,270
puis calculer la moyenne.

18
00:00:56,280 --> 00:01:00,100
Je vais donc me débarrasser
de ce "set intervalle" ici.

19
00:01:00,100 --> 00:01:01,930
On en n'a plus besoin.

20
00:01:01,930 --> 00:01:04,340
Nous n'avons également plus besoin
de cela, comme une conséquence,

21
00:01:04,340 --> 00:01:05,830
donc nous allons nous débarrasser de cela,

22
00:01:07,210 --> 00:01:10,620
et aussi, on n'a pas besoin
de dessiner plus rien,

23
00:01:10,620 --> 00:01:16,050
donc nous allons où nous appelons
la fonction <i> draw_grid </ i> ici,

24
00:01:16,050 --> 00:01:17,790
on n'a plus besoin de ceci.

25
00:01:17,860 --> 00:01:20,450
Si vous le voulez, vous pouvez vous débarrasser de tous les

26
00:01:20,450 --> 00:01:24,060
codes D3, parce que
nous ne visualisons pas,

27
00:01:24,060 --> 00:01:27,680
mais je vais juste le laisser ici
pour l'instant,

28
00:01:27,680 --> 00:01:28,870
nous ne l'avons pas besoin,

29
00:01:28,870 --> 00:01:30,720
mais je vais le laisser ici.

30
00:01:30,760 --> 00:01:33,820
Ok, mais maintenant j'ai perdu
le stimulateur ici,

31
00:01:33,920 --> 00:01:37,320
de cette simulation.

32
00:01:37,470 --> 00:01:40,840
Donc, je vais maintenant besoin de mettre
en œuvre ceci à nouveau par la main.

33
00:01:40,840 --> 00:01:44,400
Et donc je vais continuer et le faire
et je vais définir une fonction

34
00:01:44,510 --> 00:01:47,280
que je vais appeler <i> run_simulation </ i>.

35
00:01:49,470 --> 00:01:50,850
"Run simulation".

36
00:01:50,850 --> 00:01:54,600
Alors ce qu'il faut pour l'exécution
d'une simulation,on doit d'abord <i> init_grid </ i>

37
00:01:54,600 --> 00:01:55,560
et d'ailleurs

38
00:01:55,560 --> 00:01:57,590
comme je le fais ici

39
00:01:57,590 --> 00:02:00,840
nous pouvons également se débarrasser
de "init grid" ici.

40
00:02:00,840 --> 00:02:02,660
On n'a plus besoin de cela.

41
00:02:02,660 --> 00:02:05,600
Donc, nous allons supprimer ceci aussi.

42
00:02:05,600 --> 00:02:07,320
Vous supprimez quelques lignes ici.

43
00:02:07,320 --> 00:02:08,470
D'accord.

44
00:02:08,530 --> 00:02:12,710
D'accord, la fonction <i> run_simulation </ i>,
il devrait certainement appeler <i> init_grid </ i>,

45
00:02:12,710 --> 00:02:15,800
et puis je voudrais exécuter la simulation

46
00:02:15,800 --> 00:02:18,600
aussi longtemps qu'il y a
des individus infectés là.

47
00:02:18,840 --> 00:02:21,290
Une fois que nous n'avons plus aucune
des personnes infectées,

48
00:02:21,310 --> 00:02:23,840
cela signifie que tout le monde,
qui étaient infectés,

49
00:02:23,840 --> 00:02:27,190
sést rétablis et rien ne va plus
se passer.

50
00:02:27,190 --> 00:02:29,820
Voici donc le point
où nous pouvons s'arrêter.

51
00:02:30,440 --> 00:02:31,720
Donc en gros,

52
00:02:31,720 --> 00:02:33,710
Je veux garder la simulation en exécution

53
00:02:33,710 --> 00:02:38,420
alors que j'ai des individus infectés
dans la simulation.

54
00:02:38,420 --> 00:02:39,650
Donc ce que je vais faire c'est,

55
00:02:39,650 --> 00:02:41,550
je vais mettre en place
<i> alors que </ i> boucle.

56
00:02:41,550 --> 00:02:42,440
Donc "alors que",

57
00:02:44,050 --> 00:02:45,800
et là, je vais appeler une fonction

58
00:02:45,800 --> 00:02:47,580
que je vais définir.

59
00:02:47,580 --> 00:02:50,580
<I> get_number_of_infected </ i>.

60
00:02:50,580 --> 00:02:54,630
Donc, c'est une fonction qui me donnera
le nombre des individus

61
00:02:54,630 --> 00:02:56,780
infectés dans la population.

62
00:02:56,780 --> 00:02:58,200
Je dois la définir.

63
00:02:58,200 --> 00:03:00,600
Mais tout cela est plus grand que zéro,

64
00:03:00,600 --> 00:03:02,930
Je veux garder la simulation en exécution.

65
00:03:02,930 --> 00:03:03,730
En d'autres mots,

66
00:03:03,730 --> 00:03:08,860
J'appellerai, je vais continuer à appeler
cette fonction <i> run_time_step </ i>.

67
00:03:11,460 --> 00:03:14,680
D'accord, ce sera donc une fonction
<i>run_simulation</ i>,

68
00:03:14,680 --> 00:03:16,390
maintenant ce que je dois faire c'est,

69
00:03:16,390 --> 00:03:20,940
Je dois maintenant définir
ceci <i> get_number_of_infected </ i>.

70
00:03:20,940 --> 00:03:27,090
Alors laissez-moi faire ceci,
je vais définir une fonction,

71
00:03:27,130 --> 00:03:32,360
<I> get_number_of_infected </i>.

72
00:03:33,460 --> 00:03:35,420
Alors comment pouvons-nous faire cela?

73
00:03:35,420 --> 00:03:38,470
Eh bien, je vais mettre en place une sorte
de méthode de force brute ici.

74
00:03:38,470 --> 00:03:41,510
Je vais simplement passer par toutes
les cellules de la grille et

75
00:03:41,540 --> 00:03:44,330
chaque fois que je rencontre
une personne infectée,

76
00:03:44,530 --> 00:03:47,660
je vais garder une trace du nombre
des infectés

77
00:03:48,220 --> 00:03:50,010
donc ici je vais faire ceci,

78
00:03:50,010 --> 00:03:52,160
et d'abord, je vais mettre en place
un compteur

79
00:03:52,160 --> 00:03:55,160
et puis je vais passer à travers
la grille.

80
00:03:55,160 --> 00:04:01,460
Donc, en utilisant les 2 boucles
pour "var i = 0",

81
00:04:01,590 --> 00:04:03,630
"I & lt; grid_length".

82
00:04:04,090 --> 00:04:07,260
Et "i = i + 1",

83
00:04:08,420 --> 00:04:11,930
puis exactement la même chose,
bien sûr, pour une boucle interne,

84
00:04:11,930 --> 00:04:15,740
sauf que nous avons besoin
maintenant des "iis".

85
00:04:17,310 --> 00:04:22,800
"Ii & lt; grid_length"
et enfin "ii = ii + 1".

86
00:04:22,800 --> 00:04:26,260
Alors maintenant, je peux simplement
dire, si l'individu ici,

87
00:04:26,260 --> 00:04:32,350
sur cette grille de cellule particulière [i] [ii],
est en fait une personne infectée,

88
00:04:32,350 --> 00:04:34,880
donc, '== "I"', double égalité, bien sûr,

89
00:04:35,050 --> 00:04:38,670
alors je vais ajouter 1 au compteur.

90
00:04:38,670 --> 00:04:42,240
Donc, "compteur = compteur + 1",

91
00:04:42,240 --> 00:04:46,380
et tout ce que je dois faire à la fin
est de retourner le compteur.

92
00:04:47,380 --> 00:04:49,610
Maintenant, et juste pour être clair.

93
00:04:50,940 --> 00:04:53,850
Ceci n'est pas le moyen
le plus performant pour le faire.

94
00:04:53,850 --> 00:04:57,610
Je pourrais, bien sûr,
garder trace de l'état, "i",

95
00:04:57,610 --> 00:05:02,250
tout simplement, chaque fois que j'appelle
le <i> try_recovery </ i> ou <i> try_infection </ i>,

96
00:05:02,480 --> 00:05:06,460
et un individu se déplace
de la Classe S à la classe I,

97
00:05:06,540 --> 00:05:08,870
Je peux tout simplement augmenter
les compteurs infectés,

98
00:05:08,870 --> 00:05:13,790
une sorte de contre-infection globale
et quand un individu infecté se rétabli

99
00:05:13,790 --> 00:05:15,040
je pourrais le diminuer.

100
00:05:15,040 --> 00:05:20,460
Le point pour moi ici ce n'est pas réellement
d'écrire un code JavaScript le plus performant.

101
00:05:20,670 --> 00:05:25,120
C'est tout simplement d'écrire ces sortes
d'expressions ici, des boucles,

102
00:05:25,120 --> 00:05:28,720
et "les déclarations si" et ainsi de suite,
maintes et maintes fois,

103
00:05:29,450 --> 00:05:32,000
ceci est les quelques concepts
de répétition espacée

104
00:05:32,010 --> 00:05:35,640
où si vous apprenez quelque chose et
vous faites quelque chose à plusieurs reprises

105
00:05:35,640 --> 00:05:37,090
avec un espace entre elles,

106
00:05:37,090 --> 00:05:39,810
vous aurez bien une long meilleure
mémoire de ceci

107
00:05:39,810 --> 00:05:41,320
et donc, pour moi, l'objectif pour vous

108
00:05:41,320 --> 00:05:44,460
c'est de ne pas écrire
le code JavaScript le plus performant,

109
00:05:44,460 --> 00:05:47,940
mais de se sentir vraiment
à l'aise avec ce type de code,

110
00:05:48,380 --> 00:05:52,290
être capable de penser en termes
d'une augmentation à 2 dimensione et

111
00:05:52,290 --> 00:05:56,680
comment vous repetez le boucle à travers
ces réseaux et fait des calculs

112
00:05:56,680 --> 00:05:58,910
sur les éléments de ce tableau.

113
00:05:58,910 --> 00:06:00,920
Donc, ceci est vraiment le but ici,

114
00:06:00,920 --> 00:06:03,840
voilà pourquoi je fais cette approche
de force brute ici.

115
00:06:03,840 --> 00:06:05,220
Mais bien sûr, dans les travaux.

116
00:06:05,220 --> 00:06:07,070
Ce n'est pas aussi vite
que cela pourrait être,

117
00:06:07,070 --> 00:06:12,240
mais jusqu'à présent, on n'a pas vraiment rencontré
des goulots d'étranglement de vitesse de toute façon.

118
00:06:12,270 --> 00:06:14,920
Donc, cela est maintenant
une grande fonction.

119
00:06:15,450 --> 00:06:17,730
il obtient le nombre
de personnes infectées

120
00:06:17,730 --> 00:06:20,380
à chaque fois que je veux,
dans la population.

121
00:06:21,020 --> 00:06:22,690
cependant, il n'est pas très générique.

122
00:06:22,880 --> 00:06:26,830
Et si je veux obtenir le nombre
des personnes sensibles ou

123
00:06:27,540 --> 00:06:30,350
le nombre des individus rétablis?

124
00:06:30,350 --> 00:06:32,910
Je pourrais bien sûr écrire
trois fonctions.

125
00:06:32,910 --> 00:06:35,310
Deux autres fonctions de ce genre
et je pouvais les appeler

126
00:06:35,310 --> 00:06:38,350
<I> get_number_of_susceptibles </ i>
et <i> get_number_of_recovered </ i>,

127
00:06:38,350 --> 00:06:42,090
mais la seule chose qui va
changer ici c'est cet état,

128
00:06:42,450 --> 00:06:45,360
Il semble donc que je peux
le rendre plus générique,

129
00:06:45,810 --> 00:06:48,880
et je peux le faire en disant,
en renommant cette fonction

130
00:06:48,880 --> 00:06:51,520
à <i> get_number_in_state </ i>.

131
00:06:51,520 --> 00:06:55,360
et puis je passerai simplement
l'état ici comme un argument.

132
00:06:55,360 --> 00:06:58,600
Je défini l'état en tant que paramètre
et une fonction.

133
00:06:58,600 --> 00:07:04,200
En réalite maintenant, ce compteur
doit être appelé <i> number_in_state </ i>.

134
00:07:05,730 --> 00:07:08,590
Parce que c'est effectivement
ce qu'il capture,

135
00:07:08,590 --> 00:07:13,170
donc je vais remplacer "compteur"
avec <i> number_in_state </ i> ici et ici,

136
00:07:13,170 --> 00:07:14,750
et ici, bien sûr.

137
00:07:14,750 --> 00:07:20,210
Et maintenant je teste pour l'égalité
l'égalité ici non pas avec un «I»,

138
00:07:20,210 --> 00:07:24,480
mais avec ce qui a été passé comme état.

139
00:07:24,640 --> 00:07:27,790
Maintenant, cela est une fonction
beaucoup plus générique.

140
00:07:28,370 --> 00:07:30,960
J'aime le fait que je peux juste appeler

141
00:07:30,960 --> 00:07:33,560
une fonction appelée
<i> get_number_of_infected </ i>.

142
00:07:33,560 --> 00:07:39,050
ça sent très naturel, plus naturel que
de dire <i> get_number_in_state I </ i>.

143
00:07:39,050 --> 00:07:43,180
Donc, je voudrais garder le nom
de cette fonction,

144
00:07:43,180 --> 00:07:49,640
mais je préfère également que cette
fonction ici reste générique tel qu'il est,

145
00:07:49,640 --> 00:07:52,210
alors, quelle est la solution
à ce problème?

146
00:07:52,210 --> 00:07:54,870
Eh bien, la solution
est une fonction d'intermédiaire

147
00:07:54,870 --> 00:07:56,610
ou une fonction auxiliaire.

148
00:07:56,610 --> 00:07:59,690
C'est juste une fonction régulière,

149
00:07:59,690 --> 00:08:03,380
mais il ne fait pas beaucoup d'autre
que d'appeler une autre fonction,

150
00:08:03,380 --> 00:08:08,020
donc je vais définir ici, cette fonctio
<i> get_number_of_infected </ i>,

151
00:08:08,020 --> 00:08:11,810
parce que j'aime le son, il sent juste
très naturel de l'utiliser,

152
00:08:13,480 --> 00:08:20,480
et il appelle simplement
<i> get_number_in_state ( "I") </ i>.

153
00:08:21,500 --> 00:08:24,640
Et bien sûr, il n'apppelle pas
seulement cette fonction.

154
00:08:24,640 --> 00:08:30,830
Elle  retourne également la valeur que
<i> get_number_in_state </ i> retourne.

155
00:08:30,830 --> 00:08:31,980
Voilà donc comment il fonctionne.

156
00:08:31,980 --> 00:08:35,410
Vous appelez un
<i> get_number_of_infected </ i> et ceci est appelé,

157
00:08:35,410 --> 00:08:39,020
cela est exécuté, donc nous allons ici
à travers toutes les cellules,

158
00:08:39,020 --> 00:08:42,890
vérifie l'état de  "I",
puis retourner une valeur

159
00:08:42,890 --> 00:08:45,890
puis nous retournons
cette valeur en marche

160
00:08:45,890 --> 00:08:47,660
lorsque <i> number_of_infected </ i>
était appelé.

161
00:08:47,660 --> 00:08:52,410
et je peux maintenant essentiellement
copier cette fonction deux fois

162
00:08:52,410 --> 00:08:54,130
et le renommez ici,

163
00:08:54,130 --> 00:08:59,190
<I> Get_number_of_susceptibles </ i>
par exemple, "sensibles".

164
00:09:00,350 --> 00:09:03,320
Alors, je ramènerai simplement
<i> get_number_in_state ( "S") </ i>.

165
00:09:04,020 --> 00:09:07,890
Et enfin <i> get_number_of_recovered </i>.

166
00:09:09,670 --> 00:09:10,650
"Rétabli".

167
00:09:11,660 --> 00:09:14,130
Et ceci ramènera simplement
<i> get_number_in_state </ i>.

168
00:09:17,120 --> 00:09:19,050
Ok, je vais l'enregistrer,

169
00:09:19,050 --> 00:09:20,260
d'accord, alors que faire?

170
00:09:20,260 --> 00:09:22,500
Eh bien, maintenant j'ai ceci
<i> simulation exécuter </ i>,

171
00:09:22,500 --> 00:09:25,020
mais bien sûr, il ne tourne pas
par lui-même.

172
00:09:25,020 --> 00:09:26,720
Je dois l'appeler et I, en fait,

173
00:09:26,720 --> 00:09:29,700
Je ne veux pas l'appeler une seule fois,

174
00:09:29,700 --> 00:09:33,020
Je veux appeler ceci plusieurs fois, parce que
je veux exécuter de nombreuses simulations

175
00:09:33,020 --> 00:09:38,620
puis calculer la taille de l'épidémie
et ensuite obtenir la moyenne, finalement.

176
00:09:38,630 --> 00:09:41,550
Donc, je vais le faire ici-bas,

177
00:09:41,550 --> 00:09:43,430
Je vais mettre en place une boucle.

178
00:09:43,430 --> 00:09:46,880
Cette boucle se déroulera, itérer 4.

179
00:09:46,880 --> 00:09:52,450
Eh bien, définissons une variable
que je vais appeler <i> number_of_simulations </ i>

180
00:09:52,480 --> 00:09:55,090
Je ne l'ai pas encore défini,
mais je le ferai dans un instant.

181
00:09:55,090 --> 00:09:57,720
<I> number_of_simulations </ i>.

182
00:09:59,300 --> 00:10:03,650
Et bien sûr ' "I" = "I" + 1 ",

183
00:10:05,120 --> 00:10:09,200
et cela c'est combien de fois
j'appelerai cette fonction,

184
00:10:09,200 --> 00:10:11,310
<I> run_simulation </ i>.

185
00:10:11,990 --> 00:10:13,870
Ok, je vais le mettre en place ici,

186
00:10:13,870 --> 00:10:20,650
"var number_of_simulations ="

187
00:10:20,650 --> 00:10:22,590
disons, "100".

188
00:10:24,070 --> 00:10:24,960
D'accord,

189
00:10:24,960 --> 00:10:29,600
donc je vais exécuter des simulations ici
une centaine de fois, mais bien sûr,

190
00:10:29,600 --> 00:10:32,640
je veux garder la trace
de la taille totale de l'épidémie

191
00:10:32,640 --> 00:10:33,860
dans chaque simulation.

192
00:10:33,860 --> 00:10:35,110
Alors, comment ai-je trouvé cela?

193
00:10:35,230 --> 00:10:39,990
Eh bien, il se trouve qu'il ya
une méthode pratique déjà

194
00:10:39,990 --> 00:10:42,410
et il s'appelle
<i> Get_number_of_recovered </ i>

195
00:10:42,410 --> 00:10:43,590
alors pourquoi est-ce cela?

196
00:10:43,670 --> 00:10:47,760
Eh bien, pour qu'une personne
soit dans l'état rétabli,

197
00:10:47,760 --> 00:10:50,820
il devait être dans l'état infecté avant

198
00:10:50,820 --> 00:10:55,480
et donc à la fin de la simulation
quand nous sommes hors d'infecté,

199
00:10:56,170 --> 00:11:00,240
il y a un certain nombre d'individus
rétabli dans la population,

200
00:11:00,240 --> 00:11:02,670
et tous ont été infectés.

201
00:11:02,670 --> 00:11:04,630
Donc, ceci est vraiment
ma taille de l'épidémie.

202
00:11:06,000 --> 00:11:11,650
Donc, je peux facilement calculer ceci
en appelant simplement cette fonction.

203
00:11:11,690 --> 00:11:13,850
Mais alors qu'est-ce que
je vais faire avec cet nombre?

204
00:11:13,890 --> 00:11:16,710
Eh bien, je devrais probablement
le stocké quelque part dans un tableau

205
00:11:16,710 --> 00:11:20,070
donc je vais mettre en place ici
un tableau appelé <i> Données </ i>.

206
00:11:20,810 --> 00:11:22,610
Ok, juste un tableau vide.

207
00:11:22,890 --> 00:11:26,900
Et donc ce que je vais faire ici juste
après que j'appelle <i> run_simulation </ i>,

208
00:11:27,020 --> 00:11:28,200
Je dirais,

209
00:11:28,200 --> 00:11:31,310
je vais pousser dans ce tableau

210
00:11:31,310 --> 00:11:34,460
le nombre d'individus rétablis.

211
00:11:34,460 --> 00:11:36,260
Parce que ce la taille de l'épidémie,

212
00:11:36,260 --> 00:11:42,420
Donc, <i> get_number_of_recovered </i>.

213
00:11:44,140 --> 00:11:45,060
D'accord.

214
00:11:45,060 --> 00:11:47,670
Et vous savez quoi,
je veux être un bon citoyen ici

215
00:11:47,670 --> 00:11:50,820
et je ne veux pas avoir
ces variables globales partout,

216
00:11:50,820 --> 00:11:52,300
donc je vais couper ceux-ci et

217
00:11:52,300 --> 00:11:56,940
Je vais déplacer ceux-la jusqu'à
l'endroit où on a les autres variables.

218
00:11:56,940 --> 00:11:59,220
Donc, ici. Je vais les mettre ici.

219
00:12:00,990 --> 00:12:01,950
D'accord

220
00:12:03,210 --> 00:12:03,940
Ok.

221
00:12:03,940 --> 00:12:05,860
Donc, nous allons revenir ici.

222
00:12:05,860 --> 00:12:07,530
J'ai maintenant cette boucle.

223
00:12:07,530 --> 00:12:13,070
Il se déroulera une centaine de fois et puis
il va pousser la taille de l'épidémie

224
00:12:13,120 --> 00:12:14,640
dans ce tableau de données.

225
00:12:14,640 --> 00:12:17,210
Donc, ce que je pourrais faire maintenant
comme une première étape est

226
00:12:17,210 --> 00:12:21,300
Je pourrais simplement connecter
le contenu de cette course de données

227
00:12:21,320 --> 00:12:25,260
ou <i> console.log (données) </ i>.

228
00:12:25,260 --> 00:12:30,530
et puis je peux enregistrer ceci
et aller à notre navigateur.

229
00:12:31,900 --> 00:12:36,250
Ici encore la simulation visuelle,
Nous n'aurons plus besoin de cela,

230
00:12:36,250 --> 00:12:40,230
mais nous aurons besoin de regarder
la console JavaScript.

231
00:12:40,230 --> 00:12:41,610
Je vais donc recharger ceci.

232
00:12:43,120 --> 00:12:45,800
Et maintenant, cela peut prendre
quelques secondes,

233
00:12:45,800 --> 00:12:49,850
car il exécute une centaine
de simulations assez compliquées

234
00:12:49,850 --> 00:12:52,020
et voici donc le résultat.

235
00:12:52,590 --> 00:12:56,270
Ainsi, vous pouvez voir ici que
vous avez beaucoup de simulations

236
00:12:56,270 --> 00:13:01,210
qui ont seulement un ou deux individus
infectés au total.

237
00:13:01,210 --> 00:13:03,410
Ainsi, à la fin du cours,
ils sont tous rétablis

238
00:13:03,410 --> 00:13:05,990
donc nous avons vu dans
les simulations visuelles avant.

239
00:13:05,990 --> 00:13:08,960
Ce sont les épidémies qui
se terminent immédiatement.

240
00:13:08,960 --> 00:13:12,500
Ensuite, il y a certains qui ne sont que
10 ou 11 ou plus,

241
00:13:12,500 --> 00:13:13,430
ou juste une poignée,

242
00:13:13,430 --> 00:13:18,000
mais il y en a ici d'autres, en fait,
beaucoup qui sont plus de 6000 et

243
00:13:18,050 --> 00:13:20,040
certains ont même un peu plus grand.

244
00:13:20,040 --> 00:13:23,440
alors laissez-moi le recharger à nouveau
juste pour voir s'il y avait un coup de chance ici.

245
00:13:23,440 --> 00:13:25,890
Encore une fois, ceci prendra
quelques secondes,

246
00:13:25,890 --> 00:13:27,630
et nous avons maintenant
les résultats ici.

247
00:13:27,630 --> 00:13:28,870
Donc, la même chose,

248
00:13:28,870 --> 00:13:34,300
beaucoup d'un et deux tailles d'épidémie,
mais beaucoup qui sont plus de 6.000.

249
00:13:34,700 --> 00:13:38,690
Donc,rappelez vous que nous sommes encore
dans la situation ici du petit monde.

250
00:13:38,690 --> 00:13:42,430
Donc maintenant, je voudrais comparer ceci
et de ne pas avoir un petit monde.

251
00:13:42,430 --> 00:13:44,540
Donc, si nous revenons à notre code,

252
00:13:44,540 --> 00:13:49,780
le petit monde vient ici, dans
la fonction <i> expose_neighbors</ i>

253
00:13:49,780 --> 00:13:53,560
où nous avons ce si <i> maths random</ i>
est inférieure à 0,01,

254
00:13:53,880 --> 00:14:02,140
alors nous faisons ceci, nous recueillons ou plutôt
nous calculons ces deux nombres entiers aléatoires

255
00:14:02,140 --> 00:14:05,380
pour pointer vers un individu au hasard,
puis nous essayons d'infecter

256
00:14:05,380 --> 00:14:09,480
cet individu au hasard
plutôt que les voisins locaux.

257
00:14:09,550 --> 00:14:13,800
Nous pourrions donc essentiellement mettre
ce paramètre à zéro ici et alors,

258
00:14:13,800 --> 00:14:18,430
il n'y aurait pas d'événement
de transmission de longue distance

259
00:14:18,430 --> 00:14:20,350
et donc il n'y aurait pas de petit monde.

260
00:14:20,590 --> 00:14:25,410
Mais au lieu de mettre ceci ici,
nous allons remplacer ceci ici

261
00:14:25,630 --> 00:14:29,670
avec une variable appellé
<i> rewiring_probability </ i>.

262
00:14:29,830 --> 00:14:31,540
<I> recâblage </ i>

263
00:14:31,680 --> 00:14:33,150
<I> la probabilité. </ I>

264
00:14:37,920 --> 00:14:40,750
Et cela n'est pas actuellement défini,

265
00:14:40,750 --> 00:14:44,930
donc nous devrions bien sûr faire ceci
et cela sera une variable globale.

266
00:14:44,930 --> 00:14:48,300
Ensuite, je vais mettre en place ici
avec les paramètres.

267
00:14:48,300 --> 00:14:52,530
Donc, "var <i>rewiring_probability</i> = 0".

268
00:14:52,530 --> 00:14:56,790
et donc si je voulais que ceci soit un réseau
de contacts dans un petit monde,

269
00:14:56,790 --> 00:14:59,840
Je ne pouvais tout simplement
mettre ceci à 0,01, par exemple,

270
00:14:59,840 --> 00:15:02,680
mais maintenant je veux simplement
mettre cela à zéro,

271
00:15:02,680 --> 00:15:08,820
afin de voir ce qui se passe si le réseau
de contact est complètement local.

272
00:15:08,820 --> 00:15:11,110
Alors permettez-moi de sauver cela
et revenir au navigateur

273
00:15:11,360 --> 00:15:12,790
puis recharger ceci

274
00:15:12,790 --> 00:15:15,850
et jeter un coup d'oeil ici
à la console JavaScript.

275
00:15:17,670 --> 00:15:20,320
Et ici, je peux voir
des résultats similaires,

276
00:15:20,320 --> 00:15:25,020
donc beaucoup de simulations avec un seul
patient zéro qui se rétabli immédiatement

277
00:15:25,020 --> 00:15:26,880
avant qu'il puisse infecter
d'autres personnes

278
00:15:26,880 --> 00:15:28,590
mais il y a aussi de grandes épidémies.

279
00:15:28,590 --> 00:15:34,020
Mais il semble que les grandes épidémies
ici sont plus souvent dans les 1000

280
00:15:34,020 --> 00:15:36,970
peut-être parfois 2000 ou 3000,

281
00:15:36,970 --> 00:15:39,420
mais je ne vois aucun 6000

282
00:15:39,420 --> 00:15:40,420
par exemple,

283
00:15:40,420 --> 00:15:44,500
c'est ce que nous avions avant
et je vais recharger ceci encore.

284
00:15:45,410 --> 00:15:46,820
Attendez quelques secondes.

285
00:15:46,820 --> 00:15:48,410
Et ici, même genre de résultat.

286
00:15:48,410 --> 00:15:54,350
Je vois quelques assez grandes épidémies,
mais aucun dans la gamme de 6000.

287
00:15:54,470 --> 00:15:59,390
donc je pense que je l'ai déjà confirmé
ici ma notion quantitative

288
00:15:59,490 --> 00:16:03,450
qu'en effet, les épidémies sont
en moyenne plus petites

289
00:16:04,520 --> 00:16:10,660
dans ce réseau complétment local
à l'opposé de réseau du petit monde.

290
00:16:10,760 --> 00:16:13,740
Mais vous savez que cela serait bien
pour quantifier ceci et encore plus

291
00:16:13,740 --> 00:16:15,860
et plutôt que de regarder
les chiffres ici,

292
00:16:15,860 --> 00:16:19,890
Pourquoi ne calculons pas
la moyenne dans notre code?

293
00:16:19,890 --> 00:16:21,750
Donc, retournons dans notre code,

294
00:16:21,750 --> 00:16:24,590
ce que nous devons faire c'est nous avons
besoin d'une fonction qui calcule

295
00:16:24,590 --> 00:16:28,040
la moyenne des éléments
que nous avons ici dans ce tableau.

296
00:16:28,160 --> 00:16:29,730
Alors, pourquoi faisons-nous pas cela?

297
00:16:29,760 --> 00:16:31,850
Je vais définir une fonction ici

298
00:16:31,850 --> 00:16:35,230
que je vais appeler
<i> calculate_average_size </ i>.

299
00:16:35,230 --> 00:16:42,120
donc la fonction
<i> calculate_average_size </ i>.

300
00:16:43,090 --> 00:16:47,160
Et cela va calculer la taille moyenne
de l'ensemble de données

301
00:16:47,340 --> 00:16:50,750
donc je vais définir ce ici comme
un paramètre de "donnée"

302
00:16:50,750 --> 00:16:53,620
et bien sûr, je passerai ce tableau
comme un argument,

303
00:16:53,620 --> 00:16:56,830
et simplement le calcul de la moyenne,

304
00:16:56,830 --> 00:16:57,920
donc cela est assez facile.

305
00:16:57,920 --> 00:17:00,450
Comme vous le savez, la moyenne
est tout simplement des moyens

306
00:17:00,450 --> 00:17:02,460
donc je dois ajouter toutes les valeurs

307
00:17:02,460 --> 00:17:08,400
puis diviser par le nombre de valeurs
donc <i> var sum equals zero</ i>

308
00:17:08,400 --> 00:17:16,280
et puis je vais itérer ou désarroi
donc "pour (var i est égal à 0";

309
00:17:16,280 --> 00:17:19,250
"I & lt; data.Length"

310
00:17:19,250 --> 00:17:21,880
donc peu importe le nombre d'éléments
que nous avons dans ce tableau

311
00:17:21,880 --> 00:17:25,030
puis "i ++". Donc, "i ++"? Pourquoi?

312
00:17:25,030 --> 00:17:28,900
Ceci est toute une nouvelle notation,
je vais l'expliquer dans un seconde,

313
00:17:28,900 --> 00:17:32,220
mais ceci est identique à "i = i + 1".

314
00:17:33,690 --> 00:17:36,110
0kay, les accolades.

315
00:17:37,420 --> 00:17:40,980
Eh bien, vous apprenez de nouvelles choses,
même dans la dernière leçon du cours.

316
00:17:41,170 --> 00:17:47,160
Donc, ici, nous pouvons maintenant
dire simplement, je vais ajouter à certains

317
00:17:47,290 --> 00:17:53,210
le ième élément de données,
donc «somme plus + = données [i]"

318
00:17:53,210 --> 00:17:55,370
Donc, une fois encore
vous vous demandez peut-être,

319
00:17:55,460 --> 00:17:57,030
«Attends, qu'est-ce que ceci + =?"

320
00:17:57,120 --> 00:17:58,450
Je ne l'ai jamais vu.

321
00:17:58,450 --> 00:18:02,740
Cela correspond à «somme = somme + data".

322
00:18:02,740 --> 00:18:06,230
Et encore une fois,
je vais l'expliquer aussi dans un seconde.

323
00:18:06,610 --> 00:18:08,220
Donc, à la fin, nous avons la somme,

324
00:18:08,220 --> 00:18:09,910
donc tout ce que nous devons faire c'est

325
00:18:09,910 --> 00:18:11,810
vous avez besoin de <i> retourner</ i>

326
00:18:11,810 --> 00:18:16,310
la division de la somme divisée par cependant de nombreux
éléments que nous avons dans les données.

327
00:18:16,310 --> 00:18:19,200
Donc, <i> data.Length </ i> et cela est

328
00:18:19,200 --> 00:18:23,670
maintenant calculer la fonction
de taille moyenne qui fonctionne.

329
00:18:23,670 --> 00:18:28,540
Et alors ici dans la <i> console.log </ i>,
plutôt que de connecter les données

330
00:18:28,940 --> 00:18:33,630
nous passons simplement d'abord les données
par <i> calculate_average_size </ i>

331
00:18:33,630 --> 00:18:38,240
qui ensuite retournera
la taille moyenne du débit de données.

332
00:18:38,240 --> 00:18:42,620
Donc, nous allons enregistrer cela,
revenir dans le navigateur et regarder.

333
00:18:44,130 --> 00:18:47,590
Donc, nous sommes encore dans
le monde complètement locale ici,

334
00:18:47,590 --> 00:18:50,900
donc on va recharger cela,
cela va prendre un certain temps.

335
00:18:50,900 --> 00:18:54,540
Et là, vous pouvez maintenant voir
la taille moyenne,

336
00:18:54,540 --> 00:19:00,060
alors je vais répéter ceci et donc nous
le verrons maintes et maintes fois.

337
00:19:00,060 --> 00:19:04,340
Donc, la moyenne semble être
quelque part autour de 300, 400

338
00:19:05,970 --> 00:19:08,130
personnes infectées

339
00:19:09,260 --> 00:19:12,790
dans le réseau de contacts
complètement local.

340
00:19:12,790 --> 00:19:15,670
D'accord, il semble y avoir
une gamme relativement constante

341
00:19:15,670 --> 00:19:18,430
quelque part entre 300 et 400.

342
00:19:19,030 --> 00:19:23,220
Alors maintenant, nous allons revenir
à notre code et nous allons mettre tout cela

343
00:19:23,220 --> 00:19:26,070
à un petit réseau mondial
en changeant simplement

344
00:19:26,480 --> 00:19:31,100
cette probabilité de recâblage
maintenant à 0,01.

345
00:19:31,100 --> 00:19:34,600
ok enregistrer et revenir au navigateur

346
00:19:34,600 --> 00:19:38,680
et je vais rexécuter cela
et regarder la moyenne ici.

347
00:19:39,490 --> 00:19:41,340
Donc, cela prendra quelques secondes.

348
00:19:41,340 --> 00:19:46,040
Donc, plus de 2,5 mille semble être
dans la gamme ici

349
00:19:46,040 --> 00:19:49,460
et c'est, bien sûr, un grand changement.

350
00:19:49,460 --> 00:19:51,600
Je vais donc recharger ceci plusieurs fois

351
00:19:51,600 --> 00:19:53,440
de sorte que vous voyez les valeurs.

352
00:19:53,440 --> 00:19:58,390
Donc, nous semblons être constament
au-delà de 2,5 mille individus,

353
00:19:58,390 --> 00:20:00,250
même un peu plus,

354
00:20:00,250 --> 00:20:04,750
très clairement,
la taille moyenne de l'épidémie

355
00:20:05,010 --> 00:20:10,060
est d'environ 6 à 7 fois plus grande

356
00:20:10,060 --> 00:20:14,910
que ce que nous observons
dans le réseau complètement locale

357
00:20:14,910 --> 00:20:17,950
et maintenant nous avons la preuve,
si vous voulez,

358
00:20:17,950 --> 00:20:22,950
que c'est vraiment le cas
si notre intuition était correcte.

359
00:20:22,950 --> 00:20:25,830
La taille des épidémies moyennes
dans le réseau du petit monde

360
00:20:25,830 --> 00:20:27,260
est en effet beaucoup plus grand.

361
00:20:27,260 --> 00:20:28,680
Tout le reste est égal,

362
00:20:28,680 --> 00:20:32,600
nous avons simplement recâblé
quelques bords ici et là

363
00:20:32,600 --> 00:20:35,230
et il a des conséquences dramatiques.

364
00:20:35,230 --> 00:20:40,280
et c'est la raison pour laquelle l'idée
du réseau de petit monde est si important.

365
00:20:40,630 --> 00:20:43,150
Je veux revenir au code une dernière fois

366
00:20:43,150 --> 00:20:46,870
et simplement regarder
ces nouvelles notations ici

367
00:20:46,870 --> 00:20:50,660
"I + +" et "+ =". Qu'est-ce que c'est?

368
00:20:50,690 --> 00:20:52,200
bien, l'idée est simple,

369
00:20:53,060 --> 00:20:58,290
plutôt que d'avoir à écrire "i = i + x",

370
00:20:58,290 --> 00:21:00,810
qui est quelque chose
que nous faisons tout le temps. D'accord?

371
00:21:00,810 --> 00:21:05,520
Nous voulons simplement ajouter une certaine
valeur ici. "X" à une valeur existante.

372
00:21:05,610 --> 00:21:10,050
Voilà donc comment nous le faisons et nous
l'avons fait tout le temps et cela fonctionne,

373
00:21:10,050 --> 00:21:11,160
bien sûr.

374
00:21:11,370 --> 00:21:16,480
Mais il y a aussi un raccourci
et ce raccourci est "+ =".

375
00:21:16,480 --> 00:21:22,440
Cela signifie tout simplement "ajouter 'x' à 'i'"
et de stocker cela dans <i> i </ i>.

376
00:21:23,290 --> 00:21:27,990
Et cela n'est pas seulement vrai pour les "+",
vous pouvez aussi utiliser le "- ="

377
00:21:27,990 --> 00:21:32,520
et cela signifie simplement "soustraire" X "
à" i "et le stocker dans <i> i </ i>".

378
00:21:32,520 --> 00:21:35,220
Vous pouvez faire le "x =".

379
00:21:35,220 --> 00:21:39,410
Cela signifie donc "multiplier" X "avec" i "
et le stocker dans <i> i </ i>.

380
00:21:39,410 --> 00:21:42,560
et bien sûr aussi le "/ =".

381
00:21:42,560 --> 00:21:47,770
Donc, ceci est un raccourci très pratique
et c'est ce que nous utilisons ici

382
00:21:47,770 --> 00:21:51,070
au lieu d'écrire
«somme + somme + données [i]"

383
00:21:52,100 --> 00:21:54,880
si c'est vraiment le cas de "+",

384
00:21:54,880 --> 00:21:59,310
il y a en fait une version
encore plus courte de ceci

385
00:21:59,310 --> 00:22:02,900
s'il se trouve que "X = 1".

386
00:22:02,900 --> 00:22:06,820
Donc, pour ajouter simplement 1 à une valeur,
que nous faisons tout le temps,

387
00:22:06,830 --> 00:22:09,120
dans les boucles, par exemple,

388
00:22:09,120 --> 00:22:12,790
puis il y a une version encore
plus courte qui est simple "i + +".

389
00:22:12,790 --> 00:22:19,640
Donc, "i + +" est le même qu'écrit
"i = i + 1",

390
00:22:19,640 --> 00:22:24,180
qui est la même qu'écrit "i + 1 =".

391
00:22:24,260 --> 00:22:27,280
Donc, cela est une sorte
d'un raccourci du raccourci,

392
00:22:27,280 --> 00:22:33,660
dans le cas extrême
où vous ajoutez simplement 1 à une valeur

393
00:22:33,660 --> 00:22:37,180
et c'est quelque chose que nous faisons souvent
quand nous itérons à travers un tableau.

394
00:22:37,180 --> 00:22:39,380
Et vous le verrez tout le temps,

395
00:22:39,380 --> 00:22:43,550
par exemple, en quatre boucles
et je veux vous le montrer.

396
00:22:43,550 --> 00:22:46,800
Maintenant, je ne pense pas nécessairement
que c'est la meilleure façon de l'écrire,

397
00:22:46,800 --> 00:22:48,860
Je pense en fait ceci l'est

398
00:22:48,870 --> 00:22:52,360
il ne prend pas beaucoup plus longtemps
et c'est une façon très instructive

399
00:22:52,360 --> 00:22:54,200
de voir ce qui se passe.

400
00:22:54,200 --> 00:22:56,030
Vous prenez cette valeur, vous ajoutez un

401
00:22:56,030 --> 00:23:00,360
puis le résultat de ceci sera
stocké dans "i".

402
00:23:00,360 --> 00:23:01,360
Encore une fois, ceci est,

403
00:23:01,360 --> 00:23:03,490
je le pense surtout pour un débutant

404
00:23:03,490 --> 00:23:07,370
beaucoup plus facile à comprendre que,
ce que ceci "i + +»?

405
00:23:07,370 --> 00:23:10,490
Mais, je voulais vous faire savoir
que ces raccourcis existent,

406
00:23:10,490 --> 00:23:12,400
parce que vous les voyez
tous sur la place,

407
00:23:12,400 --> 00:23:15,210
Si vous regardez le code JavaScript
d'autres personnes

408
00:23:16,110 --> 00:23:20,260
donc je vais supprimer ceci parce que
ce n'est pas une partie du code.

409
00:23:20,440 --> 00:23:21,940
Je vais enregistrer ce code

410
00:23:21,940 --> 00:23:25,920
et avec ça nous sommes arrivés
à la fin de cette leçon

411
00:23:25,920 --> 00:23:28,040
et à la fin de ce chapitre.

412
00:23:28,520 --> 00:23:29,560
D'accord, c'est tout.

413
00:23:29,580 --> 00:23:31,400
Nous sommes à la fin de ce cours.

414
00:23:31,400 --> 00:23:33,820
Félicitations, vous avez tenu
jusqu'a la fin

415
00:23:33,820 --> 00:23:36,650
et vous avez maintenant les compétences
de base de programmation

416
00:23:36,690 --> 00:23:40,540
de raisonner sur le monde
et en particulier aussi de raisonner sur

417
00:23:40,730 --> 00:23:44,990
la nature et la biologie évolutionnaire
et des maladies infectieuses et ainsi de suite.

418
00:23:44,990 --> 00:23:49,470
Ceci est une compétence incroyablement puissante
et je suis très heureux que vous l'avez maintenant.

419
00:23:49,870 --> 00:23:56,380
Maintenant, nous devons être clair, le codage
est une expérience d'apprentissage à vie.

420
00:23:56,700 --> 00:23:57,770
Il ne s'arrête  pas ici.

421
00:23:57,770 --> 00:23:59,300
Ce n'est qu'un début.

422
00:23:59,300 --> 00:24:02,650
Même si le développement
technologique s'arrêterait demain,

423
00:24:02,650 --> 00:24:05,190
il resterait une expérience
d'apprentissage à vie,

424
00:24:05,190 --> 00:24:09,370
mais bien sûr, nous savons tous qu'il ne
cessera pas et il s'accélérera,

425
00:24:09,370 --> 00:24:14,430
mais vous avez maintenant les compétences de base
pour vous maintenir au-dessus de ces développements.

426
00:24:14,430 --> 00:24:15,550
Donc encore une fois,

427
00:24:15,550 --> 00:24:16,740
félicitations!

428
00:24:16,740 --> 00:24:20,810
Si vous avez de temps, s'il vous plaît visitez
de temps en temps <i> natureincode.com </ i>

429
00:24:20,810 --> 00:24:25,270
Je continue de mettre à jour la page, je continue
d'ajouter des exemples de divers domaines,

430
00:24:25,300 --> 00:24:28,560
pas juste les sciences naturelles
aussi les sciences sociales,

431
00:24:28,560 --> 00:24:31,090
et j'espère que vous apprécierez
cela aussi.

432
00:24:31,090 --> 00:24:34,390
Alors, bonne chance et peut-être
on se verra encore.

