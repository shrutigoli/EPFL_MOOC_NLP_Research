1
00:00:03,347 --> 00:00:06,347
Welcome back! Nature, In Code.
We are in Chapter 7, lecture 4.

2
00:00:06,750 --> 00:00:09,194
We have everything set up
for our simulation.

3
00:00:09,431 --> 00:00:12,585
The exposure function is there,
but now we need to implement it.

4
00:00:12,785 --> 00:00:15,222
We need to implement
the whole infection process.

5
00:00:15,393 --> 00:00:17,588
So, this is what
we are gonna do, in this lecture.

6
00:00:17,751 --> 00:00:19,908
Alright, just as a reminder,
how we do it is

7
00:00:20,108 --> 00:00:23,108
again, we are gonna borrow
heavily from Chapter five.

8
00:00:24,420 --> 00:00:27,081
Where we talked about this
in great detail.

9
00:00:27,281 --> 00:00:32,207
But just as a reminder. We have a
focal individual here at location I.

10
00:00:32,828 --> 00:00:33,730
i, i

11
00:00:33,930 --> 00:00:37,544
and then correspondingly we now set,
ok, these are the contacts here.

12
00:00:37,744 --> 00:00:39,431
Eight cells in the vicinity

13
00:00:39,631 --> 00:00:41,047
and we now know that

14
00:00:41,247 --> 00:00:44,709
the indices correspondingly
here are i - 1

15
00:00:44,909 --> 00:00:48,272
and ii - 1 for up here,
so here we have i - 1

16
00:00:49,517 --> 00:00:52,833
the ones at the top,
and here we have i + 1

17
00:00:53,304 --> 00:00:54,654
for the ones at the bottom

18
00:00:55,321 --> 00:00:58,195
and we just keep the i constant here

19
00:00:58,395 --> 00:01:01,706
and correspondingly, if we go to
the left, we simply have to subtract

20
00:01:03,162 --> 00:01:05,709
one from i, and we have to add

21
00:01:06,877 --> 00:01:10,517
one to ii, if we want to go

22
00:01:10,717 --> 00:01:11,678
to the left. 

23
00:01:14,889 --> 00:01:17,791
And here, in this particular case

24
00:01:17,966 --> 00:01:19,795
Where we are simply
moving up and down

25
00:01:19,970 --> 00:01:21,437
but not to left, and to the right

26
00:01:21,680 --> 00:01:24,123
we will of course, remain

27
00:01:25,479 --> 00:01:27,725
we will retain the ii value

28
00:01:27,925 --> 00:01:31,660
and so, this is exactly how we
implemented this

29
00:01:31,890 --> 00:01:33,790
back in Chapter five.

30
00:01:33,950 --> 00:01:37,492
If this doesn't ring a bell, please
go back to Chapter five

31
00:01:37,692 --> 00:01:40,692
lecture four, where we talk about
all of this in great detail.

32
00:01:40,892 --> 00:01:43,892
So, let's go ahead
and implement this.

33
00:01:44,092 --> 00:01:47,092
Here we are, back in our code. We
have to run time step, set up here.

34
00:01:47,689 --> 00:01:49,339
and we are creating this temp grid

35
00:01:49,489 --> 00:01:51,872
and we call this function
exposed_neighbours

36
00:01:52,087 --> 00:01:54,014
on the individuals, on the grid

37
00:01:54,214 --> 00:01:55,893
who are in the infected state

38
00:01:56,667 --> 00:01:59,091
and then at the end,
when everything is set and done.

39
00:01:59,249 --> 00:02:02,444
We are gonna copy back,
the valuation template

40
00:02:02,644 --> 00:02:05,195
which has now been
updated into the grid.

41
00:02:05,709 --> 00:02:10,104
So, now what we need to do is,
we need to implement

42
00:02:10,504 --> 00:02:13,200
this exposed_neighbours function.

43
00:02:13,400 --> 00:02:15,067
So, let's go ahead and do this.

44
00:02:15,856 --> 00:02:17,714
I am gonna define here the function

45
00:02:18,673 --> 00:02:22,493
expose_neighbours

46
00:02:23,854 --> 00:02:25,184
expose neighbours

47
00:02:26,118 --> 00:02:30,505
and I am gonna keep those value here
i & ii

48
00:02:30,705 --> 00:02:33,964
I am not gonna change the name.
So, we have these two

49
00:02:34,514 --> 00:02:36,311
parameters here in this function.

50
00:02:36,511 --> 00:02:40,012
This is, of course, the location
of the individual that is infected

51
00:02:40,719 --> 00:02:43,846
that is supposed to
expose the neighbours.

52
00:02:44,866 --> 00:02:48,289
So, we just learned about
the coordinate system

53
00:02:48,489 --> 00:02:53,807
which neighbors will be exposed.

54
00:02:54,163 --> 00:02:56,947
Now here, this is not a random
thing, we actually have to

55
00:02:57,122 --> 00:03:00,766
systematically go through all
the neighbors. So, what I am

56
00:03:00,928 --> 00:03:05,011
gonna do is, I am gonna set up
the corresponding two-dimensional

57
00:03:05,173 --> 00:03:10,287
 loop here. I am gonna say,
for var n_i

58
00:03:10,487 --> 00:03:12,399
and I am now gonna use n_i, OK

59
00:03:12,869 --> 00:03:15,869
Because, first of all
I already used i here

60
00:03:16,252 --> 00:03:17,954
so, we shouldn't mess with that.

61
00:03:18,374 --> 00:03:21,435
But secondly, this just now stands,
essentially for a neighbour

62
00:03:21,606 --> 00:03:22,880
Ok, neighbour i

63
00:03:23,214 --> 00:03:27,466
So, n_i should start
at the minimum value

64
00:03:27,666 --> 00:03:32,048
which as we know is i - 1.

65
00:03:33,886 --> 00:03:36,886
this is the initialization here,
of the loop

66
00:03:37,147 --> 00:03:40,666
then the condition will be that,
this n_i

67
00:03:40,866 --> 00:03:45,092
be smaller or equal to
some maximum value

68
00:03:45,441 --> 00:03:49,808
and we know that this
maximum value is 1 + i or i + 1.

69
00:03:50,008 --> 00:03:53,008
Of course, it's the same,
and then finally

70
00:03:53,208 --> 00:03:56,821
in the same logic as before, we have
to of course, make sure that

71
00:03:57,021 --> 00:04:00,817
we keep increasing this n_i by one.

72
00:04:01,695 --> 00:04:05,327
Ok, so this is now
a slightly modified loop

73
00:04:05,527 --> 00:04:08,840
from what we know, but it is
essentially exact same logic.

74
00:04:09,226 --> 00:04:12,001
So, var n_i = i - 1

75
00:04:12,201 --> 00:04:15,374
so, gonna have little space here,
to make this look little nicer

76
00:04:15,629 --> 00:04:18,383
and so, this is the initialization,
the minimum value

77
00:04:18,583 --> 00:04:21,583
and then, we keep increasing
this value by one

78
00:04:21,783 --> 00:04:24,482
until, we reach the maximum value.

79
00:04:25,980 --> 00:04:29,528
Ok, basically now I am going to
do the exact same thing

80
00:04:30,902 --> 00:04:32,528
again for the

81
00:04:33,943 --> 00:04:35,566
for the i im values.

82
00:04:36,798 --> 00:04:41,867
So, what I am gonna
say here is for var n_ii

83
00:04:42,213 --> 00:04:45,963
and this, the minimum value
here of course, equals ii - 1

84
00:04:47,897 --> 00:04:55,252
then n_ii smaller than or equal to
the maximum value which is ii + 1

85
00:04:56,192 --> 00:05:03,253
and finally of course, the increment
n_ii equals n_ii + 1.

86
00:05:04,941 --> 00:05:07,778
Alright, so now,
we are basically going through

87
00:05:08,103 --> 00:05:12,007
all  the neighbouring individuals,
and the coordinates are now

88
00:05:12,207 --> 00:05:15,207
here for the neighbors n_i and n_ii.

89
00:05:16,480 --> 00:05:19,021
So the first thing I need to do is,
I need to say, look

90
00:05:19,208 --> 00:05:22,611
if I now actually add i equals n_i

91
00:05:22,874 --> 00:05:24,723
and ii equals n_ii

92
00:05:24,886 --> 00:05:28,005
or what does that mean? That means
I am not actually in a neighbour

93
00:05:28,177 --> 00:05:31,719
our cell, I'm in my own cell, right.
Because what I am doing here is

94
00:05:31,845 --> 00:05:35,023
I am simply going horizontally
and vertically through this grid

95
00:05:35,223 --> 00:05:38,223
that is spanned by these
maximum values

96
00:05:39,013 --> 00:05:43,490
and minimum values. But of course,
it contains my own cell i, ii

97
00:05:43,690 --> 00:05:47,338
so, I need to make sure that
I disregard the one cell

98
00:05:48,002 --> 00:05:50,580
that is actually mine.
So, I am simply gonna say

99
00:05:51,088 --> 00:05:56,288
Ok, if n_i equals i

100
00:05:56,488 --> 00:05:58,925
this is of course, the double equals

101
00:05:59,129 --> 00:06:03,507
and also, if n_ii equals ii.

102
00:06:03,707 --> 00:06:07,307
So, if these two conditions
are true. Oops, ii not 11

103
00:06:09,020 --> 00:06:13,732
then, I am in fact in my own cell.
So don't do anything, just go on

104
00:06:14,633 --> 00:06:18,183
and act as if nothing happened, and
in fact the keyword in java script

105
00:06:18,383 --> 00:06:21,383
to do this in a loop is,
simply say continue.

106
00:06:22,306 --> 00:06:24,701
Ok, this is a keyword,
you can see this here

107
00:06:25,888 --> 00:06:27,938
in my text editor, in
my textwrangler here

108
00:06:28,101 --> 00:06:30,600
actually highlights this
as a keyword

109
00:06:31,226 --> 00:06:33,851
So, this is a keyword to continue.
when you are in a loop

110
00:06:34,526 --> 00:06:36,915
and the loop hits
the continue statement

111
00:06:37,115 --> 00:06:40,636
it is simply  gonna ignore, whatever
happens further down here

112
00:06:40,836 --> 00:06:42,649
it's gonna go into
the next iteration

113
00:06:42,849 --> 00:06:47,173
and this sometimes can be quite
handy, and here is a case where

114
00:06:47,363 --> 00:06:52,201
this is handy. Ok, so now,
here on this line now

115
00:06:53,110 --> 00:06:55,740
I am going to now, try an infection

116
00:06:55,940 --> 00:06:59,227
because now, indeed we are
at the situation, where we have

117
00:07:00,563 --> 00:07:03,012
the infected indiviual i, ii.

118
00:07:03,805 --> 00:07:06,567
We are now certain,
we are on a neighbouring cell

119
00:07:06,767 --> 00:07:09,673
so, I am going to try to
infect this neighbour

120
00:07:09,873 --> 00:07:12,645
I am gonna call a function for that,
which I have to define

121
00:07:12,873 --> 00:07:14,873
a try_infection.

122
00:07:15,269 --> 00:07:16,557
And again just to be clear

123
00:07:17,294 --> 00:07:21,292
the loop, the code will
never get to this line

124
00:07:21,761 --> 00:07:24,100
if this is true, that's what
continue does

125
00:07:24,374 --> 00:07:28,886
it immediately aborts the current
iteration and continues at the next

126
00:07:29,063 --> 00:07:32,600
iteration. So, this line here,
will only ever be executed

127
00:07:33,244 --> 00:07:36,010
if this condition is not true.

128
00:07:36,976 --> 00:07:41,751
Ok, so try_infection, well I would
like to now try and infect

129
00:07:42,192 --> 00:07:46,142
the neighbour. So, basically
I need to give the coordinates here

130
00:07:46,342 --> 00:07:49,517
n_i and n_ii

131
00:07:52,078 --> 00:07:54,128
there is one more thing here
that I am sure

132
00:07:54,328 --> 00:07:57,093
you have been kind of nervous
about, all this time, coming

133
00:07:57,268 --> 00:08:01,619
from Chapter five, and that has
to do with these boundary issues.

134
00:08:01,819 --> 00:08:04,819
Right? means some of these values

135
00:08:05,019 --> 00:08:09,840
may actually now be not good,
quote unquote values

136
00:08:10,040 --> 00:08:13,040
to be used as array indices.

137
00:08:13,240 --> 00:08:17,922
Why? Well, because for example,
i may actually be zero

138
00:08:18,122 --> 00:08:21,122
and so, your n_i here
would be a negative value

139
00:08:21,402 --> 00:08:24,703
and of course, you know, you can not
use a negative value in Java Script

140
00:08:24,903 --> 00:08:27,422
as an array index,
nor can you use an value

141
00:08:27,622 --> 00:08:31,492
that's greater or equal
to the array length

142
00:08:31,883 --> 00:08:35,146
and we again talked about this
in detail, in Chapter five.

143
00:08:35,771 --> 00:08:38,892
So, what we are gonna do is, we're
gonna use this exact same solution

144
00:08:39,780 --> 00:08:41,467
that we used in Chapter five.

145
00:08:41,942 --> 00:08:44,846
So, you should go
and copy this function

146
00:08:45,275 --> 00:08:48,227
get_bounded index,
and I have already done this here

147
00:08:48,427 --> 00:08:50,517
and have just pasted in here now

148
00:08:50,931 --> 00:08:54,158
this function, you have
in the spatial simulation html file

149
00:08:54,693 --> 00:08:57,842
it is a function, that
we developed in Chapter five.

150
00:08:58,684 --> 00:09:00,570
It gets an index essentially

151
00:09:02,575 --> 00:09:06,837
and then it checks, whether that
index is actually out of bounds or

152
00:09:07,037 --> 00:09:13,167
not given the grid length, and if it
is, it will return the correct index

153
00:09:13,367 --> 00:09:16,367
if it's not it will simply
return the same index.

154
00:09:16,655 --> 00:09:20,700
So, this is a really handy function,
go over to Chapter five

155
00:09:21,041 --> 00:09:24,113
and copy it from your
spatial simulation

156
00:09:24,588 --> 00:09:29,701
and paste it in here. So, now
instead of passing in n_i & n_ii.

157
00:09:30,487 --> 00:09:33,350
We should actually
pass in the values

158
00:09:33,550 --> 00:09:38,339
that have first gone through this
get_bounded_index function

159
00:09:38,539 --> 00:09:41,242
So, I am gonna say
get_bounded_index n_i

160
00:09:41,442 --> 00:09:44,732
and get_bounded_index n_ii.

161
00:09:44,932 --> 00:09:49,081
Write it in the original
n_i & n+ii values

162
00:09:49,753 --> 00:09:50,753
Ok.

163
00:09:52,697 --> 00:09:56,733
Alright, and so now we can be
certain, that the values that we

164
00:09:56,923 --> 00:10:02,061
pass here to this try_infection
function as arguments

165
00:10:02,261 --> 00:10:05,364
are indeed correct indices

166
00:10:05,564 --> 00:10:07,943
and so, with that in place,
we can now

167
00:10:08,480 --> 00:10:11,559
finally implement
this try_infection methods.

168
00:10:11,759 --> 00:10:14,759
So, function try_infection

169
00:10:16,444 --> 00:10:20,417
and then, the two values, and again
here I can just use ii, i

170
00:10:20,692 --> 00:10:24,167
it doesn't matter, these are now
just two corrected values.

171
00:10:25,352 --> 00:10:29,562
So, this is now
a neighboring individual

172
00:10:30,059 --> 00:10:34,954
that is exposed
to an infected individual.

173
00:10:36,538 --> 00:10:37,551
So

174
00:10:38,276 --> 00:10:39,743
when can the infection happen?

175
00:10:39,918 --> 00:10:42,638
and It can only happen
under two circumstances.

176
00:10:42,838 --> 00:10:46,406
First of all, this individual
has to be susceptible

177
00:10:46,708 --> 00:10:49,023
Ok, this is the first condition,
we can simply say

178
00:10:49,173 --> 00:10:53,076
ok, if grid i, ii

179
00:10:54,201 --> 00:10:56,601
equals, and this
is the double equals S

180
00:10:56,801 --> 00:11:00,951
Ok, if this individual, that is
exposed here, is susceptible

181
00:11:01,357 --> 00:11:05,137
then it can potentially happen. But
there is of course, a second

182
00:11:05,306 --> 00:11:07,681
condition and we know
this is not deterministic

183
00:11:07,844 --> 00:11:10,017
there is a probability now
that this happens

184
00:11:10,217 --> 00:11:12,708
and this probability
is of course exactly beta.

185
00:11:13,163 --> 00:11:14,968
And so, we can simply say

186
00:11:15,425 --> 00:11:19,808
if math_random is smaller than beta.

187
00:11:21,490 --> 00:11:25,791
So, now with the probability beta
this will now happen

188
00:11:26,523 --> 00:11:30,193
So, here now we're gonna
set the individual to i

189
00:11:31,398 --> 00:11:34,398
and be very careful here.
As we said many times

190
00:11:35,007 --> 00:11:39,599
In this Chapter, we are not going to
update the individual on the grid

191
00:11:39,799 --> 00:11:43,466
because that would
lead to complicated errors

192
00:11:43,901 --> 00:11:48,625
as some errors though,
we are going to update the temp_grid

193
00:11:48,982 --> 00:11:52,395
Ok, temp_grid i, ii

194
00:11:52,595 --> 00:11:55,608
we will set this to infected

195
00:11:59,034 --> 00:12:01,757
and then, you know
this will happen a lot of times

196
00:12:01,920 --> 00:12:04,116
potentially and then at
the end. Of course

197
00:12:04,303 --> 00:12:07,441
because we implemented this
here correctly in the run time step

198
00:12:07,623 --> 00:12:09,844
this status here in the temp_grid

199
00:12:10,044 --> 00:12:14,111
will of course, be then
copied over to grid.

200
00:12:15,287 --> 00:12:18,287
But here be careful at,
that you really update

201
00:12:18,754 --> 00:12:22,322
the temp_grid individuals
and not the grid individuals

202
00:12:23,199 --> 00:12:27,819
good so, with that in place. I think
we can now actually save this.

203
00:12:28,767 --> 00:12:32,177
and take a look at an epidemic
in the browser.

204
00:12:32,377 --> 00:12:35,802
So, let's go ahead and do this.
Let's switch over to the browser.

205
00:12:36,400 --> 00:12:39,300
So, here is our original situation

206
00:12:39,450 --> 00:12:41,350
but of course now,
I am gonna reload this

207
00:12:41,525 --> 00:12:43,150
it start from another location

208
00:12:43,350 --> 00:12:45,738
but let me go ahead
and do this reload

209
00:12:46,108 --> 00:12:48,116
and so now, here you
can see, it started here

210
00:12:48,279 --> 00:12:50,765
and it's now spreading
expremely rapidly

211
00:12:50,927 --> 00:12:53,279
and it's of course,
given the boundary conditions

212
00:12:53,454 --> 00:12:55,107
 it's coming in from the other sides

213
00:12:55,270 --> 00:12:59,303
and very quickly, the whole thing
will be infected

214
00:12:59,503 --> 00:13:01,642
Boom, here we are
everyone is now infected

215
00:13:01,842 --> 00:13:04,722
let me reload this, just to see
what this looks like again.

216
00:13:04,922 --> 00:13:07,174
it's starting from here,
locally spreading out

217
00:13:07,337 --> 00:13:10,227
now it is going over the boundaries,
of course coming in here 

218
00:13:10,390 --> 00:13:13,640
to the right and to the top, and
then eventually here to the top

219
00:13:13,815 --> 00:13:16,340
right and now,
everyone is infected

220
00:13:16,988 --> 00:13:20,360
Ok, this seems to be working.
Great job!

221
00:13:20,560 --> 00:13:24,552
we have an infection spreading,
and this is an epidemic here

222
00:13:24,752 --> 00:13:28,241
now, something is though,
not quite right yet, fully

223
00:13:29,054 --> 00:13:34,477
why? well basically, the end
situation here is that everyone

224
00:13:34,901 --> 00:13:38,140
is infected and
will remain infected

225
00:13:38,872 --> 00:13:41,530
So, this is not totally
what we wanted, right?

226
00:13:41,730 --> 00:13:45,179
we will have to implement now,
a recovery step as well.

227
00:13:44,729 --> 00:13:47,729


228
00:13:46,517 --> 00:13:50,264
if we don't do this, then we get
exactly this outcome

229
00:13:50,464 --> 00:13:54,891
which is that, every single
individual will be infected

230
00:13:55,091 --> 00:13:57,332
and this will always happen.
Well, why?

231
00:13:57,532 --> 00:13:59,234
because there is no recovery right.

232
00:13:59,422 --> 00:14:02,594
even the individuals
that are at the very end 

233
00:14:03,951 --> 00:14:07,201
of this spread will eventually
get infected.

234
00:14:07,401 --> 00:14:10,016
It's just guaranteed that
it will happen eventually 

235
00:14:10,216 --> 00:14:12,335
this exposure will occur

236
00:14:12,985 --> 00:14:15,559
and the probabilities
will be lower than beta

237
00:14:15,746 --> 00:14:17,170
and the infection will occur.

238
00:14:17,370 --> 00:14:22,399
So, that's why every single
individual will always get infected

239
00:14:22,712 --> 00:14:25,187
in this particular version
of our code.

240
00:14:25,387 --> 00:14:29,262
So, what we need to do now is,
we need to finish the simulation 

241
00:14:29,801 --> 00:14:32,461
by implementing the recovery step

242
00:14:32,635 --> 00:14:34,348
and this we'll do
in the next lecture.

