1
00:00:03,600 --> 00:00:07,400
Bienvenue, la Nature, dans le code.
Nous sommes dans le chapitre 4, leçon 3.

2
00:00:07,400 --> 00:00:08,800
Dans la vidéo précédente,

3
00:00:08,800 --> 00:00:11,600
nous avons implémenté des séquences d'ADN

4
00:00:11,600 --> 00:00:13,950
sous forme de tableaux de bases,

5
00:00:13,950 --> 00:00:15,900
et nous avons stocké ces tableaux

6
00:00:15,900 --> 00:00:18,100
comme une population dans un autre tableau,

7
00:00:18,100 --> 00:00:20,250
nous avions donc un tableau
à deux dimensions,

8
00:00:20,250 --> 00:00:23,500
et maintenant, ce que nous allons faire,
dans cette leçon, c'est deux choses.

9
00:00:23,500 --> 00:00:26,600
Tout d'abord, nous allons imprimer
ces séquences d'ADN

10
00:00:26,600 --> 00:00:27,750
dans la console

11
00:00:27,750 --> 00:00:29,800
afin que nous puissions voir
ce qui se passe,

12
00:00:29,800 --> 00:00:33,650
et, d'autre part, nous allons introduire
la mutation, alors allons-y.

13
00:00:33,650 --> 00:00:35,250
Donc, ceci est notre code.

14
00:00:35,250 --> 00:00:36,750
Nous pensons que cela fonctionne très bien.

15
00:00:36,750 --> 00:00:38,650
Il ne nous donne pas d'erreurs,

16
00:00:38,650 --> 00:00:40,600
mais nous ne pouvons pas voir
de sortie non plus,

17
00:00:40,600 --> 00:00:42,697
alors pourquoi ne nous fixons
pas cela d'abord?

18
00:00:42,697 --> 00:00:44,700
Donc, ici, à la fin,

19
00:00:44,700 --> 00:00:46,350
quand nous appelons cette fonction,

20
00:00:46,350 --> 00:00:47,800
<I> première génération </ i>,

21
00:00:47,800 --> 00:00:49,050
une fois cela est fait,

22
00:00:49,050 --> 00:00:51,150
nous aimerions imprimer les séquences,

23
00:00:51,150 --> 00:00:53,000
donc je vais appeler notre fonction ici,

24
00:00:53,000 --> 00:00:55,250
<i> séquences d'impression </ i>,

25
00:00:56,400 --> 00:00:59,200
et cette fonction n'a pas encore
été définie,

26
00:00:59,200 --> 00:01:00,750
donc je vais devoir le faire.

27
00:01:01,500 --> 00:01:04,250
Ainsi, les séquences d'impression,
que devrait-il faire?

28
00:01:04,250 --> 00:01:06,450
Eh bien, nous allons la définir en premier.

29
00:01:06,450 --> 00:01:10,480
Fonction <i> séquences d'impression </ i>.

30
00:01:11,050 --> 00:01:12,050
D'accord.

31
00:01:13,150 --> 00:01:15,750
Eh bien, il devrait, essentiellement,
passer à travers

32
00:01:16,800 --> 00:01:19,250
toutes les séquences d'ADN que nous avons,

33
00:01:19,250 --> 00:01:21,200
puis il doit les imprimer,

34
00:01:21,200 --> 00:01:24,550
donc en passant par toutes les séquences,

35
00:01:24,550 --> 00:01:28,050
en d'autres termes,
nous allons utiliser une boucle.

36
00:01:28,050 --> 00:01:30,200
Donc, nous allons utiliser
notre petite amie,

37
00:01:30,200 --> 00:01:32,350
la boucle <i> pour </ i>,

38
00:01:32,350 --> 00:01:35,250
donc pour <i> var i = 0 </ i>

39
00:01:35,700 --> 00:01:40,100
et puis <i> i & lt; nombre de séquences </ i>,

40
00:01:40,100 --> 00:01:44,250
ok, le <i> nombre de séquences </ i>.

41
00:01:45,050 --> 00:01:47,500
Rappelons que ceci est la variable

42
00:01:47,500 --> 00:01:49,100
que nous avons mis en place ici,

43
00:01:49,600 --> 00:01:51,550
qui est actuellement,
la source de la valeur 100,

44
00:01:51,550 --> 00:01:53,600
qui est, essentiellement,
la taille de notre population,

45
00:01:53,600 --> 00:01:56,500
ou, vous savez,
le nombre de séquences d'ADN,

46
00:01:57,250 --> 00:02:00,850
puis, à la fin, bien sûr,
nous devons augmenter <i> i + 1 </ i>

47
00:02:00,850 --> 00:02:03,251
afin d'éviter les boucles infinies.

48
00:02:04,150 --> 00:02:05,190
D'accord.

49
00:02:05,190 --> 00:02:09,200
Alors, que devons-nous faire ici
à chaque itération?

50
00:02:09,200 --> 00:02:11,750
Eh bien, nous aimerions imprimer
la séquence.

51
00:02:12,400 --> 00:02:14,750
Maintenant, afin d'imprimer la séquence,

52
00:02:15,550 --> 00:02:17,200
nous devons mettre en œuvre un code,

53
00:02:17,200 --> 00:02:19,750
mais je sens que nous ne devrions pas
le faire ici.

54
00:02:19,750 --> 00:02:21,200
Je vais tout simplement,

55
00:02:21,200 --> 00:02:22,950
appeler une fonction

56
00:02:22,950 --> 00:02:25,750
que l'on appelle <i>séquence d'impression</i>,

57
00:02:25,750 --> 00:02:27,580
et notez le singulier,

58
00:02:27,580 --> 00:02:29,550
Nous avons donc ici
<i> séquences d'impression </ i>,

59
00:02:29,550 --> 00:02:31,800
et ici nous avons tout simplement
<i> séquence d'impression </ i>,

60
00:02:31,800 --> 00:02:34,750
et maintenant je pense
c'est <i> séquence d'impression </ i>.

61
00:02:35,400 --> 00:02:37,600
C'est le travail de cette fonction

62
00:02:37,600 --> 00:02:39,650
pour, essentiellement,
imprimer la séquence,

63
00:02:39,650 --> 00:02:43,200
donc la fonction <i> séquence
d'impression </ i>.

64
00:02:43,200 --> 00:02:46,250
Nous l'externalisation la fonctionnalité ici.

65
00:02:47,050 --> 00:02:48,600
Alors, que doit-elle faire?

66
00:02:48,600 --> 00:02:49,750
Eh bien, tout d'abord,

67
00:02:49,750 --> 00:02:53,000
nous devons la passer une valeur.

68
00:02:53,800 --> 00:02:54,950
Quelle valeur?

69
00:02:54,950 --> 00:02:56,750
Eh bien, la séquence en cours,

70
00:02:56,750 --> 00:02:59,000
donc, ici, <i> séquence d'impression </ i>.

71
00:02:59,000 --> 00:03:02,200
Nous voulons passer la valeur

72
00:03:02,200 --> 00:03:04,300
de l'ensemble de la population.

73
00:03:04,300 --> 00:03:06,550
Maintenant, rappelez-vous,
le tableau de la population

74
00:03:06,550 --> 00:03:08,500
est appelé <i> séquences </ i>,

75
00:03:09,000 --> 00:03:10,500
<i> séquences </ i>,

76
00:03:10,900 --> 00:03:15,200
et l'élément ici est celle <i> d'indice i </ i>,

77
00:03:15,200 --> 00:03:17,250
qui, vous le savez, n'est pas nouveau.

78
00:03:18,000 --> 00:03:20,250
Voilà comment nous itérons

79
00:03:20,250 --> 00:03:22,400
sur un tableau, essentiellement.

80
00:03:22,400 --> 00:03:25,500
Donc, cela est les séquences
de l'indice <i> i </ i> .

81
00:03:25,500 --> 00:03:26,600
Ceci est le tableau.

82
00:03:26,600 --> 00:03:28,600
Voilà ce que nous allons passer ici,

83
00:03:28,600 --> 00:03:31,250
nous avons donc besoin
de définir le paramètre ici.

84
00:03:31,750 --> 00:03:33,500
Je pense que je vais l'appeler,

85
00:03:33,500 --> 00:03:35,650
vous savez, je suppose simplement,
<i> séquence </ i>, n'est ce pas?

86
00:03:35,650 --> 00:03:37,850
Nous obtenons une séquence ici.
Qu'en pensez-vous?

87
00:03:37,850 --> 00:03:40,070
la séquence. D'accord.

88
00:03:40,070 --> 00:03:42,250
Donc, maintenant, cette fonction ici

89
00:03:42,250 --> 00:03:45,250
a besoin d'imprimer cette séquence.

90
00:03:46,000 --> 00:03:48,500
Donc, encore une fois, rappelez-vous
la séquence

91
00:03:48,500 --> 00:03:51,700
est tout simplement un tableau
de paires de bases,

92
00:03:51,700 --> 00:03:55,250
pour que je puisse aller juste
à travers ce tableau.

93
00:03:55,250 --> 00:03:57,500
Donc, ici, je dirais simplement

94
00:03:57,500 --> 00:03:59,900
<I> pour var i = 0 </ i>,

95
00:04:00,750 --> 00:04:04,000
<I> i & lt; la longueur de la séquence </ i>.

96
00:04:05,400 --> 00:04:06,850
On pourrait aussi utiliser, d'ailleurs,

97
00:04:06,850 --> 00:04:10,500
si cela ici est la longueur
d'une séquence d'ADN.

98
00:04:11,000 --> 00:04:13,900
J'utilise simplement ici la propriété
de longueur du tableau,

99
00:04:13,900 --> 00:04:17,300
mais je pouvais, en principe,
utiliser également cette variable ici.

100
00:04:17,300 --> 00:04:18,950
Elle aurait la même valeur,

101
00:04:18,950 --> 00:04:22,950
mais je vais utiliser ici cette propriété
de <i> longeur.séquence</ i>,

102
00:04:22,950 --> 00:04:25,600
et puis je vais dire

103
00:04:25,600 --> 00:04:27,250
<I> i = i + 1 </ i>,

104
00:04:27,750 --> 00:04:29,000
comme toujours,

105
00:04:29,750 --> 00:04:32,252
alors maintenant j'ai chaque paire
de base ici

106
00:04:32,252 --> 00:04:37,500
dans <i> l'index de séquence i </ i>,

107
00:04:37,500 --> 00:04:39,250
donc je peux, en principe, dire simplement,

108
00:04:39,250 --> 00:04:42,600
non, je vais sortie cette paire de base

109
00:04:42,600 --> 00:04:44,150
dans la console directement,

110
00:04:44,150 --> 00:04:47,600
donc<i> séquence de console log i </ i>,

111
00:04:47,600 --> 00:04:49,200
mais, si je voulais faire ceci,

112
00:04:49,200 --> 00:04:51,100
alors toutes les séquences seront empilées

113
00:04:51,100 --> 00:04:54,400
verticalement dans la console,

114
00:04:54,400 --> 00:04:56,850
et ce serait très difficile à lire.

115
00:04:56,850 --> 00:05:00,350
Donc, ce que j'aimerais faire c'est que j'aimerai faire

116
00:05:00,350 --> 00:05:02,750
quelques concaténation de chaîne

117
00:05:02,750 --> 00:05:04,400
où je vais ajouter

118
00:05:04,400 --> 00:05:08,500
tous les bases horizontalement
comme une chaîne,

119
00:05:08,500 --> 00:05:11,150
et puis je vais sortie cette chaîne.

120
00:05:11,150 --> 00:05:13,200
Donc, en gros, ce que je vais faire
c'est, ici,

121
00:05:13,200 --> 00:05:15,280
Je vais mettre en place une chaîne vide,

122
00:05:15,280 --> 00:05:19,150
et je vais appeler cette
<i>chaîne de séquence</ i>,

123
00:05:19,150 --> 00:05:22,850
par exemple, <i> chaîne_séquence</ i>,

124
00:05:22,850 --> 00:05:25,700
et je vais initialiser ceci comme
la chaîne vide,

125
00:05:25,700 --> 00:05:29,500
puis, ici, plutôt que de connecter la base

126
00:05:31,600 --> 00:05:33,050
dans la console,

127
00:05:33,050 --> 00:05:34,550
Je vais simplement dire,

128
00:05:34,550 --> 00:05:37,300
<I> chaîne de séquence = </ i>

129
00:05:37,300 --> 00:05:39,700
ainsi, nous avons déjà <i> = chaîne</ i>,

130
00:05:39,700 --> 00:05:43,100
plus le <i> Séquence i </ i>, donc cette base.

131
00:05:43,100 --> 00:05:44,800
Donc, ici, vous savez,

132
00:05:44,800 --> 00:05:48,500
je construis itérativement
cette chaîne de séquence,

133
00:05:48,500 --> 00:05:51,750
et je vais terminer cette ligne,
bien sûr, avec un point-virgule ici,

134
00:05:51,750 --> 00:05:54,600
puis, à la fin, une fois que
j'ai fini de faire cela,

135
00:05:54,600 --> 00:05:55,750
Je peux maintenant dire,

136
00:05:55,750 --> 00:05:59,600
<I> console log chaîne de séquence </ i>,

137
00:05:59,600 --> 00:06:02,350
ok, donc je connecte essentiellement

138
00:06:02,350 --> 00:06:05,000
cette chaîne de séquence
que je viens de construire.

139
00:06:05,500 --> 00:06:06,500
D'accord.

140
00:06:07,350 --> 00:06:10,000
Maintenant, nous allons voir
si tout cela a fonctionné.

141
00:06:10,000 --> 00:06:11,750
On va enregistrer ceci,

142
00:06:11,750 --> 00:06:14,950
et nous allons au navigateur.

143
00:06:14,950 --> 00:06:17,250
Nous devrions toujours
avoir notre fichier ouvert.

144
00:06:17,250 --> 00:06:19,100
Voici la console.

145
00:06:19,100 --> 00:06:20,950
C'est vide,

146
00:06:20,950 --> 00:06:25,000
comme il devrait être à partir
du code précédent,

147
00:06:25,000 --> 00:06:27,750
mais maintenant nous avons changé le code,
nous allons donc recharger cela,

148
00:06:28,300 --> 00:06:30,050
et ici nous obtenons notre résultat.

149
00:06:30,050 --> 00:06:32,750
Donc, voici une séquence d'ADN,

150
00:06:32,750 --> 00:06:34,500
avec 20 paires de bases,

151
00:06:35,100 --> 00:06:38,500
et il imprime en fait 100 chaînes,

152
00:06:38,500 --> 00:06:41,300
mais Chrome est bien ici.

153
00:06:41,300 --> 00:06:43,950
Plutôt que d'imprimer la même chaîne exacte

154
00:06:43,950 --> 00:06:45,400
une centaine de fois,

155
00:06:45,400 --> 00:06:46,700
il nous dit simplement,

156
00:06:46,700 --> 00:06:48,600
"Regarde, j'ai cette chaîne,

157
00:06:48,600 --> 00:06:51,750
et je suis censé de l'imprimer
une centaine de fois.

158
00:06:51,750 --> 00:06:52,800
Je ne vais pas faire cela.

159
00:06:52,800 --> 00:06:54,400
Je vais juste l'imprimer une fois,

160
00:06:54,400 --> 00:06:56,900
et puis vous dire, vous le savez,

161
00:06:56,900 --> 00:06:59,350
vous devriez vous attendre
à cela cent fois ici,"

162
00:06:59,350 --> 00:07:03,350
ceci est donc juste pour garder
la console propre et bien rangé,

163
00:07:03,350 --> 00:07:04,500
mais il fonctionne,

164
00:07:04,500 --> 00:07:07,750
donc notre impresion ici fonctionne
comme prévu.

165
00:07:07,750 --> 00:07:12,750
C'est super, nous pouvons maintenant
passer à la mise en œuvre de mutation.

166
00:07:12,750 --> 00:07:14,550
Donc, nous sommes de retour
dans notre code ici.

167
00:07:14,550 --> 00:07:17,500
Maintenant, nous aimerions
mettre en œuvre la mutation.

168
00:07:17,950 --> 00:07:19,950
Bon, comment pouvons-nous faire cela?

169
00:07:20,450 --> 00:07:22,200
Eh bien, voyons!

170
00:07:22,200 --> 00:07:24,550
Nous générons la première génération.

171
00:07:24,550 --> 00:07:27,050
Ceci est une centaine de séquences d'ADN,

172
00:07:27,050 --> 00:07:30,500
ils sont tout à fait identiques,
nous les imprimons.

173
00:07:30,500 --> 00:07:31,600
Ok très bien.

174
00:07:31,600 --> 00:07:33,400
mais maintenant ce que je voudrais faire

175
00:07:33,400 --> 00:07:36,800
c'est maintenant,
je voudrais effectivement introduire,

176
00:07:36,800 --> 00:07:39,400
vous savez, une dimension temporelle

177
00:07:39,400 --> 00:07:41,550
où nous avons beaucoup,
beaucoup de générations,

178
00:07:41,550 --> 00:07:45,350
et, à chaque génération, je voudrais
introduire une certaine mutation,

179
00:07:45,350 --> 00:07:47,100
donc je vais appeler une fonction ici

180
00:07:47,100 --> 00:07:50,100
<I> exécuter générations</ i>,

181
00:07:52,100 --> 00:07:54,550
et qu'est-ce que cet
<i> exécuter générations</ i> faire?

182
00:07:54,550 --> 00:07:56,950
Eh bien, nous allons continuer
et le mettre en œuvre.

183
00:07:57,700 --> 00:08:00,500
D'accord, donc toujours
le même genre de principe.

184
00:08:01,245 --> 00:08:05,750
Fonction <i> exécuter générations </ i>.

185
00:08:06,550 --> 00:08:08,200
Maintenant, ce que nous aimerions faire ici

186
00:08:08,200 --> 00:08:11,853
c'est que nous aimerions, essentiellement,

187
00:08:11,853 --> 00:08:15,096
changer les bases

188
00:08:17,500 --> 00:08:21,850
dans les chaînes d'ADN
avec un certain taux,

189
00:08:21,850 --> 00:08:24,000
qu'on appelle le taux de mutation,

190
00:08:24,000 --> 00:08:26,750
donc nous aimerons essentiellement,
introduire

191
00:08:26,750 --> 00:08:29,250
des erreurs ou des changements,

192
00:08:29,250 --> 00:08:30,950
certaines modifications aléatoires

193
00:08:30,950 --> 00:08:33,250
dans ces séquences d'ADN,

194
00:08:33,750 --> 00:08:37,300
il semble que je dois définir
deux variables en premier.

195
00:08:37,300 --> 00:08:39,400
Tout d'abord,
je dois savoir combien de générations

196
00:08:39,400 --> 00:08:42,050
je vais exécuter effectivement,
puis quel est ce taux

197
00:08:42,050 --> 00:08:44,850
que nous allons introduire ces changements.

198
00:08:44,850 --> 00:08:48,750
Donc, revenons ici à l'endroit où
nous avons défini les variables globales,

199
00:08:48,750 --> 00:08:52,750
et ce que je vais faire c'est que
je vais introduire

200
00:08:53,300 --> 00:08:54,750
deux variables ici.

201
00:08:54,750 --> 00:08:56,650
D'abord, je vais introduire cela.

202
00:08:56,650 --> 00:08:59,450
Je vais l'appeler
<i> nombre de générations </ i>,

203
00:08:59,450 --> 00:09:02,150
ok, <i> nombre de générations </ i>,

204
00:09:02,150 --> 00:09:03,650
et nous allons définir ceci, peut-être,

205
00:09:03,650 --> 00:09:06,450
à 100 générations,

206
00:09:06,450 --> 00:09:09,848
et puis je voudrais introduire
ce taux de mutation, d'accord,

207
00:09:09,848 --> 00:09:14,004
donc je vais appeler ce taux de mutation,

208
00:09:15,070 --> 00:09:19,000
et je vais simplement mettre cela à 0,0001,

209
00:09:19,000 --> 00:09:21,200
donc quelque chose, vous savez,
plutôt petite,

210
00:09:21,200 --> 00:09:23,450
et cela est maintenant le taux de mutation.

211
00:09:23,450 --> 00:09:26,150
Maintenant, chaque fois que
vous avez un taux de mutation,

212
00:09:26,150 --> 00:09:28,700
vous devez vous demander par quoi,

213
00:09:28,700 --> 00:09:31,150
par quelle unité, et par quel temps?

214
00:09:31,150 --> 00:09:35,100
Les taux de mutation viennent dans
toutes les différentes figures et formes.

215
00:09:35,100 --> 00:09:38,650
Est-ce par base, est-il par génome entier,

216
00:09:38,650 --> 00:09:40,600
est-il par génération,

217
00:09:40,600 --> 00:09:44,200
ou est-ce par an, ou des millions d'années?

218
00:09:44,200 --> 00:09:47,100
Donc, vous savez, vous devez,
lorsque vous lisez la littérature

219
00:09:47,100 --> 00:09:51,300
et vous voyez le terme, le taux de mutation,
il faut toujours se demander,

220
00:09:51,300 --> 00:09:53,100
"D'accord c'est quoi une unité ici?"

221
00:09:53,100 --> 00:09:55,750
Donc, nous allons simplement
définir cela comme

222
00:09:55,750 --> 00:09:59,501
<I> par base et la génération </ i>,

223
00:10:00,750 --> 00:10:05,253
c'est donc le taux de mutation
par base et génération.

224
00:10:05,998 --> 00:10:09,250
Bon, maintenant que nous avons
ces deux choses mises en œuvre,

225
00:10:09,250 --> 00:10:11,350
nous allons mettre en œuvre
la fonction ici.

226
00:10:11,350 --> 00:10:13,800
<I> exécuter générations</ i>.

227
00:10:13,800 --> 00:10:15,999
Donc, ce que nous devons faire
c'est que nous devons

228
00:10:15,999 --> 00:10:20,250
itérer sur chaque base,

229
00:10:21,196 --> 00:10:22,596
dans chaque séquence,

230
00:10:22,596 --> 00:10:24,150
et nous devons le faire,

231
00:10:24,150 --> 00:10:26,500
vous le savez, beaucoup, beaucoup de fois,
mais de nombreuses générations

232
00:10:26,500 --> 00:10:28,050
que nous voudrions exécuter.

233
00:10:28,050 --> 00:10:31,350
Donc,essentiellement, ce que cette
fonction va maintenant être

234
00:10:31,350 --> 00:10:33,750
c'est que ça va être une boucle,
et ce ne sera pas seulement

235
00:10:33,750 --> 00:10:37,000
une boucle, ce sera une boucle imbriquée,

236
00:10:37,000 --> 00:10:39,650
et ça va être une triple boucle imbriquée.

237
00:10:39,650 --> 00:10:43,350
Nous avons donc une boucle
dans une boucle, dans une boucle,

238
00:10:43,350 --> 00:10:46,350
et cela peut, vous savez,
sembler un peu intimidant,

239
00:10:46,350 --> 00:10:48,750
mais c'est vraiment très simple,

240
00:10:48,750 --> 00:10:51,250
si vous pensez à ce sujet,
alors suivez-moi à faire cela,

241
00:10:51,250 --> 00:10:54,500
et je pense que vous comprendrez
la logique ici assez facilement.

242
00:10:54,500 --> 00:10:56,650
Donc, tout d'abord, nous voulons dire, okay,

243
00:10:56,650 --> 00:10:59,500
nous allons faire quelque chose maintenant
pour un couple de générations,

244
00:10:59,500 --> 00:11:01,500
donc, pour cela, nous allons
construire une boucle.

245
00:11:01,500 --> 00:11:06,245
Ok, donc <i> var i = 0 </ i>

246
00:11:07,245 --> 00:11:11,850
<I> i & lt; nombre de générations </ i>,
juste là, qui est défini,

247
00:11:11,850 --> 00:11:15,701
<I> nombre de générations </ i>

248
00:11:15,701 --> 00:11:19,750
puis, comme toujours, <i> i = i + 1 </ i>.

249
00:11:20,600 --> 00:11:23,350
Ok, donc ce sont maintenant
nos générations,

250
00:11:23,350 --> 00:11:25,250
ok, donc ce que nous faisons,
ici dans cette boucle,

251
00:11:25,250 --> 00:11:28,895
c'est, fondamentalement,
chaque génération,

252
00:11:28,895 --> 00:11:32,100
chaque génération procédez comme suit.

253
00:11:32,100 --> 00:11:36,498
Ok, donc qu'aimerions-nous faire
dans chaque génération?

254
00:11:37,050 --> 00:11:41,150
Eh bien, nous aimerions passer
par toutes les séquences,

255
00:11:41,150 --> 00:11:44,600
puis, dans les séquences, nous aimerions
passer par toutes les bases,

256
00:11:44,600 --> 00:11:46,300
et là, nous aimerions changer,

257
00:11:46,300 --> 00:11:48,900
de temps en temps, une base aléatoire.

258
00:11:49,500 --> 00:11:51,400
Ok, donc ce que nous devons faire d'abord

259
00:11:51,400 --> 00:11:53,200
c'est que nous devons passer
par chaque séquence,

260
00:11:53,200 --> 00:11:55,900
donc, encore, nous avons besoin
de passer par chaque élément

261
00:11:55,900 --> 00:11:57,250
dans le tableau de séquences,

262
00:11:57,250 --> 00:11:59,150
donc je vais mis en place une boucle ici,

263
00:11:59,150 --> 00:12:00,950
et maintenant nous avons cette boucle,
à droite?

264
00:12:00,950 --> 00:12:02,400
Nous construisons cette boucle

265
00:12:02,400 --> 00:12:06,000
qui existe déjà dans une autre boucle,

266
00:12:06,500 --> 00:12:09,700
mais, vous savez,
il n'y a rien d'étrange à cela.

267
00:12:09,700 --> 00:12:11,450
C'est tout simplement une boucle

268
00:12:11,450 --> 00:12:14,145
qui est imbriqué dans une autre boucle.

269
00:12:14,750 --> 00:12:16,600
La seule chose que vous devez
faire attention ici

270
00:12:16,600 --> 00:12:19,401
c'est que vous ne pouvez pas
maintenant enregistrer <i> var i </ i>

271
00:12:19,401 --> 00:12:22,650
parce que nous avons déjà défini
cela dans cette boucle ici,

272
00:12:22,650 --> 00:12:25,450
et nous sommes toujours dans cette boucle,

273
00:12:25,450 --> 00:12:27,950
donc <i> i </ i> est déjà pris,

274
00:12:27,950 --> 00:12:30,048
donc vous pouvez prendre
une autre variable.

275
00:12:30,702 --> 00:12:33,450
Certaines personnes préfèrent prendre
quelque chose comme <i> j </ i>,

276
00:12:33,450 --> 00:12:37,300
mais je préfère <i> ii </ i>,
et pourquoi est-ce?

277
00:12:37,300 --> 00:12:40,454
Eh bien, c'est simple, vous le savez,

278
00:12:40,454 --> 00:12:44,154
une fois que vous commencez
à avoir plusieurs niveaux d'imbrication,

279
00:12:44,154 --> 00:12:48,500
je préfère vraiment utiliser quelque chose
comme <i> ii </ i>, plutôt que <i> j </ i> et <i> k </ i>,

280
00:12:48,500 --> 00:12:51,250
parce que vous pouvez alors voir
très rapidement

281
00:12:51,250 --> 00:12:54,700
à quel niveau vous êtes,
donc ceci <i> ii </ i>, avec deux <i> iis </ i>,

282
00:12:54,700 --> 00:12:57,750
me dira que je suis dans le deuxième niveau

283
00:12:57,750 --> 00:13:00,550
de la hiérarchie, et j'aime cela.

284
00:13:00,550 --> 00:13:04,497
D'accord, je vais définir <i> var ii = 0 </ i>,

285
00:13:04,497 --> 00:13:08,300
et puis je veux aller à travers toutes
les séquences, okay,

286
00:13:08,300 --> 00:13:10,998
donc je vais dire simplement <i> séquences </ i>,

287
00:13:10,998 --> 00:13:12,450
qui est le nom de notre tableau

288
00:13:12,450 --> 00:13:14,950
qui contient toutes les séquences,
la longueur,

289
00:13:14,950 --> 00:13:17,832
ok, donc <i> ii & lt; longeur de séquence</ i>,

290
00:13:17,832 --> 00:13:21,700
puis <i> ii = ii + 1 </ i>.

291
00:13:21,700 --> 00:13:24,550
Donc, assez simple, exactement
la même chose,

292
00:13:24,550 --> 00:13:28,249
sauf que nous utilisons maintenant une autre
variable, principalement <i> ii </ i> ici.

293
00:13:28,750 --> 00:13:30,600
Bon, alors dans cette itération,

294
00:13:30,600 --> 00:13:33,747
nous effectivement passer à travers
chaque séquence,

295
00:13:33,747 --> 00:13:35,750
donc chaque séquence.

296
00:13:37,603 --> 00:13:39,900
Bon, maintenant, ici,

297
00:13:39,900 --> 00:13:42,450
nous sommes maintenant
à une séquence particulière.

298
00:13:42,450 --> 00:13:44,300
Alors maintenant cette séquence,

299
00:13:44,300 --> 00:13:48,100
nous aimerions passer par chacune
des paires de bases.

300
00:13:48,100 --> 00:13:50,499
Donc, encore une fois, tout à fait
la même logique.

301
00:13:50,499 --> 00:13:51,650
On va mis en place une boucle

302
00:13:51,650 --> 00:13:55,749
qui passe par chacune des bases,

303
00:13:56,903 --> 00:14:01,750
pas de paires de base, dans chacune des bases
de cette séquence donc, encore, une boucle.

304
00:14:01,750 --> 00:14:04,750
Maintenant, cette boucle se trouve
dans une boucle,

305
00:14:04,750 --> 00:14:07,000
qui se trouve être dans une boucle,

306
00:14:07,000 --> 00:14:09,150
mais, si vous suivez la logique,

307
00:14:09,150 --> 00:14:11,450
il est en fait très, très simple.

308
00:14:11,450 --> 00:14:15,497
Donc, ici, je vais utiliser <i> var iii </ i>,

309
00:14:15,497 --> 00:14:17,497
et, encore une fois, j'utilise ceci

310
00:14:17,497 --> 00:14:20,297
parce que maintenant
je peux facilement suivre,

311
00:14:20,297 --> 00:14:22,147
vous le savez, cela est
le troisième niveau,

312
00:14:22,147 --> 00:14:25,254
deuxième niveau,
la variable de premièr niveau.

313
00:14:25,254 --> 00:14:28,296
D'accord, je vais initialiser ce <i> 0 </ i>,

314
00:14:28,296 --> 00:14:30,004
et, ici, je vais dire

315
00:14:30,004 --> 00:14:31,503
la condition doit être

316
00:14:31,503 --> 00:14:35,251
<I> iii & lt; </ i>

317
00:14:36,353 --> 00:14:38,500
bien, ce que je fais ici?

318
00:14:38,500 --> 00:14:41,345
Je vais à travers chaque base
dans la séquence,

319
00:14:41,345 --> 00:14:43,300
donc essentiellement, il doit être

320
00:14:43,300 --> 00:14:45,354
Je pourrais utiliser
la longueur de la séquence

321
00:14:45,354 --> 00:14:48,745
Parce que c'est la longueur de la séquence,

322
00:14:49,745 --> 00:14:51,500
mais je peux aussi, essentiellement,
dites simplement,

323
00:14:51,500 --> 00:14:54,500
bien, donnez-moi la séquence actuelle
dans laquelle je suis,

324
00:14:54,500 --> 00:14:57,004
et je vais prendre la longueur de cela,

325
00:14:57,004 --> 00:14:58,949
alors quelle est la séquence
actuelle que je suis?

326
00:14:58,949 --> 00:15:02,945
Eh bien, rappelons ceci est
notre réseau de séquences.

327
00:15:03,545 --> 00:15:07,650
Je suis actuellement dans
l'élément de tableau

328
00:15:07,650 --> 00:15:10,750
avec <i> index ii </ i>, d'accord,

329
00:15:10,750 --> 00:15:12,653
c'est donc le courant,

330
00:15:12,653 --> 00:15:15,651
la séquence<I>actuelle  </ i> d'ADN

331
00:15:16,101 --> 00:15:18,301
à l'intérieur de cette boucle ici,

332
00:15:18,301 --> 00:15:21,899
et de cela, je voudrais savoir
combien de temps il est,

333
00:15:21,899 --> 00:15:25,803
donc <i> séquences ii longueur </ i>,

334
00:15:25,803 --> 00:15:27,850
et, comme je l'ai dit, vous pourriez avoir,

335
00:15:27,850 --> 00:15:29,552
ici, dans ce code particulier,

336
00:15:29,552 --> 00:15:32,745
vous pourriez simplement avoir utilisé

337
00:15:32,745 --> 00:15:34,749
cette variable ici,

338
00:15:35,850 --> 00:15:38,250
<I> longeur_de séquence </ i>,

339
00:15:38,250 --> 00:15:41,250
parce que nous savons que ça va être
la longueur de chaque tableau,

340
00:15:41,250 --> 00:15:43,849
mais, vous savez, pour vous habituer
à cette notation,

341
00:15:43,849 --> 00:15:47,350
J'utilise <i> séquences ii </ i> ici,

342
00:15:47,350 --> 00:15:48,653
puis, ici, bien sûr,

343
00:15:48,653 --> 00:15:51,550
<I> iii = iii + 1 </ i>,

344
00:15:51,550 --> 00:15:53,250
exactement la même logique.

345
00:15:53,950 --> 00:15:56,700
Ok, maintenant je suis dans chaque base.

346
00:15:57,498 --> 00:15:59,750
J'itérer sur chaque base,

347
00:15:59,750 --> 00:16:01,750
donc je l'espère, vous pouvez voir comment
cela fonctionne, non?

348
00:16:01,750 --> 00:16:05,395
Tout d'abord, la boucle la plus externe

349
00:16:05,395 --> 00:16:08,602
est itérer sur chaque génération,

350
00:16:08,602 --> 00:16:10,549
puis, au sein de chaque génération,

351
00:16:10,549 --> 00:16:12,354
nous itérer sur toutes les séquences,

352
00:16:12,354 --> 00:16:13,902
et, dans chaque séquence,

353
00:16:13,902 --> 00:16:16,403
nous itérer ensemble les bases.

354
00:16:17,749 --> 00:16:21,249
Alors, quelle est la base actuelle?

355
00:16:21,249 --> 00:16:23,500
Comment pouvons-nous obtenir
l'accès à la base actuelle?

356
00:16:23,500 --> 00:16:26,895
Eh bien, nous savons que notre séquence
actuelle est celle-ci.

357
00:16:26,895 --> 00:16:29,898
D'accord, cela est <i> séquences ii </ i>.

358
00:16:29,898 --> 00:16:32,750
Est la séquence actuelle
de cette boucle ici

359
00:16:32,750 --> 00:16:34,995
celui qui passe par toutes les séquences?

360
00:16:37,150 --> 00:16:40,150
Maintenant, en conséquence,
sa paire de base,

361
00:16:40,150 --> 00:16:41,850
que nous itérons actuellement,

362
00:16:41,850 --> 00:16:44,400
est tout simplement maintenant
à cet indice,

363
00:16:48,000 --> 00:16:52,400
<I> iii </ i>, donc cela, comme vous vous souvenez
d'une leçon précédente,

364
00:16:52,400 --> 00:16:54,000
c'est comment vous accédez

365
00:16:54,000 --> 00:16:57,496
les éléments d'une matrice
bidimensionnelle.

366
00:16:58,550 --> 00:17:00,250
D'accord, vous devez d'abord dire,

367
00:17:00,250 --> 00:17:03,050
bien, ce qui est l'indice
dans la première dimension,

368
00:17:03,050 --> 00:17:05,553
puis l'index dans la deuxième dimension?

369
00:17:06,300 --> 00:17:10,500
Donc, cela est maintenant
notre base actuelle

370
00:17:10,500 --> 00:17:13,250
que nous sommes dans
cette itération particulière,

371
00:17:13,250 --> 00:17:17,500
une base en cours d'une séquence donnée.

372
00:17:18,200 --> 00:17:19,500
Donc, dans ce domaine,
nous pourrions dire maintenant,

373
00:17:19,500 --> 00:17:21,850
ok, je vais remplacer ca avec
une base aléatoire,

374
00:17:21,850 --> 00:17:24,153
et, heureusement, nous avons cette

375
00:17:25,303 --> 00:17:29,245
fonction pratique de base aléatoire ici
que nous avons écrit plus tôt.

376
00:17:29,745 --> 00:17:31,300
Maintenant, ceci n'est pas tout
à fait correct ici.

377
00:17:31,300 --> 00:17:32,850
Bien sûr, ce que je ferais maintenant,

378
00:17:32,850 --> 00:17:34,501
si je laisse ce code exécuter,

379
00:17:34,501 --> 00:17:36,400
est que je voudrais absolument changer

380
00:17:36,400 --> 00:17:40,200
chaque base unique dans chaque tableau,

381
00:17:40,200 --> 00:17:42,250
Ainsi, dans chaque séquence d'ADN.

382
00:17:42,250 --> 00:17:44,850
Ce n'est pas ce que je veux, bien sûr.

383
00:17:44,850 --> 00:17:48,350
Je veux seulement avoir cela
se produise avec un certain taux,

384
00:17:48,350 --> 00:17:51,700
avec une certaine probabilité,
et qui est le taux de mutation.

385
00:17:51,700 --> 00:17:53,250
Donc, je vais dire,

386
00:17:53,950 --> 00:17:56,400
Je vais, vous savez,
faire cette condition ici.

387
00:17:56,400 --> 00:18:00,500
Si quelque chose est vrai,
alors, vous savez,

388
00:18:00,500 --> 00:18:04,750
Je vais mettre cette séquence
comme <i> iiiii </ i>,

389
00:18:04,750 --> 00:18:07,846
donc c'est la paire de base courante,
<i> dans </ i> la séquence actuelle,

390
00:18:07,846 --> 00:18:09,396
à une base aléatoire.

391
00:18:09,396 --> 00:18:11,100
Donc, ce qui doit être vrai?

392
00:18:11,100 --> 00:18:13,450
Eh bien, tout simplement,
mathématiques aléatoires

393
00:18:13,450 --> 00:18:14,950
doit être inférieure

394
00:18:14,950 --> 00:18:17,700
que ce taux de mutation,

395
00:18:17,700 --> 00:18:20,404
donc c'est la même logique
ue nous avons appliqué avant.

396
00:18:21,800 --> 00:18:25,600
Dans le chapitre de la dérive, nous avons
tout simplement mathématique aléatoire.

397
00:18:25,600 --> 00:18:27,850
Si elle est inférieure
à une certaine valeur,

398
00:18:27,850 --> 00:18:29,200
entre zéro et un,

399
00:18:29,200 --> 00:18:31,690
alors il va arriver à ce taux.

400
00:18:31,700 --> 00:18:37,300
Donc, ici, il est plus petit que 0,0001,

401
00:18:37,300 --> 00:18:41,800
ainsi, avec cette très faible probabilité,
cela va se passer,

402
00:18:41,800 --> 00:18:44,500
et on va choisir une base aléatoire,

403
00:18:44,500 --> 00:18:46,800
et nous allons simplement écraser

404
00:18:46,800 --> 00:18:50,904
tout ce que nous avons actuellement
à cette position dans le tableau.

405
00:18:51,750 --> 00:18:54,800
Bon, alors cela fonctionne.

406
00:18:54,800 --> 00:18:57,200
Donc, tout ce que nous devons
faire maintenant, pour vérifier cela,

407
00:18:57,200 --> 00:18:58,900
est d'imprimer à nouveau les séquences

408
00:18:58,900 --> 00:19:00,900
après avvoir exécuter
toutes ces générations,

409
00:19:00,900 --> 00:19:03,950
nous allons donc copier ce ici,
<i> séquences d'impression </ i>,

410
00:19:03,950 --> 00:19:06,700
et le mettre ici.

411
00:19:06,700 --> 00:19:08,550
Alors maintenant, nous sommes
en cours d'exécution des générations

412
00:19:08,550 --> 00:19:09,950
avec les mutations

413
00:19:09,950 --> 00:19:12,200
puis on va imprimer les séquences
à nouveau,

414
00:19:12,200 --> 00:19:13,950
et nous allons voir à quoi cela ressemble,

415
00:19:13,950 --> 00:19:17,046
nous allons donc enregistrer cela,
et revenir au navigateur.

416
00:19:17,750 --> 00:19:19,550
Donc, ici dans le navigateur,

417
00:19:19,550 --> 00:19:21,500
nous allons simplement recharger,

418
00:19:22,350 --> 00:19:25,200
et voici le résultat, de sorte
que vous pouvez voir le début encore.

419
00:19:25,200 --> 00:19:31,000
Vous avez, bien sûr, une population
de 100 séquences d'ADN identiques,

420
00:19:31,000 --> 00:19:33,450
mais alors vous obtenez beaucoup
de variation,

421
00:19:33,450 --> 00:19:35,050
et vous pouvez voir ici

422
00:19:35,050 --> 00:19:38,952
de nombreuses séquences d'ADN différentes.

423
00:19:38,952 --> 00:19:41,301
Certains se produisent plusieurs fois,

424
00:19:41,301 --> 00:19:43,200
et vous pouvez le voir en ,vous le savez,

425
00:19:43,200 --> 00:19:46,650
en regardant le petit nombre ici
à côté de la séquence.

426
00:19:46,650 --> 00:19:51,400
Certains sont uniques qui ne se produisent
qu'une fois dans cette population,

427
00:19:51,400 --> 00:19:52,500
mais vous pouvez le voir ici,

428
00:19:52,500 --> 00:19:56,800
de nombreuses séquences d'ADN  différentes
maintenant, après 100 générations.

429
00:19:56,800 --> 00:19:59,900
Je vais recharger ceci nouveau ici,

430
00:19:59,900 --> 00:20:01,800
de nombreuses séquences différentes.

431
00:20:01,800 --> 00:20:05,748
Certains se produisent qu'une seule fois,
d'autres se produisent plusieurs fois,

432
00:20:06,248 --> 00:20:10,795
mais le message à retenir ici, je pense,
c'est tout à fait évident.

433
00:20:10,795 --> 00:20:13,903
Vous commencez avec une population
qui est complètement unique,

434
00:20:13,903 --> 00:20:16,752
et puis vous ajoutez des mutations
aléatoires,

435
00:20:16,752 --> 00:20:19,503
et vous faites cela à un taux
extrêmement faible.

436
00:20:20,500 --> 00:20:22,596
Je veux dire, si nous
revenons au navigateur ici,

437
00:20:22,596 --> 00:20:24,096
considérer que nous faisons

438
00:20:24,096 --> 00:20:28,000
seulement avec une probabilité de,
vous savez, un sur dix,

439
00:20:28,000 --> 00:20:31,053
cent, mille, dix mille,

440
00:20:31,053 --> 00:20:35,645
ainsi, avec une probabilité
de un sur dix mille,

441
00:20:35,645 --> 00:20:38,747
donc un événement plutôt rare ici.

442
00:20:38,747 --> 00:20:41,903
Nous allons changer cela,
vous le savez,

443
00:20:41,903 --> 00:20:45,398
toute paire de base donnée par génération,

444
00:20:45,398 --> 00:20:47,899
et cela est un événement très rare,

445
00:20:47,899 --> 00:20:51,896
mais vous faites cela, vous le savez,
sur assez des générations,

446
00:20:51,896 --> 00:20:55,502
puis vous, en fait, d'obtenir
une augmentation substantielle

447
00:20:55,502 --> 00:20:57,153
dans la diversité ici.

448
00:20:57,653 --> 00:20:59,900
Vous pouvez jouer avec ces chiffres.

449
00:20:59,900 --> 00:21:04,750
Si vous souhaitez augmenter ce nombre
à des valeurs plus élevées,

450
00:21:04,750 --> 00:21:06,600
alors vous obtiendrez encore
plus de variation.

451
00:21:06,600 --> 00:21:09,400
Si vous souhaitez le réduire
à des valeurs plus faibles,

452
00:21:09,400 --> 00:21:11,500
vous obtiendrez moins de variation,

453
00:21:12,250 --> 00:21:13,900
mais ce n'est pas vraiment le point.

454
00:21:13,900 --> 00:21:16,300
Le point c'est que nous avons
maintenant ceci mise en œuvre,

455
00:21:16,300 --> 00:21:19,250
et vous pouvez le voir, même avec
des taux de mutation très faibles,

456
00:21:19,250 --> 00:21:22,250
vous obtenez un peu de variation

457
00:21:22,250 --> 00:21:24,650
dans votre population génétique.

458
00:21:24,650 --> 00:21:29,195
Super, nous venons de terminer la mise
en œuvre des mutations dans JavaScript.

459
00:21:29,195 --> 00:21:30,195
Dans la prochaine session,

460
00:21:30,195 --> 00:21:32,300
on va nettoyer le code un peu,

461
00:21:32,300 --> 00:21:36,550
et nous avons également fait
une petite, petite erreur dans notre code.

462
00:21:36,550 --> 00:21:38,900
Vous pouvez ou peut
ne pas avoir remarqué,

463
00:21:38,900 --> 00:21:42,150
mais nous allons corriger cela,
aussi bien, dans la prochaine session,

464
00:21:42,150 --> 00:21:44,046
et, comme nous le faisons,

465
00:21:44,046 --> 00:21:47,247
nous allons présenter
une nouvelle idée en JavaScript,

466
00:21:47,247 --> 00:21:49,340
donc je vais vous voir dans la prochaine leçon.

