Welcome back. 
<i>Nature, In Code</i>.
We're in Chapter 4.
This is Lecture 1.
In this chapter, we'll learn all about mutation.
Recall what we learned in the previous chapters.
In Chapter 2, we introduced the <i>Hardy-Weinberg world</i>, a world where there's no force acting on the allele frequencies, and where there is no evolution.
Then, in Chapter 3, we relaxed one of the key assumptions of the Hardy-Weinberg world, and that is the assumption of infinite population sizes.
And we saw that when we start considering finite population sizes, then random sampling effects would start kicking in, leading to the phenomenon of <i>genetic drift</i>.
And we learned that one of the key consequences of genetic drift is the ultimate, complete loss of genetic variation.
Now, clearly, this is not what we observe in the real world.
There is a lot of genetic variation in the real world, so there must be some process countering this effect of genetic drift, and that process is mutation.
<i>Mutation</i> is the ultimate generator of genetic variation.
And in this video, and in the future lectures of Chapter 4, we'll learn all about mutation, its effect on evolution, and most importantly, of course, we'll implement this process in JavaScript, thereby, learning new JavaScript concepts.
So, let's get going.
So <i>mutation</i> is the random change in the genetic sequence.
This happens, typically, during <i>cell replication</i>.
So if you have a cell here-- and this is the genetic sequence of the cell-- and now this cell replicates so that you have two copies after the replication step, it's possible that during this step, a small change will occur, a small error.
So there might be some mistake that's being made here, and then you have a mutation in this new cell.
Now, this process is extremely rare
'cause the replication process is generally incredibly accurate, but occasionally, mistakes do happen, and these mistakes manifest themselves as random mutations.
Now, if this process happens in one of your body cells, this is typically an evolutionary dead end because you're not passing on your body cells, your so-called <i>somatic cells</i>, to your offspring.
If one of those mistakes happens in the <i>germ-line</i>, though-- so the line of cells that eventually produce the gametes, the sperm, or the eggs-- then these mistakes will be passed on to the next generation, and it's those that matter from an evolutionary perspective.
So how should we implement this idea in JavaScript?
Well, <i>DNA</i> has four bases: adenine, guanine, cytosine, and thymine, and these are typically abbreviated by their first letter, so A, G, C, and T.
So what I'm gonna do is, 
I'm gonna reuse this concept of an array, and I'm gonna store a set of these letters.
So you know, let's say, for example,
'A', 'T', 'C', another 'C', and a 'T', and maybe a 'G', and so on, okay, as an <i>array of strings</i>.
So these are strings with a single character.
Now, you can use single or double quotes, it doesn't matter
In reality, of course, your DNA sequences are much, much longer.
Your cells contain <i>DNA sequences</i> that are typically of the order of 3 billion of these bases, but we're not gonna store 
DNA sequences that long.
That's beyond the point.
But we're gonna store 
DNA sequences like that, and then we're simply gonna add multiple of these sequences, so multiple of these arrays and, through that, we get a two-dimensional array.
And now, this two-dimensional array is essentially our population.
So we have, you know, the arrays here.
Okay, these are DNA sequences.
And we have many, many DNA sequences that will eventually make up our population in this two-dimensional array.
Now, we do want to go in the third dimension.
Because this two-dimensional array captures our population, we want to see how this changes over time.
So what we're gonna do is, we're gonna add a third dimension, something like this, which is time, and we want to see how this population-- which at each time step is represented by a two-dimensional array-- is going to change as we start to introduce mutations.
So, in order to help you wrap around your head a little bit about this concept of multi-dimensional arrays, here's how I tend to think of it:
So, right, as we recall, an <i>array</i> is essentially just a way for us to store multiple values.
These can be numbers, these can be strings, can be whatever, in JavaScript.
So, each of these boxes here, contains an element in an array.
This is a <i>one-dimensional array</i>.
But sometimes, we want to have many of those arrays, and we want to store those, as well, so we simply store these arrays in another array, and we get a <i>two-dimensional array</i>.
And we've done this before.
So, before, we stored the allele frequencies over time, and then, each of these time series of allele frequencies would essentially be <i>A simulations</i>, and we had multiple simulations.
In our case, now, for example, we could have these DNA sequences-- each of these arrays is a DNA sequence-- and the set of DNA arrays is itself, an array, a two-dimensional array, and that would be the population.
So how do we bring this to the third dimension?
Well, it's quite simple.
I mean, just think of this now, as a three-dimensional structure, and this would still be your two-dimensional array here, in the first generation, for example.
And now, we're gonna replicate this entire structure, this entire two-dimensional array, and we're gonna create a second one.
And then, we'll be introducing mutations.
And so, we can now simply add this, here, in this dimension, so this would be <i>time</i>.
These will be our DNA sequences as we did it before.
And, you know, a set of these DNA sequences will be our <i>population</i>.
And now, it's simply gonna change, over time.
So we will now store these two-dimensional arrays in an array.
And so, this other array, this new array, which stores many, many of those two-dimensional arrays, is now, essentially, a <i>three-dimensional array</i>, and, thereby, we can represent these populations over time as we have many, many of those two-dimensional population arrays.
So we're gonna implement this in JavaScript.
I hope this visualization helps you a little bit to wrap your head around three-dimensional arrays.
So, let's go ahead and implement this in JavaScript.
