1
00:00:02,530 --> 00:00:05,850
Welcome back, <i>Nature, in Code</i>. 
we are Chapter 4, Lecture 2.

2
00:00:06,210 --> 00:00:10,600
In this lecture we are going to take 
our idea of having multiple DNA sequences

3
00:00:10,600 --> 00:00:15,550
in a population that changes over time 
through random mutation.

4
00:00:15,820 --> 00:00:19,360
And we are going to implement this 
using a 3D array.

5
00:00:19,360 --> 00:00:20,360
Let's do it.

6
00:00:20,360 --> 00:00:22,120
So here's my Text Editor.

7
00:00:22,120 --> 00:00:25,510
I have a new file here, it's empty,
and I am going to start from scratch

8
00:00:25,840 --> 00:00:28,680
using the normal scaffold 
that I usually use.

9
00:00:28,730 --> 00:00:31,450
So "&lt;!DOCTYPE html&gt;"

10
00:00:31,450 --> 00:00:33,960
and then I'm going to set up 
my <i>&lt;html&gt;</i> tag,

11
00:00:36,480 --> 00:00:40,340
and then of course my <i>&lt;head&gt;</i> and my <i>&lt;body&gt;</i>
as is normal,

12
00:00:40,340 --> 00:00:48,450
<i>&lt;/head&gt;</i> in an <i>html</i> scaffold
<i>&lt;body&gt;</i> <i>&lt;/body&gt;</i>

13
00:00:49,130 --> 00:00:53,270
and I'm going to indent those a little 
to make things look a little nicer,

14
00:00:54,030 --> 00:00:59,310
and here in my <i>&lt;head&gt;</i> 
I'm going to set up the <i>&lt;script&gt;</i> tag,

15
00:00:59,310 --> 00:01:03,000
which will contain our <i>JavaScript</i> code.

16
00:01:03,000 --> 00:01:05,930
And now I am going 
to save this right away.

17
00:01:06,510 --> 00:01:07,570
<i>Save as</i> &gt;

18
00:01:07,850 --> 00:01:14,400
we're here in the <i>code examples</i>.
I am going to call this <i>sequences.html</i>.

19
00:01:15,110 --> 00:01:16,390
Good.

20
00:01:18,150 --> 00:01:20,150
Now, how does one do this?

21
00:01:20,150 --> 00:01:24,560
How does one go from an idea 
that one has developed

22
00:01:24,560 --> 00:01:28,730
and really implement this now 
as <i>JavaScript</i> code.

23
00:01:28,730 --> 00:01:33,040
This is one of the problems 
that specifically beginners have,

24
00:01:33,120 --> 00:01:37,470
because they have this idea 
of a program that they'd like to develop,

25
00:01:37,470 --> 00:01:39,140
of an idea in their head.

26
00:01:39,140 --> 00:01:41,770
But now, how do they get started?

27
00:01:42,170 --> 00:01:46,260
How do they start implementing this 
in <i>JavaScript</i>

28
00:01:46,260 --> 00:01:50,370
on this blank canvas 
of a just a blinking cursor

29
00:01:50,370 --> 00:01:53,150
staring at us and waiting for input.

30
00:01:53,150 --> 00:01:55,300
So there's many ways to do this.

31
00:01:55,300 --> 00:01:58,750
What I usually do is,
I do it quite organically.

32
00:01:58,750 --> 00:02:02,280
I simply start by thinking 
what's the first function

33
00:02:02,280 --> 00:02:05,810
that I will eventually call,
and then I'm going to go from there.

34
00:02:05,810 --> 00:02:09,240
What should this function do,
what its function should do: A, B and C,

35
00:02:09,240 --> 00:02:14,410
so I'm going to define three functions 
that will take care of, A, B and C,

36
00:02:14,410 --> 00:02:16,600
and then, as I implement A, B and C,

37
00:02:16,600 --> 00:02:21,140
I'll get across new concepts
that I need to implement.

38
00:02:21,470 --> 00:02:23,360
So that's one way to do it.

39
00:02:23,360 --> 00:02:29,090
Other people like to design everything 
on a piece of paper first

40
00:02:29,090 --> 00:02:31,740
and then basically have a very clear idea

41
00:02:31,740 --> 00:02:34,550
of how this is going to be implemented 
before they start coding.

42
00:02:34,550 --> 00:02:36,640
So it's really sort of a personal taste.

43
00:02:36,640 --> 00:02:40,960
I prefer the organic approach, 
and I'm going to do this now here.

44
00:02:40,960 --> 00:02:44,270
So you can just follow me 
and see how one can do this.

45
00:02:44,270 --> 00:02:47,810
There's always multiple ways 
to achieve the same thing.

46
00:02:48,290 --> 00:02:52,280
So, in my mind, one of the first things 
I'd like to do is,

47
00:02:52,280 --> 00:02:53,880
I somehow want to begin

48
00:02:53,880 --> 00:02:56,690
with the first generation 
of this population.

49
00:02:56,690 --> 00:02:59,060
That's really the starting point.

50
00:02:59,060 --> 00:03:02,850
So I think I'm just going to start 
this whole program

51
00:03:02,850 --> 00:03:04,200
by calling a function

52
00:03:04,200 --> 00:03:09,930
called <i>generate_first_ generation</i>.

53
00:03:10,690 --> 00:03:12,490
That's really what I need to do.

54
00:03:12,490 --> 00:03:15,910
I need to generate multiple DNA sequences,

55
00:03:15,910 --> 00:03:18,100
and I think what I'm going to do 
at the beginning is

56
00:03:18,100 --> 00:03:20,690
that each of those DNA sequences 
is actually identical.

57
00:03:20,690 --> 00:03:24,280
So we start with zero genetic variation,

58
00:03:24,280 --> 00:03:27,250
and then we go from there
introducing mutation over time.

59
00:03:27,260 --> 00:03:30,030
But I need to generate 
this first generation first.

60
00:03:30,030 --> 00:03:34,150
So right now I'm calling this function.

61
00:03:34,150 --> 00:03:35,640
But there is no such function.

62
00:03:35,640 --> 00:03:39,870
So what of course need to do 
is I need to define this function.

63
00:03:39,870 --> 00:03:45,320
So here it is, with an empty body.
What should this function do?

64
00:03:46,610 --> 00:03:49,260
Well, this function should do two things.

65
00:03:49,260 --> 00:03:52,290
First, it should generate 
the first sequence.

66
00:03:52,600 --> 00:03:55,610
We need some kind 
of an original sequence,

67
00:03:55,610 --> 00:03:58,280
and then, once we have the sequence,

68
00:03:58,280 --> 00:04:03,020
we need many, many copies 
of this particular sequence

69
00:04:03,020 --> 00:04:08,020
to create our first population 
in the first generation.

70
00:04:08,340 --> 00:04:12,080
So I first need to generate 
an original sequence, a first sequence.

71
00:04:12,260 --> 00:04:16,460
So again, I think I am just probably going 
to call a function

72
00:04:16,460 --> 00:04:19,710
called <i>generate_first_sequence</i>.

73
00:04:21,740 --> 00:04:25,200
And this function should of course,
as it says in the name,

74
00:04:25,200 --> 00:04:26,800
generate the first sequence,

75
00:04:26,800 --> 00:04:29,950
so I'm going to define 
this function now here:

76
00:04:29,950 --> 00:04:32,110
<i>generate_first_sequence</i>.

77
00:04:33,140 --> 00:04:34,850
And now I need to think about,

78
00:04:34,850 --> 00:04:38,980
how do I generate the first sequence 
of this population.

79
00:04:38,980 --> 00:04:42,290
So, again, 
there's multiple ways to do this,

80
00:04:42,290 --> 00:04:44,380
but what I'd like to do is...

81
00:04:44,380 --> 00:04:47,580
Well, first thing to think about 
how long the sequence should be

82
00:04:47,580 --> 00:04:50,440
and then for however long 
the sequence should be

83
00:04:50,440 --> 00:04:53,590
I need to grab random basis

84
00:04:53,590 --> 00:04:57,330
from a set of four possible: 
basis <i>H</i>, <i>G</i>, <i>C</i> and <i>T</i>.

85
00:04:57,730 --> 00:05:02,340
So, again, I now need 
to define the first sequence,

86
00:05:02,340 --> 00:05:04,120
but how long is it going to be?

87
00:05:04,120 --> 00:05:07,740
Well, that information I should probably 
store in a variable .

88
00:05:07,740 --> 00:05:10,430
So I'm going to set up this variable,

89
00:05:10,440 --> 00:05:13,980
then I'm going to call <i>sequence_length</i>.

90
00:05:14,470 --> 00:05:17,630
And then I am going to set this to <i>20</i>,
that's a short sequence,

91
00:05:17,630 --> 00:05:21,960
but for the purpose of this example here 
that should work fine.

92
00:05:21,960 --> 00:05:24,330
So now I can set up a loop here.

93
00:05:25,660 --> 00:05:29,660
for <i>(var i = 0; </i>

94
00:05:29,660 --> 00:05:33,320
and now <i>i</i> is going to be smaller 
than <i>sequence_length</i>,

95
00:05:33,320 --> 00:05:36,530
so this loop is going to iterate 20 times,

96
00:05:37,610 --> 00:05:40,550
and of course I have to make sure 
I increment the <i>i</i> by <i>1</i>,

97
00:05:40,550 --> 00:05:42,530
otherwise get an infinite loop.

98
00:05:43,950 --> 00:05:45,350
So 20 times.

99
00:05:45,350 --> 00:05:48,460
I would now like to grab a random base

100
00:05:48,460 --> 00:05:55,690
and push this into an array of basis, 
which will be my original sequence.

101
00:05:56,200 --> 00:05:58,300
So there's two things right here 
that are missing.

102
00:05:58,300 --> 00:06:00,420
First of all, where's this array?

103
00:06:00,420 --> 00:06:04,060
I haven't defined it yet. 
I want an <i>original_sequence</i> array.

104
00:06:04,060 --> 00:06:08,170
So I am going to set up 
an <i>original_sequence</i> array here

105
00:06:08,170 --> 00:06:15,670
by simply saying <i>original_sequence</i>
is an empty array.

106
00:06:15,890 --> 00:06:17,680
So now I have this array,

107
00:06:17,680 --> 00:06:20,110
where I'm going to store 
my original sequence,

108
00:06:20,110 --> 00:06:22,720
and what I need to do...

109
00:06:22,720 --> 00:06:27,240
Sorry, <i>original_sequence</i> rather 
<i>original_sequence</i> is,

110
00:06:27,240 --> 00:06:32,140
I need to push random basis 
into this array.

111
00:06:32,910 --> 00:06:39,400
So any base <i>A</i> <i>G</i> <i>C</i> or <i>T</i> as a string.
Now, how I'm going to do this?

112
00:06:40,680 --> 00:06:44,570
Again, this feels like a functionality 
that can be easily outsourced,

113
00:06:44,570 --> 00:06:46,730
because not something that generates first 
sequence

114
00:06:46,730 --> 00:06:49,500
should be really worried about,
then it's indeed also functionality

115
00:06:49,500 --> 00:06:51,350
that may be useful,

116
00:06:51,350 --> 00:06:52,710
down the road.

117
00:06:52,710 --> 00:06:57,700
So, yeah, I think I'm going to just 
call the function here <i>random_base</i>,

118
00:06:58,320 --> 00:07:00,100
and this function...

119
00:07:01,090 --> 00:07:04,580
Someone, and it's going to be me, 
should eventually create this function,

120
00:07:04,580 --> 00:07:09,390
and it should return 
a random base <i>A</i> <i>G</i> <i>C</i> or <i>T</i>,

121
00:07:09,390 --> 00:07:13,430
and then, if it returns that, 
I can push it in the original sequence

122
00:07:13,430 --> 00:07:17,160
and I do this <i>sequence_length</i> time, 
so 20 times

123
00:07:17,160 --> 00:07:20,550
and so at the end, when this function 
has finished executing,

124
00:07:20,550 --> 00:07:22,370
I have my <i>original_sequence</i>,

125
00:07:22,370 --> 00:07:25,600
an array of 20 randomly selected 
base pairs.

126
00:07:26,210 --> 00:07:28,890
So, let's go ahead and implement 
this random base function.

127
00:07:30,670 --> 00:07:36,160
<i>function random_ base() {}</i>.

128
00:07:37,650 --> 00:07:39,640
So, what should this function do?

129
00:07:39,640 --> 00:07:45,310
This function should return a random base,
one of <i>A</i> <i>G</i> <i>C</i> or <i>T</i>.

130
00:07:45,310 --> 00:07:46,620
How do I do this?

131
00:07:46,620 --> 00:07:48,830
In <i>JavaScript</i> any random selection

132
00:07:48,830 --> 00:07:51,420
somehow has to start with <i>Math.random</i>,

133
00:07:51,420 --> 00:07:55,080
because that's really 
the only random generation we can do,

134
00:07:55,510 --> 00:07:57,760
and <i>Math.random</i>, as we know,

135
00:07:57,760 --> 00:08:01,040
returns a floating point number 
between 0 and 1.

136
00:08:01,040 --> 00:08:07,470
So how do we go from this 
to a random choice of four characters?

137
00:08:08,280 --> 00:08:10,630
One thing we can do is,
we can, first of all,

138
00:08:10,630 --> 00:08:16,090
store temporarily this basis 
into an array here.

139
00:08:17,120 --> 00:08:20,890
So this will be 'A', then 'G',

140
00:08:22,890 --> 00:08:27,700
then 'C' and finally 'T',

141
00:08:27,700 --> 00:08:29,940
although the order doesn't really matter.

142
00:08:32,050 --> 00:08:36,840
Now I have this array and so, as you know, 
accessing elements in the array

143
00:08:36,840 --> 00:08:42,790
is done using the index, so 0, 1, 2 or 3.

144
00:08:43,310 --> 00:08:48,200
So, now what actually really want
is a random integer number

145
00:08:48,200 --> 00:08:53,860
between 0 and 3, including both 0 and 3.

146
00:08:54,160 --> 00:08:58,870
If I had such a random number generator,
then I could just use the result

147
00:08:58,920 --> 00:09:00,780
to pick the corresponding base,

148
00:09:00,780 --> 00:09:04,040
and there would going really be 
a <i>random_base</i> function.

149
00:09:04,390 --> 00:09:07,510
So now we've at least 
transformed this problem

150
00:09:07,510 --> 00:09:09,750
into a purely numerical problem.

151
00:09:09,750 --> 00:09:11,790
So how are we going to do this?

152
00:09:12,080 --> 00:09:15,560
How are we going to select 
a random index here?

153
00:09:16,450 --> 00:09:19,890
So, as I said, everything has to start 
with <i>Math.random()</i>.

154
00:09:21,380 --> 00:09:23,910
Now, again, this would be 
the wrong way to do this,

155
00:09:23,910 --> 00:09:25,260
because <i>Math.random()</i>

156
00:09:25,260 --> 00:09:29,630
simply returns a floating point number 
between 0 and 1.

157
00:09:29,630 --> 00:09:32,740
So, first of all, 
I need to expand this range,

158
00:09:32,740 --> 00:09:36,210
and I'm simply going to do this 
by multiplying this with 4.

159
00:09:36,210 --> 00:09:41,170
So now this expression here actually 
gives us a random floating point number

160
00:09:41,170 --> 00:09:43,680
between 0 and 4.

161
00:09:44,410 --> 00:09:48,730
So I also need to mention an important detail,

162
00:09:48,730 --> 00:09:52,430
which we've not talked about so far, 
because it wasn't really relevant,

163
00:09:52,430 --> 00:09:55,740
which was that <i>Math.random()</i>
does indeed return a number

164
00:09:55,740 --> 00:10:01,190
between 0 and 1, 
but 1 is in fact not included.

165
00:10:02,020 --> 00:10:06,380
And so this range now here 
will go from 0 to 4,

166
00:10:06,380 --> 00:10:08,040
but 4 will not be included.

167
00:10:08,040 --> 00:10:11,880
The maximum number 
will be 3.9999999 and so on,

168
00:10:13,080 --> 00:10:16,090
So I can use this now to basically 
just say, "You know what?"

169
00:10:16,290 --> 00:10:18,260
Give me this floating point number

170
00:10:18,260 --> 00:10:23,810
and round it down to the integer,
and the way to do it is,

171
00:10:23,810 --> 00:10:26,440
is this handy method 
that <i>JavaScript</i> provides,

172
00:10:26,440 --> 00:10:28,990
which is called <i>Math.floor</i>.

173
00:10:28,990 --> 00:10:33,080
So it rounds down a floating point number
to an integer,

174
00:10:33,080 --> 00:10:34,700
and it runs it down,

175
00:10:34,700 --> 00:10:37,920
and I think this should be obvious 
from the name <i>floor</i>.

176
00:10:38,410 --> 00:10:44,840
So now each of these numbers 
from between 0 and 3.99999 and so on

177
00:10:44,850 --> 00:10:50,860
will be rounded down to one of the four 
possible numbers: 0, 1, 2 or 3,

178
00:10:51,430 --> 00:10:53,700
and this is exactly what we want.

179
00:10:54,260 --> 00:11:00,970
So now I can simply say, 
"Okay, return this element

180
00:11:00,970 --> 00:11:03,310
in the bases array, so <i>bases[index]</i>,"

181
00:11:04,140 --> 00:11:08,930
<i>index</i> being this randomly 
generated number: 0, 1, 2 or 3,

182
00:11:08,930 --> 00:11:10,430
that we just did here.

183
00:11:11,310 --> 00:11:12,740
So this should work fine,

184
00:11:12,740 --> 00:11:15,940
and now we have 
a generic random base generator,

185
00:11:15,940 --> 00:11:18,970
which will come in handy multiple times.

186
00:11:18,970 --> 00:11:21,920
So we're pushing this <i>random_base</i>
here that we're getting,

187
00:11:21,920 --> 00:11:25,010
and we call this function 
into the <i>original_sequence</i>,

188
00:11:25,010 --> 00:11:27,830
and then, when this 
<i>generate_first_sequence</i>

189
00:11:27,830 --> 00:11:31,610
a function has finished executing,
we have our first sequence.

190
00:11:31,610 --> 00:11:33,540
So that was now the first step

191
00:11:33,540 --> 00:11:36,480
of this <i>generate_first_generation</i> 
function.

192
00:11:36,480 --> 00:11:38,040
We have the first sequence.

193
00:11:38,040 --> 00:11:40,420
So now what I'd like to do is basically

194
00:11:40,420 --> 00:11:43,490
make many, many copies 
of this original sequence

195
00:11:43,490 --> 00:11:47,090
and push those copies into an array

196
00:11:47,090 --> 00:11:49,990
that stores all these sequences 
of our population.

197
00:11:49,990 --> 00:11:52,400
So I need to define two things now.

198
00:11:52,400 --> 00:11:57,020
The first is, I need to define 
how many of those sequences

199
00:11:57,020 --> 00:12:01,070
I want in the first place,
in some sense, our population size.

200
00:12:01,070 --> 00:12:05,620
So I am going to define a variable here
called <i>number_of_sequences</i>.

201
00:12:10,020 --> 00:12:12,470
I am going to set this to 100.

202
00:12:13,080 --> 00:12:17,210
So I'd like to make 100 copies now 
of this <i>original_sequence</i>

203
00:12:17,210 --> 00:12:20,340
and then push it into 
our population array.

204
00:12:20,340 --> 00:12:23,780
So I have to define this as well, 
and I am going to do this here,

205
00:12:23,780 --> 00:12:26,430
I'm going to call it <i>sequences</i>.

206
00:12:27,770 --> 00:12:32,230
So this is an array, an empty array,
that will essentially be our population.

207
00:12:32,230 --> 00:12:33,940
I am just going to add a comment here.

208
00:12:33,940 --> 00:12:38,950
This is our population, the array 
that will store all these other sequences

209
00:12:39,350 --> 00:12:41,610
which are themselves arrays.

210
00:12:41,900 --> 00:12:45,570
So now I think I have everything 
set up to finish this.

211
00:12:45,570 --> 00:12:48,120
So here I'm going to now 
create another loop:

212
00:12:48,280 --> 00:12:53,750
<i>for (var i = 0;</i> and then I'm going 
to iterate

213
00:12:53,750 --> 00:12:55,760
for as many times as I need to,

214
00:12:55,760 --> 00:13:00,140
which is defined here now 
in the <i>number_of_sequences</i> variable

215
00:13:00,140 --> 00:13:05,600
and then of course, as always,
will increment the counter here by 1.

216
00:13:08,570 --> 00:13:13,460
So 100 times I would like to get a copy 
of this <i>original_sequence</i>,

217
00:13:13,460 --> 00:13:16,300
and I'd like to push it 
into our <i>sequences</i> array.

218
00:13:16,840 --> 00:13:18,730
So how do I get a copy?

219
00:13:19,660 --> 00:13:23,700
It turns out, there's 
a really handy method in the array,

220
00:13:23,700 --> 00:13:25,740
which is called <i>slice</i>:

221
00:13:25,740 --> 00:13:28,790
<i>slice</i> simply returns a copy of the array

222
00:13:29,490 --> 00:13:33,870
that you let the <i>slice</i> method act on.

223
00:13:33,870 --> 00:13:38,270
So if you want a copy 
from the <i>original_sequence</i>,

224
00:13:38,270 --> 00:13:43,140
you simply say <i>original_sequence.sclice()</i>.

225
00:13:43,140 --> 00:13:46,730
This will return a copy 
of the <i>original_sequence</i>,

226
00:13:46,730 --> 00:13:48,710
and that's exactly what we want.

227
00:13:48,710 --> 00:13:53,750
So we're going to push this 
into our <i>sequences</i> array,

228
00:13:53,750 --> 00:13:58,390
so <i>sequences.
push(original_sequence.sclice())</i>

229
00:13:59,590 --> 00:14:00,810
And now we're done.

230
00:14:01,190 --> 00:14:03,530
So this is really all we need.

231
00:14:03,530 --> 00:14:07,660
This now will be that function
that will be called first,

232
00:14:08,410 --> 00:14:11,110
and from there 
we generate the first sequence.

233
00:14:11,660 --> 00:14:16,750
We do this here by pushing a random base
into this <i>original_sequence</i> array.

234
00:14:16,750 --> 00:14:19,670
We have developed this function 
around the base down here.

235
00:14:19,670 --> 00:14:22,200
And then, once we have 
this original sequence,

236
00:14:22,200 --> 00:14:24,150
we're going to copy it many, many times

237
00:14:24,150 --> 00:14:26,560
and we're going to push it 
into our <i>sequences</i> array.

238
00:14:26,560 --> 00:14:30,850
So now we really created 
the first generation,

239
00:14:30,850 --> 00:14:32,940
and we're noq going to save this

240
00:14:32,940 --> 00:14:37,040
and go over to the browser 
and open this file.

241
00:14:37,040 --> 00:14:40,260
So here I am in the browser 
and I am going to open the file.

242
00:14:40,260 --> 00:14:44,140
<i>Open file</i> &gt; <i>sequences.html</i>.
Here it is.

243
00:14:44,140 --> 00:14:47,600
I open it, I see nothing here--
that's to be expected.

244
00:14:47,600 --> 00:14:49,750
I want to see the <i>JavaScript Console</i>,

245
00:14:49,750 --> 00:14:52,450
see if I did some mistake, some typo.

246
00:14:52,450 --> 00:14:53,940
No, it does not seem to be the case.

247
00:14:53,940 --> 00:14:56,250
So if you've made a typo 
or something like that,

248
00:14:56,250 --> 00:14:58,620
you would see it in here, probably in red.

249
00:14:58,620 --> 00:15:01,370
I just see this cursor 
blinking here happily.

250
00:15:01,370 --> 00:15:06,470
That means I didn't make any obvious typo 
or any kind of mistake like that.

251
00:15:06,470 --> 00:15:09,910
So, that's good, things are working fine.

252
00:15:09,910 --> 00:15:11,400
Now, the next step.

253
00:15:11,400 --> 00:15:15,490
We need to add the 3rd dimension,
namely the dimension of time,

254
00:15:15,500 --> 00:15:18,760
and then we can start adding mutations 
along the way.

255
00:15:18,760 --> 00:15:20,720
So this concludes Lecture 2.

256
00:15:20,720 --> 00:15:25,890
We now have now our 2D array, 
a set of DNA sequences

257
00:15:25,890 --> 00:15:27,630
that are all identical,

258
00:15:27,630 --> 00:15:29,890
which means 
we have no genetic variation.

259
00:15:30,830 --> 00:15:32,580
In the next lecture

260
00:15:32,580 --> 00:15:36,800
we are going to add this 3rd dimension, 
the dimension of time,

261
00:15:36,800 --> 00:15:40,570
and as this population 
goes on through time,

262
00:15:40,570 --> 00:15:42,920
we start adding random mutations,

263
00:15:42,920 --> 00:15:45,860
and then we can see 
what this does to genetic variation.

264
00:15:45,860 --> 00:15:47,210
So see you in the next lecture.
