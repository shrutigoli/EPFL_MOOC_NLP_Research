Welcome back, Nature, In Code.
We're in Chapter 4, Lecture 3.
In the previous video, we implemented DNA sequences as arrays of bases, and we stored those arrays as a population in another array, so we had a two-dimensional array, and so now, what we're gonna do, in this lecture, is two things.
First, we're gonna print those DNA sequences into the console so that we can see what's happening, and, secondly, we're gonna introduce mutation, so let's get going.
So, this is our code.
We think it works great.
It doesn't give us any errors, but we can't see any output either, so why don't we fix that first?
So, here at the end, when we call this function,
<i>first generation</i>, once that's done, we'd like to print the sequences, so I'm gonna call our function here,
<i>print sequences</i>, and this function is not defined yet, so I'll have to do this.
So, print sequences, what should it do?
Well, let's define it first.
Function <i>print sequences</i>.
Okay.
Well, it should, essentially, go through all the DNA sequences that we have, and then it should print them, so going through all the sequences, in other words, we will use a loop.
So, we'll use our girlfriend, the <i>for</i> loop, so for <i>var i = 0</i> and then <i>i &lt; number of sequences</i>, okay, <i>number of sequences</i>.
Recall that this is the variable that we set up here, which currently source the value 100, that's, essentially, our population size, or, you know, the numbers of DNA sequences, and then, at the end, of course, we have to increment <i>i + 1</i> in order to avoid infinite loops.
Okay.
So, what should we do here at each iteration?
Well, we'd like to print the sequence.
Now, in order to print the sequence, we have to implement some code, but I feel like we shouldn't do this in here.
I'm simply gonna, basically, call a function that is called <i>print sequence</i>, and notice the singular, so here we have <i>print sequences</i>, and here we simply have <i>print sequence</i>, and now I feel it's <i>print sequence</i>.
It's the job of that function to, essentially, print the sequence, so function <i>print sequence</i>.
We're outsourcing the functionality here.
So, what should it do?
Well, first of all, we have to pass it a value.
Which value?
Well, the current sequence so, in here, <i>print sequence</i>.
We wanna pass the value of the population array.
Now, remember, the population array is called <i>sequences</i>,
<i>sequences</i>, and the element here is that of <i>index i</i>, which, you know, is nothing new.
This is how we iterate over an array, essentially.
So, this is the <i>index i</i> sequences.
This is the array.
This is what we're passing in here, so we need to define the parameter here.
I think I'm gonna call it, you know, simply I guess, <i>sequence</i>, right?
We're getting a sequence here.
How about that?
Sequence.
Okay.
So, now, this function here needs to print that sequence.
So, again, remember the sequence is simply an array of base pairs, so I could go just through this array.
So, here, I would simply say
<i>for var i = 0</i>,
<i>i &lt; sequence length</i>.
We could also use, by the way, so here this is the length of a DNA sequence.
I'm simply using here the length property of the array, but I could, in principle, also use this variable here.
It would have the same value, but I'm gonna use here this <i>sequence.length</i> property, and then I'm going to say
<i>i = i + 1</i>, as always, so now I have each base pair here in <i>sequence index i</i>, so I could, in principle, simply say, no, I'm gonna output this base pair into the console directly, so <i>console log sequence i</i>, but, if I would do this, then all sequences will be stacked vertically in the console, and that would be very hard to read.
So, what I'd rather like to do is I'd rather like to do some string concatenation where I'm gonna add up all the, you know, bases horizontally as a string, and then I'm gonna output that string.
So, basically, what I'm gonna do is, up here,
I'm gonna set up an empty string, and I'm gonna call this <i>sequence string</i>, for example, <i>sequence_string</i>, and I'm gonna initialize this as the empty string, and then, here, rather than logging the base into the console,
I'm simply gonna say,
<i>sequence string =</i> well, we already have <i>= string</i>, plus the <i>sequence i</i>, so this base.
So, here, I'm just, you know, iteratively building this sequence string, and I'm gonna end this line, of course, with a semicolon here, and then, at the end, once I'm done doing this,
I can now say,
<i>console log sequence string</i>, okay, so I'm basically logging this sequence string that I just built.
Okay.
Now, let's see whether all of this worked.
We're gonna save this, and we're going to the browser.
We should still have our file open.
Here's the console.
It's empty, as it was meant to be from the previous code, but now we changed the code, so let's reload this, and here we get our result.
So, here is a DNA sequence, with 20 base pairs, and it is, indeed, printing 100 strings, but Chrome is nice here.
Rather than printing the exact same string a hundred times, it's simply telling us,
"Look, I have this string, and I'm supposed to print it a hundred times.
I'm not gonna do that.
I'm just gonna print it once, and then tell you, you know, you should expect this a hundred times here," so this is just to keep the console clean and tidy, but it does work, so our printing here works just as expected.
That's great, so now we can move on to implementing mutation.
So, we're back in our code here.
Now we'd like to implement mutation.
Okay, how can we do this?
Well, let's see!
We generate the first generation.
This is a hundred DNA sequences, they're totally identical, then we print them.
Okay, fine, but now what I would like to do is now I would like to actually introduce, you know, a temporal dimension where we have many, many generations, and, at each generation,
I'd like to introduce some mutation, so I'm gonna call a function here
<i>run generations</i>, and what does this <i>run generations</i> do?
Well, let's go ahead and implement it.
Okay, so always the same kind of principle.
Function <i>run generations</i>.
Now, what we'd like to do here is we would like to, essentially, change the bases in those DNA strings with a certain rate, and that's called the mutation rate, so we, essentially, like to introduce some errors, or some changes, some random modifications in those DNA sequences, so it seems like I need to define two variables first.
First of all, I need to know how many generations
I'm actually gonna run, and then what is this rate at which we're gonna introduce these changes.
So, let's go back up here to where we defined the global variables, and what I'm gonna do is I'm gonna introduce two variables here.
First, I'm gonna introduce this.
I'm gonna call <i>number of generations</i>, okay, <i>number of generations</i>, and let's set this, perhaps, to 100 generations, and then I'd like to introduce this mutation rate, okay, so I'm gonna call this mutation rate, and I'm gonna just set this to 0.0001, so something, you know, rather small, and this is now the mutation rate.
Now, whenever you have a mutation rate, you need to ask yourself per what, per what unit, and per what time?
Mutation rates come in all different shapes and forms.
Is it per base, is it per entire genome, is it per generation, or is it per year, or millions of years?
So, you know, you have to, when you read the literature and you see the term, mutation rate, you always have to ask yourself,
"Okay what's a unit here?"
So, we're simply going to define this as
<i>per base and generation</i>, so this is the mutation rate per base and generation.
Good, so now that we have these two things implemented, let's implement the function here.
<i>run generations</i>.
So, what we need to do is we need to iterate over each base, in each sequence, and we need to do this, you know, many, many times, however many generations we would like to run.
So, essentially, what this function is now going to be is it's gonna be a loop, and it's not just gonna be one loop, it's actually going to be a nested loop, and it's gonna be a threefold nested loop.
So, we have a loop, within a loop, within a loop, and this may, you know, look a little intimidating, but it's really extremely straightforward, if you think about it, so follow me doing this, and I think you'll look get the logic here quite easily.
So, first of all, we wanna say, okay, we're gonna do something now for a couple of generations, so, for that, we're gonna build a loop.
Okay, so <i>var i = 0</i>
<i>i &lt; number of generations</i>, right there, which is defined,
<i>number of generations</i> and then, as always, <i>i = i + 1</i>.
Okay, so these are now our generations, okay, so what we're doing, here in this loop, is, basically, each generation, right, each generation do the following.
Okay, so what would we like to do in each generation?
Well, we would like to go through all the sequences, and then, within the sequences, we would like to go through all the bases, and there we would like to change, occasionally, a random base.
Okay, so what we need to do first is we need to go through each sequence, so, again, we need to go through each element in the sequences array, so I'm gonna set up a loop here, and so now we have this loop, right?
We're building this loop that already exists within another loop, but, you know, there's nothing strange about that.
It's simply a loop that's nested within another loop.
The only thing you have to be careful here is that you can't now save <i>var i</i> because we've already defined this in this loop here, and we're still within this loop, so <i>i</i> is already taken, so you can take another variable.
Some people prefer to take something like <i>j</i>, but I prefer <i>ii</i>, and why is that?
Well, it's simply, you know, once you start having multiple levels of nesting,
I really prefer using something like <i>ii</i>, rather than <i>j</i> and <i>k</i>, because you can then very quickly see at which level you are, so this <i>ii</i>, with two <i>iis</i>, will tell me I'm in the second level of hierarchy, and I quite like that.
Okay, so I'm gonna set <i>var ii = 0</i>, and then I want to go through all the sequences, right, so I'm simply gonna say <i>sequences</i>, that's the name of our array that contains all the sequences, length, okay, so <i>ii &lt; sequences.length</i>, and then <i>ii = ii + 1</i>.
So, pretty straightforward, the exact same thing, except we now use another variable, mainly <i>ii</i> here.
Okay, so in this iteration, we're effectively going through each sequence, right, so each sequence.
All right, so now, in here, we're now at a particular sequence.
So now this sequence, we would like to go through each of the base pairs.
So, again, absolutely same logic.
We're gonna set up a loop that goes through each of the bases, not base pairs, in each of the bases in this sequence so, again, a loop.
Now this loop happens to be within a loop, which happens to be within a loop, but, if you follow the logic, it's actually very, very straightforward.
So, here I'm gonna use <i>var iii</i>, and, again, I'm using this because now I can just easily follow, you know, this is the third level, second level, first level variable.
Okay, I'm gonna initialize this <i>0</i>, and, here, I'm gonna say the condition has to be
<i>iii &lt;</i> well, what am I doing here?
I'm going through each base in the sequence, so it, essentially, has to be
I could use the sequence length
'cause that's the length of the sequence, but I can also, basically, just say, well, give me the current sequence that I'm in, and I'm gonna take the length of that, so what is the current sequence that I'm in?
Well, recall this is our array of sequences.
I am currently in the array element with <i>index ii</i>, okay, so this is the current,
<i>the current</i> DNA sequence from within this loop here, and of that, I would like to know how long it is, so <i>sequences ii length</i>, and, as I said, you could have, here in this particular code, you could simply have used this variable here,
<i>sequence_length</i>, because we know that's gonna be the length of each array, but, you know, to get used to this notation,
I'm using <i>sequences ii</i> here, and then, here of course,
<i>iii = iii + 1</i>, exact same logic.
Okay, now I'm in each base.
I'm iterating over each base, so I hope you can see how this works, right?
First, the outermost loop is iterating over each generation, and then, within each generation, we're iterating over all the sequences, and, within each sequence, we're iterating overall the bases.
So, what is the current base?
How do we get access to the current base?
Well, we know our current sequence is this one.
Okay, this is <i>sequences ii</i>.
Is the current sequence of this loop here the one that goes through all the sequences?
Now, correspondingly, its base pair, that we're currently iterating, is simply now at this index,
<i>iii</i>, so this, as you recall from an earlier lecture, is how you access the elements of a two-dimensional array.
Okay, first you need to say, well, what is the index in the first dimension, and then the index in the second dimension?
So, this is now our current base that we're at in this particular iteration, a current base of a given sequence.
So, in this, we could now say, okay, I'm gonna override this with a random base, and, thankfully, we have this handy random base function here that we wrote earlier.
Now, this is not quite correct here.
Of course, what I would do now, if I just let this code run, is I would absolutely change each and every single base in each array, so in each DNA sequence.
That's not what I want, of course.
I only want to have this happen with a certain rate, with a certain probability, and that is the mutation rate.
So, I'm gonna say,
I'm gonna, you know, make this a condition here.
If something is true, then, you know,
I'm gonna set this sequence as <i>iiiii</i>, so that's the current base pair,
<i>in</i> the current sequence, to a random base.
So, what needs to be true?
Well, simply, math random needs to be smaller than this mutation rate, so that's the same logic that we applied before.
In the drift chapter, we simply have math random.
If it's smaller than a certain value, between zero and one, then it's gonna happen at that rate.
So, in here, it's smaller than .0001, so, with that very low probability, this is gonna happen, and we're gonna pick a random base, and we're gonna just overwrite whatever we currently have at this position in the array.
Good, so this works.
So, all we need to do now, to verify this, is to print the sequences again after we ran all these generations, so let's copy this here, <i>print sequences</i>, and put it here again.
So now, we're running the generations with the mutations, and then we're gonna print the sequences again, and let's see what this looks like, so let's save this, and go back to the browser.
So, here in the browser, we're simply going to reload, and here's the result, so you can see the beginning still.
You have, of course, a population of 100 identical DNA sequences, but then you get a lot of variation, and you can see here many, many different DNA sequences.
Some occur multiple times, and you can see this by just, you know, looking at the little number here next to the sequence.
Some are unique that only occur one time in this population, but you can see here, many, many different DNA sequences now, after 100 generations.
I'm gonna reload this again here, many, many different sequences.
Some occur only once, others occur many times, but the key take home message here,
I think, is quite obvious.
You start with a population that is completely unique, and then you add random mutations, and you do this at an extremely low rate.
I mean, if we go back to the browser here, consider that we do this only with a probability of, you know, one in ten, a hundred, a thousand, ten thousand, right, so, with a probability of one in ten thousand, so a rather rare event here.
We are going to change this, you know, any given base pair per generation, and so that is a very rare event, but you do this, you know, over enough generations, and then you do, actually, get a substantial increase in diversity here.
You could play with these numbers.
If you would increase this number to higher values, then you would get even more variation.
If you would decrease it to lower values, you would get less variation, but that's not really the point.
The point is that we now have this implemented, and you can see, even with very low mutation rates, you do get quite a bit of variation in your genetic population.
Great, so we just finished implementing mutations in JavaScript.
In the next lecture, we're gonna clean up the code a little bit, and we also made a tiny, tiny mistake in our code.
You may or may not have noticed this, but we'll fix that, as well, in the next lecture, and, as we do this, we'll introduce a new idea in JavaScript, so I'll see you in the next lecture.
