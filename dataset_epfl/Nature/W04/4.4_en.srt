1
00:00:02,460 --> 00:00:06,630
Welcome back, Nature, In Code, 
Chapter 4, Lecture 4.

2
00:00:06,630 --> 00:00:09,100
We said in the last lecture,
we'd like to clean up

3
00:00:09,100 --> 00:00:12,470
some of the code here 
and also fix a tiny mistake

4
00:00:12,470 --> 00:00:14,290
that we made.
So, what's this?

5
00:00:14,290 --> 00:00:15,960
What do we need to clean up?

6
00:00:15,960 --> 00:00:20,190
Well, it actually has a bit to do 
with the way we present

7
00:00:20,190 --> 00:00:21,710
the results in the browser.

8
00:00:21,710 --> 00:00:26,090
You can see here, right, 
that I'm outputting all the DNA sequences

9
00:00:26,690 --> 00:00:29,090
first before mutation 
and then after mutation.

10
00:00:29,090 --> 00:00:32,850
But it's not actually clear 
that this happens,

11
00:00:32,850 --> 00:00:35,130
at a certain timepoint

12
00:00:35,130 --> 00:00:38,690
and that, this is the outcome 
at another timepoint.

13
00:00:38,690 --> 00:00:40,260
We just happen to know it,

14
00:00:40,260 --> 00:00:43,750
but we would need to look at this 
source code to understand this,

15
00:00:43,750 --> 00:00:45,450
and that's obviously not good.

16
00:00:45,450 --> 00:00:48,340
So let's fix that very quickly.

17
00:00:48,340 --> 00:00:50,790
So basically we go back into our code.

18
00:00:50,790 --> 00:00:54,220
So what I'd like to do is, down here, 
when I print the sequences,

19
00:00:54,220 --> 00:00:55,720
here--

20
00:00:56,690 --> 00:01:00,510
I'd like this function to basically 
also tell us,

21
00:01:00,510 --> 00:01:04,050
to give us a title, like
tell us which generation we are

22
00:01:04,050 --> 00:01:05,440
or something like that.

23
00:01:05,440 --> 00:01:09,960
So I'm going to pass here 
a string to output

24
00:01:09,960 --> 00:01:13,380
and then I'm going to modify
these <i>print_sequences</i> functions

25
00:01:13,380 --> 00:01:15,400
that outputs the string.

26
00:01:15,400 --> 00:01:16,900
So here I would like to say,

27
00:01:16,900 --> 00:01:20,920
this is <i>Generation 0</i>, 
<i>Generation 0</i>,

28
00:01:20,920 --> 00:01:24,690
and then down here,
I would like to say something like,

29
00:01:24,690 --> 00:01:28,050
<i>After 100 generations</i>,

30
00:01:30,340 --> 00:01:31,980
and now of course,

31
00:01:31,980 --> 00:01:33,180
you know,

32
00:01:33,180 --> 00:01:36,390
you could modify 
this new string concatenation

33
00:01:36,390 --> 00:01:40,350
and actually use the variable here 
instead of hard coding <i>100</i>.

34
00:01:40,350 --> 00:01:42,920
But I just want to fix it very briefly,

35
00:01:42,920 --> 00:01:45,810
and you can do this yourself, 
if you'd like to.

36
00:01:46,750 --> 00:01:50,280
Okay, so <i>print_sequences</i>
that will be up here--

37
00:01:50,280 --> 00:01:53,990
<i>print_sequences</i>, at the moment,
doesn't have any parameters,

38
00:01:53,990 --> 00:01:56,010
so I'm going to change this,

39
00:01:56,010 --> 00:01:59,020
so I'm gonna just add 
a title here as a parameter

40
00:01:59,020 --> 00:02:00,470
and then I'm going to say,

41
00:02:00,470 --> 00:02:04,750
"look, you first have to print 
this title into the console".

42
00:02:04,750 --> 00:02:08,060
Okay, so <i>console. log (title)</i>.

43
00:02:08,285 --> 00:02:12,000
And also to make this a little nicer
I'm actually going to add

44
00:02:12,000 --> 00:02:15,250
and an empty line here 
so it is simple going to say,

45
00:02:15,250 --> 00:02:17,730
"print the empty string 
into the console",

46
00:02:17,730 --> 00:02:19,840
that gives us an empty line

47
00:02:19,840 --> 00:02:22,020
and that gives us 
a nice visual distinction.

48
00:02:22,020 --> 00:02:25,210
So if we save this 
and go back to the browser

49
00:02:25,210 --> 00:02:29,430
and reload this, then 
we should see something like that.

50
00:02:29,430 --> 00:02:31,980
Now, here is nicely saying <i>Generation 0</i>,

51
00:02:31,980 --> 00:02:34,320
here is the population at generation 0

52
00:02:34,320 --> 00:02:36,820
and then after 100 generations,

53
00:02:36,820 --> 00:02:38,120
here's what we get.

54
00:02:38,120 --> 00:02:40,650
This is our diverse population.

55
00:02:40,650 --> 00:02:43,510
So that is--
a bit of a cleanup here.

56
00:02:44,320 --> 00:02:47,830
So now what I'd like to do is
I'd like to fix this mistake

57
00:02:48,150 --> 00:02:50,320
that we made unwittingly, last time,

58
00:02:50,320 --> 00:02:53,280
when we developed this mutation code.

59
00:02:53,280 --> 00:02:56,430
So if you look here 
at the <i>run_generations</i>,

60
00:02:56,680 --> 00:03:01,500
right at this nested loop, 
so a loop within a loop, within the loop

61
00:03:01,500 --> 00:03:05,460
and down here we basically
go through each base,

62
00:03:05,460 --> 00:03:08,850
in each of the sequences 
for many, many generations

63
00:03:08,850 --> 00:03:14,600
and we say, if this condition 
is true, change the base.

64
00:03:14,600 --> 00:03:17,390
And so this is simply 
the <i>mutation_rate</i> here

65
00:03:17,390 --> 00:03:20,390
change that base.

66
00:03:20,390 --> 00:03:23,450
But if you think about this 
a little more deeply,

67
00:03:23,450 --> 00:03:26,670
it's not the way we implement
this here at the moment, right?

68
00:03:26,670 --> 00:03:30,810
A <i>random_base</i> just gives us,
a truly <i>random_base</i>--

69
00:03:30,810 --> 00:03:35,070
Here are the four bases
stored as elements in an array,

70
00:03:35,070 --> 00:03:39,000
we then pick a random index, 
a rounded number

71
00:03:39,000 --> 00:03:42,770
between zero and three,
including those too--

72
00:03:42,770 --> 00:03:46,510
and then we simply return 
the corresponding element.

73
00:03:46,510 --> 00:03:49,710
So it gives us a truly <i>random_base</i>,

74
00:03:49,710 --> 00:03:53,810
but it doesn't actually check
whether that base is already here,

75
00:03:53,810 --> 00:03:55,550
so it could be there, for example,

76
00:03:55,550 --> 00:03:58,190
we have an A here
and we call this function,

77
00:03:58,190 --> 00:04:00,630
this function returns an A,

78
00:04:00,630 --> 00:04:04,880
and now we're overwriting 
this base which is an A,

79
00:04:04,880 --> 00:04:06,070
with an A.

80
00:04:06,340 --> 00:04:10,660
And so we actually haven't 
had a manifested mutation.

81
00:04:10,660 --> 00:04:13,120
So we need to take that into account.

82
00:04:13,120 --> 00:04:17,050
We're actually not generating
quite as much genetic variation

83
00:04:17,050 --> 00:04:18,530
as we should.

84
00:04:18,530 --> 00:04:20,200
So how can we do this?

85
00:04:20,200 --> 00:04:23,270
Well, I think what we'll do here is,

86
00:04:23,270 --> 00:04:27,200
first of all, we have to let 
the <i>random_base</i> function know

87
00:04:27,800 --> 00:04:30,300
what we have at the current position,

88
00:04:30,300 --> 00:04:33,880
so that they can avoid returning this.

89
00:04:33,880 --> 00:04:35,160
So why don't we do this--

90
00:04:35,160 --> 00:04:38,530
why don't we essentially pass
this information here,

91
00:04:38,530 --> 00:04:42,140
from this base, as an argument

92
00:04:42,140 --> 00:04:45,140
to the <i>random_base</i> function?

93
00:04:45,140 --> 00:04:47,580
So we're passing a base pair here.

94
00:04:47,580 --> 00:04:51,030
Okay, so in <i>random_base</i>
we need to receive that,

95
00:04:51,030 --> 00:04:53,690
so here in <i>random_base</i> 
we currently don't have a parameter,

96
00:04:53,690 --> 00:04:56,200
alright?
So let's let's change that.

97
00:04:56,200 --> 00:04:59,000
I mean I'm going to call 
this <i>current_base</i>

98
00:04:59,000 --> 00:05:01,060
because that's what we're receiving here

99
00:05:01,060 --> 00:05:03,130
we're receiving the current_base.

100
00:05:03,130 --> 00:05:05,810
And now we need to modify 
this function a little bit,

101
00:05:05,810 --> 00:05:10,550
that it returns a <i>random_base</i>
from the set of basis

102
00:05:10,550 --> 00:05:13,690
that do not include this <i>current_base</i>,

103
00:05:13,690 --> 00:05:16,030
because otherwise 
there will be the possibility

104
00:05:16,030 --> 00:05:19,130
that we return the exact same base.

105
00:05:19,130 --> 00:05:21,520
So how are we going to do this?

106
00:05:21,520 --> 00:05:23,730
So first what I'm going to do is,

107
00:05:23,730 --> 00:05:27,210
I'm going to define here 
a new variable, a local variable

108
00:05:27,210 --> 00:05:29,890
that I'm going to call <i>new_base</i>.

109
00:05:29,890 --> 00:05:31,110
Okay--

110
00:05:31,110 --> 00:05:33,640
Not going to initialize this 
with any value,

111
00:05:33,640 --> 00:05:36,120
just going to define it here, <i>new_base</i>.

112
00:05:37,030 --> 00:05:41,830
And now I'm going to do something 
using a new chart script construct

113
00:05:41,830 --> 00:05:43,790
that we haven't encountered before

114
00:05:43,790 --> 00:05:47,830
and this is the so-called <i>do-while loop</i>.

115
00:05:47,830 --> 00:05:50,110
So basically <i>do-while</i> works like this,

116
00:05:50,110 --> 00:05:53,110
you say <i>do</i> and then curly brackets,

117
00:05:53,110 --> 00:05:57,790
and something here in these brackets,

118
00:05:57,820 --> 00:06:01,390
and then <i>while</i>, parentheses,
and semicolon.

119
00:06:02,390 --> 00:06:03,830
So what is this?

120
00:06:03,830 --> 00:06:08,520
Well <i>do-while</i> is basically 
just another type of iteration.

121
00:06:08,520 --> 00:06:13,340
So far, we've encountered 
only one type of iteration,

122
00:06:13,340 --> 00:06:17,940
and that's the <i>for</i> loop here,
but this is not the only way

123
00:06:17,940 --> 00:06:21,710
how we can do an iteration, 
<i>do-while</i> is another way

124
00:06:21,710 --> 00:06:23,340
that we can do this.

125
00:06:23,340 --> 00:06:26,615
And how this works is you basically 
say <i>do</i> and then here you're

126
00:06:26,615 --> 00:06:28,800
and then here your iteration code

127
00:06:28,800 --> 00:06:33,490
that you'd like to be iterated 
and then <i>while</i>

128
00:06:33,490 --> 00:06:37,150
and here a certain condition,
and as long as this condition is true,

129
00:06:37,150 --> 00:06:40,950
this code here is being iterated.

130
00:06:41,640 --> 00:06:45,740
And so that can be quite handy,
it's a little shorter

131
00:06:46,670 --> 00:06:48,570
and it has another side effect,

132
00:06:48,570 --> 00:06:50,340
there is another subtle difference here,

133
00:06:50,340 --> 00:06:54,680
namely that, 
this <i>do-while</i> iteration guarantees

134
00:06:54,680 --> 00:06:57,120
that the code that will be in here,

135
00:06:57,120 --> 00:06:59,830
will be executed at least once,

136
00:06:59,830 --> 00:07:02,420
because it is going to be executed <i>do</i>,

137
00:07:02,420 --> 00:07:06,140
and only then will 
that condition be checked.

138
00:07:06,140 --> 00:07:10,910
So this guarantees that 
it's executed at least once

139
00:07:10,910 --> 00:07:13,300
and sometimes 
that's exactly what you want.

140
00:07:13,300 --> 00:07:15,950
This is not true necessarily 
for a <i>for</i> loop,

141
00:07:15,950 --> 00:07:18,940
you can hear in this <i>for</i> construct,

142
00:07:18,940 --> 00:07:22,380
you can create a condition 
that is not true, that is false,

143
00:07:22,380 --> 00:07:23,720
right from the get-go.

144
00:07:23,720 --> 00:07:26,520
And so the code in here
will never be executed.

145
00:07:26,520 --> 00:07:29,720
That is not possible 
with the <i>do-while</i>.

146
00:07:29,720 --> 00:07:32,360
This code in here that output in here ,

147
00:07:32,360 --> 00:07:34,980
will be executed at least 
once in the beginning

148
00:07:34,980 --> 00:07:38,510
and then, the condition will be checked.

149
00:07:39,070 --> 00:07:41,340
So for us, what we would like to do,

150
00:07:42,100 --> 00:07:45,340
we would basically like to have this here.

151
00:07:45,340 --> 00:07:48,390
So we'd like to draw this 
these random numbers,

152
00:07:48,390 --> 00:07:53,020
I'm going to cut this line here 
and I'm going to past it here,

153
00:07:53,020 --> 00:07:58,730
okay, and then, so I've now drawn
this <i>random index</i>,

154
00:07:59,450 --> 00:08:01,680
And then I would like to say--

155
00:08:01,680 --> 00:08:03,760
okay, so <i>new_base</i>, my *new_base,

156
00:08:03,760 --> 00:08:06,820
right, that I am initialing here,

157
00:08:06,820 --> 00:08:08,790
but doesn't have any value--

158
00:08:09,490 --> 00:08:10,970
equals

159
00:08:12,320 --> 00:08:13,510
<i>bases</i>

160
00:08:14,680 --> 00:08:16,170
<i>index</i>.

161
00:08:16,170 --> 00:08:18,050
Okay.
And now, of course,

162
00:08:18,050 --> 00:08:22,070
I have to make sure that I'll find
the bases variable up here,

163
00:08:22,070 --> 00:08:24,975
otherwise this is going to throw an error

164
00:08:24,975 --> 00:08:28,125
because here it wouldn't know 
what bases this is.

165
00:08:28,230 --> 00:08:32,320
And then at the end 
I would return this <i>new_base</i>

166
00:08:32,320 --> 00:08:35,220
okay, so, <i>new_base</i>.

167
00:08:36,550 --> 00:08:40,040
Alright, and now 
I can get rid of this here.

168
00:08:41,660 --> 00:08:43,250
Okay,

169
00:08:43,250 --> 00:08:46,060
so now what is the condition here?

170
00:08:46,060 --> 00:08:49,620
How is this now any better 
than it was before?

171
00:08:49,620 --> 00:08:51,330
Well, so what we can do is,

172
00:08:51,330 --> 00:08:54,300
we can say, " look, 
you're going to choose an index up here,

173
00:08:54,300 --> 00:08:57,900
and then you're going to pick a <i>base</i>

174
00:08:58,800 --> 00:09:01,520
corresponding to this <i>index</i>,

175
00:09:01,520 --> 00:09:05,870
but now, after you've done this once
we're going to check

176
00:09:05,870 --> 00:09:08,830
whether this is actually the same <i>base</i>,

177
00:09:08,830 --> 00:09:13,480
so the condition here 
is going to be <i>while (new_base)</i>--

178
00:09:15,660 --> 00:09:19,970
equals, so don't forget 
the double equal, <i>current_base</i>.

179
00:09:22,390 --> 00:09:26,730
So what this means is that we are 
going to pick a <i>random_base</i>

180
00:09:27,400 --> 00:09:30,090
and then we're gonna check if these 2 now,

181
00:09:30,090 --> 00:09:32,770
the new one and the current one 
are the same.

182
00:09:32,770 --> 00:09:35,830
And if they are, so then 
that condition is true.

183
00:09:35,830 --> 00:09:37,730
So we're going to do it again

184
00:09:37,730 --> 00:09:40,390
and if it's still the same,
we're gonna do it again.

185
00:09:40,390 --> 00:09:42,720
And so this will be executed

186
00:09:42,720 --> 00:09:45,220
until this condition is not true anymore.

187
00:09:45,220 --> 00:09:48,770
So until we have the guarantee
that the <i>new_base</i>

188
00:09:48,770 --> 00:09:51,580
is not the same as the <i>current_base</i>

189
00:09:51,580 --> 00:09:54,650
and this is, of course, 
exactly what we want.

190
00:09:54,650 --> 00:09:59,610
So this guarantees that we will get 
a <i>new_base</i> here

191
00:09:59,610 --> 00:10:01,750
that will return, that is different,

192
00:10:01,750 --> 00:10:04,690
that is not equal to the <i>current_base</i>.

193
00:10:04,690 --> 00:10:08,030
And so, this is a great usage here

194
00:10:08,030 --> 00:10:12,710
of the <i>do-while loop</i> 
and we just have to make sure now

195
00:10:12,710 --> 00:10:16,810
that <i>random_base</i>, right,
expects here a <i>current_base</i>.

196
00:10:17,180 --> 00:10:18,790
We use <i>random_base</i> up here as well

197
00:10:18,790 --> 00:10:21,450
where we initialized 
the first original sequence.

198
00:10:21,450 --> 00:10:23,640
So we have to pass something here as well.

199
00:10:23,640 --> 00:10:25,310
Now here it doesn't matter,

200
00:10:25,310 --> 00:10:29,330
we can just pass it any string 
that's not <i>A, G, C or T</i>,

201
00:10:29,330 --> 00:10:32,150
so we're going to pass the empty string,

202
00:10:32,150 --> 00:10:35,930
this will guarantee
that this condition is always true,

203
00:10:35,930 --> 00:10:39,910
and we'll just get
a <i>random_base</i> out of this <i>for</i>,

204
00:10:39,910 --> 00:10:43,930
which is what we want,
when we built the original string.

205
00:10:44,280 --> 00:10:46,770
Good, so there is one thing 
I would like to do,

206
00:10:46,770 --> 00:10:50,690
and that is I'd like to take 
this variable here, <i>bases</i>,

207
00:10:50,690 --> 00:10:55,530
and move it out of the function,
so, I'm going to cut it here

208
00:10:55,530 --> 00:10:59,140
and I'm going just 
to add it here at the top,

209
00:10:59,140 --> 00:11:01,740
where we have defined 
the other variables

210
00:11:01,740 --> 00:11:06,440
and I'm going to say 
<i>var bases</i> equals this array,

211
00:11:06,440 --> 00:11:09,970
and I'm going to define it as a variable

212
00:11:09,970 --> 00:11:11,910
that's in all capital letters.

213
00:11:11,910 --> 00:11:15,750
And then I have to make sure 
that I reference correctly,

214
00:11:15,750 --> 00:11:18,930
down here, where I choose the <i>new_base.</i>

215
00:11:18,930 --> 00:11:20,840
So why am I doing this?

216
00:11:21,210 --> 00:11:25,390
Well, other functions may want
to access this variable

217
00:11:25,390 --> 00:11:29,280
out of the four that contains 
the four bases of the DNA

218
00:11:29,280 --> 00:11:31,230
as well in the future.

219
00:11:31,250 --> 00:11:35,130
So, it's a good thing to have 
this just defined in one place.

220
00:11:36,190 --> 00:11:37,430
And the other thing is:

221
00:11:37,430 --> 00:11:39,770
Why am I using all capital letters?

222
00:11:39,770 --> 00:11:42,990
That's basically just as a signal 
to tell other programmers

223
00:11:42,990 --> 00:11:44,580
who were to reuse this code,

224
00:11:44,580 --> 00:11:46,880
this is meant to be 
essentially constant.

225
00:11:46,880 --> 00:11:48,460
It's a variable, of course,

226
00:11:48,460 --> 00:11:51,690
and you can always 
overwrite variables in Java script,

227
00:11:51,690 --> 00:11:54,650
but this gives a clear signal,

228
00:11:54,650 --> 00:11:58,210
"this is meant to be a constant,
please do not change this."

229
00:11:58,870 --> 00:12:03,210
So we can now save this 
and we can go over to our browser

230
00:12:03,210 --> 00:12:06,490
and basically see what have changed.

231
00:12:06,490 --> 00:12:09,620
So here's our console,
I'm going to reload this--

232
00:12:09,620 --> 00:12:12,030
So what you can see is not much changes,

233
00:12:12,030 --> 00:12:13,810
but if you could actually measure it,

234
00:12:13,810 --> 00:12:16,000
you would see that we now 
get more mutation,

235
00:12:16,000 --> 00:12:17,160
and why is that?

236
00:12:17,160 --> 00:12:22,340
Well, for a simple reason,
we used to, in one out of four cases,

237
00:12:22,340 --> 00:12:25,140
we used to get a base, 
as a replacement, as a mutation

238
00:12:25,140 --> 00:12:27,500
that was actually already there.

239
00:12:27,500 --> 00:12:31,490
So we would take an A 
and replace it with any an A,

240
00:12:31,490 --> 00:12:35,220
in one out of four cases,
and the same for T, G or C.

241
00:12:35,490 --> 00:12:38,540
So we actually got less mutation 
than we wanted.

242
00:12:38,540 --> 00:12:40,070
Now we fix this problem.

243
00:12:40,070 --> 00:12:42,770
So we should get a bit more--

244
00:12:42,770 --> 00:12:46,340
mutation that manifests 
itself in the population.

245
00:12:46,340 --> 00:12:50,290
You can't see this here in the console 
but you could measure it.

246
00:12:50,290 --> 00:12:54,200
The other thing of course 
is that we now are aware of this,

247
00:12:54,200 --> 00:12:57,480
the new type of implementing a loop,

248
00:12:57,480 --> 00:13:00,820
which is the <i>do-while</i> 
which is really quite handy.

249
00:13:00,820 --> 00:13:02,740
And will use this type of loop

250
00:13:02,740 --> 00:13:04,690
and other loops 
that we'll get to encounter

251
00:13:04,690 --> 00:13:06,330
in the future as well.
