Welcome back, <i>Nature, in Code</i>. we are Chapter 4, Lecture 2.
In this lecture we are going to take our idea of having multiple DNA sequences in a population that changes over time through random mutation.
And we are going to implement this using a 3D array.
Let's do it.
So here's my Text Editor.
I have a new file here, it's empty, and I am going to start from scratch using the normal scaffold that I usually use.
So "&lt;!DOCTYPE html&gt;" and then I'm going to set up my <i>&lt;html&gt;</i> tag, and then of course my <i>&lt;head&gt;</i> and my <i>&lt;body&gt;</i> as is normal,
<i>&lt;/head&gt;</i> in an <i>html</i> scaffold
<i>&lt;body&gt;</i> <i>&lt;/body&gt;</i> and I'm going to indent those a little to make things look a little nicer, and here in my <i>&lt;head&gt;</i> 
I'm going to set up the <i>&lt;script&gt;</i> tag, which will contain our <i>JavaScript</i> code.
And now I am going to save this right away.
<i>Save as</i> &gt; we're here in the <i>code examples</i>.
I am going to call this <i>sequences.html</i>.
Good.
Now, how does one do this?
How does one go from an idea that one has developed and really implement this now as <i>JavaScript</i> code.
This is one of the problems that specifically beginners have, because they have this idea of a program that they'd like to develop, of an idea in their head.
But now, how do they get started?
How do they start implementing this in <i>JavaScript</i> on this blank canvas of a just a blinking cursor staring at us and waiting for input.
So there's many ways to do this.
What I usually do is,
I do it quite organically.
I simply start by thinking what's the first function that I will eventually call, and then I'm going to go from there.
What should this function do, what its function should do: A, B and C, so I'm going to define three functions that will take care of, A, B and C, and then, as I implement A, B and C,
I'll get across new concepts that I need to implement.
So that's one way to do it.
Other people like to design everything on a piece of paper first and then basically have a very clear idea of how this is going to be implemented before they start coding.
So it's really sort of a personal taste.
I prefer the organic approach, and I'm going to do this now here.
So you can just follow me and see how one can do this.
There's always multiple ways to achieve the same thing.
So, in my mind, one of the first things 
I'd like to do is,
I somehow want to begin with the first generation of this population.
That's really the starting point.
So I think I'm just going to start this whole program by calling a function called <i>generate_first_ generation</i>.
That's really what I need to do.
I need to generate multiple DNA sequences, and I think what I'm going to do at the beginning is that each of those DNA sequences is actually identical.
So we start with zero genetic variation, and then we go from there introducing mutation over time.
But I need to generate this first generation first.
So right now I'm calling this function.
But there is no such function.
So what of course need to do is I need to define this function.
So here it is, with an empty body.
What should this function do?
Well, this function should do two things.
First, it should generate the first sequence.
We need some kind of an original sequence, and then, once we have the sequence, we need many, many copies of this particular sequence to create our first population in the first generation.
So I first need to generate an original sequence, a first sequence.
So again, I think I am just probably going to call a function called <i>generate_first_sequence</i>.
And this function should of course, as it says in the name, generate the first sequence, so I'm going to define this function now here:
<i>generate_first_sequence</i>.
And now I need to think about, how do I generate the first sequence of this population.
So, again, there's multiple ways to do this, but what I'd like to do is...
Well, first thing to think about how long the sequence should be and then for however long the sequence should be
I need to grab random basis from a set of four possible: basis <i>H</i>, <i>G</i>, <i>C</i> and <i>T</i>.
So, again, I now need to define the first sequence, but how long is it going to be?
Well, that information I should probably store in a variable .
So I'm going to set up this variable, then I'm going to call <i>sequence_length</i>.
And then I am going to set this to <i>20</i>, that's a short sequence, but for the purpose of this example here that should work fine.
So now I can set up a loop here. for <i>(var i = 0; </i> and now <i>i</i> is going to be smaller than <i>sequence_length</i>, so this loop is going to iterate 20 times, and of course I have to make sure 
I increment the <i>i</i> by <i>1</i>, otherwise get an infinite loop.
So 20 times.
I would now like to grab a random base and push this into an array of basis, which will be my original sequence.
So there's two things right here that are missing.
First of all, where's this array?
I haven't defined it yet. 
I want an <i>original_sequence</i> array.
So I am going to set up an <i>original_sequence</i> array here by simply saying <i>original_sequence</i> is an empty array.
So now I have this array, where I'm going to store my original sequence, and what I need to do...
Sorry, <i>original_sequence</i> rather 
<i>original_sequence</i> is,
I need to push random basis into this array.
So any base <i>A</i> <i>G</i> <i>C</i> or <i>T</i> as a string.
Now, how I'm going to do this?
Again, this feels like a functionality that can be easily outsourced, because not something that generates first sequence should be really worried about, then it's indeed also functionality that may be useful, down the road.
So, yeah, I think I'm going to just call the function here <i>random_base</i>, and this function...
Someone, and it's going to be me, should eventually create this function, and it should return a random base <i>A</i> <i>G</i> <i>C</i> or <i>T</i>, and then, if it returns that, 
I can push it in the original sequence and I do this <i>sequence_length</i> time, so 20 times and so at the end, when this function has finished executing,
I have my <i>original_sequence</i>, an array of 20 randomly selected base pairs.
So, let's go ahead and implement this random base function.
<i>function random_ base() {}</i>.
So, what should this function do?
This function should return a random base, one of <i>A</i> <i>G</i> <i>C</i> or <i>T</i>.
How do I do this?
In <i>JavaScript</i> any random selection somehow has to start with <i>Math.random</i>, because that's really the only random generation we can do, and <i>Math.random</i>, as we know, returns a floating point number between 0 and 1.
So how do we go from this to a random choice of four characters?
One thing we can do is, we can, first of all, store temporarily this basis into an array here.
So this will be 'A', then 'G', then 'C' and finally 'T', although the order doesn't really matter.
Now I have this array and so, as you know, accessing elements in the array is done using the index, so 0, 1, 2 or 3.
So, now what actually really want is a random integer number between 0 and 3, including both 0 and 3.
If I had such a random number generator, then I could just use the result to pick the corresponding base, and there would going really be a <i>random_base</i> function.
So now we've at least transformed this problem into a purely numerical problem.
So how are we going to do this?
How are we going to select a random index here?
So, as I said, everything has to start with <i>Math.random()</i>.
Now, again, this would be the wrong way to do this, because <i>Math.random()</i> simply returns a floating point number between 0 and 1.
So, first of all, 
I need to expand this range, and I'm simply going to do this by multiplying this with 4.
So now this expression here actually gives us a random floating point number between 0 and 4.
So I also need to mention an important detail, which we've not talked about so far, because it wasn't really relevant, which was that <i>Math.random()</i> does indeed return a number between 0 and 1, but 1 is in fact not included.
And so this range now here will go from 0 to 4, but 4 will not be included.
The maximum number will be 3.9999999 and so on,
So I can use this now to basically just say, "You know what?"
Give me this floating point number and round it down to the integer, and the way to do it is, is this handy method that <i>JavaScript</i> provides, which is called <i>Math.floor</i>.
So it rounds down a floating point number to an integer, and it runs it down, and I think this should be obvious from the name <i>floor</i>.
So now each of these numbers from between 0 and 3.99999 and so on will be rounded down to one of the four possible numbers: 0, 1, 2 or 3, and this is exactly what we want.
So now I can simply say, 
"Okay, return this element in the bases array, so <i>bases[index]</i>,"
<i>index</i> being this randomly generated number: 0, 1, 2 or 3, that we just did here.
So this should work fine, and now we have a generic random base generator, which will come in handy multiple times.
So we're pushing this <i>random_base</i> here that we're getting, and we call this function into the <i>original_sequence</i>, and then, when this 
<i>generate_first_sequence</i> a function has finished executing, we have our first sequence.
So that was now the first step of this <i>generate_first_generation</i> function.
We have the first sequence.
So now what I'd like to do is basically make many, many copies of this original sequence and push those copies into an array that stores all these sequences of our population.
So I need to define two things now.
The first is, I need to define how many of those sequences
I want in the first place, in some sense, our population size.
So I am going to define a variable here called <i>number_of_sequences</i>.
I am going to set this to 100.
So I'd like to make 100 copies now of this <i>original_sequence</i> and then push it into our population array.
So I have to define this as well, and I am going to do this here,
I'm going to call it <i>sequences</i>.
So this is an array, an empty array, that will essentially be our population.
I am just going to add a comment here.
This is our population, the array that will store all these other sequences which are themselves arrays.
So now I think I have everything set up to finish this.
So here I'm going to now create another loop:
<i>for (var i = 0;</i> and then I'm going to iterate for as many times as I need to, which is defined here now in the <i>number_of_sequences</i> variable and then of course, as always, will increment the counter here by 1.
So 100 times I would like to get a copy of this <i>original_sequence</i>, and I'd like to push it into our <i>sequences</i> array.
So how do I get a copy?
It turns out, there's a really handy method in the array, which is called <i>slice</i>:
<i>slice</i> simply returns a copy of the array that you let the <i>slice</i> method act on.
So if you want a copy from the <i>original_sequence</i>, you simply say <i>original_sequence.sclice()</i>.
This will return a copy of the <i>original_sequence</i>, and that's exactly what we want.
So we're going to push this into our <i>sequences</i> array, so <i>sequences. push(original_sequence.sclice())</i>
And now we're done.
So this is really all we need.
This now will be that function that will be called first, and from there we generate the first sequence.
We do this here by pushing a random base into this <i>original_sequence</i> array.
We have developed this function around the base down here.
And then, once we have this original sequence, we're going to copy it many, many times and we're going to push it into our <i>sequences</i> array.
So now we really created the first generation, and we're noq going to save this and go over to the browser and open this file.
So here I am in the browser and I am going to open the file.
<i>Open file</i> &gt; <i>sequences.html</i>.
Here it is.
I open it, I see nothing here-- that's to be expected.
I want to see the <i>JavaScript Console</i>, see if I did some mistake, some typo.
No, it does not seem to be the case.
So if you've made a typo or something like that, you would see it in here, probably in red.
I just see this cursor blinking here happily.
That means I didn't make any obvious typo or any kind of mistake like that.
So, that's good, things are working fine.
Now, the next step.
We need to add the 3rd dimension, namely the dimension of time, and then we can start adding mutations along the way.
So this concludes Lecture 2.
We now have now our 2D array, a set of DNA sequences that are all identical, which means we have no genetic variation.
In the next lecture we are going to add this 3rd dimension, the dimension of time, and as this population goes on through time, we start adding random mutations, and then we can see what this does to genetic variation.
So see you in the next lecture.
