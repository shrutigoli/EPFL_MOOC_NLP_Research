1
00:00:03,600 --> 00:00:07,400
Welcome back, Nature, In Code.
We're in Chapter 4, Lecture 3.

2
00:00:07,400 --> 00:00:08,800
In the previous video,

3
00:00:08,800 --> 00:00:11,600
we implemented DNA sequences

4
00:00:11,600 --> 00:00:13,950
as arrays of bases,

5
00:00:13,950 --> 00:00:15,900
and we stored those arrays

6
00:00:15,900 --> 00:00:18,100
as a population in another array,

7
00:00:18,100 --> 00:00:20,250
so we had a two-dimensional array,

8
00:00:20,250 --> 00:00:23,500
and so now, what we're gonna do,
in this lecture, is two things.

9
00:00:23,500 --> 00:00:26,600
First, we're gonna print
those DNA sequences

10
00:00:26,600 --> 00:00:27,750
into the console

11
00:00:27,750 --> 00:00:29,800
so that we can see what's happening,

12
00:00:29,800 --> 00:00:33,650
and, secondly, we're gonna introduce
mutation, so let's get going.

13
00:00:33,650 --> 00:00:35,250
So, this is our code.

14
00:00:35,250 --> 00:00:36,750
We think it works great.

15
00:00:36,750 --> 00:00:38,650
It doesn't give us any errors,

16
00:00:38,650 --> 00:00:40,600
but we can't see any output either,

17
00:00:40,600 --> 00:00:42,697
so why don't we fix that first?

18
00:00:42,697 --> 00:00:44,700
So, here at the end,

19
00:00:44,700 --> 00:00:46,350
when we call this function,

20
00:00:46,350 --> 00:00:47,800
<i>first generation</i>,

21
00:00:47,800 --> 00:00:49,050
once that's done,

22
00:00:49,050 --> 00:00:51,150
we'd like to print the sequences,

23
00:00:51,150 --> 00:00:53,000
so I'm gonna call our function here,

24
00:00:53,000 --> 00:00:55,250
<i>print sequences</i>,

25
00:00:56,400 --> 00:00:59,200
and this function is not defined yet,

26
00:00:59,200 --> 00:01:00,750
so I'll have to do this.

27
00:01:01,500 --> 00:01:04,250
So, print sequences, what should it do?

28
00:01:04,250 --> 00:01:06,450
Well, let's define it first.

29
00:01:06,450 --> 00:01:10,480
Function <i>print sequences</i>.

30
00:01:11,050 --> 00:01:12,050
Okay.

31
00:01:13,150 --> 00:01:15,750
Well, it should, essentially, go through

32
00:01:16,800 --> 00:01:19,250
all the DNA sequences that we have,

33
00:01:19,250 --> 00:01:21,200
and then it should print them,

34
00:01:21,200 --> 00:01:24,550
so going through all the sequences,

35
00:01:24,550 --> 00:01:28,050
in other words, we will use a loop.

36
00:01:28,050 --> 00:01:30,200
So, we'll use our girlfriend,

37
00:01:30,200 --> 00:01:32,350
the <i>for</i> loop,

38
00:01:32,350 --> 00:01:35,250
so for <i>var i = 0</i>

39
00:01:35,700 --> 00:01:40,100
and then <i>i &lt; number of sequences</i>,

40
00:01:40,100 --> 00:01:44,250
okay, <i>number of sequences</i>.

41
00:01:45,050 --> 00:01:47,500
Recall that this is the variable

42
00:01:47,500 --> 00:01:49,100
that we set up here,

43
00:01:49,600 --> 00:01:51,550
which currently source the value 100,

44
00:01:51,550 --> 00:01:53,600
that's, essentially, our population size,

45
00:01:53,600 --> 00:01:56,500
or, you know, the numbers
of DNA sequences,

46
00:01:57,250 --> 00:02:00,850
and then, at the end, of course,
we have to increment <i>i + 1</i>

47
00:02:00,850 --> 00:02:03,251
in order to avoid infinite loops.

48
00:02:04,150 --> 00:02:05,190
Okay.

49
00:02:05,190 --> 00:02:09,200
So, what should we do
here at each iteration?

50
00:02:09,200 --> 00:02:11,750
Well, we'd like to print the sequence.

51
00:02:12,400 --> 00:02:14,750
Now, in order to print the sequence,

52
00:02:15,550 --> 00:02:17,200
we have to implement some code,

53
00:02:17,200 --> 00:02:19,750
but I feel like
we shouldn't do this in here.

54
00:02:19,750 --> 00:02:21,200
I'm simply gonna, basically,

55
00:02:21,200 --> 00:02:22,950
call a function

56
00:02:22,950 --> 00:02:25,750
that is called <i>print sequence</i>,

57
00:02:25,750 --> 00:02:27,580
and notice the singular,

58
00:02:27,580 --> 00:02:29,550
so here we have <i>print sequences</i>,

59
00:02:29,550 --> 00:02:31,800
and here we simply have <i>print sequence</i>,

60
00:02:31,800 --> 00:02:34,750
and now I feel it's <i>print sequence</i>.

61
00:02:35,400 --> 00:02:37,600
It's the job of that function

62
00:02:37,600 --> 00:02:39,650
to, essentially, print the sequence,

63
00:02:39,650 --> 00:02:43,200
so function <i>print sequence</i>.

64
00:02:43,200 --> 00:02:46,250
We're outsourcing the functionality here.

65
00:02:47,050 --> 00:02:48,600
So, what should it do?

66
00:02:48,600 --> 00:02:49,750
Well, first of all,

67
00:02:49,750 --> 00:02:53,000
we have to pass it a value.

68
00:02:53,800 --> 00:02:54,950
Which value?

69
00:02:54,950 --> 00:02:56,750
Well, the current sequence

70
00:02:56,750 --> 00:02:59,000
so, in here, <i>print sequence</i>.

71
00:02:59,000 --> 00:03:02,200
We wanna pass the value

72
00:03:02,200 --> 00:03:04,300
of the population array.

73
00:03:04,300 --> 00:03:06,550
Now, remember, the population array

74
00:03:06,550 --> 00:03:08,500
is called <i>sequences</i>,

75
00:03:09,000 --> 00:03:10,500
<i>sequences</i>,

76
00:03:10,900 --> 00:03:15,200
and the element here is that of <i>index i</i>,

77
00:03:15,200 --> 00:03:17,250
which, you know, is nothing new.

78
00:03:18,000 --> 00:03:20,250
This is how we iterate

79
00:03:20,250 --> 00:03:22,400
over an array, essentially.

80
00:03:22,400 --> 00:03:25,500
So, this is the <i>index i</i> sequences.

81
00:03:25,500 --> 00:03:26,600
This is the array.

82
00:03:26,600 --> 00:03:28,600
This is what we're passing in here,

83
00:03:28,600 --> 00:03:31,250
so we need to define the parameter here.

84
00:03:31,750 --> 00:03:33,500
I think I'm gonna call it,

85
00:03:33,500 --> 00:03:35,650
you know, simply I guess, <i>sequence</i>, right?

86
00:03:35,650 --> 00:03:37,850
We're getting a sequence here.
How about that?

87
00:03:37,850 --> 00:03:40,070
Sequence.
Okay.

88
00:03:40,070 --> 00:03:42,250
So, now, this function here

89
00:03:42,250 --> 00:03:45,250
needs to print that sequence.

90
00:03:46,000 --> 00:03:48,500
So, again, remember the sequence

91
00:03:48,500 --> 00:03:51,700
is simply an array of base pairs,

92
00:03:51,700 --> 00:03:55,250
so I could go just through this array.

93
00:03:55,250 --> 00:03:57,500
So, here, I would simply say

94
00:03:57,500 --> 00:03:59,900
<i>for var i = 0</i>,

95
00:04:00,750 --> 00:04:04,000
<i>i &lt; sequence length</i>.

96
00:04:05,400 --> 00:04:06,850
We could also use, by the way,

97
00:04:06,850 --> 00:04:10,500
so here this is the length
of a DNA sequence.

98
00:04:11,000 --> 00:04:13,900
I'm simply using here
the length property of the array,

99
00:04:13,900 --> 00:04:17,300
but I could, in principle,
also use this variable here.

100
00:04:17,300 --> 00:04:18,950
It would have the same value,

101
00:04:18,950 --> 00:04:22,950
but I'm gonna use here
this <i>sequence.length</i> property,

102
00:04:22,950 --> 00:04:25,600
and then I'm going to say

103
00:04:25,600 --> 00:04:27,250
<i>i = i + 1</i>,

104
00:04:27,750 --> 00:04:29,000
as always,

105
00:04:29,750 --> 00:04:32,252
so now I have each base pair here

106
00:04:32,252 --> 00:04:37,500
in <i>sequence index i</i>,

107
00:04:37,500 --> 00:04:39,250
so I could, in principle, simply say,

108
00:04:39,250 --> 00:04:42,600
no, I'm gonna output this base pair

109
00:04:42,600 --> 00:04:44,150
into the console directly,

110
00:04:44,150 --> 00:04:47,600
so <i>console log sequence i</i>,

111
00:04:47,600 --> 00:04:49,200
but, if I would do this,

112
00:04:49,200 --> 00:04:51,100
then all sequences will be stacked

113
00:04:51,100 --> 00:04:54,400
vertically in the console,

114
00:04:54,400 --> 00:04:56,850
and that would be very hard to read.

115
00:04:56,850 --> 00:05:00,350
So, what I'd rather like to do
is I'd rather like to do

116
00:05:00,350 --> 00:05:02,750
some string concatenation

117
00:05:02,750 --> 00:05:04,400
where I'm gonna add up

118
00:05:04,400 --> 00:05:08,500
all the, you know, bases
horizontally as a string,

119
00:05:08,500 --> 00:05:11,150
and then I'm gonna output that string.

120
00:05:11,150 --> 00:05:13,200
So, basically, what I'm gonna do
is, up here,

121
00:05:13,200 --> 00:05:15,280
I'm gonna set up an empty string,

122
00:05:15,280 --> 00:05:19,150
and I'm gonna call this <i>sequence string</i>,

123
00:05:19,150 --> 00:05:22,850
for example, <i>sequence_string</i>,

124
00:05:22,850 --> 00:05:25,700
and I'm gonna initialize this
as the empty string,

125
00:05:25,700 --> 00:05:29,500
and then, here, rather than
logging the base

126
00:05:31,600 --> 00:05:33,050
into the console,

127
00:05:33,050 --> 00:05:34,550
I'm simply gonna say,

128
00:05:34,550 --> 00:05:37,300
<i>sequence string =</i>

129
00:05:37,300 --> 00:05:39,700
well, we already have <i>= string</i>,

130
00:05:39,700 --> 00:05:43,100
plus the <i>sequence i</i>, so this base.

131
00:05:43,100 --> 00:05:44,800
So, here, I'm just, you know,

132
00:05:44,800 --> 00:05:48,500
iteratively building this sequence string,

133
00:05:48,500 --> 00:05:51,750
and I'm gonna end this line, of course,
with a semicolon here,

134
00:05:51,750 --> 00:05:54,600
and then, at the end,
once I'm done doing this,

135
00:05:54,600 --> 00:05:55,750
I can now say,

136
00:05:55,750 --> 00:05:59,600
<i>console log sequence string</i>,

137
00:05:59,600 --> 00:06:02,350
okay, so I'm basically logging

138
00:06:02,350 --> 00:06:05,000
this sequence string that I just built.

139
00:06:05,500 --> 00:06:06,500
Okay.

140
00:06:07,350 --> 00:06:10,000
Now, let's see whether all of this worked.

141
00:06:10,000 --> 00:06:11,750
We're gonna save this,

142
00:06:11,750 --> 00:06:14,950
and we're going to the browser.

143
00:06:14,950 --> 00:06:17,250
We should still have our file open.

144
00:06:17,250 --> 00:06:19,100
Here's the console.

145
00:06:19,100 --> 00:06:20,950
It's empty,

146
00:06:20,950 --> 00:06:25,000
as it was meant to be
from the previous code,

147
00:06:25,000 --> 00:06:27,750
but now we changed the code,
so let's reload this,

148
00:06:28,300 --> 00:06:30,050
and here we get our result.

149
00:06:30,050 --> 00:06:32,750
So, here is a DNA sequence,

150
00:06:32,750 --> 00:06:34,500
with 20 base pairs,

151
00:06:35,100 --> 00:06:38,500
and it is, indeed, printing 100 strings,

152
00:06:38,500 --> 00:06:41,300
but Chrome is nice here.

153
00:06:41,300 --> 00:06:43,950
Rather than printing the exact same string

154
00:06:43,950 --> 00:06:45,400
a hundred times,

155
00:06:45,400 --> 00:06:46,700
it's simply telling us,

156
00:06:46,700 --> 00:06:48,600
"Look, I have this string,

157
00:06:48,600 --> 00:06:51,750
and I'm supposed to print it
a hundred times.

158
00:06:51,750 --> 00:06:52,800
I'm not gonna do that.

159
00:06:52,800 --> 00:06:54,400
I'm just gonna print it once,

160
00:06:54,400 --> 00:06:56,900
and then tell you, you know,

161
00:06:56,900 --> 00:06:59,350
you should expect this
a hundred times here,"

162
00:06:59,350 --> 00:07:03,350
so this is just to keep
the console clean and tidy,

163
00:07:03,350 --> 00:07:04,500
but it does work,

164
00:07:04,500 --> 00:07:07,750
so our printing here
works just as expected.

165
00:07:07,750 --> 00:07:12,750
That's great, so now we can move
on to implementing mutation.

166
00:07:12,750 --> 00:07:14,550
So, we're back in our code here.

167
00:07:14,550 --> 00:07:17,500
Now we'd like to implement mutation.

168
00:07:17,950 --> 00:07:19,950
Okay, how can we do this?

169
00:07:20,450 --> 00:07:22,200
Well, let's see!

170
00:07:22,200 --> 00:07:24,550
We generate the first generation.

171
00:07:24,550 --> 00:07:27,050
This is a hundred DNA sequences,

172
00:07:27,050 --> 00:07:30,500
they're totally identical,
then we print them.

173
00:07:30,500 --> 00:07:31,600
Okay, fine,

174
00:07:31,600 --> 00:07:33,400
but now what I would like to do

175
00:07:33,400 --> 00:07:36,800
is now I would like to actually introduce,

176
00:07:36,800 --> 00:07:39,400
you know, a temporal dimension

177
00:07:39,400 --> 00:07:41,550
where we have many, many generations,

178
00:07:41,550 --> 00:07:45,350
and, at each generation,
I'd like to introduce some mutation,

179
00:07:45,350 --> 00:07:47,100
so I'm gonna call a function here

180
00:07:47,100 --> 00:07:50,100
<i>run generations</i>,

181
00:07:52,100 --> 00:07:54,550
and what does this <i>run generations</i> do?

182
00:07:54,550 --> 00:07:56,950
Well, let's go ahead and implement it.

183
00:07:57,700 --> 00:08:00,500
Okay, so always the same kind
of principle.

184
00:08:01,245 --> 00:08:05,750
Function <i>run generations</i>.

185
00:08:06,550 --> 00:08:08,200
Now, what we'd like to do here

186
00:08:08,200 --> 00:08:11,853
is we would like to, essentially,

187
00:08:11,853 --> 00:08:15,096
change the bases

188
00:08:17,500 --> 00:08:21,850
in those DNA strings with a certain rate,

189
00:08:21,850 --> 00:08:24,000
and that's called the mutation rate,

190
00:08:24,000 --> 00:08:26,750
so we, essentially, like to introduce

191
00:08:26,750 --> 00:08:29,250
some errors, or some changes,

192
00:08:29,250 --> 00:08:30,950
some random modifications

193
00:08:30,950 --> 00:08:33,250
in those DNA sequences,

194
00:08:33,750 --> 00:08:37,300
so it seems like I need
to define two variables first.

195
00:08:37,300 --> 00:08:39,400
First of all, I need to know
how many generations

196
00:08:39,400 --> 00:08:42,050
I'm actually gonna run,
and then what is this rate

197
00:08:42,050 --> 00:08:44,850
at which we're gonna introduce
these changes.

198
00:08:44,850 --> 00:08:48,750
So, let's go back up here
to where we defined the global variables,

199
00:08:48,750 --> 00:08:52,750
and what I'm gonna do
is I'm gonna introduce

200
00:08:53,300 --> 00:08:54,750
two variables here.

201
00:08:54,750 --> 00:08:56,650
First, I'm gonna introduce this.

202
00:08:56,650 --> 00:08:59,450
I'm gonna call <i>number of generations</i>,

203
00:08:59,450 --> 00:09:02,150
okay, <i>number of generations</i>,

204
00:09:02,150 --> 00:09:03,650
and let's set this, perhaps,

205
00:09:03,650 --> 00:09:06,450
to 100 generations,

206
00:09:06,450 --> 00:09:09,848
and then I'd like to introduce
this mutation rate, okay,

207
00:09:09,848 --> 00:09:14,004
so I'm gonna call this mutation rate,

208
00:09:15,070 --> 00:09:19,000
and I'm gonna just set this to 0.0001,

209
00:09:19,000 --> 00:09:21,200
so something, you know, rather small,

210
00:09:21,200 --> 00:09:23,450
and this is now the mutation rate.

211
00:09:23,450 --> 00:09:26,150
Now, whenever you have a mutation rate,

212
00:09:26,150 --> 00:09:28,700
you need to ask yourself per what,

213
00:09:28,700 --> 00:09:31,150
per what unit, and per what time?

214
00:09:31,150 --> 00:09:35,100
Mutation rates come
in all different shapes and forms.

215
00:09:35,100 --> 00:09:38,650
Is it per base, is it per entire genome,

216
00:09:38,650 --> 00:09:40,600
is it per generation,

217
00:09:40,600 --> 00:09:44,200
or is it per year, or millions of years?

218
00:09:44,200 --> 00:09:47,100
So, you know, you have to,
when you read the literature

219
00:09:47,100 --> 00:09:51,300
and you see the term, mutation rate,
you always have to ask yourself,

220
00:09:51,300 --> 00:09:53,100
"Okay what's a unit here?"

221
00:09:53,100 --> 00:09:55,750
So, we're simply going to define this as

222
00:09:55,750 --> 00:09:59,501
<i>per base and generation</i>,

223
00:10:00,750 --> 00:10:05,253
so this is the mutation rate
per base and generation.

224
00:10:05,998 --> 00:10:09,250
Good, so now that we have
these two things implemented,

225
00:10:09,250 --> 00:10:11,350
let's implement the function here.

226
00:10:11,350 --> 00:10:13,800
<i>run generations</i>.

227
00:10:13,800 --> 00:10:15,999
So, what we need to do is we need

228
00:10:15,999 --> 00:10:20,250
to iterate over each base,

229
00:10:21,196 --> 00:10:22,596
in each sequence,

230
00:10:22,596 --> 00:10:24,150
and we need to do this,

231
00:10:24,150 --> 00:10:26,500
you know, many, many times,
however many generations

232
00:10:26,500 --> 00:10:28,050
we would like to run.

233
00:10:28,050 --> 00:10:31,350
So, essentially, what this function
is now going to be

234
00:10:31,350 --> 00:10:33,750
is it's gonna be a loop,
and it's not just gonna be

235
00:10:33,750 --> 00:10:37,000
one loop, it's actually going to be
a nested loop,

236
00:10:37,000 --> 00:10:39,650
and it's gonna be a threefold nested loop.

237
00:10:39,650 --> 00:10:43,350
So, we have a loop,
within a loop, within a loop,

238
00:10:43,350 --> 00:10:46,350
and this may, you know,
look a little intimidating,

239
00:10:46,350 --> 00:10:48,750
but it's really extremely straightforward,

240
00:10:48,750 --> 00:10:51,250
if you think about it,
so follow me doing this,

241
00:10:51,250 --> 00:10:54,500
and I think you'll look get
the logic here quite easily.

242
00:10:54,500 --> 00:10:56,650
So, first of all, we wanna say, okay,

243
00:10:56,650 --> 00:10:59,500
we're gonna do something now
for a couple of generations,

244
00:10:59,500 --> 00:11:01,500
so, for that, we're gonna build a loop.

245
00:11:01,500 --> 00:11:06,245
Okay, so <i>var i = 0</i>

246
00:11:07,245 --> 00:11:11,850
<i>i &lt; number of generations</i>,
right there, which is defined,

247
00:11:11,850 --> 00:11:15,701
<i>number of generations</i>

248
00:11:15,701 --> 00:11:19,750
and then, as always, <i>i = i + 1</i>.

249
00:11:20,600 --> 00:11:23,350
Okay, so these are now our generations,

250
00:11:23,350 --> 00:11:25,250
okay, so what we're doing,
here in this loop,

251
00:11:25,250 --> 00:11:28,895
is, basically, each generation, right,

252
00:11:28,895 --> 00:11:32,100
each generation do the following.

253
00:11:32,100 --> 00:11:36,498
Okay, so what would we like to do
in each generation?

254
00:11:37,050 --> 00:11:41,150
Well, we would like to go
through all the sequences,

255
00:11:41,150 --> 00:11:44,600
and then, within the sequences,
we would like to go through all the bases,

256
00:11:44,600 --> 00:11:46,300
and there we would like to change,

257
00:11:46,300 --> 00:11:48,900
occasionally, a random base.

258
00:11:49,500 --> 00:11:51,400
Okay, so what we need to do first

259
00:11:51,400 --> 00:11:53,200
is we need to go through each sequence,

260
00:11:53,200 --> 00:11:55,900
so, again, we need to go
through each element

261
00:11:55,900 --> 00:11:57,250
in the sequences array,

262
00:11:57,250 --> 00:11:59,150
so I'm gonna set up a loop here,

263
00:11:59,150 --> 00:12:00,950
and so now we have this loop, right?

264
00:12:00,950 --> 00:12:02,400
We're building this loop

265
00:12:02,400 --> 00:12:06,000
that already exists within another loop,

266
00:12:06,500 --> 00:12:09,700
but, you know,
there's nothing strange about that.

267
00:12:09,700 --> 00:12:11,450
It's simply a loop

268
00:12:11,450 --> 00:12:14,145
that's nested within another loop.

269
00:12:14,750 --> 00:12:16,600
The only thing you have to be careful here

270
00:12:16,600 --> 00:12:19,401
is that you can't now save <i>var i</i>

271
00:12:19,401 --> 00:12:22,650
because we've already defined
this in this loop here,

272
00:12:22,650 --> 00:12:25,450
and we're still within this loop,

273
00:12:25,450 --> 00:12:27,950
so <i>i</i> is already taken,

274
00:12:27,950 --> 00:12:30,048
so you can take another variable.

275
00:12:30,702 --> 00:12:33,450
Some people prefer
to take something like <i>j</i>,

276
00:12:33,450 --> 00:12:37,300
but I prefer <i>ii</i>, and why is that?

277
00:12:37,300 --> 00:12:40,454
Well, it's simply, you know,

278
00:12:40,454 --> 00:12:44,154
once you start having
multiple levels of nesting,

279
00:12:44,154 --> 00:12:48,500
I really prefer using something like <i>ii</i>,
rather than <i>j</i> and <i>k</i>,

280
00:12:48,500 --> 00:12:51,250
because you can then very quickly see

281
00:12:51,250 --> 00:12:54,700
at which level you are,
so this <i>ii</i>, with two <i>iis</i>,

282
00:12:54,700 --> 00:12:57,750
will tell me I'm in the second level

283
00:12:57,750 --> 00:13:00,550
of hierarchy, and I quite like that.

284
00:13:00,550 --> 00:13:04,497
Okay, so I'm gonna set <i>var ii = 0</i>,

285
00:13:04,497 --> 00:13:08,300
and then I want to go
through all the sequences, right,

286
00:13:08,300 --> 00:13:10,998
so I'm simply gonna say <i>sequences</i>,

287
00:13:10,998 --> 00:13:12,450
that's the name of our array

288
00:13:12,450 --> 00:13:14,950
that contains all the sequences, length,

289
00:13:14,950 --> 00:13:17,832
okay, so <i>ii &lt; sequences.length</i>,

290
00:13:17,832 --> 00:13:21,700
and then <i>ii = ii + 1</i>.

291
00:13:21,700 --> 00:13:24,550
So, pretty straightforward,
the exact same thing,

292
00:13:24,550 --> 00:13:28,249
except we now use another variable,
mainly <i>ii</i> here.

293
00:13:28,750 --> 00:13:30,600
Okay, so in this iteration,

294
00:13:30,600 --> 00:13:33,747
we're effectively going
through each sequence, right,

295
00:13:33,747 --> 00:13:35,750
so each sequence.

296
00:13:37,603 --> 00:13:39,900
All right, so now, in here,

297
00:13:39,900 --> 00:13:42,450
we're now at a particular sequence.

298
00:13:42,450 --> 00:13:44,300
So now this sequence,

299
00:13:44,300 --> 00:13:48,100
we would like to go
through each of the base pairs.

300
00:13:48,100 --> 00:13:50,499
So, again, absolutely same logic.

301
00:13:50,499 --> 00:13:51,650
We're gonna set up a loop

302
00:13:51,650 --> 00:13:55,749
that goes through each of the bases,

303
00:13:56,903 --> 00:14:01,750
not base pairs, in each of the bases
in this sequence so, again, a loop.

304
00:14:01,750 --> 00:14:04,750
Now this loop happens to be within a loop,

305
00:14:04,750 --> 00:14:07,000
which happens to be within a loop,

306
00:14:07,000 --> 00:14:09,150
but, if you follow the logic,

307
00:14:09,150 --> 00:14:11,450
it's actually very, very straightforward.

308
00:14:11,450 --> 00:14:15,497
So, here I'm gonna use <i>var iii</i>,

309
00:14:15,497 --> 00:14:17,497
and, again, I'm using this

310
00:14:17,497 --> 00:14:20,297
because now I can just easily follow,

311
00:14:20,297 --> 00:14:22,147
you know, this is the third level,

312
00:14:22,147 --> 00:14:25,254
second level, first level variable.

313
00:14:25,254 --> 00:14:28,296
Okay, I'm gonna initialize this <i>0</i>,

314
00:14:28,296 --> 00:14:30,004
and, here, I'm gonna say

315
00:14:30,004 --> 00:14:31,503
the condition has to be

316
00:14:31,503 --> 00:14:35,251
<i>iii &lt;</i>

317
00:14:36,353 --> 00:14:38,500
well, what am I doing here?

318
00:14:38,500 --> 00:14:41,345
I'm going through
each base in the sequence,

319
00:14:41,345 --> 00:14:43,300
so it, essentially, has to be

320
00:14:43,300 --> 00:14:45,354
I could use the sequence length

321
00:14:45,354 --> 00:14:48,745
'cause that's the length of the sequence,

322
00:14:49,745 --> 00:14:51,500
but I can also, basically, just say,

323
00:14:51,500 --> 00:14:54,500
well, give me the current
sequence that I'm in,

324
00:14:54,500 --> 00:14:57,004
and I'm gonna take the length of that,

325
00:14:57,004 --> 00:14:58,949
so what is the current
sequence that I'm in?

326
00:14:58,949 --> 00:15:02,945
Well, recall this is
our array of sequences.

327
00:15:03,545 --> 00:15:07,650
I am currently in the array element

328
00:15:07,650 --> 00:15:10,750
with <i>index ii</i>, okay,

329
00:15:10,750 --> 00:15:12,653
so this is the current,

330
00:15:12,653 --> 00:15:15,651
<i>the current</i> DNA sequence

331
00:15:16,101 --> 00:15:18,301
from within this loop here,

332
00:15:18,301 --> 00:15:21,899
and of that, I would like
to know how long it is,

333
00:15:21,899 --> 00:15:25,803
so <i>sequences ii length</i>,

334
00:15:25,803 --> 00:15:27,850
and, as I said, you could have,

335
00:15:27,850 --> 00:15:29,552
here in this particular code,

336
00:15:29,552 --> 00:15:32,745
you could simply have used

337
00:15:32,745 --> 00:15:34,749
this variable here,

338
00:15:35,850 --> 00:15:38,250
<i>sequence_length</i>,

339
00:15:38,250 --> 00:15:41,250
because we know that's gonna be
the length of each array,

340
00:15:41,250 --> 00:15:43,849
but, you know,
to get used to this notation,

341
00:15:43,849 --> 00:15:47,350
I'm using <i>sequences ii</i> here,

342
00:15:47,350 --> 00:15:48,653
and then, here of course,

343
00:15:48,653 --> 00:15:51,550
<i>iii = iii + 1</i>,

344
00:15:51,550 --> 00:15:53,250
exact same logic.

345
00:15:53,950 --> 00:15:56,700
Okay, now I'm in each base.

346
00:15:57,498 --> 00:15:59,750
I'm iterating over each base,

347
00:15:59,750 --> 00:16:01,750
so I hope you can see
how this works, right?

348
00:16:01,750 --> 00:16:05,395
First, the outermost loop

349
00:16:05,395 --> 00:16:08,602
is iterating over each generation,

350
00:16:08,602 --> 00:16:10,549
and then, within each generation,

351
00:16:10,549 --> 00:16:12,354
we're iterating over all the sequences,

352
00:16:12,354 --> 00:16:13,902
and, within each sequence,

353
00:16:13,902 --> 00:16:16,403
we're iterating overall the bases.

354
00:16:17,749 --> 00:16:21,249
So, what is the current base?

355
00:16:21,249 --> 00:16:23,500
How do we get access to the current base?

356
00:16:23,500 --> 00:16:26,895
Well, we know our current
sequence is this one.

357
00:16:26,895 --> 00:16:29,898
Okay, this is <i>sequences ii</i>.

358
00:16:29,898 --> 00:16:32,750
Is the current sequence of this loop here

359
00:16:32,750 --> 00:16:34,995
the one that goes
through all the sequences?

360
00:16:37,150 --> 00:16:40,150
Now, correspondingly, its base pair,

361
00:16:40,150 --> 00:16:41,850
that we're currently iterating,

362
00:16:41,850 --> 00:16:44,400
is simply now at this index,

363
00:16:48,000 --> 00:16:52,400
<i>iii</i>, so this, as you recall
from an earlier lecture,

364
00:16:52,400 --> 00:16:54,000
is how you access

365
00:16:54,000 --> 00:16:57,496
the elements of a two-dimensional array.

366
00:16:58,550 --> 00:17:00,250
Okay, first you need to say,

367
00:17:00,250 --> 00:17:03,050
well, what is the index
in the first dimension,

368
00:17:03,050 --> 00:17:05,553
and then the index
in the second dimension?

369
00:17:06,300 --> 00:17:10,500
So, this is now our current base

370
00:17:10,500 --> 00:17:13,250
that we're at
in this particular iteration,

371
00:17:13,250 --> 00:17:17,500
a current base of a given sequence.

372
00:17:18,200 --> 00:17:19,500
So, in this, we could now say,

373
00:17:19,500 --> 00:17:21,850
okay, I'm gonna override this
with a random base,

374
00:17:21,850 --> 00:17:24,153
and, thankfully, we have this handy

375
00:17:25,303 --> 00:17:29,245
random base function here
that we wrote earlier.

376
00:17:29,745 --> 00:17:31,300
Now, this is not quite correct here.

377
00:17:31,300 --> 00:17:32,850
Of course, what I would do now,

378
00:17:32,850 --> 00:17:34,501
if I just let this code run,

379
00:17:34,501 --> 00:17:36,400
is I would absolutely change

380
00:17:36,400 --> 00:17:40,200
each and every single base in each array,

381
00:17:40,200 --> 00:17:42,250
so in each DNA sequence.

382
00:17:42,250 --> 00:17:44,850
That's not what I want, of course.

383
00:17:44,850 --> 00:17:48,350
I only want to have this happen
with a certain rate,

384
00:17:48,350 --> 00:17:51,700
with a certain probability,
and that is the mutation rate.

385
00:17:51,700 --> 00:17:53,250
So, I'm gonna say,

386
00:17:53,950 --> 00:17:56,400
I'm gonna, you know,
make this a condition here.

387
00:17:56,400 --> 00:18:00,500
If something is true, then, you know,

388
00:18:00,500 --> 00:18:04,750
I'm gonna set this sequence as <i>iiiii</i>,

389
00:18:04,750 --> 00:18:07,846
so that's the current base pair,
<i>in</i> the current sequence,

390
00:18:07,846 --> 00:18:09,396
to a random base.

391
00:18:09,396 --> 00:18:11,100
So, what needs to be true?

392
00:18:11,100 --> 00:18:13,450
Well, simply, math random

393
00:18:13,450 --> 00:18:14,950
needs to be smaller

394
00:18:14,950 --> 00:18:17,700
than this mutation rate,

395
00:18:17,700 --> 00:18:20,404
so that's the same logic
that we applied before.

396
00:18:21,800 --> 00:18:25,600
In the drift chapter,
we simply have math random.

397
00:18:25,600 --> 00:18:27,850
If it's smaller than a certain value,

398
00:18:27,850 --> 00:18:29,200
between zero and one,

399
00:18:29,200 --> 00:18:31,690
then it's gonna happen at that rate.

400
00:18:31,700 --> 00:18:37,300
So, in here, it's smaller than .0001,

401
00:18:37,300 --> 00:18:41,800
so, with that very low probability,
this is gonna happen,

402
00:18:41,800 --> 00:18:44,500
and we're gonna pick a random base,

403
00:18:44,500 --> 00:18:46,800
and we're gonna just overwrite

404
00:18:46,800 --> 00:18:50,904
whatever we currently have
at this position in the array.

405
00:18:51,750 --> 00:18:54,800
Good, so this works.

406
00:18:54,800 --> 00:18:57,200
So, all we need to do now,
to verify this,

407
00:18:57,200 --> 00:18:58,900
is to print the sequences again

408
00:18:58,900 --> 00:19:00,900
after we ran all these generations,

409
00:19:00,900 --> 00:19:03,950
so let's copy this here, <i>print sequences</i>,

410
00:19:03,950 --> 00:19:06,700
and put it here again.

411
00:19:06,700 --> 00:19:08,550
So now, we're running the generations

412
00:19:08,550 --> 00:19:09,950
with the mutations,

413
00:19:09,950 --> 00:19:12,200
and then we're gonna print
the sequences again,

414
00:19:12,200 --> 00:19:13,950
and let's see what this looks like,

415
00:19:13,950 --> 00:19:17,046
so let's save this,
and go back to the browser.

416
00:19:17,750 --> 00:19:19,550
So, here in the browser,

417
00:19:19,550 --> 00:19:21,500
we're simply going to reload,

418
00:19:22,350 --> 00:19:25,200
and here's the result,
so you can see the beginning still.

419
00:19:25,200 --> 00:19:31,000
You have, of course, a population
of 100 identical DNA sequences,

420
00:19:31,000 --> 00:19:33,450
but then you get a lot of variation,

421
00:19:33,450 --> 00:19:35,050
and you can see here

422
00:19:35,050 --> 00:19:38,952
many, many different DNA sequences.

423
00:19:38,952 --> 00:19:41,301
Some occur multiple times,

424
00:19:41,301 --> 00:19:43,200
and you can see this by just, you know,

425
00:19:43,200 --> 00:19:46,650
looking at the little number here
next to the sequence.

426
00:19:46,650 --> 00:19:51,400
Some are unique that only occur
one time in this population,

427
00:19:51,400 --> 00:19:52,500
but you can see here,

428
00:19:52,500 --> 00:19:56,800
many, many different DNA sequences now,
after 100 generations.

429
00:19:56,800 --> 00:19:59,900
I'm gonna reload this again here,

430
00:19:59,900 --> 00:20:01,800
many, many different sequences.

431
00:20:01,800 --> 00:20:05,748
Some occur only once,
others occur many times,

432
00:20:06,248 --> 00:20:10,795
but the key take home message here,
I think, is quite obvious.

433
00:20:10,795 --> 00:20:13,903
You start with a population
that is completely unique,

434
00:20:13,903 --> 00:20:16,752
and then you add random mutations,

435
00:20:16,752 --> 00:20:19,503
and you do this at an extremely low rate.

436
00:20:20,500 --> 00:20:22,596
I mean, if we go back to the browser here,

437
00:20:22,596 --> 00:20:24,096
consider that we do this

438
00:20:24,096 --> 00:20:28,000
only with a probability
of, you know, one in ten,

439
00:20:28,000 --> 00:20:31,053
a hundred, a thousand,
ten thousand, right,

440
00:20:31,053 --> 00:20:35,645
so, with a probability
of one in ten thousand,

441
00:20:35,645 --> 00:20:38,747
so a rather rare event here.

442
00:20:38,747 --> 00:20:41,903
We are going to change this, you know,

443
00:20:41,903 --> 00:20:45,398
any given base pair per generation,

444
00:20:45,398 --> 00:20:47,899
and so that is a very rare event,

445
00:20:47,899 --> 00:20:51,896
but you do this, you know,
over enough generations,

446
00:20:51,896 --> 00:20:55,502
and then you do, actually,
get a substantial increase

447
00:20:55,502 --> 00:20:57,153
in diversity here.

448
00:20:57,653 --> 00:20:59,900
You could play with these numbers.

449
00:20:59,900 --> 00:21:04,750
If you would increase this number
to higher values,

450
00:21:04,750 --> 00:21:06,600
then you would get even more variation.

451
00:21:06,600 --> 00:21:09,400
If you would decrease it to lower values,

452
00:21:09,400 --> 00:21:11,500
you would get less variation,

453
00:21:12,250 --> 00:21:13,900
but that's not really the point.

454
00:21:13,900 --> 00:21:16,300
The point is that we now have
this implemented,

455
00:21:16,300 --> 00:21:19,250
and you can see,
even with very low mutation rates,

456
00:21:19,250 --> 00:21:22,250
you do get quite a bit of variation

457
00:21:22,250 --> 00:21:24,650
in your genetic population.

458
00:21:24,650 --> 00:21:29,195
Great, so we just finished
implementing mutations in JavaScript.

459
00:21:29,195 --> 00:21:30,195
In the next lecture,

460
00:21:30,195 --> 00:21:32,300
we're gonna clean up
the code a little bit,

461
00:21:32,300 --> 00:21:36,550
and we also made
a tiny, tiny mistake in our code.

462
00:21:36,550 --> 00:21:38,900
You may or may not have noticed this,

463
00:21:38,900 --> 00:21:42,150
but we'll fix that, as well,
in the next lecture,

464
00:21:42,150 --> 00:21:44,046
and, as we do this,

465
00:21:44,046 --> 00:21:47,247
we'll introduce a new idea in JavaScript,

466
00:21:47,247 --> 00:21:49,340
so I'll see you in the next lecture.
