1
00:00:03,310 --> 00:00:07,120
Welcome back, Nature, In Code,
we're in Chapter 4, lecture 6,

2
00:00:07,120 --> 00:00:08,180
and in this lecture.

3
00:00:08,180 --> 00:00:11,420
We'll look at the fate of a single 
mutant allele

4
00:00:11,420 --> 00:00:14,810
that just showed up in a population
and we're going to do this

5
00:00:14,810 --> 00:00:16,820
using Javascript.

6
00:00:16,820 --> 00:00:20,920
And we're gonna use the old model that 
we developed in Chapter 3,

7
00:00:20,920 --> 00:00:24,940
which had 2 alleles a1 and a2
and we would do note the frequency

8
00:00:24,940 --> 00:00:27,480
of the a1 allele as P.

9
00:00:27,480 --> 00:00:28,540
And if you recall,

10
00:00:28,540 --> 00:00:31,780
what we did back then
is we initialise at the population

11
00:00:31,780 --> 00:00:36,710
at P equals 0.5, so half of the illegals
were a1 half were a2

12
00:00:36,710 --> 00:00:40,420
and then we would see one of them
going to fixation eventually

13
00:00:40,420 --> 00:00:43,110
because that's the effect of genetic drift

14
00:00:43,150 --> 00:00:46,740
that you eventually lose
all genetic variation.

15
00:00:46,740 --> 00:00:49,360
Now we're asking a different question.

16
00:00:49,360 --> 00:00:53,680
We're assuming that all of the 
alleles are a2 and then one day,

17
00:00:53,680 --> 00:00:58,030
this a1 allele comes along through 
mutation and of course,

18
00:00:58,030 --> 00:01:02,220
now it starts down here right
because it exists in just a single copy

19
00:01:02,220 --> 00:01:03,570
and what's a frequency?

20
00:01:03,570 --> 00:01:07,290
Well there 2 N alleles
so the frequency is one over two,

21
00:01:07,290 --> 00:01:11,010
and so if you have a population
of 100 individuals for example

22
00:01:11,010 --> 00:01:17,560
the frequency will be 1 over 200
or 0.5

23
00:01:18,360 --> 00:01:21,640
and if your population is larger 
than the frequency

24
00:01:21,640 --> 00:01:23,130
is even gonna be lower.

25
00:01:23,530 --> 00:01:26,950
And so every single allele
in the beginning when it comes along

26
00:01:26,950 --> 00:01:29,000
as a mutation is going to be very,

27
00:01:29,000 --> 00:01:31,190
very rare and that's quite remarkable.

28
00:01:31,190 --> 00:01:32,330
If you think about it,

29
00:01:32,330 --> 00:01:34,580
I mean every allele that you see
in nature,

30
00:01:34,580 --> 00:01:38,960
had to be rare in the beginning,
you know, many came along

31
00:01:38,960 --> 00:01:45,730
as this single mutation and had to make 
its way through the population.

32
00:01:45,730 --> 00:01:49,650
There are different reasons
why this happens and it's important now

33
00:01:49,650 --> 00:01:52,540
for the time being to 
understand that we don't assume

34
00:01:52,840 --> 00:01:57,320
any selective advantage or disadvantage,
so, you know, bearing an allele

35
00:01:57,320 --> 00:02:02,220
as an individual in our current model
does not give you any advantage

36
00:02:02,220 --> 00:02:05,030
or any disadvantage,
it's effectively neutral

37
00:02:05,030 --> 00:02:10,780
and we call this selectively neutral,
so in Chapter 6 we're gonna take,

38
00:02:10,780 --> 00:02:15,220
you know, detailed look at what happens 
when this is not the case anymore

39
00:02:15,220 --> 00:02:17,240
and we have effects 
of natural selection.

40
00:02:17,240 --> 00:02:18,480
But at the moment,

41
00:02:18,480 --> 00:02:22,280
we're simply assuming that 
these alleles are neutral.

42
00:02:22,280 --> 00:02:27,790
So what is the probability of fixation 
of a neutral allele.

43
00:02:27,790 --> 00:02:30,280
Well, I'm gonna give you the answer
right now.

44
00:02:30,280 --> 00:02:35,030
But we're obviously gonna confirm this
with a Javascript simulation.

45
00:02:35,440 --> 00:02:38,750
So basically what can happen right this--

46
00:02:38,790 --> 00:02:41,740
That this first, you know, copy here,

47
00:02:41,740 --> 00:02:46,110
you can basically get lost 
immediately or it could,

48
00:02:46,110 --> 00:02:46,880
in principle,

49
00:02:46,880 --> 00:02:47,580
you know,

50
00:02:47,580 --> 00:02:48,920
stick around for some time,

51
00:02:48,920 --> 00:02:51,800
but then, you know, eventually
get lost from the population

52
00:02:51,800 --> 00:02:54,330
or of course anything in between,

53
00:02:54,330 --> 00:02:57,460
and in particular what can happen 
is that star is shifting around

54
00:02:57,460 --> 00:03:01,280
and eventually actually goes to fixation.

55
00:03:01,280 --> 00:03:04,470
So what is the probability 
of this happening?

56
00:03:04,470 --> 00:03:11,030
Now the answer is that the probability 
of fixation of a neutral allele

57
00:03:11,030 --> 00:03:15,960
is actually its frequency

58
00:03:17,920 --> 00:03:18,690
So.

59
00:03:18,980 --> 00:03:22,380
When a first allele comes along,
the first copy.

60
00:03:22,380 --> 00:03:28,070
We know its frequency is 1 over 2N
and that it turns out,

61
00:03:28,070 --> 00:03:32,490
is exactly the probability,
that this will go to fixation.

62
00:03:32,490 --> 00:03:35,190
This also makes intuitive sense

63
00:03:35,190 --> 00:03:38,660
if N is not too large,
then this frequency.

64
00:03:38,660 --> 00:03:40,750
It will be small but it will not be very,

65
00:03:40,750 --> 00:03:42,030
very small.

66
00:03:42,030 --> 00:03:45,990
So you know there is a bit of a chance
that this will go to fixation

67
00:03:45,990 --> 00:03:47,170
still very small,

68
00:03:47,170 --> 00:03:51,280
but it does exist as you start 
increasing the population size,

69
00:03:51,400 --> 00:03:54,430
this frequency will be smaller 
and smaller and smaller,

70
00:03:54,430 --> 00:03:58,580
and so it becomes more and more 
unlikely that this that this allele

71
00:03:58,580 --> 00:03:59,580
goes to a fixation.

72
00:03:59,580 --> 00:04:00,780
It can still happen,

73
00:04:00,780 --> 00:04:05,900
but the probability,
along with the frequency decreases

74
00:04:06,130 --> 00:04:09,090
quite substantially has N becomes larger.

75
00:04:09,750 --> 00:04:12,740
So now we would like to implement this
in Javascript

76
00:04:12,740 --> 00:04:17,790
and essentially confirm this equation,
this fact that the probability

77
00:04:17,790 --> 00:04:21,390
of fixation of a neutral allele 
is its frequency

78
00:04:21,390 --> 00:04:25,410
So I'm going to get started with this
empty document here.

79
00:04:25,410 --> 00:04:32,390
I'm in text wrangler and I'm going to
set up the HTML scaffold,

80
00:04:32,390 --> 00:04:38,180
so I'm going to say doc type, html
and then of course my HTML tag

81
00:04:40,380 --> 00:04:44,560
./html and my head.

82
00:04:47,630 --> 00:04:49,600
And my body.

83
00:04:51,740 --> 00:04:52,510
Alright.

84
00:04:53,610 --> 00:04:55,730
And here in my head tag.

85
00:04:55,730 --> 00:05:01,410
I will have my script tag
that will contain the Javascript code,

86
00:05:01,410 --> 00:05:08,130
so in the previous examples in Chapter 3,

87
00:05:08,130 --> 00:05:12,800
we had this function next generation 
so I'm gonna say here function

88
00:05:13,170 --> 00:05:14,040
next generation.

89
00:05:14,040 --> 00:05:17,280
I'd like to build this again,
next generation,

90
00:05:17,280 --> 00:05:21,520
actually let me save this file,
so I get the benefits

91
00:05:21,520 --> 00:05:26,950
of syntax highlighting,
I'm gonna go to save as,

92
00:05:26,950 --> 00:05:31,500
and then here in code examples,
that's where I store my files

93
00:05:32,080 --> 00:05:35,880
and I'm gonna call this fixation.

94
00:05:37,070 --> 00:05:43,520
underscore probability,
dot HTML, fixation probability.

95
00:05:44,750 --> 00:05:46,470
There we go.

96
00:05:48,300 --> 00:05:49,220
All right.

97
00:05:49,220 --> 00:05:52,020
Here's the syntax highlighting, 
looks much better.

98
00:05:52,020 --> 00:05:52,800
Good.

99
00:05:52,800 --> 00:05:56,270
So we're going to implement this 
and we used to say you know

100
00:05:56,270 --> 00:05:58,750
we have the number of draws.

101
00:05:58,750 --> 00:06:03,870
So the number of times we pick an allele
and that would be of course,

102
00:06:03,870 --> 00:06:11,110
two times N and it also meant
we had to define a variable called N

103
00:06:11,110 --> 00:06:15,270
that's a population size,
going to initialise this at 100 here

104
00:06:15,270 --> 00:06:17,760
and then we would say okay,

105
00:06:17,760 --> 00:06:19,960
we're gonna keep track of how often,

106
00:06:19,960 --> 00:06:26,210
and a one or a two gets drawn
and we do is by you know using these

107
00:06:26,300 --> 00:06:31,700
2 local variables a1 and a2,
then we initialise at zero

108
00:06:31,700 --> 00:06:37,350
and then we would set up this loop
so for var, our i equals zero,

109
00:06:37,350 --> 00:06:42,580
i smaller and draws
and equals i plus one.

110
00:06:45,740 --> 00:06:47,680
So here we would simply now.

111
00:06:48,410 --> 00:06:49,300
Flip a coin.

112
00:06:50,830 --> 00:06:54,130
So we would say if math random.

113
00:06:56,260 --> 00:06:57,110
is

114
00:06:57,800 --> 00:07:02,560
smaller or equal to P, the frequency 
of the a1 allele,

115
00:07:02,560 --> 00:07:05,690
then that would mean we would have drawn
one allele

116
00:07:05,690 --> 00:07:08,440
and so we're going to increase
this counter a1

117
00:07:09,040 --> 00:07:13,780
by one and if not the case.

118
00:07:13,780 --> 00:07:14,570
Or else.

119
00:07:15,480 --> 00:07:19,850
Then that means we have drawn
and a2 allele, so we're gonna increase

120
00:07:20,190 --> 00:07:26,460
the calendar of a2 by one
and then at the end.

121
00:07:26,460 --> 00:07:28,840
So here after we've done all this

122
00:07:28,840 --> 00:07:34,340
drawing, we could then you know calculate 
the new a1 frequency as

123
00:07:34,980 --> 00:07:39,250
simply the number of alleles
that we've drawn that were a1

124
00:07:39,690 --> 00:07:41,810
divided by the number of draws.

125
00:07:43,860 --> 00:07:44,590
Alright then,

126
00:07:44,590 --> 00:07:50,560
we would store this in this variable p
and of course we have to set up

127
00:07:50,560 --> 00:07:53,310
this variable as well,
it's a global variable

128
00:07:53,310 --> 00:07:58,070
and we used to start as a 0.5,
now we will change this.

129
00:07:58,070 --> 00:07:58,840
But,

130
00:07:58,840 --> 00:08:03,550
but this is essentially how 
we started last time.

131
00:08:03,550 --> 00:08:07,040
So what we did then
was to basically say okay,

132
00:08:07,040 --> 00:08:11,280
we're gonna run a set number
of simulations and something like 10

133
00:08:11,280 --> 00:08:15,750
and each simulation runs a certain 
number of generations

134
00:08:15,750 --> 00:08:17,390
and that was fixed,

135
00:08:17,390 --> 00:08:19,270
but now we want to do something else.

136
00:08:19,270 --> 00:08:21,780
We want to start with a very small p.

137
00:08:21,780 --> 00:08:25,540
And then we essentially want to run 
the simulation just as long

138
00:08:25,540 --> 00:08:30,300
as it's necessary and will stop
when either,

139
00:08:30,300 --> 00:08:34,770
the a1 or a2 allele go to fixation.

140
00:08:34,770 --> 00:08:39,330
So what we need to do now is we need 
to basically run this

141
00:08:39,330 --> 00:08:44,590
for a number of times, so I'm gonna call,
I'm gonna define here

142
00:08:44,590 --> 00:08:48,770
this variable simulations
and this can be quite large.

143
00:08:48,770 --> 00:08:50,930
I'm gonna set this to..

144
00:08:50,930 --> 00:08:54,340
Let's say 10,000
and we're not gonna plot this.

145
00:08:54,340 --> 00:08:55,130
so you know,

146
00:08:55,130 --> 00:08:58,570
we don't need to be worried
about plotting 10,000 lines

147
00:08:58,570 --> 00:09:01,160
but we're gonna run 10,000 simulations.

148
00:09:01,160 --> 00:09:04,030
Now you may think you know, 
that worries me a little bit,

149
00:09:04,030 --> 00:09:06,710
I mean this is not gonna take 
a whole lot of time?

150
00:09:06,710 --> 00:09:08,500
It could, in principle,

151
00:09:08,500 --> 00:09:12,260
but recall that we will not start 
the simulations at 0.5,

152
00:09:12,260 --> 00:09:15,470
we will actually start them at something 
very close to zero

153
00:09:15,470 --> 00:09:21,260
and most of the time the population
will go to fixation immediately,

154
00:09:21,260 --> 00:09:26,400
which is, the reason for that is that 
the a1 allele, that's very rare

155
00:09:26,400 --> 00:09:29,290
in the beginning will essentially 
get lost immediately,

156
00:09:29,290 --> 00:09:31,180
so many simulations will be very,

157
00:09:31,180 --> 00:09:35,510
very short as some will take
quite a bit of time, run for many, many

158
00:09:35,510 --> 00:09:36,270
generations.

159
00:09:36,270 --> 00:09:40,010
But by large on average 
they will be short,

160
00:09:40,010 --> 00:09:42,690
so it should be fine to run 10,000.

161
00:09:43,090 --> 00:09:43,940
Simulations.

162
00:09:45,040 --> 00:09:49,660
Now what I haven't done here yet 
is to actually run and can call

163
00:09:49,660 --> 00:09:50,870
this next generations.

164
00:09:50,870 --> 00:09:55,020
I have to implement the actual
simulations and I'm gonna do this

165
00:09:55,170 --> 00:10:01,870
down here and I'm gonna say for var i 
equals zero, i smaller than

166
00:10:02,330 --> 00:10:03,300
simulations.

167
00:10:03,300 --> 00:10:08,540
So that's the number of simulations here
and of course i equals i plus one.

168
00:10:10,150 --> 00:10:15,390
Now I would like to run this
next generation but I only

169
00:10:15,390 --> 00:10:20,970
want to do this until one of the alleles
goes to fixation.

170
00:10:20,970 --> 00:10:24,040
So what I'm actually gonna do 
is I'm-- I'm gonna here call

171
00:10:24,040 --> 00:10:27,640
a function that I'm gonna call run until.

172
00:10:28,200 --> 00:10:28,950
Fixation.

173
00:10:30,480 --> 00:10:32,230
And of course they have to define us.

174
00:10:32,230 --> 00:10:32,970
But,

175
00:10:32,970 --> 00:10:35,540
so now I know okay 10,000 times.

176
00:10:35,540 --> 00:10:39,180
I will call this function
that will start a simulation

177
00:10:39,180 --> 00:10:43,610
and we'll run it until one of the 
alleles to fixation.

178
00:10:43,610 --> 00:10:45,710
So what does this function look like,

179
00:10:45,710 --> 00:10:46,430
well,

180
00:10:46,430 --> 00:10:49,160
let's start defining it here function.

181
00:10:49,160 --> 00:10:52,840
run until fixation.

182
00:10:57,800 --> 00:11:00,070
So couple of things I have to do.

183
00:11:01,710 --> 00:11:02,590
So first,

184
00:11:02,590 --> 00:11:03,850
what I'd like to do this,

185
00:11:03,850 --> 00:11:07,160
I'd like to set at each simulation.

186
00:11:07,160 --> 00:11:11,520
I'd like to set this allele frequency 
of the a1 through the single

187
00:11:11,550 --> 00:11:17,530
allele right and that
as we've seen before is 1 over 2N

188
00:11:19,490 --> 00:11:23,070
And because-- because we're doing that 
we can really get rid of the--

189
00:11:23,800 --> 00:11:27,120
of the internationalization here 
so I'm gonna get rid of this

190
00:11:27,120 --> 00:11:30,350
because that gives the wrong impression 
that we're never actually

191
00:11:30,350 --> 00:11:34,400
going to start p at 0.5,
but we're gonna said it here,

192
00:11:34,400 --> 00:11:35,760
every simulation.

193
00:11:35,760 --> 00:11:40,170
This is gonna be set at the 
beginning to 1 over 2N,

194
00:11:40,170 --> 00:11:44,430
so now we need to do is we need 
to call this next generation

195
00:11:44,690 --> 00:11:45,410
function here

196
00:11:46,980 --> 00:11:48,160
back in the olden days.

197
00:11:48,160 --> 00:11:51,710
This was straightforward or right,
we defined certain number

198
00:11:51,710 --> 00:11:53,240
of generations and then we said,

199
00:11:53,240 --> 00:11:53,940
you know,

200
00:11:53,940 --> 00:11:56,790
we said we implemented a for loop
and we said you know just call this

201
00:11:56,790 --> 00:12:00,710
next generation function as many times 
as we have generations.

202
00:12:00,710 --> 00:12:05,650
Now, unfortunately we don't know
how many generations we need to run.

203
00:12:05,660 --> 00:12:11,066
We just want to stop the simulation 
when P reaches either zero or one.

204
00:12:11,066 --> 00:12:13,350
So when one of the alleles
has gone to fixation.

205
00:12:13,350 --> 00:12:14,640
So how can we do this?

206
00:12:14,640 --> 00:12:15,640
Well, it turns out.

207
00:12:15,870 --> 00:12:18,930
Our friend, the do while loop,

208
00:12:18,930 --> 00:12:22,280
which we recently learned about comes 
in really handy here

209
00:12:22,280 --> 00:12:29,160
because we can say do, so do what?
well call this next generation function

210
00:12:29,860 --> 00:12:31,090
in next generation

211
00:12:32,690 --> 00:12:35,490
while a certain condition is true.

212
00:12:35,490 --> 00:12:41,460
Now, what is this condition?
So this condition is the following:

213
00:12:41,460 --> 00:12:47,350
P needs to be larger than zero
and it needs also to be

214
00:12:47,350 --> 00:12:49,660
smaller than one.

215
00:12:49,660 --> 00:12:50,430
So first,

216
00:12:50,430 --> 00:12:52,270
let's look at the syntax here,

217
00:12:52,270 --> 00:12:57,190
this is the so-called logical AND operator
sometimes when you have a condition

218
00:12:57,190 --> 00:13:02,060
either here in the while 
or an IF you want multiple

219
00:13:02,210 --> 00:13:04,010
conditions have to be true.

220
00:13:04,010 --> 00:13:06,120
This is when you use this AND operator.

221
00:13:06,120 --> 00:13:06,820
So this

222
00:13:06,820 --> 00:13:09,310
says while this is true,

223
00:13:09,310 --> 00:13:12,010
and this is true.

224
00:13:12,010 --> 00:13:15,320
Sometimes you want
at least one to be true.

225
00:13:15,320 --> 00:13:18,530
So then you can use the OR,
logical OR operator

226
00:13:18,530 --> 00:13:20,390
and here's how you would write this,

227
00:13:20,390 --> 00:13:22,330
so the 2 pipes here,

228
00:13:22,330 --> 00:13:26,180
this is the logical OR
so is if one of those,

229
00:13:26,180 --> 00:13:27,780
at least one of those is true,

230
00:13:27,780 --> 00:13:33,000
then this whole expression will be true
but the AND is a bit restrictive

231
00:13:33,000 --> 00:13:36,870
in the sense that 
for this entire expression to be true,

232
00:13:36,870 --> 00:13:40,760
both and this need to be true.

233
00:13:40,760 --> 00:13:44,060
So that's the logical AND operator,

234
00:13:44,060 --> 00:13:46,020
now why do we write it like this.

235
00:13:46,020 --> 00:13:47,110
Well, essentially,

236
00:13:47,110 --> 00:13:48,200
we want to continue.

237
00:13:48,240 --> 00:13:54,890
Calling this next generation function 
as long as P is not zero and not one.

238
00:13:54,890 --> 00:13:59,550
So as long as it's somewhere in between 
those 2 values because if it is--

239
00:13:59,550 --> 00:14:03,570
if it is either zero or one
that means, well, at least A1 allele

240
00:14:03,570 --> 00:14:09,410
has either been lost and the a2
has gone to fixation or the a1

241
00:14:09,410 --> 00:14:12,740
has gone to fixation
and the a2 has been lost.

242
00:14:12,740 --> 00:14:16,260
So we want to make sure,
we keep on calling this function

243
00:14:16,260 --> 00:14:19,610
while are these 2 conditions are true,

244
00:14:19,890 --> 00:14:22,930
Another way to think about this 
is to you know ask--

245
00:14:22,930 --> 00:14:27,570
ask what happens if P is actually zero,
which will happen very, very often

246
00:14:27,680 --> 00:14:30,770
right P will go to zero
because we started the very low values

247
00:14:31,080 --> 00:14:33,140
so P will often go to zero.

248
00:14:33,140 --> 00:14:34,230
Well, in this case,

249
00:14:34,380 --> 00:14:36,570
this is not true anymore.

250
00:14:36,570 --> 00:14:38,470
This is still true.

251
00:14:38,470 --> 00:14:41,000
But this is not true anymore.

252
00:14:41,000 --> 00:14:42,540
And so this entire expression

253
00:14:42,540 --> 00:14:43,660
will not be true.

254
00:14:43,660 --> 00:14:47,860
And so we will stop what happens 
in those rare instances

255
00:14:47,860 --> 00:14:52,510
when P will actually reach eventually one
and indeed the a1 mutant allele

256
00:14:52,510 --> 00:14:57,090
will have gone to fixation,
well in this case because P equals one,

257
00:14:57,090 --> 00:14:58,880
it will still be larger than zero,

258
00:14:58,880 --> 00:15:03,280
so this will still be true,
but now this will not be true.

259
00:15:03,280 --> 00:15:06,490
And so you know this entire expression 
will not be true anymore

260
00:15:06,780 --> 00:15:11,880
and will stop so this condition here 
covers both those situations

261
00:15:11,880 --> 00:15:12,980
So that's great,

262
00:15:12,980 --> 00:15:13,940
we can use this.

263
00:15:15,150 --> 00:15:19,340
So now what's left to do
is we essentially to keep track

264
00:15:19,340 --> 00:15:23,830
of how often nope he does indeed
go to one,

265
00:15:23,830 --> 00:15:28,760
so we can say IF, now P has indeed
gone to one.

266
00:15:28,760 --> 00:15:32,690
That's the interesting case 
right the p having gone to zero

267
00:15:32,690 --> 00:15:35,780
is not interesting for us, we wanna know 
how often this happens,

268
00:15:35,780 --> 00:15:39,030
how often the a1 mutant allele
goes to fixation.

269
00:15:39,030 --> 00:15:43,510
So now we want to keep track
of this event that it has happened.

270
00:15:43,510 --> 00:15:47,160
so, we need to set up some kind
of variable to keep track of this,

271
00:15:47,160 --> 00:15:50,110
I'm gonna do it is up here,
I'm going define a global variable

272
00:15:50,110 --> 00:15:53,790
and I'm gonna call this fixations
of mutant.

273
00:15:53,920 --> 00:15:58,830
fixations-- fixations of mutants.

274
00:15:59,350 --> 00:16:00,130
Okay.

275
00:16:00,130 --> 00:16:04,880
Of course, I'm going to initialise this
at zero, so that I can increase this

276
00:16:05,160 --> 00:16:10,270
variable by one, down here
every time P has actually

277
00:16:10,270 --> 00:16:15,880
really reached one and so now
this variable here keeps track

278
00:16:15,880 --> 00:16:20,090
of the number of times that a1
would have gone to fixation.

279
00:16:20,090 --> 00:16:20,890
So now,

280
00:16:20,890 --> 00:16:26,050
all that's left to do is basically 
just to output this-- this number.

281
00:16:26,380 --> 00:16:32,010
So I'm gonna simply output this fixations
of mutant divided by

282
00:16:32,010 --> 00:16:36,590
the number of simulations of a running 
and that gives us the fraction

283
00:16:36,590 --> 00:16:37,620
of simulations.

284
00:16:37,920 --> 00:16:39,030
Or in other words,

285
00:16:39,030 --> 00:16:45,620
The probability that the people--
people-- a1 has really gone

286
00:16:45,670 --> 00:16:49,030
to fixation and that's of course 
exactly what we're looking for.

287
00:16:49,030 --> 00:16:51,380
So let's save this.

288
00:16:51,380 --> 00:16:57,400
And let's go back or rather,
over to the browser and open this file.

289
00:16:57,510 --> 00:17:03,230
So, open file and here is my fixation 
probability HTML file,

290
00:17:03,230 --> 00:17:05,730
I'm going to open this,
I'm not seeing anything here,

291
00:17:05,730 --> 00:17:08,890
which is expected because I'm simply 
outputting into the console

292
00:17:09,580 --> 00:17:13,960
so let's open the Javascript console 
and here we can see this value

293
00:17:13,960 --> 00:17:19,970
is indeed extremely close to 0.005,
which was the expected result.

294
00:17:20,020 --> 00:17:25,310
So if you reload this, you'll see 
this is always hovering a bit

295
00:17:25,490 --> 00:17:28,720
around this value and sometimes
it's very close and sometimes

296
00:17:28,720 --> 00:17:33,170
it's actually exactly reaching this value.

297
00:17:33,170 --> 00:17:37,870
But it turns out that our observation 
by a large is indeed

298
00:17:38,240 --> 00:17:39,260
correct.

299
00:17:39,260 --> 00:17:44,760
Now we can go back to the code and 
we can now play a little bit

300
00:17:44,800 --> 00:17:49,590
with this code and see if--
if what we're doing here is truly

301
00:17:49,630 --> 00:17:50,420
indeed correct.

302
00:17:50,420 --> 00:17:51,190
So for example,

303
00:17:51,190 --> 00:17:54,920
at the moment we're initialising
this P at 1 over 2N.

304
00:17:54,920 --> 00:17:57,930
This is the correct way to do this,
if we want to say okay,

305
00:17:57,930 --> 00:18:02,780
we're gonna start a single mutation 
but this observation that the probability

306
00:18:02,780 --> 00:18:07,020
of fixation of a neutral allele
is its frequency is always true

307
00:18:07,020 --> 00:18:08,680
not only at the beginning.

308
00:18:08,680 --> 00:18:09,410
So for example,

309
00:18:09,410 --> 00:18:13,510
we could initialise this p-value here
at 0.1.

310
00:18:13,510 --> 00:18:18,700
So this would simply mean that
every simulation starts at P equals 10%,

311
00:18:18,700 --> 00:18:21,160
10% of the alleles are a1.

312
00:18:21,160 --> 00:18:22,690
So now what is the probability

313
00:18:22,690 --> 00:18:26,950
Now that the A1 allele will go to 
fixation starting from here.

314
00:18:26,980 --> 00:18:31,060
Well, if our theory is correct 
then it should be 10%.

315
00:18:31,060 --> 00:18:35,850
So let's save this, go back to the browser
and reload this and see if we get

316
00:18:35,850 --> 00:18:38,070
the number here 
that's very close to 0.1.

317
00:18:39,850 --> 00:18:40,910
Yep.

318
00:18:41,000 --> 00:18:44,850
I think you could say this is very 
close to 0.1, let me reload this.

319
00:18:46,310 --> 00:18:51,390
All these numbers here that are now 
showing up her very very close to 0.1.

320
00:18:51,400 --> 00:18:54,340
So indeed this checks out once again.

321
00:18:54,340 --> 00:18:55,400
As you may notice.

322
00:18:55,400 --> 00:18:57,390
This is now gonna take a little longer.

323
00:18:57,390 --> 00:18:59,020
Why does it take a little longer?

324
00:18:59,020 --> 00:19:01,780
Well it's because we're initialising
P at 0.1,

325
00:19:01,780 --> 00:19:06,580
so still the vast majority
of the simulations will actually

326
00:19:06,580 --> 00:19:11,290
end up in P equaling 0, right.

327
00:19:11,300 --> 00:19:12,170
But now,

328
00:19:12,170 --> 00:19:16,180
this takes much longer on average 
before we just had one copy

329
00:19:16,180 --> 00:19:18,500
this copy was quickly lost.

330
00:19:18,500 --> 00:19:22,830
Now we have 10% of alleles
being a1 in the beginning,

331
00:19:22,830 --> 00:19:25,910
and so it's gonna take some time 
for those simulations

332
00:19:26,150 --> 00:19:27,700
to go to zero.

333
00:19:27,700 --> 00:19:29,460
So that's why it takes a little longer

334
00:19:29,460 --> 00:19:32,460
So, a final sanity check, let's go back
to the code,

335
00:19:32,460 --> 00:19:34,610
let's initialise this as at 0.2,

336
00:19:34,610 --> 00:19:38,800
save this, now let's reload this here
in the browser,

337
00:19:38,800 --> 00:19:42,150
again we should now see a value 
very close to 0.2,

338
00:19:42,150 --> 00:19:42,930
and once again,

339
00:19:42,930 --> 00:19:45,180
now we should take even
a little longer, yep.

340
00:19:45,180 --> 00:19:49,210
Very close to 0.2, it should take 
even longer because now we're starting

341
00:19:49,210 --> 00:19:54,500
at 20% and it will take even longer
for those simulations

342
00:19:54,530 --> 00:19:58,610
for most of the simulations 
to go to P equals zero.

343
00:19:58,610 --> 00:19:59,350
Okay.

344
00:19:59,350 --> 00:20:01,740
But it turns out to be correct here.

345
00:20:01,740 --> 00:20:04,790
P is a very close to 0.2.

346
00:20:04,790 --> 00:20:07,980
So we have confirmed
using Javascript simulations now.

347
00:20:07,980 --> 00:20:12,260
The observation that we started with,
which is that the fixation probability

348
00:20:12,280 --> 00:20:15,050
of neutral allele is its frequency.

349
00:20:15,050 --> 00:20:15,770
Okay.

350
00:20:15,770 --> 00:20:19,070
So now we've established
that the fixation probability

351
00:20:19,070 --> 00:20:23,730
of neutral allele is its frequency 
and if indeed it shows up

352
00:20:23,730 --> 00:20:25,890
as a single copy in the population,

353
00:20:25,890 --> 00:20:28,840
then the probability of fixation
is 1 over 2N,

354
00:20:28,840 --> 00:20:31,060
and so now that we know this,

355
00:20:31,060 --> 00:20:33,830
we can go to the second question,
which is,

356
00:20:33,830 --> 00:20:37,970
if it indeed happens that
the single copy will go to fixation,

357
00:20:37,970 --> 00:20:39,610
what's the expected time here?

358
00:20:39,610 --> 00:20:43,270
How long is this gonna take?
This is a question will tackle

359
00:20:43,270 --> 00:20:45,270
in the next lecture,
I'll see you there.
