Welcome back, Nature, In Code, we're in Chapter 4, lecture 6, and in this lecture.
We'll look at the fate of a single mutant allele that just showed up in a population and we're going to do this using Javascript.
And we're gonna use the old model that we developed in Chapter 3, which had 2 alleles a1 and a2 and we would do note the frequency of the a1 allele as P.
And if you recall, what we did back then is we initialise at the population at P equals 0.5, so half of the illegals were a1 half were a2 and then we would see one of them going to fixation eventually because that's the effect of genetic drift that you eventually lose all genetic variation.
Now we're asking a different question.
We're assuming that all of the alleles are a2 and then one day, this a1 allele comes along through mutation and of course, now it starts down here right because it exists in just a single copy and what's a frequency?
Well there 2 N alleles so the frequency is one over two, and so if you have a population of 100 individuals for example the frequency will be 1 over 200 or 0.5 and if your population is larger than the frequency is even gonna be lower.
And so every single allele in the beginning when it comes along as a mutation is going to be very, very rare and that's quite remarkable.
If you think about it,
I mean every allele that you see in nature, had to be rare in the beginning, you know, many came along as this single mutation and had to make its way through the population.
There are different reasons why this happens and it's important now for the time being to understand that we don't assume any selective advantage or disadvantage, so, you know, bearing an allele as an individual in our current model does not give you any advantage or any disadvantage, it's effectively neutral and we call this selectively neutral, so in Chapter 6 we're gonna take, you know, detailed look at what happens when this is not the case anymore and we have effects of natural selection.
But at the moment, we're simply assuming that these alleles are neutral.
So what is the probability of fixation of a neutral allele.
Well, I'm gonna give you the answer right now.
But we're obviously gonna confirm this with a Javascript simulation.
So basically what can happen right this--
That this first, you know, copy here, you can basically get lost immediately or it could, in principle, you know, stick around for some time, but then, you know, eventually get lost from the population or of course anything in between, and in particular what can happen is that star is shifting around and eventually actually goes to fixation.
So what is the probability of this happening?
Now the answer is that the probability of fixation of a neutral allele is actually its frequency
So.
When a first allele comes along, the first copy.
We know its frequency is 1 over 2N and that it turns out, is exactly the probability, that this will go to fixation.
This also makes intuitive sense if N is not too large, then this frequency.
It will be small but it will not be very, very small.
So you know there is a bit of a chance that this will go to fixation still very small, but it does exist as you start increasing the population size, this frequency will be smaller and smaller and smaller, and so it becomes more and more unlikely that this that this allele goes to a fixation.
It can still happen, but the probability, along with the frequency decreases quite substantially has N becomes larger.
So now we would like to implement this in Javascript and essentially confirm this equation, this fact that the probability of fixation of a neutral allele is its frequency
So I'm going to get started with this empty document here.
I'm in text wrangler and I'm going to set up the HTML scaffold, so I'm going to say doc type, html and then of course my HTML tag
./html and my head.
And my body.
Alright.
And here in my head tag.
I will have my script tag that will contain the Javascript code, so in the previous examples in Chapter 3, we had this function next generation so I'm gonna say here function next generation.
I'd like to build this again, next generation, actually let me save this file, so I get the benefits of syntax highlighting,
I'm gonna go to save as, and then here in code examples, that's where I store my files and I'm gonna call this fixation. underscore probability, dot HTML, fixation probability.
There we go.
All right.
Here's the syntax highlighting, looks much better.
Good.
So we're going to implement this and we used to say you know we have the number of draws.
So the number of times we pick an allele and that would be of course, two times N and it also meant we had to define a variable called N that's a population size, going to initialise this at 100 here and then we would say okay, we're gonna keep track of how often, and a one or a two gets drawn and we do is by you know using these
2 local variables a1 and a2, then we initialise at zero and then we would set up this loop so for var, our i equals zero, i smaller and draws and equals i plus one.
So here we would simply now.
Flip a coin.
So we would say if math random. is smaller or equal to P, the frequency of the a1 allele, then that would mean we would have drawn one allele and so we're going to increase this counter a1 by one and if not the case.
Or else.
Then that means we have drawn and a2 allele, so we're gonna increase the calendar of a2 by one and then at the end.
So here after we've done all this drawing, we could then you know calculate the new a1 frequency as simply the number of alleles that we've drawn that were a1 divided by the number of draws.
Alright then, we would store this in this variable p and of course we have to set up this variable as well, it's a global variable and we used to start as a 0.5, now we will change this.
But, but this is essentially how we started last time.
So what we did then was to basically say okay, we're gonna run a set number of simulations and something like 10 and each simulation runs a certain number of generations and that was fixed, but now we want to do something else.
We want to start with a very small p.
And then we essentially want to run the simulation just as long as it's necessary and will stop when either, the a1 or a2 allele go to fixation.
So what we need to do now is we need to basically run this for a number of times, so I'm gonna call,
I'm gonna define here this variable simulations and this can be quite large.
I'm gonna set this to..
Let's say 10,000 and we're not gonna plot this. so you know, we don't need to be worried about plotting 10,000 lines but we're gonna run 10,000 simulations.
Now you may think you know, that worries me a little bit,
I mean this is not gonna take a whole lot of time?
It could, in principle, but recall that we will not start the simulations at 0.5, we will actually start them at something very close to zero and most of the time the population will go to fixation immediately, which is, the reason for that is that the a1 allele, that's very rare in the beginning will essentially get lost immediately, so many simulations will be very, very short as some will take quite a bit of time, run for many, many generations.
But by large on average they will be short, so it should be fine to run 10,000.
Simulations.
Now what I haven't done here yet is to actually run and can call this next generations.
I have to implement the actual simulations and I'm gonna do this down here and I'm gonna say for var i equals zero, i smaller than simulations.
So that's the number of simulations here and of course i equals i plus one.
Now I would like to run this next generation but I only want to do this until one of the alleles goes to fixation.
So what I'm actually gonna do is I'm-- I'm gonna here call a function that I'm gonna call run until.
Fixation.
And of course they have to define us.
But, so now I know okay 10,000 times.
I will call this function that will start a simulation and we'll run it until one of the alleles to fixation.
So what does this function look like, well, let's start defining it here function. run until fixation.
So couple of things I have to do.
So first, what I'd like to do this,
I'd like to set at each simulation.
I'd like to set this allele frequency of the a1 through the single allele right and that as we've seen before is 1 over 2N
And because-- because we're doing that we can really get rid of the-- of the internationalization here so I'm gonna get rid of this because that gives the wrong impression that we're never actually going to start p at 0.5, but we're gonna said it here, every simulation.
This is gonna be set at the beginning to 1 over 2N, so now we need to do is we need to call this next generation function here back in the olden days.
This was straightforward or right, we defined certain number of generations and then we said, you know, we said we implemented a for loop and we said you know just call this next generation function as many times as we have generations.
Now, unfortunately we don't know how many generations we need to run.
We just want to stop the simulation when P reaches either zero or one.
So when one of the alleles has gone to fixation.
So how can we do this?
Well, it turns out.
Our friend, the do while loop, which we recently learned about comes in really handy here because we can say do, so do what? well call this next generation function in next generation while a certain condition is true.
Now, what is this condition?
So this condition is the following:
P needs to be larger than zero and it needs also to be smaller than one.
So first, let's look at the syntax here, this is the so-called logical AND operator sometimes when you have a condition either here in the while or an IF you want multiple conditions have to be true.
This is when you use this AND operator.
So this says while this is true, and this is true.
Sometimes you want at least one to be true.
So then you can use the OR, logical OR operator and here's how you would write this, so the 2 pipes here, this is the logical OR so is if one of those, at least one of those is true, then this whole expression will be true but the AND is a bit restrictive in the sense that for this entire expression to be true, both and this need to be true.
So that's the logical AND operator, now why do we write it like this.
Well, essentially, we want to continue.
Calling this next generation function as long as P is not zero and not one.
So as long as it's somewhere in between those 2 values because if it is-- if it is either zero or one that means, well, at least A1 allele has either been lost and the a2 has gone to fixation or the a1 has gone to fixation and the a2 has been lost.
So we want to make sure, we keep on calling this function while are these 2 conditions are true,
Another way to think about this is to you know ask-- ask what happens if P is actually zero, which will happen very, very often right P will go to zero because we started the very low values so P will often go to zero.
Well, in this case, this is not true anymore.
This is still true.
But this is not true anymore.
And so this entire expression will not be true.
And so we will stop what happens in those rare instances when P will actually reach eventually one and indeed the a1 mutant allele will have gone to fixation, well in this case because P equals one, it will still be larger than zero, so this will still be true, but now this will not be true.
And so you know this entire expression will not be true anymore and will stop so this condition here covers both those situations
So that's great, we can use this.
So now what's left to do is we essentially to keep track of how often nope he does indeed go to one, so we can say IF, now P has indeed gone to one.
That's the interesting case right the p having gone to zero is not interesting for us, we wanna know how often this happens, how often the a1 mutant allele goes to fixation.
So now we want to keep track of this event that it has happened. so, we need to set up some kind of variable to keep track of this,
I'm gonna do it is up here,
I'm going define a global variable and I'm gonna call this fixations of mutant. fixations-- fixations of mutants.
Okay.
Of course, I'm going to initialise this at zero, so that I can increase this variable by one, down here every time P has actually really reached one and so now this variable here keeps track of the number of times that a1 would have gone to fixation.
So now, all that's left to do is basically just to output this-- this number.
So I'm gonna simply output this fixations of mutant divided by the number of simulations of a running and that gives us the fraction of simulations.
Or in other words,
The probability that the people-- people-- a1 has really gone to fixation and that's of course exactly what we're looking for.
So let's save this.
And let's go back or rather, over to the browser and open this file.
So, open file and here is my fixation probability HTML file,
I'm going to open this,
I'm not seeing anything here, which is expected because I'm simply outputting into the console so let's open the Javascript console and here we can see this value is indeed extremely close to 0.005, which was the expected result.
So if you reload this, you'll see this is always hovering a bit around this value and sometimes it's very close and sometimes it's actually exactly reaching this value.
But it turns out that our observation by a large is indeed correct.
Now we can go back to the code and we can now play a little bit with this code and see if-- if what we're doing here is truly indeed correct.
So for example, at the moment we're initialising this P at 1 over 2N.
This is the correct way to do this, if we want to say okay, we're gonna start a single mutation but this observation that the probability of fixation of a neutral allele is its frequency is always true not only at the beginning.
So for example, we could initialise this p-value here at 0.1.
So this would simply mean that every simulation starts at P equals 10%,
10% of the alleles are a1.
So now what is the probability
Now that the A1 allele will go to fixation starting from here.
Well, if our theory is correct then it should be 10%.
So let's save this, go back to the browser and reload this and see if we get the number here that's very close to 0.1.
Yep.
I think you could say this is very close to 0.1, let me reload this.
All these numbers here that are now showing up her very very close to 0.1.
So indeed this checks out once again.
As you may notice.
This is now gonna take a little longer.
Why does it take a little longer?
Well it's because we're initialising
P at 0.1, so still the vast majority of the simulations will actually end up in P equaling 0, right.
But now, this takes much longer on average before we just had one copy this copy was quickly lost.
Now we have 10% of alleles being a1 in the beginning, and so it's gonna take some time for those simulations to go to zero.
So that's why it takes a little longer
So, a final sanity check, let's go back to the code, let's initialise this as at 0.2, save this, now let's reload this here in the browser, again we should now see a value very close to 0.2, and once again, now we should take even a little longer, yep.
Very close to 0.2, it should take even longer because now we're starting at 20% and it will take even longer for those simulations for most of the simulations to go to P equals zero.
Okay.
But it turns out to be correct here.
P is a very close to 0.2.
So we have confirmed using Javascript simulations now.
The observation that we started with, which is that the fixation probability of neutral allele is its frequency.
Okay.
So now we've established that the fixation probability of neutral allele is its frequency and if indeed it shows up as a single copy in the population, then the probability of fixation is 1 over 2N, and so now that we know this, we can go to the second question, which is, if it indeed happens that the single copy will go to fixation, what's the expected time here?
How long is this gonna take?
This is a question will tackle in the next lecture,
I'll see you there.
