1
00:00:02,530 --> 00:00:05,850
Bienvenue, <i> Nature, dans le code </ i>,
nous sommes dans le chapitre 4, leçon 2.

2
00:00:06,210 --> 00:00:10,600
Dans cette leçon, nous allons prendre notre
idée d'avoir plusieurs séquences d'ADN

3
00:00:10,600 --> 00:00:15,550
dans une population qui change
au fil du temps par mutation aléatoire.

4
00:00:15,820 --> 00:00:19,360
Et nous allons mettre en œuvre cela
en utilisant un tableau 3D.

5
00:00:19,360 --> 00:00:20,360
Allez.

6
00:00:20,360 --> 00:00:22,120
Alors, voici mon éditeur de texte.

7
00:00:22,120 --> 00:00:25,510
J'ai un nouveau fichier ici, il est vide,
et je vais commencer à partir de zéro

8
00:00:25,840 --> 00:00:28,680
en utilisant l'échafaudage normal
que je l'habitude d'utiliser.

9
00:00:28,730 --> 00:00:31,450
Donc, "& lt;! DOCTYPE html & gt;"

10
00:00:31,450 --> 00:00:33,960
et puis je vais créer
ma balise <i> & lt; html & gt; </ i>,

11
00:00:36,480 --> 00:00:40,340
et puis bien sûr mon <i> & lt; head & gt; </ i>
et mon <i> & lt; body & gt; </ i> comme il est normal,

12
00:00:40,340 --> 00:00:48,450
<I> & lt; / head & gt; </ i> dans un <i> html </ i>
échafaudage <i> & lt; body & gt; </ i> <i> & lt; / body & gt; </ i>

13
00:00:49,130 --> 00:00:53,270
et je vais mettre en retrait les un peu
pour rendre les choses un peu plus agréable,

14
00:00:54,030 --> 00:00:59,310
et ici dans mon <i> & lt; head & gt; </ i>
je vais configurer la balise <i> & lt; le script & gt; </ i>,

15
00:00:59,310 --> 00:01:03,000
qui contiendra notre code<i> JavaScript </ i>.

16
00:01:03,000 --> 00:01:05,930
Et maintenant, je vais enregistrer
tout de suite.

17
00:01:06,510 --> 00:01:07,570
<I> Enregistrer sous </ i> & gt;

18
00:01:07,850 --> 00:01:14,400
nous sommes ici dans les exemples <i> code </ i>.
Je vais appeler cette <i> sequences.html </ i>.

19
00:01:15,110 --> 00:01:16,390
Bien.

20
00:01:18,150 --> 00:01:20,150
Maintenant, comment peut-on faire cela?

21
00:01:20,150 --> 00:01:24,560
Comment peut-on aller de
l'idée que l'on a mis au point

22
00:01:24,560 --> 00:01:28,730
et vraiment mettre en œuvre ceci
maintenant comme code<i> JavaScript </ i>.

23
00:01:28,730 --> 00:01:33,040
Ceci est l'un des problèmes qui ont
spécifiquement les débutants,

24
00:01:33,120 --> 00:01:37,470
parce qu'ils ont cette idée
d'un programme qu'ils aimeraient développer,

25
00:01:37,470 --> 00:01:39,140
d'une idée dans leur tête.

26
00:01:39,140 --> 00:01:41,770
Mais maintenant, comment
font-ils commencer?

27
00:01:42,170 --> 00:01:46,260
Comment font-ils commencent à
mettre en œuvre ce dans <i> JavaScript </ i>

28
00:01:46,260 --> 00:01:50,370
sur cette toile vierge d'un juste
un curseur clignotant

29
00:01:50,370 --> 00:01:53,150
nous regarde et attend l'entrée.

30
00:01:53,150 --> 00:01:55,300
Donc, il y a beaucoup de façons
de le faire.

31
00:01:55,300 --> 00:01:58,750
Ce que je fais habituellement est,
je le fais tout à fait organiquement.

32
00:01:58,750 --> 00:02:02,280
Je commence tout simplement par
penser à ce qui est la première fonction

33
00:02:02,280 --> 00:02:05,810
que je vais finir par appeler,
et puis je vais aller à partir de là.

34
00:02:05,810 --> 00:02:09,240
Qu'est-ce que cette fonction doit faire,
ce que sa fonction devrait faire: A, B et C,

35
00:02:09,240 --> 00:02:14,410
donc je vais définir trois fonctions
qui prendront en charge, A, B et C,

36
00:02:14,410 --> 00:02:16,600
et puis, comme je mettre en œuvre A, B et C,

37
00:02:16,600 --> 00:02:21,140
Je vais chercher à travers de nouveaux
concepts que je dois mettre en œuvre.

38
00:02:21,470 --> 00:02:23,360
Voilà donc une façon de le faire.

39
00:02:23,360 --> 00:02:29,090
D'autres personnes aiment concevoir
tout sur un morceau de papier d'abord

40
00:02:29,090 --> 00:02:31,740
et alors essentiellement
une idée très claire

41
00:02:31,740 --> 00:02:34,550
de la façon dont cela va être mis en œuvre
avant de commencer à coder.

42
00:02:34,550 --> 00:02:36,640
Donc, c'est vraiment une sorte
de goût personnel.

43
00:02:36,640 --> 00:02:40,960
Je préfère l'approche organique,
et je vais le faire maintenant ici.

44
00:02:40,960 --> 00:02:44,270
Donc, vous ne pouvez me suivre
et voir comment on peut faire cela.

45
00:02:44,270 --> 00:02:47,810
Il y a toujours plusieurs façons
d'atteindre la même chose.

46
00:02:48,290 --> 00:02:52,280
Donc, dans mon esprit, l'une des premières
choses que je voudrais faire est,

47
00:02:52,280 --> 00:02:53,880
je veux en quelque sorte commencer

48
00:02:53,880 --> 00:02:56,690
avec la première génération
de cette population.

49
00:02:56,690 --> 00:02:59,060
C'est vraiment le point de départ.

50
00:02:59,060 --> 00:03:02,850
Je pense donc que je vais
commencer tout ce programme

51
00:03:02,850 --> 00:03:04,200
en appelant une fonction

52
00:03:04,200 --> 00:03:09,930
appelé <i> génération generate_first_ </ i>.

53
00:03:10,690 --> 00:03:12,490
Voilà vraiment ce que je dois faire.

54
00:03:12,490 --> 00:03:15,910
Je dois générer plusieurs séquences d'ADN,

55
00:03:15,910 --> 00:03:18,100
et je pense que ce que
je vais faire au début est

56
00:03:18,100 --> 00:03:20,690
que chacune de ces séquences
d'ADN est en fait identiques.

57
00:03:20,690 --> 00:03:24,280
Nous commençons donc
par zéro variation génétique,

58
00:03:24,280 --> 00:03:27,250
et puis nous allons à partir de là,
l'introduction d'une mutation au fil du temps.

59
00:03:27,260 --> 00:03:30,030
Mais je dois d'abord générer cette première génération.

60
00:03:30,030 --> 00:03:34,150
Donc maintenant j'appelle cette fonction.

61
00:03:34,150 --> 00:03:35,640
Mais il n'y a pas une telle fonction.

62
00:03:35,640 --> 00:03:39,870
Alors, ce qu'on a bien sûr besoin de faire
est qu'on doit définir cette fonction.

63
00:03:39,870 --> 00:03:45,320
Donc, ici, il est, avec un corps vide.
Qu'est-ce que cette fonction devrait faire?

64
00:03:46,610 --> 00:03:49,260
Eh bien, cette fonction
doit faire deux choses.

65
00:03:49,260 --> 00:03:52,290
Tout d'abord, elle doit générer
la première séquence.

66
00:03:52,600 --> 00:03:55,610
Nous avons besoin d'une sorte
d'une séquence d'origine,

67
00:03:55,610 --> 00:03:58,280
puis, une fois que nous avons la séquence,

68
00:03:58,280 --> 00:04:03,020
nous avons besoin de beaucoup, beaucoup
de copies de cette séquence particulière

69
00:04:03,020 --> 00:04:08,020
de créer notre première population
de la première génération.

70
00:04:08,340 --> 00:04:12,080
Doncd'abord je dois générer une séquence
d'origine, une première séquence.

71
00:04:12,260 --> 00:04:16,460
Encore une fois, je pense que je vais
probablement appeler une fonction

72
00:04:16,460 --> 00:04:19,710
appelé <i> generate_first_sequence </ i>.

73
00:04:21,740 --> 00:04:25,200
Et cette fonction devrait bien sûr,
comme il est dit dans le nom,

74
00:04:25,200 --> 00:04:26,800
générer la première séquence,

75
00:04:26,800 --> 00:04:29,950
donc je vais définir cette fonction
maintenant ici:

76
00:04:29,950 --> 00:04:32,110
<I> generate_first_sequence </ i>.

77
00:04:33,140 --> 00:04:34,850
Et maintenant je dois penser,

78
00:04:34,850 --> 00:04:38,980
comment puis-je générer la première
séquence de cette population.

79
00:04:38,980 --> 00:04:42,290
Donc, encore une fois, il y a plusieurs
façons de le faire,

80
00:04:42,290 --> 00:04:44,380
mais ce que je voudrais faire est.

81
00:04:44,380 --> 00:04:47,580
Eh bien, la première chose à penser,
la durée de la séquence

82
00:04:47,580 --> 00:04:50,440
puis aussi combien de temps que
la séquence doit être

83
00:04:50,440 --> 00:04:53,590
Je dois saisir au hasard

84
00:04:53,590 --> 00:04:57,330
à partir d'un ensemble de quatre base possibles:
<i> H </ i>, <i> G </ i>, <i> C </ i> et <i> T </ i>.

85
00:04:57,730 --> 00:05:02,340
Donc, encore une fois, je dois maintenant
définir la première séquence,

86
00:05:02,340 --> 00:05:04,120
mais combien de temps cela va être?

87
00:05:04,120 --> 00:05:07,740
Eh bien, cette information je devrais
probablement la stocker dans une variable.

88
00:05:07,740 --> 00:05:10,430
Donc, je vais mettre
en place cette variable,

89
00:05:10,440 --> 00:05:13,980
alors je vais appeler
<i> sequence_length </ i>.

90
00:05:14,470 --> 00:05:17,630
Et puis je vais mettre cela à <i> 20 </ i>,
qui est une courte séquence,

91
00:05:17,630 --> 00:05:21,960
mais dans le but de cet exemple
ici que devrait fonctionner correctement.

92
00:05:21,960 --> 00:05:24,330
Alors maintenant,
je peux mettre en place une boucle ici.

93
00:05:25,660 --> 00:05:29,660
pour <i> (var i = 0; </ i>

94
00:05:29,660 --> 00:05:33,320
et maintenant <i> i </ i> il sera plus
petit que <i> sequence_length </ i>,

95
00:05:33,320 --> 00:05:36,530
donc cette boucle va itérer 20 fois,

96
00:05:37,610 --> 00:05:40,550
et bien sûr, je dois vous assurer que
j'aumente le <i> i </ i> par <i> 1 </ i>,

97
00:05:40,550 --> 00:05:42,530
sinon obtenir une boucle infinie.

98
00:05:43,950 --> 00:05:45,350
Donc, 20 fois.

99
00:05:45,350 --> 00:05:48,460
Je voudrais maintenant saisir
une base aléatoire

100
00:05:48,460 --> 00:05:55,690
et pousser ce dans un tableau de base,
qui sera ma séquence originale.

101
00:05:56,200 --> 00:05:58,300
Donc, il y a deux choses ici qui manquent.

102
00:05:58,300 --> 00:06:00,420
Tout d'abord, où est ce tableau?

103
00:06:00,420 --> 00:06:04,060
Je ne l'ai pas encore défini il. Je veux
un tableau <i> original_sequence </ i>.

104
00:06:04,060 --> 00:06:08,170
Je vais donc mettre en place
un tableau <i> original_sequence </ i>ici

105
00:06:08,170 --> 00:06:15,670
en disant simplement
<i> original_sequence </ i> est un tableau vide.

106
00:06:15,890 --> 00:06:17,680
Alors maintenant, je dois ce tableau,

107
00:06:17,680 --> 00:06:20,110
où je vais stocker ma séquence d'origine,

108
00:06:20,110 --> 00:06:22,720
et ce que je dois faire.

109
00:06:22,720 --> 00:06:27,240
Désolé, <i> original_sequence </ i>
plutôt <i> original_sequence </ i> est,

110
00:06:27,240 --> 00:06:32,140
Je dois pousser au hasard dans ce tableau.

111
00:06:32,910 --> 00:06:39,400
Donc, toute base <i> A </ i> <i> G </ i> <i> C </ i>
ou <i> T </ i> en tant que chaîne. Maintenant, comment je vais faire cela?

112
00:06:40,680 --> 00:06:44,570
Encore une fois, cela se sent comme une fonctionnalité
qui peut être facilement externalisée,

113
00:06:44,570 --> 00:06:46,730
car pas quelque chose qui génère
la première séquence

114
00:06:46,730 --> 00:06:49,500
devrait être vraiment inquiet, alors
il est en effet également une fonctionnalité

115
00:06:49,500 --> 00:06:51,350
qui peuvent être utiles,

116
00:06:51,350 --> 00:06:52,710
au bas de la rue.

117
00:06:52,710 --> 00:06:57,700
Alors, oui, je pense que je vais juste
appeler la fonction ici <i> random_base </ i>,

118
00:06:58,320 --> 00:07:00,100
et cette fonction.

119
00:07:01,090 --> 00:07:04,580
Quelqu'un, et ça va être moi,
devrait finalement créer cette fonction,

120
00:07:04,580 --> 00:07:09,390
et il doit retourner une base aléatoire
<i> A </ i> <i> G </ i> <i> C </ i> ou <i> T </ i>,

121
00:07:09,390 --> 00:07:13,430
puis, si elle revient, je peux
le pousser dans la séquence d'origine

122
00:07:13,430 --> 00:07:17,160
et je le fais <i> sequence_length
</ i> de temps, donc 20 fois

123
00:07:17,160 --> 00:07:20,550
et donc à la fin, lorsque
cette fonction a terminé son exécution,

124
00:07:20,550 --> 00:07:22,370
J'ai mon <i> original_sequence </ i>,

125
00:07:22,370 --> 00:07:25,600
un réseau de 20 paires
de bases choisies au hasard.

126
00:07:26,210 --> 00:07:28,890
Donc, nous allons continuer et mettre en œuvre
cette fonction de base aléatoire.

127
00:07:30,670 --> 00:07:36,160
<I> fonction de base random_ () {} </ i>.

128
00:07:37,650 --> 00:07:39,640
Alors, que doit faire cette fonction?

129
00:07:39,640 --> 00:07:45,310
Cette fonction doit retourner une base aléatoire,
l'un des <i> A </ i> <i> G </ i> <i> C </ i> ou <i> T </ i>.

130
00:07:45,310 --> 00:07:46,620
Comment puis-je faire cela?

131
00:07:46,620 --> 00:07:48,830
Dans <i> JavaScript </ i>
toute sélection aléatoire

132
00:07:48,830 --> 00:07:51,420
doit en quelque sorte
commencer par <i> Math.random </ i>,

133
00:07:51,420 --> 00:07:55,080
parce que ce vraiment la seule
génération aléatoire que nous pouvons faire,

134
00:07:55,510 --> 00:07:57,760
et <i> Math.random </ i>, comme nous le savons,

135
00:07:57,760 --> 00:08:01,040
renvoie un nombre
à virgule flottante entre 0 et 1.

136
00:08:01,040 --> 00:08:07,470
Alors, comment allons-nous à
un choix aléatoire de quatre personnages?

137
00:08:08,280 --> 00:08:10,630
Une chose que nous pouvons
faire est, nous pouvons, tout d'abord,

138
00:08:10,630 --> 00:08:16,090
stocker temporairement
cette base dans un tableau ici.

139
00:08:17,120 --> 00:08:20,890
Donc, ce sera 'A', puis 'G',

140
00:08:22,890 --> 00:08:27,700
puis 'C' et enfin 'T',

141
00:08:27,700 --> 00:08:29,940
bien que l'ordre n'a pas d'importance.

142
00:08:32,050 --> 00:08:36,840
Maintenant, j'ai ce tableau et ainsi, comme
vous le savez, l'accès aux éléments dans le tableau

143
00:08:36,840 --> 00:08:42,790
est effectuée à l'aide
de l'indice, de sorte que 0, 1, 2 ou 3.

144
00:08:43,310 --> 00:08:48,200
Donc, maintenant ce que nous voulons
est un nombre entier aléatoire

145
00:08:48,200 --> 00:08:53,860
entre 0 et 3, y compris à la fois 0 et 3.

146
00:08:54,160 --> 00:08:58,870
Si je devais un tel générateur de nombres aléatoires,
alors je pourrais simplement utiliser le résultat

147
00:08:58,920 --> 00:09:00,780
pour choisir la base correspondante,

148
00:09:00,780 --> 00:09:04,040
et il y aurait vraiment
une fonction <i> random_base</ i>.

149
00:09:04,390 --> 00:09:07,510
Alors maintenant, nous avons
au moins transformé ce problème

150
00:09:07,510 --> 00:09:09,750
en un problème purement numérique.

151
00:09:09,750 --> 00:09:11,790
Alors, comment allons-nous faire cela?

152
00:09:12,080 --> 00:09:15,560
Comment allons-nous choisir
un indice aléatoire ici?

153
00:09:16,450 --> 00:09:19,890
Donc, comme je l'ai dit, tout doit
commencer par <i> Math.random () </ i>.

154
00:09:21,380 --> 00:09:23,910
Maintenant, encore une fois,
ce serait la mauvaise façon de le faire,

155
00:09:23,910 --> 00:09:25,260
parce que <i> Math.random () </ i>

156
00:09:25,260 --> 00:09:29,630
renvoie simplement un nombre
à virgule flottante entre 0 et 1.

157
00:09:29,630 --> 00:09:32,740
Donc, tout d'abord,
je dois élargir cette gamme,

158
00:09:32,740 --> 00:09:36,210
et je vais simplement le faire
en multipliant avec 4.

159
00:09:36,210 --> 00:09:41,170
Alors maintenant, cette expression nous donne ici
en fait un nombre à virgule flottante aléatoire

160
00:09:41,170 --> 00:09:43,680
se situe entre 15% et 20%.

161
00:09:44,410 --> 00:09:48,730
Je dois également mentionner
un détail important,

162
00:09:48,730 --> 00:09:52,430
que nous n'avons pas encore traité,
parce qu'il n'était pas vraiment pertinent,

163
00:09:52,430 --> 00:09:55,740
qui était que <i> Math.random () </ i>
ne retourne en effet un certain nombre

164
00:09:55,740 --> 00:10:01,190
entre 0 et 1, mais 1 est en fait pas inclus.

165
00:10:02,020 --> 00:10:06,380
Et donc cette gamme maintenant ici
passera de 0 à 4,

166
00:10:06,380 --> 00:10:08,040
mais 4 ne seront pas inclus.

167
00:10:08,040 --> 00:10:11,880
Le nombre maximal sera 3,9999999
et ainsi de suite,

168
00:10:13,080 --> 00:10:16,090
je peux donc utiliser ceci
pour dire juste: «Vous savez quoi?"

169
00:10:16,290 --> 00:10:18,260
Donnez-moi ce nombre à virgule flottante

170
00:10:18,260 --> 00:10:23,810
et arrondir à l'entier,
et la façon de le faire est,

171
00:10:23,810 --> 00:10:26,440
cette méthode pratique qui
<i> JavaScript </ i> fournit,

172
00:10:26,440 --> 00:10:28,990
qui est appelé <i> Math.floor </ i>.

173
00:10:28,990 --> 00:10:33,080
Donc, il arrondit un nombre
à virgule flottante à un nombre entier,

174
00:10:33,080 --> 00:10:34,700
et il fonctionne vers le bas,

175
00:10:34,700 --> 00:10:37,920
et je pense que cela devrait être évident
à partir du plancher nom <i> </ i>.

176
00:10:38,410 --> 00:10:44,840
Alors maintenant, chacun de ces nombres
d'entre 0 et 3,99999 et ainsi de suite

177
00:10:44,850 --> 00:10:50,860
sera arrondie à l'un des quatre
nombres possibles: 0, 1, 2 ou 3,

178
00:10:51,430 --> 00:10:53,700
et cela est exactement ce que nous voulons.

179
00:10:54,260 --> 00:11:00,970
Alors maintenant, je peux
simplement dire: «Bon, retourner cet élément

180
00:11:00,970 --> 00:11:03,310
dans le tableau de bases,
de sorte que <i> bases [index] </ i>, "

181
00:11:04,140 --> 00:11:08,930
<I> index </ i> étant ce nombre
généré de façon aléatoire: 0, 1, 2 ou 3,

182
00:11:08,930 --> 00:11:10,430
que nous venons de faire ici.

183
00:11:11,310 --> 00:11:12,740
Donc, cela fonctionne bien,

184
00:11:12,740 --> 00:11:15,940
et maintenant nous avons
un générateur aléatoire de base générique,

185
00:11:15,940 --> 00:11:18,970
qui sera utile en plusieurs fois.

186
00:11:18,970 --> 00:11:21,920
Nous allons donc pousser cette
<i> random_base </ i> ici que nous obtenons,

187
00:11:21,920 --> 00:11:25,010
et nous appelons cette fonction
dans le <i> original_sequence </ i>,

188
00:11:25,010 --> 00:11:27,830
et puis, quand
cette <i> generate_first_sequence </ i>

189
00:11:27,830 --> 00:11:31,610
une fonction a terminé son exécution,
nous avons notre première séquence.

190
00:11:31,610 --> 00:11:33,540
Voilà donc maintenant la première étape

191
00:11:33,540 --> 00:11:36,480
de cette fonction
<i>generate_first_generation </ i>  .

192
00:11:36,480 --> 00:11:38,040
Nous avons la première séquence.

193
00:11:38,040 --> 00:11:40,420
Alors maintenant, ce que je voudrais
faire est fondamentalement

194
00:11:40,420 --> 00:11:43,490
faire beaucoup, beaucoup de copies
de cette séquence d'origine

195
00:11:43,490 --> 00:11:47,090
et pousser ces copies dans un tableau

196
00:11:47,090 --> 00:11:49,990
qui stocke toutes ces séquences
de notre population.

197
00:11:49,990 --> 00:11:52,400
Je dois donc définir
deux choses maintenant.

198
00:11:52,400 --> 00:11:57,020
La première est, je dois définir
le nombre de ces séquences

199
00:11:57,020 --> 00:12:01,070
Je veux en premier lieu, dans
un certain sens, la taille de notre population.

200
00:12:01,070 --> 00:12:05,620
Donc, je vais définir une variable appelée
ici <i> number_of_sequences </ i>.

201
00:12:10,020 --> 00:12:12,470
Je vais mettre cela à 100.

202
00:12:13,080 --> 00:12:17,210
Je voudrais donc faire 100 copies maintenant
de cette <i> original_sequence </ i>

203
00:12:17,210 --> 00:12:20,340
et le pousser
dans notre réseau de population.

204
00:12:20,340 --> 00:12:23,780
Je dois donc définir cela
aussi bien, et je vais le faire ici,

205
00:12:23,780 --> 00:12:26,430
Je vais l'appeler <i> séquences </ i>.

206
00:12:27,770 --> 00:12:32,230
Donc, c'est un tableau, un tableau vide,
qui sera essentiellement notre population.

207
00:12:32,230 --> 00:12:33,940
Je vais juste ajouter un commentaire ici.

208
00:12:33,940 --> 00:12:38,950
Ceci est notre population, le tableau qui
va stocker toutes ces autres séquences

209
00:12:39,350 --> 00:12:41,610
qui sont eux-mêmes des tableaux.

210
00:12:41,900 --> 00:12:45,570
Alors maintenant, je pense avoir
tout mis en place pour finir.

211
00:12:45,570 --> 00:12:48,120
Donc ici, je vais créer
maintenant une autre boucle:

212
00:12:48,280 --> 00:12:53,750
<I> for (var i = 0; </ i> et puis je vais itérer

213
00:12:53,750 --> 00:12:55,760
pour autant de fois que je dois,

214
00:12:55,760 --> 00:13:00,140
qui est défini ici maintenant dans
la variable <i> number_of_sequences </ i>

215
00:13:00,140 --> 00:13:05,600
et puis bien sûr, comme toujours,
incrémenter le compteur ici par 1.

216
00:13:08,570 --> 00:13:13,460
Donc 100 fois je voudrais obtenir
une copie de ceci <i> original_sequence </ i>,

217
00:13:13,460 --> 00:13:16,300
et je voudrais pousser dans
nos tableau<i> séquences </ i>.

218
00:13:16,840 --> 00:13:18,730
Alors, comment puis-je obtenir une copie?

219
00:13:19,660 --> 00:13:23,700
Il se trouve, il y a une méthode
très pratique dans le tableau,

220
00:13:23,700 --> 00:13:25,740
qui est appelé <i> tranche </ i>:

221
00:13:25,740 --> 00:13:28,790
<I> tranche </ i> retourne simplement
une copie du tableau

222
00:13:29,490 --> 00:13:33,870
que vous laissez
la méthode <i> tranche </ i> agir sur.

223
00:13:33,870 --> 00:13:38,270
Donc, si vous voulez
une copie de<i> original_sequence </ i>,

224
00:13:38,270 --> 00:13:43,140
vous dites simplement
<i> original_sequence.sclice () </ i>.

225
00:13:43,140 --> 00:13:46,730
Ceci renverra une copie de
la <i> original_sequence </ i>,

226
00:13:46,730 --> 00:13:48,710
et c'est exactement ce que nous voulons.

227
00:13:48,710 --> 00:13:53,750
Donc, nous allons pousser cela
dans notre tableau <i> séquences </ i>,

228
00:13:53,750 --> 00:13:58,390
de sorte <i> séquences. pousser
(original_sequence.sclice ()) </ i>

229
00:13:59,590 --> 00:14:00,810
Et maintenant, nous avons terminé.

230
00:14:01,190 --> 00:14:03,530
Donc, ceci est vraiment tout ce qu'il faut.

231
00:14:03,530 --> 00:14:07,660
Ce sera désormais cette fonction
qui sera appelée d'abord,

232
00:14:08,410 --> 00:14:11,110
et de là, nous générons
la première séquence.

233
00:14:11,660 --> 00:14:16,750
Nous le faisons ici en poussant une base aléatoire
dans cet tableau<i> original_sequence </ i>.

234
00:14:16,750 --> 00:14:19,670
Nous avons développé
cette fonction autour de la base ici.

235
00:14:19,670 --> 00:14:22,200
Et puis, une fois que nous avons
cette séquence d'origine,

236
00:14:22,200 --> 00:14:24,150
nous allons le copier beaucoup,
beaucoup de fois

237
00:14:24,150 --> 00:14:26,560
et nous allons pousser dans
notre tableau <i> séquences </ i>.

238
00:14:26,560 --> 00:14:30,850
Alors maintenant, nous avons
vraiment créé la première génération,

239
00:14:30,850 --> 00:14:32,940
et nous allons enregistrer cela

240
00:14:32,940 --> 00:14:37,040
et aller vers le navigateur
et ouvrir ce fichier.

241
00:14:37,040 --> 00:14:40,260
Donc ici, je suis dans le navigateur
et je vais ouvrir le fichier.

242
00:14:40,260 --> 00:14:44,140
<I> Ouvrir le fichier </ i> & gt; <I> sequences.html </ i>.
C'est ici.

243
00:14:44,140 --> 00:14:47,600
Je l'ouvre, je ne vois rien ici,
qui est prévu.

244
00:14:47,600 --> 00:14:49,750
Je veux voir le <i> Console JavaScript </ i>,

245
00:14:49,750 --> 00:14:52,450
voir si j'ai fait une erreur,
une certaine faute de frappe.

246
00:14:52,450 --> 00:14:53,940
Non, il ne semble pas être le cas.

247
00:14:53,940 --> 00:14:56,250
Donc, si vous avez fait une faute
de frappe ou quelque chose comme ça,

248
00:14:56,250 --> 00:14:58,620
vous le verrez ici, probablement en rouge.

249
00:14:58,620 --> 00:15:01,370
Je vois juste ce curseur
clignotant ici joyeusement.

250
00:15:01,370 --> 00:15:06,470
Cela signifie que je n'ai pas fait de faute de
frappe évidente ou tout type d'erreur comme ça.

251
00:15:06,470 --> 00:15:09,910
Donc, ce qui est bon,
les choses fonctionnent bien.

252
00:15:09,910 --> 00:15:11,400
Or, l'étape suivante.

253
00:15:11,400 --> 00:15:15,490
Nous devons ajouter la 3ème dimension,
à savoir la dimension du temps,

254
00:15:15,500 --> 00:15:18,760
et alors nous pouvons commencer à ajouter
des mutations le long du chemin.

255
00:15:18,760 --> 00:15:20,720
Donc ceci conclut leçon 2.

256
00:15:20,720 --> 00:15:25,890
Nous avons maintenant notre tableau 2D,
un ensemble de séquences d'ADN

257
00:15:25,890 --> 00:15:27,630
qui sont tous identiques,

258
00:15:27,630 --> 00:15:29,890
ce qui signifie que nous avons
pas de variation génétique.

259
00:15:30,830 --> 00:15:32,580
Dans la prochaine session

260
00:15:32,580 --> 00:15:36,800
nous allons ajouter cette troisième
dimension, la dimension du temps,

261
00:15:36,800 --> 00:15:40,570
et que cette population continue
à travers le temps,

262
00:15:40,570 --> 00:15:42,920
nous commençons l'ajout
des mutations aléatoires,

263
00:15:42,920 --> 00:15:45,860
et alors nous pouvons voir ce que
cela fait à la variation génétique.

264
00:15:45,860 --> 00:15:47,210
Donc, à la prochaine session.

