1
00:00:02,460 --> 00:00:06,630
Bienvenue , la nature, dans le code,
chapitre 4, leçon 4.

2
00:00:06,630 --> 00:00:09,100
Nous avons dit dans la dernière leçon,
nous aimerions nettoyer

3
00:00:09,100 --> 00:00:12,470
une partie du code ici et fixer
aussi une petite erreur

4
00:00:12,470 --> 00:00:14,290
que nous avons fait. Alors, qu'est-ce cela?

5
00:00:14,290 --> 00:00:15,960
Que devons-nous avoir pour nettoyer?

6
00:00:15,960 --> 00:00:20,190
Eh bien, il a un peu à voir avec
la façon dont nous présentons

7
00:00:20,190 --> 00:00:21,710
les résultats dans le navigateur.

8
00:00:21,710 --> 00:00:26,090
Vous pouvez le voir ici, à droite, que
je sors toutes les séquences d'ADN

9
00:00:26,690 --> 00:00:29,090
avant la mutation et puis après mutation.

10
00:00:29,090 --> 00:00:32,850
Mais ce n'est pas vraiment
clair que cela se produit,

11
00:00:32,850 --> 00:00:35,130
à un certain point de temps

12
00:00:35,130 --> 00:00:38,690
et que, cela est le résultat à
un autre point de temps.

13
00:00:38,690 --> 00:00:40,260
Il nous arrive juste pour savoir,

14
00:00:40,260 --> 00:00:43,750
mais nous aurions besoin de regarder
ce code source pour comprendre cela,

15
00:00:43,750 --> 00:00:45,450
et c'est évidemment pas bon.

16
00:00:45,450 --> 00:00:48,340
Donc, nous allons corriger
cela très rapidement.

17
00:00:48,340 --> 00:00:50,790
Donc, fondamentalement,
nous revenons dans notre code.

18
00:00:50,790 --> 00:00:54,220
Donc ce que je voudrais faire c'est, ici-bas,
quand j'imprime les séquences,

19
00:00:54,220 --> 00:00:55,720
ici,

20
00:00:56,690 --> 00:01:00,510
je voudrais cette fonction pour
nous dire essentiellement aussi,

21
00:01:00,510 --> 00:01:04,050
pour nous donner un titre, comme
nous dire quelle génération nous sommes

22
00:01:04,050 --> 00:01:05,440
ou un truc dans ce genre.

23
00:01:05,440 --> 00:01:09,960
Je vais donc passer ici une chaîne
de sortie

24
00:01:09,960 --> 00:01:13,380
et puis je vais modifier
ces fonctions <i> imprimer_séquences </ i>

25
00:01:13,380 --> 00:01:15,400
qui délivre la chaîne.

26
00:01:15,400 --> 00:01:16,900
Donc ici, je voudrais dire,

27
00:01:16,900 --> 00:01:20,920
ceci est <i> Génération 0 </ i>,
<i> Génération 0 </ i>,

28
00:01:20,920 --> 00:01:24,690
puis ici, je voudrais dire
quelque chose comme,

29
00:01:24,690 --> 00:01:28,050
<i> Après 100 générations </ i>,

30
00:01:30,340 --> 00:01:31,980
et maintenant, bien sûr,

31
00:01:31,980 --> 00:01:33,180
Vous savez,

32
00:01:33,180 --> 00:01:36,390
vous pouvez modifier cette
nouvelle concaténation

33
00:01:36,390 --> 00:01:40,350
et effectivement utiliser la variable
ici au lieu de coder <i> 100 </ i>.

34
00:01:40,350 --> 00:01:42,920
Mais je veux juste
le fixer très brièvement,

35
00:01:42,920 --> 00:01:45,810
et vous pouvez le faire vous-même,
si vous le souhaitez.

36
00:01:46,750 --> 00:01:50,280
Ok, donc <i> imprimer_séquences </ i>
ce sera jusqu'à ici

37
00:01:50,280 --> 00:01:53,990
<I> imprimer_séquences </ i>,
pour le moment, n'a pas de paramètres,

38
00:01:53,990 --> 00:01:56,010
donc je vais changer cela,

39
00:01:56,010 --> 00:01:59,020
donc je vais juste ajouter
un titre ici comme un paramètre

40
00:01:59,020 --> 00:02:00,470
et puis je vais dire,

41
00:02:00,470 --> 00:02:04,750
"Regardez, vous devez d'abord
imprimer ce titre dans la console".

42
00:02:04,750 --> 00:02:08,060
Ok, donc <i> console. log (titre) </ i>.

43
00:02:08,285 --> 00:02:12,000
Et aussi pour le faire un peu
mieux, je vais ajouter

44
00:02:12,000 --> 00:02:15,250
une ligne vide ici,
donc il va simplement dire,

45
00:02:15,250 --> 00:02:17,730
"Imprimer la chaîne vide dans la console",

46
00:02:17,730 --> 00:02:19,840
qui nous donne une ligne vide

47
00:02:19,840 --> 00:02:22,020
et cela nous donne une belle
distinction visuelle.

48
00:02:22,020 --> 00:02:25,210
Donc, si nous enregistrons cela
et revenons au navigateur

49
00:02:25,210 --> 00:02:29,430
et rechargez cela, alors nous devrions
voir quelque chose comme ça.

50
00:02:29,430 --> 00:02:31,980
Maintenant, voici bien dire
<i> Génération 0 </ i>,

51
00:02:31,980 --> 00:02:34,320
voici la population à la génération 0

52
00:02:34,320 --> 00:02:36,820
puis après 100 générations,

53
00:02:36,820 --> 00:02:38,120
voici ce que nous obtenons.

54
00:02:38,120 --> 00:02:40,650
Ceci est notre population diversifiée.

55
00:02:40,650 --> 00:02:43,510
Alors ceci est,un peu de nettoyage ici.

56
00:02:44,320 --> 00:02:47,830
Alors maintenant, ce que je voudrais faire
est que je voudrais corriger cette erreur

57
00:02:48,150 --> 00:02:50,320
que nous avons fait, sans
le savoir, la dernière fois,

58
00:02:50,320 --> 00:02:53,280
lorsque nous avons développé
ce code de mutation.

59
00:02:53,280 --> 00:02:56,430
Donc, si vous regardez ici à la
<i> exécuter_générations </ i>,

60
00:02:56,680 --> 00:03:01,500
à droite à cette boucle imbriquée, donc
une boucle dans une boucle, dans la boucle

61
00:03:01,500 --> 00:03:05,460
et ici nous allons essentiellement
par chaque base,

62
00:03:05,460 --> 00:03:08,850
dans chacune des séquences
de nombreuses générations

63
00:03:08,850 --> 00:03:14,600
et nous disons, si cette condition
est vraie, changer la base.

64
00:03:14,600 --> 00:03:17,390
Et ceci est tout simplement
le <i> mutation_rate </ i> ici

65
00:03:17,390 --> 00:03:20,390
changer cette base.

66
00:03:20,390 --> 00:03:23,450
Mais si vous pensez à ce sujet
un peu plus profondément,

67
00:03:23,450 --> 00:03:26,670
ce n'est pas la façon dont nous mettons
en œuvre ceci ici en ce moment, non?

68
00:03:26,670 --> 00:03:30,810
Un <i> random_base </ i> nous donne juste,
vraiment <i> random_base </ i>

69
00:03:30,810 --> 00:03:35,070
Voici les quatre bases stockées
comme éléments d'un tableau,

70
00:03:35,070 --> 00:03:39,000
nous choisissons alors
un indice aléatoire, un nombre arrondi

71
00:03:39,000 --> 00:03:42,770
entre zéro et trois, y compris ceux-là aussi

72
00:03:42,770 --> 00:03:46,510
puis nous retournons tout
simplement l'élément correspondant.

73
00:03:46,510 --> 00:03:49,710
Donc, il nous a donne
vraiment <i> random_base </ i>,

74
00:03:49,710 --> 00:03:53,810
mais il ne vérifie pas
si cette base est déjà là,

75
00:03:53,810 --> 00:03:55,550
de sorte qu'il pourrait être là,
par exemple,

76
00:03:55,550 --> 00:03:58,190
nous avons un A ici et nous appelons
cette fonction,

77
00:03:58,190 --> 00:04:00,630
cette fonction retourne un A,

78
00:04:00,630 --> 00:04:04,880
et maintenant nous écrasons
cette base qui est un A,

79
00:04:04,880 --> 00:04:06,070
avec un A.

80
00:04:06,340 --> 00:04:10,660
Et donc nous avons effectivement pas
eu une mutation manifestée.

81
00:04:10,660 --> 00:04:13,120
Nous devons donc en tenir compte.

82
00:04:13,120 --> 00:04:17,050
Nous ne générons pas en fait
autant de variation génétique

83
00:04:17,050 --> 00:04:18,530
comme nous le devrions.

84
00:04:18,530 --> 00:04:20,200
Alors, comment pouvons-nous faire cela?

85
00:04:20,200 --> 00:04:23,270
Eh bien, je pense ce que
nous allons faire ici est,

86
00:04:23,270 --> 00:04:27,200
tout d'abord, nous devons laisser
la fonction <i> random_base </ i> savoir

87
00:04:27,800 --> 00:04:30,300
ce que nous avons à la position actuelle,

88
00:04:30,300 --> 00:04:33,880
afin qu'ils puissent éviter
de retourner cela.

89
00:04:33,880 --> 00:04:35,160
Alors, pourquoi faisons-nous pas cela,

90
00:04:35,160 --> 00:04:38,530
pourquoi ne nous passons pas
essentiellement cette information ici,

91
00:04:38,530 --> 00:04:42,140
à partir de cette base, comme un argument

92
00:04:42,140 --> 00:04:45,140
à la fonction <i>random_base </ i> ?

93
00:04:45,140 --> 00:04:47,580
Nous allons donc passer
une paire de base ici.

94
00:04:47,580 --> 00:04:51,030
Bon, alors dans <i> random_base </ i>
nous avons besoin de recevoir cela,

95
00:04:51,030 --> 00:04:53,690
donc ici dans <i> random_base </ i> Nous ne
disposons pas actuellement d'un paramètre,

96
00:04:53,690 --> 00:04:56,200
D'accord? Donc, nous allons changer cela.

97
00:04:56,200 --> 00:04:59,000
Je veux dire que je vais appeler
ceci<i> current_base </ i>

98
00:04:59,000 --> 00:05:01,060
parce que ce que nous recevons ici,

99
00:05:01,060 --> 00:05:03,130
nous recevons la base actuelle.

100
00:05:03,130 --> 00:05:05,810
Et maintenant, nous devons
modifier cette fonction un peu,

101
00:05:05,810 --> 00:05:10,550
qu'il retourne un <i> random_base </ i>
de l'ensemble de la base

102
00:05:10,550 --> 00:05:13,690
qui ne comprennent pas ce
<i> current_base </ i>,

103
00:05:13,690 --> 00:05:16,030
parce que sinon il y aura la possibilité

104
00:05:16,030 --> 00:05:19,130
que nous retournions la même base exacte.

105
00:05:19,130 --> 00:05:21,520
Alors, comment allons-nous faire cela?

106
00:05:21,520 --> 00:05:23,730
Alors d'abord ce que je vais faire c'est,

107
00:05:23,730 --> 00:05:27,210
je vais définir ici une nouvelle
variable, une variable locale

108
00:05:27,210 --> 00:05:29,890
que je vais appeler <i> new_base </ i>.

109
00:05:29,890 --> 00:05:31,110
D'accord.

110
00:05:31,110 --> 00:05:33,640
Ne va pas initialiser cela avec
une valeur quelconque,

111
00:05:33,640 --> 00:05:36,120
aller juste pour définir ici,
<i> new_base </ i>.

112
00:05:37,030 --> 00:05:41,830
Et maintenant, je vais faire quelque chose en utilisant
une nouvelle construction de script graphique

113
00:05:41,830 --> 00:05:43,790
que nous n'avons pas rencontré avant

114
00:05:43,790 --> 00:05:47,830
et ceci est le soi-disant <i> do-while loop</ i>.

115
00:05:47,830 --> 00:05:50,110
Donc, fondamentalement, <i> do-while </ i>
fonctionne comme ceci,

116
00:05:50,110 --> 00:05:53,110
vous dites <i> faire </ i> et puis
les accolades,

117
00:05:53,110 --> 00:05:57,790
et quelque chose ici, dans ces accolades,

118
00:05:57,820 --> 00:06:01,390
puis <i> lorsque </ i>,
entre parenthèses, et point-virgule.

119
00:06:02,390 --> 00:06:03,830
Alors qu'est-ce ceci?

120
00:06:03,830 --> 00:06:08,520
Eh bien <i> do-while </ i> est fondamentalement
juste un autre type d'itération.

121
00:06:08,520 --> 00:06:13,340
Jusqu'à présent, nous avons
rencontré un seul type d'itération,

122
00:06:13,340 --> 00:06:17,940
et c'est la boucle <i> pour </ i>,
mais ce n'est pas la seule façon

123
00:06:17,940 --> 00:06:21,710
comment nous pouvons faire une itération,
<i> do-while</ i> est une autre façon

124
00:06:21,710 --> 00:06:23,340
que nous pouvons le faire.

125
00:06:23,340 --> 00:06:26,615
Et comment cela fonctionne c'est que vous
dites essentiellement <i> faire </ i> et ici tu es

126
00:06:26,615 --> 00:06:28,800
puis ici votre code d'itération

127
00:06:28,800 --> 00:06:33,490
que vous souhaitez être itérée
puis <i> lorsque </ i>

128
00:06:33,490 --> 00:06:37,150
et ici une certaine condition, et aussi
longtemps que cette condition est vraie,

129
00:06:37,150 --> 00:06:40,950
ce code est ici itéré.

130
00:06:41,640 --> 00:06:45,740
Et cela peut être très pratique,
c'est un peu plus court

131
00:06:46,670 --> 00:06:48,570
et il a un autre effet secondaire,

132
00:06:48,570 --> 00:06:50,340
il y a une autre différence subtile ici,

133
00:06:50,340 --> 00:06:54,680
à savoir que, cette itération
<i> do-while </ i> garanti

134
00:06:54,680 --> 00:06:57,120
que le code qui sera ici,

135
00:06:57,120 --> 00:06:59,830
sera exécuté au moins une fois,

136
00:06:59,830 --> 00:07:02,420
parce qu'il va être exécuté <i> fais </ i>,

137
00:07:02,420 --> 00:07:06,140
et alors seulement, que cette
condition sera vérifiée.

138
00:07:06,140 --> 00:07:10,910
Donc, ce qui garantit qu'il est
exécuté au moins une fois

139
00:07:10,910 --> 00:07:13,300
et parfois cela est exactement
ce que vous voulez.

140
00:07:13,300 --> 00:07:15,950
Cela n'est pas nécessairement vrai
pour une boucle,<i> pour </ i>,

141
00:07:15,950 --> 00:07:18,940
vous pouvez entendre dans ceci<i> pour </ i>,

142
00:07:18,940 --> 00:07:22,380
vous pouvez créer une condition
qui est faux, cela est faux,

143
00:07:22,380 --> 00:07:23,720
dès le départ.

144
00:07:23,720 --> 00:07:26,520
Et donc le code ici ne sera jamais exécutée.

145
00:07:26,520 --> 00:07:29,720
Cela n'est pas possible
avec le <i> do-while </ i>.

146
00:07:29,720 --> 00:07:32,360
Ce code ici que la production ici,

147
00:07:32,360 --> 00:07:34,980
sera exécuté au moins une fois au début

148
00:07:34,980 --> 00:07:38,510
puis, la condition sera vérifiée.

149
00:07:39,070 --> 00:07:41,340
Donc, pour nous,
ce que nous aimerions faire,

150
00:07:42,100 --> 00:07:45,340
nous aimerons avoir ceci ici.

151
00:07:45,340 --> 00:07:48,390
Nous aimerions donc dessiner
ces nombres aléatoires,

152
00:07:48,390 --> 00:07:53,020
Je vais couper cette ligne
ici et je vais passé ici,

153
00:07:53,020 --> 00:07:58,730
d'accord, puis, je l'ai maintenant
traçé <i> index aléatoire </ i>,

154
00:07:59,450 --> 00:08:01,680
Et puis je voudrais dire

155
00:08:01,680 --> 00:08:03,760
ok, donc <i>nouvelle_base </ i>,
mon * nouvelle_base,

156
00:08:03,760 --> 00:08:06,820
à droite, que j'initialise ici,

157
00:08:06,820 --> 00:08:08,790
mais ne possède pas de valeur,

158
00:08:09,490 --> 00:08:10,970
égal à

159
00:08:12,320 --> 00:08:13,510
<I> bases </ i>

160
00:08:14,680 --> 00:08:16,170
<I> index </ i>.

161
00:08:16,170 --> 00:08:18,050
D'accord. Et maintenant, bien sûr,

162
00:08:18,050 --> 00:08:22,070
Je dois m'assurer que je vais trouver
les variables de bases ici,

163
00:08:22,070 --> 00:08:24,975
sinon cela va jeter une erreur

164
00:08:24,975 --> 00:08:28,125
parce qu'ici il ne sait pas
quelles bases ceci est.

165
00:08:28,230 --> 00:08:32,320
Et puis à la fin, je voudrais
retourner ce <i>nouvelle_base </ i>

166
00:08:32,320 --> 00:08:35,220
d'accord, alors, <i>nouvelle_base</ i>.

167
00:08:36,550 --> 00:08:40,040
Bon, et maintenant je peux
me débarrasser de cela ici.

168
00:08:41,660 --> 00:08:43,250
Ok.

169
00:08:43,250 --> 00:08:46,060
alors maintenant quelle est
la condition ici?

170
00:08:46,060 --> 00:08:49,620
Comment est-ce maintenant mieux
que ce qu'elle était avant?

171
00:08:49,620 --> 00:08:51,330
Eh bien, ce que nous pouvons faire est,

172
00:08:51,330 --> 00:08:54,300
nous pouvons dire, "regardez,
vous allez choisir une indice ici,

173
00:08:54,300 --> 00:08:57,900
et puis vous allez choisir une <i> Base </ i>

174
00:08:58,800 --> 00:09:01,520
correspondant à cette <i> index </ i>,

175
00:09:01,520 --> 00:09:05,870
mais maintenant, après que vous l'avez
fait une fois que nous allons vérifier

176
00:09:05,870 --> 00:09:08,830
si cela est en fait la même <i> Base </ i>,

177
00:09:08,830 --> 00:09:13,480
donc la condition ici va être
<i> lorsque (nouvelle_base) </ i> -

178
00:09:15,660 --> 00:09:19,970
égal, il ne faut pas oublier
la double égalité, <i> base_actuelle</ i>.

179
00:09:22,390 --> 00:09:26,730
Donc, cela signifie que nous allons
choisir une <i> base_aléatoire</ i>

180
00:09:27,400 --> 00:09:30,090
puis on va vérifier si ces 2 maintenant,

181
00:09:30,090 --> 00:09:32,770
le nouveau et l'actuelle sont les mêmes.

182
00:09:32,770 --> 00:09:35,830
Et si elles sont, donc alors cette condition est vraie.

183
00:09:35,830 --> 00:09:37,730
Donc, nous allons le faire à nouveau

184
00:09:37,730 --> 00:09:40,390
et si elle est toujours la même,
on va le faire à nouveau.

185
00:09:40,390 --> 00:09:42,720
Et donc ce sera exécuté

186
00:09:42,720 --> 00:09:45,220
jusqu'à ce que cette condition
n'est plus vrai.

187
00:09:45,220 --> 00:09:48,770
Donc, jusqu'à ce que nous avons
la garantie que la<i> nouvelle _base </ i>

188
00:09:48,770 --> 00:09:51,580
ne sont pas les mêmes
que <i> base_actuelle </ i>

189
00:09:51,580 --> 00:09:54,650
et cela est, bien sûr, exactement
ce que nous voulons.

190
00:09:54,650 --> 00:09:59,610
Donc, cela garantit que nous allons
obtenir une <i> nouvelle_base </ i> ici

191
00:09:59,610 --> 00:10:01,750
qui sera de retour, qui est différent,

192
00:10:01,750 --> 00:10:04,690
ce n'est pas égale à la <i> base_actuelle </ i>.

193
00:10:04,690 --> 00:10:08,030
Et donc, c'est un grand usage ici

194
00:10:08,030 --> 00:10:12,710
du <i> do-while </ i> et nous devons
juste faire en sorte maintenant

195
00:10:12,710 --> 00:10:16,810
que <i> base_aléatoire </ i>, à droite,
attend ici <i> base_actuelle </ i>.

196
00:10:17,180 --> 00:10:18,790
Nous utilisons <i> base_aléatoire </ i>
ici aussi bien

197
00:10:18,790 --> 00:10:21,450
où nous avons initialisé
la première séquence d'origine.

198
00:10:21,450 --> 00:10:23,640
Nous devons donc passer
quelque chose ici aussi.

199
00:10:23,640 --> 00:10:25,310
Maintenant, ici, ça n'a pas d'importance,

200
00:10:25,310 --> 00:10:29,330
nous pouvons simplement transmettre toute
chaîne qui n'est pas <i> A, G, C ou T </ i>,

201
00:10:29,330 --> 00:10:32,150
nous allons donc passer la chaîne vide,

202
00:10:32,150 --> 00:10:35,930
Cela permettra de garantir que
cette condition est toujours vraie,

203
00:10:35,930 --> 00:10:39,910
et nous allons obtenir un <i>base_aléatoire </ i>
de cette <i> pour </ i>,

204
00:10:39,910 --> 00:10:43,930
qui est ce que nous voulons, quand
nous avons construit la chaîne d'origine.

205
00:10:44,280 --> 00:10:46,770
Bon, donc il y a une chose
que je voudrais faire,

206
00:10:46,770 --> 00:10:50,690
et qui est, je voudrais profiter
de cette variable ici, <i> bases </ i>,

207
00:10:50,690 --> 00:10:55,530
et le déplacer hors de la fonction,
donc, je vais le couper ici

208
00:10:55,530 --> 00:10:59,140
et je vais juste ajouter ici au sommet,

209
00:10:59,140 --> 00:11:01,740
où nous avons défini l
es autres variables

210
00:11:01,740 --> 00:11:06,440
et je vais dire <i> bases var </ i>
est égal à ce tableau,

211
00:11:06,440 --> 00:11:09,970
et je vais le définir comme une variable

212
00:11:09,970 --> 00:11:11,910
qui est dans toutes les lettres majuscules.

213
00:11:11,910 --> 00:11:15,750
Et puis, je dois m'assurer que
je référence correctement,

214
00:11:15,750 --> 00:11:18,930
ici-bas, où je choisis la<i> nouvelle_base. </ i>

215
00:11:18,930 --> 00:11:20,840
Alors, pourquoi je fais cela?

216
00:11:21,210 --> 00:11:25,390
Eh bien, d'autres fonctions peuvent
vouloir accéder à cette variable

217
00:11:25,390 --> 00:11:29,280
parmi les quatre qui contient
les quatre bases de l'ADN

218
00:11:29,280 --> 00:11:31,230
aussi bien dans le futur.

219
00:11:31,250 --> 00:11:35,130
Ainsi, il est une bonne chose d'avoir
ceci juste défini dans un seul endroit.

220
00:11:36,190 --> 00:11:37,430
Et l'autre chose est:

221
00:11:37,430 --> 00:11:39,770
Pourquoi suis-je utiliser
toutes les lettres majuscules?

222
00:11:39,770 --> 00:11:42,990
C'est fondamentalement juste comme
un signal pour dire à d'autres programmeurs

223
00:11:42,990 --> 00:11:44,580
qui devaient réutiliser ce code,

224
00:11:44,580 --> 00:11:46,880
ceci est destiné à être
essentiellement constant.

225
00:11:46,880 --> 00:11:48,460
C'est une variable, bien sûr,

226
00:11:48,460 --> 00:11:51,690
et vous pouvez toujours écraser
les variables dans le script Java,

227
00:11:51,690 --> 00:11:54,650
mais cela donne un signal clair,

228
00:11:54,650 --> 00:11:58,210
"Cela est censé être une constante,
s'il vous plaît ne change pas cela."

229
00:11:58,870 --> 00:12:03,210
Ainsi, nous pouvons maintenant enregistrer
cela et nous pouvons passer à notre navigateur

230
00:12:03,210 --> 00:12:06,490
et voir ce qui a changé fondamentalement.

231
00:12:06,490 --> 00:12:09,620
Voici donc notre console,
je vais recharger cela

232
00:12:09,620 --> 00:12:12,030
Donc ce que vous pouvez voir
n'est pas beaucoup de changements,

233
00:12:12,030 --> 00:12:13,810
mais si vous pouviez effectivement mesurer,

234
00:12:13,810 --> 00:12:16,000
vous verriez que nous obtenons
maintenant plus de mutation,

235
00:12:16,000 --> 00:12:17,160
"Et pourquoi est-ce cela?

236
00:12:17,160 --> 00:12:22,340
Eh bien, pour une raison simple, nous avons
utilisé pour, dans un cas sur quatre,

237
00:12:22,340 --> 00:12:25,140
nous avons utilisé pour obtenir une base,
comme un remplacement, comme une mutation

238
00:12:25,140 --> 00:12:27,500
qui était en fait déjà là.

239
00:12:27,500 --> 00:12:31,490
Nous voudrions donc prendre un A
et le remplacer par tout avec un A,

240
00:12:31,490 --> 00:12:35,220
dans un cas sur quatre,
et de même pour T, G ou C.

241
00:12:35,490 --> 00:12:38,540
Donc, nous avons obtenu moins
de mutation que nous voulions.

242
00:12:38,540 --> 00:12:40,070
Maintenant, nous résoudons le problème.

243
00:12:40,070 --> 00:12:42,770
Donc, nous devrions avoir un peu plus

244
00:12:42,770 --> 00:12:46,340
de mutation qui se manifeste
dans la population.

245
00:12:46,340 --> 00:12:50,290
Vous ne pouvez pas voir ceci dans
la console mais vous pouvez le mesurer.

246
00:12:50,290 --> 00:12:54,200
L'autre chose est bien sûr que nous sommes
maintenant conscients de cela,

247
00:12:54,200 --> 00:12:57,480
le nouveau type de mise en oeuvre d
'une boucle,

248
00:12:57,480 --> 00:13:00,820
qui est le <i> do-while </ i>,
qui est vraiment très pratique.

249
00:13:00,820 --> 00:13:02,740
Et utilisera ce type de boucle

250
00:13:02,740 --> 00:13:04,690
et d'autres boucles que nous allons
arriver à la rencontre

251
00:13:04,690 --> 00:13:06,330
à l'avenir aussi bien.

