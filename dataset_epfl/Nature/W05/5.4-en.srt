1
00:00:02,862 --> 00:00:03,499
Welcome back.

2
00:00:03,674 --> 00:00:06,749
Nature, In Code.
We are in Chapter 5, Lecture 4.

3
00:00:06,924 --> 00:00:08,625
In this lecture,
we need to implement

4
00:00:08,825 --> 00:00:11,287
the function that gets us
a Mating Partner.

5
00:00:11,525 --> 00:00:14,487
Now, in the real world,
if one takes a look at

6
00:00:14,687 --> 00:00:18,437
human art, music, books,
theater and so on,

7
00:00:18,637 --> 00:00:22,099
it seems this is not always
a straightforward process.

8
00:00:22,299 --> 00:00:24,099
But, in JavaScript, it is.

9
00:00:24,299 --> 00:00:26,087
So let's go ahead
and implement it.

10
00:00:26,287 --> 00:00:27,687
So this is where we left off.

11
00:00:27,887 --> 00:00:29,912
Things are working in principle but

12
00:00:30,112 --> 00:00:32,299
we are calling two functions here,

13
00:00:32,499 --> 00:00:34,587
Pick Mating Partner
and Get Offspring

14
00:00:34,787 --> 00:00:36,412
that we have not implemented yet.

15
00:00:36,674 --> 00:00:39,062
So here, in this lecture,
our goal is to implement

16
00:00:39,237 --> 00:00:40,937
this Pick Mating Partner 

17
00:00:41,137 --> 00:00:45,262
Okay, so idea is that we
pass these two co-ordinates

18
00:00:45,462 --> 00:00:48,537
if you will, the grid,
the indices ii and i,

19
00:00:48,737 --> 00:00:51,187
and then we want to pick
a Mating Partner

20
00:00:51,387 --> 00:00:55,449
given these co-ordinates
and the max distance.

21
00:00:55,874 --> 00:00:58,273
So, we will have a function here
somewhere, 

22
00:00:58,498 --> 00:01:05,061
function pick_mating_partner.

23
00:01:05,999 --> 00:01:09,248
Okay, that has two parameters,

24
00:01:09,448 --> 00:01:11,636
namely i and ii.

25
00:01:12,786 --> 00:01:15,886
And, I would like to return here

26
00:01:17,136 --> 00:01:18,173
a Mating Partner.

27
00:01:18,948 --> 00:01:20,185
So given these values

28
00:01:20,385 --> 00:01:21,960
and given the mating distance

29
00:01:22,247 --> 00:01:24,185
that we define
in the global vars

30
00:01:24,760 --> 00:01:26,785
So, how can we do this?

31
00:01:26,985 --> 00:01:31,122
So, lets zoom in
on a 3X3 grid here.

32
00:01:32,422 --> 00:01:38,997
Okay, 1..2..
1..2..

33
00:01:39,622 --> 00:01:41,997
And this our focal individual here

34
00:01:42,197 --> 00:01:45,197
living at the coordinates
i and ii.

35
00:01:45,747 --> 00:01:47,947
And we can, for example,
assume that

36
00:01:48,147 --> 00:01:51,222
these coordinates happen
to be 5 and 4.

37
00:01:51,885 --> 00:01:53,947
Okay, so why 3X3 subgrid?

38
00:01:54,147 --> 00:01:56,085
Well, simply because 
for the time being

39
00:01:56,285 --> 00:01:59,385
we are now assuming the max
mating distance here is 1.

40
00:01:59,585 --> 00:02:03,685
So this would be the acceptable
mating range, if you will.

41
00:02:05,047 --> 00:02:09,685
So, how can we now map
these elements, these cells,

42
00:02:09,885 --> 00:02:12,172
to this coordinate system?

43
00:02:12,372 --> 00:02:14,385
Well, it is relatively
straightforward.

44
00:02:14,585 --> 00:02:18,585
If we are decreasing "i" by 1,
we will go up

45
00:02:18,785 --> 00:02:21,597
for increasing it by 1,
we go down.

46
00:02:21,797 --> 00:02:24,335
So, for example,
up here, this would be

47
00:02:24,535 --> 00:02:28,772
i-1,
ii would still be the same.

48
00:02:29,447 --> 00:02:31,722
Down here, this would be

49
00:02:31,922 --> 00:02:35,822
i+1,
ii would still be the same.

50
00:02:37,646 --> 00:02:40,009
Conversely, if we want
to the right here,

51
00:02:40,209 --> 00:02:41,722
or to the left,
we are going to keep

52
00:02:41,922 --> 00:02:46,272
i constant,
but we are decreasing 

53
00:02:46,472 --> 00:02:49,084
ii by 1 here,
and we are increasing

54
00:02:49,284 --> 00:02:51,759
ii by 1 here.

55
00:02:53,059 --> 00:02:56,584
And by the way,
there is nothing inherent

56
00:02:56,784 --> 00:02:59,897
which dimension of the array,
the first or the second

57
00:03:00,097 --> 00:03:03,759
maps to the horizontal
and to the vertical space.

58
00:03:04,509 --> 00:03:08,347
I prefer to think about, you know,
this way, 

59
00:03:08,547 --> 00:03:12,547
with i going. with first coordinate 
being vertical,

60
00:03:12,747 --> 00:03:16,009
and the second dimension
being horizontal.

61
00:03:16,209 --> 00:03:20,184
But, you know, you can
think about however you want to

62
00:03:20,471 --> 00:03:24,359
if you find it easier to flip 
this model mentally 90 degrees.

63
00:03:24,559 --> 00:03:26,084
it will be the exact same thing.

64
00:03:26,284 --> 00:03:30,034
Okay, so the concrete values
here would be 4 and 4

65
00:03:30,234 --> 00:03:33,234
and here, for example,
would be 6 and 4.

66
00:03:33,434 --> 00:03:37,221
Conversely, here would be
5 and 4+1, so 5

67
00:03:37,421 --> 00:03:40,484
5, and 4-1, so 3.

68
00:03:41,496 --> 00:03:45,759
And then the corner cases
are also easy to implement.

69
00:03:46,021 --> 00:03:49,359
So, this would be i-1,
alright?

70
00:03:49,559 --> 00:03:50,584
Going up.

71
00:03:51,009 --> 00:03:54,696
and ii-1, going to the left.

72
00:03:55,396 --> 00:03:58,271
Correspondingly here,
this would be i-1 going up

73
00:03:58,471 --> 00:04:01,034
but ii+1 going to the right.

74
00:04:01,234 --> 00:04:05,834
Here it would be i+1
going down,

75
00:04:06,034 --> 00:04:08,934
and ii+1, going to the right.

76
00:04:09,134 --> 00:04:11,484
And i+1, going down

77
00:04:11,684 --> 00:04:15,146
and ii-1, going to the left.

78
00:04:11,684 --> 00:04:14,684


79
00:04:15,346 --> 00:04:18,346
So the values here would be
4 and 3,

80
00:04:18,546 --> 00:04:20,746
4 and 5,

81
00:04:21,096 --> 00:04:22,909
6 and 5

82
00:04:23,109 --> 00:04:25,234
and 6 and 3.

83
00:04:26,347 --> 00:04:29,297
So, these are the acceptable
values here

84
00:04:29,497 --> 00:04:31,109
in the particular situation.

85
00:04:31,309 --> 00:04:33,534
And if we think
about the coordinates

86
00:04:33,734 --> 00:04:37,734
of the Mating Partner,
of our focal individual (i, ii)

87
00:04:38,084 --> 00:04:41,659
as j and jj.

88
00:04:42,234 --> 00:04:45,209
then it is relatively easy to see
that the following conditions here

89
00:04:45,409 --> 00:04:46,534
have to be true.

90
00:04:47,122 --> 00:04:54,422
So, j must be equal to
or larger than i-1.

91
00:04:55,434 --> 00:04:56,009
Why?

92
00:04:56,209 --> 00:04:59,522
Well, it has to be at least
i-1, because otherwise,

93
00:04:59,722 --> 00:05:02,722
if it would be smaller,
we would go out of bounce here

94
00:05:02,922 --> 00:05:04,709
going upwards.

95
00:05:05,397 --> 00:05:10,884
Correspondingly, on the other side,
j has to be equal or smaller

96
00:05:11,084 --> 00:05:13,034
than i+1,
why?

97
00:05:13,259 --> 00:05:17,534
Well, if it were larger,
we would go out of bounce down here.

98
00:05:17,734 --> 00:05:20,634
So these are sort of the minimum
and the maximum boundaries

99
00:05:21,709 --> 00:05:24,447
for i or for j, rather.

100
00:05:24,984 --> 00:05:28,409
And the exact same is true
to think about jj.

101
00:05:28,647 --> 00:05:33,659
So jj has to be larger than
or equal to ii-1.

102
00:05:33,859 --> 00:05:36,859
So, this is now the minimum value
going to the left

103
00:05:37,059 --> 00:05:39,297
it cannot be smaller than that,

104
00:05:39,497 --> 00:05:42,497
otherwise, we would, you know,
go out of bounce on the left.

105
00:05:42,697 --> 00:05:45,109
And the same is true
here on the right.

106
00:05:45,309 --> 00:05:50,184
jj has to be smaller
or equal to ii+1

107
00:05:50,384 --> 00:05:53,134
Otherwise, we would go out of bounce
here on the right side.

108
00:05:54,097 --> 00:05:57,047
So, just to be clear,
these are now the main values

109
00:05:57,272 --> 00:05:59,934
and these are the max values.

110
00:06:01,222 --> 00:06:03,334
The other thing I want to mention

111
00:06:03,534 --> 00:06:05,272
is that we can make
this more generic

112
00:06:05,984 --> 00:06:09,497
It was easier to see
that the reason we have -1 here

113
00:06:09,697 --> 00:06:13,084
and +1 here, is because
the maximum Mating Distance is 1.

114
00:06:14,097 --> 00:06:17,322
The maximum
Mating Distance generically,

115
00:06:17,522 --> 00:06:20,984
is simply d,
and so we can replace

116
00:06:21,172 --> 00:06:24,222
this 1 here with d, if we want 
to make this more generic.

117
00:06:26,047 --> 00:06:30,922
And now, we can put into d
whatever we would like to.

118
00:06:31,122 --> 00:06:34,822
So, for example, 
imagine d being equal to 2.

119
00:06:35,022 --> 00:06:38,472
So, that would now mean
that d, the minimum value here

120
00:06:38,709 --> 00:06:41,322
would be i-2 going up,

121
00:06:41,522 --> 00:06:43,672
and i+2 going down,

122
00:06:43,872 --> 00:06:45,847
or ii-2 going to the left

123
00:06:46,059 --> 00:06:48,197
and ii+2 going to the right.

124
00:06:48,897 --> 00:06:51,722
So, these are the acceptable ranges.

125
00:06:51,922 --> 00:06:54,097
These, of course,
have to be integer values

126
00:06:54,297 --> 00:06:57,834
because they are indices
of this two dimensional array.

127
00:06:58,034 --> 00:07:00,497
And we can now implement
this in JavaScript.

128
00:07:00,934 --> 00:07:04,322
Okay, so with this knowledge
in hand, we can now implement this.

129
00:07:04,547 --> 00:07:09,047
So, we can setup these variables,
j and jj,

130
00:07:09,247 --> 00:07:14,334
and these would be the coordinates
of the Mating Partner.

131
00:07:14,934 --> 00:07:16,647
So, let us start with j.

132
00:07:17,272 --> 00:07:19,847
So, I now know
there is an acceptable range

133
00:07:20,809 --> 00:07:24,259
and I would like
to just pick a random number

134
00:07:24,459 --> 00:07:28,034
of this acceptable range
and concretely a random integer

135
00:07:28,359 --> 00:07:30,509
because these are going
to be indices of the array.

136
00:07:31,384 --> 00:07:33,709
So, what I am going to do
is I am going to outsource

137
00:07:33,909 --> 00:07:34,484
this as well.

138
00:07:34,697 --> 00:07:38,272
I am simply going to say,
give me a random integer here

139
00:07:38,484 --> 00:07:41,322
so I am going to call
the function get_random_int,

140
00:07:42,097 --> 00:07:45,184
and I am going to pass
two arguments here

141
00:07:45,384 --> 00:07:49,284
Namely, the minimum value
and the maximum value possible.

142
00:07:49,734 --> 00:07:55,997
So, as we now know that the minimum
value is simply i-d,

143
00:07:56,197 --> 00:07:58,534
or rather, here in our quote,

144
00:07:56,472 --> 00:07:56,647


145
00:07:58,734 --> 00:08:03,659
max_mating_distance, because
that is what we named our variable.

146
00:08:04,947 --> 00:08:09,609
And the second value,
the maximum value

147
00:08:09,809 --> 00:08:10,934
here of this random integer


148
00:08:11,134 --> 00:08:15,434
would simply be i plus
the max mating distance.

149
00:08:15,634 --> 00:08:16,197
Okay?

150
00:08:16,397 --> 00:08:19,734
max_mating_distance.

151
00:08:20,872 --> 00:08:26,309
And with the exact same logic,
we can simply now copy this line

152
00:08:28,372 --> 00:08:30,884
and say, jj

153
00:08:32,172 --> 00:08:35,272
is going to call the same function,
but of course here,

154
00:08:35,472 --> 00:08:38,834
the correct minimum
and maximum values

155
00:08:39,034 --> 00:08:45,497
are ii-max_mating_distance
and ii+max_mating_distance.

156
00:08:46,797 --> 00:08:49,134
So, what I need to implement now

157
00:08:49,334 --> 00:08:52,859
is simply
this get_random_int function.

158
00:08:53,034 --> 00:09:00,509
So I am going to do this here.
function_get_random_int

159
00:09:00,822 --> 00:09:01,334
Okay?

160
00:09:01,534 --> 00:09:05,296
And the two parameters, I am simply
going to name them "min" and "max"

161
00:09:05,558 --> 00:09:07,633
because these
are the min and max values.

162
00:09:08,558 --> 00:09:12,221
So I am being given here
two values, two integers.

163
00:09:12,421 --> 00:09:15,208
One is a minimum value,
one is a maximum value,

164
00:09:16,046 --> 00:09:20,358
And what I need to do, is,
I need to return here

165
00:09:20,558 --> 00:09:24,009
a random integer
that is within the acceptable range

166
00:09:24,209 --> 00:09:27,209
of this minimum value
and this maximum value.

167
00:09:27,584 --> 00:09:29,121
So, how could I do this?

168
00:09:29,321 --> 00:09:31,046
We have
all the JavaScript knowledge

169
00:09:31,246 --> 00:09:33,196
that we need
to implement this method.

170
00:09:33,396 --> 00:09:37,446
We always start with Math.random
if we want a random number.

171
00:09:38,171 --> 00:09:41,083
Math.Random, however,
has two problems,

172
00:09:41,283 --> 00:09:42,633
or three rather, for us.

173
00:09:42,833 --> 00:09:45,458
First of all, it returns
floating point number.

174
00:09:45,658 --> 00:09:47,471
We do not want that,
we want an integer/

175
00:09:47,833 --> 00:09:52,758
The second is that,
its range is 1, right?

176
00:09:52,958 --> 00:09:53,996
It goes from 0 to 1.

177
00:09:54,196 --> 00:09:57,308
Our range
needs typically to be much larger.

178
00:09:57,621 --> 00:09:59,521
Let us say we have
a Minimum Value 3

179
00:09:59,721 --> 00:10:01,371
and a Maximum Value of 6.

180
00:10:02,346 --> 00:10:05,871
The range
needs to be much larger, right?

181
00:10:06,071 --> 00:10:08,808
It needs to go from 3 to 6.

182
00:10:09,008 --> 00:10:11,296
That's a range of 3.

183
00:10:11,496 --> 00:10:14,683
Or, you know, if you actually
look at the integer,

184
00:10:14,883 --> 00:10:16,871
it is actually
a range of 4, so to speak,

185
00:10:17,071 --> 00:10:21,421
because it has 4 values,
3, 4, 5 and 6.

186
00:10:22,258 --> 00:10:23,708
And then the last issue

187
00:10:23,921 --> 00:10:27,083
is that
Math, Random always starts at 0.

188
00:10:27,283 --> 00:10:30,633
It has a range of 1,
but it is always fixed at 0.

189
00:10:30,833 --> 00:10:33,833
Our ranges
start at very different values.

190
00:10:34,033 --> 00:10:35,921
Whatever the min values, in fact.

191
00:10:36,121 --> 00:10:39,308
Okay, so how do we now
take this Math, Random

192
00:10:39,483 --> 00:10:41,433
and correct these three problems?

193
00:10:41,633 --> 00:10:44,183
Well, let us fix the range first

194
00:10:44,408 --> 00:10:45,683
because that is relatively easy.

195
00:10:45,883 --> 00:10:48,958
We just multiply
it by the range that we need. 

196
00:10:45,883 --> 00:10:48,883


197
00:10:49,158 --> 00:10:52,158
In our case,
we have to multiply it with

198
00:10:52,358 --> 00:10:56,183
{max-min} + 1.

199
00:10:56,383 --> 00:10:57,483
Why? 

200
00:10:58,258 --> 00:11:01,483
Well again, take this example
of min value of 3

201
00:11:01,696 --> 00:11:03,008
and a max value of 6.

202
00:11:04,508 --> 00:11:10,258
So the range here is three, 
in the floating point world

203
00:11:10,458 --> 00:11:12,546
or really four,
we have four values.

204
00:11:12,746 --> 00:11:16,033
I am in the integer world
3, 4, 5 and 6.

205
00:11:16,233 --> 00:11:21,770
So, max minus min
spans the range correctly

206
00:11:21,983 --> 00:11:25,871
but then we need to add 1
to account for this fourth value.

207
00:11:27,496 --> 00:11:29,658
And so now, we have to correct range

208
00:11:29,858 --> 00:11:33,621
but it is still floating point,
so now we need to floor this.

209
00:11:33,821 --> 00:11:35,708
Okay, 
Math, Floor

210
00:11:35,908 --> 00:11:38,258
which we have used before,
which simply takes

211
00:11:38,458 --> 00:11:43,071
a floating point, a value,
and reduces it

212
00:11:43,320 --> 00:11:46,271
or decreases
it to the closest integer.

213
00:11:46,746 --> 00:11:49,096
So again, in the case
of a minimum of 3

214
00:11:49,320 --> 00:11:50,708
and a maximum of 6,

215
00:11:50,908 --> 00:11:53,833
this would be 6 minus 3
so that is 3

216
00:11:54,020 --> 00:11:55,021
plus 1 is 4

217
00:11:55,221 --> 00:11:57,883
So, we are multiplying
Math,random times 4

218
00:11:58,083 --> 00:12:02,871
so we have a range of 0
to 3.999999999

219
00:12:04,033 --> 00:12:07,096
We floor that,
so that means we now get

220
00:12:07,296 --> 00:12:10,296
a value 0, 1, 2 and 3.

221
00:12:10,496 --> 00:12:11,983
They are the possible values.

222
00:12:12,470 --> 00:12:15,958
Now, there is only one thing
that is wrong about this

223
00:12:16,158 --> 00:12:20,046
which is, we have to correct range, 
it returns integer values

224
00:12:20,246 --> 00:12:23,683
but it returns the wrong ones

225
00:12:23,883 --> 00:12:28,221
because we are starting at 0, but
in fact, we have to start at min.

226
00:12:28,483 --> 00:12:31,171
So we simply add min.

227
00:12:32,196 --> 00:12:34,808
So now the correct values that
will be returned

228
00:12:35,008 --> 00:12:37,808
are 3, 4, 5 and 6.

229
00:12:38,546 --> 00:12:40,708
Okay, now we are simply
going to add here

230
00:12:40,921 --> 00:12:43,508
of course, that return statement

231
00:12:43,708 --> 00:12:46,883
that does in fact,
returns this value.

232
00:12:47,108 --> 00:12:50,846
Now that we have implemented
this get_random int function

233
00:12:51,496 --> 00:12:52,833
we are practically there.

234
00:12:53,033 --> 00:12:56,808
So, we now have a j,
and we have a jj.

235
00:12:57,183 --> 00:12:59,121
But there is one more problem here

236
00:12:59,321 --> 00:13:01,895
and that has to do with the borders.

237
00:13:02,308 --> 00:13:03,583
So, let us take a look.

238
00:13:03,783 --> 00:13:05,908
So the problem
has to do with borders

239
00:13:06,108 --> 00:13:09,996
and recall there here, on this grid,
we see borders

240
00:13:10,196 --> 00:13:12,008
but we do not want borders, right?

241
00:13:12,208 --> 00:13:14,095
If we have an individual here,

242
00:13:14,496 --> 00:13:16,608
and this individual
moves to the right

243
00:13:16,808 --> 00:13:18,820
or rather, if we just
want to consides

244
00:13:19,020 --> 00:13:22,183
its right side neighbor,
well there is no neighbor here

245
00:13:22,383 --> 00:13:25,658
but we said, okay, the borders
basically does not exist.

246
00:13:25,870 --> 00:13:29,295
if you go over here,
you would enter over here.

247
00:13:29,495 --> 00:13:34,295
So, really this cell here is
the right side border of this cell.

248
00:13:34,495 --> 00:13:36,670
And if this is an individual
living here,

249
00:13:36,870 --> 00:13:38,864
and the Mating Distance
would be one

250
00:13:39,064 --> 00:13:42,141
then we know,
the Mating Neighborhood

251
00:13:42,341 --> 00:13:44,691
is this area here.

252
00:13:45,091 --> 00:13:46,329
So we can say that

253
00:13:46,529 --> 00:13:48,741
but of course, we also have to
implement it,

254
00:13:48,929 --> 00:13:50,341
and how are we going
to implement it?

255
00:13:50,541 --> 00:13:52,704
Well, the trick really,
or the problem

256
00:13:52,904 --> 00:13:55,854
is that here,
in an array of ten elements,

257
00:13:56,054 --> 00:13:58,966
this would be an index of 9.

258
00:13:59,166 --> 00:14:01,816
If we now said, okay
we want to move to the next one,

259
00:14:02,016 --> 00:14:03,804
then we are simply
going to add 1

260
00:14:04,004 --> 00:14:06,629
then we are going to add up
an index 10

261
00:14:06,829 --> 00:14:09,316
and the index 10
in an array of ten elements

262
00:14:09,516 --> 00:14:10,341
does not exist.

263
00:14:10,541 --> 00:14:13,629
As you recall,
indices start at 0,

264
00:14:13,816 --> 00:14:16,104
and so, the largest index

265
00:14:16,616 --> 00:14:18,776
for an array with ten elements
is 9.

266
00:14:18,976 --> 00:14:20,851
So, this would throw an error.

267
00:14:21,126 --> 00:14:23,701
Vice versa, on the other hand,
if we are here,

268
00:14:23,901 --> 00:14:27,099
at index 0, and we want
to go to left,

269
00:14:27,299 --> 00:14:29,461
we would subtract -1.

270
00:14:30,586 --> 00:14:34,976
and then, we would be at index -1,
that would also throw an error

271
00:14:35,119 --> 00:14:35,969
in JavaScript.

272
00:14:36,156 --> 00:14:39,944
So we somehow have to map
these wrong indices

273
00:14:40,094 --> 00:14:43,144
that we calculate
to the correct indices.

274
00:14:43,344 --> 00:14:44,737
So how are we going to do this?

275
00:14:44,937 --> 00:14:48,225
The best way to think of this
is to map out this array

276
00:14:48,425 --> 00:14:50,723
so, again, we are going to assume
here ten elements.

277
00:14:50,923 --> 00:14:57,011
So, 0..1..2..3..
4..5..6..

278
00:14:57,323 --> 00:14:59,555
7..8 and 9

279
00:14:59,755 --> 00:15:03,765
and we could now say,
okay, this is essentially here

280
00:15:03,965 --> 00:15:06,543
this box of cells.

281
00:15:06,981 --> 00:15:09,360
Okay, so these are cells here

282
00:15:10,222 --> 00:15:12,270
or simply the elements in the array.

283
00:15:13,582 --> 00:15:16,386
And if we are here, for example,
and we want to go to the left

284
00:15:16,586 --> 00:15:17,328
that is easy, right?

285
00:15:17,528 --> 00:15:19,060
-1, and we are there.

286
00:15:19,260 --> 00:15:22,453
We want to go to the right,
+1 and we are there.

287
00:15:22,653 --> 00:15:23,940
So, that is straightforward.

288
00:15:24,140 --> 00:15:26,278
But, what about the issue here?

289
00:15:26,478 --> 00:15:28,303
So here, we would like
to go 1 to the right.

290
00:15:28,503 --> 00:15:31,290
Okay, +1,
yeah that is 10.

291
00:15:31,490 --> 00:15:32,566
That is not good.

292
00:15:32,766 --> 00:15:33,761
Same issue here.

293
00:15:33,961 --> 00:15:37,677
From 0, -1 to the left,
we are at -1, 

294
00:15:37,877 --> 00:15:39,052
that is not good.

295
00:15:39,489 --> 00:15:44,405
Really what we want
is we want to kind of bend

296
00:15:44,605 --> 00:15:47,604
this array here,
so that it becomes a circle.

297
00:15:47,804 --> 00:15:50,804
So, think of it like this here

298
00:15:51,004 --> 00:15:54,155
So, we would now bend
and reattach the loose ends

299
00:15:54,355 --> 00:15:57,113
to each other, and this
was our previous border here.

300
00:15:57,313 --> 00:16:03,058
So this is Element 0, and so on.
Here is a couple of elements

301
00:16:03,971 --> 00:16:06,908
and then eventually here,
this is Element 9.

302
00:16:08,071 --> 00:16:10,508
And now, it should just go this way.

303
00:16:10,708 --> 00:16:13,944
So, if you go from zero
over here,

304
00:16:14,106 --> 00:16:16,122
then you would actually
land at nine.

305
00:16:16,394 --> 00:16:20,306
And if you go from nine over here,
you would simply land at zero.

306
00:16:21,169 --> 00:16:23,506
So now this border
does not exist anymore

307
00:16:23,706 --> 00:16:26,069
we can just jump ahead
here in this circle

308
00:16:26,244 --> 00:16:28,492
to the left and to the right,
however far we want to

309
00:16:28,667 --> 00:16:30,125
we will never run into this issue.

310
00:16:30,325 --> 00:16:31,580
So how do we do this?

311
00:16:31,993 --> 00:16:35,855
Well, we can actually, kind of,
implement exactly this circle

312
00:16:36,043 --> 00:16:38,771
by simply imagining
that our array

313
00:16:38,971 --> 00:16:41,565
would continue over here

314
00:16:41,765 --> 00:16:44,261
Okay, so this would be
the same array.

315
00:16:44,461 --> 00:16:48,535
So, here will be 0..1..
2..and so on.

316
00:16:48,885 --> 00:16:51,270
Simply take the array
and put it here.

317
00:16:51,470 --> 00:16:55,570
Same thing over here,
imagine the array here

318
00:16:55,770 --> 00:16:58,824
would continue
or would be attached to the left

319
00:16:59,649 --> 00:17:03,788
So this would, in this case,
9...8..7

320
00:17:04,201 --> 00:17:06,301
just this array over here.

321
00:17:06,801 --> 00:17:10,173
And so now, it is relatively easier
to see right here, we go -1,

322
00:17:10,373 --> 00:17:12,988
here we go -2, here we go -3

323
00:17:13,188 --> 00:17:18,092
Vice versa, here we go +1,
here we ho +2, here we go +3,

324
00:17:19,129 --> 00:17:22,376
So the problem is,
mathematically speaking,

325
00:17:22,576 --> 00:17:25,810
that 0 to -1, 
we get to -1.

326
00:17:26,010 --> 00:17:28,283
From 0 to -2,
we get to -2.

327
00:17:28,483 --> 00:17:31,419
From 0 to -3,
we get to -3.

328
00:17:31,619 --> 00:17:35,251
These are not correct values
in terms of the array.

329
00:17:35,451 --> 00:17:40,394
We need to map those values,
the indices, to these indices.

330
00:17:41,857 --> 00:17:45,283
Okay, and then we would
have implemented this circle.

331
00:17:45,633 --> 00:17:46,779
Same over here, right?

332
00:17:46,979 --> 00:17:49,889
From 10 plus 1,
we would be at index 10.

333
00:17:51,714 --> 00:17:52,583
Sorry, 9 plus 1.

334
00:17:52,783 --> 00:17:55,040
9 plus 2, we would be at Index 11.

335
00:17:55,240 --> 00:17:58,010
9 plus 3, we would be at index 12
and so on.

336
00:17:58,210 --> 00:18:00,673
These are not correct indices
for the array.

337
00:18:00,873 --> 00:18:02,991
What we need to do,
is we need to map

338
00:18:03,191 --> 00:18:05,979
those to the correct arrays here.

339
00:18:06,179 --> 00:18:08,405
0, 1 and 2.

340
00:18:09,280 --> 00:18:10,437
So, how do we do this?

341
00:18:11,112 --> 00:18:14,125
Well, I think it is relatively
straightforward to see here.

342
00:18:14,962 --> 00:18:19,062
What we need to do is, we need
to start from this new index

343
00:18:19,262 --> 00:18:22,262
and first check if it is incorrect,
if it is incorrect,

344
00:18:22,762 --> 00:18:25,869
well then, it is either going
to be negative

345
00:18:26,069 --> 00:18:28,197
or larger than the maximum
available value.

346
00:18:28,822 --> 00:18:30,658
So, if it is on the negative end,

347
00:18:31,108 --> 00:18:32,878
then, what we are going to do
is we are going to take

348
00:18:33,078 --> 00:18:35,120
this new index that we calculated,

349
00:18:36,370 --> 00:18:41,264
and we are now simply going to add
the length of the array,

350
00:18:41,464 --> 00:18:43,087
which in this example here,
is 10.

351
00:18:43,287 --> 00:18:47,001
So, for example,
we would take this -2 value here

352
00:18:48,039 --> 00:18:50,915
and we would simply add 10.

353
00:18:51,602 --> 00:18:55,765
And this, of course, would give us
the correct mapping, 8.

354
00:18:57,890 --> 00:19:01,258
Over here, we are testing this
and we realise,

355
00:19:01,446 --> 00:19:03,971
okay, the index is too high,

356
00:19:04,271 --> 00:19:06,357
What we are going to do
is very similar.

357
00:19:06,582 --> 00:19:09,147
I am going to take this new index
that we calculated

358
00:19:09,347 --> 00:19:10,828
but that is too high.

359
00:19:11,565 --> 00:19:15,054
And we are going to subtract here
the length

360
00:19:15,254 --> 00:19:16,555
from this value.

361
00:19:17,043 --> 00:19:20,412
And so, as an example here,
let us take 11.

362
00:19:21,387 --> 00:19:22,765
So, obviously too high.

363
00:19:22,965 --> 00:19:27,209
We are going to subtract 10,
which gives us the correct mapping

364
00:19:27,409 --> 00:19:29,360
the correct index, 1.

365
00:19:30,385 --> 00:19:32,892
So, this is the best way
to think of it

366
00:19:33,092 --> 00:19:35,872
and we are now ready
to implement this on JavaScript.

367
00:19:36,922 --> 00:19:39,044
Okay, now that we know
how to solve this,

368
00:19:39,244 --> 00:19:40,489
let us implement this, okay?

369
00:19:40,689 --> 00:19:44,742
So, we now know we cannot
work with this j and jj values,

370
00:19:44,942 --> 00:19:47,629
as such, because they
might be out of bounce.

371
00:19:47,829 --> 00:19:48,944
So, what I am going to do

372
00:19:49,144 --> 00:19:51,395
is something
that is very straightforward.

373
00:19:51,595 --> 00:19:56,177
I am simply going to pass
these two values, j and jj,

374
00:19:56,377 --> 00:19:58,872
to a function
that checks

375
00:19:59,072 --> 00:20:02,354
whether they are indeed
in the correct bounce,

376
00:20:02,554 --> 00:20:07,979
and if they are not, that they will
be replaced by the correct index.

377
00:20:08,254 --> 00:20:09,504
So, what I am going
to do here,

378
00:20:11,291 --> 00:20:15,417
simply I am going to say
j equals get_bounded index.

379
00:20:15,592 --> 00:20:17,208
So, this is a function
we are going to define

380
00:20:17,408 --> 00:20:20,090
and I am going to pass j, okay?

381
00:20:20,915 --> 00:20:24,465
So, what this does,
is this simply passes the j value

382
00:20:24,665 --> 00:20:27,236
that I got here,

383
00:20:27,436 --> 00:20:30,316
to this function,
that checks if everything is alright

384
00:20:30,516 --> 00:20:32,850
and if it is not alright,
it is going to fix it

385
00:20:33,050 --> 00:20:35,472
and then whatever it returns,
I can be sure

386
00:20:35,672 --> 00:20:37,513
this is now an okay value.

387
00:20:37,951 --> 00:20:41,046
So, I am going to do
the exact same thing with jj.

388
00:20:41,584 --> 00:20:47,163
So, I am going to say,
jj equals get_bounded_index

389
00:20:47,363 --> 00:20:49,213
and I am going to pass jj here.

390
00:20:49,988 --> 00:20:52,301
So again, whatever comes out
of this function,

391
00:20:52,489 --> 00:20:56,965
after it dealt with jj
is a good (inaudible) value for jj.

392
00:20:57,228 --> 00:20:58,778
So, I am going to store
it in here

393
00:20:58,978 --> 00:21:04,414
and then, when I am done, then I can
finally return this Mating Partner

394
00:21:04,614 --> 00:21:10,418
which lives on grid [j] [jj].

395
00:21:13,293 --> 00:21:16,055
Alright, so what we need to do

396
00:21:16,360 --> 00:21:19,010
is we need to implement
this function

397
00:21:19,773 --> 00:21:21,648
get_bounded_index.

398
00:21:21,885 --> 00:21:22,946
Let us do this here.

399
00:21:24,409 --> 00:21:32,296
So, function get_bounded_index.

400
00:21:33,359 --> 00:21:36,160
and so, I am going
to call this

401
00:21:36,360 --> 00:21:39,160
this parameter here, simply,
index.

402
00:21:39,423 --> 00:21:41,511
That is the value that I will get.

403
00:21:43,224 --> 00:21:47,085
So now I have to make sure
that this index is correct.

404
00:21:47,810 --> 00:21:49,599
So, what do I need to do?

405
00:21:50,287 --> 00:21:53,399
Well, I need to check first
whether the index

406
00:21:53,599 --> 00:21:55,237
is correct itself.

407
00:21:55,437 --> 00:21:58,774
It can be wrong in two ways,
it can either be smaller than zero

408
00:21:58,974 --> 00:22:02,041
or it could be larger
than grid length.

409
00:22:02,241 --> 00:22:06,430
In this case, I would need
to fix the value.

410
00:22:06,630 --> 00:22:08,805
If none of those
two conditions are true

411
00:22:09,005 --> 00:22:11,735
then the index is already
quite alright.

412
00:22:11,985 --> 00:22:13,422
And I cannot just return that.

413
00:22:13,597 --> 00:22:14,647
So, what I am going to do

414
00:22:14,884 --> 00:22:18,038
is I am going to just temporarily
store the index here

415
00:22:18,238 --> 00:22:21,288
in this variable
bounded_index

416
00:22:23,063 --> 00:22:26,188
Okay, and this bounded index
is ultimately

417
00:22:26,388 --> 00:22:28,097
what I am going to return.

418
00:22:28,297 --> 00:22:30,532
Okay, bounded_index.

419
00:22:31,082 --> 00:22:34,345
Now here, at the moment, this would
be a relatively silly function

420
00:22:34,520 --> 00:22:37,070
it would simply get the index,
it would store in it the variable

421
00:22:37,270 --> 00:22:39,752
and the immediately
return that variable.

422
00:22:39,952 --> 00:22:42,165
So it would not actually
do anything.

423
00:22:42,365 --> 00:22:45,107
So, this will be
the default case

424
00:22:45,470 --> 00:22:47,948
if the index is indeed okay.

425
00:22:48,148 --> 00:22:50,648
What I am going to implement now
is the scenario

426
00:22:50,848 --> 00:22:51,936
where it is not okay.

427
00:22:52,136 --> 00:22:55,573
So, it can be not okay
in two possible cases.

428
00:22:56,011 --> 00:22:58,911
So, it could either be
that the index

429
00:22:59,111 --> 00:23:01,518
is smaller than zero,
okay?

430
00:23:01,718 --> 00:23:03,114
Smaller than zero.

431
00:23:03,801 --> 00:23:06,834
So, as we have seen before,
what we need to do in this case,

432
00:23:07,034 --> 00:23:10,034
is we simply need to take the index

433
00:23:10,534 --> 00:23:13,109
Okay, on the slides, we are going
to call this new index

434
00:23:13,509 --> 00:23:16,309
and we need to add the length
of the grid.

435
00:23:16,509 --> 00:23:19,809
which is stored
in the global variable grid_length.

436
00:23:20,097 --> 00:23:26,109
Okay, so that is our corrected
bounded index.

437
00:23:26,384 --> 00:23:29,147
So I am going to store that
in bounded index.

438
00:23:33,909 --> 00:23:36,408
The other option
is that

439
00:23:36,608 --> 00:23:38,081
the index is too large.

440
00:23:38,556 --> 00:23:44,356
So, I am simply going to say
if index is larger

441
00:23:46,881 --> 00:23:50,069
or equal to grid_length.

442
00:23:50,269 --> 00:23:51,994
Do not forget the equal

443
00:23:52,194 --> 00:23:54,356
because if it is equal
to grid length

444
00:23:54,544 --> 00:23:56,306
it is also too large

445
00:23:56,506 --> 00:23:59,444
because we recall again,
that indices 

446
00:23:59,944 --> 00:24:02,644
of array start at zero,
so the max value

447
00:24:02,844 --> 00:24:05,406
is not the length of the array

448
00:24:05,606 --> 00:24:06,956
but the length minus one.

449
00:24:07,156 --> 00:24:09,177
So, if it is actually
equal to the length,

450
00:24:09,377 --> 00:24:10,977
it is already too large.

451
00:24:11,252 --> 00:24:14,690
Okay, so in this case,
we have seen that the correct way

452
00:24:14,890 --> 00:24:18,165
to address this issue here
would simply be, to say,

453
00:24:18,365 --> 00:24:23,302
take the index, and now subtract
grid_length from it.

454
00:24:24,965 --> 00:24:27,140
 Minus, grid_lenth.

455
00:24:29,690 --> 00:24:31,752
Alright, so down here,
now I know

456
00:24:31,940 --> 00:24:34,290
that bounded index is correct.

457
00:24:34,490 --> 00:24:37,840
Either nothing has happened, if none
of these "if" statements were true

458
00:24:38,040 --> 00:24:39,077
then it is fine.

459
00:24:39,277 --> 00:24:42,052
If the index was smaller,
it is now corrected.

460
00:24:42,265 --> 00:24:45,290
If it is too large,
it is now corrected as well.

461
00:24:45,815 --> 00:24:49,065
Notice also, that I am not using
"if-else".

462
00:24:49,265 --> 00:24:51,065
The "else" here
would not be correct

463
00:24:51,265 --> 00:24:53,640
because if I say
if the index is negative,

464
00:24:53,840 --> 00:24:54,715
"else"

465
00:24:54,915 --> 00:24:57,740
then this would include
even the correct indices.

466
00:24:57,940 --> 00:25:01,390
This is why, I am simply
adding a second "if".

467
00:25:01,590 --> 00:25:03,702
So, I am first checking
if this condition is true,

468
00:25:03,902 --> 00:25:06,190
then I am checking,
if this condition is true.

469
00:25:06,390 --> 00:25:09,686
I know that these are exclusive,
so, all good here.

470
00:25:11,023 --> 00:25:14,536
Alright, so, this concludes
this lecture.

471
00:25:14,736 --> 00:25:17,148
We have now
correctly implemented

472
00:25:17,348 --> 00:25:20,086
the Mating Partner Functionality

473
00:25:20,548 --> 00:25:21,998
by simply saying

474
00:25:22,198 --> 00:25:25,636
we have to define here
the correct bounce

475
00:25:25,836 --> 00:25:29,223
of our sub-grid

476
00:25:29,423 --> 00:25:31,873
that is the Mating Area

477
00:25:32,073 --> 00:25:33,511
the acceptable Mating Area.

478
00:25:33,711 --> 00:25:37,598
Then, we need to get
the corresponding random integers.

479
00:25:37,798 --> 00:25:39,686
for this sub-grid

480
00:25:39,886 --> 00:25:42,723
and this we implement
with this "get_random_int" function.

481
00:25:43,836 --> 00:25:45,561
And then, we corrected
for the fact

482
00:25:45,786 --> 00:25:48,273
that these indices
may be out of bound

483
00:25:48,473 --> 00:25:52,511
and we did this by using
this "get_bounded_index" function.

484
00:25:53,161 --> 00:25:58,561
So, that seems like a lot of code
or at least a lot of logic here

485
00:25:58,761 --> 00:26:00,336
and this true,
but remeber,

486
00:26:00,536 --> 00:26:02,273
you can now reuse this code

487
00:26:02,473 --> 00:26:05,973
in any spatial simulation
that you are going to implement.

488
00:26:06,173 --> 00:26:08,661
independent of the question
at hand.

489
00:26:08,861 --> 00:26:10,998
Here, we have
an evolutionary question.

490
00:26:11,261 --> 00:26:14,648
We care about spatial models,
we care about (inaudible) and so on

491
00:26:14,848 --> 00:26:16,948
but you could use
this exact same code

492
00:26:17,148 --> 00:26:20,723
to implement any process in space.

493
00:26:20,923 --> 00:26:23,736
So that is quite powerful knowledge
right here.

494
00:26:23,936 --> 00:26:25,686
Alright, so in the next lecture,

495
00:26:25,886 --> 00:26:27,473
we will have to take care

496
00:26:27,673 --> 00:26:32,798
of the final function
that we have not implemented yet,

497
00:26:32,998 --> 00:26:34,986
that is, to get Offspring Function.

498
00:26:35,223 --> 00:26:36,848
 So, we will do this
in the next lecture

499
00:26:37,048 --> 00:26:38,273
and I will see you there.

