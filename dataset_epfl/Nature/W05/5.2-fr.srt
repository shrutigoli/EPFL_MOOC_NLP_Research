1
00:00:02,949 --> 00:00:05,949
Bienvenue. Nature dans le Code.
Nous sommes dans le chapitre 5, la leçon 2

2
00:00:06,118 --> 00:00:09,456
Dans cette leçon, nous allons
commencer par la mise en œuvre

3
00:00:09,647 --> 00:00:11,122
de notre simulation spatiale.

4
00:00:11,375 --> 00:00:15,200
Bon, nous sommes ici dans
un document vide. Nous allons

5
00:00:15,385 --> 00:00:22,785
Pour commencer en disant
DOCTYPE html comme toujours.

6
00:00:23,409 --> 00:00:28,909
Alors bien sûr, nous avons notre
balise html que nous allons fermer

7
00:00:29,108 --> 00:00:38,296
tout de suite et notre balise «tête».
Ensuite, bien sûr la balise "body" aussi.

8
00:00:39,301 --> 00:00:44,838
Maintenant, dans cette simulation, nous allons
visualiser un grand nombre et ainsi

9
00:00:45,149 --> 00:00:48,849
nous allons utiliser D3. Pour cette
raison, nous allons mettre la

10
00:00:49,068 --> 00:00:54,268
balise 'Script' ici dans le corps comme
nous l'avons fait dans le chapitre 3.

11
00:00:57,078 --> 00:01:03,515
Bien que nous aimerions développer
une jolie sophistiquée

12
00:01:03,722 --> 00:01:06,022
simulation spatiale.
Comment peut-on commencer?

13
00:01:06,228 --> 00:01:09,990
Eh bien, encore une fois, je sais que cela
semble banal, mais vous commencez juste à la

14
00:01:10,191 --> 00:01:15,379
premier pas. Il suffit de demander,
«ce qui serait la première chose que je voudrais

15
00:01:15,550 --> 00:01:18,400
faire dans mon code?
Quelle serait la première fonction

16
00:01:18,599 --> 00:01:24,774
Il faudrait que j'appeler?
"Nous avons parlé de cette grille

17
00:01:24,949 --> 00:01:27,711
que nous voulons mettre en œuvre
de manière sans doute la première fonction,

18
00:01:27,893 --> 00:01:30,856
quelque chose comme la première
fonction sera appelée 'init_grid'

19
00:01:31,063 --> 00:01:33,963
où nous initialisons cette grille
et bien sûr nous aurions

20
00:01:34,172 --> 00:01:41,147
besoin de mettre en œuvre cette méthode
avant que nous puissions l'appeler «init_grid».

21
00:01:42,750 --> 00:01:45,138
Je ne reçois pas
toute coloration syntaxique ici.

22
00:01:45,357 --> 00:01:49,982
Ceci est parce que je n'ai pas enregistré
le fichier encore alors laissez-moi enregistrez le fichier.

23
00:01:50,553 --> 00:01:56,641
Enregistrer sous; J'ai des exemples
de code ici. Je vais appeler cette

24
00:01:56,839 --> 00:02:04,939
simulation spacial point html. Très bien,
il semble beaucoup mieux.

25
00:02:06,200 --> 00:02:09,900
Avant que je mets en œuvre cela
je voudrais penser

26
00:02:10,401 --> 00:02:16,838
à un certain nombre de valeurs je vais
utiliser tout au long de la simulation

27
00:02:17,033 --> 00:02:20,183
que je voudrais mettre en place comme
des variables globales ici au sommet.

28
00:02:20,934 --> 00:02:26,109
L'une des variables est évidemment
la taille de la grille et ainsi

29
00:02:26,316 --> 00:02:30,054
Je vais appeler ce grid_length
et je vais mettre cela à 100

30
00:02:30,207 --> 00:02:34,807
oui, alors nous aurons une grille
de taille 100 x 100 parce que nous voulons

31
00:02:34,980 --> 00:02:39,805
une grille carrée. Cela signifie que
nous aurons 10 000 cellules et donc

32
00:02:39,989 --> 00:02:44,114
une taille de population de 10 000. Cela
semble être une belle taille de la population.

33
00:02:45,119 --> 00:02:48,132
Comme nous l'avons dit, la grille
elle-même va être un tableau.

34
00:02:48,367 --> 00:02:51,417
Je vais installer ce tableau vide.
Ce sera finalement

35
00:02:51,612 --> 00:02:55,912
un tableau à 2 dimensions donc
ce tableau contiendra d'autres tableaux

36
00:02:56,321 --> 00:03:00,746
à savoir les lignes. Bien sûr, cela est
une simulation de population génétique

37
00:03:00,931 --> 00:03:08,981
donc je vais devoir a1, a1, a1, a2,
génotypes a2 et a2

38
00:03:09,395 --> 00:03:13,845
et je dois donc les fréquences
a1 et a2 donc je vais mettre l'allèle a1

39
00:03:14,016 --> 00:03:19,541
fréquence de 'p' ici à 0,5. Aussi comme
nous venons de le voir avant,

40
00:03:19,750 --> 00:03:22,800
l'une des variables que nous voulons
régler et finalement

41
00:03:22,979 --> 00:03:26,591
changer c'est cette distance
d'accouplement donc je vais appeler cette

42
00:03:26,817 --> 00:03:30,554
max_mating_distance juste
pour être clair que ce n'est pas

43
00:03:30,750 --> 00:03:34,175
une moyenne ou quelque chose comme ça.
C'est tout simplement un maximum.

44
00:03:35,194 --> 00:03:39,894
Je vais commencer par la valeur 1
et nous pouvons changer cela plus tard.

45
00:03:40,097 --> 00:03:44,122
Nous pouvons changer tout cela plus tard.
Puis aussi, comme je l'ai dit, nous allons

46
00:03:44,317 --> 00:03:47,979
effectivement mettre
les individus sur cette grille maintenant.

47
00:03:49,134 --> 00:03:52,197
Quelles seront ces personnes ?
Eh bien, ils seront essentiellement

48
00:03:52,358 --> 00:03:55,933
simplement de génotypes.
Je veux garder une trace de combien

49
00:03:56,132 --> 00:04:00,870
génotypes j'ai et je vais
donc installer ces 3 variables:

50
00:04:01,917 --> 00:04:12,542
A1A1, A1A2 et A2A2.
Ce sont des compteurs pour le simple

51
00:04:12,747 --> 00:04:15,760
nombre de génotypes que
nous avons et en conséquence,

52
00:04:15,932 --> 00:04:23,132
Je vais initialiser ceux à 0. Ensuite, en fin
de compte, nous allons exécuter certains

53
00:04:23,292 --> 00:04:26,517
générations et je veux savoir où
dans la simulation, nous sommes

54
00:04:26,680 --> 00:04:29,830
donc j'aurais probablement besoin de quelque
chose comme un compteur de génération

55
00:04:29,998 --> 00:04:32,361
et je vais mettre cela à 0.
Encore une fois, vous pouvez le faire

56
00:04:32,531 --> 00:04:35,706
un peu différemment. Vous pourriez
commencer par la fonction

57
00:04:36,532 --> 00:04:40,257
comme nous l'avons par exemple
au chapitre 4 et au lieu de mettre en œuvre

58
00:04:40,595 --> 00:04:43,895
votre code, commencer à développer votre code
et que vous vous rendez compte, "Mmm ...

59
00:04:44,094 --> 00:04:47,294
Ceci devrait probablement être une variable
globale, "vous pouvez configurer ces

60
00:04:47,480 --> 00:04:51,055
variables globales.
Ici, je suis allé un peu l'inverse.

61
00:04:51,231 --> 00:04:55,106
Avant que je me suis lancé, je savais que
je devais utiliser un tas de ces

62
00:04:55,422 --> 00:05:01,122
variables ici; ces valeurs et un moyen
de garder la trace des choses

63
00:05:01,365 --> 00:05:04,290
donc je mets ceux-là en premier.
Vous pouvez le faire de toute façon;

64
00:05:05,086 --> 00:05:08,886
celui que tu préfères.
Maintenant, nous avons ce init_grid.

65
00:05:09,123 --> 00:05:12,673
Qu'est-ce que cela devrait être?
Nous aimerions initialiser un tableau

66
00:05:12,852 --> 00:05:16,114
à 2 dimensions ici. À l'heure actuelle,
nous avons notre variable de grille. C'est un

67
00:05:16,292 --> 00:05:19,142
tableau unidimensionnel.
À l'heure actuelle, il ne stocke rien.

68
00:05:19,312 --> 00:05:23,124
Cela devrait stocker de nombreuses matrices
qui seront les lignes de  notre grille

69
00:05:23,357 --> 00:05:26,357
ou colonnes en fonction de la façon
dont vous souhaitez en pensez.

70
00:05:27,017 --> 00:05:32,130
Ensuite, dans ces tableaux au sein
du tableau de grille, nous aurons

71
00:05:32,351 --> 00:05:35,951
l'individu nous allons donc continuer
et le mettre en place.

72
00:05:36,322 --> 00:05:43,309
Je vais avoir besoin d'une boucle ici,
donc for (var i = 0; i est plus petit que

73
00:05:43,527 --> 00:05:48,440
la longueur de la grille.
Voilà la condition et bien sûr i = i + 1.

74
00:05:50,456 --> 00:05:56,956
Maintenant, je voudrais dire: "D'accord,
je dois pousser un tableau vide dans

75
00:05:57,317 --> 00:06:00,405
la grille ici." Une façon de le faire
serait simplement de dire:

76
00:06:00,646 --> 00:06:05,521
grid.push ([]); un tableau vide
comme nous l'avons fait avant

77
00:06:05,865 --> 00:06:08,278
Il y a une autre façon
en fait que vous pouvez le faire

78
00:06:08,453 --> 00:06:11,615
et je vais utiliser la voie alternative.
Je vais simplement dire:

79
00:06:12,006 --> 00:06:21,418
grille [i] = [] donc cela affecte
le tableau vide; donc celui-là

80
00:06:22,323 --> 00:06:28,086
à cet emplacement dans la matrice.
Java script nous permet de faire cela

81
00:06:28,362 --> 00:06:31,862
et cela est tres pratique
et l'autre chose, autre raison

82
00:06:32,031 --> 00:06:34,269
pourquoi je fais cela, c'est parce que
nous allons utiliser ce type

83
00:06:34,435 --> 00:06:38,785
de notation plus tard pour récupérer
les valeurs mais juste pour vous dire tu peux

84
00:06:38,960 --> 00:06:43,973
non seulement utiliser cette notation
avec les indices pour récupérer

85
00:06:44,144 --> 00:06:47,794
les valeurs, les éléments d'un tableau.
Vous pouvez également l'utiliser pour les définir

86
00:06:47,969 --> 00:06:52,156
et c'est ce que nous faisons ici.
Super, maintenant j'ai mon tableau

87
00:06:52,336 --> 00:06:56,549
à 2 dimensione
et je suis actuellement dans la boucle

88
00:06:56,744 --> 00:07:00,732
ici qui met en place cela donc je peux
maintenant avoir une autre boucle qui est

89
00:07:00,914 --> 00:07:03,952
imbriqué ici et parce qu'il est
imbriqué, je vais utiliser cette

90
00:07:04,190 --> 00:07:08,365
(Var ii = 0 notation. Encore une fois,
vous pourriez en principe utiliser i, j

91
00:07:08,555 --> 00:07:12,693
et ainsi de suite, mais je vais utiliser
cette notation i et ii  et si vous

92
00:07:12,857 --> 00:07:15,857
me suivez, je vous suggère de faire la même chose.
Encore une fois, je l'utilise parce que

93
00:07:16,032 --> 00:07:19,669
je trouve cela plus facile parce que
je vois immédiatement le niveau

94
00:07:19,833 --> 00:07:24,983
d'imbrication où je suis, donc je vais utiliser cet ii.
Encore une fois, cette condition ici

95
00:07:25,166 --> 00:07:30,191
ii serait plus petite que la longueur
de la grille. Toujours dans la seconde

96
00:07:30,375 --> 00:07:35,675
dimension car encore une fois, nous avons dit
que nous voulons avoir une grille carrée.

97
00:07:36,354 --> 00:07:43,379
Ensuite, bien sûr, l'incrément.
Bon et maintenant à la grille [i]

98
00:07:43,591 --> 00:07:48,316
que nous avons précédemment initialisé
comme un tableau vide, je peux mettre

99
00:07:48,488 --> 00:07:58,988
maintenant en ii individu.
Ce sera très pratique que vous pouvez

100
00:07:59,160 --> 00:08:03,098
voir, cela est un peu comme un système
de coordonnées X et Y

101
00:08:03,297 --> 00:08:08,597
qui est une notation très pratique ici.
Que mettrais-je  ici?

102
00:08:08,776 --> 00:08:12,288
Je voudrais mettre 1 de 3 génotypes
et je vais simplement mettre

103
00:08:12,462 --> 00:08:19,937
ceux-là sous forme de chaînes; A1A1, A1A2
et A2A2. Maintenant, je l'ai dit ici que je voudrais

104
00:08:20,130 --> 00:08:26,205
initialiser cette population où
p = 0,5 alors ce sont les chiffres

105
00:08:26,401 --> 00:08:30,138
de génotypes que je besoin?
Eh bien, vous savez maintenant de

106
00:08:30,330 --> 00:08:33,330
chapitres Hardy-Weinberg,
il y a plusieurs façons d'initialiser

107
00:08:33,520 --> 00:08:40,983
une population donnée une fréquence
de l'allèle mais nous aimerions être en

108
00:08:41,173 --> 00:08:44,786
celui qui est considéré comme stable
qui est la fréquence Hardy-Weinberg.

109
00:08:44,947 --> 00:08:49,522
Ce que je voudrais faire est,
je tiens à mettre ceux-ci en

110
00:08:49,712 --> 00:08:54,862
fréquences Hardy-Weinberg, données
p = 0,5 et comme vous vous souvenez,

111
00:08:55,039 --> 00:08:58,927
les fréquences Hardy-Weinberg
sont p carré, 2pq et q carré

112
00:08:59,128 --> 00:09:09,790
de sorte que nous aurons 25% A1A1, 50%
et 25% a1a2 A2A2. Comment vais-je faire cela?

113
00:09:10,032 --> 00:09:15,420
Eh bien, il y a un moyen facile.
Je peux le faire en utilisant Math.random

114
00:09:15,862 --> 00:09:19,824
et je vais vous montrer comment
cela fonctionne en ce moment.

115
00:09:20,105 --> 00:09:23,593
Compte tenu de la fréquence p d'allèle a1,
nous savons que la fréquence Hardy-Weinberg

116
00:09:23,775 --> 00:09:32,500
des génotypes A1A1, A1A2
et A2A2 seront p carré, 2pq et

117
00:09:32,667 --> 00:09:37,742
q carré et nous savons que ceux-ci ajoutent à 1.
Vous pouvez penser à cela comme une ligne

118
00:09:37,929 --> 00:09:44,966
numerique entre 0 et 1 et ces 3 numéros
sont comme des étirements qui

119
00:09:45,141 --> 00:09:52,166
lorsqu'il est ajouté, s'ajoute exactement à 1.
Par exemple, vous pourriez passer de 0

120
00:09:52,352 --> 00:09:59,114
pour la distance de p carré quelle que soit
la valeur concrète est jusquè-là et ainsi

121
00:09:59,302 --> 00:10:04,702
qui serait p carré ici. Alternativement,
vous pouvez passer de 1

122
00:10:04,892 --> 00:10:10,967
à gauche vers 0 pour cette distance de q carré
quelle que soit cette valeur

123
00:10:11,162 --> 00:10:18,412
dans votre exemple concret.
Ici serait 1 - q au carré et il doit être que

124
00:10:18,601 --> 00:10:26,739
ce tronçon ici est exactement 2PQ.
Cette gamme, 0 à 1 est bien sûr

125
00:10:26,931 --> 00:10:30,781
exactement la plage de numéros
qui sont retournés par Math.random

126
00:10:30,936 --> 00:10:34,911
de sorte que vous pouvez imaginer que
Math.random retourne essentiellement

127
00:10:35,101 --> 00:10:40,739
un point aléatoire sur cette ligne de numéro.
Corrélativement, vous pouvez alors

128
00:10:40,914 --> 00:10:45,489
choisir en fonction de l'étendue
où ces terres que le génotype

129
00:10:45,679 --> 00:10:50,966
sera. Par exemple, disons que
Math.random retourne 0,4

130
00:10:51,148 --> 00:10:54,898
quelque chose et cela est peut-être
quelque part autour ici, donc il

131
00:10:55,082 --> 00:10:59,694
atterri maintenant sur le tronçon
qui est ici donnée par ce 2pq qui

132
00:10:59,889 --> 00:11:03,689
correspond bien sûr aux génotypes A1A2.
Dans ce cas,

133
00:11:03,880 --> 00:11:07,042
vous allez choisir un génotype A1A2.
Corrélativement,

134
00:11:07,237 --> 00:11:13,025
disons Math.random retourne 0,1
ou quelque chose sur cet ordre

135
00:11:13,226 --> 00:11:16,751
alors peut-être ici. Il a atterri sur
ce tronçon ici qui est

136
00:11:16,924 --> 00:11:21,549
couvert par p carré qui signifie que
vous choisiriez le génotype A1A1.

137
00:11:22,052 --> 00:11:26,090
Dernièrement, disons que
vous obtenez un retour Math.random

138
00:11:26,286 --> 00:11:29,148
la valeur de quelque chose comme 0,9.
Il atterrit sur ce tronçon.

139
00:11:29,352 --> 00:11:37,152
D'accord, c'est un génotype A2A2.
Idée très simple. Il suffit de choisir un nombre

140
00:11:37,334 --> 00:11:41,434
au hasard compris entre 0 et 1
et où il atterrit sur la ligne de nombre,

141
00:11:41,745 --> 00:11:45,495
vous serez alors choisir le génotype
correspondant. Vous avez juste

142
00:11:45,689 --> 00:11:48,402
de savoir où il a atterri exactement.

143
00:11:48,596 --> 00:11:52,296
Bon maintenant que nous savons comment
faire cela, nous pouvons le mettre en place

144
00:11:52,765 --> 00:11:57,628
ici; dans cette boucle. Nous pouvons
bien sûr commencer par dessiner ce

145
00:11:57,825 --> 00:12:00,125
nombre aléatoire que nous venons de parler;

146
00:12:00,336 --> 00:12:04,786
random_number et ceci est simplement
un nombre aléatoire entre 0 et 1

147
00:12:04,998 --> 00:12:10,323
alors Math.random est parfait.
Ce nombre aléatoire est maintenant le point

148
00:12:10,507 --> 00:12:16,082
sur notre ligne entre 0 et 1. Maintenant,
nous pouvons utiliser exactement cette

149
00:12:16,302 --> 00:12:21,190
logique que nous venons de développer
de sorte que nous pouvons dire d'accord si cet nombre

150
00:12:21,382 --> 00:12:30,132
aléatoire est maintenant plus petit
que p carré donc plus petit que PXP

151
00:12:32,134 --> 00:12:37,809
alors cela signifie que je vais dessiner
un génotype A1A1. Ce que je vais

152
00:12:38,012 --> 00:12:47,950
faire ici est que je vais mettre
cette grille [i] [ii] pour A1A1 et je vais

153
00:12:48,145 --> 00:12:52,133
utiliser des majuscules ici.
D'accord et parce que je veux garder

154
00:12:52,347 --> 00:12:56,885
la trace du nombre de génotypes de A1A1
je vais augmenter ici

155
00:12:57,080 --> 00:13:05,230
cette variable compteur de 1.
Bon la prochaine étape serait

156
00:13:05,426 --> 00:13:11,676
'Else if'; donc quelque chose d'autre
est arrivé et il y a encore 2

157
00:13:11,865 --> 00:13:15,278
conditions, 2 possibilités
donc je vais dire 'else if'.

158
00:13:16,840 --> 00:13:20,053
Maintenant, je vais venir
de l'autre côté où je vais dire

159
00:13:20,320 --> 00:13:23,708
d'accord, ce nombre pourrait être
en fait sur le bord droit de la

160
00:13:23,933 --> 00:13:28,846
ligne de numéro que nous venons de
développer de sorte qu'il serait plus grand que

161
00:13:29,055 --> 00:13:36,368
1 - q carré et donc la façon de dire ceci est
simplement bien else if (nombre

162
00:13:36,568 --> 00:13:45,993
est supérieur à 1 - qx q. Maintenant,
bien sûr, nous devons être prudents

163
00:13:46,235 --> 00:13:52,698
parce que nous ne disposons pas q. Nous avons
seulement la configuration p ici, mais bien sûr,

164
00:13:52,899 --> 00:13:58,762
nous savons que q = 1 - p,
donc je vais le remplacer par 1 - p

165
00:13:59,196 --> 00:14:04,233
et même plus ici, donc
ce terme est bien sûr toujours

166
00:14:04,411 --> 00:14:15,799
l'équivalent à 1 - q carré si tel est
le cas alors je dessinais un génotype A2A2

167
00:14:15,988 --> 00:14:27,913
Grille [i] [ii] = A2A2. Bien sûr,
je vais aussi garder

168
00:14:28,147 --> 00:14:33,747
trace des génotypes A2A2
donc je vais augmenter cela par 1.

169
00:14:35,680 --> 00:14:38,992
Si aucun de ces 2 choses se produisent
alors d'autre; cela signifie que je suis au

170
00:14:39,214 --> 00:14:43,901
milieu sur ma ligne de nombre et
je dessinais un génotype A1A2 donc je peux

171
00:14:44,133 --> 00:14:56,758
dire tout simplement d'autre grille [i] [ii] = A1A2.
Bien sûr, je garde aussi une trace de

172
00:14:56,948 --> 00:15:04,973
génotype a1a2 donc a1a2 = a1a2 + 1
incrimenting simplement ce compteur

173
00:15:05,207 --> 00:15:09,182
par 1 et voilà. Cela initialise ma grille.

174
00:15:09,412 --> 00:15:15,887
Voyons si nous avons fait tout
correctement donc après cette boucle "for"

175
00:15:16,080 --> 00:15:25,255
ici, je voudrais maintenant sortir
les A1A1'S, A2A2 et

176
00:15:25,683 --> 00:15:32,008
a1a2. Je vais dire console. log a1a1
puis l'hétérozygote

177
00:15:32,193 --> 00:15:40,581
a1a2 et A2A2 et de voir si elles sont
à peu près l'équilibre de Hardy-Weinberg

178
00:15:40,816 --> 00:15:43,766
Maintenant, je dis «à peu près»
parce qu'ils ne vont pas

179
00:15:43,952 --> 00:15:48,190
pour être mathématiquement
précisément à Hardy-Weinberg.

180
00:15:48,509 --> 00:15:56,259
Avec P = 0,5 et 10 000 personnes,
nous avons dit que 25% serait de parfait

181
00:15:56,459 --> 00:16:04,184
valeurs Hardy-Weinberg
donc 2500 de l'A1A1, 5000 de l'A2A2 et

182
00:16:04,435 --> 00:16:10,085
2500 a1a2 mais parce que nous avons
attribué ces valeurs au hasard

183
00:16:10,325 --> 00:16:13,687
en utilisant ce Math.random
il y aura un peu de hasard, certains

184
00:16:13,879 --> 00:16:17,217
stochasticité ici mais
ces chiffres devraient être à peu près

185
00:16:17,416 --> 00:16:25,604
la gamme 2500, 5000 et 2500.
Sauvons ceci et puis aller sur

186
00:16:25,842 --> 00:16:32,504
le navigateur et ouvrir ce document.
Fichier ouvert; Voici ma

187
00:16:32,697 --> 00:16:35,260
simulation spatiale. Je vais ouvrir ceci.
Bien sûr, je ne vois pas

188
00:16:35,448 --> 00:16:38,398
quoi que ce soit ici parce que je me
connecte tout simplement au

189
00:16:38,589 --> 00:16:43,139
console pour voir, développeur,
Console JavaScript et ici

190
00:16:43,305 --> 00:16:47,443
sont les nombres et vous pouvez
voir ceux-ci sont très près de 2500,

191
00:16:47,625 --> 00:16:52,575
5000 et 2500. Vous pouvez recharger
cela et vous pouvez le voir il y aura

192
00:16:52,756 --> 00:16:56,931
une certaine variation ici, mais
cela est exact. Ceci est assez proche

193
00:16:57,181 --> 00:17:03,818
à cet équilibre exact et il est
assez proche étant donné la

194
00:17:04,040 --> 00:17:06,290
stochasticité que nous attendons

195
00:17:06,451 --> 00:17:08,238
du processus aléatoire ici.

196
00:17:08,494 --> 00:17:10,819
Bien joué! Vous avez mis en place la grille.

197
00:17:11,016 --> 00:17:13,728
Bien que vous avez mis en place la grille.
Nous sommes prêts à

198
00:17:13,908 --> 00:17:18,083
aller. Maintenant, nous devons mettre en œuvre
les générations. Qu'est-ce qui se passe sur

199
00:17:18,268 --> 00:17:21,443
cette grille à chaque génération?
Découvrons-le. Nous allons la mettre en oeuvre

200
00:17:21,613 --> 00:17:23,588
dans la prochaine session.
On se voit là-bas.

