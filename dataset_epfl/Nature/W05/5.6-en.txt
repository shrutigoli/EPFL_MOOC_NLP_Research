Welcome back. Nature, In Code. 
We're in chapter five, lecture six.
Now, it's going to happen. We are going to visualize our spatial simulation. Let's not waste another second. Let's go and do it.
So here's our code, things work well. Now we need to visualize this.
Again, we're going to use these three to visualize it.
We're going to use slightly different methods from the one we've used before. So I'm going to hand this to you again, you can find it on this page or you can find it on the nature in code website.
So, I'm going to now simply go ahead and first of all get the
D3 library once again, and if you remember how we did this, we simply went to the D3 website.
So if you go here, you search for D3, you should get to this website here, d3js.org. 
This is where this library is hosted and here is the example of how you directed a link to the latest release. You simply copy the snippet, which is what I'm going to do.
Again, when I copy this and I'm going to go back to my code, and I'm going to put this up here in the head.
Now, you could also put it in the body, but I'm just going to put it in the head here. 
So, I just you know, make sure that things are loaded immediately.
Okay, so this loads D3 from the Web.
Now what I need is I need the methods that can help me visualize this. And again, it would be beyond the scope of this course to explain in detail how this works.
So once again, I'm going to provide these functions and in this case they're called draw grid and update grid.
You can get them here in the context of this MOOC.
You should find the link here of the video window, but if you don't find it, you can also go always to natureincode.com, which is where I host, you know, news, updates and some online codes examples. And here if you go to see code in action, this may look slightly differently when you access the page, but still broadly the same.
You can go here to chapter five, 
Spatial Model, you scroll all the way down and you can find here, note to draw grid and update grid functions are built with D3. 
We know that and can be found found here, so click here and here they are. So see the two functions, draw grid and update grid. Okay, like this. I'm going to copy
So simply the entirety of these two functions. Okay, like this. 
I'm going to copy them and then go back to your code in the body script back. I would just put in again, at the top of your code.
So paste it and again, if you want to you can indent them if you want to read and understand them, bbut ops, this is not necessary but if you want to do it, of course, then go ahead and do it.
So, we have the draw grid function, it has two parameters, one is the
data and that's simply the two dimensional grid, and the second one is the colors that you would like to have to visualize the different cells. Now, this one is mandatory but if you don't provide this, we're just going to- this function is going to use
 a default color set.
Okay, so let's go ahead now and use this.
So letâ€™s go down to our code.
We call the init grid function here and then down here, we call the run generation function in a loop.
Actually, let me put all the function calls here at the bottom.
Let me take this init grid function. Okay, I'm going to just cut this here and I'm going to put this down here.
It doesn't matter where it is, just as long as it occurs before the run generation loop.
But I think it's just good practice to have all the function calls here bundled together.
All right, so here we have init grid and then we run generation. So, what we need to do here is after the initializer, after we initialize init grid, we can now for example call this draw grid method. So I'm simply going to call here draw grid.
And again, this would take two arguments but I'm only going to pass it one, which is the grid because I'm fine with the default colors. Okay, so make sure this comes after init grid and before this run generation.
So now, if we save this and if everything worked well, we should go over to the browser.
I'm going to close these two tabs here. We're back at our simulation. We should be able to reload this and see this.
So this is your population.
It looks pretty cool.
So actually the three colors here are easy to explain, white is A1A1,
black is A2A2, so these are the two homozygotes and the blue one is the heterozygote, A1A1.
So, this is simply the population after you initialize it. You can reload this a couple of times and you can see this is random as it should be and nothing has happening yet in terms of the dynamics. You don't see any dynamics. The code is running here, but you don't see any dynamics.
This just shows you the first snapshot of the population.
So that's great. The visualization part works. What we now need to do is we need to update this grid at each generation.
So let's go back to the code and do this.
So what we could do is here simply after each call to run generation, we could call this update grid function. Update grid is just a slightly modified version of draw grid. It doesn't need to draw the entire grid again.
It can just update it.
But in any case, if we did this actually things would be way too fast, way too fast because if you go here back to the browser
and you reload this page, you notice, right, the grid gets drawn and then 100 generations get executed more less immediately.
Now, if we were to update the grid here in real time just as this is calculated, it would happen so fast, it will just happen in a couple of milliseconds, and we wouldn't be able to even see it, because it would just be too fast for our eyes.
So we somehow have to artificially slow this down, so let's go back so let's to go back to our code and do this. And actually, it's kind of funny to think about this and the testament to the speed of computers, and browsers, and visualizations, and java script that we now need to artificially slow down the code so that we can actually see things happening. But you know, that's the way it is.
So what we would do is we'll get rid of this run generation of the entire loop here, and we're going to replace this with a code snippet that uses a method that we haven't encountered before.
So javascript in the browser comes with this really handy method called set interval, and what this method does- so here's how you write this set interval. This method takes two parameters.
One is the function name and the other is a number in milliseconds.
And what this means is that the function is what's being called repetitively and the milliseconds- the second parameter is the millisecond, it just defines how many milliseconds will have to pass before that function is going to be called again and that's exactly what we need.
So, what I'm going to do first again after the draw grid, is I'm actually going to define a function that combines the run generation and the update grid.
Again, I'm going to call this simulate and visualize, all right. It's a simple convenience function that calls two functions, namely our run generation and the update grid method. 
Update grid and once again,
I have to pass it, the grid because the grid will be different.
The contents of the grid will be different after each run generation execution.
Okay, and so now, basically that 
I'm here, I'm going to say,
"Look, call this function, simulate and visualize."
Simply the name of the function as a parameter and do this every you know, 100 milliseconds or you could say you know,
200 or 500 or one second will be 1,000 milliseconds.
Let's do 1,000 milliseconds, okay.
So, let's save this and now let's go back to the browser and reload the document.
And here you can now see it's happening, you are visualising your population and you can see here in the console that things are slowly, slowly moving with the delay of one second.
And you can see here your simulation gets updated.
It's very cool.
So actually it seems like, hmm, this is almost a bit too slow.
We could accelerate this a little bit.
So let's go back to our code and let's put the value here to 100.
Okay, so I'm going to save this and then I'm going to go back, reload and now, it's looks much nicer.
And now, I could look at this all day. I find it so fascinating.
So you can see here how your population evolves over time and you can really see the effects of space here and of particularly limited meeting distance.
You can now see these islands emerging here in black for example one in white in these clusters really.
And so what's happening here is that you are actually starting to get clusters of homozygotes.
So for example here, this white cluster over here, or over here and the black cluster here. 
So what's happening here? 
Well, you know, keep in mind that each dot here is one individual and it only gets to mate with its neighbors. So if all its neighbors are of the same genotype and they are homozygous, and then they can only ever produce that exact same genotype again. 
Same here in the case of the A2A2 genotypes in the black region.
On the other hand, the red, sorry the blue heterozygous, they can generate both heterozygous and homozygous. So on balance is
just a little bit shifted and what will happen actually is that you eventually, very quickly actually you know, in evolutionary times will lose all the genetic variations here.
And you'll see these islands become bigger and bigger and bigger, and ultimately one of the two,
A1A1 or A2A2 will take over and the entire population will be of this type.
Now, it would take quite a long time because I can see here in the console that we've already reached generation 1,000, but you can actually test this by going back to the code and essentially just have a smaller population. 
So for example here, up here in the global variables, we could simply say,
"You know what,  let's put the grid length at 20," because then you won't have a population of 10,000 but of 20 x 20 so 400.
Now, this should be much faster. 
So obviously this looks quite a bit different here, but you can still see these islands now starting to form these clusters of black and white, so A2A2 and A1A1.
It's kind of hard to say at the moment which one seems to be winning, but if you now kept looking at this, you would probably have to say, it seems like the A2A2 clearly is winning. There are only a few A1s left and it's only a matter of time until the A1A1s
 have gone completely.
This might take some time but it's certainly much, much faster than you know, compared to the situation where the population size is 10,000.
Now, you can look at this in your browser of course for a long time, but I just want to move on and 
I just want to go over to the code,
and I want to put this back to 100. So go back to our case of 10,000 individuals. but I now want to set this max mating distance to a large value, namely 50. Why 50? Because 50 is exactly half of the grid length
so that means we're back to global mating, right, because now for each individual the mating neighborhood where I can choose a random
individual from to produce offsprings with is in essence the entire population.
The entire grid. 
So we still have a spatial world but effectively we're back at random mating. So if I save this and go back here- oh, well, it actually looks as if A1A1 had made a rebound, but we're not going to wait here. 
We're going to reload this.
This is now the case of random or global mating and you can see here you don't get these islands. 
Why not, again, because we're essentially, completely back to random mixing. 
Now, this essentially-- now again, back to the drift simulation.
We have a limited population size
N equals 10,000, so ultimately as you know, we will lose a genetic variation and one of the two homozygotes will eventually win, but it's going to take much longer
and we don't see any of those special effects here.
What we really need is to compare the two worlds of global mating, of a non spatial model if you will simply by changing this variable we change this back to one here save it, reload it. You can see the dynamics here are very, very different. Now we very quickly
again get those islands of homozygotes, those clusters.
So that is your spatial simulation.
Really well done if you made it this far.
You have stacarstic spatial individual based simulation of a population genetic model. So that's really great. 
Now, the only thing remains to be done is to get a bit more of a quantitative handle. I mean,
we seem to observe that things have rather a different dynamics, but how different are they and is it really true that we get different distributions here of genotypes compared to the random mixing? We can find out. 
There's a particularly type of statistic that can help us figure this out and we'll take a look at this in the next and final lecture of this chapter.
So I'll see you there.
