1
00:00:02,826 --> 00:00:06,064
Welcome back. Nature, In Code. 
We're in chapter five, lecture six.

2
00:00:06,243 --> 00:00:09,182
Now, it's going to happen. We are 
going to visualize our spatial

3
00:00:09,351 --> 00:00:13,101
simulation. Let's not waste 
another second. Let's go and do it.

4
00:00:13,306 --> 00:00:17,193
So here's our code, things work 
well. Now we need to visualize this.

5
00:00:17,368 --> 00:00:20,243
Again, we're going to use 
these three to visualize it.

6
00:00:20,360 --> 00:00:23,747
We're going to use slightly 
different methods from the one

7
00:00:23,926 --> 00:00:27,189
we've used before. So I'm going to 
hand this to you again, you can

8
00:00:27,364 --> 00:00:33,102
find it on this page or you can find
it on the nature in code website.

9
00:00:33,317 --> 00:00:38,041
So, I'm going to now simply go 
ahead and first of all get the

10
00:00:38,197 --> 00:00:41,660
D3 library once again, 
and if you remember

11
00:00:41,820 --> 00:00:45,221
how we did this, we simply 
went to the D3 website.

12
00:00:45,359 --> 00:00:50,359
So if you go here, you search 
for D3, you should get to this

13
00:00:50,536 --> 00:00:54,486
website here, d3js.org. 
This is where this library

14
00:00:54,669 --> 00:00:55,269
is hosted

15
00:00:56,023 --> 00:00:59,048
and here is the example of 
how you directed a link

16
00:00:59,210 --> 00:01:02,035
to the latest release. You simply
copy the snippet, which is

17
00:01:02,220 --> 00:01:03,220
what I'm going to do.

18
00:01:03,397 --> 00:01:07,135
Again, when I copy this 
and I'm going to go back

19
00:01:07,306 --> 00:01:11,994
to my code, and I'm going to
put this up here in the head.

20
00:01:12,181 --> 00:01:15,081
Now, you could also put it 
in the body, but I'm just going to 

21
00:01:15,249 --> 00:01:18,524
put it in the head here. 
So, I just you know, make sure that

22
00:01:18,695 --> 00:01:20,658
things are loaded immediately.

23
00:01:20,799 --> 00:01:23,799
Okay, so this loads D3 from the Web.

24
00:01:24,281 --> 00:01:29,231
Now what I need is I need 
the methods that can help me

25
00:01:29,403 --> 00:01:33,465
visualize this. And again, it would 
be beyond the scope of this

26
00:01:33,651 --> 00:01:35,989
course to explain in detail 
how this works.

27
00:01:36,162 --> 00:01:39,162
So once again, I'm going to 
provide these functions and in

28
00:01:39,329 --> 00:01:42,729
this case they're called 
draw grid and update grid.

29
00:01:42,897 --> 00:01:46,485
You can get them here in the 
context of this MOOC.

30
00:01:46,901 --> 00:01:51,976
You should find the link here of 
the video window, but

31
00:01:52,464 --> 00:01:58,076
if you don't find it, you can also 
go always to natureincode.com,

32
00:01:58,246 --> 00:02:02,296
which is where I host, you know, 
news, updates and some

33
00:02:02,473 --> 00:02:08,273
online codes examples. And here 
if you go to see code in action,

34
00:02:08,456 --> 00:02:11,831
this may look slightly differently 
when you access the page, but

35
00:02:12,021 --> 00:02:13,671
still broadly the same.

36
00:02:13,840 --> 00:02:18,553
You can go here to chapter five, 
Spatial Model, you scroll all the

37
00:02:18,703 --> 00:02:23,091
way down and you can find here, 
note to draw grid and update

38
00:02:23,257 --> 00:02:26,294
grid functions are built with D3. 
We know that and can be found

39
00:02:26,461 --> 00:02:29,799
found here, so click here and here
they are. So see the two functions, 

40
00:02:29,935 --> 00:02:33,460
draw grid and update grid. Okay, 
like this. I'm going to copy

41
00:02:33,616 --> 00:02:37,804
So simply the entirety of these 
two functions. Okay, like this. 

42
00:02:37,957 --> 00:02:42,882
I'm going to copy them and then 
go back to your code in the body

43
00:02:43,050 --> 00:02:47,663
script back. I would just put in 
again, at the top of your code.

44
00:02:47,841 --> 00:02:51,966
So paste it and again, if you 
want to you can indent them

45
00:02:52,144 --> 00:02:58,382
if you want to read and understand 
them, bbut ops, this is not necessary

46
00:02:58,572 --> 00:03:02,859
but if you want to do it, of 
course, then go ahead and do it.

47
00:03:03,506 --> 00:03:08,381
So, we have the draw grid function,
it has two parameters, one is the

48
00:03:08,540 --> 00:03:11,802
 data and that's simply the two 
dimensional grid, and the second

49
00:03:11,942 --> 00:03:16,480
one is the colors that you would 
like to have to visualize

50
00:03:16,664 --> 00:03:19,764
the different cells. Now, this one
is mandatory but if you don't

51
00:03:19,907 --> 00:03:23,070
provide this, we're just going to-
this function is going to use

52
00:03:23,254 --> 00:03:25,167
 a default color set.

53
00:03:25,459 --> 00:03:28,584
Okay, so let's go ahead now 
and use this.

54
00:03:28,764 --> 00:03:31,289
So letâ€™s go down to our code.

55
00:03:32,870 --> 00:03:37,620
We call the init grid function 
here and then down here,

56
00:03:37,942 --> 00:03:44,692
we call the run generation
function in a loop.

57
00:03:44,869 --> 00:03:50,006
Actually, let me put all the
function calls here at the bottom.

58
00:03:50,188 --> 00:03:53,125
Let me take this init grid 
function. Okay, I'm going to just

59
00:03:53,301 --> 00:03:57,701
cut this here and I'm going 
to put this down here.

60
00:03:57,877 --> 00:04:02,227
It doesn't matter where it is,
just as long as it occurs

61
00:04:02,413 --> 00:04:06,000
before the run generation loop.
But I think it's just good practice

62
00:04:06,167 --> 00:04:10,205
to have all the function calls
here bundled together.

63
00:04:10,375 --> 00:04:14,575
All right, so here we have 
init grid and then we run

64
00:04:14,742 --> 00:04:19,655
generation. So, what we need 
to do here is after the initializer,

65
00:04:19,817 --> 00:04:23,317
after we initialize init grid, 
we can now for example call this

66
00:04:23,561 --> 00:04:29,461
draw grid method. So I'm simply 
going to call here draw grid.

67
00:04:29,638 --> 00:04:35,350
And again, this would take two 
arguments but I'm only going to

68
00:04:35,547 --> 00:04:39,084
pass it one, which is the grid 
because I'm fine with the default

69
00:04:39,236 --> 00:04:42,986
colors. Okay, so make sure this 
comes after init grid

70
00:04:43,158 --> 00:04:44,921
and before this run generation.

71
00:04:45,095 --> 00:04:48,095
So now, if we save this and 
if everything worked well,

72
00:04:48,258 --> 00:04:52,071
we should go over to the browser.
I'm going to close these

73
00:04:52,237 --> 00:04:55,737
two tabs here. We're back at our
simulation. We should be able

74
00:04:55,915 --> 00:04:58,915
to reload this and see this.

75
00:04:59,104 --> 00:05:02,192
So this is your population.
It looks pretty cool.

76
00:05:02,331 --> 00:05:06,706
So actually the three colors here 
are easy to explain, white is A1A1,

77
00:05:06,874 --> 00:05:11,886
 black is A2A2, so these are the 
two homozygotes and the

78
00:05:12,071 --> 00:05:14,909
blue one is the heterozygote, A1A1.

79
00:05:15,102 --> 00:05:20,127
So, this is simply the population 
after you initialize it. You can

80
00:05:20,290 --> 00:05:23,240
reload this a couple of times 
and you can see this is random

81
00:05:23,422 --> 00:05:28,672
as it should be and nothing has
happening yet in terms of the

82
00:05:28,842 --> 00:05:31,842
dynamics. You don't see any 
dynamics. The code is running here,

83
00:05:31,993 --> 00:05:37,093
but you don't see any dynamics.
This just shows you the first

84
00:05:37,259 --> 00:05:40,934
snapshot of the population.
So that's great. The visualization

85
00:05:41,101 --> 00:05:44,776
part works. What we now need 
to do is we need to update

86
00:05:44,943 --> 00:05:47,718
this grid at each generation.

87
00:05:47,886 --> 00:05:50,848
So let's go back to the 
code and do this.

88
00:05:50,995 --> 00:05:55,845
So what we could do is here simply
after each call to run generation,

89
00:05:56,009 --> 00:06:00,059
we could call this update grid
function. Update grid is just

90
00:06:00,239 --> 00:06:04,539
a slightly modified version of draw
grid. It doesn't need to draw

91
00:06:04,714 --> 00:06:07,027
the entire grid again.
It can just update it.

92
00:06:07,435 --> 00:06:11,197
But in any case, if we did this 
actually things would be way

93
00:06:11,372 --> 00:06:16,135
too fast, way too fast because 
if you go here back to the browser

94
00:06:16,315 --> 00:06:20,202
 and you reload this page,
you notice, right, the grid gets

95
00:06:20,380 --> 00:06:25,455
drawn and then 100 generations 
get executed more less immediately.

96
00:06:25,617 --> 00:06:31,880
Now, if we were to update the grid
here in real time just as this is

97
00:06:32,052 --> 00:06:35,639
calculated, it would happen so fast,
it will just happen in a couple

98
00:06:35,819 --> 00:06:39,107
of milliseconds, and we wouldn't be
able to even see it,

99
00:06:39,288 --> 00:06:41,888
because it would just be 
too fast for our eyes.

100
00:06:42,119 --> 00:06:47,781
So we somehow have to artificially
slow this down, so let's go back

101
00:06:48,025 --> 00:06:51,025
so let's to go back to our code 
and do this. And actually, it's 

102
00:06:51,178 --> 00:06:54,178
kind of funny to think about this 
and the testament

103
00:06:54,338 --> 00:06:58,463
to the speed of computers,
and browsers, and visualizations,

104
00:06:58,638 --> 00:07:02,476
and java script that we now need
to artificially slow down the code

105
00:07:02,660 --> 00:07:06,897
so that we can actually see
things happening. But you know,

106
00:07:07,069 --> 00:07:08,632
that's the way it is.

107
00:07:08,794 --> 00:07:12,756
So what we would do is we'll get rid
of this run generation of the entire

108
00:07:12,923 --> 00:07:15,998
loop here, and we're going 
to replace this with a code

109
00:07:16,180 --> 00:07:21,105
snippet that uses a method that we
haven't encountered before.

110
00:07:21,281 --> 00:07:24,518
So javascript in the browser comes
with this really handy method

111
00:07:24,707 --> 00:07:27,870
called set interval,
and what this method does- 

112
00:07:28,059 --> 00:07:33,959
so here's how you write this 
set interval. This method takes

113
00:07:34,127 --> 00:07:35,539
two parameters.

114
00:07:35,716 --> 00:07:39,403
One is the function name and 
the other is a number

115
00:07:39,590 --> 00:07:40,840
in milliseconds.

116
00:07:41,030 --> 00:07:45,067
And what this means is that the 
function is what's being called

117
00:07:45,239 --> 00:07:49,552
repetitively and the milliseconds-
the second parameter

118
00:07:49,728 --> 00:07:53,928
is the millisecond, it just defines
how many milliseconds will have to

119
00:07:54,110 --> 00:07:57,623
pass before that function is going
to be called again and that's exactly

120
00:07:57,784 --> 00:07:59,159
what we need.

121
00:07:59,326 --> 00:08:02,901
So, what I'm going to do first 
again after the draw grid,

122
00:08:03,081 --> 00:08:07,443
is I'm actually going to define a 
function that combines the

123
00:08:07,615 --> 00:08:12,215
run generation and the update grid.
Again, I'm going to call this simulate

124
00:08:13,267 --> 00:08:15,330
and visualize,

125
00:08:18,023 --> 00:08:22,261
all right. It's a simple convenience
function that calls two functions,

126
00:08:22,433 --> 00:08:31,946
namely our run generation
and the update grid method. 

127
00:08:32,115 --> 00:08:35,927
Update grid and once again,
I have to pass it, the grid

128
00:08:36,098 --> 00:08:39,411
because the grid will be different.
The contents of the grid will be

129
00:08:39,590 --> 00:08:43,528
different after each run
generation execution.

130
00:08:43,909 --> 00:08:46,509
Okay, and so now, basically that 
I'm here, I'm going to say,

131
00:08:46,688 --> 00:08:55,313
"Look, call this function, simulate 
and visualize."

132
00:08:56,416 --> 00:09:00,816
Simply the name of the function 
as a parameter and do this every

133
00:09:00,978 --> 00:09:03,603
you know, 100 milliseconds
or you could say you know,

134
00:09:03,785 --> 00:09:10,147
200 or 500 or one second 
will be 1,000 milliseconds.

135
00:09:10,325 --> 00:09:13,413
Let's do 1,000 milliseconds, okay.

136
00:09:13,593 --> 00:09:19,731
So, let's save this and now let's
go back to the browser and reload

137
00:09:20,204 --> 00:09:22,741
the document.

138
00:09:23,336 --> 00:09:26,324
And here you can now see 
it's happening, you are

139
00:09:26,511 --> 00:09:30,224
visualising your population and 
you can see here in the console

140
00:09:30,396 --> 00:09:34,871
that things are slowly, slowly
moving with the delay of one second.

141
00:09:35,044 --> 00:09:38,282
And you can see here your 
simulation gets updated.

142
00:09:38,551 --> 00:09:39,626
It's very cool.

143
00:09:39,882 --> 00:09:43,007
So actually it seems like, hmm, 
this is almost a bit too slow.

144
00:09:43,181 --> 00:09:45,456
We could accelerate this 
a little bit.

145
00:09:45,636 --> 00:09:53,386
So let's go back to our code 
and let's put the value here to 100.

146
00:09:55,221 --> 00:09:57,633
 Okay, so I'm going to save this

147
00:09:58,751 --> 00:10:00,276
and then I'm going to go back,

148
00:10:00,537 --> 00:10:03,699
reload and now, it's 
looks much nicer.

149
00:10:04,449 --> 00:10:08,549
And now, I could look at this 
all day. I find it so fascinating.

150
00:10:08,716 --> 00:10:12,254
So you can see here how your
population evolves over time

151
00:10:12,436 --> 00:10:17,211
and you can really see the effects 
of space here and of particularly

152
00:10:17,375 --> 00:10:21,788
limited meeting distance.
You can now see these islands

153
00:10:21,950 --> 00:10:27,687
emerging here in black for example
one in white in these clusters really.

154
00:10:27,868 --> 00:10:31,506
And so what's happening here is
that you are actually starting to

155
00:10:31,687 --> 00:10:34,937
get clusters of homozygotes.
So for example here,

156
00:10:35,109 --> 00:10:37,546
this white cluster over here,
or over here and the

157
00:10:37,716 --> 00:10:38,866
black cluster here. 

158
00:10:39,047 --> 00:10:42,297
So what's happening here? 
Well, you know, keep in mind

159
00:10:42,471 --> 00:10:47,571
that each dot here is one individual
and it only gets to mate with

160
00:10:47,760 --> 00:10:51,785
its neighbors. So if all its
neighbors are of the same genotype

161
00:10:51,964 --> 00:10:54,989
and they are homozygous,
and then they can only ever produce

162
00:10:55,161 --> 00:10:59,824
that exact same genotype again. 
Same here in the case of

163
00:11:00,014 --> 00:11:02,802
the A2A2 genotypes in 
the black region.

164
00:11:03,199 --> 00:11:08,137
On the other hand, the red, 
sorry the blue heterozygous,

165
00:11:08,304 --> 00:11:14,154
they can generate both heterozygous
and homozygous. So on balance is

166
00:11:14,327 --> 00:11:17,727
 just a little bit shifted and what 
will happen actually is that you

167
00:11:17,889 --> 00:11:22,689
eventually, very quickly actually
you know, in evolutionary times

168
00:11:22,865 --> 00:11:27,152
will lose all the genetic 
variations here.

169
00:11:28,244 --> 00:11:31,832
And you'll see these islands become
bigger and bigger and bigger,

170
00:11:32,005 --> 00:11:37,918
and ultimately one of the two,
A1A1 or A2A2 will take over

171
00:11:38,098 --> 00:11:41,098
and the entire population 
will be of this type.

172
00:11:41,288 --> 00:11:44,275
Now, it would take quite a long 
time because I can see here in 

173
00:11:44,467 --> 00:11:47,917
the console that we've already 
reached generation 1,000,

174
00:11:48,090 --> 00:11:51,390
but you can actually test this by 
going back to the code

175
00:11:51,568 --> 00:11:55,793
and essentially just have 
a smaller population. 

176
00:11:55,961 --> 00:11:58,661
So for example here, up here 
in the global variables,

177
00:11:58,829 --> 00:12:01,304
we could simply say,
"You know what,  let's put

178
00:12:01,493 --> 00:12:04,430
the grid length at 20," because 
then you won't have

179
00:12:04,618 --> 00:12:08,568
a population of 10,000 
but of 20 x 20 so 400.

180
00:12:08,740 --> 00:12:12,890
Now, this should be much faster. 
So obviously this looks quite a bit

181
00:12:13,089 --> 00:12:17,377
different here, but you can still
see these islands now starting

182
00:12:17,561 --> 00:12:24,461
to form these clusters of black 
and white, so A2A2 and A1A1.

183
00:12:24,644 --> 00:12:28,182
It's kind of hard to say at the
moment which one seems to be winning,

184
00:12:28,355 --> 00:12:33,080
but if you now kept looking at this,
you would probably have to say,

185
00:12:33,257 --> 00:12:36,857
it seems like the A2A2 clearly 
is winning. There are only

186
00:12:37,044 --> 00:12:42,144
a few A1s left and it's only a 
matter of time until the A1A1s

187
00:12:42,334 --> 00:12:44,959
 have gone completely.

188
00:12:45,676 --> 00:12:49,051
This might take some time 
but it's certainly much, much faster

189
00:12:49,229 --> 00:12:53,704
than you know, compared to the 
situation where the

190
00:12:53,877 --> 00:12:56,002
population size is 10,000.

191
00:12:56,710 --> 00:13:00,685
Now, you can look at this in your
browser of course for a long time,

192
00:13:00,862 --> 00:13:04,400
but I just want to move on and 
I just want to go over to the code,

193
00:13:04,557 --> 00:13:08,532
 and I want to put this
back to 100. So go back

194
00:13:08,728 --> 00:13:11,341
to our case of 10,000 individuals.

195
00:13:11,522 --> 00:13:15,397
but I now want to set this max
mating distance to a large value,

196
00:13:15,564 --> 00:13:20,714
namely 50. Why 50? Because 50 
is exactly half of the grid length

197
00:13:20,899 --> 00:13:24,674
 so that means we're back
to global mating, right,

198
00:13:24,855 --> 00:13:27,755
because now for each individual 
the mating neighborhood

199
00:13:27,955 --> 00:13:31,880
where I can choose a random
 individual from to produce offsprings

200
00:13:32,059 --> 00:13:35,422
with is in essence the 
entire population.

201
00:13:35,613 --> 00:13:37,088
The entire grid. 

202
00:13:37,258 --> 00:13:40,321
So we still have a spatial world
but effectively we're back

203
00:13:40,508 --> 00:13:44,546
at random mating. So if I save this
and go back here- oh, well, 

204
00:13:44,718 --> 00:13:48,643
it actually looks as if A1A1 had
made a rebound, but we're

205
00:13:48,829 --> 00:13:51,779
not going to wait here. 
We're going to reload this.

206
00:13:51,969 --> 00:13:57,456
This is now the case of random or
global mating and you can see here

207
00:13:57,627 --> 00:14:00,352
you don't get these islands. 
Why not, again, because we're

208
00:14:00,531 --> 00:14:04,344
essentially, completely back
to random mixing. 

209
00:14:05,113 --> 00:14:09,313
Now, this essentially-- now again, 
back to the drift simulation.

210
00:14:09,498 --> 00:14:14,873
We have a limited population size
N equals 10,000, so ultimately

211
00:14:15,043 --> 00:14:19,343
as you know, we will lose a genetic
variation and one of the two

212
00:14:19,536 --> 00:14:23,186
homozygotes will eventually win, 
but it's going to take much longer

213
00:14:23,352 --> 00:14:26,940
 and we don't see any of 
those special effects here.

214
00:14:27,445 --> 00:14:34,307
What we really need is to compare
the two worlds of global mating,

215
00:14:34,492 --> 00:14:37,930
of a non spatial model if you will
simply by changing this variable

216
00:14:38,107 --> 00:14:41,670
we change this back to one here
save it, reload it. You can see

217
00:14:41,831 --> 00:14:45,256
the dynamics here are very, very
different. Now we very quickly

218
00:14:45,420 --> 00:14:49,720
 again get those islands 
of homozygotes, those clusters.

219
00:14:49,926 --> 00:14:55,764
So that is your spatial simulation.
Really well done if you made

220
00:14:55,920 --> 00:14:56,983
it this far.

221
00:14:57,174 --> 00:15:01,986
You have stacarstic spatial individual
based simulation of a population

222
00:15:02,168 --> 00:15:08,581
genetic model. So that's really great. 
Now, the only thing remains to be

223
00:15:08,773 --> 00:15:11,573
done is to get a bit more of 
a quantitative handle. I mean,

224
00:15:11,741 --> 00:15:16,079
 we seem to observe that things 
have rather a different dynamics,

225
00:15:16,248 --> 00:15:19,911
but how different are they 
and is it really true that

226
00:15:20,089 --> 00:15:24,664
we get different distributions here 
of genotypes compared to 

227
00:15:24,847 --> 00:15:28,697
the random mixing? We can find out. 
There's a particularly type 

228
00:15:28,876 --> 00:15:31,876
of statistic that can help us
figure this out and we'll

229
00:15:32,037 --> 00:15:35,512
take a look at this in the next 
and final lecture of this chapter.

230
00:15:35,680 --> 00:15:36,780
So I'll see you there.

