1
00:00:22,049 --> 00:00:23,537
Welcome to this lesson

2
00:00:23,737 --> 00:00:25,962
that will focus on querying

3
00:00:26,162 --> 00:00:27,912
databases by requests,

4
00:00:28,112 --> 00:00:30,212
and the SQL language that is used

5
00:00:30,412 --> 00:00:32,274
to write these queries.

6
00:00:32,837 --> 00:00:34,787
In this lesson, we will discuss

7
00:00:34,974 --> 00:00:36,837
the basics of the SQL language,

8
00:00:37,037 --> 00:00:38,549
language that will be the subject

9
00:00:38,749 --> 00:00:40,824
of the next 5 or 6 lessons.

10
00:00:42,837 --> 00:00:45,199
The objective of this first lesson is

11
00:00:45,399 --> 00:00:47,587
to discover the most 
fundamental principles

12
00:00:47,787 --> 00:00:50,899
of the SQL language and in particular

13
00:00:51,762 --> 00:00:54,049
the most basic function or clause,

14
00:00:54,249 --> 00:00:57,487
which is the "select" clause

15
00:00:57,687 --> 00:00:59,762
and its different uses.

16
00:01:00,474 --> 00:01:03,324
At the end of this lesson,
you should be able to

17
00:01:03,525 --> 00:01:05,637
select attributes in a table

18
00:01:05,837 --> 00:01:06,749
and...

19
00:01:06,949 --> 00:01:09,224
to eliminate duplicates that could

20
00:01:09,424 --> 00:01:11,024
be found in this selection.

21
00:01:11,925 --> 00:01:13,837
We will see successively

22
00:01:14,037 --> 00:01:15,974
the principles of the SQL language

23
00:01:16,174 --> 00:01:16,962
then

24
00:01:17,824 --> 00:01:20,674
the simple selection
of an attribute in a table.

25
00:01:21,199 --> 00:01:24,087
The principle of the distinct
selection that allows

26
00:01:24,287 --> 00:01:26,299
to eliminate duplicates of a query.

27
00:01:27,249 --> 00:01:29,837
Then, the selection from 2 tables

28
00:01:30,037 --> 00:01:33,037
and finally the use of aliases for

29
00:01:33,237 --> 00:01:35,224
the attributes and tables.

30
00:01:41,112 --> 00:01:44,537
The SQL or Structured Query Language

31
00:01:44,737 --> 00:01:45,424
is

32
00:01:45,624 --> 00:01:48,224
a language for relational 

33
00:01:48,424 --> 00:01:49,962
database management specifically.

34
00:01:50,399 --> 00:01:52,949
It is a language that has 
been standardized

35
00:01:53,149 --> 00:01:53,662
so

36
00:01:53,874 --> 00:01:55,249
which is in theory independent

37
00:01:55,437 --> 00:01:57,774
of the database management system used

38
00:01:57,974 --> 00:01:59,837
even if it is true that

39
00:02:00,037 --> 00:02:02,974
each database management system has

40
00:02:03,174 --> 00:02:05,687
some specialties regarding 

41
00:02:05,887 --> 00:02:07,249
the syntax used.

42
00:02:07,887 --> 00:02:08,837
It is

43
00:02:09,037 --> 00:02:11,937
a language that interacts with databases

44
00:02:12,137 --> 00:02:14,249
in the form of a structured request

45
00:02:14,449 --> 00:02:15,887
as its name suggests,

46
00:02:16,712 --> 00:02:20,137
The SQL is composed of 4 groups 
of additional instructions.

47
00:02:20,337 --> 00:02:22,374
First,

48
00:02:22,574 --> 00:02:24,174
the data query language

49
00:02:24,374 --> 00:02:26,624
which enables to extract 
data from a database.

50
00:02:27,349 --> 00:02:31,087
The data definition language

51
00:02:31,287 --> 00:02:34,487
which allows to modify
or define the structure of a database.

52
00:02:35,574 --> 00:02:38,799
The DML manipulation language that allows

53
00:02:38,999 --> 00:02:40,349
to insert,

54
00:02:40,549 --> 00:02:42,624
to update, to delete data

55
00:02:42,824 --> 00:02:44,037
and finally

56
00:02:44,237 --> 00:02:47,149
the control language that 
manages the users'

57
00:02:47,599 --> 00:02:49,699
rights and accesses.

58
00:02:51,362 --> 00:02:53,474
In the field of data querying,

59
00:02:53,674 --> 00:02:55,687
the basic syntax includes

60
00:02:55,887 --> 00:02:58,687
selection clauses with
the "select" and "from" keywords,

61
00:02:58,887 --> 00:03:01,737
the conditional filter clauses
with the "where" keyword,

62
00:03:01,937 --> 00:03:05,349
aggregation clauses with
"group by" or "having" keywords;

63
00:03:05,637 --> 00:03:06,924
sorting clauses

64
00:03:07,124 --> 00:03:09,524
with "order by" or "limit" keywords

65
00:03:09,724 --> 00:03:11,224
and finally merger clauses

66
00:03:11,424 --> 00:03:14,462
with the "union", "intersect", 
"except" keywords.

67
00:03:16,424 --> 00:03:20,024
The use of these different 
keywords in queries

68
00:03:20,287 --> 00:03:22,324
will be illustrated later

69
00:03:22,524 --> 00:03:24,262
in this lesson and in 
the following lessons.

70
00:03:25,274 --> 00:03:26,812
On the basis of data

71
00:03:27,012 --> 00:03:28,324
that were grouped together

72
00:03:28,524 --> 00:03:30,099
in a series of test databases,

73
00:03:30,274 --> 00:03:33,074
data on the islands close 
to the Seychelles

74
00:03:33,274 --> 00:03:35,199
which actually comprise 
4 layers of data:

75
00:03:35,399 --> 00:03:37,187
the districts in the form of polygons,

76
00:03:37,387 --> 00:03:39,737
the hotels, the localities that are points

77
00:03:39,937 --> 00:03:42,012
and the roads that are lines.

78
00:03:42,212 --> 00:03:45,237
These data are stored 
in 3 different formats

79
00:03:45,437 --> 00:03:48,287
which will illustrate three types of

80
00:03:48,762 --> 00:03:51,487
approaches, different 
management of requests.

81
00:03:51,687 --> 00:03:53,712
The ESRI Shapefile format,

82
00:03:53,912 --> 00:03:57,174
a SpatiaLite database and
a PostGIS database.

83
00:03:58,249 --> 00:04:00,087
We can see here that

84
00:04:00,887 --> 00:04:04,187
these different layers of data
have a certain number of attributes.

85
00:04:04,387 --> 00:04:05,274
For the districts,

86
00:04:05,474 --> 00:04:08,562
the geometry, the identifier
and the name, for hotels

87
00:04:08,762 --> 00:04:10,599
again the geometry, the identifier

88
00:04:10,787 --> 00:04:12,862
the name and a series
of complementary attributes

89
00:04:13,037 --> 00:04:15,200
(number of rooms, number 
of beds, status)

90
00:04:15,450 --> 00:04:18,699
and the district in which
the hotels are located.

91
00:04:18,899 --> 00:04:20,525
For the localities,

92
00:04:20,725 --> 00:04:22,700
geometry, identifier and name

93
00:04:22,900 --> 00:04:25,300
as well as for roads with

94
00:04:25,500 --> 00:04:27,537
the places where they are, 
the type of road and

95
00:04:27,737 --> 00:04:29,300
the type of surface.

96
00:04:30,662 --> 00:04:32,962
We see that there is a small key
around the identifier

97
00:04:33,162 --> 00:04:35,175
which shows that in all these

98
00:04:35,375 --> 00:04:38,375
cases, the identifier acts
as the primary key.

99
00:04:41,300 --> 00:04:43,700
There are many query tools

100
00:04:43,900 --> 00:04:45,862
and we will focus on

101
00:04:46,062 --> 00:04:49,387
those that can be used in connection
with the QGIS software.

102
00:04:50,225 --> 00:04:52,937
There is first of all
in the software itself

103
00:04:53,225 --> 00:04:56,000
a series of 3 query tools

104
00:04:56,175 --> 00:04:57,200
which...

105
00:04:57,400 --> 00:05:00,100
apply generally to all types of layers.

106
00:05:00,300 --> 00:05:01,937
But these 3 solutions

107
00:05:02,137 --> 00:05:04,925
do not implement explicitly

108
00:05:05,125 --> 00:05:06,262
the SQL language unfortunately,

109
00:05:06,850 --> 00:05:10,187
so in this case
it is not very interesting.

110
00:05:11,237 --> 00:05:14,012
We have a database management
extension that allows

111
00:05:14,212 --> 00:05:17,037
to process Spatialite and 
PostGIS databases

112
00:05:17,600 --> 00:05:19,112
and probably others,

113
00:05:20,150 --> 00:05:23,236
and then a series of solutions
specific to Spatialite

114
00:05:23,436 --> 00:05:24,999
and specific to PostGIS.

115
00:05:25,999 --> 00:05:28,699
Some of them use softwares

116
00:05:28,899 --> 00:05:32,161
like the SQLite Studio pgAdmin III.

117
00:05:33,461 --> 00:05:35,686
In the

118
00:05:35,886 --> 00:05:37,336
PostGIS solutions

119
00:05:37,536 --> 00:05:40,274
PostGisQueryBuilder
is also unattractive

120
00:05:40,474 --> 00:05:43,586
because it does not explicitly
implement the SQL language.

121
00:05:44,261 --> 00:05:47,549
For the purpose of this course,
we will work with the SpatiaLite

122
00:05:47,749 --> 00:05:49,561
extension for QGIS

123
00:05:49,799 --> 00:05:51,386
which allows

124
00:05:51,586 --> 00:05:54,811
to write and execute SQL queries

125
00:05:55,011 --> 00:05:56,836
on a Spatialite database

126
00:05:57,036 --> 00:05:58,236
in QGIS.

127
00:05:58,436 --> 00:06:01,261
And we will also use pgAdmin III

128
00:06:01,461 --> 00:06:02,924
which is a software

129
00:06:03,124 --> 00:06:05,811
which is part of PostGreSQL

130
00:06:06,011 --> 00:06:08,662
and which has the advantage of proposing

131
00:06:08,861 --> 00:06:11,637
a graphical query construction tool.

132
00:06:22,811 --> 00:06:24,449
The selection request

133
00:06:24,649 --> 00:06:26,737
includes the "select" keywords

134
00:06:26,937 --> 00:06:29,324
followed by the name
of the searched attribute

135
00:06:29,524 --> 00:06:33,186
and the "from" keyword
which allows to specify in which table

136
00:06:33,386 --> 00:06:35,374
is found the attribute in question.

137
00:06:36,574 --> 00:06:40,761
In QGIS, with the Spatialite extension,
we can see that we can

138
00:06:41,286 --> 00:06:43,512
write an SQL query.

139
00:06:43,699 --> 00:06:45,099
In the window provided,

140
00:06:45,299 --> 00:06:48,061
we will write a query to select

141
00:06:48,274 --> 00:06:50,162
the list of hotels by their names.

142
00:06:50,474 --> 00:06:53,237
So the attribute we are looking
for is the "name" attribute

143
00:06:53,437 --> 00:06:55,687
and the table, the "hotels" table.

144
00:06:56,186 --> 00:06:58,487
The execution of the query
gives the list

145
00:06:58,687 --> 00:07:00,712
of hotel names in the Seychelles.

146
00:07:01,899 --> 00:07:04,787
The same operation can
be performed graphically

147
00:07:04,987 --> 00:07:06,999
in pgAdmin III

148
00:07:07,199 --> 00:07:09,399
by adding the hotel table

149
00:07:09,562 --> 00:07:11,237
in the construction field of the query

150
00:07:11,387 --> 00:07:12,912
by selecting the "name" field.

151
00:07:13,112 --> 00:07:16,399
We see that this results
in the creation of an SQL query

152
00:07:16,599 --> 00:07:18,762
which syntax is a little bit different.

153
00:07:18,962 --> 00:07:21,387
This syntax allows
to remove any ambiguity

154
00:07:21,587 --> 00:07:23,487
in the case where we 
have several tables

155
00:07:23,687 --> 00:07:25,562
with attributes of the same names.

156
00:07:25,762 --> 00:07:29,074
On the other hand, it is not obligatory
when the doubt is not allowed.

157
00:07:29,274 --> 00:07:31,499
The selection request of 2 attributes

158
00:07:31,699 --> 00:07:33,024
includes the "select" keyword

159
00:07:33,224 --> 00:07:36,074
followed by the name of
the attributes separated by a comma

160
00:07:36,399 --> 00:07:38,912
then the "from" keyword
and the name of the table.

161
00:07:39,187 --> 00:07:40,799
In our example,

162
00:07:41,049 --> 00:07:42,712
we add

163
00:07:42,912 --> 00:07:44,524
the number of rooms

164
00:07:44,724 --> 00:07:46,562
as the desired attribute

165
00:07:46,762 --> 00:07:49,149
and the execution of the request

166
00:07:49,349 --> 00:07:51,874
shows the number of rooms per...

167
00:07:52,062 --> 00:07:53,787
depending on the name of the hotel.

168
00:07:54,487 --> 00:07:55,974
In pgAdmin,

169
00:07:56,174 --> 00:07:58,624
it is sufficient
to select the additional field

170
00:07:58,824 --> 00:08:00,499
in the graphic constructor

171
00:08:00,699 --> 00:08:03,462
which updates the SQL query

172
00:08:03,662 --> 00:08:06,787
and its execution
gives the expected result.

173
00:08:08,062 --> 00:08:11,637
The syntax that allows to select
the set of attributes of a table

174
00:08:11,837 --> 00:08:14,412
is constituted by
the "select" keyword followed

175
00:08:14,699 --> 00:08:16,349
by an asterisk

176
00:08:16,624 --> 00:08:19,549
then the "from" keyword
and the name of the table.

177
00:08:20,449 --> 00:08:22,886
We see in this example, that if we replace

178
00:08:23,086 --> 00:08:25,874
the names of the fields
searched by an asterisk,

179
00:08:26,074 --> 00:08:29,699
we indeed get a table
that contains all the fields

180
00:08:30,649 --> 00:08:32,199
of the layer.

181
00:08:34,187 --> 00:08:35,212
Similarly,

182
00:08:35,412 --> 00:08:37,661
in the graphic constructor

183
00:08:38,174 --> 00:08:41,187
of pgAdmin... so we see
that there is no asterisk

184
00:08:41,387 --> 00:08:44,049
so we can select the set of fields

185
00:08:44,249 --> 00:08:45,611
manually

186
00:08:45,811 --> 00:08:46,861
or

187
00:08:47,061 --> 00:08:48,361
in the SQL window

188
00:08:48,536 --> 00:08:51,274
simply replace the fields 
with an asterisk

189
00:08:51,436 --> 00:08:53,436
and the result is still the same.

190
00:08:54,036 --> 00:08:58,086
We can note that there
are 124 hotels selected.

191
00:09:09,361 --> 00:09:12,711
The "distinct" keyword placed
after the "select" keyword

192
00:09:12,911 --> 00:09:15,111
helps eliminate duplicates

193
00:09:15,311 --> 00:09:18,099
which could be found
in the result of a request.

194
00:09:18,899 --> 00:09:20,111
We see that

195
00:09:20,311 --> 00:09:22,199
if a request is made

196
00:09:22,399 --> 00:09:23,549
on

197
00:09:23,749 --> 00:09:24,811
the hotel

198
00:09:25,724 --> 00:09:26,974
status,

199
00:09:27,799 --> 00:09:29,611
we get a table

200
00:09:30,136 --> 00:09:31,649
in which

201
00:09:31,849 --> 00:09:35,111
we find many times the same
value since many hotels

202
00:09:35,311 --> 00:09:38,611
have the same status -
small hotel, big hotel etc.

203
00:09:40,236 --> 00:09:43,049
The "distinct" keyword added

204
00:09:43,249 --> 00:09:45,561
to this request allows to

205
00:09:45,761 --> 00:09:48,874
to filter this result and to only get

206
00:09:50,012 --> 00:09:53,287
the list of possible values

207
00:09:53,737 --> 00:09:55,474
of the "status" attribute.

208
00:09:59,537 --> 00:10:01,749
The operation is the same

209
00:10:02,199 --> 00:10:03,724
in pgAdmin.

210
00:10:03,924 --> 00:10:07,174
And if we keep only 
the "status" field,

211
00:10:07,374 --> 00:10:09,137
we update the request 

212
00:10:09,524 --> 00:10:12,962
and we add the "distinct" keyword

213
00:10:14,287 --> 00:10:15,812
and we see that

214
00:10:16,012 --> 00:10:17,962
by executing the request,

215
00:10:18,162 --> 00:10:20,999
the result obtained is the same.

216
00:10:37,249 --> 00:10:40,912
One of the main interests
of the SQL language is

217
00:10:41,274 --> 00:10:44,599
to associate multiple
tables within a single query

218
00:10:44,799 --> 00:10:47,512
to obtain a result 
which combines data

219
00:10:47,712 --> 00:10:49,437
coming from 2 different tables.

220
00:10:49,637 --> 00:10:51,737
This more explicit syntax

221
00:10:51,937 --> 00:10:55,124
implies describing an attribute
by the name of the table

222
00:10:55,324 --> 00:10:57,637
from which it comes followed
by the name of the attribute,

223
00:10:57,837 --> 00:11:00,112
the two elements
being separated by a point.

224
00:11:00,824 --> 00:11:02,499
In our example here,

225
00:11:03,024 --> 00:11:04,562
we will select

226
00:11:05,949 --> 00:11:08,337
the "name" field of the "hotels" table

227
00:11:08,537 --> 00:11:11,249
so described by hotels.name

228
00:11:11,612 --> 00:11:15,149
and in the "districts" table,
also the "name" field

229
00:11:15,349 --> 00:11:18,524
which shows clearly
the value of having this

230
00:11:18,937 --> 00:11:21,199
more specific syntax.

231
00:11:21,849 --> 00:11:25,624
So these 2 fields taken from
the 2 "hotels" and "districts" tables.

232
00:11:30,262 --> 00:11:34,224
We see that in the result
we find the systematic association

233
00:11:34,424 --> 00:11:35,949
of names of the 2 fields

234
00:11:36,149 --> 00:11:38,474
and we see that for 124 hotels

235
00:11:38,674 --> 00:11:41,524
and 25 districts, 
that gives us

236
00:11:41,724 --> 00:11:43,412
3,100 results.

237
00:11:46,874 --> 00:11:48,349
In pgAdmin,

238
00:11:48,549 --> 00:11:50,511
things happen in the same way.

239
00:11:50,824 --> 00:11:54,286
We select the "name" field
in the "hotels" table.

240
00:11:54,486 --> 00:11:58,074
The "districts" table is added, 
we select the "name" field 

241
00:11:58,274 --> 00:12:01,812
and in the SQL query tab, we see that

242
00:12:02,012 --> 00:12:03,412
the request was

243
00:12:03,799 --> 00:12:05,561
written in the right way

244
00:12:05,762 --> 00:12:08,274
and the execution gives the same result

245
00:12:08,474 --> 00:12:10,874
with 3,100 possibilities.

246
00:12:22,874 --> 00:12:27,474
It is sometimes useful to be able
to replace the original attribute name

247
00:12:27,674 --> 00:12:30,199
by a ​​more readable

248
00:12:30,399 --> 00:12:32,137
or comprehensible alias,

249
00:12:32,474 --> 00:12:36,162
an operation which is carried
out using the "as" keyword,

250
00:12:37,337 --> 00:12:39,749
attribute name "as" alias ​​name.

251
00:12:40,224 --> 00:12:42,037
In our previous example,

252
00:12:42,237 --> 00:12:44,087
we replace here

253
00:12:44,524 --> 00:12:47,187
the "name" field of the hotel by

254
00:12:47,387 --> 00:12:49,099
Hotel_Name

255
00:12:49,299 --> 00:12:52,899
and the "name" field of the district
by Districts_Name

256
00:12:53,099 --> 00:12:56,099
which also eliminates any ambiguity

257
00:12:56,299 --> 00:12:58,612
in the result table

258
00:12:59,112 --> 00:13:02,374
where we see that the headers
of the columns bear

259
00:13:02,574 --> 00:13:05,074
the names that allow us to know
what we are dealing with.

260
00:13:05,849 --> 00:13:08,274
Same thing in pgAdmin,

261
00:13:11,012 --> 00:13:12,999
The alias ​​is specified in the

262
00:13:13,637 --> 00:13:17,249
the criteria, the characteristics
of the results of the query

263
00:13:18,737 --> 00:13:20,337
and we see that

264
00:13:20,537 --> 00:13:22,824
by switching to SQL mode,

265
00:13:23,499 --> 00:13:24,874
the request has...

266
00:13:25,899 --> 00:13:28,624
the syntax of the query 

267
00:13:28,824 --> 00:13:31,337
and the result are what is expected.

268
00:13:34,474 --> 00:13:38,199
Second possibility of using
the concept of alias,

269
00:13:38,399 --> 00:13:40,162
this time

270
00:13:40,362 --> 00:13:42,474
to change the name of the tables.

271
00:13:42,674 --> 00:13:46,324
Which is often interesting to simplify 

272
00:13:46,512 --> 00:13:48,149
the syntax of the queries a little bit.

273
00:13:48,349 --> 00:13:49,512
In the case of tables,

274
00:13:49,712 --> 00:13:52,149
the aliases ​​do not use the "as" keyword

275
00:13:52,349 --> 00:13:54,674
but are simply created by adding

276
00:13:54,874 --> 00:13:57,199
a name to the table name

277
00:13:57,399 --> 00:13:58,899
with a space between the 2.

278
00:13:59,349 --> 00:14:02,649
In our example here... we delete the

279
00:14:02,849 --> 00:14:05,849
aliases ​​from the columns, the attributes

280
00:14:06,049 --> 00:14:08,624
and we create aliases ​​for tables,

281
00:14:08,787 --> 00:14:09,987
H for the "hotels" table

282
00:14:10,174 --> 00:14:12,187
And D for the "districts" table,

283
00:14:12,387 --> 00:14:14,899
which enables to replace

284
00:14:15,099 --> 00:14:17,599
the definition of the attributes sought

285
00:14:17,799 --> 00:14:20,324
the names of the tables 
by their aliases

286
00:14:20,524 --> 00:14:23,262
H for "hotels" and D for "districts".

287
00:14:25,224 --> 00:14:27,574
And we see that the execution
of this request

288
00:14:27,774 --> 00:14:29,287
always gives the same result.

289
00:14:33,037 --> 00:14:35,437
Same operation in pgAdmin,

290
00:14:35,912 --> 00:14:39,249
where we remove the alias ​​
from the attributes.

291
00:14:39,449 --> 00:14:42,049
Right click on the table

292
00:14:42,249 --> 00:14:44,199
to create an alias of the table,

293
00:14:44,399 --> 00:14:48,074
H for the "hotels" table,
D for the "districts" table as before

294
00:14:49,062 --> 00:14:51,899
and when we go back to the SQL editor

295
00:14:52,099 --> 00:14:55,099
we see that the syntax 
was adapted correctly

296
00:14:55,299 --> 00:14:58,024
and the execution gives the right result.

297
00:15:12,124 --> 00:15:13,999
In this lesson, we discovered

298
00:15:14,199 --> 00:15:16,362
the basic principles of the SQL language

299
00:15:16,562 --> 00:15:17,674
and in particular

300
00:15:17,874 --> 00:15:20,774
the basic elements
of the selection requests

301
00:15:20,974 --> 00:15:23,749
with the "select" and "from" keywords.

302
00:15:24,112 --> 00:15:25,874
We have seen how

303
00:15:26,037 --> 00:15:28,299
to select attributes in a table,

304
00:15:28,499 --> 00:15:29,449
how

305
00:15:29,649 --> 00:15:31,624
to eliminate duplicates in the result

306
00:15:31,824 --> 00:15:33,499
using the "distinct" keyword.

307
00:15:33,699 --> 00:15:37,187
And finally, we have seen
how to use aliases.

