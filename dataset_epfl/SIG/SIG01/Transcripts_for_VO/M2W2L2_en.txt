1
00:00:21,799 --> 00:00:24,487
Welcome to this lesson on
conditional queries.

2
00:00:24,671 --> 00:00:29,096
This type of query allows to extract 
a subset of a group of objects.

3
00:00:29,313 --> 00:00:33,163
For example, we can extract
a set of red cars

4
00:00:33,377 --> 00:00:38,640
from a parking in which an enormous 
mass of vehicles are parked,

5
00:00:38,842 --> 00:00:41,167
but you can't imagine anyway!

6
00:00:42,767 --> 00:00:44,855
Even with mobility cars.

7
00:00:45,018 --> 00:00:46,317
Even with mobility cars.

8
00:00:46,497 --> 00:00:47,634
Mobility!

9
00:00:47,805 --> 00:00:52,743
And you have the card, and you have the 
mobility card and you can't find your car.

10
00:00:52,963 --> 00:00:55,313
And you when you say 
I need a red car...

11
00:00:55,490 --> 00:01:00,440
Sometimes in the cars, those
who were not with us

12
00:01:00,623 --> 00:01:03,711
from the start, but which took the
train to join our car later.

13
00:01:04,004 --> 00:01:05,415
Yeah, but formulate it in SQL

14
00:01:05,588 --> 00:01:09,039
because they can't understand anything 
here, they can't understand anything.

15
00:01:09,859 --> 00:01:11,646
We will discuss in this lesson

16
00:01:11,833 --> 00:01:14,021
the question of conditional requests,

17
00:01:14,200 --> 00:01:16,912
the requests that allow to extract data

18
00:01:17,102 --> 00:01:19,364
on the basis of an attribute criterion

19
00:01:20,028 --> 00:01:22,091
in the example that accompanies us

20
00:01:22,271 --> 00:01:24,271
throughout this course on the Seychelles,

21
00:01:24,433 --> 00:01:26,208
some requests that would allow for example

22
00:01:26,371 --> 00:01:30,246
to extract the subset of asphalted roads.

23
00:01:30,646 --> 00:01:34,009
The objective of the lesson is
to study the principle

24
00:01:34,213 --> 00:01:37,013
of the syntax of a conditional query

25
00:01:37,187 --> 00:01:41,186
and to understand how these
queries lead to the notion of join

26
00:01:41,376 --> 00:01:43,764
which allow to associate several tables,

27
00:01:43,953 --> 00:01:45,778
so that at the end of the lesson

28
00:01:45,943 --> 00:01:48,117
you are able to use,

29
00:01:48,297 --> 00:01:49,772
to write conditional queries,

30
00:01:49,946 --> 00:01:51,360
to select, to filter data

31
00:01:51,528 --> 00:01:53,569
on the basis of an attribute criterion

32
00:01:53,840 --> 00:01:56,762
and to use table joins.

33
00:01:57,451 --> 00:02:00,926
We will see in this lesson first
the notion of conditional filter,

34
00:02:01,117 --> 00:02:05,158
based on the use of the WHERE
clause in an SQL query

35
00:02:06,309 --> 00:02:09,882
then the various operators that
can be used in these clauses,

36
00:02:10,912 --> 00:02:13,999
then the joins that rely 
on the WHERE clause

37
00:02:14,172 --> 00:02:17,771
and to conclude, joins based
on another type of clause

38
00:02:17,947 --> 00:02:19,556
which is the JOIN clause.

39
00:02:25,557 --> 00:02:29,169
We saw in the previous lesson of
introduction to the SQL language

40
00:02:29,363 --> 00:02:32,563
that it is based on a basic syntax

41
00:02:32,740 --> 00:02:34,665
which includes a certain number
of keywords

42
00:02:34,844 --> 00:02:37,544
defining clauses, selection clauses,

43
00:02:37,711 --> 00:02:40,754
conditional filter, aggregation, etc.

44
00:02:41,250 --> 00:02:42,312
And in this lesson,

45
00:02:42,505 --> 00:02:45,218
we address the conditional
filter clause

46
00:02:45,381 --> 00:02:49,431
which is expressed by
the WHERE keyword with a condition.

47
00:02:50,365 --> 00:02:52,115
The basic syntax of this query

48
00:02:52,284 --> 00:02:54,309
includes first of all the word SELECT

49
00:02:54,505 --> 00:02:58,981
followed by the name of the attributes
or the asterisk metacharacter

50
00:02:59,145 --> 00:03:01,232
when we want to select 
all the attributes,

51
00:03:01,406 --> 00:03:04,144
of the FROM keyword, followed
by the name of the table

52
00:03:04,301 --> 00:03:07,276
from which the information will come

53
00:03:08,086 --> 00:03:10,773
and finally the WHERE keyword
followed by the condition,

54
00:03:10,952 --> 00:03:13,154
a condition which includes 3 elements:

55
00:03:13,331 --> 00:03:15,781
an attribute, an operator 
and a criterion.

56
00:03:16,041 --> 00:03:17,766
If we take the example of the search

57
00:03:17,954 --> 00:03:19,891
for hotels with 20 beds in the Seychelles,

58
00:03:20,076 --> 00:03:23,601
wee see that the condition in
the conditional clause

59
00:03:23,810 --> 00:03:27,223
includes as an attribute the 
"hotels.beds" keyword,

60
00:03:27,390 --> 00:03:28,952
so the attribute "beds",

61
00:03:29,128 --> 00:03:33,740
as the operator the "equal" sign and
as a criterion the value 20.

62
00:03:34,258 --> 00:03:35,833
In the case of the 
Seychelles database,

63
00:03:36,004 --> 00:03:39,229
we have a set of 124 hotels

64
00:03:40,122 --> 00:03:44,010
and if this conditional filter 
request is applied

65
00:03:44,174 --> 00:03:47,686
on the criterion 
"number of beds = 20",

66
00:03:48,100 --> 00:03:50,825
we see that we are actually
extracting a series of 10 hotels

67
00:03:50,999 --> 00:03:53,576
with exactly 20 beds.

68
00:04:03,190 --> 00:04:06,140
The operators that we can use
in a WHERE clause

69
00:04:06,321 --> 00:04:08,158
are of different natures

70
00:04:08,364 --> 00:04:10,561
starting with the general operators

71
00:04:10,740 --> 00:04:13,602
and in the first place the
"equal" operator

72
00:04:13,779 --> 00:04:16,529
which allows to compare
two values ​​between them

73
00:04:17,521 --> 00:04:22,084
and its alter ego the "different from" 
attribute that can be expressed

74
00:04:22,264 --> 00:04:25,114
either in the form of an exclamation
point and the equal sign

75
00:04:25,299 --> 00:04:28,250
or 2 signs "smaller and bigger than".

76
00:04:28,581 --> 00:04:31,006
Then the 2 attributes "lower and
higher than"

77
00:04:31,173 --> 00:04:33,898
or alternatively "less than 
or equal to".

78
00:04:34,947 --> 00:04:38,497
The intervals and lists, with for
the lists the IN keyword,

79
00:04:38,672 --> 00:04:42,022
followed by a series of values ​​
separated by commas

80
00:04:42,195 --> 00:04:44,382
and enclosed in brackets

81
00:04:44,556 --> 00:04:47,718
which express the idea that the
value of the attribute is present

82
00:04:47,896 --> 00:04:51,313
in the collection or the sample
of the proposed values.

83
00:04:52,009 --> 00:04:54,547
And for the intervals, 
the keyword BETWEEN

84
00:04:54,736 --> 00:04:58,086
followed by 2 values ​​separated
by the AND keyword

85
00:04:58,336 --> 00:04:59,386
which expresses the idea

86
00:04:59,574 --> 00:05:01,624
that the value of the attribute is

87
00:05:01,809 --> 00:05:05,217
between the 2 limits defined
by value 1 and value 2.

88
00:05:06,071 --> 00:05:07,621
The test on null values

89
00:05:07,844 --> 00:05:10,907
with the keywords: IS NULL / IS NOT NULL

90
00:05:11,089 --> 00:05:15,377
to check if the value of the
attribute is null or not null.

91
00:05:16,738 --> 00:05:18,775
And finally, the inclusion

92
00:05:18,965 --> 00:05:21,036
and exclusion operators
of strings of characters

93
00:05:21,212 --> 00:05:23,336
which allows to work on strings
of characters

94
00:05:23,764 --> 00:05:26,764
with first the equality operator,

95
00:05:27,046 --> 00:05:28,258
which allows to compare

96
00:05:28,430 --> 00:05:32,342
a character string with a value in brackets.

97
00:05:33,536 --> 00:05:36,590
An equivalent of the equal sign
is the LIKE operator

98
00:05:37,136 --> 00:05:39,974
except that it is case-insensitive,

99
00:05:40,161 --> 00:05:43,886
so independent from upper
and lower case letters

100
00:05:44,066 --> 00:05:47,534
used to describe the value 
string of character

101
00:05:48,100 --> 00:05:52,988
this is true in the case of
SQLite but it is not systematic,

102
00:05:53,175 --> 00:05:56,650
with all the database systems.

103
00:05:58,341 --> 00:06:02,266
The LIKE operator with the 
metacharacters,

104
00:06:02,450 --> 00:06:04,425
here in the SQL language,

105
00:06:04,593 --> 00:06:08,122
is the "percent" sign that is used
as a metacharacter,

106
00:06:08,624 --> 00:06:11,700
so as a replacement character 
for strings of characters.

107
00:06:11,875 --> 00:06:15,187
So here, we will look for a 
set of objects

108
00:06:15,358 --> 00:06:18,345
whose attribute includes the
value string of character

109
00:06:18,543 --> 00:06:19,918
in one place or another.

110
00:06:20,193 --> 00:06:22,330
And finally, the NOT LIKE operator

111
00:06:22,502 --> 00:06:25,274
to say that a value is not included.

112
00:06:25,542 --> 00:06:31,579
And as we say in PostgreSQL, LIKE
and "equal" are equivalent

113
00:06:31,856 --> 00:06:35,181
and we have another keyword,
another operator, ILIKE,

114
00:06:35,346 --> 00:06:37,928
which is case-insensitive. 

115
00:06:38,999 --> 00:06:40,637
This table summarizes

116
00:06:40,802 --> 00:06:43,002
the different types of operators
we have just seen,

117
00:06:43,177 --> 00:06:46,077
so the general operators,
lists and intervals,

118
00:06:46,257 --> 00:06:51,220
the null values ​​and the operators
for the strings of characters.

119
00:06:51,912 --> 00:06:54,512
These operators are used 
to define conditions

120
00:06:54,668 --> 00:06:56,668
and what is interesting in 
the WHERE clauses

121
00:06:56,831 --> 00:06:58,956
is that these conditions can be combined

122
00:06:59,137 --> 00:07:03,025
to do elaborated researches.

123
00:07:03,951 --> 00:07:08,188
The combination of conditions is based
on the AND and OR keywords
 
124
00:07:08,536 --> 00:07:15,649
which allow to associate 2 conditions 
inclusively or exclusively.

125
00:07:16,261 --> 00:07:19,916
Additional conditions can be
added to this system

126
00:07:20,534 --> 00:07:23,978
by using the usual bracket rules.

127
00:07:25,993 --> 00:07:28,480
So we illustrate here these operators

128
00:07:28,678 --> 00:07:30,940
in the case of a SpatiaLite database

129
00:07:31,113 --> 00:07:36,313
by selecting in the HOTELS table
the names and the beds

130
00:07:39,513 --> 00:07:42,976
and by adding as conditional clause

131
00:07:43,148 --> 00:07:46,810
the fact that the beds 
must be equal to 20

132
00:07:47,362 --> 00:07:49,533
and we make this request.

133
00:07:49,716 --> 00:07:52,628
By modifying this query we can search for

134
00:07:52,822 --> 00:07:55,785
all the hotels with fewer than 20 beds,

135
00:07:57,392 --> 00:08:00,342
all the hotels that have more
than 20 beds of course,

136
00:08:03,954 --> 00:08:09,892
all the hotels that have 158 or 176 beds

137
00:08:11,894 --> 00:08:13,368
and there are 2

138
00:08:13,547 --> 00:08:16,547
which have exactly 158 and 176 beds.

139
00:08:17,473 --> 00:08:20,398
Alternatively, we can search for
all the hotels

140
00:08:20,571 --> 00:08:26,446
whose number of beds is between
these 2 values ​​of 158 and 176

141
00:08:27,332 --> 00:08:29,444
and we see that there are 3,

142
00:08:29,634 --> 00:08:31,984
which also allows to show that the limits,

143
00:08:32,169 --> 00:08:37,370
158 and 176, are inclusive
and not exclusive.

144
00:08:38,544 --> 00:08:41,407
We then search here for all the hotels

145
00:08:41,585 --> 00:08:44,598
whose name corresponds to Banyan Tree.

146
00:08:46,008 --> 00:08:47,758
We find this hotel.

147
00:08:47,993 --> 00:08:52,442
and we see that if we had written
Banyan Tree with a lower case T,

148
00:08:52,908 --> 00:08:55,070
the request would have given no result

149
00:08:55,420 --> 00:09:01,345
whereas in the case of SpatiaLite 
with a LIKE,

150
00:09:02,851 --> 00:09:04,693
the query is not case-sensitive

151
00:09:04,896 --> 00:09:06,591
and we find the hotel wanted.

152
00:09:08,292 --> 00:09:11,717
We then research all the hotels
whose name begins with B,

153
00:09:11,934 --> 00:09:14,372
and we find 13.

154
00:09:16,525 --> 00:09:20,538
Then all the hotels whose
name begins with B

155
00:09:20,731 --> 00:09:22,716
or whose name begins with C.

156
00:09:24,557 --> 00:09:27,107
And we add an additional condition,

157
00:09:27,993 --> 00:09:32,043
the fact that the number of beds
must be greater than 100.

158
00:09:33,234 --> 00:09:37,284
And we see that there are 4
candidates meeting these criteria.

159
00:09:39,470 --> 00:09:42,605
We now perform the same
series of operations

160
00:09:42,983 --> 00:09:45,258
in the case of a PostGIS database

161
00:09:45,423 --> 00:09:48,161
by using the pgAdmin interface,

162
00:09:49,509 --> 00:09:52,872
so again we select in the hotel table

163
00:09:53,074 --> 00:09:54,323
the NAME and BEDS fields,

164
00:09:54,513 --> 00:09:58,286
we add a criterion in the graphic interface

165
00:09:59,239 --> 00:10:03,440
so that the number of hotels...
the number of beds is equal to 20

166
00:10:04,798 --> 00:10:07,373
and we change the operator 
in this request

167
00:10:07,535 --> 00:10:09,898
to have the number of hotels

168
00:10:10,067 --> 00:10:11,567
whose number of beds is less than 20,

169
00:10:11,739 --> 00:10:14,017
now greater than 20.

170
00:10:20,515 --> 00:10:24,089
As before, we will search for hotels

171
00:10:24,254 --> 00:10:29,404
whose number of beds is 158 ​​or 176,

172
00:10:29,561 --> 00:10:33,149
and we see that we have to
write in this interface

173
00:10:33,318 --> 00:10:35,780
the whole of the condition

174
00:10:36,480 --> 00:10:41,243
in the same way as in the
SpatiaLite case

175
00:10:41,435 --> 00:10:43,930
where we do this in pure SQL.

176
00:10:44,427 --> 00:10:47,934
So here whether we use in this case
the graphic interface

177
00:10:48,511 --> 00:10:50,298
or not does not make any difference.

178
00:10:52,211 --> 00:10:55,922
The request for hotels

179
00:10:56,114 --> 00:10:59,150
whose number of rooms is between
158 and 176,

180
00:10:59,320 --> 00:11:01,942
you saw it appear and now
we look for the hotel

181
00:11:02,123 --> 00:11:03,674
which is called Banyan Tree

182
00:11:04,245 --> 00:11:07,185
that we find of course,

183
00:11:08,002 --> 00:11:11,077
the example with a lower case T

184
00:11:11,643 --> 00:11:14,893
and we see that indeed 
there is no result,

185
00:11:15,113 --> 00:11:18,738
by replacing the "equal"
operator by the LIKE operator,

186
00:11:18,908 --> 00:11:21,507
still no result so as I told you

187
00:11:21,711 --> 00:11:24,836
LIKE is case-sensitive.

188
00:11:25,024 --> 00:11:30,437
We must use the ILIKE operator
to make a request

189
00:11:30,612 --> 00:11:33,187
that is not case-sensitive.

190
00:11:34,549 --> 00:11:36,323
As before,

191
00:11:37,324 --> 00:11:40,174
we look for hotels whose name 
starts with B,

192
00:11:40,373 --> 00:11:42,999
we also find 13 which is reassuring,

193
00:11:43,199 --> 00:11:48,774
and we now associate an additional request

194
00:11:49,002 --> 00:11:54,202
with again the name of the hotel,
which starts this time with the letter C

195
00:11:55,431 --> 00:11:58,281
and then third supplementary request,

196
00:11:58,488 --> 00:12:02,516
the number of beds greater 
than 100 as before.

197
00:12:05,683 --> 00:12:08,896
And as earlier, we find 4 candidates.

198
00:12:10,792 --> 00:12:13,467
No. Something curious happened here!

199
00:12:16,024 --> 00:12:17,924
The brackets in the right place,

200
00:12:20,586 --> 00:12:22,299
we find our 4 candidates.

201
00:12:36,966 --> 00:12:41,077
The principle of joins consists in
associating information

202
00:12:41,256 --> 00:12:43,943
coming from 2 or more tables

203
00:12:44,680 --> 00:12:48,803
and can be applied either on the fly
or using SQL queries.

204
00:12:49,222 --> 00:12:52,972
We saw in the lesson on data modeling,

205
00:12:53,164 --> 00:12:56,376
an example of an attribute
table join on the fly

206
00:12:56,564 --> 00:12:59,039
performed in the QGIS software.

207
00:12:59,771 --> 00:13:03,909
Here we will look at the way
to use the SQL language

208
00:13:04,087 --> 00:13:07,187
to perform these table joins.

209
00:13:08,200 --> 00:13:11,025
Let's suppose that we have 
2 tables, A and B,

210
00:13:11,307 --> 00:13:15,645
consisting of a series of lines
which contain objects,

211
00:13:15,830 --> 00:13:21,017
which themselves have a number
of attributes from A1 to An

212
00:13:21,937 --> 00:13:24,999
and similarly for the table B
which has dimensions P by Q

213
00:13:25,265 --> 00:13:28,527
and let's suppose that 
table A has 20 lines,

214
00:13:28,700 --> 00:13:31,520
and table B 10 lines.

215
00:13:32,024 --> 00:13:37,949
The association request for these standard
tables would be of the SELECT type,

216
00:13:38,888 --> 00:13:41,738
the series of the name of the attributes,
the FROM keyword

217
00:13:41,911 --> 00:13:45,777
and then the 2 table names that follow
each other separated by a comma.

218
00:13:46,627 --> 00:13:50,714
This type of query would give
the cartesian product of these 2 tables

219
00:13:50,919 --> 00:13:53,643
so each element,
each line of table A

220
00:13:53,834 --> 00:13:56,297
would be multiplied by each 
line of table B

221
00:13:56,500 --> 00:13:58,722
or associated with each line 
of the table B

222
00:13:59,124 --> 00:14:03,624
so as to produce a set 
resulting in 200 lines.

223
00:14:04,284 --> 00:14:06,384
And this set resulting in 200 lines

224
00:14:06,574 --> 00:14:08,550
corresponds to the particular case,

225
00:14:08,720 --> 00:14:12,045
a particular case of join 
called the CROSS JOIN.

226
00:14:12,692 --> 00:14:15,292
The table join is most often based

227
00:14:15,514 --> 00:14:17,589
on a common field

228
00:14:17,809 --> 00:14:21,821
which allows to associate
together the rows of 2 tables

229
00:14:22,646 --> 00:14:25,046
for which this common field
has the same value.

230
00:14:25,571 --> 00:14:30,346
The type of join leads to
distinguish 3 types of situations

231
00:14:30,507 --> 00:14:31,957
in the results that we produce,

232
00:14:32,134 --> 00:14:34,959
in the comparisons between
the lines of the 2 tables.

233
00:14:35,133 --> 00:14:36,345
First of all,

234
00:14:36,555 --> 00:14:41,654
the case where the 2 lines are joined

235
00:14:41,831 --> 00:14:44,365
by a common field which has the same value.

236
00:14:44,565 --> 00:14:48,916
After we have the situations
where the lines of table A

237
00:14:49,135 --> 00:14:53,078
which do not have join line
equivalents in table B

238
00:14:53,298 --> 00:14:54,510
therefore B is null,

239
00:14:55,147 --> 00:14:57,223
and conversely the lines of table B

240
00:14:57,411 --> 00:14:59,130
which have no equivalent 
on the side of A

241
00:14:59,321 --> 00:15:01,241
therefore for which A is null.

242
00:15:01,522 --> 00:15:04,997
If we look at the size of
the result tables obtained

243
00:15:05,172 --> 00:15:11,060
we see that if the number
of joins is null,

244
00:15:11,235 --> 00:15:14,322
so there is no line of the 2 tables

245
00:15:14,518 --> 00:15:17,867
which have a common
value for the JOIN field,

246
00:15:18,694 --> 00:15:22,407
we find a set of 30 
lines in the result,

247
00:15:22,576 --> 00:15:26,788
so the 20 lines of table A
for which B is null

248
00:15:26,985 --> 00:15:29,985
and the 10 lines of table B
for which A is null.

249
00:15:30,760 --> 00:15:33,823
In the case of 5 matches,

250
00:15:34,024 --> 00:15:37,987
5 lines of each of the tables 
joined together,

251
00:15:38,167 --> 00:15:41,104
we see that the lines of A

252
00:15:41,301 --> 00:15:44,739
which would have a null match
on the side of B are 15

253
00:15:44,956 --> 00:15:46,668
and conversely the lines of B

254
00:15:46,867 --> 00:15:49,867
which are null on the side 
of A are 5

255
00:15:50,076 --> 00:15:53,513
and the final result would be
a total of 25 lines

256
00:15:54,256 --> 00:15:58,956
in a query that would take up
all of these values.

257
00:15:59,211 --> 00:16:03,711
And finally in the same spirit
if we have 10 joins,

258
00:16:03,879 --> 00:16:07,016
we find 20 possible results in total.

259
00:16:08,325 --> 00:16:09,712
The general syntax

260
00:16:09,867 --> 00:16:13,239
of which a join based on
the WHERE clause looks like this,

261
00:16:13,444 --> 00:16:15,857
so first the SELECT keyword

262
00:16:16,046 --> 00:16:19,658
followed by the attribute 
of the first table

263
00:16:19,846 --> 00:16:23,146
and the attribute of the second table
separated by a comma.

264
00:16:23,671 --> 00:16:27,208
The FROM keyword, followed
by the 2 table names

265
00:16:27,483 --> 00:16:29,171
separated by a comma again

266
00:16:29,363 --> 00:16:31,350
and then the WHERE clause

267
00:16:31,510 --> 00:16:38,535
with the condition that associates
an attribute of the first table,

268
00:16:39,101 --> 00:16:40,563
the equal operator

269
00:16:40,723 --> 00:16:44,000
and as a criterion an attribute
of the second table,

270
00:16:44,233 --> 00:16:49,658
the 2 attributes of the WHERE
clause defining the join.

271
00:16:51,883 --> 00:16:55,114
Taking the case of the
SpatiaLite database

272
00:16:55,289 --> 00:16:56,135
on the Seychelles,

273
00:16:56,339 --> 00:16:59,539
we write the same query as before

274
00:16:59,974 --> 00:17:03,173
for hotel beds.

275
00:17:03,358 --> 00:17:06,433
So the SELECT keyword,
the NAME and BEDS fields,

276
00:17:06,630 --> 00:17:09,090
number of beds of the HOTEL table,

277
00:17:09,306 --> 00:17:11,630
the FROM keyword with the HOTEL table

278
00:17:11,831 --> 00:17:14,994
and then the conditional clause
in which we express the idea

279
00:17:15,195 --> 00:17:19,283
that the district identifier which
is associated with the hotel

280
00:17:19,462 --> 00:17:23,350
is equal to its equivalent
in the DISTRICT table.

281
00:17:23,865 --> 00:17:27,977
We add the district name
to the desired result

282
00:17:28,177 --> 00:17:30,206
and then the name of the DISTRICT table.

283
00:17:30,440 --> 00:17:34,984
And we get the list of
the 124 hotels of the Seychelles

284
00:17:35,150 --> 00:17:36,200
with their number of beds

285
00:17:37,095 --> 00:17:39,572
and the name of the district
in which they are located.

286
00:17:40,477 --> 00:17:44,490
The same operation now
in the pgAdmin interface

287
00:17:44,672 --> 00:17:51,853
of the postgres postGIS table where
we graphically link the 2 tables

288
00:17:54,430 --> 00:17:56,973
by the identifier field,

289
00:17:57,158 --> 00:17:58,400
we select the fields

290
00:17:58,565 --> 00:18:00,586
which we want to see appearing 
in the result

291
00:18:00,753 --> 00:18:03,745
and we execute the query directly.

292
00:18:16,832 --> 00:18:21,272
The basic syntax of a join query
based on the JOIN clause

293
00:18:22,510 --> 00:18:23,897
is as follows:

294
00:18:24,077 --> 00:18:25,963
so first the SELECT keyword,

295
00:18:26,199 --> 00:18:27,849
the relevant attributes

296
00:18:28,589 --> 00:18:30,508
which we want to see 
appearing in the result,

297
00:18:30,698 --> 00:18:33,555
so an attribute of the table 1,
an attribute of the table 2.

298
00:18:33,722 --> 00:18:37,889
The join that goes from table 1 to table 2

299
00:18:38,089 --> 00:18:41,217
and then the ON keyword
to specify the field

300
00:18:41,394 --> 00:18:43,492
on which this join is done

301
00:18:43,697 --> 00:18:47,011
in this case the attribute 
3 of table 1

302
00:18:47,186 --> 00:18:51,975
which is connected with the 
attribute 4 of table 2.

303
00:18:53,008 --> 00:18:56,032
If we compare this syntax
with the one we have just seen

304
00:18:56,212 --> 00:18:58,666
in the case of the join based 
on the WHERE clause,

305
00:18:58,874 --> 00:19:01,419
we see that the difference is very small

306
00:19:01,789 --> 00:19:07,618
since the word JOIN has simply
been introduced to separate the tables

307
00:19:07,994 --> 00:19:12,230
and the ON keyword
instead of the WHERE clause

308
00:19:12,398 --> 00:19:15,144
to define the join criterion.

309
00:19:15,306 --> 00:19:21,049
The interest of using the syntax
that uses the JOIN clause,

310
00:19:21,224 --> 00:19:24,649
is to separate well the 
join elements from

311
00:19:25,131 --> 00:19:29,906
the conditional elements in 
a complex SQL query,

312
00:19:30,094 --> 00:19:32,026
which makes the query more readable.

313
00:19:33,050 --> 00:19:35,358
There are several types of joins

314
00:19:35,546 --> 00:19:41,088
starting with the simple 
join or INNER JOIN

315
00:19:41,265 --> 00:19:44,265
the INNER keyword being unnecessary,

316
00:19:44,449 --> 00:19:47,231
INNER JOIN and JOIN are 
equivalent things.

317
00:19:48,196 --> 00:19:54,852
Let's take the example of a series
of hotels associated to a locality

318
00:19:55,018 --> 00:19:58,331
and of a second table in
which there is a series of localities

319
00:19:58,634 --> 00:20:01,375
and we see that in our example

320
00:20:02,067 --> 00:20:05,581
the elements that will be 
selected, for which

321
00:20:05,829 --> 00:20:08,832
the "ID locality" and "ID" fields

322
00:20:09,866 --> 00:20:12,866
correspond, are 3,

323
00:20:13,091 --> 00:20:15,517
the 3 hotels La Desirade, Augerine
and Coco d'Or

324
00:20:15,719 --> 00:20:18,168
which are found in the result table.

325
00:20:18,456 --> 00:20:23,407
Second type of join, the LEFT JOIN
or LEFT OUTER JOIN,

326
00:20:23,686 --> 00:20:26,366
with the word OUTER which is again optional

327
00:20:26,683 --> 00:20:29,192
which consists in taking all

328
00:20:29,577 --> 00:20:33,609
the elements of table A, of set A,

329
00:20:33,998 --> 00:20:38,928
to which we join the
corresponding elements of table B,

330
00:20:39,326 --> 00:20:42,830
so in our case all the hotels 
of the HOTEL table

331
00:20:44,014 --> 00:20:46,268
with, when it is possible,

332
00:20:46,521 --> 00:20:50,058
the joined information elements
of the LOCALITY table.

333
00:20:50,392 --> 00:20:53,649
And we see that our result
now contains 5 elements

334
00:20:53,934 --> 00:20:59,129
with null values ​​for the joins in 2 cases

335
00:20:59,621 --> 00:21:01,908
and the joined parameters, so the locality.

336
00:21:02,645 --> 00:21:06,151
Third join type, the RIGHT JOIN

337
00:21:06,317 --> 00:21:09,052
which allows to select all

338
00:21:09,224 --> 00:21:13,012
the elements of the second table

339
00:21:13,202 --> 00:21:17,283
so all the localities to which
we associate, when it is possible,

340
00:21:17,487 --> 00:21:19,906
the elements of the first table

341
00:21:20,365 --> 00:21:22,867
which would not be null at the join level.

342
00:21:23,266 --> 00:21:27,377
And we obtain as a result a table
of 4 values

343
00:21:28,233 --> 00:21:32,696
including the 3 basic cases 
where the join exists

344
00:21:32,892 --> 00:21:35,829
and then the last case, the
Sans souci" locality that has no join

345
00:21:36,009 --> 00:21:39,858
and for which the elements
of the HOTEL table are null.

346
00:21:40,573 --> 00:21:43,836
And finally the FULL JOIN
which consists in taking

347
00:21:44,015 --> 00:21:47,480
all the possibles,

348
00:21:47,678 --> 00:21:52,241
so the series of 3 joins

349
00:21:52,617 --> 00:21:55,700
where we have objects linked on both sides

350
00:21:55,885 --> 00:22:00,831
plus the 3 cases where,
either on side A or on side B,

351
00:22:01,421 --> 00:22:03,771
the joined elements are null.

352
00:22:04,016 --> 00:22:07,487
And we obtain a table that has 6 elements

353
00:22:07,651 --> 00:22:11,389
so 2 less than the table of 8

354
00:22:11,578 --> 00:22:15,694
which we would have obtained if no
joined element had been present.

355
00:22:16,489 --> 00:22:19,987
The syntax of these specific join queries

356
00:22:20,196 --> 00:22:24,948
still remains the same with just
the LEFT, RIGHT or FULL clause

357
00:22:25,147 --> 00:22:28,715
which is added to the JOIN clause
in the join definition.

358
00:22:31,409 --> 00:22:35,340
An example with the SpatiaLite 
database of the Seychelles

359
00:22:36,230 --> 00:22:39,855
where we define in the objects
of the request

360
00:22:40,045 --> 00:22:41,420
the name of the hotels

361
00:22:41,604 --> 00:22:44,493
and then the name of the districts
in which these hotels are situated

362
00:22:47,045 --> 00:22:48,954
that we will link by a join.

363
00:22:49,128 --> 00:22:53,651
We define this join between
the HOTEL table and the DISTRICT table

364
00:22:54,812 --> 00:23:00,621
on the basis of the district identifier 
field of the HOTEL table

365
00:23:00,838 --> 00:23:04,669
is equivalent to the district 
identifier in the DISTRICT table.

366
00:23:05,743 --> 00:23:10,805
Same operation in postgres 
postGIS with pgAdmin

367
00:23:10,992 --> 00:23:13,467
where we graphically add the 2 tables

368
00:23:13,652 --> 00:23:15,818
in the graphical query constructor,

369
00:23:15,996 --> 00:23:18,870
we establish connection of these
two tables,

370
00:23:19,476 --> 00:23:21,640
the fields we want to see appearing

371
00:23:21,859 --> 00:23:27,237
and in the join tab we define
the join that interests us.

372
00:23:28,448 --> 00:23:33,328
However, we see that in the SQL 
edition part of the query,

373
00:23:33,744 --> 00:23:37,031
the query is written
in a WHERE clause form

374
00:23:37,231 --> 00:23:39,122
and not a JOIN clause.

375
00:23:39,811 --> 00:23:42,823
I can rectify this by replacing the syntax

376
00:23:43,007 --> 00:23:45,245
and we see that the result
is always the same.

377
00:23:45,428 --> 00:23:48,937
But if with this interface pgAdmin,

378
00:23:49,138 --> 00:23:53,913
I switch to graphic mode
to return to editor mode,

379
00:23:54,298 --> 00:23:57,914
the query is transformed again
into a WHERE query

380
00:23:58,461 --> 00:24:00,745
without keeping the JOIN keyword.

381
00:24:01,396 --> 00:24:04,321
Another example now with Navicat software

382
00:24:04,524 --> 00:24:06,867
which is a commercial software

383
00:24:07,369 --> 00:24:10,802
and which offers an interesting SQL
query graphic constructor.

384
00:24:12,422 --> 00:24:16,460
We add the hotel table,
this time the locality table,

385
00:24:16,915 --> 00:24:18,002
we establish a link

386
00:24:18,160 --> 00:24:21,664
between the name of the hotel
and the name of the localities,

387
00:24:22,279 --> 00:24:23,654
we select these two elements,

388
00:24:23,826 --> 00:24:25,269
we see that we find 2 hotels

389
00:24:25,437 --> 00:24:29,652
whose name is the same
as that of the localities.

390
00:24:31,169 --> 00:24:32,235
In the graphical interface.

391
00:24:32,408 --> 00:24:36,753
I can now replace the standard
join by a LEFT JOIN

392
00:24:37,207 --> 00:24:40,032
which will give me all the 124 hotels

393
00:24:40,205 --> 00:24:41,604
with at the top of the list

394
00:24:41,800 --> 00:24:45,979
the 2 for which there is
a locality in the join.

395
00:24:47,335 --> 00:24:50,695
Then we go to the RIGHT JOIN

396
00:24:51,204 --> 00:24:52,845
which will give me all the localities

397
00:24:53,014 --> 00:24:56,227
including the 2 joined hotels

398
00:24:56,574 --> 00:24:59,718
and we see that
there are 346 of these localities

399
00:24:59,990 --> 00:25:04,113
and finally we can still do
a FULL JOIN of these 2 tables

400
00:25:04,858 --> 00:25:09,824
to find that we have 466
lines in the answer.

401
00:25:11,987 --> 00:25:14,366
In these joins based on the JOIN clause

402
00:25:14,543 --> 00:25:17,543
we can look at a few particular cases

403
00:25:18,534 --> 00:25:20,064
which can be illustrated

404
00:25:20,425 --> 00:25:22,811
even if the use of these diagrams

405
00:25:23,018 --> 00:25:25,769
is not quite correct as 
we will see later

406
00:25:25,974 --> 00:25:29,261
when we will talk about merging requests.

407
00:25:29,751 --> 00:25:31,830
It nevertheless allows
to illustrate the spirit of the subject

408
00:25:32,009 --> 00:25:34,625
so we have the LEFT JOIN request

409
00:25:35,011 --> 00:25:39,186
which elements that make the match 
we would like to remove 

410
00:25:39,385 --> 00:25:41,820
to have only the elements of table A

411
00:25:42,002 --> 00:25:44,453
which have no correspondence in table B.

412
00:25:44,649 --> 00:25:48,320
If we take our example
of 5 hotels and 3 localities

413
00:25:48,526 --> 00:25:53,464
we remember that the LEFT JOIN
gave a table of 5 results

414
00:25:54,455 --> 00:25:57,377
and without the intersection
it simply means removing

415
00:25:57,557 --> 00:26:00,735
the 3 cases where the join exists

416
00:26:01,203 --> 00:26:05,064
to keep only the 2 elements
which are non-joining.

417
00:26:05,384 --> 00:26:07,559
From the point of view of the SQL syntax,

418
00:26:07,758 --> 00:26:10,527
it simply means that we will add

419
00:26:11,364 --> 00:26:13,459
a filter clause, 

420
00:26:13,910 --> 00:26:15,975
a conditional filter

421
00:26:18,205 --> 00:26:20,885
to the join query in which 
we express the idea 

422
00:26:21,102 --> 00:26:22,346
that the join attribute

423
00:26:22,545 --> 00:26:25,472
in this case the attribute 4 of table 2,

424
00:26:25,663 --> 00:26:29,559
so the ID field of
the locality table is null.

425
00:26:30,402 --> 00:26:33,402
Same thing for the right join

426
00:26:34,225 --> 00:26:37,477
with in this case the 4 selected fields

427
00:26:37,671 --> 00:26:40,864
which, when the joined elements are removed,

428
00:26:41,055 --> 00:26:43,624
are reduced to a single result.

429
00:26:43,811 --> 00:26:46,499
And again in terms of SQL syntax

430
00:26:46,720 --> 00:26:49,720
the addition of a conditional clause

431
00:26:50,452 --> 00:26:53,554
based on the fact that the attribute

432
00:26:54,745 --> 00:26:58,592
of the join in the first table is null.

433
00:27:00,299 --> 00:27:02,049
For the full request,

434
00:27:02,253 --> 00:27:07,530
we had 6 results from which
we removed the 3 joined elements

435
00:27:08,506 --> 00:27:12,941
to obtain a final result
that includes 3 objects.

436
00:27:13,154 --> 00:27:14,640
And from the SQL point of view,

437
00:27:14,807 --> 00:27:17,720
we add this time a conditional clause

438
00:27:18,319 --> 00:27:22,825
which expresses the fact that
the 2 attributes of the join,

439
00:27:23,592 --> 00:27:25,397
that in the 2 attributes of the join,

440
00:27:25,564 --> 00:27:27,543
one or the other must be null.

441
00:27:38,200 --> 00:27:43,480
We have seen in this lesson how 
the conditional requests work

442
00:27:43,480 --> 00:27:45,360
based on the WHERE clause.

443
00:27:45,379 --> 00:27:49,889
In particular, we have seen the different 
types of operators that we can use

444
00:27:49,889 --> 00:27:55,269
in these clauses and we have seen how 
this clause can be used to link

445
00:27:55,269 --> 00:27:56,269
the two tables.

446
00:27:56,269 --> 00:28:02,769
We have also seen the different types 
of joins that we can have in SQL and


447
00:28:02,769 --> 00:28:09,299
we have seen how,in a very practical way, 
we implement these SQL requests

448
00:28:09,299 --> 00:28:14,669
in various database 
management environments.


