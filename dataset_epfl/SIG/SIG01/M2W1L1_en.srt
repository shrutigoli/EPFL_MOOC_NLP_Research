1
00:00:22,347 --> 00:00:23,276
Welcome to this lesson

2
00:00:23,455 --> 00:00:26,617
which will focus on 
geographic data storage

3
00:00:27,190 --> 00:00:29,352
Indeed, to be able to use geodata

4
00:00:29,526 --> 00:00:31,542
in geographic information systems,

5
00:00:31,709 --> 00:00:33,940
they must be stored on a digital support.

6
00:00:34,112 --> 00:00:37,037
And this is the question we will be
discussing this morning.

7
00:00:38,105 --> 00:00:40,646
We will therefore address
the following questions:

8
00:00:40,808 --> 00:00:42,186
what do we want to store?

9
00:00:42,436 --> 00:00:44,061
What kind of information?

10
00:00:44,261 --> 00:00:46,436
What are the stakes involved
in the storage of geodata

11
00:00:46,610 --> 00:00:50,034
particularly in terms of
structuring, accessibility?

12
00:00:50,559 --> 00:00:52,636
And what are the types of supports

13
00:00:52,799 --> 00:00:56,343
that are best suited to meet 
these challenges?

14
00:00:56,991 --> 00:00:59,313
As things are quite different

15
00:00:59,512 --> 00:01:01,899
between the vector world 
and the raster world

16
00:01:02,076 --> 00:01:04,420
we will treat these 
two cases successively

17
00:01:04,889 --> 00:01:07,162
and we will start with 
the vector world.

18
00:01:13,357 --> 00:01:16,282
We see in this image a
series of vectorial objects,

19
00:01:16,455 --> 00:01:19,455
fields, roads and a collection of trees.

20
00:01:20,030 --> 00:01:22,006
The most fundamental information

21
00:01:22,176 --> 00:01:24,670
that we wish to keep with
regards to these objects

22
00:01:25,082 --> 00:01:26,588
concerns their geometry,

23
00:01:26,757 --> 00:01:29,919
in particular the type of geometry
we are facing

24
00:01:30,091 --> 00:01:33,413
and the coordinates of the different 
summits that compose it.

25
00:01:34,196 --> 00:01:37,583
And who say coordinates also
says projection system,

26
00:01:37,757 --> 00:01:41,374
so these two types of information
should be kept.

27
00:01:42,342 --> 00:01:45,305
Beyond geometry, what
particularly interests us

28
00:01:45,487 --> 00:01:47,459
is the characteristics 
of these objects.

29
00:01:47,646 --> 00:01:48,874
Particularly,

30
00:01:49,049 --> 00:01:52,299
the type of crop in the case
of fields or the owner.

31
00:01:52,732 --> 00:01:55,194
What is summarized under the name,

32
00:01:55,421 --> 00:01:57,874
the denomination of attribute data.

33
00:01:58,086 --> 00:02:01,580
The elements of representation
of these objects are also important

34
00:02:01,756 --> 00:02:04,206
in particular in the case of the filling,

35
00:02:04,389 --> 00:02:05,579
the color and the transparency,

36
00:02:05,794 --> 00:02:09,708
and in the case of the contour,

37
00:02:10,177 --> 00:02:12,797
the color, the transparency
but also the thickness,

38
00:02:13,066 --> 00:02:16,375
all the elements which are part
of the symbology.

39
00:02:17,235 --> 00:02:19,085
And finally, what interests us also is

40
00:02:19,279 --> 00:02:21,896
the way the objects are connected
to each other.

41
00:02:22,078 --> 00:02:23,682
that is to say the topology,

42
00:02:24,427 --> 00:02:26,910
in particular in network systems.

43
00:02:27,289 --> 00:02:29,666
For example we can think of a
stream network,

44
00:02:29,841 --> 00:02:31,892
we would like to know in what
direction the water flows

45
00:02:32,054 --> 00:02:35,164
and how the different rivers are
connected to each other.

46
00:02:44,748 --> 00:02:47,536
Looking now at the stakes
of data storage,

47
00:02:47,710 --> 00:02:49,723
and at the type of media used,

48
00:02:50,826 --> 00:02:53,163
we notice that the primary
objective of the storage

49
00:02:53,326 --> 00:02:56,759
is the persistence of the data.
A data is said to be persistent

50
00:02:56,954 --> 00:03:00,388
if, when added to a support,
it remains accessible,

51
00:03:00,954 --> 00:03:03,081
as long as it has not been 
explicitly deleted.

52
00:03:04,163 --> 00:03:06,727
Beyond the persistence, what interests us

53
00:03:06,907 --> 00:03:10,936
is the data structuring which
constitutes a very fundamental aspect.

54
00:03:11,785 --> 00:03:14,889
We will understand it through
the following example.

55
00:03:16,470 --> 00:03:19,367
On this image we can see 
the plots seen earlier

56
00:03:19,529 --> 00:03:22,904
with some additional data about
their owners:

57
00:03:23,334 --> 00:03:25,685
the name, first name and phone number.

58
00:03:26,959 --> 00:03:28,461
Each plot has an owner

59
00:03:28,623 --> 00:03:31,136
and several plots can have the same owner.

60
00:03:31,590 --> 00:03:33,926
Which leads to repeat details

61
00:03:34,101 --> 00:03:36,994
relating to owners for each plot,

62
00:03:37,248 --> 00:03:38,924
with error risks

63
00:03:39,087 --> 00:03:42,051
especially during updates for example.

64
00:03:42,914 --> 00:03:43,903
In order to avoid these errors,

65
00:03:44,077 --> 00:03:46,543
the data regarding the plots 
must be separated

66
00:03:46,707 --> 00:03:48,608
from the data regarding the owners

67
00:03:48,993 --> 00:03:52,892
and a link between these two sets 
of data must be established

68
00:03:53,505 --> 00:03:55,735
by means of an identifier.

69
00:03:56,624 --> 00:04:00,024
We will talk more about this data
structuring

70
00:04:00,189 --> 00:04:02,774
in lesson no. 2 of this course

71
00:04:02,987 --> 00:04:05,899
which will focus precisely on
the data structuring

72
00:04:06,087 --> 00:04:07,770
and data modeling.

73
00:04:09,148 --> 00:04:11,055
Amongst the other stakes 
of data storage,

74
00:04:11,229 --> 00:04:13,742
there is the centralization 
of the data access

75
00:04:13,918 --> 00:04:15,551
for security reasons.

76
00:04:15,814 --> 00:04:17,883
When we have confidential data,

77
00:04:18,058 --> 00:04:19,687
we would like to avoid dispersing them

78
00:04:19,867 --> 00:04:23,483
on a large number of supports
in different places.

79
00:04:23,966 --> 00:04:25,862
And for integrity reasons,

80
00:04:26,037 --> 00:04:29,595
the more we multiply the 
versions of a database

81
00:04:29,770 --> 00:04:33,933
the more risks there are that 
these data become disparate

82
00:04:34,108 --> 00:04:35,418
and can no longer be compatible.

83
00:04:35,590 --> 00:04:37,452
Finally, the management functionalities

84
00:04:37,635 --> 00:04:39,140
are also an important stake

85
00:04:39,239 --> 00:04:41,702
since we would like to avoid 
reprogramming the whole thing 

86
00:04:41,896 --> 00:04:44,007
and use existing tools 
in dedicated softwares 

87
00:04:44,190 --> 00:04:49,015
when we want to add, modify 

88
00:04:49,936 --> 00:04:51,360
and search data in a database.

89
00:05:01,034 --> 00:05:03,568
If we now examine the stakes 
of data storage

90
00:05:03,743 --> 00:05:06,138
in relation to different types of support

91
00:05:06,301 --> 00:05:07,913
that we can envisage to use,

92
00:05:08,289 --> 00:05:11,052
we see that from the perspective
of the persistence,

93
00:05:11,220 --> 00:05:14,270
the storage in simple file is
quite sufficient.

94
00:05:14,862 --> 00:05:16,909
And if we want

95
00:05:17,093 --> 00:05:19,672
to add a possibility to structure
the data,

96
00:05:19,861 --> 00:05:22,918
we must move to a more 
elaborate format

97
00:05:23,093 --> 00:05:24,632
that of the structured files.

98
00:05:24,904 --> 00:05:26,729
And in the rest of this lesson 
we will see

99
00:05:26,892 --> 00:05:29,854
examples of simple files
and structured files.

100
00:05:30,941 --> 00:05:34,501
The database elements for structuring

101
00:05:34,789 --> 00:05:37,518
will be discussed in more details
later in the course.

102
00:05:38,070 --> 00:05:41,257
The question of the
centralization of access leads us

103
00:05:41,435 --> 00:05:43,609
to that of the client-server 
architecture,

104
00:05:43,771 --> 00:05:47,696
with a database or independent files,

105
00:05:47,894 --> 00:05:50,806
housed, hosted on a central server

106
00:05:50,984 --> 00:05:53,957
accessible by a multitude of clients.

107
00:05:54,210 --> 00:05:56,129
The question of management functionalities

108
00:05:56,292 --> 00:05:59,361
brings us to the database 
management system

109
00:05:59,548 --> 00:06:01,271
available on the market.

110
00:06:02,647 --> 00:06:04,116
In the rest of this lesson,

111
00:06:04,278 --> 00:06:05,661
we will now concentrate

112
00:06:05,849 --> 00:06:07,817
on the simple file storage

113
00:06:07,983 --> 00:06:09,346
and the structured file storage

114
00:06:09,512 --> 00:06:14,317
by taking various examples of formats 
that are used in this framework.

115
00:06:14,948 --> 00:06:17,823
The first of these simple file
storage formats

116
00:06:18,232 --> 00:06:21,895
known as the Well Known Text or WKT,

117
00:06:22,613 --> 00:06:25,926
is a transparent format since 
it is readable,

118
00:06:26,094 --> 00:06:31,557
it is a simple ASCII text file,
which actually contains the geometries

119
00:06:31,730 --> 00:06:36,219
described by a keyword:
the point, LineString, polygon

120
00:06:36,550 --> 00:06:38,774
and then the succession of coordinates

121
00:06:38,949 --> 00:06:40,939
of the different summits that compose it,

122
00:06:41,113 --> 00:06:43,841
the pairs of coordinates of 
the summits that compose it.

123
00:06:45,278 --> 00:06:49,215
The 6 basic geometric forms
that are listed here

124
00:06:49,377 --> 00:06:50,716
are generally recognized by

125
00:06:50,905 --> 00:06:53,913
all the geographical
information system softwares.

126
00:06:54,331 --> 00:07:01,151
This makes this format
extremely flexible and versatile.

127
00:07:02,284 --> 00:07:05,483
In QGIS, the Well Known Text format

128
00:07:05,705 --> 00:07:10,545
can be tested using an extension
called QuickWKT.

129
00:07:11,473 --> 00:07:13,754
This extension proposes a window

130
00:07:13,917 --> 00:07:17,917
in which we can enter a
String Well Known Text,

131
00:07:18,097 --> 00:07:20,629
so the geometry type

132
00:07:20,799 --> 00:07:23,799
and the coordinates of the
points that compose it,

133
00:07:24,054 --> 00:07:27,579
here, a point located somewhere
in the Indian Ocean

134
00:07:27,753 --> 00:07:31,428
near the island of Mahé in the Seychelles.

135
00:07:32,689 --> 00:07:38,525
A point and a line that are
added in fact to the map.

136
00:07:43,168 --> 00:07:46,641
The addition of these elements
creates new layers

137
00:07:46,829 --> 00:07:49,948
which we can then delete
when we no longer need them.

138
00:07:51,004 --> 00:07:54,803
Another way to use the WKT in QGIS,

139
00:07:54,984 --> 00:07:56,836
is to create a text file

140
00:07:57,249 --> 00:08:02,894
in which we will add in
the first line

141
00:08:03,087 --> 00:08:07,140
the headings of the different
columns that compose the data

142
00:08:07,321 --> 00:08:11,138
with the keyword WKT that
indicates the column containing

143
00:08:11,316 --> 00:08:12,878
the coordinates of the points

144
00:08:13,045 --> 00:08:15,515
and then the different
attributes of the layer,

145
00:08:15,691 --> 00:08:17,435
here the Seychelles hotels.

146
00:08:17,996 --> 00:08:20,604
And we now see that we can import
this layer,

147
00:08:20,766 --> 00:08:23,015
so we add a layer of vectorial type.

148
00:08:24,047 --> 00:08:27,410
The CSV format is selected,

149
00:08:29,423 --> 00:08:32,698
it is necessary to specify
the projection system used

150
00:08:33,101 --> 00:08:35,569
in this case UTM 40 South

151
00:08:37,414 --> 00:08:38,857
and the layer is added.

152
00:08:39,094 --> 00:08:43,646
This layer can also be saved 
in VKT format

153
00:08:44,644 --> 00:08:51,116
by specifying a file of CSV type,
so separated by commas.

154
00:08:51,328 --> 00:08:55,904
and by specifying that the geometry
has to be described in VKT form.

155
00:08:57,298 --> 00:09:00,400
The second type of simple
file format that we should know

156
00:09:00,589 --> 00:09:01,879
is the Shapefile ESRI

157
00:09:02,063 --> 00:09:05,013
which has become a de facto
standard since it is used,

158
00:09:05,184 --> 00:09:08,669
at least recognized, by
almost all GIS softwares.

159
00:09:10,170 --> 00:09:13,107
This shapefile format is actually
made up of several files,

160
00:09:13,286 --> 00:09:14,871
3 of which are essential:

161
00:09:15,046 --> 00:09:17,908
the .shp that contains the
geographical entities,

162
00:09:18,082 --> 00:09:21,132
the .dbf which contains the attribute data

163
00:09:21,364 --> 00:09:25,697
and the .shx which contains
an index of geographic entities

164
00:09:26,522 --> 00:09:28,719
A series of accessory files is added

165
00:09:28,919 --> 00:09:31,031
especially the .prj

166
00:09:31,201 --> 00:09:34,964
which contains the settings
of the projection system and others.

167
00:09:36,937 --> 00:09:38,399
In the example shown here,

168
00:09:38,574 --> 00:09:42,869
we have prepared several
series of shapefile ESRI files.

169
00:09:43,887 --> 00:09:44,909
First,

170
00:09:45,094 --> 00:09:49,119
we show that a dbf file can be
opened by a spreadsheet program

171
00:09:49,279 --> 00:09:52,792
in this case OpenOffice since 
it is a file

172
00:09:52,970 --> 00:09:56,574
that contains data in the 
form of an attribute table.

173
00:09:58,201 --> 00:10:00,888
In the second dataset the
shx file was added,

174
00:10:01,051 --> 00:10:03,006
it is in the third one, the prj file

175
00:10:03,186 --> 00:10:06,583
which contains the settings 
of the projection system.

176
00:10:09,016 --> 00:10:11,083
We see next that in QGIS,

177
00:10:11,258 --> 00:10:13,461
if we want to add a layer

178
00:10:13,655 --> 00:10:16,504
of vectorial data of 
Shapefile ESRI type,

179
00:10:17,168 --> 00:10:19,069
we choose to add a vector layer,

180
00:10:19,669 --> 00:10:22,541
and we see that if we select
the first case

181
00:10:22,724 --> 00:10:24,718
where the shx file is missing,

182
00:10:25,102 --> 00:10:28,386
the import fails with an error message

183
00:10:29,048 --> 00:10:33,178
which convinces us that if the
3 files are not present

184
00:10:34,153 --> 00:10:35,369
it will not work.

185
00:10:36,264 --> 00:10:39,702
In the second example here,
we take the second case

186
00:10:39,862 --> 00:10:42,887
where we have the 3 files but
not the projection file.

187
00:10:44,078 --> 00:10:46,555
The import is done

188
00:10:46,743 --> 00:10:49,681
but we have to specify the projection system

189
00:10:49,874 --> 00:10:52,974
before adding the layer on the map.

190
00:10:53,853 --> 00:10:55,610
And finally in the third example,

191
00:10:55,785 --> 00:10:59,308
when we have the 3 basic files
plus the projection file

192
00:11:01,070 --> 00:11:03,289
which is example C,

193
00:11:04,002 --> 00:11:09,419
we see that the import is
done directly in the software.

194
00:11:11,677 --> 00:11:15,507
The third type of simple
standard file format

195
00:11:16,845 --> 00:11:18,637
we wanted to discuss today,

196
00:11:18,815 --> 00:11:20,792
is the dxf autocad

197
00:11:21,261 --> 00:11:23,663
which is also a very popular format,

198
00:11:23,838 --> 00:11:25,463
since it is a standard

199
00:11:25,638 --> 00:11:27,969
in the world of architects 
and urban planners.

200
00:11:28,548 --> 00:11:32,973
It is important to know that
this is not a GIS file format,

201
00:11:33,158 --> 00:11:36,500
but a CAD format, so Computer Aided Design.

202
00:11:37,322 --> 00:11:40,284
And this format does
not contain any attribute,

203
00:11:40,471 --> 00:11:43,097
no projection system, no symbology.

204
00:11:44,098 --> 00:11:47,217
In fact it comes down
only to simple geometries,

205
00:11:47,380 --> 00:11:50,759
points, lines, polygons and writings,

206
00:11:50,934 --> 00:11:54,546
the whole thing being stored
in bulk in a single file.

207
00:11:56,924 --> 00:11:58,389
In this video extract,

208
00:11:58,551 --> 00:12:03,951
we first show that a dxf file 
is a D5 file

209
00:12:04,120 --> 00:12:05,983
which can be opened by drawing software

210
00:12:06,155 --> 00:12:07,774
in this case OpenOffice again

211
00:12:08,970 --> 00:12:11,445
and we see that here in the Dakar region,

212
00:12:11,629 --> 00:12:14,351
if we zoom in on the airport area,

213
00:12:14,520 --> 00:12:20,608
we have all the elements
of the master plan of the region.

214
00:12:22,523 --> 00:12:25,644
Importing a dxf file into QGIS

215
00:12:27,794 --> 00:12:28,979
goes through

216
00:12:30,372 --> 00:12:33,530
the definition of projection system

217
00:12:33,708 --> 00:12:35,672
and then the selection

218
00:12:35,855 --> 00:12:37,633
of the type of entity present in the file

219
00:12:37,810 --> 00:12:40,573
and that we wish to import if
we choose to import all:

220
00:12:41,066 --> 00:12:43,691
points, lines, polygons, writings

221
00:12:43,891 --> 00:12:47,324
and then these items appear in bulk.

222
00:12:49,659 --> 00:12:51,372
We now turn to the question of storage

223
00:12:51,543 --> 00:12:53,351
in structured files.

224
00:12:54,091 --> 00:12:58,045
We can see the image from earlier with a farm

225
00:12:58,210 --> 00:13:00,820
composed of several plots,

226
00:13:01,004 --> 00:13:02,869
several fields and a series of buildings,

227
00:13:03,067 --> 00:13:06,706
each of them with different 
characteristics.

228
00:13:07,921 --> 00:13:10,330
In an approach based on simple files,

229
00:13:10,505 --> 00:13:15,418
we would use 2 files of Well Known Text or
shapefile ESRI type 

230
00:13:15,591 --> 00:13:17,528
to store the geometry

231
00:13:17,718 --> 00:13:20,768
and the field and building attributes

232
00:13:21,054 --> 00:13:24,315
and an attribute file
to characterize the different farms,

233
00:13:24,808 --> 00:13:28,338
which would be a .csv or .dbf 
type of file.

234
00:13:30,225 --> 00:13:32,459
An alternative to this approach

235
00:13:32,625 --> 00:13:34,699
consists in using structured files,

236
00:13:35,999 --> 00:13:38,908
such as XML, so tag files

237
00:13:39,445 --> 00:13:44,445
where in the example shown here, 
we have a collection of farms in yellow

238
00:13:44,992 --> 00:13:47,789
which contains firm objects

239
00:13:47,990 --> 00:13:50,153
containing themselves building collections

240
00:13:50,351 --> 00:13:51,689
and field collections.

241
00:13:51,901 --> 00:13:55,127
And in a hierarchical way,
we actually manage

242
00:13:55,295 --> 00:13:59,308
to integrate all the information
in a single data structure.

243
00:14:00,999 --> 00:14:06,466
We will now see two examples
of files of a structured type.

244
00:14:08,417 --> 00:14:11,494
We find in QGIS the layer of 
hotels in the island of Mahé

245
00:14:11,694 --> 00:14:13,094
that we export,

246
00:14:13,287 --> 00:14:16,132
we select a Markup
Language geographic format,

247
00:14:16,307 --> 00:14:20,395
GML format which is a 
structured file format,

248
00:14:21,694 --> 00:14:24,870
we correct 2 or 3 export parameters

249
00:14:25,656 --> 00:14:29,679
and then in the process, we export
the same data layer

250
00:14:29,841 --> 00:14:32,890
in another structured format
that is GeoJSON

251
00:14:34,992 --> 00:14:38,881
also under the hotel name
with a different extension this time.

252
00:14:42,271 --> 00:14:45,190
If we now look at what these
files look like

253
00:14:45,389 --> 00:14:47,728
starting with the GeoJSON...

254
00:14:48,410 --> 00:14:52,390
using a file editor of GeoJSON type,

255
00:14:52,565 --> 00:14:54,551
we see that we have
a hierarchical structure

256
00:14:54,714 --> 00:14:57,801
with first the properties
of the projection system

257
00:14:57,994 --> 00:14:59,621
then the various objects

258
00:14:59,966 --> 00:15:02,388
so geometry and
the coordinates of the hotel,

259
00:15:02,563 --> 00:15:06,025
then the different attributes in lists.

260
00:15:06,466 --> 00:15:09,148
This hierarchical representation
can also be visualized

261
00:15:09,328 --> 00:15:10,414
in text format

262
00:15:10,726 --> 00:15:12,712
with for each element

263
00:15:12,987 --> 00:15:15,975
the information stored on a single line.

264
00:15:16,756 --> 00:15:20,439
The GML file has a similar
structure, so this is an XML by-product.

265
00:15:20,864 --> 00:15:25,141
And we can also consult it in a
hierarchical structure form

266
00:15:25,316 --> 00:15:27,661
with here first the bounding box,

267
00:15:27,830 --> 00:15:31,555
with the coordinates of the entire layer.

268
00:15:31,787 --> 00:15:36,397
And then for each element,
the different characteristics,

269
00:15:36,585 --> 00:15:38,481
geometries, attributes, etc.

270
00:15:39,000 --> 00:15:41,983
And as earlier, we can also switch

271
00:15:42,154 --> 00:15:44,542
to a text version of this file

272
00:15:44,932 --> 00:15:47,447
which reproduces the language by tag

273
00:15:47,635 --> 00:15:50,585
where we find the geometry of the object.

274
00:16:00,081 --> 00:16:03,323
It is now time to switch to 
the raster mode.

275
00:16:04,325 --> 00:16:08,510
The XY coordinates of the grid origin 
and the pixels size

276
00:16:08,917 --> 00:16:12,113
allow to store the
cell coordinates

277
00:16:12,288 --> 00:16:13,587
to which the parameters of

278
00:16:13,757 --> 00:16:16,757
the projection system must 
be added of course.

279
00:16:17,557 --> 00:16:19,337
The values ​​of the grid itself

280
00:16:19,520 --> 00:16:21,742
through a correspondence table

281
00:16:21,925 --> 00:16:26,002
provide the values ​​of the final variable
that we wish to save.

282
00:16:36,310 --> 00:16:38,023
In the case of the raster world,

283
00:16:38,201 --> 00:16:40,208
the stakes of data storage

284
00:16:40,366 --> 00:16:42,482
are the same as for the vectorial world

285
00:16:42,657 --> 00:16:46,735
but the consequences and
the type of support are quite different.

286
00:16:47,269 --> 00:16:50,480
From the persistence point of view,
the storage in simple file

287
00:16:50,665 --> 00:16:53,985
in the form of an image or a grid
perfectly does the trick.

288
00:16:54,550 --> 00:16:57,361
The question of structuring does
not really arise

289
00:16:57,536 --> 00:17:02,898
since we have files or simple XYZ
structures.

290
00:17:03,555 --> 00:17:06,436
The aspect of centralized access
plays a role.

291
00:17:06,839 --> 00:17:10,553
It is true that it is interesting
to have these raster files

292
00:17:10,728 --> 00:17:13,987
stored on a server
in a client-server architecture.

293
00:17:15,087 --> 00:17:17,709
And finally from a management 
functionality point of view,

294
00:17:17,883 --> 00:17:20,506
was have database management systems

295
00:17:20,668 --> 00:17:25,492
that offer functionalities that 
are specific to the management of raster

296
00:17:25,667 --> 00:17:27,761
and this is something that is very
interesting.

297
00:17:39,099 --> 00:17:42,055
The grid formats used for raster storage

298
00:17:42,230 --> 00:17:44,785
consist of matrix formats,

299
00:17:45,748 --> 00:17:50,046
which are composed of a
header followed by a content.

300
00:17:51,295 --> 00:17:55,968
Here we have examples of 
an ASCIIESRI grid

301
00:17:57,038 --> 00:17:59,502
folllowed by a Surfer grid

302
00:17:59,677 --> 00:18:02,949
also in ASCII format, so in text file.

303
00:18:03,355 --> 00:18:06,687
We see that the same data are
presented in a matrix form,

304
00:18:07,183 --> 00:18:10,276
after a header 5 or 6 settings

305
00:18:10,638 --> 00:18:13,619
which actually characterize the
size of the grid,

306
00:18:13,794 --> 00:18:16,063
the coordinates of the origin point, etc.

307
00:18:16,922 --> 00:18:18,993
The XYZ list format,

308
00:18:19,180 --> 00:18:23,259
so 3 columns simply to describe
all of these data

309
00:18:23,974 --> 00:18:29,743
in a .txt, .csv, .dat format
is a classic.

310
00:18:31,323 --> 00:18:34,379
The image formats are also matrix formats,

311
00:18:34,554 --> 00:18:39,276
consisting of a header containing the
descriptive parameters of the image

312
00:18:39,474 --> 00:18:42,783
followed by a content in the form of a table.

313
00:18:43,114 --> 00:18:45,555
The main image formats used are

314
00:18:45,742 --> 00:18:49,002
the tif, jpg, png and gif.

315
00:18:50,438 --> 00:18:53,793
The color information can
be stored in two forms:

316
00:18:54,902 --> 00:18:56,641
either the different basic components

317
00:18:56,841 --> 00:18:58,641
of each red, green, blue pixel

318
00:18:58,813 --> 00:19:01,566
or possibly the transparency are stored,

319
00:19:01,754 --> 00:19:03,829
or we store all

320
00:19:03,997 --> 00:19:05,463
the colors present in the image

321
00:19:05,656 --> 00:19:06,893
and for each pixel,

322
00:19:07,080 --> 00:19:10,283
we store the index number
of its color in the palette.

323
00:19:10,980 --> 00:19:13,347
Here we have an example of 
two raster layers,

324
00:19:13,552 --> 00:19:15,959
an image and a background map (?)

325
00:19:16,185 --> 00:19:21,687
that illustrate these two
storage modes of the color information.

326
00:19:22,762 --> 00:19:28,773
First for the image if we
look at its properties,

327
00:19:29,477 --> 00:19:34,757
we see that we have a series of bands

328
00:19:34,945 --> 00:19:37,445
corresponding to red, green and blue

329
00:19:37,632 --> 00:19:41,121
which compose the
colorimetry of the image

330
00:19:41,522 --> 00:19:44,186
and if you disable one of these colors,

331
00:19:44,349 --> 00:19:46,815
only the other 2 remain.

332
00:19:48,042 --> 00:19:50,183
And this allows to see that we have

333
00:19:50,349 --> 00:19:53,066
in this type of storage format,

334
00:19:53,297 --> 00:19:59,630
3 superimposed images that give 
the final color image.

335
00:20:00,518 --> 00:20:02,501
In the case of the map (?),

336
00:20:02,664 --> 00:20:05,994
we have the other alternative, 
a color palette

337
00:20:06,169 --> 00:20:09,269
of which only the first ones 
are actually used.

338
00:20:09,446 --> 00:20:12,473
and we see that we can change one
of these colors,

339
00:20:12,635 --> 00:20:17,264
here the green of the forest for a bit of a 
fluorescent green towards a darker green

340
00:20:18,535 --> 00:20:25,761
which we apply or the blue of the
lake also in a darker shade.

341
00:20:26,989 --> 00:20:30,145
This allows to manipulate in a global way

342
00:20:30,332 --> 00:20:33,034
the color palette of this map.

343
00:20:35,963 --> 00:20:38,375
Finally, the information on 
the position of the image

344
00:20:38,553 --> 00:20:41,490
can be found either in
the header of a tif file

345
00:20:41,665 --> 00:20:43,906
and it is called GeoTiff,

346
00:20:44,156 --> 00:20:47,244
or in a word file that
accompanies the image file

347
00:20:47,419 --> 00:20:50,922
with the tfw, JGW extensions etc.

348
00:21:02,040 --> 00:21:06,413
These elements have already been
explained in the lesson on georeferencing.

349
00:21:06,588 --> 00:21:08,086
of the first module of this course,

350
00:21:08,248 --> 00:21:13,477
and we invite you to consult
this lesson for more information.

