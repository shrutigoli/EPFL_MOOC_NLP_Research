1
00:00:22,712 --> 00:00:23,851
Welcome to this lesson

2
00:00:24,051 --> 00:00:25,839
that will focus on the 
particular elements

3
00:00:26,039 --> 00:00:26,992
of the SQL language,

4
00:00:27,192 --> 00:00:29,834
the data 

5
00:00:30,034 --> 00:00:31,904
definition language,

6
00:00:32,104 --> 00:00:32,832
DDL,

7
00:00:33,032 --> 00:00:35,069
and the data 

8
00:00:35,269 --> 00:00:37,084
manipulation language,

9
00:00:37,284 --> 00:00:37,961
DML.

10
00:00:38,998 --> 00:00:41,773
The data structuring tools

11
00:00:41,973 --> 00:00:43,582
that allow to create tables

12
00:00:43,782 --> 00:00:45,838
with well-defined columns

13
00:00:46,038 --> 00:00:49,236
as well as editing tools 
for attribute data

14
00:00:49,436 --> 00:00:51,200
that we saw in the previous lessons,

15
00:00:51,400 --> 00:00:54,597
are all elements that ultimately 
do nothing else

16
00:00:54,797 --> 00:00:56,677
than implementing queries

17
00:00:56,877 --> 00:00:58,996
of DML or DDL type.

18
00:00:59,196 --> 00:01:01,930
We are going to examine these queries

19
00:01:02,130 --> 00:01:03,685
during this lesson.

20
00:01:04,760 --> 00:01:07,959
The objectives of this lesson are

21
00:01:08,159 --> 00:01:12,823
to discover the functions of these data

22
00:01:13,023 --> 00:01:15,030
definition and manipulation languages

23
00:01:15,230 --> 00:01:18,167
so that we are then able

24
00:01:18,367 --> 00:01:20,346
to use SQL queries

25
00:01:20,546 --> 00:01:23,546
to create and manipulate data structures

26
00:01:24,133 --> 00:01:25,890
and to use SQL queries

27
00:01:26,090 --> 00:01:29,046
to manipulate the actual data

28
00:01:29,246 --> 00:01:31,146
which are contained in the databases.

29
00:01:32,350 --> 00:01:33,248
In this lesson

30
00:01:33,448 --> 00:01:35,154
we will start by talking 
a little bit again

31
00:01:35,354 --> 00:01:37,735
about the classic data editing 

32
00:01:37,935 --> 00:01:40,446
and structuring tools 

33
00:01:40,646 --> 00:01:41,748
which we have seen until now

34
00:01:41,948 --> 00:01:45,169
before addressing more specifically

35
00:01:45,369 --> 00:01:48,507
the question of data definition language

36
00:01:48,707 --> 00:01:51,350
then that of the data modification language

37
00:01:51,550 --> 00:01:54,759
and we will end with a particular aspect

38
00:01:54,972 --> 00:01:56,228
which we have not spoken about yet:

39
00:01:56,428 --> 00:01:57,519
the views,

40
00:01:57,719 --> 00:02:00,004
which are another component 
of the databases.

41
00:02:05,959 --> 00:02:08,522
If we go back to the idea of data ​​

42
00:02:08,722 --> 00:02:09,672
structuration and definition

43
00:02:09,872 --> 00:02:11,831
we remember that the QGIS software

44
00:02:12,031 --> 00:02:15,381
proposes elements, tools

45
00:02:15,581 --> 00:02:19,056
that allow to create tables directly,

46
00:02:19,256 --> 00:02:20,322
to modify these tables

47
00:02:20,522 --> 00:02:23,520
by creating fields, columns,

48
00:02:23,720 --> 00:02:25,344
of a defined type

49
00:02:25,544 --> 00:02:27,741
in the case of a SpatiaLite database

50
00:02:27,941 --> 00:02:30,251
as well as in the case of a 
PostGIS Postgres

51
00:02:30,451 --> 00:02:33,150
database.

52
00:02:33,350 --> 00:02:35,360
We find the same kind of functionality

53
00:02:35,560 --> 00:02:38,239
with the database management systems,

54
00:02:38,439 --> 00:02:41,499
just as much for SpatiaLite

55
00:02:41,699 --> 00:02:44,422
as for PGadmin,

56
00:02:44,622 --> 00:02:47,514
so database management interfaces

57
00:02:47,714 --> 00:02:50,207
that allow to manipulate the data structure.

58
00:02:50,407 --> 00:02:53,972
Finally, we also discussed 
the CASE tools

59
00:02:54,172 --> 00:02:59,692
which allow to fabricate and 
manage data structures

60
00:02:59,892 --> 00:03:02,721
and eventually transform them 
into a real physical

61
00:03:02,921 --> 00:03:03,667
database.

62
00:03:03,867 --> 00:03:07,548
All these various tools we have 
seen on various occasions

63
00:03:07,748 --> 00:03:09,624
in the previous lessons of the course

64
00:03:09,824 --> 00:03:14,093
always simply implement SQL queries.

65
00:03:14,293 --> 00:03:16,134
It is still simply a casing

66
00:03:16,334 --> 00:03:19,844
whose engine consists of SQL queries.

67
00:03:20,044 --> 00:03:23,331
In the attribute data editing field

68
00:03:23,531 --> 00:03:26,102
we also saw that GIS softwares

69
00:03:26,302 --> 00:03:28,003
offer editing tools

70
00:03:28,203 --> 00:03:30,760
as well as the database management systems.

71
00:03:31,359 --> 00:03:33,039
In this case too

72
00:03:33,239 --> 00:03:35,656
the engine of this data editing

73
00:03:35,856 --> 00:03:37,982
is composed of SQL queries

74
00:03:38,182 --> 00:03:40,291
as we will see later

75
00:03:40,504 --> 00:03:41,655
in the lesson.

76
00:03:41,855 --> 00:03:43,137
The advantage of SQL

77
00:03:43,337 --> 00:03:44,666
in the data editing field

78
00:03:44,866 --> 00:03:47,077
is that it allows to develop approaches

79
00:03:47,277 --> 00:03:48,182
that are a little more elaborate

80
00:03:48,382 --> 00:03:50,697
than the editing of one 
attribute at a time.

81
00:04:00,655 --> 00:04:03,676
The first and most basic 
thing we want to do

82
00:04:03,876 --> 00:04:05,361
in the data definition field

83
00:04:05,561 --> 00:04:07,181
is the creation of tables

84
00:04:07,381 --> 00:04:10,758
with the "create table" instruction.

85
00:04:11,532 --> 00:04:14,570
This instruction allows 
to create a table

86
00:04:14,770 --> 00:04:18,088
based on the definition of its columns

87
00:04:18,288 --> 00:04:21,631
by their names and by the type 
of data they will contain.

88
00:04:21,831 --> 00:04:24,646
So the syntax is of the 
"create table" type,

89
00:04:24,846 --> 00:04:25,661
the name of the table

90
00:04:25,861 --> 00:04:29,381
in brackets, the series of columns

91
00:04:29,581 --> 00:04:31,043
by their names and types,

92
00:04:31,243 --> 00:04:32,311
separated by a comma.

93
00:04:33,323 --> 00:04:35,654
The type of column we can create

94
00:04:35,854 --> 00:04:36,942
is very variable.

95
00:04:37,142 --> 00:04:39,382
We have here on the left

96
00:04:39,582 --> 00:04:41,420
a summary table

97
00:04:41,620 --> 00:04:46,054
usable in a SQLite database

98
00:04:46,254 --> 00:04:49,903
with the interest of having summarized

99
00:04:50,103 --> 00:04:52,402
a wide variety of different types

100
00:04:52,602 --> 00:04:54,145
in 5 categories

101
00:04:54,345 --> 00:04:57,132
which are the integer, the text, the blob

102
00:04:57,332 --> 00:04:59,182
for the binary elements

103
00:04:59,382 --> 00:05:00,824
such as images,

104
00:05:01,024 --> 00:05:04,234
the real values ​​and the numeric
elements.

105
00:05:04,434 --> 00:05:08,670
On the right side, we have
a table of the different types of data

106
00:05:08,870 --> 00:05:12,593
that we can define in a postSQL 
or postGIS database

107
00:05:12,793 --> 00:05:17,553
and we see that the list is quite
considerable.

108
00:05:19,337 --> 00:05:21,540
As an example we will create a table

109
00:05:21,740 --> 00:05:23,919
of employees of the Seychelles' hotels

110
00:05:24,119 --> 00:05:26,202
with some fields

111
00:05:26,402 --> 00:05:30,432
identifying the name, the hotel
in which the employee works.

112
00:05:30,632 --> 00:05:32,900
We will define a primary key

113
00:05:33,100 --> 00:05:34,183
and a foreign key.

114
00:05:34,383 --> 00:05:38,035
First, the identifier as an integer

115
00:05:38,235 --> 00:05:41,226
then the name in text format,

116
00:05:41,426 --> 00:05:44,591
the identifier of the hotel,

117
00:05:44,791 --> 00:05:46,181
also in integer form,

118
00:05:46,381 --> 00:05:49,599
after which we will define
the primary key

119
00:05:49,799 --> 00:05:50,923
of this table.

120
00:05:51,810 --> 00:05:55,068
This primary key will be
the identifier

121
00:05:55,268 --> 00:05:56,915
of the employee, ID.

122
00:05:57,115 --> 00:05:59,240
Then a foreign key to express

123
00:05:59,440 --> 00:06:02,719
the fact that the hotel_id field

124
00:06:02,919 --> 00:06:08,926
refers to the identifier field of
the hotel table

125
00:06:09,126 --> 00:06:11,961
which is another table.

126
00:06:15,615 --> 00:06:17,815
The request being written in execut

127
00:06:18,015 --> 00:06:20,526
this creates this employee table

128
00:06:20,726 --> 00:06:23,973
with the three fields

129
00:06:24,173 --> 00:06:25,811
with identifier field as primary key.

130
00:06:28,028 --> 00:06:29,120
The same type of operation

131
00:06:29,320 --> 00:06:30,943
in the case of PGadmin

132
00:06:31,143 --> 00:06:32,992
is done graphically

133
00:06:33,192 --> 00:06:35,367
through the data manipulation interface

134
00:06:35,567 --> 00:06:38,085
so we create a new employee table

135
00:06:38,285 --> 00:06:40,643
to which we will add a number of fields,

136
00:06:40,843 --> 00:06:42,606
so first the identifier field

137
00:06:42,806 --> 00:06:43,839
as an integer.

138
00:06:44,039 --> 00:06:48,387
We then add the names of the employees

139
00:06:48,587 --> 00:06:50,558
as text

140
00:06:50,758 --> 00:06:54,546
then as before

141
00:06:54,746 --> 00:06:57,352
we will add an "identifier of
the hotel" field

142
00:06:57,552 --> 00:07:00,440
to make the join with the table of hotels

143
00:07:00,640 --> 00:07:02,957
so it is also an integer here.

144
00:07:03,157 --> 00:07:05,235
In the constraints, we will add

145
00:07:05,435 --> 00:07:06,262
the primary key,

146
00:07:06,462 --> 00:07:11,020
we said that we took the ID field of
this new table

147
00:07:11,220 --> 00:07:14,190
and then we will add a secondary key

148
00:07:14,390 --> 00:07:20,209
that we will define by referencing,

149
00:07:20,409 --> 00:07:24,175
by linking the ID hotel field 
of the employee table

150
00:07:24,375 --> 00:07:26,479
with the ID field of the table of hotels.

151
00:07:28,356 --> 00:07:29,911
We see that the SQL tab

152
00:07:30,111 --> 00:07:34,072
allows to consult the syntax of the query

153
00:07:34,272 --> 00:07:38,111
which was created by manipulating
these graphic objects.

154
00:07:39,616 --> 00:07:40,810
The execution of this request

155
00:07:41,010 --> 00:07:43,055
leads to create the employee table

156
00:07:43,255 --> 00:07:44,404
with its three columns

157
00:07:44,604 --> 00:07:46,047
and then its two constraints

158
00:07:46,247 --> 00:07:48,350
in the form of a primary key and
a foreign key.

159
00:07:49,916 --> 00:07:52,194
A somewhat particular case 
of table creation

160
00:07:52,394 --> 00:07:56,138
with the "create table as" instruction

161
00:07:56,338 --> 00:07:59,799
which allows to transform the result

162
00:07:59,999 --> 00:08:01,158
of a selection query

163
00:08:01,358 --> 00:08:03,060
into a new table.

164
00:08:03,260 --> 00:08:07,534
The general syntax is
"create table", name of the table,

165
00:08:07,734 --> 00:08:11,246
AS, the selection request that
we want to store

166
00:08:11,446 --> 00:08:12,569
as a new table.

167
00:08:14,119 --> 00:08:16,383
There is, however, an alternative syntax

168
00:08:16,583 --> 00:08:20,657
in the form of a "select into" request

169
00:08:20,857 --> 00:08:24,509
where it is a simple request

170
00:08:24,709 --> 00:08:26,616
in which the fact of adding

171
00:08:26,816 --> 00:08:28,916
the INTO keyword

172
00:08:29,116 --> 00:08:31,600
followed by the name of the 
new table we want to create,

173
00:08:31,800 --> 00:08:34,890
leads to the same result

174
00:08:35,090 --> 00:08:37,760
namely to store the result of the query

175
00:08:37,960 --> 00:08:39,134
in a new table.

176
00:08:40,693 --> 00:08:43,671
To illustrate these table 
creation operations

177
00:08:43,871 --> 00:08:46,030
from selection queries

178
00:08:46,230 --> 00:08:48,384
we go back to this request

179
00:08:48,584 --> 00:08:51,983
which gave the number of hotels

180
00:08:52,183 --> 00:08:54,367
in each type of status.

181
00:08:55,004 --> 00:08:57,707
We had seven categories,

182
00:08:57,907 --> 00:08:59,671
seven types of hotel status

183
00:08:59,871 --> 00:09:03,047
with the number of associated elements.

184
00:09:03,247 --> 00:09:07,989
We then simply add the clause

185
00:09:08,189 --> 00:09:09,805
the "create table" instruction.

186
00:09:10,005 --> 00:09:13,266
We will call this table "hotels status"

187
00:09:15,368 --> 00:09:17,149
with the AS keyword

188
00:09:17,349 --> 00:09:19,227
and then the query that follows.

189
00:09:22,048 --> 00:09:23,126
We execute this query

190
00:09:23,326 --> 00:09:25,001
and we see that we have 
created a new table

191
00:09:25,201 --> 00:09:26,928
which includes the two "status" fields

192
00:09:27,128 --> 00:09:28,362
and number of hotels

193
00:09:28,562 --> 00:09:34,322
and when we display the 
data of this table

194
00:09:34,522 --> 00:09:37,528
we see that we find

195
00:09:37,728 --> 00:09:40,243
our seven categories with the
corresponding number of hotels.

196
00:09:41,521 --> 00:09:43,260
The same thing happens 
in the PGadmin world

197
00:09:43,460 --> 00:09:46,828
where we have the same query

198
00:09:47,028 --> 00:09:51,826
and similarly we simply add
the "create table" clause,

199
00:09:52,026 --> 00:09:54,405
the name of the table, "hotels status", AS

200
00:09:54,605 --> 00:09:56,668
and the original request

201
00:09:56,868 --> 00:09:58,168
of selection behind.

202
00:09:59,825 --> 00:10:01,741
We can see that when
this request is executed

203
00:10:01,941 --> 00:10:05,809
and that we go back to 
the consultation interface

204
00:10:06,009 --> 00:10:06,839
of the database,

205
00:10:07,039 --> 00:10:11,401
we have created this "hotel status" field

206
00:10:13,296 --> 00:10:15,890
which contains these two columns

207
00:10:16,090 --> 00:10:18,242
and when we consult the data

208
00:10:18,442 --> 00:10:20,463
we find the data we were looking for.

209
00:10:23,876 --> 00:10:27,212
The alternative syntax consists 
in simply adding

210
00:10:27,412 --> 00:10:28,606
the INTO keyword

211
00:10:28,806 --> 00:10:31,787
with the name of the new table
we want to create

212
00:10:31,987 --> 00:10:35,256
in the middle of the selection request

213
00:10:35,456 --> 00:10:38,756
to obtain the same result

214
00:10:38,956 --> 00:10:41,911
with here a table that we have called
"hotels status B"

215
00:10:44,409 --> 00:10:46,665
and which contains the same fields

216
00:10:46,865 --> 00:10:48,481
and the same values.

217
00:10:50,823 --> 00:10:52,216
Second interesting operation

218
00:10:52,416 --> 00:10:54,073
in the data definition field

219
00:10:54,273 --> 00:10:56,988
when a table has been created, 
that it exists,

220
00:10:57,188 --> 00:10:58,572
we may want to change it

221
00:10:58,772 --> 00:10:59,674
modify its structure

222
00:10:59,874 --> 00:11:02,064
by adding or deleting a column

223
00:11:02,264 --> 00:11:05,265
or by changing the name or type of
a column.

224
00:11:05,465 --> 00:11:07,877
So we have several types of syntax

225
00:11:08,077 --> 00:11:09,077
that are possible

226
00:11:09,277 --> 00:11:11,261
with the "alter table" instruction,

227
00:11:11,461 --> 00:11:12,564
the name of the table,

228
00:11:12,764 --> 00:11:13,829
followed by an instruction

229
00:11:14,029 --> 00:11:17,938
which can either be ADD,
the column name and the data type,

230
00:11:18,138 --> 00:11:20,084
or DROP, the name of the column

231
00:11:20,284 --> 00:11:21,411
to delete a column

232
00:11:21,611 --> 00:11:23,278
or "alter column"

233
00:11:23,478 --> 00:11:25,373
with the name of the column
we want to change

234
00:11:25,573 --> 00:11:30,127
and the new data type that follows
the type keyword.

235
00:11:31,793 --> 00:11:34,232
To illustrate this operation

236
00:11:34,432 --> 00:11:35,953
we take the employee table

237
00:11:36,153 --> 00:11:39,758
and we will add a column

238
00:11:39,958 --> 00:11:42,070
to contain for example the first name

239
00:11:42,270 --> 00:11:43,414
in text format.

240
00:11:45,389 --> 00:11:46,460
We execute the query

241
00:11:46,660 --> 00:11:49,343
and we see that this new field

242
00:11:49,543 --> 00:11:50,322
has been added.

243
00:11:52,133 --> 00:11:53,371
Same thing in PGadmin

244
00:11:53,571 --> 00:11:55,208
but this time from the editing interface

245
00:11:55,408 --> 00:11:56,991
of the data structure,

246
00:11:57,191 --> 00:11:59,496
we add a column,

247
00:11:59,696 --> 00:12:02,286
we define its name, its type, 
its first name and the text type

248
00:12:02,486 --> 00:12:03,794
and we see that the SQL tab

249
00:12:03,994 --> 00:12:08,725
gives the SQL equivalent of the 
instruction that is being prepared.

250
00:12:08,925 --> 00:12:11,089
We execute this query

251
00:12:11,289 --> 00:12:12,260
and we create this new field.

252
00:12:14,035 --> 00:12:16,072
Finally, two instructions

253
00:12:16,272 --> 00:12:18,727
which allow to delete a table

254
00:12:18,927 --> 00:12:20,421
with "drop table"

255
00:12:20,621 --> 00:12:22,733
or to delete the content of a table

256
00:12:22,933 --> 00:12:24,375
while still preserving its structure

257
00:12:24,575 --> 00:12:26,382
with "troncate table".

258
00:12:26,582 --> 00:12:28,391
The syntax is simple,

259
00:12:28,591 --> 00:12:30,893
the instruction followed by
the name of the table

260
00:12:31,093 --> 00:12:31,934
on which it is.

261
00:12:32,134 --> 00:12:33,762
For exemple

262
00:12:33,962 --> 00:12:37,574
we can simply take "drop table"

263
00:12:37,774 --> 00:12:40,797
to delete the table that 
we created earlier,

264
00:12:40,997 --> 00:12:42,834
the hotel status table.

265
00:12:50,123 --> 00:12:53,865
In the SQL domain

266
00:12:54,065 --> 00:12:57,621
simply the "troncate" function

267
00:12:57,821 --> 00:13:01,489
which allows to notice that 
the table has been emptied

268
00:13:01,689 --> 00:13:06,018
and the "drop" instruction

269
00:13:06,218 --> 00:13:07,582
to remove the table itself.

270
00:13:19,452 --> 00:13:21,824
In the data manipulation register

271
00:13:22,024 --> 00:13:23,590
what we wish to do in the first place,

272
00:13:23,790 --> 00:13:25,595
we have created a data structure,

273
00:13:25,795 --> 00:13:26,536
we have tables

274
00:13:26,736 --> 00:13:28,762
and we would like to add data
to these tables

275
00:13:28,962 --> 00:13:31,828
with the "insert into" instruction.

276
00:13:32,028 --> 00:13:36,184
This statement allows to insert data
into a table.

277
00:13:36,384 --> 00:13:37,799
It has several syntaxes

278
00:13:37,999 --> 00:13:40,478
depending on how we proceed.

279
00:13:40,678 --> 00:13:44,181
A first series of syntax

280
00:13:44,381 --> 00:13:47,232
concerns the insertion of one line
of data at a time

281
00:13:47,432 --> 00:13:49,347
and this can be done in two ways,

282
00:13:49,547 --> 00:13:53,833
either by giving a value for each of
the columns of the table,

283
00:13:54,033 --> 00:13:57,185
with a syntax of "insert into" type

284
00:13:57,385 --> 00:13:58,490
the name of the table,

285
00:13:58,690 --> 00:14:00,129
the VALUES keyword

286
00:14:00,329 --> 00:14:02,027
and then the series of values,

287
00:14:02,227 --> 00:14:04,342
a value for each column of the table,

288
00:14:04,542 --> 00:14:06,395
separated by commas

289
00:14:06,595 --> 00:14:08,148
and in brackets.

290
00:14:09,431 --> 00:14:10,353
Another possibility,

291
00:14:10,553 --> 00:14:14,520
we do not want to document 
all the fields

292
00:14:14,720 --> 00:14:15,816
all the columns in the table

293
00:14:16,016 --> 00:14:18,137
and we can specify

294
00:14:18,337 --> 00:14:21,760
to which columns the values

295
00:14:21,960 --> 00:14:23,450
that we gives as argument correspond

296
00:14:23,650 --> 00:14:25,584
with an "insert into" syntax,

297
00:14:25,784 --> 00:14:27,853
the name of the table,

298
00:14:28,053 --> 00:14:31,064
the series of column names concerned

299
00:14:31,264 --> 00:14:32,756
by the values ​​that will follow,

300
00:14:32,956 --> 00:14:34,778
in brackets and separated by commas,

301
00:14:34,978 --> 00:14:36,553
the VALUES keyword 

302
00:14:36,753 --> 00:14:38,203
and again as before

303
00:14:38,403 --> 00:14:40,136
in brackets, the series of values

304
00:14:40,336 --> 00:14:42,299
which corresponds to the order 
of the columns

305
00:14:42,499 --> 00:14:43,784
previously listed.

306
00:14:43,984 --> 00:14:45,913
Alternativement

307
00:14:46,113 --> 00:14:49,408
if we want to insert several
lines at a time

308
00:14:49,608 --> 00:14:51,486
with a single instruction,

309
00:14:51,686 --> 00:14:54,975
so with an "insert into" syntax,

310
00:14:55,175 --> 00:14:56,182
the name of the table,

311
00:14:56,382 --> 00:14:57,558
the VALUES keyword

312
00:14:57,758 --> 00:15:01,416
and a set of value vectors

313
00:15:01,616 --> 00:15:04,102
with a value per column of the table

314
00:15:04,302 --> 00:15:06,009
so vectors of value

315
00:15:06,209 --> 00:15:07,439
in brackets,

316
00:15:07,639 --> 00:15:08,923
separated by commas.

317
00:15:10,261 --> 00:15:11,608
we have seen in all these instructions

318
00:15:11,808 --> 00:15:13,707
that when we add a text field

319
00:15:13,907 --> 00:15:16,949
we must indicate the contents
in inverted commas,

320
00:15:17,149 --> 00:15:18,550
simple inverted commas.

321
00:15:18,750 --> 00:15:21,311
In the case of numeric values

322
00:15:21,511 --> 00:15:22,909
inverted commas are not required.

323
00:15:24,515 --> 00:15:27,917
As an example of the use of
these instructions

324
00:15:28,117 --> 00:15:30,906
of data insertion

325
00:15:31,106 --> 00:15:33,325
we will add data to the employee table.

326
00:15:33,525 --> 00:15:37,055
We begin by adding a first element

327
00:15:37,255 --> 00:15:39,314
with "Pierre"

328
00:15:39,514 --> 00:15:40,816
and the identifier 1.

329
00:15:42,688 --> 00:15:46,228
We see that we did not 
mention all the

330
00:15:46,428 --> 00:15:47,405
fields of the table

331
00:15:47,605 --> 00:15:49,615
but their order

332
00:15:49,815 --> 00:15:53,293
and by default, the missing value 
was placed as null.

333
00:15:53,493 --> 00:15:56,349
We may also want to

334
00:15:56,549 --> 00:15:58,282
enter the data in a different order

335
00:15:58,482 --> 00:16:01,137
starting with the person's first name

336
00:16:01,337 --> 00:16:04,720
and then the identifier.

337
00:16:08,983 --> 00:16:10,490
Alternatively, 

338
00:16:10,690 --> 00:16:14,534
by respecting the order of the 
fields in the table,

339
00:16:14,734 --> 00:16:18,063
we may want to introduce 
several elements in a row.

340
00:16:22,927 --> 00:16:25,269
We see that with all this

341
00:16:25,481 --> 00:16:26,726
in our employee table

342
00:16:26,926 --> 00:16:30,390
we now have the 4 employees 
that we added.

343
00:16:31,804 --> 00:16:33,510
The main difficulty

344
00:16:33,710 --> 00:16:35,263
with this type of addition

345
00:16:35,463 --> 00:16:38,319
is the choice of the identifier.

346
00:16:38,519 --> 00:16:39,581
If we suddenly have

347
00:16:39,781 --> 00:16:42,739
a hundred elements that we would like
to add to the table

348
00:16:42,939 --> 00:16:45,913
it is a little tedious to define

349
00:16:46,113 --> 00:16:48,137
each time the correct identifier.

350
00:16:48,337 --> 00:16:51,360
It is necessary to know where we are
in the list of these identifiers

351
00:16:51,560 --> 00:16:53,487
to ensure that it is a unique value.

352
00:16:55,090 --> 00:16:56,967
To be able to perform such operation

353
00:16:57,167 --> 00:17:00,683
we need to redefine the identifier field,

354
00:17:00,883 --> 00:17:03,955
so we start by deleting the existing field

355
00:17:04,155 --> 00:17:06,786
and adding a new column

356
00:17:06,986 --> 00:17:08,871
with this new identifier field

357
00:17:09,071 --> 00:17:11,301
which will no longer be an integer type
but a serial type.

358
00:17:11,501 --> 00:17:15,699
We add in the definition of the table

359
00:17:15,899 --> 00:17:18,382
this new identifier field

360
00:17:18,582 --> 00:17:19,626
as primary key

361
00:17:21,768 --> 00:17:24,414
and we can, for good measure,

362
00:17:24,614 --> 00:17:27,504
clean the existing table,

363
00:17:27,704 --> 00:17:29,807
so we select the existing elements,

364
00:17:30,007 --> 00:17:31,233
we delete them

365
00:17:31,433 --> 00:17:34,784
and we start again with an empty table.

366
00:17:34,984 --> 00:17:39,193
It then becomes possible to write 

367
00:17:39,393 --> 00:17:42,322
a multiple data insertion query

368
00:17:42,522 --> 00:17:46,631
which will add to the employee table,

369
00:17:46,831 --> 00:17:50,000
in the name section,

370
00:17:50,200 --> 00:17:52,697
all the results of another request

371
00:17:52,897 --> 00:17:56,221
which will consist in looking for
the names of the hotels

372
00:17:56,421 --> 00:17:58,366
taken from the hotel table

373
00:17:58,566 --> 00:18:02,484
for which the name of the hotel

374
00:18:02,684 --> 00:18:08,854
is for example at Albert, André
François, Paul or someone else.

375
00:18:10,994 --> 00:18:12,881
This query executed,

376
00:18:13,081 --> 00:18:18,047
we come back to the 
data management interface,

377
00:18:18,247 --> 00:18:21,203
we observe that 3 elements have been
automatically add

378
00:18:21,403 --> 00:18:24,263
and that the identifier has been
automatically added as well.

379
00:18:26,881 --> 00:18:29,666
We see that with this new definition of
the identifier

380
00:18:29,866 --> 00:18:32,671
no longer as an integer but as
a value of serial type,

381
00:18:32,871 --> 00:18:36,149
it becomes possible to add,

382
00:18:36,349 --> 00:18:38,080
to insert employees

383
00:18:38,280 --> 00:18:40,501
by simply giving the list of first names,

384
00:18:40,701 --> 00:18:44,603
separated by commas.

385
00:18:46,774 --> 00:18:48,704
The "update" instruction allows to update

386
00:18:48,904 --> 00:18:51,010
the values ​​of existing fields
in a table.

387
00:18:51,222 --> 00:18:53,465
It is often associated with
a WHERE clause

388
00:18:53,665 --> 00:18:55,985
to specify on which line

389
00:18:56,185 --> 00:18:57,372
the modification should be

390
00:18:57,572 --> 00:19:01,469
and possibly to propagate an update

391
00:19:01,669 --> 00:19:05,686
over several lines that would 
satisfy the same criterion.

392
00:19:05,886 --> 00:19:08,049
The syntax is therefore 

393
00:19:08,249 --> 00:19:09,661
"update", the name of the table,

394
00:19:09,861 --> 00:19:11,687
"set", the column name

395
00:19:11,887 --> 00:19:16,392
and the value to be assigned
to this attribute

396
00:19:16,592 --> 00:19:19,803
and WHERE, the condition
that allows to select

397
00:19:20,003 --> 00:19:22,474
and filter the rows of the table

398
00:19:22,674 --> 00:19:24,474
on which to update

399
00:19:24,674 --> 00:19:26,932
the "column name" attribute

400
00:19:27,132 --> 00:19:29,240
with the value given as an argument.

401
00:19:30,820 --> 00:19:33,046
In the case of the employee table

402
00:19:33,246 --> 00:19:35,640
it is possible to carry this update

403
00:19:35,840 --> 00:19:42,419
by simply defining the hotel identifier

404
00:19:42,619 --> 00:19:44,645
for the employee Pierre,

405
00:19:44,845 --> 00:19:48,548
a setting that has not yet been added.

406
00:19:50,561 --> 00:19:55,249
We see, if we display after executing
the query, the table,

407
00:19:55,449 --> 00:19:58,173
that this identifier is present.

408
00:19:58,960 --> 00:20:00,783
The "delete from" instruction,

409
00:20:00,983 --> 00:20:04,897
which allows you to delete
records or lines

410
00:20:05,097 --> 00:20:06,617
from a data table,

411
00:20:06,817 --> 00:20:09,838
which is again like the update instruction

412
00:20:10,038 --> 00:20:12,218
often associated to a WHERE clause

413
00:20:12,418 --> 00:20:15,601
which defines the filter condition

414
00:20:15,801 --> 00:20:17,522
of the rows of a table

415
00:20:17,722 --> 00:20:18,629
that we will delete.

416
00:20:18,829 --> 00:20:21,534
The syntax will be "delete from",

417
00:20:21,734 --> 00:20:22,448
the name of the table,

418
00:20:22,648 --> 00:20:25,112
WHERE, the condition that 
the lines must fill

419
00:20:25,312 --> 00:20:26,457
that will be deleted.

420
00:20:28,412 --> 00:20:29,817
As a simple example

421
00:20:30,017 --> 00:20:32,481
we take the table of employees

422
00:20:32,681 --> 00:20:36,086
from which we will remove

423
00:20:36,286 --> 00:20:40,662
the line that bears the name Pierre.

424
00:20:42,221 --> 00:20:44,987
We see that only one line is affected

425
00:20:45,187 --> 00:20:47,264
and when we look at the data

426
00:20:47,464 --> 00:20:50,094
we see that the information about
Peter has disappeared.

427
00:20:50,294 --> 00:20:53,844
We see that we can also delete
lines much more directly

428
00:20:54,044 --> 00:20:55,869
using the functions provided for
this purpose

429
00:20:56,069 --> 00:20:57,541
of the PGadmin interface.

430
00:21:06,962 --> 00:21:09,138
It is often interesting to be able to

431
00:21:09,338 --> 00:21:11,882
store and reuse the results of a query

432
00:21:12,082 --> 00:21:16,531
in particular to construct nested queries

433
00:21:16,731 --> 00:21:17,830
for example,

434
00:21:18,480 --> 00:21:20,224
with the disadvantage however

435
00:21:20,424 --> 00:21:22,969
when we use the table creation functions

436
00:21:23,169 --> 00:21:28,323
"create as" and "select into",

437
00:21:28,523 --> 00:21:34,113
to create a duplication of data

438
00:21:34,313 --> 00:21:36,982
which causes update problems.

439
00:21:37,182 --> 00:21:39,893
The interest of the "view" object

440
00:21:40,093 --> 00:21:41,677
is that it is a virtual table,

441
00:21:41,877 --> 00:21:45,127
so it is a non-editable extract

442
00:21:45,327 --> 00:21:46,804
of existing data,

443
00:21:47,004 --> 00:21:49,726
so simply a data presentation tool

444
00:21:49,926 --> 00:21:50,862
that is a little different.

445
00:21:51,062 --> 00:21:54,549
The original data remaining 
stored in the original

446
00:21:54,749 --> 00:21:55,959
tables.

447
00:21:56,159 --> 00:21:58,803
There is therefore no data editing

448
00:21:59,003 --> 00:22:00,574
in these views.

449
00:22:00,774 --> 00:22:02,896
The syntax is simple,

450
00:22:03,096 --> 00:22:04,892
"create view", name of the view,

451
00:22:05,092 --> 00:22:07,530
AS and the selection query

452
00:22:07,730 --> 00:22:11,613
that combines the different data
that we want to present in the view

453
00:22:11,813 --> 00:22:14,808
and "drop view" to delete this view.

454
00:22:16,444 --> 00:22:18,934
To illustrate these creation and 

455
00:22:19,134 --> 00:22:20,593
view deletion instructions

456
00:22:20,793 --> 00:22:23,694
we will create a test view

457
00:22:23,894 --> 00:22:27,331
as a simple reflection

458
00:22:27,531 --> 00:22:28,537
of the hotel table,

459
00:22:28,737 --> 00:22:30,662
so we select all the fields of
the hotel table

460
00:22:30,862 --> 00:22:32,678
and we create this view.

461
00:22:32,878 --> 00:22:36,678
We note that

462
00:22:36,878 --> 00:22:39,403
this new view is available
in the views collection

463
00:22:39,603 --> 00:22:41,569
and if we look at these data

464
00:22:41,769 --> 00:22:46,166
we find the hotels of the Seychelles

465
00:22:46,366 --> 00:22:48,184
but in a version that is not editable.

466
00:22:50,987 --> 00:22:52,118
What is interesting

467
00:22:52,318 --> 00:22:54,188
is to see that we can then,

468
00:22:54,388 --> 00:22:55,777
when we make other queries,

469
00:22:55,977 --> 00:22:58,347
we can find this view

470
00:22:58,547 --> 00:23:00,006
in the usable elements

471
00:23:00,206 --> 00:23:01,660
to build queries

472
00:23:01,860 --> 00:23:04,622
in the same way we could use tables.

473
00:23:06,049 --> 00:23:10,142
Deletion, either by the menu element

474
00:23:10,342 --> 00:23:11,227
integrated in PGadmin

475
00:23:11,427 --> 00:23:14,968
or as an SQL instruction,

476
00:23:15,168 --> 00:23:17,820
"drop view", the name of the view

477
00:23:18,020 --> 00:23:22,198
and we see that the view
has indeed disappeared.

478
00:23:32,846 --> 00:23:35,112
This lesson has allowed us to explore

479
00:23:35,312 --> 00:23:40,011
the main aspects of the
data definition language

480
00:23:40,211 --> 00:23:42,965
with the creation, modification
and deletion of tables.

481
00:23:43,165 --> 00:23:47,284
The main aspects of data
manipulation language

482
00:23:47,484 --> 00:23:49,660
with the insertion of new 
data in a table,

483
00:23:49,860 --> 00:23:52,644
the updating of existing data

484
00:23:52,844 --> 00:23:54,373
or the deletion of data

485
00:23:54,573 --> 00:23:57,920
and we finally stopped

486
00:23:58,120 --> 00:23:59,566
on the thematic of views

487
00:23:59,766 --> 00:24:02,792
which are virtual tables,

488
00:24:02,992 --> 00:24:05,994
non-editable representations

489
00:24:06,194 --> 00:24:09,877
of data sets gathered by an SQL query.

