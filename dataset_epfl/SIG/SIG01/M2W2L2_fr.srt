1
00:00:21,799 --> 00:00:24,487
Bienvenue à cette leçon
sur les requêtes conditionnelles.

2
00:00:24,671 --> 00:00:29,096
Ce type de requête permet d'extraire
un sous-ensemble d'un groupe d'objets.

3
00:00:29,313 --> 00:00:33,163
Par exemple, on peut extraire
un ensemble de voitures rouges

4
00:00:33,377 --> 00:00:38,640
d'un parking sur lequel sont parquées
une masse énorme de véhicules,

5
00:00:38,842 --> 00:00:41,167
mais vous ne pouvez
pas imaginer quand même !

6
00:00:42,767 --> 00:00:44,855
Avec même des voitures mobility

7
00:00:45,018 --> 00:00:46,317
Avec même des voitures mobility

8
00:00:46,497 --> 00:00:47,634
Mobility !

9
00:00:47,805 --> 00:00:52,743
Et tu as la carte, et tu as la carte
mobility et tu trouves plus ta voiture.

10
00:00:52,963 --> 00:00:55,313
Et toi quand tu dis
j'ai besoin d'une voiture rouge...

11
00:00:55,490 --> 00:01:00,440
Quelques fois même, dans les voitures,
ceux qui n'étaient pas avec nous

12
00:01:00,623 --> 00:01:03,711
dès le départ, mais qui ont pris le train
pour rejoindre plus tard notre voiture.

13
00:01:04,004 --> 00:01:05,415
Mais ouais, mais formule-le en SQL

14
00:01:05,588 --> 00:01:09,039
parce que là ils ne comprennent rien,
ils ne comprennent rien.

15
00:01:09,859 --> 00:01:11,646
Nous allons donc aborder
dans cette leçon

16
00:01:11,833 --> 00:01:14,021
la question des requêtes
conditionnelles,

17
00:01:14,200 --> 00:01:16,912
les requêtes qui permettent
d’extraire des données

18
00:01:17,102 --> 00:01:19,364
sur la base d'un critère attributaire

19
00:01:20,028 --> 00:01:22,091
dans l'exemple qui nous accompagne

20
00:01:22,271 --> 00:01:24,271
tout au long de ce cours
sur les Seychelles,

21
00:01:24,433 --> 00:01:26,208
des requêtes
qui permettraient par exemple

22
00:01:26,371 --> 00:01:30,246
d'extraire le sous-ensemble
des routes asphaltées.

23
00:01:30,646 --> 00:01:34,009
L'objectif de la leçon
est donc d'étudier le principe

24
00:01:34,213 --> 00:01:37,013
de la syntaxe
d'une requête conditionnelle

25
00:01:37,187 --> 00:01:41,186
et de comprendre comment ces requêtes
débouchent sur la notion de jointure

26
00:01:41,376 --> 00:01:43,764
qui permettent d'associer
plusieurs tables,

27
00:01:43,953 --> 00:01:45,778
de sorte qu'au terme de la leçon

28
00:01:45,943 --> 00:01:48,117
vous soyez en mesure d'utiliser,

29
00:01:48,297 --> 00:01:49,772
d'écrire des requêtes conditionnelles,

30
00:01:49,946 --> 00:01:51,360
de sélectionner,
de filtrer des données

31
00:01:51,528 --> 00:01:53,569
sur la base d'un critère attributaire

32
00:01:53,840 --> 00:01:56,762
et d'utiliser des jointures de table.

33
00:01:57,451 --> 00:02:00,926
Nous verrons dans cette leçon d'abord
la notion de filtre conditionnel,

34
00:02:01,117 --> 00:02:05,158
basée sur l'utilisation
de la clause WHERE dans une requête SQL

35
00:02:06,309 --> 00:02:09,882
puis les divers opérateurs
que l'on peut utiliser dans ces clauses,

36
00:02:10,912 --> 00:02:13,999
ensuite les jointures
qui reposent sur la clause WHERE

37
00:02:14,172 --> 00:02:17,771
et pour conclure, les jointures basées
sur un autre type de clause

38
00:02:17,947 --> 00:02:19,556
qui est la clause JOIN.

39
00:02:25,557 --> 00:02:29,169
Nous avons vu dans la précédente leçon
d'introduction au langage SQL

40
00:02:29,363 --> 00:02:32,563
que celui-ci repose
sur une syntaxe de base

41
00:02:32,740 --> 00:02:34,665
qui comprend un certain
nombre de mots-clés

42
00:02:34,844 --> 00:02:37,544
définissant des clauses,
des clauses de sélection,

43
00:02:37,711 --> 00:02:40,754
de filtre conditionnel,
d'agrégation, etc.

44
00:02:41,250 --> 00:02:42,312
Et dans la présente leçon,

45
00:02:42,505 --> 00:02:45,218
nous abordons donc
la clause de filtre conditionnel

46
00:02:45,381 --> 00:02:49,431
qui s'exprime par le mot-clé WHERE
assorti d'une condition.

47
00:02:50,365 --> 00:02:52,115
La syntaxe de bases de cette requête

48
00:02:52,284 --> 00:02:54,309
comprend donc tout d'abord
le mot SELECT

49
00:02:54,505 --> 00:02:58,981
suivi du nom des attributs
ou du métacaractère astérisque

50
00:02:59,145 --> 00:03:01,232
lorsque l'on veut sélectionner
tous les attributs,

51
00:03:01,406 --> 00:03:04,144
du mot-clé FROM,
suivi du nom de la table

52
00:03:04,301 --> 00:03:07,276
de laquelle on va tirer
les informations

53
00:03:08,086 --> 00:03:10,773
et finalement le mot-clé WHERE
suivi de la condition,

54
00:03:10,952 --> 00:03:13,154
condition qui est composée
par 3 éléments :

55
00:03:13,331 --> 00:03:15,781
un attribut, un opérateur
et un critère.

56
00:03:16,041 --> 00:03:17,766
Si l'on prend l'exemple
de la recherche

57
00:03:17,954 --> 00:03:19,891
des hôtels de 20 lits aux Seychelles,

58
00:03:20,076 --> 00:03:23,601
on voit que la condition qui se trouve
dans la clause conditionnelle

59
00:03:23,810 --> 00:03:27,223
comprend comme attribut
le mot-clé "hotels.lits"

60
00:03:27,390 --> 00:03:28,952
donc l'attribut "lits",

61
00:03:29,128 --> 00:03:33,740
comme opérateur le signe "égal"
et comme critère la valeur 20.

62
00:03:34,258 --> 00:03:35,833
Dans le cas de la base des données
des Seychelles,

63
00:03:36,004 --> 00:03:39,229
nous avons donc
un ensemble de 124 hôtels

64
00:03:40,122 --> 00:03:44,010
et si l'on applique cette requête
de filtre conditionnel

65
00:03:44,174 --> 00:03:47,686
sur le critère "nombre de lits = 20",

66
00:03:48,100 --> 00:03:50,825
on voit que l'on extrait
en fait une série de 10 hôtels

67
00:03:50,999 --> 00:03:53,576
qui comptent exactement 20 lits.

68
00:04:03,190 --> 00:04:06,140
Les opérateurs que l'on peut utiliser
dans une clause WHERE

69
00:04:06,321 --> 00:04:08,158
sont de différentes natures

70
00:04:08,364 --> 00:04:10,561
à commencer
par les opérateurs généraux

71
00:04:10,740 --> 00:04:13,602
et en premier lieu l'opérateur "égal"

72
00:04:13,779 --> 00:04:16,529
qui permet de comparer
deux valeurs entre elles

73
00:04:17,521 --> 00:04:22,084
et son alter ego l'attribut
"différent de" qui peut s'exprimer

74
00:04:22,264 --> 00:04:25,114
soit sous la forme d'un point
d'exclamation et du signe égal

75
00:04:25,299 --> 00:04:28,250
soit de 2 signes "plus petit
et plus grand que".

76
00:04:28,581 --> 00:04:31,006
Puis les 2 attributs
"inférieur et supérieur à"

77
00:04:31,173 --> 00:04:33,898
ou alors encore "inférieur ou égal à".

78
00:04:34,947 --> 00:04:38,497
Les intervalles et listes,
avec pour les listes le mot-clé IN,

79
00:04:38,672 --> 00:04:42,022
suivi d'une série de valeurs
séparées par des virgules

80
00:04:42,195 --> 00:04:44,382
et enfermées dans des parenthèses

81
00:04:44,556 --> 00:04:47,718
qui expriment l'idée que
la valeur de l'attribut est présente

82
00:04:47,896 --> 00:04:51,313
dans la collection ou l'échantillon
de valeurs proposées.

83
00:04:52,009 --> 00:04:54,547
Et pour les intervalles, le
mot-clé BETWEEN

84
00:04:54,736 --> 00:04:58,086
suivi de 2 valeurs
séparées par le mot-clé AND

85
00:04:58,336 --> 00:04:59,386
qui exprime l'idée

86
00:04:59,574 --> 00:05:01,624
que la valeur
de l'attribut est comprise

87
00:05:01,809 --> 00:05:05,217
entre les 2 bornes définies
par valeur 1 et valeur 2.

88
00:05:06,071 --> 00:05:07,621
Le test sur les valeurs nulles

89
00:05:07,844 --> 00:05:10,907
avec les mots-clés :
IS NULL / IS NOT NULL

90
00:05:11,089 --> 00:05:15,377
pour vérifier si la valeur de l'attribut
est nulle ou n'est pas nulle.

91
00:05:16,738 --> 00:05:18,775
Et finalement
les opérateurs d'inclusion

92
00:05:18,965 --> 00:05:21,036
et d’exclusion
de chaînes de caractères

93
00:05:21,212 --> 00:05:23,336
qui permet donc de travailler
sur des chaînes de caractères,

94
00:05:23,764 --> 00:05:26,764
avec tout d'abord
l'opérateur d'égalité,

95
00:05:27,046 --> 00:05:28,258
qui permet de comparer

96
00:05:28,430 --> 00:05:32,342
une chaîne de caractères
à une valeur entre crochets.

97
00:05:33,536 --> 00:05:36,590
Un équivalent du signe égal
c'est l'opérateur LIKE,

98
00:05:37,136 --> 00:05:39,974
à ceci près qu'il est
non sensible à la casse,

99
00:05:40,161 --> 00:05:43,886
donc indépendant
des majuscules / minuscules

100
00:05:44,066 --> 00:05:47,534
utilisées pour décrire
la chaîne de caractères valeurs,

101
00:05:48,100 --> 00:05:52,988
ceci est vrai dans le cas de SQLite
mais n'est pas systématique,

102
00:05:53,175 --> 00:05:56,650
avec tous les systèmes
de base de données.

103
00:05:58,341 --> 00:06:02,266
L'opérateur LIKE
avec les métacaractères,

104
00:06:02,450 --> 00:06:04,425
ici dans le langage SQL,

105
00:06:04,593 --> 00:06:08,122
c'est le signe "pour cent"
qui est utilisé comme métacaractère,

106
00:06:08,624 --> 00:06:11,700
donc comme caractère de remplacement
pour des chaînes de caractères.

107
00:06:11,875 --> 00:06:15,187
Donc là, on va chercher
l'ensemble des objets

108
00:06:15,358 --> 00:06:18,345
dont l'attribut comprend
la chaîne de caractères valeur

109
00:06:18,543 --> 00:06:19,918
à un endroit où à un autre.

110
00:06:20,193 --> 00:06:22,330
Et puis finalement,
l'opérateur NOT LIKE

111
00:06:22,502 --> 00:06:25,274
pour dire qu'une valeur
n'est pas comprise.

112
00:06:25,542 --> 00:06:31,579
Et comme on le dit dans PostgreSQL,
LIKE et "égal" sont équivalents

113
00:06:31,856 --> 00:06:35,181
et on a un autre mot-clé,
un autre opérateur, "ILIKE",

114
00:06:35,346 --> 00:06:37,928
qui est lui insensible à la casse.

115
00:06:38,999 --> 00:06:40,637
Ce tableau fait la synthèse

116
00:06:40,802 --> 00:06:43,002
des différents types d'opérateurs
que nous venons de voir,

117
00:06:43,177 --> 00:06:46,077
donc les opérateurs généraux,
les listes et intervalles,

118
00:06:46,257 --> 00:06:51,220
les valeurs nulles et les opérateurs
portant sur les chaînes de caractères.

119
00:06:51,912 --> 00:06:54,512
Ces opérateurs sont utilisés
pour définir des conditions

120
00:06:54,668 --> 00:06:56,668
et ce qui est intéressant
dans les clauses WHERE

121
00:06:56,831 --> 00:06:58,956
c'est que ces conditions
peuvent être combinées

122
00:06:59,137 --> 00:07:03,025
pour effectuer
des recherches élaborées.

123
00:07:03,951 --> 00:07:08,188
La combinaison de conditions repose
sur les mots-clés AND et OR

124
00:07:08,536 --> 00:07:15,649
qui permettent d'associer de manière
inclusive ou exclusive 2 conditions.

125
00:07:16,261 --> 00:07:19,916
Les conditions supplémentaires
peuvent être ajoutée à ce système

126
00:07:20,534 --> 00:07:23,978
en utilisant les règles usuelles
de parenthèses.

127
00:07:25,993 --> 00:07:28,480
Alors nous illustrons ici
ces opérateurs

128
00:07:28,678 --> 00:07:30,940
dans le cas d'une base 
de données SpatiaLite

129
00:07:31,113 --> 00:07:36,313
en sélectionnant dans la table HÔTELS
les noms et les lits

130
00:07:39,513 --> 00:07:42,976
et en ajoutant comme
clause conditionnelle

131
00:07:43,148 --> 00:07:46,810
le fait que les lits
doivent être égal à 20

132
00:07:47,362 --> 00:07:49,533
et on effectue cette requête.

133
00:07:49,716 --> 00:07:52,628
En modifiant cette requête
on peut rechercher

134
00:07:52,822 --> 00:07:55,785
l'ensemble des hôtels
qui ont moins de 20 lits,

135
00:07:57,392 --> 00:08:00,342
l'ensemble des hôtels
qui ont plus de 20 lits évidemment,

136
00:08:03,954 --> 00:08:09,892
l'ensemble des hôtels
qui ont 158 ou 176 lits,

137
00:08:11,894 --> 00:08:13,368
et on en trouve 2

138
00:08:13,547 --> 00:08:16,547
qui ont exactement
donc 158 et 176 lits.

139
00:08:17,473 --> 00:08:20,398
Alternativement, on peut rechercher
l'ensembles des hôtels

140
00:08:20,571 --> 00:08:26,446
dont le nombre de lits est compris
entre ces 2 valeurs de 158 et de 176

141
00:08:27,332 --> 00:08:29,444
et on constate qu'on en trouve 3,

142
00:08:29,634 --> 00:08:31,984
ce qui permet aussi
de constater que les limites,

143
00:08:32,169 --> 00:08:37,370
les bornes 158 et 176
sont inclusives et non exclusives.

144
00:08:38,544 --> 00:08:41,407
On recherche ensuite ici
l'ensemble des hôtels

145
00:08:41,585 --> 00:08:44,598
dont le nom correspond à Banyan Tree.

146
00:08:46,008 --> 00:08:47,758
On trouve cet hôtel.

147
00:08:47,993 --> 00:08:52,442
Et on voit que si on avait écrit
Banyan Tree avec un T minuscule,

148
00:08:52,908 --> 00:08:55,070
la requête n'aurait
donné aucun résultat

149
00:08:55,420 --> 00:09:01,345
alors que dans le cas
de SpatiaLite avec un LIKE,

150
00:09:02,851 --> 00:09:04,693
la requête n'est pas sensible
à la casse

151
00:09:04,896 --> 00:09:06,591
et on trouve l’hôtel recherché.

152
00:09:08,292 --> 00:09:11,717
On recherche ensuite l'ensemble
des hôtels dont le nom commence par B,

153
00:09:11,934 --> 00:09:14,372
et l'on en trouve 13.

154
00:09:16,525 --> 00:09:20,538
Puis l'ensemble des hôtels
dont le nom commence par B

155
00:09:20,731 --> 00:09:22,716
ou dont le nom commence par C.

156
00:09:24,557 --> 00:09:27,107
Et on ajoute
une condition supplémentaire,

157
00:09:27,993 --> 00:09:32,043
le fait que le nombre de lits
doit être supérieur à 100.

158
00:09:33,234 --> 00:09:37,284
et on voit que l'on trouve
4 candidats répondant à ces critères.

159
00:09:39,470 --> 00:09:42,605
Nous effectuons maintenant
la même série d'opération

160
00:09:42,983 --> 00:09:45,258
dans le cas d'une base données PostGIS

161
00:09:45,423 --> 00:09:48,161
en utilisant l'interface pgAdmin,

162
00:09:49,509 --> 00:09:52,872
donc à nouveau on sélectionne
donc dans la table des hôtels

163
00:09:53,074 --> 00:09:54,323
les champs NOM et LITS,

164
00:09:54,513 --> 00:09:58,286
on ajoute un critère
dans l'interface graphique

165
00:09:59,239 --> 00:10:03,440
pour que le nombre d’hôtels...
le nombre de lits est égal à 20

166
00:10:04,798 --> 00:10:07,373
et on change l'opérateur
dans cette requête

167
00:10:07,535 --> 00:10:09,898
pour avoir les hôtels

168
00:10:10,067 --> 00:10:11,567
dont le nombre de lits
est inférieur à 20,

169
00:10:11,739 --> 00:10:14,017
maintenant supérieur à 20.

170
00:10:20,515 --> 00:10:24,089
Comme précédemment,
on va rechercher les hôtels

171
00:10:24,254 --> 00:10:29,404
dont le nombre de lits
vaut 158 ou 176,

172
00:10:29,561 --> 00:10:33,149
et on voit que l'on doit en fait
écrire dans cette interface

173
00:10:33,318 --> 00:10:35,780
l'ensemble de la condition

174
00:10:36,480 --> 00:10:41,243
de la même manière
que dans le cas de SpatiaLite

175
00:10:41,435 --> 00:10:43,930
où on fait ça en pure SQL.

176
00:10:44,427 --> 00:10:47,934
Donc ici, qu'on utilise
dans ce cas-là l'interface graphique

177
00:10:48,511 --> 00:10:50,298
ou non ne fait pas de différence.

178
00:10:52,211 --> 00:10:55,922
La requête pour les hôtels

179
00:10:56,114 --> 00:10:59,150
dont le nombre de chambres
est compris entre 158 et 176,

180
00:10:59,320 --> 00:11:01,942
vous l'avez vu passer
et maintenant on recherche l’hôtel

181
00:11:02,123 --> 00:11:03,674
qui s'appelle Banyan Tree

182
00:11:04,245 --> 00:11:07,185
que l'on trouve bien évidemment,

183
00:11:08,002 --> 00:11:11,077
le cas de figure avec un T minuscule

184
00:11:11,643 --> 00:11:14,893
et on voit qu'effectivement
on n'a pas de résultat,

185
00:11:15,113 --> 00:11:18,738
en remplaçant l'opérateur "égal"
par l'opérateur LIKE,

186
00:11:18,908 --> 00:11:21,507
toujours pas de résultats
donc comme je vous l'ai dit

187
00:11:21,711 --> 00:11:24,836
LIKE est sensible à la casse,

188
00:11:25,024 --> 00:11:30,437
on doit utiliser l'opérateur ILIKE
pour pouvoir faire une requête

189
00:11:30,612 --> 00:11:33,187
qui ne soit pas sensible à la casse.

190
00:11:34,549 --> 00:11:36,323
Comme précédemment,

191
00:11:37,324 --> 00:11:40,174
on recherche des hôtels
dont le nom commence par B,

192
00:11:40,373 --> 00:11:42,999
on en trouve également 13
ce qui est rassurant,

193
00:11:43,199 --> 00:11:48,774
et on associe maintenant
une requête supplémentaire

194
00:11:49,002 --> 00:11:54,202
avec de nouveau le nom de l'hotel,
qui commence cette fois par la lettre C

195
00:11:55,431 --> 00:11:58,281
et puis troisième
requête complémentaire

196
00:11:58,488 --> 00:12:02,516
le nombre de lits supérieur à 100
comme tout à l'heure.

197
00:12:05,683 --> 00:12:08,896
Et comme tout à l'heure,
on trouve 4 candidats

198
00:12:10,792 --> 00:12:13,467
Non. Là il s'est passé
quelque chose de curieux !

199
00:12:16,024 --> 00:12:17,924
Les parenthèses au bon endroit,

200
00:12:20,586 --> 00:12:22,299
on trouve nos 4 candidats.

201
00:12:36,966 --> 00:12:41,077
Le principe des jointures consiste
donc à associer des informations

202
00:12:41,256 --> 00:12:43,943
provenant de 2 ou d'avantage de tables

203
00:12:44,680 --> 00:12:48,803
et peut être appliqué soit à la volée
soit à l'aide de requête SQL.

204
00:12:49,222 --> 00:12:52,972
Nous avions vu dans la leçon portant
sur la modélisation des données,

205
00:12:53,164 --> 00:12:56,376
un exemple de jointure de table
attributaire à la volée

206
00:12:56,564 --> 00:12:59,039
effectué dans le logiciel QGIS.

207
00:12:59,771 --> 00:13:03,909
Ici on va s'intéresser à la manière
d'utiliser le langage SQL

208
00:13:04,087 --> 00:13:07,187
pour effectuer ces jointures de table.

209
00:13:08,200 --> 00:13:11,025
Supposons donc
que l'on ait 2 tables A et B

210
00:13:11,307 --> 00:13:15,645
constituées d'une série de lignes
qui contiennent des objets,

211
00:13:15,830 --> 00:13:21,017
qui ont eux-même un certain
nombre d'attributs de A1 à An

212
00:13:21,937 --> 00:13:24,999
et pareillement pour la table B
qui a des dimensions P par Q.

213
00:13:25,265 --> 00:13:28,527
Et supposons que la table A
compte 20 lignes,

214
00:13:28,700 --> 00:13:31,520
et la table B 10 lignes.

215
00:13:32,024 --> 00:13:37,949
La requête d'association de ces tables
standard serait du type SELECT,

216
00:13:38,888 --> 00:13:41,738
la série du nom des attributs,
le mot-clé FROM

217
00:13:41,911 --> 00:13:45,777
et puis les 2 noms de table
qui se suivent séparés par une virgule.

218
00:13:46,627 --> 00:13:50,714
Ce type de requête donnerait
le produit cartésien de ces 2 tables

219
00:13:50,919 --> 00:13:53,643
donc chaque élément,
chaque ligne de la table A

220
00:13:53,834 --> 00:13:56,297
serait multipliée
par chaque ligne de la table B

221
00:13:56,500 --> 00:13:58,722
ou associée à chaque ligne
de la table B

222
00:13:59,124 --> 00:14:03,624
de sorte à produire
un ensemble résultant de 200 lignes.

223
00:14:04,284 --> 00:14:06,384
Et cet ensemble
résultant de 200 lignes

224
00:14:06,574 --> 00:14:08,550
correspond en fait au cas particulier,

225
00:14:08,720 --> 00:14:12,045
un cas particulier de jointure
qu'on appelle le CROSS JOIN.

226
00:14:12,692 --> 00:14:15,292
La jointure de table s'appuie
toutefois le plus souvent

227
00:14:15,514 --> 00:14:17,589
sur un champ commun

228
00:14:17,809 --> 00:14:21,821
qui permet d'associer
ensemble les lignes de 2 tables

229
00:14:22,646 --> 00:14:25,046
pour lesquelles ce champ commun
a la même valeur.

230
00:14:25,571 --> 00:14:30,346
Le type de jointure conduit
à distinguer 3 types de situations

231
00:14:30,507 --> 00:14:31,957
dans les résultats que l'on produit,

232
00:14:32,134 --> 00:14:34,959
dans les comparaisons
entre lignes des 2 tables.

233
00:14:35,133 --> 00:14:36,345
Tout d'abord,

234
00:14:36,555 --> 00:14:41,654
le cas où les 2 lignes sont jointes

235
00:14:41,831 --> 00:14:44,365
par un champ commun
qui a la même valeur.

236
00:14:44,565 --> 00:14:48,916
Après on a les situations
où les lignes de la table A

237
00:14:49,135 --> 00:14:53,078
qui n'ont pas d'équivalents
de lignes jointes dans la table B,

238
00:14:53,298 --> 00:14:54,510
donc B est nul,

239
00:14:55,147 --> 00:14:57,223
et inversement
les lignes de la table B

240
00:14:57,411 --> 00:14:59,130
qui n'ont pas d'équivalent
du coté de A

241
00:14:59,321 --> 00:15:01,241
donc pour lesquelles A est nul.

242
00:15:01,522 --> 00:15:04,997
Si l'on regarde la taille
des tables de résultat obtenus

243
00:15:05,172 --> 00:15:11,060
on voit que si le nombre 
de jointures est nul,

244
00:15:11,235 --> 00:15:14,322
donc il n'existe
aucune ligne des 2 tables

245
00:15:14,518 --> 00:15:17,867
qui ont une valeur commune
pour le champ JOIN,

246
00:15:18,694 --> 00:15:22,407
et bien on trouve un ensemble
de 30 lignes dans le résultat,

247
00:15:22,576 --> 00:15:26,788
donc les 20 lignes de la table A
pour lesquelles B est nul

248
00:15:26,985 --> 00:15:29,985
et les 10 lignes de la table B
pour lesquelles A est nul.

249
00:15:30,760 --> 00:15:33,823
Dans le cas où on aurait
5 correspondances,

250
00:15:34,024 --> 00:15:37,987
5 lignes de chacune des tables
jointes entre elles,

251
00:15:38,167 --> 00:15:41,104
on voit que les lignes de A

252
00:15:41,301 --> 00:15:44,739
qui auraient une correspondance nulle
du coté de B sont au nombre de 15

253
00:15:44,956 --> 00:15:46,668
et inversement les lignes de B

254
00:15:46,867 --> 00:15:49,867
qui seraient nulles du coté de A
sont au nombre de 5

255
00:15:50,076 --> 00:15:53,513
et on aurait comme résultat final
un total de 25 lignes

256
00:15:54,256 --> 00:15:58,956
dans une requête qui reprendrait
l'ensemble de ces valeurs.

257
00:15:59,211 --> 00:16:03,711
Et finalement dans le même esprit
si on a 10 jointures,

258
00:16:03,879 --> 00:16:07,016
on retrouve au total
20 résultats possibles.

259
00:16:08,325 --> 00:16:09,712
La syntaxe générale

260
00:16:09,867 --> 00:16:13,239
dont une jointure basée
sur la clause WHERE ressemble à ceci,

261
00:16:13,444 --> 00:16:15,857
donc tout d'abord le mot-clé SELECT

262
00:16:16,046 --> 00:16:19,658
suivi de l'attribut
de la première table

263
00:16:19,846 --> 00:16:23,146
et de l'attribut de la seconde table
séparés par une virgule.

264
00:16:23,671 --> 00:16:27,208
Le mot-clé FROM,
suivi des 2 noms de tables

265
00:16:27,483 --> 00:16:29,171
séparés par une virgule à nouveau

266
00:16:29,363 --> 00:16:31,350
et puis la clause WHERE

267
00:16:31,510 --> 00:16:38,535
avec la condition qui associe
un attribut de la première table,

268
00:16:39,101 --> 00:16:40,563
l'opérateur d'égalité

269
00:16:40,723 --> 00:16:44,000
et comme critère un attribut
de la seconde table,

270
00:16:44,233 --> 00:16:49,658
les 2 attributs de la clause WHERE
définissant en fait la jointure.

271
00:16:51,883 --> 00:16:55,114
En reprenant le cas
de la base de données SpatiaLite

272
00:16:55,289 --> 00:16:56,135
sur les Seychelles,

273
00:16:56,339 --> 00:16:59,539
on écrit un peu la même
requête que tout à l'heure

274
00:16:59,974 --> 00:17:03,173
pour les lits des hôtels

275
00:17:03,358 --> 00:17:06,433
donc le mot-clé SELECT,
les champs NOM et LITS,

276
00:17:06,630 --> 00:17:09,090
nombre de lits de la table HOTEL,

277
00:17:09,306 --> 00:17:11,630
le mot-clé FROM avec la table HOTEL

278
00:17:11,831 --> 00:17:14,994
et puis la clause conditionnelle
dans laquelle on exprime l'idée

279
00:17:15,195 --> 00:17:19,283
que l’identifiant de districts
qui est associé à l'hôtel

280
00:17:19,462 --> 00:17:23,350
est égal en fait à son équivalent
dans la table DISTRICT.

281
00:17:23,865 --> 00:17:27,977
On ajoute en fait le nom
de districts au résultat recherché

282
00:17:28,177 --> 00:17:30,206
et puis le nom de la table DISTRICT.

283
00:17:30,440 --> 00:17:34,984
Et l'on obtient donc la liste
des 124 hôtels des Seychelles

284
00:17:35,150 --> 00:17:36,200
avec leurs nombres de lits

285
00:17:37,095 --> 00:17:39,572
et le nom du district
dans lequel ils se trouvent.

286
00:17:40,477 --> 00:17:44,490
La même opération maintenant dans
l'interface pgAdmin

287
00:17:44,672 --> 00:17:51,853
de la table postgres postGIS
où on lie graphiquement les 2 tables

288
00:17:54,430 --> 00:17:56,973
par le champ identifiant,

289
00:17:57,158 --> 00:17:58,400
on sélectionne les champs

290
00:17:58,565 --> 00:18:00,586
que l'on souhaite
voir apparaître dans le résultat

291
00:18:00,753 --> 00:18:03,745
et on exécute la requête directement.

292
00:18:16,832 --> 00:18:21,272
La syntaxe de base d'une requête
de jointure basée sur la close JOIN

293
00:18:22,510 --> 00:18:23,897
se présente de la manière suivante :

294
00:18:24,077 --> 00:18:25,963
donc tout d'abord le mot-clé SELECT,

295
00:18:26,199 --> 00:18:27,849
les attributs concernés

296
00:18:28,589 --> 00:18:30,508
que l'on souhaite
voir apparaître dans le résultat,

297
00:18:30,698 --> 00:18:33,555
donc un attribut de la table 1,
un attribut de la table 2.

298
00:18:33,722 --> 00:18:37,889
La jointure qui va
de la table 1 vers la table 2

299
00:18:38,089 --> 00:18:41,217
et puis le mot-clé ON
pour spécifier le champ

300
00:18:41,394 --> 00:18:43,492
sur lequel s'effectue cette jointure,

301
00:18:43,697 --> 00:18:47,011
dans le cas présent
l'attribut 3 de la table 1

302
00:18:47,186 --> 00:18:51,975
qui est mis en correspondance
avec l'attribut 4 de la table 2.

303
00:18:53,008 --> 00:18:56,032
Si l'on compare cette syntaxe
avec celle que nous venons de voir

304
00:18:56,212 --> 00:18:58,666
dans le cas de la jointure basée
sur la clause WHERE,

305
00:18:58,874 --> 00:19:01,419
on voit que la différence
est très mince

306
00:19:01,789 --> 00:19:07,618
puisque l'on a introduit simplement
le mot JOIN pour séparer les tables

307
00:19:07,994 --> 00:19:12,230
et puis le mot-clé ON
à la place de la clause WHERE

308
00:19:12,398 --> 00:19:15,144
pour définir le critère de la jointure.

309
00:19:15,306 --> 00:19:21,049
L’intérêt d'utiliser la syntaxe
qui utilise la clause JOIN,

310
00:19:21,224 --> 00:19:24,649
c'est de bien séparer
dans une requête SQL complexe,

311
00:19:25,131 --> 00:19:29,906
les éléments de jointure
des éléments de conditionnel,

312
00:19:30,094 --> 00:19:32,026
ce qui rend la requête plus lisible.

313
00:19:33,050 --> 00:19:35,358
Il existe plusieurs types de jointures

314
00:19:35,546 --> 00:19:41,088
à commencer par la jointure simple
ou INNER JOIN

315
00:19:41,265 --> 00:19:44,265
le mot-clé INNER
n'étant pas nécessaire,

316
00:19:44,449 --> 00:19:47,231
INNER JOIN et JOIN
sont des choses équivalentes.

317
00:19:48,196 --> 00:19:54,852
On prend l'exemple d'une série d’hôtels
associés à un lieu-dit

318
00:19:55,018 --> 00:19:58,331
et d'une seconde table dans laquelle
on a une série de lieux-dits

319
00:19:58,634 --> 00:20:01,375
et on voit que dans notre exemple,

320
00:20:02,067 --> 00:20:05,581
les éléments qui vont être
sélectionnés pour lesquels

321
00:20:05,829 --> 00:20:08,832
les champs "ID lieu-dit" et "ID"

322
00:20:09,866 --> 00:20:12,866
correspondent sont au nombre de 3,

323
00:20:13,091 --> 00:20:15,517
les 3 hôtels La Desirade,
Augerine et Coco d'Or

324
00:20:15,719 --> 00:20:18,168
qui se retrouvent
dans la table résultats.

325
00:20:18,456 --> 00:20:23,407
Deuxième type de jointure,
le LEFT JOIN ou LEFT OUTER JOIN,

326
00:20:23,686 --> 00:20:26,366
avec le mot OUTER
qui est de nouveau facultatif,

327
00:20:26,683 --> 00:20:29,192
qui consiste en fait
à prendre l'ensemble

328
00:20:29,577 --> 00:20:33,609
des éléments du tableau A,
de l'ensemble A,

329
00:20:33,998 --> 00:20:38,928
auquel on joint les éléments
correspondants du tableau B,

330
00:20:39,326 --> 00:20:42,830
donc dans notre cas l’ensemble
des hôtels de la table HOTEL

331
00:20:44,014 --> 00:20:46,268
avec, lorsque c'est possible,

332
00:20:46,521 --> 00:20:50,058
les éléments d'information jointifs
de la table LIEU-DIT.

333
00:20:50,392 --> 00:20:53,649
Et on voit que notre résultat
contient cette fois 5 éléments

334
00:20:53,934 --> 00:20:59,129
avec dans 2 cas
des valeurs nulles pour la jointure

335
00:20:59,621 --> 00:21:01,908
et les paramètres joints,
donc le lieu-dit.

336
00:21:02,645 --> 00:21:06,151
Troisième type de jointure,
le RIGHT JOIN

337
00:21:06,317 --> 00:21:09,052
qui permet de sélectionner l'ensemble

338
00:21:09,224 --> 00:21:13,012
en fait des éléments
de la seconde table

339
00:21:13,202 --> 00:21:17,283
donc l'ensemble des lieux-dits auquel
on associe, lorsque c'est possible,

340
00:21:17,487 --> 00:21:19,906
les éléments de la première table

341
00:21:20,365 --> 00:21:22,867
qui ne seraient pas nuls
au niveau de la jointure.

342
00:21:23,266 --> 00:21:27,377
Et on obtient comme résultat
un tableau de 4 valeurs

343
00:21:28,233 --> 00:21:32,696
dont les 3 cas de base
où la jointure existe

344
00:21:32,892 --> 00:21:35,829
et puis le dernier cas, le lieu-dit
"Sans souci" qui n'a pas de jointure

345
00:21:36,009 --> 00:21:39,858
et pour lesquels les éléments
de la table HOTEL sont nuls.

346
00:21:40,573 --> 00:21:43,836
Et finalement le FULL JOIN
qui consiste à prendre

347
00:21:44,015 --> 00:21:47,480
l'ensemble en fait des possibles,

348
00:21:47,678 --> 00:21:52,241
donc la séries des 3 jointures

349
00:21:52,617 --> 00:21:55,700
où on a des objets liés
de part et d'autre

350
00:21:55,885 --> 00:22:00,831
plus les 3 cas où, soit 
du côté A soit du côté B,

351
00:22:01,421 --> 00:22:03,771
les éléments jointifs sont nuls.

352
00:22:04,016 --> 00:22:07,487
Et l'on obtient donc une table
qui compte 6 éléments

353
00:22:07,651 --> 00:22:11,389
donc 2 de moins que la table de 8

354
00:22:11,578 --> 00:22:15,694
qu'on aurait obtenu si aucun
élément jointif n'avait été présent.

355
00:22:16,489 --> 00:22:19,987
La syntaxe de ces requêtes
spécifiques de jointure

356
00:22:20,196 --> 00:22:24,948
reste toujours la même avec simplement
la clause LEFT, RIGHT ou FULL

357
00:22:25,147 --> 00:22:28,715
qui est ajoutée à la clause JOIN
dans la définition de la jointure.

358
00:22:31,409 --> 00:22:35,340
Un exemple avec la base
de données SpatiaLite des Seychelles

359
00:22:36,230 --> 00:22:39,855
où l'on définit
dans les objets de la requête

360
00:22:40,045 --> 00:22:41,420
le nom des hôtels

361
00:22:41,604 --> 00:22:44,493
et puis le nom des districts
dans lesquels se trouvent ces hôtels

362
00:22:47,045 --> 00:22:48,954
qu'on va lier par une jointure.

363
00:22:49,128 --> 00:22:53,651
On définit cette jointure entre
la table HOTEL et la table DISTRICT

364
00:22:54,812 --> 00:23:00,621
sur la base du champ identifiant
du district de la table HOTEL

365
00:23:00,838 --> 00:23:04,669
est équivalent à l'identifiant
du district dans la table DISTRICT.

366
00:23:05,743 --> 00:23:10,805
Même opération dans le cas
de postgres postGIS avec pgAdmin

367
00:23:10,992 --> 00:23:13,467
où on ajoute en fait
graphiquement les 2 tables

368
00:23:13,652 --> 00:23:15,818
dans le constructeur
de requête graphique,

369
00:23:15,996 --> 00:23:18,870
on établit la connexion
de ces 2 tables,

370
00:23:19,476 --> 00:23:21,640
les champs que l'on souhaite
voir apparaître

371
00:23:21,859 --> 00:23:27,237
et dans l'onglet jointure on définit
la jointure qui nous intéresse.

372
00:23:28,448 --> 00:23:33,328
On voit toutefois que dans la partie
édition SQL de la requête,

373
00:23:33,744 --> 00:23:37,031
la requête est écrite sous la forme
d'une clause WHERE

374
00:23:37,231 --> 00:23:39,122
et non d'une clause JOIN.

375
00:23:39,811 --> 00:23:42,823
Je peux rectifier la chose
en remplaçant la syntaxe

376
00:23:43,007 --> 00:23:45,245
et on voit que le résultat
est toujours le même.

377
00:23:45,428 --> 00:23:48,937
Mais par contre
si avec cette interface pgAdmin,

378
00:23:49,138 --> 00:23:53,913
je passe en mode graphique
pour revenir en mode éditeur,

379
00:23:54,298 --> 00:23:57,914
la requête est à nouveau transformée
en une requête WHERE

380
00:23:58,461 --> 00:24:00,745
sans garder le mot-clé JOIN.

381
00:24:01,396 --> 00:24:04,321
Un autre exemple maintenant
avec le logiciel Navicat

382
00:24:04,524 --> 00:24:06,867
qui est un logiciel commercial

383
00:24:07,369 --> 00:24:10,802
et qui offre un constructeur graphique
de requête SQL intéressant.

384
00:24:12,422 --> 00:24:16,460
On ajoute la table des hôtels,
la tables cette fois des lieux-dits,

385
00:24:16,915 --> 00:24:18,002
on établit un lien

386
00:24:18,160 --> 00:24:21,664
entre le nom de l'hôtel
et le nom des lieux-dits,

387
00:24:22,279 --> 00:24:23,654
on sélectionne ces 2 éléments,

388
00:24:23,826 --> 00:24:25,269
on voit que l'on trouve 2 hôtels

389
00:24:25,437 --> 00:24:29,652
dont le nom est le même
que celui des lieux-dits.

390
00:24:31,169 --> 00:24:32,235
Dans l'interface graphique,

391
00:24:32,408 --> 00:24:36,753
je peux maintenant remplacer
la jointure standard par un LEFT JOIN

392
00:24:37,207 --> 00:24:40,032
qui va me donner
l'ensemble des 124 hôtels

393
00:24:40,205 --> 00:24:41,604
avec en tête de liste

394
00:24:41,800 --> 00:24:45,979
les 2 pour lequel il existe
un lieu-dit dans la jointure.

395
00:24:47,335 --> 00:24:50,695
Ensuite on passe au RIGHT JOIN

396
00:24:51,204 --> 00:24:52,845
qui lui va me donner
l'ensemble des lieux-dits

397
00:24:53,014 --> 00:24:56,227
y compris les 2 hôtels jointifs

398
00:24:56,574 --> 00:24:59,718
et on voit qu'il y a 346
de ces lieux-dits

399
00:24:59,990 --> 00:25:04,113
et finalement on peut faire encore
un FULL JOIN de ces 2 tables

400
00:25:04,858 --> 00:25:09,824
pour constater qu'on a dans l’ensemble
466 lignes dans la réponse.

401
00:25:11,987 --> 00:25:14,366
Dans ces jointures
basées sur la clause JOIN

402
00:25:14,543 --> 00:25:17,543
on peut encore s'intéresser
à quelques cas particuliers

403
00:25:18,534 --> 00:25:20,064
que l'on peut illustrer

404
00:25:20,425 --> 00:25:22,811
même si l'utilisation
de ces diagrammes d'ensemble

405
00:25:23,018 --> 00:25:25,769
n'est pas tout à fait correcte
comme on le verra plus tard

406
00:25:25,974 --> 00:25:29,261
lorsque l'on parlera
des requêtes de fusion.

407
00:25:29,751 --> 00:25:31,830
Ça permet quand même
d'illustrer l'esprit du propos,

408
00:25:32,009 --> 00:25:34,625
donc on a la requête LEFT JOIN

409
00:25:35,011 --> 00:25:39,186
dont on aimerait retirer en fait
les éléments qui font le match

410
00:25:39,385 --> 00:25:41,820
pour n'avoir que les éléments
de la table A

411
00:25:42,002 --> 00:25:44,453
qui n'ont pas de correspondance
dans la table B.

412
00:25:44,649 --> 00:25:48,320
Si l'on reprend notre exemple
de 5 hôtels et de 3 lieux-dits

413
00:25:48,526 --> 00:25:53,464
on se souvient que le LEFT JOIN
donnait une table de 5 résultats

414
00:25:54,455 --> 00:25:57,377
et sans l'intersection cela revient
simplement à supprimer

415
00:25:57,557 --> 00:26:00,735
les 3 cas où la jointure existe

416
00:26:01,203 --> 00:26:05,064
pour ne garder que les 2 éléments
qui sont non-jointifs.

417
00:26:05,384 --> 00:26:07,559
Du point de vue de la syntaxe SQL,

418
00:26:07,758 --> 00:26:10,527
cela signifie simplement
que l'on va ajouter

419
00:26:11,364 --> 00:26:13,459
à la requête de jointure

420
00:26:13,910 --> 00:26:15,975
une clause de filtre,

421
00:26:18,205 --> 00:26:20,885
de filtre conditionnel
dans laquelle on exprime l'idée

422
00:26:21,102 --> 00:26:22,346
que l'attribut de jointure,

423
00:26:22,545 --> 00:26:25,472
en l'occurrence
l'attribut 4 de la table 2,

424
00:26:25,663 --> 00:26:29,559
donc le champ ID de la table
les lieux-dits est nul.

425
00:26:30,402 --> 00:26:33,402
Même chose pour la jointure droite

426
00:26:34,225 --> 00:26:37,477
avec dans ce cas
les 4 champs sélectionnés

427
00:26:37,671 --> 00:26:40,864
qui, lorsque l'on retire
les éléments jointifs,

428
00:26:41,055 --> 00:26:43,624
se réduisent à un seul résultat.

429
00:26:43,811 --> 00:26:46,499
Et à nouveau en termes de syntaxe SQL,

430
00:26:46,720 --> 00:26:49,720
l'adjonction
d'une clause conditionnelle

431
00:26:50,452 --> 00:26:53,554
basée sur le fait que l'attribut

432
00:26:54,745 --> 00:26:58,592
de la jointure dans la 
première table est nul.

433
00:27:00,299 --> 00:27:02,049
Pour la requête complète,

434
00:27:02,253 --> 00:27:07,530
on avait 6 résultats dont on enlève
les 3 éléments jointifs

435
00:27:08,506 --> 00:27:12,941
pour obtenir en fait un résultat final
qui comprend 3 objets.

436
00:27:13,154 --> 00:27:14,640
Et du point de vue SQL,

437
00:27:14,807 --> 00:27:17,720
on ajoute cette fois
une clause conditionnelle

438
00:27:18,319 --> 00:27:22,825
qui exprime le fait
que les 2 attributs de la jointure,

439
00:27:23,592 --> 00:27:25,397
que dans les 2 attributs
de la jointure,

440
00:27:25,564 --> 00:27:27,543
l'un ou l'autre doit être nul.

441
Nous avons vu donc dans 
cette leçon comment

442
fonctionnent les 
requêtes conditionnelles

443
basées sur la clause WHERE. 
En particulier nous avons vu

444
les différents types d'opérateurs
que l'on peut utiliser dans ces clauses

445
et nous avons vu comment cette
clause peut être utilisée

446
pour joindre deux tables.

447
Nous avons également vu les
différents types de jointure 

448
que l'ont peut avoir en SQL
et nous avons vu comment,

449
de manière très pratique,
on implémente ces requêtes SQL

450
dans divers environnements de 
gestion de bases de données.