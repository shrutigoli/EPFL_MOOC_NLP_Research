1
00:00:22,712 --> 00:00:23,851
Bienvenue dans cette leçon

2
00:00:24,051 --> 00:00:25,839
qui va porter sur
ces éléments particuliers

3
00:00:26,039 --> 00:00:26,992
du langage SQL

4
00:00:27,192 --> 00:00:29,834
que sont le langage
de définition de données

5
00:00:30,034 --> 00:00:31,904
ou data definition language,

6
00:00:32,104 --> 00:00:32,832
DDL,

7
00:00:33,032 --> 00:00:35,069
et le langage de manipulation
de données

8
00:00:35,269 --> 00:00:37,084
ou data manipulation language,

9
00:00:37,284 --> 00:00:37,961
DML.

10
00:00:38,998 --> 00:00:41,773
Les outils de structuration 
de données

11
00:00:41,973 --> 00:00:43,582
qui permettent de créer des tables

12
00:00:43,782 --> 00:00:45,838
avec des colonnes de types bien définis

13
00:00:46,038 --> 00:00:49,236
de même que les outils d'édition
de données attributaires

14
00:00:49,436 --> 00:00:51,200
que nous avons vu
dans les leçons précédentes,

15
00:00:51,400 --> 00:00:54,597
sont autant d'éléments qui ne font
finalement rien d'autre

16
00:00:54,797 --> 00:00:56,677
que d'implémenter des requêtes

17
00:00:56,877 --> 00:00:58,996
de type DML ou DDL.

18
00:00:59,196 --> 00:01:01,930
Requêtes que nous allons donc
examiner

19
00:01:02,130 --> 00:01:03,685
au cours de la présente leçon.

20
00:01:04,760 --> 00:01:07,959
Les objectifs de cette leçon
consistent donc 

21
00:01:08,159 --> 00:01:12,823
à découvrir
les fonctions de ces langages

22
00:01:13,023 --> 00:01:15,030
de définition et de manipulation
de données,

23
00:01:15,230 --> 00:01:18,167
de sorte à être capable ensuite

24
00:01:18,367 --> 00:01:20,346
d'utiliser les requêtes SQL

25
00:01:20,546 --> 00:01:23,546
pour créer et manipuler
des structures de données

26
00:01:24,133 --> 00:01:25,890
et d'utiliser des requêtes SQL

27
00:01:26,090 --> 00:01:29,046
pour manipuler les données mêmes

28
00:01:29,246 --> 00:01:31,146
qui sont contenues
dans les bases de données.

29
00:01:32,350 --> 00:01:33,248
Dans cette leçon

30
00:01:33,448 --> 00:01:35,154
nous allons commencer
par revenir un petit peu

31
00:01:35,354 --> 00:01:37,735
sur les outils de structuration

32
00:01:37,935 --> 00:01:40,446
et d'édition de données classiques

33
00:01:40,646 --> 00:01:41,748
que nous avons vu jusqu'à présent

34
00:01:41,948 --> 00:01:45,169
avant d'aborder plus spécifiquement

35
00:01:45,369 --> 00:01:48,507
la question du langage
de définition de données

36
00:01:48,707 --> 00:01:51,350
puis celle du langage
de modification de données

37
00:01:51,550 --> 00:01:54,759
et nous terminerons
par un aspect particulier

38
00:01:54,972 --> 00:01:56,228
dont nous n'avons pas encore parlé

39
00:01:56,428 --> 00:01:57,519
qui sont les vues,

40
00:01:57,719 --> 00:02:00,004
qui sont un autre composant
des bases de données.

41
00:02:05,959 --> 00:02:08,522
Si l'on revient à l'idée
de structuration

42
00:02:08,722 --> 00:02:09,672
et de définition de données

43
00:02:09,872 --> 00:02:11,831
on se souvient que le logiciel QGIS

44
00:02:12,031 --> 00:02:15,381
propose des éléments, des outils

45
00:02:15,581 --> 00:02:19,056
qui permettent directement
de créer des tables,

46
00:02:19,256 --> 00:02:20,322
de modifier ces tables,

47
00:02:20,522 --> 00:02:23,520
en créant des champs,
des colonnes,

48
00:02:23,720 --> 00:02:25,344
de type défini

49
00:02:25,544 --> 00:02:27,741
dans le cas d'une base
de données SpatiaLite

50
00:02:27,941 --> 00:02:30,251
aussi bien que dans le cas
d'une base de données

51
00:02:30,451 --> 00:02:33,150
PostGIS Postgres.

52
00:02:33,350 --> 00:02:35,360
On retrouve le même
genre de fonctionnalité

53
00:02:35,560 --> 00:02:38,239
avec les systèmes de gestion
de bases de données,

54
00:02:38,439 --> 00:02:41,499
aussi bien pour SpatiaLite

55
00:02:41,699 --> 00:02:44,422
que pour PGadmin

56
00:02:44,622 --> 00:02:47,514
donc des interfaces de gestion
de bases de données

57
00:02:47,714 --> 00:02:50,207
qui permettent de manipuler
la structure de données.

58
00:02:50,407 --> 00:02:53,972
Finalement, nous avions aussi abordé
la question des outils CASE

59
00:02:54,172 --> 00:02:59,692
qui permettent en fait de fabriquer
et de gérer des structures de données

60
00:02:59,892 --> 00:03:02,721
et de les transformer éventuellement
en base de données

61
00:03:02,921 --> 00:03:03,667
physique réelle.

62
00:03:03,867 --> 00:03:07,548
Tous ces divers outils
que nous avons vu à différentes occasions

63
00:03:07,748 --> 00:03:09,624
dans les précédentes leçons du cours

64
00:03:09,824 --> 00:03:14,093
implémentent toujours simplement
des requêtes SQL.

65
00:03:14,293 --> 00:03:16,134
Il s'agit toujours
simplement d'un habillage

66
00:03:16,334 --> 00:03:19,844
dont le moteur est constitué
par des requêtes SQL.

67
00:03:20,044 --> 00:03:23,331
Dans le domaine de l'édition
de données attributaires

68
00:03:23,531 --> 00:03:26,102
nous avons également vu
que les logiciels SIG

69
00:03:26,302 --> 00:03:28,003
proposent des outils d'édition

70
00:03:28,203 --> 00:03:30,760
de même que les systèmes
de gestion de bases de données.

71
00:03:31,359 --> 00:03:33,039
Dans ce cas également

72
00:03:33,239 --> 00:03:35,656
le moteur de cette édition de données

73
00:03:35,856 --> 00:03:37,982
est constitué par des requêtes SQL

74
00:03:38,182 --> 00:03:40,291
comme on le verra tout à l'heure

75
00:03:40,504 --> 00:03:41,655
dans la leçon.

76
00:03:41,855 --> 00:03:43,137
L'avantage du SQL

77
00:03:43,337 --> 00:03:44,666
dans le domaine
de l'édition de données

78
00:03:44,866 --> 00:03:47,077
c'est qu'il permet de développer
des approches

79
00:03:47,277 --> 00:03:48,182
un peu plus élaborées

80
00:03:48,382 --> 00:03:50,697
que l'édition d'un attribut
à la fois.

81
00:04:00,655 --> 00:04:03,676
La première et la plus fondamentale
des choses que l’on souhaite faire

82
00:04:03,876 --> 00:04:05,361
dans le domaine
de la définition des données

83
00:04:05,561 --> 00:04:07,181
c'est bien la création de tables

84
00:04:07,381 --> 00:04:10,758
avec l'instruction "create table".

85
00:04:11,532 --> 00:04:14,570
Cette instruction permet
de créer une table

86
00:04:14,770 --> 00:04:18,088
sur la base de la définition
de ses colonnes

87
00:04:18,288 --> 00:04:21,631
par leurs noms et par le type
de données qu'elles vont contenir.

88
00:04:21,831 --> 00:04:24,646
Donc la syntaxe
est du type "create table »,

89
00:04:24,846 --> 00:04:25,661
le nom de la table

90
00:04:25,861 --> 00:04:29,381
entre parenthèses,
la série des colonnes

91
00:04:29,581 --> 00:04:31,043
par leurs noms et leurs types,

92
00:04:31,243 --> 00:04:32,311
séparées par une virgule.

93
00:04:33,323 --> 00:04:35,654
Le type de colonne
que l'on peut créer

94
00:04:35,854 --> 00:04:36,942
est très variable.

95
00:04:37,142 --> 00:04:39,382
Nous avons ici à gauche

96
00:04:39,582 --> 00:04:41,420
un tableau de synthèse

97
00:04:41,620 --> 00:04:46,054
des types utilisables
dans une base de données SQLite

98
00:04:46,254 --> 00:04:49,903
avec l'intérêt d'avoir résumé

99
00:04:50,103 --> 00:04:52,402
en fait une grande variété
de types différents

100
00:04:52,602 --> 00:04:54,145
en 5 catégories

101
00:04:54,345 --> 00:04:57,132
qui sont l'entier, le texte, le blob

102
00:04:57,332 --> 00:04:59,182
pour les éléments binaires,

103
00:04:59,382 --> 00:05:00,824
comme par exemple les images,

104
00:05:01,024 --> 00:05:04,234
les valeurs réelles
et les éléments numériques.

105
00:05:04,434 --> 00:05:08,670
Du côté droit, on a un tableau
des différents types de données

106
00:05:08,870 --> 00:05:12,593
que l'on peut définir dans une base
de données postSQL ou postGIS

107
00:05:12,793 --> 00:05:17,553
et on voit que la liste
est assez considérable.

108
00:05:19,337 --> 00:05:21,540
Comme exemple
nous allons créer une table

109
00:05:21,740 --> 00:05:23,919
des employés
des hôtels des Seychelles

110
00:05:24,119 --> 00:05:26,202
avec quelques champs

111
00:05:26,402 --> 00:05:30,432
identifiant le nom, l'hôtel
dans lequel l'employé travaille.

112
00:05:30,632 --> 00:05:32,900
On va définir une clé primaire

113
00:05:33,100 --> 00:05:34,183
et une clé étrangère.

114
00:05:34,383 --> 00:05:38,035
Alors tout d'abord
l'identifiant sous forme d'entier

115
00:05:38,235 --> 00:05:41,226
puis le nom sous forme format texte,

116
00:05:41,426 --> 00:05:44,591
l'identifiant de l'hôtel,

117
00:05:44,791 --> 00:05:46,181
également sous forme d'entier,

118
00:05:46,381 --> 00:05:49,599
après quoi on va définir
la clé primaire

119
00:05:49,799 --> 00:05:50,923
de cette table.

120
00:05:51,810 --> 00:05:55,068
Clé primaire qui sera
donc l'identifiant

121
00:05:55,268 --> 00:05:56,915
de l'employé, ID.

122
00:05:57,115 --> 00:05:59,240
Puis une clé étrangère pour exprimer

123
00:05:59,440 --> 00:06:02,719
le fait que le champ hotel_id

124
00:06:02,919 --> 00:06:08,926
référence en fait le champ 
identifiant de la table hotel

125
00:06:09,126 --> 00:06:11,961
qui est une autre table.

126
00:06:15,615 --> 00:06:17,815
La requête étant écrite en execut

127
00:06:18,015 --> 00:06:20,526
et on voit que cela crée 
effectivement cette table des employés

128
00:06:20,726 --> 00:06:23,973
avec les trois champs,

129
00:06:24,173 --> 00:06:25,811
avec le champ identifiant
comme clé primaire.

130
00:06:28,028 --> 00:06:29,120
Le même type d'opération

131
00:06:29,320 --> 00:06:30,943
dans le cas de PGadmin

132
00:06:31,143 --> 00:06:32,992
se fait de manière graphique

133
00:06:33,192 --> 00:06:35,367
au travers de l'interface
de manipulation de données

134
00:06:35,567 --> 00:06:38,085
donc on crée
une nouvelle table des employés

135
00:06:38,285 --> 00:06:40,643
auquel on va ajouter
un certain nombre de champs,

136
00:06:40,843 --> 00:06:42,606
donc d'abord le champ identifiant

137
00:06:42,806 --> 00:06:43,839
sous forme d'entier.

138
00:06:44,039 --> 00:06:48,387
On ajoute ensuite
le nom des employés

139
00:06:48,587 --> 00:06:50,558
sous forme de texte

140
00:06:50,758 --> 00:06:54,546
puis comme précédemment

141
00:06:54,746 --> 00:06:57,352
on va ajouter un champ "identifiant
de l'hôtel"

142
00:06:57,552 --> 00:07:00,440
pour faire la jointure
avec la table des hôtels,

143
00:07:00,640 --> 00:07:02,957
donc il s'agit ici également
d'un entier.

144
00:07:03,157 --> 00:07:05,235
Dans les contraintes, on va ajouter

145
00:07:05,435 --> 00:07:06,262
la clé primaire,

146
00:07:06,462 --> 00:07:11,020
donc on a dit qu'on prenait le 
champ ID de cette nouvelle table

147
00:07:11,220 --> 00:07:14,190
et puis on va ajouter
une clé secondaire

148
00:07:14,390 --> 00:07:20,209
que l'on va définir en référençant,

149
00:07:20,409 --> 00:07:24,175
en liant le champ ID hotel de
la table des employés

150
00:07:24,375 --> 00:07:26,479
avec le champ ID
de la table des hôtels.

151
00:07:28,356 --> 00:07:29,911
On voit que l'onglet SQL

152
00:07:30,111 --> 00:07:34,072
permet de consulter la syntaxe
de la requête

153
00:07:34,272 --> 00:07:38,111
qui a été créée
en manipulant ces objets graphiques.

154
00:07:39,616 --> 00:07:40,810
L'exécution de cette requête

155
00:07:41,010 --> 00:07:43,055
conduit bien à créer
la table des employés

156
00:07:43,255 --> 00:07:44,404
avec ses trois colonnes

157
00:07:44,604 --> 00:07:46,047
et puis ses deux contraintes 

158
00:07:46,247 --> 00:07:48,350
sous forme de clé primaire
et de clé étrangère.

159
00:07:49,916 --> 00:07:52,194
Un cas un peu particulier
de création de table

160
00:07:52,394 --> 00:07:56,138
avec l'instruction "create table as"

161
00:07:56,338 --> 00:07:59,799
qui permet en fait
de transformer le résultat

162
00:07:59,999 --> 00:08:01,158
d'une requête de sélection

163
00:08:01,358 --> 00:08:03,060
en une table nouvelle.

164
00:08:03,260 --> 00:08:07,534
La syntaxe générale est
"create table ", nom de la table,

165
00:08:07,734 --> 00:08:11,246
AS, la requête de sélection
que l'on souhaite stocker

166
00:08:11,446 --> 00:08:12,569
comme nouvelle table.

167
00:08:14,119 --> 00:08:16,383
Il existe cependant
une syntaxe alternative

168
00:08:16,583 --> 00:08:20,657
sous la forme d'une requête
de type "select into"

169
00:08:20,857 --> 00:08:24,509
où en fait il s'agit 
d'une simple requête

170
00:08:24,709 --> 00:08:26,616
dans laquelle le fait d'ajouter

171
00:08:26,816 --> 00:08:28,916
le mot-clé INTO

172
00:08:29,116 --> 00:08:31,600
suivi du nom de la nouvelle table
que l'on souhaite créer, 

173
00:08:31,800 --> 00:08:34,890
conduit au même résultat

174
00:08:35,090 --> 00:08:37,760
à savoir de stocker
le résultat de la requête

175
00:08:37,960 --> 00:08:39,134
dans une nouvelle table.

176
00:08:40,693 --> 00:08:43,671
Pour illustrer ces opérations
de création de table

177
00:08:43,871 --> 00:08:46,030
à partir de requêtes
de sélection

178
00:08:46,230 --> 00:08:48,384
nous repartons de cette requête

179
00:08:48,584 --> 00:08:51,983
qui donnait en fait le nombre d'hôtels

180
00:08:52,183 --> 00:08:54,367
dans chaque type de statut.

181
00:08:55,004 --> 00:08:57,707
On avait donc sept catégories,

182
00:08:57,907 --> 00:08:59,671
sept types de statut d'hôtels

183
00:08:59,871 --> 00:09:03,047
avec le nombre d'éléments associés.

184
00:09:03,247 --> 00:09:07,989
On ajoute alors simplement la clause,

185
00:09:08,189 --> 00:09:09,805
l'instruction "create table".

186
00:09:10,005 --> 00:09:13,266
Et on va appeler cette table
"hotel status"

187
00:09:15,368 --> 00:09:17,149
avec le mot clé AS

188
00:09:17,349 --> 00:09:19,227
et puis la requête qui suit.

189
00:09:22,048 --> 00:09:23,126
On exécute cette requête

190
00:09:23,326 --> 00:09:25,001
et on voit qu'on a créé
une nouvelle table

191
00:09:25,201 --> 00:09:26,928
qui comprend les deux champs "statut"

192
00:09:27,128 --> 00:09:28,362
et "nombre d'hôtels"

193
00:09:28,562 --> 00:09:34,322
et lorsque l'on affiche en fait
les données de cette table

194
00:09:34,522 --> 00:09:37,528
on voit qu'on retrouve en fait

195
00:09:37,728 --> 00:09:40,243
nos sept catégories avec le nombre
d'hôtels correspondant.

196
00:09:41,521 --> 00:09:43,260
La même chose dans le monde PGadmin

197
00:09:43,460 --> 00:09:46,828
où l'on a la même requête

198
00:09:47,028 --> 00:09:51,826
et pareillement on ajoute
simplement la clause "create table",

199
00:09:52,026 --> 00:09:54,405
le nom de la table "hotel status", AS

200
00:09:54,605 --> 00:09:56,668
et la requête originelle

201
00:09:56,868 --> 00:09:58,168
de sélection derrière.

202
00:09:59,825 --> 00:10:01,741
On voit que lorsqu'on exécute
cette requête

203
00:10:01,941 --> 00:10:05,809
et que l'on revient
dans l'interface de consultation

204
00:10:06,009 --> 00:10:06,839
de la base de données,

205
00:10:07,039 --> 00:10:11,401
on a créé ce champ "hotel status"

206
00:10:13,296 --> 00:10:15,890
qui contient bien ces deux colonnes

207
00:10:16,090 --> 00:10:18,242
et lorsque l'on consulte les données

208
00:10:18,442 --> 00:10:20,463
on trouve bien
les données recherchées.

209
00:10:23,876 --> 00:10:27,212
La syntaxe alternative
consiste simplement à rajouter

210
00:10:27,412 --> 00:10:28,606
le mot-clé INTO

211
00:10:28,806 --> 00:10:31,787
avec le nom de la nouvelle table
que l'on souhaite créer

212
00:10:31,987 --> 00:10:35,256
au milieu de la requête de sélection

213
00:10:35,456 --> 00:10:38,756
pour obtenir en fait le même résultat

214
00:10:38,956 --> 00:10:41,911
avec ici une table que l'on a baptisé
"hotel status B"

215
00:10:44,409 --> 00:10:46,665
et qui contient les mêmes champs

216
00:10:46,865 --> 00:10:48,481
et les mêmes valeurs.

217
00:10:50,823 --> 00:10:52,216
Seconde opération intéressante

218
00:10:52,416 --> 00:10:54,073
dans le domaine
de la définition des données

219
00:10:54,273 --> 00:10:56,988
lorsqu'une table a été créée,
qu'elle existe,

220
00:10:57,188 --> 00:10:58,572
on peut vouloir la modifier,

221
00:10:58,772 --> 00:10:59,674
modifier sa structure

222
00:10:59,874 --> 00:11:02,064
en ajoutant
ou en supprimant une colonne

223
00:11:02,264 --> 00:11:05,265
ou en modifiant le nom
ou le type d'une colonne.

224
00:11:05,465 --> 00:11:07,877
On a donc plusieurs types de syntaxe

225
00:11:08,077 --> 00:11:09,077
qui sont possibles

226
00:11:09,277 --> 00:11:11,261
avec l'instruction "alter table",

227
00:11:11,461 --> 00:11:12,564
nom de la table,

228
00:11:12,764 --> 00:11:13,829
suivi d'une instruction

229
00:11:14,029 --> 00:11:17,938
qui peut être soit ADD, le nom
de la colonne et le type de données,

230
00:11:18,138 --> 00:11:20,084
soit DROP, le nom de la colonne

231
00:11:20,284 --> 00:11:21,411
pour supprimer une colonne, 

232
00:11:21,611 --> 00:11:23,278
soit "alter column"

233
00:11:23,478 --> 00:11:25,373
avec le nom de la colonne
que l'on souhaite changer

234
00:11:25,573 --> 00:11:30,127
et le nouveau type de données
qui suit le mot-clé type.

235
00:11:31,793 --> 00:11:34,232
Pour illustrer cette opération

236
00:11:34,432 --> 00:11:35,953
on reprend la table des employés

237
00:11:36,153 --> 00:11:39,758
et on va ajouter une colonne

238
00:11:39,958 --> 00:11:42,070
pour contenir par exemple le prénom

239
00:11:42,270 --> 00:11:43,414
au format texte.

240
00:11:45,389 --> 00:11:46,460
On exécute la requête

241
00:11:46,660 --> 00:11:49,343
et on constate effectivement
que ce nouveau champ

242
00:11:49,543 --> 00:11:50,322
a été ajouté.

243
00:11:52,133 --> 00:11:53,371
Même chose dans PGadmin

244
00:11:53,571 --> 00:11:55,208
mais cette fois-ci
à partir de l'interface

245
00:11:55,408 --> 00:11:56,991
d'édition de la structure de données,

246
00:11:57,191 --> 00:11:59,496
on ajoute une colonne,

247
00:11:59,696 --> 00:12:02,286
on défini son nom, son type,
prénom et le type texte

248
00:12:02,486 --> 00:12:03,794
et on voit que l'onglet SQL

249
00:12:03,994 --> 00:12:08,725
donne l'équivalent SQL
de l'instruction qu'on prépare.

250
00:12:08,925 --> 00:12:11,089
On exécute cette instruction

251
00:12:11,289 --> 00:12:12,260
et on crée ce nouveau champ.

252
00:12:14,035 --> 00:12:16,072
Et finalement, deux instructions

253
00:12:16,272 --> 00:12:18,727
qui permettent
de supprimer une table

254
00:12:18,927 --> 00:12:20,421
avec "drop table"

255
00:12:20,621 --> 00:12:22,733
ou d'effacer le contenu d'une table

256
00:12:22,933 --> 00:12:24,375
tout en préservant sa structure

257
00:12:24,575 --> 00:12:26,382
avec "troncate table".

258
00:12:26,582 --> 00:12:28,391
La syntaxe est toute simple,

259
00:12:28,591 --> 00:12:30,893
l'instruction
suivi du nom de la table

260
00:12:31,093 --> 00:12:31,934
sur laquelle elle porte.

261
00:12:32,134 --> 00:12:33,762
A titre d'exemple

262
00:12:33,962 --> 00:12:37,574
on peut simplement prendre
"drop table"

263
00:12:37,774 --> 00:12:40,797
pour supprimer la table
que l'on a créé tout à l'heure,

264
00:12:40,997 --> 00:12:42,834
la table des statuts des hôtels.

265
00:12:50,123 --> 00:12:53,865
Dans le domaine SQL

266
00:12:54,065 --> 00:12:57,621
simplement la fonction "troncate"

267
00:12:57,821 --> 00:13:01,489
qui permet de constater
que la table a été vidée

268
00:13:01,689 --> 00:13:06,018
et l'instruction "drop"

269
00:13:06,218 --> 00:13:07,582
pour supprimer la table elle-même.

270
00:13:19,452 --> 00:13:21,824
Dans le registre
de la manipulation des données

271
00:13:22,024 --> 00:13:23,590
ce que l'on souhaite faire
en tout premier lieu,

272
00:13:23,790 --> 00:13:25,595
on a créé une structure de données,

273
00:13:25,795 --> 00:13:26,536
on a des tables

274
00:13:26,736 --> 00:13:28,762
et on aimerait ajouter
des données dans ces tables

275
00:13:28,962 --> 00:13:31,828
avec l'instruction "insert into".

276
00:13:32,028 --> 00:13:36,184
Cette instruction permet
d'insérer des données dans une table.

277
00:13:36,384 --> 00:13:37,799
Elle connait plusieurs syntaxes

278
00:13:37,999 --> 00:13:40,478
selon la manière dont on procède.

279
00:13:40,678 --> 00:13:44,181
Une première série de syntaxes

280
00:13:44,381 --> 00:13:47,232
concerne l'insertion d'une ligne
de données à la fois

281
00:13:47,432 --> 00:13:49,347
et ça, ça peut se faire
de deux manières

282
00:13:49,547 --> 00:13:53,833
soit en donnant une valeur pour chacune
des colonnes de la table,

283
00:13:54,033 --> 00:13:57,185
avec une syntaxe de type "insert into",

284
00:13:57,385 --> 00:13:58,490
le nom de la table,

285
00:13:58,690 --> 00:14:00,129
le mot-clé VALUES

286
00:14:00,329 --> 00:14:02,027
et puis la série des valeurs,

287
00:14:02,227 --> 00:14:04,342
une valeur pour
chaque colonne de la table,

288
00:14:04,542 --> 00:14:06,395
séparée par des virgules

289
00:14:06,595 --> 00:14:08,148
et entre parenthèses.

290
00:14:09,431 --> 00:14:10,353
Autre possibilité,

291
00:14:10,553 --> 00:14:14,520
on ne veut pas documenter, 
renseigner tous les champs,

292
00:14:14,720 --> 00:14:15,816
toutes les colonnes de la table

293
00:14:16,016 --> 00:14:18,137
et on peut spécifier en fait

294
00:14:18,337 --> 00:14:21,760
à quelle colonne
correspondent les valeurs

295
00:14:21,960 --> 00:14:23,450
que l'on donne comme argument

296
00:14:23,650 --> 00:14:25,584
avec une syntaxe de type

297
00:14:25,784 --> 00:14:27,853
"insert into", le nom de la table,

298
00:14:28,053 --> 00:14:31,064
la série des noms des colonnes
concernés

299
00:14:31,264 --> 00:14:32,756
par les valeurs qui vont suivre,

300
00:14:32,956 --> 00:14:34,778
entre parenthèses
et séparées par des virgules,

301
00:14:34,978 --> 00:14:36,553
le mot-clé VALUES

302
00:14:36,753 --> 00:14:38,203
et de nouveau comme précédemment

303
00:14:38,403 --> 00:14:40,136
entre parenthèses,
la série des valeurs

304
00:14:40,336 --> 00:14:42,299
qui correspond
à l'ordre des colonnes

305
00:14:42,499 --> 00:14:43,784
listées précédemment.

306
00:14:43,984 --> 00:14:45,913
Autre possibilité,

307
00:14:46,113 --> 00:14:49,408
le cas où on veut insérer
plusieurs lignes à la fois

308
00:14:49,608 --> 00:14:51,486
avec une seule instruction,

309
00:14:51,686 --> 00:14:54,975
donc avec une syntaxe
de type "insert into",

310
00:14:55,175 --> 00:14:56,182
le nom de la table,

311
00:14:56,382 --> 00:14:57,558
le mot-clé VALUES

312
00:14:57,758 --> 00:15:01,416
et une série de vecteurs de valeurs

313
00:15:01,616 --> 00:15:04,102
avec une valeur
par colonne de la table

314
00:15:04,302 --> 00:15:06,009
donc des vecteurs de valeur

315
00:15:06,209 --> 00:15:07,439
entre parenthèses,

316
00:15:07,639 --> 00:15:08,923
séparés par des virgules.

317
00:15:10,261 --> 00:15:11,608
On a vu dans toutes ces instructions

318
00:15:11,808 --> 00:15:13,707
que lorsque l'on ajoute
un champ de type texte

319
00:15:13,907 --> 00:15:16,949
il faut indiquer le contenu
entre guillemets,

320
00:15:17,149 --> 00:15:18,550
des guillemets simples.

321
00:15:18,750 --> 00:15:21,311
Dans le cas où il s'agit
de valeurs numériques

322
00:15:21,511 --> 00:15:22,909
les guillemets
ne sont pas nécessaires.

323
00:15:24,515 --> 00:15:27,917
Comme exemple de l'utilisation
de ces instructions

324
00:15:28,117 --> 00:15:30,906
d'insertion de données

325
00:15:31,106 --> 00:15:33,325
on va ajouter des données
à la table des employés.

326
00:15:33,525 --> 00:15:37,055
On commence par ajouter
un premier élément

327
00:15:37,255 --> 00:15:39,314
avec le dénommé Pierre

328
00:15:39,514 --> 00:15:40,816
et l'identifiant 1.

329
00:15:42,688 --> 00:15:46,228
On voit qu'on n'a pas
mentionné l'ensemble

330
00:15:46,428 --> 00:15:47,405
des champs de la table

331
00:15:47,605 --> 00:15:49,615
mais leur ordre

332
00:15:49,815 --> 00:15:53,293
et par défaut, la valeur manquante
a été placée comme nulle.

333
00:15:53,493 --> 00:15:56,349
On peut également vouloir

334
00:15:56,549 --> 00:15:58,282
introduire les données
dans un ordre différent

335
00:15:58,482 --> 00:16:01,137
en commençant
par le prénom de la personne

336
00:16:01,337 --> 00:16:04,720
et ensuite l'identifiant.

337
00:16:08,983 --> 00:16:10,490
Alternativement, on peut vouloir,

338
00:16:10,690 --> 00:16:14,534
en respectant de nouveau l'ordre
des champs dans la table,

339
00:16:14,734 --> 00:16:18,063
introduire plusieurs éléments
à la suite.

340
00:16:22,927 --> 00:16:25,269
On voit qu’avec tout ça

341
00:16:25,481 --> 00:16:26,726
dans notre table des employés

342
00:16:26,926 --> 00:16:30,390
nous avons maintenant
les 4 employés que nous avons ajouté.

343
00:16:31,804 --> 00:16:33,510
La principale difficulté qui se pose

344
00:16:33,710 --> 00:16:35,263
avec ce type d'ajout

345
00:16:35,463 --> 00:16:38,319
tient au choix de l'identifiant.

346
00:16:38,519 --> 00:16:39,581
Si on a tout d'un coup

347
00:16:39,781 --> 00:16:42,739
une centaine d'éléments
qu'on aimerait ajouter à la table,

348
00:16:42,939 --> 00:16:45,913
il est un peu fastidieux de définir

349
00:16:46,113 --> 00:16:48,137
à chaque fois le bon identifiant.

350
00:16:48,337 --> 00:16:51,360
Il faut savoir où on en est
dans la liste de ces identifiants

351
00:16:51,560 --> 00:16:53,487
pour être sûr qu'il s'agit
d'une valeur unique.

352
00:16:55,090 --> 00:16:56,967
Pour pouvoir effectuer
ce genre d'opérations

353
00:16:57,167 --> 00:17:00,683
il nous faut donc redéfinir
le champ identifiant,

354
00:17:00,883 --> 00:17:03,955
donc on commence par supprimer
le champ existant

355
00:17:04,155 --> 00:17:06,786
et on ajoute une nouvelle colonne

356
00:17:06,986 --> 00:17:08,871
avec ce nouveau champ identifiant

357
00:17:09,071 --> 00:17:11,301
qui ne sera plus de type entier
mais de type serial.

358
00:17:11,501 --> 00:17:15,699
On ajoute dans la définition
de la table

359
00:17:15,899 --> 00:17:18,382
ce nouveau champ identifiant

360
00:17:18,582 --> 00:17:19,626
comme clé primaire

361
00:17:21,768 --> 00:17:24,414
et on peut encore,
pour faire bonne mesure,

362
00:17:24,614 --> 00:17:27,504
nettoyer la table existante,

363
00:17:27,704 --> 00:17:29,807
donc on sélectionne
les éléments existants,

364
00:17:30,007 --> 00:17:31,233
on les supprime

365
00:17:31,433 --> 00:17:34,784
et on repart d'une table vide.

366
00:17:34,984 --> 00:17:39,193
Il devient alors possible
d'écrire une requête

367
00:17:39,393 --> 00:17:42,322
d'insertion de données multiples

368
00:17:42,522 --> 00:17:46,631
qui va ajouter en fait
à la table des employés,

369
00:17:46,831 --> 00:17:50,000
dans la rubrique nom,

370
00:17:50,200 --> 00:17:52,697
l'ensemble des résultats
d'une autre requête

371
00:17:52,897 --> 00:17:56,221
qui va consister à rechercher
les noms des hôtels

372
00:17:56,421 --> 00:17:58,366
tirés de la table des hôtels

373
00:17:58,566 --> 00:18:02,484
pour lesquels le nom de l'hôtel

374
00:18:02,684 --> 00:18:08,854
est de type Chez Albert, André
François, Paul ou quelqu'un d'autre.

375
00:18:10,994 --> 00:18:12,881
Cette requête effectuée,

376
00:18:13,081 --> 00:18:18,047
on revient à l'interface
de gestion des données,

377
00:18:18,247 --> 00:18:21,203
on constate qu'on a ajouté 3 éléments
automatiquement

378
00:18:21,403 --> 00:18:24,263
et que l'identifiant a été ajouté
automatiquement également.

379
00:18:26,881 --> 00:18:29,666
On voit qu'avec cette nouvelle
définition de l'identifiant

380
00:18:29,866 --> 00:18:32,671
non plus comme un entier
mais comme une valeur de type serial,

381
00:18:32,871 --> 00:18:36,149
il devient possible d'ajouter,

382
00:18:36,349 --> 00:18:38,080
d'insérer des employés

383
00:18:38,280 --> 00:18:40,501
en donnant simplement
la liste des prénoms,

384
00:18:40,701 --> 00:18:44,603
séparés par des virgules.

385
00:18:46,774 --> 00:18:48,704
L'instruction "update"
permet de mettre à jour

386
00:18:48,904 --> 00:18:51,010
les valeurs de champs existants
dans une table.

387
00:18:51,222 --> 00:18:53,465
Elle est souvent associée
à une clause WHERE

388
00:18:53,665 --> 00:18:55,985
afin de spécifier sur quelle ligne

389
00:18:56,185 --> 00:18:57,372
doit porter la modification

390
00:18:57,572 --> 00:19:01,469
et éventuellement de propager
une mise à jour

391
00:19:01,669 --> 00:19:05,686
sur plusieurs lignes qui satisferaient
un même critère.

392
00:19:05,886 --> 00:19:08,049
La syntaxe est donc du type

393
00:19:08,249 --> 00:19:09,661
"update", le nom de la table,

394
00:19:09,861 --> 00:19:11,687
"set", le nom de la colonne

395
00:19:11,887 --> 00:19:16,392
et la valeur à attribuer
à cet attribut,

396
00:19:16,592 --> 00:19:19,803
et WHERE, la condition qui permet
de sélectionner,

397
00:19:20,003 --> 00:19:22,474
de filtrer les lignes de la table

398
00:19:22,674 --> 00:19:24,474
sur lesquelles il faut mettre à jour

399
00:19:24,674 --> 00:19:26,932
l'attribut "nom colonne"

400
00:19:27,132 --> 00:19:29,240
avec la valeur donnée en argument.

401
00:19:30,820 --> 00:19:33,046
Dans le cas de la table des employés

402
00:19:33,246 --> 00:19:35,640
on peut faire porter
cette mise à jour

403
00:19:35,840 --> 00:19:42,419
en définissant en fait simplement
l'identifiant de l'hôtel

404
00:19:42,619 --> 00:19:44,645
pour l'employé Pierre,

405
00:19:44,845 --> 00:19:48,548
paramètre qui n'a pas
encore été ajouté.

406
00:19:50,561 --> 00:19:55,249
On constate, si on affiche, après
avoir exécuté la requête, la table,

407
00:19:55,449 --> 00:19:58,173
on voit que cet identifiant
est présent.

408
00:19:58,960 --> 00:20:00,783
L'instruction "delete from",

409
00:20:00,983 --> 00:20:04,897
qui permet de supprimer
des enregistrements ou des lignes

410
00:20:05,097 --> 00:20:06,617
d'une table de données,

411
00:20:06,817 --> 00:20:09,838
qui est à nouveau
comme l'instruction de mise à jour

412
00:20:10,038 --> 00:20:12,218
souvent associée à une clause WHERE,

413
00:20:12,418 --> 00:20:15,601
qui défini la condition de filtre

414
00:20:15,801 --> 00:20:17,522
des lignes d'une table

415
00:20:17,722 --> 00:20:18,629
que l'on va supprimer.

416
00:20:18,829 --> 00:20:21,534
La syntaxe sera du type "delete from", 

417
00:20:21,734 --> 00:20:22,448
le nom de la table,

418
00:20:22,648 --> 00:20:25,112
WHERE, la condition
que doivent remplir les lignes

419
00:20:25,312 --> 00:20:26,457
qui vont être supprimées.

420
00:20:28,412 --> 00:20:29,817
Comme exemple tout simple

421
00:20:30,017 --> 00:20:32,481
nous reprenons la table des employés

422
00:20:32,681 --> 00:20:36,086
de laquelle nous allons supprimer

423
00:20:36,286 --> 00:20:40,662
la ligne qui porte le nom Pierre.

424
00:20:42,221 --> 00:20:44,987
On voit qu'une seule ligne
est affectée

425
00:20:45,187 --> 00:20:47,264
et lorsque l'on consulte les données

426
00:20:47,464 --> 00:20:50,094
on voit qu’effectivement l'information
concernant Pierre a disparu.

427
00:20:50,294 --> 00:20:53,844
On voit qu'on peut aussi supprimer
des lignes beaucoup plus directement

428
00:20:54,044 --> 00:20:55,869
en utilisant les fonctions
prévues à cet effet

429
00:20:56,069 --> 00:20:57,541
de l'interface PGadmin.

430
00:21:06,962 --> 00:21:09,138
Il est souvent intéressant
de pouvoir

431
00:21:09,338 --> 00:21:11,882
stocker et réutiliser
les résultats d'une requête,

432
00:21:12,082 --> 00:21:16,531
notamment pour construire
des requêtes emboîtées

433
00:21:16,731 --> 00:21:17,830
par exemple,

434
00:21:18,480 --> 00:21:20,224
avec l'inconvénient toutefois

435
00:21:20,424 --> 00:21:22,969
lorsque l’on utilise les fonctions
de créations de tables,

436
00:21:23,169 --> 00:21:28,323
"create as" et "select into",

437
00:21:28,523 --> 00:21:34,113
de créer une duplication des données

438
00:21:34,313 --> 00:21:36,982
ce qui pose des problèmes
de mise à jour.

439
00:21:37,182 --> 00:21:39,893
L'intérêt de l'objet "vue"

440
00:21:40,093 --> 00:21:41,677
c'est qu'il s'agit
d'une table virtuelle,

441
00:21:41,877 --> 00:21:45,127
donc c'est un extrait non-éditable

442
00:21:45,327 --> 00:21:46,804
de données existantes,

443
00:21:47,004 --> 00:21:49,726
donc simplement
un outil de présentation de données

444
00:21:49,926 --> 00:21:50,862
un peu différente.

445
00:21:51,062 --> 00:21:54,549
Les données originales
restant stockées dans les tables

446
00:21:54,749 --> 00:21:55,959
de départ.

447
00:21:56,159 --> 00:21:58,803
Il n'y a donc pas
d'édition de données

448
00:21:59,003 --> 00:22:00,574
dans ces vues.

449
00:22:00,774 --> 00:22:02,896
La syntaxe est toute simple

450
00:22:03,096 --> 00:22:04,892
"create view", nom de la vue,

451
00:22:05,092 --> 00:22:07,530
AS et la requête de sélection

452
00:22:07,730 --> 00:22:11,613
qui réunit les différentes données
que l'on souhaite présenter dans la vue

453
00:22:11,813 --> 00:22:14,808
et "drop view" pour supprimer
cette vue.

454
00:22:16,444 --> 00:22:18,934
Pour illustrer ces instructions

455
00:22:19,134 --> 00:22:20,593
de création
et de suppression de vues

456
00:22:20,793 --> 00:22:23,694
nous allons créer une vue test

457
00:22:23,894 --> 00:22:27,331
comme un simple reflet

458
00:22:27,531 --> 00:22:28,537
de la table des hôtels,

459
00:22:28,737 --> 00:22:30,662
donc on sélectionne l'ensemble
des champs de la table hotels

460
00:22:30,862 --> 00:22:32,678
et on crée cette vue.

461
00:22:32,878 --> 00:22:36,678
On constate que

462
00:22:36,878 --> 00:22:39,403
cette nouvelle vue est disponible
dans la collection des vues

463
00:22:39,603 --> 00:22:41,569
et si on regarde ces données

464
00:22:41,769 --> 00:22:46,166
on retrouve les hôtels des Seychelles

465
00:22:46,366 --> 00:22:48,184
mais dans une version
qui n'est pas éditable.

466
00:22:50,987 --> 00:22:52,118
Ce qui est intéressant

467
00:22:52,318 --> 00:22:54,188
c'est de constater 
que l'on peut ensuite,

468
00:22:54,388 --> 00:22:55,777
lorsque l'on fait d'autres requêtes,

469
00:22:55,977 --> 00:22:58,347
on peut retrouver cette vue

470
00:22:58,547 --> 00:23:00,006
dans les éléments utilisables

471
00:23:00,206 --> 00:23:01,660
pour construire des requêtes

472
00:23:01,860 --> 00:23:04,622
de la même manière qu’on pourrait 
utiliser des tables.

473
00:23:06,049 --> 00:23:10,142
La suppression,
soit par l'élément de menu

474
00:23:10,342 --> 00:23:11,227
intégré à PGadmin 

475
00:23:11,427 --> 00:23:14,968
ou bien sous forme d'instruction SQL,

476
00:23:15,168 --> 00:23:17,820
"drop view", le nom de la vue

477
00:23:18,020 --> 00:23:22,198
et on constate que la vue a
bel et bien disparu.

478
00:23:32,846 --> 00:23:35,112
Cette leçon nous a donc
permis de parcourir

479
00:23:35,312 --> 00:23:40,011
les principaux aspects du langage
de définition de données

480
00:23:40,211 --> 00:23:42,965
avec la création, la modification
et la suppression de tables.

481
00:23:43,165 --> 00:23:47,284
Les principaux aspects du langage
de manipulation de données

482
00:23:47,484 --> 00:23:49,660
avec l'insertion de nouvelles données
dans une table,

483
00:23:49,860 --> 00:23:52,644
la mise à jour de données existantes

484
00:23:52,844 --> 00:23:54,373
ou la suppression de données

485
00:23:54,573 --> 00:23:57,920
et nous avons finalement
fait un petit stop

486
00:23:58,120 --> 00:23:59,566
sur la thématique des vues

487
00:23:59,766 --> 00:24:02,792
qui sont des tables virtuelles,

488
00:24:02,992 --> 00:24:05,994
des représentations non-éditables

489
00:24:06,194 --> 00:24:09,877
d'ensembles de données réunies
par une requête SQL.

