1
00:00:22,689 --> 00:00:25,516
This lesson will focus
on NoSQL databases

2
00:00:25,716 --> 00:00:28,926
which are a vast family

3
00:00:29,126 --> 00:00:32,099
grouping a large number of
different types of database

4
00:00:32,299 --> 00:00:37,101
and which are distinguished from
conventional relational databases

5
00:00:37,301 --> 00:00:38,773
that we have seen so far

6
00:00:38,973 --> 00:00:42,237
by the fact that they initially
did not implement

7
00:00:42,437 --> 00:00:43,364
the SQL language.

8
00:00:43,564 --> 00:00:46,118
So the logic of information storage

9
00:00:46,318 --> 00:00:47,175
is a little different

10
00:00:47,375 --> 00:00:49,570
and the rules of use also.

11
00:00:49,770 --> 00:00:51,337
We will address all these questions

12
00:00:51,537 --> 00:00:52,749
during the lesson.

13
00:00:52,949 --> 00:00:55,093
The objective of this lesson

14
00:00:55,293 --> 00:00:57,824
is to complement a little bit
what we have learned

15
00:00:58,024 --> 00:00:59,190
on relational databases

16
00:00:59,390 --> 00:01:00,879
by opening the field

17
00:01:01,079 --> 00:01:03,732
to exploring NoSQL databases

18
00:01:03,932 --> 00:01:05,967
and perhaps more particularly

19
00:01:06,167 --> 00:01:07,173
to one of them

20
00:01:07,373 --> 00:01:09,106
which is the Mongo database.

21
00:01:10,040 --> 00:01:11,238
At the end of this lesson

22
00:01:11,438 --> 00:01:13,197
you should be able to explain

23
00:01:13,397 --> 00:01:16,138
how the NoSQL world

24
00:01:16,338 --> 00:01:19,131
differs from the world 
of relational databases

25
00:01:19,331 --> 00:01:23,358
and you should be able to use 

26
00:01:23,558 --> 00:01:25,502
one of these databases a little bit.

27
00:01:26,932 --> 00:01:28,960
In this lesson we will first discuss

28
00:01:29,160 --> 00:01:31,268
the origins of NoSQL

29
00:01:31,468 --> 00:01:33,302
then we will review

30
00:01:33,502 --> 00:01:35,814
the different types of NoSQL databases

31
00:01:36,014 --> 00:01:37,488
and database management systems

32
00:01:37,688 --> 00:01:38,492
associated with them

33
00:01:38,692 --> 00:01:41,189
before focusing 

34
00:01:41,389 --> 00:01:42,322
more particularly

35
00:01:42,522 --> 00:01:44,277
on MongoDB

36
00:01:44,477 --> 00:01:47,829
which is a type of NoSQL database.

37
00:01:48,029 --> 00:01:50,878
And finally, we will see

38
00:01:51,078 --> 00:01:54,028
how the CRUD functions,

39
00:01:54,228 --> 00:01:56,991
so Create, Read, Update, Delete,

40
00:01:57,191 --> 00:02:00,556
are implemented in a system like MongoDB.

41
00:02:07,421 --> 00:02:09,226
We saw in the lesson

42
00:02:09,426 --> 00:02:11,275
on relational databases

43
00:02:11,475 --> 00:02:14,030
that this type of database stores data

44
00:02:14,230 --> 00:02:17,059
in tables whose columns have

45
00:02:17,259 --> 00:02:18,243
well defined types,

46
00:02:18,443 --> 00:02:21,314
that these tables can be linked together

47
00:02:21,514 --> 00:02:22,723
by relations,

48
00:02:22,923 --> 00:02:25,641
that the querying of the data

49
00:02:25,841 --> 00:02:28,580
is based on a standardized language,

50
00:02:28,780 --> 00:02:29,574
the SQL language, 

51
00:02:29,774 --> 00:02:32,526
and finally that the transactions

52
00:02:32,726 --> 00:02:33,679
carried out in these tables

53
00:02:33,879 --> 00:02:36,606
generally meet the principles of ACID

54
00:02:36,806 --> 00:02:41,773
namely atomicity, coherence,
isolation and durability.

55
00:02:41,973 --> 00:02:46,878
Atomicity means that all the changes
of a transaction

56
00:02:47,078 --> 00:02:48,840
must be successfully carried out

57
00:02:49,040 --> 00:02:51,635
otherwise all of these changes

58
00:02:51,835 --> 00:02:52,935
must be invalidated.

59
00:02:53,135 --> 00:02:55,589
Coherence, that a transaction is validated

60
00:02:55,789 --> 00:02:57,803
only if all the rules 
in force are respected

61
00:02:58,003 --> 00:02:59,137
on the data type,

62
00:02:59,337 --> 00:03:00,523
on the constraints, the primaries,

63
00:03:00,723 --> 00:03:02,730
the null values, possible ​​or not, etc.

64
00:03:03,892 --> 00:03:06,234
Isolation means that the 
simultaneous execution

65
00:03:06,434 --> 00:03:08,567
of two transactions is equivalent

66
00:03:08,767 --> 00:03:10,683
to their sequential execution

67
00:03:10,883 --> 00:03:13,724
so one transaction does not
affect the other transaction

68
00:03:13,924 --> 00:03:17,279
and durability means that after validation

69
00:03:17,479 --> 00:03:19,096
the data are durably saved,

70
00:03:19,296 --> 00:03:22,130
regardless of errors, crashes
or other malfunctions

71
00:03:22,330 --> 00:03:23,161
which may occur.

72
00:03:24,806 --> 00:03:26,736
The second web generation 
saw the emerging

73
00:03:26,936 --> 00:03:30,968
of services that manage
very large volumes of data

74
00:03:31,168 --> 00:03:33,815
like Google, Amazon,
Facebook, LinkedIn, etc.

75
00:03:34,015 --> 00:03:40,431
and that have to deal with
sudden influx of punctual traffic.

76
00:03:40,631 --> 00:03:43,500
Influx of traffic generally means

77
00:03:43,700 --> 00:03:45,186
a decrease in response time,

78
00:03:45,386 --> 00:03:47,214
a decrease in user enthusiasm

79
00:03:47,414 --> 00:03:48,669
and loss of profitability,

80
00:03:48,869 --> 00:03:50,633
hence the need to maintain

81
00:03:50,833 --> 00:03:52,309
the functionalities and performances

82
00:03:52,509 --> 00:03:53,615
in case of high demand,

83
00:03:53,815 --> 00:03:56,643
a characteristic called scalability

84
00:03:56,843 --> 00:03:57,918
or upgradability.

85
00:03:59,187 --> 00:04:01,378
This maintenance of 
functionalities and performances

86
00:04:01,578 --> 00:04:03,440
can be obtained by increasing power

87
00:04:03,640 --> 00:04:06,110
and we speak then of vertical scalability

88
00:04:06,310 --> 00:04:09,343
or by reduction of the nodes

89
00:04:09,543 --> 00:04:10,825
and distribution of services

90
00:04:11,025 --> 00:04:12,114
on the nodes of the network

91
00:04:12,314 --> 00:04:14,936
and we then speak of 
horizontal scalability.

92
00:04:16,158 --> 00:04:18,843
A better adjustment of softwares
to managed data types

93
00:04:19,043 --> 00:04:21,405
also allows to accelerate

94
00:04:21,605 --> 00:04:22,444
the data processing

95
00:04:22,644 --> 00:04:24,445
and to maintain the performance.

96
00:04:25,632 --> 00:04:28,295
We therefore see that the NoSQL databases

97
00:04:28,495 --> 00:04:30,574
group together a set of alternatives

98
00:04:30,774 --> 00:04:32,096
to relational databases

99
00:04:32,296 --> 00:04:35,410
that were developed in
the late 90's

100
00:04:35,610 --> 00:04:38,419
to meet the need to maintain
the performances

101
00:04:38,619 --> 00:04:41,222
of some big players of the web

102
00:04:41,422 --> 00:04:43,436
which manage very large databases

103
00:04:43,636 --> 00:04:47,334
of low to moderate complexity.

104
00:04:47,534 --> 00:04:53,877
The main characteristics
of NoSQL databases

105
00:04:54,077 --> 00:04:58,114
are first of all in the data
storage form

106
00:04:58,314 --> 00:05:01,816
which differs quite a bit
from what we are used to

107
00:05:02,016 --> 00:05:03,691
in the world of relational databases

108
00:05:03,891 --> 00:05:06,482
in not providing,

109
00:05:06,682 --> 00:05:07,391
at least at the origin,

110
00:05:07,591 --> 00:05:10,080
SQL language implementation,

111
00:05:10,280 --> 00:05:14,327
in not bringing support

112
00:05:14,527 --> 00:05:15,518
to the joins,

113
00:05:15,718 --> 00:05:17,271
so we cannot make joins

114
00:05:17,471 --> 00:05:19,021
in NoSQL databases,

115
00:05:19,221 --> 00:05:23,222
to work as a distributed system,

116
00:05:23,422 --> 00:05:25,400
that is to say to distribute the data

117
00:05:25,600 --> 00:05:27,808
on several servers

118
00:05:28,008 --> 00:05:33,404
and finally a tendency
not to implement

119
00:05:33,604 --> 00:05:35,626
the ACID principles.

120
00:05:37,255 --> 00:05:40,013
The principle of horizontal scalability,

121
00:05:40,213 --> 00:05:44,468
so to want to distribute
the service or data

122
00:05:44,668 --> 00:05:46,678
on the many machines

123
00:05:46,878 --> 00:05:48,295
constituting a network,

124
00:05:48,495 --> 00:05:50,328
so on a set of nodes,

125
00:05:50,528 --> 00:05:55,709
leads directly to this theorem
called "CAP theorem"

126
00:05:55,909 --> 00:06:01,422
which stipulates that only 2 of the 
3 criteria of availability coherence

127
00:06:01,622 --> 00:06:03,746
and tolerance to partitioning

128
00:06:03,946 --> 00:06:05,958
can be satisfied simultaneously.

129
00:06:06,158 --> 00:06:10,123
Coherence means that
all the nodes of a system

130
00:06:10,323 --> 00:06:12,312
see exactly the same data 
at the same time.

131
00:06:12,512 --> 00:06:16,424
Availability means that 
every time a query is sent

132
00:06:16,624 --> 00:06:18,298
to one of the system nodes

133
00:06:18,498 --> 00:06:20,488
we are sure to receive an answer

134
00:06:20,688 --> 00:06:23,022
either in terms of success

135
00:06:23,222 --> 00:06:24,224
or failure of the request

136
00:06:24,424 --> 00:06:25,576
but we receives a response.

137
00:06:26,800 --> 00:06:28,898
The notion of partitioning tolerance

138
00:06:29,098 --> 00:06:31,587
which expresses the idea

139
00:06:31,787 --> 00:06:34,097
that in a distributed system

140
00:06:34,297 --> 00:06:37,046
it frequently happens that 
the different nodes

141
00:06:37,246 --> 00:06:38,611
can be isolated from each other

142
00:06:38,811 --> 00:06:41,036
either because a node no longer works

143
00:06:41,236 --> 00:06:44,548
it was the victim of a crash,

144
00:06:44,748 --> 00:06:47,417
a power failure, communication
breakdowns,

145
00:06:47,617 --> 00:06:49,343
no more communication, etc.

146
00:06:50,055 --> 00:06:52,097
In the case of NoSQL systems

147
00:06:52,297 --> 00:06:55,860
where we attempt to distribute
the load and the information

148
00:06:56,060 --> 00:06:58,387
on the many nodes of a network,

149
00:06:58,587 --> 00:07:02,257
partitioning is a reality

150
00:07:02,457 --> 00:07:05,067
so that in fact we have to choose

151
00:07:05,267 --> 00:07:08,435
to favor the coherence
or the availability.

152
00:07:08,635 --> 00:07:10,287
In the first case

153
00:07:10,487 --> 00:07:11,818
the systems called "CP,

154
00:07:12,018 --> 00:07:14,426
so rather coherence partitioning,

155
00:07:14,626 --> 00:07:19,050
this means that we expects a
synchronization of the nodes

156
00:07:19,250 --> 00:07:21,649
before ensuring the answer

157
00:07:21,849 --> 00:07:23,872
with the risk of having

158
00:07:24,072 --> 00:07:26,662
timeout or errors from time to time,

159
00:07:26,862 --> 00:07:27,825
error messages,

160
00:07:28,025 --> 00:07:30,937
and so the availability criterion 
is not respected.

161
00:07:31,137 --> 00:07:34,832
Or we go to AP solutions

162
00:07:35,032 --> 00:07:37,424
where we favor the availability.

163
00:07:37,624 --> 00:07:40,346
In this case, the node
that we question

164
00:07:40,546 --> 00:07:42,747
will send the latest available version

165
00:07:42,947 --> 00:07:45,325
of a data at the level of a node

166
00:07:45,525 --> 00:07:47,340
which means that we accept

167
00:07:47,540 --> 00:07:50,080
that all nodes may not 
always be up-to-date

168
00:07:50,280 --> 00:07:53,663
and sometimes send different values.

169
00:07:53,863 --> 00:07:56,305
After all the question is to know

170
00:07:56,505 --> 00:07:59,379
what is the tolerable update time.

171
00:08:00,178 --> 00:08:03,008
We see that the relational databases

172
00:08:03,208 --> 00:08:05,088
which by their very nature,

173
00:08:05,288 --> 00:08:08,130
by the existence
of relations between the tables,

174
00:08:08,330 --> 00:08:12,344
do not lend themselves well
to a distribution of data

175
00:08:12,544 --> 00:08:14,020
on several different machines,

176
00:08:14,220 --> 00:08:19,138
are usually found in the CA register,

177
00:08:19,338 --> 00:08:21,186
so coherence-availability,

178
00:08:21,386 --> 00:08:27,016
but do not lend themselves
at all to a horizontal scalability

179
00:08:27,216 --> 00:08:29,598
distributed on a network.

180
00:08:39,660 --> 00:08:40,999
But if we look a little closer

181
00:08:41,199 --> 00:08:42,929
at the world of NoSQL databases

182
00:08:43,129 --> 00:08:45,414
we can see that we can distinguish

183
00:08:45,614 --> 00:08:48,979
four large families of NoSQL databases

184
00:08:49,179 --> 00:08:53,098
which are distinguished
by the way they store information.

185
00:08:53,298 --> 00:08:55,403
The first of these families

186
00:08:55,603 --> 00:08:57,982
is constituted by the key-value
type databases

187
00:08:58,182 --> 00:09:00,894
which are based on dictionaries

188
00:09:01,094 --> 00:09:03,477
allowing to access the value of an object

189
00:09:03,677 --> 00:09:05,716
by means of a key which must be unique.

190
00:09:05,916 --> 00:09:07,921
As an example, we can see here

191
00:09:08,121 --> 00:09:10,569
that the key can be represented
by a first name,

192
00:09:10,769 --> 00:09:11,821
Pierre or Henri,

193
00:09:12,021 --> 00:09:13,517
which gives access to a series of values

194
00:09:13,717 --> 00:09:18,067
the type of activity, age, 
type of sport, etc.

195
00:09:18,267 --> 00:09:21,036
The main database management systems

196
00:09:21,236 --> 00:09:23,564
that implement this key-value type

197
00:09:23,764 --> 00:09:25,780
are Redis and Voldemort

198
00:09:25,980 --> 00:09:27,698
which was developed by LinkedIn.

199
00:09:27,898 --> 00:09:29,097
to manage its databases.

200
00:09:30,068 --> 00:09:32,576
The second type of NoSQL database

201
00:09:32,776 --> 00:09:34,283
is the column-oriented type

202
00:09:34,483 --> 00:09:38,509
which is a bit like the relational model

203
00:09:38,709 --> 00:09:43,510
since the data can be 
represented by tables.

204
00:09:43,710 --> 00:09:46,981
Simply the storage is 
organized by columns

205
00:09:47,181 --> 00:09:49,480
on a key-value basis

206
00:09:49,680 --> 00:09:51,228
where for each column

207
00:09:51,428 --> 00:09:56,381
the key is associated with the 
value of this key in this column.

208
00:09:56,581 --> 00:09:58,906
The advantage of this system is to allow

209
00:09:59,106 --> 00:10:01,429
a very dynamic management

210
00:10:01,629 --> 00:10:04,047
of a very high number of columns.

211
00:10:04,871 --> 00:10:07,226
The main database management systems

212
00:10:07,426 --> 00:10:12,471
which implement this model are Cassandra,
Hbase, BigTable and Vertica.

213
00:10:14,092 --> 00:10:16,108
The third type of NoSQL database

214
00:10:16,308 --> 00:10:17,992
called "document-oriented"

215
00:10:18,192 --> 00:10:21,111
also rests on a key-value paradigm

216
00:10:21,311 --> 00:10:24,235
by associating documents

217
00:10:24,435 --> 00:10:28,393
which are of type JSON or 
XML to the key.

218
00:10:28,593 --> 00:10:30,902
So here we have the same example

219
00:10:31,102 --> 00:10:31,963
of Pierre and Henri

220
00:10:32,163 --> 00:10:34,379
with student 1 and student 2

221
00:10:34,579 --> 00:10:35,634
which are the keys

222
00:10:35,834 --> 00:10:39,418
and behind a JSON syntax

223
00:10:39,618 --> 00:10:42,083
which gives the attributes of the object.

224
00:10:42,708 --> 00:10:46,115
Database management systems
that implement this model

225
00:10:46,315 --> 00:10:50,940
are mainly CouchDB, SimpleDB and MongoDB.

226
00:10:52,847 --> 00:10:57,470
And finally, the NoSQL databases
of "graph-oriented" type

227
00:10:57,670 --> 00:10:59,819
which are based on the graph theory,

228
00:11:00,019 --> 00:11:02,171
on the notions of node,
relation and property

229
00:11:02,371 --> 00:11:06,138
to store the information,

230
00:11:06,338 --> 00:11:08,630
concerning here the students 
Pierre and Henri.

231
00:11:08,830 --> 00:11:14,390
The main and almost only
database management system,

232
00:11:14,590 --> 00:11:16,174
the only system somewhat completed,

233
00:11:16,374 --> 00:11:17,800
is Neo4J.

234
00:11:18,000 --> 00:11:21,900
In this figure which takes up
the ideas of the CAP theorem

235
00:11:22,100 --> 00:11:25,989
we represented the different types

236
00:11:26,189 --> 00:11:27,516
of database management systems

237
00:11:27,716 --> 00:11:30,372
depending on their characteristics

238
00:11:30,572 --> 00:11:33,668
on their positioning in this diagram

239
00:11:33,868 --> 00:11:36,366
by representing in red-orange

240
00:11:36,566 --> 00:11:39,132
the relational database management systems

241
00:11:39,332 --> 00:11:41,303
like Postgres, MySQL, etc.

242
00:11:41,503 --> 00:11:44,606
The systems in green

243
00:11:44,806 --> 00:11:45,964
of the key-value type,

244
00:11:46,164 --> 00:11:47,642
like Voldemort and Redis.

245
00:11:47,842 --> 00:11:50,507
The column-oriented systems in yellow,

246
00:11:50,707 --> 00:11:53,748
with Cassandra on the CP side,

247
00:11:53,948 --> 00:11:55,808
HBase and BigTable on the AP side.

248
00:11:56,008 --> 00:11:57,321
And finally in blue

249
00:11:57,521 --> 00:12:00,872
the document-oriented DBMS systems

250
00:12:01,072 --> 00:12:03,803
where we see that MongoDB

251
00:12:04,003 --> 00:12:08,563
is a system that is
on the side of availability

252
00:12:08,763 --> 00:12:12,613
while its alter egos, SimpleBD and CouchDB,

253
00:12:12,813 --> 00:12:14,681
are more on the side of coherence.

254
00:12:24,717 --> 00:12:27,231
MongoDB is a free NoSQL database

255
00:12:27,431 --> 00:12:28,675
of document-oriented type.

256
00:12:28,875 --> 00:12:31,657
In this database

257
00:12:31,857 --> 00:12:34,618
the notion of a table we had
in relational databases

258
00:12:34,818 --> 00:12:36,496
is replaced by the notion of collection.

259
00:12:36,696 --> 00:12:43,083
Here we have the example of
the Postgres table of the Seychelles' hotels.

260
00:12:43,283 --> 00:12:48,053
If we look at how this data
is handled in Mongo

261
00:12:48,253 --> 00:12:50,720
we have here a user interface

262
00:12:50,920 --> 00:12:53,055
which allows to see
this collection of objects,

263
00:12:53,255 --> 00:12:54,533
so the hotels,

264
00:12:54,733 --> 00:12:57,518
124 items in the collection

265
00:12:57,718 --> 00:13:01,287
and then for each object

266
00:13:01,487 --> 00:13:03,770
a tree structure

267
00:13:03,970 --> 00:13:07,026
identifying the object type,
the collection of its properties,

268
00:13:07,226 --> 00:13:09,275
the geometry and in the geometry

269
00:13:09,475 --> 00:13:10,024
the coordinates.

270
00:13:10,224 --> 00:13:13,095
This tree representation

271
00:13:13,295 --> 00:13:16,512
can be transformed into
a representation in JSON format

272
00:13:16,712 --> 00:13:19,037
where we find this idea of ​​collection

273
00:13:19,237 --> 00:13:22,870
in the syntax specific to the JSON format.

274
00:13:23,070 --> 00:13:26,513
It can also be represented
in a tabular view

275
00:13:26,713 --> 00:13:30,315
simply with successive stages

276
00:13:30,515 --> 00:13:35,905
that we can browse to access the coordinates

277
00:13:36,105 --> 00:13:38,218
or properties of objects.

278
00:13:41,952 --> 00:13:44,487
The second important element
is the concept of a data diagram

279
00:13:44,687 --> 00:13:47,516
which, in a relational database,

280
00:13:47,716 --> 00:13:48,769
is very important.

281
00:13:48,969 --> 00:13:50,845
It is unavoidable.

282
00:13:51,045 --> 00:13:54,572
In a system like Mongo

283
00:13:54,772 --> 00:13:57,201
we are free to store
the data absolutely as we want

284
00:13:57,401 --> 00:13:59,276
to put everything in a collection.

285
00:13:59,476 --> 00:14:02,962
But if we want to be able
to use the data

286
00:14:03,162 --> 00:14:04,587
stored in a Mongo database

287
00:14:04,787 --> 00:14:06,666
to represent objects in a map

288
00:14:06,866 --> 00:14:10,260
we have to make sure these 
objects follow a certain structure

289
00:14:10,460 --> 00:14:13,327
to find the coordinates of the point

290
00:14:13,527 --> 00:14:14,785
and the properties of the object.

291
00:14:14,985 --> 00:14:18,262
The best way to find this structure

292
00:14:18,462 --> 00:14:22,262
is to store objects that have 
this structure at the beginning.

293
00:14:22,462 --> 00:14:24,136
In other words,

294
00:14:24,336 --> 00:14:26,829
the Mongo database is not restricting

295
00:14:27,029 --> 00:14:29,129
from the point of view
of the schematization of the data

296
00:14:29,329 --> 00:14:32,730
but neglecting the schematization

297
00:14:32,930 --> 00:14:34,734
makes life much more complicated.

298
00:14:35,917 --> 00:14:37,767
De-standardization and join.

299
00:14:37,967 --> 00:14:40,720
In a relational database system

300
00:14:40,920 --> 00:14:42,846
when we want to add a piece of information

301
00:14:43,046 --> 00:14:45,269
as in the case of the hotels 
of the Seychelles,

302
00:14:45,469 --> 00:14:47,170
if we want to add the information

303
00:14:47,370 --> 00:14:49,480
relating to the owners of these hotelsm

304
00:14:49,680 --> 00:14:53,893
as several hotels can have the same owner,

305
00:14:54,093 --> 00:14:56,060
to avoid data redundancy

306
00:14:56,260 --> 00:14:58,509
we would create a separate indirect table

307
00:14:58,709 --> 00:15:00,863
which lists the owners

308
00:15:01,063 --> 00:15:02,930
and we would add in the original table

309
00:15:03,130 --> 00:15:05,437
a column with the owner ID.

310
00:15:06,894 --> 00:15:09,511
A join would thus be established
between these two tables.

311
00:15:09,711 --> 00:15:12,330
This process of data separation

312
00:15:12,530 --> 00:15:15,335
is what we call in
the world of relational databases,

313
00:15:15,547 --> 00:15:16,344
the standardization.

314
00:15:16,956 --> 00:15:19,381
Let us note also
that one of the weaknesses

315
00:15:19,581 --> 00:15:20,428
of the relational world,

316
00:15:20,628 --> 00:15:24,659
which has already been mentioned
when this field was presented,

317
00:15:24,859 --> 00:15:27,727
the difficulty we would have here

318
00:15:27,927 --> 00:15:29,034
to store information

319
00:15:29,234 --> 00:15:31,160
in the case where a hotel 
has several owners.

320
00:15:32,034 --> 00:15:34,196
In the case of Mongo we could of course

321
00:15:34,396 --> 00:15:36,197
proceed in a similar manner

322
00:15:36,397 --> 00:15:40,191
by adding in the JSON document

323
00:15:40,391 --> 00:15:42,247
an owner ID field

324
00:15:42,447 --> 00:15:46,509
and then by having a list

325
00:15:46,709 --> 00:15:48,437
of owners with their addresses 
still in JSON format.

326
00:15:48,637 --> 00:15:50,045
Let's also note

327
00:15:50,245 --> 00:15:52,366
that the JSON syntax

328
00:15:52,566 --> 00:15:55,546
allows easily to represent the case

329
00:15:55,746 --> 00:15:56,714
of several owners.

330
00:15:56,914 --> 00:15:59,032
In reality, in the NoSQL world

331
00:15:59,232 --> 00:16:00,622
as we do not implement the joins

332
00:16:00,822 --> 00:16:03,655
we prefer to list explicitly

333
00:16:03,855 --> 00:16:07,374
the elements of information 
related to the owner,

334
00:16:07,574 --> 00:16:10,007
even if it means living with
a certain redundancy.

335
00:16:10,207 --> 00:16:13,510
It is for this reason that NoSQL systems

336
00:16:13,710 --> 00:16:14,970
lend themselves particularly well

337
00:16:15,170 --> 00:16:17,414
to manage large volumes of data

338
00:16:17,614 --> 00:16:19,847
but data with a low complexity

339
00:16:20,047 --> 00:16:22,930
with few tabular relations.

340
00:16:23,130 --> 00:16:25,460
In the case of complex data systems

341
00:16:25,660 --> 00:16:27,988
with tables that are linked together,

342
00:16:28,188 --> 00:16:32,515
the relational database system
remains more interesting

343
00:16:32,715 --> 00:16:34,067
in general.

344
00:16:43,630 --> 00:16:45,780
To conclude we will see some examples

345
00:16:45,980 --> 00:16:48,835
of implementation of basic functions

346
00:16:49,035 --> 00:16:50,499
of databases.

347
00:16:50,699 --> 00:16:53,488
So the functions of creation, reading

348
00:16:53,688 --> 00:16:56,288
updating and data deletion

349
00:16:56,488 --> 00:16:59,676
which we group under the CRUD acronym.

350
00:16:59,876 --> 00:17:02,178
We start with the insertion of data,

351
00:17:02,378 --> 00:17:03,922
we will systematically compare

352
00:17:04,122 --> 00:17:10,143
the SQL syntax with the syntax 
found in Mongo.

353
00:17:10,343 --> 00:17:15,352
In the SQL, the introduction
of a new data set

354
00:17:15,552 --> 00:17:16,516
in the hotel table

355
00:17:16,716 --> 00:17:18,980
involves the INSERT INTO keywords,

356
00:17:19,180 --> 00:17:21,031
the list of columns

357
00:17:21,231 --> 00:17:23,998
and then the list of values ​​corresponding
to these columns.

358
00:17:25,106 --> 00:17:26,098
In the case of Mongo

359
00:17:26,298 --> 00:17:27,791
we have something a bit equivalent

360
00:17:27,991 --> 00:17:30,671
with just the DB keywords

361
00:17:30,871 --> 00:17:32,483
which refer to the current database,

362
00:17:32,683 --> 00:17:35,439
hotels is the targeted collection

363
00:17:35,639 --> 00:17:38,782
and we insert in this collection
a new object

364
00:17:38,982 --> 00:17:40,929
which has three attributes

365
00:17:41,129 --> 00:17:43,195
the name, the number of rooms,
the number of beds and the status

366
00:17:43,395 --> 00:17:45,946
with the values ​​of these 4 attributes.

367
00:17:46,146 --> 00:17:48,169
Updating the data.

368
00:17:48,369 --> 00:17:51,201
In the case of SQL, the UPDATE keyword

369
00:17:51,401 --> 00:17:52,388
in the hotel table

370
00:17:52,588 --> 00:17:54,148
and then the SET keyword,

371
00:17:54,348 --> 00:17:57,885
the variable that we want to change,

372
00:17:58,085 --> 00:18:00,903
so the room variable that goes to 6

373
00:18:01,103 --> 00:18:03,860
and the conditional clause

374
00:18:04,060 --> 00:18:09,242
to identify the hotel on which
the number of rooms has increased to 6.

375
00:18:09,442 --> 00:18:11,509
The equivalent of the Mongo side

376
00:18:11,709 --> 00:18:14,305
with the UPDATE keyword also

377
00:18:14,505 --> 00:18:16,033
which applies to the collection of hotels

378
00:18:16,233 --> 00:18:20,732
and then simply the reference 
to the object

379
00:18:20,932 --> 00:18:21,829
which will change

380
00:18:22,029 --> 00:18:23,918
so we will search for objects

381
00:18:24,118 --> 00:18:25,583
whose name corresponds 
to "beach bungalows"

382
00:18:25,783 --> 00:18:27,893
and we will apply a set

383
00:18:28,093 --> 00:18:29,220
on the room variable

384
00:18:29,420 --> 00:18:30,288
which takes the value 6.

385
00:18:30,488 --> 00:18:34,425
So something quite similar 
to the SQL language.

386
00:18:34,625 --> 00:18:37,151
For the data deletion,

387
00:18:37,351 --> 00:18:40,060
the DELETE FROM of the SQL language

388
00:18:40,260 --> 00:18:41,979
followed by the name of the table

389
00:18:42,179 --> 00:18:44,196
and then the conditional clause

390
00:18:44,396 --> 00:18:49,140
which is found almost identically

391
00:18:49,340 --> 00:18:51,368
in Mongo with the REMOVE function

392
00:18:51,568 --> 00:18:53,213
applied to the hotel collection,

393
00:18:53,413 --> 00:18:54,840
the document is deleted

394
00:18:55,040 --> 00:19:00,265
which has "beach bungalows" 
as attribute-name.

395
00:19:01,325 --> 00:19:03,288
Finally, some examples of 

396
00:19:03,488 --> 00:19:04,336
more general requests

397
00:19:04,536 --> 00:19:07,844
starting with selection request of hotels 

398
00:19:08,044 --> 00:19:10,824
whose number of rooms is more than 10.

399
00:19:11,024 --> 00:19:14,034
In SQL, the classic SELECT FROM

400
00:19:14,234 --> 00:19:15,651
with a conditional clause.

401
00:19:15,851 --> 00:19:18,838
In Mongo we find the FIND keyword

402
00:19:19,038 --> 00:19:20,763
which allows to search for objects.

403
00:19:20,963 --> 00:19:22,787
The search criterion

404
00:19:22,987 --> 00:19:23,788
in the first line,

405
00:19:23,988 --> 00:19:25,988
the room field

406
00:19:26,188 --> 00:19:29,447
and then the operator "larger than"

407
00:19:29,647 --> 00:19:33,338
characterized by the ampersand
preceding the GT keyword

408
00:19:33,538 --> 00:19:35,437
and then the criterion 10

409
00:19:35,637 --> 00:19:37,252
and in the second line

410
00:19:37,452 --> 00:19:39,755
the things we want to send

411
00:19:39,955 --> 00:19:42,676
like the id of the object 
is sent by default,

412
00:19:42,876 --> 00:19:44,792
we must put a zero

413
00:19:44,992 --> 00:19:47,154
if we don't want to have the identifier

414
00:19:47,354 --> 00:19:50,189
and then a 1 to send the name.

415
00:19:50,389 --> 00:19:52,538
So it's 0, 1, true, false.

416
00:19:53,000 --> 00:19:56,600
A second example of a similar basic query,

417
00:19:56,800 --> 00:20:02,022
so counting the number of objects
sent by the selection request

418
00:20:02,235 --> 00:20:05,107
of hotels with more than 10 rooms

419
00:20:05,307 --> 00:20:07,848
with something quite equivalent

420
00:20:08,048 --> 00:20:09,616
in Mongo, a "count" function

421
00:20:09,816 --> 00:20:11,821
applied to the collection of hotels

422
00:20:12,021 --> 00:20:14,922
an on the fact that the rooms...

423
00:20:15,122 --> 00:20:17,133
the room number is equal to 10.

424
00:20:17,333 --> 00:20:20,130
Last query example

425
00:20:20,330 --> 00:20:21,234
a little more elaborated

426
00:20:21,434 --> 00:20:23,853
where we seek to list

427
00:20:24,053 --> 00:20:29,502
the number of hotels
there is for each status.

428
00:20:29,702 --> 00:20:30,776
In the SQL

429
00:20:30,976 --> 00:20:34,551
a classic query with a 
grouping by status

430
00:20:34,751 --> 00:20:38,287
and we count in the number 
of candidates in each status.

431
00:20:38,487 --> 00:20:40,934
In the case of MongoDB

432
00:20:41,134 --> 00:20:43,943
we use the keyword 
the aggregation function

433
00:20:44,143 --> 00:20:46,085
on the collection of hotels

434
00:20:46,285 --> 00:20:50,299
with the status as a rule of grouping 

435
00:20:50,499 --> 00:20:54,855
and the sum as a rule of calculation.

436
00:20:55,055 --> 00:20:57,525
These few examples show

437
00:20:57,725 --> 00:21:00,982
that in a NoSQL software such as Mongo

438
00:21:01,182 --> 00:21:03,318
that does not implement the SQL language

439
00:21:03,518 --> 00:21:07,093
we still have a query language

440
00:21:07,293 --> 00:21:09,218
which allows to question the data

441
00:21:09,418 --> 00:21:10,374
in an effective way.

442
00:21:10,574 --> 00:21:13,391
A language that is also implemented

443
00:21:13,591 --> 00:21:15,345
in the graphic interface.

444
00:21:15,995 --> 00:21:18,368
But before moving to the graphic interface

445
00:21:18,568 --> 00:21:21,891
let's look at how things
appear on the command line

446
00:21:22,091 --> 00:21:25,546
which is the initial 

447
00:21:25,746 --> 00:21:26,916
and principal mode of use of Mongo.

448
00:21:27,116 --> 00:21:30,400
With the Mongo command

449
00:21:30,600 --> 00:21:32,622
we access the shell of Mongo,

450
00:21:32,822 --> 00:21:35,234
USE SEYCHELLES to say that 
we want to use

451
00:21:35,434 --> 00:21:36,403
the Seychelles database

452
00:21:36,603 --> 00:21:37,916
which will now be called DB

453
00:21:38,116 --> 00:21:42,020
and DB hotels, so as a reference 
the collection of hotels

454
00:21:42,220 --> 00:21:43,810
and we search for the first object
of the collection

455
00:21:44,010 --> 00:21:46,207
which is the Beach Bungalow hotel,

456
00:21:46,407 --> 00:21:48,231
displayed in JSON format.

457
00:21:50,014 --> 00:21:53,178
In the case of a more elaborated

458
00:21:53,378 --> 00:21:54,499
graphical user interface

459
00:21:54,699 --> 00:21:58,425
we have a small query creation tool,

460
00:21:58,625 --> 00:22:02,645
we can for example drag the name field

461
00:22:02,845 --> 00:22:07,922
and search for all the hotels

462
00:22:08,122 --> 00:22:09,745
whose name begins with B

463
00:22:09,945 --> 00:22:14,708
and we find a whole series of them.

464
00:22:20,318 --> 00:22:20,929
There you go.

465
00:22:31,861 --> 00:22:32,619
In this lesson,

466
00:22:32,819 --> 00:22:34,584
we explored a little bit

467
00:22:34,784 --> 00:22:36,880
the world of NoSQL databases.

468
00:22:37,080 --> 00:22:40,046
We have seen a little bit for what reasons

469
00:22:40,246 --> 00:22:43,240
these databases had been developed

470
00:22:43,440 --> 00:22:45,454
as an alternative to the relational model.

471
00:22:45,654 --> 00:22:49,237
We saw that there are four main types

472
00:22:49,437 --> 00:22:50,871
of NoSQL databases

473
00:22:51,071 --> 00:22:54,612
characterized by the way they manage
the storage of information.

474
00:22:54,812 --> 00:22:57,602
then we talked a little bit more about

475
00:22:57,802 --> 00:23:00,842
the characteristics of MongoDB

476
00:23:01,042 --> 00:23:05,681
which is a document-oriented database.

477
00:23:05,881 --> 00:23:09,158
We saw how the data was managed,

478
00:23:09,358 --> 00:23:12,341
how we manage schematization,
the structuring of the information.

479
00:23:12,541 --> 00:23:15,922
We have seen how to handle joins

480
00:23:16,122 --> 00:23:17,005
and that sort of thing.

481
00:23:17,205 --> 00:23:18,351
And to conclude

482
00:23:18,551 --> 00:23:20,009
we have taken some examples

483
00:23:20,209 --> 00:23:22,982
of implementation of 
the main functionalities 

484
00:23:23,182 --> 00:23:25,980
of data query,

485
00:23:26,180 --> 00:23:27,322
of data insertion,

486
00:23:27,522 --> 00:23:28,256
of updates,

487
00:23:28,456 --> 00:23:29,580
of query,

488
00:23:29,780 --> 00:23:33,109
by comparing the SQL world syntax

489
00:23:33,309 --> 00:23:36,224
with the syntax used
in a software like Mongo

490
00:23:36,424 --> 00:23:38,023
to reach the conclusion

491
00:23:38,223 --> 00:23:42,223
that, although things are quite different,

492
00:23:42,423 --> 00:23:45,139
in reality it is quite easy

493
00:23:45,339 --> 00:23:46,417
to transition from one to the other.

494
00:23:47,834 --> 00:23:50,616
So this was the last lesson

495
00:23:50,816 --> 00:23:53,335
of this first part of the course.

496
00:23:53,535 --> 00:23:57,393
I would like to take this opportunity
to congratulate

497
00:23:57,593 --> 00:24:00,455
all of you who have followed 
me until now.

498
00:24:01,616 --> 00:24:02,963
Congratulations.

