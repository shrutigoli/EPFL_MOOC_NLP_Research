Welcome to the lesson during which we will prepare the test databases that we will use later to illustrate the different forms of use of the SQL language when making queries to search for objects in databases.
The objective of this lesson is to familiarize with the use of different types of data supports in QGIS, data supports in the form of simple files or SpatiaLite and postGIS databases in particular.
We will discuss successively the objectives of this approach, the importation of source files, the creation of a database in SpatiaLite format and finally the creation of a PostGIS database.
The objective of this lesson is to prepare a dataset that will be able to be used subsequently to test and illustrate the queries and the SQL language.
As we saw in the first lesson of this module, this dataset can be based on various types of supports, in this specific case we will create 3 supports to show how these 3 types of supports can be used in the QGIS software.
These 3 types of supports are first of all the simple files in the Shapefile ESRI format and then a stand-alone database in SpatiaLite format so a database independent of a central server and finally a postGIS postGres database hosted on a centralized server.
So to start with, we open the QGIS application and when it is launched, we import some vectorial layers from a database on the Seychelles.
These basic data are composed of 4 layers: the districts of the 3 central islands of the Seychelles, the hotels, a layer containing localities, and finally the road network.
We can see that for each of these layers there are 5 files, we recognize, as we saw in the first lesson of this module, the .shp .shx and .dbf files which are the basic files of the ESRI system, to which a PRJ file is added which contains the projection information and a QML file which is a QGIS-specific file containing the symbology of those layers.
We select the 4 Shapefile to import, so the files that have the SHP extension and we validate their imports.
So they set themselves up to complete the exercise, we put these layers in the right order and then we can modify the background color it is the ocean we can put it in blue, change the scale of presentation, to see a little better what happens and then finally save the project in QGIS project format.
To complete things, we will put these first layers in a group which we will call Shapefile by adding the group and moving these different layers to put them in this folder.
To create the SpatiaLite database, we will start by installing a QGIS extension called QSpatiaLite, which gives us access to this type of ... which allows to manage this database format.
When this extension is installed, we can find it in the database menu and we will start by creating a new SpatiaLite database that we will put in disk E, in the material which concerns the Seychelles and we will call this database "MahÃ©" of the name of the main island of the Seychelles.
So, there are some messages related to the creation of this database and once it is present the QGIS interface of SpatiaLite allows to import the layers that are present in the map.
We ca specify the projection system, in this case UTM South 40Â°.
The importation is done.
We see that during the import, SpatiaLite did not understand the ID fields as being primary keys of these tables and it added a new PKUID field symbolized by a small key that shows that it is a primary key.
This is something that we will have to change, we will put some order in this database and it is something that we will do with a specific SpatiaLite software.
We open an instance of SQLiteStudio, we add a database, so the MahÃ© database and when this database has been added we can connect it and access the different tables it contains in particular.
In the district table we can delete the primary key that was added during the import and modify the original ID column first by saying that it is an integer and not a real and by saying it is a primary key.
We validate these changes and then we go on to the next table, the hotels table where likewise we delete the identifier field added by the import.
We modify the original field to put it back as an integer and redo a primary key.
Similarly, the rooms which were a ... the number of rooms which was an integer has become a real, the number of beds also became a real, which we put back as an integer.
And finally the ID of the district in which the hotel is located which is also an integer at the beginning and which is a foreign key pointing to the district table and to the ID field of the district table.
So we validate these changes and in the 2 remaining tables, localities and roads, we could leave things as they are but whilst we are at it we also delete the primary key added and then we put the initial key back.
Here for the locality layer and subsequently for the road table, we do the same operation.
We validate all of this and the loop is closed.
So we can close this 
SQLiteStudio application which is also a free application and now when we return in QGIS in the SpatiaLite interface we can add the layers that this time have the right parameters, we can add them to the QGIS map and then create a new group for these SpatiaLite layers and place the imported layers in this group.
That is done, and we save it all.
Finally, we add an "_S" extension to mark the difference between the SpatiaLite layers and the original Shapefile ESRI layers.
The installation of PostgreSQL and PostGIS does not pose any major problem, the softwares are free and can be downloaded on the Internet and the download sites offer tutorials that describe this installation so we will not talk about this here.
We will assume that the PostGres 
PostGIS application is installed and we will use the pgAdmin user interface to access this database.
We open the pgAdmin application in which we will be able to create a new database that we will call "Seychelles" and as the user we will put ... as owner we will put "Marc", myself.
Then when this database is created we can open it and then an extension must be added to be able to use spatial data, this extension is the PostGIS extension it is here in the long list of possible extension, so we add this PostGIS extension to the Seychelles database, which will allow us later to import
QGIS geographic layers into this PostGIS database.
To do this, we also need an extension that is in the extension library and that is called "processing" which actually provides a whole bunch of spatial data processing tools, so we will find them in the processing menu, the toolbox, and here we have a series of
QGIS specific geoprocessing, and in the database section we have the import of layers into a QGIS database.
We can specify the primary key field so here we imported the districts, we will import the hotels this time, starting from the Shapefile, we define the ID field as the primary key again, same thing for the locality layer and finally for the road layer.
That is done.
This toolbox can be closed.
And still in the extensions, we have an extension called "DB Manager", for Data Base Manager and which is translated into a database manager in french, when this extension is installed in the database menu we find the database manager and this manager we can see that it gives access to the PostGIS databases as well as the SpatiaLite databases and we see that this
PostGIS Seychelles database is present and contains the different fields with their information, the tabular data and an overview of their geometries.
And these different layers, we can then ... from that database manager, we can add them to the map, and then as before create a group for these PostGIS layers in the map and then place these different layers in that group.
And as before, we will add a "P" suffix to distinguish these layers from the original layers in Shapefile format or layers in SpatiaLite format.
And so, all the data that we wanted to set up to test queries and the SQL language is ready.
In this lesson we have seen how to manipulate Shapefile,
SpatiaLite, PostGIS data from the QGIS software, how to create databases, how to document them.
And we have been able to produce a dataset that will be useful to us to test the queries and the SQL language.
