1
00:00:18,741 --> 00:00:19,609
Me revoilà donc

2
00:00:19,809 --> 00:00:21,225
et c'est avec grand plaisir

3
00:00:21,425 --> 00:00:22,964
que je vous retrouve
pour cette leçon

4
00:00:23,164 --> 00:00:25,136
qui va porter sur certains aspects

5
00:00:25,336 --> 00:00:28,481
de la relation entre cartographie
et Internet.

6
00:00:29,659 --> 00:00:31,705
Il s'agit d'un thème
d'une grande actualité

7
00:00:31,905 --> 00:00:33,453
puisque de plus en plus souvent,

8
00:00:33,648 --> 00:00:35,573
les applications informatiques,

9
00:00:35,753 --> 00:00:37,186
et notamment les applications

10
00:00:37,386 --> 00:00:40,069
dans le monde des systèmes
d'information géographique,

11
00:00:40,455 --> 00:00:41,787
s'appuient sur l'Internet

12
00:00:41,987 --> 00:00:44,781
pour proposer des solutions
multi-plateformes,

13
00:00:44,981 --> 00:00:48,307
donc utilisables aussi bien
sur des ordinateurs de bureau

14
00:00:48,507 --> 00:00:50,176
que des tablettes ou des smartphones

15
00:00:50,683 --> 00:00:53,915
et qui permettent d'utiliser
différents types

16
00:00:54,115 --> 00:00:55,329
de système d'exploitation,

17
00:00:55,513 --> 00:00:56,907
que ce soit dans le monde Windows,

18
00:00:57,107 --> 00:01:00,225
le monde MacOS, Linux,
Android, et j'en passe.

19
00:01:02,246 --> 00:01:03,721
L'objectif de cette leçon

20
00:01:03,921 --> 00:01:07,723
consiste donc à aborder,
de manière générale

21
00:01:07,923 --> 00:01:09,331
et forcément un peu superficielle,

22
00:01:09,531 --> 00:01:10,917
le thème des relations

23
00:01:11,117 --> 00:01:14,117
entre systèmes d'information
géographique et Internet,

24
00:01:14,653 --> 00:01:19,177
puis d'approfondir un peu
le thème de l'intégration

25
00:01:19,377 --> 00:01:22,207
d'éléments de cartographie
dynamique et interactive

26
00:01:22,407 --> 00:01:23,433
dans des pages web,

27
00:01:23,633 --> 00:01:27,030
ce que l'on désigne généralement
par le terme de web SIG.

28
00:01:27,524 --> 00:01:29,006
Au terme de la leçon,

29
00:01:29,206 --> 00:01:31,147
vous devriez être en mesure
de décrire

30
00:01:31,347 --> 00:01:34,186
les principes des architectures
client-serveur,

31
00:01:34,713 --> 00:01:36,414
et vous devriez être capables

32
00:01:36,614 --> 00:01:39,804
de réaliser une page web simple

33
00:01:40,004 --> 00:01:41,943
contenant un élément de carte.

34
00:01:43,772 --> 00:01:45,560
Nous aborderons donc successivement

35
00:01:45,760 --> 00:01:48,244
le thème de l'architecture
client-serveur

36
00:01:48,444 --> 00:01:51,217
en relation avec les systèmes
d'information géographique,

37
00:01:52,202 --> 00:01:55,696
puis nous nous concentrerons
sur les éléments fondamentaux

38
00:01:55,884 --> 00:01:56,721
de la page web,

39
00:01:56,921 --> 00:02:00,183
que sont le langage HTML et le CSS,

40
00:02:00,773 --> 00:02:02,047
qui sont les prémices

41
00:02:02,247 --> 00:02:03,921
qui nous permettront
d'aborder ensuite

42
00:02:04,121 --> 00:02:06,228
le thème de la cartographie
dans les pages web,

43
00:02:06,428 --> 00:02:08,012
donc le thème du web SIG,

44
00:02:08,870 --> 00:02:11,688
et nous terminerons la leçon
par un exemple d'application,

45
00:02:11,888 --> 00:02:13,681
donc de réalisation d'une page web

46
00:02:13,881 --> 00:02:14,503
qui contient

47
00:02:14,703 --> 00:02:18,243
un élément cartographique
dynamique et interactif.

48
00:02:24,705 --> 00:02:27,151
Un serveur est donc un logiciel
ou une machine

49
00:02:27,351 --> 00:02:29,784
qui est capable d'écouter le réseau

50
00:02:29,984 --> 00:02:33,523
et qui est capable de recevoir
des requêtes

51
00:02:33,723 --> 00:02:34,989
émanant de différents clients

52
00:02:35,189 --> 00:02:36,716
et de répondre à ces requêtes.

53
00:02:37,539 --> 00:02:39,281
Donc l'objectif d'un serveur

54
00:02:39,481 --> 00:02:41,512
est de permettre
le partage de données

55
00:02:41,712 --> 00:02:44,386
ou le partage de ressources
matérielles ou logicielles

56
00:02:44,586 --> 00:02:46,302
entre plusieurs clients

57
00:02:46,502 --> 00:02:50,633
dans une architecture qualifiée
d'architecture client-serveur.

58
00:02:51,485 --> 00:02:54,642
Il existe un très grand nombre
de types de serveur différents :

59
00:02:54,854 --> 00:02:58,011
des serveurs de base de données,
des serveurs simplement de fichiers,

60
00:02:58,263 --> 00:02:59,928
des serveurs de courriel,

61
00:03:00,128 --> 00:03:01,771
des serveurs web,

62
00:03:01,971 --> 00:03:03,956
des serveurs de jeux, etc.

63
00:03:05,782 --> 00:03:09,784
Les serveurs écoutent donc
le trafic sur le réseau Internet

64
00:03:09,984 --> 00:03:12,474
afin d'identifier des requêtes
qui leur sont adressées,

65
00:03:13,042 --> 00:03:16,546
et le portail qui leur permet
d'écouter sur le réseau

66
00:03:16,746 --> 00:03:18,342
est ce qu'on appelle
un port logiciel,

67
00:03:18,542 --> 00:03:20,708
qui est en fait le point d'accès

68
00:03:20,908 --> 00:03:23,768
au système d'exploitation
d'un ordinateur.

69
00:03:24,712 --> 00:03:29,436
Les ports logiciels sont numérotés
de 1 à 65'536

70
00:03:30,518 --> 00:03:32,758
et sur une même machine, en fait,

71
00:03:32,958 --> 00:03:35,082
on peut avoir plusieurs
logiciels serveurs

72
00:03:35,282 --> 00:03:37,000
qui fonctionnent simultanément,

73
00:03:37,490 --> 00:03:39,877
chacun écoutant ou travaillant

74
00:03:40,077 --> 00:03:42,934
avec un ou deux ports logiciels
spécifiques,

75
00:03:43,769 --> 00:03:45,876
souvent un port
pour le trafic entrant

76
00:03:46,076 --> 00:03:48,219
et un second port
pour le trafic sortant.

77
00:03:49,483 --> 00:03:52,088
Comme exemple de numéros de port
fréquemment utilisés,

78
00:03:52,288 --> 00:03:54,368
on peut citer les ports 20/21

79
00:03:54,568 --> 00:03:55,428
qui sont utilisés

80
00:03:55,628 --> 00:03:58,908
pour les protocoles
de transfert de fichier FTP,

81
00:03:59,338 --> 00:04:02,685
20 pour le flux entrant
21 pour le flux sortant,

82
00:04:03,568 --> 00:04:06,788
le port 80 pour la consultation
de pages web

83
00:04:06,988 --> 00:04:08,705
sur un serveur web HTTP,

84
00:04:09,149 --> 00:04:12,933
le port 443 dans le cas où
ce serveur web serait sécurisé

85
00:04:13,133 --> 00:04:14,763
avec le protocole HTTPS,

86
00:04:15,323 --> 00:04:18,381
ou encore le port 5'432

87
00:04:18,581 --> 00:04:22,564
pour la connexion
sur une base de données PostgreSQL.

88
00:04:24,663 --> 00:04:27,345
Les logiciels serveurs
ne doivent pas nécessairement

89
00:04:27,613 --> 00:04:29,807
être hébergés
sur une machine distante

90
00:04:30,036 --> 00:04:32,195
mais peuvent être hébergés
sur la machine locale

91
00:04:32,395 --> 00:04:34,599
en même temps
que les logiciels clients,

92
00:04:34,799 --> 00:04:38,425
ce qui est particulièrement utile
si l'on fait du développement.

93
00:04:39,364 --> 00:04:43,300
Il faut simplement que
les conditions de fonctionnement

94
00:04:43,500 --> 00:04:46,576
soient les mêmes que si les serveurs
étaient sur une machine distante,

95
00:04:46,776 --> 00:04:50,129
à savoir que la communication
entre le client et le serveur

96
00:04:50,329 --> 00:04:53,047
passe par les mêmes ports logiciels

97
00:04:53,247 --> 00:04:56,361
que si ces serveurs étaient
sur une machine distante.

98
00:04:57,561 --> 00:04:58,859
La machine locale,

99
00:04:59,059 --> 00:05:00,164
dans une adresse URL,

100
00:05:00,364 --> 00:05:03,255
est désignée par le terme
de "localhost"

101
00:05:03,455 --> 00:05:06,358
qui désigne en fait
l'interface logique

102
00:05:06,558 --> 00:05:08,324
de cette machine locale.

103
00:05:10,198 --> 00:05:13,176
L'adresse localhost
est également associée

104
00:05:13,376 --> 00:05:15,640
à une série d'adresses IP.

105
00:05:16,190 --> 00:05:19,233
Dans le cas de IP version 4,

106
00:05:19,433 --> 00:05:24,836
c'est l'adresse 127.0.0.1 qui est
la plus fréquemment utilisée,

107
00:05:25,036 --> 00:05:28,383
mais la série des adresses suivantes
est également utilisable.

108
00:05:29,552 --> 00:05:31,583
Finalement, dans une adresse URL,

109
00:05:31,783 --> 00:05:34,108
si l'on veut spécifier
un port particulier,

110
00:05:35,706 --> 00:05:37,973
on ajoute simplement deux points

111
00:05:38,173 --> 00:05:41,015
et le numéro de port
pour viser ce port-là,

112
00:05:41,215 --> 00:05:45,170
donc si on veut taper sur
le port 3000 d'une machine locale,

113
00:05:45,370 --> 00:05:51,580
l'URL serait du type 
http://localhost:3000

114
00:05:54,524 --> 00:05:55,993
Une architecture client-serveur

115
00:05:56,193 --> 00:05:59,103
est donc en général constituée
par un logiciel serveur

116
00:05:59,303 --> 00:06:01,780
qui donc écoute le trafic
sur le réseau,

117
00:06:02,318 --> 00:06:05,442
qui est capable d'identifier
une requête qui lui est adressée

118
00:06:05,642 --> 00:06:08,634
et ensuite de renvoyer une réponse.

119
00:06:09,862 --> 00:06:11,712
De l'autre côté,
on a un logiciel client

120
00:06:11,912 --> 00:06:14,428
qui lui est capable
de formuler des requêtes,

121
00:06:14,628 --> 00:06:15,857
de les envoyer au serveur

122
00:06:16,346 --> 00:06:19,920
et puis de récupérer
la réponse du serveur

123
00:06:20,120 --> 00:06:24,442
et de l'interpréter pour afficher
l'information qui a été transmise.

124
00:06:25,349 --> 00:06:27,521
Finalement, les échanges
entre client et serveur

125
00:06:27,721 --> 00:06:29,931
sont souvent gérés par
un logiciel intermédiaire

126
00:06:30,131 --> 00:06:33,265
appelé intergiciel,
ou encore middleware en anglais.

127
00:06:34,638 --> 00:06:37,852
Dans le contexte particulier des
systèmes d'information géographique,

128
00:06:38,052 --> 00:06:39,243
le côté serveur

129
00:06:39,443 --> 00:06:42,020
est souvent simplement constitué
d'un serveur de données.

130
00:06:42,220 --> 00:06:43,893
Il arrive cependant assez fréquemment

131
00:06:44,093 --> 00:06:45,919
que l'on ait deux serveurs en série,

132
00:06:46,119 --> 00:06:48,192
le premier étant destiné à gérer
les requêtes

133
00:06:48,392 --> 00:06:49,790
et la fabrication des réponses,

134
00:06:49,990 --> 00:06:53,458
alors que le second se limite
à la fourniture de données.

135
00:06:54,546 --> 00:06:56,818
Cette structure présente notamment
des avantages

136
00:06:57,018 --> 00:06:58,177
du point de vue sécuritaire

137
00:06:58,405 --> 00:06:59,495
puisque l'accès aux données

138
00:06:59,695 --> 00:07:01,920
n'est autorisé
que pour le serveur intermédiaire,

139
00:07:02,424 --> 00:07:05,381
qui lui peut gérer les droits
d'accès des différents clients.

140
00:07:06,401 --> 00:07:08,800
Du côté client,
on aura une interface utilisateur

141
00:07:09,000 --> 00:07:10,818
composée soit d'un logiciel SIG,

142
00:07:11,018 --> 00:07:14,284
QGIS, Manifold, Mapinfo,
ArcGIS, etc.,

143
00:07:14,761 --> 00:07:16,171
soit d'un navigateur web

144
00:07:16,371 --> 00:07:18,387
comprenant un composant
cartographique,

145
00:07:18,587 --> 00:07:20,442
association que l'on désigne
généralement

146
00:07:20,642 --> 00:07:21,978
par l'expression web SIG.

147
00:07:22,543 --> 00:07:23,129
Et à nouveau,

148
00:07:23,329 --> 00:07:25,728
on retrouvera divers protocoles de
communication

149
00:07:25,928 --> 00:07:27,460
entre client et serveur.

150
00:07:28,420 --> 00:07:30,760
Le plus répandu de ces logiciels

151
00:07:31,640 --> 00:07:34,010
qui gèrent les communications
entre client-serveur

152
00:07:34,210 --> 00:07:36,055
est le logiciel ODBC,

153
00:07:36,255 --> 00:07:38,532
pour Open Data Base Connectivity.

154
00:07:39,555 --> 00:07:40,589
Il s'agit d'un logiciel

155
00:07:40,789 --> 00:07:42,200
développé au départ par Microsoft

156
00:07:42,400 --> 00:07:43,405
pour le monde Windows,

157
00:07:43,993 --> 00:07:46,125
et repris par la suite
par d'autres éditeurs

158
00:07:46,325 --> 00:07:48,736
pour les plateformes Unix/Linux
et Java.

159
00:07:49,818 --> 00:07:51,610
Les requêtes de manipulation
de données

160
00:07:51,810 --> 00:07:54,444
sont formulées en langage SQL
dans le logiciel client,

161
00:07:54,644 --> 00:07:56,486
puis transmises
au serveur de données

162
00:07:56,686 --> 00:07:58,381
par l'intermédiaire de ODBC.

163
00:07:59,105 --> 00:08:00,680
Le schéma de fonctionnement
implique

164
00:08:00,855 --> 00:08:03,437
que les fabricants de logiciels
de gestion de base de données

165
00:08:03,637 --> 00:08:06,297
ont dû développer des pilotes
ODBC spécifiques

166
00:08:06,497 --> 00:08:08,789
pour chaque système
de gestion de base données.

167
00:08:10,732 --> 00:08:13,226
On voit ici dans le cas de QGIS

168
00:08:13,426 --> 00:08:16,990
que lorsque l'on ajoute par exemple
une couche vectorielle,

169
00:08:18,660 --> 00:08:20,907
on a la possibilité d'aller
rechercher cette couche

170
00:08:21,107 --> 00:08:22,107
dans une base de données,

171
00:08:22,307 --> 00:08:25,391
et les types de connexion base
de données qui sont proposés

172
00:08:25,591 --> 00:08:28,471
comprennent
différentes bases de données

173
00:08:28,671 --> 00:08:30,716
de différents fabricants,

174
00:08:30,916 --> 00:08:34,616
donc Oracle, MSSQL, Microsoft,
Postgres, MySQL,

175
00:08:34,816 --> 00:08:37,777
mais également
le pilote générique ODBC

176
00:08:37,977 --> 00:08:41,435
qui permet de se connecter
à des bases de données

177
00:08:41,635 --> 00:08:43,913
en utilisant
ce protocole particulier.

178
00:08:46,147 --> 00:08:48,106
Deux autres exemples de middleware

179
00:08:48,306 --> 00:08:50,726
assez fréquemment rencontrés
dans le monde Windows :

180
00:08:51,177 --> 00:08:55,066
OLEDB, pour Object Linking
and Embedding Database,

181
00:08:55,509 --> 00:08:57,492
qui est en fait un successeur d'ODBC

182
00:08:57,692 --> 00:08:59,489
basé sur les interfaces COM,

183
00:08:59,762 --> 00:09:00,876
et ADO.NET,

184
00:09:01,076 --> 00:09:03,217
qui est le composant d'accès
aux données du framework

185
00:09:03,417 --> 00:09:05,046
.NET de Microsoft.

186
00:09:06,820 --> 00:09:08,033
Finalement, dans le cours

187
00:09:08,233 --> 00:09:09,956
consacré aux sources de géodonnées,

188
00:09:10,156 --> 00:09:12,900
nous avions déjà parlé un petit peu
du protocole HTTP,

189
00:09:13,239 --> 00:09:17,515
en particulier pour interroger
des géoservices,

190
00:09:17,715 --> 00:09:19,919
donc des serveurs WMS et WFS.

191
00:09:20,887 --> 00:09:23,393
Dans le cas particulier
du protocole HTTP,

192
00:09:23,593 --> 00:09:25,486
nous avons donc, du côté serveur,

193
00:09:25,686 --> 00:09:27,207
soit un serveur HTTP,

194
00:09:27,407 --> 00:09:29,527
soit des géoservices

195
00:09:29,727 --> 00:09:32,849
de type Web Map Service
ou Web Feature Service.

196
00:09:33,440 --> 00:09:37,074
Côté client, un navigateur web
avec un composant SIG

197
00:09:37,274 --> 00:09:40,397
ou, plus occasionnellement,
le logiciel SIG,

198
00:09:40,597 --> 00:09:44,538
qui ne va généralement
pas utiliser un serveur HTTP

199
00:09:44,738 --> 00:09:48,413
mais qui peut aller rechercher
des tuiles dans des géoservices

200
00:09:48,613 --> 00:09:52,544
comme on l'a vu lors du cours
sur les sources de géodonnées.

201
00:09:53,558 --> 00:09:56,085
La communication
dans le sens client-serveur

202
00:09:56,285 --> 00:09:59,051
s'appuie donc sur le protocole HTTP,

203
00:09:59,591 --> 00:10:01,875
qui peut éventuellement
comporter des paramètres,

204
00:10:02,075 --> 00:10:05,151
comme on l'avait vu pour définir
les éléments

205
00:10:06,214 --> 00:10:08,039
que le serveur doit retourner

206
00:10:09,092 --> 00:10:10,499
et dans le sens client,

207
00:10:10,699 --> 00:10:13,504
on va trouver simplement
un flux d'information

208
00:10:13,704 --> 00:10:19,598
sous la forme de HTML, d'images,
de fichiers JSON, GML, etc.

209
00:10:21,508 --> 00:10:23,715
Dans la suite du cours,
nous allons maintenant

210
00:10:23,931 --> 00:10:25,586
nous concentrer
plus particulièrement

211
00:10:25,786 --> 00:10:26,397
sur le cas

212
00:10:26,597 --> 00:10:29,335
où le client est constitué
d'un navigateur web

213
00:10:30,111 --> 00:10:32,162
qui comprend des fonctionnalités

214
00:10:32,362 --> 00:10:34,607
système d'information géographique.

215
00:10:44,287 --> 00:10:45,705
Avant d'aborder la question

216
00:10:45,905 --> 00:10:49,108
de l'intégration de composants
géographiques dans une page web,

217
00:10:49,308 --> 00:10:50,994
il est nécessaire

218
00:10:51,194 --> 00:10:54,244
de rappeler un petit peu

219
00:10:54,444 --> 00:10:57,925
les fondements de l'organisation
et de la construction

220
00:10:58,125 --> 00:10:58,959
d'une page web,

221
00:10:59,545 --> 00:11:03,603
donc le langage HTML pour
HyperText Markup Language

222
00:11:03,803 --> 00:11:07,155
et le CSS
pour les éléments de style.

223
00:11:08,183 --> 00:11:11,460
C'est donc l'objet
de cette deuxième partie du cours,

224
00:11:12,350 --> 00:11:14,310
une revue accélérée un petit peu

225
00:11:14,510 --> 00:11:16,289
des principes de base

226
00:11:16,489 --> 00:11:18,669
de cette structuration de pages web.

227
00:11:19,923 --> 00:11:22,803
Une page web est donc avant tout
un document HTML,

228
00:11:23,016 --> 00:11:24,502
donc un fichier .HTML,

229
00:11:25,522 --> 00:11:27,607
qui est un fichier texte annoté

230
00:11:27,807 --> 00:11:30,016
afin de définir différents types
de contenu,

231
00:11:30,216 --> 00:11:33,006
l'entête, les pieds de page,
les paragraphes, des titres,

232
00:11:33,206 --> 00:11:34,282
etc.

233
00:11:34,848 --> 00:11:37,639
Ces annotations
qui portent le nom de Markup

234
00:11:37,839 --> 00:11:40,508
sont formées par des balises
que l'on appelle des tags

235
00:11:41,050 --> 00:11:43,674
qui sont en fait des mots-clés
placés entre chevrons

236
00:11:43,874 --> 00:11:45,778
et qui signalent le début et la fin

237
00:11:45,978 --> 00:11:48,338
d'un élément de contenu
ou élément HTML.

238
00:11:49,013 --> 00:11:50,610
Dans l'exemple qu'on a ici
sous les yeux,

239
00:11:50,810 --> 00:11:53,222
on voit que la balise principale

240
00:11:53,422 --> 00:11:57,578
est la balise HTML
qui définit en fait la page HTML,

241
00:11:57,778 --> 00:11:58,895
elle-même subdivisée

242
00:11:59,095 --> 00:12:02,843
en un entête, avec la balise head
qui contient un titre,

243
00:12:03,043 --> 00:12:04,042
avec la balise title,

244
00:12:05,808 --> 00:12:09,212
entête suivi d'une partie body

245
00:12:09,412 --> 00:12:11,069
qui est en fait le corps de la page,

246
00:12:11,269 --> 00:12:14,320
qui contient un paragraphe
avec un texte,

247
00:12:14,520 --> 00:12:15,981
"Bienvenue sur l'e-Atlas de l'Orontes"

248
00:12:16,181 --> 00:12:19,133
et une image caractérisée
par ses propriétés.

249
00:12:19,993 --> 00:12:22,137
Le chemin d'accès à l'image

250
00:12:22,337 --> 00:12:26,840
a un texte de substitution au cas
où l'image ne serait pas accessible

251
00:12:27,040 --> 00:12:30,248
et la taille en largeur
de cette image.

252
00:12:31,192 --> 00:12:33,269
Les documents HTML devraient donc

253
00:12:33,469 --> 00:12:36,955
débuter et se terminer par
des balises de début et de fin,

254
00:12:37,957 --> 00:12:39,095
balises HTML.

255
00:12:39,689 --> 00:12:42,375
Elles doivent contenir
une section d'entête

256
00:12:42,588 --> 00:12:44,153
et une section de contenu,

257
00:12:44,353 --> 00:12:46,179
avec les balises head et body.

258
00:12:47,383 --> 00:12:50,278
Et finalement on note
que la syntaxe du HTML

259
00:12:50,478 --> 00:12:51,653
n'est pas sensible à la casse,

260
00:12:51,853 --> 00:12:53,059
mais qu'en général

261
00:12:53,259 --> 00:12:56,259
on utilise plus volontiers
des minuscules partout

262
00:12:56,969 --> 00:12:58,362
par confort de lecture.

263
00:12:59,727 --> 00:13:01,069
Et finalement, comme on l'a vu,

264
00:13:01,269 --> 00:13:03,072
l'entête contient des métadonnées,

265
00:13:03,272 --> 00:13:06,494
des références
vers des bibliothèques,

266
00:13:06,694 --> 00:13:08,016
vers des ressources externes,

267
00:13:08,216 --> 00:13:09,982
souvent le titre de la page,

268
00:13:10,468 --> 00:13:11,920
et dans le corps

269
00:13:12,120 --> 00:13:14,503
on va placer les différents 
éléments de contenu,

270
00:13:14,703 --> 00:13:16,153
les différents éléments HTML

271
00:13:16,353 --> 00:13:18,509
que l'on souhaite voir apparaître
sur la page elle-même.

272
00:13:20,491 --> 00:13:22,264
Quelques exemples
de balises courantes

273
00:13:22,464 --> 00:13:26,200
avec les balises de titre
de niveau un à niveau six,

274
00:13:27,084 --> 00:13:29,286
la balise P pour les paragraphes,

275
00:13:30,204 --> 00:13:31,571
et puis une série de balises

276
00:13:31,771 --> 00:13:34,626
qui permettent de renforcer du texte
en italique ou en gras,

277
00:13:35,121 --> 00:13:37,015
le saut de ligne,
la ligne horizontale.

278
00:13:38,776 --> 00:13:41,849
Le lien HyperText avec
la balise simplement A

279
00:13:42,049 --> 00:13:44,079
qui peut pointer
soit vers un site web

280
00:13:44,279 --> 00:13:47,739
lorsque l'on donne
comme paramètre href,

281
00:13:47,939 --> 00:13:50,160
l'adresse, l'url d'un site web,

282
00:13:50,360 --> 00:13:53,107
ici l'exemple du site web
de l'École Polytechnique,

283
00:13:53,732 --> 00:13:55,829
ou vers un élément de la page

284
00:13:56,029 --> 00:13:57,314
situé plus haut ou plus bas

285
00:13:57,514 --> 00:13:59,694
qui est défini par son identifiant,

286
00:13:59,894 --> 00:14:03,461
ici on a l'exemple d'une phrase,
"this is the top",

287
00:14:03,661 --> 00:14:08,556
qui est caractérisée par son ID
qui s'intitule top

288
00:14:08,756 --> 00:14:12,432
et la référence renvoie
à cet emplacement de la page,

289
00:14:12,632 --> 00:14:15,767
avec le caractère dièse
que nous reverrons plus tard

290
00:14:15,967 --> 00:14:20,562
qui cible en fait un objet
qui porte un ID top.

291
00:14:22,544 --> 00:14:24,312
Les balises permettant de définir

292
00:14:24,512 --> 00:14:26,785
des listes
ordonnées avec la balise OL,

293
00:14:26,985 --> 00:14:29,109
non ordonnées avec la balise UL

294
00:14:29,309 --> 00:14:32,078
et la balise LI
pour les éléments de listes.

295
00:14:33,684 --> 00:14:35,820
La balise image
que nous avons déjà vue,

296
00:14:36,020 --> 00:14:38,199
avec pour particularité

297
00:14:38,399 --> 00:14:41,732
le fait que cette balise
ne nécessite pas de balise de fin

298
00:14:42,581 --> 00:14:44,603
et comme autre particularité

299
00:14:44,803 --> 00:14:49,324
que ses deux attributs, la source
et le texte de substitution,

300
00:14:49,524 --> 00:14:51,000
sont des attributs obligatoires.

301
00:14:51,641 --> 00:14:52,530
Et on note au passage

302
00:14:52,730 --> 00:14:54,255
que la valeur des attributs

303
00:14:54,455 --> 00:14:59,858
est caractérisée par un texte pris
entre guillemets ou apostrophes.

304
00:15:01,008 --> 00:15:03,298
La définition des chemins d'accès

305
00:15:03,498 --> 00:15:05,258
suit les règles standards.

306
00:15:05,786 --> 00:15:06,802
Ainsi par exemple

307
00:15:07,772 --> 00:15:10,103
dans le cas d'une source
qui se trouve dans le même dossier

308
00:15:10,303 --> 00:15:11,967
que le fichier HTML,

309
00:15:14,333 --> 00:15:16,249
la source sera
simplement constituée

310
00:15:16,449 --> 00:15:18,077
par le nom du fichier

311
00:15:18,277 --> 00:15:20,093
ou éventuellement par la syntaxe:

312
00:15:20,293 --> 00:15:23,467
. qui désigne le dossier
dans lequel on se trouve,

313
00:15:23,667 --> 00:15:24,884
/le nom du fichier.

314
00:15:25,915 --> 00:15:29,094
Si on a un dossier image

315
00:15:29,294 --> 00:15:31,778
qui est placé au même niveau
que le fichier HTML

316
00:15:31,978 --> 00:15:33,295
sur lequel on travaille,

317
00:15:33,495 --> 00:15:36,171
le lien vers la source prendra
la forme

318
00:15:36,371 --> 00:15:39,721
./dossier image/nom du fichier.

319
00:15:40,745 --> 00:15:43,073
Il peut arriver que le dossier image

320
00:15:43,273 --> 00:15:46,506
soit au même niveau
que le dossier HTML

321
00:15:46,706 --> 00:15:49,054
qui contient le fichier HTML
sur lequel on travaille,

322
00:15:49,599 --> 00:15:52,241
et dans ce cas pour remonter
d'un cran dans la hiérarchie,

323
00:15:52,441 --> 00:15:53,881
on va avoir une syntaxe du type

324
00:15:54,081 --> 00:15:59,386
:/dossier image/fichier 
source.jpeg

325
00:15:59,976 --> 00:16:03,123
Et finalement dans le cas
où l'image serait hébergée

326
00:16:03,323 --> 00:16:05,877
sur un site web distant,

327
00:16:06,476 --> 00:16:10,880
on aurait simplement pour la source
l'url de cette image.

328
00:16:12,709 --> 00:16:13,908
La balise table

329
00:16:14,108 --> 00:16:16,785
qui définit une table
composée donc de lignes,

330
00:16:16,985 --> 00:16:19,953
avec la balise TR pour row,

331
00:16:20,511 --> 00:16:23,068
chaque ligne étant composée
de cellules

332
00:16:24,018 --> 00:16:25,761
décrites par la balise TD.

333
00:16:26,863 --> 00:16:29,822
On peut trouver une liste complète
des balises de HTML

334
00:16:30,711 --> 00:16:33,427
sur le site w3schools,

335
00:16:34,613 --> 00:16:38,333
dans la partie HTML de ce site.

336
00:16:39,762 --> 00:16:41,095
Pour terminer encore,

337
00:16:41,295 --> 00:16:45,063
les éléments neutres constitués
par les balises DIV et SPAN

338
00:16:45,744 --> 00:16:47,618
qui sont en fait simplement
des conteneurs

339
00:16:47,818 --> 00:16:50,792
pour accueillir
d'autres éléments HTML

340
00:16:50,992 --> 00:16:53,172
et qui sont principalement utilisés

341
00:16:53,372 --> 00:16:57,143
pour structurer et styliser
un document HTML.

342
00:16:58,200 --> 00:16:59,358
L'élément DIV

343
00:16:59,558 --> 00:17:01,367
est lui encadré
par des sauts de ligne,

344
00:17:01,567 --> 00:17:03,133
donc il s'agit d'un élément de bloc,

345
00:17:03,333 --> 00:17:08,264
et chaque élément suivant
va se retrouver à la ligne suivante,

346
00:17:08,894 --> 00:17:11,845
alors que l'élément SPAN lui
est un élément en ligne

347
00:17:12,045 --> 00:17:16,027
et peut s'appliquer
à une section de ligne,

348
00:17:16,227 --> 00:17:20,173
avec ici l'exemple,
du moins important,

349
00:17:20,373 --> 00:17:22,413
qui est stylisé en rouge

350
00:17:22,613 --> 00:17:27,323
à l'aide d'un SPAN
dans la phrase titre

351
00:17:27,907 --> 00:17:30,545
et puis le second exemple,

352
00:17:30,745 --> 00:17:33,896
un élément DIV
qui est colorié en gris,

353
00:17:34,096 --> 00:17:37,357
un arrière fond en gris
et puis un texte en bleu,

354
00:17:39,246 --> 00:17:43,336
style qui est appliqué au contenu
de ce conteneur,

355
00:17:43,536 --> 00:17:46,115
donc le titre de niveau h3

356
00:17:46,315 --> 00:17:47,451
et le paragraphe qui suit.

357
00:17:49,295 --> 00:17:51,487
Nous avons vu là
deux exemples de style

358
00:17:51,687 --> 00:17:55,052
appliqués aux contenus
de deux conteneurs,

359
00:17:55,252 --> 00:17:56,939
d'un conteneur SPAN
et d'un conteneur DIV.

360
00:17:58,339 --> 00:17:59,226
De manière générale,

361
00:17:59,426 --> 00:18:01,525
les éléments HTML ont tous
un attribut style

362
00:18:02,679 --> 00:18:05,170
qui est composé en fait
d'une chaîne de caractères

363
00:18:05,816 --> 00:18:07,399
qui liste une série de paramètres

364
00:18:08,006 --> 00:18:09,857
sous une forme nom:valeur

365
00:18:10,057 --> 00:18:12,270
séparé par des point-virgules.

366
00:18:12,664 --> 00:18:15,814
Il existe un très grand nombre
de paramètres de style

367
00:18:16,014 --> 00:18:16,992
que l'on peut utiliser

368
00:18:17,692 --> 00:18:20,126
et l'on peut, comme on le voit ici,

369
00:18:21,023 --> 00:18:25,037
aller piocher là-dedans
pour trouver des détails.

370
00:18:25,561 --> 00:18:27,621
On trouvera une description
assez complète

371
00:18:27,821 --> 00:18:30,626
de nouveau sur le site w3schools,

372
00:18:31,911 --> 00:18:33,701
dans la rubrique CSS.

373
00:18:35,391 --> 00:18:39,772
La méthode qui consiste à définir
le style des éléments HTML

374
00:18:39,972 --> 00:18:44,090
par des paramètres associés
à ces éléments

375
00:18:44,680 --> 00:18:46,433
possède un certain nombre
d'inconvénients :

376
00:18:46,633 --> 00:18:47,641
en premier lieu

377
00:18:47,841 --> 00:18:50,841
le fait que lorsque l'on veut faire
un changement de style,

378
00:18:51,041 --> 00:18:51,879
une mise à jour,

379
00:18:52,079 --> 00:18:54,219
on est obligé d'aller
changer le style

380
00:18:54,419 --> 00:18:56,315
spécifiquement de chacun
des éléments,

381
00:18:56,515 --> 00:18:58,207
ce qui est une tâche
assez fastidieuse,

382
00:18:58,730 --> 00:19:02,312
les éléments de style prennent
de plus en plus de place,

383
00:19:02,537 --> 00:19:06,516
ça alourdit en fait
la lisibilité de la page web

384
00:19:07,383 --> 00:19:08,374
et finalement,

385
00:19:08,574 --> 00:19:10,917
si on répète les mêmes styles
de nombreuses fois,

386
00:19:11,117 --> 00:19:13,591
en fait on augmente
la taille des fichiers,

387
00:19:13,791 --> 00:19:16,376
ce qui peut ralentir en fait
les temps de chargement

388
00:19:16,576 --> 00:19:18,109
des pages web.

389
00:19:19,260 --> 00:19:20,570
C'est pour cette raison

390
00:19:20,770 --> 00:19:22,640
que l'on utilise
des méthodes alternatives

391
00:19:22,840 --> 00:19:24,862
comme on l'illustre au travers
de cet exemple

392
00:19:25,539 --> 00:19:28,371
où l'on a en fait simplement
deux conteneurs,

393
00:19:28,571 --> 00:19:30,133
l'un en-dessus de l'autre,

394
00:19:30,333 --> 00:19:31,677
first div, second div,

395
00:19:32,223 --> 00:19:36,535
l'un qui n'occupe que 70%
de la largeur de la page,

396
00:19:36,735 --> 00:19:39,555
avec une hauteur de 50 pixels
et un fond gris clair

397
00:19:40,083 --> 00:19:44,041
et le second qui a un fond
bleu foncé,

398
00:19:44,254 --> 00:19:45,481
un texte de couleur blanche,

399
00:19:45,681 --> 00:19:46,875
une hauteur de 100 pixels

400
00:19:47,075 --> 00:19:49,344
et qui occupe la moitié
de la largeur disponible.

401
00:19:50,290 --> 00:19:54,059
Alors si l'on veut alléger
un petit peu

402
00:19:54,259 --> 00:19:55,834
la définition des styles,

403
00:19:56,496 --> 00:19:59,901
on va regrouper en fait
les éléments de stylisation

404
00:20:00,101 --> 00:20:04,038
dans une section particulière
de la page,

405
00:20:04,945 --> 00:20:08,297
section que l'on caractérise
par les balises style

406
00:20:09,295 --> 00:20:11,835
et dans laquelle,
on va référencer en fait

407
00:20:12,035 --> 00:20:15,623
les différents objets
auxquels ces styles s'appliquent,

408
00:20:16,184 --> 00:20:17,621
avec le caractère dièse

409
00:20:17,846 --> 00:20:22,415
pour rechercher l'élément
qui porte cet identifiant,

410
00:20:22,615 --> 00:20:23,813
en l'occurrence ici, div1,

411
00:20:24,013 --> 00:20:26,064
donc le style s'applique
à un seul objet,

412
00:20:27,074 --> 00:20:31,935
le caractère point pour appliquer
le style à une classe d'objets

413
00:20:32,135 --> 00:20:36,654
donc on peut, dans les attributs
d'un objet, définir une classe

414
00:20:36,854 --> 00:20:38,546
et on peut avoir plusieurs objets

415
00:20:38,746 --> 00:20:41,155
qui ont la même classe

416
00:20:41,716 --> 00:20:44,727
et donc, que l'on peut styliser
avec un seul style,

417
00:20:45,670 --> 00:20:49,162
et finalement, le type HTML lui-même

418
00:20:49,362 --> 00:20:51,062
avec un style
qui s'appliquerait alors

419
00:20:51,262 --> 00:20:54,984
à l'ensemble des éléments HTML
de ce type-là.

420
00:20:56,368 --> 00:20:58,921
L'étape suivante
de la rationalisation

421
00:20:59,121 --> 00:21:00,097
des éléments de style

422
00:21:00,297 --> 00:21:02,577
consiste à sortir la section style

423
00:21:02,777 --> 00:21:04,412
de l'en-tête de la page HTML

424
00:21:05,085 --> 00:21:08,161
pour regrouper tous les styles
dans une page de style,

425
00:21:08,361 --> 00:21:10,190
donc une page .css,

426
00:21:11,299 --> 00:21:14,538
que l'on référence ensuite
dans la page HTML

427
00:21:15,839 --> 00:21:18,040
avec une balise de type link.

428
00:21:19,003 --> 00:21:20,473
Cette feuille de style que l'on crée

429
00:21:20,673 --> 00:21:23,999
regroupe toutes les informations
stylistiques dans un seul fichier,

430
00:21:24,199 --> 00:21:27,364
un fichier .css,
pour Cascading Style Sheet,

431
00:21:27,785 --> 00:21:30,468
et peut être appliquée à l'ensemble
des pages HTML

432
00:21:30,668 --> 00:21:31,393
d'un site web.

433
00:21:32,669 --> 00:21:34,660
On a ici un exemple

434
00:21:34,860 --> 00:21:37,402
de différents types de stylisation

435
00:21:37,602 --> 00:21:41,579
qui sont appliqués à une seule
et même page,

436
00:21:41,779 --> 00:21:42,829
à un même contenu,

437
00:21:43,029 --> 00:21:47,230
mais avec des mises en formes
diversifiées.

438
00:21:47,430 --> 00:21:50,430


439
00:21:47,430 --> 00:21:50,257
Ca, c'est la page telle qu'elle
se présente sans style aucun

440
00:21:50,846 --> 00:21:53,671
et on retourne à la case départ.

441
00:21:55,753 --> 00:21:58,018
On voit donc que pour rationaliser

442
00:21:58,218 --> 00:22:00,713
la gestion des styles dans une page

443
00:22:00,913 --> 00:22:02,171
ou un ensemble de pages web,

444
00:22:02,371 --> 00:22:05,201
on va commencer par référencer

445
00:22:05,401 --> 00:22:09,175
les différents éléments HTML
des pages web

446
00:22:09,375 --> 00:22:12,106
par leurs identifiants,
leurs classes ou leurs types

447
00:22:12,704 --> 00:22:15,477
et que l'on va regrouper
les informations de style,

448
00:22:15,677 --> 00:22:18,300
soit dans une section particulière

449
00:22:18,500 --> 00:22:22,129
caractérisée par la balise style
dans l'en-tête de la page HTML,

450
00:22:22,664 --> 00:22:27,133
soit dans un fichier séparé
de type .css.

451
00:22:28,137 --> 00:22:30,059
Avec cette façon de procéder,

452
00:22:30,259 --> 00:22:32,841
le style d'un élément
peut être défini en fait

453
00:22:33,041 --> 00:22:33,921
à plusieurs endroits

454
00:22:34,121 --> 00:22:36,909
et s'applique alors
la hiérarchie suivante

455
00:22:37,109 --> 00:22:42,063
où on passe d'abord du style
par défaut de la page web

456
00:22:42,640 --> 00:22:46,447
au style défini dans la page CSS,

457
00:22:46,647 --> 00:22:48,929
puis dans la section de la page HTML

458
00:22:49,129 --> 00:22:51,545
puis comme attribut
de l'objet lui-même.

459
00:22:52,052 --> 00:22:56,715
Et pareillement
dans la hiérarchie de la typologie,

460
00:22:56,915 --> 00:22:58,746
on va aller d'abord du type général

461
00:22:58,946 --> 00:23:01,237
et puis si un style particulier

462
00:23:01,437 --> 00:23:03,464
est défini pour une classe
particulière,

463
00:23:03,630 --> 00:23:05,624
c'est la classe qui va prendre
le dessus

464
00:23:05,824 --> 00:23:09,073
et dans le cas où l'objet même
a un style défini,

465
00:23:09,273 --> 00:23:11,898
c'est le style de l'objet
qui va s'appliquer.

466
00:23:21,970 --> 00:23:23,316
Nous avons donc vu

467
00:23:23,516 --> 00:23:24,691
les éléments de base

468
00:23:24,891 --> 00:23:26,768
de la construction
et de la stylisation

469
00:23:27,089 --> 00:23:28,066
des pages web.

470
00:23:28,266 --> 00:23:30,871
Il nous reste encore à voir

471
00:23:31,071 --> 00:23:35,256
comment on va pouvoir intégrer
dans ces pages web

472
00:23:35,456 --> 00:23:36,839
des éléments de cartographie

473
00:23:37,039 --> 00:23:38,853
et faire en sorte
que cette cartographie

474
00:23:39,053 --> 00:23:40,287
puisse être interactive.

475
00:23:40,820 --> 00:23:43,412
Nous avons vu que le langage HTML

476
00:23:43,612 --> 00:23:44,440
est quand même limité

477
00:23:44,640 --> 00:23:47,737
et ne suffira pas pour
ce type d'applications

478
00:23:47,937 --> 00:23:48,924
un peu plus complexes.

479
00:23:50,319 --> 00:23:52,173
Les possibilités
qui s'offrent à nous,

480
00:23:52,373 --> 00:23:54,147
c'est de compléter en fait le HTML,

481
00:23:54,347 --> 00:23:56,181
ce qui peut se faire
soit du côté client

482
00:23:56,970 --> 00:24:01,042
en ajoutant du code exécutable
à l'intérieur même de la page HTML,

483
00:24:01,633 --> 00:24:04,780
ce code peut prendre la forme
de Javascript,

484
00:24:04,980 --> 00:24:06,752
de vbscript ou du dhtml,

485
00:24:07,917 --> 00:24:10,431
par du code exécutable à télécharger

486
00:24:10,631 --> 00:24:13,364
et à utiliser avec une page HTML,

487
00:24:13,564 --> 00:24:15,138
il s'agit alors de scripts

488
00:24:15,338 --> 00:24:17,227
dans différents langages
de programmation,

489
00:24:17,427 --> 00:24:19,089
du Python par exemple,

490
00:24:19,721 --> 00:24:23,331
des composants activeX
ou des applets Java.

491
00:24:23,531 --> 00:24:26,792
Il existe une grande variété

492
00:24:26,992 --> 00:24:31,153
de produits disponibles
pour ce genre de fonctions

493
00:24:32,215 --> 00:24:34,633
et par des interfaces applications

494
00:24:34,833 --> 00:24:37,548
quasiment complets, spécifiques,

495
00:24:37,748 --> 00:24:39,245
que l'on doit installer
sur le client,

496
00:24:39,837 --> 00:24:43,243
ce que l'on désigne généralement
sous le nom de plug-in. 

497
00:24:47,038 --> 00:24:48,551
Les possibilités peuvent également

498
00:24:48,751 --> 00:24:50,560
être enrichies du côté serveur

499
00:24:50,760 --> 00:24:54,831
en ajoutant des exécutables
ou des librairies DLL,

500
00:24:55,535 --> 00:24:58,483
voire même des scripts
qui seraient exécutés sur le serveur

501
00:24:58,683 --> 00:25:02,107
et dont la fonction est en fait
de créer de manière dynamique

502
00:25:02,307 --> 00:25:04,952
les pages HTML qui sont
renvoyées au client.

503
00:25:05,589 --> 00:25:09,634
Et là, on utilise beaucoup le
common gateway interface, le CGI,

504
00:25:10,780 --> 00:25:13,559
ou alors par du code exécutable

505
00:25:13,759 --> 00:25:16,347
qui est intégré à la page HTML

506
00:25:16,560 --> 00:25:19,306
mais qui est exécuté
au niveau du serveur.

507
00:25:19,929 --> 00:25:23,961
L'exemple le plus fréquemment
utilisé est celui du PHP,

508
00:25:24,161 --> 00:25:26,388
donc le code PHP qui se trouve
dans la page

509
00:25:26,588 --> 00:25:32,060
en l'occurrence une page PHP
envoyée par le client au serveur.

510
00:25:32,260 --> 00:25:35,361
Le serveur doit disposer
d'un interpréteur PHP

511
00:25:35,561 --> 00:25:36,970
pour exécuter ce code,

512
00:25:37,170 --> 00:25:39,363
fabriquer la page HTML

513
00:25:39,563 --> 00:25:40,802
et la renvoyer au client.

514
00:25:42,018 --> 00:25:44,463
Alors, nous n'avons pas le temps
de passer en revue

515
00:25:44,663 --> 00:25:45,704
de manière exhaustive

516
00:25:45,916 --> 00:25:49,310
toutes ces différentes formes
d'enrichissement du HTML

517
00:25:49,510 --> 00:25:51,979
et nous allons nous concentrer
dans la suite du cours

518
00:25:52,179 --> 00:25:56,941
sur la solution Javascript,

519
00:25:57,141 --> 00:25:58,934
donc du code exécutable Javascript

520
00:25:59,134 --> 00:26:03,429
inséré dans la page HTML
et exécuté du côté client.

521
00:26:04,999 --> 00:26:06,199
Le Javascript a,

522
00:26:06,412 --> 00:26:07,820
entre autres particularités,

523
00:26:08,020 --> 00:26:10,656
le fait d'être
un langage fonctionnel,

524
00:26:10,856 --> 00:26:12,933
c'est-à-dire que les fonctions
sont des objets.

525
00:26:13,490 --> 00:26:15,277
Ici, on a l'exemple d'une fonction

526
00:26:15,477 --> 00:26:17,164
de deux paramètres a et b

527
00:26:17,364 --> 00:26:20,631
qui renvoient le produit
de ces deux variables.

528
00:26:21,613 --> 00:26:23,529
Cette fonction peut être définie

529
00:26:23,729 --> 00:26:25,909
dans une variable elle-même

530
00:26:26,109 --> 00:26:27,476
qui s'appellerait myFunction

531
00:26:27,676 --> 00:26:30,560
et on peut utiliser cette variable

532
00:26:30,760 --> 00:26:32,452
pour exécuter la fonction

533
00:26:32,652 --> 00:26:35,329
donc, dans le calcul
de quatre fois trois.

534
00:26:36,465 --> 00:26:38,410
Le Javascript permet d'accéder

535
00:26:38,610 --> 00:26:40,596
aux éléments de la page HTML

536
00:26:41,831 --> 00:26:44,240
via le Document Object Model,
ou DOM,

537
00:26:44,440 --> 00:26:46,676
qui comme on le voit
sur cette illustration

538
00:26:47,349 --> 00:26:50,626
permet d'accéder alors
à la page HTML

539
00:26:50,826 --> 00:26:51,945
qui est l'élément racine

540
00:26:52,145 --> 00:26:53,194
et puis à ses composants,

541
00:26:53,394 --> 00:26:55,121
l'en-tête et le corps

542
00:26:55,321 --> 00:26:58,449
et dans l'en-tête, le titre,
le texte du titre

543
00:26:58,649 --> 00:27:03,340
ou dans le corps, les différents
éléments HTML qui le composent.

544
00:27:04,900 --> 00:27:08,260
Il est également possible d'accéder
aux éléments du navigateur

545
00:27:08,460 --> 00:27:11,368
via le BOM, Browser Object Model,

546
00:27:11,568 --> 00:27:14,547
qui permet d'accéder en fait
à la fenêtre,

547
00:27:14,747 --> 00:27:16,693
à l'historique du navigateur,

548
00:27:16,918 --> 00:27:19,598
au type de navigateur, etc.

549
00:27:21,072 --> 00:27:22,086
A nouveau, si vous voulez

550
00:27:22,286 --> 00:27:24,803
approfondir vos connaissances
sur le Javascript,

551
00:27:25,003 --> 00:27:27,270
je vous recommande de commencer

552
00:27:27,470 --> 00:27:29,756
par consulter le site w3schools

553
00:27:30,510 --> 00:27:35,301
qui propose toutes sortes
d'exercices dans ce domaine.

554
00:27:36,512 --> 00:27:38,260
Nous allons nous intéresser
maintenant

555
00:27:38,460 --> 00:27:42,234
à la manière d'intégrer
du Javascript dans une page HTML

556
00:27:43,810 --> 00:27:45,875
avec pour commencer
un exemple très simple

557
00:27:46,075 --> 00:27:49,252
d'un bouton dans une page HTML

558
00:27:49,452 --> 00:27:52,000
et on aimerait que lorsque
l'on clique sur ce bouton,

559
00:27:52,206 --> 00:27:57,594
s'affichent le jour,
la date, l'heure, etc.

560
00:27:58,598 --> 00:28:02,224
La syntaxe du fichier HTML
est simple,

561
00:28:02,424 --> 00:28:05,184
donc, ici, pas d'en-tête,
juste le corps,

562
00:28:05,384 --> 00:28:07,514
avec dans le corps,
le titre, le bouton

563
00:28:07,714 --> 00:28:12,295
et puis un paragraphe avec l'ID demo

564
00:28:12,495 --> 00:28:15,611
qui doit recevoir en fait

565
00:28:16,330 --> 00:28:21,587
le texte de la date et de l'heure
généré par la fonction.

566
00:28:22,451 --> 00:28:24,741
Et on voit que dans 
les attributs du bouton,

567
00:28:24,941 --> 00:28:26,710
on a une propriété onclick,

568
00:28:26,910 --> 00:28:31,781
donc un événement
qui va exécuter la fonction

569
00:28:31,981 --> 00:28:35,683
qui est décrite entre guillemets.

570
00:28:36,270 --> 00:28:39,378
Donc, on va partir de document
qui est donc le DOM,

571
00:28:40,477 --> 00:28:43,529
on va rechercher l'objet
qui s'appelle demo,

572
00:28:43,729 --> 00:28:45,168
dont l'ID est demo,

573
00:28:45,368 --> 00:28:49,152
et puis, on va assigner
au contenu HTML de cet objet

574
00:28:50,039 --> 00:28:54,795
la fonction Javascript date
qui renvoie à la date courante.

575
00:28:55,762 --> 00:28:57,626
Tout comme pour les éléments
de style,

576
00:28:57,826 --> 00:28:59,901
nous avons aussi
la possibilité ensuite

577
00:29:00,101 --> 00:29:03,620
d'extraire l'ensemble
du code Javascript

578
00:29:03,820 --> 00:29:05,672
d'une page HTML

579
00:29:05,872 --> 00:29:08,106
ou d'une série de pages HTML

580
00:29:09,202 --> 00:29:14,105
pour les regrouper dans une page js,

581
00:29:14,305 --> 00:29:16,030
Javascript,

582
00:29:16,692 --> 00:29:18,242
et puis de référencer ensuite

583
00:29:18,442 --> 00:29:20,435
ces différentes fonctions
dans l'en-tête

584
00:29:20,979 --> 00:29:22,895
avec une balise script

585
00:29:23,095 --> 00:29:26,735
qui pointe sur le fichier Javascript

586
00:29:28,162 --> 00:29:32,864
tout en gardant au niveau de
l'événement, onclick sur le bouton,

587
00:29:33,064 --> 00:29:34,960
l'événement myFunction

588
00:29:35,160 --> 00:29:37,991
qui est défini dans la page
myScript.js.

589
00:29:38,999 --> 00:29:40,024
Ici à nouveau,

590
00:29:40,224 --> 00:29:42,867
ce procédé permet de simplifier

591
00:29:43,067 --> 00:29:45,652
et de faciliter la lecture
de la page HTML

592
00:29:45,852 --> 00:29:47,896
et de regrouper tous les éléments
Javascript

593
00:29:48,096 --> 00:29:49,976
à un même endroit.

594
00:29:51,396 --> 00:29:54,224
L'intégration
d'une cartographie interactive

595
00:29:54,424 --> 00:29:55,291
dans une page web

596
00:29:55,491 --> 00:29:57,543
en utilisant du Javascript

597
00:29:57,743 --> 00:29:59,994
va donc passer par l'utilisation

598
00:30:00,194 --> 00:30:02,078
de librairies SIG Javascript.

599
00:30:03,121 --> 00:30:05,488
Il existe un grand nombre
de ces librairies

600
00:30:05,688 --> 00:30:10,114
parmi lesquelles en particulier
Openlayers, Leaflet,

601
00:30:10,844 --> 00:30:13,154
la librairie Mapstraction,

602
00:30:13,979 --> 00:30:15,093
Polymaps,

603
00:30:16,605 --> 00:30:17,949
la librairie Cesium

604
00:30:18,149 --> 00:30:21,247
pour des représentations
plutôt tridimensionnelles,

605
00:30:22,179 --> 00:30:23,320
etc.

606
00:30:28,420 --> 00:30:30,365
Au delà de ces librairies
open source,

607
00:30:30,565 --> 00:30:33,083
on trouve aussi
une série de librairies

608
00:30:33,283 --> 00:30:34,755
qui sont en général libres,

609
00:30:35,287 --> 00:30:37,163
fournies par les grands producteurs

610
00:30:37,363 --> 00:30:40,644
que sont Google, Microsoft,
ESRI, etc.

611
00:30:41,585 --> 00:30:43,286
C'est des librairies qui sont libres

612
00:30:43,486 --> 00:30:45,028
mais qui ne sont pas open source.

613
00:30:54,603 --> 00:30:56,213
Dans cette dernière partie du cours,

614
00:30:56,413 --> 00:30:58,489
nous allons démontrer

615
00:30:58,689 --> 00:30:59,692
comment utiliser

616
00:30:59,892 --> 00:31:03,930
une de ces librairies
JavaScript cartographiques,

617
00:31:04,189 --> 00:31:06,176
en l'occurrence la librairie
Openlayers,

618
00:31:06,376 --> 00:31:08,724
pour fabriquer une page HTML

619
00:31:08,924 --> 00:31:13,950
qui contient
une carte géographique interactive.

620
00:31:14,479 --> 00:31:16,745
On commence donc par
créer un fichier

621
00:31:16,945 --> 00:31:21,114
intitulé Openlayers_Seychelles.html

622
00:31:21,706 --> 00:31:24,454
dans lequel on va retrouver
les éléments de base,

623
00:31:24,654 --> 00:31:27,072
donc l'en-tête et le corps,

624
00:31:27,272 --> 00:31:29,659
avec un élément
que l'on a encore pas vu

625
00:31:29,859 --> 00:31:34,426
qui est la déclaration de type
!DOCTYPE html

626
00:31:34,958 --> 00:31:38,535
qui en fait se substitue
aux balises html.

627
00:31:39,855 --> 00:31:43,194
On ajoute ensuite dans l'en-tête
un titre,

628
00:31:44,287 --> 00:31:47,096
puis toujours dans l'en-tête,
deux références,

629
00:31:47,296 --> 00:31:51,260
une première référence
à la librairie Openlayers,

630
00:31:51,820 --> 00:31:56,714
et un lien vers un fichier CSS,

631
00:31:56,914 --> 00:31:58,593
un fichier de style par défaut

632
00:31:59,629 --> 00:32:03,331
qui accompagne
la librairie Openlayers.

633
00:32:04,811 --> 00:32:08,618
On ajoute ensuite
dans le corps de la page

634
00:32:08,818 --> 00:32:13,374
un conteneur
auquel on assigne l'IDMap

635
00:32:15,009 --> 00:32:17,618
et on définit
quelques éléments de style

636
00:32:17,818 --> 00:32:19,500
dans une section style de l'en-tête

637
00:32:20,100 --> 00:32:24,099
avec tout d'abord
pour l'ensemble de la page HTML

638
00:32:24,299 --> 00:32:26,930
et l'ensemble du corps,
donc du body,

639
00:32:27,130 --> 00:32:30,228
la volonté d'occuper
tout l'espace disponible,

640
00:32:30,428 --> 00:32:32,839
donc 100% de la hauteur
et 100% de la largeur,

641
00:32:33,922 --> 00:32:37,747
et pour l'élément MAP,
également 100 % de la hauteur

642
00:32:38,291 --> 00:32:42,799
et puis on donne une couleur de fond
en gris clair

643
00:32:42,999 --> 00:32:48,577
pour pouvoir s'assurer
que cet élément HTML carte,

644
00:32:49,168 --> 00:32:50,002
ce conteneur,

645
00:32:50,202 --> 00:32:52,579
va bien occuper
tout l'espace disponible,

646
00:32:52,779 --> 00:32:54,361
ce que l'on peut vérifier

647
00:32:54,561 --> 00:32:57,977
en ouvrant le fichier
dans un navigateur,

648
00:32:58,177 --> 00:32:59,856
en l'occurrence ici, Google Chrome.

649
00:33:00,423 --> 00:33:02,611
Et on voit qu'effectivement,

650
00:33:02,811 --> 00:33:06,793
le composant, le conteneur MAP,

651
00:33:06,993 --> 00:33:08,747
occupe bien
tout l'espace disponible,

652
00:33:08,947 --> 00:33:11,945
à l'exception d'une petite marge
en haut et à gauche.

653
00:33:13,764 --> 00:33:15,930
On ajoute ensuite une section

654
00:33:16,130 --> 00:33:18,350
pour héberger le code JavaScript

655
00:33:18,550 --> 00:33:20,889
avec les balises script

656
00:33:21,953 --> 00:33:23,693
et dans cette section script,

657
00:33:23,893 --> 00:33:28,081
on va ajouter le code
qui permet de créer l'objet carte,

658
00:33:28,281 --> 00:33:30,398
donc on crée un nouvel objet OL

659
00:33:30,598 --> 00:33:32,229
pour openlayers .map

660
00:33:32,429 --> 00:33:35,203
donc un objet MAP
de la librairie Openlayers

661
00:33:35,954 --> 00:33:38,744
que l'on assigne à la variable map

662
00:33:38,944 --> 00:33:40,754
et cet objet, dans ses propriétés,

663
00:33:40,954 --> 00:33:43,368
on dit que la cible que l'on vise,

664
00:33:43,568 --> 00:33:45,351
c'est le conteneur
qui s'appelle map,

665
00:33:45,551 --> 00:33:49,559
donc on va mettre
cet élément cartographique

666
00:33:49,759 --> 00:33:52,699
dans le conteneur,
dans le div qui est l'IDMap

667
00:33:53,290 --> 00:33:56,088
et puis on définit une vue
pour cette carte,

668
00:33:56,288 --> 00:33:57,841
donc on crée une nouvelle vue

669
00:33:58,041 --> 00:34:05,123
qui est centrée sur le point
latitude, longitude 55 47 et -4 67

670
00:34:05,323 --> 00:34:07,923
qui correspond à peu près
au centre de l'île de Mahé

671
00:34:08,459 --> 00:34:10,476
et cette vue,
on lui définit également,

672
00:34:10,707 --> 00:34:13,966
on peut lui définir comme attribut
un niveau de zoom,

673
00:34:14,602 --> 00:34:16,078
ici la valeur 12.

674
00:34:17,626 --> 00:34:20,367
Pour que quelque chose
soit affiché dans cette carte

675
00:34:20,768 --> 00:34:23,536
on va donc ajouter une couche,

676
00:34:23,736 --> 00:34:26,613
en l'occurrence
la couche OpenStreetMap.

677
00:34:27,196 --> 00:34:30,495
Donc on crée
une nouvelle couche de type tuile

678
00:34:30,695 --> 00:34:36,029
avec comme source OSM,

679
00:34:36,229 --> 00:34:38,261
qui est la source OpenStreetMap

680
00:34:38,814 --> 00:34:41,864
et on ajoute cette couche OSM layer

681
00:34:42,064 --> 00:34:43,701
à l'objet map

682
00:34:43,901 --> 00:34:46,111
qui est donc la carte Openlayers.

683
00:34:47,605 --> 00:34:48,686
Et on peut constater

684
00:34:48,886 --> 00:34:51,929
que si l'on ouvre
maintenant ce fichier HTML

685
00:34:52,164 --> 00:34:54,697
dans un navigateur
comme Google Chrome,

686
00:34:55,319 --> 00:34:58,907
on a la carte OpenStreetMap
des Seychelles,

687
00:34:59,107 --> 00:34:59,804
de l'île de Mahé,

688
00:35:00,004 --> 00:35:02,001
qui s'affiche dans la page web.

689
00:35:03,228 --> 00:35:05,056
Pour ajouter du contenu

690
00:35:05,256 --> 00:35:07,033
et de l'interactivité à cette carte,

691
00:35:07,233 --> 00:35:10,948
il va falloir maintenant développer
un petit peu le code JavaScript,

692
00:35:11,714 --> 00:35:13,868
raison pour laquelle
on va sortir en fait

693
00:35:14,068 --> 00:35:16,070
ce script de la page web

694
00:35:16,270 --> 00:35:19,543
pour l'héberger
dans un fichier JavaScript

695
00:35:19,743 --> 00:35:23,566
que l'on va intituler
Openlayers_Seychelles.js

696
00:35:24,566 --> 00:35:26,931
et on va référencer ce fichier

697
00:35:27,131 --> 00:35:29,369
dans l'en-tête de la page.

698
00:35:30,974 --> 00:35:34,486
En reprenant ce code JavaScript,

699
00:35:34,686 --> 00:35:35,976
on va commencer par séparer

700
00:35:36,176 --> 00:35:38,403
la définition de la variable map

701
00:35:38,603 --> 00:35:40,870
de l'utilisation de cette variable

702
00:35:41,070 --> 00:35:45,628
pour lui assigner la nouvelle carte
Openlayers que l'on a créée,

703
00:35:46,707 --> 00:35:48,307
ce qui permet de mettre

704
00:35:48,507 --> 00:35:50,903
le code de création de la carte

705
00:35:51,103 --> 00:35:53,667
et d'ajout de la couche
OpenStreetMap

706
00:35:54,303 --> 00:35:56,878
dans une fonction qui sera exécutée

707
00:35:57,078 --> 00:35:59,798
une seule fois
au moment du chargement de la page,

708
00:35:59,998 --> 00:36:02,152
une fois que la page est chargée
on exécute le code

709
00:36:02,352 --> 00:36:03,450
qui ajoute la carte,

710
00:36:03,650 --> 00:36:05,779
qui ajoute la couche OpenStreetMap

711
00:36:05,979 --> 00:36:09,741
avec les mots-clés "document ready",
etc.

712
00:36:10,585 --> 00:36:13,229
A noter au passage que le symbole $

713
00:36:13,429 --> 00:36:16,706
se réfère à une librairie
de JavaScript

714
00:36:16,906 --> 00:36:17,992
qui s'appelle jQuery,

715
00:36:18,759 --> 00:36:21,241
librairie qu'il a fallu pour pouvoir

716
00:36:21,441 --> 00:36:23,803
utiliser valablement ce symbole,

717
00:36:24,859 --> 00:36:27,482
librairie qu'il a fallu ajouter
dans la page HTML,

718
00:36:27,682 --> 00:36:29,318
dans les références.

719
00:36:29,917 --> 00:36:31,273
Supposons maintenant

720
00:36:31,473 --> 00:36:35,454
que l'on veuille
enrichir un petit peu notre carte,

721
00:36:35,654 --> 00:36:38,535
en ajoutant par exemple
les districts des Seychelles

722
00:36:38,735 --> 00:36:42,704
que l'on a stocké ici
dans un fichier JSON

723
00:36:42,904 --> 00:36:47,577
qui se trouve, on le voit par l'URL,
dans un dossier GeoJSON

724
00:36:47,777 --> 00:36:49,384
qui se trouve lui-même

725
00:36:49,584 --> 00:36:53,921
au même niveau que notre fichier
JavaScript et notre page HTML.

726
00:36:54,634 --> 00:36:57,464
Donc on crée une couche vecteur,

727
00:36:57,664 --> 00:37:00,825
avec un style
qu'il va falloir définir,

728
00:37:01,025 --> 00:37:04,009
et on définit comme source
de cette couche vecteur

729
00:37:04,209 --> 00:37:05,625
ce fichier GeoJSON,

730
00:37:06,180 --> 00:37:08,175
et on ajoute la couche à la carte.

731
00:37:09,282 --> 00:37:12,520
On définit donc ici la symbologie

732
00:37:12,720 --> 00:37:14,333
pour la couche des districts

733
00:37:14,533 --> 00:37:16,200
en créant un nouveau style

734
00:37:16,400 --> 00:37:18,885
composé d'un remplissage,

735
00:37:19,085 --> 00:37:20,656
donc un objet remplissage

736
00:37:20,856 --> 00:37:24,462
créé à partir d'une couleur
et d'une transparence,

737
00:37:25,049 --> 00:37:27,143
et un objet stroke

738
00:37:27,343 --> 00:37:29,252
qui définit le style de trait

739
00:37:29,465 --> 00:37:31,395
pour la bordure des polygones

740
00:37:31,778 --> 00:37:34,195
basé également sur une couleur,
une transparence,

741
00:37:34,395 --> 00:37:35,427
et sur une largeur.

742
00:37:36,646 --> 00:37:38,955
Alors on peut faire ensuite
la même chose

743
00:37:39,155 --> 00:37:41,095
pour ajouter la couche des routes,

744
00:37:41,295 --> 00:37:42,687
la couche des hôtels

745
00:37:43,289 --> 00:37:46,626
et puis si on veut vraiment
ajouter de l'interactivité,

746
00:37:47,503 --> 00:37:49,564
on pourrait écrire le code,

747
00:37:49,764 --> 00:37:52,162
on ne va pas le faire ici parce que
ça devient un peu compliqué

748
00:37:52,362 --> 00:37:54,334
mais on pourrait écrire
le code qui permet,

749
00:37:54,534 --> 00:37:57,316
lorsque l'on clique sur un district
par exemple

750
00:37:57,516 --> 00:37:58,606
ou sur un hôtel

751
00:37:58,806 --> 00:38:00,213
d'avoir un petite fenêtre pop-up

752
00:38:00,413 --> 00:38:01,650
qui s'ouvre dans la page web

753
00:38:01,850 --> 00:38:04,203
et qui donne la liste
des propriétés,

754
00:38:04,403 --> 00:38:05,872
des attributs de l'hôtel,

755
00:38:06,072 --> 00:38:07,511
du district, etc.

756
00:38:08,616 --> 00:38:10,471
Mais pour que tout cela fonctionne,

757
00:38:10,671 --> 00:38:16,232
il faut encore rendre
ces fichiers JSON accessibles,

758
00:38:16,432 --> 00:38:21,292
donc il faut pouvoir les exposer
sur un serveur,

759
00:38:21,492 --> 00:38:24,336
en l'occurrence on peut se contenter
d'un simple serveur statique

760
00:38:24,536 --> 00:38:27,422
qui ne va pas faire de manipulations

761
00:38:27,622 --> 00:38:29,372
et qui va simplement
servir ces fichiers.

762
00:38:30,012 --> 00:38:32,695
Serveur statique que l'on peut créer

763
00:38:32,895 --> 00:38:34,320
avec la librairie node.js,

764
00:38:34,520 --> 00:38:35,850
donc également du JavaScript,

765
00:38:36,807 --> 00:38:39,741
dans un fichier
qu'on va appeler server.js

766
00:38:40,487 --> 00:38:42,054
et on voit qu'en fait,

767
00:38:42,254 --> 00:38:45,108
en cinq lignes de code,
on crée ce serveur.

768
00:38:45,308 --> 00:38:48,628
On utilise une variante de node

769
00:38:48,828 --> 00:38:50,181
qui s'appelle Node Express

770
00:38:50,394 --> 00:38:55,661
qui est une forme simplifiée
de serveur Node

771
00:38:57,273 --> 00:38:58,919
que l'on définit en fait

772
00:39:00,356 --> 00:39:04,005
le dossier public dans lequel
se trouvent les fichiers

773
00:39:04,205 --> 00:39:05,838
que l'on va rendre accessible,

774
00:39:06,050 --> 00:39:07,313
qui est en l'occurrence

775
00:39:08,271 --> 00:39:11,966
le dossier dans lequel se trouve
ce fichier serveur.js

776
00:39:12,610 --> 00:39:16,284
et toute l'arborescence
qui est située en aval.

777
00:39:17,463 --> 00:39:22,504
On va dire que le serveur
doit écouter le port 3000

778
00:39:23,082 --> 00:39:25,326
et puis envoyer un message
à la console

779
00:39:25,526 --> 00:39:27,320
pour dire que le serveur a démarré

780
00:39:27,520 --> 00:39:28,934
et qu'il écoute le port 3000.

781
00:39:29,663 --> 00:39:31,677
Donc si on jette un petit coup d’œil

782
00:39:31,877 --> 00:39:34,020
sur l'arborescence
des fichiers que l'on a créé,

783
00:39:34,220 --> 00:39:38,818
on a donc dans le dossier
Openlayers_Samples

784
00:39:39,018 --> 00:39:42,485
ces trois fichiers HTML JavaScript

785
00:39:42,685 --> 00:39:45,384
pour la page web elle-même

786
00:39:45,584 --> 00:39:47,876
server.js pour le serveur,

787
00:39:48,076 --> 00:39:51,623
les différents modules
de la librairie node

788
00:39:52,304 --> 00:39:55,042
qui vont permettre
de faire tourner ce serveur,

789
00:39:55,242 --> 00:39:57,162
et dans un dossier GeoJSON,

790
00:39:57,362 --> 00:40:00,444
on va trouver les trois fichiers
contenant les districts,

791
00:40:00,644 --> 00:40:02,733
les hôtels et les routes
des Seychelles.

792
00:40:03,383 --> 00:40:05,585
On voit ici que l'étape suivante

793
00:40:05,785 --> 00:40:08,154
consiste,
dans une fenêtre terminale,

794
00:40:08,367 --> 00:40:10,093
à descendre dans l'arborescence

795
00:40:11,118 --> 00:40:13,935
jusqu'à ce dossier
Openlayers_Samples

796
00:40:14,135 --> 00:40:18,382
et puis d'envoyer la commande,
node serveur.js

797
00:40:18,806 --> 00:40:20,765
ce qui va lancer le serveur node

798
00:40:20,965 --> 00:40:22,379
et on a le message

799
00:40:23,459 --> 00:40:25,063
comme quoi ce serveur a démarré

800
00:40:25,263 --> 00:40:27,971
et qu'il écoute les requêtes
sur le port 3000.

801
00:40:29,103 --> 00:40:30,934
Pour charger notre page web,

802
00:40:31,134 --> 00:40:35,879
il faut donc ouvrir
un navigateur Internet

803
00:40:36,079 --> 00:40:40,246
et comme url taper localhost

804
00:40:40,446 --> 00:40:42,104
puisqu'on est sur une machine locale,

805
00:40:42,304 --> 00:40:45,978
:3000 pour rechercher le port 3000,

806
00:40:46,178 --> 00:40:48,412
donc le serveur node
que l'on vient de démarrer

807
00:40:49,048 --> 00:40:54,947
et puis accéder à la page
Openlayers_Seychelles.html

808
00:40:55,147 --> 00:40:58,137
qui va exécuter
le code JavaScript associé,

809
00:40:58,337 --> 00:41:00,983
qui va lui-même aller chercher
les fichiers GeoJSON

810
00:41:01,183 --> 00:41:02,962
et qui va les ajouter sur la carte,

811
00:41:03,162 --> 00:41:07,694
ce qui fait que l'on retrouve ici
en fait les districts,

812
00:41:07,894 --> 00:41:09,433
les routes et les hôtels.

813
00:41:10,163 --> 00:41:11,611
Et comme dit tout à l'heure,

814
00:41:11,811 --> 00:41:14,222
on peut développer ce code

815
00:41:14,422 --> 00:41:17,693
pour ajouter de l'interactivité
à cette carte

816
00:41:18,448 --> 00:41:22,348
sous toute sorte de forme.

817
00:41:32,442 --> 00:41:33,742
Voilà !
Dans cette leçon,

818
00:41:33,942 --> 00:41:36,125
nous avons donc vu divers aspects

819
00:41:36,325 --> 00:41:38,669
liés à l'architecture client/serveur

820
00:41:38,869 --> 00:41:39,790
d'abord de façon générale

821
00:41:39,990 --> 00:41:42,493
puis spécifiquement
dans le monde SIG,

822
00:41:43,137 --> 00:41:46,035
avec notamment
les protocoles d'échange

823
00:41:46,235 --> 00:41:49,384
basés sur le logiciel ODBC

824
00:41:49,584 --> 00:41:52,398
qui permet en fait
de transmettre des requêtes SQL

825
00:41:52,598 --> 00:41:54,970
du client vers le serveur

826
00:41:55,170 --> 00:41:56,257
et ensuite de récupérer

827
00:41:56,457 --> 00:41:59,141
les données sélectionnées
au niveau du serveur de données

828
00:41:59,812 --> 00:42:01,798
et le protocole HTTP

829
00:42:01,998 --> 00:42:05,534
qui permet d'envoyer
des requêtes HTTP paramétrées

830
00:42:05,734 --> 00:42:07,192
soit vers un serveur HTTP

831
00:42:07,392 --> 00:42:11,492
soit vers des géoservices
type WMS, WFS.

832
00:42:13,056 --> 00:42:16,109
Nous avons également ensuite vu
de manière un peu plus spécifique

833
00:42:16,309 --> 00:42:20,544
les bases de construction
d'une page HTML

834
00:42:20,744 --> 00:42:23,807
et puis comment on pouvait enrichir
le HTML

835
00:42:24,007 --> 00:42:25,351
avec du JavaScript

836
00:42:25,551 --> 00:42:29,101
pour fabriquer
des interfaces web SIG.

837
00:42:29,820 --> 00:42:30,560
Et finalement,

838
00:42:30,760 --> 00:42:32,152
nous avons vu un petit exemple

839
00:42:32,352 --> 00:42:33,634
de comment concrètement

840
00:42:33,834 --> 00:42:36,799
on pouvait développer
le code JavaScript

841
00:42:36,986 --> 00:42:38,097
pour aller en direction

842
00:42:38,297 --> 00:42:41,259
d'une cartographie interactive
sur le web.

