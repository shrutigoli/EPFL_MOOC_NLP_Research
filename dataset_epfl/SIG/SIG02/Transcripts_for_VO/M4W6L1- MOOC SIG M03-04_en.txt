1
00:00:18,741 --> 00:00:19,609
So here I am again

2
00:00:19,809 --> 00:00:21,225
and it is with great pleasure

3
00:00:21,425 --> 00:00:22,964
that I see you again for this lesson

4
00:00:23,164 --> 00:00:25,136
which will focus on certain aspects

5
00:00:25,336 --> 00:00:28,481
of the relation between mapping
and the Internet.

6
00:00:29,659 --> 00:00:31,705
This is a topical issue

7
00:00:31,905 --> 00:00:33,453
since more and more often,

8
00:00:33,648 --> 00:00:35,573
computer applications,

9
00:00:35,753 --> 00:00:37,186
and in particular applications

10
00:00:37,386 --> 00:00:40,069
in the world of geographic 
information systems,

11
00:00:40,455 --> 00:00:41,787
rely on the Internet

12
00:00:41,987 --> 00:00:44,781
to offer multi-platform solutions,

13
00:00:44,981 --> 00:00:48,307
usable as much on desktop computers

14
00:00:48,507 --> 00:00:50,176
than on tablets or smartphones

15
00:00:50,683 --> 00:00:53,915
and which allow to use different types

16
00:00:54,115 --> 00:00:55,329
of operating system,

17
00:00:55,513 --> 00:00:56,907
whether it is in Windows,

18
00:00:57,107 --> 00:01:00,225
MacOS, Linux, Android, and
so on.

19
00:01:02,246 --> 00:01:03,721
The objective of this lesson

20
00:01:03,921 --> 00:01:07,723
is to discuss generally,

21
00:01:07,923 --> 00:01:09,331
and inevitably a little superficially,

22
00:01:09,531 --> 00:01:10,917
the theme of relations

23
00:01:11,117 --> 00:01:14,117
between geographic information 
systems and the Internet,

24
00:01:14,653 --> 00:01:19,177
then talk in more details about 
the theme of integration

25
00:01:19,377 --> 00:01:22,207
of dynamic and interactive
mapping elements

26
00:01:22,407 --> 00:01:23,433
in web pages,

27
00:01:23,633 --> 00:01:27,030
which is generally called GIS web.

28
00:01:27,524 --> 00:01:29,006
At the end of the lesson,

29
00:01:29,206 --> 00:01:31,147
you should be able to describe

30
00:01:31,347 --> 00:01:34,186
the principles of client-server
architectures,

31
00:01:34,713 --> 00:01:36,414
and you should be able

32
00:01:36,614 --> 00:01:39,804
to create a simple web page

33
00:01:40,004 --> 00:01:41,943
containing a map element.

34
00:01:43,772 --> 00:01:45,560
We will therefore discuss successively

35
00:01:45,760 --> 00:01:48,244
the theme of client-server architecture

36
00:01:48,444 --> 00:01:51,217
in relation to geographic
information systems,

37
00:01:52,202 --> 00:01:55,696
then we will focus on the 
fundamental elements

38
00:01:55,884 --> 00:01:56,721
of the web page,

39
00:01:56,921 --> 00:02:00,183
that are the HTML and CSS language,

40
00:02:00,773 --> 00:02:02,047
which are the beginnings

41
00:02:02,247 --> 00:02:03,921
which will allow us to
then adress

42
00:02:04,121 --> 00:02:06,228
the topic of cartography in web pages,

43
00:02:06,428 --> 00:02:08,012
so the theme of the GIS web,

44
00:02:08,870 --> 00:02:11,688
and we will end the lesson with
an example of application,

45
00:02:11,888 --> 00:02:13,681
of realization of a web page

46
00:02:13,881 --> 00:02:14,503
which contains

47
00:02:14,703 --> 00:02:18,243
a dynamic and interactive 
cartographic element.

48
00:02:24,705 --> 00:02:27,151
A server is a software or a machine

49
00:02:27,351 --> 00:02:29,784
which is capable of listening to
the network

50
00:02:29,984 --> 00:02:33,523
and which is capable of 
receiving queries

51
00:02:33,723 --> 00:02:34,989
from different clients

52
00:02:35,189 --> 00:02:36,716
and to respond to these queries.

53
00:02:37,539 --> 00:02:39,281
So the goal of a server

54
00:02:39,481 --> 00:02:41,512
is to allow the data sharing

55
00:02:41,712 --> 00:02:44,386
or the material or software 
resources sharing

56
00:02:44,586 --> 00:02:46,302
between several clients

57
00:02:46,502 --> 00:02:50,633
in a architecture qualified
as client-server architecture.

58
00:02:51,485 --> 00:02:54,642
There are a very large number
of different server types:

59
00:02:54,854 --> 00:02:58,011
database servers, file servers,

60
00:02:58,263 --> 00:02:59,928
mail servers,

61
00:03:00,128 --> 00:03:01,771
web servers,

62
00:03:01,971 --> 00:03:03,956
game servers, and so on.

63
00:03:05,782 --> 00:03:09,784
The servers therefore listen
to the traffic on the Internet

64
00:03:09,984 --> 00:03:12,474
in order to identify requests
addressed to them,

65
00:03:13,042 --> 00:03:16,546
and the portal that allows
them to listen on the network

66
00:03:16,746 --> 00:03:18,342
is what is called a software port,

67
00:03:18,542 --> 00:03:20,708
which is actually the access point

68
00:03:20,908 --> 00:03:23,768
to the operating system of a computer.

69
00:03:24,712 --> 00:03:29,436
Software ports are numbered
from 1 to 65,536

70
00:03:30,518 --> 00:03:32,758
and on the same machine, in fact,

71
00:03:32,958 --> 00:03:35,082
we can have several server softwares

72
00:03:35,282 --> 00:03:37,000
which operate simultaneously,

73
00:03:37,490 --> 00:03:39,877
with each listening or working

74
00:03:40,077 --> 00:03:42,934
with one or two specific 
software ports,

75
00:03:43,769 --> 00:03:45,876
often a port for the incoming traffic

76
00:03:46,076 --> 00:03:48,219
and a second port for 
the outgoing traffic.

77
00:03:49,483 --> 00:03:52,088
As an example of frequently used
port numbers,

78
00:03:52,288 --> 00:03:54,368
we can mention ports 20/21

79
00:03:54,568 --> 00:03:55,428
which are used

80
00:03:55,628 --> 00:03:58,908
for protocols to transfer FTP file

81
00:03:59,338 --> 00:04:02,685
20 for the incoming flow
21 for the outgoing flow,

82
00:04:03,568 --> 00:04:06,788
port 80 to browse web pages

83
00:04:06,988 --> 00:04:08,705
on an HTTP web server,

84
00:04:09,149 --> 00:04:12,933
port 443 in case this web server
is secured

85
00:04:13,133 --> 00:04:14,763
with the HTTPS protocol,

86
00:04:15,323 --> 00:04:18,381
or port 5'432

87
00:04:18,581 --> 00:04:22,564
for the connection to a 
PostgreSQL database.

88
00:04:24,663 --> 00:04:27,345
The server softwares do not have to

89
00:04:27,613 --> 00:04:29,807
be hosted on a remote machine

90
00:04:30,036 --> 00:04:32,195
but can be hosted on the local machine

91
00:04:32,395 --> 00:04:34,599
at the same time as client softwares,

92
00:04:34,799 --> 00:04:38,425
which is particularly useful 
if we do development.

93
00:04:39,364 --> 00:04:43,300
It is simply necessary that
the operating conditions

94
00:04:43,500 --> 00:04:46,576
are the same as if the servers were
on a remote machine,

95
00:04:46,776 --> 00:04:50,129
namely that the communication between
the client and the server

96
00:04:50,329 --> 00:04:53,047
goes through the same software ports

97
00:04:53,247 --> 00:04:56,361
as if these servers were
on a remote machine.

98
00:04:57,561 --> 00:04:58,859
The local machine,

99
00:04:59,059 --> 00:05:00,164
in a URL address,

100
00:05:00,364 --> 00:05:03,255
is designated by the "localhost" term

101
00:05:03,455 --> 00:05:06,358
which in fact designates
the logical interface

102
00:05:06,558 --> 00:05:08,324
of this local machine.

103
00:05:10,198 --> 00:05:13,176
The localhost address is 
also associated

104
00:05:13,376 --> 00:05:15,640
to a series of IP addresses.

105
00:05:16,190 --> 00:05:19,233
In the case of IP version 4,

106
00:05:19,433 --> 00:05:24,836
it is the address 127.0.0.1 that 
is the most frequently used,

107
00:05:25,036 --> 00:05:28,383
but the series of the following 
addresses is also usable.

108
00:05:29,552 --> 00:05:31,583
Finally, in a URL address,

109
00:05:31,783 --> 00:05:34,108
if we want to specify a 
particular port,

110
00:05:35,706 --> 00:05:37,973
we simply add two points

111
00:05:38,173 --> 00:05:41,015
and the port number to 
target that port,

112
00:05:41,215 --> 00:05:45,170
so if we want to tap on port 3000
of a local machine,

113
00:05:45,370 --> 00:05:51,580
the URL would be 
http://localhost:3000

114
00:05:54,524 --> 00:05:55,993
A client-server architecture

115
00:05:56,193 --> 00:05:59,103
is therefore generally constituted
by a server software

116
00:05:59,303 --> 00:06:01,780
that listens to traffic on the network,

117
00:06:02,318 --> 00:06:05,442
which is capable of identifying
a request addressed to it

118
00:06:05,642 --> 00:06:08,634
and then send back a reply.

119
00:06:09,862 --> 00:06:11,712
On the other side, we have a 
client software

120
00:06:11,912 --> 00:06:14,428
which is capable of 
formulating requests,

121
00:06:14,628 --> 00:06:15,857
to send them to the server

122
00:06:16,346 --> 00:06:19,920
and then to retrieve the response
from the server

123
00:06:20,120 --> 00:06:24,442
and to interpret it to display the
information that was transmitted.

124
00:06:25,349 --> 00:06:27,521
Finally, the exchanges between
client and server

125
00:06:27,721 --> 00:06:29,931
are often managed by an
intermediate software

126
00:06:30,131 --> 00:06:33,265
called middleware.

127
00:06:34,638 --> 00:06:37,852
In the particular context of 
geographic information systems,

128
00:06:38,052 --> 00:06:39,243
the server side

129
00:06:39,443 --> 00:06:42,020
is often simply composed of
a data server.

130
00:06:42,220 --> 00:06:43,893
It is quite frequent however

131
00:06:44,093 --> 00:06:45,919
to have two servers in series,

132
00:06:46,119 --> 00:06:48,192
the first one being destined 
to manage queries

133
00:06:48,392 --> 00:06:49,790
and create responses,

134
00:06:49,990 --> 00:06:53,458
whereas the second one is limited
to the provision of data.

135
00:06:54,546 --> 00:06:56,818
This structure has advantages

136
00:06:57,018 --> 00:06:58,177
from the security point of view

137
00:06:58,405 --> 00:06:59,495
since the access to data

138
00:06:59,695 --> 00:07:01,920
is only allowed for the
intermediate server,

139
00:07:02,424 --> 00:07:05,381
which can manage the access
rights of the different clients.

140
00:07:06,401 --> 00:07:08,800
On the client side, we will have
a user interface

141
00:07:09,000 --> 00:07:10,818
composed either of a GIS software,

142
00:07:11,018 --> 00:07:14,284
QGIS, Manifold, Mapinfo, ArcGIS, etc.

143
00:07:14,761 --> 00:07:16,171
or a web browser

144
00:07:16,371 --> 00:07:18,387
including a map component,

145
00:07:18,587 --> 00:07:20,442
an association which is 
generally called

146
00:07:20,642 --> 00:07:21,978
GIS web.

147
00:07:22,543 --> 00:07:23,129
And again,

148
00:07:23,329 --> 00:07:25,728
we will find various communication
protocols

149
00:07:25,928 --> 00:07:27,460
between client and server.

150
00:07:28,420 --> 00:07:30,760
The most common of these softwares

151
00:07:31,640 --> 00:07:34,010
which manage communications
between client-server

152
00:07:34,210 --> 00:07:36,055
is the ODBC software,

153
00:07:36,255 --> 00:07:38,532
for Open Data Base Connectivity.

154
00:07:39,555 --> 00:07:40,589
It is a software

155
00:07:40,789 --> 00:07:42,200
initially developed by Microsoft

156
00:07:42,400 --> 00:07:43,405
for Windows,

157
00:07:43,993 --> 00:07:46,125
and subsequently taken over
by other publishers

158
00:07:46,325 --> 00:07:48,736
for Unix / Linux and Java platforms.

159
00:07:49,818 --> 00:07:51,610
Data manipulation requests

160
00:07:51,810 --> 00:07:54,444
are formulated in SQL language
in the client software,

161
00:07:54,644 --> 00:07:56,486
and then transmitted to the data server

162
00:07:56,686 --> 00:07:58,381
through ODBC.

163
00:07:59,105 --> 00:08:00,680
The scheme of operation implies

164
00:08:00,855 --> 00:08:03,437
that manufacturers of database
management software

165
00:08:03,637 --> 00:08:06,297
had to develop specific ODBC drivers

166
00:08:06,497 --> 00:08:08,789
for each database management system.

167
00:08:10,732 --> 00:08:13,226
We see here in the case of QGIS

168
00:08:13,426 --> 00:08:16,990
that when a vectorial 
layer is added for example,

169
00:08:18,660 --> 00:08:20,907
we have the possibility
of searching this layer

170
00:08:21,107 --> 00:08:22,107
in a database,

171
00:08:22,307 --> 00:08:25,391
and the types of database 
connections that are offered

172
00:08:25,591 --> 00:08:28,471
include different databases

173
00:08:28,671 --> 00:08:30,716
from different manufacturers,

174
00:08:30,916 --> 00:08:34,616
so Oracle, MSSQL, Microsoft, 
Postgres, MySQL,

175
00:08:34,816 --> 00:08:37,777
but also the generic ODBC driver

176
00:08:37,977 --> 00:08:41,435
which allows to connect to databases

177
00:08:41,635 --> 00:08:43,913
using this particular protocol.

178
00:08:46,147 --> 00:08:48,106
Two other examples of middleware

179
00:08:48,306 --> 00:08:50,726
quite frequently encountered
in Windows:

180
00:08:51,177 --> 00:08:55,066
OLEDB, for Object Linking and
Embedding Database,

181
00:08:55,509 --> 00:08:57,492
which is in fact a successor of ODBC

182
00:08:57,692 --> 00:08:59,489
based on the COM interfaces,

183
00:08:59,762 --> 00:09:00,876
and ADO.NET,

184
00:09:01,076 --> 00:09:03,217
which is the data access 
component of the

185
00:09:03,417 --> 00:09:05,046
Microsoft .NET framework.

186
00:09:06,820 --> 00:09:08,033
Finally, in the course

187
00:09:08,233 --> 00:09:09,956
devoted to geodata sources,

188
00:09:10,156 --> 00:09:12,900
we had already talked a bit 
about the HTTP protocol,

189
00:09:13,239 --> 00:09:17,515
in particular to interrogate 
geoservices,

190
00:09:17,715 --> 00:09:19,919
so WMS and WFS servers.

191
00:09:20,887 --> 00:09:23,393
In the particular case 
of the HTTP protocol,

192
00:09:23,593 --> 00:09:25,486
we have, on the server side,

193
00:09:25,686 --> 00:09:27,207
either an HTTP server,

194
00:09:27,407 --> 00:09:29,527
or geoservices

195
00:09:29,727 --> 00:09:32,849
such as Web Map Service or
Web Feature Service.

196
00:09:33,440 --> 00:09:37,074
On the client side, a web browser
with a GIS component

197
00:09:37,274 --> 00:09:40,397
or, more occasionally, 
the GIS software,

198
00:09:40,597 --> 00:09:44,538
which will not usually use an HTTP server

199
00:09:44,738 --> 00:09:48,413
but which can look for tiles
in geoservices

200
00:09:48,613 --> 00:09:52,544
as seen in the course on geodata sources.

201
00:09:53,558 --> 00:09:56,085
The communication in the 
client-server sense

202
00:09:56,285 --> 00:09:59,051
relies on the HTTP protocol,

203
00:09:59,591 --> 00:10:01,875
which can possibly 
include parameters,

204
00:10:02,075 --> 00:10:05,151
as we had seen to 
define the elements

205
00:10:06,214 --> 00:10:08,039
the server must return

206
00:10:09,092 --> 00:10:10,499
and in the client sense,

207
00:10:10,699 --> 00:10:13,504
we will simply find 
a flow of information

208
00:10:13,704 --> 00:10:19,598
in the form of HTML, images,
JSON and GML files, etc.

209
00:10:21,508 --> 00:10:23,715
In the rest of the course,
we will now

210
00:10:23,931 --> 00:10:25,586
focus

211
00:10:25,786 --> 00:10:26,397
on the case

212
00:10:26,597 --> 00:10:29,335
where the client is composed 
of a web browser

213
00:10:30,111 --> 00:10:32,162
which includes

214
00:10:32,362 --> 00:10:34,607
geographic information 
system functionalities.

215
00:10:44,287 --> 00:10:45,705
Before addressing the question of

216
00:10:45,905 --> 00:10:49,108
the integration of geographic
components into a web page,

217
00:10:49,308 --> 00:10:50,994
it is necessary

218
00:10:51,194 --> 00:10:54,244
to remind us a little bit

219
00:10:54,444 --> 00:10:57,925
of the foundations of the 
organization and construction

220
00:10:58,125 --> 00:10:58,959
of a web page,

221
00:10:59,545 --> 00:11:03,603
so the HTML language for HyperText
Markup Language

222
00:11:03,803 --> 00:11:07,155
and the CSS for style elements.

223
00:11:08,183 --> 00:11:11,460
This is the object of this second
part of the course,

224
00:11:12,350 --> 00:11:14,310
an accelerated review 

225
00:11:14,510 --> 00:11:16,289
of the basic principles

226
00:11:16,489 --> 00:11:18,669
of this structuring of web pages.

227
00:11:19,923 --> 00:11:22,803
A web page is primarily
an HTML document,

228
00:11:23,016 --> 00:11:24,502
so an .HTML file,

229
00:11:25,522 --> 00:11:27,607
which is an annotated text file

230
00:11:27,807 --> 00:11:30,016
in order to define different 
types of content,

231
00:11:30,216 --> 00:11:33,006
the header, footers, 
paragraphs, titles,

232
00:11:33,206 --> 00:11:34,282
etc.

233
00:11:34,848 --> 00:11:37,639
These annotations, which 
are called Markup

234
00:11:37,839 --> 00:11:40,508
are formed by tags

235
00:11:41,050 --> 00:11:43,674
which are in fact keywords placed
between chevrons

236
00:11:43,874 --> 00:11:45,778
and which signal the 
start and the end

237
00:11:45,978 --> 00:11:48,338
of a content element or HTML element.

238
00:11:49,013 --> 00:11:50,610
In the example we have before us,

239
00:11:50,810 --> 00:11:53,222
we see that the main tag

240
00:11:53,422 --> 00:11:57,578
is the HTML tag that actually 
defines the HTML page,

241
00:11:57,778 --> 00:11:58,895
itself subdivided

242
00:11:59,095 --> 00:12:02,843
into a header, with the head tag
containing a title,

243
00:12:03,043 --> 00:12:04,042
with the title tag,

244
00:12:05,808 --> 00:12:09,212
header followed by a body part

245
00:12:09,412 --> 00:12:11,069
that is actually the body of the page,

246
00:12:11,269 --> 00:12:14,320
which contains a paragraph with a text,

247
00:12:14,520 --> 00:12:15,981
"Welcome to the e-Atlas of Orontes"

248
00:12:16,181 --> 00:12:19,133
and an image characterized by
its properties.

249
00:12:19,993 --> 00:12:22,137
The access path to the image

250
00:12:22,337 --> 00:12:26,840
has a substitute text in case
the image is not accessible

251
00:12:27,040 --> 00:12:30,248
and the size in width of this image.

252
00:12:31,192 --> 00:12:33,269
HTML documents should

253
00:12:33,469 --> 00:12:36,955
start and end with start and end tags,

254
00:12:37,957 --> 00:12:39,095
HTML tags.

255
00:12:39,689 --> 00:12:42,375
They must contain a header section

256
00:12:42,588 --> 00:12:44,153
and a content section,

257
00:12:44,353 --> 00:12:46,179
with the head and body tags.

258
00:12:47,383 --> 00:12:50,278
And finally we note that
the syntax of HTML

259
00:12:50,478 --> 00:12:51,653
is not case-sensitive,

260
00:12:51,853 --> 00:12:53,059
but in general

261
00:12:53,259 --> 00:12:56,259
we often use lower cases everywhere

262
00:12:56,969 --> 00:12:58,362
to make it easy to read.

263
00:12:59,727 --> 00:13:01,069
And finally, as we have seen,

264
00:13:01,269 --> 00:13:03,072
the header contains metadata,

265
00:13:03,272 --> 00:13:06,494
references to libraries,

266
00:13:06,694 --> 00:13:08,016
to external resources,

267
00:13:08,216 --> 00:13:09,982
often the title of the page,

268
00:13:10,468 --> 00:13:11,920
and in the body

269
00:13:12,120 --> 00:13:14,503
we will place the different
elements of content,

270
00:13:14,703 --> 00:13:16,153
the various HTML elements

271
00:13:16,353 --> 00:13:18,509
which we want to see appearing
on the page itself.

272
00:13:20,491 --> 00:13:22,264
Some examples of common tags

273
00:13:22,464 --> 00:13:26,200
with title tags from level one to
level six,

274
00:13:27,084 --> 00:13:29,286
the P tag for paragraphs,

275
00:13:30,204 --> 00:13:31,571
and then a series of tags

276
00:13:31,771 --> 00:13:34,626
which allow to reinforce text in
italics or in bold,

277
00:13:35,121 --> 00:13:37,015
the line break, the horizontal line.

278
00:13:38,776 --> 00:13:41,849
The HyperText link with 
tag A

279
00:13:42,049 --> 00:13:44,079
which can point either to a website

280
00:13:44,279 --> 00:13:47,739
when we give href as parameter,

281
00:13:47,939 --> 00:13:50,160
the address, the url of a website,

282
00:13:50,360 --> 00:13:53,107
here the example of the 
polytechnic school website,

283
00:13:53,732 --> 00:13:55,829
or to an element of the page

284
00:13:56,029 --> 00:13:57,314
located higher or lower

285
00:13:57,514 --> 00:13:59,694
which is defined by its identifier,

286
00:13:59,894 --> 00:14:03,461
here we have the example of
a sentence, "this is the top",

287
00:14:03,661 --> 00:14:08,556
which is characterized by its
ID which is called top

288
00:14:08,756 --> 00:14:12,432
and the reference refers to
this place of the page,

289
00:14:12,632 --> 00:14:15,767
with the hashtag character
that we will see later

290
00:14:15,967 --> 00:14:20,562
which actually targets
an object that carries a top ID.

291
00:14:22,544 --> 00:14:24,312
The tags used to define

292
00:14:24,512 --> 00:14:26,785
ordered lists with the OL tag,

293
00:14:26,985 --> 00:14:29,109
not ordered with the UL tag

294
00:14:29,309 --> 00:14:32,078
and the LI tag for the list elements.

295
00:14:33,684 --> 00:14:35,820
The image tag which we 
have already seen,

296
00:14:36,020 --> 00:14:38,199
with the particularity

297
00:14:38,399 --> 00:14:41,732
that this tag does not 
require an end tag

298
00:14:42,581 --> 00:14:44,603
and, as another particularity,

299
00:14:44,803 --> 00:14:49,324
that its two attributes, the source
and the substitution text,

300
00:14:49,524 --> 00:14:51,000
are mandatory attributes.

301
00:14:51,641 --> 00:14:52,530
And let's also note

302
00:14:52,730 --> 00:14:54,255
that the value of the attributes

303
00:14:54,455 --> 00:14:59,858
is characterized by a text taken 
between inverted commas or apostrophes.

304
00:15:01,008 --> 00:15:03,298
The definition of access paths

305
00:15:03,498 --> 00:15:05,258
follows the standard rules.

306
00:15:05,786 --> 00:15:06,802
So for example

307
00:15:07,772 --> 00:15:10,103
in the case of a source
which is in the same folder

308
00:15:10,303 --> 00:15:11,967
as the HTML file,

309
00:15:14,333 --> 00:15:16,249
the source will be simply composed

310
00:15:16,449 --> 00:15:18,077
of the file name

311
00:15:18,277 --> 00:15:20,093
or possibly by the syntax:

312
00:15:20,293 --> 00:15:23,467
. which designates the folder
in which we are,

313
00:15:23,667 --> 00:15:24,884
/the file name.

314
00:15:25,915 --> 00:15:29,094
If we have an image folder

315
00:15:29,294 --> 00:15:31,778
which is placed at the same
level as the HTML file

316
00:15:31,978 --> 00:15:33,295
on which we work,

317
00:15:33,495 --> 00:15:36,171
the link to the source 
will take the following form :

318
00:15:36,371 --> 00:15:39,721
./image folder/file name.

319
00:15:40,745 --> 00:15:43,073
It can happen that the image folder

320
00:15:43,273 --> 00:15:46,506
is at the same level as the HTML file

321
00:15:46,706 --> 00:15:49,054
which contains the HTML file
on which we work,

322
00:15:49,599 --> 00:15:52,241
and in this case to go up of
a notch in the hierarchy,

323
00:15:52,441 --> 00:15:53,881
we will have a syntax like

324
00:15:54,081 --> 00:15:59,386
:/image folder/source file.jpeg

325
00:15:59,976 --> 00:16:03,123
And finally in the case where
the image is hosted

326
00:16:03,323 --> 00:16:05,877
on a remote website,

327
00:16:06,476 --> 00:16:10,880
we simply have the url of 
this image for the source.

328
00:16:12,709 --> 00:16:13,908
The table tag

329
00:16:14,108 --> 00:16:16,785
which defines a table composed of lines,

330
00:16:16,985 --> 00:16:19,953
with the TR tag for row,

331
00:16:20,511 --> 00:16:23,068
each line being composed of cells

332
00:16:24,018 --> 00:16:25,761
described by the TD tag.

333
00:16:26,863 --> 00:16:29,822
We can find a complete list of
HTML tags

334
00:16:30,711 --> 00:16:33,427
on the w3schools site,

335
00:16:34,613 --> 00:16:38,333
in the HTML part of this site.

336
00:16:39,762 --> 00:16:41,095
To conclude,

337
00:16:41,295 --> 00:16:45,063
the neutral elements constituted by
the DIV and SPAN tags

338
00:16:45,744 --> 00:16:47,618
which are in fact simply containers

339
00:16:47,818 --> 00:16:50,792
to accommodate other HTML elements

340
00:16:50,992 --> 00:16:53,172
and which are mainly used

341
00:16:53,372 --> 00:16:57,143
to structure and stylize 
an HTML document.

342
00:16:58,200 --> 00:16:59,358
The DIV element

343
00:16:59,558 --> 00:17:01,367
is framed by line breaks,

344
00:17:01,567 --> 00:17:03,133
so it is a block element,

345
00:17:03,333 --> 00:17:08,264
and each subsequent element
will end up in the next line,

346
00:17:08,894 --> 00:17:11,845
whereas the SPAN element is
an on-line element,

347
00:17:12,045 --> 00:17:16,027
and can be applied to a line section,

348
00:17:16,227 --> 00:17:20,173
with here the example, at
least important,

349
00:17:20,373 --> 00:17:22,413
which is stylized in red

350
00:17:22,613 --> 00:17:27,323
using a SPAN in the title phrase

351
00:17:27,907 --> 00:17:30,545
and then the second example,

352
00:17:30,745 --> 00:17:33,896
a DIV element which is colored in gray,

353
00:17:34,096 --> 00:17:37,357
a background in gray
and then a text in blue,

354
00:17:39,246 --> 00:17:43,336
a style that is applied to the 
content of that container,

355
00:17:43,536 --> 00:17:46,115
so the title of level h3

356
00:17:46,315 --> 00:17:47,451
and the following paragraph.

357
00:17:49,295 --> 00:17:51,487
We have seen here two 
examples of style

358
00:17:51,687 --> 00:17:55,052
applied to the content 
of two containers,

359
00:17:55,252 --> 00:17:56,939
of a SPAN container and 
a DIV container.

360
00:17:58,339 --> 00:17:59,226
Generally,

361
00:17:59,426 --> 00:18:01,525
HTML elements all have 
a style attribute

362
00:18:02,679 --> 00:18:05,170
which is actually 
composed of a string of characters

363
00:18:05,816 --> 00:18:07,399
which lists a series of parameters

364
00:18:08,006 --> 00:18:09,857
in a name:value form, 

365
00:18:10,057 --> 00:18:12,270
​​separated by semicolons.

366
00:18:12,664 --> 00:18:15,814
There are a large number 
of style settings

367
00:18:16,014 --> 00:18:16,992
which can be used

368
00:18:17,692 --> 00:18:20,126
and we can, as we see here,

369
00:18:21,023 --> 00:18:25,037
go there to find details.

370
00:18:25,561 --> 00:18:27,621
We can find a fairly 
complete description

371
00:18:27,821 --> 00:18:30,626
again on the to w3schools site,

372
00:18:31,911 --> 00:18:33,701
in the CSS section.

373
00:18:35,391 --> 00:18:39,772
The method which consists of 
defining the style of HTML elements

374
00:18:39,972 --> 00:18:44,090
by parameters associated with
these elements

375
00:18:44,680 --> 00:18:46,433
has a number of disadvantages:

376
00:18:46,633 --> 00:18:47,641
in the first place

377
00:18:47,841 --> 00:18:50,841
the fact that when we want 
to change style,

378
00:18:51,041 --> 00:18:51,879
to do an update,

379
00:18:52,079 --> 00:18:54,219
we are obliged to change the style

380
00:18:54,419 --> 00:18:56,315
specifically of each of the elements,

381
00:18:56,515 --> 00:18:58,207
what is a rather tedious task,

382
00:18:58,730 --> 00:19:02,312
the elements of style take more
and more space,

383
00:19:02,537 --> 00:19:06,516
it actually makes it more 
difficult to read the web page

384
00:19:07,383 --> 00:19:08,374
and finally,

385
00:19:08,574 --> 00:19:10,917
if we repeat the same 
styles many times,

386
00:19:11,117 --> 00:19:13,591
we increase
the size of the files,

387
00:19:13,791 --> 00:19:16,376
which can actually slow 
the loading times

388
00:19:16,576 --> 00:19:18,109
of web pages.

389
00:19:19,260 --> 00:19:20,570
This is why

390
00:19:20,770 --> 00:19:22,640
we use alternative methods

391
00:19:22,840 --> 00:19:24,862
as illustrated in this example

392
00:19:25,539 --> 00:19:28,371
where we actually have just two
containers,

393
00:19:28,571 --> 00:19:30,133
one above the other,

394
00:19:30,333 --> 00:19:31,677
first div, second div,

395
00:19:32,223 --> 00:19:36,535
one that occupies only 70%
of the width of the page,

396
00:19:36,735 --> 00:19:39,555
with a height of 50 pixels and
a light gray background

397
00:19:40,083 --> 00:19:44,041
and the second which has
a dark blue background,

398
00:19:44,254 --> 00:19:45,481
a white text,

399
00:19:45,681 --> 00:19:46,875
a height of 100 pixels

400
00:19:47,075 --> 00:19:49,344
and which occupies half of the
available width.

401
00:19:50,290 --> 00:19:54,059
So if we want to lighten up a bit

402
00:19:54,259 --> 00:19:55,834
the definition of styles,

403
00:19:56,496 --> 00:19:59,901
we will group the elements
of stylization

404
00:20:00,101 --> 00:20:04,038
in a particular section of the page,

405
00:20:04,945 --> 00:20:08,297
a section that is characterized
by style tags

406
00:20:09,295 --> 00:20:11,835
and in which, we will refer 

407
00:20:12,035 --> 00:20:15,623
the different objects to which
these styles apply,

408
00:20:16,184 --> 00:20:17,621
with the hashtag character

409
00:20:17,846 --> 00:20:22,415
to search for the element
that carries this identifier,

410
00:20:22,615 --> 00:20:23,813
in this case here, div1,

411
00:20:24,013 --> 00:20:26,064
so the style applies to a single object,

412
00:20:27,074 --> 00:20:31,935
the point character to apply
the style to a class of objects

413
00:20:32,135 --> 00:20:36,654
so we can, in the attributes
of an object, define a class

414
00:20:36,854 --> 00:20:38,546
and we can have several objects

415
00:20:38,746 --> 00:20:41,155
that have the same class

416
00:20:41,716 --> 00:20:44,727
and so that we can
stylize with a single style,

417
00:20:45,670 --> 00:20:49,162
and finally, the HTML type itself

418
00:20:49,362 --> 00:20:51,062
with a style that would then apply

419
00:20:51,262 --> 00:20:54,984
to all of the HTML elements of that type.

420
00:20:56,368 --> 00:20:58,921
The next step of the rationalization

421
00:20:59,121 --> 00:21:00,097
of the style elements

422
00:21:00,297 --> 00:21:02,577
is to take the style section out

423
00:21:02,777 --> 00:21:04,412
of the HTML page header

424
00:21:05,085 --> 00:21:08,161
to group all the styles 
into a style page,

425
00:21:08,361 --> 00:21:10,190
so a .css page,

426
00:21:11,299 --> 00:21:14,538
which is then referenced 
in the HTML page

427
00:21:15,839 --> 00:21:18,040
with a link tag.

428
00:21:19,003 --> 00:21:20,473
This style sheet that we create

429
00:21:20,673 --> 00:21:23,999
gathers all the stylistic information
in a single file,

430
00:21:24,199 --> 00:21:27,364
a .css file for Cascading Style Sheet

431
00:21:27,785 --> 00:21:30,468
and can be applied to all the HTML pages

432
00:21:30,668 --> 00:21:31,393
of a website.

433
00:21:32,669 --> 00:21:34,660
Here is an example

434
00:21:34,860 --> 00:21:37,402
of different types of stylization

435
00:21:37,602 --> 00:21:41,579
which are applied to
one single page,

436
00:21:41,779 --> 00:21:42,829
to the same content,

437
00:21:43,029 --> 00:21:47,230
but with diversified shaping.

438
00:21:47,430 --> 00:21:50,257
This is the page as it appears
without any style

439
00:21:50,846 --> 00:21:53,671
and we go back to square one.

440
00:21:55,753 --> 00:21:58,018
We can see that
in order to rationalize

441
00:21:58,218 --> 00:22:00,713
the style management in a page

442
00:22:00,913 --> 00:22:02,171
or a set of web pages,

443
00:22:02,371 --> 00:22:05,201
we will start by referencing

444
00:22:05,401 --> 00:22:09,175
the different HTML elements 
of web pages

445
00:22:09,375 --> 00:22:12,106
by their identifiers, classes or types

446
00:22:12,704 --> 00:22:15,477
and that we will group the style
information,

447
00:22:15,677 --> 00:22:18,300
either in a particular section

448
00:22:18,500 --> 00:22:22,129
characterized by the style tag
in the header of the HTML page,

449
00:22:22,664 --> 00:22:27,133
or in a separate .css file.

450
00:22:28,137 --> 00:22:30,059
With this approach,

451
00:22:30,259 --> 00:22:32,841
the style of an element can be defined
in fact

452
00:22:33,041 --> 00:22:33,921
in several places

453
00:22:34,121 --> 00:22:36,909
and then the following hierarchy applies

454
00:22:37,109 --> 00:22:42,063
where we first go from the default
style of the web page

455
00:22:42,640 --> 00:22:46,447
to the style defined in the CSS page,

456
00:22:46,647 --> 00:22:48,929
then in the section of the HTML page

457
00:22:49,129 --> 00:22:51,545
then as an attribute 
of the object itself.

458
00:22:52,052 --> 00:22:56,715
And similarly in the 
hierarchy of the typology,

459
00:22:56,915 --> 00:22:58,746
we will go first from the general type

460
00:22:58,946 --> 00:23:01,237
and then if a particular style

461
00:23:01,437 --> 00:23:03,464
is defined for a particular class,

462
00:23:03,630 --> 00:23:05,624
it is the class that will 
get the upper hand

463
00:23:05,824 --> 00:23:09,073
and in the case where the object 
itself has a definite style,

464
00:23:09,273 --> 00:23:11,898
it is the style of the object 
that will apply.

465
00:23:21,970 --> 00:23:23,316
We have seen

466
00:23:23,516 --> 00:23:24,691
the basic elements

467
00:23:24,891 --> 00:23:26,768
of construction and stylization

468
00:23:27,089 --> 00:23:28,066
of web pages,

469
00:23:28,266 --> 00:23:30,871
We still have to see

470
00:23:31,071 --> 00:23:35,256
how we can integrate 

471
00:23:35,456 --> 00:23:36,839
mapping elements in these web pages

472
00:23:37,039 --> 00:23:38,853
and ensure that this mapping

473
00:23:39,053 --> 00:23:40,287
can be interactive.

474
00:23:40,820 --> 00:23:43,412
We have seen that the HTML language

475
00:23:43,612 --> 00:23:44,440
is rather limited

476
00:23:44,640 --> 00:23:47,737
and will not be enough for 
this type of 

477
00:23:47,937 --> 00:23:48,924
more complex applications.

478
00:23:50,319 --> 00:23:52,173
The possibilities which are
available to us,

479
00:23:52,373 --> 00:23:54,147
are to complete the HTML,

480
00:23:54,347 --> 00:23:56,181
which can be done either
on the client side

481
00:23:56,970 --> 00:24:01,042
by adding executable code
inside the HTML page,

482
00:24:01,633 --> 00:24:04,780
this code can take the 
form of Javascript,

483
00:24:04,980 --> 00:24:06,752
of vbscript or dhtml,

484
00:24:07,917 --> 00:24:10,431
by executable code to download

485
00:24:10,631 --> 00:24:13,364
and to use with an HTML page,

486
00:24:13,564 --> 00:24:15,138
then these are scripts

487
00:24:15,338 --> 00:24:17,227
in different programming languages,

488
00:24:17,427 --> 00:24:19,089
Python for example,

489
00:24:19,721 --> 00:24:23,331
activeX components, or Java applets.

490
00:24:23,531 --> 00:24:26,792
There is a wide variety

491
00:24:26,992 --> 00:24:31,153
of products available for
this type of functions

492
00:24:32,215 --> 00:24:34,633
and by almost complete, specific 

493
00:24:34,833 --> 00:24:37,548
application interfaces

494
00:24:37,748 --> 00:24:39,245
that we have to install on the client,

495
00:24:39,837 --> 00:24:43,243
which is commonly referred 
to as a plug-in.

496
00:24:47,038 --> 00:24:48,551
The possibilities can also

497
00:24:48,751 --> 00:24:50,560
be enriched on the server side

498
00:24:50,760 --> 00:24:54,831
by adding executables or DLL libraries,

499
00:24:55,535 --> 00:24:58,483
or even scripts that would 
be executed on the server

500
00:24:58,683 --> 00:25:02,107
and whose function is to
create dynamically

501
00:25:02,307 --> 00:25:04,952
the HTML pages that are sent back
to the client.

502
00:25:05,589 --> 00:25:09,634
And there, we use a lot the common
gateway interface, the CGI,

503
00:25:10,780 --> 00:25:13,559
or else by executable code

504
00:25:13,759 --> 00:25:16,347
which is integrated to the HTML page

505
00:25:16,560 --> 00:25:19,306
but is executed at the server level.

506
00:25:19,929 --> 00:25:23,961
The most common example used 
is that of PHP,

507
00:25:24,161 --> 00:25:26,388
so the PHP code that is in the page

508
00:25:26,588 --> 00:25:32,060
in this case a PHP page sent
by the client to the server.

509
00:25:32,260 --> 00:25:35,361
The server must have a PHP interpreter

510
00:25:35,561 --> 00:25:36,970
to execute this code,

511
00:25:37,170 --> 00:25:39,363
make the HTML page

512
00:25:39,563 --> 00:25:40,802
and send it back to the customer.

513
00:25:42,018 --> 00:25:44,463
So we do not have time to review

514
00:25:44,663 --> 00:25:45,704
exhaustively

515
00:25:45,916 --> 00:25:49,310
all these different forms of HTML
enrichment

516
00:25:49,510 --> 00:25:51,979
and we will concentrate in the
rest of the course

517
00:25:52,179 --> 00:25:56,941
on the Javascript solution,

518
00:25:57,141 --> 00:25:58,934
so the Javascript executable code

519
00:25:59,134 --> 00:26:03,429
inserted into the HTML page
and executed on the client side.

520
00:26:04,999 --> 00:26:06,199
Javascript has,

521
00:26:06,412 --> 00:26:07,820
as one of its particularities,

522
00:26:08,020 --> 00:26:10,656
the fact of being a 
functional language,

523
00:26:10,856 --> 00:26:12,933
that is to say that the 
functions are objects.

524
00:26:13,490 --> 00:26:15,277
Here we have the example of a function

525
00:26:15,477 --> 00:26:17,164
of two parameters a and b

526
00:26:17,364 --> 00:26:20,631
which send back the product
of these two variables.

527
00:26:21,613 --> 00:26:23,529
This function can be defined

528
00:26:23,729 --> 00:26:25,909
in a variable itself

529
00:26:26,109 --> 00:26:27,476
which would be called myFunction

530
00:26:27,676 --> 00:26:30,560
and this variable can be used

531
00:26:30,760 --> 00:26:32,452
to perform the function

532
00:26:32,652 --> 00:26:35,329
in the calculation of
four times three.

533
00:26:36,465 --> 00:26:38,410
Javascript provides access

534
00:26:38,610 --> 00:26:40,596
to the elements of the HTML page

535
00:26:41,831 --> 00:26:44,240
via the Document Object Model, or DOM,

536
00:26:44,440 --> 00:26:46,676
which as we see on this illustration

537
00:26:47,349 --> 00:26:50,626
allows to access the HTML page

538
00:26:50,826 --> 00:26:51,945
which is the root element

539
00:26:52,145 --> 00:26:53,194
and then its components,

540
00:26:53,394 --> 00:26:55,121
the header and the body

541
00:26:55,321 --> 00:26:58,449
and in the header, the 
title, the title text

542
00:26:58,649 --> 00:27:03,340
or in the body, the various HTML
elements that compose it.

543
00:27:04,900 --> 00:27:08,260
It is also possible to access
the elements of the browser

544
00:27:08,460 --> 00:27:11,368
via the BOM, Browser Object Model,

545
00:27:11,568 --> 00:27:14,547
which enables to access the window,

546
00:27:14,747 --> 00:27:16,693
the browser history,

547
00:27:16,918 --> 00:27:19,598
the browser type, and so on.

548
00:27:21,072 --> 00:27:22,086
Again, if you want

549
00:27:22,286 --> 00:27:24,803
to deepen your knowledge 
on Javascript,

550
00:27:25,003 --> 00:27:27,270
I recommend you start

551
00:27:27,470 --> 00:27:29,756
by visiting the w3schools site

552
00:27:30,510 --> 00:27:35,301
which offers all sorts of 
exercises in this area.

553
00:27:36,512 --> 00:27:38,260
We will see now

554
00:27:38,460 --> 00:27:42,234
how to integrate Javascript in
an HTML page

555
00:27:43,810 --> 00:27:45,875
with a very simple example 

556
00:27:46,075 --> 00:27:49,252
of a button in an HTML page

557
00:27:49,452 --> 00:27:52,000
and when we click on this button,
we would like to see

558
00:27:52,206 --> 00:27:57,594
the day, the date, the time, etc.
being displayed.

559
00:27:58,598 --> 00:28:02,224
The syntax of the HTML file is simple,

560
00:28:02,424 --> 00:28:05,184
so here, no header, just the body,

561
00:28:05,384 --> 00:28:07,514
with in the body, the title, the button

562
00:28:07,714 --> 00:28:12,295
and then a paragraph with 
the demo ID

563
00:28:12,495 --> 00:28:15,611
which must in fact receive

564
00:28:16,330 --> 00:28:21,587
the text of the date and time
generated by the function.

565
00:28:22,451 --> 00:28:24,741
And we see that in the attributes
of the button,

566
00:28:24,941 --> 00:28:26,710
we have an onclick property,

567
00:28:26,910 --> 00:28:31,781
so an event that will
perform the function

568
00:28:31,981 --> 00:28:35,683
which is described in quotation marks.

569
00:28:36,270 --> 00:28:39,378
So from document, which is the DOM,

570
00:28:40,477 --> 00:28:43,529
we will search the object 
called demo,

571
00:28:43,729 --> 00:28:45,168
whose ID is demo,

572
00:28:45,368 --> 00:28:49,152
and then, we will assign to the HTML
content of this object

573
00:28:50,039 --> 00:28:54,795
the Javascript date function that 
refers to the current date.

574
00:28:55,762 --> 00:28:57,626
As for the style elements,

575
00:28:57,826 --> 00:28:59,901
we have also the possibility

576
00:29:00,101 --> 00:29:03,620
to extract all the Javascript code

577
00:29:03,820 --> 00:29:05,672
of an HTML page

578
00:29:05,872 --> 00:29:08,106
or a series of HTML pages

579
00:29:09,202 --> 00:29:14,105
to group them in a js page,

580
00:29:14,305 --> 00:29:16,030
Javascript,

581
00:29:16,692 --> 00:29:18,242
and then to reference

582
00:29:18,442 --> 00:29:20,435
these different functions in the header

583
00:29:20,979 --> 00:29:22,895
with a script tag

584
00:29:23,095 --> 00:29:26,735
that points to the Javascript file

585
00:29:28,162 --> 00:29:32,864
whilst keeping at the level of 
the event, onclick on the button,

586
00:29:33,064 --> 00:29:34,960
the myFunction event

587
00:29:35,160 --> 00:29:37,991
which is defined in the 
myScript.js page.

588
00:29:38,999 --> 00:29:40,024
Here again,

589
00:29:40,224 --> 00:29:42,867
this process allows to simplify

590
00:29:43,067 --> 00:29:45,652
and facilitate the reading 
of the HTML page

591
00:29:45,852 --> 00:29:47,896
and group all the Javascript elements

592
00:29:48,096 --> 00:29:49,976
in the same place.

593
00:29:51,396 --> 00:29:54,224
The integration of an interactive mapping

594
00:29:54,424 --> 00:29:55,291
in a web page

595
00:29:55,491 --> 00:29:57,543
using Javascript,

596
00:29:57,743 --> 00:29:59,994
will go through the use

597
00:30:00,194 --> 00:30:02,078
of Javascript SIG libraries.

598
00:30:03,121 --> 00:30:05,488
There is a large number of these
libraries

599
00:30:05,688 --> 00:30:10,114
including in particular
Openlayers, Leaflet,

600
00:30:10,844 --> 00:30:13,154
the Mapstraction library,

601
00:30:13,979 --> 00:30:15,093
Polymaps,

602
00:30:16,605 --> 00:30:17,949
the Cesium library

603
00:30:18,149 --> 00:30:21,247
for three-dimensional
representations,

604
00:30:22,179 --> 00:30:23,320
etc.

605
00:30:28,420 --> 00:30:30,365
Beyond these open source libraries,

606
00:30:30,565 --> 00:30:33,083
there is also a series of libraries

607
00:30:33,283 --> 00:30:34,755
which are generally free

608
00:30:35,287 --> 00:30:37,163
provided by the major producers

609
00:30:37,363 --> 00:30:40,644
that are Google, Microsoft, ESRI, etc.

610
00:30:41,585 --> 00:30:43,286
These libraries are free

611
00:30:43,486 --> 00:30:45,028
but they are not open source.

612
00:30:54,603 --> 00:30:56,213
In this last part of the course,

613
00:30:56,413 --> 00:30:58,489
we will demonstrate

614
00:30:58,689 --> 00:30:59,692
how to use

615
00:30:59,892 --> 00:31:03,930
one of these cartographic 
JavaScript libraries,

616
00:31:04,189 --> 00:31:06,176
in this case the Openlayers library,

617
00:31:06,376 --> 00:31:08,724
to create an HTML page

618
00:31:08,924 --> 00:31:13,950
which contains an interactive map.

619
00:31:14,479 --> 00:31:16,745
We start by creating a file

620
00:31:16,945 --> 00:31:21,114
entitled Openlayers_Seychelles.html

621
00:31:21,706 --> 00:31:24,454
in which we will find the basic elements,

622
00:31:24,654 --> 00:31:27,072
the header and the body

623
00:31:27,272 --> 00:31:29,659
with an element that we have not seen yet

624
00:31:29,859 --> 00:31:34,426
which is the !DOCTYPE html declaration

625
00:31:34,958 --> 00:31:38,535
which in fact substitutes itself 
for the html tags.

626
00:31:39,855 --> 00:31:43,194
Then, we add a title in the header

627
00:31:44,287 --> 00:31:47,096
then still in the header, two references,

628
00:31:47,296 --> 00:31:51,260
a first reference to the 
Openlayers library,

629
00:31:51,820 --> 00:31:56,714
and a link to a CSS file,

630
00:31:56,914 --> 00:31:58,593
a default style file

631
00:31:59,629 --> 00:32:03,331
which accompanies the 
Openlayers library.

632
00:32:04,811 --> 00:32:08,618
Then we add in the body of the page

633
00:32:08,818 --> 00:32:13,374
a container to which 
we assign the IDMap

634
00:32:15,009 --> 00:32:17,618
and we define some elements of style

635
00:32:17,818 --> 00:32:19,500
in a style section of the header

636
00:32:20,100 --> 00:32:24,099
with first for the entire HTML page

637
00:32:24,299 --> 00:32:26,930
and the whole of the body

638
00:32:27,130 --> 00:32:30,228
the desire to occupy all 
the available space,

639
00:32:30,428 --> 00:32:32,839
so 100% of the height and
100% of the width,

640
00:32:33,922 --> 00:32:37,747
and for the MAP element, also 
100% of the height

641
00:32:38,291 --> 00:32:42,799
and then we give a light 
grey background color

642
00:32:42,999 --> 00:32:48,577
to be able to ensure that 
this HTML map element,

643
00:32:49,168 --> 00:32:50,002
this container,

644
00:32:50,202 --> 00:32:52,579
will occupy all the available space,

645
00:32:52,779 --> 00:32:54,361
something that we can verify

646
00:32:54,561 --> 00:32:57,977
by opening the file in a browser,

647
00:32:58,177 --> 00:32:59,856
in this case, Google Chrome.

648
00:33:00,423 --> 00:33:02,611
And we see that indeed,

649
00:33:02,811 --> 00:33:06,793
the component, the MAP container,

650
00:33:06,993 --> 00:33:08,747
occupies all the space available,

651
00:33:08,947 --> 00:33:11,945
with the exception of a small
margin at the top and on the left.

652
00:33:13,764 --> 00:33:15,930
We then add a section

653
00:33:16,130 --> 00:33:18,350
to host the JavaScript code

654
00:33:18,550 --> 00:33:20,889
with script tags

655
00:33:21,953 --> 00:33:23,693
and in this script section,

656
00:33:23,893 --> 00:33:28,081
we will add the code that allows
to create the map object,

657
00:33:28,281 --> 00:33:30,398
so we create a new OL.map object,

658
00:33:30,598 --> 00:33:32,229
so OL for openlayers,

659
00:33:32,429 --> 00:33:35,203
so a MAP object of the
Openlayers library

660
00:33:35,954 --> 00:33:38,744
which we assign to the map variable

661
00:33:38,944 --> 00:33:40,754
and this object, in its properties,

662
00:33:40,954 --> 00:33:43,368
we say that the target that
we aim at

663
00:33:43,568 --> 00:33:45,351
is the container called map,

664
00:33:45,551 --> 00:33:49,559
so we will put this cartographic element

665
00:33:49,759 --> 00:33:52,699
in the container, in the div which
is the IDMap

666
00:33:53,290 --> 00:33:56,088
and then we define a view for this map,

667
00:33:56,288 --> 00:33:57,841
so we create a new view

668
00:33:58,041 --> 00:34:05,123
which is centered on the latitude, 
longitude point 55 47 and -4 67

669
00:34:05,323 --> 00:34:07,923
which corresponds approximately
to the center of the island of Mahé

670
00:34:08,459 --> 00:34:10,476
and this view, we also define,

671
00:34:10,707 --> 00:34:13,966
we can define a level of 
zoom as attribute,

672
00:34:14,602 --> 00:34:16,078
here the value 12.

673
00:34:17,626 --> 00:34:20,367
For something to be 
displayed in this map

674
00:34:20,768 --> 00:34:23,536
we will add a layer,

675
00:34:23,736 --> 00:34:26,613
in this case the OpenStreetMap layer.

676
00:34:27,196 --> 00:34:30,495
So we create a new tile layer

677
00:34:30,695 --> 00:34:36,029
with as OSM source,

678
00:34:36,229 --> 00:34:38,261
which is the OpenStreetMap source

679
00:34:38,814 --> 00:34:41,864
and we add this OSM layer

680
00:34:42,064 --> 00:34:43,701
to the map object

681
00:34:43,901 --> 00:34:46,111
which is the Openlayers map.

682
00:34:47,605 --> 00:34:48,686
And we can see

683
00:34:48,886 --> 00:34:51,929
that if we open now this HTML file

684
00:34:52,164 --> 00:34:54,697
in a browser like Google Chrome,

685
00:34:55,319 --> 00:34:58,907
we have the OpenStreetMap map of
the Seychelles

686
00:34:59,107 --> 00:34:59,804
of the island of Mahé,

687
00:35:00,004 --> 00:35:02,001
which appears in the web page.

688
00:35:03,228 --> 00:35:05,056
To add some content

689
00:35:05,256 --> 00:35:07,033
and interactivity to this map,

690
00:35:07,233 --> 00:35:10,948
we will now have to develop a 
little the JavaScript code

691
00:35:11,714 --> 00:35:13,868
and it is the reason why 
we are going to remove

692
00:35:14,068 --> 00:35:16,070
this script from the web page

693
00:35:16,270 --> 00:35:19,543
to host it in a JavaScript file

694
00:35:19,743 --> 00:35:23,566
that we will call 
Openlayers_Seychelles.js

695
00:35:24,566 --> 00:35:26,931
and we will reference this file

696
00:35:27,131 --> 00:35:29,369
in the header of the page.

697
00:35:30,974 --> 00:35:34,486
By taking this JavaScript code,

698
00:35:34,686 --> 00:35:35,976
we will start by separating

699
00:35:36,176 --> 00:35:38,403
the definition of the map variable

700
00:35:38,603 --> 00:35:40,870
of the use of this variable

701
00:35:41,070 --> 00:35:45,628
to assign it the new Openlayers
map that we created,

702
00:35:46,707 --> 00:35:48,307
which allows to put

703
00:35:48,507 --> 00:35:50,903
the creation and addition 
code of the map

704
00:35:51,103 --> 00:35:53,667
of the OpenStreetMap layer

705
00:35:54,303 --> 00:35:56,878
in a function that will be executed

706
00:35:57,078 --> 00:35:59,798
only once when the page is loaded

707
00:35:59,998 --> 00:36:02,152
and once the page is loaded,
we execute the code

708
00:36:02,352 --> 00:36:03,450
which adds the map,

709
00:36:03,650 --> 00:36:05,779
which adds the OpenStreetMap layer

710
00:36:05,979 --> 00:36:09,741
with the "document ready" key words, etc.

711
00:36:10,585 --> 00:36:13,229
Let's also note that the symbol $

712
00:36:13,429 --> 00:36:16,706
refers to a JavaScript library

713
00:36:16,906 --> 00:36:17,992
which is called jQuery,

714
00:36:18,759 --> 00:36:21,241
a library that we needed to

715
00:36:21,441 --> 00:36:23,803
validly use this symbol,

716
00:36:24,859 --> 00:36:27,482
a library that had to be 
added in the HTML page,

717
00:36:27,682 --> 00:36:29,318
in the references.

718
00:36:29,917 --> 00:36:31,273
Let's suppose now

719
00:36:31,473 --> 00:36:35,454
that we want to enrich our 
map a little

720
00:36:35,654 --> 00:36:38,535
for example by adding the districts
of the Seychelles

721
00:36:38,735 --> 00:36:42,704
which we stored here in a JSON file

722
00:36:42,904 --> 00:36:47,577
which is located, we see it in 
the URL, in a folder GeoJSON

723
00:36:47,777 --> 00:36:49,384
which is itself

724
00:36:49,584 --> 00:36:53,921
at the same level as our JavaScript
file and our HTML page.

725
00:36:54,634 --> 00:36:57,464
So we create a vector layer,

726
00:36:57,664 --> 00:37:00,825
with a style that we 
will have to define,

727
00:37:01,025 --> 00:37:04,009
and we define this GeoJSON file 

728
00:37:04,209 --> 00:37:05,625
as the source of this vector layer,

729
00:37:06,180 --> 00:37:08,175
and we add the layer to the map.

730
00:37:09,282 --> 00:37:12,520
We define here the symbology

731
00:37:12,720 --> 00:37:14,333
for the district layer

732
00:37:14,533 --> 00:37:16,200
by creating a new style

733
00:37:16,400 --> 00:37:18,885
composed of a filling,

734
00:37:19,085 --> 00:37:20,656
so a filling object

735
00:37:20,856 --> 00:37:24,462
created from a color and a transparency,

736
00:37:25,049 --> 00:37:27,143
and a stroke object

737
00:37:27,343 --> 00:37:29,252
which defines the line style

738
00:37:29,465 --> 00:37:31,395
for the polygon border

739
00:37:31,778 --> 00:37:34,195
also based on a color, a transparency,

740
00:37:34,395 --> 00:37:35,427
and a width.

741
00:37:36,646 --> 00:37:38,955
We can do the same thing

742
00:37:39,155 --> 00:37:41,095
to add the road layer,

743
00:37:41,295 --> 00:37:42,687
the hotel layer

744
00:37:43,289 --> 00:37:46,626
and then if we really want 
to add interactivity,

745
00:37:47,503 --> 00:37:49,564
we could write the code,

746
00:37:49,764 --> 00:37:52,162
we're not going to do it here because
it gets a bit complicated

747
00:37:52,362 --> 00:37:54,334
but we could write the code which allows,

748
00:37:54,534 --> 00:37:57,316
when we click on a district for example

749
00:37:57,516 --> 00:37:58,606
or on a hotel

750
00:37:58,806 --> 00:38:00,213
to have a small pop-up window

751
00:38:00,413 --> 00:38:01,650
which opens in the web page

752
00:38:01,850 --> 00:38:04,203
And which gives the list of properties,

753
00:38:04,403 --> 00:38:05,872
of hotel attributes,

754
00:38:06,072 --> 00:38:07,511
of district, etc.

755
00:38:08,616 --> 00:38:10,471
But for all this to work,

756
00:38:10,671 --> 00:38:16,232
it is still necessary to make
these JSON files accessible,

757
00:38:16,432 --> 00:38:21,292
so we have to be able to expose
them on a server,

758
00:38:21,492 --> 00:38:24,336
in this case we can simply use 
a simple static server

759
00:38:24,536 --> 00:38:27,422
which is not going to make manipulations

760
00:38:27,622 --> 00:38:29,372
and that will simply serve these files.

761
00:38:30,012 --> 00:38:32,695
It is a static server 
that we can create

762
00:38:32,895 --> 00:38:34,320
with the node.js library,

763
00:38:34,520 --> 00:38:35,850
so also JavaScript,

764
00:38:36,807 --> 00:38:39,741
in a file that we will call server.js

765
00:38:40,487 --> 00:38:42,054
and we see that in fact,

766
00:38:42,254 --> 00:38:45,108
in five lines of code, 
we create this server.

767
00:38:45,308 --> 00:38:48,628
A node variant

768
00:38:48,828 --> 00:38:50,181
called the Node Express

769
00:38:50,394 --> 00:38:55,661
which is a simplified 
form of the Node server

770
00:38:57,273 --> 00:38:58,919
which we defined in fact,

771
00:39:00,356 --> 00:39:04,005
the public folder where 
the files are located

772
00:39:04,205 --> 00:39:05,838
which will be made accessible,

773
00:39:06,050 --> 00:39:07,313
which is in this case

774
00:39:08,271 --> 00:39:11,966
the folder where this server.js
file is located

775
00:39:12,610 --> 00:39:16,284
and the entire tree diagram 
that is located downstream.

776
00:39:17,463 --> 00:39:22,504
We will say that the server
must listen to port 3000

777
00:39:23,082 --> 00:39:25,326
and then send a message to the console

778
00:39:25,526 --> 00:39:27,320
to say that the server has started

779
00:39:27,520 --> 00:39:28,934
and that it has to listen to port 3000.

780
00:39:29,663 --> 00:39:31,677
So if you take a quick look

781
00:39:31,877 --> 00:39:34,020
on the tree diagram of the 
files that we have created,

782
00:39:34,220 --> 00:39:38,818
so we have in the
Openlayers_Samples folder

783
00:39:39,018 --> 00:39:42,485
these three JavaScript HTML files

784
00:39:42,685 --> 00:39:45,384
for the page web itself

785
00:39:45,584 --> 00:39:47,876
server.js for the server,

786
00:39:48,076 --> 00:39:51,623
the various modules of 
the node library

787
00:39:52,304 --> 00:39:55,042
which will enable to run this server,

788
00:39:55,242 --> 00:39:57,162
and in a GeoJSON file,

789
00:39:57,362 --> 00:40:00,444
we will find the three files
containing the districts,

790
00:40:00,644 --> 00:40:02,733
the hotels and the roads 
of the Seychelles.

791
00:40:03,383 --> 00:40:05,585
We see here that the next step

792
00:40:05,785 --> 00:40:08,154
consists, in a terminal window,

793
00:40:08,367 --> 00:40:10,093
to go down in the tree diagram

794
00:40:11,118 --> 00:40:13,935
to this Openlayers_Samples folder

795
00:40:14,135 --> 00:40:18,382
and then send the command, 
node server.js

796
00:40:18,806 --> 00:40:20,765
which will launch the node server

797
00:40:20,965 --> 00:40:22,379
and we have the message

798
00:40:23,459 --> 00:40:25,063
that this server has started

799
00:40:25,263 --> 00:40:27,971
and that it listens to 
queries on port 3000.

800
00:40:29,103 --> 00:40:30,934
To load our web page,

801
00:40:31,134 --> 00:40:35,879
we have to open a web browser

802
00:40:36,079 --> 00:40:40,246
and type localhost as url
 
803
00:40:40,446 --> 00:40:42,104
since we are on a local machine,

804
00:40:42,304 --> 00:40:45,978
:3000 to search port 3000,

805
00:40:46,178 --> 00:40:48,412
so the node server that we have
just started

806
00:40:49,048 --> 00:40:54,947
and then go to the
Openlayers_Seychelles.html page

807
00:40:55,147 --> 00:40:58,137
which will execute the associated
JavaScript code,

808
00:40:58,337 --> 00:41:00,983
which will itself go 
fetch the GeoJSON files

809
00:41:01,183 --> 00:41:02,962
and that will add them on the map,

810
00:41:03,162 --> 00:41:07,694
so that we find here the districts,

811
00:41:07,894 --> 00:41:09,433
roads and hotels.

812
00:41:10,163 --> 00:41:11,611
And as we said earlier,

813
00:41:11,811 --> 00:41:14,222
we can develop this code

814
00:41:14,422 --> 00:41:17,693
to add interactivity to this map

815
00:41:18,448 --> 00:41:22,348
in all kinds of forms.

816
00:41:32,442 --> 00:41:33,742
There we go! In this lesson,

817
00:41:33,942 --> 00:41:36,125
we have seen various aspects

818
00:41:36,325 --> 00:41:38,669
related to the client / server architecture

819
00:41:38,869 --> 00:41:39,790
first of all in general

820
00:41:39,990 --> 00:41:42,493
then specifically in the GIS world,

821
00:41:43,137 --> 00:41:46,035
including the exchange protocols

822
00:41:46,235 --> 00:41:49,384
based on the ODBC software

823
00:41:49,584 --> 00:41:52,398
which actually allows to transmit
SQL queries

824
00:41:52,598 --> 00:41:54,970
from the client to the server

825
00:41:55,170 --> 00:41:56,257
and then retrieve

826
00:41:56,457 --> 00:41:59,141
the data selected at 
the data server level

827
00:41:59,812 --> 00:42:01,798
and the HTTP protocol

828
00:42:01,998 --> 00:42:05,534
which allows to send parameterized
HTTP requests

829
00:42:05,734 --> 00:42:07,192
either to an HTTP server

830
00:42:07,392 --> 00:42:11,492
or to WMS, WFS geoservices.

831
00:42:13,056 --> 00:42:16,109
We also saw a little more specifically

832
00:42:16,309 --> 00:42:20,544
the basics of building an HTML page

833
00:42:20,744 --> 00:42:23,807
and then how we could enrich the HTML

834
00:42:24,007 --> 00:42:25,351
with JavaScript

835
00:42:25,551 --> 00:42:29,101
to make GIS web interfaces.

836
00:42:29,820 --> 00:42:30,560
And finally

837
00:42:30,760 --> 00:42:32,152
we saw a small example

838
00:42:32,352 --> 00:42:33,634
of how concretely

839
00:42:33,834 --> 00:42:36,799
we could develop the JavaScript code

840
00:42:36,986 --> 00:42:38,097
to go in the direction

841
00:42:38,297 --> 00:42:41,259
of an interactive map on the web.

