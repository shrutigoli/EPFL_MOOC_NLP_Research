1
00:00:11,510 --> 00:00:12,010
Bonjour.

2
00:00:13,140 --> 00:00:17,230
On entend souvent parler du mot, Arduino,
dans le monde des micro contrôleurs

3
00:00:17,230 --> 00:00:20,478
et en particulier en rapport avec
les enseignes et afficheurs à LED.

4
00:00:20,478 --> 00:00:23,410
De quoi s'agit-il?

5
00:00:23,410 --> 00:00:26,680
Nous allons voir trois
significations du mot, Arduino,

6
00:00:26,680 --> 00:00:32,430
puis nous allons voir comment nous pouvons
l'utiliser pour programmer des enseignes,

7
00:00:32,430 --> 00:00:35,400
en comprenant la structure du programme,
comment est-ce

8
00:00:35,400 --> 00:00:39,530
qu'on utilise les entrées et sorties
et comment est-ce qu'on gère le temps.

9
00:00:39,530 --> 00:00:42,640
Il est indiscutable que
l'Arduino a participé à rendre

10
00:00:42,640 --> 00:00:46,250
populaires les micro contrôleurs
depuis une bonne dizaine d'années.

11
00:00:47,710 --> 00:00:51,200
Mais qu'est-ce qui se cache
derrière ce nom, Arduino?

12
00:00:51,200 --> 00:00:54,210
D'une part,
il s'agit d'une carte à micro contrôleurs,

13
00:00:54,210 --> 00:00:58,340
d'autre part il s'agit d'un environnement
de développement et finalement il s'agit

14
00:00:58,340 --> 00:01:01,870
aussi d'une librairie pour micro
contrôleurs, une sorte de langage.

15
00:01:03,040 --> 00:01:05,330
Voilà la photo d'une carte Arduino.

16
00:01:05,330 --> 00:01:08,940
C'est la plus connue, c'est l'Arduino UNO.

17
00:01:08,940 --> 00:01:14,530
On y trouve bien évidemment
un micro contrôleur,

18
00:01:14,530 --> 00:01:18,180
en l'occurence un, AVR,
du fabricant Atmel, l'ATmega328.

19
00:01:21,190 --> 00:01:29,090
On y trouve un connecteur normalisé avec
deux rangées de connecteurs, ici et là.

20
00:01:29,090 --> 00:01:32,650
À noter que cette disposition des broches,

21
00:01:33,740 --> 00:01:36,570
qui permet donc d'accéder aux
broches du micro contrôleur,

22
00:01:36,570 --> 00:01:41,130
est devenue un standard de fait,
utilisé par beaucoup d'autres cartes.

23
00:01:42,720 --> 00:01:49,030
On y trouve également une liaison série,
qui va permettre de se connecter à un PC,

24
00:01:49,030 --> 00:01:52,170
via un circuit d'interface
qui se trouve ici,

25
00:01:52,170 --> 00:01:56,100
donc communication entre le
PC et le micro contrôleur.

26
00:01:57,230 --> 00:02:00,090
Il y a également un connecteur
d'alimentation qui permet d'avoir une

27
00:02:00,090 --> 00:02:06,250
alimentation externe, avec un régulateur
qui permet d'avoir une tension stabilisée,

28
00:02:06,250 --> 00:02:09,050
sur la carte et sur le microcontrôleur.

29
00:02:09,050 --> 00:02:13,380
Il s'agit de matériel libre,
c'est-à-dire que les plans sont publics,

30
00:02:13,380 --> 00:02:17,300
et par conséquent beaucoup de fabricants
produisent des cartes de ce type-là,

31
00:02:17,300 --> 00:02:20,880
à des prix défiant toute concurrence.

32
00:02:20,880 --> 00:02:23,255
On trouve également de nombreux, shields,

33
00:02:23,255 --> 00:02:28,530
c'est-à-dire des cartes filles qui
vont se poser par-dessus l'Arduino,

34
00:02:28,530 --> 00:02:33,160
et qu'on pourra empiler pour obtenir
une fonctionnalité souhaitée.

35
00:02:33,160 --> 00:02:37,680
La deuxième signification du mot,
Arduino, c'est le logiciel, Arduino,

36
00:02:37,680 --> 00:02:40,680
dont voilà une copie d'écran.

37
00:02:40,680 --> 00:02:46,470
Il s'agit avant tout d'un éditeur
mais il y a aussi la fonction

38
00:02:46,470 --> 00:02:52,820
de la compilation, cachée derrière
cette touche, et la fonction

39
00:02:52,820 --> 00:02:57,720
d'envoi du programme à l'Arduino,
la fonction, Upload.

40
00:02:57,720 --> 00:03:01,570
Il s'agit d'un programme écrit en Java.

41
00:03:01,570 --> 00:03:04,040
Il utilise le compilateur libre du GCC.

42
00:03:05,700 --> 00:03:10,530
Il tourne sur tous les systèmes
d'exploitation disponibles sur les PC,

43
00:03:10,530 --> 00:03:15,880
et il s'agit d'un logiciel libre,
open source.

44
00:03:15,880 --> 00:03:20,020
Il y a également des versions pour
d'autres micro contrôleurs, par exemple,

45
00:03:20,020 --> 00:03:24,180
le programme Energia qui est
similaire au programme Arduino,

46
00:03:24,180 --> 00:03:29,770
mais qui s'adapte au processeur
MSP430 de Texas Instrument.

47
00:03:29,770 --> 00:03:34,040
Parfois, on entend dire qu'un
programme a été écrit en Arduino.

48
00:03:34,040 --> 00:03:35,770
Alors il ne s'agit pas,
à proprement parler,

49
00:03:35,770 --> 00:03:40,140
d'un langage de programmation,
mais plus exactement de librairie.

50
00:03:40,140 --> 00:03:45,380
La librairie Arduino est un ensemble
de procédures qui ont été écrites en C,

51
00:03:45,380 --> 00:03:46,670
ou plus exactement, en C++.

52
00:03:46,670 --> 00:03:50,800
Elles s'inspirent fortement de
l'environnement qui s'appelle,

53
00:03:50,800 --> 00:03:55,980
Wiring, qui a été développé un petit
peu avant la sortie de l'Arduino.

54
00:03:55,980 --> 00:03:57,280
Le but de ces librairies,

55
00:03:57,280 --> 00:04:03,360
c'est de cacher la complexité du micro
contrôleur et rendre facile son usage.

56
00:04:03,360 --> 00:04:07,600
Cela permet aussi d'apporter une certaine
compatibilité entre différents micro

57
00:04:07,600 --> 00:04:13,080
contrôleurs, puisqu'il existe des
versions d'Arduino pour plusieurs micro

58
00:04:13,080 --> 00:04:18,850
contrôleurs qui utilisent, évidemment, les
mêmes procédures, la même terminologie.

59
00:04:18,850 --> 00:04:22,320
Nous allons voir maintenant la structure
générale d'un programme Arduino,

60
00:04:23,830 --> 00:04:27,050
les entrées-sorties et
la gestion du temps.

61
00:04:27,050 --> 00:04:33,020
Pour écrire un programme en Arduino,
il n'y a pas besoin de procédure, main.

62
00:04:34,530 --> 00:04:39,930
Il faut simplement écrire deux procédures
qui s'appellent, setup et loop.

63
00:04:39,930 --> 00:04:45,360
Et on comprend que ces deux
procédures s'exécutent, l'une, setup,

64
00:04:45,360 --> 00:04:51,270
au début du programme, l'autre,
loop, en permanence à la suite.

65
00:04:51,270 --> 00:04:55,540
Voilà donc un programme Arduino correct,
mais qui ne fait rien,

66
00:04:55,540 --> 00:05:00,370
avec une procédure, setup, qui est vide
et une procédure, loop, qui est vide.

67
00:05:01,680 --> 00:05:05,305
On pourrait donc imaginer que
l'organigramme d'un programme Arduino

68
00:05:05,305 --> 00:05:08,505
se présente de cette manière,
après le, Reset, on exécute,

69
00:05:08,505 --> 00:05:13,145
setup, puis on exécute,
loop, en permanence.

70
00:05:13,145 --> 00:05:14,215
On tourne dans cette boucle.

71
00:05:15,855 --> 00:05:20,885
Pour être plus précis,
les instructions vont être ajoutées

72
00:05:20,885 --> 00:05:29,070
par l'environnement Arduino,
avant, setup et avant, loop.

73
00:05:29,070 --> 00:05:34,430
Et ce sont ces procédures qui vont
par exemple permettre d'utiliser

74
00:05:34,430 --> 00:05:38,480
des procédures de gestion du temps de
l'Arduino que nous verrons tout à l'heure.

75
00:05:38,480 --> 00:05:42,360
L'utilisation des entrées et sorties
se fait par l'intermédiaire de trois

76
00:05:42,360 --> 00:05:46,700
procédures, pinMode, digitalWrite, et,

77
00:05:46,700 --> 00:05:51,370
digitalRead ; pinMode, permet de préciser

78
00:05:52,530 --> 00:05:57,080
l'usage, le mode
d'utilisation d'une broche,

79
00:05:57,080 --> 00:06:01,930
par exemple une entrée ou
une sortie ; digitalWrite,

80
00:06:01,930 --> 00:06:07,199
permet d'écrire une valeur,
un zéro ou un, 1, dans une pin donnée ;

81
00:06:07,199 --> 00:06:13,400
digitalRead, qui agit sur
une broche particulière

82
00:06:13,400 --> 00:06:17,920
va nous rendre une valeur qui
sera égale à zéro ou à, 1.

83
00:06:17,920 --> 00:06:24,380
À noter que pin désigne
un numéro de broche.

84
00:06:24,380 --> 00:06:28,720
Ces numéros ont été choisis un
peu arbitrairement en fonction

85
00:06:28,720 --> 00:06:31,730
des connecteurs de la carte Arduino.

86
00:06:31,730 --> 00:06:34,600
Ce sont des numéros, 2, 3, 4, 5.

87
00:06:34,600 --> 00:06:39,910
Sur d'autres environnements comme
le MSP430, on utilise généralement

88
00:06:39,910 --> 00:06:45,530
des numéros symboliques
avec les numéros des ports.

89
00:06:45,530 --> 00:06:48,590
Voici un exemple qui utilise
ces trois procédures.

90
00:06:48,590 --> 00:06:53,900
Dans le, setup,
nous allons donner le mode d'une

91
00:06:53,900 --> 00:06:59,420
broche qui sera en sortie,
d'une autre qui sera en entrée.

92
00:06:59,420 --> 00:07:03,580
On aura une diode lumineuse,
ici, et un bouton poussoir, ici.

93
00:07:04,720 --> 00:07:08,600
Et dans la procédure,
loop, on va simplement lire

94
00:07:09,890 --> 00:07:15,390
le bouton poussoir, puis écrire la
valeur lue, sur la diode lumineuse.

95
00:07:16,440 --> 00:07:20,880
On aura ainsi le bouton poussoir qui
fera changer d'état la diode lumineuse.

96
00:07:21,880 --> 00:07:25,380
Pour pouvoir programmer de
petites enseignes à LED,

97
00:07:25,380 --> 00:07:28,780
il nous manque encore la gestion du temps.

98
00:07:28,780 --> 00:07:30,730
La simple procédure, delay,

99
00:07:30,730 --> 00:07:36,200
qui permet d'attendre un certain nombre
de millisecondes va nous suffire.

100
00:07:36,200 --> 00:07:39,748
Voilà un programme qui est
le classique en Arduino,

101
00:07:39,748 --> 00:07:44,640
le Blink,
c'est-à-dire faire clignoter une LED.

102
00:07:44,640 --> 00:07:48,900
Le mode de la broche pour la LED c'est,
sortie,

103
00:07:50,070 --> 00:07:54,928
et en permanence,
on va écrire une valeur sur la LED,

104
00:07:54,928 --> 00:07:59,260
attendre une demi-seconde,

105
00:07:59,260 --> 00:08:04,240
écrire une autre valeur sur la LED,
attendre une demi-seconde.

106
00:08:04,240 --> 00:08:09,500
Le tout va donc prendre une seconde,
on aura un clignotement à un hertz,

107
00:08:10,500 --> 00:08:12,920
qui produira ce type de signaux.

108
00:08:14,830 --> 00:08:17,330
Nous avons tout ce qu'il nous faut

109
00:08:17,330 --> 00:08:22,560
pour programmer des animations
sur de petites enseignes à LED.

110
00:08:22,560 --> 00:08:27,590
Choisir le mode de nos broches,
en particulier les sorties pour les LED,

111
00:08:28,750 --> 00:08:32,570
écrire des valeurs et
attendre un certain temps.

112
00:08:34,800 --> 00:08:37,460
Nous avons donc vu les trois
significations du mot,

113
00:08:37,460 --> 00:08:41,020
Arduino, d'une part une
carte à microcontrôleur,

114
00:08:41,020 --> 00:08:45,580
d'autre part un environnement de
programmation pour ces cartes sur PC,

115
00:08:45,580 --> 00:08:50,700
et finalement la librairie
Arduino qui nous permet, grâce à,

116
00:08:50,700 --> 00:08:56,590
setup, et, loop, pour les structures
de contrôle d'écrire des programmes

117
00:08:56,590 --> 00:09:02,440
utilisant la gestion des entrées-sorties,
digitalRead,

118
00:09:02,440 --> 00:09:07,010
digitalWrite et pinMode,
et la gestion du temps avec les, delay.

119
00:09:07,010 --> 00:09:11,540
Nous pourrons ainsi écrire de
petits programmes pour piloter

120
00:09:11,540 --> 00:09:12,540
des enseignes à LED.