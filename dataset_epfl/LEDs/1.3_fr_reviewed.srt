1
00:00:00,025 --> 00:00:10,420
[AUDIO_VIDE]

2
00:00:10,420 --> 00:00:11,500
Bonjour.

3
00:00:11,500 --> 00:00:16,670
Dans ce cours, nous allons nous
intéresser aux symboles et numérations

4
00:00:16,670 --> 00:00:22,350
binaires, à l'arithmétique
modulaire et aux nombres signés.

5
00:00:22,350 --> 00:00:26,560
Ensuite nous verrons
les types du langage C,

6
00:00:26,560 --> 00:00:29,520
l'hexadécimal et le codage des caractères.

7
00:00:30,900 --> 00:00:36,530
Lorsque nous regardons une LED dans
une enseigne ou afficheur à LED,

8
00:00:36,530 --> 00:00:41,060
nous remarquons que la LED est
soit allumée, soit éteinte.

9
00:00:41,060 --> 00:00:46,030
Les deux états binaires peuvent
être mémorisés dans un dispositif

10
00:00:46,030 --> 00:00:48,360
appelé bascule.

11
00:00:48,360 --> 00:00:54,620
Le champ de bits que voici peut à la
fois représenter l'état de huit lettres,

12
00:00:56,220 --> 00:01:01,620
le code d'un caractère ou
un nombre écrit en base 2.

13
00:01:01,620 --> 00:01:05,480
Nous savons que l'ordinateur
travaille en base 2.

14
00:01:05,480 --> 00:01:10,380
La correspondance entre la base 10

15
00:01:10,380 --> 00:01:14,850
et la base 2.

16
00:01:14,850 --> 00:01:19,820
Comme nous le voyons selon ce tableau,

17
00:01:19,820 --> 00:01:24,490
le nombre 10 en base 10
s'écrira en base 2, 1010.

18
00:01:24,490 --> 00:01:30,520
Cela signifie que chaque
position possède un point.

19
00:01:30,520 --> 00:01:35,330
Ici nous avons les rangs ou les positions.

20
00:01:35,330 --> 00:01:38,170
La position 3 a pour

21
00:01:40,590 --> 00:01:44,190
poids 8 en base 2 et 1000 en base 10.

22
00:01:44,190 --> 00:01:48,360
Le nombre 1234 s'écrira

23
00:01:50,940 --> 00:01:56,620
en base 2, 10011010010.

24
00:01:56,620 --> 00:02:01,160
Ici nous voyons que le rang

25
00:02:01,160 --> 00:02:06,430
1 qui a pour poids 2 est représenté.

26
00:02:07,580 --> 00:02:15,721
Le rang 4 qui a pour poids
16 est ici représenté.

27
00:02:15,721 --> 00:02:21,480
Les rangs 6 et 7 qui ont
pour poids 64 et 128 sont

28
00:02:23,160 --> 00:02:28,320
ici représentés,
et le rang 10 qui a pour poids 1024.

29
00:02:28,320 --> 00:02:33,260
La somme des différents

30
00:02:33,260 --> 00:02:37,240
poids donne bien le nombre 1234.

31
00:02:37,240 --> 00:02:42,650
Nous savons que les mathématiciens
utilisent les nombres.

32
00:02:42,650 --> 00:02:43,770
Dans les formules mathétiques,

33
00:02:43,770 --> 00:02:48,050
nous pouvons utiliser des nombres
aussi grands que nous le voulons.

34
00:02:48,050 --> 00:02:51,500
Malheureusement, lorsque ces
nombres doivent être représentés

35
00:02:51,500 --> 00:02:55,870
à l'intérieur de l'ordinateur,
il doit être limité en taille.

36
00:02:55,870 --> 00:03:00,940
Conséquences liées à cette
limitation de la taille des nombres?

37
00:03:00,940 --> 00:03:03,900
Cela nous introduit à
l'arithmétique modulaire.

38
00:03:03,900 --> 00:03:07,840
Pour le montrer, voyons les lois de
l'arithmétique modulaire sur trois bits.

39
00:03:09,100 --> 00:03:14,360
Avec trois bits, nous pouvons
représenter les nombres de 0 à 7,

40
00:03:14,360 --> 00:03:16,355
ce qui nous donne huit états.

41
00:03:16,355 --> 00:03:21,490
Amusons-nous à faire cette
addition que voici sur trois bits.

42
00:03:21,490 --> 00:03:25,660
Le nombre 3 représenté par 011

43
00:03:25,660 --> 00:03:30,669
plus le nombre 2, 010.

44
00:03:32,120 --> 00:03:34,060
Nous le voyons bien sur le tableau ici.

45
00:03:36,340 --> 00:03:38,920
Les lois de l'addition sont
données dans la table que voici.

46
00:03:38,920 --> 00:03:43,880
1 plus 0 nous donne 1, retenue 0.

47
00:03:43,880 --> 00:03:47,604
1 plus 1 nous donne 0, retenue 1.

48
00:03:49,000 --> 00:03:52,730
Forts de cette loi,
faisons notre addition.

49
00:03:52,730 --> 00:03:56,130
1 plus 0 nous donne 1.

50
00:03:56,130 --> 00:04:01,640
1 plus 1 nous donne 0, retenue 1.

51
00:04:01,640 --> 00:04:07,220
1 de retenue plus 0 plus 0 nous donne 1.

52
00:04:07,220 --> 00:04:13,080
Nous voyons bien que 101 selon
le tableau correspond bien à 5.

53
00:04:13,080 --> 00:04:15,170
Le résultat est juste.

54
00:04:16,330 --> 00:04:18,950
Effectuons une deuxième addition.

55
00:04:18,950 --> 00:04:20,730
Additionnons 6 et 3.

56
00:04:20,730 --> 00:04:26,255
Nous obtenons 0 plus 1 nous donne 1.

57
00:04:26,255 --> 00:04:31,045
1 plus 1 nous donne 0, retenue 1.

58
00:04:31,045 --> 00:04:35,335
1 de retenue plus 1 plus 0 nous donne 0.

59
00:04:35,335 --> 00:04:38,685
Et nous avons 1 de retenue.

60
00:04:39,745 --> 00:04:46,995
Le résultat trouvé sur trois bits est 001,
ce qui nous donne 1.

61
00:04:46,995 --> 00:04:51,270
Nous voyons que le
résultat n'est pas juste

62
00:04:51,270 --> 00:04:54,010
parce qu'il y a dépassement de capacité.

63
00:04:54,010 --> 00:04:57,780
Effectivement, 3 plus 6 nous donne 9.

64
00:04:57,780 --> 00:05:01,830
Or comme nous l'avons dit au départ,
sur trois bits nous ne pouvons représenter

65
00:05:01,830 --> 00:05:05,450
que les nombres compris
entre 0 et 7 inclus.

66
00:05:05,450 --> 00:05:11,500
Il y a dépassement de capacité,
ce qui nous donne un résultat erroné.

67
00:05:12,860 --> 00:05:17,608
Représentons les nombres sur cette

68
00:05:17,608 --> 00:05:22,470
roue que voici.

69
00:05:22,470 --> 00:05:25,110
0, 1, 2, 3, 4, 5, 6, 7,
puis nous revenons à 0.

70
00:05:25,110 --> 00:05:31,310
Mais remarquons qu'ici nous avons une zone
qui provoque le dépassement de capacité.

71
00:05:32,405 --> 00:05:38,395
Ainsi, d'après notre première opération,
nous avons 3 plus 2.

72
00:05:38,395 --> 00:05:43,805
Pour faire une addition, nous allons
nous déplacer dans le sens horaire, et

73
00:05:43,805 --> 00:05:47,895
pour faire une soustraction, nous allons
nous déplacer dans le sens contraire.

74
00:05:49,075 --> 00:05:55,630
Ainsi, 3 plus 1 plus 2
nous donnent bien 5.

75
00:05:55,630 --> 00:05:57,800
Le résultat est correct.

76
00:05:59,280 --> 00:06:02,270
Par contre 6 plus 3, donc

77
00:06:03,700 --> 00:06:08,980
nous allons faire 6 plus
1 plus 2 plus 3 nous

78
00:06:08,980 --> 00:06:13,585
donne bien le résultat 1 que nous avons
trouvé précédemment, mais comme nous avons

79
00:06:13,585 --> 00:06:19,325
franchi la zone de dépassement de
capacité, le résultat est donc faux.

80
00:06:20,405 --> 00:06:27,895
Ceci peut être encore expliqué avec
cette représentation en escalier.

81
00:06:27,895 --> 00:06:33,310
Nous avons 0, 1, 2, 3, 4, 5, 6, 7.

82
00:06:33,310 --> 00:06:37,270
Ensuite nous retombons à 0 pour le 8.

83
00:06:37,270 --> 00:06:45,330
Le 9 est bien 1, 10, 11, 12, 13,
14, 15 et nous revenons ici à 0.

84
00:06:45,330 --> 00:06:49,220
Effectuons à présent une soustraction.

85
00:06:50,280 --> 00:06:55,030
Nous avons 6 moins 3.

86
00:06:55,030 --> 00:06:58,080
6 moins 1 moins 2 moins 3.

87
00:06:58,080 --> 00:07:02,830
On a bien le résultat 3, ce qui est juste.

88
00:07:02,830 --> 00:07:07,210
La deuxième soustraction est 3 moins 5.

89
00:07:07,210 --> 00:07:15,325
Nous avons 3 moins 1 moins
2 moins 3 moins 4 moins 5.

90
00:07:15,325 --> 00:07:19,485
Nous avons comme résultat 6,

91
00:07:19,485 --> 00:07:24,985
mais nous savons que nous avons franchi
la ligne du dépassement de capacité,

92
00:07:24,985 --> 00:07:28,175
donc le résultat est faux évidemment.

93
00:07:29,385 --> 00:07:33,455
Les nombres négatifs et les
nombres positifs sont appelés

94
00:07:34,525 --> 00:07:37,375
dans le langage informatique
les nombres signés.

95
00:07:38,525 --> 00:07:45,335
Ainsi, nous avons sur trois bits
les nombres signés 0, 1, 2, 3 et

96
00:07:47,505 --> 00:07:52,710
les nombres négatifs -4, -3, -2, -1.

97
00:07:52,710 --> 00:07:58,390
Nous pouvons, sur cette fonction en
escalier, montrer ici les nombres

98
00:07:59,880 --> 00:08:05,750
positifs et ici les
nombres négatifs en rouge.

99
00:08:05,750 --> 00:08:10,140
Nous remarquons ici la zone
de dépassement de capacité.

100
00:08:10,140 --> 00:08:15,140
Elle se situe entre -4 et 3.

101
00:08:15,140 --> 00:08:18,498
Effectuons quelques opérations
avec les nombres signés.

102
00:08:18,498 --> 00:08:22,650
Nous avons -1 plus 3.

103
00:08:22,650 --> 00:08:28,305
Le résultat est bien 2,
ce qui est correct.

104
00:08:28,305 --> 00:08:34,700
-1 plus 1 plus 2 plus 3,
nous avons bien 2.

105
00:08:34,700 --> 00:08:39,960
Nous n'avons pas franchi la zone
de dépassement de capacité,

106
00:08:39,960 --> 00:08:41,630
donc le résultat est correct.

107
00:08:41,630 --> 00:08:48,900
Par contre,
l'addition 2 plus 3 nous donne -3.

108
00:08:48,900 --> 00:08:55,020
2 plus 1 plus 2 plus 3,

109
00:08:55,020 --> 00:08:59,110
nous avons bien le résultat -3,

110
00:08:59,110 --> 00:09:03,400
qui est le même que celui obtenu là,
mais comme il y a eu

111
00:09:03,400 --> 00:09:09,070
franchissement de la zone de dépassement
de capacité, le résultat est faux.

112
00:09:09,070 --> 00:09:15,940
Tout comme l'addition, nous avons des
résultats corrects tels que dans ce cas,

113
00:09:15,940 --> 00:09:21,620
et des résultats faux comme
le montre cette opération.

114
00:09:22,890 --> 00:09:27,920
Dans nos programmes, nous manipulons
des nombres ayant différentes tailles.

115
00:09:27,920 --> 00:09:32,630
Pour que le compilateur puisse de
façon optimale leur allouer un

116
00:09:32,630 --> 00:09:37,595
espace mémoire,
il faut leur attribuer des types.

117
00:09:38,775 --> 00:09:42,645
Le langage C prévoit
les types désignés ici.

118
00:09:44,185 --> 00:09:48,255
Nous voyons des types de 8 bits, signés

119
00:09:50,255 --> 00:09:56,655
ou non signés, des types de 16 bits,
signés ou non également.

120
00:09:57,790 --> 00:10:03,790
Mais nous remarquons que par exemple le
type caractère peut à la fois désigner

121
00:10:03,790 --> 00:10:10,060
un nombre de 8 bits signé ou non et
ceci selon les réglages du compilateur.

122
00:10:11,120 --> 00:10:16,210
Pour rendre ces types cohérents,
tout le long du cours,

123
00:10:17,460 --> 00:10:21,640
nous allons utiliser les
types en C version C99.

124
00:10:21,640 --> 00:10:25,060
Les différents types sont ici représentés.

125
00:10:25,060 --> 00:10:32,570
Ils sont tout terminés par souligné
t qui indique bien que c'est un type.

126
00:10:32,570 --> 00:10:38,610
Ensuite, le nombre de bits utilisés
pour le coder est clairement défini.

127
00:10:38,610 --> 00:10:42,274
Ici nous avons les 8 bits,
les 16 bits et les 32.

128
00:10:43,560 --> 00:10:48,380
Nous avons int qui signifie qu'il s'agit

129
00:10:48,380 --> 00:10:53,020
d'entiers et une précision, le u

130
00:10:54,740 --> 00:10:58,675
dans certains endroits pour dire
que ce sont des nombres non signés.

131
00:10:58,675 --> 00:11:02,805
uint16_t indique

132
00:11:03,945 --> 00:11:08,375
clairement qu'il s'agit de
nombres de 16 bits positifs,

133
00:11:08,375 --> 00:11:12,775
compris entre 0 et 2 puissance 16 moins 1.

134
00:11:12,775 --> 00:11:19,095
Le binaire est commode pour la machine
mais mal commode pour l'être humain.

135
00:11:19,095 --> 00:11:25,365
Pour écrire les nombres, nous allons
utiliser très souvent l'hexadécimal.

136
00:11:25,365 --> 00:11:29,595
Voyons sur cet exemple comment
passe-t-on de la base 2,

137
00:11:29,595 --> 00:11:33,485
du binaire à l'hexadécimal.

138
00:11:33,485 --> 00:11:36,545
Nous avons le champ de bits que voici.

139
00:11:36,545 --> 00:11:45,340
Nous le découpons en tranches de
quatre de la droite vers la gauche.

140
00:11:45,340 --> 00:11:47,830
Chaque tranche de quatre ou quarté est

141
00:11:49,090 --> 00:11:55,120
codée ensuite en hexadécimal à
l'aide de ce tableau que voici.

142
00:11:55,120 --> 00:11:59,640
Ainsi, la première tranche
0000 qui correspond à

143
00:11:59,640 --> 00:12:05,920
cette ligne est codée 0 en hexadécimal.

144
00:12:05,920 --> 00:12:11,810
Ensuite la deuxième tranche
représentée par ces

145
00:12:11,810 --> 00:12:16,261
bits 1010 qui correspond à cette ligne

146
00:12:16,261 --> 00:12:20,979
est codée A et ainsi de suite.

147
00:12:22,720 --> 00:12:27,906
La notation en langage C de ce
champ de bits en hexadécimal

148
00:12:27,906 --> 00:12:34,347
sera donc 0x5BA0,

149
00:12:34,347 --> 00:12:37,990
le x représentant l'hexadécimal.

150
00:12:39,160 --> 00:12:42,460
Nos programmes n'utilisent
pas que des nombres.

151
00:12:42,460 --> 00:12:45,360
Ils utilisent également des caractères.

152
00:12:45,360 --> 00:12:50,660
Pour coder les caractères,
on utilise plusieurs tables.

153
00:12:50,660 --> 00:12:53,700
La plus connue est la table
ASCII représentée ici.

154
00:12:55,520 --> 00:12:59,930
Nous remarquons que dans cette table,
nous avons les lettres de l'alphabet en

155
00:12:59,930 --> 00:13:06,680
majuscule, les voici,
et les minuscules représentées là.

156
00:13:08,510 --> 00:13:10,410
Ici nous avons les chiffres.

157
00:13:12,050 --> 00:13:16,940
Là nous avons quelques
symboles de la ponctuation,

158
00:13:18,340 --> 00:13:26,323
et dans cette zone-là,
nous retrouvons des caractères spéciaux.

159
00:13:26,323 --> 00:13:33,376
Par exemple l'indicateur de fin de ligne,
le bip

160
00:13:33,376 --> 00:13:39,820
là et DEL qui vous permet
d'effacer un caractère.

161
00:13:39,820 --> 00:13:45,256
Ainsi, la lettre A majuscule
que voici aura pour code 64

162
00:13:45,256 --> 00:13:50,570
+ 1, ce qui donne le code 65.

163
00:13:50,570 --> 00:13:56,570
Nous remarquons que cette table ne
contient pas les lettres accentuées.

164
00:13:56,570 --> 00:14:01,730
Il y a des compléments et il y
a également d'autres tables de codage

165
00:14:02,940 --> 00:14:07,080
telles que la table de codage UTF-8.

166
00:14:07,080 --> 00:14:11,950
Résumons rapidement ce que
nous avons vu dans ce cours.

167
00:14:11,950 --> 00:14:15,240
Nous avons vu les symboles
et la numération binaire,

168
00:14:16,320 --> 00:14:19,410
l'arithmétique modulaire
et les nombres signés,

169
00:14:19,410 --> 00:14:22,510
ce qui nous a permis de comprendre
les dépassements de capacité.

170
00:14:23,730 --> 00:14:29,640
Ensuite, nous nous sommes intéressés
aux types en C, du langage C, puis nous

171
00:14:29,640 --> 00:14:35,860
avons vu l'hexadécimal et nous avons
terminé par le codage des caractères.