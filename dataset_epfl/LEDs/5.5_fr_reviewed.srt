1
00:00:00,025 --> 00:00:10,025
[AUDIO_VIDE]

2
00:00:12,430 --> 00:00:13,810
Bonjour.

3
00:00:13,810 --> 00:00:18,310
Nous allons continuer le cours sur
les enseignes et afficheurs à LED.

4
00:00:18,310 --> 00:00:22,920
Aujourd'hui, nous allons aborder les
circuits logiques programmables, FPGA.

5
00:00:24,320 --> 00:00:28,920
Nous verrons dans cette leçon les
circuits logiques programmables.

6
00:00:30,050 --> 00:00:33,900
Ensuite, la spécificité des circuits FPGA.

7
00:00:35,420 --> 00:00:40,380
Nous allons ensuite aborder
la méthodologie de conception

8
00:00:40,380 --> 00:00:43,870
des circuits logiques,
à partir d'une carte FPGA.

9
00:00:45,070 --> 00:00:48,210
Et enfin,
les environnements de développement.

10
00:00:49,710 --> 00:00:54,620
Les circuits numériques peuvent
être classés en quatre catégories.

11
00:00:55,680 --> 00:00:59,140
La première catégorie regroupe
les circuits logiques standards,

12
00:00:59,140 --> 00:01:04,040
où nous pouvons citer les technologies
TTL, les technologies CMOS.

13
00:01:05,790 --> 00:01:10,810
Une deuxième classe peut regrouper les
circuits à fonctionnement programmable,

14
00:01:10,810 --> 00:01:15,120
où nous pouvons regrouper tous les
processeurs, les micro contrôleurs,

15
00:01:15,120 --> 00:01:18,250
les microprocesseurs, les DSP.

16
00:01:18,250 --> 00:01:22,725
Une troisième catégorie peut regrouper
les circuits intégrés spécifiques,

17
00:01:22,725 --> 00:01:26,933
fabriqués en grande série,
où nous pouvons citer les circuits

18
00:01:26,933 --> 00:01:32,775
prédiffusés qui intègrent un
ensemble de cellules logiques,

19
00:01:32,775 --> 00:01:37,265
à base de transistors,
implantées mais non connectées.

20
00:01:39,110 --> 00:01:42,750
En fonction de l'application visée,
le circuit peut être spécialisé.

21
00:01:44,420 --> 00:01:48,370
Nous avons aussi les circuits
précaractérisés qui regroupent

22
00:01:49,490 --> 00:01:54,310
un ensemble de fonctions prédéfinies
et précaractérisées, électriquement,

23
00:01:54,310 --> 00:01:56,090
par le fabricant.

24
00:01:56,090 --> 00:02:01,880
Ensuite, nous avons les circuits
sur mesure qui représentent

25
00:02:01,880 --> 00:02:07,350
une solution optimale en termes
de densité d'intégration,

26
00:02:07,350 --> 00:02:11,950
mais également de performance par
rapport aux exigences du client.

27
00:02:11,950 --> 00:02:13,820
Les circuits intégrés spécifiques

28
00:02:15,210 --> 00:02:19,339
présentent l'avantage de garantir
les performances maximales,

29
00:02:20,600 --> 00:02:26,640
mais ont un temps de développement long
et un coût de développement élevé.

30
00:02:26,640 --> 00:02:29,120
La dernière catégorie des circuits

31
00:02:29,120 --> 00:02:32,510
numériques regroupe les circuits
logiques programmables.

32
00:02:33,670 --> 00:02:37,990
Un circuit logique programmable est
constitué d'un ensemble de portes

33
00:02:37,990 --> 00:02:43,890
logiques, ou cellules logiques, reliées
par des interconnexions reconfigurables.

34
00:02:45,080 --> 00:02:50,976
Les reconfigurations peuvent se faire
avec des portes, ET, et des portes, OU.

35
00:02:50,976 --> 00:02:55,780
Ce schéma présente l'architecture

36
00:02:55,780 --> 00:03:00,230
d'un circuit logique programmable
avec une matrice de portes,

37
00:03:00,230 --> 00:03:04,660
ET, et une matrice de portes,
OU, reconfigurables.

38
00:03:06,080 --> 00:03:11,470
Nous avons ici les deux entrées,
A et B, et quatre sorties, S1 à S4.

39
00:03:11,470 --> 00:03:15,380
Si nous voulons, par exemple,
synthétiser une fonction,

40
00:03:16,840 --> 00:03:21,590
OU exclusif, entre les entrées,
A et B, sur la sortie S1,

41
00:03:21,590 --> 00:03:27,180
nous pouvons par exemple
connecter ici ce point,

42
00:03:27,180 --> 00:03:32,750
ce qui donne, A et B barre,

43
00:03:32,750 --> 00:03:38,035
connecter ici le point, A barre

44
00:03:38,035 --> 00:03:42,720
et B,
et nous pouvons connecter ici la sortie,

45
00:03:44,620 --> 00:03:49,364
ce qui nous donnerait, ici,

46
00:03:49,364 --> 00:03:54,562
S1 égal, A et B barre, ou,

47
00:03:55,910 --> 00:04:00,720
A barre et B,
ce qui donne le, OU exclusif.

48
00:04:00,720 --> 00:04:05,060
On peut donc imaginer un
circuit beaucoup plus complexe

49
00:04:05,060 --> 00:04:09,110
permettant de réaliser des
fonctions plus complexes.

50
00:04:09,110 --> 00:04:13,390
Dans les circuits logiques programmables,
les reconfigurations des

51
00:04:13,390 --> 00:04:16,550
interconnexions peuvent se faire
également avec des multiplexeurs,

52
00:04:16,550 --> 00:04:19,955
des bascules,
des registres et des mémoires.

53
00:04:19,955 --> 00:04:23,135
Plusieurs sigles existent
pour désigner ces circuits.

54
00:04:25,045 --> 00:04:30,110
Il existe des circuits re programmables,
une seule fois, avec la technologie,

55
00:04:30,110 --> 00:04:37,560
anti-fusible, ou plusieurs fois, avec les
technologies mémoire, Flash, EEPROM, SRAM.

56
00:04:37,560 --> 00:04:40,650
Ces différents termes
permettent de désigner

57
00:04:40,650 --> 00:04:43,070
les technologies d'interconnexion.

58
00:04:43,070 --> 00:04:43,890
En effet,

59
00:04:43,890 --> 00:04:48,700
dans les circuits PAL, les interconnexions
se font à base de fusibles.

60
00:04:50,170 --> 00:04:51,790
Dans les circuits EPLD,

61
00:04:51,790 --> 00:04:54,540
les interconnexions utilisent
des mémoires Flash.

62
00:04:54,540 --> 00:04:57,390
Et dans les circuits FPGA,

63
00:04:57,390 --> 00:05:01,380
les interconnexions
utilisent des mémoires SRAM.

64
00:05:01,380 --> 00:05:03,180
Dans les circuits PAL,

65
00:05:03,180 --> 00:05:07,910
Programmable Array Logic, seules les
fonctions, ET, sont programmables.

66
00:05:08,950 --> 00:05:14,250
Dans les circuits FPLA,
Field Programmable Logic Array,

67
00:05:14,250 --> 00:05:17,338
les fonctions, ET, et les fonctions,
OU, sont programmables.

68
00:05:17,338 --> 00:05:20,900
Un circuit CPLD,

69
00:05:20,900 --> 00:05:24,890
Complex Programmable Logic Device,
est un circuit logique complexe.

70
00:05:26,210 --> 00:05:28,130
Un circuit EPLD,

71
00:05:28,130 --> 00:05:33,140
Erasable Programmable Logic Device,
est un circuit programmable et effaçable.

72
00:05:34,160 --> 00:05:38,900
Et un circuit FPGA représente
un réseau de portes logiques

73
00:05:38,900 --> 00:05:40,050
programmables à la demande.

74
00:05:41,460 --> 00:05:46,480
Les circuits FPGA sont constitués
de plusieurs portes logiques,

75
00:05:46,480 --> 00:05:49,521
de mémoires, de multiplexeurs, etc.

76
00:05:49,521 --> 00:05:53,755
et un ensemble de fils de connexion,

77
00:05:55,825 --> 00:06:00,295
permettant de relier les différents
composants, par programmation.

78
00:06:03,055 --> 00:06:06,415
Les différents composants
du circuit sont disposés

79
00:06:06,415 --> 00:06:11,400
de manière ordonnée,
en blocs logiques programmables.

80
00:06:13,390 --> 00:06:19,670
Synthétiser une fonction logique,
avec un circuit FPGA,

81
00:06:19,670 --> 00:06:25,660
revient à interconnecter un
certain nombre de blocs logiques,

82
00:06:25,660 --> 00:06:32,260
à travers l'interconnexion des uns aux
autres, par des fils de connexion.

83
00:06:33,280 --> 00:06:38,120
Les circuits logiques de type FPGA sont de
plus en plus utilisés dans la conception

84
00:06:38,120 --> 00:06:39,010
des circuits numériques.

85
00:06:41,090 --> 00:06:45,520
Ils sont constitués d'une matrice
de fonctions re programmable

86
00:06:46,660 --> 00:06:48,030
à volonté et in situ.

87
00:06:50,240 --> 00:06:54,750
Ils permettent d'analyser différents
algorithmes en un temps très court.

88
00:06:56,660 --> 00:07:01,650
Ils présentent l'avantage d'une
grande souplesse qui permet des

89
00:07:01,650 --> 00:07:06,855
évolutions rapides et à moindre coût,
évolutions ici en termes d'applications.

90
00:07:07,895 --> 00:07:13,365
Une cellule logique, ou bloc logique, est
constituée d'une table de correspondance,

91
00:07:13,365 --> 00:07:17,325
assimilable à une table de vérité,
pour implémenter les équations logiques.

92
00:07:18,715 --> 00:07:23,255
Ils intègrent également des
multiplexeurs de bascules de registres.

93
00:07:24,295 --> 00:07:26,185
La densité d'intégration très élevée

94
00:07:27,550 --> 00:07:30,910
permet d'atteindre plusieurs
millions de portes logiques.

95
00:07:30,910 --> 00:07:32,670
Les possibilités de traitement,

96
00:07:32,670 --> 00:07:36,800
en parallèle, des données, permettent
d'augmenter la vitesse de calcul.

97
00:07:38,670 --> 00:07:44,840
La capacité d'un circuit FPGA n'est pas
limitée par la complexité des calculs,

98
00:07:44,840 --> 00:07:48,250
mais plutôt par le nombre de
blocs logiques programmables.

99
00:07:49,690 --> 00:07:52,060
Plusieurs niveaux de description

100
00:07:52,060 --> 00:07:55,940
peuvent être utilisés dans la
conception des circuits FPGA.

101
00:07:55,940 --> 00:08:00,360
Nous avons le niveau de description
comportemental où le modèle est décrit par

102
00:08:00,360 --> 00:08:05,460
sa fonction, son algorithme, il s'agit
de décrire comment cela fonctionne.

103
00:08:07,020 --> 00:08:11,510
Nous avons le niveau de description,
RTL, où le modèle est décrit sous forme

104
00:08:11,510 --> 00:08:15,970
d'éléments séquentiels prenant en
compte la notion d'ordre et de durée.

105
00:08:18,350 --> 00:08:22,520
Et enfin, nous avons le niveau de
description structurel, où le modèle est

106
00:08:22,520 --> 00:08:27,350
décrit par sa topologie de portes logiques
permettant de réaliser le circuit.

107
00:08:28,805 --> 00:08:32,835
Il est souvent nécessaire de faire la
décomposition du cahier des charges

108
00:08:32,835 --> 00:08:37,725
en fonctions simples,
permettant l'utilisation des fonctions

109
00:08:37,725 --> 00:08:42,695
combinatoires avec les instructions
concurrentes du VHDL, et

110
00:08:44,285 --> 00:08:49,420
des fonctions séquentielles avec
les process ou les fonctions.

111
00:08:50,530 --> 00:08:57,220
La méthodologie de conception des circuits
FPGA se décline en quatre étapes.

112
00:08:57,220 --> 00:09:01,220
La première étape permet la
spécification du circuit.

113
00:09:01,220 --> 00:09:05,590
Il s'agit de la saisie du circuit
logique qui peut se faire de manière

114
00:09:05,590 --> 00:09:10,370
syntaxique avec le VHDL, le Verilog,

115
00:09:12,010 --> 00:09:17,800
ou bien en mode graphique avec le
niveau de description structurel.

116
00:09:17,800 --> 00:09:22,250
La deuxième étape permet la validation
fonctionnelle qui consiste à

117
00:09:22,250 --> 00:09:27,960
la vérification des syntaxes,
la vérification des schémas,

118
00:09:27,960 --> 00:09:30,730
et éventuellement des
simulations comportementales.

119
00:09:31,810 --> 00:09:36,230
La troisième étape permet la validation
temporelle des simulations temporelles

120
00:09:36,230 --> 00:09:38,840
qui tiennent compte des
temps de propagation

121
00:09:38,840 --> 00:09:41,290
et des problèmes de
recouvrement des signaux.

122
00:09:42,520 --> 00:09:48,970
Et enfin, la dernière étape permet
l'implémentation sur la cible FPGA.

123
00:09:48,970 --> 00:09:55,530
Elle est précédée de l'assignation des
pins, qui permet d'associer les ports

124
00:09:55,530 --> 00:10:01,570
du composant du circuit numérique à
synthétiser aux pins de la carte cible.

125
00:10:01,570 --> 00:10:06,780
La synthèse des circuits numériques
avec les cartes FPGA On s'appuie

126
00:10:06,780 --> 00:10:10,750
sur les deux principales
plateformes de développement.

127
00:10:10,750 --> 00:10:15,980
Nous avons Altera Quartus II
et Xilinx ISE.

128
00:10:15,980 --> 00:10:21,020
Ces deux logiciels,
développés par les deux constructeurs

129
00:10:21,020 --> 00:10:24,610
Altera et Xilinx,
permettent la conception,

130
00:10:24,610 --> 00:10:29,950
la simulation, la synthèse et
l'implémentation des circuits numériques.

131
00:10:29,950 --> 00:10:35,790
Ils permettent la spécification en
mode graphique et par description HTR.

132
00:10:38,060 --> 00:10:42,970
Les simulations se font souvent
avec ModelSim, qui est un

133
00:10:42,970 --> 00:10:47,300
environnement de simulation et de débogage
pour les circuits logiques programmables.

134
00:10:48,380 --> 00:10:50,570
Il supporte plusieurs langages,
dont le VHDL.

135
00:10:52,130 --> 00:10:54,650
Les deux principaux constructeurs

136
00:10:54,650 --> 00:10:58,380
proposent une version
gratuite de ModelSim.

137
00:10:58,380 --> 00:11:01,958
Nous vous présentons ici
un exemple de carte FPGA,

138
00:11:01,958 --> 00:11:07,520
la DE0-NANO d'Altera,
qui intègre le CYCLONE IV

139
00:11:08,750 --> 00:11:12,986
avec 256 pins et 22 320 éléments logiques.

140
00:11:12,986 --> 00:11:16,245
Elle dispose d'interfaces

141
00:11:16,245 --> 00:11:20,410
d'entrées/sorties programmables
en USB Blaster.

142
00:11:21,630 --> 00:11:25,700
Elle intègre un convertisseur
analogique numérique 8 voies, 12 bits,

143
00:11:26,790 --> 00:11:30,950
un oscillateur de 50 MHz,
deux GPIO de 40 pins.

144
00:11:32,930 --> 00:11:38,160
Le Cyclone IV d'Altera peut compter
jusqu'à 150 000 éléments logiques.

145
00:11:39,450 --> 00:11:45,520
Les éléments logiques sont regroupés
par blocs logiques programmables,

146
00:11:45,520 --> 00:11:47,800
chacun comptant 16 éléments logiques.

147
00:11:49,330 --> 00:11:55,780
Il dispose de quatre PLL,
de plusieurs multiplieurs,

148
00:11:57,260 --> 00:12:01,780
d'interfaces d'entrées/sorties,

149
00:12:01,780 --> 00:12:04,540
plusieurs liens de connexion
locaux et entre blocs logiques.

150
00:12:05,990 --> 00:12:09,580
La configuration rapide peut
se faire en moins de 100 ms.

151
00:12:10,730 --> 00:12:16,025
Un élément logique du Cyclone IV
dispose de quatre entrées

152
00:12:16,025 --> 00:12:19,185
connectées à la look-up table, la LUT,

153
00:12:20,685 --> 00:12:26,555
qui permet de représenter n'importe
quelle fonction logique à quatre entrées,

154
00:12:26,555 --> 00:12:30,815
d'un registre de sortie programmable,
qui est représenté ici par une bascule T,

155
00:12:31,945 --> 00:12:36,970
d'une entrée de retenue connectée
à l'élément logique précédent,

156
00:12:38,190 --> 00:12:43,100
d'une sortie de retenue connectée
à l'élément logique suivant.

157
00:12:43,100 --> 00:12:48,940
Un élément logique dispose également
de liens d'interconnexion locale,

158
00:12:48,940 --> 00:12:53,860
de liens ligne, colonne,
directs et de registres.

159
00:12:54,980 --> 00:13:02,430
Un bloc logique est constitué de 16
éléments logiques, LAB, Logic Array Block.

160
00:13:02,430 --> 00:13:06,070
Un réseau local d'interconnexion

161
00:13:06,070 --> 00:13:09,630
permet la communication entre
éléments logiques d'un même bloc.

162
00:13:10,800 --> 00:13:13,850
Les liaisons directes permettent
l'interconnexion des blocs

163
00:13:13,850 --> 00:13:14,700
logiques adjacents.

164
00:13:15,700 --> 00:13:17,650
Il existe aussi un bloc mémoire,

165
00:13:17,650 --> 00:13:22,300
un signal d'horloge, un multiplieur et des
entrées/sorties entre blocs adjacents.

166
00:13:22,300 --> 00:13:27,100
Un réseau d'interconnexion ligne,
colonne existe entre blocs logiques.

167
00:13:27,100 --> 00:13:30,755
Ce schéma illustre la
complexité d'un circuit FPGA en

168
00:13:32,485 --> 00:13:34,425
termes de mapping et de routage.

169
00:13:35,785 --> 00:13:40,665
Heureusement, les environnements de
développement permettent de simplifier

170
00:13:40,665 --> 00:13:44,345
la synthèse des circuits logiques
en termes de routage et de mapping.

171
00:13:45,995 --> 00:13:49,455
Nous venons d'aborder les
circuits logiques programmables,

172
00:13:50,475 --> 00:13:53,295
la spécificité des circuits FPGA.

173
00:13:54,760 --> 00:13:58,240
Nous avons présenté la
méthodologie de conception

174
00:13:58,240 --> 00:14:01,800
des circuits logiques à
partir d'une carte FPGA.

175
00:14:03,290 --> 00:14:06,960
Nous avons dit quelques mots sur les
environnements de développement.

176
00:14:09,000 --> 00:14:13,665
Ces différents éléments seront
utilisés et plus détaillés

177
00:14:14,785 --> 00:14:19,085
dans le contrôle d'une matrice à
LED commandée par une carte FPGA.