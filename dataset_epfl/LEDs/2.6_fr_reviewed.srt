1
00:00:00,025 --> 00:00:10,025
[AUDIO_VIDE]

2
00:00:12,020 --> 00:00:13,320
Bonjour.

3
00:00:13,320 --> 00:00:16,030
Nous allons continuer le cours sur
les enseignes et afficheurs à LED.

4
00:00:17,340 --> 00:00:22,235
Aujourd'hui nous allons aborder les
instructions concurrentes en VHDL.

5
00:00:22,235 --> 00:00:27,541
Dans cette leçon, nous allons voir les
instructions concurrentes à travers

6
00:00:27,541 --> 00:00:33,885
l'affectation simple, l'affectation
sélective et l'affectation conditionnelle.

7
00:00:35,285 --> 00:00:38,965
Nous allons aussi voir les components,
les composants,

8
00:00:38,965 --> 00:00:43,105
et nous allons terminer cette leçon
par la génération conditionnelle.

9
00:00:44,510 --> 00:00:46,804
Le VHDL distingue deux
domaines d'instructions.

10
00:00:46,804 --> 00:00:47,560
Les instructions concurrentes,
les instructions séquentielles.

11
00:00:47,560 --> 00:00:48,800
Les instructions concurrentes

12
00:00:54,190 --> 00:00:59,390
permettent de modéliser des
comportements dirigés par des événements

13
00:00:59,390 --> 00:01:01,870
asynchrones et qui
s'exécutent en parallèle.

14
00:01:03,180 --> 00:01:07,380
Les instructions concurrentes sont
utilisées dans l'architecture

15
00:01:08,380 --> 00:01:10,680
et peuvent être écrites
dans un ordre quelconque.

16
00:01:12,230 --> 00:01:17,990
Les instructions concurrentes utilisent
l'affectation concurrente de signaux.

17
00:01:17,990 --> 00:01:20,370
Nous avons l'affectation simple,

18
00:01:20,370 --> 00:01:23,669
l'affectation conditionnelle
et l'affectation sélective.

19
00:01:25,100 --> 00:01:29,610
Les instructions concurrentes en VHDL
permettent de décomposer un problème

20
00:01:29,610 --> 00:01:33,025
en fonctions simples qui peuvent
s'exécuter de manière concurrente,

21
00:01:33,025 --> 00:01:37,410
c'est-à-dire en ensemble de composants
ou d'algorithmes qui peuvent travailler

22
00:01:37,410 --> 00:01:40,670
ensemble et qui pourraient même
agir les uns sur les autres.

23
00:01:41,860 --> 00:01:45,550
Chaque instruction effectue donc un
traitement en parallèle avec les autres,

24
00:01:46,650 --> 00:01:48,960
et donc l'ordre d'écriture
n'a aucune importance.

25
00:01:50,140 --> 00:01:52,030
Pour l'affectation simple,

26
00:01:52,030 --> 00:01:55,590
il s'agit tout simplement d'une
connexion de deux signaux.

27
00:01:55,590 --> 00:02:00,260
Il s'agira d'affecter, par exemple pour
la syntaxe, le signal, 1, au signal.

28
00:02:01,910 --> 00:02:06,990
Alors si nous prenons l'exemple de cette
fonction simple, au niveau de l'entité,

29
00:02:06,990 --> 00:02:13,380
cette fonction a deux entrées,
e1 et e2, et deux sorties, s1 et s2.

30
00:02:14,660 --> 00:02:17,390
Au niveau des ports,
nous avons déclaré les quatre signaux.

31
00:02:18,820 --> 00:02:22,630
Au niveau de la sortie s1,
nous avons un, ET logique, entre,

32
00:02:22,630 --> 00:02:26,860
e1 et e2, et au niveau de s2 nous
avons un, OU logique, entre, e1 et e2.

33
00:02:28,820 --> 00:02:31,890
Il est simple de comprendre
qu'on aurait pu écrire

34
00:02:33,000 --> 00:02:36,360
cette affectation avant la première.

35
00:02:36,360 --> 00:02:41,710
Et nous avons ici le circuit qui est
réalisé à partir de ce programme.

36
00:02:41,710 --> 00:02:45,830
L'affectation conditionnelle, WHEN / ELSE.

37
00:02:45,830 --> 00:02:49,110
C'est une instruction
qui a une seule cible.

38
00:02:49,110 --> 00:02:51,890
Ici, la cible c'est signal.

39
00:02:51,890 --> 00:02:55,707
Et nous avons plusieurs expressions,

40
00:02:55,707 --> 00:03:00,760
c'est-à-dire signal peut
prendre la valeur, signal 1,

41
00:03:00,760 --> 00:03:06,890
quand l'expression 1 est vraie,
signal peut prendre la valeur, signal 2,

42
00:03:06,890 --> 00:03:12,780
quand l'expression2 est vraie sinon
signal va prendre la valeur, signal 3.

43
00:03:12,780 --> 00:03:17,070
Nous allons appliquer
l'affectation conditionnelle

44
00:03:17,070 --> 00:03:21,900
pour réaliser notre multiplexeur,
mux2, deux entrées, une sortie.

45
00:03:21,900 --> 00:03:25,750
Au niveau de l'entité,
nous avons nos deux entrées, e1 et e2,

46
00:03:25,750 --> 00:03:31,530
notre sélecteur, sel,
qui est aussi une entrée, et la sortie, s.

47
00:03:31,530 --> 00:03:36,570
Et au niveau de l'architecture,
e1 est affecté à la sortie

48
00:03:37,640 --> 00:03:44,925
quand le sélecteur est égal à zéro,
sinon, e2 est affecté à la sortie.

49
00:03:44,925 --> 00:03:50,625
Donc ici, nous avons une seule cible
qui est, s, et l'expression ici,

50
00:03:50,625 --> 00:03:55,295
1 correspond à, sel égale zéro, et donc,

51
00:03:55,295 --> 00:03:58,435
e1 est affecté à s si sel égale zéro, et,

52
00:03:58,435 --> 00:04:03,115
e2 est affecté à s si sel est différent
de zéro ; c'est-à-dire sel égale 1.

53
00:04:03,115 --> 00:04:07,800
Et la structure du composant qui
est réalisé est présentée ici.

54
00:04:08,820 --> 00:04:15,020
La syntaxe de l'affectation sélective,
WITH......SELECT,

55
00:04:15,020 --> 00:04:20,530
permet d'avoir, ici, au niveau de notre
expression testée, qui peut valoir,

56
00:04:20,530 --> 00:04:25,470
valeur 1, valeur 2 ,ou une autre valeur,
signal 1 va

57
00:04:25,470 --> 00:04:30,080
être affecté à signal quand
expression est égale à valeur 1.

58
00:04:30,080 --> 00:04:35,560
Signal va prendre la valeur, signal 2,
lorsque l'expression est égale à valeur 2,

59
00:04:35,560 --> 00:04:40,300
et signal va prendre la valeur,
signal 3, dans tous les autres cas.

60
00:04:40,300 --> 00:04:45,277
C'est-à-dire tous les autres cas
où on a l'expression qui est

61
00:04:45,277 --> 00:04:50,075
différente de valeur 1 et valeur 2,
signal va prendre signal 3.

62
00:04:50,075 --> 00:04:54,330
Nous allons utiliser cette
affectation sélective pour

63
00:04:54,330 --> 00:04:57,317
synthétiser un décodeur sept segments.

64
00:04:57,317 --> 00:05:00,124
Voici notre afficheur sept segments.

65
00:05:00,124 --> 00:05:02,860
Nous avons les segments de A à G.

66
00:05:02,860 --> 00:05:07,620
Et le principe du décodage
consiste à prendre les valeurs,

67
00:05:07,620 --> 00:05:11,620
on va prendre les valeurs décimales, qui
peuvent être représentées ici par, data,

68
00:05:11,620 --> 00:05:12,900
sur quatre bits.

69
00:05:12,900 --> 00:05:17,210
Pour écrire les valeurs de 0 à 9,
on a besoin de quatre bits.

70
00:05:17,210 --> 00:05:21,290
Et donc nous avons aussi les sept
sorties qui est représenté ici par

71
00:05:21,290 --> 00:05:24,850
ce vecteur sept segments,
qui est une sortie, zéro to 6.

72
00:05:24,850 --> 00:05:28,026
Alors les bits sont
disposés du poids faible,

73
00:05:28,026 --> 00:05:32,640
c'est-à-dire le A jusqu'au poids fort,
le G.

74
00:05:32,640 --> 00:05:37,260
Donc le A ici prend la première place
et le G prend la dernière place.

75
00:05:37,260 --> 00:05:38,520
C'est très important.

76
00:05:38,520 --> 00:05:40,600
Donc l'architecture de notre décodeur,

77
00:05:41,660 --> 00:05:46,700
nous avons utilisé donc l'affectation
sélective, WITH.....SELECT.

78
00:05:46,700 --> 00:05:53,620
Alors on va chercher l'expression, data,
qui peut valoir zéro, 1, jusqu'à 9.

79
00:05:53,620 --> 00:05:56,820
Alors, retenez tout simplement que le, x,

80
00:05:56,820 --> 00:06:01,820
ici, devant ces valeurs, symbolise que les
valeurs sont inscrites en hexadécimal.

81
00:06:01,820 --> 00:06:04,330
Le principe de notre décodage est simple.

82
00:06:04,330 --> 00:06:07,750
Donc il suffit d'affecter
au niveau de nos sept

83
00:06:09,170 --> 00:06:13,340
segments les valeurs qu'il faut
pour afficher le chiffre souhaité.

84
00:06:13,340 --> 00:06:15,240
Alors les chiffres sont là,
de zéro jusqu'à 9.

85
00:06:15,240 --> 00:06:20,545
Alors il faut juste préciser que
l'afficheur est à anode commune,

86
00:06:20,545 --> 00:06:24,220
c'est-à-dire pour afficher un segment,
il faut envoyer un zéro.

87
00:06:25,470 --> 00:06:31,750
Donc ici pour afficher le zéro,
on doit allumer les six premiers

88
00:06:31,750 --> 00:06:36,050
segments et on doit éteindre le dernier
segment qui correspond au segment G.

89
00:06:37,140 --> 00:06:40,985
Pour afficher un 1, on doit allumer
le deuxième et le troisième segment,

90
00:06:40,985 --> 00:06:43,990
c'est-à-dire B et C et doit
éteindre tout le reste.

91
00:06:45,500 --> 00:06:47,830
Et vous pouvez comprendre le reste.

92
00:06:47,830 --> 00:06:52,490
IL faut juste souligner la dernière ligne,
on doit éteindre

93
00:06:53,570 --> 00:06:58,570
tous les LED lorsqu'on a, data,

94
00:06:58,570 --> 00:07:05,700
qui vaut autre chose que zéro à 9,
c'est-à-dire,

95
00:07:05,700 --> 00:07:09,920
when others, c'est tous les autres cas
en dehors des cas qui sont listés ici.

96
00:07:09,920 --> 00:07:13,400
Les composants.
Le mot clé COMPONENT permet de définir des

97
00:07:13,400 --> 00:07:18,350
modèles ou prototypes de composants
en dehors de l'architecture,

98
00:07:18,350 --> 00:07:21,780
et donc d'offrir plus de souplesse dans
le cas où plusieurs architectures de

99
00:07:21,780 --> 00:07:22,860
composants sont possibles.

100
00:07:23,960 --> 00:07:26,920
Il s'agit donc de définir un modèle,

101
00:07:26,920 --> 00:07:30,540
puis après de l'instancier
pour avoir des composants.

102
00:07:31,650 --> 00:07:35,820
Donc ici nous avons le nom de
l'instance pour l'instanciation,

103
00:07:35,820 --> 00:07:41,825
donc chaque instance a un nom,
deux points, le nom du composant,

104
00:07:41,825 --> 00:07:45,715
suivi de, port map,
ensuite de la liste des signaux.

105
00:07:45,715 --> 00:07:48,485
Alors la liste des connexions,
c'est les variables qu'on va donner,

106
00:07:48,485 --> 00:07:53,255
les signaux qu'on va donner au niveau
de l'instanciation du composant.

107
00:07:53,255 --> 00:07:58,900
Nous allons utiliser le COMPONENT pour
créer un composant nous permettant

108
00:07:58,900 --> 00:08:03,870
de décoder, cette fois-ci pour pouvoir
afficher quatre chiffres décimaux.

109
00:08:03,870 --> 00:08:06,670
Donc nous pourrons éventuellement
compter de zéro jusqu'à 9999.

110
00:08:06,670 --> 00:08:12,470
Alors l'architecture de
notre décodeur est ici.

111
00:08:12,470 --> 00:08:18,150
Nous avons au niveau des ports,
SW, qui est déclaré

112
00:08:18,150 --> 00:08:22,710
comme une variable logique à 16 bits.

113
00:08:23,910 --> 00:08:27,460
Nous avons déclaré ici une sortie, OUT,

114
00:08:27,460 --> 00:08:31,480
qui est aussi une variable
logique à 16 sorties, à 16 bits.

115
00:08:32,550 --> 00:08:36,439
Nous avons déclaré quatre afficheurs, ici.

116
00:08:36,439 --> 00:08:40,380
Chaque afficheur a sept segments.

117
00:08:41,530 --> 00:08:46,970
Au niveau de l'architecture de
notre décodeur sept segments,

118
00:08:46,970 --> 00:08:51,000
nous avons créé un composant,
le mot clé COMPONENT,

119
00:08:51,000 --> 00:08:57,030
suivi du nom du composant que nous
avons déjà vu tout à l'heure, ensuite

120
00:08:57,030 --> 00:09:02,230
nous allons avoir donc nos quatre
entrées du décodeur et nos sept sorties.

121
00:09:03,340 --> 00:09:05,510
Donc le principe est simple.

122
00:09:05,510 --> 00:09:09,170
Les entrées, ici la valeur qui est mise
à l'entrée, ici, sera décodée, ici,

123
00:09:09,170 --> 00:09:11,030
au niveau de sortie pour
afficher le bon chiffre.

124
00:09:12,240 --> 00:09:15,220
Alors au niveau de notre architecture,

125
00:09:15,220 --> 00:09:18,090
nous avons affecté tout simplement
les entrées au niveau des sorties.

126
00:09:18,090 --> 00:09:21,510
Ça c'est pour des LED éventuellement,
pour une histoire d'affichage.

127
00:09:22,880 --> 00:09:24,940
Alors les instances sont créées ici.

128
00:09:24,940 --> 00:09:29,400
Nous avons pour l'instance
qui affiche le chiffre zéro,

129
00:09:29,400 --> 00:09:35,490
donc le nom du composant ici,
PORT MAP, ensuite suivi des signaux.

130
00:09:35,490 --> 00:09:39,950
Alors l'idée de notre décodeur est
d'afficher au niveau de l'afficheur numéro

131
00:09:39,950 --> 00:09:46,620
zéro, le digit zéro, les quatre premiers
bits de notre vecteur à 16 bits,

132
00:09:47,680 --> 00:09:52,280
d'afficher au niveau de digit 1 les
quatre bits suivants de 4 à 7, et

133
00:09:59,420 --> 00:10:00,770
d'afficher au niveau de digit 2
les quatre bits suivants, 8 à 11,

134
00:10:00,770 --> 00:10:05,330
et d'afficher au niveau de digit 3
Les quatre bits suivants de 12 à 15.

135
00:10:05,330 --> 00:10:09,000
Ici, nous avons les quatre afficheurs,
sept segments.

136
00:10:09,000 --> 00:10:13,100
Donc, la valeur qui est envoyée ici

137
00:10:13,100 --> 00:10:17,280
au niveau de ces quatre bits
sera affichée au niveau de HEX0.

138
00:10:17,280 --> 00:10:20,290
La valeur qui est envoyée au
niveau de ces quatre bits suivants

139
00:10:20,290 --> 00:10:22,430
sera affichée au niveau de HEX1.

140
00:10:22,430 --> 00:10:25,440
La valeur qui est renvoyée au niveau de
ces quatre bits suivants sera affichée en

141
00:10:25,440 --> 00:10:27,880
HEX2, ainsi de suite.

142
00:10:27,880 --> 00:10:32,720
La génération conditionnelle
utilise l'instruction GENERATE

143
00:10:32,720 --> 00:10:36,870
qui permet la description de comportements
ou de structures régulières.

144
00:10:38,070 --> 00:10:43,690
Elle permet de multiplier des
instructions soit en nombre de fois fixe.

145
00:10:43,690 --> 00:10:47,610
À ce moment-là,
elle utilise l'instruction for.

146
00:10:49,880 --> 00:10:53,100
Soit de manière conditionnelle.

147
00:10:53,100 --> 00:10:57,630
À ce moment-là,
elle utilise l'instruction if.

148
00:10:58,750 --> 00:11:04,500
Au niveau de la syntaxe,
nous avons un label suivi de deux points,

149
00:11:04,500 --> 00:11:09,310
ensuite if suivi d'une condition,
generate et end generate,

150
00:11:10,850 --> 00:11:13,450
et entre les deux,
une suite d'instructions

151
00:11:13,450 --> 00:11:16,040
concurrentes peut s'exécuter
tant que la condition est vraie.

152
00:11:16,040 --> 00:11:20,070
Elle peut s'utiliser aussi
avec l'instruction for

153
00:11:22,100 --> 00:11:25,890
pour une suite d'instructions
itératives concurrentes.

154
00:11:25,890 --> 00:11:30,340
À ce moment-là,
label suivi de deux points,

155
00:11:30,340 --> 00:11:34,160
for pour une variable variant
de 0 jusqu'à x generate,

156
00:11:34,160 --> 00:11:38,500
et une suite d'instructions
qui s'exécutent x + 1 fois.

157
00:11:38,500 --> 00:11:43,865
Nous allons utiliser la génération
conditionnelle pour synthétiser

158
00:11:43,865 --> 00:11:49,340
un additionneur quatre bits à
partir d'un additionneur un bit.

159
00:11:51,670 --> 00:11:55,330
Voici les équations de
notre additionneur un bit.

160
00:11:55,330 --> 00:11:59,040
Nous avons ici s0,
la sortie de l'additionneur un bit,

161
00:11:59,040 --> 00:12:04,220
à partir des entrées a0 et b0,
et de la retenue ri.

162
00:12:04,220 --> 00:12:06,180
Ici, c'est la retenue r0,

163
00:12:06,180 --> 00:12:12,450
et donc nous avons les deux équations
pour la sortie et pour la retenue.

164
00:12:12,450 --> 00:12:15,350
Au niveau de l'architecture
de notre additionneur,

165
00:12:15,350 --> 00:12:18,520
nous avons commencé par
l'additionneur un bit d'abord.

166
00:12:19,960 --> 00:12:23,920
L'entrée ici,
nous avons la retenue initiale,

167
00:12:23,920 --> 00:12:27,350
les deux entrées qui sont des bits a et b,
la sortie

168
00:12:28,880 --> 00:12:33,280
de notre additionneur un bit, et la
retenue de notre additionneur un bit.

169
00:12:33,280 --> 00:12:36,960
Au niveau de l'architecture,
nous avons tout simplement implémenté

170
00:12:36,960 --> 00:12:39,140
les deux équations que nous
venons de vous présenter.

171
00:12:40,250 --> 00:12:44,880
Pour utiliser maintenant notre
additionneur un bit pour

172
00:12:44,880 --> 00:12:48,460
réaliser l'additionneur quatre bits,
au niveau de l'architecture

173
00:12:48,460 --> 00:12:52,740
de notre additionneur quatre bits,
nous avons la retenue initiale,

174
00:12:52,740 --> 00:12:57,870
les deux valeurs qui sont représentées
cette fois-ci sur quatre bits et notre

175
00:12:57,870 --> 00:13:01,250
sortie qui est éventuellement représentée
sur quatre bits et notre retenue finale.

176
00:13:02,640 --> 00:13:05,420
Au niveau de l'architecture de
notre additionneur quatre bits,

177
00:13:05,420 --> 00:13:09,140
nous avons commencé par créer un
composant additionneur un bit.

178
00:13:09,140 --> 00:13:12,400
Donc, c'est le même composant
que nous avons réalisé ici.

179
00:13:13,830 --> 00:13:18,370
Nous avons ici déclaré un signal C,
au niveau de l'architecture,

180
00:13:20,040 --> 00:13:24,005
qui permet de représenter
les retenues internes,

181
00:13:24,005 --> 00:13:26,400
c'est-à-dire les retenues qui
ne sortent pas du composant.

182
00:13:28,210 --> 00:13:33,640
Donc, on a initialisé ici le premier
bit de C à la retenue initiale.

183
00:13:34,970 --> 00:13:37,980
Ensuite, nous allons générer
les quatre additionneurs.

184
00:13:37,980 --> 00:13:46,370
Ici, avec le label A, que nous avons fermé
ici, pour A, i allant de 0 jusqu'à 3,

185
00:13:46,370 --> 00:13:51,320
donc quatre itérations, nous allons
créer notre premier additionneur un bit.

186
00:13:51,320 --> 00:13:54,460
On va lui donner la retenue initiale.

187
00:13:54,460 --> 00:13:58,264
La première valeur de A,
A(0), B(0), et la sortie,

188
00:13:58,264 --> 00:14:03,364
c'est-à-dire le résultat de ce premier
additionneur interne est mis dans s(0),

189
00:14:04,610 --> 00:14:09,830
et la retenue interne
est remise dans C(0).

190
00:14:09,830 --> 00:14:13,650
Ensuite, on ferme ici
la première génération.

191
00:14:13,650 --> 00:14:20,350
Donc, on va partir maintenant pour i > 0,
c'est-à-dire on commence par 1, 2, 3.

192
00:14:20,350 --> 00:14:24,842
La retenue précédente est injectée
au niveau de la retenue suivante.

193
00:14:24,842 --> 00:14:30,060
Le A(1), B(1), résultat sur s(1),

194
00:14:30,060 --> 00:14:34,390
retenue sur C(1), et on recommence.

195
00:14:34,390 --> 00:14:35,500
Donc, on le fait trois fois.

196
00:14:35,500 --> 00:14:41,240
À la fin,
on ferme ici le GENERATE pour le MSB,

197
00:14:41,240 --> 00:14:45,750
et après, la retenue,
les signaux sont mis à jour ici à la fin.

198
00:14:45,750 --> 00:14:49,830
Donc, la retenue qui se
trouve sur ces trois

199
00:14:49,830 --> 00:14:51,640
est mise au niveau de la retenue finale.

200
00:14:53,800 --> 00:14:57,740
Nous venons de voir des
instructions concurrentes en VHDL,

201
00:14:57,740 --> 00:15:02,460
à travers l'affectation
concurrente des signaux.

202
00:15:03,520 --> 00:15:08,674
Nous avons vu l'affectation simple,
l'affectation conditionnelle,

203
00:15:08,674 --> 00:15:11,502
l'affectation sélective.

204
00:15:12,530 --> 00:15:18,022
Nous avons également vu les composants,
avec le mot-clé

205
00:15:18,022 --> 00:15:22,980
Component, et nous avons terminé cette
leçon par la génération conditionnelle.

206
00:15:24,110 --> 00:15:29,770
La prochaine étape sera d'aborder
les instructions séquentielles.