1
00:00:00,025 --> 00:00:10,025
[AUDIO_VIDE]

2
00:00:11,350 --> 00:00:12,730
Bonjour.

3
00:00:12,730 --> 00:00:15,980
Nous allons continuer le cours sur
les enseignes et afficheurs à LED.

4
00:00:17,660 --> 00:00:22,530
Aujourd'hui nous allons aborder les
circuits logiques séquentiels en VHDL.

5
00:00:23,820 --> 00:00:25,570
Dans cette séquence,

6
00:00:25,570 --> 00:00:30,800
nous aborderons les Process qui sont
des boucles infinies qui recommencent

7
00:00:30,800 --> 00:00:36,030
à la fin du code et nécessitent
donc des instructions de contrôle.

8
00:00:37,870 --> 00:00:42,030
Par la suite, nous allons vous
proposer la synthèse des bascules,

9
00:00:43,420 --> 00:00:46,150
des compteurs et des registres.

10
00:00:46,150 --> 00:00:50,260
Les instructions séquentielles
en VHDL permettent de modéliser

11
00:00:50,260 --> 00:00:52,190
des comportements procéduraux.

12
00:00:52,190 --> 00:00:55,280
À l'image des langages de haut niveau,

13
00:00:56,680 --> 00:01:01,400
ils sont constitués d'une suite
d'actions à exécuter en séquence.

14
00:01:01,400 --> 00:01:06,890
Les instructions séquentielles ne peuvent
être utilisées que dans un Process

15
00:01:06,890 --> 00:01:09,330
ou dans un sous-programme.

16
00:01:09,330 --> 00:01:13,740
Les instructions séquentielles en
VHDL sont très évoluées à l'image

17
00:01:13,740 --> 00:01:15,540
des langages de haut niveau.

18
00:01:15,540 --> 00:01:19,500
Leur déroulement se fait suivant
l'ordre d'écriture des instructions.

19
00:01:19,500 --> 00:01:25,510
Plusieurs process peuvent s'exécuter en
parallèle dans une même architecture.

20
00:01:25,510 --> 00:01:28,845
Un processus peut contenir
des parties combinatoires

21
00:01:29,875 --> 00:01:31,905
et des parties séquentielles.

22
00:01:31,905 --> 00:01:36,375
Un Process est activé lors
d'un changement d'état

23
00:01:36,375 --> 00:01:41,825
d'un de ces signaux dits sensibles,
qui sont sur sa liste de sensibilité.

24
00:01:41,825 --> 00:01:46,605
Les instructions utilisables dans un
Process sont spécifiques, c'est-à-dire

25
00:01:46,605 --> 00:01:49,965
les instructions concurrentes sont
interdites à l'intérieur d'un Process.

26
00:01:49,965 --> 00:01:55,355
Et il faut noter que les signaux sont mis
à jour uniquement à la fin du processus.

27
00:01:55,355 --> 00:02:00,585
Le fonctionnement d'un processus est régi
par les règles suivantes : un Process

28
00:02:00,585 --> 00:02:05,365
est une boucle infinie et recommence
automatiquement à la fin du code.

29
00:02:05,365 --> 00:02:09,460
Un Process est synchronisé par
des points d'arrêt qui sont soit

30
00:02:09,460 --> 00:02:15,250
une liste de sensibilité, ici nous
avons la syntaxe Process avec deux

31
00:02:15,250 --> 00:02:19,150
signaux sensibles,
ou bien par des instructions Wait.

32
00:02:20,620 --> 00:02:26,310
Alors ici lorsqu'il y a un changement
au niveau d'un de ces signaux,

33
00:02:26,310 --> 00:02:29,367
le Process est relancé automatiquement,

34
00:02:29,367 --> 00:02:34,905
ou bien on peut avoir des points d'arrêt
ici utilisant l'instruction Wait.

35
00:02:34,905 --> 00:02:37,675
L'instruction Wait peut
prendre plusieurs formes.

36
00:02:39,065 --> 00:02:45,785
Nous avons la forme Wait on, qui permet
d'attendre l'activation d'un signal.

37
00:02:46,910 --> 00:02:48,514
Nous avons Wait for,
qui permet d'attendre un délai.

38
00:02:48,514 --> 00:02:54,508
Wait until qui permet
d'attendre une condition

39
00:02:54,508 --> 00:03:01,500
ou bien la forme la plus
générale qui utilise un signal,

40
00:03:01,500 --> 00:03:06,260
le changement d'un signal,
une condition ou éventuellement un temps.

41
00:03:06,260 --> 00:03:13,715
Les syntaxes d'utilisation de ces
différentes formes sont présentées ici.

42
00:03:13,715 --> 00:03:15,605
Wait on, nous avons S1, S2.

43
00:03:16,705 --> 00:03:21,965
Donc là l'attente est liée par rapport
à un changement sur ces deux signaux,

44
00:03:21,965 --> 00:03:27,005
ou bien par rapport à un délai, ou bien
par rapport à une condition, ici ck égale

45
00:03:27,005 --> 00:03:31,900
1, ou bien une forme qui associe les
deux ou éventuellement les trois.

46
00:03:33,380 --> 00:03:38,510
Nous avons l'instruction IF qui permet de
tester une expression, if expression then

47
00:03:38,510 --> 00:03:45,040
action, sinon expression 2 then action 2,
sinon action 3.

48
00:03:45,040 --> 00:03:49,968
Il faut juste noter qu'une instruction
IF est toujours fermée par un end if.

49
00:03:49,968 --> 00:03:54,345
L'instruction CASE...IS

50
00:03:54,345 --> 00:03:58,765
permet de sélectionner une séquence,
les séquences d'instructions sont là,

51
00:03:58,765 --> 00:04:02,265
en fonction de la valeur
de l'expression testée.

52
00:04:02,265 --> 00:04:05,445
Ici nous avons un sélecteur
au niveau de la syntaxe

53
00:04:05,445 --> 00:04:07,255
qui peut prendre plusieurs
conditions différentes.

54
00:04:08,800 --> 00:04:11,516
Et à chaque condition est associée
une série d'instructions.

55
00:04:11,516 --> 00:04:16,675
Donc ici si sélecteur vaut condition 1,

56
00:04:16,675 --> 00:04:19,530
c'est-à-dire ici si le sélecteur
est égal aux conditions 1,

57
00:04:19,530 --> 00:04:23,990
eh bien la série
d'instructions 1 est exécutée.

58
00:04:25,210 --> 00:04:31,280
Si le sélecteur valide la condition 2,
la série d'instructions 2 est exécutée,

59
00:04:31,280 --> 00:04:35,188
sinon dans tous les autres cas WHEN
OTHERS, tous les cas doivent être traités.

60
00:04:35,188 --> 00:04:39,910
En ce moment-là, c'est les
instructions N qui seront exécutées.

61
00:04:39,910 --> 00:04:43,598
Il faut noter que l'instruction
se termine par un END CASE.

62
00:04:43,598 --> 00:04:47,830
Ces instructions CASE...IS sont utilisées

63
00:04:47,830 --> 00:04:52,630
dans la descriptions des machines d'état
ou toute forme de table de vérité.

64
00:04:52,630 --> 00:04:57,440
Les instructions de boucle en
VHDL utilisent le mot clé LOOP.

65
00:04:57,440 --> 00:05:00,290
Nous avons trois formes
d'utilisations de l'instruction LOOP.

66
00:05:01,710 --> 00:05:06,766
Soit elle est utilisée avec FOR,
avec WHILE ou bien la forme générale.

67
00:05:06,766 --> 00:05:14,420
L'instruction FOR permet d'avoir
un nombre d'itérations fini.

68
00:05:14,420 --> 00:05:21,580
Ici nous avons 100 itérations,
donc le i va de 1 à 100.

69
00:05:21,580 --> 00:05:27,600
L'instruction WHILE s'exécute tant
que la condition est valable,

70
00:05:27,600 --> 00:05:34,015
et l'instruction LOOP
s'exécute de manière infinie.

71
00:05:34,015 --> 00:05:38,505
Alors les instructions de boucle
peuvent utiliser également

72
00:05:38,505 --> 00:05:41,559
l'instruction Next ou l'instruction Exit.

73
00:05:41,559 --> 00:05:46,139
L'instruction Next permet d'arrêter

74
00:05:46,139 --> 00:05:50,695
l'itération courante et de
passer à l'itération suivante.

75
00:05:52,115 --> 00:05:56,525
L'instruction Exit permet de
sortir complètement de la boucle.

76
00:05:57,595 --> 00:06:05,595
Au niveau de la sortie de la porte E, nous
avons Sr qui est égale à R si Ck vaut 1.

77
00:06:05,595 --> 00:06:11,395
Et Ss qui est égal à S si Ck vaut 1,
et au niveau de la sortie de la porte,

78
00:06:11,395 --> 00:06:16,656
nous avons ici Qa qui sont des
signaux internes, qui est égal à Sr ou

79
00:06:16,656 --> 00:06:23,615
Qb le tout barre.

80
00:06:23,615 --> 00:06:30,633
Et nous avons ici au niveau de Qb S ou

81
00:06:30,633 --> 00:06:35,280
Qa le tout barre.

82
00:06:36,850 --> 00:06:42,130
Alors à partir de ces équations,
nous pouvons synthétiser la bascule RS.

83
00:06:43,460 --> 00:06:45,920
Alors donc nous allons
synthétiser cette bascule

84
00:06:45,920 --> 00:06:48,630
activée sur front montant de l'horloge Ck.

85
00:06:48,630 --> 00:06:53,900
Alors au niveau de l'entité de la bascule,
donc l'entité ici s'appelle bascule RS,

86
00:06:53,900 --> 00:06:57,514
nous avons les trois entrées,
les trois ports d'entrée, le clock,

87
00:06:57,514 --> 00:07:03,010
l'entrée de mise à 0 et l'entrée de
mise à 1 et nous avons la sortie.

88
00:07:04,060 --> 00:07:08,180
Au niveau de l'architecture, nous avons
déclaré ici les quatre signaux internes :

89
00:07:08,180 --> 00:07:14,740
Sr, Ss, Qa et Qb, et au niveau du Process,
nous avons les trois signaux sensibles,

90
00:07:14,740 --> 00:07:20,430
Ck, R et S qui permettent de réactiver
le Process à chaque changement.

91
00:07:20,430 --> 00:07:24,640
Ici Ck'event est une
fonction de type booléen

92
00:07:25,700 --> 00:07:29,650
qui renvoie un trou lorsqu'un
événement est détecté sur Ck.

93
00:07:30,840 --> 00:07:35,730
Lorsqu'on l'associe avec Ck égal 1,
ça veut dire que Ck est passé de 0 à 1,

94
00:07:35,730 --> 00:07:38,160
comme c'est une variable logique.

95
00:07:38,160 --> 00:07:42,520
Donc cette association permet
de détecter des fronts montants.

96
00:07:44,010 --> 00:07:46,975
En VHDL, on aurait pu utiliser la fonction

97
00:07:46,975 --> 00:07:51,270
rising_edge qui permet de
détecter les fronts montants.

98
00:07:51,270 --> 00:07:52,930
Si on voulait détecter
des fronts descendants,

99
00:07:52,930 --> 00:07:56,590
on aurait pu aussi utiliser falling_edge.

100
00:07:56,590 --> 00:08:03,880
Donc si je résume, à chaque front montant
de l'horloge, nous allons affecter R à Sr,

101
00:08:03,880 --> 00:08:09,410
S à Ss, et évaluer Qa et Qb en
fonction des équations que nous avons

102
00:08:09,410 --> 00:08:15,130
déclinées tout à l'heure, et à la fin du
process, les signaux sont mis à jour ici.

103
00:08:15,130 --> 00:08:18,440
Le Q ne prend la valeur de
Qa qu'à la fin du process.

104
00:08:19,460 --> 00:08:23,720
La deuxième bascule que nous vous
proposons est la bascule D dont la sortie

105
00:08:23,720 --> 00:08:27,780
Q prend la valeur de l'entrée à
chaque front montant de l'horloge.

106
00:08:27,780 --> 00:08:32,310
Pour l'entité de cette bascule D,
nous avons les trois ports,

107
00:08:32,310 --> 00:08:34,880
les deux entrées Ck et D et la sortie Q.

108
00:08:37,160 --> 00:08:40,250
Au niveau de l'architecture
de cette bascule,

109
00:08:40,250 --> 00:08:44,600
nous avons déclaré un signal interne Qa,
et au niveau du Process,

110
00:08:44,600 --> 00:08:48,760
nous avons les deux signaux de la
liste de sensibilité, Ck et D.

111
00:08:48,760 --> 00:08:51,760
Donc le Process est sensible
à ces deux signaux.

112
00:08:51,760 --> 00:08:55,440
Et à chaque front montant de l'horloge,
la sortie,

113
00:08:56,550 --> 00:09:02,140
le signal interne Qa prend la valeur
de D sinon la sortie est inchangée.

114
00:09:03,540 --> 00:09:07,050
Et la sortie est mise à jour
à la fin du Process ici.

115
00:09:07,050 --> 00:09:10,920
Donc Q va prendre la valeur
de Qa à la fin du Process.

116
00:09:12,160 --> 00:09:16,550
Nous allons maintenant introduire
une entrée de forçage à 1 et une

117
00:09:16,550 --> 00:09:18,960
entrée de forçage à 0.

118
00:09:18,960 --> 00:09:23,240
Ces entrées sont représentées ici au
niveau de l'architecture de la bascule par

119
00:09:24,630 --> 00:09:28,280
l'entrée R de remise à 0
et l'entrée S de mise à 1.

120
00:09:28,280 --> 00:09:33,870
Donc nous avons les deux entrées, Ck et D
et les deux entrées de forçage à 0 et 1,

121
00:09:33,870 --> 00:09:36,210
et nous avons la sortie Q qui est là.

122
00:09:37,340 --> 00:09:39,570
Alors l'architecture de cette bascule D.

123
00:09:39,570 --> 00:09:45,040
Nous avons déclaré ici un
signal interne au début

124
00:09:45,040 --> 00:09:49,510
de l'architecture et au niveau du Process
nous avons quatre signaux sensibles.

125
00:09:49,510 --> 00:09:55,550
Donc ce Process est sensible à l'horloge à
l'entrée D et aux deux entrées de forçage.

126
00:09:55,550 --> 00:09:58,270
Les deux entrées de forçage R et S

127
00:09:59,780 --> 00:10:04,480
sont prioritaires sur le
fonctionnement normal de la bascule.

128
00:10:04,480 --> 00:10:07,420
Cela veut dire que si l'une
des deux entrées est activée,

129
00:10:09,380 --> 00:10:11,691
l'horloge n'est pas prise en compte.

130
00:10:11,691 --> 00:10:18,800
Si R = 1, c'est-à-dire R activé,
la sortie Qa vaut zéro.

131
00:10:19,930 --> 00:10:27,490
Si S est activé, la sortie Qa vaut 1, et
si les deux entrées ne sont pas activées,

132
00:10:27,490 --> 00:10:31,870
à ce moment, la prise en compte
de l'horloge peut se faire,

133
00:10:31,870 --> 00:10:36,500
et à ce moment-là la sortie
Qa prend la valeur de D.

134
00:10:37,770 --> 00:10:39,860
Sinon, aucun changement.

135
00:10:39,860 --> 00:10:43,255
Et à la fin du processus,
on met à jour les signaux,

136
00:10:43,255 --> 00:10:46,120
c'est-à-dire que la sortie Q
va prendre la valeur de Qa.

137
00:10:47,720 --> 00:10:51,970
Nous allons maintenant proposer la
synthèse de la bascule JK à partir

138
00:10:51,970 --> 00:10:52,783
de sa table de vérité.

139
00:10:52,783 --> 00:10:57,190
J = 0 et K = 0, la sortie reste inchangée.

140
00:10:57,190 --> 00:11:02,500
Si les deux entrées J et K sont
différentes, la sortie suit J.

141
00:11:02,500 --> 00:11:05,585
Et si les deux entrées sont égales à 1,
la sortie est opposée,

142
00:11:05,585 --> 00:11:10,430
c'est-à-dire que la sortie bascule entre
0 et 1, la sortie précédente est opposée.

143
00:11:10,430 --> 00:11:15,810
Pour la synthèse de la bascule JK,
nous avons ici l'entité de cette bascule

144
00:11:15,810 --> 00:11:20,990
avec ses trois entrées et la sortie,
et au niveau de l'architecture,

145
00:11:20,990 --> 00:11:25,620
nous avons déclaré ici un signal interne,
les trois signaux sensibles,

146
00:11:25,620 --> 00:11:32,700
à chaque front montant de l'horloge,
si J = K = 0, la sortie reste inchangée.

147
00:11:33,960 --> 00:11:39,483
Si J et K sont différents,
la sortie suit J,

148
00:11:39,483 --> 00:11:46,705
et sinon, c'est-à-dire J = 1 et K = 1,
la sortie est opposée,

149
00:11:46,705 --> 00:11:51,010
c'est-à-dire que la sortie prend l'état
de la sortie précédente et inversée.

150
00:11:52,280 --> 00:11:55,278
Et à la fin du process,
les signaux sont mis à jour,

151
00:11:55,278 --> 00:11:58,100
c'est-à-dire que Qa est affectée à Q.

152
00:11:58,100 --> 00:12:02,375
Nous allons maintenant synthétiser
un compteur modulo 10.

153
00:12:02,375 --> 00:12:05,495
Un compteur est un système séquentiel

154
00:12:05,495 --> 00:12:09,245
qui permet de dénombrer des impulsions
de l'horloge appliquées sur son entrée.

155
00:12:10,385 --> 00:12:12,025
Pour la synthèse de ce compteur modulo 10,

156
00:12:12,025 --> 00:12:17,835
nous avons l'entité qui est appelée ici
compteur, les deux entrées, le Clock

157
00:12:17,835 --> 00:12:23,760
dont on va compter le nombre d'impulsions,
une entrée de remise à zéro et la sortie

158
00:12:23,760 --> 00:12:28,800
qui est ici représentée par un vecteur
de bits, 3 downto 0, c'est-à-dire

159
00:12:28,800 --> 00:12:34,230
constitué de quatre bits qui permettent
de représenter les valeurs de 0 à 9.

160
00:12:34,230 --> 00:12:38,700
Au niveau de l'architecture,
nous avons ici un signal interne Qa

161
00:12:39,740 --> 00:12:43,800
qui est aussi un vecteur
de bits 3 downto 0.

162
00:12:43,800 --> 00:12:50,380
Et au niveau du process, nous avons
les deux signaux sensibles, Ck et R.

163
00:12:50,380 --> 00:12:53,668
Si R = 0, l'entrée de remise à
zéro est activée ici niveau bas.

164
00:12:53,668 --> 00:12:56,540
A ce moment-là, la sortie vaut zéro,

165
00:12:56,540 --> 00:13:00,823
sinon à chaque front montant de l'horloge,
on va incrémenter Qa.

166
00:13:00,823 --> 00:13:02,668
Qa = Qa + 1.

167
00:13:02,668 --> 00:13:07,110
Si Qa = 9, on réinitialise le compteur.

168
00:13:08,200 --> 00:13:10,645
A la fin du process,
les signaux sont mis à jour,

169
00:13:10,645 --> 00:13:12,780
c'est-à-dire que Qa est affecté à Q.

170
00:13:14,020 --> 00:13:17,480
Les systèmes numériques qui
permettent de réaliser ce comptage

171
00:13:17,480 --> 00:13:19,360
évoluent souvent à des
fréquences très élevées.

172
00:13:20,360 --> 00:13:24,238
Si nous voulons apprécier la fréquence
de comptage de notre compteur,

173
00:13:24,238 --> 00:13:29,770
c'est-à-dire qu'un être humain puisse
apprécier la fréquence de comptage,

174
00:13:29,770 --> 00:13:33,145
il faudrait envisager une
division de la fréquence,

175
00:13:33,145 --> 00:13:36,950
c'est-à-dire compter à une
fréquence très faible.

176
00:13:36,950 --> 00:13:41,100
Si nous supposons ici que nous avons
un système qui fonctionne à 50 MHz,

177
00:13:41,100 --> 00:13:45,200
et que nous voulons compter à 5 Hz,

178
00:13:45,200 --> 00:13:50,750
cela veut dire que nous devons diviser
notre fréquence par 10 000 000.

179
00:13:50,750 --> 00:13:54,900
Pour représenter 10 000 000,
il nous faut 24 bits.

180
00:13:55,930 --> 00:14:00,930
Au niveau de l'entité de notre compteur,
nous avons les deux signaux ici d'entrée,

181
00:14:00,930 --> 00:14:05,380
Ck et R, et nous avons
introduit un signal de sortie,

182
00:14:05,380 --> 00:14:10,890
Qh qui va nous permettre de décompter
le nombre d'impulsions pouvant

183
00:14:10,890 --> 00:14:14,480
atteindre 10 000 000 avant de pouvoir
compter sur notre compteur Q.

184
00:14:14,480 --> 00:14:21,320
Et au niveau de l'architecture, nous avons
déclaré deux signaux internes, Qa et Qha.

185
00:14:21,320 --> 00:14:23,708
Au niveau du process,
nous avons les deux signaux sensibles.

186
00:14:23,708 --> 00:14:29,380
Si R = 1, on remet à zéro le compteur.

187
00:14:29,380 --> 00:14:32,880
Sinon, à chaque front
montant de l'horloge,

188
00:14:32,880 --> 00:14:34,966
on va compter le nombre
d'impulsions de l'horloge.

189
00:14:34,966 --> 00:14:38,640
Qha = Qha + 1.

190
00:14:38,640 --> 00:14:43,580
Et si Qha atteint la valeur
qui correspond à 10 000 000,

191
00:14:43,580 --> 00:14:46,570
si le compteur atteint la valeur maximale,
on réinitialise,

192
00:14:46,570 --> 00:14:51,190
sinon on compte sur le vrai
compteur qui va compter

193
00:14:51,190 --> 00:14:56,060
à la fréquence désirée, et à la fin du
process, les signaux sont mis à jour.

194
00:14:56,060 --> 00:14:59,180
Nous allons maintenant
passer en compteur modulo N.

195
00:15:00,180 --> 00:15:02,989
Nous vous proposons ici
un compteur modulo 1 000,

196
00:15:02,989 --> 00:15:07,230
c'est-à-dire que l'objectif
est de compter de 0 à 999.

197
00:15:07,230 --> 00:15:10,650
Il nous faut donc trois chiffres,
trois digits,

198
00:15:10,650 --> 00:15:15,610
Q0, Q1 et Q2 qui représentent les
trois chiffres qui sont représentés.

199
00:15:15,610 --> 00:15:17,500
Chaque chiffre est représenté
sur quatre bits ici.

200
00:15:19,020 --> 00:15:22,520
Nous avons toujours nos deux
entrées au niveau de l'entité.

201
00:15:22,520 --> 00:15:25,750
Au niveau de l'architecture,
nous avons déclaré les trois signaux.

202
00:15:25,750 --> 00:15:29,700
Au niveau du process,
nous avons les deux entrées Ck et R,

203
00:15:29,700 --> 00:15:35,580
et nous avons déclaré une variable
Qh qui varie de 0 à 50 000 000.

204
00:15:35,580 --> 00:15:40,741
Si R = 1,
on réinitialise les trois digits,

205
00:15:40,741 --> 00:15:49,170
sinon à chaque front montant de l'horloge
on incrémente Qh et si Qh = 50 000 000,

206
00:15:49,170 --> 00:15:53,110
on incrémente Qa0 et si Qa0 = 9,

207
00:15:53,110 --> 00:15:57,621
on incrémente Qa1 et on réinitialise Qa0.

208
00:15:57,621 --> 00:16:02,370
Si Qa1 = 9,
on incrémente Qa2 et on réinitialise Qa1.

209
00:16:03,420 --> 00:16:07,800
Question ici, quelle est la fréquence
de comptage de ce compteur?

210
00:16:07,800 --> 00:16:12,970
A la fin du processus, les signaux
sont mis à jour, c'est-à-dire Qa0 est

211
00:16:12,970 --> 00:16:17,920
mis dans Q0, Qa1 est mis dans Q1,
et Qa2 est mis dans Q2.

212
00:16:20,100 --> 00:16:24,350
Réponse à ma question,
ici nous avons une fréquence de 1 Hz.

213
00:16:24,350 --> 00:16:30,770
Nous allons maintenant aborder le
registre à décalage série parallèle.

214
00:16:30,770 --> 00:16:34,890
Nous vous proposons cette structure
ici faite à partir de bascules D.

215
00:16:34,890 --> 00:16:41,544
Nous avons ici un registre de quatre bits,
donc quatre bascules D, et l'entrée série.

216
00:16:41,544 --> 00:16:42,570
Et nous avons des sorties parallèles,

217
00:16:42,570 --> 00:16:48,040
et nous avons ici une sortie SS,
sortie série.

218
00:16:48,040 --> 00:16:50,980
Les quatre bascules sont
synchronisées sur l'horloge Ck.

219
00:16:50,980 --> 00:16:53,310
Nous avons déclaré ici
quatre signaux internes, Qa,

220
00:16:53,310 --> 00:16:57,210
Qb, Qc et Qd, donc des signaux
qui ne sortent pas du composant.

221
00:16:57,210 --> 00:17:00,050
Comme la structure est faite
à partir de bascules D,

222
00:17:00,050 --> 00:17:05,140
nous avons repris ici juste la synthèse
de la bascule D comme précédemment.

223
00:17:05,140 --> 00:17:10,995
Et à partir de la bascule D, nous avons
ici notre entité registre série parallèle

224
00:17:10,995 --> 00:17:15,465
qui dispose de deux entrées,
Ck et ES entrée série et de deux sorties,

225
00:17:15,465 --> 00:17:20,975
SS sortie série et SP sortie parallèle
qui est représenté ici sur quatre bits,

226
00:17:20,975 --> 00:17:22,235
donc 0 TO 3.

227
00:17:22,235 --> 00:17:26,020
Les bits sont disposés du LSB au MSB.

228
00:17:26,020 --> 00:17:28,740
Nous avons déclaré ici au
niveau de l'architecture

229
00:17:28,740 --> 00:17:32,840
un composant BasculeD et à
partir de l'architecture ici,

230
00:17:32,840 --> 00:17:38,630
nous avons quatre signaux internes,
les quatre signaux Qa, Qb, Qc et Qd.

231
00:17:38,630 --> 00:17:43,680
Et pour la première unité,
nous avons ici instancié

232
00:17:45,420 --> 00:17:48,970
le composant BasculeD avec PORT MAP,

233
00:17:48,970 --> 00:17:53,920
et nous lui donnons ici des signaux,
Ck pour l'horloge, l'entrée série qu'on

234
00:17:53,920 --> 00:17:58,930
donne pour la première unité et la
sortie est mise ici au niveau de Qa.

235
00:18:00,020 --> 00:18:03,685
Et pour la deuxième unité, l'entrée
c'est la sortie de la première unité,

236
00:18:03,685 --> 00:18:07,690
c'est-à-dire Qa et la sortie
est mise ici dans Qb.

237
00:18:07,690 --> 00:18:11,850
La sortie Qb de l'unité 2 est mise
dans l'entrée de l'unité 3 et

238
00:18:13,350 --> 00:18:17,550
la sortie de l'unité 3 est Qc,
qui est remise dans l'entrée de l'unité 4,

239
00:18:17,550 --> 00:18:20,720
et la sortie est mise ici dans Qd.

240
00:18:21,730 --> 00:18:27,002
Et ici, nous allons mettre sur la sortie
parallèle les signaux Qa sur SP(0) Qb

241
00:18:27,002 --> 00:18:32,130
sur SP(1), Qc sur SP(2) et Qd sur SP(3).

242
00:18:32,130 --> 00:18:37,390
Nous venons d'aborder le circuit
logique séquentielle en VHDL,

243
00:18:38,990 --> 00:18:44,680
nous avons vu ensemble les process et
les instructions de contrôles associées,

244
00:18:46,090 --> 00:18:50,670
nous avons pu synthétiser à
partir des process les bascules,

245
00:18:52,210 --> 00:18:55,006
les compteurs et les registres.

246
00:18:55,006 --> 00:19:03,210
Ces éléments seront utilisés dans
la commande de matrices à LED.