1
00:00:00,025 --> 00:00:10,025
[AUDIO_VIDE]

2
00:00:12,010 --> 00:00:12,510
Bonjour.

3
00:00:13,620 --> 00:00:18,330
Nous allons continuer le cours sur
les enseignes et afficheurs à LED.

4
00:00:18,330 --> 00:00:22,120
Aujourd'hui, nous allons
aborder l'introduction au VHDL.

5
00:00:22,120 --> 00:00:25,610
Les méthodes de conception

6
00:00:25,610 --> 00:00:28,516
des circuits numériques ont beaucoup
évolué ces dernières années.

7
00:00:28,516 --> 00:00:32,540
Des circuits logiques standards,

8
00:00:32,540 --> 00:00:36,336
on est passé aux circuits à
fonctionnement programmable,

9
00:00:36,336 --> 00:00:41,590
les microprocesseurs,
les microcontrôleurs, les VSP,

10
00:00:41,590 --> 00:00:46,130
les circuits intégrés spécifiques
fabriqués en grande série.

11
00:00:47,430 --> 00:00:52,231
La complexité de plus en plus croissante
des circuits numériques a motivé le

12
00:00:52,231 --> 00:00:57,040
développement de langage de
description structurelle.

13
00:00:58,380 --> 00:01:02,730
Et aujourd'hui, nous avons des circuits de
quelques centaines de portes logiques à

14
00:01:02,730 --> 00:01:04,310
des millions de portes logiques.

15
00:01:05,490 --> 00:01:11,300
Et les outils d'aide à la conception
sont unifiés autour du langage VHDL.

16
00:01:13,060 --> 00:01:14,480
Nous allons voir dans cette leçon,

17
00:01:16,110 --> 00:01:20,830
l'introduction au VHDL à
travers les concepts de base.

18
00:01:22,330 --> 00:01:24,650
Nous allons voir les unités de conception,

19
00:01:25,670 --> 00:01:30,626
les objets et les types de base,
les opérateurs et les tableaux.

20
00:01:30,626 --> 00:01:39,650
Le sigle VHDL signifie
VHSIC Hardware Description Langage,

21
00:01:39,650 --> 00:01:43,350
ou en français langage de
description de matériel.

22
00:01:43,350 --> 00:01:50,300
Et le sigle VHSIC signifie
Very High Speed Integrated Circuit,

23
00:01:50,300 --> 00:01:54,350
ou en français circuit intégré
à très grande vitesse.

24
00:01:54,350 --> 00:01:57,616
Le VHDL peut être utilisé
pour la modélisation,

25
00:01:57,616 --> 00:02:02,710
la synthèse,
la simulation des circuits numériques.

26
00:02:04,370 --> 00:02:09,113
Le VHDL permet de faire la synthèse
logique des circuits numériques,

27
00:02:09,113 --> 00:02:14,320
c'est-à-dire faire le passage de la
description comportementale du circuit,

28
00:02:14,320 --> 00:02:19,250
ce que doit faire le circuit à
la description structurelle.

29
00:02:19,250 --> 00:02:23,570
Comment doit être fait le
circuit au niveau topographique.

30
00:02:23,570 --> 00:02:27,945
Le VHDL permet également de faire la
synthèse physique des circuits numériques,

31
00:02:27,945 --> 00:02:32,150
c'est-à-dire faire le passage

32
00:02:32,150 --> 00:02:36,730
de la description structurelle
à la vue physique.

33
00:02:36,730 --> 00:02:43,460
Et cette dernière synthèse aboutit
à la liste des portes logiques

34
00:02:43,460 --> 00:02:48,850
nécessaires à la réalisation du circuit
numérique, ainsi qu'à leur interconnexion.

35
00:02:49,880 --> 00:02:53,570
Dans les enseignes et afficheurs
à LED d'une grande complexité,

36
00:02:53,570 --> 00:02:59,580
le contrôle de la matrice
se fait souvent à partir

37
00:02:59,580 --> 00:03:03,810
de circuits numériques de type FPGA,

38
00:03:03,810 --> 00:03:08,980
qui sont des circuits à grande intensité
d'intégrations pouvant encapsuler

39
00:03:08,980 --> 00:03:11,430
des milliers,
voire des millions de portes logiques.

40
00:03:13,180 --> 00:03:16,870
Ces portes logiques sont
implantées au niveau du circuit

41
00:03:18,090 --> 00:03:20,330
mais l'interconnexion est programmable.

42
00:03:22,240 --> 00:03:25,640
Cette programmation s'appuie
souvent sur le langage VHDL.

43
00:03:26,880 --> 00:03:31,050
Deux unités de conception,
dépendantes et obligatoires,

44
00:03:31,050 --> 00:03:34,068
sont nécessaires dans un programme VHDL.

45
00:03:34,068 --> 00:03:39,650
L'entité, l'architecture entité,

46
00:03:39,650 --> 00:03:43,295
Entity, représente la vue
externe du composant,

47
00:03:43,295 --> 00:03:48,530
c'est-à-dire les différents
ports du composant,

48
00:03:48,530 --> 00:03:53,730
que ce soient les entrées, les sorties,
ou éventuellement des entrée/sortie.

49
00:03:53,730 --> 00:03:57,920
Un port est déclaré entrée, un port IN.

50
00:03:58,950 --> 00:04:01,210
Un port OUT est une sortie.

51
00:04:01,210 --> 00:04:04,650
Mais un port peut également
être entrée/sortie.

52
00:04:04,650 --> 00:04:09,110
L'architecture décrit le
fonctionnement interne du composant,

53
00:04:10,690 --> 00:04:14,970
que doit faire le composant,
le fonctionnement du composant,

54
00:04:14,970 --> 00:04:20,090
quelle est la fonction à
synthétiser au niveau du composant.

55
00:04:20,090 --> 00:04:24,310
L'architecture décrit
les signaux internes,

56
00:04:24,310 --> 00:04:29,320
les composants, les constantes, les
différents déclarations de sous programmes

57
00:04:30,570 --> 00:04:34,370
et à une entité peut correspondre
plusieurs architectures.

58
00:04:34,370 --> 00:04:38,700
La structure générale d'un programme
VHDL est constituée des deux parties,

59
00:04:38,700 --> 00:04:42,410
nous avons la partie entité
et la partie architecture.

60
00:04:44,020 --> 00:04:48,720
L'entité utilise le mot-clé
Entity associée à un nom,

61
00:04:48,720 --> 00:04:51,430
chaque entité est associée à un
nom et le nom est quelconque,

62
00:04:51,430 --> 00:04:52,640
excepté quelques mots réservés.

63
00:04:52,640 --> 00:04:59,650
Et l'entité est fermée par un End, suivi
du nom de l'entité de manière optionnelle.

64
00:04:59,650 --> 00:05:05,093
Et au niveau de l'architecture, nous
avons une première zone dite déclarative,

65
00:05:05,093 --> 00:05:09,660
qui permet de déclarer les
signaux internes, éventuellement.

66
00:05:09,660 --> 00:05:14,862
Et une deuxième zone, qui permet de
décrire ce que fait l'architecture.

67
00:05:14,862 --> 00:05:18,480
Le VHDL considère deux
domaines d'instruction,

68
00:05:18,480 --> 00:05:24,140
nous avons les instructions concurrentes
et les instructions séquentielles.

69
00:05:24,140 --> 00:05:29,395
Les instructions séquentielles sont
toujours à l'intérieur d'un process,

70
00:05:29,395 --> 00:05:33,650
c'est-à-dire c'est les instructions
qui s'exécutent suivant

71
00:05:33,650 --> 00:05:36,600
l'ordre de leur inscription,
de leur écriture.

72
00:05:37,690 --> 00:05:40,540
Tandis que les instructions
concurrentes s'exécutent en parallèle.

73
00:05:41,690 --> 00:05:45,250
Donc, tout ce qui est en dehors d'un
process s'exécute en parallèle.

74
00:05:46,810 --> 00:05:48,770
Y compris des process différents.

75
00:05:49,880 --> 00:05:55,190
Nous avons ici deux process, P1 et P2,
qui doivent s'exécuter en parallèle,

76
00:05:55,190 --> 00:05:57,310
avec les instructions concurrentes.

77
00:05:57,310 --> 00:06:03,060
Je choisis ici de vous présenter
un multiplexeur 2 vers 1.

78
00:06:03,060 --> 00:06:04,470
Donc, le schéma de ce multiplexeur,

79
00:06:04,470 --> 00:06:08,260
nous avons deux entrées,
l'entrée du sélecteur et la sortie.

80
00:06:09,680 --> 00:06:11,830
La structure générale du programme

81
00:06:12,850 --> 00:06:15,170
de ce multiplexeur est
constituée de trois parties.

82
00:06:15,170 --> 00:06:18,480
Nous avons une première partie librairie,
une deuxième partie entité,

83
00:06:18,480 --> 00:06:19,780
une troisième partie architecture.

84
00:06:20,940 --> 00:06:24,430
Ces librairies ne font pas partie
de la description du langage,

85
00:06:24,430 --> 00:06:29,830
elles sont donc différentes
d'un constructeur à l'autre.

86
00:06:29,830 --> 00:06:34,020
Et l'entité ici est appelée mux2, et

87
00:06:34,020 --> 00:06:38,864
nous avons juste déclaré l'architecture
qui est associée à l'entité.

88
00:06:40,120 --> 00:06:44,260
Règle élémentaire du langage,
nous avons les ports

89
00:06:44,260 --> 00:06:47,960
qui sont déclarés entre parenthèses, donc
parenthèse ouverte, parenthèse fermée.

90
00:06:49,510 --> 00:06:53,830
Et les noms des différents
ports sont séparés

91
00:06:53,830 --> 00:06:58,170
de leur mode et de leur
type par deux-points.

92
00:06:58,170 --> 00:07:01,304
Et les instructions se terminent
toujours par point-virgule.

93
00:07:02,540 --> 00:07:07,474
Remarquez qu'un port en
mode IN est par défaut,

94
00:07:07,474 --> 00:07:12,150
c'est-à-dire si un port est une entrée,
on n'est pas obligé de le spécifier.

95
00:07:13,910 --> 00:07:16,480
Et pour le OUT, la sortie,
c'est obligatoire.

96
00:07:17,520 --> 00:07:20,300
Si nous regardons maintenant
notre architecture, mux2,

97
00:07:21,710 --> 00:07:27,690
qui commence ici par e1, nous avons
utilisé l'instruction with select,

98
00:07:27,690 --> 00:07:31,430
que nous verrons un peu plus tard
dans les instructions concurrentes.

99
00:07:31,430 --> 00:07:36,730
Notez simplement que l'entrée
e1 est affectée à la sortie s,

100
00:07:38,490 --> 00:07:43,710
car sel, le sélecteur,
vaut 1 et que l'entrée e2 est

101
00:07:45,190 --> 00:07:49,150
affectée à la sortie s dans tous
les autres cas, même others.

102
00:07:50,220 --> 00:07:52,310
Le VHDL manipule quatre types d'objets.

103
00:07:54,490 --> 00:07:59,650
Nous avons les constantes,
avec le mot-clé CONSTANT,

104
00:07:59,650 --> 00:08:05,110
qui représentent les objets dont la
valeur ne change pas durant le programme.

105
00:08:05,110 --> 00:08:06,170
Nous avons les variables

106
00:08:07,360 --> 00:08:10,980
qui sont des objets dont la valeur
peut changer par affectation.

107
00:08:10,980 --> 00:08:15,560
Notez simplement que les variables
n'existent qu'à l'intérieur d'un process,

108
00:08:15,560 --> 00:08:17,200
donc les variables sont locales,

109
00:08:17,200 --> 00:08:20,550
toujours locales dans un processus,
elles ne sortent pas du process.

110
00:08:22,230 --> 00:08:25,670
Contrairement aux signaux qui
utilisent le mot-clé SIGNAL,

111
00:08:25,670 --> 00:08:26,990
qui désigne les signaux internes.

112
00:08:28,460 --> 00:08:33,590
Ces signaux sont déclarés en dehors
des processus, à l'intérieur

113
00:08:33,590 --> 00:08:39,030
de l'architecture, mais ils peuvent
être globaux à toute l'architecture,

114
00:08:39,030 --> 00:08:41,260
s'ils sont déclarés au
début de l'architecture.

115
00:08:42,550 --> 00:08:45,280
Nous avons aussi les FILE qui permettent

116
00:08:46,390 --> 00:08:50,960
l'échange de données avec l'extérieur,
qui sont des fichiers.

117
00:08:50,960 --> 00:08:56,140
Quelques exemples de déclarations
de quelque type de base.

118
00:08:56,140 --> 00:09:01,890
Nous avons ici déclaré une constante cte,
qui est de type INTEGER,

119
00:09:01,890 --> 00:09:07,170
donc un entier et qui est initialisée ici,
notez les deux-points égale à 10.

120
00:09:07,170 --> 00:09:14,999
Nous avons ici une variable qui s'appelle
vari, qui est de type BIT_VECTOR.

121
00:09:14,999 --> 00:09:16,990
Un BIT_VECTOR, c'est un ensemble de bits.

122
00:09:18,010 --> 00:09:22,520
Alors, la disposition des bits est très
importante, ici, notée 3 DOWNTO 0.

123
00:09:22,520 --> 00:09:26,920
Donc, on peut disposer des bits de
manière ascendante ou descendante,

124
00:09:26,920 --> 00:09:29,195
ici c'est la disposition descendante,

125
00:09:29,195 --> 00:09:32,290
c'est-à-dire de bits de poids
fort ou bits de poids faible.

126
00:09:33,750 --> 00:09:39,330
On aurait pu faire aussi 0 TO 3,
c'est-à-dire de manière ascendante.

127
00:09:39,330 --> 00:09:41,730
Et ici,
les quatre bits sont initialisés à 0.

128
00:09:41,730 --> 00:09:45,000
Nous avons ici une variable n,

129
00:09:45,000 --> 00:09:49,946
qui est de type entier,
qui varie entre 0 et 65 535.

130
00:09:51,350 --> 00:09:55,310
Nous avons ici un signal, sig,
qui est de type std_logic,

131
00:09:55,310 --> 00:09:56,830
donc un signal de type logique.

132
00:09:57,950 --> 00:10:01,890
Il a un bit vector 3 DOWNTO 0
que nous venons d'expliquer.

133
00:10:02,900 --> 00:10:03,640
Et enfin,

134
00:10:03,640 --> 00:10:09,530
nous avons ici déclaré tout simplement
un fichier qui est de type TEXT.

135
00:10:09,530 --> 00:10:10,230
0.

136
00:10:10,230 --> 00:10:12,880
Un bit peut prendre les valeurs 0 ou 1.

137
00:10:12,880 --> 00:10:17,200
Un bit_vector, c'est un groupe de bits,
tout simplement.

138
00:10:17,200 --> 00:10:20,490
Un booléen, tout le monde connaît,
c'est True ou False.

139
00:10:20,490 --> 00:10:26,600
Un entier est codé sous 32 bits,
et nous avons std_logic et std_ulogic,

140
00:10:26,600 --> 00:10:31,030
qui sont similaires au bit et au
bit_vector, mais avec la seule différence

141
00:10:31,030 --> 00:10:36,090
qu'ils présentent neuf étapes possibles,
contrairement au bit et au bit_vector.

142
00:10:36,090 --> 00:10:38,400
Le VHDL peut utiliser également le time,

143
00:10:38,400 --> 00:10:41,950
qui permet de faire le comptage
du temps (la durée) sur 64 bits.

144
00:10:43,210 --> 00:10:47,490
Notez que time n'est pas synthétisable.

145
00:10:47,490 --> 00:10:52,790
Il faut aussi noter que toute description
VHDL n'est pas forcément synthétisable.

146
00:10:54,400 --> 00:10:56,990
Le VHDL manipule six
opérateurs hiérarchisés.

147
00:10:58,330 --> 00:11:02,460
Ces opérateurs sont définis ici par place,

148
00:11:02,460 --> 00:11:07,750
par groupe, nous en avons six ; et ils
sont placés par ordre de priorité.

149
00:11:07,750 --> 00:11:13,040
Donc des opérateurs les plus
prioritaires aux moins prioritaires.

150
00:11:15,000 --> 00:11:19,680
En résumé rapide de ces opérateurs,
nous avons ici l'exponentiel,

151
00:11:19,680 --> 00:11:24,679
la valeur absolue,
l'inversion, la multiplication,

152
00:11:24,679 --> 00:11:28,659
la division, le modulo,

153
00:11:28,659 --> 00:11:34,690
l'addition, la soustraction,
la concaténation,

154
00:11:34,690 --> 00:11:39,690
l'égalité, la différence, le décalage vers
la gauche, le décalage vers la droite,

155
00:11:39,690 --> 00:11:44,390
les rotations, et les opérateurs logiques.

156
00:11:44,390 --> 00:11:45,020
Les littéraux.

157
00:11:46,300 --> 00:11:50,280
Un littéral est un mot du
langage attaché à des genres.

158
00:11:50,280 --> 00:11:53,540
Nous avons ici des caractères, des chaînes
de caractères, des chaînes de bits,

159
00:11:53,540 --> 00:11:55,090
des décimaux, et des littéraux basés.

160
00:11:56,220 --> 00:12:02,480
Le souligné que vous remarquez ici, les
Underscore au niveau des chiffres, servent

161
00:12:02,480 --> 00:12:06,289
simplement à aérer les chiffres, donc
n'ont aucune influence sur les valeurs.

162
00:12:07,620 --> 00:12:11,690
Vous pouvez noter aussi ici le B,
qui symbolise binaire, le X,

163
00:12:11,690 --> 00:12:16,280
qui symbolise hexadécimal,
le O qui symbolise la base octale,

164
00:12:17,440 --> 00:12:22,270
et les littéraux basés, ici,
qui utilisent les dièses,

165
00:12:22,270 --> 00:12:24,268
qui auraient pu être
remplacés par deux points.

166
00:12:24,268 --> 00:12:29,510
Donc ce chiffre-là,
c'est dans la base 2, ce chiffre-là,

167
00:12:29,510 --> 00:12:33,560
c'est dans la base 8, et ce chiffre-là
c'est dans la base hexadécimale.

168
00:12:33,560 --> 00:12:38,842
Nous allons juste interpréter
ce chiffre-là, qui vaut : C5 ;

169
00:12:38,842 --> 00:12:43,970
le e2 signifie que c'est 16,
puisque c'est la base 16, exponentiel 2.

170
00:12:43,970 --> 00:12:46,840
16 à la puissance 2.

171
00:12:46,840 --> 00:12:51,855
Donc le chiffre, c'est C5
multiplié par 16 à la puissance 2.

172
00:12:51,855 --> 00:12:54,815
Nous avons aussi des chaînes de
bits qui peuvent être représentées

173
00:12:54,815 --> 00:12:57,955
par des std_logic : 7 downto 0,

174
00:12:57,955 --> 00:13:02,895
donc écrit ici de manière descendante, ou
0 to 7, écrit ici de manière ascendante.

175
00:13:04,285 --> 00:13:06,555
Les tableaux sont des collections
de données de même type,

176
00:13:07,655 --> 00:13:11,095
rangées suivant une
disposition utilisant un index.

177
00:13:12,110 --> 00:13:15,960
Nous avons ici quelques exemples de
déclaration et de définition de tableaux.

178
00:13:15,960 --> 00:13:18,130
Nous avons déclaré ici
un tableau de type bus,

179
00:13:19,860 --> 00:13:23,670
qui contient des bits et
qui contient 32 lignes.

180
00:13:24,870 --> 00:13:28,350
Donc c'est un tableau à une seule colonne.

181
00:13:28,350 --> 00:13:33,110
Nous avons ici déclaré un tableau
de couleurs, qui est énuméré,

182
00:13:33,110 --> 00:13:37,600
donc nous avons les différentes
couleurs qui sont énumérées ici.

183
00:13:37,600 --> 00:13:43,053
Et nous avons ici déclaré
un tableau mémoire,

184
00:13:43,053 --> 00:13:48,650
qui est sur 32 lignes et 8 colonnes.

185
00:13:50,900 --> 00:13:54,470
Les tableaux 1 et 2 sont aussi
déclarés sur 32 lignes et 8 colonnes.

186
00:13:56,260 --> 00:14:03,270
Et là, nous créons un tableau Tab_Mem,
qui est de type mémoire.

187
00:14:03,270 --> 00:14:07,940
Là nous créons deux tableaux S1 et S2,
qui sont de type TABLEAU1 et TABLEAU2.

188
00:14:09,620 --> 00:14:12,365
Et là, nous modifions tout simplement
quelques valeurs des tableaux.

189
00:14:12,365 --> 00:14:16,720
S1(0), on lui a affecté cette valeur, ça

190
00:14:17,980 --> 00:14:23,645
veut dire qu'on a modifié les
bits de la première ligne.

191
00:14:23,645 --> 00:14:29,700
S1(31)(5), on lui a affecté le 1,
ça veut dire qu'on a modifié la valeur

192
00:14:29,700 --> 00:14:34,741
qui se trouvait à la 32ème
ligne et 6ème colonne.

193
00:14:34,741 --> 00:14:38,710
Et S2(4,7), est affecté à 0,

194
00:14:38,710 --> 00:14:42,830
on a modifié la valeur qui se trouvait
à la 5ème ligne et 8ème colonne.

195
00:14:44,200 --> 00:14:49,070
Il faudra noter qu'il existe des
environnements logiciels permettant

196
00:14:49,070 --> 00:14:53,660
de faire la simulation et la synthèse
du programme que nous venons de faire.

197
00:14:55,070 --> 00:14:59,920
Et cette synthèse aboutit au
circuit numérique utilisant

198
00:14:59,920 --> 00:15:04,460
éventuellement plusieurs portes logiques,
permettant de réaliser notre multiplexeur.

199
00:15:05,900 --> 00:15:08,840
Nous venons de faire une
introduction au langage VHDL.

200
00:15:08,840 --> 00:15:14,270
À travers les concepts de base du langage,

201
00:15:15,570 --> 00:15:19,840
nous avons mis l'accent sur les deux
unités de conception obligatoires

202
00:15:20,850 --> 00:15:27,420
en programme VHDL,
notamment l'entité et l'architecture.

203
00:15:27,420 --> 00:15:34,600
Nous avons parlé des objets et des types
de base, des opérateurs et des tableaux.

204
00:15:35,870 --> 00:15:41,510
Nous allons par la suite aborder
les instructions concurrentes,

205
00:15:41,510 --> 00:15:43,456
puis les instructions séquentielles.

206
00:15:43,456 --> 00:15:50,361
Ce langage pourra être utilisé dans le
cadre des enseignes et afficheurs à LED,

207
00:15:50,361 --> 00:15:55,125
pour contrôler une matrice
d'une certaine complexité.