1
00:00:03,907 --> 00:00:05,838
Au cours de notre apprentissage,

2
00:00:06,009 --> 00:00:08,582
nous avons rencontré 
trois concepts différents

3
00:00:08,640 --> 00:00:12,865
La surcharge de fonction ou de méthode. 
en anglais on appelle ça overloading.

4
00:00:12,865 --> 00:00:16,693
Le masquage en particulier 
le masquage de méthodes,

5
00:00:16,693 --> 00:00:18,487
qu'on appelle en anglais shadowing

6
00:00:18,487 --> 00:00:21,591
et la substitution ou redéfinitaion 
qu'en anglais

7
00:00:21,591 --> 00:00:25,146
on appelle overriding 
des méthodes virtuelles.

8
00:00:25,146 --> 00:00:27,542
Le dernier ne s'applique 
qu'aux méthodes virtuelles.

9
00:00:27,542 --> 00:00:31,619
Donc pour des méthodes virtuelles 
on pourrait en principe avoir les trois :

10
00:00:31,619 --> 00:00:34,709
la surcharge, du masquage 
et de la substitution.

11
00:00:34,709 --> 00:00:36,799
Qu'est-ce qui est quoi exactement ?

12
00:00:36,799 --> 00:00:41,616
Pour éviter la confusion de certains 
programmeurs, depuis C++2011,

13
00:00:41,616 --> 00:00:44,813
on a deux nouveaux mots-clé dont 
je vous parlerai en fin de cette séquence,

14
00:00:44,813 --> 00:00:50,204
qui sont <i>override</i> et <i>final</i>qui permettent 
de préciser les intentions du programmeur.

15
00:00:50,204 --> 00:00:53,138
Reprenons donc ces trois concepts 
en détail pour éclaircir

16
00:00:53,138 --> 00:00:54,948
précisément de quoi il s'agit.

17
00:00:54,948 --> 00:00:58,850
Avant d'illustrer ces concepts sur
un exemple, rappelons leur définitions.

18
00:00:58,850 --> 00:01:03,020
La surcharge de fonction ou de méthode 
c'est lorsqu'une fonction ou une méthode

19
00:01:03,020 --> 00:01:06,388
a le même nom qu'une autre 
mais des paramètres différents

20
00:01:06,388 --> 00:01:08,298
et qu'elles sont dans la même portée.

21
00:01:08,298 --> 00:01:12,602
Attention, en C++ on ne peut avoir
de la surcharge que dans la même portée.

22
00:01:12,602 --> 00:01:14,347
Nous y reviendrons plus tard.

23
00:01:14,347 --> 00:01:17,844
Le masquage c'est lorsque des entités, 
des variables, des fonctions

24
00:01:17,844 --> 00:01:21,837
et puis dans le cadre de l'orienté-objet 
donc des attributs, des méthodes,

25
00:01:21,837 --> 00:01:25,005
ont le même nom 
mais dans des portées différentes.

26
00:01:25,005 --> 00:01:27,867
Du coup par les règles 
de résolution de portée,

27
00:01:27,867 --> 00:01:30,532
en C++ on résout à la portée la plus proche,

28
00:01:30,532 --> 00:01:33,619
donc celui qui a la portée 
la plus proche masque

29
00:01:33,619 --> 00:01:36,224
celui qui a une portée 
un peu plus lointaine.

30
00:01:36,224 --> 00:01:43,017
Attention, une seule méthode de même nom
suffit à masquer toutes les autres méthodes

31
00:01:43,017 --> 00:01:47,120
de portée plus lointaine, 
indépendamment de leurs paramètres

32
00:01:47,120 --> 00:01:50,518
puisque justement en ce qui concerne 
les paramètres

33
00:01:50,518 --> 00:01:53,584
c'est la notion de surcharge 
qui aurait lieu

34
00:01:53,584 --> 00:01:56,590
et la surcharge n'a lieu que 
dans la même portée.

35
00:01:56,590 --> 00:02:00,570
Donc si on est dans une autre portée, 
il suffit qu'on ait simplement le même nom

36
00:02:00,570 --> 00:02:02,982
pour masquer toutes les méthodes.
Nous allons y revenir sur un exemple.

37
00:02:04,929 --> 00:02:08,380
Enfin la substitution ou aussi 
redéfinition n'est valable que

38
00:02:08,380 --> 00:02:13,711
pour les méthodes virtuelles et il s'agit ici 
de rédéfinir dans une sous-classe

39
00:02:13,711 --> 00:02:17,616
une méthode virtuelle héritée 
d'une super-classe

40
00:02:17,616 --> 00:02:19,478
qui permet à ce moment là 
d'avoir ce qu'on appelle

41
00:02:19,478 --> 00:02:22,113
la résolution dynamique 
des liens et le polymorphisme.

42
00:02:22,113 --> 00:02:26,468
Ce sera la méthode de l'instance réelle 
qui sera appelée si elle est appelée

43
00:02:26,468 --> 00:02:30,105
au travers d'un pointeur ou d'une référence
et de même que pour le masquage

44
00:02:30,105 --> 00:02:32,573
si l'on redéfinit 
une seule méthode virtuelle,

45
00:02:32,573 --> 00:02:34,675
même si elle n'a pas 
les mêmes paramètres,

46
00:02:34,675 --> 00:02:37,820
alors toutes les autres 
seront alors masquées.

47
00:02:37,820 --> 00:02:42,065
L'une seulement sera définie mais 
elle masquera simplement les autres.

48
00:02:42,065 --> 00:02:49,064
la règle de masquage qui s'applique aussi 
pour les méthodes substituées redéfinies.

49
00:02:49,440 --> 00:02:52,860
Repassons en détail 
sur un exemple concret :

50
00:02:52,860 --> 00:02:56,815
imaginons donc que nous ayons 
trois classes A, B et C

51
00:02:56,815 --> 00:03:01,864
Telle que B hérite de A
et C hérite aussi de A.

52
00:03:01,864 --> 00:03:06,769
Ces trois classes vont donc avoir 
une méthode <i>m1</i> sur laquelle

53
00:03:06,927 --> 00:03:10,819
nous allons faire de la surcharge, 
de la substitution et du masquage.

54
00:03:10,819 --> 00:03:13,127
Pour rendre l'exemple 
un petit peu plus concret,

55
00:03:13,127 --> 00:03:16,486
dans le main nous avons 
une instance B de la classe B

56
00:03:16,486 --> 00:03:18,416
et une instance C de la classe C.

57
00:03:18,416 --> 00:03:22,585
Nous allons regarder les différents cas 
d'appels de ces méthodes m1.

58
00:03:23,062 --> 00:03:28,573
Dans la classe A, nous avons une 
première méthode m1 qui prend un entier.

59
00:03:28,573 --> 00:03:31,604
Chacune de ces méthodes 
va se contenter d'afficher

60
00:03:31,604 --> 00:03:34,762
un message indiquant essentiellement 
la méthode qui est appelée.

61
00:03:34,762 --> 00:03:39,842
De plus, dans A nous avons aussi une autre
méthode m1 qui diffère de la première

62
00:03:39,842 --> 00:03:41,588
par sa liste de paramètres.

63
00:03:41,588 --> 00:03:45,763
Ici elle prend une chaîne de caractères 
au lieu de prendre un entier.

64
00:03:45,763 --> 00:03:50,939
Ces deux méthodes m1 sont dans la 
même portée, la portée de la classe A.

65
00:03:50,939 --> 00:03:54,869
Elles diffèrent par leurs listes de 
paramètres alors qu'elles ont le même nom.

66
00:03:54,869 --> 00:03:59,042
C'est donc bien un cas classique 
de surcharge dont-il s'agit ici.

67
00:03:59,042 --> 00:04:05,059
Dans la classe B, nous avons ici 
substitution de l'une des deux méthodes.

68
00:04:05,059 --> 00:04:09,684
Nous avons ici substitution 
de la méthode qui a comme argument

69
00:04:09,684 --> 00:04:11,450
la chaîne de caractères.

70
00:04:11,450 --> 00:04:15,096
Cette méthode m1 redéfinie ici 
dans la sous-classe B de la classe A

71
00:04:15,096 --> 00:04:19,728
masque donc la méthode m1 de A dans B.

72
00:04:19,728 --> 00:04:24,780
Comme c'est la seule des deux 
qui a été substituée dans B,

73
00:04:24,780 --> 00:04:28,854
d'après les règles de résolution 
de portée et de masquage,

74
00:04:28,854 --> 00:04:33,458
celle-ci masque aussi l'autre méthode 
puisque dans la classe B

75
00:04:33,458 --> 00:04:37,678
nous n'aurons plus 
qu'une seule méthode m1 accessible.

76
00:04:37,678 --> 00:04:41,304
La classe B aura bien effectivement 
3 méthodes m1.

77
00:04:41,304 --> 00:04:47,186
Sa propre méthode m1 et les deux méthodes
m1 héritées de la super-classe A

78
00:04:47,186 --> 00:04:49,838
mais par les règles de résolution de portée

79
00:04:49,838 --> 00:04:52,763
lorsqu'on est dans B, 
on résout à la portée la plus proche,

80
00:04:52,763 --> 00:04:57,030
la seule qui est donc directement 
accessible c'est celle directement

81
00:04:57,030 --> 00:05:02,179
définie dans B
qui masque les deux méthodes dans A.

82
00:05:02,179 --> 00:05:03,875
Voyons ceci sur le main.

83
00:05:03,875 --> 00:05:09,045
Nous avons ici notre instance B
On ne peut pas faire un appel comme ceci.

84
00:05:09,045 --> 00:05:14,212
C'est pour ça que nous l'avons commenté.
de la méthode m1 qui passe un entier

85
00:05:14,212 --> 00:05:18,559
puisque la méthode m1 
qui reçoit un entier hérité de A

86
00:05:18,559 --> 00:05:23,494
est masquée par la méthode dans B 
qui prend une chaîne de caractères.

87
00:05:23,494 --> 00:05:26,648
On peut bien effectivement appeler 
la méthode m1

88
00:05:26,648 --> 00:05:30,145
qui prend une chaine de caractère.
Cela ne pose aucun souci.

89
00:05:30,145 --> 00:05:33,513
Mais on ne peut pas appeler 
la méthode m1 qui prend un entier.

90
00:05:33,783 --> 00:05:38,471
On a un message qui nous indique 
que cette méthode n'est pas appelable.

91
00:05:38,471 --> 00:05:42,007
Pourtant elle existe bien, 
si on veut l'appeler, il faudra utiliser

92
00:05:42,007 --> 00:05:43,782
l'opérateur de résolution de portée

93
00:05:43,782 --> 00:05:48,117
en disant "la méthode m1 de portée 
la classe A qui appartient

94
00:05:48,117 --> 00:05:52,062
à l'instance B de la sous-classe B,

95
00:05:52,062 --> 00:05:58,237
laquelle hérite effectivement cette 
méthode de la classe A puisque B est un A.

96
00:05:58,237 --> 00:06:00,719
Cette méthode est donc effectivement ici
et peut être appelée

97
00:06:00,719 --> 00:06:05,745
mais il faut la démasquer 
avec l'opérateur de résolution de portée.

98
00:06:07,405 --> 00:06:12,489
Pour la classe C nous avons ici 
introduction d'une troisième méthode

99
00:06:12,489 --> 00:06:16,125
d'une nouvelle méthode, puisqu'on a 
un troisième type de paramètre

100
00:06:16,125 --> 00:06:22,706
avec un double ceci va redéfinir 
une méthode m1, une troisième,

101
00:06:22,706 --> 00:06:26,407
qui va, de nouveau, avec les mêmes règles 
de résolution de portée,

102
00:06:26,407 --> 00:06:29,740
masquer les deux autres héritées de A.

103
00:06:29,875 --> 00:06:35,658
Pour l'instance C de la classe C, 
on ne peut pas appeler

104
00:06:35,658 --> 00:06:39,002
ni la méthode 
avec les chaînes de caractères

105
00:06:39,002 --> 00:06:41,586
ni la méthode avec les entiers.

106
00:06:41,586 --> 00:06:47,259
Attention ici un piège. 
Cet appel ici c.m1(2) n'appelle pas

107
00:06:47,259 --> 00:06:50,423
la méthode avec les entiers 
puisqu'elle est masquée.

108
00:06:50,423 --> 00:06:54,834
Si vous faites exécuter ce code, 
ce que vous allez avoir comme message

109
00:06:54,834 --> 00:07:03,977
à l'appel c'est : C::m1(double) 
puisqu'en effet c'est la seule méthode

110
00:07:03,977 --> 00:07:10,322
qui est appelable directement 
sans démasquage dans la portée C.

111
00:07:10,322 --> 00:07:14,410
et que un entier peut être 
converti en un double.

112
00:07:14,410 --> 00:07:16,810
Donc ici il y a une conversion d'un entier 
en un double pour appeler

113
00:07:16,810 --> 00:07:21,387
la seule méthode qui est dans C.

114
00:07:21,387 --> 00:07:25,274
Bien sûr comme précédemment, 
nous pouvons démasquer

115
00:07:25,274 --> 00:07:28,949
les méthodes avec chaînes de caractères
et avec un entier.

116
00:07:28,949 --> 00:07:36,636
en utilisant l'opérateur de résolution de 
portée c.A::m1 avec une chaîne de caractère

117
00:07:36,636 --> 00:07:41,869
appellera bien sûr la méthode de A 
qui a une chaîne de caractère.

118
00:07:41,869 --> 00:07:47,579
Cet appel, ici, avec un entier cette 
fois-ci démasquage de la méthode m1

119
00:07:47,579 --> 00:07:51,514
de la superclasse A 
héritée par la sous-classe C

120
00:07:51,514 --> 00:07:55,788
fera un appel effectivement 
à cette méthode, ici .

121
00:07:56,326 --> 00:07:58,999
Voila donc pour les aspects 
surcharge et masquage,

122
00:07:59,333 --> 00:08:01,157
Voyons maintenant l'aspect substitution.

123
00:08:01,157 --> 00:08:06,416
En fait toutes ces méthodes ont 
de fait été déclarées comme virtuelles.

124
00:08:06,416 --> 00:08:09,580
Il suffit simplement d'avoir déclaré, ici, 
les méthodes comme virtuelles

125
00:08:09,580 --> 00:08:14,740
pour que automatiquement elles soient 
virtuelles dans les sous-classes.

126
00:08:14,740 --> 00:08:19,572
Ici, comme on a exactement la même méthode
ce <i>virtual</i> est transitif.

127
00:08:19,572 --> 00:08:21,900
Il n'est pas nécessaire de le répéter.

128
00:08:21,900 --> 00:08:23,551
Par contre ici c'est une nouvelle méthode.

129
00:08:23,551 --> 00:08:26,882
Donc on a le choix de la mettre 
comme virtuelle ou non.

130
00:08:26,882 --> 00:08:30,288
Toutes ces méthodes ayant été 
déclarées comme virtuelles

131
00:08:30,288 --> 00:08:33,351
il s'agit bien d'une substitution.

132
00:08:33,351 --> 00:08:37,586
Les règles de substitution suivent les 
mêmes règles que les règles de masquage.

133
00:08:37,586 --> 00:08:42,103
Simplement on a une résolution dynamique 
des liens qui va se passer,

134
00:08:42,361 --> 00:08:45,297
si tant est que l'on ait des pointeurs 
ou des références,

135
00:08:45,297 --> 00:08:47,518
ce qui n'était pas le cas ici.

136
00:08:47,518 --> 00:08:51,566
Ici nous avions des instances 
directes donc pour voir

137
00:08:51,566 --> 00:08:54,510
l'effet de la substitution et l'effet 
de la résolution dynamique des liens

138
00:08:54,510 --> 00:08:57,107
il faut donc passer par des pointeurs.

139
00:08:57,107 --> 00:09:00,012
Ce que nous faisons donc 
ici sur ce nouvel exemple.

140
00:09:00,012 --> 00:09:03,668
où nous avons toujours 
les instances B et C des classes,

141
00:09:03,668 --> 00:09:05,634
respectivement B et C,

142
00:09:05,634 --> 00:09:11,397
mais où nous allons donc passer sur un 
pointeur sur un A que l'on appelle donc pa.

143
00:09:11,830 --> 00:09:14,008
Dans une première partie, 
pa va pointer sur b

144
00:09:14,008 --> 00:09:17,300
et dans une seconde partie, 
pa pointera sur c.

145
00:09:17,300 --> 00:09:19,050
Ici on fait pointer pa sur b.

146
00:09:19,050 --> 00:09:22,195
En mémoire 
nous avons la situation suivante.

147
00:09:27,101 --> 00:09:31,074
pa pointe ici sur b et l'on appelle 
donc la méthode m1

148
00:09:31,074 --> 00:09:34,251
au travers de ce pointeur pa.

149
00:09:34,251 --> 00:09:37,382
Or il se trouve que m1 est 
une méthode virtuelle

150
00:09:37,382 --> 00:09:40,584
qui est substituée dans la classe B.

151
00:09:40,584 --> 00:09:45,304
Ici c'est bien le polymorphisme 
qui entre en jeu.

152
00:09:45,304 --> 00:09:49,577
C'est donc bien la méthode m1 
de la classe B qui est appelée

153
00:09:49,577 --> 00:09:54,342
et qui affichera donc 
le message B::m1(string)

154
00:09:54,342 --> 00:09:59,169
Par contre même si pa pointe sur un B, 
il n'en reste pas moins un pointeur sur A.

155
00:09:59,581 --> 00:10:03,622
Donc en tant que tel, je vous rappelle 
qu'en C++ c'est le type

156
00:10:03,622 --> 00:10:05,826
qui prime lorsqu'il n'y a pas 
de polymorphisme

157
00:10:05,826 --> 00:10:07,818
on a une résolution statique des liens.

158
00:10:07,818 --> 00:10:09,908
On résout en fonction du type.

159
00:10:09,908 --> 00:10:14,675
Donc ici pa est un pointeur sur un A et 
donc en tant que tel

160
00:10:14,675 --> 00:10:17,176
accède aux méthodes de A.

161
00:10:17,176 --> 00:10:20,181
Tous ces appels à ses méthodes 
sont de la classe A.

162
00:10:20,475 --> 00:10:22,868
On dit que ce sont des appels 
dans la portée de A et donc

163
00:10:22,868 --> 00:10:25,635
on a tout à fait le droit 
même si pa pointe sur un B,

164
00:10:25,635 --> 00:10:29,034
d'appeler la méthode m1 avec un entier.

165
00:10:29,290 --> 00:10:32,266
On est bien dans la portée de A.

166
00:10:32,266 --> 00:10:40,523
Donc ici, ce sera bien la méthode de A 
qui va être appelée A::m1(int)

167
00:10:40,523 --> 00:10:45,775
De même si pa pointe sur C, 
alors bien que l'on pointe sur C

168
00:10:45,775 --> 00:10:47,521
on est toujours dans la portée de A

169
00:10:47,521 --> 00:10:50,627
puisqu'on travaille 
avec un pointeur sur un A.

170
00:10:50,627 --> 00:10:52,925
Ici, on va appeler la méthode.

171
00:10:52,925 --> 00:10:57,532
Attention, même si on passe un double, 
on reste dans la portée de A

172
00:10:57,532 --> 00:11:02,247
et on va donc appeler ici 
la méthode qui passe un entier.

173
00:11:02,247 --> 00:11:06,773
Ce double va être converti en entier, 
pour appeler, dans la portée de A,

174
00:11:06,773 --> 00:11:10,579
la seule méthode 
que l'on peut appeler avec un double.

175
00:11:10,579 --> 00:11:13,806
C'est celle-ci où l'on convertit 
le double en entier.

176
00:11:13,806 --> 00:11:16,358
Ce qui est tout à fait possible en C++ 
et c'est bien

177
00:11:16,364 --> 00:11:18,664
cette méthode qui va être appelée.

178
00:11:18,664 --> 00:11:23,261
la méthode qui est dans C 
n'est pas accessible dans la portée de A

179
00:11:23,261 --> 00:11:28,140
Si un C est un A, 
un A lui n'est pas du tout un C.

180
00:11:28,140 --> 00:11:32,249
Ici, puisqu'on est dans la portée de A 
c'est bien dans cette portée-là

181
00:11:32,249 --> 00:11:34,007
qu'on va résoudre le nom m1.

182
00:11:34,007 --> 00:11:37,235
C'est donc bien m1 avec un int 
qui va être appelée et

183
00:11:37,235 --> 00:11:42,978
donc ici on aura bien 
un affichage de A::m1 pour un int.

184
00:11:42,978 --> 00:11:45,655
Pour les mêmes raisons 
on ne peut absolument pas essayer

185
00:11:45,655 --> 00:11:49,770
de démasquer la méthode avec un double 
en essayant d'utiliser

186
00:11:49,770 --> 00:11:52,885
l'opérateur de résolution de portée ici sur C.

187
00:11:52,885 --> 00:11:57,198
Ceci est totalement illicite 
puisqu'on passe par un pointeur sur un A

188
00:11:57,198 --> 00:11:59,787
et que un A n'est pas un C,

189
00:11:59,787 --> 00:12:02,976
C'est un C qui est un A.
Mais un A n'est pas un C.

190
00:12:02,976 --> 00:12:06,989
Dans la hiérarchie A 
est en haut de la hiérarchie.

191
00:12:06,989 --> 00:12:10,837
C'est C qui est un A 
mais absolument pas A qui est un C.

192
00:12:10,837 --> 00:12:13,941
Donc ceci ne compile pas. 
C'est interdit par le compilateur.

193
00:12:13,941 --> 00:12:18,056
Ce n'est pas A qui hérite de C, 
mais C qui hérite de A.

194
00:12:18,056 --> 00:12:20,889
Voilà ! Tout ceci est certainement 
très technique

195
00:12:20,889 --> 00:12:23,542
et dans un premier temps 
je pense un petit peu difficile.

196
00:12:23,542 --> 00:12:27,091
Vous reviendrez sur cette séquence 
plus tard lorsque vous aurez

197
00:12:27,091 --> 00:12:30,874
un petit peu plus pratiquer le 
polymorphisme et ses différents aspects :

198
00:12:30,874 --> 00:12:34,208
masquage, substitution 
et surtout surcharge

199
00:12:34,208 --> 00:12:36,903
qui elle, à mon avis, 
ne devrait plus poser de problème.

200
00:12:36,903 --> 00:12:40,498
Justement, c'est parce que ces aspects 
sont un petit peu difficiles

201
00:12:40,498 --> 00:12:43,836
que C++ 2011 a introduit 
deux nouveaux mots clé

202
00:12:43,836 --> 00:12:46,732
pour permettre au programmeur, 
s'il le souhaite,

203
00:12:46,732 --> 00:12:49,594
de plus clairement spécifier 
ses intentions.

204
00:12:49,594 --> 00:12:54,973
Ces mots-clé sont respectivement <i>override</i>
qui permet d'indiquer que l'on pense

205
00:12:54,973 --> 00:12:58,425
substituer une méthode virtuelle 
héritée d'une super-classe ;

206
00:12:58,425 --> 00:13:03,371
et puis le mot-clé <i>final</i> qui empêche 
toute substitution future

207
00:13:03,371 --> 00:13:07,766
de la méthode en question dans 
les futurs possibles sous-classes.

208
00:13:07,766 --> 00:13:10,196
Voyons tout ceci en détail sur un exemple.

209
00:13:11,776 --> 00:13:16,292
Supposons donc que l'on ait une classe A
qui contient ici 4 méthodes,

210
00:13:16,293 --> 00:13:19,171
une méthode f1 
définie simplement comme virtuelle,

211
00:13:19,175 --> 00:13:24,590
une méthode f2 qui est aussi virtuelle 
et qui a le qualificatif const,

212
00:13:24,590 --> 00:13:29,387
qui ne modifie pas l'instance,
une métode f3, qui elle n'est pas virtuelle,

213
00:13:29,747 --> 00:13:35,611
et la méthode f4 sur laquelle 
on rajoute le qualificatif final.

214
00:13:36,007 --> 00:13:41,369
Puis nous avons donc une classe B 
qui hérite de A et qui bien sûr va

215
00:13:41,369 --> 00:13:46,295
redéfinir, substituer, masquer
ces différentes méthodes.

216
00:13:46,295 --> 00:13:51,654
Nous avons donc une substitution 
de la méthode f1 dans la classe B

217
00:13:51,654 --> 00:13:54,577
c'est bien le même prototype exactement.

218
00:13:54,577 --> 00:13:59,092
Donc le mot cle <i>override</i>
est correctement utilisé.

219
00:13:59,092 --> 00:14:02,792
En effet, f1 est bien une substitution 
de cette méthode.

220
00:14:02,792 --> 00:14:04,619
Là, nous avons donc une autre méthode.

221
00:14:04,619 --> 00:14:07,428
Je vous laisse deviner de quoi il s'agit.

222
00:14:09,548 --> 00:14:12,184
Ici, nous voyons donc que 
nous avons une faute de frappe.

223
00:14:12,363 --> 00:14:17,451
Le développeur de la classe B 
a écrit fl minuscule au lieu d'un f1.

224
00:14:17,451 --> 00:14:20,697
C'est, je peux vous le garantir, une faute 
assez difficile à trouver à la relecture.

225
00:14:20,697 --> 00:14:24,560
Une telle petite différence entre un l 
minuscule et un 1

226
00:14:24,560 --> 00:14:26,528
échappe souvent à la relecture.

227
00:14:26,528 --> 00:14:32,121
Donc ici, si on avait oublié le mot-clé
<i>override</i> ce que pensait peut-être faire ,

228
00:14:32,121 --> 00:14:35,119
évidemment sans avoir cette ligne là,

229
00:14:35,119 --> 00:14:41,233
la personne qui aurait écrit ça dans la classe B, 
ce serait de substituer la méthode f1.

230
00:14:41,233 --> 00:14:45,208
Mais au lieu de substituer la méthode f1, 
à cause de cette faute de frappe,

231
00:14:45,208 --> 00:14:50,399
il aurait en fait réintroduit une nouvelle
méthode virtuelle au niveau de B.

232
00:14:50,399 --> 00:14:53,004
Ce que le mot-clé override 
permet de faire,

233
00:14:53,004 --> 00:14:56,443
c'est que le compilateur 
va justement vérifier si ceci,

234
00:14:56,453 --> 00:15:00,948
comme le spécifie ici le programmeur 
de la classe B est bien

235
00:15:00,978 --> 00:15:04,487
une substitution d'une méthode de A.

236
00:15:04,487 --> 00:15:08,214
Dans ce cas, comme il n'existe pas 
de méthode fl dans A

237
00:15:08,214 --> 00:15:11,457
le compilateur va indiquer 
que c'est une erreur.

238
00:15:11,457 --> 00:15:17,065
Cette méthode fl de override ne substitue 
absolument aucune méthode de A.

239
00:15:17,065 --> 00:15:21,815
Donc c'est bien une protection 
du programmeur de la sous-classe B

240
00:15:21,815 --> 00:15:24,693
contre des éventuelles erreurs.

241
00:15:24,693 --> 00:15:28,008
Un autre type d'erreur, par exemple, 
c'est sur la méthode f2.

242
00:15:28,008 --> 00:15:34,020
Le programmeur de la classe B prétend ici 
redéfinir la méthode f2 avec un override.

243
00:15:34,020 --> 00:15:37,153
Pourtant on a ici 
une erreur de compilation.

244
00:15:37,363 --> 00:15:38,695
Est-ce que vous voyez pourquoi ?

245
00:15:40,325 --> 00:15:44,134
L'erreur ici est que la méthode f2 
n'est pas const

246
00:15:44,299 --> 00:15:48,587
alors qu'elle était définie 
comme <i>const</i> dans la classe A.

247
00:15:49,024 --> 00:15:53,231
Donc la méthode f2 ici est 
une autre méthode f2.

248
00:15:53,472 --> 00:15:56,494
Attention ! 
const fait vraiment partie de la spécificité

249
00:15:56,494 --> 00:15:59,320
de ce qu'on appelle 
l'en-tête de la méthode,

250
00:15:59,320 --> 00:16:02,966
le prototype complet de la méthode 
contient const et donc ici

251
00:16:02,966 --> 00:16:04,381
c'est une autre méthode f2.

252
00:16:04,381 --> 00:16:05,928
Donc le compilateur n'est pas d'accord.

253
00:16:05,928 --> 00:16:08,592
Ce n'est pas un override 
de la méthode f2

254
00:16:08,592 --> 00:16:11,955
mais c'est en effet 
une nouvelle méthode f2.

255
00:16:11,955 --> 00:16:18,667
Voilà donc un autre exemple de protection
contre les bêtises des développeurs.

256
00:16:18,667 --> 00:16:20,217
Oublie du mot const,
Faute de frappe.

257
00:16:20,217 --> 00:16:25,766
En ce qui concerne donc la méthode f3, 
peut-être que c'est une erreur

258
00:16:25,766 --> 00:16:27,244
de conception au niveau de A.

259
00:16:27,244 --> 00:16:31,279
Peut-être que f3 aurait dû être 
virtuelle et on pensait que

260
00:16:31,279 --> 00:16:35,714
c'est une substitution 
de cette méthode f3.

261
00:16:35,714 --> 00:16:40,175
Je vous rappelle que la répétition 
du mot-clé virtual n'est pas nécessaire.

262
00:16:40,175 --> 00:16:43,900
On pourrait tout à fait, même pour une 
méthode virtuelle, écrire ceci.

263
00:16:43,900 --> 00:16:49,326
Le concepteur de la sous-classe B 
pense redéfinir une méthode virtuelle,

264
00:16:49,468 --> 00:16:50,960
donc il écrit override.

265
00:16:50,960 --> 00:16:55,082
Là, à nouveau, il a eu un message 
du compilateur qui lui dit :

266
00:16:55,082 --> 00:16:57,438
"Non, non, attention tu ne fais pas 
ce que tu crois faire".

267
00:16:57,438 --> 00:17:01,566
Cette méthode f3 ne peut pas être 
substituée parce que

268
00:17:01,566 --> 00:17:04,256
ce n'est pas une méthode virtuelle.

269
00:17:04,256 --> 00:17:08,138
On a ici un pur masquage 
et sans substitution.

270
00:17:08,138 --> 00:17:11,526
Voilà un troisième cas qui permet 
de prémunir le programmeur

271
00:17:11,526 --> 00:17:14,046
de la sous-classe B 
contre des erreurs possibles.

272
00:17:14,046 --> 00:17:18,446
Ici, une erreur qui viendrait soit de son 
interprétation de ce qu'est la classe A

273
00:17:18,446 --> 00:17:23,763
soit carrément du concepteur de la classe A
qui a peut-être oublié le mot-clé virtual.

274
00:17:24,463 --> 00:17:27,903
Enfin, dernière situation 
avec le mot-clé final.

275
00:17:27,903 --> 00:17:32,296
Ici le concepteur de la classe A
empêche toute redéfinition future,

276
00:17:32,296 --> 00:17:35,252
toute substitution de cette méthode f4.

277
00:17:35,252 --> 00:17:39,967
Donc le concepteur de la classe B 
sous-classe de A n'a pas le droit

278
00:17:39,967 --> 00:17:43,905
de redéfinir la méthode f4.

279
00:17:43,905 --> 00:17:48,685
Elle est <i>final</i> ici, ça veut dire que 
l'on n'a pas le droit de redéfinir

280
00:17:48,685 --> 00:17:50,526
dans les sous-classes cette méthode f4.

281
00:17:50,526 --> 00:17:54,441
Donc le compilateur refuserait 
de compiler cette ligne.

282
00:17:54,441 --> 00:17:56,149
Voilà donc pour cet exemple.

283
00:17:56,149 --> 00:18:00,783
Au niveau de votre pratique ce que nous 
vous conseillons c'est d'utiliser override.

284
00:18:00,783 --> 00:18:02,684
Même si c'est un petit peu 
fastidieux de l'écrire.

285
00:18:02,684 --> 00:18:05,973
Utilisez-le pour vous prémunir 
dans un premier temps,

286
00:18:05,973 --> 00:18:09,270
du genre d'erreur que l'on a pu vous 
montrer dans l'exemple précédent.

287
00:18:09,270 --> 00:18:12,928
Au niveau de final, je pense que ce n'est 
pas nécessaire au niveau de ce cours,

288
00:18:12,928 --> 00:18:16,285
Vous pouvez oublier. A mon avis, 
ça ne sert absolument à rien.

289
00:18:16,285 --> 00:18:20,326
Pourquoi diable voudrait-on empêcher 
quelqu'un de redéfinir ces méthodes ?

290
00:18:20,326 --> 00:18:23,902
Enfin pour être tout à fait complet, 
je voudrais vous signaler que

291
00:18:23,902 --> 00:18:29,474
final existe aussi comme mot-clé pour 
empêcher des sous-dérivations de classes.

292
00:18:29,474 --> 00:18:33,027
C'est à dire, empêcher une classe 
d'avoir des sous-classes.

293
00:18:33,027 --> 00:18:36,122
Par exemple, on pourrait ici définir 
une classe stérile,

294
00:18:36,122 --> 00:18:38,758
qui ne peut pas avoir de sous-classe.

295
00:18:38,758 --> 00:18:41,703
En rajoutant le mot-clé final ici.

296
00:18:41,703 --> 00:18:45,638
Donc de cette classe stérile, 
on n'aurait pas le droit d'hériter.

297
00:18:45,638 --> 00:18:50,439
Ce mot-clé empêche, permet au compilateur
de donner une erreur

298
00:18:50,439 --> 00:18:55,167
chaque fois qu'une sous-classe voudrait 
hériter de cette super classe.

299
00:18:55,167 --> 00:18:59,291
Là, de-même, je ne pense pas qu'au niveau
de ce cours, ce soit très intéressant.

300
00:18:59,291 --> 00:19:02,243
Au niveau de ce cours, 
je vous conseille d'oublier final.

301
00:19:02,243 --> 00:19:05,414
Mais par contre faites l'effort d'écrire 
override à chaque fois

302
00:19:05,414 --> 00:19:11,368
que vous pensez redéfinir une méthode 
virtuelle héritée d'une superclasse.
