1
00:00:04,105 --> 00:00:06,608
Dans cette séquence vidéo, 
nous allons revenir en détail sur

2
00:00:06,608 --> 00:00:09,743
une des applications pratiques importantes
du polymorphisme que l'on appelle

3
00:00:09,743 --> 00:00:12,035
les collections hétérogènes.

4
00:00:12,035 --> 00:00:16,484
Jusqu'ici nous avons vu que l'héritage
et les méthodes virtuelles permettaient

5
00:00:16,484 --> 00:00:20,653
de définir des traitements génériques sur
les instances d'une hiérarchie de classe.

6
00:00:20,653 --> 00:00:23,263
Ce que l'on appelle le polymorphisme.

7
00:00:23,263 --> 00:00:26,783
Puis l'on a vu que si l'on voulait
appliquer des fonctions ou des méthodes

8
00:00:26,783 --> 00:00:28,694
que l'on souhaitait
être polymorphiques,

9
00:00:28,694 --> 00:00:33,003
donc appliquer des traitements que 
l'on veut polymorphiques à des objets,

10
00:00:33,003 --> 00:00:36,970
il fallait que ces objets 
soient passés par référence.

11
00:00:36,970 --> 00:00:40,810
Qu'en est-il si l'on a un ensemble 
d'objets, une collection d'objets

12
00:00:40,810 --> 00:00:44,394
qui appartiennent à une hiérarchie 
et que l'on souhaite pouvoir manipuler

13
00:00:44,394 --> 00:00:46,243
de façon polymorphique ?

14
00:00:46,243 --> 00:00:48,463
C'est ce que l'on appelle
une collection hétérogène.

15
00:00:48,463 --> 00:00:52,687
En ce sens que chaque objet stocké dans
la collection, stocké dans l'ensemble

16
00:00:52,687 --> 00:00:55,492
peut avoir un comportement 
spécifique différent.

17
00:00:56,882 --> 00:01:01,051
Reprenons pour illustrer ceci l'exemple
de notre jeu avec des personnages.

18
00:01:01,051 --> 00:01:05,007
Nous avions donc une classe « Personnage »
avec un certain nombre d'attributs

19
00:01:05,007 --> 00:01:08,468
et de méthodes spécifiques 
et puis différentes sous-classes :

20
00:01:08,468 --> 00:01:12,138
« Voleurs », « Magiciens », « Guerrier », etc.
qui étaient des « Personnages ».

21
00:01:12,138 --> 00:01:17,248
On voulait donc les mettre dans un jeu
qui contiendrait plusieurs personnages.

22
00:01:17,248 --> 00:01:20,527
Ce serait donc une collection de 
« Personnages », mais on souhaite que

23
00:01:20,527 --> 00:01:23,784
chacun des personnages se comporte
pour ce qu'il est en réalité :

24
00:01:23,784 --> 00:01:26,615
un « Guerrier » pour un « Guerrier », 
un « Voleur » pour un « Voleur », etc.

25
00:01:26,615 --> 00:01:29,319
Donc cette collection va être hétérogène.

26
00:01:29,319 --> 00:01:31,759
Comment donc définir
le « Jeu » dans ce cas là ?

27
00:01:31,759 --> 00:01:34,641
On pourrait bien sûr
définir le « Jeu » ainsi :

28
00:01:34,641 --> 00:01:38,839
avoir pour chacune des sous-classes 
une collection spécifique, donc avoir

29
00:01:38,839 --> 00:01:42,173
une collection de « Guerriers »
pour stocker tous les guerriers,

30
00:01:42,173 --> 00:01:45,162
une collection de « Magiciens »
pour stocker tous les magiciens, etc.

31
00:01:46,572 --> 00:01:50,655
On pourrait ainsi afficher tous 
les guerriers au travers d'une méthode

32
00:01:50,655 --> 00:01:52,613
qui permet d'afficher les guerriers,

33
00:01:52,613 --> 00:01:56,359
afficher tous les magiciens au travers 
d'une méthode spécifique, etc.,

34
00:01:56,359 --> 00:01:58,905
ajouter éventuellement
un « Guerrier » au « Jeu »,

35
00:01:58,905 --> 00:02:02,741
ajouter un « Magicien »,
ajouter un « Voleur », etc.

36
00:02:02,741 --> 00:02:05,447
C'est une solution possible
et dans certains cas,

37
00:02:05,447 --> 00:02:09,429
ce sera nécessaire de différencier
les différentes sous-classes

38
00:02:09,429 --> 00:02:13,033
et d'avoir des collections spécifiques
pour chacune des sous-classes.

39
00:02:13,033 --> 00:02:15,598
Celles-ci ne sont pas 
des collections hétérogènes.

40
00:02:15,598 --> 00:02:19,901
Ce sont autant de collections 
spécifiques pour chacune des sous-classes.

41
00:02:19,901 --> 00:02:24,598
C'est une solution tout à fait possible, 
mais l'on pourrait aussi imaginer

42
00:02:24,598 --> 00:02:26,013
une autre solution.

43
00:02:26,013 --> 00:02:28,263
Cela dépend du contexte,
des besoins du programme,

44
00:02:28,263 --> 00:02:32,394
où l'on imaginerait gérer
de façon globale tous les personnages,

45
00:02:32,394 --> 00:02:36,792
les gérer de façon générique 
dans une collection de personnages,

46
00:02:36,792 --> 00:02:41,005
lesquels personnages auraient 
chacun leurs spécificités propres

47
00:02:41,005 --> 00:02:43,104
donc de façon hétérogène.

48
00:02:43,104 --> 00:02:46,655
A ce moment là, on définirait 
la classe « Jeu » ainsi.

49
00:02:46,655 --> 00:02:51,712
On aurait une collection de « Personnage », 
sous la forme d'un tableau dynamique.

50
00:02:51,712 --> 00:02:53,337
qui regrouperait tous nos personnages.

51
00:02:53,337 --> 00:02:55,474
On aurait plus qu'une
seule méthode « afficher »

52
00:02:55,474 --> 00:02:57,909
qui permettrait d'afficher 
tous les personnages.

53
00:02:57,909 --> 00:03:02,098
Et on aurait une méthode générique ici, 
« ajouter_personnage » qui permettrait

54
00:03:02,098 --> 00:03:04,879
d'ajouter un personnage 
quelconque dans la collection.

55
00:03:04,879 --> 00:03:08,206
Dans ce contexte, on voudrait bien sûr,
que chacun des personnages ait

56
00:03:08,206 --> 00:03:12,291
son comportement propre et donc
que si « personnage[i] » est un « Guerrier »

57
00:03:12,291 --> 00:03:18,736
alors la méthode « personnage[i].afficher »
soit bien celle de la sous-classe « Guerrier »

58
00:03:18,736 --> 00:03:19,905
qui s'applique.

59
00:03:19,905 --> 00:03:22,965
On voudrait avoir ici 
un comportement polymorphique

60
00:03:22,965 --> 00:03:25,297
des personnages stockés dans le jeu.

61
00:03:25,297 --> 00:03:29,571
Malheureusement, le code présenté 
jusqu'ici ne permet pas d'avoir

62
00:03:29,571 --> 00:03:32,114
de comportement polymorphique, 
puisqu'en effet ici nous avons

63
00:03:32,114 --> 00:03:37,176
un tableau dynamique de « Personnages ».
Donc les personnages sont accédés

64
00:03:37,176 --> 00:03:42,806
directement sans passer par une référence, 
sans passer par un pointeur.

65
00:03:42,806 --> 00:03:45,863
Or, je vous rappelle que si l'on veut 
un comportement polymorphique

66
00:03:45,863 --> 00:03:49,751
il faut d'un côté des méthodes virtuelles
et de l'autre côté passer par

67
00:03:49,751 --> 00:03:52,661
soit des pointeurs, 
soit des références.

68
00:03:52,661 --> 00:03:54,370
Lesquelles utiliser ici ?

69
00:03:54,370 --> 00:03:57,778
Je vous rappelle un conseil général
concernant les pointeurs et les références.

70
00:03:57,778 --> 00:04:00,208
C'est d'utiliser les références
à chaque fois qu'on le peut,

71
00:04:00,208 --> 00:04:02,730
et d'utiliser des pointeurs
quand on le doit.

72
00:04:02,730 --> 00:04:06,226
Ici, l'idée ce serait d'utiliser 
une collection de références.

73
00:04:06,226 --> 00:04:10,526
Malheureusement, on ne peut pas mettre 
de références dans un tableau dynamique

74
00:04:10,526 --> 00:04:13,954
ni dans les collections standards de C++.

75
00:04:13,954 --> 00:04:17,630
pour des raisons techniques qui nous 
emmèneraient trop loin de détailler ici.

76
00:04:17,630 --> 00:04:24,289
On est obligé pour ces raisons techniques
de mettre cette fois-ci des pointeurs.

77
00:04:24,289 --> 00:04:28,796
Donc on va changer l'implémentation de 
notre classe « Jeu » avec cette fois-ci

78
00:04:28,796 --> 00:04:32,582
un tableau dynamique de pointeurs
sur des « Personnages ».

79
00:04:32,582 --> 00:04:36,511
Pour avoir un comportement polymorphique
de nos personnages, on va mettre ici

80
00:04:36,511 --> 00:04:39,175
un tableau de pointeurs
sur des « Personnages ».

81
00:04:39,175 --> 00:04:41,834
La question que l'on peut se poser, 
c'est est-ce qu'on veut mettre

82
00:04:41,834 --> 00:04:47,232
des pointeurs « à la C » ou des pointeurs
intelligents, des pointeurs C++2011 ?

83
00:04:47,232 --> 00:04:50,524
Donc ici, une autre
alternative version 2011.

84
00:04:50,524 --> 00:04:53,128
Nous allons vous conseiller
plutôt cette seconde façon.

85
00:04:53,128 --> 00:04:57,195
Nous détaillerons dans une séquence
vidéo complémentaire optionnelle

86
00:04:57,195 --> 00:05:01,283
qui suivra cette séquence vidéo, 
les raisons de ce choix.

87
00:05:01,283 --> 00:05:06,675
Si vous préférez utiliser suivant
nos conseils des pointeurs intelligents

88
00:05:06,675 --> 00:05:12,755
à la C++2011, on ferait un tableau
dynamique de « unique_pointer » de « Personnage ».

89
00:05:12,755 --> 00:05:16,419
Pour utiliser les « unique pointers », 
je vous rappelle qu'il faut inclure

90
00:05:16,419 --> 00:05:18,685
la bibliothèque « memory ».

91
00:05:18,685 --> 00:05:21,988
Pour ceux qui ont besoin de rappels sur 
les pointeurs, nous avons remis

92
00:05:21,988 --> 00:05:25,095
sur ce cours-ci l'ensemble des cours 
que nous avions donnés

93
00:05:25,095 --> 00:05:29,520
dans notre MOOC précédent 
sur l'initiation à la programmation.

94
00:05:29,520 --> 00:05:32,513
Concernant les pointeurs,
je vous encourage

95
00:05:32,513 --> 00:05:35,256
à aller les revoir si nécessaire.

96
00:05:35,466 --> 00:05:39,310
Donc on pourrait ici
faire l'un ou l'autre.

97
00:05:39,310 --> 00:05:42,501
Dans tous les cas, à noter que 
ce sont des pointeurs

98
00:05:42,501 --> 00:05:44,936
qui vont être stockés
cette fois-ci dans la collection.

99
00:05:44,936 --> 00:05:49,700
Le tableau « personnage » ici est
un tableau de pointeurs, et non plus

100
00:05:49,700 --> 00:05:52,848
directement d'instances. 
Ceci va avoir des conséquences sur

101
00:05:52,848 --> 00:05:57,476
notre conception et sur la vie de 
notre jeu, puisque maintenant

102
00:05:57,476 --> 00:06:00,502
les instances sont
en fait en dehors du jeu.

103
00:06:00,502 --> 00:06:04,870
Dans le jeu, en réalité on n'a que
des pointeurs sur les instances.

104
00:06:04,870 --> 00:06:09,728
Comment continuer le développement
de notre classe « Jeu » et ajouter

105
00:06:09,728 --> 00:06:13,607
ces méthodes pour, par exemple,
l'affichage ou l'ajout d'un personnage ?

106
00:06:13,607 --> 00:06:18,130
Le plus simple est de regarder comment 
nous allons d'abord utiliser ce jeu.

107
00:06:18,130 --> 00:06:22,510
Donc, on déclarerait un jeu de l'instance
de cette classe Jeu, et on imagine

108
00:06:22,510 --> 00:06:25,121
qu'on ajouterait un personnage.

109
00:06:25,121 --> 00:06:29,789
Mais on doit ajouter un pointeur. 
Le plus simple c'est d'ajouter un pointeur

110
00:06:29,789 --> 00:06:35,161
alloué dynamiquement ici par un « new »
Donc par exemple ici, un nouveau « Guerrier »,

111
00:06:35,161 --> 00:06:39,432
« new Guerrier » qui va renvoyer 
un nouveau pointeur sur un « Guerrier ».

112
00:06:39,432 --> 00:06:42,451
Donc en mémoire, 
on aurait la chose suivante :

113
00:06:42,451 --> 00:06:46,975
un « Jeu » qui contient 
sa collection de pointeurs.

114
00:06:46,975 --> 00:06:48,942
Au départ, elle est certainement vide.

115
00:06:48,942 --> 00:06:54,323
Et puis, on aurait donc création 
d'un « Guerrier » en mémoire

116
00:06:54,323 --> 00:07:00,186
et le new nous rendrait un pointeur 
sur ce « Guerrier » que l'on stockerait

117
00:07:00,186 --> 00:07:02,078
donc dans notre collection.

118
00:07:02,640 --> 00:07:05,864
On aurait donc comme prototype
pour nos méthodes :

119
00:07:05,864 --> 00:07:09,996
ici une méthode « ajouter_personnage »
qui prendrait directement

120
00:07:09,996 --> 00:07:12,655
un pointeur sur un « Personnage ».

121
00:07:12,655 --> 00:07:16,970
C'est ce qu'elle reçoit, new renvoie 
un pointeur à la C sur un personnage.

122
00:07:16,970 --> 00:07:20,609
Et puis la méthode afficher
qui, elle, ne pose pas de souci,

123
00:07:20,609 --> 00:07:22,438
qui va afficher tous les personnages.

124
00:07:22,438 --> 00:07:27,949
Donc au niveau de son prototype, le 
prototype usuel de cette méthode afficher.

125
00:07:27,949 --> 00:07:30,778
Voyons maintenant comment 
définir ces méthodes.

126
00:07:30,778 --> 00:07:34,139
Commençons par la méthode 
qui ajoute un personnage.

127
00:07:34,139 --> 00:07:39,426
Son prototype, c'est bien de recevoir 
un pointeur à la C sur un personnage,

128
00:07:39,426 --> 00:07:41,808
pour faire l'appel qu'on a vu
juste précédemment.

129
00:07:41,808 --> 00:07:45,029
On commence, par mesure de précaution,
par vérifier qu'on a bien reçu,

130
00:07:45,029 --> 00:07:47,258
au travers du pointeur « nouveau », ici,

131
00:07:47,258 --> 00:07:49,747
effectivement un pointeur
sur un vrai personnage.

132
00:07:49,747 --> 00:07:51,716
Donc que ce pointeur n'est pas nul.

133
00:07:51,716 --> 00:07:55,161
Puis ensuite on ajoute 
à la collection de personnages.

134
00:07:55,161 --> 00:07:57,713
Je vous rappelle que,
la collection de personnages,

135
00:07:57,713 --> 00:08:01,190
on a décidé de l'implémenter
comme un tableau dynamique

136
00:08:01,190 --> 00:08:03,957
de unique_ptr sur des « Personnages ».

137
00:08:03,957 --> 00:08:06,415
Donc on ajoute simplement
par un « push_back »

138
00:08:06,415 --> 00:08:12,552
la transformation du pointeur à la C
« nouveau » reçu par l'appel de « new »

139
00:08:12,552 --> 00:08:15,581
en un unique_ptr.

140
00:08:15,581 --> 00:08:20,612
Puisque new renvoie un pointeur à la C
et que nous avons décidé ici de choisir

141
00:08:20,612 --> 00:08:25,307
d'implémenter nos pointeurs comme 
des pointeurs intelligents à la C++2011,

142
00:08:25,307 --> 00:08:29,455
on va transformer ici ce pointeur
à la C en un unique_ptr.

143
00:08:29,455 --> 00:08:32,945
Donc précisément en détail,
l'appel précédent,

144
00:08:32,945 --> 00:08:37,335
« jeu.ajouter_personnage (new Guerrier) »

145
00:08:37,335 --> 00:08:41,277
avec un appel au constructeur,
avec des paramètres

146
00:08:41,277 --> 00:08:45,166
pour le constructeur de « Guerrier » 
va faire la chose suivante :

147
00:08:45,166 --> 00:08:50,043
on va tout d'abord exécuter « new.guerrier »
qui va nous construire en mémoire

148
00:08:50,043 --> 00:08:51,712
un nouveau « Guerrier ».

149
00:08:51,712 --> 00:08:57,726
New va nous renvoyer un pointeur 
sur cette zone allouée.

150
00:08:57,726 --> 00:09:01,503
Ce pointeur va être passé
à la méthode ajouter_personnage

151
00:09:01,503 --> 00:09:03,120
et s'appelle « nouveau ».

152
00:09:03,120 --> 00:09:06,090
Ce pointeur n'est pas nul.

153
00:09:06,510 --> 00:09:08,340
On arrive donc ici

154
00:09:08,340 --> 00:09:10,441
dans la classe « Jeu »
en faisant un push_back

155
00:09:10,441 --> 00:09:14,032
en supposant que par exemple 
que le tableau dynamique était vide.

156
00:09:14,032 --> 00:09:19,660
On va faire donc ici un push_back
ce qui va ajouter une case à notre tableau

157
00:09:19,660 --> 00:09:26,433
dans laquelle on ajoute la transformation
de ce pointeur à la C reçu de new

158
00:09:26,433 --> 00:09:33,931
en un unique_ptr qui pointera 
sur la zone mémoire allouée par le new.

159
00:09:33,931 --> 00:09:36,984
Voyons maintenant la méthode « afficher ».

160
00:09:36,984 --> 00:09:41,872
On suppose que chacun des personnages 
à sa propre méthode afficher

161
00:09:41,872 --> 00:09:42,934
qui est polymorphique.

162
00:09:42,934 --> 00:09:47,421
Donc il suffit de faire comme ceci, 
la boucle sur tous les personnages stockés

163
00:09:47,421 --> 00:09:51,162
dans le tableau dynamique
de pointeurs sur des « Personnages »,

164
00:09:51,162 --> 00:09:53,643
et donc d'appeler la méthode afficher

165
00:09:53,643 --> 00:09:57,345
au travers de ce pointeur, c'est justement 
pour ça qu'on avait un pointeur

166
00:09:57,354 --> 00:10:00,455
pour avoir ici un comportement 
polymorphique.

167
00:10:00,965 --> 00:10:04,176
Cependant, ce code ne compile pas.

168
00:10:04,176 --> 00:10:08,288
En effet, notre tableau dynamique 
« personnages » est un tableau dynamique

169
00:10:08,288 --> 00:10:11,134
de « unique_ptr », c'est-à-dire
des pointeurs uniques.

170
00:10:11,134 --> 00:10:14,494
On ne peut pas avoir plusieurs
pointeurs sur la case mémoire.

171
00:10:14,494 --> 00:10:17,142
En mémoire, on a
quelque chose comme ceci :

172
00:10:17,142 --> 00:10:22,055
un tableau dynamique de « unique_ptr »
qui pointent sur des « Personnages ».

173
00:10:22,055 --> 00:10:26,458
Quand on écrit la « boucle for »

174
00:10:29,643 --> 00:10:35,242
comme ceci, 
il se trouve que la variable quidam

175
00:10:35,242 --> 00:10:40,408
va être une autre variable
qui va, tour à tour,

176
00:10:40,408 --> 00:10:44,396
valoir chacune des valeurs
du tableau « personnage ».

177
00:10:44,396 --> 00:10:51,041
Donc « quidam » est bien un pointeur
qui veut pointer au même endroit,

178
00:10:51,041 --> 00:10:55,538
que chacun, tour à tour, des
différents pointeurs sur « Personnages »,

179
00:10:55,538 --> 00:10:57,985
ici stockés dans ce tableau.

180
00:10:57,985 --> 00:11:02,692
Donc par exemple, la première étape, 
ce serait de dire quidam égal ce pointeur.

181
00:11:02,692 --> 00:11:06,620
Donc égalité de pointeurs, ça veut dire 
qui veut pointer au même endroit.

182
00:11:06,620 --> 00:11:13,043
Or, ceci n'est pas possible du fait 
que l'on a ici des unique_ptr.

183
00:11:13,043 --> 00:11:15,948
On ne peut avoir qu'un seul
pointeur par endroit.

184
00:11:15,948 --> 00:11:18,445
Donc cette solution n'est pas acceptable.

185
00:11:18,445 --> 00:11:24,717
Il faut pour cela avoir une référence 
sur les objets qui sont stockés,

186
00:11:24,717 --> 00:11:28,669
une référence sur les « unique pointers »,
ça c'est tout à fait possible.

187
00:11:28,669 --> 00:11:32,011
Donc la bonne « boucle for »
s'écrit de la façon suivante :

188
00:11:32,011 --> 00:11:36,970
« for auto référence », ici bien sûr 
on ne va pas modifier,

189
00:11:36,970 --> 00:11:40,884
la méthode afficher étant const, on peut
donc rajouter une référence constante.

190
00:11:40,884 --> 00:11:45,325
Donc « for auto, référence constante », 
« quidam » est donc cette fois-ci

191
00:11:45,325 --> 00:11:48,275
une référence constante sur
les éléments du tableau « personnage ».

192
00:11:48,275 --> 00:11:52,445
Donc une référence constante
sur des unique_ptr.

193
00:11:52,445 --> 00:11:55,815
Voilà donc une petite subtilité 
sur les unique_ptr

194
00:11:55,815 --> 00:11:59,800
Voyons maintenant comment 
nous allons utiliser notre classe « Jeu ».

195
00:11:59,800 --> 00:12:04,858
Donc on déclarerait ici un jeu
et puis on ajouterait des personnages

196
00:12:04,858 --> 00:12:09,155
en appelant la méthode ajouter_personnage
et en créant dynamiquement avec new

197
00:12:09,155 --> 00:12:13,658
un nouveau « Guerrier », ici avec des paramètres
pour le constructeur de « Guerrier ».

198
00:12:13,658 --> 00:12:17,129
On ajoute ensuite un nouveau
« Magicien », un nouveau voleur,

199
00:12:17,129 --> 00:12:20,042
peut-être encore un nouveau « Guerrier », etc.

200
00:12:20,042 --> 00:12:25,375
Quand on souhaite afficher le Jeu, on 
appellerait tout simplement jeu.afficher.

201
00:12:25,375 --> 00:12:30,553
Mais cette innocente classe jeu comporte
cependant quand même un danger potentiel.

202
00:12:30,553 --> 00:12:34,913
Qu'en est-il si jamais l'un des objets 
que l'on a mis dans la collection,

203
00:12:34,913 --> 00:12:39,040
plus exactement dont on a mis une adresse
dans la collection, si l'un de ces objets

204
00:12:39,040 --> 00:12:41,157
venait à disparaître ?

205
00:12:41,157 --> 00:12:45,257
Alors à ce moment là, on aurait toujours 
dans la collection le pointeur sur l'objet

206
00:12:45,257 --> 00:12:50,061
qui aurait par ailleurs été détruit, 
et cela pourrait causer de gros soucis.

207
00:12:50,061 --> 00:12:52,635
Pour que tout fonctionne bien, 
il est vraiment nécessaire

208
00:12:52,635 --> 00:12:58,347
que tous les éléments pointés existent au
moins aussi longtemps que leurs pointeurs.

209
00:12:58,347 --> 00:13:03,498
Donc dans l'exemple ici, il faut que les
personnages qui sont dans le jeu existent

210
00:13:03,498 --> 00:13:05,663
au moins aussi longtemps
que le jeu existe.

211
00:13:05,663 --> 00:13:09,991
Et ça, c'est au programmeur de 
le garantir par une bonne conception.

212
00:13:09,991 --> 00:13:14,719
Donc, au programmeur de ne pas 
faire de bêtise de ce genre là.

213
00:13:14,719 --> 00:13:19,708
Par exemple, imaginons un programmeur
un peu naïf qui a voulu créer une fonction

214
00:13:19,708 --> 00:13:22,762
pour créer et ajouter
un magicien dans un jeu.

215
00:13:22,762 --> 00:13:26,791
Donc cette fonction modifiant
le jeu prend un « Jeu » par référence

216
00:13:26,791 --> 00:13:30,040
et elle crée un « Magicien » ici,

217
00:13:30,040 --> 00:13:33,450
en passant des paramètres à son 
constructeur ; puis

218
00:13:33,450 --> 00:13:36,046
elle appelle la méthode 
« ajouter_personnage » et comme on doit

219
00:13:36,046 --> 00:13:39,040
ajouter un « Personnage » 
en passant un pointeur,

220
00:13:39,040 --> 00:13:42,119
elle passe donc ici
l'adresse de ce « Magicien ».

221
00:13:42,119 --> 00:13:44,537
Et puis donc dans le « main() »,
on aurait le jeu.

222
00:13:44,537 --> 00:13:47,528
On appelle cette fonction
« creer_magicien ».

223
00:13:47,528 --> 00:13:50,774
On passe le jeu par référence 
pour lui ajouter un magicien.

224
00:13:50,774 --> 00:13:53,013
Et puis on affiche le jeu.

225
00:13:53,013 --> 00:13:58,557
Le problème, en effet, c'est que 
la fonction « creer_magicien » ajoute

226
00:13:58,557 --> 00:14:02,252
un nouveau « Magicien » 
mais qui est une variable locale.

227
00:14:02,252 --> 00:14:04,660
Donc il ne faut jamais
faire ce genre de chose,

228
00:14:04,660 --> 00:14:06,559
jamais ajouter 
des variables locales.

229
00:14:06,559 --> 00:14:12,795
Cette variable locale va cesser d'exister,
« mago » ici va cesser d'exister dès que

230
00:14:12,795 --> 00:14:15,599
l'on va quitter la fonction.

231
00:14:15,599 --> 00:14:19,640
Donc on aura ajouté ici au travers 
de ce passage par référence

232
00:14:19,640 --> 00:14:24,764
un pointeur sur un « Magicien ».
Mais ce « Magicien » n'existera plus

233
00:14:24,764 --> 00:14:28,201
dès que l'on aura quitté
la fonction qui l'a créé.

234
00:14:28,201 --> 00:14:30,973
Donc, dès ce point-virgule ici, 
en toute rigueur ce « Magicien »

235
00:14:30,973 --> 00:14:32,759
ne devrait plus être accédé.

236
00:14:32,759 --> 00:14:35,407
On ne devrait plus chercher à l'afficher.

237
00:14:35,407 --> 00:14:39,178
Donc ici, on ne sait pas ce qu'il va 
se passer, on va afficher un « Magicien »

238
00:14:39,178 --> 00:14:41,337
qui potentiellement n'existe plus.

239
00:14:41,337 --> 00:14:44,147
Je dis potentiellement parce que
peut-être que sur certaines machines,

240
00:14:44,147 --> 00:14:47,978
ce code ici étant relativement court, 
il ne va rien se passer de grave.

241
00:14:47,978 --> 00:14:52,699
Mais si l'on imagine plusieurs lignes
de code avec beaucoup de manipulation

242
00:14:52,699 --> 00:14:56,419
entre cet appel à cette fonction
et cet affichage-là,

243
00:14:56,419 --> 00:15:00,834
là c'est pratiquement sûr que vous aurez
n'importe quoi comme résultat.

244
00:15:00,834 --> 00:15:03,827
Il ne faut donc vraiment
jamais faire ça.

245
00:15:03,827 --> 00:15:06,279
Jamais prendre l'adresse
d'une variable locale,

246
00:15:06,279 --> 00:15:08,951
utiliser comme ça l'adresse
d'une variable locale.

247
00:15:08,951 --> 00:15:12,121
La bonne façon de faire, de résoudre 
ce genre de problème c'est d'utiliser

248
00:15:12,121 --> 00:15:17,077
ce qu'on appelle l'allocation dynamique 
et de garantir que la zone mémoire allouée

249
00:15:17,077 --> 00:15:22,345
sera préservée au moins aussi longtemps 
que la collection qui la contient.

250
00:15:22,345 --> 00:15:26,949
Donc par exemple, ici, la méthode 
« creer_magicien » qui reçoit toujours un jeu

251
00:15:26,949 --> 00:15:32,737
par référence, ajouterait à ce jeu, 
un « Magicien » alloué dynamiquement

252
00:15:32,737 --> 00:15:36,589
comme on l'a fait jusqu'à maintenant. 
Ce new va faire une allocation dynamique

253
00:15:36,589 --> 00:15:41,178
et la zone mémoire existera 
tant qu'on n'aura pas fait de delete.

254
00:15:41,178 --> 00:15:47,528
Dans le cas d'une collection où l'on gère
des pointeurs au travers de « unique pointer »

255
00:15:47,528 --> 00:15:51,838
on n'a même pas besoin de faire le delete.
Ce delete sera automatiquement fait

256
00:15:51,838 --> 00:15:55,709
par le « unique pointer » dès que 
la mémoire ne sera plus utilisée.

257
00:15:55,709 --> 00:15:58,448
Cela est un des avantages 
de ces « unique pointers ».

258
00:15:58,448 --> 00:16:01,600
C'est donc pour cela que l'on vous 
conseille d'utiliser dans un premier temps

259
00:16:01,600 --> 00:16:04,030
des pointeurs intelligents,
des « unique pointers »

260
00:16:04,030 --> 00:16:07,150
parce que d'abord vous n'avez pas 
du tout besoin de vous préoccupez

261
00:16:07,150 --> 00:16:11,369
de la désallocation, donc aucun risque de 
libération d'une zone mémoire

262
00:16:11,369 --> 00:16:14,484
tant qu'on l'utilise.
Par contre, le pointeur

263
00:16:14,484 --> 00:16:18,405
sera automatiquement libéré dès qu'on
n'utilise plus cette zone mémoire.

264
00:16:18,405 --> 00:16:21,443
Puis le deuxième aspect,
c'est l'aspect « unique ».

265
00:16:21,443 --> 00:16:24,890
Il y a l'aspect pointeur intelligent 
qui permet de gérer la désallocation,

266
00:16:24,890 --> 00:16:28,497
et l'aspect « unique » qui évite justement 
d'avoir des références multiples.

267
00:16:28,497 --> 00:16:32,462
Alors on a vu dans l'exemple de la « boucle 
for » que cela donnait quelques contraintes.

268
00:16:32,462 --> 00:16:35,332
Mais c'est un gros avantage d'avoir
globalement qu'un seul pointeur

269
00:16:35,332 --> 00:16:39,127
qui pointe sur l'objet en question.
L'objet appartient comme ça vraiment

270
00:16:39,127 --> 00:16:41,927
à la collection à laquelle
il est censé appartenir.

271
00:16:41,927 --> 00:16:45,074
Il n'y a pas d'autres endroits dans le 
programme qui pointent vers cet objet

272
00:16:45,074 --> 00:16:47,631
et qui pourraient le modifier.

273
00:16:47,631 --> 00:16:50,935
Voilà donc les raisons pour lesquelles 
on vous conseille dans un premier temps

274
00:16:50,935 --> 00:16:53,372
d'utiliser les unique_ptr.

275
00:16:53,372 --> 00:16:56,644
Maintenant on pourrait aussi 
utiliser des pointeurs à la C.

276
00:16:56,644 --> 00:17:00,898
Si vous voulez approfondir cet aspect, 
nous avons fait une autre séquence vidéo,

277
00:17:00,898 --> 00:17:04,577
optionnelle celle-ci, qui va
un petit peu plus loin sur ces aspects

278
00:17:04,577 --> 00:17:09,642
et qui donc illustrerait encore mieux 
les avantages des unique_ptr.
