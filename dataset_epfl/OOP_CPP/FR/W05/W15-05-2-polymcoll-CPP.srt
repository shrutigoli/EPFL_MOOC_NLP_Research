1
00:00:04,439 --> 00:00:07,727
Nous avons vu que si nous voulions 
une collection hétérogène,

2
00:00:07,727 --> 00:00:10,728
c'est-à-dire un ensemble 
d'objets polymorphiques

3
00:00:10,728 --> 00:00:15,008
regroupés dans un même ensemble,
par exemple dans un tableau dynamique,

4
00:00:15,008 --> 00:00:17,821
alors, forcément, pour 
avoir le polymorphisme,

5
00:00:17,825 --> 00:00:19,421
il fallait avoir un ensemble,

6
00:00:19,421 --> 00:00:22,611
une collection de pointeurs
sur ces objets.

7
00:00:22,627 --> 00:00:24,707
Et nous vous avons conseillé, jusqu'ici,

8
00:00:24,710 --> 00:00:29,400
de faire un tableau de pointeurs 
intelligent à la C++ 2011,

9
00:00:29,403 --> 00:00:32,212
un tableau de « unique pointer ».

10
00:00:32,212 --> 00:00:34,537
Regardons dans cette vidéo-ci
comment nous pourrions le faire

11
00:00:34,537 --> 00:00:37,577
avec des pointeurs « à la C »,
et ce que cela implique.

12
00:00:37,616 --> 00:00:41,096
Pour rappel, nous avions pris 
pour exemple une classe « Jeu »,

13
00:00:41,101 --> 00:00:44,061
qui contient une collection de « Personnages »

14
00:00:44,070 --> 00:00:46,471
pouvant être polymorphiques,

15
00:00:46,471 --> 00:00:49,331
donc pouvant être des guerriers,
des voleurs, des magiciens, etc.

16
00:00:49,438 --> 00:00:53,021
Et donc, pour ceci, nous avons 
mis un tableau dynamique, ici,

17
00:00:53,021 --> 00:00:54,813
de pointeurs sur des « Personnages ».

18
00:00:54,813 --> 00:00:57,843
Dans la version précédente,
nous avions mis ici des « unique pointers »,

19
00:00:57,857 --> 00:01:01,292
regardons maintenant si on met,
comme ceci, des pointeurs « à la C »,

20
00:01:01,292 --> 00:01:05,712
puisqu'après tout, l'interface 
de l'ajout d'un personnage

21
00:01:05,721 --> 00:01:07,891
se fait avec un pointeur « à la C ».

22
00:01:07,910 --> 00:01:12,000
Pour rappel, l'utilisation serait d'avoir
ici une instance de la classe « Jeu »,

23
00:01:12,004 --> 00:01:16,816
et d'appeler « jeu.ajouter_personnage »
avec une allocation dynamique,

24
00:01:16,816 --> 00:01:19,511
ici d'un guerrier, au travers 
d'un « new Guerrier »,

25
00:01:19,511 --> 00:01:22,631
qui renvoit bien un pointeur 
sur un « Guerrier »,

26
00:01:22,648 --> 00:01:24,696
lequel pointeur sur un « Guerrier »

27
00:01:24,696 --> 00:01:27,929
est bien compatible avec
un pointeur sur un « Personnage »,

28
00:01:27,929 --> 00:01:30,369
puisqu'un « Guerrier » est un « Personnage »,

29
00:01:30,369 --> 00:01:34,686
un pointeur sur un « Guerrier » est
aussi un pointeur sur un « Personnage ».

30
00:01:34,686 --> 00:01:37,271
Comment donc, dans ce cas, 
avec un pointeur « à la C »,

31
00:01:37,271 --> 00:01:40,191
écririons-nous les 2 méthodes
de la classe « Jeu » ?

32
00:01:41,215 --> 00:01:43,765
Commençons par l'ajout d'un personnage,

33
00:01:43,914 --> 00:01:45,647
dont le prototype n'a pas changé.

34
00:01:45,647 --> 00:01:48,147
Donc on reçoit, effectivement ici,
un paramètre nouveau,

35
00:01:48,152 --> 00:01:50,453
qui est un pointeur « à la C »
sur un « Personnage »,

36
00:01:50,453 --> 00:01:53,353
puisque ceci serait le résultat
de l'appel à « new ».

37
00:01:53,368 --> 00:01:56,251
Et donc comme on a décidé ici
d'avoir un tableau dynamique

38
00:01:56,251 --> 00:01:58,111
de pointeurs « à la C »
sur des « Personnages »,

39
00:01:58,111 --> 00:01:59,911
il n'y a rien de compliqué à faire.

40
00:01:59,911 --> 00:02:01,367
Il suffit simplement d'ajouter

41
00:02:01,367 --> 00:02:04,657
« push_back » à la fin du tableau 
dynamique de « Personnages »

42
00:02:04,664 --> 00:02:07,574
le paramètre nouveau que l'on a reçu.

43
00:02:07,761 --> 00:02:10,840
On peut, comme dans la version précédente,
commencer par, au préalable,

44
00:02:10,840 --> 00:02:14,715
vérifier que l'on reçoit effectivement
un vrai pointeur qui n'est pas nul,

45
00:02:14,715 --> 00:02:17,549
c'est-à-dire un pointeur
sur un vrai objet.

46
00:02:17,564 --> 00:02:21,654
Cette version est un petit peu plus simple
que dans le cas des « unique pointers ».

47
00:02:21,795 --> 00:02:23,520
De même, pour l'affichage,

48
00:02:23,520 --> 00:02:27,841
ici on peut simplement effectuer
une classique boucle « for auto »,

49
00:02:27,841 --> 00:02:30,758
puisqu'il n'y a aucun soucis.
Il n'y a pas de problème,

50
00:02:30,758 --> 00:02:34,610
d'empêchement d'avoir plusieurs pointeurs
sur la même zone mémoire,

51
00:02:34,610 --> 00:02:36,780
comme dans le cas des « unique pointers ».

52
00:02:36,794 --> 00:02:40,994
Donc ici rien de particulier à faire
par rapport aux « unique pointers ».

53
00:02:41,239 --> 00:02:43,529
Je vous laisse d'ailleurs 
comparer les 2 codes

54
00:02:43,540 --> 00:02:46,020
pour voir où sont les différences.

55
00:02:56,502 --> 00:02:58,960
On voit que dans la version 
à « unique pointer »,

56
00:02:58,960 --> 00:03:01,280
on a dû rajouter ici
« unique_ptr »,

57
00:03:01,296 --> 00:03:05,176
au lieu d'avoir simplement une étoile (*).

58
00:03:05,280 --> 00:03:08,940
On a aussi dû, pour les histoires 
de pointeurs uniques,

59
00:03:08,944 --> 00:03:12,074
pour éviter d'avoir plusieurs pointeurs
sur la même zone mémoire,

60
00:03:12,187 --> 00:03:16,377
rajouter ici un « const » qui n'existe pas 
dans la version pointeur « à la C ».

61
00:03:16,403 --> 00:03:22,103
Et enfin on a dû rajouter ici
la conversion d'un pointeur « à la C »

62
00:03:22,103 --> 00:03:24,541
en un « unique pointer »,

63
00:03:24,541 --> 00:03:28,749
lequel n'existe pas non plus 
dans la version pointeur « à la C ».

64
00:03:29,344 --> 00:03:33,473
Il semble donc que la version 
pointeur « à la C » est plus simple

65
00:03:33,473 --> 00:03:35,883
que la version avec « unique pointers ».

66
00:03:36,175 --> 00:03:39,165
Pourquoi alors vous avoir 
conseillé des « unique pointers » ?

67
00:03:39,846 --> 00:03:42,616
Le problème avec les pointeurs « à la C »,
c'est que le programmeur

68
00:03:42,622 --> 00:03:46,236
devra se prémunir contre un certain 
nombre de problèmes potentiels

69
00:03:46,236 --> 00:03:47,296
avec sa classe.

70
00:03:47,712 --> 00:03:49,304
La première chose 
à laquelle il faut penser

71
00:03:49,304 --> 00:03:52,171
quand on met des pointeurs 
dans une classe, donc typiquement ici,

72
00:03:52,171 --> 00:03:54,772
quand on met des pointeurs dans 
notre collection hétérogène,

73
00:03:54,772 --> 00:03:55,612
dans notre jeu,

74
00:03:55,813 --> 00:03:57,963
la première chose à laquelle
il faut penser, c'est :

75
00:04:01,068 --> 00:04:04,878
lorsqu'on a des pointeurs dans une classe,
il faut penser au constructeur de copie,

76
00:04:04,890 --> 00:04:09,390
et au destructeur, ainsi qu'à 
l'opérateur d'affectation.

77
00:04:09,399 --> 00:04:12,389
En effet, si on a des pointeurs 
dans une collection,

78
00:04:12,410 --> 00:04:17,950
par exemple, ici dans notre jeu,
nous avons un tableau

79
00:04:17,957 --> 00:04:20,997
de pointeurs sur des « Personnages ».

80
00:04:23,480 --> 00:04:25,250
La question qui se pose c'est :

81
00:04:25,271 --> 00:04:28,201
qu'est-ce que ça veut dire
de copier un jeu ?

82
00:04:28,320 --> 00:04:31,410
Est-ce que l'on fait 
une copie de surface ?

83
00:04:32,423 --> 00:04:36,633
Si ici j'ai un jeu « j2 »
qui est une copie de « j1 »,

84
00:04:36,941 --> 00:04:41,791
il aura donc une copie
du tableau de « Personnages »,

85
00:04:41,794 --> 00:04:43,921
mais si on ne fait 
qu'une copie de surface,

86
00:04:43,921 --> 00:04:46,761
si on n'utilise que le constructeur 
de copie par défaut,

87
00:04:46,773 --> 00:04:49,816
alors on va copier des pointeurs.

88
00:04:49,816 --> 00:04:53,216
On va copier les différents éléments 
uniquement, terme à terme,

89
00:04:53,230 --> 00:04:54,811
donc une copie de pointeurs,

90
00:04:54,811 --> 00:04:58,201
cela veut dire que le jeu 2 pointera

91
00:04:58,207 --> 00:05:02,827
sur les mêmes « Personnages » que le jeu 1.

92
00:05:02,837 --> 00:05:06,817
Et ceci est en général indésirable,
puisque l'on souhaite en général

93
00:05:06,817 --> 00:05:09,867
que les 2 collections aient 
des éléments qui vivent séparément,

94
00:05:09,877 --> 00:05:11,517
ici dans l'exemple des jeux,

95
00:05:11,517 --> 00:05:15,871
on souhaiterait pouvoir jouer 
séparément au jeu 1 et au jeu 2,

96
00:05:15,877 --> 00:05:20,177
sans que les personnages de l'un
influent les personnages de l'autre.

97
00:05:20,187 --> 00:05:23,403
Ce problème n'existe pas
avec les « unique pointers »

98
00:05:23,403 --> 00:05:25,053
puisqu'avec un « unique pointers »,

99
00:05:25,055 --> 00:05:29,235
on n'a pas le droit d'avoir 
des pointeurs multiples

100
00:05:29,261 --> 00:05:30,921
sur les mêmes « Personnages »,

101
00:05:30,921 --> 00:05:34,971
et donc on n'aurait pas du tout 
le droit de faire une copie.

102
00:05:34,971 --> 00:05:37,421
Donc la copie est, de fait, interdite

103
00:05:37,431 --> 00:05:40,461
avec un jeu qui contient 
des « unique pointers ».

104
00:05:40,489 --> 00:05:43,869
Le compilateur aurait en effet interdit
l'appel au constructeur de copie,

105
00:05:43,875 --> 00:05:46,391
qui cherche à faire des copies
de « unique pointers »,

106
00:05:46,391 --> 00:05:49,111
donc le programmeur se serait 
rendu compte qu'il y a ici un problème.

107
00:05:49,391 --> 00:05:53,350
Par ailleurs, avec des pointeurs « à la C »,
il ne faut pas oublier la désallocation,

108
00:05:53,350 --> 00:05:54,780
et surtout, la règle d'or,

109
00:05:54,789 --> 00:05:57,759
que c'est celui qui a alloué la mémoire,
celui qui a fait le « new »,

110
00:05:57,761 --> 00:06:01,431
qui est chargé de la libérer,
donc de faire le « delete ».

111
00:06:01,431 --> 00:06:04,283
Je vous rappelle qu'on utilisait,
par exemple, typiquement comme ceci,

112
00:06:04,283 --> 00:06:08,603
ajouter un personnage au jeu,
et le personnage est créé

113
00:06:08,613 --> 00:06:12,136
par appel à « new », donc 
par exemple « new Magicien »,

114
00:06:12,136 --> 00:06:13,880
avec les paramètres pour son constructeur.

115
00:06:13,880 --> 00:06:18,050
C'est donc celui qui a fait cet appel ici,
qui devra faire la destruction.

116
00:06:18,130 --> 00:06:21,810
Ici en l'occurrence, il n'a pas moyen 
de récupérer le pointeur qu'il a alloué,

117
00:06:21,825 --> 00:06:24,024
puisqu'il n'a pas sauvé 
cette valeur quelque part,

118
00:06:24,024 --> 00:06:28,082
et donc il faut offrir le moyen 
de détruire les « Personnages »

119
00:06:28,082 --> 00:06:29,562
que l'on a mis dans notre collection.

120
00:06:29,562 --> 00:06:32,732
Par exemple avec une méthode
« detruire_personnage »

121
00:06:32,743 --> 00:06:36,883
où on indiquerait l'adresse 
du « Personnage » que l'on veut détruire,

122
00:06:36,937 --> 00:06:39,317
mais cela supposerait bien sûr
que celui qui alloue

123
00:06:39,329 --> 00:06:43,179
garde trace de ses pointeurs
pour pouvoir les utiliser ici.

124
00:06:43,192 --> 00:06:47,469
On pourrait aussi détruire un « Personnage »
en indiquant quel est le numéro,

125
00:06:47,469 --> 00:06:48,735
l'index de ce « Personnage »,

126
00:06:48,735 --> 00:06:52,521
en supposant qu'on ait numéroté,
qu'on ait accès au numéro des « Personnages »,

127
00:06:52,521 --> 00:06:55,191
détruire le personnage numéro 2, etc.

128
00:06:55,191 --> 00:06:59,980
Ou alors, carrément offrir une méthode
qui détruit tous les « Personnages ».

129
00:07:00,080 --> 00:07:03,143
Ça, c'est libre à vous, c'est 
en fonction de votre conception,

130
00:07:03,143 --> 00:07:05,863
de la collection hétérogène 
que vous voulez créer.

131
00:07:05,922 --> 00:07:08,340
Mais dans tous les cas,
il va falloir penser

132
00:07:08,340 --> 00:07:12,269
à fournir des méthodes qui permettent
de libérer la mémoire allouée,

133
00:07:12,269 --> 00:07:15,669
libérer les pointeurs qui sont 
stockés dans votre collection.

134
00:07:16,376 --> 00:07:19,915
Par exemple, si on a décidé d'offrir
la méthode qui détruit

135
00:07:19,915 --> 00:07:21,945
tous les objets pointés
stockés dans la collection,

136
00:07:21,949 --> 00:07:25,199
qui détruit tous les « Personnages »
pointés dans le jeu,

137
00:07:25,199 --> 00:07:27,785
on parcourrait comme ceci,
avec une boucle « for »,

138
00:07:27,807 --> 00:07:31,985
tous les personnages, tous les pointeurs 
pointés dans le tableau « personnages »,

139
00:07:31,985 --> 00:07:34,295
et on « delete » chacun de ces pointeurs.

140
00:07:34,534 --> 00:07:35,492
Évidemment, à la fin,

141
00:07:35,492 --> 00:07:38,504
on n'oublie pas de vider
le tableau de ses pointeurs,

142
00:07:38,504 --> 00:07:40,204
pour ne pas garder en mémoire

143
00:07:40,208 --> 00:07:43,998
des pointeurs qui pointent vers
des zones mémoires qui ont été libérées.

144
00:07:45,009 --> 00:07:48,238
Une autre façon, si l'on 
souhaitait fournir la méthode

145
00:07:48,238 --> 00:07:51,166
qui permet de détruire un personnage,
indiqué par sa position,

146
00:07:51,166 --> 00:07:54,046
par exemple détruire 
le deuxième personnage,

147
00:07:54,058 --> 00:07:56,708
on aurait la situation suivante :

148
00:07:56,713 --> 00:07:59,313
on a un jeu

149
00:08:01,109 --> 00:08:03,779
qui contient son tableau de « Personnages »

150
00:08:05,207 --> 00:08:08,370
qui sont des pointeurs 
sur des « Personnages »,

151
00:08:08,370 --> 00:08:10,330
« Guerriers », « Voleurs », « Magiciens »...

152
00:08:10,997 --> 00:08:14,337
Et supposons, donc, que 
l'on passe le paramètre 1, ici,

153
00:08:14,340 --> 00:08:16,550
à cette méthode,

154
00:08:19,162 --> 00:08:21,780
c'est-à-dire qu'on veut supprimer 
le deuxième personnage,

155
00:08:21,780 --> 00:08:25,740
personnage[0], personnage[1],
on veut supprimer le deuxième personnage,

156
00:08:26,040 --> 00:08:27,802
donc la première chose que l'on ferait,

157
00:08:27,802 --> 00:08:30,942
si bien sûr, on est sûr que 
le paramètre « lequel », ici,

158
00:08:30,948 --> 00:08:34,328
est inférieur à « personnages.size() ».

159
00:08:34,437 --> 00:08:38,817
Ceci aurait pu être testé à l'extérieur,
avant l'appel de « détruire_personnage »,

160
00:08:38,821 --> 00:08:41,631
évidemment, si on ne peut pas le garantir,
si ce n'est pas le cas,

161
00:08:41,633 --> 00:08:45,323
ça vaudrait la peine 
de rajouter le test ici.

162
00:08:45,327 --> 00:08:47,713
Et donc si une telle 
condition est garantie,

163
00:08:47,713 --> 00:08:51,504
la première chose que l'on ferait 
c'est de « delete » cette zone mémoire,

164
00:08:51,504 --> 00:08:54,628
donc « delete personnages [lequel]; » ici,

165
00:08:54,628 --> 00:08:56,246
donc « personnage[1] ».

166
00:08:56,246 --> 00:08:59,506
On va faire un « delete » ici, 
sur cette zone mémoire,

167
00:08:59,878 --> 00:09:01,848
mais bien sûr, une fois 
qu'on a fait ceci,

168
00:09:01,848 --> 00:09:04,751
il va falloir éviter 
de garder cette adresse

169
00:09:04,752 --> 00:09:07,072
vers un zone mémoire invalide,

170
00:09:07,073 --> 00:09:10,163
il va donc falloir supprimer ce pointeur.

171
00:09:10,175 --> 00:09:13,812
Donc là, 3 solutions en fonction 
de ce que vous souhaitez faire.

172
00:09:13,812 --> 00:09:15,752
Les 3 solutions sont 
tout à fait possibles.

173
00:09:15,757 --> 00:09:19,277
Ça dépend de comment on veut 
gérer la collection hétérogène :

174
00:09:19,279 --> 00:09:23,929
soit on veut garder le même ordre
et le même nombre de cases

175
00:09:23,948 --> 00:09:25,697
dans le tableau de « Personnages »,

176
00:09:25,697 --> 00:09:27,977
le même nombre de personnages possibles,

177
00:09:27,980 --> 00:09:30,880
mais indiquer simplement 
que ce personnage a disparu,

178
00:09:30,893 --> 00:09:34,073
à ce moment là, ce qu'on pourrait faire
c'est simplement dire que

179
00:09:34,094 --> 00:09:37,106
on remplace le pointeur invalide
par une adresse nulle,

180
00:09:37,106 --> 00:09:39,847
en disant que ce personnage a été détruit,

181
00:09:39,847 --> 00:09:41,677
représenté par
un « null pointer », « nullptr »,

182
00:09:41,698 --> 00:09:44,518
ce qui donnerait donc 
la situation suivante en mémoire,

183
00:09:46,701 --> 00:09:48,435
et donc on aurait bien ici

184
00:09:48,435 --> 00:09:52,675
un tableau qui continue 
de garder 4 personnages possibles,

185
00:09:52,693 --> 00:09:54,823
avec un pointeur nul ici pour indiquer

186
00:09:54,841 --> 00:09:59,091
que le personnage à la position 1,
le deuxième personnage, n'existe plus.

187
00:09:59,194 --> 00:10:01,734
Ça c'est une solution possible,

188
00:10:01,742 --> 00:10:06,092
mais qui implique que celui qui utilise 
le tableau prenne alors ses précautions,

189
00:10:06,097 --> 00:10:08,587
et teste si l'objet est bien présent,

190
00:10:08,593 --> 00:10:11,613
avant de, par exemple, 
lui appliquer une méthode.

191
00:10:12,471 --> 00:10:15,029
Une autre solution quand
on détruit un « Personnage »,

192
00:10:15,029 --> 00:10:16,472
ça serait de dire qu'à ce moment là,

193
00:10:16,472 --> 00:10:20,031
le nombre de personnages 
dans le jeu diminue de 1,

194
00:10:20,031 --> 00:10:22,013
la taille de ce tableau diminue de 1,

195
00:10:22,013 --> 00:10:24,713
et donc de supprimer carrément cette case.

196
00:10:24,721 --> 00:10:26,751
Là il y a 2 solutions possibles,

197
00:10:26,764 --> 00:10:29,404
une solution efficace 
qui ne préserve pas l'ordre,

198
00:10:29,410 --> 00:10:32,170
mais qui est très efficace,
qui ne supprime qu'un seul élément,

199
00:10:32,187 --> 00:10:35,942
et une solution qui préserve l'ordre,
mais qui va être coûteuse,

200
00:10:35,942 --> 00:10:38,182
parce qu'elle va demander
de recopier tous les éléments

201
00:10:38,182 --> 00:10:41,702
qui suivent l'élément que 
l'on est en train de détruire.

202
00:10:41,729 --> 00:10:43,289
Regardons la première solution.

203
00:10:43,295 --> 00:10:45,960
La première solution 
consiste simplement à échanger,

204
00:10:45,960 --> 00:10:48,020
avec la fonction « swap » de « utility »,

205
00:10:48,025 --> 00:10:52,115
à échanger le pointeur sur lequel
on vient d'appliquer « delete »

206
00:10:52,122 --> 00:10:54,512
avec le dernier pointeur du tableau,

207
00:10:54,540 --> 00:10:57,880
« personnages.back », je vous rappelle,
c'est le dernier élément

208
00:10:57,901 --> 00:10:59,576
du tableau « personnages »,

209
00:10:59,576 --> 00:11:02,626
et on va donc échanger ces 2 éléments,

210
00:11:02,628 --> 00:11:04,518
ce qui va donc donner ceci,

211
00:11:05,127 --> 00:11:07,305
si l'on échange les 2 pointeurs,

212
00:11:07,305 --> 00:11:09,025
c'est maintenant cette case-là

213
00:11:09,212 --> 00:11:11,362
qui pointera ici,

214
00:11:11,934 --> 00:11:13,584
et cette case-ci

215
00:11:14,163 --> 00:11:16,148
qui pointera là-bas.

216
00:11:16,148 --> 00:11:20,348
C'est l'échange de ces 2 pointeurs.

217
00:11:20,351 --> 00:11:23,171
Une fois que cet échange a été fait,

218
00:11:23,196 --> 00:11:24,500
alors à ce moment là,

219
00:11:24,500 --> 00:11:27,692
on peut maintenant supprimer
le dernier élément du tableau,

220
00:11:27,692 --> 00:11:29,339
puisqu'on sait que maintenant,
ce dernier élément

221
00:11:29,339 --> 00:11:31,639
c'est justement le pointeur
qu'on ne veut pas garder.

222
00:11:31,656 --> 00:11:33,416
Donc avec ce « pop back »,

223
00:11:33,426 --> 00:11:35,926
on va supprimer ici
ce dernier élément.

224
00:11:35,938 --> 00:11:37,580
Ce qui fait qu'au final,

225
00:11:37,580 --> 00:11:39,651
on a effectivement plus que 3 personnages,

226
00:11:39,651 --> 00:11:43,168
et plus aucune indication de l'adresse
de cette case mémoire

227
00:11:43,168 --> 00:11:44,998
que nous venons de libérer.

228
00:11:45,015 --> 00:11:47,754
Une troisième solution,
en fonction des besoins,

229
00:11:47,754 --> 00:11:51,218
serait de supprimer ce pointeur, 
mais en gardant l'ordre,

230
00:11:51,218 --> 00:11:53,076
c'est-à-dire en gardant 
ce pointeur au début,

231
00:11:53,076 --> 00:11:56,061
mais celui-ci en deuxième,
celui-ci en troisième,

232
00:11:56,061 --> 00:11:57,562
et non pas en inversant comme ceci,

233
00:11:57,562 --> 00:11:59,862
les ordres qu'on avait 
perturbés tout à l'heure.

234
00:11:59,868 --> 00:12:04,818
En utilisant, comme ceci, la méthode « erase »
des tableaux dynamiques, des « vector »,

235
00:12:04,829 --> 00:12:08,639
qui supprime, comme ceci,
je vous le livre ici sans plus de détails,

236
00:12:08,656 --> 00:12:11,227
l'élément à la position « lequel »,

237
00:12:11,227 --> 00:12:13,647
et qui va, et c'est en cela 
qu'elle est coûteuse,

238
00:12:13,656 --> 00:12:18,637
effectivement supprimer cet élément,
mais copier tous les éléments qui suivent,

239
00:12:18,637 --> 00:12:21,447
les déplacer les uns après les autres,

240
00:12:21,500 --> 00:12:23,430
pour que ce tableau reste

241
00:12:23,444 --> 00:12:28,114
un tableau « connexe »
en mémoire à 3 éléments.

242
00:12:29,764 --> 00:12:31,733
Voilà donc comment on pourrait procéder,

243
00:12:31,733 --> 00:12:33,043
d'une façon ou d'une autre,

244
00:12:33,059 --> 00:12:38,189
pour pouvoir offrir la possibilité
de supprimer les éléments de la collection.

245
00:12:38,233 --> 00:12:42,753
Pour résumer, les pointeurs « à la C »
dans une collection hétérogène

246
00:12:42,757 --> 00:12:46,267
posent le problème 
de l'intégrité des données.

247
00:12:46,272 --> 00:12:48,372
En fait, il y a 3 facettes à ce problème,

248
00:12:48,390 --> 00:12:51,763
le premier c'est de garantir la durée 
de vie des données pointées,

249
00:12:51,763 --> 00:12:53,793
la durée de vie des personnages du jeu,

250
00:12:53,802 --> 00:12:56,022
au moins aussi longtemps 
que le jeu existe.

251
00:12:56,038 --> 00:13:00,198
Nous en avions déjà parlé dans le cas 
des pointeurs « unique pointers ».

252
00:13:00,202 --> 00:13:02,522
Donc nous en avions parlé 
dans la vidéo précédente.

253
00:13:02,530 --> 00:13:04,505
C'est un point que l'on trouve

254
00:13:04,505 --> 00:13:06,875
à la fois dans les « unique_ptr »,

255
00:13:10,245 --> 00:13:12,875
et dans les pointeurs « à la C ».

256
00:13:13,674 --> 00:13:16,807
Le deuxième problème, c'est 
le problème de la désallocation,

257
00:13:16,807 --> 00:13:21,247
il faut garantir que l'on libère
la mémoire que l'on a allouée,

258
00:13:21,252 --> 00:13:23,225
et ça, du point de vue des « unique_ptr »,

259
00:13:23,225 --> 00:13:25,725
comme ce sont des « smart pointers »,
il n'y a rien à faire.

260
00:13:25,740 --> 00:13:27,540
Donc ici c'est tout bon,

261
00:13:28,016 --> 00:13:32,061
par contre, évidemment, dans 
les pointeurs « à la C », ce n'est pas fait.

262
00:13:32,061 --> 00:13:35,571
Donc il faut, bien sûr, c'est ce que 
nous venons juste de détailler,

263
00:13:35,571 --> 00:13:37,761
offrir le moyen de le faire proprement.

264
00:13:37,769 --> 00:13:41,469
Enfin, troisième problème, le problème
de partage des données

265
00:13:41,472 --> 00:13:42,992
entre différentes collections,

266
00:13:42,992 --> 00:13:45,572
on l'a déjà brièvement évoqué
avec la copie tout à l'heure,

267
00:13:45,572 --> 00:13:47,612
et je vais y revenir dans un instant.

268
00:13:47,623 --> 00:13:51,303
Ceci ne pose aucun soucis
au niveau des « unique_ptr ».

269
00:13:51,312 --> 00:13:53,442
C'est justement l'aspect « unique »

270
00:13:54,643 --> 00:13:57,080
qui empêche que l'on ait 
du partage de données

271
00:13:57,080 --> 00:13:58,560
entre les différentes collections,

272
00:13:58,563 --> 00:14:01,943
mais qui n'est pas du tout garanti
par les pointeurs « à la C »,

273
00:14:01,956 --> 00:14:04,726
et il va donc falloir le traiter.

274
00:14:04,731 --> 00:14:07,801
Pour finir, reprenons donc 
ce dernier point en détail.

275
00:14:07,811 --> 00:14:10,631
J'ai choisi, pour cela, de considérer
un exemple qui me semble

276
00:14:10,633 --> 00:14:12,466
un tout petit peu plus illustratif.

277
00:14:12,466 --> 00:14:14,346
On imagine qu'on a des « dessins »,

278
00:14:14,360 --> 00:14:16,510
qui seront notre collection hétérogène,

279
00:14:16,511 --> 00:14:20,021
des « dessins » étant des ensembles
de « figures » géométriques.

280
00:14:20,034 --> 00:14:21,864
On aurait donc 2 classes,

281
00:14:21,869 --> 00:14:24,669
la classe « Figure » qui est 
une classe abstraite,

282
00:14:24,669 --> 00:14:28,545
dont on imagine, par exemple,
qu'on aurait différentes figures,

283
00:14:28,545 --> 00:14:31,875
comme des rectangles, des cercles, etc.

284
00:14:32,907 --> 00:14:34,010
qui hériteraient.

285
00:14:34,010 --> 00:14:37,910
Et on aurait donc 
une collection hétérogène de figures,

286
00:14:37,918 --> 00:14:42,128
qui serait notre « Dessin », qui 
contiendrait donc différentes figures,

287
00:14:42,137 --> 00:14:45,917
lequelles sont polymorphiques,
des rectangles, des cercles, etc.

288
00:14:45,995 --> 00:14:49,325
La question est donc de savoir
si le contenu d'un « Dessin »

289
00:14:49,330 --> 00:14:51,520
est personnel ou partagé.

290
00:14:51,526 --> 00:14:56,386
Donc si par exemple,
j'imagine avoir plusieurs dessins,

291
00:14:56,399 --> 00:14:59,375
par exemple le dessin « d18 »,

292
00:14:59,375 --> 00:15:04,297
qui contient une collection 
de pointeurs, bien sûr,

293
00:15:04,297 --> 00:15:07,517
puisque l'on souhaite que les figures 
se comportent de façon polymorphique,

294
00:15:07,534 --> 00:15:09,904
de pointeurs sur des figures,

295
00:15:09,906 --> 00:15:13,176
et imaginons que j'ai donc
un autre dessin,

296
00:15:16,687 --> 00:15:18,637
qui contient aussi sa collection

297
00:15:19,815 --> 00:15:21,605
de pointeurs sur des figures.

298
00:15:22,595 --> 00:15:23,740
Admettons que par exemple,

299
00:15:23,740 --> 00:15:26,340
un de ces objets soit un cercle,

300
00:15:26,357 --> 00:15:30,012
et qu'on décide de changer 
un attribut de ce cercle,

301
00:15:30,012 --> 00:15:33,362
par exemple de colorier 
ce cercle en rouge.

302
00:15:33,363 --> 00:15:34,517
La question c'est :

303
00:15:34,517 --> 00:15:36,166
si je colorie ce cercle en rouge,

304
00:15:36,166 --> 00:15:39,466
est-ce que ce sera juste 
le cercle de ce dessin « d18 »

305
00:15:39,468 --> 00:15:41,668
qui sera colorié en rouge,

306
00:15:41,668 --> 00:15:44,505
ou bien aussi d'autres cercles
d'autres dessins.

307
00:15:44,505 --> 00:15:46,395
Par exemple, est-ce que 
ce cercle est partagé

308
00:15:46,406 --> 00:15:50,137
par les dessins « d18 » et « d4 »,

309
00:15:50,137 --> 00:15:53,657
auquel cas, si je le modifie par l'un,
alors il va apparaître modifié dans tous.

310
00:15:53,659 --> 00:15:56,719
La réponse à ce genre de question
dépend bien évidemment

311
00:15:56,735 --> 00:15:59,965
du cadre dans lequel vous développez 
votre collection hétérogène.

312
00:15:59,967 --> 00:16:03,297
Ça dépend de la conception
de votre collection hétérogène,

313
00:16:03,297 --> 00:16:05,532
mais je crois vraiment que 
dans le cas des dessins,

314
00:16:05,532 --> 00:16:08,652
on ne souhaite pas que les figures 
soient partagées par plusieurs dessins,

315
00:16:08,660 --> 00:16:11,580
mais bien que chaque dessin
ait ses propres figures.

316
00:16:11,595 --> 00:16:15,171
Un dessin a son cercle,
un autre dessin a un autre cercle,

317
00:16:15,171 --> 00:16:16,709
qui sont différents.

318
00:16:16,709 --> 00:16:18,887
Dans le cas des jeux qu'on avait pris
comme premier exemple,

319
00:16:18,887 --> 00:16:21,807
je pense aussi que les contenus 
ne sont pas partagés.

320
00:16:21,821 --> 00:16:23,214
D'ailleurs avec qui partager ?

321
00:16:23,214 --> 00:16:25,583
Je pense que dans ces cas-là,
on n'a qu'un seul jeu

322
00:16:25,583 --> 00:16:28,553
et on va éviter d'avoir des copies de jeu.

323
00:16:28,820 --> 00:16:30,143
Si vous voulez un exemple

324
00:16:30,143 --> 00:16:33,913
où l'on pourrait imaginer avoir des 
collections qui partagent leur contenu,

325
00:16:33,920 --> 00:16:36,850
ça pourrait être aussi un jeu,
mais un peu plus compliqué,

326
00:16:36,860 --> 00:16:38,890
où on aurait différentes caméras

327
00:16:38,901 --> 00:16:42,471
qui pourraient voir les joueurs du jeu
sous différents angles,

328
00:16:42,481 --> 00:16:47,371
et alors on imaginerait que
chaque caméra ait par exemple

329
00:16:47,371 --> 00:16:51,841
une collection de « Personnages »
qu'elle peut voir,

330
00:16:51,858 --> 00:16:53,138
comme ceci.

331
00:16:53,165 --> 00:16:58,865
Donc par exemple, la caméra 1 permettrait 
de voir le monstre 1 et le joueur 2,

332
00:16:58,889 --> 00:17:02,479
la caméra 2 permettrait 
de voir les 2 joueurs,

333
00:17:02,500 --> 00:17:04,030
et on aurait comme ceci,

334
00:17:04,039 --> 00:17:06,969
des éléments du jeu

335
00:17:06,993 --> 00:17:10,113
qui seraient partagés 
par plusieurs collections.

336
00:17:10,116 --> 00:17:12,736
Mais ce genre de conception
est beaucoup plus avancé,

337
00:17:12,736 --> 00:17:14,406
et peut-être un peu plus rare.

338
00:17:14,443 --> 00:17:16,235
Dans les exemples qu'on vous a donnés,

339
00:17:16,235 --> 00:17:19,684
on ne souhaiterait certainement pas
partager le contenu des collections

340
00:17:19,684 --> 00:17:21,454
entre différentes collections,

341
00:17:21,463 --> 00:17:23,233
on voudrait que chaque collection ait

342
00:17:23,240 --> 00:17:25,220
ses propres personnages, 
dans le cas du jeu,

343
00:17:25,223 --> 00:17:27,223
ses propres figures, 
dans le cas des dessins.

344
00:17:27,576 --> 00:17:30,686
Donc, soit il faudrait le garantir 
au niveau du programme,

345
00:17:30,701 --> 00:17:33,181
donc faire des méthodes, 
faire des fonctions

346
00:17:33,182 --> 00:17:35,182
pour garantir que c'est bien le cas,

347
00:17:35,196 --> 00:17:37,905
soit utiliser des « unique_ptr »

348
00:17:37,905 --> 00:17:42,665
qui, justement, empêchent que l'on ait
plusieurs pointeurs sur le même objet.

349
00:17:43,609 --> 00:17:44,479
Pour conclure,

350
00:17:44,549 --> 00:17:47,609
on vous a donc conseillé 
d'utiliser les « unique pointers »

351
00:17:47,635 --> 00:17:52,225
pour avoir plus facilement
une meilleure intégrité des données.

352
00:17:52,247 --> 00:17:55,007
Dans tous les cas, « unique pointers »
ou pointeurs « à la C »,

353
00:17:55,030 --> 00:17:58,579
vous devez vous poser le problème
de la durée de vie des données

354
00:17:58,579 --> 00:17:59,949
pointées pas ces collections,

355
00:17:59,973 --> 00:18:02,233
donc des objets contenus 
dans les collections.

356
00:18:02,305 --> 00:18:04,225
Mais dans le cas des « unique pointers »,

357
00:18:04,225 --> 00:18:06,935
vous n'avez pas à vous préoccuper
de la désallocation,

358
00:18:06,935 --> 00:18:10,525
ça c'est l'aspect « smart pointers »
des pointeurs à la C++ 2011,

359
00:18:10,525 --> 00:18:12,679
ni du partage de données 
entre collections,

360
00:18:12,679 --> 00:18:15,279
ça c'est l'aspect « unique »
des « unique pointers ».

361
00:18:15,289 --> 00:18:18,539
Si jamais vous partez pour
une implémentation de pointeurs « à la C »,

362
00:18:18,545 --> 00:18:21,675
alors il faudra, non seulement 
vous poser ces questions,

363
00:18:21,689 --> 00:18:23,989
mais aussi y apporter des réponses.
