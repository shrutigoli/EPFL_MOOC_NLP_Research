1
00:00:04,094 --> 00:00:07,185
Vous connaissez maintenant les notions
fondamentales de l'orientée objet

2
00:00:07,185 --> 00:00:10,012
que sont l'encapsulation, 
l'abstraction et l'héritage.

3
00:00:10,024 --> 00:00:12,775
Il est temps d'aborder une notion 
tout aussi centrale,

4
00:00:12,775 --> 00:00:14,348
celle du polymorphisme.

5
00:00:14,348 --> 00:00:15,451
De façon générale,

6
00:00:15,451 --> 00:00:17,701
le polymorphisme est le fait 
qu'un même code puisse s'adapter

7
00:00:17,701 --> 00:00:20,792
automatiquement aux types des données
auxquels il s'applique.

8
00:00:20,792 --> 00:00:23,303
Il s'agit d'une notion importante
car elle permet d'aller

9
00:00:23,303 --> 00:00:27,006
vers du code générique,
du code qui s'écrit de façon unifiée

10
00:00:27,006 --> 00:00:28,926
pour différents types de données.

11
00:00:28,956 --> 00:00:32,276
Pour introduire un peu plus concrètement
la notion de polymorphisme,

12
00:00:32,303 --> 00:00:35,433
partons d'un exemple.
Supposons que l'on souhaite programmer

13
00:00:35,457 --> 00:00:38,382
un jeu qui met en scène 
les personnages de la hiérarchie

14
00:00:38,382 --> 00:00:41,252
qu'on a déjà eu l'occasion d'évoquer
dans les séquences précédentes.

15
00:00:41,365 --> 00:00:44,505
Supposons que notre jeu comporte
un personnage principal

16
00:00:44,505 --> 00:00:45,735
qui serait le joueur.

17
00:00:51,297 --> 00:00:53,107
Et que dans un tour de jeu,

18
00:00:53,107 --> 00:00:56,453
ce dernier soit amené
à faire des rencontres

19
00:00:56,453 --> 00:00:59,823
c'est-à-dire qu'il soit rencontré 
par tout un ensemble d'autres personnages.

20
00:00:59,828 --> 00:01:04,393
L'ensemble des personnages en C++
pourrait naturellement prendre

21
00:01:04,393 --> 00:01:07,623
l'allure suivante : 
un vecteur de Personnage,

22
00:01:10,543 --> 00:01:14,250
qui serait les <i>autres</i> 
et pour écrire le code

23
00:01:14,250 --> 00:01:17,650
qui fait que les <i>autres</i> rencontrent 
le joueur, une bouclefor*

24
00:01:21,386 --> 00:01:22,926
comme ceci, par exemple

25
00:01:30,274 --> 00:01:33,644
où chacun des autres personnages
rencontrent tour à tour notre joueur.

26
00:01:42,983 --> 00:01:45,039
Pour que notre jeu ne soit pas 
trop monotone,

27
00:01:45,039 --> 00:01:47,902
nous aimerions évidemment avoir
dans la collection

28
00:01:47,902 --> 00:01:52,542
des autres personnages, 
des personnages de natures diverses,

29
00:01:52,555 --> 00:01:53,815
de formes diverses,

30
00:01:53,815 --> 00:01:56,970
c'est-à-dire qu'ici 
dans cette variable perso,

31
00:01:56,970 --> 00:02:01,550
nous aurions tour à tour un guerrier,
un voleur, un sorcier.

32
00:02:02,047 --> 00:02:04,310
Nous savons aussi 
depuis une séquence précédente

33
00:02:04,310 --> 00:02:06,080
qu'une sous-classe

34
00:02:08,881 --> 00:02:12,004
peut avoir sa propre définition 
plus spécifique

35
00:02:12,004 --> 00:02:14,349
d'une méthode déjà définie plus haut.

36
00:02:14,349 --> 00:02:16,894
Par exemple, on pourrait imaginer

37
00:02:16,894 --> 00:02:21,004
que lorsque le Voleur rencontre 
le Personnage, il le vole.

38
00:02:21,662 --> 00:02:26,962
Le polymorphisme est le fait d'appliquer
le même code à des objets

39
00:02:26,965 --> 00:02:29,065
prenant plusieurs formes

40
00:02:30,312 --> 00:02:33,850
et que l'exécution du code 
s'adapte automatiquement

41
00:02:33,850 --> 00:02:37,003
à la forme de l'objet.
Cela veut dire concrètement

42
00:02:37,003 --> 00:02:40,421
que si à un moment donné, 
notre personnage est un voleur,

43
00:02:40,421 --> 00:02:45,258
la méthode rencontrer va être choisie 
de sorte à être celle du voleur

44
00:02:45,258 --> 00:02:49,255
qui va donc trousser notre personnage
principal sans autre forme de procès.

45
00:02:49,255 --> 00:02:53,994
L'idée est que grâce à l'héritage,
le même code peut s'appliquer

46
00:02:53,994 --> 00:02:56,504
à toutes les formes 
de personnages possibles.

47
00:02:56,504 --> 00:02:59,274
Toutes ces formes de personnages ont
une méthode rencontrer

48
00:02:59,275 --> 00:03:01,378
que la façon dont un personnage

49
00:03:01,378 --> 00:03:04,798
en rencontre un autre 
peut prendre différentes formes,

50
00:03:08,601 --> 00:03:13,265
c'est-à-dire concrètement qu'un magicien
peut saluer un Personnage,

51
00:03:13,265 --> 00:03:16,710
un guerrier peut le frapper, 
un voleur peut le voler et ainsi de suite.

52
00:03:16,710 --> 00:03:20,310
Et grâce au polymorphisme,
le même code

53
00:03:22,264 --> 00:03:28,597
appliqué à différents personnages
pourra avoir un comportement différent

54
00:03:28,597 --> 00:03:30,147
propre à chacun.

55
00:03:30,688 --> 00:03:33,593
Très concrètement, si je mets un Voleur
dans un Personnage,

56
00:03:33,593 --> 00:03:35,539
dans une solution polymorphique,

57
00:03:35,539 --> 00:03:38,242
la méthode rencontrer
s'adapterait automatiquement

58
00:03:38,242 --> 00:03:41,417
à la nature réelle de l'objet contenu
dans la variable Personnage

59
00:03:41,417 --> 00:03:44,257
et donc ici, on appliquerait la méthode
<i>rencontrer</i> du voleur.

60
00:03:44,549 --> 00:03:48,159
L'intérêt de manipuler un voleur
sous la forme d'un personnage

61
00:03:48,159 --> 00:03:52,258
et non pas directement sous la forme
d'un voleur est justement de pouvoir faire

62
00:03:52,258 --> 00:03:55,455
des manipulations unifiées 
sur toutes sortes de types d'objets.

63
00:03:55,455 --> 00:03:57,975
Vous en avez un exemple concret ici

64
00:03:57,989 --> 00:04:01,048
où tout un ensemble de personnages
de natures diverses sont manipulés

65
00:04:01,048 --> 00:04:05,098
de façon unifiée en étant placé 
dans un tableau de Personnage.

66
00:04:05,397 --> 00:04:07,344
Ceci présuppose qu'à un moment donné,

67
00:04:07,344 --> 00:04:09,984
j'ai dû mettre 
dans ma collection de personnages

68
00:04:11,307 --> 00:04:14,400
des personnages de nature diverse,
c'est-à-dire que j'ai dû faire

69
00:04:14,400 --> 00:04:16,585
des manipulations qui ressemblent à ceci.

70
00:04:16,585 --> 00:04:20,055
Par exemple, 
si j'ai un objet de type Guerrier

71
00:04:22,933 --> 00:04:25,553
et un objet de type Sorcier

72
00:04:27,633 --> 00:04:30,563
alors, j'ai rempli mon tableau
de personnages

73
00:04:31,489 --> 00:04:33,849
en faisant par exemple
quelque chose comme ceci.

74
00:04:41,234 --> 00:04:44,682
C'est-à-dire, puisque les entrées 
de mon tableau sont de type Personnage

75
00:04:44,682 --> 00:04:48,862
que l'on a mis dans un Personnage
un objet de type Guerrier.

76
00:04:49,704 --> 00:04:53,708
Petit rappel sur l'héritage,
affecter un Guerrier à un Personnage

77
00:04:53,708 --> 00:04:57,108
est tout à fait licite.
Dans une hiérarchie de classes,

78
00:04:57,113 --> 00:05:01,019
la sous-classe hérite de la super-classe,
non seulement, les attributs/les méthodes

79
00:05:01,019 --> 00:05:05,572
mais également le type.
Un Guerrier est aussi un ersonnage

80
00:05:05,572 --> 00:05:08,672
et de ce fait, cette affectation
est tout à fait licite.

81
00:05:08,672 --> 00:05:12,285
Rappelons également que 
l'héritage est transitif

82
00:05:12,285 --> 00:05:15,040
c'est-à-dire que je pourrai 
tout autant affecter

83
00:05:17,220 --> 00:05:19,070
un Sorcier à un Personnage.

84
00:05:21,745 --> 00:05:25,584
Pourquoi ? Parce que l'héritage étant
transitif, un Sorcier est un Magicien

85
00:05:25,584 --> 00:05:29,694
qui est un Personnage à son tour.
Le Sorcier est aussi un Personnage.

86
00:05:30,015 --> 00:05:33,974
On a donc le droit de faire correspondre
à un objet de type super-classe

87
00:05:33,974 --> 00:05:36,399
un objet de type sous-classe.
On en voit un exemple ici

88
00:05:36,399 --> 00:05:40,034
dans le cadre de l'affectation.
Ce droit existe également

89
00:05:40,034 --> 00:05:43,869
dans le cadre du passage des paramètres
et nous allons en voir un exemple

90
00:05:43,869 --> 00:05:45,389
sur le transparent suivant.

91
00:05:46,108 --> 00:05:48,903
On suppose ici l'existence 
d'une hiérarchie de classes

92
00:05:48,903 --> 00:05:50,771
telle que décrite 
dans l'exemple précédent.

93
00:05:50,771 --> 00:05:54,051
Un programmeur qui utilise 
cette hiérarchie de classe

94
00:05:54,051 --> 00:05:56,451
à programmé une fonction 
<i>faire_rencontrer</i>

95
00:05:56,470 --> 00:05:59,610
qui permet à un personnage 
d'en rencontrer un autre.

96
00:05:59,610 --> 00:06:03,410
Cette fonction <i>faire_rencontrer</i>
est utilisée dans son programme principal

97
00:06:03,429 --> 00:06:07,198
et il lui est passée en argument
un premier personnage qui est un guerrier

98
00:06:07,198 --> 00:06:09,508
et un second personnage qui est un voleur.

99
00:06:10,459 --> 00:06:13,650
Tout ceci pour montrer 
qu'on peut tout à fait mettre un Guerrier

100
00:06:13,650 --> 00:06:15,721
dans un Personnage ou un Voleur

101
00:06:15,721 --> 00:06:19,921
dans le cadre du passage des paramètres.
Mettre un objet de type sous-classe

102
00:06:19,958 --> 00:06:23,715
dans une variable de type super-classe
est autorisé aussi bien

103
00:06:23,715 --> 00:06:27,235
dans le cadre de l'affectation
que celui du passage des paramètres.

104
00:06:27,301 --> 00:06:30,262
Ceci grâce à l'héritage du type 
dans une hiérarchie,

105
00:06:30,262 --> 00:06:32,272
un Guerrier est un Personnage.

106
00:06:32,891 --> 00:06:35,799
Un peu plus formellement donc
le polymorphisme est le fait que

107
00:06:35,799 --> 00:06:38,109
des instances d'une sous-classe

108
00:06:38,719 --> 00:06:40,869
soient substituables aux instances

109
00:06:41,740 --> 00:06:44,247
des classes de leur ascendance, 
des super-classes

110
00:06:44,247 --> 00:06:47,043
soit en arguments de méthode
soit lors d'affectation

111
00:06:47,043 --> 00:06:48,934
ce que l'on vient de voir 
dans les transparents précédents

112
00:06:48,934 --> 00:06:51,994
tout en gardant leurs propriétés propres.

113
00:06:53,274 --> 00:06:56,804
Dans le cas de cet exemple,
l'idée serait donc de mettre un Voleur

114
00:06:56,804 --> 00:07:01,094
dans un personnage tout en garantissant
que l'exécution de la méthode <i>rencontrer</i>

115
00:07:01,104 --> 00:07:04,951
s'adaptent automatiquement 
à la nature réelle de l'instance contenue

116
00:07:04,951 --> 00:07:08,249
dans la variable Personnage.
C'est-à-dire qu'on appliquerait

117
00:07:08,249 --> 00:07:10,609
la méthode <i>rencontrer</i> du voleur.

118
00:07:11,606 --> 00:07:14,076
Le fait de pouvoir mettre un Voleur 
dans un Personnage

119
00:07:14,076 --> 00:07:16,412
est une conséquence directe de l'héritage.

120
00:07:16,412 --> 00:07:19,720
Par contre, 
le fait que la méthode à invoquer

121
00:07:19,720 --> 00:07:22,062
soit choisie pendant l'exécution

122
00:07:22,062 --> 00:07:24,256
en fonction de la nature réelle 
des instances

123
00:07:24,256 --> 00:07:28,296
dépend de ce qu'on appelle
la résolution dynamique des liens.

124
00:07:29,084 --> 00:07:31,384
Voyons maintenant 
de quoi il s'agit concrètement.

125
00:07:32,222 --> 00:07:35,821
Revenons pour cela à notre exemple
précédent où nous avons substitué

126
00:07:35,821 --> 00:07:40,301
un objet de type sous-classe 
à une instance de type super-classe ici.

127
00:07:40,547 --> 00:07:43,317
Nous avons mis un Guerrier
dans un Personnage

128
00:07:43,317 --> 00:07:46,527
qui est le paramètre un de la méthode
<i>faire_rencontrer</i>

129
00:07:46,546 --> 00:07:49,343
et nous appelons la méthode <i>rencontrer</i>

130
00:07:49,343 --> 00:07:52,466
sur le Personnage en question.
Nous nous plaçons ici dans le contexte

131
00:07:52,466 --> 00:07:56,066
où notre hiérarchie de classe

132
00:07:57,169 --> 00:08:00,245
aurait deux méthodes rencontrer.
Une définie dans la super-classe

133
00:08:00,245 --> 00:08:02,585
qui est la méthode par défaut,
la méthode générale

134
00:08:02,591 --> 00:08:05,811
et une spécialisée pour les guerriers
dans la sous-classe Guerrier.

135
00:08:06,264 --> 00:08:10,674
Laquelle des deux méthodes rencontrer
va ici être appelée ?

136
00:08:17,557 --> 00:08:20,242
En y regardant de plus près,
on se rend compte

137
00:08:20,242 --> 00:08:24,083
qu'il existe deux points de vue possible.
Le premier consiste à dire que

138
00:08:24,083 --> 00:08:28,738
le paramètre est de type Personnage, il faudra aller
chercher la méthode <i>rencontrer</i>

139
00:08:28,738 --> 00:08:32,027
dans la classe Personnage.
Le second qui consiste à dire

140
00:08:32,027 --> 00:08:36,317
on a mis dans Personnage un Guerrier
et c'est dans la classe Guerrier

141
00:08:36,317 --> 00:08:38,635
qu'il faut aller chercher 
la méthode <i>rencontrer</i>.

142
00:08:38,635 --> 00:08:41,166
Il y a donc un point de vue 
qui consiste à dire

143
00:08:41,166 --> 00:08:43,258
que c'est le type de la variable

144
00:08:44,058 --> 00:08:48,464
qui prime pour le choix de la méthode
et un second point de vue

145
00:08:48,464 --> 00:08:49,627
qui consiste à dire

146
00:08:49,627 --> 00:08:53,278
c'est le type de l'objet effectivement
contenu dans la variable

147
00:08:53,278 --> 00:08:55,718
qui va être décisif 
pour le choix de la méthode.

148
00:08:55,718 --> 00:08:58,851
En C++, si l'on ne fait rien 
de particulier,

149
00:08:58,851 --> 00:09:02,535
c'est le type de la variable qui détermine
la méthode à exécuter.

150
00:09:02,535 --> 00:09:05,459
On a ce qu'on appelle
la résolution statique des liens

151
00:09:05,459 --> 00:09:09,759
ce qui veut dire qu'ici 
c'est la méthode <i>rencontrer</i> de Personnage

152
00:09:11,495 --> 00:09:14,893
qui va être appliquée.
On parle de résolution statique

153
00:09:14,893 --> 00:09:18,342
parce que le choix de la méthode
peut se faire statiquement avant même

154
00:09:18,342 --> 00:09:20,940
que le programme ne s'exécute
pendant la compilation.

155
00:09:20,940 --> 00:09:25,170
Dans cette phase là, on peut déjà savoir
de quel type est une variable

156
00:09:25,170 --> 00:09:28,443
et sur la base de ce type, 
choisir la méthode à appliquer.

157
00:09:29,168 --> 00:09:33,024
Dans certains cas, il peut cependant 
sembler plus naturel d'avoir recours

158
00:09:33,024 --> 00:09:35,172
à un autre type de résolution,
ce que l'on appelle

159
00:09:35,172 --> 00:09:37,532
la résolution dynamique des liens.

160
00:09:37,540 --> 00:09:42,212
Une résolution où le choix de la méthode
va se faire à l'exécution ou dynamiquement

161
00:09:42,212 --> 00:09:46,195
en fonction de l'objet réellement contenu
dans la variable,

162
00:09:46,195 --> 00:09:49,358
ce qui voudrait dire ici 
que l'on pourrait faire en sorte

163
00:09:49,358 --> 00:09:55,608
que la méthode <i>rencontrer</i>
soit celle de l'objet réellement stocké

164
00:09:55,658 --> 00:09:57,734
dans la variable de type Personnage.

165
00:09:58,285 --> 00:10:01,761
La résolution statique des liens 
est ce qui se met en œuvre

166
00:10:01,761 --> 00:10:04,651
par défaut en C++ si l'on ne fait rien
de particulier.

167
00:10:05,959 --> 00:10:09,823
Il est cependant possible d'avoir recours
à la résolution dynamique des liens

168
00:10:09,823 --> 00:10:13,683
mais pour cela, il faut faire intervenir
deux ingrédients particuliers.

169
00:10:13,690 --> 00:10:16,269
Le premier est qu'il faut que les méthodes

170
00:10:16,269 --> 00:10:18,513
que l'on souhaite voir 
résolues dynamiquement

171
00:10:18,513 --> 00:10:21,120
soient déclarées avec une étiquette
particulière,

172
00:10:21,120 --> 00:10:24,990
que ce soit des méthodes virtuelles
et il faut qu'elle puisse s'exercer

173
00:10:24,994 --> 00:10:29,008
sur les instances réelles des objets
via des références ou des pointeurs.

174
00:10:29,808 --> 00:10:33,988
Notre petit exemple du début fait donc
de la résolution statique des liens ici.

175
00:10:34,001 --> 00:10:37,537
Pour qu'il fasse de la résolution dynamique,
il faudrait que la méthode <i>rencontrer</i>

176
00:10:37,537 --> 00:10:41,597
soit virtuelle et il faudrait 
qu'elle s'applique non pas à un objet

177
00:10:41,644 --> 00:10:45,113
mais à une référence à cet objet
ou à un pointeur vers cet objet.

178
00:10:45,113 --> 00:10:48,181
Ce qui n'est pas le cas ici.
Nous avons bel et bien ici

179
00:10:48,181 --> 00:10:49,931
de la résolution statique.

180
00:10:50,408 --> 00:10:54,413
Les méthodes virtuelles et leur utilisation
au travers de référence et de pointeur

181
00:10:54,413 --> 00:10:57,743
vont faire l'objet de notre attention
dans la séquence suivante.
