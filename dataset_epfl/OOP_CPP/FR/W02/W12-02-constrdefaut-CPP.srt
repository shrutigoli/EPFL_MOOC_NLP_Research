1
00:00:03,918 --> 00:00:06,635
Nous allons dans cette nouvelle
séquence nous intéresser

2
00:00:06,635 --> 00:00:07,732
au constructeur par défaut.

3
00:00:07,732 --> 00:00:09,640
C'est à dire concrètement à deux choses.

4
00:00:09,640 --> 00:00:12,632
La première est : que se passe-t-il 
lorsqu'on déclare un objet

5
00:00:12,632 --> 00:00:15,242
sans lui associer 
aucune valeur d'initialisation.

6
00:00:15,242 --> 00:00:18,380
La deuxième chose est : que se passe-t-il
avec les classes dans lesquelles

7
00:00:18,380 --> 00:00:20,933
on a déclaré aucun constructeur explicite.

8
00:00:20,933 --> 00:00:23,014
Commençons par le premier point.

9
00:00:23,014 --> 00:00:25,660
Un constructeur par défaut est 
un constructeur qui

10
00:00:25,660 --> 00:00:28,982
soit n'a aucun paramètre 
- vous en voyez un exemple concret ici -

11
00:00:28,982 --> 00:00:33,468
soit un constructeur dont tous 
les paramètres ont des valeurs par défaut.

12
00:00:33,468 --> 00:00:36,202
Nous en verrons un exemple 
un petit peu plus loin.

13
00:00:36,202 --> 00:00:39,970
Concrètement, le fait que le constructeur 
n'ait pas de paramètre ou

14
00:00:39,970 --> 00:00:43,639
ait tous ses paramètres avec des valeurs
par défaut veut dire qu'il va pouvoir

15
00:00:43,639 --> 00:00:46,816
être invoqué sans spécifier 
de valeurs d'initialisation.

16
00:00:46,816 --> 00:00:51,537
Par exemple, lorsque je procède 
à une déclaration d'objet <i>Rectangle</i>

17
00:00:51,537 --> 00:00:56,599
comme ceci, je n'associe 
aucune valeur d'initialisation

18
00:00:56,599 --> 00:00:59,362
à cette variable r de type Rectangle.

19
00:00:59,362 --> 00:01:04,100
Ça veut dire concrètement que le travail 
d'initialisation va être pris en charge

20
00:01:04,100 --> 00:01:07,768
par un constructeur qui n'a besoin 
d'aucun paramètre pour fonctionner

21
00:01:07,768 --> 00:01:10,343
donc le constructeur par défaut.

22
00:01:10,343 --> 00:01:13,760
On peut imaginer que l'on souhaite 
mettre en œuvre trois façons possibles

23
00:01:13,760 --> 00:01:16,805
d'initialiser un rectangle 
dans la classe Rectangle.

24
00:01:16,805 --> 00:01:20,016
Ce qui veut dire que l'on anticipe 
la présence de trois constructeurs :

25
00:01:20,480 --> 00:01:24,543
un constructeur qui n'aurait besoin 
d'aucun paramètre et qui initialiserait

26
00:01:24,543 --> 00:01:28,820
par défaut la hauteur à 1 
et la largeur à 2 ;

27
00:01:28,820 --> 00:01:31,259
un deuxième constructeur 
qui lui n'est pas par défaut

28
00:01:31,259 --> 00:01:32,633
puisqu'il attend un paramètre.

29
00:01:32,633 --> 00:01:36,444
Il initialiserait par exemple la hauteur 
à la valeur fournie

30
00:01:36,444 --> 00:01:39,460
et la largeur à deux fois
la valeur fournie.

31
00:01:39,460 --> 00:01:43,268
Le troisième constructeur, 
tels qu'on les a toujours vu jusqu'ici,

32
00:01:43,518 --> 00:01:49,398
qui prendrait deux paramètres, qui n'est 
pas non plus un constructeur par défaut

33
00:01:49,398 --> 00:01:51,449
puisqu'il a une liste de paramètres non vide.

34
00:01:53,136 --> 00:01:56,756
Donc il initialiserait la hauteur avec 
la première valeur fournie

35
00:01:56,756 --> 00:01:58,382
et la largeur avec la seconde.

36
00:01:58,382 --> 00:02:02,112
Si l'on utilise une classe Rectangle 
où ces trois constructeurs cohabitent,

37
00:02:02,112 --> 00:02:06,326
on dispose donc désormais 
de trois façons possibles de déclarer

38
00:02:06,363 --> 00:02:09,831
initialiser un rectangle, 
un objet de type Rectangle.

39
00:02:10,771 --> 00:02:13,367
La première que je vous ai déjà montré 
et qui correspond

40
00:02:13,367 --> 00:02:16,846
à l'invocation du constructeur par défaut.

41
00:02:16,846 --> 00:02:23,443
La seconde qui correspondrait plutôt 
à une déclaration comme celle-ci,

42
00:02:23,443 --> 00:02:26,154
qui attend une valeur d'initialisation.

43
00:02:28,184 --> 00:02:32,452
Ce qui voudrait dire dans ce cas 
que l'on initialiserait la hauteur à 2

44
00:02:32,753 --> 00:02:34,993
et la largeur à 2 fois 2 donc 4.

45
00:02:36,083 --> 00:02:39,187
Et enfin, la dernière façon possible,

46
00:02:41,821 --> 00:02:44,829
qui déclare un rectangle 
en fournissant deux valeurs

47
00:02:47,399 --> 00:02:49,384
et donc qui correspondrait évidemment

48
00:02:49,384 --> 00:02:52,475
à l'invocation de ce constructeur-ci 
qui attend deux valeurs.

49
00:02:53,838 --> 00:02:57,343
Attention à une erreur classique de 
débutant si on examine la syntaxe

50
00:02:57,343 --> 00:02:59,534
que l'on a employée ici pour invoquer

51
00:02:59,534 --> 00:03:03,331
le constructeur à deux paramètres 
et celui à un paramètre.

52
00:03:03,618 --> 00:03:09,286
On pourrait tout à fait penser que pour 
appeler le constructeur sans paramètre

53
00:03:09,286 --> 00:03:12,529
il faudrait plutôt 
utiliser la syntaxe suivante.

54
00:03:12,926 --> 00:03:18,986
Déclarer notre rectangle r et en précisant
par une paire de parenthèses vides

55
00:03:19,268 --> 00:03:22,619
que l'on est en train 
d'invoquer ce constructeur.

56
00:03:22,619 --> 00:03:24,242
Or il n'en est rien.

57
00:03:24,242 --> 00:03:29,570
Cette syntaxe en C++ ne correspond pas 
à un appel de constructeur par défaut.

58
00:03:29,822 --> 00:03:33,998
Si vous voulez que le constructeur par 
défaut soit invoqué, il faut avoir recours

59
00:03:33,998 --> 00:03:37,132
à cette syntaxe là sans parenthèses ici.

60
00:03:37,132 --> 00:03:43,524
Cela étant, si vous écrivez ceci, 
le compilateur ne signalera aucune erreur.

61
00:03:43,524 --> 00:03:47,461
A votre avis, comment le compilateur 
interprète-t-il cette ligne de code ?

62
00:03:48,876 --> 00:03:51,718
Nous venons de voir qu'un constructeur 
par défaut est un constructeur

63
00:03:51,718 --> 00:03:54,778
que l'on peut invoquer sans fournir 
aucune valeur d'initialisation.

64
00:03:55,065 --> 00:03:57,953
C'est le cas des constructeurs qui ont 
une liste de paramètres vide.

65
00:03:57,953 --> 00:04:00,450
C'est aussi le cas des constructeurs 
dont tous les paramètres

66
00:04:00,450 --> 00:04:03,023
auraient une valeur par défaut. 
En voici un exemple.

67
00:04:03,203 --> 00:04:05,402
Comme pour des fonctions ou 
des méthodes quelconques,

68
00:04:05,402 --> 00:04:08,393
un constructeur peut parfaitement 
avoir des valeurs par défaut

69
00:04:08,393 --> 00:04:10,117
pour certains de ces paramètres, 
voir tous.

70
00:04:10,117 --> 00:04:13,364
Ce constructeur est un constructeur 
par défaut

71
00:04:13,578 --> 00:04:16,465
car tous ces paramètres 
ont une valeur par défaut.

72
00:04:16,485 --> 00:04:20,062
Petite parenthèse de rappel, 
une valeur par défaut est une valeur

73
00:04:20,074 --> 00:04:22,829
que l'on peut associer à un paramètre 
selon cette syntaxe

74
00:04:22,829 --> 00:04:25,499
dans le prototype de la fonction 
ou de la méthode.

75
00:04:25,499 --> 00:04:29,518
Lorsqu'une méthode ou une fonction 
a une valeur par défaut,

76
00:04:29,518 --> 00:04:30,906
cela veut dire que l'on peut

77
00:04:30,906 --> 00:04:34,056
invoquer la méthode ou la fonction 
sans fournir la valeur.

78
00:04:34,056 --> 00:04:36,339
Dans ce cas là, c'est la valeur
par défaut qui est prise.

79
00:04:36,339 --> 00:04:40,480
Donc ici, très concrètement, 
si je fais une déclaration d'un rectangle

80
00:04:44,782 --> 00:04:48,164
comme ceci, comme je n'ai fourni 
aucune valeur d'initialisation,

81
00:04:48,174 --> 00:04:51,118
on va chercher dans la classe 
un constructeur par défaut.

82
00:04:51,814 --> 00:04:54,960
C'est celui-ci car il est possible 
d'invoquer ce constructeur

83
00:04:54,960 --> 00:04:57,502
sans lui fournir de valeur, 
dans ce cas là il va prendre 1.

84
00:04:57,502 --> 00:05:00,667
Ce qui veut dire concrètement, 
que l'on va construire

85
00:05:00,667 --> 00:05:03,322
grâce à cet appel, un rectangle

86
00:05:05,005 --> 00:05:06,902
dont la valeur pour le champ hauteur

87
00:05:09,563 --> 00:05:13,820
serait la valeur ici donnée par défaut,
c'est à dire 1.

88
00:05:15,444 --> 00:05:18,166
Et dont la valeur pour le champ largeur

89
00:05:18,244 --> 00:05:21,163
vaudrait deux fois cette valeur par défaut
à savoir 2.

90
00:05:23,604 --> 00:05:26,729
Vous noterez au passage que le fait 
d'utiliser des valeurs par défaut

91
00:05:26,729 --> 00:05:30,549
pour les paramètres nous a permis 
d'écrire en un seul constructeur

92
00:05:30,549 --> 00:05:35,635
les deux constructeurs que nous avions 
ici à l'étape précédente.

93
00:05:35,635 --> 00:05:40,293
On écrit en un seul ce constructeur, 
invocable sans aucune valeur,

94
00:05:40,306 --> 00:05:42,843
et celui-ci qui est invocable 
avec une valeur.

95
00:05:43,542 --> 00:05:49,413
Ce constructeur peut en effet parfaitement
être invoqué de la façon suivante.

96
00:05:49,881 --> 00:05:52,682
On déclare une variable, 
mais cette fois-ci on précise

97
00:05:52,682 --> 00:05:54,822
une valeur autre que la valeur par défaut.

98
00:05:54,822 --> 00:05:57,354
Ce qui veut dire qu'on ne veux plus 
garder la valeur par défaut

99
00:05:57,354 --> 00:06:00,114
On utilise le constructeur à un paramètre
mais au lieu d'avoir

100
00:06:00,114 --> 00:06:02,684
la valeur par défaut pour C, 
on veut la valeur 5.

101
00:06:03,060 --> 00:06:08,379
On peut invoquer ce constructeur aussi 
bien selon cette syntaxe que celle-ci.

102
00:06:08,727 --> 00:06:11,306
Vous savez donc maintenant ce qu'est 
un constructeur par défaut.

103
00:06:11,532 --> 00:06:13,905
Intéressons-nous au deuxième
point de la séquence à savoir :

104
00:06:14,308 --> 00:06:18,049
Que se passe-t-il si une classe 
ne contient aucun constructeur

105
00:06:18,049 --> 00:06:20,047
explicitement programmé ?

106
00:06:20,725 --> 00:06:23,458
En fait, l'initialisation d'un objet 
est quelque chose de tellement important

107
00:06:23,458 --> 00:06:24,971
que l'on ne peut pas s'en passer

108
00:06:24,971 --> 00:06:28,926
du coup C++ même si vous ne précisez 
aucun constructeur dans une classe

109
00:06:28,926 --> 00:06:33,023
va en fournir un de base 
automatiquement généré.

110
00:06:33,363 --> 00:06:37,121
Ce constructeur par défaut, qui ne 
requiert aucune valeur d'initialisation,

111
00:06:38,395 --> 00:06:40,879
qui est automatiquement généré, est

112
00:06:40,879 --> 00:06:44,638
ce que l'on peut appeler un constructeur 
par défaut par défaut.

113
00:06:44,638 --> 00:06:48,768
Il est fournit par défaut si on ne fournit
aucun constructeur dans la classe

114
00:06:48,768 --> 00:06:51,399
et c'est évidemment un constructeur 
par défaut puisqu'il n'attend

115
00:06:51,399 --> 00:06:54,030
aucune valeur d'initialisation.

116
00:06:54,030 --> 00:06:56,661
Que va faire concrètement le constructeur 
par défaut par défaut ?

117
00:06:56,661 --> 00:06:59,222
Il va initialiser les attributs.

118
00:06:59,222 --> 00:07:03,283
Si ces attributs sont des objets 
alors pour les initialiser,

119
00:07:03,283 --> 00:07:07,592
il va utiliser les constructeurs 
par défaut associés à ces objets.

120
00:07:08,171 --> 00:07:15,335
Par contre si les attributs sont de type 
de base, ils resteront non initialisés.

121
00:07:15,335 --> 00:07:16,692
Prenons un exemple concret.

122
00:07:16,692 --> 00:07:20,343
Imaginons que j'écrive 
une classe Rectangle qui aurait

123
00:07:22,486 --> 00:07:27,329
pour attribut largeur et hauteur, 
de type de base comme tout à l'heure.

124
00:07:31,876 --> 00:07:36,056
On peut imaginer que ce rectangle, 
on souhaite lui associer

125
00:07:37,340 --> 00:07:42,104
un autre attribut qui serait cette fois 
un objet qui permettrait

126
00:07:42,104 --> 00:07:48,292
de modéliser par exemple la position 
du rectangle sur un écran par exemple.

127
00:07:48,846 --> 00:07:54,839
Si je procède à la déclaration d'un 
rectangle qui serait codé de cette façon.

128
00:07:57,744 --> 00:08:02,207
C'est possible, même s'il n'y a aucun
constructeur explicite dans la classe

129
00:08:03,431 --> 00:08:05,906
Ce qui veut dire qu'à ce moment là 
je vais invoquer

130
00:08:06,119 --> 00:08:08,386
le constructeur par défaut par défaut

131
00:08:08,390 --> 00:08:09,641
que fait ce constructeur ?

132
00:08:09,641 --> 00:08:13,067
Il utilise une version minimale 
d’initialisation qui va construire

133
00:08:13,067 --> 00:08:17,000
un objet où les champs largeur

134
00:08:20,534 --> 00:08:22,533
et les champs hauteur

135
00:08:22,871 --> 00:08:26,040
demeurent non initialisés

136
00:08:26,454 --> 00:08:28,083
car ils sont de type de base.

137
00:08:28,446 --> 00:08:31,378
Et où le champ position

138
00:08:33,498 --> 00:08:34,618
aurait une valeur

139
00:08:39,825 --> 00:08:43,784
donnée par le constructeur par défaut 
de la classe position s'il y en a un.

140
00:08:43,927 --> 00:08:45,236
On peut imaginer par exemple

141
00:08:45,236 --> 00:08:47,939
que la position soit une coordonnée
en deux dimensions que

142
00:08:47,939 --> 00:08:53,277
le constructeur par défaut de position 
ait initialisé cette position à 0 ; 0.

143
00:08:53,277 --> 00:08:57,804
Dans ce cas-ci on aurait ces valeurs-là
dans l'attribut position.

144
00:08:58,270 --> 00:09:06,951
Pour rappel on entend par type de base 
les types <i>int, double, char ou bool</i>

145
00:09:06,951 --> 00:09:12,614
Mais attention à propos des constructeurs
par défaut par défaut

146
00:09:13,136 --> 00:09:14,694
Ils ont la particularité suivante :

147
00:09:14,694 --> 00:09:20,205
dès que dans la classe on spécifie 
au moins un constructeur explicite,

148
00:09:20,205 --> 00:09:21,632
qu'il soit par défaut ou non,

149
00:09:21,632 --> 00:09:25,612
alors le constructeur par défaut 
par défaut n'est plus fourni.

150
00:09:28,220 --> 00:09:31,364
Ceci signifie concrètement que si 
dans une classe je spécifie

151
00:09:31,555 --> 00:09:35,890
un constructeur explicite qui n'est pas
un constructeur par défaut

152
00:09:35,890 --> 00:09:39,725
alors je ne peux plus construire
d'objet de cette classe

153
00:09:39,725 --> 00:09:44,045
sans initialiser, sans fournir de valeur
d'initialisation explicite

154
00:09:44,775 --> 00:09:46,225
pour les attributs.

155
00:09:46,225 --> 00:09:48,727
Ceci correspond typiquement
à quelque chose de voulu.

156
00:09:48,727 --> 00:09:51,489
Lorsqu'on se donne la peine de 
programmer un constructeur explicite

157
00:09:51,489 --> 00:09:54,251
on ne souhaite pas que C++ 
nous en glisse un par défaut

158
00:09:54,251 --> 00:09:57,014
sans qu'on le lui ait demandé.

159
00:09:57,265 --> 00:10:00,847
Nous allons voir un peu plus loin 
que C++2011 permet si on le souhaite

160
00:10:00,847 --> 00:10:03,079
d'éventuellement réactiver le constructeur

161
00:10:03,079 --> 00:10:07,382
par défaut par défaut et nous allons voir
selon quelle syntaxe il va être possible

162
00:10:07,382 --> 00:10:09,178
de le signifier au compilateur.

163
00:10:09,954 --> 00:10:13,946
Nous allons maintenant, sur des exemples
concrets, examiner différentes variantes

164
00:10:13,946 --> 00:10:16,281
de déclaration de constructeur
dans une même classe,

165
00:10:16,281 --> 00:10:19,727
et voir ce que ces variantes permettent
ou ne permettent pas de faire

166
00:10:20,010 --> 00:10:23,126
en terme de déclaration 
initialisation d'une instance.

167
00:10:23,424 --> 00:10:29,051
Dans la variante A la classe Rectangle
prévoit des attributs comme tout à l'heure

168
00:10:29,051 --> 00:10:30,535
pour la largeur et la hauteur.

169
00:10:30,545 --> 00:10:33,490
Prévoit éventuellement d'autres choses
mais ne prévoit

170
00:10:33,490 --> 00:10:36,102
aucun constructeur explicite
dans la classe.

171
00:10:36,400 --> 00:10:41,928
Dans la variante B, la classe Rectangle
prévoit un constructeur par défaut

172
00:10:42,170 --> 00:10:44,043
explicitement programmé.

173
00:10:44,668 --> 00:10:47,760
Ce constructeur a pour 
vocation d'initialiser

174
00:10:47,760 --> 00:10:49,892
les différents attributs à 0.

175
00:10:49,892 --> 00:10:55,535
Troisième variante, la variante C, 
dans cette variante, la classe Rectangle

176
00:10:55,535 --> 00:11:01,766
prévoit un constructeur dont tous les 
paramètres ont une valeur par défaut.

177
00:11:01,766 --> 00:11:05,037
Ce constructeur peut 
éventuellement être invoqué

178
00:11:05,037 --> 00:11:07,779
sans qu'on lui associe
de valeur d'initialisation

179
00:11:07,938 --> 00:11:11,581
et dans ce cas là, c'est 0 
qui est mis dans chacun des attributs.

180
00:11:11,581 --> 00:11:17,265
Il s'agit là donc d'un constructeur 
par défaut explicitement programmé.

181
00:11:17,265 --> 00:11:20,238
Enfin, dans la dernière variante 
la variante D,

182
00:11:20,238 --> 00:11:25,439
la classe Rectangle fournit 
un constructeur explicite qui attend

183
00:11:26,457 --> 00:11:31,683
deux valeurs d'initialisation, il n'y a 
donc aucun constructeur par défaut

184
00:11:31,683 --> 00:11:34,345
programmé explicitement
dans la classe Rectangle.

185
00:11:34,345 --> 00:11:37,009
Nous allons nous poser la question :

186
00:11:37,009 --> 00:11:40,686
pour chacune des variantes, 
quel est son constructeur par défaut ?

187
00:11:40,686 --> 00:11:45,002
Est-ce que cette syntaxe 
de déclaration est valide ?

188
00:11:45,002 --> 00:11:50,615
Est-ce que cette syntaxe alternative 
de déclaration/initialisation d'un objet

189
00:11:50,615 --> 00:11:53,078
de type Rectangle est valide ?

190
00:11:53,078 --> 00:11:56,365
Pour rappel, dans la variante A, 
voici quel était le schéma de la classe

191
00:11:56,365 --> 00:11:58,948
en terme de déclaration des constructeurs.

192
00:11:58,958 --> 00:12:02,925
Ici il n'est pas reprécisé la déclaration 
des attributs, qui est entendue

193
00:12:02,925 --> 00:12:05,102
pour toutes les variantes 
de la même façon.

194
00:12:05,532 --> 00:12:08,620
Ici dans la classe Rectangle, 
dans la variante A, il n'y avait

195
00:12:08,620 --> 00:12:11,917
aucun constructeur explicitement déclaré.

196
00:12:12,346 --> 00:12:17,646
Ceci signifie qu'en terme de constructeur
par défaut, dans la variante A

197
00:12:17,900 --> 00:12:21,417
puisqu'il n'existe aucun constructeur
explicitement spécifié,

198
00:12:21,417 --> 00:12:24,674
alors nous disposons du constructeur 
par défaut par défaut

199
00:12:24,674 --> 00:12:27,055
qui est automatiquement généré.

200
00:12:27,447 --> 00:12:31,215
Lorsque l'on procède à une déclaration 
de rectangle de cette façon,

201
00:12:31,215 --> 00:12:33,308
on ne précise
aucune valeur d'initialisation

202
00:12:33,308 --> 00:12:36,147
et comme il n'y a pas de constructeur
explicite dans ma classe Rectangle

203
00:12:36,147 --> 00:12:39,287
c'est le constructeur par défaut 
par défaut qui est invoqué

204
00:12:39,287 --> 00:12:44,063
or nous avons vu que ce constructeur 
initialisait les choses de façon minimale.

205
00:12:44,063 --> 00:12:46,666
Donc ici pour nos attributs 
largeur et hauteur,

206
00:12:48,032 --> 00:12:51,183
comme il s'agit d'attributs 
de type de base,

207
00:12:51,423 --> 00:12:54,514
c'était des <i>double</i>, 
le constructeur par défaut par défaut

208
00:12:55,124 --> 00:12:59,395
ne met aucune valeur d'initialisation
pour ces attributs.

209
00:12:59,711 --> 00:13:03,646
Au final donc notre rectangle r1 
est un rectangle dont les champs

210
00:13:03,646 --> 00:13:07,581
largeur et hauteur demeurent
non initialisées.

211
00:13:07,581 --> 00:13:11,517
L'objet existe mais ses attributs
ne sont pas initialisés.

212
00:13:11,517 --> 00:13:14,750
Comme dans une classe où il n'y a 
aucun constructeur explicite

213
00:13:14,750 --> 00:13:18,363
le seul constructeur utilisable est 
le constructeur par défaut par défaut.

214
00:13:18,363 --> 00:13:21,852
il ne peut être utilisé que selon 
cette syntaxe qui ne requiert

215
00:13:21,855 --> 00:13:24,038
aucune valeur d'initialisation.

216
00:13:24,366 --> 00:13:28,248
Par conséquent, toute tentative 
d'initialisation d'un objet en utilisant

217
00:13:28,248 --> 00:13:31,433
des valeurs d'initialisation 
est tout simplement illicite.

218
00:13:31,744 --> 00:13:37,174
Ceci donnera lieu concrètement à 
une erreur décelable à la compilation.

219
00:13:40,658 --> 00:13:43,356
Parlons maintenant du cas B.
Dans le cas B,

220
00:13:43,591 --> 00:13:46,716
nous disposions dans la classe Rectangle
d'un constructeur par défaut

221
00:13:46,716 --> 00:13:49,841
mais cette fois-ci explicitement déclaré.

222
00:13:49,841 --> 00:13:52,966
Il avait pour vocation d'initialiser 
la largeur et la hauteur à 0.

223
00:13:52,966 --> 00:13:56,737
Donc dans ce cas ci le constructeur
par défaut est le constructeur

224
00:13:56,737 --> 00:13:59,568
par défaut explicitement déclaré.

225
00:13:59,568 --> 00:14:02,407
Il est donc possible d'avoir recours 
à cette syntaxe qui ne requiert

226
00:14:02,407 --> 00:14:07,026
aucune valeur d'initialisation 
mais contrairement au cas précédent

227
00:14:07,026 --> 00:14:10,287
cette fois-ci le constructeur par défaut
qui est invoqué ici

228
00:14:10,287 --> 00:14:14,821
va proprement initialiser la largeur et 
la hauteur en leur mettant les valeurs 0.

229
00:14:14,821 --> 00:14:19,895
Vu qu'il n'y a dans la classe rectangle
aucun constructeur qui attend de valeurs

230
00:14:19,895 --> 00:14:25,493
en guise de paramètre cette façon 
de déclarer/initialiser un objet Rectangle

231
00:14:25,493 --> 00:14:28,731
demeure dans ce second cas illicite.

232
00:14:28,731 --> 00:14:31,531
Dans la variante C, un peu plus complexe
que les précédentes nous avons

233
00:14:31,531 --> 00:14:34,281
un constructeur explicitement programmé

234
00:14:34,281 --> 00:14:37,033
dont tous les paramètres 
ont une valeur par défaut.

235
00:14:37,033 --> 00:14:42,154
Ce qui veut dire concrètement 
que l'on peut invoquer ce constructeur

236
00:14:42,154 --> 00:14:45,229
désormais de trois façons possibles

237
00:14:45,956 --> 00:14:50,482
cette façon-ci qui veut dire que l'on est 
en train d'invoquer le constructeur

238
00:14:50,482 --> 00:14:52,532
en acceptant les valeurs par défaut.

239
00:14:52,618 --> 00:14:56,896
Ce qui veut dire que notre rectangle 
aura 0 et 0 en guise de valeur d'attribut.

240
00:14:56,896 --> 00:14:59,014
Selon cette seconde variante,

241
00:15:01,709 --> 00:15:07,312
qui signifie que l'on prend la valeur 2.5
pour la valeur du premier paramètre

242
00:15:07,557 --> 00:15:11,906
et que par contre on accepte la valeur 
par défaut 0 pour le second paramètre.

243
00:15:12,410 --> 00:15:20,135
Enfin dernière variante, il est également
possible de déclarer un rectangle

244
00:15:20,135 --> 00:15:22,703
en lui fournissant deux valeurs

245
00:15:23,518 --> 00:15:27,217
qui veut dire que désormais on prend
en guise de valeur de ce paramètre

246
00:15:28,161 --> 00:15:32,148
la valeur 2.5 et en guise de valeur 
de ce paramètre la valeur 3.4

247
00:15:33,044 --> 00:15:35,850
Il y a donc pour la variante C 
un constructeur par défaut

248
00:15:36,152 --> 00:15:38,067
qui est l'un des trois constructeurs.

249
00:15:39,369 --> 00:15:41,637
Celui qui est invocable selon 
cette syntaxe et qui donne

250
00:15:41,965 --> 00:15:44,289
les valeurs 0 aux différents attributs.

251
00:15:44,663 --> 00:15:48,116
Par conséquent cette ligne est clairement
licite et va correspondre

252
00:15:49,531 --> 00:15:51,389
à l'initialisation des attributs à 0.

253
00:15:52,029 --> 00:15:55,126
Cette ligne qui correspond 
à ce type d'appel est bien évidemment

254
00:15:55,126 --> 00:15:58,223
aussi licite et va permettre
ici dans ce cas,

255
00:15:58,223 --> 00:16:01,320
d'initialiser la largeur à 1
et la hauteur à 2.

256
00:16:01,320 --> 00:16:04,733
Pour la variante D, nous avions 
dans la classe un constructeur explicite

257
00:16:04,897 --> 00:16:06,752
qui n'est pas un constructeur par défaut.

258
00:16:06,752 --> 00:16:08,770
Sa liste de paramètres est non vide

259
00:16:08,770 --> 00:16:12,207
et ses paramètres n'acceptent pas 
de valeur par défaut.

260
00:16:12,207 --> 00:16:17,482
Nous avons également vu que dès l'instant
où on programme un constructeur explicite

261
00:16:17,482 --> 00:16:20,696
le constructeur par défaut
par défaut disparaît.

262
00:16:20,696 --> 00:16:23,934
Ce qui veut dire concrètement 
qu'il n'y a plus de constructeur

263
00:16:23,934 --> 00:16:26,619
par défaut du tout dans la variante D.

264
00:16:26,619 --> 00:16:31,961
Par conséquent une déclaration 
de cette nature devient du coup illicite.

265
00:16:31,961 --> 00:16:35,593
Bien sûr il est possible avec 
cette variante de déclarer/initialiser

266
00:16:35,639 --> 00:16:37,263
un rectangle comme ceci

267
00:16:37,263 --> 00:16:43,078
puisque le seul constructeur existant 
attend deux valeur d'initialisation.

268
00:16:43,078 --> 00:16:47,184
Au final, nous allons construire 
ici un rectangle comme tout à l'heure

269
00:16:47,184 --> 00:16:50,936
qui a une hauteur de 1 
et une largeur de 2.

270
00:16:51,177 --> 00:16:53,914
Nous avons illustrer au travers 
de la variante D qu'un constructeur

271
00:16:53,914 --> 00:16:57,351
par défaut par défaut n'existe plus 
dès lors que l'on définit

272
00:16:57,351 --> 00:17:01,053
un constructeur explicite dans la classe
qu'il soit par défaut ou non.

273
00:17:01,053 --> 00:17:04,393
Si l'on souhaite réactiver un constructeur
par défaut par défaut

274
00:17:04,393 --> 00:17:09,619
c'est possible en C++2011 et à ce moment
là il faut adhérer à la syntaxe suivante.

275
00:17:09,619 --> 00:17:13,474
On déclare dans la classe, 
le fait que le constructeur par défaut

276
00:17:13,474 --> 00:17:17,219
est la variante par défaut 
fournie par le compilateur.

277
00:17:17,219 --> 00:17:20,674
Si dans le cas de notre variante D
vue précédemment on souhaitait

278
00:17:20,674 --> 00:17:24,599
faire en sorte que le constructeur 
par défaut par défaut existe quand même

279
00:17:24,599 --> 00:17:26,374
alors qu'il avait disparu du fait
de la déclaration

280
00:17:26,374 --> 00:17:27,959
d'un constructeur explicite,

281
00:17:27,959 --> 00:17:31,514
eh bien il faut spécifier 
que l'on souhaite le réactiver.

282
00:17:31,514 --> 00:17:34,639
Notez bien que dans ce cas, 
eh bien c'est peu pertinent

283
00:17:34,639 --> 00:17:37,823
Pourquoi ? Parce que le constructeur 
par défaut par défaut, nous l'avons vu,

284
00:17:37,823 --> 00:17:40,349
n'initialisait pas les attributs 
de type de base.

285
00:17:40,349 --> 00:17:45,418
Il est toujours non souhaitable d'avoir
la possibilité de construire un objet

286
00:17:45,418 --> 00:17:49,209
où certains attributs sont 
non-initialisés évidemment.

287
00:17:49,209 --> 00:17:53,375
Cela étant, dans toutes les situations 
où il est pertinent de réactiver

288
00:17:53,375 --> 00:17:54,981
le constructeur par défaut par défaut

289
00:17:54,981 --> 00:17:56,885
typiquement lorsque les champs 
sont des objets,

290
00:17:56,885 --> 00:17:59,706
nous aurons recours à cette syntaxe.

291
00:17:59,706 --> 00:18:05,362
Réactiver une variante par défaut est en
réalité généralisable à d'autres méthodes.

292
00:18:05,362 --> 00:18:08,483
Nous allons voir d'autres exemples
dans les séquences suivantes.

293
00:18:08,982 --> 00:18:12,911
C'est aussi généralisable 
à la suppression d'une méthode

294
00:18:12,911 --> 00:18:15,240
auquel cas on utilisera
la syntaxe <i>= delete</i>.

295
00:18:15,240 --> 00:18:18,369
Par exemple, supposez que 
dans une classe donnée il existe

296
00:18:18,369 --> 00:18:22,835
une méthode particulière qui attend 
comme paramètre une valeur de type <i>double</i>.

297
00:18:23,225 --> 00:18:26,640
On sait qu'en C++, il est possible 
de mettre un <i>int</i> dans un <i>double</i>.

298
00:18:26,640 --> 00:18:29,583
Donc il est possible normalement 
d'appeler pas_d_int

299
00:18:29,583 --> 00:18:33,953
en lui fournissant en guise d'argument
une valeur entière.

300
00:18:33,953 --> 00:18:37,734
Si l'on veut désactiver cette possibilité,
c'est à dire forcer pas_d_int

301
00:18:37,734 --> 00:18:41,230
à être invoquée systématiquement 
avec un <i>double</i>,

302
00:18:41,230 --> 00:18:44,301
alors à ce moment là, 
on peut utiliser cette clause

303
00:18:44,301 --> 00:18:48,409
qui va faire un <i>delete</i> de la méthode 
invoquée avec un int et

304
00:18:48,409 --> 00:18:53,226
qui ne permettra plus l'invocation de la 
méthode pas_d_int avec une valeur entière

305
00:18:53,226 --> 00:18:54,385
en guise d'argument.

306
00:18:54,385 --> 00:18:58,335
Enfin notez qu'il est possible 
depuis C++2011 de faire en sorte

307
00:18:58,335 --> 00:19:02,207
qu'un constructeur invoque un autre 
constructeur de la même classe.

308
00:19:02,207 --> 00:19:04,112
Ceci se fait dans la section deux points.

309
00:19:04,112 --> 00:19:09,824
Donc ici le constructeur par défaut 
de la classe Rectangle appelle

310
00:19:09,824 --> 00:19:13,507
dans la section deux points 
le constructeur de la même classe

311
00:19:13,507 --> 00:19:17,259
qui a besoin de deux arguments.

312
00:19:17,690 --> 00:19:21,283
Ceci permettra au constructeur par défaut
d'initialiser la hauteur

313
00:19:21,283 --> 00:19:22,336
et la largeur à 0.

314
00:19:22,336 --> 00:19:24,880
Notez que cette façon de procéder 
est bien meilleure que celle

315
00:19:24,880 --> 00:19:27,706
que nous avons vu précédemment 
qui consistait à réactiver

316
00:19:27,706 --> 00:19:30,094
le constructeur par défaut par défaut.

317
00:19:30,094 --> 00:19:33,949
Nous avons vu qu'en effet réactiver 
le constructeur par défaut par défaut,

318
00:19:33,949 --> 00:19:37,329
lorsque les attributs sont de type de base
avait le désavantage

319
00:19:37,329 --> 00:19:40,264
de laisser ces attributs non initialisés.

320
00:19:40,264 --> 00:19:41,515
Ce qui ne sera pas le cas ici.

321
00:19:41,515 --> 00:19:44,282
Pour conclure sur l'initialisation, 
il faut savoir qu'en C++ 11,

322
00:19:44,290 --> 00:19:49,135
il est possible d'attribuer des valeurs 
par défaut aux attributs en le faisant

323
00:19:49,135 --> 00:19:52,167
directement à l'endroit
où ils sont déclarés.

324
00:19:52,276 --> 00:19:54,427
C'est à dire en dehors
de tout constructeur.

325
00:19:54,427 --> 00:19:59,008
S'il se trouve alors qu'un constructeur 
appelé ne modifie pas la valeur

326
00:19:59,008 --> 00:20:02,024
d'un attribut qui aurait une valeur 
par défaut ainsi spécifiée

327
00:20:02,024 --> 00:20:04,804
alors c'est cette valeur par défaut 
qui est utilisée.

328
00:20:04,804 --> 00:20:06,820
Imaginez par exemple que 
dans la classe Rectangle

329
00:20:06,820 --> 00:20:09,149
nous ayons déclaré un constructeur

330
00:20:10,889 --> 00:20:16,547
qui initialise uniquement le champ largeur
et qui ne fasse rien pour la hauteur.

331
00:20:18,460 --> 00:20:20,692
Si ce constructeur est invoqué
par une tournure

332
00:20:22,762 --> 00:20:29,470
de cette nature, l'objet r ainsi construit
aurait donc un champ largeur

333
00:20:30,936 --> 00:20:35,321
initialisé avec cette valeur par 
le constructeur par défaut, à savoir 5.

334
00:20:37,495 --> 00:20:44,216
Par contre, pour le champ hauteur puisque
rien n'est spécifié dans le constructeur

335
00:20:44,450 --> 00:20:46,360
on irait chercher cette valeur-ci

336
00:20:46,360 --> 00:20:52,514
spécifiée ici et donc la hauteur
vaudrait 0.

337
00:20:54,156 --> 00:20:59,022
Il est en fait préférable de passer par 
une initialisation via des constructeurs

338
00:20:59,022 --> 00:21:02,254
plutôt que par ce genre de facilité.

339
00:21:02,254 --> 00:21:06,254
Pourquoi ? Parce que ceci permet 
à la simple lecture des constructeurs

340
00:21:06,254 --> 00:21:10,753
d'avoir une vision explicite 
de tout ce qui doit être initialisé.

341
00:21:10,753 --> 00:21:14,029
On n'a pas besoin d'aller chercher 
dans une section de déclaration

342
00:21:14,029 --> 00:21:17,403
des attributs si il y a éventuellement 
des valeurs par défaut

343
00:21:17,403 --> 00:21:19,411
qui auraient été attribuées par ailleurs.

344
00:21:19,411 --> 00:21:23,143
Voilà ceci conclut notre séquence 
sur les constructeurs par défaut.

345
00:21:23,143 --> 00:21:26,924
Nous aurons l'occasion d'en reparler 
dans nos futures séquences sur l'héritage.

346
00:21:26,924 --> 00:21:30,000
En attendant vous allez découvrir d'autres
façons de construire des objets

347
00:21:30,000 --> 00:21:33,168
par exemple au travers 
de la construction de copie.
