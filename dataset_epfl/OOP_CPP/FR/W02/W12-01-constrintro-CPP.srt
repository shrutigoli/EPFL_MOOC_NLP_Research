1
00:00:04,116 --> 00:00:07,466
Dans les séquences vidéos précédentes,
vous avez appris à déclarer des classes

2
00:00:07,466 --> 00:00:10,674
et des instances de ces classes,
c'est-à-dire des objets.

3
00:00:10,674 --> 00:00:14,227
Par exemple, si vous voulez déclarer 
une instance « rect » de la classe « Rectangle »,

4
00:00:14,227 --> 00:00:18,466
vous écrivez simplement comme ceci :
« Rectangle rect ; »

5
00:00:18,466 --> 00:00:20,243
La question qu'on peut se poser maintenant

6
00:00:20,243 --> 00:00:22,020
c'est comment donner 
des valeurs à ces attributs,

7
00:00:22,020 --> 00:00:24,025
voire même comment 
initialiser, par exemple,

8
00:00:24,025 --> 00:00:26,332
les attributs hauteur et largeur

9
00:00:26,332 --> 00:00:29,078
de cette instance « rect »
de la classe « Rectangle ».

10
00:00:29,078 --> 00:00:32,775
Pour donner des valeurs,
on pourrait utiliser, comme on a vu,

11
00:00:32,775 --> 00:00:37,385
les manipulateurs « setHauteur », « setLargeur »,
c'est-à-dire affecter individuellement

12
00:00:37,396 --> 00:00:41,030
une valeur à chaque attribut 
comme par exemple ici,

13
00:00:41,030 --> 00:00:44,298
où on déclare l'instance « rect »
de la classe « Rectangle »,

14
00:00:44,298 --> 00:00:47,541
on utilise une variable auxiliaire « lu »
de type « double » pour pouvoir lire

15
00:00:47,541 --> 00:00:51,095
donc, ici, par exemple, la hauteur,
on affiche ici un message à l'utilisateur,

16
00:00:51,095 --> 00:00:55,553
on récupère depuis « cin » une valeur « lu »
dans la variable « lu »

17
00:00:55,553 --> 00:01:00,633
et puis donc, avec ce manipulateur
« setHauteur », on affecte la hauteur

18
00:01:00,635 --> 00:01:03,789
et puis de même, on demande la largeur,
on la lit dans « lu »

19
00:01:03,789 --> 00:01:06,335
et on l'appelle manipulateur « setLargeur »

20
00:01:06,335 --> 00:01:09,598
pour affecter donc la largeur 
de l'instance rect.

21
00:01:09,598 --> 00:01:12,119
Mais ceci est une très mauvaise solution

22
00:01:12,119 --> 00:01:14,252
parce que ça suppose 
que tous les attributs,

23
00:01:14,252 --> 00:01:16,189
puisqu'on doit bien initialiser 
tous les attributs,

24
00:01:16,189 --> 00:01:19,519
fassent soit partie de l'interface,
c'est-à-dire soit en public,

25
00:01:19,537 --> 00:01:22,322
ce qui est vraiment très mauvais 
du point de vue de l'encapsulation,

26
00:01:22,322 --> 00:01:26,741
de la conception orientée objet 
ou alors soit munis d'un manipulateur,

27
00:01:26,741 --> 00:01:29,328
ce qui casse aussi l'encapsulation

28
00:01:29,328 --> 00:01:30,918
puisque fait dépendre

29
00:01:30,918 --> 00:01:32,997
de la représentation interne 
de tous les attributs

30
00:01:32,997 --> 00:01:37,650
l'interface, c'est-à-dire avoir 
un manipulateur pour chaque attribut.

31
00:01:37,790 --> 00:01:41,317
Le but de l'encapsulation étant justement
de séparer clairement l'interface

32
00:01:41,317 --> 00:01:42,554
et l'implémentation.

33
00:01:42,554 --> 00:01:46,397
Si on avait pour chaque attribut
un manipulateur dans l'interface,

34
00:01:46,397 --> 00:01:49,069
on traduirait beaucoup trop 
dans l'interface

35
00:01:49,069 --> 00:01:51,504
les choix d'implémentation
et c'est dans ce sens là

36
00:01:51,504 --> 00:01:53,244
que ça casse l'encapsulation.

37
00:01:53,256 --> 00:01:55,040
De plus, au niveau conception,
cela implique

38
00:01:55,040 --> 00:02:00,070
que ce soit le programmeur utilisateur
de la classe qui soit obligé d'initialiser

39
00:02:00,070 --> 00:02:01,039
tous les attributs,

40
00:02:01,039 --> 00:02:02,799
qui doivent penser à initialiser 
tous les attributs

41
00:02:02,799 --> 00:02:06,999
et on a là, un risque d'oubli, 
un défaut majeur dans la conception.

42
00:02:07,004 --> 00:02:10,476
Normalement, c'est plutôt le programmeur
développeur de la classe

43
00:02:10,476 --> 00:02:15,496
qui devrait avoir la charge d'initialiser
les attributs ou en tout cas d'offrir

44
00:02:15,499 --> 00:02:17,555
une possibilité d'initialisation

45
00:02:17,555 --> 00:02:21,633
à quelques attributs bien choisis par 
ce programmeur développeur de la classe,

46
00:02:21,633 --> 00:02:23,927
ce n'est pas au programmeur 
utilisateur de la classe

47
00:02:23,927 --> 00:02:27,277
de penser à tous les attributs possibles
qui doivent être initialisés.

48
00:02:27,326 --> 00:02:31,756
Une autre solution, comme d'habitude,
consiste à créer une méthode spécifique

49
00:02:31,759 --> 00:02:35,436
pour la tâche que l'on veut faire.
Ici, c'est initialiser les attributs,

50
00:02:35,436 --> 00:02:39,586
donc créer une méthode spécifique
pour initialiser les attributs.

51
00:02:39,701 --> 00:02:44,531
Par exemple, on pourrait comme ceci
ajouter une méthode disons « init »

52
00:02:44,546 --> 00:02:48,902
qui initialiserait les deux attributs 
hauteur et largeur de notre rectangle

53
00:02:48,902 --> 00:02:52,917
et pour pouvoir le faire,
elle devrait recevoir une valeur, ici, « h »

54
00:02:52,917 --> 00:02:57,094
pour mettre dans la hauteur et une valeur,
ici, « L » pour mettre dans la largeur.

55
00:02:57,094 --> 00:03:01,050
Cette méthode « init » serait un peu 
comme un « set » à la fois hauteur

56
00:03:01,050 --> 00:03:04,815
et à la fois largeur de « set »
de tous les attributs

57
00:03:04,815 --> 00:03:07,146
pour initialiser d'un seul coup
tous les attributs

58
00:03:07,146 --> 00:03:09,216
qui ont besoin d'être initialisés.

59
00:03:09,220 --> 00:03:13,980
On l'utiliserait de la façon suivante :
en déclarant un « Rectangle rect ».

60
00:03:14,523 --> 00:03:18,921
On ferait appel à la méthode « init »
en lui passant deux valeurs

61
00:03:18,921 --> 00:03:23,991
par exemple 3.0 pour la hauteur
et 4.0 pour la largeur.

62
00:03:24,918 --> 00:03:27,520
Cette façon de faire est certainement 
une très bonne façon,

63
00:03:27,520 --> 00:03:31,188
c'est tellement une bonne façon,
qu'elle est déjà disponible

64
00:03:31,188 --> 00:03:32,915
en tant que tel en C++.

65
00:03:32,915 --> 00:03:34,765
C'est ce que l'on appelle 
les constructeurs.

66
00:03:34,765 --> 00:03:37,635
Les constructeurs sont 
ces méthodes particulières

67
00:03:37,638 --> 00:03:41,668
qui vont avoir la responsabilité 
d'initialiser la classe.

68
00:03:42,053 --> 00:03:45,013
Un constructeur est donc une méthode
qui est appelée automatiquement

69
00:03:45,013 --> 00:03:49,333
lors de la déclaration de chaque objet,
au début de vie de chaque instance.

70
00:03:49,436 --> 00:03:52,919
Son rôle est donc justement de faire 
ce qui doit être fait

71
00:03:52,919 --> 00:03:54,611
au début de la vie d'un objet.

72
00:03:54,611 --> 00:03:57,254
Comme par exemple, 
initialiser ses attributs.

73
00:03:57,254 --> 00:04:01,374
Pour déclarer un constructeur, 
il suffit simplement de déclarer comme ceci

74
00:04:01,383 --> 00:04:04,035
une méthode qui a le même nom 
que le nom de la classe.

75
00:04:04,035 --> 00:04:07,758
Ensuite, cette méthode peut recevoir 
si nécessaire des paramètres

76
00:04:07,758 --> 00:04:12,299
puis, on écrit comme ceci sa définition
comme toute méthode.

77
00:04:12,299 --> 00:04:14,593
Par exemple, dans le cas 
de la classe « Rectangle »,

78
00:04:14,593 --> 00:04:17,943
on pourrait déclarer le constructeur,
ici « Rectangle » -- c'est le même nom

79
00:04:17,943 --> 00:04:21,382
que le nom de la classe --
qui reçoit deux paramètres ici

80
00:04:21,382 --> 00:04:24,742
pour pouvoir initialiser 
la hauteur et la largeur.

81
00:04:25,546 --> 00:04:28,875
Les constructeurs sont des méthodes
presque comme les autres.

82
00:04:28,875 --> 00:04:33,199
Les différences, c'est qu'il n'y a pas 
de type de retour, on n'a pas noté « void »,

83
00:04:33,199 --> 00:04:38,147
on n'a rien noté devant
le prototype du constructeur,

84
00:04:38,147 --> 00:04:40,922
ça veut dire qu'il n'y a pas 
de type de retour.

85
00:04:40,922 --> 00:04:45,052
Le nom du constructeur doit être 
absolument le même nom

86
00:04:45,089 --> 00:04:46,628
que le nom de la classe

87
00:04:46,628 --> 00:04:50,865
et enfin, les constructeurs 
sont invoqués automatiquement

88
00:04:50,865 --> 00:04:54,405
lors de la déclaration 
d'une instance de la classe.

89
00:04:54,505 --> 00:04:57,263
Par exemple, si j'écris, même simplement,

90
00:04:57,263 --> 00:05:02,288
comme ceci, la déclaration 
d'une instance « rect » de la classe « Rectangle »

91
00:05:02,288 --> 00:05:07,854
et bien, ici il y a automatiquement
un appel, à ce que l'on verra plus tard,

92
00:05:07,854 --> 00:05:10,774
que l'on appelle 
le constructeur par défaut.

93
00:05:11,089 --> 00:05:13,822
Il y a automatiquement appel 
à un constructeur

94
00:05:13,822 --> 00:05:17,842
chaque fois qu'une instance est créée
que cet appel soit explicite ou non.

95
00:05:18,481 --> 00:05:20,681
Voilà pour les spécificités 
des constructeurs.

96
00:05:20,692 --> 00:05:24,750
Cependant, comme les autres méthodes,
les constructeurs peuvent être surchargés

97
00:05:24,750 --> 00:05:29,010
et éventuellement avoir des valeurs 
par défaut pour leurs paramètres.

98
00:05:29,271 --> 00:05:32,596
On y reviendra un peu plus tard
mais c'était simplement pour vous dire

99
00:05:32,596 --> 00:05:35,110
dès maintenant qu'il n'y a pas 
un seul constructeur

100
00:05:35,110 --> 00:05:38,524
puisqu'ils peuvent être surchargés.
On peut avoir plusieurs constructeurs

101
00:05:38,524 --> 00:05:42,020
qui ont le même nom, le nom de la classe
mais avec des paramètres différents.

102
00:05:42,020 --> 00:05:45,180
On parle *des* constructeurs de la classe.

103
00:05:45,853 --> 00:05:48,029
Revenons maintenant 
à notre exemple de départ

104
00:05:48,029 --> 00:05:51,139
où on va par exemple déclarer 
un seul constructeur,

105
00:05:51,149 --> 00:05:53,606
comment ceci s'écrirait concrètement ?

106
00:05:53,606 --> 00:05:56,650
On aurait la déclaration de la classe,
classe « Rectangle »

107
00:05:56,650 --> 00:06:02,560
avec toujours les attributs en privée
et puis, dans la partie publique

108
00:06:02,560 --> 00:06:05,100
puisque le constructeur doit être utilisé

109
00:06:05,103 --> 00:06:08,862
par les programmeurs utilisateurs 
de la classe et doit donc être accessible.

110
00:06:08,862 --> 00:06:11,680
Il est donc dans l'interface. 
On aurait donc ici un constructeur

111
00:06:11,680 --> 00:06:15,790
qui a donc le même nom 
que le nom de la classe ici

112
00:06:15,790 --> 00:06:21,382
et qui a pour but d'initialiser
les attributs hauteur et largeur

113
00:06:21,382 --> 00:06:26,591
en recevant des paramètres « h » 
pour l'affecter à la hauteur

114
00:06:26,591 --> 00:06:30,673
et « L » pour l'affecter à la largeur.
Dans la partie publique ici,

115
00:06:30,673 --> 00:06:34,243
on a le prototype 
et la définition du constructeur

116
00:06:34,249 --> 00:06:36,862
puis ensuite, on aurait
toutes les autres méthodes

117
00:06:36,862 --> 00:06:39,296
qu'on avait décidé d'avoir 
dans l'interface.

118
00:06:39,296 --> 00:06:42,191
A noter que du fait qu'on a maintenant
un constructeur,

119
00:06:42,191 --> 00:06:44,674
on va pouvoir passer les valeurs initiales

120
00:06:44,674 --> 00:06:47,850
lors de la construction 
de chaque instance de la classe « Rectangle ».

121
00:06:47,850 --> 00:06:50,266
Il n'est donc pas forcément nécessaire

122
00:06:50,266 --> 00:06:54,171
de garder maintenant des accesseurs,
des modificateurs à chacun des attributs.

123
00:06:54,171 --> 00:06:57,566
C'est un choix du programmeur 
de la classe « Rectangle »

124
00:06:57,566 --> 00:07:01,453
de décider si oui ou non,
on peut ensuite encore modifier

125
00:07:01,453 --> 00:07:03,736
ces attributs hauteur et largeur

126
00:07:03,736 --> 00:07:06,565
ou si simplement 
la valeur initiale suffit.

127
00:07:06,565 --> 00:07:09,076
Voyons maintenant comment 
les constructeurs sont appelés.

128
00:07:09,076 --> 00:07:11,246
On a dit qu'ils étaient appelés
automatiquement

129
00:07:11,246 --> 00:07:14,950
lors de la déclaration de chaque instance,
mais comment passer les paramètres ?

130
00:07:14,950 --> 00:07:17,060
Pour passer les paramètres,

131
00:07:17,060 --> 00:07:20,617
il suffit simplement, 
lors de la déclaration d'une instance

132
00:07:20,617 --> 00:07:23,787
d'une certaine classe,
de mettre entre parenthèses ici

133
00:07:23,787 --> 00:07:27,229
les différentes valeurs que l'on va passer
comme arguments

134
00:07:27,229 --> 00:07:30,915
aux paramètres 
du constructeur correspondant.

135
00:07:30,915 --> 00:07:33,094
Par exemple, dans la classe « Rectangle »,

136
00:07:33,094 --> 00:07:36,501
où l'on avait un constructeur 
avec deux paramètres,

137
00:07:36,501 --> 00:07:41,222
on va passer ici lors de la déclaration 
de l'instance « r1 » de la classe « Rectangle »

138
00:07:41,222 --> 00:07:45,298
entre parenthèses deux valeurs 
pour les paramètres

139
00:07:45,298 --> 00:07:48,732
donc respectivement hauteur et 
Largeur du constructeur

140
00:07:48,732 --> 00:07:51,952
que l'on avait déclaré précédemment.

141
00:07:51,952 --> 00:07:54,595
Le constructeur sert donc 
à initialiser les attributs.

142
00:07:54,595 --> 00:07:59,129
Mais qu'en est-il si les attributs 
d'une classe sont eux-mêmes des objets ?

143
00:07:59,129 --> 00:08:01,964
Prenons un exemple 
qui devra être amélioré plus tard

144
00:08:01,964 --> 00:08:03,862
quand on aura vu la notion d'héritage

145
00:08:03,862 --> 00:08:07,574
où on suppose qu'on a une « class
RectangleColore »

146
00:08:07,574 --> 00:08:11,397
qui contiendrait comme attribut, 
dans sa partie privée, un « rectangle »

147
00:08:11,397 --> 00:08:16,797
qui est donc lui-même une instance,
un objet de la classe « Rectangle »

148
00:08:16,800 --> 00:08:19,501
et qui contiendrait 
par exemple une « Couleur, »

149
00:08:19,501 --> 00:08:22,411
pour simplifier ici, on pourrait supposer
que « Couleur » est un type énuméré

150
00:08:22,411 --> 00:08:23,981
ou est un entier.

151
00:08:24,021 --> 00:08:28,061
Comment initialiser ici 
cet attribut « rectangle »

152
00:08:28,080 --> 00:08:29,663
de la classe « RectangleColore »

153
00:08:29,663 --> 00:08:32,725
puisque c'est lui même 
un objet d'une classe

154
00:08:32,725 --> 00:08:34,851
et il faudrait appeler le constructeur.

155
00:08:34,851 --> 00:08:37,621
Pour ça, on pourrait imaginer,
c'est une très mauvaise solution,

156
00:08:37,621 --> 00:08:41,709
écrire le constructeur de « RectangleColore »
on a donc le même nom ici

157
00:08:41,709 --> 00:08:44,824
que la classe « RectangleColore »
qui prendrait donc des paramètres

158
00:08:44,824 --> 00:08:48,376
hauteur et largeur 
pour pouvoir initialiser le rectangle

159
00:08:48,376 --> 00:08:52,098
et un paramètre « Couleur » pour pouvoir
initialiser l'attribut « couleur »

160
00:08:52,098 --> 00:08:58,376
et qui dans son corps, dans sa définition,
copierait un « Rectangle »

161
00:08:58,376 --> 00:09:02,966
qu'on aurait créé de façon anonyme 
qui reçoit le paramètre « h »

162
00:09:02,982 --> 00:09:09,134
et le paramètre « L » à son constructeur
et qui serait copié

163
00:09:09,134 --> 00:09:13,218
dans l'attribut « rectangle »
de la classe « RectangleColore »

164
00:09:13,218 --> 00:09:16,945
et puis, on pourrait initialiser 
l'attribut « couleur »

165
00:09:16,945 --> 00:09:20,355
en copiant la valeur de la « Couleur » reçue ici.

166
00:09:20,358 --> 00:09:24,277
Cette syntaxe, comme ceci, « Rectangle »
sans nom de variable ici

167
00:09:24,277 --> 00:09:28,447
au milieu de l'appel du constructeur,
est tout à fait licite.

168
00:09:28,447 --> 00:09:31,232
Cela crée ce que l'on appelle
une « instance anonyme »,

169
00:09:31,232 --> 00:09:33,410
-- elle n'est pas nommée --
de la classe « Rectangle ».

170
00:09:33,410 --> 00:09:37,460
Mais ça crée bien effectivement 
un « Rectangle » qui existe

171
00:09:37,462 --> 00:09:41,402
avec sa hauteur et sa largeur

172
00:09:41,402 --> 00:09:45,648
lequel sera donc recopié 
dans l'attribut « rectangle »

173
00:09:45,648 --> 00:09:49,072
d'une instance de la classe 
« RectangleColoree » comme ça

174
00:09:49,072 --> 00:09:53,052
qui serait créée et initialisée
par le constructeur.

175
00:09:53,052 --> 00:09:58,110
On voit bien qu'on aura deux « Rectangles » :
un premier « Rectangle » anonyme ici

176
00:09:58,110 --> 00:10:00,911
qui est initialisé 
par appel à son constructeur

177
00:10:00,911 --> 00:10:05,240
et un deuxième « Rectangle » ici
qui est l'attribut « rectangle »

178
00:10:05,240 --> 00:10:08,873
de l'instance 
que l'on est en train d'initialiser

179
00:10:08,873 --> 00:10:11,053
dans le constructeur de « RectangleColore ».

180
00:10:11,144 --> 00:10:12,503
C'est donc une très mauvaise solution

181
00:10:12,503 --> 00:10:14,809
à laquelle il va falloir trouver 
une alternative.

182
00:10:14,809 --> 00:10:18,627
Il faudrait que les classes 
qui ont des objets comme attributs

183
00:10:18,627 --> 00:10:22,652
puissent appeler directement
le constructeur de leurs attributs.

184
00:10:22,652 --> 00:10:24,791
Ici, par exemple, que « RectangleColore »

185
00:10:24,791 --> 00:10:28,365
appelle directement le constructeur 
de la classe « Rectangle »

186
00:10:28,365 --> 00:10:31,972
lors de l'initialisation 
de son attribut « rectangle »

187
00:10:31,972 --> 00:10:34,722
et ne pas passer comme ça 
par une copie intermédiaire.

188
00:10:34,726 --> 00:10:38,507
Autant mettre les choses au bon endroit,
plutôt que passer par une copie.

189
00:10:38,507 --> 00:10:41,132
Surtout si l'objet est très volumineux.

190
00:10:41,132 --> 00:10:45,926
Pour ça, le C++ offre ce que l'on appelle 
une « liste d'initialisation »

191
00:10:45,926 --> 00:10:47,598
dans les constructeurs.

192
00:10:47,598 --> 00:10:51,340
Le but de cette liste d'initialisation
est justement d'appeler

193
00:10:51,340 --> 00:10:54,987
les constructeurs des attributs [ qui sont des objets ] ;
et aussi d'initialiser les attributs

194
00:10:54,987 --> 00:10:57,838
qui ne sont pas des objets,
qui sont, ce que l'on appelle,

195
00:10:57,838 --> 00:10:59,972
des « types de base »
comme des « int » et des « double ».

196
00:10:59,972 --> 00:11:04,051
C'est une très bonne pratique 
que d'utiliser cette liste d'initialisation

197
00:11:04,051 --> 00:11:07,838
pour initialiser les attributs 
plutôt que de le faire

198
00:11:07,838 --> 00:11:10,021
dans le corps du constructeur.

199
00:11:10,681 --> 00:11:13,481
L'écriture générale d'une liste 
d'initialisation se fait

200
00:11:13,493 --> 00:11:17,134
de la façon suivante : 
entre l'entête du constructeur

201
00:11:17,134 --> 00:11:20,598
qui a donc le nom qui est le même nom
que le nom de la classe

202
00:11:20,598 --> 00:11:22,906
et puis ici, une liste 
d'éventuels paramètres

203
00:11:22,906 --> 00:11:26,460
entre cet entête et puis, la définition
du constructeur,

204
00:11:26,460 --> 00:11:29,848
nous allons mettre ici la liste 
d'initialisation

205
00:11:29,866 --> 00:11:34,825
qui commence par deux points (':')
et puis ensuite, chaque fois

206
00:11:34,825 --> 00:11:38,186
pour chaque attribut, nous allons avoir 
ici le nom de l'attribut

207
00:11:38,186 --> 00:11:41,658
suivi de la syntaxe similaire à celle
que l'on avait

208
00:11:41,658 --> 00:11:43,423
quand on déclare une instance,

209
00:11:43,423 --> 00:11:48,156
c'est-à-dire l'appel du constructeur
correspondant à chacun des attributs

210
00:11:48,156 --> 00:11:52,166
ici entre parenthèses, suivi d'une virgule
s'il y a plusieurs attributs.

211
00:11:52,166 --> 00:11:55,835
Et on recommence, comme ça, ainsi de suite
pour tous les attributs

212
00:11:55,835 --> 00:12:00,385
à appeler les constructeurs ici
avec la syntaxe de parenthèses.

213
00:12:00,514 --> 00:12:04,000
Donc si je reprends notre exemple 
de « RectangleColore »,

214
00:12:04,000 --> 00:12:08,120
avec pour rappel « RectangleColore »
qui a comme attribut

215
00:12:08,125 --> 00:12:13,705
un attribut qui s'appelle « rectangle », qui est
une instance, un objet, de la classe « Rectangle » ;

216
00:12:13,714 --> 00:12:18,759
je vous rappelle aussi que la classe 
« Rectangle » avait un constructeur

217
00:12:18,759 --> 00:12:23,255
qui était ici à deux paramètres 
pour initialiser la hauteur et la largeur ;

218
00:12:23,255 --> 00:12:27,615
et puis donc notre classe « RectangleColore »,
en plus de l'attribut « rectangle »

219
00:12:27,672 --> 00:12:32,002
elle a aussi un attribut « couleur ».
Donc le constructeur de « RectangleColore »,

220
00:12:32,011 --> 00:12:35,768
c'est ce qui nous intéresse ici,
va recevoir des paramètres

221
00:12:35,768 --> 00:12:38,534
pour pouvoir initialiser 
son attribut « rectangle »

222
00:12:38,534 --> 00:12:42,151
et puis des paramètres ici pour pouvoir
initialiser son attribut « couleur ».

223
00:12:42,151 --> 00:12:46,795
Et cette initialisation, il va la faire
dans ce qu'on appelle

224
00:12:46,795 --> 00:12:50,441
la « liste d'initialisation », ici,
qui commence par deux points (':')

225
00:12:50,441 --> 00:12:55,813
en appelant le constructeur de la classe
« Rectangle », qui prend deux paramètres ici,

226
00:12:55,813 --> 00:13:00,453
sur l'attribut « rectangle ».
Ici, ce que l'on met

227
00:13:00,453 --> 00:13:03,964
c'est le nom de l'attribut « rectangle »,
c'est le même nom

228
00:13:03,964 --> 00:13:06,970
ici bien sûr c'est cet attribut 
qu'on initialise,

229
00:13:06,970 --> 00:13:10,290
donc on met ici le nom de l'attribut « rectangle »
et avec une syntaxe

230
00:13:10,290 --> 00:13:13,403
comme si on avait déclarer une instance,

231
00:13:13,403 --> 00:13:15,996
comme si on avait initialisé 
une variable, ici

232
00:13:15,996 --> 00:13:19,617
l'appel au constructeur correspondant
de la classe « Rectangle ».

233
00:13:19,617 --> 00:13:23,017
Ensuite, la virgule pour séparer 
les différentes parties

234
00:13:23,024 --> 00:13:26,287
de la liste d'initialisation.
Et puis de même,

235
00:13:26,287 --> 00:13:30,071
on peut initialiser des attributs,
même si c'était un entier ou un double

236
00:13:30,071 --> 00:13:32,221
ici des attributs 
qui ne sont pas des objets

237
00:13:32,221 --> 00:13:35,974
avec donc toujours une syntaxe similaire ;
ici, entre parenthèses,

238
00:13:35,974 --> 00:13:40,764
la valeur que l'on veut passer 
à l'attribut en conservant toujours

239
00:13:40,769 --> 00:13:43,729
le même nom que les noms des attributs.

240
00:13:43,986 --> 00:13:49,726
Par exemple, si je veux déclarer
une instance « r » d'un « RectangleColore »

241
00:13:49,855 --> 00:13:54,975
en appelant ici son seul constructeur
qui prend trois paramètres ;

242
00:13:54,990 --> 00:14:03,166
par exemple, avec une hauteur à 3.5,
une largeur à 4.5

243
00:14:03,166 --> 00:14:08,726
et puis une « Couleur » qui par exemple
aurait pu être définie comme étant « rouge ».

244
00:14:08,728 --> 00:14:13,458
J'ai bien ici déclaration d'une instance
avec appel du constructeur.

245
00:14:13,458 --> 00:14:16,962
Ce que ça va faire,
c'est que ça va créer effectivement

246
00:14:16,962 --> 00:14:18,142
en mémoire

247
00:14:18,957 --> 00:14:26,387
une instance « r » de « RectangleColore »
lequel contient un attribut « rectangle » ici

248
00:14:26,487 --> 00:14:33,877
de type « Rectangle » qui a lui-même
sa hauteur et sa largeur.

249
00:14:33,877 --> 00:14:37,947
Puis, un deuxième attribut « couleur »
de type « Couleur ».

250
00:14:38,044 --> 00:14:45,184
Lors de l'appel à ce constructeur,
on va se brancher ici

251
00:14:45,184 --> 00:14:50,353
pour exécuter la « section 
deux points (':') » qui va appeler

252
00:14:50,353 --> 00:14:57,077
le constructeur de l'attribut « rectangle »
qui est une instance de la classe « Rectangle »

253
00:14:57,077 --> 00:15:04,847
auquel on passe le paramètre « h », 3.5 ici,
qui va passer au constructeur de « rectangle »

254
00:15:05,198 --> 00:15:10,058
pour donc initialiser 
la valeur de la « hauteur »

255
00:15:10,553 --> 00:15:17,209
de l'attribut « rectangle » de l'instance « r »
de la class « RectangleColore ».

256
00:15:17,259 --> 00:15:23,139
De même ici, le 4.5, c'est-à-dire,
le paramètre « L » de ce constructeur

257
00:15:23,158 --> 00:15:27,258
dans l'exécution de cette liste 
d'initialisation va passer au constructeur

258
00:15:27,304 --> 00:15:32,282
comme deuxième paramètre au constructeur
de l'instance attribut « rectangle »

259
00:15:32,282 --> 00:15:40,782
de la classe « Rectangle ». 
Ici, on l'initialisera à la valeur 4.5 ;

260
00:15:40,885 --> 00:15:46,721
et puis le dernier paramètre ici « rouge »
qui passe comme « Couleur »

261
00:15:46,721 --> 00:15:51,706
va ici, dans cette section d'une liste
d'initialisation,

262
00:15:51,706 --> 00:15:54,903
initialiser l'attribut « couleur » directement.

263
00:15:55,633 --> 00:15:58,882
L'utilisation de cette section 
qui commence par « : »

264
00:15:58,882 --> 00:16:02,578
que l'on appelle la liste d'initialisation
est extrêmement recommandée.

265
00:16:02,578 --> 00:16:06,319
Elle permet d'abord comme on l'a vu 
tout à l'heure d'éviter de faire des copies

266
00:16:06,319 --> 00:16:10,165
de tous les attributs qui sont des objets,
des instances, d'autres classes.

267
00:16:10,165 --> 00:16:13,685
Ensuite, elle permet de regrouper 
de façon compacte et très lisible

268
00:16:13,691 --> 00:16:16,012
l'initialisation de l'ensemble 
des attributs.

269
00:16:16,012 --> 00:16:19,017
Enfin, elle donne une valeur initiale
dès le départ

270
00:16:19,017 --> 00:16:22,877
avant même la construction de l'objet
à chacun des attributs.

271
00:16:22,898 --> 00:16:26,452
Bien sûr, ces initialisations 
peuvent ensuite être réutilisées

272
00:16:26,452 --> 00:16:28,969
éventuellement modifiées dans le corps
du constructeur

273
00:16:28,969 --> 00:16:30,792
mais ceci est extrêmement rare.

274
00:16:30,792 --> 00:16:34,509
Je l'illustre ici sur le transparent
car c'est quelque chose qui est possible

275
00:16:34,509 --> 00:16:37,856
même si c'est quelque chose que vous allez
certainement très rarement faire.

276
00:16:37,856 --> 00:16:41,618
Par exemple, dans le constructeur 
de la classe « Rectangle » ici

277
00:16:41,618 --> 00:16:46,258
où l'on reçoit les deux paramètres
pour initialiser la hauteur et la largeur,

278
00:16:46,258 --> 00:16:49,768
on aurait dans la liste d'initialisation
initialisé la hauteur

279
00:16:49,768 --> 00:16:54,151
ce serait mieux d'initialiser 
avec la virgule ici la largeur,

280
00:16:54,151 --> 00:16:57,255
mais on ne l'a pas fait dans cet exemple
pour vous montrer

281
00:16:57,255 --> 00:17:01,271
que justement la largeur n'est pas 
initialisée dans cette portion

282
00:17:01,271 --> 00:17:05,307
du constructeur.
A partir de cet endroit-là,

283
00:17:05,307 --> 00:17:07,127
la valeur est indéfinie,

284
00:17:07,133 --> 00:17:10,973
puis, dès que l'on affecte 
une valeur à la largeur,

285
00:17:10,975 --> 00:17:14,755
évidemment, elle va avoir 
cette valeur que l'on affecte

286
00:17:14,755 --> 00:17:19,975
mais il faut bien comprendre 
qu'on a une section du constructeur

287
00:17:19,987 --> 00:17:23,437
où la largeur n'est pas initialisée.
C'est aussi une des raison

288
00:17:23,437 --> 00:17:26,628
pour lesquelles on recommande d'utiliser
la « section deux points (':') »

289
00:17:26,628 --> 00:17:29,189
qui est exécutée tout de suite, 
dès le départ

290
00:17:29,189 --> 00:17:33,961
avant même de rentrer dans le corps
du constructeur. Et donc, à ce stade,

291
00:17:33,961 --> 00:17:35,380
tout de suite, dès le départ,

292
00:17:35,380 --> 00:17:38,133
avant que l'on commence le corps
du constructeur ici,

293
00:17:38,133 --> 00:17:41,933
on a initialisé la hauteur 
avec la valeur « h ».

294
00:17:42,690 --> 00:17:47,360
Si l'on suit les conseils,
notre programme ressemblerait à ceci

295
00:17:47,395 --> 00:17:52,132
dans la déclaration de la classe « Rectangle »
dans son interface, on va offrir ici

296
00:17:52,132 --> 00:17:56,352
un constructeur qui prend deux paramètres
« h » et « L » pour initialiser

297
00:17:56,388 --> 00:18:00,390
dans la section liste d'initialisation
qui commence par « : »

298
00:18:00,390 --> 00:18:05,349
directement la hauteur avec la valeur « h »
et la largeur avec la valeur « L »,

299
00:18:05,349 --> 00:18:08,592
et le corps du constructeur 
se retrouve vide.

300
00:18:08,592 --> 00:18:11,999
C'est quelque chose qui est assez fréquent
dans les constructeurs en C++

301
00:18:11,999 --> 00:18:15,393
car on a cette section justement 
liste d'initialisation

302
00:18:15,393 --> 00:18:17,798
qu'il est recommandé d'utiliser.

303
00:18:17,798 --> 00:18:21,704
A noter ici un complément,
maintenant on a, du coup,

304
00:18:21,704 --> 00:18:24,865
comme ici on a forcément
un nom d'attribut

305
00:18:24,865 --> 00:18:29,015
et ici forcément un nom de paramètre
puisqu'on va passer un paramètre

306
00:18:29,072 --> 00:18:34,542
à un attribut, de la même façon ici
un attribut largeur et le paramètre L,

307
00:18:34,568 --> 00:18:38,628
il n'y a plus de problèmes de masquage
et d'ambiguïtés de noms

308
00:18:38,696 --> 00:18:46,156
et on pourrait tout à fait nommer ici
nos paramètres hauteur et largeur

309
00:18:46,163 --> 00:18:54,373
et écrire quelque chose comme ici,
« hauteur(hauteur), largeur(largeur) »

310
00:18:54,373 --> 00:18:58,525
Il n'y a plus du tout d'ambiguïtés ici.
Ce mot hauteur fait bien référence

311
00:18:58,525 --> 00:19:04,981
à l'attribut hauteur alors que ce mot
hauteur est forcément ici

312
00:19:04,981 --> 00:19:07,840
un paramètre, une valeur 
reçu de l'extérieur

313
00:19:07,840 --> 00:19:12,440
de la même façon, ce mot largeur ici
fait forcément référence

314
00:19:12,468 --> 00:19:18,602
à l'attribut largeur et ce mot largeur ici
fait forcément référence ici

315
00:19:18,602 --> 00:19:20,968
au paramètre largeur.
C'est donc une syntaxe

316
00:19:20,968 --> 00:19:23,913
que l'on peut rencontrer 
dans plusieurs constructeurs

317
00:19:23,913 --> 00:19:26,063
dans plusieurs programmeurs
écrits de cette façon-ci

318
00:19:26,063 --> 00:19:30,484
en donnant le même nom aux paramètres
que le nom aux attributs

319
00:19:30,484 --> 00:19:34,841
qu'ils doivent initialiser puisque
dans la section d'initialisation,

320
00:19:34,841 --> 00:19:37,691
il n'y a plus d'ambiguïtés,
il n'y a plus de masquage.

321
00:19:38,735 --> 00:19:41,209
Voilà ceci termine 
cette séquence introductive

322
00:19:41,209 --> 00:19:44,286
sur les constructeurs en général.
Il nous reste encore plusieurs choses

323
00:19:44,286 --> 00:19:48,249
à vous raconter comme par exemple,
ce qu'est le constructeur par défaut.

324
00:19:48,249 --> 00:19:52,130
Là, il n'y a qu'un constructeur par défaut
on dit bien le constructeur par défaut

325
00:19:52,130 --> 00:19:55,738
et puis vous parler aussi du 
constructeur de copies et enfin,

326
00:19:55,738 --> 00:19:58,670
dans une dernière séquence vidéo,
voir ce qui se passe

327
00:19:58,670 --> 00:20:00,650
lorsque l'on a terminé d'utiliser l'objet ;

328
00:20:00,650 --> 00:20:02,950
qu'est-ce qui se passe 
en fin de vie de l'objet.
