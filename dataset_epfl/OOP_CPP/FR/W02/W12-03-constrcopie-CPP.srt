1
00:00:04,082 --> 00:00:07,272
Nous allons dans cette séquence-ci
nous intéresser à un autre constructeur

2
00:00:07,272 --> 00:00:10,572
particulier, le constructeur de copie,
c'est-à-dire que nous allons regarder

3
00:00:10,572 --> 00:00:14,572
ce qui se passe lorsqu'un objet
est initialisé avec une copie

4
00:00:14,584 --> 00:00:17,194
d'un autre objet de la même classe.

5
00:00:17,194 --> 00:00:21,194
C++ offre en effet le moyen de faire
des copies d'instances, comme par exemple

6
00:00:21,194 --> 00:00:25,774
ici où nous avons une première
instance r1 de la classe Rectangle

7
00:00:25,774 --> 00:00:29,054
qui aurait été initialisée avec
un constructeur usuel, ici à deux

8
00:00:29,054 --> 00:00:33,054
paramètres, et qui donnerait
la situation suivante en mémoire.

9
00:00:35,219 --> 00:00:43,089
Initialisé donc avec les valeurs 12.3
et 24.5, et où nous avons une seconde

10
00:00:43,089 --> 00:00:48,339
instance r2, ici de la même classe
Rectangle, mais qui est initialisée

11
00:00:48,339 --> 00:00:50,899
avec une copie de r1.

12
00:00:50,899 --> 00:00:53,579
Ce qui donnerait donc
la situation suivante.

13
00:00:55,101 --> 00:01:00,851
Initialisé donc ici avec une copie des
valeurs, donc 12.3 pour la hauteur

14
00:01:00,851 --> 00:01:04,231
et 24.5 pour la largeur.

15
00:01:04,231 --> 00:01:08,791
Une première copie initiale
lors de la création de r2.

16
00:01:08,791 --> 00:01:13,701
Bien sûr r2 et r1 sont des instances
distinctes qui vivent séparemment

17
00:01:13,701 --> 00:01:18,411
dans la mémoire mais simplement r2
est initialisé lors de sa construction

18
00:01:18,411 --> 00:01:24,411
avec une copie des valeurs de r1, c'est
ce qu'on appelle le constructeur de copie.

19
00:01:24,794 --> 00:01:28,644
Voici un autre exemple où l'on fait appel
au constructeur de copie.

20
00:01:28,644 --> 00:01:30,854
C'est correct ?

21
00:01:31,901 --> 00:01:37,071
Oui, on a bien ici en effet une copie
puisque nous avons ici un passage

22
00:01:37,071 --> 00:01:41,341
par valeur, je vous rappelle que dans
les passages par valeur les arguments

23
00:01:41,341 --> 00:01:46,478
sont donc évalués et sont copiés dans
les paramètres de la fonction.

24
00:01:46,478 --> 00:01:54,628
Donc ici on a bien une copie de r1 qui va
donc être copiée dans r, paramètre

25
00:01:54,628 --> 00:02:01,018
de la fonction f, et il y a effectivement
lors de l'appel f de r1, appel

26
00:02:01,018 --> 00:02:04,188
au constructeur de copie
de la classe Rectangle.

27
00:02:04,188 --> 00:02:08,418
Il y a appel au constructeur de copie
parce que ici on a un passage par valeur,

28
00:02:08,418 --> 00:02:12,416
donc une copie, évidemment en cas
de passage par référence il n'y a pas

29
00:02:12,416 --> 00:02:15,546
de copie du tout et donc pas d'appel
au constructeur de copie.

30
00:02:15,546 --> 00:02:20,716
Le constructeur de copie a donc pour but
d'initialiser une instance avec une copie

31
00:02:20,716 --> 00:02:23,606
d'une autre instance de la même classe.

32
00:02:23,606 --> 00:02:27,076
Son prototype est donc parfaitement figé
puisqu'il s'agit d'un constructeur,

33
00:02:27,076 --> 00:02:31,756
donc son nom est le même nom que le nom
de la classe, mais comme il initialise

34
00:02:31,756 --> 00:02:35,706
avec une copie d'une autre instance
de la même classe il doit recevoir

35
00:02:35,706 --> 00:02:40,016
un seul paramètre ici, qui est donc
une autre instance de la même classe.

36
00:02:40,016 --> 00:02:44,646
On passera cette autre instance par
référence constante pour éviter de faire

37
00:02:44,646 --> 00:02:48,646
un passage par valeur qui appellerait
de nouveau une copie, auquel cas

38
00:02:48,646 --> 00:02:51,896
on n'en finirai pas, on ferait des copies
de copies de copies, et donc ici

39
00:02:51,896 --> 00:02:56,136
on fait bien un passage par référence.
Et puis le constructeur de copie

40
00:02:56,136 --> 00:03:00,586
ne modifiant pas l'instance qui est reçue,
mais il modifie l'instance

41
00:03:00,586 --> 00:03:03,766
qu'il est entrain d'initialiser, donc
comme il ne modifie pas l'instance

42
00:03:03,766 --> 00:03:06,316
qui est reçue, c'est
une référence constante.

43
00:03:06,316 --> 00:03:08,896
Donc par exemple, dans le cas
du Rectangle, on aurait ici

44
00:03:08,896 --> 00:03:12,896
un constructeur qui s'appellerait
Rectangle pour la classe Rectangle

45
00:03:12,896 --> 00:03:17,616
qui recevrait une autre instance
de la même classe Rectangle passée

46
00:03:17,616 --> 00:03:22,696
par référence constante et il utiliserait
bien sûr la section, la liste

47
00:03:22,696 --> 00:03:25,686
d'initialisation, la section qui
commence par deux points.

48
00:03:25,686 --> 00:03:30,396
Ici en initialisant la hauteur de
l'instance qu'il est entrain de créer

49
00:03:30,396 --> 00:03:36,586
à partir de la valeur de la hauteur de
l'autre instance qu'il a reçue

50
00:03:36,586 --> 00:03:40,586
comme paramètre, et puis donc
en initialisant la largeur de l'instance

51
00:03:40,586 --> 00:03:46,286
qu'il est entrain de créer à partir de
la copie de la largeur de l'autre instance

52
00:03:46,286 --> 00:03:48,766
qu'il a reçue en paramètre.

53
00:03:48,766 --> 00:03:54,926
Par exemple, si je reprends l'exemple
précédent où j'avais une instance r2

54
00:03:54,926 --> 00:04:01,546
qui était créée par copie de l'instance
r1, on aurait bien appel du constructeur

55
00:04:01,546 --> 00:04:08,596
de copie. Dans ce cas-là r1 va donc être
le paramètre autre ici et donc

56
00:04:08,596 --> 00:04:14,326
l'instance r2 va être initialisée et ici
ce sera donc bien r2 point hauteur

57
00:04:14,326 --> 00:04:21,146
qui recevra r1 point hauteur et r2 point
largeur qui recevra r1 point largeur.

58
00:04:21,549 --> 00:04:25,319
A noter qu'il est souvent pas du tout
nécessaire d'écrire explicitement

59
00:04:25,319 --> 00:04:29,319
le constructeur de copie puisque le 
compilateur C++ nous en fournit un

60
00:04:29,319 --> 00:04:30,069
par défaut.

61
00:04:30,069 --> 00:04:34,329
Il y a toujours un constructeur de copie
fourni par défaut, c'est ce qu'on appelle

62
00:04:34,332 --> 00:04:36,552
le constructeur de copie par défaut.

63
00:04:36,552 --> 00:04:40,972
Ce constructeur de copie effectue ce
qu'on appelle une copie de surface.

64
00:04:40,972 --> 00:04:47,132
C'est-à-dire qu'il va recopier un à un
les attributs du paramètre de l'autre

65
00:04:47,132 --> 00:04:51,132
instance qu'il a reçue pour initialiser
l'instance courante.

66
00:04:51,963 --> 00:04:56,133
Par exemple dans le cas du rectangle,
on n'aurait pas eu à écrire le constructeur

67
00:04:56,133 --> 00:05:00,724
précédent puisque dans ce cas simple
il est automatiquement généré par

68
00:05:00,724 --> 00:05:04,724
le compilateur, il n'est donc pas
nécessaire de l'écrire ce constructeur

69
00:05:04,724 --> 00:05:10,304
qui recopie l'attribut hauteur de l'autre
instance que l'on a reçue comme

70
00:05:10,304 --> 00:05:14,304
paramètre dans la hauteur de l'instance
que l'on est en train d'initialiser,

71
00:05:14,304 --> 00:05:20,304
la largeur de l'autre instance que l'on a
reçue dans l'instance courante et et cetera

72
00:05:20,304 --> 00:05:24,304
si l'on avait plusieurs autres attributs,
voilà comment est construit

73
00:05:24,304 --> 00:05:26,924
le constructeur de copie par défaut.

74
00:05:27,410 --> 00:05:30,590
Très souvent cette copie de surface suffit
et c'est pour ça que vous n'aurez

75
00:05:30,590 --> 00:05:34,020
dans la plupart des cas pas besoin
d'écrire explicitement un constructeur

76
00:05:34,020 --> 00:05:37,410
de copie, mais il y a quand même des cas,
en anticipant sur des exemples qui

77
00:05:37,410 --> 00:05:40,470
viendront bien plus tard dans le cours,
où il sera nécessaire d'exprimer

78
00:05:40,470 --> 00:05:44,470
notre propre constructeur de copie. 
Il faudra faire ce que l'on appelle

79
00:05:44,487 --> 00:05:45,957
une copie profonde.

80
00:05:45,957 --> 00:05:49,297
Je vous donne déjà en anticipant aussi sur
des concepts qui viendront par la suite,

81
00:05:49,297 --> 00:05:53,937
une règle d'or très importante, si vous
avez à toucher à l'un des trois

82
00:05:53,937 --> 00:05:57,387
que sont le constructeur de copie,
le destructeur et l'opérateur

83
00:05:57,387 --> 00:06:00,697
d'affectation, ce qu'on appelle
l'opérateur égal, alors vous devez

84
00:06:00,697 --> 00:06:04,697
au moins vous posez la question de savoir
s'il ne faut pas aussi redéfinir

85
00:06:04,697 --> 00:06:06,127
les deux autres.

86
00:06:06,439 --> 00:06:10,059
Voilà pour cette règle d'or qui anticipe
sur des concepts destructeur,

87
00:06:10,059 --> 00:06:13,479
opérateur d'affectation, qui seront
présentés plus tard dans le cours.

88
00:06:14,059 --> 00:06:18,609
Nous avons vu qu'un constructeur de copie
par défaut est automatiquement fourni.

89
00:06:18,609 --> 00:06:22,779
Il peut aussi y avoir des cas où l'on
souhaiterait ne pas autoriser la copie.

90
00:06:22,819 --> 00:06:27,949
Depuis C++ 2011 on peut donc explicitement
demander à ne pas avoir de constructeur

91
00:06:27,949 --> 00:06:32,669
de copie. Cela peut par exemple être utile
quand vous avez une classe qui contient

92
00:06:32,669 --> 00:06:37,709
beaucoup d'objets. Par exemple vous avez
fait un simulateur d'un monde physique

93
00:06:37,709 --> 00:06:41,709
et vous ne souhaitez pas copier tout
le monde avec tous ces objets donc

94
00:06:41,709 --> 00:06:46,989
vous voulez empêcher que l'on fasse
une copie de ce gros objet qui contient

95
00:06:46,989 --> 00:06:48,549
beaucoup, beaucoup de choses.

96
00:06:48,549 --> 00:06:54,039
Cela se fait donc avec une syntaxe un peu
particulière qui s'écrit donc <i>= delete</i>

97
00:06:54,039 --> 00:06:58,739
Pour ça, il suffit donc de mettre
<i>= delete</i> derrière le prototype

98
00:06:58,739 --> 00:07:00,059
du constructeur de copie.

99
00:07:00,059 --> 00:07:03,389
Par exemple, si on avait ici une classe
que l'on ne souhaite pas copier,

100
00:07:03,389 --> 00:07:06,879
que je vais appeler ici PasCopiable,
on aurait donc toutes les définitions

101
00:07:06,879 --> 00:07:10,769
comme d'habitude dans cette classe.
Mais pour éviter la copie, on ajouterait

102
00:07:10,769 --> 00:07:14,329
un constructeur de copie, donc c'est
bien un constructeur, ça a le même nom

103
00:07:14,329 --> 00:07:19,159
de méthode que le nom de la classe,
ici ça reçoit un paramètre par référence

104
00:07:19,159 --> 00:07:24,759
constante qui est de même type, ici qui 
est de la même classe, donc PasCopiable

105
00:07:24,759 --> 00:07:29,009
aussi, mais simplement ce que l'on rajoute
donc c'est que l'on rajoute ici

106
00:07:29,009 --> 00:07:31,599
à la fin du prototype <i>= delete</i>.

107
00:07:31,599 --> 00:07:35,599
Ça a pour effet qu'on ne peut
pas à ce moment-là appeler

108
00:07:35,599 --> 00:07:40,029
le constructeur de copie puisqu'il a été
détruit, <i>delete</i>, il n'existe plus.

109
00:07:40,029 --> 00:07:44,029
Donc cette case n'est pas copiable,
on peut simplement l'initialiser

110
00:07:44,029 --> 00:07:46,529
avec les autres constructeurs
éventuellement disponibles mais,

111
00:07:46,529 --> 00:07:49,069
en tout cas, ne pas créer
de copie d'instance.

112
00:07:49,354 --> 00:07:54,374
Voilà, ceci conclut donc cette séquence
sur les constructeurs de copie en C++.
