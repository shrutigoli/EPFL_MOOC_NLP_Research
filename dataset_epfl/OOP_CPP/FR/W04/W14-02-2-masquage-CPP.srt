1
00:00:04,456 --> 00:00:07,833
Dans certaines situations, des membres
tels que définis dans une super classe

2
00:00:07,833 --> 00:00:10,797
ne répondent pas de façon satisfaisante
aux besoins d'une sous-classe.

3
00:00:11,613 --> 00:00:14,925
La redéfinition ou le masquage sont 
des concepts qui permettent de faire face

4
00:00:14,925 --> 00:00:16,112
à ce genre de situations.

5
00:00:16,682 --> 00:00:19,369
Dans la séquence vidéo précédente, 
nous avions pris l'exemple

6
00:00:19,369 --> 00:00:22,946
d'une hiérarchie de personnages
dans un jeu et nous étions partis

7
00:00:22,946 --> 00:00:26,335
de l'hypothèse que tous ces personnages
avaient une façon commune

8
00:00:26,335 --> 00:00:28,238
de rencontrer un autre personnage.

9
00:00:28,701 --> 00:00:31,925
Tout personnage, lorsqu'il en rencontre
un autre, va par exemple le saluer.

10
00:00:32,493 --> 00:00:35,669
Supposons maintenant que cette façon
d'implémenter la méthode « rencontrer »

11
00:00:35,669 --> 00:00:38,670
soit satisfaisante pour la plupart 
des classes, mais pas pour toutes.

12
00:00:39,034 --> 00:00:42,589
Imaginons par exemple que le guerrier
soit un personnage un peu plus belliqueux

13
00:00:42,589 --> 00:00:45,930
que les autres, et lorsqu'il en rencontre
un autre, eh bien au lieu de le saluer

14
00:00:45,930 --> 00:00:47,335
il le frappe, par exemple.

15
00:00:47,686 --> 00:00:50,994
Nous sommes donc dans la situation
où nous envisageons deux implémentations

16
00:00:50,994 --> 00:00:55,258
possibles de la méthode « rencontrer » :
l'une pour les personnages non guerrier,

17
00:00:55,275 --> 00:00:58,760
un personnage non guerrier, lorsqu'il
en rencontre un autre, va le saluer,

18
00:00:58,872 --> 00:01:02,853
et l'autre pour un personnage guerrier,
qui, cette fois, lorsqu'il rencontre

19
00:01:02,853 --> 00:01:04,869
un autre personnage, eh bien, 
va le frapper.

20
00:01:05,761 --> 00:01:07,987
Qu'en est-il alors 
de notre première conception ?

21
00:01:09,350 --> 00:01:11,793
Faut-il alors reconcevoir 
toute la hiérarchie ?

22
00:01:12,383 --> 00:01:16,480
La réponse est heureusement non. 
Il suffira en fait de spécialiser

23
00:01:17,200 --> 00:01:19,802
la méthode « rencontrer »
dans la sous-classe « guerrier ».

24
00:01:20,492 --> 00:01:23,370
Nous allons donc revisiter notre 
hiérarchie de classes

25
00:01:23,370 --> 00:01:27,160
de la façon suivante : nous allons garder
notre méthode « rencontrer » générale

26
00:01:27,515 --> 00:01:30,877
qui est satisfaisante pour la plupart 
des classes dans la super classe

27
00:01:30,877 --> 00:01:34,222
« personnage », mais dans la classe 
« guerrier », nous allons spécialiser

28
00:01:34,222 --> 00:01:38,275
cette méthode en lui donnant une 
définition qui est plus satisfaisante

29
00:01:38,275 --> 00:01:39,667
pour la sous-classe en question.

30
00:01:41,018 --> 00:01:44,696
Dans le cas de notre exemple, on imagine
que la classe « guerrier » serait complétée

31
00:01:44,696 --> 00:01:46,941
ici par une méthode « frapper »,

32
00:01:46,941 --> 00:01:49,816


33
00:01:49,816 --> 00:01:52,703
qui serait invoquée

34
00:01:52,703 --> 00:01:57,900


35
00:01:57,900 --> 00:01:59,348
par la méthode « rencontrer ».

36
00:01:59,397 --> 00:02:02,861
La méthode « rencontrer » va donc être
désormais présente à deux niveaux

37
00:02:02,861 --> 00:02:05,682
de la hiérarchie : une fois dans
la super classe « personnage »

38
00:02:05,682 --> 00:02:08,025
et une autre fois dans 
la sous-classe « guerrier ».

39
00:02:08,450 --> 00:02:12,899
On parle de « masquage », parce que
désormais, pour un objet de type « guerrier »,

40
00:02:12,899 --> 00:02:15,335
c'est la méthode spécialisée 
qui va primer.

41
00:02:15,424 --> 00:02:19,447
On dit qu'elle va « masquer » la méthode
plus générale, qui s'applique à défaut

42
00:02:19,447 --> 00:02:21,533
d'autres méthodes plus spécialisées.

43
00:02:21,650 --> 00:02:25,359
Par exemple, si dans un programme je 
travaille avec un objet de type « magicien »,

44
00:02:25,359 --> 00:02:29,798


45
00:02:29,798 --> 00:02:32,661
et que je lui applique
la méthode « rencontrer »,

46
00:02:32,661 --> 00:02:35,524


47
00:02:35,524 --> 00:02:38,376
comme il n'y a pas de définition 
spécifique de la méthode « rencontrer »

48
00:02:38,376 --> 00:02:42,754
dans « Magicien », on va utiliser la méthode
héritée, à savoir la méthode « rencontrer »

49
00:02:42,754 --> 00:02:46,388
de « Personnage ».
Donc ici, cette méthode « rencontrer »

50
00:02:46,388 --> 00:02:48,028
sera la méthode générale.

51
00:02:48,647 --> 00:02:51,805
Par contre, si maintenant je veux 
appliquer la méthode « rencontrer »

52
00:02:52,321 --> 00:02:55,360
à un objet de type Guerrier,

53
00:02:55,360 --> 00:03:02,599


54
00:03:02,599 --> 00:03:05,548
eh bien, comme il existe dans la classe
« Guerrier » une méthode « rencontrer »

55
00:03:05,548 --> 00:03:08,973
spécialisée, c'est cette méthode 
qui ici va être appelée.

56
00:03:09,441 --> 00:03:13,011
Donc on va dire que cette méthode va 
masquer la méthode héritée plus générale.

57
00:03:13,542 --> 00:03:16,969
En programmation, de façon générale, 
on parle de « masquage » lorsqu'un

58
00:03:16,969 --> 00:03:18,941
identificateur en cache un autre.

59
00:03:19,468 --> 00:03:24,029
Dans le cadre d'une hiérarchie de classes,
on parlera de « masquage » lorsque le même

60
00:03:24,029 --> 00:03:29,297
nom d'attribut ou de méthode est utilisé
sur plusieurs niveaux de la hiérarchie.

61
00:03:31,758 --> 00:03:33,116
Dans le cadre de notre exemple,

62
00:03:34,765 --> 00:03:38,022
le même en-tête de méthode se retrouvait
à deux niveaux de la hiérarchie.

63
00:03:38,758 --> 00:03:42,055
Le masquage est peu courant et peu
recommandé pour les attributs.

64
00:03:42,272 --> 00:03:43,383
Il est source de confusion.

65
00:03:44,184 --> 00:03:46,216
Ce qu'il signifie concrètement, 
c'est la chose suivante :

66
00:03:46,692 --> 00:03:52,199
donc, nous aurions une super classe A, par
exemple dont hérite une sous-classe B.

67
00:03:52,577 --> 00:03:55,417
Avoir un masquage pour les attributs
signifie que, par exemple

68
00:03:55,417 --> 00:04:01,076
dans la classe A, il y aurait un attribut
se nommant « a » et que dans la classe B,

69
00:04:01,076 --> 00:04:04,257
également, on déclarerait
un attribut « a ».

70
00:04:04,374 --> 00:04:08,945
Si l'on utilise l'attribut « a » 
à l'intérieur d'un méthode de la classe B,

71
00:04:08,945 --> 00:04:11,512
eh bien, c'est cet attribut « a » 
qui va être utilisé.

72
00:04:11,847 --> 00:04:15,406
On dit que cet attribut « masque »
celui qui est hérité de plus haut.

73
00:04:15,626 --> 00:04:19,566
Il n'en demeure pas moins qu'un objet
de type B dispose désormais,

74
00:04:20,057 --> 00:04:22,109
avec cette façon de faire, 
de deux attributs :

75
00:04:22,397 --> 00:04:25,491
l'un qui lui est spécifique, 
qui s'appelle « a »,

76
00:04:25,562 --> 00:04:28,994
et l'un qui est hérité de A, 
qui s'appelle aussi « a »,

77
00:04:28,994 --> 00:04:30,535
d'où la source de confusion.

78
00:04:30,796 --> 00:04:35,073
Donc, le fait qu'on ait le même type ici
ne change rien, il suffit en fait

79
00:04:35,073 --> 00:04:39,075
que nous ayons le même nom d'attribut
pour avoir une situation de masquage.

80
00:04:39,356 --> 00:04:43,270
Et évidemment, dans le cas des attributs :
exemple à ne pas suivre.

81
00:04:43,955 --> 00:04:47,263
Par contre, comme nous l'avons vu dans
l'exemple précédent avec le masquage

82
00:04:47,481 --> 00:04:50,075
de la méthode « rencontrer » dans 
la sous-classe « Guerrier »,

83
00:04:50,634 --> 00:04:53,635
eh bien, le masquage de méthode
est très courant et très pratique :

84
00:04:53,994 --> 00:04:58,365
il permet d'adapter une hiérarchie
de classes à des situations spécifiques.

85
00:04:59,355 --> 00:05:02,692
Pour résumer, le masquage de méthode
dans une hiérarchie de classes,

86
00:05:02,692 --> 00:05:07,249
consiste à définir dans une sous-classe
une méthode portant le même nom

87
00:05:07,249 --> 00:05:10,198
qu'une méthode déjà présente
dans la super-classe.

88
00:05:10,858 --> 00:05:13,716
En termes de jargon, on dira 
que la méthode héritée

89
00:05:14,406 --> 00:05:17,810
est la méthode générale, 
celle dont pourront bénéficier

90
00:05:18,157 --> 00:05:21,372
par défaut toutes 
les éventuelles sous-classes

91
00:05:23,493 --> 00:05:24,779
qui ne la masquent pas.

92
00:05:25,149 --> 00:05:28,866
La méthode masquant celle héritée
est la méthode spécialisée

93
00:05:28,866 --> 00:05:32,492
qui va donc répondre spécifiquement
aux besoins de la sous-classe

94
00:05:32,492 --> 00:05:33,883
dans laquelle elle est présente.

95
00:05:34,362 --> 00:05:37,301
Comme évoqué précédemment, 
sur un objet de type « Guerrier »,

96
00:05:37,301 --> 00:05:39,997
c'est toujours la méthode 
spécialisée qui va primer ici.

97
00:05:40,614 --> 00:05:43,515
Donc, si l'on définit un objet 
de type « Guerrier »,

98
00:05:43,515 --> 00:05:45,787
et qu'on invoque sur cet objet 
la méthode « rencontrer »,

99
00:05:45,787 --> 00:05:49,173
ça n'est jamais la méthode « rencontrer »
de « Personnage » qui est invoquée,

100
00:05:49,228 --> 00:05:50,799
mais c'est la méthode
spécialisée.

101
00:05:51,569 --> 00:05:54,942
On ne fait ici qu'appliquer les règles
de résolution de portée usuelles,

102
00:05:54,942 --> 00:05:57,386
on résout toujours à la portée
la plus proche.

103
00:05:58,220 --> 00:06:01,981
Un objet de type « Guerrier » dispose en fait
de deux méthodes « rencontrer » :

104
00:06:01,981 --> 00:06:06,318
sa méthode spécialisée, et la méthode 
dont il a hérité de plus haut.

105
00:06:06,747 --> 00:06:10,442
Il est parfois utile, dans certaines 
situations, de quand même invoquer

106
00:06:10,442 --> 00:06:15,192
la méthode « rencontrer » héritée, même si
l'on a spécialisé cette méthode

107
00:06:15,192 --> 00:06:16,693
plus bas dans la hiérarchie.

108
00:06:16,974 --> 00:06:18,114
Comment procéder dans ce cas ?

109
00:06:18,906 --> 00:06:21,961
Par exemple, imaginons que l'on veuille
doter notre guerrier de quelques

110
00:06:21,961 --> 00:06:26,372
bonnes manières, et que l'on souhaite
qu'il salue le personnage qu'il rencontre

111
00:06:26,372 --> 00:06:28,617
avant de le frapper, ou l'inverse.

112
00:06:29,179 --> 00:06:32,181
Cela signifie que le guerrier commence 
par rencontrer le personnage

113
00:06:32,181 --> 00:06:35,276
comme le ferait n'importe quel autre
personnage de la hiérarchie,

114
00:06:35,276 --> 00:06:38,297
c'est à dire qu'il le salue, avant de lui
appliquer des traitements

115
00:06:38,297 --> 00:06:39,523
un peu plus spécifiques.

116
00:06:40,209 --> 00:06:42,951
Le code qui permet à un personnage 
d'en saluer un autre

117
00:06:42,951 --> 00:06:45,806
est déjà présent dans la méthode
« rencontrer » générale,

118
00:06:45,806 --> 00:06:48,185
c'est-à-dire la méthode 
« rencontrer » de Personnage.

119
00:06:48,832 --> 00:06:53,157
Il est inutile de dupliquer ce code
dans la méthode spécifique « rencontrer »

120
00:06:53,157 --> 00:06:53,854
de « Guerrier ».

121
00:06:54,321 --> 00:06:57,078
Ce qu'il nous faudrait faire donc,
est que dans la méthode spécialisée,

122
00:06:57,078 --> 00:07:00,679
il soit possible d'appeler la méthode 
générale déjà définie plus haut,

123
00:07:00,679 --> 00:07:02,632
puis d'appliquer des actions spécifiques.

124
00:07:03,946 --> 00:07:07,796
Pour accéder au membre masqué
d'un objet donné, on utilise

125
00:07:07,796 --> 00:07:11,827
une syntaxe particulière qui fait appel
à l'opérateur de résolution de portée (::).

126
00:07:12,339 --> 00:07:18,386
Par exemple, si dans la méthode
« rencontrer » définie de façon spécialisée

127
00:07:18,386 --> 00:07:22,250
dans la sous-classe « Guerrier »,
je veux invoquer la méthode « rencontrer »

128
00:07:22,250 --> 00:07:25,956
définie de façon plus générale
dans la classe « Personnage »,

129
00:07:25,956 --> 00:07:29,016
eh bien, dans la méthode « rencontrer »
ici je vais dire :

130
00:07:29,016 --> 00:07:32,606
« J'appelle la méthode « rencontrer »
de la classe « Personnage » »

131
00:07:32,606 --> 00:07:35,138
et je fais le lien 
entre le nom de la méthode

132
00:07:35,138 --> 00:07:37,829
et le nom de la classe à laquelle
cette méthode appartient

133
00:07:37,829 --> 00:07:40,530
avec l'opérateur 
de résolution de portée.

134
00:07:41,657 --> 00:07:46,665
Donc ici, la méthode spécialisée 
« rencontrer » appelle la méthode « masquer »,

135
00:07:46,665 --> 00:07:49,764
la méthode plus générale, en utilisant
cette notation particulière.

136
00:07:50,369 --> 00:07:54,068
Ensuite, elle enchaîne un certain
nombre d'actions un peu plus spécifiques.

137
00:07:54,419 --> 00:07:58,028
Ceci est très utile, car cela permet
d'éviter de dupliquer ici

138
00:07:59,098 --> 00:08:03,091
toutes les actions qui sont entreprises
dans la méthode plus générale.

139
00:08:03,972 --> 00:08:08,009
Nous avons donc ici, dans cet exemple, 
grâce à l'accès à une méthode « masquer »,

140
00:08:08,009 --> 00:08:12,220
permis à notre guerrier de devenir
un petit peu plus poli en saluant

141
00:08:12,220 --> 00:08:15,543
son adversaire avant de lui porter
quelques coups, et sans dupliquer

142
00:08:15,543 --> 00:08:16,681
aucune ligne de code.

143
00:08:17,508 --> 00:08:19,379
C'est donc terminé pour cette séquence.

144
00:08:19,379 --> 00:08:22,129
Dans la séquence suivante, nous nous
intéresserons à la construction

145
00:08:22,129 --> 00:08:24,691
et à la destruction dans 
le cadre de l'héritage.
