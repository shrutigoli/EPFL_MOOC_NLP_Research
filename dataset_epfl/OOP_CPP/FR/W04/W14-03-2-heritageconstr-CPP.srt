1
00:00:03,894 --> 00:00:05,413
Revenons maintenant en détails

2
00:00:05,413 --> 00:00:08,677
sur l'ordre d'appel des constructeurs
dans une hiérarchie de classe.

3
00:00:08,677 --> 00:00:12,100
Supposons par exemple
que nous ayons défini une classe « C »,

4
00:00:12,420 --> 00:00:14,932
qui a certains attributs,
certaines méthodes,

5
00:00:15,313 --> 00:00:17,235
et qui hérite d'une classe « B »,

6
00:00:17,235 --> 00:00:19,964
laquelle a ses propres attributs,
ses propres méthodes ;

7
00:00:19,964 --> 00:00:23,252
et laquelle classe « B » hérite
elle-même d'une classe « A »

8
00:00:23,252 --> 00:00:25,892
avec ses attributs et ses méthodes.

9
00:00:25,892 --> 00:00:29,841
Et nous déclarons donc une instance
ici « mon_c » de la classe « C »,

10
00:00:29,841 --> 00:00:33,902
avec un appel ici à un
des constructeurs de cette classe « C ».

11
00:00:33,902 --> 00:00:37,186
Que se passe-t-il lorsque l'on déclare,
donc comme ceci une instance,

12
00:00:38,216 --> 00:00:40,554
lors de l'appel donc de ce constructeur ?

13
00:00:40,554 --> 00:00:45,052
Ce constructeur ici,
dans sa section liste d'initialisation,

14
00:00:45,052 --> 00:00:49,019
aurait un appel au constructeur de « B »,
que cette écriture soit explicite,

15
00:00:49,019 --> 00:00:51,396
ou que ce soit un appel
au constructeur par défaut.

16
00:00:51,396 --> 00:00:54,530
Et puis ensuite bien sûr,
l'initialisation des attributs.

17
00:00:54,530 --> 00:00:57,139
Donc lorsque l'on appelle
ici le constructeur,

18
00:00:57,139 --> 00:01:01,711
on va commencer par appeler
le constructeur de la classe « B ».

19
00:01:01,711 --> 00:01:05,694
Le constructeur de la classe « B »
a lui-même dans sa liste d'initialisation,

20
00:01:05,694 --> 00:01:08,748
l'appel à un des constructeurs
de sa superclasse.

21
00:01:08,748 --> 00:01:12,382
Et donc dans cet appel ici
du constructeur de la classe « B »

22
00:01:12,382 --> 00:01:13,823
dans le constructeur de la classe « C »,

23
00:01:13,823 --> 00:01:15,425
on a d'abord en tout premier,

24
00:01:15,425 --> 00:01:18,742
un appel au constructeur
de la super-super-classe « A ».

25
00:01:18,742 --> 00:01:21,016
Donc la toute première chose
qui va se faire,

26
00:01:21,016 --> 00:01:24,299
lors de l'appel du constructeur de « C »,

27
00:01:24,299 --> 00:01:28,540
c'est l'exécution du constructeur
de la super-super-classe,

28
00:01:28,540 --> 00:01:30,690
de la classe la plus haute dont on dérive.

29
00:01:30,690 --> 00:01:32,937
Et donc l'exécution de ce constructeur

30
00:01:32,937 --> 00:01:36,856
va commencer par initialiser
des attributs « a1 » et « a2 ».

31
00:01:36,856 --> 00:01:41,245
Et donc dans la construction d'un « C »,
on aura lancé la construction d'un « B »,

32
00:01:41,245 --> 00:01:44,796
lequel « B » aura lancé
la construction d'un « A ».

33
00:01:44,796 --> 00:01:48,175
La première chose qui se passe
dans cette construction du « C »,

34
00:01:48,175 --> 00:01:50,235
c'est la construction de sa partie « A »,

35
00:01:50,235 --> 00:01:53,120
je vous rappelle qu'au travers
de la relation d'héritage,

36
00:01:53,120 --> 00:01:58,166
« C » hérite tous les attributs de « B »,
« B » hérite tous les attributs de « A »,

37
00:01:58,166 --> 00:02:03,608
donc dans « C », on a effectivement
un attribut « a1 » et un attribut « a2 »

38
00:02:03,608 --> 00:02:06,858
Donc dans la construction de ce « C »,
qui n'est pas encore terminée,

39
00:02:06,858 --> 00:02:10,379
on a commencé par construire
la sous partie « A ».

40
00:02:10,379 --> 00:02:12,306
C'est la première chose qui se passe.

41
00:02:13,216 --> 00:02:16,365
Une fois qu'on a terminé toute l'exécution
du constructeur de « A »,

42
00:02:16,365 --> 00:02:19,830
on revient ici, donc dans la liste
d'initialisation du constructeur de « B »,

43
00:02:19,830 --> 00:02:23,570
pour initialiser ses propres attributs,
les propres attributs de la classe « B »,

44
00:02:23,570 --> 00:02:28,287
et donc construire ici
l'attribut « b1 » de la classe « B ».

45
00:02:28,287 --> 00:02:31,274
Et puis on termine donc l'exécution
du constructeur de « B »

46
00:02:31,274 --> 00:02:35,571
et on est donc à ce stade là,
dans l'exécution du constructeur de « C »,

47
00:02:35,571 --> 00:02:40,431
on termine l'exécution de la liste
d'initialisation du constructeur de « C »,

48
00:02:40,431 --> 00:02:45,217
qui va donc construire la partie
propre à « C », les attributs propres à « C »,

49
00:02:45,217 --> 00:02:49,738
exécuter son corps et ceci termine
la construction de « C ».

50
00:02:49,738 --> 00:02:52,363
Donc dans la construction
d'une sous-sous-classe,

51
00:02:52,363 --> 00:02:54,548
on commence d'abord
par appeler le constructeur

52
00:02:54,548 --> 00:02:58,618
de la classe la plus élevée dont on dérive
puis ainsi de suite tous les constructeurs

53
00:02:58,618 --> 00:03:00,231
des super classes intermédiaires.

54
00:03:00,231 --> 00:03:04,268
Enfin on termine donc par la partie
spécifique au constructeur de la classe,

55
00:03:04,268 --> 00:03:06,628
dont on est en train
de créer une instance.

56
00:03:07,378 --> 00:03:09,330
Pour les destructeurs,
pas grand-chose à dire

57
00:03:09,330 --> 00:03:13,078
si ce n'est qu'ils sont appelés
dans l'ordre inverse des constructeurs.

58
00:03:13,078 --> 00:03:16,279
Les destructeurs seront toujours appelés
dans l'ordre inverse des constructeurs.

59
00:03:16,829 --> 00:03:18,548
Donc dans l'exemple qui précède,

60
00:03:18,548 --> 00:03:21,550
nous avons d'abord
appel au destructeur de « C »,

61
00:03:21,550 --> 00:03:24,318
puisque c'est le dernier
constructeur qui a été appelé,

62
00:03:24,318 --> 00:03:25,555
c'était le constructeur de « C »,

63
00:03:25,555 --> 00:03:27,282
donc le premier destructeur
qui est appelé,

64
00:03:27,282 --> 00:03:28,742
c'est le destructeur de « C »,

65
00:03:28,742 --> 00:03:32,801
lequel destructeur de « C »
appelle le destructeur de « B »,

66
00:03:32,801 --> 00:03:36,970
lequel destructeur de « B »
appelle le destructeur de « A ».

67
00:03:38,330 --> 00:03:40,764
Enfin, encore deux petites choses
sur lesquelles nous pensons

68
00:03:40,764 --> 00:03:43,476
que ça vaut la peine d'attirer
votre attention pour conclure

69
00:03:43,476 --> 00:03:48,538
cette séquence sur les constructeurs et
destructeurs dans la relation d'héritage.

70
00:03:48,538 --> 00:03:51,123
Le premier concerne
le constructeur de copies.

71
00:03:51,123 --> 00:03:54,220
Si jamais vous devez redéfinir
le constructeur de copies,

72
00:03:54,220 --> 00:03:56,402
vous n'êtes pas obligé
dans la plupart des cas,

73
00:03:56,402 --> 00:03:59,891
mais si vous pensez devoir le faire,
alors faites très attention,

74
00:03:59,891 --> 00:04:04,039
dans le constructeur de copies
d'une sous-classe à toujours penser

75
00:04:04,039 --> 00:04:08,425
à appeler explicitement le constructeur
de copies de la super-classe.

76
00:04:08,425 --> 00:04:11,943
Par exemple, supposons
que l'on ait une classe « Rectangle »

77
00:04:11,943 --> 00:04:14,769
qui hérite d'une classe
« FigureGeometrique »,

78
00:04:14,769 --> 00:04:18,220
laquelle classe « FigureGeometrique »
a un attribut (de type) « Position »,

79
00:04:18,220 --> 00:04:21,496
qui pourrait prendre
deux coordonnées x et y,

80
00:04:21,496 --> 00:04:24,907
et a donc par exemple
deux constructeurs,

81
00:04:24,907 --> 00:04:27,910
un constructeur par défaut,

82
00:04:27,910 --> 00:04:32,114
qui initialise la position
à la position nulle (0,0)

83
00:04:32,114 --> 00:04:36,733
et un constructeur
qui permettrait d'initialiser

84
00:04:36,733 --> 00:04:40,472
les coordonnées (x,y) de la position.

85
00:04:41,272 --> 00:04:45,846
Et supposons donc que l'on crée
une instance « r1 » de la classe « Rectangle »,

86
00:04:45,846 --> 00:04:48,285
que l'on initialise avec une position,

87
00:04:48,285 --> 00:04:52,230
disons première coordonnée (1),
	deuxième coordonnée (2)

88
00:04:52,230 --> 00:04:57,027
et puis une largeur de 3.5
et une hauteur de 4.6,

89
00:04:58,037 --> 00:05:01,151
et que l'on créé une instance « r2 »
par copie de « r1 ».

90
00:05:01,855 --> 00:05:05,904
On s'attend donc bien sûr
à ce que la copie « r2 », copie de « r1 »,

91
00:05:05,904 --> 00:05:09,452
ait la même position, même hauteur,
même largeur que « r1 ».

92
00:05:09,452 --> 00:05:14,505
Mais admettons que l'on ait écrit
un constructeur de copies comme ceci,

93
00:05:14,505 --> 00:05:18,154
et que l'on n'ait pas écrit explicitement

94
00:05:18,154 --> 00:05:21,610
l'appel au constructeur de copies
de la super-classe.

95
00:05:21,610 --> 00:05:25,990
Qu'est ce qui se passe à ce moment-là
dans cet appel de la copie de « r1 » dans « r2 » ?

96
00:05:25,990 --> 00:05:30,269
On va appeler le constructeur de copies
de la classe « Rectangle ».

97
00:05:30,269 --> 00:05:32,451
Ce constructeur de copies
de la classe « Rectangle »,

98
00:05:32,451 --> 00:05:35,379
dans sa liste d'initialisation,
n'a pas d'appel explicite

99
00:05:35,379 --> 00:05:37,807
à aucun constructeur de la superclasse

100
00:05:37,807 --> 00:05:42,294
et donc appelle le constructeur
par défaut de la superclasse.

101
00:05:42,294 --> 00:05:45,846
Ce qu'on commence par faire
dans la copie de « Rectangle »,

102
00:05:45,846 --> 00:05:49,919
c'est initialiser la position de « r2 » à 0.

103
00:05:49,919 --> 00:05:55,653
Donc « r2 » va se retrouver avec une position
à 0 par l'appel non écrit,

104
00:05:55,653 --> 00:05:57,781
et donc réalisé automatiquement,

105
00:05:57,781 --> 00:06:00,592
du constructeur par défaut
de la superclasse.

106
00:06:00,592 --> 00:06:03,795
Puis on copiera la largeur de « r1 »
dans la largeur de « r2 »,

107
00:06:03,795 --> 00:06:06,375
la hauteur de « r1 » dans la hauteur de « r2 ».

108
00:06:06,375 --> 00:06:08,525
Donc si on a omis cette ligne,

109
00:06:08,575 --> 00:06:13,475
alors « r2 » aura comme position « 0.0 , 0.0 ».

110
00:06:14,435 --> 00:06:17,106
Ce qu'il faut faire,
c'est avoir explicitement

111
00:06:17,106 --> 00:06:21,758
un appel au constructeur de copies
de la super-classe.

112
00:06:21,758 --> 00:06:23,562
A ce moment-là, ce qui va se passer,

113
00:06:23,562 --> 00:06:27,807
c'est que l'appel du constructeur
de copies va appeler explicitement

114
00:06:27,807 --> 00:06:30,882
le constructeur de copies
de la super-classe.

115
00:06:30,882 --> 00:06:34,389
Si on n'a pas écrit explicitement,

116
00:06:34,389 --> 00:06:36,600
on va avoir le constructeur
de copies par défaut,

117
00:06:36,600 --> 00:06:40,623
qui va donc recopier « r1 »
en tant que FigureGeometrique,

118
00:06:40,623 --> 00:06:44,934
je vous rappelle que le constructeur
de copies de « FigureGeometrique »

119
00:06:48,914 --> 00:06:50,589
a le prototype suivant

120
00:06:50,589 --> 00:06:53,963
et donc passe une FigureGeometrique
par référence constante.

121
00:06:53,963 --> 00:06:58,449
Ici « autre », qui est un Rectangle,
est passé en tant que FigureGeometrique,

122
00:06:58,449 --> 00:07:00,373
ce qui pose absolument aucun problème,

123
00:07:00,373 --> 00:07:03,191
puisqu'un Rectangle
est une FigureGeometrique.

124
00:07:03,191 --> 00:07:07,525
Et donc ce constructeur de copies,
recopie la partie « FigureGeometrique »

125
00:07:07,525 --> 00:07:12,906
du Rectangle « r1 », c'est-à-dire va recopier
son attribut « position »

126
00:07:12,906 --> 00:07:15,522
dans la position de « r2 ».

127
00:07:15,522 --> 00:07:19,601
Donc on aura bien ici une copie
de la partie « FigureGeometrique » de « r1 »,

128
00:07:19,601 --> 00:07:24,099
c'est-à-dire sa position « 1.0 , 2.0 »
dans la partie « FigureGeometrique » de « r2 »

129
00:07:24,099 --> 00:07:27,759
c'est à dire dans la position héritée
par « FigureGeometrique » de « r2 ».

130
00:07:27,759 --> 00:07:30,550
Grâce à cet appel explicite

131
00:07:30,550 --> 00:07:32,642
au constructeur de copies
de la superclasse,

132
00:07:32,642 --> 00:07:37,444
on a bien « r2 » qui aura
la même position que « r1 ».

133
00:07:38,104 --> 00:07:40,975
Et ensuite le constructeur de copies
continue comme précédemment,

134
00:07:40,975 --> 00:07:43,277
en copiant la largeur et la hauteur.

135
00:07:43,277 --> 00:07:45,961
Donc il faut bien explicitement écrire

136
00:07:45,961 --> 00:07:48,330
l'appel au constructeur de copies
de « FigureGeometrique »,

137
00:07:48,330 --> 00:07:52,431
parce que sinon ce sera le constructeur
par défaut de la super-classe

138
00:07:52,431 --> 00:07:55,355
qui sera appelé et ceci peut
créer quelques ennuis.

139
00:07:55,355 --> 00:07:58,014
Je peux vous livrer
une anecdote de cette erreur

140
00:07:58,014 --> 00:08:01,425
qui s'est passée dans des projets
que je donne à mes étudiants.

141
00:08:01,425 --> 00:08:04,185
Ils devaient écrire des classes
pour des vecteurs,

142
00:08:04,185 --> 00:08:06,777
des vecteurs mathématiques,
des vecteurs algébriques,

143
00:08:06,777 --> 00:08:10,579
et ils avaient fait une sous-classe,
du genre « vecteur unitaire ».

144
00:08:10,579 --> 00:08:14,874
Et certains s'étaient crus malins
de devoir écrire le constructeur de copies

145
00:08:14,874 --> 00:08:18,058
des vecteurs unitaires qui héritent
de la classe « Vecteur ».

146
00:08:18,058 --> 00:08:20,954
Et bien simplement, ils avaient oublié,
dans le constructeur de copies,

147
00:08:20,954 --> 00:08:24,744
de faire l'appel au constructeur de copies
de la super-classe « Vecteur ».

148
00:08:24,744 --> 00:08:28,781
Or il se trouve que la super-classe
« Vecteur » avait un constructeur par défaut,

149
00:08:28,781 --> 00:08:30,665
qui construisait le vecteur nul.

150
00:08:30,665 --> 00:08:32,301
Et donc ils se retrouvaient,

151
00:08:32,301 --> 00:08:34,885
chaque fois qu'ils faisaient
des copies de vecteurs unitaires,

152
00:08:34,885 --> 00:08:37,253
avec des vecteurs unitaires
qui étaient nuls,

153
00:08:37,253 --> 00:08:39,782
ce qui est quand même un comble
pour un vecteur unitaire.

154
00:08:39,782 --> 00:08:43,695
Donc évitez ce genre d'erreur,
et si vous pensez devoir redéfinir

155
00:08:43,695 --> 00:08:45,716
le constructeur de copies
dans une sous-classe,

156
00:08:45,716 --> 00:08:49,658
n'oubliez pas d'appeler le constructeur
de copies de la super-classe.

157
00:08:50,558 --> 00:08:54,596
Pour finir, je voudrais revenir
sur un aspect qui a changé avec C++ 2011.

158
00:08:54,596 --> 00:08:55,938
Je vous ai dit en effet,

159
00:08:55,938 --> 00:09:00,205
que les constructeurs n'étaient pas
hérités dans la relation d'héritage,

160
00:09:00,205 --> 00:09:02,401
une sous-classe héritait
l'ensemble des attributs

161
00:09:02,401 --> 00:09:04,315
et des méthodes de sa super-classe,

162
00:09:04,315 --> 00:09:06,883
mais n'héritait pas le constructeur
et les destructeurs.

163
00:09:06,883 --> 00:09:09,654
En C++ 2011, ils ont introduit
ce qu'on appelle

164
00:09:09,654 --> 00:09:11,487
« l'héritage des constructeurs ».

165
00:09:11,487 --> 00:09:15,233
Il est donc maintenant possible
de demander l'héritage d'un constructeur.

166
00:09:15,893 --> 00:09:18,162
Par défaut, on n'a pas d'héritage
des constructeurs,

167
00:09:18,162 --> 00:09:21,971
mais on peut rajouter,
avec une syntaxe comme ceci,

168
00:09:21,971 --> 00:09:26,273
le mot-clé « using », on peut rajouter
tous les constructeurs de la super-classe.

169
00:09:26,273 --> 00:09:29,836
Et ainsi, on pourra construire
la sous-classe avec tous les constructeurs

170
00:09:29,836 --> 00:09:33,688
et avec les mêmes arguments
que les constructeurs de la super-classe.

171
00:09:33,688 --> 00:09:35,125
Mais faites très attention,

172
00:09:35,125 --> 00:09:38,357
ceci est à mon avis
quelque chose de très risqué

173
00:09:38,357 --> 00:09:40,886
et je vous déconseille
de faire ce genre de chose,

174
00:09:40,886 --> 00:09:43,037
de faire de l'héritage des constructeurs,

175
00:09:43,037 --> 00:09:46,708
parce que les constructeurs
des super-classes, évidemment,

176
00:09:46,708 --> 00:09:49,770
n'initialisent pas les attributs
de la sous-classe,

177
00:09:49,770 --> 00:09:53,479
et donc si on fait un appel
à un constructeur de la super-classe

178
00:09:53,479 --> 00:09:57,926
dans la sous-classe, qui serait possible
avec cet héritage des constructeurs,

179
00:09:57,926 --> 00:10:00,792
on n'aurait alors à ce moment-là
pas d'initialisation

180
00:10:00,792 --> 00:10:03,249
des attributs propres de la sous-classe,

181
00:10:03,249 --> 00:10:05,514
c'est donc quelque chose
que je vous déconseille de faire

182
00:10:05,514 --> 00:10:07,262
et que je ne vous conseille de faire

183
00:10:07,262 --> 00:10:11,691
que lorsque vous n'avez pas
de nouveaux attributs dans la sous-classe,

184
00:10:11,691 --> 00:10:13,825
et évidemment si c'est approprié.

185
00:10:13,825 --> 00:10:17,218
Donc par exemple, supposons
qu'on ait une super-classe « A »,

186
00:10:17,218 --> 00:10:21,044
qui a deux constructeurs :
un constructeur qui prend un « entier »,

187
00:10:21,044 --> 00:10:24,845
et un constructeur qui prend deux « double ».

188
00:10:24,845 --> 00:10:29,124
Et on a une sous-classe « B »
qui hérite de la super-classe « A ».

189
00:10:29,124 --> 00:10:35,620
On peut donc faire, à la demande, hériter
les constructeurs de « A » dans la classe « B »

190
00:10:35,620 --> 00:10:40,965
en écrivant comme ceci « using A : : A »,
c'est à dire en utilisant

191
00:10:40,965 --> 00:10:43,879
les constructeurs
qui s'appellent « A » de la classe « A ».

192
00:10:43,879 --> 00:10:47,825
La syntaxe est peut-être un peu redondante
mais c'est comme ça qu'il faut écrire,

193
00:10:47,825 --> 00:10:50,206
« using A : : A ».

194
00:10:50,206 --> 00:10:53,975
Et alors à moment-là, on récupère
dans « B », deux constructeurs :

195
00:10:53,975 --> 00:10:56,720
un constructeur avec
un paramètre de type « entier »

196
00:10:56,720 --> 00:11:01,000
et un constructeur avec deux paramètres
de types « double, double ».

197
00:11:01,000 --> 00:11:07,272
Mais si jamais, dans « B », on avait introduit
des attributs supplémentaires,

198
00:11:07,272 --> 00:11:10,788
alors attention,
les constructeurs en question,

199
00:11:10,788 --> 00:11:13,635
comme ce sont les constructeurs de « A »,

200
00:11:13,635 --> 00:11:17,301
ne vont évidemment pas
initialiser l'attribut « B ».

201
00:11:17,301 --> 00:11:18,963
C'est donc pour ça 
que je vous recommande

202
00:11:18,963 --> 00:11:23,880
d'utiliser ce genre de chose avec beaucoup
de parcimonie, voire de l'oublier.

203
00:11:23,880 --> 00:11:27,138
Mais nous tenions à vous le signaler,
parce que quand même c'est quelque chose

204
00:11:27,138 --> 00:11:29,713
qui a été introduit
dans cette nouvelle norme C++ 2011

205
00:11:29,713 --> 00:11:32,590
et que vous pourriez
être amenés à rencontrer.

206
00:11:33,660 --> 00:11:38,372
Ceci conclut donc notre série
de séquences vidéos sur l'héritage.
