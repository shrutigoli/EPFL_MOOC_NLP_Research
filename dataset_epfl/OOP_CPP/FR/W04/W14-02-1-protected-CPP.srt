1
00:00:04,540 --> 00:00:06,072
Dans cette séquence vidéo,

2
00:00:06,072 --> 00:00:08,133
nous continuons 
sur la lancée de l'héritage

3
00:00:08,133 --> 00:00:11,381
et abordons deux notions qui sont liées :
le droit d'accès protégé

4
00:00:11,381 --> 00:00:14,056
et la notion de masquage 
dans une hiérarchie de classe.

5
00:00:14,084 --> 00:00:17,733
Vous avez appris jusqu'ici que l'accès
aux membres d'une classe,

6
00:00:17,733 --> 00:00:20,032
c'est-à-dire soit à un attribut 
ou à une méthode,

7
00:00:20,032 --> 00:00:24,509
peut-être soit public, ce qui veut dire 
que le membre en question

8
00:00:24,515 --> 00:00:28,935
à une visibilité totale, il est accessible
aussi bien à l'intérieur de la classe

9
00:00:28,935 --> 00:00:31,291
dans lequel il est défini 
qu'à l'extérieur.

10
00:00:32,351 --> 00:00:35,301
S'il est privé, 
il a une visibilité restreinte

11
00:00:35,313 --> 00:00:38,736
uniquement à l'intérieur de la classe
dans lequel il est défini.

12
00:00:38,736 --> 00:00:40,755
La question que nous nous posons 
maintenant est :

13
00:00:40,755 --> 00:00:43,553
qu'en est-il des droits d'accès lorsque
l'on se trouve dans le cadre

14
00:00:43,553 --> 00:00:45,272
d'une relation d'héritage ?

15
00:00:45,272 --> 00:00:52,052
Supposons que l'on est une super-classe « A »
dont hérite une sous-classe « B »,

16
00:00:53,695 --> 00:00:56,273
supposons qu'à l'intérieur 
de la super-classe « A »,

17
00:00:56,273 --> 00:01:00,926
nous ayons déclaré un attribut privé,
ce que nous avons fait jusqu'ici

18
00:01:00,926 --> 00:01:02,136
pour tous les attributs

19
00:01:03,802 --> 00:01:07,732
et nous nous posons maintenant la question
de savoir si dans une méthode

20
00:01:08,836 --> 00:01:10,126
de la sous-classe « B »

21
00:01:10,782 --> 00:01:12,852
par exemple, une méthode comme ceci

22
00:01:14,039 --> 00:01:17,819
nous avons le droit 
d'utiliser cet attribut directement.

23
00:01:18,554 --> 00:01:21,775
Nous avons vu que
par le fait de l'héritage,

24
00:01:21,775 --> 00:01:25,715
la classe « B » dispose bel et bien 
d'un attribut « a » hérité de A.

25
00:01:27,026 --> 00:01:29,281
Mais, est-ce qu'elle a le droit
d'y accéder directement,

26
00:01:29,281 --> 00:01:31,221
est-ce qu'elle a le droit par exemple

27
00:01:32,511 --> 00:01:34,001
de faire ceci

28
00:01:36,709 --> 00:01:39,299
avec un accès direct à l'attribut hérité ?

29
00:01:39,835 --> 00:01:42,712
En fait, comme le droit d'accès privé 
assure la visibilité

30
00:01:42,712 --> 00:01:47,540
uniquement à l'intérieur de la classe,
l'attribut « a » défini dans cette classe

31
00:01:47,540 --> 00:01:49,752
n'est accessible que dans la classe « A ».

32
00:01:49,752 --> 00:01:52,101
On pourrait accéder 
à cet attribut directement

33
00:01:52,101 --> 00:01:55,275
uniquement dans les méthodes 
de la classe « A »

34
00:01:55,275 --> 00:01:57,147
et par ailleurs.
La réponse à la question

35
00:01:57,147 --> 00:02:00,675
que nous nous posions est donc « non »,
nous n'avons pas le droit d'accéder à « a »

36
00:02:00,675 --> 00:02:03,575
directement dans une méthode 
de la classe « B »

37
00:02:04,036 --> 00:02:07,516
si cet attribut est défini comme privé
dans la super-classe.

38
00:02:07,622 --> 00:02:11,028
Et ceci nous place dans une situation
un petit peu particulière,

39
00:02:11,028 --> 00:02:15,964
un objet de type « B » dispose bel et bien
de l'attribut « a » par héritage,

40
00:02:15,964 --> 00:02:19,714
mais il ne peut pas y accéder directement.
Comme il peut sembler naturel

41
00:02:19,736 --> 00:02:22,746
qu'une méthode de la classe « B » 
puisse manipuler

42
00:02:22,746 --> 00:02:25,745
n'importe quel attribut 
d'un objet de type « B »

43
00:02:25,745 --> 00:02:29,765
et bien, il existe une troisième voie :
le droit d'accès protégé.

44
00:02:30,200 --> 00:02:34,120
Le droit d'accès protégé permet 
à une sous-classe

45
00:02:34,125 --> 00:02:37,236
d'accéder à un membre hérité directement,

46
00:02:37,236 --> 00:02:39,955
il assure la visibilité 
des membres d'une classe

47
00:02:39,955 --> 00:02:45,485
dans toutes les classes de sa descendance
et il se désigne par le mot clé « protected ».

48
00:02:45,969 --> 00:02:50,349
Concrètement, remplacer ici « private »
par « protected »

49
00:02:54,209 --> 00:02:58,529
rend ceci possible, 
une sous-classe peut accéder

50
00:02:59,605 --> 00:03:02,404
à tous les membres protégés
hérités des super-classes

51
00:03:02,404 --> 00:03:05,854
que ce soit des méthodes ou des attributs.
Autre exemple concret,

52
00:03:05,854 --> 00:03:09,412
une sous-classe « Guerrier » hérite
d'une super-classe « Personnage »

53
00:03:09,412 --> 00:03:12,958
et dispose ici de ce fait,
d'un attribut caractérisant

54
00:03:12,958 --> 00:03:14,198
son niveau d'énergie.

55
00:03:14,372 --> 00:03:17,975
Si dans la classe « Guerrier », on souhaite
maintenant écrire une méthode « frapper »

56
00:03:17,975 --> 00:03:20,526
permettant au guerrier de frapper 
un autre personnage

57
00:03:20,526 --> 00:03:24,483
et si l'on imagine que le guerrier
ne peut frapper l'autre personnage

58
00:03:24,483 --> 00:03:27,342
que s'il dispose de 
suffisamment d'énergie

59
00:03:27,342 --> 00:03:30,896
alors, on est amené à utiliser 
l'attribut « energie », par exemple,

60
00:03:30,896 --> 00:03:31,886
comme ceci.

61
00:03:32,121 --> 00:03:34,813
L'accès direct dans une méthode
de la classe « Guerrier »

62
00:03:34,813 --> 00:03:38,570
a un attribut hérité de plus haut,
n'est ici possible

63
00:03:38,570 --> 00:03:41,942
que parce que cet attribut 
a été déclaré comme protégé.

64
00:03:41,942 --> 00:03:44,804
S'il avait été déclaré comme privé,

65
00:03:47,484 --> 00:03:50,374
cet accès direct 
n'aurait pas été possible.

66
00:03:50,585 --> 00:03:53,485
Que faudrait-il faire
pour que le guerrier accède

67
00:03:53,485 --> 00:03:55,025
à son niveau d'énergie ?

68
00:03:55,343 --> 00:03:58,660
Ce qu'il est important de comprendre
est que le niveau d'accès protégé

69
00:03:58,660 --> 00:04:01,199
n'est autre qu'une extension 
du niveau privé

70
00:04:01,199 --> 00:04:05,042
qui accorde des droits d'accès priviliégés
aux membres protégés

71
00:04:05,042 --> 00:04:08,227
à toutes les sous-classes,
mais nulle part ailleurs.

72
00:04:08,227 --> 00:04:12,077
En dehors du corps des sous-classes,
le membre protégé est donc vu

73
00:04:12,077 --> 00:04:13,707
comme un membre privé.

74
00:04:14,130 --> 00:04:18,170
Par exemple, 
si dans un programme principal...

75
00:04:21,792 --> 00:04:29,718
...je déclare un objet de type « Guerrier », 
et que je tente d'accéder

76
00:04:29,718 --> 00:04:32,994
à son niveau d'énergie
par un accès de ce genre

77
00:04:32,994 --> 00:04:37,171
et bien ceci n'est pas licite,
en dehors des méthodes des sous-classes,

78
00:04:37,171 --> 00:04:39,861
l'attribut est perçu comme privé.

79
00:04:40,103 --> 00:04:44,632
Plus précisément, un membre protégé
va être accessible directement

80
00:04:44,632 --> 00:04:49,238
dans les sous-classes, mais attention, 
uniquement dans leur portée,

81
00:04:49,238 --> 00:04:52,762
dans la portée de ces sous-classes.
Commençons par rappeler brièvement

82
00:04:52,762 --> 00:04:56,286
ce que signifie la portée d'une classe
sur un exemple simple,

83
00:04:56,286 --> 00:04:57,573
indépendamment de l'héritage.

84
00:04:57,573 --> 00:05:00,403
Supposons que l'on ait une classe « B »

85
00:05:02,199 --> 00:05:09,529
dans laquelle nous aurions défini
un attribut, par exemple, « privé b ».

86
00:05:09,973 --> 00:05:14,493
Nous savons que l'attribut b
est accessible dans toute la portée de « B »,

87
00:05:14,525 --> 00:05:17,764
c'est-à-dire dans toute méthode 
de la classe « B ».

88
00:05:17,764 --> 00:05:21,844
Plus précisément, C++ met en oeuvre 
ce que l'on appelle la portée de classe

89
00:05:21,852 --> 00:05:25,654
ce qui signifie concrètement 
que cet attribut « b » va être accessible

90
00:05:25,654 --> 00:05:29,212
dans la portée de « B » 
via tout objet de type « B ».

91
00:05:29,212 --> 00:05:33,027
Que ce soit l'objet pointé par « this »
ou tout autre instance de « B ».

92
00:05:33,897 --> 00:05:38,694
Ce qui veut dire concrètement ici
que dans une méthode de la classe « B »,

93
00:05:38,694 --> 00:05:43,118
on a le droit d'accéder à l'attribut « b »,
lorsqu'on écrit quelque chose comme ceci,

94
00:05:43,118 --> 00:05:45,961
implicitement on est en train 
de travailler avec l'attribut « b »

95
00:05:45,961 --> 00:05:49,321
de l'instance courante.
C'est tout à fait équivalent à écrire

96
00:05:49,321 --> 00:05:53,958
quelque chose comme ceci.
On a aussi le droit d'accéder

97
00:05:53,958 --> 00:05:57,841
à l'attribut « b », via tout autre instance
de la classe « B ».

98
00:05:57,841 --> 00:06:02,861
C'est-à-dire ici, par exemple,
si la méthode « m » prenait en paramètre

99
00:06:03,904 --> 00:06:07,866
un autre objet de type « B »,
on aurait aussi le droit d'accéder

100
00:06:10,166 --> 00:06:13,266
à l'attribut « b » 
via cet autre objet de type « B ».

101
00:06:13,613 --> 00:06:17,808
En clair, dans la classe « B », on a le droit
d'accéder à cet attribut

102
00:06:17,808 --> 00:06:21,238
via toute objet de type « B », 
que ce soit « this » ou tout autre « B ».

103
00:06:21,464 --> 00:06:25,483
Lorsque je dis ici que l'attribut « b »
est de portée « B »,

104
00:06:25,483 --> 00:06:30,753
je signifie qu'il est accessible 
dans la classe « B » uniquement

105
00:06:30,814 --> 00:06:32,590
via tout objet de type « B ».

106
00:06:32,590 --> 00:06:35,057
Voyons maintenant sur un exemple
un peu plus complexe

107
00:06:35,057 --> 00:06:38,680
ce que signifie le fait 
que le droit d'accès, protégé cette fois,

108
00:06:38,680 --> 00:06:43,160
permet l'accès aux sous-classes
« uniquement dans leur propre portée ».

109
00:06:43,175 --> 00:06:47,335
Ici, nous avons donc une sous-classe « b »
qui hérite d'une super-classe « A »

110
00:06:47,350 --> 00:06:51,350
laquelle possède un attribut protégé « a »
et un attribut privé.

111
00:06:51,438 --> 00:06:55,867
L'attribut protégé « a » est accessible
dans la sous-classe « B »

112
00:06:55,867 --> 00:07:01,824
mais uniquement dans sa portée.
C'est-à-dire à l'intérieur de la classe « B »

113
00:07:01,824 --> 00:07:05,677
via tout objet de type « B »
que ce soit « this » ou un autre « b ».

114
00:07:05,677 --> 00:07:09,827
L'attribut privé n'est accessible
que dans la portée de A,

115
00:07:09,843 --> 00:07:13,873
il ne peut être accéder 
à l'intérieur de « B ».

116
00:07:14,019 --> 00:07:16,919
Illustrons ceci 
au travers de cette méthode « f »

117
00:07:17,035 --> 00:07:22,164
de la classe « B » qui prend en paramètre
un objet de type « B », un objet de type A

118
00:07:22,164 --> 00:07:23,384
et enfin, un entier.

119
00:07:23,727 --> 00:07:25,097
Lorsqu'on écrit ceci

120
00:07:26,759 --> 00:07:32,268
on accède à l'attribut protégé A
dans la portée de « B »

121
00:07:32,268 --> 00:07:35,251
puisque nous sommes à l'intérieur de « B »
et que nous accédons au A

122
00:07:35,251 --> 00:07:38,290
de l'instance courante.
Nous sommes bel et bien

123
00:07:38,290 --> 00:07:40,520
dans la portée de « B » 
et ceci est donc possible.

124
00:07:40,556 --> 00:07:46,797
Ici, étant donné qu'il n'est pas possible
dans la sous-classe d'accéder

125
00:07:46,797 --> 00:07:48,740
un membre privé de la super-classe,

126
00:07:48,740 --> 00:07:51,730
cette ligne donnerait lieu à une erreur.

127
00:07:52,341 --> 00:07:53,301
L'accès ici

128
00:07:54,559 --> 00:07:59,211
a un membre privé de la super-classe
via toute objet de type « B »

129
00:07:59,211 --> 00:08:01,420
n'est pas possible dans « B »,
que ce soit via « this »,

130
00:08:01,420 --> 00:08:03,010
comme c'était le cas ici,
ou tout autre « B ».

131
00:08:03,070 --> 00:08:07,100
Ici encore, la tentative d'accès 
à un membre privé donne lieu à une erreur...

132
00:08:07,388 --> 00:08:11,631
...cette ligne là. Comme nous avons vu 
que les membres protégés sont accessibles

133
00:08:11,631 --> 00:08:13,094
dans toute la portée de « B »,

134
00:08:13,094 --> 00:08:15,701
c'est-à-dire à l'intérieur de « B » 
via tout objet de type « B »

135
00:08:15,701 --> 00:08:18,582
alors, cet accès est possible
autant que celui-ci.

136
00:08:18,582 --> 00:08:22,035
Tous les objets 
via lesquels on accède à A

137
00:08:22,035 --> 00:08:25,218
sont dans la portée de « B ».
Cet accès est possible.

138
00:08:25,218 --> 00:08:29,750
Enfin, dernier cas, ici on essaye 
d'accéder aux membres protégés A

139
00:08:29,750 --> 00:08:32,047
mais nous ne sommes pas
dans la portée de « B ».

140
00:08:32,047 --> 00:08:35,043
Pourquoi ? Nous sommes certes 
bel et bien à l'intérieur de « B »

141
00:08:35,043 --> 00:08:38,125
dans une méthode de « B »,
mais nous essayons d'accéder à cet attribut

142
00:08:38,125 --> 00:08:42,914
via un objet qui n'est pas de type « B ».
Nous essayons d'y accéder via un objet

143
00:08:42,914 --> 00:08:45,911
de type A. Du coup, 
nous essayons d'accéder

144
00:08:45,911 --> 00:08:51,101
à cet attribut protégé en dehors
de la portée de « B » et ceci est interdit.

145
00:08:51,822 --> 00:08:53,852
Pour prendre un exemple 
un peu plus concret,

146
00:08:53,873 --> 00:08:58,053
imaginons qu'à la place de notre classe « A »,
nous ayons une classe « Personnage »

147
00:08:59,206 --> 00:09:02,866
qui aurait un attribut protégé

148
00:09:06,076 --> 00:09:08,736
donnant le niveau d'énergie du personnage.

149
00:09:12,581 --> 00:09:17,278
Le rôle de la classe « B » serait joué
par la sous-classe « Guerrier »

150
00:09:19,268 --> 00:09:20,758
qui étant la classe « Personnage »

151
00:09:22,694 --> 00:09:27,464
et en guise d'équivalent de la méthode « f »,
nous aurions dans la classe « Guerrier »

152
00:09:27,567 --> 00:09:29,497
une méthode « frapper »

153
00:09:32,427 --> 00:09:35,517
où le guerrier va frapper 
un autre personnage.

154
00:09:39,649 --> 00:09:43,602
Si l'on veut faire en sorte 
que dans la méthode « frapper »

155
00:09:43,602 --> 00:09:47,662
le fait que le guerrier frappe 
le personnage diminue l'énergie de ce dernier,

156
00:09:47,671 --> 00:09:51,191
on peut imaginer, par exemple, 
l'écrire comme ceci.

157
00:09:56,405 --> 00:10:00,735
Or, ceci ne fonctionnera pas,
cet accès n'est pas possible

158
00:10:00,841 --> 00:10:04,394
en vertu de la même règle 
que celle qui est appliquée ici :

159
00:10:05,714 --> 00:10:09,964
l'objet « p », qui a le même rôle
que « autreA » dans l'autre exemple,

160
00:10:10,048 --> 00:10:11,305
est hors de portée,

161
00:10:11,305 --> 00:10:13,395
n'est pas dans la même portée 
que l'objet « this ».

162
00:10:14,007 --> 00:10:17,093
Vous connaissez maintenant 
les droits d'accès en C++,

163
00:10:17,093 --> 00:10:19,759
vous savez que les membres publics 
sont accessibles

164
00:10:19,759 --> 00:10:22,054
à tous les programmeurs utilisateurs
d'une classe donnée,

165
00:10:22,054 --> 00:10:25,143
qu'à contrario, les membres privés
ne sont accessibles

166
00:10:25,143 --> 00:10:28,769
qu'au programmeur de la classe.
Il reflète la structure interne

167
00:10:28,769 --> 00:10:31,791
de cette dernière
et sont modifiables sans répercussion

168
00:10:31,791 --> 00:10:33,481
sur les programmeurs utilisateurs

169
00:10:33,481 --> 00:10:36,607
et enfin, les membres protégés 
sont accessibles

170
00:10:36,607 --> 00:10:40,606
à tous les programmeurs d'extension,
ce qui étendrait une classe donnée

171
00:10:40,606 --> 00:10:43,496
en y ajoutant des sous-classes,
à l'intérieur de ces sous-classes,

172
00:10:43,496 --> 00:10:46,486
il leur sera possible d'accéder
à ces membres protégés.

173
00:10:46,966 --> 00:10:49,805
Voilà, ceci conclut notre séquence
sur les droits d'accès

174
00:10:49,805 --> 00:10:51,285
dans une hiérarchie de classes.
