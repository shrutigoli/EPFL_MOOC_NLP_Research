1
00:00:04,299 --> 00:00:07,040
Après les notions d'encapsulation
et d'abstraction

2
00:00:07,040 --> 00:00:09,780
nous abordons dans cette séquence
vidéo aussi et les suivantes

3
00:00:09,779 --> 00:00:13,919
la troisième notion fondamentale de
la programmation orientée objet

4
00:00:13,919 --> 00:00:15,368
qu'est l'héritage,

5
00:00:15,368 --> 00:00:19,300
mais commençons de suite par un exemple
et oublions un petit peu pour une fois

6
00:00:19,300 --> 00:00:22,139
les rectangles et 
autres figures géométriques

7
00:00:22,139 --> 00:00:25,288
pour nous concentrer sur
des personnages d'un jeu.

8
00:00:25,288 --> 00:00:29,508
Imaginons qu'on va faire un jeu où on a 
par exemple des guerriers, des magiciens,

9
00:00:29,509 --> 00:00:31,629
des voleurs et autres, etc. ,

10
00:00:31,629 --> 00:00:33,780
comment représenterions-nous cela ?

11
00:00:33,780 --> 00:00:37,009
On pourrait imaginer une classe pour les
guerriers, une classe pour les voleurs,

12
00:00:37,009 --> 00:00:39,399
une classe pour les magiciens
et ainsi de suite,

13
00:00:39,399 --> 00:00:43,509
pour un guerrier on pourrait donc imaginer
qu'il ait comme attribut typiquement

14
00:00:43,509 --> 00:00:46,250
un nom peut-être lié 
à un niveau d'énergie,

15
00:00:46,250 --> 00:00:50,509
une durée de vie, un guerrier aurait 
certainement une arme ;

16
00:00:50,509 --> 00:00:52,249
au niveau des méthodes 
on pourrait imaginer

17
00:00:52,249 --> 00:00:55,979
qu'un guerrier peut rencontrer
d'autres personnages,

18
00:00:55,979 --> 00:01:01,060
de même pour le voleur il aurait 
un nom, une énergie et une durée de vie

19
00:01:01,060 --> 00:01:05,129
il pourrait aussi rencontrer 
d'autres personnages, voire le voler,

20
00:01:05,129 --> 00:01:08,970
le magicien, lui aussi, aurait son nom,
son énergie, sa durée de vie,

21
00:01:08,970 --> 00:01:10,789
il pourrait rencontrer 
d'autres personnages

22
00:01:10,790 --> 00:01:13,960
et il aurait peut-être une baguette
au lieu d'avoir une arme.

23
00:01:13,959 --> 00:01:17,609
On pourrait également avoir 
des sorciers comme des sortes de magiciens

24
00:01:17,609 --> 00:01:20,510
qui en plus d'avoir une baguette 
auraient aussi un bâton,

25
00:01:20,510 --> 00:01:21,740
tout ceci,

26
00:01:21,739 --> 00:01:24,319
dupliquerait beaucoup de code, ça nous
ferait perdre beaucoup de temps

27
00:01:24,319 --> 00:01:26,139
d'écrire tout cela et surtout

28
00:01:26,140 --> 00:01:28,310
poserait de gros problèmes de
maintenance

29
00:01:28,310 --> 00:01:31,208
imaginons que l'on ne veuille plus que 
les personnages aient une durée de vie

30
00:01:31,208 --> 00:01:33,459
mais qu'ils aient par exemple
des points de vie

31
00:01:33,459 --> 00:01:36,710
ou que l'énergie ne soit plus un « int »
mais un « double »

32
00:01:36,710 --> 00:01:40,549
il faudrait alors corriger l'ensemble 
des classes que nous avons développé,

33
00:01:40,549 --> 00:01:42,920
c'est certainement pas 
une bonne façon de faire.

34
00:01:42,920 --> 00:01:47,580
La notion d'héritage en programmation 
permet de répondre à ce genre de problème

35
00:01:47,580 --> 00:01:51,469
en essayant de regrouper au maximum 
les parties communes,

36
00:01:51,469 --> 00:01:55,748
attributs et méthodes communes dans des
classes qu'on va appeler des super-classes

37
00:01:55,748 --> 00:02:00,289
qui regroupent des caractéristiques 
qui sont ensuite enrichies ou spécialisées

38
00:02:00,289 --> 00:02:02,879
pour d'autres classes plus spécifiques.

39
00:02:02,879 --> 00:02:06,149
Dans notre cas typiquement ça serait
une classe « Personnage »,

40
00:02:06,149 --> 00:02:08,690
un personnage générique qui
d'ailleurs répondrait

41
00:02:08,690 --> 00:02:11,100
à un des problèmes de la conception
présentée jusqu'ici

42
00:02:11,100 --> 00:02:16,028
c'est que on n'avait pas 
de classe de type « Personnage ».

43
00:02:16,028 --> 00:02:18,509
En anticipant bien sûr 
sur ce qui va suivre,

44
00:02:18,509 --> 00:02:21,308
avec l'héritage nous pourrions faire
quelque chose comme ceci

45
00:02:21,308 --> 00:02:23,088
avoir une classe « Personnage »

46
00:02:23,088 --> 00:02:25,728
qui regroupe l'ensemble 
des caractéristiques communes :

47
00:02:25,729 --> 00:02:28,030
nom, énergie, durée de vie

48
00:02:28,030 --> 00:02:29,240
et aussi les méthodes

49
00:02:29,240 --> 00:02:32,028
donc comme par exemple 
rencontrer un personnage

50
00:02:32,028 --> 00:02:33,928
donc une classe « Personnage » 
qui regroupe

51
00:02:33,928 --> 00:02:36,238
l'ensemble des caractéristiques 
de ce personnage

52
00:02:36,238 --> 00:02:40,329
et dont hériterait le voleur,
le magicien, le guerrier,

53
00:02:40,330 --> 00:02:45,020
ayant chacun ses spécificités, une arme pour
le guerrier, une baguette pour le magicien

54
00:02:45,020 --> 00:02:49,349
une spécialisation ici avec
une méthode « voler » pour le voleur, ...

55
00:02:49,349 --> 00:02:54,029
Et puis, de la classe magicien on pourrait
aussi faire une extension supplémentaire,

56
00:02:54,029 --> 00:02:55,469
un héritage de plus,

57
00:02:55,469 --> 00:02:59,629
pour avoir un sorcier qui est une sorte
de magicien qui aurait la baguette

58
00:02:59,629 --> 00:03:01,649
et en plus un bâton.

59
00:03:01,649 --> 00:03:05,969
Voilà ce à quoi sert l'héritage
en programmation orientée objet,

60
00:03:05,969 --> 00:03:08,849
il représente la relation « est-un »

61
00:03:08,849 --> 00:03:13,609
et permet d'éviter la duplication de code,
d'attributs et de méthodes.

62
00:03:13,609 --> 00:03:16,900
L'héritage permet ainsi de créer
des classes plus spécialisées,

63
00:03:16,900 --> 00:03:19,139
des classes enrichies,

64
00:03:19,139 --> 00:03:23,398
on va parler donc de « super-classe » 
pour une classe à partir de laquelle

65
00:03:23,398 --> 00:03:27,320
on va dériver des sous-classes ; 
on dira que les sous-classes héritent

66
00:03:27,320 --> 00:03:29,669
et on mettra la flèche donc dans ce
sens-là

67
00:03:29,669 --> 00:03:32,849
les sous-classes héritent 
de la super-classe

68
00:03:32,849 --> 00:03:35,679
et ces sous-classes seront donc
des extensions

69
00:03:35,680 --> 00:03:40,289
soit par ajout d'attributs, de méthodes, 
soit par spécialisation de méthodes

70
00:03:40,289 --> 00:03:43,749
ce seront des extensions
de la super-classe.

71
00:03:43,749 --> 00:03:46,140
Avant de les détailler 
chacune sur un exemple,

72
00:03:46,140 --> 00:03:48,748
voyons les implications 
de la relation d'héritage :

73
00:03:48,748 --> 00:03:50,469
si on a une sous-classe « C1 »

74
00:03:50,469 --> 00:03:54,979
qui est créée à partir d'une classe « C », 
qui hérite d'une classe « C »,

75
00:03:54,979 --> 00:03:57,209
on va dire que « C1 » est un « C »,

76
00:03:57,210 --> 00:03:59,240
c'est-à-dire que le type est hérité,

77
00:03:59,240 --> 00:04:02,530
donc par exemple si j'ai une variable « x » 
de type « C »,

78
00:04:02,530 --> 00:04:05,588
si j'ai une variable « y » de type « C1 »,

79
00:04:05,588 --> 00:04:13,629
je peux tout à fait mettre « y » dans « x » :
« y » est un « C », est aussi un « C » ;

80
00:04:13,629 --> 00:04:17,459
par contre, dans cette copie il est bien
sûr copié en tant que « C »,

81
00:04:17,459 --> 00:04:21,680
il perd sa spécificité « C1 »
puisqu'il est copié dans un « C »,

82
00:04:21,680 --> 00:04:23,970
donc il est copié ici en tant que « C »,

83
00:04:23,970 --> 00:04:28,470
c'est simplement la partie « C » 
de « y » qui est recopiée dans « x ».

84
00:04:28,470 --> 00:04:32,389
Par ailleurs, la classe « C1 » va hériter 
de l'ensemble des attributs

85
00:04:32,389 --> 00:04:35,659
et de l'ensemble des méthodes
de la classe « C » ;

86
00:04:35,659 --> 00:04:37,870
quand on dit l'ensemble des attributs
et l'ensemble des méthodes

87
00:04:37,870 --> 00:04:40,389
c'est sauf le constructeur 
et sauf le destructeur

88
00:04:40,389 --> 00:04:43,460
et encore en C++ 2011,
on peut hériter des constructeurs

89
00:04:43,460 --> 00:04:47,870
mais on en reparlera un petit peu plus
tard, dans des séquences vidéo suivantes.

90
00:04:47,870 --> 00:04:51,859
Les attributs et les méthodes de « C »
seront donc disponibles dans « C1 »

91
00:04:51,859 --> 00:04:55,650
sans qu'on ait besoin de les
redéfinir explicitement

92
00:04:55,649 --> 00:04:56,500
et enfin,

93
00:04:56,500 --> 00:04:59,680
des attributs et des méthodes
supplémentaires peuvent être ajoutés à « c1 »

94
00:04:59,680 --> 00:05:02,329
c'est ce qu'on appelle
l'enrichissement

95
00:05:02,329 --> 00:05:06,609
ou alors des méthodes héritées de « C »
dans « C1 » peuvent être redéfinies

96
00:05:06,610 --> 00:05:09,218
c'est ce qu'on appelle
la spécialisation.

97
00:05:09,218 --> 00:05:11,709
Revoyons tout ceci en détail 
sur un exemple :

98
00:05:11,709 --> 00:05:15,060
imaginons donc que l'on ait créé 
une super-classe « Personnage »

99
00:05:15,060 --> 00:05:19,710
et deux sous-classes « Guerrier »
et « Voleur » par exemple

100
00:05:19,710 --> 00:05:23,579
donc on a dit que lorsqu'une sous-classe 
« C1 » par exemple ici « guerrier »

101
00:05:23,579 --> 00:05:28,038
est créé à partir d'une super-classe « C »
donc par exemple ici « Personnage »

102
00:05:28,038 --> 00:05:29,828
le type est hérité.

103
00:05:29,828 --> 00:05:34,098
En fait, un guerrier est un personnage,
est aussi un personnage,

104
00:05:34,098 --> 00:05:35,869
ce qui nous permet d'écrire
le code suivant :

105
00:05:35,869 --> 00:05:40,040
supposons qu'on ait donc déclaré
une variable « p » de type « Personnage »,

106
00:05:40,040 --> 00:05:43,749
une variable « g » de type « Guerrier »,
on les manipule,

107
00:05:43,749 --> 00:05:48,499
et à un certain moment par exemple on dit
que le personnage « p » est le guerrier « g »,

108
00:05:48,499 --> 00:05:51,199
donc on met le guerrier « g »
dans le personnage « p »,

109
00:05:51,199 --> 00:05:55,869
on peut tout à fait faire ceci 
puisque un guerrier est un personnage,

110
00:05:55,869 --> 00:06:00,340
mais attention, on ne met ici 
de « g » dans « p » que sa partie personnage,

111
00:06:00,340 --> 00:06:04,100
cette affectation ici 
se fait en tant que personnage

112
00:06:04,100 --> 00:06:07,150
c'est la partie personnage de « g »
qui est copiée dans « p »,

113
00:06:07,150 --> 00:06:09,910
par exemple, les guerriers ont une arme
mais pas les personnages

114
00:06:09,910 --> 00:06:12,859
donc ici dans cette copie 
l'arme ne serait pas copiée.

115
00:06:12,859 --> 00:06:14,809
Évidemment, on ne peut pas 
faire le contraire,

116
00:06:14,809 --> 00:06:17,329
on ne peut pas écrire « g=p »,

117
00:06:17,329 --> 00:06:19,849
un personnage générique 
n'est pas un guerrier

118
00:06:19,849 --> 00:06:22,370
on peut avoir des personnages 
qui sont des voleurs,

119
00:06:22,370 --> 00:06:23,430
qui seraient des magiciens,

120
00:06:23,430 --> 00:06:27,709
on ne pourrait pas mettre un voleur 
dans un guerrier, ça n'aurait pas de sens

121
00:06:27,709 --> 00:06:32,758
donc ici la relation est bien orientée,
c'est un guerrier qui est un personnage.

122
00:06:32,758 --> 00:06:36,039
De même, on pourrait imaginer donc
avoir une fonction ici

123
00:06:36,038 --> 00:06:38,689
qui permet d'afficher un personnage

124
00:06:38,689 --> 00:06:45,088
et on peut afficher « g », « g » qui est 
ici un guerrier est passé comme paramètre

125
00:06:45,088 --> 00:06:48,848
à la fonction « afficher » 
en tant que personnage,

126
00:06:48,848 --> 00:06:51,278
la fonction « afficher » le verra
en tant que personnage,

127
00:06:51,278 --> 00:06:55,408
on peut faire ceci parce que 
un guerrier est un personnage.

128
00:06:55,408 --> 00:06:58,268
Deuxième aspect de l'héritage :
« guerrier » va hériter

129
00:06:58,268 --> 00:07:01,300
c'est-à-dire recevoir, contenir,

130
00:07:01,300 --> 00:07:04,720
l'ensemble des attributs 
et des méthodes de « Personnage »

131
00:07:04,720 --> 00:07:09,060
donc par exemple si « Personnage » avait
un nom, une énergie, une durée de vie

132
00:07:09,060 --> 00:07:11,699
et disons une méthode « rencontrer »

133
00:07:11,699 --> 00:07:15,408
et que « Guerrier » donc hérite 
de la classe « Personnage »,

134
00:07:15,408 --> 00:07:20,058
alors dans « Guerrier » on aura aussi
un nom, une énergie, une durée de vie

135
00:07:20,058 --> 00:07:22,418
sans qu'on ait besoin de les redéfinir

136
00:07:22,418 --> 00:07:24,359
et aussi une méthode « rencontrer »,

137
00:07:24,359 --> 00:07:25,720
donc on pourrait faire 
des choses comme ceci,

138
00:07:25,720 --> 00:07:31,758
supposons qu'on ait ici un guerrier « g » 
et un voleur « v » qui est aussi un personnage

139
00:07:31,758 --> 00:07:36,159
« g » ici, en tant que guerrier, va hériter 
la méthode « rencontrer »

140
00:07:36,159 --> 00:07:37,909
et donc on pourrait appeler,

141
00:07:37,909 --> 00:07:41,399
pourvu que cette méthode soit 
dans l'interface « public » de « Personnage »,

142
00:07:41,399 --> 00:07:46,050
on va pouvoir appeler
« g.rencontrer(v) »

143
00:07:46,050 --> 00:07:51,189
ici on passe donc le voleur « v »
comme argument à la méthode « rencontrer »

144
00:07:51,189 --> 00:07:54,329
mais ce qui m'importe ici c'est de voir
que la méthode rencontrer

145
00:07:54,329 --> 00:07:56,809
est disponible, accessible, dans « g »,

146
00:07:56,809 --> 00:08:00,400
« Guerrier » a hérité de la méthode
« rencontrer » de « Personnage ».

147
00:08:00,399 --> 00:08:04,018
De même, si on avait donc une méthode
quelconque dans « Guerrier »,

148
00:08:04,018 --> 00:08:08,209
on pourrait directement comme ceci 
utiliser l'attribut « énergie »

149
00:08:08,209 --> 00:08:11,069
dans une méthode de « guerrier » 
pourvu qu'il ne soit pas privé,

150
00:08:11,069 --> 00:08:17,630
l'attribut « énergie » qui est hérité
de « Personnage » dans la classe « Guerrier »

151
00:08:17,630 --> 00:08:21,989
sans qu'on ait besoin de rajouter 
aucune ligne de code, c'est automatique,

152
00:08:21,989 --> 00:08:25,098
c'est une des conséquences de l'héritage.

153
00:08:25,098 --> 00:08:28,098
Troisième et dernier aspect 
enfin que nous voulions souligner

154
00:08:28,098 --> 00:08:30,708
même si donc les attributs 
et les méthodes sont hérités,

155
00:08:30,708 --> 00:08:32,088
qu'on les a dans les sous-classes,

156
00:08:32,088 --> 00:08:36,150
on peut quand même ajouter des attributs
et des méthodes supplémentaires

157
00:08:36,150 --> 00:08:37,437
ce qu'on appelle l'enrichissement ;

158
00:08:37,437 --> 00:08:41,229
donc par exemple dans la classe « Guerrier »
on pourrait rajouter une arme

159
00:08:41,230 --> 00:08:45,680
et on peut aussi donc redéfinir des
méthodes ce qu'on appelle les spécialiser

160
00:08:45,680 --> 00:08:49,409
donc par exemple on pourrait redéfinir
la méthode « rencontrer »

161
00:08:49,409 --> 00:08:52,068
dans la classe « Voleur » 
en disant que par exemple

162
00:08:52,068 --> 00:08:56,339
un voleur quand il rencontre un autre
personnage, il le vole par exemple.

163
00:08:56,340 --> 00:08:59,930
L'héritage est donc une notion très
importante en programmation orientée objet

164
00:08:59,930 --> 00:09:02,400
parce qu'elle permet d'organiser le code,

165
00:09:02,400 --> 00:09:05,389
elle permet de rendre la conception 
beaucoup plus claire,

166
00:09:05,389 --> 00:09:09,229
elle permet d'expliciter les relations
structurelles et sémantiques

167
00:09:09,229 --> 00:09:11,199
qui existent entre différentes classes.

168
00:09:11,199 --> 00:09:16,639
Par exemple, un guerrier est un personnage, 
un sorcier est une sorte de magicien

169
00:09:16,639 --> 00:09:20,620
elle permet aussi donc d'éviter d'avoir 
à réécrire de grandes portions de code

170
00:09:20,620 --> 00:09:23,690
donc ce qu'on appelle 
de la redondance de code.

171
00:09:23,690 --> 00:09:26,579
Attention donc à bien utiliser
l'héritage à bonne escient.

172
00:09:26,579 --> 00:09:31,129
Il faut utiliser l'héritage pour 
représenter la relation « est-un »,

173
00:09:31,129 --> 00:09:33,559
un guerrier est un personnage

174
00:09:33,559 --> 00:09:38,009
mais on va pas dire qu'un guerrier est
une arme, on dit qu'un guerrier a une arme

175
00:09:38,009 --> 00:09:41,319
et pour représenter donc 
la relation à, possède,

176
00:09:41,320 --> 00:09:45,000
on utilisera ce qu'on avait vu jusqu'à
maintenant l'encapsulation

177
00:09:45,000 --> 00:09:49,350
et donc pour résumer un guerrier 
héritera de la classe « Personnage »

178
00:09:49,350 --> 00:09:54,860
mais aura, encapsulera, 
aura comme attribut une arme.

179
00:09:54,860 --> 00:09:58,220
Nous avons vu qu'une sous-classe
qui hérite d'une super-classe

180
00:09:58,220 --> 00:10:00,970
héritait, c'est-à-dire recevait,
possédait

181
00:10:00,970 --> 00:10:03,818
les attributs et les méthodes 
de cette super-classe

182
00:10:03,818 --> 00:10:06,129
sauf constructeur et destructeur.

183
00:10:06,129 --> 00:10:10,080
Cet aspect là est transitif, c'est-à-dire
que si nous avons une super super-classe

184
00:10:10,080 --> 00:10:14,340
dont hérite la super-classe, alors, nous
récupérerons au niveau de la sous-classe

185
00:10:14,340 --> 00:10:17,879
l'ensemble des méthodes et des
attributs de ces classes.

186
00:10:17,879 --> 00:10:21,219
Plus concrètement,
si j'ai une super super-classe « A »

187
00:10:21,219 --> 00:10:23,338
dont hérite une super-classe « B »

188
00:10:23,339 --> 00:10:26,030
et dont hérite une classe « C »,

189
00:10:26,030 --> 00:10:31,528
nous allons récupérer au niveau de « C »
les attributs et les méthodes de « B »,

190
00:10:31,528 --> 00:10:34,769
mais également celles de « A »
puisque « B » hérite de « A »

191
00:10:34,769 --> 00:10:37,980
« B » récupère les attributs et les
méthodes de « A »

192
00:10:37,980 --> 00:10:40,969
et donc dans « B » j'ai bien 
les attributs et les méthodes de « A »

193
00:10:40,969 --> 00:10:46,069
et donc par transitivité, je récupère au
travers de « B » dans « C » également

194
00:10:46,069 --> 00:10:50,370
les attributs et les méthodes de « A » ;
donc sur un exemple concret :

195
00:10:50,370 --> 00:10:55,590
si j'ai par exemple une classe Personnage
dont hérite une classe « Magicien »,

196
00:10:55,590 --> 00:10:58,259
et disons qu'un sorcier 
est une sorte de magicien

197
00:10:58,259 --> 00:11:01,719
donc la classe « Sorcier » hérite
de la classe « Magicien ».

198
00:11:01,719 --> 00:11:03,469
A ce moment là dans la classe « Sorcier »

199
00:11:03,469 --> 00:11:07,640
nous aurons également un nom,
une énergie, une durée de vie

200
00:11:07,640 --> 00:11:12,349
lesquels ont été donc hérités 
ainsi que la méthode « Rencontrer » bien sûr,

201
00:11:12,349 --> 00:11:15,299
lesquels ont été hérités
dans le magicien

202
00:11:15,299 --> 00:11:18,210
et sont donc à nouveau hérités 
au niveau du sorcier

203
00:11:18,210 --> 00:11:26,340
et bien sûr le sorcier récupérera en plus
un attribut « baguette » hérité du magicien.

204
00:11:26,340 --> 00:11:28,850
Nous avons donc comme ceci par héritage

205
00:11:28,850 --> 00:11:32,250
un enrichissement progressif
de différentes classes

206
00:11:32,280 --> 00:11:35,059
ce qui fait que au final 
nous allons trouver,

207
00:11:35,059 --> 00:11:37,749
si on dessine toutes les relations
d'héritage entre classes,

208
00:11:37,749 --> 00:11:43,629
un schéma arborescent, 
une structure comme ça d'arbres

209
00:11:43,629 --> 00:11:46,409
où on va voir donc 
toutes les dépendances entre les classes,

210
00:11:46,409 --> 00:11:47,970
toutes les relations « est-un »

211
00:11:47,970 --> 00:11:52,410
et les relations donc d'héritage
d'attributs, de méthodes et aussi de type

212
00:11:52,409 --> 00:11:56,449
qui va nous donner ce que l'on appelle
donc une hiérarchie de classe

213
00:11:56,449 --> 00:11:58,770
avec les classes les plus générales 
en haut, « Personnage »

214
00:11:58,770 --> 00:12:03,000
et les classes les plus spécialisées,
les plus enrichies, en bas.

215
00:12:03,000 --> 00:12:08,219
Pour résumer, la relation d'héritage 
permet d'éviter de la duplication de code

216
00:12:08,219 --> 00:12:11,412
en nous permettant de représenter
dans notre conception des programmes

217
00:12:11,412 --> 00:12:13,555
la relation « est-un »

218
00:12:13,555 --> 00:12:16,949
on va concevoir des super-classes
qui seront plus générales,

219
00:12:16,949 --> 00:12:18,933
qu'on va appeler aussi les classes parente

220
00:12:18,933 --> 00:12:21,339
qui vont regrouper les aspects 
plus généraux

221
00:12:21,339 --> 00:12:25,169
et dont hériteront ce qu'on appelle 
des sous-classes aussi des classes enfant

222
00:12:25,169 --> 00:12:29,490
qui récupéreront l'ensemble les attributs,
des méthodes et aussi le type

223
00:12:29,490 --> 00:12:32,629
de l'ensemble des super-classes
dont elles dépendent.

224
00:12:32,629 --> 00:12:37,009
Dans un premier temps, on va faire hériter
les sous-classes que d'une super-classe

225
00:12:37,019 --> 00:12:40,479
puis, on verra dans quelques semaines
que si l'on veut on peut faire hériter

226
00:12:40,479 --> 00:12:44,860
des sous-classes de plusieurs super-classes
ce que l'on appelle l'héritage multiple.

227
00:12:44,860 --> 00:12:47,860
Voilà tout ceci vous a donc présenté
d'un point de vue conceptuel

228
00:12:47,860 --> 00:12:50,409
ce qu'est l'héritage, d'un point de vue 
peut être un peu théorique,

229
00:12:50,409 --> 00:12:53,969
mais comment en pratique faisons-nous 
pour faire hériter une sous-classe

230
00:12:53,970 --> 00:12:55,519
d'une super-classe ?

231
00:12:55,519 --> 00:12:57,769
Commençons par regarder 
un exemple concret :

232
00:12:57,769 --> 00:12:59,999
supposons que l'on veuille définir

233
00:12:59,999 --> 00:13:04,209
une classe « Rectangle » 
qui a une largeur et qui a une hauteur

234
00:13:04,209 --> 00:13:06,980
et qui est une figure géométrique

235
00:13:06,980 --> 00:13:10,630
lesquelles figures géométriques
ont une position.

236
00:13:10,650 --> 00:13:12,699
On aurait donc le diagramme 
d'héritage suivant :

237
00:13:12,699 --> 00:13:16,952
une super-classe « FigureGeometrique »
avec un attribut « position »

238
00:13:16,952 --> 00:13:20,545
et une sous-classe « Rectangle » qui hérite
de « FigureGeometrique »,

239
00:13:20,545 --> 00:13:23,049
un rectangle est une figure géométrique,

240
00:13:23,049 --> 00:13:25,569
et qui aurait donc des attributs
supplémentaires,

241
00:13:25,569 --> 00:13:27,819
elle hériterait bien sûr 
l'attribut « position »

242
00:13:27,819 --> 00:13:29,479
mais elle aurait 
des attributs supplémentaires

243
00:13:29,479 --> 00:13:32,320
que sont une largeur et une hauteur.

244
00:13:32,320 --> 00:13:35,030
Comment écrivons-nous ceci
donc en C++ ?

245
00:13:35,029 --> 00:13:37,720
La syntaxe générale pour 
déclarer une sous-classe,

246
00:13:37,720 --> 00:13:40,279
pour faire hériter une classe 
d'une super-classe,

247
00:13:40,279 --> 00:13:45,150
est simplement d'ajouter
« : public », le nom de la super-classe,

248
00:13:45,150 --> 00:13:49,110
derrière la déclaration de la classe,
derrière l'entête de la classe,

249
00:13:49,110 --> 00:13:52,600
derrière la première ligne
« class », nom de la sous-classe ;

250
00:13:52,620 --> 00:13:56,208
donc par exemple pour notre « Rectangle » 
qui hérite de « FigureGeometrique »,

251
00:13:56,208 --> 00:13:59,498
nous avons la définition usuelle 
de la classe « Rectangle »

252
00:13:59,498 --> 00:14:06,269
mais on rajoute derrière « class Rectangle »
« : public FigureGeometrique ».

253
00:14:06,269 --> 00:14:10,230
Cela fait que la classe « Rectangle »
hérite de la classe « FigureGeométrique »

254
00:14:10,230 --> 00:14:13,160
un rectangle est une
figure géométrique

255
00:14:13,160 --> 00:14:16,079
et récupère l'ensemble de ses attributs 
et de ses méthodes,

256
00:14:16,079 --> 00:14:19,049
mis à part le constructeur et destructeur.

257
00:14:19,049 --> 00:14:20,712
La seule chose à ajouter donc

258
00:14:20,712 --> 00:14:23,935
à la définition usuelle 
de notre classe « Rectangle »,

259
00:14:23,935 --> 00:14:27,020
pour qu'elle hérite de la classe
« FigureGeometrique »,

260
00:14:27,020 --> 00:14:30,620
c'est simplement cette portion là de code.

261
00:14:30,620 --> 00:14:34,289
De la même façon, si je reviens 
à notre exemple des guerriers

262
00:14:34,289 --> 00:14:36,758
où un guerrier est un personnage

263
00:14:36,758 --> 00:14:40,169
on a donc une classe « Personnage »
qui serait définie,

264
00:14:40,169 --> 00:14:43,579
qu'obtiendrait tous les attributs
dont nous avons déjà parlé

265
00:14:43,580 --> 00:14:46,870
et on dit qu'un guerrier est un
personnage en écrivant comme ceci

266
00:14:46,870 --> 00:14:51,129
la déclaration de la classe « Guerrier » :
« class Guerrier : public Personnage »

267
00:14:51,129 --> 00:14:55,429
un guerrier hérite de « Personnage »,
un guerrier est un personnage

268
00:14:55,429 --> 00:14:58,910
et ensuite on aurait donc
la définition usuelle du guerrier

269
00:14:58,910 --> 00:15:04,240
avec donc comme attribut 
supplémentaire ici son arme.

270
00:15:04,240 --> 00:15:06,890
Voilà ceci conclut donc cette
introduction générale

271
00:15:06,890 --> 00:15:10,490
sur le concept très important 
en programmation orientée objet

272
00:15:10,490 --> 00:15:11,720
de l'héritage,

273
00:15:11,720 --> 00:15:14,920
les vidéos suivantes vont 
continuer à détailler ce concept

274
00:15:14,920 --> 00:15:16,879
d'un point de vue un peu plus pratique

275
00:15:16,879 --> 00:15:20,169
en ce qui concerne donc ses détails
et ses implications.
