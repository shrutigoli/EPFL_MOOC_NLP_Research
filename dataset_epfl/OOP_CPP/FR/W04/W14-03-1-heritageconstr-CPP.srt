1
00:00:04,103 --> 00:00:06,452
Dans cette séquence vidéo,
nous allons nous intéresser

2
00:00:06,452 --> 00:00:09,041
aux conséquences de l'héritage
sur les constructeurs

3
00:00:09,041 --> 00:00:11,685
c'est-à-dire l'initialisation
et les destructeurs.

4
00:00:12,692 --> 00:00:15,558
Nous avions vu dans une séquence vidéo
précédente sur les constructeurs

5
00:00:15,558 --> 00:00:17,634
que lors de l'instanciation
d'une sous-classe,

6
00:00:17,634 --> 00:00:19,769
il nous fallait initialiser les attributs.

7
00:00:19,769 --> 00:00:21,919
C'est ce que nous faisions par exemple,

8
00:00:21,919 --> 00:00:25,951
quand on déclare une instance « r »
de la classe « Rectangle »

9
00:00:26,733 --> 00:00:29,950
en passant par exemple
la largeur et la hauteur.

10
00:00:31,275 --> 00:00:34,495
Ceci était fait au moyen d'un
constructeur

11
00:00:35,055 --> 00:00:37,757
qui était en charge d'initialiser
les attributs.

12
00:00:38,335 --> 00:00:42,275
Mais si la classe « Rectangle » hérite
d'une classe « FigureGeometrique »

13
00:00:44,075 --> 00:00:47,292
alors la classe « Rectangle » reçoit
l'ensemble des attributs

14
00:00:47,433 --> 00:00:48,934
de la classe « FigureGeometrique ».

15
00:00:49,540 --> 00:00:52,076
Donc, les constructeurs de 
la classe « Rectangle »

16
00:00:52,076 --> 00:00:55,049
ont pour charge d'initialiser les
attributs de la classe « Rectangle »,

17
00:00:55,518 --> 00:01:00,043
y compris les attributs hérités de la
super-classe « FigureGeometrique ».

18
00:01:01,196 --> 00:01:04,549
Cependant, ce ne doit pas être le
concepteur de la classe « Rectangle »

19
00:01:04,549 --> 00:01:07,965
qui doit lui-même initialiser
les attributs

20
00:01:08,405 --> 00:01:10,160
de la classe « FigureGeometrique ».

21
00:01:10,393 --> 00:01:12,674
Il serait peut-être même bien
incapable de le faire

22
00:01:12,674 --> 00:01:15,657
si la super-classe avait des
attributs privés ;

23
00:01:16,060 --> 00:01:17,512
il ne pourrait pas y accéder.

24
00:01:18,084 --> 00:01:20,561
Et donc, comment le concepteur
de la sous-classe « Rectangle »

25
00:01:20,561 --> 00:01:24,484
peut-il initialiser les attributs de la
super-classe « FigureGeometrique » ?

26
00:01:24,913 --> 00:01:28,919
Pour cela, il doit faire appel dans le
constructeur de « Rectangle »

27
00:01:28,919 --> 00:01:32,058
au constructeur de la classe
« FigureGeometrique ».

28
00:01:32,872 --> 00:01:36,477
L'initialisation des attributs hérités
doit se faire en appelant

29
00:01:36,477 --> 00:01:40,581
les constructeurs des super-classes dans
le constructeur des sous-classes.

30
00:01:41,072 --> 00:01:43,317
Voyons comment tout ceci s'écrit en C++,

31
00:01:43,317 --> 00:01:44,721
d'abord d'un point de vue général

32
00:01:44,721 --> 00:01:46,445
puis ensuite en l'illustrant sur
un exemple.

33
00:01:47,088 --> 00:01:49,479
L'appel au constructeur de la super-classe

34
00:01:49,479 --> 00:01:51,385
depuis le constructeur de la sous-classe,

35
00:01:51,385 --> 00:01:54,244
se fait dans la partie liste
d'initialisation.

36
00:01:54,532 --> 00:01:56,229
Cette partie, qui commence
par deux points

37
00:01:56,229 --> 00:01:58,408
qu'on appelle aussi parfois
« section deux points »

38
00:01:58,408 --> 00:02:02,160
qui est juste entre l'en-tête de la
sous-classe et sa définition.

39
00:02:03,398 --> 00:02:07,260
Concrètement, juste après l'en-tête
du constructeur de la sous-classe,

40
00:02:07,260 --> 00:02:10,546
dans la section deux points, vous
commencerez par faire un appel

41
00:02:10,546 --> 00:02:13,609
au constructeur de la super-classe que
vous souhaitez appeler

42
00:02:13,609 --> 00:02:16,015
donc vous placerez les arguments
dont vous avez besoin

43
00:02:16,015 --> 00:02:18,229
et bien sûr, le constructeur de
la super-classe

44
00:02:18,229 --> 00:02:19,850
a le même nom que cette super-classe.

45
00:02:20,115 --> 00:02:21,601
Ensuite, avec une virgule,

46
00:02:21,601 --> 00:02:24,482
exactement comme on initialisait
les différents attributs,

47
00:02:24,482 --> 00:02:27,077
vous aurez donc la suite de
la liste d'initialisation

48
00:02:27,077 --> 00:02:29,100
qui initialisera les attributs.

49
00:02:29,706 --> 00:02:31,164
Voyons donc un exemple concret,

50
00:02:31,164 --> 00:02:35,077
avec ici la classe « Rectangle » qui hérite
de la classe « FigureGeometrique » ;

51
00:02:35,077 --> 00:02:39,117
on a défini une classe « FigureGeometrique »
qui, je vous rappelle,

52
00:02:39,279 --> 00:02:42,559
a un attribut « position » qu'on aura
mis ici en « protected »

53
00:02:43,107 --> 00:02:49,091
et puis qui par exemple a un constructeur
qui reçoit deux coordonnées « x » et « y »

54
00:02:49,686 --> 00:02:52,149
pour pouvoir initialiser la position.

55
00:02:52,541 --> 00:02:56,562
Donc ici, dans la liste d'initialisation
du constructeur « FigureGeometrique »,

56
00:02:56,562 --> 00:02:59,974
on a l'initialisation de son
attribut « position ».

57
00:03:00,636 --> 00:03:03,604
Maintenant, regardons le constructeur
de la sous-classe « Rectangle »,

58
00:03:03,604 --> 00:03:07,013
le constructeur de « Rectangle » va
prendre comme d'habitude

59
00:03:07,013 --> 00:03:11,643
deux paramètres « l » et « h » pour initialiser
sa largeur et sa hauteur,

60
00:03:11,741 --> 00:03:14,009
comme on l'avait fait avant l'héritage,

61
00:03:14,009 --> 00:03:17,509
mais il prendra en plus deux
paramètres « x » et « y »,

62
00:03:17,509 --> 00:03:20,641
on a décidé ici de les mettre en premier
mais ce n'est pas nécessaire,

63
00:03:20,641 --> 00:03:24,694
pour pouvoir initialiser la position de la
« FigureGeometrique »

64
00:03:24,694 --> 00:03:28,172
au travers de l'appel de ce constructeur
de « FigureGeometrique »

65
00:03:28,172 --> 00:03:29,749
qui prend deux paramètres.

66
00:03:29,911 --> 00:03:33,478
Donc, le constructeur de « Rectangle » aura
ses quatre paramètres

67
00:03:33,478 --> 00:03:36,756
puis dans la section liste
d'initialisation,

68
00:03:36,756 --> 00:03:39,394
un appel au constructeur
« FigureGeometrique »,

69
00:03:39,394 --> 00:03:41,467
ici on a choisi l'appel à deux paramètres,

70
00:03:41,467 --> 00:03:44,236
puis derrière, avec une virgule,

71
00:03:44,236 --> 00:03:47,494
la liste d'initialisation de ses
propres attributs.

72
00:03:48,987 --> 00:03:51,242
Ici, nous avons fait un appel explicite

73
00:03:51,242 --> 00:03:53,749
à un constructeur de la classe 
« FigureGeometrique ».

74
00:03:54,218 --> 00:03:58,067
Bien entendu, si la classe a un
constructeur par défaut,

75
00:03:58,067 --> 00:04:01,267
il n'est pas nécessaire de faire
une invocation explicite

76
00:04:01,267 --> 00:04:02,741
de ce constructeur.

77
00:04:03,003 --> 00:04:04,615
Un constructeur par défaut,
je vous le rappelle,

78
00:04:04,615 --> 00:04:07,645
c'est un constructeur qui n'a pas
besoin d'arguments,

79
00:04:07,645 --> 00:04:10,367
c'est le constructeur qui est
sans arguments,

80
00:04:10,367 --> 00:04:13,828
et dans ce cas-là, il n'est pas
du tout nécessaire

81
00:04:13,828 --> 00:04:17,223
de rajouter explicitement l'appel
au constructeur,

82
00:04:17,223 --> 00:04:20,270
c'est le compilateur qui va se charger
d'invoquer automatiquement

83
00:04:20,270 --> 00:04:21,747
le constructeur par défaut.

84
00:04:22,039 --> 00:04:24,570
Mais on aura de toute façon un appel
au constructeur,

85
00:04:24,570 --> 00:04:26,793
ce sera l'appel au constructeur
par défaut.

86
00:04:27,303 --> 00:04:30,336
Par contre, si la classe n'a pas de
constructeur par défaut,

87
00:04:30,336 --> 00:04:33,478
alors il faut évidemment invoquer
explicitement

88
00:04:33,478 --> 00:04:35,194
un de ces constructeurs,

89
00:04:35,194 --> 00:04:37,636
sinon le compilateur ne saura
pas quoi faire,

90
00:04:37,636 --> 00:04:41,046
il veut absolument appeler un
constructeur de la super-classe,

91
00:04:41,046 --> 00:04:43,640
si cette super-classe n'a pas de
constructeur par défaut,

92
00:04:43,640 --> 00:04:48,495
il faut absolument utiliser un constructeur
explicite qui doit être présent,

93
00:04:49,157 --> 00:04:53,818
et donc faire un appel explicite dans
la section deux points,

94
00:04:53,818 --> 00:04:56,547
dans la liste de l'initialisation du
constructeur de la sous-classe.

95
00:04:56,574 --> 00:04:59,972
Bien sûr, la sous-classe elle-même doit
avoir un constructeur explicite,

96
00:04:59,972 --> 00:05:03,109
il faut bien un endroit où écrire
cet appel explicite

97
00:05:03,109 --> 00:05:05,158
au constructeur de la super-classe.

98
00:05:05,917 --> 00:05:09,369
Si maintenant notre « FigureGeometrique »
avait un constructeur par défaut,

99
00:05:09,369 --> 00:05:13,509
il n'était donc pas nécessaire de faire
cet appel explicite à un constructeur,

100
00:05:13,509 --> 00:05:16,713
et on aurait plus simplement pu
ne pas l'écrire.

101
00:05:16,713 --> 00:05:19,707
Voici un autre exemple, qui est différent
du précédent,

102
00:05:19,707 --> 00:05:23,889
où la classe « FigureGeometrique » a un
constructeur par défaut, par défaut.

103
00:05:25,155 --> 00:05:27,369
Regardons ce qui se passe dans ce cas,

104
00:05:27,369 --> 00:05:31,106
ici nous avons le constructeur de la
sous-classe « Rectangle » qui,

105
00:05:31,106 --> 00:05:35,248
dans sa liste d'initialisation, ne fait
pas explicitement appel

106
00:05:35,248 --> 00:05:38,769
aux constructeurs de la super-classe dont
elle hérite, « FigureGeometrique »,

107
00:05:38,769 --> 00:05:41,919
ceci est possible parce que la classe
« FigureGeometrique »

108
00:05:41,919 --> 00:05:44,155
a un constructeur par défaut,

109
00:05:44,155 --> 00:05:46,517
on suppose ici qu'on n'a pas écrit
le constructeur

110
00:05:46,517 --> 00:05:51,133
et donc elle a le constructeur par défaut,
fourni par défaut, par le compilateur.

111
00:05:51,537 --> 00:05:54,996
Donc, il y a bien ici, au début du
constructeur

112
00:05:54,996 --> 00:05:56,826
de la sous-classe « Rectangle »,

113
00:05:56,826 --> 00:06:01,077
un appel au constructeur par défaut de
la super-classe « FigureGeometrique ».

114
00:06:01,266 --> 00:06:05,360
A noter que nous avons ici deux fois un
appel a un constructeur par défaut,

115
00:06:05,360 --> 00:06:10,919
puisque ici la classe « FigureGeometrique »,
elle, a une position, comme attribut,

116
00:06:11,553 --> 00:06:14,417
et comme on n'a pas explicitement
écrit le constructeur,

117
00:06:14,417 --> 00:06:17,625
c'est le constructeur par défaut ,
qui est fourni par défaut,

118
00:06:17,724 --> 00:06:19,039
par le compilateur,

119
00:06:19,039 --> 00:06:22,797
lequel va appeler les constructeurs par
défaut de chacun des attributs.

120
00:06:22,797 --> 00:06:25,740
Donc ici, le constructeur
par défaut, par défaut,

121
00:06:25,740 --> 00:06:28,425
appelle le constructeur
par défaut de « Position ».

122
00:06:29,046 --> 00:06:31,672
Pour résumer, l'appel au constructeur
de « Rectangle »,

123
00:06:31,672 --> 00:06:33,001
par exemple,

124
00:06:33,001 --> 00:06:35,988
si je faisais une déclaration comme ceci,

125
00:06:36,139 --> 00:06:40,272
« Rectangle r(3.0 , 4.0) ; »

126
00:06:41,063 --> 00:06:46,058
appellera le constructeur de « Rectangle »
ici en passant 3 et 4 comme paramètres,

127
00:06:46,058 --> 00:06:49,871
et commencera par appeler le constructeur
par défaut, fourni par défaut,

128
00:06:49,871 --> 00:06:52,960
par le compilateur de la classe
« FigureGeometrique »,

129
00:06:53,055 --> 00:06:55,710
lequel appellera le constructeur par
défaut de « Position »,

130
00:06:55,710 --> 00:06:58,145
je suppose ici que « Position »
est une classe,

131
00:06:58,145 --> 00:07:00,989
et qu'il a donc soit un constructeur
par défaut, par défaut,

132
00:07:00,989 --> 00:07:03,991
soit un constructeur par défaut
explicitement écrit.

133
00:07:04,413 --> 00:07:07,608
On aura donc en premier une construction
par défaut de position

134
00:07:07,608 --> 00:07:10,750
qui terminera la construction par défaut
de « FigureGeometrique »

135
00:07:10,750 --> 00:07:14,310
et qui permettra ensuite au
constructeur de « Rectangle »

136
00:07:14,310 --> 00:07:17,616
de continuer à initialiser ses
autres attributs.

137
00:07:18,829 --> 00:07:20,732
Nous allons revenir en détails
dans un instant

138
00:07:20,732 --> 00:07:24,034
sur l'ordre d'appel des constructeurs
dans une hiérarchie d'héritages.

139
00:07:24,802 --> 00:07:27,217
Mais au préalable, je voudrais
insister sur une remarque,

140
00:07:27,217 --> 00:07:29,243
il n'est pas nécessaire

141
00:07:29,243 --> 00:07:31,952
d'avoir des attributs supplémentaires
dans la sous-classe ;

142
00:07:31,952 --> 00:07:35,689
par exemple, si nous avons un carré,
qui est un rectangle,

143
00:07:35,689 --> 00:07:38,497
qui est une certaine sorte de rectangle,

144
00:07:38,497 --> 00:07:41,779
un carré est un rectangle qui a simplement
la largeur égale à la hauteur,

145
00:07:41,948 --> 00:07:45,222
alors, on ne va pas introduire dans la
sous-classe « Carre »,

146
00:07:45,222 --> 00:07:46,611
d'attributs supplémentaires,

147
00:07:46,611 --> 00:07:49,222
mais on peut quand même, dans le
constructeur de « Carre »,

148
00:07:49,222 --> 00:07:50,802
et il faudrait le faire ici,

149
00:07:50,802 --> 00:07:53,097
on peut quand même, dans le constructeur
d'une sous-classe

150
00:07:53,097 --> 00:07:54,981
qui n'introduit pas de nouveaux attributs,

151
00:07:54,981 --> 00:07:57,975
faire un appel, avoir besoin,
de faire un appel,

152
00:07:57,975 --> 00:08:00,145
aux constructeurs de la super-classe.

153
00:08:00,440 --> 00:08:02,478
Regardons cet exemple en détails,

154
00:08:02,478 --> 00:08:05,910
on dit donc qu'un carré est un rectangle,

155
00:08:05,910 --> 00:08:08,532
dans la classe « Rectangle », nous
avons comme d'habitude,

156
00:08:08,737 --> 00:08:11,926
les attributs largeur et hauteur,

157
00:08:11,926 --> 00:08:15,579
lesquels sont donc hérités dans
la classe « Carre »

158
00:08:15,579 --> 00:08:17,772
et on dira simplement que
carré est un rectangle

159
00:08:17,772 --> 00:08:20,127
où la largeur est égale à la hauteur.

160
00:08:20,598 --> 00:08:23,091
Et on ne rajoute rien de plus, on ne
change rien d'autre à « Carre ».

161
00:08:23,414 --> 00:08:25,440
Donc, on va simplement déclarer
la classe « Carre »

162
00:08:25,440 --> 00:08:28,019
comme étant une sous-classe
de la classe « Rectangle »,

163
00:08:28,019 --> 00:08:31,256
on ne va rien lui ajouter de particulier,

164
00:08:31,256 --> 00:08:33,890
je reviendrai avec une remarque
finale dans un instant,

165
00:08:33,890 --> 00:08:34,745
mais simplement,

166
00:08:34,745 --> 00:08:38,864
on va forcer son constructeur à
prendre ici une seule taille,

167
00:08:38,864 --> 00:08:41,587
la taille du côté d'un carré,

168
00:08:41,587 --> 00:08:45,200
et à faire appel ici au constructeur
de la super-classe

169
00:08:45,820 --> 00:08:48,150
en demandant au constructeur
de la super-classe

170
00:08:48,271 --> 00:08:51,655
d'avoir la hauteur et la largeur qui
sont de même taille.

171
00:08:52,423 --> 00:08:56,260
Et on n'ajoutera rien dans le corps du
constructeur de la sous-classe

172
00:08:56,260 --> 00:08:57,740
de la classe « Carre ».

173
00:08:57,835 --> 00:09:00,371
Voilà, et c'est tout simplement
ces trois lignes, ici,

174
00:09:00,371 --> 00:09:02,181
on n'a rien besoin d'ajouter,

175
00:09:02,181 --> 00:09:05,142
elles permettront d'avoir un carré qui
est un rectangle

176
00:09:05,142 --> 00:09:09,314
dans lequel la construction oblige la
largeur et la hauteur à être égales.

177
00:09:09,924 --> 00:09:12,631
Alors, quand on dit qu'il n'y a
rien à ajouter,

178
00:09:12,631 --> 00:09:16,368
bien sûr, si au niveau de « Rectangle »,
nous avions une méthode

179
00:09:16,628 --> 00:09:19,707
qui serait par exemple une
méthode « SetHauteur »

180
00:09:20,872 --> 00:09:23,798
ou une méthode « SetLargeur »,

181
00:09:24,248 --> 00:09:27,287
alors ces deux méthodes seraient
héritées par « Carre »

182
00:09:27,287 --> 00:09:30,353
et là, il faudrait bien sûr aussi
les redéfinir

183
00:09:30,353 --> 00:09:33,023
pour obliger « SetHauteur » et « SetLargeur »

184
00:09:33,023 --> 00:09:36,048
à continuer de garder hauteur
et largeur égales.

185
00:09:36,408 --> 00:09:38,898
Donc on pourrait par exemple faire
quelque chose comme ceci,

186
00:09:38,898 --> 00:09:40,957
au niveau du « Carre »,

187
00:09:42,367 --> 00:09:45,780
en spécialisant la méthode « SetHauteur »,

188
00:09:46,688 --> 00:09:51,130
laquelle, dans « Carre », va masquer
celle de « Rectangle »,

189
00:09:52,400 --> 00:09:55,814
et qui, bien sûr, mettrait la hauteur...

190
00:09:57,586 --> 00:09:59,547
aux paramètres qu'elle a reçus,

191
00:09:59,742 --> 00:10:02,733
mais en plus, c'est ça qui est nouveau
par rapport à « Rectangle »,

192
00:10:03,443 --> 00:10:07,939
en plus, obligerait la largeur
à être égale

193
00:10:09,237 --> 00:10:11,637
à cette nouvelle hauteur.

194
00:10:11,712 --> 00:10:14,673
C'est donc cette ligne supplémentaire
qui serait rajoutée

195
00:10:14,673 --> 00:10:16,906
dans la spécialisation de « Carre »,

196
00:10:17,069 --> 00:10:19,660
et on ferait la même chose pour
cette largeur, bien entendu.

197
00:10:20,714 --> 00:10:24,214
Pour résumer, à ce stade, chaque
constructeur d'une sous-classe

198
00:10:24,214 --> 00:10:27,009
doit appeler un des constructeurs
de la super-classe

199
00:10:27,009 --> 00:10:30,845
et cet appel doit se trouver en premier
dans la liste d'initialisation.

200
00:10:30,845 --> 00:10:34,083
Que se passe-t-il si l'on oublie de faire
explicitement appel

201
00:10:34,083 --> 00:10:36,130
à un des constructeurs
de la super-classe ?

202
00:10:36,727 --> 00:10:39,654
Alors, le constructeur de la sous-classe
appelle automatiquement

203
00:10:39,654 --> 00:10:42,248
le constructeur par défaut
de la super-classe

204
00:10:42,248 --> 00:10:45,867
et évidemment, si la super-classe n'a
pas de constructeur par défaut,

205
00:10:45,867 --> 00:10:49,167
il y aura une erreur de la part
du compilateur.

206
00:10:50,005 --> 00:10:52,669
J'en profite pour vous rappeler que
le constructeur par défaut,

207
00:10:52,669 --> 00:10:54,972
c'est-à-dire le constructeur qui ne
prend pas d'arguments,

208
00:10:54,972 --> 00:10:57,574
est un peu particulier car
si on ne l'écrit pas,

209
00:10:57,574 --> 00:11:01,156
on a par défaut une version fournie par
le compilateur

210
00:11:01,162 --> 00:11:03,012
de ce constructeur par défaut,

211
00:11:03,097 --> 00:11:05,868
et que dès que l'on écrit un
autre constructeur,

212
00:11:05,868 --> 00:11:09,264
alors le constructeur par défaut,
par défaut, n'existe plus,

213
00:11:09,264 --> 00:11:11,261
et si on veut un constructeur par défaut,

214
00:11:11,261 --> 00:11:12,791
il faut à ce moment-là le réécrire.

215
00:11:13,362 --> 00:11:16,080
Donc, pour éviter tout problème
lorsqu'on fait de l'héritage,

216
00:11:16,080 --> 00:11:17,378
dans un premier temps,

217
00:11:17,378 --> 00:11:21,234
je vous conseille de toujours déclarer
au moins un constructeur

218
00:11:21,234 --> 00:11:25,281
et de toujours faire un appel explicite à
un des constructeurs de la super-classe

219
00:11:25,281 --> 00:11:26,648
dans la sous-classe,

220
00:11:26,648 --> 00:11:29,238
même si c'est le constructeur par
défaut que vous voulez appeler,

221
00:11:29,238 --> 00:11:31,269
vous pouvez quand même l'écrire
explicitement,

222
00:11:31,269 --> 00:11:33,612
ce sera plus clair dans un premier temps.

223
00:11:34,560 --> 00:11:36,452
Voilà, ceci conclut cette première partie

224
00:11:36,452 --> 00:11:39,063
sur les conséquences de l'héritage
sur les constructeurs,

225
00:11:39,063 --> 00:11:40,639
dans la seconde partie,

226
00:11:40,639 --> 00:11:43,717
nous reviendrons en détails sur l'ordre
d'appel des constructeurs

227
00:11:43,717 --> 00:11:45,950
dans une hiérarchie de classes,

228
00:11:45,950 --> 00:11:48,324
puis nous vous donnerons encore
quelques compléments.
