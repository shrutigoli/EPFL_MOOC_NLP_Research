1
00:00:04,320 --> 00:00:07,323
Voici donc la dernière série 
de séquence vidéo de ce mooc

2
00:00:07,323 --> 00:00:11,137
sur l'introduction à la programmation
orientée objet en C++.

3
00:00:11,137 --> 00:00:13,210
Dans cette dernière série
de séquence vidéo,

4
00:00:13,210 --> 00:00:16,074
nous avons voulu vous présenter 
un problème dans sa globalité,

5
00:00:16,074 --> 00:00:19,400
un problème très général,
vous présenter une étude de cas,

6
00:00:19,400 --> 00:00:22,166
où il s'agira donc de présenter
différentes montres,

7
00:00:22,166 --> 00:00:24,403
des montres analogiques,
des montres à aiguille,

8
00:00:24,403 --> 00:00:26,781
des montres digitales, 
des montres qui seront les deux,

9
00:00:26,781 --> 00:00:30,768
les montres auront des accessoires
comme des bracelets, des boîtiers, etc.

10
00:00:30,768 --> 00:00:34,213
Donc un cadre assez général,
qui pourrait par exemple servir

11
00:00:34,213 --> 00:00:37,192
à un logiciel de gestion de bijouterie,
ou un logiciel de vente,

12
00:00:37,192 --> 00:00:39,028
ou même d'impressions de catalogues,

13
00:00:39,028 --> 00:00:41,826
dans le cadre duquel nous allons
pouvoir vous illustrer

14
00:00:41,826 --> 00:00:45,324
différents concepts présentés 
tout au long de ce cours.

15
00:00:45,324 --> 00:00:47,940
Les thématiques que nous avons
choisi de vous présenter

16
00:00:47,940 --> 00:00:50,698
dans ces vidéos de synthèse 
contiennent tout d'abord

17
00:00:50,698 --> 00:00:53,274
bien sûr la notion 
de conception du problème,

18
00:00:53,274 --> 00:00:56,732
la modélisation du problème d'un
point de vue programmation orienté objet,

19
00:00:56,732 --> 00:00:58,845
quelles classes doivent hériter 
de quelles autres,

20
00:00:58,845 --> 00:01:01,102
est-ce qu'il doit y avoir
des classes abstraites,

21
00:01:01,102 --> 00:01:04,565
comment par exemple 
rendre le calcul du prix

22
00:01:04,565 --> 00:01:07,461
des montres polymorphiques,
ou l'affichage polymorphique,

23
00:01:07,461 --> 00:01:10,988
L'affichage justement sera traité 
de façon très spécifique

24
00:01:10,988 --> 00:01:13,646
avec la surcharge 
de l'opérateur d'affichage,

25
00:01:13,646 --> 00:01:16,248
et puis révision de la façon
de faire un affichage

26
00:01:16,248 --> 00:01:19,261
qui s'adapte à chacune des classes,
un affichage polymorphique.

27
00:01:19,261 --> 00:01:24,221
Nous avons aussi introduit la surcharge
d'opérateurs au travers d'un opérateur +=,

28
00:01:24,221 --> 00:01:27,136
qui nous permettra 
de rajouter des composants

29
00:01:27,136 --> 00:01:29,599
aux montres que l'on voudra constituer.

30
00:01:29,599 --> 00:01:31,931
Nous aborderons également 
l'héritage multiple

31
00:01:31,931 --> 00:01:34,814
avec les différents mécanismes, 
mécanisme digital

32
00:01:34,814 --> 00:01:36,477
ou mécanisme analogique,

33
00:01:36,477 --> 00:01:38,752
à aiguille, voire les mécanismes doubles,

34
00:01:38,752 --> 00:01:41,330
qui sont à la fois 
à aiguille et digitales,

35
00:01:41,330 --> 00:01:44,426
et puis nous terminerons donc
par une dernière séquence vidéo,

36
00:01:44,426 --> 00:01:48,781
qui présentera le problème non encore 
abordé dans le cours pour l'instant,

37
00:01:48,781 --> 00:01:51,402
de la notion de copie polymorphique,

38
00:01:51,402 --> 00:01:54,034
comment copier des collections hétérogènes,

39
00:01:54,034 --> 00:01:57,994
comment allons-nous copier les montres 
qui contiennent différents composants,

40
00:01:57,994 --> 00:02:00,539
qui peuvent se comporter
de façon différente,

41
00:02:00,539 --> 00:02:02,777
soit du point de vue du prix,
soit de l'affichage.

42
00:02:02,777 --> 00:02:05,881
Voilà donc le menu 
de cette dernière semaine.

43
00:02:05,881 --> 00:02:09,952
Mais commençons par présenter
le problème un petit plus en détails,

44
00:02:09,952 --> 00:02:12,505
ce que nous voulons donc modéliser 
ce sont des montres,

45
00:02:12,505 --> 00:02:14,709
on va dire que des montres 
sont des produits,

46
00:02:14,709 --> 00:02:18,535
au sens qu'un produit est quelque chose
que l'on peut vendre, qui a un prix.

47
00:02:18,955 --> 00:02:22,608
Les montres par ailleurs auront
des mécanismes de base,

48
00:02:22,608 --> 00:02:25,796
typiquement donc des aiguilles
pour pouvoir afficher l'heure,

49
00:02:25,796 --> 00:02:28,364
et seront constituées 
de différents accessoires,

50
00:02:28,364 --> 00:02:32,667
comme un boîtier, un bracelet,
le verre sur la montre, le fermoir...

51
00:02:32,667 --> 00:02:36,156
Les produits dont nous avons parlé
tout à l'heure ont un prix,

52
00:02:36,156 --> 00:02:38,909
et le calcul de ce prix peut varier,

53
00:02:38,909 --> 00:02:42,228
donc cet aspect là est intéressant 
pour la conception,

54
00:02:42,228 --> 00:02:46,982
à partir d'une valeur de base quoi doit 
être fixée au niveau du produit.

55
00:02:46,982 --> 00:02:53,471
Tous les produits sont affichables, 
et cet affichage peut aussi varier,

56
00:02:53,471 --> 00:02:56,396
chaque produit doit être affiché 
à sa façon propre.

57
00:02:56,396 --> 00:02:59,092
Bien sûr ce qui est derrière ces notions
de « peut varier »

58
00:02:59,092 --> 00:03:03,349
et « affichable à sa façon propre »,
c'est la notion de polymorphisme.

59
00:03:03,889 --> 00:03:08,261
Ensuite les mécanismes dont 
nous avons parlé juste au dessus,

60
00:03:08,261 --> 00:03:11,833
et les accessoires dont sont 
constituées les montres,

61
00:03:11,833 --> 00:03:15,923
ces mécanismes et ces accessoires
sont aussi des produits.

62
00:03:15,923 --> 00:03:20,186
On voit ici donc l'emploi plusieurs fois
du verbe être,

63
00:03:20,186 --> 00:03:24,004
qui va nous qualifier donc
des relations d'héritage.

64
00:03:24,004 --> 00:03:28,338
On pourrait par exemple acheter séparément
des accessoires, des mécanismes,

65
00:03:28,338 --> 00:03:30,881
donc chacun pourrait se comporter 
comme un produit,

66
00:03:30,881 --> 00:03:33,691
donc chacun pourrait avoir
son prix propre,

67
00:03:33,691 --> 00:03:36,772
et sa façon propre de calculer son prix.

68
00:03:36,772 --> 00:03:39,860
Il existe fondamentalement
trois sortes de mécanismes,

69
00:03:39,860 --> 00:03:41,707
des mécanismes que l'on va qualifier 
d'analogiques,

70
00:03:41,707 --> 00:03:43,595
pour représenter donc 
les montres à aiguilles,

71
00:03:43,595 --> 00:03:47,505
les montres digitales seront représentées 
par un mécanisme digital,

72
00:03:47,505 --> 00:03:50,896
et puis on aura des montres 
qui seront à la fois à aiguille

73
00:03:50,896 --> 00:03:53,755
et à la fois à affichage digital.

74
00:03:53,755 --> 00:03:57,177
Enfin pour ces mécanismes que 
l'on a qualifiés de « mécanismes doubles »,

75
00:03:57,177 --> 00:03:59,950
on supposera qu'ils n'indiquent 
qu'une seule heure.

76
00:03:59,950 --> 00:04:04,841
Donc on va dire qu'il n'y aura 
qu'une heure associée à une montre ici,

77
00:04:04,841 --> 00:04:07,712
et qu'elle aura deux façons
de se représenter.

78
00:04:07,712 --> 00:04:09,593
C'est un point de vue 
choisi pour l'exercice,

79
00:04:09,593 --> 00:04:12,090
évidemment on aurait pu choisir
un autre point de vue,

80
00:04:12,090 --> 00:04:16,486
qui consistait à associer une heure à 
chacun des mécanismes de représentation,

81
00:04:16,486 --> 00:04:17,865
soit aiguille, soit digital,

82
00:04:17,865 --> 00:04:19,543
mais ce n'est pas le point de vue
qu'on a pris ici,

83
00:04:19,543 --> 00:04:22,358
justement pour pouvoir introduire
une problématique intéressante

84
00:04:22,358 --> 00:04:24,219
au niveau du codage de ces classes.

85
00:04:24,219 --> 00:04:26,356
Pour résumer, au niveau des classes,

86
00:04:26,356 --> 00:04:29,177
c'est-à-dire au niveau des types d'objets
que nous aurons dans notre programme,

87
00:04:29,177 --> 00:04:32,578
nous allons avoir donc des montres, 
des produits,

88
00:04:32,578 --> 00:04:36,447
des mécanismes, et des accessoires,

89
00:04:36,447 --> 00:04:39,414
les accessoires peuvent être 
des boîtiers, des bracelets,

90
00:04:39,414 --> 00:04:41,294
tous ceci seront des classes,

91
00:04:41,294 --> 00:04:43,993
au niveau des mécanismes, on peut avoir 
des mécanismes analogiques,

92
00:04:43,993 --> 00:04:47,095
des mécanismes digitaux, 
des mécanismes doubles.

93
00:04:47,742 --> 00:04:49,288
Voilà l'ensemble des classes.

94
00:04:49,288 --> 00:04:51,356
Au niveau des relations donc d'héritage,

95
00:04:51,356 --> 00:04:54,501
nous avons vu que les montres
sont des produits,

96
00:04:54,501 --> 00:04:56,750
donc vont hériter de produits.

97
00:04:56,750 --> 00:05:01,948
On a vu que les mécanismes analogiques,
digitaux et doubles,

98
00:05:01,948 --> 00:05:06,475
sont des sortes de mécanismes,
donc les trois classes ici

99
00:05:06,475 --> 00:05:10,620
vont hériter naturellement 
de la classe « Mecanisme »,

100
00:05:10,620 --> 00:05:14,803
nous avons aussi vu que
des mécanismes et les accessoires

101
00:05:14,803 --> 00:05:17,761
sont également des produits.

102
00:05:17,761 --> 00:05:23,265
Tout ceci,donc, vaa nous conduire
à la modélisation hiérarchique suivante :

103
00:05:23,265 --> 00:05:26,150
nous avons donc tout en haut 
la notion de produit,

104
00:05:26,920 --> 00:05:31,646
les accessoires, les mécanismes, 
les montres, sont des produits.

105
00:05:31,646 --> 00:05:37,109
Par contre, une montre aura un mécanisme 
et aura des accessoires,

106
00:05:37,109 --> 00:05:39,595
donc encapsulera ces classes là.

107
00:05:39,595 --> 00:05:42,617
Parmi les accessoires, nous aurons 
des boîtiers, des bracelets,

108
00:05:42,617 --> 00:05:46,407
des fermoirs, des vitres,
tous ceci sont des accessoires.

109
00:05:46,407 --> 00:05:49,524
Au niveau des mécanismes,
les mécanismes analogiques

110
00:05:49,524 --> 00:05:52,615
et les mécanismes digitaux 
sont des mécanismes.

111
00:05:52,615 --> 00:05:55,963
Enfin, le « mécanisme double », au départ
c'est un mécanisme,

112
00:05:55,963 --> 00:05:59,653
mais nous avons décidé par 
la dernière remarque précédente,

113
00:05:59,653 --> 00:06:01,860
qu'il n'indiquait qu'une seule heure,

114
00:06:01,860 --> 00:06:06,354
qu'on va certainement représenter 
au niveau de la notion de mécanisme,

115
00:06:06,354 --> 00:06:09,499
et qu'ils se comportent à la fois

116
00:06:09,499 --> 00:06:12,698
comme des mécanismes analogiques 
et des mécanismes digitaux,

117
00:06:12,698 --> 00:06:15,330
d'où naturellement on va dire,
qu'un mécanisme double

118
00:06:15,330 --> 00:06:17,405
est un mécanisme analogique,

119
00:06:17,405 --> 00:06:20,645
et est en même temps 
un mécanisme digital,

120
00:06:20,645 --> 00:06:22,941
tout en étant une seule fois,

121
00:06:22,941 --> 00:06:27,272
c'était ça la remarque sur 
« ne comportera qu'une seule heure »,

122
00:06:27,272 --> 00:06:31,218
tout en étant donc 
qu'une seule fois un mécanisme,

123
00:06:31,218 --> 00:06:33,205
et non pas deux fois, un mécanisme,

124
00:06:33,205 --> 00:06:36,621
c'était la contrainte au niveau de 
la conception qu'on a voulu vous imposer,

125
00:06:36,621 --> 00:06:41,576
pour avoir justement ici 
un héritage virtuel,

126
00:06:41,576 --> 00:06:44,802
faire de « Mecanisme » une classe virtuelle.

127
00:06:45,162 --> 00:06:48,016
Regardons comment tout ceci 
se traduit au niveau du code.

128
00:06:48,016 --> 00:06:50,687
Nous vous conseillons d'ailleurs 
en même temps que vous suivez ces vidéos,

129
00:06:50,687 --> 00:06:54,002
de temps en temps faire des pauses,
et écrire par vous-même le code

130
00:06:54,002 --> 00:06:56,610
dans votre environnement
de développement habituel.

131
00:06:56,610 --> 00:06:59,462
Le premier point :
les montres sont des produits,

132
00:06:59,462 --> 00:07:01,837
se traduit donc par une classe « Montre »,

133
00:07:01,837 --> 00:07:05,333
qui est un, qui hérite d'un produit,

134
00:07:05,333 --> 00:07:10,183
et donc bien sûr, on introduit 
une classe « Produit », dont hérite « Montre »,

135
00:07:10,183 --> 00:07:13,662
et puis ensuite, pour l'instant, 
on a simplement un « main » vide.

136
00:07:13,662 --> 00:07:17,760
Deuxième point, les montres
ont un mécanisme,

137
00:07:17,760 --> 00:07:22,479
donc elles vont encapsuler un mécanisme,
les montres ont un mécanisme,

138
00:07:22,479 --> 00:07:26,545
et sont constituées, donc ont,
différents accessoires.

139
00:07:26,545 --> 00:07:28,652
Donc, comment on dit 
« différents accessoires »,

140
00:07:28,652 --> 00:07:31,385
c'est simplement 
une collection d'accessoires,

141
00:07:31,385 --> 00:07:33,815
un tableau dynamique d'accessoires.

142
00:07:33,815 --> 00:07:35,823
Ceci introduit donc 
deux nouvelles classes,

143
00:07:35,823 --> 00:07:40,270
une classe « Mecanisme »
et une classe « Accessoire ».

144
00:07:40,830 --> 00:07:44,459
Ceci dit, nous savons que ces classes 
« Accessoire » et « Mecanisme »

145
00:07:44,459 --> 00:07:48,190
sont des classes très générales,
nous les avons voulues très générales

146
00:07:48,190 --> 00:07:50,765
pour qu'elles puissent se comporter 
de façon polymorphique,

147
00:07:50,765 --> 00:07:53,324
on aura plusieurs accessoires,
les bracelets...

148
00:07:53,324 --> 00:07:54,869
nous aurons plusieurs mécanismes,

149
00:07:54,869 --> 00:07:58,090
et donc ici nous voulons certainement 
du polymorphisme,

150
00:07:58,090 --> 00:08:05,092
et donc on va devoir ici rajouter 
la notion de pointeurs sur des mécanismes,

151
00:08:05,092 --> 00:08:07,387
et de pointeurs sur des accessoires,

152
00:08:07,387 --> 00:08:09,466
ce que nous faisons donc
tout de suite en choisissant

153
00:08:09,466 --> 00:08:14,042
dans cette version ici, 
d'utiliser des pointeurs C++ 2011,

154
00:08:14,042 --> 00:08:16,822
des pointeurs dits intelligents, 
des « smart pointers »,

155
00:08:16,822 --> 00:08:19,293
donc ici le « unique pointer »
sur mécanismes,

156
00:08:19,293 --> 00:08:21,454
et un « unique pointeur » 
sur accessoires,

157
00:08:21,454 --> 00:08:25,059
ce qui nécessite donc que l'on inclue
la bibliothèque memory

158
00:08:25,059 --> 00:08:26,709
pour les unique pointer.

159
00:08:26,709 --> 00:08:29,421
Bien sûr, on avait inclus ici 
la bibliothèque vector ici,

160
00:08:29,421 --> 00:08:33,009
pour les tableaux dynamiques
dont nous avons besoin ici.

161
00:08:33,009 --> 00:08:34,487
Et comme nous venons d'introduire

162
00:08:34,487 --> 00:08:36,302
des pointeurs dans la classe « Montre »,

163
00:08:36,302 --> 00:08:38,318
nous devons avoir le réflexe
en tant que programmeurs,

164
00:08:38,318 --> 00:08:40,095
de penser à,

165
00:08:40,995 --> 00:08:42,990
dès qu'on a des pointeurs, 
on doit en effet

166
00:08:42,990 --> 00:08:46,432
se poser la question de leur copie,
copie de surface, copie profonde,

167
00:08:46,432 --> 00:08:47,942
laissons ce problème de côté,

168
00:08:47,942 --> 00:08:51,161
ça sera abordé dans la dernière 
séquence vidéo de cette semaine,

169
00:08:51,161 --> 00:08:53,561
mais pour l'instant, 
contentons-nous donc de dire,

170
00:08:53,561 --> 00:08:59,147
que l'on ne peut pas copier de montre,
ni affecter de montre,

171
00:08:59,147 --> 00:09:01,717
ni utiliser donc l'opérateur 
d'affectation, l'opérateur égal.

172
00:09:01,717 --> 00:09:03,619
Donc ici, c'est le constructeur de copie,

173
00:09:03,619 --> 00:09:06,531
« Montre » dans la classe « Montre »,
est bien un constructeur,

174
00:09:06,531 --> 00:09:08,861
ici constructeur de copie
que l'on supprime,

175
00:09:08,861 --> 00:09:13,127
et puis donc l'opérateur égal,
que l'on supprime aussi,

176
00:09:13,127 --> 00:09:15,124
on reviendra donc sur ce point plus tard.

177
00:09:15,784 --> 00:09:18,643
L'aspect suivant :
les produits ont un prix.

178
00:09:19,003 --> 00:09:21,312
Donc ici tout simplement 
on pourrait encapsuler

179
00:09:21,312 --> 00:09:24,699
un prix naturellement représenté
comme un « double »,

180
00:09:24,699 --> 00:09:28,169
mais la contrainte nous dit, 
« dont le calcul peut varier »,

181
00:09:28,169 --> 00:09:31,566
ce qui montre que l'on va devoir 
donc calculer le prix,

182
00:09:31,566 --> 00:09:34,191
par exemple, plus tard on décidera
que le prix des montres,

183
00:09:34,191 --> 00:09:36,053
c'est le prix de son mécanisme,

184
00:09:36,053 --> 00:09:37,934
et la somme des prix de ses accessoires,

185
00:09:37,934 --> 00:09:41,613
et donc un prix ne devient plus une donnée
mais devient un traitement,

186
00:09:41,613 --> 00:09:43,972
que l'on va représenter
sous la forme d'une méthode.

187
00:09:44,562 --> 00:09:48,946
Calculer le prix d'un produit ne fait pas 
modifier ce produit en tant que tel,

188
00:09:48,946 --> 00:09:51,290
donc la méthode va 
être qualifiée de « const »,

189
00:09:51,290 --> 00:09:54,631
elle renvoie naturellement à un prix,
c'est naturellement un « double ».

190
00:09:54,631 --> 00:09:58,389
Et ensuite, on veut dire 
que le prix peut varier,

191
00:09:58,389 --> 00:10:00,738
donc « peut varier », ça veut dire 
que l'on veut avoir ici

192
00:10:00,738 --> 00:10:03,099
un comportement polymorphique.

193
00:10:03,749 --> 00:10:07,687
Disons que de base, 
on va retourner le prix de base,

194
00:10:07,687 --> 00:10:09,932
qui sera qualifié ici, de valeur de base,

195
00:10:09,932 --> 00:10:12,452
et donc ce que l'on avait appelé 
avant, « prix »,

196
00:10:12,452 --> 00:10:15,403
va devenir simplement un support,
une valeur de base,

197
00:10:15,403 --> 00:10:19,061
pour, par défaut, être le prix du produit ;

198
00:10:19,061 --> 00:10:21,174
mais peut-être possiblement plus tard,

199
00:10:21,174 --> 00:10:23,316
dans d'autres sous-classes 
de la classe « Produit »,

200
00:10:23,316 --> 00:10:26,993
être simplement utilisé 
dans des calculs différents du prix

201
00:10:26,993 --> 00:10:30,226
d'autres produits sous-classes 
dérivés de la classe « Produit ».

202
00:10:30,226 --> 00:10:33,227
De plus, tous les produits 
sont affichables.

203
00:10:33,227 --> 00:10:36,262
C'est-à-dire, concrètement, en C++, 
qu'on va surcharger

204
00:10:36,262 --> 00:10:39,853
l'opérateur d'affichage
pour les produits.

205
00:10:40,313 --> 00:10:43,605
Les produits sont affichables 
mais chacun à sa façon,

206
00:10:43,605 --> 00:10:47,191
c'est-à-dire que donc, on va avoir 
un affichage polymorphique,

207
00:10:47,191 --> 00:10:49,663
on laisse ça pour la prochaine 
séquence vidéo,

208
00:10:49,663 --> 00:10:51,676
on y reviendra dans cette séquence vidéo,

209
00:10:51,676 --> 00:10:53,987
pour l'instant on se contente 
de mettre donc juste un prototype

210
00:10:53,987 --> 00:10:58,767
pour se souvenir que l'on veut surcharger 
l'opérateur d'affichage pour les produits.

211
00:10:58,767 --> 00:11:01,833
Du côté des mécanismes et des accessoires,

212
00:11:01,833 --> 00:11:05,284
on a dit que les mécanismes 
et les accessoires sont des produits.

213
00:11:05,284 --> 00:11:08,187
Donc on a ici aussi 
une relation d'héritage,

214
00:11:08,187 --> 00:11:11,328
la classe « Accessoire » hérite
de la classe « Produit »,

215
00:11:11,328 --> 00:11:12,903
qui était définie précédemment,

216
00:11:12,903 --> 00:11:16,997
et la classe « Mecanisme » hérite 
également de la classe « Produit ».

217
00:11:17,937 --> 00:11:22,474
Au niveau des mécanismes,
il existe trois sortes de mécanismes,

218
00:11:22,474 --> 00:11:26,394
donc là aussi, ces trois mécanismes
sont des mécanismes bien sûr,

219
00:11:26,394 --> 00:11:30,136
donc nous avons « MecanismeAnalogique »
qui est un mécanisme,

220
00:11:30,136 --> 00:11:32,381
qui hérite de « Mecanisme »,

221
00:11:32,381 --> 00:11:35,249
« MecanismeDigital » qui hérite de « Mecanisme »,

222
00:11:35,249 --> 00:11:38,617
et « MecanismeDouble » 
qui hérite de « Mecanisme ».

223
00:11:39,477 --> 00:11:42,486
Et enfin, le dernier point,
pour les mécanismes doubles,

224
00:11:42,486 --> 00:11:45,244
on supposera qu'il n'existe
qu'une seule heure

225
00:11:45,244 --> 00:11:46,963
au niveau du mécanisme double,

226
00:11:46,963 --> 00:11:48,730
mais que les mécanismes doubles 
se comportent

227
00:11:48,730 --> 00:11:51,963
comme des mécanismes analogiques 
et des mécanismes digitaux,

228
00:11:51,963 --> 00:11:54,371
ce que nous n'avons pas 
du tout traduit ici,

229
00:11:54,371 --> 00:11:57,559
qui va donc remettre en cause
cette relation d'héritage,

230
00:11:57,559 --> 00:11:59,624
mais nous reviendrons 
sur ce point précis

231
00:11:59,624 --> 00:12:02,539
dans une vidéo spécifiquement 
dédiée à cet aspect là.

232
00:12:03,159 --> 00:12:07,128
Voilà, ceci conclut cette première 
séquence vidéo de présentation générale

233
00:12:07,128 --> 00:12:10,123
et de modélisation orientée objet 
du problème,

234
00:12:10,123 --> 00:12:12,142
la prochaine séquence vidéo va s'intéresser

235
00:12:12,142 --> 00:12:15,735
à l'affichage polymorphique
et à remplir la classe « Produit ».
