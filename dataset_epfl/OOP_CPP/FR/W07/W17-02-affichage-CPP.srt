1
00:00:04,183 --> 00:00:06,362
Dans cette séquence,
nous poursuivons notre étude de cas

2
00:00:06,362 --> 00:00:08,065
sur les montres, suisses ou pas, d'ailleurs

3
00:00:08,065 --> 00:00:10,458
et nous allons aborder
l'affichage polymorphique

4
00:00:10,458 --> 00:00:12,828
des différents produits 
de notre hiérarchie.

5
00:00:12,828 --> 00:00:14,519
Pour rappel, donc,
à l'étape précédente,

6
00:00:14,519 --> 00:00:17,422
nous avions ébauché 
une hiérarchie de produits

7
00:00:17,422 --> 00:00:19,477
et nous nous intéressons maintenant

8
00:00:19,477 --> 00:00:21,950
à comment faire en sorte 
que ces différents produits

9
00:00:21,950 --> 00:00:24,238
puissent s'afficher 
de façon polymorphique.

10
00:00:24,238 --> 00:00:26,702
Concrètement, un produit
comme une montre, un mécanisme,

11
00:00:26,702 --> 00:00:29,594
ou un accessoire aura sa façon
propre d'être affiché

12
00:00:29,594 --> 00:00:32,028
et nous voulons que cet affichage 
soit polymorphique.

13
00:00:32,028 --> 00:00:34,437
C'est à dire que si 
nous mettons un objet,

14
00:00:34,437 --> 00:00:37,257
par exemple, de type <i>Montre</i>
dans une variable de type <i>Produit</i>

15
00:00:37,257 --> 00:00:41,652
et que nous invoquons la méthode 
d'affichage sur la variable en question,

16
00:00:41,652 --> 00:00:46,989
l'affichage s'adapte automatiquement 
au type réel de l'instance stockée dans la variable

17
00:00:46,989 --> 00:00:49,912
Chaque produit a donc 
sa propre façon de s'afficher

18
00:00:49,912 --> 00:00:52,032
et nous nous posons la question
de comment procéder

19
00:00:52,032 --> 00:00:54,434
pour faire un affichage polymorphique.

20
00:00:54,434 --> 00:00:55,960
Nous aimerions bien que cet affichage

21
00:00:55,960 --> 00:00:58,498
puisse se faire au moyen de 
l'opérateur d'affichage.

22
00:00:58,498 --> 00:01:00,593
Donc, concrètement ici, 
si on imagine, par exemple

23
00:01:00,593 --> 00:01:02,467
que l'on déclare...

24
00:01:02,467 --> 00:01:06,097
un pointeur <i>p</i> sur un produit

25
00:01:06,097 --> 00:01:09,727
[Silence]

26
00:01:13,358 --> 00:01:20,673
on aimerait bien que "afficher 
le contenu pointé par <i>p</i>"...

27
00:01:20,673 --> 00:01:26,917
... Affiche les informations
spécifiques à la montre.

28
00:01:26,917 --> 00:01:28,887
Alors, question :
est-il possible de programmer

29
00:01:28,887 --> 00:01:32,619
cet opérateur de sorte à avoir
le comportement polymorphique souhaité ?

30
00:01:32,619 --> 00:01:34,854
La réponse est effectivement oui.

31
00:01:34,854 --> 00:01:38,545
Bien sûr, ce n'est pas l'opérateur 
en lui même qui peut être déclaré

32
00:01:38,545 --> 00:01:40,120
comme une méthode virtuelle.

33
00:01:40,120 --> 00:01:42,149
Il ne s'agit pas d'une <i>méthode</i>,
il s'agit d'une <i>fonction</i>

34
00:01:42,149 --> 00:01:43,444
externe à toute classe,

35
00:01:43,444 --> 00:01:46,325
donc l'opérateur en lui-même
ne peut pas être virtuel,

36
00:01:46,325 --> 00:01:53,183
par contre, rien ne l'empêche d'invoquer
une méthode polymorphique virtuelle

37
00:01:53,183 --> 00:01:55,616
sur l'opérande qu'il doit afficher.

38
00:01:55,616 --> 00:01:58,850
L'idée est donc ici de faire en sorte 
que notre opérateur d'affichage

39
00:01:58,850 --> 00:02:00,687
fasse appel à une méthode polymorphique

40
00:02:00,687 --> 00:02:02,841
qui serait définie au niveau 
de la super-classe.

41
00:02:02,841 --> 00:02:05,720
Donc concrètement, ici, chez nous,
dans la super-classe <i>Produit</i>.

42
00:02:05,720 --> 00:02:09,207
Notre opérateur permettant 
l'affichage d'un produit,

43
00:02:09,207 --> 00:02:11,983
appellerait donc sur ce produit
une méthode <i>afficher</i>

44
00:02:11,983 --> 00:02:14,387
définie dans la super-classe <i>Produit</i> ;

45
00:02:14,387 --> 00:02:17,598
bien-sûr cette méthode <i>afficher</i> doit être
déclarée comme virtuelle

46
00:02:17,598 --> 00:02:20,373
pour permettre 
un comportement polymorphique.

47
00:02:20,373 --> 00:02:23,554
Pour rappel, ici, c'est le fait 
que la méthode soit virtuelle

48
00:02:23,554 --> 00:02:26,413
et qu'elle s'applique a une 
référence vers un produit

49
00:02:26,413 --> 00:02:29,361
qui va permettre le comportement
polymorphique souhaité.

50
00:02:29,361 --> 00:02:32,294
Vous remarquerez que la méthode afficher 
est déclarée comme publique,

51
00:02:32,294 --> 00:02:33,953
d'abord, parce que ça peut avoir du sens

52
00:02:33,953 --> 00:02:35,695
d'offrir cette 
fonctionnalité tel quel,

53
00:02:35,695 --> 00:02:38,697
au monde extérieur, pour des 
objets de la classe <i>Produit</i>;

54
00:02:38,697 --> 00:02:40,425
mais aussi parce que ça va nous permettre

55
00:02:40,425 --> 00:02:42,401
de nous affranchir de 
certaines contraintes

56
00:02:42,401 --> 00:02:45,146
pour la programmation
de l'opérateur d'affichage.

57
00:02:45,146 --> 00:02:48,371
Typiquement, ici, comme <i>afficher</i>
est une méthode publiquement accessible,

58
00:02:48,371 --> 00:02:51,703
l'opérateur peut être programmé
en l'utilisant directement

59
00:02:51,703 --> 00:02:54,128
et donc, il n'est pas nécessaire 
d'avoir recours au <i>friend</i>

60
00:02:54,128 --> 00:02:57,298
pour accéder à cette fonctionnalité 
de la classe <i>produit</i>.

61
00:02:57,298 --> 00:02:59,100
Dès l'instant ou une méthode,
dans une classe

62
00:02:59,100 --> 00:03:00,337
est déclarée comme virtuelle

63
00:03:00,337 --> 00:03:03,264
cela signifie que, potentiellement,
nous allons utiliser des instances

64
00:03:03,264 --> 00:03:05,665
de cette classe de façon polymorphique.

65
00:03:05,665 --> 00:03:09,772
Et donc, il faut penser à les détruire 
également de façon appropriée

66
00:03:09,772 --> 00:03:14,542
en introduisant un destructeur, 
lui-même virtuel.

67
00:03:14,542 --> 00:03:17,598
Nous souhaitons que le comportement
par défaut de la méthode d'affichage

68
00:03:17,598 --> 00:03:19,854
d'un produit permette
d'en afficher le prix.

69
00:03:19,854 --> 00:03:22,901
On pourrait imaginer d'écrire 
la méthode <i>afficher</i>

70
00:03:22,901 --> 00:03:27,203
de sorte qu'elle affiche 
la valeur du produit.

71
00:03:27,203 --> 00:03:28,891
Cette façon de procéder
n'est cependant pas bonne,

72
00:03:28,891 --> 00:03:30,647
sauriez-vous dire pourquoi ?

73
00:03:30,647 --> 00:03:33,973
En effet, le prix d'une sous-classe
de produit peut très bien différer

74
00:03:33,973 --> 00:03:35,152
de la valeur de base.

75
00:03:35,152 --> 00:03:37,709
Procéder à l'affichage du prix 
en utilisant la valeur de base

76
00:03:37,709 --> 00:03:40,767
n'est donc pas correct pour toutes
les instances possibles de produits,

77
00:03:40,767 --> 00:03:42,970
y compris celle des sous-classes.

78
00:03:42,970 --> 00:03:46,084
En effet, pour une sous-classe de produit
comme les bracelets, par exemple,

79
00:03:46,084 --> 00:03:47,652
on peut parfaitement imaginer que le prix

80
00:03:47,652 --> 00:03:50,496
corresponde effectivement à 
la valeur de base du produit

81
00:03:50,496 --> 00:03:53,283
Par contre, pour les montres,
une autre forme de produit,

82
00:03:53,283 --> 00:03:55,765
on peut imaginer que le calcul 
du prix soit plus complexe

83
00:03:55,765 --> 00:03:58,975
et que ce soit la somme des prix
de tout ses composants.

84
00:03:58,975 --> 00:04:00,896
La façon correcte de procéder, ici,

85
00:04:00,896 --> 00:04:02,737
est donc d'utiliser, 
à la place de valeurs,

86
00:04:02,737 --> 00:04:05,460
la méthode prix(), laquelle 
pourra bien-sûr elle-même

87
00:04:05,460 --> 00:04:10,319
avoir un comportement polymorphique,
et donc calculer le prix d'une montre

88
00:04:10,319 --> 00:04:13,960
si le produit affiché est une montre
ou le prix d'un bracelet

89
00:04:13,960 --> 00:04:16,744
si le produit à afficher est un bracelet.

90
00:04:16,744 --> 00:04:18,414
Si l'on reprend notre exemple de départ,

91
00:04:18,414 --> 00:04:25,731
celui ou l'on déclarait un pointeur 
sur un produit dans lequel on stockait

92
00:04:25,731 --> 00:04:29,129
l'adresse d'une montre,

93
00:04:29,129 --> 00:04:34,516
imaginez maintenant que l'on invoque
l'opérateur d'affichage

94
00:04:34,516 --> 00:04:36,612
sur l'objet ponté par <i>p</i>,

95
00:04:36,612 --> 00:04:39,398
que se passe t-il concrètement ?

96
00:04:39,398 --> 00:04:42,820
Ceci se traduira par l'appel à
l'opérateur d'affichage,

97
00:04:42,820 --> 00:04:46,310
que nous avons surchargé pour les produits

98
00:04:50,700 --> 00:04:53,292
lequel va appeler la méthode <i>afficher</i>,

99
00:04:53,292 --> 00:04:56,821
sachant, maintenant que 
cette variable, ce paramètre,

100
00:04:56,821 --> 00:04:59,855
contient la référence à une montre.

101
00:04:59,855 --> 00:05:02,463
La méthode <i>afficher</i>,
telle que définie dans la classe produit

102
00:05:02,463 --> 00:05:03,425
va être invoquée,

103
00:05:03,425 --> 00:05:07,040
laquelle invoquera à son tour
	la méthode de calul de <i>prix()</i>.

104
00:05:07,040 --> 00:05:11,110
Cette méthode est polymorphique,
elle va donc automatiquement s'adapter

105
00:05:11,110 --> 00:05:13,584
à la nature réelle de l'objet 
auquel elle s'applique,

106
00:05:13,584 --> 00:05:15,193
qui se trouve être une montre, ici.

107
00:05:15,193 --> 00:05:17,224
La méthode <i>prix()</i> est, en effet, virtuelle

108
00:05:17,224 --> 00:05:19,460
comme on lui permet 
d'accéder à l'instance réelle

109
00:05:19,460 --> 00:05:20,678
au travers d'un pointeur,

110
00:05:20,678 --> 00:05:23,080
elle peut s'appliquer réellement 
de façon polymorphique

111
00:05:23,080 --> 00:05:24,601
et on aura le résultat désiré,

112
00:05:24,601 --> 00:05:27,983
c'est à dire que le calcul du prix se fera
pour une montre comme étant, par exemple

113
00:05:27,983 --> 00:05:30,525
la somme des prix de tous ses composants.

114
00:05:30,525 --> 00:05:32,309
Finalisons à présent notre classe produit.

115
00:05:32,309 --> 00:05:34,285
Supposons que l'on 
souhaite imposer le fait que

116
00:05:34,285 --> 00:05:38,552
la valeur de base d'un produit reste
inchangé une fois qu'on l'a initialisé.

117
00:05:38,552 --> 00:05:41,531
Un produit garderait donc, 
comme valeur de base,

118
00:05:41,531 --> 00:05:44,463
la valeur d'initialisation et il ne serait
pas possible d'en changer

119
00:05:44,463 --> 00:05:46,169
au cours de l'existence du produit.

120
00:05:46,169 --> 00:05:50,702
Ceci peut s'imposer en étiquetant 
l'attribut comme étant constant,

121
00:05:50,702 --> 00:05:55,388
l'attribut <i>valeur</i> pourra être initialisé,
mais une fois cette initialisation faite,

122
00:05:55,388 --> 00:05:57,923
il ne pourra plus changer de valeur.

123
00:05:57,923 --> 00:05:59,257
Si l'on souhaite également imposer

124
00:05:59,257 --> 00:06:02,061
que par défaut, un produit ait 
une valeur de base nulle,

125
00:06:02,061 --> 00:06:04,840
on peut le faire en utilisant 
une valeur par défaut

126
00:06:04,840 --> 00:06:06,899
pour le paramètre du constructeur,

127
00:06:06,899 --> 00:06:08,461
on aurait donc à disposition

128
00:06:08,461 --> 00:06:11,252
un constructeur par défaut
pour la classe <i>Produit</i>

129
00:06:11,252 --> 00:06:12,499
qui, lorsqu'il est invoqué,

130
00:06:12,499 --> 00:06:16,588
initialiserait la valeur avec la valeur <i>0</i>.

131
00:06:16,588 --> 00:06:18,169
Enfin, imaginons que 
l'on souhaite modéliser

132
00:06:18,169 --> 00:06:20,859
le fait qu'un produit n'a pas 
d'existence en tant que tel,

133
00:06:20,859 --> 00:06:23,331
il s'agit d'une entité abstraite 
dans notre conception,

134
00:06:23,331 --> 00:06:25,348
on ne veut pas créer d'instance 
de produit en tant que tel.

135
00:06:25,348 --> 00:06:29,907
Comment faire pour imposer cette 
contrainte dans notre conception ?

136
00:06:29,907 --> 00:06:31,916
En C++, pour qu'une classe soit abstraite,

137
00:06:31,916 --> 00:06:34,466
il faut qu'elle contienne au moins 
une méthode virtuelle pure,

138
00:06:34,466 --> 00:06:38,352
c'est à dire qu'ici, on devrait 
avoir une méthode

139
00:06:41,432 --> 00:06:42,428
définie comme virtuelle pure.

140
00:06:42,428 --> 00:06:46,124
Nous n'avons pas vraiment 
de raison, ici, d'en créer une,

141
00:06:46,124 --> 00:06:48,415
en créer une artificiellement
n'aurait pas vraiment de sens.

142
00:06:48,415 --> 00:06:51,834
Un bon candidat pour être 
une méthode virtuelle pure

143
00:06:51,834 --> 00:06:54,459
dans une classe est 
en fait le destructeur.

144
00:06:54,459 --> 00:07:00,301
Le destructeur peut être déclaré comme
virtuel pur et assurer ainsi le fait que

145
00:07:00,301 --> 00:07:02,432
la classe devienne abstraite.

146
00:07:02,432 --> 00:07:04,545
Comme toute classe possède 
nécessairement un destructeur,

147
00:07:04,545 --> 00:07:06,627
le fait de les déclarer comme virtuels pur

148
00:07:06,627 --> 00:07:09,762
nous épargne d'avoir à créer 
une méthode artificielle

149
00:07:09,762 --> 00:07:14,509
pour le simple fait de vouloir rendre 
la classe en question abstraite.

150
00:07:14,509 --> 00:07:17,272
A noter qu'il est impératif 
de doter tout destructeur d'un corps

151
00:07:17,272 --> 00:07:20,403
et vous noterez, à ce sujet, que rien 
n'empêche une méthode virtuelle pure

152
00:07:20,403 --> 00:07:22,105
d'avoir un corps.

153
00:07:22,105 --> 00:07:24,371
Cette syntaxe n'est cependant 
pas licite en C++

154
00:07:24,371 --> 00:07:28,278
donc il n'est pas possible de préciser 
le corps d'un destructeur virtuel pur

155
00:07:28,278 --> 00:07:30,029
à l'intérieur de la classe comme ceci,

156
00:07:30,029 --> 00:07:32,660
il faudra plutôt 
externaliser la définition

157
00:07:32,660 --> 00:07:35,813
du destructeur de la classe <i>Produit</i>
selon cette syntaxe.

158
00:07:35,813 --> 00:07:37,901
C'est à dire qu'à l'intérieur 
de la classe <i>Produit</i>

159
00:07:37,901 --> 00:07:40,201
on déclare le destructeur virtuel pur,

160
00:07:40,201 --> 00:07:43,042
et on en donne le corps à l'extérieur.

161
00:07:43,042 --> 00:07:44,831
Donc ce corps doit être donné,

162
00:07:44,831 --> 00:07:48,842
on doit donner une définition 
du destructeur même s'il n'a rien à faire.

163
00:07:48,842 --> 00:07:51,793
Voici à quoi nous aboutissons, 
au terme de cette étape,

164
00:07:51,793 --> 00:07:53,973
pour le codage de la classe <i>Produit</i>.

165
00:07:53,973 --> 00:07:56,519
Le constructeur de la classe 
permet d'initialiser

166
00:07:56,519 --> 00:07:59,993
son attribut <i>valeur</i> au moyen 
d'une valeur passée en paramètre.

167
00:07:59,993 --> 00:08:03,076
Ce constructeur peut être utilisé 
comme un constructeur par défaut

168
00:08:03,076 --> 00:08:05,888
car tous ses paramètres 
ont une valeur par défaut,

169
00:08:05,888 --> 00:08:07,553
ici la valeur <i>0</i>.

170
00:08:07,553 --> 00:08:10,096
La classe <i>produit</i> offre 
une méthode d'affichage

171
00:08:10,096 --> 00:08:11,921
utilisable de façon polymorphique,

172
00:08:11,921 --> 00:08:13,743
cette méthode est 
déclarée comme virtuelle

173
00:08:13,743 --> 00:08:16,506
donc si elle s'applique 
à un pointeur ou à une référence,

174
00:08:16,506 --> 00:08:18,588
elle pourra offrir un 
comportement polymorphique.

175
00:08:18,588 --> 00:08:22,526
Elle utilise à son tour une autre 
méthode potentiellement polymorphique,

176
00:08:22,526 --> 00:08:25,380
la méthode <i>prix()</i>, 
aussi déclarée comme virtuelle.

177
00:08:25,380 --> 00:08:28,351
L'opérateur d'affichage 
peut être surchargé

178
00:08:28,351 --> 00:08:30,991
pour afficher des instances de <i>Produit</i>.

179
00:08:30,991 --> 00:08:32,931
Pour qu'il ait un 
comportement polymorphique,

180
00:08:32,931 --> 00:08:37,164
il faut simplement qu'il utilise, dans son corps, 
la méthode <i>afficher</i> polymorphique

181
00:08:37,164 --> 00:08:40,384
définie publiquement 
dans la classe <i>Produit</i>.

182
00:08:40,384 --> 00:08:42,736
Enfin, pour modéliser 
le fait qu'un produit

183
00:08:42,736 --> 00:08:44,839
est une entité abstraite 
dans notre conception,

184
00:08:44,839 --> 00:08:48,678
nous avons déclaré 
le destructeur comme virtuel pur

185
00:08:48,678 --> 00:08:50,468
et l'on n'oublie pas de le définir,

186
00:08:50,468 --> 00:08:53,420
même si l'on n'a rien de 
concret à lui faire faire, ici.

187
00:08:53,420 --> 00:08:56,268
Et ceci conclut notre séquence 
sur la définition des produits

188
00:08:56,268 --> 00:08:58,024
et leur affichage polymorphique.
