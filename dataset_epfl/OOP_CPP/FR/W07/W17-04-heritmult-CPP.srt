1
00:00:04,256 --> 00:00:06,416
Nous poursuivons notre étude 
de cas sur les montres

2
00:00:06,416 --> 00:00:09,344
pour cette fois, aborder la thématique 
de l'héritage multiple

3
00:00:09,344 --> 00:00:12,434
au travers de la modélisation 
des différents mécanismes impliqués.

4
00:00:12,434 --> 00:00:14,463
Pour rappel, 
dans les séquences précédentes,

5
00:00:14,463 --> 00:00:16,526
la conception à laquelle
nous étions parvenus

6
00:00:16,526 --> 00:00:21,123
modélisait la « Montre » 
en lui attribuant un cœur

7
00:00:21,123 --> 00:00:23,544
qui est un pointeur sur un « Mecanisme ».

8
00:00:23,544 --> 00:00:26,236
Une hiérarchie d'héritage 
avait été ébauchée

9
00:00:26,236 --> 00:00:28,465
pour les différents mécanismes impliqués.

10
00:00:28,465 --> 00:00:30,795
Donc nous avions 
une super-classe « Mecanisme »

11
00:00:30,795 --> 00:00:33,911
de laquelle héritaient
trois types de mécanismes :

12
00:00:33,911 --> 00:00:36,413
le « MecanismeAnalogique »,
le « MecanismeDigital »,

13
00:00:36,413 --> 00:00:38,208
et le « MecanismeDouble ».

14
00:00:38,208 --> 00:00:41,116
Cette première hiérarchie n'est cependant 
pas tout à fait conforme

15
00:00:41,116 --> 00:00:43,627
à nos souhaits concernant 
les « MecanismeDouble ».

16
00:00:43,627 --> 00:00:46,482
En effet dans les contraintes 
que nous nous étions fixées,

17
00:00:46,482 --> 00:00:49,101
nous souhaitions faire en sorte 
que les « MecanismeDouble »

18
00:00:49,101 --> 00:00:52,884
soient, à la fois, 
des mécanismes analogiques

19
00:00:52,884 --> 00:00:55,636
et des mécanisme digitaux, tout en ayant,

20
00:00:56,236 --> 00:00:58,240
tout en reportant une seule heure.

21
00:00:58,420 --> 00:01:01,372
Le fait de faire hériter 
« MécanismeDouble » de « Mécanisme »

22
00:01:01,372 --> 00:01:04,511
au lieu de le faire hériter de 
« MecanismeDigital » et de « MecanismeAnalogique »

23
00:01:04,511 --> 00:01:07,311
ne permet pas de modéliser proprement 
ce que nous souhaitons.

24
00:01:07,931 --> 00:01:10,217
Nous allons donc maintenant 
réviser notre hérarchie

25
00:01:10,217 --> 00:01:12,284
de sorte à rendre apparent le lien

26
00:01:12,284 --> 00:01:14,940
qui lie les « MecanismeDouble » 
aux mécanismes digitaux

27
00:01:14,940 --> 00:01:16,758
et aux mécanismes analogiques.

28
00:01:16,758 --> 00:01:18,958
En C++ puisque 
l'héritage multiple est possible

29
00:01:18,958 --> 00:01:20,525
la voie est toute naturelle,

30
00:01:20,525 --> 00:01:22,455
il faut faire hériter « MecanismeDouble »

31
00:01:22,455 --> 00:01:24,335
à la fois, de « MecanismeAnalogique »

32
00:01:24,335 --> 00:01:26,330
et de « MecanismeDigital ».

33
00:01:26,330 --> 00:01:29,036
Si l'on met en place un héritage 
multiple de cette nature

34
00:01:29,036 --> 00:01:30,863
il faut être attentif à un point.

35
00:01:30,863 --> 00:01:34,948
Nous souhaitions qu'un « MecanismeDouble » 
ne reporte qu'une seule heure,

36
00:01:35,588 --> 00:01:37,752
héritée de plus haut, 
l'heure est modélisé

37
00:01:37,752 --> 00:01:39,873
au niveau de la classe « Mecanisme » .

38
00:01:39,873 --> 00:01:43,145
Si l'on se contente de mettre 
en place l'héritage multiple :

39
00:01:43,145 --> 00:01:45,899
« MecanismeDouble » héritant 
de « MecanismeAnalogique »

40
00:01:45,899 --> 00:01:47,679
et de « MecanismeDigital »,

41
00:01:47,679 --> 00:01:49,676
tout instances de « MecanismeDouble »

42
00:01:49,676 --> 00:01:52,009
héritera de deux fois l'attribut « heure ».

43
00:01:52,409 --> 00:01:54,783
Une fois, en tant que mécanisme Analogique

44
00:01:54,783 --> 00:01:57,508
et une seconde fois 
en tant que mécanisme digital,

45
00:01:57,508 --> 00:01:59,299
Or, ce n'est pas ce que nous souhaitons

46
00:01:59,299 --> 00:02:02,272
nous voulons qu'un « MecanismeDouble » 
ne reporte qu'une seule heure.

47
00:02:02,772 --> 00:02:07,718
Il faut donc faire en sorte 
que cette super-classe soit virtuelle

48
00:02:09,658 --> 00:02:12,544
de sorte à ce que la sous-classe
« MecanismeDouble »

49
00:02:12,544 --> 00:02:14,969
n'hérite qu'une seule fois 
de l'attribut « heure »

50
00:02:14,969 --> 00:02:17,217
et pour ceci il faut que
tous les liens d'héritages

51
00:02:17,217 --> 00:02:19,529
liant « Mecanisme »
à ses sous-classes directes

52
00:02:19,529 --> 00:02:22,897
soit déclarés comme virtuels.

53
00:02:27,151 --> 00:02:29,629
La nouvelle hiérarchie ainsi esquissée

54
00:02:29,629 --> 00:02:32,126
correspond en fait au code 
que vous avez ici sous les yeux ,

55
00:02:32,126 --> 00:02:34,709
nous avons donc, 
une super-classe « Mecanisme »

56
00:02:34,709 --> 00:02:37,543
qui va fournir l'attribut 
indiquant l'heure,

57
00:02:37,543 --> 00:02:39,423
de cette super-classe « Mecanisme »

58
00:02:39,423 --> 00:02:41,643
vont hériter deux sous-classes directes :

59
00:02:41,643 --> 00:02:43,774
« MecanismeAnalogique » et « MecanismeDigital ».

60
00:02:43,774 --> 00:02:47,745
Nous prenons donc le soin de déclarer 
les liens d'héritages comme virtuelle

61
00:02:47,745 --> 00:02:50,579
afin de permettre 
à la sous-classe « MecanismeDouble »

62
00:02:50,579 --> 00:02:54,505
de n'hériter qu'une seule fois 
de l'attribut provenant de « Mecanisme ».

63
00:02:55,025 --> 00:02:57,464
Étant entendu ici que « MecanismeDouble »

64
00:02:57,464 --> 00:03:01,489
hérite à la fois de « MecanismeAnalogique » 
et de « MecanismeDigital ».

65
00:03:01,489 --> 00:03:03,960
Pour rendre notre exemple 
un peu plus intéressant

66
00:03:03,960 --> 00:03:06,784
nous allons doter 
nos sous-classes « MecanismeAnalogique »

67
00:03:06,784 --> 00:03:09,322
et « MecanismeDigitaux » 
d'attributs spécifiques

68
00:03:09,322 --> 00:03:13,358
comme par exemple une date 
pour le mécanisme analogique

69
00:03:14,498 --> 00:03:16,745
et un réveil pour le mécanisme digital.

70
00:03:17,085 --> 00:03:19,917
Pour rappel, en C++, une super-classe

71
00:03:19,917 --> 00:03:22,711
dont les sous-classes 
héritent virtuellement

72
00:03:22,711 --> 00:03:25,605
et dites « classes virtuelles »

73
00:03:27,185 --> 00:03:30,821
à ne pas confondre 
avec une classe abstraite.

74
00:03:31,641 --> 00:03:34,500
Le fait ici que « Mecanisme »
soit une classe virtuelle

75
00:03:35,015 --> 00:03:38,094
a une incidence sur la construction 
d'un « MecanismeDouble ».

76
00:03:38,094 --> 00:03:40,166
Sauriez vous dire quelles conséquences ?

77
00:03:40,166 --> 00:03:43,424
Dans une hiérarchie de classe
ne comportant pas de classe virtuelle

78
00:03:43,424 --> 00:03:46,179
tous constructeurs de sous-classe
est simplement tenu

79
00:03:46,179 --> 00:03:48,844
d'invoquer les constructeurs 
de ces super-classes directes.

80
00:03:48,844 --> 00:03:52,565
Par contre dans une hiérarchie 
comportant une classe virtuelle

81
00:03:52,565 --> 00:03:54,913
toutes les sous-classes doivent appeler

82
00:03:54,913 --> 00:03:57,088
le constructeur de cette classe virtuelle.

83
00:03:57,088 --> 00:04:00,216
Commençons donc, par fixer 
la construction des mécanismes,

84
00:04:00,216 --> 00:04:02,795
jusqu'ici nous n'avions 
qu'un constructeur par défaut.

85
00:04:02,795 --> 00:04:05,382
Affinons un peu la description 
de ce constructeur.

86
00:04:05,382 --> 00:04:08,060
Sachant qu'un mécanisme est un produit

87
00:04:08,060 --> 00:04:10,198
donc hérite de la classe « Produit »

88
00:04:10,198 --> 00:04:13,318
il doit initialiser la valeur de base 
du produit hérité de produit,

89
00:04:13,318 --> 00:04:16,554
et doit initialiser 
son attribut propre à savoir l'heure.

90
00:04:16,554 --> 00:04:19,053
On peut donc naturellement, 
pour la classe « Mecanisme »

91
00:04:19,053 --> 00:04:21,323
penser à un constructeur 
qui aurait cette allure

92
00:04:21,323 --> 00:04:24,564
donc il prendrait en paramètre 
une valeur permettant

93
00:04:24,564 --> 00:04:26,951
d'initialiser l'attribut hérité de produit

94
00:04:26,951 --> 00:04:29,183
et prendrait en paramètre 
une seconde valeur

95
00:04:29,183 --> 00:04:31,662
permettant d'initialiser 
son attribut spécifique.

96
00:04:31,662 --> 00:04:34,679
On peut également imaginer 
de donner une valeur par défaut

97
00:04:34,679 --> 00:04:36,545
à ce second paramètre.

98
00:04:36,885 --> 00:04:40,422
Le constructeur de la classe « Mecanisme »
doit naturellement invoquer

99
00:04:40,422 --> 00:04:42,755
le constructeur de la super-classe « Produit »

100
00:04:42,755 --> 00:04:44,913
et initialiser son attribut propre.

101
00:04:44,913 --> 00:04:47,804
Passons maintenant 
aux constructeurs des sous-classes.

102
00:04:47,804 --> 00:04:51,736
Tout d'abord celui de la sous-classe
« MecanismeAnalogique » par exemple,

103
00:04:51,736 --> 00:04:54,167
qui hérite directement 
de la classe « Mecanisme ».

104
00:04:54,167 --> 00:04:56,620
Ce constructeur prendra en paramètre

105
00:04:56,620 --> 00:05:00,199
des valeurs lui permettant d'initialiser 
l'ensemble de ces attributs,

106
00:05:00,199 --> 00:05:03,231
ceux hérités de plus haut 
et ceux qui lui sont spécifiques

107
00:05:03,231 --> 00:05:06,017
et il va de toute façon
invoquer le constructeur

108
00:05:06,017 --> 00:05:07,561
de sa super-classe directe

109
00:05:07,561 --> 00:05:09,689
qui se trouve être la classe
virtuelle « Mecanisme ».

110
00:05:09,689 --> 00:05:13,384
L'écriture du constructeur 
dans la classe « MecanismeDigital »

111
00:05:13,384 --> 00:05:15,542
se fera de façon tout à fait analogue.

112
00:05:16,302 --> 00:05:19,269
Le constructeur de la sous-classe 
« MecanismeDouble »

113
00:05:19,269 --> 00:05:23,017
doit lui invoquer les constructeurs 
de ses super-classes directes

114
00:05:23,017 --> 00:05:26,216
mais doit d'abord
invoquer le constructeur

115
00:05:26,676 --> 00:05:28,551
de la super-classe virtuelle.

116
00:05:28,551 --> 00:05:30,564
Vous souvenez vous de ce qu'il ce passe

117
00:05:30,564 --> 00:05:33,782
avec l'appel au constructeur 
de la super-classe virtuelle

118
00:05:33,782 --> 00:05:36,078
dans les super-classes directes ?

119
00:05:36,598 --> 00:05:39,152
Intéressons nous maintenant
à la gestion des valeurs par défaut.

120
00:05:39,152 --> 00:05:41,958
Rappelez vous que dans
le constructeur de « Mecanisme »

121
00:05:41,958 --> 00:05:44,760
nous avions fait en sorte 
que le paramètre permettant

122
00:05:44,760 --> 00:05:47,607
d'initialiser l'heure du mécanisme
est une valeur par défaut.

123
00:05:47,967 --> 00:05:50,750
Si nous souhaitons que cette heure 
par défaut soit préservée

124
00:05:50,750 --> 00:05:52,908
par les constructeurs 
des sous-classes de « Mecanisme »

125
00:05:52,908 --> 00:05:54,999
il faut prendre 
un certain nombre de mesure

126
00:05:54,999 --> 00:05:57,469
ensuite donc faire 
en sorte qu'il soit possible

127
00:05:57,469 --> 00:06:00,890
de construire un mécanisme analogique
sans fournir d'heure

128
00:06:00,890 --> 00:06:03,407
et à ce moment là il aurait
l'heure par défaut,

129
00:06:03,407 --> 00:06:05,060
la même que pour les mécanismes.

130
00:06:05,060 --> 00:06:07,245
Tout en ayant la possibilité bien sûr,

131
00:06:08,305 --> 00:06:11,416
d'initialiser son attribut spécifique.

132
00:06:11,416 --> 00:06:13,951
Nous devons pour cela prévoir 
un second constructeur

133
00:06:13,951 --> 00:06:16,219
qui ne prendrait pas 
de paramètre lié à l'heure

134
00:06:16,219 --> 00:06:19,408
et qui appellerait 
le constructeur de la super-classe,

135
00:06:19,408 --> 00:06:21,861
initialisant l'heure par défaut

136
00:06:21,861 --> 00:06:23,801
donc sans préciser
de valeur pour cette heure.

137
00:06:24,261 --> 00:06:26,244
Mais n'aurait il pas été ici plus simple

138
00:06:26,244 --> 00:06:28,121
de mettre une valeur par défaut

139
00:06:31,196 --> 00:06:32,652
pour ce second paramètre ?

140
00:06:35,274 --> 00:06:39,662
La réponse est non car le dernier
paramètre prévu pour la date

141
00:06:39,662 --> 00:06:41,722
n'a lui pas de valeur par défaut

142
00:06:41,722 --> 00:06:43,521
et toutes les valeurs 
par défaut des paramètres

143
00:06:43,526 --> 00:06:46,376
doivent nécessairement 
venir en fin de liste.

144
00:06:46,996 --> 00:06:48,709
Notez qu'il serait aussi très mauvais

145
00:06:48,709 --> 00:06:51,662
de dupliquer une même valeur par défaut
à deux endroits différents

146
00:06:51,662 --> 00:06:54,521
par exemple ici, au niveau 
du mécanisme analogique

147
00:06:54,521 --> 00:06:56,509
et plus haut, au niveau du mécanisme.

148
00:06:56,509 --> 00:06:58,839
Ce serait la porte ouverte
à des problèmes

149
00:06:58,839 --> 00:07:00,827
de mauvaise maintenance
et d'incohérence.

150
00:07:02,007 --> 00:07:04,693
Pour gérer proprement la valeur 
par défaut de la super-classe

151
00:07:04,693 --> 00:07:07,113
alors le même raisonnement 
que celui qu'on a tenu

152
00:07:07,113 --> 00:07:09,477
pour « MecanismeAnalogique »
doit être évidemment tenu

153
00:07:09,477 --> 00:07:12,849
dans « MecanismeDigital » mais aussi
dans « MecanismeDouble »

154
00:07:12,849 --> 00:07:14,373
dans la classe « MecanismeDouble »

155
00:07:14,373 --> 00:07:17,000
où les constructeurs 
doivent être surchargés.

156
00:07:17,000 --> 00:07:19,867
Donc là, prenons en paramètre une heure

157
00:07:19,867 --> 00:07:22,568
et l'autre fonctionnant 
sans paramètre pour l'heure

158
00:07:22,568 --> 00:07:25,411
qui va appeler le constructeur 
de la super-classe

159
00:07:25,411 --> 00:07:28,608
qui donne une valeur par défaut 
à cette attribut « heure ».

160
00:07:29,448 --> 00:07:30,909
Nous en avons fini maintenant

161
00:07:30,909 --> 00:07:33,992
avec la construction des mécanismes,
passons à leurs affichages.

162
00:07:34,692 --> 00:07:37,030
Supposons que pour réaliser ces affichages

163
00:07:37,030 --> 00:07:39,432
nous souhaitions que tous les mécanismes

164
00:07:39,432 --> 00:07:41,928
s'affichent suivant 
exactement le même schéma,

165
00:07:41,928 --> 00:07:44,279
un schéma imposé 
et non-modifiable.

166
00:07:44,279 --> 00:07:47,435
Ce schéma serait, par exemple, 
d'afficher systématiquement

167
00:07:47,435 --> 00:07:50,531
le type du mécanisme, 
suivi d'un affichage du cadran

168
00:07:50,531 --> 00:07:52,905
lequel contiendrait l'heure 
et le cas échéant,

169
00:07:52,905 --> 00:07:56,494
la date, l'heure du réveil 
et puis suivi du prix, par exemple.

170
00:07:57,574 --> 00:08:00,524
Mais nous souhaitons aussi 
que chacune de ces parties,

171
00:08:02,299 --> 00:08:04,649
chacune des parties 
de ce schéma soit adaptable.

172
00:08:04,649 --> 00:08:08,094
Ce que l'on entend par 'partie' 
serait typiquement la partie qui affiche

173
00:08:08,094 --> 00:08:11,770
le type du mécanisme, 
la partie qui affiche le cadran.

174
00:08:12,943 --> 00:08:14,992
Cette description sous-entend qu'il existe

175
00:08:14,992 --> 00:08:17,771
une méthode d'affichage générale 
pour tous les mécanisment

176
00:08:17,771 --> 00:08:19,707
qui suivent un schéma précis

177
00:08:19,707 --> 00:08:24,434
mais que cette méthode fait appel 
elle-même à d'autres méthodes

178
00:08:27,874 --> 00:08:30,736
qui, elles, pourraient avoir 
un comportement adaptable

179
00:08:30,736 --> 00:08:33,604
donc un aspect polymorphique.

180
00:08:36,497 --> 00:08:39,220
L'idée est donc de permettre 
à ces méthodes d'avoir

181
00:08:39,220 --> 00:08:42,273
un comportement spécifique 
en fonction des sous-classes

182
00:08:42,273 --> 00:08:45,544
c'est à dire que par exemple 
on aurait une méthode d'affichage

183
00:08:45,544 --> 00:08:48,560
du type de mécanisme spécifique
à chaque sous-classe,

184
00:08:48,560 --> 00:08:51,682
de même on aurait une méthode 
d'affichage du cadran

185
00:08:51,682 --> 00:08:53,575
spécifique à chaque sous-classe

186
00:08:53,575 --> 00:08:57,253
et que, grâce au polymorphisme
elle puisse s'adapter automatiquement

187
00:08:57,253 --> 00:08:59,351
à la nature réelle des objets 
auxquels elle s'applique.

188
00:09:00,331 --> 00:09:03,334
Le fait que le même schéma de base

189
00:09:03,334 --> 00:09:06,367
soit imposé à tous pour les mécanismes

190
00:09:06,367 --> 00:09:10,600
sous-entend que une fois cette méthode
adhérant à ce schéma fixé,

191
00:09:10,600 --> 00:09:12,823
il ne faut plus qu'elle soit modifiée,

192
00:09:12,823 --> 00:09:16,902
ce qui devrait nous faire penser
à des méthodes finales.

193
00:09:17,682 --> 00:09:21,452
Nous voulons également faire en sorte 
qu'il existe une version par défaut

194
00:09:21,452 --> 00:09:24,980
utilisable dans les sous-classes
de l'affichage du cadran.

195
00:09:24,980 --> 00:09:27,974
Donc cette méthode devrait avoir
une définition par défaut,

196
00:09:27,974 --> 00:09:31,120
typiquement tout en haut de la hiérarchie,
dans la classe « Mecanisme »,

197
00:09:31,120 --> 00:09:34,550
cette version par défaut pourrait 
par exemple, simplement afficher l'heure

198
00:09:35,370 --> 00:09:37,737
et être utilisée dans les sous-classes

199
00:09:37,737 --> 00:09:41,042
pour justement afficher l'heure 
et éventuellement d'autres informations.

200
00:09:41,042 --> 00:09:43,349
Donc ici nous nous dirigeons 
vers une méthode

201
00:09:43,349 --> 00:09:45,815
qui serait pour l'affichage 
du cadran polymorphique

202
00:09:45,815 --> 00:09:48,849
mais qui aurait une définition 
par défaut dans la super-classe.

203
00:09:48,849 --> 00:09:52,828
Par contre, pour l'affichage
du type de mécanisme

204
00:09:52,828 --> 00:09:57,747
nous voulons impérativement en imposer
la redéfinition dans les sous-classes.

205
00:09:58,387 --> 00:10:00,907
Ce qui, naturellement ici, 
devrait nous faire penser

206
00:10:02,607 --> 00:10:04,385
à la virtualité pure.

207
00:10:05,866 --> 00:10:07,686
Voici comment on pourrait traduire

208
00:10:07,686 --> 00:10:10,046
ces différentes contraintes en code C++.

209
00:10:10,046 --> 00:10:12,936
Notre super-classe « Mecanisme » offre

210
00:10:12,936 --> 00:10:15,764
une méthode d'affichage polymorphique

211
00:10:16,384 --> 00:10:20,193
qui redéfinit celle héritée de « produit »
laquelle affichait le prix.

212
00:10:20,193 --> 00:10:24,151
Notre super-classe « Mecanisme »
offre donc une méthode d'affichage

213
00:10:24,151 --> 00:10:26,434
qui obéit à un schéma précis,

214
00:10:26,434 --> 00:10:30,260
lequel affichera le type, 
la cadran et le prix

215
00:10:30,260 --> 00:10:33,576
par le biais de la méthode
héritée de produit.

216
00:10:34,236 --> 00:10:38,145
Pour faire en sorte que ce schéma 
soit fixé une fois pour toute

217
00:10:38,145 --> 00:10:41,919
et ne soit pas redéfinissable 
dans une sous-classe de la hiérarchie

218
00:10:41,919 --> 00:10:46,493
nous marquons la méthode
comme étant finale.

219
00:10:47,213 --> 00:10:51,465
Les sous-classes de « Mecanisme » ne pourrons 
donc plus redéfinir la méthode « afficher »,

220
00:10:51,465 --> 00:10:55,250
donc tous les mécanismes s'afficheront
selon ce schéma d'affichage précis.

221
00:10:55,910 --> 00:10:58,190
Par contre par le biais
de nouvelles méthodes :

222
00:10:58,190 --> 00:11:00,004
« afficher_type », « afficher_cadran »

223
00:11:00,004 --> 00:11:02,811
qui vont être définies
bien sûr de façon virtuelle,

224
00:11:02,811 --> 00:11:05,960
on garantie que les différentes parties
impliquées dans le schéma

225
00:11:05,960 --> 00:11:08,496
sont elles adaptables, modifiables, 
dans les sous-classe.

226
00:11:09,216 --> 00:11:12,060
Vous aurez noté au passage, 
que puisque la méthode « afficher »

227
00:11:12,060 --> 00:11:16,254
de la classe « Mecanisme » redéfini la méthode
« afficher » de la classe « Produit »

228
00:11:16,254 --> 00:11:19,188
nous avons prit le soin 
de la marquer comme « override ».

229
00:11:20,088 --> 00:11:21,777
La méthode « afficher_cadran »,

230
00:11:21,777 --> 00:11:24,294
telle que stipulée dans les contraintes
que l'on a énoncées tout à l'heure,

231
00:11:24,294 --> 00:11:27,191
offre une version par défaut 
qui permet d'afficher l'heure.

232
00:11:27,191 --> 00:11:29,697
Par contre la méthode « afficher_type »,

233
00:11:29,697 --> 00:11:33,507
on veut en imposer la définition concrète
dans les sous-classes

234
00:11:33,507 --> 00:11:36,101
mais elle reste quelque chose 
d'abstrait au niveau des mécanismes

235
00:11:36,101 --> 00:11:39,050
elle est donc déclarée comme
une méthode virtuelle pure.

236
00:11:39,470 --> 00:11:42,568
Si l'on veut permettre aux sous-classes
de mécanisme qui aurait redéfini

237
00:11:42,568 --> 00:11:44,731
« afficher_cadran » d'invoquer quand même

238
00:11:44,731 --> 00:11:46,985
la méthode « afficher_cadran »
héritée de la super-classe

239
00:11:46,985 --> 00:11:50,792
alors il faut que l'accès à « afficher_cadran »
soit possible dans ces sous-classes

240
00:11:50,792 --> 00:11:52,787
et c'est la raison pour laquelle

241
00:11:52,787 --> 00:11:55,585
nous avons étiqueté cette méthode 
comme étant protégée.

242
00:11:55,585 --> 00:11:59,262
À contrario, la méthode « afficher_type »
ne sera pas ré-invoquée

243
00:11:59,262 --> 00:12:00,896
dans les sous-classes de « Mecanisme »

244
00:12:00,896 --> 00:12:02,542
elle est virtuelle pure et son corps.

245
00:12:02,542 --> 00:12:05,545
Par conséquent, il convient tout à fait
de la déclarer en privé .

246
00:12:05,925 --> 00:12:07,952
Tous les mécanismes avec lesquels

247
00:12:07,952 --> 00:12:09,821
on veut pouvoir concrètement travailler,

248
00:12:09,821 --> 00:12:13,170
on veut pouvoir doter une montre 
d'un cœur qui a un mécanisme analogique,

249
00:12:13,170 --> 00:12:15,447
doivent par conséquent impérativement

250
00:12:15,447 --> 00:12:17,757
redéfinir concrètement 
la méthode « afficher_type »

251
00:12:17,757 --> 00:12:19,795
justement pour pouvoir être instanciée.

252
00:12:19,795 --> 00:12:23,443
On imagine ici que pour la classe
« MecanismeAnalogique »,

253
00:12:23,443 --> 00:12:27,511
« afficher_type » affiche simplement
le libellé analogique.

254
00:12:28,171 --> 00:12:30,666
La méthode « afficher_cadran » a, certes

255
00:12:30,666 --> 00:12:33,017
une définition de base
dans la super-classe,

256
00:12:33,017 --> 00:12:36,315
mais peut parfaitement être redéfinie
dans les sous-classes,

257
00:12:36,315 --> 00:12:39,172
par exemple ici 
on peut imaginer de la redéfinir

258
00:12:39,172 --> 00:12:41,375
dans la sous-classe « MecanismeAnalogique »

259
00:12:41,375 --> 00:12:43,588
de sorte à ce qu'elle affiche l'heure

260
00:12:43,588 --> 00:12:46,622
en rappelant la méthode 
héritée de la super-classe.

261
00:12:46,622 --> 00:12:50,499
Donc on rappel ici la petite notation 
par le biais de résolution de portée

262
00:12:50,499 --> 00:12:54,608
qui permet d'appeler la méthode
« afficher_cadran » de la classe « Mecanisme »

263
00:12:54,608 --> 00:12:57,680
mais qui en plus, va afficher la date.

264
00:12:58,380 --> 00:13:00,769
De façon analogue,
la classe « MecanismeDouble »

265
00:13:00,769 --> 00:13:03,684
va donc aussi offrir une définition 
concrète de « afficher_type ».

266
00:13:03,684 --> 00:13:06,886
Elle peut aussi redéfinir
la méthode « afficher_cadran »

267
00:13:06,886 --> 00:13:08,993
et bénéficier la méthode « afficher_cadran »

268
00:13:08,993 --> 00:13:11,796
héritée et de « MecanismeAnalogique »
et de « MecanismeDigital ».

269
00:13:12,316 --> 00:13:15,058
On afficherait par ce biais-là
les informations propres

270
00:13:15,058 --> 00:13:18,012
au « MecanismeAnalogique »
à savoir l'heure et la date

271
00:13:18,012 --> 00:13:20,289
et par ce biais-là 
les informations propres

272
00:13:20,289 --> 00:13:24,486
au « MecanismeDigital » à savoir
l'heure encore suivi du réveil.

273
00:13:25,146 --> 00:13:27,715
Et maintenant, comme nous en avons
désormais l'habitude

274
00:13:27,715 --> 00:13:29,700
nous pouvons tester
les nouveaux développements

275
00:13:29,700 --> 00:13:31,811
au moyen d'un petit programme principal.

276
00:13:31,811 --> 00:13:33,878
Nous pouvons construire 
un mécanisme analogique

277
00:13:33,878 --> 00:13:36,609
en utilisant la valeur 
par défaut pour l'heure.

278
00:13:36,609 --> 00:13:38,540
C'est à dire en ne précisant
rien pour l'heure.

279
00:13:38,540 --> 00:13:40,526
Nous pouvons construire
un mécanisme digital

280
00:13:40,526 --> 00:13:43,774
qui lui aurait une autre valeur 
que la valeur par défaut pour l'heure

281
00:13:43,774 --> 00:13:46,015
et des valeurs spécifiques 
pour ces paramètres

282
00:13:46,015 --> 00:13:48,104
et de façon analogue, un « MecanismeDouble »

283
00:13:48,104 --> 00:13:50,877
qui donnerait toutes les informations
nécessaires à son initialisation

284
00:13:50,877 --> 00:13:54,306
comme une heure ici, 
une date et l'heure du réveil.

285
00:13:54,306 --> 00:13:57,411
La méthode « afficher » des mécanismes
que nous venons de développer

286
00:13:57,411 --> 00:14:00,910
va en fait être invoquée par la surcharge
de l'opérateur d'affichage

287
00:14:00,910 --> 00:14:03,636
que nous avons développé
précédemment pour les produits.

288
00:14:03,636 --> 00:14:05,454
Cette méthode est polymorphique

289
00:14:05,454 --> 00:14:07,538
et va donc s'adapter 
à tous types de produits

290
00:14:07,538 --> 00:14:09,297
donc y compris à des mécanismes.

291
00:14:09,297 --> 00:14:12,226
Ces lignes vont donc nous permettre
de tester nos dernier développements

292
00:14:12,226 --> 00:14:14,532
sur les constructeurs
dans la hiérarchie de « Mecanisme »

293
00:14:14,532 --> 00:14:17,676
et cette ligne va nous permettre 
de tester notre méthode d'affichage.

294
00:14:17,676 --> 00:14:20,592
Nous pouvons maintenant doter 
notre montre d'un cœur concret,

295
00:14:20,592 --> 00:14:23,610
nous pouvons par exemple imaginer 
de définir dans la classe « Montre »

296
00:14:23,610 --> 00:14:25,701
un constructeur qui prendrait en argument

297
00:14:25,701 --> 00:14:28,190
la valeur du pointeur vers un mécanisme.

298
00:14:28,190 --> 00:14:30,241
Donc on peut construire ce mécanisme

299
00:14:30,241 --> 00:14:33,716
par le biais des constructeurs que 
nous avons détaillés dans cette séquence.

300
00:14:33,716 --> 00:14:36,431
L'affichage de la montre 
serait lui aussi complété

301
00:14:36,431 --> 00:14:38,941
de sorte à invoquer
l'affichage de son cœur.

302
00:14:38,941 --> 00:14:42,732
Le code complet de cette partie
est téléchargeable sur le site du cours.

303
00:14:42,732 --> 00:14:46,267
Et ceci conclut cette séquence 
sur la modélisation des mécanismes
