1
00:00:04,284 --> 00:00:05,470
Dans la séquence vidéo précédente,

2
00:00:05,826 --> 00:00:09,405
nous avions vu les concepts généraux
de la programmation orientée objet.

3
00:00:09,734 --> 00:00:11,519
Dans cette séquence vidéo,

4
00:00:11,519 --> 00:00:14,399
nous allons voir comment écrire 
tout ceci concrètement en C++.

5
00:00:14,399 --> 00:00:19,469
Nous avions donc vu que la programmation
orientée objet définit la notion de classe

6
00:00:19,470 --> 00:00:22,883
qui est le résultat des processus 
d'abstraction et d'encapsulation

7
00:00:22,883 --> 00:00:25,819
comme par exemple 
la définition d'une classe « Rectangle »

8
00:00:25,819 --> 00:00:28,349
qui aurait des attributs
« largeur » et « hauteur »

9
00:00:28,349 --> 00:00:30,757
et qui aurait une méthode « surface ».

10
00:00:31,338 --> 00:00:33,224
La classe, au sens 
des langages de programmation,

11
00:00:33,224 --> 00:00:37,650
définit un nouveau type qui nous permet
de créer différentes variables

12
00:00:37,681 --> 00:00:40,948
comme par exemple trois variables :
« rect1 », « rect2 », « rect3 »

13
00:00:41,550 --> 00:00:46,561
qui sont en langage orienté objet
des « instances » ou des « objets ».

14
00:00:46,561 --> 00:00:48,657
Comment tout ceci s'écrit en C++ ?

15
00:00:48,958 --> 00:00:52,653
Une classe en C++ se déclare 
avec le mot-clé « class ».

16
00:00:53,138 --> 00:00:55,400
Par exemple, pour déclarer
la classe « Rectangle »,

17
00:00:55,400 --> 00:00:59,396
on va écrire « class Rectangle »
qui est bien un nouveau nom de type

18
00:00:59,396 --> 00:01:02,285
et puis, on mettra les attributs 
et les méthodes de la classe

19
00:01:02,285 --> 00:01:04,274
comme nous allons le détailler 
par la suite.

20
00:01:04,274 --> 00:01:08,061
Tout ceci étant terminé
par un point virgule,

21
00:01:08,100 --> 00:01:10,449
il ne faut absolument pas oublier 
ce point virgule.

22
00:01:10,449 --> 00:01:14,018
C'est une erreur fréquente 
les premières fois qu'on écrit des class.

23
00:01:14,142 --> 00:01:19,062
Cette déclaration définit un nouveau type,
« Rectangle », que l'on peut bien sûr utiliser

24
00:01:19,076 --> 00:01:20,973
pour définir des variables,

25
00:01:20,973 --> 00:01:22,966
comme on le faisait 
avec n'importe quel autre type,

26
00:01:22,966 --> 00:01:27,641
en commençant donc par le nom du type 
et en suivant par le nom de la variable.

27
00:01:27,641 --> 00:01:34,055
Par exemple, pour déclarer une instance,
une variable « rect1 » de la classe « Rectangle »,

28
00:01:34,055 --> 00:01:38,040
on utilise le type, « Rectangle »,
suivi du nom de la variable, « rect1 ».

29
00:01:38,322 --> 00:01:41,756
A ce stade, notre tout premier programme 
ressemblerait à ceci.

30
00:01:41,756 --> 00:01:46,088
On déclare en début de programme ici
un nouveau type « class Rectangle »

31
00:01:46,088 --> 00:01:47,920
pour l'instant, on ne sait pas encore
quoi y mettre,

32
00:01:47,920 --> 00:01:49,977
mais on n'oublie pas de terminer
avec le point virgule.

33
00:01:49,977 --> 00:01:51,893
Puis ensuite, dans notre « main »,

34
00:01:51,893 --> 00:01:56,033
on déclare ici une variable « rect1 »
de type « Rectangle ».

35
00:01:56,451 --> 00:01:58,890
Voyons maintenant 
comment remplir cette partie,

36
00:01:58,890 --> 00:02:02,917
c'est-à-dire comment mettre des attributs
et des méthodes à notre classe.

37
00:02:02,917 --> 00:02:06,290
Commençons par les attributs,
les attributs de la classe « Rectangle »

38
00:02:06,290 --> 00:02:08,969
sont donc sa largeur
et sa hauteur.

39
00:02:08,969 --> 00:02:11,030
Pour déclarer des attributs,

40
00:02:11,030 --> 00:02:13,623
il suffit simplement, 
comme les champs d'une structure,

41
00:02:13,623 --> 00:02:17,618
de déclarer les différents attributs
en mettant le type et le nom de l'attribut

42
00:02:17,618 --> 00:02:22,356
On déclare ici, pour chacun des attributs,
son type, son nom d'attribut

43
00:02:22,356 --> 00:02:23,684
suivi d'un point virgule.

44
00:02:23,684 --> 00:02:26,437
Pour notre exemple de class Rectangle,
ceci donnerait simplement :

45
00:02:26,437 --> 00:02:29,659
« double hauteur »
« double largeur »

46
00:02:29,659 --> 00:02:33,329
c'est aussi simple que ça, aussi simple 
que les champs d'une structure.

47
00:02:33,329 --> 00:02:36,243
De même, pour l'utilisation 
des attributs d'une instance,

48
00:02:36,243 --> 00:02:39,830
on va utiliser la même syntaxe
que les champs d'une structure.

49
00:02:39,830 --> 00:02:45,360
Pour cela, on aura le nom de l'instance,
suivi d'un point et du nom de l'attribut

50
00:02:45,360 --> 00:02:46,934
que l'on veut désigner.

51
00:02:46,934 --> 00:02:50,309
Par exemple, pour désigner 
la « hauteur » du rectangle « rect1 »,

52
00:02:50,309 --> 00:02:53,149
on écrirait : « rect1.hauteur ».

53
00:02:53,149 --> 00:02:56,165
Ce qui va donc donner 
le programme suivant complet.

54
00:02:56,165 --> 00:03:01,705
Ici, j'ai inclus la bibliothèque « iostream »
parce que j'utilise les entrées et sorties,

55
00:03:01,728 --> 00:03:04,496
plus exactement
l'affichage avec « cout » et « endl »

56
00:03:04,496 --> 00:03:07,094
« using namespace std »

57
00:03:07,094 --> 00:03:10,205
et puis ensuite, la déclaration 
de notre classe « Rectangle »

58
00:03:10,205 --> 00:03:13,395
qui contient, on n'oublie pas
le point virgule à la fin,

59
00:03:13,395 --> 00:03:15,935
les deux attributs « hauteur » et « largeur ».

60
00:03:16,043 --> 00:03:18,621
Puis dans le « main », 
ce qu'on va faire,

61
00:03:18,621 --> 00:03:22,974
c'est que l'on va déclarer ici,
une instance « rect1 » de la classe « Rectangle »

62
00:03:22,974 --> 00:03:27,340
et puis, on va pouvoir utiliser
la « hauteur » de « rect1 »

63
00:03:27,340 --> 00:03:32,470
-- on va l'affecter ici à la valeur 3.0 --
la « largeur » toujours de « rect1 »

64
00:03:32,470 --> 00:03:36,596
à laquelle on va affecter la valeur 4.0 ;
et puis, on peut par exemple afficher

65
00:03:36,596 --> 00:03:39,486
la « hauteur » de « rect1 ».

66
00:03:39,761 --> 00:03:43,623
Tout ceci est vraiment très similaire 
aux structures telles que présentées

67
00:03:43,623 --> 00:03:46,641
dans notre précédent cours d'introduction
à la programmation.

68
00:03:46,641 --> 00:03:50,106
A noter cependant que la code donné ici
ne compile pas en l'état.

69
00:03:50,106 --> 00:03:52,210
Il vous manque encore 
un petit ingrédient

70
00:03:52,210 --> 00:03:55,033
qui sera détaillé
dans la séquence vidéo suivante.

71
00:03:55,033 --> 00:03:59,333
Mais, mis à part ça, l'esprit général
et l'essentiel de la syntaxe est ici correct.

72
00:03:59,409 --> 00:04:02,168
Passons maintenant
à la déclaration des méthodes.

73
00:04:02,168 --> 00:04:05,585
Les méthodes sont simplement des fonctions
que l'on va mettre au sein de la classe.

74
00:04:05,585 --> 00:04:09,555
Dans le cas de notre classe « Rectangle »,
on va s'intéresser ici

75
00:04:09,559 --> 00:04:11,917
à lui ajouter la méthode « surface ».

76
00:04:11,917 --> 00:04:14,728
Une méthode se déclare simplement 
comme une fonction

77
00:04:14,728 --> 00:04:17,958
avec le type de retour,
le nom de la méthode

78
00:04:17,958 --> 00:04:22,580
puis entre parenthèses rondes,
la liste des éventuels paramètres ;

79
00:04:22,580 --> 00:04:24,742
tout ceci qui est l'entête de la méthode

80
00:04:24,742 --> 00:04:28,892
étant suivi par la définition 
de la méthode, le corps de cette méthode

81
00:04:28,911 --> 00:04:30,746
entre accolades.

82
00:04:30,746 --> 00:04:32,085
La seule différence,

83
00:04:32,085 --> 00:04:35,625
c'est que les méthodes 
sont mises dans la classe elle-même.

84
00:04:35,646 --> 00:04:38,106
Dans le cas de notre exemple 
de la classe « Rectangle »,

85
00:04:38,115 --> 00:04:42,045
la méthode surface s'ajouterait donc
dans la classe « Rectangle »,

86
00:04:42,045 --> 00:04:46,511
ici avec sa valeur de retour, double,
-- une surface retourne un double --, son nom ;

87
00:04:46,511 --> 00:04:50,012
et puis ici elle n'a pas besoin 
de prendre de paramètres ;

88
00:04:50,012 --> 00:04:52,999
et elle retournerait 
la hauteur fois la largeur.

89
00:04:52,999 --> 00:04:54,942
La question qu'on pourrait se poser est

90
00:04:54,942 --> 00:04:57,559
« Mais où sont donc passés les paramètres ? »

91
00:04:57,559 --> 00:05:00,035
En effet, si on avait à écrire 
une fonction usuelle,

92
00:05:00,035 --> 00:05:02,797
non pas une méthode,
mais une fonction au sens normal du terme,

93
00:05:02,797 --> 00:05:07,977
on aurait eu besoin de passer la hauteur
et de passer la largeur

94
00:05:08,182 --> 00:05:10,027
comme arguments à la fonction

95
00:05:10,027 --> 00:05:12,878
de sorte que hauteur et largeur 
soient connues pour effectuer ce calcul.

96
00:05:12,878 --> 00:05:17,411
Comment se fait-il qu'ici 
dans la méthode de la classe « Rectangle »,

97
00:05:17,411 --> 00:05:19,805
on n'ait rien eu besoin de passer ?

98
00:05:19,805 --> 00:05:22,383
Parce que tout simplement, 
cette hauteur et cette largeur

99
00:05:22,383 --> 00:05:24,241
sont des attributs de la classe.

100
00:05:24,241 --> 00:05:27,110
La méthode surface faisant partie 
de la classe « Rectangle »,

101
00:05:27,110 --> 00:05:32,210
elle a accès aux attributs
hauteur et largeur de la classe « Rectangle ».

102
00:05:32,210 --> 00:05:35,901
C'est ce que l'on appelle techniquement
« une portée de classe »,

103
00:05:35,901 --> 00:05:38,701
c'est-à-dire que 
tous les attributs d'une classe

104
00:05:38,701 --> 00:05:41,421
sont connus de l'entièreté de cette classe

105
00:05:41,421 --> 00:05:44,216
et en particulier de chacune 
de ces méthodes.

106
00:05:44,216 --> 00:05:47,193
Par exemple, toutes les méthodes
de la classe « Rectangle »

107
00:05:47,193 --> 00:05:49,755
ont accès à la hauteur et à la largeur.

108
00:05:49,755 --> 00:05:53,531
Il n'est donc pas nécessaire de passer 
les attributs comme arguments aux méthodes

109
00:05:53,531 --> 00:05:57,537
Pour résumer, une méthode, 
c'est simplement une fonction

110
00:05:57,537 --> 00:06:00,509
qui est propre à une classe,
on va donc la mettre dans les classes,

111
00:06:00,509 --> 00:06:05,699
mais qui en plus, de ce fait, a accès
aux différents attributs de la classe.

112
00:06:05,755 --> 00:06:07,684
Et donc il est très important,

113
00:06:07,684 --> 00:06:11,265
et c'est une erreur de débutant, 
des premières écritures de méthodes,

114
00:06:11,265 --> 00:06:16,775
il est très important de ne pas passer les attributs 
à une méthode de classe.

115
00:06:16,775 --> 00:06:18,908
Pour revenir encore une fois
sur l'exemple,

116
00:06:18,908 --> 00:06:22,626
l'exemple est tout à fait correct ici,
on a bien une méthode surface

117
00:06:22,626 --> 00:06:25,943
qui ne prend pas du tout ici de paramètres

118
00:06:25,943 --> 00:06:29,845
et qui peut accéder 
à la hauteur et à la largeur de « Rectangle »

119
00:06:29,845 --> 00:06:33,192
qui ont été déclarés
comme précédemment dans la classe.

120
00:06:33,192 --> 00:06:36,689
Ceci dit, ce n'est pas 
parce qu'on n'a pas besoin de passer

121
00:06:36,689 --> 00:06:40,202
les attributs d'une classe 
comme arguments à ces méthodes

122
00:06:40,202 --> 00:06:43,241
que les méthodes 
n'ont jamais de paramètres.

123
00:06:43,241 --> 00:06:45,766
Bien sûr, si une méthode 
a besoin de recevoir des paramètres

124
00:06:45,766 --> 00:06:48,619
de l'extérieur de la classe
pour pouvoir fonctionner,

125
00:06:48,619 --> 00:06:52,268
il faudra déclarer 
les paramètres à la méthode.

126
00:06:52,268 --> 00:06:56,968
Par exemple, ici, supposons qu'on imagine
qu'on ait une classe de « figurecolorée »

127
00:06:56,968 --> 00:06:59,956
et dans cette classe,
on aurait différents attributs

128
00:06:59,956 --> 00:07:04,466
et en particulier aussi, une méthode
qui permet de colorier la figure

129
00:07:04,515 --> 00:07:08,703
laquelle méthode pourrait donc recevoir
typiquement une couleur

130
00:07:08,703 --> 00:07:12,273
et elle modifierait les instances
de la classe FigureColoree

131
00:07:12,283 --> 00:07:16,475
pour les colorier dans cette couleur,
« Couleur » étant lui-même un autre type

132
00:07:16,475 --> 00:07:19,490
qu'on aurait défini par ailleurs une classe
ou un typedef

133
00:07:19,490 --> 00:07:21,538
On pourrait donc par exemple déclarer

134
00:07:21,538 --> 00:07:24,857
une instance, 
une figure de la classe figurecoloree

135
00:07:24,857 --> 00:07:27,317
une instance rouge de la classe couleur,

136
00:07:27,317 --> 00:07:30,565
et puis un tout petit peu plus tard,
en anticipant sur une syntaxe

137
00:07:30,565 --> 00:07:35,634
qui va vous être présentée,
colorier la figure avec la couleur rouge.

138
00:07:35,634 --> 00:07:37,663
Ce qui m'intéresse ici, 
c'est de vous montrer

139
00:07:37,663 --> 00:07:41,717
que la couleur rouge vient
de l'extérieur de la classe figurecoloree.

140
00:07:41,717 --> 00:07:44,861
Elle ne fait pas partie 
de la classe figurecoloree.

141
00:07:44,861 --> 00:07:48,235
C'est pour ceci 
que l'on a besoin de la passer,

142
00:07:48,235 --> 00:07:51,125
ce n'est pas un attribut de figurecoloree,
on a besoin de la passer

143
00:07:51,140 --> 00:07:54,410
comme paramètre à la méthode coloriée.

144
00:07:54,504 --> 00:07:57,232
On a vu que les méthodes
sont des fonctions un peu particulières

145
00:07:57,232 --> 00:08:00,320
que l'on met dans les classes,
y compris avec leurs définitions.

146
00:08:00,320 --> 00:08:02,200
Mais, ceci rend souvent
le code peu lisible.

147
00:08:02,218 --> 00:08:05,053
On n'a par exemple pas une vue synthétique

148
00:08:05,053 --> 00:08:08,113
de l'ensemble des prototypes des méthodes
offertes par une classe.

149
00:08:08,139 --> 00:08:11,099
Pour cette raison, 
une meilleure lisibilité,

150
00:08:11,099 --> 00:08:13,477
mais aussi 
pour une meilleure modularisation,

151
00:08:13,477 --> 00:08:16,525
c'est-à-dire une meilleure séparation
entre d'un côté l'interface

152
00:08:16,525 --> 00:08:18,439
et d'un autre côté l'implémentation,

153
00:08:18,439 --> 00:08:20,643
une meilleure séparation 
entre différentes parties,

154
00:08:20,643 --> 00:08:25,532
pour toutes ces raisons, 
il peut être nécessaire de définir

155
00:08:25,532 --> 00:08:28,172
les méthodes à l'extérieur de la classe.

156
00:08:28,283 --> 00:08:30,610
Cela ne change rien 
à tout ce que je vous ai dit,

157
00:08:30,610 --> 00:08:32,982
c'est simplement 
une organisation de l'écriture

158
00:08:32,982 --> 00:08:34,547
qui est un tout petit peu différente

159
00:08:34,547 --> 00:08:37,081
et où l'on va sortir 
à l'extérieur de la classe

160
00:08:37,081 --> 00:08:38,851
la définition de la méthode

161
00:08:38,851 --> 00:08:41,176
et en gardant le prototype dans la classe.

162
00:08:41,176 --> 00:08:44,626
Simplement, si on sort la définition
à l'extérieur de la classe,

163
00:08:44,637 --> 00:08:48,621
il faut bien indiquer au compilateur
que c'est bien d'une méthode,

164
00:08:48,621 --> 00:08:51,190
d'une certaine classe,
et non pas une fonction

165
00:08:51,190 --> 00:08:54,308
et donc dans le nom de la méthode,
on va devoir indiquer

166
00:08:54,308 --> 00:08:56,578
à quelle classe elle se rattache

167
00:08:56,578 --> 00:08:59,082
en rajoutant devant le nom de la méthode,

168
00:08:59,082 --> 00:09:02,492
le nom de la classe suivi 
de ce que l'on appelle

169
00:09:02,531 --> 00:09:05,591
« l'opérateur de résolution de portée : : »

170
00:09:06,591 --> 00:09:11,580
Par exemple, dans notre classe « Rectangle »,
nous avions déclaré puis défini

171
00:09:11,580 --> 00:09:13,472
la méthode surface.

172
00:09:13,472 --> 00:09:17,130
Si l'on souhaite la définir à l'extérieur,
ce que l'on va garder

173
00:09:17,130 --> 00:09:22,694
dans la classe « Rectangle »,
c'est le prototype de la méthode surface

174
00:09:22,694 --> 00:09:25,532
et puis, la définition à l'extérieur

175
00:09:25,532 --> 00:09:32,316
fera précéder le nom surface
du nom de la classe ici suivi de « : : »

176
00:09:32,316 --> 00:09:36,152
On écrira donc ici la définition,
mais simplement la même que précédemment,

177
00:09:36,152 --> 00:09:41,392
mais simplement en faisant précéder
le nom surface de ce nom de classe.

178
00:09:42,193 --> 00:09:44,633
Passons maintenant 
à un autre aspect des méthodes.

179
00:09:44,728 --> 00:09:47,062
On distingue deux sortes de méthodes :

180
00:09:47,062 --> 00:09:49,102
des méthodes qui peuvent modifier

181
00:09:49,102 --> 00:09:50,812
les instances auxquelles 
elles s'appliquent

182
00:09:50,812 --> 00:09:52,125
comme par exemple, tout à l'heure,

183
00:09:52,125 --> 00:09:55,428
la méthode « colorie »
de la classe « FigureColoree »

184
00:09:55,428 --> 00:10:00,588
qui modifiait, « coloriait », l'instance
à laquelle elle s'appliquait.

185
00:10:00,598 --> 00:10:03,460
De telles méthodes, 
c'est ce que l'on appelle des « actions ».

186
00:10:03,840 --> 00:10:06,382
On les distingue des méthodes

187
00:10:06,382 --> 00:10:09,408
qui ne modifient pas les instances 
auxquelles elles s'appliquent

188
00:10:09,408 --> 00:10:13,092
comme par exemple la méthode surface
de la classe « Rectangle ».

189
00:10:13,092 --> 00:10:16,547
Calculer la surface d'un rectangle
ne va pas modifier le rectangle

190
00:10:16,547 --> 00:10:18,357
dont on calcule la surface.

191
00:10:18,357 --> 00:10:20,517
Ces méthodes s'appellent des « prédicats ».

192
00:10:20,814 --> 00:10:24,589
Pour les prédicats, il va être bon 
de l'indiquer au compilateur

193
00:10:24,589 --> 00:10:27,193
et aux autres programmeurs
qui vont lire votre code

194
00:10:27,193 --> 00:10:31,315
en rajoutant le mot « const »
après la liste des paramètres,

195
00:10:31,315 --> 00:10:35,570
après ce que l'on appelle l'entête, 
tout à la fin, vous rajoutez le mot const

196
00:10:35,570 --> 00:10:39,190
pour les prédicats, pour dire 
qu'elle ne modifie pas

197
00:10:39,201 --> 00:10:41,509
les instances auxquelles 
elles s'appliquent.

198
00:10:41,509 --> 00:10:45,380
Par exemple, dans la classe « Rectangle »,
on définirait donc ici

199
00:10:45,380 --> 00:10:52,048
le prototype de la méthode surface
en rajoutant derrière à la fin, ici, « const »

200
00:10:52,048 --> 00:10:54,708
et ce mot va bien sûr se remettre 
dans l'entête

201
00:10:54,722 --> 00:10:59,673
lorsque l'on va faire 
la définition de la méthode surface,

202
00:10:59,673 --> 00:11:03,433
ici, donc, en rajoutant ce mot aussi 
dans l'entête de cette définition.

203
00:11:03,813 --> 00:11:05,526
On voit bien en effet, ici

204
00:11:05,526 --> 00:11:08,662
que cette méthode surface 
ne modifie absolument pas

205
00:11:08,662 --> 00:11:10,297
ni la hauteur, ni la largeur.

206
00:11:10,297 --> 00:11:12,485
Elle ne fait que utiliser
la hauteur et la largeur,

207
00:11:12,485 --> 00:11:15,986
elle ne modifie pas l'instance
auquel elle s'applique.

208
00:11:15,986 --> 00:11:19,684
Si jamais vous déclarez une méthode
avec le mot-clé « const »,

209
00:11:19,684 --> 00:11:22,856
c'est-à-dire vous déclarez un prédicat
mais qu'en fait,

210
00:11:22,856 --> 00:11:25,866
la définition de cette méthode 
modifie l'instance,

211
00:11:25,866 --> 00:11:27,603
c'est-à-dire qu'en fait c'est une action,

212
00:11:27,603 --> 00:11:30,506
alors vous aurez de la part du compilateur,
un message qui dira

213
00:11:30,506 --> 00:11:32,181
« assignment of data-member »

214
00:11:32,181 --> 00:11:37,728
et celui sur lequel vous avez fait 
la modification « in read-only structure ».

215
00:11:37,728 --> 00:11:39,923
Ici, le « read-only » veut bien dire

216
00:11:39,923 --> 00:11:42,192
qu'on considère 
qu'au travers de cette méthode

217
00:11:42,192 --> 00:11:44,873
vous ne pouvez pas modifier 
l'attribut en question,

218
00:11:44,873 --> 00:11:48,527
on peut simplement « le lire » 
mais on ne peut pas le modifier, l'écrire.

219
00:11:48,527 --> 00:11:50,365
Dans ce cas-là, deux solutions :

220
00:11:50,365 --> 00:11:53,865
soit vous avez fait 
une erreur effectivement de conception

221
00:11:53,865 --> 00:11:56,022
et il faut enlever le mot « const »,

222
00:11:56,022 --> 00:11:58,234
soit vous voudriez 
que ce soit vraiment un prédicat

223
00:11:58,234 --> 00:12:00,324
et corrigez donc votre erreur.
Vous avez fait à ce moment-là

224
00:12:00,324 --> 00:12:03,043
une erreur dans l'écriture 
de la définition de cette méthode.

225
00:12:04,003 --> 00:12:08,013
Voilà vous savez maintenant déclarer,
définir les méthodes d'une classe

226
00:12:08,024 --> 00:12:11,484
mais comment les utiliser, 
comment faire appel à ces méthodes ?

227
00:12:11,661 --> 00:12:14,885
Pour cela, on va utiliser une syntaxe
que vous aviez déjà rencontré

228
00:12:14,885 --> 00:12:17,889
par exemple avec les « vectors »,
avec les « strings »

229
00:12:17,889 --> 00:12:21,431
et qui est très similaire 
à la syntaxe d'utilisation des attributs,

230
00:12:21,431 --> 00:12:26,781
c'est simplement le nom de l'instance
suivi du nom de la méthode

231
00:12:26,808 --> 00:12:29,314
et avec éventuellement entre parenthèses

232
00:12:29,314 --> 00:12:32,034
les arguments 
que l'on va passer à la méthode.

233
00:12:32,055 --> 00:12:37,191
Par exemple, pour les vectors, 
vous utilisiez « tableau.size() ».

234
00:12:37,191 --> 00:12:40,531
En fait, c'est parce que vectors de double

235
00:12:40,603 --> 00:12:45,258
est une classe et que tableau 
est une instance de cette classe

236
00:12:45,258 --> 00:12:49,226
et dans cette classe, 
on a une méthode « size() ».

237
00:12:49,226 --> 00:12:55,156
Pour, par exemple, appeler
la méthode surface de la classe « Rectangle »

238
00:12:55,184 --> 00:12:59,725
sur une instance « rect1 » 
que l'on avait déclaré de la classe « Rectangle »,

239
00:12:59,725 --> 00:13:02,197
ce que l'on va faire, c'est « rect1.surface() ».

240
00:13:02,197 --> 00:13:06,097
Le schéma général, c'est bien 
nom d'instance.nom de la méthode

241
00:13:06,097 --> 00:13:10,207
avec les arguments. 
Ici, surface ne reçoit pas d'arguments,

242
00:13:10,207 --> 00:13:12,731
et donc on met juste 
les parenthèses collées

243
00:13:12,731 --> 00:13:15,791
comme en appel d'une fonction
qui ne reçoit pas d'arguments.

244
00:13:15,791 --> 00:13:17,391
Voilà à ce stade,

245
00:13:17,391 --> 00:13:19,368
notre programme ressemblerait 
à la chose suivante.

246
00:13:19,368 --> 00:13:21,618
On déclare ici une classe « Rectangle »,

247
00:13:21,691 --> 00:13:23,818
que l'on ferme et l'on oublie pas 
le point virgule

248
00:13:23,818 --> 00:13:27,299
dans laquelle on met 
un attribut hauteur, un attribut largeur

249
00:13:27,299 --> 00:13:31,461
tous les deux de type double
et dans lesquels on rajoute une méthode

250
00:13:31,461 --> 00:13:34,477
qui ne modifie pas l'instance 
à laquelle elle s'applique

251
00:13:34,477 --> 00:13:38,007
qui s'appelle surface, 
qui ne prend pas de paramètres

252
00:13:38,007 --> 00:13:42,019
et qui retourne un double
et qui calcule la surface

253
00:13:42,019 --> 00:13:46,807
comme étant le produit de l'attribut
hauteur* l'attribut largeur,

254
00:13:46,807 --> 00:13:50,744
et puis donc dans le « main », 
on déclare ici, une instance « rect1 »

255
00:13:50,744 --> 00:13:52,174
de la classe « Rectangle ».

256
00:13:52,201 --> 00:13:56,241
On affecte la hauteur de cette instance 
« rect1.hauteur = 3.0 »

257
00:13:56,265 --> 00:14:00,026
on affecte la valeur 4 
à la largeur de l'instance « rect1 »

258
00:14:00,026 --> 00:14:02,906
et puis, on fait un appel 
à la méthode surface.

259
00:14:02,906 --> 00:14:06,901
Ici, la méthode surface 
qui ne prend pas d'arguments

260
00:14:06,901 --> 00:14:10,836
et qui s'applique à « rect1 ».
C'est donc la surface de « rect1 »

261
00:14:10,836 --> 00:14:16,686
ici, ça va bien afficher « surface : »
et puis la valeur 12 qui est 3x4.

262
00:14:16,778 --> 00:14:19,351
A noter encore une fois, 
comme pour l'exemple du début,

263
00:14:19,351 --> 00:14:21,905
qu'en toute rigueur, le code donné ici
ne compile pas,

264
00:14:21,905 --> 00:14:22,898
il manque toujours

265
00:14:22,898 --> 00:14:26,258
le même petit ingrédient
présenté dans la prochaine séquence vidéo.

266
00:14:26,968 --> 00:14:30,093
Il faut bien comprendre 
que quand j'appelle ici « rect1.surface »

267
00:14:30,093 --> 00:14:36,503
surface s'applique bien sûr à « rect1 »
et prend la hauteur et la largeur de « rect1 ».

268
00:14:36,518 --> 00:14:39,324
Chaque instance a ses propres attributs.

269
00:14:39,324 --> 00:14:42,664
Si j'avais donc déclaré comme cela, 
trois rectangles,

270
00:14:42,664 --> 00:14:48,864
que je les avais affectés respectivement
la largeur de « rect1 » à 4.0, sa hauteur à 3

271
00:14:48,864 --> 00:14:56,189
« rect2 », la largeur à 11.5, sa hauteur à 3.8
et d'autres valeurs encore pour « rect3 ».

272
00:14:56,189 --> 00:15:01,755
Chacune de ces trois instances
est une variable différente en mémoire

273
00:15:01,755 --> 00:15:07,675
qui a ses propres attributs
et lorsqu'on va appeler « rect1.surface »,

274
00:15:07,675 --> 00:15:10,969
c'est la méthode surface générale
de la classe « Rectangle »

275
00:15:10,969 --> 00:15:14,364
qui va s'appliquer à l'objet « rect1 »

276
00:15:14,364 --> 00:15:17,758
et qui dans sa définition, dans son corps,

277
00:15:17,758 --> 00:15:22,118
aura accès à la hauteur 
et à la largeur de « rect1 »

278
00:15:22,342 --> 00:15:26,068
Si j'appelle « rect2.surface »,
à ce moment-là,

279
00:15:26,068 --> 00:15:28,988
cela sera la hauteur et la largeur 
de « rect2 ».

280
00:15:29,033 --> 00:15:32,974
D'une façon résumée, 
on peut dire que l'appel « rect1.surface »

281
00:15:32,974 --> 00:15:38,514
c'est un peu comme si on appelait
la méthode surface de la classe « Rectangle »

282
00:15:38,879 --> 00:15:45,999
et on lui passait comme paramètres,
l'adresse de « rect1 ».

283
00:15:47,464 --> 00:15:49,470
Voilà ce qui conclut

284
00:15:49,470 --> 00:15:53,142
notre première séquence vidéo d'écriture
concrète de vrais codes C++

285
00:15:53,142 --> 00:15:57,043
où on a vu comment déclarer 
les attributs et des méthodes,

286
00:15:57,043 --> 00:16:00,593
on a vu essentiellement comment
écrire cet axe ci,

287
00:16:00,611 --> 00:16:04,135
reste maintenant à voir 
comment écrire cet axe là

288
00:16:04,135 --> 00:16:06,645
qui est l'objet 
de la prochaine séquence vidéo.
