1
00:00:03,994 --> 00:00:05,815
Dans la séquence vidéo précédente,

2
00:00:05,815 --> 00:00:08,847
nous avons vu comment déclarer
concrètement une classe,

3
00:00:08,847 --> 00:00:11,947
comment déclarer concrètement
des instances en C++

4
00:00:11,947 --> 00:00:14,890
nous avons vu comment
déclarer et utiliser

5
00:00:14,890 --> 00:00:17,001
à la fois les attributs et les méthodes.

6
00:00:17,528 --> 00:00:19,091
Mais nous n'avons pas fait le tour

7
00:00:19,091 --> 00:00:22,190
des aspects « encapsulation »
et « abstraction »,

8
00:00:22,190 --> 00:00:25,843
puisque pour l'instant, nous avons vu
uniquement les attributs et les méthodes,

9
00:00:25,843 --> 00:00:28,969
donc si l'on veut, cet axe-là
de l'aspect de ce diagramme,

10
00:00:28,969 --> 00:00:33,685
mais on n'a pas encore vu comment
séparer en parties visibles,

11
00:00:33,685 --> 00:00:34,954
ce qu'on appelle l'interface,

12
00:00:34,954 --> 00:00:37,530
et en parties cachées, les
détails d'implémentation.

13
00:00:37,530 --> 00:00:41,288
Donc on n'a pas encore vu cet
axe-ci de ce diagramme,

14
00:00:41,700 --> 00:00:43,417
ce qui fait l'objet de cette séquence.

15
00:00:44,161 --> 00:00:47,430
Comme nous avions vu dans la vidéo sur
les concepts généraux

16
00:00:47,430 --> 00:00:48,784
de la programmation orientée objets,

17
00:00:48,784 --> 00:00:53,572
il n'est pas bon que tous les attributs
et toutes les méthodes d'une classe

18
00:00:53,572 --> 00:00:55,261
soient accessibles à tout le monde ;

19
00:00:55,261 --> 00:00:59,510
il vaut même mieux, d'ailleurs, limiter
l'accès à quelques méthodes bien choisies.

20
00:00:59,510 --> 00:01:00,992
Concrètement, pour la classe « Rectangle »

21
00:01:00,992 --> 00:01:03,927
nous avions décider de limiter
l'interface à la méthodes « surface »

22
00:01:03,927 --> 00:01:07,761
et de mettre les attributs
« largeur » et « hauteur »

23
00:01:07,761 --> 00:01:12,039
dans la partie cachée, dans les
détails d'implémentation.

24
00:01:12,480 --> 00:01:14,132
Comment traduire cela concrètement

25
00:01:14,132 --> 00:01:15,272
en C++ ?

26
00:01:15,272 --> 00:01:17,294
Pour cela, on va utiliser deux mots-clé,

27
00:01:17,294 --> 00:01:20,057
qui sont les mots-clé « public » et « private ».

28
00:01:20,057 --> 00:01:24,428
Commençons par « private », qui va
déclarer la partie détails d'implémentation,

29
00:01:24,428 --> 00:01:27,896
la partie qui va rester cachée,
la partie qui est privée.

30
00:01:27,896 --> 00:01:32,104
Donc ici, on va dire que les attributs
hauteur et largeur

31
00:01:32,104 --> 00:01:34,015
sont « private ».

32
00:01:34,268 --> 00:01:36,445
Une fois qu'on a mis le mot-clé « private »
suivi des deux points,

33
00:01:36,445 --> 00:01:40,463
toutes les variables, les méthodes,
qui suivent ce mot-clé « private »

34
00:01:40,463 --> 00:01:45,827
sont toutes inaccessibles depuis
l'extérieur de la classe, c'est-à-dire,

35
00:01:45,827 --> 00:01:50,293
restent accessibles uniquement
aux méthodes de la classe en question.

36
00:01:50,829 --> 00:01:54,861
Notez que l'on peut aussi mettre des
méthodes dans la partie privée.

37
00:01:54,861 --> 00:01:56,015
Ce seront simplement des méthodes

38
00:01:56,015 --> 00:01:58,303
que seules les instances de la classe
pourront appeler,

39
00:01:58,303 --> 00:02:02,769
et pas les instances d'autres classes
ni appelables depuis le « main ».

40
00:02:03,434 --> 00:02:05,197
« Inaccessible depuis
l'extérieur de la classe »,

41
00:02:05,197 --> 00:02:08,352
cela veut simplement dire que
par exemple, si dans le « main »

42
00:02:08,352 --> 00:02:10,672
ou dans une autre classe,

43
00:02:10,887 --> 00:02:15,437
on déclare déclare comme ceci
une instance « rect » de la classe « Rectangle »

44
00:02:15,573 --> 00:02:21,376
et que l'on cherche par exemple
à accéder directement à la hauteur

45
00:02:22,481 --> 00:02:26,346
alors vous aurez le message que vous
essayez d'accéder à, par exemple,

46
00:02:26,346 --> 00:02:28,168
hauteur et que c'est privé.

47
00:02:28,590 --> 00:02:30,029
Donc vous aurez un message
du compilateur :

48
00:02:30,029 --> 00:02:32,786
vous ne pouvez pas le faire,
cette partie « is private ».

49
00:02:32,786 --> 00:02:35,550
Par défaut, si vous ne spécifiez 
rien du tout,

50
00:02:35,550 --> 00:02:38,248
donc par exemple, si je n'avais
pas mis cette classe-là,

51
00:02:38,248 --> 00:02:39,944
comme on l'a fait jusqu'à maintenant,

52
00:02:39,944 --> 00:02:44,688
donc par défaut, tout ce qui est
déclaré dans la classe est « private ».

53
00:02:44,688 --> 00:02:48,106
En toute rigueur, sur l'exemple
que l'on a ici,

54
00:02:48,106 --> 00:02:51,918
comme on n'a rien déclaré ici, 
la méthode « surface »

55
00:02:51,918 --> 00:02:54,003
est elle aussi « private ».

56
00:02:54,353 --> 00:02:57,264
Ceci-dit, je vous recommande de
systématiquement

57
00:02:57,264 --> 00:02:58,786
expliciter les droits d'accès

58
00:02:58,786 --> 00:03:01,957
et donc expliciter, mettre « private »
pour la partie « private »

59
00:03:01,957 --> 00:03:05,723
et donc mettre le mot-clé qui va
permettre que l'on puisse

60
00:03:05,723 --> 00:03:08,368
accéder à la méthode
surface de l'extérieur,

61
00:03:08,368 --> 00:03:10,216
qui est le mot-clé « public ».

62
00:03:10,886 --> 00:03:15,600
Donc par exemple, ici, on veut que la
méthode surface soit accessible à tous,

63
00:03:15,600 --> 00:03:17,968
soit visible de l'extérieur,
fasse partie de l'interface,

64
00:03:18,491 --> 00:03:22,959
et donc, on rajoute le mot-clé « public »
suivi des deux points.

65
00:03:22,959 --> 00:03:27,049
Comme le mot-clé « private », tout
ce qui est depuis le mot-clé « public »

66
00:03:27,049 --> 00:03:32,912
jusqu'à un autre mot « private »
est dans la zone de l'interface,

67
00:03:32,912 --> 00:03:34,882
est accessible au public,

68
00:03:34,882 --> 00:03:37,622
est accessible de
l'extérieur de la classe.

69
00:03:38,899 --> 00:03:41,502
Concrètement, si je reprends
l'exemple précédent

70
00:03:41,502 --> 00:03:46,970
où on avait dans le « main » déclaré une
instance « rect » de la classe « Rectangle »,

71
00:03:46,970 --> 00:03:50,138
je pourrais dans ce « main », avec une
variable par exemple,

72
00:03:50,138 --> 00:03:52,464
z « double » qui aurait déjà été
déclarée au préalable,

73
00:03:52,464 --> 00:03:55,726
appeler la méthode surface...

74
00:03:58,085 --> 00:04:00,181
... de la classe « Rectangle »,

75
00:04:00,181 --> 00:04:03,407
puisque cette méthode surface
est en « public »,

76
00:04:03,407 --> 00:04:05,172
elle est accessible depuis n'importe où

77
00:04:05,172 --> 00:04:07,306
et en particulier depuis le « main ».

78
00:04:07,500 --> 00:04:11,419
Si par contre, on avait oublié
ce mot « public » ici,

79
00:04:11,419 --> 00:04:15,149
alors par défaut le droit
d'accès est un droit privé

80
00:04:15,149 --> 00:04:20,503
et on ne pourrait pas appeler la
méthode surface à cet endroit-là.

81
00:04:20,601 --> 00:04:23,470
C'est exactement pour ça que
dans la vidéo précédente,

82
00:04:23,470 --> 00:04:26,265
nous avions dit que l'exemple que
nous vous donnions

83
00:04:26,265 --> 00:04:29,874
n'était pas tout à fait exact, comme nous
n'avions pas précisé de droits d'accès,

84
00:04:29,977 --> 00:04:33,449
tout était en privé, donc nous n'avions
pas le droit d'accéder

85
00:04:33,449 --> 00:04:36,080
aux attributs et aux méthodes
depuis le « main ».

86
00:04:36,876 --> 00:04:39,038
Laissez-moi maintenant vous rappeler
les bonnes pratiques

87
00:04:39,038 --> 00:04:41,344
qui ont été présentées dans
la partie très générale

88
00:04:41,344 --> 00:04:43,154
sur les principes de l'orientée objet,

89
00:04:43,361 --> 00:04:46,121
qui vise donc, que l'on mettra
en privé tous les attributs

90
00:04:46,121 --> 00:04:50,591
et la plupart des méthodes qui vont
servir en interne

91
00:04:50,591 --> 00:04:53,715
et qu'on mettra dans la partie « public »

92
00:04:53,715 --> 00:04:56,551
uniquement quelques
méthodes bien choisies,

93
00:04:56,551 --> 00:04:58,438
ce que l'on appelle l'interface.

94
00:04:58,438 --> 00:05:02,298
Il est vraiment important de n'avoir
absolument aucun attribut

95
00:05:02,298 --> 00:05:04,133
ici dans la partie « public ».

96
00:05:04,133 --> 00:05:07,987
Ceci-dit, vous me direz, mais si tous
les attributs sont en privé,

97
00:05:07,987 --> 00:05:10,406
comment faire si on a besoin de
les utiliser ?

98
00:05:10,461 --> 00:05:14,136
Par exemple, si je voulais changer la
hauteur de mon rectangle

99
00:05:14,136 --> 00:05:17,088
-- ceci en soi est discutable, est-ce qu'on
veut vraiment changer

100
00:05:17,088 --> 00:05:19,311
la hauteur d'un rectangle ?
Mais soit. --

101
00:05:19,311 --> 00:05:23,929
Supposons que l'on veuille donc
accéder à la hauteur du rectangle,

102
00:05:23,929 --> 00:05:25,926
ou ne serait-ce que la connaître,

103
00:05:25,926 --> 00:05:28,622
comment faire pour connaître la hauteur
ou la largeur du rectangle,

104
00:05:28,622 --> 00:05:30,291
s'ils sont en privé,

105
00:05:30,291 --> 00:05:33,320
puisque je ne peux pas y accéder
depuis l'extérieur de la classe ?

106
00:05:33,320 --> 00:05:36,982
Je ne peux par exemple pas faire
quelque chose comme ceci ;

107
00:05:36,982 --> 00:05:42,348
déclarer un nouveau « Rectangle »
et vouloir afficher sa hauteur.

108
00:05:43,036 --> 00:05:44,337
Je ne peux pas faire cela

109
00:05:44,337 --> 00:05:47,584
parce que l'attribut est en privé.

110
00:05:48,525 --> 00:05:50,786
Pour cela, on va mettre dans l'interface

111
00:05:50,786 --> 00:05:52,561
les méthodes que nous estimons
nécessaires

112
00:05:52,561 --> 00:05:56,568
pour manipuler les attributs en
modification ou en consultation,

113
00:05:56,568 --> 00:06:00,147
donc par exemple, une méthode
pour accéder à la hauteur,

114
00:06:00,147 --> 00:06:04,214
ou une méthode pour
modifier la largeur.

115
00:06:04,214 --> 00:06:07,712
Par exemple, ici on voudrait une méthode

116
00:06:07,712 --> 00:06:09,545
qui permet d'accéder à
la valeur de la hauteur

117
00:06:09,545 --> 00:06:11,835
et on écrirait quelque chose comme ça,

118
00:06:11,835 --> 00:06:14,781
au travers d'une méthode « get » hauteur ».

119
00:06:15,628 --> 00:06:17,827
J'insiste sur le fait que cette partie
de la conception est

120
00:06:17,827 --> 00:06:19,331
extrêmement importante,

121
00:06:19,331 --> 00:06:22,093
il ne faut pas systématiquement mettre
des méthodes qui permettent

122
00:06:22,093 --> 00:06:24,835
de modifier ni même de lire tous les
attributs d'une classe,

123
00:06:24,835 --> 00:06:28,649
mais il faut bien réfléchir à quels sont
les attributs que l'on veut offrir

124
00:06:28,649 --> 00:06:33,119
au travers d'une méthode, soit en
modification soit en accès, en lecture,

125
00:06:33,119 --> 00:06:34,601
depuis l'extérieur.

126
00:06:34,908 --> 00:06:37,445
De telles méthodes sont ce qu'on appelle
des « accesseurs »,

127
00:06:37,445 --> 00:06:38,630
pour accéder aux attributs,

128
00:06:38,630 --> 00:06:40,907
et des « manipulateurs »,
pour les modifier.

129
00:06:40,907 --> 00:06:43,855
Les accesseurs, aussi appelés
« méthodes get » ou « getters »

130
00:06:44,088 --> 00:06:47,817
sont donc des « prédicats », puisqu'ils
ne vont pas changer les attributs,

131
00:06:47,817 --> 00:06:50,514
on mettra donc le mot-clé « const »
derrière leur entête,

132
00:06:50,514 --> 00:06:54,081
et permettent de retourner la valeur
d'un attribut, donc par exemple,

133
00:06:54,081 --> 00:06:56,665
si on veut retourner la valeur
de l'attribut hauteur,

134
00:06:56,665 --> 00:07:01,579
hauteur étant de type « double », on va
retourner ici une valeur du même type

135
00:07:01,579 --> 00:07:04,166
on va retourner la hauteur,
donc un « double getHauteur »

136
00:07:04,166 --> 00:07:08,004
la méthode est donc un prédicat,
donc on va écrire ici « const »

137
00:07:08,004 --> 00:07:10,410
et on écrira simplement
« return hauteur; ».

138
00:07:10,410 --> 00:07:12,830
Je vous rappelle que toutes les méthodes
ont accès à tous les attributs,

139
00:07:12,830 --> 00:07:15,542
donc ici c'est bien la hauteur
de l'instance courante.

140
00:07:15,542 --> 00:07:20,262
De la même façon, on peut ici déclarer
un accesseur pour l'attribut largeur.

141
00:07:20,262 --> 00:07:25,143
On a aussi des manipulateurs, appelés
aussi « méthodes set » ou « setters »,

142
00:07:25,298 --> 00:07:29,950
qui permettent de modifier cette fois-ci,
et ce sont donc des actions,

143
00:07:29,950 --> 00:07:33,284
de modifier les attributs en
leur affectant une valeur.

144
00:07:33,284 --> 00:07:35,019
Donc pour ça, pour affecter une valeur,

145
00:07:35,019 --> 00:07:37,411
il vaut bien qu'on reçoive une valeur
de l'extérieur,

146
00:07:37,411 --> 00:07:40,431
c'est cette valeur que l'on va
mettre dans l'instance,

147
00:07:40,431 --> 00:07:44,351
et donc on va recevoir ici un paramètre
qui est la valeur à mettre

148
00:07:44,351 --> 00:07:47,428
et on ne retournera cette fois-ci rien,

149
00:07:47,428 --> 00:07:48,652
ce n'est pas le but de
retourner une valeur,

150
00:07:48,652 --> 00:07:51,479
mais de mettre une valeur;
et la valeur qu'on l'on a reçue,

151
00:07:51,479 --> 00:07:56,389
donc par exemple, ici, le paramètre « h »,
on va la recopier dans « setHauteur »,

152
00:07:56,389 --> 00:07:58,181
on la recopiera dans hauteur,

153
00:07:58,181 --> 00:08:03,492
et le paramètre « l »  ici dans « setLargeur »,
on le recopiera dans l'attribut larguer.

154
00:08:03,714 --> 00:08:06,521
Regardons donc un exemple complet,

155
00:08:06,521 --> 00:08:09,042
toujours avec notre classe « Rectangle »,

156
00:08:09,042 --> 00:08:13,934
dans la partie interface publique on aura
donc déclaré la méthode surface,

157
00:08:13,934 --> 00:08:20,946
puis on aura ajouté un accesseur
à la hauteur, qui est un prédicat const ici,

158
00:08:20,946 --> 00:08:24,232
un accesseur à la largeur, qui va
retourner la largeur,

159
00:08:24,232 --> 00:08:27,259
et puis ici, deux modifieurs comme
présentés précédemment,

160
00:08:27,259 --> 00:08:31,412
qui vont recevoir respectivement une
valeur pour la hauteur

161
00:08:31,412 --> 00:08:34,646
et une valeur pour la largeur.

162
00:08:35,109 --> 00:08:39,028
Et puis dans la partie privée de notre
classe « Rectangle », qui se termine ici,

163
00:08:39,028 --> 00:08:43,275
nous aurons donc les deux attributs
hauteur et largeur.

164
00:08:43,903 --> 00:08:44,855
Comment on utilise ça ?

165
00:08:44,855 --> 00:08:49,724
Dans le « main », on va déclarer ici une
instance « rect1 » de la classe « Rectangle »,

166
00:08:49,724 --> 00:08:53,038
et on va utiliser la méthode
« setHauteur »

167
00:08:53,038 --> 00:08:58,369
pour affecter la hauteur
de rect1 à la valeur 3.0

168
00:08:58,369 --> 00:09:00,883
ce qui aura pour effet de faire
la chose suivante :

169
00:09:00,883 --> 00:09:05,877
on a une instance rect1
de la classe « Rectangle »,

170
00:09:05,877 --> 00:09:11,287
et ici on appelle « setHauteur »
qui va donc affecter une valeur

171
00:09:11,287 --> 00:09:12,816
à la hauteur de rect1.

172
00:09:13,765 --> 00:09:18,102
C'est donc bien la hauteur de rect1
qui va recevoir la valeur 3.0

173
00:09:18,102 --> 00:09:24,632
Puis on va appeler la méthode
« setLargeur » avec la valeur 4.0

174
00:09:24,632 --> 00:09:29,121
donc ici on va placer 4.0 dans la largeur,

175
00:09:29,769 --> 00:09:31,553
mais la largeur de rect1.

176
00:09:33,167 --> 00:09:35,509
C'est donc bien la largeur de rect1

177
00:09:35,509 --> 00:09:37,467
qui recevra la valeur 4.0,

178
00:09:37,467 --> 00:09:40,798
puis ensuite, par exemple, on pourrait
vouloir afficher la hauteur,

179
00:09:40,798 --> 00:09:43,674
et on appelle ici la méthode 
« getHauteur »

180
00:09:43,674 --> 00:09:49,725
ici donc, qui va retourner la hauteur,
mais la hauteur de rect1,

181
00:09:49,725 --> 00:09:54,769
et donc cet appel ici qui va retourner
la valeur 3.0.

182
00:09:55,274 --> 00:09:57,497
Une question que me posent souvent
mes étudiants, c'est :

183
00:09:57,497 --> 00:10:00,145
« Mais, Monsieur, pourquoi faire tout
ceci, c'est trop compliqué, »

184
00:10:00,145 --> 00:10:03,151
« pourquoi pas simplement tout mettre
en public, et auquel cas on pourrait »

185
00:10:03,151 --> 00:10:08,148
« accéder directement aux différents champs,
on n'aurait pas besoin de mettre »

186
00:10:08,148 --> 00:10:11,381
« toutes ces méthodes get/set ;
et surtout on n'aurait pas besoin »

187
00:10:11,381 --> 00:10:16,031
« de réfléchir auxquelles mettre et quelles
méthodes bien choisir dans l'interface ? »

188
00:10:16,031 --> 00:10:20,159
Mais si on fait ceci -- et supposons donc
par exemple qu'on ait aussi

189
00:10:20,159 --> 00:10:26,109
un label qui donne un nom, par exemple, au Rectangle
ou qui est un outil dont on a besoin en interne --,

190
00:10:26,109 --> 00:10:28,004
dans ce cas, on pourrait tout à fait

191
00:10:28,004 --> 00:10:31,064
déclarer des instances comme ça,
« rect », de la classe « Rectangle »

192
00:10:31,064 --> 00:10:36,219
et directement écrire par exemple 
« rec.hauteur = -36 »,

193
00:10:36,219 --> 00:10:39,573
mettre donc des hauteurs qui ne sont pas
vérifiées, qui ne sont pas valides.

194
00:10:39,573 --> 00:10:43,311
Ici on n'a absolument aucun contrôle
sur ce que fait

195
00:10:43,311 --> 00:10:46,927
un autre programmeur utilisateur de la
classe par rapport

196
00:10:46,927 --> 00:10:49,286
à la représentation de cette classe.

197
00:10:49,576 --> 00:10:53,232
Alors si l'on obligeait les programmeurs
utilisateurs de notre classe

198
00:10:53,232 --> 00:10:57,665
à passer par des méthodes comme par
exemple ici une méthode « setHauteur »,

199
00:10:57,665 --> 00:11:03,324
on aurait toute lattitude pour vérifier
les données que l'on a reçues,

200
00:11:03,324 --> 00:11:08,949
pour garantir l'intégrité de nos données,
l'intégrité de nos Rectangles.

201
00:11:09,835 --> 00:11:13,304
Donc par exemple, ici avec un test
sur la valeur reçue,

202
00:11:13,304 --> 00:11:19,728
par exemple si elle est inférieure ou
égale à 0 alors on gérerait l'erreur,

203
00:11:20,619 --> 00:11:22,257
ici avec un message d'erreur,
ou peu importe...

204
00:11:25,916 --> 00:11:29,688
Et puis donc si on a reçu quelque chose
de correct, alors seulement dans ce cas-là,

205
00:11:29,688 --> 00:11:36,310
on peut transmettre la valeur reçue « h »
à notre hauteur, ce qui garantit

206
00:11:36,310 --> 00:11:39,152
que notre Rectangle a toujours une
hauteur qui fait sens.

207
00:11:40,685 --> 00:11:41,847
Pour prendre un autre exemple,

208
00:11:41,847 --> 00:11:44,105
on aurait donc aussi accès à
tous les attributs,

209
00:11:44,105 --> 00:11:47,279
par exemple des attributs plus
sophistiqués comme le label ici,

210
00:11:47,279 --> 00:11:50,948
et donc on aurait accès à toutes les
méthodes de ces attributs,

211
00:11:51,108 --> 00:11:53,819
donc par exemple ici à la 
méthode « size » de ce label.

212
00:11:53,819 --> 00:11:58,409
Et puis donc imaginez que vous avez déjà
écrit 300 lignes de code comme ça,

213
00:11:58,409 --> 00:12:00,747
qui utilisent le label de Rectangle,

214
00:12:00,747 --> 00:12:03,964
et puis qu'un jour le programmeur
de la classe Rectangle décide

215
00:12:03,964 --> 00:12:07,704
de changer ce label, donc jeter vos
300 lignes de codes

216
00:12:07,704 --> 00:12:09,229
pour réécrire d'autres lignes.

217
00:12:09,615 --> 00:12:12,810
Alors que si vous vous limitez à
l'utilisation de l'interface,

218
00:12:12,810 --> 00:12:15,918
ce qui a été spécifiée au préalable
et qui ne doit pas être changée,

219
00:12:15,918 --> 00:12:20,089
si vous utilisez en externe l'interface
qui a été spécifiée,

220
00:12:20,221 --> 00:12:23,679
et que donc le programmeur de la classe, lui,
décide de changer ces labels,

221
00:12:23,679 --> 00:12:26,488
-- libre à lui ! -- c'est lui qui devra tout
reprogrammer dans sa classe,

222
00:12:26,488 --> 00:12:30,846
vous, comme vous n'utilisez que l'interface,
vous ne verrez rien d'autre à modifier,

223
00:12:30,846 --> 00:12:35,330
vous pourrez donc continuer à utiliser
la classe, avec vos lignes de codes

224
00:12:35,330 --> 00:12:37,034
que vous avez écrites jusqu'ici.

225
00:12:37,454 --> 00:12:40,333
Ces notions, ces contraintes
d'orientée-objet

226
00:12:40,333 --> 00:12:41,908
ces notions d'encapsulation,
d'abstraction,

227
00:12:41,908 --> 00:12:43,364
de limitation de l'interface,

228
00:12:43,364 --> 00:12:46,121
prennent donc vraiment du sens
quand on écrit des gros programmes,

229
00:12:46,121 --> 00:12:48,274
quand on partage du code au sein
d'une équipe,

230
00:12:48,274 --> 00:12:50,685
c'est d'ailleurs dans ce contexte-là
qu'elles ont été développées

231
00:12:50,685 --> 00:12:53,167
et qu'elles ont été inventées et
mises en place.

232
00:12:53,167 --> 00:12:55,454
Mais c'est comme ceci que l'on
fait de la bonne programmation,

233
00:12:55,454 --> 00:12:58,654
que l'on écrit des programmes
que l'on peut facilement faire évoluer,

234
00:12:58,654 --> 00:13:00,748
c'est-à-dire des programmes modulaires.

235
00:13:00,748 --> 00:13:03,628
Donc même si dans un premier temps
ça vous semble un peu fastidieux

236
00:13:03,628 --> 00:13:05,659
sur des petits programmes qui
sont développés

237
00:13:05,659 --> 00:13:07,106
dans le cadre d'exercices simples,

238
00:13:07,106 --> 00:13:10,881
pensez à cette pratique en vue d'une
programmation plus large

239
00:13:10,881 --> 00:13:12,800
et d'une bonne programmation.

240
00:13:13,450 --> 00:13:15,609
Terminons cette séquence par un 
aspect technique

241
00:13:15,609 --> 00:13:18,812
qui génère souvent beaucoup de
questions auprès des étudiants,

242
00:13:18,812 --> 00:13:21,607
et qui découle de ce l'on appelle
le « masquage ».

243
00:13:21,607 --> 00:13:26,128
Le masquage, c'est lorsqu'un idenficateur,
un nom, cache, masque, un autre nom.

244
00:13:26,634 --> 00:13:29,534
Typiquement, on avait vu ça dans le
premier cours

245
00:13:29,534 --> 00:13:31,418
d'introduction à la programmation,

246
00:13:31,418 --> 00:13:35,177
avec le masquage ici d'une variable i

247
00:13:35,177 --> 00:13:39,049
qui est masquée par une autre
variable i locale.

248
00:13:39,049 --> 00:13:43,169
Je vous rappelle que la portée de cette
variable ici c'est l'ensemble

249
00:13:43,169 --> 00:13:46,672
des lignes couvertes par le « for » et
donc la portée de ce i

250
00:13:46,672 --> 00:13:48,407
ici c'était le « for »

251
00:13:48,407 --> 00:13:51,123
et que le i en question ici, c'est bien
le i du « for »

252
00:13:51,123 --> 00:13:56,993
qui masquait le i bleu qui existe toujours
mais qui dans la partie rouge,

253
00:13:56,993 --> 00:14:01,417
était caché ; ici c'est bien le i bleu,
qui était caché

254
00:14:01,417 --> 00:14:05,754
dans la partie rouge du « for » qui était
masquée par ce i-là.

255
00:14:05,957 --> 00:14:09,387
Il se produit la même chose lorsque
l'on déclare des méthodes.

256
00:14:09,387 --> 00:14:11,761
Par exemple, supposons que l'on ait
voulu déclarer la méthode « SetHauteur »

257
00:14:14,135 --> 00:14:16,509
qui reçoit ici une valeur pour la hauteur ;

258
00:14:16,509 --> 00:14:19,221
et donc on veut indiquer par
un nom bien choisi

259
00:14:19,221 --> 00:14:20,811
que c'est une valeur pour la hauteur.

260
00:14:20,811 --> 00:14:23,628
Et donc le programmeur ici déclare
la hauteur comme étant aussi

261
00:14:23,628 --> 00:14:24,978
le nom du paramètre.

262
00:14:24,978 --> 00:14:27,886
Donc comment on écrirait cette fois-ci
le corps de la méthode de setHauteur,

263
00:14:30,794 --> 00:14:33,703
on écrirait « hauteur », la hauteur du
Rectangle, c'est bien l'attribut hauteur,

264
00:14:33,703 --> 00:14:39,021
égal, ici la hauteur reçue en paramètre,
donc cette hauteur ici,

265
00:14:39,021 --> 00:14:41,828
c'est la même que celle reçue
en paramètre.

266
00:14:41,828 --> 00:14:44,432
Le problème d'une telle écriture,
bien entendu,

267
00:14:44,432 --> 00:14:47,959
c'est que le mot « hauteur » désigne
deux choses :

268
00:14:48,067 --> 00:14:50,266
il désigne à la fois l'attribut

269
00:14:50,266 --> 00:14:53,943
et à la fois le paramètre, que
l'on a reçu ici.

270
00:14:54,375 --> 00:14:58,547
Ce n'est pas terrible pour le 
compilateur qui va vous insulter

271
00:14:58,547 --> 00:14:59,841
avec un message d'erreur en disant,

272
00:14:59,841 --> 00:15:01,926
je ne comprends pas ce que vous
avez voulu écrire.

273
00:15:02,737 --> 00:15:04,914
Dans ce cas-là, ce que l'on peut faire,

274
00:15:04,914 --> 00:15:07,312
c'est d'abord, simplement changer
le nom de l'attribut,

275
00:15:07,312 --> 00:15:10,826
et donc avoir un nom
qui n'est pas ambigu,

276
00:15:10,826 --> 00:15:13,284
comme nous l'avions fait dans un
transparent qui précède,

277
00:15:13,284 --> 00:15:17,427
mais l'on peut aussi désambiguïser
le nom en disant que l'on veut

278
00:15:17,427 --> 00:15:20,751
la hauteur du Rectangle, la hauteur
de cette instance,

279
00:15:20,751 --> 00:15:24,238
en utilisant un nom particulier
qui est le pointeur « this »

280
00:15:24,238 --> 00:15:27,506
qui veut dire un pointeur sur
l'instance courante.

281
00:15:27,815 --> 00:15:30,758
Donc « this », dès qu'on l'écrit, c'est un
pointeur sur l'instance courante

282
00:15:30,758 --> 00:15:32,706
qui veut, en gros, dire « mon adresse ».

283
00:15:32,948 --> 00:15:40,540
Par exemple, pour un Rectangle r1
dans une méthode f de r1,

284
00:15:40,540 --> 00:15:44,422
dans cette méthode, « this » vaut
l'adresse de r1.

285
00:15:44,989 --> 00:15:47,985
Si on l'appelait sur une
autre instance r2,

286
00:15:47,985 --> 00:15:53,259
« this », à ce moment-là, dans la méthode
appelée sur l'instance r2,

287
00:15:53,259 --> 00:15:55,271
vaudrait l'adresse de r2.

288
00:15:55,702 --> 00:15:58,718
Donc « this » sert bien à représenter
dans une méthode,

289
00:15:58,718 --> 00:16:00,717
l'adresse de l'instance courante.

290
00:16:00,861 --> 00:16:02,714
Par exemple, on pourrait écrire
comme ceci :

291
00:16:02,714 --> 00:16:05,960
this->hauteur (this flèche hauteur)

292
00:16:05,960 --> 00:16:08,760
Je vous indique ici, puisque c'est la
première fois qu'on le rencontre,

293
00:16:08,760 --> 00:16:12,927
que la syntaxe « flèche »
comme ceci, A->B

294
00:16:12,927 --> 00:16:17,054
veut simplement dire *A.B
(étoile A point B)

295
00:16:17,054 --> 00:16:21,278
Si A est un pointeur, donc *A est
l'objet pointé

296
00:16:21,278 --> 00:16:25,849
et l'on prend le champ B de
l'objet pointé par A.

297
00:16:25,849 --> 00:16:29,511
Ceci est un peu technique et n'a à mon
avis pas besoin d'être retenu.

298
00:16:29,511 --> 00:16:34,193
Retenez peut-être la syntaxe et donc si
on a le pointeur « this »,

299
00:16:34,193 --> 00:16:39,653
this-> va permettre d'accéder aux
méthodes et ici aux attributs

300
00:16:39,653 --> 00:16:43,022
de l'objet pointé par « this », mais comme
« this » c'est mon adresse,

301
00:16:43,022 --> 00:16:44,793
c'est-à-dire mes attributs.

302
00:16:45,296 --> 00:16:49,314
Ici this->hauteur, ce sera bien la
hauteur de l'instance courante,

303
00:16:49,314 --> 00:16:54,197
ce qui permet de garder le mot hauteur
tout seul sans rien devant

304
00:16:54,197 --> 00:16:57,811
comme le nom ici du paramètre.

305
00:16:59,107 --> 00:17:02,592
L'utilisation du mot-clé « this » est
absolument nécessaire

306
00:17:02,592 --> 00:17:04,134
dans les cas de masquage.

307
00:17:04,134 --> 00:17:07,690
Ceci-dit, je vous recommande d'éviter
les cas de masquage

308
00:17:07,690 --> 00:17:12,715
et donc de donner, tout en restant
significatifs, des noms différents

309
00:17:12,715 --> 00:17:15,425
aux attributs et aux paramètres
des méthodes

310
00:17:15,442 --> 00:17:17,984
qui auraient besoin de toucher
à ces attributs.

311
00:17:19,512 --> 00:17:22,183
Pour conclure, résumons ce que nous
avons appris concernant

312
00:17:22,183 --> 00:17:26,454
les droits d'accès et les portées des
attributs et des méthodes de classes.

313
00:17:26,454 --> 00:17:29,461
Pour les droits d'accès, nous avons
les deux mots-clés

314
00:17:29,461 --> 00:17:31,240
« private » et « public »

315
00:17:31,240 --> 00:17:34,960
qui opèrent sur l'ensemble des lignes
de codes qui les suivent,

316
00:17:34,960 --> 00:17:39,121
« private », pour ce qui est de la partie
strictement privée,

317
00:17:39,121 --> 00:17:41,937
c'est-à-dire l'ensemble des
attributs des méthodes

318
00:17:41,937 --> 00:17:44,076
qui ne son accessibles que depuis la
classe elle-même,

319
00:17:44,076 --> 00:17:48,310
et « public » pour l'ensemble des méthodes
que l'on souhaite offrir accessibles

320
00:17:48,310 --> 00:17:52,239
de n'importe où dans le code, dans le « main »
ou dans d'autres classes.

321
00:17:52,239 --> 00:17:57,085
Et puis si l'on déclare ici des attributs
x et y « private », ils sont accessibles

322
00:17:57,191 --> 00:18:00,728
n'importe où dans la classe,
en particulier dans les méthodes,

323
00:18:00,728 --> 00:18:06,142
donc par exemple, en supposant qu'on
n'ait pas déclaré d'autres y ailleurs,

324
00:18:06,142 --> 00:18:10,275
y référera bien sûr le y
de l'instance courante.

325
00:18:10,275 --> 00:18:13,098
Par contre on peut avoir un
phénomène de masquage

326
00:18:13,098 --> 00:18:16,373
lorsque l'on déclare une variable
comme ceci, typiquement,

327
00:18:16,373 --> 00:18:19,479
un paramètre d'une méthode,
qui va donc faire que,

328
00:18:19,479 --> 00:18:22,423
d'après les règles de résolution
de portée vues

329
00:18:22,423 --> 00:18:24,846
dans le cours d'introduction
à la programmation,

330
00:18:24,846 --> 00:18:28,282
va faire que ce nom se résout ici
à la portée la plus proche,

331
00:18:28,282 --> 00:18:30,527
c'est-à-dire, au nom du paramètre,

332
00:18:30,527 --> 00:18:36,098
et si on souhaite pouvoir accéder
à l'attribut x ici, à ce moment-là

333
00:18:36,098 --> 00:18:39,246
il va falloir, entre guillemets, 
« démasquer » ce nom,

334
00:18:39,246 --> 00:18:43,328
en rajoutant le pointeur « this » pour
accéder à x.

335
00:18:44,104 --> 00:18:47,334
Ceci-dit, je ne vous recommande pas
d'utiliser cette façon de faire,

336
00:18:47,334 --> 00:18:50,280
je ne vous recommande pas d'utiliser
des pointeurs « this »,

337
00:18:50,280 --> 00:18:53,626
mais plutôt de choisir des noms
différents et pertinents,

338
00:18:53,626 --> 00:18:58,479
différents entre les attributs et les
paramètres de vos méthodes.
