1
00:00:04,402 --> 00:00:08,692
Dans les séquences vidéos précédentes,
vous avez appris à écrire une classe en c ++

2
00:00:08,692 --> 00:00:11,035
vous savez définir des méthodes 
et des attributs,

3
00:00:11,035 --> 00:00:13,782
et vous savez mettre en place un 
certain nombre de fondamentaux

4
00:00:13,782 --> 00:00:15,158
liés à l'encapsulation.

5
00:00:15,247 --> 00:00:18,242
A savoir définir ce qui est
publiquement accessible

6
00:00:18,242 --> 00:00:20,352
pour un utilisateur externe de la classe,

7
00:00:20,352 --> 00:00:21,392
et ce qui ne l'est pas.

8
00:00:21,446 --> 00:00:24,231
Nous allons étudier comment tout cela
se met en place concrètement,

9
00:00:24,246 --> 00:00:26,050
sur un certain nombre d'exemples.

10
00:00:26,050 --> 00:00:28,898
Et nous allons voir que bien encapsuler
nécessite de prendre

11
00:00:28,898 --> 00:00:30,709
un certain nombre de précautions.

12
00:00:31,612 --> 00:00:35,667
Pour rappel, à ce stade, une classe
n'est autre qu'une super structure,

13
00:00:35,667 --> 00:00:38,524
dans lequel vous pouvez mettre
non seulement des champs,

14
00:00:38,524 --> 00:00:39,794
que l'on appelle des attributs,

15
00:00:39,794 --> 00:00:43,056
mais aussi des fonctions,
que l'on appelle désormais des méthodes.

16
00:00:43,056 --> 00:00:46,534
Nous avons vu, qu'une des particularités
d'une classe, par rapport aux structures,

17
00:00:46,534 --> 00:00:50,315
c'est qu'il est possible de définir
ce qui ne doit pas être accessible

18
00:00:50,315 --> 00:00:52,201
au monde extérieur, ce qui est privé,

19
00:00:52,201 --> 00:00:55,973
et ce qui est à contrario, accessible,
c'est-à-dire public.

20
00:00:56,902 --> 00:01:00,036
Voici donc une implémentation possible
de la fameuse classe Rectangle,

21
00:01:00,036 --> 00:01:02,589
qui nous a servi d'exemple introductif
aux concepts fondamentaux

22
00:01:02,589 --> 00:01:03,899
de l'orienté objet.

23
00:01:04,138 --> 00:01:08,002
Donc lorsque l'on veut définir une classe,
on utilise le mot réservé "classe",

24
00:01:08,002 --> 00:01:11,088
suivi du nom que l'on a choisi
pour la classe.

25
00:01:11,088 --> 00:01:14,348
Comme désormais, ce nom va être
un nom de type dans le programme,

26
00:01:14,348 --> 00:01:18,377
il est l'usage de le nommer 
en commençant par une majuscule.

27
00:01:18,803 --> 00:01:21,489
Une classe est usuellement caractérisée
par un certain nombre

28
00:01:21,489 --> 00:01:24,299
de données spécifiques
que l'on appelle les attributs.

29
00:01:24,299 --> 00:01:27,618
Ici, nous avons choisi de caractériser
la classe Rectangle

30
00:01:27,618 --> 00:01:30,033
au moyen d'un attribut hauteur et largeur,

31
00:01:30,033 --> 00:01:31,906
que nous avons choisi d'implémenter

32
00:01:31,906 --> 00:01:33,722
sous la forme de deux doubles.

33
00:01:34,205 --> 00:01:36,696
Une classe est également caractérisée
par un certain nombre

34
00:01:36,696 --> 00:01:40,340
de fonctionnalités spécifiques, 
que l'on appelle les méthodes.

35
00:01:41,071 --> 00:01:43,461
Une fois que l'on a établi 
les éléments fondamentaux,

36
00:01:43,461 --> 00:01:46,938
que sont les attributs et les méthodes,
il faut se pencher sur la question

37
00:01:46,938 --> 00:01:51,778
de ce qui constitue parmi ces éléments, 
un aspect d'implémentation interne

38
00:01:51,778 --> 00:01:54,488
qui n'a pas besoin d'être connu 
du monde extérieur,

39
00:01:54,488 --> 00:01:59,006
et ce qui constitue l'interface d'utilisation,
ce que le monde extérieur

40
00:01:59,006 --> 00:02:01,771
aura besoin de connaître 
et ce qu'il peut utiliser

41
00:02:01,771 --> 00:02:03,720
de la classe en question.

42
00:02:03,720 --> 00:02:07,501
Ici, nous avons choisi d'offrir comme
fonctionnalité au monde extérieur,

43
00:02:07,501 --> 00:02:10,860
un certain nombre de méthodes
permettant de consulter

44
00:02:10,860 --> 00:02:13,473
la valeur des attributs largeur et hauteur,

45
00:02:13,473 --> 00:02:16,312
de les modifier et de faire 
un calcul de surface,

46
00:02:16,312 --> 00:02:19,151
qui utilise cette largeur 
et cette hauteur.

47
00:02:19,151 --> 00:02:22,756
Les éléments qui font partie 
de l'interface sont étiquetés

48
00:02:22,756 --> 00:02:24,620
comme étant "publics".

49
00:02:24,620 --> 00:02:28,651
A contrario, nous avons étiqueté
comme "private" tout ce qui est considéré

50
00:02:28,651 --> 00:02:29,820
comme détail d'implémentation,

51
00:02:29,820 --> 00:02:33,233
et c'est usuellement le cas 
pour les attributs.

52
00:02:33,233 --> 00:02:35,397
Notez qu'il n'est généralement
pas nécessaire

53
00:02:35,397 --> 00:02:39,106
de systématiquement définir
des méthodes "get" et "set",

54
00:02:39,106 --> 00:02:41,273
pour chacun des attributs de la classe.

55
00:02:41,273 --> 00:02:44,423
Ici, nous ne l'avons fait que parce que
à ce stade de l'apprentissage,

56
00:02:44,423 --> 00:02:47,190
nous ne savons interagir 
avec le contenu de la classe,

57
00:02:47,190 --> 00:02:48,919
que de façon très basique.

58
00:02:48,919 --> 00:02:51,454
Donc nous avons notamment besoin
de ces méthodes "set",

59
00:02:51,454 --> 00:02:53,753
pour mettre des valeurs appropriées,

60
00:02:53,753 --> 00:02:57,141
dans les attributs largeur et hauteur.

61
00:02:57,571 --> 00:02:59,561
Respecter les principes 
d'une bonne encapsulation,

62
00:02:59,561 --> 00:03:02,811
en déclarant comme privé,
ce qui relève de l’implémentation,

63
00:03:02,811 --> 00:03:06,101
comme typiquement la représentation
des attributs dans une classe,

64
00:03:06,101 --> 00:03:09,247
va permettre aux programmeurs concepteurs
de la classe rectangle,

65
00:03:09,247 --> 00:03:12,715
de lui donner la latitude de modifier
son implémentation,

66
00:03:12,715 --> 00:03:17,609
sans que ceci n'ait d'impact sur celui
qui utilise la classe rectangle.

67
00:03:17,609 --> 00:03:20,430
Par exemple, si le programmeur
de la classe rectangle

68
00:03:20,430 --> 00:03:22,653
décide de modifier son implémentation,

69
00:03:22,653 --> 00:03:26,389
ici au lieu d'utiliser deux doubles,
on pourrait imaginer qu'il utilise

70
00:03:26,389 --> 00:03:33,562
plutôt un tableau à deux éléments, 
comme ceci.

71
00:03:35,192 --> 00:03:39,080
Donc il lui suffit d'adapter en interne,
l'implémentation de ces méthodes,

72
00:03:40,410 --> 00:03:42,729
par exemple ici, au lieu d'avoir
un return hauteur,

73
00:03:42,729 --> 00:03:46,082
on aurait plutôt un return de dims[0].

74
00:03:46,082 --> 00:03:49,049
Il lui suffit donc d'adapter
l'implémentation de ces méthodes,

75
00:03:49,049 --> 00:03:52,152
pour que le code continue
à être complètement fonctionnel

76
00:03:52,152 --> 00:03:54,311
pour celui qui l'utilise, 
sans qu'il ne voit jamais

77
00:03:54,311 --> 00:03:58,644
quelles modifications ont été apportées
à l'implémentation.

78
00:03:58,644 --> 00:04:02,089
Notez aussi que puisque l'utilisateur 
externe de la classe Rectangle,

79
00:04:02,089 --> 00:04:06,206
n'a d'accès aux données 
de la classe Rectangle,

80
00:04:06,206 --> 00:04:08,007
que via une interface bien spécifique,

81
00:04:08,007 --> 00:04:11,838
il devient désormais possible de contrôler
comment se fait cet accès,

82
00:04:11,838 --> 00:04:13,864
de façon bien précise.

83
00:04:13,864 --> 00:04:17,095
Avez-vous une idée de comment 
on pourrait améliorer le code

84
00:04:17,095 --> 00:04:19,158
de la classe Rectangle, 
que vous avez sous les yeux,

85
00:04:19,158 --> 00:04:21,532
par rapport à ce point ?

86
00:04:21,532 --> 00:04:23,118
Le code que vous avez sous les yeux,

87
00:04:23,118 --> 00:04:26,150
correspond ici aux code produit
par le programmeur concepteur

88
00:04:26,150 --> 00:04:27,252
de la classe Rectangle,

89
00:04:27,252 --> 00:04:30,374
voyons ce qui se passe du côté
du programmeur utilisateur.

90
00:04:30,374 --> 00:04:32,924
Donc ça peut être la même personne
qui a défini la classe Rectangle,

91
00:04:32,924 --> 00:04:35,353
et qui l'utilise, mais pas forcément.

92
00:04:35,353 --> 00:04:37,663
Voici maintenant, un programme 
principal, qui lui est client

93
00:04:37,663 --> 00:04:41,501
de la classe Rectangle, qui a été définie
sur les transparents précédents.

94
00:04:41,501 --> 00:04:45,981
Donc la classe Rectangle définit désormais
un nouveau type, qui est utilisable,

95
00:04:45,981 --> 00:04:48,842
comme tous les autres types, 
que nous avons eu l'habitude

96
00:04:48,842 --> 00:04:50,329
d'utiliser jusqu'ici.

97
00:04:50,329 --> 00:04:52,932
Nous pouvons déclarer une variable
de type Rectangle,

98
00:04:52,932 --> 00:04:58,624
que l'on appelle usuellement
un objet, une instance,

99
00:04:59,744 --> 00:05:01,543
et commencer à travailler avec.

100
00:05:02,513 --> 00:05:04,849
Lorsque cette ligne a terminé 
de s'exécuter,

101
00:05:04,849 --> 00:05:06,094
nous disposons en fait en mémoire,

102
00:05:06,094 --> 00:05:11,513
d'un objet, de type Rectangle, 
qui a deux champs, deux attributs,

103
00:05:11,513 --> 00:05:16,102
un pour la largeur, et un pour la hauteur.

104
00:05:17,142 --> 00:05:20,273
Donc la première chose à laquelle
il faut raisonnablement penser,

105
00:05:20,273 --> 00:05:22,634
c'est d'initialiser proprement 
ces deux champs,

106
00:05:22,634 --> 00:05:26,872
pour pouvoir travailler avec un rectangle,
qui a des dimensions concrètes.

107
00:05:26,872 --> 00:05:29,656
L'initialisation d'un objet, 
à proprement parler, est tout un volet,

108
00:05:29,656 --> 00:05:32,700
dont nous aurons l'occasion de reparler 
prochainement dans le détail.

109
00:05:32,700 --> 00:05:34,195
Pour l'heure, nous allons nous contenter

110
00:05:34,195 --> 00:05:36,710
d'affecter des valeurs 
aux attributs souhaités.

111
00:05:37,120 --> 00:05:38,950
L'affectation de la largeur
et de la hauteur,

112
00:05:38,950 --> 00:05:42,036
peut se faire tout simplement au moyen
d'une interaction clavier.

113
00:05:42,036 --> 00:05:45,639
Donc on va demander à l'utilisateur
d'introduire une valeur pour la hauteur,

114
00:05:45,639 --> 00:05:48,940
une valeur pour la largeur, 
que l'on va lire dans une variable

115
00:05:48,940 --> 00:05:52,710
préalablement déclarée,
et que l'on va mettre à l'intérieur

116
00:05:52,710 --> 00:05:55,074
des champs du rectangle,
au moyen des fonctionnalités,

117
00:05:55,074 --> 00:05:57,596
que l'on a préalablement prévues.

118
00:05:57,596 --> 00:06:03,251
Donc imaginez ici que l'utilisateur 
introduise la valeur 5.0

119
00:06:05,371 --> 00:06:09,898
dans la variable lue, en utilisant
la fonctionnalité setHauteur,

120
00:06:09,898 --> 00:06:11,473
par le biais de la notation pointée,

121
00:06:11,473 --> 00:06:17,393
qui veut dire ici, mettre la hauteur 
du rectangle à la valeur lu.

122
00:06:17,393 --> 00:06:21,392
Nous aboutissons donc à cette situation
concrètement.

123
00:06:21,832 --> 00:06:24,653
Et pareil ici, pour la largeur.

124
00:06:25,133 --> 00:06:26,820
Par exemple ici.

125
00:06:26,820 --> 00:06:29,686
Une fois que le rectangle 
est proprement initialisé,

126
00:06:29,686 --> 00:06:32,688
il est possible d'invoquer 
d'autres fonctionnalités sur ce rectangle,

127
00:06:32,688 --> 00:06:36,161
comme typiquement ici,
le calcul de la surface,

128
00:06:36,161 --> 00:06:38,537
et on passe toujours par
la fameuse notation pointée

129
00:06:38,537 --> 00:06:43,568
qui signifie ici, je calcule 
la surface du rectangle.

130
00:06:43,568 --> 00:06:46,794
Et voici pour finir, une écriture affinée
de la classe Rectangle,

131
00:06:46,794 --> 00:06:50,771
qui tire partie de l'externalisation
de la définition des méthodes.

132
00:06:50,771 --> 00:06:55,307
Donc ici les méthodes sont uniquement
prototypées dans la classe rectangle,

133
00:06:55,307 --> 00:07:00,028
leur définition est placée à l'extérieur
de la classe Rectangle.

134
00:07:00,028 --> 00:07:04,463
Le lien entre la méthode et la classe
à laquelle elle appartient,

135
00:07:04,463 --> 00:07:08,108
est fait au moyen de l'opérateur
de résolution de portée.

136
00:07:08,108 --> 00:07:13,128
L'opérateur de résolution de portée (::), 
permet donc ici de lier un nom local,

137
00:07:13,128 --> 00:07:16,850
qui est le nom par exemple d'une méthode
appartenant à la classe,

138
00:07:17,820 --> 00:07:21,550
avec un nom plus global, 
qui est celui de la classe

139
00:07:21,550 --> 00:07:23,690
à laquelle cette méthode appartient.

140
00:07:23,690 --> 00:07:28,130
L'intérêt d'externaliser, est que 
la déclaration de la classe est désormais

141
00:07:28,130 --> 00:07:31,734
épurée de tous les détails 
de la définition des méthodes.

142
00:07:31,734 --> 00:07:36,091
Donc cette façon de déclarer la classe
en y mettant uniquement

143
00:07:36,091 --> 00:07:39,251
le prototype des méthodes, 
et bien évidemment, les attributs,

144
00:07:39,251 --> 00:07:44,195
va constituer ce que l'on appelle,
le prototype de la classe.

145
00:07:46,605 --> 00:07:49,813
Les définitions des méthodes, l'ensemble
des définitions des méthodes de la classe,

146
00:07:49,813 --> 00:07:53,784
vont constituer la définition de la classe.

147
00:07:53,784 --> 00:07:57,520
Donc exactement pareil 
que ce que l'on a vu avec les fonctions,

148
00:07:57,520 --> 00:08:00,714
le prototype est ce qui va permettre

149
00:08:00,714 --> 00:08:05,201
l'accord entre le programmeur utilisateur
et le programmeur concepteur

150
00:08:05,201 --> 00:08:06,370
de la classe Rectangle.

151
00:08:06,370 --> 00:08:13,072
Les définitions ne sont connues que
du programmeur concepteur.

152
00:08:13,072 --> 00:08:15,056
Celui qui utilise la classe Rectangle

153
00:08:15,056 --> 00:08:20,277
n'a besoin de connaître 
que la partie publique de son prototype.

154
00:08:20,277 --> 00:08:24,876
Notez que dans une bonne conception, 
on prendra soin de marquer comme const,

155
00:08:24,876 --> 00:08:27,260
tout ce qui n'est pas un manipulateur,

156
00:08:27,260 --> 00:08:31,003
tout ce qui n'est pas amené à modifier
la valeur des attributs.

157
00:08:31,003 --> 00:08:33,266
Plusieurs petits détails peuvent
être remarqués ici,

158
00:08:33,266 --> 00:08:35,642
notamment le fait que 
certains programmeurs

159
00:08:35,642 --> 00:08:37,361
jugent utile d'adopter une convention

160
00:08:37,361 --> 00:08:40,048
de nommage particulière 
pour les attributs,

161
00:08:40,048 --> 00:08:43,569
comme le fait de les terminer
par le caractère souligné.

162
00:08:43,569 --> 00:08:45,662
Donc c'est pour éviter
d’éventuels masquages

163
00:08:45,662 --> 00:08:49,401
avec des noms d'arguments de méthode.

164
00:08:49,401 --> 00:08:51,487
Vous noterez également ici, 
la façon particulière

165
00:08:51,487 --> 00:08:54,693
qu'a le programmeur de nommer
ses accesseurs et ses manipulateurs.

166
00:08:54,693 --> 00:08:56,523
Dans la version précédente du programme,

167
00:08:56,523 --> 00:09:01,408
la méthode qui permettait d'accéder
à l'attribut hauteur du Rectangle,

168
00:09:01,408 --> 00:09:02,742
s'appelait getHauteur,

169
00:09:02,742 --> 00:09:05,053
ici elle s'appelle hauteur tout court.

170
00:09:05,053 --> 00:09:06,420
Pareil pour la largeur.

171
00:09:06,420 --> 00:09:11,229
De même, la méthode qui permettait
de modifier la valeur de l'attribut hauteur,

172
00:09:11,229 --> 00:09:12,695
en y mettant une valeur particulière dedans,

173
00:09:12,695 --> 00:09:16,806
s'appelait setHauteur, 
ici elle s'appelle hauteur tout court.

174
00:09:16,806 --> 00:09:19,575
Certains programmeurs trouvent
cette façon de nommer

175
00:09:19,575 --> 00:09:21,182
les accesseurs et les manipulateurs,

176
00:09:21,182 --> 00:09:23,763
plus claire, plus lisible, 
au niveau de l'utilisation.

177
00:09:23,763 --> 00:09:27,267
Par exemple, ici, si dans un programme
qui utilise la classe Rectangle,

178
00:09:27,267 --> 00:09:31,999
je veux faire afficher la hauteur 
d'un rectangle donné,

179
00:09:31,999 --> 00:09:34,482
qui aurait été préalablement déclarée,

180
00:09:34,482 --> 00:09:38,053
donc ici, il me suffit d'écrire
rect.hauteur().

181
00:09:40,063 --> 00:09:42,568
Je n'ai pas besoin d'écrire
rect.get.hauteur(),

182
00:09:42,568 --> 00:09:44,732
ce qui est un peu plus lourd.

183
00:09:44,732 --> 00:09:47,886
De même si je veux modifier
dans un programme qui utilise

184
00:09:47,886 --> 00:09:50,882
la notion de rectangle, 
la hauteur d'un rectangle donnée,

185
00:09:50,882 --> 00:09:53,756
j'écrirai tout simplement ceci,

186
00:09:55,336 --> 00:09:57,273
ce qui est jugé comme 
plus lisible et plus clair

187
00:09:57,273 --> 00:09:58,718
par certains programmeurs.

188
00:09:58,718 --> 00:10:01,722
On utilise bien évidemment ici
le mécanisme de surcharge,

189
00:10:01,722 --> 00:10:04,948
le fait de donner le même nom 
à deux méthodes différentes,

190
00:10:04,948 --> 00:10:06,700
mécanisme de surcharge qui est possible

191
00:10:06,700 --> 00:10:07,962
pour les méthodes d'une classe,

192
00:10:07,962 --> 00:10:09,804
comme il l'est pour les fonctions usuelles.

193
00:10:09,804 --> 00:10:13,134
Donc il n'y a pas de confusion possible
au niveau de l'appel.

194
00:10:13,134 --> 00:10:16,465
La méthode hauteur ici, 
qui est un manipulateur se distingue

195
00:10:16,465 --> 00:10:18,733
de la méthode hauteur, 
qui est un accesseur,

196
00:10:18,733 --> 00:10:21,364
par la liste des arguments, 
qui est différente dans les deux cas,

197
00:10:21,364 --> 00:10:25,259
mais également par la présence ou non
du modificateur const.

198
00:10:25,259 --> 00:10:28,411
Donc pas de confusion possible
au moment de l'appel à ces méthodes.
