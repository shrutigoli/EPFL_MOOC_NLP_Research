1
00:00:04,092 --> 00:00:07,200
Bien penser l'interface d'utilisation
d'une classe est une étape fondamentale

2
00:00:07,200 --> 00:00:09,571
dans toute bonne conception
orientée objet.

3
00:00:09,589 --> 00:00:14,312
Une interface mal conçue qui offrirait
trop de prise à l'utilisateur externe

4
00:00:14,312 --> 00:00:17,555
sur les détails d'implémentation,
peut s'avérer tout aussi dangereuse

5
00:00:17,569 --> 00:00:19,873
que de laisser en public des attributs.

6
00:00:19,873 --> 00:00:22,679
Nous allons dans ce qui suit,
comparer deux choix d'interfaces possibles

7
00:00:22,679 --> 00:00:23,915
pour une même classe.

8
00:00:23,915 --> 00:00:27,163
Dans un premier cas, l'interface offrira
des fonctionnalités de trop bas niveau

9
00:00:27,184 --> 00:00:30,598
qui dévoilent à l'utilisateur externe
les détails d'implémentation de la classe.

10
00:00:30,598 --> 00:00:34,230
Dans le second cas, l'interface n'offrira
que ce qui est strictement nécessaire

11
00:00:34,239 --> 00:00:35,857
comme fonctionnalité.

12
00:00:35,859 --> 00:00:38,278
Et nous allons bien évidemment voir
que la seconde option

13
00:00:38,278 --> 00:00:41,168
offre de nombreux avantages
par rapport à la première.

14
00:00:41,168 --> 00:00:44,082
On s'intéresse ici à programmer une classe
qui nous permette de jouer

15
00:00:44,086 --> 00:00:45,935
au jeu du Morpion, Tic Tac Toe.

16
00:00:45,935 --> 00:00:50,658
Donc pour rappel, dans le jeu du Morpion,
deux joueurs s'affrontent sur une grille

17
00:00:50,658 --> 00:00:52,696
de 3 sur 3.
3 lignes, 3 colonnes.

18
00:00:52,709 --> 00:00:57,761
Le premier joueur peut poser un certain
type de pièces, par exemple un rond.

19
00:00:57,778 --> 00:01:01,165
Le second joueur un autre type
de pièces, par exemple une croix.

20
00:01:01,196 --> 00:01:05,261
Les deux joueurs jouent en alternance
et le but pour gagner est d'essayer

21
00:01:05,267 --> 00:01:07,496
pour un des joueurs d'aligner
3 de ces pièces

22
00:01:07,508 --> 00:01:10,570
soit en ligne, soit en diagonale,
soit en colonne.

23
00:01:10,570 --> 00:01:14,039
Dans la première version de la classe
<i>JeuMorpion</i> que vous avez ici sous les yeux

24
00:01:14,039 --> 00:01:16,379
le programmeur a une vision
assez minimaliste des services

25
00:01:16,409 --> 00:01:18,067
qu'il veut offrir au monde extérieur.

26
00:01:18,608 --> 00:01:22,123
Lorsqu'il a conçu sa classe, il s'est
penché sur des problèmes de modélisation.

27
00:01:22,123 --> 00:01:25,143
Quelles sont les données qui caractérisent
typiquement un jeu de morpion,

28
00:01:25,143 --> 00:01:27,993
et assez naturellement
il s'est dit qu'il lui fallait une grille.

29
00:01:27,993 --> 00:01:31,056
Donc il a introduit un type Grille
comme un tableau de taille fixe

30
00:01:31,060 --> 00:01:34,951
lui permettant de modéliser l'attribut
grille de la classe <i>JeuMorpion</i>.

31
00:01:34,961 --> 00:01:38,368
En termes de fonctionnalités,
accessibles depuis l'extérieur,

32
00:01:38,393 --> 00:01:41,097
il offre une méthode d'initialisation
de la grille et il offre

33
00:01:41,097 --> 00:01:44,544
comme fonctionnalité principale,
une méthode permettant

34
00:01:44,544 --> 00:01:47,694
à l'utilisateur externe
d'accéder à la grille de jeu.

35
00:01:47,720 --> 00:01:51,444
Donc un utilisateur qui accéderait
à cette grille de jeu depuis l'extérieur

36
00:01:51,444 --> 00:01:56,219
aurait toute l'attitude de pouvoir
y placer à sa guise des jetons

37
00:01:56,219 --> 00:02:00,177
pour implémenter la logique du jeu
à proprement parler.

38
00:02:00,177 --> 00:02:02,748
Examinons maintenant de plus près
les détails d'implémentation

39
00:02:02,748 --> 00:02:04,347
de cette première version.

40
00:02:04,347 --> 00:02:05,998
Tout d'abord, qu'en est-il du type Grille

41
00:02:05,998 --> 00:02:07,886
qui permet de modéliser
une grille de jeu ?

42
00:02:07,886 --> 00:02:10,900
Si l'on examine le type associé,
on se rend compte ici

43
00:02:10,900 --> 00:02:14,123
que le programmeur a fait un choix
particulier qui n'est peut-être pas

44
00:02:14,123 --> 00:02:19,257
très naturel mais qui est possible
d'en faire un tableau à 1 dimension.

45
00:02:19,257 --> 00:02:22,107
Ce qui veut dire que probablement
il voit les choses de cette façon-là.

46
00:02:22,107 --> 00:02:28,277
Donc la grille de jeu est modélisée
par le biais d'un tableau de taille fixe

47
00:02:28,277 --> 00:02:35,274
à 1D où par exemple les 3 premières
positions représentent la première ligne

48
00:02:35,284 --> 00:02:38,227
de la grille du jeu de morpion ;

49
00:02:38,227 --> 00:02:40,925
les 3 suivantes représentent
la seconde ligne

50
00:02:41,525 --> 00:02:46,140
et les 3 dernières la dernière ligne.

51
00:02:46,140 --> 00:02:48,482
Donc c'est un choix possible
même si à priori,

52
00:02:48,482 --> 00:02:50,615
il n'est peut-être pas très naturel.

53
00:02:50,615 --> 00:02:54,022
Le programmeur de la classe <i>JeuMorpion</i>
souhaite offrir à l'utilisateur

54
00:02:54,022 --> 00:02:57,750
de cette classe, un accès à la grille
afin que cet utilisateur puisse remplir

55
00:02:57,750 --> 00:02:59,641
par lui-même la grille.

56
00:02:59,641 --> 00:03:02,109
Il fait donc le choix
de modéliser la grille

57
00:03:02,109 --> 00:03:04,524
au moyen d'un pointeur sur une grille.

58
00:03:04,524 --> 00:03:09,341
Et c'est ce pointeur qui est offert
au travers de la fonctionnalité <i>get_grille</i>

59
00:03:09,341 --> 00:03:11,471
Concrètement donc, notre attribut <i>grille</i>

60
00:03:13,671 --> 00:03:15,181
n'est autre qu'un pointeur

61
00:03:15,181 --> 00:03:18,103
vers un tableau de taille fixe à 9 cases.

62
00:03:18,103 --> 00:03:21,196
Comme fonctionnalité principale,
nous avons vu que le programmeur

63
00:03:21,196 --> 00:03:23,630
de la classe <i>JeuMorpion</i>
offrait la méthode <i>get_grille</i>

64
00:03:23,630 --> 00:03:28,875
laquelle permet à l'utilisateur externe
d'accéder à la valeur de ce pointeur.

65
00:03:28,875 --> 00:03:32,474
Par le biais de ce pointeur il va être
possible à celui qui utilise la classe,

66
00:03:32,474 --> 00:03:36,621
d'accéder à la grille et de la remplir
pour implémenter la logique du jeu.

67
00:03:37,069 --> 00:03:41,221
Donc on voit que dans cette conception,
le programmeur de la classe <i>JeuMorpion</i>

68
00:03:41,230 --> 00:03:45,181
délègue la programmation de la logique
du jeu à celui qui utilise la classe

69
00:03:45,181 --> 00:03:49,551
plutôt que de la placer
à l'intérieur de la classe <i>JeuMorpion</i>.

70
00:03:49,551 --> 00:03:52,589
Ce choix est évidemment très mauvais
et nous aurons l'occasion d'y revenir.

71
00:03:53,349 --> 00:03:57,258
La seconde méthode offerte par
le programmeur de la classe <i>JeuMorpion</i>

72
00:03:57,258 --> 00:04:00,000
est la méthode <i>initialise</i>
qui se contente ici d'allouer

73
00:04:00,000 --> 00:04:03,616
un espace mémoire pour un tableau
d'entiers à 9 cases.

74
00:04:03,616 --> 00:04:07,076
Donc quelqu'un qui souhaiterait utiliser
la classe <i>JeuMorpion</i>

75
00:04:07,076 --> 00:04:08,862
pourrait le faire de la façon suivante ;

76
00:04:08,862 --> 00:04:11,915
Donc il commencerait par
déclarer une variable jeu

77
00:04:11,915 --> 00:04:14,121
par exemple de type <i>Jeu Morpion</i>.

78
00:04:14,121 --> 00:04:17,080
Ensuite il pourrait appeler
la méthode <i>initialise</i>...

79
00:04:19,520 --> 00:04:21,379
pour initialiser la grille.

80
00:04:21,659 --> 00:04:25,430
Au terme de cette initialisation
nous aurions donc, dans la variable <i>jeu</i>,

81
00:04:26,280 --> 00:04:31,470
un objet dont l'un des attributs
est un pointeur, une adresse

82
00:04:31,470 --> 00:04:34,850
vers un tableau de 9 cases.

83
00:04:35,266 --> 00:04:39,105
Pour programmer ensuite la logique du jeu,
c'est par exemple cet utilisateur

84
00:04:39,105 --> 00:04:42,788
qui va programmer la logique qui consiste
à faire jouer en alternance

85
00:04:42,788 --> 00:04:45,410
l'un ou l'autre des joueurs
plaçant des ronds et des croix.

86
00:04:45,410 --> 00:04:48,726
Eh bien le programmeur utilisateur
de la classe <i>JeuMorpion</i>

87
00:04:48,726 --> 00:04:54,048
va devoir accéder via ce pointeur
à la grille et y placer des ronds

88
00:04:54,048 --> 00:04:55,309
et des croix selon ses besoins.

89
00:04:55,679 --> 00:04:58,735
Pour connaître la valeur de ce pointeur
lui permettant justement d'accéder

90
00:04:58,735 --> 00:05:02,147
à la grille de jeu et la remplir,
l'utilisateur de la classe <i>JeuMorpion</i>

91
00:05:02,147 --> 00:05:05,520
va utiliser la fonctionnalité offerte
publiquement <i>get_grille</i>

92
00:05:05,520 --> 00:05:11,814
Donc ici, pour accéder à la valeur
de ce pointeur, il suffit d'utiliser

93
00:05:11,814 --> 00:05:15,132
la fonctionnalité <i>get_grille</i> comme ceci.

94
00:05:15,132 --> 00:05:18,057
Et nous verrons concrètement comment
on va utiliser cette fonctionnalité

95
00:05:18,057 --> 00:05:22,358
justement pour remplir la grille
en utilisant les fonctionnalités offertes

96
00:05:22,358 --> 00:05:25,810
par cette première version
de la classe <i>JeuMorpion</i>

97
00:05:25,810 --> 00:05:29,116
Voilà, plaçons nous maintenant dans
la situation où un programmeur-concepteur

98
00:05:29,116 --> 00:05:32,209
a offert une classe <i>JeuMorpion</i>
avec les fonctionnalités

99
00:05:32,209 --> 00:05:35,020
que nous venons de décrire et que
maintenant un programmeur-utilisateur

100
00:05:35,020 --> 00:05:39,507
souhaite en faire usage pour programmer
par exemple, la logique du jeu de morpion.

101
00:05:39,507 --> 00:05:43,539
Imaginons que ce programmeur-utilisateur
s'intéresse à la question suivante :

102
00:05:43,842 --> 00:05:49,301
comment placer concrètement,
sur la grille du jeu de morpion,

103
00:05:49,301 --> 00:05:54,169
par exemple un rond
dans la première case de la grille ?

104
00:05:54,169 --> 00:05:56,973
La première chose qu'il va devoir faire
probablement est d'adopter

105
00:05:56,973 --> 00:05:59,862
un certain nombre de conventions
sur la représentation du contenu

106
00:05:59,862 --> 00:06:01,212
de ces différentes cases.

107
00:06:01,212 --> 00:06:05,218
Sachant que le tableau représentant
la grille est un tableau d'entiers,

108
00:06:05,218 --> 00:06:08,662
il peut par exemple décider d'un certain
nombre de conventions comme par exemple

109
00:06:08,662 --> 00:06:12,183
que le "1" représente un rond,
que le "2" représente une croix

110
00:06:12,192 --> 00:06:13,946
et le "0" une case vide.

111
00:06:14,501 --> 00:06:16,109
Ceci pose au passage un certain nombre

112
00:06:16,109 --> 00:06:18,498
de questionnements
sur l'initialisation de la grille.

113
00:06:18,498 --> 00:06:23,164
Si on examine le code, le concepteur
de Jeu Morpion s'est contenter d'allouer

114
00:06:23,164 --> 00:06:26,970
l'espace mémoire pour le tableau
associé à la grille, mais à nul moment

115
00:06:26,970 --> 00:06:30,815
il ne s'est préoccupé d'initialiser
le contenu de chacune de ces cases,

116
00:06:30,815 --> 00:06:32,256
qui ici est indéterminé.

117
00:06:32,256 --> 00:06:36,165
Si par exemple l'utilisateur
de Jeu Morpion décide comme il se doit

118
00:06:36,165 --> 00:06:39,236
de commencer avec une grille
entièrement vide,

119
00:06:39,236 --> 00:06:43,346
c'est à lui de parcourir la grille
et de la remplir avec des 0

120
00:06:43,346 --> 00:06:46,435
pour signifier qu'il y a des cases vides
partout pour commencer.

121
00:06:46,435 --> 00:06:49,981
Ici, le travail d'initialisation
devrait clairement être pris en charge

122
00:06:49,981 --> 00:06:53,643
par celui qui offre la grille
et non pas par celui qui l'utilise.

123
00:06:53,643 --> 00:06:57,230
Pour placer un rond dans
la première case de la grille de jeu,

124
00:06:57,230 --> 00:07:00,995
notre programmeur-utilisateur
n'a d'autre choix que d'aller regarder

125
00:07:00,995 --> 00:07:03,969
comment est concrètement
implémentée la classe <i>JeuMorpion</i>.

126
00:07:03,969 --> 00:07:09,873
Il doit en effet savoir que sa variable
<i>jeu</i> contient désormais un objet

127
00:07:11,643 --> 00:07:18,600
dont l'un des attributs est un pointeur
sur un tableau de 9 cases à 1D

128
00:07:18,600 --> 00:07:25,211
et il doit savoir que placer un rond
revient pour lui selon ses conventions

129
00:07:25,211 --> 00:07:28,623
à mettre un "1" dans cette case.

130
00:07:28,623 --> 00:07:32,639
Il va donc accéder
à la valeur de ce pointeur

131
00:07:34,209 --> 00:07:37,822
par le biais de <i>jeu.get_grille</i>

132
00:07:37,822 --> 00:07:43,882
Ensuite le *<i>jeu.get_grille</i> va lui donner
un accès au contenu pointé par ce pointeur

133
00:07:43,882 --> 00:07:48,454
donc à la grille et au niveau de la case
zéro de cette grille,

134
00:07:48,454 --> 00:07:50,481
il va mettre la valeur "1".

135
00:07:51,896 --> 00:07:53,944
S'il est suffisamment attentif
et précautionneux,

136
00:07:53,944 --> 00:07:56,093
notre programmeur-utilisateur
de la classe <i>JeuMorpion</i>

137
00:07:56,093 --> 00:07:58,396
peut parfaitement aboutir au final
à une version jouable

138
00:07:58,396 --> 00:07:59,854
et fonctionnelle du jeu.

139
00:07:59,854 --> 00:08:02,839
Simplement en chemin,
il a rencontré de nombreux écueils

140
00:08:02,839 --> 00:08:06,083
et problèmes qu'en principe
il n'aurait pas du avoir à affronter.

141
00:08:06,713 --> 00:08:09,290
Un des problèmes fondamentaux
avec cette première version

142
00:08:09,290 --> 00:08:11,644
de la classe <i>JeuMorpion</i>
est que celui qui l'utilise

143
00:08:11,644 --> 00:08:14,048
ne peut absolument pas le faire
proprement sans en connaître

144
00:08:14,048 --> 00:08:16,213
les détails intimes d'implémentation.

145
00:08:16,213 --> 00:08:19,691
Il doit par exemple absolument savoir
que les cases sont stockées sous la forme

146
00:08:19,691 --> 00:08:24,560
d'entiers sous la forme d'un tableau en 1D
et avec des conventions de stockage

147
00:08:24,560 --> 00:08:26,143
ligne par ligne par exemple.

148
00:08:26,143 --> 00:08:30,148
De son côté, il doit également adopter un
certain nombre de conventions arbitraires

149
00:08:30,148 --> 00:08:33,537
comme par exemple que le "0" représente
une case non cochée, le "1" le rond

150
00:08:33,537 --> 00:08:35,074
et le "2" une croix.

151
00:08:35,074 --> 00:08:38,324
Ces conventions ne seront pas forcément
adoptées par d'autres programmeurs

152
00:08:38,324 --> 00:08:41,438
de la classe <i>JeuMorpion</i>
et donc le code résultant

153
00:08:41,438 --> 00:08:42,991
sera difficile à lire pour chacun.

154
00:08:42,991 --> 00:08:47,762
En conclusion, celui qui utilise la classe
<i>JeuMorpion</i> ne peut pas utiliser

155
00:08:47,762 --> 00:08:52,216
proprement cette classe sans connaître
le codage intime des données

156
00:08:52,216 --> 00:08:55,472
dans cette classe et sans prendre
de son côté un certain nombre

157
00:08:55,472 --> 00:08:58,296
de conventions arbitraires.

158
00:08:58,296 --> 00:09:01,323
Par ailleurs, le code auquel va aboutir
notre programmeur-utilisateur

159
00:09:01,323 --> 00:09:04,145
de la classe <i>JeuMorpion</i> va lui-même
être complètement critique.

160
00:09:04,145 --> 00:09:08,318
Quelqu'un qui lirait cette ligne de code
serait dans l'incapacité de la comprendre.

161
00:09:08,318 --> 00:09:10,728
Que veut dire ce "0" ?
Que veut dire ce "1" ?

162
00:09:10,728 --> 00:09:13,298
On ne peut comprendre
cette ligne de code sans aller regarder

163
00:09:13,298 --> 00:09:16,175
l'intérieur de la classe <i>JeuMorpion</i>.

164
00:09:16,175 --> 00:09:19,012
Ce code produit par
le programmeur-utilisateur

165
00:09:19,012 --> 00:09:21,567
n'est malheureusement pas robuste
à d'éventuels changements

166
00:09:21,567 --> 00:09:23,559
faits par le programmeur
de la classe <i>JeuMorpion</i>

167
00:09:23,559 --> 00:09:25,671
dans ses choix d'implémentations.

168
00:09:25,671 --> 00:09:28,742
Supposons par exemple qu'il décide
d'abandonner son implémentation

169
00:09:28,742 --> 00:09:33,237
de la grille sous la forme d'un tableau
à 1D et qu'il passe à un tableau à 2D.

170
00:09:33,237 --> 00:09:37,553
Eh bien il faudrait réécrire cette ligne
de code qui n'est plus adaptée.

171
00:09:37,553 --> 00:09:42,312
Donc celui qui utilise la classe
<i>JeuMorpion</i> est impacté

172
00:09:42,312 --> 00:09:45,192
par des modifications faites
à l'intérieur de la classe.

173
00:09:45,192 --> 00:09:47,968
Il devrait par exemple réécrire
cette ligne de code comme ceci,

174
00:09:51,468 --> 00:09:54,786
si on passe à un tableau à 2D.

175
00:10:01,286 --> 00:10:03,834
Supposons qu'il ait écrit
de très nombreuses lignes de code

176
00:10:03,834 --> 00:10:07,339
se basant sur ces choix d'implémentations,
eh bien l'intégralité de son code

177
00:10:07,339 --> 00:10:09,517
est à revoir et éventuellement à réécrire.

178
00:10:09,517 --> 00:10:11,701
Enfin, dernier point
important et dangereux :

179
00:10:11,701 --> 00:10:15,308
par le biais de cette fonctionnalité,
le programmeur-utilisateur

180
00:10:15,308 --> 00:10:20,154
a accès à la valeur d'un pointeur qui
lui donne un accès direct

181
00:10:20,154 --> 00:10:22,260
à la grille de jeu telle qu'implémentée.

182
00:10:22,260 --> 00:10:24,580
Ceci permettra, nous allons voir
un petit peu plus tard,

183
00:10:24,580 --> 00:10:26,703
de nombreuses manipulations
sur cette grille

184
00:10:26,703 --> 00:10:29,148
qui ne sont pas souhaitables.

185
00:10:29,148 --> 00:10:31,083
Donc en fait, même si
le programmeur-concepteur

186
00:10:31,083 --> 00:10:35,075
de <i>JeuMorpion</i> a effectivement bien pris
la précaution de déclarer comme privé

187
00:10:37,135 --> 00:10:39,013
son attribut de type <i>grille</i> ;

188
00:10:44,441 --> 00:10:48,372
ce qui interdit ce genre de manipulation
directe de la grille

189
00:10:48,372 --> 00:10:54,727
via l'accès à l'attribut,
il offre néanmoins la valeur

190
00:10:54,727 --> 00:10:59,676
de ce pointeur au monde extérieur
via <i>get_grille</i> ce qui permet de faire

191
00:10:59,676 --> 00:11:02,098
exactement la même manipulation qu'ici

192
00:11:02,098 --> 00:11:04,245
mais d'une façon
un petit peu plus indirecte.

193
00:11:04,245 --> 00:11:08,634
Ceci casse donc complètement l'intérêt
de définir l'attribut en privé.

194
00:11:08,634 --> 00:11:10,918
Le fait de l'avoir défini en privé ici

195
00:11:10,918 --> 00:11:13,934
devient tout simplement
complètement inutile.

196
00:11:14,284 --> 00:11:18,413
De façon générale lorsque dans une classe,
un attribut est un pointeur vers un objet,

197
00:11:18,413 --> 00:11:23,318
comme par exemple le tableau chez nous,
offrir un accès à l'extérieur,

198
00:11:23,318 --> 00:11:26,800
à la valeur de ce pointeur est mauvais
pour l'encapsulation

199
00:11:26,800 --> 00:11:30,674
car il permet d'accéder
aux détails d'implémentations.

200
00:11:31,268 --> 00:11:35,769
Il résulte de l'accès à l'implémentation
de la grille de jeu via le pointeur

201
00:11:35,769 --> 00:11:37,752
toutes sortes de conséquences fâcheuses.

202
00:11:37,752 --> 00:11:40,867
Par exemple, rien n'empêche
ce genre de manipulations :

203
00:11:40,867 --> 00:11:45,011
l'accès à une case de la grille
via un indice qui est invalide.

204
00:11:45,011 --> 00:11:48,647
Celui qui utilise <i>get_grille</i> ici peut
s'être trompé dans le calcul de l'indice,

205
00:11:48,647 --> 00:11:51,501
donc l'erreur peut ne pas être
aussi explicite qu'elle l'est ici,

206
00:11:51,501 --> 00:11:55,054
mais rien n'empêche de faire
un accès de cette nature.

207
00:11:55,062 --> 00:11:58,282
A ce moment-là, le programme aura
évidemment un comportement erroné

208
00:11:58,282 --> 00:12:01,221
qui peut, dans certaines situations,
se traduire par des erreurs

209
00:12:01,221 --> 00:12:05,250
telles que des <i>segmentation fault</i>
et des arrêts abrupts du programme.

210
00:12:05,250 --> 00:12:08,056
Rien n'empêche non plus de mettre
dans la grille de jeu,

211
00:12:08,056 --> 00:12:10,406
des valeurs autres que celles
qui sont initialement prévues,

212
00:12:10,406 --> 00:12:13,531
à savoir des ronds ou des croix
ce qui correspond à "1" ou "2".

213
00:12:13,531 --> 00:12:17,373
On pourrait par exemple imaginer
que par inadvertance ou par malice,

214
00:12:17,373 --> 00:12:20,288
celui qui utilise la grille de jeu
y injecte des valeurs

215
00:12:20,288 --> 00:12:21,995
qui ne soient pas celles attendues.

216
00:12:21,995 --> 00:12:24,640
Des valeurs fantaisistes
comme 42, 11 ou 3.

217
00:12:24,640 --> 00:12:27,998
A ce moment-là, on se trouverait
dans une situation où la logique du jeu

218
00:12:27,998 --> 00:12:29,516
ne serait plus respectée.

219
00:12:29,516 --> 00:12:32,467
Imaginez par exemple que celui
qui a programmé la logique du jeu,

220
00:12:32,467 --> 00:12:35,785
ait programmé une méthode
<i>get＿joueur＿gagnant</i>

221
00:12:35,785 --> 00:12:38,769
dont le rôle est de parcourir la grille
de jeu pour vérifier

222
00:12:38,769 --> 00:12:41,017
s'il y a des alignements
de ronds ou de croix.

223
00:12:41,017 --> 00:12:44,742
A ce moment-là, cette méthode
s'attend évidemment à trouver des valeurs

224
00:12:44,742 --> 00:12:47,896
telles que 1 et 2 et aurait
un comportement erroné

225
00:12:47,896 --> 00:12:50,556
si elle se trouvait en face
d'une valeur telle que 42.

226
00:12:50,556 --> 00:12:55,155
Enfin, imaginez le cas où l'utilisateur
de la grille aurait envie de tricher,

227
00:12:55,155 --> 00:12:58,735
c'est-à-dire de remplacer
un rond par une croix

228
00:12:58,735 --> 00:13:01,816
qui serait déjà placée sur la grille
de jeu, rien ne l'en empêche.

229
00:13:01,816 --> 00:13:05,522
Donc ici on peut tout à fait,
après avoir déjà mis un "1" ici,

230
00:13:05,522 --> 00:13:09,852
remplacer ce "1" par un "2"
en utilisant ce genre de manipulations.

231
00:13:09,852 --> 00:13:13,072
Donc aucun contrôle n'est fait à ce niveau
pour vérifier qu'il n'y a pas déjà

232
00:13:13,072 --> 00:13:17,068
un pion placé sur la grille de jeu
et que l'écrasement n'est pas possible.

233
00:13:18,778 --> 00:13:22,718
Tous les problèmes que l'on a évoqués ici
résultent du fait que les fonctionnalités

234
00:13:22,718 --> 00:13:25,670
que l'on a choisi d'offrir publiquement
sont de trop bas niveau,

235
00:13:25,670 --> 00:13:29,519
révèlent trop les détails d'implémentation
et nécessitent de les connaître.

236
00:13:29,519 --> 00:13:33,432
Elles offrent par conséquent
un accès incontrôlé aux données

237
00:13:33,634 --> 00:13:37,607
et permettent d'utiliser ces données
sans aucune validation,

238
00:13:37,607 --> 00:13:41,398
ce qui bien évidemment correspond
à une mauvaise conception.

239
00:13:41,398 --> 00:13:43,786
Pour programmer une classe <i>JeuMorpion</i>
proprement encapsulée,

240
00:13:43,786 --> 00:13:45,849
il est impératif que les choix
d'implémentations

241
00:13:45,849 --> 00:13:50,065
ne soient pas accessibles, visibles
au travers de l'interface d'utilisation

242
00:13:50,065 --> 00:13:52,118
qui est offerte au programmeur externe.

243
00:13:52,118 --> 00:13:54,500
Par ailleurs, les choix
d'implémentations internes,

244
00:13:54,500 --> 00:13:56,802
comme par exemple
comment représenter la grille,

245
00:13:56,802 --> 00:13:59,488
comment modéliser les jetons
qui se posent sur la grille ;

246
00:13:59,488 --> 00:14:02,860
doit être du ressort de celui
qui implémente la classe <i>JeuMorpion</i>

247
00:14:02,860 --> 00:14:04,535
et non pas de celui qui l'utilise.

248
00:14:04,535 --> 00:14:06,718
Nous allons étudier dans ce qui suit,

249
00:14:06,718 --> 00:14:09,243
une variante qui améliore
la version précédente.

250
00:14:10,710 --> 00:14:12,861
Dans cette seconde version
de la classe <i>JeuMorpion</i>,

251
00:14:12,861 --> 00:14:15,577
le programmeur-concepteur
décide comme il se doit,

252
00:14:15,577 --> 00:14:18,368
de prendre en charge la modélisation
de tous les éléments

253
00:14:18,368 --> 00:14:21,040
permettant de modéliser un jeu de morpion.

254
00:14:21,040 --> 00:14:22,885
C'est à dire non seulement
la grille de jeu,

255
00:14:22,885 --> 00:14:25,955
mais également les pions
que l'on va y placer.

256
00:14:25,955 --> 00:14:30,009
Et il choisit pour cela d'introduire
un type énuméré qui va permettre

257
00:14:30,009 --> 00:14:34,104
de manipuler ces jetons via des noms
qui sont explicites et parlants.

258
00:14:35,264 --> 00:14:39,378
Pour la modélisation de la grille de jeu
elle-même, le programmeur fait des choix

259
00:14:39,378 --> 00:14:42,034
qui sont plus naturels
que ceux que l'on a vu précédemment.

260
00:14:42,034 --> 00:14:45,051
Il va utiliser un tableau
à 3 lignes et 3 colonnes,

261
00:14:45,051 --> 00:14:49,495
ce qui est beaucoup plus proche
de la représentation que l'on a

262
00:14:49,495 --> 00:14:52,692
d'un plateau du jeu de morpion.

263
00:14:53,252 --> 00:14:54,879
Dans la classe <i>JeuMorpion</i>,

264
00:14:54,879 --> 00:14:58,239
il n'y a pas de nécessité d'accéder
à la grille de jeu via un pointeur.

265
00:14:58,239 --> 00:15:01,491
L'attribut est donc naturellement défini

266
00:15:01,491 --> 00:15:04,434
comme étant de type <i>grille</i>
tel que défini ici.

267
00:15:05,787 --> 00:15:09,401
De plus, l'initialisation de la grille
qui n'était que partielle et mal faite

268
00:15:09,401 --> 00:15:11,773
dans la version précédente,
est beaucoup plus correcte ici.

269
00:15:11,773 --> 00:15:16,117
Le concepteur de la classe <i>JeuMorpion</i>
prend en charge l'initialisation

270
00:15:16,117 --> 00:15:19,040
de tous les éléments de la grille,
c'est-à-dire également de son contenu.

271
00:15:19,040 --> 00:15:22,440
Et donc pour ce faire, il va balayer
chacune des lignes de la grille

272
00:15:22,440 --> 00:15:25,628
et pour chaque case de cette ligne,
en remplir le contenu

273
00:15:25,628 --> 00:15:30,337
en y mettant la valeur "vide"
de façon totalement explicite.

274
00:15:30,654 --> 00:15:34,391
L'idée est donc maintenant d'offrir
à l'utilisateur de la classe <i>JeuMorpion</i>,

275
00:15:34,391 --> 00:15:36,902
un certain nombre
de méthodes bien choisies

276
00:15:36,902 --> 00:15:38,574
qui vont lui permettre de manipuler

277
00:15:38,574 --> 00:15:41,900
la grille de jeu sans en connaître
les détails d'implémentation.

278
00:15:41,900 --> 00:15:45,722
On peut donc par exemple imaginer
d'offrir une méthode <i>placer_rond</i>

279
00:15:45,722 --> 00:15:49,039
dont le rôle sera de placer un rond
sur la grille de jeu

280
00:15:49,039 --> 00:15:52,254
à une ligne et une colonne
fournies par l'utilisateur.

281
00:15:52,901 --> 00:15:57,375
De même, on aurait le tenant <i>placer_croix</i>
qui placerait une croix

282
00:15:57,375 --> 00:15:58,894
sur une ligne et une colonne données.

283
00:15:58,894 --> 00:16:01,648
Ces méthodes retourneraient par exemple
un booléen indiquant

284
00:16:01,648 --> 00:16:04,327
si le placement du rond
ou de la croix a pu se faire

285
00:16:04,327 --> 00:16:07,043
à la ligne et à la colonne souhaitées.

286
00:16:07,043 --> 00:16:09,412
On peut bien sûr imaginer
la présence d'autres méthodes,

287
00:16:09,412 --> 00:16:12,442
comme par exemple une méthode
<i>get＿joueur＿gagnant</i>

288
00:16:12,442 --> 00:16:15,555
qui analyserait le contenu de la grille
pour savoir s'il y a un alignement

289
00:16:15,555 --> 00:16:16,817
de ronds ou de croix.

290
00:16:18,397 --> 00:16:21,522
Le fait de placer un jeton à une ligne
et une colonne données

291
00:16:21,522 --> 00:16:24,304
se fait en fait exactement selon
les même modalités,

292
00:16:24,304 --> 00:16:27,210
peu importe que l'on place
un rond ou une croix.

293
00:16:27,210 --> 00:16:30,655
Il est donc naturel ici de penser
à modulariser les traitements

294
00:16:30,655 --> 00:16:34,448
et de créer une méthode <i>placer_coup</i>
qui va se charger de placer

295
00:16:34,448 --> 00:16:37,603
les différentes pièces
sur la grille de jeu.

296
00:16:37,603 --> 00:16:39,310
Les deux méthodes <i>placer_rond</i>

297
00:16:39,310 --> 00:16:42,816
et <i>placer_croix</i> suffisent complètement
à l'utilisateur de la classe <i>JeuMorpion</i>

298
00:16:42,816 --> 00:16:45,746
pour pouvoir placer un jeton
sur la grille de jeu.

299
00:16:45,746 --> 00:16:50,463
Il n'est par conséquent pas nécessaire
d'offrir également l'accès à <i>placer_coup</i>

300
00:16:50,463 --> 00:16:54,467
qui ici peut être considéré comme une
méthode utilitaire aidant <i>placer_croix</i>

301
00:16:54,467 --> 00:16:58,264
et <i>placer_rond</i> à faire leur travail
mais qui ne fera pas partie

302
00:16:58,264 --> 00:17:01,055
de l'interface d'utilisation de la classe.

303
00:17:01,055 --> 00:17:02,361
Les deux méthodes <i>placer_rond</i>

304
00:17:02,361 --> 00:17:05,742
et <i>placer_croix</i> suffisent complètement
à l'utilisateur de la classe <i>JeuMorpion</i>

305
00:17:05,742 --> 00:17:08,493
pour pouvoir placer un jeton
sur la grille de jeu.

306
00:17:08,493 --> 00:17:13,506
Il n'est par conséquent pas nécessaire
d'offrir également l'accès à <i>placer_coup</i>

307
00:17:13,506 --> 00:17:17,766
qui ici peut être considéré comme une
méthode utilitaire aidant <i>placer_croix</i>

308
00:17:17,766 --> 00:17:20,617
et <i>placer_rond</i> à faire leur travail
mais qui ne fera pas partie

309
00:17:20,617 --> 00:17:23,777
de l'interface d'utilisation de la classe.

310
00:17:23,777 --> 00:17:27,202
Par conséquent, on va décider
de déclarer cette méthode

311
00:17:27,202 --> 00:17:28,871
<i>placer_coup</i> comme privée.

312
00:17:28,871 --> 00:17:31,989
La méthode <i>placer_coup</i>
est donc en charge de placer un coup

313
00:17:31,989 --> 00:17:35,731
qui peut être un rond ou une croix
à une ligne et une colonne données.

314
00:17:35,731 --> 00:17:39,155
Comme ces informations <i>ligne</i> et
<i>colonne</i> sont fournies par

315
00:17:39,155 --> 00:17:42,229
celui qui utilise la classe au travers
de <i>placer_rond</i>

316
00:17:42,229 --> 00:17:43,873
et <i>placer_croix</i>,

317
00:17:43,873 --> 00:17:46,579
il faut faire un travail de validation
pour vérifier que les lignes

318
00:17:46,579 --> 00:17:49,325
et les colonnes souhaitées
pour l'introduction du coup

319
00:17:49,325 --> 00:17:53,170
correspondent bien à des lignes
et des colonnes valides.

320
00:17:53,476 --> 00:17:56,196
La méthode <i>placer_coup</i> commence donc
par faire cette vérification.

321
00:17:56,196 --> 00:17:59,223
Si cette vérification échoue,
on doit traiter l'erreur

322
00:17:59,223 --> 00:18:01,602
et donc indiquer par un <i>return_false</i>

323
00:18:01,602 --> 00:18:05,040
que le placement n'a pas pu
se faire correctement.

324
00:18:05,040 --> 00:18:08,953
La méthode <i>placer_coup</i> doit également
vérifier que l'on ne place pas un jeton

325
00:18:08,953 --> 00:18:12,508
sur une case qui est déjà occupée,
ce qui est contraire à la logique du jeu.

326
00:18:12,508 --> 00:18:16,365
Et donc on va faire cette vérification
explicitement en testant

327
00:18:16,365 --> 00:18:21,254
si la position souhaitée ne correspond pas
à une case qui est vide.

328
00:18:21,254 --> 00:18:23,738
Alors dans ce cas-là,
la case est déjà prise,

329
00:18:23,738 --> 00:18:25,853
on signale une erreur
et on retourne <i>fault</i>.

330
00:18:25,853 --> 00:18:30,891
Dans l'autre cas, on va placer notre coup
à la position souhaitée

331
00:18:30,891 --> 00:18:33,866
et on va retourner <i>true</i>
pour indiquer que <i>placer_coup</i>

332
00:18:33,866 --> 00:18:35,804
s'est correctement passé.

333
00:18:35,804 --> 00:18:39,871
Vous noterez qu'il n'a pas été nécessaire
ici de vérifier la validité du coup,

334
00:18:39,871 --> 00:18:42,133
de savoir si on a placé
un rond ou une croix

335
00:18:42,133 --> 00:18:45,674
parce que cette méthode <i>placer_coup</i>
est une méthode privée

336
00:18:45,674 --> 00:18:48,755
qui n'est invoquée que par
les méthodes <i>placer_rond</i>

337
00:18:48,755 --> 00:18:51,998
et <i>placer_croix</i> qui explicitement
mettent déjà

338
00:18:51,998 --> 00:18:54,924
les bonnes valeurs pour le coup à placer.

339
00:18:54,924 --> 00:18:57,714
Voyons maintenant comment
toutes ces modifications

340
00:18:57,714 --> 00:19:00,742
de la classe <i>JeuMorpion</i>
se répercutent sur celui qui l'utilise.

341
00:19:00,742 --> 00:19:04,192
Donc quelqu'un qui utiliserait
la classe commencerait vraisemblablement

342
00:19:04,192 --> 00:19:08,034
par déclarer une variable
de type <i>JeuMorpion</i>.

343
00:19:08,034 --> 00:19:11,808
Ensuite, il utiliserait la méthode
publique offerte pour l'initialisation

344
00:19:11,808 --> 00:19:14,991
afin de partir avec une
grille de jeu vide.

345
00:19:14,991 --> 00:19:19,167
Et ensuite il commencerait à s'intéresser
à placer différents jetons,

346
00:19:19,167 --> 00:19:21,445
différentes pièces, sur la grille de jeu.

347
00:19:21,445 --> 00:19:24,193
Si l'utilisateur souhaite
par exemple placer un rond

348
00:19:24,193 --> 00:19:26,731
à la ligne 1 et à la colonne 1
de la grille de jeu,

349
00:19:26,731 --> 00:19:30,324
il va pouvoir utiliser
une tournure de cette nature

350
00:19:30,324 --> 00:19:32,538
qui est beaucoup plus claire
et beaucoup plus explicite

351
00:19:32,538 --> 00:19:34,969
que celle que nous
utilisions précédemment.

352
00:19:34,969 --> 00:19:40,159
Il indique simplement qu'il place un rond
sur le jeu à la ligne 1 et à la colonne 1.

353
00:19:40,159 --> 00:19:44,074
Surtout, cette tournure ne nécessite
de sa part aucune connaissance

354
00:19:44,074 --> 00:19:47,775
sur les détails d'implémentation
de la classe <i>JeuMorpion</i>.

355
00:19:48,955 --> 00:19:52,235
L'utilisateur peut aussi bénéficier
du travail de validation des données

356
00:19:52,235 --> 00:19:54,325
qui est faite par des méthodes
telles que <i>placer_rond</i>

357
00:19:54,325 --> 00:19:55,446
ou <i>placer_croix</i>.

358
00:19:55,446 --> 00:19:59,202
Donc il peut s'informer par le bais
du booléen qui est livré par ces méthodes

359
00:19:59,202 --> 00:20:03,536
et savoir si le placement de son coup
s'est passé favorablement ou pas.

360
00:20:03,536 --> 00:20:06,283
Le placement d'une croix
sur la grille de jeu

361
00:20:06,283 --> 00:20:08,627
va se faire évidemment
selon les même modalités.

362
00:20:08,627 --> 00:20:11,444
La nouvelle version
de la classe <i>JeuMorpion</i>

363
00:20:11,444 --> 00:20:15,018
nous permet une utilisation beaucoup
plus robuste et beaucoup plus explicite.

364
00:20:15,018 --> 00:20:18,489
Elle ne nous affranchit cependant
pas complètement de devoir expliciter

365
00:20:18,489 --> 00:20:22,705
un certain nombre de conventions
d'usages des méthodes de l'interface.

366
00:20:22,705 --> 00:20:27,382
Par exemple, il faut informer
l'utilisateur du fait que l'on s'attend

367
00:20:27,382 --> 00:20:32,120
à une numérotation des lignes
et des colonnes selon une convention

368
00:20:32,120 --> 00:20:36,914
qui numérote la première ligne
à 0 et non pas à 1.

369
00:20:36,914 --> 00:20:40,097
C'est ce genre de convention
qu'il faut absolument documenter

370
00:20:40,097 --> 00:20:43,894
lorsqu'on fournit l'interface
d'utilisation.

371
00:20:43,894 --> 00:20:46,945
La deuxième version de la classe
<i>JeuMorpion</i> offre de nombreux avantages

372
00:20:46,945 --> 00:20:48,332
par rapport à la première.

373
00:20:48,332 --> 00:20:50,872
Le premier avantage
est la validation des données.

374
00:20:50,872 --> 00:20:54,092
Il devient désormais impossible
à l'utilisateur de la classe <i>JeuMorpion</i>

375
00:20:54,092 --> 00:20:56,981
de placer une valeur invalide
dans le tableau,

376
00:20:56,981 --> 00:20:58,743
autre que les valeurs que l'on attend.

377
00:20:58,743 --> 00:21:01,948
En fait, il ne sait même pas comment
ces valeurs sont codifiées en interne.

378
00:21:01,948 --> 00:21:04,790
Il ne sait pas qu'on a par exemple
utilisé un type énuméré

379
00:21:04,790 --> 00:21:06,823
pour représenter chacune de ces valeurs.

380
00:21:06,823 --> 00:21:10,193
Il n'a aucune idée de comment tout ceci
est implémenté en interne.

381
00:21:10,953 --> 00:21:13,488
Toujours dans le cadre
de la validation des données,

382
00:21:13,488 --> 00:21:15,938
il est impossible désormais
à l'utilisateur

383
00:21:15,938 --> 00:21:18,101
de cocher une case déjà cochée.

384
00:21:18,101 --> 00:21:20,248
Ce n'était pas le cas
dans la version précédente.

385
00:21:20,248 --> 00:21:22,716
Ici, les méthodes
de l'interface sont en charge

386
00:21:22,716 --> 00:21:25,196
de faire ce genre de travail
de vérification

387
00:21:25,196 --> 00:21:29,240
et interdiront ce genre
de manipulations non souhaitées.

388
00:21:29,240 --> 00:21:30,850
Autre point très important :

389
00:21:30,850 --> 00:21:32,876
cette mise en oeuvre
de la classe <i>JeuMorpion</i>

390
00:21:32,876 --> 00:21:35,442
permet ce que l'on appelle
« la séparation des soucis ».

391
00:21:35,442 --> 00:21:39,486
Chaque programmeur est responsable
de la partie qui le concerne

392
00:21:39,486 --> 00:21:42,469
et n'a pas à se préoccuper
des soucis relatifs

393
00:21:42,469 --> 00:21:44,734
à l'implémentation d'autres classes.

394
00:21:44,734 --> 00:21:47,331
Par exemple, celui qui utilise
la classe <i>JeuMorpion</i>,

395
00:21:47,331 --> 00:21:51,043
n'a nul besoin de savoir comment
le plateau de jeu est stocké,

396
00:21:51,043 --> 00:21:53,381
ni qu'il utilise des entiers,

397
00:21:53,381 --> 00:21:55,460
ni quelles valeurs correspondent
à quoi que ce soit.

398
00:21:55,460 --> 00:21:59,252
Celui qui est en charge d'implémenter
<i>JeuMorpion</i> se charge de ces détails.

399
00:21:59,252 --> 00:22:04,086
Celui qui utilise n'est en charge
que de la logique du jeu.

400
00:22:04,086 --> 00:22:05,091
Autre point important :

401
00:22:05,091 --> 00:22:08,601
la lisibilité du code qui résulte
de cette nouvelle implémentation.

402
00:22:08,601 --> 00:22:12,513
Le code produit par l'utilisateur
de <i>JeuMorpion</i> est désormais compréhensif

403
00:22:12,513 --> 00:22:15,345
même pour quelqu'un qui n'a pas
de connaissances approfondies.

404
00:22:15,345 --> 00:22:22,183
Donc ici, le fait d'écrire quelque chose
comme <i>jeu.placer_rond(...)</i>

405
00:22:25,442 --> 00:22:26,845
est tout à fait compréhensible.

406
00:22:26,845 --> 00:22:28,778
Il n'y a pas besoin
de beaucoup d'explications

407
00:22:28,778 --> 00:22:31,240
pour savoir ce que ce traitement réalise.

408
00:22:31,240 --> 00:22:34,530
Ça n'était pas le cas
dans l'implémentation précédente

409
00:22:34,530 --> 00:22:39,327
où je devais passer par une tournure
totalement cryptique

410
00:22:42,679 --> 00:22:44,619
pour réaliser un traitement analogue.

411
00:22:46,418 --> 00:22:49,052
Enfin, conséquence
de la validation des données,

412
00:22:49,052 --> 00:22:53,644
il devient possible d'informer
l'utilisateur en cas de situation anormale

413
00:22:53,644 --> 00:22:55,668
en utilisant un message compréhensible.

414
00:22:55,668 --> 00:22:59,443
Si maintenant on essaie de placer un jeton
dans une position invalide de la grille,

415
00:22:59,443 --> 00:23:02,475
c'est le traitement d'erreur
réalisé par <i>placer_coup</i>

416
00:23:02,475 --> 00:23:05,318
qui va informer l'utilisateur que quelque
chose d'anormal est en cours

417
00:23:05,318 --> 00:23:07,367
et qu'il ne peut pas placer le coup.

418
00:23:07,367 --> 00:23:08,881
Dans la version précédente,

419
00:23:08,881 --> 00:23:12,029
le programme s'arrêtait avec une erreur
de type <i>segmentation fault</i>.

420
00:23:12,669 --> 00:23:15,998
Nous voici donc arrivés au terme de cette
petite étude de cas sur le jeu du morpion.

421
00:23:15,998 --> 00:23:20,802
Nous voyons donc que pour bien encapsuler,
il est nécessaire de bien cacher

422
00:23:20,802 --> 00:23:21,973
les détails d'implémentation,

423
00:23:21,973 --> 00:23:27,134
de n'offrir que les fonctionnalités qui
sont réellement utiles au monde extérieur

424
00:23:27,134 --> 00:23:29,205
et qui n'offrent pas de prise
au monde extérieur

425
00:23:29,205 --> 00:23:32,629
pour pouvoir altérer et toucher
aux détails d'implémentation.
