1
00:00:04,372 --> 00:00:05,771
Nous abordons aujourd'hui ensemble

2
00:00:06,078 --> 00:00:08,476
un volet très important de 
votre apprentissage de la programmation.

3
00:00:08,843 --> 00:00:10,644
La programmation dite orientée objet.

4
00:00:10,945 --> 00:00:13,147
Il s'agit d'une façon particulière 
de programmer

5
00:00:13,414 --> 00:00:15,728
qui n'est d'ailleurs pas spécifique 
au langage C++

6
00:00:15,916 --> 00:00:18,385
et qui va donner à vos programmes,

7
00:00:18,571 --> 00:00:20,317
un certain nombre 
de propriétés intéressantes

8
00:00:20,317 --> 00:00:21,684
en terme de maintenabilité 
et de modularité.

9
00:00:22,523 --> 00:00:24,758
A ce stade du cours, 
vous êtes censés connaître

10
00:00:24,925 --> 00:00:26,527
un certain nombre 
d'éléments fondamentaux

11
00:00:26,660 --> 00:00:28,229
relatif à la programmation tout court.

12
00:00:28,495 --> 00:00:30,264
Vous savez par exemple, 
exprimer des traitements

13
00:00:30,565 --> 00:00:32,333
en utilisant des structures de contrôles,

14
00:00:32,566 --> 00:00:33,901
comme par exemple, 
des boucles conditionnelles.

15
00:00:34,168 --> 00:00:36,916
Vous savez aussi structurer 
un minimum vos données

16
00:00:36,916 --> 00:00:38,653
en utilisant par exemple des tableaux,

17
00:00:38,653 --> 00:00:41,175
et vous savez surtout modulariser 
vos programmes

18
00:00:41,235 --> 00:00:44,007
en utilisant la notion centrale 
de fonction.

19
00:00:44,211 --> 00:00:45,947
Cet outillage de base 
va vous permettre d'exercer

20
00:00:46,114 --> 00:00:47,648
un style de programmation particulier

21
00:00:47,782 --> 00:00:50,286
dit programmation 
procédurale ou impérative.

22
00:00:50,419 --> 00:00:52,583
Il a la particularité de faire en sorte

23
00:00:52,720 --> 00:00:54,922
que les données et les traitements 
apparaissent de façon séparée

24
00:00:54,959 --> 00:00:56,190
dans un programme.

25
00:00:56,190 --> 00:00:57,791
Certes, il y a une interaction 
entre les deux,

26
00:00:58,025 --> 00:00:59,928
les traitements opèrent 
typiquement sur les données,

27
00:01:00,194 --> 00:01:02,130
lesquelles influencent 
à leur tour les traitements,

28
00:01:02,397 --> 00:01:05,166
Mais les deux entités apparaissent 
de façon séparée.

29
00:01:05,600 --> 00:01:07,935
Par exemple, comme nous allons 
le voir dans quelques minutes

30
00:01:07,975 --> 00:01:09,180
sur un exemple concret,

31
00:01:09,180 --> 00:01:11,972
les traitements peuvent s'exprimer 
par le biais des fonctions.

32
00:01:13,173 --> 00:01:15,690
Et le lien entre données et traitement 
peut se faire alors

33
00:01:15,909 --> 00:01:18,104
par le biais du passage des arguments.

34
00:01:19,581 --> 00:01:23,401
Les données manipulées apparaissent 
au travers d'entités distinctes,

35
00:01:23,584 --> 00:01:25,626
comme par exemple, des variables.

36
00:01:26,354 --> 00:01:28,923
Une des particularités fondamentales 
de l'orienté objet

37
00:01:29,156 --> 00:01:33,336
est de permettre le regroupement 
des traitements et des données

38
00:01:33,856 --> 00:01:36,043
en une seule et même entité.

39
00:01:36,731 --> 00:01:38,245
Partons d'un exemple concret.

40
00:01:38,398 --> 00:01:39,923
Imaginons que je souhaite écrire

41
00:01:40,098 --> 00:01:42,694
un petit programme C++ qui calcule 
la surface d'un rectangle.

42
00:01:43,070 --> 00:01:45,615
Le rectangle est représenté au moyen 
d'une largeur et d'une hauteur.

43
00:01:45,973 --> 00:01:48,375
Et je souhaite, donc, 
en calculer la surface.

44
00:01:48,976 --> 00:01:52,212
En programmation procédurale, j'aurais
tendance à procéder de cette façon.

45
00:01:52,408 --> 00:01:55,007
Je vais commencer par déclarer 
une variable <i>largeur</i>

46
00:01:55,249 --> 00:01:57,361
pour représenter la largeur du rectangle,

47
00:01:57,785 --> 00:01:59,286
que j'initialiserai 
avec une valeur appropriée.

48
00:01:59,620 --> 00:02:01,922
Et je vais faire de même pour la hauteur.

49
00:02:02,591 --> 00:02:05,359
Ensuite, le calcul de surface 
peut se faire en passant

50
00:02:05,859 --> 00:02:09,732
la largeur et la hauteur 
ainsi définies à une fonction <i>surface</i>

51
00:02:12,066 --> 00:02:14,355
qui se charge de réaliser 
le calcul approprié.

52
00:02:15,300 --> 00:02:18,219
Alors, on voit bien au travers de 
cet exemple, que dans un tel programme,

53
00:02:18,259 --> 00:02:21,199
les données et les traitements 
apparaissent de façon séparée.

54
00:02:21,676 --> 00:02:24,879
Les variables me permettent 
de modéliser et de stocker

55
00:02:25,113 --> 00:02:26,647
les données dont j'ai besoin.

56
00:02:26,848 --> 00:02:29,717
Et les traitements sont réalisés 
par le biais de fonctions.

57
00:02:30,017 --> 00:02:32,920
Il n'existe pas de lien direct entre 
les données et le traitement,

58
00:02:33,420 --> 00:02:38,830
le lien s'établit ici, uniquement, 
par le biais, du passage des arguments.

59
00:02:39,743 --> 00:02:41,976
Alors une des critiques fondamentales, 
que l'on peut émettre

60
00:02:42,130 --> 00:02:43,397
sur ce genre de programme,

61
00:02:43,630 --> 00:02:46,561
est l'absence de lien sémantique 
entre les différentes entités.

62
00:02:46,834 --> 00:02:50,643
Par exemple, le lien sémantique 
qui unit la largeur et la hauteur,

63
00:02:51,005 --> 00:02:53,742
il s'agit de la largeur et de la hauteur
d'un rectangle,

64
00:02:53,742 --> 00:02:55,410
est difficile à établir.

65
00:02:55,643 --> 00:02:57,744
Imaginons, par exemple, 
que je ne sois pas francophone.

66
00:02:58,079 --> 00:03:01,612
Donc pour moi, largeur et hauteur 
sont des noms peu parlant.

67
00:03:02,116 --> 00:03:04,951
Il est difficile pour moi de voir 
qu'il s'agit de deux entités

68
00:03:05,152 --> 00:03:07,493
liées à un même concept : 
celui du rectangle.

69
00:03:08,276 --> 00:03:10,865
Le lien sémantique qui unit ici, 
les données entre elles,

70
00:03:10,865 --> 00:03:12,025
n'est pas explicite.

71
00:03:12,237 --> 00:03:14,798
Mais il en va de même pour le lien 
qui unit les données et le traitement

72
00:03:14,829 --> 00:03:16,230
qui agissent sur ces données.

73
00:03:16,431 --> 00:03:18,240
Imaginons que je sois un petit peu 
moins précautionneuse

74
00:03:18,332 --> 00:03:20,039
dans le choix de mes identificateurs.

75
00:03:20,267 --> 00:03:22,819
Et que j'appelle cette fonction 
<i>produit</i> par exemple.

76
00:03:24,305 --> 00:03:26,616
On peut même imaginer 
que j'appelle mes arguments,

77
00:03:27,141 --> 00:03:29,171
que je leur donne 
des noms moins parlant.

78
00:03:29,277 --> 00:03:32,231
Du coup, il devient très difficile 
pour quelqu'un qui lit le code

79
00:03:32,347 --> 00:03:35,154
de voir que l'on est effectivement, 
ici en train de faire

80
00:03:35,194 --> 00:03:37,644
un calcul de surface sur un rectangle.

81
00:03:37,672 --> 00:03:39,687
Or, ce lien existe conceptuellement.

82
00:03:39,920 --> 00:03:42,772
Ici, c'est bel et bien, 
la largeur et la hauteur d'un rectangle,

83
00:03:44,291 --> 00:03:46,029
que je suis en train de manipuler

84
00:03:46,393 --> 00:03:48,229
Et ici, c'est bel et bien 
la surface d'un rectangle,

85
00:03:52,567 --> 00:03:54,068
que je souhaite calculer.

86
00:03:54,502 --> 00:03:57,629
Donc le fait, de pouvoir regrouper 
en une seule et même entité,

87
00:03:57,938 --> 00:03:59,597
la notion de rectangle.

88
00:04:00,732 --> 00:04:02,712
Les données caractéristiques 
du rectangle,

89
00:04:03,125 --> 00:04:05,682
comme sa largeur et sa hauteur,

90
00:04:06,314 --> 00:04:09,974
ainsi que les traitements 
qui lui sont spécifiquement associés,

91
00:04:10,084 --> 00:04:13,854
vont me permettre d'établir un lien 
explicite entre ces différentes entités

92
00:04:14,188 --> 00:04:16,557
et de donner beaucoup plus 
de clarté à mon programme.

93
00:04:16,890 --> 00:04:20,979
Il s'agit de l'un des fondamentaux 
de la programmation orientée objet.

94
00:04:21,329 --> 00:04:23,097
Ce qu'il faut savoir de façon globale,

95
00:04:23,298 --> 00:04:25,848
c'est que la programmation orientée 
objet va vous donner

96
00:04:26,100 --> 00:04:29,430
un certain nombre d'outillages 
permettant davantage

97
00:04:29,430 --> 00:04:30,872
de robustesse,

98
00:04:31,639 --> 00:04:33,040
de modularité,

99
00:04:34,742 --> 00:04:37,378
de lisibilité à vos programmes.

100
00:04:38,479 --> 00:04:41,635
Ce qui va dans le sens 
d'une meilleure maintenabilité.

101
00:04:43,717 --> 00:04:45,924
Alors, robustesse 
par rapport au changement:

102
00:04:46,644 --> 00:04:48,614
si votre programme est amené à changer,

103
00:04:48,975 --> 00:04:52,030
à être étendu, on ne veut pas 
être dans l'obligation de tout réécrire.

104
00:04:52,660 --> 00:04:55,907
Et robustesse face aux erreurs de
manipulation, par exemple, des données.

105
00:04:57,431 --> 00:05:01,738
En effet, la plupart des applications
développées de nos jours,

106
00:05:01,802 --> 00:05:03,204
ne sont pas redéveloppées depuis zéro,

107
00:05:03,471 --> 00:05:06,556
mais consistent à étendre, 
à maintenir du code existant.

108
00:05:06,874 --> 00:05:09,210
Et il est important 
de pouvoir le faire à moindre coût.

109
00:05:09,477 --> 00:05:11,979
Nous allons voir que les propriétés 
fondamentales de l'orientée objet

110
00:05:12,246 --> 00:05:16,015
à savoir davantage de robustesse, 
de modularité et de lisibilité

111
00:05:16,317 --> 00:05:17,951
vont exactement dans ce sens là.

112
00:05:18,419 --> 00:05:23,347
La programmation orientée objet offre, 
en réalité, quatre concepts centraux :

113
00:05:23,347 --> 00:05:26,522
encapsulation, abstraction, 
héritage et polymorphisme.

114
00:05:26,752 --> 00:05:29,126
qui permettent de mieux 
organiser les programmes

115
00:05:29,330 --> 00:05:31,378
dans le sens de la robustesse, 
de lisibilité,

116
00:05:31,378 --> 00:05:33,426
de modularité et maintenabilité,

117
00:05:33,426 --> 00:05:34,936
comme je l'ai exprimé tout à l'heure.

118
00:05:35,436 --> 00:05:38,459
Ces concepts centraux ne sont pas 
spécifiques à un langage,

119
00:05:38,606 --> 00:05:41,602
il s'agit des concepts centraux 
de l'orientée objet.

120
00:05:41,809 --> 00:05:43,970
Dans la séquence présente, 
nous allons essentiellement

121
00:05:44,311 --> 00:05:47,497
nous occuper de définir 
encapsulation et abstraction.

122
00:05:48,315 --> 00:05:50,044
Nous aborderons 
dans les séquences suivantes,

123
00:05:50,218 --> 00:05:52,848
les notions fondamentales 
d'héritage et de polymorphisme.

124
00:05:53,654 --> 00:05:56,114
Commençons par la notion d'encapsulation.

125
00:05:56,357 --> 00:05:59,046
Ce que l'on entend par encapsulation, 
c'est le fait de pouvoir regrouper

126
00:05:59,130 --> 00:06:01,025
dans une seule et même entité

127
00:06:02,864 --> 00:06:06,818
des données et des traitements 
qui agissent sur ces données.

128
00:06:07,235 --> 00:06:09,446
Typiquement, 
dans l'exemple du rectangle,

129
00:06:09,446 --> 00:06:12,415
nous allons regrouper dans 
une seule et même entité,

130
00:06:12,415 --> 00:06:16,512
la largeur et la hauteur qui caractérisent
la représentation du rectangle

131
00:06:16,977 --> 00:06:21,124
et la fonctionnalité 
du calcul de surface.

132
00:06:21,783 --> 00:06:24,385
Donc en terme de jargon, 
on va parler pour les données,

133
00:06:24,585 --> 00:06:26,053
de la notion d'attributs,

134
00:06:27,921 --> 00:06:29,955
et on va parler, 
pour les fonctionnalités,

135
00:06:29,955 --> 00:06:31,592
de la notion de méthode.

136
00:06:33,594 --> 00:06:35,429
Donc en programmation orientée objet,

137
00:06:35,730 --> 00:06:39,139
on va être dans la possibilité de définir
des nouveaux types de données,

138
00:06:39,433 --> 00:06:41,069
au travers, 
nous allons le voir un peu plus tard,

139
00:06:41,336 --> 00:06:42,770
de la notion de classes.

140
00:06:43,037 --> 00:06:46,175
Ces types de données peuvent être 
utilisés pour travailler concrètement

141
00:06:47,475 --> 00:06:50,444
avec des données

142
00:06:53,048 --> 00:06:54,975
de type plus abstrait, le rectangle.

143
00:06:56,316 --> 00:06:58,726
Ces données vont être des objets 
qui vont cohabiter dans le programme

144
00:06:58,986 --> 00:07:01,055
et interagir dans le programme.

145
00:07:01,286 --> 00:07:02,964
Un programme orienté objet 
va donc typiquement

146
00:07:03,091 --> 00:07:08,021
travailler avec des objets qui sont 
caractérisés par leurs attributs

147
00:07:09,363 --> 00:07:10,610
et leurs méthodes.

148
00:07:10,931 --> 00:07:13,723
Parlons maintenant 
de la notion d'abstraction.

149
00:07:13,723 --> 00:07:15,636
Supposons que je souhaite écrire 
un programme qui manipule

150
00:07:15,870 --> 00:07:17,772
plusieurs rectangles, 
pas uniquement un seul.

151
00:07:18,105 --> 00:07:22,183
Dans une approche procédurale,

152
00:07:22,183 --> 00:07:24,778
j'aurais typiquement 
l'occasion de déclarer

153
00:07:25,446 --> 00:07:30,339
autant de largeurs et de hauteurs 
que j'ai de rectangles.

154
00:07:30,785 --> 00:07:33,649
Ici je le fais pour le premier rectangle.

155
00:07:33,888 --> 00:07:36,457
Et je devrai évidemment 
faire exactement la même chose

156
00:07:36,791 --> 00:07:38,492
pour le second rectangle.

157
00:07:46,200 --> 00:07:48,195
Ce qui est relativement fastidieux.

158
00:07:48,535 --> 00:07:51,939
Si je souhaite maintenant calculer 
la surface de ces deux rectangles,

159
00:07:52,273 --> 00:07:54,642
je vais devoir appeler 
la fonction <i>surface</i>

160
00:07:54,909 --> 00:07:56,902
en lui fournissant, comme arguments,

161
00:07:57,044 --> 00:07:59,451
la largeur et la hauteur 
de chacun des rectangles

162
00:07:59,680 --> 00:08:00,883
de façon appropriée.

163
00:08:04,119 --> 00:08:06,830
Je fais un appel 
à la fonction <i>surface</i>

164
00:08:08,856 --> 00:08:10,821
en définissant à chaque fois 
les bons arguments.

165
00:08:11,371 --> 00:08:13,582
Donc il faut être précautionneux, 
ceci est source d'erreur.

166
00:08:13,664 --> 00:08:15,777
Imaginez par exemple, 
que je me trompe,

167
00:08:15,777 --> 00:08:18,304
et qu'au lieu de passer 
au premier appel de <i>surface</i>

168
00:08:18,398 --> 00:08:20,489
non pas <i>hauteur1</i>
mais <i>hauteur2</i>,

169
00:08:20,668 --> 00:08:21,987
je perd la cohérence de mes données.

170
00:08:22,203 --> 00:08:25,349
je ne suis plus en train de travailler 
avec les données d'un même rectangle.

171
00:08:26,374 --> 00:08:29,184
Le processus d'abstraction est 
le processus au terme duquel

172
00:08:29,343 --> 00:08:32,652
je réalise que je manipule 
des données d'un plus haut niveau,

173
00:08:34,481 --> 00:08:36,918
la notion de rectangle,

174
00:08:37,285 --> 00:08:40,739
à laquelle je peux associer 
une description générique.

175
00:08:40,739 --> 00:08:42,990
Ici, tous les rectangles 
sont caractérisés

176
00:08:42,990 --> 00:08:44,591
par une largeur et une hauteur

177
00:08:44,825 --> 00:08:47,027
auxquelles on peut attacher 
un même calcul de surface.

178
00:08:47,795 --> 00:08:51,682
Du coup, je décide de travailler avec 
la notion plus abstraite de rectangle,

179
00:08:52,343 --> 00:08:56,049
plutôt que de travailler avec 
une description intime

180
00:08:56,285 --> 00:08:58,065
de la représentation des rectangles,

181
00:08:58,065 --> 00:09:00,535
ce qui nous permet de 
nous focaliser sur l'essentiel

182
00:09:00,535 --> 00:09:02,474
et de cacher les détails.

183
00:09:02,474 --> 00:09:05,488
L'encapsulation me permet de regrouper

184
00:09:05,851 --> 00:09:08,772
en une seule et même entité, 
des données,

185
00:09:08,772 --> 00:09:12,723
comme une largeur et une hauteur,

186
00:09:12,723 --> 00:09:14,615
et des traitements,
comme un calcul de surface.

187
00:09:14,867 --> 00:09:18,865
C'est l'outil qui me permet d'aboutir 
à une vision plus abstraite,

188
00:09:18,959 --> 00:09:20,923
des données que je manipule.

189
00:09:22,163 --> 00:09:25,566
Du coup je vais permettre à mon programme,
de désormais, pouvoir travailler

190
00:09:25,800 --> 00:09:28,460
avec des entités plus abstraites,

191
00:09:28,769 --> 00:09:30,571
je vais travailler avec 
un premier rectangle

192
00:09:30,838 --> 00:09:32,039
et un deuxième rectangle,

193
00:09:32,239 --> 00:09:34,174
tous les deux de type Rectangle 
dans le programme.

194
00:09:34,438 --> 00:09:37,547
Je vais invoquer des calculs 
de surface sur ces rectangles.

195
00:09:37,612 --> 00:09:40,148
On va voir qu'en orientée objet, 
j'anticipe un petit peu sur la suite,

196
00:09:40,715 --> 00:09:44,714
je calcule ici la surface 
du premier rectangle.

197
00:09:46,320 --> 00:09:49,841
On va voir par la suite comment tout ceci
s'exprime de façon beaucoup plus précise.

198
00:09:50,090 --> 00:09:55,496
Du coup, je permet à mon programme 
de se focaliser sur l'essentiel.

199
00:09:57,099 --> 00:09:59,325
Donc je ne suis plus en train 
de me préoccuper du fait

200
00:09:59,719 --> 00:10:02,403
qu'un rectangle est constitué 
d'une largeur et d'une hauteur,

201
00:10:02,636 --> 00:10:04,438
je me focalise 
sur les aspects essentiels.

202
00:10:04,638 --> 00:10:08,665
Je travaille avec des rectangles, je fais
un calcul de surface sur un rectangle.

203
00:10:09,043 --> 00:10:12,655
Au niveau de l'utilisation, 
je ne vois désormais du rectangle

204
00:10:12,695 --> 00:10:14,641
que ce qu'on appelle en jargon 
orientée objet,

205
00:10:14,641 --> 00:10:16,181
son interface d'utilisation.

206
00:10:16,181 --> 00:10:18,099
C'est à dire, les fonctionnalités 
qui sont offertes

207
00:10:18,099 --> 00:10:21,716
pour la manipulation du rectangle,
comme ici, le calcul de surface.

208
00:10:22,370 --> 00:10:25,058
Faisons une analogie avec 
un objet de la vie courante.

209
00:10:25,193 --> 00:10:26,738
Lorsque vous conduisez votre voiture,

210
00:10:26,925 --> 00:10:29,528
vous avez typiquement besoin d'en 
connaître que l'interface d'utilisation.

211
00:10:30,172 --> 00:10:34,472
Concrètement, eh bien, vous avez besoin 
d'avoir un volant, un accélérateur,

212
00:10:34,668 --> 00:10:38,049
une pédale de frein et à nul moment 
il ne nous est utile de savoir

213
00:10:38,469 --> 00:10:42,180
comment le moteur est construit.

214
00:10:43,311 --> 00:10:44,731
Pour conduire votre voiture,

215
00:10:44,731 --> 00:10:47,863
vous n'avez besoin d'en connaître 
que l'interface d'utilisation.

216
00:10:48,015 --> 00:10:50,559
C'est le même principe 
en programmation orientée objet.

217
00:10:50,918 --> 00:10:53,110
Pour utiliser un nouveau type d'objet, 
une nouvelle classe,

218
00:10:53,487 --> 00:10:56,698
vous n'avez besoin d'en connaître 
que l'interface d'utilisation,

219
00:10:57,191 --> 00:10:58,860
qui est prévue par 
le programmeur de la classe.

220
00:10:59,227 --> 00:11:01,329
Le reste est du détail 
d'implémentation interne

221
00:11:01,495 --> 00:11:02,963
qu'il n'est pas utile de connaître.

222
00:11:03,697 --> 00:11:06,800
Il y a donc deux niveaux de perception 
d'un objet :

223
00:11:07,234 --> 00:11:10,664
un niveau externe qui est utile 
au programmeur utilisateur,

224
00:11:10,804 --> 00:11:13,008
celui qui utilise la notion de rectangle.

225
00:11:15,910 --> 00:11:18,774
dans un programme, 
il existe désormais un type Rectangle.

226
00:11:19,046 --> 00:11:21,059
Je peux déclarer 
des variables de type Rectangle,

227
00:11:21,059 --> 00:11:23,027
les initialiser de façon appropriée.

228
00:11:23,478 --> 00:11:26,625
Et ensuite, ce qui m'intéresse 
en temps que programmeur-utilisateur,

229
00:11:27,061 --> 00:11:29,928
c'est les fonctionnalités utiles, 
le calcul de surface.

230
00:11:31,459 --> 00:11:37,038
Donc ce niveau externe est le niveau 
qui intéresse le programmeur utilisateur

231
00:11:37,395 --> 00:11:39,469
celui qui utilise le type Rectangle.

232
00:11:41,268 --> 00:11:45,922
Second niveau : le niveau interne, 
celui qui a programmé le nouveau type,

233
00:11:46,139 --> 00:11:47,342
le type Rectangle,

234
00:11:48,701 --> 00:11:51,283
a du se préoccuper de 
tous les détails d'implémentation.

235
00:11:51,779 --> 00:11:55,072
A savoir, un rectangle, 
c'est une hauteur et une largeur.

236
00:11:55,182 --> 00:11:59,887
Il a du définir comment se fait 
concrètement le calcul de surface.

237
00:12:01,423 --> 00:12:04,331
Donc ceci constitue 
la partie implémentation.

238
00:12:04,813 --> 00:12:07,104
C'est un niveau interne 
qui n'est pas forcément utile

239
00:12:07,261 --> 00:12:09,935
à celui qui utilise le rectangle.

240
00:12:11,465 --> 00:12:13,829
Donc en programmation orientée objet,

241
00:12:13,839 --> 00:12:15,747
nous aurons, non seulement, 
la possibilité de regrouper

242
00:12:15,769 --> 00:12:19,160
en une seule et même entité 
des données et des traitements.

243
00:12:19,407 --> 00:12:22,930
On va pouvoir également définir 
des niveaux de visibilité.

244
00:12:23,111 --> 00:12:25,850
Celui qui programme 
le nouveau type Rectangle,

245
00:12:25,850 --> 00:12:28,589
concrètement une classe Rectangle,

246
00:12:28,589 --> 00:12:31,899
va pouvoir dire : 
« Ceci est un détail d'implémentation

247
00:12:31,899 --> 00:12:35,095
qui ne sera pas accessible 
à l'utilisateur externe. »

248
00:12:35,992 --> 00:12:41,111
Ceci est une fonctionnalité que l'on
souhaite offrir à l'utilisateur externe

249
00:12:41,395 --> 00:12:44,140
et donc qui va être accessible 
à cet utilisateur.

250
00:12:44,765 --> 00:12:48,719
Tout ce qui est accessible 
à l'utilisateur, donc visible,

251
00:12:50,972 --> 00:12:54,098
constitue ce que l'on appelle, 
l'interface d'utilisation

252
00:12:54,175 --> 00:12:56,310
de la classe du type en question.

253
00:12:56,544 --> 00:13:01,712
Ici, dans notre classe Rectangle, 
dans notre nouveau type Rectangle

254
00:13:02,019 --> 00:13:04,273
nous avons défini 
comme interface d'utilisation

255
00:13:04,585 --> 00:13:05,920
le calcul de surface.

256
00:13:06,187 --> 00:13:09,223
Le reste constitue 
des détails d'implémentation,

257
00:13:09,423 --> 00:13:12,850
qui ne sont pas accessibles au programmeur
qui utilise le type rectangle.

258
00:13:14,295 --> 00:13:16,175
Et nous avons ici une clef fondamentale

259
00:13:16,430 --> 00:13:19,234
nous permettant d'atteindre l'objectif
d'une meilleure robustesse

260
00:13:19,266 --> 00:13:21,102
de nos programmes 
face aux changements.

261
00:13:21,402 --> 00:13:23,404
Typiquement, 
lorsque l'on change de voiture,

262
00:13:23,737 --> 00:13:26,083
même si la technologie du moteur a changé

263
00:13:26,107 --> 00:13:28,075
l'interface globalement, reste la même.

264
00:13:28,275 --> 00:13:30,778
Vous pouvez continuer, vous savez 
toujours conduire votre voiture,

265
00:13:31,079 --> 00:13:33,647
même si les détails internes 
de mise en œuvre de votre voiture

266
00:13:33,881 --> 00:13:35,482
ont changé entre temps.

267
00:13:36,417 --> 00:13:39,779
Donc vous ne voyez de votre voiture,
quelque chose d'abstrait.

268
00:13:40,020 --> 00:13:42,283
Vous ne voyez de votre voiture, concrètement,

269
00:13:42,283 --> 00:13:44,435
que ce qui vous permet de la conduire,

270
00:13:44,435 --> 00:13:46,761
à savoir, le volant, 
l'accélarateur, la pédale de frein.

271
00:13:47,128 --> 00:13:50,611
Pour résumer, encapsuler, c'est 
regrouper en une seule et même entité

272
00:13:50,831 --> 00:13:53,197
les données et les traitements 
qui la caractérisent.

273
00:13:53,434 --> 00:13:56,120
C'est aussi dissimuler 
les détails d'implémentation.

274
00:13:56,403 --> 00:14:00,181
L'interface d'utilisation 
que l'on définit en utilisant justement

275
00:14:01,376 --> 00:14:02,985
cet outillage de l'encapsulation,

276
00:14:04,612 --> 00:14:07,180
est ce qui me permet d'aboutir 
à une abstraction,

277
00:14:07,481 --> 00:14:10,171
une vision abstraite des objets,

278
00:14:10,284 --> 00:14:12,357
que, en tant qu'utilisateur externe,

279
00:14:12,487 --> 00:14:14,722
je ne vois plus 
qu'en tant qu'objets manipulables

280
00:14:14,988 --> 00:14:17,191
au travers de leur interface d'utilisation.

281
00:14:17,926 --> 00:14:20,151
Donc concrètement 
le programmeur concepteur

282
00:14:21,796 --> 00:14:24,400
va donc décider de l'existence 
d'un nouveau type,

283
00:14:25,099 --> 00:14:28,872
et va devoir se préoccuper 
de tous les détails d'implémentation.

284
00:14:33,307 --> 00:14:39,539
Il va devoir décider de ce qui est 
visible pour le monde extérieur,

285
00:14:39,539 --> 00:14:41,849
de ce qui est utilisable 
et de ce qui ne l'est pas.

286
00:14:44,451 --> 00:14:47,947
Le programmeur utilisateur, 
de son côté, est

287
00:14:48,255 --> 00:14:52,627
client du nouveau type de donnée,
il va pouvoir l'utiliser.

288
00:14:56,330 --> 00:14:59,737
Mais va pouvoir l'utiliser uniquement, 
au travers de l'interface.

289
00:15:00,100 --> 00:15:04,471
C'est à dire des méthodes visibles, 
typiquement.

290
00:15:05,607 --> 00:15:07,608
Et n'aura pas accès aux détails internes.

291
00:15:08,396 --> 00:15:12,548
L'interface d'utilisation est, 
typiquement, ce qui va permettre

292
00:15:12,913 --> 00:15:16,296
d'établir le lien entre le concepteur
développeur et l'utilisateur.

293
00:15:17,351 --> 00:15:18,569
Et de façon très concrète,

294
00:15:18,569 --> 00:15:21,855
cette interface va pouvoir être 
entièrement décrite par l'en-tête

295
00:15:22,357 --> 00:15:26,288
des méthodes qui sont offertes 
au programmeur utilisateur.

296
00:15:27,295 --> 00:15:29,764
Alors un des intérêts fondamentaux
de l'orientée objet

297
00:15:30,131 --> 00:15:33,133
est d'assurer une meilleure visibilité, 
une meilleure cohérence au programme.

298
00:15:33,634 --> 00:15:35,169
Vous avez ici sous les yeux

299
00:15:35,369 --> 00:15:37,591
deux programmes qui font sensiblement
la même chose,

300
00:15:37,939 --> 00:15:40,375
qui calculent 
la surface d'un rectangle

301
00:15:40,575 --> 00:15:42,412
de largeur 3 et de hauteur 4.

302
00:15:42,643 --> 00:15:46,381
Nous anticipons un tout petit peu 
sur la suite des séquences à venir.

303
00:15:46,614 --> 00:15:50,107
A savoir que l'on peut initialiser 
la largeur et la hauteur d'un rectangle

304
00:15:50,107 --> 00:15:51,452
selon cette syntaxe là.

305
00:15:51,652 --> 00:15:53,354
Mais c'est surtout pour vous donner 
un aperçu

306
00:15:53,588 --> 00:15:55,230
de ce que donnerait au final le programme

307
00:15:55,230 --> 00:15:56,757
en terme de lisibilité.

308
00:15:56,991 --> 00:15:58,459
Donc si l'on compare les deux approches,

309
00:15:58,659 --> 00:16:01,109
on se rend compte que ici 
l'on est en train de travailler

310
00:16:01,109 --> 00:16:03,005
avec des données de très bas niveau.

311
00:16:03,597 --> 00:16:04,798
Ici nous travaillons avec un rectangle,

312
00:16:04,965 --> 00:16:06,467
ce qui est beaucoup plus informatif,

313
00:16:06,700 --> 00:16:08,168
quant aux intentions de programmation.

314
00:16:08,435 --> 00:16:09,870
En lisant ce programme, 
on sait tout de suite

315
00:16:10,070 --> 00:16:11,506
que l'on est en train 
de travailler avec un rectangle.

316
00:16:11,772 --> 00:16:14,537
Ici le lien entre 
les données et le traitement

317
00:16:15,142 --> 00:16:16,920
ne se fait que par le biais 
du pasage des arguments.

318
00:16:16,920 --> 00:16:18,012
Ce qui est indirect.

319
00:16:18,179 --> 00:16:20,648
Alors qu'ici le lien peut 
se faire de façon explicite.

320
00:16:21,015 --> 00:16:24,084
On appelle un calcul de surface 
sur un rectangle donné.

321
00:16:25,419 --> 00:16:27,054
De plus, de par le fait 
qu'en orientée objet,

322
00:16:27,254 --> 00:16:29,457
on ne peut manipuler l'objet,
qu'au travers,

323
00:16:29,691 --> 00:16:32,682
des méthodes des fonctionnalités
de l'interface d'utilisation.

324
00:16:32,796 --> 00:16:34,881
Cela permet de donner 
un cadre d'utilisation

325
00:16:34,996 --> 00:16:36,361
qui est beaucoup plus rigoureux.

326
00:16:36,567 --> 00:16:38,632
Par exemple ici, 
comme on le montrait tout à l'heure,

327
00:16:38,830 --> 00:16:41,410
rien ne m'oblige, dans cette approche,
à avoir des valeurs cohérentes,

328
00:16:41,636 --> 00:16:43,337
pour la largeur et la hauteur.

329
00:16:43,755 --> 00:16:46,623
Donc la largeur et la hauteur 
qui appartiendraient à un même rectangle.

330
00:16:46,740 --> 00:16:48,909
Ici, cette erreur n'est plus possible,

331
00:16:49,109 --> 00:16:50,778
puisqu'on manipule 
un rectangle particulier

332
00:16:50,945 --> 00:16:53,881
et donc forcément les valeurs 
qui y sont liées seront cohérentes.

333
00:16:54,315 --> 00:16:56,884
De plus, de par le même fait,
que l'utilisateur est contraint

334
00:16:57,084 --> 00:16:59,823
de passer par l'interface d'utilisation 
pour manipuler l'objet,

335
00:17:00,087 --> 00:17:04,557
il n'est pas impacté par des 
modifications d'implémentation internes.

336
00:17:04,959 --> 00:17:08,249
Comme évoqué précédemment, 
si on décide plutôt

337
00:17:08,249 --> 00:17:10,398
que de modéliser un rectangle comme étant

338
00:17:10,632 --> 00:17:15,518
un objet doté de 2 attributs 
de type <i>double</i> hauteur et largeur.

339
00:17:16,120 --> 00:17:19,540
on passe plutôt à une représentation
sous la forme d'un tableau

340
00:17:22,737 --> 00:17:24,135
à deux entrées,

341
00:17:24,135 --> 00:17:26,747
qui seraient les dimensions.

342
00:17:27,047 --> 00:17:29,450
Alors, si le programmeur concepteur 
de la classe <i>Rectangle</i>,

343
00:17:29,683 --> 00:17:30,718
a bien fait son travail,

344
00:17:30,884 --> 00:17:32,086
et donc, a adapté en conséquence

345
00:17:32,252 --> 00:17:33,287
le calcul de surface.

346
00:17:33,487 --> 00:17:35,892
Celui qui utilise le calcul de surface
n'est pas impacté.

347
00:17:37,358 --> 00:17:39,195
Nous venons de voir 
sur ce petit exemple

348
00:17:39,393 --> 00:17:43,731
l'intérêt qui découle de séparer 
le niveau interne du niveau externe.

349
00:17:43,964 --> 00:17:46,000
On obtient donc un cadre d'utilisation 
plus rigoureux.

350
00:17:46,233 --> 00:17:50,137
Et les modifications de la structure 
interne restent invisibles à l'extérieur.

351
00:17:50,971 --> 00:17:53,708
Donc une des règles fondamentales, 
qu'on a déjà vue dans l'introduction,

352
00:17:53,975 --> 00:17:57,211
les attributs, de par le fait 
qu'il faut faire des choix

353
00:17:57,411 --> 00:17:59,246
quant à leur modélisation, 
des choix techniques,

354
00:17:59,447 --> 00:18:00,247
des choix d'implémentation,

355
00:18:00,581 --> 00:18:02,850
sont considérés comme des détails d'implémentation

356
00:18:03,018 --> 00:18:05,686
de façon systématique dans 
tous bons programmes orientés objet.

357
00:18:06,787 --> 00:18:09,590
Pour résumer, lorsque l'on définit 
un nouveau type d'objet

358
00:18:09,790 --> 00:18:11,059
au travers d'une classe,

359
00:18:11,259 --> 00:18:14,762
on va être amené à définir des attributs caractéristiques de la classe

360
00:18:15,062 --> 00:18:17,465
ainsi que les méthodes 
qui lui sont spécifiques,

361
00:18:18,099 --> 00:18:20,968
et on va devoir se préoccuper 
de définir concrètement,

362
00:18:21,268 --> 00:18:23,337
ce qui est visible : 
l'interface d'utilisation,

363
00:18:23,474 --> 00:18:25,405
et ce qui ne l'est pas : 
les détails d'implémentation.

364
00:18:25,815 --> 00:18:28,810
Donc une fois que l'on aura décidé 
de ce qui est à cacher,

365
00:18:29,374 --> 00:18:35,149
on va aboutir à une représentation 
de l'objet pour l'utilisateur externe

366
00:18:35,416 --> 00:18:37,551
qui se résume à l'interface d'utilisation.

367
00:18:39,153 --> 00:18:41,923
Donc l'utilisateur externe, 
n'aura de vision de cet objet,

368
00:18:42,357 --> 00:18:43,991
une vision abstraite

369
00:18:44,258 --> 00:18:46,394
qui est matérialisée 
par l'interface d'utilisation.

370
00:18:46,594 --> 00:18:49,030
Je ne vois d'un rectangle 
que son calcul de surface.

371
00:18:49,363 --> 00:18:53,634
Et si je veux suivre les bonnes règles 
de programmation orientée objet,

372
00:18:54,034 --> 00:18:57,872
je vais considérer que les attributs sont
également des détails d'implémentation

373
00:18:59,516 --> 00:19:03,644
Donc l'interface va se limiter 
à un nombre de méthodes bien choisies.

374
00:19:04,378 --> 00:19:07,515
L'utilisateur externe n'aura 
de vision de l'objet

375
00:19:07,748 --> 00:19:09,250
que cette interface d'utilisation.

376
00:19:10,117 --> 00:19:12,086
A retenir de la séquence d'aujourd'hui,

377
00:19:12,286 --> 00:19:13,821
le résultat du processus d'abstraction

378
00:19:14,188 --> 00:19:16,290
est ce que l'on appelle une classe,

379
00:19:23,646 --> 00:19:25,800
qui me permet de désigner 
une catégorie d'objet.

380
00:19:26,601 --> 00:19:30,271
Une classe va définir, dans un programme,
un nouveau type.

381
00:19:32,106 --> 00:19:35,609
Je dispose désormais du type <i>Rectangle</i>

382
00:19:35,943 --> 00:19:38,378
que je peux manipuler 
dans un programme.

383
00:19:38,745 --> 00:19:42,083
Je peux déclarer 
des variables de ce type là.

384
00:19:43,184 --> 00:19:47,588
Une réalisation concrète, 
donc la déclaration d'une variable

385
00:19:47,822 --> 00:19:48,861
de ce nouveau type,

386
00:19:49,056 --> 00:19:52,626
c'est ce qu'on appelle dans le jargon 
orienté objet : un objet.

387
00:19:53,460 --> 00:19:56,264
Et il est généralement manipulé 
au travers d'une variable.

388
00:19:56,898 --> 00:20:01,669
A noter que l'on utilise couramment le 
terme d'instance pour désigner un objet.

389
00:20:02,436 --> 00:20:04,438
Pour résumer et pour illustrer le propos.

390
00:20:04,672 --> 00:20:06,807
Celui qui écrit la classe <i>Rectangle</i>

391
00:20:07,007 --> 00:20:09,309
va décider de l'existence conceptuelle 
de ce nouveau type.

392
00:20:09,543 --> 00:20:11,512
Il va le faire évidemment 
en écrivant un programme

393
00:20:11,713 --> 00:20:13,915
qui contient le code 
de cette classe <i>Rectangle</i>.

394
00:20:14,215 --> 00:20:16,384
Celui qui l'utilise, va utiliser ce nouveau type,

395
00:20:16,684 --> 00:20:19,520
en déclarant des variables 
du type <i>Rectangle</i>

396
00:20:19,787 --> 00:20:21,555
qui vont avoir une existence concrète

397
00:20:21,822 --> 00:20:23,591
au moment où le programme s'exécute.

398
00:20:23,857 --> 00:20:26,260
Donc au moment où l'on crée 
de nouveaux objets de ce type là,

399
00:20:26,493 --> 00:20:30,164
on va pouvoir commencer à travailler 
avec des objets dans un programme.

400
00:20:30,798 --> 00:20:33,801
L'utilisateur va travailler concrètement 
avec des réalisations

401
00:20:34,135 --> 00:20:37,238
des objets de la classe <i>Rectangle</i>.

402
00:20:37,772 --> 00:20:39,473
Nous voici arrivés au terme 
de la présentation

403
00:20:39,642 --> 00:20:41,342
de ces concepts centraux 
de l'orientée objet,

404
00:20:41,575 --> 00:20:43,477
que sont l'encapsulation 
et l'abstraction.

405
00:20:43,642 --> 00:20:45,312
Vous allez, dès les séquences suivantes,

406
00:20:45,445 --> 00:20:48,158
commencer à les pratiquer 
très concrètement en C++.
