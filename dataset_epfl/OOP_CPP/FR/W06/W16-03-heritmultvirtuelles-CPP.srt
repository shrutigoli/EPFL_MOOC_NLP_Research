1
00:00:04,462 --> 00:00:05,486
Dans cette séquence vidéo,

2
00:00:05,486 --> 00:00:08,378
nous allons aborder le point
le plus subtil, le plus délicat

3
00:00:08,378 --> 00:00:10,242
de l'héritage multiple, qui d'ailleurs

4
00:00:10,242 --> 00:00:13,244
fait que certains langages ne veulent pas
avoir d'héritage multiple,

5
00:00:13,244 --> 00:00:16,239
ce que l'on appelle donc 
les «classes virtuelles».

6
00:00:16,239 --> 00:00:20,635
Mais commençons par illustrer le problème
auquel répond ce nouveau concept.

7
00:00:20,635 --> 00:00:22,785
Reprenons pour cela notre fameux exemple

8
00:00:22,785 --> 00:00:25,911
des ovovivipares qui sont des ovipares

9
00:00:25,911 --> 00:00:29,552
et des vivipares, donc qui ont un 
héritage multiple par rapport à une classe

10
00:00:29,552 --> 00:00:33,376
Ovipare et une classe Vivipare et 
imaginons, ce n'est pas complètement

11
00:00:33,376 --> 00:00:37,051
loufoque, que la classe Ovipare hérite
de la classe Animal

12
00:00:37,051 --> 00:00:38,838
(on dit qu'un Ovipare est un Animal).

13
00:00:38,838 --> 00:00:41,267
De même, un Vivipare est un Animal

14
00:00:41,267 --> 00:00:45,764
et donc Ovovivipare, d'un certain
point de vue, est deux fois un Animal.

15
00:00:45,764 --> 00:00:50,442
Un autre exemple, un peu technique, 
tiré de la bibliothèque système de C++,

16
00:00:50,442 --> 00:00:53,494
dont le but n'est bien sûr 
pas de comprendre tous les détails

17
00:00:53,494 --> 00:00:57,566
mais d'illustrer que le genre de problèmes
dont nous parlons ici existe bien

18
00:00:57,566 --> 00:00:58,567
dans la vraie vie.

19
00:00:58,567 --> 00:01:00,273
Donc avec la classe <i>iostream</i>,

20
00:01:00,273 --> 00:01:02,845
(dont vous avez déjà entendu parler
avec <i>cout</i>)

21
00:01:02,845 --> 00:01:04,636
il se trouve que cette classe <i>iostream</i>

22
00:01:04,636 --> 00:01:09,440
est un <i>ostream</i> et est aussi un <i>istream</i>.

23
00:01:09,440 --> 00:01:13,327
Et puis les concepteurs de ces classes là
ont décidé que chacun de

24
00:01:13,327 --> 00:01:18,568
<i>istream</i> et <i>ostream</i> étaient aussi 
des <i>ios</i>, peu importe ce que c'est ici.

25
00:01:18,568 --> 00:01:23,346
Donc on a ici aussi <i>iostream</i>
qui est apparemment deux fois un <i>ios</i>.

26
00:01:23,346 --> 00:01:27,571
Une petite remarque générale : d'ailleurs,
c'est comme ceci, en réalité,

27
00:01:27,571 --> 00:01:30,481
que l'on représente les diagrammes 
d'héritage, on ne met jamais

28
00:01:30,481 --> 00:01:34,273
plusieurs fois la classe sur un diagramme
d'héritage mais on l'écrit

29
00:01:34,273 --> 00:01:37,591
qu'une seule fois et donc avec ici 
deux héritages qui reviennent

30
00:01:37,591 --> 00:01:39,458
sur la même classe.

31
00:01:39,458 --> 00:01:41,022
La raison pour laquelle je l'ai dessiné

32
00:01:41,022 --> 00:01:43,964
comme ceci sur ce diagramme là, 
c’est bien pour vous faire comprendre

33
00:01:43,964 --> 00:01:45,433
quel est le problème.

34
00:01:45,433 --> 00:01:47,713
Que signifie qu’un ovovivipare

35
00:01:47,713 --> 00:01:51,676
est un ovipare qui est un animal 
et un ovovivipare est un vivipare

36
00:01:51,676 --> 00:01:53,214
qui est un animal ?

37
00:01:53,214 --> 00:01:56,999
Est ce que ça signifie qu'un 
ovovivipare est deux fois un animal ?

38
00:01:56,999 --> 00:02:02,158
Par exemple, si un animal a une tête, 
est-ce qu’un ovovivipare a deux têtes ?

39
00:02:02,158 --> 00:02:05,149
Est-ce qu’il aurait une tête d’ovipare
et une tête de vivipare ?

40
00:02:05,149 --> 00:02:08,534
Ou est ce qu'il n'a qu'une seule tête,
Est- ce que c'est le même animal ?

41
00:02:08,534 --> 00:02:10,261
C’est bien là le coeur du problème

42
00:02:10,261 --> 00:02:12,251
et c’est bien à cause 
de ce genre de problème

43
00:02:12,251 --> 00:02:16,627
que certains langages ne veulent pas
avoir d’héritage multiple.

44
00:02:16,627 --> 00:02:19,044
En C++ si l’on ne fait rien de particulier

45
00:02:19,044 --> 00:02:22,277
(et c’est pour cela que je l’ai déssiné
comme ceci de façon peu habituelle),

46
00:02:22,277 --> 00:02:24,002
on va effectivement hériter

47
00:02:24,002 --> 00:02:28,355
deux fois de la classe Animal
dans la classe Ovovivipare.

48
00:02:28,355 --> 00:02:32,562
Chaque objet de la classe Ovovivipare
possédera deux fois les attributs

49
00:02:32,562 --> 00:02:34,757
de la classe Animal.

50
00:02:34,757 --> 00:02:36,518
Voyons ceci sur un exemple très concret :

51
00:02:36,518 --> 00:02:40,777
Imaginons donc l’exemple suivant, 
écrit ici de façon un petit peu compacte

52
00:02:40,777 --> 00:02:42,934
pour tenir sur une seule image.

53
00:02:42,934 --> 00:02:45,025
On aurait donc la classe Animal

54
00:02:45,025 --> 00:02:50,032
avec ici un constructeur qui permet 
d’initialiser l’attribut qu'elle aurait

55
00:02:50,032 --> 00:02:54,599
qui serait ici une chaîne de caractères 
pour indiquer la tête qu'a cet animal

56
00:02:54,599 --> 00:02:58,982
Donc on reçoit une chaine de caractères 
et on initialise l’attribut tête

57
00:02:58,982 --> 00:03:02,809
avec le paramètre que l’on a reçu 
et puis on a une classe Ovipare

58
00:03:02,809 --> 00:03:07,586
qui hérite de la classe Animal
et cette classe Ovipare redéfinit

59
00:03:07,586 --> 00:03:11,069
un constructeur par défaut, ici,
j’ai pas voulu faire plus compliqué

60
00:03:11,069 --> 00:03:14,095
qui appelle donc le constructeur d’Animal

61
00:03:14,095 --> 00:03:17,009
en passant comme chaine de caractères
«à cornes».

62
00:03:17,009 --> 00:03:19,052
On va dire
"il a une tête à cornes”, par exemple.

63
00:03:19,052 --> 00:03:23,616
Et puis on a la classe Vivipare, ici,
qui hérite aussi d’Animal

64
00:03:23,616 --> 00:03:30,042
et qui a un constructeur par défaut
qui dit que l’animal a une tête de poisson

65
00:03:30,042 --> 00:03:30,894
par exemple.

66
00:03:30,894 --> 00:03:35,001
Et enfin on a une classe 
Ovovivipare qui hérite d’Ovipare

67
00:03:35,001 --> 00:03:37,608
et qui hérite de Vivipare, 
donc on a vraiment le diagramme

68
00:03:37,608 --> 00:03:40,838
que je vous ai présenté précédemment 
et qui aurait donc par exemple

69
00:03:40,838 --> 00:03:46,443
une méthode publique «affiche», ici, 
qui dit “j’ai une tête" en affichant

70
00:03:46,443 --> 00:03:50,741
la tête hérité d’Animal au travers 
d’Ovipare, ici, on retrouve

71
00:03:50,741 --> 00:03:52,890
l’opérateur de résolution de portée.

72
00:03:52,890 --> 00:03:55,968
On a bien une ambiguïté puisque 
Ovovivipare

73
00:03:55,968 --> 00:03:58,384
hérite effectivement de deux têtes,

74
00:03:58,384 --> 00:04:01,674
au travers, une, 
d’Ovipare et l’autre de Vivipare.

75
00:04:01,674 --> 00:04:06,651
Donc ici, pour résoudre l'ambiguïté, 
on va utiliser comme d’habitude,

76
00:04:06,651 --> 00:04:08,307
l’opérateur de résolution de portée.

77
00:04:08,307 --> 00:04:11,725
Donc il dit “j’ai une tête” 
et affiche la tête d’Ovipare,

78
00:04:11,725 --> 00:04:14,895
"et une tête", 
et affiche la tête de Vivipare

79
00:04:14,895 --> 00:04:16,553
et si par exemple,

80
00:04:16,553 --> 00:04:18,574
quelque part dans la 
fonction <i>main</i> ou ailleurs

81
00:04:18,574 --> 00:04:22,893
je déclare ici un ovovivipare <i>x</i>, 
c’est tout à fait possible

82
00:04:22,893 --> 00:04:26,442
puisque Ovovivipare a de toute façon 
un constructeur par défaut

83
00:04:26,442 --> 00:04:28,576
qui va être construit par défaut,

84
00:04:28,576 --> 00:04:33,426
lequel va appeler les deux constructeurs 
par défaut de ces super-classes

85
00:04:33,426 --> 00:04:38,432
dans l’ordre de déclaration de l’héritage,
ici au niveau de la classe.

86
00:04:38,432 --> 00:04:42,960
Donc ici, on va appeller les constructeurs
d'Ovipare et de Vivipare

87
00:04:42,960 --> 00:04:45,863
On peut tout à fait faire 
cette construction par défaut ici.

88
00:04:45,863 --> 00:04:47,659
Et puis ensuite, si on affiche,

89
00:04:47,659 --> 00:04:51,987
on va bien avoir l’affichage 
pour cet Ovovivipare :

90
00:04:51,987 --> 00:04:54,150
“j’ai une tête à corne”,

91
00:04:54,150 --> 00:04:58,766
qui est le résultat de l’initialisation

92
00:04:58,766 --> 00:05:01,720
qui a eu lieu au travers du constructeur 
par défaut d’Ovipare

93
00:05:01,720 --> 00:05:04,016
"et une tête de poisson"

94
00:05:04,016 --> 00:05:08,231
qui est le résultat de l’affichage de 
«Vivipare: :tete»

95
00:05:08,231 --> 00:05:11,783
qui a été initialisé au travers 
du constructeur par défaut

96
00:05:11,783 --> 00:05:13,939
de la classe Vivipare

97
00:05:13,939 --> 00:05:18,969
Donc la classe Ovovivipare a effectivement 
bien hérité de deux têtes

98
00:05:18,969 --> 00:05:23,656
il y a bien deux animaux dans la classe 
Ovovivipare.

99
00:05:23,656 --> 00:05:24,780
Donc ici, bien sûr,

100
00:05:24,780 --> 00:05:28,760
c’est un petit peu indésirable 
qu’un ovovivipare récupère deux têtes

101
00:05:28,760 --> 00:05:33,331
au travers de cet héritage multiple 
et qu’il ait deux copies d’Animal

102
00:05:33,331 --> 00:05:34,778
mais à noter qu’il y a certains cas

103
00:05:34,778 --> 00:05:39,397
ou l’on peut très bien vouloir hériter
effectivement deux fois les attributs.

104
00:05:39,397 --> 00:05:42,858
Admettons que par exemple, 
on ati une hiérarchie de véhicules

105
00:05:42,858 --> 00:05:46,692
et que l’on ait, par exemple,
des véhicules «à essence»

106
00:05:46,692 --> 00:05:50,055
et des véhicules «électriques»

107
00:05:50,055 --> 00:05:53,625
et que l’on imagine 
avoir des véhicules «hybrides»,

108
00:05:53,625 --> 00:05:58,680
qui sont à la fois un véhicule «à essence»
et un véhicule «électrique».

109
00:05:58,680 --> 00:05:59,806
La question, c’est donc :

110
00:05:59,806 --> 00:06:04,511
est-ce que «hybride» est un seul véhicule,
comme les animaux avec les ovovivipares ?

111
00:06:04,511 --> 00:06:06,790
Ou effectivement deux véhicules?

112
00:06:06,790 --> 00:06:10,479
et tout ceci va dépendre 
de ce que l’on entend par “véhicule”.

113
00:06:10,479 --> 00:06:13,388
Si l’on entend qu’un véhicule, 
ça a quatre roues, un volant,

114
00:06:13,388 --> 00:06:16,938
bien sûr, on voudrait qu’un 
véhicule hybride n’ait qu’une seule fois

115
00:06:16,938 --> 00:06:20,768
quatre roues et un volant et certainement
pas huit roues et deux volants.

116
00:06:20,768 --> 00:06:23,551
Si, par contre, on entend 
qu’un véhicule a un moteur,

117
00:06:23,551 --> 00:06:25,309
et donc là, on a un moteur «électrique»

118
00:06:25,309 --> 00:06:27,327
et la on a un moteur «à essence»

119
00:06:27,327 --> 00:06:30,140
alors dans ce cas là, 
on souhaitera effectivement avoir

120
00:06:30,140 --> 00:06:32,500
deux moteurs dans «hybride».

121
00:06:32,500 --> 00:06:35,257
Donc vous voyez comme ce problème
est quand même assez subtil

122
00:06:35,257 --> 00:06:39,091
et relève vraiment de la conception
et de bien savoir ce que l’on veut dire

123
00:06:39,091 --> 00:06:44,226
par la relation d’héritage,
en particulier lors d’un héritage multiple.

124
00:06:44,226 --> 00:06:48,384
Si l’on ne souhaite donc pas 
recevoir plusieurs fois les attributs

125
00:06:48,384 --> 00:06:49,681
d’une super-super-classe,

126
00:06:49,681 --> 00:06:52,574
alors il va falloir faire 
quelque chose de particulier

127
00:06:52,574 --> 00:06:56,193
pour l’empêcher et l’on va devoir 
déclarer son lien d’héritage

128
00:06:56,193 --> 00:06:58,670
comme un lien virtuel.

129
00:06:58,670 --> 00:07:01,071
A nouveau le mot clé “virtuel”, ici, 
mais pour autre chose,

130
00:07:01,071 --> 00:07:04,872
ici, ça va être le lien d’héritage 
qui va être virtuel.

131
00:07:04,872 --> 00:07:08,529
Et donc on dira qu’une super-classe,
comme ceci, qui a des liens d'héritage

132
00:07:08,529 --> 00:07:10,042
vers ses sous classes comme virtuels

133
00:07:10,042 --> 00:07:13,770
va être appelé 
une super-classe «virtuelle»

134
00:07:13,770 --> 00:07:16,660
Attention, ça n’a rien a voir 
avec une classe «abstraite» !

135
00:07:16,660 --> 00:07:20,248
Dans une classe abstraite, 
on a des méthodes virtuelles

136
00:07:20,248 --> 00:07:23,924
et dans une classe virtuelle

137
00:07:23,924 --> 00:07:25,077
on peut avoir tout ce que 
l’on veut comme méthode.

138
00:07:25,077 --> 00:07:29,782
C’est simplement le lien d’héritage 
des sous classes qui va être particulier,

139
00:07:29,782 --> 00:07:31,468
qui va être virtuel.

140
00:07:31,468 --> 00:07:33,326
Donc ne confondez pas les deux concepts.

141
00:07:33,326 --> 00:07:35,738
La syntaxe générale va être la suivante :

142
00:07:35,738 --> 00:07:40,447
pour les sous-classes, 
on dira que l’on hérite de façon virtuelle.

143
00:07:40,447 --> 00:07:43,030
Personnellement, je préfère dire,
plutôt que “c’est une classe virtuelle”,

144
00:07:43,030 --> 00:07:45,914
je préfère dire que 
"c’est un héritage virtuel”

145
00:07:45,914 --> 00:07:49,772
Donc on va dire que l’on hérite 
de façon virtuelle de la superclasse.

146
00:07:49,772 --> 00:07:51,976
Donc concrètement,
dans l’exemple des ovovivipares,

147
00:07:51,976 --> 00:07:56,045
on va changer au niveau d’<i>Ovipare</i>
et au niveau de <i>Vivipare</i>

148
00:07:56,045 --> 00:07:59,939
pour dire qu’un <i>Ovipare</i> hérite virtuellement 
de la classe <i>Animal</i>

149
00:07:59,939 --> 00:08:02,323
et on appellera la classe <i>Animal</i>
comme une classe virtuelle

150
00:08:02,323 --> 00:08:06,684
et on va aussi écrire que la classe 
<i>Vivipare</i> hérite de facon virtuelle

151
00:08:06,684 --> 00:08:09,158
de la classe <i>Animal</i>.

152
00:08:09,158 --> 00:08:12,009
A noter que c’est bien la classe 
qui peut être héritée <i>plusieurs fois</i>

153
00:08:12,009 --> 00:08:13,959
qui doit être virtuelle.

154
00:08:13,959 --> 00:08:17,955
donc ici, concrètement, 
c’est bien la classe <i>Animal</i>...

155
00:08:22,327 --> 00:08:27,598
c’est bien la classe <i>Animal</i>
qui va devenir une classe virtuelle.

156
00:08:27,598 --> 00:08:31,570
C’est bien les liens d’héritage 
d’<i>Ovipare</i> vers <i>Animal</i>

157
00:08:31,590 --> 00:08:36,708
et de <i>Vivipare</i> vers <i>Animal</i>
que l’on doit modifier,

158
00:08:36,708 --> 00:08:41,936
alors même que c’est la classe 
<i>Ovovivipare</i> qui introduit le problème.

159
00:08:41,936 --> 00:08:45,198
Donc notez bien ici 
qu’il y a vraiment un petit souci

160
00:08:45,198 --> 00:08:47,108
de conception générale.

161
00:08:47,108 --> 00:08:50,429
Les concepteurs de la classe 
<i>Ovipare</i> et <i>Vivipare</i>

162
00:08:50,429 --> 00:08:53,721
vont devoir déclarer un héritage virtuel

163
00:08:53,721 --> 00:08:56,865
par rapport à la classe <i>Animal</i>, 
parce que possiblement

164
00:08:56,865 --> 00:09:00,623
un jour, quelqu’un va imaginer
une sous-classe <i>Ovovivipare</i>

165
00:09:00,623 --> 00:09:02,829
qui hérite d’<i>Ovipare</i> et de <i>Vivipare</i>.

166
00:09:02,829 --> 00:09:07,000
Donc ça, c’est une grosse critique 
de cet héritage virtuel,

167
00:09:07,000 --> 00:09:08,256
de ces classes virtuelles,

168
00:09:08,256 --> 00:09:12,711
c’est que ça rend fortement dépendant 
des héritages d’un niveau supérieur.

169
00:09:12,711 --> 00:09:15,838
à ce qui pourrait se passer 
au niveau inférieur.

170
00:09:15,838 --> 00:09:19,132
C’est aussi pour cette raison là que 
certains langages de programmation

171
00:09:19,132 --> 00:09:24,685
ne veulent pas de l’héritage multiple,
donc de l’héritage virtuel.

172
00:09:24,685 --> 00:09:28,562
Néanmoins, en C++, 
cela existe et il faudra donc l’utiliser

173
00:09:28,562 --> 00:09:30,660
avec précaution, avec parcimonie.

174
00:09:30,660 --> 00:09:32,775
Et donc, si l’on fait un héritage multiple,

175
00:09:32,775 --> 00:09:34,711
ce que l’on représenterait 
de la façon suivante,

176
00:09:34,711 --> 00:09:37,395
avec des traits-tillés 
au lieu d'être des traits pleins

177
00:09:37,395 --> 00:09:39,936
pour ce qui est de l’héritage,

178
00:09:39,936 --> 00:09:43,693
pour dire que c’est un héritage virtuel
et donc que cette classe, ici,

179
00:09:43,693 --> 00:09:46,174
est un héritage virtuel, 
alors à ce moment là,

180
00:09:46,174 --> 00:09:47,891
si l’on fait ces deux héritages virtuels,

181
00:09:47,891 --> 00:09:51,807
la classe <i>Ovovivipare</i>
n’aura plus qu’une seule tête,

182
00:09:51,807 --> 00:09:54,982
ce qui va se passer, c'est que
l’on va créer une seule fois <i>Animal</i>

183
00:09:54,982 --> 00:09:56,207
dans <i>Ovovivipare</i>

184
00:09:56,207 --> 00:10:00,597
et on ne créera plus, cette fois ci,
deux animaux dans <i>Ovovivipare</i>.

185
00:10:00,597 --> 00:10:03,861
Ca répond bien au problème 
que l’on avait soulevé tout à l’heure.

186
00:10:03,861 --> 00:10:06,876
Voyons maintenant l’impact 
que ces classes virtuelles,

187
00:10:06,876 --> 00:10:08,007
l’héritage virtuel,

188
00:10:08,007 --> 00:10:10,292
impose sur les constructeurs.

189
00:10:10,292 --> 00:10:13,567
Cela impose une contrainte assez forte 
au niveau du programmeur.

190
00:10:13,567 --> 00:10:14,966
Mais tout d’abord, un rappel.

191
00:10:14,966 --> 00:10:17,295
Je vous rappelle 
que dans un héritage usuel,

192
00:10:17,295 --> 00:10:20,902
c’est le constructeur de la sous-classe 
qui appelle le constructeur,

193
00:10:20,902 --> 00:10:23,031
ou <i>les</i> constructeurs,
en cas d’héritage multiple

194
00:10:23,031 --> 00:10:24,619
des super-classes directes,

195
00:10:24,619 --> 00:10:27,533
des super-classes 
dont elle dépend directement.

196
00:10:27,533 --> 00:10:30,131
Alors que dans un héritage virtuel,

197
00:10:30,131 --> 00:10:33,477
avec une super-super-super classe virtuelle,

198
00:10:33,477 --> 00:10:37,269
la responsabilité d’initialiser,
d’appeller les constructeurs

199
00:10:37,269 --> 00:10:42,150
de cette super-super classe virtuelle
incombe à toute les sous-classes

200
00:10:42,150 --> 00:10:44,509
dont on veut créer une instance.

201
00:10:44,509 --> 00:10:46,980
Donc toutes ces sous-classes, 
sous-sous-classes, etc.,

202
00:10:46,980 --> 00:10:51,808
qui héritent indirectement d’une 
super-super-super-classe virtuelle

203
00:10:51,808 --> 00:10:53,122
et qui ne sont pas abstraites,

204
00:10:53,122 --> 00:10:56,148
(c’est à dire que l’on peut donc
en créer des instances),

205
00:10:56,148 --> 00:10:57,964
devront faire un appel <b>explicite</b>

206
00:10:57,964 --> 00:11:01,060
au constructeur de la 
super-super-super-classe

207
00:11:01,060 --> 00:11:02,785
qui est virtuelle.

208
00:11:02,785 --> 00:11:04,157
Ca c’est donc une forte contrainte

209
00:11:04,157 --> 00:11:07,596
dans la déclaration des 
constructeurs des sous-classes

210
00:11:07,596 --> 00:11:10,648
Voyons ça de façon concrète 
sur l’exemple des ovovivipares.

211
00:11:10,648 --> 00:11:14,136
Dans ce cas là, nous avons 
la sous-sous-classe <i>Ovovivipare</i>

212
00:11:14,136 --> 00:11:16,374
qui hérite de la sous-classe 
<i>Ovipare</i> et <i>Vivipare</i>

213
00:11:16,374 --> 00:11:19,691
lesquelles héritent virtuellement 
de la classe <i>Animal</i>.

214
00:11:19,691 --> 00:11:21,736
On a donc ici une classe virtuelle <i>Animal</i>

215
00:11:21,736 --> 00:11:24,695
et donc il incombe 
à la sous-classe <i>Ovovivipare</i>,

216
00:11:24,695 --> 00:11:27,429
dans ses constructeurs, 
d’appeler directement

217
00:11:27,429 --> 00:11:29,538
le constructeur d’<i>Animal</i>.

218
00:11:29,538 --> 00:11:33,203
On devra donc écrire la chose suivante
dans le constructeur d’<i>Ovovivipare</i>,

219
00:11:33,203 --> 00:11:36,003
avoir un appel explicite 
au constructeur d’<i>Animal</i>

220
00:11:36,003 --> 00:11:37,352
on sera obligé d’écrire ceci.

221
00:11:37,352 --> 00:11:39,394
Supposons qu’il prenne
ces trois paramètres,

222
00:11:39,394 --> 00:11:42,694
avant d’écrire l’appel 
au constructeur usuel

223
00:11:42,694 --> 00:11:46,055
des super-classes directes 
dont dépend <i>Ovovivipare</i>.

224
00:11:46,055 --> 00:11:49,697
Donc ça c’est une contrainte assez forte
au niveau des classes virtuelles.

225
00:11:49,697 --> 00:11:53,388
Ce qui se passe concrètement, 
lorsqu'on déclare donc une instance,

226
00:11:53,388 --> 00:11:55,772
Comme ça, <i>o</i> de <i>Ovovivipare</i>

227
00:11:55,772 --> 00:11:58,532
donc appel au constructeur d’<i>Ovovivipare</i>,

228
00:11:58,532 --> 00:12:01,541
c’est que la première chose
qui va se faire, c'est d'appeler

229
00:12:01,541 --> 00:12:03,364
la construction d’un <i>Animal</i>.

230
00:12:03,364 --> 00:12:06,467
Donc quand on construit, comme ça,
une sous-sous-sous classe,

231
00:12:06,467 --> 00:12:10,248
qui dépend dune classe virtuelle, 
la première chose que l’on fait,

232
00:12:10,248 --> 00:12:12,131
c’est de créer la classe virtuelle.

233
00:12:12,131 --> 00:12:14,668
il n’y en a qu’une, justement,
c’est le but de l’héritage virtuel

234
00:12:14,668 --> 00:12:16,394
et des classes virtuelle 
de n’en avoir qu’une

235
00:12:16,394 --> 00:12:19,904
et de ne pas en avoir plusieurs, 
au travers de tout les chemins d’héritage.

236
00:12:19,904 --> 00:12:21,536
Et donc comme en n’a qu’une,

237
00:12:21,536 --> 00:12:23,444
on est obligé de la construire en premier

238
00:12:23,444 --> 00:12:26,110
et donc on va construire 
cet <i>Animal</i> ici en premier,

239
00:12:26,110 --> 00:12:28,150
le premier constructeur 
qui va être appelé,

240
00:12:28,150 --> 00:12:29,420
c’est le constructeur d’<i>Animal</i>.

241
00:12:29,420 --> 00:12:33,113
avant de rentrer dans 
l’appel normal des constructeurs.

242
00:12:33,113 --> 00:12:34,912
Donc le constructeur d’<i>Ovovivipare</i>

243
00:12:34,912 --> 00:12:37,783
appellera ensuite 
le constructeur d’<i>Ovipare</i>,

244
00:12:37,783 --> 00:12:39,263
lequel constructeur d’<i>Ovipare</i>

245
00:12:39,263 --> 00:12:42,281
normalement, devrait appeler 
le constructeur de la super-classe,

246
00:12:42,281 --> 00:12:45,866
Mais ici, comme on a déjà 
initialisé la super-classe,

247
00:12:45,866 --> 00:12:49,492
cet appel au constructeur d’<i>Animal</i>
dans le constructeur d’<i>Ovipare</i>

248
00:12:49,492 --> 00:12:50,941
va être ignoré.

249
00:12:50,941 --> 00:12:54,337
De même ensuite on appellera 
le constructeur de <i>Vivipare</i>,

250
00:12:54,337 --> 00:12:57,803
lequel va ignorer l’appel 
du constructeur d’<i>Animal</i>

251
00:12:57,803 --> 00:13:00,230
puisque ça a déjà été fait au départ.

252
00:13:00,230 --> 00:13:03,220
Pour résumer, ici, 
construction d’un <i>Ovovivipare</i>

253
00:13:03,220 --> 00:13:05,526
Première chose, on appelle 
le constructeur d’<i>Animal</i> ;

254
00:13:05,526 --> 00:13:08,006
deuxième chose, on appelle 
le constructeur d’<i>Ovipare</i>;

255
00:13:08,006 --> 00:13:11,234
dans lequel on n'appelle <i>plus</i>
le constructeur d’<i>Animal</i>;

256
00:13:11,234 --> 00:13:13,853
Troisième chose, on appelle 
le constructeur de <i>Vivipare</i>,

257
00:13:13,853 --> 00:13:16,168
dans lequel on n'appelle <i>plus</i>
le constructeur d’<i>Animal</i>

258
00:13:16,168 --> 00:13:18,109
et puis on termine bien sûr, 
comme d’habitude

259
00:13:18,109 --> 00:13:21,149
en initialisant ses propres attributs.

260
00:13:21,149 --> 00:13:22,376
Donc pour résumer,

261
00:13:22,376 --> 00:13:25,615
lors de la création d’un objet 
d’une classe la plus dérivée,

262
00:13:25,615 --> 00:13:27,380
sous-sous-sous classe
d’une classe virtuelle,

263
00:13:27,380 --> 00:13:29,349
c’est son constructeur, 
de cette sous-sous-classe,

264
00:13:29,349 --> 00:13:32,517
qui a la charge d’invoquer 
directement le constructeur

265
00:13:32,517 --> 00:13:34,461
de la superclasse virtuelle.

266
00:13:34,461 --> 00:13:37,123
Et les appels au constructeur 
de la super-classe virtuelle

267
00:13:37,123 --> 00:13:40,878
dans les classes intermédiaires 
sont simplement ignorés.

268
00:13:40,878 --> 00:13:43,785
Bien sur, si la super-classe virtuelle 
a un constructeur par défaut

269
00:13:43,785 --> 00:13:45,255
alors il n’est évidemment pas nécessaire

270
00:13:45,255 --> 00:13:48,116
de faire explicitement 
appel à son constructeur,

271
00:13:48,116 --> 00:13:48,975
mais de toute façon,

272
00:13:48,975 --> 00:13:51,882
il y aura un appel à 
ce constructeur par défaut,

273
00:13:51,882 --> 00:13:56,915
qui sera appelé dès la création
de l’instance la plus dérivée.

274
00:13:56,915 --> 00:13:58,672
Et comme d’habitude, bien sûr,

275
00:13:58,672 --> 00:14:01,941
si l’appel au constructeur de la 
super-super-classe virtuelle

276
00:14:01,941 --> 00:14:06,550
est omis dans les sous-sous-classes
et que cette super-super-classe virtuelle

277
00:14:06,550 --> 00:14:09,066
n’a pas de constructeur par défaut,

278
00:14:09,066 --> 00:14:12,652
alors évidemment la compilation 
va signaler une erreur,

279
00:14:12,652 --> 00:14:16,574
puisqu'elle voudra absolument appeler 
un constructeur qui n’existe pas.

280
00:14:16,574 --> 00:14:21,662
Ainsi dans une hiérarchie de classe,
où il existe des super-classes virtuelles,

281
00:14:21,662 --> 00:14:24,069
le soin d’initialiser ces 
super-classes virtuelles

282
00:14:24,069 --> 00:14:26,926
incombe a toute les sous-classes 
que l’on veut créer,

283
00:14:26,926 --> 00:14:29,375
les constructeurs des 
super-classes virtuelles

284
00:14:29,375 --> 00:14:31,397
sont invoqués en tout premier,

285
00:14:31,397 --> 00:14:34,605
et les appels à ces constructeurs
de super-classes virtuelles dans

286
00:14:34,605 --> 00:14:37,238
les classes intermédiaires
sont ignorés.

287
00:14:37,238 --> 00:14:39,578
Pour ce qui est des sous-classes 
non virtuelles, elles sont ensuite

288
00:14:39,578 --> 00:14:41,838
initialisées dans l’ordre de 
déclaration d’héritage,

289
00:14:41,838 --> 00:14:43,557
comme d’habitude.

290
00:14:43,557 --> 00:14:46,199
L’ordre d’appel des 
constructeurs de copies

291
00:14:46,199 --> 00:14:48,148
vérifie aussi ces règles là.

292
00:14:48,148 --> 00:14:50,448
Et comme toujours, 
l’ordre d’appel des destructeurs

293
00:14:50,448 --> 00:14:54,281
est l’inverse de celui 
de l’ordre d’appel des constructeurs.

294
00:14:54,281 --> 00:14:56,689
Voilà ce qui conclue cette 
séquence sur ce sujet

295
00:14:56,689 --> 00:14:59,245
un petit peu délicat des 
classes virtuelles

296
00:14:59,245 --> 00:15:02,028
et donc de l’héritage virtuel.
