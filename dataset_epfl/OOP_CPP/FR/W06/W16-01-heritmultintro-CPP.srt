1
00:00:04,270 --> 00:00:06,450
Cette sequence video a 
pour but de vous présenter

2
00:00:06,450 --> 00:00:08,919
la notion d'héritage multiple en C ++.

3
00:00:08,919 --> 00:00:11,254
Avant de commencer sur ce thème, 
un petit tour d'horizon

4
00:00:11,254 --> 00:00:12,890
des connaissances acquises jusqu'ici.

5
00:00:12,890 --> 00:00:17,441
Vous connaissez maintenant les trois 
concepts centraux de l'orientée objet,

6
00:00:17,441 --> 00:00:21,876
à savoir : encapsulation et abstraction, 
héritage et polymorphisme.

7
00:00:21,876 --> 00:00:24,396
Vous savez qu'encapsuler et abstraire,
c'est regrouper

8
00:00:24,396 --> 00:00:26,951
en une seule et même entité 
des données et des traitements.

9
00:00:26,951 --> 00:00:30,936
C'est également séparer l'interface 
d'utilisation des détails d'implémentation.

10
00:00:30,936 --> 00:00:35,115
Vous savez aussi que l'héritage va permettre
de mettre en place une relation est-un

11
00:00:35,115 --> 00:00:38,574
entre différentes classes d'un programme
et vous savez qu'il s'agit là d'un outil

12
00:00:38,574 --> 00:00:41,683
qui permet de mettre en œuvre
des solutions polymorphiques,

13
00:00:41,683 --> 00:00:43,708
au sens du polymorphisme d'inclusion.

14
00:00:43,708 --> 00:00:46,985
Vous avez appris enfin que le
polymorphisme est un outil très puissant

15
00:00:46,985 --> 00:00:50,050
qui va permettre de faire en sorte
que l'exécution d'un même code

16
00:00:50,050 --> 00:00:52,951
s'adapte automatiquement 
à différents types de données

17
00:00:52,951 --> 00:00:56,113
et vous savez qu'en C++ pour 
qu'une solution polymorphique puisse

18
00:00:56,113 --> 00:00:59,286
être mise en œuvre, 
il y a deux ingrédients nécessaires :

19
00:00:59,286 --> 00:01:03,358
on doit utiliser des méthodes virtuelles 
au travers de références ou de pointeurs.

20
00:01:03,358 --> 00:01:06,696
Et pour parachever ce petit tour d'horizon
de vos connaissances,

21
00:01:06,696 --> 00:01:09,030
mentionnons encore la notion 
de classes abstraites

22
00:01:09,030 --> 00:01:11,612
et de méthodes virtuelles pures 
qui permettent d'affiner

23
00:01:11,612 --> 00:01:14,311
les modèles orientée objet 
de façon significative.

24
00:01:14,311 --> 00:01:18,658
Passons maintenant au thème de cette 
séquence, l'héritage multiple qui est

25
00:01:18,658 --> 00:01:22,404
en fait une continuation d'un thème
déjà connu, celui de l'héritage simple.

26
00:01:22,404 --> 00:01:25,386
Jusqu'à maintenant, 
toutes les relations d'héritage

27
00:01:25,386 --> 00:01:28,438
que nous avons étudiées etaient 
des relations d'héritage simple

28
00:01:28,438 --> 00:01:32,956
dans le sens où chaque sous-classe n'avait
qu'une seule classe parente directe.

29
00:01:32,956 --> 00:01:35,561
L'héritage multiple est simplement le fait

30
00:01:35,561 --> 00:01:38,863
qu'une sous-classe puisse avoir 
plusieurs super-classes directes.

31
00:01:38,863 --> 00:01:43,705
L'héritage multiple est autorisé en C++ :
on a le droit de faire en sorte

32
00:01:43,705 --> 00:01:47,304
qu'une sous-classe hérite de 
plusieurs classes parentes directement

33
00:01:47,304 --> 00:01:50,233
mais c'est une notion qui n'est pas 
offerte par tous les langages

34
00:01:50,233 --> 00:01:51,997
de programmation orientée objet.

35
00:01:51,997 --> 00:01:54,869
Les notions de bases relatives à 
l'héritage multiple sont tout à fait

36
00:01:54,869 --> 00:01:57,858
analogues à celles vues dans le cadre
de l'héritage simple, à savoir

37
00:01:57,858 --> 00:02:02,610
qu'une sous-classe va hériter de
ces super-classes, de tous leurs attributs

38
00:02:02,610 --> 00:02:06,495
et méthodes, hormis les constructeurs
-destructeurs et de leur type.

39
00:02:07,125 --> 00:02:09,851
Voyons sur un exemple concret
dans quel contexte

40
00:02:09,851 --> 00:02:11,861
l'héritage multiple peut être utile.

41
00:02:11,861 --> 00:02:15,703
Pour ne pas trop changer nos habitudes,
prenons encore un exemple de jeu,

42
00:02:15,703 --> 00:02:19,696
un jeu où cette fois différentes entités 
entrent en scène comme, par exemple,

43
00:02:19,696 --> 00:02:23,250
une « Balle », des « Raquettes », 
un « Filet », un « Joueur ».

44
00:02:23,250 --> 00:02:27,199
Chaque entité du jeu sera dotée 
d'une méthode évolue qui va permettre

45
00:02:27,199 --> 00:02:31,110
de gérer l'évolution de l'entité 
en question dans le jeu.

46
00:02:31,110 --> 00:02:33,777
Comme première ébauche de conception, 
on peut donc imaginer

47
00:02:33,777 --> 00:02:37,226
une super-classe « Entite » qui aura 
pour méthode principale

48
00:02:37,226 --> 00:02:41,571
une méthode évolue, très probablement
polymorphique et redéfinie dans

49
00:02:41,571 --> 00:02:44,805
les sous-classes mais ce n'est pas 
notre propos ici et des sous-classes

50
00:02:44,805 --> 00:02:48,199
représentant les différentes entités 
concrètes de notre jeu comme

51
00:02:48,199 --> 00:02:52,116
la classe « Balle », la classe « Raquette », 
la classe « Filet » et la classe « Joueur ».

52
00:02:52,116 --> 00:02:55,807
Imaginons maintenant qu'une analyse 
un peu plus fine des besoins du jeu

53
00:02:55,807 --> 00:02:58,845
nous fasse réaliser que 
toutes les entités ne se comportent pas

54
00:02:58,845 --> 00:03:01,512
exactement de la même façon, 
n'ont pas les même besoins.

55
00:03:01,512 --> 00:03:06,557
Par exemple, certaines entités doivent 
pouvoir être affichées, dessinées,

56
00:03:06,557 --> 00:03:10,531
avoir une représentation graphique comme,
par exemple, la « Balle », la « Raquette »,

57
00:03:10,531 --> 00:03:13,845
le « Filet » et d'autres non : on imagine 
par exemple que l'on ne voit pas

58
00:03:13,845 --> 00:03:15,288
le « Joueur » dans ce jeu.

59
00:03:15,288 --> 00:03:18,465
On peut imaginer aussi que certaines
entités doivent être interactives,

60
00:03:18,465 --> 00:03:22,278
c'est-à-dire contrôlables avec la souris 
ou le clavier comme, par exemple, la « Balle »

61
00:03:22,278 --> 00:03:25,028
ou la « Raquette » et d'autres non : 
on ne peut pas contrôler le « Joueur »

62
00:03:25,028 --> 00:03:26,770
ni le « Filet », par exemple.

63
00:03:26,770 --> 00:03:29,419
Et on se pose la question de 
comment organiser tout ceci.

64
00:03:29,419 --> 00:03:33,220
La hiérarchie de classe que vous avez 
sous les yeux ici répond précisément

65
00:03:33,220 --> 00:03:36,451
aux besoins que nous venons d'énoncer.
Ici, une super-classe « Interactive »

66
00:03:36,451 --> 00:03:40,152
a été introduite qui va répondre 
aux besoins spécifiques

67
00:03:40,152 --> 00:03:44,054
des différentes entités qui ont besoin 
d'être gérées par le biais

68
00:03:44,054 --> 00:03:47,005
d'une interaction comme, par exemple, 
la balle ou la raquette.

69
00:03:47,005 --> 00:03:50,348
Cette super-classe va fournir les méthodes
qui permettent justement

70
00:03:50,348 --> 00:03:52,451
de gérer cette interaction.

71
00:03:52,451 --> 00:03:55,808
De façon analogue, la super-classe 
« Graphique » va permettre de définir

72
00:03:55,808 --> 00:03:59,203
toutes les entités que l'on veut 
dessinables dans le jeu, à savoir

73
00:03:59,203 --> 00:04:01,947
la raquette, la balle ou encore le filet.

74
00:04:01,947 --> 00:04:05,023
C'est cette super-classe qui va
fournir les élements nécessaires

75
00:04:05,023 --> 00:04:07,629
à la représentation 
graphique de ces entités.

76
00:04:07,629 --> 00:04:10,871
Ces deux super-classes permettent 
donc de voir certaines entités,

77
00:04:10,871 --> 00:04:12,871
mais pas toutes, 
comme des objets interactifs

78
00:04:12,871 --> 00:04:15,424
et d'autres comme 
des objets graphiques.

79
00:04:15,424 --> 00:04:20,557
Notez qu'il n'aurait pas été correct 
de placer les méthodes de dessin

80
00:04:23,327 --> 00:04:29,505
et de gestion de l'interaction 
dans la super-classe « Entite ».

81
00:04:29,505 --> 00:04:32,850
Pourquoi, à votre avis ?

82
00:04:32,850 --> 00:04:37,099
En effet, placer ces méthodes dans la 
classe « Entite » forcerait certaines classes

83
00:04:37,099 --> 00:04:42,180
à avoir une méthode de dessin 
alors qu'on les veut non-dessinables

84
00:04:42,180 --> 00:04:46,795
et forcerait certaines classes 
à être gérables interactivement

85
00:04:46,795 --> 00:04:48,877
alors qu'on ne le souhaite pas.

86
00:04:48,877 --> 00:04:51,975
L'héritage multiple nous permet 
d'avoir un meilleur modèle

87
00:04:51,975 --> 00:04:55,802
de ce que nous souhaitons réaliser 
et il est possible en C++.

88
00:04:55,802 --> 00:04:58,705
On peut imaginer bien 
d'autres situations nécessitant

89
00:04:58,705 --> 00:05:00,626
le recours à l'héritage multiple.

90
00:05:00,626 --> 00:05:03,621
Un exemple zoologique ici : 
vous êtes chargé de modéliser

91
00:05:03,621 --> 00:05:06,950
les animaux d'un zoo et 
il se trouve que parmi ces animaux

92
00:05:06,950 --> 00:05:11,451
vous avez des « Ovovivipares » qui 
héritent de caractéristiques des « Ovipares »

93
00:05:11,451 --> 00:05:13,127
et des « Vivipares ».

94
00:05:13,127 --> 00:05:16,289
L'héritage multiple vous permettrait 
de modéliser de façon claire

95
00:05:16,289 --> 00:05:18,250
les différents habitants de votre zoo.

96
00:05:18,250 --> 00:05:21,657
Les « Ovipares » pondent des œufs 
et c'est l'œuf qui nourrit l'embryon

97
00:05:21,657 --> 00:05:25,952
jusqu'à sa naissance ; les « Vivipares » 
donnent naissance à des bébés vivants ;

98
00:05:25,952 --> 00:05:30,215
les « Ovovivipares » comme les hippocampes
par exemple héritent bel et bien

99
00:05:30,215 --> 00:05:33,381
de caractéristiques 
et des « Ovipares » et des « Vivipares »,

100
00:05:33,381 --> 00:05:37,173
leurs embryons sont entièrement nourris 
par un œuf comme pour le cas

101
00:05:37,173 --> 00:05:41,012
des « Ovipares » mais ils naissent vivants 
comme pour le cas des « Vivipares ».

102
00:05:41,012 --> 00:05:45,130
Et enfin, un exemple un peu plus 
informatique : sachez que les différentes

103
00:05:45,130 --> 00:05:48,213
classes en charge, en C++ ,
de gérer les entrées-sorties,

104
00:05:48,213 --> 00:05:50,127
et dont celles-ci doivent 
vous dire quelque chose,

105
00:05:50,127 --> 00:05:52,623
sont organisées 
grâce à l'héritage multiple.

106
00:05:52,623 --> 00:05:55,990
En particulier, cette organisation 
des classes présente la fameuse

107
00:05:55,990 --> 00:05:59,703
architecture en diamant sur laquelle 
nous aurons l'occasion de revenir

108
00:05:59,703 --> 00:06:01,496
un peu plus tard.

109
00:06:02,336 --> 00:06:05,262
Passons maintenant concrètement 
à l'utilisation de l'héritage multiple

110
00:06:05,262 --> 00:06:09,719
en C++ : si l'on veut déclarer en C++ 
qu'une sous-classe a plusieurs

111
00:06:09,719 --> 00:06:13,847
super-classes, il suffit au moment 
de la déclaration de la classe,

112
00:06:13,847 --> 00:06:19,301
d'indiquer l'ensemble des super-classes 
dont elle hérite, séparé par des virgules.

113
00:06:19,301 --> 00:06:23,319
Donc ici, pour chacune des super-classes
dont hérite la sous-classe,

114
00:06:23,319 --> 00:06:26,419
il faudra indiquer 
« public "nom de la super-classe" »

115
00:06:26,419 --> 00:06:29,527
et on sépare les différentes super-classes
par des virgules.

116
00:06:29,527 --> 00:06:33,825
Concrètement donc, ceci se lit 
« la classe « Ovovivipare » hérite

117
00:06:33,825 --> 00:06:37,552
de la super-classe « Ovipare »
et de la super-classe « Vivipare » ».

118
00:06:37,552 --> 00:06:41,268
La classe contient ensuite un contenu
tout à fait analogue à toutes les classes

119
00:06:41,268 --> 00:06:44,344
que vous avez écrites ou lues jusqu'ici.

120
00:06:44,344 --> 00:06:47,078
Notez pour finir un point à ne pas 
négliger : l'ordre de déclaration

121
00:06:47,078 --> 00:06:51,019
des liens d'héritage 
a son importance, il joue en effet

122
00:06:51,019 --> 00:06:54,976
un rôle dans la façon de construire
ou détruire une instance bénéficiant

123
00:06:54,976 --> 00:06:56,979
de l'héritage multiple.

124
00:06:56,979 --> 00:06:59,028
Et c'est là le prochain point 
qui va nous occuper :

125
00:06:59,028 --> 00:07:01,762
comment fait-on de la construction ou 
destruction d'objets dans le cadre

126
00:07:01,762 --> 00:07:03,302
de l'héritage multiple

127
00:07:03,302 --> 00:07:07,071
Voyons donc ce que l'héritage multiple 
implique sur les constructeurs.

128
00:07:07,071 --> 00:07:09,533
Il n'y a en fait pas grand chose 
de nouveau, simplement un point sur

129
00:07:09,533 --> 00:07:12,049
lequel il faut faire un peu attention.

130
00:07:12,049 --> 00:07:16,797
Donc, comme pour l'héritage simple,
l'initialisation des attributs hérités

131
00:07:16,797 --> 00:07:20,633
des super-classes doit se faire 
dans la « liste d'initialisation »

132
00:07:20,633 --> 00:07:24,010
du constructeur de la sous-classe 
en appelant tous les constructeurs

133
00:07:24,010 --> 00:07:26,464
des super-classes dont on hérite.

134
00:07:26,464 --> 00:07:30,972
La syntaxe générale est donc la même 
que pour l'héritage simple.

135
00:07:30,972 --> 00:07:35,316
Dans la section « liste d'initialisation »
du constructeur de la sous-classe,

136
00:07:35,316 --> 00:07:38,977
on appelle comme cela les différents 
constructeurs des super-classes

137
00:07:38,977 --> 00:07:42,832
dont on hérite, séparés par des virgules 
et, évidemment,

138
00:07:42,832 --> 00:07:45,980
si une des super-classes admet 
un constructeur par défaut,

139
00:07:45,980 --> 00:07:50,470
il n'est pas nécessaire de l'invoquer 
explicitement et, comme toujours,

140
00:07:50,470 --> 00:07:53,390
dans un premier temps, dans une première 
approche, où l'on apprend

141
00:07:53,390 --> 00:07:57,314
les constructeurs, je vous recommande 
de le faire pour vous souvenir

142
00:07:57,314 --> 00:08:00,634
qu'il y a bien, en effet, un appel 
au constructeur par défaut, même

143
00:08:00,634 --> 00:08:02,659
si ce n'est pas nécessaire.

144
00:08:02,659 --> 00:08:06,497
Mais, attention, et c'est là la petite 
subtilité avec l'héritage multiple :

145
00:08:06,497 --> 00:08:11,258
l'ordre d'appel des constructeurs 
n'est pas celui de l'écriture

146
00:08:11,258 --> 00:08:14,891
des constructeurs dans la section 
« liste d'initialisation » du constructeur

147
00:08:14,891 --> 00:08:18,775
de la sous-classe mais les constructeurs 
sont appelés suivant l'ordre

148
00:08:18,775 --> 00:08:21,974
de déclaration de l'héritage.

149
00:08:21,974 --> 00:08:25,507
Et, comme toujours, l'ordre d'appel 
des destructeurs se fait

150
00:08:25,507 --> 00:08:28,217
dans l'ordre inverse 
de l'appel des contructeurs.

151
00:08:28,217 --> 00:08:30,503
Illustrons tout ceci 
sur un exemple concret :

152
00:08:30,503 --> 00:08:34,969
reprenons donc notre exemple 
des « Ovovivipares » qui héritent à la fois

153
00:08:34,969 --> 00:08:39,561
d'« Ovipares » et de « Vivipares ». 
Supposons que donc les « Ovipares »

154
00:08:39,561 --> 00:08:44,261
(leur constructeur) pour se construire 
aient besoin typiquement

155
00:08:44,261 --> 00:08:47,356
d'un nombre d'œufs et 
que les « Vivipares » ont un constructeur

156
00:08:47,356 --> 00:08:52,222
qui nécessite une durée de gestation 
et les « Ovovivipares » on va leur

157
00:08:52,222 --> 00:08:55,833
ajouter, disons, un attribut ici 
qui serait un booléen pour indiquer

158
00:08:55,833 --> 00:08:58,346
si l'espèce est rare ou non.

159
00:08:58,346 --> 00:09:03,750
Donc, on passerait en troisième paramètre 
ici un argument « rarete » qui permettrait

160
00:09:03,750 --> 00:09:08,078
d'initialiser donc le fait 
que l'espèce est rare ou non.

161
00:09:08,078 --> 00:09:12,229
Donc, typiquement, le prototype 
du constructeur d'« Ovovivipare » serait

162
00:09:12,229 --> 00:09:14,904
d'avoir un paramètre 
pour le constructeur d'« Ovipare »,

163
00:09:14,904 --> 00:09:19,059
un paramètre pour le constructeur 
de « Vivipare » et un paramètre pour pouvoir

164
00:09:19,059 --> 00:09:24,562
initialiser son propre attribut 
et puis on lui donne une valeur par défaut

165
00:09:24,562 --> 00:09:27,063
qui est un « false ».

166
00:09:27,063 --> 00:09:32,401
Le constructeur d'« Ovovivipare » a donc 
la charge d'appeler les constructeurs

167
00:09:32,401 --> 00:09:35,546
des classes dont il hérite. 
Donc, premier point, il appellerait

168
00:09:35,546 --> 00:09:39,724
dans sa section « liste d'initialisation »
les constructeurs des classes dont

169
00:09:39,724 --> 00:09:42,975
il hérite, donc par exemple 
le contructeur de la classe « Vivipare »

170
00:09:42,975 --> 00:09:46,983
auquel il passe le paramètre attendu, 
le constructeur de la classe « Ovipare »

171
00:09:46,983 --> 00:09:51,148
auquel il passe le paramètre 
correspondant, séparés comme d'habitude

172
00:09:51,148 --> 00:09:56,047
par des virgules, et puis il initialise 
donc son attribut avec le paramètre

173
00:09:56,047 --> 00:10:00,110
qu'il a reçu ici, en troisième argument.

174
00:10:00,110 --> 00:10:04,280
Simplement ici, deuxième point, 
il faut faire attention : même si

175
00:10:04,280 --> 00:10:09,228
l'on écrit le constructeur d'« Ovovivipare »
comme on a l'impression, appelant

176
00:10:09,228 --> 00:10:12,736
d'abord le constructeur de « Vivipares » 
puis le constructeur d'« Ovipares »,

177
00:10:12,736 --> 00:10:16,813
en fait lorsqu'on envoie appeler 
le constructeur d'« Ovovivipare »,

178
00:10:16,813 --> 00:10:21,062
le premier constructeur qui va être appelé
c'est le constructeur d'« Ovipare ».

179
00:10:21,062 --> 00:10:24,427
Ce qui compte dans l'ordre d'appel 
des constructeurs des sous-classes

180
00:10:24,427 --> 00:10:27,979
dans le cas d'héritage multiple, 
c'est bien la déclaration d'héritage

181
00:10:27,979 --> 00:10:32,207
et non pas l'ordre dans lequel 
on les a déclarés dans la section liste

182
00:10:32,207 --> 00:10:32,506
d'initialisation du constructeur 
de la sous-classe.

183
00:10:32,506 --> 00:10:38,616
Donc, ici, quoi qu'on ait écrit, 
c'est d'abord le constructeur d'« Ovipare »

184
00:10:38,616 --> 00:10:41,898
qui va être appelé et ensuite 
le constructeur de « Vivipare »

185
00:10:41,898 --> 00:10:43,220
qui va être appelé.

186
00:10:43,220 --> 00:10:45,853
D'ailleurs, la plupart des compilateurs 
modernes maintenant indiquent

187
00:10:45,853 --> 00:10:50,024
ici une erreur sur l'ordre d'appel 
des constructeurs et signalent

188
00:10:50,024 --> 00:10:52,684
avec un warning, plutôt qu'une erreur,
donc un message d'alerte

189
00:10:52,684 --> 00:10:56,087
qui vous avertit que, en fait, l'ordre 
d'appel des constructeurs

190
00:10:56,087 --> 00:11:00,149
sera dans un ordre différent 
que celui que vous pensez avoir écrit ici.

191
00:11:00,149 --> 00:11:04,872
Voilà donc, c'est tout ce qu'il y avait 
à dire sur l'héritage multiple

192
00:11:04,872 --> 00:11:07,238
et l'ordre d'appel des constructeurs.

193
00:11:07,238 --> 00:11:10,506
Je rappelle aussi que les destructeurs 
donc sont toujours appelés

194
00:11:10,506 --> 00:11:14,506
dans l'ordre inverse 
de celui des constructeurs.
