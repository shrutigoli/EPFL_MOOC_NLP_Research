1
00:00:04,336 --> 00:00:05,781
Dans la séquence vidéo précédente,

2
00:00:05,781 --> 00:00:07,589
nous avons présenté 
d'un point de vue très général

3
00:00:07,589 --> 00:00:10,128
ce qu'est le concept 
de surcharge des opérateurs,

4
00:00:10,128 --> 00:00:13,186
et nous avons vu qu'il existe
la surcharge interne

5
00:00:13,186 --> 00:00:14,876
et de la surcharge externe.

6
00:00:14,953 --> 00:00:16,773
Commençons dans 
cette séquence vidéo-ci

7
00:00:16,777 --> 00:00:19,957
par regarder en détail 
ce qu'est la surcharge externe.

8
00:00:20,280 --> 00:00:23,503
La surcharge externe consiste
à définir les opérateurs

9
00:00:23,503 --> 00:00:24,797
comme des fonctions.

10
00:00:24,797 --> 00:00:29,379
Par exemple, cette fonction <i>operator+</i>
qui prend ici 2 nombres complexes

11
00:00:29,379 --> 00:00:33,119
pour ajouter l'opérateur d'addition <i>+</i>
à la classe des nombres complexes.

12
00:00:33,119 --> 00:00:35,058
Regardons cet exemple en détail,

13
00:00:35,058 --> 00:00:37,934
supposons que l'on ait défini
une classe Complexe

14
00:00:37,934 --> 00:00:41,694
et que l'on ait ici déclaré 3 instances,
<i>z1</i>, <i>z2</i> et <i>z3</i> de cette classe,

15
00:00:41,694 --> 00:00:45,986
et que l'on souhaite faire l'addition
" z3 = z1 + z2 ".

16
00:00:45,990 --> 00:00:47,954
Dans le cas de surcharge externe,

17
00:00:47,954 --> 00:00:49,828
c'est-à dire où l'opérateur 
est une fonction,

18
00:00:49,828 --> 00:00:54,972
cela correspond, je vous rappelle,
à l'appel " z3 = operator+(...)"

19
00:00:55,832 --> 00:01:00,933
avec <i>z1</i> et <i>z2</i> comme argument.

20
00:01:00,933 --> 00:01:06,053
D'où l'on déduit que le prototype
de la fonction <i>operator+</i>

21
00:01:06,056 --> 00:01:11,016
va prendre deux arguments de type Complexe

22
00:01:11,766 --> 00:01:15,556
et va retourner ici un Complexe.

23
00:01:16,329 --> 00:01:21,739
Voilà donc un prototype possible
pour cette surcharge de l'<i>operator+</i>.

24
00:01:21,746 --> 00:01:24,565
On peut vouloir optimiser cet appel,

25
00:01:24,565 --> 00:01:28,705
et ici éviter les copies 
d'un passage par valeur,

26
00:01:28,712 --> 00:01:33,572
et faire un passage 
par référence constante,

27
00:01:34,104 --> 00:01:35,744
et on peut aussi vouloir,

28
00:01:35,744 --> 00:01:39,112
cela sera expliqué dans 
la troisième séquence vidéo

29
00:01:39,112 --> 00:01:41,332
sur la surcharge des opérateurs,

30
00:01:41,340 --> 00:01:45,519
ici, rajouter un type de retour
qui serait <i>const Complexe</i>.

31
00:01:45,519 --> 00:01:49,419
Pour l'instant, on le prend comme acquis
et cela sera expliqué

32
00:01:49,426 --> 00:01:52,742
dans la dernière vidéo 
sur la surcharge des opérateurs.

33
00:01:52,742 --> 00:01:56,352
Voilà donc un autre prototype,
un deuxième prototype possible

34
00:01:56,352 --> 00:02:00,576
pour cet <i>operator+</i> définit 
en surcharge externe.

35
00:02:00,762 --> 00:02:04,722
Une troisième solution,
encore plus optimale en C++ 2011,

36
00:02:04,734 --> 00:02:07,919
et qui vous sera aussi expliquée
dans la troisième séquence vidéo

37
00:02:07,919 --> 00:02:09,462
sur la surcharge des opérateurs,

38
00:02:09,462 --> 00:02:14,582
serait d'avoir le prototype suivant :
<i>const Complexe</i> comme valeur de retour,

39
00:02:14,897 --> 00:02:19,407
<i>operator+</i>, un passage ici par valeur,

40
00:02:20,539 --> 00:02:25,843
et un passage par référence constante
pour le deuxième argument.

41
00:02:25,843 --> 00:02:28,615
Même si le passage par valeur, 
ici, peut sembler

42
00:02:28,615 --> 00:02:31,245
un peu sous-optimal et contre-intuitif,

43
00:02:31,245 --> 00:02:35,335
les spécificités de C++ 2011, 
en particulier la notion de déplacement

44
00:02:35,335 --> 00:02:36,355
au lieu de copie,

45
00:02:36,372 --> 00:02:38,453
qui sort largement du cadre de ce cours,

46
00:02:38,453 --> 00:02:40,823
en font finalement une meilleur option.

47
00:02:40,853 --> 00:02:44,533
Ce qui nous donne donc le code suivant
pour regarder maintenant les détails.

48
00:02:44,653 --> 00:02:46,883
On aurait donc ici la classe <i>Complexe</i>

49
00:02:47,150 --> 00:02:52,616
qui définirait un complexe,
comme par exemple ici 2 <i>double</i>,

50
00:02:52,616 --> 00:02:55,126
et puis qui aurait un constructeur

51
00:02:55,141 --> 00:02:59,545
qui permet d'initialiser 
ses 2 attributs <i>x</i> et <i>y</i>,

52
00:02:59,545 --> 00:03:02,205
ici en recevant 2 valeurs,

53
00:03:02,339 --> 00:03:06,759
par exemple on pourrait construire
un complexe comme ceci.

54
00:03:08,896 --> 00:03:13,776
Par exemple en passant 
la valeur 1 et la valeur 2 pour <i>y</i>,

55
00:03:13,873 --> 00:03:17,943
ça, c'est le constructeur que l'on a ici.

56
00:03:17,943 --> 00:03:20,599
Puis on aurait un tas 
de méthodes nécessaires

57
00:03:20,599 --> 00:03:22,458
pour manipuler les nombres complexes,

58
00:03:22,458 --> 00:03:27,130
comme par exemple récupérer la valeur de <i>x</i>
et récupérer la valeur de <i>y</i>.

59
00:03:27,130 --> 00:03:31,470
Et donc notre surcharge externe 
de l'<i>operator+</i>, ici,

60
00:03:31,470 --> 00:03:34,900
où l'on retrouve le prototype 
que je vous ai écrit précédemment,

61
00:03:34,934 --> 00:03:37,194
s'écrirait alors de la façon suivante,

62
00:03:37,238 --> 00:03:41,143
il faut bien sûr quand on écrit 
" z1 + z2 " comme ceci,

63
00:03:41,143 --> 00:03:44,806
définir un nouveau complexe <i>z1+z2</i>,

64
00:03:44,806 --> 00:03:48,634
le résultat de l'addition de <i>z1</i> et <i>z2</i>
est une nouvelle valeur

65
00:03:48,634 --> 00:03:50,464
qui n'est ni <i>z1</i>, ni <i>z2</i>.

66
00:03:50,464 --> 00:03:53,122
On va donc ici définir 
cette nouvelle valeur,

67
00:03:53,490 --> 00:03:59,739
que l'on va construire en utilisant
le constructeur à 2 paramètres.

68
00:03:59,739 --> 00:04:03,025
Il se trouve que la formule 
pour l'addition des nombres complexes

69
00:04:03,025 --> 00:04:07,095
se fait en récupérant <i>x</i> de <i>z1</i>,
et <i>x</i> de <i>z2</i>,

70
00:04:07,095 --> 00:04:09,206
et en faisant l'addition de ces 2 <i>x</i>.

71
00:04:09,206 --> 00:04:12,616
Et sur la composante <i>y</i>,
on récupère les 2 valeurs <i>y</i>,

72
00:04:12,616 --> 00:04:14,376
et on fait leur addition.

73
00:04:14,376 --> 00:04:16,536
Donc on construit bien ici
un nombre complexe

74
00:04:16,536 --> 00:04:20,210
qui correspond à la définition
de l'addition de <i>z1</i> et <i>z2</i>,

75
00:04:20,210 --> 00:04:22,440
et on retourne ce nombre complexe

76
00:04:22,451 --> 00:04:27,391
pour valeur de retour de l'<i>operator+</i>.

77
00:04:28,447 --> 00:04:31,316
Pour finir, les plus avancés d'entre vous
auront bien sûr noté,

78
00:04:31,316 --> 00:04:32,428
mais c'est ici un détail,

79
00:04:32,428 --> 00:04:35,967
que l'on peut regrouper ces 2 lignes

80
00:04:35,967 --> 00:04:41,807
et par exemple écrire simplement 
" return Complexe(...) ", ici sans donner de nom,

81
00:04:41,820 --> 00:04:45,580
" return Complexe(...) " avec 
un <i>Complexe</i> anonyme,

82
00:04:45,580 --> 00:04:47,700
et ici appel direct au constructeur,

83
00:04:47,715 --> 00:04:51,195
mais encore une fois, ceci est avancé,
et n'apporte pas grand chose.

84
00:04:52,532 --> 00:04:55,234
Nous avons vu qu'il existe 
2 surcharges, interne et externe,

85
00:04:55,234 --> 00:04:57,022
et que dans la plupart des cas
on peut choisir

86
00:04:57,022 --> 00:04:58,942
entre surcharge externe 
et surcharge interne.

87
00:04:58,942 --> 00:05:01,346
Mais il y a des cas où 
on ne peut pas choisir

88
00:05:01,346 --> 00:05:05,116
et où il est absolument nécessaire 
d'utiliser la surcharge externe.

89
00:05:05,511 --> 00:05:07,090
Regardons plus en détail ces cas,

90
00:05:07,090 --> 00:05:10,540
le premier cas est lorsque l'on mélange
différents types,

91
00:05:10,540 --> 00:05:12,699
par exemple ici, si l'on veut
faire la multiplication

92
00:05:12,699 --> 00:05:15,439
d'un nombre <i>Complexe</i> avec un <i>double</i>.

93
00:05:15,566 --> 00:05:19,900
Par exemple, on a ici un <i>double</i> " x " 
et un nombre <i>Complexe</i> " z1 ",

94
00:05:19,900 --> 00:05:24,785
et on veut récupérer le résultat
de <i>x</i> fois <i>z1</i> dans <i>z2</i>.

95
00:05:24,785 --> 00:05:28,455
Donc <i>x</i> de type <i>double</i>,
<i>z1</i> de type <i>Complexe</i>,

96
00:05:28,504 --> 00:05:30,764
nous donnerait 
comme réécriture en principe,

97
00:05:30,766 --> 00:05:37,056
soit " z2 = x.operator* " avec 
une surcharge interne appel d'une méthode,

98
00:05:37,139 --> 00:05:42,229
soit appel d'une fonction
" z2 = operator* " de " x, z1 ".

99
00:05:42,357 --> 00:05:46,330
Mais il est clair que la première ligne 
n'a absolument pas de sens,

100
00:05:46,330 --> 00:05:50,460
puisqu'ici <i>x</i> n'est pas 
une instance de classe,

101
00:05:50,479 --> 00:05:53,227
mais est ce qu'on appelle
un type de base, et de type <i>double</i>,

102
00:05:53,227 --> 00:05:57,112
<i>double</i> n'est pas une classe,
donc il n'y a pas de méthode dans <i>double</i>,

103
00:05:57,112 --> 00:05:58,942
et donc cette solution est impossible.

104
00:05:58,948 --> 00:06:02,545
Là on est obligés d'utiliser
ce qu'on appelle la surcharge externe,

105
00:06:02,545 --> 00:06:04,365
d'utiliser des fonctions.

106
00:06:04,376 --> 00:06:09,006
De même, dans le cas où 
on voudrait afficher un complexe,

107
00:06:09,017 --> 00:06:10,777
par exemple faire
" cout << z1 "

108
00:06:10,777 --> 00:06:14,224
en utilisant la surcharge de l'opérateur 
d'affichage inférieur-inférieur (<<).

109
00:06:14,224 --> 00:06:16,973
On aurait donc 2 écritures possibles,

110
00:06:16,973 --> 00:06:22,443
soit la méthode <i>operator</i> " << "
de la classe dont <i>cout</i> est une instance,

111
00:06:22,449 --> 00:06:24,465
la classe <i>ostream</i>,

112
00:06:24,465 --> 00:06:30,004
et donc cette écriture ici, avec un appel 
de la méthode de cette classe <i>ostream</i>,

113
00:06:30,004 --> 00:06:34,884
ou alors la fonction qui prend ici
les 2 paramètres <i>cout</i> et <i>z1</i>.

114
00:06:34,968 --> 00:06:38,180
Mais ce qui nous intéresse
est de surcharger la classe <i>Complexe</i>,

115
00:06:38,180 --> 00:06:41,541
certainement pas d'aller toucher
à la classe <i>ostream</i>

116
00:06:41,541 --> 00:06:43,001
dont <i>cout</i> est une instance,

117
00:06:43,017 --> 00:06:44,597
et donc dans ce cas aussi,

118
00:06:44,602 --> 00:06:48,892
on ne va pas du tout utiliser
la surcharge interne à la classe <i>ostream</i>,

119
00:06:48,899 --> 00:06:52,009
mais bien préférer la surcharge externe.

120
00:06:52,734 --> 00:06:56,786
Examinons ces 2 exemples en détail et 
commençons par la multiplication externe,

121
00:06:56,786 --> 00:06:59,596
où je vous rappelle,
on a déclaré un <i>double</i><i>x</i> ici,

122
00:06:59,598 --> 00:07:02,456
on a 2 <i>Complexe</i>, <i>z1</i> et <i>z2</i>,

123
00:07:02,456 --> 00:07:08,156
et on souhaite faire la multiplication
de <i>x</i> par <i>z1</i>

124
00:07:08,157 --> 00:07:10,247
et mettre le résultat dans <i>z2</i>.

125
00:07:10,250 --> 00:07:13,330
L'appel équivalent serait que

126
00:07:13,330 --> 00:07:20,970
" z2=operator*(x,z1); ",

127
00:07:21,283 --> 00:07:24,123
ce qui nous donne donc comme prototype

128
00:07:24,245 --> 00:07:28,598
que la fonction retourne 
un nombre <i>Complexe</i>,

129
00:07:30,648 --> 00:07:32,482
pour les mêmes raisons
qui seront expliquées plus tard,

130
00:07:32,482 --> 00:07:34,042
on préfèrera qu'il soit <i>const</i>,

131
00:07:34,048 --> 00:07:38,581
on aura <i>operator</i>*, et puis

132
00:07:38,581 --> 00:07:41,791
ensuite on prend un <i>double</i> et un <i>Complexe</i>

133
00:07:43,298 --> 00:07:48,618
que pour des raisons d'optimisation,
on passera par référence constante.

134
00:07:48,928 --> 00:07:52,348
On arrive donc au prototype suivant.

135
00:07:53,354 --> 00:07:55,827
Et pour la définition, on pourrait

136
00:07:55,827 --> 00:08:00,227
soit l'écrire explicitement,
écrire toutes les opérations

137
00:08:00,240 --> 00:08:05,118
qui font la multiplication de ce <i>double</i>,
ici <i>a</i>, par ce <i>Complexe</i>, <i>z</i>.

138
00:08:05,118 --> 00:08:08,946
Soit, si on suppose 
qu'il existe en interne,

139
00:08:08,946 --> 00:08:10,935
et cela est possible 
pour les nombres complexes,

140
00:08:10,935 --> 00:08:12,868
mais pas forcément possible 
pour toutes les classes,

141
00:08:12,868 --> 00:08:14,363
mais lorsque c'est possible,

142
00:08:14,363 --> 00:08:16,098
qu'il existe en interne

143
00:08:16,098 --> 00:08:22,407
(notez bien ici qu'on a changé l'ordre
et qu'on a commencé par multiplier par <i>z</i>),

144
00:08:22,407 --> 00:08:25,893
donc qu'il existe ici quelque chose

145
00:08:25,893 --> 00:08:28,903
qui est capable de faire 
<i>Complexe</i> fois <i>double</i>,

146
00:08:28,923 --> 00:08:34,833
c'est-à-dire soit une surcharge interne

147
00:08:34,838 --> 00:08:37,028
dans la classe Complexe,

148
00:08:38,671 --> 00:08:40,681
qui prendrait un <i>double</i>,

149
00:08:42,087 --> 00:08:47,547
soit que l'on ait déjà écrit 
en surcharge externe

150
00:08:49,547 --> 00:08:55,007
le produit par un <i>Complexe</i> d'abord,
et par un <i>double</i> ensuite,

151
00:08:55,377 --> 00:08:57,467
peu importe ici la solution choisie,

152
00:08:57,471 --> 00:09:00,121
mais ce qui compte
c'est d'écrire

153
00:09:00,125 --> 00:09:04,467
que le fait de faire <i>a</i> fois <i>z</i>,

154
00:09:04,467 --> 00:09:09,324
est la même chose mathématiquement
que de faire <i>z</i> fois <i>a</i>,

155
00:09:09,324 --> 00:09:11,381
et donc ne surtout pas, dans ce cas,

156
00:09:11,381 --> 00:09:13,141
lorsqu'on a ce genre d'égalité,

157
00:09:13,141 --> 00:09:18,692
réécrire 2 fois le code, mais 
utiliser du code que l'on a déjà écrit.

158
00:09:19,983 --> 00:09:22,020
Pour le cas de l'opérateur d'affichage,

159
00:09:22,020 --> 00:09:25,541
si on veut par exemple pouvoir faire
" cout << z1 ",

160
00:09:25,541 --> 00:09:27,941
où bien sûr ici <i>z1</i> est un complexe,

161
00:09:28,015 --> 00:09:29,920
dont l'appel équivalent, 
je vous rappelle,

162
00:09:29,920 --> 00:09:33,220
serait la surcharge externe,
donc la fonction

163
00:09:33,220 --> 00:09:38,107
" operator<< " avec <i>cout</i> et <i>z1</i>
comme argument,

164
00:09:38,107 --> 00:09:40,617
ce qui nous donne donc comme prototype 
pour cette fonction

165
00:09:40,617 --> 00:09:45,159
" operator<< ", ici le type de <i>cout</i>,

166
00:09:45,159 --> 00:09:48,279
et ici un <i>Complexe</i> que l'on passe
encore une fois,

167
00:09:48,282 --> 00:09:50,351
pour des raisons d'optimisation,

168
00:09:50,351 --> 00:09:52,561
par référence constante.

169
00:09:52,586 --> 00:09:57,236
À noter qu'ici, <i>cout</i>, qui est 
une instance de la classe <i>ostream</i>,

170
00:09:57,248 --> 00:09:59,528
est passé par référence.

171
00:09:59,574 --> 00:10:04,244
En effet, l'affichage en question,
" cout << z1 ",

172
00:10:04,261 --> 00:10:06,074
va bien modifier <i>cout</i>,

173
00:10:06,074 --> 00:10:09,914
puisqu'on va écrire des informations
sur <i>cout</i>, on va le modifier,

174
00:10:09,917 --> 00:10:12,409
et donc comme on modifie cet argument,

175
00:10:12,409 --> 00:10:15,789
il faut absolument le passer
par référence.

176
00:10:15,812 --> 00:10:18,640
Le type de retour de cette fonction,
je vous le donne tout de suite,

177
00:10:18,640 --> 00:10:20,542
pour que vous puissiez écrire directement

178
00:10:20,542 --> 00:10:25,022
correctement cet opérateur d'affichage,
c'est aussi un " ostream& ".

179
00:10:25,046 --> 00:10:28,219
La raison de ce type de retour vous sera,
encore une fois, expliquée

180
00:10:28,219 --> 00:10:31,079
dans la dernière vidéo sur
la surcharge des opérateurs,

181
00:10:31,141 --> 00:10:33,291
qui regroupe toutes ces subtilités.

182
00:10:34,194 --> 00:10:35,923
Passons maintenant à la définition

183
00:10:35,923 --> 00:10:38,696
de cet opérateur d'affichage
pour les complexes.

184
00:10:38,696 --> 00:10:42,536
La première solution consiste 
à utiliser des accesseurs,

185
00:10:42,536 --> 00:10:45,185
par exemple <i>get x</i>, <i>get y</i>,

186
00:10:45,185 --> 00:10:48,635
qui retournent les attributs
que l'on souhaite afficher,

187
00:10:48,635 --> 00:10:49,851
ce qui nous donnerait donc :

188
00:10:49,851 --> 00:10:52,781
ici on a reçu comme premier paramètre

189
00:10:52,826 --> 00:10:56,105
le flot de sortie sur lequel 
on veut écrire,

190
00:10:56,105 --> 00:10:59,665
et on utilise donc ce flot pour afficher

191
00:10:59,665 --> 00:11:02,399
ici par exemple une parenthèse,

192
00:11:02,565 --> 00:11:04,675
l'idée est que si j'ai un complexe

193
00:11:04,686 --> 00:11:09,312
dont <i>x</i> vaut 3, et dont <i>y</i> vaut 4,

194
00:11:09,312 --> 00:11:14,922
que l'on écrive " (3,4) ",

195
00:11:14,949 --> 00:11:18,229
c'est le format que l'on veut utiliser
ici pour l'affichage.

196
00:11:18,455 --> 00:11:20,955
Donc on écrit la parenthèse ouvrante,

197
00:11:21,090 --> 00:11:26,407
puis on récupère <i>x</i>, du complexe
que l'on a reçu comme deuxième argument

198
00:11:26,407 --> 00:11:29,332
à cette fonction " operator<< ".

199
00:11:29,332 --> 00:11:31,222
On affiche la virgule,

200
00:11:31,250 --> 00:11:34,574
puis on affiche la valeur récupérée

201
00:11:34,574 --> 00:11:38,264
pour l'attribut <i>y</i> de ce complexe <i>z</i>.

202
00:11:38,264 --> 00:11:41,250
Enfin on termine par 
la parenthèse fermante.

203
00:11:41,397 --> 00:11:46,227
Et on n'oublie pas,
pour les raisons de ce retour,

204
00:11:46,237 --> 00:11:48,922
de cette valeur de retour ici, 
" ostream& ",

205
00:11:48,922 --> 00:11:53,132
de terminer cette fonction
par un <i>return</i> du paramètre sortie,

206
00:11:53,138 --> 00:11:56,648
pour l'instant considérez-le 
comme une obligation

207
00:11:56,648 --> 00:11:59,768
afin d'éviter d'avoir 
des <i>segmentation fault</i>,

208
00:11:59,768 --> 00:12:04,125
et de pouvoir utiliser correctement
l' " operator<< ",

209
00:12:04,125 --> 00:12:06,895
comme vous l'utilisez
pour les <i>int</i> et pour les <i>double</i>.

210
00:12:08,079 --> 00:12:11,812
Une deuxième définition possible
consiste à utiliser

211
00:12:11,812 --> 00:12:14,002
une méthode que l'on aurait
déjà définie

212
00:12:14,008 --> 00:12:18,781
pour, soit convertir un Complexe
en une chaîne de caractères,

213
00:12:18,781 --> 00:12:22,531
soit directement afficher 
un complexe.

214
00:12:22,542 --> 00:12:24,182
Regardons la première solution,

215
00:12:24,191 --> 00:12:29,641
ici on utiliserai de nouveau 
le flot que l'on a reçu pour afficher

216
00:12:29,651 --> 00:12:33,241
le résultat de l'appel 
de la méthode <i>to_string</i>,

217
00:12:33,241 --> 00:12:37,101
qui transformerait un Complexe
en une chaîne de caractères,

218
00:12:37,190 --> 00:12:41,315
dont le prototype serait typiquement
une chaîne de caractères

219
00:12:41,315 --> 00:12:42,184
comme valeur de retour.

220
00:12:42,184 --> 00:12:43,124
Donc, " string ",

221
00:12:43,437 --> 00:12:46,350
la méthode appartient à la classe <i>Complexe</i>

222
00:12:46,350 --> 00:12:48,103
et s'appelle " to_string ",

223
00:12:48,103 --> 00:12:49,581
elle ne prend pas de paramètres,

224
00:12:49,581 --> 00:12:52,875
et elle ne modifie pas 
l'instance courante,

225
00:12:52,875 --> 00:12:55,660
en effet, convertir un Complexe en
une chaîne de caractères

226
00:12:55,660 --> 00:12:57,770
ne modifie pas ce Complexe.

227
00:12:57,947 --> 00:12:59,577
Et donc on ferait appel à cette méthode,

228
00:12:59,590 --> 00:13:01,680
ici, dans l' " operator << ",

229
00:13:01,721 --> 00:13:03,658
puis on terminerait comme précédemment,

230
00:13:03,658 --> 00:13:06,438
en retournant le premier argument reçu.

231
00:13:06,858 --> 00:13:09,418
Une autre solution pourrait consister 
à avoir directement

232
00:13:09,418 --> 00:13:14,678
une méthode <i>affiche</i>, qui a 
le même comportement que " operator << ",

233
00:13:14,678 --> 00:13:17,914
mais qui serait une méthode publique,
dans la classe,

234
00:13:17,914 --> 00:13:20,631
qui reçoit le flot sur lequel on l'affiche

235
00:13:20,631 --> 00:13:22,769
et retourne ce flot,

236
00:13:22,769 --> 00:13:25,379
c'est-à-dire que son prototype serait donc

237
00:13:26,361 --> 00:13:29,321
similaire à celui de 
l'opérateur d'affichage,

238
00:13:29,321 --> 00:13:31,311
donc retourne un <i>ostream</i>,

239
00:13:32,238 --> 00:13:34,898
c'est une méthode de la classe complexe,

240
00:13:36,056 --> 00:13:40,006
qui s'appelle affiche, et qui prend 
comme paramètre

241
00:13:41,237 --> 00:13:44,587
un flot qu'elle modifie, 
donc on passe par référence,

242
00:13:45,152 --> 00:13:49,345
et puis cette méthode ne modifie pas
le complexe qui est affiché,

243
00:13:49,345 --> 00:13:51,511
quand on affiche un Complexe,
on ne le modifie pas,

244
00:13:51,511 --> 00:13:54,481
et donc on termine ici avec
le mot clé <i>const</i>.

245
00:13:55,398 --> 00:13:59,728
Voilà donc 3 exemples possibles 
de définition de cet opérateur d'affichage

246
00:13:59,736 --> 00:14:01,927
pour cet exemple de classe Complexe,

247
00:14:01,927 --> 00:14:04,707
dont vous pouvez vous inspirer
pour vos propres classes.

248
00:14:04,715 --> 00:14:08,843
À noter, par anticipation sur un sujet
qui viendra dans plusieurs semaines,

249
00:14:08,843 --> 00:14:13,653
qu'il est préférable d'utiliser ce genre
de méthodes <i>toString</i> ou <i>affiche</i>

250
00:14:13,653 --> 00:14:16,588
lorsque l'on aura affaire à utiliser
le polymorphisme,

251
00:14:16,588 --> 00:14:18,218
qui viendra plus tard.

252
00:14:18,515 --> 00:14:21,952
Lorsque l'on fait ainsi de la surcharge 
externe des opérateurs,

253
00:14:21,952 --> 00:14:25,292
il est parfois nécessaire 
d'accéder aux attributs privés

254
00:14:25,455 --> 00:14:28,645
de la classe sur laquelle on veut
faire porter l'opérateur.

255
00:14:28,651 --> 00:14:30,888
Même si je trouve que c'est 
de la mauvaise programmation,

256
00:14:30,888 --> 00:14:34,781
et que je vous conseille vraiment
de tout le temps utiliser des accesseurs,

257
00:14:34,781 --> 00:14:37,948
et d'utiliser l'interface, 
donc la partie publique de la classe.

258
00:14:37,948 --> 00:14:40,928
Mais néanmoins, vous pourrez rencontrer
ce genre de pratique

259
00:14:40,928 --> 00:14:43,429
(je vous déconseille 
de l'écrire vous-même),

260
00:14:43,429 --> 00:14:49,556
et par exemple être tentés ici d'écrire
" z.x " ou ici " z.y ",

261
00:14:49,556 --> 00:14:51,499
c'est-à-dire d'accéder directement

262
00:14:51,499 --> 00:14:55,174
aux attributs privés <i>x</i>, <i>y</i>,
de la classe Complexe.

263
00:14:55,174 --> 00:14:57,987
Dans ce cas là, il va falloir 
donner un accès privilégié

264
00:14:57,987 --> 00:15:02,271
à cette fonction, qui est une fonction 
extérieure à la classe Complexe,

265
00:15:02,271 --> 00:15:06,111
lui donner un accès privilégié
aux parties privées.

266
00:15:06,131 --> 00:15:09,872
C'est ce que l'on appelle déclarer 
une amitié ou un <i>friendship</i>

267
00:15:09,872 --> 00:15:12,202
par le mot clé <i>friend</i>.

268
00:15:12,273 --> 00:15:15,775
Je répète que je vous recommande
très fortement de préférer

269
00:15:15,775 --> 00:15:17,351
passer par des accesseurs,

270
00:15:17,351 --> 00:15:19,964
c'est-à-dire par la partie publique 
de la classe,

271
00:15:19,964 --> 00:15:24,059
plutôt que d'accéder à la partie privée
par ce moyen détourné

272
00:15:24,059 --> 00:15:25,729
qu'est le mot clé <i>friend</i>.

273
00:15:25,867 --> 00:15:27,436
Néanmoins comme on le rencontre,

274
00:15:27,436 --> 00:15:29,516
si vous deviez le faire et
ne pas suivre ce conseil,

275
00:15:29,519 --> 00:15:33,549
vous mettriez dans la définition même 
de la classe, une ligne comme

276
00:15:33,568 --> 00:15:39,658
" friend " et ensuite le prototype
de la fonction à laquelle vous voulez

277
00:15:39,666 --> 00:15:42,456
donner accès aux parties privées
de la classe.

278
00:15:42,465 --> 00:15:43,960
Donc quand on fait comme ceci,

279
00:15:43,960 --> 00:15:46,510
" friend " suivi d'un prototype 
d'une fonction,

280
00:15:46,523 --> 00:15:50,253
cela donne à cette fonction
le droit d'accéder

281
00:15:50,375 --> 00:15:53,957
aux méthodes et 
aux attributs privés de la classe.

282
00:15:53,957 --> 00:15:58,089
À noter que la définition de ces fonctions

283
00:15:58,089 --> 00:16:00,929
reste bien entendu
hors de la classe,

284
00:16:00,929 --> 00:16:02,681
ces fonctions n'ont rien à voir
avec la classe,

285
00:16:02,681 --> 00:16:04,771
c'est simplement dans la classe
que l'on dit

286
00:16:04,776 --> 00:16:09,036
qu'on offre à ces fonctions extérieures
le droit d'accéder.

287
00:16:09,052 --> 00:16:12,228
Regardons concrètement 
sur les nombres complexes

288
00:16:12,228 --> 00:16:13,708
ce que cela pourrait donner,

289
00:16:13,714 --> 00:16:17,354
on aurait donc ici la classe <i>Complexe</i>, 
avec comme parties privées

290
00:16:17,500 --> 00:16:20,663
les attributs <i>x</i> et <i>y</i>,

291
00:16:20,663 --> 00:16:23,630
et on aurait ici 
notre opérateur d'affichage

292
00:16:23,630 --> 00:16:24,668
pour les nombres complexes,

293
00:16:24,668 --> 00:16:26,315
comme on l'a vu précédemment,

294
00:16:26,315 --> 00:16:27,761
mais on a pas suivi le conseil

295
00:16:27,761 --> 00:16:29,301
(je vous déconseille, 
bien sûr, de le faire),

296
00:16:29,315 --> 00:16:32,198
et on essaie ici d'accéder 
aux parties privées,

297
00:16:32,198 --> 00:16:34,709
si on le fait sans rien 
faire de particulier,

298
00:16:34,709 --> 00:16:37,119
on va avoir une erreur de compilation ici,

299
00:16:37,121 --> 00:16:39,331
puisqu'on a pas le droit,
avec une fonction externe,

300
00:16:39,344 --> 00:16:41,047
d'accéder aux parties privées.

301
00:16:41,047 --> 00:16:42,667
Et donc pour que tout ceci fonctionne,

302
00:16:42,681 --> 00:16:45,451
on rajoute dans la classe Complexe

303
00:16:45,471 --> 00:16:50,381
une ligne qui donne le droit d'accès,
qui donne le <i>friendship</i>

304
00:16:50,424 --> 00:16:55,247
à cette fonction extérieure dont
on met juste le prototype

305
00:16:55,247 --> 00:16:56,714
derrière le mot clé <i>friend</i>.

306
00:16:56,714 --> 00:16:57,954
En ajoutant cette ligne,

307
00:16:57,958 --> 00:17:01,452
ça veut dire que la fonction en question
a maintenant le droit

308
00:17:01,452 --> 00:17:03,132
d'accéder aux parties privées,

309
00:17:03,143 --> 00:17:05,787
ce qui personnellement, je trouve,
est une très mauvaise chose,

310
00:17:05,787 --> 00:17:07,907
puisque cela casse l'encapsulation.

311
00:17:08,520 --> 00:17:12,570
Ceci conclut notre séquence sur 
la surcharge externe.

312
00:17:12,769 --> 00:17:16,445
La prochaine séquence vidéo
vous présentera la surcharge interne,

313
00:17:16,445 --> 00:17:18,655
et vous dira dans quels cas 
il faut préférer

314
00:17:18,661 --> 00:17:21,683
la surcharge interne 
ou la surcharge externe.

315
00:17:21,683 --> 00:17:23,774
Et puis dans une dernière vidéo,

316
00:17:23,774 --> 00:17:25,571
nous viendrons sur 
tous les points de détails

317
00:17:25,571 --> 00:17:27,711
que nous avons encore
laissé en suspens.
