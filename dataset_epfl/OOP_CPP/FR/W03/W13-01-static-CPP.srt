1
00:00:04,291 --> 00:00:06,762
Dans les séquences précédentes,
nous avons vu que les attributs

2
00:00:06,762 --> 00:00:09,313
définis à l'intérieur d'une classe
représentent des informations

3
00:00:09,313 --> 00:00:11,623
qui sont spécifiques 
à chaque instance de la classe.

4
00:00:11,686 --> 00:00:13,907
Si l'on reprend 
notre petit exemple du rectangle,

5
00:00:13,907 --> 00:00:17,366
chaque instance de rectangle, 
chaque objet de type Rectangle

6
00:00:17,366 --> 00:00:20,143
va avoir sa propre largeur, 
sa propre hauteur,

7
00:00:20,143 --> 00:00:23,393
des informations qui lui sont spécifiques
et qui la caractérisent.

8
00:00:23,402 --> 00:00:26,070
Que se passe t-il cependant 
si plusieurs instances d'une même classe

9
00:00:26,070 --> 00:00:28,160
ont besoin d'accéder 
à une même information,

10
00:00:28,160 --> 00:00:29,503
une information commune ?

11
00:00:29,560 --> 00:00:31,290
C'est l'objet de la séquence qui suit.

12
00:00:31,383 --> 00:00:33,463
Pour illustrer le problème 
qui nous intéresse,

13
00:00:33,515 --> 00:00:36,235
revenons à notre petit exemple 
du comptage d'instances

14
00:00:36,279 --> 00:00:39,339
que nous avons déjà eu l'occasion 
d'étudier, dans nos compléments

15
00:00:39,395 --> 00:00:41,715
sur la construction/destruction d'objet.

16
00:00:42,184 --> 00:00:45,731
Il s'agissait donc de comptabiliser 
l'ensemble des instances existant

17
00:00:45,731 --> 00:00:47,241
à un moment donné dans un programme,

18
00:00:47,313 --> 00:00:50,373
et il fallait pour cela disposer 
d'une zone mémoire

19
00:00:51,843 --> 00:00:53,786
accessible par toutes les instances,

20
00:00:53,794 --> 00:00:57,364
qui était incrémentée 
à chaque création d'instance

21
00:00:57,374 --> 00:01:00,694
et décrémentée à chaque destruction.

22
00:01:00,871 --> 00:01:04,004
Au moment où nous avons abordé
ce problème pour la première fois,

23
00:01:04,004 --> 00:01:07,664
le seul moyen dont nous disposions
pour pouvoir définir cette zone mémoire,

24
00:01:07,677 --> 00:01:09,792
qui serait accessible par 
toutes les instances

25
00:01:09,792 --> 00:01:13,782
pour être incrémentée et décrémentée,
était de passer par une variable globale.

26
00:01:13,836 --> 00:01:17,335
Nous avions pris le soin, à l'époque,
d'assortir la déclaration

27
00:01:17,335 --> 00:01:20,555
de notre variable globale d'un petit :
" Hmm... " dubitatif.

28
00:01:20,677 --> 00:01:24,877
En effet, utiliser une variable globale
est quelque chose de typiquement néfaste

29
00:01:24,888 --> 00:01:27,208
dans un programme,
il s'agit d'une très mauvaise solution.

30
00:01:27,265 --> 00:01:29,534
Une variable globale, telle que celle-ci,

31
00:01:29,534 --> 00:01:31,474
n'est attachée à aucune entité 
du programme.

32
00:01:31,553 --> 00:01:34,423
Ceci est donc contraire au principe
d'une bonne encapsulation

33
00:01:34,485 --> 00:01:36,835
et traduit une mauvaise modularisation.

34
00:01:36,902 --> 00:01:40,176
De plus, cela peut induire 
des effets de bord tout à fait néfastes.

35
00:01:40,176 --> 00:01:42,278
En effet, une telle variable 
est accessible

36
00:01:42,278 --> 00:01:45,598
par différents endroits du programme, 
de façon tout à fait incontrôlée.

37
00:01:45,638 --> 00:01:48,678
Il s'agit donc de quelque chose 
à éviter à tout prix.

38
00:01:49,114 --> 00:01:53,878
Alternativement, définir le compteur
comme un attribut de la classe rectangle

39
00:01:53,878 --> 00:01:56,378
n'est clairement pas non plus
une bonne solution,

40
00:01:56,484 --> 00:01:59,434
parce que cela signifierait
que chaque instance de rectangle

41
00:01:59,465 --> 00:02:02,225
a son propre compteur,
et ce n'est pas ce que nous souhaitons.

42
00:02:02,226 --> 00:02:05,166
Nous souhaitons avoir une zone commune
accessible par toutes les instances.

43
00:02:05,240 --> 00:02:07,630
Donc cette solution n'est pas
une bonne solution non plus.

44
00:02:08,115 --> 00:02:12,155
La solution à ce problème consiste
à définir l'information que l'on souhaite

45
00:02:12,192 --> 00:02:14,822
commune à toutes les instances
d'une classe,

46
00:02:14,871 --> 00:02:17,671
comme étant un attribut de classe.

47
00:02:18,103 --> 00:02:21,073
Contrairement aux attributs 
relatifs aux instances,

48
00:02:21,267 --> 00:02:24,347
qui étaient ceux que l'on avait 
l'habitude de définir jusqu'ici.

49
00:02:24,551 --> 00:02:27,729
Un attribut de classe est donc
un attribut qui est défini

50
00:02:27,729 --> 00:02:33,959
à l'intérieur de la classe,
mais est assorti du mot réservé <i>static</i>.

51
00:02:34,112 --> 00:02:35,872
Typiquement, si on imagine que

52
00:02:35,880 --> 00:02:39,970
dans un programme co-existent 
plusieurs instances de Rectangle,

53
00:02:40,000 --> 00:02:41,930
ici deux pour simplifier,

54
00:02:43,806 --> 00:02:46,026
la situation en mémoire 
serait la suivante :

55
00:02:46,094 --> 00:02:50,804
L'objet <i>r1</i> est un objet qui aurait

56
00:02:50,816 --> 00:02:53,023
ses propres valeurs spécifiques

57
00:02:53,023 --> 00:02:57,523
pour ses attributs d'instance,
à savoir la hauteur et la largeur.

58
00:02:59,229 --> 00:03:01,649
Il en va de même pour l'objet <i>r2</i>,

59
00:03:05,073 --> 00:03:06,753
qui aurait ses propres valeurs

60
00:03:06,769 --> 00:03:08,449
pour la largeur et la hauteur.

61
00:03:08,543 --> 00:03:14,793
Par contre l'attribut de classe, <i>compteur</i>,

62
00:03:14,801 --> 00:03:17,231
est une zone mémoire unique

63
00:03:20,091 --> 00:03:22,631
qui est accessible 
par toutes les instances,

64
00:03:22,677 --> 00:03:25,277
mais qui n'existe en mémoire
qu'une seule fois.

65
00:03:25,893 --> 00:03:29,462
Notez que les règles de visibilité
pour un attribut <i>static</i>

66
00:03:29,462 --> 00:03:32,879
sont les mêmes que pour 
les attributs non <i>static</i>.

67
00:03:32,879 --> 00:03:36,119
Cela va se traduire par le fait que 
cette zone mémoire

68
00:03:36,372 --> 00:03:39,491
est accessible sans qu'aucune instance 
ne soit créée,

69
00:03:39,491 --> 00:03:42,171
uniquement au travers du nom de la classe.

70
00:03:42,761 --> 00:03:45,722
Très concrètement, si dans un programme
j'ai déclaré une classe Rectangle

71
00:03:45,722 --> 00:03:47,762
comme ceci, avec un attribut de classe,

72
00:03:47,778 --> 00:03:51,928
je peux accéder à cet attribut de classe 
sans avoir créé

73
00:03:51,934 --> 00:03:54,134
aucune instance de Rectangle au préalable.

74
00:03:54,139 --> 00:03:59,209
Ceci va se faire au moyen d'une notation
particulière, qui est la suivante :

75
00:03:59,422 --> 00:04:04,332
J'accède à la variable 
de la classe Rectangle,

76
00:04:04,343 --> 00:04:08,903
qui s'appelle <i>compteur</i>, au travers 
de l'opérateur de résolution de portée.

77
00:04:09,631 --> 00:04:12,330
Pour résumer, définir 
un attribut de classe

78
00:04:12,330 --> 00:04:15,550
revient à définir un attribut 
mais précéder sa déclaration

79
00:04:15,560 --> 00:04:17,070
du mot réservé <i>static</i>.

80
00:04:17,258 --> 00:04:21,308
Nous avons vu qu'un attribut de classe
était partagé par toutes les instances.

81
00:04:22,041 --> 00:04:24,911
Il s'agit d'une zone mémoire unique
partagée par toutes les instances.

82
00:04:25,256 --> 00:04:28,664
Et cette zone mémoire existe même
lorsque nous n'avons créé

83
00:04:28,664 --> 00:04:30,544
aucun instance de la classe.

84
00:04:32,359 --> 00:04:34,260
Nous avons vu que nous pouvions y accéder

85
00:04:36,730 --> 00:04:38,120
par le biais de cette notation.

86
00:04:38,856 --> 00:04:41,892
Pour terminer, un attribut de classe peut,

87
00:04:41,892 --> 00:04:43,842
comme un attribut d'instance

88
00:04:43,849 --> 00:04:46,709
être privé ou public.

89
00:04:47,179 --> 00:04:49,802
Les attributs d'instances 
sont typiquement initialisés

90
00:04:49,802 --> 00:04:51,915
au moment de la construction
des objets.

91
00:04:51,915 --> 00:04:55,575
Or nous avons vu qu'un attribut de classe
peut exister indépendamment

92
00:04:55,575 --> 00:04:57,345
de la construction de tout objet.

93
00:04:57,355 --> 00:05:00,545
Comment faire donc pour initialiser
un attribut de classe ?

94
00:05:01,310 --> 00:05:05,330
Il faut pour cela avoir recours
à une syntaxe particulière

95
00:05:06,899 --> 00:05:11,828
En dehors de la classe,
placez une ligne d'initialisation

96
00:05:11,828 --> 00:05:14,358
qui aurait cette syntaxe
et qui consiste à dire :

97
00:05:15,496 --> 00:05:18,097
la variable compteur 
de la classe Rectangle,

98
00:05:18,097 --> 00:05:19,417
qui est de type entier,

99
00:05:19,430 --> 00:05:21,360
doit être initialisée à zéro.

100
00:05:22,009 --> 00:05:23,979
Une telle ligne de code apparaîtrait

101
00:05:24,103 --> 00:05:28,803
en dehors de la classe Rectangle,

102
00:05:29,508 --> 00:05:31,088
par exemple comme ceci,

103
00:05:32,326 --> 00:05:36,296
on reprendrait cette ligne en dehors
de la déclaration de la classe Rectangle.

104
00:05:37,350 --> 00:05:39,590
On a recours à cette syntaxe particulière

105
00:05:39,591 --> 00:05:45,060
car un attribut de classe existe même si 
on a déclaré aucune instance de la classe.

106
00:05:45,060 --> 00:05:47,312
Donc on ne peut pas compter, par exemple,
sur un constructeur

107
00:05:47,312 --> 00:05:49,562
pour réaliser l'initialisation nécessaire.

108
00:05:50,572 --> 00:05:52,668
Le recours à une variable de classe
pour comptabiliser

109
00:05:52,668 --> 00:05:54,331
l'ensemble des instances d'une classe

110
00:05:54,331 --> 00:05:56,381
est évidemment un exemple
relativement atypique.

111
00:05:56,686 --> 00:05:59,167
Il existe bien sûr de nombreuses
autres situations

112
00:05:59,167 --> 00:06:02,537
où partager une information commune
entre plusieurs instances est utile.

113
00:06:02,666 --> 00:06:05,426
Mais souvent il s'agira d'une information
qui est de nature constante.

114
00:06:05,430 --> 00:06:06,540
Voyons un exemple.

115
00:06:07,036 --> 00:06:09,142
Sortons pour une fois 
de notre exemple du rectangle

116
00:06:09,142 --> 00:06:11,532
et imaginons une situation
où l'on aurait besoin

117
00:06:11,540 --> 00:06:14,940
de représenter les employés 
d'une entreprise,

118
00:06:14,982 --> 00:06:16,852
un exemple plus administratif.

119
00:06:16,915 --> 00:06:22,525
On imagine par exemple qu'un employé
est caractérisé par son âge,

120
00:06:22,532 --> 00:06:24,572
sa date d'entrée en service.

121
00:06:27,495 --> 00:06:29,945
Et puis, imaginons qu'il existe 
une information commune

122
00:06:29,945 --> 00:06:33,814
à tous les employés, qui serait
l'âge officiel de départ à la retraite.

123
00:06:33,814 --> 00:06:37,495
Où placer cette information sur 
l'âge officiel de départ à la retraite,

124
00:06:37,495 --> 00:06:39,545
qui par exemple serait de 65 ans ?

125
00:06:40,439 --> 00:06:44,022
Cet âge officiel de départ à la retraite,
de 65 ans, serait le même

126
00:06:44,022 --> 00:06:44,992
pour tous les employés.

127
00:06:45,007 --> 00:06:47,730
Imaginons que dans un premier temps,
je le déclare comme

128
00:06:47,730 --> 00:06:49,890
un attribut d'instance,

129
00:06:51,682 --> 00:06:52,732
comme ceci.

130
00:06:56,038 --> 00:06:58,798
Ceci voudrait dire qu'à chaque fois 
qu'on crée un employé,

131
00:07:00,719 --> 00:07:05,069
cet employé aurait donc 
un âge, 30 ans,

132
00:07:05,069 --> 00:07:06,679
une date d'entrée en service,

133
00:07:08,489 --> 00:07:13,019
et un âge officiel de la retraite,
qui serait de 65 ans.

134
00:07:13,233 --> 00:07:17,453
Idem pour le second employé,
toujours avec 65.

135
00:07:17,727 --> 00:07:19,647
Ceci autant de fois

136
00:07:20,906 --> 00:07:24,156
que l'on aurait d'employés,

137
00:07:24,301 --> 00:07:27,431
avec toujours cette valeur 65
qui est dupliquée à tout les endroits.

138
00:07:28,457 --> 00:07:31,824
Cette information est donc répétée
inutilement pour chacun des employés,

139
00:07:31,824 --> 00:07:32,925
Il y a donc une duplication

140
00:07:32,925 --> 00:07:34,995
et surtout elle induit 
un problème de maintenance.

141
00:07:35,176 --> 00:07:37,686
Imaginez par exemple que suite 
à un changement de loi,

142
00:07:37,712 --> 00:07:40,981
l'âge de la retraite passe à 67 ans.

143
00:07:40,981 --> 00:07:43,870
Il faudrait donc aller 
dans chacune des instances,

144
00:07:43,870 --> 00:07:47,495
et modifier partout cette valeur.

145
00:07:47,495 --> 00:07:50,215
Ce qui évidemment peut poser 
de gros soucis de maintenance.

146
00:07:50,558 --> 00:07:53,908
La solution consiste ici 
à définir cette information

147
00:07:53,908 --> 00:07:56,308
comme étant une variable de classe

148
00:07:56,387 --> 00:07:58,030
au moyen du mot réservé <i>static</i>.

149
00:07:58,030 --> 00:08:02,390
Ici typiquement, <i>age_retraite</i>

150
00:08:02,390 --> 00:08:04,370
serait une zone mémoire

151
00:08:04,370 --> 00:08:06,299
communément accessible 
par toutes les instances

152
00:08:06,299 --> 00:08:08,919
mais qui ne serait pas dupliquée 
dans chacune des instances.

153
00:08:08,923 --> 00:08:11,153
Typiquement, ceci disparaîtrait.

154
00:08:11,232 --> 00:08:14,852
Idem pour chacune des instances.

155
00:08:15,770 --> 00:08:18,064
Pour résumer, nous avons vu 
sur les exemples précédents

156
00:08:18,064 --> 00:08:20,581
que les attributs de classe 
sont typiquement très pratiques

157
00:08:20,581 --> 00:08:24,751
et très utiles lorsque différents objets,
par exemple nos employés de tout à l'heure

158
00:08:24,882 --> 00:08:28,982
ont besoin d'accéder à une information,
l'âge officiel de départ à la retraite.

159
00:08:29,120 --> 00:08:33,040
Nous avons vu que cela permet d'éviter
de la duplication d'information,

160
00:08:33,147 --> 00:08:35,921
et permet une meilleure maintenance 
de cette information.

161
00:08:35,921 --> 00:08:39,218
Vous noterez enfin que le cas 
que nous avons étudié tout à l'heure,

162
00:08:39,218 --> 00:08:41,108
à savoir celui du comptage d'instance

163
00:08:41,123 --> 00:08:43,726
où la variable de classe était définie 
en non-constante,

164
00:08:43,726 --> 00:08:45,300
parce que nous avions besoin

165
00:08:45,300 --> 00:08:49,870
de décrémenter/incrémenter cette valeur
à chaque création ou destruction d'objet.

166
00:08:49,883 --> 00:08:52,983
Eh bien, cette situation est 
relativement atypique,

167
00:08:52,994 --> 00:08:55,694
dans la pratique, vous allez 
le plus couramment rencontrer

168
00:08:55,764 --> 00:09:01,134
des variables de classe pour représenter
des constantes utiles à toutes les instances

169
00:09:01,139 --> 00:09:02,599
d'une classe donnée.

170
00:09:02,945 --> 00:09:05,955
Vous savez donc maintenant ce qu'est
un attribut de classe,

171
00:09:06,095 --> 00:09:07,245
un attribut <i>static</i>.

172
00:09:07,285 --> 00:09:09,805
Est-il possible de faire la même chose
avec des méthodes ?

173
00:09:09,805 --> 00:09:13,395
La réponse est oui, nous le présentons ici
par souci d'exhaustivité,

174
00:09:13,444 --> 00:09:17,470
même si l'usage des méthodes <i>static</i>
est relativement peu courant

175
00:09:17,470 --> 00:09:20,350
et est peu recommandé
en programmation orientée objet.

176
00:09:20,679 --> 00:09:23,519
Une méthode <i>static</i> est donc simplement

177
00:09:23,521 --> 00:09:26,065
une méthode définie 
à l'intérieur d'une classe

178
00:09:26,065 --> 00:09:29,765
mais dont la déclaration serait 
précédée du mot réservé <i>static</i>.

179
00:09:30,082 --> 00:09:32,997
Pour invoquer une méthode d'instance,
c'est-à-dire les méthodes avec lesquelles

180
00:09:32,997 --> 00:09:34,997
nous avons l'habitude 
de travailler jusqu'ici,

181
00:09:35,002 --> 00:09:38,112
nous sommes dans l'obligation
d'avoir au préalable créé un objet

182
00:09:38,191 --> 00:09:40,741
et invoqué la méthode sur cet objet.

183
00:09:40,950 --> 00:09:43,010
Par exemple le calcul 
d'un <i>surface</i> de rectangle

184
00:09:43,055 --> 00:09:45,794
nécessite d'avoir créé un objet
de type Rectangle

185
00:09:45,794 --> 00:09:49,014
et d'invoquer le calcul de surface
sur le rectangle.

186
00:09:49,150 --> 00:09:52,864
Une méthode de classe peut par contre
parfaitement être invoquée

187
00:09:52,864 --> 00:09:56,013
sans qu'il y ai eu au préalable 
de création d'un quelconque objet

188
00:09:56,013 --> 00:09:56,780
de la classe.

189
00:09:56,780 --> 00:10:01,430
Par exemple, ici, si dans une classe <i>A</i>,
je dispose d'une méthode <i>static</i>,

190
00:10:01,450 --> 00:10:04,028
<i>methode1</i>, je peux appeler cette méthode

191
00:10:04,028 --> 00:10:06,868
par le biais de l'opérateur 
de résolution de portée

192
00:10:06,992 --> 00:10:11,022
sans avoir au préalable créé 
un quelconque objet de type <i>A</i>.

193
00:10:11,498 --> 00:10:12,912
On dit donc simplement ici

194
00:10:12,912 --> 00:10:16,742
que l'on appelle la <i>methode1</i>
de la classe <i>A</i>.

195
00:10:16,964 --> 00:10:20,704
Ce genre de tournure n'est évidemment
pas licite pour des méthodes non <i>static</i>.

196
00:10:20,829 --> 00:10:22,656
Par exemple, ici, dans la classe <i>A</i>,

197
00:10:22,656 --> 00:10:24,729
nous avons une seconde méthode, <i>methode2</i>,

198
00:10:24,729 --> 00:10:26,669
qui n'est pas déclarée comme <i>static</i>.

199
00:10:26,775 --> 00:10:30,274
Si nous essayons de l'invoquer 
uniquement au travers du nom de la classe,

200
00:10:30,274 --> 00:10:32,384
sans passer par la création 
d'une instance,

201
00:10:32,385 --> 00:10:33,725
nous aurons une erreur.

202
00:10:33,820 --> 00:10:36,150
Pour rappeler <i>methode2</i> qui est non <i>static</i>,

203
00:10:36,178 --> 00:10:39,348
il faut impérativement avoir créé 
un objet de type <i>A</i>,

204
00:10:39,404 --> 00:10:41,642
sur lequel invoquer <i>methode2</i>.

205
00:10:41,642 --> 00:10:45,182
C'est ce que nous faisions également ici, 
pour calculer la surface

206
00:10:45,182 --> 00:10:46,732
d'un rectangle <i>r</i> donné.

207
00:10:46,913 --> 00:10:48,306
Vous noterez enfin au passage

208
00:10:48,306 --> 00:10:50,966
qu'une méthode <i>static</i>
peut, elle, être invoquée

209
00:10:50,966 --> 00:10:53,736
soit au travers du nom de la classe,

210
00:10:53,743 --> 00:10:55,923
indépendamment de la création
de toute instance,

211
00:10:55,927 --> 00:10:57,235
ce que nous avons fait ici,

212
00:10:57,235 --> 00:10:59,960
mais qu'elle peut également être invoquée
au travers d'une instance,

213
00:10:59,960 --> 00:11:01,290
si une instance existe.

214
00:11:01,296 --> 00:11:03,456
Donc ce genre de tournure est licite,

215
00:11:03,491 --> 00:11:06,141
même s'il est peu courant 
et peu recommandé.

216
00:11:06,150 --> 00:11:09,571
Enfin, ce genre de tournure d'accès
à un membre <i>static</i>

217
00:11:09,571 --> 00:11:11,304
via une instance
est aussi possible

218
00:11:11,304 --> 00:11:15,844
pour les attributs, sous réserve bien sûr,
de l'accessibilité de l'attribut.

219
00:11:15,849 --> 00:11:20,427
Le fait qu'une méthode de classe
soit invoquable indépendamment

220
00:11:20,427 --> 00:11:22,014
de la création de toute instance

221
00:11:22,014 --> 00:11:25,134
induit un certain nombre de restrictions
sur ce que l'on peut faire

222
00:11:25,148 --> 00:11:27,008
à l'intérieur d'une telle méthode.

223
00:11:28,306 --> 00:11:32,776
En effet, puisqu'une méthode de classe
ne peut pas présupposer de l'existance

224
00:11:32,780 --> 00:11:35,130
d'un objet courant 
sur lequel elle s'applique,

225
00:11:35,135 --> 00:11:37,555
elle ne pourra pas à son tour utiliser

226
00:11:37,557 --> 00:11:41,407
de méthode ou d'attribut 
qui présuppose l'existence d'un objet.

227
00:11:41,550 --> 00:11:45,250
Donc elle ne pourra pas utiliser
de méthode ou d'attribut d'instance.

228
00:11:46,008 --> 00:11:48,338
Ceci veut dire, en clair,
qu'une méthode de classe

229
00:11:48,348 --> 00:11:51,358
ne peut accéder qu'à d'autres
méthodes ou attributs de classe.

230
00:11:51,395 --> 00:11:54,713
Une méthode <i>static</i> ne peut utiliser
que des membres <i>static</i> à son tour.

231
00:11:54,713 --> 00:11:57,842
On peut donc parfaitement voir
ces méthodes de classe

232
00:11:57,842 --> 00:12:01,592
comme étant de simples fonctions usuelles
qui ont été placées dans une classe.

233
00:12:02,174 --> 00:12:05,192
Dans les langages comme C++
où il existe une couche non-objet

234
00:12:05,192 --> 00:12:07,079
où l'on peut utiliser 
des fonctions usuelles

235
00:12:07,079 --> 00:12:09,199
sans passer par la création de classes,

236
00:12:09,228 --> 00:12:13,497
le recours à des méthodes de classe
ne se justifie que

237
00:12:13,497 --> 00:12:15,463
dans des situations très particulières.

238
00:12:15,463 --> 00:12:17,084
On peut imaginer comme exemple,

239
00:12:17,084 --> 00:12:19,204
la nécessité de créer une méthode de classe

240
00:12:19,213 --> 00:12:22,743
pour afficher un certain nombre 
de valeurs d'attributs de classe.

241
00:12:22,782 --> 00:12:26,391
On peut aussi imaginer 
qu'il soit nécessaire d'en définir

242
00:12:26,391 --> 00:12:29,350
pour manipuler des attributs de classe,
des attributs <i>static</i>

243
00:12:29,350 --> 00:12:31,094
qui soient non-constants
et qui seraient privés,

244
00:12:31,094 --> 00:12:33,094
donc on aurait besoin de définir
de telles méthodes.

245
00:12:33,149 --> 00:12:37,921
La consigne générale, 
c'est de toujours préférer

246
00:12:37,921 --> 00:12:39,861
les fonctions usuelles en C++,

247
00:12:39,861 --> 00:12:41,881
et non pas les méthodes de classe.

248
00:12:41,944 --> 00:12:45,924
Et puis surtout, d'éviter absolument
la prolifération de <i>static</i>

249
00:12:45,975 --> 00:12:46,829
dans un programme.

250
00:12:46,829 --> 00:12:47,539
Pourquoi ?

251
00:12:47,543 --> 00:12:51,190
Puisqu'un membre <i>static</i> peut être invoqué
indépendamment de la création

252
00:12:51,190 --> 00:12:55,000
de tout objet, cela casse 
toute l'approche orientée objet.

253
00:12:55,135 --> 00:12:58,236
Voilà, ceci clôt notre présentation
de ce qu'est un membre <i>static</i>

254
00:12:58,236 --> 00:13:00,556
dans une classe, aussi bien 
un attribut qu'une méthode.

255
00:13:00,556 --> 00:13:01,979
Nous avons vu que dans la pratique,

256
00:13:01,979 --> 00:13:05,969
concrètement, nous allons plutôt 
rencontrer des attributs constants <i>static</i>

257
00:13:06,012 --> 00:13:09,942
et que pour le reste, il faut absolument
éviter la prolifération du <i>static</i>.
