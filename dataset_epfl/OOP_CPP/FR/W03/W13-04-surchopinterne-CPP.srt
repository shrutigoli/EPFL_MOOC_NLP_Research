1
00:00:03,980 --> 00:00:05,409
Dans la séquence vidéo qui suit

2
00:00:05,409 --> 00:00:08,358
nous continuons sur la lancée 
de la surcharge des opérateurs

3
00:00:08,358 --> 00:00:11,668
en nous intéressant plus particulièrement 
à la surcharge interne.

4
00:00:11,668 --> 00:00:13,238
Dans les séquences qui ont précédé

5
00:00:13,238 --> 00:00:16,559
nous avons en effet vu que 
un opérateur pouvait être surchargé

6
00:00:16,559 --> 00:00:18,299
soit à l'extérieur d'une « class »,

7
00:00:18,300 --> 00:00:20,589
dans ce cas là qu'il s'agira d'une fonction

8
00:00:20,588 --> 00:00:23,229
soit à l'intérieur d'une « class » 
et dans ce cas-là

9
00:00:23,230 --> 00:00:26,599
il s'agira d'une méthode 
appartenant à une « class ».

10
00:00:26,599 --> 00:00:30,068
Si par exemple on a défini l'opérateur '+'

11
00:00:30,068 --> 00:00:32,829
pour les nombres complexes au moyen
d'une fonction

12
00:00:32,829 --> 00:00:39,120
lorsque l'on écrit quelque chose comme
« z1 + z2 », où z1 et z2 sont des « Complexes »,

13
00:00:39,120 --> 00:00:44,149
ceci correspond donc 
à un appel de fonction

14
00:00:44,149 --> 00:00:46,110
à l'appel de la fonction « opérateur + »

15
00:00:46,110 --> 00:00:50,249
qui prend en argument « z1 » et « z2 ».

16
00:00:50,249 --> 00:00:55,450
Le premier opérande correspond 
aux premiers arguments de la fonction

17
00:00:55,450 --> 00:00:59,900
et le second au second 
arguments de la fonction.

18
00:00:59,900 --> 00:01:04,087
Une alternative qui s'offre à nous ici
serait de définir l' « opérateur + »

19
00:01:04,087 --> 00:01:06,280
au moyen d'une surcharge interne

20
00:01:06,280 --> 00:01:09,019
c'est-à-dire en plaçant 
la définition de cet opérateur

21
00:01:09,019 --> 00:01:11,369
à l'intérieur de la « class » « Complexe » ;

22
00:01:11,370 --> 00:01:13,080
puisqu'il s'agit alors d'une méthode

23
00:01:13,080 --> 00:01:16,040
il faudra nécessairement 
l'invoquer au travers d'un objet

24
00:01:16,040 --> 00:01:21,299
ce qui veut dire que lorsque 
nous écrivons ceci,

25
00:01:21,299 --> 00:01:26,019
cela va se traduire par quelque chose de
différent du cas de la surcharge externe

26
00:01:26,019 --> 00:01:31,240
cela va se traduire 
par un appel de méthode

27
00:01:32,500 --> 00:01:35,189
qui a l'allure suivante.

28
00:01:35,189 --> 00:01:41,269
Le premier opérande est l'objet courant
l'objet auquel s'applique l'opérateur '+'

29
00:01:41,269 --> 00:01:47,099
et le second doit correspondre
à l'argument de la méthode

30
00:01:47,099 --> 00:01:49,690
nous voyons donc que 
dans le cas d'une surcharge interne

31
00:01:49,690 --> 00:01:52,329
nous n'avons plus besoin 
que d'un seul argument

32
00:01:52,328 --> 00:01:55,569
qui va correspondre au deuxième opérande ;

33
00:01:55,569 --> 00:02:00,728
pour résumer si l'on veut réaliser la
surcharge interne d'un opérateur donné

34
00:02:00,728 --> 00:02:06,539
il faudra placer la méthode « operatorOp »
à l'intérieur d'une « class ».

35
00:02:06,540 --> 00:02:10,080
Comme pour toutes les autres méthodes,
on se contentera usuellement de placer

36
00:02:10,080 --> 00:02:12,700
à l'intérieur de la « classe » 
le prototype de l'opérateur

37
00:02:12,700 --> 00:02:17,789
et l'on donnera la définition de 
l'opérateur à l'extérieur de la « classe »,

38
00:02:17,788 --> 00:02:20,458
l'opérateur devra être 
rattaché à la classe

39
00:02:20,459 --> 00:02:23,239
à laquelle il appartient
dans sa définition externe

40
00:02:23,239 --> 00:02:25,469
au moyen de l'opérateur 
de résolutions portées

41
00:02:25,469 --> 00:02:28,849
comme pour toutes les méthodes 
que nous avons l'habitude de définir.

42
00:02:28,849 --> 00:02:30,769
Un des points principaux 
à retenir est que

43
00:02:30,769 --> 00:02:33,909
le premier opérande d'un tel opérateur 
est l'instance courante

44
00:02:33,909 --> 00:02:39,010
et dans ce cas-là cette instance
ne doit pas être passée en paramètre.

45
00:02:40,870 --> 00:02:44,939
Les méthodes ne reçoivent en paramètre

46
00:02:44,939 --> 00:02:48,098
qu'un éventuel second opérande.

47
00:02:48,098 --> 00:02:52,480
Voyons maintenant sur un exemple concret
comment un opérateur par exemple « += »

48
00:02:52,480 --> 00:02:55,948
peut-être surchargé en interne dans la
« class » « Complexe » ;

49
00:02:55,949 --> 00:02:59,899
l'opérateur « += » a usuellement
la sémantique suivante :

50
00:02:59,899 --> 00:03:07,388
« ajouter à z1 la valeur de z2 ».

51
00:03:07,388 --> 00:03:11,389
Contrairement à « opérateur + » que nous 
avons eu l'occasion d'étudier précédemment

52
00:03:11,400 --> 00:03:13,949
qui avait pour vocation de construire 
un nouveau « Complexe »

53
00:03:13,949 --> 00:03:16,590
à partir de deux « Complexes » existants
en les sommant,

54
00:03:16,590 --> 00:03:24,359
l'opérateur « += », lui, va modifier
son premier opérande,

55
00:03:24,359 --> 00:03:27,838
on voit donc que l'opérateur « += », que 
l'on a choisi en guise d'exemple ici,

56
00:03:27,838 --> 00:03:31,500
est un opérateur qui est très
proche des objets de la « class » « Complexe »

57
00:03:31,500 --> 00:03:34,340
puisqu'il doit pouvoir 
en modifier le contenu

58
00:03:34,340 --> 00:03:38,000
et dans ce cas on a usuellement
recours à une surcharge interne

59
00:03:38,000 --> 00:03:41,359
ce qui va se traduire par le code suivant,

60
00:03:41,359 --> 00:03:46,049
l'opérateur « += » est donc défini
comme une méthode de la « class » « Complexe »

61
00:03:46,049 --> 00:03:50,158
il a pour seul argument
le second opérande.

62
00:03:50,158 --> 00:03:54,199
La définition que pour plus de lisibilité 
on va placer à l'extérieur de la classe,

63
00:03:54,199 --> 00:03:56,009
mais ce n'est pas
une nécessité absolue,

64
00:03:56,009 --> 00:03:58,718
peut être écrite de la façon suivante :

65
00:03:58,718 --> 00:04:04,779
donc à l'attribut 'x' de l'objet courant
donc du premier opérande

66
00:04:04,779 --> 00:04:09,609
on ajoute la valeur de l'attribut 'x'
du second opérande

67
00:04:09,609 --> 00:04:14,189
et on fait pareil
pour le second attribut.

68
00:04:14,189 --> 00:04:16,888
Maintenant que nous savons 
définir l'opérateur « += »

69
00:04:16,888 --> 00:04:20,498
en utilisant la surcharge interne,
nous posons la question suivante :

70
00:04:20,499 --> 00:04:27,250
comment définir les opérateurs « += » et '+' 
l'un en fonction de l'autre ?

71
00:04:27,250 --> 00:04:32,620
L'intérêt fondamental de faire ceci est
d'établir un lien sémantique entre les deux

72
00:04:32,620 --> 00:04:37,620
un lien qui existe de toute façon,
qu'on aimerait vouloir mettre en place

73
00:04:37,620 --> 00:04:41,149
puisque la façon de sommer les « Complexes »

74
00:04:41,149 --> 00:04:44,678
doit rester cohérente 
d'un opérateur à l'autre

75
00:04:44,678 --> 00:04:48,209
« += » est par nature un opérateur
qui demande moins de traitements que '+'

76
00:04:48,209 --> 00:04:50,799
plus puisqu'il ne crée pas 
de nouveaux complexes,

77
00:04:50,800 --> 00:04:56,320
il est donc plus naturel de définir 
le plus lourd en fonction du plus léger

78
00:04:56,320 --> 00:04:59,449
plutôt que l'inverse et c'est l'option
que nous allons étudier maintenant.

79
00:04:59,449 --> 00:05:04,459
Pour comprendre le corps de la méthode
« opérateur + » redéfinie au moyen de « += »,

80
00:05:04,459 --> 00:05:07,968
telle qu'elle vous est proposée ici
commençons par un petit exemple simple

81
00:05:07,968 --> 00:05:10,988
donc supposons que l'on dispose
de deux « Complexes »

82
00:05:12,749 --> 00:05:14,269
c1 et c2

83
00:05:18,059 --> 00:05:20,629
initialisés d'une certaine façon

84
00:05:25,809 --> 00:05:30,968
et essayons d'écrire l'algorithme qui nous
permet de calculer la somme de c1 et de c2

85
00:05:30,968 --> 00:05:35,279
en utilisant l'opérateur « += »
entre les « Complexes ».

86
00:05:35,279 --> 00:05:41,208
On veut donc calculer un nouveau « complexe »,
appelons le « tmp »,

87
00:05:41,208 --> 00:05:44,150
qui serait la somme de c1 et c2,

88
00:05:44,150 --> 00:05:49,068
et en réfléchissant à comment calculer la
valeur de « tmp » en utilisant l'opérateur « += »

89
00:05:49,068 --> 00:05:54,499
on se rend compte qu'il suffit de
copier dans « tmp » la valeur du complexe c1

90
00:05:54,509 --> 00:05:59,090
puis d'appliquer l'opérateur « += » à « tmp »

91
00:05:59,090 --> 00:06:01,990
pour lui ajouter la valeur de c2 ;

92
00:06:01,990 --> 00:06:04,728
on obtient bel et bien à l'intérieur du « tmp »

93
00:06:04,728 --> 00:06:08,359
la somme de c1 et de c2
en procédant de cette façon.

94
00:06:08,360 --> 00:06:11,129
Pour vous en convaincre faisons
un petit schéma,

95
00:06:11,129 --> 00:06:16,500
la déclaration de ce « Complexe »
va correspondre à cette situation mémoire

96
00:06:16,500 --> 00:06:20,949
donc on aura un objet 
de type « Complexe » c1

97
00:06:20,949 --> 00:06:26,549
dont les champs 'x' et 'y' seront
initialisés comme ceci.

98
00:06:28,240 --> 00:06:30,680
De façon analogue

99
00:06:30,680 --> 00:06:35,510
l'objet c2 aura cette allure

100
00:06:37,939 --> 00:06:39,389
et l'objet « tmp »,

101
00:06:46,110 --> 00:06:50,139
qui est construit d'abord en cette ligne
par copie de c1,

102
00:06:50,139 --> 00:06:54,728
va d'abord avoir dans ses champs 'x' et 'y'

103
00:06:54,728 --> 00:06:58,288
les valeurs copiées depuis c1,

104
00:07:01,348 --> 00:07:04,449
ensuite on va appliquer à « tmp »

105
00:07:04,449 --> 00:07:07,110
l'opérateur « += »,

106
00:07:07,110 --> 00:07:10,669
donc en exécutant cette ligne

107
00:07:10,668 --> 00:07:17,288
on va appliquer l'opérateur « += » qui
consiste à ajouter au 'x' de « tmp »

108
00:07:17,288 --> 00:07:21,510
la valeur du 'x' de c2

109
00:07:22,460 --> 00:07:26,319
d'où la valeur 8.0 ici

110
00:07:26,959 --> 00:07:33,519
et à ajouter au 'y' de « tmp »
la valeur du 'y' de c2

111
00:07:35,079 --> 00:07:40,038
d'où la valeur 5 ici.

112
00:07:40,038 --> 00:07:44,749
On voit donc bien que le « Complexe »
calculé ainsi au moyen de l'opérateur « += »

113
00:07:44,749 --> 00:07:50,520
correspond bel et bien à la somme
de c1 et de c2.

114
00:07:54,379 --> 00:07:57,128
C'est exactement cet algorithme 
qui est appliqué

115
00:07:57,128 --> 00:08:00,819
dans la version que vous avez ici 
sous les yeux, à une subtilité près

116
00:08:00,819 --> 00:08:04,618
liée à ce passage par valeur ici ;

117
00:08:04,619 --> 00:08:07,768
en effet si l'on utilise cet entête de
l'opérateur '+',

118
00:08:07,768 --> 00:08:10,468
qui est l'entête préconisé depuis c++ 11,

119
00:08:10,468 --> 00:08:13,528
lorsque l'on écrit 
quelque chose comme c1 + c2,

120
00:08:13,528 --> 00:08:16,998
donc on invoque cet opérateur '+',

121
00:08:16,999 --> 00:08:21,879
ce qui va se passer c'est que la valeur 
du « Complexe » c1 va être copiée dans z1

122
00:08:21,879 --> 00:08:27,540
qui est une zone locale à opérateur '+',
à la fonction « opérateur + »,

123
00:08:27,540 --> 00:08:30,269
sur laquelle on peut travailler et qui
va être retournée au final

124
00:08:30,269 --> 00:08:31,658
donc on se rend compte que

125
00:08:31,658 --> 00:08:37,730
z1 joue ici exactement le rôle de « tmp » ;

126
00:08:37,730 --> 00:08:43,670
il est donc inutile de redéfinir à
l'intérieur du corps de « opérateur + »

127
00:08:43,670 --> 00:08:45,380
une autre variable intermédiaire

128
00:08:45,380 --> 00:08:48,028
dans laquelle on aurait copié 
le premier opérande ici.

129
00:08:48,028 --> 00:08:52,549
Ce rôle est déjà rempli par le
paramètre passé par valeur ici.

130
00:08:52,549 --> 00:08:56,189
En clair, la copie du premier opérande c1,

131
00:08:56,190 --> 00:08:58,879
faite dans une variable intermédiaire « tmp »

132
00:08:58,879 --> 00:09:02,889
est réalisée de facto lors 
du passage par valeur ici.

133
00:09:02,889 --> 00:09:06,519
Bien sûr l'algorithme décrit ici
est placé à l'intérieur d'une fonction,

134
00:09:06,519 --> 00:09:10,109
il faut qu'une fois le calcul effectué,
la valeur calculée soit retournée

135
00:09:10,109 --> 00:09:12,399
et c'est exactement ce qui est fait ici.

136
00:09:12,399 --> 00:09:17,110
On obtient ainsi une définition 
de l'opérateur « opérateur + »

137
00:09:17,110 --> 00:09:21,229
faite au moyen de « += » qui est 
très concise, très élégante

138
00:09:21,229 --> 00:09:24,399
et qui a surtout le mérite d'établir 
un lien sémantique

139
00:09:24,399 --> 00:09:27,769
entre l'opérateur « += » et l'opérateur '+'.

140
00:09:27,769 --> 00:09:32,480
Ces deux opérateurs ne devraient pas
être définis de façon découplée,

141
00:09:32,480 --> 00:09:36,509
notez aussi que cette façon de définir
l'entête en utilisant le passage par valeur

142
00:09:36,509 --> 00:09:41,019
permet au compilateur moderne C++ 11
de faire de nombreuses optimisations.

143
00:09:41,019 --> 00:09:44,006
Notez pour terminer que la nouvelle
version de l'opérateur '+',

144
00:09:44,006 --> 00:09:45,693
définie au moyen de « += »,

145
00:09:45,693 --> 00:09:48,520
a l'avantage aussi de nous épargner
l'utilisation des « getters »

146
00:09:48,520 --> 00:09:51,569
qui était nécessaire 
parce que la fonction externe

147
00:09:51,569 --> 00:09:55,610
n'avait pas accès aux
attributs privés des « Complexes »

148
00:09:55,610 --> 00:09:59,199
donc ces « getters » ne sont plus nécessaires
et c'est bon pour l’encapsulation

149
00:09:59,199 --> 00:10:01,089
on sait que la prolifération de « getters »

150
00:10:01,089 --> 00:10:04,125
peut être nuisible 
à une bonne encapsulation.

151
00:10:04,125 --> 00:10:07,909
On peut donc surcharger un opérateur
de façon interne ou de façon externe

152
00:10:07,909 --> 00:10:10,809
dans certaines situations on n'a pas 
le choix quant à la façon de procéder.

153
00:10:10,809 --> 00:10:12,229
Par exemple,

154
00:10:12,230 --> 00:10:15,889
pour que l'opérateur d'affichage nous
avons vu dans la séquence précédente

155
00:10:15,889 --> 00:10:18,709
qu'on pouvait le surcharger autrement que
par une fonction ;

156
00:10:18,709 --> 00:10:21,519
dans certains autres cas 
on a le choix entre les deux,

157
00:10:21,519 --> 00:10:24,779
par exemple pour l'opérateur '+', que nous
avons déjà eu l'occasion de rencontrer,

158
00:10:24,779 --> 00:10:29,379
il est parfaitement possible de le définir
au moyen d'une surcharge interne

159
00:10:29,379 --> 00:10:30,240
comme ceci.

160
00:10:30,240 --> 00:10:34,230
Tout comme il est parfaitement possible de
le définir au moyen d'une surcharge externe

161
00:10:34,230 --> 00:10:37,350
ce que nous avons fait dans
les exemples qui ont précédé.

162
00:10:37,350 --> 00:10:38,340
Mais attention,

163
00:10:38,340 --> 00:10:41,680
nous avons vu que lors de la
définition externe d' « opérateur »

164
00:10:41,679 --> 00:10:44,739
nous pouvions être tentés
d'utiliser le « friend »,

165
00:10:44,740 --> 00:10:47,200
nous ne l'avons pas fait dans les
exemples qui ont précédé,

166
00:10:47,200 --> 00:10:48,299
nous avons évité de le faire,

167
00:10:48,299 --> 00:10:50,698
mais certains pourraient être tentés
de le faire quand même

168
00:10:50,698 --> 00:10:53,269
c'est une très mauvaise chose 
et cela casse l'encapsulation,

169
00:10:53,269 --> 00:10:55,509
ce n'est pas une bonne façon de procéder

170
00:10:55,509 --> 00:10:59,229
et ceci nous amène à un certain nombre
de recommandations d'ordre méthodologique

171
00:10:59,229 --> 00:11:01,990
à appliquer lorsqu'on a le choix 
entre une surcharge interne

172
00:11:01,990 --> 00:11:05,160
ou une surcharge externe
pour un opérateur.

173
00:11:05,160 --> 00:11:06,520
Première recommandation :

174
00:11:06,520 --> 00:11:10,580
il est usuellement recommandé 
de préférer la surcharge externe

175
00:11:10,580 --> 00:11:14,009
à chaque fois que l'on peut écrire
le corps de la surcharge

176
00:11:14,009 --> 00:11:16,309
sans avoir recours au « friend »,

177
00:11:16,309 --> 00:11:18,869
c'est-à-dire à chaque fois que 
l'on peut écrire l'opérateur

178
00:11:18,869 --> 00:11:23,589
au moyen des méthodes de l'interface de
la classe et sans copies inutiles.

179
00:11:23,590 --> 00:11:27,820
C'était le cas de « opérateur + » que nous
avons par exemple pu définir comme ceci

180
00:11:27,820 --> 00:11:29,109
sans avoir recours au « friend »,

181
00:11:29,109 --> 00:11:33,108
il est donc recommandé dans ce cas 
de définir cet opérateur

182
00:11:33,108 --> 00:11:36,660
au moyen d'une surcharge externe 
par le biais d'une fonction.

183
00:11:36,659 --> 00:11:39,030
Si par contre l'opérateur est
proche de la « classe »,

184
00:11:39,030 --> 00:11:41,720
comme c'était le cas tout à l'heure 
pour l'opérateur « += »,

185
00:11:41,720 --> 00:11:44,169
qui nécessitait de pouvoir modifier 
une instance,

186
00:11:44,169 --> 00:11:45,809
donc nécessite des accès internes

187
00:11:45,809 --> 00:11:48,850
et éventuellement
des copies supplémentaires inutiles,

188
00:11:48,850 --> 00:11:50,009
alors dans ce cas,

189
00:11:50,009 --> 00:11:53,899
il faut plutôt utiliser 
la surcharge interne.

190
00:11:53,899 --> 00:11:56,119
Vous connaissez maintenant 
l'essentiel de ce qu'il faut savoir

191
00:11:56,119 --> 00:12:00,330
sur la surcharge des opérateurs,
il vous reste une dernière séquence à suivre

192
00:12:00,330 --> 00:12:03,509
dans laquelle nous allons aborder 
des aspects un peu plus pointus

193
00:12:03,509 --> 00:12:06,589
et dans laquelle nous allons lever 
le voile sur un certain nombre de points

194
00:12:06,589 --> 00:12:07,669
laissés en suspens jusqu'ici.
