1
00:00:03,767 --> 00:00:05,187
Dans cette séquence vidéo,

2
00:00:05,187 --> 00:00:07,192
nous allons donc vous apporter
quelques compléments

3
00:00:07,192 --> 00:00:10,447
sur les aspects que nous avons laissés
de côté dans les vidéos précédentes,

4
00:00:10,447 --> 00:00:12,494
concernant la surcharge des opérateurs.

5
00:00:12,494 --> 00:00:14,788
Et nous vous donnerons aussi
quelques conseils pratiques.

6
00:00:14,998 --> 00:00:17,384
Mais laissez-moi commencer
par vous rappeler

7
00:00:17,384 --> 00:00:20,577
comment vous pouvez aborder en pratique
cette surcharge des opérateurs,

8
00:00:20,577 --> 00:00:23,345
en fonction de votre niveau
de programmation.

9
00:00:23,345 --> 00:00:27,076
La surcharge des opérateurs est en effet
un sujet assez difficile car technique,

10
00:00:27,076 --> 00:00:28,091
au cœur du langage.

11
00:00:28,091 --> 00:00:29,679
Il n'est pas forcément utile.

12
00:00:29,679 --> 00:00:32,387
Donc dans un premier temps,
vous pouvez évidemment vous contenter

13
00:00:32,387 --> 00:00:35,655
de ne pas faire de surcharge d'opérateur
comme nous faisions jusqu'à maintenant,

14
00:00:35,655 --> 00:00:37,913
mais c'est quand même
un sujet assez utile en pratique,

15
00:00:37,913 --> 00:00:40,675
on espère vous en avoir convaincus
dans les vidéos qui précèdent,

16
00:00:40,675 --> 00:00:43,456
et donc nous vous recommandons
bien sûr de l'aborder.

17
00:00:43,456 --> 00:00:45,861
Le premier niveau
que vous pouvez surcharger,

18
00:00:45,861 --> 00:00:47,730
c'est donc d'apporter
des opérations simples

19
00:00:47,730 --> 00:00:50,089
aux classes auxquelles
vous voulez apporter ces opérations,

20
00:00:50,089 --> 00:00:54,309
comme une addition, une multiplication,
sans entrer dans les détails

21
00:00:54,309 --> 00:00:59,221
et sans considérer les opérateurs d'auto
affectation comme par exemple « += », « -= ».

22
00:01:00,011 --> 00:01:03,283
A ce premier niveau, vous pouvez également
surcharger l'opérateur d'affichage,

23
00:01:03,283 --> 00:01:05,885
afin donc d'afficher plus naturellement,

24
00:01:05,885 --> 00:01:07,645
les objets des classes
que vous avez créées.

25
00:01:08,065 --> 00:01:11,631
Au niveau suivant, vous pouvez considérer
les opérateurs d'auto affectation,

26
00:01:12,301 --> 00:01:16,787
donc « += », *« = », mais les surcharger
en ignorant leurs valeurs de retour,

27
00:01:16,787 --> 00:01:18,922
donc on mettant un type de retour « void ».

28
00:01:18,922 --> 00:01:22,577
Et enfin, un dernier niveau, vous pouvez
faire la surcharge des opérateurs,

29
00:01:22,577 --> 00:01:26,893
en respectant strictement leurs prototypes
comme ceux qui sont donnés dans la norme,

30
00:01:26,893 --> 00:01:29,882
et donc par exemple,
pour les opérateurs d'auto affectation,

31
00:01:29,882 --> 00:01:33,371
retourner une référence
sur une instance de la classe.

32
00:01:33,711 --> 00:01:36,237
Voilà donc pour
ces 3 niveaux de surcharge,

33
00:01:36,237 --> 00:01:38,697
4 si l'on inclut aussi le fait
de ne pas surcharger,

34
00:01:38,697 --> 00:01:42,432
que nous vous proposons en pratique donc,
pour la surcharge des opérateurs.

35
00:01:42,432 --> 00:01:46,653
Regardons un petit peu quelques exemples
en détails au dernier niveau

36
00:01:46,653 --> 00:01:47,976
du transparent précédent.

37
00:01:47,976 --> 00:01:50,730
Nous avons déjà vu dans les séquences
vidéos qui précèdent,

38
00:01:50,730 --> 00:01:55,827
l'opérateur d'auto affectation « += »
qui permet donc d'écrire

39
00:01:55,827 --> 00:01:58,255
des expressions du genre « p += q ».

40
00:01:58,255 --> 00:02:01,617
Nous avions vu aussi
en surcharge externe, l'addition,

41
00:02:01,617 --> 00:02:05,518
qui permet donc de faire
des expressions du genre « r = p + q »

42
00:02:05,518 --> 00:02:07,842
donc c'est ici l'opérateur d'addition.

43
00:02:08,172 --> 00:02:11,734
De la même façon, on pourrait définir
l'opérateur de soustraction,

44
00:02:11,734 --> 00:02:17,850
l'opérateur d'auto-soustraction,
qui permettrait d'écrire « p -= q ».

45
00:02:17,850 --> 00:02:21,170
En considérant la la soustraction,
on a aussi le signe,

46
00:02:21,170 --> 00:02:23,364
c'est pas la soustraction ici,
mais c'est l'opposé.

47
00:02:23,364 --> 00:02:28,413
Donc si par exemple j'écris « r = -p »,
à ce moment-là c'est aussi un opérateur -,

48
00:02:28,413 --> 00:02:33,391
qui sera surchargé en interne
et qui ne prend pas ici d'arguments.

49
00:02:33,391 --> 00:02:35,552
Il n'y a pas de second argument
à cet opérateur.

50
00:02:35,552 --> 00:02:37,695
C'est ce qu'on appelle
un opérateur unaire.

51
00:02:37,695 --> 00:02:40,896
Nous avions aussi vu
l'opérateur d'affichage,

52
00:02:40,896 --> 00:02:43,741
qui permet donc d'afficher
les instances de nos classes,

53
00:02:43,741 --> 00:02:45,944
comme on affiche un « double » ou un « int ».

54
00:02:45,944 --> 00:02:49,481
Nous avions aussi vu donc
en multiplication externe,

55
00:02:49,481 --> 00:02:52,737
la multiplication à gauche
par un élément d'une autre classe.

56
00:02:52,737 --> 00:02:56,307
Donc par exemple ici « p » et « q »
sont des éléments de notre classe,

57
00:02:56,307 --> 00:02:57,877
donc par exemple des nombres complexes,

58
00:02:57,877 --> 00:03:01,310
mais « x » ici est un élément
qui est d'une autre classe

59
00:03:01,310 --> 00:03:02,496
ou d'un type de base.

60
00:03:02,496 --> 00:03:04,277
Donc par exemple on avait pris un « double ».

61
00:03:04,597 --> 00:03:07,677
On pourrait aussi par exemple avoir,
en interne, la multiplication,

62
00:03:07,677 --> 00:03:10,158
donc justement par un de ces autres types.

63
00:03:10,158 --> 00:03:13,370
On pourrait ici par exemple,
pour un nombre complexe « p »,

64
00:03:13,370 --> 00:03:17,543
faire p* = x, où x est un double.

65
00:03:18,233 --> 00:03:21,774
D'autres exemples encore,
on pourrait écrire l'opérateur « == »,

66
00:03:21,774 --> 00:03:24,137
pour par exemple faire « p == q ».

67
00:03:24,137 --> 00:03:30,473
Donc dans ce cas-là faites attention aussi
à penser à surcharger l'opérateur « != »,

68
00:03:30,473 --> 00:03:37,368
qui est intimement lié à l'opérateur « == »,
en définissant l'un à partir de l'autre.

69
00:03:37,668 --> 00:03:40,574
On pourrait aussi faire
des opérateurs de comparaisons ;

70
00:03:40,854 --> 00:03:43,215
donc par exemple pour faire « p < q ».

71
00:03:43,215 --> 00:03:47,018
Là aussi, pensez à ce moment-là à faire
les opérateurs inférieur ou égal,

72
00:03:47,018 --> 00:03:51,454
et si ça a un sens, les opérateurs
supérieur et supérieur ou égal,

73
00:03:51,474 --> 00:03:56,629
en définissant l'un de ces 4
et en écrivant les 3 autres

74
00:03:56,629 --> 00:04:00,954
à partir de l'un de ces 4,
pour garantir l'intégrité sémantique,

75
00:04:00,954 --> 00:04:04,406
c'est-à-dire le fait qu'ils se comportent
correctement tous ensemble.

76
00:04:04,786 --> 00:04:08,526
Voilà donc différents exemples encore :
l'opérateur d'auto-incrémant,

77
00:04:08,526 --> 00:04:12,248
ici « ++p » comme ceci avec cette écriture.

78
00:04:12,838 --> 00:04:15,054
Dans la suite nous allons
tour à tour nous intéresser à :

79
00:04:15,054 --> 00:04:18,875
Pourquoi avoir mis un « const »
au type de retour de l'addition ?

80
00:04:19,405 --> 00:04:22,454
Pourquoi ce type de retour
pour l'opérateur d'affichage ?

81
00:04:22,854 --> 00:04:27,010
Quel type de retour pour l'opérateur
d'auto-affectation, par exemple « += » ?

82
00:04:27,010 --> 00:04:30,618
Pourquoi ici une référence
sur une instance de classe ?

83
00:04:30,618 --> 00:04:33,611
Et puis nous terminerons
par quelques conseils pratiques

84
00:04:33,611 --> 00:04:36,582
et reviendrons sur l'opérateur
d'affectation « = ».

85
00:04:37,222 --> 00:04:41,161
Commençons donc par le type de retour de,
par exemple, l'opérateur d'addition.

86
00:04:41,161 --> 00:04:45,909
Pourquoi avoir mis un « const »
comme type de retour de cet opérateur,

87
00:04:45,909 --> 00:04:49,429
qui je vous le rappelle nous permet
d'écrire des expressions

88
00:04:49,429 --> 00:04:53,583
du genre « z3 = z1 + z2 ».

89
00:04:53,583 --> 00:04:57,149
Donc le type de retour ici,
clairement, est un nombre complexe.

90
00:04:57,149 --> 00:04:59,082
Mais pourquoi avoir mis « const » ?

91
00:04:59,082 --> 00:05:03,440
Eh bien simplement pour ne pas permettre
des expressions du genre « z1 + z2 »,

92
00:05:03,440 --> 00:05:06,791
qui est bien effectivement l'équivalent

93
00:05:08,541 --> 00:05:13,572
de l'appel « operator + (z1,z2) »

94
00:05:13,572 --> 00:05:16,314
Donc c'est bien le type de retour
de cet opérateur.

95
00:05:16,314 --> 00:05:20,467
Et puis ensuite, on pourrait
imaginer écrire comme ça,

96
00:05:20,467 --> 00:05:22,492
incrémenter cette valeur de retour.

97
00:05:22,492 --> 00:05:25,812
Qu'est-ce que ça aurait
comme sens de faire ceci ?

98
00:05:25,812 --> 00:05:31,998
Qu'est-ce que ça aurait comme sens
d'incrémenter l'addition de « z1,z2 » ?

99
00:05:31,998 --> 00:05:36,301
Le résultat de l'addition de « z1,z2 »
c'est un résultat, c'est une constante,

100
00:05:36,301 --> 00:05:37,615
on ne peut pas l'incrémenter.

101
00:05:37,615 --> 00:05:41,642
Et donc pour empêcher justement
ce genre d'écriture,

102
00:05:41,642 --> 00:05:46,628
on va mettre le type « const » pour aussi
empêcher ce genre d'écriture,

103
00:05:46,628 --> 00:05:51,007
de l'écrire donc du côté gauche
d'une expression « = »

104
00:05:51,007 --> 00:05:55,503
Par exemple « z1 + z2 » qui serait,
sans « const », un nombre complexe,

105
00:05:55,503 --> 00:05:59,699
qu'on pourrait mettre
ici donc du côté gauche d'un signe égal.

106
00:05:59,699 --> 00:06:02,515
Là aussi ce genre d'expression
n'a absolument aucun sens.

107
00:06:02,515 --> 00:06:07,614
Donc pour empêcher le fait de le mettre
de ce côté-là d'un signe égal,

108
00:06:07,614 --> 00:06:12,038
on va donc définir ce type de retour
comme étant un « const complexe »,

109
00:06:12,038 --> 00:06:14,904
c'est-à-dire un complexe
que l'on ne peut pas modifier,

110
00:06:14,904 --> 00:06:17,328
le résultat d'une addition,
c'est ce nombre complexe.

111
00:06:17,328 --> 00:06:19,800
On peut pas modifier
le résultat d'une addition.

112
00:06:20,380 --> 00:06:21,386
Deuxième point :

113
00:06:21,386 --> 00:06:26,059
pourquoi l'opérateur d'affichage
retourne t-il donc un « ostream& » ?

114
00:06:26,059 --> 00:06:29,190
Regardons par exemple un affichage
tout à fait standard,

115
00:06:29,190 --> 00:06:32,668
par exemple pour un complexe « z1 »,
qu'on pourrait écrire comme ça

116
00:06:32,668 --> 00:06:36,933
« cout << z1 << endl »

117
00:06:36,933 --> 00:06:41,128
Si l'on regarde ceci, on voit
que cette expression, appelons-la « A »,

118
00:06:41,128 --> 00:06:46,404
cette ligne est donc du genre « A << endl ».

119
00:06:46,404 --> 00:06:51,177
C'est donc bien ici un appel
à « opérateur d'affichage »,

120
00:06:51,177 --> 00:06:56,660
« operator << (A,endl) »

121
00:06:58,570 --> 00:07:01,963
C'est à dire si je réécris « A »
pour ce qu'il est,

122
00:07:01,963 --> 00:07:03,630
c'est-à-dire « cout << z1 ».

123
00:07:03,630 --> 00:07:10,587
L'expression « cout << z1 << endl »

124
00:07:11,697 --> 00:07:14,560
est équivalente à « operator << » ;

125
00:07:15,240 --> 00:07:19,075
premier argument :
le résultat donc de « cout << z1 »

126
00:07:19,075 --> 00:07:20,904
et deuxième argument : le « endl ».

127
00:07:20,904 --> 00:07:23,310
Mais ceci, « cout << z1 »,

128
00:07:23,310 --> 00:07:27,366
est lui-même l'appel de
« opérateur d'affichage de « cout » et « z1 » ».

129
00:07:27,366 --> 00:07:33,823
Donc « cout << z1 << endl »
est équivalent en fait à l'appel

130
00:07:33,823 --> 00:07:38,034
« opérateur d'affichage de opérateur
d'affichage sur « cout » et « z1 »

131
00:07:38,494 --> 00:07:39,991
et ensuite « endl » » ;

132
00:07:39,991 --> 00:07:45,482
où l'on voit que la valeur de retour
de l'appel « operator << (cout, z1) »

133
00:07:45,482 --> 00:07:50,547
est passé comme premier argument
d'un « opérateur inférieur inférieur ».

134
00:07:50,547 --> 00:07:56,606
Et donc cette expression doit être ici
de même type que le premier argument

135
00:07:56,606 --> 00:07:58,869
de « l'opérateur inférieur inférieur ».

136
00:07:58,869 --> 00:08:03,011
Toute cette expression doit être
de type « ostream& ».

137
00:08:03,481 --> 00:08:09,778
Voilà pourquoi la valeur de retour
de « operator affichage » doit être « ostream& »,

138
00:08:09,778 --> 00:08:13,829
pour pouvoir comme ça,
le remettre dans un deuxième appel,

139
00:08:13,829 --> 00:08:15,350
voir un troisième appel.

140
00:08:15,350 --> 00:08:18,042
Si vous aviez écrit « void »
comme type de retour,

141
00:08:18,042 --> 00:08:19,707
il ne faut jamais faire ça

142
00:08:19,707 --> 00:08:22,915
parce que si vous aviez écrit « void »
comme type de retour,

143
00:08:22,915 --> 00:08:26,059
vous ne pourriez pas écrire
des expressions du genre

144
00:08:26,059 --> 00:08:28,943
« cout << z1 << endl »

145
00:08:28,943 --> 00:08:34,219
Ce second « << » ici
ne pourrait pas avoir lieu,

146
00:08:34,219 --> 00:08:39,145
puisque vous auriez une première
expression ici qui retournerait un « void »

147
00:08:39,145 --> 00:08:43,550
et donc vous auriez quelque chose de type
« void » suivi de « << endl »,

148
00:08:43,550 --> 00:08:45,440
ce qui n'a absolument aucun sens.

149
00:08:45,940 --> 00:08:50,415
C'est donc bien pour pouvoir enchaîner
ainsi les appels à l'opérateur d'affichage

150
00:08:50,415 --> 00:08:53,288
que cet opérateur a besoin
de retourner un type

151
00:08:53,288 --> 00:08:56,437
qui est compatible
avec son premier argument.

152
00:08:56,437 --> 00:08:59,632
C'est à dire un flot
dans lequel on peut écrire

153
00:08:59,632 --> 00:09:03,088
un « ostream » passé
par référence, un « oastream& ».

154
00:09:04,028 --> 00:09:08,619
Troisième complément, quel type de retour
pour les opérateurs d'auto affectation

155
00:09:08,619 --> 00:09:11,096
comme par exemple l'opérateur « += »

156
00:09:11,096 --> 00:09:14,398
Si j'écris quelque chose
du genre « z1 += z2 »,

157
00:09:14,398 --> 00:09:17,784
je vous rappelle que
c'est équivalent à l'appel

158
00:09:17,784 --> 00:09:22,689
« z1.operator+= », surcharge interne,
« de z2 ».

159
00:09:22,689 --> 00:09:27,351
Et on voit donc ici
que cet appel est autonome,

160
00:09:27,351 --> 00:09:29,756
il n'y a pas d'expression devant,

161
00:09:29,756 --> 00:09:34,793
on n'a pas écrit quelque chose
du genre « z = z1.operator+=(z2) »

162
00:09:34,793 --> 00:09:37,946
Et donc justement puisque
l'on n'a pas écrit ceci,

163
00:09:37,946 --> 00:09:40,386
c'est pour ça qu'au premier
niveau de surcharge,

164
00:09:40,386 --> 00:09:44,853
on vous conseille comme type de retour,
de mettre simplement « void ».

165
00:09:44,853 --> 00:09:47,082
Ce qui correspond
au premier niveau de surcharge

166
00:09:47,082 --> 00:09:49,175
dont nous parlions dans l'introduction.

167
00:09:49,175 --> 00:09:51,443
Mais il faut savoir qu'en C++,

168
00:09:51,443 --> 00:09:55,616
toute expression fait quelque chose
et toute expression vaut quelque chose.

169
00:09:55,616 --> 00:09:57,687
Par exemple, si j'ai une expression,

170
00:09:57,687 --> 00:10:01,680
je peux tout à fait écrire
« x = » cette expression.

171
00:10:01,680 --> 00:10:05,824
Donc par exemple je peux tout à fait
écrire ce que j'ai suggéré tout à l'heure,

172
00:10:05,824 --> 00:10:10,133
« z3 = » l'expression « (z1 += z2) ».

173
00:10:10,133 --> 00:10:14,723
On a ici une expression « (z1 += z2) »
qui fait quelque chose,

174
00:10:14,723 --> 00:10:16,932
c'est-à-dire qu'elle ajoute « z2 » à « z1 »,

175
00:10:16,932 --> 00:10:20,820
mais qui en tant que telle aussi
vaut quelque chose

176
00:10:20,820 --> 00:10:26,963
et peut donc en tant que telle être,
par exemple affectée à « z3 ».

177
00:10:27,453 --> 00:10:29,093
Que vaut cette expression ?

178
00:10:29,093 --> 00:10:33,646
Eh bien ce qu'il faut savoir,
c'est que cette expression « (z1 += z2) »,

179
00:10:33,646 --> 00:10:40,443
vaut le résultat de « z1 », la valeur de « z1 »
après l'affectation.

180
00:10:41,183 --> 00:10:45,243
Donc toute cette expression
est bien de type complexe,

181
00:10:45,243 --> 00:10:48,863
puisque « z1 » et « z2 »
sont ici des complexes.

182
00:10:48,863 --> 00:10:54,600
C'est pour ça qu'à un niveau avancé,
le type de retour de cet opérateur « += »,

183
00:10:54,600 --> 00:10:59,190
n'est plus « void » mais est donc un « complexe ».

184
00:10:59,750 --> 00:11:03,975
Ceci dit ce complexe
en question existe déjà !

185
00:11:03,975 --> 00:11:08,131
C'est « z1 » après le résultat
de cette auto affectation.

186
00:11:08,131 --> 00:11:11,989
Donc ce n'est pas un nouveau complexe,
c'est un complexe qui existe déjà.

187
00:11:11,989 --> 00:11:14,990
Et donc on va pas recréer
un nouveau complexe,

188
00:11:14,990 --> 00:11:21,182
mais on va simplement passer une référence
sur un complexe qui existe déjà.

189
00:11:21,182 --> 00:11:24,482
C'est donc pour ces raisons
que les types de retour plus avancés,

190
00:11:24,482 --> 00:11:28,802
pour les opérateurs d'auto affectation,
compatibles avec la norme,

191
00:11:28,802 --> 00:11:31,650
sont des références sur des instances,

192
00:11:31,650 --> 00:11:34,333
donc par exemple référence
sur un complexe.

193
00:11:34,333 --> 00:11:36,527
Voyons maintenant comment
tout ceci se définit.

194
00:11:36,877 --> 00:11:41,159
Donc on fait une surcharge en interne
dans la classe de l'opérateur « += »

195
00:11:41,159 --> 00:11:44,158
qui reçoit donc le deuxième argument,

196
00:11:44,158 --> 00:11:47,067
la valeur que l'on veut rajouter
à l'instance courante,

197
00:11:47,067 --> 00:11:49,419
et qui retourne donc ici,
au niveau plus avancé,

198
00:11:49,419 --> 00:11:51,989
une référence sur un nombre complexe.

199
00:11:51,989 --> 00:11:55,862
On mettra une référence à chaque fois que
l'on retourne un complexe qui existe déjà.

200
00:11:55,862 --> 00:11:58,154
Ce n'est pas une nouvelle valeur.

201
00:11:58,154 --> 00:12:01,205
Dans cette expression ici,
on retourne la valeur de « z1 ».

202
00:12:01,205 --> 00:12:03,727
Et donc on le définirait
de la façon suivante,

203
00:12:03,727 --> 00:12:08,599
avec on commence ici par l'entête, et puis
ensuite comme on l'avait déjà vu donc,

204
00:12:08,599 --> 00:12:13,599
l'ajout de la valeur de « x de z2 »
à l'attribut « x » courant,

205
00:12:13,599 --> 00:12:18,385
l'ajout de l'attribut « y de z2 »
à l'attribut « y » courant.

206
00:12:18,385 --> 00:12:20,750
Mais ce que l'on rajoute,
ce qui change maintenant,

207
00:12:20,750 --> 00:12:23,197
c'est que comme on a ici
un type de retour, il faut retourner.

208
00:12:23,197 --> 00:12:25,948
Retourner qui ?
Retourner l'instance courante.

209
00:12:25,948 --> 00:12:27,951
Et qui est l'instance courante ?

210
00:12:27,951 --> 00:12:32,525
C'est la valeur
qui est stockée à mon adresse.

211
00:12:32,525 --> 00:12:36,360
Ici « this » est un pointeur
sur l'instance courante

212
00:12:36,360 --> 00:12:42,627
et donc *« this » c'est la valeur stockée
à l'adresse de l'instance courante.

213
00:12:42,627 --> 00:12:46,228
C'est-à-dire par exemple ici,
la valeur de « z1 ».

214
00:12:46,738 --> 00:12:49,838
Terminons par des considérations pratiques
mais qui ont vraiment leur importance.

215
00:12:49,838 --> 00:12:54,503
Nous avons ici défini comme type de retour
une référence sur un nombre complexe,

216
00:12:54,503 --> 00:12:58,093
parce que ce complexe
de retour ici existait déjà.

217
00:12:58,093 --> 00:12:59,829
Si on avait pas mis de référence,

218
00:12:59,829 --> 00:13:02,625
on aurait alors recréé
un nouveau complexe,

219
00:13:02,625 --> 00:13:05,689
une nouvelle copie d'un complexe
qui existait déjà,

220
00:13:05,689 --> 00:13:09,898
ce qui est une copie supplémentaire
qu'il n'est pas nécessaire de faire.

221
00:13:09,898 --> 00:13:13,316
Et de façon très générale donc,
on peut vous donner les conseils suivants.

222
00:13:13,316 --> 00:13:17,667
Il faut écrire la surcharge des opérateurs
avec beaucoup d'attention.

223
00:13:17,667 --> 00:13:22,138
En faisant extrêmement attention
à ne pas faire des copies supplémentaires,

224
00:13:22,138 --> 00:13:25,614
à ne pas péjorer le code que vous écrivez
par des opérations inutiles.

225
00:13:25,614 --> 00:13:29,703
Puisqu'en effet, les opérateurs
ont pour but d'être utilisés très souvent,

226
00:13:29,703 --> 00:13:32,500
dans beaucoup d'expressions,
certainement vont se répéter.

227
00:13:32,500 --> 00:13:35,714
Et donc quelque chose qui serait mal écrit
au niveau d'un opérateur,

228
00:13:35,714 --> 00:13:39,048
d'une opération aussi profonde
qu'un opérateur,

229
00:13:39,048 --> 00:13:41,367
pourrait avoir des répercussions
assez importantes

230
00:13:41,367 --> 00:13:44,059
sur le programme de façon globale.

231
00:13:44,059 --> 00:13:47,199
Et donc utilisez
les références à bon escient.

232
00:13:47,199 --> 00:13:51,633
Eviter des copies inutiles,
comme dans cet exemple.

233
00:13:51,633 --> 00:13:56,705
On a ici écrit deux versions
de l'opérateur d'auto affectation « += »

234
00:13:56,705 --> 00:14:00,541
La version standard, qui ne fait pas
de copies supplémentaires

235
00:14:00,541 --> 00:14:02,667
et qui est la version qu'on
vous a proposée

236
00:14:02,667 --> 00:14:04,658
dans les transparents précédents.

237
00:14:04,658 --> 00:14:07,100
Et puis une version ici
que je vais détailler,

238
00:14:07,100 --> 00:14:09,382
qui fait entre une à trois copies.

239
00:14:09,382 --> 00:14:12,158
Donc une à trois copies,
je vais pas rentrer dans les détails ici,

240
00:14:12,158 --> 00:14:14,854
mais ça dépend en fait des options
de votre compilateur.

241
00:14:15,354 --> 00:14:20,295
Donc regardons en détails cette version
de l'opérateur d'auto affectation.

242
00:14:20,295 --> 00:14:22,188
D'abord comme type de retour ici,

243
00:14:22,188 --> 00:14:24,071
on a choisi de retourner
un nombre complexe

244
00:14:24,071 --> 00:14:27,104
et non pas une référence
sur un nombre complexe.

245
00:14:27,104 --> 00:14:29,754
Puis ensuite du côté de l'argument ici,

246
00:14:29,754 --> 00:14:31,961
on a aussi décidé de passer
un nombre complexe

247
00:14:31,961 --> 00:14:35,364
et de ne pas passer
par référence constante.

248
00:14:35,364 --> 00:14:39,297
Ce qui fait déjà que
lorsque l'on a une écriture,

249
00:14:39,297 --> 00:14:43,366
par exemple du genre « z1 += z2 »

250
00:14:43,366 --> 00:14:48,890
qui correspond donc à « z1.operator+=(z2) »

251
00:14:48,890 --> 00:14:54,998
On a ici un passage par valeur,
donc on a déjà ici possiblement

252
00:14:54,998 --> 00:15:00,478
une première copie
du passage de cet argument.

253
00:15:00,478 --> 00:15:02,944
Elle peut être optimisée
par le compilateur mais pas forcément,

254
00:15:02,944 --> 00:15:06,325
donc ça ferait possiblement,
une première copie ici.

255
00:15:06,325 --> 00:15:12,336
Et puis donc en ce qui concerne
la valeur de retour ici,

256
00:15:12,336 --> 00:15:14,712
si on veut utiliser la valeur de retour,

257
00:15:14,712 --> 00:15:17,751
ça veut dire qu'on écrirait
une expression du genre

258
00:15:17,751 --> 00:15:23,359
« z3 = (z1 += z2) »

259
00:15:23,839 --> 00:15:29,035
Et donc ici aussi nous allons avoir,
par valeur de retour ici,

260
00:15:29,035 --> 00:15:33,997
un nouveau nombre complexe puisqu'on a pas
retourné par référence qui va être créée,

261
00:15:33,997 --> 00:15:37,905
et donc on aura ici une deuxième copie,

262
00:15:39,565 --> 00:15:41,363
qui va être effectuée.

263
00:15:41,563 --> 00:15:47,581
Puis si l'on regarde maintenant en détails
le corps de la définition de cet opérateur

264
00:15:47,581 --> 00:15:50,040
puisqu'on a décidé ici de retourner
un nombre complexe,

265
00:15:50,040 --> 00:15:54,569
on se dit on va le déclarer en interne
pour pouvoir le retourner.

266
00:15:54,569 --> 00:15:58,038
Le reste ici des opérations
est comme d'habitude,

267
00:15:58,038 --> 00:16:03,292
mais pour pouvoir retourner ce complexe,
je veux retourner l'instance courante

268
00:16:03,292 --> 00:16:08,379
et donc je recopie ici avec
une troisième copie.

269
00:16:08,849 --> 00:16:10,950
Je recopie l'instance courante.

270
00:16:10,950 --> 00:16:15,754
Je rappelle que c'est le contenu
pointé par le pointeur « this »

271
00:16:15,754 --> 00:16:21,759
donc c'est bien la valeur de l'instance
courante que je recopie ici, dans « z3 ».

272
00:16:22,159 --> 00:16:23,896
Donc voilà les trois copies possibles.

273
00:16:23,896 --> 00:16:27,107
Certaines de ces copies peuvent être
optimisées par vos compilateurs.

274
00:16:27,107 --> 00:16:29,734
Alors que dans cette version ici

275
00:16:29,734 --> 00:16:32,725
on passe déjà premièrement
par référence constante,

276
00:16:32,725 --> 00:16:37,327
donc ici on n'a pas de copie mais bien
la référence sur « z2 »,

277
00:16:37,327 --> 00:16:39,569
qui est passée directement,
donc pas de copie.

278
00:16:39,569 --> 00:16:43,136
Du côté du retour, de la même façon,
on n'a pas de copie,

279
00:16:43,136 --> 00:16:46,476
mais on a passé la référence
de l'instance courante.

280
00:16:46,476 --> 00:16:50,522
Et puis en interne ici, on n'a pas déclaré
de complexes supplémentaires.

281
00:16:50,522 --> 00:16:53,464
On n'a donc pas non plus
cette troisième copie.

282
00:16:54,414 --> 00:16:55,751
Donc tout ceci pour dire :

283
00:16:55,751 --> 00:17:00,421
faites bien attention lorsque vous écrivez
la surcharge des opérateurs.

284
00:17:00,421 --> 00:17:02,268
Je voudrais conclure cette vidéo,

285
00:17:02,268 --> 00:17:05,507
sur les compléments
de la surcharge des opérateurs,

286
00:17:05,507 --> 00:17:08,441
en revenant sur un opérateur
un peu particulier,

287
00:17:08,441 --> 00:17:11,626
qui est l'opérateur « = »,
l'opérateur d'affectation.

288
00:17:11,896 --> 00:17:17,193
Cet opérateur, qui est utilisé par exemple
chaque fois qu'on écrit « a = b », « z1 = z2 »,

289
00:17:17,193 --> 00:17:19,401
est d'abord un opérateur particulier,

290
00:17:19,401 --> 00:17:22,302
en ce sens qu'il est fourni
pour toutes les classes.

291
00:17:22,302 --> 00:17:24,104
Il est un opérateur
qu'on appelle universel.

292
00:17:24,104 --> 00:17:26,116
Vous n'avez pas besoin de le redéfinir,

293
00:17:26,116 --> 00:17:29,802
il existe déjà pour toutes les classes
que vous pouvez créer.

294
00:17:30,362 --> 00:17:31,710
Comme nous l'avions déjà dit

295
00:17:31,710 --> 00:17:35,744
dans les vidéos sur la construction
de copie et sur la destruction,

296
00:17:35,744 --> 00:17:39,769
la redéfinition possible,
si vous avez besoin de cet opérateur,

297
00:17:39,769 --> 00:17:43,370
est intimement liée à la redéfinition
du constructeur de copie.

298
00:17:43,370 --> 00:17:46,853
La différence entre la construction
de copie et l'affectation,

299
00:17:46,853 --> 00:17:49,083
c'est que la construction de copie
est une construction.

300
00:17:49,083 --> 00:17:51,438
Elle a lieu lors d'une initialisation.

301
00:17:51,438 --> 00:17:55,883
Alors que l'affectation opère
sur des instances qui existent déjà.

302
00:17:56,633 --> 00:17:59,663
Comme pour le constructeur de copie
et comme pour le destructeur,

303
00:17:59,663 --> 00:18:02,578
la version par défaut
fait une copie de surface.

304
00:18:02,578 --> 00:18:05,983
On reviendra sur la notion
de copie de surface et de copie profonde

305
00:18:05,983 --> 00:18:07,507
dans les prochaines semaines,

306
00:18:07,507 --> 00:18:11,434
mais cette copie de surface est suffisante
dans la très grande majorité des cas.

307
00:18:11,434 --> 00:18:15,456
Donc dans la très grande majorité des cas,
vous n'aurez pas besoin

308
00:18:15,456 --> 00:18:18,658
de redéfinir cet opérateur d'affectation.

309
00:18:19,168 --> 00:18:22,349
Par contre il peut être parfois nécessaire
de carrément le supprimer,

310
00:18:22,349 --> 00:18:23,959
cet opérateur d'affectation.

311
00:18:23,959 --> 00:18:26,760
Supposons que l'on ait
par exemple une énorme classe,

312
00:18:26,760 --> 00:18:29,329
c'est-à-dire une classe où,
si l'on créé une instance,

313
00:18:29,329 --> 00:18:32,388
cette instance utilise 
beaucoup de place en mémoire.

314
00:18:32,388 --> 00:18:36,702
On voudrait absolument pas que l'on puisse
copier les instances de cette classe.

315
00:18:36,702 --> 00:18:39,351
Une instance de cette classe
nous suffit largement

316
00:18:39,351 --> 00:18:42,787
et on veut donc absolument éviter
d'avoir comme ça des copies.

317
00:18:42,787 --> 00:18:45,773
Donc pour ça on va supprimer
l'opérateur d'affectation,

318
00:18:45,773 --> 00:18:47,283
qui s'appelle donc « operator = »

319
00:18:48,133 --> 00:18:50,335
en écrivant une syntaxe

320
00:18:50,335 --> 00:18:53,489
qu'on avait déjà rencontrée
pour supprimer le constructeur de copie

321
00:18:53,489 --> 00:18:57,019
qui est, en rajoutant
derrière son prototype

322
00:18:57,019 --> 00:18:59,765
comme ça, dans la classe,
c'est une surcharge interne ;

323
00:18:59,765 --> 00:19:02,257
en rajoutant ici « =delete ».

324
00:19:02,257 --> 00:19:06,588
Ça va empêcher de faire comme cela
des affectations entre instances

325
00:19:06,588 --> 00:19:08,883
de cette énorme classe.

326
00:19:08,883 --> 00:19:10,943
J'en profite également pour vous montrer

327
00:19:10,943 --> 00:19:13,086
le prototype de cet
opérateur d'affectation,

328
00:19:13,086 --> 00:19:15,580
qui s'appelle bien sûr « operator = »

329
00:19:15,580 --> 00:19:20,025
qui donc est appelé quand on a
des expressions de type « a = b »

330
00:19:20,025 --> 00:19:22,537
c'est-à-dire que l'appel équivalent,

331
00:19:22,537 --> 00:19:27,346
c'est « a.operator = », surcharge interne,

332
00:19:27,346 --> 00:19:30,752
on ne peut pas faire de surcharge externe
de l'opérateur d'affectation,

333
00:19:30,752 --> 00:19:33,678
« a.operator = b »

334
00:19:33,678 --> 00:19:39,156
Donc on prend ici quelque chose
qui est de même type que « a »,

335
00:19:39,156 --> 00:19:43,168
donc forcément, on va avoir la même classe

336
00:19:43,168 --> 00:19:47,337
que la classe dans laquelle on est
en train de surcharger cet opérateur.

337
00:19:47,337 --> 00:19:51,298
Pour éviter une copie,
on va le passer par référence constante

338
00:19:51,298 --> 00:19:55,191
et comme on a le droit en C++
d'écrire des choses du genre

339
00:19:55,191 --> 00:19:58,154
« a = b = c »,

340
00:19:58,154 --> 00:20:01,888
sous-entendu « a = » le résultat de « (b = c) ».

341
00:20:01,888 --> 00:20:06,448
C'est à dire que cette expression « (b = c) »
a également une valeur de retour,

342
00:20:06,448 --> 00:20:10,219
qui est la valeur de « b » après affectation,
c'est-à-dire la valeur de « c » ;

343
00:20:10,579 --> 00:20:15,741
et qui est de même type,
exactement comme « += », « -= »

344
00:20:15,741 --> 00:20:17,936
de même type que la classe

345
00:20:17,936 --> 00:20:21,175
dans laquelle on est en train
de surcharger cet opérateur.

346
00:20:21,175 --> 00:20:24,799
Et toujours pour les mêmes raisons,
on va faire ce retour par référence,

347
00:20:24,799 --> 00:20:27,835
pour éviter des copies supplémentaires.

348
00:20:28,455 --> 00:20:32,051
Enfin on a dit qu'il n'était pas
nécessaire de redéfinir cet opérateur.

349
00:20:32,051 --> 00:20:34,085
Dans la très grande majorité des cas,

350
00:20:34,085 --> 00:20:35,958
celui qui est fourni
par défaut vous suffira,

351
00:20:35,958 --> 00:20:39,964
mais si jamais vous deviez
redéfinir cet opérateur,

352
00:20:39,964 --> 00:20:43,893
alors en C++ 2011, nous vous conseillons
de suivre le schéma suivant :

353
00:20:43,893 --> 00:20:46,688
d'utiliser ce qu'on appelle
la fonction « swap ».

354
00:20:46,688 --> 00:20:50,325
La fonction « swap » permet
d'échanger deux arguments.

355
00:20:50,325 --> 00:20:55,798
Donc « swap(a, b) » va échanger
les valeurs entre « a » et « b ».

356
00:20:55,798 --> 00:20:58,427
C'est à dire que la valeur de « b »
va se retrouver dans « a »

357
00:20:58,427 --> 00:21:01,561
et la valeur de « a » va se retrouver dans « b ».

358
00:21:01,561 --> 00:21:06,122
Cette fonction « swap », vous la redéfiniriez
vous-même pour votre classe.

359
00:21:06,122 --> 00:21:08,826
Donc si par exemple, dans votre classe,

360
00:21:08,826 --> 00:21:14,465
vous avez les attributs
« X » et « Y » de types « x, y »,

361
00:21:14,985 --> 00:21:17,342
alors vous feriez quelque
chose comme ceci :

362
00:21:17,822 --> 00:21:24,288
la fonction « swap » ne renvoie rien,
elle prend deux instances de votre classe.

363
00:21:27,258 --> 00:21:30,974
Mais comme elle doit les modifier
pour les échanger,

364
00:21:30,974 --> 00:21:34,299
elle va bien sûr les prendre
par référence.

365
00:21:34,299 --> 00:21:40,874
Et donc par exemple, utiliser la fonction
« swap » fournie par la bibliothèque « utility »,

366
00:21:40,874 --> 00:21:44,651
donc faire un « #include <utility> »
au début de son programme,

367
00:21:44,651 --> 00:21:48,029
pour utiliser cette fonction « swap »,

368
00:21:48,029 --> 00:21:54,509
pour échanger donc les attributs « x »
des instances « a » et « b »,

369
00:21:55,539 --> 00:21:59,667
les attributs « y » des instances « a » et « b »,

370
00:21:59,967 --> 00:22:04,050
et ainsi de suite pour tous les attributs
qu'il faudrait donc échanger.

371
00:22:04,600 --> 00:22:08,946
Et le schéma pour la redéfinition
de l'opérateur d'affectation,

372
00:22:08,946 --> 00:22:10,622
que nous vous conseillons, est :

373
00:22:10,622 --> 00:22:13,148
et donc avec ici une petite différence

374
00:22:13,148 --> 00:22:15,509
pour des raisons
d'optimisation en C++ 2011,

375
00:22:15,509 --> 00:22:19,052
qui dépasse le cadre de ce cours,
mais qui permet au compilateur

376
00:22:19,052 --> 00:22:20,538
soit d'éviter de faire des copies,

377
00:22:20,538 --> 00:22:23,499
soit même d'utiliser
ce qu'on appelle le déplacement.

378
00:22:23,499 --> 00:22:25,255
Mais ça nous amènerait
un peu trop loin.

379
00:22:25,255 --> 00:22:28,502
Donc ça c'est vraiment une raison
d'optimisation encore plus avancée.

380
00:22:28,502 --> 00:22:32,056
Ici on a bien effectivement
pris un passage par valeurs,

381
00:22:32,316 --> 00:22:36,009
et donc d'utiliser cette fonction
« swap » qui va échanger

382
00:22:36,009 --> 00:22:40,769
le contenu de l'instance courante
avec le contenu de cette variable ici,

383
00:22:40,769 --> 00:22:44,963
qui est le paramètre
de l'opérateur d'affectation

384
00:22:44,963 --> 00:22:46,910
qu'on est en train de redéfinir.

385
00:22:46,910 --> 00:22:52,994
Donc ici, ça va bien, si j'écris « a = b »,
ici ça va bien être un « swap »,

386
00:22:52,994 --> 00:22:59,447
entre 'a', qui est l'instance courante,
c'est bien « a. operator = b »

387
00:23:02,137 --> 00:23:06,202
Donc ici *« this » qui jouerait le rôle de « a »

388
00:23:06,202 --> 00:23:11,098
et puis « source » qui serait ici une copie,
ou alors un déplacement de « b ».

389
00:23:11,098 --> 00:23:14,725
Et donc on échange les deux valeurs,
ce qui fait qu'on a bien effectivement

390
00:23:14,725 --> 00:23:16,683
la valeur de « b » qui est mise dans « a ».

391
00:23:16,683 --> 00:23:20,610
Et attention ici, cet échange se fait
avec la copie locale source,

392
00:23:20,610 --> 00:23:23,354
donc c'est pas du tout la valeur de « a »
qui est mise dans « b »,

393
00:23:23,354 --> 00:23:26,521
mais la valeur de « a » est mise dans « source »,

394
00:23:26,521 --> 00:23:31,288
c'est-à-dire ce dans quoi on a copié « b ».

395
00:23:31,288 --> 00:23:33,316
Donc il n'y a aucun risque
de pollution de « b ».

396
00:23:33,316 --> 00:23:38,764
Et enfin toujours pour les mêmes raisons
que pour l'opérateur « += »,

397
00:23:38,764 --> 00:23:43,428
on retourne ici la référence
sur l'instance courante,

398
00:23:43,428 --> 00:23:50,079
puisqu'on peut tout à fait écrire
des expressions du genre « c = a = b ».

399
00:23:50,639 --> 00:23:53,707
Voilà tout ceci qui conclut
cette dernière séquence vidéo,

400
00:23:53,707 --> 00:23:55,679
certainement un peu technique et avancée,

401
00:23:55,679 --> 00:23:56,807
sur tous les compléments,

402
00:23:56,807 --> 00:24:00,060
que nous voulions vous apporter
concernant ce sujet assez pointu,

403
00:24:00,060 --> 00:24:02,558
de la surcharge des opérateurs.
