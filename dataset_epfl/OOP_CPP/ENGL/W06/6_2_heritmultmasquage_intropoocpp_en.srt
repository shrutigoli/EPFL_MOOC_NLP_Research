1
00:00:03,948 --> 00:00:05,316
We have seen that, in C++;

2
00:00:05,316 --> 00:00:07,774
a class can inherit from
several super-classes.

3
00:00:07,774 --> 00:00:10,074
We call this multiple inheritance.

4
00:00:10,074 --> 00:00:12,261
What happens if several
super-classes

5
00:00:12,261 --> 00:00:15,829
provide, to one of their sub-classes
a member with the same name?

6
00:00:15,829 --> 00:00:17,497
This ambiguous situation

7
00:00:17,497 --> 00:00:18,842
will be the subject

8
00:00:18,842 --> 00:00:20,907
of today's video.

9
00:00:20,907 --> 00:00:24,276
The rules on multiple inheritance's
access rights

10
00:00:24,276 --> 00:00:26,235
are the same as simple inheritance's.

11
00:00:26,235 --> 00:00:29,756
This means that a sub-class
can directly access the members

12
00:00:29,756 --> 00:00:31,344
(i.e., attributes and methods)

13
00:00:31,344 --> 00:00:34,340
protected (or public, of course) from the
super-classes.

14
00:00:34,340 --> 00:00:36,368
The new question,

15
00:00:36,368 --> 00:00:38,256
regarding multiple inheritance is:

16
00:00:38,256 --> 00:00:40,959
"What happens if several
super-classes

17
00:00:40,959 --> 00:00:42,562
provide to a sub-class

18
00:00:42,562 --> 00:00:45,976
attributes and methods with the same name?"

19
00:00:45,976 --> 00:00:47,426
Let us use a concrete example.

20
00:00:47,426 --> 00:00:48,604
We will go back to

21
00:00:48,604 --> 00:00:50,992
our zoological hierarchy.

22
00:00:50,992 --> 00:00:54,231
Here, we had two super-classes "Ovipare" (Oviparous)
and "Vivipare" (Viviparous).

23
00:00:54,231 --> 00:00:57,157
From those inherited the sub-class "Ovovivipare" (Ovoviviparous).

24
00:00:57,157 --> 00:00:59,749
Let us now suppose that each
of the super-classes

25
00:00:59,749 --> 00:01:01,627
included a method "afficher".
(TN: means "print")

26
00:01:01,627 --> 00:01:03,075
This method permits, for example,

27
00:01:03,075 --> 00:01:06,003
to print the instances' characterisitcs
for each of these classes.

28
00:01:06,003 --> 00:01:08,108
The class Ovovivipare inherits

29
00:01:08,108 --> 00:01:10,773
from the classes Ovipare and
Vivipare.

30
00:01:10,773 --> 00:01:13,241
Therefore, it will inherit

31
00:01:13,241 --> 00:01:14,797
two methods "afficher".

32
00:01:14,797 --> 00:01:17,014
The method "afficher" from the
class Ovipare

33
00:01:17,014 --> 00:01:20,668
and the method "afficher" from
the class Vivipare.

34
00:01:20,668 --> 00:01:23,842
These two methods' name is
strictly identical.

35
00:01:23,842 --> 00:01:25,077
Let us now suppose that,

36
00:01:25,077 --> 00:01:27,992
elsewhere in the program
(for example in a main program),

37
00:01:27,992 --> 00:01:30,665
we create an instance of Ovovivipare.

38
00:01:30,665 --> 00:01:34,138
On this instance, we call
the method "afficher".

39
00:01:34,138 --> 00:01:40,253
Now, we are wondering which method
will be called?

40
00:01:40,253 --> 00:01:43,723
The one inherited from Ovipare
or the one inherited from Vivipare?

41
00:01:43,723 --> 00:01:45,826
The compiler would ask
itself

42
00:01:45,826 --> 00:01:46,988
the very same question

43
00:01:46,988 --> 00:01:48,650
and thus refuse this instruction.

44
00:01:48,650 --> 00:01:51,436
For the compiler, there is
an ambiguity,

45
00:01:51,436 --> 00:01:52,762
There is a problem of shadowing

46
00:01:52,762 --> 00:01:55,290
meaning that an identifier is
shadowing another

47
00:01:55,290 --> 00:01:56,457
and the compiler knows not

48
00:01:56,457 --> 00:02:01,914
in which scope to solve
this call.

49
00:02:01,914 --> 00:02:02,914
Be careful,

50
00:02:02,914 --> 00:02:05,430
in this case, we are indeed facing
a shadowing problem:

51
00:02:05,430 --> 00:02:07,970
a scope resolution problem.

52
00:02:07,970 --> 00:02:10,260
Indeed, the call of the method
"afficher"

53
00:02:10,260 --> 00:02:12,130
on an instance of Ovovivipare

54
00:02:12,130 --> 00:02:14,300
will trigger a compiling error.

55
00:02:14,300 --> 00:02:18,020
This will happen even if the method
"afficher" does not have the same parameters

56
00:02:18,020 --> 00:02:20,164
in the classes "Ovipare" and "Vivipare".

57
00:02:20,164 --> 00:02:22,900
A priori, this can seem unexpected.

58
00:02:22,900 --> 00:02:24,552
Let us suppose, for example,

59
00:02:24,552 --> 00:02:28,294
that, in the class "Ovipare" the method
"afficher" does not have parameters

60
00:02:28,294 --> 00:02:30,096
while, in the class "Vivipare",

61
00:02:30,096 --> 00:02:33,266
the method "afficher" has one
string-type parameter.

62
00:02:33,266 --> 00:02:36,748
We could imagine that calling
the method "afficher"

63
00:02:36,748 --> 00:02:40,042
by providing a string-type parameter

64
00:02:40,042 --> 00:02:41,438
should lift all ambiguity,

65
00:02:41,438 --> 00:02:46,692
for it appears obvious that this
method should be called.

66
00:02:46,692 --> 00:02:48,946
Yet, the ambiguity could be lifted here

67
00:02:48,946 --> 00:02:52,160
only in situations where
overloading plays a part.

68
00:02:52,160 --> 00:02:54,091
But, as you have already seen

69
00:02:54,091 --> 00:02:55,522
in the previous episodes,

70
00:02:55,522 --> 00:02:59,184
in C++, overloading can only
occur within the same scope.

71
00:02:59,184 --> 00:03:00,572
This means that here,

72
00:03:00,572 --> 00:03:03,448
this has nothing to do
with an overloading problem.

73
00:03:03,448 --> 00:03:08,952
Therefore, the compiler will still
refuse this instruction.

74
00:03:08,952 --> 00:03:11,212
Indeed, the method "afficher"
without parameters

75
00:03:11,212 --> 00:03:13,412
is in the scope of the class "Ovipare",

76
00:03:13,412 --> 00:03:15,874
while the method "afficher" with
one string-type parameter

77
00:03:15,874 --> 00:03:17,922
is in the scope of the class "Vivipare".

78
00:03:17,922 --> 00:03:20,403
These two methods are not
in the same scope.

79
00:03:20,403 --> 00:03:22,312
Consequently, we cannot consider

80
00:03:22,312 --> 00:03:24,638
that this method "afficher" here is
an overloading

81
00:03:24,638 --> 00:03:26,514
of this other method "afficher" here.

82
00:03:26,514 --> 00:03:29,133
We cannot use an overloading-tied
mechanism

83
00:03:29,133 --> 00:03:32,406
to lift the ambiguity.

84
00:03:32,406 --> 00:03:36,549
We shall thus resolve the scope
appropriately.

85
00:03:36,549 --> 00:03:38,459
Now, how should we proceed

86
00:03:38,459 --> 00:03:41,219
in order to solve this scope
resolution problem?

87
00:03:41,219 --> 00:03:42,337
First option :

88
00:03:42,337 --> 00:03:45,745
We could simply use the scope
resolution operator.

89
00:03:45,745 --> 00:03:46,763
Here, for example

90
00:03:46,763 --> 00:03:49,041
in the main program creating the
instance of Ovipare,

91
00:03:49,041 --> 00:03:51,781
upon calling the method "afficher",


92
00:03:51,781 --> 00:03:55,079
we could precise in which scope
we are seeking this method "afficher".

93
00:03:55,079 --> 00:03:56,098
For example, we could say that,

94
00:03:56,098 --> 00:04:02,096
on the instance "o", we  call the
method "afficher" of the class Vivipare.

95
00:04:02,096 --> 00:04:06,046
Thus, we are establishing the link
between the method and the class

96
00:04:06,046 --> 00:04:08,586
through the scope resolution operator.

97
00:04:08,586 --> 00:04:10,135
However, this way to solve the problem,

98
00:04:10,135 --> 00:04:13,678
that is, through the external use
of the scope resolution operator,

99
00:04:13,678 --> 00:04:15,301
is not the correct solution.

100
00:04:15,301 --> 00:04:16,315
Whyso?

101
00:04:16,315 --> 00:04:19,215
Because it delegates to the user of
the class Ovovivipare

102
00:04:19,215 --> 00:04:22,335
the choice on how to print
an ovoviviparous.

103
00:04:22,335 --> 00:04:25,507
This task clearly lies on the shoulders
of the programmer

104
00:04:25,507 --> 00:04:27,859
of the class Ovovivipare.

105
00:04:27,859 --> 00:04:30,087
The idea would be, for a better
solution,

106
00:04:30,087 --> 00:04:31,762
to have the sub-class

107
00:04:31,762 --> 00:04:33,987
(in our case, the sub-class
Ovovivipare),

108
00:04:33,987 --> 00:04:38,163
indicating which method inherited
from the sub-class it wishes to see called.

109
00:04:38,163 --> 00:04:39,774
To this end, in C++,

110
00:04:39,774 --> 00:04:43,075
we can add to the sub-class a
special declaration indicating

111
00:04:43,075 --> 00:04:46,297
which ambiguous methods or attributed
inherited from higher

112
00:04:46,297 --> 00:04:50,421
should be called through the
instances of the sub-class.

113
00:04:50,421 --> 00:04:52,513
This declaration's syntax is the
following :

114
00:04:52,513 --> 00:04:54,505
we use the reserved keyword "using",

115
00:04:54,505 --> 00:04:57,377
followed by the name of the
ambiguous attribute or method.

116
00:04:57,377 --> 00:04:58,385
Then, we indicate

117
00:04:58,385 --> 00:05:00,293
through the scope resolution
operator

118
00:05:00,293 --> 00:05:01,815
in which super-class

119
00:05:01,815 --> 00:05:04,667
we will seek this attribute
or method.

120
00:05:04,667 --> 00:05:05,835
In the case of our example,

121
00:05:05,835 --> 00:05:07,983
we could, in the Ovovivipare class,

122
00:05:07,983 --> 00:05:12,541
indicate with such a declaration that
the method from Vivipare

123
00:05:12,541 --> 00:05:15,783
will be chosen to print
an Ovovivipare.

124
00:05:15,783 --> 00:05:19,273
In other words, when the method
"afficher" will be applied on

125
00:05:19,273 --> 00:05:20,793
an instance of Ovovivipare,

126
00:05:20,793 --> 00:05:23,795
we will search for this
method in the class "Vivipare".

127
00:05:23,795 --> 00:05:26,049
Pay close attention to
the syntax :

128
00:05:26,049 --> 00:05:28,303
during the declaration,

129
00:05:28,303 --> 00:05:32,407
we will use neither parentheses
nor return type

130
00:05:32,407 --> 00:05:33,545
for this method.

131
00:05:33,545 --> 00:05:36,067
We simply signify that we wish to use

132
00:05:36,067 --> 00:05:39,196
the method called "afficher" from
the class Vivipare.

133
00:05:39,196 --> 00:05:41,040
This is solution is better
than the former,

134
00:05:41,040 --> 00:05:43,164
for now the very class
"Ovovivipare"

135
00:05:43,164 --> 00:05:46,588
decides how to print its
own instances.

136
00:05:46,588 --> 00:05:50,906
This choice does not lie upon
the class users anymore.

137
00:05:50,906 --> 00:05:52,857
To make things even clearer,

138
00:05:52,857 --> 00:05:55,238
it is possible to have
the class "Ovovivipare"

139
00:05:55,238 --> 00:05:58,731
contain a method dedicated
to indicate

140
00:05:58,731 --> 00:06:02,113
how its instances will be printed.

141
00:06:02,113 --> 00:06:04,755
This way, things are as explicit
as humanly possible :

142
00:06:04,755 --> 00:06:06,929
it is not necessary to go
through the class

143
00:06:06,929 --> 00:06:09,133
to make sure there is
"using" declaration

144
00:06:09,133 --> 00:06:11,303
indicating how to print
an Ovovivipare.

145
00:06:11,303 --> 00:06:14,203
This way, we know that an
Ovovivipare has its own printing method.

146
00:06:14,203 --> 00:06:15,313
This method will decide

147
00:06:15,313 --> 00:06:19,783
how these printings will occur
exactly.

148
00:06:19,783 --> 00:06:21,913
We could perfectly decide that,
for example,

149
00:06:21,913 --> 00:06:23,353
to print an Ovovivipare,

150
00:06:23,353 --> 00:06:26,293
we print both the characteristics
of Ovipare

151
00:06:26,293 --> 00:06:28,939
and of Vivipare.

152
00:06:28,939 --> 00:06:30,631
In this case, the method
"afficher"

153
00:06:30,631 --> 00:06:32,903
of Ovovivipare will call
the two methods,

154
00:06:32,903 --> 00:06:35,035
using the scope resolution
operator

155
00:06:35,035 --> 00:06:36,693
to lift the amiguity.

156
00:06:36,693 --> 00:06:38,373
Here, the implementation choice

157
00:06:38,373 --> 00:06:41,043
designed for the method
"afficher" of Ovovivipare

158
00:06:41,043 --> 00:06:43,275
is to call both methods "afficher"

159
00:06:43,275 --> 00:06:45,757
(the two inherited namesake methods) :

160
00:06:45,757 --> 00:06:49,221
first the method "afficher" inherited
from the class "Ovipare",

161
00:06:49,221 --> 00:06:53,045
then the method "afficher"
inhrited from the class "Vivipare".

162
00:06:53,045 --> 00:06:55,129
This here is a good solution

163
00:06:55,129 --> 00:06:57,843
where the sub-class provides
an explicit method

164
00:06:57,843 --> 00:07:02,059
in order to clarifiy the
ambiguous calls.

165
00:07:02,059 --> 00:07:03,390
This concludes the sequence

166
00:07:03,390 --> 00:07:06,280
on shadowing in the case
of multiple inheritance.
