1
00:00:04,462 --> 00:00:05,486
In this episode,

2
00:00:05,486 --> 00:00:08,378
we will discuss the most subtle
point

3
00:00:08,378 --> 00:00:10,242
of multiple inheritance. This is the
reason

4
00:00:10,242 --> 00:00:13,244
why some languages refuse to include
multiple inheritance.

5
00:00:13,244 --> 00:00:16,239
This is what we call
virtual classes.

6
00:00:16,239 --> 00:00:20,635
Let us begin by illustrating the problem,
to which this new concept pertains.

7
00:00:20,635 --> 00:00:22,785
Let us go back to our infamous example

8
00:00:22,785 --> 00:00:25,911
regarding ovoviviparous - they are
oviparous

9
00:00:25,911 --> 00:00:29,552
and viviparous. This is a case
of multiple inheritance since the class

10
00:00:29,552 --> 00:00:33,376
"Ovovivipare" inherits from the classes
"Vivipare" and "Ovipare".

11
00:00:33,376 --> 00:00:37,051
Now, let us imagine that Ovipare
inherit from the class "Animal"

12
00:00:37,051 --> 00:00:38,838
(indeed, an oviparous is an animal),

13
00:00:38,838 --> 00:00:41,267
Similarly, a viviparous is also an animal.

14
00:00:41,267 --> 00:00:45,764
Therefore, in a certain way, an ovoviviparous
is two times an animal.

15
00:00:45,764 --> 00:00:50,442
Here is a more technical example
from the system library of C++.

16
00:00:50,442 --> 00:00:53,494
Of couse, you do not have to comprehend
every single detail;

17
00:00:53,494 --> 00:00:57,566
we merely wish to make it obvious
that the problems we are talking about

18
00:00:57,566 --> 00:00:58,567
occur in daily life.

19
00:00:58,567 --> 00:01:00,273
So, regarding the "iostream" class

20
00:01:00,273 --> 00:01:02,845
(we have talked about it along
with "cout"),

21
00:01:02,845 --> 00:01:04,636
it so happens that this "iostream" class

22
00:01:04,636 --> 00:01:09,440
is both an "ostream" and an "istream".

23
00:01:09,440 --> 00:01:13,327
Then, the conceptors of these classes
have decided that

24
00:01:13,327 --> 00:01:18,568
both "istream" and "ostream" were
also "ios" (no matter what it actually is).

25
00:01:18,568 --> 00:01:23,346
Consequently, "iostream" is
apparently two times an "ios".

26
00:01:23,346 --> 00:01:27,571
By the way, this how, in reality,

27
00:01:27,571 --> 00:01:30,481
we represent multiple inheritance
diagrams. We never draw

28
00:01:30,481 --> 00:01:34,273
the same class multiple times on
an inheritance diagram.

29
00:01:34,273 --> 00:01:37,591
However, we draw it once only with
both inheritances going back

30
00:01:37,591 --> 00:01:39,458
to the same class.

31
00:01:39,458 --> 00:01:41,022
The reason why we have drawn

32
00:01:41,022 --> 00:01:43,964
our diagram this way is so that you
understand

33
00:01:43,964 --> 00:01:45,433
what the problem is.

34
00:01:45,433 --> 00:01:47,713
What does it mean that an ovoviviparous

35
00:01:47,713 --> 00:01:51,676
is an oviparous (which is an animal)
and also a viviparous

36
00:01:51,676 --> 00:01:53,214
(which is an animal too) ?

37
00:01:53,214 --> 00:01:56,999
Does it mean that an
ovoviviparous is two times an animal?

38
00:01:56,999 --> 00:02:02,158
For example, if an animal has a head,
does an ovoviviparous have two?

39
00:02:02,158 --> 00:02:05,149
Does it have an oviparous head
and a viviparous head?

40
00:02:05,149 --> 00:02:08,534
Or does it only have one head?
Is it the very same animal?

41
00:02:08,534 --> 00:02:10,261
This here is the core problem.

42
00:02:10,261 --> 00:02:12,251
Due to this conundrum,

43
00:02:12,251 --> 00:02:16,627
certain languages refuse to
provide multiple inheritance.

44
00:02:16,627 --> 00:02:19,044
In C++, if we do not take precautions

45
00:02:19,044 --> 00:02:22,277
(this is why we drew our diagram in
such an unusual way),

46
00:02:22,277 --> 00:02:24,002
our ovoviviparous will

47
00:02:24,002 --> 00:02:28,355
indeed inherit twice from the
class "Animal".

48
00:02:28,355 --> 00:02:32,562
Each instance of Ovovivipare will
have two times the attributes

49
00:02:32,562 --> 00:02:34,757
from the class "Animal".

50
00:02:34,757 --> 00:02:36,518
Let us see this in an concrete example.

51
00:02:36,518 --> 00:02:40,777
Let us imagine the following example.
Here, we have written it in a condensed way

52
00:02:40,777 --> 00:02:42,934
so that it can fit in a single slide.

53
00:02:42,934 --> 00:02:45,025
We thus have the class "Animal".

54
00:02:45,025 --> 00:02:50,032
It has a constructor which initializes
its attribute.

55
00:02:50,032 --> 00:02:54,599
This attribute is a character string
indicating what kind of head the animal has.

56
00:02:54,599 --> 00:02:58,982
We receive a character string and
we initialize the head attribute

57
00:02:58,982 --> 00:03:02,809
with the received paramater.
Then, we have an "Ovipare" class,

58
00:03:02,809 --> 00:03:07,586
which inherits from the class "Animal".
This "Ovipare" class redefines

59
00:03:07,586 --> 00:03:11,069
a default constructor here - we kept
things really simple here.

60
00:03:11,069 --> 00:03:14,095
This default constructor calls the
constructor of "Animal"

61
00:03:14,095 --> 00:03:17,009
passing a character string : "à cornes"
(TN: means "horny").

62
00:03:17,009 --> 00:03:19,052
This means that an instance of  Ovipare have
a horny head.

63
00:03:19,052 --> 00:03:23,616
Then, we have the class "Vivipare"
which also inherits from "Animal".

64
00:03:23,616 --> 00:03:30,042
It also has a default constructor
which says that the animal has,

65
00:03:30,042 --> 00:03:30,894
for example, a fish head.

66
00:03:30,894 --> 00:03:35,001
Finally, the class "Ovovivipare"
inherits from "Ovipare"

67
00:03:35,001 --> 00:03:37,608
and from "Vivipare".
We thus get the very diagram

68
00:03:37,608 --> 00:03:40,838
that we have presented previously.
Then, we have a public method

69
00:03:40,838 --> 00:03:46,443
called "affiche" (TN : means "print") which
prints the head

70
00:03:46,443 --> 00:03:50,741
inherited from "Animal" through
"Ovipare". Here, we can see

71
00:03:50,741 --> 00:03:52,890
the scope resolution operator.

72
00:03:52,890 --> 00:03:55,968
We do have an ambiguity since
Ovovivipare

73
00:03:55,968 --> 00:03:58,384
inherits two heads;

74
00:03:58,384 --> 00:04:01,674
one from "Ovipare", the other
from "Vivipare".

75
00:04:01,674 --> 00:04:06,651
In order to solve the ambiguity,
we use, as always,

76
00:04:06,651 --> 00:04:08,307
the scope resolution operator.

77
00:04:08,307 --> 00:04:11,725
Thus we say "j'ai une tête" (TN: means "I have a head"),
print the head of Ovipare,

78
00:04:11,725 --> 00:04:14,895
"et une tête" (TN: means "and a head"),
and print the head of Vivipare.

79
00:04:14,895 --> 00:04:16,553
Now if, for example,

80
00:04:16,553 --> 00:04:18,574
in the main function
or elsewhere,

81
00:04:18,574 --> 00:04:22,893
we declare an Ovovivipare "x"
- it is absolutely possible

82
00:04:22,893 --> 00:04:26,442
since "Ovovivipare" has a default
constructor.

83
00:04:26,442 --> 00:04:28,576
Now, " x " will be constructed through
the default constructor.

84
00:04:28,576 --> 00:04:33,426
It will call the two default constructors
of the super-classes

85
00:04:33,426 --> 00:04:38,432
in the inheritance declaration oder,
here at the class level.

86
00:04:38,432 --> 00:04:42,960
Here, we will thus call the constructors
of "Ovipare" and of "Vivipare".

87
00:04:42,960 --> 00:04:45,863
We can very well do this
default construction here.

88
00:04:45,863 --> 00:04:47,659
Then, if we print " x ",

89
00:04:47,659 --> 00:04:51,987
we will have the following
printing for this ovoviviparous :

90
00:04:51,987 --> 00:04:54,150
"j'ai une tête à corne"
(TN: means "I have a horny head"),

91
00:04:54,150 --> 00:04:58,766
which is the result of the initialization

92
00:04:58,766 --> 00:05:01,720
through the default constructor
of "Ovipare", and

93
00:05:01,720 --> 00:05:04,016
"et une tête de poisson"
(TN: means "and a fish head"),

94
00:05:04,016 --> 00:05:08,231
which is the result of the printing
of "Vivipare::tete"

95
00:05:08,231 --> 00:05:11,783
initialized through the
default constructor

96
00:05:11,783 --> 00:05:13,939
of the class "Vivipare".

97
00:05:13,939 --> 00:05:18,969
Thus, the class "Ovovivipare" has indeed
inherited two heads.

98
00:05:18,969 --> 00:05:23,656
There are two animals in the class
"Ovoviviparous".

99
00:05:23,656 --> 00:05:24,780
Here, of course,

100
00:05:24,780 --> 00:05:28,760
it is rather unwanted for an
ovoviviparous to retrieve two heads

101
00:05:28,760 --> 00:05:33,331
through this multiple inheritance.
Same for the fact that there are two copies of "Animal".

102
00:05:33,331 --> 00:05:34,778
Please note that, in certain cases,

103
00:05:34,778 --> 00:05:39,397
we may to effectively inherit
the attributes twice.

104
00:05:39,397 --> 00:05:42,858
For example, let us imagine that
we have a hierarchy of vehicles.

105
00:05:42,858 --> 00:05:46,692
We have petrol engine vehicles,

106
00:05:46,692 --> 00:05:50,055
and electric vehicles.

107
00:05:50,055 --> 00:05:53,625
Now, we imagine that we have
hybrid vehicles:

108
00:05:53,625 --> 00:05:58,680
they are petrol engine vehicles
and electric vehicles.

109
00:05:58,680 --> 00:05:59,806
The question is :

110
00:05:59,806 --> 00:06:04,511
Is a hybrid vehicle a single vehicle,
just as was the case for ovoviviparous?

111
00:06:04,511 --> 00:06:06,790
Or are they indeed two vehicles?

112
00:06:06,790 --> 00:06:10,479
This depends on what we mean
by "vehicle"?

113
00:06:10,479 --> 00:06:13,388
If, by vehicle, we mean four
tires, a steering wheel...

114
00:06:13,388 --> 00:06:16,938
then, naturally, a hybrid vehicle
has only one time

115
00:06:16,938 --> 00:06:20,768
four tires and a steering wheel and
surely not eight tires and two steering wheels.

116
00:06:20,768 --> 00:06:23,551
If, on the other hand, we mean
that a vehicle has an engine, it is different.

117
00:06:23,551 --> 00:06:25,309
Indeed, we have an electric engine

118
00:06:25,309 --> 00:06:27,327
and a petrol engine.

119
00:06:27,327 --> 00:06:30,140
In this case, we will wish


120
00:06:30,140 --> 00:06:32,500
to have two engines in "hybride".

121
00:06:32,500 --> 00:06:35,257
Now, you can see that this is
a subtle problem

122
00:06:35,257 --> 00:06:39,091
which is very conception-dependant.
We need to understand

123
00:06:39,091 --> 00:06:44,226
what the inheritance relationship
truly means in the case at hand.

124
00:06:44,226 --> 00:06:48,384
If we do not wish to receive
several times the attributes

125
00:06:48,384 --> 00:06:49,681
of the super-super-class,

126
00:06:49,681 --> 00:06:52,574
we will need to do something
particular

127
00:06:52,574 --> 00:06:56,193
in order to prevent it :
we will declare the inheritance link

128
00:06:56,193 --> 00:06:58,670
as a virtual link.

129
00:06:58,670 --> 00:07:01,071
We are once again using the keyword
"virtual" here, but for another reason.

130
00:07:01,071 --> 00:07:04,872
Here, the inheritance link
is virtual.

131
00:07:04,872 --> 00:07:08,529
Thus, if a super-class has
its inheritance links

132
00:07:08,529 --> 00:07:10,042
towards its sub-classes declared
as virtual,

133
00:07:10,042 --> 00:07:13,770
the super-class will be called
a virtual super-class.

134
00:07:13,770 --> 00:07:16,660
Be careful, this has nothing to
do with an abstract class!

135
00:07:16,660 --> 00:07:20,248
In an abstract class, we have
virtual methods,

136
00:07:20,248 --> 00:07:23,924
and, in a virtual class,

137
00:07:23,924 --> 00:07:25,077
we can whatever method
we desire.

138
00:07:25,077 --> 00:07:29,782
It is the sub-classes' inheritance
link that is special,

139
00:07:29,782 --> 00:07:31,468
that is virtual.

140
00:07:31,468 --> 00:07:33,326
Do not confuse one concept with
the other.

141
00:07:33,326 --> 00:07:35,738
The general syntax is as follows :

142
00:07:35,738 --> 00:07:40,447
for the sub-classes we will say
that we inherit virtually.

143
00:07:40,447 --> 00:07:43,030
Personally, we say that it is
a virtual inheritance

144
00:07:43,030 --> 00:07:45,914
rather than a virtual class.

145
00:07:45,914 --> 00:07:49,772
Thus, we say that inherit virtually
from the super-class.

146
00:07:49,772 --> 00:07:51,976
Concretely, in our ovoviviparous
example,

147
00:07:51,976 --> 00:07:56,045
we will change things at the level
of Ovipare and Vivipare.

148
00:07:56,045 --> 00:07:59,939
This way, Ovipare inherits virtually
from the class "Animal" :

149
00:07:59,939 --> 00:08:02,323
consequently, "Animal" is
a virtual class.

150
00:08:02,323 --> 00:08:06,684
Similarly, we will write that
"Vivipare" inherits virtually

151
00:08:06,684 --> 00:08:09,158
from the class "Animal".

152
00:08:09,158 --> 00:08:12,009
Please note that it is the class
we inherit from several times

153
00:08:12,009 --> 00:08:13,959
that is called virtual.

154
00:08:13,959 --> 00:08:17,955
Here, this means that it is
the class "Animal"

155
00:08:22,327 --> 00:08:27,598
that will be a virtual class.

156
00:08:27,598 --> 00:08:31,570
We have to modify the inheritance
links from Ovipare towards "Animal"

157
00:08:31,590 --> 00:08:36,708
and from "Vivipare" towards "Animal"

158
00:08:36,708 --> 00:08:41,936
even though it is the class "Ovovivipare"
that introduces the problem.

159
00:08:41,936 --> 00:08:45,198
You can see that there is 
a problem

160
00:08:45,198 --> 00:08:47,108
with the general conception.

161
00:08:47,108 --> 00:08:50,429
The designers of the classes
"Ovipare" and "Vivipare"

162
00:08:50,429 --> 00:08:53,721
must declare a virtual inheritance

163
00:08:53,721 --> 00:08:56,865
towards the class "Animal" because,
possibly,

164
00:08:56,865 --> 00:09:00,623
someone, someday, will imagine
a sub-class "Ovovivipare",

165
00:09:00,623 --> 00:09:02,829
which inherits from "Ovipare",
and from "Vivipare".

166
00:09:02,829 --> 00:09:07,000
This is a severe flaw of
virtial inheritance

167
00:09:07,000 --> 00:09:08,256
and virtual classes.

168
00:09:08,256 --> 00:09:12,711
It creates a dependency of
higher-level inheritances

169
00:09:12,711 --> 00:09:15,838
towards possible lower-level
inheritances.

170
00:09:15,838 --> 00:09:19,132
This is another reason why certain
programming languages

171
00:09:19,132 --> 00:09:24,685
want nothing to do with
virtual inheritance.

172
00:09:24,685 --> 00:09:28,562
However, since the possibility
exists in C++, we should use it

173
00:09:28,562 --> 00:09:30,660
carefully, and parcimoniously.

174
00:09:30,660 --> 00:09:32,775
Now let us go back to our
multiple inheritance diagrams.

175
00:09:32,775 --> 00:09:34,711
In order to signify that the
inhertiance links

176
00:09:34,711 --> 00:09:37,395
are virtual, we will use dash lines
instead of the full ones.

177
00:09:37,395 --> 00:09:39,936
Now, let us see concretely

178
00:09:39,936 --> 00:09:43,693
what happens with virtual
inheritances.

179
00:09:43,693 --> 00:09:46,174
What happens in our example

180
00:09:46,174 --> 00:09:47,891
if we render these two inheritances
virtual?

181
00:09:47,891 --> 00:09:51,807
The "Ovovivipare" class will
only have one single head.

182
00:09:51,807 --> 00:09:54,982
What will happen is that we will
only create one "Animal"

183
00:09:54,982 --> 00:09:56,207
in "Ovovivipare".

184
00:09:56,207 --> 00:10:00,597
We will no longer create two
animals inside "Ovovivipare".

185
00:10:00,597 --> 00:10:03,861
This solves the aforementioned
problem.

186
00:10:03,861 --> 00:10:06,876
Now let us see how
virtual classes,

187
00:10:06,876 --> 00:10:08,007
virtual inheritances,

188
00:10:08,007 --> 00:10:10,292
impact the constructors.

189
00:10:10,292 --> 00:10:13,567
It generates a strong restraint
for the programmer.

190
00:10:13,567 --> 00:10:14,966
But first, a remainder.

191
00:10:14,966 --> 00:10:17,295
Remember that, in a 
usual inheritance,

192
00:10:17,295 --> 00:10:20,902
the constructor of the sub-class
calls the constructor

193
00:10:20,902 --> 00:10:23,031
(or the constructors in the case
of multiple inheritance)

194
00:10:23,031 --> 00:10:24,619
of the direct super-classes.

195
00:10:24,619 --> 00:10:27,533
Direct meaning that they inherit
directly from these super-classes.

196
00:10:27,533 --> 00:10:30,131
So, in the case of multiple inheritance

197
00:10:30,131 --> 00:10:33,477
with a virtual super-super-super class,

198
00:10:33,477 --> 00:10:37,269
the responsability to initialize,
to call the constructors

199
00:10:37,269 --> 00:10:42,150
of this virtual super-super-class belongs
to all the sub-classes

200
00:10:42,150 --> 00:10:44,509
we want to create an instance of.

201
00:10:44,509 --> 00:10:46,980
Thus, all these sub-classes,
sub-sub-classes...

202
00:10:46,980 --> 00:10:51,808
which inherit indirectly from a
virtual super-super-super-class,

203
00:10:51,808 --> 00:10:53,122
and are not abstract

204
00:10:53,122 --> 00:10:56,148
(which means we can create
instances of them),

205
00:10:56,148 --> 00:10:57,964
will have to explicitly call

206
00:10:57,964 --> 00:11:01,060
the constructor of the virtual

207
00:11:01,060 --> 00:11:02,785
super-super-super-class.

208
00:11:02,785 --> 00:11:04,157
As you can plainly see, this is
a strong constraint

209
00:11:04,157 --> 00:11:07,596
in the declaration of the constructor
of the sub-classes.

210
00:11:07,596 --> 00:11:10,648
Let us see this concretely
on the Ovovivipare example.

211
00:11:10,648 --> 00:11:14,136
In this case, we have the
sub-sub-class "Ovovivipare",

212
00:11:14,136 --> 00:11:16,374
which inherits from the sub-classes
"Ovipare" and "Vivipare".

213
00:11:16,374 --> 00:11:19,691
These two classes inherit virtually
from the class "Animal".

214
00:11:19,691 --> 00:11:21,736
We thus have a virtual class "Animal".

215
00:11:21,736 --> 00:11:24,695
Consequently, the sub-class
"Ovovipare" must,

216
00:11:24,695 --> 00:11:27,429
in its constructors, directly call

217
00:11:27,429 --> 00:11:29,538
the constructor of "Animal".

218
00:11:29,538 --> 00:11:33,203
We will thus have to write the following
instruction in the constructor of Ovovivipare :

219
00:11:33,203 --> 00:11:36,003
an explicit call to the
constructor of "Animal"

220
00:11:36,003 --> 00:11:37,352
is mandatory here.

221
00:11:37,352 --> 00:11:39,394
Let us suppose this constructor
takes three parameters

222
00:11:39,394 --> 00:11:42,694
before we write the call
to the usual constructor

223
00:11:42,694 --> 00:11:46,055
of Ovovivipare's direct
super-classes.

224
00:11:46,055 --> 00:11:49,697
As we have said, this is a strong constraint
regarding virtual classes.

225
00:11:49,697 --> 00:11:53,388
Now, let us see what concretely
happens when we declare an instance.

226
00:11:53,388 --> 00:11:55,772
Let us declare an instance " o "
of Ovovivipare.

227
00:11:55,772 --> 00:11:58,532
Thus we are calling Ovovivipare's
constructor.

228
00:11:58,532 --> 00:12:01,541
First of all, we will trigger

229
00:12:01,541 --> 00:12:03,364
the constructor of an "Animal".

230
00:12:03,364 --> 00:12:06,467
Thus, when we are building a sub-sub-class,

231
00:12:06,467 --> 00:12:10,248
which inherits from a virtual class,
the first thing we do

232
00:12:10,248 --> 00:12:12,131
is to create the virtual class.

233
00:12:12,131 --> 00:12:14,668
There is only one virtual class.
Indeed, the goal of multiple inheritance

234
00:12:14,668 --> 00:12:16,394
and of virtual classes is
to have only one

235
00:12:16,394 --> 00:12:19,904
virtual classes and not several along
with all the inheritance paths.

236
00:12:19,904 --> 00:12:21,536
Since we have only one virtual class,

237
00:12:21,536 --> 00:12:23,444
we must build it first and foremost.

238
00:12:23,444 --> 00:12:26,110
Consequently, we will build
this "Animal" first.

239
00:12:26,110 --> 00:12:28,150
The first constructor to be
called

240
00:12:28,150 --> 00:12:29,420
is the constructor of "Animal".

241
00:12:29,420 --> 00:12:33,113
Then, we will go back to the
normal calls of the constructors.

242
00:12:33,113 --> 00:12:34,912
Thus, the constructor of
Ovovivipare

243
00:12:34,912 --> 00:12:37,783
will then call the constructor
of Ovipare.

244
00:12:37,783 --> 00:12:39,263
This constructor of "Ovipare"

245
00:12:39,263 --> 00:12:42,281
should normally call the constructor
of the super-class.

246
00:12:42,281 --> 00:12:45,866
But here, since we have
already initialized the super-class,

247
00:12:45,866 --> 00:12:49,492
this call to the constructor of "Animal"
found in the constructor of "Ovipare",

248
00:12:49,492 --> 00:12:50,941
will be ignored.

249
00:12:50,941 --> 00:12:54,337
Similarly, we will then call
the constructor of "Vivipare",

250
00:12:54,337 --> 00:12:57,803
which will ignore the call to
the constructor of "Animal"

251
00:12:57,803 --> 00:13:00,230
since it has already been done.

252
00:13:00,230 --> 00:13:03,220
Let us now sum up the
construction of an Ovovivipare.

253
00:13:03,220 --> 00:13:05,526
First of all, we call the constructor
of "Animal".

254
00:13:05,526 --> 00:13:08,006
Secondly, we call the constructor
of "Ovipare",

255
00:13:08,006 --> 00:13:11,234
in which we ignore the supplementary
call to the constructor of "Animal".

256
00:13:11,234 --> 00:13:13,853
Thirdly, we call the constructor
of "Vivipare",

257
00:13:13,853 --> 00:13:16,168
in which we ignore the supplementary
call to the constructor of "Animal".

258
00:13:16,168 --> 00:13:18,109
Finally, we conclude by
the usual

259
00:13:18,109 --> 00:13:21,149
initialization of its own attributes.

260
00:13:21,149 --> 00:13:22,376
Let us sum one final time.

261
00:13:22,376 --> 00:13:25,615
During the creation of an object
of the most derived class,

262
00:13:25,615 --> 00:13:27,380
the sub-sub-sub-class of
a virtual class,

263
00:13:27,380 --> 00:13:29,349
it is the constructor of this
sub-sub-sub-class

264
00:13:29,349 --> 00:13:32,517
that is tasked with the direct
call to the constructor

265
00:13:32,517 --> 00:13:34,461
of the virtual super-class.

266
00:13:34,461 --> 00:13:37,123
Also, the calls to the constructor
of the virtual super-class

267
00:13:37,123 --> 00:13:40,878
in the intermediate classes
are simply ignored.

268
00:13:40,878 --> 00:13:43,785
Naturally, if the virtual super-class
has a default constructor,

269
00:13:43,785 --> 00:13:45,255
it is not mandatory

270
00:13:45,255 --> 00:13:48,116
to explicitly call its constructor.

271
00:13:48,116 --> 00:13:48,975
But, one way or the other,

272
00:13:48,975 --> 00:13:51,882
there will be a call to this
default constructor :

273
00:13:51,882 --> 00:13:56,915
it will be called during the
creation of the most derived instance.

274
00:13:56,915 --> 00:13:58,672
As usual,

275
00:13:58,672 --> 00:14:01,941
if we omit the call to the constructor
of the virtual super-super-class

276
00:14:01,941 --> 00:14:06,550
in the sub-sub-classes and that this
virtual super-super-class

277
00:14:06,550 --> 00:14:09,066
has not default constructor,

278
00:14:09,066 --> 00:14:12,652
the compiler will naturally
report an error.

279
00:14:12,652 --> 00:14:16,574
Indeed, it will try to call a
non-existing constructor.

280
00:14:16,574 --> 00:14:21,662
So, in a class hieararchy, where
there are virtual super-classes,

281
00:14:21,662 --> 00:14:24,069
the initialization of the
virtual super-classes

282
00:14:24,069 --> 00:14:26,926
must be done by all the sub-classes
we wish to create.

283
00:14:26,926 --> 00:14:29,375
The constructor of the
virtual super-classes

284
00:14:29,375 --> 00:14:31,397
will be called first and foremost.

285
00:14:31,397 --> 00:14:34,605
Then, the calls to the virtual
super-classes

286
00:14:34,605 --> 00:14:37,238
in the intermediate classes
will be ignored.

287
00:14:37,238 --> 00:14:39,578
Regarding non-virtual
super-classes,

288
00:14:39,578 --> 00:14:41,838
they are then initialized in the
order of the inheritance declaration,

289
00:14:41,838 --> 00:14:43,557
as usual.

290
00:14:43,557 --> 00:14:46,199
The call order of the copy
constructors

291
00:14:46,199 --> 00:14:48,148
follows this rule aswell.

292
00:14:48,148 --> 00:14:50,448
As always, the call order
of the destructors

293
00:14:50,448 --> 00:14:54,281
is the reverse order to
the constructors'.

294
00:14:54,281 --> 00:14:56,689
Thus concludes this
sequences on this

295
00:14:56,689 --> 00:14:59,245
slightly delicate subject
of virtual classes,

296
00:14:59,245 --> 00:15:02,028
and virtual inheritance.
