1
00:00:04,270 --> 00:00:06,450
In this episode, we will present

2
00:00:06,450 --> 00:00:08,919
the notion of multiple inheritance
in C++.

3
00:00:08,919 --> 00:00:11,254
Before we dive into this matter,
we will start by reviewing

4
00:00:11,254 --> 00:00:12,890
all the knowledge aquired up to now.

5
00:00:12,890 --> 00:00:17,441
Now, you are familiar with the three
central concepts of the object oriented programming:

6
00:00:17,441 --> 00:00:21,876
encapsulation/abstraction,
inheritance and polymorphism.

7
00:00:21,876 --> 00:00:24,396
You know that encapsulating and
abstracting means to regrouping

8
00:00:24,396 --> 00:00:26,951
data and processing into
one same entity.

9
00:00:26,951 --> 00:00:30,936
It also revolves around separating the
user interface from the implementation details.

10
00:00:30,936 --> 00:00:35,115
Also, you know that the inheritance lets
us set up a "is a" relationship

11
00:00:35,115 --> 00:00:38,574
between different classes of a program.
You also know that this tool

12
00:00:38,574 --> 00:00:41,683
lets us use polymorphic
solutions

13
00:00:41,683 --> 00:00:43,708
in the sense of "inclusion polymorphism".

14
00:00:43,708 --> 00:00:46,985
Finally, you have learnt that the
polymorphisms is a very powerful tool

15
00:00:46,985 --> 00:00:50,050
making it possible for the
execution of a same code

16
00:00:50,050 --> 00:00:52,951
to automatically adapt to
the different types of data.

17
00:00:52,951 --> 00:00:56,113
In C++, you know that we are
able to set up a polymorphic

18
00:00:56,113 --> 00:00:59,286
solution using two mandatory ingredients:

19
00:00:59,286 --> 00:01:03,358
we must use virtual methods through
references or pointers.

20
00:01:03,358 --> 00:01:06,696
To conclude this brief review
of your knowledge,

21
00:01:06,696 --> 00:01:09,030
let us mention the notions
of "abstract classes*

22
00:01:09,030 --> 00:01:11,612
and "pure virtual methods".
These let us improve

23
00:01:11,612 --> 00:01:14,311
the object-ortiented models
dramatically.

24
00:01:14,311 --> 00:01:18,658
Let us move on to the thema
of this episode: "multiple inheritance*.

25
00:01:18,658 --> 00:01:22,404
It actually follows an already mastered
thema, the simple inheritance.

26
00:01:22,404 --> 00:01:25,386
Until now, the inheritance relationships
we have studied

27
00:01:25,386 --> 00:01:28,438
were simple inheritance relationships.

28
00:01:28,438 --> 00:01:32,956
This means that each sub-class only
had one direct parent.

29
00:01:32,956 --> 00:01:35,561
Multiple inheritance simply revolves

30
00:01:35,561 --> 00:01:38,863
around one sub-class having
several direct parent classes.

31
00:01:38,863 --> 00:01:43,705
Multiple inheritance is allowed in C++.
In other words, we may

32
00:01:43,705 --> 00:01:47,304
have one sub class inherit directly
from several parent classes.

33
00:01:47,304 --> 00:01:50,233
However, this notion is not
provided by all

34
00:01:50,233 --> 00:01:51,997
object-oritented programming languages.

35
00:01:51,997 --> 00:01:54,869
Basic notions regarding multiple
inheritance are mostly

36
00:01:54,869 --> 00:01:57,858
the same as the ones regarding
simple inheritance.

37
00:01:57,858 --> 00:02:02,610
Consequently, one sub-class will inherit
from these base classes, all their attributes

38
00:02:02,610 --> 00:02:06,495
and methods (except constructors and destructor),
as well as their type.

39
00:02:07,125 --> 00:02:09,851
Let us dive into a concrete example;
we shall see how

40
00:02:09,851 --> 00:02:11,861
multiple inheritance will deem useful.

41
00:02:11,861 --> 00:02:15,703
For old time's sake, let us choose
a game-related example.

42
00:02:15,703 --> 00:02:19,696
Now, several entities will play a part
in the game. For example, 

43
00:02:19,696 --> 00:02:23,250
a ball, rackets, a net, a player.

44
00:02:23,250 --> 00:02:27,199
On each entity, we will bestow a method
called "evolue" (TN: means "evolve")

45
00:02:27,199 --> 00:02:31,110
making it possible to track the
position of the entity during the game.

46
00:02:31,110 --> 00:02:33,777
In our first draft conception,
we could imagine

47
00:02:33,777 --> 00:02:37,226
a super-class "Entite" (TN: means "Entity")
whose main method

48
00:02:37,226 --> 00:02:41,571
will be called "evolue". This method will
probably be polymorphic and

49
00:02:41,571 --> 00:02:44,805
redefined in the sub-classes. However,
this is not our point here. Then, we will have

50
00:02:44,805 --> 00:02:48,199
sub-classes representing the different
concrete entities in the game

51
00:02:48,199 --> 00:02:52,116
such as the classes "Balle", "Raquette", "Filet" and "Joueur"
(TN: means "Ball", "Racket", "Net", and "Player")

52
00:02:52,116 --> 00:02:55,807
Now, after further analysis, we might
realise that, due to game requirements,

53
00:02:55,807 --> 00:02:58,845
all these entities do not, in fact,
behave exactly

54
00:02:58,845 --> 00:03:01,512
the same. They might not
have the same needs.

55
00:03:01,512 --> 00:03:06,557
For example, we may need to print
or draw certain entities.

56
00:03:06,557 --> 00:03:10,531
The ball, the net or the racket may require
a graphical representation aswell.

57
00:03:10,531 --> 00:03:13,845
Others may not require it. For example,
we may not need to

58
00:03:13,845 --> 00:03:15,288
see the player in the game.

59
00:03:15,288 --> 00:03:18,465
Moreover, certain entities may need
to be interactive,

60
00:03:18,465 --> 00:03:22,278
that is, controllable with mouse and
keyboard (maybe the ball and the racket).

61
00:03:22,278 --> 00:03:25,028
Others may not need to be controllable :
for example, maybe we need not

62
00:03:25,028 --> 00:03:26,770
control the player nor the net.

63
00:03:26,770 --> 00:03:29,419
We are now wondering how to
set up all this.

64
00:03:29,419 --> 00:03:33,220
The class hierarchy (which you can now see)
answers precisely

65
00:03:33,220 --> 00:03:36,451
to the just-now-mentioned needs.
Here, we have introduced

66
00:03:36,451 --> 00:03:40,152
a super-class "Interactive", thanks to 
which we will take care

67
00:03:40,152 --> 00:03:44,054
of the different entities requiring
to be interactive,

68
00:03:44,054 --> 00:03:47,005
such as the ball and the racket.

69
00:03:47,005 --> 00:03:50,348
This super-class will provide the methods
regarding

70
00:03:50,348 --> 00:03:52,451
this very interaction.

71
00:03:52,451 --> 00:03:55,808
Similarly, the super-class "Graphique"
lets us define

72
00:03:55,808 --> 00:03:59,203
all entities we wish to see drawable
in the game

73
00:03:59,203 --> 00:04:01,947
(that is, the racket, ball and the net).

74
00:04:01,947 --> 00:04:05,023
this super-class will provide the
necessary material

75
00:04:05,023 --> 00:04:07,629
to the graphical representation
of these entities.

76
00:04:07,629 --> 00:04:10,871
These two super-classes let us
see some entities

77
00:04:10,871 --> 00:04:12,871
- albeit not all - as
interactive objects

78
00:04:12,871 --> 00:04:15,424
and/or as graphical objects.

79
00:04:15,424 --> 00:04:20,557
Please note that it would not have
been correct to place the drawing and

80
00:04:23,327 --> 00:04:29,505
interaction methods in the
super-class "Entity".

81
00:04:29,505 --> 00:04:32,850
Why, do you think, is it the case?

82
00:04:32,850 --> 00:04:37,099
Indeed, placing these methods in
the super-class "Entity" would force certain

83
00:04:37,099 --> 00:04:42,180
classes to have a drawing method while
we want them to be undrawable.

84
00:04:42,180 --> 00:04:46,795
It would also force certain classes
to be interactive

85
00:04:46,795 --> 00:04:48,877
while we do not wish it.

86
00:04:48,877 --> 00:04:51,975
Thanks to multiple inheritance,
we now have a better model

87
00:04:51,975 --> 00:04:55,802
of what we wish to realise.
C++ grants us this option.

88
00:04:55,802 --> 00:04:58,705
We can imagine many another
situation requiring

89
00:04:58,705 --> 00:05:00,626
the use of multiple inheritance.

90
00:05:00,626 --> 00:05:03,621
Here comes a zoological example.
Assume that you are tasked to model

91
00:05:03,621 --> 00:05:06,950
the animals in a zoo.
As it happens, some animals

92
00:05:06,950 --> 00:05:11,451
are ovoviviparous and this inherit
from the oviparous

93
00:05:11,451 --> 00:05:13,127
and from the viviparous.

94
00:05:13,127 --> 00:05:16,289
Multiple inheritance lets us model
clearly

95
00:05:16,289 --> 00:05:18,250
the different lodgers of the zoo.

96
00:05:18,250 --> 00:05:21,657
Oviparous animals lay eggs and
the egg "develops" the embryo

97
00:05:21,657 --> 00:05:25,952
until birth. Viviparous animals
give birth to live babies.

98
00:05:25,952 --> 00:05:30,215
Ovoviviparous animals (such as the seahorse)
indeed inherit

99
00:05:30,215 --> 00:05:33,381
the characteristics of
oviparous and viviparous both:

100
00:05:33,381 --> 00:05:37,173
their embryo is "developed" by the egg
(just like oviaprous),

101
00:05:37,173 --> 00:05:41,012
but they are born live (just like
viviparous).

102
00:05:41,012 --> 00:05:45,130
Finally, a more informatic example.
You may not know that the different

103
00:05:45,130 --> 00:05:48,213
C++ classes regarding
inputs and outputs,

104
00:05:48,213 --> 00:05:50,127
(these ones should ring a bell),

105
00:05:50,127 --> 00:05:52,623
are organized thanks
to multiple inheritance.

106
00:05:52,623 --> 00:05:55,990
This organisation in particular,
presents the famous,

107
00:05:55,990 --> 00:05:59,703
"diamond architecture" on which we
will expand

108
00:05:59,703 --> 00:06:01,496
later on.

109
00:06:02,336 --> 00:06:05,262
Let us now move on to the concrete
use of multiple inheritance in C++.

110
00:06:05,262 --> 00:06:09,719
In C++, if we wish to declare that a
sub-class inherits from several

111
00:06:09,719 --> 00:06:13,847
parent classes, we simply need,
during the class declaration,

112
00:06:13,847 --> 00:06:19,301
to indicate all the super-classes,
separated by commas.

113
00:06:19,301 --> 00:06:23,319
Thus, here, for each super-class from which
the sub-class inherits

114
00:06:23,319 --> 00:06:26,419
we will indicate
"public nameOfTheSuperClass",

115
00:06:26,419 --> 00:06:29,527
and separate the different parent classes
with commas.

116
00:06:29,527 --> 00:06:33,825
Concretely, this here means that
the class "Ovovivipare" inherits

117
00:06:33,825 --> 00:06:37,552
from the super-class "Ovipare",
and the super-class "Vivipare".

118
00:06:37,552 --> 00:06:41,268
Then, the class's content is not very
different from what we have seen 

119
00:06:41,268 --> 00:06:44,344
in the classes written or read until now.

120
00:06:44,344 --> 00:06:47,078
Finally, please note that, the
order of the declaration

121
00:06:47,078 --> 00:06:51,019
of the inheritance links is
relevant. Indeed, it impacts

122
00:06:51,019 --> 00:06:54,976
how we will build and destroy
an instance

123
00:06:54,976 --> 00:06:56,979
created through multiplte inheritance.

124
00:06:56,979 --> 00:06:59,028
This is the next point we
will focus on.

125
00:06:59,028 --> 00:07:01,762
How do construction and destruction
work in the frame

126
00:07:01,762 --> 00:07:03,302
of multiple inheritance.

127
00:07:03,302 --> 00:07:07,071
Let us discuss what mutiple inheritance
implies on constructors.

128
00:07:07,071 --> 00:07:09,533
There is in fact not much new;
although there is one point

129
00:07:09,533 --> 00:07:12,049
you must pay attention to.

130
00:07:12,049 --> 00:07:16,797
So, like with simple inheritance,
the initialization of the attributes  inherited 

131
00:07:16,797 --> 00:07:20,633
from the super-classes is done
through the initialization list

132
00:07:20,633 --> 00:07:24,010
of the sub-class constructor
by calling all the constructors

133
00:07:24,010 --> 00:07:26,464
of the parent classes we inherit from.

134
00:07:26,464 --> 00:07:30,972
Thus, the general syntax is the same
as for simple inheritance.

135
00:07:30,972 --> 00:07:35,316
In the "initialization list" section
of the sub-class constructor,

136
00:07:35,316 --> 00:07:38,977
we call, like this, the different constructors
of the super-classes 

137
00:07:38,977 --> 00:07:42,832
we inherit from, separated by commas.
And, obviously,

138
00:07:42,832 --> 00:07:45,980
if one of the super-classes has
a default constructor,

139
00:07:45,980 --> 00:07:50,470
it is not necessary to explicitly call it.
As always,

140
00:07:50,470 --> 00:07:53,390
while you are still unfamiliar with
the constructor concepts,

141
00:07:53,390 --> 00:07:57,314
we recommand you explicitly call
the default constructors aswell

142
00:07:57,314 --> 00:08:00,634
so that you do not forget that there is
a call to the default constructor,

143
00:08:00,634 --> 00:08:02,659
even though this is not necessary.

144
00:08:02,659 --> 00:08:06,497
However, be careful: there is a little
peculiarity with multiple inheritance.

145
00:08:06,497 --> 00:08:11,258
The call order of the constructors
is not the order

146
00:08:11,258 --> 00:08:14,891
of the written constructors in the
initialization list of the sub-class

147
00:08:14,891 --> 00:08:18,775
constructors. The constructors are called
following the order

148
00:08:18,775 --> 00:08:21,974
of the inheritance declaration.

149
00:08:21,974 --> 00:08:25,507
As always, the destructors are called

150
00:08:25,507 --> 00:08:28,217
in the order reverse to that
of the constructors.


151
00:08:28,217 --> 00:08:30,503
Let us illustrate all this
with a concrete example.

152
00:08:30,503 --> 00:08:34,969
We will go back to the example regarding
ovoviviparous who inherit

153
00:08:34,969 --> 00:08:39,561
from both oviparous and viviparous.
Let us assume that

154
00:08:39,561 --> 00:08:44,261
oviparous' constructor typically require


155
00:08:44,261 --> 00:08:47,356
a number of eggs, and that
the viviparous' constructor

156
00:08:47,356 --> 00:08:52,222
requires a gestation period.
For ovoviviparous, we will add

157
00:08:52,222 --> 00:08:55,833
an attribute here: it is a boolean
indicating

158
00:08:55,833 --> 00:08:58,346
if the species is rare or not.

159
00:08:58,346 --> 00:09:03,750
Thus, we pass here as the third parameter
an argument "rareté" (TN: means "rarity").

160
00:09:03,750 --> 00:09:08,078
This lets us initialize wether
the species is rare or not.

161
00:09:08,078 --> 00:09:12,229
Therefore, the prototype of the
ovoviviparous' constructor will typically

162
00:09:12,229 --> 00:09:14,904
have one parameter for the oviparous' constructor,

163
00:09:14,904 --> 00:09:19,059
one parameter for the viviparous' constructor,
and one parameter

164
00:09:19,059 --> 00:09:24,562
to initialize its own attribute.
To this parameter, we give a default

165
00:09:24,562 --> 00:09:27,063
value, which is "false".

166
00:09:27,063 --> 00:09:32,401
The constructor for ovoviviparous is thus
tasked with calling the constructors

167
00:09:32,401 --> 00:09:35,546
of the classes it inherits from.
First of all, it will call,

168
00:09:35,546 --> 00:09:39,724
in its initialization list,
the constructors of the classes

169
00:09:39,724 --> 00:09:42,975
it inhertis from. For example, it will
called the viviparous' constructor

170
00:09:42,975 --> 00:09:46,983
by passing the expected parameter.
It will also call the oviparous' constructor

171
00:09:46,983 --> 00:09:51,148
by passing the corresponding parameter.
These calls are, as usual, separated

172
00:09:51,148 --> 00:09:56,047
by commas. Then, we will initialize
its own attribute with the parameter

173
00:09:56,047 --> 00:10:00,110
received here as argument.

174
00:10:00,110 --> 00:10:04,280
Pay attention though, here, even if

175
00:10:04,280 --> 00:10:09,228
we may think that, as it is, the constructor
of ovoviviparous will

176
00:10:09,228 --> 00:10:12,736
first call the viviparous' constructor,
then the oviparous' constructor,

177
00:10:12,736 --> 00:10:16,813
actually, this is not the case.

178
00:10:16,813 --> 00:10:21,062
The first called constructor will actually
be the one of oviparous.

179
00:10:21,062 --> 00:10:24,427
What matters regarding the call order
of the super-classes

180
00:10:24,427 --> 00:10:27,979
in case of multiple inhertiance
is indeed the inheritance declaration

181
00:10:27,979 --> 00:10:32,207
and not the order of declaration
in the constuctor's


182
00:10:32,207 --> 00:10:32,506
initialization list in the sub-class.

183
00:10:32,506 --> 00:10:38,616
This means that here, whatever we write,
the oviparous' constructor

184
00:10:38,616 --> 00:10:41,898
will always be called first.
Then, the viviparous' constructor

185
00:10:41,898 --> 00:10:43,220
will be called.

186
00:10:43,220 --> 00:10:45,853
To make things easier, most modern
compilers will now indicate

187
00:10:45,853 --> 00:10:50,024
with a warning if the call order

188
00:10:50,024 --> 00:10:52,684
of the constructors does not match

189
00:10:52,684 --> 00:10:56,087
the one you think you have

190
00:10:56,087 --> 00:11:00,149
written here.

191
00:11:00,149 --> 00:11:04,872
Voilà, this was all we had to say
on multiple inheritance

192
00:11:04,872 --> 00:11:07,238
and the order of the constructors' call.

193
00:11:07,238 --> 00:11:10,506
We remind you that the destructors are
always called

194
00:11:10,506 --> 00:11:14,506
in the reverse order
of the constructors'.
