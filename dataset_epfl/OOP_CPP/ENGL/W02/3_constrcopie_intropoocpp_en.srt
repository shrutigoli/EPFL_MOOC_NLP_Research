1
00:00:04,082 --> 00:00:07,272
In this episode, we will focus
on another particular

2
00:00:07,272 --> 00:00:10,572
constructor : the copy constructor.
Namely, we will wonder

3
00:00:10,572 --> 00:00:14,572
what happens when an object
is initialized with a copy

4
00:00:14,584 --> 00:00:17,194
of another object of the same class.

5
00:00:17,194 --> 00:00:21,194
C++ gives us a way to do
instance copies. For example,

6
00:00:21,194 --> 00:00:25,774
we have here a first r1 instance
of the "Rectangle" class

7
00:00:25,774 --> 00:00:29,054
which has been initialized through
a usual constructor, here with

8
00:00:29,054 --> 00:00:33,054
two parameters. This results
in the following situation in the memory.

9
00:00:35,219 --> 00:00:43,089
This instance has thus been initialized to
the values 12.3 and 24.5. We have here

10
00:00:43,089 --> 00:00:48,339
another "r2" instance of the very same
"Rectangle" class. r2 is initialized

11
00:00:48,339 --> 00:00:50,899
with a copy of r1.

12
00:00:50,899 --> 00:00:53,579
This results in the following
situation.

13
00:00:55,101 --> 00:01:00,851
r2 is initialized with a copy of the
values, that is, 12.3 for the height

14
00:01:00,851 --> 00:01:04,231
and 24.5 for the width.

15
00:01:04,231 --> 00:01:08,791
An initial copy occurs
upon the creation of r2.

16
00:01:08,791 --> 00:01:13,701
Naturally, "2 and r1 are distinct
instances, living their life indepently

17
00:01:13,701 --> 00:01:18,411
in the memory. Simply, r2 is initialized,
upon its building,

18
00:01:18,411 --> 00:01:24,411
with a copy of the values of r1. This
is called the copy constructor.

19
00:01:24,794 --> 00:01:28,644
Here is another example where we
call the copy constructor.

20
00:01:28,644 --> 00:01:30,854
Is this correct?

21
00:01:31,901 --> 00:01:37,071
Yes! We indeed have a copy here
since we are passing parameters

22
00:01:37,071 --> 00:01:41,341
by value. Remember, that when we pass parameters by value,
the arguments

23
00:01:41,341 --> 00:01:46,478
are evaluated and copied into
the function parameters.

24
00:01:46,478 --> 00:01:54,628
We thus inded have a copy of r1 which
will be copied into "r", a parameter

25
00:01:54,628 --> 00:02:01,018
of the "f" function. During the call 
to f of r1,

26
00:02:01,018 --> 00:02:04,188
the copy constructor of the
"Rectangle" class  is called.

27
00:02:04,188 --> 00:02:08,418
The copy constructor is called because
of passing parameters by value here;

28
00:02:08,418 --> 00:02:12,416
thus resulting in a copy. Obviously,
if we pass the parameters by reference, there is

29
00:02:12,416 --> 00:02:15,546
no copy at all; the copy constructor
is thus not called.

30
00:02:15,546 --> 00:02:20,716
The goal of the copy constructor is
to initialize an instance with a copy

31
00:02:20,716 --> 00:02:23,606
of another instance of the same class

32
00:02:23,606 --> 00:02:27,076
Its prototype is thus fixed. Since it
is a constructor,

33
00:02:27,076 --> 00:02:31,756
its name is none other than
the class name. And since it initializes

34
00:02:31,756 --> 00:02:35,706
with a copy of another instance
of the same, it will only

35
00:02:35,706 --> 00:02:40,016
receive one single parameter here. This parameter
is another instance of the same class.

36
00:02:40,016 --> 00:02:44,646
We will pass this other instance by
constant reference in other to avoid

37
00:02:44,646 --> 00:02:48,646
passing parameters by value which
would create another copy.

38
00:02:48,646 --> 00:02:51,896
In this case, we would enter an infinite loop!
making a copy of a copy of a copy...

39
00:02:51,896 --> 00:02:56,136
Therefore, we use the passage by reference.
Also, the copy constructor

40
00:02:56,136 --> 00:03:00,586
does not modify the received instance
but only modifies the instance

41
00:03:00,586 --> 00:03:03,766
it is currently initializing. Thus, it
does not modified the received

42
00:03:03,766 --> 00:03:06,316
instance : this is a constant
reference.

43
00:03:06,316 --> 00:03:08,896
For example, in our rectangle
case, we would have here

44
00:03:08,896 --> 00:03:12,896
a constructor called "Rectangle"
for the "Rectangle" class.

45
00:03:12,896 --> 00:03:17,616
It would receive another instance
of the same "Rectangle" class, passed by

46
00:03:17,616 --> 00:03:22,696
constant reference. Of course,
it would use the initialization section

47
00:03:22,696 --> 00:03:25,686
starting with a colon.

48
00:03:25,686 --> 00:03:30,396
Here initializing the height of
the instance it is creating

49
00:03:30,396 --> 00:03:36,586
with the value of the height of
the other instance received

50
00:03:36,586 --> 00:03:40,586
as parameter. And similarly,
initializing the width of the

51
00:03:40,586 --> 00:03:46,286
instance it is creating with the
copy of the width of the other instance

52
00:03:46,286 --> 00:03:48,766
received as parameter.

53
00:03:48,766 --> 00:03:54,926
let us go back to the previous
example. We have an r2 instance

54
00:03:54,926 --> 00:04:01,546
created with a copy of the r1 instance.
We indeed have a call to the copy

55
00:04:01,546 --> 00:04:08,596
constructor. In this case, r1 is the
received parameter

56
00:04:08,596 --> 00:04:14,326
and r2 the initialized instance.
Here, we thus have "r2.hauteur"

57
00:04:14,326 --> 00:04:21,146
receiving "r1.hauteur" and "r2.largeur"
receiving "r1.largeur".

58
00:04:21,549 --> 00:04:25,319
By the way, often it is not necessary
to write explicitly the

59
00:04:25,319 --> 00:04:29,319
copy constructor. Indeed, the C++
compiler provied us with

60
00:04:29,319 --> 00:04:30,069
a default one.

61
00:04:30,069 --> 00:04:34,329
There is always a copy constructor
furnished by default. We call it

62
00:04:34,332 --> 00:04:36,552
the default copy constructor.

63
00:04:36,552 --> 00:04:40,972
This copy constructor carries out
 a so-called shallow copy.

64
00:04:40,972 --> 00:04:47,132
This means that it will copy the
parameter attributes of the other

65
00:04:47,132 --> 00:04:51,132
received instance one after the other
in order to process the current initialization.

66
00:04:51,963 --> 00:04:56,133
For example, in the case of our rectangle,
we did not have to write the previous

67
00:04:56,133 --> 00:05:00,724
constructor. In this simple case, it is
automatically generated by

68
00:05:00,724 --> 00:05:04,724
the compiler. It is thus not necessary
to write this constructor which

69
00:05:04,724 --> 00:05:10,304
copies the "hauteur" attribute of the
instance received as parameter

70
00:05:10,304 --> 00:05:14,304
into the "hauteur" of the instance
we are currently initializing

71
00:05:14,304 --> 00:05:20,304
and copies the "largeur" of the received
instance into the current instance and so on

72
00:05:20,304 --> 00:05:24,304
for every other possible attributes.
This is how the default

73
00:05:24,304 --> 00:05:26,924
copy constructor is build

74
00:05:27,410 --> 00:05:30,590
Very often, this shallow copy suffices.
Most of the time, you thus will not

75
00:05:30,590 --> 00:05:34,020
need to write the copy constructor
explicitly.

76
00:05:34,020 --> 00:05:37,410
In certain cases though (we are anticipating
on upcoming examples which we will

77
00:05:37,410 --> 00:05:40,470
face much later in this course) it will
be necessary to express

78
00:05:40,470 --> 00:05:44,470
our very own copy constructor.
We will have to resort to a so-called

79
00:05:44,487 --> 00:05:45,957
deep copy.

80
00:05:45,957 --> 00:05:49,297
We are showing it already, anticipating
on upcoming concepts.

81
00:05:49,297 --> 00:05:53,937
Here is a golden rule. If you have to
touch one member of this triumvirate :

82
00:05:53,937 --> 00:05:57,387
the copy constructor, the destructor
and the assignment operator

83
00:05:57,387 --> 00:06:00,697
(that is, the equal operator), then
you must at least

84
00:06:00,697 --> 00:06:04,697
ask yourselves wether you should
also redefine

85
00:06:04,697 --> 00:06:06,127
the other two.

86
00:06:06,439 --> 00:06:10,059
This golden rule anticipates on the
concepts of the destructor

87
00:06:10,059 --> 00:06:13,479
and the assignment operator
which will be presented later.

88
00:06:14,059 --> 00:06:18,609
We have seen that a default copy constructor
is automatically provided.


89
00:06:18,609 --> 00:06:22,779
In certain cases, we could not wish
to authorize the copy.

90
00:06:22,819 --> 00:06:27,949
Since C++ 2011, we can explicitly ask
to remove the copy constructor.

91
00:06:27,949 --> 00:06:32,669
This can be useful when we are dealing,
for example, with classes containing

92
00:06:32,669 --> 00:06:37,709
many on object. For example we could have
the simulator of a physical word

93
00:06:37,709 --> 00:06:41,709
which we do not wish to copy
with all its objects.

94
00:06:41,709 --> 00:06:46,989
We wish to prevent copies of this
huge object to be made since it contains

95
00:06:46,989 --> 00:06:48,549
many, many things.

96
00:06:48,549 --> 00:06:54,039
This can be done with a particular
syntax written : " = delete ".

97
00:06:54,039 --> 00:06:58,739
We simply need to write
" = delete " just after the prototype

98
00:06:58,739 --> 00:07:00,059
of the copy constructor.

99
00:07:00,059 --> 00:07:03,389
For example,  we have here a class
we do not wish to copy.

100
00:07:03,389 --> 00:07:06,879
We will call it "PasCopiable" (TN: means
"NotCopiable). Here are, as usual,

101
00:07:06,879 --> 00:07:10,769
all the class defenition. In order to
avoid the copy we will start

102
00:07:10,769 --> 00:07:14,329
by adding a copy constructor. This
is indeed a constructor, for it has the same

103
00:07:14,329 --> 00:07:19,159
method name as the name of the class.
Here we received a parameter by constant

104
00:07:19,159 --> 00:07:24,759
reference. Its type is the same as the
class, thus "PasCopiable".

105
00:07:24,759 --> 00:07:29,009
Now, we only need to add, here,

106
00:07:29,009 --> 00:07:31,599
at the end of the prototype " = delete ".

107
00:07:31,599 --> 00:07:35,599
Therefore, we cannot call
the copy constructor

108
00:07:35,599 --> 00:07:40,029
anymore since it has been destroyed,
deleted; it exists no longer.

109
00:07:40,029 --> 00:07:44,029
Now, this square is not copiable;
we can simply initialize it

110
00:07:44,029 --> 00:07:46,529
with the other available 
constructors.

111
00:07:46,529 --> 00:07:49,069
Instance copies are not longer
possible.

112
00:07:49,354 --> 00:07:54,374
Voilà! This concludes this episode
on the copy constructors in C++.
