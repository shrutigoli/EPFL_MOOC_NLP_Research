1
00:00:04,116 --> 00:00:07,466
In the previous episodes, we have
learnt how to declare classes

2
00:00:07,466 --> 00:00:10,674
and class instances (i.e., objects).

3
00:00:10,674 --> 00:00:14,227
For example, if you wish to declare
a "rect" instance of the "Rectangle" class,

4
00:00:14,227 --> 00:00:18,466
you will simply write it like this :
"Rectangle rect;"

5
00:00:18,466 --> 00:00:20,243
Now, we could wonder

6
00:00:20,243 --> 00:00:22,020
how to give values
to its data members.

7
00:00:22,020 --> 00:00:24,025
Here, we would like, for example,
to initialize

8
00:00:24,025 --> 00:00:26,332
the data members "hauteur" and "largeur"
(TN: means "height" and "width")

9
00:00:26,332 --> 00:00:29,078
of this "rect" instance of the
"Rectangle" class.

10
00:00:29,078 --> 00:00:32,775
In order to give values, we could
resort to the previously discussed

11
00:00:32,775 --> 00:00:37,385
setters such as "setHauteur" and "setLargeur".
Thus we would individually

12
00:00:37,396 --> 00:00:41,030
give a value to each member.
We are doing just that here,

13
00:00:41,030 --> 00:00:44,298
declaring a "rect" instance of the
"Rectangle" class.

14
00:00:44,298 --> 00:00:47,541
Then, we are using a double-type auxiliary
variable "lu". Through this variable, we will read,

15
00:00:47,541 --> 00:00:51,095
for example, the height, printing here
a message for the user

16
00:00:51,095 --> 00:00:55,553
and retrieving the value inside "lu"
through "cin".

17
00:00:55,553 --> 00:01:00,633
Then, with this setter "setHauteur",
we will assign the height.


18
00:01:00,635 --> 00:01:03,789
Then, similarly, we will ask the width,
read it in "lu",

19
00:01:03,789 --> 00:01:06,335
call the setter "setLargeur"

20
00:01:06,335 --> 00:01:09,598
and assign the width of our
"rect" instance.

21
00:01:09,598 --> 00:01:12,119
However, this is a poor solution.

22
00:01:12,119 --> 00:01:14,252
Indeed, since we are
to initialize

23
00:01:14,252 --> 00:01:16,189
all the data members, this solution
presupposes that all data members

24
00:01:16,189 --> 00:01:19,519
are either part of the interface,
thus being public

25
00:01:19,537 --> 00:01:22,322
-- which is not acceptable in regard
to the encapsulation

26
00:01:22,322 --> 00:01:26,741
of the object-oriented conception --
or assiocated with a setter.



27
00:01:26,741 --> 00:01:29,328
This also shatters the encapsulation

28
00:01:29,328 --> 00:01:30,918
because it results

29
00:01:30,918 --> 00:01:32,997
in the interface being dependant
on the internal representation

30
00:01:32,997 --> 00:01:37,650
of the data members since we would  need
one setter for each data member,

31
00:01:37,790 --> 00:01:41,317
However, the goal of encapsulation is
to clearly separate

32
00:01:41,317 --> 00:01:42,554
interface and implementation.

33
00:01:42,554 --> 00:01:46,397
If we had, in the interface, a 
setter for each data member,

34
00:01:46,397 --> 00:01:49,069
the implementation choices

35
00:01:49,069 --> 00:01:51,504
would overflow on the
interface,

36
00:01:51,504 --> 00:01:53,244
thus breaking the encapsulation.

37
00:01:53,256 --> 00:01:55,040
Also, regarding conception,
this means that

38
00:01:55,040 --> 00:02:00,070
the task of initializing all data members
will befall on the

39
00:02:00,070 --> 00:02:01,039
programmer-user of the class.

40
00:02:01,039 --> 00:02:02,799
Since they will have to initialize
all the data members,

41
00:02:02,799 --> 00:02:06,999
we are taking the risk of an
ommision -- a major conception flaw.

42
00:02:07,004 --> 00:02:10,476
Normally, the developer-programmer
of the class

43
00:02:10,476 --> 00:02:15,496
should be the one initializing
the data members or at least giving

44
00:02:15,499 --> 00:02:17,555
an initialization possibility

45
00:02:17,555 --> 00:02:21,633
regarding a few data members carefully
chosen by the class developer.

46
00:02:21,633 --> 00:02:23,927
The programmer-user of the
class should not

47
00:02:23,927 --> 00:02:27,277
have to think of all the possible 
data members having to be initialized.

48
00:02:27,326 --> 00:02:31,756
Another solution is, as  usual, to
create a specific method

49
00:02:31,759 --> 00:02:35,436
tasked with this initializing the data members.

50
00:02:35,436 --> 00:02:39,586
Here, we would thus create a specific
method initializing the data members.

51
00:02:39,701 --> 00:02:44,531
For example, we could create such
a method called "init"

52
00:02:44,546 --> 00:02:48,902
which would initialize both members
"hauteur" and " largeur" of our "Rectangle".

53
00:02:48,902 --> 00:02:52,917
In order to function, this method
will receive here, a value "h"

54
00:02:52,917 --> 00:02:57,094
which will be assigned to the height and
a value "L" which will be assigned in the width.

55
00:02:57,094 --> 00:03:01,050
This method would be like
a setter for both "hauteur"

56
00:03:01,050 --> 00:03:04,815
and "largeur" at the same time:
a setter

57
00:03:04,815 --> 00:03:07,146
initializing all the data members
needing to

58
00:03:07,146 --> 00:03:09,216
be intialized in one go.

59
00:03:09,220 --> 00:03:13,980
We would use it as follows.
We would declare a rectangle "rect".

60
00:03:14,523 --> 00:03:18,921
Then, we would call the "init"
method, passing two values.

61
00:03:18,921 --> 00:03:23,991
For example 3.0 for the height
and 4.0 for the width.

62
00:03:24,918 --> 00:03:27,520
This way is certainly not a bad
way to proceed.

63
00:03:27,520 --> 00:03:31,188
Actually, it is such a good way
that is is already available

64
00:03:31,188 --> 00:03:32,915
as such in C++.

65
00:03:32,915 --> 00:03:34,765
Such methods are called the « constructors ».

66
00:03:34,765 --> 00:03:37,635
Constructors are particular methods

67
00:03:37,638 --> 00:03:41,668
tasked with initializing the class.

68
00:03:42,053 --> 00:03:45,013
A constructor is thus a method which
is automatically called

69
00:03:45,013 --> 00:03:49,333
upon the declaration of an object;
right when a new instance is created.

70
00:03:49,436 --> 00:03:52,919
Its purpose is indeed to realize
what must be done

71
00:03:52,919 --> 00:03:54,611
at the start of an object's life.

72
00:03:54,611 --> 00:03:57,254
For example, initializing
its members.

73
00:03:57,254 --> 00:04:01,374
In order to declare a constructor,
we simply need to declare, like this,

74
00:04:01,383 --> 00:04:04,035
a method which name is none
other than the name of the class.

75
00:04:04,035 --> 00:04:07,758
This method will receive,
if necessary, parameters.

76
00:04:07,758 --> 00:04:12,299
Then, we will write its definition like
of any other method.

77
00:04:12,299 --> 00:04:14,593
For example, in the case
of our "Rectangle" class,

78
00:04:14,593 --> 00:04:17,943
we could declare the constructor here.
"Rectangle" - the exact same name

79
00:04:17,943 --> 00:04:21,382
as the name of the class.
Our constructor will receive two parameters

80
00:04:21,382 --> 00:04:24,742
in order to initialize
the height and width.

81
00:04:25,546 --> 00:04:28,875
Constructors function almost like
other methods.

82
00:04:28,875 --> 00:04:33,199
There are a few differences, though. Firstly,
there is no return type; we did not write anything,

83
00:04:33,199 --> 00:04:38,147
not even "void", before the
constructor's prototype.

84
00:04:38,147 --> 00:04:40,922
This means that there is no
return type.

85
00:04:40,922 --> 00:04:45,052
Also, the constructor name is absolutely
identical to the

86
00:04:45,089 --> 00:04:46,628
name of the class.

87
00:04:46,628 --> 00:04:50,865
Finally, constructors are called
automatically whenever

88
00:04:50,865 --> 00:04:54,405
an instance of the class
is declared.

89
00:04:54,505 --> 00:04:57,263
For example, if we write, simply,

90
00:04:57,263 --> 00:05:02,288
the declaration of a "rect" instance
of our "Rectangle" class here,

91
00:05:02,288 --> 00:05:07,854
the so-called default constructor
will be automatically

92
00:05:07,854 --> 00:05:10,774
called - we will go back
to this later.

93
00:05:11,089 --> 00:05:13,822
A constructor is thus called

94
00:05:13,822 --> 00:05:17,842
whenever an instance is created:
this call being explicit or not.

95
00:05:18,481 --> 00:05:20,681
These are the constructor
specificities.

96
00:05:20,692 --> 00:05:24,750
However, just like other methods,
constructors may be overloaded

97
00:05:24,750 --> 00:05:29,010
and even have default values
for their parameters.

98
00:05:29,271 --> 00:05:32,596
We will expand on this later. For now,
just be aware

99
00:05:32,596 --> 00:05:35,110
that there can be more than
one constructor

100
00:05:35,110 --> 00:05:38,524
since they may be overloaded.
We can have several constructors

101
00:05:38,524 --> 00:05:42,020
with the same name -the name of the class-
but with different parameters.

102
00:05:42,020 --> 00:05:45,180
We are talking about the class constructorS.

103
00:05:45,853 --> 00:05:48,029
Now, let us go back to
our initial example.

104
00:05:48,029 --> 00:05:51,139
For now, we only wish to declare
one single constructor.

105
00:05:51,149 --> 00:05:53,606
How should we concretely proceed?

106
00:05:53,606 --> 00:05:56,650
We still have the declaration of the
"Rectangle" class.

107
00:05:56,650 --> 00:06:02,560
The data members are still private.
Obviously, the constructor

108
00:06:02,560 --> 00:06:05,100
will be public since it will be used

109
00:06:05,103 --> 00:06:08,862
by the user-programmers of the class;
constructors need to be accessible.

110
00:06:08,862 --> 00:06:11,680
Therefore, the constructor is part of
the interface. We would have here

111
00:06:11,680 --> 00:06:15,790
a constructor with the same name
as the name of the class.

112
00:06:15,790 --> 00:06:21,382
Its purpose is to initialize the
data members height and width

113
00:06:21,382 --> 00:06:26,591
through received parameters "h"
(assigned to the height)

114
00:06:26,591 --> 00:06:30,673
and "L" (assigned to the width).
In the public part here,

115
00:06:30,673 --> 00:06:34,243
we would have the prototype
and the definition of the constructor.

116
00:06:34,249 --> 00:06:36,862
Then would follow all
other methods we decided

117
00:06:36,862 --> 00:06:39,296
to implement in the interface.

118
00:06:39,296 --> 00:06:42,191
By the way, since we now
have a constructor,

119
00:06:42,191 --> 00:06:44,674
we can freely pass the initial values

120
00:06:44,674 --> 00:06:47,850
during the construction of every
instance of the "Rectangle" class.

121
00:06:47,850 --> 00:06:50,266
Therefore, it may not be necessary

122
00:06:50,266 --> 00:06:54,171
to keep these setters which let us modify
each data member.

123
00:06:54,171 --> 00:06:57,566
This choice befalls on the programmer
of the "Rectangle" class.

124
00:06:57,566 --> 00:07:01,453
Should we, yes or no, be able
to modify the data members

125
00:07:01,453 --> 00:07:03,736
"hauteur" and "largeur" after the construction

126
00:07:03,736 --> 00:07:06,565
or is the initial value enoguh?

127
00:07:06,565 --> 00:07:09,076
Let us now see how the
constructors are called.

128
00:07:09,076 --> 00:07:11,246
We said that they are automatically called

129
00:07:11,246 --> 00:07:14,950
upon the declaration of every instance.
But how are the parameters passed?

130
00:07:14,950 --> 00:07:17,060
In order to pass the parameters,

131
00:07:17,060 --> 00:07:20,617
we simply need, during the
declaration

132
00:07:20,617 --> 00:07:23,787
of a certain class instance,
to put, between brackets,

133
00:07:23,787 --> 00:07:27,229
the different values we will pass
as arguments

134
00:07:27,229 --> 00:07:30,915
to the parameters
of the corresponding constructor.

135
00:07:30,915 --> 00:07:33,094
For example, in the "Rectangle" class,

136
00:07:33,094 --> 00:07:36,501
we have a constructor
with two parameters.

137
00:07:36,501 --> 00:07:41,222
We will thus pass, during the declaration
of the "r1" instance of the Rectangle class,

138
00:07:41,222 --> 00:07:45,298
between brackets, the two values
for the parameters

139
00:07:45,298 --> 00:07:48,732
of the height and the width

140
00:07:48,732 --> 00:07:51,952
we have previously declared.

141
00:07:51,952 --> 00:07:54,595
The constructor's purpose
is thus to initialize the data members.

142
00:07:54,595 --> 00:07:59,129
But what about the data members
which are objects themselves?

143
00:07:59,129 --> 00:08:01,964
Let us take an example
which will be improved later

144
00:08:01,964 --> 00:08:03,862
once we have discussed the inheritance
notion.

145
00:08:03,862 --> 00:08:07,574
Here, we suppose that we have a "RectangleColore"
 class (TN: means "ColoredRectangle").

146
00:08:07,574 --> 00:08:11,397
In its private part, this class contains
a "Rectangle" data member

147
00:08:11,397 --> 00:08:16,797
which is itself an instance,
an object of the "Rectangle" class.

148
00:08:16,800 --> 00:08:19,501
Another data member would be,
for example, a color (TN: "couleur" in French).

149
00:08:19,501 --> 00:08:22,411
In order to make things easier, we could
suppose that "Couleur" is an enumerated type

150
00:08:22,411 --> 00:08:23,981
or an integer.

151
00:08:24,021 --> 00:08:28,061
How do we initialize
this "Rectangle" data member

152
00:08:28,080 --> 00:08:29,663
of the "RectangleColore" class?

153
00:08:29,663 --> 00:08:32,725
Since it is itself an object
of a class

154
00:08:32,725 --> 00:08:34,851
we will have to call its constructor.

155
00:08:34,851 --> 00:08:37,621
To that end, we could imagine
-- though it is a poor solution --

156
00:08:37,621 --> 00:08:41,709
to write the constructor of "RectangleColore".
-- we thus have the same name here

157
00:08:41,709 --> 00:08:44,824
as the class "RectangleColore" --
this constructor taking the parameters

158
00:08:44,824 --> 00:08:48,376
"hauteur" and "largeur" in
order to initialize the rectangle

159
00:08:48,376 --> 00:08:52,098
and a color parameter in order to
initialize the color data member.

160
00:08:52,098 --> 00:08:58,376
In the constructor's definition, we would
copy an anonymously-created

161
00:08:58,376 --> 00:09:02,966
rectangle which will receive the
parameter "h"

162
00:09:02,982 --> 00:09:09,134
and the parameter "l" in its own constructor.
This rectangle will then be copied

163
00:09:09,134 --> 00:09:13,218
in the "rectangle" data member of the
"RectangleColore" class.

164
00:09:13,218 --> 00:09:16,945
Then, we could initialize
the "couleur" data member

165
00:09:16,945 --> 00:09:20,355
by copying the value of the color
received here.

166
00:09:20,358 --> 00:09:24,277
This syntax, like here, "Rectangle"
without any variable name

167
00:09:24,277 --> 00:09:28,447
in the middle of the constructor call
is absolutely valid.

168
00:09:28,447 --> 00:09:31,232
This will create a so-called
"anonymous instance"

169
00:09:31,232 --> 00:09:33,410
-- it is not named --
of the "Rectangle" class.

170
00:09:33,410 --> 00:09:37,460
This indeed creates an
existing "Rectangle"

171
00:09:37,462 --> 00:09:41,402
with its height and width.

172
00:09:41,402 --> 00:09:45,648
This "Rectangle" will then be
copied in the "rectangle" data member

173
00:09:45,648 --> 00:09:49,072
of the current instance of the "RectangleColore" class.
Like this.

174
00:09:49,072 --> 00:09:53,052
This instance being created and
initialized by the constructor.

175
00:09:53,052 --> 00:09:58,110
As we can see, we will have two "Rectangles".
A first anonymous "Rectangle" here

176
00:09:58,110 --> 00:10:00,911
which is initialized
through a call to its constructor.

177
00:10:00,911 --> 00:10:05,240
And a second "Rectangle", here,
the "rectangle" data member

178
00:10:05,240 --> 00:10:08,873
of the instance we are
currently initializing

179
00:10:08,873 --> 00:10:11,053
in the constructor of "RectangleColore".

180
00:10:11,144 --> 00:10:12,503
This is therefore a very poor solution.

181
00:10:12,503 --> 00:10:14,809
We thus need to find an
alternative.

182
00:10:14,809 --> 00:10:18,627
It would be ideal for the classes
possesing objects as data members

183
00:10:18,627 --> 00:10:22,652
to be able to directly call
the constructor of their data members.

184
00:10:22,652 --> 00:10:24,791
Here, for exemple, we would like
"RectangleColore"

185
00:10:24,791 --> 00:10:28,365
to directly call the constructor
of the "Rectangle" class

186
00:10:28,365 --> 00:10:31,972
during the initialization
of its "rectangle" data member

187
00:10:31,972 --> 00:10:34,722
without needing to resort
to an intermediate copy.

188
00:10:34,726 --> 00:10:38,507
It is much better to put things at the
right place than to pass by a copy

189
00:10:38,507 --> 00:10:41,132
-- especially if the object is voluminous.

190
00:10:41,132 --> 00:10:45,926
To that end, C++ offers us a so-called
"initialization list"

191
00:10:45,926 --> 00:10:47,598
in the constructors.

192
00:10:47,598 --> 00:10:51,340
The purpose of this initialization
list is indeed to call

193
00:10:51,340 --> 00:10:54,987
the constructors of the object data members,
but also to initialize the data members

194
00:10:54,987 --> 00:10:57,838
which are not objects. These
non-object data members are called

195
00:10:57,838 --> 00:10:59,972
"basic types" (TN: or "native types"),
such as "int" or "double".

196
00:10:59,972 --> 00:11:04,051
It is very good practice to use
an initialization list

197
00:11:04,051 --> 00:11:07,838
in order to initialize the data members
instead of doing so

198
00:11:07,838 --> 00:11:10,021
in the constructor's body.

199
00:11:10,681 --> 00:11:13,481
The general writing of an
initialization list is done

200
00:11:13,493 --> 00:11:17,134
as follows :
Between the constructor header

201
00:11:17,134 --> 00:11:20,598
- which includes the same name as the
name of the class 

202
00:11:20,598 --> 00:11:22,906
and an eventual list of
parameters here -

203
00:11:22,906 --> 00:11:26,460
and the constructor's definition,

204
00:11:26,460 --> 00:11:29,848
we will write the initialization
list.

205
00:11:29,866 --> 00:11:34,825
This list starts with a colon.
Then, for each data member,

206
00:11:34,825 --> 00:11:38,186
we will have here the name of
the data member

207
00:11:38,186 --> 00:11:41,658
followed by a syntax similar to the
one used

208
00:11:41,658 --> 00:11:43,423
for an instance declaration.

209
00:11:43,423 --> 00:11:48,156
Namely, the call of the constructor
corresponding to each data member

210
00:11:48,156 --> 00:11:52,166
here between brackets, followed
by a comma if there are several data members.

211
00:11:52,166 --> 00:11:55,835
We will keep going like this
for every data member for which

212
00:11:55,835 --> 00:12:00,385
we need to call its constructor,
using this parentheses syntax.

213
00:12:00,514 --> 00:12:04,000
Let us go back to our "RectangleColore"
example.

214
00:12:04,000 --> 00:12:08,120
Be reminded that "RectangleColore"
has for member

215
00:12:08,125 --> 00:12:13,705
a "rectangle" data member which is an
object of the "Rectangle" class.

216
00:12:13,714 --> 00:12:18,759
Also, remember that the "Rectangle"
class had a two-parameters

217
00:12:18,759 --> 00:12:23,255
constructor tasked with initializing
the height and the width.

218
00:12:23,255 --> 00:12:27,615
Also, our "RectangleColore" class,
in addition to the rectangle data member

219
00:12:27,672 --> 00:12:32,002
has a "couleur" data member.
The "RectangleColore" constructor

220
00:12:32,011 --> 00:12:35,768
-- which we are interested in --
will receive parameters

221
00:12:35,768 --> 00:12:38,534
in order to initialize its
"rectangle" data member

222
00:12:38,534 --> 00:12:42,151
and other parameters in order to
initialize its color data member.

223
00:12:42,151 --> 00:12:46,795
This initialization will occur
in the so-called

224
00:12:46,795 --> 00:12:50,441
initialization list here,
starting with a colon.

225
00:12:50,441 --> 00:12:55,813
To that end, we will call the constructor of the 
"Rectangle" class, taking two parameters here

226
00:12:55,813 --> 00:13:00,453
for the "rectangle" data member.
Here will we put

227
00:13:00,453 --> 00:13:03,964
the name of the data member, "rectangle",
the same name

228
00:13:03,964 --> 00:13:06,970
since we are precisely initializing
this very data member.

229
00:13:06,970 --> 00:13:10,290
We will write here the name of the "rectangle"
data member using the same syntax

230
00:13:10,290 --> 00:13:13,403
as if we had declared an instance,

231
00:13:13,403 --> 00:13:15,996
initialized a variable here.

232
00:13:15,996 --> 00:13:19,617
Here is thus the call to the corresponding
constructor of the "Rectangle" class.

233
00:13:19,617 --> 00:13:23,017
Then, the comma separating the
different parts

234
00:13:23,024 --> 00:13:26,287
of the initialization list.
Now, similarly, we can

235
00:13:26,287 --> 00:13:30,071
initialize the data members even
if they are of the type double or int.

236
00:13:30,071 --> 00:13:32,221
Here, the non-object data members

237
00:13:32,221 --> 00:13:35,974
will follow a similar syntax. Here,
between parentheses

238
00:13:35,974 --> 00:13:40,764
the value we wish to pass
to the data member, still conserving

239
00:13:40,769 --> 00:13:43,729
the name of the data members.

240
00:13:43,986 --> 00:13:49,726
For example, if we wish to declare
an "r" instance of "RectangleColore",

241
00:13:49,855 --> 00:13:54,975
calling here its only constructor
taking three parameters.

242
00:13:54,990 --> 00:14:03,166
For example, with a height of 3.5,
a width of 4.5

243
00:14:03,166 --> 00:14:08,726
and color which would, for example,
be defined as "rouge" (TN: means "red").

244
00:14:08,728 --> 00:14:13,458
Here, we indeed have the declaration of
an instance with a call to its constructor.

245
00:14:13,458 --> 00:14:16,962
What will concretely happen?
Why, this will effecively create,

246
00:14:16,962 --> 00:14:18,142
in the memory,

247
00:14:18,957 --> 00:14:26,387
an "r" instance of "RectangleColore".
This instance contains a "Rectangle"-type

248
00:14:26,487 --> 00:14:33,877
data member which has itself a height
and a width.

249
00:14:33,877 --> 00:14:37,947
It also contains a "Couleur"-type
data member.

250
00:14:38,044 --> 00:14:45,184
Upon the call to the constructor,
we will plug in here

251
00:14:45,184 --> 00:14:50,353
and execute the colon
section, thus calling

252
00:14:50,353 --> 00:14:57,077
the constructor of the rectangle data member
-an instance of the "Rectangle" class.

253
00:14:57,077 --> 00:15:04,847
To the constructor, we will pass the the parameter
"h", containing 3.5 to the "Rectangle" constructor

254
00:15:05,198 --> 00:15:10,058
in order to initialize
the height value

255
00:15:10,553 --> 00:15:17,209
of the rectangle data member of the "r" instance
of the "RectangleColore" class.

256
00:15:17,259 --> 00:15:23,139
Similarly, here, this 4.5, that is,
the "L" parameter of this constructor

257
00:15:23,158 --> 00:15:27,258
will be passed to the constructor during
the execution of the initialization list.

258
00:15:27,304 --> 00:15:32,282
It is the second parameter of the constructor
of the rectangle data member instance

259
00:15:32,282 --> 00:15:40,782
of the "Rectangle" class.
Here, we will initialize it to the value 4.5

260
00:15:40,885 --> 00:15:46,721
Here, the "Couleur"-type last
parameter "rouge"

261
00:15:46,721 --> 00:15:51,706
will go here, in this section of the
initialization list,

262
00:15:51,706 --> 00:15:54,903
thus initializing the color data member directly.

263
00:15:55,633 --> 00:15:58,882
Using this section beginning
with a colon

264
00:15:58,882 --> 00:16:02,578
-- called the "initialization list" --
is very recommanded.

265
00:16:02,578 --> 00:16:06,319
First of all, it prevents, as we have seen
before, to resort to copies

266
00:16:06,319 --> 00:16:10,165
of all object data members
(class instances).

267
00:16:10,165 --> 00:16:13,685
Also, it lets us regroup in a very
compact and readable way

268
00:16:13,691 --> 00:16:16,012
the initialization of all the
data members.

269
00:16:16,012 --> 00:16:19,017
Finally, it grants the initial values
to all data members

270
00:16:19,017 --> 00:16:22,877
from the start, before the object has
even been created.

271
00:16:22,898 --> 00:16:26,452
Of course, these initializations
can then be reused

272
00:16:26,452 --> 00:16:28,969
or even modified within
the constructor's body;

273
00:16:28,969 --> 00:16:30,792
this is extremly rare, though.

274
00:16:30,792 --> 00:16:34,509
We are illustrating it on this slide
only because it is something possible,

275
00:16:34,509 --> 00:16:37,856
although you will very rarely
have to use it.

276
00:16:37,856 --> 00:16:41,618
For example, here is the constructor
of the "Rectangle" class

277
00:16:41,618 --> 00:16:46,258
where we receive both parameters
to initialize the height and the width.

278
00:16:46,258 --> 00:16:49,768
In the initialization list, we have
initialized the height.

279
00:16:49,768 --> 00:16:54,151
Though, it would be better to initialize
 the width aswell, after a comma.

280
00:16:54,151 --> 00:16:57,255
We have not done so in this example
in order to show you

281
00:16:57,255 --> 00:17:01,271
that the width is precisely not
initialized in this portion

282
00:17:01,271 --> 00:17:05,307
of the constructor.
Starting from there,

283
00:17:05,307 --> 00:17:07,127
the value is undefined.

284
00:17:07,133 --> 00:17:10,973
Then, as soon we assign
a value to the width,

285
00:17:10,975 --> 00:17:14,755
of course, the width will have
the assigned value.

286
00:17:14,755 --> 00:17:19,975
What you need to understand is
that we have a section of the constructor

287
00:17:19,987 --> 00:17:23,437
where the width is not initialized.
This is one of the reasons

288
00:17:23,437 --> 00:17:26,628
why we recommand to use the
initializer list (TN: here called in French "colon section").

289
00:17:26,628 --> 00:17:29,189
This section is executed from
the get-go

290
00:17:29,189 --> 00:17:33,961
before we even enter the constructor's
body.

291
00:17:33,961 --> 00:17:35,380
It is executed from the very beginning

292
00:17:35,380 --> 00:17:38,133
Thus, before we even enter the
constructor's body,

293
00:17:38,133 --> 00:17:41,933
we have initialized the height
to the value "h".

294
00:17:42,690 --> 00:17:47,360
If we follow these advice, our
program will look like this.

295
00:17:47,395 --> 00:17:52,132
In the declaration of the "Rectangle" class,
in its interface, we offer here

296
00:17:52,132 --> 00:17:56,352
a constructor taking two parameters
"h" and "L" initializing the height and width

297
00:17:56,388 --> 00:18:00,390
directly in the initialization
list starting with a colon

298
00:18:00,390 --> 00:18:05,349
with the values of "h" for the height
and "L" for the width.

299
00:18:05,349 --> 00:18:08,592
The constructor's body is thus
empty.

300
00:18:08,592 --> 00:18:11,999
This is very frequent in C++ constructors

301
00:18:11,999 --> 00:18:15,393
because we already have
this initialization list

302
00:18:15,393 --> 00:18:17,798
which it is recommanded to use.

303
00:18:17,798 --> 00:18:21,704
By the way, please note
that

304
00:18:21,704 --> 00:18:24,865
we have here a data member name

305
00:18:24,865 --> 00:18:29,015
and here a parameter name.
Indeed we are passing a parameter

306
00:18:29,072 --> 00:18:34,542
to a data member. Similarly, we have here the
"largeur" data member and the parameter "L"

307
00:18:34,568 --> 00:18:38,628
Therefore, there is no masking problem
nor name ambiguity.

308
00:18:38,696 --> 00:18:46,156
Thus, we could naturally name
our parameters "hauteur" and "largeur"

309
00:18:46,163 --> 00:18:54,373
and write something like this
"hauteur(hauteur), largeur(largeur)".

310
00:18:54,373 --> 00:18:58,525
There  is no ambiguity here.
This "hauteur" word refers

311
00:18:58,525 --> 00:19:04,981
to the height data member while this
"hauteur" word here

312
00:19:04,981 --> 00:19:07,840
is a parameter, a value received
from outisde.

313
00:19:07,840 --> 00:19:12,440
Similarly, this "largeur" word here
refers to

314
00:19:12,468 --> 00:19:18,602
the width data member and this "largeur" word here
obviously refers to

315
00:19:18,602 --> 00:19:20,968
the width parameter.
We can encounter

316
00:19:20,968 --> 00:19:23,913
this syntax in several
constructors

317
00:19:23,913 --> 00:19:26,063
in programs written like
this,

318
00:19:26,063 --> 00:19:30,484
giving the same name to parameters
and the data members

319
00:19:30,484 --> 00:19:34,841
they will initialize in the
initialization list.

320
00:19:34,841 --> 00:19:37,691
There is no ambiguity,
no masking.

321
00:19:38,735 --> 00:19:41,209
This concludes our
introductory episode

322
00:19:41,209 --> 00:19:44,286
regarding constructors in general.
We still have a few point to

323
00:19:44,286 --> 00:19:48,249
discuss, such as the "default constructor"

324
00:19:48,249 --> 00:19:52,130
-- there can only be one default constuctor;
thus the singular form.

325
00:19:52,130 --> 00:19:55,738
We will also discuss the "copy constructor".

326
00:19:55,738 --> 00:19:58,670
And, in a last episode, we will
discuss what happens

327
00:19:58,670 --> 00:20:00,650
when we are done using an object,

328
00:20:00,650 --> 00:20:02,950
what happens at the end
of an object's life.
