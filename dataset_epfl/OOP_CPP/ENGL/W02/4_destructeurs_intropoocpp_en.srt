1
00:00:04,339 --> 00:00:06,506
In the previous episodes, we
have focused

2
00:00:06,506 --> 00:00:08,062
on how to manage the early life of an object.

3
00:00:08,062 --> 00:00:10,977
How to initialize the data members of
an object when we are beginning

4
00:00:10,977 --> 00:00:11,927
to work with it.

5
00:00:11,975 --> 00:00:15,069
Now it is time to invest ourselves in
managing what happens

6
00:00:15,069 --> 00:00:16,256
at the end of an object's life.

7
00:00:16,256 --> 00:00:18,266
This is the topic of this episode.

8
00:00:19,219 --> 00:00:21,675
Dealing with the end of
an object's life

9
00:00:21,675 --> 00:00:25,435
is especially important when this object
is mobilizing resources.

10
00:00:25,517 --> 00:00:27,957
Let us first examine a concrete example.

11
00:00:28,329 --> 00:00:31,169
Let us take a variant of our
famous "Rectangle" class.

12
00:00:34,655 --> 00:00:38,125
Assume now that these data members, instead of having
been declared as doubles,

13
00:00:40,817 --> 00:00:46,127
have been declared as pointers
on doubles.

14
00:00:50,986 --> 00:00:52,196
Like this.

15
00:00:53,013 --> 00:00:55,247
Let us imagine that one
of the constructors of "Rectangle"

16
00:00:57,807 --> 00:00:59,351
is alloccating memory

17
00:01:00,811 --> 00:01:03,677
for these two data member upon
the object's declaration.

18
00:01:04,097 --> 00:01:07,857
For example, we can imagine

19
00:01:07,951 --> 00:01:10,471
there is a default constructor

20
00:01:11,487 --> 00:01:13,957
initializing the "hauteur" data member
(TN: "hauteur" means "height")

21
00:01:14,826 --> 00:01:18,756
while dynamically allocating
memory for a double.

22
00:01:21,761 --> 00:01:28,111
The same thing will be done
for the width.

23
00:01:30,962 --> 00:01:33,478
This definition with pointers
is certainly not

24
00:01:33,478 --> 00:01:36,040
the best possible definition
for the "Rectangle" class.

25
00:01:36,040 --> 00:01:38,870
We are using it here simply as
an illustrative example.

26
00:01:39,260 --> 00:01:42,410
Let us now imagine a program
using the "Rectangle" class.

27
00:01:42,995 --> 00:01:47,565
For example, we could imagine
to simply proceed

28
00:01:47,572 --> 00:01:50,642
in a main program. We would have
instructions and,

29
00:01:50,657 --> 00:01:53,074
at a certain point,
open a block

30
00:01:53,074 --> 00:01:54,514
-- for example through an "if" instruction.

31
00:01:54,767 --> 00:01:58,327
In this block, we are declaring a
local "Rectangle"-type variable,

32
00:01:58,978 --> 00:02:02,908
typically initialize through
the default constructor.

33
00:02:02,999 --> 00:02:06,509
Eventually, the block will
be closed.

34
00:02:07,916 --> 00:02:11,686
Upon the execution of this program,
when we reach this point of the execution,

35
00:02:11,692 --> 00:02:17,341
we will reserve a memory area

36
00:02:17,341 --> 00:02:20,205
for a "Rectangle"-type variable r.

37
00:02:20,205 --> 00:02:23,684
As data member, this variable

38
00:02:27,004 --> 00:02:30,464
will have the members "hauteur" and
"largeur" containing pointers to

39
00:02:30,478 --> 00:02:34,388
two memory areas dynamically
allocated by the constructor.

40
00:02:38,868 --> 00:02:43,388
When we reach this point at
the program's execution,

41
00:02:44,010 --> 00:02:48,600
the variable "r", which was locally
declared in this block, will not exist

42
00:02:48,638 --> 00:02:54,008
anymore. It thus will not be
usable in the rest of the program.

43
00:02:54,122 --> 00:02:55,847
The question is therefore:

44
00:02:55,847 --> 00:02:59,592
What will happen to the ressources
in the memory depending on this object r,

45
00:02:59,592 --> 00:03:01,572
which is no longer used in the program?

46
00:03:02,039 --> 00:03:05,149
It is important to release these
resources after usage

47
00:03:05,149 --> 00:03:07,649
since these ressources have been
dynamically allocated.

48
00:03:08,025 --> 00:03:11,324
We know that, regarding dynamically
allocated memory (for example,

49
00:03:11,324 --> 00:03:15,474
a memory area dynamically allocated
with a "new")

50
00:03:15,474 --> 00:03:18,549
must be explicitly desallocated
by the progrmmer

51
00:03:18,549 --> 00:03:21,022
through a "delete" instruction.

52
00:03:21,022 --> 00:03:22,203
So, we are wondering :

53
00:03:22,203 --> 00:03:25,163
who/what will be tasked with this
"delete", here?

54
00:03:26,046 --> 00:03:29,412
The solution letting the programmer-
user

55
00:03:29,412 --> 00:03:33,561
free this memory (for example, here)
once we know we do not need

56
00:03:33,561 --> 00:03:34,931
to use the variable "r" anymore

57
00:03:35,014 --> 00:03:36,214
and explicitly call

58
00:03:40,277 --> 00:03:43,127
the "delete" on each
of the variable's

59
00:03:43,792 --> 00:03:48,752
data members is not
a good solution.

60
00:03:49,511 --> 00:03:50,971
Do you know why?

61
00:03:51,731 --> 00:03:54,334
This is not good because it is
weakening

62
00:03:54,334 --> 00:03:56,258
the encapsulation.
(TN: a.k.a. "encapsulation leak")

63
00:03:56,258 --> 00:03:58,408
If we wish to be able to do this,

64
00:03:58,459 --> 00:04:00,959
we cannot let our data members
remain "private".

65
00:04:00,961 --> 00:04:04,001
They must essentially be
accessible from outside the class.

66
00:04:04,011 --> 00:04:05,275
The alternative

67
00:04:05,275 --> 00:04:07,295
is to program public
methods

68
00:04:07,348 --> 00:04:11,186
such as a getter providing us
with the pointer to delete.

69
00:04:11,186 --> 00:04:13,704
However, as we have seen in our
case study on the tic-tac-toe,

70
00:04:13,704 --> 00:04:15,804
delivering a pointer
through a getter

71
00:04:15,806 --> 00:04:17,996
is almost as severe as a
weakening of the encapsulation

72
00:04:18,036 --> 00:04:21,809
directly delivering the data member

73
00:04:21,809 --> 00:04:23,189
through the "public" keyword.

74
00:04:23,203 --> 00:04:26,553
Moreover, this explicit release
of the resources

75
00:04:26,576 --> 00:04:29,206
from outside the class can lead
to errors.

76
00:04:29,206 --> 00:04:31,870
For example, we could forget
to release certain resources.

77
00:04:31,870 --> 00:04:34,136
It is also tedious since we have to
do it systematically.

78
00:04:34,136 --> 00:04:37,276
Doing it this way is therefore
clearly not a good solution.

79
00:04:37,327 --> 00:04:40,955
In order not to be forced to
explicitly release resources

80
00:04:40,955 --> 00:04:44,155
required by the object from 
outside the class like this,

81
00:04:44,278 --> 00:04:49,398
C++ offers particular methods
called the "destructors".

82
00:04:49,398 --> 00:04:53,722
These have the particularity to be
automatically called at the end

83
00:04:53,722 --> 00:04:54,530
of instance's life.

84
00:04:54,530 --> 00:04:56,887
This means that, once we
finish the block,

85
00:04:56,887 --> 00:04:59,697
the destructor method will
automatically be called,

86
00:04:59,721 --> 00:05:04,771
thus letting us to release these resources
without breaking the encapsulation

87
00:05:04,817 --> 00:05:07,487
nor having to deal with the previously
mentioned inconveniences.

88
00:05:09,056 --> 00:05:12,548
We need to know that the
resources we need to release

89
00:05:12,548 --> 00:05:15,985
at the end of an object's life
are not always memory slots

90
00:05:15,985 --> 00:05:18,159
as we have in this example.

91
00:05:18,159 --> 00:05:21,859
There can be other things such
as files or external devices.

92
00:05:23,324 --> 00:05:26,674
How is a destructor concretely
written in C++?

93
00:05:27,071 --> 00:05:32,166
This method has the same name
as the class

94
00:05:35,496 --> 00:05:40,516
but is preceded with the tilda symbol ( ~ ),
as we can see here.

95
00:05:41,273 --> 00:05:45,543
The parameter list is always empty.
In the destructor's body,

96
00:05:45,543 --> 00:05:48,697
we will put all the releasing operations
that are necessary

97
00:05:48,697 --> 00:05:50,227
at the end of an object's life.

98
00:05:50,281 --> 00:05:54,831
Also, be aware that there can only
be one possible destructor in the class

99
00:05:54,831 --> 00:05:56,598
-- overloading is not possible for destructors.

100
00:05:57,351 --> 00:06:00,281
If the destructor is not
explicitly defined,

101
00:06:00,525 --> 00:06:04,055
the compiler will automatically
generate a default

102
00:06:04,106 --> 00:06:05,216
minimal version.

103
00:06:05,831 --> 00:06:07,951
Let us go back to our little
introductory example.

104
00:06:07,963 --> 00:06:10,693
Concretely, how will we program
the destructor?

105
00:06:10,982 --> 00:06:14,248
Let us make room and write
our destructor.

106
00:06:14,248 --> 00:06:19,618
Here, we declare our destructor method.

107
00:06:20,865 --> 00:06:24,945
tilda, same same as the class,

108
00:06:27,083 --> 00:06:32,143
and an empty parameter list.
In the body, we will write

109
00:06:32,241 --> 00:06:36,261
the necessary operations in order
to release resources.

110
00:06:47,026 --> 00:06:48,066
Like this.

111
00:06:50,344 --> 00:06:52,064
We can now conclude the
writing of our class.

112
00:06:53,025 --> 00:06:57,782
This destructor will thus be automatically
called upon the end

113
00:06:57,782 --> 00:06:58,892
of any instance's life.

114
00:06:58,892 --> 00:07:01,287
Typically, here, at this point
of

115
00:07:01,287 --> 00:07:02,767
the program's execution,

116
00:07:02,824 --> 00:07:06,794
since this "r" variable does no longer
exist outside the block,

117
00:07:06,851 --> 00:07:10,951
the destructor is called.
We will thus release

118
00:07:10,957 --> 00:07:12,657
the resources bound to the object.

119
00:07:15,241 --> 00:07:17,824
And this without breaking
the encapsulation

120
00:07:17,824 --> 00:07:20,674
which was the case in the
previously proposed solution.

121
00:07:21,469 --> 00:07:25,501
If the "Rectangle" class had no
pointer-type data member

122
00:07:25,501 --> 00:07:29,191
and if, more importantly, it had not
itself resorted to the dynamic allocation

123
00:07:31,033 --> 00:07:33,843
of the memory areas tied with its
data members,

124
00:07:33,909 --> 00:07:37,589
it would not have been necessary
to explicitly program

125
00:07:37,600 --> 00:07:39,066
a destructor like here.

126
00:07:39,066 --> 00:07:43,456
In this case, the compiler will automatically
generate a default version of the destructor

127
00:07:43,510 --> 00:07:45,280
with an empty body

128
00:07:45,280 --> 00:07:48,460
(without any instruction
inside).

129
00:07:49,000 --> 00:07:50,751
Now, we could wondering:

130
00:07:50,751 --> 00:07:53,640
Should we always be
content with this minimal version

131
00:07:53,640 --> 00:07:55,538
of the default destructor when
we do not

132
00:07:55,538 --> 00:07:57,620
allocate any resource in the class.

133
00:07:57,620 --> 00:07:59,070
The answer follows here.

134
00:07:59,667 --> 00:08:04,147
Let us move to another concrete example
and suppose that we wish to count

135
00:08:04,882 --> 00:08:08,286
the number of a class's instances, active
at a certain time

136
00:08:08,286 --> 00:08:09,528
in a program.

137
00:08:09,528 --> 00:08:12,378
For example, let us suppose
we wish to count the number

138
00:08:12,383 --> 00:08:14,753
of rectangle instances present
in a program.

139
00:08:15,191 --> 00:08:19,213
We could imagine we use a "compteur" (= counter)
variable in order to count them.

140
00:08:19,213 --> 00:08:21,693
We will focus on its definition
later.

141
00:08:21,744 --> 00:08:23,618
This variable will work like this.

142
00:08:23,618 --> 00:08:27,208
At the beginning, "compteur" is 0;
we do not have any Rectangle instance yet.

143
00:08:27,349 --> 00:08:31,638
Then, we will create a first
"Rectangle" instance

144
00:08:31,638 --> 00:08:33,357
with the default constructor.

145
00:08:33,357 --> 00:08:36,347
We now wish for the counter
to be automatically updated

146
00:08:36,550 --> 00:08:38,560
and account for one active "Rectangle".

147
00:08:38,947 --> 00:08:44,167
We here open a block in which
we declare

148
00:08:44,618 --> 00:08:46,248
a second Rectangle "r2".

149
00:08:46,254 --> 00:08:50,040
We now wish for "compteur"
to contain 2

150
00:08:50,040 --> 00:08:54,050
since we now have two Rectangle instances:
r2 and r1.

151
00:08:54,449 --> 00:08:57,169
When we finish executing
this block,

152
00:08:57,169 --> 00:08:59,159
the variable r2, ceases to exist.

153
00:08:59,384 --> 00:09:02,514
There is therefore only one
Rectangle instance left:

154
00:09:02,525 --> 00:09:04,575
the instance r1.

155
00:09:04,868 --> 00:09:07,712
We therefore wish for "compteur" to
be properly updated,

156
00:09:07,712 --> 00:09:10,072
comptabilizing only one instance present.

157
00:09:10,321 --> 00:09:13,636
At the end of the program,
we wish for our "compteur"

158
00:09:13,636 --> 00:09:17,070
to contain 0 since neither
r1 nor r2

159
00:09:17,070 --> 00:09:19,320
are present anymore.

160
00:09:19,410 --> 00:09:20,760
How should we proceed?

161
00:09:20,901 --> 00:09:23,231
For now, at this point,
in your learning,

162
00:09:23,316 --> 00:09:25,263
regarding the "compteur" variable,

163
00:09:25,263 --> 00:09:28,174
we have no better option declaring
a global variable

164
00:09:28,174 --> 00:09:30,883
outside the "main". This is no
good solution

165
00:09:30,883 --> 00:09:33,603
and we will come back to this
in the next episode.

166
00:09:33,855 --> 00:09:39,575
For the rest, the idea is simple:
the constructor will be tasked

167
00:09:39,575 --> 00:09:42,802
incrementing our counter every time

168
00:09:42,802 --> 00:09:44,302
we build a new rectangle.

169
00:09:45,327 --> 00:09:46,755
If we settle with this only,

170
00:09:46,755 --> 00:09:49,115
the counting will not be
satisfactoy

171
00:09:49,135 --> 00:09:52,640
since we are merely incrementing
the counter every time

172
00:09:52,640 --> 00:09:55,236
an instance is brought to life

173
00:09:55,236 --> 00:09:58,086
but never decrementing the
counter.

174
00:09:58,240 --> 00:10:01,530
Here, typically, after the creation
of the first instance,

175
00:10:01,650 --> 00:10:03,080
"compteur" will be 1.

176
00:10:03,083 --> 00:10:06,403
After the creation of the second instance,
"compteur" will be 2.

177
00:10:06,409 --> 00:10:08,830
And nothing will have the counter
decrement.

178
00:10:08,830 --> 00:10:13,514
This means that, at the end of the block,
we will totalize (incorrectly) two instances

179
00:10:13,514 --> 00:10:14,447
instead of one.

180
00:10:14,447 --> 00:10:17,856
Also, at the end of the program, we will be
incorrectly counting two instances

181
00:10:17,856 --> 00:10:18,876
instead of zero.

182
00:10:19,768 --> 00:10:23,530
We are thus forced to explicitly
define the destructor

183
00:10:23,530 --> 00:10:26,862
so that the counting is done
appropriately

184
00:10:26,862 --> 00:10:30,672
and the "compteur" variable
be decremented every time an object ceases to be.

185
00:10:31,683 --> 00:10:36,214
Concretely, here, in addition to the
constructor incrementing the counter

186
00:10:36,214 --> 00:10:38,754
every time a rectangle is built,

187
00:10:38,787 --> 00:10:42,214
we will need to have the destructor
decrement the counter

188
00:10:42,214 --> 00:10:45,564
every time an instance ceases
to exist.

189
00:10:46,067 --> 00:10:51,146
This typically ranks among the situations
where the default version of the destructor

190
00:10:51,146 --> 00:10:53,696
with an empty body is not
satisfactory

191
00:10:53,698 --> 00:10:57,418
-even if our class is never
explicitly allocating resources.

192
00:10:57,806 --> 00:11:00,206
With this version of the "Rectangle"
class,

193
00:11:00,206 --> 00:11:02,634
incrementing the counter in
the constructor

194
00:11:02,634 --> 00:11:04,065
and decrementing in the destructor,

195
00:11:04,065 --> 00:11:07,305
our counting is now done
appropriately.

196
00:11:07,355 --> 00:11:12,115
For example, at this stage of the
execution,

197
00:11:12,158 --> 00:11:16,168
the r2 variable is no longer defined;
the r2 object does not exist anymore.

198
00:11:16,177 --> 00:11:19,293
The destructor will automatically
be called

199
00:11:19,293 --> 00:11:24,113
and the counter will be decremented,
thus accounting for one instance only.

200
00:11:24,168 --> 00:11:29,038
Similarly, here, the variable r1
ceases to be, is not defined anymore.

201
00:11:29,038 --> 00:11:33,738
The destructor is thus automatically
called, bringing the counter back to zero.

202
00:11:34,978 --> 00:11:38,135
However, what happens to this example
if we invite the

203
00:11:38,135 --> 00:11:39,735
copy constructor to the party?

204
00:11:40,820 --> 00:11:43,742
For example, let us say that, in this block, in addition
to the declaration

205
00:11:43,742 --> 00:11:46,532
of an r2 instance built thanks to
the default constructor,

206
00:11:46,668 --> 00:11:50,601
we have the declaration of another
instance r3, built

207
00:11:50,601 --> 00:11:53,220
thanks to the copy constructor.

208
00:11:53,220 --> 00:11:55,314
We can see that the argument
passed to the constructor

209
00:11:55,314 --> 00:11:56,824
is here another rectangle.

210
00:11:56,832 --> 00:11:58,352
What about our counting?

211
00:11:58,355 --> 00:12:01,235
Obviously, we would like to
account for 3 instances:

212
00:12:01,311 --> 00:12:02,941
r3, r2 and r1.

213
00:12:03,172 --> 00:12:07,542
What is, concretely, the value of
the counter at these 3 places?

214
00:12:07,854 --> 00:12:09,803
Could you tell what is the
value of "compteur"

215
00:12:09,803 --> 00:12:11,893
at each of these places indicated
with a question mark?

216
00:12:13,115 --> 00:12:15,359
Here, the problem is that,
in the "Rectangle" class,

217
00:12:15,359 --> 00:12:19,639
we have not provided any explicit
definition to the copy constructor.

218
00:12:19,723 --> 00:12:23,867
Here, we thus necessarily use the default
version of the copy constructor

219
00:12:23,867 --> 00:12:27,517
which, obviously, will not do anything
regarding the instance counting.

220
00:12:27,535 --> 00:12:30,775
Therefore, the copy of a rectangle
eludes the instance counter.

221
00:12:32,105 --> 00:12:35,505
Here, typically, our counter which
contained 2,

222
00:12:35,747 --> 00:12:38,315
since it is impacted by the
copy constructor,

223
00:12:38,315 --> 00:12:39,305
will remain to 2.

224
00:12:41,566 --> 00:12:43,146
When we reach this block,

225
00:12:44,653 --> 00:12:48,373
there are no longer usable
instances.

226
00:12:48,380 --> 00:12:52,330
The destructor will thus be called
once for r2 and another for r3,

227
00:12:52,370 --> 00:12:54,720
each time decrementing the counter.

228
00:12:54,723 --> 00:12:57,143
We will thus decrement the counter
twice

229
00:12:57,271 --> 00:13:00,101
and its value will be zero,
which is wrong

230
00:13:00,101 --> 00:13:03,601
since we are still supposed to account
for this r1 instance.

231
00:13:03,756 --> 00:13:09,820
Here, for the same reasons, we will end
up with our counter containing -1 :

232
00:13:09,820 --> 00:13:13,790
our "compteur" variable will be -1
instead of 0.

233
00:13:14,444 --> 00:13:17,524
In order to correct this,
we need to add, to the previous code,

234
00:13:17,532 --> 00:13:20,672
the explicit definition of
the copy constructor.

235
00:13:21,088 --> 00:13:26,428
This explicit definition
will be tasked with the incrementation

236
00:13:26,442 --> 00:13:29,622
of the counter whenever we create
a new rectangle through copy.

237
00:13:30,088 --> 00:13:34,558
At this point, when we call
the copy constructor here,

238
00:13:34,642 --> 00:13:37,102
we indeed have our counter
incremented;

239
00:13:37,115 --> 00:13:40,475
the counting is thus correct,
with 3 here.

240
00:13:40,512 --> 00:13:45,911
The counter is then decremented twice,
and will contain 1, which is correct

241
00:13:45,911 --> 00:13:49,080
since we are now accounting this
r1 instance correctly.

242
00:13:49,080 --> 00:13:52,960
Similarly, the final counting will
be correct.

243
00:13:53,544 --> 00:13:55,879
From this discussion arises
a general rule

244
00:13:55,879 --> 00:13:59,149
followed by every good C++ programmer.
Here it is:

245
00:13:59,185 --> 00:14:02,588
If we are to explicitly modify
the destructor,

246
00:14:02,588 --> 00:14:05,908
the copy constructor or
the assignment operator

247
00:14:05,924 --> 00:14:08,294
(which we will discuss in
a later episode)

248
00:14:08,323 --> 00:14:11,973
then we will probably have to
modify the other two aswell.

249
00:14:11,979 --> 00:14:13,894
These three make a whole.

250
00:14:13,894 --> 00:14:16,139
In any way, we at least have to
wonder

251
00:14:16,139 --> 00:14:19,939
on the impact of the definition
of one of these elements on the others.

252
00:14:22,087 --> 00:14:26,096
By the way, please note that, in C++,
-- though it is an advanced notion,

253
00:14:26,096 --> 00:14:27,680
going beyond the scope of this course --

254
00:14:27,680 --> 00:14:30,629
we can add to this list
(including the destructor, the copy constructor

255
00:14:30,629 --> 00:14:33,839
and the assignment operator forming a
whole together),

256
00:14:33,878 --> 00:14:37,768
we can add the the "move constructor"
and the "move operator".

257
00:14:37,882 --> 00:14:40,822
We are mentioning this here
only for the sake of completion.

258
00:14:42,105 --> 00:14:46,465
This concludes our chapter on
the construction/destruction of an object.

259
00:14:46,468 --> 00:14:49,935
We will go back to this when we will
talk about inheritance.

260
00:14:49,935 --> 00:14:53,762
In the meantime, you will discover
the notion of operator overloading

261
00:14:53,762 --> 00:14:55,442
in the next episodes.
