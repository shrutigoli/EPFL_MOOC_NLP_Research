1
00:00:03,918 --> 00:00:06,635
In this new episode, we will
focus on

2
00:00:06,635 --> 00:00:07,732
the so-called default constructor.

3
00:00:07,732 --> 00:00:09,640
This includes two aspects.

4
00:00:09,640 --> 00:00:12,632
Firstly, what does happen
when we declare an object

5
00:00:12,632 --> 00:00:15,242
without associating any
initialization value?

6
00:00:15,242 --> 00:00:18,380
Secondly, what happens in classes
where we have not

7
00:00:18,380 --> 00:00:20,933
declared any explicit constructor?

8
00:00:20,933 --> 00:00:23,014
Let us by begin with the first point.

9
00:00:23,014 --> 00:00:25,660
A default constructor is
either a constructor

10
00:00:25,660 --> 00:00:28,982
without any parameter
-as you can see in this example here-

11
00:00:28,982 --> 00:00:33,468
or a constructor for which
all parameters have default values.

12
00:00:33,468 --> 00:00:36,202
We will see an example of it
a litte later.

13
00:00:36,202 --> 00:00:39,970
Concretely, if a constructor does
not have any parameter

14
00:00:39,970 --> 00:00:43,639
or has default values for all his
parameters, this will mean that this

15
00:00:43,639 --> 00:00:46,816
constructor can be called
without initialization values.

16
00:00:46,816 --> 00:00:51,537
For example, as we proceed to the
declaration of a "Rectangle" object,

17
00:00:51,537 --> 00:00:56,599
like this, we are not associating
any initialization value

18
00:00:56,599 --> 00:00:59,362
to this rectangle-type variable "r".

19
00:00:59,362 --> 00:01:04,100
Concretely, this means that the initialization
task will be supported

20
00:01:04,100 --> 00:01:07,768
by constructor which does not
need any parameter in order to function.

21
00:01:07,768 --> 00:01:10,343
THIS is the default constructor.

22
00:01:10,343 --> 00:01:13,760
We could imagine we wish to allow
three possible ways to

23
00:01:13,760 --> 00:01:16,805
initialize a rectangle of the
"Rectangle" class.

24
00:01:16,805 --> 00:01:20,016
That means that we are anticipating
the presence of three constructors.

25
00:01:20,480 --> 00:01:24,543
A constructor which does not
require any parameter and will initialize

26
00:01:24,543 --> 00:01:28,820
by default the height to 1
and the width to 2.

27
00:01:28,820 --> 00:01:31,259
A second constructor
-not by default since

28
00:01:31,259 --> 00:01:32,633
it expects one parameter-

29
00:01:32,633 --> 00:01:36,444
which will initialize, for example,
the height to the provided value

30
00:01:36,444 --> 00:01:39,460
and the width to two times
the provided value.

31
00:01:39,460 --> 00:01:43,268
And the third constructor,
as we have seen up until now,

32
00:01:43,518 --> 00:01:49,398
taking to parameter and is not
a default constructor either

33
00:01:49,398 --> 00:01:51,449
since its parameter list is not empty.

34
00:01:53,136 --> 00:01:56,756
This constructor will initialize the
height to the first provided value

35
00:01:56,756 --> 00:01:58,382
and the width to the second one.

36
00:01:58,382 --> 00:02:02,112
If we are using this "Rectangle" class
with these three constructors together,

37
00:02:02,112 --> 00:02:06,326
we now have three possible
ways to declare and initialize

38
00:02:06,363 --> 00:02:09,831
a rectangle, a "Rectangle"-type
object.

39
00:02:10,771 --> 00:02:13,367
The first we have showed you
corresponds

40
00:02:13,367 --> 00:02:16,846
to the call to the default constructor.

41
00:02:16,846 --> 00:02:23,443
The second corresponds to
a declaration such as this one,

42
00:02:23,443 --> 00:02:26,154
expecting an initialization value.

43
00:02:28,184 --> 00:02:32,452
In this case we would thus
initialize the height to 2

44
00:02:32,753 --> 00:02:34,993
and the width to 2 times 2, that is 4.

45
00:02:36,083 --> 00:02:39,187
And, finally, the last possible way

46
00:02:41,821 --> 00:02:44,829
is to declare a rectangle while
providing two values

47
00:02:47,399 --> 00:02:49,384
which obviously correspond to the

48
00:02:49,384 --> 00:02:52,475
call to this constructor here,
expecting two values.

49
00:02:53,838 --> 00:02:57,343
Please be careful, though!
Seeing the syntax

50
00:02:57,343 --> 00:02:59,534
employed to call

51
00:02:59,534 --> 00:03:03,331
the two-parameter constructor
or the one-parameter constructor,

52
00:03:03,618 --> 00:03:09,286
it could be tempting to call
the default constructor

53
00:03:09,286 --> 00:03:12,529
resorting to this syntax.

54
00:03:12,926 --> 00:03:18,986
Declaring the "r" rectangle signifying,
with a pair of empty parentheses,

55
00:03:19,268 --> 00:03:22,619
that we are calling this
constructor.

56
00:03:22,619 --> 00:03:24,242
This is NOT the case.

57
00:03:24,242 --> 00:03:29,570
In C++, this syntax does not correspond
to a call to the default constructor.

58
00:03:29,822 --> 00:03:33,998
If you wish to call the
default constructor, you must resort to

59
00:03:33,998 --> 00:03:37,132
this syntax here, without the parentheses.

60
00:03:37,132 --> 00:03:43,524
By the way, if you write this,
the compiler will not produce an error.

61
00:03:43,524 --> 00:03:47,461
In your opinion, how does the compiler
interpret this line of code?

62
00:03:48,876 --> 00:03:51,718
We have just seen that a default
constructor in a constructor

63
00:03:51,718 --> 00:03:54,778
we can call without providing
any initialization values.

64
00:03:55,065 --> 00:03:57,953
This is the case of constructors
with an empty parameter list.

65
00:03:57,953 --> 00:04:00,450
This is also the case of constructors
for which all parameters

66
00:04:00,450 --> 00:04:03,023
have a default values.
Here is an example thereof.

67
00:04:03,203 --> 00:04:05,402
Similarly to ordinary functions
or methods,

68
00:04:05,402 --> 00:04:08,393
a constructor may very well
have default values

69
00:04:08,393 --> 00:04:10,117
for some of its parameters -or all of
them, for that matter.

70
00:04:10,117 --> 00:04:13,364
This constructor is a default constructor

71
00:04:13,578 --> 00:04:16,465
since all its parameters have
a default value.

72
00:04:16,485 --> 00:04:20,062
By the way, please remember
that a default values is a value

73
00:04:20,074 --> 00:04:22,829
we may associate with a parameter
according to this syntax

74
00:04:22,829 --> 00:04:25,499
in the prototype of the
function or the method.

75
00:04:25,499 --> 00:04:29,518
When a function or method has
a default value,

76
00:04:29,518 --> 00:04:30,906
this means that we may

77
00:04:30,906 --> 00:04:34,056
call this function or method
without providing the value.

78
00:04:34,056 --> 00:04:36,339
In this case, the default value
is taken.

79
00:04:36,339 --> 00:04:40,480
Concretely here, if we
declare a rectangle

80
00:04:44,782 --> 00:04:48,164
like this, since we have not provided
any initialization value,

81
00:04:48,174 --> 00:04:51,118
we will seek the default
constructor of the class.

82
00:04:51,814 --> 00:04:54,960
It is this one because it is
possible to call this constructor

83
00:04:54,960 --> 00:04:57,502
without giving it any value.
In this case, it will take 1.

84
00:04:57,502 --> 00:05:00,667
Concretely, this means that
we will build,

85
00:05:00,667 --> 00:05:03,322
thanks to this call, a rectangle

86
00:05:05,005 --> 00:05:06,902
which value for the height member

87
00:05:09,563 --> 00:05:13,820
will be the value provided by default here,
that is 1.

88
00:05:15,444 --> 00:05:18,166
Also, the value for the width member

89
00:05:18,244 --> 00:05:21,163
will be two times the default value,
that is 2.

90
00:05:23,604 --> 00:05:26,729
By the way, please note that using
default values

91
00:05:26,729 --> 00:05:30,549
for the parameters has allowed
us to write both previous constructors

92
00:05:30,549 --> 00:05:35,635
in one single constructor.

93
00:05:35,635 --> 00:05:40,293
We write a single constructor, callable with an empty list of arguments,

94
00:05:40,306 --> 00:05:42,843
and this one, which is callable with an argument.

95
00:05:43,542 --> 00:05:49,413
This constructor can very well be
called like this.

96
00:05:49,881 --> 00:05:52,682
We are declaring a variable, but,
this time, precising

97
00:05:52,682 --> 00:05:54,822
another value than the default value.

98
00:05:54,822 --> 00:05:57,354
This means that we cannot keep
the default value.

99
00:05:57,354 --> 00:06:00,114
We are using the one-parameter constructor.
Instead of using

100
00:06:00,114 --> 00:06:02,684
the default value for "C", we wish
to use the value 5.

101
00:06:03,060 --> 00:06:08,379
We may call this constructor
either with this syntax or this one.

102
00:06:08,727 --> 00:06:11,306
You now know what a default
constructor is.

103
00:06:11,532 --> 00:06:13,905
Let us now focus on the second
point of this sequence:

104
00:06:14,308 --> 00:06:18,049
What does happen if a class
does not contain any

105
00:06:18,049 --> 00:06:20,047
explicitly programmed constructor?

106
00:06:20,725 --> 00:06:23,458
Indeed, the initialization of such
an object is so important

107
00:06:23,458 --> 00:06:24,971
that we cannot do without it.

108
00:06:24,971 --> 00:06:28,926
Therefoew, in C++, even if you do not
declare any constructor in a class,

109
00:06:28,926 --> 00:06:33,023
a basic constructor will be
automatically generated.

110
00:06:33,363 --> 00:06:37,121
This default constructor does
not require any initialization value

111
00:06:38,395 --> 00:06:40,879
and is automatically generated.

112
00:06:40,879 --> 00:06:44,638
We could call it the default default
constructor.

113
00:06:44,638 --> 00:06:48,768
It is furnished by default if we do not
declare any constructor for the class.

114
00:06:48,768 --> 00:06:51,399
It is obviously a default construcor
since it does not expect

115
00:06:51,399 --> 00:06:54,030
any initialization value.

116
00:06:54,030 --> 00:06:56,661
What will this default default constructor
concretely do?

117
00:06:56,661 --> 00:06:59,222
It will initialize the member attributes.

118
00:06:59,222 --> 00:07:03,283
If these attributes are objects,
they will be initialized

119
00:07:03,283 --> 00:07:07,592
through their associated
default constructors.

120
00:07:08,171 --> 00:07:15,335
On the other hand, if the attributes are
basic-type objects, they will remain uninitialized.

121
00:07:15,335 --> 00:07:16,692
Let us take a concrete example.

122
00:07:16,692 --> 00:07:20,343
Let us imagine that we
are writing a "Rectangle" class

123
00:07:22,486 --> 00:07:27,329
with, as attributes, a height
and a width of basic types.

124
00:07:31,876 --> 00:07:36,056
We could imagine that we also
wish to associate another attribute

125
00:07:37,340 --> 00:07:42,104
to this rectangle. This would be
an object permitting

126
00:07:42,104 --> 00:07:48,292
to modelize, for example, the position
of the rectangle on a screen.

127
00:07:48,846 --> 00:07:54,839
If we proceed to the declaration
of a rectangle coded this way,

128
00:07:57,744 --> 00:08:02,207
we can do so, even without any
explicit constructor in the class.

129
00:08:03,431 --> 00:08:05,906
That means that we will call

130
00:08:06,119 --> 00:08:08,386
the default default constructor.

131
00:08:08,390 --> 00:08:09,641
What does this constructor do?

132
00:08:09,641 --> 00:08:13,067
It uses a minimal version of
of the initialization.

133
00:08:13,067 --> 00:08:17,000
The object built like this will have

134
00:08:20,534 --> 00:08:22,533
its fields height and width

135
00:08:22,871 --> 00:08:26,040
remain uninitialized

136
00:08:26,454 --> 00:08:28,083
since they are of a basic type.

137
00:08:28,446 --> 00:08:31,378
On the other hand, the position
member

138
00:08:33,498 --> 00:08:34,618
will have a value provided

139
00:08:39,825 --> 00:08:43,784
by the default constructor of the
"position" class -if the class has one.

140
00:08:43,927 --> 00:08:45,236
For example, we could imagine

141
00:08:45,236 --> 00:08:47,939
that the position is a two-dimensional
coordinates

142
00:08:47,939 --> 00:08:53,277
and that the default constructor
initializes to the position (0, 0).

143
00:08:53,277 --> 00:08:57,804
In this case, we would have these values here
in the position attribute.

144
00:08:58,270 --> 00:09:06,951
As a reminder, the basic types are
the types int, double, char and bool.

145
00:09:06,951 --> 00:09:12,614
However, be careful regarding default
default constructors.

146
00:09:13,136 --> 00:09:14,694
They have the following specificity.

147
00:09:14,694 --> 00:09:20,205
As soon as we specify a specific
constructor in a class,

148
00:09:20,205 --> 00:09:21,632
be it a default constructor or not,

149
00:09:21,632 --> 00:09:25,612
the default constructor is
not provided anymore.

150
00:09:28,220 --> 00:09:31,364
This concretely means that if, in
a class, we specify

151
00:09:31,555 --> 00:09:35,890
an explicit constructor which is not
a default constructor,

152
00:09:35,890 --> 00:09:39,725
then we cannot build objects
of this class

153
00:09:39,725 --> 00:09:44,045
without providing an explicit
initialization value

154
00:09:44,775 --> 00:09:46,225
for the attributes.

155
00:09:46,225 --> 00:09:48,727
This typically corresponds
to something we want.

156
00:09:48,727 --> 00:09:51,489
When we go through the trouble
of programming an explicit constructor

157
00:09:51,489 --> 00:09:54,251
we do not wish C++ to sneakily
add a default constructor

158
00:09:54,251 --> 00:09:57,014
without our permission.

159
00:09:57,265 --> 00:10:00,847
We will see later that C++ 2011
lets us, if we so desire,

160
00:10:00,847 --> 00:10:03,079
reactivate the default default constructor.

161
00:10:03,079 --> 00:10:07,382
We will also see with which syntax
this can

162
00:10:07,382 --> 00:10:09,178
signified to the compiler.

163
00:10:09,954 --> 00:10:13,946
Now we will, through concrete
examples, examine different variants

164
00:10:13,946 --> 00:10:16,281
of constructor declaration in
a same class.

165
00:10:16,281 --> 00:10:19,727
We will see what these variants
let us do or not

166
00:10:20,010 --> 00:10:23,126
regarding the declaration-
initialization of an instance.

167
00:10:23,424 --> 00:10:29,051
In the A variant, the "Rectangle" class
provides attributes, as before,

168
00:10:29,051 --> 00:10:30,535
for the height and the width.

169
00:10:30,545 --> 00:10:33,490
It could also provide other things
but no

170
00:10:33,490 --> 00:10:36,102
explicit constructor for this class.

171
00:10:36,400 --> 00:10:41,928
In the B variant, the "Rectangle" class
provides an explicitly programmed

172
00:10:42,170 --> 00:10:44,043
default constructor.

173
00:10:44,668 --> 00:10:47,760
This constructor will
initialize

174
00:10:47,760 --> 00:10:49,892
the different attributes to 0.

175
00:10:49,892 --> 00:10:55,535
In the third variant, the C variant,
the "Rectangle" class

176
00:10:55,535 --> 00:11:01,766
provides a constructor where all the
parameters have a default value.

177
00:11:01,766 --> 00:11:05,037
This constructor can be
explicitly called

178
00:11:05,037 --> 00:11:07,779
without associating
any initialization value.

179
00:11:07,938 --> 00:11:11,581
In this case, 0 will be put
in each attribute.

180
00:11:11,581 --> 00:11:17,265
This is thus an explicitly programmed
default constructor.

181
00:11:17,265 --> 00:11:20,238
Finally, in the last variant,
the D variant,

182
00:11:20,238 --> 00:11:25,439
the "Rectangle" class provides
an explicit constructor expecting

183
00:11:26,457 --> 00:11:31,683
two initialization values. There is thus
no explicitly programmed

184
00:11:31,683 --> 00:11:34,345
default constructor in this
"Rectangle" class.

185
00:11:34,345 --> 00:11:37,009
Now, we will ask ourselves :

186
00:11:37,009 --> 00:11:40,686
For each variant of the class,
what is the default constructor?

187
00:11:40,686 --> 00:11:45,002
Is this declaration syntax valid?

188
00:11:45,002 --> 00:11:50,615
Is this alternative syntax for the
declaration initialization of a

189
00:11:50,615 --> 00:11:53,078
"Rectangle"-type object valid?

190
00:11:53,078 --> 00:11:56,365
As a remainder, in the A variant, this
was class schema

191
00:11:56,365 --> 00:11:58,948
regarding the constructor declaration.

192
00:11:58,958 --> 00:12:02,925
Here, we are not precising the
attribute declaration

193
00:12:02,925 --> 00:12:05,102
since it is the same for all variants.

194
00:12:05,532 --> 00:12:08,620
Here, in the A variant of the
"Rectangle" class, there was

195
00:12:08,620 --> 00:12:11,917
not explicitly declared constructor.

196
00:12:12,346 --> 00:12:17,646
This means that, regarding the
default constructor in the A variant,

197
00:12:17,900 --> 00:12:21,417
since there is no explicitly specified
constructor,

198
00:12:21,417 --> 00:12:24,674
we will have the default default
constructor

199
00:12:24,674 --> 00:12:27,055
which is automatically generated.

200
00:12:27,447 --> 00:12:31,215
When we proceed to such a declaration
of a rectangle,

201
00:12:31,215 --> 00:12:33,308
we are not specifying
any initialization value.

202
00:12:33,308 --> 00:12:36,147
Since there is no explicit constructor
in our "Rectangle" class,

203
00:12:36,147 --> 00:12:39,287
the default default constructor
will be called.

204
00:12:39,287 --> 00:12:44,063
Also, we know that this constructor
initializes things in a minimalistic way.

205
00:12:44,063 --> 00:12:46,666
Here, for our height and
width attributes,

206
00:12:48,032 --> 00:12:51,183
since they are basic-type
attributes


207
00:12:51,423 --> 00:12:54,514
(they are doubles),
the default default constructor


208
00:12:55,124 --> 00:12:59,395
will not put any initialization
values into these attributes.

209
00:12:59,711 --> 00:13:03,646
Finally, our "r1" rectangle will
have its members

210
00:13:03,646 --> 00:13:07,581
height and width remain
uninitialized.

211
00:13:07,581 --> 00:13:11,517
The object exists but its attributes
are not initialized.

212
00:13:11,517 --> 00:13:14,750
In a class where no explicit
constructor exists,

213
00:13:14,750 --> 00:13:18,363
the only usable constructor
is the default default constructor.

214
00:13:18,363 --> 00:13:21,852
It can only be called with
this syntax,

215
00:13:21,855 --> 00:13:24,038
without any initialization value.

216
00:13:24,366 --> 00:13:28,248
Therefore, any attempt to
initialize an object

217
00:13:28,248 --> 00:13:31,433
using initialization values
is absolutely invalid.

218
00:13:31,744 --> 00:13:37,174
Concretely, this would result
in an error upon the compiling.

219
00:13:40,658 --> 00:13:43,356
Let us now move on to the B variant.
In the case of B,

220
00:13:43,591 --> 00:13:46,716
our "Rectangle" class has its
default constructor

221
00:13:46,716 --> 00:13:49,841
explicitly declared.

222
00:13:49,841 --> 00:13:52,966
Its task is to initialize the
height and width to 0 both.

223
00:13:52,966 --> 00:13:56,737
In this case, the default constructor
is this the default constructor

224
00:13:56,737 --> 00:13:59,568
which has been explicitly declared.

225
00:13:59,568 --> 00:14:02,407
It is therefore possible to resort to
this syntax which does not require

226
00:14:02,407 --> 00:14:07,026
any initialization value. Unlike
the previous case though,

227
00:14:07,026 --> 00:14:10,287
this time, the default constructor, called here,

228
00:14:10,287 --> 00:14:14,821
will properly initialize the height
and width assigning them both 0.

229
00:14:14,821 --> 00:14:19,895
Since there is no constructor
expecting values as parameters

230
00:14:19,895 --> 00:14:25,493
in the "Rectangle" class, this way to
declare/initialize a rectangle object

231
00:14:25,493 --> 00:14:28,731
is invalid in this case.

232
00:14:28,731 --> 00:14:31,531
The C variant is a litttle bit more complex
than the previous ones.

233
00:14:31,531 --> 00:14:34,281
Here we have an explicitly programmed
constructor

234
00:14:34,281 --> 00:14:37,033
for which all parameters
have a default value.

235
00:14:37,033 --> 00:14:42,154
Concretely, this means that
we can call this constructor

236
00:14:42,154 --> 00:14:45,229
in three possible ways.

237
00:14:45,956 --> 00:14:50,482
This way here signifies that we
are calling the constructor

238
00:14:50,482 --> 00:14:52,532
while accepting the default values.

239
00:14:52,618 --> 00:14:56,896
Thus, our rectangle will have 0 and 0
as the values of its attributes.

240
00:14:56,896 --> 00:14:59,014
According to this second variant,

241
00:15:01,709 --> 00:15:07,312
we signify that we are taking the value 2.5
as the value of the first parameter

242
00:15:07,557 --> 00:15:11,906
and that we accept the default value 0
for the second parameter.

243
00:15:12,410 --> 00:15:20,135
Finally, in this last variant, it is also
possible to declare a rectangle,

244
00:15:20,135 --> 00:15:22,703
providing two values.

245
00:15:23,518 --> 00:15:27,217
This means that we are not
using the value 2.5 for this parameter

246
00:15:28,161 --> 00:15:32,148
and the value 3.4 for this parameter.

247
00:15:33,044 --> 00:15:35,850
In the C variant, there is thus
a default constructor

248
00:15:36,152 --> 00:15:38,067
which is one of the three constructors.

249
00:15:39,369 --> 00:15:41,637
The one we can call with this
syntax will give

250
00:15:41,965 --> 00:15:44,289
the value 0 to both attributes.

251
00:15:44,663 --> 00:15:48,116
Therefore, this line is clearly
valid will correspond

252
00:15:49,531 --> 00:15:51,389
to the initialization of both
attributes to 0.

253
00:15:52,029 --> 00:15:55,126
This line, corresponding to this
kind of calls is obviously

254
00:15:55,126 --> 00:15:58,223
valid aswell. In this case,

255
00:15:58,223 --> 00:16:01,320
it will let us initialize the width to 1
and the height to 2.

256
00:16:01,320 --> 00:16:04,733
For the D variant, we have, in the
class, an explicit constructor

257
00:16:04,897 --> 00:16:06,752
which is not a default constructor.

258
00:16:06,752 --> 00:16:08,770
Its parameter list is not empty

259
00:16:08,770 --> 00:16:12,207
and its parameters do not accept
any default value.

260
00:16:12,207 --> 00:16:17,482
As we have seen previously, as
soon as an explicit constructor is programmed,

261
00:16:17,482 --> 00:16:20,696
the default default constructor
vanishes.

262
00:16:20,696 --> 00:16:23,934
Concretely, this means that
there is no default constructor

263
00:16:23,934 --> 00:16:26,619
at all in this D variant.

264
00:16:26,619 --> 00:16:31,961
Consequently, a declaration of this
nature becomes invalid.

265
00:16:31,961 --> 00:16:35,593
Of course, in this variant,
it is possible to declare/initialize

266
00:16:35,639 --> 00:16:37,263
a rectangle like this.

267
00:16:37,263 --> 00:16:43,078
Indeed, the sole existing constructor
expects two initialization values.

268
00:16:43,078 --> 00:16:47,184
Ultimately, we will build here a
rectangle similar to the previous one;

269
00:16:47,184 --> 00:16:50,936
its height is 1, its
width is 2.

270
00:16:51,177 --> 00:16:53,914
As we have illustrated in the D
variant, the default default

271
00:16:53,914 --> 00:16:57,351
constructor ceases to exist as
soon as we define

272
00:16:57,351 --> 00:17:01,053
an explicit constructor in the class -be this
constructor a default constructor or not.

273
00:17:01,053 --> 00:17:04,393
If we wish to reactivate the default
default constructor

274
00:17:04,393 --> 00:17:09,619
(this is possible in C++ 2011), we need
to resort to the following syntax.

275
00:17:09,619 --> 00:17:13,474
We declare in the class the fact
that the default constructor

276
00:17:13,474 --> 00:17:17,219
will be the default variant
provided by the compiler.

277
00:17:17,219 --> 00:17:20,674
If, in the case of our previously seen
D variant, we wish to reactivate

278
00:17:20,674 --> 00:17:24,599
the default default constructor

279
00:17:24,599 --> 00:17:26,374
since it had disappeared upon
the declaration

280
00:17:26,374 --> 00:17:27,959
of an explicit constructor,

281
00:17:27,959 --> 00:17:31,514
we must clearly specify our wish.

282
00:17:31,514 --> 00:17:34,639
By the way, please note that it
is not particularly interesting here.

283
00:17:34,639 --> 00:17:37,823
Whyso? Because we have learnt that
the default default constructor

284
00:17:37,823 --> 00:17:40,349
did not initialize the basic
type attributes.

285
00:17:40,349 --> 00:17:45,418
It is never truly recommandable to
have the possibility to build an object

286
00:17:45,418 --> 00:17:49,209
where certain attributes
are non-initialized.

287
00:17:49,209 --> 00:17:53,375
That said, in all situations where
it is relevant to reactivate

288
00:17:53,375 --> 00:17:54,981
the default default constructor

289
00:17:54,981 --> 00:17:56,885
-typically when all the members
are object-

290
00:17:56,885 --> 00:17:59,706
we will have to resort to this syntax.

291
00:17:59,706 --> 00:18:05,362
Reactivating a default variant is actually
generalizable to other methods;

292
00:18:05,362 --> 00:18:08,483
we will see other examples in
upcoming episodes.

293
00:18:08,982 --> 00:18:12,911
This is also generalizable
for the suppression of a method;

294
00:18:12,911 --> 00:18:15,240
in this case, we will use the
syntax " = delete ".

295
00:18:15,240 --> 00:18:18,369
For example, let us suppose that,
for a given class, there is

296
00:18:18,369 --> 00:18:22,835
a particular method expecting, as
parameter, a double-type value.

297
00:18:23,225 --> 00:18:26,640
We know that C++ let us §§store
an int in a double

298
00:18:26,640 --> 00:18:29,583
Normally it is thus possible to
call "pas_d_int" (TN: means "no_int)

299
00:18:29,583 --> 00:18:33,953
providing, as argument,
an integer value.

300
00:18:33,953 --> 00:18:37,734
We wish to deactivate this possibility,
thus forcing "pas_d_int"

301
00:18:37,734 --> 00:18:41,230
to systematically be called
with a double.

302
00:18:41,230 --> 00:18:44,301
In this case, we may use this
clause,

303
00:18:44,301 --> 00:18:48,409
thus triggering a "delete" of the method
called with an int.

304
00:18:48,409 --> 00:18:53,226
This will render it impossible to call the
"pas_d_int" method with an integer value

305
00:18:53,226 --> 00:18:54,385
as argument.

306
00:18:54,385 --> 00:18:58,335
Also, please note that C++2011
lets us arrange for

307
00:18:58,335 --> 00:19:02,207
a constructor to call
another constructor of the same class.

308
00:19:02,207 --> 00:19:04,112
This is done in the colon section.

309
00:19:04,112 --> 00:19:09,824
Here, the default constructor
of the "Rectangle" class calls.

310
00:19:09,824 --> 00:19:13,507
in the colon section, the two-parameter
constructor

311
00:19:13,507 --> 00:19:17,259
of the same class.

312
00:19:17,690 --> 00:19:21,283
This will let the default constructor
initialize the height

313
00:19:21,283 --> 00:19:22,336
and the width to 0.

314
00:19:22,336 --> 00:19:24,880
Please note that this way to proceed
is much better

315
00:19:24,880 --> 00:19:27,706
than the previous where we
reactivated

316
00:19:27,706 --> 00:19:30,094
the default default constructor.

317
00:19:30,094 --> 00:19:33,949
Indeed, we have seen that reactivating
the default default construtor

318
00:19:33,949 --> 00:19:37,329
had the disadventage of letting
basic type

319
00:19:37,329 --> 00:19:40,264
attributes uninitialized.

320
00:19:40,264 --> 00:19:41,515
This will not be the case here.

321
00:19:41,515 --> 00:19:44,282
Concluding on the initializtion,
please note that, in C++11,

322
00:19:44,290 --> 00:19:49,135
it is possible to assign default
values to attributes

323
00:19:49,135 --> 00:19:52,167
directly where they
are declared.

324
00:19:52,276 --> 00:19:54,427
Namely, outside any constructor.

325
00:19:54,427 --> 00:19:59,008
If it so happens that a called
constructor will not modify the value

326
00:19:59,008 --> 00:20:02,024
of an attribute which has
a default value so specified,

327
00:20:02,024 --> 00:20:04,804
then this default value will be
used.

328
00:20:04,804 --> 00:20:06,820
Let us imagine, for example,
that, in the "Rectangle" class,

329
00:20:06,820 --> 00:20:09,149
we have declared a constructor

330
00:20:10,889 --> 00:20:16,547
initializing the width member without
doing anything for the height.

331
00:20:18,460 --> 00:20:20,692
This constructor is called
through such a twist.

332
00:20:22,762 --> 00:20:29,470
The "r" object built this way will
thus have a width member

333
00:20:30,936 --> 00:20:35,321
initialized to this value through
the default constructor, that is, 5.

334
00:20:37,495 --> 00:20:44,216
However, nothing has been specified for
the height member in the constructor.

335
00:20:44,450 --> 00:20:46,360
We will thus search this value

336
00:20:46,360 --> 00:20:52,514
specified here. The height will
thus be 0.

337
00:20:54,156 --> 00:20:59,022
Actually, it is preferable to let the
constructors deal with the initialization

338
00:20:59,022 --> 00:21:02,254
rather than using these tricks.

339
00:21:02,254 --> 00:21:06,254
Why? Because this lets us have
a clear grasp on the initialization

340
00:21:06,254 --> 00:21:10,753
process only by reading the
constructors.

341
00:21:10,753 --> 00:21:14,029
We do not need to search for

342
00:21:14,029 --> 00:21:17,403
possible default values

343
00:21:17,403 --> 00:21:19,411
in a section of attribute declaration.

344
00:21:19,411 --> 00:21:23,143
Voilà! This concludes our sequence 
on the default constructors.

345
00:21:23,143 --> 00:21:26,924
We will have the chance to come
back to them during the inheritance episodes.

346
00:21:26,924 --> 00:21:30,000
In the meantime, you will discover
new ways to build objects;

347
00:21:30,000 --> 00:21:33,168
for example through
the copy constructors.
