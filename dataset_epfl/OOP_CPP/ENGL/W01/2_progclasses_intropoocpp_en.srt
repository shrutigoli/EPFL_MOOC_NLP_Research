1
00:00:04,284 --> 00:00:05,470
In the last episode,

2
00:00:05,826 --> 00:00:09,405
we considered the fundamental 
aspects of object-oriented programming (OOP).

3
00:00:09,734 --> 00:00:11,519
In this episode,

4
00:00:11,519 --> 00:00:14,399
we will start to code 
all this in C++.

5
00:00:14,399 --> 00:00:19,469
We saw that  OOP defines the concept of class

6
00:00:19,470 --> 00:00:22,883
which is the result of the process 
of abstraction and encapsulation

7
00:00:22,883 --> 00:00:25,819
as we saw in the example of
the definition of the Rectangle class,

8
00:00:25,819 --> 00:00:28,349
which had the data members 
"largeur" and "hauteur" (TN: means "width" and "height")

9
00:00:28,349 --> 00:00:30,757
and had a "surface" method  to calculate 
its area (TN: "surface" means "area").

10
00:00:31,338 --> 00:00:33,224
A class, in the programming jargon,

11
00:00:33,224 --> 00:00:37,650
defines a new type that allows for the 
creation of variables of this type,

12
00:00:37,681 --> 00:00:40,948
for example three variables 
rect1, rect2, rect3,

13
00:00:41,550 --> 00:00:46,561
that are called in object-oriented jargon,
"instances" or "objects".

14
00:00:46,561 --> 00:00:48,657
So how do you code this in C++ ?

15
00:00:48,958 --> 00:00:52,653
A class in C++ is declared with 
the keyword "class".

16
00:00:53,138 --> 00:00:55,400
For instance, to declare 
the class "Rectangle",

17
00:00:55,400 --> 00:00:59,396
we will write "class Rectangle"
which defines the name of a new type

18
00:00:59,396 --> 00:01:02,285
then, we will include the data members 
and methods (also called "member functions")

19
00:01:02,285 --> 00:01:04,274
as we will specify later on.

20
00:01:04,274 --> 00:01:08,061
All this is closed with a semicolon.

21
00:01:08,100 --> 00:01:10,449
Do not forget this semicolon!

22
00:01:10,449 --> 00:01:14,018
This is a frequent error 
when writing the first few classes.

23
00:01:14,142 --> 00:01:19,062
This declaration defines a new type, called 
"Rectangle", that we can now make use of

24
00:01:19,076 --> 00:01:20,973
to declare variables,

25
00:01:20,973 --> 00:01:22,966
as we would do 
with any other type,

26
00:01:22,966 --> 00:01:27,641
with first the name of the type, followed by 
the name of the variable,

27
00:01:27,641 --> 00:01:34,055
As an illustration, to declare an instance, 
a variable "rect1" of the Rectangle class,

28
00:01:34,055 --> 00:01:38,040
we use the type Rectangle 
followed by the variable name rect1.

29
00:01:38,322 --> 00:01:41,756
For now, our program looks like this.

30
00:01:41,756 --> 00:01:46,088
We start by declaring the new type:
 class Rectangle

31
00:01:46,088 --> 00:01:47,920
for the time being, we don't have a 
class body;

32
00:01:47,920 --> 00:01:49,977
and we don't forget to end with 
a semicolon.

33
00:01:49,977 --> 00:01:51,893
Next in our main,

34
00:01:51,893 --> 00:01:56,033
we declare the variable  
"rect1" of type Rectangle.

35
00:01:56,451 --> 00:01:58,890
So how do we complete 
the class body?

36
00:01:58,890 --> 00:02:02,917
What data members and member functions  
do we need for this class ?

37
00:02:02,917 --> 00:02:06,290
Let's start with the data members,.
The properties of a Rectangle

38
00:02:06,290 --> 00:02:08,969
are its width and its height.

39
00:02:08,969 --> 00:02:11,030
To declare these as data members,

40
00:02:11,030 --> 00:02:13,623
as for the fields of an usual data structure,
simply declare the different data members

41
00:02:13,623 --> 00:02:17,618
with the type and the name of the variable

42
00:02:17,618 --> 00:02:22,356
For each variable we declare the 
variable's type and name

43
00:02:22,356 --> 00:02:23,684
followed by a semicolon.

44
00:02:23,684 --> 00:02:26,437
In the Rectangle class example,  this leads to

45
00:02:26,437 --> 00:02:29,659
"double hauteur; double largeur"
(TN: "hauteur" means "height" and "largeur", "width")

46
00:02:29,659 --> 00:02:33,329
it's as simple as that,
as simple as for standard data structures!

47
00:02:33,329 --> 00:02:36,243
And it's the same for using 
the data members of an instance,

48
00:02:36,243 --> 00:02:39,830
with the same syntax as for a data structure.

49
00:02:39,830 --> 00:02:45,360
So we have the name of the instance 
followed by a period and the

50
00:02:45,360 --> 00:02:46,934
name of the data member that 
we want to use.

51
00:02:46,934 --> 00:02:50,309
For example, to use the 
height of the "rect1 Rectangle",

52
00:02:50,309 --> 00:02:53,149
we write "rect1.hauteur",

53
00:02:53,149 --> 00:02:56,165
which leads us to the following whole program.

54
00:02:56,165 --> 00:03:01,705
Here I have included the library "iostream"
because I use input and output streams

55
00:03:01,728 --> 00:03:04,496
specifically displaying with 
cout and endl.

56
00:03:04,496 --> 00:03:07,094
Next, the usual
"using namespace std;"

57
00:03:07,094 --> 00:03:10,205
Then comes the declaration of 
the Rectangle class

58
00:03:10,205 --> 00:03:13,395
that ends with -- don't forget-- a 
semicolon.

59
00:03:13,395 --> 00:03:15,935
Next, the two data members:
height and width.

60
00:03:16,043 --> 00:03:18,621
Then here in the main, we 

61
00:03:18,621 --> 00:03:22,974
declare an instance "rect1"  
of the Rectangle class 

62
00:03:22,974 --> 00:03:27,340
and now we can initialize 
the height of rect1 at 3.0,

63
00:03:27,340 --> 00:03:32,470
and the width, also of rect1, at 4.0,

64
00:03:32,470 --> 00:03:36,596
and finally print 

65
00:03:36,596 --> 00:03:39,486
the height of rect1 on the screen.

66
00:03:39,761 --> 00:03:43,623
All this is very much alike to 
the standard data structures presented

67
00:03:43,623 --> 00:03:46,641
in our previous course:
Introduction to Programming.

68
00:03:46,641 --> 00:03:50,106
Note that the code given here does 
not compiled as is.

69
00:03:50,106 --> 00:03:52,210
You still require a litlle detail

70
00:03:52,210 --> 00:03:55,033
that will be explained
in the next video.

71
00:03:55,033 --> 00:03:59,333
But apart from that detail, the rest is by large correct.

72
00:03:59,409 --> 00:04:02,168
Let's examine now the 
declaration of methods.

73
00:04:02,168 --> 00:04:05,585
Methods are simple functions 
that are embedded in a class.

74
00:04:05,585 --> 00:04:09,555
In the case of the Rectangle class, 
we will 

75
00:04:09,559 --> 00:04:11,917
add the method "surface".
(TN: "surface" means "area")

76
00:04:11,917 --> 00:04:14,728
A method is declared just 
like a function 

77
00:04:14,728 --> 00:04:17,958
with the return type, 
the name of the method,

78
00:04:17,958 --> 00:04:22,580
then in parentheses, 
possibly a list of parameters;

79
00:04:22,580 --> 00:04:24,742
all this is the method header,

80
00:04:24,742 --> 00:04:28,892
followed by the actual definition 
of the method: the method body

81
00:04:28,911 --> 00:04:30,746
within braces.

82
00:04:30,746 --> 00:04:32,085
The only difference

83
00:04:32,085 --> 00:04:35,625
is that the methods are declared 
inside the class itself.

84
00:04:35,646 --> 00:04:38,106
In our example of the Rectangle class,

85
00:04:38,115 --> 00:04:42,045
the method "surface" is 
included here in the class

86
00:04:42,045 --> 00:04:46,511
with, its return type -- double because 
this method shall return a double --, its name,

87
00:04:46,511 --> 00:04:50,012
no need for parameters here,

88
00:04:50,012 --> 00:04:52,999
and returns the product of the 
height and the width.

89
00:04:52,999 --> 00:04:54,942
We could ask ourselves

90
00:04:54,942 --> 00:04:57,559
"Don't we need parameters?"

91
00:04:57,559 --> 00:05:00,035
Indeed, if we had written it
as an ordinary function,

92
00:05:00,035 --> 00:05:02,797
--not a method but a function in the usual sense --

93
00:05:02,797 --> 00:05:07,977
would we have had to pass 
the height and width

94
00:05:08,182 --> 00:05:10,027
as arguments to the function

95
00:05:10,027 --> 00:05:12,878
so that their values can 
be used in the computation.

96
00:05:12,878 --> 00:05:17,411
So why for this method in 
the Rectangle class

97
00:05:17,411 --> 00:05:19,805
don't we need to pass any parameter?

98
00:05:19,805 --> 00:05:22,383
The answer is that 
the height and width

99
00:05:22,383 --> 00:05:24,241
are data members 
of this class.

100
00:05:24,241 --> 00:05:27,110
Since "surface" is 
part of the Rectangle class,

101
00:05:27,110 --> 00:05:32,210
the method has access to 
the height and width of the class.

102
00:05:32,210 --> 00:05:35,901
Technically, this is called "class scope",

103
00:05:35,901 --> 00:05:38,701
that is, that all the data
members of a class

104
00:05:38,701 --> 00:05:41,421
are accessible from anywhere in the class

105
00:05:41,421 --> 00:05:44,216
and in particular 
from each of its methods.

106
00:05:44,216 --> 00:05:47,193
For example, all the methods of 
the Rectangle class

107
00:05:47,193 --> 00:05:49,755
can access the height and length.

108
00:05:49,755 --> 00:05:53,531
Therefore it is unnecessary to pass these
variables as arguments to the methods.

109
00:05:53,531 --> 00:05:57,537
In summary, a method is 
simply a function

110
00:05:57,537 --> 00:06:00,509
that is particular to a class,
so is put in the class,

111
00:06:00,509 --> 00:06:05,699
thus has access to the 
data members of the class.

112
00:06:05,755 --> 00:06:07,684
This is very important:

113
00:06:07,684 --> 00:06:11,265
do not pass data members ar arguments to 
class methods.

114
00:06:11,265 --> 00:06:16,775
This is typically a beginner's mistake.

115
00:06:16,775 --> 00:06:18,908
In our example

116
00:06:18,908 --> 00:06:22,626
we have exactly this, 
we have a method "surface"

117
00:06:22,626 --> 00:06:25,943
that does not take any parameters

118
00:06:25,943 --> 00:06:29,845
but can access the rectangle's 
height and width

119
00:06:29,845 --> 00:06:33,192
that have been declared in the class.

120
00:06:33,192 --> 00:06:36,689
That being said, it's not because 
we don't pass

121
00:06:36,689 --> 00:06:40,202
the data members as arguments to 
these methods

122
00:06:40,202 --> 00:06:43,241
that the methods shall not have 
any parameter at all.

123
00:06:43,241 --> 00:06:45,766
Of course, if the method 
needs certain parameters

124
00:06:45,766 --> 00:06:48,619
from outside the class to 
operate,

125
00:06:48,619 --> 00:06:52,268
then parameters would 
need to be declared.

126
00:06:52,268 --> 00:06:56,968
For example, suppose that we 
have a class "FigureColoree" (TN: means "ColoredShape")

127
00:06:56,968 --> 00:06:59,956
and in this class, 
we would have several data members

128
00:06:59,956 --> 00:07:04,466
as well as a method "colorie" that colors
the shape (TN: "colorie" means "to color").

129
00:07:04,515 --> 00:07:08,703
This method should receive a color
[from the outside]

130
00:07:08,703 --> 00:07:12,273
and would modify the color of the instance
of the class FigureColoree.

131
00:07:12,283 --> 00:07:16,475
"Color" is another type

132
00:07:16,475 --> 00:07:19,490
that we would have defined 
as another class or with a "typedef".

133
00:07:19,490 --> 00:07:21,538
We could for example declare

134
00:07:21,538 --> 00:07:24,857
a shape, an instance 
of the class FigureColoree,

135
00:07:24,857 --> 00:07:27,317
and some red, an instance of 
the class Color,

136
00:07:27,317 --> 00:07:30,565
and, jumping ahead a little 
on the syntax,

137
00:07:30,565 --> 00:07:35,634
color the shape red.

138
00:07:35,634 --> 00:07:37,663
What I want to illustrate here

139
00:07:37,663 --> 00:07:41,717
is that the color "red" comes 
from outside the class FigureColoree

140
00:07:41,717 --> 00:07:44,861
and is not part of the class 
FigureColoree.

141
00:07:44,861 --> 00:07:48,235
That's why here we have 
to pass it as an argument.

142
00:07:48,235 --> 00:07:51,125
It is not a data member,
so we have to pass it

143
00:07:51,140 --> 00:07:54,410
as parameter to the "colorie" method.

144
00:07:54,504 --> 00:07:57,232
We saw that methods are
a particular form of functions

145
00:07:57,232 --> 00:08:00,320
that are declared in classes

146
00:08:00,320 --> 00:08:02,200
But doing so, frequently 
makes the code less easy to read.

147
00:08:02,218 --> 00:08:05,053
For example, we don't have a comprehensive
synthetical view

148
00:08:05,053 --> 00:08:08,113
of all the prototypes of all the methods 
offered by a class.

149
00:08:08,139 --> 00:08:11,099
For this reason
-- a better readability --

150
00:08:11,099 --> 00:08:13,477
but also a better modularization,

151
00:08:13,477 --> 00:08:16,525
that is to say a better separation 
of the interface

152
00:08:16,525 --> 00:08:18,439
and the implementation,

153
00:08:18,439 --> 00:08:20,643
into two different units,

154
00:08:20,643 --> 00:08:25,532
for all these reasons, it might be
necessary to define

155
00:08:25,532 --> 00:08:28,172
some methods outside of the class.

156
00:08:28,283 --> 00:08:30,610
This does not change 
anything of what I said earlier,

157
00:08:30,610 --> 00:08:32,982
but we are simply 
organizing the code

158
00:08:32,982 --> 00:08:34,547
a bit differently

159
00:08:34,547 --> 00:08:37,081
by defining the method

160
00:08:37,081 --> 00:08:38,851
outside the class

161
00:08:38,851 --> 00:08:41,176
while keeping its 
prototype inside the class.

162
00:08:41,176 --> 00:08:44,626
It changes only one single thing:
if we define the method outside the class

163
00:08:44,637 --> 00:08:48,621
we have to tell the compiler that 
it is indeed a method of a certain class,

164
00:08:48,621 --> 00:08:51,190
and not a (usual) function.

165
00:08:51,190 --> 00:08:54,308
Thus the class to which 
the method belongs

166
00:08:54,308 --> 00:08:56,578
is indicated in the method definition

167
00:08:56,578 --> 00:08:59,082
in front of the method name:

168
00:08:59,082 --> 00:09:02,492
the class name followed 
by what is known as

169
00:09:02,531 --> 00:09:05,591
the "scope resolution operator"
symbolized by a double colon ": :"

170
00:09:06,591 --> 00:09:11,580
For example, in our Rectangle class, 
we declared and defined

171
00:09:11,580 --> 00:09:13,472
the method "surface".

172
00:09:13,472 --> 00:09:17,130
If we want to define this method 
outside the class, what 

173
00:09:17,130 --> 00:09:22,694
we keep in the class Rectangle 
is the prototype of the method surface.

174
00:09:22,694 --> 00:09:25,532
The method's definition, outside the class,

175
00:09:25,532 --> 00:09:32,316
will now have the name "surface" preceded by 
the class name and ": :".

176
00:09:32,316 --> 00:09:36,152
The definition is exactly the same as before,

177
00:09:36,152 --> 00:09:41,392
but with the method name preceded 
by the class name.

178
00:09:42,193 --> 00:09:44,633
Let's consider now another 
aspect of methods.

179
00:09:44,728 --> 00:09:47,062
There are actually two kinds of methods:

180
00:09:47,062 --> 00:09:49,102
methods that can modify 

181
00:09:49,102 --> 00:09:50,812
valid instances

182
00:09:50,812 --> 00:09:52,125
as we saw earlier

183
00:09:52,125 --> 00:09:55,428
the "colorie" method of the "FigureColoree" class 

184
00:09:55,428 --> 00:10:00,588
could modify and change the "color" of an instance.

185
00:10:00,598 --> 00:10:03,460
Such methods are called "non-const methods"
or "non-const member functions".

186
00:10:03,840 --> 00:10:06,382
We distinguish these from methods

187
00:10:06,382 --> 00:10:09,408
that cannot modify their 
corresponding instances;

188
00:10:09,408 --> 00:10:13,092
for instance, the method "surface" of the
Rectangle class:

189
00:10:13,092 --> 00:10:16,547
computing the area of a rectangle 
does not modify

190
00:10:16,547 --> 00:10:18,357
the rectangle itself.

191
00:10:18,357 --> 00:10:20,517
These methods are called "const methods" or
"const member functions".

192
00:10:20,814 --> 00:10:24,589
For const methods, it is a good 
habit to signal these to the compiler

193
00:10:24,589 --> 00:10:27,193
and to other programmers
that will read your code

194
00:10:27,193 --> 00:10:31,315
by adding the keyword "const"
after the parameters list,

195
00:10:31,315 --> 00:10:35,570
at the end of the header,

196
00:10:35,570 --> 00:10:39,190
 to say that they cannot modify

197
00:10:39,201 --> 00:10:41,509
instances.

198
00:10:41,509 --> 00:10:45,380
To illustrate, in the Rectangle class,
we would define here

199
00:10:45,380 --> 00:10:52,048
the prototype of the "surface" method
by adding, here at the end,

200
00:10:52,048 --> 00:10:54,708
 the keyword "const" which will also be 
added on the definition of 

201
00:10:54,722 --> 00:10:59,673
the "surface" method,

202
00:10:59,673 --> 00:11:03,433
here, at the end of its header.

203
00:11:03,813 --> 00:11:05,526
We can check, here,

204
00:11:05,526 --> 00:11:08,662
that the "surface" method does not
at all modify

205
00:11:08,662 --> 00:11:10,297
neither the height nor the width.

206
00:11:10,297 --> 00:11:12,485
By using the height and
width,

207
00:11:12,485 --> 00:11:15,986
the method does not modify 
the instance.

208
00:11:15,986 --> 00:11:19,684
If you label 
a method "const",

209
00:11:19,684 --> 00:11:22,856
that is to say, you mark the method 
as a const method, but contrarily,

210
00:11:22,856 --> 00:11:25,866
the method modifies the instance,

211
00:11:25,866 --> 00:11:27,603
which means that in fact it is a non-const method,

212
00:11:27,603 --> 00:11:30,506
then you will get an error message 
from the compiler saying

213
00:11:30,506 --> 00:11:32,181
"assignment of data-member"

214
00:11:32,181 --> 00:11:37,728
then the member that you modified
then "in read-only structure".

215
00:11:37,728 --> 00:11:39,923
Here the "read-only" means

216
00:11:39,923 --> 00:11:42,192
it is considered that 
through this method

217
00:11:42,192 --> 00:11:44,873
you cannot modify the member cited,

218
00:11:44,873 --> 00:11:48,527
we can only "read", but not modify, "write", it.

219
00:11:48,527 --> 00:11:50,365
So in such a case, there are 
two solutions :

220
00:11:50,365 --> 00:11:53,865
either you effectively
made an error

221
00:11:53,865 --> 00:11:56,022
and you have to remove the word const,

222
00:11:56,022 --> 00:11:58,234
or you really wanted the method
to be a const method.

223
00:11:58,234 --> 00:12:00,324
In this case, you made an 
error

224
00:12:00,324 --> 00:12:03,043
in the definition of your method.

225
00:12:04,003 --> 00:12:08,013
So, now you know how declare and 
define methods of a class

226
00:12:08,024 --> 00:12:11,484
but how do you use there 
functionalities?

227
00:12:11,661 --> 00:12:14,885
To do this we will use a syntax

228
00:12:14,885 --> 00:12:17,889
already seen with vectors
and  strings

229
00:12:17,889 --> 00:12:21,431
and almost identical to the 
syntax for using data members:

230
00:12:21,431 --> 00:12:26,781
the name of the instance,
followed by the name of the method

231
00:12:26,808 --> 00:12:29,314
and in parentheses potential 
arguments

232
00:12:29,314 --> 00:12:32,034
that would be passed to the method.

233
00:12:32,055 --> 00:12:37,191
In the case of vectors,
you wrote "tableau.size()".

234
00:12:37,191 --> 00:12:40,531
Actually, it's because "vector<double>"

235
00:12:40,603 --> 00:12:45,258
is a class and "tableau" is an instance 
of this class (TN: "tableau" means "array")

236
00:12:45,258 --> 00:12:49,226
and in this class, we have a method "size".

237
00:12:49,226 --> 00:12:55,156
For instance, to call the "surface" method 
of the Rectangle class 

238
00:12:55,184 --> 00:12:59,725
on an previously declared instance rect1
of the Rectangle class,

239
00:12:59,725 --> 00:13:02,197
we could write "rect1.surface()".

240
00:13:02,197 --> 00:13:06,097
The usual format is 
"name of the instance"."name of the method"

241
00:13:06,097 --> 00:13:10,207
and possibly some arguments.
Here "surface" doesn't have any parameters,

242
00:13:10,207 --> 00:13:12,731
and so we only put 
the empty parentheses,

243
00:13:12,731 --> 00:13:15,791
just like when calling a function 
that does not have any arguments.

244
00:13:15,791 --> 00:13:17,391
So now,

245
00:13:17,391 --> 00:13:19,368
our program looks like this.

246
00:13:19,368 --> 00:13:21,618
We declare a class "Rectangle",

247
00:13:21,691 --> 00:13:23,818
-- don't forget the 
semicolon at the end --

248
00:13:23,818 --> 00:13:27,299
In its body we declare two data members,
representing height and width,

249
00:13:27,299 --> 00:13:31,461
both of type double, 
and finally a method

250
00:13:31,461 --> 00:13:34,477
that does not modify 
the object that it applies to,

251
00:13:34,477 --> 00:13:38,007
that is called "surface",
that does not have any parameters

252
00:13:38,007 --> 00:13:42,019
that computes the area,
and returns it as a double

253
00:13:42,019 --> 00:13:46,807
defined as the product of 
the data members: height*width

254
00:13:46,807 --> 00:13:50,744
Here in main
we declare an instance rect1

255
00:13:50,744 --> 00:13:52,174
of the Rectangle class

256
00:13:52,201 --> 00:13:56,241
We assign the height of this instance the
value 3.0 : "rect1.height = 3.0;"

257
00:13:56,265 --> 00:14:00,026
and the width of the instance 
rect1 the value 4.0 

258
00:14:00,026 --> 00:14:02,906
and call the area method "surface".

259
00:14:02,906 --> 00:14:06,901
Here the "surface" method does not 
take any argument

260
00:14:06,901 --> 00:14:10,836
and applies to rect1, so
it is the area of rect1.

261
00:14:10,836 --> 00:14:16,686
This will print "surface :" and 
the value 12 which is 3 times 4.

262
00:14:16,778 --> 00:14:19,351
Note again, as in the 
first example,

263
00:14:19,351 --> 00:14:21,905
strictly speaking, this code cannot compile as is,

264
00:14:21,905 --> 00:14:22,898
you still need 

265
00:14:22,898 --> 00:14:26,258
a little detail that 
will be presented in the next episode.

266
00:14:26,968 --> 00:14:30,093
It's important to understand that 
when "rect1.surface()" is called,

267
00:14:30,093 --> 00:14:36,503
"surface" is applied to "rect1"
and takes the height and width of "rect1".

268
00:14:36,518 --> 00:14:39,324
Each instance has its own 
set of values for its data member.

269
00:14:39,324 --> 00:14:42,664
If I had declared in the same way 
three rectangles, that I

270
00:14:42,664 --> 00:14:48,864
I would assign, for 
"rect1" a width 4.0 and a height 3.0,

271
00:14:48,864 --> 00:14:56,189

for "rect2" a width 11.5 and a height 3.8,
and for "rect3" some large values.

272
00:14:56,189 --> 00:15:01,755
Each of these three instances is 
a different variable in the memory

273
00:15:01,755 --> 00:15:07,675
and has its own data members, 
so when we call "rect1.surface",

274
00:15:07,675 --> 00:15:10,969
it is the general method "surface" of 
the Rectangle class

275
00:15:10,969 --> 00:15:14,364
that will be applied to the object "rect1"

276
00:15:14,364 --> 00:15:17,758
and the definition of which, in its body,

277
00:15:17,758 --> 00:15:22,118
will have access to the individual height 
and width of "rect1"

278
00:15:22,342 --> 00:15:26,068
And if we call "rect2.surface()",

279
00:15:26,068 --> 00:15:28,988
we will get the area of "rect2"
calculated with its own height and width.

280
00:15:29,033 --> 00:15:32,974
So in brief we can say 
that calling "rect1.surface()"

281
00:15:32,974 --> 00:15:38,514
is like calling the "surface" method of the 
Rectangle class with, as parameters,

282
00:15:38,879 --> 00:15:45,999
the address of "rect1" which contains 
the needed values to do the computation.

283
00:15:47,464 --> 00:15:49,470
So this concludes our

284
00:15:49,470 --> 00:15:53,142
first episode on how to 
write real OOP code in C++.

285
00:15:53,142 --> 00:15:57,043
We saw how to declare members :
data members and methods (a.k.a "member functions"),

286
00:15:57,043 --> 00:16:00,593
essentially this axe here,

287
00:16:00,611 --> 00:16:04,135
and we will consider 
this other axe

288
00:16:04,135 --> 00:16:06,645
in our next episode.
