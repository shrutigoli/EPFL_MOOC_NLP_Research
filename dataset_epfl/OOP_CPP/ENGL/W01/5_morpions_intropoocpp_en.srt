1
00:00:04,092 --> 00:00:07,200
A well thought-out user interface of
a class is key to a good design

2
00:00:07,200 --> 00:00:09,571
of an object-oriented program.

3
00:00:09,589 --> 00:00:14,312
Indeed, a poorly-designed interface that
gives the user too much access

4
00:00:14,312 --> 00:00:17,555
to implementation details
can be just as risky as

5
00:00:17,569 --> 00:00:19,873
leaving data members public.

6
00:00:19,873 --> 00:00:22,679
In this episode we will
compare two possible interfaces

7
00:00:22,679 --> 00:00:23,915
for a class.

8
00:00:23,915 --> 00:00:27,163
In the first interface, the
functionalities are too low-level

9
00:00:27,184 --> 00:00:30,598
and reveal to the outside user
the implementation details of the class.

10
00:00:30,598 --> 00:00:34,230
While in the second interface,
only indispensable functionalities

11
00:00:34,239 --> 00:00:35,857
are provided.

12
00:00:35,859 --> 00:00:38,278
We will see, of course, that
the second option

13
00:00:38,278 --> 00:00:41,168
is much better than
the first one.

14
00:00:41,168 --> 00:00:44,082
So we want to program a class
that allows us to play

15
00:00:44,086 --> 00:00:45,935
a game of tic-tac-toe.

16
00:00:45,935 --> 00:00:50,658
As a reminder, it is a game for two
players played on a 3 by 3 grid

17
00:00:50,658 --> 00:00:52,696
with 3 lines and 3 columns.

18
00:00:52,709 --> 00:00:57,761
The first player places Os while

19
00:00:57,778 --> 00:01:01,165
the other player plays Xs.

20
00:01:01,196 --> 00:01:05,261
The two players take turns and
try to

21
00:01:05,267 --> 00:01:07,496
get three of their pieces in a row

22
00:01:07,508 --> 00:01:10,570
either across, diagonally,
or vertically.

23
00:01:10,570 --> 00:01:14,039
In this first version of the class "JeuMorpion",

24
00:01:14,039 --> 00:01:16,379
the programmer has a
minimalist vision of what

25
00:01:16,409 --> 00:01:18,067
functionalities he offers
to the user.

26
00:01:18,608 --> 00:01:22,123
When he designed the class,
he looked at how to model the problem,

27
00:01:22,123 --> 00:01:25,143
and what characterizes a typical
game of tic-tac-toe.

28
00:01:25,143 --> 00:01:27,993
He said to himself that
logically you need a grid.

29
00:01:27,993 --> 00:01:31,056
So he defined a new type Grille (TN: means "Grid")
as an array with a fixed size

30
00:01:31,060 --> 00:01:34,951
to represent the member variable
"grille" (TN: = grid) of the class JeuMorpion.

31
00:01:34,961 --> 00:01:38,368
In the interface, he provides

32
00:01:38,393 --> 00:01:41,097
a method to initialize the grid,

33
00:01:41,097 --> 00:01:44,544
and a method giving the
external user

34
00:01:44,544 --> 00:01:47,694
access to the grid.

35
00:01:47,720 --> 00:01:51,444
So a player who can access this grid
from the outside

36
00:01:51,444 --> 00:01:56,219
could be free to place
his pieces on the grid as he pleases

37
00:01:56,219 --> 00:02:00,177
to implement the game's rules
strictly speaking.

38
00:02:00,177 --> 00:02:02,748
Let's examine more closely the
implementation details

39
00:02:02,748 --> 00:02:04,347
of this first version.

40
00:02:04,347 --> 00:02:05,998
First of all, how does the type "Grille"

41
00:02:05,998 --> 00:02:07,886
model a tic-tac-toe grid?

42
00:02:07,886 --> 00:02:10,900
If we examine this type,
we see that

43
00:02:10,900 --> 00:02:14,123
the programmer made a
particular choice

44
00:02:14,123 --> 00:02:19,257
in order to have an one-dimensional
array.

45
00:02:19,257 --> 00:02:22,107
This means that he probably
sees the grid like this.

46
00:02:22,107 --> 00:02:28,277
So the grid is modeled
by a 1D array of fixed size

47
00:02:28,277 --> 00:02:35,274
where the first 3 places 
represent the first line

48
00:02:35,284 --> 00:02:38,227
of the tic-tac-toe grid;

49
00:02:38,227 --> 00:02:40,925
the 3 following positions
represent the 2nd line and

50
00:02:41,525 --> 00:02:46,140
the 3 last represent the last line.

51
00:02:46,140 --> 00:02:48,482
This is one possible choice

52
00:02:48,482 --> 00:02:50,615
even if it is not very natural a priori.

53
00:02:50,615 --> 00:02:54,022
The programmer of the class JeuMorpion
wants to give the user

54
00:02:54,022 --> 00:02:57,750
of this class, access to this grid
so that he can fill out

55
00:02:57,750 --> 00:02:59,641
the grid himself.

56
00:02:59,641 --> 00:03:02,109
So he makes the choice
to model the grid

57
00:03:02,109 --> 00:03:04,524
with a pointer to a grid.

58
00:03:04,524 --> 00:03:09,341
And it is this pointer that is returned
through the method "get_grille".

59
00:03:09,341 --> 00:03:11,471
Concretely, our data member "grille"

60
00:03:13,671 --> 00:03:15,181
is nothing other than a pointer

61
00:03:15,181 --> 00:03:18,103
to an array with a fixed size of 9.

62
00:03:18,103 --> 00:03:21,196
We saw that the primary functionality

63
00:03:21,196 --> 00:03:23,630
of the class JeuMorpion
is the method get_grille

64
00:03:23,630 --> 00:03:28,875
that returned the value of this
pointer to the external user.

65
00:03:28,875 --> 00:03:32,474
And by the bias of this pointer,
it is possible for the user

66
00:03:32,474 --> 00:03:36,621
to access and fill the grid to
implement the game's rules.

67
00:03:37,069 --> 00:03:41,221
So we see that in this design
of the class JeuMorpion, the programmer

68
00:03:41,230 --> 00:03:45,181
entrusts the user with following
the rules of the game

69
00:03:45,181 --> 00:03:49,551
instead of defining them
inside the class JeuMorpion.

70
00:03:49,551 --> 00:03:52,589
This is a very bad decision
and we will discuss it later on.

71
00:03:53,349 --> 00:03:57,258
The second method offered
by the programmer of this class

72
00:03:57,258 --> 00:04:00,000
is the method "initialise"
which simply allocates

73
00:04:00,000 --> 00:04:03,616
memory for a 9-item array.

74
00:04:03,616 --> 00:04:07,076
So someone who wants to use
the class JeuMorpion

75
00:04:07,076 --> 00:04:08,862
could use it in this manner:

76
00:04:08,862 --> 00:04:11,915
To start, he declares
a variable, for example "jeu" (="game"),

77
00:04:11,915 --> 00:04:14,121
of type JeuMorpion.

78
00:04:14,121 --> 00:04:17,080
Then he could
call the method "initialise"

79
00:04:19,520 --> 00:04:21,379
to initialize the grid.

80
00:04:21,659 --> 00:04:25,430
At this point, we would have in the
variable "jeu",

81
00:04:26,280 --> 00:04:31,470
an object with a member variable
that is a pointer, or address

82
00:04:31,470 --> 00:04:34,850
of an array with 9 elements.

83
00:04:35,266 --> 00:04:39,105
To program the game's rules,
it will be for example the user

84
00:04:39,105 --> 00:04:42,788
who will program how the
game is played: with

85
00:04:42,788 --> 00:04:45,410
a player placing one of his
pieces each turn.

86
00:04:45,410 --> 00:04:48,726
So the user

87
00:04:48,726 --> 00:04:54,048
will have to access with this
pointer the grid and place

88
00:04:54,048 --> 00:04:55,309
Os and Xs as needed.

89
00:04:55,679 --> 00:04:58,735
To learn the value of this pointer
giving him access

90
00:04:58,735 --> 00:05:02,147
to the grid, the user

91
00:05:02,147 --> 00:05:05,520
will have to use the
public method "get_grille".

92
00:05:05,520 --> 00:05:11,814
So here, to access the value
of this pointer,

93
00:05:11,814 --> 00:05:15,132
he uses "get_grille" like this.

94
00:05:15,132 --> 00:05:18,057
And we will see how to concretely
use this functionality

95
00:05:18,057 --> 00:05:22,358
to fill the grid using the

96
00:05:22,358 --> 00:05:25,810
functions in this first
version of "JeuMorpion".

97
00:05:25,810 --> 00:05:29,116
Let's now imagine a situation where
a programmer has written

98
00:05:29,116 --> 00:05:32,209
the class "JeuMorpion" with
the functionalities

99
00:05:32,209 --> 00:05:35,020
that we just examined and
that now a user

100
00:05:35,020 --> 00:05:39,507
wants to use it to program
the rules of tic-tac-toe.

101
00:05:39,507 --> 00:05:43,539
Now the user asks himself
"How do I

102
00:05:43,842 --> 00:05:49,301
place a piece, for example
an O, on the grid

103
00:05:49,301 --> 00:05:54,169
in the first box?"

104
00:05:54,169 --> 00:05:56,973
The first thing he would
have to do is adopt

105
00:05:56,973 --> 00:05:59,862
a few conventions on
how to represent the

106
00:05:59,862 --> 00:06:01,212
pieces.

107
00:06:01,212 --> 00:06:05,218
Knowing that the array representing
the grid is an array of integers,

108
00:06:05,218 --> 00:06:08,662
he could choose for instance

109
00:06:08,662 --> 00:06:12,183
that "1" represents an O,
that "2" represents an X,

110
00:06:12,192 --> 00:06:13,946
and that "0" represents
an empty box.

111
00:06:14,501 --> 00:06:16,109
This puts into question

112
00:06:16,109 --> 00:06:18,498
the initialization of the grid.

113
00:06:18,498 --> 00:06:23,164
If we examine the code, the
programmer of the class simply

114
00:06:23,164 --> 00:06:26,970
allocated memory space for the array
representing the grid, but he

115
00:06:26,970 --> 00:06:30,815
never initializes the contents
of each box,

116
00:06:30,815 --> 00:06:32,256
which is still undetermined.

117
00:06:32,256 --> 00:06:36,165
If the user of JeuMorpion decides

118
00:06:36,165 --> 00:06:39,236
to start with an empty grid,

119
00:06:39,236 --> 00:06:43,346
he will have to go through
the grid and fill it with 0s

120
00:06:43,346 --> 00:06:46,435
that represent that the grid's
boxes are all empty.

121
00:06:46,435 --> 00:06:49,981
Here, the initialization of the grid
should have been undertaken

122
00:06:49,981 --> 00:06:53,643
by the programmer,
and not the user.

123
00:06:53,643 --> 00:06:57,230
To place an O in the
first box of the grid,

124
00:06:57,230 --> 00:07:00,995
the user doesn't have any choice
but to go look

125
00:07:00,995 --> 00:07:03,969
at how the class JeuMorpion
is implemented.

126
00:07:03,969 --> 00:07:09,873
He has to know that his variable
"jeu" henceforth contains an

127
00:07:11,643 --> 00:07:18,600
object with a member variable that points
to a 9-element one-dimensional array

128
00:07:18,600 --> 00:07:25,211
and he has to know that placing an
O on the grid

129
00:07:25,211 --> 00:07:28,623
is represented by putting a
"1" in the corresponding position. 

130
00:07:28,623 --> 00:07:32,639
He will have
to get the value of this pointer

131
00:07:34,209 --> 00:07:37,822
with "jeu.get_grille".

132
00:07:37,822 --> 00:07:43,882
And so he can access the value referenced by the pointer:

133
00:07:43,882 --> 00:07:48,454
the grid, and more particularly the
box 0 of this grid

134
00:07:48,454 --> 00:07:50,481
where he will put
the value "1".

135
00:07:51,896 --> 00:07:53,944
If he is attentive enough,

136
00:07:53,944 --> 00:07:56,093
the user of "JeuMorpion"

137
00:07:56,093 --> 00:07:58,396
will come up with
a perfectly functional version

138
00:07:58,396 --> 00:07:59,854
of tic-tac-toe.

139
00:07:59,854 --> 00:08:02,839
But he would have had
to deal with several pitfalls and problems

140
00:08:02,839 --> 00:08:06,083
along the way that in principle
he shouldn't have encountered.

141
00:08:06,713 --> 00:08:09,290
One of the fundamental
problems with this first version

142
00:08:09,290 --> 00:08:11,644
of tic-tac-toe is that the user

143
00:08:11,644 --> 00:08:14,048
cannot implement the game
properly without

144
00:08:14,048 --> 00:08:16,213
knowing the class's internal
implementation details.

145
00:08:16,213 --> 00:08:19,691
He has to know under
what form and with what conventions

146
00:08:19,691 --> 00:08:24,560
the representation of the grid is stored,
for example in this case a 1D integer array with

147
00:08:24,560 --> 00:08:26,143
each 3 positions representing
a line.

148
00:08:26,143 --> 00:08:30,148
He will also have to adopt some
arbitrary conventions of his own

149
00:08:30,148 --> 00:08:33,537
such as a "0" representing an empty slot,
a "1" an "O", and

150
00:08:33,537 --> 00:08:35,074
a "2" an "X".

151
00:08:35,074 --> 00:08:38,324
Since these conventions
will probably not be used

152
00:08:38,324 --> 00:08:41,438
by other programmers of this class,
the resulting code

153
00:08:41,438 --> 00:08:42,991
will be hard to understand for others.

154
00:08:42,991 --> 00:08:47,762
In conclusion, to use the class
"JeuMorpion" properly,

155
00:08:47,762 --> 00:08:52,216
the user has to know the
intimate details of how the data is coded

156
00:08:52,216 --> 00:08:55,472
in this class and also
adopt several arbitrary

157
00:08:55,472 --> 00:08:58,296
conventions himself.

158
00:08:58,296 --> 00:09:01,323
Furthermore, the resulting code

159
00:09:01,323 --> 00:09:04,145
of the class "JeuMorpion" will
be completely opaque.

160
00:09:04,145 --> 00:09:08,318
This line is incomprehensible
to anyone who reads it.

161
00:09:08,318 --> 00:09:10,728
What does an "0" mean?
What does a "1" mean?

162
00:09:10,728 --> 00:09:13,298
This line can only be
understood by looking

163
00:09:13,298 --> 00:09:16,175
inside the class "JeuMorpion".

164
00:09:16,175 --> 00:09:19,012
Another thing is that
the user's code

165
00:09:19,012 --> 00:09:21,567
is not robust in the case of
changes made

166
00:09:21,567 --> 00:09:23,559
by the programmer of
the class "JeuMorpion"

167
00:09:23,559 --> 00:09:25,671
to the implementation details.

168
00:09:25,671 --> 00:09:28,742
Suppose that he decides

169
00:09:28,742 --> 00:09:33,237
to switch from a grid represented
by a 1D array to a 2D array.

170
00:09:33,237 --> 00:09:37,553
Well, the user would have to
rewrite this line of code that is now useless.

171
00:09:37,553 --> 00:09:42,312
So the user of "JeuMorpion"
is effected by

172
00:09:42,312 --> 00:09:45,192
any modification made
internally to the class.

173
00:09:45,192 --> 00:09:47,968
He would have to
rewrite this line like this,

174
00:09:51,468 --> 00:09:54,786
if a 2D array is used.

175
00:10:01,286 --> 00:10:03,834
And if he had
written many lines of code

176
00:10:03,834 --> 00:10:07,339
respecting the implementation choices
of the programmer,

177
00:10:07,339 --> 00:10:09,517
he would have to revise everything
he had written.

178
00:10:09,517 --> 00:10:11,701
And finally, an extremely
important point:

179
00:10:11,701 --> 00:10:15,308
with this functionality,
the programmer-user

180
00:10:15,308 --> 00:10:20,154
can access the value of the pointer
which gives him direct access

181
00:10:20,154 --> 00:10:22,260
to the game grid.

182
00:10:22,260 --> 00:10:24,580
This enables, as we will
later see,

183
00:10:24,580 --> 00:10:26,703
numerous manipulations
to be made to this grid

184
00:10:26,703 --> 00:10:29,148
that are undesirable.

185
00:10:29,148 --> 00:10:31,083
So even if the class
programmer of "JeuMorpion"

186
00:10:31,083 --> 00:10:35,075
made the right decision to declare

187
00:10:37,135 --> 00:10:39,013
the data field "grille" private;

188
00:10:44,441 --> 00:10:48,372
which prevents direct
manipulation of the grid

189
00:10:48,372 --> 00:10:54,727
through the data member like this.
However, he allows the value

190
00:10:54,727 --> 00:10:59,676
of the pointer to be accessed freely
with "get_grille" which enables

191
00:10:59,676 --> 00:11:02,098
the exact same manipulation
to be done

192
00:11:02,098 --> 00:11:04,245
but only in a more indirect manner.

193
00:11:04,245 --> 00:11:08,634
This destroys any advantage of
declaring "grille" private,

194
00:11:08,634 --> 00:11:10,918
making the declaration "private"
completely useless

195
00:11:10,918 --> 00:11:13,934
 in this case.

196
00:11:14,284 --> 00:11:18,413
More generally, when in a class, a data member
is a pointer to an object,

197
00:11:18,413 --> 00:11:23,318
like this array, offering external
access to the value

198
00:11:23,318 --> 00:11:26,800
of this pointer is adverse
to the goal of encapsulation

199
00:11:26,800 --> 00:11:30,674
because it allows the implementation
details to be accessed.

200
00:11:31,268 --> 00:11:35,769
And this access of the
grid implementation though the pointer

201
00:11:35,769 --> 00:11:37,752
results in many lamentable
consequences.

202
00:11:37,752 --> 00:11:40,867
For example nothing prevents
me to do this:

203
00:11:40,867 --> 00:11:45,011
access a box of the grid
with an invalid index.

204
00:11:45,011 --> 00:11:48,647
The person who uses "get_grille"
can make a mistake in the index,

205
00:11:48,647 --> 00:11:51,501
perhaps not as obvious
as in this case,

206
00:11:51,501 --> 00:11:55,054
but nothing prevents him
to do this kind of manipulation.

207
00:11:55,062 --> 00:11:58,282
At this point, the program
will behave improperly

208
00:11:58,282 --> 00:12:01,221
which can, in some cases,
result in errors like

209
00:12:01,221 --> 00:12:05,250
"segmentation faults" and the
abrupt interruption of the program.

210
00:12:05,250 --> 00:12:08,056
Nor does anything prevent me
to enter unaccounted values

211
00:12:08,056 --> 00:12:10,406
different than 1s and 2s

212
00:12:10,406 --> 00:12:13,531
representing Os and Xs.

213
00:12:13,531 --> 00:12:17,373
We could imagine that
someone using the grid

214
00:12:17,373 --> 00:12:20,288
maliciously or inadvertently

215
00:12:20,288 --> 00:12:21,995
enters unexpected values.

216
00:12:21,995 --> 00:12:24,640
Such as 42, 11 or 3.

217
00:12:24,640 --> 00:12:27,998
This results in a situation
where the game's logic

218
00:12:27,998 --> 00:12:29,516
and rules aren't
respected.

219
00:12:29,516 --> 00:12:32,467
Imagine that
the programmer of the game's rules,

220
00:12:32,467 --> 00:12:35,785
programmed a method
"get_joueur_gagnant" (= "get_winner()")

221
00:12:35,785 --> 00:12:38,769
whose job it is to
go through the grid

222
00:12:38,769 --> 00:12:41,017
and determine if
any Xs or Os are in a row.

223
00:12:41,017 --> 00:12:44,742
If the method is
expecting to find values like

224
00:12:44,742 --> 00:12:47,896
0,1 and 2, and finds 42 instead,

225
00:12:47,896 --> 00:12:50,556
it  will behave incorrectly.

226
00:12:50,556 --> 00:12:55,155
Lastly, imagine that the grid's user
want to cheat,

227
00:12:55,155 --> 00:12:58,735
for example replace
an O with an X

228
00:12:58,735 --> 00:13:01,816
that is already on the grid.
Nothing stops him.

229
00:13:01,816 --> 00:13:05,522
So here we could,
after putting a 1 here,

230
00:13:05,522 --> 00:13:09,852
replace it with a 2
using this kind of command.

231
00:13:09,852 --> 00:13:13,072
There is no control to make
sure not to erase

232
00:13:13,072 --> 00:13:17,068
an existing piece
on the grid.

233
00:13:18,778 --> 00:13:22,718
All these problems proceed from
the fact that the functionalities

234
00:13:22,718 --> 00:13:25,670
offered publicly are
too low of level,

235
00:13:25,670 --> 00:13:29,519
relating too much to the implementation
details which then need to be known.

236
00:13:29,519 --> 00:13:33,432
They offer  too much access
to the data

237
00:13:33,634 --> 00:13:37,607
which can be used
without restriction.

238
00:13:37,607 --> 00:13:41,398
This is obviously a
bad design.

239
00:13:41,398 --> 00:13:43,786
To program a class JeuMorpion
that is correctly encapsulated,

240
00:13:43,786 --> 00:13:45,849
it is crucial that the
implementation choices

241
00:13:45,849 --> 00:13:50,065
are not accessible or visible
through the user interface

242
00:13:50,065 --> 00:13:52,118
that the external programmer
is given.

243
00:13:52,118 --> 00:13:54,500
Furthermore,
the internal implementation decisions

244
00:13:54,500 --> 00:13:56,802
for example, how to
represent the grid and

245
00:13:56,802 --> 00:13:59,488
how to represent the pieces
on the grid;

246
00:13:59,488 --> 00:14:02,860
is the concern of the
programmer of "JeuMorpion",

247
00:14:02,860 --> 00:14:04,535
and not its user.

248
00:14:04,535 --> 00:14:06,718
Now we will study

249
00:14:06,718 --> 00:14:09,243
a superior version of this class.

250
00:14:10,710 --> 00:14:12,861
In this 2nd version
of the class JeuMorpion,

251
00:14:12,861 --> 00:14:15,577
the programmer-designer
has duly chosen

252
00:14:15,577 --> 00:14:18,368
to model all the elements
need to play

253
00:14:18,368 --> 00:14:21,040
a virtual game of tic-tac-toe.

254
00:14:21,040 --> 00:14:22,885
Namely, not only
the grid,

255
00:14:22,885 --> 00:14:25,955
but also the pieces
that will be played.

256
00:14:25,955 --> 00:14:30,009
And to this end, he chose
an enumerated type

257
00:14:30,009 --> 00:14:34,104
to manipulate the pieces
with understandable names.

258
00:14:35,264 --> 00:14:39,378
To model the grid itself,
the programmer made

259
00:14:39,378 --> 00:14:42,034
more logical choices
than in the last version.

260
00:14:42,034 --> 00:14:45,051
He uses an array
with 3 lines and 3 columns,

261
00:14:45,051 --> 00:14:49,495
which is closer
to a real

262
00:14:49,495 --> 00:14:52,692
tic-tac-toe grid.

263
00:14:53,252 --> 00:14:54,879
In the class JeuMorpion,

264
00:14:54,879 --> 00:14:58,239
he doesn't need to access
the grid with a pointer.

265
00:14:58,239 --> 00:15:01,491
So rationally, the data
member is defined

266
00:15:01,491 --> 00:15:04,434
of type "Grille" like this.

267
00:15:05,787 --> 00:15:09,401
And the initialization of
the grid, which was badly and partially

268
00:15:09,401 --> 00:15:11,773
done in the last version,
is thoroughly carried out here.

269
00:15:11,773 --> 00:15:16,117
The class programmer initializes

270
00:15:16,117 --> 00:15:19,040
each element of the grid.

271
00:15:19,040 --> 00:15:22,440
And to do this, he goes
through each line of the grid

272
00:15:22,440 --> 00:15:25,628
and fills each slot of this line

273
00:15:25,628 --> 00:15:30,337
by explicitly putting
"VIDE" (TN: = "empty").

274
00:15:30,654 --> 00:15:34,391
The idea is now to offer
the user

275
00:15:34,391 --> 00:15:36,902
several well-chosen
methods

276
00:15:36,902 --> 00:15:38,574
that allow him to manipulate

277
00:15:38,574 --> 00:15:41,900
the grid without having to
know how it is implemented.

278
00:15:41,900 --> 00:15:45,722
We could imagine that a
method "placer_rond" (TN: = "place O")

279
00:15:45,722 --> 00:15:49,039
whose role it is to place an O
on the game grid

280
00:15:49,039 --> 00:15:52,254
at the intersection of a
line and column given by the user.

281
00:15:52,901 --> 00:15:57,375
Likewise, "placer_croix" places an X

282
00:15:57,375 --> 00:15:58,894
on the line and column that are given.

283
00:15:58,894 --> 00:16:01,648
These methods return a boolean
that indicates

284
00:16:01,648 --> 00:16:04,327
if the O or X was
successfully placed

285
00:16:04,327 --> 00:16:07,043
in the desired location.

286
00:16:07,043 --> 00:16:09,412
We can of course, imagine
other methods

287
00:16:09,412 --> 00:16:12,442
for example, a method
"get_joueur_gagnant" (= "get_winner()")

288
00:16:12,442 --> 00:16:15,555
that evaluates the grid to
see if 3 Os or Xs

289
00:16:15,555 --> 00:16:16,817
are aligned.

290
00:16:18,397 --> 00:16:21,522
Placing a token on the grid

291
00:16:21,522 --> 00:16:24,304
is done with the same
procedure

292
00:16:24,304 --> 00:16:27,210
whether it is an O or an X.

293
00:16:27,210 --> 00:16:30,655
It is therefore logical
to modularize the process

294
00:16:30,655 --> 00:16:34,448
and write a method "placer_coup"
that places

295
00:16:34,448 --> 00:16:37,603
the different pieces
on the game grid.

296
00:16:37,603 --> 00:16:39,310
The two methods "placer_rond"

297
00:16:39,310 --> 00:16:42,816
and "placer_croix" are 
sufficient for the user

298
00:16:42,816 --> 00:16:45,746
to place the tokens on the grid.

299
00:16:45,746 --> 00:16:50,463
Consequently, the user doesn't need
to access "placer_coup"

300
00:16:50,463 --> 00:16:54,467
which is an auxiliary method
that helps "placer_croix"

301
00:16:54,467 --> 00:16:58,264
and "placer_rond" in their work but is


302
00:16:58,264 --> 00:17:01,055
not part of the class user interface.

303
00:17:01,055 --> 00:17:02,361
Again, these two methods
"placer_rond" and "placer_croix"

304
00:17:02,361 --> 00:17:05,742
suffice completely for the user
of "JeuMorpion"

305
00:17:05,742 --> 00:17:08,493
to place virtual tokens
on the grid.

306
00:17:08,493 --> 00:17:13,506
On the other hand, "placer_coup" does
not need to be accessed

307
00:17:13,506 --> 00:17:17,766
and can be consider as an
utilitarian method aiding the

308
00:17:17,766 --> 00:17:20,617
aforesaid methods to their work

309
00:17:20,617 --> 00:17:23,777
and does not belong
to the user interface.

310
00:17:23,777 --> 00:17:27,202
Therefore, we will
declare this method

311
00:17:27,202 --> 00:17:28,871
"placer_coup" as private.

312
00:17:28,871 --> 00:17:31,989
So this method
places each move

313
00:17:31,989 --> 00:17:35,731
either an O or an X
on a given line and a given column.

314
00:17:35,731 --> 00:17:39,155
Because this information for the
line and column are given

315
00:17:39,155 --> 00:17:42,229
by the user through
the method "placer_rond"

316
00:17:42,229 --> 00:17:43,873
and "placer_croix",

317
00:17:43,873 --> 00:17:46,579
the line and column have
to be verified

318
00:17:46,579 --> 00:17:49,325
to ensure that the
requested move

319
00:17:49,325 --> 00:17:53,170
corresponds to a valid
line and column.

320
00:17:53,476 --> 00:17:56,196
So the first thing placer_coup does is
to carry out this verification.

321
00:17:56,196 --> 00:17:59,223
If the move is not valid,
the error is signaled

322
00:17:59,223 --> 00:18:01,602
with "return false",

323
00:18:01,602 --> 00:18:05,040
which means that the piece
wasn't placed.

324
00:18:05,040 --> 00:18:08,953
The method placer_coup has to
also verify that the token isn't placed

325
00:18:08,953 --> 00:18:12,508
on a box that is already occupied.

326
00:18:12,508 --> 00:18:16,365
This verification is done
by explicitly testing

327
00:18:16,365 --> 00:18:21,254
the slot to make sure that
it is empty.

328
00:18:21,254 --> 00:18:23,738
If this is not the case,

329
00:18:23,738 --> 00:18:25,853
a error is indicated
by returning "false".

330
00:18:25,853 --> 00:18:30,891
If this is the case,
the token will be placed,

331
00:18:30,891 --> 00:18:33,866
and "true" is returned
to signal that

332
00:18:33,866 --> 00:18:35,804
placer_coup was successfully
called.

333
00:18:35,804 --> 00:18:39,871
You will notice that here it
is not necessary to verify

334
00:18:39,871 --> 00:18:42,133
which symbol is being placed:
an O or an X,

335
00:18:42,133 --> 00:18:45,674
because placer_coup is private

336
00:18:45,674 --> 00:18:48,755
and is only invoked by
placer_rond and placer_croix

337
00:18:48,755 --> 00:18:51,998
that will pass the

338
00:18:51,998 --> 00:18:54,924
right values to be placed.

339
00:18:54,924 --> 00:18:57,714
Let's see how all these
modifications in this new

340
00:18:57,714 --> 00:19:00,742
version of JeuMorpion
effect the user.

341
00:19:00,742 --> 00:19:04,192
So the user of this class
will probably start by

342
00:19:04,192 --> 00:19:08,034
declaring a variable
of type JeuMorpion.

343
00:19:08,034 --> 00:19:11,808
Next, he will use
the public method "initialise"

344
00:19:11,808 --> 00:19:14,991
to initialize the grid's
contents.

345
00:19:14,991 --> 00:19:19,167
Then he will start to
place the different tokens,

346
00:19:19,167 --> 00:19:21,445
on the game grid.

347
00:19:21,445 --> 00:19:24,193
If he wants
to place an O

348
00:19:24,193 --> 00:19:26,731
on line 1, column 1
of the grid,

349
00:19:26,731 --> 00:19:30,324
he would have to use
an expression like this

350
00:19:30,324 --> 00:19:32,538
which is much more
clear and explicit

351
00:19:32,538 --> 00:19:34,969
compared to before.

352
00:19:34,969 --> 00:19:40,159
He simply indicates that he is
placing an O on line 1, column 1.

353
00:19:40,159 --> 00:19:44,074
Especially because this
formula does not neccessitate

354
00:19:44,074 --> 00:19:47,775
prior knowledge of
how the class is implemented.

355
00:19:48,955 --> 00:19:52,235
The user also benefits
from the validation of the move

356
00:19:52,235 --> 00:19:54,325
by the methods
placer_rond and

357
00:19:54,325 --> 00:19:55,446
placer_croix.

358
00:19:55,446 --> 00:19:59,202
And he will be informed with
a boolean returned by these methods

359
00:19:59,202 --> 00:20:03,536
whether or not the move
was made.

360
00:20:03,536 --> 00:20:06,283
Placing an X on the grid

361
00:20:06,283 --> 00:20:08,627
involves the same procedure.

362
00:20:08,627 --> 00:20:11,444
The new version
of the class JeuMorpion

363
00:20:11,444 --> 00:20:15,018
boosts a much more robust and
clear usage.

364
00:20:15,018 --> 00:20:18,489
It frees the user from having

365
00:20:18,489 --> 00:20:22,705
to chose certain conventions
for using the interface methods.

366
00:20:22,705 --> 00:20:27,382
For instance, the user has to
be informed of the convention that

367
00:20:27,382 --> 00:20:32,120
the enumeration of the lines and columns

368
00:20:32,120 --> 00:20:36,914
start with 0 and not 1.

369
00:20:36,914 --> 00:20:40,097
The documentation
of these conventions has to be

370
00:20:40,097 --> 00:20:43,894
given in order to
use the class.

371
00:20:43,894 --> 00:20:46,945
The 2nd version of the class "JeuMorpion"
offers several advantages

372
00:20:46,945 --> 00:20:48,332
compared to the 1st.

373
00:20:48,332 --> 00:20:50,872
The first advantage is
the validation of the user input.

374
00:20:50,872 --> 00:20:54,092
It is henceforth impossible
for the user

375
00:20:54,092 --> 00:20:56,981
to place a
value in the array,

376
00:20:56,981 --> 00:20:58,743
other than one that is expected.

377
00:20:58,743 --> 00:21:01,948
In fact, he doesn't even know how
the values are coded internally.

378
00:21:01,948 --> 00:21:04,790
He doesn't even know
that an enumerated type is used

379
00:21:04,790 --> 00:21:06,823
to represent each of the values.

380
00:21:06,823 --> 00:21:10,193
He has absolutely no idea how things
are implemented.

381
00:21:10,953 --> 00:21:13,488
Another aspect

382
00:21:13,488 --> 00:21:15,938
is that the user
can no longer

383
00:21:15,938 --> 00:21:18,101
fill a box that is already filled.

384
00:21:18,101 --> 00:21:20,248
Which was not the case before.

385
00:21:20,248 --> 00:21:22,716
Here the methods of the interface

386
00:21:22,716 --> 00:21:25,196
are in charge of verifying the move

387
00:21:25,196 --> 00:21:29,240
and will prohibit this from
happening.

388
00:21:29,240 --> 00:21:30,850
Another important advantage:

389
00:21:30,850 --> 00:21:32,876
an implementation like this

390
00:21:32,876 --> 00:21:35,442
allows what is called
"the separation of concerns".

391
00:21:35,442 --> 00:21:39,486
Each programmer is
responsible for his part

392
00:21:39,486 --> 00:21:42,469
and does not have to be
preoccupied with problems

393
00:21:42,469 --> 00:21:44,734
concerning the implementation
of another part.

394
00:21:44,734 --> 00:21:47,331
For example, the person
who uses the class "JeuMorpion"

395
00:21:47,331 --> 00:21:51,043
does not need to know how the
game grid is stored,

396
00:21:51,043 --> 00:21:53,381
nor that it uses integers,

397
00:21:53,381 --> 00:21:55,460
nor which values represent what.

398
00:21:55,460 --> 00:21:59,252
The programmer of the class
JeuMorpion takes care of these details.

399
00:21:59,252 --> 00:22:04,086
And the user only has to
take care of the game's logic.

400
00:22:04,086 --> 00:22:05,091
Another important point:

401
00:22:05,091 --> 00:22:08,601
the readability of this
new code.

402
00:22:08,601 --> 00:22:12,513
The code written by
the user of this class is

403
00:22:12,513 --> 00:22:15,345
even comprehensible anyone.

404
00:22:15,345 --> 00:22:22,183
So here, understanding the expression
"jeu.placer_rond(...)" is

405
00:22:25,442 --> 00:22:26,845
not a problem.

406
00:22:26,845 --> 00:22:28,778
No need for much
explanation

407
00:22:28,778 --> 00:22:31,240
to know how it works.

408
00:22:31,240 --> 00:22:34,530
Again this was not the
case in the previous implementation

409
00:22:34,530 --> 00:22:39,327
where you had to write
a cryptic expression

410
00:22:42,679 --> 00:22:44,619
for a similar command.

411
00:22:46,418 --> 00:22:49,052
The last advantage is that
with the validation of moves,

412
00:22:49,052 --> 00:22:53,644
the user is now informed
of abnormalities in the input

413
00:22:53,644 --> 00:22:55,668
with an understandable message.

414
00:22:55,668 --> 00:22:59,443
So if we place a token
on an invalid slot on the grid,

415
00:22:59,443 --> 00:23:02,475
placer_coup will process the error

416
00:23:02,475 --> 00:23:05,318
and inform the user of the anomaly

417
00:23:05,318 --> 00:23:07,367
and that the piece was not placed.

418
00:23:07,367 --> 00:23:08,881
In the first version,

419
00:23:08,881 --> 00:23:12,029
the program ended with an
unintelligible error "segmentation fault". 

420
00:23:12,669 --> 00:23:15,998
We've come to the end of this first case
study on the game of tic-tac-toe.

421
00:23:15,998 --> 00:23:20,802
Which demonstrated the necessity
to encapsulate and hide correctly

422
00:23:20,802 --> 00:23:21,973
the implementation details,

423
00:23:21,973 --> 00:23:27,134
to offer only the functionalities that
are essential to the outside user

424
00:23:27,134 --> 00:23:29,205
and that do not give him
to much control

425
00:23:29,205 --> 00:23:32,629
to alter and modify the implementation
details.
