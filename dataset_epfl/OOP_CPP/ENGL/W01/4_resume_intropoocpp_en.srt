1
00:00:04,402 --> 00:00:08,692
In the last episode, you learned
how to write a class in C++.

2
00:00:08,692 --> 00:00:11,035
Now you know how define member
variables (data members) and methods,

3
00:00:11,035 --> 00:00:13,782
and you know how to
implement different

4
00:00:13,782 --> 00:00:15,158
aspects of encapsulation,

5
00:00:15,247 --> 00:00:18,242
such as define what
is publicly accessible

6
00:00:18,242 --> 00:00:20,352
for an outside user of the class,

7
00:00:20,352 --> 00:00:21,392
and what is inaccessible.

8
00:00:21,446 --> 00:00:24,231
In this lesson, we will
examine several examples

9
00:00:24,246 --> 00:00:26,050
to firmly establish these notions.

10
00:00:26,050 --> 00:00:28,898
We will also see that good encapsulation

11
00:00:28,898 --> 00:00:30,709
requires implementing a certain number of measures.

12
00:00:31,612 --> 00:00:35,667
As a reminder, at this stage,
a class is a more "elaborate" structure,

13
00:00:35,667 --> 00:00:38,524
in which you can not only
define certain properties or fields,

14
00:00:38,524 --> 00:00:39,794
called member variables,

15
00:00:39,794 --> 00:00:43,056
but also functions,
that are called methods.

16
00:00:43,056 --> 00:00:46,534
We saw that a class also distinguishes
itself from a structure

17
00:00:46,534 --> 00:00:50,315
by the fact that it can delimit
what is private and inaccessible

18
00:00:50,315 --> 00:00:52,201
to the outside world,
and what is on the contrary

19
00:00:52,201 --> 00:00:55,973
accessible, that is to say public.

20
00:00:56,902 --> 00:01:00,036
Here is the definition of our
favorite class Rectangle,

21
00:01:00,036 --> 00:01:02,589
that served as an introductive illustration
to the fundamental concepts

22
00:01:02,589 --> 00:01:03,899
of OOP.

23
00:01:04,138 --> 00:01:08,002
To define a class, we use
the special keyword "class",

24
00:01:08,002 --> 00:01:11,088
followed by the name
that we chose for our class.

25
00:01:11,088 --> 00:01:14,348
Because this name will be a type
in this program,

26
00:01:14,348 --> 00:01:18,377
it has to be capitalized.

27
00:01:18,803 --> 00:01:21,489
A class is usually caracterised
by a certain number

28
00:01:21,489 --> 00:01:24,299
of data fields that are
also called "data members".

29
00:01:24,299 --> 00:01:27,618
Here we logically chose to
characterize the class Rectangle

30
00:01:27,618 --> 00:01:30,033
by the variables height and width,
(TN: "hauteur" means "height", and "largeur", "width"),

31
00:01:30,033 --> 00:01:31,906
that we chose to define

32
00:01:31,906 --> 00:01:33,722
as two doubles.

33
00:01:34,205 --> 00:01:36,696
A class is also characterized
by a certain number

34
00:01:36,696 --> 00:01:40,340
of specific functionalities
called methods.

35
00:01:41,071 --> 00:01:43,461
So once we have defined
these basic elements,

36
00:01:43,461 --> 00:01:46,938
the data members and methods,
we can now examine which

37
00:01:46,938 --> 00:01:51,778
elements are part of
the internal implementation

38
00:01:51,778 --> 00:01:54,488
and does not need to be
known outside the class,

39
00:01:54,488 --> 00:01:59,006
and those that constitute the user interface,
which the outside world

40
00:01:59,006 --> 00:02:01,771
needs to know and to use

41
00:02:01,771 --> 00:02:03,720
in the class in question.

42
00:02:03,720 --> 00:02:07,501
Here we have made available
to the outside world as functionalities

43
00:02:07,501 --> 00:02:10,860
5 methods that allow

44
00:02:10,860 --> 00:02:13,473
the values of the data members width
and height to be returned

45
00:02:13,473 --> 00:02:16,312
and to be modified, and the
surface area to be calculated with

46
00:02:16,312 --> 00:02:19,151
the values of the width and height.

47
00:02:19,151 --> 00:02:22,756
The components of the
interface are specified

48
00:02:22,756 --> 00:02:24,620
as being "public".

49
00:02:24,620 --> 00:02:28,651
And conversely, the members named
"private" are considered

50
00:02:28,651 --> 00:02:29,820
as implementation details,

51
00:02:29,820 --> 00:02:33,233
and this is usually the
case for data members.

52
00:02:33,233 --> 00:02:35,397
Note that it is
normally not necessary

53
00:02:35,397 --> 00:02:39,106
to systematically define
get/set methods,

54
00:02:39,106 --> 00:02:41,273
for each of the class data fields.

55
00:02:41,273 --> 00:02:44,423
Here we defined them because
at this stage of the course,

56
00:02:44,423 --> 00:02:47,190
we only know how to interact
with the contents of a class,

57
00:02:47,190 --> 00:02:48,919
on a very basic level.

58
00:02:48,919 --> 00:02:51,454
That is why we need setters

59
00:02:51,454 --> 00:02:53,753
to set the appropriate values

60
00:02:53,753 --> 00:02:57,141
of the data members width and height.

61
00:02:57,571 --> 00:02:59,561
Respecting guidelines for
encapsulation

62
00:02:59,561 --> 00:03:02,811
by declaring private that which
pertains to implementation,

63
00:03:02,811 --> 00:03:06,101
typically the
data members of a class,

64
00:03:06,101 --> 00:03:09,247
will give the program designers
of the class Rectangle

65
00:03:09,247 --> 00:03:12,715
the freedom to modify its
implementation

66
00:03:12,715 --> 00:03:17,609
without effecting those
who use the class.

67
00:03:17,609 --> 00:03:20,430
For example, if the
programmer

68
00:03:20,430 --> 00:03:22,653
decides to modify
the class's implementation

69
00:03:22,653 --> 00:03:26,389
by using an array of 2 elements

70
00:03:26,389 --> 00:03:33,562
instead of 2 doubles here, like this,

71
00:03:35,192 --> 00:03:39,080
he only needs to internally adapt
the implementation of these methods,

72
00:03:40,410 --> 00:03:42,729
for instance here, instead of returning
"hauteur" the height,

73
00:03:42,729 --> 00:03:46,082
he returns "dims[0]".

74
00:03:46,082 --> 00:03:49,049
So he only needs to adapt
the implementation of these methods,

75
00:03:49,049 --> 00:03:52,152
for the code to still function

76
00:03:52,152 --> 00:03:54,311
for the user without

77
00:03:54,311 --> 00:03:58,644
any modifications being seen.

78
00:03:58,644 --> 00:04:02,089
Note also that the
external user of the class Rectangle,

79
00:04:02,089 --> 00:04:06,206
can only access the data
fields of the class

80
00:04:06,206 --> 00:04:08,007
through a predetermined interface,

81
00:04:08,007 --> 00:04:11,838
which allows how the data is accessed

82
00:04:11,838 --> 00:04:13,864
to be closely regulated.

83
00:04:13,864 --> 00:04:17,095
Do you know how to improve
this code

84
00:04:17,095 --> 00:04:19,158
for the class Rectangle

85
00:04:19,158 --> 00:04:21,532
with regard to this point?

86
00:04:21,532 --> 00:04:23,118
The code here

87
00:04:23,118 --> 00:04:26,150
corresponds to the class
written by the program designer

88
00:04:26,150 --> 00:04:27,252
of the class Rectangle,

89
00:04:27,252 --> 00:04:30,374
let's see what happens on
the user's side.

90
00:04:30,374 --> 00:04:32,924
The user can be the same person who
coded the class Rectangle,

91
00:04:32,924 --> 00:04:35,353
but not necessarily.

92
00:04:35,353 --> 00:04:37,663
Here is a main program,
that is client

93
00:04:37,663 --> 00:04:41,501
of the class Rectangle, that
was defined on the previous slides.

94
00:04:41,501 --> 00:04:45,981
So the class Rectangle henceforth
defines a new type that can be used

95
00:04:45,981 --> 00:04:48,842
just like any other type

96
00:04:48,842 --> 00:04:50,329
that we've used up to now.

97
00:04:50,329 --> 00:04:52,932
We can declare a variable
of type Rectangle,

98
00:04:52,932 --> 00:04:58,624
that we usually call
an object, or instance,

99
00:04:59,744 --> 00:05:01,543
and start to work with it.

100
00:05:02,513 --> 00:05:04,849
When this line has been
executed,

101
00:05:04,849 --> 00:05:06,094
we now have at disposal
in the memory,

102
00:05:06,094 --> 00:05:11,513
of an object, of type Rectangle,
that has two data fields or data members,

103
00:05:11,513 --> 00:05:16,102
one for the width and one for the height.

104
00:05:17,142 --> 00:05:20,273
So the first rational thing to do,

105
00:05:20,273 --> 00:05:22,634
is to initialize these two
members,

106
00:05:22,634 --> 00:05:26,872
so as to be able to work
with a rectangle with real dimensions.

107
00:05:26,872 --> 00:05:29,656
The initialization of an object,
strictly speaking, is actually an entire topic

108
00:05:29,656 --> 00:05:32,700
that we will soon examine in detail.

109
00:05:32,700 --> 00:05:34,195
For the time being,
let us be content with

110
00:05:34,195 --> 00:05:36,710
assigning values to
the selected data members.

111
00:05:37,120 --> 00:05:38,950
So the assignment of the
width and height,

112
00:05:38,950 --> 00:05:42,036
can be done simply with
input from the keyboard.

113
00:05:42,036 --> 00:05:45,639
We will ask the user to introduce
a value for the height,

114
00:05:45,639 --> 00:05:48,940
a value for the width,
that will be read into a variable "lu"
(TN: = "read")

115
00:05:48,940 --> 00:05:52,710
declared beforehand, and
that will be be set as value for

116
00:05:52,710 --> 00:05:55,074
the data member width of the rectangle
with the set method

117
00:05:55,074 --> 00:05:57,596
that was written for this purpose.

118
00:05:57,596 --> 00:06:03,251
So imagine here that the user
introduces the value 5.0

119
00:06:05,371 --> 00:06:09,898
into the variable "lu", and,
using the method "setHauteur",

120
00:06:09,898 --> 00:06:11,473
along with the dot notation,

121
00:06:11,473 --> 00:06:17,393
which means set the height of
rect at the value of "lu".

122
00:06:17,393 --> 00:06:21,392
So we end up in this situation concretely.

123
00:06:21,832 --> 00:06:24,653
The same applies for the width

124
00:06:25,133 --> 00:06:26,820
like this.

125
00:06:26,820 --> 00:06:29,686
Once the rectangle
is properly initialized,

126
00:06:29,686 --> 00:06:32,688
we can invoke other functionalities
on this rectangle,

127
00:06:32,688 --> 00:06:36,161
in this case,
calculating its area,

128
00:06:36,161 --> 00:06:38,537
and again we use
dot notation

129
00:06:38,537 --> 00:06:43,568
which means here that
I calculate the area of the rectangle.

130
00:06:43,568 --> 00:06:46,794
In conclusion here is
a refined version of the class Rectangle,

131
00:06:46,794 --> 00:06:50,771
based on the externalization
of method definitions.

132
00:06:50,771 --> 00:06:55,307
So here only the method prototypes
are kept in the class rectangle,

133
00:06:55,307 --> 00:07:00,028
while they are effectively defined
outside the class Rectangle.

134
00:07:00,028 --> 00:07:04,463
The link between the method and its class

135
00:07:04,463 --> 00:07:08,108
is made by the scope resolution operator.

136
00:07:08,108 --> 00:07:13,128
The scope resolution operator ( : : )
enables a local name,

137
00:07:13,128 --> 00:07:16,850
for example the name of a method,

138
00:07:17,820 --> 00:07:21,550
to be linked with a more global
name: the name of the class

139
00:07:21,550 --> 00:07:23,690
to which the method belongs.

140
00:07:23,690 --> 00:07:28,130
The advantage of externalizing
is namely that the class declaration is

141
00:07:28,130 --> 00:07:31,734
not cluttered with details
of method definitions.

142
00:07:31,734 --> 00:07:36,091
What is constituted only of

143
00:07:36,091 --> 00:07:39,251
method prototypes and
data members,

144
00:07:39,251 --> 00:07:44,195
is what is called a "class prototype".

145
00:07:46,605 --> 00:07:49,813
And what is constituted of the method
definitions

146
00:07:49,813 --> 00:07:53,784
is called the "class definition".

147
00:07:53,784 --> 00:07:57,520
So exactly like we saw
for functions,

148
00:07:57,520 --> 00:08:00,714
the prototype allows for
agreement between

149
00:08:00,714 --> 00:08:05,201
the program user and the program designer

150
00:08:05,201 --> 00:08:06,370
of the class Rectangle.

151
00:08:06,370 --> 00:08:13,072
The definitions are only
known by the program designer.

152
00:08:13,072 --> 00:08:15,056
The person who uses 
the class Rectangle

153
00:08:15,056 --> 00:08:20,277
only needs know the
public section of his prototype.

154
00:08:20,277 --> 00:08:24,876
Note that in a judicious design, we will
be careful to specify as const

155
00:08:24,876 --> 00:08:27,260
the methods that are not mutators,

156
00:08:27,260 --> 00:08:31,003
and do not modify the value
of data members.

157
00:08:31,003 --> 00:08:33,266
Several small details can
be noticed here,

158
00:08:33,266 --> 00:08:35,642
notably that certain programmers

159
00:08:35,642 --> 00:08:37,361
find it useful to use particular

160
00:08:37,361 --> 00:08:40,048
naming conventions especially
for data members,

161
00:08:40,048 --> 00:08:43,569
such as ending the name with
an underscore.

162
00:08:43,569 --> 00:08:45,662
This is to avoid
any possible shadowing

163
00:08:45,662 --> 00:08:49,401
with the names of parameters
in methods.

164
00:08:49,401 --> 00:08:51,487
You will also notice how
the programmer

165
00:08:51,487 --> 00:08:54,693
names the accessors and mutators here.


166
00:08:54,693 --> 00:08:56,523
In the last version of this program,

167
00:08:56,523 --> 00:09:01,408
the method that returned
the height of the rectangle,

168
00:09:01,408 --> 00:09:02,742
was called "getHauteur",

169
00:09:02,742 --> 00:09:05,053
but that here it is simply
called "hauteur".

170
00:09:05,053 --> 00:09:06,420
The same for the width.

171
00:09:06,420 --> 00:09:11,229
Likewise, the method that
can modify the height of the rectangle

172
00:09:11,229 --> 00:09:12,695
by setting a certain value,

173
00:09:12,695 --> 00:09:16,806
was called "setHauteur", but now
is called "hauteur".

174
00:09:16,806 --> 00:09:19,575
Some programmers find
this way of naming

175
00:09:19,575 --> 00:09:21,182
accessors and mutators

176
00:09:21,182 --> 00:09:23,763
more clear, more readable
to use.

177
00:09:23,763 --> 00:09:27,267
For example, here, if in a
program that uses the class Rectangle,

178
00:09:27,267 --> 00:09:31,999
I want to print the height of
a rectangle,

179
00:09:31,999 --> 00:09:34,482
that was declared beforehand,

180
00:09:34,482 --> 00:09:38,053
I only need to write
"rect.hauteur()".

181
00:09:40,063 --> 00:09:42,568
And not "rect.getHauteur()",

182
00:09:42,568 --> 00:09:44,732
which is a bit more bulky.

183
00:09:44,732 --> 00:09:47,886
Likewise, if in a program
I want to modify

184
00:09:47,886 --> 00:09:50,882
the height of a rectangle,

185
00:09:50,882 --> 00:09:53,756
I can simply write: "rect.hauteur(30)"

186
00:09:55,336 --> 00:09:57,273
which is considered
less cumbersome

187
00:09:57,273 --> 00:09:58,718
by some programmers.

188
00:09:58,718 --> 00:10:01,722
Here we are employing the
overloading principle:

189
00:10:01,722 --> 00:10:04,948
giving two different methods
the same name.

190
00:10:04,948 --> 00:10:06,700
The same conditions apply
for

191
00:10:06,700 --> 00:10:07,962
the methods of a class,

192
00:10:07,962 --> 00:10:09,804
as for normal functions.

193
00:10:09,804 --> 00:10:13,134
So there can be no amibguity
concerning which method is called.

194
00:10:13,134 --> 00:10:16,465
The method "hauteur" here
is a mutator that is distinguished

195
00:10:16,465 --> 00:10:18,733
from the method "hauteur"
that is an accessor

196
00:10:18,733 --> 00:10:21,364
by its list of arguments,
which differ from each other,

197
00:10:21,364 --> 00:10:25,259
but also by the presence or absence
of the keyword const.

198
00:10:25,259 --> 00:10:28,411
So  no confusion is possible
here.
