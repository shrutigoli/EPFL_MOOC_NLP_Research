1
00:00:03,994 --> 00:00:05,815
In the last episode,

2
00:00:05,815 --> 00:00:08,847
we learned how to
code declarations of classes

3
00:00:08,847 --> 00:00:11,947
and instances (a.k.a. "objects") in C++,

4
00:00:11,947 --> 00:00:14,890
as well as

5
00:00:14,890 --> 00:00:17,001
data members and methods.

6
00:00:17,528 --> 00:00:19,091
But we are still not done yet with

7
00:00:19,091 --> 00:00:22,190
this chapter about
"encapsulation and abstraction";

8
00:00:22,190 --> 00:00:25,843
because we have only examined
data members and methods,

9
00:00:25,843 --> 00:00:28,969
this axis of the diagram,

10
00:00:28,969 --> 00:00:33,685
but we still haven't examined how
to separate the visible components,

11
00:00:33,685 --> 00:00:34,954
what is called the "interface",

12
00:00:34,954 --> 00:00:37,530
from the hidden components,
the implementation details.

13
00:00:37,530 --> 00:00:41,288
So we still haven't seen this
axis of the diagram.

14
00:00:41,700 --> 00:00:43,417
This will be the topic of this episode.

15
00:00:44,161 --> 00:00:47,430
As we learned in the video
on the general aspects

16
00:00:47,430 --> 00:00:48,784
of object-oriented programming,

17
00:00:48,784 --> 00:00:53,572
it is not good that all the members of a class
-- its data members and its methods --

18
00:00:53,572 --> 00:00:55,261
are accessible to everyone;

19
00:00:55,261 --> 00:00:59,510
it is much better to limit external access
to only a few well chosen methods.

20
00:00:59,510 --> 00:01:00,992
Concretely, for the class Rectangle

21
00:01:00,992 --> 00:01:03,927
we have decided to limit the interface
to the method "surface" (TN: means "area")

22
00:01:03,927 --> 00:01:07,761
while the "largeur" and "hauteur" data members
(TN: means "width" and "height")

23
00:01:07,761 --> 00:01:12,039
constitute the hidden elements,
its implementation details.

24
00:01:12,480 --> 00:01:14,132
How do we translate

25
00:01:14,132 --> 00:01:15,272
this into C++ code?

26
00:01:15,272 --> 00:01:17,294
To this end, we will use
two keywords called "access specifiers":

27
00:01:17,294 --> 00:01:20,057
"public" and "private".

28
00:01:20,057 --> 00:01:24,428
Let's start with the "private" keyword.
It declares the components that are

29
00:01:24,428 --> 00:01:27,896
"implementation details", and
must be hidden, i.e. "private".

30
00:01:27,896 --> 00:01:32,104
So here, we will declare the
"hauteur" and "largeur" data members

31
00:01:32,104 --> 00:01:34,015
as private variables.

32
00:01:34,268 --> 00:01:36,445
With the keyword "private" followed
by a colon,

33
00:01:36,445 --> 00:01:40,463
all the data members and methods
that follow

34
00:01:40,463 --> 00:01:45,827
are inaccessible
from outside of the class.

35
00:01:45,827 --> 00:01:50,293
This means they are accessible only
from within the corresponding class.

36
00:01:50,829 --> 00:01:54,861
Please note that we can also have
methods in the private section.

37
00:01:54,861 --> 00:01:56,015
Such methods can only be invoked

38
00:01:56,015 --> 00:01:58,303
by instances of the same class,

39
00:01:58,303 --> 00:02:02,769
but not from any other class,
nor from the main().

40
00:02:03,434 --> 00:02:05,197
"Inaccessible from outside the class"
means

41
00:02:05,197 --> 00:02:08,352
that, for example, if in main()

42
00:02:08,352 --> 00:02:10,672
or another class,

43
00:02:10,887 --> 00:02:15,437
we declare an instance "rect"
of the Rectangle class

44
00:02:15,573 --> 00:02:21,376
and we try to access its
height directly with "rect.hauteur"

45
00:02:22,481 --> 00:02:26,346
then we will get an error 
message that we are trying to 

46
00:02:26,346 --> 00:02:28,168
access "hauteur" which is
a private data member.

47
00:02:28,590 --> 00:02:30,029
The compiler will send a message:

48
00:02:30,029 --> 00:02:32,786
you can't do this:
that component "is private".

49
00:02:32,786 --> 00:02:35,550
By default, if you don't
specify the accessibility of the class members,

50
00:02:35,550 --> 00:02:38,248
so for example, if we haven't
added this keyword,

51
00:02:38,248 --> 00:02:39,944
as we did up to this episode,

52
00:02:39,944 --> 00:02:44,688
by default, every member declared
in this class is private.

53
00:02:44,688 --> 00:02:48,106
Strictly speaking, in this example

54
00:02:48,106 --> 00:02:51,918
because we did not specify
anything for the method "surface"

55
00:02:51,918 --> 00:02:54,003
this method is also private.

56
00:02:54,353 --> 00:02:57,264
That being said, I really encourage you
to systematically

57
00:02:57,264 --> 00:02:58,786
specify the access rights

58
00:02:58,786 --> 00:03:01,957
and explicitly define the private components
with the "private" keyword

59
00:03:01,957 --> 00:03:05,723
and define the components that have to be

60
00:03:05,723 --> 00:03:08,368
accessible from the outside of the class

61
00:03:08,368 --> 00:03:10,216
with the access specifier keyword "public".

62
00:03:10,886 --> 00:03:15,600
So, here, if we want the "surface" method
to be accessible by anyone,

63
00:03:15,600 --> 00:03:17,968
visible from anywhere,
and be part of the interface,

64
00:03:18,491 --> 00:03:22,959
we will add here the keyword "public"
followed by a colon.

65
00:03:22,959 --> 00:03:27,049
Like for "private", everything between
the keywords "public"

66
00:03:27,049 --> 00:03:32,912
and "private" will be in the interface,

67
00:03:32,912 --> 00:03:34,882
and accessible to the public

68
00:03:34,882 --> 00:03:37,622
outside the class.

69
00:03:38,899 --> 00:03:41,502
Concretely, if we take up the last example

70
00:03:41,502 --> 00:03:46,970
where we declared in the main() an
instance rect of the Rectangle class,

71
00:03:46,970 --> 00:03:50,138
we could, in the main(), with a variable

72
00:03:50,138 --> 00:03:52,464
z of type double, declared beforehand,

73
00:03:52,464 --> 00:03:55,726
call the "surface" method

74
00:03:58,085 --> 00:04:00,181
of the Rectangle class,

75
00:04:00,181 --> 00:04:03,407
because this method is public,

76
00:04:03,407 --> 00:04:05,172
and accessible from anywhere,

77
00:04:05,172 --> 00:04:07,306
especially in the main().

78
00:04:07,500 --> 00:04:11,419
If, in contrast, we had omitted
the word "public" here,

79
00:04:11,419 --> 00:04:15,149
by default, the access
would have been private

80
00:04:15,149 --> 00:04:20,503
and could not have been called the
method from in the main().

81
00:04:20,601 --> 00:04:23,470
Its exactly for this reason
why in the last episode,

82
00:04:23,470 --> 00:04:26,265
we said about this example, that its syntax
was not completely correct

83
00:04:26,265 --> 00:04:29,874
because we didn't specify
the access rights,

84
00:04:29,977 --> 00:04:33,449
--everything was private--
so we couldn't have accessed

85
00:04:33,449 --> 00:04:36,080
the data members and methods
from the main function.

86
00:04:36,876 --> 00:04:39,038
Let's now recall some good practice

87
00:04:39,038 --> 00:04:41,344
presented in the earlier episode

88
00:04:41,344 --> 00:04:43,154
about the general principles of OOP.

89
00:04:43,361 --> 00:04:46,121
It's good practice to have as private
all data members

90
00:04:46,121 --> 00:04:50,591
all of the methods that will serve
as internal components

91
00:04:50,591 --> 00:04:53,715
and to have as public

92
00:04:53,715 --> 00:04:56,551
only a few  selected methods,

93
00:04:56,551 --> 00:04:58,438
that constitute the interface.

94
00:04:58,438 --> 00:05:02,298
It is very important to not
have any data member

95
00:05:02,298 --> 00:05:04,133
in the public part.

96
00:05:04,133 --> 00:05:07,987
That being said, you could tell me that,
if all the data members are private,

97
00:05:07,987 --> 00:05:10,406
how will we be able to use them?

98
00:05:10,461 --> 00:05:14,136
For example, if we wanted
to modify the height of my rectangle,

99
00:05:14,136 --> 00:05:17,088
-- this in itself being debatable;
do we really want to change

100
00:05:17,088 --> 00:05:19,311
the height of a rectangle?

101
00:05:19,311 --> 00:05:23,929
but let it be so. --
Or assume that we want to access

102
00:05:23,929 --> 00:05:25,926
the height of the rectangle,
just to know its value.

103
00:05:25,926 --> 00:05:28,622
How can we obtain the values
of the dimensions of the rectangle

104
00:05:28,622 --> 00:05:30,291
if they are private data members,

105
00:05:30,291 --> 00:05:33,320
if we can't access them
outside the class?

106
00:05:33,320 --> 00:05:36,982
I can't do something
like this:

107
00:05:36,982 --> 00:05:42,348
declare a new rectangle and
try to print its height.

108
00:05:43,036 --> 00:05:44,337
This is something that
I cannot do

109
00:05:44,337 --> 00:05:47,584
because the data members were
declared private.

110
00:05:48,525 --> 00:05:50,786
To solve this problem,
we will include in the interface

111
00:05:50,786 --> 00:05:52,561
a few methods necessary to this end
[called setters and getters]

112
00:05:52,561 --> 00:05:56,568
to manipulate the data members
by modifying or consulting them.

113
00:05:56,568 --> 00:06:00,147
So for example a method to
access the "hauteur" data member;

114
00:06:00,147 --> 00:06:04,214
or a method to
modify the width.

115
00:06:04,214 --> 00:06:07,712
For instance, here we
would like a method

116
00:06:07,712 --> 00:06:09,545
that provides the value
of the height

117
00:06:09,545 --> 00:06:11,835
and we would write
something like this:

118
00:06:11,835 --> 00:06:14,781
using a "getHauteur" method.
(TN: means "getHeight").

119
00:06:15,628 --> 00:06:17,827
I would like to insist on

120
00:06:17,827 --> 00:06:19,331
this part of writing a program:

121
00:06:19,331 --> 00:06:22,093
you DON'T have to systematically
include methods

122
00:06:22,093 --> 00:06:24,835
to modify or even to access
the data members of a class,

123
00:06:24,835 --> 00:06:28,649
but you have to decide which
data member can

124
00:06:28,649 --> 00:06:33,119
be modified or accessed

125
00:06:33,119 --> 00:06:34,601
from outside through methods.

126
00:06:34,908 --> 00:06:37,445
The methods that only provide
the value of a data member

127
00:06:37,445 --> 00:06:38,630
are called "accessor methods",
"get methods" or "getters",

128
00:06:38,630 --> 00:06:40,907
while methods that can modify
the value of a data member are

129
00:06:40,907 --> 00:06:43,855
called "mutator methods", "set methods"
 or "setters".

130
00:06:44,088 --> 00:06:47,817
Getters are const functions
because they do not modify members,

131
00:06:47,817 --> 00:06:50,514
and so we put the keyword "const"
after the header.

132
00:06:50,514 --> 00:06:54,081
Getters return the value of
the data member,

133
00:06:54,081 --> 00:06:56,665
so if we want to return
the value of "hauteur",

134
00:06:56,665 --> 00:07:01,579
"hauteur" being of type double,
we will return a value of the same type

135
00:07:01,579 --> 00:07:04,166
with "double getHauteur()".

136
00:07:04,166 --> 00:07:08,004
This method being a const function,
we write const here,

137
00:07:08,004 --> 00:07:10,410
and the method body consists
simply of "return hauteur;".

138
00:07:10,410 --> 00:07:12,830
I remind you that methods have access
to the data members of their class,

139
00:07:12,830 --> 00:07:15,542
so here it is indeed the
height of the current instance.

140
00:07:15,542 --> 00:07:20,262
In the same way, we can declare
an accessor method for the width.

141
00:07:20,262 --> 00:07:25,143
 Setters or mutator methods
have to modify some data member(s),

142
00:07:25,298 --> 00:07:29,950
by changing their value(s),

143
00:07:29,950 --> 00:07:33,284
and are thus "non-const functions".

144
00:07:33,284 --> 00:07:35,019
For the method to set a
value of an instance's data member,

145
00:07:35,019 --> 00:07:37,411
it has to first receive a value,

146
00:07:37,411 --> 00:07:40,431
passed as argument.

147
00:07:40,431 --> 00:07:44,351
So the method receives
the value to set

148
00:07:44,351 --> 00:07:47,428
but does not return anything,

149
00:07:47,428 --> 00:07:48,652
because its purpose is
to set a value and

150
00:07:48,652 --> 00:07:51,479
not to return anything.

151
00:07:51,479 --> 00:07:56,389
So in the present example, in this method
"setHauteur" (TN: means "setHeight"),

152
00:07:56,389 --> 00:07:58,181
value of the parameter "h" is
copied to the "hauteur" data member,

153
00:07:58,181 --> 00:08:03,492
and likewise in "setLargeur", the value of the parameter
"l" is copied to the "largeur" data member.

154
00:08:03,714 --> 00:08:06,521
Let's examine an entire
example

155
00:08:06,521 --> 00:08:09,042
again with the Rectangle class.

156
00:08:09,042 --> 00:08:13,934
In the public interface, we declare
the method "surface",

157
00:08:13,934 --> 00:08:20,946
we declare an accessor method for the
height, which is a const function,

158
00:08:20,946 --> 00:08:24,232
we declare an accessor for the width, too,

159
00:08:24,232 --> 00:08:27,259
and we declare 2 mutators as
on the last slide,

160
00:08:27,259 --> 00:08:31,412
that take as parameters
respectively the value for the height

161
00:08:31,412 --> 00:08:34,646
and the value for the width.

162
00:08:35,109 --> 00:08:39,028
In the private section of the Rectangle class,
that ends here with a semicolon,

163
00:08:39,028 --> 00:08:43,275
we have two data members:
"hauteur" and "largeur".

164
00:08:43,903 --> 00:08:44,855
So how do we
make use of these elements?

165
00:08:44,855 --> 00:08:49,724
In the main(), we declare
an instance "rect1" of the Rectangle class,

166
00:08:49,724 --> 00:08:53,038
and use the method
"setHauteur"

167
00:08:53,038 --> 00:08:58,369
to set the height of
rect1 to 3.0.

168
00:08:58,369 --> 00:09:00,883
So what happens?

169
00:09:00,883 --> 00:09:05,877
With the instance "rect1",

170
00:09:05,877 --> 00:09:11,287
we invoke "setHauteur"
which will set

171
00:09:11,287 --> 00:09:12,816
the height of rect1

172
00:09:13,765 --> 00:09:18,102
to the value 3.0.

173
00:09:18,102 --> 00:09:24,632
Then we invoke the method "setLargeur"
with the value 4.0

174
00:09:24,632 --> 00:09:29,121
which results in the value 4.0
being placed in the width

175
00:09:29,769 --> 00:09:31,553
of rect1.

176
00:09:33,167 --> 00:09:35,509
I insist that it is indeed rect1

177
00:09:35,509 --> 00:09:37,467
whose width is modified.

178
00:09:37,467 --> 00:09:40,798
Then to print the height of rect1,

179
00:09:40,798 --> 00:09:43,674
we would call "getHauteur"

180
00:09:43,674 --> 00:09:49,725
which will return the height,
the height of rect1 of course,

181
00:09:49,725 --> 00:09:54,769
so it will return 3.0.

182
00:09:55,274 --> 00:09:57,497
My students frequently ask:

183
00:09:57,497 --> 00:10:00,145
"Why do we have to take
all these complicated mesures?

184
00:10:00,145 --> 00:10:03,151
Why don't we simply
declare everything as public so that

185
00:10:03,151 --> 00:10:08,148
all these variables can be accessed
without having

186
00:10:08,148 --> 00:10:11,381
all these getters and setters, and
especially

187
00:10:11,381 --> 00:10:16,031
without having to think about which
methods to put in the interface?"

188
00:10:16,031 --> 00:10:20,159
But if we do this, like for example here
with

189
00:10:20,159 --> 00:10:26,109
a label -- be it a name for the rectangle
or some tool needed internally --

190
00:10:26,109 --> 00:10:28,004
in this case we could

191
00:10:28,004 --> 00:10:31,064
declare an instance rect
of the Rectangle class

192
00:10:31,064 --> 00:10:36,219
and promptly write for example
"rec.hauteur = -36",

193
00:10:36,219 --> 00:10:39,573
therefore setting heights that have
not been checked, that are not valid.

194
00:10:39,573 --> 00:10:43,311
There is absolutely no control over
what another programmer

195
00:10:43,311 --> 00:10:46,927
using this class
can or cannot do

196
00:10:46,927 --> 00:10:49,286
on the representations, instances,
of this class.

197
00:10:49,576 --> 00:10:53,232
On the other hand, if we had
obliged the users of this class

198
00:10:53,232 --> 00:10:57,665
to use set and get methods,
such as setHauteur,

199
00:10:57,665 --> 00:11:03,324
we would have had the possibility
to verify the values received

200
00:11:03,324 --> 00:11:08,949
so as to guaranty the validity
of the values. 

201
00:11:09,835 --> 00:11:13,304
So in this case, we could test
the value received,

202
00:11:13,304 --> 00:11:19,728
to see if it is less than or equal
to zero, and if it is,

203
00:11:20,619 --> 00:11:22,257
we would send an error message
(or do whatever appropriate).

204
00:11:25,916 --> 00:11:29,688
While if the value was valid,

205
00:11:29,688 --> 00:11:36,310
we can copy it to the height "hauteur".
This guaranties that

206
00:11:36,310 --> 00:11:39,152
our rectangle always has a height that make sense.

207
00:11:40,685 --> 00:11:41,847
Another reason
setters/getters are important:

208
00:11:41,847 --> 00:11:44,105
here we have access to all the data members,

209
00:11:44,105 --> 00:11:47,279
like this variable "label",

210
00:11:47,279 --> 00:11:50,948
and thus can access to all this
variable's methods,

211
00:11:51,108 --> 00:11:53,819
for example, here the method
"size".

212
00:11:53,819 --> 00:11:58,409
So imagine if you have writen 300 lines
of code like this,

213
00:11:58,409 --> 00:12:00,747
that use this "label" (and its methods),

214
00:12:00,747 --> 00:12:03,964
and that one day, the programmer
of the Rectangle class decides

215
00:12:03,964 --> 00:12:07,704
to change this label; then you
have to throw  your 300 lines of code away,

216
00:12:07,704 --> 00:12:09,229
and write some new.

217
00:12:09,615 --> 00:12:12,810
On the other hand, if you had
limited yourself to using the interface,

218
00:12:12,810 --> 00:12:15,918
which was specified beforehand,
and which shouldn't be changed,

219
00:12:15,918 --> 00:12:20,089
if you use this interface externally,

220
00:12:20,221 --> 00:12:23,679
and the class programmer decides
to change this label data member,

221
00:12:23,679 --> 00:12:26,488
he is the one who will have to recode his class,

222
00:12:26,488 --> 00:12:30,846
while you don't need to change anything because
you only used the interface,

223
00:12:30,846 --> 00:12:35,330
and continue using the

224
00:12:35,330 --> 00:12:37,034
code you had written.

225
00:12:37,454 --> 00:12:40,333
These notions in OOP of [interface] constraints,

226
00:12:40,333 --> 00:12:41,908
of encapsulation,
of abstraction,

227
00:12:41,908 --> 00:12:43,364
of interface restrictions,

228
00:12:43,364 --> 00:12:46,121
make really sense when
writing large programs,

229
00:12:46,121 --> 00:12:48,274
where several people are sharing
the code.

230
00:12:48,274 --> 00:12:50,685
It is actually in this context that
OOP was invented,

231
00:12:50,685 --> 00:12:53,167
developed, and put in place.

232
00:12:53,167 --> 00:12:55,454
OOP is the basis of
good programs that can

233
00:12:55,454 --> 00:12:58,654
evolve, develop, and mature

234
00:12:58,654 --> 00:13:00,748
thanks to their modularity.

235
00:13:00,748 --> 00:13:03,628
So even if you think now that
it is fastidious to do this

236
00:13:03,628 --> 00:13:05,659
for the small programs

237
00:13:05,659 --> 00:13:07,106
seen in the exercises,

238
00:13:07,106 --> 00:13:10,881
think of this practice as the foundation
for more complicated programming

239
00:13:10,881 --> 00:13:12,800
and good programming.

240
00:13:13,450 --> 00:13:15,609
Let's end this episode on
a technical detail

241
00:13:15,609 --> 00:13:18,812
that raises questions from
students,

242
00:13:18,812 --> 00:13:21,607
and that comes from what is
called "name masking"

243
00:13:21,607 --> 00:13:26,128
Masking occurs when an identifier, a name,
"is hidden by" another name.

244
00:13:26,634 --> 00:13:29,534
We saw this in the first course

245
00:13:29,534 --> 00:13:31,418
"Introduction to programming",

246
00:13:31,418 --> 00:13:35,177
with the masking of a variable "i"

247
00:13:35,177 --> 00:13:39,049
by a local variable "i".

248
00:13:39,049 --> 00:13:43,169
Remember that the scope
of the local variable is

249
00:13:43,169 --> 00:13:46,672
the "for" loop,
and so the the scope of this "i",

250
00:13:46,672 --> 00:13:48,407
is the "for" loop,

251
00:13:48,407 --> 00:13:51,123
and so the "i" here is indeed
the "i" of the "for"

252
00:13:51,123 --> 00:13:56,993
that masks the blue "i" that still exists,
but is hidden or masked in the red section,

253
00:13:56,993 --> 00:14:01,417
Here it is certainly the blue "i"
that is masked

254
00:14:01,417 --> 00:14:05,754
in the "for" loop, masked by
this "i".

255
00:14:05,957 --> 00:14:09,387
The same thing happens
when declaring methods,

256
00:14:09,387 --> 00:14:11,761
for example, suppose that we
declared a method "setHauteur"

257
00:14:14,135 --> 00:14:16,509
that receives a value for the height

258
00:14:16,509 --> 00:14:19,221
and so we choose a
name that indicates

259
00:14:19,221 --> 00:14:20,811
that it is the value for the height.

260
00:14:20,811 --> 00:14:23,628
And so we declare
"hauteur" as

261
00:14:23,628 --> 00:14:24,978
the name of the parameter.

262
00:14:24,978 --> 00:14:27,886
How do we then write
the method's body?

263
00:14:30,794 --> 00:14:33,703
We would write "hauteur", the height of the
rectangle is indeed the data member "hauteur",

264
00:14:33,703 --> 00:14:39,021
equals, and here "hauteur" the parameter,

265
00:14:39,021 --> 00:14:41,828
so this height here is what
is received as parameter.

266
00:14:41,828 --> 00:14:44,432
The problem with writing it
this way,

267
00:14:44,432 --> 00:14:47,959
is that the name "hauteur" ambiguously
refers to two different things:

268
00:14:48,067 --> 00:14:50,266
the data member,

269
00:14:50,266 --> 00:14:53,943
as well as the parameter.

270
00:14:54,375 --> 00:14:58,547
Not so great for the compiler that
will scold you with


271
00:14:58,547 --> 00:14:59,841
an error message saying

272
00:14:59,841 --> 00:15:01,926
it doesn't understand what you wrote.

273
00:15:02,737 --> 00:15:04,914
In this case, we can

274
00:15:04,914 --> 00:15:07,312
simply change
the name of the variable,

275
00:15:07,312 --> 00:15:10,826
so as to not have two
identical names anymore,

276
00:15:10,826 --> 00:15:13,284
as we did on a previous slide.

277
00:15:13,284 --> 00:15:17,427
Or we can clarify by specifiying

278
00:15:17,427 --> 00:15:20,751
which "hauteur" we want

279
00:15:20,751 --> 00:15:24,238
with a special feature called
"the pointer this".

280
00:15:24,238 --> 00:15:27,506
The keyword "this" stands for a pointeur that
points to the current instance.

281
00:15:27,815 --> 00:15:30,758
So "this" means we are referring to
the current instance

282
00:15:30,758 --> 00:15:32,706
which roughly means "my address".

283
00:15:32,948 --> 00:15:40,540
For example, for a Rectangle r1,
in a method f of r1,

284
00:15:40,540 --> 00:15:44,422
in such a method, "this" represents
the address of r1.

285
00:15:44,989 --> 00:15:47,985
If we invoked on another
instance r2,

286
00:15:47,985 --> 00:15:53,259
"this", this time, would mean

287
00:15:53,259 --> 00:15:55,271
the address of r2.

288
00:15:55,702 --> 00:15:58,718
So  in a method, "this" points to

289
00:15:58,718 --> 00:16:00,717
the address of the current instance.

290
00:16:00,861 --> 00:16:02,714
For example, we could write this:

291
00:16:02,714 --> 00:16:05,960
"this->hauteur" ("this", arrow, "hauteur")

292
00:16:05,960 --> 00:16:08,760
Let me say, because it is our first
encounter with this symbol

293
00:16:08,760 --> 00:16:12,927
that the syntax "arrow"
like this: "A->B"

294
00:16:12,927 --> 00:16:17,054
simply means  "(*A).B"
(asterisk A, dot B)

295
00:16:17,054 --> 00:16:21,278
If A is a pointer, then *A is
the object pointed to

296
00:16:21,278 --> 00:16:25,849
and we take the field B of the
object pointed to by A.

297
00:16:25,849 --> 00:16:29,511
This is a bit technical, and is
not very important.

298
00:16:29,511 --> 00:16:34,193
Just remember this syntax and that if
we have a pointer "this",

299
00:16:34,193 --> 00:16:39,653
"this->" allows us to access
the methods and data members

300
00:16:39,653 --> 00:16:43,022
of the object pointed to by "this".
Since "this" is "my address",

301
00:16:43,022 --> 00:16:44,793
that means "my data members".

302
00:16:45,296 --> 00:16:49,314
Here this->hauteur, refers indeed
to the height of the current instance,

303
00:16:49,314 --> 00:16:54,197
which allows me to keep the name
"hauteur"

304
00:16:54,197 --> 00:16:57,811
for the parameter.

305
00:16:59,107 --> 00:17:02,592
It is absolutely neccessary
to use the keyword "this"

306
00:17:02,592 --> 00:17:04,134
in the case of masking.

307
00:17:04,134 --> 00:17:07,690
That being said, I reccommend that you
avoid masking

308
00:17:07,690 --> 00:17:12,715
by having different names

309
00:17:12,715 --> 00:17:15,425
for the data members and the
parameters

310
00:17:15,442 --> 00:17:17,984
that would be needed.

311
00:17:19,512 --> 00:17:22,183
To conclude this lesson, let's
summarize what we have learned

312
00:17:22,183 --> 00:17:26,454
about access rights and the scope
of members of a class.

313
00:17:26,454 --> 00:17:29,461
For access rights, there are
2 keywords:

314
00:17:29,461 --> 00:17:31,240
"private" and "public"

315
00:17:31,240 --> 00:17:34,960
that apply to the
lines that follow them,

316
00:17:34,960 --> 00:17:39,121
"private" for what is in
the hidden part of the program,

317
00:17:39,121 --> 00:17:41,937
that is, all the members

318
00:17:41,937 --> 00:17:44,076
accessible only from within the
class itself,

319
00:17:44,076 --> 00:17:48,310
and "public" for the members
that we want to have accessible

320
00:17:48,310 --> 00:17:52,239
from anywhere in the code, in the main()
or in another class.

321
00:17:52,239 --> 00:17:57,085
And, if we declare the data
members x and y here private, they

322
00:17:57,191 --> 00:18:00,728
are accessible anywhere
in the class, particularly in the methods,

323
00:18:00,728 --> 00:18:06,142
so for example, supposing that
we haven't declared any other "y"s,

324
00:18:06,142 --> 00:18:10,275
"y" refers to the current instance.

325
00:18:10,275 --> 00:18:13,098
In contrast, masking
can occur

326
00:18:13,098 --> 00:18:16,373
typically if we declare a variable
like this,

327
00:18:16,373 --> 00:18:19,479
a parameter of a method, which,
because of

328
00:18:19,479 --> 00:18:22,423
the rules of scope resolution
seen before,

329
00:18:22,423 --> 00:18:24,846
will result in

330
00:18:24,846 --> 00:18:28,282
this name resolving to the
nearest scope:

331
00:18:28,282 --> 00:18:30,527
the parameter,

332
00:18:30,527 --> 00:18:36,098
and if we want to access
the data member x here, then

333
00:18:36,098 --> 00:18:39,246
we would have to "unmask"
this name

334
00:18:39,246 --> 00:18:43,328
by adding the pointer "this"
to access x.

335
00:18:44,104 --> 00:18:47,334
That said, I reccommend NOT to use
this way of writing code,

336
00:18:47,334 --> 00:18:50,280
to not use "this" pointer

337
00:18:50,280 --> 00:18:53,626
but to rather make use of different names

338
00:18:53,626 --> 00:18:58,479
to differentiate between the data
members and the parameters of your methods.
