1
00:00:04,372 --> 00:00:05,771
Today we will consider together

2
00:00:06,078 --> 00:00:08,476
un important block
of this programming course:

3
00:00:08,843 --> 00:00:10,644
Object-oriented programming or OOP.

4
00:00:10,945 --> 00:00:13,147
OOP is a programming paradigm 
or a certain style of programming

5
00:00:13,414 --> 00:00:15,728
that is used in several programming 
languages besides C++

6
00:00:15,916 --> 00:00:18,385
and will give a certain number

7
00:00:18,571 --> 00:00:20,317
of useful proprieties to
your programs

8
00:00:20,317 --> 00:00:21,684
in terms of maintenance and modularity.

9
00:00:22,523 --> 00:00:24,758
At this stage of the course,
you should know

10
00:00:24,925 --> 00:00:26,527
the basic fundamental aspects

11
00:00:26,660 --> 00:00:28,229
of programming.

12
00:00:28,495 --> 00:00:30,264
For example, you know how to 
express treatments

13
00:00:30,565 --> 00:00:32,333
using control structures,

14
00:00:32,566 --> 00:00:33,901
such as conditional loops.

15
00:00:34,168 --> 00:00:36,916
You also know how to structure data

16
00:00:36,916 --> 00:00:38,653
using arrays for example,

17
00:00:38,653 --> 00:00:41,175
and, most importantly, you know
how to modularize your programs

18
00:00:41,235 --> 00:00:44,007
using the central notion
of functions.

19
00:00:44,211 --> 00:00:45,947
These basic tools
allow you to code in a

20
00:00:46,114 --> 00:00:47,648
a certain style of programming

21
00:00:47,782 --> 00:00:50,286
called procedural or imperative
programming.

22
00:00:50,419 --> 00:00:52,583
This paradigm has the singularity that

23
00:00:52,720 --> 00:00:54,922
data and functions
appear separately

24
00:00:54,959 --> 00:00:56,190
in a program

25
00:00:56,190 --> 00:00:57,791
Of course, the two interact,

26
00:00:58,025 --> 00:00:59,928
the functions work
on the data,

27
00:01:00,194 --> 00:01:02,130
which influence in turn the execution of functions.

28
00:01:02,397 --> 00:01:05,166
But the two entities appear
separately.

29
00:01:05,600 --> 00:01:07,935
For example, as we will see
in a few minutes,

30
00:01:07,975 --> 00:01:09,180
in a concrete example,

31
00:01:09,180 --> 00:01:11,972
processes can be
represented by functions.

32
00:01:13,173 --> 00:01:15,690
Data and functions can be linked

33
00:01:15,909 --> 00:01:18,104
by the passing of arguments.

34
00:01:19,581 --> 00:01:23,401
Data are manipulated via distinct entities,

35
00:01:23,584 --> 00:01:25,626
such as variables.

36
00:01:26,354 --> 00:01:28,923
One of the fundamental particularities
of OOP

37
00:01:29,156 --> 00:01:33,336
is the possibility to bundle
together functions and data

38
00:01:33,856 --> 00:01:36,043
into one same unit.

39
00:01:36,731 --> 00:01:38,245
Let's consider a concrete example.

40
00:01:38,398 --> 00:01:39,923
Imagine that we would
like to write

41
00:01:40,098 --> 00:01:42,694
a simple C++ program that
calculates the area of a rectangle.

42
00:01:43,070 --> 00:01:45,615
The rectangle is defined by
its width and height.

43
00:01:45,973 --> 00:01:48,375
And so I want to calculate
the surface.

44
00:01:48,976 --> 00:01:52,212
In procedural programming, I would likely
proceed in this manner:

45
00:01:52,408 --> 00:01:55,007
I start by declaring a variable "largeur"
(TN: "largeur" means "width")

46
00:01:55,249 --> 00:01:57,361
that represents the width of the rectangle,

47
00:01:57,785 --> 00:01:59,286
and that I would initialize
at a certain value.

48
00:01:59,620 --> 00:02:01,922
I would do the same for the height.

49
00:02:02,591 --> 00:02:05,359
Next, the area would be
calculated by

50
00:02:05,859 --> 00:02:09,732
passing the width and height
as parameters to a function "surface"

51
00:02:12,066 --> 00:02:14,355
(TN: "surface" means "area") that 
would do the appropriate calculation.

52
00:02:15,300 --> 00:02:18,219
So we can see clearly in this example,
that in such a program,

53
00:02:18,259 --> 00:02:21,199
the data and the functions
appear separated.

54
00:02:21,676 --> 00:02:24,879
The variables allow me to
modelize and stock

55
00:02:25,113 --> 00:02:26,647
the data that will be needed.

56
00:02:26,848 --> 00:02:29,717
And the data is processed
with functions.

57
00:02:30,017 --> 00:02:32,920
The data and the functions
are not directly linked.

58
00:02:33,420 --> 00:02:38,830
In this case they are only linked by
the passing of arguments.

59
00:02:39,743 --> 00:02:41,976
So one important objection
that we could make,

60
00:02:42,130 --> 00:02:43,397
concerning this kind of program,

61
00:02:43,630 --> 00:02:46,561
is the lack of a semantic link
between the two entities.

62
00:02:46,834 --> 00:02:50,643
For example, the semantic link
between the width and height.

63
00:02:51,005 --> 00:02:53,742
The fact that we are manipulating the with and height
of a rectangle

64
00:02:53,742 --> 00:02:55,410
is hard to determine.

65
00:02:55,643 --> 00:02:57,744
For example, imagine
that I am not francophone.

66
00:02:58,079 --> 00:03:01,612
So for me, the names "largeur" and "hauteur"
do not tell me anything.

67
00:03:02,116 --> 00:03:04,951
And so it is hard for me to see
that the two names

68
00:03:05,152 --> 00:03:07,493
are linked to the same concept :
a rectangle.

69
00:03:08,276 --> 00:03:10,865
The semantic link that connects the
data in this case,

70
00:03:10,865 --> 00:03:12,025
is not clear.

71
00:03:12,237 --> 00:03:14,798
It's the same for linking the data
and the functions

72
00:03:14,829 --> 00:03:16,230
that go together.

73
00:03:16,431 --> 00:03:18,240
Imagine that you are a bit careless

74
00:03:18,332 --> 00:03:20,039
when you choose the identifiers.

75
00:03:20,267 --> 00:03:22,819
And that, for example, you call this function
"produit" (TN: "produit" means "product").

76
00:03:24,305 --> 00:03:26,616
And that for the arguments,

77
00:03:27,141 --> 00:03:29,171
you give them even less
explicit names.

78
00:03:29,277 --> 00:03:32,231
As a result, it is difficult for
for anyone else who reads the code

79
00:03:32,347 --> 00:03:35,154
to see that, in fact, we are calculating

80
00:03:35,194 --> 00:03:37,644
the area of a rectangle.

81
00:03:37,672 --> 00:03:39,687
However, the link does exist conceptually.

82
00:03:39,920 --> 00:03:42,772
In this case you are indeed 
manipulating

83
00:03:44,291 --> 00:03:46,029
the width and height 
of a rectangle.

84
00:03:46,393 --> 00:03:48,229
And it is indeed the
area of a rectangle

85
00:03:52,567 --> 00:03:54,068
that you are calculating.

86
00:03:54,502 --> 00:03:57,629
So the fact of consolidating into
one unit, a rectangle,

87
00:03:57,938 --> 00:03:59,597
the characteristics of the rectangle,

88
00:04:00,732 --> 00:04:02,712
such as its width and height ,

89
00:04:03,125 --> 00:04:05,682
as well as the functions
associated with it,

90
00:04:06,314 --> 00:04:09,974
will allow me to establish

91
00:04:10,084 --> 00:04:13,854
an explicit link between these
different entities,

92
00:04:14,188 --> 00:04:16,557
and result in a much more structured 
comprehensible program

93
00:04:16,890 --> 00:04:20,979
This one of the fundamental 
aspects of OOP.

94
00:04:21,329 --> 00:04:23,097
What you should know

95
00:04:23,298 --> 00:04:25,848
is that OOP enables a set of

96
00:04:26,100 --> 00:04:29,430
new functionalities, 
globally giving more

97
00:04:29,430 --> 00:04:30,872
robustness,

98
00:04:31,639 --> 00:04:33,040
modularity,

99
00:04:34,742 --> 00:04:37,378
and readability to your programs.

100
00:04:38,479 --> 00:04:41,635
All this allows for a better
maintainability

101
00:04:43,717 --> 00:04:45,924
and robustness with regard to modifying 
the program.

102
00:04:46,644 --> 00:04:48,614
If one day your program needs to be

103
00:04:48,975 --> 00:04:52,030
reused, we would not want to have
to rewrite the whole code

104
00:04:52,660 --> 00:04:55,907
for example because of errors in the 
manipulation of data.

105
00:04:57,431 --> 00:05:01,738
Indeed, today most applications

106
00:05:01,802 --> 00:05:03,204
are never developed from zero,

107
00:05:03,471 --> 00:05:06,556
but consist of adding onto or 
maintaining existing code.

108
00:05:06,874 --> 00:05:09,210
And it is important to be able
to do this at the lowest cost.

109
00:05:09,477 --> 00:05:11,979
We will see that the fundamental
proprieties of OOP,

110
00:05:12,246 --> 00:05:16,015
that is, more robustness,
modularity, and readability

111
00:05:16,317 --> 00:05:17,951
go exactly in this direction.

112
00:05:18,419 --> 00:05:23,347
OOP offers, 
in fact, four principal concepts:

113
00:05:23,347 --> 00:05:26,522
encapsulation, abstraction,
inheritance, and polymorphism

114
00:05:26,752 --> 00:05:29,126
that allow for better
organisation of programs

115
00:05:29,330 --> 00:05:31,378
in regards to robustness,
readability,

116
00:05:31,378 --> 00:05:33,426
modularity, and maintainability,

117
00:05:33,426 --> 00:05:34,936
as I mentioned before.

118
00:05:35,436 --> 00:05:38,459
These central concepts are not exclusive
 to one programming language,

119
00:05:38,606 --> 00:05:41,602
but are central concepts of object-
oriented languages in general.

120
00:05:41,809 --> 00:05:43,970
In this episode,
we will

121
00:05:44,311 --> 00:05:47,497
consider defining
encapsulation and abstraction.

122
00:05:48,315 --> 00:05:50,044
We will examine in
the next episodes,

123
00:05:50,218 --> 00:05:52,848
the fundamental notions of 
inheritance and polymorphism.

124
00:05:53,654 --> 00:05:56,114
Let's start with the concept of 
encapsulation.

125
00:05:56,357 --> 00:05:59,046
Encapsulation is consolidating

126
00:05:59,130 --> 00:06:01,025
into one unit

127
00:06:02,864 --> 00:06:06,818
the data and the functions that 
that work on the data.

128
00:06:07,235 --> 00:06:09,446
Typically, as in the example 
of the rectangle,

129
00:06:09,446 --> 00:06:12,415
we will regroup into one
unique entity,

130
00:06:12,415 --> 00:06:16,512
the width and height that characterize
the virtual rectangle

131
00:06:16,977 --> 00:06:21,124
and the function that
calculates its area.

132
00:06:21,783 --> 00:06:24,385
In jargon, we will speak of


133
00:06:24,585 --> 00:06:26,053
the data as member variables,
or data members

134
00:06:27,921 --> 00:06:29,955
and the functions as

135
00:06:29,955 --> 00:06:31,592
methods (a.k.a. "member functions").

136
00:06:33,594 --> 00:06:35,429
So in OOP,

137
00:06:35,730 --> 00:06:39,139
we will be able to define new
data types,

138
00:06:39,433 --> 00:06:41,069
with,
as we will see later on,

139
00:06:41,336 --> 00:06:42,770
the concept of classes,

140
00:06:43,037 --> 00:06:46,175
These data types can be
used to work with data

141
00:06:47,475 --> 00:06:50,444
whose types are more
abstract,

142
00:06:53,048 --> 00:06:54,975
such as the type rectangle.

143
00:06:56,316 --> 00:06:58,726
These data will be objects that will

144
00:06:58,986 --> 00:07:01,055
cohabit and interact in 
the program.

145
00:07:01,286 --> 00:07:02,964
An object-oriented program
will typically work with

146
00:07:03,091 --> 00:07:08,021
objects that are characterized by
their members:

147
00:07:09,363 --> 00:07:10,610
their member variables and methods.

148
00:07:10,931 --> 00:07:13,723
Let's examine now 
the concept of abstraction.

149
00:07:13,723 --> 00:07:15,636
Let's say I want to write 
a program that manipulates

150
00:07:15,870 --> 00:07:17,772
several rectangles instead
of just one.

151
00:07:18,105 --> 00:07:22,183
In a procedural approach,

152
00:07:22,183 --> 00:07:24,778
I would typically have to declare

153
00:07:25,446 --> 00:07:30,339
as many widths and heights
as I have rectangles.

154
00:07:30,785 --> 00:07:33,649
Which I do here for the first rectangle.

155
00:07:33,888 --> 00:07:36,457
And I would have to do
exactly the same thing

156
00:07:36,791 --> 00:07:38,492
for the second rectangle.

157
00:07:46,200 --> 00:07:48,195
This is rather tedious!

158
00:07:48,535 --> 00:07:51,939
If I would like to now calculate the
area of these two rectangles,

159
00:07:52,273 --> 00:07:54,642
I would have to call
the function "surface"

160
00:07:54,909 --> 00:07:56,902
and provide, as parameters,

161
00:07:57,044 --> 00:07:59,451
the width and the height

162
00:07:59,680 --> 00:08:00,883
of each of the rectangles

163
00:08:04,119 --> 00:08:06,830
I call the function "surface"
("surface" means "area")

164
00:08:08,856 --> 00:08:10,821
passing each time the correct arguments.

165
00:08:11,371 --> 00:08:13,582
So you have to be careful, 
as this can be a source of error.

166
00:08:13,664 --> 00:08:15,777
Imagine for example,
that I enter the arguments wrongly.

167
00:08:15,777 --> 00:08:18,304
If instead of passing as argument 
for the first call of "surface"

168
00:08:18,398 --> 00:08:20,489
"hauteur1", I enter "hauteur2",
("hauteur" means "height")

169
00:08:20,668 --> 00:08:21,987
My data aren't coherent,

170
00:08:22,203 --> 00:08:25,349
I am not working with the 
same rectangle anymore.

171
00:08:26,374 --> 00:08:29,184
The encapsulation process 
results in that

172
00:08:29,343 --> 00:08:32,652
I manipulate higher-level
data,

173
00:08:34,481 --> 00:08:36,918
the notion of rectangle,

174
00:08:37,285 --> 00:08:40,739
to which I associate a 
generic description.

175
00:08:40,739 --> 00:08:42,990
In our case, any rectangle can be

176
00:08:42,990 --> 00:08:44,591
described by its width and height

177
00:08:44,825 --> 00:08:47,027
which can be linked to 
a same calculation of the area.

178
00:08:47,795 --> 00:08:51,682
As a result, I can work with the 
more abstract notion of a rectangle,

179
00:08:52,343 --> 00:08:56,049
instead of working at an
intimate scale

180
00:08:56,285 --> 00:08:58,065
on the representation of rectangles,

181
00:08:58,065 --> 00:09:00,535
which allows us to concentrate 
the essential aspects

182
00:09:00,535 --> 00:09:02,474
and hide the details.

183
00:09:02,474 --> 00:09:05,488
Encapsulation allows you to consolidate

184
00:09:05,851 --> 00:09:08,772
into one same entity,
the data,

185
00:09:08,772 --> 00:09:12,723
such as the width and height,

186
00:09:12,723 --> 00:09:14,615
and the functions,
such as the calculation of the area.

187
00:09:14,867 --> 00:09:18,865
It is  the tool that allows me having a more abstract vision

188
00:09:18,959 --> 00:09:20,923
of the data that I manipulate.

189
00:09:22,163 --> 00:09:25,566
As a result,  I will be able to 
work with

190
00:09:25,800 --> 00:09:28,460
more abstract entities,

191
00:09:28,769 --> 00:09:30,571
a first rectangle,

192
00:09:30,838 --> 00:09:32,039
 and a second rectangle,

193
00:09:32,239 --> 00:09:34,174
both of them are of type Rectangle.

194
00:09:34,438 --> 00:09:37,547
And I will invoke calculations of area on 
these rectangles.

195
00:09:37,612 --> 00:09:40,148
We will see that in object-oriented,
I anticipate a little,

196
00:09:40,715 --> 00:09:44,714
I calculate here the area of the 
first rectangle.

197
00:09:46,320 --> 00:09:49,841
Later on we will see all this 
in more detail.

198
00:09:50,090 --> 00:09:55,496
As a result, my program will focus on 
the important elements.

199
00:09:57,099 --> 00:09:59,325
Therefore I am no longer
preoccupied with the fact

200
00:09:59,719 --> 00:10:02,403
that a rectangle has 
a width and a height,

201
00:10:02,636 --> 00:10:04,438
but I can concentrate on
the essential aspects:

202
00:10:04,638 --> 00:10:08,665
the fact of working with a rectangle, 
and calculating the area of this rectangle.

203
00:10:09,043 --> 00:10:12,655
So when I use a rectangle,
I can only see

204
00:10:12,695 --> 00:10:14,641
what we call in object-oriented 
jargon,

205
00:10:14,641 --> 00:10:16,181
its user interface.

206
00:10:16,181 --> 00:10:18,099
That is to say, the functions 
that can be used to

207
00:10:18,099 --> 00:10:21,716
manipulate the rectangle, like in 
our case, the calculation of the area.

208
00:10:22,370 --> 00:10:25,058
Let us compare this 
with an everyday situation.

209
00:10:25,193 --> 00:10:26,738
When you drive your car,

210
00:10:26,925 --> 00:10:29,528
you normally only need to know
the user interface.

211
00:10:30,172 --> 00:10:34,472
You need to know the 
steering wheel, the throttle,

212
00:10:34,668 --> 00:10:38,049
the brake pedal,
but you never need to know

213
00:10:38,469 --> 00:10:42,180
how the motor was built.

214
00:10:43,311 --> 00:10:44,731
To drive your car,

215
00:10:44,731 --> 00:10:47,863
you only need to know the 
user interface.

216
00:10:48,015 --> 00:10:50,559
This applies to OOP as well.

217
00:10:50,918 --> 00:10:53,110
To use a new type of object,
a new class,

218
00:10:53,487 --> 00:10:56,698
you only need to know 
the user interface,

219
00:10:57,191 --> 00:10:58,860
that is provided by 
the programmer of the class.

220
00:10:59,227 --> 00:11:01,329
The rest is internal 
implementation details

221
00:11:01,495 --> 00:11:02,963
that you do not need to know.

222
00:11:03,697 --> 00:11:06,800
So you can look at the object
from 2 perspectives:

223
00:11:07,234 --> 00:11:10,664
from an external level, 
which is useful for the programmer-user,

224
00:11:10,804 --> 00:11:13,008
which uses the notion of rectangle.

225
00:11:15,910 --> 00:11:18,774
From now in a program the type Rectangle exists.

226
00:11:19,046 --> 00:11:21,059
I can declare variables of type Rectangle,

227
00:11:21,059 --> 00:11:23,027
initialize them appropriately.

228
00:11:23,478 --> 00:11:26,625
Next, the elements which interests me 
as a programmer-user,

229
00:11:27,061 --> 00:11:29,928
are the useful functions that come
with the class: the calculation of area.

230
00:11:31,459 --> 00:11:37,038
So this external view is the perspective
that interests the programmer-user,

231
00:11:37,395 --> 00:11:39,469
the programmer who uses the 
type Rectangle.

232
00:11:41,268 --> 00:11:45,922
The second level is the internal level.
The programmer of the new type,

233
00:11:46,139 --> 00:11:47,342
the Rectangle type,

234
00:11:48,701 --> 00:11:51,283
had to deal with all 
the details of implementation.

235
00:11:51,779 --> 00:11:55,072
That is, that a rectangle
has a length and width.

236
00:11:55,182 --> 00:11:59,887
He had to define explicitly 
how the area is calculated.

237
00:12:01,423 --> 00:12:04,331
This constitutes the 
implementation

238
00:12:04,813 --> 00:12:07,104
at an internal level,
which not necessarily useful

239
00:12:07,261 --> 00:12:09,935
to the user who manipulates 
the rectangle.

240
00:12:11,465 --> 00:12:13,829
So in object-oriented programming,

241
00:12:13,839 --> 00:12:15,747
we do not only have the possibility 
to regroup

242
00:12:15,769 --> 00:12:19,160
into one same entity the 
data and functions,

243
00:12:19,407 --> 00:12:22,930
but we can also define 
levels of visibility.

244
00:12:23,111 --> 00:12:25,850
The person who programs 
the new type Rectangle,

245
00:12:25,850 --> 00:12:28,589
specifically a class Rectangle,

246
00:12:28,589 --> 00:12:31,899
will be able to say : 
" This implementation

247
00:12:31,899 --> 00:12:35,095
will not be accessible to 
external users."

248
00:12:35,992 --> 00:12:41,111
and "This is a function that we want to 
provide for the external user

249
00:12:41,395 --> 00:12:44,140
and therefore will be accessible 
to this user."

250
00:12:44,765 --> 00:12:48,719
Everything accessible to the user and, 
therefore, visible

251
00:12:50,972 --> 00:12:54,098
constitutes what is called 
the user interface

252
00:12:54,175 --> 00:12:56,310
of the class of the type in question.

253
00:12:56,544 --> 00:13:01,712
Here, in our class Rectangle, 
for the new type Rectangle

254
00:13:02,019 --> 00:13:04,273
we have defined 
as user interface

255
00:13:04,585 --> 00:13:05,920
the calculation of the surface.

256
00:13:06,187 --> 00:13:09,223
The rest constitutes the 
implementation details

257
00:13:09,423 --> 00:13:12,850
that are not accessible to the programmer 
who uses the type rectangle.

258
00:13:14,295 --> 00:13:16,175
And we have here an important key 

259
00:13:16,430 --> 00:13:19,234
to achieving a more robust program

260
00:13:19,266 --> 00:13:21,102
when faced with the difficulties 
of changes made to the program.

261
00:13:21,402 --> 00:13:23,404
Usually, when you change car

262
00:13:23,737 --> 00:13:26,083
even if the motor technology is different,

263
00:13:26,107 --> 00:13:28,075
the interface is more or less the same.

264
00:13:28,275 --> 00:13:30,778
You will still be able to drive,

265
00:13:31,079 --> 00:13:33,647
even if the internal details of
implementation of your car

266
00:13:33,881 --> 00:13:35,482
have changed.

267
00:13:36,417 --> 00:13:39,779
So you only see your car as an abstract object.

268
00:13:40,020 --> 00:13:42,283
You only see that

269
00:13:42,283 --> 00:13:44,435
which you use to drive,

270
00:13:44,435 --> 00:13:46,761
namely, the steering wheel, 
the throttle, the brake peddle.

271
00:13:47,128 --> 00:13:50,611
In summary, encapsulation, is consolidating 
into one same entity

272
00:13:50,831 --> 00:13:53,197
the data and functions that 
characterize it.

273
00:13:53,434 --> 00:13:56,120
And it is also concealing the 
implementation details.

274
00:13:56,403 --> 00:14:00,181
The user interface 
that we define using 

275
00:14:01,376 --> 00:14:02,985
the encapsulation tool,

276
00:14:04,612 --> 00:14:07,180
is what allows me to 
end up with

277
00:14:07,481 --> 00:14:10,171
an abstraction, or a abstract 
vision of the objects.

278
00:14:10,284 --> 00:14:12,357
As an external user,

279
00:14:12,487 --> 00:14:14,722
only see them as objects that 
I can manipulate

280
00:14:14,988 --> 00:14:17,191
through the user interface.

281
00:14:17,926 --> 00:14:20,151
So concretely the class programmer

282
00:14:21,796 --> 00:14:24,400
will decide on the existence of a new type,

283
00:14:25,099 --> 00:14:28,872
and will have to address 
the implementation details.

284
00:14:33,307 --> 00:14:39,539
He will have to decide what is visible 
to the outside world,

285
00:14:39,539 --> 00:14:41,849
what can and cannot 
be used.

286
00:14:44,451 --> 00:14:47,947
The class user, 
on his side, uses

287
00:14:48,255 --> 00:14:52,627
the new data type.

288
00:14:56,330 --> 00:14:59,737
But he will have to use it 
through the interface.

289
00:15:00,100 --> 00:15:04,471
That is to say, the visible methods 
in most cases.

290
00:15:05,607 --> 00:15:07,608
He will not have access to the 
internal details.

291
00:15:08,396 --> 00:15:12,548
The user interface is typically, 
that which will enable

292
00:15:12,913 --> 00:15:16,296
a link to be established between 
the program developer and the user.

293
00:15:17,351 --> 00:15:18,569
And in a very specific way

294
00:15:18,569 --> 00:15:21,855
this interface will be able to 
be completely described by the signatures

295
00:15:22,357 --> 00:15:26,288
of the methods available to the 
user.

296
00:15:27,295 --> 00:15:29,764
So one of the principal advantages 
of OOP

297
00:15:30,131 --> 00:15:33,133
is the better visibility and coherence 
of the program.

298
00:15:33,634 --> 00:15:35,169
You have here

299
00:15:35,369 --> 00:15:37,591
two programs that do roughly 
the same task,

300
00:15:37,939 --> 00:15:40,375
calculating the area of a rectangle

301
00:15:40,575 --> 00:15:42,412
with a width of 3 and a height of 4.

302
00:15:42,643 --> 00:15:46,381
We are anticipating on
the next episodes.

303
00:15:46,614 --> 00:15:50,107
Namely that we can initialize the 
width and height of a rectangle

304
00:15:50,107 --> 00:15:51,452
with this syntax.

305
00:15:51,652 --> 00:15:53,354
But it is more to give you 
an idea of 

306
00:15:53,588 --> 00:15:55,230
what the program will be

307
00:15:55,230 --> 00:15:56,757
in terms of readability.

308
00:15:56,991 --> 00:15:58,459
If we compare the two approaches,

309
00:15:58,659 --> 00:16:01,109
we realize that here
we are working 

310
00:16:01,109 --> 00:16:03,005
with very low-level data.

311
00:16:03,597 --> 00:16:04,798
Here we are working with a rectangle,

312
00:16:04,965 --> 00:16:06,467
which is much more informative,

313
00:16:06,700 --> 00:16:08,168
regarding the purpose of the program.

314
00:16:08,435 --> 00:16:09,870
By reading this program, we know 
right away

315
00:16:10,070 --> 00:16:11,506
that we are working with a rectangle.

316
00:16:11,772 --> 00:16:14,537
Here the link between the 
data and the functions

317
00:16:15,142 --> 00:16:16,920
is only through the passing 
of arguments.

318
00:16:16,920 --> 00:16:18,012
Which is indirect.

319
00:16:18,179 --> 00:16:20,648
Whereas here, the link is 
more explicit.

320
00:16:21,015 --> 00:16:24,084
We invoke the calculation of area 
on a given rectangle.

321
00:16:25,419 --> 00:16:27,054
Moreover, because in 
OOP, 

322
00:16:27,254 --> 00:16:29,457
we can only manipulate an object 

323
00:16:29,691 --> 00:16:32,682
through methods of the 
user interface.

324
00:16:32,796 --> 00:16:34,881
Which gives a framework for 
utilization

325
00:16:34,996 --> 00:16:36,361
that is much more rigorous.

326
00:16:36,567 --> 00:16:38,632
For example here, as we saw 
earlier,

327
00:16:38,830 --> 00:16:41,410
nothing obligates me in this approach, 
to have coherent values,

328
00:16:41,636 --> 00:16:43,337
for the width and height,

329
00:16:43,755 --> 00:16:46,623
the width and height 
of the same rectangle.

330
00:16:46,740 --> 00:16:48,909
Here, this error is not possible,

331
00:16:49,109 --> 00:16:50,778
because we are manipulating
a precise rectangle

332
00:16:50,945 --> 00:16:53,881
and thus the associated values
are necessarily coherent.

333
00:16:54,315 --> 00:16:56,884
In addition, because the user is 
constrained to use the interface

334
00:16:57,084 --> 00:16:59,823
to manipulate the object,

335
00:17:00,087 --> 00:17:04,557
he is not concerned by modifications 
made to the internal implementations.

336
00:17:04,959 --> 00:17:08,249
As mentioned earlier, 
if we decide 

337
00:17:08,249 --> 00:17:10,398
to modelize a rectangle

338
00:17:10,632 --> 00:17:15,518
not as an object with 2 member variables 
of type double, "hauteur" and "largeur",

339
00:17:16,120 --> 00:17:19,540
but  rather as an object  were the relevant
data is stored in an array

340
00:17:22,737 --> 00:17:24,135
with two elements,

341
00:17:24,135 --> 00:17:26,747
the dimensions of the rectangle.

342
00:17:27,047 --> 00:17:29,450
So, if the program developer
of the class Rectangle,

343
00:17:29,683 --> 00:17:30,718
did his job well,

344
00:17:30,884 --> 00:17:32,086
and adapted consequently

345
00:17:32,252 --> 00:17:33,287
the method calculating 
the area.

346
00:17:33,487 --> 00:17:35,892
The person who uses the area 
calculation will not be effected.

347
00:17:37,358 --> 00:17:39,195
We see in this small example

348
00:17:39,393 --> 00:17:43,731
the advantage of separating 
the internal level from the external level. 

349
00:17:43,964 --> 00:17:46,000
This results in a more rigorous 
framework for using the program.

350
00:17:46,233 --> 00:17:50,137
And any modification to the internal structure
cannot be noticed externally.

351
00:17:50,971 --> 00:17:53,708
So one of the fundamental rules, 
that we saw already in the introduction,

352
00:17:53,975 --> 00:17:57,211
the member variables, because 
decisions need to be taken

353
00:17:57,411 --> 00:17:59,246
as to their modelling, as well 
as  technical decisions,

354
00:17:59,447 --> 00:18:00,247
and implementation decisions,

355
00:18:00,581 --> 00:18:02,850
are considered implementation details

356
00:18:03,018 --> 00:18:05,686
systematically in all 
good object-oriented programs.

357
00:18:06,787 --> 00:18:09,590
To summarize, when we define 
a new object type

358
00:18:09,790 --> 00:18:11,059
with a class,

359
00:18:11,259 --> 00:18:14,762
we will need to define the member 
variables characteristic to the class

360
00:18:15,062 --> 00:18:17,465
as well as its 
own specific methods,

361
00:18:18,099 --> 00:18:20,968
and we will 
have to define concretely,

362
00:18:21,268 --> 00:18:23,337
what is visible : the user interface,

363
00:18:23,474 --> 00:18:25,405
and what is not : the implementation details.

364
00:18:25,815 --> 00:18:28,810
Therefore once we have decided 
what we have to hide,

365
00:18:29,374 --> 00:18:35,149
we end up with the representation 
of the object for the external user

366
00:18:35,416 --> 00:18:37,551
that is essentially the user interface.

367
00:18:39,153 --> 00:18:41,923
So the external user's view
will only be

368
00:18:42,357 --> 00:18:43,991
an abstract vision

369
00:18:44,258 --> 00:18:46,394
that is materialized in 
the user interface.

370
00:18:46,594 --> 00:18:49,030
The only thing I see of the rectangle 
is its calculation of area.

371
00:18:49,363 --> 00:18:53,634
And if I want to follow the rules of 
object-oriented programming,

372
00:18:54,034 --> 00:18:57,872
I will consider that the member variables 
are also implementation details.

373
00:18:59,516 --> 00:19:03,644
So the interface will be limited 
to a number of selected methods.

374
00:19:04,378 --> 00:19:07,515
The external user's vision 
of the object will be

375
00:19:07,748 --> 00:19:09,250
restricted to this user interface.

376
00:19:10,117 --> 00:19:12,086
What to remember from today's episode:

377
00:19:12,286 --> 00:19:13,821
abstraction results in 

378
00:19:14,188 --> 00:19:16,290
what is called a class,

379
00:19:23,646 --> 00:19:25,800
which allows me to 
define a category of objects.

380
00:19:26,601 --> 00:19:30,271
A class will define a new type in a program.

381
00:19:32,106 --> 00:19:35,609
I now have the type Rectangle

382
00:19:35,943 --> 00:19:38,378
that I can manipulate
in a program.

383
00:19:38,745 --> 00:19:42,083
I can declare 
variables of this type,

384
00:19:43,184 --> 00:19:47,588
which are actual realizations of this 
type. So the declaration of a variable

385
00:19:47,822 --> 00:19:48,861
of this type,

386
00:19:49,056 --> 00:19:52,626
is what is called in object-oriented 
jargon, an object.

387
00:19:53,460 --> 00:19:56,264
It is generally manipulated 
with a variable.

388
00:19:56,898 --> 00:20:01,669
Note that the term instance is 
also used to designate an object.

389
00:20:02,436 --> 00:20:04,438
To summarize and illustrate these remarks

390
00:20:04,672 --> 00:20:06,807
the person who writes the 
class Rectangle

391
00:20:07,007 --> 00:20:09,309
conceptually creates a new type.

392
00:20:09,543 --> 00:20:11,512
He will do this of course 
by writing a program

393
00:20:11,713 --> 00:20:13,915
that contains the code 
of the class Rectangle.

394
00:20:14,215 --> 00:20:16,384
The user of this class 
will use the new type,

395
00:20:16,684 --> 00:20:19,520
by declaring variables 
of type Rectangle

396
00:20:19,787 --> 00:20:21,555
that will only come into real existence

397
00:20:21,822 --> 00:20:23,591
at the execution of the program.

398
00:20:23,857 --> 00:20:26,260
So the moment the new objects 
of this type are created,

399
00:20:26,493 --> 00:20:30,164
we will be able to start working 
with these objects in the program.

400
00:20:30,798 --> 00:20:33,801
And the user will work with
specific realizations

401
00:20:34,135 --> 00:20:37,238
of objects of class Rectangle.

402
00:20:37,772 --> 00:20:39,473
We've come to the 
end of this presentation

403
00:20:39,642 --> 00:20:41,342
of two fundamental aspects 
of object-oriented programming :

404
00:20:41,575 --> 00:20:43,477
encapsulation and abstraction.

405
00:20:43,642 --> 00:20:45,312
You will, in the next episodes,

406
00:20:45,445 --> 00:20:48,158
start to put in practice 
these concepts in C++.
