1
00:00:04,336 --> 00:00:05,781
In the previous episode,

2
00:00:05,781 --> 00:00:07,589
we have presented, in a very
general way,

3
00:00:07,589 --> 00:00:10,128
the concept of operator overloading.

4
00:00:10,128 --> 00:00:13,186
Now, we know that two kinds exist :
the internal overloading

5
00:00:13,186 --> 00:00:14,876
and the external overloading.

6
00:00:14,953 --> 00:00:16,773
In today's episode, we will
thoroughly focus

7
00:00:16,777 --> 00:00:19,957
on the external overloading.

8
00:00:20,280 --> 00:00:23,503
External overloading consists
of defining the operators

9
00:00:23,503 --> 00:00:24,797
as usual functions (as opposed to class member functions).

10
00:00:24,797 --> 00:00:29,379
For example, this function "operator+",
taking here 2 complex numbers

11
00:00:29,379 --> 00:00:33,119
in order to define the addition operator "+"
for the class representing complex numbers.

12
00:00:33,119 --> 00:00:35,058
Let us thoroughly examine this example.

13
00:00:35,058 --> 00:00:37,934
Let us suppose we have defined
a "Complexe" (= "Complex") class.

14
00:00:37,934 --> 00:00:41,694
We have declared 3 instances of
this class : z1, z2 and z3.

15
00:00:41,694 --> 00:00:45,986
Now, we wish to compute the
addition : "z3 = z1 + z2 ".

16
00:00:45,990 --> 00:00:47,954
In the case of the external overloading,

17
00:00:47,954 --> 00:00:49,828
where the operator is a
function,

18
00:00:49,828 --> 00:00:54,972
it corresponds, be reminded, to the
call " z3 = operator+(...) "

19
00:00:55,832 --> 00:01:00,933
with z1 and z2 as arguments.

20
00:01:00,933 --> 00:01:06,053
We thus deduce that the prototype
of the function "operator+"

21
00:01:06,056 --> 00:01:11,016
will take two Complex-type arguments

22
00:01:11,766 --> 00:01:15,556
and return a Complexe.

23
00:01:16,329 --> 00:01:21,739
This si therefore a possible prototype
for the overloading of "operator+".

24
00:01:21,746 --> 00:01:24,565
We may want to optimize this call

25
00:01:24,565 --> 00:01:28,705
and avoid the copies due to 
passing the parameters by value,

26
00:01:28,712 --> 00:01:33,572
doing a passage by constant
reference instead.

27
00:01:34,104 --> 00:01:35,744
Also, we may want to have

28
00:01:35,744 --> 00:01:39,112
(this will be explained
in the third episode

29
00:01:39,112 --> 00:01:41,332
on operator overloading)

30
00:01:41,340 --> 00:01:45,519
as return type : "const Complexe".

31
00:01:45,519 --> 00:01:49,419
For now, we take it as granted; it will
all be explained

32
00:01:49,426 --> 00:01:52,742
in the last episode on
operator overloading.

33
00:01:52,742 --> 00:01:56,352
Here is thus a second possible
prototype

34
00:01:56,352 --> 00:02:00,576
for this "operator+" defined
in external overloading.

35
00:02:00,762 --> 00:02:04,722
A third solution, which is
the optimial solution in C++ 2011

36
00:02:04,734 --> 00:02:07,919
and will also be explained in
the third episode

37
00:02:07,919 --> 00:02:09,462
on operator overloading,

38
00:02:09,462 --> 00:02:14,582
would be to have the following prototype :
"const Complex" as the return value,

39
00:02:14,897 --> 00:02:19,407
a passage by value for the first argument,

40
00:02:20,539 --> 00:02:25,843
and a passage by constant reference
for the second argument.

41
00:02:25,843 --> 00:02:28,615
Here, the passage by value may
seem

42
00:02:28,615 --> 00:02:31,245
a little suboptimal and conter-intuitive.

43
00:02:31,245 --> 00:02:35,335
Due to the specificities of C++ 2011,
particularly regarding the notion of move

44
00:02:35,335 --> 00:02:36,355
instead of copy

45
00:02:36,372 --> 00:02:38,453
(which stretch far beyond the content
of this course)

46
00:02:38,453 --> 00:02:40,823
it is ultimately the better solution.

47
00:02:40,853 --> 00:02:44,533
This leaves us with the following code.
Let us examine the details.

48
00:02:44,653 --> 00:02:46,883
We thus have the "Complexe" class

49
00:02:47,150 --> 00:02:52,616
which defines a complex number,
for example 2 here, "double".

50
00:02:52,616 --> 00:02:55,126
It also has a constructor

51
00:02:55,141 --> 00:02:59,545
permitting to initialize
its 2 attributes "x" and "y"

52
00:02:59,545 --> 00:03:02,205
by receiving two values here.

53
00:03:02,339 --> 00:03:06,759
For example, we could construct
a complex number like this.

54
00:03:08,896 --> 00:03:13,776
Here, we are passing the value 1 for
"x" and the value 2 for "y".

55
00:03:13,873 --> 00:03:17,943
This is the constructor we have here.

56
00:03:17,943 --> 00:03:20,599
Then, we have a handful of
methods necessary

57
00:03:20,599 --> 00:03:22,458
in order to manipulate complex numbers.

58
00:03:22,458 --> 00:03:27,130
For example, we can retrieve the value "x"
and retrieve the value of "y".

59
00:03:27,130 --> 00:03:31,470
Here, we have our external overloading
of "operator+".

60
00:03:31,470 --> 00:03:34,900
The prototype we have previously
described


61
00:03:34,934 --> 00:03:37,194
will be written like this.

62
00:03:37,238 --> 00:03:41,143
Of course, when we write
"z1 + z2" like this,

63
00:03:41,143 --> 00:03:44,806
we must define a new complex "z1 + z2".

64
00:03:44,806 --> 00:03:48,634
The result of the addition of z1 and z2
is a new value

65
00:03:48,634 --> 00:03:50,464
which is neither z1 nor z2.

66
00:03:50,464 --> 00:03:53,122
We will here define this
new value

67
00:03:53,490 --> 00:03:59,739
and build using our two-parameters
constructor.

68
00:03:59,739 --> 00:04:03,025
Actually, the formula for the
addition of two complex numbers

69
00:04:03,025 --> 00:04:07,095
is done by retrieving the "x" of z1
and the "x" of z2,

70
00:04:07,095 --> 00:04:09,206
and adding up these 2 "x".

71
00:04:09,206 --> 00:04:12,616
For the "y" component, we will
retrieve the two "y" values

72
00:04:12,616 --> 00:04:14,376
and compute their addition.

73
00:04:14,376 --> 00:04:16,536
Here, we are indeed constructing
a complex number

74
00:04:16,536 --> 00:04:20,210
corresponding to the definition of
the addition of z1 and z2.

75
00:04:20,210 --> 00:04:22,440
We return this complex number

76
00:04:22,451 --> 00:04:27,391
as the return value of "operator+".

77
00:04:28,447 --> 00:04:31,316
Also, the most advanced out of you
will of course note

78
00:04:31,316 --> 00:04:32,428
(though it is a detail)

79
00:04:32,428 --> 00:04:35,967
that we could regroup these 2 lines.

80
00:04:35,967 --> 00:04:41,807
Thus, we could simply write
"return Complexe(...)", without giving any name.

81
00:04:41,820 --> 00:04:45,580
"return Complexe(...)", with here an
anonymous "Complexe"

82
00:04:45,580 --> 00:04:47,700
and a direct call to the constructor.

83
00:04:47,715 --> 00:04:51,195
But, once again, this is advanced and does not
bring much.

84
00:04:52,532 --> 00:04:55,234
We have seen that there are 2
overloading ways : external and internal.

85
00:04:55,234 --> 00:04:57,022
In mose cases, we may choose
between

86
00:04:57,022 --> 00:04:58,942
external overloading and internal
overloading.

87
00:04:58,942 --> 00:05:01,346
In some cases though, we
cannot choose;

88
00:05:01,346 --> 00:05:05,116
it is absolutely mandatory to use
the external overloading.

89
00:05:05,511 --> 00:05:07,090
Let us look at these cases.

90
00:05:07,090 --> 00:05:10,540
The first case is when we mix
different types.

91
00:05:10,540 --> 00:05:12,699
For example, here, we would
to do the multiplication

92
00:05:12,699 --> 00:05:15,439
of a complex number and a double.

93
00:05:15,566 --> 00:05:19,900
For example, we have here a double "x"
and a complex number "z1".

94
00:05:19,900 --> 00:05:24,785
We would like to retrive the
result of "x" times "z1" into "z2".

95
00:05:24,785 --> 00:05:28,455
"x" is a double-type variable,
and "z1" is a Complexe-type variable.

96
00:05:28,504 --> 00:05:30,764
In principle, we could choose
for the rewriting

97
00:05:30,766 --> 00:05:37,056
between "z2 = x.operator* " with
an internal overloading (call to a method)

98
00:05:37,139 --> 00:05:42,229
or "z2 = operator* (x, z1)"
(call to a function).

99
00:05:42,357 --> 00:05:46,330
However, it is obvious that the
first line makes no sense at all.

100
00:05:46,330 --> 00:05:50,460
Indeed, "x" is not a class
instance

101
00:05:50,479 --> 00:05:53,227
but a so-called basic  type,
a double.

102
00:05:53,227 --> 00:05:57,112
"double" is not a class, there are
not methods in "double".

103
00:05:57,112 --> 00:05:58,942
This solution is thus impossible.

104
00:05:58,948 --> 00:06:02,545
Here, we have no choice but to
resort to the external overloading,

105
00:06:02,545 --> 00:06:04,365
thus using functions.

106
00:06:04,376 --> 00:06:09,006
Similarly, in the case where we would
like to print a complex number,

107
00:06:09,017 --> 00:06:10,777
for example doing "cout << z1 ",

108
00:06:10,777 --> 00:06:14,224
using the overloading of the printing
operator less than-less than (<<),

109
00:06:14,224 --> 00:06:16,973
we could have two possible ways to write it.

110
00:06:16,973 --> 00:06:22,443
Either with the method "operator<<" of the
class where "cout" is an instance

111
00:06:22,449 --> 00:06:24,465
(the class "ostream");

112
00:06:24,465 --> 00:06:30,004
in this way, we are calling the method
of this "ostream" class,

113
00:06:30,004 --> 00:06:34,884
or, we could use a function taking
here the 2 parameters "cout" and "z1".

114
00:06:34,968 --> 00:06:38,180
However, here, we only care about
overloading the "Complexe" class

115
00:06:38,180 --> 00:06:41,541
and definitely not about meddling
with the "ostream" class

116
00:06:41,541 --> 00:06:43,001
where "cout" is an instance.

117
00:06:43,017 --> 00:06:44,597
There, in this case, aswell,

118
00:06:44,602 --> 00:06:48,892
we will never use the internal overloading
of the "ostream" class.

119
00:06:48,899 --> 00:06:52,009
Instead, we will prefer the external overloading.

120
00:06:52,734 --> 00:06:56,786
Let us thoroughly examine these 2 examples,
starting with the outer multiplication.

121
00:06:56,786 --> 00:06:59,596
Be reminded that we have
declared a double, "x" here.

122
00:06:59,598 --> 00:07:02,456
We also have two "Complexe" :
z1 and z2.

123
00:07:02,456 --> 00:07:08,156
We wish to compute the multiplication
of "x" and "z1"

124
00:07:08,157 --> 00:07:10,247
and store the result into "z2".

125
00:07:10,250 --> 00:07:13,330
The equivalent call would be

126
00:07:13,330 --> 00:07:20,970
"z2 = operator* (x, z1); ".

127
00:07:21,283 --> 00:07:24,123
This gives us the prototype.

128
00:07:24,245 --> 00:07:28,598
The function returns a
complex number.

129
00:07:30,648 --> 00:07:32,482
For the same reasons, which
will be explained later,

130
00:07:32,482 --> 00:07:34,042
we will rather pick "const".

131
00:07:34,048 --> 00:07:38,581
We will have "operator* " and then,

132
00:07:38,581 --> 00:07:41,791
we are taking a "double" and a "Complexe".

133
00:07:43,298 --> 00:07:48,618
For optimization reasons, we will
pass it  by constant reference.

134
00:07:48,928 --> 00:07:52,348
We thus end up with the following
prototype.

135
00:07:53,354 --> 00:07:55,827
For the definition, we could

136
00:07:55,827 --> 00:08:00,227
either write all the operations
explicitly

137
00:08:00,240 --> 00:08:05,118
for the multipllication of this double "a" here
and this "Complexe" "z".

138
00:08:05,118 --> 00:08:08,946
Or, if we suppose that the
inner overloading exists

139
00:08:08,946 --> 00:08:10,935
(which is very possible for
complex numbers

140
00:08:10,935 --> 00:08:12,868
but not possible for all classes).

141
00:08:12,868 --> 00:08:14,363
But when it is possible,

142
00:08:14,363 --> 00:08:16,098
that the internal overloading exists

143
00:08:16,098 --> 00:08:22,407
(please note we have swapped the other
and started by multiplying by "z" ).

144
00:08:22,407 --> 00:08:25,893
Since something exists able

145
00:08:25,893 --> 00:08:28,903
to do "Complexe" times "double",

146
00:08:28,923 --> 00:08:34,833
that is, either an internal overloading

147
00:08:34,838 --> 00:08:37,028
of the "Complexe" class

148
00:08:38,671 --> 00:08:40,681
taking a double,

149
00:08:42,087 --> 00:08:47,547
or an already written,
external overloading,

150
00:08:49,547 --> 00:08:55,007
the multiplication of "Complex" first
by a "double" then

151
00:08:55,377 --> 00:08:57,467
(no matter which solution is chosen).

152
00:08:57,471 --> 00:09:00,121
What matters is that

153
00:09:00,125 --> 00:09:04,467
writing "a" times "z"

154
00:09:04,467 --> 00:09:09,324
is mathematically the same
thing as "z" times "a".

155
00:09:09,324 --> 00:09:11,381
In such a case, with this kind

156
00:09:11,381 --> 00:09:13,141
of equality, we do not want

157
00:09:13,141 --> 00:09:18,692
to write the same code twice but
instead use already written code.

158
00:09:19,983 --> 00:09:22,020
For the printing operator,

159
00:09:22,020 --> 00:09:25,541
we may wish, for example, to do 
"cout << z1 ".

160
00:09:25,541 --> 00:09:27,941
Here, z1, is of course a complex number.

161
00:09:28,015 --> 00:09:29,920
Be reminded that the equivalent
call

162
00:09:29,920 --> 00:09:33,220
would be an external overloading
of the function

163
00:09:33,220 --> 00:09:38,107
"operator<<" with "cout" and z1
as arguments.

164
00:09:38,107 --> 00:09:40,617
This gives, as the prototype of
the function :

165
00:09:40,617 --> 00:09:45,159
"operator<< ". Here is the type of "cout"

166
00:09:45,159 --> 00:09:48,279
and here a "Complexe" which we
pass once again,

167
00:09:48,282 --> 00:09:50,351
for optimization reasons,

168
00:09:50,351 --> 00:09:52,561
by constant reference.

169
00:09:52,586 --> 00:09:57,236
By the way, "cout" is, an
instance of the "ostream" class,

170
00:09:57,248 --> 00:09:59,528
is passed by reference.

171
00:09:59,574 --> 00:10:04,244
Indeed, the very printing
"cout << z1 "

172
00:10:04,261 --> 00:10:06,074
will indeed modify "cout"

173
00:10:06,074 --> 00:10:09,914
since we will write informations
on "cout", thus modifying it.

174
00:10:09,917 --> 00:10:12,409
Since we are modifying this argument,

175
00:10:12,409 --> 00:10:15,789
we absolutely need to pass
it by reference.

176
00:10:15,812 --> 00:10:18,640
We will give you the return type
of this function right away

177
00:10:18,640 --> 00:10:20,542
so that you may write correctly

178
00:10:20,542 --> 00:10:25,022
this printing operator. The return type
is also an "ostream&".

179
00:10:25,046 --> 00:10:28,219
The reason behind this type will also
be explained

180
00:10:28,219 --> 00:10:31,079
in the last video on operator
overloading,

181
00:10:31,141 --> 00:10:33,291
regrouping all these subtleties.

182
00:10:34,194 --> 00:10:35,923
Let us now move on to the definition

183
00:10:35,923 --> 00:10:38,696
of this printing operator for
complex numbers.

184
00:10:38,696 --> 00:10:42,536
The first solution is to use getters,

185
00:10:42,536 --> 00:10:45,185
for exemple "getX" or "getY",

186
00:10:45,185 --> 00:10:48,635
returning the attributes we
wish to print.

187
00:10:48,635 --> 00:10:49,851
This leads to the following :

188
00:10:49,851 --> 00:10:52,781
Here we have received, as the
first parameter,

189
00:10:52,826 --> 00:10:56,105
the output stream on which we
wish to write.

190
00:10:56,105 --> 00:10:59,665
We are using this stream to print,

191
00:10:59,665 --> 00:11:02,399
for example, a parenthesis here.

192
00:11:02,565 --> 00:11:04,675
Let us say we have a complex number

193
00:11:04,686 --> 00:11:09,312
where "x" is 3 and "y" is 4.

194
00:11:09,312 --> 00:11:14,922
The idea is to print " (3, 4) ";

195
00:11:14,949 --> 00:11:18,229
this is the desired format for
the printing here.

196
00:11:18,455 --> 00:11:20,955
Therefore, we write the opening
parenthesis,

197
00:11:21,090 --> 00:11:26,407
then we retrieve the "x" of the complex
which we have received as the second argument

198
00:11:26,407 --> 00:11:29,332
of this "operator<<" function.

199
00:11:29,332 --> 00:11:31,222
We now print the comma.

200
00:11:31,250 --> 00:11:34,574
Then, we print the retrieved value

201
00:11:34,574 --> 00:11:38,264
for the attribute "y" of this complex
number "z".

202
00:11:38,264 --> 00:11:41,250
Then, we finish with the
closing parenthesis.

203
00:11:41,397 --> 00:11:46,227
Then we do not forget,

204
00:11:46,237 --> 00:11:48,922
because of the return value
"ostream&" here,

205
00:11:48,922 --> 00:11:53,132
to finish our function with a "return"
of the output parameter.

206
00:11:53,138 --> 00:11:56,648
For now, please consider
this mandatory

207
00:11:56,648 --> 00:11:59,768
in order to avoid unpleasant
"segmentations faults"

208
00:11:59,768 --> 00:12:04,125
so that you can use "operator<<"
correctly

209
00:12:04,125 --> 00:12:06,895
just like you do for int and double.

210
00:12:08,079 --> 00:12:11,812
A second possible definition
is to use

211
00:12:11,812 --> 00:12:14,002
a previously defined method

212
00:12:14,008 --> 00:12:18,781
either to convert a "Complexe" into
a character string

213
00:12:18,781 --> 00:12:22,531
or to directly print a complex.

214
00:12:22,542 --> 00:12:24,182
Let us look at this first solution.

215
00:12:24,191 --> 00:12:29,641
Here, we are again using the
received stream to print

216
00:12:29,651 --> 00:12:33,241
the result of the call to
the method "to_string"

217
00:12:33,241 --> 00:12:37,101
which transforms a "Complexe"
into a character string.

218
00:12:37,190 --> 00:12:41,315
In its prototype, the return
type is typically a

219
00:12:41,315 --> 00:12:42,184
a character string,

220
00:12:42,184 --> 00:12:43,124
that is, "string".

221
00:12:43,437 --> 00:12:46,350
The method belongs to the class "Complexe"

222
00:12:46,350 --> 00:12:48,103
and is called "to_string".

223
00:12:48,103 --> 00:12:49,581
It does not take any parameters.

224
00:12:49,581 --> 00:12:52,875
Also, it does not modify the
current instance;

225
00:12:52,875 --> 00:12:55,660
indeed, modifying a "Complexe" into
a character string

226
00:12:55,660 --> 00:12:57,770
does not modify this "Complexe".

227
00:12:57,947 --> 00:12:59,577
Therefore, we will call this method

228
00:12:59,590 --> 00:13:01,680
here, in "operator<< ".

229
00:13:01,721 --> 00:13:03,658
As previously, we finish

230
00:13:03,658 --> 00:13:06,438
by returning the first received argument.

231
00:13:06,858 --> 00:13:09,418
Another solution could to directly
have a method

232
00:13:09,418 --> 00:13:14,678
"affiche" working just like "operator<<".
(TN: "affiche" means "print").

233
00:13:14,678 --> 00:13:17,914
However, it would be a public
method in the class

234
00:13:17,914 --> 00:13:20,631
receiving the stream on which
we print

235
00:13:20,631 --> 00:13:22,769
and return this stream.

236
00:13:22,769 --> 00:13:25,379
Therefore, its prototype is very similar

237
00:13:26,361 --> 00:13:29,321
to the one of the printing
operator,

238
00:13:29,321 --> 00:13:31,311
thus returning an "ostream".

239
00:13:32,238 --> 00:13:34,898
It is a method of the "Complexe" class.

240
00:13:36,056 --> 00:13:40,006
It is called "affiche", and it takes,
as parameter,

241
00:13:41,237 --> 00:13:44,587
a stream it modifies.
The stream is thus passed by reference.

242
00:13:45,152 --> 00:13:49,345
This method does not modify
the printed complex number;

243
00:13:49,345 --> 00:13:51,511
when we print a "Complexe", we
do not modify it.

244
00:13:51,511 --> 00:13:54,481
We conclude here with the
keyword "const".

245
00:13:55,398 --> 00:13:59,728
Those were three possible examples
of definition of the printing operator

246
00:13:59,736 --> 00:14:01,927
for our "Complexe" class.

247
00:14:01,927 --> 00:14:04,707
You may freely draw inspiration
for your very own classes.

248
00:14:04,715 --> 00:14:08,843
By the way, please note (we are
anticipating on a later subject)

249
00:14:08,843 --> 00:14:13,653
that it is prefearable to use these kinds
of methods "to_string" or "affiche"

250
00:14:13,653 --> 00:14:16,588
when we will be dealing with
polymorphism

251
00:14:16,588 --> 00:14:18,218
which will come later.

252
00:14:18,515 --> 00:14:21,952
When we are doing external
overloading,

253
00:14:21,952 --> 00:14:25,292
it is sometimes necessary to
access private attributes

254
00:14:25,455 --> 00:14:28,645
of the class on which we wish
to apply the operator.

255
00:14:28,651 --> 00:14:30,888
Even if we think it is bad
programming,

256
00:14:30,888 --> 00:14:34,781
and that we truly advise you
to only use getters

257
00:14:34,781 --> 00:14:37,948
and the interface
(the public part of the class),

258
00:14:37,948 --> 00:14:40,928
you may sometimes encounter this
kind of practice

259
00:14:40,928 --> 00:14:43,429
(though we do not recommand
to write it yourself) :

260
00:14:43,429 --> 00:14:49,556
here, you could be tempted to write
"z.x" or here "z.y",

261
00:14:49,556 --> 00:14:51,499
that is, to directly access the

262
00:14:51,499 --> 00:14:55,174
private attributes "x" and "y" of
the "Complexe" class.

263
00:14:55,174 --> 00:14:57,987
In this case, we need to give
a priviliged access

264
00:14:57,987 --> 00:15:02,271
to this function, since it is outside
the "Complexe" class.

265
00:15:02,271 --> 00:15:06,111
to give a privileged access to
the private parts.

266
00:15:06,131 --> 00:15:09,872
We call this : declaring a friendship

267
00:15:09,872 --> 00:15:12,202
thanks to the keyword "friend".

268
00:15:12,273 --> 00:15:15,775
Once again, we strongly recommand
that you rather

269
00:15:15,775 --> 00:15:17,351
use getters,

270
00:15:17,351 --> 00:15:19,964
that is, the public part of
the class

271
00:15:19,964 --> 00:15:24,059
rather than the private part through
this indirect way

272
00:15:24,059 --> 00:15:25,729
that is the keyword "friend".

273
00:15:25,867 --> 00:15:27,436
However, since you may encounter it,
we will present it.

274
00:15:27,436 --> 00:15:29,516
If you have to disregard our
advice and use a friendship,

275
00:15:29,519 --> 00:15:33,549
you will put, in the very definition
of the class, a line like

276
00:15:33,568 --> 00:15:39,658
"friend" followed by the prototype of
the function you wish to have

277
00:15:39,666 --> 00:15:42,456
access to the private parts of
the class.

278
00:15:42,465 --> 00:15:43,960
Thus, we do it like this :

279
00:15:43,960 --> 00:15:46,510
"friend" followed by a the prototype
of a function.

280
00:15:46,523 --> 00:15:50,253
This gives us the right to
access

281
00:15:50,375 --> 00:15:53,957
the private methods and
attributes of the class.

282
00:15:53,957 --> 00:15:58,089
Please note that the definition of these
functions

283
00:15:58,089 --> 00:16:00,929
remains, of course, outside
the class.

284
00:16:00,929 --> 00:16:02,681
Indeed, these functions have nothing
to do with the class.

285
00:16:02,681 --> 00:16:04,771
We simply indicate in the class

286
00:16:04,776 --> 00:16:09,036
that we are giving access rights to
these external functions.

287
00:16:09,052 --> 00:16:12,228
Let us look concretely what it
would look like

288
00:16:12,228 --> 00:16:13,708
for complex numbers.

289
00:16:13,714 --> 00:16:17,354
Here, we have the "Complex" class.
The private parts

290
00:16:17,500 --> 00:16:20,663
are the attributes "x" and "y".

291
00:16:20,663 --> 00:16:23,630
Here, we have our printing
operator

292
00:16:23,630 --> 00:16:24,668
for complex numbers.

293
00:16:24,668 --> 00:16:26,315
All is as before.

294
00:16:26,315 --> 00:16:27,761
However, we have not followed
the aforementioned advice

295
00:16:27,761 --> 00:16:29,301
(we do not recommand you
do the same, of course).

296
00:16:29,315 --> 00:16:32,198
Here, we are trying to access
the private parts.

297
00:16:32,198 --> 00:16:34,709
If we do not do anything
particular,

298
00:16:34,709 --> 00:16:37,119
we will end up with a compiling error here :

299
00:16:37,121 --> 00:16:39,331
we are not allowed to
access the private parts

300
00:16:39,344 --> 00:16:41,047
with an external function.

301
00:16:41,047 --> 00:16:42,667
In order for this to work properly,

302
00:16:42,681 --> 00:16:45,451
we need to add, in the "Complex" class,

303
00:16:45,471 --> 00:16:50,381
a line giving access rights (giving
the "friendship")

304
00:16:50,424 --> 00:16:55,247
to this external function.
We are simply putting its prototype

305
00:16:55,247 --> 00:16:56,714
after the keyword "friend".

306
00:16:56,714 --> 00:16:57,954
Adding this line

307
00:16:57,958 --> 00:17:01,452
means the given function can
now access

308
00:17:01,452 --> 00:17:03,132
the private parts.

309
00:17:03,143 --> 00:17:05,787
Personally, we daresay this is
a very poor idea,

310
00:17:05,787 --> 00:17:07,907
for it breaks the encapsulation.

311
00:17:08,520 --> 00:17:12,570
This concludes our episode
on the external overloading.

312
00:17:12,769 --> 00:17:16,445
In the next episode, we will
discuss the internal overloading.

313
00:17:16,445 --> 00:17:18,655
Also, we will tell you in
which cases

314
00:17:18,661 --> 00:17:21,683
you should prefer either
of these two overloading ways.

315
00:17:21,683 --> 00:17:23,774
Finally, in a last video,

316
00:17:23,774 --> 00:17:25,571
we will go back to all the
details

317
00:17:25,571 --> 00:17:27,711
we have left aside.
