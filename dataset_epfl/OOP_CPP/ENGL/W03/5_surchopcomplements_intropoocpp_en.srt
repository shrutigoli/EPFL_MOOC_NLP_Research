1
00:00:03,767 --> 00:00:05,187
In this episode,

2
00:00:05,187 --> 00:00:07,192
we will bring you a few complements

3
00:00:07,192 --> 00:00:10,447
on the aspects we have left
aside in the previous episodes

4
00:00:10,447 --> 00:00:12,494
on the topic of operator overloading.

5
00:00:12,494 --> 00:00:14,788
We will also give you several
practical advice.

6
00:00:14,998 --> 00:00:17,384
First of all, let us remind you

7
00:00:17,384 --> 00:00:20,577
how to practically tackle this
operator overloading

8
00:00:20,577 --> 00:00:23,345
according your programming
expertise.

9
00:00:23,345 --> 00:00:27,076
Indeed, operator overloading is a rather
difficult matter, for it is technical

10
00:00:27,076 --> 00:00:28,091
and touches the core of the language.

11
00:00:28,091 --> 00:00:29,679
Also, it is not necessarily useful.

12
00:00:29,679 --> 00:00:32,387
At the beginning you therefore,
do without

13
00:00:32,387 --> 00:00:35,655
operator overloading, just like we were
doing until now.

14
00:00:35,655 --> 00:00:37,913
However, this topic is still
rather useful practically

15
00:00:37,913 --> 00:00:40,675
- we hope to have have convinced
you of this fact in the previous videos.

16
00:00:40,675 --> 00:00:43,456
Therefore we naturally advise you to
make good use of this tool.

17
00:00:43,456 --> 00:00:45,861
At the first level of
overloading,

18
00:00:45,861 --> 00:00:47,730
you will bring simple
operations

19
00:00:47,730 --> 00:00:50,089
on those of your classes you wish to refine.

20
00:00:50,089 --> 00:00:54,309
You'll bring these operations (such as addition, 
multiplication...) without too much details

21
00:00:54,309 --> 00:00:59,221
and without considering the corresponding
auto-assignment operators (such as += , -= ).

22
00:01:00,011 --> 00:01:03,283
At this first level, you may also overload
the printing operator

23
00:01:03,283 --> 00:01:05,885
so that you may print more easily

24
00:01:05,885 --> 00:01:07,645
the objects of the classes
you have created.

25
00:01:08,065 --> 00:01:11,631
At the next level, you will consider
the auto-assignment operators

26
00:01:12,301 --> 00:01:16,787
( += , *= ), but you will overload them
while ignoring their return value,

27
00:01:16,787 --> 00:01:18,922
thus using "void" as the return type.

28
00:01:18,922 --> 00:01:22,577
Finally, at the last level, you will
overload the operators

29
00:01:22,577 --> 00:01:26,893
while respecting the prototypes used
in the C++ norm.

30
00:01:26,893 --> 00:01:29,882
For example, auto-assignment operators

31
00:01:29,882 --> 00:01:33,371
shall return a reference to
an instance of the class.

32
00:01:33,711 --> 00:01:36,237
This is it for the three levels
of overloading

33
00:01:36,237 --> 00:01:38,697
(four if we include the fact not
to overload anything)

34
00:01:38,697 --> 00:01:42,432
which we let you choose for your
own programs.

35
00:01:42,432 --> 00:01:46,653
Let us examine a few short examples
at the last level

36
00:01:46,653 --> 00:01:47,976
of the previous slide.

37
00:01:47,976 --> 00:01:50,730
In the previous episodes, we have
already seen

38
00:01:50,730 --> 00:01:55,827
the auto-assignment operator " += "
which lets us write

39
00:01:55,827 --> 00:01:58,255
expressions such as "p += q".

40
00:01:58,255 --> 00:02:01,617
On the outer overloading, we
have also seen the addition

41
00:02:01,617 --> 00:02:05,518
which lets us write expressions
such as "r = p + q".

42
00:02:05,518 --> 00:02:07,842
This here is the addition operator.

43
00:02:08,172 --> 00:02:11,734
Similarly, we could define the
auto-subtraction

44
00:02:11,734 --> 00:02:17,850
operator which would let us
write "p -= q".

45
00:02:17,850 --> 00:02:21,170
Considering the subtraction,
we also have the "minus sign".

46
00:02:21,170 --> 00:02:23,364
Here, it is not a subtraction
but the additive inverse.

47
00:02:23,364 --> 00:02:28,413
For example, if we write "r = -p" it
is also an operator " - "

48
00:02:28,413 --> 00:02:33,391
which will be internally overloaded
and which does not take arguments.

49
00:02:33,391 --> 00:02:35,552
There is no second argument
to this operator.

50
00:02:35,552 --> 00:02:37,695
This is called an "unary operator".

51
00:02:37,695 --> 00:02:40,896
We have also seen the printing
operator

52
00:02:40,896 --> 00:02:43,741
which lets us prints the instances
of our classes

53
00:02:43,741 --> 00:02:45,944
the same way we would
print a double or an int.

54
00:02:45,944 --> 00:02:49,481
We have also seen,
regarding the outer multiplication,

55
00:02:49,481 --> 00:02:52,737
the left multiplication, by an
element of another class.

56
00:02:52,737 --> 00:02:56,307
For example, here, " p " and " q " are
elements of class,

57
00:02:56,307 --> 00:02:57,877
such as complex numbers.

58
00:02:57,877 --> 00:03:01,310
However, here, " x " is an element
of another class

59
00:03:01,310 --> 00:03:02,496
or a basic-type variable.

60
00:03:02,496 --> 00:03:04,277
For example, we used a double here.

61
00:03:04,597 --> 00:03:07,677
We could have, internally, a 
multiplication

62
00:03:07,677 --> 00:03:10,158
by one of these other types.

63
00:03:10,158 --> 00:03:13,370
For a complex number " p ",

64
00:03:13,370 --> 00:03:17,543
we could write "p *= x " where x is a double.

65
00:03:18,233 --> 00:03:21,774
Here yet another example : we
could use the " == " operator

66
00:03:21,774 --> 00:03:24,137
and write " p == q ".

67
00:03:24,137 --> 00:03:30,473
In this case, do not forget to overload
tthe " != " [not equal] operator aswell

68
00:03:30,473 --> 00:03:37,368
since it is closely tied to the " == " operator.
Therefore, define one with the other.

69
00:03:37,668 --> 00:03:40,574
We could also use comparison
operators.

70
00:03:40,854 --> 00:03:43,215
For example, we could write
" p < q ".

71
00:03:43,215 --> 00:03:47,018
Here aswell, do not forget to define
the operator "less or equal to"

72
00:03:47,018 --> 00:03:51,454
and, the same goes for the operators
"greater than" and "greater or equal to".

73
00:03:51,474 --> 00:03:56,629
Thus, you will first define one
of the four operators and write the three others

74
00:03:56,629 --> 00:04:00,954
out of the previously defined one.
Thus, we ensure the semantic integrity,

75
00:04:00,954 --> 00:04:04,406
this means that the four operators
will function correctly together.

76
00:04:04,786 --> 00:04:08,526
A few more examples, here with
the auto-increment operator

77
00:04:08,526 --> 00:04:12,248
such as " ++p " with this instruction.

78
00:04:12,838 --> 00:04:15,054
Now, we will discuss the
following issues :

79
00:04:15,054 --> 00:04:18,875
Why have we added a "const" to the
retun type of the addition?

80
00:04:19,405 --> 00:04:22,454
Why have we chosen this return type
for the printing operator?

81
00:04:22,854 --> 00:04:27,010
What is the correct return type for the
auto-assignment operator such as " += ".

82
00:04:27,010 --> 00:04:30,618
Why is there a reference to a class
instance here?

83
00:04:30,618 --> 00:04:33,611
Ultimately, we will offer a few
practical advice

84
00:04:33,611 --> 00:04:36,582
and will go back to the assignment
operator " = ".

85
00:04:37,222 --> 00:04:41,161
Let us begin with the return type of,
for example, the addition operator.

86
00:04:41,161 --> 00:04:45,909
Why have we added a "const" 
to the return type of this operator.

87
00:04:45,909 --> 00:04:49,429
Be reminded that this operator
lets us write expressions

88
00:04:49,429 --> 00:04:53,583
such as " z3 = z1 + z2".

89
00:04:53,583 --> 00:04:57,149
Clearly, the return type is thus
a complex number.

90
00:04:57,149 --> 00:04:59,082
Why the "const" then?

91
00:04:59,082 --> 00:05:03,440
The reason is not to permit expressions
such as "++(z1 + z2)"

92
00:05:03,440 --> 00:05:06,791
(which contains the call to

93
00:05:08,541 --> 00:05:13,572
operator+ (z1, z2) ).

94
00:05:13,572 --> 00:05:16,314
Thus, this is indeed the return type
of the operator.

95
00:05:16,314 --> 00:05:20,467
Then, we could imagine writing
something like this,

96
00:05:20,467 --> 00:05:22,492
incrementing this return value.

97
00:05:22,492 --> 00:05:25,812
What sense would it have to
do this?

98
00:05:25,812 --> 00:05:31,998
What sense would it have to increment
the addition of z1 and z2?

99
00:05:31,998 --> 00:05:36,301
The result of the addition of z1 and z2
is a result, a constant.

100
00:05:36,301 --> 00:05:37,615
Therefore, we cannot increment it.

101
00:05:37,615 --> 00:05:41,642
This is precisely in order to
prevent this kind of instructions

102
00:05:41,642 --> 00:05:46,628
that we add the const to the return
type.

103
00:05:46,628 --> 00:05:51,007
Thus, we prevent to write on
the left side of the " = " expression.

104
00:05:51,007 --> 00:05:55,503
For example, without the "const",
"z1 + z2" would be a complex number

105
00:05:55,503 --> 00:05:59,699
which we can put on the left
side of an equal sign.

106
00:05:59,699 --> 00:06:02,515
Here aswell, this kind of expression
has no sense at all.

107
00:06:02,515 --> 00:06:07,614
Thus, to prevent it to be placed
on this sign of the equal sign,

108
00:06:07,614 --> 00:06:12,038
we define the return type as a 
"const complexe",

109
00:06:12,038 --> 00:06:14,904
that is, a complex number we cannot
modify.

110
00:06:14,904 --> 00:06:17,328
The result of an addition of this
complex number.

111
00:06:17,328 --> 00:06:19,800
We cannot modify the result of
an addition.

112
00:06:20,380 --> 00:06:21,386
Second point :

113
00:06:21,386 --> 00:06:26,059
Now, why does the printing operator
return an "ostream&" ?

114
00:06:26,059 --> 00:06:29,190
Let us look, for example, a very
standard printing.

115
00:06:29,190 --> 00:06:32,668
For a complex number " z1 " we would
write it like this :

116
00:06:32,668 --> 00:06:36,933
" cout << z1 << endl ".

117
00:06:36,933 --> 00:06:41,128
Let us take this expression and
call it " A ".

118
00:06:41,128 --> 00:06:46,404
This line is thus of the kind " A << endl ".

119
00:06:46,404 --> 00:06:51,177
This is indeed a call to the
printing operator :

120
00:06:51,177 --> 00:06:56,660
" operator<< (A, endl) ".

121
00:06:58,570 --> 00:07:01,963
Now, if we rewrite "A" for what it is,

122
00:07:01,963 --> 00:07:03,630
which means " cout << z1",

123
00:07:03,630 --> 00:07:10,587
the expression " cout << z1 << endl "

124
00:07:11,697 --> 00:07:14,560
is equivalent to "operator<< "

125
00:07:15,240 --> 00:07:19,075
where the first argument is the
result of "cout << z1 "

126
00:07:19,075 --> 00:07:20,904
and the second  argument is "endl".

127
00:07:20,904 --> 00:07:23,310
But this "cout << z1 "

128
00:07:23,310 --> 00:07:27,366
is itself a call to the printing operator
with "cout" and " z1 ".

129
00:07:27,366 --> 00:07:33,823
Thus, "cout << z1 << endl " is equivalent
to the call :

130
00:07:33,823 --> 00:07:38,034
printing operator of printing operator
on "cout" and " z1 "

131
00:07:38,494 --> 00:07:39,991
and then endl.

132
00:07:39,991 --> 00:07:45,482
Here, we see that the return type
of " operator<< (cout, z1) "

133
00:07:45,482 --> 00:07:50,547
is passed as the first argument
of  a " << " operator.

134
00:07:50,547 --> 00:07:56,606
Therefore, this expression here must
be of the same type as the first argument

135
00:07:56,606 --> 00:07:58,869
of the " << " operator.

136
00:07:58,869 --> 00:08:03,011
All this expression must be of
the "ostream&" type.

137
00:08:03,481 --> 00:08:09,778
This is why the return value of the
printing operator must be "ostream&"

138
00:08:09,778 --> 00:08:13,829
so that we can reuse it in a
second call

139
00:08:13,829 --> 00:08:15,350
or even a third one.

140
00:08:15,350 --> 00:08:18,042
If you had used "void" as the
return type

141
00:08:18,042 --> 00:08:19,707
you can never do successive calls.

142
00:08:19,707 --> 00:08:22,915
Indeed, if you had used "void"
as the return type,

143
00:08:22,915 --> 00:08:26,059
you could not write expressions
such as 

144
00:08:26,059 --> 00:08:28,943
"cout << z1 << endl ".

145
00:08:28,943 --> 00:08:34,219
This second " << " could not
resolve

146
00:08:34,219 --> 00:08:39,145
since the first expression here would
return a "void"

147
00:08:39,145 --> 00:08:43,550
which means you will end up with
something like "void" followed by "endl";

148
00:08:43,550 --> 00:08:45,440
this makes no sense at all.

149
00:08:45,940 --> 00:08:50,415
It is thus in order to chain the
calls to the printing operator

150
00:08:50,415 --> 00:08:53,288
that this printing operator shall return

151
00:08:53,288 --> 00:08:56,437
a type compatible with its
first argument.

152
00:08:56,437 --> 00:08:59,632
This is this a stream in which
we can write

153
00:08:59,632 --> 00:09:03,088
an "ostream" passed by reference,
an "ostream&".

154
00:09:04,028 --> 00:09:08,619
Third complement : what is the
return type for the auto-assignment operators

155
00:09:08,619 --> 00:09:11,096
such as the operator "+=",

156
00:09:11,096 --> 00:09:14,398
If we write something like
"z1 += z2",

157
00:09:14,398 --> 00:09:17,784
remember that this is equivalent
to the call

158
00:09:17,784 --> 00:09:22,689
" z1.operator+= (z2) ".

159
00:09:22,689 --> 00:09:27,351
We see that this call is autonomous;

160
00:09:27,351 --> 00:09:29,756
there is no expression before it.

161
00:09:29,756 --> 00:09:34,793
We have no written something
like " z1 = z1.operator+= (z2).

162
00:09:34,793 --> 00:09:37,946
It is precisely because we do not
write this

163
00:09:37,946 --> 00:09:40,386
that we have advised you, at the first
level of overloading .

164
00:09:40,386 --> 00:09:44,853
to simply use "void" as the return type.

165
00:09:44,853 --> 00:09:47,082
This corresponds to the first
level of overloading

166
00:09:47,082 --> 00:09:49,175
we have talked about in
the introduction.

167
00:09:49,175 --> 00:09:51,443
However, let it be known
that, in C++,

168
00:09:51,443 --> 00:09:55,616
every expression both "does something"
and "has a value", aswell.

169
00:09:55,616 --> 00:09:57,687
For example, if we have an expression,

170
00:09:57,687 --> 00:10:01,680
we may very well white
" x = this expression ".

171
00:10:01,680 --> 00:10:05,824
This means that we can very well
write what we have suggested before :

172
00:10:05,824 --> 00:10:10,133
" z3 = (z1 += z2) ".

173
00:10:10,133 --> 00:10:14,723
Here, the expression " z1 += z2 "
does something,

174
00:10:14,723 --> 00:10:16,932
namely, it adds the value of " z2 "
to " z1 ".

175
00:10:16,932 --> 00:10:20,820
However, this expression does
also have a value

176
00:10:20,820 --> 00:10:26,963
and can as be assigned -for example
to " z3 ".

177
00:10:27,453 --> 00:10:29,093
So, what is this expression's value?

178
00:10:29,093 --> 00:10:33,646
What you need to know is that
the value of the expression " z1 += z2 "

179
00:10:33,646 --> 00:10:40,443
is the value of " z1 " after
the assignment.

180
00:10:41,183 --> 00:10:45,243
This whole expression is therefore
a complex number

181
00:10:45,243 --> 00:10:48,863
since "z1" and "z2" are complex numbers.

182
00:10:48,863 --> 00:10:54,600
This is why, at an advanced level,
the return type of this operator

183
00:10:54,600 --> 00:10:59,190
is not "void" anymore but a
complex number.

184
00:10:59,750 --> 00:11:03,975
However, this complex number
does exist already.

185
00:11:03,975 --> 00:11:08,131
It is "z1" after the result of
this assignment.

186
00:11:08,131 --> 00:11:11,989
This means it is not a new complex number
but at already existing one.

187
00:11:11,989 --> 00:11:14,990
Consequently, we will not create
a new complex number,

188
00:11:14,990 --> 00:11:21,182
but simply pass a reference to
an already existing one.

189
00:11:21,182 --> 00:11:24,482
Those are the reasons why the
more advanced return types

190
00:11:24,482 --> 00:11:28,802
(compatible with the C++ norm)
for auto-assignment operators

191
00:11:28,802 --> 00:11:31,650
are references on instances

192
00:11:31,650 --> 00:11:34,333
(for example a reference on
a complex number).

193
00:11:34,333 --> 00:11:36,527
Now, let us see how to
define this all.

194
00:11:36,877 --> 00:11:41,159
We are writing an inner overloading
in the class of the " += " operator.

195
00:11:41,159 --> 00:11:44,158
Its second argument

196
00:11:44,158 --> 00:11:47,067
is the value we wish to add
to the current instance.

197
00:11:47,067 --> 00:11:49,419
At an advanced level,

198
00:11:49,419 --> 00:11:51,989
it returns a reference on a complex number.

199
00:11:51,989 --> 00:11:55,862
We will use a reference every time
we return an already existing complex number.

200
00:11:55,862 --> 00:11:58,154
It is not a new value.

201
00:11:58,154 --> 00:12:01,205
In this expression here, we
return the value of "z1".

202
00:12:01,205 --> 00:12:03,727
We will define this operator like this :

203
00:12:03,727 --> 00:12:08,599
we begin here with the header.
Then, as we have seen before,

204
00:12:08,599 --> 00:12:13,599
we add the value x of z2 to the
current attribute x.

205
00:12:13,599 --> 00:12:18,385
Then, we add the value y of z2
to the current attribute y.

206
00:12:18,385 --> 00:12:20,750
Now, the difference

207
00:12:20,750 --> 00:12:23,197
is that we have a return type now.

208
00:12:23,197 --> 00:12:25,948
What should we do return?
The current instance!

209
00:12:25,948 --> 00:12:27,951
And what is the current instance?

210
00:12:27,951 --> 00:12:32,525
It is the value stored
in our adress.

211
00:12:32,525 --> 00:12:36,360
Here, "this" is a pointer
on the current instance.

212
00:12:36,360 --> 00:12:42,627
Therefore, " *this " is the value
stored in the current instance.

213
00:12:42,627 --> 00:12:46,228
Here, for example, it means the
value of "z1".

214
00:12:46,738 --> 00:12:49,838
Let us finish with practical
considerations which should be important.

215
00:12:49,838 --> 00:12:54,503
We have already defined the return
type as a reference on a complex number

216
00:12:54,503 --> 00:12:58,093
since this complex number
exists already.

217
00:12:58,093 --> 00:12:59,829
If we had not added the reference,

218
00:12:59,829 --> 00:13:02,625
we would have created a new
complex number,

219
00:13:02,625 --> 00:13:05,689
a copy of an already existing
complex number.

220
00:13:05,689 --> 00:13:09,898
This would be a unnecessary copy.

221
00:13:09,898 --> 00:13:13,316
In a general way, we can give you
the following advice.

222
00:13:13,316 --> 00:13:17,667
Be very thorough when overloading
operators.

223
00:13:17,667 --> 00:13:22,138
Be careful not to do unnecessary copies,

224
00:13:22,138 --> 00:13:25,614
do not burden your code with
useless operations.

225
00:13:25,614 --> 00:13:29,703
Indeed, operators are generally
used very often,

226
00:13:29,703 --> 00:13:32,500
in many an expression and will
be repeated.

227
00:13:32,500 --> 00:13:35,714
Therefore, something poorly
written in some code

228
00:13:35,714 --> 00:13:39,048
as deep as an operator

229
00:13:39,048 --> 00:13:41,367
could lead to globally
important repercussions

230
00:13:41,367 --> 00:13:44,059
on the whole program.

231
00:13:44,059 --> 00:13:47,199
Thus, use references effictively,

232
00:13:47,199 --> 00:13:51,633
and avoid the unnecessary copies
such as this example's.

233
00:13:51,633 --> 00:13:56,705
Here, we have two versions
of the auto-assignment operator.

234
00:13:56,705 --> 00:14:00,541
The standard version, which does
not do any supplementary copies,

235
00:14:00,541 --> 00:14:02,667
is the version we have proposed

236
00:14:02,667 --> 00:14:04,658
in the previous slides.

237
00:14:04,658 --> 00:14:07,100
Here, we have another version
which we will now detail.

238
00:14:07,100 --> 00:14:09,382
This version does between
one and three useless copies.

239
00:14:09,382 --> 00:14:12,158
We are not going to dive into details

240
00:14:12,158 --> 00:14:14,854
but the number of copies depends
on your compiler's options.

241
00:14:15,354 --> 00:14:20,295
Now, let us check this version of
the auto-assignment operator.

242
00:14:20,295 --> 00:14:22,188
First of all, as the return type here,

243
00:14:22,188 --> 00:14:24,071
we have chosen to return a
complex number

244
00:14:24,071 --> 00:14:27,104
instead of a reference to a
complex number.

245
00:14:27,104 --> 00:14:29,754
Then, on the side of
the argument here,

246
00:14:29,754 --> 00:14:31,961
we have also decided to pass
a complex number

247
00:14:31,961 --> 00:14:35,364
instead of a constant
reference.

248
00:14:35,364 --> 00:14:39,297
This means that, when we
have an instruction

249
00:14:39,297 --> 00:14:43,366
such as "z1 += z2"

250
00:14:43,366 --> 00:14:48,890
which corresponds to " z1.operator+= (z2) ",

251
00:14:48,890 --> 00:14:54,998
we have here a passage by value.
This could already imply

252
00:14:54,998 --> 00:15:00,478
a first copy upon the passage
of this argument.

253
00:15:00,478 --> 00:15:02,944
It can be optimized by the compiler,
though it is not certain.

254
00:15:02,944 --> 00:15:06,325
It could thus possibly result in a 
first copy here.

255
00:15:06,325 --> 00:15:12,336
Now, regarding the return value here.

256
00:15:12,336 --> 00:15:14,712
If let us say we wish to use this return value,

257
00:15:14,712 --> 00:15:17,751
this means that we will write
an expression such as

258
00:15:17,751 --> 00:15:23,359
" z3 = (z1 += z2) ".

259
00:15:23,839 --> 00:15:29,035
Here, because of the return value,

260
00:15:29,035 --> 00:15:33,997
a new complex number will be
created since we are not using a reference.

261
00:15:33,997 --> 00:15:37,905
This means another copy

262
00:15:39,565 --> 00:15:41,363
will be created.

263
00:15:41,563 --> 00:15:47,581
Now, let us analyse the body of
the definition of this operator.

264
00:15:47,581 --> 00:15:50,040
Since we have decided to return
a complex number here,

265
00:15:50,040 --> 00:15:54,569
we need to declare it internally
so that we can return it.

266
00:15:54,569 --> 00:15:58,038
The remaining operations here
are as usual

267
00:15:58,038 --> 00:16:03,292
but in order to return a complex number,
we wish to return the current instance.

268
00:16:03,292 --> 00:16:08,379
Thus we will create here a
third copy.

269
00:16:08,849 --> 00:16:10,950
We copy the current instance.

270
00:16:10,950 --> 00:16:15,754
Remember that this is the content pointed
by the pointer "this".

271
00:16:15,754 --> 00:16:21,759
This is indeed the value of the current
instance which we copy here into "z3".

272
00:16:22,159 --> 00:16:23,896
Those are the three possible copies.

273
00:16:23,896 --> 00:16:27,107
Some of these copies may or may not
be optinized by your compiler.

274
00:16:27,107 --> 00:16:29,734
However, in the better version here

275
00:16:29,734 --> 00:16:32,725
we pass firstly by a constant reference.

276
00:16:32,725 --> 00:16:37,327
This means we do not have any copy here,
but a reference on " z2 "

277
00:16:37,327 --> 00:16:39,569
which is passed directly;
thus no copy.

278
00:16:39,569 --> 00:16:43,136
Similarly, regarding the return,
we do not have any copy either.

279
00:16:43,136 --> 00:16:46,476
Indeed, we have passed the
reference to the current instance.

280
00:16:46,476 --> 00:16:50,522
Internally, we have not declared
any supplementary;

281
00:16:50,522 --> 00:16:53,464
thus, we do not have this
third copy either.

282
00:16:54,414 --> 00:16:55,751
To sum up :

283
00:16:55,751 --> 00:17:00,421
be very careful when overloading
operators.

284
00:17:00,421 --> 00:17:02,268
Now, we would like to conclude this video

285
00:17:02,268 --> 00:17:05,507
on the complements about 
operator overloading

286
00:17:05,507 --> 00:17:08,441
by going back to a rather
particular case :

287
00:17:08,441 --> 00:17:11,626
the assignment operator " = ".

288
00:17:11,896 --> 00:17:17,193
This operator, which used, for example,
every time we write " a = b " or " z1 = z2 ",

289
00:17:17,193 --> 00:17:19,401
is a little peculiar

290
00:17:19,401 --> 00:17:22,302
since it is provided by default
for all the classes.

291
00:17:22,302 --> 00:17:24,104
It is a "universal operator".
[The only one, actually.]

292
00:17:24,104 --> 00:17:26,116
You do not have to redefine it;

293
00:17:26,116 --> 00:17:29,802
it already exists for all the classes
you can create.

294
00:17:30,362 --> 00:17:31,710
As we have already said

295
00:17:31,710 --> 00:17:35,744
on the videos on the copy
construction and the destruction,

296
00:17:35,744 --> 00:17:39,769
its possible redefinition, if you need this
operator,

297
00:17:39,769 --> 00:17:43,370
is closely tied to the redefinition
of the copy constructor.

298
00:17:43,370 --> 00:17:46,853
The difference between the copy
construction and the assignment

299
00:17:46,853 --> 00:17:49,083
is that the copy construction
is a construction.

300
00:17:49,083 --> 00:17:51,438
It occurs during an initialization.

301
00:17:51,438 --> 00:17:55,883
On the other hand, the assignment
occurs on already existing instances.

302
00:17:56,633 --> 00:17:59,663
Just like the copy constructor and
the destructor,

303
00:17:59,663 --> 00:18:02,578
its default version does a shallow copy.

304
00:18:02,578 --> 00:18:05,983
We will go back to this
notion of shallow copy vs deep copy

305
00:18:05,983 --> 00:18:07,507
in the next lessons.

306
00:18:07,507 --> 00:18:11,434
However, this shallow copy is sufficient
in most cases,

307
00:18:11,434 --> 00:18:15,456
In most cases, you will not need
to redefine

308
00:18:15,456 --> 00:18:18,658
this assignment operator.

309
00:18:19,168 --> 00:18:22,349
However, it can sometimes be
necessary to plainly suppress

310
00:18:22,349 --> 00:18:23,959
this assignment operator.

311
00:18:23,959 --> 00:18:26,760
Let's assume we have to deal
with a huge class.

312
00:18:26,760 --> 00:18:29,329
Such a class would trigger,
whenever an instance

313
00:18:29,329 --> 00:18:32,388
is created, the usage of a lot
of memory.

314
00:18:32,388 --> 00:18:36,702
Therefore, we do not wish for these
instances to be copiables.

315
00:18:36,702 --> 00:18:39,351
One instance of this class
is plenty sufficient,

316
00:18:39,351 --> 00:18:42,787
and we therefore wish to avoid
dealing with its copies.

317
00:18:42,787 --> 00:18:45,773
To that end, we will suppress the
assignment operator

318
00:18:45,773 --> 00:18:47,283
which is called "operator=".

319
00:18:48,133 --> 00:18:50,335
We will thus use a syntax

320
00:18:50,335 --> 00:18:53,489
we have already encountered when
we were suppressing the copy constructor.

321
00:18:53,489 --> 00:18:57,019
Here is its prototype,

322
00:18:57,019 --> 00:18:59,765
in the class (since
it is an inner overloading).

323
00:18:59,765 --> 00:19:02,257
Behind this prototype, we will
add " =delete ".

324
00:19:02,257 --> 00:19:06,588
This will thus prevent any assignment
between instances

325
00:19:06,588 --> 00:19:08,883
of this huge class.

326
00:19:08,883 --> 00:19:10,943
Now that we are here,
take a look

327
00:19:10,943 --> 00:19:13,086
at the prototype of this
assignment operator.

328
00:19:13,086 --> 00:19:15,580
Of course, it is called "operator=".

329
00:19:15,580 --> 00:19:20,025
It is called when we are dealing with
expressions such as " a = b ".

330
00:19:20,025 --> 00:19:22,537
Let us look at the corresponding call.

331
00:19:22,537 --> 00:19:27,346
it is "a.operator= " 
-- it is an inner overloading.

332
00:19:27,346 --> 00:19:30,752
We cannot use outer overloading for
the assignment operator.

333
00:19:30,752 --> 00:19:33,678
 "a.operator=(b) ":

334
00:19:33,678 --> 00:19:39,156
we are taking a parameter of the
same type as " a ".

335
00:19:39,156 --> 00:19:43,168
Consequently, we will have the same class

336
00:19:43,168 --> 00:19:47,337
as the one in which we are currently
overloading this operator.

337
00:19:47,337 --> 00:19:51,298
In order to avoid a copy, we will
pass the parameter by constant reference.

338
00:19:51,298 --> 00:19:55,191
In C++, it is perfectly valid to write
things such as

339
00:19:55,191 --> 00:19:58,154
" a = b = c ".

340
00:19:58,154 --> 00:20:01,888
In plain words, a = the result of ( b = c ).

341
00:20:01,888 --> 00:20:06,448
Therefore, the expression (b = c) has
itself a return value

342
00:20:06,448 --> 00:20:10,219
which is the value of "b" after the assignment,
that is, the value of "c".

343
00:20:10,579 --> 00:20:15,741
Its type is, just like for " += " or " -=",

344
00:20:15,741 --> 00:20:17,936
the very type of the class

345
00:20:17,936 --> 00:20:21,175
in which we are currently
overloading this operator.

346
00:20:21,175 --> 00:20:24,799
For the same reasons, the return
value will be passed by reference aswell

347
00:20:24,799 --> 00:20:27,835
in order to avoid supplementary copies.

348
00:20:28,455 --> 00:20:32,051
Finally, we have said that it was not
necessary to redefine this operator.

349
00:20:32,051 --> 00:20:34,085
In the vast majority of cases,

350
00:20:34,085 --> 00:20:35,958
the default one will be enough.

351
00:20:35,958 --> 00:20:39,964
However, if you were to redefine
this operator,

352
00:20:39,964 --> 00:20:43,893
we advise you to follow this method
in C++ 2011 :

353
00:20:43,893 --> 00:20:46,688
We will use a function called "swap".

354
00:20:46,688 --> 00:20:50,325
The "swap" function lets us...
swap two arguments.

355
00:20:50,325 --> 00:20:55,798
Therefore, "swap(a, b)" will swap the
values of "a" and "b".

356
00:20:55,798 --> 00:20:58,427
In other words, "a" will contain 
the value of "b",

357
00:20:58,427 --> 00:21:01,561
and "b" will contain the value "a".

358
00:21:01,561 --> 00:21:06,122
You should redefine this "swap" function
for your class.

359
00:21:06,122 --> 00:21:08,826
For example, in our class,

360
00:21:08,826 --> 00:21:14,465
we have the attributes "X" and "Y" of
the types "x" and "y".

361
00:21:14,985 --> 00:21:17,342
We will thus proceed like this :

362
00:21:17,822 --> 00:21:24,288
The "swap" function does not return anything.
Its parameters are two instances of our class.

363
00:21:27,258 --> 00:21:30,974
Since these arguments will be swapped
(thus modified)

364
00:21:30,974 --> 00:21:34,299
we will naturally pass them by reference.

365
00:21:34,299 --> 00:21:40,874
For exemple, we could use the "swap" function
provided by the "utility "library.

366
00:21:40,874 --> 00:21:44,651
At the beginning our program, we would
thus add " #include utility"

367
00:21:44,651 --> 00:21:48,029
in order to use this "swap" function

368
00:21:48,029 --> 00:21:54,509
in order to swap the attributes "x"
of the instances "a" and "b",

369
00:21:55,539 --> 00:21:59,667
the attributes "y" of the
instances "a" and "b",

370
00:21:59,967 --> 00:22:04,050
and so on for all the attributes we
wish to swam.

371
00:22:04,600 --> 00:22:08,946
Now on to the schema we suggest
for the redefinition of

372
00:22:08,946 --> 00:22:10,622
the assignment operator.

373
00:22:10,622 --> 00:22:13,148
It is a little different because of

374
00:22:13,148 --> 00:22:15,509
optimizations reasons in C++ 2011.

375
00:22:15,509 --> 00:22:19,052
These reasons stretch beyond this
course's frame but they allow the compiler

376
00:22:19,052 --> 00:22:20,538
to either avoid the creation of copies

377
00:22:20,538 --> 00:22:23,499
or even to use a so-called move.

378
00:22:23,499 --> 00:22:25,255
Let us not talk about it for now.

379
00:22:25,255 --> 00:22:28,502
This is simply a more advanced
optimization reason.

380
00:22:28,502 --> 00:22:32,056
Here, there is indeed a passing
by value.

381
00:22:32,316 --> 00:22:36,009
We will use this "swap" function
to swap the content

382
00:22:36,009 --> 00:22:40,769
of the current instance with
the content of this variabe here,

383
00:22:40,769 --> 00:22:44,963
which is the parameter
of the assignment operator

384
00:22:44,963 --> 00:22:46,910
we are currently redefining.

385
00:22:46,910 --> 00:22:52,994
Here, all is well: we are writing "a = b",
which resorts to a "swap"

386
00:22:52,994 --> 00:22:59,447
between "a" (which is the current
instance since it is "a.operator= (b),

387
00:23:02,137 --> 00:23:06,202
and " *this " plays the role of "a"),

388
00:23:06,202 --> 00:23:11,098
and "source" which is either a copy
or a move of "b".

389
00:23:11,098 --> 00:23:14,725
Now, we swap these two values.
Ultimately, we have indeed

390
00:23:14,725 --> 00:23:16,683
stored the value of "b" into "a".

391
00:23:16,683 --> 00:23:20,610
Be wary though, this swap is done
with the local copy "source".

392
00:23:20,610 --> 00:23:23,354
This means that what happens is not the
value of "a" being stored inside "b",

393
00:23:23,354 --> 00:23:26,521
but the value of "a" being stored inside "source",

394
00:23:26,521 --> 00:23:31,288
where "source" is where we have copied "b".

395
00:23:31,288 --> 00:23:33,316
Therefore we shall not be polluting "b".

396
00:23:33,316 --> 00:23:38,764
Finally, for the same reasons as for the
operator +=,

397
00:23:38,764 --> 00:23:43,428
we return here a reference on the
current instance.

398
00:23:43,428 --> 00:23:50,079
Indeed, we may very well write things
like "c = a = b".

399
00:23:50,639 --> 00:23:53,707
Voilà! This concludes this
last video sequence,

400
00:23:53,707 --> 00:23:55,679
rather advanced and technical we daresay,

401
00:23:55,679 --> 00:23:56,807
on all the complements

402
00:23:56,807 --> 00:24:00,060
we wished to share on this
sharp topic

403
00:24:00,060 --> 00:24:02,558
of "operator overloading".
