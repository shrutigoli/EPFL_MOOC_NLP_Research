1
00:00:04,291 --> 00:00:06,762
In the previous episodes,
we have seen that the attributes

2
00:00:06,762 --> 00:00:09,313
defined within the class
represent informations

3
00:00:09,313 --> 00:00:11,623
specific to each  instance
of the class.

4
00:00:11,686 --> 00:00:13,907
Let us go back to our little
example of the rectangle.

5
00:00:13,907 --> 00:00:17,366
Each instance of rectangle, each
Rectangle-type object

6
00:00:17,366 --> 00:00:20,143
will have its own width,
its own height.

7
00:00:20,143 --> 00:00:23,393
Those are specific informations
characterizing each rectangle.

8
00:00:23,402 --> 00:00:26,070
Now, what does happen if several
instances of a same class

9
00:00:26,070 --> 00:00:28,160
need to access a same
information,

10
00:00:28,160 --> 00:00:29,503
a common information?

11
00:00:29,560 --> 00:00:31,290
This is the object of today's episode.

12
00:00:31,383 --> 00:00:33,463
In order to illustrate the
problem we are interested in,

13
00:00:33,515 --> 00:00:36,235
let us go back to our example
of counting instances.

14
00:00:36,279 --> 00:00:39,339
We have already had the chance to
study it in the episodes

15
00:00:39,395 --> 00:00:41,715
regarding the construction/destruction
of an object.

16
00:00:42,184 --> 00:00:45,731
Our goal is to account for all
the instances existing

17
00:00:45,731 --> 00:00:47,241
at a given time in a program.

18
00:00:47,313 --> 00:00:50,373
For that, we need to have a
memory area

19
00:00:51,843 --> 00:00:53,786
accessible by every instance.

20
00:00:53,794 --> 00:00:57,364
It will be incremented
whenever an instance is created

21
00:00:57,374 --> 00:01:00,694
and decremented every time an
instance is destroyed.

22
00:01:00,871 --> 00:01:04,004
When we had discussed this problem
for the first time,

23
00:01:04,004 --> 00:01:07,664
the only way we had to define
this memory area,

24
00:01:07,677 --> 00:01:09,792
acessible by every
instance

25
00:01:09,792 --> 00:01:13,782
in order to be incremented
and decremented was to use a global variable.

26
00:01:13,836 --> 00:01:17,335
Formerly, we were not plainly
satisfied

27
00:01:17,335 --> 00:01:20,555
with this declaration of a
global variable.

28
00:01:20,677 --> 00:01:24,877
Indeed, using global variables
tends to be nefarious

29
00:01:24,888 --> 00:01:27,208
in a program; it is a very
poor solution.

30
00:01:27,265 --> 00:01:29,534
A global variable, such as this one,

31
00:01:29,534 --> 00:01:31,474
is not attached to any entity
in the program.

32
00:01:31,553 --> 00:01:34,423
Therefore, violates the principle
of encapsulation

33
00:01:34,485 --> 00:01:36,835
and is a sign of a poor
modularization.

34
00:01:36,902 --> 00:01:40,176
Moreover, this can induce harmful
side effects.

35
00:01:40,176 --> 00:01:42,278
Indeed, such a variable can be
accessed

36
00:01:42,278 --> 00:01:45,598
pretty much everywhere in the program,
without any control.

37
00:01:45,638 --> 00:01:48,678
Therefore, we should avoid
this at all cost.

38
00:01:49,114 --> 00:01:53,878
Alternatively, defining the counter
as an attribute of the rectangle class

39
00:01:53,878 --> 00:01:56,378
is clearly not a good solution
either

40
00:01:56,484 --> 00:01:59,434
since it would mean that each
instance of rectangle

41
00:01:59,465 --> 00:02:02,225
has its own counter. This is clearly
not what we wish.

42
00:02:02,226 --> 00:02:05,166
We wish to have a common area
accessible by every instance.

43
00:02:05,240 --> 00:02:07,630
Therefore, this solution is not
good either.

44
00:02:08,115 --> 00:02:12,155
The solution to this problem is
to define the information we wish to be

45
00:02:12,192 --> 00:02:14,822
common to all instances of
the class

46
00:02:14,871 --> 00:02:17,671
as a class attribute.

47
00:02:18,103 --> 00:02:21,073
Unlike the attributes
relative to instances

48
00:02:21,267 --> 00:02:24,347
(the ones we were used to
define up until now)

49
00:02:24,551 --> 00:02:27,729
a class attribute is an attribute
defined

50
00:02:27,729 --> 00:02:33,959
inside the class, but matched with
the reserved keyword "static".

51
00:02:34,112 --> 00:02:35,872
Typically, let us us imagine a

52
00:02:35,880 --> 00:02:39,970
program where severall Rectangle
instances coexist.

53
00:02:40,000 --> 00:02:41,930
To make things easier, there
will be two.

54
00:02:43,806 --> 00:02:46,026
The situation in the memory
is the following.

55
00:02:46,094 --> 00:02:50,804
The "r1" object has its own

56
00:02:50,816 --> 00:02:53,023
specific values

57
00:02:53,023 --> 00:02:57,523
for its instance attributes :
the height and the width.

58
00:02:59,229 --> 00:03:01,649
The same goes for the "r2" object,

59
00:03:05,073 --> 00:03:06,753
having its own values

60
00:03:06,769 --> 00:03:08,449
for the height and the width.

61
00:03:08,543 --> 00:03:14,793
On the other hand, the class attribute "compteur"
(TN: means "counter")

62
00:03:14,801 --> 00:03:17,231
is a unique memory area

63
00:03:20,091 --> 00:03:22,631
accessible by all the
instances.

64
00:03:22,677 --> 00:03:25,277
However, it only exists once
in the memory.

65
00:03:25,893 --> 00:03:29,462
By the way, please note that the
visibility rules for a "static" attribute

66
00:03:29,462 --> 00:03:32,879
are the sames as the non "static"
attributes.

67
00:03:32,879 --> 00:03:36,119
This means that this memory area

68
00:03:36,372 --> 00:03:39,491
is accessible even if no instance
has been created,

69
00:03:39,491 --> 00:03:42,171
simply through the name of the class.

70
00:03:42,761 --> 00:03:45,722
Very concretely, let us have a program
where we declare a "Rectangle" class,

71
00:03:45,722 --> 00:03:47,762
like this, with a class attribute.

72
00:03:47,778 --> 00:03:51,928
We can access this class attribute without
having previously

73
00:03:51,934 --> 00:03:54,134
created any instance of Rectangle.

74
00:03:54,139 --> 00:03:59,209
This can be done through the following
notation, this one :

75
00:03:59,422 --> 00:04:04,332
We are accessing the variable
of the "Rectangle" class

76
00:04:04,343 --> 00:04:08,903
called "compteur". We are doing this
through the scope resolution operator.

77
00:04:09,631 --> 00:04:12,330
To sum up, in order to
define a class attribute,

78
00:04:12,330 --> 00:04:15,550
we define an attribute and
precede its declaration

79
00:04:15,560 --> 00:04:17,070
with the reserved keyword "static".

80
00:04:17,258 --> 00:04:21,308
We have seen that a class attribute is
shared by all the instances.

81
00:04:22,041 --> 00:04:24,911
It is a unique memory area shared
by all the instances.

82
00:04:25,256 --> 00:04:28,664
This memory area exists even
when we have not created

83
00:04:28,664 --> 00:04:30,544
any instance of this class.

84
00:04:32,359 --> 00:04:34,260
We have seen we can access it

85
00:04:36,730 --> 00:04:38,120
through this notation.

86
00:04:38,856 --> 00:04:41,892
Also, a class attribute can,

87
00:04:41,892 --> 00:04:43,842
like an instance attribute,

88
00:04:43,849 --> 00:04:46,709
be either private or public.

89
00:04:47,179 --> 00:04:49,802
The instance attributes are
typically initialized

90
00:04:49,802 --> 00:04:51,915
upon the objects' initialization.

91
00:04:51,915 --> 00:04:55,575
However, we have seen that a class attribute
may exist independently

92
00:04:55,575 --> 00:04:57,345
from any object's construction.

93
00:04:57,355 --> 00:05:00,545
In that case, how should we proceed
to initialize a class attribute?

94
00:05:01,310 --> 00:05:05,330
To that end, we must resort to
a particular syntax.

95
00:05:06,899 --> 00:05:11,828
Outside the class, we place
an initialization line

96
00:05:11,828 --> 00:05:14,358
with this syntax.
It means :

97
00:05:15,496 --> 00:05:18,097
the "compteur" variable,
of the "Rectangle" class,

98
00:05:18,097 --> 00:05:19,417
of the integer type,

99
00:05:19,430 --> 00:05:21,360
will be initialized to 0.

100
00:05:22,009 --> 00:05:23,979
Such a line of code will appear

101
00:05:24,103 --> 00:05:28,803
outside the "Rectangle" class.

102
00:05:29,508 --> 00:05:31,088
For example, like this.

103
00:05:32,326 --> 00:05:36,296
We will take this line outside the declaration
of the "Rectangle" class.

104
00:05:37,350 --> 00:05:39,590
We resort to a particular syntax

105
00:05:39,591 --> 00:05:45,060
since a class attribute exists even if we
have not declared any instance of this class.

106
00:05:45,060 --> 00:05:47,312
This means we cannot have, for example,
a constructor

107
00:05:47,312 --> 00:05:49,562
be in charge of the required initialization.

108
00:05:50,572 --> 00:05:52,668
Resorting to a class variable in order
to account

109
00:05:52,668 --> 00:05:54,331
for all the instances of a class

110
00:05:54,331 --> 00:05:56,381
is naturally a relatively atypical
example.

111
00:05:56,686 --> 00:05:59,167
Of course, there are many other
situations

112
00:05:59,167 --> 00:06:02,537
where it is useful to share informations
between several instances.

113
00:06:02,666 --> 00:06:05,426
However, most of the time, it will be
a constant.

114
00:06:05,430 --> 00:06:06,540
Let us take an example.

115
00:06:07,036 --> 00:06:09,142
This time, we will move away
from our rectangle example

116
00:06:09,142 --> 00:06:11,532
and imagine a situation where
we need to

117
00:06:11,540 --> 00:06:14,940
reperesent the employees
of a company.

118
00:06:14,982 --> 00:06:16,852
This is more of an administrative
example.

119
00:06:16,915 --> 00:06:22,525
Let us say that an employee is
characterized by an age,

120
00:06:22,532 --> 00:06:24,572
the in-service date.

121
00:06:27,495 --> 00:06:29,945
Also, let us say that there is
an information common

122
00:06:29,945 --> 00:06:33,814
to all employees. This would be the
official pensionable age.

123
00:06:33,814 --> 00:06:37,495
Where should we place this
information on the pensionable age

124
00:06:37,495 --> 00:06:39,545
(for example 65 years) ?

125
00:06:40,439 --> 00:06:44,022
This pensionable age of 65 years
is the same

126
00:06:44,022 --> 00:06:44,992
for all employees.

127
00:06:45,007 --> 00:06:47,730
Let us imagine we start by
declaring it

128
00:06:47,730 --> 00:06:49,890
like an instance attribute,

129
00:06:51,682 --> 00:06:52,732
like this.

130
00:06:56,038 --> 00:06:58,798
This means that, every time we
create an employee,

131
00:07:00,719 --> 00:07:05,069
this employee will have an
age (30 years old)

132
00:07:05,069 --> 00:07:06,679
an in-service date,

133
00:07:08,489 --> 00:07:13,019
and an official pensionable
age (65 years).

134
00:07:13,233 --> 00:07:17,453
Same thing for the second
employee, still with 65 years.

135
00:07:17,727 --> 00:07:19,647
And this as many times

136
00:07:20,906 --> 00:07:24,156
as there are employees,

137
00:07:24,301 --> 00:07:27,431
with the value 65 repeated
every time.

138
00:07:28,457 --> 00:07:31,824
This information is thus uselessly
repeated for each employee.

139
00:07:31,824 --> 00:07:32,925
There is thus code duplication;

140
00:07:32,925 --> 00:07:34,995
this could induce maintenance
troubles.

141
00:07:35,176 --> 00:07:37,686
For example, let us imagine that,
through a change of law,

142
00:07:37,712 --> 00:07:40,981
the pensionable age is changed
to 67 years.

143
00:07:40,981 --> 00:07:43,870
We would thus need to dive
into each instance

144
00:07:43,870 --> 00:07:47,495
and modify this value everywhere.

145
00:07:47,495 --> 00:07:50,215
Obviously, this may beget severe
maintenance problems.

146
00:07:50,558 --> 00:07:53,908
The solution is obviously
to define this information

147
00:07:53,908 --> 00:07:56,308
as a class variable

148
00:07:56,387 --> 00:07:58,030
thanks to the reserved "keyword" static.

149
00:07:58,030 --> 00:08:02,390
Typically, here, "age_retraite"
(TN: means "pensionable_age")

150
00:08:02,390 --> 00:08:04,370
would be a memory area

151
00:08:04,370 --> 00:08:06,299
commonly accessible by
all the instances.

152
00:08:06,299 --> 00:08:08,919
However, it will not be duplicated
in each of the instances.

153
00:08:08,923 --> 00:08:11,153
Typically, this will disapear.

154
00:08:11,232 --> 00:08:14,852
The same goes for each instance.

155
00:08:15,770 --> 00:08:18,064
To sum up, we have seen,
through the previous examples

156
00:08:18,064 --> 00:08:20,581
that the class attributes are
typically very practical

157
00:08:20,581 --> 00:08:24,751
and useful when different objects
(such as our employees)

158
00:08:24,882 --> 00:08:28,982
need to access a common information
(such as the official pensionable age).

159
00:08:29,120 --> 00:08:33,040
We have seen it lets us avoid
information duplication

160
00:08:33,147 --> 00:08:35,921
and permits for a better maintenance
of this information.

161
00:08:35,921 --> 00:08:39,218
Also, please remember the
case we had studied before,

162
00:08:39,218 --> 00:08:41,108
regarding instance counting.

163
00:08:41,123 --> 00:08:43,726
Here, the class variable was defined
as a non-constance

164
00:08:43,726 --> 00:08:45,300
since we need to

165
00:08:45,300 --> 00:08:49,870
decrement/increment this value every
time an object is created is destroyed.

166
00:08:49,883 --> 00:08:52,983
Why, this situation is rather
atypical.

167
00:08:52,994 --> 00:08:55,694
Practically, most of the
class variables

168
00:08:55,764 --> 00:09:01,134
you will encounter will be used to
represent constants useful for

169
00:09:01,139 --> 00:09:02,599
all the instances of a given class.

170
00:09:02,945 --> 00:09:05,955
Now, you know what a class attribute is,

171
00:09:06,095 --> 00:09:07,245
a "static" attribute.

172
00:09:07,285 --> 00:09:09,805
Is it possible to do the same thing
with methods?

173
00:09:09,805 --> 00:09:13,395
The answer is yes, and we will present it for
the sake of completeness,

174
00:09:13,444 --> 00:09:17,470
even though  "static" methods are not
used very frequently.

175
00:09:17,470 --> 00:09:20,350
Also, it is not recommanded to
use them in object-oriented programming.

176
00:09:20,679 --> 00:09:23,519
A "static" method is simply

177
00:09:23,521 --> 00:09:26,065
a method defined inside a class.

178
00:09:26,065 --> 00:09:29,765
This declaration is preceded with
the reserved keyword "static".

179
00:09:30,082 --> 00:09:32,997
In order to call an instance method,
that is, the the methods we were used

180
00:09:32,997 --> 00:09:34,997
to work with until now,

181
00:09:35,002 --> 00:09:38,112
we forced to have previously
created an object.

182
00:09:38,191 --> 00:09:40,741
Only then could we call the method
on this object.

183
00:09:40,950 --> 00:09:43,010
For example, in order to calculate
the surface of a rectangle,

184
00:09:43,055 --> 00:09:45,794
we first need to create a Rectangle-type object.

185
00:09:45,794 --> 00:09:49,014
Only then can we call the calculation
of this rectangle's surface.

186
00:09:49,150 --> 00:09:52,864
On the other hand, a class method
may very well be called

187
00:09:52,864 --> 00:09:56,013
if not object of the class has been

188
00:09:56,013 --> 00:09:56,780
previously declared.

189
00:09:56,780 --> 00:10:01,430
For example, let " A " be a class with
a static method

190
00:10:01,450 --> 00:10:04,028
called "methode1". We may call this method

191
00:10:04,028 --> 00:10:06,868
thanks to the scope resolution
operator

192
00:10:06,992 --> 00:10:11,022
without having previously declared
any A-type object.

193
00:10:11,498 --> 00:10:12,912
Here, we simply say

194
00:10:12,912 --> 00:10:16,742
that we are calling "method1" of the
class "A".

195
00:10:16,964 --> 00:10:20,704
Of course, such an instruction is not
valid for non-static methods.

196
00:10:20,829 --> 00:10:22,656
For example, here, in the class "A",

197
00:10:22,656 --> 00:10:24,729
we have a second method : "methode2".

198
00:10:24,729 --> 00:10:26,669
It has not been declared as "static".

199
00:10:26,775 --> 00:10:30,274
If we try to call it only
through the name of the class,

200
00:10:30,274 --> 00:10:32,384
without passing by the creation
of an instance,

201
00:10:32,385 --> 00:10:33,725
we will get an error.

202
00:10:33,820 --> 00:10:36,150
In order to call the non-static "methode2",

203
00:10:36,178 --> 00:10:39,348
we need an previously declared
A-type object

204
00:10:39,404 --> 00:10:41,642
on which to call "methode2".

205
00:10:41,642 --> 00:10:45,182
This is what we are doing here to
calculate the surface

206
00:10:45,182 --> 00:10:46,732
of a given rectangle "r".

207
00:10:46,913 --> 00:10:48,306
By the way, please note

208
00:10:48,306 --> 00:10:50,966
that a "static" method method
may be called

209
00:10:50,966 --> 00:10:53,736
either through the name of the class

210
00:10:53,743 --> 00:10:55,923
(independently of the any instance's
creation,

211
00:10:55,927 --> 00:10:57,235
as we have done here)

212
00:10:57,235 --> 00:10:59,960
or it can be called through
an instance

213
00:10:59,960 --> 00:11:01,290
(if such an instance exists).

214
00:11:01,296 --> 00:11:03,456
Therefore, such an instruction is valid

215
00:11:03,491 --> 00:11:06,141
albeit not frequent or recommanded.

216
00:11:06,150 --> 00:11:09,571
Finally, this kind of instruction,
accessing a "static" member

217
00:11:09,571 --> 00:11:11,304
through an instance is also
possible

218
00:11:11,304 --> 00:11:15,844
for the attributes (if this attribute is
accessible, of course).

219
00:11:15,849 --> 00:11:20,427
The fact that a class method may be
called independently

220
00:11:20,427 --> 00:11:22,014
of the creation of any instance

221
00:11:22,014 --> 00:11:25,134
begets a few restrictions regarding
what we may do within

222
00:11:25,148 --> 00:11:27,008
such a method.

223
00:11:28,306 --> 00:11:32,776
Indeed, since a class method cannot
presuppose the existence

224
00:11:32,780 --> 00:11:35,130
of the current object on
which it is applied,

225
00:11:35,135 --> 00:11:37,555
it cannot itself use

226
00:11:37,557 --> 00:11:41,407
a method or attribute presupposing
the existence of an object.

227
00:11:41,550 --> 00:11:45,250
It will not be able to use an
instance method or attribute.

228
00:11:46,008 --> 00:11:48,338
In other words, this means
that a class method

229
00:11:48,348 --> 00:11:51,358
can only access otehr class
methods and attributes.

230
00:11:51,395 --> 00:11:54,713
A "static" method can itself only
use "static" members.

231
00:11:54,713 --> 00:11:57,842
We may see class methods

232
00:11:57,842 --> 00:12:01,592
as simple usual functions that have been
placed inside a class.

233
00:12:02,174 --> 00:12:05,192
In languages such as C++, where
there is a non-object layer

234
00:12:05,192 --> 00:12:07,079
where we can use usual
functions

235
00:12:07,079 --> 00:12:09,199
without passing by the creation
of classes,

236
00:12:09,228 --> 00:12:13,497
the use of class methods is warranted
only

237
00:12:13,497 --> 00:12:15,463
in very particular situations.

238
00:12:15,463 --> 00:12:17,084
We can imagine, as an example,

239
00:12:17,084 --> 00:12:19,204
the need to create a class method

240
00:12:19,213 --> 00:12:22,743
in order to print a few values
of class attributes.

241
00:12:22,782 --> 00:12:26,391
We can imagine the need
to define a class method

242
00:12:26,391 --> 00:12:29,350
in order to manipulate class attributes,
"static" attributes

243
00:12:29,350 --> 00:12:31,094
who are non constant
and private.

244
00:12:31,094 --> 00:12:33,094
In this case, it is necessary to define
such methods.

245
00:12:33,149 --> 00:12:37,921
In general, it is almost always
preferable to use

246
00:12:37,921 --> 00:12:39,861
usual functions in C++

247
00:12:39,861 --> 00:12:41,881
rather than class methods.

248
00:12:41,944 --> 00:12:45,924
Above, we should absolutely avoid
to have "statics" grow rampant

249
00:12:45,975 --> 00:12:46,829
in a program.

250
00:12:46,829 --> 00:12:47,539
Whyso?

251
00:12:47,543 --> 00:12:51,190
Indeed, since a "static" member can be called
independently of the creation

252
00:12:51,190 --> 00:12:55,000
of any object, it weakens our
oriented-object approach.

253
00:12:55,135 --> 00:12:58,236
Voilà, this concludes our presentation
on "static" members

254
00:12:58,236 --> 00:13:00,556
in a class; methods and attributes both.

255
00:13:00,556 --> 00:13:01,979
We have seen that, practically,

256
00:13:01,979 --> 00:13:05,969
most of the "static" attributes we will
encounter will be constants.

257
00:13:06,012 --> 00:13:09,942
Also, we should remain careful
not to overuse "statics".
