1
00:00:03,980 --> 00:00:05,409
In this episode,

2
00:00:05,409 --> 00:00:08,358
we will keep discussing operator
overloading.

3
00:00:08,358 --> 00:00:11,668
This time, we will focus on the
inner overloading.

4
00:00:11,668 --> 00:00:13,238
In the previous episodes,

5
00:00:13,238 --> 00:00:16,559
we have indeed learnt that an
operator could be overloaded

6
00:00:16,559 --> 00:00:18,299
either outside a class

7
00:00:18,300 --> 00:00:20,589
(in this case, it is a usual, non-member, function)

8
00:00:20,588 --> 00:00:23,229
or inside a class
(in this case,

9
00:00:23,230 --> 00:00:26,599
it is a member function belonging
to a class).

10
00:00:26,599 --> 00:00:30,068
For example, let us say we have defined
the operator "+"

11
00:00:30,068 --> 00:00:32,829
for complex numbers through
a function.

12
00:00:32,829 --> 00:00:39,120
Then, when we write something
like "z1 + z2" where z1 an z2 are "Complex",

13
00:00:39,120 --> 00:00:44,149
this corresponds to a call


14
00:00:44,149 --> 00:00:46,110
to the function "operator+ "

15
00:00:46,110 --> 00:00:50,249
taking z1 and z2 as arguments.

16
00:00:50,249 --> 00:00:55,450
The first operand corresponds
to the first argument of the function,

17
00:00:55,450 --> 00:00:59,900
and the second to the second
argument of the function.

18
00:00:59,900 --> 00:01:04,087
A possible alternative would
be to defne the operator "+"

19
00:01:04,087 --> 00:01:06,280
through an inner overloading.

20
00:01:06,280 --> 00:01:09,019
This means we will place
this operator's definition

21
00:01:09,019 --> 00:01:11,369
inside the "Complexe" class.

22
00:01:11,370 --> 00:01:13,080
Since it is a member function,

23
00:01:13,080 --> 00:01:16,040
we will need to call it
through an object.

24
00:01:16,040 --> 00:01:21,299
Therefore, when we write
this,

25
00:01:21,299 --> 00:01:26,019
it does not correspond to the same thing
as in the case of outer overloading.

26
00:01:26,019 --> 00:01:31,240
This will be translated to
a call to a member function

27
00:01:32,500 --> 00:01:35,189
which looks like this.

28
00:01:35,189 --> 00:01:41,269
The first operand is the current object
on which the "operator +" is applied.

29
00:01:41,269 --> 00:01:47,099
The second operand will correspond
to the argument of the member function.

30
00:01:47,099 --> 00:01:49,690
As we can see, in the case
of inner overloading,

31
00:01:49,690 --> 00:01:52,329
we only need one single
argument

32
00:01:52,328 --> 00:01:55,569
which corresponds to the second operand.

33
00:01:55,569 --> 00:02:00,728
Let us sum up. If we wish to realize the
inner overloading of a given operator,

34
00:02:00,728 --> 00:02:06,539
we will place the member function "OperatorOP"
inside a class.

35
00:02:06,540 --> 00:02:10,080
Just as we did for other member functions, we will
simply place,

36
00:02:10,080 --> 00:02:12,700
inside the class,
the prototype of the operator.

37
00:02:12,700 --> 00:02:17,789
Then, we will give the operator's
definition outiside the class.

38
00:02:17,788 --> 00:02:20,458
In this external definition,
the operator will have

39
00:02:20,459 --> 00:02:23,239
to be bound to the class

40
00:02:23,239 --> 00:02:25,469
it belongs to through to scope
resolution operator;


41
00:02:25,469 --> 00:02:28,849
this is essentially the same as
the other member functions we have seen.

42
00:02:28,849 --> 00:02:30,769
A keypoint you have to
remember

43
00:02:30,769 --> 00:02:33,909
is that the first operant of such an
operator is the current instance.

44
00:02:33,909 --> 00:02:39,010
Therefore, this instance will not
be passed as parameter.

45
00:02:40,870 --> 00:02:44,939
Member functions will only receive as parameter

46
00:02:44,939 --> 00:02:48,098
a possible second operand.

47
00:02:48,098 --> 00:02:52,480
Let us now see a concrete example :
the operator " += ".

48
00:02:52,480 --> 00:02:55,948
We will proceed to its inner overloading
in the "Complexe" class.

49
00:02:55,949 --> 00:02:59,899
Usually, the " += " operator has
the following semantics :

50
00:02:59,899 --> 00:03:07,388
" add to z1 the value of z2 ".

51
00:03:07,388 --> 00:03:11,389
Unlike the operator " + " which we have
discussed previously

52
00:03:11,400 --> 00:03:13,949
and was tasked to create a new
"Complexe"

53
00:03:13,949 --> 00:03:16,590
from these two existing complex numbers
(by summing them),

54
00:03:16,590 --> 00:03:24,359
the operator " += " will modify
its first operand.

55
00:03:24,359 --> 00:03:27,838
As we can see, the " += " operator we have
chosen as example

56
00:03:27,838 --> 00:03:31,500
is an operator very close to the
objects of the "Complexe" class;

57
00:03:31,500 --> 00:03:34,340
indeed it has to modify their
content.

58
00:03:34,340 --> 00:03:38,000
In such a case, we usually resort
to an inner overloading.

59
00:03:38,000 --> 00:03:41,359
This is translated into the following code.

60
00:03:41,359 --> 00:03:46,049
The operator " += " is thus defined as
a member function of the "Complexe" class.

61
00:03:46,049 --> 00:03:50,158
Its only argument is the
second operand.

62
00:03:50,158 --> 00:03:54,199
For the purpose of readability, we will
place the definition outside the class.

63
00:03:54,199 --> 00:03:56,009
However, this is not
mandatory.

64
00:03:56,009 --> 00:03:58,718
The definition can be written like this :

65
00:03:58,718 --> 00:04:04,779
To the attribute "x" of the current
object (that is, the first operand),

66
00:04:04,779 --> 00:04:09,609
we will add the value of the attribute "x"
of the second operand.

67
00:04:09,609 --> 00:04:14,189
We will do the same
for the second attribute.

68
00:04:14,189 --> 00:04:16,888
Now, we know how to define
the operator " += "

69
00:04:16,888 --> 00:04:20,498
by using the inner overloading.
Now, we are wondering :

70
00:04:20,499 --> 00:04:27,250
How can we define the operators " += " and
" + " one with the other.

71
00:04:27,250 --> 00:04:32,620
The fundamental idea is to establish a
semantic link between the two.

72
00:04:32,620 --> 00:04:37,620
This link exists anyway, and we would
like to set it up

73
00:04:37,620 --> 00:04:41,149
so that our way to add complex numbers

74
00:04:41,149 --> 00:04:44,678
remains coherent from one
operator to the other.

75
00:04:44,678 --> 00:04:48,209
By nature, the operator " += " requires les
processing that its " + " counterpart;

76
00:04:48,209 --> 00:04:50,799
indeed it does not create any
new complex number.

77
00:04:50,800 --> 00:04:56,320
It is rather natural to define the more
demanding according to the less demanding

78
00:04:56,320 --> 00:04:59,449
rather than the opposite. This is
what we will do now.

79
00:04:59,449 --> 00:05:04,459
In order to understand the body of the
"operator+" member function redefined through " += "

80
00:05:04,459 --> 00:05:07,968
in the way we have proposed here, we
will use a simple example.

81
00:05:07,968 --> 00:05:10,988
Let us suppose we have two
complex numbers

82
00:05:12,749 --> 00:05:14,269
c1 and c2

83
00:05:18,059 --> 00:05:20,629
initialized in a certain way.

84
00:05:25,809 --> 00:05:30,968
Now, we are trying to write the algorithm
to compute the sum of c1 and c2

85
00:05:30,968 --> 00:05:35,279
using the operator " += " for
complex numbers.

86
00:05:35,279 --> 00:05:41,208
We thus wish to compute a new "Complexe",
let us call it "tmp";

87
00:05:41,208 --> 00:05:44,150
it will be the sum of c1 and c2.

88
00:05:44,150 --> 00:05:49,068
Let us ponder on how to compute the
value of "tmp" through the " += " operator.

89
00:05:49,068 --> 00:05:54,499
We realize we simply have to copy
the value of c1 into "tmp"

90
00:05:54,509 --> 00:05:59,090
and apply the operator " += " to "tmp"

91
00:05:59,090 --> 00:06:01,990
in order to add the value of c2.

92
00:06:01,990 --> 00:06:04,728
Ultimately, we obtain, inside "tmp"

93
00:06:04,728 --> 00:06:08,359
the sum of "c1" and "c2" by
proceeding this way.

94
00:06:08,360 --> 00:06:11,129
In order to make sure of this,
let's make a little drawing.

95
00:06:11,129 --> 00:06:16,500
The declaration of this "Complexe" will
correspond to this situation in the memory.

96
00:06:16,500 --> 00:06:20,949
We have a Complex-type
object c1.

97
00:06:20,949 --> 00:06:26,549
Its members " x " and " y " will
be initialized like this.

98
00:06:28,240 --> 00:06:30,680
Similarly,

99
00:06:30,680 --> 00:06:35,510
the object c2 will look like this.

100
00:06:37,939 --> 00:06:39,389
The "tmp" object

101
00:06:46,110 --> 00:06:50,139
first build on this line by copying
from c1,

102
00:06:50,139 --> 00:06:54,728
Its members x and y will initially

103
00:06:54,728 --> 00:06:58,288
be the values copied from c1.

104
00:07:01,348 --> 00:07:04,449
Then, we will apply the

105
00:07:04,449 --> 00:07:07,110
operator " += " to "tmp".

106
00:07:07,110 --> 00:07:10,669
Thus, executing this line,

107
00:07:10,668 --> 00:07:17,288
we will apply the operator "+= ".
Thus, we will add to the " x " of "tmp"

108
00:07:17,288 --> 00:07:21,510
the value of the " x " of c2.

109
00:07:22,460 --> 00:07:26,319
We thus get the value 8.0 here.

110
00:07:26,959 --> 00:07:33,519
Also, we will add to the " y " of "tmp"
the value of the " y " of c2.

111
00:07:35,079 --> 00:07:40,038
Thus the value 5 here.

112
00:07:40,038 --> 00:07:44,749
We can clearly see that the "Complexe"
computed through the operator " += "

113
00:07:44,749 --> 00:07:50,520
corresponds indeed to the sum
of c1 and c2.

114
00:07:54,379 --> 00:07:57,128
This is exactly this algorithm applied

115
00:07:57,128 --> 00:08:00,819
in the version you can see here.
There is one subtlety,

116
00:08:00,819 --> 00:08:04,618
related to this passage by value here.

117
00:08:04,619 --> 00:08:07,768
Indeed, we are using this header
for "operator+",

118
00:08:07,768 --> 00:08:10,468
which is the recommended header
since C++ 2011.

119
00:08:10,468 --> 00:08:13,528
Thus, when we write something
like "c1 + c2"

120
00:08:13,528 --> 00:08:16,998
(thus calling this operator " + " )

121
00:08:16,999 --> 00:08:21,879
what will happen is that the value of
the "Complexe" c1 will be copied into z1.

122
00:08:21,879 --> 00:08:27,540
z1 is an area local to the function
"operator+"

123
00:08:27,540 --> 00:08:30,269
on which we can work and which
will be finally returned.

124
00:08:30,269 --> 00:08:31,658
We thus realize that

125
00:08:31,658 --> 00:08:37,730
z1 plays exactly the role of "tmp".

126
00:08:37,730 --> 00:08:43,670
Therefore, it is pointless to redefine,
in the body of "operator+",

127
00:08:43,670 --> 00:08:45,380
another intermediate variable

128
00:08:45,380 --> 00:08:48,028
in which we could copy
the first operand here.

129
00:08:48,028 --> 00:08:52,549
This role is already fulfilled
by the parameter passed by value here.

130
00:08:52,549 --> 00:08:56,189
In other words, the copy of the first
operand c1,

131
00:08:56,190 --> 00:08:58,879
done in an intermediate variable "tmp"

132
00:08:58,879 --> 00:09:02,889
is realized de facto upon
this  by-value call here.

133
00:09:02,889 --> 00:09:06,519
Naturally, the algorithm described here
is placed inside a function.

134
00:09:06,519 --> 00:09:10,109
Once the computation is complete,
the value will be returned;

135
00:09:10,109 --> 00:09:12,399
this is precisely done here.

136
00:09:12,399 --> 00:09:17,110
We thus get a definition of
the operator " + "

137
00:09:17,110 --> 00:09:21,229
done through  " += ". This definition
is very concise, elegant

138
00:09:21,229 --> 00:09:24,399
and mostly establishes a semantic
link

139
00:09:24,399 --> 00:09:27,769
between the operator " += " and
the operator " + ".

140
00:09:27,769 --> 00:09:32,480
These two operators should not
be defined separately.

141
00:09:32,480 --> 00:09:36,509
Please note that this way to define
the header using a passage by value

142
00:09:36,509 --> 00:09:41,019
lets the modern compiler C++ 2011
to process many an optimization.

143
00:09:41,019 --> 00:09:44,006
By the way, this new version
of the operator " + ",

144
00:09:44,006 --> 00:09:45,693
defined through " += ",

145
00:09:45,693 --> 00:09:48,520
has the edge of sparing us the
trouble of using getters

146
00:09:48,520 --> 00:09:51,569
which were necessary for the
external function

147
00:09:51,569 --> 00:09:55,610
to access the private attributes of "Complexe".

148
00:09:55,610 --> 00:09:59,199
These getters are not necessary anymore
which is good for the encapsulation.

149
00:09:59,199 --> 00:10:01,089
We know that getters running
rampant

150
00:10:01,089 --> 00:10:04,125
can nefarious to the
encapsulation.

151
00:10:04,125 --> 00:10:07,909
Thus, we can use outer overloading
or inner overloading for operators.

152
00:10:07,909 --> 00:10:10,809
In certain cases though, we do not
have a choice as to how to proceed.

153
00:10:10,809 --> 00:10:12,229
For example,

154
00:10:12,230 --> 00:10:15,889
for the printing operator we have
seen in the previous episode,

155
00:10:15,889 --> 00:10:18,709
we can only overload it with
a (non-member) function.

156
00:10:18,709 --> 00:10:21,519
In some other cases, we may choose
between the two.

157
00:10:21,519 --> 00:10:24,779
For example, regarding the operator " + ",
which we have encountered already,

158
00:10:24,779 --> 00:10:29,379
it is perfectly possible to define it
through an inner overloading,

159
00:10:29,379 --> 00:10:30,240
like this.

160
00:10:30,240 --> 00:10:34,230
It is also possible to define it
through an outer overloading;

161
00:10:34,230 --> 00:10:37,350
we have done just that in
the previous examples.

162
00:10:37,350 --> 00:10:38,340
Be careful though,

163
00:10:38,340 --> 00:10:41,680
we have seen that, during the
external definition of an operator,

164
00:10:41,679 --> 00:10:44,739
we could be tempted to use
the "friend".

165
00:10:44,740 --> 00:10:47,200
In the previous examples,

166
00:10:47,200 --> 00:10:48,299
we have always avoided to do so.

167
00:10:48,299 --> 00:10:50,698
Some people could be tempted
to do it nonetheless;

168
00:10:50,698 --> 00:10:53,269
it is a very poor idea, breaking
the encapsulation

169
00:10:53,269 --> 00:10:55,509
and not a good way to proceed.

170
00:10:55,509 --> 00:10:59,229
This leads us to a few recommendations
regarding methodology.

171
00:10:59,229 --> 00:11:01,990
This concerns the choice
between inner overloading

172
00:11:01,990 --> 00:11:05,160
and outer overloading for
a given operator.

173
00:11:05,160 --> 00:11:06,520
First recommendation :

174
00:11:06,520 --> 00:11:10,580
it is usually recommended to
prefer the outer overloading

175
00:11:10,580 --> 00:11:14,009
every time we can do so without
having to resort to the "friend" keyword

176
00:11:14,009 --> 00:11:16,309
in the body of the function.

177
00:11:16,309 --> 00:11:18,869
This means, every time we can
write the operator

178
00:11:18,869 --> 00:11:23,589
through the member functions of the classe's interface
without useless copies.

179
00:11:23,590 --> 00:11:27,820
This was the case with the operator " + " which
we could define

180
00:11:27,820 --> 00:11:29,109
without resorting to the "friend" keyword.

181
00:11:29,109 --> 00:11:33,108
In this case, it is thus recommended
to define this operator

182
00:11:33,108 --> 00:11:36,660
through an outer overloading,
with a function.

183
00:11:36,659 --> 00:11:39,030
On the other hand, if the operator
is close to the class,

184
00:11:39,030 --> 00:11:41,720
as was the case before with the
operator " += ",

185
00:11:41,720 --> 00:11:44,169
which required the instance to
be modified

186
00:11:44,169 --> 00:11:45,809
and thus internal access,

187
00:11:45,809 --> 00:11:48,850
and possibly supplementary
useless copies.

188
00:11:48,850 --> 00:11:50,009
Then, in this case,

189
00:11:50,009 --> 00:11:53,899
it is much better to use
inner overloading.

190
00:11:53,899 --> 00:11:56,119
You now know all the basics

191
00:11:56,119 --> 00:12:00,330
on operator overloading.
In the last episode,

192
00:12:00,330 --> 00:12:03,509
we will discuss the sharper
aspects

193
00:12:03,509 --> 00:12:06,589
and will bring the light on a few
points,

194
00:12:06,589 --> 00:12:07,669
left in the dark until now.
