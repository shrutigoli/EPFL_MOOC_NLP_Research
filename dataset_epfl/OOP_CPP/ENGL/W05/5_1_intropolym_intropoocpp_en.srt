1
00:00:04,105 --> 00:00:06,608
In this episode, we will go over
the details of

2
00:00:06,608 --> 00:00:09,743
one of the important applications of
polymorphism, known as

3
00:00:09,743 --> 00:00:12,035
"heterogeneous containers"

4
00:00:12,035 --> 00:00:16,484
Up to now, we have seen that
inheritance and virtual methods allow us

5
00:00:16,484 --> 00:00:20,653
to define generic functions accessible to
all instances of a class hierarchy

6
00:00:20,653 --> 00:00:23,263
This is polymorphism.

7
00:00:23,263 --> 00:00:26,783
We learned that if we want to
use functions or methods

8
00:00:26,783 --> 00:00:28,694
in a polymorphic way,

9
00:00:28,694 --> 00:00:33,003
that is, apply these functions to objects
in a polymorphic way,

10
00:00:33,003 --> 00:00:36,970
then these objects must be
passed by reference.

11
00:00:36,970 --> 00:00:40,810
What if we have a set of objects,
a collection of objects (a.k.a. an "container")

12
00:00:40,810 --> 00:00:44,394
belonging to a hierarchy which we
wish to be able to manipulate

13
00:00:44,394 --> 00:00:46,243
in a polymorphic way?

14
00:00:46,243 --> 00:00:48,463
This is known as a "heterogeneous
container".

15
00:00:48,463 --> 00:00:52,687
Meaning that each object stored in the
container, in the set

16
00:00:52,687 --> 00:00:55,492
can have slightly different,
specific behavior.

17
00:00:56,882 --> 00:01:01,051
Let's illustrate this with the example
of our game with the characters.

18
00:01:01,051 --> 00:01:05,007
We had a Personnage class with a certain
number of members

19
00:01:05,007 --> 00:01:08,468
and specific methods, and different
subclasses:

20
00:01:08,468 --> 00:01:12,138
thieves, magicians, warriors etc,
who were all characters.

21
00:01:12,138 --> 00:01:17,248
We wanted to put them in a game that
would contain several characters.

22
00:01:17,248 --> 00:01:20,527
So we would have a collection of
characters, but we want each

23
00:01:20,527 --> 00:01:23,784
character to behave according to
their real nature.

24
00:01:23,784 --> 00:01:26,615
A warrior will behave as a warrior,
a thief as a thief, etc.

25
00:01:26,615 --> 00:01:29,319
So this collection will be "heterogeneous".

26
00:01:29,319 --> 00:01:31,759
How do we define the game
in this case?

27
00:01:31,759 --> 00:01:34,641
We could define the game
like this, of course:

28
00:01:34,641 --> 00:01:38,839
having a specific container for each
of the subclasses, that is,

29
00:01:38,839 --> 00:01:42,173
having a container for all
of the warriors

30
00:01:42,173 --> 00:01:45,162
one for the magicians, etc.

31
00:01:46,572 --> 00:01:50,655
Then we could display all of the
warriors through a method

32
00:01:50,655 --> 00:01:52,613
allowing to display the warriors,

33
00:01:52,613 --> 00:01:56,359
display all the magicians through another
specific method, etc.

34
00:01:56,359 --> 00:01:58,905
We could add a warrior to the game,

35
00:01:58,905 --> 00:02:02,741
or add a magician, a thief, etc.

36
00:02:02,741 --> 00:02:05,447
This solution is possible 
and in some cases,

37
00:02:05,447 --> 00:02:09,429
it will be necessary to differentiate
between the subclasses

38
00:02:09,429 --> 00:02:13,033
and to have specific containers
for each of the subclasses.

39
00:02:13,033 --> 00:02:15,598
They will not be heterogeneous containers.

40
00:02:15,598 --> 00:02:19,901
There would be as many specific containers
as subclasses.

41
00:02:19,901 --> 00:02:24,598
That solution is quite possible, but we
could imagine

42
00:02:24,598 --> 00:02:26,013
a different solution.

43
00:02:26,013 --> 00:02:28,263
It depends on the context, on
the needs of the program,

44
00:02:28,263 --> 00:02:32,394
where we could imagine managing all
the characters in a global way,

45
00:02:32,394 --> 00:02:36,792
to manage them generically in a
container of characters.

46
00:02:36,792 --> 00:02:41,005
These characters would have their
own specificities,

47
00:02:41,005 --> 00:02:43,104
so we would have a heterogeneous
container.

48
00:02:43,104 --> 00:02:46,655
In that case, we would define
the "Jeu" class like this

49
00:02:46,655 --> 00:02:51,712
We would have a collection of characters,
in the form of a vector

50
00:02:51,712 --> 00:02:53,337
which would group all our characters.

51
00:02:53,337 --> 00:02:55,474
We would only have one
"afficher" method

52
00:02:55,474 --> 00:02:57,909
that would display all of
the characters.

53
00:02:57,909 --> 00:03:02,098
And we would have a generic method here,
"ajouter_personnage" which would allow us

54
00:03:02,098 --> 00:03:04,879
to add a generic character to
the collection.

55
00:03:04,879 --> 00:03:08,206
In this context, we would want each
of the characters to have

56
00:03:08,206 --> 00:03:12,291
their own behavior and so if
"personnage[i]" is a warrior,

57
00:03:12,291 --> 00:03:18,736
then the method "personnage[i].afficher"
would call the afficher method of the

58
00:03:18,736 --> 00:03:19,905
warrior subclass.

59
00:03:19,905 --> 00:03:22,965
We would want to have
a polymorphic behavior

60
00:03:22,965 --> 00:03:25,297
for the characters stored in the game.

61
00:03:25,297 --> 00:03:29,571
Unfortunately, the code we have
present up til now does not allow

62
00:03:29,571 --> 00:03:32,114
polymorphic behavior. Indeed,
here we have

63
00:03:32,114 --> 00:03:37,176
a vector of characters and
we access the characters

64
00:03:37,176 --> 00:03:42,806
directly without passing through a reference
or a pointer.

65
00:03:42,806 --> 00:03:45,863
However, remember that
polymorphic behavior is only possible

66
00:03:45,863 --> 00:03:49,751
with virtual methods, as well as

67
00:03:49,751 --> 00:03:52,661
either pointers or references.

68
00:03:52,661 --> 00:03:54,370
Which one should we use here?

69
00:03:54,370 --> 00:03:57,778
I'll remind you of a general piece of advice
concerning pointers and references:

70
00:03:57,778 --> 00:04:00,208
Use references whenever you can,

71
00:04:00,208 --> 00:04:02,730
and pointers when you must.

72
00:04:02,730 --> 00:04:06,226
Here, the idea would be to
use a set of references.

73
00:04:06,226 --> 00:04:10,526
Unfortunately, we cannot put references
in a vector

74
00:04:10,526 --> 00:04:13,954
nor in any standard C++ container.

75
00:04:13,954 --> 00:04:17,630
The technical reasons for this are beyond
the scope of this course.

76
00:04:17,630 --> 00:04:24,289
We are forced to use pointers here.

77
00:04:24,289 --> 00:04:28,796
So we will change the implementation
of our Jeu class to have

78
00:04:28,796 --> 00:04:32,582
a vector of pointers to characters.

79
00:04:32,582 --> 00:04:36,511
To have polymorphic behavior for our characters,
we will have

80
00:04:36,511 --> 00:04:39,175
an vector of pointers-to-Personnage.

81
00:04:39,175 --> 00:04:41,834
The question we could ask ourselves
here is, do we want to use

82
00:04:41,834 --> 00:04:47,232
"C-style" pointers or "smart pointers",
C++11 pointers?

83
00:04:47,232 --> 00:04:50,524
So here is an alternative,
a C++11 version.

84
00:04:50,524 --> 00:04:53,128
We recommend you use
this second approach.

85
00:04:53,128 --> 00:04:57,195
We will detail the reasons for this choice
in a extra, optional episode

86
00:04:57,195 --> 00:05:01,283
which will follow this episode.

87
00:05:01,283 --> 00:05:06,675
If you follow our su"ggestion and
use "smart pointers

88
00:05:06,675 --> 00:05:12,755
in the C++11 style, you will define a vector
of unique pointers to Personnage.

89
00:05:12,755 --> 00:05:16,419
To use unique pointers, remember
to include

90
00:05:16,419 --> 00:05:18,685
the <i>memory</i> library.

91
00:05:18,685 --> 00:05:21,988
For those who would like reminders
on pointers, we have uploaded

92
00:05:21,988 --> 00:05:25,095
all of the courses that we gave on pointers

93
00:05:25,095 --> 00:05:29,520
from our previous MOOC, Introduction
to Programming.

94
00:05:29,520 --> 00:05:32,513
I encourage you to

95
00:05:32,513 --> 00:05:35,256
review these courses if necessary.

96
00:05:35,466 --> 00:05:39,310
So here, we could use either solution.

97
00:05:39,310 --> 00:05:42,501
In any case, note that it is
pointers that

98
00:05:42,501 --> 00:05:44,936
will be stored in this container.

99
00:05:44,936 --> 00:05:49,700
The "personnage" vector here is a
vector of pointers, and no longer

100
00:05:49,700 --> 00:05:52,848
of instances directly.
This will have some influence

101
00:05:52,848 --> 00:05:57,476
on the design and execution of
the game, since the instances

102
00:05:57,476 --> 00:06:00,502
are now outside of the Jeu instance.

103
00:06:00,502 --> 00:06:04,870
In Jeu, we only have pointers
to the instances.

104
00:06:04,870 --> 00:06:09,728
How do we continue developing our Jeu
class and adding

105
00:06:09,728 --> 00:06:13,607
these methods for displaying or adding
characters, for example?

106
00:06:13,607 --> 00:06:18,130
The easiest is to first look at how
we will use this game, this instance of Jeu.

107
00:06:18,130 --> 00:06:22,510
So, we would declare a game, an instance
of Jeu, and imagine that

108
00:06:22,510 --> 00:06:25,121
we want to add a character.

109
00:06:25,121 --> 00:06:29,789
But we have to add a pointer.
The easiest is to add a pointer

110
00:06:29,789 --> 00:06:35,161
allocated dynamically with a "new".
For example here, we create a new warrior,

111
00:06:35,161 --> 00:06:39,432
"new Guerrier", which will return a new
pointer to a warrior.

112
00:06:39,432 --> 00:06:42,451
So in memory, we would have
the following situation:

113
00:06:42,451 --> 00:06:46,975
a <i>Jeu</i> which has a
set of pointers.

114
00:06:46,975 --> 00:06:48,942
At first, it is completely empty.

115
00:06:48,942 --> 00:06:54,323
Then, we create a warrior in
memory

116
00:06:54,323 --> 00:07:00,186
and the "new" would return a pointer
to this warrior that we would store

117
00:07:00,186 --> 00:07:02,078
in our container.

118
00:07:02,640 --> 00:07:05,864
So the prototypes for our methods
would be:

119
00:07:05,864 --> 00:07:09,996
here, a "ajouter_personnage" (TN: means
"add_character") method that would

120
00:07:09,996 --> 00:07:12,655
take a pointer to Personnage.

121
00:07:12,655 --> 00:07:16,970
This is what it receives, as new returns
a C-style pointer to a Personnage.

122
00:07:16,970 --> 00:07:20,609
Then the afficher method which
doesn't pose any problems,

123
00:07:20,609 --> 00:07:22,438
which displays all the characters.

124
00:07:22,438 --> 00:07:27,949
So we would have the usual prototype
for this display method.

125
00:07:27,949 --> 00:07:30,778
Now, let's see how we can define
these methods.

126
00:07:30,778 --> 00:07:34,139
Let's start with the method that
adds a character.

127
00:07:34,139 --> 00:07:39,426
Its prototype takes a C-style pointer
to a character

128
00:07:39,426 --> 00:07:41,808
to allow a call as we have just seen.

129
00:07:41,808 --> 00:07:45,029
We start, to be safe, by checking that
we have indeed received, through

130
00:07:45,029 --> 00:07:47,258
the "nouveau" (TN: means "new") pointer here

131
00:07:47,258 --> 00:07:49,747
a pointer to a real Personnage instance.

132
00:07:49,747 --> 00:07:51,716
So we check that the pointer is
not null.

133
00:07:51,716 --> 00:07:55,161
Then we add it to the character
container.

134
00:07:55,161 --> 00:07:57,713
Remember that we decided to

135
00:07:57,713 --> 00:08:01,190
implement the character container
as a vector of

136
00:08:01,190 --> 00:08:03,957
unique_ptr's to Personnage.

137
00:08:03,957 --> 00:08:06,415
So we simply add it with
a "push_back"

138
00:08:06,415 --> 00:08:12,552
The C-style pointer, "nouveau", returned
by the call to "new"

139
00:08:12,552 --> 00:08:15,581
will be transformed to a unique_ptr.

140
00:08:15,581 --> 00:08:20,612
Because new returns a C-style pointer
and we have decided to

141
00:08:20,612 --> 00:08:25,307
implement our pointers as 
C++11-style "smart pointers",

142
00:08:25,307 --> 00:08:29,455
we will transform this C-style pointer
here into a unique_ptr.

143
00:08:29,455 --> 00:08:32,945
Let's go over the previous call
in detail,

144
00:08:32,945 --> 00:08:37,335
" jeu.ajouter_personnage (new Guerrier) ".
(TN: means "game.add_character(new Warrior);")

145
00:08:37,335 --> 00:08:41,277
We call the constructor with parameters

146
00:08:41,277 --> 00:08:45,166
for Guerrier's constructor. It will do
the following:

147
00:08:45,166 --> 00:08:50,043
first, it will execute new Guerrier,
which will create a new warrior

148
00:08:50,043 --> 00:08:51,712
in memory.

149
00:08:51,712 --> 00:08:57,726
New will return a pointer to this
allocated memory area.

150
00:08:57,726 --> 00:09:01,503
This pointer will be passed to the
ajouter_personnage method

151
00:09:01,503 --> 00:09:03,120
and be called "nouveau".

152
00:09:03,120 --> 00:09:06,090
This pointer is not null.

153
00:09:06,510 --> 00:09:08,340
So we arrive here

154
00:09:08,340 --> 00:09:10,441
in the Jeu class and do
a push_back.

155
00:09:10,441 --> 00:09:14,032
Suppose that this vector
was initially empty.

156
00:09:14,032 --> 00:09:19,660
 So we execute this push_back which
will add an element to our vector

157
00:09:19,660 --> 00:09:26,433
in which we will add the result of the
transformation of this C-style pointer

158
00:09:26,433 --> 00:09:33,931
to a unique_ptr pointing to the memory
area allocated by the new statement.

159
00:09:33,931 --> 00:09:36,984
Now, let's talk about the "afficher" method.

160
00:09:36,984 --> 00:09:41,872
Suppose that each character has its
own afficher method

161
00:09:41,872 --> 00:09:42,934
which is polymorphic.

162
00:09:42,934 --> 00:09:47,421
So we simply need to do this,
to loop over all of the characters stored

163
00:09:47,421 --> 00:09:51,162
in the vector of pointers
to characters,

164
00:09:51,162 --> 00:09:53,643
and to call the afficher method

165
00:09:53,643 --> 00:09:57,345
through this pointer. This is exactly why
we have pointers,

166
00:09:57,354 --> 00:10:00,455
to have a polymorphic behavior.

167
00:10:00,965 --> 00:10:04,176
However, this code does not compile.

168
00:10:04,176 --> 00:10:08,288
Indeed, our "Personnages" collection is
a vector of

169
00:10:08,288 --> 00:10:11,134
unique_ptrs, of unique pointers.

170
00:10:11,134 --> 00:10:14,494
There cannot be more than one
pointer to a given memory area.

171
00:10:14,494 --> 00:10:17,142
In memory, we have something
like this:

172
00:10:17,142 --> 00:10:22,055
a vector of unique_ptrs
pointing to characters.

173
00:10:22,055 --> 00:10:26,458
When we write the for loop,

174
00:10:29,643 --> 00:10:35,242
when we write the for loop like this,
it happens the the "quidam" variable

175
00:10:35,242 --> 00:10:40,408
is another variable that will

176
00:10:40,408 --> 00:10:44,396
take the value of each of the elements
of the personnages vector, one after the other.

177
00:10:44,396 --> 00:10:51,041
So quidam is a pointer that will
point to the same area

178
00:10:51,041 --> 00:10:55,538
as the various pointers to our characters,
one after the other,

179
00:10:55,538 --> 00:10:57,985
as they are stored in the vector.

180
00:10:57,985 --> 00:11:02,692
So for example, the first step, which is
to say that quidam equals this pointer,

181
00:11:02,692 --> 00:11:06,620
means that two pointers are equal, they
point to the same area.

182
00:11:06,620 --> 00:11:13,043
This is impossible, due to the fact
that we have unique_ptrs here.

183
00:11:13,043 --> 00:11:15,948
We can only have one pointer per
memory area.

184
00:11:15,948 --> 00:11:18,445
So this solution is unacceptable.

185
00:11:18,445 --> 00:11:24,717
To do this, we need a reference
to the stored objects,

186
00:11:24,717 --> 00:11:28,669
a reference to the unique pointers.
That is quite possible.

187
00:11:28,669 --> 00:11:32,011
So the correct for loop is
written like this:

188
00:11:32,011 --> 00:11:36,970
"for auto reference", of course here
we will not modify anything,

189
00:11:36,970 --> 00:11:40,884
as the display method is const, so we
can use a "const reference".

190
00:11:40,884 --> 00:11:45,325
So "for auto const reference"; quidam is now

191
00:11:45,325 --> 00:11:48,275
a constant reference to the elements
of the personnages vector.

192
00:11:48,275 --> 00:11:52,445
That is, a constant reference to 
unique_ptrs.

193
00:11:52,445 --> 00:11:55,815
This is a subtlety of unique pointers.

194
00:11:55,815 --> 00:11:59,800
Now, let's see how we can use our
Jeu class.

195
00:11:59,800 --> 00:12:04,858
Here, we would declare a game and
add characters to it

196
00:12:04,858 --> 00:12:09,155
by calling the ajouter_personnage method
and creating them dynamically with new.

197
00:12:09,155 --> 00:12:13,658
We have a new warrior here, with parameters
for its constructor.

198
00:12:13,658 --> 00:12:17,129
Then we add a new magician,
a new thief,

199
00:12:17,129 --> 00:12:20,042
perhaps another new warrior, etc.

200
00:12:20,042 --> 00:12:25,375
When we want to display the game,
we simply call jeu.afficher.

201
00:12:25,375 --> 00:12:30,553
But this innocent Jeu class nevertheless
hides a potential danger.

202
00:12:30,553 --> 00:12:34,913
What happens if one of the objects
we added to the collection,

203
00:12:34,913 --> 00:12:39,040
-- or rather, whose address we added to the
collection -- what if one of these objects

204
00:12:39,040 --> 00:12:41,157
were to disappear?

205
00:12:41,157 --> 00:12:45,257
In that case, we would still have a
pointer to that object in the vector

206
00:12:45,257 --> 00:12:50,061
despite this object being destroyed,
and this could cause big problems.

207
00:12:50,061 --> 00:12:52,635
For everything to work correctly,
it is absolutely necessary

208
00:12:52,635 --> 00:12:58,347
for all of the elements that are pointed to
to last at least as long as their pointers.

209
00:12:58,347 --> 00:13:03,498
So in this example, all of the characters
in the game must exist

210
00:13:03,498 --> 00:13:05,663
at least as long as the game.

211
00:13:05,663 --> 00:13:09,991
And it is up to the programmer to
ensure that with good design.

212
00:13:09,991 --> 00:13:14,719
So, it is up to the programmer not to
make this kind of mistakes.

213
00:13:14,719 --> 00:13:19,708
For example, imagine a slightly naive programmer
who wants to create a function

214
00:13:19,708 --> 00:13:22,762
to create and add a magician
into the game

215
00:13:22,762 --> 00:13:26,791
This function would modify the game,
and take a reference to the game

216
00:13:26,791 --> 00:13:30,040
and it would create a magician here,

217
00:13:30,040 --> 00:13:33,450
passing parameters to its constructor
and then,

218
00:13:33,450 --> 00:13:36,046
it would call the ajouter_personnage.
And since we must pass pointers

219
00:13:36,046 --> 00:13:39,040
to add characters,

220
00:13:39,040 --> 00:13:42,119
it passes the address of
this magician here

221
00:13:42,119 --> 00:13:44,537
And so in the main,
we would have the game.

222
00:13:44,537 --> 00:13:47,528
We call this "creer_magician" function.

223
00:13:47,528 --> 00:13:50,774
We pass the game by reference
to add a magician to it.

224
00:13:50,774 --> 00:13:53,013
Then we display the game

225
00:13:53,013 --> 00:13:58,557
The problem is that this
creer_magicien function adds

226
00:13:58,557 --> 00:14:02,252
a new magician which is a local
variable.

227
00:14:02,252 --> 00:14:04,660
It is important never to do
this sort of thing,

228
00:14:04,660 --> 00:14:06,559
never to add local variables.

229
00:14:06,559 --> 00:14:12,795
This local variable will cease to exit:
"mago" here will cease to exist as soon as

230
00:14:12,795 --> 00:14:15,599
we exit the function.

231
00:14:15,599 --> 00:14:19,640
So here, we will have added a pointer
to a magician via

232
00:14:19,640 --> 00:14:24,764
a reference, but this magician
will no longer exist

233
00:14:24,764 --> 00:14:28,201
as soon as we exit the
function that created it.

234
00:14:28,201 --> 00:14:30,973
So, from this semicolon here,
we should never try to access

235
00:14:30,973 --> 00:14:32,759
this magician.

236
00:14:32,759 --> 00:14:35,407
We should not try to display it anymore.

237
00:14:35,407 --> 00:14:39,178
So here, we know what will happen,
we will display a magician

238
00:14:39,178 --> 00:14:41,337
that potentially does not exist anymore.

239
00:14:41,337 --> 00:14:44,147
I say potentially because on some
machines,

240
00:14:44,147 --> 00:14:47,978
as this code is relatively short,
nothing bad may actually happen.

241
00:14:47,978 --> 00:14:52,699
But if you imagine several lines of
code with several manipulations

242
00:14:52,699 --> 00:14:56,419
between this function call and
this display here,

243
00:14:56,419 --> 00:15:00,834
then it is virtually certain that you will
get a nonsense result.

244
00:15:00,834 --> 00:15:03,827
So, never do such a thing!

245
00:15:03,827 --> 00:15:06,279
Never take the address
of a local variable,

246
00:15:06,279 --> 00:15:08,951
never use the address of a local
variable like this

247
00:15:08,951 --> 00:15:12,121
The correct way to do this, to solve
this sort of problem is to use

248
00:15:12,121 --> 00:15:17,077
what is called dynamic allocation and to
guarantee that the allocated memory area

249
00:15:17,077 --> 00:15:22,345
will be preserved for at least as long as
its container.

250
00:15:22,345 --> 00:15:26,949
So for example, here, the creer_magicien
method which takes a game by

251
00:15:26,949 --> 00:15:32,737
reference, would add to this game
a dynamically-allocated magician

252
00:15:32,737 --> 00:15:36,589
as we have done up til now.
This new will trigger a dynamic allocation

253
00:15:36,589 --> 00:15:41,178
and the memory area will exist as
long as we don't call delete.

254
00:15:41,178 --> 00:15:47,528
In the case of a container where we manage
pointers through unique_ptrs,

255
00:15:47,528 --> 00:15:51,838
we don't even need to call delete.
The memory will be freed automatically

256
00:15:51,838 --> 00:15:55,709
by the unique_ptr as soon as it is
no longer used.

257
00:15:55,709 --> 00:15:58,448
This is one of the advantages of
unique pointers.

258
00:15:58,448 --> 00:16:01,600
This is why we recommend you use

259
00:16:01,600 --> 00:16:04,030
these "smart pointers", these unique
pointers at first.

260
00:16:04,030 --> 00:16:07,150
You will not need to bother about

261
00:16:07,150 --> 00:16:11,369
freeing memory, so you will not risk
accidentally freeing memory while

262
00:16:11,369 --> 00:16:14,484
it is being used.
However, the pointer

263
00:16:14,484 --> 00:16:18,405
will automatically be freed as soon as
we no longer use this memory area.

264
00:16:18,405 --> 00:16:21,443
Now, the second aspect, the unique
aspect.

265
00:16:21,443 --> 00:16:24,890
The smart aspect of the pointer
handles deallocation,

266
00:16:24,890 --> 00:16:28,497
and the unique aspect prevents having
multiple references to the same area.

267
00:16:28,497 --> 00:16:32,462
As we saw in the example of the for loop, this
introduces a few constraints.

268
00:16:32,462 --> 00:16:35,332
But it is a big advantage to have
only one pointer to a certain

269
00:16:35,332 --> 00:16:39,127
object. That way, the object
truly belongs

270
00:16:39,127 --> 00:16:41,927
to the container to which it is 
supposed to belong.

271
00:16:41,927 --> 00:16:45,074
There are no other places in the program
pointing to this object

272
00:16:45,074 --> 00:16:47,631
and that could modify it.

273
00:16:47,631 --> 00:16:50,935
These are the reasons why we recommend
you use, at first,

274
00:16:50,935 --> 00:16:53,372
unique_ptrs

275
00:16:53,372 --> 00:16:56,644
Now, we could also use
C-style pointers.

276
00:16:56,644 --> 00:17:00,898
If you wish to learn about this, we have
produced another episode,

277
00:17:00,898 --> 00:17:04,577
an optional one, which will detail
this solution

278
00:17:04,577 --> 00:17:09,642
and should thus shed more light on
the advantages of unique_ptrs.
