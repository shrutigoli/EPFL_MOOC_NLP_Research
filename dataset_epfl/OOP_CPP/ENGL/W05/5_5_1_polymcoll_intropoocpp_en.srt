1
00:00:04,094 --> 00:00:07,185
You now know about the fundamental
object-oriented concepts of

2
00:00:07,185 --> 00:00:10,012
encapsulation, abstraction
and inheritance.

3
00:00:10,024 --> 00:00:12,775
It is time to focus on an equally
important concept,

4
00:00:12,775 --> 00:00:14,348
polymorphism.

5
00:00:14,348 --> 00:00:15,451
Generally,

6
00:00:15,451 --> 00:00:17,701
polymorphism allows one piece
of code to adapt

7
00:00:17,701 --> 00:00:20,792
automatically to the different types of data
it might encounter.

8
00:00:20,792 --> 00:00:23,303
It is an important concept, since
it makes it possible to move

9
00:00:23,303 --> 00:00:27,006
towards generic code; code that
is written in unified way

10
00:00:27,006 --> 00:00:28,926
for different types of data.

11
00:00:28,956 --> 00:00:32,276
To introduce the concept of polymorphism
more concretely,

12
00:00:32,303 --> 00:00:35,433
let's start with an example.
Suppose that we wish to program

13
00:00:35,457 --> 00:00:38,382
a game that features the
characters from the hierarchy

14
00:00:38,382 --> 00:00:41,252
we have already used in the previous
episodes.

15
00:00:41,365 --> 00:00:44,505
Suppose that our game features
a main character

16
00:00:44,505 --> 00:00:45,735
which would be the player.

17
00:00:51,297 --> 00:00:53,107
And that in one turn in the
game,

18
00:00:53,107 --> 00:00:56,453
this character faces
encounters,

19
00:00:56,453 --> 00:00:59,823
that is, it will meet with a whole
set of other characters.

20
00:00:59,828 --> 00:01:04,393
The set of characters could be represented
in the following way

21
00:01:04,393 --> 00:01:07,623
in C++: a vector of Personnage
(TN: "personnage" means "character"),

22
00:01:10,543 --> 00:01:14,250
which would be the <i>autres</i>
(TN: means "others"). And to write the code

23
00:01:14,250 --> 00:01:17,650
that would make the others meet the
player, a for loop

24
00:01:21,386 --> 00:01:22,926
like this, for example,

25
00:01:30,274 --> 00:01:33,644
where each of the other characters meet
our player in turn.

26
00:01:42,983 --> 00:01:45,039
So that our game doesn't become
too monotonous,

27
00:01:45,039 --> 00:01:47,902
we would of course like to have,
in the collection of

28
00:01:47,902 --> 00:01:52,542
other characters, characters of
various natures,

29
00:01:52,555 --> 00:01:53,815
of various types.

30
00:01:53,815 --> 00:01:56,970
meaning that here, in this
perso variable,

31
00:01:56,970 --> 00:02:01,550
we would have, alternately, a warrior,
a thief, or a wizard.

32
00:02:02,047 --> 00:02:04,310
We also know, from a previous episode,

33
00:02:04,310 --> 00:02:06,080
that a subclass

34
00:02:08,881 --> 00:02:12,004
can have its own, more specific
definition

35
00:02:12,004 --> 00:02:14,349
of a method already defined higher up.

36
00:02:14,349 --> 00:02:16,894
For example, we could imagine that

37
00:02:16,894 --> 00:02:21,004
when the thief meets the character,
he steals from him.

38
00:02:21,662 --> 00:02:26,962
Polymorphism consists in applying
the same code to objects

39
00:02:26,965 --> 00:02:29,065
taking different forms

40
00:02:30,312 --> 00:02:33,850
and having the execution adapt
automatically

41
00:02:33,850 --> 00:02:37,003
to the form of the object.
This means, concretely,

42
00:02:37,003 --> 00:02:40,421
that if at a certain moment our character is 
of type Voleur (TN: means "Thief"),

43
00:02:40,421 --> 00:02:45,258
the rencontrer (TN: means "to meet") method
will be chosen to be the thief's one,

44
00:02:45,258 --> 00:02:49,255
who will thus rob our character without
further ado.

45
00:02:49,255 --> 00:02:53,994
The idea is that thanks to inheritance,
the same code can apply

46
00:02:53,994 --> 00:02:56,504
to any type of character possible.

47
00:02:56,504 --> 00:02:59,274
All these forms of characters have a
rencontrer method

48
00:02:59,275 --> 00:03:01,378
allowing the way that a character

49
00:03:01,378 --> 00:03:04,798
meets another to take on
different forms,

50
00:03:08,601 --> 00:03:13,265
meaning, effectively, that a magician can
greet a character,

51
00:03:13,265 --> 00:03:16,710
a warrior can hit him, a thief
can rob him and so on.

52
00:03:16,710 --> 00:03:20,310
And thanks to polymorphism,
the same code,

53
00:03:22,264 --> 00:03:28,597
when applied to different characters,
will be able to have a different behavior

54
00:03:28,597 --> 00:03:30,147
specific to each of them.

55
00:03:30,688 --> 00:03:33,593
In other words, if I put a Voleur (= 'Thief') in a Personnage (='Character'),

56
00:03:33,593 --> 00:03:35,539
in a polymorphic context,

57
00:03:35,539 --> 00:03:38,242
the rencontrer method would
adapt automatically

58
00:03:38,242 --> 00:03:41,417
to the real nature of the object contained
in the Personnage-type variable

59
00:03:41,417 --> 00:03:44,257
and so here, we would use the rencontrer
method of the thief.

60
00:03:44,549 --> 00:03:48,159
The point of manipulating a thief
as a generic character

61
00:03:48,159 --> 00:03:52,258
and not directly in the form of a thief is
to be able to make

62
00:03:52,258 --> 00:03:55,455
unified manipulations on all sorts
of objects.

63
00:03:55,455 --> 00:03:57,975
You have an example of this here

64
00:03:57,989 --> 00:04:01,048
where a whole set of characters of
different natures are manipulated

65
00:04:01,048 --> 00:04:05,098
in the same way by being placed
in an array of characters (Personnage).

66
00:04:05,397 --> 00:04:07,344
This supposes that at one point,

67
00:04:07,344 --> 00:04:09,984
I added to my collection of characters

68
00:04:11,307 --> 00:04:14,400
different characters of various natures,
i.e that I carried out

69
00:04:14,400 --> 00:04:16,585
manipulations such as these

70
00:04:16,585 --> 00:04:20,055
For example, if I have an object
of type Guerrier (TN: means "warrior")

71
00:04:22,933 --> 00:04:25,553
and an object of type Sorcier
(TN: means "sorceror")

72
00:04:27,633 --> 00:04:30,563
then I will have filled my array
of characters

73
00:04:31,489 --> 00:04:33,849
by doing something like
this, for example.

74
00:04:41,234 --> 00:04:44,682
That is, since the cells of my array
are of type Personnage,

75
00:04:44,682 --> 00:04:48,862
we have put an object of type Guerrier
in a Personnage variable.

76
00:04:49,704 --> 00:04:53,708
Small reminder on inheritance:
assigning a Guerrier to a Personnage

77
00:04:53,708 --> 00:04:57,108
is completely valid.
In a class hierarchy,

78
00:04:57,113 --> 00:05:01,019
the subclass inherits from the superclass
not only the member variables and methods

79
00:05:01,019 --> 00:05:05,572
but also the type.
Guerrier is also a Personnage

80
00:05:05,572 --> 00:05:08,672
and so, this assignment is
completely valid.

81
00:05:08,672 --> 00:05:12,285
Remember also that inheritance
in transitive,

82
00:05:12,285 --> 00:05:15,040
meaning that I can also assign

83
00:05:17,220 --> 00:05:19,070
a Sorcier to a Personnage.

84
00:05:21,745 --> 00:05:25,584
Why? Because since inheritance
is transitive, a Sorcier is also a Magicien

85
00:05:25,584 --> 00:05:29,694
which is a Personnage itself.
The Sorcier is also a Personnage.

86
00:05:30,015 --> 00:05:33,974
We can thus assign to an object of
the superclass type

87
00:05:33,974 --> 00:05:36,399
an object of subclass type.
We see an example of this here

88
00:05:36,399 --> 00:05:40,034
in this assignment.
This possibility also applies

89
00:05:40,034 --> 00:05:43,869
when passing parameters, as we will
see in an example

90
00:05:43,869 --> 00:05:45,389
on the next slide.

91
00:05:46,108 --> 00:05:48,903
Here, we suppose that there exists
a class hierarchy

92
00:05:48,903 --> 00:05:50,771
as described in the
previous example.

93
00:05:50,771 --> 00:05:54,051
A programmer who uses this class
hierarchy

94
00:05:54,051 --> 00:05:56,451
has defined a <i>faire_rencontrer</i>
function (TN: means "make meet")

95
00:05:56,470 --> 00:05:59,610
which allows a character to meet another.

96
00:05:59,610 --> 00:06:03,410
This <i>faire_rencontrer</i> function is used
in this main program

97
00:06:03,429 --> 00:06:07,198
and it is passed, as arguments, a first
character who is a warrior

98
00:06:07,198 --> 00:06:09,508
and a second character who is a thief.

99
00:06:10,459 --> 00:06:13,650
This is to show that we can indeed
put a Guerrier

100
00:06:13,650 --> 00:06:15,721
in a Personnage or a Voleur in
a Personnage

101
00:06:15,721 --> 00:06:19,921
when passing parameters.
Putting an object of the subclass type

102
00:06:19,958 --> 00:06:23,715
in a variable of the superclass type
is allowed both

103
00:06:23,715 --> 00:06:27,235
in the context of assignment and in
the context of passing parameters.

104
00:06:27,301 --> 00:06:30,262
This is due to the fact that
in an inheritance relationship,

105
00:06:30,262 --> 00:06:32,272
a Guerrier is a Personnage.

106
00:06:32,891 --> 00:06:35,799
Somewhat more formally then,
polymorphism allows

107
00:06:35,799 --> 00:06:38,109
instances of a subclass

108
00:06:38,719 --> 00:06:40,869
to substitute for instances

109
00:06:41,740 --> 00:06:44,247
of their parent classes,
of their superclasses,

110
00:06:44,247 --> 00:06:47,043
whether they are arguments of 
a method or during assignment

111
00:06:47,043 --> 00:06:48,934
-- as we have just seen in the
previous slides --

112
00:06:48,934 --> 00:06:51,994
while keeping their own properties.

113
00:06:53,274 --> 00:06:56,804
In this example, the idea would thus
be to put a Voleur

114
00:06:56,804 --> 00:07:01,094
in a Personnage while guaranteeing that
the execution of the <i>rencontrer</i> method

115
00:07:01,104 --> 00:07:04,951
will adapt automatically to the real
nature of the instance contained

116
00:07:04,951 --> 00:07:08,249
in the Personnage variable,
meaning that we would apply

117
00:07:08,249 --> 00:07:10,609
the <i>rencontrer</i> method of Voleur.

118
00:07:11,606 --> 00:07:14,076
The fact that we can assign a thief
to a character variable

119
00:07:14,076 --> 00:07:16,412
is a direct consequence of inheritance.

120
00:07:16,412 --> 00:07:19,720
However, the fact that the
method to invoke

121
00:07:19,720 --> 00:07:22,062
is chosen at execution time

122
00:07:22,062 --> 00:07:24,256
depending on the real nature of
the instances

123
00:07:24,256 --> 00:07:28,296
depends on what is known as 
dynamic binding.

124
00:07:29,084 --> 00:07:31,384
Let's see what this really is.

125
00:07:32,222 --> 00:07:35,821
To do so, let's return to our previous
example where we substituted

126
00:07:35,821 --> 00:07:40,301
an object of the subclass type
for an instance of the superclass type.

127
00:07:40,547 --> 00:07:43,317
We put a Guerrier in a
Personnage

128
00:07:43,317 --> 00:07:46,527
which is the parameter of the 
<i>faire_rencontrer</i> method

129
00:07:46,546 --> 00:07:49,343
and we call the <i>rencontrer</i> method

130
00:07:49,343 --> 00:07:52,466
on the Personnage concerned.
Here, we are in the context

131
00:07:52,466 --> 00:07:56,066
where our class hierarchy

132
00:07:57,169 --> 00:08:00,245
would have two rencontrer methods.
One defined in the superclass

133
00:08:00,245 --> 00:08:02,585
which is the default method,
the general method,

134
00:08:02,591 --> 00:08:05,811
and one that is specific to warriors,
in the Guerrier subclass.

135
00:08:06,264 --> 00:08:10,674
Which of these two rencontrer methods
will be called here?

136
00:08:17,557 --> 00:08:20,242
Looking closer, we can see that

137
00:08:20,242 --> 00:08:24,083
there are two possible points of view.
The first consists in saying that

138
00:08:24,083 --> 00:08:28,738
the parameter is of type Personnage, so we will fetch the
<i>rencontrer</i> method

139
00:08:28,738 --> 00:08:32,027
in the Personnage class. The second
consists in saying that

140
00:08:32,027 --> 00:08:36,317
we put a Guerrier in Personnage, and so it 
is the Guerrier class

141
00:08:36,317 --> 00:08:38,635
that we will go and fetch the 
<i>rencontrer</i> method.

142
00:08:38,635 --> 00:08:41,166
There is thus a point of view which
says

143
00:08:41,166 --> 00:08:43,258
that it is the type of the variable

144
00:08:44,058 --> 00:08:48,464
that determines the choice of methods,
and a second point of view

145
00:08:48,464 --> 00:08:49,627
that says

146
00:08:49,627 --> 00:08:53,278
that it is the actual type of the object
contained in the variable

147
00:08:53,278 --> 00:08:55,718
that determines the choice of methods.

148
00:08:55,718 --> 00:08:58,851
In C++, if we do nothing special,

149
00:08:58,851 --> 00:09:02,535
it is the type of the variable that will
determine which method to execute.

150
00:09:02,535 --> 00:09:05,459
We use what is known as
static binding

151
00:09:05,459 --> 00:09:09,759
meaning that here, it is Personnage's
<i>rencontrer</i> method

152
00:09:11,495 --> 00:09:14,893
that will be called.
We speak of static binding

153
00:09:14,893 --> 00:09:18,342
because the choice of methods can
be made statically, before the program

154
00:09:18,342 --> 00:09:20,940
is even executed, during compilation.

155
00:09:20,940 --> 00:09:25,170
At that stage, we can already know which
type a variable has

156
00:09:25,170 --> 00:09:28,443
and based on this type, choose
which method to apply.

157
00:09:29,168 --> 00:09:33,024
In some cases however, it can
be more natural to resort

158
00:09:33,024 --> 00:09:35,172
to another type of binding,
known as

159
00:09:35,172 --> 00:09:37,532
dynamic binding.

160
00:09:37,540 --> 00:09:42,212
With this, the method will be chosen
during execution, dynamically,

161
00:09:42,212 --> 00:09:46,195
based on the type of the object actually
contained in the variable,

162
00:09:46,195 --> 00:09:49,358
meaning that here, we could make
sure that the <i>rencontrer</i>

163
00:09:49,358 --> 00:09:55,608
method is the one belonging to the
object that is actually stored

164
00:09:55,658 --> 00:09:57,734
in the Personnage-type variable.

165
00:09:58,285 --> 00:10:01,761
Static binding is what is used

166
00:10:01,761 --> 00:10:04,651
by default in C++ if we do nothing special.

167
00:10:05,959 --> 00:10:09,823
However, it is possible to use
dynamic binding

168
00:10:09,823 --> 00:10:13,683
but for that, we need to use two
specific ingredients.

169
00:10:13,690 --> 00:10:16,269
The first is that methods for which we want

170
00:10:16,269 --> 00:10:18,513
to use dynamic binding

171
00:10:18,513 --> 00:10:21,120
must be declared with a specific label,

172
00:10:21,120 --> 00:10:24,990
they must be virtual methods
and they must be able to apply

173
00:10:24,994 --> 00:10:29,008
to the real instances of the objects via
references or pointers.

174
00:10:29,808 --> 00:10:33,988
Our small initial example thus uses
static binding here.

175
00:10:34,001 --> 00:10:37,537
In order to use dynamic binding, the
<i>rencontrer</i> method

176
00:10:37,537 --> 00:10:41,597
has to be virtual, and should apply
not to an object

177
00:10:41,644 --> 00:10:45,113
but to a reference of this object, or to
a pointer to this object.

178
00:10:45,113 --> 00:10:48,181
This is not the case here; we do

179
00:10:48,181 --> 00:10:49,931
indeed have static binding.

180
00:10:50,408 --> 00:10:54,413
Virtual methods and their use via
references and pointers

181
00:10:54,413 --> 00:10:57,743
will be the subject of the next
episode.
