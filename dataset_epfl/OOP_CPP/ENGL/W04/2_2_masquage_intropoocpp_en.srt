1
00:00:04,456 --> 00:00:07,833
In certain cases, members
defined in a superclass

2
00:00:07,833 --> 00:00:10,797
do not satisfy the needs of
a subclass sufficiently.

3
00:00:11,613 --> 00:00:14,925
Redefinition and shadowing
are 2 concepts that

4
00:00:14,925 --> 00:00:16,112
can be useful in such situations.

5
00:00:16,682 --> 00:00:19,369
In the last episode we
took the example

6
00:00:19,369 --> 00:00:22,946
of a hierarchy of characters in a game
based on the hypothesis

7
00:00:22,946 --> 00:00:26,335
that all characters had the

8
00:00:26,335 --> 00:00:28,238
same way of meeting another person.

9
00:00:28,701 --> 00:00:31,925
Each character, when meeting another
would, for example, greet him.

10
00:00:32,493 --> 00:00:35,669
Suppose now that this way
of implementing the method 'rencontrer' (= 'meet')

11
00:00:35,669 --> 00:00:38,670
works for most classes,
but not all.

12
00:00:39,034 --> 00:00:42,589
We could imagine for example
a warrior as being a bit more belligerent

13
00:00:42,589 --> 00:00:45,930
as others, and when he comes across
another character, well,

14
00:00:45,930 --> 00:00:47,335
instead of greeting the other cordially,
he attacks him.

15
00:00:47,686 --> 00:00:50,994
Thus we are in a situation where
we could consider implementing

16
00:00:50,994 --> 00:00:55,258
the method 'rencontrer' in two different
manners, one for peaceful characters,

17
00:00:55,275 --> 00:00:58,760
who would greet other characters,
and another

18
00:00:58,872 --> 00:01:02,853
for warlike characters,
that would greet people

19
00:01:02,853 --> 00:01:04,869
with a blow of their weapon.

20
00:01:05,761 --> 00:01:07,987
What would be
of our initial class hierarchy?

21
00:01:09,350 --> 00:01:11,793
Would we have to
redesign the whole structure?

22
00:01:12,383 --> 00:01:16,480
Happily the answer is no.
You just need to modify

23
00:01:17,200 --> 00:01:19,802
the method 'rencontrer'
in the subclass 'guerrier'.

24
00:01:20,492 --> 00:01:23,370
We will change the
class hierarchy

25
00:01:23,370 --> 00:01:27,160
in the following manner: we will
keep the general method 'rencontrer'

26
00:01:27,515 --> 00:01:30,877
which is satisfactory for most of the
classes in the superclass 'Personnage'

27
00:01:30,877 --> 00:01:34,222
but in the class 'Guerrier' we will
specialize the method

28
00:01:34,222 --> 00:01:38,275
by redefining it in a more satisfactory
manner

29
00:01:38,275 --> 00:01:39,667
for the subclass in question.

30
00:01:41,018 --> 00:01:44,696
In the case of our example, let's imagine
that the class 'Guerrier' had a method

31
00:01:44,696 --> 00:01:46,941
here by a method 'frapper' (='hit')

32
00:01:46,941 --> 00:01:49,816
[Silence]

33
00:01:49,816 --> 00:01:52,703
that would be called

34
00:01:52,703 --> 00:01:57,900
[Silence]

35
00:01:57,900 --> 00:01:59,348
by the method 'rencontrer'.

36
00:01:59,397 --> 00:02:02,861
The method 'rencontrer' will then
be defined at 2 levels of the hierarchy

37
00:02:02,861 --> 00:02:05,682
Once in the superclass 'Personnage',

38
00:02:05,682 --> 00:02:08,025
and once in the subclass
'Guerrier'.

39
00:02:08,450 --> 00:02:12,899
We call it 'shadowing', because
henceforth, for an object of type 'Guerrier'

40
00:02:12,899 --> 00:02:15,335
the specialized method
has priority.

41
00:02:15,424 --> 00:02:19,447
We say that it 'shadows' or hides the
more general method

42
00:02:19,447 --> 00:02:21,533
called by default if there
are no specialized methods.

43
00:02:21,650 --> 00:02:25,359
For example, if in a program, I
work with an object of type 'Magicien'

44
00:02:25,359 --> 00:02:29,798
[Silence]

45
00:02:29,798 --> 00:02:32,661
and that I apply the
method 'rencontrer',

46
00:02:32,661 --> 00:02:35,524
[Silence]

47
00:02:35,524 --> 00:02:38,376
because the method 'rencontrer'
wasn't redefined in 'Magicien',

48
00:02:38,376 --> 00:02:42,754
the inherited method, the 'rencontrer'
from 'Personnage' will be used.

49
00:02:42,754 --> 00:02:46,388
So here, this method

50
00:02:46,388 --> 00:02:48,028
will be the general, default
method.

51
00:02:48,647 --> 00:02:51,805
However, if now I want
to apply the method 'rencontrer'

52
00:02:52,321 --> 00:02:55,360
to an object of type
'Guerrier',

53
00:02:55,360 --> 00:03:02,599
[Silence]

54
00:03:02,599 --> 00:03:05,548
well, since a specialized method
was redefined in this class,

55
00:03:05,548 --> 00:03:08,973
this method will impose itself
in this case.

56
00:03:09,441 --> 00:03:13,011
So we say that this method will hide
the general, inherited method.

57
00:03:13,542 --> 00:03:16,969
In programming, in general,
'shadowing' occurs when

58
00:03:16,969 --> 00:03:18,941
an identifier hides another.

59
00:03:19,468 --> 00:03:24,029
In the case of class hierarchy,
we speak of 'shadowing' when the same

60
00:03:24,029 --> 00:03:29,297
attribute or method name is used
at several hierarchy levels.

61
00:03:31,758 --> 00:03:33,116
For our example,

62
00:03:34,765 --> 00:03:38,022
the same method header is found
at several hierarchy levels.

63
00:03:38,758 --> 00:03:42,055
Shadowing is little-used and not
recommended for attributes.

64
00:03:42,272 --> 00:03:43,383
It causes confusion,

65
00:03:44,184 --> 00:03:46,216
which means concretely this:

66
00:03:46,692 --> 00:03:52,199
with a superclass A, for example,
from which inherits a subclass b,

67
00:03:52,577 --> 00:03:55,417
a shadowing of attributes
simply means that

68
00:03:55,417 --> 00:04:01,076
in the class A, there is an attribute
named 'a' but that in the class B,

69
00:04:01,076 --> 00:04:04,257
an attribute 'a' is also declared.

70
00:04:04,374 --> 00:04:08,945
If we use an attribute 'a'
inside a method of the class B,

71
00:04:08,945 --> 00:04:11,512
than it is this attribute
that we'll use.

72
00:04:11,847 --> 00:04:15,406
And we say that this attribute,
has shadowed the attribute higher up in A.

73
00:04:15,626 --> 00:04:19,566
So, an object B disposes of

74
00:04:20,057 --> 00:04:22,109
2 attributes:

75
00:04:22,397 --> 00:04:25,491
one that is specific,
called 'a',

76
00:04:25,562 --> 00:04:28,994
and one inherited from
A, also called 'a'

77
00:04:28,994 --> 00:04:30,535
hence the confusion.

78
00:04:30,796 --> 00:04:35,073
So, the fact that we have the same type
here, doesn't change anything,

79
00:04:35,073 --> 00:04:39,075
it suffices to have a same attribute
name for masking to take place.

80
00:04:39,356 --> 00:04:43,270
Evidently this situation for attributes
should be avoided.

81
00:04:43,955 --> 00:04:47,263
However, as we saw in the previous
example where

82
00:04:47,481 --> 00:04:50,075
the method 'rencontrer' was
redefined in the subclass 'Guerrier'

83
00:04:50,634 --> 00:04:53,635
well, the redefinition of methods,
is quite common and quite practical:

84
00:04:53,994 --> 00:04:58,365
it allows classes to adapt to specific
situations according to their hierarchy.

85
00:04:59,355 --> 00:05:02,692
To summarize, in a class hierarchy,
masking a method

86
00:05:02,692 --> 00:05:07,249
consists of defining in a subclass a
method of the same name

87
00:05:07,249 --> 00:05:10,198
as one already defined in
a superclass.

88
00:05:10,858 --> 00:05:13,716
In jargon, we say that
the inherited method

89
00:05:14,406 --> 00:05:17,810
is the the general method,
which is available to

90
00:05:18,157 --> 00:05:21,372
by default all subclasses

91
00:05:23,493 --> 00:05:24,779
that do not mask it.

92
00:05:25,149 --> 00:05:28,866
The method that hides the
inherited one is the specialized method

93
00:05:28,866 --> 00:05:32,492
that caters to the specific needs
of the subclass

94
00:05:32,492 --> 00:05:33,883
in which it is defined.

95
00:05:34,362 --> 00:05:37,301
As previously evoked,
for an object of type 'Guerrier',

96
00:05:37,301 --> 00:05:39,997
it is always the specialized
method that is called here.

97
00:05:40,614 --> 00:05:43,515
So, if we define an object
of type 'Guerrier',


98
00:05:43,515 --> 00:05:45,787
and we invoke the method
'rencontrer' on this object,

99
00:05:45,787 --> 00:05:49,173
and it is not the the method 'rencontrer'
of 'Personnage' that is called,

100
00:05:49,228 --> 00:05:50,799
but the specialized method.

101
00:05:51,569 --> 00:05:54,942
We only apply the normal
scope resolution rules,

102
00:05:54,942 --> 00:05:57,386
for a scope that is closest.

103
00:05:58,220 --> 00:06:01,981
An object of type 'Guerrier' disposes
of 2 of these methods:

104
00:06:01,981 --> 00:06:06,318
the specialized method and the
general method.

105
00:06:06,747 --> 00:06:10,442
It can be useful in certain circumstances
to invoke this general method,

106
00:06:10,442 --> 00:06:15,192
the one that was inherited, even if
we have redefined it

107
00:06:15,192 --> 00:06:16,693
lower down in the hierarchy.

108
00:06:16,974 --> 00:06:18,114
So how do we deal with this?

109
00:06:18,906 --> 00:06:21,961
For example, imagine that we want
to give our warrior a few good manners,

110
00:06:21,961 --> 00:06:26,372
and that he greets someone he meets

111
00:06:26,372 --> 00:06:28,617
before attacking him, or inversely.

112
00:06:29,179 --> 00:06:32,181
This means that the warrior starts by
meeting the character

113
00:06:32,181 --> 00:06:35,276
just as any other person in the hierarchy,

114
00:06:35,276 --> 00:06:38,297
by greeting him, before applying

115
00:06:38,297 --> 00:06:39,523
more specific actions.

116
00:06:40,209 --> 00:06:42,951
The code that allows a character
to greet another

117
00:06:42,951 --> 00:06:45,806
is already incorporated in the general method
'rencontrer' (TN: 'rencontrer' = to meet),

118
00:06:45,806 --> 00:06:48,185
that is to say, the 'rencontrer'
from 'Personnage'.

119
00:06:48,832 --> 00:06:53,157
It is unnecessary to duplicate this
code in the specific 'rencontrer'

120
00:06:53,157 --> 00:06:53,854
of 'Guerrier'.

121
00:06:54,321 --> 00:06:57,078
What is to be done then,
is that in the specialized method,

122
00:06:57,078 --> 00:07:00,679
it is possible to call a general method
higher up,

123
00:07:00,679 --> 00:07:02,632
and then to apply specific actions.

124
00:07:03,946 --> 00:07:07,796
To access the shadowed member
of a given object, we use

125
00:07:07,796 --> 00:07:11,827
a special syntax with a scope
resolution operator (::).

126
00:07:12,339 --> 00:07:18,386
For example, if in the
specialized method 'rencontrer'


127
00:07:18,386 --> 00:07:22,250
of the subclass 'Guerrier',
I want to call 'rencontrer'

128
00:07:22,250 --> 00:07:25,956
as defined in the superclass
'Personnage',

129
00:07:25,956 --> 00:07:29,016
well, in the method I will say:

130
00:07:29,016 --> 00:07:32,606
"I call the method 'rencontrer'
of the class Personnage."

131
00:07:32,606 --> 00:07:35,138
And I make the link between the name
of the method and the name of the class

132
00:07:35,138 --> 00:07:37,829
to which the method belongs

133
00:07:37,829 --> 00:07:40,530
with the scope resolution
operator.

134
00:07:41,657 --> 00:07:46,665
So here, the specialized method
rencontrer calls the hidden, general method

135
00:07:46,665 --> 00:07:49,764
with this special notation.

136
00:07:50,369 --> 00:07:54,068
Then, it follows up with
a certain number of specific actions.

137
00:07:54,419 --> 00:07:58,028
This is very useful, because it
avoids duplicating

138
00:07:59,098 --> 00:08:03,091
the code for all the actions
undertaken in the general method.

139
00:08:03,972 --> 00:08:08,009
We have here, in this example,
thanks to a masked method,

140
00:08:08,009 --> 00:08:12,220
made our warrior a bit
more polite by greeting

141
00:08:12,220 --> 00:08:15,543
his victims before attacking
them, without having to write

142
00:08:15,543 --> 00:08:16,681
the code.

143
00:08:17,508 --> 00:08:19,379
That is all for this episode.

144
00:08:19,379 --> 00:08:22,129
In the next video, we will
look at construction

145
00:08:22,129 --> 00:08:24,691
and destruction in
inheritance.
