1
00:00:04,540 --> 00:00:06,072
In this episode,

2
00:00:06,072 --> 00:00:08,133
we will continue examining the topic
of inheritance

3
00:00:08,133 --> 00:00:11,381
and will consider in this
context 2 concepts that are related:

4
00:00:11,381 --> 00:00:14,056
the notion of masking and the notion of
protected access rights.

5
00:00:14,084 --> 00:00:17,733
You have seen that the accessibility
of a class's member

6
00:00:17,733 --> 00:00:20,032
--a data member or a member function (method)--

7
00:00:20,032 --> 00:00:24,509
can either be "public"
which means

8
00:00:24,515 --> 00:00:28,935
that is visible from anywhere in the code,
and is acesssible inside the class

9
00:00:28,935 --> 00:00:31,291
it is defined in as well as
outside of it.

10
00:00:32,351 --> 00:00:35,301
If it is "private", its visibility
is restrained

11
00:00:35,313 --> 00:00:38,736
exclusively to inside the class
in which it is defined.

12
00:00:38,736 --> 00:00:40,755
Now we can wonder:

13
00:00:40,755 --> 00:00:43,553
"What happens to access rights within

14
00:00:43,553 --> 00:00:45,272
an inheritance relationship?"

15
00:00:45,272 --> 00:00:52,052
Suppose that we have a superclass A
from which inherits a subclass B,

16
00:00:53,695 --> 00:00:56,273
Suppose that inside the superclass A,

17
00:00:56,273 --> 00:01:00,926
we have declared a private attribute,
just as we have always done

18
00:01:00,926 --> 00:01:02,136
for all data members up to now.

19
00:01:03,802 --> 00:01:07,732
Now, we wonder if
in a method

20
00:01:08,836 --> 00:01:10,126
of the subclass B

21
00:01:10,782 --> 00:01:12,852
for example, a method like this,

22
00:01:14,039 --> 00:01:17,819
we have the right to use this
data member directly.

23
00:01:18,554 --> 00:01:21,775
We saw that because of inheritance,

24
00:01:21,775 --> 00:01:25,715
the class B disposes indeed
of a data member inherited from A.

25
00:01:27,026 --> 00:01:29,281
But can B access 'a' directly?

26
00:01:29,281 --> 00:01:31,221
Can B do something like this

27
00:01:32,511 --> 00:01:34,001
for example?

28
00:01:36,709 --> 00:01:39,299
And directly access the inherited
data member?

29
00:01:39,835 --> 00:01:42,712
Actually, because "private" insures

30
00:01:42,712 --> 00:01:47,540
that the member 'a' is accessible only from inside
its class, this data member is only

31
00:01:47,540 --> 00:01:49,752
accessible in the class A.

32
00:01:49,752 --> 00:01:52,101
We can access this data member
directly

33
00:01:52,101 --> 00:01:55,275
only in the methods of the class A
and nowhere else.

34
00:01:55,275 --> 00:01:57,147
The answer to our question

35
00:01:57,147 --> 00:02:00,675
is thus: "No".
No, we don't have direct access to 'a' 

36
00:02:00,675 --> 00:02:03,575
from any method
of the class B

37
00:02:04,036 --> 00:02:07,516
as this data member is defined as "private"
in the superclass.

38
00:02:07,622 --> 00:02:11,028
This puts us in a delicate situation.

39
00:02:11,028 --> 00:02:15,964
An object of type B inherits
a data member 'a' through inheritance,

40
00:02:15,964 --> 00:02:19,714
yet it cannot access this data member
directly!

41
00:02:19,736 --> 00:02:22,746
Since a method of the class B
should logically be able

42
00:02:22,746 --> 00:02:25,745
to manipulate any data
member of the class B,

43
00:02:25,745 --> 00:02:29,765
there exists in fact a third access right:
the "protected" access right.

44
00:02:30,200 --> 00:02:34,120
The "protected" access right allows
a subclass

45
00:02:34,125 --> 00:02:37,236
to directly access the data members
it inherits,

46
00:02:37,236 --> 00:02:39,955
by insuring that the
data member of a class

47
00:02:39,955 --> 00:02:45,485
is visible to all the descendants of the class.
This is specified with the keyword "protected".

48
00:02:45,969 --> 00:02:50,349
So, by replacing "private" with "protected" here

49
00:02:54,209 --> 00:02:58,529
enables that the
subclasses can access

50
00:02:59,605 --> 00:03:02,404
all the protected members,
whether they are data members

51
00:03:02,404 --> 00:03:05,854
or member functions,
inherited from their parent classes.

52
00:03:05,854 --> 00:03:09,412
Another example: a subclass "Guerrier" (TN: means "Warrior")
inherits from a superclass Personnage (TN: means "Character").

53
00:03:09,412 --> 00:03:12,958
It thus inherits of a data member
that represents

54
00:03:12,958 --> 00:03:14,198
 its energy level.

55
00:03:14,372 --> 00:03:17,975
If in the class "Guerrier", we want to write
a method "frapper" (TN: means "to hit"),

56
00:03:17,975 --> 00:03:20,526
allowing a Guerrier to hit
another character

57
00:03:20,526 --> 00:03:24,483
and if we decide that the warrior
can only hit another character

58
00:03:24,483 --> 00:03:27,342
when he has enough energy,

59
00:03:27,342 --> 00:03:30,896
then, we are obliged
to use the "energy" data member,

60
00:03:30,896 --> 00:03:31,886
like this for example.

61
00:03:32,121 --> 00:03:34,813
The direct access in a
method of the "Guerrier" class

62
00:03:34,813 --> 00:03:38,570
to a data member inherited from
its parent class, is only possible

63
00:03:38,570 --> 00:03:41,942
because the data member
was declared as "protected".

64
00:03:41,942 --> 00:03:44,804
Again, if it had been declared "private",

65
00:03:47,484 --> 00:03:50,374
this direct access
would not have been possible.

66
00:03:50,585 --> 00:03:53,485
What could then
be done for "Guerrier"

67
00:03:53,485 --> 00:03:55,025
to access its energy level?

68
00:03:55,343 --> 00:03:58,660
What is important to grasp is
that the access right "protected"

69
00:03:58,660 --> 00:04:01,199
simply extends the "private" access right

70
00:04:01,199 --> 00:04:05,042
by granting special access rights

71
00:04:05,042 --> 00:04:08,227
to all the subclasses,
but nowhere else.

72
00:04:08,227 --> 00:04:12,077
Outside these privileged (sub)classes however,

73
00:04:12,077 --> 00:04:13,707
the "protected" member is seen as "private".

74
00:04:14,130 --> 00:04:18,170
For example, if
in the main() function,

75
00:04:21,792 --> 00:04:29,718
I declare an object of type "Guerrier",
and if I try to access

76
00:04:29,718 --> 00:04:32,994
its energy level through
an access like this,

77
00:04:32,994 --> 00:04:37,171
well, this is impossible, as outside the
methods of subclasses

78
00:04:37,171 --> 00:04:39,861
the data member is seen
as private.

79
00:04:40,103 --> 00:04:44,632
More specifically, a protected data
member, will be directly accessible

80
00:04:44,632 --> 00:04:49,238
from within subclasses, but only in their own scope.

81
00:04:49,238 --> 00:04:52,762
Let's start by briefly recalling

82
00:04:52,762 --> 00:04:56,286
what the "scope" of a class represents
with a simple example,

83
00:04:56,286 --> 00:04:57,573
independently of inheritance.

84
00:04:57,573 --> 00:05:00,403
Suppose that we have
a class B

85
00:05:02,199 --> 00:05:09,529
where we have defined a private
data member, such as  b.

86
00:05:09,973 --> 00:05:14,493
We know that the data member b
is accessible in the scope of B,

87
00:05:14,525 --> 00:05:17,764
that is, in every method
of the class B.

88
00:05:17,764 --> 00:05:21,844
More specifically, C++ implements
what is called "class scope"

89
00:05:21,852 --> 00:05:25,654
which means concretely that
this member b will be accessible

90
00:05:25,654 --> 00:05:29,212
from anywhere within the scope of B,
through any object of type B,

91
00:05:29,212 --> 00:05:33,027
be it an object pointed by "this"
or any other instance of B.

92
00:05:33,897 --> 00:05:38,694
This means that in a method
of the class B,

93
00:05:38,694 --> 00:05:43,118
we are allowed to access b,
when writing something like this,

94
00:05:43,118 --> 00:05:45,961
implicitly we are working
with the data variable b

95
00:05:45,961 --> 00:05:49,321
of the considered object.
It's just like writing

96
00:05:49,321 --> 00:05:53,958
something like this.
We are also allowed to access

97
00:05:53,958 --> 00:05:57,841
the member b, via any other instance
of the class B.

98
00:05:57,841 --> 00:06:02,861
That is, for example, if the method "m"
took as parameter

99
00:06:03,904 --> 00:06:07,866
another object of type B,
we would also have the right

100
00:06:10,166 --> 00:06:13,266
to access the data member
b through this other object of type B.

101
00:06:13,613 --> 00:06:17,808
So, in the class B, we have the right to
access this data member

102
00:06:17,808 --> 00:06:21,238
through any object of type B,
whether it is "this" or any other B.

103
00:06:21,464 --> 00:06:25,483
Here, when I say that a data member b
is "of B scope",

104
00:06:25,483 --> 00:06:30,753
I mean that it is only accessible
inside the class B

105
00:06:30,814 --> 00:06:32,590
and through any object
of type B.

106
00:06:32,590 --> 00:06:35,057
Let's see in a more complicated
example

107
00:06:35,057 --> 00:06:38,680
what it means for an access right
that is this time 'protected'

108
00:06:38,680 --> 00:06:43,160
to only be accessible to
subclasses "in their own scope".

109
00:06:43,175 --> 00:06:47,335
Here we have a subclass B
that inherits from a superclass A

110
00:06:47,350 --> 00:06:51,350
which has a protected data member 'a'
and a private data member.

111
00:06:51,438 --> 00:06:55,867
The protected 'a' is accessible
in the subclass B

112
00:06:55,867 --> 00:07:01,824
but only in its own scope,
that is, inside the class B

113
00:07:01,824 --> 00:07:05,677
via any object of type B,
be it "this" or any other b.

114
00:07:05,677 --> 00:07:09,827
On the other hand, the private data
member is only accessible in the scope of A,

115
00:07:09,843 --> 00:07:13,873
and not inside B.

116
00:07:14,019 --> 00:07:16,919
Let's examine this with
a method 'f'

117
00:07:17,035 --> 00:07:22,164
of the class B that takes as parameters
an object of type B, an object of type A,

118
00:07:22,164 --> 00:07:23,384
and an "int".

119
00:07:23,727 --> 00:07:25,097
When we write this

120
00:07:26,759 --> 00:07:32,268
we are accessing a protected
data member 'a' in the scope of B

121
00:07:32,268 --> 00:07:35,251
because we are inside B and are
accessing 'a'

122
00:07:35,251 --> 00:07:38,290
of the current instance.
We are of course

123
00:07:38,290 --> 00:07:40,520
in the scope of B,
which makes this possible.

124
00:07:40,556 --> 00:07:46,797
Here, since it is not possible
in the subclass to access

125
00:07:46,797 --> 00:07:48,740
a private member of 
its superclass,

126
00:07:48,740 --> 00:07:51,730
this line would lead
to an error.

127
00:07:52,341 --> 00:07:53,301
The access here

128
00:07:54,559 --> 00:07:59,211
to a private data member of
the superclass via any object of type B

129
00:07:59,211 --> 00:08:01,420
is only possible in B,
via 'this' as in the case here,

130
00:08:01,420 --> 00:08:03,010
or another B.

131
00:08:03,070 --> 00:08:07,100
Again, attempting access to a
private member will result in an error here.

132
00:08:07,388 --> 00:08:11,631
As we saw that protected members
are only accessible

133
00:08:11,631 --> 00:08:13,094
in the scope of B,

134
00:08:13,094 --> 00:08:15,701
that is to say, inside B
and via any object of type B,

135
00:08:15,701 --> 00:08:18,582
then this access is possible
just like this one.

136
00:08:18,582 --> 00:08:22,035
All objects through
which we access A

137
00:08:22,035 --> 00:08:25,218
are in the scope of B.
This access is therefore possible.

138
00:08:25,218 --> 00:08:29,750
Finally, in a last example, we
try to access the protected members of A

139
00:08:29,750 --> 00:08:32,047
but we aren't in the
scope of B.

140
00:08:32,047 --> 00:08:35,043
How is this possible? We are
indeed inside B

141
00:08:35,043 --> 00:08:38,125
and in a method of B, but we
are attempting access to this data member

142
00:08:38,125 --> 00:08:42,914
via an object that is not of type B,
but of type A.

143
00:08:42,914 --> 00:08:45,911
Thus, we are outside

144
00:08:45,911 --> 00:08:51,101
the scope of B, which
prevents this action.

145
00:08:51,822 --> 00:08:53,852
To take a more concrete
example,

146
00:08:53,873 --> 00:08:58,053
imagine that we have a class "Personnage"
instead of our class A,

147
00:08:59,206 --> 00:09:02,866
and which has a protected data member

148
00:09:06,076 --> 00:09:08,736
defining the energy level of the character.

149
00:09:12,581 --> 00:09:17,278
The role of the class B would
be played by a subclass "Guerrier"

150
00:09:19,268 --> 00:09:20,758
who would be a subclass of "Personnage"

151
00:09:22,694 --> 00:09:27,464
and would have a method
equivalent to the method "f":

152
00:09:27,567 --> 00:09:29,497
a method "frapper"
(TN: "frapper" means "to hit")

153
00:09:32,427 --> 00:09:35,517
that enables the warrior
to hit another character.

154
00:09:39,649 --> 00:09:43,602
If we would like this method
to take into account that the

155
00:09:43,602 --> 00:09:47,662
energy level of a character diminishes
when a warrior strikes him,

156
00:09:47,671 --> 00:09:51,191
we could imagine for example
to write something like this.

157
00:09:56,405 --> 00:10:00,735
However, this would not work;
accessing it this way is impossible

158
00:10:00,841 --> 00:10:04,394
because of the same rule
as that which is applied here,

159
00:10:05,714 --> 00:10:09,964
the object "p" which has the same
role as "autreA" in the other example,

160
00:10:10,048 --> 00:10:11,305
is outside the scope,

161
00:10:11,305 --> 00:10:13,395
and is not in the same scope
as the object 'this'.

162
00:10:14,007 --> 00:10:17,093
So now you know the
access rights in C++,

163
00:10:17,093 --> 00:10:19,759
public members are accessible to

164
00:10:19,759 --> 00:10:22,054
all the programmers-users of a given class,

165
00:10:22,054 --> 00:10:25,143
contrarily, private members
are accessible exclusively

166
00:10:25,143 --> 00:10:28,769
to the programmer of the class.
They represent the internal structure

167
00:10:28,769 --> 00:10:31,791
of the class and are
modifiable without

168
00:10:31,791 --> 00:10:33,481
repercussions on the
class users.

169
00:10:33,481 --> 00:10:36,607
Finally, protected members are accessible

170
00:10:36,607 --> 00:10:40,606
to all programmers of extensions
that extend the class in question,

171
00:10:40,606 --> 00:10:43,496
by adding subclasses.
Inside these subclasses

172
00:10:43,496 --> 00:10:46,486
it is possible to access these
protected members.

173
00:10:46,966 --> 00:10:49,805
This concludes this episode
about access rights

174
00:10:49,805 --> 00:10:51,285
in the context of
a hierarchy of classes.
