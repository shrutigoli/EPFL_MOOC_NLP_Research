1
00:00:04,299 --> 00:00:07,040
Having considered the notions
encapsulation and abstraction,

2
00:00:07,040 --> 00:00:09,780
we will consider
in the following episodes

3
00:00:09,779 --> 00:00:13,919
a third fundamental notion
in OOP:

4
00:00:13,919 --> 00:00:15,368
inheritance.

5
00:00:15,368 --> 00:00:19,300
Let's start with an example,

6
00:00:19,300 --> 00:00:22,139
and forget, for once, rectangles
and other geometric shapes

7
00:00:22,139 --> 00:00:25,288
to concentrate on
players of a game.

8
00:00:25,288 --> 00:00:29,508
Imagine that we would like
to play a game that involves

9
00:00:29,509 --> 00:00:31,629
warriors, magicians, rogues,
and the like.

10
00:00:31,629 --> 00:00:33,780
How would we represent this?

11
00:00:33,780 --> 00:00:37,009
We could imagine
that we have a class for warriors,

12
00:00:37,009 --> 00:00:39,399
a class for rogues, a class for
magicians, and so on.

13
00:00:39,399 --> 00:00:43,509
For a warrior we could imagine

14
00:00:43,509 --> 00:00:46,250
that we could have data members
such as a name,

15
00:00:46,250 --> 00:00:50,509
an energy level, a certain lifespan,
and certainly a weapon.

16
00:00:50,509 --> 00:00:52,249
As for methods, we
could imagine

17
00:00:52,249 --> 00:00:55,979
that a warrior can meet
other people.

18
00:00:55,979 --> 00:01:01,060
For a rogue, he would also have
a name, an energy level, a lifespan,

19
00:01:01,060 --> 00:01:05,129
and he can also meet other
people, and even steal from them.

20
00:01:05,129 --> 00:01:08,970
As for the magician, he would also
have a name, energy level, lifespan

21
00:01:08,970 --> 00:01:10,789
he could also meet others
and he would maybe

22
00:01:10,790 --> 00:01:13,960
also have a wand instead
of a weapon.

23
00:01:13,959 --> 00:01:17,609
We could also have witches kind
of like magicians

24
00:01:17,609 --> 00:01:20,510
but who would have a
staff as well as a wand.

25
00:01:20,510 --> 00:01:21,740
All these classes would have much
duplicated code,

26
00:01:21,739 --> 00:01:24,319
and it would be a waste of time to write
all that,

27
00:01:24,319 --> 00:01:26,139
and most importantly, would be

28
00:01:26,140 --> 00:01:28,310
problematic for maintenance.

29
00:01:28,310 --> 00:01:31,208
Imagine that we do want a
property lifespan anymore,

30
00:01:31,208 --> 00:01:33,459
and instead have life points,

31
00:01:33,459 --> 00:01:36,710
or that the energy level is
not an "int" but a "double".

32
00:01:36,710 --> 00:01:40,549
Then we would have to
revise all the classes that we made.

33
00:01:40,549 --> 00:01:42,920
There is definitely
a better way than this!

34
00:01:42,920 --> 00:01:47,580
This is where the notion of inheritance comes
in: inheritance solves this type of problem

35
00:01:47,580 --> 00:01:51,469
by grouping together data
members and methods

36
00:01:51,469 --> 00:01:55,748
that are common to each class
into what we will call a superclass.

37
00:01:55,748 --> 00:02:00,289
This class regroups characteristics
that are enriched or specialized

38
00:02:00,289 --> 00:02:02,879
in its derived classes that are more
specific.

39
00:02:02,879 --> 00:02:06,149
In our class, the superclass would be
a class "Personnage" (TN: means "Character")

40
00:02:06,149 --> 00:02:08,690
a generic character which
would by the way

41
00:02:08,690 --> 00:02:11,100
solve one of the problems we had:

42
00:02:11,100 --> 00:02:16,028
the fact that we did not
have a class Personnage.

43
00:02:16,028 --> 00:02:18,509
Anticipating a little,

44
00:02:18,509 --> 00:02:21,308
here is what we could
do using inheritance,

45
00:02:21,308 --> 00:02:23,088
by grouping in the class
Personnage

46
00:02:23,088 --> 00:02:25,728
the properties shared by
the classes:

47
00:02:25,729 --> 00:02:28,030
name, energy, lifespan,

48
00:02:28,030 --> 00:02:29,240
as well as methods, 

49
00:02:29,240 --> 00:02:32,028
for example "recontrer"
(TN: means "meet").

50
00:02:32,028 --> 00:02:33,928
So this superclass groups

51
00:02:33,928 --> 00:02:36,238
together the common characteristics
of these characters

52
00:02:36,238 --> 00:02:40,329
which would be inherited
by the rogue, the magician, etc.

53
00:02:40,330 --> 00:02:45,020
with each character having
his own particularities, like

54
00:02:45,020 --> 00:02:49,349
a weapon for the warrior, a wand for the
magician, a method to steal for the rogue, ...

55
00:02:49,349 --> 00:02:54,029
From the class magician, we could
even have a supplementary extension,

56
00:02:54,029 --> 00:02:55,469
an extra level of inheritance,

57
00:02:55,469 --> 00:02:59,629
so as to have a witch that is a
magician but with a staff as well

58
00:02:59,629 --> 00:03:01,649
as a wand.

59
00:03:01,649 --> 00:03:05,969
So this is the purpose of 
inheritance in OOP.

60
00:03:05,969 --> 00:03:08,849
It represents an "is-a" relationship,

61
00:03:08,849 --> 00:03:13,609
and avoids that common code be
duplicated.

62
00:03:13,609 --> 00:03:16,900
Inheritance also enables
specialized classes

63
00:03:16,900 --> 00:03:19,139
enriched with members to be created.

64
00:03:19,139 --> 00:03:23,398
So a superclass is a class

65
00:03:23,398 --> 00:03:27,320
from which subclasses
are derived.

66
00:03:27,320 --> 00:03:29,669
We also say that subclasses inherit
and we indicate this with an arrow

67
00:03:29,669 --> 00:03:32,849
in this direction.

68
00:03:32,849 --> 00:03:35,679
Subclasses inherit from superclasses,
and so are as a result extensions,

69
00:03:35,680 --> 00:03:40,289
either by adding data members
or methods, 

70
00:03:40,289 --> 00:03:43,749
or by specializing the inherited methods,
making them extensions of the superclass.

71
00:03:43,749 --> 00:03:46,140
Before detailing these
in an concrete example,

72
00:03:46,140 --> 00:03:48,748
let's investigate what an inheritance
relationship implicates.

73
00:03:48,748 --> 00:03:50,469
If a subclass C1 is derived from
a class C

74
00:03:50,469 --> 00:03:54,979
or "inherits" from the class C,

75
00:03:54,979 --> 00:03:57,209
we will say that C1 "is a" C.

76
00:03:57,210 --> 00:03:59,240
that is to say, that the type
is inherited.

77
00:03:59,240 --> 00:04:02,530
So for example, if I
have a variable x, of type C,

78
00:04:02,530 --> 00:04:05,588
and a variable y of type C1,

79
00:04:05,588 --> 00:04:13,629
I can in fact put y in x, because
a C1 y "is a" C as well.

80
00:04:13,629 --> 00:04:17,459
However, here it is copied
as being a "C",

81
00:04:17,459 --> 00:04:21,680
and loses its specificity as a "C1",
because it is copied in a "C",


82
00:04:21,680 --> 00:04:23,970
so here it is copied as a "C",

83
00:04:23,970 --> 00:04:28,470
only the part of "C"
of y that is copied in x.

84
00:04:28,470 --> 00:04:32,389
Moreover, the class C1 inherits
from the set of data members

85
00:04:32,389 --> 00:04:35,659
and methods of C.

86
00:04:35,659 --> 00:04:37,870
When we say the set of
data members and members,

87
00:04:37,870 --> 00:04:40,389
except for the constructors
and for the destructor,

88
00:04:40,389 --> 00:04:43,460
-- although since C++ 2011
we can even inherit constructors --


89
00:04:43,460 --> 00:04:47,870
We will talk more about that later,
in the next episodes.

90
00:04:47,870 --> 00:04:51,859
The data members and methods
of C are available in C1

91
00:04:51,859 --> 00:04:55,650
without having to
redefine them explicitly

92
00:04:55,649 --> 00:04:56,500
and finally,

93
00:04:56,500 --> 00:04:59,680
the supplementary data members
and methods can be added to C1

94
00:04:59,680 --> 00:05:02,329
-- this is called enrichment.

95
00:05:02,329 --> 00:05:06,609
But the methods inherited from
C in C1 can also be redefined

96
00:05:06,610 --> 00:05:09,218
-- this is called specialization.

97
00:05:09,218 --> 00:05:11,709
Let's review this in a
detailed example:

98
00:05:11,709 --> 00:05:15,060
imagine that we want to create
a superclass "Personnage"

99
00:05:15,060 --> 00:05:19,710
with 2 subclasses Guerrier and Voleur
(TN: guerrier means warrior, and voleur, rogue).

100
00:05:19,710 --> 00:05:23,579
So we said that when a subclass "C1"
for example here a "Guerrier"

101
00:05:23,579 --> 00:05:28,038
is created from a superclass "C",
so for example here a "Personnage",

102
00:05:28,038 --> 00:05:29,828
the type is inherited.

103
00:05:29,828 --> 00:05:34,098
Actually a "Guerrier" is a "Personnage" as well,
[TN: a Warrior is a Character]

104
00:05:34,098 --> 00:05:35,869
which allows us to write the
following code.

105
00:05:35,869 --> 00:05:40,040
Suppose that we have declared
a variable p of type "Personnage" and

106
00:05:40,040 --> 00:05:43,749
a variable g of type "Guerrier"

107
00:05:43,749 --> 00:05:48,499
that we manipulate and for example
we say that the character p is the warrior g.

108
00:05:48,499 --> 00:05:51,199
So we put the warrior g
in the character p,

109
00:05:51,199 --> 00:05:55,869
which we are allowed to do
because a warrior is a character.

110
00:05:55,869 --> 00:06:00,340
But be careful, we only
put the "Personnage" part of g in p

111
00:06:00,340 --> 00:06:04,100
and this assignment is done
seen as a "Personnage"

112
00:06:04,100 --> 00:06:07,150
and only the part of g
is copied in p.

113
00:06:07,150 --> 00:06:09,910
For example, only "Guerrier" but not all
"Personnages" have an weapon

114
00:06:09,910 --> 00:06:12,859
so "arme" is not copied.
(TN: "arme" mean "weapon")

115
00:06:12,859 --> 00:06:14,809
Of course, we can't do
the contrary

116
00:06:14,809 --> 00:06:17,329
and write "g = p;"

117
00:06:17,329 --> 00:06:19,849
A generic character is
not a warrior in general,

118
00:06:19,849 --> 00:06:22,370
because characters can also
be rogues or magicians,

119
00:06:22,370 --> 00:06:23,430
and we cannot put
a rogue in a warrior,

120
00:06:23,430 --> 00:06:27,709
which would not have any meaning.

121
00:06:27,709 --> 00:06:32,758
So here, the relationship has a certain
direction, it's the warrior who is a character.

122
00:06:32,758 --> 00:06:36,039
We can also imagine a function

123
00:06:36,038 --> 00:06:38,689
that displays a character,

124
00:06:38,689 --> 00:06:45,088
and we could display g,
which is a warrior passed as argument

125
00:06:45,088 --> 00:06:48,848
to the function "afficher" as a character,
(TN: "afficher" means "print" or "display")

126
00:06:48,848 --> 00:06:51,278
(the function "afficher" sees
g as a "Personnage"),

127
00:06:51,278 --> 00:06:55,408
but we can only do this
because a warrior is a character.

128
00:06:55,408 --> 00:06:58,268
A 2nd aspect of inheritance:

129
00:06:58,268 --> 00:07:01,300
Guerrier will inherit, that is to
say, receive, contain

130
00:07:01,300 --> 00:07:04,720
the set of data members
and methods of Personnage.

131
00:07:04,720 --> 00:07:09,060
So for example, if Personnage
had a name, an energy, a lifespan

132
00:07:09,060 --> 00:07:11,699
and say a method "rencontrer",

133
00:07:11,699 --> 00:07:15,408
and Guerrier inherits
from the class Personnage,

134
00:07:15,408 --> 00:07:20,058
then in Guerrier we would also have
an energy, a lifespan,

135
00:07:20,058 --> 00:07:22,418
without needing to
redefine them,

136
00:07:22,418 --> 00:07:24,359
and also a "rencontrer" method, so

137
00:07:24,359 --> 00:07:25,720
we could do something like this.

138
00:07:25,720 --> 00:07:31,758
Suppose that here, with a Guerrier g
and Voleur v, which are characters,

139
00:07:31,758 --> 00:07:36,159
g , of type Guerrier, will inherit
the method rencontrer,

140
00:07:36,159 --> 00:07:37,909
which we could invoke,
if this method is

141
00:07:37,909 --> 00:07:41,399
included in the public
interface of Personnage,

142
00:07:41,399 --> 00:07:46,050
using a syntax "g.rencontrer(v);",

143
00:07:46,050 --> 00:07:51,189
here we pass the rogue v as
argument to the method rencontrer,

144
00:07:51,189 --> 00:07:54,329
but what is important here is to
see that this method rencontrer

145
00:07:54,329 --> 00:07:56,809
is visible to g and
can be called by g because

146
00:07:56,809 --> 00:08:00,400
Guerrier has inherited this
method from Personnage.

147
00:08:00,399 --> 00:08:04,018
Likewise, if we had some
method in Guerrier,

148
00:08:04,018 --> 00:08:08,209
we can directly use the data
member energie like this

149
00:08:08,209 --> 00:08:11,069
in a method of Guerrier,
supposing that energie is not private.

150
00:08:11,069 --> 00:08:17,630
So energie is inherited from
Personnage in the class Guerrier

151
00:08:17,630 --> 00:08:21,989
without having to add
any code.

152
00:08:21,989 --> 00:08:25,098
It's done automatically thanks
to inheritance.

153
00:08:25,098 --> 00:08:28,098
The third and last aspect
that we want to focus on

154
00:08:28,098 --> 00:08:30,708
is that even if the members
of a class are inherited,

155
00:08:30,708 --> 00:08:32,088
and are accessible in the
subclasses,

156
00:08:32,088 --> 00:08:36,150
we can always add
data members and

157
00:08:36,150 --> 00:08:37,437
methods which is called
enrichment,

158
00:08:37,437 --> 00:08:41,229
e.g. adding a data member "arme"
(TN: means "weapon") to the class Guerrier,

159
00:08:41,230 --> 00:08:45,680
and we can redefine methods
called specialization,

160
00:08:45,680 --> 00:08:49,409
so for instance, we could redefine

161
00:08:49,409 --> 00:08:52,068
the method rencontrer of the class
Voleur by saying that when a rogue

162
00:08:52,068 --> 00:08:56,339
meets another person,
he also steals, for example.

163
00:08:56,340 --> 00:08:59,930
Inheritance is a paramount
notion in POO,

164
00:08:59,930 --> 00:09:02,400
because it enables the code to
be organized

165
00:09:02,400 --> 00:09:05,389
to make it more comprehensible

166
00:09:05,389 --> 00:09:09,229
by elucidating structural and
semantical relationships

167
00:09:09,229 --> 00:09:11,199
that exist among the classes,

168
00:09:11,199 --> 00:09:16,639
for example, that a warrior is a character,
or that a witch is a type of magician.

169
00:09:16,639 --> 00:09:20,620
Inheritance also avoids duplicating
large sections of code,

170
00:09:20,620 --> 00:09:23,690
called "code redundancy".

171
00:09:23,690 --> 00:09:26,579
Be careful in how you use inheritance:
use it

172
00:09:26,579 --> 00:09:31,129
only for "is-a" relationships,

173
00:09:31,129 --> 00:09:33,559
e.g. a warrior is a character,

174
00:09:33,559 --> 00:09:38,009
but a warrior is not a weapon,
we say a warrior "has a" weapon,

175
00:09:38,009 --> 00:09:41,319
and to represent a
relationship of possession,

176
00:09:41,320 --> 00:09:45,000
we will use a notion from
before: encapsulation.

177
00:09:45,000 --> 00:09:49,350
Therefore, to summarize, a warrior
inherits from the class Personnage

178
00:09:49,350 --> 00:09:54,860
but will also have as encapsulated
data member a weapon.

179
00:09:54,860 --> 00:09:58,220
We saw that a subclass
can "inherit" from a superclass,

180
00:09:58,220 --> 00:10:00,970
"inherit" means
receive and possess

181
00:10:00,970 --> 00:10:03,818
the data members and member functions of this


182
00:10:03,818 --> 00:10:06,129
superclass, except for constructors
and destructor.

183
00:10:06,129 --> 00:10:10,080
This aspect is transitive,
that is to say if we have

184
00:10:10,080 --> 00:10:14,340
a super-super-class from which
a superclass is derived,

185
00:10:14,340 --> 00:10:17,879
then in the subclass, we
will find all the members of these 2 classes.

186
00:10:17,879 --> 00:10:21,219
More concretely,
if I have a super-super-class A,

187
00:10:21,219 --> 00:10:23,338
from which a superclass B is derived, 
from which a class C is derived,

188
00:10:23,339 --> 00:10:26,030
we will find in C the members
found in B,

189
00:10:26,030 --> 00:10:31,528
but also those in A, because
B inherits them from A,

190
00:10:31,528 --> 00:10:34,769
and so they are
accessible in B.

191
00:10:34,769 --> 00:10:37,980
So in B, I have the data
members and methods of A,

192
00:10:37,980 --> 00:10:40,969
and by transitivity,
I also have in

193
00:10:40,969 --> 00:10:46,069
C, these same data members
and methods of A.

194
00:10:46,069 --> 00:10:50,370
So in a concrete example, if we
have for instance a class Personnage,

195
00:10:50,370 --> 00:10:55,590
from which a class Magicien
is derived,

196
00:10:55,590 --> 00:10:58,259
and if we say a witch
is a kind of magician,

197
00:10:58,259 --> 00:11:01,719
then the class Sorcier inherits from the class Magicien.
(TN "Sorcier" means "Witch" or "Sorcerer")

198
00:11:01,719 --> 00:11:03,469
At this point, in the class Sorcier,

199
00:11:03,469 --> 00:11:07,640
we will also have the
data members for the

200
00:11:07,640 --> 00:11:12,349
name, energy, lifespan
that were inherited along with

201
00:11:12,349 --> 00:11:15,299
the method rencontrer that were
inherited in the magician class

202
00:11:15,299 --> 00:11:18,210
and inherited again in the
class Sorcier

203
00:11:18,210 --> 00:11:26,340
and of course, Sorcier will also have the
member baguette,inherited from Magicien.

204
00:11:26,340 --> 00:11:28,850
Thus we have something like
this for inheritance,

205
00:11:28,850 --> 00:11:32,250
a progressive enrichment
of each class,

206
00:11:32,280 --> 00:11:35,059
finally resulting in,

207
00:11:35,059 --> 00:11:37,749
if we draw all the relationships
between the classes,

208
00:11:37,749 --> 00:11:43,629
an arborescent graph,
a treelike organization,

209
00:11:43,629 --> 00:11:46,409
where we see the dependencies
between classes,

210
00:11:46,409 --> 00:11:47,970
the "is-a" relationships, and
the relationships of inheritance,

211
00:11:47,970 --> 00:11:52,410
of data members, methods,
and also types,

212
00:11:52,409 --> 00:11:56,449
which we call as whole,
a class hierarchy,

213
00:11:56,449 --> 00:11:58,770
with the most general class,
Personnnage, at the top,

214
00:11:58,770 --> 00:12:03,000
and the most specialized classes
on the bottom.

215
00:12:03,000 --> 00:12:08,219
To summarize, the inheritance
relationship avoids duplicating code

216
00:12:08,219 --> 00:12:11,412
by implementing in our programs
"is-a" relationships,

217
00:12:11,412 --> 00:12:13,555
creating superclasses that
are more general

218
00:12:13,555 --> 00:12:16,949
which are called "parent classes"

219
00:12:16,949 --> 00:12:18,933
which group the general properties

220
00:12:18,933 --> 00:12:21,339
from which inherit subclasses

221
00:12:21,339 --> 00:12:25,169
also called "child classes"

222
00:12:25,169 --> 00:12:29,490
that receive the set
of data members and methods,

223
00:12:29,490 --> 00:12:32,629
as well as the type of the superclass
that they depend on.

224
00:12:32,629 --> 00:12:37,009
For now, the subclasses inherit
from one sole superclass

225
00:12:37,019 --> 00:12:40,479
but in a few weeks we will have
them inherit from

226
00:12:40,479 --> 00:12:44,860
several superclasses.
That is called "mutiple inheritance".

227
00:12:44,860 --> 00:12:47,860
Up to now, this notion of
inheritance has been

228
00:12:47,860 --> 00:12:50,409
presented very conceptually
and theoretically,

229
00:12:50,409 --> 00:12:53,969
but how do we implement it
in a real program,

230
00:12:53,970 --> 00:12:55,519
and make a subclass inherit
from a superclass?

231
00:12:55,519 --> 00:12:57,769
Let's start with a concrete example.

232
00:12:57,769 --> 00:12:59,999
Suppose, that we want to define
a class "Rectangle"

233
00:12:59,999 --> 00:13:04,209
with a width "largeur" and
a height "hauteur",

234
00:13:04,209 --> 00:13:06,980
and which is also a "FigureGeometrique"
(TN: means "GeometricShape")

235
00:13:06,980 --> 00:13:10,630
And this class of geometric
shapes also has a position.

236
00:13:10,650 --> 00:13:12,699
So we would have the
following inheritance diagram,

237
00:13:12,699 --> 00:13:16,952
a superclass "FigureGeometrique",
with a data member "position",

238
00:13:16,952 --> 00:13:20,545
and a subclass "Rectangle",
derived from "FigureGeometrique".

239
00:13:20,545 --> 00:13:23,049
A rectangle
is a geometric shape,

240
00:13:23,049 --> 00:13:25,569
and so will have supplementary
data members,

241
00:13:25,569 --> 00:13:27,819
besides the inherited
data member position,

242
00:13:27,819 --> 00:13:29,479
such as largeur
and hauteur that

243
00:13:29,479 --> 00:13:32,320
are defined in Rectangle.

244
00:13:32,320 --> 00:13:35,030
But how do I code all this in C++?

245
00:13:35,029 --> 00:13:37,720
The normal syntax to declare a subclass

246
00:13:37,720 --> 00:13:40,279
to inherit from a superclass

247
00:13:40,279 --> 00:13:45,150
is to simply add colon (':'), "public",
followed by the name of the super-class

248
00:13:45,150 --> 00:13:49,110
behind the class declaration,
that is behind the class header,

249
00:13:49,110 --> 00:13:52,600
behind the first line
"class", name of the subclass.

250
00:13:52,620 --> 00:13:56,208
So for example,
if I have a class "Rectangle",

251
00:13:56,208 --> 00:13:59,498
that inherits from the
class "FigureGeometrique",

252
00:13:59,498 --> 00:14:06,269
we add behind the normal declaration
"class Rectangle", ": public FigureGeometrique".

253
00:14:06,269 --> 00:14:10,230
This makes the class Rectangle
an extension of the class FigureGeometrique

254
00:14:10,230 --> 00:14:13,160
and makes a "Rectangle"
to be a "FigureGeometric" (is-a relation)

255
00:14:13,160 --> 00:14:16,079
by receiving the set of data
members and member functions

256
00:14:16,079 --> 00:14:19,049
(apart from the constructors
and destructor).

257
00:14:19,049 --> 00:14:20,712
The only thing to add is

258
00:14:20,712 --> 00:14:23,935
the usual definition of
our class Rectangle,

259
00:14:23,935 --> 00:14:27,020
so that is inherits from
FigureGeometrique

260
00:14:27,020 --> 00:14:30,620
is simply this portion of the code.

261
00:14:30,620 --> 00:14:34,289
In the same way, if I come back to our
example of warriors

262
00:14:34,289 --> 00:14:36,758
with a warrior being a character

263
00:14:36,758 --> 00:14:40,169
so we have a class Personnage
that is defined

264
00:14:40,169 --> 00:14:43,579
that contains all the
data members already mentioned

265
00:14:43,580 --> 00:14:46,870
and we say a warrior is a character
by writing like this

266
00:14:46,870 --> 00:14:51,129
the declaration of Guerrier:
"class Guerrier: public Personnage"

267
00:14:51,129 --> 00:14:55,429
a "Guerrier" inherits from "Personnage",
a "Guerrier" is a "Personnage"

268
00:14:55,429 --> 00:14:58,910
and next we would have
the usual definition of "Guerrier"

269
00:14:58,910 --> 00:15:04,240
with as supplementary member
his weapon ("arme").

270
00:15:04,240 --> 00:15:06,890
So this concludes this
general introduction

271
00:15:06,890 --> 00:15:10,490
to the important concept
in OOP

272
00:15:10,490 --> 00:15:11,720
of inheritance,

273
00:15:11,720 --> 00:15:14,920
The next episodes continue
to detail this concept

274
00:15:14,920 --> 00:15:16,879
from a more practical
point of view

275
00:15:16,879 --> 00:15:20,169
by considering the details
of its implication.
