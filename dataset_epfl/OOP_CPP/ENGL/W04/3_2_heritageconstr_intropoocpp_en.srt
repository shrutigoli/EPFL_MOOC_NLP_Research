1
00:00:03,894 --> 00:00:05,413
Let's examine in detail

2
00:00:05,413 --> 00:00:08,677
the order constructors
are called in a class hierarchy.

3
00:00:08,677 --> 00:00:12,100
Suppose for example
that we have defined a class C,

4
00:00:12,420 --> 00:00:14,932
with certain fields
and methods,

5
00:00:15,313 --> 00:00:17,235
and which inherits from a class B,

6
00:00:17,235 --> 00:00:19,964
which has its own data members
and its own methods;

7
00:00:19,964 --> 00:00:23,252
and which itself inherits from
a class A,

8
00:00:23,252 --> 00:00:25,892
with its own data members
and methods.

9
00:00:25,892 --> 00:00:29,841
And so we declare here an instance,
'mon_c' of the class C,

10
00:00:29,841 --> 00:00:33,902
by calling a constructor of a class C.

11
00:00:33,902 --> 00:00:37,186
What happens then, when we
declare an instance, like this for example,

12
00:00:38,216 --> 00:00:40,554
by calling this constructor?

13
00:00:40,554 --> 00:00:45,052
This constructor here,
in its initialization list,

14
00:00:45,052 --> 00:00:49,019
calls a constructor of B,
whether this is written explicitly

15
00:00:49,019 --> 00:00:51,396
or by calling the default
constructor.

16
00:00:51,396 --> 00:00:54,530
Then of course, comes the initialization of
data members.

17
00:00:54,530 --> 00:00:57,139
So when we call the
constructor here,

18
00:00:57,139 --> 00:01:01,711
we start by calling
the class constructor of the class B.

19
00:01:01,711 --> 00:01:05,694
The constructor of the class B
has in its initialization list,

20
00:01:05,694 --> 00:01:08,748
a call to a constructor
of its superclass in turn.

21
00:01:08,748 --> 00:01:12,382
So by calling the
constructor of the class B

22
00:01:12,382 --> 00:01:13,823
in the constructor of the class C,

23
00:01:13,823 --> 00:01:15,425
we first called

24
00:01:15,425 --> 00:01:18,742
the constructor of the
super-super-class A.

25
00:01:18,742 --> 00:01:21,016
So the first thing that will
be done

26
00:01:21,016 --> 00:01:24,299
when a C constructor is called,

27
00:01:24,299 --> 00:01:28,540
is the execution of the constructor

28
00:01:28,540 --> 00:01:30,690
of the highest class in the hierarchy,
the super-super-class here.

29
00:01:30,690 --> 00:01:32,937
And so this constructor

30
00:01:32,937 --> 00:01:36,856
will initialize the data members
'a1' and 'a2'.

31
00:01:36,856 --> 00:01:41,245
And so in the construction of a C,
we start the construction of a B,

32
00:01:41,245 --> 00:01:44,796
which itself launched the
construction of an object A.

33
00:01:44,796 --> 00:01:48,175
The first thing that occurs in
the construction of a C,

34
00:01:48,175 --> 00:01:50,235
is the construction of its inherited
part A,

35
00:01:50,235 --> 00:01:53,120
because of the parental
relationship with A.

36
00:01:53,120 --> 00:01:58,166
C inherits all the data members from B,
B inherits all the data members from A,

37
00:01:58,166 --> 00:02:03,608
so in C we find in fact
the attributes a1 and a2.

38
00:02:03,608 --> 00:02:06,858
So, in the construction of C,
that not yet completed,

39
00:02:06,858 --> 00:02:10,379
we started by constructing
the part from A.

40
00:02:10,379 --> 00:02:12,306
That's the first thing that occurs.

41
00:02:13,216 --> 00:02:16,365
Once we've finished executing
the A constructor,

42
00:02:16,365 --> 00:02:19,830
we come back to the initialization
list in the B constructor,

43
00:02:19,830 --> 00:02:23,570
to initialize the parts that are specific
to the class B,

44
00:02:23,570 --> 00:02:28,287
and so we initialize the attribute
'b1' from the class B.

45
00:02:28,287 --> 00:02:31,274
And after finishing the
execution of the B constructor,

46
00:02:31,274 --> 00:02:35,571
we continue the execution of
the C constructor,

47
00:02:35,571 --> 00:02:40,431
and we end with the initialization
list of the C constructor,

48
00:02:40,431 --> 00:02:45,217
which builds the C part, with
its own attributes.

49
00:02:45,217 --> 00:02:49,738
So after initializing these 3 sections,
we've accomplished the construction of C!

50
00:02:49,738 --> 00:02:52,363
So, in the construction
of a sub-sub-class,

51
00:02:52,363 --> 00:02:54,548
we start by calling the constructor

52
00:02:54,548 --> 00:02:58,618
of the highest class from which
the the constructors of the

53
00:02:58,618 --> 00:03:00,231
intermediate super classes.

54
00:03:00,231 --> 00:03:04,268
We end with part built
by the constructor

55
00:03:04,268 --> 00:03:06,628
of the class that we want
to instansiate.

56
00:03:07,378 --> 00:03:09,330
For destructors,
not much is to be said,

57
00:03:09,330 --> 00:03:13,078
apart from that they are called
in the inverse order.

58
00:03:13,078 --> 00:03:16,279
Destructors are always called inversely
to the order of the constructors.

59
00:03:16,829 --> 00:03:18,548
In the last example,

60
00:03:18,548 --> 00:03:21,550
we first call the C destructor,

61
00:03:21,550 --> 00:03:24,318
because it was the
C constructor

62
00:03:24,318 --> 00:03:25,555
that was last called.

63
00:03:25,555 --> 00:03:27,282
So the first destructor called

64
00:03:27,282 --> 00:03:28,742
in the C destructor,

65
00:03:28,742 --> 00:03:32,801
which calls the B destructor,

66
00:03:32,801 --> 00:03:36,970
which calls in turn the
A destructor.

67
00:03:38,330 --> 00:03:40,764
There are two small details

68
00:03:40,764 --> 00:03:43,476
that we think are worth
the effort to examine

69
00:03:43,476 --> 00:03:48,538
before concluding this part on
constructors and destructors in inheritance.

70
00:03:48,538 --> 00:03:51,123
The first is the
copy constructor.

71
00:03:51,123 --> 00:03:54,220
If you have to redefine
a copy constructor,

72
00:03:54,220 --> 00:03:56,402
which is not necessary
in most cases,

73
00:03:56,402 --> 00:03:59,891
but if you have to do this operation,
then be careful!

74
00:03:59,891 --> 00:04:04,039
In the copy constructor
of a subclass, always remember

75
00:04:04,039 --> 00:04:08,425
to explicitly call the
superclass copy constructor.

76
00:04:08,425 --> 00:04:11,943
For example, suppose that
we have a class Rectangle

77
00:04:11,943 --> 00:04:14,769
that inherits from a class
FigureGeometrique (= 'GeometricShape'),

78
00:04:14,769 --> 00:04:18,220
and this class has an attribute of type 'Position',

79
00:04:18,220 --> 00:04:21,496
that has 2 coordinates
x and y.

80
00:04:21,496 --> 00:04:24,907
and also has for example
2 constructors,

81
00:04:24,907 --> 00:04:27,910
a default constructor,

82
00:04:27,910 --> 00:04:32,114
that initializes the position
at the origin (0,0),

83
00:04:32,114 --> 00:04:36,733
and a constructor
that enables you to initialize

84
00:04:36,733 --> 00:04:40,472
the coordinates (x,y) of the position.

85
00:04:41,272 --> 00:04:45,846
Suppose that we create
an instance r1 of the class Rectangle,

86
00:04:45,846 --> 00:04:48,285
that we initialize with a position,

87
00:04:48,285 --> 00:04:52,230
let's say at (1, 2),

88
00:04:52,230 --> 00:04:57,027
and a width of 3.5
and a height 4.6.

89
00:04:58,037 --> 00:05:01,151
Now we make a copy 'r2' of
'r1'.

90
00:05:01,855 --> 00:05:05,904
We hope that r2, the copy
of r1

91
00:05:05,904 --> 00:05:09,452
has the same position, height, 
and width as r1.

92
00:05:09,452 --> 00:05:14,505
But if we write a copy constructor
like this,

93
00:05:14,505 --> 00:05:18,154
without explicitly calling

94
00:05:18,154 --> 00:05:21,610
the superclass copy constructor.

95
00:05:21,610 --> 00:05:25,990
What happens now, when we
try to make a copy of r1 with r2?

96
00:05:25,990 --> 00:05:30,269
We will call the copy constructor
of the class Rectangle.

97
00:05:30,269 --> 00:05:32,451
This copy constructor
of the class Rectangle,

98
00:05:32,451 --> 00:05:35,379
doesn't explicitly call
in its initialization list

99
00:05:35,379 --> 00:05:37,807
a superclass constructor

100
00:05:37,807 --> 00:05:42,294
and therefore calls the default
constructor of the superclass!

101
00:05:42,294 --> 00:05:45,846
Thus, what we start
by doing in the copy of r1,

102
00:05:45,846 --> 00:05:49,919
is initializing the position
of r2 at (0, 0).

103
00:05:49,919 --> 00:05:55,653
So the rectangle r2 will have a position
at the origin, by default

104
00:05:55,653 --> 00:05:57,781
automatically

105
00:05:57,781 --> 00:06:00,592
because of the default
superclass constructor.

106
00:06:00,592 --> 00:06:03,795
Then we copy the width
of r1 in the width of r2,

107
00:06:03,795 --> 00:06:06,375
and the height of r1 in the height of r2.

108
00:06:06,375 --> 00:06:08,525
So, by omitting this line,

109
00:06:08,575 --> 00:06:13,475
we find r2 with a position at (0, 0).

110
00:06:14,435 --> 00:06:17,106
What is to be done,
is to explicitly call

111
00:06:17,106 --> 00:06:21,758
the superclass copy constructor.

112
00:06:21,758 --> 00:06:23,562
This time, what happens is this:

113
00:06:23,562 --> 00:06:27,807
the copy constructor will
explicitly call

114
00:06:27,807 --> 00:06:30,882
the superclass copy constructor.

115
00:06:30,882 --> 00:06:34,389
Without writing this explicitly

116
00:06:34,389 --> 00:06:36,600
we call the default
copy constructor,

117
00:06:36,600 --> 00:06:40,623
which then copies r1 as a
FigureGeometrique.

118
00:06:40,623 --> 00:06:44,934
I remind you that the copy constructor
of FigureGeometrique

119
00:06:48,914 --> 00:06:50,589
has the following prototype

120
00:06:50,589 --> 00:06:53,963
and therefore passes a FigureGeometrique 
by constant reference.

121
00:06:53,963 --> 00:06:58,449
Here 'autre' (= 'other') which is a Rectangle
is passed as a FigureGeometrique,

122
00:06:58,449 --> 00:07:00,373
which is absolutely okay,

123
00:07:00,373 --> 00:07:03,191
because a Rectangle is a FigureGeometric.

124
00:07:03,191 --> 00:07:07,525
And so this copy constructor
copies the FigureGeometrique part

125
00:07:07,525 --> 00:07:12,906
of the Rectangle r1, that is to say, copies
the data member of type Position

126
00:07:12,906 --> 00:07:15,522
into the postion of r2.

127
00:07:15,522 --> 00:07:19,601
So we will have here a copy of
the FigureGeometrique part of r1,

128
00:07:19,601 --> 00:07:24,099
which is its postion (1, 2)
in the FigueGeometrique part of r2

129
00:07:24,099 --> 00:07:27,759
that is to say, in the inherited
FigureGeometrique part, Position, of r2.

130
00:07:27,759 --> 00:07:30,550
Thanks to this explicit call

131
00:07:30,550 --> 00:07:32,642
to the copy constructor
of the superclass,

132
00:07:32,642 --> 00:07:37,444
we have r2 that has
the same position as r1.

133
00:07:38,104 --> 00:07:40,975
And then the copy constructor
continues executing as before,

134
00:07:40,975 --> 00:07:43,277
by copying the width and height.

135
00:07:43,277 --> 00:07:45,961
So it is essential to write

136
00:07:45,961 --> 00:07:48,330
the explicit call of the
FigureGeometrique copy constructor,

137
00:07:48,330 --> 00:07:52,431
because otherwise,
the default copy constructor will

138
00:07:52,431 --> 00:07:55,355
intervene, which will
cause problems.

139
00:07:55,355 --> 00:07:58,014
To illustrate this error,
I'll tell an anecdote from

140
00:07:58,014 --> 00:08:01,425
the projects that I give to
my students.

141
00:08:01,425 --> 00:08:04,185
They had to write classes
for vectors,

142
00:08:04,185 --> 00:08:06,777
mathematical vectors,
algebraic vectors,

143
00:08:06,777 --> 00:08:10,579
and they made a subclass
for unit vectors.

144
00:08:10,579 --> 00:08:14,874
Some of them thought they were
shrewd to redefine a copy constructor

145
00:08:14,874 --> 00:08:18,058
for the unit vectors that
inherited from the class Vecteur.

146
00:08:18,058 --> 00:08:20,954
The only thing was, they had forgotten
in the copy constructor

147
00:08:20,954 --> 00:08:24,744
to call the superclass
copy constructor.

148
00:08:24,744 --> 00:08:28,781
But, in fact the superclass
Vecteur had a default constructor,

149
00:08:28,781 --> 00:08:30,665
that constructed a
null vector.

150
00:08:30,665 --> 00:08:32,301
And so they found that

151
00:08:32,301 --> 00:08:34,885
each time they made copies
of unit vectors,

152
00:08:34,885 --> 00:08:37,253
these vectors were null,

153
00:08:37,253 --> 00:08:39,782
which is quite a paradox
for a unit vector.

154
00:08:39,782 --> 00:08:43,695
So, avoid making this
error if you redefine

155
00:08:43,695 --> 00:08:45,716
a copy constructor in a subclass,

156
00:08:45,716 --> 00:08:49,658
and don't forget to call the 
superclass copy constructor.

157
00:08:50,558 --> 00:08:54,596
To finish, I would like to
come back to an aspect

158
00:08:54,596 --> 00:08:55,938
that was changed with C++ 2011.

159
00:08:55,938 --> 00:09:00,205
I said that constructors
were not inherited through

160
00:09:00,205 --> 00:09:02,401
an inheritance relationship,
and that a subclass inherited

161
00:09:02,401 --> 00:09:04,315
the set of data members and
methods from its parent class,

162
00:09:04,315 --> 00:09:06,883
but not its constructors
and its destructors.

163
00:09:06,883 --> 00:09:09,654
In C++ 2011, they introduced
what we call

164
00:09:09,654 --> 00:09:11,487
"constructor inheritance".

165
00:09:11,487 --> 00:09:15,233
It is henceforth possible
to ask for constructor inheritance.

166
00:09:15,893 --> 00:09:18,162
By default, we don't have
constructor inheritance,

167
00:09:18,162 --> 00:09:21,971
but if we add a syntax like this,

168
00:09:21,971 --> 00:09:26,273
with the keyword "using", we can add
all the constructors of the superclass.


169
00:09:26,273 --> 00:09:29,836
And then, we can construct
the subclass with all the constructors

170
00:09:29,836 --> 00:09:33,688
and with all the same arguments
as the superclass constructors.

171
00:09:33,688 --> 00:09:35,125
But be very careful,

172
00:09:35,125 --> 00:09:38,357
this is a bit risky.

173
00:09:38,357 --> 00:09:40,886
I therefore advise you
to avoid using

174
00:09:40,886 --> 00:09:43,037
the constructor inheritance,

175
00:09:43,037 --> 00:09:46,708
because the superclass
constructors don't, of course,

176
00:09:46,708 --> 00:09:49,770
initialize the data members
of the subclass,

177
00:09:49,770 --> 00:09:53,479
and so, if we call
a superclass constructor

178
00:09:53,479 --> 00:09:57,926
in the subclass, which is possible
with this new syntax,

179
00:09:57,926 --> 00:10:00,792
then we wouldn't have any
initialization

180
00:10:00,792 --> 00:10:03,249
of the subclass's own data members.

181
00:10:03,249 --> 00:10:05,514
So therefore I advise
you against something like this,

182
00:10:05,514 --> 00:10:07,262
and advise you to do this

183
00:10:07,262 --> 00:10:11,691
only when you don't have
many subclass data members,

184
00:10:11,691 --> 00:10:13,825
and when it's appropriate.

185
00:10:13,825 --> 00:10:17,218
For example, suppose
that we have a super class A,

186
00:10:17,218 --> 00:10:21,044
that has two  constructors,
one that takes a whole number,

187
00:10:21,044 --> 00:10:24,845
and one that takes two doubles.

188
00:10:24,845 --> 00:10:29,124
We also have a subclass B
that inherits from A.

189
00:10:29,124 --> 00:10:35,620
We can therefore, if we want,
inherit the constructors of A in B

190
00:10:35,620 --> 00:10:40,965
by writing this: "using A : : A",
that is to say

191
00:10:40,965 --> 00:10:43,879
by using to the constructors
called A from the class A.

192
00:10:43,879 --> 00:10:47,825
This syntax is a bit redundant,
but that's how it's done:

193
00:10:47,825 --> 00:10:50,206
"using A : : A".

194
00:10:50,206 --> 00:10:53,975
Thus, we have available in B
2 constructors:

195
00:10:53,975 --> 00:10:56,720
one constructor with
an int parameter

196
00:10:56,720 --> 00:11:01,000
and a constructor with 2 parameters
of type double.

197
00:11:01,000 --> 00:11:07,272
But in B, we introduced
supplementary data members,

198
00:11:07,272 --> 00:11:10,788
so be careful, the constructors
in question

199
00:11:10,788 --> 00:11:13,635
will not initialize the other
data members of B

200
00:11:13,635 --> 00:11:17,301
because they are the
constructors of A.

201
00:11:17,301 --> 00:11:18,963
For this reason I recommend

202
00:11:18,963 --> 00:11:23,880
to rarely (or even never) use this function.

203
00:11:23,880 --> 00:11:27,138
But we wanted to mention it
because it was something

204
00:11:27,138 --> 00:11:29,713
that was introduced in C++ 2011,

205
00:11:29,713 --> 00:11:32,590
and which you could encounter.

206
00:11:33,660 --> 00:11:38,372
This concludes this series of videos
on inheritance.
