1
00:00:04,209 --> 00:00:06,679
When we introduced the constructors topic,

2
00:00:06,679 --> 00:00:08,970
we saw that these methods
were so important

3
00:00:08,970 --> 00:00:12,098
that C++ provided
a default version.

4
00:00:12,098 --> 00:00:14,388
This is the case notably
with the copy constructor.

5
00:00:14,388 --> 00:00:18,050
We also saw that the 
default copy constructor

6
00:00:18,050 --> 00:00:20,719
made what is called
a shallow copy,

7
00:00:20,719 --> 00:00:24,160
which is sufficient in
most cases,

8
00:00:24,160 --> 00:00:26,160
but not all.
In other cases

9
00:00:26,160 --> 00:00:29,289
we have to do what
is called a "deep copy".

10
00:00:29,289 --> 00:00:31,560
This is the topic of this video.

11
00:00:31,559 --> 00:00:35,009
Let me remind you that in C++ there
are special methods

12
00:00:35,009 --> 00:00:38,890
that enable an object to be initialized
at the start of its life: "constructors",

13
00:00:38,890 --> 00:00:42,300
that copy an object into another:
"copy constructors",

14
00:00:42,300 --> 00:00:46,000
or that free up resources associated
with an object: "destructors".

15
00:00:46,000 --> 00:00:48,890
We will only look at
the bare-bone default versions

16
00:00:48,890 --> 00:00:53,478
of these methods, in particular
for the copy constructors.

17
00:00:53,478 --> 00:00:57,579
We saw in a previous episode on the
"counting instances example"

18
00:00:57,579 --> 00:01:01,070
that the minimal default versions
of the constructor and destructor methods

19
00:01:01,070 --> 00:01:02,789
were not always adapted to the situation.

20
00:01:02,789 --> 00:01:04,190
We also saw that

21
00:01:04,190 --> 00:01:07,310
when it was necessary to
define one explicitly,

22
00:01:07,310 --> 00:01:10,506
well, we had to consider

23
00:01:10,506 --> 00:01:12,302
the explicit definition of all the others
as well.

24
00:01:12,302 --> 00:01:14,210
We will now study another example

25
00:01:14,210 --> 00:01:18,510
connected to a default copy constructor
that makes a shallow copy

26
00:01:18,510 --> 00:01:20,666
and we will see this
shallow copy

27
00:01:20,666 --> 00:01:22,992
can cause a certain number of problems

28
00:01:22,992 --> 00:01:26,569
in particular when we have
data members that are " pointers".

29
00:01:26,569 --> 00:01:29,758
Let's start by defining
what a shallow copy does:

30
00:01:29,759 --> 00:01:33,280
in essence, it copies member to member
each data member.

31
00:01:33,280 --> 00:01:36,890
Suppose we have our favorite
class: Rectangle,

32
00:01:36,890 --> 00:01:40,649
and that in a code, we declare
2 objects of type Rectangle.

33
00:01:40,649 --> 00:01:45,579
A Rectangle r1 has its width and
height initialized by

34
00:01:45,579 --> 00:01:48,609
constructors in the class Rectangle

35
00:01:48,609 --> 00:01:53,760
and a 2nd object r2,
 of the same type,

36
00:01:53,760 --> 00:01:59,620
which we created and initialized
by copying the Rectangle r1.

37
00:01:59,620 --> 00:02:02,840
Suppose that in the constructor used,

38
00:02:02,840 --> 00:02:08,559
the first argument corresponds
to the height and the second to the width.

39
00:02:10,579 --> 00:02:15,689
Hence r1 is an object
in the memory

40
00:02:15,689 --> 00:02:21,198
that has 2 data members,
width and height, initialized like this.

41
00:02:21,199 --> 00:02:23,229
Suppose that in this class Rectangle,

42
00:02:23,229 --> 00:02:26,899
no copy constructor is
explicitly defined,

43
00:02:26,899 --> 00:02:30,348
which means that the
moment we execute this line,

44
00:02:30,348 --> 00:02:33,968
it's the default copy constructor
that is called.

45
00:02:33,968 --> 00:02:38,529
If we assume that this is the
data member height of r1

46
00:02:38,529 --> 00:02:41,169
and this is its width,

47
00:02:41,169 --> 00:02:44,119
the execution of the
default copy constructor

48
00:02:44,119 --> 00:02:47,549
will result in the creation of
the rectangle r2

49
00:02:47,549 --> 00:02:52,660
whose data members would have been
shallow copied from those of r1.

50
00:02:52,660 --> 00:02:54,578
This means concretely

51
00:02:54,579 --> 00:02:57,718
that the value of the data member
height of r2 will be copied

52
00:02:57,718 --> 00:03:04,378
from the value of the data member
of the same name in r1,

53
00:03:04,378 --> 00:03:07,558
and likewise for the height.

54
00:03:07,558 --> 00:03:11,968
The default copy constructor
therefore copies superficially,

55
00:03:11,968 --> 00:03:18,809
that is to say, makes a
shallow copy of the data members.

56
00:03:18,809 --> 00:03:21,478
When the data members
are "pointers",

57
00:03:21,479 --> 00:03:24,330
contrarily to the example
in front of us,

58
00:03:24,330 --> 00:03:28,558
well, shallow copy,

59
00:03:28,558 --> 00:03:30,288
can then become the root of several problems,

60
00:03:30,288 --> 00:03:32,989
which we will now review.

61
00:03:32,989 --> 00:03:34,372
Let's take another example,

62
00:03:34,372 --> 00:03:37,345
that of a class Rectangle in which
we have chosen to have width and height

63
00:03:37,345 --> 00:03:40,049
implemented with pointers that
point to the values

64
00:03:40,049 --> 00:03:42,239
stored as doubles
instead of just having doubles.

65
00:03:42,239 --> 00:03:45,869
Of course this implementation
is not very smart, does not really make sense,

66
00:03:45,870 --> 00:03:48,829
but let's examine this simple example

67
00:03:48,829 --> 00:03:50,648
for the sake of illustrating our point

68
00:03:50,648 --> 00:03:54,748
The constructor of the class Rectangle
is in charge of dynamically allocating 

69
00:03:54,748 --> 00:03:57,549
memory in order to store

70
00:03:57,549 --> 00:04:00,799
the width and height of
an instance of Rectangle.

71
00:04:00,799 --> 00:04:04,260
To recall, this expression allows
memory to be allocated dynamically

72
00:04:04,259 --> 00:04:07,309
for a double, while the code
is being executed,

73
00:04:07,309 --> 00:04:09,809
and to store the value "l".

74
00:04:09,809 --> 00:04:14,089
What is returned by this instruction
is the address of the allocateddouble,

75
00:04:14,089 --> 00:04:16,529
which is stored in
the "largeur" data member,

76
00:04:16,529 --> 00:04:19,738
which is effectively a pointer,
an address.

77
00:04:19,738 --> 00:04:24,060
So by using this definition of
the class Rectangle, it is possible

78
00:04:24,060 --> 00:04:29,360
in another part of the code to
declare an initialization of a rectangle

79
00:04:29,360 --> 00:04:35,269
by using the provided constructor
like here,

80
00:04:35,269 --> 00:04:40,580
the result of which

81
00:04:40,580 --> 00:04:44,378
corresponds to the construction
of an object in the memory

82
00:04:44,378 --> 00:04:49,680
whose 2 data-members "largeur" and "hauteur"
are addresses of doubles

83
00:04:49,680 --> 00:04:53,150
that point to the actuall width
and height of the rectangle.

84
00:04:53,149 --> 00:04:57,929
In C++, he who allocates
is responsible for deallocating.

85
00:04:57,930 --> 00:04:59,698
Here, the class Rectangle

86
00:04:59,698 --> 00:05:03,808
is in charge of allocating
memory space

87
00:05:03,809 --> 00:05:05,580
when a rectangle is created.

88
00:05:05,580 --> 00:05:08,449
This class therefore,
when an object ceases to exist,

89
00:05:08,449 --> 00:05:11,989
deallocate this space,
and this is done of course

90
00:05:11,989 --> 00:05:15,409
by the destructors
of Rectangle.

91
00:05:15,408 --> 00:05:19,649
You will also note that in this
definition of the class Rectangle,

92
00:05:19,649 --> 00:05:22,728
the constructor is explicitly
defined

93
00:05:22,728 --> 00:05:25,838
and the destructor is also
explicitly defined

94
00:05:25,838 --> 00:05:29,119
but the copy constructor
is not explicitly defined,

95
00:05:29,119 --> 00:05:33,838
which means that the default
version would be used implicitly.

96
00:05:33,838 --> 00:05:37,709
Suppose now that a programmer
wants to use the class Rectangle

97
00:05:37,709 --> 00:05:41,719
and so he defines a member function
"afficher_largeur" (TN: means "print_width")

98
00:05:41,719 --> 00:05:46,049
that takes as parameter a rectangle
and the goal of which it is to print the width.

99
00:05:46,050 --> 00:05:50,480
So the programmer could decide
in one section of the program

100
00:05:50,480 --> 00:05:56,119
to declare an object of type
Rectangle

101
00:05:56,119 --> 00:05:59,930
that would be created with
a constructor

102
00:05:59,930 --> 00:06:02,209
that we presented
in the last slide

103
00:06:02,209 --> 00:06:09,239
and then invoke the function
"afficher_largeur" on this Rectangle

104
00:06:09,239 --> 00:06:10,748
to print its width.

105
00:06:10,749 --> 00:06:14,740
To recall, as we have seen, the
object "r" appears like this.

106
00:06:14,740 --> 00:06:19,889
Its members "largeur" and "hauteur" are
addresses that point to

107
00:06:19,889 --> 00:06:22,258
2 memory locations

108
00:06:22,258 --> 00:06:26,988
that contain the values
for the width and the height.

109
00:06:26,990 --> 00:06:29,699
This is what is constructed
when this line is executed.

110
00:06:29,699 --> 00:06:34,098
We would then also like to display
the width of the new rectangle

111
00:06:34,098 --> 00:06:37,399
and to take this risk of
getting a bad surprise.

112
00:06:37,399 --> 00:06:41,208
We might risk making the discovery
 that the object "r"

113
00:06:42,278 --> 00:06:43,777
was manipulated
in this display.

114
00:06:44,327 --> 00:06:45,974
But what happened here,

115
00:06:45,974 --> 00:06:48,671
when this function "afficher_largeur",

116
00:06:48,671 --> 00:06:52,688
which is supposed to simply display
the width of our rectangle, was run?

117
00:06:52,689 --> 00:06:56,050
If we scrutinize the header
of this function,

118
00:06:56,050 --> 00:06:59,550
we see that the parameter, the
rectangle whose value we want to display,

119
00:06:59,550 --> 00:07:02,629
is in fact passed "by value".

120
00:07:02,629 --> 00:07:07,089
This means concretely that
when this line of code is run,

121
00:07:07,089 --> 00:07:14,449
the value of "r" will be copied into "tmp"
because we are passing by value,

122
00:07:14,449 --> 00:07:19,199
and the code of this function is
run on this copy "tmp".

123
00:07:19,199 --> 00:07:26,868
Who is in charge of carrying out the
copy of Rectangle "r" into Rectangle "tmp"?

124
00:07:27,418 --> 00:07:30,969
Well, its indeed the copy constructor
of the Rectangle class

125
00:07:30,969 --> 00:07:33,529
which is responsible for the copy.

126
00:07:33,528 --> 00:07:35,569
This constructor however
is not defined explicitly,

127
00:07:35,569 --> 00:07:37,249
which means the default
copy constructor is called.

128
00:07:37,249 --> 00:07:39,649
And it's this default constructor

129
00:07:39,649 --> 00:07:42,269
that makes a shallow copy.

130
00:07:42,269 --> 00:07:44,919
So, at the execution of this line
of code,

131
00:07:44,919 --> 00:07:49,839
an object "tmp" will be
created from the object "r"

132
00:07:49,839 --> 00:07:52,368
by copying it with
the default copy constructor.

133
00:07:52,369 --> 00:07:58,180
This means that "tmp"
will appear like this.

134
00:07:58,180 --> 00:08:01,528
The default constructor
copies member to member

135
00:08:03,559 --> 00:08:04,939
the values of the
different data members.

136
00:08:04,939 --> 00:08:09,159
Suppose that the 1st attribute
contains the value "addresse1",

137
00:08:09,158 --> 00:08:13,018
and the 2nd "addresse2".
If they are copied shallow,

138
00:08:15,088 --> 00:08:17,968
which means concretely that


139
00:08:17,968 --> 00:08:23,258
the 2 fields of the object "tmp"
point to the same memory location

140
00:08:23,258 --> 00:08:25,158
as those of the object "r".

141
00:08:25,158 --> 00:08:28,819
The body of the function "afficher_largeur"
can be executed of course,

142
00:08:28,819 --> 00:08:32,759
because in the object "tmp"
we can access through the

143
00:08:32,759 --> 00:08:35,639
pointer to the width field "largeur"
which is the same as that of "r"

144
00:08:35,639 --> 00:08:38,479
and in this case it displays
the desired values.

145
00:08:38,480 --> 00:08:41,789
However, farther along,
things don't go as well.

146
00:08:41,789 --> 00:08:42,660
Indeed, the parameter "tmp"

147
00:08:43,360 --> 00:08:47,539
in the function "afficher_largeur"

148
00:08:47,539 --> 00:08:50,099
is a local object in the function

149
00:08:50,100 --> 00:08:52,640
and which cannot be used
outside of the function.

150
00:08:52,640 --> 00:08:57,800
This means that when we finish executing
the function "afficher_largeur",

151
00:08:57,800 --> 00:09:00,629
this object "tmp" is not
needed anymore,

152
00:09:00,629 --> 00:09:07,019
and so the destructor will
automatically be invoked on "tmp".

153
00:09:07,019 --> 00:09:10,790
To recall, the destructor of the class
Rectangle was responsible for

154
00:09:10,790 --> 00:09:15,969
deallocating the memory space
associated with the object's data members.

155
00:09:15,969 --> 00:09:18,469
So in our example,
this means that

156
00:09:18,469 --> 00:09:22,599
the moment the function "afficher_largeur"
has finished executing,

157
00:09:22,600 --> 00:09:25,470
the destructor is invoked
on the object "tmp"

158
00:09:25,470 --> 00:09:31,619
which will deallocate memory
associated with its data members.

159
00:09:32,329 --> 00:09:36,339
Unfortunately however, the
memory deallocated

160
00:09:36,339 --> 00:09:38,959
in the destruction of "tmp"
is the same as

161
00:09:38,959 --> 00:09:42,429
that pointed to by
the object "r", which

162
00:09:42,429 --> 00:09:44,920
still exists even after

163
00:09:44,920 --> 00:09:48,750
"afficher_largeur" has finished running!

164
00:09:48,750 --> 00:09:49,769
In reality,

165
00:09:49,769 --> 00:09:53,159
there is no reason why
printing the width of a rectangle

166
00:09:53,159 --> 00:09:57,179
should cause the destruction of the memory
associated with that rectangle!

167
00:09:57,179 --> 00:10:00,488
However, this is nevertheless
what happens here,

168
00:10:00,488 --> 00:10:04,240
and this means very concretely,
that we we are using the rectangle here

169
00:10:04,240 --> 00:10:07,519
to carry out its manipulation,
which in principle,

170
00:10:07,519 --> 00:10:11,159
should not have been obstructed by the
getting its width before.

171
00:10:11,159 --> 00:10:15,580
Well, we are actually working with
a corrupted object

172
00:10:15,580 --> 00:10:19,380
because the memory associated
with it was deallocated.

173
00:10:19,380 --> 00:10:20,779
To summarize our example,

174
00:10:20,779 --> 00:10:25,318
calling the function "afficher_largeur"
by passing as parameter a rectangle "r"

175
00:10:25,318 --> 00:10:31,149
results in "r" being copied "tmp"
with passing by value.

176
00:10:31,149 --> 00:10:34,678
When the function "afficher_largeur"
finishes executing,

177
00:10:34,678 --> 00:10:38,209
"tmp", being used locally,
is destroyed automatically

178
00:10:38,210 --> 00:10:42,130
by a destructor of the class Rectangle.

179
00:10:42,130 --> 00:10:44,666
This destructor will free
the memory pointed to

180
00:10:44,666 --> 00:10:47,202
by the fields width and height of "tmp"

181
00:10:47,202 --> 00:10:49,740
which is the same memory,

182
00:10:49,740 --> 00:10:52,619
as that pointed to
by the width and height of "r".

183
00:10:52,619 --> 00:10:57,379
In this way, using "r" after having invoked
the function "afficher_largeur"

184
00:10:57,379 --> 00:11:00,460
exposes us to several
dangers.

185
00:11:00,460 --> 00:11:03,679
We can see the contents
of "r" eradically change,

186
00:11:03,678 --> 00:11:06,909
we can risk exposing ourselves
to a "segmentation fault",

187
00:11:06,909 --> 00:11:09,969
for instance if the object "r" is destructed afterwards.

188
00:11:09,969 --> 00:11:14,479
The corruption of "r"

189
00:11:14,479 --> 00:11:19,119
following the destruction of the
object "tmp" is closely related to the fact

190
00:11:19,119 --> 00:11:22,136
that these 2 objects refer
to the same memory location,

191
00:11:22,136 --> 00:11:24,293
though this shouldn't be the case.

192
00:11:25,153 --> 00:11:28,170
"r" and "tmp" point to the same
memory because

193
00:11:28,170 --> 00:11:30,226
as we have seen before,

194
00:11:30,226 --> 00:11:33,412
"tmp" was the result of a "shallow copy".

195
00:11:34,422 --> 00:11:37,550
To avoid this problem, the copy
should do what we call

196
00:11:37,550 --> 00:11:41,860
a "deep copy", which doesn't
simply copy the addresses,

197
00:11:41,860 --> 00:11:44,620
but rather copies what
the addresses point to.

198
00:11:44,620 --> 00:11:49,169
This means that we don't want
there to be a link

199
00:11:50,659 --> 00:11:53,909
between "tmp" and the memory
pointed to by "r".

200
00:11:53,909 --> 00:11:58,750
We want to instead create from "r"
an object "tmp" that points

201
00:11:58,750 --> 00:12:01,899
to a separate memory location,

202
00:12:01,899 --> 00:12:07,009
and that would have the same
values as the original object, "r".

203
00:12:07,740 --> 00:12:09,459
In this way,

204
00:12:10,639 --> 00:12:12,919
the destruction off "tmp",

205
00:12:12,919 --> 00:12:16,309
at the end of the execution
of the function "afficher_largeur",

206
00:12:16,309 --> 00:12:20,220
would only affect the
fields pointed to by "tmp"

207
00:12:20,740 --> 00:12:24,890
and therefore would not
modify those pointed to by "r",

208
00:12:24,890 --> 00:12:29,020
which could safely continue to be
used .

209
00:12:29,019 --> 00:12:30,949
The default copy constructor,

210
00:12:30,949 --> 00:12:33,702
that only makes a memberwise
copy, is not adapted.

211
00:12:33,702 --> 00:12:37,155
We therefore need to redefine
the copy constructor by ourselves

212
00:12:37,155 --> 00:12:42,199
so that it makes a deep copy
that copies the memory pointed to.

213
00:12:42,200 --> 00:12:46,240
So we want the constructor to duplicate
the memory pointed to

214
00:12:46,240 --> 00:12:53,029
by a rectangle "r" whose

215
00:12:54,620 --> 00:12:57,446
data members point to doubles.

216
00:13:00,272 --> 00:13:03,100
We want the copied object "tmp"

217
00:13:03,100 --> 00:13:06,310
to be completely independent

218
00:13:06,309 --> 00:13:11,519
whose data member values
are new addresses pointing to doubles

219
00:13:11,519 --> 00:13:17,009
of the same value as those

220
00:13:17,009 --> 00:13:19,559
of the original object "r".

221
00:13:19,559 --> 00:13:23,029
Thus the copy being completely
independent of the original object,

222
00:13:23,029 --> 00:13:27,599
its destruction would have no incidence
on the original object.

223
00:13:28,440 --> 00:13:30,879
The copy constructor
should therefore be written

224
00:13:30,879 --> 00:13:33,318
as to duplicate the locations
pointed to.

225
00:13:34,658 --> 00:13:39,419
Creating a copy "tmp" of the object "r"
by using this copy constructor

226
00:13:39,419 --> 00:13:43,119
is equivalent to the following
situation the memory:

227
00:13:43,120 --> 00:13:48,730
the object "tmp" would have a field width,
"largeur",

228
00:13:48,730 --> 00:13:54,196
whose value would be a new
address,

229
00:13:54,196 --> 00:13:56,742
the address of
a newly allocated object.

230
00:13:58,122 --> 00:13:59,840
Thus the contents referenced to

231
00:14:00,929 --> 00:14:05,869
would be obtained by copying
what the original object pointed to

232
00:14:07,889 --> 00:14:12,880
and likewise for the height
"hauteur".

233
00:14:13,340 --> 00:14:15,539
So if we want
to analyse this more closely,

234
00:14:15,539 --> 00:14:19,950
"obj" is the object we wish to
make a copy of,

235
00:14:19,950 --> 00:14:25,370
this expression "obj.largeur" will give
us the value of the address,

236
00:14:25,370 --> 00:14:29,859
the value pointed to by the address,

237
00:14:29,859 --> 00:14:35,300
which corresponds to the value pointed
to by the original object.

238
00:14:35,300 --> 00:14:39,379
The instruction "new double"

239
00:14:39,379 --> 00:14:45,959
allocates a new memory location
for the field "largeur"

240
00:14:47,879 --> 00:14:51,789
whose value is that of the
original object.

241
00:14:51,789 --> 00:14:54,960
So here is how we
should rewrite this class Rectangle

242
00:14:54,960 --> 00:14:57,870
so as to avoid problems associated
with shallow copying

243
00:14:57,870 --> 00:15:00,210
when data-members are pointers.

244
00:15:00,210 --> 00:15:01,193
We have seen

245
00:15:01,193 --> 00:15:04,076
that a constructor that takes care
of allocating memory

246
00:15:04,076 --> 00:15:07,429
and a destructor that deallocates
are not enough,

247
00:15:07,429 --> 00:15:11,659
but but that we have to also define a
copy constructor that makes a deep copy,

248
00:15:11,659 --> 00:15:16,990
one that doesn't simply copy addresses,
but duplicates the memory pointed to.

249
00:15:17,000 --> 00:15:20,570
Strictly speaking, we
should also redefine

250
00:15:20,570 --> 00:15:22,789
the assignment operator, "operator=",
which, as we have seen in previous episodes,

251
00:15:22,789 --> 00:15:24,828
is closely related to the copy constructor.

252
00:15:24,828 --> 00:15:28,908
The default version of the "operator="
in effect also

253
00:15:28,908 --> 00:15:32,078
makes a shallow copy.
Thus, if we do not define it correctly,

254
00:15:32,078 --> 00:15:35,800
we expose ourselves to the same
problems as forgetting

255
00:15:35,799 --> 00:15:39,079
to correctly redefine the copy constructor.

256
00:15:39,080 --> 00:15:40,909
So, here is the approach

257
00:15:40,909 --> 00:15:43,970
to a class that has data members
that are pointers.

258
00:15:43,970 --> 00:15:47,120
Remember the deep copy
and at least ask yourself:

259
00:15:47,120 --> 00:15:49,569
"Do I have to redefine
the copy constructor

260
00:15:49,569 --> 00:15:53,679
in order that it makes a copy
of the memory space pointed to, or not?"

261
00:15:53,679 --> 00:15:56,032
If we redefine the copy constructor,

262
00:15:56,032 --> 00:15:59,365
also think about the overload
of the assignement operator, "operator=",

263
00:15:59,365 --> 00:16:01,900
that also has to be defined appropriately.

264
00:16:01,900 --> 00:16:03,736
And when we make a deep copy,

265
00:16:03,736 --> 00:16:07,032
we frequently have to use
new memory space

266
00:16:07,032 --> 00:16:10,950
and in this case, also think about modifiying
the destructor.

267
00:16:10,950 --> 00:16:14,660
Finally, a small reminder when we redefine
the copy constructor

268
00:16:14,660 --> 00:16:17,819
in the context of a inheritance relationship,
that is, in a subclass.

269
00:16:17,818 --> 00:16:19,839
Make sure that

270
00:16:19,839 --> 00:16:22,475
the subclass copy constructor
invokes

271
00:16:22,475 --> 00:16:24,911
the superclass copy constructor,

272
00:16:24,911 --> 00:16:27,590
otherwise it's the default constructor
of the superclass that is called,

273
00:16:27,590 --> 00:16:31,269
which can cause the program

274
00:16:31,269 --> 00:16:32,949
to act strangely.
