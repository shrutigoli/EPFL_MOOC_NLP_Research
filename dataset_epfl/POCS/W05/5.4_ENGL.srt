1
00:00:04,481 --> 00:00:06,851
In this video, we discuss 
timestamp concurrency control,

2
00:00:06,851 --> 00:00:09,391
which is yet another technique
for achieving serializability

3
00:00:09,391 --> 00:00:10,511
in transactions.

4
00:00:11,702 --> 00:00:16,962
The basic idea is that we assign each 
object in the database, conceptually,

5
00:00:17,472 --> 00:00:20,712
a read timestamp which indicates 
when it was last read,

6
00:00:21,002 --> 00:00:23,732
and a write timestamp which 
indicates when it was last written.

7
00:00:23,732 --> 00:00:25,882
Furthermore, each 
transaction has a timestamp

8
00:00:25,882 --> 00:00:27,982
which indicates when it was started.

9
00:00:27,982 --> 00:00:31,982
We can then use these 
transaction and object timestamps,

10
00:00:31,982 --> 00:00:35,982
compare those, to detect 
any problem that has been arising.

11
00:00:36,441 --> 00:00:38,001
So in particular,

12
00:00:38,001 --> 00:00:41,601
if two actions of two 
transactions are conflicts,

13
00:00:42,380 --> 00:00:45,570
and one transaction--

14
00:00:45,570 --> 00:00:48,110
the first transaction has 
a smaller timestamp the second,

15
00:00:48,110 --> 00:00:50,600
then we could say that we 
restart the second transaction

16
00:00:50,600 --> 00:00:51,980
to avoid the conflict.

17
00:00:52,352 --> 00:00:54,452
And we can use the read 
and write timestamps

18
00:00:54,452 --> 00:00:56,342
to detect these conflicts sufficiently.

19
00:00:56,342 --> 00:00:59,102
That means, for the purpose 
of detecting conflicts,

20
00:00:59,102 --> 00:01:00,722
we can do this in constant time

21
00:01:00,722 --> 00:01:03,192
by just comparing read 
and write timestamps,

22
00:01:03,582 --> 00:01:07,792
and we don't have to look at 
the history of the transactions so far,

23
00:01:07,792 --> 00:01:09,682
to detect that a conflict arose.

24
00:01:11,554 --> 00:01:15,144
The protocol, or the algorithm, 
is actually somewhat complicated.

25
00:01:15,754 --> 00:01:20,434
So we will go with this first, 
basically just saying what happens,

26
00:01:20,434 --> 00:01:22,974
and later we will execute an example,

27
00:01:22,974 --> 00:01:26,454
seeing and understanding better 
why everything is the way it is.

28
00:01:26,725 --> 00:01:28,225
So let's first look at the case

29
00:01:28,735 --> 00:01:31,045
that a transaction wants 
to read an object O.

30
00:01:31,948 --> 00:01:33,438
The case is as follows.

31
00:01:33,438 --> 00:01:36,838
If timestamp of the transaction

32
00:01:36,838 --> 00:01:40,328
is less than the write 
timestamp of that object,

33
00:01:40,328 --> 00:01:42,308
that means conceptually,

34
00:01:42,708 --> 00:01:45,348
the object has been 
written by a transaction

35
00:01:45,660 --> 00:01:47,780
that is coming later--

36
00:01:47,780 --> 00:01:51,600
is to be serialized later 
than our transaction T,

37
00:01:51,600 --> 00:01:55,780
then we cannot read 
the appropriate value.

38
00:01:55,780 --> 00:01:59,780
We can only read a new value 
that is too new, so to say.

39
00:01:59,780 --> 00:02:02,380
So this violates the timestamp order of T,

40
00:02:02,630 --> 00:02:08,180
and we have to basically 
restart this transaction anew.

41
00:02:09,662 --> 00:02:12,282
That means we are always 
going to try to basically,

42
00:02:12,282 --> 00:02:14,902
serialize the transactions

43
00:02:14,902 --> 00:02:17,152
in the order of the timestamp order--

44
00:02:17,152 --> 00:02:18,692
in the order in which they began.

45
00:02:19,242 --> 00:02:22,552
And when we have only
an object at our disposal

46
00:02:22,552 --> 00:02:24,642
that has been written 
by a new transaction,

47
00:02:24,642 --> 00:02:26,372
and want to read it, we can't.

48
00:02:27,018 --> 00:02:30,318
However, if the timestamp 
of our transaction

49
00:02:30,318 --> 00:02:32,908
is greater or equal to the write 
timestamp of that object,

50
00:02:32,908 --> 00:02:34,158
we can read it.

51
00:02:34,158 --> 00:02:37,888
In that case, we update the read 
timestamp of that object

52
00:02:38,421 --> 00:02:40,791
to the maximum, so to say,

53
00:02:40,791 --> 00:02:44,361
of the timestamp of this transaction, 
and the old read timestamp.

54
00:02:44,361 --> 00:02:48,231
These timestamps have to also 
be recorded on disks appropriately,

55
00:02:48,231 --> 00:02:50,361
to deal with crashes 
and be able to recover.

56
00:02:50,369 --> 00:02:51,539
Of course this,

57
00:02:51,539 --> 00:02:54,559
and the fact that we have to 
restart transactions from time to time,

58
00:02:54,559 --> 00:02:57,669
kind of puts the cost of transaction 
management in this protocol.

59
00:02:59,164 --> 00:03:01,624
Now when transaction T 
wants to write an object O,

60
00:03:01,624 --> 00:03:03,364
then we do the following comparison.

61
00:03:03,364 --> 00:03:05,124
If the timestamp of that transaction

62
00:03:05,124 --> 00:03:07,434
is less than the read 
timestamp of the object,

63
00:03:07,434 --> 00:03:09,364
that means that 
the transaction is older

64
00:03:09,364 --> 00:03:12,234
than the transaction that has 
read this object already.

65
00:03:12,757 --> 00:03:14,547
Then this violates timestamp order.

66
00:03:14,547 --> 00:03:17,647
So to say, we cannot write 
this object in this older transaction,

67
00:03:17,647 --> 00:03:20,367
because a newer transaction 
has already read that value.

68
00:03:20,809 --> 00:03:22,079
So if you changed it,

69
00:03:22,349 --> 00:03:25,109
this new transaction should have 
read another value, and it didn't.

70
00:03:25,109 --> 00:03:26,849
So we are not allowed to do this.

71
00:03:27,199 --> 00:03:29,179
So in this case, we have to abort T.

72
00:03:29,846 --> 00:03:34,696
Otherwise, if the transaction timestamp 
is less than the write timestamp of O,

73
00:03:34,896 --> 00:03:36,216
that means we have--

74
00:03:36,563 --> 00:03:41,023
we are trying to write now, 
before another transaction--

75
00:03:41,023 --> 00:03:42,743
a later transaction overwrites it.

76
00:03:42,743 --> 00:03:45,623
But we have already decided 
what to do in this later transaction.

77
00:03:45,623 --> 00:03:47,493
We have already written this new value.

78
00:03:47,493 --> 00:03:50,013
Then this conceptually, 
violates the timestamp order,

79
00:03:50,013 --> 00:03:53,053
but it doesn't matter, because 
the value of T1 to insert now,

80
00:03:53,053 --> 00:03:54,853
is going to be overwritten later anyway.

81
00:03:54,853 --> 00:03:57,303
It has been overwritten already,
so what we can just do is,

82
00:03:57,303 --> 00:03:58,403
ignore this write.

83
00:03:58,403 --> 00:03:59,593
We just drop the write,

84
00:03:59,593 --> 00:04:01,423
and everything is going to be correct,

85
00:04:01,423 --> 00:04:03,793
because that later transaction
has written a value

86
00:04:03,793 --> 00:04:06,583
that would overwrite our value 
if we have done it in proper order.

87
00:04:06,583 --> 00:04:09,173
So if you don't write it now, 
we are doing the right thing.

88
00:04:09,443 --> 00:04:11,213
That's actually called 
a Thomas Write Rule.

89
00:04:11,903 --> 00:04:14,413
When otherwise, we are allowed 
to write this object and of course,

90
00:04:14,413 --> 00:04:16,213
have to update the write 
timestamp properly,

91
00:04:16,213 --> 00:04:17,633
to this new transaction.

92
00:04:19,420 --> 00:04:20,990
Now let's look at an example.

93
00:04:21,269 --> 00:04:23,369
In this example, 
we've got two transactions,

94
00:04:23,369 --> 00:04:24,339
T1 and T2.

95
00:04:24,339 --> 00:04:25,959
And T1 consists of the operations:

96
00:04:25,959 --> 00:04:26,889
read A, write A.

97
00:04:26,889 --> 00:04:32,069
Read A in transaction T2, 
writes A after the first operation of T1.

98
00:04:33,264 --> 00:04:35,814
We think of the database 
to be in intial state,

99
00:04:35,814 --> 00:04:37,004
timestamp zero,

100
00:04:37,264 --> 00:04:39,704
and the read and write 
timestamps of object A

101
00:04:39,704 --> 00:04:41,494
have been set up accordingly.

102
00:04:41,494 --> 00:04:43,054
They have initially, state zero.

103
00:04:43,713 --> 00:04:45,423
Now let's execute this protocol.

104
00:04:45,423 --> 00:04:48,243
The first operation is R(A) 
in transaction T1.

105
00:04:48,809 --> 00:04:51,659
The read timestamp of A is zero.

106
00:04:52,213 --> 00:04:56,643
Since one is greater than zero,
we are in the second case of read.

107
00:04:57,258 --> 00:04:59,058
The read protocol is here.

108
00:04:59,540 --> 00:05:02,150
And that means we are allowed to read O,

109
00:05:02,150 --> 00:05:05,730
and we have to set the 
read timestamp to one.

110
00:05:07,628 --> 00:05:11,048
Now we get to the second operation.

111
00:05:11,048 --> 00:05:13,418
The write of A in transaction T2.

112
00:05:13,418 --> 00:05:15,988
So TS(T) is 2.

113
00:05:15,988 --> 00:05:18,068
The read timestamp is one.

114
00:05:18,068 --> 00:05:20,398
We are not having to abort.

115
00:05:20,937 --> 00:05:24,937
And the write timestamp is still zero, 
so with this case, we also go over.

116
00:05:24,937 --> 00:05:27,937
So we're allowed 
to write O in transaction T,

117
00:05:27,937 --> 00:05:30,257
and we also have to write 
the write timestamp

118
00:05:30,257 --> 00:05:31,497
so it becomes two.

119
00:05:31,497 --> 00:05:33,597
That means the read 
timestamp is still one.

120
00:05:34,276 --> 00:05:37,876
Next, we are going to try 
to write A in transaction T1.

121
00:05:38,285 --> 00:05:40,996
In this case, the read 
timestamp will still be one,

122
00:05:40,996 --> 00:05:43,286
so we are not going to the first case.

123
00:05:43,286 --> 00:05:45,416
However, we have to go 
into the second case.

124
00:05:45,416 --> 00:05:49,416
The transaction's timestamp is one,
and the write timestamp is two.

125
00:05:49,686 --> 00:05:51,536
So this violates the timestamp order,

126
00:05:51,536 --> 00:05:55,206
but we can apply the Thomas Write Rule
and just basically drop this operation.

127
00:05:55,206 --> 00:05:56,336
We don't execute it,

128
00:05:56,336 --> 00:05:58,466
because there is a newer transaction T2,

129
00:05:58,466 --> 00:06:00,926
that written the value that 
conceptually, will be written later.

130
00:06:00,926 --> 00:06:02,436
It would overwrite this value.

131
00:06:02,436 --> 00:06:05,026
So we don't write this value 
in T1 in the first case.

132
00:06:06,186 --> 00:06:09,806
So in this case we don't do anything, 
we also don't update the timestamps.

133
00:06:10,152 --> 00:06:12,532
Finally, we read A in transaction T1--

134
00:06:12,532 --> 00:06:13,742
or try to do this.

135
00:06:13,742 --> 00:06:17,572
So the timestamp 
of this transaction is one,

136
00:06:17,572 --> 00:06:21,182
and the write timestamp 
of the object is two.

137
00:06:21,182 --> 00:06:22,692
So we are in the first case,

138
00:06:23,039 --> 00:06:25,649
and this violates 
the timestamp order of T.

139
00:06:25,917 --> 00:06:27,797
So we have to abort the transaction

140
00:06:27,797 --> 00:06:29,947
and restart it anew, 
with a larger timestamp.

141
00:06:29,947 --> 00:06:33,947
That means we abort transaction T1, 
and we restart is as transaction T3.

142
00:06:34,177 --> 00:06:36,667
That means we are going 
to basically start T3 as

143
00:06:36,667 --> 00:06:42,677
R(A), W(A), and R(B).

144
00:06:44,445 --> 00:06:46,965
Let's assume that the 
transaction variable of T2

145
00:06:46,965 --> 00:06:48,225
was really just his write.

146
00:06:48,225 --> 00:06:49,985
So we could for example, now commit.

147
00:06:49,985 --> 00:06:54,085
And conceptually, everything 
that happens in transaction T3,

148
00:06:54,085 --> 00:06:56,465
is serially after everything 
that happened before,

149
00:06:56,465 --> 00:06:58,725
and ultimately T3 will also succeed,

150
00:06:58,725 --> 00:07:01,345
unless something happened
with later coming transactions

151
00:07:01,345 --> 00:07:02,975
that for example, transaction T4.

152
00:07:03,727 --> 00:07:06,307
So that's the basic idea of this protocol.

153
00:07:07,851 --> 00:07:10,561
So that's it for timestamp 
concurrency control.

154
00:07:10,561 --> 00:07:12,331
It's a clever protocol.

155
00:07:12,839 --> 00:07:16,839
It uses various kinds 
of timestamps to do its job,

156
00:07:16,839 --> 00:07:19,789
compared to lock-based 
concurrency control.

157
00:07:20,185 --> 00:07:22,165
We have no deadlocks.

158
00:07:22,891 --> 00:07:24,881
On the other hand, there's a drawback.

159
00:07:24,881 --> 00:07:26,821
We might sometimes abort transactions,

160
00:07:26,821 --> 00:07:29,481
which doesn't happen 
in lock-based protocols,

161
00:07:30,392 --> 00:07:31,762
unless there is deadlocks.

162
00:07:32,290 --> 00:07:34,370
Compared to optimistic 
concurrency control,

163
00:07:34,370 --> 00:07:37,010
we have a clever way 
of making, so to say,

164
00:07:37,010 --> 00:07:38,990
dealing with versions more cheaply,

165
00:07:38,990 --> 00:07:42,430
rather than having to deal 
with copies of the data,

166
00:07:42,430 --> 00:07:45,240
that we try our protocol 
optimistically on,

167
00:07:45,240 --> 00:07:47,600
we can work with a single 
version of that data,

168
00:07:47,600 --> 00:07:53,110
and just mantain consistency, 
so to say, via these timestamps.
