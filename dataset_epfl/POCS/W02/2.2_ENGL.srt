1
00:00:04,210 --> 00:00:07,461
Welcome again, we're still talking about
layering, but this time going in depth

2
00:00:07,461 --> 00:00:10,785
on two important stacks,
the compute stack

3
00:00:10,785 --> 00:00:12,608
and the information stack.

4
00:00:12,750 --> 00:00:15,080
Now since these lectures
are about layering,

5
00:00:15,080 --> 00:00:19,039
it's not how the layers themselves
are implemented but rather how the stacks

6
00:00:19,039 --> 00:00:22,230
are organized and composed
and the relationship between

7
00:00:22,230 --> 00:00:23,672
these varying stacks.

8
00:00:24,462 --> 00:00:26,173
But first a word of caution.

9
00:00:26,173 --> 00:00:28,802
Compute and information tend 
to be overloaded terms.

10
00:00:29,156 --> 00:00:32,068
Depending on your community, 
you may associate compute

11
00:00:32,068 --> 00:00:35,807
with a processor or CPU
and information with memory

12
00:00:35,807 --> 00:00:37,464
or the memory hierarchy.

13
00:00:37,464 --> 00:00:39,869
And if you were to look at it
from this perspective you may be

14
00:00:39,869 --> 00:00:42,767
tempted to actually create an association
between the compute

15
00:00:42,767 --> 00:00:45,713
and the information stack 
and actually specifically

16
00:00:45,713 --> 00:00:47,619
an association that would look like this

17
00:00:47,619 --> 00:00:50,816
which is a diagram 
of the Finaman Architecture.

18
00:00:51,716 --> 00:00:55,310
And I'm not sure if I need to explain this
in detail but the fundamentals

19
00:00:55,310 --> 00:00:58,790
of the Finaman Architecture
could be summarized very simply,

20
00:00:59,149 --> 00:01:03,071
as saying that the program itself
is stored in memory and the processor

21
00:01:03,071 --> 00:01:06,378
has a program counter 
to fetch connect instructions

22
00:01:06,378 --> 00:01:07,258
from memory.

23
00:01:07,258 --> 00:01:11,949
So compute and information
in the context of the Finaman model

24
00:01:11,949 --> 00:01:14,342
are closely related concepts.

25
00:01:16,208 --> 00:01:20,329
If you were actually to expand
on this, you may actually assume

26
00:01:20,329 --> 00:01:24,441
that by the compute stack we may talk
about the internals that constitute

27
00:01:24,441 --> 00:01:28,660
a processor in by the information
stack, we may talk about the internals

28
00:01:28,660 --> 00:01:31,249
that form the memory hierarchy
and provide good performance.

29
00:01:31,929 --> 00:01:34,061
If you were to do so,
you would actually be spot on

30
00:01:34,061 --> 00:01:38,065
in thinking about locality,
which is going to be a topic

31
00:01:38,065 --> 00:01:40,109
of a lecture in a couple of weeks.

32
00:01:40,214 --> 00:01:42,784
But you would be actually missing
the point when we are talking about

33
00:01:42,784 --> 00:01:45,573
layering which is the focus
of this lecture today.

34
00:01:46,006 --> 00:01:48,936
So with that being said,
let's talk about the compute stack.

35
00:01:50,365 --> 00:01:54,625
So to represent the computing stack
I'm using a figure taken directly from

36
00:01:54,625 --> 00:01:56,161
the Saltzer and Kaashoek textbook.

37
00:01:56,481 --> 00:01:59,325
And it shows that there
are three layers and two interfaces.

38
00:02:00,049 --> 00:02:03,681
The hardware layer below exposes
an Instruction Set Architecture

39
00:02:03,681 --> 00:02:07,871
to software, and the software itself
is organized as two distinct layers.

40
00:02:08,087 --> 00:02:12,147
There's the operating system layer
and the application layer.

41
00:02:13,029 --> 00:02:18,091
Now the computing stack is unique
in that it is customary for one layer

42
00:02:18,091 --> 00:02:21,597
to bypass a lower layer 
and directly execute instructions

43
00:02:21,597 --> 00:02:23,193
on the hardware layer.

44
00:02:23,193 --> 00:02:28,611
So specifically, applications execute
instructions directly on the CPU

45
00:02:28,611 --> 00:02:31,118
without having to go
through the operating system.

46
00:02:32,348 --> 00:02:36,979
Now that is what we call <i>direct execution</i>,
commonly called <i>direct execution</i>.

47
00:02:36,980 --> 00:02:39,386
Now in general, layer bypass
is frowned upon.

48
00:02:39,876 --> 00:02:42,818
But direct execution is actually
necessary in the computing stack

49
00:02:42,818 --> 00:02:46,486
from a performance perspective,
because otherwise the operating system

50
00:02:46,486 --> 00:02:50,298
would be left with the task
of having to interpret the instructions

51
00:02:50,298 --> 00:02:51,914
of the applications.

52
00:02:52,840 --> 00:02:56,819
Now direct execution is however
only acceptable

53
00:02:56,819 --> 00:03:00,083
if the lower software layer, 
which is the operating system,

54
00:03:00,083 --> 00:03:02,027
can create a secure sandbox

55
00:03:02,027 --> 00:03:05,031
that contains the upper software layer,
the application

56
00:03:05,031 --> 00:03:07,201
to a well defined set of resources.

57
00:03:07,359 --> 00:03:10,225
And that containment is generally done
and enforced by hardware.

58
00:03:10,646 --> 00:03:12,373
But it can be done in software as well.

59
00:03:13,979 --> 00:03:16,409
So in this simple example, which is
in this figure, the hardware layer

60
00:03:16,409 --> 00:03:19,175
exposes primitives that are available
only through the operating system.

61
00:03:19,529 --> 00:03:22,423
In particular, some privileged instructions.

62
00:03:22,423 --> 00:03:25,271
Only the operating system can issue
these privileged instructions.

63
00:03:25,687 --> 00:03:29,580
By doing so, the operating system
can ensure the integrity of the sandbox

64
00:03:29,580 --> 00:03:32,009
that it creates for
each application process.

65
00:03:33,670 --> 00:03:36,971
Now all reasonable operating systems
today provide that kind of protection,

66
00:03:36,971 --> 00:03:40,948
and that kind of layering, so even though
you have direct execution

67
00:03:40,948 --> 00:03:45,536
from an implementation perspective,
in reality, the layering is maintained.

68
00:03:46,314 --> 00:03:48,657
But keep in mind that this
was not always the case.

69
00:03:49,309 --> 00:03:54,269
Windows 95, which ran on the world's
desktop and which a few of you may be

70
00:03:54,287 --> 00:03:57,198
old enough to remember,
is a perfect counter example.

71
00:03:57,198 --> 00:03:59,948
Even though the hardware
had all the right primitives,

72
00:03:59,948 --> 00:04:03,767
Windows 95 chose to expose
some critical in memory data

73
00:04:03,767 --> 00:04:05,523
structures directly to applications.

74
00:04:06,069 --> 00:04:10,871
As a result, applications could directly
compromise the integrity of the sandbox,

75
00:04:11,094 --> 00:04:13,166
exposed by the operating system.

76
00:04:15,968 --> 00:04:18,640
Now fortunately, Windows 95
is not that interesting anymore.

77
00:04:18,987 --> 00:04:21,654
What's interesting these days
in current architecture is that

78
00:04:21,654 --> 00:04:26,236
the notion of protection and bypass
is remaining as relevant as ever.

79
00:04:26,519 --> 00:04:30,662
For example, virtual machine architectures
have added a new layer in the hierarchy.

80
00:04:31,220 --> 00:04:33,451
Now we have to think 
of at least three layers,

81
00:04:33,674 --> 00:04:35,511
which we're showing in this picture.

82
00:04:35,700 --> 00:04:38,332
We now have an application 
layer like before.

83
00:04:38,652 --> 00:04:40,704
We have an operating system
layer like before,

84
00:04:41,148 --> 00:04:43,173
but rather than running
directly on the hardware,

85
00:04:43,408 --> 00:04:45,791
the operating system is actually
running on top

86
00:04:45,791 --> 00:04:48,131
of a virtual machine monitor.

87
00:04:48,299 --> 00:04:51,843
Yet both the operating system
and the application can still issue

88
00:04:51,843 --> 00:04:55,826
instructions directly, so that you have
all the performance benefits

89
00:04:55,826 --> 00:04:58,389
of directly executing on the CPU.

90
00:05:00,339 --> 00:05:04,915
Now it means now that direct execution
now applies across potentially two layers,

91
00:05:04,915 --> 00:05:08,066
allowing an application
to bypass both the operating system

92
00:05:08,066 --> 00:05:10,814
and the hypervisor to directly
issued instructions.

93
00:05:11,742 --> 00:05:15,187
In the last few years processors
have added explicit hardware support

94
00:05:15,187 --> 00:05:18,314
for this feature so that it's easy
to build a virtual machine stack

95
00:05:19,174 --> 00:05:21,829
and make the overheads 
of virtualization negligible.

96
00:05:22,287 --> 00:05:25,040
That means that a hypervisor
or a virtual machine monitor

97
00:05:25,040 --> 00:05:28,141
can run at the most privileged
level, an operating system

98
00:05:28,141 --> 00:05:30,987
at some intermediate level,
and the application like before

99
00:05:30,987 --> 00:05:34,247
with the most reduced
set of privileges possible.

100
00:05:34,753 --> 00:05:38,418
Yet all three can execute,
direct the instructions on the CPU.

101
00:05:39,248 --> 00:05:41,448
Now that type of innovation
has had a huge impact

102
00:05:41,448 --> 00:05:44,487
on the research community
since we can now use those new

103
00:05:44,487 --> 00:05:48,542
hardware features to think about
new layers and to compose new

104
00:05:48,542 --> 00:05:50,614
layered stacks in innovative ways.

105
00:05:51,105 --> 00:05:52,848
Here a few examples.

106
00:05:52,848 --> 00:05:54,725
For example you can use
the hardware to create

107
00:05:54,725 --> 00:05:56,396
recursive virtual machines.

108
00:05:57,245 --> 00:05:59,972
There's an interesting paper
that actually has a virtual machine

109
00:05:59,972 --> 00:06:02,254
monitor running a virtual machine
monitor running a virtual machine

110
00:06:02,254 --> 00:06:04,006
monitor, running
a virtual machine monitor,

111
00:06:04,006 --> 00:06:07,063
finally running an operating system
in an application, that's a lot of layers

112
00:06:07,063 --> 00:06:09,238
and the paper was 
actually called "Turtles".

113
00:06:09,988 --> 00:06:13,122
There's another example, you can run
a virtual machine monitor or hypervisor

114
00:06:13,122 --> 00:06:16,845
below that hypervisor, and you would
do that so that you wouldn't have to

115
00:06:16,845 --> 00:06:20,459
trust the mid-level hypervisor
for security perspective,

116
00:06:20,459 --> 00:06:23,406
so that you can have a guarantee
that the mid-level hypervisor

117
00:06:23,996 --> 00:06:28,494
could not spoof on the content
or inspect or spy on the content

118
00:06:28,954 --> 00:06:31,692
of the virtual machine
and that interesting paper was called

119
00:06:31,692 --> 00:06:35,328
"Cloudvisor" it was
an SOSP paper in 2011.

120
00:06:36,378 --> 00:06:39,397
What you can actually use the hardware
differently to use virtualization

121
00:06:39,397 --> 00:06:43,178
to not create virtual machines
but the sandbox processees

122
00:06:43,178 --> 00:06:46,811
from the operating systems,
so create a mid layer between the OS

123
00:06:46,811 --> 00:06:50,298
and a process, that is there
to provide an additional level

124
00:06:50,298 --> 00:06:53,745
of isolation guarantees,
not implemented by the operating system.

125
00:06:53,745 --> 00:06:55,854
And there was a system 
called Dune published

126
00:06:55,854 --> 00:06:58,556
at OSDI in 2012
that leverages

127
00:06:58,556 --> 00:06:59,999
this hardware capability.

128
00:07:00,421 --> 00:07:04,218
Now we have a full dedicated
lecture cycle on virtualization

129
00:07:04,218 --> 00:07:06,980
in a few weeks, for now
we'll pause on the layering

130
00:07:06,980 --> 00:07:11,065
of the compute stack and shift gears
and talk about the information stack.

131
00:07:12,325 --> 00:07:17,394
By information stack, I'm going
to narrowly focus on the stack that handles

132
00:07:17,394 --> 00:07:20,647
structured data, there's an equally
important information stack

133
00:07:20,647 --> 00:07:25,236
to think about unstructured data,
but it's very important to start by

134
00:07:25,236 --> 00:07:28,567
having a good handle on how
structured data is generally organized

135
00:07:28,567 --> 00:07:30,635
or typically organized today.

136
00:07:31,817 --> 00:07:36,336
So in doing so I'm specifically focusing
on a layered architecture that includes

137
00:07:36,336 --> 00:07:39,614
a relational database since this is 
such an important use case.

138
00:07:40,334 --> 00:07:44,804
By that I mean that database
is not an application as far

139
00:07:44,804 --> 00:07:47,424
as the field of computer systems
is concerned but actually is part

140
00:07:47,436 --> 00:07:48,860
of the system domain.

141
00:07:49,937 --> 00:07:51,198
Let's look at the stack.

142
00:07:51,198 --> 00:07:53,229
In this picture, there are four layers,

143
00:07:53,229 --> 00:07:58,072
the database layer, the filesystem layer, 
the block layer, the volume layer,

144
00:07:58,072 --> 00:07:59,788
and then finally, the disk layer.

145
00:08:01,268 --> 00:08:06,072
I'm also listing here the APIs
exposed by these various layers.

146
00:08:06,792 --> 00:08:12,040
Application make sequel calls,
typically over some RPC protocol

147
00:08:12,040 --> 00:08:13,167
such as JDBC.

148
00:08:14,734 --> 00:08:17,763
That's the first API,
on the UNIX system

149
00:08:17,763 --> 00:08:21,010
the database typically 
relies on POSIX API,

150
00:08:21,010 --> 00:08:23,018
so system calls to access files.

151
00:08:24,055 --> 00:08:26,776
Here I'm asumming a persistent
file system if you remember

152
00:08:26,776 --> 00:08:29,689
the introductory module
so the information stack

153
00:08:29,689 --> 00:08:31,418
typically goes to another
two different layers,

154
00:08:31,418 --> 00:08:35,187
first the file system layer,
and then the volume management layer.

155
00:08:35,617 --> 00:08:38,741
Now both these layers are internal to the
operating system but they

156
00:08:38,741 --> 00:08:42,007
actually are very clearly
separate distinct layers.

157
00:08:42,938 --> 00:08:45,873
Underneath the volume layer,
the block driver layer issues

158
00:08:45,873 --> 00:08:49,594
block commands and that typically
uses the SCSI protocol which is

159
00:08:49,594 --> 00:08:52,911
a hardware defined protocol
to access those drives.

160
00:08:54,222 --> 00:08:56,790
Now one thing to note is that
two of these layers expose

161
00:08:56,800 --> 00:08:59,990
the same interface, and that is 
the block interface.

162
00:09:00,033 --> 00:09:04,163
Both the SCSI protocol as well
as the volume management layer

163
00:09:04,181 --> 00:09:07,724
expose a block interface and that is
because volume management is

164
00:09:07,724 --> 00:09:13,114
a layer which exposes the same obstruction
that the resource that it relies upon.

165
00:09:13,866 --> 00:09:16,738
That's a very specific form of layering
called virtualization and again,

166
00:09:17,328 --> 00:09:20,912
as I mentioned, we'll have a dedicated
lecture on virtualization in a few weeks.

167
00:09:21,902 --> 00:09:24,962
If we look at this picture here at this
level detail, we have four layers.

168
00:09:25,565 --> 00:09:30,213
But in reality, many of these layers
can be each expanded into multiple,

169
00:09:30,213 --> 00:09:32,068
distinct layers of their own.

170
00:09:34,258 --> 00:09:35,898
So let's start with the data layer.

171
00:09:35,898 --> 00:09:40,735
The data layer is the layer that manages 
the information as databases.

172
00:09:41,476 --> 00:09:44,041
Such databases typically
follow what is known

173
00:09:44,041 --> 00:09:46,211
as the ANSI-SPARC
three layer model.

174
00:09:47,241 --> 00:09:52,794
In that model, the individual presentation
layer, the conceptual schema layer,

175
00:09:52,794 --> 00:09:58,066
and the internal representation layer
are each architected into different layers.

176
00:09:59,283 --> 00:10:03,525
As with all good layers, each layer
provides it's own level of abtraction,

177
00:10:03,726 --> 00:10:09,237
each layer relies on the layer below
and each layer manages a namespace.

178
00:10:10,428 --> 00:10:14,434
So starting from the top, the presentation
layer includes query languages,

179
00:10:14,434 --> 00:10:16,508
access control and many other elements.

180
00:10:17,377 --> 00:10:21,447
Below, the community view manages
the community view that is,

181
00:10:21,447 --> 00:10:25,545
the externally visible elements
of the schema, that is the namespace,

182
00:10:25,545 --> 00:10:26,907
that is exposed.

183
00:10:27,654 --> 00:10:32,119
Now internally, the community view relies
on objects such as indices and logs

184
00:10:32,119 --> 00:10:34,114
that are provided by the physical layer.

185
00:10:34,653 --> 00:10:37,943
And finally, the physical layer itself
implements these internal objects

186
00:10:37,943 --> 00:10:41,726
on top of physical resources
and this picture on the right

187
00:10:41,726 --> 00:10:45,084
it is a disc, although in reality
most databases are stored

188
00:10:45,084 --> 00:10:47,908
on file systems, as it's shown on the left.

189
00:10:51,578 --> 00:10:56,067
Let's move down one level, let's move
specifically to the filesystem layer.

190
00:10:56,067 --> 00:10:59,440
In the previous module we talked about
the POSIX layer and the VFS layer

191
00:10:59,440 --> 00:11:02,450
as two distinct building blocks
of the storage stack.

192
00:11:02,975 --> 00:11:07,554
Here we're looking at the on-disc
implementation of a specific filesystem.

193
00:11:07,558 --> 00:11:12,288
In other words the implementation
of a specific filesystem driver.

194
00:11:12,288 --> 00:11:16,919
In this picture which is also taken
from the textbook, illustrates the way

195
00:11:16,919 --> 00:11:20,327
the block layout of 
a UNIX filesystem is organized.

196
00:11:20,991 --> 00:11:23,637
What's interesting to note here
is that the designers of the UNIX

197
00:11:23,637 --> 00:11:25,893
filesystem chose to architect
the solution through

198
00:11:25,893 --> 00:11:29,883
a precise layering, by separating
<i>inodes</i> from directories.

199
00:11:30,509 --> 00:11:32,035
Let me expand.

200
00:11:32,035 --> 00:11:35,256
The lower layer which is the <i>inode</i>
layer allocates blocks and exposes

201
00:11:35,256 --> 00:11:36,881
the abstraction of a file.

202
00:11:38,197 --> 00:11:40,714
But in such a filesystem, 
the files are not named.

203
00:11:41,414 --> 00:11:44,444
Instead the meta data of each file
is indexed

204
00:11:44,444 --> 00:11:46,853
with an array of anonymous <i>inodes</i>.

205
00:11:49,024 --> 00:11:53,488
Now in the upper layer, the directory layer
the UNIX filesystem represents directories

206
00:11:53,488 --> 00:11:57,229
as files, so a directory is nothing more 
than an array of records

207
00:11:57,229 --> 00:12:00,715
that map a filename onto
a particular <i>inode</i>.

208
00:12:01,570 --> 00:12:05,031
Now that strict layering is not
accidental, instead it's the result

209
00:12:05,031 --> 00:12:08,075
of a deliberate effort to control
the complexity of the design.

210
00:12:08,735 --> 00:12:12,978
For example, when a filesystem
is corrupted, or simply when a filesystem

211
00:12:12,978 --> 00:12:17,097
needs repair after a crash, each layer
can be independently managed and verified

212
00:12:17,097 --> 00:12:18,965
starting from the lower layers.

213
00:12:19,305 --> 00:12:22,344
That's precisely what tools such
as what FS check do today

214
00:12:22,344 --> 00:12:23,770
on modern systems.

215
00:12:26,073 --> 00:12:28,873
Now let's move down another level below.

216
00:12:29,573 --> 00:12:33,336
File systems are laid on top 
of a block device abstraction.

217
00:12:33,336 --> 00:12:35,851
This could be any block device
obstruction whether it's persistent

218
00:12:35,851 --> 00:12:39,529
or not and often file systems are laid
on top of volumes.

219
00:12:39,746 --> 00:12:43,269
And a volume is nothing more than
the virtualization of one or more

220
00:12:43,269 --> 00:12:44,688
physical disc drives.

221
00:12:45,908 --> 00:12:49,572
Now a single drive can be multiplexed
into multi partitions and multiple disc

222
00:12:49,572 --> 00:12:52,277
drives can be aggregated into
appearing like a single device.

223
00:12:53,030 --> 00:12:55,492
There's many ways to do this
as there are RAID options.

224
00:12:56,286 --> 00:13:01,093
From a layering perspective, the thing
to note is that the underlying resource

225
00:13:01,093 --> 00:13:02,997
and the exposed abstractions
are identical.

226
00:13:02,997 --> 00:13:05,509
And again this definition
of virtualization,

227
00:13:05,509 --> 00:13:08,171
so from a layering perspective, 
both in theory and in practice,

228
00:13:08,171 --> 00:13:11,849
the volume management layer 
could be trivially nested, recursively.

229
00:13:12,520 --> 00:13:15,727
Because you can trivially nest
these layers recursively,

230
00:13:15,727 --> 00:13:20,094
you get combinations such as 
striped mirrors and mirrored stripes,

231
00:13:20,094 --> 00:13:22,117
which are common terms 
if you're looking at

232
00:13:22,117 --> 00:13:24,000
managing enterprise storage.

233
00:13:24,000 --> 00:13:26,923
In the first case you have RAID Zero
which is layered on top of RAID One

234
00:13:26,923 --> 00:13:30,538
and in the other case you have
RAID One layered on top of RAID Zero.

235
00:13:31,301 --> 00:13:33,573
To be honest with you,
I always have to think about which is which.

236
00:13:34,145 --> 00:13:35,375
You can look it up too.

237
00:13:35,789 --> 00:13:41,877
The point is that you have layers that can
be trivially nested and recursed

238
00:13:42,597 --> 00:13:45,484
with each other because the 
abstractions are all the same.

239
00:13:46,521 --> 00:13:48,575
So let's move down one layer below.

240
00:13:48,575 --> 00:13:49,869
By now you're probably hoping

241
00:13:49,869 --> 00:13:53,044
that this module is over,
after all we are at the bottom

242
00:13:53,044 --> 00:13:54,142
of the stack, we're at
the disc layer.

243
00:13:54,142 --> 00:13:55,576
Well, not quite.

244
00:13:56,481 --> 00:13:59,945
Actually, depending on your point of view
things are just now

245
00:13:59,945 --> 00:14:01,618
starting to get interesting.

246
00:14:02,498 --> 00:14:05,847
That is because, like many terms
in computer systems,

247
00:14:05,847 --> 00:14:07,783
storage is overloaded.

248
00:14:08,283 --> 00:14:11,903
So I prefer the definition of storage
as a SCSI target.

249
00:14:12,617 --> 00:14:15,371
It's a little narrow since
SCSI is only one possible protocol

250
00:14:15,371 --> 00:14:20,561
but the idea here is to define storage
as an abstraction that is materialized

251
00:14:20,561 --> 00:14:24,862
by a well defined protocol, 
and in this case the protocol is SCSI.

252
00:14:25,734 --> 00:14:28,838
Now SCSI is nothing more
than an RPC protocol.

253
00:14:29,364 --> 00:14:32,838
You have requests, you have response,
the client's side is called initiator

254
00:14:32,838 --> 00:14:36,681
and the service side is called the target,
there's a lingo associated with SCSI

255
00:14:36,681 --> 00:14:39,759
but it really is nothing more than
an RPC protocol.

256
00:14:40,694 --> 00:14:43,751
Storage is really about being
on the target or on the service side

257
00:14:44,081 --> 00:14:45,662
of that protocol.

258
00:14:46,462 --> 00:14:49,920
The target can be an actual disc,
the two and half inch drive

259
00:14:49,920 --> 00:14:51,956
in your laptop is a SCSI target.

260
00:14:52,718 --> 00:14:55,580
The target code could also be
a dedicated hardware component

261
00:14:55,580 --> 00:14:59,101
for example a RAID controller
which is connected to multiple disks

262
00:14:59,971 --> 00:15:02,847
and in that example, the volume
management and the RAID function

263
00:15:02,847 --> 00:15:05,343
that was previously described
as part of the operating system

264
00:15:05,343 --> 00:15:08,203
is now implemented by the hardware itself.

265
00:15:08,593 --> 00:15:11,514
But storage target can 
and often is actually

266
00:15:11,720 --> 00:15:13,118
a much larger device.

267
00:15:13,448 --> 00:15:16,273
As a matter of fact, 
it's a computer of its own.

268
00:15:16,615 --> 00:15:19,384
Now the picture here
is that of an enterprise

269
00:15:19,384 --> 00:15:25,941
class array and chances are
your bank transactions are stored

270
00:15:25,941 --> 00:15:29,773
on either that device or the device
made by one of their competitors.

271
00:15:30,453 --> 00:15:34,888
Now to put things in perspective, 
such a device literally weighs a ton,

272
00:15:35,568 --> 00:15:40,345
can have hundreds or thousands
of disc drives, typically has

273
00:15:40,345 --> 00:15:42,846
at least four independent
computer systems internally,

274
00:15:43,403 --> 00:15:45,869
that's because you have
two redundant front end computers

275
00:15:46,037 --> 00:15:47,706
and two redundant back end computers

276
00:15:48,903 --> 00:15:52,269
and these are very complex systems,
for example they automatically send

277
00:15:52,272 --> 00:15:55,932
you an email when something goes wrong
and they definitely cost more

278
00:15:55,932 --> 00:15:59,466
than an apartment, 
even an apartment in Los An.

279
00:15:59,466 --> 00:16:05,127
So the point here, is that despite 
the immense internal

280
00:16:05,127 --> 00:16:07,588
complexity of that device,

281
00:16:08,158 --> 00:16:11,659
this is a device that exposes
the abstraction of a disc.

282
00:16:13,015 --> 00:16:16,470
You have the same abstraction that
ranges in terms of a price,

283
00:16:17,378 --> 00:16:21,968
from 100 francs, which would be
the cost of a two and a half inch drive,

284
00:16:22,508 --> 00:16:26,393
to something that costs well over 
multiple millions of Swiss Francs.

285
00:16:27,428 --> 00:16:30,549
If you think about the importance
of identifying the right layers

286
00:16:30,872 --> 00:16:34,408
and exposing the right abstractions,
the storage industry which is a

287
00:16:34,408 --> 00:16:38,258
multi-billion dollar industry exists 
because of this well defined abstraction.

288
00:16:38,521 --> 00:16:41,683
Because it allowed them to innovate
and change things and deliver new

289
00:16:41,683 --> 00:16:45,468
capabilities, and yet still maintain
the appearance of just being

290
00:16:45,468 --> 00:16:47,469
nothing more than a disc drive.

291
00:16:49,014 --> 00:16:52,309
So I've talked about SCSI a few times
already and if you remember,

292
00:16:52,309 --> 00:16:55,627
SCSI is nothing more than an RPC protocol,
it was originally designed

293
00:16:55,627 --> 00:16:59,250
to be implemented on a hardware bus
that is what parallel SCSI is today.

294
00:17:00,025 --> 00:17:02,723
But as a protocol, it could also
be layered on top of other networking

295
00:17:02,723 --> 00:17:06,331
protocols, and that field of work
is actually a pretty broad area,

296
00:17:06,331 --> 00:17:09,142
it's called storage networking,
these are networking protocols

297
00:17:09,142 --> 00:17:10,820
in stack that carry storage traffic.

298
00:17:11,710 --> 00:17:14,917
Now I'm not going to go through
the stacks of this picture in detail,

299
00:17:14,917 --> 00:17:17,055
what's important to note 
is that you have multiple

300
00:17:17,055 --> 00:17:19,629
different options, you have at least
six stacks shown on this picture

301
00:17:19,629 --> 00:17:22,226
and there are many more, 
they each use different

302
00:17:22,226 --> 00:17:25,306
length network and end to end
technologies to communicate.

303
00:17:25,786 --> 00:17:29,886
They also each have different management
model, one important management model

304
00:17:29,886 --> 00:17:32,855
is called Fiber Channel which is 
a way to name initiators,

305
00:17:32,855 --> 00:17:36,874
targets and disc drives to create 
storage area networks.

306
00:17:37,409 --> 00:17:40,644
This is actually again as I mentioned,
a relatively broad field and some people

307
00:17:40,644 --> 00:17:43,471
spend their entire careers focusing
on that particular

308
00:17:43,471 --> 00:17:45,765
sub field of computer system.

309
00:17:47,080 --> 00:17:49,569
And this brings up the final observation
in this module about layers.

310
00:17:50,337 --> 00:17:53,642
We tend to think of the layered stack
as consisting of layers

311
00:17:53,642 --> 00:17:55,386
that each provide a distinct function.

312
00:17:55,670 --> 00:17:58,338
A little bit like a layered cake 
where clearly the crust plays a role

313
00:17:58,648 --> 00:18:01,646
that is different from the filling,
that is different from the frosting.

314
00:18:01,975 --> 00:18:04,961
You may have multiple layers of filling
in the middle but at the end of the day

315
00:18:04,961 --> 00:18:08,255
the crust is distinct and the layer
above is clearly distinct.

316
00:18:08,734 --> 00:18:12,174
And yet from an implementation perspective
the better mental analogy

317
00:18:12,174 --> 00:18:13,484
may actually be the Russian doll.

318
00:18:13,484 --> 00:18:16,574
Anytime you double click
on the layer below you actually see it has

319
00:18:16,574 --> 00:18:19,446
all of the components, attributes
and some of the issues

320
00:18:19,446 --> 00:18:21,570
that you actually had to add a layer above.

321
00:18:21,851 --> 00:18:26,215
The example we use is that clearly a disc
is not a computer, they're two completely

322
00:18:26,215 --> 00:18:29,957
different abstractions, and yet a disc, 
from an implementation perspective

323
00:18:30,227 --> 00:18:32,492
very much looks like a computer.

324
00:18:33,403 --> 00:18:34,820
So it's time to summarize.

325
00:18:35,011 --> 00:18:37,619
We talked about the importance of layering.

326
00:18:37,619 --> 00:18:39,507
I made the point about the fact that they're not

327
00:18:39,507 --> 00:18:42,986
that many layers in computer systems,
takes a tremendous amount of effort

328
00:18:42,986 --> 00:18:45,704
to define a properly architected layer.

329
00:18:45,704 --> 00:18:48,725
If you can do that, it can have 
a significant impact on

330
00:18:48,725 --> 00:18:50,816
the overall industry or on the field.

331
00:18:50,816 --> 00:18:54,638
Now even though there are not many
elementary building blocks, there's a near

332
00:18:54,638 --> 00:18:59,763
infinite way in which you can combine
different layers into interesting stacks.

333
00:19:00,206 --> 00:19:02,456
So there's flexibility in the composition.

334
00:19:03,118 --> 00:19:06,217
And then finally we saw the Russian doll
example in the complex and the fact

335
00:19:06,217 --> 00:19:09,377
that if you double click on the layer
you typically get all of the same

336
00:19:09,377 --> 00:19:11,465
attributes of the layer above.

337
00:19:13,505 --> 00:19:17,058
Now there are some cautionary points
some of which we discussed in the module,

338
00:19:17,058 --> 00:19:18,137
some which we did not.

339
00:19:19,376 --> 00:19:22,037
Obviously you may have an intuition
that layering adds overhead.

340
00:19:22,277 --> 00:19:26,002
It's important to minimize these overheads
and sometimes you have techniques

341
00:19:26,002 --> 00:19:28,089
such as direct execution
to minimize overheads.

342
00:19:28,706 --> 00:19:31,591
We also saw that layering adds
complexity, unfortunately there's no

343
00:19:31,591 --> 00:19:35,925
silver bullet to the complexity problem,
this is often one of the limiting elements

344
00:19:36,315 --> 00:19:38,070
associated with a layer design.

345
00:19:39,460 --> 00:19:42,966
Sometimes adding a layer can 
actually create more than having

346
00:19:42,966 --> 00:19:47,277
sort of a linear or proportional overhead
it can actually create a non linear

347
00:19:47,277 --> 00:19:49,044
or sort of performance cliff.

348
00:19:49,378 --> 00:19:53,241
For example, if you have a filesystem
that assumes rotating media

349
00:19:53,241 --> 00:19:55,919
and you deploy it on a flash drive, 
you may actually get

350
00:19:55,919 --> 00:19:57,157
quite poor performance

351
00:19:57,157 --> 00:20:01,275
or if you conversely deploy a filesystem
that is optimized for a flash drive

352
00:20:01,275 --> 00:20:04,656
on a rotating media, the performance
may actually be poor.

353
00:20:05,148 --> 00:20:08,651
And that is because the abstractions
generally don't convey the underlined

354
00:20:08,651 --> 00:20:12,986
internal characteristics of the layer
that is because it is abstraction

355
00:20:12,986 --> 00:20:16,060
that actually eliminates 
the internal implementation details.

356
00:20:16,488 --> 00:20:19,457
Even though sometimes these implementation
details have a first order impact

357
00:20:19,634 --> 00:20:20,858
on performance.

358
00:20:21,265 --> 00:20:25,372
So we did not cover this in the lectures
and that is because you will be

359
00:20:25,372 --> 00:20:31,921
reading a paper from Mesnier and others,
it's an SOSP paper from SOSP '11

360
00:20:32,721 --> 00:20:36,486
on Differentiated Storage Services
which is all about reconciling

361
00:20:36,486 --> 00:20:41,765
the performance problem in the "A" layer
design and doing it over

362
00:20:41,765 --> 00:20:45,014
the SCSI interface which 
we did discuss in detail in this module.

363
00:20:45,686 --> 00:20:47,938
Next up, we'll talk about client server.
