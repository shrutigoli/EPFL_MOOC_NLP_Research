In this video I'm going to talk about some advice for -- give some advice for designing or choosing a declarative language for a particular purpose, for a particular system.
Examples could be some kind of query language, a language for specing scripting, a language for a formal method system, a verification system, a testing system, things like that.
So one thing is, you need to have a thorough understanding of what kind of logics there might be, and which might be options.
The first thing that we always understand, what I was talking about in the past two videos.
It needs experience, so you want to read papers where people have done this.
Examples were papers on declarative networking, on query relation, things like that.
Some formal methods papers,
CAF, computated verification papers, and things like that.
You have to really understand which problem you want to solve, specifically, are you trying to solve this kind of model checking problem?
Or the satisfiability or validity problem?
We've talked about this before.
And is the language meant to answer questions about a static, or a dynamic system?
And we're going to talk about these things more.
Also, if you have multiple options, if you might develop your own language, this property of having alternative characterizations for a declarative language is useful and important.
If you come up with your own thing, if you find thinking about the problem many different ways, you convert to a different language that end up being nearly the same, or exactly the same expressive power.
You're probably on the right path, and you have actually done something right.
It's not so easy to do that, but if you have a clear problem in mind, this may be possible to do.
The other thing is if you have, example, alternative algebraic characterization, and the logical characterization, you can use the logical one for people to spec, and really do it declaratively, and the algebraic one for actually executing or implementing.
So there is, for example, for certain logics that actually, state-machine presentations and things like that, and all kinds of tricks, alternative to algebraic presentations, for doing things efficiently.
Or actually doing them practically so that no non-determinism is needed and things like that.
So you should think about that.
Is the complexity of the problems that we're dealing with acceptable?
Some things are just undesirable, others are a very high complexity.
It might be too high, and then you might do a trade-off.
Some slightly weaker language might do the job as well, and might have much lower complexity.
And is the language simple and easy to understand?
That's somehow a goal of the design as well.
So regarding this model checking versus sat and validity problem, remember, let's call the structure a "database".
Or a "snapshot" of the state of the system, a system description.
That's really DATA.
For example, the Kripke structures in the context of model logics.
These can move to state, and to a specing system.
In a database, well the database is the database, obviously.
So that's called a structure.
And secondly, there's the formula in your logical language.
And model checking is asking, given the input is a structured and a logical sentence, is the sentence true on that structure?
That's model checking.
Is that what you need?
For example, database queries are of that kind.
Or checking whether a safety condition is true on a finite-state system.
Alternatively, satisfiability and validity are kind of, static analysis problems, that don't need a structured database.
You only look at the formula.
Is the formula general for all possible structures satisfiable, or valid?
And remember, there's an if and only if condition, they are dual satisfiability and validity.
You've got this satifiability, exactly if, if and only if it's not true, that's the negation of the form is valid.
And visa versa.
It's a theorem if the negation is unsatisfiable.
So, you have to understand really what you need here.
And sometimes there is trade-offs.
You can actually sometimes lift one to the other.
You might actually reduce sometimes a validity problem to a small checking problem, or a satisfiability.
So these transformations may be possible.
You have to consider that if you want to kind of engineer the complexity of the problem that you're dealing with.
Regarding the static versus dynamic scenario thing, the idea is, static, there's a database, and you want to do something with the database.
You want to ask questions about it.
Or you've got a specification you want to ask a question about.
For that, there might be a language like first-order logic.
There's also various kind of slight generalization of first-order logic queue.
For example, take first the logic, and add a special interpreted relation.
For example, the transitive closure relation for a given relation.
So of course, you can implement this recursion in Datalog, but that might be overkill.
You might still have something between FO and Datalog by, for example, taking FOTC.
And that manages languages and extensions.
Actually no.
If it is not a fragment of Datalog because it has negation, but FOTC is a fragment of Datalog with negation.
And there's other such languages that goes beyond the scope of this lecture to talk about them, but whether such language might have been studied is a good way to start looking if you know what you want.
Non-monotonic logics, we said, could be adding expressiveness to make very highly, expressive, powerful queries.
The alternative would be that you've got something dynamic to model the system.
And then you might do this in two different ways, basically.
You could do it via logical programming, or you could do it via model logics, temporal/dynamic logics.
So by logical programming, you could basically, it'd be like in declarative networking, you model a system by actually doing the computation of the system.
Simulating the system step by step.
And that could be done with Datalog-like language.
Example of declarative routing, as we said.
And the temporal/dynamic logic thing would be simplified at facilitating asking questions, static questions, about potentially infinite computations.
Can something bad ever happen?
Is some kind of safety or liveness property holding, and things like that.
Now, choosing for the dynamic case between logic programming, and temporal/dynamic logic is the impression of how indirect and declarative you want your automated reasoning to be.
So, remember simplicity the goal must be that it's simple, and not overkill.
The logics must be corresponding to your needs.
You have the potential, though.
If you choose the right logic, that are a way of creating truly bug-free programs and specifications that could actually be possible, because the logic carries strong intuitions with them, and they are very small and succinct.
So, while getting a hundred thousand line of code program perfectly bug-free might be completely unrealistic, but if the logical specification is short, and it's very -- the language is perfect for the purpose and so on, you can actually get things right.
So, of course, a particular choice of logical language might not be right for the purpose, but is it possible to fully comprehend the logical specification implied, and so on?
Yes, because it has this strong intuition, and this kind of declarative flavor.
So it's possible to get things right that way.
That's an important thing, and it's a key to this formal method, because if you want to do verification of a program by reducing the problem of doing this verification in another problem, writing these logical formulas, and doing the right thing with them, and that is as hard.
You have not achieved anything.
And yes, it's a matter of taste, and a matter of experience.
You want to capture the essence of the problem at hand.
There's going to be some kind of elegance, and mathematical beauty, and I'm not trying to make you theoreticians here of making the right choice.
Look at some the examples you have seen in these past two videos, where a choice of language was commandeered to what you want to achieve.
And it's really capturing the essence, the nature of the problems, so things get very easy and intuitive.
You don't have to worry about the hassle of programming it anymore, because it's so natural.
That's something that you have to aim for.
And it's often possible to achieve, and then you've got a good solution.
Often, you've got published research.
Succinctness, language should be well-rounded, you don't want to have awkward exceptions, you don't want to have things expressed with a language that don't mean anything in the system.
And you want to understand what you want to gain and design for that.
Is it user productivity?
Is it simple to use?
Do you want to get new insights for making a system better?
Do you want to just provide abstractions and clean interfaces?
All of these can be achieved if you do it right.
It's a question of experience and taste.
