1
00:00:03,982 --> 00:00:06,921
In this video we're going to talk
about declarativity in more detail.

2
00:00:06,921 --> 00:00:08,507
So, what is a declarative language?

3
00:00:08,507 --> 00:00:11,899
It's a language in which you
specify what you want to get

4
00:00:11,899 --> 00:00:13,916
as a result rather than how to compute it.

5
00:00:14,666 --> 00:00:18,992
So it describes the desired result,
rather than steps towards obtaining it.

6
00:00:19,592 --> 00:00:23,942
Examples would be functional languages
in general and logic-based languages.

7
00:00:23,942 --> 00:00:26,677
And to make that clear,
because there's sometimes

8
00:00:26,677 --> 00:00:29,088
I would argue, misunderstood,

9
00:00:29,088 --> 00:00:31,282
the distinction is between
declarative on one hand

10
00:00:31,282 --> 00:00:33,778
and imperative language on the other,

11
00:00:33,778 --> 00:00:35,943
rather than between declarative
and procedural.

12
00:00:38,093 --> 00:00:41,434
So why would we
want to use declarative languages?

13
00:00:41,434 --> 00:00:45,290
The reasons are the same as
why you would want to use DSLs,

14
00:00:45,290 --> 00:00:48,142
and the reasons
are even stronger potentially.

15
00:00:48,142 --> 00:00:51,949
We would like to have an abstraction
if possible and separation of concerns.

16
00:00:52,429 --> 00:00:55,085
If there's low level
implementation details potentially,

17
00:00:55,085 --> 00:00:57,175
low level things about how to do things,

18
00:00:57,705 --> 00:01:00,916
we don't want to have to worry
about them if that can be avoided, right?

19
00:01:00,916 --> 00:01:04,255
That increases, of course, simplicity
and programmer productivity

20
00:01:04,255 --> 00:01:07,027
and we can more easily
avoid making mistakes.

21
00:01:08,107 --> 00:01:10,829
That way we might be able to do 
a substantial drop

22
00:01:10,829 --> 00:01:12,881
in very few lines of code.

23
00:01:12,881 --> 00:01:16,754
And we are able to concisely
capture the essence of the system

24
00:01:16,754 --> 00:01:18,950
that this language supports, right?

25
00:01:18,950 --> 00:01:20,851
So if we have really
designed a language

26
00:01:20,851 --> 00:01:22,982
that very well captures
what I can do in a system,

27
00:01:22,982 --> 00:01:26,122
then this language might also
explain the system so to say.

28
00:01:26,122 --> 00:01:28,419
It is very easy to basically,
you understand the language

29
00:01:28,419 --> 00:01:30,632
and you know what the system does.

30
00:01:30,632 --> 00:01:33,967
And it's very easy to avoid
misusing the system.

31
00:01:33,967 --> 00:01:35,505
If it's not possible to program things

32
00:01:35,505 --> 00:01:37,313
that are not meant 
to happen in the system.

33
00:01:37,313 --> 00:01:40,353
So functional languages as said,
I would argue,

34
00:01:40,353 --> 00:01:43,189
as being declarative,
since we have learned first

35
00:01:43,189 --> 00:01:44,976
about functions in mathematics,

36
00:01:44,976 --> 00:01:47,835
these are in a sense conceptual items.

37
00:01:47,835 --> 00:01:50,673
It's not necessarily about
how to compute these functions,

38
00:01:50,673 --> 00:01:52,965
that would be algorithms, right?

39
00:01:52,965 --> 00:01:54,881
But about what they mean.

40
00:01:55,631 --> 00:01:59,986
And so it is known,
there are reports of all kinds

41
00:01:59,986 --> 00:02:01,176
that programmable activity

42
00:02:01,176 --> 00:02:03,819
in functional languages
can be substantially higher

43
00:02:03,819 --> 00:02:06,725
that in classical imperative languages.
This for certain examples.

44
00:02:06,725 --> 00:02:08,908
Something like two orders of magnitude
has been reported.

45
00:02:08,908 --> 00:02:10,679
A particularly good example
is compilers.

46
00:02:10,679 --> 00:02:12,591
You can write a compilers 
particularly easy, usually,

47
00:02:12,591 --> 00:02:14,078
to do it in a functional language.

48
00:02:14,078 --> 00:02:15,395
For example there's pattern matching, etc.

49
00:02:15,395 --> 00:02:17,814
and constructed very natural
and widespread in functional

50
00:02:17,814 --> 00:02:21,667
programmer languages which are making
for example, writing compiler very easy,

51
00:02:21,667 --> 00:02:23,136
in a functional language

52
00:02:23,136 --> 00:02:25,629
and it's much more complicated
usually in imperative language.

53
00:02:26,809 --> 00:02:29,510
I'm not going to say much more about this
because I assume that

54
00:02:29,510 --> 00:02:31,716
you know functional programming
and there's not much more to say.

55
00:02:31,716 --> 00:02:34,401
Except for maybe this one qualification.

56
00:02:34,401 --> 00:02:38,634
That you can think of functional languages
also as logical languages.

57
00:02:38,634 --> 00:02:41,746
And clearly the pioneers
of computer science, for example,

58
00:02:41,746 --> 00:02:43,946
Church-Turing and Lambda Calculus
thought that way.

59
00:02:43,946 --> 00:02:45,490
And really thought of, for example,

60
00:02:45,490 --> 00:02:50,035
lambda calculus as combination of logic
and functional programming so to say.

61
00:02:50,565 --> 00:02:53,781
So what kind of logics are we
going to study in more detail?

62
00:02:53,781 --> 00:02:57,249
Well first this class of classical logics.

63
00:02:57,249 --> 00:03:00,168
By that I refer to classical semantics.

64
00:03:00,168 --> 00:03:03,254
Semantics are consistent
with first order predicate logic

65
00:03:03,254 --> 00:03:04,918
according to Frege.

66
00:03:04,918 --> 00:03:06,397
So that includes first order logic

67
00:03:06,397 --> 00:03:08,783
but also it's simplification
propositional logic

68
00:03:08,783 --> 00:03:12,379
and also higher-order logics,
where I've got more powerful quantifiers

69
00:03:12,379 --> 00:03:15,803
so in which I can quantify 
and dilations and sets.

70
00:03:15,803 --> 00:03:17,403
And also modal logics.

71
00:03:17,403 --> 00:03:21,344
I've got modes of true, for example,
which give me interesting power.

72
00:03:21,457 --> 00:03:23,524
Alternative to that,
there's logic programming

73
00:03:23,524 --> 00:03:25,305
and it includes datalog and prolog.

74
00:03:25,305 --> 00:03:27,515
We're going to talk more
about this in a separate video.

75
00:03:27,515 --> 00:03:31,330
And there's nonmonotonic logics
which have semantics that is inconsistent

76
00:03:31,330 --> 00:03:33,915
in the sense of classical logic,
but they can be very useful.

77
00:03:33,915 --> 00:03:39,281
And there is nonmonotonic generalizations
of classical logics,

78
00:03:39,721 --> 00:03:42,037
for example, positional
and first-order logics

79
00:03:42,037 --> 00:03:43,824
but also off logic programming.
