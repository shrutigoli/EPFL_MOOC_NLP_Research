1
00:00:03,627 --> 00:00:06,377
In this video I'm going 
to talk about some advice for --

2
00:00:06,377 --> 00:00:10,427
give some advice for designing 
or choosing a declarative language

3
00:00:10,977 --> 00:00:12,957
for a particular purpose, 
for a particular system.

4
00:00:13,307 --> 00:00:15,147
Examples could be 
some kind of query language,

5
00:00:15,147 --> 00:00:19,437
a language for specing scripting, 
a language for a formal method system,

6
00:00:19,437 --> 00:00:22,010
a verification system, 
a testing system, things like that.

7
00:00:22,460 --> 00:00:24,770
So one thing is, you need to have 
a thorough understanding

8
00:00:24,770 --> 00:00:28,480
of what kind of logics there might be, 
and which might be options.

9
00:00:28,480 --> 00:00:30,370
The first thing that we always understand,

10
00:00:30,370 --> 00:00:32,563
what I was talking about 
in the past two videos.

11
00:00:32,683 --> 00:00:36,213
It needs experience, so you want to read 
papers where people have done this.

12
00:00:36,215 --> 00:00:38,515
Examples were papers on 
declarative networking,

13
00:00:38,515 --> 00:00:40,235
on query relation, things like that.

14
00:00:40,466 --> 00:00:43,816
Some formal methods papers,
CAF, computated verification papers,

15
00:00:43,816 --> 00:00:45,381
and things like that.

16
00:00:45,381 --> 00:00:47,451
You have to really understand 
which problem you want to solve,

17
00:00:47,451 --> 00:00:50,971
specifically, are you trying to solve 
this kind of model checking problem?

18
00:00:50,974 --> 00:00:52,984
Or the satisfiability or validity problem?

19
00:00:52,984 --> 00:00:54,464
We've talked about this before.

20
00:00:54,464 --> 00:00:57,034
And is the language meant to answer 
questions about a static,

21
00:00:57,034 --> 00:00:58,544
or a dynamic system?

22
00:00:58,905 --> 00:01:00,825
And we're going to talk about 
these things more.

23
00:01:02,795 --> 00:01:05,075
Also, if you have multiple options,

24
00:01:05,075 --> 00:01:08,915
if you might develop your own language, 
this property of having

25
00:01:08,915 --> 00:01:12,915
alternative characterizations 
for a declarative language

26
00:01:12,915 --> 00:01:14,155
is useful and important.

27
00:01:14,424 --> 00:01:18,694
If you come up with your own thing, 
if you find thinking about the problem

28
00:01:18,694 --> 00:01:21,164
many different ways, 
you convert to a different language

29
00:01:21,164 --> 00:01:24,094
that end up being nearly the same, 
or exactly the same expressive power.

30
00:01:24,094 --> 00:01:27,124
You're probably on the right path, and 
you have actually done something right.

31
00:01:27,124 --> 00:01:30,424
It's not so easy to do that, 
but if you have a clear problem in mind,

32
00:01:30,424 --> 00:01:31,724
this may be possible to do.

33
00:01:31,724 --> 00:01:35,274
The other thing is if you have, example,
alternative algebraic characterization,

34
00:01:35,274 --> 00:01:38,104
and the logical characterization, 
you can use the logical one

35
00:01:38,104 --> 00:01:40,854
for people to spec, 
and really do it declaratively,

36
00:01:40,854 --> 00:01:43,874
and the algebraic one 
for actually executing or implementing.

37
00:01:43,874 --> 00:01:46,864
So there is, for example, 
for certain logics that actually,

38
00:01:46,864 --> 00:01:49,824
state-machine presentations 
and things like that,

39
00:01:49,824 --> 00:01:52,904
and all kinds of tricks, 
alternative to algebraic presentations,

40
00:01:52,904 --> 00:01:54,684
for doing things efficiently.

41
00:01:54,720 --> 00:01:57,750
Or actually doing them practically
so that no non-determinism is needed

42
00:01:57,750 --> 00:01:58,750
and things like that.

43
00:01:59,225 --> 00:02:00,935
So you should think about that.

44
00:02:01,465 --> 00:02:04,014
Is the complexity of the problems 
that we're dealing with acceptable?

45
00:02:04,014 --> 00:02:07,074
Some things are just undesirable,
others are a very high complexity.

46
00:02:07,074 --> 00:02:09,264
It might be too high, 
and then you might do a trade-off.

47
00:02:09,264 --> 00:02:11,904
Some slightly weaker language 
might do the job as well,

48
00:02:11,904 --> 00:02:13,784
and might have much lower complexity.

49
00:02:14,021 --> 00:02:16,461
And is the language simple 
and easy to understand?

50
00:02:16,461 --> 00:02:18,761
That's somehow a goal 
of the design as well.

51
00:02:19,091 --> 00:02:22,321
So regarding this model checking 
versus sat and validity problem,

52
00:02:22,321 --> 00:02:25,981
remember, let's call 
the structure a "database".

53
00:02:25,981 --> 00:02:28,841
Or a "snapshot" of the state 
of the system, a system description.

54
00:02:28,841 --> 00:02:30,241
That's really DATA.

55
00:02:30,241 --> 00:02:34,241
For example, the Kripke structures 
in the context of model logics.

56
00:02:34,241 --> 00:02:38,241
These can move to state,
and to a specing system.

57
00:02:38,611 --> 00:02:41,121
In a database, well the database 
is the database, obviously.

58
00:02:41,121 --> 00:02:43,251
So that's called a structure.

59
00:02:43,251 --> 00:02:45,728
And secondly, there's the formula 
in your logical language.

60
00:02:45,896 --> 00:02:47,466
And model checking is asking,

61
00:02:47,466 --> 00:02:50,446
given the input is a structured 
and a logical sentence,

62
00:02:50,446 --> 00:02:52,586
is the sentence true on that structure?

63
00:02:52,934 --> 00:02:55,124
That's model checking.
Is that what you need?

64
00:02:55,124 --> 00:02:57,364
For example, 
database queries are of that kind.

65
00:02:57,364 --> 00:03:00,774
Or checking whether a safety condition
is true on a finite-state system.

66
00:03:00,774 --> 00:03:04,794
Alternatively, satisfiability and validity
are kind of, static analysis problems,

67
00:03:05,894 --> 00:03:08,144
that don't need 
a structured database.

68
00:03:08,144 --> 00:03:09,554
You only look at the formula.

69
00:03:09,554 --> 00:03:14,214
Is the formula general for all possible 
structures satisfiable, or valid?

70
00:03:14,407 --> 00:03:17,267
And remember, 
there's an if and only if condition,

71
00:03:17,267 --> 00:03:19,537
they are dual satisfiability and validity.

72
00:03:19,912 --> 00:03:25,738
You've got this satifiability, exactly if,
if and only if it's not true,

73
00:03:25,738 --> 00:03:27,326
that's the negation of the form is valid.

74
00:03:27,797 --> 00:03:28,887
And visa versa.

75
00:03:28,887 --> 00:03:32,377
It's a theorem if the negation 
is unsatisfiable.

76
00:03:32,377 --> 00:03:35,857
So, you have to understand 
really what you need here.

77
00:03:36,423 --> 00:03:38,363
And sometimes there is trade-offs.

78
00:03:38,363 --> 00:03:41,013
You can actually sometimes 
lift one to the other.

79
00:03:41,455 --> 00:03:44,485
You might actually reduce 
sometimes a validity problem

80
00:03:44,485 --> 00:03:46,965
to a small checking problem,
or a satisfiability.

81
00:03:46,965 --> 00:03:49,239
So these transformations
may be possible.

82
00:03:49,239 --> 00:03:51,699
You have to consider that 
if you want to kind of engineer

83
00:03:51,699 --> 00:03:53,809
the complexity of the problem 
that you're dealing with.

84
00:03:53,809 --> 00:03:57,989
Regarding the static versus dynamic 
scenario thing, the idea is, static,

85
00:03:57,989 --> 00:03:59,935
there's a database, and you want 
to do something with the database.

86
00:03:59,935 --> 00:04:01,559
You want to ask questions about it.

87
00:04:01,559 --> 00:04:04,569
Or you've got a specification 
you want to ask a question about.

88
00:04:05,612 --> 00:04:08,457
For that, there might be 
a language like first-order logic.

89
00:04:08,987 --> 00:04:12,157
There's also various kind of slight 
generalization of first-order logic queue.

90
00:04:12,157 --> 00:04:14,957
For example, take first the logic, 
and add a special interpreted relation.

91
00:04:14,957 --> 00:04:18,067
For example, the transitive closure
relation for a given relation.

92
00:04:18,067 --> 00:04:20,867
So of course, you can implement 
this recursion in Datalog,

93
00:04:20,867 --> 00:04:22,227
but that might be overkill.

94
00:04:22,227 --> 00:04:26,087
You might still have something 
between FO and Datalog

95
00:04:26,087 --> 00:04:28,497
by, for example, taking FOTC.

96
00:04:28,497 --> 00:04:30,907
And that manages
languages and extensions.

97
00:04:30,907 --> 00:04:32,407
Actually no.

98
00:04:32,407 --> 00:04:35,787
If it is not a fragment of Datalog 
because it has negation,

99
00:04:36,107 --> 00:04:40,367
but FOTC is a fragment of Datalog 
with negation.

100
00:04:41,101 --> 00:04:43,631
And there's other such languages 
that goes beyond the scope of this lecture

101
00:04:43,631 --> 00:04:45,871
to talk about them, 
but whether such language

102
00:04:45,871 --> 00:04:47,861
might have been studied 
is a good way to start looking

103
00:04:47,861 --> 00:04:49,691
if you know what you want.

104
00:04:49,772 --> 00:04:52,702
Non-monotonic logics, we said, 
could be adding expressiveness

105
00:04:52,702 --> 00:04:55,132
to make very highly, expressive,
powerful queries.

106
00:04:55,132 --> 00:04:56,902
The alternative would be 
that you've got something

107
00:04:56,902 --> 00:04:58,062
dynamic to model the system.

108
00:04:58,062 --> 00:05:00,252
And then you might do this 
in two different ways, basically.

109
00:05:00,252 --> 00:05:03,382
You could do it via logical programming,
or you could do it via model logics,

110
00:05:03,382 --> 00:05:05,192
temporal/dynamic logics.

111
00:05:05,192 --> 00:05:07,082
So by logical programming, 
you could basically,

112
00:05:07,082 --> 00:05:08,922
it'd be like in declarative networking,
you model a system

113
00:05:08,922 --> 00:05:10,932
by actually doing
the computation of the system.

114
00:05:10,932 --> 00:05:13,072
Simulating the system step by step.

115
00:05:13,072 --> 00:05:15,142
And that could be done 
with Datalog-like language.

116
00:05:15,142 --> 00:05:17,292
Example of declarative routing, 
as we said.

117
00:05:17,292 --> 00:05:20,872
And the temporal/dynamic logic thing 
would be simplified

118
00:05:20,872 --> 00:05:24,612
at facilitating asking questions, 
static questions,

119
00:05:24,612 --> 00:05:26,222
about potentially 
infinite computations.

120
00:05:26,222 --> 00:05:27,692
Can something bad ever happen?

121
00:05:27,692 --> 00:05:31,452
Is some kind of safety or liveness 
property holding, and things like that.

122
00:05:31,564 --> 00:05:34,464
Now, choosing for the dynamic case 
between logic programming,

123
00:05:34,464 --> 00:05:38,334
and temporal/dynamic logic 
is the impression of how indirect

124
00:05:38,604 --> 00:05:41,644
and declarative you want 
your automated reasoning to be.

125
00:05:42,900 --> 00:05:47,150
So, remember simplicity the goal must be 
that it's simple, and not overkill.

126
00:05:47,160 --> 00:05:50,830
The logics must be corresponding 
to your needs.

127
00:05:51,550 --> 00:05:53,730
You have the potential, though.

128
00:05:53,730 --> 00:05:55,520
If you choose the right logic, 
that are a way of creating

129
00:05:55,520 --> 00:05:57,690
truly bug-free programs 
and specifications

130
00:05:57,690 --> 00:06:00,590
that could actually be possible, 
because the logic carries

131
00:06:00,590 --> 00:06:03,310
strong intuitions with them, 
and they are very small and succinct.

132
00:06:03,310 --> 00:06:06,980
So, while getting a hundred thousand 
line of code program

133
00:06:06,980 --> 00:06:09,630
perfectly bug-free might be 
completely unrealistic,

134
00:06:09,630 --> 00:06:12,160
but if the logical specification is short,
and it's very --

135
00:06:12,160 --> 00:06:14,083
the language is perfect 
for the purpose and so on,

136
00:06:14,083 --> 00:06:16,163
you can actually get things right.

137
00:06:16,308 --> 00:06:19,658
So, of course, a particular choice 
of logical language

138
00:06:19,658 --> 00:06:22,958
might not be right for the purpose,
but is it possible to fully comprehend

139
00:06:22,958 --> 00:06:25,168
the logical specification implied, 
and so on?

140
00:06:25,168 --> 00:06:27,978
Yes, because it has this strong intuition,
and this kind of declarative flavor.

141
00:06:28,257 --> 00:06:30,457
So it's possible 
to get things right that way.

142
00:06:30,457 --> 00:06:33,287
That's an important thing, 
and it's a key to this formal method,

143
00:06:33,287 --> 00:06:37,467
because if you want to do verification 
of a program by reducing the problem

144
00:06:37,467 --> 00:06:39,147
of doing this verification 
in another problem,

145
00:06:39,147 --> 00:06:41,357
writing these logical formulas, 
and doing the right thing with them,

146
00:06:41,357 --> 00:06:42,597
and that is as hard.

147
00:06:42,605 --> 00:06:44,385
You have not achieved anything.

148
00:06:47,023 --> 00:06:49,753
And yes, it's a matter of taste,
and a matter of experience.

149
00:06:49,753 --> 00:06:52,083
You want to capture the essence 
of the problem at hand.

150
00:06:52,256 --> 00:06:54,936
There's going to be some kind of elegance,
and mathematical beauty,

151
00:06:54,936 --> 00:06:57,036
and I'm not trying 
to make you theoreticians here

152
00:06:57,502 --> 00:06:59,072
of making the right choice.

153
00:06:59,317 --> 00:07:02,867
Look at some the examples you have seen 
in these past two videos,

154
00:07:03,497 --> 00:07:07,377
where a choice of language was 
commandeered to what you want to achieve.

155
00:07:07,377 --> 00:07:09,817
And it's really capturing the essence, 
the nature of the problems,

156
00:07:09,817 --> 00:07:12,047
so things get very easy and intuitive.

157
00:07:12,047 --> 00:07:15,007
You don't have to worry about 
the hassle of programming it anymore,

158
00:07:15,007 --> 00:07:16,857
because it's so natural.

159
00:07:17,084 --> 00:07:18,954
That's something that you have to aim for.

160
00:07:18,954 --> 00:07:21,414
And it's often possible to achieve, 
and then you've got a good solution.

161
00:07:21,414 --> 00:07:23,674
Often, you've got published research.

162
00:07:25,463 --> 00:07:27,583
Succinctness, language should be 
well-rounded,

163
00:07:27,583 --> 00:07:31,163
you don't want to have awkward exceptions,
you don't want to have things expressed

164
00:07:31,163 --> 00:07:33,493
with a language that don't mean anything 
in the system.

165
00:07:33,776 --> 00:07:36,956
And you want to understand what you 
want to gain and design for that.

166
00:07:36,956 --> 00:07:39,156
Is it user productivity?
Is it simple to use?

167
00:07:39,156 --> 00:07:41,656
Do you want to get new insights 
for making a system better?

168
00:07:41,656 --> 00:07:43,866
Do you want to just provide abstractions 
and clean interfaces?

169
00:07:43,866 --> 00:07:45,600
All of these can be achieved
if you do it right.

170
00:07:45,600 --> 00:07:47,530
It's a question of experience and taste.
