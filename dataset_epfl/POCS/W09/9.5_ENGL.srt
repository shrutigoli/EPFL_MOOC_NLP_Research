1
00:00:03,765 --> 00:00:05,935
Let's look more into classical logics.

2
00:00:05,935 --> 00:00:09,715
I already mentioned propositional logic, 
first-order logic, higher-order logic,

3
00:00:09,715 --> 00:00:11,095
and modal logics.

4
00:00:11,095 --> 00:00:14,175
I assume that you know propositional 
logic from other grad education.

5
00:00:14,175 --> 00:00:16,765
The idea there is there is propositions 
that are either true or false,

6
00:00:16,765 --> 00:00:18,265
and have no further structure.

7
00:00:18,265 --> 00:00:20,005
For example, like, "It currently rains".

8
00:00:20,005 --> 00:00:21,595
Or, "The ground is wet".

9
00:00:21,595 --> 00:00:24,645
And that can make logical statements 
about them using combinations like:

10
00:00:24,645 --> 00:00:27,945
<i>and, or, not</i>, and using 
these defined implications.

11
00:00:27,945 --> 00:00:30,405
For example, let's say, if it rains, 
then the ground is wet.

12
00:00:30,405 --> 00:00:32,765
And that would be a statement 
that is either true or false,

13
00:00:33,465 --> 00:00:35,915
over a set of decisions 
that are true or false.

14
00:00:36,610 --> 00:00:39,580
Now, first-order logic 
generalizes this by having,

15
00:00:39,580 --> 00:00:42,690
rather than propositions, predicates that

16
00:00:42,690 --> 00:00:44,440
basically can take, so to say,

17
00:00:44,440 --> 00:00:45,480
they have more structure--

18
00:00:45,480 --> 00:00:47,110
they are corresponding to relations.

19
00:00:47,110 --> 00:00:49,370
And that can quantify over variables.

20
00:00:49,370 --> 00:00:51,000
For example, I can say for <i>x</i>,

21
00:00:51,000 --> 00:00:53,790
if <i>x</i> is a student, then <i>x</i> loves POCS.

22
00:00:54,097 --> 00:00:56,807
And so I've got relations, 
you know relations,

23
00:00:56,807 --> 00:00:58,737
students, and POCS.

24
00:00:58,737 --> 00:01:00,437
Or you can think of them 
as sets if you like.

25
00:01:00,437 --> 00:01:03,317
And there's a universal quantifier 
"for all x" that says, you know,

26
00:01:03,317 --> 00:01:05,607
for all these potential values <i>x</i>,

27
00:01:05,607 --> 00:01:09,397
if <i>x</i> is a value in the student relation,

28
00:01:09,397 --> 00:01:11,237
then <i>x</i> loves POCS.

29
00:01:11,237 --> 00:01:13,377
Overall, conceptually,

30
00:01:13,847 --> 00:01:18,337
this "for all" quantifies, loops over,
if you like to call it that way,

31
00:01:18,907 --> 00:01:20,857
an infinite number 
of potential values for <i>x</i>,

32
00:01:20,857 --> 00:01:22,197
an unbounded number.

33
00:01:22,197 --> 00:01:23,927
But it is safe to do this,

34
00:01:23,927 --> 00:01:27,037
because you only care about 
those values that actually are in student.

35
00:01:27,037 --> 00:01:30,157
And only for those we have to check 
that they are also love POCS.

36
00:01:30,812 --> 00:01:35,322
Now higher-order logics generalize 
exactly this first-order predicate logic

37
00:01:35,322 --> 00:01:39,322
by having quantifiers that are not just 
about this little <i>x</i> individual values,

38
00:01:39,322 --> 00:01:41,122
but you can quantify entire relations.

39
00:01:41,122 --> 00:01:42,332
So I can ask, for example,

40
00:01:42,332 --> 00:01:45,802
"Does there exist a student relation 
that has certain properties?"

41
00:01:46,569 --> 00:01:48,869
So I can quantify both 
over these relations,

42
00:01:48,869 --> 00:01:52,869
and over these individual 
items, like students.

43
00:01:52,869 --> 00:01:54,709
And that would be second-order logic.

44
00:01:55,325 --> 00:01:58,505
And then there is so-called modal logics, 
and there's many different forms of those.

45
00:01:58,505 --> 00:02:00,085
There's for example, 
a so-called temporal logics,

46
00:02:00,085 --> 00:02:02,045
there's computation-tree logics, etc.

47
00:02:02,045 --> 00:02:05,465
And the idea there is, that I have--

48
00:02:05,465 --> 00:02:08,455
I can start with propositional logic, 
or I can start with first-order logic,

49
00:02:08,455 --> 00:02:10,805
and add so-to-call, modes of truth.

50
00:02:11,485 --> 00:02:13,775
It might sometimes be 
called a POCS operator.

51
00:02:13,775 --> 00:02:15,595
And it's a bit like a quantifier.

52
00:02:15,595 --> 00:02:17,675
And it has different depurations

53
00:02:18,195 --> 00:02:21,465
depending on what application 
I want to deal with.

54
00:02:21,825 --> 00:02:24,205
For example if it's let's say, 
a computaiton-tree logic,

55
00:02:24,205 --> 00:02:27,415
to talk about the logics 
in properties of programs.

56
00:02:27,925 --> 00:02:31,075
I don't want to go into this absolute 
definition of model logics here,

57
00:02:31,075 --> 00:02:33,205
but we're going to look 
into some examples later.

58
00:02:34,472 --> 00:02:37,382
So I will not say much more 
on propositional logic.

59
00:02:37,382 --> 00:02:38,752
I assume you know that very well.

60
00:02:38,752 --> 00:02:43,002
I'll talk about first-order logic now, 
because of it's potential as a DSL.

61
00:02:43,302 --> 00:02:48,492
So first, it's the most important, 
widely-studied logic in the mathematics.

62
00:02:48,492 --> 00:02:50,342
It's been studied since 
the 19th century,

63
00:02:50,342 --> 00:02:52,182
since Gottlob Frege.

64
00:02:52,689 --> 00:02:55,639
And there is one thing 
that is very elegant.

65
00:02:56,529 --> 00:02:59,259
It's deeply studied, there is huge 
amount of results known

66
00:02:59,739 --> 00:03:01,349
that can be useful in all kinds of ways.

67
00:03:01,349 --> 00:03:02,349
Of course, to some extent,

68
00:03:02,349 --> 00:03:04,399
this is for a theoretician to know those,

69
00:03:04,399 --> 00:03:06,829
but some of them are relatively 
straight-forward things,

70
00:03:06,829 --> 00:03:08,119
and they are very to use.

71
00:03:08,381 --> 00:03:09,741
One important thing is--

72
00:03:10,451 --> 00:03:12,671
That's an important observation 
that makes a logical language,

73
00:03:12,671 --> 00:03:14,601
in general, a language elegant,

74
00:03:14,751 --> 00:03:17,791
and somehow it feels well-rounded 
if it has these properties.

75
00:03:17,791 --> 00:03:21,791
But there is multiple alternative 
characterizations of the logics

76
00:03:21,791 --> 00:03:23,801
that look superficially very different,

77
00:03:23,801 --> 00:03:28,251
that might have different natural uses, 
and that are all exactly equivalent.

78
00:03:28,750 --> 00:03:30,210
Which somewhat lends credibility

79
00:03:30,210 --> 00:03:32,760
to the fact that this is a well-
rounded, well-chosen language,

80
00:03:32,760 --> 00:03:35,730
that might be just natural 
and good for something.

81
00:03:36,040 --> 00:03:40,040
So for example, with first-order logic, 
we know that there is this logic itself.

82
00:03:40,040 --> 00:03:43,000
Predicate logic as we 
have discussed it just now.

83
00:03:43,000 --> 00:03:47,000
In addition, also called calculus 
in the context of databases.

84
00:03:47,000 --> 00:03:48,550
Relational calculus.

85
00:03:48,550 --> 00:03:49,960
There's also something 
called relational algebra

86
00:03:49,960 --> 00:03:51,260
which is an algebraic language--

87
00:03:51,260 --> 00:03:52,100
a variable-free,

88
00:03:52,100 --> 00:03:53,750
quantification-free language,

89
00:03:53,750 --> 00:03:55,480
that is basically 
completely operator based.

90
00:03:55,480 --> 00:03:57,160
So you could think of it 
as a function language,

91
00:03:57,160 --> 00:03:59,630
but you could think also of it 
as an imperative language.

92
00:04:00,160 --> 00:04:03,550
Just a composition of operators
that does exactly the same thing--

93
00:04:03,550 --> 00:04:05,070
has exactly the same 
expressive power,

94
00:04:05,070 --> 00:04:06,400
which is kind of elegant.

95
00:04:06,400 --> 00:04:07,310
And then, for example,

96
00:04:07,310 --> 00:04:10,270
there is also a game 
classification of first-order logic

97
00:04:10,270 --> 00:04:12,040
called Ehrenfeucht–Fraïssé games, which--

98
00:04:12,040 --> 00:04:16,040
where you can play a game to have 
exactly the meaning of these logics.

99
00:04:16,728 --> 00:04:17,818
So why is that interesting?

100
00:04:17,818 --> 00:04:20,448
Well, the EF games are probably
not very practically important

101
00:04:20,448 --> 00:04:22,808
for systems people,
but they actually give

102
00:04:22,808 --> 00:04:24,668
a relatively straight-forward way

103
00:04:24,668 --> 00:04:27,238
to prove expressibility, 
or non-expressibility results.

104
00:04:27,238 --> 00:04:29,808
For example, that there is 
no hope that a certain property

105
00:04:29,808 --> 00:04:32,068
can be expressed in first-order logic.

106
00:04:32,068 --> 00:04:33,578
Which might be practically relevant.

107
00:04:33,578 --> 00:04:34,828
If you for example, try,

108
00:04:34,828 --> 00:04:37,258
since first-order logic is 
equivalent to relational algebra,

109
00:04:37,258 --> 00:04:39,348
express a certain property
in relational algebra

110
00:04:39,348 --> 00:04:42,638
to run a database system,
to test this property,

111
00:04:42,638 --> 00:04:43,788
it might just not be possible.

112
00:04:43,788 --> 00:04:44,918
And you might be able to prove this.

113
00:04:44,918 --> 00:04:48,288
So we don't look like somebody 
who hasn't achieved that goal,

114
00:04:48,288 --> 00:04:51,138
you could prove, to say, to your boss,
if they asked you to do this,

115
00:04:51,138 --> 00:04:53,688
that it's not your fault that 
you couldn't find that query,

116
00:04:53,688 --> 00:04:55,328
because it cannot exist.

117
00:04:56,193 --> 00:04:59,653
Now more important in practice is
the algebraic representation,

118
00:04:59,653 --> 00:05:02,583
because that's they way to actually 
execute things in practice.

119
00:05:02,583 --> 00:05:03,873
The logical characterization

120
00:05:03,873 --> 00:05:05,803
using universal and 
existential quantifiers

121
00:05:05,803 --> 00:05:08,743
over infinite domains of potential 
values for these variables,

122
00:05:08,743 --> 00:05:11,223
doesn't lead directly in a nice way

123
00:05:11,223 --> 00:05:12,663
to an implementation.

124
00:05:12,663 --> 00:05:14,153
An official implementation.

125
00:05:14,621 --> 00:05:19,351
However, there is this known translation 
in correspondence to relational algebra.

126
00:05:19,351 --> 00:05:21,131
And that is something that is 
very easy to implement.

127
00:05:21,131 --> 00:05:22,141
There is for example, joins,

128
00:05:22,141 --> 00:05:24,601
which are probably the most important--
most interesting operator,

129
00:05:24,611 --> 00:05:28,481
and we already have discussed 
joins in the locality module.

130
00:05:29,312 --> 00:05:34,532
So this kind of connection between these
different viewpoints of first-order logic

131
00:05:35,962 --> 00:05:38,392
makes it kind of versatile and useful.

132
00:05:38,392 --> 00:05:40,312
If I want to implement it 
in a practical system,

133
00:05:40,312 --> 00:05:43,212
I use an internal translation 
of the logic to relational algebra

134
00:05:43,212 --> 00:05:44,312
and execute the algebra--

135
00:05:44,312 --> 00:05:46,172
implement algebra operators as code.

136
00:05:46,956 --> 00:05:48,866
And I can optimize that way, for example.

137
00:05:48,866 --> 00:05:49,516
On the other hand,

138
00:05:49,516 --> 00:05:52,846
I still have this kind of declarative 
logical flavor of first-order logic

139
00:05:52,846 --> 00:05:55,466
that I can use to actually say 
what I want, to get at a result,

140
00:05:55,466 --> 00:05:56,546
rather than how to get it.

141
00:05:56,546 --> 00:06:00,026
While relational algebra feels more 
in flavor like how to get things.

142
00:06:02,094 --> 00:06:03,914
So that's also called a cryptomorphism.

143
00:06:03,914 --> 00:06:05,814
Those kind of surprising, 
alternative viewpoints--

144
00:06:05,814 --> 00:06:08,444
things that look superficially, 
completely different,

145
00:06:08,444 --> 00:06:11,124
actually have the same power--
the same thing.

146
00:06:11,400 --> 00:06:12,680
And that's kind of cool.

147
00:06:14,084 --> 00:06:16,194
Now let's look at SQL.

148
00:06:16,604 --> 00:06:19,814
Again, the probably most successful 
declarative language so far.

149
00:06:20,504 --> 00:06:23,214
Implemented in lots and lots 
of different systems.

150
00:06:23,214 --> 00:06:25,674
Not just database systems,
but particular database systems.

151
00:06:26,049 --> 00:06:27,539
So here's an SQL example.

152
00:06:27,539 --> 00:06:28,859
This SQL query that says,

153
00:06:28,859 --> 00:06:31,459
<i>SELECT s.id FROM student s</i>, etc.

154
00:06:31,459 --> 00:06:32,819
So this query asks for what?

155
00:06:32,819 --> 00:06:35,019
It asks for the IDs of students,

156
00:06:35,019 --> 00:06:37,559
such that doesn't exist 
for such a student.

157
00:06:38,386 --> 00:06:40,947
A tuple in the course taken table,

158
00:06:41,467 --> 00:06:44,978
which has that ID,
has the student ID,

159
00:06:45,099 --> 00:06:46,729
and the grade is less than four.

160
00:06:46,729 --> 00:06:48,529
It's return would be a failing grade.

161
00:06:48,529 --> 00:06:52,388
So that says, give me the students 
who have never failed a course.

162
00:06:52,388 --> 00:06:53,428
Give me the students,

163
00:06:53,428 --> 00:06:56,288
such that doesn't exist
a course for that student,

164
00:06:56,288 --> 00:06:58,078
which has been taken by the student,

165
00:06:58,078 --> 00:07:00,468
and omit that student of the bad grade.

166
00:07:02,061 --> 00:07:02,911
So what you see is--

167
00:07:02,911 --> 00:07:06,761
Well let me actually express 
the same query in first-order logic.

168
00:07:06,761 --> 00:07:09,011
Or relational calculus, 
it's just below there.

169
00:07:09,011 --> 00:07:10,841
And I've written, there's this 
so-called comprehension,

170
00:07:10,841 --> 00:07:13,181
that means kind of, 
set semantics with saying,

171
00:07:13,181 --> 00:07:15,781
give me the objects <i>s.id</i>, such that--

172
00:07:16,201 --> 00:07:17,731
That's the vertical bar.

173
00:07:17,731 --> 00:07:19,701
And then a first-order logic 
formula which says,

174
00:07:19,701 --> 00:07:21,741
<i>student(sid)</i> and not exists.

175
00:07:21,741 --> 00:07:23,161
I'm using completely plain syntax,

176
00:07:23,161 --> 00:07:25,601
and not universal quantifiers,
and existential quantifiers,

177
00:07:25,601 --> 00:07:27,721
which are these 
turned around E's and A's,

178
00:07:27,721 --> 00:07:28,861
as you might remember.

179
00:07:28,861 --> 00:07:31,381
And "not" is the kind of angle.

180
00:07:31,381 --> 00:07:33,121
I just write plain English here.

181
00:07:33,751 --> 00:07:35,911
So here, I show you the formula.

182
00:07:36,501 --> 00:07:38,511
First-order formula for that query.

183
00:07:38,511 --> 00:07:42,161
Again, this set notation 
in curly parenthesis,

184
00:07:42,571 --> 00:07:45,421
give me the <i>s.id's</i>, 
such that some property holds--

185
00:07:45,421 --> 00:07:48,041
which is written in first-order logic-- 
that's called a comprehension.

186
00:07:48,041 --> 00:07:49,531
Anyway, that's relational calculus,

187
00:07:49,531 --> 00:07:53,071
and the condition is 
first-order predicate logic.

188
00:07:53,071 --> 00:07:56,251
And you see the very strong 
correspondence of that

189
00:07:56,251 --> 00:07:57,781
with the SQL query.

190
00:07:58,098 --> 00:07:59,578
It's just like different syntax.

191
00:07:59,578 --> 00:08:00,548
And it's of course, very declarative.

192
00:08:00,548 --> 00:08:04,548
I don't say at all, how to compute it,
I say what I want to get.

193
00:08:05,254 --> 00:08:09,464
And these <i>WHERE NOT EXISTS</i> are 
a purely declarative way of saying this.

194
00:08:09,943 --> 00:08:13,713
I don't say, iterate over this, 
and exclude these things, check--

195
00:08:13,713 --> 00:08:15,453
You know, have an 
accumulated check that,

196
00:08:15,453 --> 00:08:18,023
while I iterate over these, 
I don't find any occurrence.

197
00:08:18,414 --> 00:08:20,464
I do this by saying <i>WHERE NOT EXISTS</i>.

198
00:08:20,837 --> 00:08:23,137
Abstractly, you cannot-- 
absolutely not implement this.

199
00:08:23,137 --> 00:08:25,327
But in practice, you can 
turn it to relational algebra,

200
00:08:25,327 --> 00:08:26,727
that's going to work very well.

201
00:08:28,314 --> 00:08:29,764
So let's talk about modal logics.

202
00:08:29,764 --> 00:08:31,854
I already said there is 
different kinds of modal logics.

203
00:08:31,854 --> 00:08:33,114
They all share some commonality,

204
00:08:33,114 --> 00:08:34,994
which is there is some 
notion of mode of truth,

205
00:08:34,994 --> 00:08:38,494
which is something like some 
modified form of a quantifier.

206
00:08:38,918 --> 00:08:41,528
And important examples 
are so-called temporal logics.

207
00:08:41,528 --> 00:08:43,598
There's actually whole 
families of temporal logics.

208
00:08:43,598 --> 00:08:46,448
In particular, there's different 
models and philosophies

209
00:08:46,448 --> 00:08:49,698
on whether time in the future is 
branching out, or is a linear sequence.

210
00:08:50,278 --> 00:08:54,038
If there's kind of some, 
quantum mechanical future, or not.

211
00:08:54,078 --> 00:08:57,348
And we've got this, 
not quantified, this mode.

212
00:08:57,348 --> 00:08:58,528
Let's call it "eventually".

213
00:08:58,528 --> 00:09:01,688
And we can talk about that, 
"eventually" being-- meaning that,

214
00:09:01,688 --> 00:09:05,148
at some point in the future, 
some statement is true.

215
00:09:05,148 --> 00:09:08,128
That means it might be very long,
finite path until then,

216
00:09:08,628 --> 00:09:10,418
and then, it becomes true.

217
00:09:10,418 --> 00:09:12,118
It doesn't mean that is always stays true,

218
00:09:12,118 --> 00:09:13,618
but at some point, 
it becomes true in the future,

219
00:09:13,618 --> 00:09:15,778
in one of these 
potential futures maybe.

220
00:09:15,778 --> 00:09:17,008
If it's branching out.

221
00:09:17,008 --> 00:09:19,218
And I've got the classical, 
let's say propositional logic,

222
00:09:19,218 --> 00:09:21,658
but you could also build temporal 
logics around first-order logic.

223
00:09:21,658 --> 00:09:23,978
Then it gets more complicated, 
but let's say that there's propositions.

224
00:09:23,978 --> 00:09:25,788
So I can build formulas, compositionally,

225
00:09:25,788 --> 00:09:29,068
out of propositions, boolean 
connectives, like not and or,

226
00:09:29,068 --> 00:09:30,588
and using this "eventually".

227
00:09:30,588 --> 00:09:33,128
And I can think of not 
eventually not, as "always".

228
00:09:33,128 --> 00:09:36,858
If it never can happen that it's not, 
that means it's always true.

229
00:09:37,695 --> 00:09:39,035
And with that, I can for example,

230
00:09:39,035 --> 00:09:41,195
express my safety 
conditions about a system.

231
00:09:41,195 --> 00:09:43,765
I can say, can a certain bad thing 
ever happen in the system?

232
00:09:44,868 --> 00:09:46,878
So that relates to logics of computation.

233
00:09:46,878 --> 00:09:48,268
So I can for example, so-called,

234
00:09:48,268 --> 00:09:51,008
computation-tree logic (CTL)
or dynamic logics,

235
00:09:51,008 --> 00:09:53,348
which are the foundation of much 
of Computer Aided Verification

236
00:09:53,348 --> 00:09:54,448
and formal methods.

237
00:09:54,448 --> 00:09:58,548
So I can use these to model systems, and
what happens in programs, computations.

238
00:09:58,548 --> 00:10:00,198
And I can then automatically verify

239
00:10:00,198 --> 00:10:03,098
certain statement and phrase 
in such logics, potentially.

240
00:10:03,098 --> 00:10:06,310
So the input to such a system 
would then be not just a formula,

241
00:10:06,310 --> 00:10:08,520
but also a model of the system.

242
00:10:08,520 --> 00:10:10,760
That is described separately, 
it's not a logical formula.

243
00:10:11,301 --> 00:10:13,451
And that is something 
we have to then verify.

244
00:10:14,224 --> 00:10:16,514
But there's also many other 
flavors of modal logic.

245
00:10:16,514 --> 00:10:18,974
For example, epistemic logic, 
which is the logic of knowledge.

246
00:10:18,974 --> 00:10:20,794
There I can model negative introspection.

247
00:10:20,794 --> 00:10:24,654
I can say, the mode of truth 
is "knows", and I can say,

248
00:10:24,654 --> 00:10:29,234
well, if "P" is not true, then 
I know that "P" is not true.

249
00:10:29,454 --> 00:10:33,349
So I've got full negative introspection, 
which is something very powerful.

250
00:10:33,814 --> 00:10:35,584
But that's some statement 
that I can make here.

251
00:10:35,842 --> 00:10:38,192
I can claim that, and can check maybe,

252
00:10:38,192 --> 00:10:41,372
if I have model of what I really know,
and what is true in the world.

253
00:10:43,054 --> 00:10:45,804
Let's talk about temporal logics,
in general, modal logics, a bit more--

254
00:10:45,804 --> 00:10:47,274
something a bit more about semantics.

255
00:10:47,274 --> 00:10:52,214
So the basic model, for at least 
propositional modal logics is,

256
00:10:52,214 --> 00:10:53,924
so-called Kripke structures.

257
00:10:53,924 --> 00:10:56,234
And they are kind of finite-state systems,

258
00:10:56,234 --> 00:10:59,281
that modeling for example, 
hardware, or protocols.

259
00:11:01,824 --> 00:11:02,674
So the idea is that,

260
00:11:02,674 --> 00:11:06,934
something like a finite-state machine, 
or a directed graph of the states,

261
00:11:06,934 --> 00:11:11,974
and there's transitions between them, 
and at each state, there is a node label,

262
00:11:11,974 --> 00:11:12,754
which is something--

263
00:11:12,754 --> 00:11:16,594
a set of propositions that true, 
and the others are false.

264
00:11:17,184 --> 00:11:19,824
So for example, in this example, 
I've got a state as one,

265
00:11:19,824 --> 00:11:21,844
and in state as one, 
<i>p</i> and <i>q</i> are true.

266
00:11:21,844 --> 00:11:23,894
For example, it rains, 
and the ground is wet.

267
00:11:24,628 --> 00:11:27,298
And in state as two, only <i>q</i> is true.

268
00:11:27,678 --> 00:11:31,078
So the ground is wet, 
but it doesn't rain anymore.

269
00:11:31,938 --> 00:11:33,168
And in state three,

270
00:11:33,168 --> 00:11:35,298
probably the ground is dry,
and it just started raining,

271
00:11:35,298 --> 00:11:36,838
so it's now raining,
but the ground it dry.

272
00:11:36,838 --> 00:11:38,638
Only <i>p</i> is true, for example.

273
00:11:39,210 --> 00:11:41,340
So this is a way of modelling a system.

274
00:11:42,119 --> 00:11:44,469
And then I can use a logical 
formula to reason about it.

275
00:11:44,469 --> 00:11:46,789
I can for example say, the statement,

276
00:11:47,389 --> 00:11:50,319
eventually <i>q</i> and next <i>o</i> is not <i>q</i>.

277
00:11:50,319 --> 00:11:54,869
So I've built this formula using 
the mode of truth "eventually".

278
00:11:55,802 --> 00:11:59,612
And "always" is another one, 
but it is really redundant,

279
00:11:59,612 --> 00:12:02,842
just like, for all in <i>EXISTS</i>, 
one can express the other.

280
00:12:03,075 --> 00:12:07,275
<i>EXISTS</i> is not for all not
and visa versa.

281
00:12:07,984 --> 00:12:09,634
For all is not <i>EXISTS</i> not.

282
00:12:09,634 --> 00:12:12,086
And here is to say with
modal operators, for example,

283
00:12:12,086 --> 00:12:15,216
"always" is something that is always true

284
00:12:15,216 --> 00:12:18,526
if there doesn't exist 
a future where it's not true.

285
00:12:19,456 --> 00:12:21,856
So I could think about that statement.

286
00:12:21,856 --> 00:12:24,566
"Eventually" talks about 
some time in the future.

287
00:12:25,506 --> 00:12:28,244
A finite set of steps in this 
finite-state machine--

288
00:12:28,244 --> 00:12:30,674
the current state, which 
might be the start state let's say.

289
00:12:30,674 --> 00:12:33,444
I will get to a point where 
that formula is true.

290
00:12:33,444 --> 00:12:35,124
That I say eventually the formula is true,

291
00:12:35,381 --> 00:12:36,601
<i>q</i> and blah blah.

292
00:12:36,675 --> 00:12:38,945
"Next" means something 
becomes true in the next state.

293
00:12:38,945 --> 00:12:42,525
And "always" means in all 
future steps, it will be true.

294
00:12:43,054 --> 00:12:45,314
And (Not <i>q</i>) means 
the opposite of <i>q</i>, of course.

295
00:12:47,434 --> 00:12:49,744
With temporal logics, 
or computation-tree logics,

296
00:12:49,744 --> 00:12:51,714
it can reason about 
possible computation paths.

297
00:12:52,111 --> 00:12:54,351
So in modal, my system 
is a Kripke structure,

298
00:12:54,351 --> 00:12:55,751
and then I can say things like,

299
00:12:55,751 --> 00:13:00,271
it's not true that eventually it terminates.

300
00:13:00,660 --> 00:13:02,990
Which is the same as, 
It doesn't always terminate.

301
00:13:03,398 --> 00:13:04,308
So we can--

302
00:13:04,308 --> 00:13:06,288
The question is, 
is this statement true?

303
00:13:06,288 --> 00:13:09,428
Can we reach a program state from 
which there is no way to terminate?

304
00:13:09,834 --> 00:13:12,404
Which would be, maybe 
a bad state in the system,

305
00:13:12,404 --> 00:13:14,507
halting problem is violated here,

306
00:13:14,867 --> 00:13:16,120
if you don't--

307
00:13:16,120 --> 00:13:18,234
if this is something that 
you don't want to happen.

308
00:13:18,234 --> 00:13:21,734
An operating system won't be 
able to execute forever,

309
00:13:22,236 --> 00:13:23,726
so that might be possible.

310
00:13:24,774 --> 00:13:26,954
So as I already said, 
"eventually" and "always"

311
00:13:26,954 --> 00:13:29,904
are modal analogs of existentially 
neurolistic quantification.

312
00:13:29,904 --> 00:13:33,004
And of course, it's convenient for 
encoding safety and liveness properties,

313
00:13:33,004 --> 00:13:36,574
and that can be used for automatic 
verification of system specifications.

314
00:13:38,180 --> 00:13:39,370
Think about that.

315
00:13:39,370 --> 00:13:41,400
I mean, how else would 
you want to do this?

316
00:13:41,400 --> 00:13:43,080
If you want to build a verification 
system where you can,

317
00:13:43,080 --> 00:13:44,600
kind of script what you want to verify,

318
00:13:44,600 --> 00:13:47,050
where you separate 
the question you want to ask

319
00:13:47,050 --> 00:13:49,390
about a system specification, 
from the specification.

320
00:13:49,722 --> 00:13:54,342
Would you want to write this query-- 
this question, so to say, in "C"?

321
00:13:54,841 --> 00:13:55,851
No, it would be terrible--

322
00:13:55,851 --> 00:13:58,301
writing in "C" would mean building 
the whole verification system

323
00:13:58,301 --> 00:13:59,841
by hand for every question.

324
00:14:00,975 --> 00:14:03,005
You could think of other languages.

325
00:14:03,005 --> 00:14:05,445
But not so clear how you would 
do that otherwise.

326
00:14:05,445 --> 00:14:07,855
It's just a very ideal solution here.

327
00:14:07,855 --> 00:14:11,165
So that's an example of a logic that 
is just perfect for it's purpose, really.

328
00:14:12,134 --> 00:14:14,194
Another example, 
I mentioned epistemic logic,

329
00:14:14,194 --> 00:14:15,664
where you can reason about knowledge.

330
00:14:15,664 --> 00:14:18,014
So you've got a mode of truth 
that is called "knows".

331
00:14:18,014 --> 00:14:19,524
It can do formulas that way.

332
00:14:19,524 --> 00:14:23,944
So I can for example, say, 
knows that doesn't know "P".

333
00:14:24,149 --> 00:14:26,419
So I know that I don't know 
proposition "P".

334
00:14:27,599 --> 00:14:29,929
For example, there will be again, 
this negative introspection thing.

335
00:14:30,525 --> 00:14:32,775
Or I can say, if teaches,

336
00:14:32,775 --> 00:14:36,775
then the prof knows that the student
knows the material-- the PROCS material.

337
00:14:36,775 --> 00:14:38,895
So this would be multimodal 
epistemic logic.

338
00:14:38,895 --> 00:14:39,825
There is two modes here.

339
00:14:39,825 --> 00:14:42,685
But in general, there could be more 
modes for every particular actor.

340
00:14:43,341 --> 00:14:46,167
Kprof and Kstudent doesn't correspond
to "eventually" and "always".

341
00:14:46,448 --> 00:14:48,889
They are at opposites, they are 
kind of orthogonal, so to say.

342
00:14:48,889 --> 00:14:52,069
So I can make multimodal logics,

343
00:14:52,069 --> 00:14:54,359
and this would be the example 
of epistemic logic.

344
00:14:55,328 --> 00:14:59,548
So let's say a few words about 
complexity of logics because in particular

345
00:14:59,548 --> 00:15:02,398
systems people will often tend to connect
logics with very slow computations,

346
00:15:02,398 --> 00:15:03,788
and in general, they are right.

347
00:15:03,788 --> 00:15:06,318
I mean, there is important problems 
about logic that we might want to solve,

348
00:15:06,318 --> 00:15:07,768
and they're just, very hard.

349
00:15:08,472 --> 00:15:12,062
And so there is multiple computation 
problems related to these logics,

350
00:15:12,062 --> 00:15:13,162
and it's important to understand

351
00:15:13,162 --> 00:15:15,092
which one is actually the one 
that you want to look at.

352
00:15:15,092 --> 00:15:18,169
Before we can tell whether 
this problem is actually hard or not.

353
00:15:18,169 --> 00:15:19,829
So, importantly, in particular,

354
00:15:19,829 --> 00:15:21,619
there is this so-called 
model checking problem.

355
00:15:22,072 --> 00:15:23,952
Then there is the satisfiability 
problem for logic,

356
00:15:23,952 --> 00:15:26,362
and there is the validity or
theoremhood problem.

357
00:15:27,347 --> 00:15:29,517
So model checking is something--

358
00:15:29,517 --> 00:15:31,267
a specific discipline of--

359
00:15:34,115 --> 00:15:35,235
verification,

360
00:15:36,155 --> 00:15:38,485
but don't think of it only that way.

361
00:15:38,485 --> 00:15:41,673
So, what is a model of a logical formula?

362
00:15:42,138 --> 00:15:44,758
It's state of the world 
in which the formula is true.

363
00:15:45,656 --> 00:15:47,966
So for example, in first-order logic--

364
00:15:48,442 --> 00:15:50,082
or let's say starting 
with propositional logic,

365
00:15:50,082 --> 00:15:52,602
if I've got a set of propositions true, 
and others being false,

366
00:15:52,602 --> 00:15:54,432
and on that world, so to say,

367
00:15:55,272 --> 00:15:57,322
a proposition formula is true, 
then this is a model.

368
00:15:57,322 --> 00:15:58,582
That state of the world.

369
00:15:58,936 --> 00:16:00,896
First-order logic in a relational 
database, so to say,

370
00:16:00,896 --> 00:16:05,346
can be a model if a boolean
first-order logic query, is true on it.

371
00:16:06,018 --> 00:16:07,318
So that's the idea here.

372
00:16:07,318 --> 00:16:11,318
So in a sense, query relation 
is model checking.

373
00:16:13,535 --> 00:16:16,485
Specifically, boolean queries, 
but that's a minor detail, actually,

374
00:16:16,485 --> 00:16:19,085
because you can always think 
of a query computing result

375
00:16:19,085 --> 00:16:21,265
as testing for every possible tuple.

376
00:16:21,265 --> 00:16:23,475
The boolean query is 
that tuple in the result.

377
00:16:23,475 --> 00:16:27,205
And that can rephrase the first-order 
logic formulas and it becomes a boolean.

378
00:16:27,222 --> 00:16:30,582
But satisfiability and and theoremhood 
are fundamentally different questions.

379
00:16:30,582 --> 00:16:32,542
Satisfiability is a question that says,

380
00:16:32,542 --> 00:16:35,492
give me a formula, but no database.

381
00:16:36,089 --> 00:16:37,429
No potential model.

382
00:16:38,203 --> 00:16:39,723
Is there a model at all?

383
00:16:39,723 --> 00:16:43,013
Is there some world in which 
this formula becomes true at all?

384
00:16:43,013 --> 00:16:45,193
Or is it unsatifiable? 
It can never become true.

385
00:16:46,239 --> 00:16:49,219
And the opposite is theoremhood.

386
00:16:49,219 --> 00:16:51,475
It's a bit like this not EXIST not thing.

387
00:16:52,272 --> 00:16:57,422
If something is unsatisfiable, 
then it's negation is a theorem.

388
00:16:57,964 --> 00:16:59,014
It's always true.

389
00:17:00,544 --> 00:17:04,104
So satisfiability and theoremhood 
are basically dual problems.

390
00:17:04,610 --> 00:17:07,390
And usually they are much 
harder than model checking.

391
00:17:07,390 --> 00:17:09,530
In some cases, they're 
exponentially harder,

392
00:17:09,530 --> 00:17:12,394
in other cases, one model 
checking might be very easy.

393
00:17:12,394 --> 00:17:14,784
And theoremhood and satisfiability 
might be undesirable.

394
00:17:14,784 --> 00:17:16,404
For example, in first-order logic, 
this is the case.

395
00:17:16,404 --> 00:17:20,684
First-order logic, evaluating it, 
model checking, is in <i>PTIME</i>,

396
00:17:20,684 --> 00:17:22,994
for a given fixed formula, 
given the database,

397
00:17:22,994 --> 00:17:24,664
you can do it very efficiently.

398
00:17:25,668 --> 00:17:28,828
However, satisfiability and theoremhood 
for first-order logic are undesirable.

399
00:17:29,631 --> 00:17:32,301
So you have to understand that, 
and it depends on the logic.

400
00:17:32,301 --> 00:17:33,411
There is many different modal logics,

401
00:17:33,411 --> 00:17:35,601
there is huge spectrum 
of complexity results,

402
00:17:35,601 --> 00:17:40,111
and this desirability result for logics, 
and it depends on the scenario,

403
00:17:40,111 --> 00:17:41,891
whether it's efficient or not.
