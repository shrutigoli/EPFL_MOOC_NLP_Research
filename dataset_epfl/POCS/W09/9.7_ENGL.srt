1
00:00:03,941 --> 00:00:05,046
Now let's look at Prolog.

2
00:00:05,046 --> 00:00:06,535
Prolog channelizes Datalog.

3
00:00:06,535 --> 00:00:09,704
The most important channelization is 
that it supports function symbols.

4
00:00:09,928 --> 00:00:10,887
What does this mean?

5
00:00:10,887 --> 00:00:14,308
Well function symbols are a 
way of taking so-called terms,

6
00:00:14,308 --> 00:00:16,719
which are things that you can 
build on constants, variables,

7
00:00:16,719 --> 00:00:19,000
and functions symbols and 
build larger terms of them.

8
00:00:19,000 --> 00:00:23,339
So, here's an example, we've got a 
right hand side in this first rule

9
00:00:23,339 --> 00:00:26,309
that just looks like Datalog 
p(x), <i>x</i> is a variable,

10
00:00:26,309 --> 00:00:28,046
and if p(x) is true,

11
00:00:28,046 --> 00:00:30,393
then actually you can infer
p of success of <i>x</i>

12
00:00:30,393 --> 00:00:32,391
and success now is a so-called 
function symbol.

13
00:00:32,681 --> 00:00:38,147
So succ(x) will build a new term, 
a new object, based on <i>x</i>,

14
00:00:38,147 --> 00:00:40,002
which is different from the 
other objects seen so far.

15
00:00:40,420 --> 00:00:42,644
Unless somebody else 
has computed succ(x).

16
00:00:42,820 --> 00:00:45,015
F corresponds a bit to the kind of 
binary relation success

17
00:00:45,015 --> 00:00:47,614
that we had before,
but you need to explicitly give

18
00:00:47,614 --> 00:00:49,162
this translation/relation.

19
00:00:49,162 --> 00:00:51,237
Here you actually can kind of 
compute it, let's say.

20
00:00:51,668 --> 00:00:55,059
So the idea would be that using 
also this kind of [inaudible],

21
00:00:55,059 --> 00:00:56,467
that you could compute bottom-up,

22
00:00:56,467 --> 00:00:58,168
conceptually the P relation consisting of

23
00:00:58,168 --> 00:01:00,202
1, s(1),

24
00:01:01,172 --> 00:01:07,226
s(s(1)), s(s(s(1))),

25
00:01:07,236 --> 00:01:09,250
and so on ad infinitum.

26
00:01:09,590 --> 00:01:11,714
This is going to be 
non-deterministic

27
00:01:11,714 --> 00:01:14,789
computation if you like 
to think of it as bottom-up

28
00:01:14,789 --> 00:01:18,289
or fixed points relation and you 
cannot use that in Prolog,

29
00:01:18,289 --> 00:01:21,112
but you can do a proof-theoretic 
semantics where you say--

30
00:01:21,524 --> 00:01:24,679
Question: is this fact-- 
this goal provable?

31
00:01:24,679 --> 00:01:27,465
Well the answer's going to be yes, 
by applying twice is the first rule

32
00:01:27,465 --> 00:01:29,027
and once the second rule.

33
00:01:29,039 --> 00:01:31,938
So if you give a proof of how 
it could be inferred.

34
00:01:32,656 --> 00:01:34,573
So there is a proof-theoretic semantics.

35
00:01:34,971 --> 00:01:36,739
However, it gets a bit worse.

36
00:01:36,739 --> 00:01:38,991
There's is truly imperative details 
in the full standard,

37
00:01:38,991 --> 00:01:40,723
there is in particular, 
there's this so-called cut,

38
00:01:40,723 --> 00:01:43,460
which allows you to basically kind of 
cut below the search, and so on,

39
00:01:43,460 --> 00:01:45,273
heuristics on and for--

40
00:01:45,273 --> 00:01:48,451
understanding that you really 
have to have a very precise,

41
00:01:48,451 --> 00:01:51,482
low-level model of how 
computation is done in Prolog.

42
00:01:51,482 --> 00:01:54,743
So Prolog is not declarative, 
it is however logic based

43
00:01:54,743 --> 00:01:56,124
and you can be very succinct.

44
00:01:56,289 --> 00:01:57,942
And it is a Turing-complete 
programming language.

45
00:01:57,942 --> 00:02:00,821
You can do anything you could do 
in C, in terms of expressive power.

46
00:02:02,399 --> 00:02:04,032
Is logic programming declarative?

47
00:02:04,032 --> 00:02:06,432
We already said that Datalog-- 
while the fixpoint, semantically,

48
00:02:06,432 --> 00:02:09,530
has an imperative flavor, 
but there is the declarative viewpoint,

49
00:02:09,530 --> 00:02:10,818
the model-theoretic semantics.

50
00:02:10,818 --> 00:02:13,570
Prolog doesn't have this, 
it's clearly not a declarative language,

51
00:02:13,570 --> 00:02:16,303
but is logic based, 
but it can be very succinct

52
00:02:16,303 --> 00:02:18,151
and it allows to abstract away 
from many things,

53
00:02:18,151 --> 00:02:20,978
and focus on the core 
of the computation.

54
00:02:23,387 --> 00:02:25,185
So here's an example, 
declarative networking.

55
00:02:25,185 --> 00:02:28,871
There is some important work there 
and research out that has been--

56
00:02:28,873 --> 00:02:31,937
have some impact in both 
databases and networking,

57
00:02:31,937 --> 00:02:33,911
and the idea there is that you've 
got some length that's essentially

58
00:02:33,911 --> 00:02:37,219
something a bit like Datalog 
and the most important thing

59
00:02:37,219 --> 00:02:38,716
is that there is an 
ability to create,

60
00:02:38,716 --> 00:02:40,588
essentially using Prolog 
function symbols--

61
00:02:40,588 --> 00:02:41,549
new timepoints,

62
00:02:41,549 --> 00:02:43,990
success is two timepoints basically.

63
00:02:43,990 --> 00:02:45,693
That way you can kind of 
model infinite protocols

64
00:02:45,693 --> 00:02:47,129
and infinite computations.

65
00:02:47,546 --> 00:02:49,745
And there is--

66
00:02:49,745 --> 00:02:51,834
I'm modelling that way 
I'm going to simplify things,

67
00:02:51,834 --> 00:02:54,145
I'm not adding anymore new 
syntax than is absolutely necessary.

68
00:02:54,145 --> 00:02:56,879
You can think of these two
standardized columns

69
00:02:56,879 --> 00:02:58,733
in each predicate, each relation,

70
00:02:58,733 --> 00:03:00,068
that model locations

71
00:03:00,068 --> 00:03:02,603
where some values is stored or received,

72
00:03:02,603 --> 00:03:04,819
and times for which 
they're first received.

73
00:03:04,819 --> 00:03:06,734
So at which they are present so to say.

74
00:03:07,038 --> 00:03:07,859
Here's an example.

75
00:03:07,859 --> 00:03:11,135
So in general, schemas look like that, 
there is a predicate

76
00:03:11,135 --> 00:03:14,481
there's some general application 
specific columns,

77
00:03:14,481 --> 00:03:16,823
and then there's a special 
destination column and a time column.

78
00:03:17,332 --> 00:03:19,329
And here's an example, 
it's kind of two examples--

79
00:03:19,329 --> 00:03:22,588
think of this kind of "No U" 
words in a mailing list.

80
00:03:22,786 --> 00:03:23,959
Somebody says some--

81
00:03:23,959 --> 00:03:26,062
makes an insult of the second guy,

82
00:03:26,062 --> 00:03:28,947
the second guy answers "No U" 
and the first answers "No U"

83
00:03:28,947 --> 00:03:33,218
and that leads to a kind of 
infinite repetition of "No U",

84
00:03:33,218 --> 00:03:36,861
where these guys kind of 
flood of "No U"s alternatively.

85
00:03:36,861 --> 00:03:38,441
So we can do this as follows.

86
00:03:38,602 --> 00:03:44,274
The rules at node1 would be that if node1 
sees a "No U" at a certain timepoint,

87
00:03:44,274 --> 00:03:48,622
then it sends a "No U" message to node2

88
00:03:49,312 --> 00:03:51,060
that will be received next time.

89
00:03:51,060 --> 00:03:53,970
So "No U" would be seen by 
node2 in the next timepoint,

90
00:03:53,970 --> 00:03:55,691
and at node2 it's the opposite,

91
00:03:55,691 --> 00:03:58,189
if it receives at some timepoint, <i>t</i>,

92
00:03:58,189 --> 00:04:00,221
and "No U" then it will 
send it to the next.

93
00:04:00,412 --> 00:04:02,651
So it will be in alternating timepoints,

94
00:04:02,651 --> 00:04:04,339
always a "No U" received 
at the other node.

95
00:04:04,752 --> 00:04:09,378
So there is-- if you can nicely compute, 
express protocols in a very succinct way,

96
00:04:10,188 --> 00:04:12,801
and for example there is, 
an example of what people have done,

97
00:04:12,801 --> 00:04:15,254
implemented distributed hash table,
a redistributable hash table,

98
00:04:15,254 --> 00:04:16,786
in about 200 lines of such code,

99
00:04:16,786 --> 00:04:18,546
rather than tens of thousands 
of lines of code in C.

100
00:04:19,389 --> 00:04:21,975
So it can be very succinct and 
Datalog-style syntax is convenient

101
00:04:21,975 --> 00:04:24,270
because you can emphasize on 
data and computation

102
00:04:24,270 --> 00:04:26,422
and the rules look simple locally, 
but overall,

103
00:04:26,422 --> 00:04:29,460
these 200 lines of code for the 
DHT is not readable--

104
00:04:29,949 --> 00:04:31,819
very succinct and very strange.

105
00:04:32,476 --> 00:04:34,246
Is it "declarative"?
I would say no.

106
00:04:34,246 --> 00:04:37,312
There is no declarative semantics, 
no moderated semantics in particular.

107
00:04:37,312 --> 00:04:38,830
It has this Prolog stash,
it's not really Datalog,

108
00:04:38,830 --> 00:04:40,515
despite what other people say.

109
00:04:40,515 --> 00:04:42,820
But it's an interesting language.

110
00:04:42,820 --> 00:04:44,817
Now let's look at nonmonotonic logics.

111
00:04:44,971 --> 00:04:46,672
We've defined Datalog as being--

112
00:04:46,672 --> 00:04:49,363
Datalog <i>rules</i> being first-order 
predicate logic

113
00:04:49,363 --> 00:04:51,515
minus negation or as the quantification,

114
00:04:51,530 --> 00:04:53,271
and adding recursion stat.

115
00:04:53,703 --> 00:04:55,900
So what is a nonmonotonic logic?

116
00:04:55,900 --> 00:04:58,769
Well, think about, first-order logic.

117
00:05:00,177 --> 00:05:02,315
It is actually nonmonotonic, 
but it's classical.

118
00:05:03,357 --> 00:05:08,085
So if you've got an input database,

119
00:05:08,085 --> 00:05:10,262
and you have to query
a result for it,

120
00:05:10,262 --> 00:05:14,168
for a given formula with 
negation let's say,

121
00:05:14,420 --> 00:05:16,718
now if you add more tuples to the input,

122
00:05:16,718 --> 00:05:20,138
sadly it could be the query result 
becomes less because of the negation.

123
00:05:21,260 --> 00:05:23,490
Think about it, too, 
we had an example where

124
00:05:24,015 --> 00:05:25,109
students--

125
00:05:25,519 --> 00:05:27,523
we've under-produced the students

126
00:05:27,523 --> 00:05:30,178
for which there doesn't exists a 
course that you have failed in.

127
00:05:30,917 --> 00:05:33,295
So I might get a resulting 
a student and now suddenly

128
00:05:33,295 --> 00:05:35,761
add a tuple, that they are 
failed in their course,

129
00:05:35,761 --> 00:05:37,642
suddenly there, a student 
has to go away from the result.

130
00:05:37,642 --> 00:05:41,283
So further logic with negation or 
quantification is nonmonotonic.

131
00:05:43,263 --> 00:05:47,287
Now Datalog is monotonic, 
if you add more stuff to the input,

132
00:05:47,287 --> 00:05:50,567
you always get at least as much 
as you had before in the result.

133
00:05:51,521 --> 00:05:55,539
Now it would be nice to have 
negation supported in Datalog

134
00:05:55,539 --> 00:05:57,172
because you might 
be able to express more,

135
00:05:57,695 --> 00:06:00,227
but can you get a decent, 
reasonable semantic somehow,

136
00:06:00,754 --> 00:06:02,654
that can understand for that.

137
00:06:03,079 --> 00:06:04,248
Well let's look at an example.

138
00:06:04,248 --> 00:06:05,696
Here I've got two rules,

139
00:06:05,696 --> 00:06:08,743
a program that has 
negation and recursion,

140
00:06:08,743 --> 00:06:10,628
it's propositional predicates here.

141
00:06:10,628 --> 00:06:12,589
I say if the ground isn't dry 
then it rains

142
00:06:12,589 --> 00:06:14,498
and if it doesn't rain 
then the ground is dry.

143
00:06:15,248 --> 00:06:19,634
Now, is both propositions 
being false a model,

144
00:06:19,634 --> 00:06:21,003
no because for either case,

145
00:06:21,003 --> 00:06:23,268
if one of them is false, 
then the other one must be true.

146
00:06:23,884 --> 00:06:25,503
This is two rules saying exactly this.

147
00:06:26,400 --> 00:06:29,331
So the empty set of 
propositions is not a model.

148
00:06:30,217 --> 00:06:33,725
Is a set where both Rains 
and GroundDry a model?

149
00:06:34,022 --> 00:06:35,659
Actually yes, why not?

150
00:06:35,659 --> 00:06:37,759
Because the bodies are not true, 
nothing contradicts it,

151
00:06:37,874 --> 00:06:40,910
but it's not a minimum model,
because for example,

152
00:06:40,910 --> 00:06:44,731
just Rains and GroundDry being false, 
Rains being true,

153
00:06:44,731 --> 00:06:46,526
GroundDry being false is actually a model.

154
00:06:46,675 --> 00:06:49,940
And GroundDry being false at-- 
so GroundDry being true

155
00:06:49,940 --> 00:06:51,745
and Rains being false is a model.

156
00:06:52,347 --> 00:06:53,471
So we've got these three models.

157
00:06:53,471 --> 00:06:57,671
And the problem is, 
there's two models that are--

158
00:06:57,671 --> 00:07:00,405
have just one element in it, 
one position being true.

159
00:07:01,157 --> 00:07:03,020
There's not a unique minimum model.

160
00:07:04,423 --> 00:07:05,605
So we've got alternatives.

161
00:07:05,605 --> 00:07:08,222
Among minimal models, 
this model where both Rains

162
00:07:08,222 --> 00:07:09,312
and GroundDry is for--

163
00:07:09,312 --> 00:07:12,562
it's not minimal in a sense,
it seems to be redundant,

164
00:07:12,562 --> 00:07:14,733
but the other two are minimal,

165
00:07:15,266 --> 00:07:16,125
but they're different.

166
00:07:16,133 --> 00:07:17,937
So that is strange because 
we had before,

167
00:07:17,937 --> 00:07:19,552
the semantic where 
single solution is there

168
00:07:19,552 --> 00:07:21,778
and now this is basically a-- 
disjunctive semantics.

169
00:07:21,778 --> 00:07:23,794
Either that is a good model, 
a good minimum model,

170
00:07:23,794 --> 00:07:25,713
or the other one is a good 
minimum model

171
00:07:25,713 --> 00:07:30,063
because there's two minimum models 
and in the end not a unique, single one.

172
00:07:30,734 --> 00:07:33,318
So that is strange, 
but there is ways of defining it.

173
00:07:33,318 --> 00:07:34,656
Basically the way we decided.

174
00:07:35,525 --> 00:07:38,556
You can give semantics to 
nonmonotonic logics

175
00:07:38,556 --> 00:07:39,967
with recursion

176
00:07:39,967 --> 00:07:42,190
where you basically have 
multiple, alternative, correct

177
00:07:42,190 --> 00:07:44,192
minimal model solutions.

178
00:07:44,462 --> 00:07:47,814
And that leads us to what is called 
answer set programming.

179
00:07:47,814 --> 00:07:52,280
So we will be talking about sets of 
answers that is the desirable solution.

180
00:07:52,280 --> 00:07:56,738
And for that you can actually take such 
Datalog with this additional negation

181
00:07:56,738 --> 00:07:59,504
and give it decent semantics 
and programming semantic

182
00:07:59,504 --> 00:08:01,386
where you have extreme 
high expressive power

183
00:08:01,386 --> 00:08:02,688
only for model checking, so to say.

184
00:08:02,688 --> 00:08:03,566
For query relation.

185
00:08:03,566 --> 00:08:06,904
Or you can actually conveniently, 
nicely, very succinctly express

186
00:08:08,924 --> 00:08:10,124
in P-complete problems.

187
00:08:10,124 --> 00:08:12,008
Here for example, I'll show you
some kind of so-called negation

188
00:08:12,008 --> 00:08:13,892
with some kind of so-called 
negation in the head,

189
00:08:13,892 --> 00:08:17,357
or-- but this could also be modeled
by using this double negation,

190
00:08:17,357 --> 00:08:18,528
as we have above here.

191
00:08:18,528 --> 00:08:20,114
I modeled free colorability.

192
00:08:20,114 --> 00:08:22,271
I'm saying, well, if it's a node,

193
00:08:22,271 --> 00:08:24,188
it must be labeled: red, blue or green.

194
00:08:24,188 --> 00:08:25,181
So <i>x</i> is a variable,

195
00:08:25,181 --> 00:08:27,854
and red, blue, and green 
are constants.

196
00:08:27,854 --> 00:08:30,758
And there is actually a constraint, the 
constraint is a body of an empty head.

197
00:08:30,758 --> 00:08:32,685
That means if the body becomes true,

198
00:08:32,685 --> 00:08:35,153
then the falsity is inferred,

199
00:08:35,153 --> 00:08:36,641
that means it destroys that model.

200
00:08:37,431 --> 00:08:38,621
It could do this in 
different ways as well,

201
00:08:38,621 --> 00:08:42,273
and then say it's not allowed that 
two neighboring edges have the same color.

202
00:08:42,626 --> 00:08:45,823
So this is a two-liner, 
a very declarative definition

203
00:08:46,659 --> 00:08:49,621
of free colorability and 
a P-complete problem.

204
00:08:49,621 --> 00:08:51,573
So by adding this negation together,

205
00:08:51,573 --> 00:08:52,917
it's extremely high 
power you have--

206
00:08:52,917 --> 00:08:54,914
and this kind of alternative 
minimal model

207
00:08:54,914 --> 00:08:56,719
which is kind of weird 
and sounds undesirable,

208
00:08:56,719 --> 00:08:59,586
is actually a very good way of 
finding solutions to

209
00:08:59,586 --> 00:09:01,968
and P-complete problems where
there might be exponential alternatives.

210
00:09:03,124 --> 00:09:04,941
And you see it is declarative.

211
00:09:04,941 --> 00:09:07,446
I would really-- would say that 
a classical textbook definition

212
00:09:07,446 --> 00:09:09,692
of free colorability is really 
whatever is just written down

213
00:09:09,692 --> 00:09:10,929
in two very short rules.

214
00:09:11,362 --> 00:09:14,847
So it's actually a very interesting 
solution for a space of complicated,

215
00:09:14,847 --> 00:09:18,302
potentially analytical queries
that you can express.

216
00:09:18,462 --> 00:09:20,931
Of course, in general, it's very hard 
to evaluate these queries,

217
00:09:20,931 --> 00:09:23,566
but you can solve hard problems, 
there is no way around it

218
00:09:23,566 --> 00:09:25,919
and you can use such language 
to build a channels solver,

219
00:09:25,919 --> 00:09:28,459
for example, in P-complete 
problems for that.

220
00:09:29,379 --> 00:09:32,345
And that's an interesting-- 
another space for declarative languages.
