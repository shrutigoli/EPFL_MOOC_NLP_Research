1
00:00:04,363 --> 00:00:07,355
You can't have a week on 
data centers without

2
00:00:07,480 --> 00:00:09,299
a dedicated module on the CAP theorem.

3
00:00:10,178 --> 00:00:12,565
But because you'll be reading about 
the CAP theorem this week

4
00:00:12,751 --> 00:00:14,640
I'm going to focus on 
the history of the CAP theorem,

5
00:00:14,825 --> 00:00:16,047
which is actually quite interesting.

6
00:00:16,487 --> 00:00:18,963
It's interesting because it was 
not introduced in the paper,

7
00:00:19,088 --> 00:00:20,625
it was actually not 
introduced as a theorem,

8
00:00:21,126 --> 00:00:26,093
it was rather postulated by Eric Brewer
in his keynote at PODC in the year 2000.

9
00:00:27,374 --> 00:00:29,893
And Eric first made the comparison 
between ACID and BASE.

10
00:00:30,169 --> 00:00:33,617
ACID are the traditional properties 
associated with database transactions.

11
00:00:34,432 --> 00:00:36,685
And BASE is the alternative 
set of properties that

12
00:00:36,685 --> 00:00:38,820
we associate with Internet scale services.

13
00:00:39,269 --> 00:00:43,752
And BASE stands for basically available,
soft state, eventually consistent systems.

14
00:00:44,726 --> 00:00:48,240
Basic availability means that the state, 
the site should always be up

15
00:00:48,240 --> 00:00:50,219
so the yield should be greater 
than zero at all times.

16
00:00:51,190 --> 00:00:55,118
Soft state means that the website operates
on some soft state that can be

17
00:00:55,118 --> 00:00:59,598
reconstructed by some hard state
that may be stored elsewhere,

18
00:00:59,851 --> 00:01:02,013
maybe using the transactional system.

19
00:01:02,451 --> 00:01:06,370
A shopping cart is a great example 
of soft state at any commerce website.

20
00:01:07,343 --> 00:01:09,917
And eventual consistency means that 
different clients may see

21
00:01:09,917 --> 00:01:13,494
slightly different versions of the data 
at any point in time.

22
00:01:13,901 --> 00:01:15,534
For example, you may have 
a slightly different view

23
00:01:15,534 --> 00:01:19,243
of the number of seats that 
may be available for a concert

24
00:01:19,243 --> 00:01:22,036
as you are shopping through it 
on an Internet website.

25
00:01:23,322 --> 00:01:25,298
And the difference between 
an ACID and BASE is helpful

26
00:01:25,298 --> 00:01:27,936
to understand the context 
of the CAP theorem.

27
00:01:28,533 --> 00:01:32,417
Now as I mentioned, Brewer did not prove 
the CAP theorem he simply postulated,

28
00:01:32,707 --> 00:01:34,581
he had an intuition that this was true.

29
00:01:35,365 --> 00:01:39,162
This was actually later formally proved 
by two computer scientists

30
00:01:39,162 --> 00:01:41,672
Gilbert and Lynch a few years later.

31
00:01:42,297 --> 00:01:44,338
(Edouard) So what do we mean 
by the CAP theorem?

32
00:01:44,996 --> 00:01:47,754
Well it looks like the relationship 
between three properties

33
00:01:48,222 --> 00:01:49,541
of a shared data system.

34
00:01:50,011 --> 00:01:53,115
"C" stands for consistency, 
the properties equivalent

35
00:01:53,115 --> 00:01:56,095
to having a single up to date 
copy of the data.

36
00:01:57,290 --> 00:02:00,607
"A" stands for availability 
and specifically the ability

37
00:02:00,866 --> 00:02:02,162
for updates to complete.

38
00:02:02,944 --> 00:02:05,142
"P" stands for partition tolerance.

39
00:02:05,513 --> 00:02:08,622
The ability to operate in the 
presence of network partitions.

40
00:02:09,875 --> 00:02:12,164
And so the CAP theorem 
is that you have to chose.

41
00:02:12,639 --> 00:02:14,707
You get two out of three,
but not all three.

42
00:02:15,490 --> 00:02:16,740
And let's see what that means.

43
00:02:16,898 --> 00:02:19,628
So maybe you don't care about 
partition tolerance or otherwise

44
00:02:19,628 --> 00:02:22,512
assume that you can engineer your solution
to avoid them in practice.

45
00:02:23,765 --> 00:02:26,870
Now if that's the case, you can ensure 
both consistency and availability

46
00:02:26,870 --> 00:02:28,658
of a shared data system.

47
00:02:29,318 --> 00:02:32,268
As a matter of fact, classic databases 
use this as a design pattern.

48
00:02:32,611 --> 00:02:36,475
For example, two phase commit allows 
two distribute databases

49
00:02:36,475 --> 00:02:39,076
to show a consistent view of data.

50
00:02:40,020 --> 00:02:43,597
Unfortunately, two phase commit 
cannot successfully commit a transaction

51
00:02:43,756 --> 00:02:46,951
that involves multiple sites 
in the presence of a network partition.

52
00:02:47,612 --> 00:02:48,587
It would just hang.

53
00:02:49,120 --> 00:02:52,318
Now if you assume that network partitions 
can occur one design consequence

54
00:02:52,537 --> 00:02:54,233
would be to give up on availability.

55
00:02:55,269 --> 00:02:57,934
Majority protocols, for example, 
are designed to operate

56
00:02:57,934 --> 00:03:01,194
as long as a majority or quorum 
can achieve consensus.

57
00:03:02,580 --> 00:03:05,309
Of course in that case 
the minority partition

58
00:03:05,309 --> 00:03:06,877
can no longer make updates.

59
00:03:07,284 --> 00:03:10,263
But if you think about it this 
design point makes a lot of sense

60
00:03:10,263 --> 00:03:14,214
in particular if the partitioning is due 
to the lack of availability

61
00:03:14,214 --> 00:03:15,529
of the entire minority site.

62
00:03:16,252 --> 00:03:19,047
In that case the network partition 
is actually a symptom

63
00:03:19,237 --> 00:03:23,187
and the issue of the availability of data 
in the minority site is actually

64
00:03:23,187 --> 00:03:27,010
a non-issue because 
the site itself is not present.

65
00:03:28,360 --> 00:03:31,308
Now the problem with that design pattern 
is actually its implementation cost.

66
00:03:31,620 --> 00:03:33,004
Consistency is expensive.

67
00:03:33,630 --> 00:03:37,706
Consistency across site is particularly 
expensive because of the latency

68
00:03:37,706 --> 00:03:39,963
that is involved in the protocols.

69
00:03:40,589 --> 00:03:44,189
Now when consistency is expensive 
and network partitions can occur,

70
00:03:45,017 --> 00:03:47,899
the alternative design point is 
to actually give up on consistency

71
00:03:47,899 --> 00:03:51,482
altogether and design a system 
that actually is always available.

72
00:03:52,393 --> 00:03:54,808
And there are many examples of systems 
that show those traits.

73
00:03:55,688 --> 00:03:58,448
DNS systems, Web caching 
are still relevant today.

74
00:03:59,326 --> 00:04:01,991
In his talk, Brewer used Coda
as an example.

75
00:04:02,271 --> 00:04:04,934
Coda was a distributed file system 
that supported

76
00:04:05,125 --> 00:04:07,159
offline operations and reconciliation.

77
00:04:08,007 --> 00:04:11,018
If Eric were to give the same talk today
he would probably list Dropbox

78
00:04:11,018 --> 00:04:14,002
rather than Coda 
as an example of a system

79
00:04:14,002 --> 00:04:16,923
that gives up consistency 
for availability.

80
00:04:17,957 --> 00:04:21,092
So this was the history 
and the textbook level

81
00:04:21,343 --> 00:04:23,135
explanation of the CAP theorem.

82
00:04:23,481 --> 00:04:27,772
There are actually lots of nuances 
in this topic and I encourage you

83
00:04:27,772 --> 00:04:31,692
to read Eric's paper on his retrospective
on the CAP theorem.
