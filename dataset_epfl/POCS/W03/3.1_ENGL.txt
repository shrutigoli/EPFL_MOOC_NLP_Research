In this lecture, we're going to talk about names, which are a fundamental building block of computer systems.
We will start by asking what a name is, and we will also look at examples of different naming schemes.
What is a name?
Let us look at a few examples.
A memory address is a name that refers to a memory cell.
An IP address is a name that refers to a network interface.
A web URL is a name that refers to a web object.
And an email address is a name that refers to an email account.
So, a name is a way to refer to a resource.
Why do systems use names?
One obvious use is for specifying which resource to read from or write to.
But there are other, more subtle uses.
Suppose we have an object stored in memory which stores information about a network architecture lab.
And we also have objects that store information about different members of the lab.
These objects need to communicate between them.
In particular, the lab object on the left needs to access the content of the member objects on the right.
One way to do that is to copy the contents of the member objects into the lab object.
Another way is to assign names to the member objects, and store only these names into the lab object.
Now whenever the lab object needs to access the member objects, it can use their names to find them.
For those of you who program a lot, this example is akin to passing a function arguments by value versus by reference.
And by the way, a C++ pointer is a name for the object it is pointing to.
So, systems use names as communication and organization tools.
We said earlier that an IP address is a name that refers to a network interface.
But there exists another way to refer to a network interface.
A DNS name.
However, a DNS name does not point directly to a network interface.
It points to an IP address which then points to a network interface.
So an IP address can be a name that points to a network interface, and at the same time, the value of a DNS name.
In this scenario, we are using a name, in particular an IP address, as an indirection tool.
Why is this useful?
Well, for one thing, it allows us to dynamically change the network interface that www.epfl.ch refers to by changing only the IP address that it is mapped to.
And this is the basic idea behind dynamic DNS.
It changes DNS name to value mappings so as to optimize network performance.
In this situation, the act of choosing one of all possible values, and mapping a name to it, is called "binding".
Now consider the set of all possible 
DNS names on the left, the set of all possible 
IP addresses on the right, and the DNS system that maps names to IP addresses in the middle.
We call the set on the left, a "namespace", the set on the right, a "universe of values", and the system that does the mapping, a "name-mapping algorithm", or a "resolver".
In the case of dynamic DNS, to decide which value to map a name to, the DNS system needs extra information.
For example, the location of the requester.
We call this extra information,
"context".
Let's look at a couple more examples of naming schemes.
A phone book maps human names to phone numbers.
In the United States at least, there is a different phone book per county, so each county is a different context for this naming scheme.
To get back to computer systems, a page table maps virtual memory addresses to physical memory addresses.
And there is typically a different page table per process.
So each process is now a different context.
So, a naming scheme exposes the following interface to its users.
The RESOLVE primitive returns the value of a given name in a given context.
The BIND primitive maps a given name, to a given value, in a given context, and it returns the status of the binding; typically a success, or failure.
Some naming schemes support other primitives as well.
ENUMERATE returns a list of map names, and sometimes also a list of map values in a given context.
And the COMPARE primitive returns 
"true" or "false", depending on whether two given names are the same.
And we will later see what "the same" means.
So, a name is a way to refer to a resource.
Computer systems use names as communication or organization tools, and also as indirection tools to make the connection between two different objects more flexible.
Finally, designing a naming scheme involves choosing a namespace, choosing a universe of values, and also choosing a mapping algorithm that maps names or values.
