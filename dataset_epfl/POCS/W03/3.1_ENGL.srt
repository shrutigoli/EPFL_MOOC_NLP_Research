1
00:00:03,788 --> 00:00:06,178
In this lecture, we're going 
to talk about names,

2
00:00:06,178 --> 00:00:08,748
which are a fundamental building block 
of computer systems.

3
00:00:09,145 --> 00:00:13,095
We will start by asking what a name is, 
and we will also look at examples

4
00:00:13,095 --> 00:00:14,985
of different naming schemes.

5
00:00:15,719 --> 00:00:17,159
What is a name?

6
00:00:17,527 --> 00:00:19,187
Let us look at a few examples.

7
00:00:20,331 --> 00:00:23,911
A memory address is a name 
that refers to a memory cell.

8
00:00:24,209 --> 00:00:27,819
An IP address is a name 
that refers to a network interface.

9
00:00:28,259 --> 00:00:31,639
A web URL is a name
that refers to a web object.

10
00:00:32,059 --> 00:00:35,279
And an email address is a name
that refers to an email account.

11
00:00:35,744 --> 00:00:40,164
So, a name is a way 
to refer to a resource.

12
00:00:42,073 --> 00:00:44,043
Why do systems use names?

13
00:00:44,056 --> 00:00:48,056
One obvious use is for specifying 
which resource to read from or write to.

14
00:00:48,056 --> 00:00:50,226
But there are other, more subtle uses.

15
00:00:50,771 --> 00:00:54,591
Suppose we have an object stored in memory
which stores information

16
00:00:54,591 --> 00:00:56,471
about a network architecture lab.

17
00:00:56,747 --> 00:00:59,657
And we also have objects 
that store information

18
00:00:59,657 --> 00:01:01,457
about different members of the lab.

19
00:01:01,878 --> 00:01:04,298
These objects need to 
communicate between them.

20
00:01:04,581 --> 00:01:08,121
In particular, the lab object on the left 
needs to access the content

21
00:01:08,121 --> 00:01:09,941
of the member objects on the right.

22
00:01:11,150 --> 00:01:14,842
One way to do that is 
to copy the contents

23
00:01:14,842 --> 00:01:17,874
of the member objects into the lab object.

24
00:01:18,974 --> 00:01:23,398
Another way is to assign names 
to the member objects,

25
00:01:23,398 --> 00:01:26,698
and store only these names 
into the lab object.

26
00:01:26,979 --> 00:01:30,119
Now whenever the lab object 
needs to access the member objects,

27
00:01:30,119 --> 00:01:31,859
it can use their names to find them.

28
00:01:32,371 --> 00:01:35,361
For those of you who program a lot, 
this example is akin

29
00:01:35,361 --> 00:01:39,361
to passing a function arguments 
by value versus by reference.

30
00:01:39,682 --> 00:01:44,712
And by the way, a C++ pointer is 
a name for the object it is pointing to.

31
00:01:45,025 --> 00:01:49,875
So, systems use names 
as communication and organization tools.

32
00:01:52,416 --> 00:01:56,786
We said earlier that an IP address is a 
name that refers to a network interface.

33
00:01:57,188 --> 00:02:00,318
But there exists another way 
to refer to a network interface.

34
00:02:00,523 --> 00:02:02,033
A DNS name.

35
00:02:02,033 --> 00:02:06,189
However, a DNS name does not 
point directly to a network interface.

36
00:02:06,189 --> 00:02:10,179
It points to an IP address 
which then points to a network interface.

37
00:02:10,534 --> 00:02:15,014
So an IP address can be a name 
that points to a network interface,

38
00:02:15,324 --> 00:02:18,764
and at the same time, 
the value of a DNS name.

39
00:02:19,317 --> 00:02:22,877
In this scenario, we are using a name, 
in particular an IP address,

40
00:02:22,877 --> 00:02:24,677
as an indirection tool.

41
00:02:25,946 --> 00:02:27,426
Why is this useful?

42
00:02:27,633 --> 00:02:32,443
Well, for one thing, it allows us to 
dynamically change the network interface

43
00:02:32,443 --> 00:02:36,864
that www.epfl.ch refers to 
by changing only the IP address

44
00:02:36,864 --> 00:02:38,174
that it is mapped to.

45
00:02:38,461 --> 00:02:40,961
And this is the basic idea 
behind dynamic DNS.

46
00:02:41,121 --> 00:02:45,311
It changes DNS name to value mappings 
so as to optimize network performance.

47
00:02:45,869 --> 00:02:50,259
In this situation, the act of choosing 
one of all possible values,

48
00:02:50,259 --> 00:02:53,659
and mapping a name to it, 
is called "binding".

49
00:02:57,263 --> 00:03:00,496
Now consider the set of all possible 
DNS names on the left,

50
00:03:00,736 --> 00:03:03,146
the set of all possible 
IP addresses on the right,

51
00:03:03,146 --> 00:03:06,906
and the DNS system that maps names 
to IP addresses in the middle.

52
00:03:07,386 --> 00:03:10,056
We call the set on the left, 
a "namespace",

53
00:03:10,056 --> 00:03:12,626
the set on the right, 
a "universe of values",

54
00:03:12,626 --> 00:03:15,866
and the system that does the mapping, 
a "name-mapping algorithm",

55
00:03:15,866 --> 00:03:17,206
or a "resolver".

56
00:03:18,276 --> 00:03:21,812
In the case of dynamic DNS, 
to decide which value to map a name to,

57
00:03:22,062 --> 00:03:24,008
the DNS system needs extra information.

58
00:03:24,008 --> 00:03:26,366
For example, the location 
of the requester.

59
00:03:26,770 --> 00:03:29,470
We call this extra information,
"context".

60
00:03:31,935 --> 00:03:34,615
Let's look at a couple more 
examples of naming schemes.

61
00:03:35,037 --> 00:03:39,127
A phone book maps human names
to phone numbers.

62
00:03:39,319 --> 00:03:42,339
In the United States at least, 
there is a different phone book

63
00:03:42,339 --> 00:03:45,989
per county, so each county 
is a different context

64
00:03:46,319 --> 00:03:47,639
for this naming scheme.

65
00:03:49,316 --> 00:03:54,456
To get back to computer systems, 
a page table maps virtual memory addresses

66
00:03:54,456 --> 00:03:56,206
to physical memory addresses.

67
00:03:56,312 --> 00:03:59,502
And there is typically a different 
page table per process.

68
00:03:59,502 --> 00:04:02,002
So each process is now 
a different context.

69
00:04:03,844 --> 00:04:07,844
So, a naming scheme exposes 
the following interface to its users.

70
00:04:08,569 --> 00:04:11,289
The RESOLVE primitive returns 
the value of a given name

71
00:04:11,289 --> 00:04:12,719
in a given context.

72
00:04:12,822 --> 00:04:16,732
The BIND primitive maps a given name, 
to a given value, in a given context,

73
00:04:16,732 --> 00:04:20,302
and it returns the status of the binding; 
typically a success, or failure.

74
00:04:20,727 --> 00:04:23,277
Some naming schemes support 
other primitives as well.

75
00:04:23,277 --> 00:04:26,087
ENUMERATE returns 
a list of map names,

76
00:04:26,087 --> 00:04:29,590
and sometimes also a list of map values 
in a given context.

77
00:04:29,840 --> 00:04:32,940
And the COMPARE primitive returns 
"true" or "false", depending on whether

78
00:04:32,940 --> 00:04:34,900
two given names are the same.

79
00:04:34,900 --> 00:04:37,390
And we will later see 
what "the same" means.

80
00:04:37,741 --> 00:04:41,711
So, a name is a way 
to refer to a resource.

81
00:04:41,950 --> 00:04:45,710
Computer systems use names 
as communication or organization tools,

82
00:04:45,710 --> 00:04:49,220
and also as indirection tools 
to make the connection between

83
00:04:49,220 --> 00:04:51,210
two different objects more flexible.

84
00:04:51,577 --> 00:04:55,337
Finally, designing a naming scheme 
involves choosing a namespace,

85
00:04:55,647 --> 00:04:59,327
choosing a universe of values, 
and also choosing a mapping algorithm

86
00:04:59,327 --> 00:05:01,477
that maps names or values.
