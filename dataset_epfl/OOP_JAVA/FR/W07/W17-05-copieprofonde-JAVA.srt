1
00:00:04,284 --> 00:00:06,392
Pour conclure cette étude de cas
sur les montres,

2
00:00:06,392 --> 00:00:09,765
nous allons nous intéresser à une
problématique particulière, à savoir :

3
00:00:09,765 --> 00:00:11,248
comment copier des montres ?

4
00:00:11,248 --> 00:00:14,131
Il ne s'agit pas ici de contrefaçons,
mais cela va nous ouvrir

5
00:00:14,131 --> 00:00:16,545
à une problématique intéressante
en programmation,

6
00:00:16,545 --> 00:00:17,766
celle de la copie profonde.

7
00:00:17,920 --> 00:00:19,894
Situons le problème concrètement.

8
00:00:19,894 --> 00:00:22,268
Vous avez une montre,
et votre ami veut la même.

9
00:00:22,268 --> 00:00:25,248
Nous avons appris tout au long 
du cours que l'affectation en Java

10
00:00:25,248 --> 00:00:28,070
ne permet pas de réaliser la copie
à proprement parler.

11
00:00:28,308 --> 00:00:32,712
Si j'écris « montreToto = maMontre »

12
00:00:34,213 --> 00:00:38,337
je suis simplement en train d'affecter
la référence de « maMontre »

13
00:00:38,773 --> 00:00:40,116
dans la variable montreToto.

14
00:00:40,712 --> 00:00:42,036
Donc en clair...

15
00:00:49,124 --> 00:00:53,719
Ma montre et la montre de Toto

16
00:00:55,502 --> 00:00:59,802
pointent vers le même objet en mémoire.

17
00:01:00,274 --> 00:01:03,238
Ceci signifie que si une montre
offre un mécanisme

18
00:01:03,238 --> 00:01:05,175
permettant de régler l'heure,
par exemple,

19
00:01:05,175 --> 00:01:08,597
alors le fait de régler ma montre
va aussi régler celle de Toto ;

20
00:01:09,274 --> 00:01:11,088
et c'est un comportement
plutôt inattendu, ici.

21
00:01:11,700 --> 00:01:13,843
Il nous faut donc ici un
mécanisme permettant

22
00:01:13,843 --> 00:01:15,706
de réellement copier une montre.

23
00:01:15,706 --> 00:01:18,320
Essayons de voir comment nous
pouvons réaliser ce traitement,

24
00:01:18,320 --> 00:01:20,144
au moyen d'un constructeur de copies.

25
00:01:20,728 --> 00:01:23,053
Une montre est un objet
relativement complexe

26
00:01:23,053 --> 00:01:25,524
qui est constitué d'un attribut
« coeur » de type « Mecanisme »,

27
00:01:25,661 --> 00:01:27,557
et d'une liste « d'Accessoires ».

28
00:01:28,139 --> 00:01:32,008
Donc, lorsque je déclare un objet
de type « Montre »,

29
00:01:32,008 --> 00:01:35,566
que je l'initialise et que j'y ajoute, par
exemple, des accessoires comme ceci,

30
00:01:35,566 --> 00:01:39,443
j'aboutis à une représentation
en mémoire qui est la suivante,

31
00:01:39,652 --> 00:01:43,237
donc ma variable « m », de type « Montre »,
est une référence

32
00:01:43,384 --> 00:01:45,358
vers un objet type « Montre »,

33
00:01:45,358 --> 00:01:50,485
lequel a comme attribut un « coeur »
qui est une référence vers un objet,

34
00:01:50,666 --> 00:01:52,944
par exemple de type « MecanismeDouble »,

35
00:01:53,333 --> 00:01:57,590
et dont le second attribut est une
référence vers un tableau dynamique

36
00:01:57,684 --> 00:02:01,872
qui contient à son tour des références
vers des accessoires.

37
00:02:02,850 --> 00:02:06,738
Lorsque je construis une montre
par copie à partir de « m »,

38
00:02:06,900 --> 00:02:09,305
à quelle situation est-ce que
je souhaite aboutir ?

39
00:02:09,782 --> 00:02:15,569
Si je me contente de copier « m » dans « m2 »

40
00:02:17,060 --> 00:02:20,312
en copiant champ à champ
les différents attributs...

41
00:02:32,830 --> 00:02:37,169
je vais avoir pour le cœur de « m2 »
la même valeur que le cœur de « m »,

42
00:02:37,307 --> 00:02:42,300
ce qui veut dire que je pointe vers
le même objet en mémoire,

43
00:02:42,369 --> 00:02:46,157
et je vais avoir pour les
accessoires de « m2 »,

44
00:02:46,374 --> 00:02:48,063
une référence vers le même tableau.

45
00:02:48,971 --> 00:02:51,863
Nous nous trouvons ici confrontés à des
problématiques analogues

46
00:02:51,863 --> 00:02:53,548
à celles rencontrées précédemment,

47
00:02:53,548 --> 00:02:58,379
puisque l'objet m et l'objet m2 partagent
le même tableau d'accessoires en mémoire,

48
00:02:58,822 --> 00:03:02,027
ajouter un accessoire au tableau de m

49
00:03:02,387 --> 00:03:05,160
revient à ajouter un accessoire
au tableau de m2.

50
00:03:05,994 --> 00:03:09,667
De même, régler l'heure du mécanisme de m,

51
00:03:09,667 --> 00:03:12,808
revient à régler l'heure
du mécanisme de m2.

52
00:03:14,205 --> 00:03:17,512
Pour avoir deux objets Montre qui ont,
certes, les mêmes valeurs,

53
00:03:17,512 --> 00:03:19,894
mais qui sont totalement indépendants,

54
00:03:19,894 --> 00:03:23,045
il faut réaliser ce que l'on appelle
la « copie profonde ».

55
00:03:23,045 --> 00:03:27,197
La situation à laquelle nous voulons
arriver est plutôt la suivante :

56
00:03:35,777 --> 00:03:37,923
nous voulons que m2

57
00:03:39,233 --> 00:03:42,470
ait un cœur bien à elle

58
00:03:43,809 --> 00:03:45,177
qui serait identique...

59
00:03:48,318 --> 00:03:50,181
à celui de m,

60
00:03:50,181 --> 00:03:51,557
mais distinct en mémoire,

61
00:03:52,565 --> 00:03:55,223
et un ensemble d'accessoires
bien à elle aussi

62
00:04:01,739 --> 00:04:06,148
dont les valeurs pointeraient
vers les objets identiques

63
00:04:06,645 --> 00:04:08,247
mais distincts en mémoire.

64
00:04:12,014 --> 00:04:15,569
C'est ce qu'on appelle donc,
la copie profonde.

65
00:04:15,569 --> 00:04:18,057
Si l'on écrit le constructeur
de copie de montres

66
00:04:18,057 --> 00:04:21,936
en se contentant d'affecter au cœur
de l'instance courante

67
00:04:21,936 --> 00:04:23,649
le cœur de l'objet copié,

68
00:04:24,262 --> 00:04:26,826
et si l'on fait la même chose
pour les accessoires,

69
00:04:26,826 --> 00:04:30,514
on réalise ce que l'on appelle
la « copie de surface »

70
00:04:30,514 --> 00:04:32,013
qui, comme montré tout à l'heure,

71
00:04:32,013 --> 00:04:34,031
par opposition à la copie profonde,

72
00:04:34,031 --> 00:04:38,407
va simplement permettre aux deux
montres de partager le même cœur

73
00:04:38,407 --> 00:04:40,975
et de partager la même liste
d'accessoires.

74
00:04:41,826 --> 00:04:45,222
Donc cette façon de procéder
n'est pas satisfaisante.

75
00:04:47,303 --> 00:04:49,870
Il faudrait donc réellement
copier en profondeur

76
00:04:49,870 --> 00:04:52,802
chacune des entités mentionnées
précédemment,

77
00:04:52,802 --> 00:04:56,203
c'est-à-dire mettre dans le cœur
de l'objet courant

78
00:04:56,625 --> 00:05:01,429
un nouveau mécanisme construit
à partir du cœur copié

79
00:05:01,458 --> 00:05:05,113
et construire une nouvelle
liste d'accessoires

80
00:05:05,397 --> 00:05:08,206
où chaque accessoire, ajouté à la liste,

81
00:05:08,206 --> 00:05:12,126
serait une copie de l'accessoire
correspondant de l'objet copié.

82
00:05:13,575 --> 00:05:16,705
Ici, on parcourrait la liste d'accessoires
de l'objet copié

83
00:05:17,375 --> 00:05:21,009
et on créerait une copie de chacun
de ces accessoires

84
00:05:21,009 --> 00:05:23,438
que l'on mettrait dans la nouvelle liste.

85
00:05:24,101 --> 00:05:25,754
Nous avons cependant un problème ici.

86
00:05:26,391 --> 00:05:29,973
En effet, pour obtenir une copie du « coeur »,

87
00:05:29,973 --> 00:05:33,118
vu que « coeur » est de type « Mecanisme »,

88
00:05:33,201 --> 00:05:36,871
nous avons utilisé le constructeur
de copies de la classe « Mecanisme ».

89
00:05:38,241 --> 00:05:40,679
En réalité, « autre.coeur »

90
00:05:40,679 --> 00:05:44,919
correspond peut-être à un
« MecanismeDouble ».

91
00:05:46,266 --> 00:05:48,505
Et dans ce cas, c'est bien un
« MecanismeDouble »

92
00:05:48,505 --> 00:05:50,315
que nous souhaitons obtenir
pour « coeur ».

93
00:05:51,535 --> 00:05:54,001
Le constructeur de copies de
la classe « Mecanisme »

94
00:05:54,078 --> 00:05:56,365
peut-il produire un « MecanismeDouble » ?

95
00:05:57,694 --> 00:05:59,397
La réponse est non.

96
00:05:59,839 --> 00:06:01,476
Car, comme nous l'avons vu dans le cours,

97
00:06:01,476 --> 00:06:06,087
les constructeurs sont par essence
non polymorphiques.

98
00:06:12,691 --> 00:06:16,148
Le constructeur de la classe « Mecanisme »
ne pourra donc pas s'adapter

99
00:06:16,148 --> 00:06:18,250
au type de l'instance réelle

100
00:06:18,250 --> 00:06:19,460
qu'il essaie de copier.

101
00:06:20,327 --> 00:06:23,394
Il ne va donc ici voir l'objet copié
que comme un « Mecanisme »,

102
00:06:23,394 --> 00:06:25,998
et ne va donc en copier que
sa partie « Mecanisme ».

103
00:06:25,998 --> 00:06:29,646
Donc toutes les spécificités de
« MecanismeDouble » vont disparaître.

104
00:06:31,411 --> 00:06:33,245
Plus de date et plus de réveil, donc.

105
00:06:34,001 --> 00:06:35,545
La question qui se pose est donc :

106
00:06:35,545 --> 00:06:36,934
comment copier chaque élément,

107
00:06:36,934 --> 00:06:38,890
que ce soit un « Accessoire »
ou un « Mecanisme »,

108
00:06:38,890 --> 00:06:40,131
en tant que tel ?

109
00:06:40,240 --> 00:06:42,350
C'est-à-dire que si c'est
un « MecanismeDouble »,

110
00:06:42,350 --> 00:06:44,048
il sera copié comme un « MecanismeDouble ».

111
00:06:44,382 --> 00:06:46,715
Si c'est un « Bracelet », il sera copié
comme un « Bracelet »;

112
00:06:46,715 --> 00:06:49,882
Donc, comment réaliser de
la copie polymorphique ?

113
00:06:51,240 --> 00:06:53,476
Pour réaliser une copie polymorphique,

114
00:06:53,476 --> 00:06:55,873
on ne peut pas avoir recours
aux constructeurs de copies,

115
00:06:55,873 --> 00:06:57,218
nous venons de le voir,

116
00:06:57,218 --> 00:07:02,319
il suffit d'avoir recours à une méthode
pouvant être, elle, polymorphique.

117
00:07:03,401 --> 00:07:05,002
L'idée serait donc de définir

118
00:07:05,002 --> 00:07:08,415
une méthode de copie polymorphique
permettant de copier des « Mecanismes »

119
00:07:08,415 --> 00:07:11,240
et une méthode de copie polymorphique

120
00:07:11,240 --> 00:07:13,496
qui permettrait de copier des accessoires.

121
00:07:14,501 --> 00:07:16,312
Nous allons voir comment
écrire précisément

122
00:07:16,312 --> 00:07:18,032
une méthode de copie polymorphique,

123
00:07:18,032 --> 00:07:19,653
pour les « Accessoires » par exemple.

124
00:07:19,653 --> 00:07:22,187
La même chose pourra être appliquée
pour les « Mecanismes »,

125
00:07:22,187 --> 00:07:24,801
et cette façon de procéder 
va nous permettre réellement

126
00:07:24,801 --> 00:07:26,738
d'atteindre la copie profonde,

127
00:07:26,738 --> 00:07:30,097
celle qui permet d'obtenir une
copie de l'objet copié,

128
00:07:30,097 --> 00:07:32,088
qui est totalement
indépendante de cet objet.

129
00:07:33,246 --> 00:07:36,694
Enfin, un point que je n'ai pas commenté
jusqu'ici mais qui a son importance,

130
00:07:36,694 --> 00:07:38,765
lorsqu'on écrit un constructeur de copie,

131
00:07:38,765 --> 00:07:41,804
il est impératif de ne pas oublier
de faire appel

132
00:07:41,804 --> 00:07:43,880
aux constructeurs de copies
de la superclasse.

133
00:07:44,663 --> 00:07:47,573
Sinon, si l'on oublie cet appel,
que se passe-t-il ici ?

134
00:07:47,573 --> 00:07:52,810
Sinon, c'est le constructeur par défaut
de la superclasse de « Montre »,

135
00:07:52,810 --> 00:07:54,194
c'est-à-dire de la classe « produit »,

136
00:07:54,194 --> 00:07:55,363
qui serait invoqué.

137
00:07:55,363 --> 00:07:59,676
Ce dernier initialise la valeur de base 
de l'objet au moyen de 0 ;

138
00:07:59,676 --> 00:08:02,395
ceci voudrait dire que toutes les montres
obtenues par copie

139
00:08:02,395 --> 00:08:04,638
auraient une valeur de base nulle,

140
00:08:04,638 --> 00:08:06,053
ce qui n'est pas forcément souhaité.

141
00:08:07,031 --> 00:08:08,871
Voyons donc maintenant comment programmer

142
00:08:08,871 --> 00:08:11,284
une copie polymorphique d'accessoires.

143
00:08:12,807 --> 00:08:15,741
Un accessoire en tant que tel
est une entité abstraite,

144
00:08:15,741 --> 00:08:19,513
on ne va pas définir de copie pour
un accessoire à proprement parler,

145
00:08:19,513 --> 00:08:22,790
donc on se contente de définir
la méthode de copie

146
00:08:22,790 --> 00:08:25,710
comme une méthode abstraite
dans la classe « Accessoire »,

147
00:08:25,710 --> 00:08:28,946
dont chaque sous-classe concrète
d'accessoire,

148
00:08:28,946 --> 00:08:32,808
il va falloir définir de façon
concrète la copie

149
00:08:33,358 --> 00:08:35,097
et la subtilité ici,

150
00:08:35,097 --> 00:08:39,130
est que la méthode polymorphique de
copie peut utiliser dans la sous-classe

151
00:08:39,130 --> 00:08:43,392
le constructeur de copie de la sous-classe
en question pour produire la copie.

152
00:08:43,962 --> 00:08:46,179
Supposons ici qu'un objet
de type « Accessoire »

153
00:08:46,200 --> 00:08:48,896
soit copié par le biais de la
méthode de copie,

154
00:08:49,616 --> 00:08:53,675
et qu'il se trouve qu'en réalité,
cet objet corresponde à un « Bracelet ».

155
00:08:54,843 --> 00:08:57,088
La situation en mémoire
serait la suivante,

156
00:08:57,088 --> 00:09:00,672
nous avons l'objet que
nous voulons copier,

157
00:09:01,904 --> 00:09:05,523
qui est une référence à un objet
de type « Bracelet »...

158
00:09:11,231 --> 00:09:13,279
qui aurait donc par exemple
une valeur de base,

159
00:09:14,642 --> 00:09:16,115
ainsi qu'un nom...

160
00:09:25,715 --> 00:09:28,218
alors lorsque nous appelons
la méthode de copie

161
00:09:28,218 --> 00:09:30,183
l'objet courant est cet objet ;

162
00:09:30,564 --> 00:09:32,581
comme c'est un objet de type « Bracelet »,

163
00:09:32,591 --> 00:09:35,794
nous allons chercher la méthode de copie
dans la classe « Bracelet »,

164
00:09:36,504 --> 00:09:40,791
laquelle va invoquer le constructeur
de copie de la classe « Bracelet ».

165
00:09:41,099 --> 00:09:44,167
Ici nous copions un « Bracelet »,
donc cela ne pose aucun problème

166
00:09:44,435 --> 00:09:47,043
d'utiliser le constructeur de copie
pour copier un « Bracelet » ;

167
00:09:47,726 --> 00:09:52,380
et ce dernier va donc simplement faire
appel au constructeur des superclasses

168
00:09:53,367 --> 00:09:56,980
pour initialiser le nom hérité
d'« Accessoire »

169
00:09:57,649 --> 00:09:59,956
et initialiser la valeur héritée
de « Produit ».

170
00:10:01,425 --> 00:10:05,087
Ceci présuppose donc qu'il existe
un constructeur de copies également

171
00:10:05,268 --> 00:10:07,520
dans la classe « Accessoire »,

172
00:10:07,617 --> 00:10:09,730
qui peut se rédiger comme ceci
par exemple :

173
00:10:13,074 --> 00:10:15,822
le constructeur de copies de la
classe « Accessoire »

174
00:10:15,822 --> 00:10:17,978
prendrait en argument...

175
00:10:20,873 --> 00:10:22,185
évidemment, un autre accessoire,

176
00:10:24,338 --> 00:10:27,988
il ferait appel au constructeur
de copies de la superclasse,

177
00:10:28,092 --> 00:10:30,951
qui serait donc le constructeur de
copies de la classe « Produit »

178
00:10:31,479 --> 00:10:36,362
et il copierait des valeurs
qui lui sont spécifiques...

179
00:10:42,285 --> 00:10:45,727
sachant donc qu'un accessoire
a comme attribut un nom.

180
00:10:46,450 --> 00:10:50,467
Ceci présuppose que dans
la superclasse d'accessoires,

181
00:10:50,546 --> 00:10:51,898
c'est-à-dire la classe « Produit »,

182
00:10:51,898 --> 00:10:54,678
il existe aussi un constructeur de copies.

183
00:10:55,000 --> 00:10:59,097
Ce dernier va simplement copier
la valeur de base.

184
00:10:59,992 --> 00:11:01,854
On procéderait de façon analogue

185
00:11:01,854 --> 00:11:04,847
pour définir la copie polymorphique
des « Mecanismes ».

186
00:11:05,814 --> 00:11:08,383
Enfin, un point qui aura peut-être
attiré votre attention,

187
00:11:08,383 --> 00:11:13,114
si l'on examine l'en-tête de la méthode 
de copie dans la sous-classe « Bracelet »,

188
00:11:14,045 --> 00:11:16,797
et son en-tête dans la
superclasse « Accessoire »,

189
00:11:17,148 --> 00:11:20,630
on se rend compte que les types de retours
ne sont pas exactement les mêmes.

190
00:11:21,251 --> 00:11:22,558
Nous avons bel et bien affaire

191
00:11:22,558 --> 00:11:25,644
à une redéfinition de la méthode de copie
héritée de la superclasse.

192
00:11:25,644 --> 00:11:26,301
Pourquoi ?

193
00:11:26,301 --> 00:11:28,720
Parce que les types de retours
sont compatibles ;

194
00:11:28,872 --> 00:11:31,011
« Bracelet » est une sous-classe d'« Accessoire ».

195
00:11:31,428 --> 00:11:33,195
Techniquement, on appelle cela

196
00:11:33,195 --> 00:11:35,127
la « covariance des types de retours ».

197
00:11:36,114 --> 00:11:38,011
Pour terminer sur ce volet de la copie,

198
00:11:38,011 --> 00:11:40,841
revenons un peu sur le constructeur
de la classe « Montre ».

199
00:11:41,211 --> 00:11:44,482
Nous l'avions initialement programmé
de sorte à ce que...

200
00:11:46,436 --> 00:11:48,821
il prenne en paramètre un « Mecanisme »

201
00:11:48,821 --> 00:11:50,923
et que ce soit ce « Mecanisme »

202
00:11:52,050 --> 00:11:55,565
qu'on affecte directement
au « coeur » de la montre.

203
00:11:56,398 --> 00:11:58,541
Si « Mecanisme » est un objet modifiable,

204
00:11:58,541 --> 00:12:01,499
ceci peut causer ce que l'on appelle
des « failles d'encapsulation ».

205
00:12:02,259 --> 00:12:05,778
Imaginez par exemple que l'on ait
un objet du type « Mecanisme »...

206
00:12:11,054 --> 00:12:12,514
proprement initialisé,

207
00:12:14,556 --> 00:12:15,995
comme ceci par exemple,

208
00:12:20,999 --> 00:12:25,264
Si l'on utilise ce « Mecanisme »
pour créer une montre

209
00:12:34,671 --> 00:12:35,622
comme ceci,

210
00:12:36,122 --> 00:12:40,892
alors la variable « meca »
et le « coeur » de la montre

211
00:12:41,714 --> 00:12:44,010
pointent sur le même objet en mémoire.

212
00:12:44,456 --> 00:12:46,302
Si « meca » est un objet modifiable,

213
00:12:46,302 --> 00:12:48,406
c'est-à-dire qu'il y a une méthode

214
00:12:48,406 --> 00:12:50,984
qu'on peut appliquer à cet objet
pour le modifier,

215
00:12:50,984 --> 00:12:53,208
imaginez par exemple que j'aie
une méthode de réglage

216
00:12:53,208 --> 00:12:55,349
qui permette de régler l'heure
du mécanisme,

217
00:12:55,573 --> 00:12:59,141
alors en réglant l'heure du mécanisme,
je vais aussi régler

218
00:12:59,671 --> 00:13:02,483
l'heure du cœur de la montre.

219
00:13:02,708 --> 00:13:03,985
En effet,

220
00:13:07,403 --> 00:13:12,001
la variable « meca » contient une référence
vers un objet en mémoire

221
00:13:13,887 --> 00:13:15,851
qui serait un « MecanismeDouble »,

222
00:13:21,237 --> 00:13:25,273
« m », qui est une montre,

223
00:13:26,380 --> 00:13:28,652
qui est une référence vers un
objet de type « Montre »,

224
00:13:30,835 --> 00:13:34,449
et dont le « coeur » serait la référence
au même objet

225
00:13:34,478 --> 00:13:36,275
que celui pointé par « meca ».

226
00:13:36,396 --> 00:13:39,575
Supposons qu'au moment de la création
de l'objet Montre,

227
00:13:41,207 --> 00:13:44,510
l'objet « meca » avait une heure
qui était la suivante,

228
00:13:45,458 --> 00:13:48,947
et supposons que les « Mécanismes » soient
dotés d'une méthode de réglage,

229
00:13:49,119 --> 00:13:51,135
donc qu'il soit possible par exemple

230
00:13:52,931 --> 00:13:55,748
de régler l'heure d'un « Mecanisme »
en utilisant

231
00:13:58,178 --> 00:14:00,270
ce genre de tournures par exemple,

232
00:14:01,244 --> 00:14:04,029
alors cela voudrait dire que l'heure
du « Mecanisme » est modifiée,

233
00:14:08,551 --> 00:14:13,188
et cela voudrait dire aussi que l'heure
de la montre est modifiée aussi.

234
00:14:14,747 --> 00:14:17,052
Il faut toujours être très
attentif à ce point

235
00:14:17,052 --> 00:14:20,024
lorsqu'on écrit des constructeurs qui
prennent en paramètre des objets,

236
00:14:20,024 --> 00:14:23,859
si ces objets sont modifiables, à moins
qu'on ne veuille réellement les partager,

237
00:14:23,859 --> 00:14:26,729
c'est-à-dire que le comportement
de partage soit réellement souhaité,

238
00:14:26,729 --> 00:14:32,237
alors il faut aussi penser à affecter une
copie de l'objet passée en paramètre

239
00:14:32,237 --> 00:14:34,741
pour éviter des effets de bord indésirés,

240
00:14:35,089 --> 00:14:38,692
comme par exemple ici, le fait de pouvoir
régler l'heure de la montre

241
00:14:38,692 --> 00:14:40,655
au travers d'un objet extérieur,

242
00:14:40,655 --> 00:14:43,320
ce qui constitue justement
une faille d'encapsulation.

243
00:14:44,996 --> 00:14:46,877
Donc ici, on utiliserait typiquement

244
00:14:46,877 --> 00:14:49,003
la copie polymorphique des « Mecanismes »,

245
00:14:49,003 --> 00:14:52,446
pour obtenir un « coeur » indépendant
du « Mecanisme » de départ

246
00:14:52,446 --> 00:14:54,126
et éviter ce genre d'effet de bord.

247
00:14:55,114 --> 00:14:58,748
Notez qu'un problème analogue se pose
à nous au niveau de la méthode « ajouter() »

248
00:14:58,748 --> 00:15:00,985
permettant d'ajouter des
accessoires à une montre.

249
00:15:01,870 --> 00:15:04,846
En effet, si la méthode « ajouter() »
reçoit en paramètres

250
00:15:04,846 --> 00:15:07,255
la référence vers un accessoire,

251
00:15:07,255 --> 00:15:09,209
ici les accessoires sont modifiables,

252
00:15:09,209 --> 00:15:12,557
par exemple, il y aurait une méthode de
réparation des « Accessoires »

253
00:15:12,557 --> 00:15:14,872
qui permettrait d'en modifier
certaines valeurs,

254
00:15:14,872 --> 00:15:18,094
à ce moment-là, on aurait le même
problème qui se pose à nous

255
00:15:18,094 --> 00:15:21,950
et il faudrait plutôt ajouter à notre
collection d'accessoires...

256
00:15:27,841 --> 00:15:31,870
une copie de l'accessoire
passée en paramètre

257
00:15:32,155 --> 00:15:35,009
de sorte à ce que les accessoires
de notre montre

258
00:15:35,009 --> 00:15:38,957
ne dépendent pas d'un accessoire fourni
depuis l'extérieur, et modifiable.

259
00:15:39,381 --> 00:15:41,422
Enfin, vous l'attendiez peut-être
depuis un moment,

260
00:15:41,422 --> 00:15:44,223
qu'en est-il de la la méthode
« clone() » héritée de « Object »,

261
00:15:44,223 --> 00:15:46,041
qui est censée copier des objets ?

262
00:15:46,423 --> 00:15:49,700
Nous aurions en fait très bien pu appeler
notre méthode de copie polymorphique

263
00:15:49,700 --> 00:15:51,881
« clone() » au lieu de l'appeler « copie ».

264
00:15:52,099 --> 00:15:54,064
Si nous l'avions appelée « clone »,

265
00:15:54,064 --> 00:15:57,346
il aurait simplement fallu adhérer à un
certain nombre de conventions usuelles,

266
00:15:57,732 --> 00:15:59,890
typiquement faire en sorte que les classes

267
00:15:59,890 --> 00:16:02,633
qui définissent ou redéfinissent
la méthode « clone() »

268
00:16:02,633 --> 00:16:06,986
implémentent une interface particulière
qui s'appelle l'interface « Cloneable ».

269
00:16:07,793 --> 00:16:09,913
Il y a un certain nombre d'autres
détails techniques

270
00:16:09,913 --> 00:16:13,846
assortis à l'utilisation de clones tels
que faits conventionnellement en Java.

271
00:16:14,308 --> 00:16:16,909
Nous avons délibérément voulu
écarter ces aspects,

272
00:16:17,044 --> 00:16:21,085
d'une part parce que « clone » est loin de
faire l'unanimité parmi les programmeurs,

273
00:16:21,085 --> 00:16:22,830
-- c'est un sujet de controverse --

274
00:16:23,141 --> 00:16:25,741
et surtout, parce que nous souhaitions
focaliser le discours

275
00:16:25,741 --> 00:16:28,471
sur la thématique de la copie profonde
en tant que telle,

276
00:16:28,471 --> 00:16:30,190
telle qu'on pourrait la retrouver
éventuellement

277
00:16:30,190 --> 00:16:31,884
dans d'autres langages de programmation.

278
00:16:32,158 --> 00:16:35,425
Et ceci conclut cette étude de cas
et par là même, de ce cours.
