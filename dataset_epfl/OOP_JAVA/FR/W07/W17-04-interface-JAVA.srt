1
00:00:04,090 --> 00:00:06,512
Nous poursuivons notre étude
de cas sur les montres

2
00:00:06,512 --> 00:00:10,061
il s'agit d'affiner la modélisation
des différents mécanismes appliqués

3
00:00:10,061 --> 00:00:12,500
en incorporant notamment
la notion d'interface.

4
00:00:12,500 --> 00:00:14,545
Pour rappel, dans
les séquences précédentes,

5
00:00:14,545 --> 00:00:17,767
le cœur d'une montre était modélisé
comme étant un mécanisme

6
00:00:17,767 --> 00:00:20,713
un mécanisme pouvant se décliner 
sous différentes formes

7
00:00:20,713 --> 00:00:23,293
on pouvait avoir soit :
un mécanisme analogique,

8
00:00:23,298 --> 00:00:26,223
un mécanisme digital
ou encore un mécanisme double.

9
00:00:26,223 --> 00:00:30,800
Ces trois types de mécanismes
héritaient tous de Mecanisme.

10
00:00:30,800 --> 00:00:34,462
Cette première hiérarchie n'est cependant
pas tout à fait conforme à nos souhaits

11
00:00:34,462 --> 00:00:36,942
concernant la modélisation
des mécanismes doubles.

12
00:00:36,943 --> 00:00:39,393
Nous souhaitions, en effet,
qu'un mécanisme double

13
00:00:39,407 --> 00:00:42,106
puisse avoir à la fois
des caractéristiques

14
00:00:42,106 --> 00:00:46,753
des mécanismes analogiques
et des caractéristiques

15
00:00:46,753 --> 00:00:48,378
des mécanismes digitaux.

16
00:00:48,378 --> 00:00:50,672
Idéalement, un mécanisme double

17
00:00:50,672 --> 00:00:55,922
devrait pouvoir ici hériter
de la classe MecanismeDigital

18
00:00:55,949 --> 00:01:00,276
ainsi que de la classe 
MecanismeAnalogique,

19
00:01:00,276 --> 00:01:02,416
Malheureusement, l'héritage multiple

20
00:01:02,416 --> 00:01:04,092
n'existe pas en Java.

21
00:01:04,092 --> 00:01:05,496
Supposons par exemple que

22
00:01:05,496 --> 00:01:06,938
dans la classe analogique

23
00:01:06,938 --> 00:01:09,178
nous ayons un attribut spécifique

24
00:01:09,183 --> 00:01:10,563
aux mécanismes analogiques

25
00:01:10,569 --> 00:01:12,679
qui serait la date 
affichée par le mécanisme

26
00:01:12,681 --> 00:01:15,720
et que dans le cas du mécanisme digital

27
00:01:15,720 --> 00:01:17,376
nous ayons un autre attribut

28
00:01:17,376 --> 00:01:21,516
qui serait un réveil assorti
au mécanisme digital,

29
00:01:21,516 --> 00:01:24,107
alors maintenir ce lien d'héritage

30
00:01:24,107 --> 00:01:25,777
impliquerait une duplication

31
00:01:25,781 --> 00:01:27,875
des deux attributs 
dans le mécanisme double

32
00:01:27,875 --> 00:01:29,415
puisqu'on voudrait effectivement

33
00:01:29,428 --> 00:01:31,787
qu'un mécanisme double
ait les caractéristiques

34
00:01:31,787 --> 00:01:33,139
des deux classes en question

35
00:01:33,139 --> 00:01:35,525
c'est-à-dire dispose d'un réveil
et dispose d'une date.

36
00:01:35,525 --> 00:01:37,859
Nous nous trouverions donc ici
dans cette situation

37
00:01:39,821 --> 00:01:41,521
et il en serait de même

38
00:01:41,521 --> 00:01:42,950
pour toutes les méthodes

39
00:01:42,950 --> 00:01:45,520
spécifiques aux mécanismes analogiques

40
00:01:45,530 --> 00:01:46,880
et aux mécanismes digitaux,

41
00:01:46,880 --> 00:01:49,124
qu'il faudrait reprendre
dans leur intégralité

42
00:01:49,124 --> 00:01:50,349
dans les mécanismes doubles.

43
00:01:50,349 --> 00:01:53,629
On peut donc prendre le parti
de considérer que, par exemple,

44
00:01:53,629 --> 00:01:56,795
un mécanisme double est 
un mécanisme analogique

45
00:01:56,795 --> 00:01:58,907
auquel se grefferaient 
des caractéristiques

46
00:01:58,907 --> 00:02:00,553
du mécanisme digital.

47
00:02:00,553 --> 00:02:02,233
Si l'on prend ce point de vue,

48
00:02:02,241 --> 00:02:04,673
on permet à l'héritage d'alléger

49
00:02:04,673 --> 00:02:06,343
les duplications induites

50
00:02:06,343 --> 00:02:08,113
par la conception initiale.

51
00:02:08,113 --> 00:02:09,793
Nous aboutissons donc à ce stade

52
00:02:09,793 --> 00:02:11,979
à une hiérarchie
qui ressemble à ceci :

53
00:02:11,979 --> 00:02:13,889
les mécanismes doubles héritent

54
00:02:13,889 --> 00:02:15,314
des mécanismes analogiques,

55
00:02:15,314 --> 00:02:17,062
Il n'existe pas pour l'instant

56
00:02:17,062 --> 00:02:18,472
de lien direct entre

57
00:02:18,484 --> 00:02:20,638
les mécanismes doubles
et les mécanismes digitaux,

58
00:02:20,638 --> 00:02:22,798
nous allons y remédier un peu plus tard.

59
00:02:22,802 --> 00:02:25,769
Tous les attributs spécifiques

60
00:02:25,769 --> 00:02:27,384
aux mécanismes analogiques

61
00:02:27,384 --> 00:02:29,336
et toutes les méthodes sont donc

62
00:02:29,336 --> 00:02:31,473
hérités par la classe MecanismeDouble

63
00:02:31,473 --> 00:02:33,133
qui n'a pas besoin de les dupliquer.

64
00:02:33,133 --> 00:02:35,443
En revanche, comme on ne peut pas hériter

65
00:02:35,446 --> 00:02:37,336
de la classe MecanismeDigital,

66
00:02:37,346 --> 00:02:41,456
les caractéristiques du mécanisme digital

67
00:02:41,456 --> 00:02:44,475
que l'on voudrait voir reproduites
dans les mécanismes doubles

68
00:02:44,475 --> 00:02:46,265
doivent être dupliquées.

69
00:02:46,272 --> 00:02:49,564
Le code Java qui correspond
à cette première révision de la hiérarchie

70
00:02:49,564 --> 00:02:50,756
est donc le suivant.

71
00:02:50,756 --> 00:02:53,538
Nous avons donc une superclasse Mecanisme

72
00:02:53,538 --> 00:02:56,952
qui dérive de Produit, qui dispose
de deux sous-classes directes :

73
00:02:56,952 --> 00:03:00,402
la classe MecanismeAnalogique 
et la classe MecanismeDigital ;

74
00:03:00,412 --> 00:03:03,316
on suppose donc ici que nos classes
MecanismeAnalogique

75
00:03:03,316 --> 00:03:05,836
et MecanismeDigital
ont des attributs spécifiques :

76
00:03:05,845 --> 00:03:07,705
une date pour les mécanismes analogiques

77
00:03:07,715 --> 00:03:09,675
un réveil pour les mécanismes digitaux.

78
00:03:09,678 --> 00:03:12,478
Et nous prenons donc le parti
de considérer qu'un mécanisme double

79
00:03:12,484 --> 00:03:16,688
est avant tout un mécanisme analogique
auquel on ajoute des caractéristiques

80
00:03:16,688 --> 00:03:18,811
du mécanisme digital.

81
00:03:18,811 --> 00:03:23,371
Donc ici le lien est un, le lien d'héritage
est établi entre mécanisme double

82
00:03:23,381 --> 00:03:24,825
et mécanisme analogique,

83
00:03:24,825 --> 00:03:28,437
et nous greffons à la classe
MecanismeDouble des éléments

84
00:03:28,437 --> 00:03:31,253
qui sont caractéristiques
du mécanisme digital.

85
00:03:31,253 --> 00:03:35,745
Donc ici une duplication
incontournable de l'attribut reveil.

86
00:03:35,745 --> 00:03:38,542
Intéressons nous maintenant
à la construction des mécanismes :

87
00:03:38,542 --> 00:03:41,466
la mise en œuvre de constructeurs
dans une hiérarchie de classe

88
00:03:41,466 --> 00:03:44,346
obéit à certaines règles
que nous allons revoir maintenant.

89
00:03:44,349 --> 00:03:47,313
Commençons donc par fixer
la construction des mécanismes

90
00:03:47,313 --> 00:03:49,843
- jusqu'ici nous n'avions 
qu'un constructeur par défaut -

91
00:03:49,843 --> 00:03:52,710
affinons un petit peu 
la description de ce constructeur.

92
00:03:52,710 --> 00:03:54,797
Sachant qu'un mécanisme est un produit,

93
00:03:54,797 --> 00:03:56,851
donc hérite de la classe Produit,

94
00:03:56,851 --> 00:03:58,502
il doit initiialiser la valeur de base

95
00:03:58,502 --> 00:04:00,188
du produit herité de Produit

96
00:04:00,188 --> 00:04:02,444
et doit initialiser 
son attribut propre,

97
00:04:02,444 --> 00:04:03,780
à savoir l'heure.

98
00:04:03,780 --> 00:04:05,893
On peut donc naturellement 
pour la classe Mecanisme

99
00:04:05,893 --> 00:04:08,076
penser à un constructeur 
qui aurait cette allure

100
00:04:08,076 --> 00:04:11,211
donc il prendrait en paramètre 
une valeur permettant

101
00:04:11,211 --> 00:04:13,705
d'initialiser l'attribut hérité de Produit

102
00:04:13,705 --> 00:04:15,959
et prendrait en paramètre 
une seconde valeur

103
00:04:15,959 --> 00:04:18,984
permettant d'initialiser 
son attribut spécifique.

104
00:04:18,984 --> 00:04:20,624
Le constructeur de la classe Mecanisme

105
00:04:20,624 --> 00:04:22,295
doit impérativement invoquer

106
00:04:22,295 --> 00:04:24,365
le constructeur de la super-classe Produit

107
00:04:24,370 --> 00:04:25,871
au travers de cette tournure.

108
00:04:25,871 --> 00:04:28,724
Si l'on veut, à la construction, attribuer
une valeur par défaut

109
00:04:28,724 --> 00:04:30,725
à l'attribut heure
alors on procédera,

110
00:04:30,725 --> 00:04:33,513
comme nous l'avons déjà fait 
précédemment pour la classe Produit,

111
00:04:33,513 --> 00:04:35,505
en surchargeant le constructeur,

112
00:04:35,505 --> 00:04:38,329
c'est-à-dire que nous définirions
un second constructeur

113
00:04:38,329 --> 00:04:40,664
qui ne prendrait pas de paramètres

114
00:04:40,664 --> 00:04:45,544
pour l'heure du mécanisme 
mais qui initialiserait cet attribut

115
00:04:45,548 --> 00:04:47,858
au moyen d'une valeur spécifique.

116
00:04:47,858 --> 00:04:50,536
Passons maintenant 
aux constructeurs des sous-classes

117
00:04:50,536 --> 00:04:54,127
Tout d'abord, celui de
la sous-classe MecanismeAnalogique

118
00:04:54,127 --> 00:04:56,577
par exemple, qui hérite directement
de la classe Mecanisme.

119
00:04:57,217 --> 00:05:00,069
Ce constructeur prendra
en paramètre des valeurs

120
00:05:00,069 --> 00:05:01,548
lui permettant d'initialiser

121
00:05:01,548 --> 00:05:04,255
l'ensemble de ses attributs,
ceux hérités de plus haut

122
00:05:04,255 --> 00:05:07,085
et ceux qui lui sont spécifiques.

123
00:05:07,085 --> 00:05:09,355
Le constructeur de la sous-classe 
MecanismeAnalogique

124
00:05:09,355 --> 00:05:10,791
doit donc invoquer également

125
00:05:10,791 --> 00:05:13,837
le constructeur de la
super-classe Mecanisme

126
00:05:13,837 --> 00:05:15,437
toujours par la même tournure.

127
00:05:15,437 --> 00:05:17,482
Et le constructeur de la classe
MecanismeDigital

128
00:05:17,482 --> 00:05:19,665
se rédige de façon
tout à fait analogue.

129
00:05:19,665 --> 00:05:21,803
Un constructeur possible pour
la classe MecanismeDouble

130
00:05:21,803 --> 00:05:23,454
est un constructeur permettant

131
00:05:23,454 --> 00:05:26,826
d'initialiser l'ensemble
de ses attributs,

132
00:05:26,826 --> 00:05:29,246
ceux qui lui sont spécifiques 
comme ici le réveil,

133
00:05:29,255 --> 00:05:32,199
comme ceux qui sont hérités de plus haut.

134
00:05:32,199 --> 00:05:34,488
On va hériter de plus haut 
plusieurs attributs

135
00:05:34,488 --> 00:05:36,858
la date du MecanismeAnalogique,

136
00:05:36,861 --> 00:05:40,847
l'heure du Mecanisme et
la valeur de base du Produit.

137
00:05:40,847 --> 00:05:42,836
Ce constructeur de MecanismeDouble

138
00:05:42,836 --> 00:05:46,296
appellera donc le constructeur de
la super-classe pour initialiser

139
00:05:46,296 --> 00:05:48,605
les attributs hérités de plus haut

140
00:05:48,605 --> 00:05:50,242
et initialisera son attribut propre.

141
00:05:50,242 --> 00:05:51,843
Intéressons-nous maintenant à la gestion

142
00:05:51,843 --> 00:05:54,481
des valeurs par défaut
par les constructeurs.

143
00:05:54,481 --> 00:05:56,448
Rappelez-vous que
lorsque nous avons défini

144
00:05:56,448 --> 00:05:58,151
les constructeurs
de la classe Mecanisme,

145
00:05:58,151 --> 00:06:01,260
nous avions donné la possibilité de
construire un mécanisme

146
00:06:01,260 --> 00:06:03,676
sans fournir d'heure, 
auquel cas l'heure aurait

147
00:06:03,676 --> 00:06:04,935
une valeur par défaut.

148
00:06:04,935 --> 00:06:07,148
Et nous nous posons maintenant 
la question de savoir

149
00:06:07,148 --> 00:06:09,045
comment les constructeurs 
des sous-classes

150
00:06:09,045 --> 00:06:11,703
peuvent préserver
cette valeur par défaut.

151
00:06:11,703 --> 00:06:13,643
On souhaiterait donc pouvoir par exemple

152
00:06:13,643 --> 00:06:15,951
construire un MecanismeDouble 
sans fournir d'heure

153
00:06:15,951 --> 00:06:17,330
et à ce moment-là on voudrait

154
00:06:17,330 --> 00:06:20,114
que son attribut heure 
ait la même valeur par défaut

155
00:06:20,114 --> 00:06:22,732
que celle qui est prévue 
pour les mécanismes tout court

156
00:06:22,732 --> 00:06:27,587
et l'on veut bien sûr garder la possibilité
d'initialiser son attribut spécifique.

157
00:06:27,587 --> 00:06:30,307
La solution passe à nouveau
par la surcharge.

158
00:06:30,317 --> 00:06:34,072
La surcharge définirait le constructeur 
de la classe MecanismeDouble

159
00:06:34,072 --> 00:06:36,698
de sorte à ce qu'il puisse
fonctionner sans avoir de valeur

160
00:06:36,698 --> 00:06:38,733
pour son attribut heure.

161
00:06:38,733 --> 00:06:41,299
Il appelerait alors un constructeur 
de la super-classe

162
00:06:41,299 --> 00:06:42,890
programmé sur le même principe,

163
00:06:42,890 --> 00:06:47,304
c'est-à-dire un constructeur qui n'aurait 
pas besoin d'une heure comme paramètre.

164
00:06:47,304 --> 00:06:49,143
Ceci veut dire que
dans la super-classe

165
00:06:49,143 --> 00:06:50,462
MecanismeAnalogique,

166
00:06:50,462 --> 00:06:54,261
il existe un constructeur qui se passe 
d'un paramètre pour l'heure

167
00:06:54,261 --> 00:06:58,479
et sauriez-vous dire quelle va être la
première instruction de ce constructeur ?

168
00:06:58,479 --> 00:07:00,579
Le constructeur de MecanismeAnalogique

169
00:07:00,580 --> 00:07:04,128
va en effet invoquer ce constructeur 
de la super-classe Mecanisme

170
00:07:04,128 --> 00:07:07,318
lequel va initialiser proprement 
l'heure par défaut.

171
00:07:07,318 --> 00:07:10,777
Pour terminer notre discussion 
sur la construction à cette étape,

172
00:07:10,777 --> 00:07:15,417
rappelons que la classe Montre disposait 
d'un attribut cœur de type mécanisme.

173
00:07:15,417 --> 00:07:18,566
Le constructeur que nous avions jusqu'ici 
était un constructeur par défaut

174
00:07:18,566 --> 00:07:21,565
qui se contentait simplement 
d'initialiser le tableau d'accessoires

175
00:07:21,565 --> 00:07:22,925
comme un tableau vide.

176
00:07:22,925 --> 00:07:26,942
On peut maintenant prévoir donc 
un constructeur un peu plus complet

177
00:07:26,942 --> 00:07:29,716
qui prendrait en paramètre un Mecanisme

178
00:07:29,716 --> 00:07:32,139
qui servirait à initialiser le cœur.

179
00:07:32,139 --> 00:07:34,694
Cette façon de procéder
à l'initialisation du cœur

180
00:07:34,694 --> 00:07:38,594
au moyen de la référence à un objet
passé en paramètre au constructeur

181
00:07:38,594 --> 00:07:40,409
n'est pas totalement satisfaisante,

182
00:07:40,409 --> 00:07:43,153
nous allons y revenir
dans une séquence suivante

183
00:07:43,153 --> 00:07:46,133
lorsque nous aborderons
la copie profonde.

184
00:07:46,133 --> 00:07:49,340
Nous en avons fini maintenant avec
la construction des mécanismes,

185
00:07:49,340 --> 00:07:51,050
passons à leur affichage.

186
00:07:51,050 --> 00:07:52,816
Supposons que pour réaliser ces affichages

187
00:07:52,816 --> 00:07:55,509
nous souhaitions que tous les mécanismes

188
00:07:55,509 --> 00:07:57,783
s'affichent suivant
exactement le même schéma :

189
00:07:57,783 --> 00:08:00,463
un schéma imposé et non modifiable.

190
00:08:00,463 --> 00:08:02,811
Ce schéma serait par exemple d'afficher

191
00:08:02,811 --> 00:08:05,081
systématiquement
le type du mécanisme

192
00:08:05,095 --> 00:08:07,120
suivi d'un affichage du cadran,

193
00:08:07,120 --> 00:08:09,457
lequel contiendrait l'heure
et, le cas échéant,

194
00:08:09,457 --> 00:08:11,259
la date, l'heure du réveil, et puis

195
00:08:11,259 --> 00:08:13,289
suivi du prix par exemple.

196
00:08:13,289 --> 00:08:14,773
Mais nous souhaitons aussi

197
00:08:14,773 --> 00:08:16,816
que chacune de ces parties,

198
00:08:17,984 --> 00:08:20,501
chacune des parties
de ce schéma soit adaptable.

199
00:08:20,501 --> 00:08:21,960
Ce que l'on entend par <i>partie</i>

200
00:08:21,960 --> 00:08:25,593
serait typiquement la partie
qui affiche le type du mécanisme,

201
00:08:25,593 --> 00:08:28,509
la partie qui affiche le cadran.

202
00:08:28,509 --> 00:08:30,763
Cette description sous-entend qu'il existe

203
00:08:30,763 --> 00:08:32,605
une méthode d'affichage générale

204
00:08:32,605 --> 00:08:35,531
pour tous les mécanismes
qui suit un schéma précis

205
00:08:35,531 --> 00:08:40,052
mais que cette méthode fait appel
elle-même à d'autres méthodes

206
00:08:43,560 --> 00:08:46,471
qui, elles, pourraient avoir
un comportement adaptable

207
00:08:46,471 --> 00:08:49,425
donc un aspect polymorphique.

208
00:08:52,275 --> 00:08:53,577
L'idée est donc de permettre

209
00:08:53,577 --> 00:08:56,539
à ces méthodes d'avoir
un comportement spécifique

210
00:08:56,539 --> 00:08:58,961
en fonction des sous-classes, 
c'est-à- dire que, par exemple,

211
00:08:58,961 --> 00:09:02,110
on aurait une méthode 
d'affichage multiple

212
00:09:02,110 --> 00:09:04,911
de mécanismes spécifiques
à chaque sous-classe.

213
00:09:04,911 --> 00:09:07,525
De même, on aurait une méthode
d'affichage du cadran

214
00:09:07,525 --> 00:09:10,658
spécifique à chaque sous-classe et 
que, grâce au polymorphisme,

215
00:09:10,658 --> 00:09:13,660
elle puisse s'adapter automatiquement
à la nature réelle des objets

216
00:09:13,660 --> 00:09:15,512
auxquels elle s'applique.

217
00:09:15,512 --> 00:09:17,835
Le fait que le même schéma de base

218
00:09:17,835 --> 00:09:21,364
soit imposé à tous pour les mécanismes

219
00:09:21,364 --> 00:09:26,282
sous-entend qu'une fois cette méthode 
adhérant à ce schéma fixé,

220
00:09:26,282 --> 00:09:30,116
il ne faut plus qu'elle soit modifiée.
Ce qui devrait nous faire penser

221
00:09:30,906 --> 00:09:32,695
à des méthodes finales.

222
00:09:33,665 --> 00:09:35,586
Nous voulons également faire en sorte

223
00:09:35,586 --> 00:09:38,890
qu'il existe une version utilisable 
dans les sous-classes

224
00:09:38,890 --> 00:09:40,927
de l'affichage du cadran.

225
00:09:40,927 --> 00:09:43,731
Donc cette méthode devrait avoir
une définition par défaut,

226
00:09:43,731 --> 00:09:47,095
typiquement tout en haut de la hiérarchie, 
dans la classe Mecanisme.

227
00:09:47,095 --> 00:09:49,468
Cette version par défaut pourrait 
par exemple simplement

228
00:09:49,468 --> 00:09:52,360
afficher l'heure et être utilisée
dans les sous-classes

229
00:09:52,360 --> 00:09:55,961
pour justement afficher l'heure et 
éventuellement d'autres informations.

230
00:09:55,961 --> 00:09:58,399
Donc, ici nous nous dirigeons 
vers une méthode qui serait,

231
00:09:58,399 --> 00:10:00,505
pour l'affichage du cadran, polymorphique

232
00:10:00,505 --> 00:10:03,787
mais qui aurait une définition
par défaut dans la super-classe.

233
00:10:03,787 --> 00:10:07,265
Par contre, pour l'affichage 
du type de mécanisme,

234
00:10:07,265 --> 00:10:09,022
nous voulons impérativement

235
00:10:09,022 --> 00:10:12,606
en imposer la redéfinition 
dans les sous-classes

236
00:10:12,606 --> 00:10:14,591
ce qui naturellement 
devrait nous faire penser

237
00:10:14,591 --> 00:10:18,154
ici aux méthodes abstraites.

238
00:10:21,184 --> 00:10:24,649
Voici comment on pourrait traduire 
ces contraintes en code Java.

239
00:10:25,395 --> 00:10:30,663
Notre super-classe Mecanisme offre 
une méthode d'affichage polymorphique

240
00:10:31,343 --> 00:10:35,610
qui redéfinit celle héritée de Produit 
laquelle affichait le prix ;

241
00:10:35,610 --> 00:10:39,463
notre super-classe Mecanisme 
offre donc une méthode d'affichage

242
00:10:39,463 --> 00:10:43,641
qui obéit à un schéma précis 
lequel affichera le type,

243
00:10:43,641 --> 00:10:46,264
le cadran et le prix par le biais

244
00:10:46,264 --> 00:10:49,197
de la méthode hérité de Produit.

245
00:10:49,197 --> 00:10:52,911
Pour faire en sorte que ce schéma soit 
fixé une fois pour toute

246
00:10:52,911 --> 00:10:56,758
et ne soit pas redéfinissable dans 
une sous-classe de la hiérarchie,

247
00:10:56,758 --> 00:11:01,526
nous marquons la méthode 
comme étant " finale ".

248
00:11:02,436 --> 00:11:05,667
Les sous-classes de Mecanisme
n'auront donc plus la possibilité

249
00:11:05,667 --> 00:11:09,304
de redéfinir la méthode toString. Elle est 
déclarée comme final.

250
00:11:09,304 --> 00:11:13,184
En revanche, elles auront tout à fait 
le loisir de redéfinir des parties

251
00:11:13,184 --> 00:11:16,389
de ce schéma dont, par exemple,
l'affichage du cadran

252
00:11:16,389 --> 00:11:18,964
ou l'affichage du type sont 
elles-mêmes des méthodes

253
00:11:18,964 --> 00:11:20,962
polymorphiques qui pourront s'adapter

254
00:11:20,962 --> 00:11:23,325
aux types des mécanismes 
auxquels elles s'appliquent.

255
00:11:23,906 --> 00:11:26,548
La méthode permettant d'afficher 
le cadran conformément au souhait

256
00:11:26,548 --> 00:11:29,805
qui était formulé tout à l'heure 
a une définition par défaut

257
00:11:29,805 --> 00:11:31,649
dans la classe Mecanisme.

258
00:11:31,649 --> 00:11:33,786
Elle permet à ce moment-là 
juste d'afficher l'heure.

259
00:11:33,786 --> 00:11:36,403
Nous avons décidé 
de la déclarer en protégé

260
00:11:36,403 --> 00:11:40,567
pour permettre aux sous-classes 
d'utiliser cette méthode de la super-classe.

261
00:11:40,567 --> 00:11:43,565
Il n'y a pas de risque ici 
au niveau de l'encapsulation

262
00:11:43,565 --> 00:11:46,293
car la méthode toString cadran, permettant

263
00:11:46,293 --> 00:11:48,362
de générer un représentation du cadran,

264
00:11:48,362 --> 00:11:52,153
ne modifie pas, n'altère pas 
les détails internes du mécanisme.

265
00:11:52,719 --> 00:11:55,044
On considère par contre 
que la méthode permettant

266
00:11:55,044 --> 00:11:57,021
d'afficher le type du mécanisme

267
00:11:57,021 --> 00:12:00,272
n'est pas vraiment définissable 
à ce stade de la hiérarchie.

268
00:12:00,272 --> 00:12:01,610
Il s'agit donc d'une méthode

269
00:12:01,610 --> 00:12:03,908
qui va être définie comme étant abstraite.

270
00:12:03,908 --> 00:12:06,748
Le fait de déclarer cette méthode abstraite

271
00:12:06,748 --> 00:12:10,858
va en imposer la définition concrète 
dans toutes les sous-classes de Mecanisme

272
00:12:10,858 --> 00:12:12,997
qu'on souhaite pouvoir instancier plus tard.

273
00:12:12,997 --> 00:12:16,473
Toute sous-classe de la classe Mecanisme 
que l'on souhaite pouvoir instancier,

274
00:12:16,473 --> 00:12:19,111
comme ici par exemple
la sous-classe MecanismeDigital,

275
00:12:19,111 --> 00:12:21,982
devra impérativement
donner une définition

276
00:12:21,982 --> 00:12:24,076
concrète de la méthode
permettant d'afficher

277
00:12:24,076 --> 00:12:26,683
le type, ce qui est le cas ici.

278
00:12:26,683 --> 00:12:30,404
La sous-classe MecanismeDigital 
peut bien évidemment, aussi,

279
00:12:30,404 --> 00:12:33,360
redéfinir la méthode permettant
l'affichage du cadran.

280
00:12:33,360 --> 00:12:35,515
Et elle peut redéfinir cette méthode

281
00:12:35,515 --> 00:12:37,982
en utilisant la méthode
héritée de plus haut,

282
00:12:37,982 --> 00:12:40,481
c'est-à-dire celle permettant 
d'afficher l'heure.

283
00:12:40,481 --> 00:12:45,399
Donc, ici l'affichage du cadran d'un 
mécanisme digital affichera l'heure

284
00:12:45,399 --> 00:12:48,278
ainsi que le réveil.

285
00:12:48,778 --> 00:12:51,607
L'affichage de réveil se fait aussi 
par le biais d'une méthode

286
00:12:51,607 --> 00:12:55,900
mais cette fois cette méthode est 
spécifique à la classe MecanismeDigital.

287
00:12:55,900 --> 00:12:59,929
Elle affiche simplement le libellé réveil 
suivi de l'heure du réveil.

288
00:12:59,929 --> 00:13:01,575
La classe MecanismeDouble,

289
00:13:01,575 --> 00:13:03,715
si l'on veut pourvoir
l'instancier, ce qui est le cas,

290
00:13:03,715 --> 00:13:06,315
doit elle aussi impérativement

291
00:13:06,315 --> 00:13:08,977
redéfinir la méthode permettant 
l'affichage multiple.

292
00:13:09,824 --> 00:13:12,727
Puisqu'elle dispose d'un réveil dont 
on veut probablement aussi

293
00:13:12,727 --> 00:13:16,647
vouloir afficher la valeur, 
il faut qu'on définisse également

294
00:13:16,647 --> 00:13:19,276
la méthode permettant
d'afficher l'heure du réveil

295
00:13:19,276 --> 00:13:23,610
de la même manière qu'on l'a faite 
pour les mécanismes digitaux.

296
00:13:23,610 --> 00:13:25,768
Et on peut imaginer de redéfinir

297
00:13:25,768 --> 00:13:28,143
la méthode permettant 
l'affichage du cadran,

298
00:13:28,148 --> 00:13:30,977
permettant donc d'afficher 
les informations du cadran

299
00:13:30,977 --> 00:13:34,194
hérités de MecanismeAnalogique,

300
00:13:34,194 --> 00:13:36,352
c'est-à-dire concrètement ici 
l'heure et la date.

301
00:13:36,352 --> 00:13:40,032
Et l'on afficherait ensuite les 
informations relatives au réveil

302
00:13:40,049 --> 00:13:42,252
par le biais de cette méthode spécifique.

303
00:13:42,252 --> 00:13:45,909
On voit donc qu'aussi bien la classe 
mécanisme double

304
00:13:46,876 --> 00:13:50,594
que la classe MecanismeDigital
contiennent une méthode permettant

305
00:13:50,594 --> 00:13:52,946
d'afficher les informations 
relatives au réveil

306
00:13:52,946 --> 00:13:54,837
et le font de façon tout à fait analogue.

307
00:13:54,837 --> 00:13:57,499
Cependant, il n'existe
aucun lien entre les deux.

308
00:13:58,040 --> 00:14:01,703
Il serait donc bien ici d'expliciter
le lien entre les mécanismes

309
00:14:01,703 --> 00:14:03,418
ayant un comportement digital,

310
00:14:03,418 --> 00:14:06,758
c'est-à-dire MecanismeDouble 
et MecanismeDigital dans notre cas,

311
00:14:06,758 --> 00:14:10,512
et d'imposer aux mécanismes qui 
ont aussi un comportement digital

312
00:14:10,519 --> 00:14:12,848
d'implémenter les méthodes communes 
comme par exemple

313
00:14:12,848 --> 00:14:15,594
la méthode toStringRéveil 
permettant d'afficher

314
00:14:15,594 --> 00:14:17,699
les informations relatives au réveil.

315
00:14:17,699 --> 00:14:21,817
Et ceci nous conduit à une nouvelle révision 
de notre hiérarchie de classe.

316
00:14:21,817 --> 00:14:24,783
Nous pouvons établir le lien entre 
les mécanismes digitaux

317
00:14:24,783 --> 00:14:28,856
et les mécanismes doubles par le biais 
d'une interface, laquelle imposerait

318
00:14:28,856 --> 00:14:31,043
aux sous-classes qui l'implémentent

319
00:14:31,043 --> 00:14:33,574
d'implémenter la méthode 
permettant d'afficher

320
00:14:33,574 --> 00:14:36,274
les informations relatives au réveil.

321
00:14:36,274 --> 00:14:39,207
Nous pouvons donc introduire
l'interface ReveilDigital

322
00:14:39,224 --> 00:14:43,358
et imposer le fait que toutes les classes 
qui implémenteraient des digital

323
00:14:43,365 --> 00:14:46,429
fournissent une méthode permettant 
d'afficher les informations

324
00:14:46,429 --> 00:14:48,226
relatives au réveil.

325
00:14:48,226 --> 00:14:50,034
Notre classe MecanismeDigital

326
00:14:50,034 --> 00:14:52,884
implémenterait cette interface.

327
00:14:52,884 --> 00:14:56,560
Il en sera de même pour la classe 
MecanimeDouble et ces deux classes,

328
00:14:56,560 --> 00:14:59,930
si l'on veut pouvoir les instancier, 
doivent impérativement fournir

329
00:14:59,930 --> 00:15:03,187
une implémentation concrète 
de la même méthode,

330
00:15:03,187 --> 00:15:06,583
la méthode permettant d'afficher 
les informations relatives au réveil.

331
00:15:07,002 --> 00:15:09,446
Dans cette conception la classe 
MecanismeDouble

332
00:15:09,446 --> 00:15:11,216
est avant tout un mécanisme analogique

333
00:15:11,216 --> 00:15:15,575
qui contient un certain nombre d'éléments 
propres aux mécanismes digitaux,

334
00:15:15,575 --> 00:15:18,724
que l'on retrouve d'ailleurs dans 
la classe MecanismeDigital.

335
00:15:18,724 --> 00:15:21,917
Mais elle est tenue d'implémenter 
ces éléments propres

336
00:15:21,917 --> 00:15:27,142
aux mécanismes digitaux du fait qu'elle 
implémente l'interface ReveilDigital.

337
00:15:27,143 --> 00:15:31,256
Vous noterez ici que le fait
d'avoir introduit une interface

338
00:15:31,256 --> 00:15:33,799
rend la modélisation 
plus claire, plus évidente

339
00:15:33,799 --> 00:15:37,360
mais ne nous épargne pas 
les duplications de code

340
00:15:37,360 --> 00:15:41,395
liés à l'absence d'héritage multiple 
à proprement parler en Java.

341
00:15:41,395 --> 00:15:44,007
Si ces duplications de code 
devaient être trop nombreuses,

342
00:15:44,007 --> 00:15:47,923
il est clair que la modélisation
proposée sur la base de l'héritage

343
00:15:47,923 --> 00:15:50,137
devrait être discutée 
pour probablement se diriger

344
00:15:50,137 --> 00:15:53,919
vers une modélisation 
utilisant l'encapsulation.

345
00:15:53,919 --> 00:15:56,151
Par exemple, on pourrait imaginer

346
00:15:56,151 --> 00:15:57,879
l'introduction d'une classe 
FonctionnaliteDigitale

347
00:15:57,879 --> 00:15:59,793
regroupant les éléments communs

348
00:15:59,793 --> 00:16:02,229
aux fonctionnalités digitales justement,

349
00:16:02,229 --> 00:16:05,751
et dont chacune des classes 
MecanismeDigital et MecanismeDouble

350
00:16:05,751 --> 00:16:09,279
auraient une instance 
en guise d'attribut, par exemple.

351
00:16:09,279 --> 00:16:11,465
Si vous avez été attentifs
à l'évolution du code

352
00:16:11,465 --> 00:16:13,115
dans les transparents
qui ont précédé,

353
00:16:13,115 --> 00:16:16,805
vous aurez peut-être remarqué qu'il y a eu 
une modification des droits d'accès

354
00:16:16,805 --> 00:16:19,922
de la méthode toStringRéveil.

355
00:16:19,922 --> 00:16:21,834
Sauriez-vous dire pourquoi ?

356
00:16:21,834 --> 00:16:24,118
Voilà, nous en avons terminé 
avec la modélisation

357
00:16:24,118 --> 00:16:25,963
de notre hiérarchie de classes.

358
00:16:25,963 --> 00:16:27,584
Comme nous en avons
désormais l'habitude,

359
00:16:27,584 --> 00:16:29,292
voici un petit programme principal

360
00:16:29,292 --> 00:16:31,966
permettant de tester 
les derniers développements.

361
00:16:32,525 --> 00:16:35,724
Ces lignes de codes permettront 
de tester nos différents constructeurs

362
00:16:35,724 --> 00:16:38,123
dans les sous-classes
y compris ceux qui gèrent

363
00:16:38,123 --> 00:16:40,581
les valeurs par défaut non fournies.

364
00:16:40,581 --> 00:16:42,940
Ce constructeur construit un mécanisme

365
00:16:42,940 --> 00:16:46,340
analogique ayant pour
valeur de base 312,

366
00:16:46,340 --> 00:16:48,793
ayant comme heure
la valeur par défaut :

367
00:16:48,793 --> 00:16:52,468
c'est-à-dire 12.0,
et ayant ceci comme date.

368
00:16:52,468 --> 00:16:57,765
Et cet appel construit un mécanisme double
ayant pour valeur de base 543,

369
00:16:57,765 --> 00:17:02,094
ayant cette fois une heure explicite
d'initialisation 8 heures 20,

370
00:17:02,094 --> 00:17:07,202
une date - puisqu'il s'agit d'un mécanisme
double, il hérite du mécanisme analogique

371
00:17:07,202 --> 00:17:10,390
et donc a une date -
et d'une heure de réveil.

372
00:17:10,390 --> 00:17:12,798
Les lignes suivantes 
permettront de vérifier

373
00:17:12,798 --> 00:17:16,771
que les méthodes toString,
programmées aux différents niveaux,

374
00:17:16,771 --> 00:17:18,759
ont correctement été codées.

375
00:17:18,759 --> 00:17:21,472
Nous pouvons désormais construire
une montre dotée d'un coeur

376
00:17:21,472 --> 00:17:23,604
qui correspond à un mécanisme précis

377
00:17:23,604 --> 00:17:25,907
et nous pouvons, comme nous 
le faisions précédemment,

378
00:17:25,907 --> 00:17:28,391
ajouter des accessoires 
à cette montre.

379
00:17:28,391 --> 00:17:30,247
Nous pouvons compléter 
la méthode d'affichage

380
00:17:30,247 --> 00:17:32,065
en permettant d'afficher aussi son coeur

381
00:17:33,623 --> 00:17:35,888
puisque désormais nous disposons de
méthodes d'affichage pour les mécanismes

382
00:17:35,888 --> 00:17:39,297
et ceci nous permettra d'afficher 
une montre au complet.

383
00:17:39,297 --> 00:17:42,690
Le code de cette partie peut être 
téléchargé sur le site du cours.

384
00:17:43,540 --> 00:17:46,651
Et ceci conclut cette séquence 
sur la modélisation des mécanismes.
