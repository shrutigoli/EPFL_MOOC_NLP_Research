1
00:00:04,442 --> 00:00:07,094
Dans cette séquence, nous poursuivons
notre étude de cas sur les montres,

2
00:00:07,094 --> 00:00:10,363
suisses ou pas d'ailleurs, et nous allons
aborder l'affichage polymorphique

3
00:00:10,363 --> 00:00:12,386
des différents produits 
de notre hiérarchie.

4
00:00:12,888 --> 00:00:16,564
Pour rappel donc, à l'étape précédente
nous avions ébauché une hiérarchie

5
00:00:16,564 --> 00:00:20,686
de produits et nous nous intéressons
maintenant à comment faire en sorte

6
00:00:20,686 --> 00:00:23,878
que ces différents produits puissent 
s'afficher de façon polymorphique.

7
00:00:24,416 --> 00:00:27,942
Concrètement, un produit comme une montre,
un mécanisme ou un accessoire aura

8
00:00:27,942 --> 00:00:30,762
sa façon propre d'être affiché 
et nous voulons que cet affichage

9
00:00:30,762 --> 00:00:34,702
soit polymorphique, c'est-à-dire que, 
si nous mettons un objet, par exemple

10
00:00:34,702 --> 00:00:38,106
de type Montre, dans une variable
de type Produit et que nous invoquons

11
00:00:38,106 --> 00:00:43,030
la méthode d'affichage sur la variable
en question, eh bien l'affichage s'adapte

12
00:00:43,030 --> 00:00:46,256
automatiquement au type réel 
de l'instance stocké dans la variable.

13
00:00:46,568 --> 00:00:49,927
Chaque produit a donc sa propre façon
de s'afficher et nous nous posons

14
00:00:49,927 --> 00:00:53,468
la question de comment procéder pour
faire un affichage polymorphique.

15
00:00:53,468 --> 00:00:58,162
Alors, l'idée serait par exemple que
je déclare une variable de type produit,

16
00:00:59,342 --> 00:01:04,443
que je lui affecte la référence à un objet
de type Montre, une sous-classe donc

17
00:01:04,443 --> 00:01:11,260
de Produit, par exemple, 
et qu'ensuite je procède à l'affichage

18
00:01:19,473 --> 00:01:23,957
de cet objet "p" et j'aimerais donc avoir
toutes les caractéristiques de l'objet

19
00:01:23,957 --> 00:01:25,904
en question, mais qui s'adaptent
automatiquement au fait

20
00:01:25,904 --> 00:01:28,500
que l'objet est en réalité une montre,
c'est-à-dire que ce que j'ai stocké

21
00:01:28,500 --> 00:01:30,500
dans la variable "p" est une Montre.

22
00:01:30,683 --> 00:01:34,012
Le plus naturel est évidemment d'avoir
recours à la méthode toString,

23
00:01:34,012 --> 00:01:37,546
qui est invoquée automatiquement
par system.out.println,

24
00:01:37,546 --> 00:01:40,650
et si l'on veut que chaque produit soit
affichable à sa façon, il suffit

25
00:01:40,650 --> 00:01:44,762
de redéfinir cette méthode toString
de façon appropriée dans

26
00:01:44,762 --> 00:01:47,220
toutes les sous-classes où on estime 
nécessaire de le faire.

27
00:01:47,511 --> 00:01:50,386
Supposons que nous souhaitions
faire en sorte que l'affichage par défaut

28
00:01:50,451 --> 00:01:52,383
d'un produit en affiche le prix.

29
00:01:52,806 --> 00:01:56,259
Pour rappel, dans la séquence précédente,
nous avions décrit un produit

30
00:01:59,365 --> 00:02:03,521
comme étant caractérisé par un attribut
de type double

31
00:02:06,642 --> 00:02:08,925
qui correspondait à sa valeur de base,

32
00:02:08,925 --> 00:02:12,568
et la classe produit contenait 
également une méthode publique

33
00:02:13,378 --> 00:02:16,540
permettant le calcul 
du prix du produit

34
00:02:19,578 --> 00:02:23,641
et qui, dans la classe Produit, retournait
simplement la valeur de base.

35
00:02:26,560 --> 00:02:29,361
Dans la classe Produit, pour faire 
en sorte que la méthode toString

36
00:02:29,361 --> 00:02:33,810
affiche une représentation sous forme de
chaîne de caractères du prix du produit,

37
00:02:33,810 --> 00:02:38,215
on pourrait donc être tenté 
de faire afficher le prix

38
00:02:38,215 --> 00:02:41,683
en utilisant directement la valeur
de l'attribut, puisqu'on se dit

39
00:02:41,683 --> 00:02:45,792
que finalement, le prix n'est autre
que la valeur de base du produit.

40
00:02:46,244 --> 00:02:48,220
Cette façon de faire n'est 
cependant pas bonne.

41
00:02:48,220 --> 00:02:49,464
Sauriez-vous dire pourquoi ?

42
00:02:50,226 --> 00:02:52,503
Nous voulons en effet que la méthode
toString telle que définie

43
00:02:52,503 --> 00:02:55,703
dans la classe Produit détermine
le comportement par défaut,

44
00:02:55,703 --> 00:02:58,477
c'est-à-dire qu'elle soit capable 
d'afficher le prix,

45
00:02:58,477 --> 00:03:01,238
le prix correct du produit,
même si elle n'est pas redéfinie

46
00:03:01,238 --> 00:03:02,354
dans les sous-classes.

47
00:03:02,687 --> 00:03:06,094
Or, le calcul du prix d'un objet
correspond à sa valeur de base

48
00:03:06,094 --> 00:03:08,448
pour un produit de base,
mais ce n'est pas nécessairement

49
00:03:08,448 --> 00:03:11,760
le même calcul que l'on effectuerait
pour des sous-types de produits.

50
00:03:12,347 --> 00:03:14,729
Par exemple, le prix d'un bracelet
pourrait correspondre

51
00:03:14,729 --> 00:03:18,707
à une valeur de base; par contre, le prix
d'une montre pourrait être calculé

52
00:03:18,707 --> 00:03:21,368
comme étant la somme du prix
de tous ses composants.

53
00:03:21,969 --> 00:03:24,579
Et dans ce cas, si l'on applique 
la méthode to String à un objet

54
00:03:24,579 --> 00:03:27,902
de type Montre, on veut que ce soit
le prix de la montre qui s'affiche

55
00:03:27,902 --> 00:03:30,448
correctement, et non pas une valeur 
de base quelconque.

56
00:03:31,318 --> 00:03:34,501
La façon correcte de procéder ici 
est donc d'utiliser à la place de valeur

57
00:03:34,501 --> 00:03:37,226
la méthode prix, laquelle pourra 
bien sûr elle-même avoir

58
00:03:37,226 --> 00:03:39,020
un comportement polymorphique.

59
00:03:39,731 --> 00:03:42,339
Enfin, vous aurez noté au passage
qu'ici il a été nécessaire

60
00:03:42,339 --> 00:03:47,425
de convertir le double retourné
par prix en une string

61
00:03:47,425 --> 00:03:48,828
au moyen de cette tournure.

62
00:03:49,550 --> 00:03:51,361
Finalisons maintenant 
notre classe Produit.

63
00:03:51,719 --> 00:03:54,122
Une des premières choses à laquelle
il est naturel de penser,

64
00:03:54,122 --> 00:03:56,790
est qu'un produit n'a pas d'existence
en tant que tel.

65
00:03:56,790 --> 00:03:59,288
Il s'agit d'une entité abstraite 
dans notre conception.

66
00:03:59,288 --> 00:04:02,084
Nous pouvons rendre ceci clair,
au niveau de la conception,

67
00:04:02,084 --> 00:04:04,954
en étiquetant la classe Produit
comme étant abstraite.

68
00:04:05,629 --> 00:04:09,108
Supposons maintenant que l'on souhaite
imposer le fait que la valeur d'un produit,

69
00:04:09,108 --> 00:04:11,503
une fois initialisée, ne puisse plus
changer de valeur

70
00:04:11,503 --> 00:04:13,305
en cours d'existence du produit.

71
00:04:13,698 --> 00:04:18,742
Donc, l'idée serait de pouvoir donner
une valeur initiale à cet attribut,

72
00:04:18,742 --> 00:04:21,268
mais ensuite de ne pas permettre
sa modification.

73
00:04:21,517 --> 00:04:25,067
Ceci est possible en étiquetant
l'attribut en question

74
00:04:26,027 --> 00:04:27,060
comme étant final.

75
00:04:27,304 --> 00:04:29,595
Si valeur avait été un attribut
d'un type objet, donc

76
00:04:29,595 --> 00:04:32,924
autre chose qu'un type de base,
est-ce que le fait de l'étiqueter en final

77
00:04:32,924 --> 00:04:35,621
empêche toute modification 
de cet attribut ?

78
00:04:36,231 --> 00:04:39,614
Supposons enfin que l'on souhaite imposer
le fait qu'un produit ait, par défaut,

79
00:04:39,614 --> 00:04:44,172
une valeur de base nulle, ceci peut être
réalisé en ajoutant à la classe Produit

80
00:04:44,172 --> 00:04:46,963
un constructeur par défaut 
qui prendrait le soin

81
00:04:46,963 --> 00:04:49,333
d'initialiser la valeur
à la valeur nulle.

82
00:04:50,317 --> 00:04:53,050
La surcharge, et notamment ici 
la surcharge des constructeurs

83
00:04:53,050 --> 00:04:55,882
est une façon assez typique de faire
en Java pour donner des valeurs

84
00:04:55,882 --> 00:04:57,437
par défaut à certains paramètres.

85
00:04:57,948 --> 00:05:00,685
Voici donc à quoi ressemble 
notre classe Produit au final.

86
00:05:00,685 --> 00:05:03,527
Nous l'avons déclarée comme "abstraite"
parce que nous ne voulons pas

87
00:05:03,527 --> 00:05:05,939
que des produits soient instanciables 
en tant que tels,

88
00:05:05,939 --> 00:05:08,084
ils n'ont pas d'existence concrète
en tant que tels :

89
00:05:08,084 --> 00:05:10,981
un bracelet sera instanciable,
une montre sera instanciable,

90
00:05:10,981 --> 00:05:12,770
mais pas un produit en tant que tel.

91
00:05:12,917 --> 00:05:16,248
Une instance de Produit est 
caractérisée par sa valeur de base.

92
00:05:16,248 --> 00:05:19,567
Nous avons étiqueté cet attribut
comme final, ce qui signifie

93
00:05:19,567 --> 00:05:23,245
qu'une fois qu'il sera initialisé
par l'un des constructeurs,

94
00:05:23,245 --> 00:05:25,469
cet attribut ne pourra plus
changer de valeur.

95
00:05:25,796 --> 00:05:29,619
Donc un produit a une valeur de base
constante tout au long de son existence.

96
00:05:30,378 --> 00:05:34,012
Un produit peut donc être initialisé
de deux façons possibles :

97
00:05:34,012 --> 00:05:37,733
soit en utilisant un constructeur
prenant en argument une valeur de base

98
00:05:37,733 --> 00:05:39,223
à donner à l'attribut,

99
00:05:39,223 --> 00:05:42,812
soit au moyen du constructeur par défaut,
auquel cas la valeur de base

100
00:05:42,812 --> 00:05:44,080
est mise à zéro.

101
00:05:44,540 --> 00:05:48,484
Au vu de l'existence de ces constructeurs,
est-il possible d'écrire quelque chose

102
00:05:48,484 --> 00:05:52,103
comme ceci : donc déclarer 
une variable de type Produit,

103
00:05:52,103 --> 00:05:54,288
et l'initialiser comme ceci, par exemple ?

104
00:05:59,110 --> 00:06:02,179
La réponse est évidemment non, 
du fait que cette classe est abstraite

105
00:06:02,179 --> 00:06:03,664
et donc non instanciable.

106
00:06:04,181 --> 00:06:07,878
Ces constructeurs seront uniquement
utilisés par les constructeurs

107
00:06:07,878 --> 00:06:10,762
des sous-classes concrètement 
instanciables de produits.

108
00:06:11,469 --> 00:06:16,005
La classe Produit offre une redéfinition
de la méthode toString héritée de object,

109
00:06:16,005 --> 00:06:18,756
et le but est de pouvoir utiliser 
cette méthode toString

110
00:06:18,756 --> 00:06:22,119
de façon polymorphique, c'est-à-dire
potentiellement de la redéfinir

111
00:06:22,119 --> 00:06:23,852
dans les sous-classes
de Produit.

112
00:06:23,852 --> 00:06:27,412
Elle offre néanmoins une définition
par défaut de base qui consiste

113
00:06:27,412 --> 00:06:31,408
à afficher le prix, transformé en 
chaîne de caractères.

114
00:06:31,408 --> 00:06:35,489
Le prix est calculé au moyen d'une méthode
elle-même polymorphique,

115
00:06:35,489 --> 00:06:37,931
c'est-à-dire une méthode 
qui va pouvoir être redéfinie

116
00:06:37,931 --> 00:06:40,753
dans les sous-classes de produits
pour s'adapter à la nature réelle

117
00:06:40,753 --> 00:06:42,403
de l'instance à laquelle elle s'applique.

118
00:06:42,881 --> 00:06:46,337
De ce fait, lorsqu'on appliquera
la méthode toString à une Montre

119
00:06:46,337 --> 00:06:48,759
stockée dans une variable
de type Produit,

120
00:06:48,759 --> 00:06:52,363
c'est bel et bien la méthode prix
de la montre qui va être invoquée,

121
00:06:52,363 --> 00:06:55,496
et de ce fait, l'affichage va être correct
du point de vue du prix.

122
00:06:55,673 --> 00:06:58,144
Et ceci conclut notre séquence
sur la définition des produits

123
00:06:58,144 --> 00:06:59,623
et leur affichage polymorphique.
