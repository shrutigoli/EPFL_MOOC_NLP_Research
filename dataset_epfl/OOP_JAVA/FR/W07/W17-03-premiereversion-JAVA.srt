1
00:00:03,715 --> 00:00:05,237
Dans les séquences vidéos précédentes,

2
00:00:05,237 --> 00:00:08,072
nous vous avons présenté le problème
général de l'étude de cas

3
00:00:08,072 --> 00:00:11,193
à laquelle nous nous intéressons ici,
à savoir modéliser des montres

4
00:00:11,193 --> 00:00:13,657
avec différents mécanismes,
différents accessoires.

5
00:00:13,657 --> 00:00:15,913
Puis nous avons abordé 
le problème plus spécifique

6
00:00:15,913 --> 00:00:17,826
de l'affichage polymorphique.

7
00:00:17,826 --> 00:00:20,274
Nous avons aussi complété
la classe Produit.

8
00:00:20,274 --> 00:00:22,382
Dans cette séquence vidéo-ci,
nous allons construire

9
00:00:22,382 --> 00:00:24,912
une première version 
opérationnelle de notre code,

10
00:00:24,912 --> 00:00:26,918
en ajoutant des accessoires aux montres

11
00:00:26,918 --> 00:00:30,013
et en définissant donc, justement,
plusieurs de ces accessoires.

12
00:00:30,013 --> 00:00:32,636
Commençons donc
par l'ajout d'accesoires

13
00:00:32,636 --> 00:00:34,884
à la classe Montre qui,
je vous le rappelle,

14
00:00:34,884 --> 00:00:39,155
héritait de Produit et puis
avait un Mécanisme

15
00:00:39,155 --> 00:00:41,371
et surtout, ce qui va nous intéresser ici,

16
00:00:41,371 --> 00:00:45,766
un tableau dynamique d'accessoires
que l'on a appelé ici « Accessoire ».

17
00:00:45,766 --> 00:00:47,847
Et l'idée c'est donc que l'on puisse

18
00:00:47,847 --> 00:00:51,124
rajouter des élements
à ce tableau dynamique

19
00:00:51,124 --> 00:00:54,796
en faisant par exemple pour une montre,
instance de la classe montre

20
00:00:54,796 --> 00:00:58,231
Montre.ajouter, par exemple, « new Bracelet »

21
00:00:58,231 --> 00:01:02,422
où je vous rappelle que « Bracelet »
est une sous-classe d'Accessoire.

22
00:01:02,422 --> 00:01:05,912
Et donc on voudrait que 
ceci rajoute un nouveau bracelet

23
00:01:05,912 --> 00:01:08,086
à la collection d'accessoires,

24
00:01:08,086 --> 00:01:10,803
un « Bracelet » étant un « Accessoire »

25
00:01:10,803 --> 00:01:13,980
qui peut être mis dans
une « collection d'Accessoires ».

26
00:01:13,980 --> 00:01:17,479
Voyons maintenant comment définir
cette méthode « ajouter ».

27
00:01:17,479 --> 00:01:20,036
Ici, nous allons faire 
une solution très très simple

28
00:01:20,036 --> 00:01:22,060
sur laquelle nous reviendrons plus tard,

29
00:01:22,060 --> 00:01:25,650
dans la dernière vidéo de
cette série de séquences vidéos,

30
00:01:25,650 --> 00:01:28,521
qui abordera donc 
la notion de « copie profonde ».

31
00:01:28,521 --> 00:01:30,356
Mais pour l'instant,
on fait simplement

32
00:01:30,356 --> 00:01:32,191
une copie de surface, ici,

33
00:01:32,191 --> 00:01:35,764
en ajoutant simplement
la référence vers un accessoire

34
00:01:35,764 --> 00:01:39,417
que l'on a reçu au tableau
dynamique d'accessoires

35
00:01:39,417 --> 00:01:41,906
qui s'appelle « accessoires », au pluriel.

36
00:01:42,506 --> 00:01:44,215
Essayons maintenant de faire

37
00:01:44,215 --> 00:01:46,676
une première version
opérationnelle du programme.

38
00:01:46,676 --> 00:01:49,589
Essayons donc de finaliser
ce que nous avons écrit jusqu'ici.

39
00:01:49,589 --> 00:01:52,502
Et pour le moment, sans
absolument aucun mécanisme

40
00:01:52,502 --> 00:01:56,024
et sans faire de copie de montre,
nous laissons ces deux points

41
00:01:56,024 --> 00:01:59,151
pour les deux prochaines
séquences vidéos.

42
00:01:59,151 --> 00:02:02,536
Donc, pour pouvoir finaliser le programme
que nous avons jusqu'à maintenant,

43
00:02:02,536 --> 00:02:05,207
il nous faudrait quand même quelques
accessoires un petit plus concrets.

44
00:02:05,207 --> 00:02:07,243
Il faudrait terminer la classe Montre

45
00:02:07,243 --> 00:02:09,765
qui pour l'instant n'est pas 
encore tout à fait opérationnelle

46
00:02:09,765 --> 00:02:13,683
et puis, bien sûr, utiliser
tout ceci dans un « main » typique.

47
00:02:13,683 --> 00:02:16,187
Nous allons reprendre ces points
les uns après les autres

48
00:02:16,187 --> 00:02:18,822
à commencer par 
quelques accessoires.

49
00:02:18,822 --> 00:02:23,702
Pour rappel, nous avons une classe
« Accessoire » qui est un « Produit ».

50
00:02:23,702 --> 00:02:25,636
Et décidons, par exemple,

51
00:02:25,636 --> 00:02:28,638
que nous ayons au niveau des accessoires

52
00:02:28,638 --> 00:02:31,241
un nom pour pouvoir les désigner.

53
00:02:31,241 --> 00:02:34,316
Pour ceci, on va dire
que l'on a un nom

54
00:02:34,316 --> 00:02:36,630
qui ne changera pas 
une fois qu'il a été fixé

55
00:02:36,630 --> 00:02:38,919
par le constructeur.

56
00:02:38,919 --> 00:02:42,477
Et nous allons donc ajouter 
un constructeur à la classe Accessoire

57
00:02:42,477 --> 00:02:47,174
qui prendra donc un nom pour
pouvoir nommer cet accessoire.

58
00:02:47,174 --> 00:02:50,224
Et puis, il ne faut pas oublier 
que tout produit peut être vendu

59
00:02:50,224 --> 00:02:53,550
et a donc un prix et recevra 
un second paramètre ici,

60
00:02:53,550 --> 00:02:58,579
pour pouvoir initialiser la valeur 
de base du prix du produit.

61
00:02:58,579 --> 00:03:02,073
Le constructeur d'Accessoire
va commencer par appeler

62
00:03:02,073 --> 00:03:06,117
le constructeur de la super-classe
Produit, en passant ici,

63
00:03:06,117 --> 00:03:09,335
le paramètre valeurDeBase
que l'on a reçu.

64
00:03:09,335 --> 00:03:11,472
Et puis ensuite, on initialisera

65
00:03:11,472 --> 00:03:15,065
l'attribut « nom » avec le nom reçu.

66
00:03:15,065 --> 00:03:16,858
Voilà donc pour le constructeur

67
00:03:16,858 --> 00:03:19,264
que l'on a décidé de donner 
à tous les accessoires.

68
00:03:19,264 --> 00:03:21,369
Et décidons maintenant 
d'une façon d'afficher

69
00:03:21,369 --> 00:03:23,679
les accessoires, car
je vous rappelle que

70
00:03:23,679 --> 00:03:25,546
tous les produits sont capables

71
00:03:25,546 --> 00:03:27,848
de s'afficher de façon polymorphique.

72
00:03:27,848 --> 00:03:31,395
Nous allons donc, ici,
redéfinir la méthode toString

73
00:03:31,395 --> 00:03:33,682
que nous avons hérité de Produit.

74
00:03:33,682 --> 00:03:35,884
On dit qu'on l'a « redéfinit » en ajoutant

75
00:03:35,884 --> 00:03:39,082
la notation, ici, « override » et décidons

76
00:03:39,082 --> 00:03:40,817
que, par exemple,
il s'affiche en indiquant

77
00:03:40,817 --> 00:03:42,704
le nom et leur coût.

78
00:03:42,704 --> 00:03:44,699
Donc on va afficher
simplement le nom

79
00:03:44,699 --> 00:03:46,593
puis on va indiquer qu'il coûte

80
00:03:46,593 --> 00:03:49,266
et nous savons déjà afficher le prix

81
00:03:49,266 --> 00:03:53,481
en appelant directement la méthode
de la super-classe Produit.

82
00:03:53,481 --> 00:03:55,974
Donc ici on utilise le mot-clé « super »

83
00:03:55,974 --> 00:03:58,994
pour appeler la méthode héritée 
de la super-classe Produit.

84
00:03:58,994 --> 00:04:01,641
Parce que, bien sûr, 
si l'on écrit toString tout seul

85
00:04:01,641 --> 00:04:04,974
sans démasquage ici,
ce sera la méthode toString

86
00:04:04,974 --> 00:04:08,207
de la classe en question,
et on aurait une récursion infinie :

87
00:04:08,207 --> 00:04:10,222
ToString s'appelerait elle-même

88
00:04:10,222 --> 00:04:12,378
et donc pour, dans la méthode toString

89
00:04:12,378 --> 00:04:15,137
de la classe Accessoire, 
appeler la méthode toString,

90
00:04:15,137 --> 00:04:16,947
héritée de la super-classe Produit,

91
00:04:16,947 --> 00:04:21,094
il faut ici donc démasquer 
cette méthode toString.

92
00:04:21,094 --> 00:04:24,280
Décidons enfin que
le prix des accessoires

93
00:04:24,280 --> 00:04:27,757
est le « même » que le prix
d'un produit usuel,

94
00:04:27,757 --> 00:04:29,277
c'est-à-dire un produit général

95
00:04:29,277 --> 00:04:31,547
tel que nous l'avons conçu
tout en haut de la hiérarchie,

96
00:04:31,547 --> 00:04:32,971
et donc à ce moment-là,

97
00:04:32,971 --> 00:04:35,157
là, nous n'avons rien du tout à faire

98
00:04:35,157 --> 00:04:37,040
puisque la méthode Prix

99
00:04:37,040 --> 00:04:39,540
que nous avons hérité
de la classe Produit

100
00:04:39,540 --> 00:04:42,981
suffit ici, et donc on n'a pas 
besoin de la redéfinir

101
00:04:42,981 --> 00:04:44,959
dans la classe Accessoire.

102
00:04:44,959 --> 00:04:48,851
Nous avons donc ici une classe
Accessoire tout à fait opérationnelle

103
00:04:48,851 --> 00:04:51,198
et qui correspond 
à ce que nous souhaitons.

104
00:04:51,198 --> 00:04:53,369
Définissons donc maintenant
quelques accessoires,

105
00:04:53,369 --> 00:04:54,934
donc, par exemple, un « Bracelet ».

106
00:04:54,934 --> 00:04:57,285
Un « Bracelet » est un « Accessoire »

107
00:04:57,285 --> 00:05:00,507
donc on va avoir ici 
une relation d'héritage.

108
00:05:00,507 --> 00:05:03,451
Au niveau des accessoires, 
admettons que l'on souhaite

109
00:05:03,451 --> 00:05:07,040
que leur nom -- je vous rappelle 
que les accessoires ont un nom,

110
00:05:07,040 --> 00:05:09,363
donc tous les accessoires 
vont hériter ce nom --

111
00:05:09,363 --> 00:05:11,017
admettons que l'on souhaite

112
00:05:11,017 --> 00:05:13,179
que chacun des accessoires
ait, comme ça, un nom

113
00:05:13,179 --> 00:05:16,058
qui marque effectivement
ce que c'est, donc par exemple,

114
00:05:16,058 --> 00:05:18,703
le nom d'un bracelet 
va commencer par « bracelet »,

115
00:05:18,703 --> 00:05:21,363
le nom d'un fermoir va,
par exemple, commencer par « fermoir ».

116
00:05:21,363 --> 00:05:24,035
Et donc on va forcer ceci 
au niveau du constructeur

117
00:05:24,035 --> 00:05:26,177
donc, par exemple,
pour la sous-classe Bracelet

118
00:05:26,177 --> 00:05:28,647
de la classe Accessoire,
on recevra donc le nom,

119
00:05:28,647 --> 00:05:31,531
qui sera le complément 
qu'on va rajouter ici,

120
00:05:31,531 --> 00:05:33,103
derrière le bracelet.

121
00:05:33,103 --> 00:05:36,985
Donc, par exemple, « en cuir »

122
00:05:36,985 --> 00:05:40,749
pour que le nom complet 
soit « bracelet en cuir »

123
00:05:40,749 --> 00:05:43,777
et puis comme deuxième
paramètre le prix,

124
00:05:43,777 --> 00:05:47,699
que nous passons aussi
au constructeur de la super-classe.

125
00:05:47,699 --> 00:05:51,840
Donc, de même, on pourrait définir
un Fermoir qui hérite d'Accessoire

126
00:05:51,840 --> 00:05:55,372
dans lequel on définit un constructeur
qui prend un complément du nom « fermoir »

127
00:05:55,372 --> 00:05:57,878
et qui prend un prix pour pouvoir 
appeler le constructeur

128
00:05:57,878 --> 00:05:59,469
de la super-classe Accessoire

129
00:05:59,469 --> 00:06:00,976
où le nom complet sera donc

130
00:06:00,976 --> 00:06:03,701
« fermoir » avec ce complément 
que l'on a reçu comme premier paramètre

131
00:06:03,701 --> 00:06:07,332
et comme deuxième paramètre
le prix que nous avons reçu

132
00:06:07,332 --> 00:06:09,474
avec toujours le destructeur virtuel.

133
00:06:10,044 --> 00:06:13,045
Voilà, nous en avons donc ici 
terminé avec les accessoires.

134
00:06:13,045 --> 00:06:16,028
Essayons aussi de rendre 
la classe Montre utilisable

135
00:06:16,028 --> 00:06:18,584
sans les mécanismes 
et sans la copie toujours,

136
00:06:18,584 --> 00:06:20,564
que nous laissons de côté pour le moment.

137
00:06:20,564 --> 00:06:24,505
Nous avons à ce stade donc simplement
défini le contenu de la classe Montre

138
00:06:24,505 --> 00:06:27,772
dans laquelle nous avons donc
cette méthode « ajouter »,

139
00:06:27,772 --> 00:06:31,787
qui nous permet de rajouter
des accessoires à nos montres.

140
00:06:31,787 --> 00:06:35,932
Commençons donc par munir
notre classe Montre d'un constructeur.

141
00:06:35,932 --> 00:06:38,782
Pour l'instant, contentons-nous
d'un constructeur par défaut

142
00:06:38,782 --> 00:06:40,335
que nous redéfinissons quand même

143
00:06:40,335 --> 00:06:42,518
car le constructeur « par défaut par défaut »

144
00:06:42,518 --> 00:06:44,583
rendrait nulle cette référence,

145
00:06:44,583 --> 00:06:48,824
alors que nous, nous préférons avoir ici
un tableau dynamique vide

146
00:06:48,824 --> 00:06:53,357
que nous pourrons ensuite remplir
avec notre méthode ajouter.

147
00:06:53,357 --> 00:06:55,301
Voilà pour la construction des montres.

148
00:06:55,301 --> 00:06:58,036
Décidons ensuite du calcul 
du prix des montres

149
00:06:58,036 --> 00:07:02,270
et admettons que ce soit la somme
des prix de ses accessoires.

150
00:07:02,270 --> 00:07:05,292
Donc pour ceci nous allons
redéfinir la méthode « prix » :

151
00:07:05,292 --> 00:07:10,219
« override » cette méthode « prix »
héritée de la super-classe Produit.

152
00:07:10,219 --> 00:07:16,509
Donc nous allons décider que, au départ,
le prix d'une montre c'est le prix de base

153
00:07:16,509 --> 00:07:20,794
que nous récupérons au travers 
de la méthode « prix » d'origine,

154
00:07:20,794 --> 00:07:23,452
héritée de la super-classe Produit.

155
00:07:23,452 --> 00:07:27,492
Puis, à ce prix de départ, 
nous allons rajouter

156
00:07:27,492 --> 00:07:30,642
l'ensemble des prix 
des différents accessoires.

157
00:07:30,642 --> 00:07:33,779
Donc, pour ceci, nous parcourons 
la liste des accessoires,

158
00:07:33,779 --> 00:07:39,339
et nous rajoutons au prix 
que nous avons au départ initialisé

159
00:07:39,339 --> 00:07:42,918
à chaque fois le prix, 
c'est-à-dire l'appel à la méthode « prix »,

160
00:07:42,918 --> 00:07:47,298
et enfin donc, on retourne le prix 
que l'on vient de calculer.

161
00:07:47,298 --> 00:07:50,877
Décidons enfin comment
afficher les montres.

162
00:07:50,877 --> 00:07:53,317
Par exemple, nous décidons
d'avoir un message

163
00:07:53,317 --> 00:07:55,074
pour dire qu'une montre est composée,

164
00:07:55,074 --> 00:07:59,009
ensuite de la liste de
ses différents accessoires, etc.

165
00:07:59,009 --> 00:08:03,070
et puis, à la fin, on affiche
le prix total de la montre.

166
00:08:03,070 --> 00:08:06,994
Pour cela, on va par exemple
ajouter une méthode afficher,

167
00:08:06,994 --> 00:08:10,774
que l'on va définir en commençant 
donc l'affichage par :

168
00:08:10,774 --> 00:08:12,708
« une montre composée de »

169
00:08:12,708 --> 00:08:18,021
et ensuite en parcourant l'ensemble 
des accessoires de la montre.

170
00:08:18,021 --> 00:08:20,743
Pour chacun des accessoires, 
on affiche cette petite étoile

171
00:08:20,743 --> 00:08:25,621
et puis on affiche, ici,
l'accessoire en question.

172
00:08:25,621 --> 00:08:28,612
Et enfin, on termine par l'affichage
du message « Prix total »

173
00:08:28,612 --> 00:08:32,498
et l'appel à la méthode « prix » de la montre,

174
00:08:32,498 --> 00:08:36,856
qui va nous calculer le prix total, 
comme expliqué précédemment.

175
00:08:37,166 --> 00:08:39,354
Enfin, pour avoir 
un programme exécutable,

176
00:08:39,354 --> 00:08:42,407
il nous faut bien un « main » que 
nous allons donc ici utiliser

177
00:08:42,407 --> 00:08:45,770
pour tester les implémentations
des objets que nous venons de créer.

178
00:08:45,770 --> 00:08:49,137
Et pour ceci, dans le main, nous allons
déclarer comme ceci une montre.

179
00:08:49,137 --> 00:08:51,035
Nous pouvons tout à fait faire ceci

180
00:08:51,035 --> 00:08:54,754
puisque nous avons un constructeur
par défaut, à ce stade-là.

181
00:08:54,754 --> 00:09:00,217
Ensuite dans la montre, nous ajoutons
différents accesoires, comme ceci.

182
00:09:00,217 --> 00:09:02,781
Chacun des accessoires
a son constructeur,

183
00:09:02,781 --> 00:09:07,165
avec le nom ou le complément
du nom, et puis son prix.

184
00:09:07,165 --> 00:09:09,746
Donc on ajoute comme cela,
par exemple, quatre accessoires

185
00:09:09,746 --> 00:09:14,264
et enfin, on affiche un message
pour afficher la montre ici.

186
00:09:14,264 --> 00:09:17,799
Et donc l'exécution de ce programme
va conduire au résultat suivant :

187
00:09:17,799 --> 00:09:20,024
on va d'abord afficher
le message « Montre m »

188
00:09:20,024 --> 00:09:23,031
puis ensuite, on va rentrer dans 
la méthode « afficher » des montres

189
00:09:23,031 --> 00:09:26,360
qui va donc nous afficher 
« Une montre composée de : »

190
00:09:26,360 --> 00:09:29,500
et ensuite une boucle sur 
ses différents accessoires,

191
00:09:29,500 --> 00:09:32,796
et puis qui termine donc par 
l'affichage du prix total,

192
00:09:32,796 --> 00:09:35,515
somme des prix 
des différents accessoires.

193
00:09:35,515 --> 00:09:38,318
Pour ceux qui le souhaitent, 
l'entièreté du code est disponible

194
00:09:38,318 --> 00:09:39,854
sur le site du cours.

195
00:09:39,854 --> 00:09:42,178
Voilà, ceci termine la présentation

196
00:09:42,178 --> 00:09:44,594
de cette première version
opérationnelle de notre code.

197
00:09:44,594 --> 00:09:46,497
Il reste encore deux chapitres à aborder

198
00:09:46,497 --> 00:09:48,338
dans les deux séquences vidéos suivantes.

199
00:09:48,338 --> 00:09:50,592
Tout d'abord, donc tous ces mécanismes

200
00:09:50,592 --> 00:09:53,303
et leurs dépendances,
et la notion « d'interface »,

201
00:09:53,303 --> 00:09:55,979
et puis enfin la notion 
de « copie d'une montre »,

202
00:09:55,979 --> 00:09:59,993
comment faire une copie profonde
des différents accessoires d'une montre.
