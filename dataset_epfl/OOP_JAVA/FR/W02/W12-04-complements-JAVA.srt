1
00:00:04,594 --> 00:00:06,401
Le but de cette séquence 
est de vous présenter

2
00:00:06,401 --> 00:00:07,988
quelques compléments sur les objets.

3
00:00:07,988 --> 00:00:10,249
Nous savons construire des objets,
nous allons nous intéresser

4
00:00:10,249 --> 00:00:11,973
à ce qu'il se passe en fin de vie
de ces objets.

5
00:00:11,973 --> 00:00:15,662
Nous allons aussi voir que de par
le fait que les objets sont manipulés

6
00:00:15,932 --> 00:00:18,740
via des références, cela a
une incidence sur la façon

7
00:00:18,740 --> 00:00:21,789
de les afficher, de les affecter
et de les comparer.

8
00:00:22,168 --> 00:00:24,379
Commençons par le premier point,
la fin de vie des objets.

9
00:00:24,379 --> 00:00:26,581
Et tout d'abord, que veut dire 
la fin de vie d'un objet ?

10
00:00:27,523 --> 00:00:31,573
En Java, un objet est en fin de vie
lorsque la référence

11
00:00:31,573 --> 00:00:35,304
qui lui est associée n'est plus utilisable
nul part dans le programme

12
00:00:35,304 --> 00:00:37,686
Voyons ceci sur un exemple simple.

13
00:00:37,686 --> 00:00:40,307
Cet exemple que vous avez 
sous les yeux est un peu artificiel

14
00:00:40,307 --> 00:00:42,521
mais il a le mérite
de la simplicité.

15
00:00:42,954 --> 00:00:47,289
On y voit une méthode <i>main</i>
qui appelle une méthode auxiliaire

16
00:00:47,289 --> 00:00:53,042
« afficherUnRectangle » et cette méthode
ne fait rien d'autre que créer localement

17
00:00:53,042 --> 00:00:58,930
un objet « r » de type <i>Rectangle</i>
en l'initialisant de manière appropriée

18
00:00:58,930 --> 00:01:02,088
et d'afficher le rectangle en question.

19
00:01:02,088 --> 00:01:05,707
La référence associée à cet objet
qui est créé dans la méthode

20
00:01:05,707 --> 00:01:08,814
« afficherUnRectangle » n'est utilisable
nul part ailleurs.

21
00:01:08,814 --> 00:01:12,718
Nous n'affectons jamais cette référence

22
00:01:12,718 --> 00:01:14,271
à une autre variable accessible plus globalement.

23
00:01:14,704 --> 00:01:16,878
Du coup, quand la méthode
« afficherUnRectangle»

24
00:01:16,878 --> 00:01:21,328
a terminé son exécution, il n'est plus
possible d'avoir plus loin

25
00:01:21,328 --> 00:01:25,926
accès à la référence créée localement
à l'intérieur de la méthode.

26
00:01:26,730 --> 00:01:29,102
En clair, lorsque la méthode
« afficherUnRectangle »

27
00:01:29,102 --> 00:01:32,839
a terminé son exécution, l'objet « r »
qui est local à cette méthode

28
00:01:32,839 --> 00:01:36,647
est en fin de vie car la référence 
qui lui est associée

29
00:01:36,647 --> 00:01:38,327
n'est plus utilisée nul part.

30
00:01:38,901 --> 00:01:42,458
Et donc, la mémoire qui est associée
à cet objet doit être récupérée

31
00:01:42,458 --> 00:01:46,103
de sorte à pouvoir être mise à disposition
d'autres programmes

32
00:01:46,103 --> 00:01:47,864
ou d'autres portions du même programme.

33
00:01:48,742 --> 00:01:51,904
Dans certains langages, 
la récupération de la mémoire

34
00:01:51,904 --> 00:01:55,217
doit être explicitement 
prise en charge par le programmeur.

35
00:01:55,217 --> 00:01:56,910
En Java, ce n'est pas le cas.

36
00:01:56,910 --> 00:02:01,424
Il existe un programme particulier qui
s'appelle le programme « ramasse-miettes »

37
00:02:01,424 --> 00:02:04,993
ou « garbage collection » qui se charge
justement de la récupération

38
00:02:04,993 --> 00:02:08,208
de la mémoire associée aux objets

39
00:02:08,208 --> 00:02:09,653
qui n'ont plus besoin 
d'être utilisés par un programme.

40
00:02:10,125 --> 00:02:13,273
Ce processus de ramasse-miettes est en
principe complètement transparent.

41
00:02:13,273 --> 00:02:16,326
Vous n'avez pas à vous en préoccuper,
surtout à ce stade

42
00:02:16,326 --> 00:02:18,515
de votre apprentissage de la programmation

43
00:02:19,273 --> 00:02:21,723
Le programme ramasse-miettes,
<i>garbage collector</i>,

44
00:02:21,723 --> 00:02:25,189
est donc lancé régulièrement 
pendant l'exécution d'un programme Java.

45
00:02:25,189 --> 00:02:28,697
Ce qu'il faut retenir de tout ceci,
c'est que le programmeur Java

46
00:02:28,697 --> 00:02:32,271
n'a pas à libérer explicitement
la mémoire qu'il utilise.

47
00:02:32,271 --> 00:02:35,058
Sachez que ce n'est pas le cas dans
tous les langages.

48
00:02:36,031 --> 00:02:38,534
Passons maintenant au point suivant,
la manipulation des objets

49
00:02:38,534 --> 00:02:41,461
via des références, et les implications
que cela peut avoir.

50
00:02:42,532 --> 00:02:44,839
A chaque fois que nous créons
un objet dans un programme Java,

51
00:02:44,839 --> 00:02:48,683
nous avons vu qu'en réalité cet objet
est manipulé via une référence.

52
00:02:48,683 --> 00:02:52,261
Lorsque je déclare une variable
de type <i>Rectangle</i>

53
00:02:52,261 --> 00:02:55,902
la situation en mémoire est la suivante.

54
00:02:56,660 --> 00:02:59,962
Ma variable de type <i>Rectangle</i>,
appelons-la « rect »

55
00:02:59,962 --> 00:03:03,220
est en réalité une référence
vers un objet.

56
00:03:04,659 --> 00:03:06,415
Avec ces différents attributs.

57
00:03:07,228 --> 00:03:08,791
On s'intéresse ici au problème suivant.

58
00:03:08,791 --> 00:03:12,529
On suppose que l'on souhaite créer
un objet « b » à partir d'un objet « a »

59
00:03:12,529 --> 00:03:16,067
du même type avec la contrainte
que « a » et « b »

60
00:03:16,067 --> 00:03:18,622
doivent être pour nous 
deux objets distincts en mémoire.

61
00:03:18,622 --> 00:03:21,455
Comment le faire proprement en Java
sachant que les objets

62
00:03:21,455 --> 00:03:23,088
sont manipulés via des références ?

63
00:03:24,121 --> 00:03:25,370
Prenons un exemple concret.

64
00:03:25,370 --> 00:03:29,266
Ici le rôle de notre objet « a »
est tenu par un rectangle « r1 ».

65
00:03:29,266 --> 00:03:34,202
On souhaite à partir de ce rectangle « r1 »
créer un autre rectangle,

66
00:03:34,202 --> 00:03:38,146
donc du même type, mais on souhaite 
que les deux objets « r2 » et « r1 »

67
00:03:38,146 --> 00:03:40,124
soient deux objets distincts en mémoire.

68
00:03:40,710 --> 00:03:44,829
Alors en Java, créer un objet « r2 »
à partir d'un objet « r1 » en utilisant

69
00:03:44,829 --> 00:03:48,416
en utilisant l'affectation 
ne va pas nous permettre d'atteindre

70
00:03:48,416 --> 00:03:51,329
l'objectif d'avoir deux objets distincts en mémoire.

71
00:03:52,089 --> 00:03:53,680
Voyons concrètement pourquoi.

72
00:03:53,680 --> 00:03:56,491
Lorsque j'exécute cette
ligne de code,

73
00:03:58,000 --> 00:03:59,855
J'ai donc en mémoire 
la situation suivante,

74
00:03:59,855 --> 00:04:01,282
au terme de l'exécution,

75
00:04:01,816 --> 00:04:05,451
J'ai dans ma variable « r1 »
la référence vers un objet rectangle

76
00:04:05,451 --> 00:04:10,089
qui a des valeurs particulières pour
ses champs largeur et hauteur.

77
00:04:11,743 --> 00:04:14,711
Lorsque ensuite j'exécute 
cette ligne de code,

78
00:04:16,311 --> 00:04:19,381
Je vais créer une variable « r2 ».

79
00:04:24,822 --> 00:04:29,283
Supposons que l'on note ici
« ref1 »

80
00:04:29,283 --> 00:04:31,669
la référence contenue dans « r1 »

81
00:04:31,968 --> 00:04:35,103
Lorsque l'on réalise cette affectation,
on se contente de copier

82
00:04:35,103 --> 00:04:39,567
dans la variable « r2 » la valeur
contenue dans « r1 »

83
00:04:39,567 --> 00:04:42,266
à savoir la référence au même objet.

84
00:04:42,922 --> 00:04:46,722
Ce qui veut dire concrètement
que l'on va pointer ici

85
00:04:46,722 --> 00:04:48,101
sur le même objet en mémoire

86
00:04:49,946 --> 00:04:53,977
« r1 » et « r2 » ne désignent pas
deux objets distincts en mémoire.

87
00:04:55,068 --> 00:04:57,249
Ce qui veut dire concrètement
que toute manipulation

88
00:04:57,249 --> 00:04:59,498
faite sur l'objet au travers de « r1 »
sera également visible

89
00:05:01,407 --> 00:05:03,488
au travers de « r2 » et vice-versa.

90
00:05:03,995 --> 00:05:07,422
Donc par exemple, si je change

91
00:05:09,242 --> 00:05:11,595
la valeur de la hauteur de « r2 »,

92
00:05:14,283 --> 00:05:16,277
ce sera aussi visible pour « r1 ».

93
00:05:23,370 --> 00:05:26,921
Concrètement, ceci veut dire que 
si l'on souhaite que « r2 »

94
00:05:26,921 --> 00:05:29,272
soit une copie distincte de « r1 »

95
00:05:29,272 --> 00:05:33,283
alors en Java on n'utilisera pas 
l'opérateur d'affectation.

96
00:05:34,003 --> 00:05:37,955
On utilisera plutôt un constructeur
de copie ou alors la méthode <i>clone</i>

97
00:05:37,955 --> 00:05:40,967
qui sera vue un petit peu plus
tard dans le cadre de ce cours.

98
00:05:41,676 --> 00:05:43,249
Alors nous en parlons parce que

99
00:05:43,249 --> 00:05:45,141
ce n'est pas systématiquement 
le cas dans tous les langages.

100
00:05:45,192 --> 00:05:48,545
Dans certains langages on peut
parfaitement créer

101
00:05:48,545 --> 00:05:50,944
deux copies distinctes d'objets 
au travers de l'affectation.

102
00:05:52,046 --> 00:05:54,025
Nous avons vu dans des 
séquences précédentes

103
00:05:54,025 --> 00:05:56,575
comment écrire dans une classe, 
un constructeur de copie.

104
00:05:56,575 --> 00:06:00,051
C'est exactement un constructeur 
de copies qui est utilisé ici.

105
00:06:00,503 --> 00:06:04,965
Donc un constructeur qui créé un rectangle
à partir des valeurs d'un autre rectangle.

106
00:06:04,965 --> 00:06:08,040
Donc ici si j'exécute cette ligne de code,

107
00:06:08,040 --> 00:06:10,437
je suis dans la même situation que tout à l'heure.

108
00:06:11,452 --> 00:06:15,713
« r1 » est une référence vers un objet
<i>Rectangle</i> particulier

109
00:06:20,283 --> 00:06:24,067
Lorsque j'exécute la seconde ligne,

110
00:06:25,212 --> 00:06:28,709
Je vais créer un autre objet <i>Rectangle</i>.

111
00:06:34,708 --> 00:06:37,794
Donc un objet distinct en mémoire

112
00:06:39,598 --> 00:06:41,847
où je vais simplement recopier,

113
00:06:44,387 --> 00:06:46,220
champ-à-champ,

114
00:06:47,443 --> 00:06:49,147
les valeurs du premier rectangle.

115
00:06:55,714 --> 00:06:57,864
Donc on voit bien ici que l'on n'est
pas dans la même situation

116
00:06:57,864 --> 00:06:58,958
que tout à l'heure

117
00:06:59,281 --> 00:07:04,011
Nous avons bien « r2 » et « r1 » comme
étant deux objets distincts en mémoire.

118
00:07:05,631 --> 00:07:07,923
Toujours sur le même thème,
les objets manipulés

119
00:07:07,923 --> 00:07:11,199
par les références en Java, 
intéressons-nous à ce que cela implique

120
00:07:11,199 --> 00:07:12,792
pour l'affichage des objets

121
00:07:13,845 --> 00:07:15,769
Si j'exécute cette ligne de code,

122
00:07:16,205 --> 00:07:19,401
ce qui est contenu dans ma variable
« rect » est donc bien une référence.

123
00:07:25,391 --> 00:07:30,322
Une référence est une sorte d'adresse,
donc quelque chose

124
00:07:30,322 --> 00:07:33,352
qui a un format un petit peu bizarre.

125
00:07:34,028 --> 00:07:35,990
Donc maintenant si j'essaye

126
00:07:37,287 --> 00:07:39,337
d'afficher le contenu de mon objet « rect »

127
00:07:39,337 --> 00:07:42,047
au travers d'une instruction telle que celle-ci.

128
00:07:42,917 --> 00:07:46,057
Cette instruction va simplement afficher
ce qui est contenu

129
00:07:46,057 --> 00:07:47,445
dans la variable « rect ».

130
00:07:47,727 --> 00:07:50,102
Et donc quelque chose comme ceci,
ce qui est assez peu naturel

131
00:07:50,102 --> 00:07:53,684
et assez peu lisible, nous préférerions
sans doute pouvoir afficher

132
00:07:53,684 --> 00:07:57,744
le contenu du rectangle, c'est-à-dire
la valeur de ses attributs

133
00:07:57,744 --> 00:07:59,749
plutôt que sa référence

134
00:07:59,956 --> 00:08:02,470
Que faire donc si l'on souhaite
faire afficher le contenu

135
00:08:02,470 --> 00:08:05,121
pointé par la référence plutôt
que la référence elle-même

136
00:08:05,121 --> 00:08:07,824
en utilisant exactement cette
même instruction ?

137
00:08:08,524 --> 00:08:10,325
Alors pour que ceci soit possible,

138
00:08:10,325 --> 00:08:14,561
pour qu'une ligne telle que celle-ci
affiche le contenu pointé par « rect »

139
00:08:14,600 --> 00:08:16,809
plutôt qu'une référence un peu étrange,

140
00:08:16,809 --> 00:08:20,995
Il suffit de placer dans la classe
<i>Rectangle</i> une méthode particulière.

141
00:08:20,995 --> 00:08:23,601
Une méthode dont l'en-tête
est le suivant.

142
00:08:23,601 --> 00:08:26,967
Il s'agit de la méthode <i>toString()</i>
dont la liste des paramètres est vide,

143
00:08:26,967 --> 00:08:29,753
et qui retourne une chaîne de caractères,
une <i>string</i>

144
00:08:30,943 --> 00:08:34,455
Cette méthode <i>toString()</i> va en réalité
être automatiquement invoquée

145
00:08:34,455 --> 00:08:39,466
pour convertir ici votre rectangle
en une représentation

146
00:08:39,466 --> 00:08:41,763
sous la forme d'une chaîne de caractère.

147
00:08:41,763 --> 00:08:45,143
C'est à vous de définir comment vous
souhaitez que cette chaîne de caractères

148
00:08:45,185 --> 00:08:47,456
soit produite par la méthode <i>toString()</i>.

149
00:08:47,456 --> 00:08:50,750
Donc concrètement, dans la classe
<i>Rectangle</i>, on placerait

150
00:08:50,750 --> 00:08:54,416
notre fameuse méthode <i>toString()</i>
publique puisqu'on souhaite

151
00:08:54,416 --> 00:08:56,380
pouvoir l'utiliser depuis l'extérieur.

152
00:08:56,902 --> 00:09:00,197
Cette méthode <i>toString()</i> va simplement
construire une chaîne de caractère

153
00:09:00,197 --> 00:09:03,675
qui va correspondre à la représentation
que l'on souhaite avoir

154
00:09:03,675 --> 00:09:08,855
lorsque l'objet est fourni en argument de
« System.out.println » typiquement

155
00:09:08,855 --> 00:09:12,709
Donc ici nous avons
décidé que la chaîne « String »

156
00:09:12,709 --> 00:09:14,973
serait construite comme étant
la concaténation

157
00:09:14,973 --> 00:09:18,641
de la chaîne « Rectangle », 
de la valeur du champ « hauteur »,

158
00:09:20,051 --> 00:09:23,383
de la valeur du champ « largeur » séparé
par cette chaîne de caractère-là.

159
00:09:23,779 --> 00:09:27,183
Donc ici, puisque désormais

160
00:09:27,183 --> 00:09:30,311
tout objet <i>Rectangle</i> a une 
représentation construite

161
00:09:30,311 --> 00:09:33,277
au moyen de la méthode <i>toString()</i>,

162
00:09:33,277 --> 00:09:36,054
une représentation d'affichage sous la forme 
d'une chaîne de caractères.

163
00:09:36,914 --> 00:09:39,019
L'exécution de cette ligne de code,

164
00:09:39,019 --> 00:09:44,425
afficher un rectangle ayant ces valeurs
particulières en guise d'attribut,

165
00:09:44,425 --> 00:09:47,773
va produire un affichage de cette nature.

166
00:09:47,773 --> 00:09:50,193
Donc un affichage beaucoup plus
lisible que celui qu'on avait

167
00:09:50,197 --> 00:09:51,393
tout à l'heure.

168
00:09:52,070 --> 00:09:55,196
Le fait que des objets soient manipulés
via des références en Java

169
00:09:55,196 --> 00:09:58,579
a une incidence sur l'affectation 
et sur l'affichage des objets.

170
00:09:58,657 --> 00:10:01,434
Cela a aussi une incidence sur la
comparaison d'objets,

171
00:10:01,434 --> 00:10:03,892
et c'est le dernier point que
nous allons maintenant examiner.

172
00:10:04,930 --> 00:10:07,391
Supposons que dans un programme
donné nous créions deux rectangles

173
00:10:07,391 --> 00:10:10,742
« r1 » et « r2 » ayant les mêmes
valeurs d'attributs.

174
00:10:10,742 --> 00:10:13,389
Donc les deux auraient la même hauteur
et la même largeur.

175
00:10:14,046 --> 00:10:16,594
Que se passe-t-il si l'on essaye
de comparer ces deux rectangles

176
00:10:16,594 --> 00:10:19,137
au moyen de l'opérateur « == » ?

177
00:10:19,753 --> 00:10:22,538
Est-ce que ce sont les valeurs
des attributs qui vont être

178
00:10:22,538 --> 00:10:24,955
comparées entre elles
ou est-ce autre chose ?

179
00:10:25,910 --> 00:10:29,615
Pour répondre à cette question,
il suffit de voir ce qui est stocké

180
00:10:29,615 --> 00:10:31,663
à l'intérieur des variables
« r1 » et « r2 ».

181
00:10:31,663 --> 00:10:36,026
Nous avons vu que lorsque nous créons
un rectangle par le biais

182
00:10:38,241 --> 00:10:41,410
de ce genre de tournure, 
ce que nous allons récupérer

183
00:10:41,410 --> 00:10:44,074
dans la variable <i>objet</i> 
est une référence vers un objet.

184
00:10:44,074 --> 00:10:45,862
Donc nous avons
ceci en mémoire.

185
00:10:45,862 --> 00:10:48,478
Donc nous avons une variable « r1 »

186
00:10:48,478 --> 00:10:54,678
qui contient une référence, une adresse
vers un objet <i>Rectangle</i> dont le champ

187
00:10:54,726 --> 00:10:58,351
« hauteur » vaut 4.0 
et le champ « largeur » vaut 5.0

188
00:11:00,576 --> 00:11:04,946
La même chose se produit lors de
l'exécution de la seconde ligne.

189
00:11:04,946 --> 00:11:09,010
Donc nous aurons en mémoire 
une variable « r2 »

190
00:11:10,364 --> 00:11:13,655
qui contient une référence vers
un objet <i>Rectangle</i>

191
00:11:13,655 --> 00:11:16,654
dont le champ « hauteur » est 4.0 
et le champ « largeur » est 5.0

192
00:11:16,755 --> 00:11:19,634
Et l'on voit bien que 
chacun de ces <i>new</i>

193
00:11:20,454 --> 00:11:23,096
va en fait créer une référence distincte.

194
00:11:24,021 --> 00:11:26,862
Ce qui veut dire que même si les objets
ont les même valeurs d'attributs,

195
00:11:26,862 --> 00:11:31,793
ce qui va être comparé au travers
de la comparaison « r1 == r2 »

196
00:11:31,793 --> 00:11:35,186
n'est en fait que le contenu
des variables « r1 » et « r2 »

197
00:11:35,186 --> 00:11:38,177
qui sont des références distinctes

198
00:11:38,177 --> 00:11:40,230
pointant vers deux zones mémoires différentes.

199
00:11:41,837 --> 00:11:46,075
Le résultat de cette comparaison
va être la valeur booléenne <i>false</i>

200
00:11:46,075 --> 00:11:49,670
puisque nous avons affaire
à deux références distinctes.

201
00:11:52,184 --> 00:11:55,591
Or dans la plupart des cas,
lorsque nous souhaitons comparer des objets,

202
00:11:55,591 --> 00:11:58,252
ce n'est pas tant les adresses des objets

203
00:11:58,252 --> 00:12:00,810
que nous souhaitons comparer,
mais plutôt le contenu,

204
00:12:01,022 --> 00:12:03,099
si les objets ont les
mêmes valeurs d'attributs.

205
00:12:03,099 --> 00:12:05,748
Donc ça n'est pas la bonne façon
d'atteindre ces résultats.

206
00:12:07,238 --> 00:12:10,465
Si vous avez suivi notre MOOC
précédent sur les fondamentaux

207
00:12:10,567 --> 00:12:12,712
de la programmation en Java,
rappelez-vous comment nous procédions

208
00:12:12,712 --> 00:12:15,852
pour comparer deux chaînes de caractères,
deux <i>string</i>

209
00:12:17,138 --> 00:12:20,407
Pour comparer deux chaînes,
nous avions recours

210
00:12:21,037 --> 00:12:24,088
à la méthode <i>equals</i> plutôt
qu'à l'opérateur « == »

211
00:12:24,495 --> 00:12:27,233
Si tant est bien sûr que nous souhaitons
comparer le contenu des deux chaînes

212
00:12:27,233 --> 00:12:30,007
et non pas les références vers ces
chaînes de caractères.

213
00:12:30,898 --> 00:12:33,347
Pour rappel, examinons le petit
exemple suivant.

214
00:12:33,347 --> 00:12:37,906
Donc ici l'exécution de cette ligne
va permettre

215
00:12:37,906 --> 00:12:44,055
de stocker dans une variable « s1 » 
la référence à la chaîne de caractère « Rouge »

216
00:12:45,429 --> 00:12:48,881
Suite à l'exécution des
deux lignes suivantes,

217
00:12:48,881 --> 00:12:51,516
il y aura dans une variable « s3 »

218
00:12:52,666 --> 00:12:56,470
la référence à chaîne de caractères 
construite par concaténation

219
00:12:56,470 --> 00:13:00,224
du contenu d'une variable « s2 » et d'un littéral « ge »

220
00:13:00,499 --> 00:13:03,924
qui donc au final, aura le
même contenu que la chaîne « s1 »

221
00:13:06,752 --> 00:13:10,227
mais qui correspondra à
une référence différente en mémoire.

222
00:13:10,883 --> 00:13:15,384
Comparer « s1 » et « s3 » au moyen de
l'opérateur « == » va comparer

223
00:13:15,384 --> 00:13:18,373
uniquement les références
qui sont deux valeurs différentes

224
00:13:18,373 --> 00:13:20,295
et donc va retourner <i>false</i>,

225
00:13:20,688 --> 00:13:23,349
même si les contenus sont identiques.

226
00:13:24,058 --> 00:13:27,021
Nous avons vu qu'il fallait, en effet,
pour comparer les contenus,

227
00:13:27,021 --> 00:13:31,191
avoir recours à une méthode 
prédéfinie pour les <i>String</i>

228
00:13:31,971 --> 00:13:35,561
qui était la méthode <i>equals</i> et à ce moment-là, 
si on utilise <i>equals</i>

229
00:13:35,561 --> 00:13:37,690
et bien on compare les contenus,

230
00:13:38,139 --> 00:13:41,215
et à ce moment là, c'est bel et bien
le message « Chaînes identiques »

231
00:13:41,903 --> 00:13:43,645
qui va être affiché.

232
00:13:44,674 --> 00:13:48,659
Pour comparer le contenu de deux objets
de type <i>Rectangle</i>,

233
00:13:48,659 --> 00:13:50,800
nous aurons recours à une solution 
tout à fait analogue.

234
00:13:50,800 --> 00:13:54,334
Nous allons devoir utiliser une
méthode <i>equals</i>

235
00:13:54,334 --> 00:13:57,085
et c'est au programmeur de <i>Rectangle</i>
de définir <i>equals</i>

236
00:13:57,085 --> 00:13:59,123
correctement pour des rectangles.

237
00:13:59,586 --> 00:14:02,629
Comment définit-on <i>equals</i>
pour qu'elle retourne <i>true</i>

238
00:14:02,629 --> 00:14:05,530
si les valeurs des attributs des
rectangles sont identiques ?

239
00:14:06,017 --> 00:14:10,191
Le programmeur de la classe <i>Rectangle</i>
doit concrètement fournir une méthode

240
00:14:10,191 --> 00:14:14,363
qui fasse le test d'égalité 
selon les critères

241
00:14:14,363 --> 00:14:16,759
qui semblent sensés pour des objets 
de type <i>Rectangle</i>.

242
00:14:17,219 --> 00:14:19,716
Quand est-ce qu'on va considérer
que deux rectangles sont égaux

243
00:14:19,716 --> 00:14:21,766
du point de vue du contenu ?

244
00:14:21,786 --> 00:14:24,927
L'un des en-tête possibles prévu
par Java dans la classe <i>Rectangle</i>

245
00:14:25,025 --> 00:14:28,487
pour programmer la méthode <i>equals</i>
est le suivant.

246
00:14:28,487 --> 00:14:30,920
Nous allons voir concrètement 
sur un exemple

247
00:14:30,920 --> 00:14:33,355
comment programmer cette méthode 
dans la classe <i>Rectangle</i>.

248
00:14:34,588 --> 00:14:37,369
La méthode <i>equals</i> est une
méthode de la classe <i>Rectangle</i>,

249
00:14:37,369 --> 00:14:40,311
ce qui signifie qu'elle va 
s'appliquer nécessairement

250
00:14:40,311 --> 00:14:41,886
à un objet de type <i>Rectangle</i>

251
00:14:42,170 --> 00:14:44,321
Donc typiquement, on peut imaginer

252
00:14:46,561 --> 00:14:51,151
qu'on a déclaré un rectangle « r1 » 
et initialisé de façon appropriée.

253
00:14:52,892 --> 00:14:55,832
Si nous souhaitons comparer « r1 »
avec un autre rectangle,

254
00:14:55,832 --> 00:14:58,537
alors on utilisera la méthode <i>equals</i>

255
00:14:59,923 --> 00:15:04,333
qui va comparer « r1 » avec un
autre rectangle fourni en argument.

256
00:15:05,158 --> 00:15:08,148
On imagine par exemple un autre
rectangle « r2 » préalablement déclaré.

257
00:15:10,248 --> 00:15:13,417
La méthode <i>equals</i> prend donc
en argument un rectangle

258
00:15:13,487 --> 00:15:17,487
qui sera comparé à une instance
donnée de rectangle.

259
00:15:17,976 --> 00:15:22,271
Et c'est au programmeur de donner
dans le corps de la méthode <i>equals</i>

260
00:15:22,319 --> 00:15:26,298
selon quel critère les deux rectangles
seront égaux.

261
00:15:27,234 --> 00:15:31,461
Le résultat est un résultat booléen
et il est attendu que ce résultat

262
00:15:31,461 --> 00:15:35,729
soit <i>true</i> lorsque les deux rectangles
sont considérés comme égaux

263
00:15:35,939 --> 00:15:37,998
et <i>false</i> dans le cas contraire.

264
00:15:38,601 --> 00:15:41,068
Concrètement, on peut imaginer de
programmer le corps

265
00:15:41,068 --> 00:15:42,732
de la méthode <i>equals</i> comme suit.

266
00:15:42,732 --> 00:15:46,866
Usuellement on prend la précaution
de tester si l'autre instance

267
00:15:46,866 --> 00:15:50,064
avec laquelle on veut comparer
l'instance courante est <i>null</i>.

268
00:15:50,130 --> 00:15:53,192
Dans ce cas-là on va considérer
que la comparaison échoue

269
00:15:53,192 --> 00:15:55,667
et donc notre méthode <i>equals</i>
va retourner <i>false</i>.

270
00:15:55,667 --> 00:15:58,697
Une instance donnée ne peut pas
être égale à <i>null</i>.

271
00:16:00,147 --> 00:16:04,739
Sinon, nous retournerons <i>true</i>
si la hauteur de l'instance courante

272
00:16:05,769 --> 00:16:09,020
a la même valeur que la
hauteur du rectangle passé

273
00:16:10,460 --> 00:16:12,888
en argument 
et pareil pour la largeur.

274
00:16:14,132 --> 00:16:17,807
Utiliser la méthode <i>equals</i> 
ainsi définie sur deux rectangles

275
00:16:17,878 --> 00:16:20,509
qui auraient les mêmes valeurs
pour les hauteurs et les largeurs

276
00:16:20,509 --> 00:16:22,072
va résulter

277
00:16:26,132 --> 00:16:29,337
dans la valeur booléenne <i>true</i>,
puisque effectivement

278
00:16:30,517 --> 00:16:35,132
« r2 » n'est pas <i>null</i> et les valeurs
des hauteurs sont identiques,

279
00:16:35,166 --> 00:16:37,975
les valeurs des largeurs sont
également identiques.

280
00:16:38,145 --> 00:16:41,568
Dans ce cas-là, nous aurons l'affichage
du message « Rectangles identiques ».

281
00:16:41,568 --> 00:16:45,134
Ce qui n'était pas le cas lorsque nous
comparions les deux rectangles

282
00:16:45,134 --> 00:16:47,488
au moyen de l'opérateur « == ».

283
00:16:47,488 --> 00:16:51,625
Le programmeur d'une classe en Java
est donc en charge d'y définir

284
00:16:51,625 --> 00:16:55,241
une méthode <i>equals</i> s'il souhaite faire
en sorte que des instances

285
00:16:55,241 --> 00:16:59,449
de cette classe soient comparables
selon des critères particuliers.

286
00:16:59,449 --> 00:17:01,917
Nous aurons l'occasion d'y revenir
lorsque nous aurons abordé

287
00:17:01,917 --> 00:17:04,458
l'héritage, et en particulier 
la classe prédéfinie <i>Object</i>

288
00:17:04,458 --> 00:17:08,327
Pour l'instant sachez simplement qu'il
existe deux en-têtes possibles

289
00:17:08,327 --> 00:17:10,133
pour la méthode <i>equals</i>.

290
00:17:10,133 --> 00:17:13,418
Celle que nous venons de voir où
dans une classe donnée appelée

291
00:17:13,418 --> 00:17:16,484
« UneClasse », on définit la méthode
<i>equals</i> en lui passant en argument

292
00:17:16,484 --> 00:17:19,423
un objet du même type 
que celui de la classe.

293
00:17:19,423 --> 00:17:22,803
Sachez qu'il est possible, également,
de définir la méthode <i>equals</i>

294
00:17:22,803 --> 00:17:26,800
en lui passant en argument un objet
de type <i>Object</i>

295
00:17:26,800 --> 00:17:29,716
et nous aurons l'occasion 
d'y revenir en temps voulu.

296
00:17:30,151 --> 00:17:33,097
Ceci conclut notre premier volet
sur les fondamentaux

297
00:17:33,097 --> 00:17:34,966
de l'orienté objet en Java.

298
00:17:34,966 --> 00:17:37,483
Nous allons dans ce qui suit,
aborder un second volet

299
00:17:37,483 --> 00:17:39,742
très important, celui de l'héritage.
