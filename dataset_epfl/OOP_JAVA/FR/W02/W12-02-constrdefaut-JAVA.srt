1
00:00:04,356 --> 00:00:06,921
Nous allons dans cette nouvelle
séquence, nous intéresser

2
00:00:06,921 --> 00:00:09,149
aux constructeurs par défaut.
C'est-à-dire, aux constructeurs qui

3
00:00:09,149 --> 00:00:12,163
sont appelés sans que l'on fournisse
aucune valeur d'initialisation,

4
00:00:12,163 --> 00:00:15,339
aucun paramètre. Nous allons
également nous intéresser à

5
00:00:15,339 --> 00:00:19,904
ce qui se passe si dans une classe,
on ne définit aucun constructeur explicite

6
00:00:20,639 --> 00:00:23,652
Un constructeur par défaut est tout
simplement un constructeur qui

7
00:00:23,652 --> 00:00:27,342
n'a pas de paramètre. Vous en avez
un exemple concret sous les yeux ici

8
00:00:27,342 --> 00:00:31,076
On peut imaginer que dans la classe
<i>Rectangle</i> cohabitent trois constructeurs

9
00:00:31,076 --> 00:00:35,051
différents, trois façons possibles
d'initialiser un objet de type rectangle

10
00:00:35,051 --> 00:00:40,767
Le constructeur par défaut, qui est sans
paramètre a pour vocation d'initialiser

11
00:00:40,767 --> 00:00:44,169
les attributs « hauteur » et « largeur »
à des valeurs par défaut.

12
00:00:44,169 --> 00:00:49,917
Concrètement, ce constructeur par défaut
sera invoqué comme ceci.

13
00:00:49,917 --> 00:00:55,933
Donc on va déclarer un objet « r » de type
<i>Rectangle</i>. Et on va l'initialiser

14
00:00:56,014 --> 00:01:00,556
en utilisant le constructeur par défaut,
qui va être appelé en utilisant

15
00:01:00,556 --> 00:01:04,635
cette tournure. Donc ici, par le fait
que l'on spécifie que le constructeur

16
00:01:04,635 --> 00:01:08,616
est appelé avec une liste d'arguments
vide signifie qu'on est en train

17
00:01:08,616 --> 00:01:12,515
d'appeler ce constructeur-ci,
précisément

18
00:01:12,758 --> 00:01:17,360
Au terme de cette initialisation,
la situation en mémoire serait la suivante :

19
00:01:17,360 --> 00:01:22,746
Nous aurions donc une variable « r »
qui contient la référence vers un objet

20
00:01:22,746 --> 00:01:31,644
de type <i>Rectangle</i>, dont le champ
« hauteur » serait initialisé au moyen

21
00:01:31,644 --> 00:01:45,263
de la valeur par défaut 1.0 et le champ
« largeur » au moyen de la valeur

22
00:01:45,263 --> 00:01:47,337
par défaut 2.0

23
00:01:49,630 --> 00:01:53,236
Les deux autres constructeurs présents
dans la classe ne sont pas

24
00:01:53,236 --> 00:01:56,607
des constructeurs par défaut car
ils ont une liste de paramètres

25
00:01:56,607 --> 00:01:58,118
qui est non vide.

26
00:01:58,118 --> 00:02:01,606
Si je veux par exemple invoquer ce
constructeur-ci, je dois alors

27
00:02:01,606 --> 00:02:06,462
utiliser cette tournure particulière.
Donc comme pour tout à l'heure

28
00:02:06,462 --> 00:02:10,944
je déclare une variable « r1 » de type
<i>Rectangle</i>.

29
00:02:10,944 --> 00:02:16,170
J'appelle le constructeur par
une tournure analogue à celle

30
00:02:16,170 --> 00:02:20,794
que j'ai vue précédemment.
Mais je précise en argument,

31
00:02:20,794 --> 00:02:25,642
la valeur que je souhaite donner
à ce paramètre « c »

32
00:02:27,220 --> 00:02:29,082
Que se passe-t-il maintenant si le
programmeur d'une classe

33
00:02:29,082 --> 00:02:31,214
n'y met aucun constructeur explicite ?

34
00:02:31,214 --> 00:02:34,012
Et bien l'initialisation d'un objet est
considérée comme tellement essentielle

35
00:02:34,012 --> 00:02:39,047
qu'un constructeur automatiquement
généré sera disponible pour cette classe.

36
00:02:39,047 --> 00:02:40,974
Un constructeur par défaut
bien évidemment.

37
00:02:41,944 --> 00:02:45,199
On parlera alors de « constructeur
par défaut par défaut »

38
00:02:45,199 --> 00:02:49,511
Ce constructeur automatiquement généré
est un constructeur par défaut car

39
00:02:49,511 --> 00:02:53,703
il est sans paramètre. On dit que lui-même
est par défaut parce qu'il est fourni

40
00:02:53,703 --> 00:02:57,659
automatiquement à défaut de la présence
de tout autre constructeur

41
00:02:57,659 --> 00:02:59,304
explicite dans la classe

42
00:03:00,017 --> 00:03:02,875
Ce constructeur par défaut par défaut
fait un minimum de travail

43
00:03:02,875 --> 00:03:04,107
d'initialisation.

44
00:03:04,403 --> 00:03:10,931
Il va initialiser tous les attributs
de type de base avec des

45
00:03:10,931 --> 00:03:16,334
valeurs par défaut comme 0, 0.0 ou false.
Et pour les objets, ils seront tous

46
00:03:16,334 --> 00:03:18,628
initialisés à <i>null</i>

47
00:03:19,345 --> 00:03:24,538
Supposons que je définisse une classe
<i>Rectangle</i>. Qui aurait comme dans

48
00:03:24,538 --> 00:03:28,729
nos exemples vu précédemment, deux
attributs « largeur » et « hauteur »

49
00:03:28,729 --> 00:03:35,652
de type <i>double</i> et un attribut
supplémentaire un peu plus complexe

50
00:03:35,652 --> 00:03:39,986
qui serait un objet donc une
instance d'une autre classe

51
00:03:39,986 --> 00:03:45,314
Une classe <i>Position</i> qui permettrait
par exemple de représenter

52
00:03:45,314 --> 00:03:48,498
la position du rectangle sur un écran
en deux dimensions

53
00:03:49,441 --> 00:03:52,271
Dans la classe <i>Rectangle</i> ainsi
définie ne figure aucun constructeur

54
00:03:52,271 --> 00:03:55,416
explicite ce qui signifie qu'il existe
un constructeur par défaut par défaut

55
00:03:55,416 --> 00:03:59,252
que je peux utiliser pour initialiser
un rectangle

56
00:03:59,798 --> 00:04:02,271
Donc par exemple, dans une autre
partie du programme,

57
00:04:02,271 --> 00:04:07,528
je peux déclarer une variable de type
<i>Rectangle</i>, un objet <i>Rectangle</i>

58
00:04:07,528 --> 00:04:13,507
et l'initialiser avec le constructeur
par défaut par défaut,

59
00:04:13,507 --> 00:04:16,068
qui bien évidemment ne prend
aucun paramètre

60
00:04:16,852 --> 00:04:23,459
Au terme de cette initialisation,
je vais avoir dans la variable « rect »

61
00:04:23,459 --> 00:04:28,450
une référence vers un objet de type
<i>Rectangle</i> dont la largeur

62
00:04:28,450 --> 00:04:34,111
et la hauteur vont être initialisées
au moyen des valeurs par défaut car

63
00:04:34,111 --> 00:04:37,259
il s'agit d'attributs de type de base

64
00:04:43,399 --> 00:04:46,968
Donc la largeur et la hauteur auront
la valeur 0.0

65
00:04:46,968 --> 00:04:57,623
Et l'attribut « position »,
sera initialisé à <i>null</i>

66
00:04:59,133 --> 00:05:01,846
car il s'agit cette fois-ci d'un objet

67
00:05:03,669 --> 00:05:06,880
A noter que pour ne pas trop encombrer
l'écriture de l'exemple, je n'ai pas

68
00:05:06,880 --> 00:05:10,275
précisé les droits d'accès.
En toute rigueur, pour une bonne

69
00:05:10,275 --> 00:05:14,282
encapsulation, évidemment, chacun
des attributs devrait être

70
00:05:14,282 --> 00:05:16,448
déclaré comme privé.

71
00:05:17,350 --> 00:05:21,244
Attention, un point très important.
Ce constructeur par défaut par défaut

72
00:05:21,244 --> 00:05:24,240
n'est plus fourni, disparaît,
dès l'instant que l'on définit

73
00:05:24,240 --> 00:05:27,302
dans la classe au moins un
constructeur explicite,

74
00:05:27,302 --> 00:05:29,887
que ce constructeur soit par défaut
lui-même ou pas.

75
00:05:30,820 --> 00:05:35,192
Ceci signifie concrètement que si dans
une classe je spécifie un constructeur

76
00:05:35,192 --> 00:05:39,863
qui n'est pas un constructeur par défaut,
je n'ai plus aucun moyen de construire

77
00:05:39,863 --> 00:05:42,662
l'objet sans fournir de valeurs
d'initialisation

78
00:05:42,662 --> 00:05:48,015
Concrètement, je ne peux plus écrire
quelque chose comme ceci

79
00:05:51,945 --> 00:05:57,717
Donc invoquer un constructeur par défaut,
cette tournure n'est plus licite

80
00:05:59,984 --> 00:06:03,355
Pourquoi ? Parce que tout constructeur
par défaut a disparu

81
00:06:04,582 --> 00:06:07,320
Ceci correspond bien à quelque chose
de voulu. Si nous avons pris le

82
00:06:07,320 --> 00:06:10,523
soin de programmer explicitement
un constructeur dans la classe

83
00:06:10,523 --> 00:06:14,752
nous ne souhaitons pas que Java nous
en glisse un par défaut sans que nous

84
00:06:14,752 --> 00:06:17,755
l'ayons mentionné explicitement,
sans que nous ayons explicitement

85
00:06:17,755 --> 00:06:20,864
manifesté le souhait d'utiliser un
constructeur par défaut

86
00:06:21,756 --> 00:06:24,115
Pour illustrer ceci, nous allons
maintenant étudier trois variantes

87
00:06:24,115 --> 00:06:27,268
d'un même programme qui diffèrent les
unes des autres par leur façon de

88
00:06:27,268 --> 00:06:29,304
fournir des constructeurs.

89
00:06:29,752 --> 00:06:33,941
Dans la première variante, la variante A,
une classe <i>Rectangle</i> est définie avec

90
00:06:33,941 --> 00:06:36,564
deux attributs « hauteur » et « largeur »
qui sont des <i>doubles</i>

91
00:06:36,564 --> 00:06:40,682
Elle peut y prévoir éventuellement
d'autres contenu mais elle ne

92
00:06:40,682 --> 00:06:43,121
contient aucun constructeur explicite

93
00:06:43,564 --> 00:06:47,007
Dans la variante B, toujours les mêmes
attributs mais cette fois-ci un

94
00:06:47,007 --> 00:06:50,917
constructeur explicite, qui est un
constructeur par défaut car

95
00:06:50,917 --> 00:06:54,852
il a une liste de paramètres vide.
Ce constructeur va initialiser

96
00:06:54,852 --> 00:06:57,790
la hauteur et la largeur aux
valeurs 0.0

97
00:06:57,790 --> 00:07:01,666
Dans la variante C enfin, la classe
<i>Rectangle</i> dispose d'un

98
00:07:01,666 --> 00:07:05,888
constructeur explicite qui cette fois
n'est plus un constructeur par défaut

99
00:07:05,888 --> 00:07:08,533
puisque sa liste de paramètres
n'est plus vide.

100
00:07:08,533 --> 00:07:12,105
Donc ici, il s'agit du constructeur qui
attend une valeur pour la

101
00:07:12,105 --> 00:07:15,829
hauteur et une autre pour la largeur,
et qui se charge d'affecter ces valeurs

102
00:07:15,829 --> 00:07:18,577
aux attributs correspondants

103
00:07:19,768 --> 00:07:22,410
Pour chacune de ces variantes, nous allons
nous poser les questions suivantes:

104
00:07:22,410 --> 00:07:24,868
Existe-t-il un constructeur par défaut ?

105
00:07:24,868 --> 00:07:28,208
Est-il licite d'initialiser un objet
selon cette tournure ?

106
00:07:28,208 --> 00:07:32,371
Est-il licite d'initialiser un objet
selon cette seconde tournure ?

107
00:07:33,058 --> 00:07:36,609
Commençons par la première variante,
la variante A, qui pour rappel,

108
00:07:36,609 --> 00:07:40,380
ici on n'indique que les constructeurs
de la classe et pas le reste,

109
00:07:40,380 --> 00:07:43,508
n'avait aucun constructeur explicite

110
00:07:43,876 --> 00:07:47,637
Et bien comme on l'a dit tout à l'heure
lorsqu'une classe ne prévoit aucun

111
00:07:47,637 --> 00:07:50,334
constructeur explicite, il existe un
constructeur par défaut,

112
00:07:50,334 --> 00:07:53,172
il s'agit du constructeur par défaut
par défaut

113
00:07:53,172 --> 00:07:56,462
De ce fait, l'initialisation selon
cette tournure est licite

114
00:07:56,462 --> 00:07:59,120
On utilise un constructeur
sans paramètre

115
00:07:59,120 --> 00:08:02,600
Et nous avons vu que le constructeur
par défaut par défaut, lorsque

116
00:08:02,600 --> 00:08:07,655
les attributs sont de types élémentaires,
initialise ces attributs avec des

117
00:08:07,655 --> 00:08:09,216
valeurs de base

118
00:08:09,216 --> 00:08:12,405
Donc la largeur vaudra 0.0, et la
hauteur vaudra 0.0

119
00:08:13,024 --> 00:08:16,161
Par contre, vu que le seul constructeur
disponible est le constructeur par défaut

120
00:08:16,161 --> 00:08:19,946
par défaut, on ne peut initialiser
l'objet que selon cette tournure

121
00:08:19,946 --> 00:08:23,038
En utilisant un constructeur
sans paramètre

122
00:08:23,038 --> 00:08:27,466
Cette tournure qui attend des paramètres
est, par conséquent, illicite

123
00:08:27,466 --> 00:08:31,115
Pour la variante B, nous avions donc
dans la classe <i>Rectangle</i>,

124
00:08:31,115 --> 00:08:34,923
un constructeur explicite, il s'agissait
d'un constructeur par défaut

125
00:08:34,923 --> 00:08:37,850
A la question de savoir s'il existe un
constructeur par défaut,

126
00:08:37,850 --> 00:08:39,344
la réponse est oui

127
00:08:39,344 --> 00:08:42,468
Il s'agit de ce constructeur
explicitement déclaré

128
00:08:42,468 --> 00:08:46,070
Comme tout à l'heure, on peut évidemment
utiliser ce constructeur par défaut

129
00:08:46,070 --> 00:08:49,584
selon cette tournure, un constructeur
qui n'attend aucun paramètre

130
00:08:49,584 --> 00:08:52,855
Et ici, ce constructeur aura le
même effet que le

131
00:08:52,855 --> 00:08:54,781
constructeur par défaut par défaut

132
00:08:54,781 --> 00:08:57,485
Puisqu'il initialise la hauteur et
la largeur avec les mêmes

133
00:08:57,485 --> 00:09:01,517
valeurs que celles utilisées par
le constructeur par défaut par défaut

134
00:09:01,887 --> 00:09:04,019
Selon les mêmes arguments
que précédemment,

135
00:09:04,019 --> 00:09:06,613
cette tournure demeure illicite,
il n'existe en effet dans la

136
00:09:06,613 --> 00:09:10,095
classe <i>Rectangle</i> aucun constructeur
autre que le constructeur par défaut

137
00:09:10,095 --> 00:09:14,675
Donc aucun constructeur qui attendrait
deux valeurs pour pouvoir fonctionner

138
00:09:15,474 --> 00:09:18,833
Enfin, pour la variante C, nous avions
donc un constructeur explicite

139
00:09:18,833 --> 00:09:21,003
mais qui n'était pas un constructeur
par défaut

140
00:09:21,003 --> 00:09:25,223
A la question de savoir si il existe
un constructeur par défaut,

141
00:09:25,223 --> 00:09:26,787
la réponse est non.

142
00:09:26,787 --> 00:09:28,794
Il n'existe plus de constructeur
par défaut

143
00:09:28,794 --> 00:09:31,850
Pourquoi ? Nous avons en effet dit
tout à l'heure que dès l'instant où

144
00:09:31,850 --> 00:09:36,138
on définit un constructeur explicite,
qu'il soit par défaut ou non,

145
00:09:36,138 --> 00:09:39,387
le constructeur par défaut par défaut
disparait

146
00:09:39,387 --> 00:09:43,099
De ce fait, le seul constructeur
disponible dans la classe maintenant

147
00:09:43,099 --> 00:09:44,658
est celui-ci

148
00:09:44,658 --> 00:09:48,355
Il n'est plus possible d'initialiser
un objet selon cette tournure

149
00:09:48,355 --> 00:09:51,481
Plus de constructeur qui n'attend
aucun argument

150
00:09:51,481 --> 00:09:53,781
Ceci est illicite

151
00:09:53,781 --> 00:09:56,689
Par contre la seconde tournure
devient licite

152
00:09:56,689 --> 00:10:00,493
Elle va initialiser la largeur et
la hauteur au moyen des valeurs

153
00:10:00,493 --> 00:10:03,952
passées ici en argument et nous
obtiendrons donc un objet rectangle

154
00:10:03,952 --> 00:10:08,141
où la hauteur vaudra 1.0 et
la largeur vaudra 2.0

155
00:10:09,199 --> 00:10:12,910
Examinons pour finir certaines facilités
offertes par le langage Java

156
00:10:12,910 --> 00:10:16,490
pour la construction d'objets et
pour l'initialisation des attributs

157
00:10:17,459 --> 00:10:20,456
S'il existe plusieurs constructeurs
dans une classe, Java permet

158
00:10:20,456 --> 00:10:24,500
à n'importe quel constructeur
d'invoquer un autre constructeur

159
00:10:24,500 --> 00:10:25,945
de la même classe

160
00:10:26,159 --> 00:10:29,529
Ceci se fait au moyen d'une
tournure particulière <i>this</i>

161
00:10:29,529 --> 00:10:34,029
Donc on utilise le mot réservé <i>this</i>
et entre parenthèses on fournit

162
00:10:34,029 --> 00:10:37,860
les arguments qui correspondent à
ceux attendus par le constructeur

163
00:10:37,860 --> 00:10:40,080
qu'on veut appeler

164
00:10:40,080 --> 00:10:43,871
Par exemple, dans cette classe <i>Rectangle</i>
où je dispose d'un constructeur explicite

165
00:10:43,871 --> 00:10:45,319
à deux paramètres

166
00:10:45,319 --> 00:10:49,603
Je peux définir le constructeur par défaut
en utilisant cette première définition

167
00:10:49,603 --> 00:10:51,853
du constructeur

168
00:10:51,853 --> 00:10:54,801
Ici, le constructeur par défaut, avec
cette tournure <i>this</i>,

169
00:10:54,801 --> 00:11:00,439
invoque le constructeur qui attend
deux paramètres, donc celui-ci

170
00:11:01,379 --> 00:11:05,867
En lui fournissant en guise de valeur
pour le premier paramètre 0.0

171
00:11:05,867 --> 00:11:08,875
et également 0.0 pour
le second paramètre

172
00:11:10,072 --> 00:11:12,653
Il s'agit d'une tournure élégante qui
permet dans bien des cas,

173
00:11:12,653 --> 00:11:15,051
d'éviter de dupliquer
inutilement du code.

174
00:11:15,051 --> 00:11:19,621
Vous noterez cependant qu'il ne
peux y avoir qu'une seule instruction

175
00:11:19,621 --> 00:11:23,630
<i>this</i> dans un constructeur,
et que cette instruction <i>this</i>

176
00:11:23,630 --> 00:11:26,317
doit être la toute première
instruction invoquée.

177
00:11:26,317 --> 00:11:29,680
Je ne peux mettre aucune instruction
avant le <i>this</i>

178
00:11:29,920 --> 00:11:34,478
Il est également possible, en Java,
de donner des valeurs par défaut

179
00:11:34,478 --> 00:11:37,524
aux attributs sans passer par
aucun constructeur.

180
00:11:37,684 --> 00:11:41,227
Ceci se fait au moment de la
déclaration de l'attribut.

181
00:11:41,227 --> 00:11:44,156
Ici par exemple, au moment où
je déclare l'attribut hauteur,

182
00:11:44,156 --> 00:11:47,819
je lui donne une valeur par défaut
qui est la valeur 1.0

183
00:11:48,515 --> 00:11:53,368
Si maintenant j'invoque le constructeur
par défaut de la classe

184
00:11:53,368 --> 00:11:56,133
par une tournure qu'on commence
à bien connaître

185
00:11:57,040 --> 00:11:58,604
Comme ceci

186
00:12:01,100 --> 00:12:03,795
Et bien comme dans le constructeur
par défaut ici, il n'y a aucune

187
00:12:03,795 --> 00:12:06,554
valeur explicitement attribuée à
« hauteur » ou « largeur »

188
00:12:06,554 --> 00:12:09,413
ce sont les valeurs par défaut
qui sont prises

189
00:12:09,724 --> 00:12:13,771
Donc au terme de cette construction
nous aurons donc un objet en mémoire

190
00:12:17,960 --> 00:12:23,394
Un objet de type <i>Rectangle</i>,
dont la hauteur aura été

191
00:12:23,394 --> 00:12:26,941
initialisée à la valeur,
ici par défaut 1.0

192
00:12:28,883 --> 00:12:30,913
et la largeur également.

193
00:12:34,114 --> 00:12:38,500
Imaginez maintenant que le constructeur
par défaut, au lieu d'avoir un corps vide

194
00:12:38,500 --> 00:12:42,359
initialise le champ largeur et
uniquement ce champ

195
00:12:42,359 --> 00:12:43,977
à 3.0 par exemple

196
00:12:43,977 --> 00:12:50,089
Au terme de la construction d'un
rectangle au moyen de

197
00:12:50,089 --> 00:12:52,942
ce constructeur par défaut,
nous aurions en mémoire

198
00:12:52,942 --> 00:13:00,315
un objet toujours de type <i>Rectangle</i>
bien-sûr, dont le champ <i>largeur</i>

199
00:13:01,652 --> 00:13:04,886
aurait été initialisé avec
cette valeur 3.0

200
00:13:06,007 --> 00:13:12,619
et dont le champ <i>hauteur</i> cette fois
puisqu'il n'a reçu aucune valeur

201
00:13:12,619 --> 00:13:15,633
explicite dans le constructeur
prendrait à nouveau la valeur

202
00:13:15,633 --> 00:13:20,074
spécifiée ici au moment de la
déclaration de l'attribut

203
00:13:20,411 --> 00:13:22,273
c'est-à-dire 1.0

204
00:13:22,811 --> 00:13:25,411
A noter que pour expliciter les intentions
de programmation

205
00:13:25,411 --> 00:13:28,679
il est préférable d'initialiser les
attributs dans des constructeurs

206
00:13:28,679 --> 00:13:31,073
plutôt que de passer par ce genre
de tournure

207
00:13:31,673 --> 00:13:33,911
En effet, si chacun des constructeurs
se charge de l'entièreté des

208
00:13:33,911 --> 00:13:38,306
initialisations nécessaires, il est
possible à la simple lecture des corps

209
00:13:38,306 --> 00:13:43,000
de ces constructeurs de comprendre
quelles sont les initialisations réalisées.

210
00:13:43,000 --> 00:13:45,846
Il n'est pas nécessaire d'aller chercher
à un autre endroit de la classe

211
00:13:45,846 --> 00:13:49,682
s'il ne faut pas tenir compte d'autres
initialisations implicites

212
00:13:50,310 --> 00:13:53,288
Voilà, nous en avons terminé avec
cette séquence sur les constructeurs

213
00:13:53,288 --> 00:13:56,348
par défaut. Nous aurons l'occasion
d'en reparler un peu dans nos

214
00:13:56,348 --> 00:13:59,692
futures séquences sur l'héritage,
en attendant vous allez découvrir

215
00:13:59,692 --> 00:14:02,662
d'autres façons possible de construire
un objet au travers de la construction

216
00:14:02,662 --> 00:14:04,142
de copies
