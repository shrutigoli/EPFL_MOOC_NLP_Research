1
00:00:03,973 --> 00:00:06,989
Dans les séquences vidéos précédentes,
vous avez appris à déclarer des classes

2
00:00:06,989 --> 00:00:10,667
et à déclarer des objets, c'est-à-dire des
instances de ces classes.

3
00:00:10,667 --> 00:00:14,919
Par exemple, pour déclarer une instance
« rect » de la classe <i>Rectangle</i>,

4
00:00:14,919 --> 00:00:20,099
vous écririez « Rectangle rect; ».
Maintenant, une des questions qu'on

5
00:00:20,099 --> 00:00:23,427
peut se poser c'est comment donner
d'autres valeurs que les valeurs reçues

6
00:00:23,427 --> 00:00:27,515
par défaut, c'est-à-dire zéro,
aux attributs par exemple « hauteur »

7
00:00:27,515 --> 00:00:31,830
et « largeur » de cette instance « rect ».
Comment, même mieux, initialiser,

8
00:00:31,830 --> 00:00:35,941
c'est-à-dire donner une valeur initiale,
au départ, dès la création de « rect »

9
00:00:35,941 --> 00:00:40,737
à ses attributs « hauteur » et « largeur ».
Bien sûr, on pourrait faire appel

10
00:00:40,737 --> 00:00:44,740
aux manipulateurs « set hauteur »,
« set largeur ». C'est-à-dire, d'affecter

11
00:00:44,740 --> 00:00:49,560
individuellement, tour à tour, des valeurs
à chacun des attributs comme par exemple,

12
00:00:49,560 --> 00:00:53,402
ici, où on a déclaré une instance « rect »
de la classe <i>Rectangle</i> où l'on

13
00:00:53,402 --> 00:00:58,350
aurait déclaré au préalable un <i>double</i> « lu »
et où on demande à l'utilisateur d'entrer

14
00:00:58,350 --> 00:01:04,018
la hauteur au clavier et où au travers du
manipulateur « set hauteur », on affecte

15
00:01:04,018 --> 00:01:07,900
la valeur que l'on a lue au clavier « lu »
à la hauteur de l'instance « rect ».

16
00:01:07,900 --> 00:01:13,873
Et de même, via une interaction avec
l'utilisateur, on affecte la valeur « lu »

17
00:01:13,873 --> 00:01:18,653
à la largeur de l'instance « rect ».
Mais ceci est évidemment une très mauvaise

18
00:01:18,653 --> 00:01:23,405
solution dans le cas général, parce que
tout d'abord, ça nécessite que chacun des

19
00:01:23,405 --> 00:01:28,109
attributs soit dans l'interface, ce qui
est très mauvais et casse l'encapsulation

20
00:01:28,109 --> 00:01:31,811
comme on l'a vu dans les séquences de la
semaine précédente.

21
00:01:31,811 --> 00:01:35,817
Soit que l'on ait un manipulateur pour
chacun des attributs qui lui-même

22
00:01:35,817 --> 00:01:41,258
traduit la façon dont la classe a été
implémentée et qui donc casse

23
00:01:41,258 --> 00:01:46,372
l'encapsulation puisque l'on aurait besoin
d'un manipulateur pour chacun

24
00:01:46,372 --> 00:01:50,355
des attributs. Le but de l'encapsulation
étant justement de séparer clairement

25
00:01:50,355 --> 00:01:53,978
l'interface et l'implémentation, si on
avait pour chaque attribut,

26
00:01:53,978 --> 00:01:57,374
un manipulateur dans l'interface,
on traduirait beaucoup trop

27
00:01:57,374 --> 00:02:01,270
dans l'interface les choix d'implémentation
et c'est dans ce sens là que

28
00:02:01,270 --> 00:02:06,220
ça casse l'encapsulation. Et par ailleurs,
on confie au programmeur utilisateur

29
00:02:06,220 --> 00:02:10,531
de la classe, la responsabilité
d'initialiser tous les attributs avec

30
00:02:10,531 --> 00:02:15,439
les risques d'oubli que cela implique.
C'est au programmeur concepteur de la

31
00:02:15,439 --> 00:02:20,189
classe qu'incombe cette responsabilité
d'initialiser des attributs et d'offrir

32
00:02:20,189 --> 00:02:25,333
une interface qui permet d'initialiser
quelques attributs bien choisis pour le

33
00:02:25,333 --> 00:02:29,378
programmeur utilisateur de la classe.
Une solution consisterait donc, comme à

34
00:02:29,378 --> 00:02:33,833
chaque fois que l'on a identifié une tâche
spécifique, à créer une méthode dédiée à

35
00:02:33,833 --> 00:02:38,238
cette tâche. Donc ici, on veut faire
une initialisation, la solution serait donc

36
00:02:38,238 --> 00:02:43,175
de créer une méthode dédiée à
l'initialisation comme par exemple, une

37
00:02:43,175 --> 00:02:48,447
méthode <i>init</i> ici. Bien sûr qu'on offrirait
dans l'interface pour que tous les

38
00:02:48,447 --> 00:02:51,441
programmeurs utilisateurs de la classe
puissent l'utiliser.

39
00:02:51,441 --> 00:02:54,803
Donc une méthode <i>init</i>
qui aurait pour but d'initialiser les deux

40
00:02:54,803 --> 00:02:57,488
attributs « hauteur » et « largeur » et
pour ceci recevrait deux valeurs

41
00:02:57,488 --> 00:03:04,404
« h » et « l », respectivement pour
initialiser la hauteur et la largeur.

42
00:03:04,404 --> 00:03:09,901
Typiquement, on utiliserait donc cette
méthode d'initialisation que nous avons

43
00:03:09,901 --> 00:03:13,493
créée de la façon suivante. En déclarant
une instance « rect » de la classe

44
00:03:13,493 --> 00:03:19,412
<i>Rectangle</i>, et ensuite en appelant cette
méthode « init » pour initialiser,

45
00:03:19,412 --> 00:03:26,113
par exemple, la hauteur à trois et
la largeur à quatre.

46
00:03:26,113 --> 00:03:29,198
C'est certainement une bonne solution,
c'est tellement une bonne solution

47
00:03:29,198 --> 00:03:32,608
que le langage Java vous offre le moyen
de le faire proprement.

48
00:03:32,608 --> 00:03:36,393
C'est-à-dire de faire vraiment une
initialisation. De telles méthodes

49
00:03:36,393 --> 00:03:40,842
chargées d'initialiser les instances, c'est
ce que l'on appelle des constructeurs.

50
00:03:41,598 --> 00:03:44,943
Un constructeur est une méthode qui est
systématiquement appelée lors de

51
00:03:44,943 --> 00:03:50,040
la déclaration d'un objet. C'est-à-dire
appelé au début de vie de chaque instance.

52
00:03:50,040 --> 00:03:53,687
Il a donc pour rôle de faire tout ce que
l'on doit faire au début de vie de chaque

53
00:03:53,687 --> 00:03:57,717
instance et en particulier
d'initialiser les attributs.

54
00:03:58,019 --> 00:04:02,464
Pour déclarer un constructeur, il suffit
simplement d'ajouter une méthode qui

55
00:04:02,464 --> 00:04:07,130
a le même nom que le nom de la classe,
suivi d'éventuels paramètres nécessaires

56
00:04:07,130 --> 00:04:10,976
aux initialisations, et suivi comme
d'habitude de la définition

57
00:04:10,976 --> 00:04:15,093
de la méthode en question.
Par exemple, pour la classe

58
00:04:15,093 --> 00:04:18,909
<i>Rectangle</i>, on définirait donc une méthode
« Rectangle » qui a le même nom que la

59
00:04:18,909 --> 00:04:24,641
classe, qui est donc un constructeur,
qui reçoit deux paramètres « h » et « l »

60
00:04:24,641 --> 00:04:29,791
pour pouvoir initialiser dans le corps de
la méthode en question, respectivement

61
00:04:29,791 --> 00:04:34,044
la hauteur, l'attribut « hauteur » et
l'attribut « largeur ».

62
00:04:34,044 --> 00:04:37,366
Les constructeurs sont donc des méthodes
presque comme les autres.

63
00:04:37,366 --> 00:04:40,547
Les trois différences à noter sont
d'abord qu'un constructeur n'a pas

64
00:04:40,547 --> 00:04:42,229
de type de retour.

65
00:04:42,229 --> 00:04:46,202
Nous n'avons rien mis ici, même pas <i>void</i>,
donc ça veut dire que le constructeur n'a

66
00:04:46,202 --> 00:04:50,429
même pas de type de retour.
La deuxième différence c'est que le

67
00:04:50,429 --> 00:04:54,452
constructeur est obligé d'avoir un nom qui
est exactement le même que le nom

68
00:04:54,452 --> 00:04:58,345
de la classe. Enfin, un constructeur doit
être systématiquement appelé à

69
00:04:58,345 --> 00:05:02,437
chaque fois qu'une nouvelle instance
est créée. Appelé avec une syntaxe

70
00:05:02,437 --> 00:05:04,740
que l'on va détailler dans un instant.

71
00:05:04,740 --> 00:05:06,906
Voilà pour les différences.
Mais les constructeurs peuvent,

72
00:05:06,906 --> 00:05:09,843
comme les autres méthodes,
être aussi surchargés.

73
00:05:09,843 --> 00:05:12,780
C'est-à-dire qu'on va pouvoir avoir

74
00:05:12,780 --> 00:05:15,718
plusieurs listes de paramètres différents
pour différents constructeurs.

75
00:05:15,718 --> 00:05:20,059
Ce qui fait que l'on a donc plusieurs
constructeurs. Nous allons revenir

76
00:05:20,059 --> 00:05:23,295
sur ce point là dans la suite, mais nous
voulions déjà insister ici sur le fait que

77
00:05:23,295 --> 00:05:26,448
l'on parle donc des constructeurs
possibles pour une classe.

78
00:05:26,448 --> 00:05:29,134
Il n'y a pas forcément un seul
constructeur unique.

79
00:05:29,134 --> 00:05:31,206
Revenons maintenant à
notre exemple de départ

80
00:05:31,206 --> 00:05:33,441
pour voir comment tout ceci
s'écrit concrètement.

81
00:05:33,441 --> 00:05:36,475
Nous allons ici déclarer un seul
constructeur dans notre classe <i>Rectangle</i>.

82
00:05:36,475 --> 00:05:40,515
Donc pour cela, on déclare la
classe <i>Rectangle</i> comme d'habitude,

83
00:05:40,515 --> 00:05:45,778
avec donc ses attributs ici, dans la
partie privée, hauteur et largeur.

84
00:05:45,778 --> 00:05:50,166
Et puis comme d'habitude, les différents
accesseurs que l'on aurait décidé,

85
00:05:50,166 --> 00:05:54,588
modificateurs et méthodes que l'on a
décidé de mettre dans l'interface.

86
00:05:54,588 --> 00:05:57,813
Mais ce que l'on a rajouté donc en plus
maintenant, c'est un constructeur.

87
00:05:57,813 --> 00:06:03,861
Ce constructeur, c'est une méthode qui a
le même nom que le nom de la classe.

88
00:06:03,861 --> 00:06:08,181
Bien entendu, ce constructeur doit être
dans l'interface, puisque son but est

89
00:06:08,181 --> 00:06:11,670
d'être justement appelé par les personnes
qui utilisent la classe.

90
00:06:11,670 --> 00:06:15,384
Il faut qu'il soit donc accessible
à l'extérieur de la classe, et ici

91
00:06:15,384 --> 00:06:19,148
en l’occurrence il reçoit deux paramètres,
respectivement « h » et « l »

92
00:06:19,148 --> 00:06:23,751
pour pouvoir initialiser respectivement,
l'attribut « hauteur » et

93
00:06:23,751 --> 00:06:25,809
l'attribut « largeur ».

94
00:06:26,625 --> 00:06:30,052
Voyons maintenant quand est appelé un
constructeur. C'est-à-dire comment déclarer

95
00:06:30,052 --> 00:06:34,150
une instance que l'on initialise en même
temps que l'on la déclare.

96
00:06:34,150 --> 00:06:37,785
Pour cela, il faut donc faire une
déclaration usuelle, une instance ici

97
00:06:37,785 --> 00:06:41,275
d'une certaine classe, et puis ensuite
faire suivre cette déclaration par

98
00:06:41,275 --> 00:06:46,209
« = <i>new</i> », le nom de la classe, ici qui va
être un appel au constructeur auquel

99
00:06:46,209 --> 00:06:48,609
on passe, entre parenthèses,
les différents paramètres nécessaires

100
00:06:48,609 --> 00:06:51,009
pour le constructeur.

101
00:06:51,009 --> 00:06:53,410
Donc par exemple dans notre classe
<i>Rectangle</i> ici, on va déclarer une

102
00:06:53,410 --> 00:06:59,534
instance « r1 » de la classe <i>Rectangle</i>
<i>= new</i> appel du constructeur « Rectangle »

103
00:06:59,534 --> 00:07:02,301
ici qui prend deux paramètres.

104
00:07:02,301 --> 00:07:06,693
Donc concrètement dans l'exemple détaillé
qui nous occupe depuis le début,

105
00:07:06,693 --> 00:07:10,446
on aurait donc la classe <i>Rectangle</i>
avec ici, en <i>public</i>, un constructeur

106
00:07:10,446 --> 00:07:14,475
qui prend deux paramètres responsables
de l'initialisation des paramètres,

107
00:07:14,475 --> 00:07:18,842
des attributs « largeur » et « hauteur »
de la classe et par exemple

108
00:07:18,842 --> 00:07:22,719
ici dans une classe <i>Exemple</i> où on
aurait le <i>main</i>, on déclarerait

109
00:07:22,719 --> 00:07:28,537
une instance « rect1 » de la classe
<i>Rectangle</i> que l'on initialise directement

110
00:07:28,537 --> 00:07:34,341
ici avec un appel au constructeur qui
passe la valeur trois au paramètre « h »

111
00:07:34,341 --> 00:07:39,004
pour le mettre dans la hauteur et la valeur
quatre au paramètre « l »

112
00:07:39,004 --> 00:07:41,003
pour le mettre dans la largeur
de « rect1 ».

113
00:07:42,005 --> 00:07:48,289
Concrètement, pour mémoire, on aurait donc
la chose suivante. « rect1» qui est donc

114
00:07:48,289 --> 00:07:56,485
une référence sur un rectangle, et lorsque
l'on fait ce <i>new Rectangle</i>, on va créer

115
00:07:56,485 --> 00:08:02,076
effectivement une instance en mémoire,
<i>Rectangle</i> qui aurait donc ces deux

116
00:08:02,076 --> 00:08:08,775
paramètres « hauteur » et « largeur ».
Que l'appel au constructeur, ici, va donc

117
00:08:08,775 --> 00:08:13,325
initialiser aux valeurs trois et quatre.

118
00:08:13,325 --> 00:08:16,620
Voilà, ceci conclut notre séquence
introductive sur les constructeurs.

119
00:08:16,620 --> 00:08:19,883
Nous avons encore beaucoup de choses à
vous raconter comme, par exemple,

120
00:08:19,883 --> 00:08:23,193
parler du constructeur par défaut,
il est unique celui-ci. Parler de la

121
00:08:23,193 --> 00:08:28,109
construction de copies et puis regarder
ce qui se passe en fin de vie d'objet

122
00:08:28,109 --> 00:08:32,613
et comment comparer des objets
différents entre eux.

123
00:08:32,613 --> 00:08:34,486
Tout ceci est l'objet des séquences
vidéos suivantes.
