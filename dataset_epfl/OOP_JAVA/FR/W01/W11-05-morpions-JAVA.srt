1
00:00:04,288 --> 00:00:07,620
Bien penser l'interface d'utilisation
d'une classe est une étape fondamentale

2
00:00:07,620 --> 00:00:12,069
dans toute bonne conception orientée
objet, une interface mal conçue qui

3
00:00:12,069 --> 00:00:16,064
offrirait trop de prise à l'utilisateur
externe sur les détails d'implémentation

4
00:00:16,064 --> 00:00:20,063
peut s'avérer tout aussi dangereuse 
que de laisser en public des attributs.

5
00:00:20,063 --> 00:00:22,672
Nous allons dans ce qui suit, comparer
deux choix d'interfaces possibles

6
00:00:22,672 --> 00:00:26,285
pour une même classe ; dans un premier 
cas l'interface offrira des fonctionnalités

7
00:00:26,285 --> 00:00:28,917
de trop bas niveau qui dévoilent 
à l'utilisateur externe

8
00:00:28,917 --> 00:00:31,019
les détails d'implémentation de la classe.

9
00:00:31,019 --> 00:00:32,961
Dans le second cas l'interface n'offrira

10
00:00:32,961 --> 00:00:35,535
que ce qui est strictement nécessaire
comme fonctionnalités

11
00:00:35,535 --> 00:00:37,113
et nous allons bien évidemment voir

12
00:00:37,113 --> 00:00:41,320
que la seconde option offre de nombreux
avantages par rapport à la première.

13
00:00:41,320 --> 00:00:43,619
On s'intéresse ici à programmer une
classe qui nous permet de

14
00:00:43,619 --> 00:00:47,580
jouer au jeu du morpion (tic-tac-toe),
le but de jeu, pour rappel, c'est,

15
00:00:47,580 --> 00:00:54,267
sur une grille 3x3, deux joueurs vont
s'affronter, l'un qui va pouvoir poser

16
00:00:54,267 --> 00:00:59,112
par exemple des ronds et un second qui
va pouvoir poser des croix ;

17
00:00:59,112 --> 00:01:03,241
les joueurs vont jouer tour à tour
et l'idée est que le joueur a gagné

18
00:01:03,241 --> 00:01:08,108
s'il parvient à aligner trois de ses
jetons soit en ligne, soit en diagonale,

19
00:01:08,108 --> 00:01:09,450
soit en colonne.

20
00:01:09,800 --> 00:01:13,535
Dans la première conception de jeu du
morpion que vous avez sous les yeux ici

21
00:01:13,535 --> 00:01:16,387
le programmeur concepteur a une vision
assez minimaliste des services

22
00:01:16,387 --> 00:01:18,636
qu'il veut offrir au monde extérieur,

23
00:01:18,636 --> 00:01:21,365
donc il s'est penché sur la conception
en termes d'attributs,

24
00:01:21,365 --> 00:01:23,704
donc il s'est dit qu'il lui
fallait une grille,

25
00:01:23,704 --> 00:01:27,061
puis en termes de fonctionnalité,
il propose à l'utilisateur externe

26
00:01:27,061 --> 00:01:30,462
comme méthode publique, une méthode
d'initialisation qui permet de partir

27
00:01:30,462 --> 00:01:33,334
d'une grille vide pour commencer à jouer

28
00:01:33,334 --> 00:01:35,456
et il offre simplement
comme fonctionnalité,

29
00:01:35,456 --> 00:01:38,398
un accès à la grille de jeu qui
permettra de la remplir

30
00:01:38,398 --> 00:01:41,512
depuis l'extérieur de la classe
en y plaçant par exemple

31
00:01:41,512 --> 00:01:44,120
des jetons rouges ou des croix bleues.

32
00:01:44,120 --> 00:01:47,179
Examinons maintenant de plus près les 
choix d'implémentation faits par notre

33
00:01:47,179 --> 00:01:49,883
programmeur concepteur 
de la classe JeuMorpion ;

34
00:01:49,883 --> 00:01:53,565
comment a-t-il choisi de modaliser
par exemple la grille de jeu.

35
00:01:53,565 --> 00:01:57,606
Ici, on se rend compte qu'il a utilisé
un tableau à une dimension.

36
00:01:57,606 --> 00:02:01,269
C'est un choix qui n'est peut être pas
naturel mais qui est tout à fait possible.

37
00:02:01,269 --> 00:02:06,881
Donc au final, une grille de jeu
dans cette conception, sera un tableau

38
00:02:06,881 --> 00:02:12,206
donc concrètement l'objet écrit sera
une référence vers un tableau...

39
00:02:12,206 --> 00:02:14,286
à une dimension,

40
00:02:14,286 --> 00:02:16,746
donc on suppose ici que par
exemple pour la première ligne

41
00:02:16,746 --> 00:02:18,769
on utilise les trois premières
cases du tableau,

42
00:02:18,769 --> 00:02:20,752
les trois suivantes pour la seconde ligne

43
00:02:20,752 --> 00:02:24,585
et les trois dernières pour la dernière
ligne de notre jeu de Tic tac toe.

44
00:02:25,734 --> 00:02:29,788
La méthode d'initialisation se borne
ici à construire le tableau

45
00:02:29,788 --> 00:02:34,264
et table sur les valeurs par défaut des
entrées du tableau pour initialiser...

46
00:02:35,064 --> 00:02:36,485
les différentes cases.

47
00:02:36,485 --> 00:02:39,226
Donc ici nous avons des ronds partout.

48
00:02:39,226 --> 00:02:42,599
Le programmeur de la classe JeuMorpion
a bien pris soin de déclarer en privé

49
00:02:42,599 --> 00:02:46,039
comme il se doit, l'attribut grille,
ce qui voudra dire concrètement que

50
00:02:46,039 --> 00:02:50,950
l'utilisateur externe de la classe 
JeuMorpion ne pourra pas

51
00:02:50,950 --> 00:02:54,435
directement accéder à cet attribut,
donc si on déclare depuis l'extérieur

52
00:02:54,435 --> 00:02:58,499
une variable de type JeuMorpion qui
s’appellerait jeu, on ne peut pas

53
00:02:58,499 --> 00:03:01,466
directement accéder à la grille
de jeu par cette notation.

54
00:03:01,466 --> 00:03:03,955
Par contre, il offre un accès à la grille,

55
00:03:03,955 --> 00:03:06,344
puisqu'il faut quand même un minimum
d'interaction depuis l'extérieur

56
00:03:06,344 --> 00:03:07,915
pour pouvoir remplir la grille.

57
00:03:07,915 --> 00:03:14,162
Concrètement, celui qui utilise la classe
JeuMorpion peut par exemple déclarer

58
00:03:14,162 --> 00:03:17,877
un tableau à une dimension
qui serait sa grille,

59
00:03:17,877 --> 00:03:20,612
la grille sur laquelle il va jouer,

60
00:03:20,612 --> 00:03:22,267
et lui affecter...

61
00:03:25,637 --> 00:03:29,562
... ce que retourne le getGrille,
donc ce sera ici la référence

62
00:03:29,562 --> 00:03:32,627
vers le tableau modélisant
la grille de jeu.

63
00:03:32,627 --> 00:03:34,531
Nous verrons que par le biais de
cet accès à la grille,

64
00:03:34,531 --> 00:03:37,295
l'utilisateur de la classe JeuMorpion
peut faire des manipulations

65
00:03:37,295 --> 00:03:39,050
qui ne sont pas souhaitables.

66
00:03:39,380 --> 00:03:42,786
Passons maintenant du côté de
l'utilisateur de la classe JeuMorpion,

67
00:03:42,786 --> 00:03:44,847
donc comme nous l'avons
suggéré tout à l'heure, cet utilisateur

68
00:03:44,847 --> 00:03:49,848
peut déclarer et utiliser une variable
de type JeuMorpion, il va ensuite

69
00:03:49,848 --> 00:03:53,250
bien sûr utiliser les fonctionnalités 
offertes par la classe

70
00:03:53,250 --> 00:03:58,171
pour pouvoir travailler concrètement 
avec sa variable jeu.

71
00:03:58,171 --> 00:04:02,228
Imaginons maintenant qu'il souhaite
simplement réfléchir à comment placer

72
00:04:02,228 --> 00:04:05,188
un rond dans une case particulière.

73
00:04:05,188 --> 00:04:07,928
Une des premières choses que doit 
faire le programmeur utilisateur

74
00:04:07,928 --> 00:04:11,375
est de décider selon quelless conventions
il va remplir sa grille, de décider

75
00:04:11,375 --> 00:04:14,380
par exemple que s'il met un 1 ça veut 
dire qu'il a placé un rond sur la grille

76
00:04:14,380 --> 00:04:19,638
et s'il met un 2 c'est qu'il a placé
une croix, sachant que un 0

77
00:04:19,638 --> 00:04:24,119
modélise une case vide 
dans la grille de jeu.

78
00:04:24,119 --> 00:04:26,909
S'il veut placer un rond sur la
première case du tableau,

79
00:04:26,909 --> 00:04:31,408
l'utilisateur n'a d'autre choix
que d'accéder à la grille...

80
00:04:34,488 --> 00:04:36,177
par la fonctionnalité getGrille

81
00:04:36,177 --> 00:04:39,986
et d'utiliser cette référence à la 
grille pour y placer la valeur voulue.

82
00:04:39,986 --> 00:04:45,870
Donc il doit savoir que le getGrille
lui donne un accès à la grille

83
00:04:45,870 --> 00:04:48,219
telle qu'implémentée dans la
classe JeuMorpion,

84
00:04:48,219 --> 00:04:54,411
que les trois premières cases modélisent
la première ligne de la grille de jeu

85
00:04:54,411 --> 00:04:58,387
et selon ces conventions, il va donc,
pour placer un rond à cette position,

86
00:04:58,387 --> 00:05:03,218
devoir mettre ici la valeur 1 dans
cette première case.

87
00:05:03,218 --> 00:05:10,054
Ce qui se traduit par cette notation ici, 
on accède à la grille du jeu

88
00:05:10,054 --> 00:05:12,794
et à la première case
on affecte la valeur 1.

89
00:05:12,794 --> 00:05:17,634
En utilisant les fonctionnalités offertes
et puisqu'il a un accès à la grille

90
00:05:17,634 --> 00:05:20,444
même s'il est indirect, au travers 
d'une fonctionnalité,

91
00:05:20,444 --> 00:05:24,332
le programmeur utilisateur de la classe
jeu morpions peut parfaitement aboutir

92
00:05:24,332 --> 00:05:26,632
à un jeu de morpions fonctionnel.

93
00:05:26,632 --> 00:05:29,336
Donc c'est à lui de se préoccuper
de la logique du jeu,

94
00:05:29,336 --> 00:05:31,964
de faire alterner un joueur avec un autre,

95
00:05:31,964 --> 00:05:34,232
de placer les bons jetons
aux bons endroits

96
00:05:34,232 --> 00:05:36,611
et s'il est suffisamment précautionneux
dans son travail,

97
00:05:36,611 --> 00:05:39,521
il peut tout à fait aboutir à une
version fonctionnelle du jeu.

98
00:05:39,521 --> 00:05:41,631
Mais si l'on examine tout
cela de plus près,

99
00:05:41,631 --> 00:05:44,721
on se rend compte que cette approche
présente de très nombreux problèmes.

100
00:05:45,631 --> 00:05:49,380
En effet le programmeur utilisateur
de la classe JeuMorpion

101
00:05:49,380 --> 00:05:52,612
ne peut absolument pas travailler sans 
connaître les détails intimes

102
00:05:52,612 --> 00:05:55,146
d'implémentation de la classe JeuMorpion.

103
00:05:55,146 --> 00:05:58,733
Il doit savoir par exemple que les cases
sont stockées sous forme d'entiers,

104
00:05:58,733 --> 00:06:02,105
d'un tableau à une dimension,
avec une convention ligne par ligne,

105
00:06:02,105 --> 00:06:06,975
il doit savoir que la case initialisée
à 0 correspond à une case vide,

106
00:06:06,975 --> 00:06:10,727
il doit lui même faire un certain nombre
de choix et de conventions comme

107
00:06:10,727 --> 00:06:14,533
le fait que le 1 correspond à un rond
et que le 2 correspond à une croix

108
00:06:14,533 --> 00:06:18,263
L'utilisateur doit connaître 
les détails intimes d'implémentation.

109
00:06:19,783 --> 00:06:23,372
Par ailleurs, le code auquel va aboutir
le programmeur utilisateur de la classe

110
00:06:23,372 --> 00:06:26,059
JeuMorpion est malheureusement
complètement cryptique ;

111
00:06:26,059 --> 00:06:29,211
quelqu'un qui lirait cette ligne 
de code serait dans l'incapacité

112
00:06:29,211 --> 00:06:30,801
de la comprendre directement.

113
00:06:30,801 --> 00:06:34,335
Que veut dire ce 0 ? 
Que veut dire 1 ici ?

114
00:06:34,335 --> 00:06:38,321
Il ne pourrait comprendre ce code
sans aller lire l'intérieur

115
00:06:38,321 --> 00:06:41,124
de la classe JeuMorpion
qui est utilisée ici.

116
00:06:41,124 --> 00:06:44,385
Que se passe-t-il aussi si le programmeur 
de la classe JeuMorpion

117
00:06:44,385 --> 00:06:46,828
décide de modifier ses choix
d'implémentation ?

118
00:06:46,828 --> 00:06:49,701
Supposons qu'au lieu de travailler
avec un tableau à une dimension,

119
00:06:49,701 --> 00:06:51,085
ce qui n'était pas très naturel,

120
00:06:51,085 --> 00:06:54,624
il décide de passer à un tableau à 
deux dimensions.

121
00:06:54,624 --> 00:06:59,072
Cette ligne de code devrait s'écrire
alors comme ceci,

122
00:06:59,072 --> 00:07:02,820
donc le programmeur utilisateur
de la classe JeuMorpion

123
00:07:02,820 --> 00:07:08,938
devrait modifier ses lignes de code pour
pouvoir s'adapter à la classe JeuMorpion

124
00:07:09,298 --> 00:07:11,803
et s'il a écrit de très nombreuses
lignes de code,

125
00:07:11,803 --> 00:07:15,963
et bien, l'intégralité de son code
serait à revoir et à réécrire.

126
00:07:15,963 --> 00:07:19,283
Enfin, point très important et très 
dangereux, le programmeur concepteur

127
00:07:19,283 --> 00:07:23,791
de la classe JeuMorpion offre à celui 
qui l'utilise un accès à la référence

128
00:07:23,791 --> 00:07:26,018
vers la grille de jeu en interne.

129
00:07:26,018 --> 00:07:29,505
Ce qui veut dire qu'en utilisant
cette fonctionnalité,

130
00:07:29,505 --> 00:07:32,363
il devient possible à celui qui utilise
la classe JeuMorpion

131
00:07:32,363 --> 00:07:38,724
d'avoir accès à la référence par le biais
de cette fonctionnalité qui lui permet

132
00:07:38,724 --> 00:07:43,069
d'accéder au tableau et de le modifier
d'une façon pas toujours souhaitée.

133
00:07:43,069 --> 00:07:46,651
Donc même si notre programmeur de la 
classe JeuMorpion a bien pris le soin

134
00:07:46,651 --> 00:07:49,584
de déclarer l'attribut grille
comme privé,

135
00:07:49,584 --> 00:07:52,507
ce qui interdit ce genre de manipulations,

136
00:07:52,837 --> 00:07:55,452
on peut faire exactement la même chose

137
00:07:55,452 --> 00:07:58,851
au travers des fonctionnalités 
qu'il a choisi d'offrir.

138
00:08:01,301 --> 00:08:04,341
Donc offrir un accès à la grille
via cette méthode getGrille

139
00:08:04,341 --> 00:08:09,207
revient exactement au même 
que laisser l'attribut comme public.

140
00:08:09,207 --> 00:08:11,620
De façon générale lorsque un
attribut est un objet,

141
00:08:11,620 --> 00:08:13,413
comme c'est le cas de la grille ici,

142
00:08:13,413 --> 00:08:16,217
offrir un accès à la référence
à cet objet via un <i>getter</i>,

143
00:08:16,217 --> 00:08:17,971
comme c'est le cas ici,

144
00:08:17,971 --> 00:08:21,826
revient exactement au même qu'offrir
un accès direct à l'attribut,

145
00:08:21,826 --> 00:08:25,690
puisqu'on peut manipuler l'objet
au travers de la référence offerte.

146
00:08:25,690 --> 00:08:28,791
Il résulte de l'accès offert à la 
référence vers la grille de jeu

147
00:08:28,791 --> 00:08:30,708
toute sorte de conséquences fâcheuses.

148
00:08:30,708 --> 00:08:34,226
Par exemple le programmeur utilisateur 
peut par inadvertance calculer

149
00:08:34,226 --> 00:08:37,661
un mauvais indice d'accès à la grille
et faire ce genre de choses,

150
00:08:39,261 --> 00:08:42,041
A ce moment-là, le programme
s’arrêterait de façon abrupte,

151
00:08:42,041 --> 00:08:46,833
en lançant un message d'erreur
relativement difficile à décrypter.

152
00:08:46,833 --> 00:08:49,710
L'accès à la grille de jeu par le biais
de la référence permet aussi

153
00:08:49,710 --> 00:08:53,060
toute sorte de manipulations fantaisistes
sur le contenu de la grille lui-même.

154
00:08:53,060 --> 00:08:54,694
Par exemple au lieu de mettre un 1,

155
00:08:54,694 --> 00:08:57,518
imaginez que l'on mette un 42
ou toute autre valeur,

156
00:08:57,518 --> 00:09:00,184
aucune validation n'est faite
de façon intermédiaire.

157
00:09:00,184 --> 00:09:04,334
Donc imaginez que le programmeur
utilisateur ait programmé par ailleurs

158
00:09:05,164 --> 00:09:08,534
une méthode getJoueurGagnant
qui regarde la grille

159
00:09:08,534 --> 00:09:11,336
pour savoir s'il y a un gagnant,
c'est-à-dire trois jetons alignés,

160
00:09:11,336 --> 00:09:15,529
cette méthode JoueurGagnant s'attend
à des valeurs 1 ou 2 dans la grille,

161
00:09:16,029 --> 00:09:19,236
elle va tomber sur une valeur 42
et donc fatalement

162
00:09:19,236 --> 00:09:22,126
elle va se comporter de façon erronée.

163
00:09:22,126 --> 00:09:24,455
Enfin, si l'utilisateur avait
envie de tricher

164
00:09:24,455 --> 00:09:26,784
et donc écraser un rond par une croix,

165
00:09:26,784 --> 00:09:29,113
ce qui normalement est interdit,
une fois qu'un jeton est placé

166
00:09:29,113 --> 00:09:31,169
on ne peut pas l'écraser par
une autre valeur,

167
00:09:31,169 --> 00:09:34,507
ici par le biais de l'accès à la
grille via la référence,

168
00:09:34,507 --> 00:09:38,165
rien nous empêche de faire ce genre
de manipulations frauduleuses.

169
00:09:39,065 --> 00:09:43,373
Donc tout ceci démontre que les méthodes
choisies par le programmeur concepteur,

170
00:09:43,373 --> 00:09:45,039
à savoir, getGrille,

171
00:09:45,039 --> 00:09:48,535
donnent un accès incontrôlé aux
détails intimes d'implémentation.

172
00:09:50,065 --> 00:09:53,061
Toutes ces manipulations peuvent se faire
désormais sans aucune

173
00:09:53,061 --> 00:09:56,878
validation des données, ce qui ne
correspond pas à une bonne conception.

174
00:09:57,808 --> 00:10:01,090
Pour programmer une classe JeuMorpion
proprement encapsulée,

175
00:10:01,090 --> 00:10:04,506
il est impératif que les choix d'implémentation
ne soient pas accessibles ou visibles,

176
00:10:04,506 --> 00:10:08,624
au travers de l'interface d'utilisation
offerte au programmeur externe.

177
00:10:08,624 --> 00:10:11,167
Par ailleurs, les choix
d'implémentation internes,

178
00:10:11,167 --> 00:10:12,460
comme par exemple,

179
00:10:12,460 --> 00:10:13,728
comment représenter la grille,

180
00:10:13,728 --> 00:10:16,336
comment modéliser les jetons
qui se posent sur la grille,

181
00:10:16,336 --> 00:10:19,716
doivent être du ressort de celui qui 
implémente la classe JeuMorpion

182
00:10:19,716 --> 00:10:21,732
et non pas de celui qui l'utilise.

183
00:10:21,732 --> 00:10:23,169
Nous allons étudier dans ce qui suit

184
00:10:23,169 --> 00:10:24,807
une variante qui améliore

185
00:10:24,807 --> 00:10:26,534
la version précédente.

186
00:10:26,934 --> 00:10:28,768
Alors, pour programmer proprement
la classe JeuMorpion il va falloir

187
00:10:28,768 --> 00:10:32,390
prendre un certain nombre de décisions
quant à l'implémentation de la grille,

188
00:10:32,470 --> 00:10:35,108
ici on décide de l'implémenter de façon

189
00:10:35,108 --> 00:10:37,495
un peu plus parlante et explicite
que nous l'avons fait tout à l'heure

190
00:10:37,495 --> 00:10:40,546
en utilisant un tableau à deux 
dimensions qui est plus proche

191
00:10:40,546 --> 00:10:44,399
de la représentation effective
du Jeu du Morpion.

192
00:10:45,089 --> 00:10:49,073
Nous devons aussi décider comment 
codifier les données

193
00:10:49,073 --> 00:10:51,548
que nous plaçons à l'intérieur
de la grille,

194
00:10:51,548 --> 00:10:55,093
et ici il vaut toujours mieux expliciter
le plus possible les choix que l'on fait.

195
00:10:55,093 --> 00:10:56,718
Ceci peut se faire par exemple

196
00:10:56,718 --> 00:10:59,283
en introduisant un certain
nombre de constantes

197
00:10:59,283 --> 00:11:01,369
qui vont donner une sémantique claire

198
00:11:01,369 --> 00:11:04,847
à la signification des différents entiers
qu'on va placer dans notre tableau,

199
00:11:04,847 --> 00:11:08,227
Ensuite, contrairement à ce qui a été
fait dans la version précédente,

200
00:11:08,657 --> 00:11:10,948
ne pas compter sur des valeurs
implicites par défaut

201
00:11:10,948 --> 00:11:12,726
pour le remplissage initial de la grille,

202
00:11:12,726 --> 00:11:15,534
mais rendre ce remplissage
le plus explicite possible,

203
00:11:15,534 --> 00:11:16,882
ce que nous faisons ici.

204
00:11:16,882 --> 00:11:20,253
Donc en lisant par exemple cet portion
de code, il est tout à fait évident

205
00:11:20,253 --> 00:11:23,291
que l'on est en train de remplir 
la grille du Jeu Morpion...

206
00:11:25,081 --> 00:11:26,547
avec des cases vides.

207
00:11:27,397 --> 00:11:31,553
Ensuite l'idée principale est d'offrir
aux utilisateurs de la classe JeuMorpion

208
00:11:31,553 --> 00:11:35,776
uniquement un ensemble en deux méthodes
bien choisies qui lui permettront

209
00:11:35,776 --> 00:11:39,374
d’interagir avec le plateau de jeu
sans pour autant en connaître

210
00:11:39,374 --> 00:11:41,130
les détails d'implémentation.

211
00:11:41,130 --> 00:11:46,350
Par exemple, on peut lui fournir une
méthode placerRond en lui indiquant

212
00:11:46,350 --> 00:11:49,267
que le mode d'interaction, c'est de
fournir une ligne et une colonne,

213
00:11:49,267 --> 00:11:50,844
ce qui est assez naturel,

214
00:11:50,844 --> 00:11:55,103
et ensuite on se préoccupe en interne
de comment implémenter concrètement

215
00:11:55,103 --> 00:11:59,051
le fait de mettre un rond à une ligne et
une colonne données sur la grille de jeu.

216
00:11:59,961 --> 00:12:04,109
De façon analogue, on fournirait
une méthode publique placerCroix

217
00:12:04,109 --> 00:12:06,762
qui permettrait donc au programmeur
utilisateur du jeu Morpion

218
00:12:06,762 --> 00:12:09,970
de placer une croix en spécifiant
simplement à quelle ligne

219
00:12:09,970 --> 00:12:12,745
et à quelle colonne il désire le faire.

220
00:12:12,745 --> 00:12:16,766
Placer un rond ou une croix sur une 
ligne et une colonne données, se fait

221
00:12:16,766 --> 00:12:20,262
exactement selon les mêmes modalités
peu importe que ce soit un rond

222
00:12:20,262 --> 00:12:23,625
ou une croix que l'on place, 
donc il est naturel ici de penser

223
00:12:23,625 --> 00:12:27,539
à modulariser les traitements en
programmant une méthode placerCoup

224
00:12:27,539 --> 00:12:31,437
qui se charge de placer un coup sur
une ligne et une colonne données.

225
00:12:31,437 --> 00:12:35,229
Les deux méthodes placerRond et 
placerCroix suffisent complètement

226
00:12:35,229 --> 00:12:38,998
à l'utilisateur externe pour pouvoir placer
un rond ou une croix sur le plateau,

227
00:12:38,998 --> 00:12:42,312
il n'est pas nécessaire par
conséquent de lui fournir

228
00:12:42,312 --> 00:12:43,942
un accès à placerCoup ;

229
00:12:43,942 --> 00:12:47,638
l'interface d'utilisation est complètement
définie pour placer une pièce,

230
00:12:47,638 --> 00:12:50,321
uniquement au moyen de
ces deux méthodes-là.

231
00:12:50,321 --> 00:12:53,889
Ce qui veut dire qu'au moment où
on va coder placerCoup,

232
00:12:53,889 --> 00:12:57,518
on va coder cette méthode comme une 
méthode privée de la classe

233
00:12:57,518 --> 00:13:01,076
qui aide simplement la classe à réaliser 
les traitements souhaités

234
00:13:01,076 --> 00:13:03,622
mais qui n'est pas offerte
comme fonctionnalité

235
00:13:03,622 --> 00:13:06,208
au programmeur utilisateur
de la classe JeuMorpion.

236
00:13:06,748 --> 00:13:11,704
Comme c'est le programmeur utilisateur
qui va fournir la ligne et la colonne

237
00:13:11,704 --> 00:13:13,735
sur lesquelles il souhaite placer le coup,

238
00:13:13,735 --> 00:13:17,739
il est nécessaire, si l'on veut rendre
les traitements plus robustes aux erreurs,

239
00:13:17,739 --> 00:13:23,000
de traiter les cas où ces lignes et
ces colonnes ne correspondraient pas

240
00:13:23,000 --> 00:13:25,323
aux dimensions souhaitées pour la grille.

241
00:13:25,323 --> 00:13:28,492
Donc typiquement si la ligne est 
en dessous de l'indice 0

242
00:13:28,492 --> 00:13:33,009
ou en dessus de la taille de la grille, 
en termes de nombre de lignes,

243
00:13:33,009 --> 00:13:34,990
alors on doit signaler une erreur.

244
00:13:34,990 --> 00:13:40,170
Donc il faudrait rendre les traitements
plus robustes en se chargeant de l'erreur.

245
00:13:40,170 --> 00:13:42,950
Une fois que l'on a vérifié que
la ligne et la colonne

246
00:13:42,950 --> 00:13:46,570
transmises par l'utilisateur
externe sont bien valides,

247
00:13:46,570 --> 00:13:48,512
il nous faut encore vérifier

248
00:13:48,512 --> 00:13:51,493
que cette case particulière de
la grille est bien vide ;

249
00:13:52,073 --> 00:13:53,894
en effet, sur le jeu du morpion,

250
00:13:53,894 --> 00:13:57,455
vous n'avez pas le droit de placer
un coup sur une case déjà remplie

251
00:13:57,455 --> 00:14:02,628
et si ce n'est pas le cas, il faut le signaler
à nouveau comme un cas d'erreur.

252
00:14:03,918 --> 00:14:07,191
Le boolean qui sert de type de retour
à la méthode placerCoup

253
00:14:07,191 --> 00:14:10,791
permet d'indiquer si oui ou non 
on a réussi à placer notre coup

254
00:14:10,791 --> 00:14:13,555
sur la ligne et la colonne souhaitées.

255
00:14:14,265 --> 00:14:20,273
Les méthodes placerRond et placerCroix
vont faire usage de ce boolean,

256
00:14:20,273 --> 00:14:24,118
donc elles vont retourner le boolean
issu de l'appel à placerCoup

257
00:14:24,118 --> 00:14:28,324
pour indiquer à l'utilisateur externe
si oui ou non le placement

258
00:14:28,324 --> 00:14:31,772
d'une croix ou d'un rond à l’emplacement
souhaitées, s'est bien passé ou non.

259
00:14:33,022 --> 00:14:36,823
Voyons maintenant comme toutes ces
modifications de la classe JeuMorpion

260
00:14:36,823 --> 00:14:39,086
se manifestent pour celui qui l'utilise.

261
00:14:39,086 --> 00:14:40,315
Comme tout à l'heure,

262
00:14:40,315 --> 00:14:43,834
un programmeur qui souhaiterait
utiliser la classe JeuMorpion

263
00:14:43,834 --> 00:14:48,203
va déclarer une variable de ce type-là,
il va pouvoir l'initialiser

264
00:14:48,203 --> 00:14:50,710
au travers des fonctionnalités 
publiquement offertes

265
00:14:50,710 --> 00:14:55,837
mais surtout au moment de placer un coup,
il va pouvoir utiliser des fonctionnalités

266
00:14:55,837 --> 00:14:58,427
beaucoup plus explicites,
comme ici placerRond,

267
00:14:58,907 --> 00:15:00,727
et qui ne nécessitent de sa part

268
00:15:00,727 --> 00:15:04,218
aucune connaissance de comment 
sont codifiées les données en interne.

269
00:15:04,668 --> 00:15:08,181
Donc ici si je veux placer un rond,
j'indique que je place un rond

270
00:15:08,181 --> 00:15:11,472
dans le jeu à la ligne 0 
et à la colonne 0

271
00:15:11,472 --> 00:15:15,321
et je peux également m'informer
du fait que le fait de placer ce rond

272
00:15:15,321 --> 00:15:17,540
s'est bien passé ou non.

273
00:15:18,080 --> 00:15:21,162
On procéderait bien sûr de façon 
tout à fait analogue pour placer

274
00:15:21,162 --> 00:15:24,068
une croix sur une autre case 
de la grille de jeu.

275
00:15:24,068 --> 00:15:28,044
Cette façon d'implémenter la classe 
JeuMorpion qui permet un usage

276
00:15:28,044 --> 00:15:30,548
beaucoup plus robuste et 
beaucoup plus explicite

277
00:15:30,548 --> 00:15:33,594
ne nous affranchit pas cependant
de devoir expliciter

278
00:15:33,594 --> 00:15:36,040
un certain nombre de
conventions d'utilisations.

279
00:15:36,040 --> 00:15:40,987
Par exemple ici, nous imposons à celui
qui utilise les méthodes fournies,

280
00:15:40,987 --> 00:15:43,251
d'utiliser un système de numérotation

281
00:15:43,251 --> 00:15:45,439
qui est le suivant pour
les lignes et les colonnes ;

282
00:15:45,439 --> 00:15:48,681
nous aurions pu en choisir un autre.

283
00:15:48,681 --> 00:15:50,523
Alors ces conventions doivent absolument

284
00:15:50,523 --> 00:15:54,135
être documentées au niveau 
de l'interface d'utilisation.

285
00:15:55,165 --> 00:15:57,478
La nouvelle implémentation
de la classe JeuMorpion

286
00:15:57,478 --> 00:16:01,281
comporte de nombreux avantages par
rapport à la première version proposée.

287
00:16:02,105 --> 00:16:05,312
En effet, elle permet 
de valider les données,

288
00:16:05,312 --> 00:16:07,583
par exemple, il n'est plus possible
dans cette nouvelle version

289
00:16:07,583 --> 00:16:10,310
de mettre une valeur invalide
dans le tableau de jeu.

290
00:16:10,310 --> 00:16:11,068
Pourquoi ?

291
00:16:11,068 --> 00:16:15,636
Eh bien, parce que celui qui utilise les
fonctionnalités de la classe JeuMorpion

292
00:16:15,636 --> 00:16:18,351
ne sait même pas que le vide
est codifié comme un 0,

293
00:16:18,351 --> 00:16:21,886
que le 1 et le 2 représentent
des ronds et des croix.

294
00:16:21,886 --> 00:16:25,243
Donc il utilise simplement une méthode
placerRond ou placerCroix

295
00:16:25,243 --> 00:16:27,134
et c'est l'implémentation en interne

296
00:16:27,134 --> 00:16:29,888
qui se charge de la bonne codification.

297
00:16:30,638 --> 00:16:33,571
De même il est impossible 
à l'utilisateur externe

298
00:16:33,571 --> 00:16:36,976
de cocher une case déjà cochée.

299
00:16:36,976 --> 00:16:40,023
Nous avons vu dans l'implémentation
de placerCoup que celle-ci vérifiait

300
00:16:40,023 --> 00:16:44,331
que la case était bien vide avant
de pouvoir y placer un nouveau jeton.

301
00:16:44,331 --> 00:16:45,500
Un autre point important,

302
00:16:45,500 --> 00:16:47,999
et qui est garant d'une bonne
conception orientée objet,

303
00:16:47,999 --> 00:16:50,568
est ce qu'on appelle
la séparation des soucis :

304
00:16:50,568 --> 00:16:54,894
celui qui utilise la classe JeuMorpion
n'a pas besoin de savoir comment

305
00:16:54,894 --> 00:16:58,661
en interne est représentée la grille 
et ce qui se passe concrètement

306
00:16:58,661 --> 00:17:02,029
lorsqu'il place une pièce
sur le plateau.

307
00:17:02,029 --> 00:17:05,417
Les seules choses dont il a à se
préoccuper c'est de la logique du jeu,

308
00:17:05,417 --> 00:17:07,691
de comment il veut placer
ses ronds et ses croix.

309
00:17:08,111 --> 00:17:12,291
Enfin, le code est compréhensible
même pour un profane,

310
00:17:12,291 --> 00:17:17,823
lorsque j'écris par exemple

311
00:17:19,263 --> 00:17:20,135
jeu.placerRond(0, 0)

312
00:17:20,135 --> 00:17:21,969
je n'ai pas besoin de beaucoup
d'explications

313
00:17:21,969 --> 00:17:24,153
pour savoir ce qui 
se passe concrètement.

314
00:17:24,153 --> 00:17:31,101
Ce n'était pas le cas dans la version
antérieure où pour placer un jeton,

315
00:17:31,101 --> 00:17:34,671
je devais passer par des tournures
complètement cryptiques

316
00:17:34,671 --> 00:17:36,416
de cette nature.

317
00:17:36,846 --> 00:17:38,141
Comparez les deux...

318
00:17:41,351 --> 00:17:42,926
et vous voyez que la première version

319
00:17:42,926 --> 00:17:45,262
est beaucoup plus explicite et claire.

320
00:17:45,682 --> 00:17:49,258
De même, de part le fait que l'on traite
explicitement les situations d'erreurs

321
00:17:49,258 --> 00:17:51,845
et de façon exhaustive, il devient 
possible désormais

322
00:17:51,845 --> 00:17:54,986
d'avoir un message compréhensible
pour toutes les opérations invalides.

323
00:17:54,986 --> 00:17:59,187
Dans la première version, lorsque nous 
essayons par exemple de placer un jeton

324
00:17:59,187 --> 00:18:03,825
en dehors des limites du tableau,
eh bien, cela se traduisait à l'exécution

325
00:18:03,825 --> 00:18:06,327
par un message ésotérique
de lancement d’exception

326
00:18:06,327 --> 00:18:08,406
et un arrêt abrupt du programme.

327
00:18:08,406 --> 00:18:11,876
Il devient désormais possible de donner
à l'utilisateur un message compréhensible

328
00:18:11,876 --> 00:18:15,996
lui indiquant qu'il essaye de placer
un jeton dans une case invalide.

329
00:18:17,006 --> 00:18:19,424
Nous voici donc arrivés au terme de 
cette petite étude de cas

330
00:18:19,424 --> 00:18:20,850
sur le jeu du Morpion,

331
00:18:20,850 --> 00:18:22,878
nous voyons donc que
pour bien encapsuler,

332
00:18:22,878 --> 00:18:26,346
il est nécessaire de bien cacher les
détails d'implémentation,

333
00:18:26,346 --> 00:18:30,985
de n'offrir que les fonctionnalités qui
sont réellement utiles au monde extérieur

334
00:18:30,985 --> 00:18:33,341
et qui n'offrent pas de prise
au monde extérieur

335
00:18:33,341 --> 00:18:36,664
pour pouvoir altérer et toucher
aux détails d'implémentation.
