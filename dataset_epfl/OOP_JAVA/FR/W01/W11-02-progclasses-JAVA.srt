1
00:00:04,048 --> 00:00:07,659
Dans la séquence vidéo précédente,
nous avions vu les concepts généraux

2
00:00:07,659 --> 00:00:09,843
de la programmation orientée objet (poo).

3
00:00:09,843 --> 00:00:12,056
Dans cette séquence vidéo,
nous allons voir

4
00:00:12,056 --> 00:00:14,750
comment écrire tout ceci
concrètement, en Java.

5
00:00:14,750 --> 00:00:19,322
Nous avions donc vu que la poo
définit la notion de classe,

6
00:00:19,322 --> 00:00:22,896
qui est le résultat des processus 
d'abstraction et d'encapsulation,

7
00:00:22,896 --> 00:00:25,692
comme par exemple, la définition
d'une classe rectangle,

8
00:00:25,692 --> 00:00:28,171
qui aurait les attributs 
largeur et hauteur,

9
00:00:28,171 --> 00:00:30,658
et qui aurait une méthode surface.

10
00:00:30,658 --> 00:00:32,995
La classe, au sens 
des langages de programmation,

11
00:00:32,995 --> 00:00:35,209
définit un nouveau type, 
qui nous permet

12
00:00:35,209 --> 00:00:38,892
de créer différentes variables, 
comme par exemple trois variables,

13
00:00:38,892 --> 00:00:41,288
rect1, rect2, rect3,

14
00:00:41,288 --> 00:00:46,480
qui sont en langage orienté objet,
des instances ou des objets.

15
00:00:46,480 --> 00:00:49,321
Comment tout ceci s'écrit-il
concrètement en Java ?

16
00:00:49,321 --> 00:00:50,950
Pour déclarer une nouvelle classe,

17
00:00:50,950 --> 00:00:53,824
on va utiliser le mot réservé <i>class</i>,

18
00:00:53,824 --> 00:00:56,172
donc par exemple ici, <i>class Rectangle</i>,

19
00:00:56,172 --> 00:01:00,143
pour déclarer une classe, 
que l'on a décidé d'appeler Rectangle,

20
00:01:00,143 --> 00:01:04,994
suivie de la définition,
qui sera détaillée par la suite.

21
00:01:04,994 --> 00:01:08,272
Cette écriture, <i>class rectangle</i>,
définit un nouveau type,

22
00:01:08,272 --> 00:01:11,184
que l'on peut utiliser
comme n'importe quel autre type,

23
00:01:11,184 --> 00:01:13,356
pour déclarer par exemple, des variables.

24
00:01:13,356 --> 00:01:16,189
On utilisera le nom du type, 
c'est-à-dire, le nom de la classe,

25
00:01:16,189 --> 00:01:18,903
suivi du nom de la variable, 
c'est-à-dire, du nom de l'instance.

26
00:01:18,903 --> 00:01:22,745
Par exemple, pour déclarer une instance,
que l'on nomme <i>rect1</i>,

27
00:01:22,745 --> 00:01:27,720
de la classe rectangle, on écrira 
simplement <i>Rectangle rect 1;</i>

28
00:01:27,720 --> 00:01:29,861
En terminologie orientée objet,

29
00:01:29,861 --> 00:01:32,604
une variable correspond 
à une instance.

30
00:01:32,604 --> 00:01:35,273
En Java, concrètement, le nom de l'instance,

31
00:01:35,273 --> 00:01:38,245
c'est-à-dire, <i>rect1</i>, 
dans cet exemple précis,

32
00:01:38,245 --> 00:01:44,445
est en fait une référence 
sur un objet concret en mémoire.

33
00:01:44,445 --> 00:01:48,131
Tout ceci sera expliqué en détails
plus tard dans le cours.

34
00:01:48,131 --> 00:01:50,297
Mais où concrètement 
écrire toutes ces lignes ?

35
00:01:50,297 --> 00:01:51,885
Vous avez pour cela deux solutions.

36
00:01:51,885 --> 00:01:55,170
Vous pouvez déclarer toutes vos classes
dans un même fichier,

37
00:01:55,170 --> 00:01:57,851
ou mettre une classe par fichier.

38
00:01:57,851 --> 00:01:58,972
Regardons le premier cas,

39
00:01:58,972 --> 00:02:02,434
où on déclare toutes les classes 
dans le même fichier.

40
00:02:02,434 --> 00:02:06,813
Supposons, peu importe les détails,
retenons les idées,

41
00:02:06,813 --> 00:02:09,406
que l'on veuille avoir une classe <i>Dessin</i>,

42
00:02:09,406 --> 00:02:13,023
qui utilise par exemple 
une classe <i>Rectangle</i>.

43
00:02:13,023 --> 00:02:16,626
Tout ceci est déclaré 
dans un seul et même fichier,

44
00:02:16,626 --> 00:02:19,718
qu'on a décidé d'appeler <i>Dessin.java.</i>

45
00:02:19,718 --> 00:02:23,396
On a donc ici l'intégralité 
du fichier <i>Dessin.java.</i>

46
00:02:23,396 --> 00:02:27,428
On peut comme ça déclarer ici
une classe <i>rectangle</i>,

47
00:02:27,428 --> 00:02:29,259
une autre classe <i>Dessin</i>.

48
00:02:29,259 --> 00:02:33,243
Concrètement, pour le compiler, 
on utilisera la compilation

49
00:02:33,243 --> 00:02:36,962
javac Dessin.java,
que vous tapiez directement

50
00:02:36,962 --> 00:02:38,568
cette commande sur le terminal,

51
00:02:38,568 --> 00:02:41,014
ou que ce soit votre environnement
de développement,

52
00:02:41,014 --> 00:02:43,229
Eclipse ou autre,
qui le fasse pour vous.

53
00:02:43,229 --> 00:02:46,105
Cette compilation va par contre
produire deux fichiers.

54
00:02:46,105 --> 00:02:50,741
Un fichier <i>Dessin.class</i>,
et un fichier <i>Rectangle.class</i>,

55
00:02:50,741 --> 00:02:52,956
et ensuite pour exécuter tout ceci,

56
00:02:52,956 --> 00:02:55,799
la méthode <i>main</i>
étant dans la classe <i>Dessin</i>,

57
00:02:55,799 --> 00:03:00,934
on écrirait simplement java Dessin
sur le terminal.

58
00:03:00,934 --> 00:03:04,431
Ou on lancerait directement
l'exécution de ce <i>dessin.class</i>

59
00:03:04,431 --> 00:03:06,677
depuis éclipse par exemple.

60
00:03:06,677 --> 00:03:11,176
Voilà donc la première solution
pour déclarer les classes.

61
00:03:11,176 --> 00:03:15,320
Une autre solution consiste 
à déclarer une classe par fichier.

62
00:03:15,320 --> 00:03:17,267
Donc chaque fois 
que vous avez une classe,

63
00:03:17,267 --> 00:03:18,720
vous avez un fichier à part,

64
00:03:18,720 --> 00:03:20,608
donc vous déclareriez 
la classe <i>Rectangle</i>

65
00:03:20,608 --> 00:03:23,113
dans, par exemple, 
le fichier <i>Rectangle.java</i>,

66
00:03:23,113 --> 00:03:26,773
la classe <i>Dessin</i> dans 
le fichier <i>Dessin.java.</i>

67
00:03:26,773 --> 00:03:29,249
Et dans ce cas, si vous compilez 
depuis le terminal,

68
00:03:29,249 --> 00:03:33,152
il faudrait compiler séparément 
chacun des fichiers.

69
00:03:33,152 --> 00:03:35,639
Bien sûr dans un environnement
de développement intégré,

70
00:03:35,639 --> 00:03:38,262
ces deux fichiers seraient intégrés
dans le même projet,

71
00:03:38,262 --> 00:03:41,130
et on les compilerait séparément,

72
00:03:41,130 --> 00:03:43,787
en appelant une seule fois 
la commande <i>Build</i>.

73
00:03:43,787 --> 00:03:46,729
C'est éclipse qui se chargerait
de compiler ces deux fichiers,

74
00:03:46,729 --> 00:03:49,203
et qui produirait 
comme dans le cas précédent,

75
00:03:49,203 --> 00:03:51,316
deux fichiers <i>.class</i>.

76
00:03:51,316 --> 00:03:52,843
Si on l'exécutait depuis le terminal,

77
00:03:52,843 --> 00:03:56,586
on taperait ici, java Dessin,
puisque c'est la classe <i>Dessin</i>

78
00:03:56,586 --> 00:03:58,747
qui a la fonction <i>main</i>.

79
00:03:58,747 --> 00:04:00,800
C'est également 
ce que fera pour vous éclipse,

80
00:04:00,800 --> 00:04:02,592
si vous lancez l'exécution depuis là.

81
00:04:02,592 --> 00:04:07,773
Si par hasard, vous aviez envie
de faire java sur <i>Rectangle.class</i>,

82
00:04:07,773 --> 00:04:11,215
rectangle qui ne contient pas de main,

83
00:04:11,215 --> 00:04:15,060
va vous donner à ce moment-là
une exception,

84
00:04:15,060 --> 00:04:22,975
qui vous dit qu'il n'existe pas 
de méthode <i>main</i> dans la classe rectangle.

85
00:04:22,975 --> 00:04:25,746
Voyons maintenant 
comment remplir cette partie,

86
00:04:25,746 --> 00:04:26,914
c'est-à-dire comment mettre des 
attributs et des méthodes à notre classe.

87
00:04:29,963 --> 00:04:31,288
Commençons par les attributs.

88
00:04:31,288 --> 00:04:35,799
Les attributs de la classe Rectangle
sont sa largeur et sa hauteur.

89
00:04:35,799 --> 00:04:38,883
Pour déclarer des attributs, 
il suffit de déclarer

90
00:04:38,883 --> 00:04:42,788
les différents attributs en mettant 
le type et le nom de l'attribut.

91
00:04:42,788 --> 00:04:46,060
On déclare ici, 
pour chacun des attributs,

92
00:04:46,060 --> 00:04:48,218
son type, son nom d'attribut,
suivi d'un point virgule.

93
00:04:48,218 --> 00:04:50,107
Pour notre exemple de classe Rectangle,

94
00:04:50,107 --> 00:04:54,104
ceci donnerait simplement,
double hauteur, double largeur,

95
00:04:54,104 --> 00:04:55,478
c'est aussi simple que ça.

96
00:04:55,478 --> 00:04:58,247
De même pour l'utilisation 
des attributs d'une instance.

97
00:04:58,247 --> 00:05:00,826
Pour cela, on aura le nom des instances,

98
00:05:00,826 --> 00:05:03,685
suivi d'un point, 
suivi du nom de l'attribut

99
00:05:03,685 --> 00:05:05,081
que l'on veut désigner.

100
00:05:05,081 --> 00:05:08,711
Par exemple, pour désigner
la hauteur du rectangle rect1,

101
00:05:08,711 --> 00:05:11,815
on écrirait <i>rect1.hauteur</i>.

102
00:05:11,815 --> 00:05:14,123
Illustrons tout ceci 
sur un exemple concret,

103
00:05:14,123 --> 00:05:16,928
donné ici dans un seul et même fichier,

104
00:05:16,928 --> 00:05:19,938
qui contiendrait donc 
une première classe Exemple

105
00:05:19,938 --> 00:05:22,395
pour avoir la méthode <i>main</i>.

106
00:05:22,395 --> 00:05:25,991
Et qui utilise une classe Rectangle,

107
00:05:25,991 --> 00:05:29,780
dans laquelle on déclare 
une hauteur de type double,

108
00:05:29,780 --> 00:05:33,114
et une largeur de type double.

109
00:05:33,114 --> 00:05:38,158
La classe exemple ici va créer
une instance de la classe Rectangle.

110
00:05:38,158 --> 00:05:42,374
Pour ceci, il faut utiliser 
la syntaxe suivante.

111
00:05:42,374 --> 00:05:45,203
La déclaration initialisation 
d'une instance se fait

112
00:05:45,203 --> 00:05:47,978
en utilisant le nom de classe,
suivi du nom d'instance,

113
00:05:47,978 --> 00:05:51,061
et puis = new 
avec le nom de classe,

114
00:05:51,061 --> 00:05:54,828
suivi de parenthèses, comme ceci.

115
00:05:54,828 --> 00:05:57,394
Par exemple, 
on l'a vu dans l'exemple précédent,

116
00:05:57,394 --> 00:05:59,804
pour créer une instance rect
de la classe Rectangle,

117
00:05:59,804 --> 00:06:02,731
on écrirait = new Rectangle.

118
00:06:02,731 --> 00:06:04,620
Ce qui va donc créer et initialiser

119
00:06:04,620 --> 00:06:07,154
tous les attributs 
avec les valeurs suivantes.

120
00:06:07,154 --> 00:06:09,752
Si on a des attributs de type int,
ça sera la valeur zéro int.

121
00:06:09,752 --> 00:06:12,775
Si on a des attributs de type double,
ça sera la valeur 0.0.

122
00:06:12,775 --> 00:06:14,866
Pour les boolean, ça sera false,

123
00:06:14,866 --> 00:06:18,190
et pour les objets, ça sera
la valeur spéciale <i>null</i>,

124
00:06:18,190 --> 00:06:20,796
sur laquelle nous reviendrons
par la suite.

125
00:06:20,796 --> 00:06:24,244
Dans notre exemple précédent,
ici à ce stade,

126
00:06:24,244 --> 00:06:29,330
rect1 a une largeur et une hauteur nulle,
avant qu'on les modifie.

127
00:06:29,330 --> 00:06:32,677
Passons maintenant 
à la déclaration des méthodes.

128
00:06:32,677 --> 00:06:34,271
Les méthodes 
sont simplement des fonctions,

129
00:06:34,271 --> 00:06:36,852
que l'on va mettre 
au sein de la classe.

130
00:06:36,852 --> 00:06:38,741
Dans le cas de notre classe rectangle,

131
00:06:38,741 --> 00:06:42,484
on va s'intéresser ici à lui ajouter
la méthode surface.

132
00:06:42,484 --> 00:06:45,518
Donc une méthode, ça se déclare
simplement comme d'habitude,

133
00:06:45,518 --> 00:06:48,626
avec le type de retour,
le nom de la méthode,

134
00:06:48,626 --> 00:06:53,240
puis ensuite entre parenthèses rondes,
la liste des éventuels paramètres.

135
00:06:53,240 --> 00:06:55,722
Tout ceci qui est l'entête de la méthode,

136
00:06:55,722 --> 00:06:58,507
étant suivi par la définition 
de la méthode,

137
00:06:58,507 --> 00:07:01,470
le corps de cette méthode,
entre accolades.

138
00:07:01,470 --> 00:07:04,403
La seule différence est que les méthodes
sont mises dans la classe elle-même.

139
00:07:06,905 --> 00:07:08,953
Dans le cas de notre exemple
de la classe Rectangle,

140
00:07:08,953 --> 00:07:12,541
la méthode surface s'ajouterait donc
dans la classe Rectangle,

141
00:07:12,541 --> 00:07:15,232
ici avec donc sa valeur de retour double,

142
00:07:15,232 --> 00:07:17,648
une surface return, un double,
son nom.

143
00:07:17,648 --> 00:07:20,356
Ici elle n'a pas besoin
de prendre de paramètres,

144
00:07:20,356 --> 00:07:23,699
et elle retournerait donc
la hauteur fois la largeur.

145
00:07:23,699 --> 00:07:24,866
La question qu'on pourrait 
se poser c'est,

146
00:07:24,866 --> 00:07:27,696
mais où sont donc passés
les paramètres ?

147
00:07:27,696 --> 00:07:30,118
En effet, si l'on avait à écrire 
une méthode,

148
00:07:30,118 --> 00:07:33,051
comme nous le faisions auparavant, 
en dehors de toute classe,

149
00:07:33,051 --> 00:07:37,441
alors on aurait eu besoin de passer
la hauteur et passer la largeur,

150
00:07:37,441 --> 00:07:39,261
comme argument à la fonction,

151
00:07:39,261 --> 00:07:42,947
de sorte que hauteur et largeur
soient connues pour effectuer ce calcul.

152
00:07:42,947 --> 00:07:46,969
Comment se fait-il qu'ici 
dans la méthode de la classe Rectangle

153
00:07:46,969 --> 00:07:48,680
on ait rien eu besoin de passer ?

154
00:07:48,680 --> 00:07:51,503
Parce que tout simplement, 
cette hauteur et cette largeur

155
00:07:51,503 --> 00:07:53,318
sont des attributs de la classe.

156
00:07:53,318 --> 00:07:56,636
La méthode surface faisant partie
de la classe rectangle,

157
00:07:56,636 --> 00:08:00,222
elle a accès aux attributs 
hauteur et largeur,

158
00:08:00,222 --> 00:08:01,699
de la classe rectangle.

159
00:08:01,699 --> 00:08:05,435
C'est ce qu'on appelle techniquement 
une portée de classe.

160
00:08:05,435 --> 00:08:07,740
C'est-à-dire que tous 
les attributs d'une classe

161
00:08:07,740 --> 00:08:10,712
sont connus de l'entièreté 
de cette classe,

162
00:08:10,712 --> 00:08:13,843
en particulier de chacune 
de ces méthodes.

163
00:08:13,843 --> 00:08:16,671
Par exemple, toutes les méthodes
de la classe rectangle

164
00:08:16,671 --> 00:08:19,581
ont accès à la hauteur 
et à la largeur.

165
00:08:19,581 --> 00:08:21,174
Il n'est pas nécessaire de passer

166
00:08:21,174 --> 00:08:23,827
les attributs comme 
arguments aux méthodes.

167
00:08:23,827 --> 00:08:29,341
Pour résumer, une méthode, 
c'est une fonction propre à une classe,

168
00:08:29,341 --> 00:08:31,049
on va la mettre dans les classes,

169
00:08:31,049 --> 00:08:32,958
mais qui en plus de ce fait,

170
00:08:32,958 --> 00:08:36,338
a accès aux différents
attributs de la classe.

171
00:08:36,338 --> 00:08:39,270
Il est donc très important, 
et c'est une erreur de débutant,

172
00:08:39,270 --> 00:08:41,859
des premières écritures de méthodes.

173
00:08:41,859 --> 00:08:44,966
Il est très important 
de ne pas passer les attributs

174
00:08:44,966 --> 00:08:47,343
à une méthode de classe.

175
00:08:47,343 --> 00:08:49,336
Pour revenir encore une fois
sur l'exemple,

176
00:08:49,336 --> 00:08:51,285
l'exemple est tout à fait correct ici,

177
00:08:51,285 --> 00:08:56,334
on a bien une méthode surface
qui ne prend pas du tout de paramètres,

178
00:08:56,334 --> 00:09:00,153
et qui peut accéder à la hauteur
et à la largeur de Rectangle,

179
00:09:00,153 --> 00:09:03,990
qui ont été déclarées 
comme précédemment dans la classe.

180
00:09:03,990 --> 00:09:06,587
Ceci dit, ce n'est pas parce que
l'on n'a pas besoin

181
00:09:06,587 --> 00:09:10,338
de passer les attributs d'une classe
comme argument à ces méthodes,

182
00:09:10,338 --> 00:09:12,703
que les méthodes 
n'ont jamais de paramètres.

183
00:09:12,703 --> 00:09:15,574
Bien sûr, si une méthode a besoin 
de recevoir des paramètres

184
00:09:15,574 --> 00:09:18,380
de l'extérieur de la classe,
pour pouvoir fonctionner,

185
00:09:18,380 --> 00:09:22,086
alors il faudra déclarer les paramètres 
à la méthode.

186
00:09:22,086 --> 00:09:27,153
Par exemple ici, supposons 
qu'on ait une classe de figure colorée,

187
00:09:27,153 --> 00:09:30,083
et dans cette classe, 
on aurait différents attributs,

188
00:09:30,083 --> 00:09:34,566
et en particulier aussi, une méthode,
qui permet de colorier la figure.

189
00:09:34,566 --> 00:09:38,965
Laquelle méthode pourrait recevoir
typiquement une couleur,

190
00:09:38,965 --> 00:09:42,786
elle modifierait les instances
de la classe figure colorée,

191
00:09:42,786 --> 00:09:44,798
pour les colorier dans cette couleur.

192
00:09:44,798 --> 00:09:48,128
Couleur étant lui-même un autre type
qu'on aurait défini par ailleurs.

193
00:09:48,128 --> 00:09:50,494
On pourrait par exemple
déclarer une instance,

194
00:09:50,494 --> 00:09:55,894
une figure de la classe FigureColoree,
et une instance rouge de la classe Couleur,

195
00:09:55,894 --> 00:10:00,730
et plus tard, en anticipant sur
une syntaxe qui va vous être présentée,

196
00:10:00,730 --> 00:10:04,254
colorier la figure avec la couleur rouge.

197
00:10:04,254 --> 00:10:06,160
Ce qui m'intéresse ici, 
c'est de vous montrer

198
00:10:06,160 --> 00:10:10,054
que la couleur rouge vient de l'extérieur
de la classe FigureColoree,

199
00:10:10,054 --> 00:10:13,407
elle ne fait pas partie 
de la classe FigureColoree.

200
00:10:13,407 --> 00:10:16,593
C'est pour ceci que l'on a besoin
de la passer,

201
00:10:16,593 --> 00:10:18,617
ce n'est pas un attribut 
de FigureColoree,

202
00:10:18,617 --> 00:10:23,211
on a besoin de la passer comme paramètre
à la méthode colorée.

203
00:10:23,211 --> 00:10:25,877
Vous savez donc maintenant 
déclarer et définir

204
00:10:25,877 --> 00:10:27,112
les méthodes d'une classe.

205
00:10:27,112 --> 00:10:28,791
Mais comment les utiliser ?

206
00:10:28,791 --> 00:10:30,412
C'est-à-dire comment y faire appel ?

207
00:10:30,412 --> 00:10:31,594
Nous allons pour cela utiliser

208
00:10:31,594 --> 00:10:33,475
une syntaxe similaire 
à celle des attributs,

209
00:10:33,475 --> 00:10:37,080
et similaire à ce que vous avez déjà fait 
dans d'autres cadres,

210
00:10:37,080 --> 00:10:41,852
par exemple, lorsque vous appeliez 
la méthode <i>size</i> d'un tableau (dynamique).

211
00:10:41,852 --> 00:10:46,319
Vous écriviez <i>tableau.size()</i>, 
c'est bien un appel de la méthode <i>size</i>,

212
00:10:46,319 --> 00:10:49,172
ici d'un tableau dynamique.

213
00:10:49,172 --> 00:10:53,248
Le schéma général c'est 
<i>nomInstance.nomMethode</i>,

214
00:10:53,248 --> 00:10:55,179
puis ensuite entre parenthèses rondes,

215
00:10:55,179 --> 00:10:58,496
la liste des arguments que vous souhaitez
passer à cet appel.

216
00:10:58,496 --> 00:11:01,128
Par exemple, si on veut appeler 
la méthode surface,

217
00:11:01,128 --> 00:11:04,113
pour une instance <i>rect1</i>
de la classe <i>Rectangle</i>,

218
00:11:04,113 --> 00:11:07,572
ce que l'on va écrire, c'est <i>rect1.surface</i>,

219
00:11:07,572 --> 00:11:11,448
puis ici comme la méthode <i>surface</i>
n'a pas besoin de recevoir des arguments,

220
00:11:11,448 --> 00:11:15,489
on met simplement les deux parenthèses,
sans rien au milieu.

221
00:11:15,489 --> 00:11:18,015
Si l'on revient à notre exemple complet,

222
00:11:18,015 --> 00:11:22,292
nous avons comme précédemment 
la classe <i>Exemple</i>,

223
00:11:22,292 --> 00:11:25,191
qui va utiliser dans une méthode <i>main</i>,

224
00:11:25,191 --> 00:11:28,498
une instance <i>rect1</i>
de la classe <i>rectangle</i>.

225
00:11:28,498 --> 00:11:32,911
Dans la classe <i>Rectangle</i>, on aura ajouté 
une méthode <i>surface</i>.

226
00:11:32,911 --> 00:11:35,745
Puis pour appeler cette méthode <i>surface</i>

227
00:11:35,745 --> 00:11:39,290
sur l'instance <i>rect1</i>
de cette classe <i>Rectangle</i>,

228
00:11:39,290 --> 00:11:42,369
on écrira simplement <i>rect1.surface</i>,

229
00:11:42,369 --> 00:11:45,916
lequel <i>rect1.surface</i> retourne un double,

230
00:11:45,916 --> 00:11:49,938
que l'on peut ici afficher 
avec le message par exemple <i>surface :</i>

231
00:11:49,938 --> 00:11:52,584
Dans ce cas, ça écrira surface :

232
00:11:52,584 --> 00:11:56,015
et 12, qui est le résultat
de trois fois quatre.

233
00:11:56,015 --> 00:12:00,347
Il faut comprendre que chaque instance
a ses propres attributs.

234
00:12:00,347 --> 00:12:02,082
Si par exemple, je déclare

235
00:12:02,082 --> 00:12:07,280
trois instances <i>rect1</i>, <i>rect2</i>, <i>rect3</i>
de la classe <i>Rectangle</i>,

236
00:12:12,300 --> 00:12:16,323
et que j'ai donné la valeur trois
à la hauteur de <i>rect1</i>,

237
00:12:16,323 --> 00:12:18,987
la valeur quatre à la largeur de <i>rect1</i>,

238
00:12:18,987 --> 00:12:25,489
on aura des valeurs différentes,
11.5 par exemple et 3.8 pour <i>rect2</i>.

239
00:12:25,489 --> 00:12:27,872
On aura dans un autre 
endroit de la mémoire,

240
00:12:27,872 --> 00:12:31,808
les valeurs par exemple 34.3
pour la largeur de <i>rect3</i>,

241
00:12:31,808 --> 00:12:34,376
et puis une valeur pour sa hauteur.

242
00:12:34,376 --> 00:12:38,617
On a donc trois variables différentes
qui existent en mémoire,

243
00:12:38,617 --> 00:12:41,291
et quand on appelle <i>rect1.surface</i>,

244
00:12:41,291 --> 00:12:44,322
c'est la méthode surface globale
de la classe rectangle,

245
00:12:44,322 --> 00:12:47,407
qui va s'appliquer uniquement
à l'instance <i>rect1</i>,

246
00:12:47,407 --> 00:12:49,625
ce qui fait que dans 
cette méthode <i>surface</i>,

247
00:12:49,625 --> 00:12:51,634
dans cet appel à la méthode <i>surface</i>,

248
00:12:51,634 --> 00:12:57,345
largeur désignera <i>rect1.largeur</i>,
et hauteur désignera <i>rect1.hauteur</i>.

249
00:12:57,345 --> 00:13:00,722
Si j'appelle à un autre endroit 
<i>rect2.surface</i>,

250
00:13:00,722 --> 00:13:03,613
alors dans cet appel <i>rect2.surface</i>,

251
00:13:03,613 --> 00:13:07,483
ce sera la hauteur qui vaudra
<i>rect2.hauteur</i>,

252
00:13:07,483 --> 00:13:11,935
et puis largeur vaudra <i>rect2.largeur</i>.

253
00:13:11,935 --> 00:13:14,147
Notez qu'en toute rigueur, les schémas 
pour les instances ici

254
00:13:14,147 --> 00:13:15,640
ne sont pas exactement correctes,

255
00:13:15,640 --> 00:13:22,321
puisque les variables sont des références 
vers les objets en mémoire,

256
00:13:22,321 --> 00:13:27,981
mais le but était ici d'insister
sur le fait que chaque appel de méthode

257
00:13:27,981 --> 00:13:30,763
avait accès à chacun des attributs.

258
00:13:30,763 --> 00:13:33,250
Pour les détails 
de représentation en mémoire,

259
00:13:33,250 --> 00:13:35,475
nous y reviendrons 
plus tard dans ce cours.

260
00:13:35,475 --> 00:13:38,048
Voilà ce qui conclut 
cette séquence vidéo.

261
00:13:38,048 --> 00:13:41,358
On a vu comment concrètement 
déclarer des objets en Java,

262
00:13:41,358 --> 00:13:44,033
on a vu comment 
déclarer des attributs

263
00:13:44,033 --> 00:13:46,222
et comment déclarer des méthodes.

264
00:13:46,222 --> 00:13:49,674
C'est-à-dire qu'essentiellement
sur cette figure, on a vu cet axe là.

265
00:13:49,674 --> 00:13:51,566
Reste maintenant à voir
comment on va faire

266
00:13:51,566 --> 00:13:55,233
les différences entre l'interface 
et les détails d'implémentation,

267
00:13:55,233 --> 00:13:57,778
c'est-à-dire cet autre axe 
sur cette figure,

268
00:13:57,778 --> 00:14:00,642
ce qui est l'objet 
de la séquence vidéo suivante.
