1
00:00:04,372 --> 00:00:06,230
Dans la séquence vidéo précédente
nous avons vu comment

2
00:00:06,230 --> 00:00:09,861
concrètement déclarer en java
des classes, des objets,

3
00:00:09,861 --> 00:00:13,274
comment leur définir des attributs
et des méthodes, c'est à dire,

4
00:00:13,274 --> 00:00:16,568
sur la figure de résumé
de la programmation

5
00:00:16,568 --> 00:00:20,427
orientée objet suivante, essentiellement
cet axe là que nous avons développé

6
00:00:20,427 --> 00:00:23,959
dans la vidéo précédente.
Mais comment maintenant en java

7
00:00:23,959 --> 00:00:27,902
concrètement donner corps à la
notion d'interface, c'est-à-dire la partie

8
00:00:27,902 --> 00:00:32,795
visible des classes et la partie
implémentation, c'est-à-dire cachée

9
00:00:32,795 --> 00:00:37,187
c'est-à-dire concrètement comment
implémenter en java cet axe là

10
00:00:37,187 --> 00:00:40,700
de la figure ; c'est l'objet de la
présente séquence vidéo.

11
00:00:40,700 --> 00:00:43,679
Concrètement si on veut reprendre
l'exemple de la classe rectangle

12
00:00:43,679 --> 00:00:47,763
nous avions décidé d'avoir 
une méthode surface qui faisait partie

13
00:00:47,763 --> 00:00:51,536
de l'interface qu'on pouvait utiliser
de partout dans le programme et puis

14
00:00:51,536 --> 00:00:56,742
d'avoir deux attributs privés 
qui étaient la largeur et la hauteur.

15
00:00:56,742 --> 00:01:01,974
En java ceci va s'écrire :
pour déclarer la partie privée

16
00:01:01,974 --> 00:01:07,357
on va rajouter le mot clé private
devant chacun des attributs et des méthodes

17
00:01:07,357 --> 00:01:13,795
que l'on veut cacher, rendre 
inaccessibles depuis l'extérieur de la classe

18
00:01:13,795 --> 00:01:16,663
que l'on ne veut pas mettre 
dans l'interface.

19
00:01:16,663 --> 00:01:19,899
inaccessibles depuis l'extérieur 
de la classe concrètement veut dire

20
00:01:19,899 --> 00:01:22,656
la chose suivante : si par exemple
dans la méthode main ou

21
00:01:22,656 --> 00:01:27,657
dans une autre classe on écrivait ceci,
donc on déclare une instance de la

22
00:01:27,657 --> 00:01:33,740
classe Rectangle, et qu'on souhaite
accéder à la hauteur en écrivant

23
00:01:33,740 --> 00:01:37,508
comme ça, en accès direct par exemple,
le compilateur donnera une erreur

24
00:01:37,508 --> 00:01:44,895
qui dit que le champ hauteur est
d'accès privé dans la classe Rectangle.

25
00:01:44,895 --> 00:01:49,428
A noter que si aucun droit n'est 
précisé, comme par exemple ici, surface,

26
00:01:49,428 --> 00:01:52,158
alors on a ce qu'on appelle 
les accès par défaut

27
00:01:52,158 --> 00:01:54,323
que je vous expliquerai
dans quelques instants.

28
00:01:55,003 --> 00:01:58,359
Nous avons donc vu que pour déclarer
la partie implémentation, c'est-à-dire

29
00:01:58,359 --> 00:02:03,169
privée, on utilisait le mot clé private,
à l'inverse pour la partie interface,

30
00:02:03,169 --> 00:02:06,760
c'est-à-dire la partie publique que
l'on souhaite offrir à l'extérieur,

31
00:02:06,760 --> 00:02:12,493
offrir à toutes les autres classes,
on utilise le mot clé public,

32
00:02:12,493 --> 00:02:15,685
donc par exemple la méthode surface
étant dans l'interface de Rectangle,

33
00:02:15,685 --> 00:02:19,964
on va déclarer ici public devant 
l'en tête et la définition de la

34
00:02:19,964 --> 00:02:25,452
méthode surface. Si je reprends 
l'exemple précédent d'une méthode Main

35
00:02:25,452 --> 00:02:31,311
qui déclarerait une instance rect
de la classe Rectangle, celle-ci aurait

36
00:02:31,311 --> 00:02:36,641
donc ici le droit d'appeler la méthode
surface de la classe Rectangle

37
00:02:36,641 --> 00:02:41,174
par exemple pour la stocker dans une
autre variable et ceci est possible

38
00:02:41,174 --> 00:02:46,407
parce que la méthode surface est
déclarée ici dans l'interface comme

39
00:02:46,407 --> 00:02:53,066
public ; si jamais on avait déclaré 
ceci comme private, alors comme

40
00:02:53,066 --> 00:02:58,154
précédemment on n'aurait pas le droit
d'accéder à la méthode surface

41
00:02:58,154 --> 00:03:00,855
de l'instance rect 
de la classe Rectangle.

42
00:03:00,855 --> 00:03:04,374
J'en profite aussi pour vous rappeler
les principes de la bonne programmation

43
00:03:04,374 --> 00:03:07,849
les principe fondamentaux de la 
programmation orientée objet

44
00:03:07,849 --> 00:03:12,155
qui sont de mettre en privé tous les
attributs, bien qu'il y ait quelques

45
00:03:12,155 --> 00:03:15,239
exceptions à ce principe dans 
des contextes plus avancés que

46
00:03:15,239 --> 00:03:18,651
nous ne discuterons pas ici, il est 
absolument fondamental de n'avoir

47
00:03:18,651 --> 00:03:23,448
aucun attribut dans la partie public
et de mettre en privé toutes les

48
00:03:23,448 --> 00:03:26,980
méthodes qui sont à usage interne,
les méthodes qu'on utilise pour

49
00:03:26,980 --> 00:03:31,659
modulariser son propre code et que 
l'on mettra dans la partie

50
00:03:31,659 --> 00:03:36,444
public que quelques méthodes bien
choisies, ce qu'on appelle l'interface

51
00:03:36,444 --> 00:03:40,545
et qui fait l'objet de toute la 
conception de bien choisir ses méthodes.

52
00:03:41,245 --> 00:03:44,706
Un petit complément technique
concernant les droits d'accès.

53
00:03:44,706 --> 00:03:47,705
Les programmes java sont habituellement
organisés autour de la notion de

54
00:03:47,705 --> 00:03:50,853
paquetage, qui n'est pas présentée 
dans ces vidéos d'introduction mais

55
00:03:50,853 --> 00:03:53,839
qui est simplement présentée dans
les compléments du cours, même si

56
00:03:53,839 --> 00:03:56,022
vous ne faites rien vous êtes en fait
dans un paquetage, vous êtes dans le

57
00:03:56,022 --> 00:03:59,254
paquetage par défaut. Si vous ne 
déclarez pas comme private un attribut

58
00:03:59,254 --> 00:04:02,729
ou une méthode, il faut savoir qu'il
reste accessible pour n'importe quelle

59
00:04:02,729 --> 00:04:07,488
classe qui est présente dans le paquetage,
c'est comme s'il était public pour

60
00:04:07,488 --> 00:04:10,857
tout le paquetage et qu'il était 
Private par contre à l'extérieur du

61
00:04:10,857 --> 00:04:14,404
paquetage, c'est ce qu'on appelle un
droit d'accès friendly. Si par exemple

62
00:04:14,404 --> 00:04:19,166
dans un packetage, disons par exemple
le packetage par défaut, vous avez

63
00:04:19,166 --> 00:04:24,918
une classe Rectangle qui contient par
exemple un attribut hauteur mais

64
00:04:24,918 --> 00:04:31,196
pour lequel on a spécifié aucun droit
d'accès ni public ni private, et puis

65
00:04:31,196 --> 00:04:37,563
dans le même paquetage vous avez aussi
une classe Dessin qui utilise la

66
00:04:37,563 --> 00:04:41,790
classe Rectangle, alors cette classe 
Dessin, comme elle est dans

67
00:04:41,790 --> 00:04:49,112
le même paquetage, elle aura accès 
aux attributs et aux méthodes qui sont

68
00:04:49,112 --> 00:04:54,537
comme ça déclarés sans droits d'accès,
sans private, sans public, du même

69
00:04:54,537 --> 00:04:58,638
paquetage donc par exemple elle pourra
tout à fait, la classe Dessin, faire

70
00:04:58,638 --> 00:05:06,458
un accès direct à la hauteur du 
Rectangle rect, ce que personnellement

71
00:05:06,458 --> 00:05:09,255
je ne trouve pas terrible et c'est 
pour ça que nous vous

72
00:05:09,255 --> 00:05:13,988
recommandons d'explicitement mettre 
public devant les attributs et les

73
00:05:13,988 --> 00:05:17,332
méthodes que vous voulez voir dans 
l'interface et à ce moment là c'est

74
00:05:17,332 --> 00:05:19,977
public à la fois pour le paquetage
et pour tout ce qui est dans

75
00:05:19,977 --> 00:05:23,573
d'autres paquetages et private pour 
tout ce que vous réservez pour la partie

76
00:05:23,573 --> 00:05:27,741
strictement implémentation,
strictement privée.

77
00:05:28,051 --> 00:05:31,110
Voilà je tenais simplement à le citer
parce que ça fait partie de la technique

78
00:05:31,110 --> 00:05:34,317
générale de java, mais c'est à mon 
avis un concept un petit peu

79
00:05:34,317 --> 00:05:38,184
avancé pour un cours d'introduction.
Ceci dit, vous me direz, mais si tous

80
00:05:38,184 --> 00:05:41,769
les attributs sont en privé, comment
faire si on a besoin de les

81
00:05:41,769 --> 00:05:45,685
utiliser, par exemple si je voulais
changer la hauteur de mon

82
00:05:45,685 --> 00:05:49,007
rectangle, ceci en soi est discutable,
est-ce qu'on veut vraiment changer,

83
00:05:49,007 --> 00:05:52,499
la hauteur d'un rectangle mais soit,
supposons donc que l'on veuille

84
00:05:52,499 --> 00:05:56,973
accéder à la hauteur du rectangle 
ou ne serait-ce que par exemple

85
00:05:56,973 --> 00:05:59,935
la connaître, comment faire pour 
connaître la hauteur ou la largeur

86
00:05:59,935 --> 00:06:02,859
du rectangle s'ils sont en privé 
puisque je ne peux pas y accéder

87
00:06:02,859 --> 00:06:07,918
de l'extérieur de la classe.
Je ne peux pas par exemple faire

88
00:06:07,918 --> 00:06:15,154
quelque chose comme ceci : déclarer
un nouveau rectangle et puis vouloir

89
00:06:15,154 --> 00:06:20,559
afficher sa hauteur, je ne peux pas 
faire cela parce que l'attribut est

90
00:06:20,559 --> 00:06:26,484
en privé ; pour ça on va mettre les
méthodes biens choisies que l'on

91
00:06:26,484 --> 00:06:31,400
a décidé de mettre comme accessibles
dans l'interface donc par exemple

92
00:06:31,400 --> 00:06:34,735
une méthode qui va permettre de
modifier la hauteur, une méthode qui

93
00:06:34,735 --> 00:06:38,998
va permettre d'interroger sur la valeur
de la largeur, etc. , par exemple ici

94
00:06:38,998 --> 00:06:42,683
on voudrait une méthode qui permet
d'accéder à la valeur de la hauteur

95
00:06:42,683 --> 00:06:48,516
et on écrirait quelque chose comme 
ça, au travers d'une méthode getHauteur.

96
00:06:48,516 --> 00:06:51,260
J'insiste sur le fait que cette partie
de la conception est extrêmement

97
00:06:51,260 --> 00:06:53,690
importante, il ne faut pas 
systématiquement mettre

98
00:06:53,690 --> 00:06:57,134
des méthodes qui permettent de modifier
ni même de lire tous les attributs

99
00:06:57,134 --> 00:07:00,367
d'une classe mais il faut bien 
réfléchir à quels sont les attributs

100
00:07:00,367 --> 00:07:04,010
que l'on veut offrir au travers d'une 
méthode soit en modification soit donc

101
00:07:04,010 --> 00:07:07,337
en accès, en lecture depuis l'extérieur.

102
00:07:07,337 --> 00:07:11,170
De telles méthodes sont ce qu'on appelle
des accesseurs, pour accéder aux attributs

103
00:07:11,170 --> 00:07:14,828
et des manipulateurs pour les modifier.
Les accesseurs aussi appelés méthode get

104
00:07:14,828 --> 00:07:19,632
ou getters, permettent de retourner la 
valeur d'un attribut. Donc par exemple

105
00:07:19,632 --> 00:07:23,399
si on veut retourner la valeur de
l'attribut hauteur, hauteur étant de type

106
00:07:23,399 --> 00:07:28,269
double on va retourner ici une valeur du
même type, on va retourner la hauteur

107
00:07:28,269 --> 00:07:32,633
donc un double, get hauteur et
on écrira simplement return hauteur,

108
00:07:32,633 --> 00:07:35,465
je vous rappelle que toutes les méthodes
ont accès à tous les attributs, donc ici

109
00:07:35,465 --> 00:07:39,750
c'est bien la hauteur de l'instance courante.
De la même façon on peut ici déclarer

110
00:07:39,750 --> 00:07:44,995
un accesseur pour l'attribut largeur.
on a aussi donc des manipulateurs

111
00:07:44,995 --> 00:07:50,112
appelés aussi méthode set ou setters
qui permettent de modifier cette fois-ci,

112
00:07:50,112 --> 00:07:55,735
ce sont donc des actions, de modifier
les attributs en leur affectant une valeur.

113
00:07:55,735 --> 00:07:58,730
donc pour ça, pour leur affecter une valeur
il faut bien qu'on reçoive une valeur

114
00:07:58,730 --> 00:08:02,663
de l'extérieur, c'est cette valeur qu'on va
mettre dans l'attribut largeur de l'instance,

115
00:08:02,663 --> 00:08:07,001
et donc on va recevoir ici un paramètre
qui est la valeur à mettre,

116
00:08:07,001 --> 00:08:11,102
et on retournera cette fois-ci rien mais
c'est pas le but de retourner une valeur

117
00:08:11,102 --> 00:08:15,069
mais de mettre une valeur et la valeur
que l'on a reçu, donc par exemple ici

118
00:08:15,069 --> 00:08:19,152
le paramètre h, on va la recopier
donc dans cette hauteur,

119
00:08:19,152 --> 00:08:23,476
on la recopiera dans hauteur et
le paramètre l ici dans cette largeur

120
00:08:23,476 --> 00:08:26,675
on le recopiera dans l'attribut largeur.

121
00:08:27,145 --> 00:08:28,981
Illustrons tout ceci sur un exemple.

122
00:08:28,981 --> 00:08:32,572
Nous avons comme d'habitude notre classe
Exemple, qui déclare ici la méthode main

123
00:08:32,572 --> 00:08:37,443
dans laquelle on utilise une instance 
rect1 de la classe rectangle,

124
00:08:37,443 --> 00:08:42,334
la classe rectangle du coté de laquelle
nous avons donc dans l'interface toujours

125
00:08:42,334 --> 00:08:46,766
notre méthode surface, mais dans laquelle
nous avons donc ajouté deux accesseurs,

126
00:08:46,766 --> 00:08:51,888
ici un accesseur get hauteur qui ne reçoit
aucun paramètre puisqu'on n'a pas besoin

127
00:08:51,888 --> 00:08:56,312
de passer des valeurs ici mais qui par 
contre retourne une valeur de type double

128
00:08:56,312 --> 00:09:02,722
double étant le même type ici que la
hauteur dont il va renvoyer la valeur

129
00:09:02,722 --> 00:09:07,496
hauteur et largeur sont toujours
dans la partie implémentation,

130
00:09:07,496 --> 00:09:11,897
dans la partie privée, puis on a aussi
donc de façon similaire un accesseur

131
00:09:11,897 --> 00:09:18,199
sur la largeur, et dans la partie publique
nous avons ici aussi donc un manipulateur

132
00:09:18,199 --> 00:09:23,802
setHauteur qui doit recevoir une valeur
de l'extérieur qui est la valeur qu'on

133
00:09:23,802 --> 00:09:29,046
veut donner à la hauteur, cette valeur,
reçue ici sous la forme du paramètre h,

134
00:09:29,046 --> 00:09:36,860
va la mettre dans l'attribut hauteur.
Pour leur utilisation dans la classe exemple,

135
00:09:36,860 --> 00:09:42,332
dans le main de la classe exemple, on va
ici par exemple appeler getHauteur

136
00:09:42,332 --> 00:09:47,233
qui va renvoyer la hauteur sur l'instance
rect1 que l'on aura déclaré.

137
00:09:47,233 --> 00:09:53,302
On va aussi au préalable par exemple
affecter la valeur 3 à la hauteur de rect1

138
00:09:53,302 --> 00:09:58,173
en écrivant rect1.setHauteur et puis
en passant la valeur 3

139
00:09:58,173 --> 00:10:03,790
qui va donc passer ici puis être copiée
dans l'attribut hauteur de rect1

140
00:10:03,790 --> 00:10:11,326
de même cette largeur sur rect1 va
affecter 4 à la largeur de rect1.

141
00:10:11,326 --> 00:10:13,722
Une autre remarque qui revient souvent
de la part des étudiants

142
00:10:13,722 --> 00:10:17,205
c'est pourquoi diable faire tout ceci,
c'est bien compliqué, c'est fastidieux

143
00:10:17,205 --> 00:10:21,649
d'écrire tout cela, pourquoi pas simplement
laisser en public, la largeur, la hauteur,

144
00:10:21,649 --> 00:10:25,368
et tous les attributs, comme cela
on pourrait les manipuler comme on veut.

145
00:10:25,368 --> 00:10:28,509
C'est justement là le problème, on
pourrait les manipuler comme on veut

146
00:10:28,509 --> 00:10:32,910
et par exemple dans ce cas, donc si
on déclare une instance rect1

147
00:10:32,910 --> 00:10:37,162
de la classe rectangle, on pourrait
tout à fait affecter la valeur -36

148
00:10:37,162 --> 00:10:39,692
à la hauteur du rectangle.

149
00:10:39,692 --> 00:10:43,903
Alors que si au lieu de passer comme ça
directement avec un accès à l'attribut,

150
00:10:43,903 --> 00:10:51,173
on passait par une méthode, par exemple 
setHauteur, alors on pourrait

151
00:10:51,173 --> 00:10:55,818
dans la méthode setHauteur avoir
un mécanisme de vérification,

152
00:10:55,818 --> 00:11:04,000
par exemple si h est négatif ou nul même,
par ex. avoir une gestion de l'erreur ici,

153
00:11:04,000 --> 00:11:12,353
à détailler, et puis sinon effectivement 
à ce moment là affecter la hauteur

154
00:11:12,353 --> 00:11:14,992
qui a été vérifiée et qui est valide.

155
00:11:14,992 --> 00:11:19,689
Ce passage par une méthode permet 
donc un mécanisme de vérification

156
00:11:19,689 --> 00:11:23,134
et de garantie de l'intégrité des données.

157
00:11:23,134 --> 00:11:29,013
Supposons aussi que l'on dépende aussi
d'un attribut qui est un objet plus complexe,

158
00:11:29,013 --> 00:11:33,550
ici simplement une String, par exemple 
un label qui ait une représentation

159
00:11:33,550 --> 00:11:39,040
interne d'une certaine information et qu'on 
utilise, donc on peut y accéder en externe,

160
00:11:39,040 --> 00:11:45,313
donc on écrirait retc.label.length
en utilisant donc les propriétés du fait

161
00:11:45,313 --> 00:11:50,487
que c'est une String et supposons qu'on 
écrive par exemple 300-400 lignes

162
00:11:50,487 --> 00:11:54,555
comme ça en utilisant directement 
le fait que ce soit une String

163
00:11:54,555 --> 00:11:58,267
et puis le concepteur de la classe 
rectangle décide de changer String

164
00:11:58,267 --> 00:12:02,911
par exemple une arrayList, résultat on 
doit jeter nos 300-400 lignes à la poubelle

165
00:12:02,911 --> 00:12:06,701
et puis tout réécrire, alors que
si on n'utilise que l'interface,

166
00:12:06,701 --> 00:12:08,522
laquelle interface ne doit pas changer

167
00:12:08,522 --> 00:12:11,222
et que l'on n'accède pas directement 
comme ça à des champs

168
00:12:11,222 --> 00:12:16,312
mais que l'on passe de l'interface, à ce 
moment là la responsabilité de tout changer

169
00:12:16,312 --> 00:12:20,417
par exemple String en arrayList 
incombera au développeur de la classe

170
00:12:20,417 --> 00:12:24,020
mais nos 400 lignes resteront 
par contre inchangées

171
00:12:24,020 --> 00:12:26,659
puisqu'elle respectent 
l'interface de la classe.

172
00:12:26,659 --> 00:12:29,309
C'est pour ces raisons fondamentales,

173
00:12:29,309 --> 00:12:32,847
pouvoir vérifier les valeurs que
l'on affecte aux différents champs

174
00:12:32,847 --> 00:12:36,864
et pouvoir modifier un programme
de façon indépendante,

175
00:12:36,864 --> 00:12:41,148
ce qu'on appelle la modularisation, qu'on
recommande de passer par des méthodes

176
00:12:41,148 --> 00:12:43,919
et que l'on recommande de ne 
mettre aucun attribut

177
00:12:43,919 --> 00:12:47,140
dans la partie interface,
dans la partie publique.

178
00:12:47,140 --> 00:12:49,526
Il est évident que sur des petits 
programmes que l'on fait en exercices

179
00:12:49,526 --> 00:12:54,527
ça ne prend pas beaucoup de sens, mais
dans le cadre de grands projets logiciel

180
00:12:54,527 --> 00:12:57,688
c'est justement dans ce cadre là que
la notion de programmation orientée objet

181
00:12:57,688 --> 00:13:01,291
a été développée cela prend tout 
son sens, et donc dans cet esprit

182
00:13:01,291 --> 00:13:03,823
de bonne programmation
et d'aller vers de gros programmes

183
00:13:03,823 --> 00:13:08,930
respectez donc ces consignes 
et essayez de séparer au maximum donc

184
00:13:08,930 --> 00:13:12,600
ce qui est l'interface de ce qui est 
les détails d'implémentation.

185
00:13:12,600 --> 00:13:16,953
Un autre petit complément technique
pour finir, la notion de masquage.

186
00:13:16,953 --> 00:13:20,745
Masquage à lieu quand un nom 
utilisé par un certain objet

187
00:13:20,745 --> 00:13:23,919
cache un nom pour désigner un autre
objet, et c'est quelque chose qui

188
00:13:23,919 --> 00:13:27,181
en programmation orientée objet 
est typique lorsqu'un paramètre,

189
00:13:27,181 --> 00:13:30,787
par exemple ici le paramètre que
l'on aurait appelé hauteur

190
00:13:30,787 --> 00:13:35,995
pour la méthode setHauteur, cache
le nom de l'attribut hauteur.

191
00:13:35,995 --> 00:13:40,328
Dans ce cadre là on voudrait désigner
par cette hauteur là l'attribut

192
00:13:40,328 --> 00:13:45,920
et puis par cette hauteur ci bien sur
la hauteur qu'on a reçu comme paramètre.

193
00:13:45,920 --> 00:13:50,576
Mais dans ce contexte là le compilateur 
ne saura pas faire la différence

194
00:13:50,576 --> 00:13:54,449
et donc effectivement ce genre 
d'écriture n'est pas terrible,

195
00:13:54,449 --> 00:13:57,221
donc que faire dans ce cas là ?
Et bien, soit tout simplement

196
00:13:57,221 --> 00:14:00,956
et c'est ce que je vous recommande,
utiliser des noms qui sont différents,

197
00:14:00,956 --> 00:14:04,389
donc comme on avait fait tout à l'heure,
on avait h pour le nom de paramètre,

198
00:14:04,389 --> 00:14:08,635
là il n'y a aucune ambiguïté, soit sinon 
on peut utiliser ce que l'on appelle

199
00:14:08,635 --> 00:14:13,396
une technique de demasquage
en utilisant donc la référence this

200
00:14:13,396 --> 00:14:15,988
qui est donc une référence
sur l'instance courante,

201
00:14:15,988 --> 00:14:18,881
donc vous pouvez si vous voulez
traduire donc this à peu près par moi,

202
00:14:18,881 --> 00:14:22,517
moi l'instance courante, donc dans
l'exemple précédent ça nous donnerait,

203
00:14:22,517 --> 00:14:27,555
cette hauteur où on a gardé ici le nom
hauteur pour le paramètre qu'on veut passer

204
00:14:27,555 --> 00:14:33,185
à la méthode setHauteur, et ici il faut
démasquer le nom hauteur qui désigne

205
00:14:33,185 --> 00:14:37,119
l'attribut en disant ma hauteur
si vous voulez, la hauteur à moi,

206
00:14:37,119 --> 00:14:41,357
donc this.hauteur 
pour désigner ma hauteur.

207
00:14:41,357 --> 00:14:45,900
Donc dans ces situation de masquage
this est absolument obligatoire,

208
00:14:45,900 --> 00:14:49,197
mais je vous recommande d'éviter ces
situations et comme je disais,

209
00:14:49,197 --> 00:14:53,268
donc de choisir des noms qui
évitent toute ambiguïté,

210
00:14:53,268 --> 00:14:56,725
qui soient clairs pour tout le monde
mais qui évitent tout ambiguïté.

211
00:14:56,725 --> 00:14:59,929
Résumons ce que nous avons vu
concernant les droits d'accès

212
00:14:59,929 --> 00:15:03,047
ainsi que les portées des attributs
et des méthodes d'une classe.

213
00:15:03,047 --> 00:15:07,084
Pour les droits d'accès nous avons vu
qu'il y a les mots clés private et public.

214
00:15:07,084 --> 00:15:12,253
Private permet de définir les parties détails
d'implémentation, les parties privées,

215
00:15:12,253 --> 00:15:15,492
les parties accessibles uniquement
depuis l'intérieur de la classe,

216
00:15:15,492 --> 00:15:19,892
alors que l'aspect public permet de 
définir ce que l'on appelle l'interface

217
00:15:19,892 --> 00:15:23,654
donc les parties auxquelles on peut
accéder depuis l'extérieur de la classe,

218
00:15:23,654 --> 00:15:25,369
depuis le main, depuis d'autres classes.

219
00:15:25,369 --> 00:15:30,019
La portée donc des attributs et des 
méthodes est limitée à toute la classe,

220
00:15:30,019 --> 00:15:33,769
donc par exemple ici x et y sont
des attributs qui sont accessibles

221
00:15:33,769 --> 00:15:37,981
n'importe où dans la classe, et en
particulier à n'importe quelle méthode

222
00:15:37,981 --> 00:15:45,039
de cette classe, donc par exemple ici
ce nom y réfère l'attribut de l'instance

223
00:15:45,039 --> 00:15:47,632
auquel on appliquerait une méthode ;

224
00:15:47,632 --> 00:15:52,500
on peut donc aussi avoir des phénomènes 
de masquage lorsque l'on désigne

225
00:15:52,500 --> 00:15:56,040
par un nom ici qui est le
même nom qu'un attribut,

226
00:15:56,040 --> 00:15:59,045
lorsqu'on désigne un paramètre
d'une méthode avec un tel nom,

227
00:15:59,045 --> 00:16:06,074
alors à ce moment là et bien localement
la résolution de portée va faire que x

228
00:16:06,074 --> 00:16:11,121
dans cette méthode ici référera
le paramètre en question.

229
00:16:11,121 --> 00:16:17,694
Alors que si l'on veut parler 
de l'attribut x, il faut utiliser

230
00:16:17,694 --> 00:16:24,896
donc la référence this pour démasquer
le nom x et donc this.x ici

231
00:16:24,896 --> 00:16:30,840
réfère à l'attribut x de l'instance dans
laquelle on appliquerait la méthode.

232
00:16:30,840 --> 00:16:34,115
Terminons cette séquence par
un aspect un peu plus technique

233
00:16:34,115 --> 00:16:36,075
de la représentation en mémoire 
des objets ;

234
00:16:36,075 --> 00:16:37,816
aspect technique mais auquel
il faut néanmoins

235
00:16:37,816 --> 00:16:40,644
prêter attention
lorsque l'on écrit du code.

236
00:16:40,644 --> 00:16:42,510
Je vous rappelle comme nous l'avions vu

237
00:16:42,510 --> 00:16:46,413
dans le premier cours d'introduction
à la programmation en java que les objets

238
00:16:46,413 --> 00:16:48,301
comme les Strings par exemple,
les tableaux,

239
00:16:48,301 --> 00:16:52,290
sont représentés en mémoire
au travers de références.

240
00:16:52,290 --> 00:16:57,558
Par exemple si je déclare une String v
initialisée avec "Welcome",

241
00:16:57,558 --> 00:16:59,979
alors en mémoire nous avons
le schéma suivant,

242
00:16:59,979 --> 00:17:04,408
v est en fait une référence
qui réfère un endroit mémoire

243
00:17:04,408 --> 00:17:07,408
où la valeur "Welcome" est stockée.

244
00:17:07,408 --> 00:17:12,249
De la même façon si je déclare
2 objets rectangle, rect1 et rect2,

245
00:17:16,629 --> 00:17:24,485
alors en mémoire j'ai également
des références vers des zones mémoire

246
00:17:24,485 --> 00:17:27,388
qui contiennent
effectivement donc la hauteur,

247
00:17:27,388 --> 00:17:31,475
admettons par exemple qu'à rect1on ait
ensuite affecté les valeurs 3 et 4

248
00:17:31,475 --> 00:17:36,337
à la hauteur et à sa largeur,
et puis rect2,

249
00:17:36,337 --> 00:17:43,047
donc par exemple on avait
une hauteur 11.3 et puis 2.7.

250
00:17:43,047 --> 00:17:45,728
Donc voilà le schéma que
l'on aurait en mémoire,

251
00:17:45,728 --> 00:17:47,880
ces objets sont en fait des références

252
00:17:47,880 --> 00:17:51,828
sur les endroits où sont vraiment 
stockés les valeurs, et ça c'est

253
00:17:51,828 --> 00:17:55,772
vraiment très important lorsqu'on
veut comparer des objets parce que :

254
00:17:55,772 --> 00:18:02,537
est-ce qu'on va comparer des références
ou comparer effectivement des valeurs,

255
00:18:02,537 --> 00:18:05,761
à ce stade là si on ne fait rien de 
particulier on va comparer les références.

256
00:18:05,761 --> 00:18:16,124
Lorsqu'on affecte un objet à un autre,
on va faire quelque chose comme ceci,

257
00:18:16,124 --> 00:18:27,696
si je fais rect2=rect1, et puis aussi
lorsque donc on affiche un objet

258
00:18:27,696 --> 00:18:30,491
c'est pas la valeur mais la référence
que l'on souhaitera affecter/afficher

259
00:18:30,491 --> 00:18:34,891
mais bien sûr il faudrait
(en général plutôt) afficher le contenu.

260
00:18:34,891 --> 00:18:38,293
Nous reviendrons en détail sur
ces aspect là plus tard dans le cours.

261
00:18:38,293 --> 00:18:41,532
Les objets étant des références ils 
peuvent aussi ne pas référencer d'objet,

262
00:18:41,532 --> 00:18:46,211
référencer aucun objet
et ceci est indiqué donc

263
00:18:46,211 --> 00:18:49,945
avec la valeur prédéfinie
le mot réservé null.

264
00:18:49,945 --> 00:18:52,695
Donc par exemple si je déclare
ici une instance rect

265
00:18:52,695 --> 00:18:55,749
de la classe Rectangle
et je dis qu'elle est null,

266
00:18:55,749 --> 00:18:59,760
c'est à dire qu'en fait
c'est une référence vers nulle part,

267
00:18:59,760 --> 00:19:03,565
ce qui pourrait donc
se représenter comme ceci,

268
00:19:03,565 --> 00:19:06,918
donc on pourra voir typiquement
ce genre de code

269
00:19:06,918 --> 00:19:11,129
si rect==null à ce moment là
faire quelque chose,

270
00:19:11,129 --> 00:19:16,311
donc par exemple l'affecter à
un nouveau rectangle,

271
00:19:16,311 --> 00:19:20,240
ou aussi ce genre de tournure,
si rect n'est pas null

272
00:19:20,240 --> 00:19:23,659
à ce moment là donc par exemple l'utiliser,

273
00:19:23,659 --> 00:19:27,786
par exemple appeler la méthode surface.
