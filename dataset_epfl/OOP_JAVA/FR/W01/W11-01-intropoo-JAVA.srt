1
00:00:04,447 --> 00:00:05,568
Nous abordons ici

2
00:00:05,568 --> 00:00:08,514
un volet très important de 
de la programmation.

3
00:00:08,514 --> 00:00:11,156
À savoir, la programmation 
orienté-objet (poo).

4
00:00:11,156 --> 00:00:13,375
C'est une façon particulière 
de programmer,

5
00:00:13,375 --> 00:00:15,262
qui n'est pas spécifique
au langage Java,

6
00:00:15,262 --> 00:00:17,138
qu'on va retrouver
dans d'autres langages,

7
00:00:17,158 --> 00:00:19,322
et qui va conférer, 
donner à vos programmes,

8
00:00:19,322 --> 00:00:21,260
plusieurs propriétés intéressantes,

9
00:00:21,260 --> 00:00:25,128
notamment, en terme 
de maintenabilité, de modularité.

10
00:00:25,128 --> 00:00:26,915
À ce stade, vous êtes
censés connaître

11
00:00:26,915 --> 00:00:28,740
certains éléments fondamentaux,

12
00:00:28,740 --> 00:00:30,678
relatifs à la programmation tout court.

13
00:00:30,678 --> 00:00:32,602
Vous savez exprimer des traitements

14
00:00:32,602 --> 00:00:34,507
en utilisant des structures de contrôle,

15
00:00:34,507 --> 00:00:36,247
comme les boucles conditionnelles.

16
00:00:36,247 --> 00:00:38,897
Vous savez aussi structurer
un minimum vos données,

17
00:00:38,897 --> 00:00:40,487
en utilisant des tableaux,

18
00:00:40,487 --> 00:00:42,510
et vous savez modulariser
vos programmes,

19
00:00:42,510 --> 00:00:46,018
en utilisant la notion centrale 
de fonction.

20
00:00:46,018 --> 00:00:48,008
Ces outils de base 
vont vous permettre

21
00:00:48,008 --> 00:00:50,068
d'exercer un style 
de programmation particulier,

22
00:00:50,068 --> 00:00:52,604
dite programmation procédurale,
ou impérative,

23
00:00:52,604 --> 00:00:55,811
qui fait en sorte que 
les données et les traitements

24
00:00:55,811 --> 00:00:58,283
apparaissent de façon séparée 
dans un programme.

25
00:00:58,283 --> 00:00:59,979
Une interaction existe
entre les deux.

26
00:00:59,979 --> 00:01:02,531
Les traitements opèrent 
sur les données,

27
00:01:02,531 --> 00:01:04,898
lesquelles influencent alors
les traitements.

28
00:01:04,898 --> 00:01:07,796
Mais les deux entités apparaissent 
de façon séparée.

29
00:01:07,796 --> 00:01:10,727
Par exemple, les traitements 
peuvent s'exprimer

30
00:01:10,727 --> 00:01:12,881
par le biais de fonctions,

31
00:01:12,881 --> 00:01:15,883
le lien entre données et traitements
peut se faire alors

32
00:01:15,883 --> 00:01:19,002
par le passage des arguments.

33
00:01:19,002 --> 00:01:20,943
Les données manipulées apparaissent

34
00:01:20,943 --> 00:01:24,848
au travers d'entités distinctes,
comme par exemple les variables.

35
00:01:26,148 --> 00:01:28,738
Une des particularités 
fondamentales de la poo

36
00:01:28,738 --> 00:01:33,188
est de permettre le regroupement
des traitements et des données,

37
00:01:33,188 --> 00:01:36,216
en une seule et même entité.

38
00:01:36,216 --> 00:01:38,078
Partons d'un exemple concret.

39
00:01:38,078 --> 00:01:40,463
Imaginons que je souhaite
écrire un programme

40
00:01:40,463 --> 00:01:43,180
qui travaille avec la notion de rectangle.

41
00:01:43,180 --> 00:01:47,545
Un rectangle est défini par
une largeur, une hauteur,

42
00:01:47,545 --> 00:01:50,557
je souhaite manipuler les rectangles,

43
00:01:50,557 --> 00:01:54,163
pour calculer leur surface.

44
00:01:54,163 --> 00:01:56,894
En programmation procédurale, 
je procèderais ainsi.

45
00:01:57,876 --> 00:02:01,117
Je déclare une variable 
pour la largeur,

46
00:02:01,127 --> 00:02:03,186
à laquelle je donne
une valeur précise.

47
00:02:03,186 --> 00:02:05,117
Et, une variable pour la hauteur,

48
00:02:05,117 --> 00:02:08,331
en l'initialisant à la valeur 
qu'il lui faut.

49
00:02:08,331 --> 00:02:11,705
Et ensuite, je peux calculer 
la surface du rectangle,

50
00:02:11,705 --> 00:02:15,668
en passant la largeur et la hauteur,
à une fonction,

51
00:02:17,568 --> 00:02:20,710
qui me permet de faire
le bon calcul.

52
00:02:20,710 --> 00:02:22,156
On voit bien ici

53
00:02:22,156 --> 00:02:24,488
que les données et les traitements

54
00:02:24,488 --> 00:02:26,516
s'expriment de façon séparée.

55
00:02:26,516 --> 00:02:30,259
Les variables me permettent de représenter
et de stocker mes données.

56
00:02:30,259 --> 00:02:33,968
Et la fonction surface me permet
de réaliser les traitements.

57
00:02:33,968 --> 00:02:37,019
Ces deux entités sont séparées
dans le programme.

58
00:02:37,019 --> 00:02:40,809
Le lien se fait entre les deux
par le biais du passage des arguments.

59
00:02:42,799 --> 00:02:44,781
La principale critique 
que l'on peut émettre

60
00:02:44,781 --> 00:02:49,020
sur ce programme, est l'absence 
de lien sémantique

61
00:02:49,020 --> 00:02:50,638
entre les différentes entités.

62
00:02:50,638 --> 00:02:54,003
Par exemple, le lien sémantique qui unit
la largeur et la hauteur,

63
00:02:54,003 --> 00:02:56,591
en fait, c'est la largeur et la hauteur
d'un rectangle,

64
00:02:56,591 --> 00:02:58,509
n'est pas immédiatement visible.

65
00:02:58,509 --> 00:03:00,906
Si je ne suis pas francophone, 
je ne comprends pas bien

66
00:03:00,906 --> 00:03:02,560
ce que veut dire 
largeur et hauteur,

67
00:03:02,560 --> 00:03:07,969
il est très difficile pour moi de voir
qu'il existe un lien entre les deux.

68
00:03:07,969 --> 00:03:11,525
Il s'agit de la largeur et de la hauteur
d'un rectangle.

69
00:03:11,525 --> 00:03:15,406
De même, le lien sémantique
entre les données et les traitements,

70
00:03:17,256 --> 00:03:19,338
est difficile à établir.

71
00:03:19,338 --> 00:03:24,164
Par exemple, imaginez que j'appelle 
ma fonction, ma méthode,

72
00:03:24,164 --> 00:03:26,628
produit, donc un nom moins parlant,

73
00:03:26,628 --> 00:03:30,692
et que je sois aussi 
un peu moins explicite,

74
00:03:30,692 --> 00:03:32,403
sur le nom des arguments,

75
00:03:32,403 --> 00:03:34,523
il devient très difficile de voir

76
00:03:34,523 --> 00:03:37,209
que je fais un calcul de surface.

77
00:03:37,209 --> 00:03:39,888
Donc, hormis ce petit texte explicatif,

78
00:03:39,888 --> 00:03:44,113
le lien sémantique qui existe,
entre les données et le traitement,

79
00:03:44,113 --> 00:03:46,940
est relativement difficile à voir
dans ce programme.

80
00:03:46,940 --> 00:03:48,776
Hors, ce lien existe, 
conceptuellement.

81
00:03:48,776 --> 00:03:54,086
Ici, c'est bien la notion de rectangle,
que je souhaite manipuler

82
00:03:54,086 --> 00:03:57,542
au travers de la largeur et la hauteur.

83
00:03:57,542 --> 00:04:04,104
C'est bien la surface d'un rectangle
que je souhaite calculer.

84
00:04:04,104 --> 00:04:08,791
Donc le fait de pouvoir regrouper
en une seule et même entité,

85
00:04:11,731 --> 00:04:15,036
la notion de rectangle, 
ses données caractéristiques,

86
00:04:15,036 --> 00:04:17,783
à savoir, sa largeur et sa hauteur,

87
00:04:18,893 --> 00:04:23,010
et les traitements 
qui s'y attachent spécifiquement,

88
00:04:23,010 --> 00:04:27,484
permettent d'établir explicitement le lien
entre ces différentes entités.

89
00:04:27,484 --> 00:04:29,406
Il s'agit là de l'un des fondamentaux

90
00:04:29,406 --> 00:04:31,862
de la programmation orienté objet.

91
00:04:31,862 --> 00:04:33,886
Ce qu'il faut savoir de façon globale,

92
00:04:33,886 --> 00:04:37,189
c'est que la poo va donner
un certain nombre

93
00:04:37,189 --> 00:04:45,421
d'outillages permettant d'avantage 
de robustesse, de modularité,

94
00:04:45,421 --> 00:04:49,171
de lisibilité à vos programmes.

95
00:04:49,171 --> 00:04:53,060
Ce qui va dans le sens 
d'une meilleure maintenabilité.

96
00:04:54,510 --> 00:04:57,939
Alors, robustesse par rapport
au changement si votre programme

97
00:04:57,939 --> 00:05:00,351
est amené à changer un jour, 
à être étendu,

98
00:05:00,351 --> 00:05:03,281
on ne veut pas être dans 
l'obligation de tout réécrire,

99
00:05:03,281 --> 00:05:06,412
et de robustesse face aux erreurs
de manipulation,

100
00:05:06,412 --> 00:05:07,837
par exemple des données.

101
00:05:08,997 --> 00:05:12,354
En effet, la plupart des applications
développées de nos jours,

102
00:05:12,354 --> 00:05:14,049
ne sont pas 
redéveloppées de zéro,

103
00:05:14,049 --> 00:05:17,452
mais consistent à étendre,
à maintenir du code existant,

104
00:05:17,452 --> 00:05:20,020
et il est important de pouvoir le faire
à moindre coût.

105
00:05:20,578 --> 00:05:23,357
Nous allons voir que 
les principales propriétés de la poo

106
00:05:23,357 --> 00:05:26,984
à savoir davantage de robustesse, 
de modularité et de lisibilité,

107
00:05:26,984 --> 00:05:29,121
vont exactement dans ce sens là.

108
00:05:30,171 --> 00:05:34,415
La programmation orienté objet offre
en réalité quatre concepts centraux :

109
00:05:34,415 --> 00:05:38,445
encapsulation, abstraction, 
héritage et polymorphisme,

110
00:05:38,445 --> 00:05:40,891
qui permettent de mieux organiser
les programmes

111
00:05:40,891 --> 00:05:45,300
dans le sens de la robustesse, 
lisibilité, modularité et maintenabilité,

112
00:05:45,300 --> 00:05:46,580
comme je l'ai déjà dit.

113
00:05:46,580 --> 00:05:49,692
Et ces concepts centraux ne sont pas
spécifiques à un langage.

114
00:05:49,692 --> 00:05:53,229
Il s'agit des concepts centraux
de l'orienté objet.

115
00:05:53,229 --> 00:05:55,594
Dans cette séquence, 
nous allons essentiellement

116
00:05:55,594 --> 00:05:59,162
nous occuper de définir 
encapsulation et abstraction.

117
00:05:59,162 --> 00:06:01,440
Et nous aborderons
dans les séquences suivantes,

118
00:06:01,440 --> 00:06:05,322
les notions fondamentales 
d'héritage et de polymorphisme.

119
00:06:05,322 --> 00:06:06,936
L'encapsulation,

120
00:06:06,936 --> 00:06:10,065
c'est pouvoir regrouper
dans une unique entité

121
00:06:13,325 --> 00:06:16,665
des données et les traitements
qui agissent sur ces données.

122
00:06:16,665 --> 00:06:18,638
Donc typiquement 
dans cet exemple,

123
00:06:18,638 --> 00:06:21,606
nous allons regrouper
dans une seule et même entité,

124
00:06:21,606 --> 00:06:26,167
la largeur et la hauteur, qui caractérise
la représentation du rectangle,

125
00:06:26,167 --> 00:06:31,101
et la fonctionnalité du calcul de surface.

126
00:06:31,101 --> 00:06:33,896
Donc en terme de jargon,
on va parler pour les données,

127
00:06:33,896 --> 00:06:37,169
de la notion d'attributs.

128
00:06:37,169 --> 00:06:40,916
Et on va parler pour les fonctionnalités,
de la notion de méthode.

129
00:06:42,216 --> 00:06:44,684
Donc en programmation orienté objet,

130
00:06:44,684 --> 00:06:48,460
on va être dans la possibilité de définir
des nouveaux types de données,

131
00:06:48,460 --> 00:06:50,413
au travers de la notion de classe,

132
00:06:50,413 --> 00:06:51,963
nous allons le voir plus tard.

133
00:06:51,963 --> 00:06:54,386
Ces types de données 
peuvent être utiisés

134
00:06:54,386 --> 00:07:01,670
pour travailler concrètement 
avec des données,

135
00:07:01,670 --> 00:07:04,852
de type plus abstrait, 
le rectangle.

136
00:07:04,852 --> 00:07:06,701
Et ces données 
vont être des objets,

137
00:07:06,701 --> 00:07:09,997
qui vont cohabiter dans le programme
et interagir dans le programme.

138
00:07:09,997 --> 00:07:12,103
Un programme orienté objet
va donc travailler

139
00:07:12,103 --> 00:07:19,942
avec des objets qui sont caractérisés
par leurs attributs et leurs méthodes.

140
00:07:20,762 --> 00:07:23,112
Parlons un peu de la notion d'abstraction.

141
00:07:23,112 --> 00:07:25,145
Imaginez que je souhaite
un programme qui manipule

142
00:07:25,145 --> 00:07:26,638
un certain nombre de rectangles,

143
00:07:26,638 --> 00:07:27,778
pas uniquement un seul.

144
00:07:27,778 --> 00:07:30,578
Donc dans une approche procédurale, 
je devrais déclarer

145
00:07:30,578 --> 00:07:36,256
autant de variables hauteur et largeur, 
que j'ai de rectangles.

146
00:07:38,866 --> 00:07:41,039
Donc ceci pour le premier.

147
00:07:41,039 --> 00:07:43,553
Et puis je devrais faire
exactement la même chose

148
00:07:43,553 --> 00:07:46,808
pour le second rectangle.

149
00:07:50,268 --> 00:07:54,289
Donc on voit que 
c'est relativement fastidieux.

150
00:07:54,289 --> 00:07:59,712
Imaginez par exemple, que je travaille
maintenant avec des rectangles

151
00:07:59,712 --> 00:08:02,447
en trois dimensions où, j'ai 
une hauteur et une largeur,

152
00:08:02,447 --> 00:08:03,766
mais aussi une profondeur,

153
00:08:03,766 --> 00:08:07,502
et bien je me retrouverais
avec six variables à devoir initialiser,

154
00:08:07,502 --> 00:08:08,604
de façon appropriée.

155
00:08:08,604 --> 00:08:10,771
Pour mon calcul de surface, 
pour chaque rectangle,

156
00:08:10,771 --> 00:08:14,358
je devrais invoquer ma méthode 
de calcul de surface,

157
00:08:14,358 --> 00:08:20,327
en passant à chaque fois 
les bons arguments.

158
00:08:30,607 --> 00:08:33,063
Donc on voit rapidement 
que c'est fastidieux.

159
00:08:33,063 --> 00:08:37,794
Et puis c'est source d'erreurs.
Imaginez que je me trompe,

160
00:08:37,794 --> 00:08:42,367
et qu'ici je fasse un calcul de surface
qui implique hauteur1 et largeur2,

161
00:08:42,367 --> 00:08:43,737
et je perds la cohérence,

162
00:08:43,737 --> 00:08:47,249
je n'ai plus le bon calcul de surface
pour chacun de mes rectangles.

163
00:08:47,249 --> 00:08:49,350
Ce mécanisme,
le processus de l'abstraction,

164
00:08:49,350 --> 00:08:51,040
est celui par lequel

165
00:08:51,040 --> 00:08:54,260
je me rends compte, qu'effectivement, 
pour chacun des rectangles

166
00:08:54,260 --> 00:08:59,683
qui apparaît dans mon programme, 
j'ai la même représentation générique,

167
00:08:59,683 --> 00:09:01,663
par une largeur et une hauteur,

168
00:09:01,663 --> 00:09:04,265
j'ai un même calcul de surface 
qui intervient,

169
00:09:04,265 --> 00:09:07,951
du coup je vais pouvoir travailler
avec une notion beaucoup plus abstraite,

170
00:09:07,951 --> 00:09:09,417
qui est celle de rectangle.

171
00:09:09,417 --> 00:09:12,759
Le mécanisme de l'encapsulation 
va me permettre de regrouper

172
00:09:12,759 --> 00:09:14,429
dans la notion de rectangle,

173
00:09:14,429 --> 00:09:17,403
tout ce qui est nécessaire 
à le modéliser.

174
00:09:25,433 --> 00:09:27,881
Du coup, je vais permettre 
à mon programme

175
00:09:27,881 --> 00:09:32,685
de désormais pouvoir travailler
avec des entités plus abstraites,

176
00:09:32,685 --> 00:09:35,662
avec un premier rectangle
et un deuxième rectangle,

177
00:09:35,662 --> 00:09:37,956
tous les deux de type Rectangle.

178
00:09:37,956 --> 00:09:41,187
Je vais invoquer des calculs de surface
sur ces rectangles.

179
00:09:41,187 --> 00:09:43,993
On va voir qu'en poo, 
j'anticipe un peu,

180
00:09:43,993 --> 00:09:48,514
je calcule la surface
du premier rectangle.

181
00:09:48,514 --> 00:09:52,205
Donc on va voir par la suite, 
comment tout ceci s'exprime

182
00:09:52,205 --> 00:09:53,862
de façon beaucoup plus précise.

183
00:09:53,862 --> 00:10:00,689
Du coup, je permets à mon programme
de se focaliser sur l'essentiel.

184
00:10:00,689 --> 00:10:02,610
Je ne suis plus en train 
de me préoccuper

185
00:10:02,610 --> 00:10:06,150
du fait qu'un rectangle est constitué
d'une largeur et d'une hauteur,

186
00:10:06,150 --> 00:10:08,133
je me focalise 
sur les aspects essentiels.

187
00:10:08,133 --> 00:10:13,305
Je travaille avec des rectangles, je fais
un calcul de surface sur un rectangle.

188
00:10:13,625 --> 00:10:16,304
Au niveau de l'utilisation, 
je ne vois désormais du rectangle,

189
00:10:16,304 --> 00:10:18,773
que ce que l'on appelle 
en jargon orienté objet,

190
00:10:18,773 --> 00:10:21,901
son interface d'utilisation, 
c'est-à-dire les fonctionnalités

191
00:10:21,901 --> 00:10:25,039
qui sont offertes 
pour la manipulation du rectangle,

192
00:10:25,039 --> 00:10:27,317
comme ici le calcul de surface.

193
00:10:28,057 --> 00:10:30,566
Faisons une analogie 
avec un objet de la vie courante.

194
00:10:30,566 --> 00:10:31,913
En conduisant votre voiture,

195
00:10:31,913 --> 00:10:33,744
vous n'avez besoin 
d'en connaître

196
00:10:33,744 --> 00:10:35,594
que l'interface d'utilisation.

197
00:10:35,594 --> 00:10:39,742
Concrètement, vous avez besoin
d'avoir un volant, un accélérateur,

198
00:10:39,742 --> 00:10:41,907
une pédale de frein et à nul moment,

199
00:10:41,907 --> 00:10:48,089
il ne vous est utile de savoir comment
le moteur est concrètement construit.

200
00:10:48,089 --> 00:10:49,989
Donc, pour conduire votre voiture,

201
00:10:49,989 --> 00:10:53,364
nous n'avez besoin d'en connaître 
que l'interface d'utilisation.

202
00:10:53,364 --> 00:10:56,096
C'est exactement
le même principe en poo.

203
00:10:56,096 --> 00:10:58,869
Pour utiliser un nouveau type, 
une nouvelle classe,

204
00:10:58,869 --> 00:11:02,598
vous n'avez besoin d'en connaître
que l'interface d'utilisation

205
00:11:02,598 --> 00:11:04,630
qui est prévue 
par son programmeur.

206
00:11:04,630 --> 00:11:08,215
Le reste, détail d'implémentation 
interne, n'est pas utile à connaître.

207
00:11:08,965 --> 00:11:12,720
Il y a donc deux niveaux 
de perception d'un objet.

208
00:11:12,720 --> 00:11:16,423
Un niveau externe, qui est utile, 
au programmeur utilisateur,

209
00:11:16,423 --> 00:11:22,429
celui qui utilise la notion de rectangle,
dans un programme.

210
00:11:22,429 --> 00:11:24,693
Donc il existe désormais 
un type Rectangle,

211
00:11:24,693 --> 00:11:27,401
je peux déclarer des variables
de type Rectangle,

212
00:11:27,401 --> 00:11:29,148
les initialiser 
de façon appropriée.

213
00:11:29,148 --> 00:11:32,383
Et ensuite, ce qui m'intéresse,
en tant que programmeur utilisateur,

214
00:11:32,383 --> 00:11:36,534
c'est les fonctionnalités utiles
de calcul de surface.

215
00:11:36,534 --> 00:11:42,959
Donc ce niveau externe, est le niveau
qui intéresse le programmeur utilisateur,

216
00:11:42,959 --> 00:11:45,991
celui qui utilise le type Rectangle.

217
00:11:45,991 --> 00:11:50,829
Second niveau : le niveau interne, 
celui qui a programmé le nouveau type,

218
00:11:50,829 --> 00:11:56,023
le type Rectangle, a dû se préoccuper
de tous les détails d'implémentation.

219
00:11:56,023 --> 00:12:00,109
À savoir qu'un rectangle, 
c'est une hauteur et une largeur,

220
00:12:00,109 --> 00:12:04,804
il a dû définir comment se fait
concrètement le calcul de surface.

221
00:12:04,804 --> 00:12:09,105
Donc ceci constitue 
la partie implémentation,

222
00:12:09,105 --> 00:12:11,145
à un niveau interne, 
pas forcément utile,

223
00:12:11,145 --> 00:12:14,955
à celui qui utilise le rectangle.

224
00:12:14,955 --> 00:12:18,865
Donc en programmation orienté objet,
nous aurons non seulement la possibilité

225
00:12:18,865 --> 00:12:22,924
de regrouper en une seule et même entité
des données et des traitements.

226
00:12:22,924 --> 00:12:26,586
Mais on va pouvoir également définir
des niveaux de visibilité.

227
00:12:26,586 --> 00:12:29,837
Celui qui programme 
le nouveau type Rectangle,

228
00:12:29,837 --> 00:12:31,782
concrètement en classe rectangle,

229
00:12:31,782 --> 00:12:35,370
va pouvoir dire, ceci est un détail
d'implémentation,

230
00:12:35,370 --> 00:12:39,484
qui ne sera pas accessible 
à l'utilisateur externe.

231
00:12:39,484 --> 00:12:43,623
Ceci est une fonctionnalité
que l'on souhaite offrir

232
00:12:43,623 --> 00:12:47,979
à l'utilisateur externe et donc 
qui va être accessible à cet utilisateur.

233
00:12:47,979 --> 00:12:53,261
Tout ce qui est accessible 
à l'utilisateur, donc visible,

234
00:12:54,511 --> 00:12:58,823
constitue ce que l'on appelle, 
l'interface d'utilisation de la classe

235
00:12:58,823 --> 00:13:00,328
du type en question.

236
00:13:00,328 --> 00:13:05,755
Donc ici, dans notre classe rectangle, 
dans notre nouveau type Rectangle,

237
00:13:05,755 --> 00:13:08,507
nous avons défini 
comme interface d'utilisation,

238
00:13:08,507 --> 00:13:13,258
le calcul de surface, le reste constitue
des détails d'implémentation

239
00:13:13,258 --> 00:13:17,791
qui ne sont pas accessibles au programmeur
qui utilise le type Rectangle.

240
00:13:17,791 --> 00:13:21,180
Et nous avons ici les fondamentaux 
nous permettant d'atteindre

241
00:13:21,180 --> 00:13:24,620
une meilleure robustesse des programmes
face aux changements.

242
00:13:24,620 --> 00:13:27,222
Typiquement, 
lorsque vous changez de voiture,

243
00:13:27,222 --> 00:13:29,088
même si la technologie
du moteur a changé,

244
00:13:29,088 --> 00:13:31,275
l'interface, globalement, reste la même.

245
00:13:31,275 --> 00:13:34,434
Vous pouvez continuer, 
vous savez conduire votre voiture,

246
00:13:34,434 --> 00:13:37,932
même si les détails internes 
de mise en oeuvre de votre voiture

247
00:13:37,932 --> 00:13:39,745
ont changé entre-temps.

248
00:13:39,745 --> 00:13:44,075
Donc vous ne voyez de votre voiture
que quelque chose d'abstrait.

249
00:13:44,075 --> 00:13:46,129
Vous ne voyez d'elle 
concrètement

250
00:13:46,129 --> 00:13:48,910
que ce qui permet de la conduire, 
l'accélérateur,

251
00:13:48,910 --> 00:13:50,751
la pédale de frein.

252
00:13:50,751 --> 00:13:52,800
Pour synthétiser, encapsuler c'est donc

253
00:13:52,800 --> 00:13:55,727
regrouper en une unique entité,
les données et les traitements

254
00:13:55,727 --> 00:13:56,956
qui la caractérisent.

255
00:13:56,956 --> 00:13:59,718
C'est aussi dissimuler 
les détails d'implémentation,

256
00:13:59,718 --> 00:14:04,026
définir une interface d'utilisation
d'une classe d'objets,

257
00:14:04,026 --> 00:14:08,646
justement au travers de cet outillage
de l'encapsulation,

258
00:14:08,646 --> 00:14:11,411
va nous permettre d'aboutir
à une abstraction,

259
00:14:11,411 --> 00:14:13,053
une vision abstraite de l'objet,

260
00:14:13,053 --> 00:14:17,507
on ne va voir de l'objet que ce qu'offre
son interface d'utilisation,

261
00:14:17,507 --> 00:14:20,404
en terme de manipulation possible.

262
00:14:20,404 --> 00:14:25,014
Donc concrètement, le programmeur
concepteur va donc décider

263
00:14:25,014 --> 00:14:28,218
de l'existence d'un nouveau type,

264
00:14:28,218 --> 00:14:34,801
et va devoir se préoccuper de 
tous les détails d'implémentation.

265
00:14:35,161 --> 00:14:41,758
Il va devoir décider de ce qui est visible
pour le monde extérieur,

266
00:14:41,758 --> 00:14:46,468
de ce qui est utilisable 
et ce qui ne l'est pas.

267
00:14:46,468 --> 00:14:48,932
Le programmeur utilisateur, de son côté,

268
00:14:48,932 --> 00:14:54,203
est client du nouveau type de données,

269
00:14:54,203 --> 00:15:00,078
il va pouvoir l'utiliser, 
mais va pouvoir l'utiliser uniquement,

270
00:15:00,078 --> 00:15:05,369
au travers de l'interface, 
c'est-à-dire des méthodes visibles,

271
00:15:05,369 --> 00:15:06,712
typiquement,

272
00:15:07,902 --> 00:15:11,130
et n'aura pas accès aux détails internes.

273
00:15:11,130 --> 00:15:16,299
L'interface d'utilisation est typiquement 
ce qui va permettre d'établir le lien

274
00:15:16,299 --> 00:15:19,408
entre le concepteur développeur 
et l'utilisateur,

275
00:15:19,408 --> 00:15:22,878
et concrètement, cette interface
va être entièrement décrite

276
00:15:22,878 --> 00:15:28,108
par l'entête des méthodes
qui sont offertes

277
00:15:28,108 --> 00:15:30,242
aux programmeurs utilisateurs.

278
00:15:30,462 --> 00:15:33,282
L'un des intérêts fondamentaux
d'abstraire et d'encapsuler,

279
00:15:33,282 --> 00:15:37,555
est d'assurer une meilleure visibilité, 
une meilleure cohérence au programme.

280
00:15:37,555 --> 00:15:41,201
Comparez une approche procédurale,
où je manipule des données de bas niveau,

281
00:15:41,201 --> 00:15:43,907
avec l'approche orienté objet, 
que vous pourrez

282
00:15:43,907 --> 00:15:47,085
dès les séquences suivantes, 
programmer par vous-mêmes, 

283
00:15:47,085 --> 00:15:50,149
et où je manipule explicitement 
la notion de rectangle.

284
00:15:50,149 --> 00:15:52,708
Là, il est visible que je manipule

285
00:15:52,708 --> 00:15:54,138
cette notion de rectangle,

286
00:15:54,138 --> 00:15:59,850
où j'établis le lien sémantique, 
entre le rectangle et la surface,

287
00:15:59,850 --> 00:16:04,219
alors qu'ici, ce lien est établi 
de façon très indirecte.

288
00:16:04,219 --> 00:16:08,248
Donc, premier avantage,
meilleure visibilité, meilleure cohérence.

289
00:16:08,248 --> 00:16:10,917
De plus ici, comme 
le programmeur utilisateur

290
00:16:10,917 --> 00:16:14,049
de la classe rectangle 
ne peut plus utiliser

291
00:16:14,049 --> 00:16:16,166
la notion de rectangle qu'au travers
de l'interface d'utilisation

292
00:16:16,166 --> 00:16:19,418
prévue par le programmeur
concepteur de la classe,

293
00:16:19,418 --> 00:16:22,116
il devient possible 
à ce programmeur concepteur,

294
00:16:22,116 --> 00:16:23,689
d'en modifier les détails internes,

295
00:16:23,689 --> 00:16:26,945
sans que cela n'impacte 
l'utilisation concrète.

296
00:16:26,945 --> 00:16:30,262
Si, comme évoqué précédemment, 
le concepteur de la classe rectangle,

297
00:16:30,262 --> 00:16:33,887
décide de revisiter, 
de revoir son implémentation initiale,

298
00:16:33,887 --> 00:16:37,440
qui consistait à représenter
la hauteur et la largeur,

299
00:16:37,440 --> 00:16:39,956
au moyen de deux doubles.

300
00:16:41,626 --> 00:16:43,793
Donc s'il décide de modifier ce choix,

301
00:16:43,793 --> 00:16:46,400
par exemple en utilisant un tableau,

302
00:16:49,830 --> 00:16:53,648
alors, s'il adapte proprement 
le calcul de surface

303
00:16:53,648 --> 00:16:57,940
à sa nouvelle structure de données, 
celui qui utilise le calcul de surface

304
00:16:57,940 --> 00:16:59,463
n'est nullement impacté.

305
00:16:59,463 --> 00:17:02,027
De la séparation entre 
les niveaux interne,

306
00:17:02,027 --> 00:17:05,278
détails d'implémentation et externe,
interface d'utilisation,

307
00:17:05,278 --> 00:17:07,888
découle un cadre d'utilisation
plus rigoureux.

308
00:17:07,888 --> 00:17:11,036
Les modifications à l'intérieur
de la structure interne,

309
00:17:11,036 --> 00:17:13,613
restent invisibles à l'extérieur.

310
00:17:13,613 --> 00:17:15,746
Il en découle une règle
généralement suivie

311
00:17:15,746 --> 00:17:17,508
par tout programmeur
orienté objet,

312
00:17:17,508 --> 00:17:20,590
comme les attributs 
pour leur modélisation,

313
00:17:20,590 --> 00:17:23,459
nécessitent des choix techniques, 
d'implémentation.

314
00:17:23,459 --> 00:17:25,237
On doit décider de leur type,

315
00:17:25,237 --> 00:17:29,126
on va les considérer habituellement
comme des détails d'implémentation,

316
00:17:29,126 --> 00:17:32,075
et donc on va faire en sorte 
qu'ils ne soient pas accessibles

317
00:17:32,075 --> 00:17:34,324
depuis l'extérieur de la classe.

318
00:17:35,434 --> 00:17:38,190
Pour résumer, en définissant 
un nouveau type d'objet

319
00:17:38,190 --> 00:17:42,519
au travers d'une classe, on va être amené 
à définir les attributs caractéristiques

320
00:17:42,519 --> 00:17:46,589
de la classe, ainsi que les méthodes
qui lui sont spécifiques.

321
00:17:46,589 --> 00:17:50,624
Et on va devoir se préoccuper de définir
concrètement ce qui est visible,

322
00:17:50,624 --> 00:17:51,883
l'interface d'utilisation,

323
00:17:51,883 --> 00:17:54,275
et ce qui ne l'est pas, 
les détails d'implémentation.

324
00:17:54,275 --> 00:17:57,468
Donc une fois qu'on aura décidé
de ce qui est à cacher,

325
00:17:57,468 --> 00:18:00,392
donc l'utilisateur externe 
n'aura de vision de cet objet,

326
00:18:00,392 --> 00:18:03,095
qu'une vision abstraite, 
qui est matérialisée

327
00:18:03,095 --> 00:18:05,000
par l'interface d'utilisation,

328
00:18:05,000 --> 00:18:07,995
je ne vois d'un rectangle 
que son calcul de surface.

329
00:18:07,995 --> 00:18:12,035
Et si je veux suivre les bonnes règles
de programmation orienté objet,

330
00:18:12,035 --> 00:18:14,037
je vais considérer que les attributs

331
00:18:14,037 --> 00:18:16,880
sont également 
des détails d'implémentation.

332
00:18:16,880 --> 00:18:22,189
Et donc, l'interface va se limiter à un
certain nombre de méthodes bien choisies.

333
00:18:22,189 --> 00:18:25,830
L'utilisateur externe 
n'aura de vision de l'objet

334
00:18:25,830 --> 00:18:28,599
que cette interface d'utilisation.

335
00:18:28,599 --> 00:18:32,522
À retenir de la séquence d'aujourd'hui, 
le résultat du processus d'abstraction

336
00:18:32,522 --> 00:18:35,217
est ce que l'on appelle une classe,

337
00:18:41,507 --> 00:18:44,533
qui me permet de désigner 
une catégorie d'objets.

338
00:18:44,533 --> 00:18:49,873
Une classe va définir dans un programme
un nouveau type.

339
00:18:49,873 --> 00:18:57,253
Je dispose désormais du type Rectangle
que je peux manipuler dans un programme.

340
00:18:57,253 --> 00:19:01,697
Je peux déclarer des variables
de ce type là.

341
00:19:01,697 --> 00:19:05,634
Une réalisation concrète, 
donc la déclaration d'une variable

342
00:19:05,634 --> 00:19:11,697
de ce nouveau type, est ce qu'on appelle
dans le jargon orienté objet, un objet.

343
00:19:11,697 --> 00:19:14,906
Et il est généralement manipulé 
au travers d'une variable.

344
00:19:15,446 --> 00:19:17,273
Pour résumer et 
illustrer le propos,

345
00:19:17,273 --> 00:19:21,317
celui qui écrit la classe rectangle, 
va décider de l'existence conceptuelle

346
00:19:21,317 --> 00:19:22,510
de ce nouveau type.

347
00:19:22,510 --> 00:19:25,767
Il va le faire en écrivant 
un programme qui contient le code

348
00:19:25,767 --> 00:19:27,152
de cette classe rectangle.

349
00:19:27,152 --> 00:19:30,577
Celui qui l'utilise va utiliser 
ce nouveau type

350
00:19:30,577 --> 00:19:32,854
en déclarant des variables
du type Rectangle,

351
00:19:32,854 --> 00:19:35,630
qui vont avoir une existence concrète

352
00:19:35,630 --> 00:19:37,138
lorsque le programme s'exécute.

353
00:19:37,138 --> 00:19:39,573
Donc quand on crée 
de nouveaux objets de ce type,

354
00:19:39,573 --> 00:19:42,344
on peut commencer à travailler
avec ces objets concrètement

355
00:19:42,344 --> 00:19:43,874
dans un programme.

356
00:19:43,874 --> 00:19:47,172
Donc, l'utilisateur va travailler 
concrètement avec des réalisations

357
00:19:47,172 --> 00:19:51,027
des objets de la classe rectangle.

358
00:19:51,027 --> 00:19:53,038
Nous voici arrivés au terme
de la présentation

359
00:19:53,038 --> 00:19:55,529
de ces concepts de fondamentaux
de l'orienté objet,

360
00:19:55,529 --> 00:19:57,639
que sont l'encapsulation et l'abstraction.

361
00:19:57,639 --> 00:19:59,673
Vous allez dès les séquences suivantes,

362
00:19:59,673 --> 00:20:03,510
commencer à les pratiquer de façon
très concrète, en Java.
