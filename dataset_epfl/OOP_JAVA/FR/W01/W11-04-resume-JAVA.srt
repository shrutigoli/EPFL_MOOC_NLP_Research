1
00:00:04,174 --> 00:00:05,699
Dans les séquences vidéos précédentes,

2
00:00:05,699 --> 00:00:07,806
vous avez appris à écrire 
une classe en java.

3
00:00:08,085 --> 00:00:10,104
Vous savez y définir des méthodes 
et des attributs.

4
00:00:10,412 --> 00:00:11,798
Vous savez également 
mettre en place

5
00:00:11,798 --> 00:00:14,607
un certain nombre de fondamentaux
lié à l'encapsulation,

6
00:00:14,607 --> 00:00:18,000
à savoir, définir ce qui dans votre classe 
est publiquement accessible

7
00:00:18,020 --> 00:00:19,296
et ce qui ne l'est pas.

8
00:00:19,296 --> 00:00:22,329
Nous allons aujourd'hui examiner tout cela,
au travers d'exemples

9
00:00:22,329 --> 00:00:25,641
Et nous allons voir que bien encapsuler
une classe nécessite

10
00:00:25,641 --> 00:00:26,941
un certain nombre de précautions.

11
00:00:27,827 --> 00:00:30,202
A ce stade, définir une classe 
dans un programme

12
00:00:30,202 --> 00:00:33,659
c'est définir un nouveau type
caractérisé par des attributs, des méthodes

13
00:00:33,667 --> 00:00:37,832
et vous allez encapsuler cette classe
en définissant ce qui est privé,

14
00:00:37,832 --> 00:00:40,070
détails d'implémentation,
ce qui est public,

15
00:00:40,070 --> 00:00:42,712
ce qui fait partie 
de l'interface d'utilisation

16
00:00:42,712 --> 00:00:45,200
que vous prévoyez
pour un utilisateur externe.

17
00:00:45,670 --> 00:00:47,603
Il est important de regarder maintenant

18
00:00:47,603 --> 00:00:49,387
comment tout cela s'articule 
sur un exemple concret

19
00:00:49,387 --> 00:00:51,908
et c'est l'objectif 
de la séquence qui suit.

20
00:00:52,386 --> 00:00:54,444
Si l'on veut permettre 
à un programme

21
00:00:54,444 --> 00:00:56,194
de travailler avec la notion de rectangle,
il va falloir commencer

22
00:00:56,194 --> 00:01:00,056
par faire un travail de conception,
concevoir la classe rectangle

23
00:01:00,095 --> 00:01:02,901
la déterminer en termes des attributs
qui la caractérisent

24
00:01:02,901 --> 00:01:05,091
et des méthodes 
qui lui sont spécifiques ;

25
00:01:05,091 --> 00:01:08,421
également réfléchir à ce qui constitue 
l'interface d'utilisation

26
00:01:08,942 --> 00:01:12,172
et ce qui constitue la partie cachée
des détails d'implémentation.

27
00:01:12,734 --> 00:01:16,200
Voici donc une implémentation possible
de la classe rectangle

28
00:01:16,200 --> 00:01:18,948
qui nous a servi d'exemple introductif
à la programmation d'un tel objet.

29
00:01:19,048 --> 00:01:21,883
Si je veux définir la classe
dans un programme,

30
00:01:21,883 --> 00:01:23,932
j'utilise le mot réservé classe

31
00:01:23,932 --> 00:01:26,684
suivi du nom 
que j'ai choisi pour la classe

32
00:01:26,684 --> 00:01:30,110
avec la petite convention 
qu'un nom de classe commence

33
00:01:30,110 --> 00:01:34,229
par une majuscule en java.
Ensuite, nous nous sommes interessés

34
00:01:34,229 --> 00:01:37,629
à définir quelles étaient 
les attributs spécifiques de la classe

35
00:01:37,629 --> 00:01:39,325
ainsi que les méthodes.

36
00:01:41,113 --> 00:01:43,635
Nous nous sommes intéressés 
à des aspects d'encapsulation,

37
00:01:44,252 --> 00:01:47,136
à savoir, définir ce qu'est un détail 
d'implémentation,

38
00:01:47,354 --> 00:01:52,764
typiquement l'implémentation des attributs,
et ce qui fait partie de l'interface,

39
00:01:52,884 --> 00:01:56,455
ce que l'utilisateur externe
pourra utiliser

40
00:01:56,538 --> 00:01:59,370
et que l'on qualifie de public ici.

41
00:02:00,911 --> 00:02:02,635
La classe rectangle qui est ici
sous vos yeux,

42
00:02:02,635 --> 00:02:05,301
va mettre à disposition 
de l'utilisateur externe

43
00:02:05,301 --> 00:02:10,581
un certain nombre de fonctionnalités
qui permettent de consulter les attributs

44
00:02:10,607 --> 00:02:15,178
d'en modifier la valeur,
et de calculer la surface du rectangle.

45
00:02:16,069 --> 00:02:19,093
Notez bien que de façon générale,
il n'est pas nécessaire

46
00:02:19,093 --> 00:02:23,423
pour une classe de définir des méthodes 
get et set pour chacun des attributs.

47
00:02:23,536 --> 00:02:28,303
Il ne s'agit ici que d'un exemple
parce que nous avons, ici, à ce stade

48
00:02:28,303 --> 00:02:30,864
une façon très basique d’interagir
avec la classe.

49
00:02:30,864 --> 00:02:34,016
Nous avons essayé de respecter
quelques bons principes d'encapsulation,

50
00:02:34,616 --> 00:02:38,183
encapsulation, qui veut dire que nous 
ne permettons à l'utilisateur externe

51
00:02:38,407 --> 00:02:40,921
d'accéder aux fonctionnalités
qu'à travers l'interface.

52
00:02:41,036 --> 00:02:44,205
Ceci veut dire que désormais 
lorsqu'on est programmeur

53
00:02:44,205 --> 00:02:45,782
de la classe rectangle, on a la latitude

54
00:02:45,782 --> 00:02:49,307
de pouvoir modifier 
l'implémentation interne, par exemple,

55
00:02:49,307 --> 00:02:55,867
ici, je peux décider de modifier
la représentation, les dimensions

56
00:02:55,867 --> 00:02:58,867
en utilisant plutôt un tableau 
à deux éléments qui me permettrait

57
00:02:59,661 --> 00:03:03,952
de stocker la hauteur et la largeur.
A ce moment là, c'est à moi,

58
00:03:03,952 --> 00:03:07,946
programmeur de la classe rectangle
d'adapter les méthodes

59
00:03:07,946 --> 00:03:11,207
par exemple, au lieu d'avoir 
return hauteur, nous aurions

60
00:03:11,207 --> 00:03:17,817
un return dims[0].
C'est à moi d'adapter ces méthodes

61
00:03:17,860 --> 00:03:21,628
de sorte à ce que celui qui utilise
la classe ne soit nullement impacté.

62
00:03:21,628 --> 00:03:25,335
Il pourra toujours continuer à utiliser
getHauteur, setĤauteur

63
00:03:25,335 --> 00:03:28,922
et calcul de surface
sans avoir connaissance des modifications

64
00:03:28,922 --> 00:03:30,608
que j'ai fait en interne sur la classe.

65
00:03:30,608 --> 00:03:33,980
Notez également que puisqu'on contraint
l'utilisateur à passer

66
00:03:33,980 --> 00:03:36,003
par un certain nombre 
de méthodes prédéfinies

67
00:03:36,003 --> 00:03:39,675
pour accéder au contenu d'un objet, 
il devient possible de mettre en oeuvre

68
00:03:39,675 --> 00:03:42,683
un certain nombre de protections,
de garde-fous pour empêcher

69
00:03:42,683 --> 00:03:45,502
des manipulations incorrectes 
de ce contenu.

70
00:03:45,502 --> 00:03:48,932
Voyez-vous ce que l'on pourrait améliorer
à cette classe dans ce sens ?

71
00:03:49,827 --> 00:03:52,357
Ce que vous avez sous les yeux, ici,
comme code,

72
00:03:50,487 --> 00:03:55,294
est le code du programmeur/concepteur
de la classe rectangle,

73
00:03:55,294 --> 00:03:58,302
celui qui conçoit 
ce niveau type de données.

74
00:03:58,302 --> 00:04:01,084
Voyons maintenant ce qui se passe
du côté du programmeur/utilisateur

75
00:04:01,084 --> 00:04:03,451
qui n'est pas forcément la même personne.
Cela peut être le même programmeur

76
00:04:03,451 --> 00:04:04,821
mais pas forcément.

77
00:04:04,907 --> 00:04:07,571
Le code que vous avez ici sous les yeux,

78
00:04:07,571 --> 00:04:09,813
est le code l'implémentation
d'une classe Geometrie

79
00:04:09,813 --> 00:04:12,049
qui, elle est cliente du type rectangle

80
00:04:12,049 --> 00:04:14,801
de la classe rectangle 
qui était défini précédemment.

81
00:04:14,801 --> 00:04:18,097
Ce qui veut dire qu'elle peut désormais
l'utiliser comme n'importe quel autre type

82
00:04:18,097 --> 00:04:22,337
je suis en train de déclarer 
une variable rect de type Rectangle.

83
00:04:22,428 --> 00:04:25,913
La déclaration a exactement la même forme
que celle que j'utilisais

84
00:04:25,913 --> 00:04:28,602
pour la déclaration de variables
de types prédéfinis.

85
00:04:28,602 --> 00:04:31,767
Nous avons vu également
dans le cadre de ce cours

86
00:04:31,767 --> 00:04:35,306
que pour initialiser un objet,
à ce stade du cours,

87
00:04:35,306 --> 00:04:37,427
il fallait passer 
par ce genre de tournure en java.

88
00:04:37,427 --> 00:04:40,388
Nous allons apprendre à expliciter
ce genre de tournure dès le cours suivant.

89
00:04:40,388 --> 00:04:42,555
Pour l'instant, c'est un passage obligé.

90
00:04:42,555 --> 00:04:45,711
Au terme de l'exécution 
de cette instruction,

91
00:04:45,711 --> 00:04:49,223
nous aboutissons à la situation suivante
en mémoire.

92
00:04:49,223 --> 00:04:53,289
Nous avons un objet qui s'appelle rect,
une variable qui s'appelle rect

93
00:04:53,289 --> 00:04:57,476
qui contient la référence, l'adresse,
un objet de type rectangle

94
00:04:57,476 --> 00:05:01,604
qui a deux champs.
Un champ pour la largeur

95
00:05:01,604 --> 00:05:03,756
et un champ pour la hauteur,

96
00:05:03,756 --> 00:05:06,647
et évidemment, l'une des premières choses
que l'on souhaiterait faire ici,

97
00:05:06,647 --> 00:05:08,626
c'est de mettre dans les champs
largeur et hauteur,

98
00:05:08,626 --> 00:05:12,210
des valeurs particulières afin que 
ces 2 champs contiennent autre chose que 0.

99
00:05:12,210 --> 00:05:15,219
Ceci peut être fait 
au moyen d'interactions clavier,

100
00:05:15,219 --> 00:05:17,797
on peut donc demander à l'utilisateur 
d'introduire des valeurs

101
00:05:17,797 --> 00:05:20,925
pour la largeur et la hauteur.
C'est ce qui est fait ici.

102
00:05:22,645 --> 00:05:24,941
Une fois que l'utilisateur 
a introduit une valeur,

103
00:05:24,941 --> 00:05:30,931
on peut mettre cette valeur
dans la hauteur de l'objet rect

104
00:05:31,901 --> 00:05:36,321
que nous venons de créer,
au moyen de la méthode setHauteur.

105
00:05:36,498 --> 00:05:39,529
Nous utilisons ici la notation pointée
qui veut dire

106
00:05:39,529 --> 00:05:43,639
que nous appliquons la méthode
setHauteur à l'instance à l'objet rect

107
00:05:44,615 --> 00:05:48,449
pour mettre la valeur lue à l'intérieur.
Imaginez que l'utilisateur ayant introduit

108
00:05:48,449 --> 00:05:52,549
la valeur 5.O, nous nous trouvions 
dans la situation suivante.

109
00:05:53,308 --> 00:05:57,343
Pareil pour ces lignes de codes
qui ont pour charge d'initialiser

110
00:05:57,343 --> 00:05:58,883
la largeur du rectangle.

111
00:05:59,826 --> 00:06:03,060
Nous disposons d'un objet 
qui est proprement initialisé.

112
00:06:03,060 --> 00:06:06,539
Nous pouvons désormais utiliser
d'autres fonctionnalités sur ce rectangle

113
00:06:06,539 --> 00:06:09,105
comme par exemple, 
le calcul de la surface.

114
00:06:09,105 --> 00:06:12,066
Pareil, on utilise la notation pointée.
Ici, je suis en train dire

115
00:06:12,066 --> 00:06:16,886
je calcule la surface de cet objet
rectangle déclaré ici et initialisé ici.
