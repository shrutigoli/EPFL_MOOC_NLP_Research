1
00:00:04,411 --> 00:00:06,552
Dans cette séquence vidéo
nous allons voir

2
00:00:06,552 --> 00:00:07,927
comment le polymorphisme

3
00:00:07,927 --> 00:00:10,872
est un très bon complément 
de l'abstraction et nous permet donc

4
00:00:10,872 --> 00:00:14,607
de mieux spécifier les classes 
au niveau le plus abstrait.

5
00:00:14,607 --> 00:00:18,096
Mais commençons par quelques rappels 
sur le polymorphisme.

6
00:00:18,096 --> 00:00:21,549
Le « polymorphisme universel d'inclusion »
pour être précis,

7
00:00:21,549 --> 00:00:24,425
est le fait que des instances
d'une sous-classe,

8
00:00:24,425 --> 00:00:26,715
qui sont « substituables »
aux instances des super-classes,

9
00:00:26,715 --> 00:00:29,051
gardent leurs propriétés propres

10
00:00:29,051 --> 00:00:32,441
au lieu d'être réduites
aux propriétés de la super-classe

11
00:00:32,441 --> 00:00:34,467
et en particulier leurs comportements,

12
00:00:34,467 --> 00:00:36,477
c'est à dire, les méthodes invoquées

13
00:00:36,477 --> 00:00:39,914
vont être déterminées
lors de l'exécution du programme

14
00:00:39,914 --> 00:00:43,602
en fonction de la nature réelle 
des instances concernées.

15
00:00:43,602 --> 00:00:45,756
La définition peut paraître 
encore compliquée

16
00:00:45,756 --> 00:00:47,818
mais le principe est en fait assez simple

17
00:00:47,818 --> 00:00:51,162
par exemple, si j'ai une classe 
générale « Personnage »

18
00:00:51,162 --> 00:00:54,045
dont hérite « Voleur » , 
un voleur est un personnage,

19
00:00:54,045 --> 00:00:56,798
« Magicien », « Guerrier », etc.

20
00:00:56,798 --> 00:01:00,501
Les magiciens, guerriers et voleurs vont,

21
00:01:00,501 --> 00:01:02,843
même si ils sont vus
en tant que personnages,

22
00:01:02,843 --> 00:01:05,653
pouvoir se comporter, 
donc par exemple si ils rencontrent,

23
00:01:05,653 --> 00:01:08,889
en tant que chacun des instances propres.

24
00:01:08,889 --> 00:01:11,168
Par exemple, si un voleur
rencontre un autre personnage

25
00:01:11,168 --> 00:01:12,684
il va peut-être le voler,

26
00:01:12,684 --> 00:01:14,404
un guerrier si il rencontre
un autre personnage

27
00:01:14,404 --> 00:01:16,502
il va peut-être le frapper, etc

28
00:01:16,502 --> 00:01:18,139
Donc par exemple

29
00:01:18,139 --> 00:01:21,220
si j'ai comme ça un personnage « p1 »
qui rencontre une personnage « p2 »

30
00:01:21,220 --> 00:01:23,047
la méthode « rencontrer » ici,

31
00:01:23,047 --> 00:01:25,926
va s'adapter à la nature réelle 
de l'instance de « p1 »

32
00:01:25,926 --> 00:01:28,766
et donc va rencontrer « p2 » comme un voleur

33
00:01:28,766 --> 00:01:31,949
si « p1 » est un voleur, comme un magicien 
si « p1 » est un magicien,

34
00:01:31,949 --> 00:01:34,926
comme un guerrier si « p1 » est un guerrier.

35
00:01:34,926 --> 00:01:37,396
Et je vous rappelle
que pour avoir du polymorphisme

36
00:01:37,396 --> 00:01:41,135
il faut bien sûr de l'héritage 
pour avoir cette classe générale

37
00:01:41,135 --> 00:01:44,504
par rapport à laquelle 
les traitements doivent s'adapter

38
00:01:44,504 --> 00:01:47,147
en fonction de sous-classes spécifiques 
donc de l'héritage

39
00:01:47,147 --> 00:01:50,380
et de la résolution dynamique des liens.

40
00:01:50,380 --> 00:01:53,149
Je vous rappelle aussi que 
la résolution dynamique des liens

41
00:01:53,149 --> 00:01:55,497
ça consiste à appeler la bonne méthode

42
00:01:55,497 --> 00:01:58,494
en fonction de l'instance, 
et donc pour reprendre un exemple

43
00:01:58,494 --> 00:02:01,523
qui vous avez été déjà donné 
dans une séquence vidéo précédente,

44
00:02:01,523 --> 00:02:03,986
imaginons qu'on organise une rencontre

45
00:02:03,986 --> 00:02:06,998
entre un guerrier et un voleur,

46
00:02:06,998 --> 00:02:10,556
cette méthode donc ici, 
organise une rencontre

47
00:02:10,556 --> 00:02:14,109
entre deux personnages reçu en argument

48
00:02:14,109 --> 00:02:16,042
en affichant un message

49
00:02:16,042 --> 00:02:18,477
et en appelant la méthode « rencontrer »

50
00:02:18,477 --> 00:02:22,185
du « Personnage a », 
reçu comme premier argument ici

51
00:02:22,185 --> 00:02:25,693
sur le « Personnage b »
reçu comme deuxième argument.

52
00:02:25,693 --> 00:02:28,468
Et la résolution dynamique 
des liens va faire que

53
00:02:28,468 --> 00:02:32,735
lorsque l'on rencontre ici
un guerrier « g » comme paramètre « a »,

54
00:02:32,735 --> 00:02:36,459
c'est la méthode « rencontrer » de guerrier

55
00:02:36,459 --> 00:02:40,292
qui, dynamiquement, 
lors de l'exécution de ce bout de code,

56
00:02:40,292 --> 00:02:42,695
va regarder le fait que « a » est un guerrier

57
00:02:42,695 --> 00:02:45,016
pour appeler la méthode 
« rencontrer » de « Guerrier »

58
00:02:45,016 --> 00:02:48,885
et non pas la méthode « rencontrer »
de « Personnage », en dépit du fait

59
00:02:48,885 --> 00:02:51,556
qu'on décrit ici « a » comme un personnage.

60
00:02:51,556 --> 00:02:54,791
Si on appelait ici la méthode 
« rencontrer » de « Personnage »,

61
00:02:54,791 --> 00:02:56,817
on aurait une résolution statique

62
00:02:56,817 --> 00:02:59,042
qui ne dépend que de ce qui est
écrit statiquement

63
00:02:59,042 --> 00:03:02,519
alors que ce qui ce se passe en java
c'est une résolution dynamique

64
00:03:02,519 --> 00:03:04,202
où on va appeler la méthode « rencontrer »

65
00:03:04,202 --> 00:03:06,177
de l'instance réelle qui est passée,

66
00:03:06,177 --> 00:03:08,474
on regarde quelle est l'instance : 
c'est un « Guerrier »,

67
00:03:08,474 --> 00:03:11,745
donc on va appeler la méthode ici 
« rencontrer » de « Guerrier ».

68
00:03:12,385 --> 00:03:14,291
Voila donc pour les rappels.

69
00:03:14,291 --> 00:03:16,266
Voyons maintenant comment ces ingrédients,

70
00:03:16,266 --> 00:03:19,183
comment le polymorphisme 
va nous permettre à mieux spécifier,

71
00:03:19,183 --> 00:03:21,248
à un niveau plus abstrait, nos programmes

72
00:03:21,248 --> 00:03:24,132
en introduisant ces notions 
de classes abstraites

73
00:03:24,132 --> 00:03:26,131
et de méthodes abstraites.

74
00:03:26,131 --> 00:03:27,993
Commençons par présenter 
le problème auquel répondent

75
00:03:27,993 --> 00:03:30,078
ces méthodes abstraites justement.

76
00:03:30,078 --> 00:03:32,437
Au niveau le plus élevé d'une hiérarchie

77
00:03:32,437 --> 00:03:35,258
on ne sait pas forcement 
définir une méthode

78
00:03:35,258 --> 00:03:39,339
que l'on sait pourtant, qui va exister 
pour toutes les sous-classes

79
00:03:39,339 --> 00:03:43,322
par exemple, si l'on imagine 
avoir une classe très générale

80
00:03:43,322 --> 00:03:47,260
qui représente des figures
géométriques fermées, quelconques.

81
00:03:47,260 --> 00:03:49,732
À ce moment là, au niveau de cette classe

82
00:03:49,732 --> 00:03:52,313
il va être assez difficile de définir

83
00:03:52,313 --> 00:03:54,314
comment calculer la surface.

84
00:03:54,314 --> 00:03:56,756
Calculer la surface 
d'une figure géométrique quelconque,

85
00:03:56,756 --> 00:03:59,745
est certainement 
quelque chose de difficile à définir ;

86
00:03:59,745 --> 00:04:01,402
on ne saurait pas très bien le faire.

87
00:04:01,402 --> 00:04:03,557
Pourtant on sait 
que toutes figures fermées,

88
00:04:03,557 --> 00:04:06,419
-- par exemple, un cercle 
est une figure fermée --

89
00:04:06,419 --> 00:04:09,700
donc on sait qu'au niveau 
de toute les figures fermées spécifiques,

90
00:04:09,700 --> 00:04:13,550
on devrait quand même 
pouvoir définir la méthode « surface ».

91
00:04:13,550 --> 00:04:16,044
Donc, on imagine 
que toutes les figures fermées

92
00:04:16,044 --> 00:04:17,911
vont avoir une méthode « surface »

93
00:04:17,911 --> 00:04:21,026
même si on ne sait pas bien la définir 
au niveau le plus abstrait.

94
00:04:21,026 --> 00:04:24,042
Et pourtant, pour pousser le problème 
encore un peu plus loin

95
00:04:24,042 --> 00:04:26,932
on peut même imaginer 
que cette méthode « surface »

96
00:04:26,932 --> 00:04:29,700
soit utilisée au niveau 
le plus élevé,

97
00:04:29,700 --> 00:04:33,783
par exemple, pour calculer
un volume engendré

98
00:04:33,783 --> 00:04:37,937
sur une certaine hauteur 
par cette surface,

99
00:04:37,937 --> 00:04:40,647
à ce moment là ce volume engendré,

100
00:04:40,647 --> 00:04:43,857
suivant cette hauteur,
par cette figure géométrique,

101
00:04:43,857 --> 00:04:47,528
serait défini par le produit de la hauteur

102
00:04:47,528 --> 00:04:51,673
multiplié par la surface 
de la figure fermée.

103
00:04:51,673 --> 00:04:54,169
Donc on pourrait même 
faire appel à cette méthode

104
00:04:54,169 --> 00:04:57,105
même si on ne sait pas très bien
comment la définir

105
00:04:57,105 --> 00:04:59,280
au plus haut niveau, elle serait définie

106
00:04:59,280 --> 00:05:02,208
pour tous les exemples concrets
de figures fermées.

107
00:05:02,208 --> 00:05:04,429
Et donc la bonne façon de faire ceci,

108
00:05:04,429 --> 00:05:07,117
une méthode que l'on sait 
qui doit exister

109
00:05:07,117 --> 00:05:10,117
mais que l'on ne sait pas 
forcement bien définir

110
00:05:10,117 --> 00:05:11,931
au niveau d'une super-classe,

111
00:05:11,931 --> 00:05:14,535
cette façon de faire 
c'est d'introduire la méthode

112
00:05:14,535 --> 00:05:16,781
comme une méthode abstraite.

113
00:05:16,781 --> 00:05:19,890
Illustrons encore ce concept 
de méthodes abstraites

114
00:05:19,890 --> 00:05:23,088
sur un autre exemple 
et revenons donc à nos jeux

115
00:05:23,088 --> 00:05:26,375
avec des personnages où nous avons donc

116
00:05:26,375 --> 00:05:28,695
des guerriers, qui sont des personnages,

117
00:05:28,695 --> 00:05:30,402
des magiciens, qui sont des personnages,

118
00:05:30,402 --> 00:05:32,135
des voleurs etc.

119
00:05:32,135 --> 00:05:36,907
La classe « Jeu » contiendrait bien sûr
plusieurs personnages,

120
00:05:36,907 --> 00:05:40,358
on a décidé ici de les mettre 
dans un tableau dynamique de personnages

121
00:05:40,358 --> 00:05:42,453
et imaginons que dans le jeu on souhaite

122
00:05:42,453 --> 00:05:45,481
afficher l'ensemble des personnages

123
00:05:45,481 --> 00:05:47,640
donc, on ferait bien sûr une boucle

124
00:05:47,640 --> 00:05:50,159
qui parcoure l'ensemble des personnages

125
00:05:50,159 --> 00:05:52,623
qui parcourt ce tableau « persos » ici,

126
00:05:52,623 --> 00:05:55,812
et pour chacun des personnages

127
00:05:55,812 --> 00:05:58,218
on afficherait ce personnage.

128
00:05:58,218 --> 00:06:02,413
Le problème c'est comment afficher 
un personnage générique ?

129
00:06:02,413 --> 00:06:04,576
On ne sait pas afficher 
un personnage générique

130
00:06:04,576 --> 00:06:06,577
on sait certainement afficher un guerrier

131
00:06:06,577 --> 00:06:08,821
on sait certainement afficher un magicien,

132
00:06:08,821 --> 00:06:10,634
afficher un voleur

133
00:06:10,634 --> 00:06:14,572
donc chacune des sous-classes spécifiques
sait comment s'afficher

134
00:06:14,572 --> 00:06:16,769
mais par contre, 
au niveau général d'un personnage

135
00:06:16,769 --> 00:06:18,924
on ne sait pas forcement l'afficher,

136
00:06:18,924 --> 00:06:22,720
par contre, on sait qu'on en a besoin
ici, au niveau très général du jeu,

137
00:06:22,720 --> 00:06:25,196
de pouvoir afficher les personnages.

138
00:06:25,196 --> 00:06:27,135
Donc comment faire ?

139
00:06:27,135 --> 00:06:29,860
Bien sûr si on ne fait rien 
au niveau de la classe « Personnage »,

140
00:06:29,860 --> 00:06:31,861
si on ne définit pas la méthode 
« afficher » dans « Personnage »

141
00:06:31,861 --> 00:06:35,683
alors le code « afficher »
de « Jeu » ne compilera pas

142
00:06:35,683 --> 00:06:38,966
puisque ici on appelle bien 
la méthode « afficher » d'un personnage

143
00:06:38,966 --> 00:06:40,838
et le compilateur 
ne saurait pas quoi faire

144
00:06:40,838 --> 00:06:42,680
il nous donnerait donc une erreur.

145
00:06:42,692 --> 00:06:46,185
On doit donc, pour pouvoir écrire ceci 
au niveau global du jeu,

146
00:06:46,185 --> 00:06:50,143
on doit mettre une méthode « afficher »
dans chaque classe « Personnage ».

147
00:06:50,143 --> 00:06:52,873
De plus, on aimerait imposer
à chacune des sous-classes,

148
00:06:52,873 --> 00:06:54,918
des guerriers, des magiciens de s'afficher

149
00:06:54,918 --> 00:06:57,544
avec leurs propres méthodes « afficher »,

150
00:06:57,544 --> 00:06:58,645
d'avoir une méthode spécifique

151
00:06:58,645 --> 00:07:01,490
et que ce soit cette méthode 
spécifique qui soit appelée

152
00:07:01,490 --> 00:07:04,721
dans l'appel général
ici au niveau du jeu.

153
00:07:04,721 --> 00:07:08,611
Donc on veut effectivement forcer 
d'avoir une méthode spécifique

154
00:07:08,611 --> 00:07:11,572
au niveau des classes et que 
cette méthode soit polymorphique.

155
00:07:11,572 --> 00:07:13,281
Mais comment faire si on ne sait pas,

156
00:07:13,281 --> 00:07:16,933
supposons qu'on ne sache pas afficher
un personnage générique,

157
00:07:16,933 --> 00:07:19,035
et de plus, comment imposer

158
00:07:19,035 --> 00:07:21,741
que cette méthode « afficher », 
soit redéfinie ?

159
00:07:21,741 --> 00:07:25,033
Forcer la redéfinition 
dans les sous-classes ?

160
00:07:25,033 --> 00:07:28,420
Une première solution 
pour le premier problème :

161
00:07:28,420 --> 00:07:31,855
comment définir l'affichage 
pour un personnage générique

162
00:07:31,855 --> 00:07:35,332
serait d'avoir une méthode quelconque
définie arbitrairement,

163
00:07:35,332 --> 00:07:38,042
par exemple, supposons ici 
qu'arbitrairement

164
00:07:38,042 --> 00:07:40,290
on définisse que l'affichage 
générique d'un personnage

165
00:07:40,290 --> 00:07:43,353
c'est de ne rien afficher.

166
00:07:43,353 --> 00:07:46,228
Cette solution c'est vraiment 
une très très mauvaise idée

167
00:07:46,228 --> 00:07:49,177
parce que d'abord c'est
un mauvais modèle de la réalité,

168
00:07:49,177 --> 00:07:52,595
les personnages 
ne s'affichent pas comme du vide

169
00:07:52,595 --> 00:07:55,091
donc ça ne correspond à rien,

170
00:07:55,091 --> 00:07:57,276
l'affichage est incorrect, et en plus

171
00:07:57,276 --> 00:08:00,500
l'affichage serait incorrect
si une sous-classe

172
00:08:00,500 --> 00:08:03,122
oubliait de redéfinir la méthode,

173
00:08:03,122 --> 00:08:05,203
donc on aurait des personnages 
qui ne s'affichent pas,

174
00:08:05,203 --> 00:08:08,386
des personnages fantômes 
ce qui est un peu embêtant pour le jeu.

175
00:08:08,386 --> 00:08:11,250
De plus, cette solution ne répond pas 
au deuxième problème,

176
00:08:11,250 --> 00:08:14,364
elle n'oblige pas 
les sous-classes à redéfinir

177
00:08:14,364 --> 00:08:16,965
leurs propres méthodes « afficher ».

178
00:08:16,965 --> 00:08:19,399
La seule bonne solution donc

179
00:08:19,402 --> 00:08:23,014
c'est de signaler que la méthode 
« afficher » doit exister

180
00:08:23,014 --> 00:08:25,513
et doit être définie dans chacune 
des sous-classes

181
00:08:25,513 --> 00:08:28,232
c'est ce qu'on appelle 
une méthode abstraite.

182
00:08:28,232 --> 00:08:31,058
Voila donc un deuxième exemple,

183
00:08:31,058 --> 00:08:33,212
j'espère qu'il vous a 
bien fait comprendre

184
00:08:33,212 --> 00:08:36,194
l’intérêt d'avoir 
des méthodes abstraites

185
00:08:36,194 --> 00:08:40,847
comme ça, définies au niveau 
de super-classes de classes abstraites.

186
00:08:40,847 --> 00:08:44,597
Voyons maintenant comment tout ceci 
s'écrit concrètement en java.

187
00:08:44,597 --> 00:08:46,814
Pour avoir une méthode abstraite en java

188
00:08:46,814 --> 00:08:51,819
on fait simplement précéder son entête 
du mot réservé « abstract »

189
00:08:51,819 --> 00:08:54,505
et on termine cet entête
tout simplement

190
00:08:54,505 --> 00:08:56,457
avec un point virgule ( ; )
sans mettre de corps,

191
00:08:56,457 --> 00:08:57,864
sans mettre de définition

192
00:08:57,864 --> 00:09:00,295
parce qu'une méthode abstraite 
n'a pas de définition

193
00:09:00,295 --> 00:09:02,519
dans la classe où elle a été introduite,

194
00:09:02,519 --> 00:09:05,380
elle sert simplement 
à imposer aux sous-classes

195
00:09:05,380 --> 00:09:06,969
que l'on ne veut plus être abstraites,

196
00:09:06,969 --> 00:09:08,640
on reviendra sur ce point dans un instant,

197
00:09:08,640 --> 00:09:12,820
de redéfinir justement 
cette méthode abstraite héritée

198
00:09:12,820 --> 00:09:16,346
et elle doit être contenue 
dans une classe abstraite

199
00:09:16,346 --> 00:09:18,378
sur laquelle nous allons revenir 
dans un instant,

200
00:09:18,378 --> 00:09:20,452
et une classe abstraite c'est une classe

201
00:09:20,452 --> 00:09:25,008
qui aura aussi le mot clé « abstract »
dans son entête.

202
00:09:25,008 --> 00:09:26,823
Donc par exemple ici,

203
00:09:26,823 --> 00:09:29,763
la classe « Personnage » on veut
que ce soit une classe abstraite

204
00:09:29,763 --> 00:09:33,423
donc on va rajouter le mot clé « abstract »
comme ça dans l'entête,

205
00:09:33,423 --> 00:09:35,788
au début de l'entête de la classe

206
00:09:35,788 --> 00:09:38,850
et elle contiendra donc ici, 
une méthode abstraite,

207
00:09:38,850 --> 00:09:44,402
on a rajouté donc ici 
« abstract afficher » par exemple.

208
00:09:44,402 --> 00:09:49,179
Si je reprends donc notre autre exemple 
avec les figures fermées

209
00:09:49,179 --> 00:09:52,367
je vous rappelle que l'idée 
c'était d'avoir des figures fermées

210
00:09:52,367 --> 00:09:54,932
pour définir une méthode « surface »

211
00:09:54,932 --> 00:09:57,560
mais nous ne savons pas définir 
cette méthode « surface »

212
00:09:57,560 --> 00:10:01,489
de façon générale
au niveau de la classe « FigureFermee »

213
00:10:01,489 --> 00:10:05,047
et donc cette méthode « surface »
devient une méthode abstraite

214
00:10:05,047 --> 00:10:08,772
et la classe « FigureFermee »
devient une classe abstraite

215
00:10:08,772 --> 00:10:12,879
et on imagine donc avoir 
des sous-classes concrètes

216
00:10:12,879 --> 00:10:16,120
de figures fermées 
comme par exemple un cercle.

217
00:10:16,120 --> 00:10:19,321
Et donc la classe « FigureFermee »
c'est une classe abstraite

218
00:10:19,321 --> 00:10:21,987
on rajoute le mot clé « abstract » ici

219
00:10:21,987 --> 00:10:24,455
qui contient donc deux méthodes,

220
00:10:24,455 --> 00:10:27,001
on en a rajouté une autre 
de plus, ici, abstraite.

221
00:10:27,001 --> 00:10:30,518
La méthode « surface » dont nous parlions 
tout au début dans notre exemple

222
00:10:30,518 --> 00:10:33,450
à laquelle on a donc 
rajouté le mot clé « abstract »

223
00:10:33,450 --> 00:10:36,330
et, admettons, on pourrait aussi imaginer

224
00:10:36,330 --> 00:10:38,330
qu'on a une méthode « perimetre »

225
00:10:38,330 --> 00:10:40,770
qui renvoie le périmètre
d'une figure fermée

226
00:10:40,770 --> 00:10:43,329
et on ne sait pas plus le définir 
de façon générale

227
00:10:43,329 --> 00:10:45,107
au niveau des figures fermées

228
00:10:45,107 --> 00:10:47,860
donc c'est aussi une méthode abstraite.

229
00:10:47,860 --> 00:10:51,302
Je rappelle que l'on peut utiliser,
dans une classe abstraite

230
00:10:51,302 --> 00:10:55,242
une méthode abstraite 
dans une méthode non-abstraite,

231
00:10:55,242 --> 00:10:56,854
donc par exemple ici,

232
00:10:56,854 --> 00:10:59,644
le calcul du volume engendré
par la surface de la figure fermée

233
00:10:59,644 --> 00:11:02,526
sur une hauteur donnée en paramètre ici

234
00:11:02,526 --> 00:11:06,131
serait le produit de la hauteur 
par la valeur retournée

235
00:11:06,131 --> 00:11:10,490
par la méthode abstraite ici « surface », 
ceci est tout à fait possible.

236
00:11:10,490 --> 00:11:13,411
Une classe abstraite donc,

237
00:11:13,411 --> 00:11:16,776
qualifiée par le mot clé « abstract »
au début de son entête :

238
00:11:16,776 --> 00:11:18,398
« abstract class quelque-chose »

239
00:11:18,398 --> 00:11:21,176
est une classe 
qui ne peut pas être instanciée

240
00:11:21,176 --> 00:11:24,215
et qui contient au moins, 
une méthode abstraite,

241
00:11:24,215 --> 00:11:26,126
c'est pour ça qu'on appelle ceci 
une classe abstraite

242
00:11:26,126 --> 00:11:28,760
par ce que on ne peut pas créer d'instance

243
00:11:28,760 --> 00:11:31,949
donc par exemple, 
si je voulais écrire « FigureFermee »,

244
00:11:31,949 --> 00:11:36,042
déclarer une instance de figure fermée

245
00:11:36,042 --> 00:11:39,939
donc par exemple, « fig = new ... »

246
00:11:39,939 --> 00:11:42,497
et puis avec un constructeur 
de figures fermées,

247
00:11:42,497 --> 00:11:46,426
je ne peux pas faire ceci, le compilateur 
va m'interdire de faire ceci

248
00:11:46,426 --> 00:11:50,888
parce que « FigureFermee »
est une classe abstraite : « abstract class »

249
00:11:50,888 --> 00:11:53,804
et donc je ne peux pas créer d'instance.

250
00:11:53,804 --> 00:11:55,952
Et les sous-classes 
d'une classe abstraite

251
00:11:55,952 --> 00:11:58,730
restent abstraites tant qu'elles 
ne redéfinissent pas

252
00:11:58,730 --> 00:12:00,599
toutes les méthodes abstraites,

253
00:12:00,599 --> 00:12:02,322
c'est à dire, elles restent abstraites

254
00:12:02,322 --> 00:12:05,045
tant qu'il reste au moins 
une méthode abstraite héritée

255
00:12:05,045 --> 00:12:06,987
qui n'a pas été définie.

256
00:12:06,987 --> 00:12:09,653
Prenons un exemple,

257
00:12:09,653 --> 00:12:12,205
je reviens à l'exemple du jeu 
et des personnages,

258
00:12:12,205 --> 00:12:14,295
« Personnage » est une classe abstraite

259
00:12:14,295 --> 00:12:17,484
qui contient 
une méthode abstraite « afficher »

260
00:12:17,484 --> 00:12:20,412
et donc « Guerrier »
est une sous-classe de « Personnage »

261
00:12:20,412 --> 00:12:23,150
et imaginons que « Guerrier » oublie

262
00:12:23,150 --> 00:12:26,720
de redéfinir la méthode abstraite 
« afficher » de « Personnage ».

263
00:12:26,720 --> 00:12:28,563
Alors, si je fais la chose suivante :

264
00:12:28,563 --> 00:12:30,694
donc créer un nouveau jeu 
et essayer d'ajouter

265
00:12:30,694 --> 00:12:32,945
un nouveau guerrier au jeu,

266
00:12:32,945 --> 00:12:37,011
si « Guerrier » oublie de redéfinir 
la méthode abstraite de « Personnage »

267
00:12:37,011 --> 00:12:39,823
alors « Guerrier » reste une classe abstraite

268
00:12:39,823 --> 00:12:42,955
et je ne pourrais pas, comme ça, 
créer une instance

269
00:12:42,955 --> 00:12:44,836
de cette classe abstraite « Personnage ».

270
00:12:44,836 --> 00:12:47,601
Si j'essaye de faire ceci, 
j'aurais le message :

271
00:12:47,601 --> 00:12:50,935
« Guerrier is abstract ; 
cannot be instantiated ».

272
00:12:50,935 --> 00:12:55,102
Je ne peux pas créer d'instance 
de la classe abstraite « Guerrier »

273
00:12:55,102 --> 00:12:57,327
qui est restée abstraite 
parce qu'elle n'a pas

274
00:12:57,327 --> 00:12:59,800
redéfini la méthode « afficher ».

275
00:12:59,800 --> 00:13:03,421
Si je prends un second exemple 
sur les figures fermées,

276
00:13:03,421 --> 00:13:06,869
imaginons qu'on a toujours 
cette classe abstraite « FigureFermee »

277
00:13:06,869 --> 00:13:10,829
avec les méthodes abstraites « surface » et...

278
00:13:10,829 --> 00:13:14,789
( sans paroles )

279
00:13:14,789 --> 00:13:18,751
« perimetre » qui est aussi abstraite

280
00:13:18,751 --> 00:13:21,762
et donc supposons qu'on fasse 
une classe comme ça, « Cercle »

281
00:13:21,762 --> 00:13:24,312
qui hérite de « FigureFermee ».

282
00:13:24,312 --> 00:13:26,444
Cette classe « Cercle » redéfinit

283
00:13:26,444 --> 00:13:29,671
la méthode « surface » ici, de façon concrète

284
00:13:29,671 --> 00:13:31,414
de façon non-abstraite

285
00:13:31,414 --> 00:13:34,273
-- par exemple, PI fois 
le rayon au carré --

286
00:13:34,273 --> 00:13:38,624
et redéfinit aussi la méthode 
« perimetre » de façon concrète.

287
00:13:38,624 --> 00:13:41,381
Elle a donc redéfini
les deux méthodes abstraites

288
00:13:41,381 --> 00:13:44,182
héritées de sa super-classe abstraite 
« FigureFermee »

289
00:13:44,182 --> 00:13:47,857
et donc, cette classe « Cercle »
n'est plus une classe abstraite,

290
00:13:47,857 --> 00:13:51,337
on peut créer des instances de « Cercle »,

291
00:13:51,337 --> 00:13:53,774
ceci est maintenant possible

292
00:13:53,774 --> 00:13:55,650
puisque la classe « Cercle »
n'est plus abstraite.

293
00:13:55,650 --> 00:13:58,043
Par contre, imaginons donc 
une classe « Polygone »

294
00:13:58,043 --> 00:14:01,483
qui hérite aussi 
de la classe « FigureFermee »

295
00:14:01,483 --> 00:14:05,651
mais qui ne redéfinit que, 
par exemple, le périmètre,

296
00:14:05,651 --> 00:14:09,511
en supposant qu'on sait calculer 
le périmètre d'un polygone

297
00:14:09,511 --> 00:14:14,042
comme étant la somme 
des longueurs de ses différents cotés

298
00:14:14,042 --> 00:14:15,983
donc ça on sait parfaitement le définir

299
00:14:15,983 --> 00:14:18,512
mais on ne saurait pas forcement 
définir de façon générale

300
00:14:18,512 --> 00:14:22,377
la surface d'un polygone, 
et donc la classe « Polygone »

301
00:14:22,377 --> 00:14:25,317
ne redéfinit que 
la méthode abstraite « perimetre »

302
00:14:25,317 --> 00:14:28,793
mais ne redéfinit pas 
la méthode abstraite « surface »

303
00:14:28,793 --> 00:14:32,400
et donc la classe « Polygone »
reste une classe abstraite.

304
00:14:32,400 --> 00:14:36,180
Je ne peux pas 
créer d'instance de « Polygone ».

305
00:14:36,180 --> 00:14:39,276
Ceci n'est pas possible parce que

306
00:14:39,276 --> 00:14:41,569
« Polygone » est une classe abstraite

307
00:14:41,569 --> 00:14:45,399
puisqu'elle n'a pas redéfini 
la méthode abstraite « surface ».

308
00:14:45,399 --> 00:14:48,619
D'ailleurs il manque 
un petit quelque chose

309
00:14:48,619 --> 00:14:51,551
pour que le code de « Polygone »
donné ici soit correct,

310
00:14:51,551 --> 00:14:53,582
sauriez-vous dire quoi ?

311
00:14:55,062 --> 00:14:58,549
Voila, ceci conclut cette séquence 
sur les méthodes abstraites

312
00:14:58,549 --> 00:15:00,640
et les classe abstraites.

313
00:15:00,640 --> 00:15:03,144
La prochaine séquence s'intéressera 
à différents compléments

314
00:15:03,144 --> 00:15:05,842
sur le polymorphisme, les constructeurs,

315
00:15:05,842 --> 00:15:07,846
la super-classe « Object », etc.
