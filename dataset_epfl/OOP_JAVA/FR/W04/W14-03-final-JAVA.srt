1
00:00:03,918 --> 00:00:07,198
Cette séquence vidéo a pour but de
présenter quelques compléments

2
00:00:07,198 --> 00:00:10,658
sur le modificateur « final », notamment
dans le cadre de l'héritage.

3
00:00:10,658 --> 00:00:13,271
Le modificateur « final » peut s'appliquer
à des variables pour indiquer

4
00:00:13,271 --> 00:00:15,884
qu'elles ne doivent pas être modifiées,

5
00:00:15,884 --> 00:00:18,498
peut s'appliquer à des classes 
pour indiquer qu'elles

6
00:00:18,498 --> 00:00:21,918
ne peuvent pas être étendues 
et peut être appliqué à des méthodes

7
00:00:21,918 --> 00:00:24,968
pour indiquer qu'elles ne peuvent pas
être redéfinies dans le cadre

8
00:00:24,968 --> 00:00:26,688
d'une relation d'héritage.

9
00:00:26,688 --> 00:00:29,838
Il est très utile pour les variables
et moins courant

10
00:00:29,838 --> 00:00:31,728
pour les méthodes et les classes.

11
00:00:31,728 --> 00:00:35,728
Le modificateur « final » a déjà été présenté
pour les variables dans les grandes lignes

12
00:00:35,728 --> 00:00:39,728
dans le cadre de notre MOOC précédant
sur l'introduction à la programmation

13
00:00:39,728 --> 00:00:40,688
en Java.

14
00:00:40,688 --> 00:00:44,408
Nous allons donc, dans ce qui suit,
commencer par son application

15
00:00:44,408 --> 00:00:48,018
dans un contexte nouveau, à savoir
l'application de « final » aux méthodes

16
00:00:48,018 --> 00:00:49,168
et aux classes.

17
00:00:49,900 --> 00:00:51,900
Commençons par les « méthodes final ».

18
00:00:51,900 --> 00:00:54,930
Une « méthode final » est une méthode
déclarée comme telle

19
00:00:54,930 --> 00:00:57,710
au moment de sa définition dans la classe.

20
00:00:57,710 --> 00:01:00,960
Donc, il suffit de lui imposer
le modificateur « final ».

21
00:01:00,960 --> 00:01:04,500
Ce que cela signifie 
est que la méthode en question

22
00:01:04,500 --> 00:01:06,960
ne peut pas être redéfinie 
dans une sous-classe.

23
00:01:06,960 --> 00:01:10,140
Reprenons l'exemple avec notre
hiérarchie de « Personnage », supposons que

24
00:01:10,140 --> 00:01:14,140
l'on souhaite doter notre hiérarchie d'une
méthode vieillir et que l'on souhaite

25
00:01:14,140 --> 00:01:17,750
faire en sorte que cette méthode soit
toujours la même

26
00:01:17,750 --> 00:01:19,350
pour tous les personnages 
possibles du jeu.

27
00:01:19,350 --> 00:01:22,890
Par exemple, la méthode vieillir
consisterait à décrémenter d'une unité à

28
00:01:22,890 --> 00:01:25,610
chaque fois la durée de vie du personnage.

29
00:01:25,610 --> 00:01:29,760
En définissant comme « final » la méthode
vieillir dans la super-classe « Personnage »,

30
00:01:29,760 --> 00:01:33,520
on empêche toute sous-classe de
« Personnage » comme par exemple

31
00:01:33,520 --> 00:01:37,520
la sous-classe « Sorcier » de redéfinir 
cette méthode de façon spécifique.

32
00:01:38,263 --> 00:01:42,263
Si nous essayons par exemple de faire
vieillir notre « Sorcier » un peu

33
00:01:42,263 --> 00:01:47,233
plus vite que les autres personnages, 
en redéfinissant la méthode vieillir

34
00:01:47,233 --> 00:01:48,463
dans cette sous-classe,

35
00:01:55,615 --> 00:01:59,615
et bien, on aura un message d'erreur
du compilateur nous indiquant que

36
00:01:59,615 --> 00:02:04,585
ceci n'est pas licite en raison du fait
que la méthode vieillir est définie

37
00:02:04,585 --> 00:02:06,825
comme « final » dans la super-classe.

38
00:02:07,138 --> 00:02:10,298
Le modificateur « final » peut aussi
s'appliquer aux classes.

39
00:02:10,298 --> 00:02:14,298
Dans ce cas, il indique qu'il est
impossible de définir une sous-classe

40
00:02:14,298 --> 00:02:18,298
à cette classe, donc impossible
d'étendre la classe par héritage.

41
00:02:18,706 --> 00:02:22,706
Déclarer une classe comme « final » se fait
en mettant le mot réservé « final »

42
00:02:22,706 --> 00:02:26,706
devant la déclaration de la classe qui
pour le reste se rédige

43
00:02:26,706 --> 00:02:28,536
comme nous avons l'habitude 
de le faire.

44
00:02:28,536 --> 00:02:30,959
Dans le cadre de notre exemple,

45
00:02:30,959 --> 00:02:32,602
si l'on souhaite 
pour une raison ou une autre

46
00:02:32,602 --> 00:02:35,806
que la classe « Sorcier » n'ait jamais de
sous-classe, alors il suffit de la

47
00:02:35,806 --> 00:02:41,126
déclarer comme « final », ce qui signifie que
si on tente par la suite de créer

48
00:02:41,126 --> 00:02:45,956
une classe qui étend la classe « Sorcier »,
donc qui hérite de la classe « Sorcier »,

49
00:02:45,956 --> 00:02:48,936
et bien, nous aurons 
un message d'erreur

50
00:02:51,015 --> 00:02:52,145
du compilateur.

51
00:02:55,320 --> 00:02:58,560
Les méthodes des « classes final » sont
a priori un peu agaçantes,

52
00:02:58,560 --> 00:03:01,760
en effet, elles brident la liberté du
programmeur d'extensions qui souhaiterait

53
00:03:01,760 --> 00:03:05,650
étendre une hiérarchie existante ou
redéfinir des méthodes héritées

54
00:03:05,650 --> 00:03:06,510
de plus haut.

55
00:03:06,510 --> 00:03:11,020
Par exemple, la classe prédéfinie « String »
de l'API de Java est en fait déclarée

56
00:03:11,020 --> 00:03:14,240
comme « final », ce qui signifie

57
00:03:14,240 --> 00:03:17,460
que vous ne pourrez jamais écrire 
une classe « MyString »

58
00:03:17,460 --> 00:03:20,680
héritant de « String » et qui améliore
éventuellement certaines méthodes

59
00:03:20,680 --> 00:03:23,330
par redéfinition ou qui
en ajoute d'autres.

60
00:03:23,330 --> 00:03:27,980
Ceci à néanmoins pour avantage de fixer
une fois pour toute le comportement

61
00:03:27,980 --> 00:03:31,000
d'une classe ou d'une méthode.

62
00:03:31,220 --> 00:03:34,630
Supposons en effet qu'il soit possible
de faire ceci, c'est-à-dire possible

63
00:03:34,630 --> 00:03:38,630
de créer une sous-classe « MyString »
de la classe prédéfinie « String ».

64
00:03:38,968 --> 00:03:43,578
Supposons que le programmeur de la
classe « MyString » décide de redéfinir

65
00:03:43,578 --> 00:03:47,578
dans sa sous-classe des méthodes
existantes dans la classe « String »,

66
00:03:47,578 --> 00:03:52,538
par exemple, la méthode substring qui
permet d'extraire une sous-chaîne

67
00:03:53,716 --> 00:03:55,236
de la chaîne de caractères.

68
00:03:55,236 --> 00:03:59,236
En fait, rien n'oblige ce programmeur,
même si c'est tout à fait déconseillé

69
00:03:59,236 --> 00:04:04,146
de le faire, de respecter la sémantique
connue de substring.

70
00:04:04,146 --> 00:04:07,986
Donc, il peut programmer une méthode
substring qui aurait un comportement

71
00:04:07,986 --> 00:04:11,986
très différent de celle présente
dans la classe « String ».

72
00:04:11,986 --> 00:04:14,926
C'est évidemment quelque chose à ne
pas faire, quelque chose de mauvais,

73
00:04:14,926 --> 00:04:18,926
mais c'est tout à fait possible, il n'y a
pas de garde-fous pour l'en empêcher.

74
00:04:18,926 --> 00:04:22,926
Il devient alors possible par exemple, de
déclarer une variable de type « String »

75
00:04:27,272 --> 00:04:31,842
et de lui affecter un objet
de type « MyString »,

76
00:04:34,118 --> 00:04:37,098
puis d'appliquer la méthode substring

77
00:04:39,481 --> 00:04:42,111
à cet objet, puisque nous avons

78
00:04:42,111 --> 00:04:45,181
systématiquement la résolution dynamique
des liens en Java, c'est la méthode

79
00:04:45,181 --> 00:04:49,181
substring de la classe « MyString » qui va
s'appliquer ici donnant lieu à

80
00:04:49,181 --> 00:04:53,181
un comportement 
qui peut être inattendu.

81
00:04:53,747 --> 00:04:56,847
Quelqu'un qui lirait ce code pourrait
avoir l'impression d'être entrain

82
00:04:56,847 --> 00:04:59,967
de travailler avec des « String » et
s'attendre à un comportement

83
00:04:59,967 --> 00:05:02,297
bien particulier
pour la méthode substring

84
00:05:02,297 --> 00:05:04,627
et ce comportement 
ne sera pas présent

85
00:05:04,627 --> 00:05:06,957
en raison de cette redéfinition.

86
00:05:07,279 --> 00:05:11,279
Fixez donc le comportement d'une
classe en la définissant comme « final »,

87
00:05:11,279 --> 00:05:15,279
comme c'est le cas de la classe « String »
permet d'éviter ce genre de dérives.

88
00:05:15,698 --> 00:05:18,718
Ce garde-fou nous fait quand même
perdre certaines libertés qui pourraient

89
00:05:18,718 --> 00:05:21,678
être intéressantes, par exemple le
programmeur d'extensions pourrait

90
00:05:21,678 --> 00:05:26,638
choisir de redéfinir la méthode substring
en améliorant son algorithme,

91
00:05:26,638 --> 00:05:30,638
en préservant sa sémantique, c'est-à-dire
que le comportement reste identique

92
00:05:30,638 --> 00:05:32,658
à celui de la classe « String ».
Malheureusement,

93
00:05:32,658 --> 00:05:35,788
ceci ne sera pas possible,
la classe « String » étant « final ».

94
00:05:35,788 --> 00:05:38,838
Voilà, vous connaissez maintenant la
signification du mot réservé « final »

95
00:05:38,838 --> 00:05:41,278
lorsqu'il s'applique à une
méthode ou à une classe.

96
00:05:41,278 --> 00:05:44,408
Vous la connaissez également
probablement pour les variables.

97
00:05:44,408 --> 00:05:48,408
Nous allons revenir sur ce point
principalement lorsque les variables

98
00:05:48,408 --> 00:05:50,778
contiennent une référence vers un objet.

99
00:05:50,778 --> 00:05:53,601
Le modificateur « final » s'applique 
également aux variables,

100
00:05:53,601 --> 00:05:56,424
que ce soit des variables locales,

101
00:05:56,424 --> 00:05:59,248
des paramètres de méthodes ou ce
qu'on appelle des « variables d'instances »,

102
00:05:59,248 --> 00:06:01,308
c'est-à-dire les attributs d'une classe.

103
00:06:01,308 --> 00:06:05,308
Il devient alors impossible d'affecter
une valeur plus d'une fois

104
00:06:05,308 --> 00:06:06,338
à cette variable.

105
00:06:06,338 --> 00:06:09,004
Dans le cas particulier où c'est un
attribut qui est « final »,

106
00:06:09,004 --> 00:06:11,670
alors il peut être initialisé

107
00:06:11,670 --> 00:06:14,338
dans le constructeur de la
classe mais ne doit plus être modifié

108
00:06:14,338 --> 00:06:15,438
par la suite.

109
00:06:15,438 --> 00:06:18,318
Par exemple, si dans une classe
donnée on définit

110
00:06:20,972 --> 00:06:22,562
un attribut comme « final »,

111
00:06:35,734 --> 00:06:36,814
comme ceci,

112
00:06:37,970 --> 00:06:42,350
alors il est possible éventuellement
de l'initialiser à ce niveau,

113
00:06:44,381 --> 00:06:45,851
au moment de sa déclaration.

114
00:06:45,851 --> 00:06:49,031
Il est également possible 
éventuellement de le définir

115
00:06:49,031 --> 00:06:52,421
dans les constructeurs de la classe, 
n'importe quel constructeur,

116
00:07:07,196 --> 00:07:11,196
comme ceci, mais attention c'est deux
options ne peuvent pas cohabiter,

117
00:07:11,196 --> 00:07:12,396
c'est l'un ou l'autre.

118
00:07:12,396 --> 00:07:15,216
Donc par exemple, je peux
choisir uniquement

119
00:07:16,601 --> 00:07:20,601
l'option avec le constructeur et dans ce
cas-là le programme correct ressemblera

120
00:07:20,601 --> 00:07:21,661
à ceci.

121
00:07:21,858 --> 00:07:25,858
Si je retiens cette option, tout
constructeur de la classe devra comporter

122
00:07:25,858 --> 00:07:30,958
une ligne d'initialisation de cet « attribut
final », autrement il y aura un message

123
00:07:30,958 --> 00:07:34,088
d'erreur du compilateur 
indiquant que

124
00:07:34,088 --> 00:07:36,378
cette « variable final » 
n'a pas été initialisée.

125
00:07:36,378 --> 00:07:40,378
Une fois initialisé, cet « attribut final »,
comme pour une « variable final » quelconque

126
00:07:40,378 --> 00:07:44,378
ne peut plus être modifié, c'est-à-dire
que ici par exemple si on imagine que

127
00:07:44,378 --> 00:07:52,008
dans le constructeur ici un peu plus loin
on essaie de changer la valeur

128
00:07:52,008 --> 00:07:58,148
de cet attribut, et bien on aura un
message d'erreur du compilateur.

129
00:07:58,148 --> 00:08:02,778
Mais attention, il faut bien comprendre
que lorsqu'une « variable final » contient

130
00:08:02,778 --> 00:08:07,008
la référence vers un objet, alors on ne
peut pas affecter une nouvelle valeur

131
00:08:07,008 --> 00:08:12,388
à cette variable certes, mais rien
n'empêche de modifier l'objet référencé

132
00:08:12,388 --> 00:08:13,858
via cette variable.

133
00:08:14,600 --> 00:08:16,750
Examinons ce point sur un exemple.

134
00:08:17,148 --> 00:08:20,278
Donc, nous avons ici le cas 
d'une classe « Conteneur »

135
00:08:20,278 --> 00:08:23,108
qui contient un attribut entier 
qui s'appelle valeur.

136
00:08:23,108 --> 00:08:27,108
La classe « Conteneur » dispose uniquement
d'une méthode public setValeur

137
00:08:27,108 --> 00:08:29,968
qui permet de modifier
la valeur de l'attribut.

138
00:08:29,968 --> 00:08:33,258
Nous avons ensuite un petit programme
principal qui déclare un objet de

139
00:08:33,258 --> 00:08:37,258
type « Conteneur » et qui affecte une
valeur à son attribut entier.

140
00:08:38,144 --> 00:08:42,144
La situation en mémoire après l'exécution
de cette ligne de code sera donc

141
00:08:42,144 --> 00:08:47,224
la suivante ; nous avons
dans la variable c une référence

142
00:08:47,224 --> 00:08:48,754
vers un objet de type « Conteneur »,

143
00:08:49,352 --> 00:08:53,482
dont l'attribut valeur vaut 42.

144
00:08:53,482 --> 00:08:57,482
Le programme principal appelle une
méthode modifier qui prend c

145
00:08:57,482 --> 00:08:58,752
en paramètre.

146
00:08:59,180 --> 00:09:06,280
La méthode modifier a pour particularité
que le conteneur passé en paramètre

147
00:09:06,280 --> 00:09:08,100
est déclaré comme « final ».

148
00:09:08,100 --> 00:09:14,090
On pourrait donc imaginer que « final »
signifie que l'objet passé en paramètre

149
00:09:14,090 --> 00:09:18,380
ne soit pas modifiable
dans la méthode modifier.

150
00:09:18,380 --> 00:09:24,300
Or, ça dépend ce qu'on entend par
modifiable, certes on ne peut pas modifier

151
00:09:25,737 --> 00:09:30,417
l'argument lui-même en lui affectant
une nouvelle référence, par contre l'objet

152
00:09:30,417 --> 00:09:35,567
référencé est tout à fait modifiable
via c, même si c est passé comme

153
00:09:35,567 --> 00:09:40,317
« paramètre final », ce qui signifie qu'au
terme de l'exécution de cette ligne,

154
00:09:40,317 --> 00:09:45,677
et bien, l'objet référencé aura
bel et bien été modifié.

155
00:09:45,677 --> 00:09:49,347
En clair, le fait que le paramètre
soit « final » empêche

156
00:09:51,102 --> 00:09:55,802
que la variable passée en argument
pointe vers un autre objet, donc ceci

157
00:09:55,802 --> 00:09:59,802
n'est pas possible, il n'est pas possible
de modifier la référence elle-même,

158
00:09:59,802 --> 00:10:05,492
par contre rien n'empêche de modifier
l'objet référencé via ce « paramètre final ».

159
00:10:06,134 --> 00:10:10,794
Ceci est évidemment valable pour toute
« variable final » contenant la référence

160
00:10:10,794 --> 00:10:15,204
vers un objet, que se soit un attribut,
une variable locale

161
00:10:15,204 --> 00:10:16,314
ou un paramètre de méthode.

162
00:10:16,314 --> 00:10:20,054
Donc concrètement, lorsqu'on affecte
un objet à une « variable final »,

163
00:10:20,054 --> 00:10:22,380
cela ne signifie pas que
l'objet est préservé

164
00:10:22,380 --> 00:10:24,696
de toute modification par l'extérieur,

165
00:10:24,696 --> 00:10:27,814
cela signifie simplement que la variable
ne peut référencer que cet objet.

166
00:10:27,814 --> 00:10:31,464
Enfin, un petit détail auquel
vous aurez peut-être été attentif,

167
00:10:31,464 --> 00:10:37,164
puisque Java n'utilise que le passage par
valeur et que donc tout paramètre

168
00:10:37,164 --> 00:10:41,004
ne peut être modifié à l'intérieur de la
méthode tout en préservant cette

169
00:10:41,004 --> 00:10:45,164
modification à l'extérieur de la méthode,
à quoi cela peut-il bien servir

170
00:10:45,164 --> 00:10:47,884
de déclarer ce paramètre comme « final » ?

171
00:10:47,884 --> 00:10:52,304
Alors en effet, la réponse est qu'il
s'agit d'un petit garde-fou syntaxique

172
00:10:52,304 --> 00:10:55,854
dans le cadre de cet exemple puisque 
de toute façon cela ne fait pas sens

173
00:10:55,854 --> 00:10:59,554
d'écrire ce genre de choses puisque le
paramètre n'est pas modifiable par

174
00:10:59,554 --> 00:11:02,844
une méthode, et bien, le fait de les
déclarer comme « final » si on essaie

175
00:11:02,844 --> 00:11:06,514
de faire ce genre de manipulation fera
réagir le compilateur, nous indiquera

176
00:11:06,514 --> 00:11:10,094
que quelque chose d'étrange se passe
à l'intérieur de notre méthode.

177
00:11:10,094 --> 00:11:14,094
Le fait de l'avoir déclarée comme « final »
permet au compilateur de nous alerter.

178
00:11:14,549 --> 00:11:18,549
Et ceci conclut notre petit complément
sur le modificateur « final » en Java.
