1
00:00:04,185 --> 00:00:06,206
Dans la séquence vidéo précédente, 
vous avez vu

2
00:00:06,206 --> 00:00:08,790
que lorsque l'on veut gérer 
les exceptions en Java

3
00:00:08,790 --> 00:00:11,305
on cherche à faire 
fondamentalement quatre choses.

4
00:00:11,305 --> 00:00:14,497
A signaler les erreurs aux endroits 
où elles se produisent.

5
00:00:14,497 --> 00:00:18,005
A marquer des endroits 
que l'on veut rendre réceptifs aux erreurs

6
00:00:18,005 --> 00:00:22,320
et leur associer, à chaque endroit, 
un moyen de gérer ces erreurs.

7
00:00:22,320 --> 00:00:26,217
Ça c'est vraiment un avantage 
de la gestion des exceptions.

8
00:00:26,217 --> 00:00:31,135
On sépare d'un côté 
la gestion des erreurs,

9
00:00:31,135 --> 00:00:34,677
de l'autre côté l'endroit 
où elle se produit.

10
00:00:34,677 --> 00:00:37,039
Enfin quatrième chose 
que l'on peut vouloir faire,

11
00:00:37,039 --> 00:00:41,094
c'est éventuellement faire le ménage 
après chaque bloc réceptif aux erreurs.

12
00:00:41,094 --> 00:00:43,883
On va donc naturellement 
avoir quatre mots du langage

13
00:00:43,883 --> 00:00:47,731
qui vont être dédiés à chacune 
de ces tâches élémentaires

14
00:00:47,731 --> 00:00:49,313
que l'on souhaite réaliser.

15
00:00:49,313 --> 00:00:52,100
Nous allons dans cette vidéo, 
présenter comment utiliser

16
00:00:52,100 --> 00:00:53,829
chacun de ces quatre mots tour à tour

17
00:00:53,829 --> 00:00:59,384
En commençant bien sûr par le mot clé
<i>throw</i> qui permet d'indiquer une erreur.

18
00:00:59,384 --> 00:01:02,425
On va dire que <i>throw</i> lance une exception.

19
00:01:03,443 --> 00:01:06,247
La syntaxe de <i>throw</i>
pour lancer une erreur,

20
00:01:06,247 --> 00:01:08,775
pour signaler une erreur est la suivante,

21
00:01:08,775 --> 00:01:11,382
c'est <i>throw</i> puis une exception.

22
00:01:11,382 --> 00:01:12,867
Qu'est-ce qu'une exception ?

23
00:01:12,867 --> 00:01:15,030
C'est un objet de type Exception.

24
00:01:15,030 --> 00:01:18,336
Le type Exception est 
un type qui existe dans l'api Java

25
00:01:18,336 --> 00:01:22,343
et qui est fourni 
par la bibliothèque <i>java.lang</i>

26
00:01:22,343 --> 00:01:25,827
qui contient de nombreuses sous-classes 
que nous allons présenter dans un instant.

27
00:01:26,117 --> 00:01:29,901
Donc une exception est 
un objet de type <i>exception</i>

28
00:01:29,901 --> 00:01:34,306
lequel lorsque l'instruction
throw est exécutée,

29
00:01:34,306 --> 00:01:36,491
est, entre guillemets, lancé.

30
00:01:36,491 --> 00:01:39,786
C'est à dire que l'on va avoir 
un mécanisme qui va créer un tel objet

31
00:01:39,786 --> 00:01:42,719
qui pourra être géré 
par les autres mots clés

32
00:01:42,719 --> 00:01:44,813
du mécanisme de gestion 
des exceptions.

33
00:01:45,045 --> 00:01:47,318
C'est ce que signifie 
"lancer une exception".

34
00:01:47,582 --> 00:01:50,922
On a un traitement un peu particulier 
de ces objets particuliers

35
00:01:50,922 --> 00:01:54,425
qui sont les erreurs 
à gérer au niveau du programme.

36
00:01:54,425 --> 00:01:57,945
Par exemple, on pourrait tout à fait 
avoir une ligne comme celle-ci :

37
00:01:57,945 --> 00:02:01,931
<i>throw new Exception</i>, 
donc on crée une nouvelle exception.

38
00:02:01,931 --> 00:02:04,231
Et puis par exemple, 
en appelant son constructeur

39
00:02:04,231 --> 00:02:06,632
qui prend comme paramètre 
une chaîne de caractères

40
00:02:06,632 --> 00:02:09,708
qui indique un message d'erreur :
"Quelle Erreur !",

41
00:02:09,708 --> 00:02:13,141
message, par exemple, associé 
à cette nouvelle instance

42
00:02:13,141 --> 00:02:14,734
de la classe Exception.

43
00:02:15,314 --> 00:02:18,119
Qu'est-ce que ça veut dire 
concrètement "lancer une exception" ?

44
00:02:18,568 --> 00:02:21,181
Ca veut dire que l'instruction throw

45
00:02:21,181 --> 00:02:24,823
va quitter le cours normal 
d'exécution du programme

46
00:02:24,823 --> 00:02:30,838
et va sauter soit au prochain bloc catch 
directement lié à un bloc try.

47
00:02:31,152 --> 00:02:33,018
On verra catch et try dans un instant.

48
00:02:33,238 --> 00:02:35,228
Pour l'instant ce qu'il faut retenir 
c'est que ça va sauter

49
00:02:35,228 --> 00:02:37,261
à un autre endroit du programme.

50
00:02:37,261 --> 00:02:39,890
Soit, s'il n'y a pas 
un tel bloc try/catch,

51
00:02:40,083 --> 00:02:43,586
va alors complètement 
quitter complètement le programme

52
00:02:43,586 --> 00:02:46,605
en terminant par 
ce qu'on appelle une exception.

53
00:02:47,312 --> 00:02:51,038
<i>Throw</i> lance donc une instance
de la classe Exception.

54
00:02:51,380 --> 00:02:54,811
Cette classe Exception est elle-même 
une sous-classe de la classe Throwable

55
00:02:55,056 --> 00:02:57,115
qui hérite elle-même d'Object.

56
00:02:59,148 --> 00:03:01,795
Exception n'est pas la seule
sous-classe de throwable

57
00:03:01,946 --> 00:03:04,857
qui possède une multitude de sous-classes

58
00:03:04,857 --> 00:03:09,638
dont le but est d'indiquer différents 
types d'erreur ou d'exceptions possibles.

59
00:03:09,638 --> 00:03:12,322
Nous avons par exemple 
la sous-classe Error

60
00:03:12,322 --> 00:03:17,399
laquelle possède elle-même 
12 sous-classes directes

61
00:03:17,399 --> 00:03:21,049
et qui sert par exemple 
à indiquer des erreurs mémoires.

62
00:03:21,049 --> 00:03:24,503
La classe Error sert à indiquer 
des erreurs fatales

63
00:03:24,503 --> 00:03:29,799
qui ne sont pas censées être utilisées, 
traitées par le programmeur

64
00:03:29,799 --> 00:03:32,318
avec un bloc try catch.

65
00:03:33,148 --> 00:03:37,260
De l'autre côté, nous avons les Exception
qui doivent ou peuvent

66
00:03:37,260 --> 00:03:39,451
être traitées par le programmeur.

67
00:03:39,451 --> 00:03:43,649
La classe Exception a 
75 sous-classes directes

68
00:03:44,556 --> 00:03:49,293
parmi lesquelles nous avons 
74 Checked Exceptions

69
00:03:50,869 --> 00:03:54,596
qui doivent être traitées 
par le programmeur.

70
00:03:54,996 --> 00:03:57,515
Elles indiquent 
des circonstances exceptionnelles,

71
00:03:57,515 --> 00:04:00,296
souvent des erreurs 
mais pas forcément toujours.

72
00:04:00,296 --> 00:04:05,555
Elles doivent donc être traitées 
au niveau du programme par un try/catch

73
00:04:05,555 --> 00:04:09,023
Nous avons aussi 
la sous-classe RunTimeException

74
00:04:09,023 --> 00:04:12,825
dont le traitement n'est pas forcément 
vérifié par le programmeur

75
00:04:12,825 --> 00:04:15,063
on appelle ça des Unchecked Exception,

76
00:04:15,063 --> 00:04:19,284
elle-même ayant 49 sous-classes directes

77
00:04:19,284 --> 00:04:23,423
pour traiter différents cas d'erreurs 
évitables par de la bonne programmation,

78
00:04:23,423 --> 00:04:27,113
comme par exemple des indices 
dépassant des tableaux,

79
00:04:27,113 --> 00:04:31,037
comme par exemple 
des divisions par 0, etc.

80
00:04:31,037 --> 00:04:34,605
Ce genre d'exception, il n'est pas exclu 
que le programmeur puisse le traiter,

81
00:04:34,605 --> 00:04:36,754
mais ce n'est pas strictement nécessaire.

82
00:04:37,424 --> 00:04:41,633
La vidéo suivante reviendra d'ailleurs 
sur ces Checked/Unchecked Exceptions

83
00:04:41,633 --> 00:04:42,544
et la façon de les gérer.

84
00:04:43,337 --> 00:04:46,233
Au niveau le plus général, 
tout en haut de la hiérarchie,

85
00:04:46,233 --> 00:04:48,896
la classe Throwable
offre deux constructeurs,

86
00:04:48,896 --> 00:04:53,854
un constructeur par défaut et un 
constructeur avec possibilité d'indiquer

87
00:04:53,854 --> 00:04:56,241
un message d'erreur 
sous la forme d'une string

88
00:04:56,241 --> 00:04:59,046
Parmi d'autres, elle offre 
deux méthodes intéressantes,

89
00:04:59,046 --> 00:05:03,513
une méthode <i>getMessage</i> qui permet 
de récupérer le message d'erreur

90
00:05:03,513 --> 00:05:06,147
initialisé à l'aide de ce constructeur,

91
00:05:06,147 --> 00:05:11,587
et puis une méthode printStackTrace() 
qui permet d'afficher sur le terminal

92
00:05:11,587 --> 00:05:17,792
la pile d'appels, c'est à dire le chemin 
d'appel qui a conduit à l'erreur.

93
00:05:17,803 --> 00:05:19,669
Voilà donc pour l'instruction throw.

94
00:05:19,669 --> 00:05:21,586
Passons maintenant à l'instruction try.

95
00:05:21,588 --> 00:05:24,546
Nous avons vu que l'instruction Throw,
si elle n'était pas attrapée

96
00:05:24,546 --> 00:05:28,616
c'est à dire, pas gérée par un try/catch, 
terminait le programme.

97
00:05:28,616 --> 00:05:30,711
Donc, on va vouloir
dans beaucoup de cas,

98
00:05:30,711 --> 00:05:33,042
en particulier 
pour les Checked Exceptions,

99
00:05:33,042 --> 00:05:38,257
on va vouloIr les traiter par un bloc 
sensible à la gestion des exceptions.

100
00:05:38,257 --> 00:05:40,949
C'est exactement ce à quoi sert try.

101
00:05:40,959 --> 00:05:43,631

try sert donc à rendre 
des portions de codes

102
00:05:43,631 --> 00:05:46,953
sensibles à la gestion des exceptions.

103
00:05:47,972 --> 00:05:52,882
Supposons que je fasse un appel à une 
méthode <i>f</i> qui peut lancer des exceptions,

104
00:05:53,270 --> 00:05:56,351
soit la méthode peut lancer 
des exceptions directement,

105
00:05:56,477 --> 00:05:59,965
soit elle peut appeler des méthodes 
qui appellent des méthodes

106
00:05:59,965 --> 00:06:02,935
qui appellent de méthodes
qui lancent des exceptions.

107
00:06:02,935 --> 00:06:05,168
Donc peu importe 
à quelle profondeur d'appel,

108
00:06:05,168 --> 00:06:08,316
dans cet appel à la méthode <i>f</i>,
on a un throw.

109
00:06:08,316 --> 00:06:12,038
Mais quelque part, en dessous 
de cet appel, on va avoir un throw.

110
00:06:12,038 --> 00:06:14,451
Alors à ce moment là, 
si une telle expression,

111
00:06:14,451 --> 00:06:17,676
si un tel appel à une méthode
qui peut lancer des exceptions

112
00:06:17,676 --> 00:06:21,686
est dans un bloc qui est déclaré 
comme un bloc try,

113
00:06:21,686 --> 00:06:25,469
alors à ce moment là, 
on va pouvoir avoir mise en place

114
00:06:25,469 --> 00:06:27,807
du mécanisme de gestion des exceptions

115
00:06:27,807 --> 00:06:31,735
et donc le throw qui se trouve là 
quelque part, en-dessous,

116
00:06:31,735 --> 00:06:37,125
va finalement sauter au prochain bloc 
catch associé au bloc try

117
00:06:37,125 --> 00:06:40,866
dans lequel on est en train de demander 
la gestion des exceptions.

118
00:06:41,672 --> 00:06:45,610
catch est donc justement ce mot clé 
qui sert à introduire l'ensemble

119
00:06:45,610 --> 00:06:48,035
des instructions que l'on voudra exécuter

120
00:06:48,035 --> 00:06:50,849
pour pouvoir gérer les exceptions.

121
00:06:50,849 --> 00:06:55,340
Tout bloc try doit avoir 
au moins un bloc catch associé,

122
00:06:55,340 --> 00:06:57,733
on verra dans un instant 
qu'il peut en avoir plusieurs,

123
00:06:57,733 --> 00:07:02,324
qui va donc gérer les exceptions 
lancées dans ce bloc try.

124
00:07:02,324 --> 00:07:04,891
Si jamais une exception est lancée 
par un throw,

125
00:07:04,891 --> 00:07:07,335
mais qui n'est pas interceptée 
par un catch,

126
00:07:07,335 --> 00:07:11,939
s'il n'y a pas de catch correspondant 
ni de try pour attraper l'exception

127
00:07:11,939 --> 00:07:13,812
qui est lancée, à ce moment là,

128
00:07:13,812 --> 00:07:16,994
le programme va s'arrêter 
en indiquant qu'il y a eu une exception

129
00:07:16,994 --> 00:07:20,334
qui a été lancée et afficher l'endroit 
où elle a été lancée,

130
00:07:20,334 --> 00:07:24,377
indiquant que cette exception 
a été lancée et n'a pas été interceptée.

131
00:07:24,377 --> 00:07:27,520
La syntaxe du bloc catch est donc 
de commencer par le mot <i>catch</i>

132
00:07:27,520 --> 00:07:31,692
puis de faire suivre 
comme un en-tête de méthode,

133
00:07:31,692 --> 00:07:37,116
entre parenthèses, le type et 
l'équivalent d'un paramètre.

134
00:07:37,436 --> 00:07:42,417
On aura qu'un seul paramètre 
pour cet en-tête de catch.

135
00:07:42,417 --> 00:07:47,083
Puis derrière, ici le bloc avec les 
instructions que l'on veut faire exécuter

136
00:07:47,083 --> 00:07:51,017
pour toutes les exceptions 
du type que l'on aura précisé.

137
00:07:51,017 --> 00:07:53,041
Le mieux c'est de donner un exemple.

138
00:07:53,041 --> 00:07:56,638
On a ici un bloc d'instructions 
que l'on veut rendre sensible

139
00:07:56,638 --> 00:07:59,270
à la gestion des exceptions avec le try,

140
00:07:59,270 --> 00:08:04,754
et juste derrière, on aura catch 
pour attraper ici des exceptions

141
00:08:04,957 --> 00:08:06,582
de type <i>ArithmeticException</i>

142
00:08:07,093 --> 00:08:11,830
et un autre bloc catch 
qui se rapporte aussi à ce bloc <i>try</i>

143
00:08:11,830 --> 00:08:16,490
pour attraper des exceptions 
très générales de type <i>Exception</i>.

144
00:08:16,872 --> 00:08:20,941
Donc ici, dans ce bloc, 
on pourrait avoir une variable <i>age</i>,

145
00:08:20,994 --> 00:08:26,355
si l'âge est trop élevé, à ce moment là, 
on va lancer une "exception" très générale.

146
00:08:26,482 --> 00:08:32,212
Puis si l'âge est inférieur à 150,
on continuerait l'exécution.

147
00:08:32,258 --> 00:08:34,082
On aurait une autre variable <i>x</i>.

148
00:08:34,215 --> 00:08:37,892
Si <i>x</i> était égal à 0, 
alors on lance une <i>ArithmeticException</i>.

149
00:08:38,244 --> 00:08:39,844
Sinon on continue.

150
00:08:40,090 --> 00:08:44,030
Cette <i>ArithmeticException</i> va être 
interceptée par ce catch-là.

151
00:08:44,030 --> 00:08:47,855
On exécutera donc les instructions 
qui sont ici, en affichant

152
00:08:48,129 --> 00:08:51,640
le message d'erreur que l'on avait mis 
dans l'ArithmeticException,

153
00:08:51,640 --> 00:08:55,124
puis par exemple, 
en imprimant la pile d'appels.

154
00:08:55,584 --> 00:08:58,370
Alors que si c'est cette exception 
générale qui a été lancée

155
00:08:58,370 --> 00:09:01,748
c'est ce catch qui va être exécuté.

156
00:09:01,748 --> 00:09:04,398
A ce moment là, on affichera un message, 
par exemple :

157
00:09:04,398 --> 00:09:06,388
" Qui peut vivre aussi vieux ?"

158
00:09:06,388 --> 00:09:11,951
Ce qui est important de noter, c'est que 
les catch ici associés à un bloc try

159
00:09:11,951 --> 00:09:15,942
vont être ordonnés par niveau d'exception 
de plus en plus général.

160
00:09:16,122 --> 00:09:19,198
On aura d'abord les exceptions 
les plus spécifiques dans la hiérarchie,

161
00:09:19,198 --> 00:09:22,003
puis ensuite les exceptions 
les plus générales.

162
00:09:22,003 --> 00:09:26,604
Je vous rappelle qu'on a 
une hiérarchie d'exceptions, comme ceci.

163
00:09:27,001 --> 00:09:32,301
Le traitement dans le catch devra 
se faire en commençant

164
00:09:32,301 --> 00:09:35,601
par des exceptions les plus spécifiques,

165
00:09:35,601 --> 00:09:39,901
puis ensuite en allant
vers les plus générales.

166
00:09:40,336 --> 00:09:43,241
Si vous placez les blocs catch avec les 
exceptions les plus générales en premier,

167
00:09:43,241 --> 00:09:45,607
vous aurez une erreur de compilation.

168
00:09:45,607 --> 00:09:48,959
Voyons maintenant en détails 
comment tout ceci s'exécute.

169
00:09:48,959 --> 00:09:50,411
Quel est le flow d'exécution ?

170
00:09:50,411 --> 00:09:52,935
Par où on passe en fonction 
des différents cas ?

171
00:09:53,061 --> 00:09:55,568
Si l'exception est lancée. 
Si l'exception n'est pas lancée.

172
00:09:56,530 --> 00:09:58,381
D'abord, les principes généraux 
sont les suivants.

173
00:09:58,546 --> 00:10:02,502
Un bloc catch n'est exécuté 
que si une exception correspondant

174
00:10:02,502 --> 00:10:06,408
au type spécifié dans le catch 
en question a été lancée

175
00:10:06,408 --> 00:10:08,309
depuis le bloc try correspondant.

176
00:10:08,309 --> 00:10:11,230
Sinon, le bloc catch est 
tout simplement ignoré.

177
00:10:11,230 --> 00:10:13,961
On n'exécutera pas 
ce qui est dans ce bloc catch.

178
00:10:13,961 --> 00:10:17,155
En absence de finally, 
dont on parlera dans un instant.

179
00:10:17,155 --> 00:10:22,548
Si le bloc catch est exécuté, alors 
le déroulement du programme

180
00:10:22,548 --> 00:10:25,685
continue ensuite après le bloc catch.

181
00:10:25,685 --> 00:10:28,519
On ne revient en aucun cas dans le try.

182
00:10:28,519 --> 00:10:32,144
On continuera après le bloc catch.

183
00:10:34,224 --> 00:10:37,791
Par exemple, si on a un bloc try
rendu sensible

184
00:10:37,791 --> 00:10:39,815
à la gestion des exceptions,

185
00:10:39,896 --> 00:10:42,041
dans lequel s'exécute, 
soit directement,

186
00:10:42,041 --> 00:10:44,265
soit au travers d'un appel 
d'une méthode,

187
00:10:44,265 --> 00:10:47,872
dans lequel s'exécute donc
le lancement d'une exception.

188
00:10:48,566 --> 00:10:53,676
Si cette exception est lancée, 
si cette ligne est effectivement exécutée,

189
00:10:53,676 --> 00:10:58,923
à la fin de cette ligne, 
on va sauter directement ici

190
00:10:58,923 --> 00:11:04,711
à la première ligne du bloc catch,
directement suivant le bloc try

191
00:11:05,001 --> 00:11:08,086
et correspondant au type d'exception.

192
00:11:08,382 --> 00:11:10,451
Ici, avec correspondance du type.

193
00:11:10,694 --> 00:11:12,154
Donc l'exécution sera la suivante :

194
00:11:12,154 --> 00:11:15,654
On arrive ici. 
On exécute ce lancement d'exception.

195
00:11:15,997 --> 00:11:21,117
On saute à cet endroit-là 
si il y a eu lancement d'une exception.

196
00:11:22,343 --> 00:11:26,019
Si par contre, il n'y a pas eu 
lancement de l'exception,

197
00:11:26,369 --> 00:11:28,853
c'est à dire que cette ligne, ici, 
n'est pas exécutée,

198
00:11:28,988 --> 00:11:30,691
par exemple, parce qu'elle a été 
protégée par un <i>if</i>

199
00:11:30,691 --> 00:11:32,451
dont la condition n'est pas remplie,

200
00:11:32,451 --> 00:11:34,373
à ce moment là, on exécute le code.

201
00:11:34,373 --> 00:11:37,190
Il n'y a pas d'exécution 
de cette ligne.

202
00:11:37,190 --> 00:11:41,169
Donc on continue, naturellement, 
à exécuter tout le bloc.

203
00:11:41,169 --> 00:11:43,502
On suppose qu'il n'y a pas 
d'autre throw dans la suite.

204
00:11:43,502 --> 00:11:46,923
Arrivé à la fin du bloc, ici, 
on va continuer

205
00:11:46,923 --> 00:11:49,236
l'exécution normale 
du programme.

206
00:11:49,236 --> 00:11:52,776
On ignorera tout simplement
tout le bloc catch

207
00:11:52,776 --> 00:11:56,266
qui n'est exécuté que si 
il y a eu lancement d'une exception

208
00:11:56,266 --> 00:11:57,966
du type correspondant.

209
00:11:59,194 --> 00:12:01,845
Sur l'exemple que nous avions 
tout à l'heure,

210
00:12:01,845 --> 00:12:03,839
le flow d'exécution serait le suivant :

211
00:12:04,134 --> 00:12:07,077
Supposons donc au départ 
que l'on a une variable <i>age</i>

212
00:12:07,077 --> 00:12:12,100
et puis que l'âge, pour commencer, 
n'est pas supérieur ou égal à 150.

213
00:12:12,208 --> 00:12:14,160
On a un âge inférieur à 150.

214
00:12:14,160 --> 00:12:15,831
A ce moment là, on continue.

215
00:12:15,831 --> 00:12:18,847
On ne rentre par dans le if donc 
on ne voit pas le throw, on continue.

216
00:12:18,847 --> 00:12:22,523
Supposons qu'on ait une variable <i>x</i>, ici,
qui n'est pas égale à 0.

217
00:12:22,523 --> 00:12:25,482
A ce moment là, on continue normalement.
On arrive ici.

218
00:12:25,995 --> 00:12:28,002
Donc si aucune exception n'a été lancée,

219
00:12:28,002 --> 00:12:30,513
"cas n°1 : sans exception lancée"

220
00:12:30,513 --> 00:12:33,636
on va continuer l'exécution là, en-bas.

221
00:12:33,636 --> 00:12:37,831
Ça c'est donc ce qui se passe 
si l'âge est inférieur à 150

222
00:12:37,831 --> 00:12:40,006
et x est différent de 0.

223
00:12:40,006 --> 00:12:43,192
Voyons maintenant ce qui se passe 
si par exemple on a toujours

224
00:12:43,192 --> 00:12:47,800
l'âge inférieur à 150 mais que <i>x</i> vaut 0.

225
00:12:50,800 --> 00:12:54,129
Ce qui va se passer, 
c'est que l'âge étant inférieur à 150,

226
00:12:54,129 --> 00:12:56,389
on ne rentre pas dans le <i>if</i>, on continue.

227
00:12:56,389 --> 00:12:59,788
Ici, x valant 0, 
alors cette condition est vérifiée.

228
00:12:59,950 --> 00:13:03,762
On exécute ce throw, 
ce qui fait que, à partir de là,

229
00:13:03,762 --> 00:13:08,280
on va se brancher sur 
ce qui a été lancé comme exception.

230
00:13:08,280 --> 00:13:10,733
C'est à dire qu'on a lancé 
une ArithmeticException.

231
00:13:10,733 --> 00:13:16,332
Donc on va se brancher sur le bloc 
qui attrape les ArithmeticException.

232
00:13:16,332 --> 00:13:21,458
A partir d'ici, 
on va continuer l'exécution

233
00:13:21,458 --> 00:13:26,372
en affichant le message associé
et en affichant la trace d'appel.

234
00:13:26,915 --> 00:13:29,461
Une fois que l'on aura fait tout ceci, 
à ce moment là,

235
00:13:29,461 --> 00:13:34,397
on continuera l'exécution normalement 
après tous les blocs catch

236
00:13:34,397 --> 00:13:36,985
associés aux try concernés.

237
00:13:37,716 --> 00:13:42,687
Troisième et dernier cas, 
si l'âge est supérieur ou égal à 150.

238
00:13:42,748 --> 00:13:47,406
Ce qui se passe c'est qu'on va arriver
dans ce if, dont la condition est vraie

239
00:13:47,406 --> 00:13:51,397
donc on va exécuter 
ce lancement d'exception.

240
00:13:51,397 --> 00:13:55,437
Ici, on a donc lancement 
d'un type Exception.

241
00:13:55,437 --> 00:14:00,192
Ce qui fait que l'on va, à partir d'ici, 
se brancher sur le catch

242
00:14:00,192 --> 00:14:02,542
qui récupère les exceptions.

243
00:14:02,542 --> 00:14:08,628
Cette exécution va continuer ici 
par exécuter l'affichage de

244
00:14:08,628 --> 00:14:10,521
"Qui peut vivre si vieux ? ".

245
00:14:10,521 --> 00:14:14,267
Puis ensuite, comme toujours, 
on continuera l'exécution

246
00:14:14,267 --> 00:14:18,481
par la suite normale du programme.

247
00:14:19,429 --> 00:14:21,306
Passons maintenant à 
un troisième exemple

248
00:14:21,306 --> 00:14:25,071
où nous allons mettre throw, try et catch
dans une même méthode.

249
00:14:25,071 --> 00:14:27,992
C'est un cas particulier 
mais qui peut s'avérer parfois utile.

250
00:14:28,622 --> 00:14:31,296
Nous avons donc ici 
une méthode <i>lireEntier</i>

251
00:14:31,296 --> 00:14:34,737
dont le but va être justement de lire 
un entier qui retourne cet entier lu

252
00:14:34,737 --> 00:14:37,829
et qui prend comme paramètre 
un nombre maximum d'essais,

253
00:14:37,829 --> 00:14:43,637
et dont l'en-tête doit être prolongé 
par cette syntaxe, <i>throws Exception</i>

254
00:14:43,637 --> 00:14:46,130
qui vous sera expliquée plus tard.

255
00:14:46,130 --> 00:14:48,920
Nous avons donc ici 
tout le corps de cette méthode

256
00:14:48,920 --> 00:14:53,154
dans laquelle on voit que 
nous avons un bloc try,

257
00:14:53,154 --> 00:14:57,784
try sur la lecture d'un entier 
au clavier.

258
00:14:57,784 --> 00:15:00,325
On va vouloir lire un entier.

259
00:15:00,325 --> 00:15:05,451
Ce que l'on va faire, c'est qu'on va 
intercepter les throw possiblement lancés

260
00:15:05,451 --> 00:15:09,002
par cette lecture d'un entier 
au cas où la lecture échoue.

261
00:15:09,002 --> 00:15:12,229
C'est typiquement le cas si l'utilisateur,
au lieu d'entrer un entier,

262
00:15:12,229 --> 00:15:14,632
entre par exemple 
une chaîne de caractères.

263
00:15:14,632 --> 00:15:19,260
Dans ce cas, cette lecture lance une 
exception de type InputMismatchException,

264
00:15:19,260 --> 00:15:24,314
laquelle est définie 
dans la bibliothèque java.util.

265
00:15:24,314 --> 00:15:29,762
Si la lecture échoue, on va avoir 
lancement d'une exception de ce type là,

266
00:15:29,762 --> 00:15:34,703
donc branchement au niveau du catch, 
puisqu'on avait mis ça dans un bloc try,

267
00:15:34,703 --> 00:15:37,363
qui va nous permettre 
par exemple d'afficher un message.

268
00:15:37,695 --> 00:15:39,120
"Il faut rentrer un nombre entier."

269
00:15:39,120 --> 00:15:42,701
Puis avec cette instruction, on supprime 
dans le flot d'entrée

270
00:15:42,701 --> 00:15:44,980
les caractères laissés 
par la mauvaise saisie précédente.

271
00:15:44,980 --> 00:15:47,964
Enfin, nous augmentons
le nombre d'essais.

272
00:15:47,964 --> 00:15:50,345
Le programma va donc 
se dérouler de la façon suivante.

273
00:15:50,345 --> 00:15:52,953
Au départ, on aura 
un <i>nbEssais</i> qui vaut 1.

274
00:15:52,973 --> 00:15:56,910
On aura une boucle tant que 
le nombre d'essai

275
00:15:56,910 --> 00:16:00,976
est inférieur ou égal à <i>maxEssais</i>"
que l'on a reçu comme paramètre.

276
00:16:00,976 --> 00:16:02,680
On demande un entier.

277
00:16:02,680 --> 00:16:06,052
On essaye de lire un entier et 
chaque fois que cette lecture échoue

278
00:16:06,052 --> 00:16:10,499
on se branchera sur le bloc catch 
qui attrape l'exception correspondante.

279
00:16:10,499 --> 00:16:14,374
On arrive donc ici à la fin du bloc catch 
si on a eu un échec de lecture.

280
00:16:14,374 --> 00:16:16,753
On continue l'exécution.

281
00:16:16,753 --> 00:16:22,737
On continue tant que nbEssais n'a pas 
atteint le nombre maximum d'essais.

282
00:16:22,737 --> 00:16:26,437
Dans le cas où la lecture réussit, 
on n'a pas de lancement d'exception.

283
00:16:26,437 --> 00:16:29,321
On a donc continuation 
de l'exécution normale.

284
00:16:29,321 --> 00:16:35,143
On retourne la valeur lue et 
on quitte le programme à ce niveau-là.

285
00:16:36,395 --> 00:16:40,168
Enfin si l'on fait tellement d'erreurs que
l'on dépasse le nombre maximum d'essais,

286
00:16:40,190 --> 00:16:42,535
il va se passer le déroulement suivant :

287
00:16:42,535 --> 00:16:46,301
on va avoir encore une erreur 
qui va lancer l'exception

288
00:16:46,301 --> 00:16:48,982
qui va être interceptée par ce catch ici.

289
00:16:48,982 --> 00:16:50,930
On va incrémenter le nombre d'essais.

290
00:16:50,930 --> 00:16:53,683
A la fin du catch, 
on continue l'exécution normale.

291
00:16:53,875 --> 00:16:56,673
Mais cette fois-ci le nbEssais 
va être strictement plus grand

292
00:16:56,673 --> 00:16:58,779
que le nombre maxEssais.

293
00:16:58,779 --> 00:17:02,557
Donc on sortira de la boucle <i>while</i> 
et on continuera l'exécution

294
00:17:02,557 --> 00:17:05,675
en lançant cette fois-ci 
une nouvelle exception,

295
00:17:05,675 --> 00:17:10,288
laquelle exception sera passée 
plus haut à d'autres méthodes

296
00:17:10,288 --> 00:17:14,615
qui auront appelé lireEntier 
et qui pourront possiblement

297
00:17:14,615 --> 00:17:16,891
attraper cette exception et la gérer.

298
00:17:18,091 --> 00:17:19,928
Terminons enfin par quelques remarques.

299
00:17:20,174 --> 00:17:23,333
La première c'est que depuis Java 7 
on a ce qu'on appelle le multi-catch.

300
00:17:23,333 --> 00:17:28,055
On a le droit d'écrire 
catch Exception1 ou Execption2 etc.

301
00:17:28,055 --> 00:17:30,475
Puis enfin quelque chose 
que je vous ai déjà dit,

302
00:17:30,475 --> 00:17:32,101
quand on a plusieurs blocs catch

303
00:17:32,101 --> 00:17:35,084
il faut absolument toujours 
les spécifier du plus spécifique,

304
00:17:35,084 --> 00:17:38,243
de l'exception qui est la plus basse 
dans la hiérarchie des exceptions,

305
00:17:38,243 --> 00:17:39,589
à la plus générale,

306
00:17:39,589 --> 00:17:40,974
c'est à dire les exceptions 
les plus hautes

307
00:17:40,974 --> 00:17:43,520
dans la relation d'héritage 
des exceptions.

308
00:17:44,540 --> 00:17:46,819
Terminons enfin cette vidéo 
sur la syntaxe Java

309
00:17:46,819 --> 00:17:50,748
de la gestion des exceptions 
par ce point numéro 4,

310
00:17:50,748 --> 00:17:54,571
où l'on ferait éventuellement 
le ménage après un bloc catch

311
00:17:54,571 --> 00:17:58,968
avec le mot clé finally qui indique de 
façon optionnelle ce qu'il faudrait faire

312
00:17:58,968 --> 00:18:01,832
après un bloc réceptif aux exceptions.

313
00:18:02,502 --> 00:18:05,946
Ce mot clé finally contrôle donc 
un bloc qui est optionnel

314
00:18:05,946 --> 00:18:09,136
et qui suit les blocs catch
associés à un try

315
00:18:09,136 --> 00:18:12,820
et qui contient du code 
qui est destiné à être exécuté

316
00:18:12,820 --> 00:18:15,523
que l'on ait lancé l'exception ou pas.

317
00:18:15,523 --> 00:18:18,377
Le but de ce bloc est de faire le ménage,

318
00:18:18,377 --> 00:18:22,019
par exemple fermer des fichiers, 
fermer des connexions etc.

319
00:18:22,123 --> 00:18:26,352
en cas de lancement d'exception, 
garantir que ce ménage est bien fait.

320
00:18:26,352 --> 00:18:29,877
Prenons un exemple, 
nous avons ici un petit programme

321
00:18:29,877 --> 00:18:33,160
que nous allons pouvoir 
appeler de différentes façons.

322
00:18:33,160 --> 00:18:36,857
C'est la première fois que nous utilisons
ici les arguments passés à main.

323
00:18:36,857 --> 00:18:40,156
Ça nous permet de pouvoir par exemple,

324
00:18:40,156 --> 00:18:43,035
depuis l'exécution 
de ce programme Inverse,

325
00:18:43,035 --> 00:18:46,126
de passer différents arguments 
ou éventuellement

326
00:18:46,126 --> 00:18:47,960
de ne pas passer des arguments.

327
00:18:48,212 --> 00:18:52,064
La façon dont c'est fait, c'est simplement
de passer un tableau de string

328
00:18:52,064 --> 00:18:55,364
qui sont donc les arguments 
lors de l'appel de ce programme

329
00:18:55,364 --> 00:18:57,164
que l'on va appeler Inverse.

330
00:18:57,164 --> 00:19:02,831
On a ici un bloc try qui va essayer
de lire les différents arguments

331
00:19:02,831 --> 00:19:05,205
Ici, args c'est donc un tableau de chaîne.

332
00:19:05,205 --> 00:19:08,482
args[0] c'est donc le premier élément 
de ce tableau de chaînes.

333
00:19:08,482 --> 00:19:12,641
Ce sera donc le premier argument passé 
au programme lorsqu'on l'exécutera,

334
00:19:12,641 --> 00:19:14,554
comme je vous l'ai indiqué précédemment.

335
00:19:14,554 --> 00:19:18,868
On essaye de lire un entier 
dans ce premier argument.

336
00:19:19,062 --> 00:19:21,037
Ensuite, on fait une division par b.

337
00:19:21,037 --> 00:19:25,491
Puis on affiche que 100 fois l'inverse
c'est justement ce nombre <i>c</i>

338
00:19:25,491 --> 00:19:27,464
que l'on vient de calculer.

339
00:19:27,464 --> 00:19:30,674
Si le premier argument que l'on reçoit
n'est pas un entier,

340
00:19:30,674 --> 00:19:36,756
cette expression va lancer une exception
de type NumberFormatException

341
00:19:36,756 --> 00:19:41,283
et donc fera que l'on va 
se brancher sur le bloc catch

342
00:19:41,283 --> 00:19:43,159
sensible à ce type d'exception.

343
00:19:43,159 --> 00:19:45,928
On indiquera par exemple 
"Il faut un nombre entier !".

344
00:19:46,268 --> 00:19:51,180
Si par contre on réussit à lire 
un nombre entier dans le premier argument

345
00:19:51,409 --> 00:19:56,007
alors on passe ici, on fait ce calcul,
où là, on a un risque de division par 0.

346
00:19:56,007 --> 00:19:58,848
Si b vaut 0, cette division va 
effectivement

347
00:19:58,857 --> 00:20:01,342
lancer une ArithmeticException,

348
00:20:01,342 --> 00:20:03,827
on va donc se brancher 
sur ce bloc sensible

349
00:20:03,827 --> 00:20:06,312
aux exceptions 
de type ArithmeticException

350
00:20:06,312 --> 00:20:10,321
Si on a une division par 0, on affichera 
que l'on part vers l'infini.

351
00:20:10,581 --> 00:20:14,130
Enfin, quoi qu'il advienne, 
que l'on ait une exception ici,

352
00:20:14,130 --> 00:20:15,719
que l'on ait une exception ici,

353
00:20:15,719 --> 00:20:20,231
ou que l'on ait rien du tout dans ce bloc 
sensible à la gestion des exceptions,

354
00:20:20,231 --> 00:20:22,980
on exécutera ce passage obligé.

355
00:20:22,980 --> 00:20:27,675
On exécutera ce bloc finally 
lié à ce bloc try.

356
00:20:27,776 --> 00:20:29,605
Voyons tout ceci en détails

357
00:20:29,605 --> 00:20:31,734
sur différents types d'appel 
de ce programme.

358
00:20:32,054 --> 00:20:35,484
Si, par exemple, on appelle 
notre programme avec un argument 4.1

359
00:20:35,484 --> 00:20:38,195
qui est de type double, 
à ce moment là,

360
00:20:38,195 --> 00:20:41,406
ici, on n'a pas réussi à lire un entier.

361
00:20:41,406 --> 00:20:44,367
On se branche ici.
On exécute "Il faut un nombre entier !".

362
00:20:44,603 --> 00:20:48,495
Comme on a terminé le bloc catch, 
on passe le bloc finally.

363
00:20:48,767 --> 00:20:52,830
Ici on écrit "passage obligé". 
Puis on termine le programme.

364
00:20:53,429 --> 00:20:57,085
Si par contre on a passé 
un entier mais c'est 0,

365
00:20:57,085 --> 00:21:01,457
on a réussi à lire un nombre entier 
donc on continue.

366
00:21:01,457 --> 00:21:06,031
Ici on fait la division par 0, ce qui fait
que l'on a une ArithmeticException

367
00:21:06,031 --> 00:21:09,055
qui est lancée et interceptée 
par ce bloc catch,

368
00:21:09,055 --> 00:21:11,761
donc on affiche 
que l'on part vers l'infini.

369
00:21:11,761 --> 00:21:14,542
Puis on continue, comme toujours, 
par le bloc finally

370
00:21:14,542 --> 00:21:18,417
qui indique que l'on a un passage obligé.

371
00:21:19,267 --> 00:21:22,493
Troisième cas : si l'on appelle 
notre programme en passant un argument

372
00:21:22,493 --> 00:21:24,946
qui est un entier non nul.

373
00:21:24,946 --> 00:21:27,435
A ce moment là, 
on a bien réussi à lire un entier.

374
00:21:27,435 --> 00:21:30,380
On continue. 
On a fait la division sans aucun souci.

375
00:21:30,380 --> 00:21:35,968
Donc on peut afficher que 
100 fois son inverse c'est 25.

376
00:21:36,498 --> 00:21:40,154
Dans ce cas là, on termine aussi 
en passant quand même par le finally

377
00:21:40,325 --> 00:21:43,022
qui est exécuté de toute façon
puisqu'on est dans un bloc try.

378
00:21:43,269 --> 00:21:46,110
Ici, à la fin de l'exécution 
de ce bloc try,

379
00:21:46,110 --> 00:21:49,372
on va se lancer 
dans l'exécution du bloc finally

380
00:21:49,372 --> 00:21:54,518
et afficher que l'on a 
un passage obligé.

381
00:21:54,988 --> 00:21:56,711
Pour terminer, un dernier exemple.

382
00:21:56,711 --> 00:22:01,607
On ne passe aucun argument donc 
se passe la chose suivante :

383
00:22:01,607 --> 00:22:06,817
Nous allons vouloir lire un entier 
dans le premier élément du tableau A.

384
00:22:06,817 --> 00:22:08,703
Mais il se trouve 
qu'il n'y a pas eu d'arguments,

385
00:22:08,703 --> 00:22:10,793
donc ce tableau est un tableau vide.

386
00:22:10,793 --> 00:22:13,545
Donc il n'y a même pas 
un élément à la position 0.

387
00:22:13,545 --> 00:22:16,229
Nous avons un index hors des limites

388
00:22:16,229 --> 00:22:18,323
et on va donc avoir
lancement d'une exception

389
00:22:18,323 --> 00:22:21,597
qui est l'exception
ArrayIndexOutOfBounds

390
00:22:21,597 --> 00:22:24,022
Donc on aura lancement
de cette exception,

391
00:22:24,022 --> 00:22:26,047
mais ce que vous pouvez remarquer

392
00:22:26,047 --> 00:22:30,222
c'est qu'effectivement on sera
avant cela passé par le finally.

393
00:22:30,222 --> 00:22:34,910
En effet, ici nous sommes de nouveau 
toujours dans le bloc try

394
00:22:34,910 --> 00:22:37,701
et comme on va sortir, ici, 
en lançant une exception,

395
00:22:37,713 --> 00:22:40,565
cette exception n'est pas 
attrapée par aucun des catch.

396
00:22:40,565 --> 00:22:43,752
Néanmoins, on passe par le bloc finally.

397
00:22:43,752 --> 00:22:47,725
On passe toujours par le bloc finally 
associé à un bloc try.

398
00:22:47,725 --> 00:22:51,605
Donc on affiche ceci, avant de continuer 
le lancement de cette exception

399
00:22:51,605 --> 00:22:56,180
qui n'est pas attrapée et donc 
qui termine l'exécution du programme

400
00:22:56,180 --> 00:23:00,466
avec un message de type 
"l'exception n'a pas été attrapée",

401
00:23:00,466 --> 00:23:02,578
avec ensuite la pile des appels

402
00:23:02,578 --> 00:23:05,568
à l'endroit 
où cette exception a été lancée.

403
00:23:06,085 --> 00:23:09,374
Vous voyez donc que 
quelque soit le schéma d'exécution

404
00:23:09,374 --> 00:23:14,988
du bloc try correspondant 
nous passons par le finally.

405
00:23:14,988 --> 00:23:19,173
En l'occurrence, ici, effectivement 
un tel finally n'est pas très utile.

406
00:23:19,173 --> 00:23:22,361
Mais si jamais nous avions eu 
des allocations de ressources,

407
00:23:22,361 --> 00:23:24,253
ouvertures de fichier 
dans ce bloc try

408
00:23:24,253 --> 00:23:27,271
nous garantissons 
en fermant ces ressources,

409
00:23:27,271 --> 00:23:29,831
en libérant ces ressources 
dans le bloc finally,

410
00:23:29,831 --> 00:23:34,718
nous garantissons que quelque soit 
le chemin d'exécution de ce bloc try

411
00:23:34,718 --> 00:23:38,537
le bloc finally libérera 
donc bien les ressources.

412
00:23:38,537 --> 00:23:41,016
C'est à ça que sert typiquement 
un bloc finally.

413
00:23:41,544 --> 00:23:47,274
Ceci conclut cette séquence 
sur la syntaxe des exceptions en Java.
