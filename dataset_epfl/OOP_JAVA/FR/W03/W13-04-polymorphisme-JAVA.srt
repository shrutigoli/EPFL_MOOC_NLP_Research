1
00:00:04,361 --> 00:00:07,306
Vous connaissez maintenant les notions
fondamentales de l'orienté-objet,

2
00:00:07,306 --> 00:00:10,117
que sont l'encapsulation, 
l'abstraction et l'héritage.

3
00:00:10,117 --> 00:00:12,832
Il est temps d'aborder une notion
tout aussi centrale :

4
00:00:12,832 --> 00:00:14,103
celle du polymorphisme.

5
00:00:14,103 --> 00:00:17,128
De façon générale, le polymorphisme
est le fait qu'un même code

6
00:00:17,128 --> 00:00:20,814
puisse s'adapter automatiquement aux types
des données auxquelles il s'applique.

7
00:00:20,916 --> 00:00:24,731
Il s'agit d'une notion importante car elle
permet d'aller vers du code générique :

8
00:00:24,731 --> 00:00:28,793
du code qui s'écrit de façon unifiée
pour différents types de données.

9
00:00:29,153 --> 00:00:32,214
Notez que dans cette séquence il ne s'agit
que d'une introduction au polymorphisme.

10
00:00:32,214 --> 00:00:34,717
Nous aurons l'occasion, dans les 
séquences de la semaine prochaine,

11
00:00:34,717 --> 00:00:36,266
d'y revenir de façon
plus détaillée.

12
00:00:36,708 --> 00:00:39,298
Revenons à notre petit exemple 
introductif sur l'héritage.

13
00:00:39,456 --> 00:00:41,752
Supposons que nous disposons d'une 
hiérarchie de personnages

14
00:00:41,752 --> 00:00:44,966
et que nous souhaitions maintenant
programmer un jeu où tout un ensemble

15
00:00:44,966 --> 00:00:48,765
de personnages de natures diverses
rencontrent un personnage principal.

16
00:00:49,366 --> 00:00:50,610
Comment mettre en œuvre ceci ?

17
00:00:50,796 --> 00:00:53,602
L'idée est donc que l'on aurait
un ensemble de personnages

18
00:00:53,602 --> 00:00:58,088
que l'on peut imaginer stockés dans
un tableau, ici, pour simplifier

19
00:00:58,088 --> 00:01:02,005
un tableau de taille fixe, et nous voulons
faire en sorte que tous ces personnages

20
00:01:02,005 --> 00:01:04,139
rencontrent tour à tour
un personnage principal.

21
00:01:04,997 --> 00:01:07,719
L'idée serait donc de mettre en place
au travers d'une boucle

22
00:01:07,719 --> 00:01:09,039
les différentes rencontres.

23
00:01:09,039 --> 00:01:13,316
Faire en sorte que chaque personnage
de la collection de personnages

24
00:01:13,316 --> 00:01:15,638
rencontre tour à tour
le personnage principal.

25
00:01:16,308 --> 00:01:19,064
L'idée principale est qu'ici, dans le
tableau de personnages,

26
00:01:19,064 --> 00:01:21,170
on pourrait avoir des personnages
de natures diverses.

27
00:01:21,527 --> 00:01:24,639
Par exemple, la première entrée de
notre tableau pourrait être un voleur,

28
00:01:24,639 --> 00:01:27,025
la seconde, un guerrier, 
la troisième, un sorcier.

29
00:01:27,887 --> 00:01:29,845
Et se pose à nous maintenant 
un premier questionnement :

30
00:01:29,845 --> 00:01:32,803
nous avons vu que Java était un langage
fortement typé, qui implique

31
00:01:32,803 --> 00:01:35,975
que tout ce qui est à gauche d'une 
affectation doit être de même type

32
00:01:35,975 --> 00:01:38,875
que ce qui est à droite.
Est-ce que ce critère est rempli ici ?

33
00:01:39,908 --> 00:01:42,942
En clair, peut-on mettre un objet de type
sorcier, voleur ou guerrier,

34
00:01:42,942 --> 00:01:45,183
qui sont des instances 
de sous-classes de personnages,

35
00:01:45,183 --> 00:01:46,768
dans un tableau de personnages.

36
00:01:47,409 --> 00:01:50,687
La réponse est effectivement oui. 
En effet, lorsqu'on écrit une affectation

37
00:01:50,687 --> 00:01:57,996
où l'on affecte à une variable de type
super-classe la référence à un objet

38
00:01:57,996 --> 00:02:02,163
de type sous-classe, nous ne sommes pas
en contradiction avec le fait

39
00:02:02,163 --> 00:02:04,683
que ce qui est à droite de l'affectation 
doit être de même type

40
00:02:04,799 --> 00:02:07,936
que ce qui est à gauche en raison de
l'héritage des types

41
00:02:07,936 --> 00:02:10,630
dans une hiérarchie de classes,
que nous avons eu l'occasion de voir

42
00:02:10,630 --> 00:02:12,257
dans les séquences précédentes.

43
00:02:12,572 --> 00:02:15,852
Donc, un objet d'une sous-classe,
ici un objet de type <i>Sorcier</i>,

44
00:02:15,852 --> 00:02:19,675
hérite du type de sa super-classe,
donc de type <i>Personnage</i>.

45
00:02:20,337 --> 00:02:24,047
Comme l'héritage est en fait transitif,
un objet de type sous-classe

46
00:02:24,047 --> 00:02:28,213
hérite par transitivité de tous 
les types de son ascendance,

47
00:02:28,213 --> 00:02:29,985
et donc peut avoir plusieurs types.

48
00:02:30,397 --> 00:02:33,402
Il s'agit là d'aspects déjà évoqués
dans les séquences précédentes,

49
00:02:33,402 --> 00:02:37,075
mais qui sont suffisamment importants pour
justifier une petite piqûre de rappel.

50
00:02:37,927 --> 00:02:40,137
Notre ébauche de programme est donc
tout à fait correcte ici :

51
00:02:40,137 --> 00:02:43,486
il est licite de stocker dans un tableau 
de personnages des personnages

52
00:02:43,486 --> 00:02:47,306
de natures diverses, ce qui a l'avantage
de permettre de les manipuler

53
00:02:47,306 --> 00:02:49,876
de façon unifiée, comme nous le 
faisons par exemple ici,

54
00:02:49,876 --> 00:02:51,164
au travers de cette boucle <i>for</i>.

55
00:02:51,870 --> 00:02:54,512
Intéressons-nous maintenant à ce qui
se passe lorsque les personnages

56
00:02:54,512 --> 00:02:59,124
rencontrent le personnage principal,
en particulier lorsque certaines

57
00:02:59,124 --> 00:03:03,180
sous-classes de personnages ont une
façon particulière de gérer la rencontre.

58
00:03:04,040 --> 00:03:06,803
En effet, nous avons vu dans les séquences
précédentes qu'il était tout à fait

59
00:03:06,803 --> 00:03:10,224
possible qu'une sous-classe redéfinisse
une méthode déjà présente

60
00:03:10,224 --> 00:03:11,458
dans la super-classe.

61
00:03:11,834 --> 00:03:14,812
Nous avions alors pris l'exemple 
du guerrier qui, lorsqu'il rencontre

62
00:03:14,812 --> 00:03:19,998
un autre personnage, le frappe, alors que
les autres personnages gèrent la rencontre

63
00:03:19,998 --> 00:03:23,412
différemment, ils se contentent de saluer
le personnage rencontré.

64
00:03:24,036 --> 00:03:26,197
Le problème que nous nous posons 
maintenant est le suivant :

65
00:03:26,197 --> 00:03:29,963
sachant que l'on stocke un objet de type
<i>Guerrier</i> dans une variable

66
00:03:29,963 --> 00:03:34,366
de type <i>personnage</i>, que se passe-t-il
lorsqu'on évoque la méthode <i>rencontrer</i>

67
00:03:34,366 --> 00:03:35,875
sur la variable <i>unPersonnage</i>?

68
00:03:37,895 --> 00:03:41,166
Est-ce la méthode <i>rencontrer</i> de 
la sous-classe qui est invoquée ?

69
00:03:41,793 --> 00:03:44,036
Ou alors la méthode de la super-classe ?

70
00:03:45,129 --> 00:03:48,266
C'est exactement le même problème qui se
pose à nous dans l'exemple d'introduction,

71
00:03:48,266 --> 00:03:52,395
puisque nous stockons un objet de type 
<i>Guerrier</i> dans l'entrée d'un tableau

72
00:03:52,395 --> 00:03:55,246
de type <i>personnage</i>, c'est-à-dire dans
un contenant de type <i>Personnage</i>.

73
00:03:55,697 --> 00:03:58,897
Il est en effet important de savoir ici
si cette rencontre va se solder

74
00:03:58,897 --> 00:04:02,069
par de simples salutations, 
ou un acte un petit peu plus violent.

75
00:04:02,338 --> 00:04:05,361
On peut considérer en fait cette question
selon deux points de vue possibles.

76
00:04:05,361 --> 00:04:08,347
On peut considérer par exemple
que c'est le type de la variable

77
00:04:08,347 --> 00:04:11,410
sur laquelle est invoquée la méthode
qui va déterminer

78
00:04:11,410 --> 00:04:12,911
la méthode à utiliser.

79
00:04:13,436 --> 00:04:17,623
Ici, le type de la variable sur laquelle 
est invoquée la méthode

80
00:04:17,623 --> 00:04:21,207
est <i>Personnage</i> ; si c'est ce critère 
qui est considéré comme prépondérant

81
00:04:21,207 --> 00:04:25,099
pour décider de la méthode, alors on va
aller chercher la méthode dans la classe

82
00:04:25,099 --> 00:04:29,707
<i>Personnage</i>, et donc la rencontre va 
se solder ici par des salutations.

83
00:04:30,342 --> 00:04:34,027
Cette façon particulière de résoudre 
le lien entre une méthode et une variable,

84
00:04:34,027 --> 00:04:37,041
c'est-à-dire de trouver quelle méthode
appliquer à la variable,

85
00:04:37,041 --> 00:04:40,296
s'appelle, en programmation, la 
"résolution statique des liens".

86
00:04:40,485 --> 00:04:43,369
On parle de résolution statique, 
parce que l'on n'a pas besoin d'attendre

87
00:04:43,369 --> 00:04:47,317
que le programme s'exécute pour faire
le choix de la méthode <i>rencontrer</i>

88
00:04:47,317 --> 00:04:48,242
à appliquer ici.

89
00:04:49,104 --> 00:04:52,276
Ici, à la simple lecture du programme, 
lorsque le programme compile,

90
00:04:52,276 --> 00:04:55,302
on peut savoir que unPersonnage est 
de type <i>Personnage</i>,

91
00:04:55,302 --> 00:04:58,045
et par conséquent, c'est la méthode 
<i>rencontrer</i> de <i>Personnage</i>

92
00:04:58,045 --> 00:04:59,153
qui sera appliquée.

93
00:04:59,570 --> 00:05:02,392
Pour résumer donc, on parle de 
"résolution statique" lorsque c'est

94
00:05:02,392 --> 00:05:06,576
le type apparent de la variable qui est
déterminant pour choisir

95
00:05:06,576 --> 00:05:07,763
la méthode à appliquer.

96
00:05:08,273 --> 00:05:11,472
La résolution statique des liens existe
dans certains langages, mais n'est pas

97
00:05:11,472 --> 00:05:13,456
le point de vue retenu par Java.

98
00:05:14,735 --> 00:05:17,937
Deuxième point de vue possible : celui
de la résolution dynamique des liens

99
00:05:17,937 --> 00:05:21,497
où l'on va considérer que c'est le type
effectif, c'est-à-dire le type de l'objet

100
00:05:21,497 --> 00:05:25,611
effectivement stocké à l'intérieur de 
la variable, qui va être prépondérant

101
00:05:25,611 --> 00:05:27,535
pour choisir la méthode à appliquer.

102
00:05:28,102 --> 00:05:30,845
Dans notre exemple, la variable 
<i>unPersonnage</i> est certes

103
00:05:30,890 --> 00:05:35,276
de type <i>Personnage</i>, mais elle contient
une référence à un objet de type <i>Guerrier</i>.

104
00:05:35,276 --> 00:05:38,853
Si c'est le type contenu dans la variable
qui est prépondérant pour le choix

105
00:05:38,853 --> 00:05:42,110
de la méthode, alors dans ce cas on va
choisir la méthode rencontrée

106
00:05:42,110 --> 00:05:43,532
de la classe <i>Guerrier</i>.

107
00:05:44,171 --> 00:05:47,597
Ici, donc, notre personnage rencontré,
au lieu d'être simplement salué,

108
00:05:47,597 --> 00:05:49,332
eh bien, va subir quelques coups.

109
00:05:49,826 --> 00:05:52,601
On parle de résolution dynamique
parce qu'en général c'est en cours

110
00:05:52,601 --> 00:05:55,881
d'exécution du programme qu'on va 
pouvoir déterminer le contenu

111
00:05:55,881 --> 00:05:57,262
effectif d'une variable.

112
00:05:57,817 --> 00:06:01,548
Il existe donc, en programmation, deux
façons possibles de faire la résolution

113
00:06:01,548 --> 00:06:06,353
des liens : la résolution statique ou
la résolution dynamique.

114
00:06:06,897 --> 00:06:09,951
Certains langages offrent le choix 
entre les deux modalités,

115
00:06:09,951 --> 00:06:12,808
c'est-à-dire que l'on peut choisir si
l'on veut faire de la résolution statique

116
00:06:12,808 --> 00:06:14,659
ou de la résolution dynamique.

117
00:06:15,026 --> 00:06:18,739
En Java, ce choix n'existe pas : c'est 
systématiquement la résolution

118
00:06:18,739 --> 00:06:21,125
dynamique des liens qui
est mise en œuvre.

119
00:06:22,527 --> 00:06:25,603
C'est donc le type effectif de ce qui est
réellement stocké dans la variable

120
00:06:25,603 --> 00:06:29,143
plutôt que le type apparent de la 
variable qui va décider du choix

121
00:06:29,458 --> 00:06:32,465
de la méthode à appliquer, 
et donc, dans le cas de notre exemple,

122
00:06:32,465 --> 00:06:36,967
le personnage rencontré va fatalement 
recevoir quelques coups du Guerrier.

123
00:06:37,657 --> 00:06:41,401
Pour finir, résumons et synthétisons 
sur un petit exemple analogue

124
00:06:41,401 --> 00:06:43,274
à celui de notre exemple d'introduction.

125
00:06:43,502 --> 00:06:47,867
Supposons que nous disposons d'une classe
<i>Jeu</i> dans laquelle il y aurait un attribut

126
00:06:47,867 --> 00:06:52,064
de type Personnage qui serait le joueur
principal du jeu, et un autre attribut,

127
00:06:52,064 --> 00:06:55,639
de type tableau <i>Personnage</i>, 
qui, lui, représentera les adversaires

128
00:06:55,639 --> 00:06:57,422
qui vont rencontrer le joueur.

129
00:06:58,172 --> 00:07:01,419
La classe <i>Jeu</i> contient une méthode 
publique <i>tourDeJeu</i> qui fait en sorte

130
00:07:01,419 --> 00:07:04,110
que chaque adversaire rencontre 
tour à tour le joueur.

131
00:07:04,644 --> 00:07:07,458
Supposons que dans une méthode de la
classe <i>Jeu</i>, par exemple

132
00:07:07,458 --> 00:07:10,485
un des constructeurs, le tableau
d'adversaire soit rempli

133
00:07:10,485 --> 00:07:13,516
de la façon suivante : 
la première entrée contiendrait un sorcier

134
00:07:13,516 --> 00:07:15,044
et la seconde un guerrier.

135
00:07:15,630 --> 00:07:20,011
On suppose aussi, comme dans les exemples
vus précédemment, qu'un sorcier a la façon

136
00:07:20,011 --> 00:07:24,226
générale de rencontre un autre personnage,
c'est-à-dire qu'il va simplement le saluer

137
00:07:24,226 --> 00:07:28,371
et que le guerrier, lui, rencontre le
personnage d'une façon spécialisée,

138
00:07:28,371 --> 00:07:29,546
c'est-à-dire en le frappant.

139
00:07:30,038 --> 00:07:33,941
Si un programmeur utilisateur de la classe
<i>Jeu</i> déclare un variable <i>leJeu</i>

140
00:07:33,941 --> 00:07:36,956
de type <i>Jeu</i> et qu'il invoque la méthode
<i>Tour de jeu</i> sur cette variable,

141
00:07:36,956 --> 00:07:38,116
que va-t-il se passer ?

142
00:07:39,429 --> 00:07:42,847
Avec la résolution statique des liens,
si toutefois elle était possible,

143
00:07:42,847 --> 00:07:46,143
c'est le type apparent des variables 
qui va décider, donc le type

144
00:07:46,143 --> 00:07:47,541
<i>Personnage</i> qui va décider.

145
00:07:47,828 --> 00:07:50,883
Et à ce moment-là, le joueur va se 
faire saluer deux fois :

146
00:07:50,883 --> 00:07:53,599
une fois par le guerrier,
une autre fois par le sorcier.

147
00:07:54,009 --> 00:07:58,478
Avec la résolution dynamique des liens, 
la méthode <i>Rencontrer</i> va s'adapter

148
00:07:58,478 --> 00:08:02,517
au contenu de la variable de type
<i>Personnage</i>, c'est-à-dire de l'entrée

149
00:08:02,517 --> 00:08:03,292
du tableau.

150
00:08:03,590 --> 00:08:07,729
C'est le type effectif qui décide, et dans
ce cas-là, le joueur va se faire saluer

151
00:08:07,729 --> 00:08:10,144
par le sorcier, mais 
frapper par le guerrier.

152
00:08:12,106 --> 00:08:15,283
La résolution dynamique est toujours
ce qui va se passer en Java.

153
00:08:16,089 --> 00:08:17,101
La seconde option.

154
00:08:17,340 --> 00:08:20,386
Voilà, ceci conclut notre séquence 
d'introduction sur le polymorphisme

155
00:08:20,386 --> 00:08:23,547
en Java. Dès la séquence suivante,
nous aurons l'occasion d'y revenir

156
00:08:23,547 --> 00:08:25,593
plus en profondeur et
plus en détail.
