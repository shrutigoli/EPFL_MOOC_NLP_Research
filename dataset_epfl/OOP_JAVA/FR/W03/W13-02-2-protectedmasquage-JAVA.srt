1
00:00:04,232 --> 00:00:06,840
Dans certaines situations, 
des membres tels que définis

2
00:00:06,840 --> 00:00:09,785
dans une super-classe, ne répondent 
pas de façon satisfaisante

3
00:00:09,785 --> 00:00:11,341
aux besoins d'une sous-classe.

4
00:00:11,341 --> 00:00:13,725
La redéfinition ou le masquage
sont des concepts

5
00:00:13,725 --> 00:00:16,472
qui permettent de faire face
à ce genre de situations.

6
00:00:16,472 --> 00:00:18,641
Dans une séquence précédente, 
nous avions pris l'exemple

7
00:00:18,641 --> 00:00:20,220
d'une hiérarchie de personnages,

8
00:00:20,220 --> 00:00:22,539
et étions partis de l'hypothèse
que tous ces personnages

9
00:00:22,539 --> 00:00:25,935
avaient la même façon
de rencontrer un autre personnage.

10
00:00:25,935 --> 00:00:29,204
On peut imaginer par exemple
que lorsqu'un personnage, quel qu'il soit,

11
00:00:29,204 --> 00:00:32,000
en rencontre un autre,
se contente de le saluer.

12
00:00:32,000 --> 00:00:35,292
Imaginons par exemple que cette façon 
d'implémenter la méthode rencontrer

13
00:00:35,292 --> 00:00:37,473
soit satisfaisante pour 
la plupart des classes,

14
00:00:37,473 --> 00:00:38,609
mais pas pour toutes.

15
00:00:38,609 --> 00:00:40,342
Par exemple, on peut imaginer
que le guerrier

16
00:00:40,342 --> 00:00:42,899
soit un personnage un peu plus
belliqueux que les autres,

17
00:00:42,899 --> 00:00:45,981
et lorsqu'il rencontre un autre 
personnage, au lieu de le saluer,

18
00:00:45,981 --> 00:00:47,758
eh bien il le frappe par exemple.

19
00:00:47,758 --> 00:00:50,146
Nous sommes donc dans la situation
où nous envisageons

20
00:00:50,146 --> 00:00:53,185
deux implémentations possibles 
pour la méthode rencontrer.

21
00:00:53,185 --> 00:00:55,396
L'une pour les personnages non-guerrier,

22
00:00:55,396 --> 00:00:58,127
un personnage non-guerrier
qui en rencontre un autre,

23
00:00:58,127 --> 00:00:59,966
va simplement le saluer,

24
00:00:59,966 --> 00:01:03,047
et une pour les guerriers, 
où cette fois lorsque le guerrier

25
00:01:03,047 --> 00:01:06,138
rencontre un autre personnage,
eh bien va le frapper.

26
00:01:06,138 --> 00:01:08,569
Qu'en est-il alors de 
notre première conception,

27
00:01:08,569 --> 00:01:12,461
faut-il reconcevoir toute 
notre hiérarchie de classe ?

28
00:01:12,461 --> 00:01:15,110
La réponse à cette question 
est fort heureusement non,

29
00:01:15,110 --> 00:01:18,646
il suffit en fait de définir 
dans la classe Guerrier,

30
00:01:18,646 --> 00:01:21,998
une méthode rencontrer
qui soit spécialisée.

31
00:01:22,658 --> 00:01:26,522
Nous allons revisiter notre hiérarchie 
de classe de la façon suivante,

32
00:01:26,522 --> 00:01:29,547
nous allons garder dans
la super-classe Personnage,

33
00:01:29,547 --> 00:01:31,524
la méthode rencontrer générale,

34
00:01:31,524 --> 00:01:34,711
qui est satisfaisante pour la plupart
des sous-classes,

35
00:01:34,711 --> 00:01:36,919
en revanche, dans la sous-classe Guerrier,

36
00:01:36,919 --> 00:01:40,457
nous allons donner une nouvelle définition
à cette méthode rencontrer,

37
00:01:40,457 --> 00:01:42,561
de sorte à ce qu'elle corresponde mieux

38
00:01:42,561 --> 00:01:45,272
à ce que l'on attend qu'elle fasse
dans la sous-classe en question.

39
00:01:45,893 --> 00:01:49,011
Pour un objet de type Guerrier, 
la méthode rencontrer spécialisée

40
00:01:49,011 --> 00:01:52,521
va avoir la précédence sur la méthode 
rencontrer plus générale.

41
00:01:52,521 --> 00:01:54,876
La méthode générale
va s'appliquer à défaut

42
00:01:54,876 --> 00:01:58,012
de redéfinition plus spécifique 
dans les sous-classes.

43
00:01:58,012 --> 00:02:02,669
Par exemple, si dans un programme 
je déclare un objet de type Magicien,

44
00:02:06,891 --> 00:02:09,769
et que je lui applique
la méthode rencontrer,

45
00:02:13,194 --> 00:02:15,493
eh bien comme dans 
la sous-classe Magicien,

46
00:02:15,493 --> 00:02:19,027
il n'y a aucune définition spécifique
de la méthode rencontrer,

47
00:02:19,027 --> 00:02:22,200
c'est la méthode rencontrer générale,
héritée de Personnage,

48
00:02:22,200 --> 00:02:24,426
qui va ici être invoquée.

49
00:02:24,426 --> 00:02:30,898
Par contre si maintenant,
je déclare un objet de type Guerrier,

50
00:02:33,211 --> 00:02:36,131
et que je lui applique à nouveau
la méthode rencontrer,

51
00:02:38,805 --> 00:02:41,674
comme cette fois il existe
une redéfinition de la méthode rencontrer

52
00:02:41,674 --> 00:02:43,034
dans la sous-classe Guerrier,

53
00:02:43,034 --> 00:02:46,049
c'est la méthode spécifique
qui maintenant va s'appliquer.

54
00:02:46,544 --> 00:02:48,908
Dans une hiérarchie de classe, 
il est possible d'avoir

55
00:02:48,908 --> 00:02:51,269
un même nom d'attribut ou de méthode

56
00:02:51,269 --> 00:02:54,320
utilisé sur plusieurs niveaux
de la hiérarchie.

57
00:02:54,320 --> 00:02:56,784
Dans notre exemple précédent, 
la méthode rencontrer

58
00:02:56,784 --> 00:03:00,826
avec le même entête, se retrouve
à deux niveaux de la hiérarchie.

59
00:03:00,826 --> 00:03:03,863
Dans cette situation,
on va parler de redéfinition,

60
00:03:03,863 --> 00:03:08,724
une méthode est redéfinie de façon
plus spécifique dans une sous-classe.

61
00:03:08,724 --> 00:03:11,619
Le terme anglophone pour cela
est "overriding".

62
00:03:11,619 --> 00:03:14,423
De façon analogue, il est possible 
de faire en sorte

63
00:03:14,423 --> 00:03:18,313
qu'un attribut avec 
le même nom soit présent

64
00:03:18,313 --> 00:03:20,422
à plusieurs niveaux de la hiérarchie.

65
00:03:20,422 --> 00:03:23,689
Par exemple, si j'ai une super-classe A

66
00:03:23,689 --> 00:03:26,583
contenant un attribut donné, 
nommé a (petit a),

67
00:03:26,583 --> 00:03:29,523
il est possible de déclarer à nouveau

68
00:03:29,523 --> 00:03:32,270
un attribut a (petit a)
dans la sous-classe B.

69
00:03:32,270 --> 00:03:36,076
Nous sommes dans la situation où 
nous avons un attribut de même nom,

70
00:03:36,076 --> 00:03:38,735
présent à deux niveaux de la hiérarchie.

71
00:03:38,735 --> 00:03:41,419
Ce qu'il faut comprendre alors,
est qu'un objet de type B

72
00:03:41,419 --> 00:03:44,927
disposera désormais de deux attributs
nommés a (petit a),

73
00:03:44,927 --> 00:03:49,697
l'un qui est directement dans la classe B,
et l'autre qui est hérité de A.

74
00:03:49,697 --> 00:03:52,952
Si dans une méthode de B, 
on utilise l'attribut a,

75
00:03:52,952 --> 00:03:56,222
eh bien c'est l'attribut a de B
qui sera utilisé ici,

76
00:03:56,222 --> 00:03:58,508
et non pas celui hérité de a.

77
00:03:58,508 --> 00:04:01,213
On dit que l'attribut présent dans b

78
00:04:01,213 --> 00:04:05,528
masque celui défini dans la super-classe
et qui porte le même nom.

79
00:04:05,528 --> 00:04:08,787
Donc pour les attributs, pour 
les variables, on parle de masquage,

80
00:04:08,787 --> 00:04:11,614
le terme anglophone est "shadowing".

81
00:04:11,984 --> 00:04:14,297
Le masquage de variables 
dans une hiérarchie

82
00:04:14,297 --> 00:04:16,439
est clairement source d'ambiguïté,

83
00:04:16,439 --> 00:04:19,662
il est donc d'un usage peu courant.

84
00:04:21,282 --> 00:04:23,520
Par contre, la redéfinition de méthode

85
00:04:23,520 --> 00:04:27,079
est quelque chose de très pratique
et beaucoup plus courant,

86
00:04:27,079 --> 00:04:31,613
il permet d'adapter une méthode
aux besoins spécifiques d'une sous-classe,

87
00:04:31,613 --> 00:04:32,987
de la spécialiser donc.

88
00:04:33,387 --> 00:04:37,276
Pour résumer, la redéfinition de méthode
dans une hiérarchie de classe

89
00:04:37,276 --> 00:04:39,782
consiste à définir de façon spécialisée

90
00:04:39,782 --> 00:04:43,458
une méthode déjà présente
dans une super-classe,

91
00:04:43,458 --> 00:04:45,960
une méthode avec le même entête.

92
00:04:47,000 --> 00:04:50,737
En terme de jargon, on va dire 
que la méthode héritée

93
00:04:50,737 --> 00:04:54,497
dont peuvent bénéficier d'autres 
éventuelles sous-classes de personnages

94
00:04:54,497 --> 00:04:57,366
qui ne redéfiniraient pas 
spécifiquement cette méthode,

95
00:04:57,366 --> 00:04:59,805
est la méthode par défaut,
la méthode générale.

96
00:05:00,355 --> 00:05:03,245
La méthode qui redéfinit 
la méthode héritée,

97
00:05:03,245 --> 00:05:06,454
est par contre ce qu'on appelle 
la méthode spécialisée,

98
00:05:06,454 --> 00:05:10,339
qui s'adapte de façon spécifique
aux besoins de la sous-classe.

99
00:05:10,339 --> 00:05:13,424
Comme vu précédemment, 
c'est toujours la méthode spécialisée

100
00:05:13,424 --> 00:05:16,363
qui a la précédence 
sur la méthode par défaut,

101
00:05:16,363 --> 00:05:19,865
par exemple, si l'on déclare
un objet de type Guerrier,

102
00:05:19,865 --> 00:05:22,949
et qu'on invoque la méthode rencontrer
sur l'objet de type Guerrier,

103
00:05:22,949 --> 00:05:27,117
c'est la méthode rencontrer spécialisée
pour le guerrier qui va être invoquée.

104
00:05:27,117 --> 00:05:30,791
En réalité, un objet de type Guerrier
dispose de deux méthodes rencontrer,

105
00:05:30,791 --> 00:05:34,837
celle qui lui est spécifique, et celle
dont il a hérité de plus haut.

106
00:05:34,837 --> 00:05:38,642
Dans certaines situations, il peut être 
utile d'invoquer la méthode générale

107
00:05:38,642 --> 00:05:40,576
même si l'on a redéfini cette méthode

108
00:05:40,576 --> 00:05:42,717
de façon plus spécifique 
dans la sous-classe.

109
00:05:42,717 --> 00:05:44,718
Comment procéder dans ce cas là ?

110
00:05:44,718 --> 00:05:47,501
Par exemple, imaginez que 
l'on veuille doter notre guerrier

111
00:05:47,501 --> 00:05:48,779
de quelques bonnes manières,

112
00:05:48,779 --> 00:05:50,868
et que avant de frapper le personnage
qu'il rencontre,

113
00:05:50,868 --> 00:05:53,301
il commence par le saluer ou l'inverse,

114
00:05:53,671 --> 00:05:56,043
le code souhaité est donc le suivant,
pour un personnage non guerrier,

115
00:05:56,043 --> 00:05:57,976
nous voulons garder notre méthode générale

116
00:05:57,976 --> 00:06:00,876
où le personnage salue
celui qu'il rencontre,

117
00:06:00,876 --> 00:06:03,087
par contre pour un personnage
de type Guerrier,

118
00:06:03,087 --> 00:06:05,143
nous voulons garder une méthode spécialisée

119
00:06:05,143 --> 00:06:09,290
où le guerrier peut frapper celui 
qu'il rencontre, mais avant de le frapper,

120
00:06:09,290 --> 00:06:11,937
on veut pouvoir faire appel 
à la méthode générale,

121
00:06:11,937 --> 00:06:15,782
donc à la méthode où on salue 
le personnage rencontré.

122
00:06:15,782 --> 00:06:17,766
Ce qui veut dire concrètement
que l'on souhaite

123
00:06:17,766 --> 00:06:20,931
appeler la méthode générale 
depuis la méthode spécialisée.

124
00:06:21,451 --> 00:06:25,854
En effet, le code permettant à
un personnage d'en saluer un autre

125
00:06:25,854 --> 00:06:27,798
est déjà présent dans la méthode générale,

126
00:06:27,798 --> 00:06:30,898
il est inutile de le dupliquer
dans la méthode spécialisée,

127
00:06:30,898 --> 00:06:34,708
il est donc plus sensé de faire en sorte
que l'on appelle la méthode générale

128
00:06:34,708 --> 00:06:37,763
sans dupliquer les lignes 
de code correspondantes.

129
00:06:38,373 --> 00:06:39,826
Pour accéder aux attributs masqués

130
00:06:39,826 --> 00:06:42,305
ou aux méthodes redéfinies 
d'une super-classe,

131
00:06:42,305 --> 00:06:44,918
il faut avoir recours à une syntaxe 
particulière en Java,

132
00:06:44,918 --> 00:06:48,687
on utilise le mot réservé "super"
suivi de . (point),

133
00:06:48,687 --> 00:06:51,654
et suivi du nom de l'attribut 
ou de la méthode en question.

134
00:06:52,444 --> 00:06:55,369
Dans le cas de notre exemple, si je veux
dans la méthode rencontrer

135
00:06:55,369 --> 00:06:59,797
de la sous-classe Guerrier, invoquer la 
méthode rencontrer, héritée de personnage,

136
00:06:59,797 --> 00:07:04,234
alors j'utilise la syntaxe en question
"super.rencontrer",

137
00:07:04,234 --> 00:07:08,475
qui veut dire que j'invoque la méthode
rencontrer de la super-classe.

138
00:07:08,475 --> 00:07:12,339
Il est bien sûr possible d'enchaîner
ensuite des actions plus spécifiques.

139
00:07:12,549 --> 00:07:15,167
L'appel à la méthode d'une super-classe
est très utile,

140
00:07:15,167 --> 00:07:18,820
puisqu'elle permet ici d'éviter de 
dupliquer dans la méthode redéfinie

141
00:07:18,820 --> 00:07:22,783
toutes les instructions présentes
dans la méthode de la super-classe.

142
00:07:22,783 --> 00:07:26,972
L'invocation d'une méthode redéfinie
grâce à cette tournure syntaxique,

143
00:07:26,972 --> 00:07:29,128
nous a permis de définir un guerrier

144
00:07:29,128 --> 00:07:31,038
un peu petit plus poli que tout à l'heure,

145
00:07:31,038 --> 00:07:35,320
qui va saluer son adversaire, avant 
de lui asséner quelques coups,

146
00:07:35,320 --> 00:07:38,069
et tout ceci sans aucune 
duplication de code.

147
00:07:38,819 --> 00:07:42,551
Notez qu'en Java, il n'est pas possible 
d'enchaîner plusieurs appels à "super",

148
00:07:43,141 --> 00:07:46,942
ce genre de tournures n'est pas licite.

149
00:07:50,199 --> 00:07:53,444
Ceci signifie en clair,
que si nous avons

150
00:07:55,574 --> 00:07:57,524
une super-classe Personnage,

154
00:08:14,121 --> 00:08:26,264
puis redéfinie dans Magicien, 
et redéfinie à nouveau dans Sorcier,

155
00:08:27,504 --> 00:08:32,118
alors la méthode rencontrer de Sorcier
ne peut pas court-circuiter

156
00:08:32,118 --> 00:08:37,115
la méthode héritée de Magicien
en faisant un appel tel que

157
00:08:38,775 --> 00:08:42,719
"super.super.rencontrer"

158
00:08:47,307 --> 00:08:50,510
Les concepteurs de Java ont probablement
considéré que cette tournure

159
00:08:50,510 --> 00:08:53,793
comportait le danger qu'un objet 
de type "sous-sous-classe"

160
00:08:53,793 --> 00:08:58,227
se comporte davantage comme un objet
de type "super-super-classe",

161
00:08:58,227 --> 00:09:02,446
que comme un objet
de sa classe parente directe,

162
00:09:02,446 --> 00:09:04,198
ce qui peut être vu comme 
un affaiblissement

163
00:09:04,198 --> 00:09:06,877
de la relation "est-un", 
de la relation d'héritage.

164
00:09:07,543 --> 00:09:09,421
Notez que cette limitation 
n'est pas présente

165
00:09:09,421 --> 00:09:11,621
dans tous les langages de
programmation orienté objet,

166
00:09:11,621 --> 00:09:15,530
certains langages orienté objet autorisent
tout à fait ce genre de tournures,

167
00:09:15,530 --> 00:09:17,891
c'est-à-dire qu'une sous-sous-classe
fasse appel

168
00:09:17,891 --> 00:09:21,198
à une méthode de la 
super-super-classe directement.

169
00:09:21,638 --> 00:09:23,430
Notez que si la méthode rencontrer

170
00:09:23,430 --> 00:09:26,594
n'avait pas été redéfinie 
au niveau intermédiaire ici,

171
00:09:27,184 --> 00:09:30,721
alors un appel à "super.rencontrer"

172
00:09:30,721 --> 00:09:33,794
va simplement rechercher 
la méthode rencontrer

173
00:09:33,794 --> 00:09:36,230
dans la super-classe la plus proche
où elle se trouve,

174
00:09:36,230 --> 00:09:38,419
et donc aurait bel et bien été chercher

175
00:09:38,419 --> 00:09:41,223
la méthode rencontrer
dans la classe Personnage.

176
00:09:41,603 --> 00:09:43,520
Et ceci conclut cette séquence.
