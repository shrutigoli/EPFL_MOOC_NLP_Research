1
00:00:04,002 --> 00:00:05,559
Dans cette séquence vidéo

2
00:00:05,559 --> 00:00:07,409
nous continuons 
sur la lancée de l'héritage

3
00:00:07,409 --> 00:00:08,827
et abordons dans ce cadre,

4
00:00:08,827 --> 00:00:10,805
la notion de droit d'accès protégé.

5
00:00:10,805 --> 00:00:14,240
Vous avez appris jusqu'ici 
que l'accès à un membre d'une classe,

6
00:00:14,240 --> 00:00:16,918
c'est à dire, à un attribut 
ou à une méthode, peut être

7
00:00:16,918 --> 00:00:18,934
soit 'public', ce qui signifie

8
00:00:18,934 --> 00:00:21,113
qu'il est utilisable sans restriction

9
00:00:21,113 --> 00:00:24,340
aussi bien à l'intérieur 
qu'à l'extérieur de la classe.

10
00:00:24,340 --> 00:00:27,863
Il peut être 'privé', ce qui signifie 
que le membre en question

11
00:00:27,863 --> 00:00:30,760
n'est utilisable 
qu'à l'intérieur de la classe.

12
00:00:30,760 --> 00:00:34,036
En java il existe également, 
le droit d'accès 'par défaut'

13
00:00:34,036 --> 00:00:36,944
qui est en place si 
on ne met aucun modificateur explicite

14
00:00:36,944 --> 00:00:39,772
devant la déclaration 
du membre en question

15
00:00:39,772 --> 00:00:42,409
et dans ce cas, le membre est visible

16
00:00:42,409 --> 00:00:44,624
depuis toutes les classes 
du même paquetage.

17
00:00:44,624 --> 00:00:47,024
C'est aussi le cas 
pour le paquetage par défaut

18
00:00:47,024 --> 00:00:49,166
que vous avez souvent 
l'occasion d'utiliser

19
00:00:49,166 --> 00:00:50,569
dans le cadre des exercices,

20
00:00:50,569 --> 00:00:53,537
notez qu'il est prévu pour vous, 
un complément PDF

21
00:00:53,537 --> 00:00:57,039
sur le site du cours, 
concernant la notion de paquetage.

22
00:00:57,039 --> 00:00:59,075
La question que nous 
nous posons maintenant est

23
00:00:59,075 --> 00:01:01,890
qu'en est-il des droits d'accès 
dans une hiérarchie de classes ?

24
00:01:01,890 --> 00:01:04,745
Supposons que nous ayons 
une super-classe grand 'A'

25
00:01:04,745 --> 00:01:07,453
dont hérite une sous-classe grand 'B'.

26
00:01:10,501 --> 00:01:13,291
Supposons que la super-classe...

27
00:01:14,814 --> 00:01:18,050
contient la déclaration d'un attribut :

28
00:01:18,050 --> 00:01:20,595
petit 'a' qui serait privé.

29
00:01:20,595 --> 00:01:23,296
Sachant que déclarer 
les attributs en privé

30
00:01:23,296 --> 00:01:25,393
est ce que nous avons 
toujours fait jusqu'ici,

31
00:01:25,393 --> 00:01:27,368
la question que nous nous posons est :

32
00:01:27,368 --> 00:01:30,449
est-ce que l'attribut 
en question est accessible

33
00:01:30,449 --> 00:01:33,508
dans une méthode de <i>B</i> ?

34
00:01:39,027 --> 00:01:42,546
Par exemple, aurions-nous le droit 
d'écrire quelque chose comme ceci

35
00:01:42,546 --> 00:01:44,910
à l'intérieur de <i>B</i> ?

36
00:01:44,910 --> 00:01:46,926
Nous avons vu que 
par le fait de l'héritage,

37
00:01:46,926 --> 00:01:49,056
la sous-classe <i>B</i> dispose, bel et bien,

38
00:01:49,056 --> 00:01:51,623
de l'attribut petit 'a' hérité de 'A',

39
00:01:51,623 --> 00:01:54,623
la question est : a-t'elle le droit 
d'en disposer librement,

40
00:01:54,623 --> 00:01:57,710
de l'utiliser directement, 
au sein de ses propres méthodes ?

41
00:01:57,710 --> 00:02:01,006
En fait, comme nous l'avons vu,
le droit d'accès privé

42
00:02:01,006 --> 00:02:03,457
n'assure la visibilité 
qu'à l'intérieur de la classe

43
00:02:03,457 --> 00:02:05,245
dans laquelle le membre est défini.

44
00:02:05,245 --> 00:02:09,284
Ceci signifie que l'attribut petit 'a' 
n'est utilisable ici directement,

45
00:02:09,284 --> 00:02:11,720
que dans les méthodes 
de la classe grand 'A'.

46
00:02:11,720 --> 00:02:14,818
Ce qui signifie également 
que ceci n'est pas permis.

47
00:02:14,818 --> 00:02:18,115
Nous nous trouvons donc ici 
dans une situation un peu paradoxale

48
00:02:18,115 --> 00:02:21,510
qui est que la classe <i>B</i>, héritant de <i>A</i>,

49
00:02:21,510 --> 00:02:24,203
dispose bel et bien 
d'un attribut petit 'a'

50
00:02:24,203 --> 00:02:27,216
mais ne peut pas en faire usage 
librement comme ici,

51
00:02:27,216 --> 00:02:29,217
elle ne peut pas y accéder directement

52
00:02:29,217 --> 00:02:31,397
comme dans le cas de cet exemple.

53
00:02:31,397 --> 00:02:33,434
Comme il peut sembler à priori naturel

54
00:02:33,434 --> 00:02:36,709
qu'une sous-classe dispose directement 
de tous ses attributs,

55
00:02:36,709 --> 00:02:38,963
ses attributs directement 
définis dans la classe

56
00:02:38,963 --> 00:02:41,648
mais aussi ceux hérités de super-classes,

57
00:02:41,648 --> 00:02:44,326
il existe une autre voie 
pour les droits d'accès

58
00:02:44,326 --> 00:02:46,510
qui est le droit d'accès <i>protégé</i>.

59
00:02:46,510 --> 00:02:49,852
Lorsqu'un membre est déclaré 
comme 'protégé' dans une classe donnée

60
00:02:49,852 --> 00:02:52,670
alors, il devient directement accessible

61
00:02:52,670 --> 00:02:54,760
dans toutes les classes de sa descendance.

62
00:02:54,760 --> 00:02:56,791
Le droit d'accès <i>protégé</i> en java

63
00:02:56,791 --> 00:02:59,530
se désigne par le mot réservé <i>protected</i>.

64
00:02:59,530 --> 00:03:03,604
En clair, remplacer <i>private</i> par <i>protected</i>

65
00:03:03,604 --> 00:03:05,958
dans le cas de notre exemple,

66
00:03:05,958 --> 00:03:08,652
rend ceci possible.

67
00:03:09,392 --> 00:03:13,638
Notez aussi qu'en java, l'accès protégé 
assure la visibilité, aussi

68
00:03:13,638 --> 00:03:16,315
dans toutes les autres classes 
du même paquetage

69
00:03:16,315 --> 00:03:19,060
que celui de la classe 
contenant le membre protégé.

70
00:03:19,060 --> 00:03:22,388
Schématiquement voici comment 
tout cela peut se résumer,

71
00:03:22,388 --> 00:03:24,952
donc supposons que nous ayons 
un membre protégé

72
00:03:24,952 --> 00:03:28,010
dans une classe qui est définie
dans un certain paquetage,

73
00:03:28,010 --> 00:03:31,208
alors ce membre protégé 
est directement accessible

74
00:03:31,208 --> 00:03:35,049
dans toutes les classes
de la descendance de 'A'

75
00:03:35,049 --> 00:03:38,756
qu'elle soit dans le même paquetage 
ou dans un autre paquetage;

76
00:03:38,756 --> 00:03:41,724
ce qui veut dire que dans toutes 
les classes descendant de 'A'

77
00:03:41,724 --> 00:03:44,676
cet accès est possible,

78
00:03:44,676 --> 00:03:47,601
qu'en est-il si il n'y a pas 
de lien d'héritage ?

79
00:03:47,601 --> 00:03:51,812
Et bien, en java un membre protégé 
est également accessible

80
00:03:51,812 --> 00:03:55,005
dans toutes les classes qui figurent 
dans le même paquetage

81
00:03:55,005 --> 00:03:57,698
que celle de la classe dans lequel 
le membre est défini

82
00:03:57,698 --> 00:04:00,833
et ceux, même si il n'existe 
aucun lien d'héritage.

83
00:04:00,833 --> 00:04:04,699
Par exemple, la classe 'C' n'a pas 
de lien d'héritage avec la classe 'A'

84
00:04:04,699 --> 00:04:06,864
mais se trouve dans le même paquetage,

85
00:04:06,864 --> 00:04:09,352
dans ce cas, dans une méthode 
de la classe 'C'

86
00:04:09,352 --> 00:04:12,166
on peut accéder directement 
à l'attribut protégé de 'A'

87
00:04:12,166 --> 00:04:13,837
via tout objet de type 'A'

88
00:04:13,837 --> 00:04:15,529
directement sans garde-fou.

89
00:04:15,529 --> 00:04:17,565
Cet accès est donc possible,

90
00:04:17,565 --> 00:04:20,828
par contre, une autre classe,
qui n'aurait pas de lien d'héritage

91
00:04:20,828 --> 00:04:23,184
avec celle dans laquelle est défini
le membre protégé

92
00:04:23,184 --> 00:04:26,125
et qui de surcroit se trouvait
dans un autre paquetage,

93
00:04:26,125 --> 00:04:28,504
ne pourrait pas accéder 
aux membres protégés.

94
00:04:28,504 --> 00:04:31,554
Ici par exemple, la classe 'E' 
ne pourrait pas accéder

95
00:04:31,554 --> 00:04:35,254
au membre protégé petit 'a' 
via une instance de grand 'A'.

96
00:04:36,074 --> 00:04:38,912
Le droit d'accès <i>protégé</i>
est dangereux pour l'encapsulation

97
00:04:38,912 --> 00:04:40,792
dans le sens où il permet, notamment,

98
00:04:40,792 --> 00:04:43,173
à tous programmeurs 
d'extensions de la classe 'A',

99
00:04:43,173 --> 00:04:45,909
donc tout programmeur qui souhaiterait 
hériter de la classe 'A',

100
00:04:45,909 --> 00:04:49,046
d'accéder aux membres protégés
comme s'ils étaient publics

101
00:04:49,046 --> 00:04:52,415
ce qui induit une forte dépendance 
entre ces classes

102
00:04:52,415 --> 00:04:54,930
puisque du coup, 
le programmeur de la classe 'A'

103
00:04:54,930 --> 00:04:57,625
n'a plus le loisir de modifier 
les détails d'implémentation

104
00:04:57,625 --> 00:04:59,054
sur ses membres protégés,

105
00:04:59,054 --> 00:05:02,379
sans que le programmeur 
de la classe 'D' ne soit impacté.

106
00:05:02,379 --> 00:05:04,232
Le droit d'accès par défaut,

107
00:05:04,232 --> 00:05:07,804
c'est à dire celui où l'on ne précède 
la déclaration du membre

108
00:05:07,804 --> 00:05:09,469
par aucun mot clé,

109
00:05:09,469 --> 00:05:11,882
et pour peu que l'on soit 
dans un autre paquetage

110
00:05:11,882 --> 00:05:13,266
que le paquetage par défaut,

111
00:05:13,266 --> 00:05:15,559
est un peu plus restrictif 
que le droit protégé

112
00:05:15,559 --> 00:05:18,622
dans le sens où il ne va plus 
permettre ce genre d'accès.

113
00:05:20,260 --> 00:05:22,963
Avec le droit par défaut 
on ne peut accéder aux membres

114
00:05:22,963 --> 00:05:25,637
que dans les classes du même paquetage.

115
00:05:25,637 --> 00:05:27,192
Le droit d'accès par défaut,

116
00:05:27,192 --> 00:05:29,387
même si un peu plus restrictif 
que le droit protégé

117
00:05:29,387 --> 00:05:31,288
demeure nuisible à une bonne encapsulation

118
00:05:31,288 --> 00:05:33,578
puisqu'il permet un accès non contrôlé

119
00:05:33,578 --> 00:05:36,208
depuis toutes les classes 
du même paquetage.

120
00:05:36,208 --> 00:05:38,768
Pour résumer toute cette discussion, donc,

121
00:05:38,768 --> 00:05:41,841
une sous-classe n'a pas accès 
aux membres privés

122
00:05:41,841 --> 00:05:43,440
hérités des super-classes,

123
00:05:43,440 --> 00:05:45,452
si elle veut pouvoir utiliser 
ces membres privés,

124
00:05:45,452 --> 00:05:48,145
même si elle bénéficie 
de ces membres par héritage.

125
00:05:48,145 --> 00:05:50,770
Elle doit avoir recours 
à des getter/setters

126
00:05:50,770 --> 00:05:52,332
prévus dans la super-classe.

127
00:05:52,332 --> 00:05:55,888
Si une super-classe veut permettre 
à ses sous-classes d'accéder

128
00:05:55,888 --> 00:05:58,678
à un membre donné, alors elle doit 
le déclarer comme protégé

129
00:05:58,678 --> 00:06:02,566
mais attention, ceci nuit 
à une bonne encapsulation.

130
00:06:02,566 --> 00:06:07,282
Donc, les attributs protégés 
sont d'un usage peu recommandé.

131
00:06:07,282 --> 00:06:10,800
Enfin pour bien comprendre 
le droit d'accès protégé

132
00:06:10,800 --> 00:06:14,670
il faut comprendre qu'il s'agit 
d'une extension du niveau privé

133
00:06:14,670 --> 00:06:17,232
lorsqu'on se trouve 
en dehors des sous-classes

134
00:06:17,232 --> 00:06:19,700
et en dehors du même paquetage.

135
00:06:19,700 --> 00:06:22,612
Donc pour prendre un exemple concret,

136
00:06:22,612 --> 00:06:25,006
reprenons notre hiérarchie de personnages

137
00:06:25,006 --> 00:06:27,848
supposons que nous ayons donc, 
la sous-classe <i>Guerrier</i>

138
00:06:27,848 --> 00:06:30,119
héritant d'une super-classe <i>Personnage</i>,

139
00:06:30,119 --> 00:06:33,348
imaginons que la classe 
<i>Personnage</i> a été définie

140
00:06:33,348 --> 00:06:36,053
dans un paquetage particulier,

141
00:06:40,638 --> 00:06:42,544
paquetage <i>P1</i> par exemple.

142
00:06:42,548 --> 00:06:45,238
Peu importe le paquetage 
dans lequel sera défini

143
00:06:45,238 --> 00:06:48,525
la sous-classe <i>Guerrier</i>
par le fait du lien d'héritage,

144
00:06:48,525 --> 00:06:51,800
cette sous-classe peut directement 
accéder aux membres protégés

145
00:06:51,800 --> 00:06:54,090
au sein de ces méthodes.

146
00:06:54,090 --> 00:06:55,937
Donc à l'intérieur de la classe <i>Guerrier</i>

147
00:06:55,937 --> 00:06:57,809
on peut directement accéder 
à cet attribut protégé.
qui est dans la classe <i>Personnage</i>

148
00:06:57,809 --> 00:07:00,284
qui est dans la classe <i>Personnage</i>.

00:07:00,284 --> 00:07:04,013
En revanche, si je suis 
dans un autre paquetage

150
00:07:04,813 --> 00:07:08,699
par exemple, le paquetage <i>P2</i>

151
00:07:09,499 --> 00:07:12,543
et dans une classe 
qui n'a aucun lien d'héritage

152
00:07:12,543 --> 00:07:14,295
avec la classe <i>Personnage</i>,

153
00:07:14,295 --> 00:07:16,279
on peut imaginer par exemple, 
une classe <i>jeu</i>

154
00:07:16,279 --> 00:07:19,308
qui fasse intervenir 
dans son programme principal

155
00:07:19,308 --> 00:07:22,946
un certain nombre des personnages 
de notre hiérarchie

156
00:07:23,726 --> 00:07:26,594
par exemple, on peut imaginer 
que dans la méthode <i>main</i>

157
00:07:26,594 --> 00:07:29,735
on déclare une variable de type <i>Guerrier</i>

158
00:07:34,516 --> 00:07:38,969
l'accès à l'attribut <i>energie</i> depuis

159
00:07:40,189 --> 00:07:41,902
la méthode <i>main</i>

160
00:07:43,362 --> 00:07:46,076
au travers d'un objet 
de type <i>Guerrier</i> n'est pas possible.

161
00:07:46,076 --> 00:07:48,760
Pour les classes qui n'ont pas 
de lien d'héritage

162
00:07:48,760 --> 00:07:51,044
avec la classe <i>Personnage</i>
avec la super-classe

163
00:07:51,044 --> 00:07:53,335
et qui ne sont pas dans le même paquetage

164
00:07:53,335 --> 00:07:58,786
tout ce passe comme si 
l'attribut protégé était en réalité privé.

165
00:07:58,786 --> 00:08:01,099
Pour résumé les droits d'accès,

166
00:08:01,099 --> 00:08:03,866
donc les membres publics 
sont accessibles sans restriction

167
00:08:03,866 --> 00:08:05,846
à tous les programmeurs utilisateurs

168
00:08:05,846 --> 00:08:07,643
de la classe dans laquelle 
ils sont définis,

169
00:08:07,643 --> 00:08:10,998
les membres protégés sont destinés 
aux programmeurs d'extensions,

170
00:08:10,998 --> 00:08:13,686
par héritage ou travaillant 
dans le même paquetage

171
00:08:13,686 --> 00:08:16,765
mais sont potentiellement nuisible 
à une bonne encapsulation,

172
00:08:16,765 --> 00:08:20,605
enfin, les membres privés sont réservés 
aux programmeurs de la classe.

173
00:08:20,605 --> 00:08:23,336
Ils reflètent la structure interne 
de cette dernière

174
00:08:23,336 --> 00:08:25,910
et sont modifiables 
sans aucune répercussion

175
00:08:25,910 --> 00:08:29,457
ni sur les utilisateurs, 
ni sur les programmeurs des extensions.

176
00:08:29,457 --> 00:08:31,846
Voilà ceci conclut notre séquence

177
00:08:31,846 --> 00:08:34,635
sur les droits d'accès 
dans une hiérarchie de classes.
