1
00:00:04,059 --> 00:00:06,249
Dans cette séquence vidéo,
nous allons nous intéresser

2
00:00:06,249 --> 00:00:08,985
aux conséquences de l'héritage
sur les constructeurs,

3
00:00:08,985 --> 00:00:10,573
c'est-à-dire l'initialisation.

4
00:00:11,408 --> 00:00:14,396
Nous avions vu dans une séquence vidéo
précédente sur les constructeurs

5
00:00:14,396 --> 00:00:16,520
que lors d'une instanciation
d'une sous-classe,

6
00:00:16,520 --> 00:00:18,522
il nous fallait initialiser les attributs.

7
00:00:18,522 --> 00:00:19,974
C'est ce que nous faisions,

8
00:00:19,974 --> 00:00:24,368
par exemple, quand on déclare une
instance <i>r</i> de la classe <i>Rectangle</i>

9
00:00:25,088 --> 00:00:29,016
en passant par exemple
la largeur et la hauteur.

10
00:00:30,047 --> 00:00:32,988
Ceci était fait au moyen d'un constructeur

11
00:00:33,273 --> 00:00:36,096
qui était en charge d'initialiser
des attributs.

12
00:00:36,527 --> 00:00:40,235
Mais si la classe <i>Rectangle</i> hérite
d'une classe <i>FigureGeometrique</i>,

13
00:00:43,994 --> 00:00:46,924
alors la classe <i>Rectangle</i> reçoit
l'ensemble des attributs

14
00:00:46,924 --> 00:00:48,727
de la classe <i>FigureGeometrique</i>.

15
00:00:49,115 --> 00:00:52,299
Donc les constructeurs de la classe
<i>Rectangle</i> ont pour charge

16
00:00:52,299 --> 00:00:55,089
d'initialiser les attributs de
la classe <i>Rectangle</i>,

17
00:00:55,089 --> 00:00:59,971
y compris les attributs hérités de
la super-classe <i>FigureGeometrique</i>.

18
00:01:00,726 --> 00:01:04,279
Cependant, ce ne doit pas être
le concepteur de la classe <i>Rectangle</i>

19
00:01:04,279 --> 00:01:06,675
qui doit lui-même initialiser

20
00:01:06,762 --> 00:01:09,651
les attributs de la classe
<i>FigureGeometrique</i>,

21
00:01:09,651 --> 00:01:12,120
il serait peut-être même bien
incapable de le faire

22
00:01:12,120 --> 00:01:15,134
si la super-classe avait des
attributs privés ;

23
00:01:15,134 --> 00:01:16,955
ils ne pourraient pas y accéder.

24
00:01:16,955 --> 00:01:19,884
Donc, comment le concepteur de
la sous-classe <i>Rectangle</i>

25
00:01:20,017 --> 00:01:24,163
peut-il initialiser les attributs de la
super-classe <i>FigureGeometrique</i> ?

26
00:01:24,979 --> 00:01:28,515
Pour cela, il doit faire appel dans
le constructeur de Rectangle

27
00:01:28,515 --> 00:01:31,812
au constructeur de la classe
<i>FigureGeometrique</i>.

28
00:01:32,390 --> 00:01:35,529
L'initialisation des attributs
hérités doit se faire

29
00:01:35,529 --> 00:01:38,504
en appelant les constructeurs
des super-classes

30
00:01:38,504 --> 00:01:40,573
dans le constructeur des sous-classes.

31
00:01:41,196 --> 00:01:42,976
Voyons comment cela se fait en Java.

32
00:01:43,302 --> 00:01:45,633
Pour pouvoir appeler le constructeur
de la super-classe

33
00:01:45,633 --> 00:01:47,347
dans le constructeur de la sous-classe,

34
00:01:47,347 --> 00:01:50,288
il suffit d'utiliser la méthode <i>super</i>.

35
00:01:50,449 --> 00:01:52,538
Et pour ça, il faut bien sûr
que cet appel soit fait

36
00:01:52,538 --> 00:01:55,979
au tout début du corps de
constructeur de la sous-classe.

37
00:01:56,249 --> 00:01:57,722
Donc la syntaxe sera la suivante :

38
00:01:57,722 --> 00:01:59,613
dans le constructeur de la sous-classe,

39
00:01:59,613 --> 00:02:01,414
qui peut recevoir différents paramètres,

40
00:02:01,414 --> 00:02:05,277
tout au début de son corps,
on aura ici un appel

41
00:02:05,277 --> 00:02:08,297
à un des constructeurs de la super-classe

42
00:02:08,297 --> 00:02:11,507
en écrivant simplement comme
cela le mot-clé <i>super</i>

43
00:02:11,507 --> 00:02:15,802
et puis en passant à ce constructeur
les arguments nécessaires

44
00:02:15,802 --> 00:02:18,761
pour le constructeur de la super-classe
que l'on veut appeler.

45
00:02:19,131 --> 00:02:22,507
Et puis ensuite, derrière cette première
ligne du constructeur de la sous-classe,

46
00:02:22,880 --> 00:02:26,570
on pourra continuer à initialiser
des attributs de la sous-classe.

47
00:02:27,451 --> 00:02:31,425
A noter que si la super-classe admet
un constructeur par défaut,

48
00:02:31,425 --> 00:02:34,327
il n'est pas nécessaire
d'écrire explicitement

49
00:02:34,327 --> 00:02:36,652
l'appel au constructeur
de la super-classe,

50
00:02:36,652 --> 00:02:39,438
le compilateur se charge
pour vous d'appeler

51
00:02:39,438 --> 00:02:41,618
le constructeur par défaut
de la super-classe.

52
00:02:42,381 --> 00:02:43,875
Regardons en détails un exemple.

53
00:02:44,327 --> 00:02:48,001
Tout d'abord, si la classe n'a pas de
constructeur par défaut,

54
00:02:48,001 --> 00:02:52,106
alors à ce moment-là, il faut absolument
écrire explicitement l'appel

55
00:02:52,106 --> 00:02:54,738
à un des constructeurs de la super-classe.

56
00:02:54,738 --> 00:02:57,449
Donc évidemment, cela suppose
que la sous-classe

57
00:02:57,449 --> 00:02:59,873
a aussi elle-même un
constructeur explicite

58
00:02:59,873 --> 00:03:03,791
où on peut faire l'écriture de cet appel
au constructeur de la super-classe.

59
00:03:04,313 --> 00:03:07,759
Par exemple, si l'on considère
la classe <i>FigureGeometrique</i>

60
00:03:08,529 --> 00:03:13,108
avec un constructeur ici explicite et
pas de constructeur par défaut,

61
00:03:13,296 --> 00:03:15,519
un constructeur explicite qui prend
deux paramètres

62
00:03:15,519 --> 00:03:18,461
pour pouvoir initialiser un
attribut position, ici,

63
00:03:18,461 --> 00:03:22,705
donc on supposerait qu'il a un
constructeur comme ceci

64
00:03:23,125 --> 00:03:25,291
a deux paramètres x, y

65
00:03:25,291 --> 00:03:27,721
pour fixer la position de cette
figure géométrique.

66
00:03:27,721 --> 00:03:31,758
Puis on a une classe <i>Rectangle</i>, ici, qui
hérite de la classe <i>FigureGeometrique</i>,

67
00:03:31,758 --> 00:03:34,893
et dans cette classe <i>Rectangle</i>,
on va avoir un constructeur

68
00:03:34,893 --> 00:03:38,617
qui va recevoir les paramètres
pour pouvoir initialiser

69
00:03:38,617 --> 00:03:41,381
la position de sa super-classe
<i>FigureGeometrique</i> ;

70
00:03:41,381 --> 00:03:43,184
un Rectangle <i>est-une</i> FigureGeometrique

71
00:03:43,184 --> 00:03:46,808
et donc récupère par héritage la position
de la figure géométrique,

72
00:03:46,808 --> 00:03:50,452
donc un rectangle aura aussi une
position qu'il va falloir initialiser,

73
00:03:50,452 --> 00:03:52,213
et puis bien sûr, comme d'habitude,

74
00:03:52,213 --> 00:03:54,822
les paramètre <i>l</i> et <i>h</i> pour
pouvoir initialiser

75
00:03:54,822 --> 00:03:57,874
ses propres attributs <i>largeur</i> et <i>hauteur</i>.

76
00:03:58,385 --> 00:04:01,554
Donc ce constructeur, ici, qui prend
ces quatre paramètres,

77
00:04:01,554 --> 00:04:05,691
va commencer par appeler le
constructeur de la super-classe

78
00:04:05,691 --> 00:04:07,339
en écrivant le mot-clé <i>super</i>,

79
00:04:07,339 --> 00:04:09,141
puis en passant de deux paramètres,

80
00:04:09,141 --> 00:04:13,528
le constructeur de la super-classe qui
prend les deux paramètres <i>x</i> et <i>y</i>.

81
00:04:13,852 --> 00:04:16,234
Donc ici on va avoir un appel
à ce constructeur,

82
00:04:16,234 --> 00:04:18,530
lui-même initialisera donc la position.

83
00:04:18,952 --> 00:04:21,903
Et puis ensuite, comme d'habitude,
on continue en initialisant

84
00:04:21,903 --> 00:04:24,873
les attributs propres <i>largeur</i> et <i>hauteur</i>

85
00:04:24,873 --> 00:04:27,616
avec les paramètres reçus <i>l</i> et <i>h</i>.

86
00:04:28,798 --> 00:04:31,064
Dans le cas où la super-classe
<i>FigureGeometrique</i>

87
00:04:31,064 --> 00:04:32,867
a un constructeur par défaut,

88
00:04:32,867 --> 00:04:35,609
alors il n'est plus nécessaire de
faire un appel explicite

89
00:04:35,609 --> 00:04:38,902
au constructeur de la super-classe dans
le constructeur de la sous-classe,

90
00:04:38,902 --> 00:04:42,453
donc ici, par exemple, on a notre classe
<i>FigureGeometrique</i>

91
00:04:42,453 --> 00:04:45,309
qui a donc un constructeur par défaut,

92
00:04:45,309 --> 00:04:48,273
c'est-à-dire un constructeur qui
ne prend pas de paramètres,

93
00:04:48,273 --> 00:04:51,850
qui initialiserait par exemple
la position en 0.0 (zéro zéro).

94
00:04:52,144 --> 00:04:53,997
Donc dans ce cas-là, la
sous-classe <i>Rectangle</i>

95
00:04:53,997 --> 00:04:56,941
n'a pas besoin de faire un appel explicite
au constructeur par défaut

96
00:04:56,941 --> 00:05:00,214
et on l'a muni donc de son
constructeur usuel ici,

97
00:05:00,214 --> 00:05:02,660
qui prend les deux paramètres <i>l</i> et <i>h</i>

98
00:05:02,660 --> 00:05:05,675
pour initialiser sa largeur et sa hauteur.

99
00:05:05,675 --> 00:05:08,283
mais on voit qu'ici il n'y a pas
d'appel explicite

100
00:05:08,405 --> 00:05:10,235
au constructeur de la super-classe,

101
00:05:10,235 --> 00:05:11,877
en fait il y a, de fait,

102
00:05:11,877 --> 00:05:15,088
un appel au constructeur par défaut
de la super-classe

103
00:05:15,088 --> 00:05:17,876
qui est fait automatiquement
par le compilateur.

104
00:05:18,798 --> 00:05:21,190
A noter, parce que c'est une question
qui est parfois posée

105
00:05:21,190 --> 00:05:23,938
et que je pense qu'il est intéressant
de souligner cette remarque ;

106
00:05:23,938 --> 00:05:26,378
à noter donc qu'il n'est pas
forcément nécessaire

107
00:05:26,378 --> 00:05:28,837
d'avoir des attributs supplémentaires
dans la sous-classe,

108
00:05:28,837 --> 00:05:33,026
pour être obligé de redéfinir le
constructeur dans la sous-classe.

109
00:05:33,696 --> 00:05:35,278
Le constructeur de la sous-classe,

110
00:05:35,278 --> 00:05:38,334
même s'il n'y a pas d'attribut spécifique
dans la sous-classe,

111
00:05:38,334 --> 00:05:40,809
peut aussi servir a faire des
appels spécifiques

112
00:05:40,809 --> 00:05:42,690
à des constructeurs de la super-classe.

113
00:05:43,123 --> 00:05:44,287
Prenons cet exemple,

114
00:05:44,287 --> 00:05:48,000
où on suppose que <i>Carre</i> (carré) hérite
de la super-classe <i>Rectangle</i>.

115
00:05:48,000 --> 00:05:51,972
Un carré est un rectangle, c'est un
rectangle un petit peu particulier

116
00:05:51,972 --> 00:05:54,837
qui a la largeur et la hauteur
de même taille.

117
00:05:55,135 --> 00:05:58,231
Dans ce cas-là, on ne va pas introduire
d'attributs supplémentaires

118
00:05:58,231 --> 00:06:00,044
à la sous-classe <i>Carre</i>,

119
00:06:00,044 --> 00:06:02,218
mais on va quand même vouloir redéfinir

120
00:06:02,218 --> 00:06:04,526
un constructeur spécifique
dans la sous-classe.

121
00:06:04,526 --> 00:06:07,126
Le constructeur donc ici de la
sous-classe <i>Carre</i>

122
00:06:07,127 --> 00:06:10,117
appellera le constructeur de la
super-classe <i>Rectangle</i> en

123
00:06:10,117 --> 00:06:14,306
l'obligeant à avoir une taille identique
pour la hauteur et pour la largeur.

124
00:06:15,377 --> 00:06:16,997
A noter que dans cette classe <i>Carre</i>,

125
00:06:16,997 --> 00:06:20,167
il n'y aurait rien de plus que
simplement son constructeur, ici,

126
00:06:20,167 --> 00:06:22,164
qui oblige le constructeur de
la super-classe

127
00:06:22,164 --> 00:06:25,227
à avoir une largeur et une hauteur égales.

128
00:06:25,406 --> 00:06:28,356
Il n'y aurait rien de plus si, dans
la classe <i>Rectangle</i>

129
00:06:28,356 --> 00:06:31,873
il n'y a pas bien sûr de manipulateurs
<i>SetHauteur, SetLargeur</i>.

130
00:06:32,191 --> 00:06:34,775
Si par contre dans la super-classe
on a par exemple

131
00:06:35,315 --> 00:06:37,302
une méthode <i>SetHauteur</i>...

132
00:06:38,978 --> 00:06:40,695
qui recevrait donc par exemple,

133
00:06:40,695 --> 00:06:43,933
un paramètre <i>h</i> pour affecter la hauteur,

134
00:06:45,977 --> 00:06:51,047
alors dans la classe <i>Carre</i>, il faudrait
redéfinir cette méthode <i>SetHauteur</i>

135
00:06:51,576 --> 00:06:55,332
pour garantir qu'on ait toujours
la hauteur égale à la largeur,

136
00:06:55,332 --> 00:06:59,899
et donc ici, <i>SetHauteur</i> affecterait
aussi la largeur

137
00:07:00,157 --> 00:07:04,602
Et de même, si on avait un <i>SetLargeur</i>,
le <i>SetLargeur</i> lui-même affecterai aussi

138
00:07:04,602 --> 00:07:07,619
la hauteur de sorte à garantir
que, tout le temps,

139
00:07:07,619 --> 00:07:10,564
la hauteur est égale à la largeur
dans la classe <i>Carre</i>.

140
00:07:11,705 --> 00:07:13,389
Voilà donc pour ce cas particulier.

141
00:07:13,389 --> 00:07:17,814
Donc pour résumer l'implication de
l'héritage sur la construction,

142
00:07:17,814 --> 00:07:22,975
toute sous-classe doit avoir un appel
aux constructeurs de la super-classe,

143
00:07:22,975 --> 00:07:26,083
cela se fait au travers de
la méthode <i>super</i>

144
00:07:26,083 --> 00:07:28,268
avec les arguments
nécessaires pour appeler

145
00:07:28,268 --> 00:07:30,147
le constructeur de la super-classe.

146
00:07:30,147 --> 00:07:32,999
On fournit les arguments d'un des
constructeurs de la super-classe

147
00:07:33,166 --> 00:07:36,619
et cet appel a <i>super</i> doit être
la toute première instruction.

148
00:07:37,555 --> 00:07:40,574
Si jamais on a un appel à <i>super</i>
qui vient plus tard,

149
00:07:40,574 --> 00:07:42,330
ou qui vient deux fois d'ailleurs,

150
00:07:42,330 --> 00:07:45,606
on aura alors une erreur de la part
du compilateur.

151
00:07:46,382 --> 00:07:49,244
Aucune autre méthode que les
constructeurs des sous-classes

152
00:07:49,244 --> 00:07:51,332
ne peuvent appeler la méthode <i>super</i>.

153
00:07:51,844 --> 00:07:54,932
Cet appel à <i>super</i> peut être ignoré
si la super-classe

154
00:07:54,932 --> 00:07:56,876
a un constructeur par défaut.

155
00:07:57,683 --> 00:08:00,643
Dans ce cas-là, si la super-classe a un
constructeur par défaut,

156
00:08:00,643 --> 00:08:02,622
et que l'on oublie l'écriture à <i>super</i>,

157
00:08:02,622 --> 00:08:06,098
il y aura un appel automatique
généré automatiquement par le compilateur

158
00:08:06,098 --> 00:08:09,712
au constructeur par défaut
de la super-classe.

159
00:08:10,741 --> 00:08:13,299
J'en profite pour vous rappeler
que le constructeur par défaut,

160
00:08:13,299 --> 00:08:15,670
c'est-à-dire le constructeur qui
ne prend pas d'arguments,

161
00:08:15,670 --> 00:08:18,621
est un petit peu particulier en ce
sens que si on ne l'écrit pas,

162
00:08:18,623 --> 00:08:21,746
on a par défaut une version qui est
fournie par le compilateur

163
00:08:21,746 --> 00:08:23,502
de ce constructeur par défaut,

164
00:08:23,502 --> 00:08:26,218
et que dès que l'on écrit un autre
constructeur,

165
00:08:26,218 --> 00:08:29,910
alors le constructeur par défaut par
défaut n'existe plus.

166
00:08:29,910 --> 00:08:33,748
Et si on veut un constructeur par défaut
il faut à ce moment-là le réécrire.

167
00:08:33,748 --> 00:08:37,029
Donc pour éviter tout problème
lorsqu'on fait de l'héritage,

168
00:08:37,029 --> 00:08:38,925
dans un premier temps je vous conseille

169
00:08:38,925 --> 00:08:42,037
de toujours déclarer au moins
un constructeur

170
00:08:42,037 --> 00:08:44,061
et de toujours faire un appel explicite

171
00:08:44,061 --> 00:08:47,173
à un des constructeurs de la super-classe
dans la sous-classe,

172
00:08:47,173 --> 00:08:49,982
même si c'est le constructeur par défaut
que vous voulez appeler,

173
00:08:49,982 --> 00:08:52,162
vous pouvez quand même
l'écrire explicitement,

174
00:08:52,162 --> 00:08:54,259
ce sera plus clair dans un premier temps.

175
00:08:55,375 --> 00:08:58,341
Revenons maintenant en détails sur l'ordre
d'appel des constructeurs

176
00:08:58,341 --> 00:08:59,985
dans une hiérarchie de classes.

177
00:08:59,985 --> 00:09:03,467
Supposons par exemple que nous
ayons défini une classe C,

178
00:09:03,467 --> 00:09:06,596
qui a certains attributs,
certaines méthodes,

179
00:09:06,596 --> 00:09:08,904
et qui hérite d'une classe B,

180
00:09:08,904 --> 00:09:11,387
laquelle a ses propres attributs,
ses propres méthodes,

181
00:09:11,387 --> 00:09:14,756
et laquelle classe B hérite
elle-même d'une classe A

182
00:09:14,756 --> 00:09:16,972
avec ses attributs et ses méthodes.

183
00:09:16,972 --> 00:09:20,863
Et nous déclarons une instance,
ici <i>monC</i> de la classe C

184
00:09:20,863 --> 00:09:24,601
avec un appel ici a un des
constructeurs de cette classe C.

185
00:09:25,046 --> 00:09:28,528
Que se passe-t-il lorsque l'on déclare,
comme ceci, une instance,

186
00:09:28,528 --> 00:09:31,789
lors de l'appel donc de ce constructeur ?

187
00:09:32,320 --> 00:09:36,536
Ce constructeur, ici, aurait un appel
aux constructeurs de B

188
00:09:36,536 --> 00:09:38,315
que cette écriture soit explicite

189
00:09:38,315 --> 00:09:40,399
ou que ce soit un appel au
constructeur par défaut,

190
00:09:40,399 --> 00:09:43,269
et ensuite bien sûr,
l'initialisation des attributs.

191
00:09:43,269 --> 00:09:45,728
Donc lorsque l'on appelle ici
le constructeur,

192
00:09:45,728 --> 00:09:50,825
on va commencer par appeler le
constructeur de la classe B.

193
00:09:50,825 --> 00:09:53,047
Le constructeur de la classe B
a lui-même l'appel

194
00:09:53,047 --> 00:09:55,547
à un des constructeurs de sa super-classe.

195
00:09:55,554 --> 00:09:58,815
Et donc, dans cet appel ici du
constructeur de la classe B

196
00:09:58,815 --> 00:10:00,757
dans le constructeur de la classe C

197
00:10:00,757 --> 00:10:05,693
on a d'abord en tout premier un appel aux
constructeurs de la super super-classe A.

198
00:10:05,693 --> 00:10:08,173
Donc la toute première chose
qui va se faire c'est

199
00:10:08,173 --> 00:10:11,334
lors de l'appel du constructeur de C,

200
00:10:11,334 --> 00:10:15,296
c'est l'exécution du constructeur
de la super super-classe

201
00:10:15,296 --> 00:10:17,535
de la classe la plus haute
dont on dérive.

202
00:10:17,535 --> 00:10:20,355
Et donc l'exécution de ce
constructeur va commencer

203
00:10:20,355 --> 00:10:23,488
par initialiser les attributs a1 et a2

204
00:10:23,488 --> 00:10:25,892
et donc, dans la construction d'un C,

205
00:10:25,892 --> 00:10:28,427
on aura lancé la construction d'un B,

206
00:10:28,427 --> 00:10:31,061
lequel B aura lancé la
construction d'un A.

207
00:10:31,755 --> 00:10:34,366
La première chose qui se passe dans
cette construction du C,

208
00:10:34,366 --> 00:10:36,926
c'est la construction de sa partie A ;

209
00:10:36,926 --> 00:10:39,600
je vous rappelle que, au travers de
la relation d'héritage,

210
00:10:39,600 --> 00:10:42,459
C hérite tous les attributs de B,

211
00:10:42,459 --> 00:10:44,886
B hérite tous les attributs de A,

212
00:10:44,886 --> 00:10:49,869
donc dans C, on a effectivement un
attribut a1 et un attribut a2.

213
00:10:49,869 --> 00:10:53,535
Donc dans la construction de ce C,
qui n'est pas encore terminée,

214
00:10:53,535 --> 00:10:56,853
on a commencé par construire
la sous-partie, ici A.

215
00:10:57,021 --> 00:10:58,999
C'est la première chose qui se passe.

216
00:10:59,278 --> 00:11:02,680
Une fois qu'on a terminé toute l'exécution
du constructeur de A,

217
00:11:02,680 --> 00:11:05,155
on revient ici dans le constructeur de B

218
00:11:05,155 --> 00:11:08,692
pour initialiser ses propres attributs,
les propres attributs de la classe B,

219
00:11:08,692 --> 00:11:13,067
et donc construire ici l'attribut
b1 de la classe B.

220
00:11:13,795 --> 00:11:16,701
Et puis on termine donc l'exécution
du constructeur de B

221
00:11:16,701 --> 00:11:18,912
et on est donc, à ce stade-là,

222
00:11:18,912 --> 00:11:21,132
dans l'exécution du constructeur de C,

223
00:11:21,132 --> 00:11:23,733
on termine l'exécution du
constructeur de C

224
00:11:23,733 --> 00:11:28,425
qui va donc construire la partie propre
à C, les attributs propres à C,

225
00:11:28,430 --> 00:11:30,435
exécuter son corps, si jamais.

226
00:11:30,435 --> 00:11:33,194
Et donc ceci termine la construction de C.

227
00:11:33,194 --> 00:11:35,635
Donc dans la construction
d'une sous sous-classe,

228
00:11:35,635 --> 00:11:37,088
on commence d'abord par appeler

229
00:11:37,088 --> 00:11:39,872
le constructeur de la classe la plus
élevée dont on dérive

230
00:11:39,872 --> 00:11:43,495
puis ainsi de suite tous les constructeurs
des super-classes intermédiaires.

231
00:11:43,495 --> 00:11:47,814
Enfin on termine par la partie spécifique
aux constructeurs de la classe

232
00:11:47,814 --> 00:11:49,988
dont on est en train de
créer une instance.

233
00:11:51,118 --> 00:11:53,254
Voilà, ceci conclut donc
cette séquence vidéo

234
00:11:53,254 --> 00:11:56,643
sur les conséquences de l'héritage dans
la construction des objets.
