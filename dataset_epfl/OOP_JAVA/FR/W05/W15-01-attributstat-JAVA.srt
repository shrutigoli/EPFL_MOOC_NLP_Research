1
00:00:04,218 --> 00:00:06,291
Dans les séquences précédentes, 
nous avons vu que

2
00:00:06,291 --> 00:00:08,633
les attributs définis 
à l'intérieur d'une classe représentent

3
00:00:08,633 --> 00:00:11,838
des informations qui sont spécifiques
à chaque instance de la classe.

4
00:00:11,838 --> 00:00:13,908
Si l'on reprend notre
petit exemple du rectangle,

5
00:00:13,908 --> 00:00:17,511
chaque instance de rectangle, 
chaque objet de type rectangle,

6
00:00:17,511 --> 00:00:20,467
va avoir sa propre largeur, 
sa propre hauteur,

7
00:00:20,467 --> 00:00:23,637
des informations qui lui sont spécifiques 
et qui la caractérisent.

8
00:00:23,637 --> 00:00:26,416
Que se passe-t-il cependant 
si plusieurs instances d'une même classe

9
00:00:26,416 --> 00:00:28,411
ont besoin d'accéder à 
une même information,

10
00:00:28,411 --> 00:00:29,808
une information commune ?

11
00:00:29,808 --> 00:00:31,547
C'est l'objet de la séquence qui suit.

12
00:00:31,547 --> 00:00:35,758
Nous avons jusqu'ici utilisé différentes 
sortes de variables dans nos programmes,

13
00:00:35,758 --> 00:00:38,579
nous avons utilisé 
des variables d'instances,

14
00:00:38,579 --> 00:00:40,546
ce que l'on appelle 
communément des attributs,

15
00:00:40,546 --> 00:00:42,952
nous avons utilisé des variables locales,

16
00:00:42,952 --> 00:00:46,824
c'est-à-dire des variables déclarées
à l'intérieur du corps de méthode,

17
00:00:46,824 --> 00:00:49,239
ainsi que des paramètres 
que l'on peut assimiler

18
00:00:49,239 --> 00:00:51,251
à des variables locales dans les méthodes,

19
00:00:51,251 --> 00:00:53,891
et qui servent à communiquer 
des données à des méthodes

20
00:00:53,891 --> 00:00:55,498
pour qu'elles puissent travailler.

21
00:00:55,498 --> 00:00:59,417
Dans cette séquence, vous allez découvrir
la notion de variable statique,

22
00:00:59,417 --> 00:01:01,969
qu'on appelle également 
des variables de classe,

23
00:01:01,969 --> 00:01:04,709
par opposition aux variables d'instance.

24
00:01:04,709 --> 00:01:07,700
Il s'agit en fait d'attributs particuliers

25
00:01:07,700 --> 00:01:11,766
dont la déclaration est précédée 
du mot réservé « static »,

26
00:01:11,766 --> 00:01:14,786
ils ressemblent aux attributs classiques,
aux variables d'instances,

27
00:01:14,786 --> 00:01:17,010
ils sont déclarés de la même façon,

28
00:01:17,010 --> 00:01:20,719
hormis le modificateur statique
qui vient en plus,

29
00:01:20,719 --> 00:01:22,813
déclarés comme les attributs d'instance,

30
00:01:22,813 --> 00:01:25,074
comme les variables d'instance,
en dehors des méthodes.

31
00:01:25,074 --> 00:01:29,582
Tout comme les variables d'instance,
ils sont visibles partout dans la classe

32
00:01:29,582 --> 00:01:32,269
et sont également hérités 
par les sous-classes.

33
00:01:32,269 --> 00:01:34,854
Nous allons dans cette séquence 
surtout nous attarder

34
00:01:34,854 --> 00:01:36,208
sur les variables statiques,

35
00:01:36,208 --> 00:01:41,053
mais il faut savoir qu'il existe 
également des méthodes statiques,

36
00:01:45,211 --> 00:01:47,481
ce que nous allons couvrir 
un peu plus tard.

37
00:01:47,481 --> 00:01:51,133
En clair, le modificateur statique
s'utilise en Java

38
00:01:51,133 --> 00:01:54,152
aussi bien pour les variables 
que pour les méthodes,

39
00:01:54,152 --> 00:01:57,252
dans les deux cas, un membre statique
peut être utilisé

40
00:01:57,252 --> 00:02:00,203
sans avoir construit d'objet 
au préalable.

41
00:02:00,203 --> 00:02:02,777
Vous noterez qu'en Java, 
le modificateur statique

42
00:02:02,777 --> 00:02:05,385
ne s'applique pas aux variables locales,

43
00:02:05,385 --> 00:02:09,460
c'est-à-dire aux variables déclarées
à l'intérieur du corps de méthode.

44
00:02:09,460 --> 00:02:11,631
Mais que veut dire qu'un membre statique

45
00:02:11,631 --> 00:02:14,417
puisse être accédé 
sans construire d'objets ?

46
00:02:14,417 --> 00:02:18,728
Si l'on reprend l'exemple du rectangle,

47
00:02:18,728 --> 00:02:24,504
ce que nous avons utilisé jusqu'ici
étaient des attributs

48
00:02:24,504 --> 00:02:28,632
déclarés à l'intérieur de la classe,

49
00:02:28,632 --> 00:02:36,385
ce que l'on appelle désormais aussi
des variables d'instance,

50
00:02:36,385 --> 00:02:42,318
et nous avions des méthodes,

51
00:02:42,318 --> 00:02:44,696
et dans ce contexte, 
il est strictement impossible

52
00:02:44,696 --> 00:02:47,764
d'utiliser un membre 
de la classe rectangle

53
00:02:47,764 --> 00:02:52,606
sans construire au préalable 
une instance de rectangle.

54
00:02:52,606 --> 00:02:57,685
Donc ici par exemple, si je veux 
utiliser la méthode surface,

55
00:02:57,685 --> 00:03:05,474
je suis obligé de construire 
un objet de type rectangle,

56
00:03:05,474 --> 00:03:10,714
et au travers de cet objet, 
appeler la méthode qui calcule la surface,

57
00:03:10,714 --> 00:03:14,544
je calcule la surface du rectangle.

58
00:03:14,544 --> 00:03:17,867
Un membre statique, que ce soit
une variable ou une méthode,

59
00:03:17,867 --> 00:03:21,161
est invocable sans avoir au préalable 
créé une instance

60
00:03:21,161 --> 00:03:23,791
en utilisant uniquement 
le nom de la classe

61
00:03:23,791 --> 00:03:27,177
selon des modalités que nous allons
examiner un peu plus tard.

62
00:03:27,177 --> 00:03:29,737
Donc une des facettes
est que l'on peut utiliser

63
00:03:29,737 --> 00:03:32,186
un membre statique
sans construire d'objets,

64
00:03:32,186 --> 00:03:36,230
l'autre facette, relative
aux variables statiques,

65
00:03:36,230 --> 00:03:41,288
est qu'elles sont partagées entre
toutes les instances de la classe.

66
00:03:41,288 --> 00:03:44,609
Vous avez appris jusqu'ici 
que chaque instance dispose

67
00:03:44,609 --> 00:03:48,787
d'une zone mémoire qui lui est propre
pour chacun de ses attributs.

68
00:03:48,787 --> 00:03:54,115
En clair, chaque rectangle instancié 
dans un programme aura

69
00:03:54,115 --> 00:03:58,345
ses propres zones mémoire 
pour la largeur et la hauteur.

70
00:03:58,345 --> 00:04:03,027
Donc ici par exemple, 
pour le rectangle « r1 »,

71
00:04:03,035 --> 00:04:05,890
nous aurons des zones mémoire stockant

72
00:04:05,890 --> 00:04:09,192
la valeur des largeurs et hauteurs 
pour le rectangle en question,

73
00:04:09,192 --> 00:04:15,564
pour un autre rectangle, 
il y aura d'autres zones mémoire

74
00:04:15,564 --> 00:04:18,843
qui vont stocker la largeur et la hauteur 
de ce deuxième rectangle.

75
00:04:22,528 --> 00:04:25,949
C'est pour cela d'ailleurs qu'on parle 
de variable d'instance,

76
00:04:25,949 --> 00:04:30,093
car chaque instance dispose
de ses propres variables.

77
00:04:30,093 --> 00:04:35,608
Par opposition, une variable statique 
serait une zone mémoire unique

78
00:04:35,608 --> 00:04:38,445
liée à la classe plutôt qu'aux instances,

79
00:04:38,445 --> 00:04:43,294
mais également accessible
via chaque instance.

80
00:04:43,294 --> 00:04:47,497
Donc en clair, pour les variables
d'instance, les attributs,

81
00:04:47,497 --> 00:04:49,532
il y a réservation d'une zone mémoire

82
00:04:49,532 --> 00:04:52,727
pour chaque objet que l'on a instancié,
donc créé avec « new »,

83
00:04:52,727 --> 00:04:56,662
donc chaque objet a sa propre 
zone mémoire, chaque valeur

84
00:04:56,662 --> 00:04:58,945
pour la variable d'instance en question,

85
00:04:58,945 --> 00:05:01,941
pour une variable de classe, 
c'est-à-dire un attribut de la classe

86
00:05:01,941 --> 00:05:04,304
que l'on aurait déclaré comme statique,

87
00:05:04,304 --> 00:05:07,024
il y a réservation 
d'une zone mémoire unique,

88
00:05:07,024 --> 00:05:09,979
cette réservation se fait 
dès lors que l'on charge la classe,

89
00:05:09,979 --> 00:05:14,521
c'est-à-dire pour simplifier, dès lors que 
la classe est mentionnée dans un programme.

90
00:05:14,521 --> 00:05:17,376
Aucune zone mémoire ne sera
réservée pour cet attribut

91
00:05:17,376 --> 00:05:20,505
lorsque l'on crée une nouvelle
instance avec « new ».

92
00:05:20,505 --> 00:05:23,157
Cet attribut reste néanmoins accessible

93
00:05:23,157 --> 00:05:25,667
comme les attributs classiques 
utilisés jusqu'ici,

94
00:05:25,667 --> 00:05:27,387
via tous les objets de la classe,

95
00:05:27,387 --> 00:05:30,440
lesquels se référeront 
à la même zone mémoire,

96
00:05:30,440 --> 00:05:34,609
la zone mémoire unique réservée 
pour cet attribut statique.

97
00:05:34,609 --> 00:05:36,580
Voyons ceci sur un exemple concret.

98
00:05:36,580 --> 00:05:41,693
Nous avons le cas d'une classe « A »
qui contient une variable d'instance,

99
00:05:41,693 --> 00:05:44,296
un attribut comme nous l'avons 
toujours utilisé jusqu'ici,

100
00:05:44,296 --> 00:05:47,445
et une variable de classe, 
c'est-à-dire un attribut

101
00:05:47,445 --> 00:05:51,051
dont la déclaration est précédée 
du mot réservé « static ».

102
00:05:51,051 --> 00:05:55,035
La classe « A » contient également 
une méthode modifiée,

103
00:05:55,035 --> 00:05:58,414
laquelle peut accéder à
tous les attributs de la classe,

104
00:05:58,414 --> 00:06:00,876
qu'ils soient statiques ou non statiques.

105
00:06:00,876 --> 00:06:02,999
Examinons maintenant pas à pas
ce qui se passe

106
00:06:02,999 --> 00:06:05,685
lors de l'exécution du code suivant.

107
00:06:05,685 --> 00:06:07,921
En fait, en amont même de l'exécution,

108
00:06:07,921 --> 00:06:10,959
dès que la classe « A » est utilisée 
dans un programme,

109
00:06:10,959 --> 00:06:13,786
étant donné qu'elle contient 
une variable statique « c »,

110
00:06:13,786 --> 00:06:18,637
il y aura réservation d'un emplacement 
mémoire pour cette variable statique « c »,

111
00:06:18,637 --> 00:06:24,828
laquelle sera initialisée à 10
en raison de cette ligne.

112
00:06:24,828 --> 00:06:26,852
Si l'on examine cette 
première ligne de code,

113
00:06:26,852 --> 00:06:29,952
la première chose que l'on peut remarquer,
est que la variable de classe

114
00:06:29,952 --> 00:06:33,067
est accessible indépendamment 
de la création de toute instance,

115
00:06:33,067 --> 00:06:37,468
on peut accéder à l'attribut « c » au travers 
du nom de la classe uniquement,

116
00:06:37,468 --> 00:06:40,760
sans passer par
la création d'une instance.

117
00:06:40,760 --> 00:06:42,715
Lorsque l'on exécute cette ligne de code,

118
00:06:42,715 --> 00:06:45,152
on va incrémenter la variable de classe « c »,

119
00:06:45,152 --> 00:06:51,101
variable de classe de la classe « A »,
laquelle a déjà été initialisée,

120
00:06:51,101 --> 00:06:53,203
nous allons donc nous trouver 
dans cette situation,

121
00:06:53,203 --> 00:06:56,488
la valeur de « c » va passer de 10 à 11.

122
00:06:56,488 --> 00:06:59,165
Les deux lignes suivantes déclarent 
une instance de « A »,

123
00:06:59,165 --> 00:07:02,247
et l'initialisent au moyen 
du constructeur par défaut.

124
00:07:02,247 --> 00:07:06,236
Chaque instance de « A » dispose de
ses propres variables d'instance,

125
00:07:06,236 --> 00:07:08,960
ici en l'occurrence, 
la variable d'instance « b ”,

126
00:07:08,960 --> 00:07:11,830
ce qui veut dire qu'au terme 
de l'exécution de cette ligne,

127
00:07:11,830 --> 00:07:14,620
la situation en mémoire sera la suivante,

128
00:07:14,620 --> 00:07:16,750
nous aurons donc une variable « v1 »

129
00:07:16,750 --> 00:07:20,568
contenant une référence vers un objet
de type « A »,

130
00:07:20,568 --> 00:07:22,433
qui dispose d'un attribut « b »,

131
00:07:22,433 --> 00:07:26,929
lequel est initialisé 
grâce à cette ligne, à 1.

132
00:07:26,929 --> 00:07:30,888
La méthode modifiée est ensuite
appelée sur l'instance « v1 »,

133
00:07:30,888 --> 00:07:35,385
cette méthode incrémente la valeur
de la variable d'instance « b »,

134
00:07:35,385 --> 00:07:39,354
nous allons donc nous trouver
dans cette situation,

135
00:07:39,354 --> 00:07:42,284
au terme de l'exécution de cette ligne.

136
00:07:42,284 --> 00:07:47,054
La méthode modifiée incrémente ensuite
la variable de classe « c ¢,

137
00:07:47,054 --> 00:07:49,807
vous noterez au passage
que les méthodes de la classe « A »

138
00:07:49,807 --> 00:07:52,485
peuvent accéder aux attributs statiques,

139
00:07:52,485 --> 00:07:56,461
de la même façon exactement qu'ils
accèdent aux attributs non statiques,

140
00:07:56,461 --> 00:07:58,652
aux variables d'instance.

141
00:07:58,658 --> 00:08:01,499
L'exécution de cette seconde ligne
de la méthode modifiée

142
00:08:01,499 --> 00:08:05,404
va donc résulter dans une 
incrémentation supplémentaire

143
00:08:05,404 --> 00:08:08,935
de la variable de classe « c »,
laquelle va passer à 12.

144
00:08:08,935 --> 00:08:12,523
On a donc pu ici modifier
la valeur de la variable de classe

145
00:08:12,523 --> 00:08:15,035
de l'attribut statique aussi bien 
en passant uniquement

146
00:08:15,035 --> 00:08:17,856
par le nom de la classe,
qu'en passant par une instance,

147
00:08:17,856 --> 00:08:20,224
donc ici au travers de l'instance « v1 »,

148
00:08:20,224 --> 00:08:24,457
on a pu modifier la valeur
de la variable de classe « c ».

149
00:08:24,457 --> 00:08:27,531
La variable modifiée, que ce soit 
au travers du nom de la classe,

150
00:08:27,531 --> 00:08:32,097
ou au travers d'une instance,
est une zone mémoire unique.

151
00:08:32,097 --> 00:08:34,586
Nous avons donc vu
au travers de cet exemple

152
00:08:34,586 --> 00:08:36,847
que lorsque l'on modifie 
une variable d'instance,

153
00:08:36,847 --> 00:08:39,599
la valeur change uniquement
pour l'objet courant,

154
00:08:39,599 --> 00:08:42,429
par contre, lorsqu'on modifie
une variable de classe,

155
00:08:42,429 --> 00:08:46,167
la valeur change pour
tous les objets de la classe.

156
00:08:46,167 --> 00:08:50,987
En effet, la variable de classe est unique
et accessible par tous les objets.

157
00:08:50,987 --> 00:08:53,756
Comme nous venons de le voir 
sur l'exemple précédent,

158
00:08:53,756 --> 00:08:57,041
une variable statique peut être utilisée
au travers du nom de la classe

159
00:08:57,041 --> 00:08:59,425
sans passer par la création d'un objet,

160
00:08:59,425 --> 00:09:01,844
on peut donc utiliser
des membres statiques

161
00:09:01,844 --> 00:09:03,623
en se passant complètement des objets,

162
00:09:03,623 --> 00:09:07,197
ce qui va à l'encontre
de l'approche « orienté objet ».

163
00:09:07,207 --> 00:09:11,841
Utiliser des membres statiques pour 
contourner l'approche « orienté objet »

164
00:09:11,841 --> 00:09:15,414
est évidemment une mauvaise raison
d'utiliser des variables statiques.

165
00:09:15,414 --> 00:09:18,801
Une bonne raison par contre
est de représenter une valeur commune

166
00:09:18,801 --> 00:09:20,553
à tous les objets d'une classe.

167
00:09:20,553 --> 00:09:22,378
Étudions ceci sur un exemple concret.

168
00:09:22,378 --> 00:09:26,418
Imaginons que dans un programme,
nous ayons à utiliser une classe « Employe »,

169
00:09:26,418 --> 00:09:30,138
et que nous devions représenter
le fait que 65 ans

170
00:09:30,138 --> 00:09:33,627
est l'âge officiel de départ 
à la retraite pour tous les employés.

171
00:09:33,627 --> 00:09:37,137
Et considérons deux versions possibles
pour mettre en place cela.

172
00:09:37,137 --> 00:09:41,111
Donc une version où 
on utilise une variable d'instance

173
00:09:41,111 --> 00:09:42,942
pour modéliser l'âge de la retraite,

174
00:09:42,942 --> 00:09:46,341
et une autre version où l'on utilise
une variable de classe,

175
00:09:46,341 --> 00:09:47,960
une variable statique.

176
00:09:47,960 --> 00:09:50,232
Première version donc,
une classe « Employe »

177
00:09:50,232 --> 00:09:54,648
qui modéliserait l'âge de la retraite
comme une variable d'instance.

178
00:09:54,648 --> 00:09:57,603
Le constructeur de la classe « Employe1 »
serait donc en charge

179
00:09:57,603 --> 00:10:01,727
d'initialiser chacun des attributs au 
moyen de valeurs passées en paramètres.

180
00:10:01,727 --> 00:10:04,147
Supposons maintenant 
qu'une classe « Entreprise »

181
00:10:04,147 --> 00:10:07,377
utilise ce type « Employe1 »,
notamment pour créer un tableau

182
00:10:07,377 --> 00:10:09,439
contenant un certain nombre d'employés,

183
00:10:09,439 --> 00:10:11,790
et chacun des éléments du tableau

184
00:10:11,790 --> 00:10:14,630
sera rempli en créant 
une instance d'employés.

185
00:10:14,630 --> 00:10:17,401
Comme l'âge officiel de départ 
à la retraite a été modélisée

186
00:10:17,401 --> 00:10:19,489
au moyen d'une variable d'instance,

187
00:10:19,489 --> 00:10:24,944
chaque employé va stocker une zone mémoire
qui contient cet âge officiel,

188
00:10:24,944 --> 00:10:27,247
qui se trouve être le même
pour tout le monde.

189
00:10:27,247 --> 00:10:31,028
Il y a donc pour chaque employé
réservation d'une zone mémoire

190
00:10:31,028 --> 00:10:33,745
pour contenir exactement
la même information.

191
00:10:33,745 --> 00:10:36,403
Donc si on a un milliers d'employés,

192
00:10:36,403 --> 00:10:40,449
on va se retrouver avec mille fois
la valeur 65 stockée,

193
00:10:40,449 --> 00:10:43,708
ce qui est évidemment
une duplication inutile.

194
00:10:43,708 --> 00:10:46,708
De plus, cette duplication cause 
de gros problèmes de maintenance,

195
00:10:46,708 --> 00:10:48,868
supposons par exemple que la loi change,

196
00:10:48,868 --> 00:10:52,530
et que l'âge officiel de départ 
à la retraite soit désormais de 67 ans.

197
00:10:52,530 --> 00:10:55,326
Il faudrait donc parcourir toutes 
les instances possibles

198
00:10:55,326 --> 00:10:59,923
pour aller modifier cet âge, 
de façon appropriée.

199
00:10:59,923 --> 00:11:03,164
Si les instances ont été stockées
dans un tableau, c'est encore faisable,

200
00:11:03,164 --> 00:11:06,680
mais imaginez que les instances
ont été créées de façon indépendante,

201
00:11:06,680 --> 00:11:10,318
ceci pose évidemment 
un gros souci de mise à jour.

202
00:11:10,318 --> 00:11:13,492
Dans la seconde version, où on utilise 
maintenant une variable statique

203
00:11:13,492 --> 00:11:15,659
pour l'âge officiel
de départ à la retraite,

204
00:11:15,659 --> 00:11:19,135
donc où l'on précède la déclaration 
de l'attribut du mot réservé « static »,

205
00:11:19,135 --> 00:11:20,990
on a plus du tout ce problème,

206
00:11:20,990 --> 00:11:24,537
en effet il existera 
une zone mémoire unique

207
00:11:24,537 --> 00:11:26,849
accessible par toutes les instances,

208
00:11:26,849 --> 00:11:29,217
qui contiendra cet âge 
de la retraite officiel,

209
00:11:29,217 --> 00:11:30,766
qui est le même pour tout le monde.

210
00:11:30,766 --> 00:11:34,449
Cet âge de la retraite pourra
être accédé via toute instance,

211
00:11:34,449 --> 00:11:36,271
ou via le nom de la classe,

212
00:11:36,271 --> 00:11:38,185
il n'y a plus de duplication 
d'informations,

213
00:11:38,185 --> 00:11:41,191
et il est facile de faire la modification.

214
00:11:41,201 --> 00:11:45,193
On n'a ici plus besoin de rechercher 
toutes les instances possibles d'employés

215
00:11:45,193 --> 00:11:48,789
pour y modifier l'âge de la retraite
et le faire passer à 67 ans.

216
00:11:48,789 --> 00:11:51,527
Voilà, j'espère que ce petit exemple 
vous aura convaincus

217
00:11:51,527 --> 00:11:54,813
de l'utilité d'utiliser à bon escient
des variables statiques,

218
00:11:54,813 --> 00:11:58,466
notons également sur ce chapitre
que pour les constantes

219
00:11:58,466 --> 00:12:01,290
qui sont communes à 
toutes les instances d'une classe,

220
00:12:01,290 --> 00:12:04,526
il est inutile de stocker une valeur
pour chaque objet de la classe,

221
00:12:04,526 --> 00:12:08,016
il faut en fait les déclarer 
en « final static ».

222
00:12:08,016 --> 00:12:10,137
Par exemple, si pour une classe « Planete »,

223
00:12:10,137 --> 00:12:13,078
on a besoin d'utiliser G, 
la constante gravitationnelle,

224
00:12:13,078 --> 00:12:15,595
cette constante est la même 
pour toutes les planètes,

225
00:12:15,595 --> 00:12:17,849
et dans ce cas là, il vaut mieux déclarer

226
00:12:17,849 --> 00:12:20,988
la constante en question 
comme « final static »,

227
00:12:20,988 --> 00:12:22,894
plutôt que simplement comme « final »,

228
00:12:22,894 --> 00:12:27,150
pour éviter de dupliquer cette constante
pour chaque instance de planète.

229
00:12:27,150 --> 00:12:29,934
Pour conclure sur le chapitre 
des variables statiques,

230
00:12:29,934 --> 00:12:32,972
reprenons une instruction 
bien souvent utilisée,

231
00:12:32,972 --> 00:12:35,693
nous sommes à même en fait 
maintenant de comprendre

232
00:12:35,693 --> 00:12:38,168
en quoi consiste cette instruction,

233
00:12:38,168 --> 00:12:42,159
que nous avons jusqu'ici utilisée un peu
plus tôt comme une incantation magique.

234
00:12:42,159 --> 00:12:45,496
Que peut-on utiliser directement
au travers du nom d'une classe,

235
00:12:45,496 --> 00:12:48,706
eh bien ce n'est rien d'autre 
qu'une variable statique,

236
00:12:48,706 --> 00:12:50,511
« out » est donc une variable statique,

237
00:12:50,511 --> 00:12:53,452
et elle doit donc vraisemblablement 
contenir la référence à un objet

238
00:12:53,452 --> 00:12:55,867
puisqu'on applique sur 
cette variable « out » une méthode,

239
00:12:55,867 --> 00:12:57,995
visiblement la méthode « println ».

240
00:12:57,995 --> 00:13:02,239
« out » est bel et bien une variable statique
de la classe « System »,

241
00:13:02,239 --> 00:13:04,942
une variable de type « PrintStream »,

242
00:13:04,942 --> 00:13:08,190
il s'agit donc d'une instance
de la classe « PrintStream »,

243
00:13:08,190 --> 00:13:12,518
et cette classe « PrintStream »
contient une méthode « println »,

244
00:13:12,518 --> 00:13:14,485
laquelle est invoquée par ce biais.

245
00:13:14,485 --> 00:13:17,178
Ceci conclut notre séquence 
sur les variables statiques.

246
00:13:17,178 --> 00:13:18,457
Dans une séquence suivante,

247
00:13:18,457 --> 00:13:20,550
vous aurez l'occasion d'aborder 
les méthodes statiques.
