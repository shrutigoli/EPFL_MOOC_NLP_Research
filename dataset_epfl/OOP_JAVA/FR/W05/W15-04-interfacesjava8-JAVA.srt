1
00:00:04,520 --> 00:00:06,650
Comme esquissé dans une vidéo précédente,

2
00:00:06,650 --> 00:00:11,070
le concept d'interface a fait l'objet
depuis Java 8 d'ajouts importants.

3
00:00:11,070 --> 00:00:15,160
L'objectif de cette vidéo est de vous
présenter ces ajouts et en particulier

4
00:00:15,160 --> 00:00:18,299
la notion de définition par défaut
des méthodes dans une interface.

5
00:00:19,310 --> 00:00:22,990
Nous avons vu que, jusqu'à Java 7 compris,
une interface pouvait contenir

6
00:00:22,990 --> 00:00:25,980
des constantes ainsi que des
en-têtes de méthodes abstraites.

7
00:00:27,090 --> 00:00:31,150
Ce contenu est bien évidemment toujours
également possible pour les interfaces en

8
00:00:31,150 --> 00:00:36,000
Java 8, mais en plus il est possible
de donner un corps aux méthodes.

9
00:00:36,000 --> 00:00:40,240
On peut donner une définition par
défaut à des méthodes d'une interface,

10
00:00:40,240 --> 00:00:42,210
c'est une nouveauté notable.

11
00:00:42,210 --> 00:00:45,880
Il est également possible de donner, de
définir à l'intérieur d'une interface un

12
00:00:45,880 --> 00:00:50,120
certain nombre de méthodes statiques de la
même façon que nous procédons pour définir

13
00:00:50,120 --> 00:00:51,740
des méthodes statiques dans une classe.

14
00:00:53,550 --> 00:00:57,591
Dans le cadre de cette vidéo, nous allons
essentiellement exposer cette partie,

15
00:00:57,591 --> 00:01:01,530
c'est-à-dire la définition par défaut
pour les méthodes d'une interface.

16
00:01:01,530 --> 00:01:05,300
Le second volet est l'objet d'un
complément PDF que vous pouvez retrouver

17
00:01:05,300 --> 00:01:06,180
sur le site du cours.

18
00:01:07,890 --> 00:01:11,780
Pour illustrer la notion de définition par
défaut d'une méthode dans une interface,

19
00:01:11,780 --> 00:01:13,310
partons d'un exemple.

20
00:01:13,310 --> 00:01:17,279
Nous utiliserons bien entendu notre fameux
exemple des personnages dans un jeu.

21
00:01:18,360 --> 00:01:21,550
Supposons que nous souhaitions
désormais modéliser le fait que

22
00:01:21,550 --> 00:01:26,760
certains personnages du jeu soient
capables de chevaucher des montures.

23
00:01:26,760 --> 00:01:30,210
Ceci veut dire que ces personnages
auraient désormais la possibilité

24
00:01:30,210 --> 00:01:33,840
d'avoir des fonctionnalités liées au
fait qu'ils chevauchent une monture.

25
00:01:33,840 --> 00:01:38,110
Par exemple, est-ce que un personnage qui
chevauche une monture a le droit d'en

26
00:01:38,110 --> 00:01:40,010
descendre durant le jeu?

27
00:01:40,010 --> 00:01:42,410
Comment va-t-il se déplacer
en utilisant cette monture?

28
00:01:42,410 --> 00:01:43,190
Et ainsi de suite.

29
00:01:44,240 --> 00:01:46,600
Où placer ces fonctionnalités
dans notre conception?

30
00:01:47,680 --> 00:01:49,760
Alors supposons par exemple
que dans notre jeu,

31
00:01:49,760 --> 00:01:55,480
seuls les voleurs et les guerriers soient
habilités à chevaucher des montures.

32
00:01:55,480 --> 00:02:00,250
Il ne fait pas de sens, dans ce cas,
de placer les fonctionnalités liées

33
00:02:00,250 --> 00:02:03,630
au fait de chevaucher une monture
dans la classe Personnage.

34
00:02:03,630 --> 00:02:10,920
Ici, il ne ferait pas sens de placer
une méthode se déplace indiquant

35
00:02:10,920 --> 00:02:16,190
comment un personnage se déplace avec
une monture dans la classe Personnage,

36
00:02:16,190 --> 00:02:20,070
pas plus qu'il ne ferait sens de placer
dans Personnage une méthode peut descendre

37
00:02:23,180 --> 00:02:26,660
indiquant si le personnage a le droit
de descendre de sa monture ou pas.

38
00:02:26,660 --> 00:02:28,700
Pourquoi?
Eh bien tout simplement

39
00:02:28,700 --> 00:02:32,180
parce que le magicien n'est pas capable de
chevaucher une monture, et donc il ne fait

40
00:02:32,180 --> 00:02:35,830
pas sens de lui faire hériter des
méthodes se déplace et peut descendre.

41
00:02:37,090 --> 00:02:40,760
Il est donc naturel ici de plutôt placer
les méthodes en question dans une

42
00:02:40,760 --> 00:02:42,900
interface, ici l'interface Chevauchant.

43
00:02:45,650 --> 00:02:51,460
On mettrait donc dans cette interface
des méthodes typiquement liées au fait

44
00:02:51,460 --> 00:02:57,890
de se déplacer au moyen d'une monture,
ou pour interroger comment on peut

45
00:02:57,890 --> 00:03:01,790
faire usage de cette monture, par exemple
est-ce qu'on peut en descendre ou pas.

46
00:03:01,790 --> 00:03:05,930
Voici donc à quoi pourrait ressembler
le contenu de l'interface Chevauchant.

47
00:03:05,930 --> 00:03:08,990
Cette interface pourrait contenir
l'en-tête d'une méthode se déplace,

48
00:03:08,990 --> 00:03:12,960
cette fonctionnalité aurait pour
vocation d'indiquer comment s'effectue

49
00:03:12,960 --> 00:03:16,960
le déplacement en chevauchant, ainsi que
d'une méthode peut descendre tournant un

50
00:03:16,960 --> 00:03:21,320
booléen et indiquant si l'on peut
oui ou non descendre de la monture.

51
00:03:21,320 --> 00:03:24,430
Vous remarquerez que ce contenu est
conforme à ce qui était décrit pour les

52
00:03:24,430 --> 00:03:26,900
interfaces dans les versions
antérieures à Java 8.

53
00:03:26,900 --> 00:03:31,280
Nous avons ici la déclaration de deux
méthodes abstraites : toute classe que

54
00:03:31,280 --> 00:03:35,510
l'on souhaiterait instanciable et qui
implémenterait l'interface Chevauchant

55
00:03:35,510 --> 00:03:38,680
devra impérativement
fournir une définition

56
00:03:38,680 --> 00:03:42,820
concrète de ces deux méthodes justement
pour pouvoir être instanciable.

57
00:03:42,820 --> 00:03:45,390
Voyons ce qu'il est possible de
faire en plus depuis Java 8,

58
00:03:45,390 --> 00:03:48,050
et supposons que dans la plupart des cas

59
00:03:48,050 --> 00:03:52,080
un personnage qui chevauche une
monture ne puisse pas en descendre.

60
00:03:52,080 --> 00:03:53,240
Eh bien depuis Java 8,

61
00:03:53,240 --> 00:03:57,760
il est possible de spécifier ce
comportement au sein même de l'interface.

62
00:03:57,760 --> 00:04:01,460
Et ceci en donnant une définition par
défaut à la méthode peut descendre.

63
00:04:02,830 --> 00:04:06,890
Concrètement, cela signifie que cette
méthode peut désormais avoir un corps.

64
00:04:08,910 --> 00:04:11,510
Ce corps consiste ici
simplement à retourner false,

65
00:04:11,510 --> 00:04:14,990
ce qui indique que l'on ne peut
pas descendre de la monture.

66
00:04:14,990 --> 00:04:16,895
Toute méthode d'interface
dotée d'un corps,

67
00:04:16,895 --> 00:04:21,170
c'est-à-dire d'une définition concrète
comme ici, devra impérativement être

68
00:04:21,170 --> 00:04:26,110
précédée du modificateur default, faute
de quoi le compilateur vous rappellera à

69
00:04:26,110 --> 00:04:29,910
l'ordre en vous indiquant qu'une méthode
abstraite ne peut avoir de corps.

70
00:04:29,910 --> 00:04:32,640
Rappelez vous que tout en-tête
de méthode est automatiquement

71
00:04:32,640 --> 00:04:35,530
abstrait dans une interface,
même si ce modificateur,

72
00:04:35,530 --> 00:04:38,820
le modificateur abstract,
n'est pas explicitement présent.

73
00:04:38,820 --> 00:04:42,450
La syntaxe formelle pour la déclaration
d'une méthode avec définition par défaut

74
00:04:42,450 --> 00:04:46,450
dans une interface est donc simplement
comme suit : vous avez donc le mot réservé

75
00:04:46,450 --> 00:04:52,050
default suivi de la définition
concrète de la méthode,

76
00:04:52,050 --> 00:04:55,480
cette définition se fait de façon tout à
fait analogue à ce que vous savez faire

77
00:04:55,480 --> 00:04:59,280
dans une classe, vous allez mettre un
en-tête suivi d'un corps entre accolades.

78
00:05:00,540 --> 00:05:03,810
Bien entendu cette nouveauté va
soulever de nouvelles problématiques.

79
00:05:03,810 --> 00:05:07,110
Nous allons voir dans ce qui suit quelles
sont les règles d'utilisation des méthodes

80
00:05:07,110 --> 00:05:08,395
avec définition par défaut.

81
00:05:08,395 --> 00:05:10,510
A-t-on le droit de les redéfinir?

82
00:05:10,510 --> 00:05:14,690
Comment les classes qui implémentent
des interfaces avec méthodes

83
00:05:14,690 --> 00:05:16,760
avec définitions par défaut
peuvent les utiliser?

84
00:05:17,850 --> 00:05:21,060
Mais surtout nous allons voir
comment gérer les ambiguïtés

85
00:05:21,060 --> 00:05:25,250
qui peuvent résulter de la présence
de ces définitions par défaut.

86
00:05:25,250 --> 00:05:29,140
Par exemple,
supposons que l'on ait une interface

87
00:05:30,910 --> 00:05:35,820
I proposant une définition par
défaut pour une méthode donnée,

88
00:05:41,980 --> 00:05:47,419
et supposons qu'une classe
C qui implémenterait

89
00:05:47,419 --> 00:05:54,410
l'interface I propose également

90
00:05:54,410 --> 00:05:59,680
une méthode de même en-tête avec
potentiellement une autre définition.

91
00:06:01,580 --> 00:06:09,340
Nous aurions donc ici potentiellement
une situation de conflit.

92
00:06:09,340 --> 00:06:13,990
Autre exemple, supposons que nous
ayons cette fois deux interfaces

93
00:06:18,540 --> 00:06:22,700
et que chacune de ces interfaces
propose une définition par défaut

94
00:06:24,260 --> 00:06:26,890
pour une méthode de même en-tête.

95
00:06:26,890 --> 00:06:31,465
Donc ici l'interface I 1 propose une
méthode M avec définition par défaut

96
00:06:31,465 --> 00:06:38,515
[AUDIO_VIDE] et pareil pour
une seconde interface I

97
00:06:38,515 --> 00:06:44,588
2 qui proposerait donc elle aussi une
définition par défaut pour la méthode M.

98
00:06:44,588 --> 00:06:49,080
Que se passe-t-il si une

99
00:06:49,080 --> 00:06:54,090
classe implémente les deux interfaces?

100
00:06:57,760 --> 00:07:04,900
Donc là encore, on a potentiellement
une situation conflictuelle.

101
00:07:06,430 --> 00:07:08,920
Quatre règles fondamentales
régissent l'utilisation

102
00:07:08,920 --> 00:07:11,720
des méthodes avec définition
par défaut dans les interfaces.

103
00:07:11,720 --> 00:07:13,720
Nous allons maintenant vous les exposer.

104
00:07:13,720 --> 00:07:17,800
La première règle est que les définitions
par défaut des méthodes s'héritent.

105
00:07:17,800 --> 00:07:21,220
Rappelez vous que nous avions défini
l'interface Chevauchant comme suit :

106
00:07:21,220 --> 00:07:24,790
cette interface proposait une
méthode abstraite se déplace

107
00:07:24,790 --> 00:07:29,200
ainsi qu'une définition par défaut d'une
méthode peut descendre retournant false

108
00:07:29,200 --> 00:07:31,700
pour indiquer que le
comportement par défaut

109
00:07:31,700 --> 00:07:34,730
d'un personnage chevauchant était
de ne pas descendre de sa monture.

110
00:07:34,730 --> 00:07:37,960
Il est tout à fait possible de
définir une sous interface,

111
00:07:37,960 --> 00:07:42,060
ici la sous interface Cavalier
de l'interface Chevauchant,

112
00:07:42,060 --> 00:07:45,810
ne redéfinissant pas explicitement
la méthode peut descendre.

113
00:07:45,810 --> 00:07:50,440
Si un cavalier a pour comportement par
défaut qu'il ne descend pas de sa monture,

114
00:07:50,440 --> 00:07:54,140
alors on peut parfaitement se
contenter de la définition

115
00:07:54,140 --> 00:07:57,830
héritée de la super interface Chevauchant,
et dans ce cas-là,

116
00:07:57,830 --> 00:08:00,610
ne pas redéfinir cette méthode et
garder celle héritée de plus haut.

117
00:08:01,630 --> 00:08:04,680
Vous aurez noté qu'il est parfaitement
possible de donner dans une sous

118
00:08:04,680 --> 00:08:09,610
interface, ici dans Cavalier,
une définition par défaut pour

119
00:08:09,610 --> 00:08:14,040
une méthode abstraite, qui était abstraite
dans Chevauchant héritée de plus haut.

120
00:08:14,040 --> 00:08:18,285
C'est le cas ici de la méthode se déplace
: un cavalier a une définition concrète

121
00:08:18,285 --> 00:08:19,255
de la méthode se déplace,

122
00:08:19,255 --> 00:08:22,015
ce qui n'était pas le cas dans
la super interface Chevauchant.

123
00:08:23,135 --> 00:08:24,455
Un cavalier se déplace au trot.

124
00:08:25,585 --> 00:08:30,975
Ici, une classe implémentant l'interface
Cavalier disposerait d'une méthode

125
00:08:30,975 --> 00:08:35,520
peut descendre dont la définition par
défaut consiste à retourner false et d'une

126
00:08:35,520 --> 00:08:41,260
méthode se déplace qui a un comportement
par défaut, celui d'afficher au trot.

127
00:08:41,260 --> 00:08:44,500
Alors nous avons dit qu'il n'était
pas nécessaire de définir une méthode

128
00:08:44,500 --> 00:08:49,000
peut descendre dans Cavalier si on est
satisfait de la définition par défaut

129
00:08:49,000 --> 00:08:52,600
héritée de plus haut, mais bien sûr si on
n'est pas satisfait de cette définition,

130
00:08:52,600 --> 00:08:56,540
rien ne nous empêche de redéfinir
ce qui est hérité de plus haut,

131
00:08:56,540 --> 00:09:00,150
comme on le faisait pour les classes,
donc ici par exemple on peut imaginer

132
00:09:00,150 --> 00:09:05,290
une conception alternative de l'interface
Cavalier qui proposerait non seulement

133
00:09:05,290 --> 00:09:09,650
une définition par défaut de se déplace,
mais également une redéfinition de la

134
00:09:09,650 --> 00:09:14,550
méthode peut descendre qui cette fois,
par exemple, retournerait true indiquant

135
00:09:14,550 --> 00:09:18,510
qu'un cavalier a pour comportement par
défaut de pouvoir descendre de sa monture.

136
00:09:19,520 --> 00:09:22,990
Règle numéro deux : une classe
qui implémente une interface

137
00:09:22,990 --> 00:09:28,050
n'est plus obligée de
fournir des définitions

138
00:09:28,050 --> 00:09:31,749
concrètes pour les méthodes ayant des
définitions par défaut dans l'interface.

139
00:09:32,880 --> 00:09:37,130
Par exemple, supposons qu'une classe
Guerrier implémente l'interface Cavalier,

140
00:09:37,130 --> 00:09:41,060
cette interface comportait deux méthodes
se déplace et peut descendre qui

141
00:09:41,060 --> 00:09:43,960
toutes deux avaient des définitions
par défaut, dans ce cas-là,

142
00:09:43,960 --> 00:09:46,480
la classe Guerrier est
instanciable en l'état,

143
00:09:46,480 --> 00:09:49,730
elle n'est pas dans l'obligation
de redéfinir ces deux méthodes.

144
00:09:49,730 --> 00:09:52,260
Il s'agit là en fait de la
principale raison d'être

145
00:09:52,260 --> 00:09:55,780
du concept de définition par défaut
des méthodes dans une interface.

146
00:09:55,780 --> 00:09:59,950
En effet, l'A P I de Java contient de
très nombreuses interfaces prédéfinies

147
00:09:59,950 --> 00:10:02,320
implémentées par de nombreuses classes.

148
00:10:02,320 --> 00:10:04,490
Avant Java 8, il n'était pas possible,

149
00:10:04,490 --> 00:10:07,980
en l'absence de définition par
défaut des méthodes d'une interface,

150
00:10:07,980 --> 00:10:11,515
de modifier une interface existante
en lui ajoutant [INCOMPREHENSIBLE]

151
00:10:11,515 --> 00:10:15,131
sans pour cela devoir retoucher toutes
les classes implémentant cette interface.

152
00:10:15,131 --> 00:10:19,885
Très concrètement,
supposons que nous ayons par exemple

153
00:10:19,885 --> 00:10:23,865
dans l'A P I une interface I,
proposant un certain nombre de méthodes.

154
00:10:23,865 --> 00:10:30,584
Faisons simple, ici,
deux méthodes, m1 et m2 ;

155
00:10:33,340 --> 00:10:37,150
supposons que de nombreuses classes
implémentent cette interface.

156
00:10:37,150 --> 00:10:38,720
On en prend deux ici, en guise d'exemple.

157
00:10:39,780 --> 00:10:46,060
Donc une classe C1 et une classe C2, qui
toutes deux implémentent l'interface I.

158
00:10:46,060 --> 00:10:48,960
Ces deux classes sont déclarées si non
abstraites, ce qui veut dire qu'on

159
00:10:48,960 --> 00:10:51,020
les souhaite instanciables ; pour
qu'elles soient instanciables,

160
00:10:51,020 --> 00:10:55,335
elles doivent impérativement fournir
une définition concrète des méthodes m1

161
00:10:55,335 --> 00:10:59,905
et m2 ; donc si ces classes existent
et qu'elles sont compilables,

162
00:10:59,905 --> 00:11:02,815
c'est qu'elles proposent
une définition concrète

163
00:11:05,455 --> 00:11:09,835
des méthodes proposées par
l'interface implémente.

164
00:11:11,790 --> 00:11:13,390
Donc idem ici, pour m2.

165
00:11:13,390 --> 00:11:20,950
Et on devrait faire la même chose dans
l'interface, dans la classe pardon, finie.

166
00:11:26,570 --> 00:11:29,680
Supposons maintenant que,
les besoins évoluant au cours du tempS,

167
00:11:29,680 --> 00:11:36,430
on réalise que l'interface I1 devrait
posséder en plus une méthode m3.

168
00:11:36,430 --> 00:11:39,260
Que se passe-t-il alors
avec le code existant?

169
00:11:40,950 --> 00:11:41,830
Eh bien tout simplement,

170
00:11:41,830 --> 00:11:44,780
si on l'écrit comme ceci,
le code existant ne compile plus.

171
00:11:46,120 --> 00:11:49,340
Les classes C1 et C2 sont non abstraites,
et donc,

172
00:11:49,340 --> 00:11:53,020
à l'instar de ce qu'on avait fait pour
m1 et m2, il faudrait impérativement

173
00:11:53,020 --> 00:11:56,830
retoucher ces classes pour donner une
définition concrète à la méthode m3.

174
00:11:56,830 --> 00:12:02,220
Le fait de pouvoir désormais
proposer une définition par défaut,

175
00:12:03,890 --> 00:12:07,590
pour la méthode m3,
nous permet de contourner ce problème.

176
00:12:09,990 --> 00:12:14,385
Selon la règle que nous venons d'exposer,
une classe qui implémente une interface

177
00:12:14,385 --> 00:12:17,745
n'est pas dans l'obligation de redéfinir
une méthode ayant une définition par

178
00:12:17,745 --> 00:12:21,215
défaut, et dans ce cas-là il n'est plus
nécessaire de définir m3 à l'intérieur des

179
00:12:21,215 --> 00:12:24,905
classes, pour que ces classes continuent
à être compilables et instanciables.

180
00:12:25,915 --> 00:12:28,675
Les deux règles de base que nous venons
d'examiner déterminent comment l'on

181
00:12:28,675 --> 00:12:31,935
peut écrire et utiliser des méthodes
d'interface, avec définition par défaut.

182
00:12:31,935 --> 00:12:35,710
Intéressons-nous maintenant aux deux
règles régissant des situations de

183
00:12:35,710 --> 00:12:38,720
conflits potentiels,
telles qu'évoquées précédemment.

184
00:12:38,720 --> 00:12:42,870
Pour commencer, que se passe-t-il si
une classe implémentant une interface

185
00:12:42,870 --> 00:12:47,680
définit une méthode ayant déjà une
définition par défaut dans l'interface?

186
00:12:47,680 --> 00:12:52,139
Par exemple, supposons que la classe
Guerrier implémente l'interface Cavalier,

187
00:12:54,440 --> 00:12:58,570
laquelle propose une définition par
défaut de la méthode Se déplace.

188
00:13:02,110 --> 00:13:05,960
Supposons que cette même classe,
Guerrier, dispose déjà d'une définition

189
00:13:05,960 --> 00:13:10,859
alternative de la méthode Se déplace, ici,
par héritage, depuis la classe Personnage.

190
00:13:13,000 --> 00:13:16,900
Ici, nous nous plaçons dans un contexte un
peu différent de celui de notre exemple

191
00:13:16,900 --> 00:13:20,160
d'introduction, nous partons d'une
conception dans laquelle une méthode, Se

192
00:13:20,160 --> 00:13:24,340
déplace, générale, est présente, d'emblée,
dans la super classe, Personnage.

193
00:13:24,340 --> 00:13:27,440
Et la question est donc, comment gérer
l'ambiguïté entre cette méthode,

194
00:13:27,440 --> 00:13:32,260
Se déplace, générale, et celle du même
nom dans l'interface, Chevauchant?

195
00:13:32,260 --> 00:13:34,880
Le guerrier se déplacera-t-il au trot,
ou en courant?

196
00:13:35,950 --> 00:13:36,980
Eh bien, la règle adoptée,

197
00:13:36,980 --> 00:13:40,390
par Java, est que les méthodes
de classe ont la priorité,

198
00:13:40,390 --> 00:13:44,370
ont la précédence, sur les définitions
par défaut dans les interfaces.

199
00:13:46,090 --> 00:13:53,380
Ici, si je déclare une instance de type
Guerrier, et que j'invoque la méthode,

200
00:13:53,380 --> 00:13:58,100
Se déplace, sur cette instance,
eh bien, c'est la définition de la

201
00:13:58,100 --> 00:14:03,940
classe qui sera choisie, et donc le
guerrier se déplacera en courant.

202
00:14:03,940 --> 00:14:07,510
Bien entendu, si l'on souhaite que ce
soit plutôt la méthode de l'interface qui

203
00:14:07,510 --> 00:14:13,470
s'applique, il est tout à fait
possible de le spécifier.

204
00:14:14,820 --> 00:14:18,470
Il faudra pour cela faire en
sorte que la méthode, Se déplace,

205
00:14:18,470 --> 00:14:20,930
soit redéfinie dans la classe Guerrier,

206
00:14:20,930 --> 00:14:25,840
et qu'elle y spécifie le fait d'utiliser
la méthode issue de l'interface.

207
00:14:27,340 --> 00:14:31,540
Donc ici, la méthode, Se déplace,
est redéfinie dans la classe Guerrier,

208
00:14:31,540 --> 00:14:35,340
elle est redéfinie de sorte à invoquer
la méthode, la définition par défaut de

209
00:14:35,340 --> 00:14:39,090
la méthode, Se déplace, telle que
définie dans l'interface Cavalier.

210
00:14:40,250 --> 00:14:44,230
Pour invoquer une méthode avec définition
par défaut dans une interface,

211
00:14:44,230 --> 00:14:48,610
on mettra le nom de l'interface,
suivi d'un point, suivi du nom réservé,

212
00:14:48,610 --> 00:14:54,320
super, encore un point, et le nom de
la méthode avec définition par défaut.

213
00:14:54,320 --> 00:14:57,210
Vous noterez ici l'usage du mot réservé,
super.

214
00:14:59,350 --> 00:15:02,560
Ce mot réservé permet de faire la
distinction entre l'invocation

215
00:15:02,560 --> 00:15:05,380
d'une méthode avec définition par défaut

216
00:15:05,380 --> 00:15:09,090
et celle de l'invocation d'une
méthode statique, interface.

217
00:15:09,090 --> 00:15:13,280
Par exemple, il est possible de
déclarer une interface comme ceci,

218
00:15:16,470 --> 00:15:23,030
d'y placer les méthodes avec
définition par défaut, ce que nous

219
00:15:23,030 --> 00:15:30,290
savons faire désormais, mais également
d'y placer des méthodes statiques,

220
00:15:31,600 --> 00:15:35,865
de la même façon que nous pouvons placer
des méthodes statiques dans une classe.

221
00:15:35,865 --> 00:15:44,118
[AUDIO_VIDE] Supposons qu'une classe C

222
00:15:44,118 --> 00:15:50,530
implémente l'interface I,

223
00:15:52,220 --> 00:15:55,830
si l'on souhaite dans une
méthode de la classe C

224
00:15:56,890 --> 00:16:01,740
invoquer l'une ou l'autre des méthodes
de l'interface, on procédera comme suit.

225
00:16:06,300 --> 00:16:10,360
Donc pour invoquer la méthode statique,
on mettra le nom de l'interface,

226
00:16:10,360 --> 00:16:14,660
suivi d'un point,
suivi du nom de la méthode statique.

227
00:16:14,660 --> 00:16:18,300
Pour invoquer la méthode avec définition
par défaut, on utilisera le nom de

228
00:16:18,300 --> 00:16:23,810
l'interface, suivi de, super, suivi du nom
de la méthode avec définition par défaut.

229
00:16:25,830 --> 00:16:27,040
Vous noterez donc la distinction,

230
00:16:27,040 --> 00:16:31,860
ici ; pour invoquer une méthode statique
d'interface, on met le nom de l'interface,

231
00:16:31,860 --> 00:16:34,730
suivi du nom de la méthode
; c'est exactement la

232
00:16:34,730 --> 00:16:39,500
même syntaxe que l'on utilisait pour
invoquer un membre statique d'une classe.

233
00:16:39,500 --> 00:16:43,330
Par contre, pour invoquer une
méthode avec définition par défaut,

234
00:16:43,330 --> 00:16:44,710
on insère le mot réservé, super.

235
00:16:46,860 --> 00:16:49,930
Je rappelle que les méthodes
statiques d'interface font l'objet

236
00:16:49,930 --> 00:16:52,740
d'un complément PDF sur le site du cours.

237
00:16:52,740 --> 00:16:54,530
Petite remarque, ici, avant de poursuivre,

238
00:16:54,530 --> 00:16:57,920
ces deux méthodes d'interface ne
pourraient pas avoir le même nom.

239
00:16:57,920 --> 00:17:02,130
Il n'est pas toléré par le compilateur
qu'une méthode d'interface de même entête

240
00:17:02,130 --> 00:17:05,230
soit à la fois déclarée comme
statique et ait, en même temps,

241
00:17:05,230 --> 00:17:06,508
une définition par défaut.

242
00:17:06,508 --> 00:17:11,470
Que se passe-t-il, finalement,
si une classe implémente deux interfaces

243
00:17:11,470 --> 00:17:15,210
proposant toutes deux une définition
par défaut pour une même méthode?

244
00:17:15,210 --> 00:17:18,978
Ici, par exemple,
nous avons deux interfaces ; l'interface,

245
00:17:18,978 --> 00:17:21,990
Dragonnier, et l'interface, Se téléporte.

246
00:17:21,990 --> 00:17:26,410
Chacune de ces deux interfaces propose une
définition par défaut pour une méthode,

247
00:17:26,410 --> 00:17:31,920
Se déplace, ayant exactement le
même entête dans les deux cas.

248
00:17:31,920 --> 00:17:35,730
Nous avons ici une classe,
Mage ultime, qui implémente

249
00:17:35,730 --> 00:17:39,380
les deux interfaces ; lorsque l'on
invoque la méthode, Se déplace,

250
00:17:39,380 --> 00:17:44,090
sur une instance de Mage ultime, laquelle
des deux méthodes est-elle invoquée?

251
00:17:45,320 --> 00:17:47,220
Il y a donc ici une situation de conflit.

252
00:17:48,770 --> 00:17:51,980
La règle adoptée par Java pour
faire face à ce genre de situations

253
00:17:51,980 --> 00:17:56,475
est que les classes qui implémentent les
interfaces conflictuelles sont en charge

254
00:17:56,475 --> 00:17:57,245
de lever l'ambiguïté.

255
00:17:58,585 --> 00:17:59,765
Par exemple, la classe,

256
00:17:59,765 --> 00:18:04,715
Mage ultime, qui implémente les deux
interfaces conflictuelles, devra redéfinir

257
00:18:04,715 --> 00:18:09,235
la méthode, Se déplace, pour spécifier
laquelle des deux elle veut utiliser.

258
00:18:09,235 --> 00:18:12,845
Laquelle des deux définitions par défaut,
issues des interfaces, elle veut utiliser.

259
00:18:14,010 --> 00:18:16,240
Donc ici le choix est fait,

260
00:18:16,240 --> 00:18:20,970
le choix s'est porté de la définition par
défaut issue de l'interface, Dragonnier.

261
00:18:20,970 --> 00:18:25,560
La méthode, Se déplace, de Mage ultime,
est redéfinie de façon à invoquer la

262
00:18:25,560 --> 00:18:30,569
méthode, Se déplace, telle que définie
par défaut dans l'interface, Dragonnier.

263
00:18:31,840 --> 00:18:35,220
Rien n'empêche, bien sûr, de faire
le choix alternatif de la méthode,

264
00:18:35,220 --> 00:18:37,148
Se déplace, issue de, Se téléporte.

265
00:18:37,148 --> 00:18:41,130
Dans ce cas-ci, la méthode,
Se déplace, est redéfinie dans,

266
00:18:41,130 --> 00:18:45,480
Mage ultime,
de sorte à choisir la méthode, Se déplace,

267
00:18:45,480 --> 00:18:49,090
telle que définie par défaut
dans l'interface, Se téléporte.

268
00:18:49,090 --> 00:18:53,430
Bien d'autres implémentations sont,
évidemment, possibles ; et rien n'empêche

269
00:18:53,430 --> 00:18:56,870
la classe, Mage ultime,
de redéfinir la méthode, Se déplace,

270
00:18:56,870 --> 00:19:01,760
de sorte à utiliser les définitions
par défaut des deux interfaces.

271
00:19:03,580 --> 00:19:07,980
Ici vous avez un exemple de définition de,
Se déplace, qui fait appel

272
00:19:07,980 --> 00:19:12,940
dans certaines conditions à la méthode,
Se déplace, issue de, Se téléporte ;

273
00:19:12,940 --> 00:19:16,330
et dans d'autres conditions à la méthode,
Se déplace, issue de Dragonnier.

274
00:19:18,290 --> 00:19:21,380
Si le mage ultime peut
descendre de sa monture, alors

275
00:19:21,380 --> 00:19:25,770
il se déplace en se téléportant, sinon,
eh bien, il volera comme un dragonnier.

276
00:19:27,220 --> 00:19:30,800
Avec l'introduction des définitions par
défaut pour les interfaces le contenu de

277
00:19:30,800 --> 00:19:33,790
ces dernières se rapproche désormais
beaucoup de celui des classes abstraites.

278
00:19:33,790 --> 00:19:38,230
En effet, on peut désormais mettre dans
une interface aussi bien des méthodes

279
00:19:38,230 --> 00:19:44,870
abstraites, ce qui était le cas avant
Java 8, et on peut également ajouter

280
00:19:44,870 --> 00:19:50,670
des méthodes qui ont désormais une
définition concrète par défaut.

281
00:19:53,350 --> 00:19:56,880
Ce qui les rapproche beaucoup de
la notion de classe abstraite.

282
00:19:58,350 --> 00:20:01,840
La question peut donc a priori se
poser de quand choisir une option,

283
00:20:01,840 --> 00:20:03,370
plutôt qu'une autre.

284
00:20:03,370 --> 00:20:06,020
Eh bien une des différences majeures
est qu'une interface ne peut

285
00:20:06,020 --> 00:20:08,910
pas spécifier d'état,
elle ne peut pas contenir d'attributs.

286
00:20:08,910 --> 00:20:11,640
Par exemple,
il n'est pas possible de définir

287
00:20:11,640 --> 00:20:14,200
quelle est la monture du cavalier
dans l'interface, Cavalier.

288
00:20:15,560 --> 00:20:22,210
Ici, je ne pourrai pas mettre un attribut
de type, Monture, dans le Cavalier.

289
00:20:24,790 --> 00:20:28,910
Le fait de pouvoir spécifier un
attribut permettrait de spécifier un

290
00:20:28,910 --> 00:20:32,270
état du cavalier, dépendamment
de quelle monture il chevauche,

291
00:20:32,270 --> 00:20:36,500
il serait dans tel ou tel état ; ceci
n'est pas possible dans une interface.

292
00:20:36,500 --> 00:20:39,440
L'autre différence,
qui est inhérente à la notion d'état,

293
00:20:39,440 --> 00:20:44,650
est qu'il n'y a pas de constructeur ;

294
00:20:44,650 --> 00:20:48,320
cette notion est inhérente à
la notion d'état puisque le

295
00:20:48,320 --> 00:20:52,400
constructeur a pour vocation d'initialiser
les attributs, or il n'y en a pas.

296
00:20:52,400 --> 00:20:56,080
Pour résumer, donc, pas d'état,
pas de constructeur.

297
00:20:57,300 --> 00:21:02,380
La règle générale à suivre est que si ce
que l'on souhaite modéliser est un aspect

298
00:21:02,380 --> 00:21:07,110
comportemental, fonctionnel,

299
00:21:08,530 --> 00:21:10,980
comme se déplacer, indépendant d'un état,

300
00:21:15,160 --> 00:21:21,310
d'objet, alors on va privilégier
l'usage des interfaces.

301
00:21:21,310 --> 00:21:23,330
Le lien, implements,
est en effet plus flexible,

302
00:21:23,330 --> 00:21:26,300
moins contraignant que celui de
l'héritage au niveau de la conception.

303
00:21:26,300 --> 00:21:29,895
Rappelons enfin que la principale raison
d'être de l'introduction des méthodes avec

304
00:21:29,895 --> 00:21:33,495
définition par défaut dans les interfaces,
n'est pas tant de mimiquer l'héritage

305
00:21:33,495 --> 00:21:36,815
multiple, ou d'apporter une
alternative aux classes abstraites,

306
00:21:36,815 --> 00:21:42,195
mais elle a surtout été de
permettre l'ajout de nouvelles

307
00:21:42,195 --> 00:21:49,325
méthodes à des interfaces existantes,

308
00:21:49,325 --> 00:21:56,605
[AUDIO_VIDE] sans pénaliser l'existant,

309
00:21:56,605 --> 00:21:59,880
c'est-à-dire sans avoir à retoucher une
classe implémentant ces interfaces.

310
00:22:01,150 --> 00:22:05,350
Et ceci conclut cette vidéo sur les
spécificités post Java 7 des interfaces.

