1
00:00:04,191 --> 00:00:07,466
Après les attributs statiques,
nous allons dans cette séquence vidéo

2
00:00:07,466 --> 00:00:11,256
nous intéresser aux méthodes statiques,
méthodes de classe.

3
00:00:11,366 --> 00:00:13,633
De la même façon que pour les attributs,

4
00:00:13,633 --> 00:00:17,079
si on ajoute le mot clé static
devant une méthode,

5
00:00:17,079 --> 00:00:20,059
alors cette méthode devient 
une méthode de classe,

6
00:00:20,059 --> 00:00:23,781
c'est-à-dire une méthode que
l'on peut appeler sans aucun objet,

7
00:00:23,781 --> 00:00:27,697
sans aucune instance concrète
de la classe en question.

8
00:00:27,697 --> 00:00:28,923
Donc prenons un exemple :

9
00:00:28,923 --> 00:00:33,350
nous avons ici une classe A
dans laquelle est définie une méthode,

10
00:00:33,350 --> 00:00:37,997
« methode1 », qui est une méthode de classe,
une méthode statique.

11
00:00:37,997 --> 00:00:40,414
Et puis nous avons une méthode usuelle,

12
00:00:40,414 --> 00:00:43,370
méthode d'instance ici, 
qui s'appelle « méthode2 ».

13
00:00:43,420 --> 00:00:46,312
Dans l'exemple d'utilisation
de cette méthode de classe,

14
00:00:46,312 --> 00:00:48,744
nous voyons ici que nous pouvons
tout à fait appeler

15
00:00:48,744 --> 00:00:51,270
la « methode1 », méthode de classe,

16
00:00:51,270 --> 00:00:55,476
sans aucune instance 
à ce stade là de la classe A.

17
00:00:55,476 --> 00:00:59,714
La syntaxe est simplement :
« nom de la classe, point ('.'), nom de la méthode statique/

18
00:00:59,714 --> 00:01:01,204
nom de la méthode de classe ».

19
00:01:01,204 --> 00:01:04,069
Ceci est tout à fait possible,
ça va appeler la « methode1 »

20
00:01:04,069 --> 00:01:06,583
et afficher le message « Méthode 1 ».

21
00:01:06,583 --> 00:01:09,101
Bien sûr pour une méthode usuelle,
méthode d'instance

22
00:01:09,101 --> 00:01:11,150
qui n'est pas déclarée 
avec le mot clé « static »,

23
00:01:11,150 --> 00:01:14,267
on n'a pas le droit d'utiliser
cette syntaxe ; ça n'a pas de sens !

24
00:01:14,267 --> 00:01:17,568
« méthode2 » doit être attachée 
à une instance.

25
00:01:17,867 --> 00:01:22,248
On créé donc ici, pour continuer l'exemple
une instance v de la classe A.

26
00:01:22,248 --> 00:01:25,539
Alors on peut bien sûr 
appeler la méthode de classe

27
00:01:25,539 --> 00:01:29,204
avec la syntaxe « v.methode1 ».
C'est exactement la même chose

28
00:01:29,204 --> 00:01:33,532
qu'avoir écrit « A.methode1 ».
C'est juste une forme alternative.

29
00:01:33,532 --> 00:01:36,464
Je vous recommande 
d'ailleurs plutôt d'utiliser

30
00:01:36,464 --> 00:01:39,782
le nom de la classe. le nom de la méthode
pour des méthodes de classe,

31
00:01:39,782 --> 00:01:43,899
pour bien montrer l'intention et rappeler 
que c'est une méthode de classe,

32
00:01:43,899 --> 00:01:47,284
même si la notation 
méthode d'instance est possible,

33
00:01:47,284 --> 00:01:50,050
elle est à mon avis un peu plus ambiguë,

34
00:01:50,050 --> 00:01:51,800
et je trouve celle-ci beaucoup plus claire.

35
00:01:51,800 --> 00:01:54,662
Et puis évidemment comme d'habitude,
on peut appeler la méthode2,

36
00:01:54,662 --> 00:01:57,930
qui une méthode d'instance
sur l'instance v.

37
00:01:59,092 --> 00:02:02,784
Puisqu'une méthode statique peut être 
appelée sans instance, sans objet,

38
00:02:02,784 --> 00:02:05,366
alors une telle méthode
ne peut pas s'appuyer

39
00:02:05,366 --> 00:02:07,203
sur l'existence d'un tel objet,

40
00:02:07,203 --> 00:02:10,870
et ne peut donc pas appeler des variables
d'instance ni des méthodes d'instance.

41
00:02:11,070 --> 00:02:14,514
La référence « this » n'existe pas
dans une telle méthode

42
00:02:14,514 --> 00:02:17,497
puisque on ne peut pas garantir
l'existence d'un objet.

43
00:02:17,497 --> 00:02:20,276
Donc une telle méthode,
une méthode statique

44
00:02:20,276 --> 00:02:23,249
ne peut appeler que 
des autres méthodes statiques

45
00:02:23,249 --> 00:02:27,654
et ne peut avoir accès qu'à des membres 
de classe, qu'à des attributs statiques.

46
00:02:29,404 --> 00:02:33,248
Illustrons ceci sur un exemple,
nous avons donc ici une classe A,

47
00:02:33,248 --> 00:02:38,566
qui contient donc un attribut usuel, 
non statique i,

48
00:02:38,566 --> 00:02:42,340
et puis un attribut de classe, 
un attribut statique j,

49
00:02:42,340 --> 00:02:47,633
une méthode usuelle, non statique,
méthode d'instance, « methode1 »,

50
00:02:47,633 --> 00:02:52,285
et une méthode statique, 
« methode2 », méthode de classe.

51
00:02:52,285 --> 00:02:54,822
Dans la méthode usuelle, « methode1 »,

52
00:02:54,822 --> 00:02:58,772
on essaie d'accéder à l'attribut i,
on n'a aucun souci.

53
00:02:58,772 --> 00:03:01,110
Une méthode liée ici 
à une instance peut accéder

54
00:03:01,110 --> 00:03:04,096
aussi bien aux attributs d'instance,

55
00:03:04,096 --> 00:03:07,543
que donc ici accéder à l'attribut 
de classe j

56
00:03:07,543 --> 00:03:09,170
On peut accéder aux deux.

57
00:03:09,170 --> 00:03:11,708
On a le droit bien sûr dans la « methode1 »

58
00:03:11,708 --> 00:03:15,138
d'appeler la « methode2 »,
qui est une méthode de classe.

59
00:03:15,138 --> 00:03:18,403
Donc tout est permis bien sûr 
dans une méthode d'instance.

60
00:03:18,403 --> 00:03:20,572
Par contre dans une méthode de classe,

61
00:03:20,572 --> 00:03:25,461
on ne peut accéder qu'aux attributs
et aux méthodes de classe.

62
00:03:25,461 --> 00:03:28,773
Si ici on essaie de faire
la même chose que dans la « methode1 »

63
00:03:28,773 --> 00:03:31,630
et d'accéder à l'attribut d'instance i,

64
00:03:31,630 --> 00:03:34,704
alors à ce moment là, on va avoir
une erreur de compilation,

65
00:03:34,704 --> 00:03:38,329
on n'a pas le droit de faire ceci
puisqu'on est dans une méthode de classe.

66
00:03:38,329 --> 00:03:41,401
On ne peut pas garantir 
l'existence d'un attribut,

67
00:03:41,401 --> 00:03:43,170
d'un objet de la classe A.

68
00:03:43,170 --> 00:03:47,741
Par contre, on peut tout à fait accéder
à l'attribut statique j,

69
00:03:47,741 --> 00:03:50,018
j est un attribut de classe, 
attribut statique.

70
00:03:50,018 --> 00:03:52,532
On a le droit de faire ceci.

71
00:03:52,532 --> 00:03:56,115
On n'a pas le droit non plus 
dans la « methode2 », méthode statique,

72
00:03:56,115 --> 00:03:58,822
d'appeler une méthode non statique,
la « methode1 »,

73
00:03:58,822 --> 00:04:01,755
donc ceci générerait aussi 
une erreur du compilateur.

74
00:04:01,755 --> 00:04:04,761
Par contre on peut tout à fait appeler 
des méthodes statiques,

75
00:04:04,761 --> 00:04:06,333
y compris elles-mêmes.

76
00:04:06,353 --> 00:04:09,485
Cet appel est syntaxiquement correct, 
il n'y a pas de soucis.

77
00:04:09,485 --> 00:04:11,901
Alors évidemment ici, 
comme on a appelé la même méthode,

78
00:04:11,901 --> 00:04:14,357
il faudrait juste faire attention 
et prendre des précautions

79
00:04:14,357 --> 00:04:16,516
pour que ça ne donne pas 
une récursion infinie,

80
00:04:16,516 --> 00:04:20,514
et protéger cet appel par 
une condition de terminaison.

81
00:04:20,514 --> 00:04:24,372
Mais ça, ça nous emmène un peu trop loin
on voulait juste signaler ici,

82
00:04:24,372 --> 00:04:26,886
que nous pouvons appeler 
dans une méthode statique,

83
00:04:26,886 --> 00:04:29,062
une autre méthode statique.

84
00:04:29,062 --> 00:04:34,734
Evidemment si on crée une instance 
comme ceci dans une méthode statique,

85
00:04:34,734 --> 00:04:37,698
on peut tout à fait créer une instance 
comme ça dans une méthode statique,

86
00:04:37,698 --> 00:04:39,751
alors bien sûr on peut appeler ici

87
00:04:39,751 --> 00:04:43,414
la méthode1 sur l'instance v 
de la classe A.

88
00:04:44,847 --> 00:04:48,307
A quoi peuvent donc servir ces 
méthodes statiques, méthodes de classe ?

89
00:04:48,307 --> 00:04:51,969
Eh bien justement, à écrire des méthodes
qui ne sont pas attachées

90
00:04:51,969 --> 00:04:54,439
à des instances particulières 
d'une classe,

91
00:04:54,439 --> 00:04:58,382
des méthodes très générales,
typiquement des méthodes outils.

92
00:04:58,382 --> 00:05:00,999
On va faire comme ceci 
des classes boîte à outils,

93
00:05:00,999 --> 00:05:03,338
dont on ne créera pas d'instance,

94
00:05:03,338 --> 00:05:06,669
mais dont on utilisera simplement
les méthodes de classe.

95
00:05:06,669 --> 00:05:09,510
Par exemple, 
une boîte à outils mathématiques,

96
00:05:09,510 --> 00:05:13,104
comme par exemple cette classe ici,
« MathUtils »,

97
00:05:13,104 --> 00:05:17,706
dans laquelle nous avons défini 
une constante de classe,

98
00:05:17,706 --> 00:05:21,532
dans laquelle on peut définir aussi
une méthode de classe,

99
00:05:21,532 --> 00:05:25,267
c'est-à-dire typiquement ici, 
une fonction outil « auCube »,

100
00:05:25,267 --> 00:05:29,746
qui permettrait donc de calculer
le cube de son paramètre.

101
00:05:29,746 --> 00:05:33,149
Evidemment la création d'un objet 
de type « MathUtils »,

102
00:05:33,149 --> 00:05:35,212
est totalement artificielle.

103
00:05:35,212 --> 00:05:38,467
On n'a pas besoin d'objet 
de type « MathUtils »,

104
00:05:38,467 --> 00:05:46,182
et on pourrait directement appeler 
la constante PI de la classe « MathUtils »,

105
00:05:46,182 --> 00:05:51,049
puisque je répète ici que PI 
est bien une variable de classe.

106
00:05:51,049 --> 00:05:58,934
On pourrait donc aussi appeler comme ceci
« MathUtils.auCube(3.4) »,

107
00:05:59,654 --> 00:06:03,682
puisque ici aussi, « auCube » 
est une méthode d'instance.

108
00:06:03,682 --> 00:06:09,030
On peut donc l'appeler sans aucune 
création d'un objet de « MathUtils »,

109
00:06:09,030 --> 00:06:13,058
mais directement avec
le nom de la classe.le nom de la méthode

110
00:06:13,058 --> 00:06:16,269
pour calculer le cube de la valeur 3.4.

111
00:06:16,269 --> 00:06:18,475
Cette classe « MathUtils » sert seulement

112
00:06:18,475 --> 00:06:22,096
à stocker des méthodes 
et des constantes utilitaires.

113
00:06:22,096 --> 00:06:25,535
Elle ne sert pas à créer 
d'objets concrets.

114
00:06:26,025 --> 00:06:30,754
En fait, c'est exactement le cas
de la classe « Math.PI »,

115
00:06:30,754 --> 00:06:34,146
et si vous aviez à utiliser 
la constante PI,

116
00:06:34,146 --> 00:06:40,271
vous utilisez celle de l'API ;
et ça s'écrit en Java standard, « Math.PI »,

117
00:06:40,271 --> 00:06:42,249
la classe « Math » de l'API exactement comme

118
00:06:42,249 --> 00:06:45,427
notre petit exemple pédagogique « MathUtils ».

119
00:06:45,427 --> 00:06:47,863
Vous ne faites évidemment 
vous-même jamais ceci,

120
00:06:47,863 --> 00:06:52,061
mais vous utilisez les constantes
qui sont définies dans l'API.

121
00:06:53,401 --> 00:06:56,362
Voilà donc typiquement 
à quoi peuvent servir

122
00:06:56,362 --> 00:06:59,320
les méthodes statiques, 
les méthodes de classe.

123
00:06:59,320 --> 00:07:03,241
Ceci dit, évitez absolument 
d'abuser de ce mot clé static.

124
00:07:03,241 --> 00:07:05,946
Évitez de faire proliférer 
ce mot clé static,

125
00:07:05,946 --> 00:07:09,410
et réservez-le pour 
des cas très particuliers.

126
00:07:10,070 --> 00:07:12,506
Typiquement, les trois cas suivants,

127
00:07:12,506 --> 00:07:16,739
on pourra utiliser static
avec « final » pour un attribut,

128
00:07:16,739 --> 00:07:22,059
une variable donc de classe ici,
pour définir des constantes.

129
00:07:22,059 --> 00:07:25,331
C'était l'exemple
de la variable « Math.PI ».

130
00:07:25,701 --> 00:07:29,586
La deuxième situation 
c'est d'utiliser static sans « final »,

131
00:07:29,586 --> 00:07:32,467
toujours pour un attribut. 
C'est plus rare,

132
00:07:32,467 --> 00:07:38,467
et c'est pour partager une valeur 
commune ici au niveau de la classe,

133
00:07:38,467 --> 00:07:41,798
valeur commune pour la classe, 
mais qui pourrait évoluer.

134
00:07:41,798 --> 00:07:44,382
Cette situation est plus rare 
et vous ne la rencontrez pas

135
00:07:44,382 --> 00:07:46,367
dans le cadre des exercices de ce cours.

136
00:07:46,367 --> 00:07:48,165
Concernant les méthodes enfin,

137
00:07:48,165 --> 00:07:50,919
on peut définir des méthodes de classe,
des méthodes statiques,

138
00:07:50,919 --> 00:07:53,636
lorsqu'on a comme on a vu, 
des méthodes utilitaires,

139
00:07:53,636 --> 00:07:57,386
qu'il est artificiel de lier
à un objet particulier,

140
00:07:57,386 --> 00:08:00,954
et qui sont donc invocable
sans aucun objet.

141
00:08:00,954 --> 00:08:04,302
C'est en général aussi beaucoup plus rare
que vous en écriviez par vous-mêmes,

142
00:08:04,302 --> 00:08:07,581
mais typiquement vous utiliserez
celles fournies par l'API,

143
00:08:07,581 --> 00:08:10,742
comme par exemple 
la méthode racine carrée sqrt

144
00:08:10,742 --> 00:08:14,639
de la classe « Math » fournie dans l'API Java.

145
00:08:14,639 --> 00:08:18,375
Un autre exemple de méthode statique,
que vous avez eu l'habitude de pratiquer,

146
00:08:18,375 --> 00:08:20,811
c'est la méthode main.

147
00:08:21,217 --> 00:08:24,268
Et nous comprenons maintenant
pourquoi les méthodes auxiliaires,

148
00:08:24,268 --> 00:08:27,775
ce qu'on appelle fonction en programmation
procédurale générale,

149
00:08:27,775 --> 00:08:31,927
donc les méthodes auxiliaires de main,
sont des méthodes statiques.

150
00:08:31,927 --> 00:08:35,433
Puisqu'en effet main a un entête fixé,

151
00:08:35,433 --> 00:08:39,501
c'est une méthode qui doit être statique
dans une classe.

152
00:08:39,501 --> 00:08:41,150
En tant que méthode statique,

153
00:08:41,150 --> 00:08:44,424
elle ne peut accéder 
qu'à d'autres méthodes statiques,

154
00:08:44,424 --> 00:08:46,960
et donc les méthodes auxiliaires de main

155
00:08:46,960 --> 00:08:50,580
doivent nécessairement être 
des méthodes statiques.

156
00:08:50,580 --> 00:08:53,064
De même, la méthode main, 
puisqu'elle est statique,

157
00:08:53,064 --> 00:08:58,571
ne peut accéder à aucun objet de la classe
dans laquelle elle a été définie.

158
00:08:58,571 --> 00:09:01,031
Donc elle ne peut pas accéder 
à des variables

159
00:09:01,031 --> 00:09:04,538
et des méthodes d'instance de cette classe
dans laquelle elle est définie.

160
00:09:04,538 --> 00:09:06,287
A noter qu'en dehors de cela,

161
00:09:06,287 --> 00:09:08,667
la classe dans laquelle 
la méthode main est définie,

162
00:09:08,667 --> 00:09:12,919
est comme n'importe quelle autre classe,
elle peut avoir des attributs,

163
00:09:12,919 --> 00:09:15,441
des méthodes, des constructeurs, etc.

164
00:09:16,331 --> 00:09:20,761
Voilà, ceci conclut donc cette séquence 
sur les méthodes statiques,

165
00:09:20,761 --> 00:09:22,140
sur les méthodes de classe.
