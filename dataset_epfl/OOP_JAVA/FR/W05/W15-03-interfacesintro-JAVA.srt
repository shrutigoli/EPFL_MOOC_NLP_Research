1
00:00:03,926 --> 00:00:05,910
Dans cette séquence vidéo et la suivante

2
00:00:05,910 --> 00:00:07,898
nous allons nous intéresser
à un nouveau concept:

3
00:00:07,898 --> 00:00:09,648
les interfaces en Java.

4
00:00:09,648 --> 00:00:13,163
Mais commençons par un exemple
avec cette fois ci un autre jeu,

5
00:00:13,163 --> 00:00:15,295
où l'on aurait par exemple,
besoin de balles,

6
00:00:15,295 --> 00:00:18,218
de raquettes, de filets, de joueurs.

7
00:00:18,628 --> 00:00:21,258
Et supposons que chacune de ces entités

8
00:00:21,258 --> 00:00:25,468
ait besoin d'une méthode <i>evolue</i>
pour les faire évoluer dans le jeu.

9
00:00:25,478 --> 00:00:27,818
Naturellement la façon
de concevoir ceci

10
00:00:27,818 --> 00:00:29,758
en programmation orientée objets

11
00:00:29,758 --> 00:00:32,418
serait de faire
une classe abstraite <i>Entite</i>

12
00:00:32,418 --> 00:00:35,178
qui aurait donc
la méthode abstraite <i>evolue</i>

13
00:00:35,178 --> 00:00:39,058
et de faire hériter la balle,
les raquettes, le filet, le joueur

14
00:00:39,058 --> 00:00:41,298
de cette classe abstraite <i>Entite</i>.

15
00:00:42,078 --> 00:00:44,408
Mais admettons que l'on
pousse un peu plus loin

16
00:00:44,408 --> 00:00:45,818
l'analyse du jeu,

17
00:00:45,818 --> 00:00:48,478
et qu'on se rende compte que
certaine de ces entités,

18
00:00:48,478 --> 00:00:50,958
donc par exemple, les balles
les raquettes, les filets,

19
00:00:50,958 --> 00:00:52,958
devraient avoir
une représentation graphique

20
00:00:52,958 --> 00:00:56,228
qu'on les voit effectivement,
sur l'écran du jeu,

21
00:00:56,228 --> 00:00:59,238
et que par exemple,
on ne voit pas le joueur.

22
00:00:59,238 --> 00:01:01,598
Donc à ce moment là on aurait à dissocier

23
00:01:01,598 --> 00:01:03,958
les joueurs des balles,
des raquettes, et des filets

24
00:01:03,958 --> 00:01:07,518
du point de vue,
d'avoir une représentation graphique.

25
00:01:07,978 --> 00:01:10,318
On pourrait aussi imaginer
que certaines entités

26
00:01:10,318 --> 00:01:12,238
devraient être interactives,

27
00:01:12,238 --> 00:01:14,218
donc par exemple
pour pouvoir les contrôler

28
00:01:14,218 --> 00:01:15,858
au clavier ou à la souris,

29
00:01:15,858 --> 00:01:18,278
comme donc une balle ou une raquette.

30
00:01:18,548 --> 00:01:21,478
Et d'autres que l'on ne
pourrait pas faire bouger

31
00:01:21,478 --> 00:01:24,378
donc par exemple, le filet et le joueur.

32
00:01:24,378 --> 00:01:26,618
Donc comment organiser tout ceci

33
00:01:26,618 --> 00:01:29,738
au niveau de notre conception
orienté objet.

34
00:01:30,228 --> 00:01:33,038
Idéalement on ferait tout ça
aux travers de classes

35
00:01:33,038 --> 00:01:36,038
avec donc, par exemple 
une classe interactif

36
00:01:36,038 --> 00:01:38,638
qui nous permettrait
de gérer de façon interactive

37
00:01:38,638 --> 00:01:41,438
donc, la balle par exemple et la raquette.

38
00:01:41,438 --> 00:01:44,338
Une classe qui nous permettrait
d'avoir une méthode

39
00:01:44,338 --> 00:01:46,678
pour dessiner graphiquement
les objets graphiques

40
00:01:46,678 --> 00:01:49,578
dont hériteraient
filet, raquette et balle.

41
00:01:49,938 --> 00:01:53,178
Mais ceci ferait donc ce que l'on appelle 
de l'héritage multiple.

42
00:01:53,178 --> 00:01:55,698
La balle hériterait de façon multiple

43
00:01:55,698 --> 00:01:58,858
d'une entité et d'interactif
et de graphique,

44
00:01:58,858 --> 00:02:02,018
or en java on ne peut pas
avoir d'héritage multiple

45
00:02:02,018 --> 00:02:04,638
en java on a que de l'héritage simple.

46
00:02:04,638 --> 00:02:06,318
Donc comment faire ?

47
00:02:06,878 --> 00:02:08,738
Avant d'y répondre, signalons simplement

48
00:02:08,738 --> 00:02:10,658
que certains autres
langages de programmation

49
00:02:10,658 --> 00:02:12,738
ont choisi d'avoir l'héritage multiple

50
00:02:12,738 --> 00:02:15,558
alors donc pourquoi il n'y a pas 
d'héritage multiple en java ?

51
00:02:15,558 --> 00:02:17,848
Simplement parce que il y a
parfois des situations

52
00:02:17,848 --> 00:02:19,838
un peu difficile à comprendre,

53
00:02:19,838 --> 00:02:22,498
difficile de comprendre quel sens
on veut vraiment donner,

54
00:02:22,498 --> 00:02:26,138
donc par exemple si on avait une classe,
qui hérite multiplement d'un animal,

55
00:02:26,138 --> 00:02:28,428
est ce que c'est un animal ?
Le même animal ?

56
00:02:28,428 --> 00:02:30,358
Ou est ce que c'est deux animaux ?

57
00:02:30,358 --> 00:02:33,381
Et ces situations sont aussi difficiles 
à comprendre pour le compilateur

58
00:02:33,381 --> 00:02:35,418
donc avec des décisions à prendre.

59
00:02:35,418 --> 00:02:37,758
Ceux qui voudraient s'en convaincre
pourraient aller voir

60
00:02:37,758 --> 00:02:40,918
la séquence sur
les classes virtuelles en c++

61
00:02:40,918 --> 00:02:43,758
sur notre autre mooc
qui se déroule en parallèle

62
00:02:43,758 --> 00:02:47,018
concernant le langage c++
et vous serez certainement convaincu.

63
00:02:47,018 --> 00:02:49,698
Une autre raison c'est
qu'on peut avoir de l’ambiguïté

64
00:02:49,698 --> 00:02:51,778
lorsqu'une méthode
ou une variable est déclarée

65
00:02:51,778 --> 00:02:53,398
dans plusieurs super-classes.

66
00:02:53,398 --> 00:02:55,758
Laquelle utiliser ? Comment y accéder ?

67
00:02:55,758 --> 00:02:58,218
Donc, pour de bonnes raisons,
Java a décidé

68
00:02:58,218 --> 00:03:00,358
de ne pas avoir d'héritage multiple.

69
00:03:00,358 --> 00:03:02,638
Donc, comment faire
pour bien concevoir en java,

70
00:03:02,638 --> 00:03:05,378
le jeu que nous avons imaginé jusqu'ici ?

71
00:03:05,378 --> 00:03:08,058
Revenons pour cela à la raison
qui nous avait poussé

72
00:03:08,058 --> 00:03:10,358
à introduire de l'héritage multiple,

73
00:03:10,358 --> 00:03:13,578
pourquoi voulions-nous de l'héritage
multiple dans notre jeu vidéo ?

74
00:03:13,578 --> 00:03:16,558
Pour imposer à certaines classes
de mettre en oeuvre

75
00:03:16,558 --> 00:03:18,818
des méthodes communes.

76
00:03:18,818 --> 00:03:21,238
Donc par exemple, on voulait
que <i>Balle</i> et <i>Raquette</i>

77
00:03:21,238 --> 00:03:24,668
aient une méthode qui permette
par exemple, de gérer un clique de souris.

78
00:03:24,668 --> 00:03:26,508
Mais la méthode <i>gestionClic</i>

79
00:03:26,508 --> 00:03:28,628
ne peut pas être une méthode
pour leur super-classe,

80
00:03:28,628 --> 00:03:30,868
commune à tous pour la classe <i>Entite</i>

81
00:03:30,868 --> 00:03:34,538
parce qu'un joueur par exemple
n'a pas de <i>gestionClic</i>.

82
00:03:34,548 --> 00:03:38,668
Donc ce que l'on veut c'est imposer
un contenu commun à certaines sous-classes

83
00:03:38,668 --> 00:03:40,788
en dehors d'une relation d'héritage

84
00:03:40,788 --> 00:03:42,688
pour les différencier
d'autres sous-classes,

85
00:03:42,688 --> 00:03:44,788
c'est ce qu'on appelle
la notion justement

86
00:03:44,788 --> 00:03:47,038
d'interface en java.

87
00:03:47,606 --> 00:03:49,257
La notion d'interface en java

88
00:03:49,257 --> 00:03:51,717
qui est différente
de la notion de classe,

89
00:03:51,717 --> 00:03:54,577
va nous permettre comme ça
d'imposer à certaines classes

90
00:03:54,577 --> 00:03:56,857
d'avoir des contenus particuliers

91
00:03:56,857 --> 00:04:00,077
sans que ça fasse partie,
à proprement parler, d'une classe

92
00:04:00,077 --> 00:04:03,397
donc par exemple ici les sous-classes
<i>Raquette</i> et <i>Balle</i>,

93
00:04:03,397 --> 00:04:05,217
sous-classe de la classe Entite,

94
00:04:05,217 --> 00:04:08,090
vont en plus avoir l'interface,
par exemple,

95
00:04:08,090 --> 00:04:09,723
Interaction ou Interactif

96
00:04:09,723 --> 00:04:13,397
qui permet donc de gérer, par exemple
les interactions à la souris

97
00:04:13,397 --> 00:04:15,517
et il n'aurait été bien sûr, pas correct

98
00:04:15,517 --> 00:04:19,147
d'avoir cette méthode <i>gestionClic</i>
dans la classe <i>Entite</i> ,

99
00:04:19,147 --> 00:04:21,623
parce qu'alors le filet et le joueur

100
00:04:21,623 --> 00:04:24,099
auraient aussi eu
une méthode <i>gestionClic</i>

101
00:04:24,099 --> 00:04:26,577
dont ils n'ont absolument rien à faire.

102
00:04:26,577 --> 00:04:30,677
Les sous-classes balle, raquette et filet
de la classe Entite

103
00:04:30,677 --> 00:04:33,557
vont, en plus, avoir une interface

104
00:04:33,557 --> 00:04:38,457
qui les oblige à pouvoir se décider
d'un point de vue graphique.

105
00:04:38,717 --> 00:04:41,307
Voila donc pour le concept d'interface.

106
00:04:41,857 --> 00:04:44,537
Maintenant que vous avez une idée
de l'utilité des interfaces

107
00:04:44,537 --> 00:04:47,637
voyons à quoi cela correspond
concrètement en java.

108
00:04:48,000 --> 00:04:49,900 
Avant de poursuivre sur le
contenu des interfaces,

109
00:04:50,000 --> 00:04:52,400 
il convient de faire une remarque importante.

110
00:04:52,500 --> 00:04:53,900 
Les interfaces jusqu'à Java 7,

111
00:04:54,000 --> 00:04:56,900 
comme vous aurez l'occasion de le voir
dans les transparents qui suivent,

112
00:04:57,000 --> 00:05:00,900 
ne peuvent contenir que des constantes

113
00:05:01,000 --> 00:05:02,900 
et des méthodes abstraites.

114
00:05:03,000 --> 00:05:06,900 
De nombreuses nouveautés ont cependant
été ajoutées depuis Java 8.

115
00:05:08,000 --> 00:05:11,900 
Dans les transparent qui suivent,
nous allons essentiellement exposer

116
00:05:12,000 --> 00:05:16,900 
le contenu des interfaces telles que
classiquement défini jusqu'à Java 7.

117
00:05:18,500 --> 00:05:22,500 
Les nouveautés de Java 8 feront, elles,
l'objet d'une nouvelle vidéo.

118
00:05:23,077 --> 00:05:26,054
En java, une interface se déclare
un peu comme une classe

119
00:05:26,054 --> 00:05:28,474
à la différence près que on va remplacer

120
00:05:28,474 --> 00:05:31,394
le mot réservé <i>classe</i>
par le mot réservé <i>interface</i>

121
00:05:31,394 --> 00:05:34,694
suivi du nom de l'interface,
librement choisi,

122
00:05:34,694 --> 00:05:37,694
puis, une paire d'accolades
ouvrantes et fermantes

123
00:05:37,694 --> 00:05:39,624
un peu comme pour le corps d'une classe.

124
00:05:39,994 --> 00:05:42,714
A la différence d'une classe,
une interface ne peut comporter

125
00:05:42,714 --> 00:05:45,494
que des méthodes abstraites,
ce qui est le cas le plus courant,

126
00:05:45,494 --> 00:05:47,554
ou encore, des constantes.

127
00:05:47,554 --> 00:05:51,034
Voici donc à quoi pourrait correspondre
le code des interfaces

128
00:05:51,034 --> 00:05:53,334
de notre petit exemple d'introduction.

129
00:05:53,334 --> 00:05:55,334
Vous vous demandez sans doute ici

130
00:05:55,334 --> 00:05:58,514
pourquoi les méthodes définies
à l'intérieur des interfaces

131
00:05:58,514 --> 00:06:00,834
sont définies sans 
le mot réservé <i>abstract</i>

132
00:06:00,834 --> 00:06:02,854
alors que nous venons de voir
qu'une interface

133
00:06:02,854 --> 00:06:05,014
ne contient que des méthodes abstraites,

134
00:06:05,014 --> 00:06:07,374
nous aurons l'occasion d'y revenir
dans un petit moment.

135
00:06:07,624 --> 00:06:10,814
Pour rappel, l'idée était 
que ces interfaces

136
00:06:10,814 --> 00:06:13,094
imposent un certain contenu aux classes

137
00:06:13,094 --> 00:06:15,154
avec lesquelles elles sont en relation.

138
00:06:15,154 --> 00:06:17,274
Et ici le contenu imposé
était typiquement

139
00:06:17,274 --> 00:06:19,364
un certain nombre de méthodes.

140
00:06:19,944 --> 00:06:23,114
Une interface, ne pouvant contenir
que des méthodes abstraites,

141
00:06:23,114 --> 00:06:25,314
ne peut pas contenir de constructeur

142
00:06:25,314 --> 00:06:29,014
il est donc impossible de créer
une instance d'interface.

143
00:06:29,304 --> 00:06:33,114
Donc ici par exemple,
je ne peux pas écrire dans un programme

144
00:06:33,114 --> 00:06:35,634
quelque chose qui a cette allure,

145
00:06:35,634 --> 00:06:38,185
donc, déclarer un objet graphique

146
00:06:38,185 --> 00:06:42,125
et essayer de l'instancier 
par une tournure de cette nature.

147
00:06:42,125 --> 00:06:44,495
Ceci est évidemment, impossible.

148
00:06:44,805 --> 00:06:47,481
Mais revenons à la question
qui nous a préoccupé tout à l'heure :

149
00:06:47,481 --> 00:06:49,421
pourquoi sommes nous ici dispensés

150
00:06:49,421 --> 00:06:52,841
de mettre explicitement
le mot réservé <i>abstract</i> , par exemple ?

151
00:06:52,841 --> 00:06:55,781
Comme les méthodes d'une interface
sont nécessairement abstraites,

152
00:06:55,781 --> 00:06:58,241
java vous dispense
de le mentionner explicitement.

153
00:06:58,241 --> 00:06:59,641
Ce qu'il faut savoir,

154
00:06:59,641 --> 00:07:02,531
c'est que toute méthode
déclarée dans une interface

155
00:07:02,531 --> 00:07:07,291
est nécessairement abstraite
et nécessairement publique.

156
00:07:08,800 --> 00:07:11,540
Si vous essayez de déclarer
une méthode d'interface

157
00:07:11,540 --> 00:07:13,680
avec un autre modificateur que <i>public</i>

158
00:07:13,680 --> 00:07:16,550
vous aurez droit à un message
d'erreur du compilateur.

159
00:07:16,740 --> 00:07:19,580
Il est également possible de faire figurer
dans une interface,

160
00:07:19,580 --> 00:07:22,500
des constantes, 
même si cela est moins courant

161
00:07:22,500 --> 00:07:24,420
que les méthodes abstraites.

162
00:07:24,420 --> 00:07:27,600
Par exemple, je pourrais définir
une interface comme ceci

163
00:07:27,600 --> 00:07:31,503
qui contient donc des constantes,
comme ceci,

164
00:07:31,503 --> 00:07:34,503
et dans ce cas là, je dois donner
des valeurs aux constantes

165
00:07:34,503 --> 00:07:36,563
puisqu'il n'y a pas
de constructeur éventuel

166
00:07:36,563 --> 00:07:39,643
qui pourrait attribuer 
des valeur initiales à ces constantes,

167
00:07:39,643 --> 00:07:42,043
je suis obligée de le faire à ce stade

168
00:07:42,273 --> 00:07:43,683
et comme pour les méthodes,

169
00:07:43,683 --> 00:07:47,243
il y a aussi des modificateurs implicites
pour les constantes,

170
00:07:47,243 --> 00:07:50,063
toute constante que vous mettez
dans une interface

171
00:07:50,063 --> 00:07:55,139
est nécessairement public, final,

172
00:07:55,139 --> 00:07:56,433
et static.

173
00:07:57,583 --> 00:07:59,823
Nous savons maintenant
ce que l'on peut mettre

174
00:07:59,823 --> 00:08:01,643
à l'intérieur d'une interface,

175
00:08:01,643 --> 00:08:04,423
intéressons nous à comment établir le lien

176
00:08:04,423 --> 00:08:06,983
entre l'interface et une classe.

177
00:08:07,403 --> 00:08:10,983
Ce lien s'établit au moyen
d'un mot réservé particulier :

178
00:08:10,983 --> 00:08:13,043
le mot réservé <i>implements</i>

179
00:08:13,043 --> 00:08:15,163
lorsque l'on déclare la classe

180
00:08:15,163 --> 00:08:19,033
on va indiquer que cette classe implémente
un certain nombre d'interfaces.

181
00:08:19,043 --> 00:08:21,803
Il peut y en avoir plusieurs,
séparées par des virgules.

182
00:08:22,243 --> 00:08:25,511
Par exemple, pour exprimer
le fait que notre classe filet

183
00:08:25,511 --> 00:08:27,431
étend la classe Entite

184
00:08:27,431 --> 00:08:29,571
mais implémente l'interface Graphique,

185
00:08:29,571 --> 00:08:34,051
ce qui va nous permettre de voir ce filet
comme un objet dessinable,

186
00:08:34,051 --> 00:08:37,931
on va écrire en java,
la classe <i>Filet</i> étend la classe <i>Entite</i>

187
00:08:37,991 --> 00:08:40,922
et implémente l'interface Graphique.

188
00:08:41,162 --> 00:08:44,182
Lorsqu'une classe implémente
un certain nombre d'interfaces

189
00:08:44,182 --> 00:08:47,302
il est impératif, si on veut
qu'elle soit instantiable

190
00:08:47,302 --> 00:08:49,502
qu'elle redéfinisse toutes les méthodes

191
00:08:49,502 --> 00:08:51,422
déclarées dans les interfaces.

192
00:08:51,422 --> 00:08:53,102
Toutes les méthodes abstraites

193
00:08:53,102 --> 00:08:57,552
doivent être redéfinies concrètement
dans la classe qui les implémente,

194
00:08:57,552 --> 00:08:59,482
pour que celles-ci soient instanciables.

195
00:08:59,482 --> 00:09:02,642
C'est de cette façon
qu'une interface impose un contenu

196
00:09:02,642 --> 00:09:04,282
à une classe qui l'implémente,

197
00:09:04,282 --> 00:09:10,042
dès l'instant où on établit le lien
entre la classe et l'interface,

198
00:09:10,052 --> 00:09:12,242
alors la classe,
si on veut pouvoir l'instancier

199
00:09:12,242 --> 00:09:16,962
doit redéfinir toutes les méthodes
spécifiées dans l'interface.

200
00:09:16,962 --> 00:09:18,585
Donc comme nous l'avons vu,

201
00:09:18,585 --> 00:09:20,725
une classe peut parfaitement implémenter

202
00:09:20,725 --> 00:09:23,185
plusieurs interfaces, par exemple,

203
00:09:23,185 --> 00:09:28,125
la balle est un objet cliquable
et est un objet dessinable,

204
00:09:28,125 --> 00:09:30,205
donc elle implémente deux interfaces,

205
00:09:30,205 --> 00:09:33,345
l'interface Interactif
et l'interface Graphique.

206
00:09:33,815 --> 00:09:36,405
Si on veut pouvoir créer
des instances de bases

207
00:09:36,405 --> 00:09:37,985
ce qui est probablement le cas,

208
00:09:37,985 --> 00:09:40,345
alors la classe Balle doit impérativement

209
00:09:40,345 --> 00:09:44,105
donner une définition concrète
de la méthode <i>gestionClic</i>

210
00:09:44,105 --> 00:09:46,345
et de la méthode <i>dessiner</i> .

211
00:09:46,811 --> 00:09:49,191
Notez qu'en java,
il est tout à fait possible

212
00:09:49,191 --> 00:09:51,851
de déclarer une hiérarchie d'interfaces.

213
00:09:52,221 --> 00:09:54,731
On dira qu'une interface
en étend une autre

214
00:09:54,731 --> 00:09:57,831
et ceci s'exprime au moyen
du mot réservé <i>extends</i>

215
00:09:57,831 --> 00:09:59,571
comme pour les classes.

216
00:09:59,571 --> 00:10:02,011
Par exemple ici nous avons
deux interfaces

217
00:10:02,011 --> 00:10:04,551
GerableParSouris et GerableParClavier

218
00:10:04,551 --> 00:10:08,551
qui étendent toutes deux
une super-interface Interactif.

219
00:10:08,971 --> 00:10:12,681
Nous avons bel et bien ici,
une hiérarchie d'interfaces

220
00:10:13,051 --> 00:10:16,581
avec une super-interface Interactif,

221
00:10:16,581 --> 00:10:21,031
et deux sous-interfaces,
GerableParSouris

222
00:10:21,031 --> 00:10:24,274
et GerableParClavier.

223
00:10:25,747 --> 00:10:27,151
Avant de poursuivre,

224
00:10:27,151 --> 00:10:30,771
revenons à notre premier exemple
de classe implémentant une interface

225
00:10:30,771 --> 00:10:34,451
et ce, pour mentionner un point,
qui peut avoir son importance.

226
00:10:34,451 --> 00:10:36,864
Nous avons vu précédemment
que dans une interface

227
00:10:36,864 --> 00:10:39,291
les méthodes était de facto, publiques.

228
00:10:39,411 --> 00:10:43,661
Que se passe-t-il si une classe
qui implémente une interface,

229
00:10:43,661 --> 00:10:47,031
définit la méthode
présente dans l'interface

230
00:10:47,031 --> 00:10:50,051
mais avec des droits différents
que le droit public ?

231
00:10:50,051 --> 00:10:52,151
Donc imaginez par exemple qu'ici

232
00:10:52,151 --> 00:10:55,241
je mette le droit d'accès <i>protected</i>.

233
00:10:55,671 --> 00:10:58,961
Et bien ceci sera tout bonnement
refusé par le compilateur

234
00:10:58,961 --> 00:11:02,831
parce qu'en java, lorsque 
vous redéfinissez une méthode existante

235
00:11:02,831 --> 00:11:05,021
vous avez le droit d’élargir les droits

236
00:11:05,021 --> 00:11:06,921
mais jamais de les restreindre.

237
00:11:06,921 --> 00:11:08,861
Notez que ceci est également valable

238
00:11:08,861 --> 00:11:11,901
pour la redéfinition
dans le cadre de l'héritage.

239
00:11:11,901 --> 00:11:13,961
Si j'ai par exemple
une super-classe A

240
00:11:13,961 --> 00:11:15,901
dont hérite une sous-classe <i>B</i>,

241
00:11:15,901 --> 00:11:20,841
si  A définit une méthode m
comme <i>public</i>

242
00:11:20,851 --> 00:11:23,721
alors la redéfinition de cette méthode

243
00:11:23,721 --> 00:11:25,601
ne peut pas restreindre les droits.

244
00:11:27,081 --> 00:11:28,661
Ceci sera refusé.

245
00:11:29,001 --> 00:11:31,414
En déclarant une interface
dans un programme java

246
00:11:31,414 --> 00:11:33,534
vous déclarez en fait un nouveau type,

247
00:11:33,534 --> 00:11:36,354
comme c'est le cas lorsque vous
déclarez une nouvelle classe.

248
00:11:36,354 --> 00:11:38,754
Il est donc tout à fait possible 
de déclarer

249
00:11:38,754 --> 00:11:40,954
une variable de type <i>interface</i>

250
00:11:40,954 --> 00:11:42,714
comme ceci par exemple,

251
00:11:42,714 --> 00:11:46,394
et d'y affecter un objet 
mais attention, pas n'importe lequel,

252
00:11:46,394 --> 00:11:49,022
l'objet d'une classe
qui implémente cette interface.

253
00:11:49,562 --> 00:11:50,972
C'est le cas ici,

254
00:11:50,972 --> 00:11:54,022
donc nous affectons à une variable
de type Graphique,

255
00:11:54,022 --> 00:11:57,712
un objet de type <i>Balle</i>

256
00:11:57,722 --> 00:11:59,382
préalablement instancié.

257
00:11:59,382 --> 00:12:02,202
pour que ceci soit possible 
il faut, évidemment,

258
00:12:02,202 --> 00:12:03,842
que la classe <i>Balle</i>

259
00:12:03,842 --> 00:12:05,962
implémente l'interface Graphique.

260
00:12:05,962 --> 00:12:08,222
Il peut être intéressant
dans certaines situations

261
00:12:08,222 --> 00:12:11,502
de manipuler des objets
sous leur étiquette d'interface

262
00:12:11,502 --> 00:12:13,342
plutôt que sur leur étiquette propre,

263
00:12:13,342 --> 00:12:15,882
par exemple ici,
plutôt manipuler une balle

264
00:12:15,882 --> 00:12:18,382
comme un objet graphique,
et dans ce cas,

265
00:12:18,382 --> 00:12:20,902
ça justifie ce genre d'affectation.

266
00:12:20,902 --> 00:12:22,442
Dernière petite remarque :

267
00:12:22,442 --> 00:12:24,882
sachant qu'on peut 
parfaitement affecter

268
00:12:24,882 --> 00:12:28,342
un objet de type sous-classe
à une variable de type super-classe,

269
00:12:28,342 --> 00:12:31,792
cette variable contenant
un objet de type Balle donc,

270
00:12:31,802 --> 00:12:33,842
implémentant l'interface Graphique.

271
00:12:33,842 --> 00:12:36,642
Est-ce qu'il est possible
d'affecter cette variable

272
00:12:36,642 --> 00:12:38,502
à un objet de type Graphique ?

273
00:12:38,502 --> 00:12:41,522
Alors, ceci est possible
mais à une condition près,

274
00:12:41,522 --> 00:12:44,002
il faut ici rassurer votre compilateur

275
00:12:44,002 --> 00:12:46,642
sur le fait que ce qui est contenu
dans la variable

276
00:12:46,642 --> 00:12:51,012
est bel et bien un objet
qui implémente l’interface,

277
00:12:51,012 --> 00:12:53,209
en question, l'interface Graphique.

278
00:12:53,209 --> 00:12:56,209
Et pour se faire on a recours,
à une conversion de type

279
00:12:56,209 --> 00:12:58,009
à un transtypage, ici.

280
00:12:58,009 --> 00:13:01,389
Pour résumer, la fonction essentielle
d'une interface

281
00:13:01,389 --> 00:13:04,049
est d'attribuer des composants communs

282
00:13:04,049 --> 00:13:07,729
à des classes qui ne sont pas liées
par une relation d'héritage.

283
00:13:07,729 --> 00:13:10,589
En clair dans notre exemple,
l'interface Interactif

284
00:13:10,589 --> 00:13:12,409
nous a permis ici d'imposer

285
00:13:12,409 --> 00:13:15,769
un contenu commun,
une méthode <i>gestionClic</i>

286
00:13:15,769 --> 00:13:18,529
à deux classes, Balle, Raquette
par exemple,

287
00:13:18,529 --> 00:13:21,229
qui ne sont pas liées entre elles
par un lien d'héritage.

288
00:13:21,229 --> 00:13:24,049
Nous n'avons pas <i>Balle</i> héritant
de <i>Raquette</i> ou vice versa.

289
00:13:24,799 --> 00:13:27,979
Une interface peut comporter
soit des constantes

290
00:13:27,979 --> 00:13:31,319
c'est à dire, des variables finales,
statiques, publiques.

291
00:13:31,319 --> 00:13:34,399
C'est assez rare et exige
une certaine discipline.

292
00:13:34,399 --> 00:13:36,419
Pourquoi ? Parce que il peut y avoir

293
00:13:36,419 --> 00:13:39,239
une ambiguïté possible,
si par exemple, une classe

294
00:13:39,239 --> 00:13:43,519
implémente deux interfaces qui chacune
comporte la même constante.

295
00:13:43,519 --> 00:13:45,799
Supposez par exemple,
que dans un programme

296
00:13:45,799 --> 00:13:48,339
nous ayons une première interface <i>I1</i>

297
00:13:48,339 --> 00:13:52,079
qui contienne la définition
d'une certaine constante

298
00:13:52,079 --> 00:13:55,649
et une seconde interface <i>I2</i>

299
00:13:55,649 --> 00:13:58,439
qui contiendrait une constante
du même nom.

300
00:13:59,047 --> 00:14:02,627
Avec possiblement, une autre valeur
mais pas forcément.

301
00:14:03,097 --> 00:14:06,727
Si maintenant nous voulons 
déclarer une classe C

302
00:14:06,727 --> 00:14:10,467
qui implémenterait
les deux interfaces,

303
00:14:10,477 --> 00:14:14,647
alors ici clairement, il y a un problème,
il y a une ambiguïté :

304
00:14:14,657 --> 00:14:16,917
laquelle des deux constantes
veut-on utiliser ?

305
00:14:16,917 --> 00:14:19,977
Et ceci sera refusé par le compilateur.

306
00:14:20,312 --> 00:14:22,702
Autre composant possible d'une interface

307
00:14:22,702 --> 00:14:25,282
et le plus couramment rencontré :
les méthodes abstraites,

308
00:14:25,282 --> 00:14:27,562
et là nous avons vu que toute classe

309
00:14:27,562 --> 00:14:30,702
qui implémente l'interface,
si elle veut pouvoir être instanciée,

310
00:14:30,702 --> 00:14:33,662
doit fournir une définition concrète
de la méthode,

311
00:14:33,662 --> 00:14:36,022
sinon elle ne pourra pas être instanciée.

312
00:14:36,022 --> 00:14:38,088
Les interfaces permettent donc,

313
00:14:38,088 --> 00:14:42,202
d'imposer à certaines classes de fournir 
un certain contenu sans forcément,

314
00:14:42,202 --> 00:14:45,372
avoir recours à la notion de classe
et de méthode abstraite.

315
00:14:45,642 --> 00:14:47,682
Contrairement au cas des variables

316
00:14:47,682 --> 00:14:50,302
comme les méthodes abstraites
sont sans instructions

317
00:14:50,302 --> 00:14:53,002
il n'y a pas d’ambiguïté possible,
par exemple,

318
00:14:53,002 --> 00:14:55,042
si dans une interface <i>I1</i>

319
00:14:55,042 --> 00:14:59,302
il y a une méthode abstraite <i>m</i>
et que dans une autre,

320
00:15:00,731 --> 00:15:03,731
interface <i>I2</i>, il y a également

321
00:15:05,170 --> 00:15:08,070
une méthode abstraite <i>m</i>
alors une classe <i>C</i>

322
00:15:09,463 --> 00:15:13,853
peut parfaitement implémenter
les deux interfaces

323
00:15:14,103 --> 00:15:17,173
sans que cela ne fasse réagir
le compilateur.

324
00:15:18,657 --> 00:15:20,757
Si elle veut pouvoir être instanciée

325
00:15:20,757 --> 00:15:24,977
la classe <i>C</i> doit, en effet,
fournir une définition de la méthode <i>m</i>

326
00:15:25,017 --> 00:15:27,517
peu importe qui
lui en impose la présence.

327
00:15:27,517 --> 00:15:29,657
Notez que l'API de java

328
00:15:29,657 --> 00:15:33,277
fournit de très nombreuses interfaces
prédéfinies, par exemple,

329
00:15:33,277 --> 00:15:37,237
l'interface <i>comparable</i>

330
00:15:37,877 --> 00:15:45,497
impose aux classes qui l'implémentent
de fournir une méthode <i>compareTo</i>

331
00:15:45,497 --> 00:15:50,847
prenant en argument
un objet de type <i>Object</i>.

332
00:15:51,664 --> 00:15:54,604
Pour terminer, intéressons nous
à quel type de relation

333
00:15:54,604 --> 00:15:56,384
met en place une interface.

334
00:15:56,384 --> 00:15:58,444
Typiquement nous avons vu

335
00:15:58,444 --> 00:16:02,284
que l'héritage permet de mettre en place
une relation de type « est-un »

336
00:16:02,284 --> 00:16:04,284
une balle est une entité du jeu.

337
00:16:04,724 --> 00:16:07,154
Nous avons vu également
que lorsqu'une classe

338
00:16:07,154 --> 00:16:09,414
a pour attribut un objet
d'une autre classe

339
00:16:09,414 --> 00:16:11,454
alors, il s'établit entre les deux classes

340
00:16:11,454 --> 00:16:14,614
une relation de type « a-un » :
un guerrier a une arme.

341
00:16:14,854 --> 00:16:18,054
Enfin, une interface permet 
en fait d'assurer

342
00:16:18,054 --> 00:16:20,854
qu'une classe se conforme
à un certain protocole

343
00:16:20,854 --> 00:16:23,614
et nous allons dire donc
que la relation qui est mise en place

344
00:16:23,614 --> 00:16:25,414
est une relation de type :

345
00:16:25,414 --> 00:16:28,954
« se-comporte-comme » : une Balle
« est-une » entité du jeu

346
00:16:28,954 --> 00:16:31,174
mais elle se comporte comme

347
00:16:31,174 --> 00:16:34,054
un objet graphique et un objet interactif.

348
00:16:34,054 --> 00:16:37,754
Et ceci conclut notre séquence
sur les interfaces en java.
