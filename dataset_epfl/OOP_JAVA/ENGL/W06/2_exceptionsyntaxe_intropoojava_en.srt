1
00:00:04,185 --> 00:00:06,206
In the previous episode, you learned

2
00:00:06,206 --> 00:00:08,790
that when we want to generate
exceptions in Java,

3
00:00:08,790 --> 00:00:11,305
we basically seek to do
four things.

4
00:00:11,305 --> 00:00:14,497
Signalling errors at the place
they occur.

5
00:00:14,497 --> 00:00:18,005
Marking places that we want to
make receptive for errors,

6
00:00:18,005 --> 00:00:22,320
and associating to each of these
places a way of handling these errors.

7
00:00:22,320 --> 00:00:26,217
This is a big advantage of
exception handling

8
00:00:26,217 --> 00:00:31,135
We separate error handling

9
00:00:31,135 --> 00:00:34,677
from the place where they occur.

10
00:00:34,677 --> 00:00:37,039
Finally, the fourth thing
we might want to do

11
00:00:37,039 --> 00:00:41,094
is possibly to clean up after each
error-aware bloc.

12
00:00:41,094 --> 00:00:43,883
We will thus have four words
in the language

13
00:00:43,883 --> 00:00:47,731
that will be dedicated to each
of these elementary tasks

14
00:00:47,731 --> 00:00:49,313
that we want to take care of.

15
00:00:49,313 --> 00:00:52,100
In this episode, we will
present how to use

16
00:00:52,100 --> 00:00:53,829
each of these four words one by one

17
00:00:53,829 --> 00:00:59,384
starting of course with the <i>throw</i> keyword
which allows us to indicate an error.

18
00:00:59,384 --> 00:01:02,425
We will say that <i>throw</i>  throws an exception

19
00:01:03,443 --> 00:01:06,247
The syntax of <i>throw</i> to
throw an error,

20
00:01:06,247 --> 00:01:08,775
to signal an error, is the following.

21
00:01:08,775 --> 00:01:11,382
<i>throw</i> then an exception.

22
00:01:11,382 --> 00:01:12,867
What is an exception?

23
00:01:12,867 --> 00:01:15,030
It is an object of type Exception.

24
00:01:15,030 --> 00:01:18,336
The Exception type is a type
which exists in the Java API

25
00:01:18,336 --> 00:01:22,343
and which is provided by the
<i>java.lang</i> library

26
00:01:22,343 --> 00:01:25,827
that contains many subclasses which we
will present in a moment.

27
00:01:26,117 --> 00:01:29,901
So an exception is an object of
type <i>Exception</i> 

28
00:01:29,901 --> 00:01:34,306
which, when the <i>throw</i>
statement is executed,

29
00:01:34,306 --> 00:01:36,491
is, so to speak, thrown.

30
00:01:36,491 --> 00:01:39,786
This means that there is a mechanism
which will create such an object

31
00:01:39,786 --> 00:01:42,719
that will be able to be handled
by the other keywords

32
00:01:42,719 --> 00:01:44,813
in the exception handling mechanism.

33
00:01:45,045 --> 00:01:47,318
This is what it means to
"throw an exception".

34
00:01:47,582 --> 00:01:50,922
There is a fairly special treatment
of these peculiar objects,

35
00:01:50,922 --> 00:01:54,425
these errors to be handled,
on the level of the program.

36
00:01:54,425 --> 00:01:57,945
For example, we could have
a line such as this one:

37
00:01:57,945 --> 00:02:01,931
<i>throw new Exception</i>,
so we create a new exception

38
00:02:01,931 --> 00:02:04,231
Then for example, by calling
its constructor

39
00:02:04,231 --> 00:02:06,632
taking as parameter a character
string

40
00:02:06,632 --> 00:02:09,708
indicating an error message, "Quelle Erreur!".
(TN: means "What an error!").

41
00:02:09,708 --> 00:02:13,141
This message is now associated to
this new instance

42
00:02:13,141 --> 00:02:14,734
of the Exception class.

43
00:02:15,314 --> 00:02:18,119
What does it really mean to
"throw an exception"?

44
00:02:18,568 --> 00:02:21,181
It means that the <i>throw</i> statement

45
00:02:21,181 --> 00:02:24,823
will skip the normal execution
sequence of the program

46
00:02:24,823 --> 00:02:30,838
and will jump either to the next <i>catch</i> 
bloc directly linked to a <i>try</i> bloc.

47
00:02:31,152 --> 00:02:33,018
We will talk about catch and try in a moment.

48
00:02:33,238 --> 00:02:35,228
For the moment, the important part to
remember is that it will jump

49
00:02:35,228 --> 00:02:37,261
to another place in the program.

50
00:02:37,261 --> 00:02:39,890
Or, if there is no such
try/catch bloc,

51
00:02:40,083 --> 00:02:43,586
then the program will exit entirely

52
00:02:43,586 --> 00:02:46,605
by ending with what we call
an exception.

53
00:02:47,312 --> 00:02:51,038
So <i>throw</i> throws an instance
of the Exception class.

54
00:02:51,380 --> 00:02:54,811
This Exception class is itself a subclass
of the Throwable class

55
00:02:55,056 --> 00:02:57,115
that inherits from Object.

56
00:02:59,148 --> 00:03:01,795
Exception is not the only
subclass of Throwable

57
00:03:01,946 --> 00:03:04,857
that has multiple subclasses

58
00:03:04,857 --> 00:03:09,638
whose goal is to indicate different types
of possible errors or exceptions.

59
00:03:09,638 --> 00:03:12,322
For example, there is the Error
subclass

60
00:03:12,322 --> 00:03:17,399
which has 12 direct subclasses

61
00:03:17,399 --> 00:03:21,049
and which serves for example
to indicate memory errors.

62
00:03:21,049 --> 00:03:24,503
The error class serves to indicate
fatal errors

63
00:03:24,503 --> 00:03:29,799
which are not supposed to be used,
to be handled by the programmer

64
00:03:29,799 --> 00:03:32,318
with a try/catch bloc.

65
00:03:33,148 --> 00:03:37,260
On the other hand, we have Exceptions,
which must or can be

66
00:03:37,260 --> 00:03:39,451
handled by the programmer.

67
00:03:39,451 --> 00:03:43,649
The Exception class has
75 direct subclasses

68
00:03:44,556 --> 00:03:49,293
among which there are
74 Checked Exceptions

69
00:03:50,869 --> 00:03:54,596
which must be treated by the programmer.

70
00:03:54,996 --> 00:03:57,515
They indicate exceptional circumstances,

71
00:03:57,515 --> 00:04:00,296
often, but not always, errors

72
00:04:00,296 --> 00:04:05,555
They must thus be handled at the level
of the program with a try/catch bloc.

73
00:04:05,555 --> 00:04:09,023
There is also the RunTimeException
subclass,

74
00:04:09,023 --> 00:04:12,825
whose treatment is not necessarily
handled by the programmer.

75
00:04:12,825 --> 00:04:15,063
We call these Unchecked Exceptions,

76
00:04:15,063 --> 00:04:19,284
and they have 49 direct subclasses

77
00:04:19,284 --> 00:04:23,423
to treat different error cases that can
be avoided with good programming,

78
00:04:23,423 --> 00:04:27,113
such as, for example, indices that
exceed an array's length,

79
00:04:27,113 --> 00:04:31,037
or divisions by 0, etc.

80
00:04:31,037 --> 00:04:34,605
This sort of error can be handled
by the programmer,

81
00:04:34,605 --> 00:04:36,754
but it is not strictly necessary.

82
00:04:37,424 --> 00:04:41,633
Actually, the next episode will go
over these Checked/Unchecked Exceptions

83
00:04:41,633 --> 00:04:42,544
and how to handle them.

84
00:04:43,337 --> 00:04:46,233
At the more general level,
right at the top of the hierarchy,

85
00:04:46,233 --> 00:04:48,896
the Throwable class offers
two constructors,

86
00:04:48,896 --> 00:04:53,854
one default constructor and one
constructor that allows to indicate

87
00:04:53,854 --> 00:04:56,241
an error message in the form
of a string.

88
00:04:56,241 --> 00:04:59,046
It offers, among others, two
interesting methods,

89
00:04:59,046 --> 00:05:03,513
a <i>getMessage</i> method that allows
us to retrieve the error message

90
00:05:03,513 --> 00:05:06,147
initialized using this constructor, 

91
00:05:06,147 --> 00:05:11,587
and a <i>printStackTrace</i> method
which allows us to display the stack

92
00:05:11,587 --> 00:05:17,792
in the terminal, that is, the sequence of
events which led to the error.

93
00:05:17,803 --> 00:05:19,669
That's it for the <i>throw</i> statement.

94
00:05:19,669 --> 00:05:21,586
Now, let's move on to the <i>try</i> statement.

95
00:05:21,588 --> 00:05:24,546
We have seen that if the <i>throw</i> 
statement is not caught,

96
00:05:24,546 --> 00:05:28,616
that is, not handled by a try/catch bloc,
the program is ended.

97
00:05:28,616 --> 00:05:30,711
So in many cases, we will want

98
00:05:30,711 --> 00:05:33,042
-- especially for Checked Exceptions --

99
00:05:33,042 --> 00:05:38,257
we will want to handle them with
an exception-handling bloc.

100
00:05:38,257 --> 00:05:40,949
This is exactly what try is used for.

101
00:05:40,959 --> 00:05:43,631
try makes portions of code

102
00:05:43,631 --> 00:05:46,953
compatible with exception handling.

103
00:05:47,972 --> 00:05:52,882
Suppose that I call a method <i>f</i>
which can throw exceptions.

104
00:05:53,270 --> 00:05:56,351
Either it can throw exceptions directly

105
00:05:56,477 --> 00:05:59,965
or it can call methods that call methods

106
00:05:59,965 --> 00:06:02,935
that call methods that throw exceptions.

107
00:06:02,935 --> 00:06:05,168
No matter the depth of the call,

108
00:06:05,168 --> 00:06:08,316
in this call to the method <i>f</i>,
we have a throw.

109
00:06:08,316 --> 00:06:12,038
Somewhere below this call, we will
have a throw.

110
00:06:12,038 --> 00:06:14,451
Then, if such an expression

111
00:06:14,451 --> 00:06:17,676
if such a call to a method that
can throw exceptions

112
00:06:17,676 --> 00:06:21,686
is in a bloc that is declared as
a try bloc,

113
00:06:21,686 --> 00:06:25,469
then we will be able to setup

114
00:06:25,469 --> 00:06:27,807
an exception-handling mechanism

115
00:06:27,807 --> 00:06:31,735
and so the throw which exists
somewhere here, below,

116
00:06:31,735 --> 00:06:37,125
will finally jump to the next catch
bloc associated to the try bloc

117
00:06:37,125 --> 00:06:40,866
in which we are requesting
exception handling.

118
00:06:41,672 --> 00:06:45,610
catch is thus simply the keyword
that is used to introduce

119
00:06:45,610 --> 00:06:48,035
the set of instructions we wish to execute

120
00:06:48,035 --> 00:06:50,849
in order to handle the exceptions.

121
00:06:50,849 --> 00:06:55,340
Every try bloc must have at
least one catch bloc associated to it.

122
00:06:55,340 --> 00:06:57,733
We will see in a moment that
it can have several.

123
00:06:57,733 --> 00:07:02,324
These must handle the exceptions
thrown in the try bloc.

124
00:07:02,324 --> 00:07:04,891
If an exception is thrown by
a throw statement,

125
00:07:04,891 --> 00:07:07,335
but is not intercepted by a catch,

126
00:07:07,335 --> 00:07:11,939
if there is no try and no catch 
corresponding to the exception

127
00:07:11,939 --> 00:07:13,812
that is thrown, then

128
00:07:13,812 --> 00:07:16,994
the program will halt and indicate
that an exception

129
00:07:16,994 --> 00:07:20,334
was thrown and it will display where
it was thrown,

130
00:07:20,334 --> 00:07:24,377
indicating that this exception was
thrown but not caught.

131
00:07:24,377 --> 00:07:27,520
The syntax of a catch bloc starts
with the word <i>catch</i>

132
00:07:27,520 --> 00:07:31,692
followed, as with method headers,

133
00:07:31,692 --> 00:07:37,116
the type and the equivalent of
a parameter, in parentheses.

134
00:07:37,436 --> 00:07:42,417
We will only have one parameter
for this catch header.

135
00:07:42,417 --> 00:07:47,083
Then, behind this, we have the bloc with
the instructions that we want to execute

136
00:07:47,083 --> 00:07:51,017
for all exceptions of the type
we specify.

137
00:07:51,017 --> 00:07:53,041
It is best to look at an example.

138
00:07:53,041 --> 00:07:56,638
Here, we have a set of instructions
that we want to make aware

139
00:07:56,638 --> 00:07:59,270
of exception handling with a try,

140
00:07:59,270 --> 00:08:04,754
and right behind it, we will have a
catch statement to catch the exceptions

141
00:08:04,957 --> 00:08:06,582
of type <i>ArithmeticException</i>

142
00:08:07,093 --> 00:08:11,830
and another catch bloc that is also
associated to this <i>try</i> bloc

143
00:08:11,830 --> 00:08:16,490
to catch very general exceptions
of type <i>Exception</i>.

144
00:08:16,872 --> 00:08:20,941
So here, in this bloc, we could have
a variable <i>age</i>,

145
00:08:20,994 --> 00:08:26,355
and if the age is too high, then we will
throw a very general exception.

146
00:08:26,482 --> 00:08:32,212
And if the age is lower than 150,
we will continue execution.

147
00:08:32,258 --> 00:08:34,082
We would have another variable, <i>x</i>.

148
00:08:34,215 --> 00:08:37,892
If <i>x</i> equals 0, then we throw
an <i>ArithmeticException</i>

149
00:08:38,244 --> 00:08:39,844
Otherwise, we continue.

150
00:08:40,090 --> 00:08:44,030
This <i>ArithmeticException</i> will be
intercepted by this catch here.

151
00:08:44,030 --> 00:08:47,855
We will execute the instructions that are
here and display

152
00:08:48,129 --> 00:08:51,640
the error message that we had put
in the <i>ArithmeticException</i>,

153
00:08:51,640 --> 00:08:55,124
then, for example, print the
call stack.

154
00:08:55,584 --> 00:08:58,370
However, if it is this very general
exception that is thrown,

155
00:08:58,370 --> 00:09:01,748
it is this catch which will be executed.

156
00:09:01,748 --> 00:09:04,398
At that moment, we will display a message,
for example:

157
00:09:04,398 --> 00:09:06,388
"Who can live to be that old?"

158
00:09:06,388 --> 00:09:11,951
An important thing to note is that catch
blocs associated to a try bloc

159
00:09:11,951 --> 00:09:15,942
will be sorted by level of exception, from
least to most general.

160
00:09:16,122 --> 00:09:19,198
We will first have exceptions that
are very specific,

161
00:09:19,198 --> 00:09:22,003
then the most general exceptions.

162
00:09:22,003 --> 00:09:26,604
Remember that there is a hierarchy
in exceptions, like so.

163
00:09:27,001 --> 00:09:32,301
The processing in the catch will
have to start

164
00:09:32,301 --> 00:09:35,601
by the most specific exceptions,

165
00:09:35,601 --> 00:09:39,901
then go to more and more
general ones.

166
00:09:40,336 --> 00:09:43,241
If you place catch blocs with the most
general exceptions first,

167
00:09:43,241 --> 00:09:45,607
you will get a compiler error.

168
00:09:45,607 --> 00:09:48,959
Now, let's see in detail how all
of this is executed.

169
00:09:48,959 --> 00:09:50,411
What is the flow of execution?

170
00:09:50,411 --> 00:09:52,935
What do we do in the different
possible cases?

171
00:09:53,061 --> 00:09:55,568
If the exception is thrown; if
it is not thrown.

172
00:09:56,530 --> 00:09:58,381
First, the general principles are
as follows.

173
00:09:58,546 --> 00:10:02,502
A catch bloc is executed only if
an exception corresponding

174
00:10:02,502 --> 00:10:06,408
to the type specified in the catch
is thrown

175
00:10:06,408 --> 00:10:08,309
from the corresponding try bloc.

176
00:10:08,309 --> 00:10:11,230
Otherwise, the catch bloc
is simply ignored.

177
00:10:11,230 --> 00:10:13,961
We will not execute what
is in this catch bloc.

178
00:10:13,961 --> 00:10:17,155
In the absence of a finally,
of which we will speak in a moment.

179
00:10:17,155 --> 00:10:22,548
If the catch bloc is executed, then
the execution of the program

180
00:10:22,548 --> 00:10:25,685
continues after the catch bloc.

181
00:10:25,685 --> 00:10:28,519
In no case do we come back to
the try.

182
00:10:28,519 --> 00:10:32,144
We will continue after the catch bloc.

183
00:10:34,224 --> 00:10:37,791
For example, if we have a try bloc
that is made aware

184
00:10:37,791 --> 00:10:39,815
of exception handling,

185
00:10:39,896 --> 00:10:42,041
in which is executed -- either
directly

186
00:10:42,041 --> 00:10:44,265
or through a method call --

187
00:10:44,265 --> 00:10:47,872
in which an exception is thrown.

188
00:10:48,566 --> 00:10:53,676
If this exception is thrown,
if this line is actually executed,

189
00:10:53,676 --> 00:10:58,923
then at the end of this line,
we will jump straight here

190
00:10:58,923 --> 00:11:04,711
to the first line of the catch bloc
directly following the try bloc

191
00:11:05,001 --> 00:11:08,086
and corresponding to the type of
the exception.

192
00:11:08,382 --> 00:11:10,451
Here, where the type corresponds.

193
00:11:10,694 --> 00:11:12,154
So the exception will be as follows:

194
00:11:12,154 --> 00:11:15,654
We arrive here.
We execute this exception throwing

195
00:11:15,997 --> 00:11:21,117
We jump to this place here
if an exception was thrown

196
00:11:22,343 --> 00:11:26,019
If however no exception was thrown

197
00:11:26,369 --> 00:11:28,853
that is, if this line here was
not executed,

198
00:11:28,988 --> 00:11:30,691
for example, because it was
protected by an <i>if</i>

199
00:11:30,691 --> 00:11:32,451
whose condition was not true

200
00:11:32,451 --> 00:11:34,373
then, we execute the code

201
00:11:34,373 --> 00:11:37,190
This line is not executed.

202
00:11:37,190 --> 00:11:41,169
So we continue, of course,
by executing the whole bloc.

203
00:11:41,169 --> 00:11:43,502
Let's suppose that there is
no throw farther on.

204
00:11:43,502 --> 00:11:46,923
Once we arrive at the end of the
bloc, here, we will continue

205
00:11:46,923 --> 00:11:49,236
with the normal execution
of the program.

206
00:11:49,236 --> 00:11:52,776
We will simply ignore the
whole catch bloc

207
00:11:52,776 --> 00:11:56,266
that is executed only if
an exception of the corresponding

208
00:11:56,266 --> 00:11:57,966
type was thrown.

209
00:11:59,194 --> 00:12:01,845
On the example we had earlier,

210
00:12:01,845 --> 00:12:03,839
the flow of execution would be this:

211
00:12:04,134 --> 00:12:07,077
Suppose that in the beginning,
we have an <i>age</i> variable,

212
00:12:07,077 --> 00:12:12,100
and that the age, to start off with,
is not bigger than or equal to 150.

213
00:12:12,208 --> 00:12:14,160
The age is lower than 150.

214
00:12:14,160 --> 00:12:15,831
Thus, we continue.

215
00:12:15,831 --> 00:12:18,847
We do not go into the if bloc,
we do not see the throw, we continue.

216
00:12:18,847 --> 00:12:22,523
Suppose that we have a variable <i>x</i> here,
which is not equal to 0.

217
00:12:22,523 --> 00:12:25,482
At this point, we continue normally.
We arrive here.

218
00:12:25,995 --> 00:12:28,002
So if no exception was thrown,

219
00:12:28,002 --> 00:12:30,513
"case n°1 : no exception thrown"

220
00:12:30,513 --> 00:12:33,636
then we will continue the execution
down here.

221
00:12:33,636 --> 00:12:37,831
This is what happens if the age
is under 150

222
00:12:37,831 --> 00:12:40,006
and if x is not equal to 0.

223
00:12:40,006 --> 00:12:43,192
Now, let's see what happens if, for
example, the age

224
00:12:43,192 --> 00:12:47,800
is still below 150 but <i>x</i> is 0.

225
00:12:50,800 --> 00:12:54,129
What will happen is that, since the
age is under 150,

226
00:12:54,129 --> 00:12:56,389
we do not enter the <i>if</i>, we continue

227
00:12:56,389 --> 00:12:59,788
Here, since x is worth 0, this
condition is verified.

228
00:12:59,950 --> 00:13:03,762
We execute this throw, which
means that, from here,

229
00:13:03,762 --> 00:13:08,280
we will plug into the exception
that was thrown

230
00:13:08,280 --> 00:13:10,733
We threw an ArithmeticException,

231
00:13:10,733 --> 00:13:16,332
so we will jump to the bloc that catches
ArithmeticException.

232
00:13:16,332 --> 00:13:21,458
Here, we will continue the execution

233
00:13:21,458 --> 00:13:26,372
by displaying the associated message
and by displaying the call trace

234
00:13:26,915 --> 00:13:29,461
Once we have done all of this, then

235
00:13:29,461 --> 00:13:34,397
we will continue with the normal execution
after all the catch blocs

236
00:13:34,397 --> 00:13:36,985
associated to the relevant try blocs.

237
00:13:37,716 --> 00:13:42,687
Third and last case, if the age
is bigger than or equal to 150.

238
00:13:42,748 --> 00:13:47,406
What will happen is that we will arrive
in this if, whose condition is true

239
00:13:47,406 --> 00:13:51,397
so we will execute this
exception throwing.

240
00:13:51,397 --> 00:13:55,437
So here, we throw an object
of type Exception.

241
00:13:55,437 --> 00:14:00,192
Which means that from here, we will
jump to the catch

242
00:14:00,192 --> 00:14:02,542
that handles Exceptions.

243
00:14:02,542 --> 00:14:08,628
This flow will continue here
by executing the display of

244
00:14:08,628 --> 00:14:10,521
"Who can live to be that old?"

245
00:14:10,521 --> 00:14:14,267
Then, as always, the execution
will continue normally

246
00:14:14,267 --> 00:14:18,481
with the remainder of the program.

247
00:14:19,429 --> 00:14:21,306
Let's go over a third
example

248
00:14:21,306 --> 00:14:25,071
where we will put throw, try and catch
in one same method.

249
00:14:25,071 --> 00:14:27,992
This is a special case that
can nevertheless be useful.

250
00:14:28,622 --> 00:14:31,296
So here, we have a <i>lireEntier</i>
(TN: means "readInteger") method

251
00:14:31,296 --> 00:14:34,737
whose goal is to read an integer
and return it

252
00:14:34,737 --> 00:14:37,829
and that takes as parameter
a maximum number of attempts,

253
00:14:37,829 --> 00:14:43,637
and whose header must be extended
with this syntax, <i>throws Exception</i>

254
00:14:43,637 --> 00:14:46,130
which we will explain later on.

255
00:14:46,130 --> 00:14:48,920
So here, we have the whole
body of this method

256
00:14:48,920 --> 00:14:53,154
in which, as you can see,
we have a try bloc,

257
00:14:53,154 --> 00:14:57,784
to try to read an integer from
the keyboard.

258
00:14:57,784 --> 00:15:00,325
We want to read an integer.

259
00:15:00,325 --> 00:15:05,451
What we will do is intercept any throw
that could occur

260
00:15:05,451 --> 00:15:09,002
when we try to read this integer,
in case the input fails.

261
00:15:09,002 --> 00:15:12,229
This happens, for example, if the user
inputs something else,

262
00:15:12,229 --> 00:15:14,632
for example a character string.

263
00:15:14,632 --> 00:15:19,260
In this case, the input will throw an
exception of type InputMismatchException

264
00:15:19,260 --> 00:15:24,314
which is defined in the 
java.util library.

265
00:15:24,314 --> 00:15:29,762
If the input fails, then an exception of that
type will be thrown,

266
00:15:29,762 --> 00:15:34,703
so we will jump to the catch, since we
had put that in a try bloc.

267
00:15:34,703 --> 00:15:37,363
This will allow us, for example, to
display a message

268
00:15:37,695 --> 00:15:39,120
"Try again to input an integer."

269
00:15:39,120 --> 00:15:42,701
Then, with this expression, we clear
the input buffer

270
00:15:42,701 --> 00:15:44,980
of the characters left by the
previous, bad input.

271
00:15:44,980 --> 00:15:47,964
Finally, we increment the
number of tries.

272
00:15:47,964 --> 00:15:50,345
The program will thus
execute in the following way.

273
00:15:50,345 --> 00:15:52,953
In the beginning, <i>nbEssais</i> has
a value of 1 (TN: "nbEssais" means "number of attempts")

274
00:15:52,973 --> 00:15:56,910
We will be in a loop while
the number of attempts

275
00:15:56,910 --> 00:16:00,976
is lesser than or equal to the maximum
number of attempts we received as a parameter.

276
00:16:00,976 --> 00:16:02,680
We ask for an integer.

277
00:16:02,680 --> 00:16:06,052
We try to read an integer and each
time this input fails

278
00:16:06,052 --> 00:16:10,499
we will jump to the catch bloc which
handles the corresponding exception

279
00:16:10,499 --> 00:16:14,374
So we arrive here at the end of the catch
bloc if we had an input error.

280
00:16:14,374 --> 00:16:16,753
We continue the execution.

281
00:16:16,753 --> 00:16:22,737
We continue as long as nbEssais has not
reached the maximum number of attempts.

282
00:16:22,737 --> 00:16:26,437
In case the input works, no
exception is thrown.

283
00:16:26,437 --> 00:16:29,321
So the execution continues normally.

284
00:16:29,321 --> 00:16:35,143
We return the value that was read
and we exit the program at that level.

285
00:16:36,395 --> 00:16:40,168
Finally, if we make so many mistakes
that we exceed the maximum number of attempts,

286
00:16:40,190 --> 00:16:42,535
the following will happen:

287
00:16:42,535 --> 00:16:46,301
we will have another error which
will throw the exception

288
00:16:46,301 --> 00:16:48,982
which will be caught by this catch here.

289
00:16:48,982 --> 00:16:50,930
We will increment the number of attempts.

290
00:16:50,930 --> 00:16:53,683
At the end of the catch, we continue
with the normal execution.

291
00:16:53,875 --> 00:16:56,673
But this time, nbEssais will
be larger than

292
00:16:56,673 --> 00:16:58,779
maxEssais.

293
00:16:58,779 --> 00:17:02,557
So we will exit the <i>while</i> loop and
continue execution

294
00:17:02,557 --> 00:17:05,675
by throwing a new exception this time,

295
00:17:05,675 --> 00:17:10,288
and this exception will be passed
on higher to other methods

296
00:17:10,288 --> 00:17:14,615
that will have called lireEntier
and that could possibly 

297
00:17:14,615 --> 00:17:16,891
catch this exception and handle it.

298
00:17:18,091 --> 00:17:19,928
Let's end with a few remarks.

299
00:17:20,174 --> 00:17:23,333
First, since Java 7 there exists something
that is called multi-catch.

300
00:17:23,333 --> 00:17:28,055
We can write:
catch Exception1 or Exception2, etc.

301
00:17:28,055 --> 00:17:30,475
Then, something that I already
told you,

302
00:17:30,475 --> 00:17:32,101
when you have several catch blocs,

303
00:17:32,101 --> 00:17:35,084
you must absolutely always
write them from the most specific

304
00:17:35,084 --> 00:17:38,243
exception, from the lowest one in the
exception hierarchy,

305
00:17:38,243 --> 00:17:39,589
to the most general one,

306
00:17:39,589 --> 00:17:40,974
that is, the highest one

307
00:17:40,974 --> 00:17:43,520
in the inheritance relationship
of exceptions.

308
00:17:44,540 --> 00:17:46,819
Finally, let's end this episode
on Java syntax

309
00:17:46,819 --> 00:17:50,748
for exception handling by this
point number 4,

310
00:17:50,748 --> 00:17:54,571
where we might want to cleanup
after a catch bloc

311
00:17:54,571 --> 00:17:58,968
with the <i>finally</i> keyword which
indicates, optionally, what to do

312
00:17:58,968 --> 00:18:01,832
after an error-handling bloc.

313
00:18:02,502 --> 00:18:05,946
This finally keyword thus controls
a bloc which is optional

314
00:18:05,946 --> 00:18:09,136
and which follows the catch
blocs associated to a try

315
00:18:09,136 --> 00:18:12,820
and which contains code that
should be executed

316
00:18:12,820 --> 00:18:15,523
whether an exception was thrown or not.

317
00:18:15,523 --> 00:18:18,377
The point of this bloc is to clean up,

318
00:18:18,377 --> 00:18:22,019
for example to close files,
close connections etc.

319
00:18:22,123 --> 00:18:26,352
In case an exception is thrown, it
guarantees that everything is cleaned up.

320
00:18:26,352 --> 00:18:29,877
As an example, we have a little
program here

321
00:18:29,877 --> 00:18:33,160
that we can call in different ways.

322
00:18:33,160 --> 00:18:36,857
This is the first time we use
arguments passed manually.

323
00:18:36,857 --> 00:18:40,156
This allows us, for example,

324
00:18:40,156 --> 00:18:43,035
to pass different arguments

325
00:18:43,035 --> 00:18:46,126
or even no arguments at all,

326
00:18:46,126 --> 00:18:47,960
at the moment we execute this
Inverse program.

327
00:18:48,212 --> 00:18:52,064
The way this is done is simply to
pass a string array

328
00:18:52,064 --> 00:18:55,364
which contains the arguments
when we call this program

329
00:18:55,364 --> 00:18:57,164
which we will name Inverse.

330
00:18:57,164 --> 00:19:02,831
Here, we have a try bloc that
will try to read the different arguments

331
00:19:02,831 --> 00:19:05,205
Args here is an array of strings.

332
00:19:05,205 --> 00:19:08,482
args[0] is the first element of this array
of strings

333
00:19:08,482 --> 00:19:12,641
Thus it is the first argument passed
to the program when we execute it,

334
00:19:12,641 --> 00:19:14,554
as I explained earlier.

335
00:19:14,554 --> 00:19:18,868
We will try to read an integer
in this first argument.

336
00:19:19,062 --> 00:19:21,037
Then, we will divide by b.

337
00:19:21,037 --> 00:19:25,491
Then, we display 100 times the inverse
of this number <i>c</i>

338
00:19:25,491 --> 00:19:27,464
that we have just calculated.

339
00:19:27,464 --> 00:19:30,674
If the first argument that we receive
is not an integer,

340
00:19:30,674 --> 00:19:36,756
this expression will throw an exception
of type NumberFormatException

341
00:19:36,756 --> 00:19:41,283
and so this will cause us to
jump to the catch bloc

342
00:19:41,283 --> 00:19:43,159
corresponding to this type of exception.

343
00:19:43,159 --> 00:19:45,928
We will indicate, for example,
"An integer is required!".

344
00:19:46,268 --> 00:19:51,180
If however we manage to read an
integer from this first argument

345
00:19:51,409 --> 00:19:56,007
then we pass here, we do this calculation
where we risk a division by 0.

346
00:19:56,007 --> 00:19:58,848
If b equals 0, this division
will indeed

347
00:19:58,857 --> 00:20:01,342
throw an ArithmeticException.

348
00:20:01,342 --> 00:20:03,827
and we will jump to this
bloc that reacts

349
00:20:03,827 --> 00:20:06,312
to exceptions of type
ArithmeticException

350
00:20:06,312 --> 00:20:10,321
If we divide by 0, we will display that
the result goes to infinity.

351
00:20:10,581 --> 00:20:14,130
Then, whatever happens, whether
we have an exception here,

352
00:20:14,130 --> 00:20:15,719
or an exception there,

353
00:20:15,719 --> 00:20:20,231
or nothing at all in this exception-aware bloc,

354
00:20:20,231 --> 00:20:22,980
we will execute this mandatory segment.

355
00:20:22,980 --> 00:20:27,675
We will execute the finally bloc
linked to this try bloc.

356
00:20:27,776 --> 00:20:29,605
Let's look at all this in detail

357
00:20:29,605 --> 00:20:31,734
on different ways of calling
this program.

358
00:20:32,054 --> 00:20:35,484
If for example we call our program
with 4.1 as an argument,

359
00:20:35,484 --> 00:20:38,195
which is of type double, then

360
00:20:38,195 --> 00:20:41,406
here, we will not succeed in reading
an integer.

361
00:20:41,406 --> 00:20:44,367
We jump here, we display "Il faut un nombre entier!"
(TN: means "An integer is required!")

362
00:20:44,603 --> 00:20:48,495
Since we arrive at the end of the catch
bloc, we go on to the finally bloc.

363
00:20:48,767 --> 00:20:52,830
Here, we write "passage obligé" (TN: means
"mandatory passage") and we end the program.

364
00:20:53,429 --> 00:20:57,085
On the other hand, if we passed
an integer but that it is worth 0,

365
00:20:57,085 --> 00:21:01,457
then we do manage to read an
integer, so we continue;

366
00:21:01,457 --> 00:21:06,031
here, we divide by 0, which results
in an ArithmeticException

367
00:21:06,031 --> 00:21:09,055
that is thrown and intercepted
by this catch bloc.

368
00:21:09,055 --> 00:21:11,761
So we display that the result
goes to infinity.

369
00:21:11,761 --> 00:21:14,542
Then we continue, as always,
with the finally bloc

370
00:21:14,542 --> 00:21:18,417
which indicates that we have a
mandatory passage

371
00:21:19,267 --> 00:21:22,493
Third case: we call our program and
pass it an argument

372
00:21:22,493 --> 00:21:24,946
which is a non-null integer.

373
00:21:24,946 --> 00:21:27,435
At that point, we do succeed
in reading an integer.

374
00:21:27,435 --> 00:21:30,380
We continue. We complete
the division with no problem.

375
00:21:30,380 --> 00:21:35,968
So we can display that 100 times
its inverse is 25.

376
00:21:36,498 --> 00:21:40,154
In this case, we also finish by
passing by the finally

377
00:21:40,325 --> 00:21:43,022
which is executed in any case
since we are in a try bloc.

378
00:21:43,269 --> 00:21:46,110
Here, at the end of the execution
of this try bloc,

379
00:21:46,110 --> 00:21:49,372
we will continue by executing
the finally bloc

380
00:21:49,372 --> 00:21:54,518
and displaying that we have
a mandatory passage.

381
00:21:54,988 --> 00:21:56,711
To finish, here is a last example.

382
00:21:56,711 --> 00:22:01,607
We pass no argument, and so the
following happens:

383
00:22:01,607 --> 00:22:06,817
we will want to read an integer in
the first element of the array A

384
00:22:06,817 --> 00:22:08,703
But it so happens that there
were no arguments passed,

385
00:22:08,703 --> 00:22:10,793
so this array is empty

386
00:22:10,793 --> 00:22:13,545
There isn't even an element
at index 0.

387
00:22:13,545 --> 00:22:16,229
We have an out-of-bounds index

388
00:22:16,229 --> 00:22:18,323
and so an exception
will be thrown,

389
00:22:18,323 --> 00:22:21,597
which is the ArrayIndexOutOfBounds
exception.

390
00:22:21,597 --> 00:22:24,022
So this exception will be thrown,

391
00:22:24,022 --> 00:22:26,047
but as you can see,

392
00:22:26,047 --> 00:22:30,222
before that, we will have passed
by the finally.

393
00:22:30,222 --> 00:22:34,910
Indeed, here we are in the try bloc

394
00:22:34,910 --> 00:22:37,701
and as we will exit it here
by throwing an exception;

395
00:22:37,713 --> 00:22:40,565
this exception is not caught
by any of the catch statements

396
00:22:40,565 --> 00:22:43,752
However, we pass by the finally bloc.

397
00:22:43,752 --> 00:22:47,725
We always pass by the finally bloc
associated to a try bloc.

398
00:22:47,725 --> 00:22:51,605
So we display this, before continuing
with this exception

399
00:22:51,605 --> 00:22:56,180
which is not caught and hence
ends the program's execution

400
00:22:56,180 --> 00:23:00,466
with a message meaning that
the exception was not caught

401
00:23:00,466 --> 00:23:02,578
followed by the call trace

402
00:23:02,578 --> 00:23:05,568
at the place where this
exception was thrown.

403
00:23:06,085 --> 00:23:09,374
So you can see that regardless
of the execution sequence

404
00:23:09,374 --> 00:23:14,988
of the try bloc, we always
pass by the finally bloc.

405
00:23:14,988 --> 00:23:19,173
In this case here, such a finally
is not very useful.

406
00:23:19,173 --> 00:23:22,361
But if we had allocated ressources, 

407
00:23:22,361 --> 00:23:24,253
or opened files in this try bloc,

408
00:23:24,253 --> 00:23:27,271
we could guarantee, by
closing these resources,

409
00:23:27,271 --> 00:23:29,831
by freeing these resources
in the finally bloc,

410
00:23:29,831 --> 00:23:34,718
we would guarantee that regardless
of the execution sequence of this try bloc,

411
00:23:34,718 --> 00:23:38,537
the finally bloc will correctly
free the resources.

412
00:23:38,537 --> 00:23:41,016
This is typically what a finally
bloc is used for.

413
00:23:41,544 --> 00:23:47,274
This concludes the episode on exception
syntax in Java.
