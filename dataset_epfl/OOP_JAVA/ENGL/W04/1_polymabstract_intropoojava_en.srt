1
00:00:04,411 --> 00:00:06,552
In this episode, we will see

2
00:00:06,552 --> 00:00:07,927
how polymorphism

3
00:00:07,927 --> 00:00:10,872
complements abstraction very well and
how it allows us

4
00:00:10,872 --> 00:00:14,607
to better define classes on
an abstract level.

5
00:00:14,607 --> 00:00:18,096
But first, let's go over a few reminders
on polymorphism.

6
00:00:18,096 --> 00:00:21,549
"Subtype polymorphism", to be precise,
[TN: sometimes a.k.a. "inclusion polymorphism" or "dynamic polymorphism"]

7
00:00:21,549 --> 00:00:24,425
refers to the fact that instances of
a subclass,

8
00:00:24,425 --> 00:00:26,715
which can substitute for instances
of the superclass,

9
00:00:26,715 --> 00:00:29,051
keep their own properties

10
00:00:29,051 --> 00:00:32,441
instead of being considered as
having the properties of the superclass

11
00:00:32,441 --> 00:00:34,467
especially with regards to their behavior,

12
00:00:34,467 --> 00:00:36,477
that is, the methods to be invoked

13
00:00:36,477 --> 00:00:39,914
will be determined at runtime

14
00:00:39,914 --> 00:00:43,602
depending on the actual nature
of the instances involved.

15
00:00:43,602 --> 00:00:45,756
The definition may seem complicated

16
00:00:45,756 --> 00:00:47,818
but the principle is actually
quite simple.

17
00:00:47,818 --> 00:00:51,162
For example, if I have a general class
called "Personnage" (TN: means "Character")

18
00:00:51,162 --> 00:00:54,045
with a subclass "Voleur" (TN:
means "Thief"): a thief is indeed a character.

19
00:00:54,045 --> 00:00:56,798
We also have "Magicien", "Guerrier",
(TN: "Magician", "Warrior"), etc.

20
00:00:56,798 --> 00:01:00,501
Magicians, warriors and thieves,

21
00:01:00,501 --> 00:01:02,843
even if they are all characters,

22
00:01:02,843 --> 00:01:05,653
will be able to behave as
different instances,

23
00:01:05,653 --> 00:01:08,889
for example when they meet.

24
00:01:08,889 --> 00:01:11,168
For example, if a thief meets
another character

25
00:01:11,168 --> 00:01:12,684
he might steal from him;

26
00:01:12,684 --> 00:01:14,404
if a warrior meets another
character,

27
00:01:14,404 --> 00:01:16,502
he might hit him, etc.

28
00:01:16,502 --> 00:01:18,139
So for example

29
00:01:18,139 --> 00:01:21,220
if I have a character "p1" who
meets a character "p2",

30
00:01:21,220 --> 00:01:23,047
the "rencontrer" method here
(TN: "rencontrer" means "meet")

31
00:01:23,047 --> 00:01:25,926
will adapt to the real nature of
the instance "p1"

32
00:01:25,926 --> 00:01:28,766
and will thus meet "p2" as a thief

33
00:01:28,766 --> 00:01:31,949
if "p1" is a "Thief", as a magician if "p1" is
a "Magician",

34
00:01:31,949 --> 00:01:34,926
or as a warrior if "p1" is a "Warrior".

35
00:01:34,926 --> 00:01:37,396
And remember that to have
polymorphism

36
00:01:37,396 --> 00:01:41,135
you need inheritance to have
this general class

37
00:01:41,135 --> 00:01:44,504
with regards to which the
methods will adapt

38
00:01:44,504 --> 00:01:47,147
depending on the specific subclasses.
Inheritance thus,

39
00:01:47,147 --> 00:01:50,380
but also dynamic binding.

40
00:01:50,380 --> 00:01:53,149
Remember, too, that
dynamic binding

41
00:01:53,149 --> 00:01:55,497
consists in calling the right method

42
00:01:55,497 --> 00:01:58,494
depending on the instance.
So to go back to an example

43
00:01:58,494 --> 00:02:01,523
from a previous episode,

44
00:02:01,523 --> 00:02:03,986
imagine that we organize a meet-up 

45
00:02:03,986 --> 00:02:06,998
between a warrior and a thief.

46
00:02:06,998 --> 00:02:10,556
This method here organizes
a meeting

47
00:02:10,556 --> 00:02:14,109
between two characters taken as arguments

48
00:02:14,109 --> 00:02:16,042
and displays a message

49
00:02:16,042 --> 00:02:18,477
and calls the "rencontrer" method

50
00:02:18,477 --> 00:02:22,185
of character 'a', which is the first
argument received here,

51
00:02:22,185 --> 00:02:25,693
with character 'b', received as the
second argument here.

52
00:02:25,693 --> 00:02:28,468
And dynamic binding will
ensure that when

53
00:02:28,468 --> 00:02:32,735
we meet a warrior 'g' as the
parameter 'a',

54
00:02:32,735 --> 00:02:36,459
it is the "rencontrer" method of
the warrior ("Guerrier")

55
00:02:36,459 --> 00:02:40,292
which will, dynamically, during the
execution of this piece of code,

56
00:02:40,292 --> 00:02:42,695
check that 'a' is a warrior

57
00:02:42,695 --> 00:02:45,016
to call the "rencontrer" method
of the "Guerrier" class

58
00:02:45,016 --> 00:02:48,885
and not the "rencontrer" method
of the "Personnage" class, despite the fact

59
00:02:48,885 --> 00:02:51,556
that 'a' is described as a "Personnage"
here,

60
00:02:51,556 --> 00:02:54,791
If we called the "rencontrer" method
of the "Personnage" class

61
00:02:54,791 --> 00:02:56,817
which would be a static binding

62
00:02:56,817 --> 00:02:59,042
depending only on what is
written statically,

63
00:02:59,042 --> 00:03:02,519
whereas what happens in Java is
dynamic binding

64
00:03:02,519 --> 00:03:04,202
where we will call the "rencontrer" method

65
00:03:04,202 --> 00:03:06,177
of the instance which is passed.

66
00:03:06,177 --> 00:03:08,474
We look at what the instance is:
it is a "Guerrier" (warrior),

67
00:03:08,474 --> 00:03:11,745
so here we will call the "rencontrer"
method of the "Guerrier" class.

68
00:03:12,385 --> 00:03:14,291
That's it for reminders.

69
00:03:14,291 --> 00:03:16,266
Let's now see how these ingredients,

70
00:03:16,266 --> 00:03:19,183
how polymorphism, will allow
us to better specify

71
00:03:19,183 --> 00:03:21,248
our programs at a more abstract level

72
00:03:21,248 --> 00:03:24,132
by introducing this notion
of abstract classes

73
00:03:24,132 --> 00:03:26,131
and abstract methods.

74
00:03:26,131 --> 00:03:27,993
Let's start by presenting the problem
that these abstract

75
00:03:27,993 --> 00:03:30,078
methods address.

76
00:03:30,078 --> 00:03:32,437
At the highest level of a hierarchy,

77
00:03:32,437 --> 00:03:35,258
we don't necessarily know
how to define a method

78
00:03:35,258 --> 00:03:39,339
which we know will exist for all the subclasses

79
00:03:39,339 --> 00:03:43,322
For example, if we imagine
a very general class

80
00:03:43,322 --> 00:03:47,260
representing nondescript, closed
geometric shapes,

81
00:03:47,260 --> 00:03:49,732
Then, in this class

82
00:03:49,732 --> 00:03:52,313
it will be quite difficult to define

83
00:03:52,313 --> 00:03:54,314
how to calculate its surface area.

84
00:03:54,314 --> 00:03:56,756
Calculating the surface area of a 
nondescript geometric figure

85
00:03:56,756 --> 00:03:59,745
is certainly something that is
hard to define,

86
00:03:59,745 --> 00:04:01,402
we wouldn't really know how to do it.

87
00:04:01,402 --> 00:04:03,557
However, we know that
for all closed figures,

88
00:04:03,557 --> 00:04:06,419
for example circles, which
are closed figures,

89
00:04:06,419 --> 00:04:09,700
we know that for each specific
closed figure

90
00:04:09,700 --> 00:04:13,550
we should be able to defined a "surface" method.

91
00:04:13,550 --> 00:04:16,044
So, we imagine that in all of these
closed geometric figures,

92
00:04:16,044 --> 00:04:17,911
we will have a "surface" method,

93
00:04:17,911 --> 00:04:21,026
even if we don't know how to define
it at the most abstract level.

94
00:04:21,026 --> 00:04:24,042
And yet, to push the problem a little
further yet,

95
00:04:24,042 --> 00:04:26,932
we can even imagine that this
"surface" method would

96
00:04:26,932 --> 00:04:29,700
be used at the highest level,

97
00:04:29,700 --> 00:04:33,783
for example to calculate the
volume occupied

98
00:04:33,783 --> 00:04:37,937
by a surface over a given height.

99
00:04:37,937 --> 00:04:40,647
This volume

100
00:04:40,647 --> 00:04:43,857
would depend on the height
and on the geometric figure

101
00:04:43,857 --> 00:04:47,528
and would be defined as the product
of the height

102
00:04:47,528 --> 00:04:51,673
multiplied by the surface of
the close figure.

103
00:04:51,673 --> 00:04:54,169
So we could even call this
method

104
00:04:54,169 --> 00:04:57,105
without knowing how we would
define it

105
00:04:57,105 --> 00:04:59,280
at the highest level.
It would be defined

106
00:04:59,280 --> 00:05:02,208
for all the actual cases of closed
figures.

107
00:05:02,208 --> 00:05:04,429
The correct way of doing this,

108
00:05:04,429 --> 00:05:07,117
of coding a method which
we know must exist

109
00:05:07,117 --> 00:05:10,117
but which we do not necessarily
know how to define

110
00:05:10,117 --> 00:05:11,931
at the superclass level,

111
00:05:11,931 --> 00:05:14,535
is to introduce the method

112
00:05:14,535 --> 00:05:16,781
as an "abstract method".

113
00:05:16,781 --> 00:05:19,890
Let's illustrate once more this concept
of "abstract methods"

114
00:05:19,890 --> 00:05:23,088
using another example; 
so, let's go back to

115
00:05:23,088 --> 00:05:26,375
character games, where we have

116
00:05:26,375 --> 00:05:28,695
warriors, who are characters [inheritance],

117
00:05:28,695 --> 00:05:30,402
magicians, who also are characters [inheritance],

118
00:05:30,402 --> 00:05:32,135
thieves, etc.

119
00:05:32,135 --> 00:05:36,907
The class "Jeu" (TN: means "game") would
of course contain several characters,

120
00:05:36,907 --> 00:05:40,358
here we decided to put them in a dynamic
array of characters.

121
00:05:40,358 --> 00:05:42,453
And imagine that in the game, we wish

122
00:05:42,453 --> 00:05:45,481
to display the whole set of characters.

123
00:05:45,481 --> 00:05:47,640
So of course, we would write a loop

124
00:05:47,640 --> 00:05:50,159
iterating over the set of characters,

125
00:05:50,159 --> 00:05:52,623
this "persos" array here.

126
00:05:52,623 --> 00:05:55,812
And for each of these characters,

127
00:05:55,812 --> 00:05:58,218
we would display this very character.

128
00:05:58,218 --> 00:06:02,413
The problem is, how do we display
a generic character?

129
00:06:02,413 --> 00:06:04,576
We don't know how to display
a generic character.

130
00:06:04,576 --> 00:06:06,577
We certainly know how to display a warrior,

131
00:06:06,577 --> 00:06:08,821
we certainly know how to display a magician

132
00:06:08,821 --> 00:06:10,634
or a thief.

133
00:06:10,634 --> 00:06:14,572
So each of the specialized subclasses
knows how it should be displayed

134
00:06:14,572 --> 00:06:16,769
but at the general level of a
character,

135
00:06:16,769 --> 00:06:18,924
we don't necessarily know how
to display it.

136
00:06:18,924 --> 00:06:22,720
However, we know that we need to.
Here, at the very general level of the game,

137
00:06:22,720 --> 00:06:25,196
we know we will need to display
characters.

138
00:06:25,196 --> 00:06:27,135
So how do we do this?

139
00:06:27,135 --> 00:06:29,860
Of course, if we do nothing
at the level of the "Personnage" class,

140
00:06:29,860 --> 00:06:31,861
if we don't define the "afficher" method
(TN: means "display")  in "Personnage"

141
00:06:31,861 --> 00:06:35,683
then the code "afficher" in
"Jeu" will not compile

142
00:06:35,683 --> 00:06:38,966
since we are calling the "afficher" method
of a "Personnage"

143
00:06:38,966 --> 00:06:40,838
and the compiler would not know what
to do

144
00:06:40,838 --> 00:06:42,680
Thus, it would throw an error.

145
00:06:42,692 --> 00:06:46,185
So, in order to be able to write this
at the global level of the game,

146
00:06:46,185 --> 00:06:50,143
we must define an "afficher" method
in each "Personnage" class.

147
00:06:50,143 --> 00:06:52,873
Moreover, we would like to impose
to each of the subclasses,

148
00:06:52,873 --> 00:06:54,918
to warriors and magicians, to display
themselves

149
00:06:54,918 --> 00:06:57,544
with their own "afficher" method.

150
00:06:57,544 --> 00:06:58,645
We would like them to have
a specific method

151
00:06:58,645 --> 00:07:01,490
and we would like for this specific
method to be called

152
00:07:01,490 --> 00:07:04,721
when we make a general call
here at the game level.

153
00:07:04,721 --> 00:07:08,611
Basically, we want to force the
subclasses to have a specific method

154
00:07:08,611 --> 00:07:11,572
and we want this method to
be polymorphic.

155
00:07:11,572 --> 00:07:13,281
But how do we do this if we don't know,

156
00:07:13,281 --> 00:07:16,933
suppose that we don't know how to
display a generic character?

157
00:07:16,933 --> 00:07:19,035
Moreover, how do we impose

158
00:07:19,035 --> 00:07:21,741
the fact that this "afficher" method
must be redefined?

159
00:07:21,741 --> 00:07:25,033
How do we force its re-definition
in the subclasses?

160
00:07:25,033 --> 00:07:28,420
First solution for the first problem:

161
00:07:28,420 --> 00:07:31,855
how to define the display
for a generic character.

162
00:07:31,855 --> 00:07:35,332
One way would be to have some
arbitrarily-defined method,

163
00:07:35,332 --> 00:07:38,042
for example, suppose that here,
arbitrarily,

164
00:07:38,042 --> 00:07:40,290
we define that the display for
a generic character

165
00:07:40,290 --> 00:07:43,353
is no display at all.

166
00:07:43,353 --> 00:07:46,228
This solution is a really, really
bad idea

167
00:07:46,228 --> 00:07:49,177
because first, it is a bad model
of reality,

168
00:07:49,177 --> 00:07:52,595
characters should not be
displayed as nothing

169
00:07:52,595 --> 00:07:55,091
so it doesn't correspond to anything,

170
00:07:55,091 --> 00:07:57,276
the display is incorrect. And on top
of that,

171
00:07:57,276 --> 00:08:00,500
the display would be incorrect
if a subclass

172
00:08:00,500 --> 00:08:03,122
were to forget to redefine the method,

173
00:08:03,122 --> 00:08:05,203
so we would have some characters
that would not be displayed,

174
00:08:05,203 --> 00:08:08,386
phantom characters, and this would
be rather inconvenient for the game.

175
00:08:08,386 --> 00:08:11,250
What's more, this solution does not
address the second problem,

176
00:08:11,250 --> 00:08:14,364
it does not force the subclasses
to redefine

177
00:08:14,364 --> 00:08:16,965
their own "afficher" methods.

178
00:08:16,965 --> 00:08:19,399
The only good solution

179
00:08:19,402 --> 00:08:23,014
is thus to signal that the "afficher"
method must exist

180
00:08:23,014 --> 00:08:25,513
and must be redefined in each
of the subclasses

181
00:08:25,513 --> 00:08:28,232
This is known as an "abstract method".

182
00:08:28,232 --> 00:08:31,058
So you have a second example,

183
00:08:31,058 --> 00:08:33,212
which, I hope, allows you to understand

184
00:08:33,212 --> 00:08:36,194
the point of having abstract
methods

185
00:08:36,194 --> 00:08:40,847
such as this one, defined at the level
of superclasses, of abstract classes.

186
00:08:40,847 --> 00:08:44,597
Now, let's see how this is actually
written in Java.

187
00:08:44,597 --> 00:08:46,814
To have an abstract method in Java,

188
00:08:46,814 --> 00:08:51,819
we simply prepend the reserved keyword
"abstract" to its header

189
00:08:51,819 --> 00:08:54,505
and we simply end this header

190
00:08:54,505 --> 00:08:56,457
with a semicolon ( ; )
without writing a body,

191
00:08:56,457 --> 00:08:57,864
without giving it any definition

192
00:08:57,864 --> 00:09:00,295
because abstract methods don't
have a definition

193
00:09:00,295 --> 00:09:02,519
in the class in which they were introduced.

194
00:09:02,519 --> 00:09:05,380
They simply serve to impose to
the subclasses

195
00:09:05,380 --> 00:09:06,969
which we do not want to define
as being abstract

196
00:09:06,969 --> 00:09:08,640
-- we will come back to this in a moment --

197
00:09:08,640 --> 00:09:12,820
that they should redefine
this inherited abstract method.

198
00:09:12,820 --> 00:09:16,346
And these methods must be
contained within an abstract class,

199
00:09:16,346 --> 00:09:18,378
and again we will come back 
to this in a moment,

200
00:09:18,378 --> 00:09:20,452
and an abstract class is a class

201
00:09:20,452 --> 00:09:25,008
which also has the "abstract" keyword
in its header.

202
00:09:25,008 --> 00:09:26,823
So for example here,

203
00:09:26,823 --> 00:09:29,763
we want the "Personnage" class 
to be an abstract class

204
00:09:29,763 --> 00:09:33,423
so we will add the "abstract" keyword
to the header like so,

205
00:09:33,423 --> 00:09:35,788
at the beginning of the
class header

206
00:09:35,788 --> 00:09:38,850
and it will contain an abstract method,

207
00:09:38,850 --> 00:09:44,402
such as the method 
"abstract afficher" here.

208
00:09:44,402 --> 00:09:49,179
If we go back to our example with the
closed figures,

209
00:09:49,179 --> 00:09:52,367
remember that the idea was to
have closed figures

210
00:09:52,367 --> 00:09:54,932
to define a "surface" method.

211
00:09:54,932 --> 00:09:57,560
But we do not know how to
define this "surface" method

212
00:09:57,560 --> 00:10:01,489
in a general way at the level
of the "FigureFermee" class

213
00:10:01,489 --> 00:10:05,047
and so this "surface" method
becomes an abstract method

214
00:10:05,047 --> 00:10:08,772
and the  "FigureFermee" class
becomes an abstract class

215
00:10:08,772 --> 00:10:12,879
and we imagine that we will have
concrete subclasses

216
00:10:12,879 --> 00:10:16,120
defining closed figures such
as a circle, for example.

217
00:10:16,120 --> 00:10:19,321
Since the "FigureFermee" is
an abstract class,

218
00:10:19,321 --> 00:10:21,987
we add the "abstract" keyword here.

219
00:10:21,987 --> 00:10:24,455
The class contains two methods

220
00:10:24,455 --> 00:10:27,001
we added another abstract
one here.

221
00:10:27,001 --> 00:10:30,518
So we have the "surface" method we
were talking about earlier on in our example

222
00:10:30,518 --> 00:10:33,450
to which we added the "abstract"
keyword,

223
00:10:33,450 --> 00:10:36,330
and we could also imagine

224
00:10:36,330 --> 00:10:38,330
that we will have a "perimetre" method

225
00:10:38,330 --> 00:10:40,770
which would return the perimeter
of a closed figure

226
00:10:40,770 --> 00:10:43,329
and which we do not know how
to define in a general way

227
00:10:43,329 --> 00:10:45,107
at the level of the closed figures,

228
00:10:45,107 --> 00:10:47,860
so it is also an abstract method.

229
00:10:47,860 --> 00:10:51,302
Remember that you can use,
in an abstract class,

230
00:10:51,302 --> 00:10:55,242
an abstract method within a
non-abstract method.

231
00:10:55,242 --> 00:10:56,854
So for example here,

232
00:10:56,854 --> 00:10:59,644
calculating the volume generated
by the surface of the closed figure

233
00:10:59,644 --> 00:11:02,526
over a certain height passed as
a parameter here

234
00:11:02,526 --> 00:11:06,131
would consist in calculating the
product of the height and the value

235
00:11:06,131 --> 00:11:10,490
returned by the abstract method "surface".
This is quite possible.

236
00:11:10,490 --> 00:11:13,411
So an abstract class,

237
00:11:13,411 --> 00:11:16,776
qualified by the keyword "abstract"
at the beginning of its header:

238
00:11:16,776 --> 00:11:18,398
"abstract class something",

239
00:11:18,398 --> 00:11:21,176
is a class that cannot be
instantiated

240
00:11:21,176 --> 00:11:24,215
and that contains at least
one abstract method.

241
00:11:24,215 --> 00:11:26,126
This is why it is known as an
abstract class,

242
00:11:26,126 --> 00:11:28,760
because we cannot create an instance of it

243
00:11:28,760 --> 00:11:31,949
So for example, if I wanted to
write "FigureFermee"

244
00:11:31,949 --> 00:11:36,042
to declare an instance of a closed figure,

245
00:11:36,042 --> 00:11:39,939
e.g " fig = new ... "

246
00:11:39,939 --> 00:11:42,497
followed by a FigureFermee
constructor,

247
00:11:42,497 --> 00:11:46,426
I would not be able to do this, the
compiler would prevent me from doing so

248
00:11:46,426 --> 00:11:50,888
since "FigureFermee" is an abstract
class,

249
00:11:50,888 --> 00:11:53,804
meaning that I cannot create an instance
of it.

250
00:11:53,804 --> 00:11:55,952
And subclasses of an abstract
class

251
00:11:55,952 --> 00:11:58,730
stay abstract as long as they
haven't redefined

252
00:11:58,730 --> 00:12:00,599
all of its abstract methods.

253
00:12:00,599 --> 00:12:02,322
That is, they remain abstract

254
00:12:02,322 --> 00:12:05,045
as long as at least one inherited
abstract class

255
00:12:05,045 --> 00:12:06,987
hasn't been defined.

256
00:12:06,987 --> 00:12:09,653
Let's take an example,

257
00:12:09,653 --> 00:12:12,205
the example of the game with its
characters,

258
00:12:12,205 --> 00:12:14,295
where "Personnage" is an abstract class

259
00:12:14,295 --> 00:12:17,484
which contains an abstract method
"afficher".

260
00:12:17,484 --> 00:12:20,412
"Guerrier" is a subclass of
"Personnage".

261
00:12:20,412 --> 00:12:23,150
Imagine that "Guerrier" forgets

262
00:12:23,150 --> 00:12:26,720
to redefine the abstract method
"afficher" from "Personnage".

263
00:12:26,720 --> 00:12:28,563
If I do the following:

264
00:12:28,563 --> 00:12:30,694
so, if I create a game and I try
to add

265
00:12:30,694 --> 00:12:32,945
a new warrior to the game,

266
00:12:32,945 --> 00:12:37,011
if "Guerrier" has forgotten to
redefine the abstract method from "Personnage"

267
00:12:37,011 --> 00:12:39,823
then "Guerrier" is also an abstract class

268
00:12:39,823 --> 00:12:42,955
and I will not be able to create
an instance of it,

269
00:12:42,955 --> 00:12:44,836
of this abstract class "Personnage".

270
00:12:44,836 --> 00:12:47,601
If I try to do this, I will get
the message:

271
00:12:47,601 --> 00:12:50,935
"Guerrier is abstract;
cannot be instantiated".

272
00:12:50,935 --> 00:12:55,102
I cannot create an instance of the
abstract class "Guerrier"

273
00:12:55,102 --> 00:12:57,327
which is still abstract
since it did not

274
00:12:57,327 --> 00:12:59,800
redefine the "afficher" method.

275
00:12:59,800 --> 00:13:03,421
If I take a second example
on the closed figures,

276
00:13:03,421 --> 00:13:06,869
let's imagine that we still have this
abstract class "FigureFermee"

277
00:13:06,869 --> 00:13:10,829
with its abstract methods "surface" and ...

278
00:13:10,829 --> 00:13:14,789
...

279
00:13:14,789 --> 00:13:18,751
"perimetre", which is also abstract,

280
00:13:18,751 --> 00:13:21,762
and suppose that we define a class like
so, "Cercle" [TN: means "Circle"],

281
00:13:21,762 --> 00:13:24,312
inheriting from "FigureFermee".

282
00:13:24,312 --> 00:13:26,444
This "Cercle" class

283
00:13:26,444 --> 00:13:29,671
redefines the "surface" method here
concretely,

284
00:13:29,671 --> 00:13:31,414
in a non-abstract way,

285
00:13:31,414 --> 00:13:34,273
for example, Pi times
the radius squared

286
00:13:34,273 --> 00:13:38,624
and it also redefines the "perimetre"
method concretely.

287
00:13:38,624 --> 00:13:41,381
It has thus redefined both
abstract methods

288
00:13:41,381 --> 00:13:44,182
inherited from its abstract superclass
"FigureFermee"

289
00:13:44,182 --> 00:13:47,857
and so this "Cercle" class
is no longer an abstract class,

290
00:13:47,857 --> 00:13:51,337
we are able to create instances of "Cercle".

291
00:13:51,337 --> 00:13:53,774
This is now possible

292
00:13:53,774 --> 00:13:55,650
because the "Cercle" class
is no longer abstract.

293
00:13:55,650 --> 00:13:58,043
However, let's imagine a "Polygone" class

294
00:13:58,043 --> 00:14:01,483
also inheriting from the "FigureFermee" class

295
00:14:01,483 --> 00:14:05,651
but which redefines only
the perimeter, for example,

296
00:14:05,651 --> 00:14:09,511
supposing that we calculate the
perimeter of a polygon

297
00:14:09,511 --> 00:14:14,042
as being the sum of the lengths of
its sides.

298
00:14:14,042 --> 00:14:15,983
So we know perfectly well how to
define this

299
00:14:15,983 --> 00:14:18,512
but we would not necessarily know
how to define in a general way

300
00:14:18,512 --> 00:14:22,377
the surface of a polygon,
and so the "Polygon" class

301
00:14:22,377 --> 00:14:25,317
would only redefine the
abstract method "perimetre"

302
00:14:25,317 --> 00:14:28,793
but would not redefine the abstract
method "surface".

303
00:14:28,793 --> 00:14:32,400
And so to "Polygone" class
would remain an abstract class.

304
00:14:32,400 --> 00:14:36,180
I would not be able to create
any instance of "Polygone".

305
00:14:36,180 --> 00:14:39,276
This is impossible because

306
00:14:39,276 --> 00:14:41,569
"Polygone" is an abstract class

307
00:14:41,569 --> 00:14:45,399
since it doesn't redefine the
abstract method "surface".

308
00:14:45,399 --> 00:14:48,619
By the way, there is
something missing here

309
00:14:48,619 --> 00:14:51,551
to make the code for "Polygone"
correct --

310
00:14:51,551 --> 00:14:53,582
do you know what it is?

311
00:14:55,062 --> 00:14:58,549
There, this concludes this
episode on abstract methods

312
00:14:58,549 --> 00:15:00,640
and abstract classes.

313
00:15:00,640 --> 00:15:03,144
The next episode will focus on
different aspects

314
00:15:03,144 --> 00:15:05,842
of polymorphism, constructors,

315
00:15:05,842 --> 00:15:07,846
the "Object" superclass, etc.
