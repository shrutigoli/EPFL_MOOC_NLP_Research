1
00:00:03,918 --> 00:00:07,198
This episode aims to present
a few complements

2
00:00:07,198 --> 00:00:10,658
on the "final" modifier, specifically
in the relation to inheritance.

3
00:00:10,658 --> 00:00:13,271
The "final" modifier can be applied to
variables to indicate

4
00:00:13,271 --> 00:00:15,884
that they shall not be modified;

5
00:00:15,884 --> 00:00:18,498
it can be applied to classes as well,
to indicate

6
00:00:18,498 --> 00:00:21,918
that they cannot be extended;
and it can also be applied to methods

7
00:00:21,918 --> 00:00:24,968
to indicate that they can not
be overridden

8
00:00:24,968 --> 00:00:26,688
in an inheritance relation.

9
00:00:26,688 --> 00:00:29,838
"final" is very useful for variables
and less common

10
00:00:29,838 --> 00:00:31,728
for methods and classes.

11
00:00:31,728 --> 00:00:35,728
The "final" modifier was already presented
generally for variables

12
00:00:35,728 --> 00:00:39,728
in our previous MOOC covering
introduction to Java

13
00:00:39,728 --> 00:00:40,688
programming.

14
00:00:40,688 --> 00:00:44,408
We will thus first begin with its application

15
00:00:44,408 --> 00:00:48,018
to a new context, notably how
to apply final to methods

16
00:00:48,018 --> 00:00:49,168
and classes.

17
00:00:49,900 --> 00:00:51,900
Let's start with "final methods".

18
00:00:51,900 --> 00:00:54,930
A "final method" is a method declared
as such

19
00:00:54,930 --> 00:00:57,710
at the moment it is defined in the class.

20
00:00:57,710 --> 00:01:00,960
All we need to do is impose
it the "final" modifier.

21
00:01:00,960 --> 00:01:04,500
What this means is that
that specific method

22
00:01:04,500 --> 00:01:06,960
cannot be overridden in
any subclass.

23
00:01:06,960 --> 00:01:10,140
Let's go back to our example with
the "Personnage" hierarchy. Suppose that

24
00:01:10,140 --> 00:01:14,140
we want to give our hierarchy a "vieillir" method
(TN: means "to grow old") and that we wish

25
00:01:14,140 --> 00:01:17,750
to make sure that this method is
always the same

26
00:01:17,750 --> 00:01:19,350
for all possible characters in
the game

27
00:01:19,350 --> 00:01:22,890
For example, the "veillir" method
would consist in decrementing the

28
00:01:22,890 --> 00:01:25,610
characters health points by one point
each time.

29
00:01:25,610 --> 00:01:29,760
By defining the method as "final" in the
"Personnage" superclass,

30
00:01:29,760 --> 00:01:33,520
we prevent every subclass of
"Personnage", such as

31
00:01:33,520 --> 00:01:37,520
the "Sorcier" subclass for example (TN: means "Sorcerer"),
from redefining this method differently.

32
00:01:38,263 --> 00:01:42,263
If for example we try to make our
"Sorcier"'s age a little

33
00:01:42,263 --> 00:01:47,233
faster than the other characters
by redefining the "vieillir" method

34
00:01:47,233 --> 00:01:48,463
in that subclass,

35
00:01:55,615 --> 00:01:59,615
we'll get an error from the compiler
telling us that

36
00:01:59,615 --> 00:02:04,585
this is illegal due to the fact that
the "vieillir" method is defined

37
00:02:04,585 --> 00:02:06,825
as final in the superclass.

38
00:02:07,138 --> 00:02:10,298
The "final" modifier can also
be applied to classes.

39
00:02:10,298 --> 00:02:14,298
In that case, it indicates that it
is impossible to define a subclass

40
00:02:14,298 --> 00:02:18,298
to this class, so it is impossible to
extend that class by inheritance.

41
00:02:18,706 --> 00:02:22,706
Declaring a class as final is done by
adding the reserved word "final"

42
00:02:22,706 --> 00:02:26,706
in front of the declaration of the class
which, aside from that, is written

43
00:02:26,706 --> 00:02:28,536
as we are used to.

44
00:02:28,536 --> 00:02:30,959
In our example,

45
00:02:30,959 --> 00:02:32,602
if we wish, for one reason
or another,

46
00:02:32,602 --> 00:02:35,806
for the "Sorcier" class never to have
a subclass, then we simply need

47
00:02:35,806 --> 00:02:41,126
to declare it as final, which means that
if, later on, we try to create

48
00:02:41,126 --> 00:02:45,956
a class extending the "Sorcier" class,
inheriting from the "Sorcier" class,

49
00:02:45,956 --> 00:02:48,936
then we will get an error message

50
00:02:51,015 --> 00:02:52,145
from the compiler.

51
00:02:55,320 --> 00:02:58,560
Methods of final classes appear to
be quite annoying --

52
00:02:58,560 --> 00:03:01,760
indeed, they restrict extension programmers
who would want to

53
00:03:01,760 --> 00:03:05,650
extend an existing hierarchy or
extend methods inherited

54
00:03:05,650 --> 00:03:06,510
from above.

55
00:03:06,510 --> 00:03:11,020
For example, the predefined class "String"
from the Java API is actually declared

56
00:03:11,020 --> 00:03:14,240
as final, meaning that

57
00:03:14,240 --> 00:03:17,460
you will never be able to write
a "MyString" class

58
00:03:17,460 --> 00:03:20,680
inheriting from "String" and which might
improve some methods

59
00:03:20,680 --> 00:03:23,330
by overriding or adding
some.

60
00:03:23,330 --> 00:03:27,980
That being said, having a final keyword has
the advantage of clearly fixing the behavior

61
00:03:27,980 --> 00:03:31,000
of a class or method.

62
00:03:31,220 --> 00:03:34,630
Indeed, suppose that it would be possible
to do this, that it would be possible

63
00:03:34,630 --> 00:03:38,630
to create a "MyString" subclass extending
the predefined class "String".

64
00:03:38,968 --> 00:03:43,578
And suppose that the programmer of the "MyString"
class decides to override

65
00:03:43,578 --> 00:03:47,578
methods from the "String" class in their
subclass,

66
00:03:47,578 --> 00:03:52,538
for example, the "substring()" method which
extracts a substring

67
00:03:53,716 --> 00:03:55,236
from the character string.

68
00:03:55,236 --> 00:03:59,236
In fact, nothing would force this
programmer -- even if it would be discouraged --

69
00:03:59,236 --> 00:04:04,146
to do this, to respect the known
syntax of "substring()".

70
00:04:04,146 --> 00:04:07,986
So, he could code a substring method
that would have a completely

71
00:04:07,986 --> 00:04:11,986
different behavior to the one
defined in the "String" class.

72
00:04:11,986 --> 00:04:14,926
This is obviously something that should
not be done, something bad,

73
00:04:14,926 --> 00:04:18,926
but it is quite possible, there are
no fail-safes to prevent it.

74
00:04:18,926 --> 00:04:22,926
It would then be possible for example
to declare a String-type variable

75
00:04:27,272 --> 00:04:31,842
and assign it an object of
type "MyString",

76
00:04:34,118 --> 00:04:37,098
then calling the substring method

77
00:04:39,481 --> 00:04:42,111
on this object. And since

78
00:04:42,111 --> 00:04:45,181
we always have dynamic binding in Java,
it is the substring method

79
00:04:45,181 --> 00:04:49,181
from the "MyString" class which would
be called, giving rise to

80
00:04:49,181 --> 00:04:53,181
potentially unexpected behavior.

81
00:04:53,747 --> 00:04:56,847
Someone who reads this code could
be under the impression

82
00:04:56,847 --> 00:04:59,967
that they are working with "String"s
and expect a certain

83
00:04:59,967 --> 00:05:02,297
behavior for the substring method

84
00:05:02,297 --> 00:05:04,627
and this behavior would not
actually be present

85
00:05:04,627 --> 00:05:06,957
because of this override.

86
00:05:07,279 --> 00:05:11,279
In order to avoid this sort of
effects, you should set the behavior

87
00:05:11,279 --> 00:05:15,279
of a class by declaring it as "final", as
done in the case of the String class.

88
00:05:15,698 --> 00:05:18,718
This fail-safe does make us lose
some liberties that could

89
00:05:18,718 --> 00:05:21,678
be interesting; for example, the
extension programmer could

90
00:05:21,678 --> 00:05:26,638
chose to redefine the substring method
by improving its algorithm

91
00:05:26,638 --> 00:05:30,638
and preserving its semantics, meaning
that the behavior would be identical

92
00:05:30,638 --> 00:05:32,658
to that of the String class.
Unfortunately,

93
00:05:32,658 --> 00:05:35,788
this would not be possible, since
the "String" class is "final".

94
00:05:35,788 --> 00:05:38,838
There, now you know the meaning
of the "final"  keyword

95
00:05:38,838 --> 00:05:41,278
when it applies to a method or
to a class.

96
00:05:41,278 --> 00:05:44,408
You probably also know it for
variables.

97
00:05:44,408 --> 00:05:48,408
We will come back to this point
mainly when variables

98
00:05:48,408 --> 00:05:50,778
contain a reference to an object.

99
00:05:50,778 --> 00:05:53,601
The "final" modifier can also be applied
to variables,

100
00:05:53,601 --> 00:05:56,424
whether they are local variables,

101
00:05:56,424 --> 00:05:59,248
method parameters or what we
call "instance variables",

102
00:05:59,248 --> 00:06:01,308
i.e class attributes.

103
00:06:01,308 --> 00:06:05,308
It is then impossible to assign a value
more than once

104
00:06:05,308 --> 00:06:06,338
to this variable.

105
00:06:06,338 --> 00:06:09,004
In the specific case where it is an
attribute that is final,

106
00:06:09,004 --> 00:06:11,670
then it can be initialized

107
00:06:11,670 --> 00:06:14,338
in the constructor of the class,
but it cannot be modified

108
00:06:14,338 --> 00:06:15,438
later on.

109
00:06:15,438 --> 00:06:18,318
For example if, in a given class,
we define

110
00:06:20,972 --> 00:06:22,562
an attribute as "final",

111
00:06:35,734 --> 00:06:36,814
like so,

112
00:06:37,970 --> 00:06:42,350
then it is possible to initialize
it at this level,

113
00:06:44,381 --> 00:06:45,851
at the moment it is declared.

114
00:06:45,851 --> 00:06:49,031
It is also possible to define it

115
00:06:49,031 --> 00:06:52,421
in the constructors of the class,
any constructor,

116
00:07:07,196 --> 00:07:11,196
like this, but careful, these are two
mutually exclusive options,

117
00:07:11,196 --> 00:07:12,396
you must chose one or the other.

118
00:07:12,396 --> 00:07:15,216
So for example, I can chose only

119
00:07:16,601 --> 00:07:20,601
the option with the constructor
and in this case, the correct program

120
00:07:20,601 --> 00:07:21,661
will look like this.

121
00:07:21,858 --> 00:07:25,858
If I go with this option, every
constructor of the class will have to include

122
00:07:25,858 --> 00:07:30,958
a statement initializing this final
attribute, or there will be

123
00:07:30,958 --> 00:07:34,088
an error message from the compiler
indicating that

124
00:07:34,088 --> 00:07:36,378
this final variable was not initialized.

125
00:07:36,378 --> 00:07:40,378
Once it is initialized, this final
attribute, like any other final variable,

126
00:07:40,378 --> 00:07:44,378
cannot be modified anymore, meaning
that here for example, if we imagine that

127
00:07:44,378 --> 00:07:52,008
a little later on in the constructor here,
we try to modify the value

128
00:07:52,008 --> 00:07:58,148
of this attribute, then we will get
an error message from the compiler.

129
00:07:58,148 --> 00:08:02,778
But careful, be sure to note that when
a final variable contains

130
00:08:02,778 --> 00:08:07,008
a reference to an object, then we cannot
assign a new value to that

131
00:08:07,008 --> 00:08:12,388
variable, but nothing prevents us
from modifying the referenced object

132
00:08:12,388 --> 00:08:13,858
via that variable.

133
00:08:14,600 --> 00:08:16,750
Let's examine this very point with an example.

134
00:08:17,148 --> 00:08:20,278
So here, we have a "Conteneur" class
(TN: means "Container")

135
00:08:20,278 --> 00:08:23,108
which contains an integer attribute
named "valeur" (TN: means "value").

136
00:08:23,108 --> 00:08:27,108
The "Conteneur" class has only one
public method, "setValeur"

137
00:08:27,108 --> 00:08:29,968
allowing us to modify the
value of the attribute

138
00:08:29,968 --> 00:08:33,258
Next, we have a small main program
which declares an object of

139
00:08:33,258 --> 00:08:37,258
type "Conteneur" and which assigns
a value to its integer attribute.

140
00:08:38,144 --> 00:08:42,144
The state of the memory after the execution
of this line of code will thus be

141
00:08:42,144 --> 00:08:47,224
like this: in the variable 'c',
we have a reference

142
00:08:47,224 --> 00:08:48,754
to an object of type "Conteneur",

143
00:08:49,352 --> 00:08:53,482
whose valeur attribute has
a value of 42.

144
00:08:53,482 --> 00:08:57,482
The main program calls a method,
modifier, which takes 'c'

145
00:08:57,482 --> 00:08:58,752
as a parameter.

146
00:08:59,180 --> 00:09:06,280
The modifier method is special in that
the "Conteneur" passed as parameter

147
00:09:06,280 --> 00:09:08,100
is declared as "final".

148
00:09:08,100 --> 00:09:14,090
We could thus imagine that "final" means
that the object passed as parameter

149
00:09:14,090 --> 00:09:18,380
cannot be modified in the
modifier method.

150
00:09:18,380 --> 00:09:24,300
However, it depends what we mean by this.
We cannot, indeed, modify

151
00:09:25,737 --> 00:09:30,417
the argument itself for example by assigning
a new reference to it, however the object

152
00:09:30,417 --> 00:09:35,567
referenced can be modified via 'c',
even if 'c' is passed

153
00:09:35,567 --> 00:09:40,317
as a "final parameter", meaning that after
the execution of this line,

154
00:09:40,317 --> 00:09:45,677
well, the referenced object will
indeed have been modified.

155
00:09:45,677 --> 00:09:49,347
Basically, the fact that the parameter
is "final" prevents

156
00:09:51,102 --> 00:09:55,802
the variable that is passed as an argument
from pointing to another object,

157
00:09:55,802 --> 00:09:59,802
so this is not possible, it is not possible
to modify the reference itself;

158
00:09:59,802 --> 00:10:05,492
however, nothing prevents us from modifying 
the referenced object via this final parameter.

159
00:10:06,134 --> 00:10:10,794
This is of course valid for every "final"
variable containing a reference

160
00:10:10,794 --> 00:10:15,204
to an object, whether it is an attribute,
a local variable,

161
00:10:15,204 --> 00:10:16,314
or a method parameter.

162
00:10:16,314 --> 00:10:20,054
So essentially, when we assign
an object to a final variable,

163
00:10:20,054 --> 00:10:22,380
this does not mean that the
object is protected

164
00:10:22,380 --> 00:10:24,696
from any modification from the outside,

165
00:10:24,696 --> 00:10:27,814
it simply means that the variable
can reference only this object.

166
00:10:27,814 --> 00:10:31,464
Finally, a small detail which
you may have picked up,

167
00:10:31,464 --> 00:10:37,164
since Java uses only passing by value
and since no parameter

168
00:10:37,164 --> 00:10:41,004
can be modified within a method with
the modification being preserved

169
00:10:41,004 --> 00:10:45,164
outside of the method, what can be
the point

170
00:10:45,164 --> 00:10:47,884
of declaring this parameter as final?

171
00:10:47,884 --> 00:10:52,304
The answer is indeed that this is
a syntactic fail-safe

172
00:10:52,304 --> 00:10:55,854
in the case of this example, since it
makes no sense

173
00:10:55,854 --> 00:10:59,554
to write this sort of thing, since the parameter
cannot be modified by the method.

174
00:10:59,554 --> 00:11:02,844
Well, the point of declaring
these as final is that if we try

175
00:11:02,844 --> 00:11:06,514
to do this sort of thing, the compiler
will react and tell us

176
00:11:06,514 --> 00:11:10,094
that something strange is happening
inside our method.

177
00:11:10,094 --> 00:11:14,094
The fact that we declared it as final
allows the compiler to alert us of errors.

178
00:11:14,549 --> 00:11:18,549
And this concludes our small complement
on the final modifier in Java.
