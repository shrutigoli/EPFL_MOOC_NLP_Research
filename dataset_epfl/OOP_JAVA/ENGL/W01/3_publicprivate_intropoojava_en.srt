1
00:00:04,372 --> 00:00:06,230
In the last episode,

2
00:00:06,230 --> 00:00:09,861
we learned how to
code declarations of classes

3
00:00:09,861 --> 00:00:13,274
how to define their
data members and methods, that is,

4
00:00:13,274 --> 00:00:16,568
on this graph summarizing

5
00:00:16,568 --> 00:00:20,427
OOP, essentially this axe
that we have examined

6
00:00:20,427 --> 00:00:23,959
in the last video.
But how do we in Java

7
00:00:23,959 --> 00:00:27,902
materialize the notion
of interface, the visible part

8
00:00:27,902 --> 00:00:32,795
of the class, and the implementation
part of the class, that is hidden.

9
00:00:32,795 --> 00:00:37,187
How do we implement this axe
of the chart?

10
00:00:37,187 --> 00:00:40,700
This will be the topic
of this video.


11
00:00:40,700 --> 00:00:43,679
Concretely, if we look at
the class Rectangle from before

12
00:00:43,679 --> 00:00:47,763
we decided to have a method surface
that was part of the interface

13
00:00:47,763 --> 00:00:51,536
and that could be used
anywhere in the program

14
00:00:51,536 --> 00:00:56,742
and we also have two private
data members "largeur" and "hauteur".

15
00:00:56,742 --> 00:01:01,974
In Java, the private components
are declared like this.

16
00:01:01,974 --> 00:01:07,357
We will add the keyword "private"
before each data member or method

17
00:01:07,357 --> 00:01:13,795
that we want to hide,
making them inaccessible outside the class.

18
00:01:13,795 --> 00:01:16,663
These members will
therefore not be in the interface.

19
00:01:16,663 --> 00:01:19,899
Inaccessible from outside a class
simply means

20
00:01:19,899 --> 00:01:22,656
that if, for example, in the
method main or

21
00:01:22,656 --> 00:01:27,657
in another class we wrote this,
(we declare an instance of the

22
00:01:27,657 --> 00:01:33,740
class Rectangle, and we try to
directly access the height like this)

23
00:01:33,740 --> 00:01:37,508
in this case the compiler will
return an error message

24
00:01:37,508 --> 00:01:44,895
saying that the field "hauteur"
is declared private in Rectangle.

25
00:01:44,895 --> 00:01:49,428
Note that if nothing is specified,
like for this method surface,

26
00:01:49,428 --> 00:01:52,158
then it will have a
default access

27
00:01:52,158 --> 00:01:54,323
that I will elaborate on
in a few minutes.

28
00:01:55,003 --> 00:01:58,359
So we saw that to declare
the private implementation part,

29
00:01:58,359 --> 00:02:03,169
we use the keyword private,
and inversely for the public interface

30
00:02:03,169 --> 00:02:06,760
that we want to have available
externally,

31
00:02:06,760 --> 00:02:12,493
and accessible from all the other
classes we use the keyword public.

32
00:02:12,493 --> 00:02:15,685
So the method surface,
being part of the interface of Rectangle,

33
00:02:15,685 --> 00:02:19,964
we will add "public" before the header
and definition of the method surface.

34
00:02:19,964 --> 00:02:25,452
If I take up the last example
of a method main,

35
00:02:25,452 --> 00:02:31,311
that declared an instance rect
of the class Rectangle,

36
00:02:31,311 --> 00:02:36,641
this instance would be able
to invoke the method surface

37
00:02:36,641 --> 00:02:41,174
and store the return value
in a variable.

38
00:02:41,174 --> 00:02:46,407
This is possible because the
method surface is declared public.

39
00:02:46,407 --> 00:02:53,066
If it had been declared private,
then I couldn't have

40
00:02:53,066 --> 00:02:58,154
done this manipulation: accessing
surface outside of

41
00:02:58,154 --> 00:03:00,855
the class Rectangle.

42
00:03:00,855 --> 00:03:04,374
I would like to remind you of
some programming guidelines,

43
00:03:04,374 --> 00:03:07,849
and important principles in OOP.

44
00:03:07,849 --> 00:03:12,155
One is to declare all the
data members private, even if

45
00:03:12,155 --> 00:03:15,239
there are some exceptions
that we will not consider here,

46
00:03:15,239 --> 00:03:18,651
and are not important in this context.

47
00:03:18,651 --> 00:03:23,448
Thus it is absolutely indespensable
to not have any data member public

48
00:03:23,448 --> 00:03:26,980
and declare private any method
used internally to

49
00:03:26,980 --> 00:03:31,659
modularize the class implementation,
and only have a few hand-picked

50
00:03:31,659 --> 00:03:36,444
public methods
in the interface.

51
00:03:36,444 --> 00:03:40,545
The core of a good conception is to make the right choices
for the public methods.

52
00:03:41,245 --> 00:03:44,706
A small technical annex
on access rights:

53
00:03:44,706 --> 00:03:47,705
programs in Java are usually
organized around the notion of "packages"

54
00:03:47,705 --> 00:03:50,853
that is not presented in
the introductory videos but

55
00:03:50,853 --> 00:03:53,839
is presented in the course complements.

56
00:03:53,839 --> 00:03:56,022
Even if you don't declare a package,
you are, in fact, in a default package.

57
00:03:56,022 --> 00:03:59,254
If you don't declare
a data member or method private,

58
00:03:59,254 --> 00:04:02,729
then this member is actually
accessible in any class that

59
00:04:02,729 --> 00:04:07,488
belongs to the package.
It's as if it were declared public for

60
00:04:07,488 --> 00:04:10,857
the entire package and private
for everything outside the package.

61
00:04:10,857 --> 00:04:14,404
This is what is called
"friendly access rights".

62
00:04:14,404 --> 00:04:19,166
If for example, in a default package,
you have

63
00:04:19,166 --> 00:04:24,918
a class Rectangle that
contains a data member "hauteur"

64
00:04:24,918 --> 00:04:31,196
but isn't declared private or public,

65
00:04:31,196 --> 00:04:37,563
and in the same package, you
also have a class Dessin that uses

66
00:04:37,563 --> 00:04:41,790
the class Rectangle, then this
class Dessin will have access

67
00:04:41,790 --> 00:04:49,112
to "hauteur" and to any other
data members and methods that are

68
00:04:49,112 --> 00:04:54,537
declared without access rights
because Dessin is in the same package.

69
00:04:54,537 --> 00:04:58,638
Thus Dessin can directly access

70
00:04:58,638 --> 00:05:06,458
the member variable "hauteur"
of the Rectangle rect,

71
00:05:06,458 --> 00:05:09,255
which I find is not great.
That is why we recommend that

72
00:05:09,255 --> 00:05:13,988
you explicitly specify public
before each data member

73
00:05:13,988 --> 00:05:17,332
and methods that you want to
have in the interface.

74
00:05:17,332 --> 00:05:19,977
These will be public, not only
for this package, but also

75
00:05:19,977 --> 00:05:23,573
for other packages.

76
00:05:23,573 --> 00:05:27,741
Everything private will be
reserved for the implementation details.

77
00:05:28,051 --> 00:05:31,110
So this is all I want to say
on packages.

78
00:05:31,110 --> 00:05:34,317
It's a technical aspect of Java that
is perhaps a bit premature for this course.

79
00:05:34,317 --> 00:05:38,184
That said, you could say

80
00:05:38,184 --> 00:05:41,769
that if all the data members are private,
how will I be able to use them?

81
00:05:41,769 --> 00:05:45,685
For example, if we wanted
to modify the height of my rectangle,

82
00:05:45,685 --> 00:05:49,007
this in itself being debatable.
Do we really want to change

83
00:05:49,007 --> 00:05:52,499
But let it be so.
Suppose that we want to access

84
00:05:52,499 --> 00:05:56,973
the height of the rectangle
just to know its value.

85
00:05:56,973 --> 00:05:59,935
How can we obtain the values
of the dimensions of the rectangle

86
00:05:59,935 --> 00:06:02,859
if they are private data members
if we can't access them

87
00:06:02,859 --> 00:06:07,918
outside the class?
I can't do something like this:

88
00:06:07,918 --> 00:06:15,154
declare a new rectangle and
try to print its height.

89
00:06:15,154 --> 00:06:20,559
This is something that I cannot do
because the variables are private.

90
00:06:20,559 --> 00:06:26,484
To solve this problem,
we will include in the interface

91
00:06:26,484 --> 00:06:31,400
a few methods necessary to this end
[called setters and getters]

92
00:06:31,400 --> 00:06:34,735
so for example a method to
modify the height,

93
00:06:34,735 --> 00:06:38,998
a method to access the width, etc.

94
00:06:38,998 --> 00:06:42,683
For example, here, we want a
method that returns the value of hauteur

95
00:06:42,683 --> 00:06:48,516
and we would write something like this
with a method getHauteur.

96
00:06:48,516 --> 00:06:51,260
I would like to insist on this important
aspect of writing a program,

97
00:06:51,260 --> 00:06:53,690
that you don't have to systematically
include methods

98
00:06:53,690 --> 00:06:57,134
to modify or even to access
the data members of a class,

99
00:06:57,134 --> 00:07:00,367
but you have to decide which
variables can

100
00:07:00,367 --> 00:07:04,010
be modified or accessed

101
00:07:04,010 --> 00:07:07,337
from outside through methods
like these.

102
00:07:07,337 --> 00:07:11,170
Methods that only access the value
of the variable are called "accessors".

103
00:07:11,170 --> 00:07:14,828
And methods that modify the values
of the data members are "mutators".

104
00:07:14,828 --> 00:07:19,632
Accessors, also called "get methods" or
"getters", return the data member's value.

105
00:07:19,632 --> 00:07:23,399
So if we need to access the value
of the data member "hauteur",

106
00:07:23,399 --> 00:07:28,269
"hauteur", being of type double,
the method will return a value of the same type

107
00:07:28,269 --> 00:07:32,633
a double, with "double getHauteur",
and we will write "return hauteur".

108
00:07:32,633 --> 00:07:35,465
Recall that all methods of a class
can access the data members of the class,

109
00:07:35,465 --> 00:07:39,750
so here it is the height of the current
instance (that called the method).

110
00:07:39,750 --> 00:07:44,995
In the same way, we can declare
an accessor for the width.

111
00:07:44,995 --> 00:07:50,112
Mutators, also called "set methods" or
"setters" modify the data members

112
00:07:50,112 --> 00:07:55,735
by assigning them a value.

113
00:07:55,735 --> 00:07:58,730
To do this, they have
to first receive the value

114
00:07:58,730 --> 00:08:02,663
from outside, and this received value
will then be assigned to the variable.

115
00:08:02,663 --> 00:08:07,001
So this value is received as parameter

116
00:08:07,001 --> 00:08:11,102
and doesn't return anything,
because its purpose is not

117
00:08:11,102 --> 00:08:15,069
to return something but to
assign a value.

118
00:08:15,069 --> 00:08:19,152
So for example, value of the parameter
"h" is copied to the variable "hauteur",

119
00:08:19,152 --> 00:08:23,476
and likewise, the value of the parameter "l" is

120
00:08:23,476 --> 00:08:26,675
copied to the variable "largeur".

121
00:08:27,145 --> 00:08:28,981
Let's illustrate this
with an example.

122
00:08:28,981 --> 00:08:32,572
We have as before, a class
Exemple, with its method main

123
00:08:32,572 --> 00:08:37,443
where we use the instance rect1

124
00:08:37,443 --> 00:08:42,334
of the class Rectangle,
that has in its interface

125
00:08:42,334 --> 00:08:46,766
a method surface, as well as
two get methods.

126
00:08:46,766 --> 00:08:51,888
Here an accessor getHauteur that
doesn't take any arguments

127
00:08:51,888 --> 00:08:56,312
because it doesn't need any values,
however, it returns a double,

128
00:08:56,312 --> 00:09:02,722
(double because the value of the
returned variable is a double).

129
00:09:02,722 --> 00:09:07,496
hauteur and largeur are
as before in the implementation part

130
00:09:07,496 --> 00:09:11,897
and are declared private.
Similarly, we have an accessor

131
00:09:11,897 --> 00:09:18,199
for the width, and in the public part
we also have a mutator setHauteur,

132
00:09:18,199 --> 00:09:23,802
that receives the value to assign
the data member from outside,

133
00:09:23,802 --> 00:09:29,046
through the parameter h.

134
00:09:29,046 --> 00:09:36,860
To use these methods,
for example in the method main,

135
00:09:36,860 --> 00:09:42,332
we will, for instance, call getHauteur
which will return the height

136
00:09:42,332 --> 00:09:47,233
of the instance rect1.

137
00:09:47,233 --> 00:09:53,302
We will have assigned beforehand
the value 3 to the height of rect1

138
00:09:53,302 --> 00:09:58,173
by writing "rect1.setHauteur(3)".

139
00:09:58,173 --> 00:10:03,790
The value 3 will then be copied into the
data member "hauteur" of rect1.

140
00:10:03,790 --> 00:10:11,326
Likewise invoking setLargeur on
rect1 will sett the width of rect1.

141
00:10:11,326 --> 00:10:13,722
Another comment students
frequently make is

142
00:10:13,722 --> 00:10:17,205
"Why do we have to do all this?
It's too complicated to write all this!"

143
00:10:17,205 --> 00:10:21,649
"Why not keep largeur
and hauteur public?"

144
00:10:21,649 --> 00:10:25,368
"Like this, we can use them
however we want!"

145
00:10:25,368 --> 00:10:28,509
But it's using them in whatever
way that's exactly the problem!

146
00:10:28,509 --> 00:10:32,910
For example in this case, if I declare
an instance rect1 of Rectangle,

147
00:10:32,910 --> 00:10:37,162
I could very well assign
the invalid value -36

148
00:10:37,162 --> 00:10:39,692
to its height.

149
00:10:39,692 --> 00:10:43,903
While, if instead of assigning this
value to the data member,

150
00:10:43,903 --> 00:10:51,173
I had passed it to the method setHauteur,
we could have had in this method

151
00:10:51,173 --> 00:10:55,818
a mechanism to verify whether
the value is positive and valid,

152
00:10:55,818 --> 00:11:04,000
and in this case, assign the value,

153
00:11:04,000 --> 00:11:12,353
or if the value is negative or zero,

154
00:11:12,353 --> 00:11:14,992
then to, for example, report the error.

155
00:11:14,992 --> 00:11:19,689
Using this set method allows for
a verification process

156
00:11:19,689 --> 00:11:23,134
that guarantees the validity of the data.

157
00:11:23,134 --> 00:11:29,013
Suppose that we also have
a data member a bit more complex,

158
00:11:29,013 --> 00:11:33,550
here, a String "label", for example,
that contains some information

159
00:11:33,550 --> 00:11:39,040
and that we use externally
by writing for example "rect.label.length"

160
00:11:39,040 --> 00:11:45,313
using methods associated
with the type String.

161
00:11:45,313 --> 00:11:50,487
Suppose now, that we write
400 lines of code like this

162
00:11:50,487 --> 00:11:54,555
directly accessing "label".

163
00:11:54,555 --> 00:11:58,267
If the class programmer decides
to substitute the String

164
00:11:58,267 --> 00:12:02,911
with an ArrayList, we would have
to throw 400 lines out

165
00:12:02,911 --> 00:12:06,701
and write everything from scratch.

166
00:12:06,701 --> 00:12:08,522
But if we had only used the interface,
which isn't supposed to change,

167
00:12:08,522 --> 00:12:11,222
and that we do not access the
class fields directly,

168
00:12:11,222 --> 00:12:16,312
but only through the interface,
then if the class programmer

169
00:12:16,312 --> 00:12:20,417
changes the String to an ArrayList,

170
00:12:20,417 --> 00:12:24,020
our 400 lines will not be effected

171
00:12:24,020 --> 00:12:26,659
because they respect
the class interface.

172
00:12:26,659 --> 00:12:29,309
It's for these two fundamental
reasons:

173
00:12:29,309 --> 00:12:32,847
the ability to verify the values
assigned to different fields,

174
00:12:32,847 --> 00:12:36,864
and the ability to modify the
program independently (modularization)

175
00:12:36,864 --> 00:12:41,148
that we recommend to use
getters and setters

176
00:12:41,148 --> 00:12:43,919
and to not put data members
in the interface,

177
00:12:43,919 --> 00:12:47,140
but to have the exclusively
in the public part of the class.

178
00:12:47,140 --> 00:12:49,526
It's clear that doing this
in small exercises

179
00:12:49,526 --> 00:12:54,527
doesn't make much sense,
but does in a big project.

180
00:12:54,527 --> 00:12:57,688
Moreover, it is in this context that
OOP was invented.

181
00:12:57,688 --> 00:13:01,291
And so it is with this objective
in mind

182
00:13:01,291 --> 00:13:03,823
that we learn these principles.

183
00:13:03,823 --> 00:13:08,930
So follow these guidelines,
and try to separate to the maximum

184
00:13:08,930 --> 00:13:12,600
members constituting the interface
from those that are implementation details.

185
00:13:12,600 --> 00:13:16,953
To close, let's examine another
technical aspect: shadowing.

186
00:13:16,953 --> 00:13:20,745
Shadowing occurs when an identifier, a name,
for one variable

187
00:13:20,745 --> 00:13:23,919
shadows a name used
for another variable.

188
00:13:23,919 --> 00:13:27,181
This happens typically in OOP,
when a parameter,

189
00:13:27,181 --> 00:13:30,787
such as "hauteur" in the
method setHauteur,

190
00:13:30,787 --> 00:13:35,995
hides the data member
for height "hauteur".

191
00:13:35,995 --> 00:13:40,328
In this context, we would like
to designate the data member

192
00:13:40,328 --> 00:13:45,920
with this "hauteur" and the parameter 
with this other  "hauteur".

193
00:13:45,920 --> 00:13:50,576
But in this situation, the compiler
will not know the difference

194
00:13:50,576 --> 00:13:54,449
and so writing this is not correct.

195
00:13:54,449 --> 00:13:57,221
So what to do?
Well we can simply

196
00:13:57,221 --> 00:14:00,956
use different names,

197
00:14:00,956 --> 00:14:04,389
like we did before,
with h being the name of the parameter.

198
00:14:04,389 --> 00:14:08,635
In that case there isn't any ambiguity.

199
00:14:08,635 --> 00:14:13,396
Or else you can use a technique which removes
the ambiguity by

200
00:14:13,396 --> 00:14:15,988
by resorting to the keyword "this"
to refer to the current instance,

201
00:14:15,988 --> 00:14:18,881
so "this = current instance".

202
00:14:18,881 --> 00:14:22,517
In the last example, to illustrate,

203
00:14:22,517 --> 00:14:27,555
if we call the parameter
of the method "hauteur",

204
00:14:27,555 --> 00:14:33,185
then we will have to unmask
the name "hauteur" referring to

205
00:14:33,185 --> 00:14:37,119
the data member by saying "this.hauteur"
meaning "this current instance's hauteur"

206
00:14:37,119 --> 00:14:41,357
so "this.hauteur"
designates this height.

207
00:14:41,357 --> 00:14:45,900
In this situation, it is obligatory
to put "this",

208
00:14:45,900 --> 00:14:49,197
but I recommend to avoid this
kind of situation,

209
00:14:49,197 --> 00:14:53,268
by choosing different names,

210
00:14:53,268 --> 00:14:56,725
that are clear and avoid
any ambiguity.

211
00:14:56,725 --> 00:14:59,929
Let's summarize what we
have learned about access rights

212
00:14:59,929 --> 00:15:03,047
as well as the scope of data
members and methods of a class.

213
00:15:03,047 --> 00:15:07,084
We saw that the keywords "private"
and "public" determine the access rights.

214
00:15:07,084 --> 00:15:12,253
private defines what constitutes the
hidden implementation details,

215
00:15:12,253 --> 00:15:15,492
only accessible from within a class,

216
00:15:15,492 --> 00:15:19,892
while "public" defines what is part
of the interface,

217
00:15:19,892 --> 00:15:23,654
accessible from outside the class,

218
00:15:23,654 --> 00:15:25,369
from the main, and other classes.

219
00:15:25,369 --> 00:15:30,019
So here the scope of the data
members is limited to the class,

220
00:15:30,019 --> 00:15:33,769
x and y are accessible

221
00:15:33,769 --> 00:15:37,981
anywhere in "MaClasse" and
particularly in any method of this class.

222
00:15:37,981 --> 00:15:45,039
For example, here "y" refers to
the data member of the instance

223
00:15:45,039 --> 00:15:47,632
that the method would
apply to.

224
00:15:47,632 --> 00:15:52,500
Shadowing can also occur here,

225
00:15:52,500 --> 00:15:56,040
if we reuse the name of
the data member,

226
00:15:56,040 --> 00:15:59,045
like here with the parameter.

227
00:15:59,045 --> 00:16:06,074
So then, because of scope
resolution, x will locally

228
00:16:06,074 --> 00:16:11,121
refer to the parameter x.

229
00:16:11,121 --> 00:16:17,694
So if we want to refer to
the data member x, we have

230
00:16:17,694 --> 00:16:24,896
to use the word "this" to unmask x.

231
00:16:24,896 --> 00:16:30,840
"this.x" then refers to the instance
to which the method is applied.

232
00:16:30,840 --> 00:16:34,115
Let's end this video, with
another technical aspect:

233
00:16:34,115 --> 00:16:36,075
how objects are represented
in memory.

234
00:16:36,075 --> 00:16:37,816
This technical aspect is
nevertheless important

235
00:16:37,816 --> 00:16:40,644
when writing code.

236
00:16:40,644 --> 00:16:42,510
I recall, like we saw earlier,

237
00:16:42,510 --> 00:16:46,413
in the first course on programming,

238
00:16:46,413 --> 00:16:48,301
that objects like Strings or arrays,

239
00:16:48,301 --> 00:16:52,290
are represented in the memory
through references.

240
00:16:52,290 --> 00:16:57,558
For example, if I declare a
String v initialized at "Welcome",

241
00:16:57,558 --> 00:16:59,979
then we can see the storage
like this,

242
00:16:59,979 --> 00:17:04,408
v is a reference to a
certain memory location

243
00:17:04,408 --> 00:17:07,408
where the value "Welcome"
is stored.

244
00:17:07,408 --> 00:17:12,249
In the same manner, if I declare
2 Rectangles, rect1 and rect2,

245
00:17:16,629 --> 00:17:24,485
in the memory I would have
2 references to 2 memory locations

246
00:17:24,485 --> 00:17:27,388
that effectively contain
its height and its width.

247
00:17:27,388 --> 00:17:31,475
Now if we assign the values 3 and 4
to rect1's height and width,

248
00:17:31,475 --> 00:17:36,337
and also initialize the dimensions
of rect2,

249
00:17:36,337 --> 00:17:43,047
for example 11.3 and 2.7.

250
00:17:43,047 --> 00:17:45,728
We will have this depiction
of the memory,

251
00:17:45,728 --> 00:17:47,880
with objects being in fact
references to locations

252
00:17:47,880 --> 00:17:51,828
where their values are really stored.

253
00:17:51,828 --> 00:17:55,772
This is paramount to know
when comparing objects,

254
00:17:55,772 --> 00:18:02,537
because we have to know if we are
comparing the references or their values?

255
00:18:02,537 --> 00:18:05,761
At this stage, we are only comparing
references if we don't do anything.

256
00:18:05,761 --> 00:18:16,124
If we copy an object into another
we are in fact doing this,

257
00:18:16,124 --> 00:18:27,696
with rect2 = rect1.
And if I print an object,

258
00:18:27,696 --> 00:18:30,491
only the reference will
be displayed even

259
00:18:30,491 --> 00:18:34,891
if we wanted the real values
displayed.

260
00:18:34,891 --> 00:18:38,293
We will come back to this aspect
later in the course.

261
00:18:38,293 --> 00:18:41,532
Variables being references, they
can also be a reference to no object,

262
00:18:41,532 --> 00:18:46,211
In this case we would

263
00:18:46,211 --> 00:18:49,945
use the keyword "null".

264
00:18:49,945 --> 00:18:52,695
So for instance, I can declare
here an instance rect

265
00:18:52,695 --> 00:18:55,749
of the class Rectangle
and say it is null,

266
00:18:55,749 --> 00:18:59,760
which means that it
is a reference to nowhere,

267
00:18:59,760 --> 00:19:03,565
which can be represented like this.

268
00:19:03,565 --> 00:19:06,918
So we can frequently
see this kind of code:

269
00:19:06,918 --> 00:19:11,129
if rect == null then do
something, such as

270
00:19:11,129 --> 00:19:16,311
assigning it a
new rectangle.

271
00:19:16,311 --> 00:19:20,240
Or else you can have,
if rect is not null,

272
00:19:20,240 --> 00:19:23,659
than in this case use it

273
00:19:23,659 --> 00:19:27,786
for example to call
the method surface.
