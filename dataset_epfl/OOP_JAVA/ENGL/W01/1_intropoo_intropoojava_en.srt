1
00:00:04,447 --> 00:00:05,568
We will consider in this lesson

2
00:00:05,568 --> 00:00:08,514
a very important aspect
of programming:

3
00:00:08,514 --> 00:00:11,156
object-oriented programming (OOP).

4
00:00:11,156 --> 00:00:13,375
OOP is a programming paradigm 
or a certain style of programming

5
00:00:13,375 --> 00:00:15,262
that is used in several programming 

6
00:00:15,262 --> 00:00:17,138
languages besides Java,

7
00:00:17,158 --> 00:00:19,322
which will give a certain number

8
00:00:19,322 --> 00:00:21,260
of useful features to
your programs

9
00:00:21,260 --> 00:00:25,128
in terms of maintenance and modularity.

10
00:00:25,128 --> 00:00:26,915
At this stage of the course,
you should know

11
00:00:26,915 --> 00:00:28,740
the fundamental aspects

12
00:00:28,740 --> 00:00:30,678
of basic programming.

13
00:00:30,678 --> 00:00:32,602
For example, you know how to 
write code to process data

14
00:00:32,602 --> 00:00:34,507
using control structures,

15
00:00:34,507 --> 00:00:36,247
such as conditional loops,

16
00:00:36,247 --> 00:00:38,897
You also know how to structure data

17
00:00:38,897 --> 00:00:40,487
using arrays,

18
00:00:40,487 --> 00:00:42,510
and, most importantly, you know
how to modularize your programs

19
00:00:42,510 --> 00:00:46,018
using the paramount notion
of functions.

20
00:00:46,018 --> 00:00:48,008
These basic tools
allow you to code in a

21
00:00:48,008 --> 00:00:50,068
a certain style of programming,

22
00:00:50,068 --> 00:00:52,604
called procedural or imperative
programming,

23
00:00:52,604 --> 00:00:55,811
in which data and data processing

24
00:00:55,811 --> 00:00:58,283
appear separately in the program.

25
00:00:58,283 --> 00:00:59,979
But the two entities interact:

26
00:00:59,979 --> 00:01:02,531
the data processing works
with the data,

27
00:01:02,531 --> 00:01:04,898
which influence in turn the data processing.

28
00:01:04,898 --> 00:01:07,796
But the two entities appear
separately.

29
00:01:07,796 --> 00:01:10,727
For example, the data processing
can be 

30
00:01:10,727 --> 00:01:12,881
represented with functions,

31
00:01:12,881 --> 00:01:15,883
and the data and functions can
then be linked

32
00:01:15,883 --> 00:01:19,002
by the passing of arguments.

33
00:01:19,002 --> 00:01:20,943
The data is expressed

34
00:01:20,943 --> 00:01:24,848
by distinct entities,
for example variables.

35
00:01:26,148 --> 00:01:28,738
One of the fundamental particularities
of OOP

36
00:01:28,738 --> 00:01:33,188
is the possibility to bundle
together functions and data

37
00:01:33,188 --> 00:01:36,216
into one same entity.

38
00:01:36,216 --> 00:01:38,078
Let's consider a concrete example.

39
00:01:38,078 --> 00:01:40,463
Imagine that we would
like to write a program

40
00:01:40,463 --> 00:01:43,180
that works with the notion of rectangle.

41
00:01:43,180 --> 00:01:47,545
A rectangle is defined by
its width, and its height.

42
00:01:47,545 --> 00:01:50,557
And I want to manipulate
different rectangles

43
00:01:50,557 --> 00:01:54,163
to calculate their area.

44
00:01:54,163 --> 00:01:56,894
In procedural programming,
I would proceed like this:

45
00:01:57,876 --> 00:02:01,117
I declare a variable "largeur"
(TN: "largeur" means "width"),

46
00:02:01,127 --> 00:02:03,186
that I assign it a certain value.

47
00:02:03,186 --> 00:02:05,117
And, a variable for the height,

48
00:02:05,117 --> 00:02:08,331
that I would also initialize
at a certain value.

49
00:02:08,331 --> 00:02:11,705
Next, I could calculate
the area of the rectangle

50
00:02:11,705 --> 00:02:15,668
by passing its width and height
to a function surface (TN : means "area"),

51
00:02:17,568 --> 00:02:20,710
that would do
the right calculation.

52
00:02:20,710 --> 00:02:22,156
We see here

53
00:02:22,156 --> 00:02:24,488
that the data and the processing
of the data

54
00:02:24,488 --> 00:02:26,516
are separated distinctly.

55
00:02:26,516 --> 00:02:30,259
The variables allow me to
represent and store my data.

56
00:02:30,259 --> 00:02:33,968
And the surface function allows me
to process the data.

57
00:02:33,968 --> 00:02:37,019
These two entities are separated
in the program.

58
00:02:37,019 --> 00:02:40,809
But they are linked by
the passing of arguments.

59
00:02:42,799 --> 00:02:44,781
The important objection
that we could make for this program,

60
00:02:44,781 --> 00:02:49,020
is the lack of a semantic link

61
00:02:49,020 --> 00:02:50,638
between the two entities.

62
00:02:50,638 --> 00:02:54,003
For example, the semantic link
between the width and height,

63
00:02:54,003 --> 00:02:56,591
which are in fact the width
and height of a rectangle,

64
00:02:56,591 --> 00:02:58,509
is not very clear.

65
00:02:58,509 --> 00:03:00,906
If I don't speak the language,
I don't understand

66
00:03:00,906 --> 00:03:02,560
what "largeur" and "hauteur"
mean,

67
00:03:02,560 --> 00:03:07,969
it would be very hard for me to see
that these two data are linked

68
00:03:07,969 --> 00:03:11,525
because they both refer to a rectangle.

69
00:03:11,525 --> 00:03:15,406
In the same way, the semantic
link between the data and functions

70
00:03:17,256 --> 00:03:19,338
is hard to see.

71
00:03:19,338 --> 00:03:24,164
For example, imagine that I call
my function, my method

72
00:03:24,164 --> 00:03:26,628
"produit" which is not very explicit,
(TN: "produit" means "product")

73
00:03:26,628 --> 00:03:30,692
and that I am even
less explicit

74
00:03:30,692 --> 00:03:32,403
in the names I
choose for the arguments,

75
00:03:32,403 --> 00:03:34,523
so it is very difficult to see

76
00:03:34,523 --> 00:03:37,209
that I am calculating an area.

77
00:03:37,209 --> 00:03:39,888
So, save for this little explanation,

78
00:03:39,888 --> 00:03:44,113
the semantic link that exists
between the data and the functions,

79
00:03:44,113 --> 00:03:46,940
is relatively obscure in
this program.

80
00:03:46,940 --> 00:03:48,776
Yet this link
does conceptually exist.

81
00:03:48,776 --> 00:03:54,086
It is indeed the notion of rectangle
that I want to manipulate

82
00:03:54,086 --> 00:03:57,542
through its characteristics
width and height.

83
00:03:57,542 --> 00:04:04,104
And it is indeed the surface of this
rectangle that I want to calculate.

84
00:04:04,104 --> 00:04:08,791
So the fact of consolidating into
one unit, a rectangle,

85
00:04:11,731 --> 00:04:15,036
the characteristics of the rectangle,

86
00:04:15,036 --> 00:04:17,783
that is its width and height ,

87
00:04:18,893 --> 00:04:23,010
as well as the functions
associated with it,

88
00:04:23,010 --> 00:04:27,484
will allow me to establish an explicit link
between these different entities.

89
00:04:27,484 --> 00:04:29,406
This idea is fundamental

90
00:04:29,406 --> 00:04:31,862
to object-oriented programming.

91
00:04:31,862 --> 00:04:33,886
What you should know

92
00:04:33,886 --> 00:04:37,189
is that OOP enables a set of

93
00:04:37,189 --> 00:04:45,421
new functionalities, 
globally giving more

94
00:04:45,421 --> 00:04:49,171
robustness, modularity, and readability
to your programs.

95
00:04:49,171 --> 00:04:53,060
All this allows for a better
maintainability

96
00:04:54,510 --> 00:04:57,939
and robustness with regard
to changes to the program.

97
00:04:57,939 --> 00:05:00,351
If it needs to be modified
or expanded one day

98
00:05:00,351 --> 00:05:03,281
we would not want to have
to rewrite the whole code,

99
00:05:03,281 --> 00:05:06,412
because of errors in the 
manipulation of data

100
00:05:06,412 --> 00:05:07,837
for example.

101
00:05:08,997 --> 00:05:12,354
Indeed, today most applications

102
00:05:12,354 --> 00:05:14,049
are never developed from zero,

103
00:05:14,049 --> 00:05:17,452
but consist of adding onto or 
maintaining existing code.

104
00:05:17,452 --> 00:05:20,020
And it is important to be able
to do this at the lowest cost.

105
00:05:20,578 --> 00:05:23,357
We will see that the fundamental
properties of OOP,

106
00:05:23,357 --> 00:05:26,984
that is, more robustness,
modularity, and readability

107
00:05:26,984 --> 00:05:29,121
further this exact purpose.

108
00:05:30,171 --> 00:05:34,415
OOP offers, 
in fact, four principal concepts:

109
00:05:34,415 --> 00:05:38,445
encapsulation, abstraction,
inheritance, and polymorphism

110
00:05:38,445 --> 00:05:40,891
that allow for better
organisation of programs

111
00:05:40,891 --> 00:05:45,300
in regards to robustness,
readability, modularity, and maintainability,

112
00:05:45,300 --> 00:05:46,580
as I said before.

113
00:05:46,580 --> 00:05:49,692
These central concepts are not exclusive
 to one programming language,

114
00:05:49,692 --> 00:05:53,229
but are central ideas of object-
oriented languages in general.

115
00:05:53,229 --> 00:05:55,594
In this episode,
we will

116
00:05:55,594 --> 00:05:59,162
consider defining
encapsulation and abstraction.

117
00:05:59,162 --> 00:06:01,440
We will examine in
the next episodes,

118
00:06:01,440 --> 00:06:05,322
the fundamental notions of 
inheritance and polymorphism.

119
00:06:05,322 --> 00:06:06,936
Encapsulation is consolidating

120
00:06:06,936 --> 00:06:10,065
into one unit or object

121
00:06:13,325 --> 00:06:16,665
the data and the functions that 
that work on the data.

122
00:06:16,665 --> 00:06:18,638
Typically, as in the example 
of the rectangle,

123
00:06:18,638 --> 00:06:21,606
we will regroup into one
unique entitity,

124
00:06:21,606 --> 00:06:26,167
the width and height that characterize
the virtual rectangle

125
00:06:26,167 --> 00:06:31,101
and the function that
calculates its area.

126
00:06:31,101 --> 00:06:33,896
In jargon, we will speak of
the data as

127
00:06:33,896 --> 00:06:37,169
member variables,
or data members

128
00:06:37,169 --> 00:06:40,916
and the functions as methods.

129
00:06:42,216 --> 00:06:44,684
So in OOP,

130
00:06:44,684 --> 00:06:48,460
we will be able to define
new data types,

131
00:06:48,460 --> 00:06:50,413
with the concept of classes.

132
00:06:50,413 --> 00:06:51,963
as we will see later.

133
00:06:51,963 --> 00:06:54,386
These data types can be

134
00:06:54,386 --> 00:07:01,670
used to work with data

135
00:07:01,670 --> 00:07:04,852
whose types are more
abstract, like rectangles.

136
00:07:04,852 --> 00:07:06,701
These data will be objects that will

137
00:07:06,701 --> 00:07:09,997
cohabit and interact in 
the program.

138
00:07:09,997 --> 00:07:12,103
An object-oriented program
will typically work with

139
00:07:12,103 --> 00:07:19,942
objects that are characterized by
their members: data members and methods.

140
00:07:20,762 --> 00:07:23,112
Let's examine now 
the concept of abstraction.

141
00:07:23,112 --> 00:07:25,145
Let's say I want to write 
a program that manipulates

142
00:07:25,145 --> 00:07:26,638
several rectangles

143
00:07:26,638 --> 00:07:27,778
instead of just one.

144
00:07:27,778 --> 00:07:30,578
So in a procedural approach,
I would have to declare

145
00:07:30,578 --> 00:07:36,256
as many widths and heights
as I have rectangles.

146
00:07:38,866 --> 00:07:41,039
So like this for the first rectangle.

147
00:07:41,039 --> 00:07:43,553
And I would have to do
exactly the same thing

148
00:07:43,553 --> 00:07:46,808
for the second rectangle.

149
00:07:50,268 --> 00:07:54,289
This is rather tedious!

150
00:07:54,289 --> 00:07:59,712
In the case that I
have 3-dimensional rectangles

151
00:07:59,712 --> 00:08:02,447
that have not only
a height and width,

152
00:08:02,447 --> 00:08:03,766
but also a a depth,

153
00:08:03,766 --> 00:08:07,502
so I would have 6 variables

154
00:08:07,502 --> 00:08:08,604
to initialize!

155
00:08:08,604 --> 00:08:10,771
For the area calculation for
each rectangle,

156
00:08:10,771 --> 00:08:14,358
I would have to invoke
the area method,

157
00:08:14,358 --> 00:08:20,327
and each time pass
the correct arguments.

158
00:08:30,607 --> 00:08:33,063
We can imagine that
this quickly becomes tireseome!

159
00:08:33,063 --> 00:08:37,794
This can also be a source of errors.
Imagine that I mess up,

160
00:08:37,794 --> 00:08:42,367
and that I calculate the area
with hauteur1 and largeur2.

161
00:08:42,367 --> 00:08:43,737
I loose coherence,

162
00:08:43,737 --> 00:08:47,249
and don't get the right values
for the area of each rectangle.

163
00:08:47,249 --> 00:08:49,350
This mechanism,
the encapsulation process,

164
00:08:49,350 --> 00:08:51,040
results in that I manipulate

165
00:08:51,040 --> 00:08:54,260
rectangles that are

166
00:08:54,260 --> 00:08:59,683
all clones if the same generic
representation of a rectangle,

167
00:08:59,683 --> 00:09:01,663
with a width and height,

168
00:09:01,663 --> 00:09:04,265
and I have a area method that
applies to all of them.

169
00:09:04,265 --> 00:09:07,951
As a result, I can work with higher-level data,
the more abstract notion

170
00:09:07,951 --> 00:09:09,417
of a rectangle.

171
00:09:09,417 --> 00:09:12,759
Encapsulation
will allow me to consolidate

172
00:09:12,759 --> 00:09:14,429
into this virtual rectangle

173
00:09:14,429 --> 00:09:17,403
everything needed to
modelize it.

174
00:09:25,433 --> 00:09:27,881
As a result,  I will be able to 
work with

175
00:09:27,881 --> 00:09:32,685
more abstract entities,

176
00:09:32,685 --> 00:09:35,662
a first rectangle, and a second rectangle,

177
00:09:35,662 --> 00:09:37,956
both of them are of type Rectangle.

178
00:09:37,956 --> 00:09:41,187
And I will invoke calculations of area on 
these rectangles.

179
00:09:41,187 --> 00:09:43,993
We will see that in object-oriented,
I anticipate a little,

180
00:09:43,993 --> 00:09:48,514
I calculate the area of the 
first rectangle.

181
00:09:48,514 --> 00:09:52,205
Later on we will see all this

182
00:09:52,205 --> 00:09:53,862
explicitly in more detail.

183
00:09:53,862 --> 00:10:00,689
As a result, my program will focus on 
the important elements.

184
00:10:00,689 --> 00:10:02,610
Therefore I am no longer
preoccupied with the fact

185
00:10:02,610 --> 00:10:06,150
that a rectangle has
a width and a height,

186
00:10:06,150 --> 00:10:08,133
but I can concentrate on
the essential aspects:

187
00:10:08,133 --> 00:10:13,305
The fact of working with a rectangle, 
and calculating the area of this rectangle.

188
00:10:13,625 --> 00:10:16,304
So when I use a rectangle,
I can only see

189
00:10:16,304 --> 00:10:18,773
what we call in object-oriented 
jargon,

190
00:10:18,773 --> 00:10:21,901
its user interface, that is,
what it can do, its

191
00:10:21,901 --> 00:10:25,039
functions that allow
me to manipulate the rectangle,

192
00:10:25,039 --> 00:10:27,317
like in our case, the
calculation of the area.

193
00:10:28,057 --> 00:10:30,566
Let us compare this 
with an everyday situation.

194
00:10:30,566 --> 00:10:31,913
When you drive your car,

195
00:10:31,913 --> 00:10:33,744
you normally only need to know

196
00:10:33,744 --> 00:10:35,594
the user interface.

197
00:10:35,594 --> 00:10:39,742
You need to know the 
steering wheel, the throttle,

198
00:10:39,742 --> 00:10:41,907
and the brake pedal,
but you never need to know

199
00:10:41,907 --> 00:10:48,089
how the motor was built.

200
00:10:48,089 --> 00:10:49,989
So to drive your car,

201
00:10:49,989 --> 00:10:53,364
you only need to know the 
user interface.

202
00:10:53,364 --> 00:10:56,096
This applies to OOP as well.

203
00:10:56,096 --> 00:10:58,869
To use a new type of object,
a new class,

204
00:10:58,869 --> 00:11:02,598
you only need to know 
the user interface,

205
00:11:02,598 --> 00:11:04,630
that is provided by 
the programmer of the class.

206
00:11:04,630 --> 00:11:08,215
The rest is internal implementation
details that you do not need to know.

207
00:11:08,965 --> 00:11:12,720
So you can look at the object
from two perspectives:

208
00:11:12,720 --> 00:11:16,423
from an external level, 
which is useful for the programmer-user,

209
00:11:16,423 --> 00:11:22,429
which uses the notion of rectangle
in a program.

210
00:11:22,429 --> 00:11:24,693
From now in a program the
type Rectangle exists.

211
00:11:24,693 --> 00:11:27,401
I can declare variables of type Rectangle,

212
00:11:27,401 --> 00:11:29,148
and initialize them appropriately.

213
00:11:29,148 --> 00:11:32,383
Next, that which interests me 
as a programmer-user,

214
00:11:32,383 --> 00:11:36,534
are the useful functions that come
with the class: the calculation of area.

215
00:11:36,534 --> 00:11:42,959
So this external view is the perspective
that interests the programmer-user

216
00:11:42,959 --> 00:11:45,991
and that uses the type Rectangle

217
00:11:45,991 --> 00:11:50,829
The second perspective is the internal.
The programmer of the new type,

218
00:11:50,829 --> 00:11:56,023
the Rectangle type, had to deal with all 
the details of implementation.

219
00:11:56,023 --> 00:12:00,109
That is, that a rectangle
has a length and width.

220
00:12:00,109 --> 00:12:04,804
He had to define explicitly 
how the area is calculated.

221
00:12:04,804 --> 00:12:09,105
This constitutes the 
implementation

222
00:12:09,105 --> 00:12:11,145
at an internal level,
which not necessarily useful

223
00:12:11,145 --> 00:12:14,955
for the user of this type.

224
00:12:14,955 --> 00:12:18,865
So in object-oriented programming, we do
not only have the possibility to regroup


225
00:12:18,865 --> 00:12:22,924
into one same entity the 
data and functions, 

226
00:12:22,924 --> 00:12:26,586
but we can also define 
levels of visibility.

227
00:12:26,586 --> 00:12:29,837
The person who programs 
the type Rectangle,

228
00:12:29,837 --> 00:12:31,782
specifically the class Rectangle,

229
00:12:31,782 --> 00:12:35,370
will be able to say : 
" This is an implementation detail

230
00:12:35,370 --> 00:12:39,484
that will not be accessible to 
external users."

231
00:12:39,484 --> 00:12:43,623
and "This is a function that we want to 
provide for the external user

232
00:12:43,623 --> 00:12:47,979
and therefore will be accessible 
to this user."

233
00:12:47,979 --> 00:12:53,261
Everything accessible to the user and, 
therefore, visible

234
00:12:54,511 --> 00:12:58,823
constitutes what is called 
the user interface

235
00:12:58,823 --> 00:13:00,328
of the class of the type in question.

236
00:13:00,328 --> 00:13:05,755
Here, in our class Rectangle, 
for the new type Rectangle

237
00:13:05,755 --> 00:13:08,507
we have defined 
as user interface

238
00:13:08,507 --> 00:13:13,258
the calculation of the surface,
the rest constituting the

239
00:13:13,258 --> 00:13:17,791
implementation details that are inaccessible
to the user of the type Rectangle.

240
00:13:17,791 --> 00:13:21,180
Here we have the key that gives

241
00:13:21,180 --> 00:13:24,620
the program more robustness
if they changes are made to them.

242
00:13:24,620 --> 00:13:27,222
Usually, when you change car

243
00:13:27,222 --> 00:13:29,088
even if the motor technology is different,

244
00:13:29,088 --> 00:13:31,275
the interface is more or less the same.

245
00:13:31,275 --> 00:13:34,434
You will still be able to drive,

246
00:13:34,434 --> 00:13:37,932
even if the internal details of
implementation of your car

247
00:13:37,932 --> 00:13:39,745
have changed.

248
00:13:39,745 --> 00:13:44,075
So you only see your car
as an abstract object.

249
00:13:44,075 --> 00:13:46,129
You only see that

250
00:13:46,129 --> 00:13:48,910
which you use to drive,

251
00:13:48,910 --> 00:13:50,751
namely, the steering wheel, 
the throttle, the break peddle.

252
00:13:50,751 --> 00:13:52,800
In summary, encapsulation,

253
00:13:52,800 --> 00:13:55,727
is consolidating into one same entity

254
00:13:55,727 --> 00:13:56,956
the data and functions that 
characterize it.

255
00:13:56,956 --> 00:13:59,718
And it is also the fact of concealing the
implementation details,

256
00:13:59,718 --> 00:14:04,026
and defining a user interface of the class

257
00:14:04,026 --> 00:14:08,646
with the encapsulation mechanism,

258
00:14:08,646 --> 00:14:11,411
that will result in abstraction,

259
00:14:11,411 --> 00:14:13,053
and an abstract perspective
of the object.

260
00:14:13,053 --> 00:14:17,507
We will only what the object
has to offer in its user interface,

261
00:14:17,507 --> 00:14:20,404
and what manipulations
are possible.

262
00:14:20,404 --> 00:14:25,014
So concretely the class programmer
will decide

263
00:14:25,014 --> 00:14:28,218
on the existence of a new type,

264
00:14:28,218 --> 00:14:34,801
and will have to address 
the implementation details.

265
00:14:35,161 --> 00:14:41,758
He will have to decide what is visible 
to the outside world,

266
00:14:41,758 --> 00:14:46,468
what can and cannot 
be used.

267
00:14:46,468 --> 00:14:48,932
The class user, 
on his side, uses

268
00:14:48,932 --> 00:14:54,203
the new data type.

269
00:14:54,203 --> 00:15:00,078
But he will have to use it 
through the interface.

270
00:15:00,078 --> 00:15:05,369
That is to say, its visible methods

271
00:15:05,369 --> 00:15:06,712
in most cases.

272
00:15:07,902 --> 00:15:11,130
He will not have access to the 
internal details.

273
00:15:11,130 --> 00:15:16,299
The user interface is typically, 
that which will enable

274
00:15:16,299 --> 00:15:19,408
a link to be established between 
the program developer and the user.

275
00:15:19,408 --> 00:15:22,878
And in a very specific way

276
00:15:22,878 --> 00:15:28,108
this interface will be able to 
be completely described by the labels

277
00:15:28,108 --> 00:15:30,242
of the methods available to the 
user.

278
00:15:30,462 --> 00:15:33,282
So one of the principal advantages 
of abstracting and encapsulating

279
00:15:33,282 --> 00:15:37,555
is to give better visiblity and coherence 
of the program.

280
00:15:37,555 --> 00:15:41,201
Compare a procedural approach
where I manipulate very low-level data,

281
00:15:41,201 --> 00:15:43,907
with the object-oriented approach

282
00:15:43,907 --> 00:15:47,085
which you will soon be able
to code yourself.

283
00:15:47,085 --> 00:15:50,149
here I expressly manipulate a rectangle,

284
00:15:50,149 --> 00:15:52,708
as opposed to here,
where

285
00:15:52,708 --> 00:15:54,138
this notion isn't clear.

286
00:15:54,138 --> 00:15:59,850
 I establish the semantic
link between the rectangle and the area,

287
00:15:59,850 --> 00:16:04,219
while here, this link is established
very indirectly.

288
00:16:04,219 --> 00:16:08,248
So, the first advantage is
more clarity, better coherence.

289
00:16:08,248 --> 00:16:10,917
Also, in this case,
because the class user

290
00:16:10,917 --> 00:16:14,049
can only use the notion
of rectangle

291
00:16:14,049 --> 00:16:16,166
through the user interface

292
00:16:16,166 --> 00:16:19,418
provided by the class programmer,

293
00:16:19,418 --> 00:16:22,116
it is possible for the class programmer

294
00:16:22,116 --> 00:16:23,689
to modify the class implementation

295
00:16:23,689 --> 00:16:26,945
without impacting
the user.

296
00:16:26,945 --> 00:16:30,262
If the class programmer

297
00:16:30,262 --> 00:16:33,887
decides to change how
he first implemented Rectangle,

298
00:16:33,887 --> 00:16:37,440
that represented the height and
width

299
00:16:37,440 --> 00:16:39,956
with two doubles,

300
00:16:41,626 --> 00:16:43,793
and decides to use instead

301
00:16:43,793 --> 00:16:46,400
an array,

302
00:16:49,830 --> 00:16:53,648
then he simply needs to adapt
the method to calculate the area

303
00:16:53,648 --> 00:16:57,940
to this new data structure,
and the user

304
00:16:57,940 --> 00:16:59,463
will not be affected at all.

305
00:16:59,463 --> 00:17:02,027
Separating in two,
the internal level:

306
00:17:02,027 --> 00:17:05,278
the implementation details, and
the external user interface

307
00:17:05,278 --> 00:17:07,888
assures more rigorous
usage framework.

308
00:17:07,888 --> 00:17:11,036
Any modification to the internal structure

309
00:17:11,036 --> 00:17:13,613
are invisible externally.

310
00:17:13,613 --> 00:17:15,746
A rule generally respected

311
00:17:15,746 --> 00:17:17,508
by most object-oriented
programmers follows from this.

312
00:17:17,508 --> 00:17:20,590
Data members require
technical choices to be made

313
00:17:20,590 --> 00:17:23,459
so that they can be used
in the implementation,

314
00:17:23,459 --> 00:17:25,237
like choosing their type.

315
00:17:25,237 --> 00:17:29,126
They will therefore be considered
in most cases as implementation details,

316
00:17:29,126 --> 00:17:32,075
and will not be accessible

317
00:17:32,075 --> 00:17:34,324
from outside the class.

318
00:17:35,434 --> 00:17:38,190
In summary, in order to define
a new type of object

319
00:17:38,190 --> 00:17:42,519
with a class, we will have to define its
characteristic attributes or data members

320
00:17:42,519 --> 00:17:46,589
as well as the methods that
go with it.

321
00:17:46,589 --> 00:17:50,624
And we will have to determine concretely
what will be visible

322
00:17:50,624 --> 00:17:51,883
in the user interface

323
00:17:51,883 --> 00:17:54,275
and what is not: the
implemenation details.

324
00:17:54,275 --> 00:17:57,468
So once we have decided
what to hide,

325
00:17:57,468 --> 00:18:00,392
the external user
will only have an abstract view

326
00:18:00,392 --> 00:18:03,095
of this object

327
00:18:03,095 --> 00:18:05,000
through the user interface,

328
00:18:05,000 --> 00:18:07,995
and will only see that with a
rectangle, you can calculate its area.

329
00:18:07,995 --> 00:18:12,035
And if I want to follow good
OOP rules,

330
00:18:12,035 --> 00:18:14,037
I will consider that the data
members are also implementation details,

331
00:18:14,037 --> 00:18:16,880
like I said before.

332
00:18:16,880 --> 00:18:22,189
Thus the interface will be limited to
a certain number of well-chosen methods.

333
00:18:22,189 --> 00:18:25,830
The external user's vision
of the object

334
00:18:25,830 --> 00:18:28,599
will be restricted to the user interface.

335
00:18:28,599 --> 00:18:32,522
What to remember from today's episode:

336
00:18:32,522 --> 00:18:35,217
abstraction results in what is called a class,

337
00:18:41,507 --> 00:18:44,533
which allows me to 
define a category of objects.

338
00:18:44,533 --> 00:18:49,873
A class will define a new type in a program.

339
00:18:49,873 --> 00:18:57,253
I now have the type Rectangle
that I can manipulate in a program like this:

340
00:18:57,253 --> 00:19:01,697
I can declare variables of this type,

341
00:19:01,697 --> 00:19:05,634
which are actual realizations of this 
type. So the declaration of a variable

342
00:19:05,634 --> 00:19:11,697
of this type, is what is called in
object-oriented jargon, an object.

343
00:19:11,697 --> 00:19:14,906
It is generally manipulated 
with a variable.

344
00:19:15,446 --> 00:19:17,273
To summarize and illustrate
these remarks

345
00:19:17,273 --> 00:19:21,317
the person who writes the class
Rectangle conceptually

346
00:19:21,317 --> 00:19:22,510
creates a new type.

347
00:19:22,510 --> 00:19:25,767
He will do this of course 
by writing a program

348
00:19:25,767 --> 00:19:27,152
that contains the code 
of the class Rectangle.

349
00:19:27,152 --> 00:19:30,577
The user of this class 
will use the new type,

350
00:19:30,577 --> 00:19:32,854
by declaring variables 
of type Rectangle

351
00:19:32,854 --> 00:19:35,630
that will only come into real existence

352
00:19:35,630 --> 00:19:37,138
at the execution of the program.

353
00:19:37,138 --> 00:19:39,573
So the moment the new objects 
of this type are created,

354
00:19:39,573 --> 00:19:42,344
we will be able to start working

355
00:19:42,344 --> 00:19:43,874
with these objects in the program.

356
00:19:43,874 --> 00:19:47,172
So the user will work with
specific concretizations

357
00:19:47,172 --> 00:19:51,027
of objects of class Rectangle.

358
00:19:51,027 --> 00:19:53,038
We've come to the 
end of this presentation

359
00:19:53,038 --> 00:19:55,529
of two fundamental aspects 
of object-oriented programming :

360
00:19:55,529 --> 00:19:57,639
encapsulation and abstraction.

361
00:19:57,639 --> 00:19:59,673
You will, in the next episodes,

362
00:19:59,673 --> 00:20:03,510
start to put in practice 
these concepts in Java.
