1
00:00:04,174 --> 00:00:05,699
In the last episodes, you learned

2
00:00:05,699 --> 00:00:07,806
how to write a class in Java.

3
00:00:08,085 --> 00:00:10,104
Now you know how to define 
data members and methods,

4
00:00:10,412 --> 00:00:11,798
and you know how to implement different

5
00:00:11,798 --> 00:00:14,607
aspects of encapsulation,

6
00:00:14,607 --> 00:00:18,000
such as defining what
is publicly accessible,

7
00:00:18,020 --> 00:00:19,296
and what is inaccessible.

8
00:00:19,296 --> 00:00:22,329
In this lesson, we will anchor
these notions with some examples.

9
00:00:22,329 --> 00:00:25,641
And we will see that encapsulating
properly requires taking

10
00:00:25,641 --> 00:00:26,941
a certain number of measures.

11
00:00:27,827 --> 00:00:30,202
At this stage, defining
a class in a program

12
00:00:30,202 --> 00:00:33,659
implies defining a new type that is
characterized by data members and methods.

13
00:00:33,667 --> 00:00:37,832
In order to encapsulate this class you'll have 
to define everything that constitutes

14
00:00:37,832 --> 00:00:40,070
the implementation details
as private, and everything

15
00:00:40,070 --> 00:00:42,712
that is part of the user interface
for external access

16
00:00:42,712 --> 00:00:45,200
as public.

17
00:00:45,670 --> 00:00:47,603
It is important to examine
how this is enacted through

18
00:00:47,603 --> 00:00:49,387
a real example, and this is

19
00:00:49,387 --> 00:00:51,908
the goal of this video.

20
00:00:52,386 --> 00:00:54,444
If we want a program

21
00:00:54,444 --> 00:00:56,194
to be able to work with the notion of rectangle,

22
00:00:56,194 --> 00:01:00,056
the first thing to do is to
is to define a class Rectangle

23
00:01:00,095 --> 00:01:02,901
by defining its properties
with data members,

24
00:01:02,901 --> 00:01:05,091
and its abilities with
its own methods.

25
00:01:05,091 --> 00:01:08,421
Another thing to do is to decide what
will go into the user interface,

26
00:01:08,942 --> 00:01:12,172
 and what will constitute the
hidden implementation details.

27
00:01:12,734 --> 00:01:16,200
So here is one possible
implementation of the class Rectangle

28
00:01:16,200 --> 00:01:18,948
that was our introductory example.

29
00:01:19,048 --> 00:01:21,883
To define a class, we use

30
00:01:21,883 --> 00:01:23,932
the special keyword "class",

31
00:01:23,932 --> 00:01:26,684
followed by the name
that we chose for our class,

32
00:01:26,684 --> 00:01:30,110
with the convention in Java,
that the class name is capitalized.

33
00:01:30,110 --> 00:01:34,229
Then, we defined

34
00:01:34,229 --> 00:01:37,629
some data members
specific to the class,

35
00:01:37,629 --> 00:01:39,325
as well as some methods.

36
00:01:41,113 --> 00:01:43,635
We implemented
some aspects of encapsulation

37
00:01:44,252 --> 00:01:47,136
by deciding what constituted
the implementation details,

38
00:01:47,354 --> 00:01:52,764
typically the data members,
and what constituted the interface,

39
00:01:52,884 --> 00:01:56,455
that the external user can use

40
00:01:56,538 --> 00:01:59,370
that we specified using
the keyword "public".

41
00:02:00,911 --> 00:02:02,635
This class Rectangle right here

42
00:02:02,635 --> 00:02:05,301
will provide a number
of functionalities 

43
00:02:05,301 --> 00:02:10,581
that allow the user to access the
data members of an rectangle,

44
00:02:10,607 --> 00:02:15,178
modify its values,
and calculate its area.

45
00:02:16,069 --> 00:02:19,093
Note that it is
generally not necessary

46
00:02:19,093 --> 00:02:23,423
to systematically define get/set methods
for each of the class data fields.

47
00:02:23,536 --> 00:02:28,303
Here we defined them because
at this stage of the course,

48
00:02:28,303 --> 00:02:30,864
we only know how to interact
with a class rudimentarily.

49
00:02:30,864 --> 00:02:34,016
We have tried here to respect the
guidelines for encapsulation,

50
00:02:34,616 --> 00:02:38,183
which means that only
allow the user access

51
00:02:38,407 --> 00:02:40,921
to the class functionalities
through the interface.

52
00:02:41,036 --> 00:02:44,205
This means that
the class programmer

53
00:02:44,205 --> 00:02:45,782
has the freedom to modify

54
00:02:45,782 --> 00:02:49,307
the implementation details.

55
00:02:49,307 --> 00:02:55,867
Here I can decide to change how
the rectangle is represented,

56
00:02:55,867 --> 00:02:58,867
for example using an array with
2 doubles to store

57
00:02:59,661 --> 00:03:03,952
the height and width.
And in this case, it's my job,

58
00:03:03,952 --> 00:03:07,946
as class programmer to
adapt the class methods.

59
00:03:07,946 --> 00:03:11,207
For instance, instead of returning
"hauteur", I would return "dims[0]".

60
00:03:11,207 --> 00:03:17,817
It's my responsibility to
adapt the methods so that

61
00:03:17,860 --> 00:03:21,628
the user can continue using
the class without being effected.

62
00:03:21,628 --> 00:03:25,335
He can continue using
getHauteur, setHauteur,

63
00:03:25,335 --> 00:03:28,922
and surface without even
knowing that I had made

64
00:03:28,922 --> 00:03:30,608
internal modifications to the class.

65
00:03:30,608 --> 00:03:33,980
And because the user is
forced to use

66
00:03:33,980 --> 00:03:36,003
these predefined methods,

67
00:03:36,003 --> 00:03:39,675
to manipulate an object, a certain
number of measures implemented

68
00:03:39,675 --> 00:03:42,683
in these methods can prevent
the user from incorrectly

69
00:03:42,683 --> 00:03:45,502
manipulating the object
and its contents.

70
00:03:45,502 --> 00:03:48,932
So do you see how the class
can be improved in this aspect?

71
00:03:49,827 --> 00:03:52,357
Here you have the code

72
00:03:50,487 --> 00:03:55,294
of the class programmer of Rectangle,

73
00:03:55,294 --> 00:03:58,302
who conceived this
new data type.

74
00:03:58,302 --> 00:04:01,084
Let's see what happens on
the user's side.

75
00:04:01,084 --> 00:04:03,451
The user can be the same person who
coded the class Rectangle,

76
00:04:03,451 --> 00:04:04,821
but not necessarily.

77
00:04:04,907 --> 00:04:07,571
The code that you have here,

78
00:04:07,571 --> 00:04:09,813
is the implementation of
a class "Geometrie"

79
00:04:09,813 --> 00:04:12,049
that uses the type Rectangle

80
00:04:12,049 --> 00:04:14,801
of the class Rectangle
that was just defined.

81
00:04:14,801 --> 00:04:18,097
This means that Geometrie can use
this type just like any other type.

82
00:04:18,097 --> 00:04:22,337
So here I can declare a variable
rect of type Rectangle.

83
00:04:22,428 --> 00:04:25,913
This declaration follows the same
syntax as declarations

84
00:04:25,913 --> 00:04:28,602
of variables of normal types.

85
00:04:28,602 --> 00:04:31,767
We also saw,
at this stage of the course,

86
00:04:31,767 --> 00:04:35,306
that to initialize an object,

87
00:04:35,306 --> 00:04:37,427
you had to use an
expression like this in Java.

88
00:04:37,427 --> 00:04:40,388
We will learn what this means
in the next episode.

89
00:04:40,388 --> 00:04:42,555
For right now, it's unavoidable.

90
00:04:42,555 --> 00:04:45,711
When this line is
executed,

91
00:04:45,711 --> 00:04:49,223
we will have this situation
in the memory.

92
00:04:49,223 --> 00:04:53,289
We have a variable called rect

93
00:04:53,289 --> 00:04:57,476
that contains a reference or address
to an object of type Rectangle

94
00:04:57,476 --> 00:05:01,604
that has 2 fields:
one for the width

95
00:05:01,604 --> 00:05:03,756
and one for the height.

96
00:05:03,756 --> 00:05:06,647
Of course, the first thing we want

97
00:05:06,647 --> 00:05:08,626
to do here is initialize these fields
that are right now set at 0

98
00:05:08,626 --> 00:05:12,210
to particular values.

99
00:05:12,210 --> 00:05:15,219
This can be done by
asking the user

100
00:05:15,219 --> 00:05:17,797
to enter some values for
the width and height

101
00:05:17,797 --> 00:05:20,925
on the keyboard.

102
00:05:22,645 --> 00:05:24,941
Once the user has
introduced a value for the height,

103
00:05:24,941 --> 00:05:30,931
we can put this value into
"hauteur" of the object rect

104
00:05:31,901 --> 00:05:36,321
with the method setHauteur.

105
00:05:36,498 --> 00:05:39,529
We use this notation

106
00:05:39,529 --> 00:05:43,639
which means that we invoke the
method "setHauteur" on the object rect

107
00:05:44,615 --> 00:05:48,449
to set its value.
Imagine that the user enters

108
00:05:48,449 --> 00:05:52,549
the value 5.0, which leads to
this situation.

109
00:05:53,308 --> 00:05:57,343
The same goes for these lines
that initialize

110
00:05:57,343 --> 00:05:58,883
the width of the rectangle.

111
00:05:59,826 --> 00:06:03,060
Now we have an object
properly initialized.

112
00:06:03,060 --> 00:06:06,539
Now we can use other
functionalities of the class Rectangle

113
00:06:06,539 --> 00:06:09,105
for example, to compute
the area.

114
00:06:09,105 --> 00:06:12,066
We use the dot operator again like
this to compute the

115
00:06:12,066 --> 00:06:16,886
area of the rectangle
that have just declared and initialized.
