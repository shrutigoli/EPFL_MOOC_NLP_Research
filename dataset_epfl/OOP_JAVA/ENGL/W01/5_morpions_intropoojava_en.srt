1
00:00:04,288 --> 00:00:07,620
A well thought-out user interface of
a class is key to a good design

2
00:00:07,620 --> 00:00:12,069
of an object-oriented program.

3
00:00:12,069 --> 00:00:16,064
Indeed, a poorly-designed interface that
gives the user too much access

4
00:00:16,064 --> 00:00:20,063
to implementation details can be just as
risky as leaving data members public.

5
00:00:20,063 --> 00:00:22,672
In this video we will compare
two possible interfaces for a class.

6
00:00:22,672 --> 00:00:26,285
In the first interface, the
functionalities are too low-level

7
00:00:26,285 --> 00:00:28,917
and reveal to the outside user

8
00:00:28,917 --> 00:00:31,019
implementation details of the class.

9
00:00:31,019 --> 00:00:32,961
While in the second interface,

10
00:00:32,961 --> 00:00:35,535
only indispensable functionalities
are provided.

11
00:00:35,535 --> 00:00:37,113
We will see, of course, that
the second option

12
00:00:37,113 --> 00:00:41,320
is much better than the first one.

13
00:00:41,320 --> 00:00:43,619
So we want to program a class
that allows us to play

14
00:00:43,619 --> 00:00:47,580
a game of tic-tac-toe.
(TN: "jeu du morpion" means "tic-tac-toe")

15
00:00:47,580 --> 00:00:54,267
As a reminder, it is a game for two
players played on a 3 by 3 grid,

16
00:00:54,267 --> 00:00:59,112
with the first player placing Os while
the other player playing Xs.

17
00:00:59,112 --> 00:01:03,241
The 2 players take turns and
try to

18
00:01:03,241 --> 00:01:08,108
get three of their pieces in a row

19
00:01:08,108 --> 00:01:09,450
either across, diagonally,
or vertically.

20
00:01:09,800 --> 00:01:13,535
In this first version of
the class "JeuMorpion",

21
00:01:13,535 --> 00:01:16,387
the programmer has a
minimalist vision of what

22
00:01:16,387 --> 00:01:18,636
functionalities he offers
to the outside world.

23
00:01:18,636 --> 00:01:21,365
When he designed the class, he looked
at what characteristics it had,

24
00:01:21,365 --> 00:01:23,704
so he said to himself that
logically he needed a grid,

25
00:01:23,704 --> 00:01:27,061
then for the class functionalities,
he provides the external user

26
00:01:27,061 --> 00:01:30,462
a public initialization method to be

27
00:01:30,462 --> 00:01:33,334
able to start with an empty grid
in order to start playing.

28
00:01:33,334 --> 00:01:35,456
He also provides a function

29
00:01:35,456 --> 00:01:38,398
that gives access to the grid
in order to place tokens

30
00:01:38,398 --> 00:01:41,512
on it from outside the class,

31
00:01:41,512 --> 00:01:44,120
such as red Os and blue Xs.

32
00:01:44,120 --> 00:01:47,179
Let's examine more closely
how the programmer

33
00:01:47,179 --> 00:01:49,883
implemented this class JeuMorpion

34
00:01:49,883 --> 00:01:53,565
and how he represented
for example the grid.

35
00:01:53,565 --> 00:01:57,606
Here, we see that he uses
a one-dimensional array.

36
00:01:57,606 --> 00:02:01,269
This is a possible, but perhaps not
a very conventional choice.

37
00:02:01,269 --> 00:02:06,881
So in this modelization,
a grid is actually an object

38
00:02:06,881 --> 00:02:12,206
with a reference

39
00:02:12,206 --> 00:02:14,286
to a one-dimensional array.

40
00:02:14,286 --> 00:02:16,746
So here, imagine for example

41
00:02:16,746 --> 00:02:18,769
that we use the first 3 positions
of the array for the first line,

42
00:02:18,769 --> 00:02:20,752
the next 3, for the second line,

43
00:02:20,752 --> 00:02:24,585
and the last 3 positions for
the last line of the grid.

44
00:02:25,734 --> 00:02:29,788
The method to initialize the grid

45
00:02:29,788 --> 00:02:34,264
creates an array with the default

46
00:02:35,064 --> 00:02:36,485
values being zeros in each slot.

47
00:02:36,485 --> 00:02:39,226
So everywhere we have zeros.

48
00:02:39,226 --> 00:02:42,599
The class programmer made
the effort to declare the

49
00:02:42,599 --> 00:02:46,039
data member "grille" private, as he
should have, which means that the

50
00:02:46,039 --> 00:02:50,950
external user of the class
cannot directly access this field.

51
00:02:50,950 --> 00:02:54,435
So if outside the class,

52
00:02:54,435 --> 00:02:58,499
we declare an instance of JeuMorpion
called "jeu", we will not be able

53
00:02:58,499 --> 00:03:01,466
to directly access the grid
with this notation.

54
00:03:01,466 --> 00:03:03,955
However, he provides
the method getGrille,

55
00:03:03,955 --> 00:03:06,344
because the user needs to interact
with this grid

56
00:03:06,344 --> 00:03:07,915
in order to fill it.

57
00:03:07,915 --> 00:03:14,162
For example, the user can declare

58
00:03:14,162 --> 00:03:17,877
a one-dimensional array
that will be the grid

59
00:03:17,877 --> 00:03:20,612
he will play on,

60
00:03:20,612 --> 00:03:22,267
and assign it

61
00:03:25,637 --> 00:03:29,562
what is returned by getGrille,
that is, a reference to

62
00:03:29,562 --> 00:03:32,627
the array representing the
tic-tac-toe grid.

63
00:03:32,627 --> 00:03:34,531
We will see that through
mechanism,

64
00:03:34,531 --> 00:03:37,295
the user will be able to
do manipulations

65
00:03:37,295 --> 00:03:39,050
that are unwanted.

66
00:03:39,380 --> 00:03:42,786
So want can the user do?

67
00:03:42,786 --> 00:03:44,847
So like we said before,

68
00:03:44,847 --> 00:03:49,848
he can declare and use a
variable of type JeuMorpion,

69
00:03:49,848 --> 00:03:53,250
and he will then use
available functionalities

70
00:03:53,250 --> 00:03:58,171
to manipulate this variable jeu.

71
00:03:58,171 --> 00:04:02,228
Imagine that he wants

72
00:04:02,228 --> 00:04:05,188
to place an O on a particular
box.

73
00:04:05,188 --> 00:04:07,928
One of the first things he will do

74
00:04:07,928 --> 00:04:11,375
is to decide what conventions
he will use to fill the grid.

75
00:04:11,375 --> 00:04:14,380
For example, for him, 1 means that
there is an O in that box,

76
00:04:14,380 --> 00:04:19,638
and 2 means that an X
is in that position, with

77
00:04:19,638 --> 00:04:24,119
0 meaning the slot
is empty.

78
00:04:24,119 --> 00:04:26,909
If the user wants to put an O
in the first position of the grid,

79
00:04:26,909 --> 00:04:31,408
he will have to access
the variable "grille"

80
00:04:34,488 --> 00:04:36,177
through the method getGrille

81
00:04:36,177 --> 00:04:39,986
and use this reference to the grid
to put the right value.

82
00:04:39,986 --> 00:04:45,870
So he has to know that
getGrille give him access to the grid

83
00:04:45,870 --> 00:04:48,219
as implemented in the
class JeuMorpion,

84
00:04:48,219 --> 00:04:54,411
and that the first 3 positions
represent the first line of the grid

85
00:04:54,411 --> 00:04:58,387
and following his conventions, he
will place an O in the right place by

86
00:04:58,387 --> 00:05:03,218
putting the value 1 in the
first position of the array.

87
00:05:03,218 --> 00:05:10,054
So the idea is we access
the grid,

88
00:05:10,054 --> 00:05:12,794
and we assign the value 1
to the first position.

89
00:05:12,794 --> 00:05:17,634
By using these functionalities
and accessing the grid,

90
00:05:17,634 --> 00:05:20,444
indirectly through a method,

91
00:05:20,444 --> 00:05:24,332
the user can perfectly achieve

92
00:05:24,332 --> 00:05:26,632
a playable game of
tic-tac-toe.

93
00:05:26,632 --> 00:05:29,336
But it is his job to enforce the
game's rules,

94
00:05:29,336 --> 00:05:31,964
take turns with another
player,

95
00:05:31,964 --> 00:05:34,232
and to place the tokens
at the right locations.

96
00:05:34,232 --> 00:05:36,611
So if he is careful enough,

97
00:05:36,611 --> 00:05:39,521
he will be able to
play a real game of tic-tac-toe.

98
00:05:39,521 --> 00:05:41,631
However, if we examine
this setup more carefully,

99
00:05:41,631 --> 00:05:44,721
we will see that this approach
is fundamentally flawed.

100
00:05:45,631 --> 00:05:49,380
For example the user
of this class JeuMorpion

101
00:05:49,380 --> 00:05:52,612
cannot use it at all without
knowing the class's internal

102
00:05:52,612 --> 00:05:55,146
implementation details.

103
00:05:55,146 --> 00:05:58,733
He has to know under
what form and with what conventions

104
00:05:58,733 --> 00:06:02,105
the representation of the grid is stored,
for in this case a 1D integer array with

105
00:06:02,105 --> 00:06:06,975
each 3 positions representing
a line.

106
00:06:06,975 --> 00:06:10,727
He will also have to adopt some
arbitrary conventions of his own

107
00:06:10,727 --> 00:06:14,533
such as that  "1" represents an "O",
and "2" an "X".

108
00:06:14,533 --> 00:06:18,263
The user has to know
meticulous implementation details.

109
00:06:19,783 --> 00:06:23,372
Furthermore, the resulting code

110
00:06:23,372 --> 00:06:26,059
of the class "JeuMorpion" is
completely opaque.

111
00:06:26,059 --> 00:06:29,211
This line is incomprehensible
like this

112
00:06:29,211 --> 00:06:30,801
to anyone who reads it.

113
00:06:30,801 --> 00:06:34,335
What does an "0" mean?
What does a "1" mean?

114
00:06:34,335 --> 00:06:38,321
This line can only be
understood by looking

115
00:06:38,321 --> 00:06:41,124
inside the class "JeuMorpion".

116
00:06:41,124 --> 00:06:44,385
And what will happen
if the class programmer

117
00:06:44,385 --> 00:06:46,828
decides to change his
implementation choices?

118
00:06:46,828 --> 00:06:49,701
If he uses a 2-dimensional
array

119
00:06:49,701 --> 00:06:51,085
instead of a 1-dimensional array

120
00:06:51,085 --> 00:06:54,624
(which was granted not
very intuitive),

121
00:06:54,624 --> 00:06:59,072
this line of code would have
to be rewritten like this.

122
00:06:59,072 --> 00:07:02,820
So the class user

123
00:07:02,820 --> 00:07:08,938
would also have to modify his code
to concord with that of the class JeuMorpion

124
00:07:09,298 --> 00:07:11,803
and if he had written
many similar lines,

125
00:07:11,803 --> 00:07:15,963
well then he would have to
revise all of them.

126
00:07:15,963 --> 00:07:19,283
Lastly, a very important and serious
point: the class programmer

127
00:07:19,283 --> 00:07:23,791
provides an access to the

128
00:07:23,791 --> 00:07:26,018
reference of the grid.

129
00:07:26,018 --> 00:07:29,505
Which means that by using
this functionality,

130
00:07:29,505 --> 00:07:32,363
it is possible for the user

131
00:07:32,363 --> 00:07:38,724
to access the reference of grille
which allows him

132
00:07:38,724 --> 00:07:43,069
to access the array itself and
modify its contents however he wishes.

133
00:07:43,069 --> 00:07:46,651
So even if the class programmer
took the precaution to

134
00:07:46,651 --> 00:07:49,584
declare the data member
grille private,

135
00:07:49,584 --> 00:07:52,507
which prevents this type of manipulation,

136
00:07:52,837 --> 00:07:55,452
the exact same thing can be done,
in a more indirect manner,

137
00:07:55,452 --> 00:07:58,851
through the method getGrille
that he chose to provide.

138
00:08:01,301 --> 00:08:04,341
So accessing grille through
the method getGrille

139
00:08:04,341 --> 00:08:09,207
comes to the same thing as
leaving grille public.

140
00:08:09,207 --> 00:08:11,620
More generally, when
a data member is an object,

141
00:08:11,620 --> 00:08:13,413
like grille in this case,

142
00:08:13,413 --> 00:08:16,217
providing an access to the
object's reference via a getter

143
00:08:16,217 --> 00:08:17,971
just as in this case,

144
00:08:17,971 --> 00:08:21,826
comes to exactly the same thing as giving
direct, public access to the data member,

145
00:08:21,826 --> 00:08:25,690
because the object can be
manipulated through the given reference

146
00:08:25,690 --> 00:08:28,791
This unanticipated access
given through the reference

147
00:08:28,791 --> 00:08:30,708
to the grid can result in all
kinds of disasterous consequences.

148
00:08:30,708 --> 00:08:34,226
For example, the user can
inadvertently enter the wrong

149
00:08:34,226 --> 00:08:37,661
index for the grid and do this
kind of thing.

150
00:08:39,261 --> 00:08:42,041
At this point, the program
would stop abruptly

151
00:08:42,041 --> 00:08:46,833
and send back an error message
relatively hard to decrypt.

152
00:08:46,833 --> 00:08:49,710
This access can through the reference
also allows the user

153
00:08:49,710 --> 00:08:53,060
to enter all sorts of ficticious values
in the grid.

154
00:08:53,060 --> 00:08:54,694
Such as instead of putting a 1,

155
00:08:54,694 --> 00:08:57,518
he puts 42 or another value,

156
00:08:57,518 --> 00:09:00,184
which he can do because
the value is verified intermediately.

157
00:09:00,184 --> 00:09:04,334
So imagine that the user
also programs

158
00:09:05,164 --> 00:09:08,534
a method getJoueurGagnant
that goes through the grid

159
00:09:08,534 --> 00:09:11,336
to determine if there  is a winner
with 3 pieces in a row.

160
00:09:11,336 --> 00:09:15,529
This method getJoueurGagnant
expects the values 0, 1, and 2 in the grid,

161
00:09:16,029 --> 00:09:19,236
and if it finds a value 42,
it will not know what to do

162
00:09:19,236 --> 00:09:22,126
and will behave incorrectly.

163
00:09:22,126 --> 00:09:24,455
Last of all, if the user
desires to cheat,

164
00:09:24,455 --> 00:09:26,784
and replace an O with an X,

165
00:09:26,784 --> 00:09:29,113
(a move that is normally forbidden,
because once a token is placed,


166
00:09:29,113 --> 00:09:31,169
it cannot be replaced),

167
00:09:31,169 --> 00:09:34,507
here, again, with the access
to grille via the reference,

168
00:09:34,507 --> 00:09:38,165
nothing stops him from doing
this dishonest move.

169
00:09:39,065 --> 00:09:43,373
So all this shows that
the methods provided by the programmer,

170
00:09:43,373 --> 00:09:45,039
namely getGrille,

171
00:09:45,039 --> 00:09:48,535
allow an uncontrollable access
to the implementation details.

172
00:09:50,065 --> 00:09:53,061
All these manipulations can be
done without any of them

173
00:09:53,061 --> 00:09:56,878
being validated, which manifests
the bad class design.

174
00:09:57,808 --> 00:10:01,090
To properly encapsulate
the class JeuMorpion,

175
00:10:01,090 --> 00:10:04,506
it is imperative that the class's
implementation choices are not

176
00:10:04,506 --> 00:10:08,624
revealed in the user interface
provided for the user.

177
00:10:08,624 --> 00:10:11,167
Furthermore, internal 
implementation choices

178
00:10:11,167 --> 00:10:12,460
such as

179
00:10:12,460 --> 00:10:13,728
how to represent the grid,

180
00:10:13,728 --> 00:10:16,336
or how to modelize
tokens on the grid,

181
00:10:16,336 --> 00:10:19,716
are the responsibility of the
class designer and programmer,

182
00:10:19,716 --> 00:10:21,732
and not the user.

183
00:10:21,732 --> 00:10:23,169
We will now move on to

184
00:10:23,169 --> 00:10:24,807
the 2nd version that is

185
00:10:24,807 --> 00:10:26,534
a bit more refined than
the last version.

186
00:10:26,934 --> 00:10:28,768
So to properly program this class,

187
00:10:28,768 --> 00:10:32,390
several decisions need to
be made in implementing the grid.

188
00:10:32,470 --> 00:10:35,108
Here we choose to implement it
a bit more explicitly

189
00:10:35,108 --> 00:10:37,495
than in the last version

190
00:10:37,495 --> 00:10:40,546
with a 2-dimensional array
which is closer

191
00:10:40,546 --> 00:10:44,399
to the real tic-tac-toe
grid.

192
00:10:45,089 --> 00:10:49,073
We have to decide how
to encode the data

193
00:10:49,073 --> 00:10:51,548
to place the pieces
on the grid,

194
00:10:51,548 --> 00:10:55,093
and here it is best to always
clarify the choices we make.

195
00:10:55,093 --> 00:10:56,718
For example, this can be

196
00:10:56,718 --> 00:10:59,283
done by introducing
a certain number of constants

197
00:10:59,283 --> 00:11:01,369
with explicit names, so that
the meaning of the different

198
00:11:01,369 --> 00:11:04,847
numbers in the array is clear.

199
00:11:04,847 --> 00:11:08,227
Next, instead of, as in the
last version,

200
00:11:08,657 --> 00:11:10,948
relying on the default values
of the array

201
00:11:10,948 --> 00:11:12,726
to initialize the grid,

202
00:11:12,726 --> 00:11:15,534
here, we make the initialization
as clear-cut as possible,

203
00:11:15,534 --> 00:11:16,882
like this.

204
00:11:16,882 --> 00:11:20,253
So in reading this code,

205
00:11:20,253 --> 00:11:23,291
it is obvious that we
are filling the tic-tac-toe grid

206
00:11:25,081 --> 00:11:26,547
with empty boxes.
(TN: "vide" means "empty")

207
00:11:27,397 --> 00:11:31,553
Next, the idea is to
provide the users of this class

208
00:11:31,553 --> 00:11:35,776
with only 2 well-chosen methods

209
00:11:35,776 --> 00:11:39,374
that allow the player to
interact with the grid, without

210
00:11:39,374 --> 00:11:41,130
however, knowing how
it is implemented.

211
00:11:41,130 --> 00:11:46,350
For example, we can provide "placerRond" (= place an "O")
and specify that the user has 

212
00:11:46,350 --> 00:11:49,267
give the line and column

213
00:11:49,267 --> 00:11:50,844
which is intuitive.

214
00:11:50,844 --> 00:11:55,103
Then internally we implement

215
00:11:55,103 --> 00:11:59,051
how to place an O at a given
line and column on the grid.

216
00:11:59,961 --> 00:12:04,109
In the same way, we can
provide the public  method

217
00:12:04,109 --> 00:12:06,762
placerCroix (= place an "X") that allows  the
user to place a cross

218
00:12:06,762 --> 00:12:09,970
simply by specifying

219
00:12:09,970 --> 00:12:12,745
the proper line and column.

220
00:12:12,745 --> 00:12:16,766
Placing a piece on a 
certain line and column is done

221
00:12:16,766 --> 00:12:20,262
with the exact same process
whether the token is an X or an O,

222
00:12:20,262 --> 00:12:23,625
so it is intuitive to

223
00:12:23,625 --> 00:12:27,539
modularize the procedure
by having a method placerCoup (= place a token)

224
00:12:27,539 --> 00:12:31,437
whose job it is to place the piece
on a certain line and column.

225
00:12:31,437 --> 00:12:35,229
The methods placerRond
and placerCroix are sufficient

226
00:12:35,229 --> 00:12:38,998
to place the tokens on the grid.

227
00:12:38,998 --> 00:12:42,312
Consequently, it
is unnecessary to

228
00:12:42,312 --> 00:12:43,942
provide an access to placerCoup
like getGrille in the first version.

229
00:12:43,942 --> 00:12:47,638
Placing tokens can
be done with

230
00:12:47,638 --> 00:12:50,321
these 2 methods alone,
which constitute the interface.

231
00:12:50,321 --> 00:12:53,889
This means that the method
placerCoup can be declared

232
00:12:53,889 --> 00:12:57,518
private because

233
00:12:57,518 --> 00:13:01,076
it simply helps the other methods
in their tasks

234
00:13:01,076 --> 00:13:03,622
and is not a functionality
itself that is

235
00:13:03,622 --> 00:13:06,208
provided to the user.

236
00:13:06,748 --> 00:13:11,704
Because it is the class user who
will give the line and column

237
00:13:11,704 --> 00:13:13,735
where he wants to place his
token,

238
00:13:13,735 --> 00:13:17,739
it is necessary, in order for the class
to be robust in the case of an error

239
00:13:17,739 --> 00:13:23,000
to anticipate invalid moves that
do not correspond to

240
00:13:23,000 --> 00:13:25,323
a position on the grid.

241
00:13:25,323 --> 00:13:28,492
So typically, if the line's index
is negative

242
00:13:28,492 --> 00:13:33,009
or greater than or equal to
the grid's size,

243
00:13:33,009 --> 00:13:34,990
than a message should
be sent back.

244
00:13:34,990 --> 00:13:40,170
So anticipating and managing these
errors makes the code more robust.

245
00:13:40,170 --> 00:13:42,950
Once the line and column
provided by the user

246
00:13:42,950 --> 00:13:46,570
are validated,

247
00:13:46,570 --> 00:13:48,512
we still have to verify

248
00:13:48,512 --> 00:13:51,493
that the line and column
is really empty.

249
00:13:52,073 --> 00:13:53,894
Indeed, in tic-tac-toe,

250
00:13:53,894 --> 00:13:57,455
you are not allowed to
place a token on a box

251
00:13:57,455 --> 00:14:02,628
that is already occupied.
If this is the case, then this

252
00:14:03,918 --> 00:14:07,191
error also needs to be signaled.

253
00:14:07,191 --> 00:14:10,791
placerCoup returns a boolean
to indicate whether or not

254
00:14:10,791 --> 00:14:13,555
a move was placed on the
requested square.

255
00:14:14,265 --> 00:14:20,273
The methods placerRond
and placerCroix will use this boolean

256
00:14:20,273 --> 00:14:24,118
returned by placerCoup and
to return it

257
00:14:24,118 --> 00:14:28,324
to the user to indicate
if the token was placed

258
00:14:28,324 --> 00:14:31,772
or not.

259
00:14:33,022 --> 00:14:36,823
Let's see the repercussions
of these modifications

260
00:14:36,823 --> 00:14:39,086
for the user.

261
00:14:39,086 --> 00:14:40,315
As before,

262
00:14:40,315 --> 00:14:43,834
a programmer uses
the class JeuMorpion

263
00:14:43,834 --> 00:14:48,203
is to declare a variable of
this type and initialize

264
00:14:48,203 --> 00:14:50,710
it with the method provided

265
00:14:50,710 --> 00:14:55,837
but most importantly to place
a token. And to do this

266
00:14:55,837 --> 00:14:58,427
he will be able to very
explicitly use functionalities

267
00:14:58,907 --> 00:15:00,727
like placerRond which
require no knowledge

268
00:15:00,727 --> 00:15:04,218
on his part of how the
data is encoded internally.

269
00:15:04,668 --> 00:15:08,181
So if I want to place an O,
I indicate that I place an O

270
00:15:08,181 --> 00:15:11,472
on the grid on the line 0
and column 0

271
00:15:11,472 --> 00:15:15,321
and I will be notified
if the O was successfully

272
00:15:15,321 --> 00:15:17,540
placed or not.

273
00:15:18,080 --> 00:15:21,162
Placing an X on the grid

274
00:15:21,162 --> 00:15:24,068
would proceed in the same manner.

275
00:15:24,068 --> 00:15:28,044
This 2nd version of JeuMorpion

276
00:15:28,044 --> 00:15:30,548
is much more robust and explicit

277
00:15:30,548 --> 00:15:33,594
but still requires that
a certain number of

278
00:15:33,594 --> 00:15:36,040
conventions be used.

279
00:15:36,040 --> 00:15:40,987
For example here, we impose
that the user of this method

280
00:15:40,987 --> 00:15:43,251
respects a certain enumeration
system

281
00:15:43,251 --> 00:15:45,439
for the lines and columns.

282
00:15:45,439 --> 00:15:48,681
We could have of course
chosen a different system than this one.

283
00:15:48,681 --> 00:15:50,523
So these conventions have to

284
00:15:50,523 --> 00:15:54,135
explicitly be documented
in the user interface.

285
00:15:55,165 --> 00:15:57,478
Nevertheless, this 2nd
version of the class

286
00:15:57,478 --> 00:16:01,281
has many advantages compared
to the 1st version.

287
00:16:02,105 --> 00:16:05,312
Firstly, it verifies
the data.

288
00:16:05,312 --> 00:16:07,583
For instance, it is impossible
in this version

289
00:16:07,583 --> 00:16:10,310
to put an invalid number
in the array.

290
00:16:10,310 --> 00:16:11,068
And how is this?

291
00:16:11,068 --> 00:16:15,636
Well, because the user
of JeuMorpion

292
00:16:15,636 --> 00:16:18,351
doesn't even know that
an empty slot is encoded with a 0,

293
00:16:18,351 --> 00:16:21,886
and that 1 and 2 represent
Os and Xs.

294
00:16:21,886 --> 00:16:25,243
So he simply uses the methods
placerRond or placerCroix

295
00:16:25,243 --> 00:16:27,134
and it's the internal implementation
details that

296
00:16:27,134 --> 00:16:29,888
take care of assigning the
right values.

297
00:16:30,638 --> 00:16:33,571
Secondly, it is impossible
for the external user

298
00:16:33,571 --> 00:16:36,976
to place a piece on an
occupied square of the grid.

299
00:16:36,976 --> 00:16:40,023
We saw in the definition
of placerCoup that this method

300
00:16:40,023 --> 00:16:44,331
verified that the square was indeed
empty before placing a new token.

301
00:16:44,331 --> 00:16:45,500
Another important advantage,

302
00:16:45,500 --> 00:16:47,999
which is key to a well-designed
object-oriented program,

303
00:16:47,999 --> 00:16:50,568
is what is called
separation of concerns:

304
00:16:50,568 --> 00:16:54,894
the user of the class JeuMorpions
does not need to know how

305
00:16:54,894 --> 00:16:58,661
the grid is internally represented
and implemented or how

306
00:16:58,661 --> 00:17:02,029
a token is placed on the grid.

307
00:17:02,029 --> 00:17:05,417
He only needs to concern himself
with the game's logic,

308
00:17:05,417 --> 00:17:07,691
and how he will place
Os and Xs.

309
00:17:08,111 --> 00:17:12,291
Yet another advantage is that this
code is comprehensible, even

310
00:17:12,291 --> 00:17:17,823
to someone without
a programming background.

311
00:17:19,263 --> 00:17:20,135
If, I write "jeu.placerRond(0,0)"

312
00:17:20,135 --> 00:17:21,969
I don't need much explanation

313
00:17:21,969 --> 00:17:24,153
to know what this expression
means.

314
00:17:24,153 --> 00:17:31,101
This wasn't the case in the
last version where placing a piece

315
00:17:31,101 --> 00:17:34,671
necessitated very cryptic
expressions

316
00:17:34,671 --> 00:17:36,416
like this.

317
00:17:36,846 --> 00:17:38,141
Compare the two.

318
00:17:41,351 --> 00:17:42,926
Do you see that this first expression

319
00:17:42,926 --> 00:17:45,262
is much more clear and explicit?

320
00:17:45,682 --> 00:17:49,258
And a last advantage is that
all errors are

321
00:17:49,258 --> 00:17:51,845
accounted for, and in these situations

322
00:17:51,845 --> 00:17:54,986
a comprehensible message
will be returned.

323
00:17:54,986 --> 00:17:59,187
In the first version, when
for example, we tried

324
00:17:59,187 --> 00:18:03,825
to place a token outside of the
grid, the execution of the program

325
00:18:03,825 --> 00:18:06,327
was interrupted abruptly,

326
00:18:06,327 --> 00:18:08,406
and a incomprehensible message
was sent back.

327
00:18:08,406 --> 00:18:11,876
So now it is possible with the
error message for the user

328
00:18:11,876 --> 00:18:15,996
to know what exactly
he did wrong.

329
00:18:17,006 --> 00:18:19,424
This closes our case study

330
00:18:19,424 --> 00:18:20,850
of a game of tic-tac-toe.

331
00:18:20,850 --> 00:18:22,878
This example demonstrated
the importance of encapsulation,

332
00:18:22,878 --> 00:18:26,346
how it is necessary to hide
the implementation details,

333
00:18:26,346 --> 00:18:30,985
and to only provide methods absolutely
indespensable to the user

334
00:18:30,985 --> 00:18:33,341
which do not give any
openings for the user

335
00:18:33,341 --> 00:18:36,664
to modify or change
the implementation details.
