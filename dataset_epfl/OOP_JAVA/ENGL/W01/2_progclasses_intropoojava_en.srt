1
00:00:04,048 --> 00:00:07,659
In the last episode,

2
00:00:07,659 --> 00:00:09,843
we considered the fundamental aspects
of object-oriented programming (OOP).

3
00:00:09,843 --> 00:00:12,056
In this video, 

4
00:00:12,056 --> 00:00:14,750
we will start to code 
all this in Java.

5
00:00:14,750 --> 00:00:19,322
So we saw that  OOP
uses the concept of class

6
00:00:19,322 --> 00:00:22,896
which is the result of the process 
of abstraction and encapsulation

7
00:00:22,896 --> 00:00:25,692
as we saw in the example, 
the definition of the class Rectangle

8
00:00:25,692 --> 00:00:28,171
that had the data members "largeur"
and "hauteur" (TN:"width" and "height")

9
00:00:28,171 --> 00:00:30,658
and had a method "surface" to calculate 
the area (TN: "surface" means "area").

10
00:00:30,658 --> 00:00:32,995
A class, in programming languages,

11
00:00:32,995 --> 00:00:35,209
defines a new type that allows for the

12
00:00:35,209 --> 00:00:38,892
creation of variables of this type

13
00:00:38,892 --> 00:00:41,288
for example three variables 
rect1, rect2, rect3

14
00:00:41,288 --> 00:00:46,480
that are called in object-oriented
language instances or objects.

15
00:00:46,480 --> 00:00:49,321
So how do you code this in Java ?

16
00:00:49,321 --> 00:00:50,950
To declare a new class,

17
00:00:50,950 --> 00:00:53,824
we will use the special keyword
"class".

18
00:00:53,824 --> 00:00:56,172
For instance, we will write "class Rectangle"

19
00:00:56,172 --> 00:01:00,143
to declare a class that we decided
to call Rectangle,

20
00:01:00,143 --> 00:01:04,994
followed by its definition
as we will specify later on.

21
00:01:04,994 --> 00:01:08,272
This expression "class Rectangle"
defines a new type,

22
00:01:08,272 --> 00:01:11,184
that we can use just as we would do 
with any other type,

23
00:01:11,184 --> 00:01:13,356
to declare, for example, variables.

24
00:01:13,356 --> 00:01:16,189
We will use the name of the type,
that is, the name of the class,

25
00:01:16,189 --> 00:01:18,903
followed by the name of the variable,
that is, the name of the instance.

26
00:01:18,903 --> 00:01:22,745
For example, to declare an instance
that we name "rect1",

27
00:01:22,745 --> 00:01:27,720
of the class Rectangle, we simply
write "Rectangle rect1".

28
00:01:27,720 --> 00:01:29,861
In OOP terminology,

29
00:01:29,861 --> 00:01:32,604
a variable corresponds
to an instance.

30
00:01:32,604 --> 00:01:35,273
In Java, the instance's name,

31
00:01:35,273 --> 00:01:38,245
corresponding to "rect1"
in this case,

32
00:01:38,245 --> 00:01:44,445
is actually a reference
to a real object in the memory.

33
00:01:44,445 --> 00:01:48,131
All this will be explained
in more detail in the course.

34
00:01:48,131 --> 00:01:50,297
But where do we write
these lines?

35
00:01:50,297 --> 00:01:51,885
You have two solutions available:

36
00:01:51,885 --> 00:01:55,170
You can declare all your classes
in one file,

37
00:01:55,170 --> 00:01:57,851
or you can declare one class
in each file.

38
00:01:57,851 --> 00:01:58,972
Let's examine the first case,

39
00:01:58,972 --> 00:02:02,434
with all the classes declared
in one unique file.

40
00:02:02,434 --> 00:02:06,813
Suppose that we want

41
00:02:06,813 --> 00:02:09,406
a class "Dessin" (TN: ="Drawing")

42
00:02:09,406 --> 00:02:13,023
that uses the class Rectangle.

43
00:02:13,023 --> 00:02:16,626
All this is declared in
one unique file,

44
00:02:16,626 --> 00:02:19,718
that we decided to name "Dessin.java".

45
00:02:19,718 --> 00:02:23,396
Thus we have here the
entirety of the file "Dessin.java".

46
00:02:23,396 --> 00:02:27,428
We can declare a class Rectangle,
here, like this,

47
00:02:27,428 --> 00:02:29,259
and a class Dessin.

48
00:02:29,259 --> 00:02:33,243
Concretely, to compile it,
we use the command

49
00:02:33,243 --> 00:02:36,962
"javac Dessin.java" that
you can directly

50
00:02:36,962 --> 00:02:38,568
enter into the command line,

51
00:02:38,568 --> 00:02:41,014
or you can have an integrated
development environment (IDE)

52
00:02:41,014 --> 00:02:43,229
like Eclipse do it for you.

53
00:02:43,229 --> 00:02:46,105
This compiling will produce
however two new files.

54
00:02:46,105 --> 00:02:50,741
A file "Dessin.class" and 
a file "Rectangle.class",

55
00:02:50,741 --> 00:02:52,956
and then to execute all this,

56
00:02:52,956 --> 00:02:55,799
the method main being
in the class Dessin,

57
00:02:55,799 --> 00:03:00,934
we will enter "java Dessin"
in the command line,

58
00:03:00,934 --> 00:03:04,431
or you can simply execute
the class

59
00:03:04,431 --> 00:03:06,677
from Eclipse for example.

60
00:03:06,677 --> 00:03:11,176
So this is the first solution
to declaring your classes.

61
00:03:11,176 --> 00:03:15,320
Another solution consist
of declaring one class per file.

62
00:03:15,320 --> 00:03:17,267
So each time you have a class,

63
00:03:17,267 --> 00:03:18,720
you have a separate file,

64
00:03:18,720 --> 00:03:20,608
thus you would declare
the class Rectangle

65
00:03:20,608 --> 00:03:23,113
in, for example, the
file "Rectangle.java",

66
00:03:23,113 --> 00:03:26,773
the class Dessin in the
file"Dessin.java".

67
00:03:26,773 --> 00:03:29,249
And in this case, if you
are using a command line,

68
00:03:29,249 --> 00:03:33,152
you would have to compile
each file separately.

69
00:03:33,152 --> 00:03:35,639
Of course, in an IDE,

70
00:03:35,639 --> 00:03:38,262
these two files would
be part of the same project,

71
00:03:38,262 --> 00:03:41,130
and would be compiled
independently

72
00:03:41,130 --> 00:03:43,787
 by invoking only once
the command "Build".

73
00:03:43,787 --> 00:03:46,729
And Eclipse will take care of
compiling the two files,

74
00:03:46,729 --> 00:03:49,203
and will result in,
like in the first solution,

75
00:03:49,203 --> 00:03:51,316
two files ".class".

76
00:03:51,316 --> 00:03:52,843
To execute this files from
the command prompt,

77
00:03:52,843 --> 00:03:56,586
we would enter "java Dessin"
because it the class Dessin

78
00:03:56,586 --> 00:03:58,747
has the function main.

79
00:03:58,747 --> 00:04:00,800
This is also what Eclipse
would do for you

80
00:04:00,800 --> 00:04:02,592
if you did the execution from there.

81
00:04:02,592 --> 00:04:07,773
If you wanted to try "java Rectangle",

82
00:04:07,773 --> 00:04:11,215
Rectangle doesn't contain a method main,

83
00:04:11,215 --> 00:04:15,060
to in this case, you wil
get an exception,

84
00:04:15,060 --> 00:04:22,975
that says that the class Rectangle
doesn't have a method main.

85
00:04:22,975 --> 00:04:25,746
Let's see how to fill this part
of the program,

86
00:04:25,746 --> 00:04:26,914
that is to say, how to include
data members and methods in our class.

87
00:04:29,963 --> 00:04:31,288
Let's start with data members.

88
00:04:31,288 --> 00:04:35,799
The properties of the class Rectangle
are width and height.

89
00:04:35,799 --> 00:04:38,883
To declare these data members,

90
00:04:38,883 --> 00:04:42,788
simply put the type and the name of the
different data members.

91
00:04:42,788 --> 00:04:46,060
Here, for each variable we declare the 

92
00:04:46,060 --> 00:04:48,218
variable's type and name
followed by a semicolon.

93
00:04:48,218 --> 00:04:50,107
In the example of the class Rectangle, 
this gives

94
00:04:50,107 --> 00:04:54,104
double hauteur, double largeur
(TN: "hauteur" means "height" and "largeur", "width").

95
00:04:54,104 --> 00:04:55,478
It's as simple as that!

96
00:04:55,478 --> 00:04:58,247
Likewise, for using 
the data members of an instance,

97
00:04:58,247 --> 00:05:00,826
we have the name of the instance,

98
00:05:00,826 --> 00:05:03,685
followed by a period,
followed by the name of the data variable

99
00:05:03,685 --> 00:05:05,081
that we want.

100
00:05:05,081 --> 00:05:08,711
For example, to use the 
height of the rectangle rect1,

101
00:05:08,711 --> 00:05:11,815
we write rect1.hauteur.

102
00:05:11,815 --> 00:05:14,123
Let illustrate this with
an example,

103
00:05:14,123 --> 00:05:16,928
given here in one file,

104
00:05:16,928 --> 00:05:19,938
that contains a class Exemple

105
00:05:19,938 --> 00:05:22,395
that has the method main,

106
00:05:22,395 --> 00:05:25,991
as well as a class Rectangle,

107
00:05:25,991 --> 00:05:29,780
in which we
declare a variable "hauteur" of type double,

108
00:05:29,780 --> 00:05:33,114
and a variable "largeur" also
of type double.

109
00:05:33,114 --> 00:05:38,158
The class Exemple will create
an instance of the class Rectangle.

110
00:05:38,158 --> 00:05:42,374
To this we have to
use the following syntax.

111
00:05:42,374 --> 00:05:45,203
The declaring-initilalizing an istance is
done

112
00:05:45,203 --> 00:05:47,978
by using the name of the class
followed by the name of the instance,

113
00:05:47,978 --> 00:05:51,061
followed by "= new",
the name of the class,

114
00:05:51,061 --> 00:05:54,828
and parentheses, like this.

115
00:05:54,828 --> 00:05:57,394
For example,
we saw in the last example,

116
00:05:57,394 --> 00:05:59,804
to create an instance "rect"
of the class Rectangle,

117
00:05:59,804 --> 00:06:02,731
we would write "= new Rectangle( )".

118
00:06:02,731 --> 00:06:04,620
Which would generate all
the data members

119
00:06:04,620 --> 00:06:07,154
and initialize them to the
following values.

120
00:06:07,154 --> 00:06:09,752
If we had variables of type int, they
would be initialized at the int value 0.

121
00:06:09,752 --> 00:06:12,775
For doubles, at the double value 0.

122
00:06:12,775 --> 00:06:14,866
For booleans,  at false.

123
00:06:14,866 --> 00:06:18,190
And for objects, at the special value "null",

124
00:06:18,190 --> 00:06:20,796
which we will come back
to momentarily.

125
00:06:20,796 --> 00:06:24,244
In the last example, here,

126
00:06:24,244 --> 00:06:29,330
rect1 has a width and height of 0 before
modifying them.

127
00:06:29,330 --> 00:06:32,677
Now let's examine
the declaration of methods.

128
00:06:32,677 --> 00:06:34,271
Methods are simply functions,

129
00:06:34,271 --> 00:06:36,852
that are embedded in a class.

130
00:06:36,852 --> 00:06:38,741
In the case of the class Rectangle, 
we will

131
00:06:38,741 --> 00:06:42,484
add the method "surface".
(TN: "surface" means "area")

132
00:06:42,484 --> 00:06:45,518
A method is declared just 
like a function 

133
00:06:45,518 --> 00:06:48,626
with the return type, 
the name of the method,

134
00:06:48,626 --> 00:06:53,240
then in parentheses, 
possibly a list of parameters;

135
00:06:53,240 --> 00:06:55,722
all this is the method header

136
00:06:55,722 --> 00:06:58,507
followed by the actual definition 
of the method: the method body

137
00:06:58,507 --> 00:07:01,470
in braces.

138
00:07:01,470 --> 00:07:04,403
The only difference, is that methods
are declared inside the class itself.

139
00:07:06,905 --> 00:07:08,953
In our example, 
the class Rectangle,

140
00:07:08,953 --> 00:07:12,541
the method "surface" is 
included here in the class Rectangle

141
00:07:12,541 --> 00:07:15,232
with, its return type double because

142
00:07:15,232 --> 00:07:17,648
this method returns a double, its name,

143
00:07:17,648 --> 00:07:20,356
but no parameters,

144
00:07:20,356 --> 00:07:23,699
and returns the product of the 
height and the width.

145
00:07:23,699 --> 00:07:24,866
We could ask ourselves

146
00:07:24,866 --> 00:07:27,696
"Don't we need parameters ? "

147
00:07:27,696 --> 00:07:30,118
Indeed, if we had written an 
ordinary function,

148
00:07:30,118 --> 00:07:33,051
like we did before, outside
the class,

149
00:07:33,051 --> 00:07:37,441
we would have had to pass 
the height and width as arguments

150
00:07:37,441 --> 00:07:39,261
to the function,

151
00:07:39,261 --> 00:07:42,947
so that their values can 
be used in the calculation.

152
00:07:42,947 --> 00:07:46,969
So why for this method in 
the class Rectangle,

153
00:07:46,969 --> 00:07:48,680
do we not need to 
pass any parameters ?

154
00:07:48,680 --> 00:07:51,503
The answer is that 
the height and width

155
00:07:51,503 --> 00:07:53,318
are data members of this class.

156
00:07:53,318 --> 00:07:56,636
Since "surface" is 
part of the class Rectangle,

157
00:07:56,636 --> 00:08:00,222
the method has access to 
the height and width

158
00:08:00,222 --> 00:08:01,699
 of the class Rectangle.

159
00:08:01,699 --> 00:08:05,435
Technically, this is called 
"the scope of the class",

160
00:08:05,435 --> 00:08:07,740
that is, that all the data
members of a class

161
00:08:07,740 --> 00:08:10,712
are accessible from any
member of the class

162
00:08:10,712 --> 00:08:13,843
and in particular 
from each of its methods.

163
00:08:13,843 --> 00:08:16,671
For example, all the methods of 
the class Rectangle

164
00:08:16,671 --> 00:08:19,581
can access the height and length.

165
00:08:19,581 --> 00:08:21,174
Therefore it is unnecessary to pass these

166
00:08:21,174 --> 00:08:23,827
variables as arguments to the methods.

167
00:08:23,827 --> 00:08:29,341
In summary, a method is 
simply a function

168
00:08:29,341 --> 00:08:31,049
that is specific to a class,
so is put in that class,

169
00:08:31,049 --> 00:08:32,958
but also has access to the 

170
00:08:32,958 --> 00:08:36,338
data members of the class.

171
00:08:36,338 --> 00:08:39,270
This is typically a beginner's problem

172
00:08:39,270 --> 00:08:41,859
when writing their first methods.

173
00:08:41,859 --> 00:08:44,966
It is very important not to
pass attributes as arguments

174
00:08:44,966 --> 00:08:47,343
 to class methods.

175
00:08:47,343 --> 00:08:49,336
In our example

176
00:08:49,336 --> 00:08:51,285
we have exactly this, 
we have a method "surface"

177
00:08:51,285 --> 00:08:56,334
that does not take any parameters

178
00:08:56,334 --> 00:09:00,153
but can access Rectangle's 
height and width

179
00:09:00,153 --> 00:09:03,990
That were declared previously in the class.

180
00:09:03,990 --> 00:09:06,587
That said, it's not because 
we don't need to pass

181
00:09:06,587 --> 00:09:10,338
the data members as arguments to 
these methods

182
00:09:10,338 --> 00:09:12,703
that the methods never have 
parameters.

183
00:09:12,703 --> 00:09:15,574
Of course, if the method 
needs certain parameters

184
00:09:15,574 --> 00:09:18,380
from outside the class to 
do its work,

185
00:09:18,380 --> 00:09:22,086
then parameters would 
need to be declared.

186
00:09:22,086 --> 00:09:27,153
For example, suppose that we 
have a class "FigureColoree" (= "ColoredShape")

187
00:09:27,153 --> 00:09:30,083
and in this class, 
we would have several data members

188
00:09:30,083 --> 00:09:34,566
as well as a method "colorie" that colors
the shape (TN: "colorie" means "color")

189
00:09:34,566 --> 00:09:38,965
and that would receive a color

190
00:09:38,965 --> 00:09:42,786
and would modify the instance
of the class FigureColoree

191
00:09:42,786 --> 00:09:44,798
to color them with this color, 
"Couleur" being itself another type

192
00:09:44,798 --> 00:09:48,128
that we would have defined 
with a class or a typedef.

193
00:09:48,128 --> 00:09:50,494
We could for example declare

194
00:09:50,494 --> 00:09:55,894
a shape, an instance of the class
FigureColoree, 

195
00:09:55,894 --> 00:10:00,730
and rouge (TN: means "red) , an instance of the
class Color.

196
00:10:00,730 --> 00:10:04,254
And, anticipating on the syntax,
color the shape rouge.

197
00:10:04,254 --> 00:10:06,160
What I want to show you

198
00:10:06,160 --> 00:10:10,054
is that the color rouge comes 
from outside the class FigureColoree

199
00:10:10,054 --> 00:10:13,407
and is not part of the class 
FigureColoree.

200
00:10:13,407 --> 00:10:16,593
That's why here we have 
to pass it as argument.

201
00:10:16,593 --> 00:10:18,617
It is not a data member
that we need to pass

202
00:10:18,617 --> 00:10:23,211
as parameter to the method colorie.

203
00:10:23,211 --> 00:10:25,877
So now you know how
to declare and define

204
00:10:25,877 --> 00:10:27,112
methods of a class.

205
00:10:27,112 --> 00:10:28,791
But how do you use them?

206
00:10:28,791 --> 00:10:30,412
Namely, how do you invoke them?

207
00:10:30,412 --> 00:10:31,594
To do this

208
00:10:31,594 --> 00:10:33,475
we will use a syntax similar to
that for data members,

209
00:10:33,475 --> 00:10:37,080
and similar to what you have
seen in other contexts

210
00:10:37,080 --> 00:10:41,852
such as when you called
the method "size" of a dynamic array.

211
00:10:41,852 --> 00:10:46,319
If you write "tableau.size()" you are
indeed calling the method size,

212
00:10:46,319 --> 00:10:49,172
of a dynamic array.

213
00:10:49,172 --> 00:10:53,248
The usual format is 
"name of the instance"."name of the method"

214
00:10:53,248 --> 00:10:55,179
then in parentheses,

215
00:10:55,179 --> 00:10:58,496
the list of arguments that you want
to pass to the method.

216
00:10:58,496 --> 00:11:01,128
For instance, to invoke the method "surface"

217
00:11:01,128 --> 00:11:04,113
on the instance rect1
of the class Rectangle,

218
00:11:04,113 --> 00:11:07,572
we will write "rect1.surface".

219
00:11:07,572 --> 00:11:11,448
Here, because the method surface
doesn't take any arguments,

220
00:11:11,448 --> 00:11:15,489
the parentheses are empty.

221
00:11:15,489 --> 00:11:18,015
Let's come back to
our comprehensive example.

222
00:11:18,015 --> 00:11:22,292
We have, like before,
the class Exemple

223
00:11:22,292 --> 00:11:25,191
that uses in the method main,

224
00:11:25,191 --> 00:11:28,498
an instance rect1
of the class Rectangle.

225
00:11:28,498 --> 00:11:32,911
In the class Rectangle, we have
added a method "surface".

226
00:11:32,911 --> 00:11:35,745
To invoke this method surface

227
00:11:35,745 --> 00:11:39,290
on the instance rect1
of the class Rectangle,

228
00:11:39,290 --> 00:11:42,369
we simply write "rect1.surface",

229
00:11:42,369 --> 00:11:45,916
which returns a double,

230
00:11:45,916 --> 00:11:49,938
that we could print with
a message like "surface :"

231
00:11:49,938 --> 00:11:52,584
In this case it would write
"surface :"

232
00:11:52,584 --> 00:11:56,015
and 12 which is the result of
3 times 4.

233
00:11:56,015 --> 00:12:00,347
Each instance has its own 
set of values for its data members.

234
00:12:00,347 --> 00:12:02,082
If, for example, I declare

235
00:12:02,082 --> 00:12:07,280
3 instances rect1, rect2, rect3
of the class Rectangle,

236
00:12:12,300 --> 00:12:16,323
and assigned the value 3
to the height of rect1,

237
00:12:16,323 --> 00:12:18,987
the value 4 to the width
of rect1,

238
00:12:18,987 --> 00:12:25,489
and 11.5 and 3.8 for rect2.

239
00:12:25,489 --> 00:12:27,872
We would have another
memory location

240
00:12:27,872 --> 00:12:31,808
for the value 34.3 of
the width of rect3,

241
00:12:31,808 --> 00:12:34,376
and a value for its height.

242
00:12:34,376 --> 00:12:38,617
So we would have 3 different
variables existing in the memory,

243
00:12:38,617 --> 00:12:41,291
and when we call "rect2.surface",

244
00:12:41,291 --> 00:12:44,322
its the general method surface
of the class rectangle

245
00:12:44,322 --> 00:12:47,407
that will be applied
to the instance rect1,

246
00:12:47,407 --> 00:12:49,625
which means that in
this method surface,

247
00:12:49,625 --> 00:12:51,634
when it is called,

248
00:12:51,634 --> 00:12:57,345
"largeur" implies "rect1.largeur"
and "hauteur" implies "rect2.hauteur".

249
00:12:57,345 --> 00:13:00,722
If I call in another place
"rect2.surface",

250
00:13:00,722 --> 00:13:03,613
then in this call, "rect2.surface",

251
00:13:03,613 --> 00:13:07,483
then "hauteur" will designate
"rect2.hauteur",

252
00:13:07,483 --> 00:13:11,935
and "largeur" will implie "rect2.largeur"

253
00:13:11,935 --> 00:13:14,147
Note that strictly speaking,
these representations of instances here

254
00:13:14,147 --> 00:13:15,640
are not exactly correct,

255
00:13:15,640 --> 00:13:22,321
because the variables refers
to objects in the memory,

256
00:13:22,321 --> 00:13:27,981
but the aim here is to show
that when a method is called,

257
00:13:27,981 --> 00:13:30,763
it has access to each of
these data members.

258
00:13:30,763 --> 00:13:33,250
We will consider later
in this course

259
00:13:33,250 --> 00:13:35,475
how things
are stored in the memory.

260
00:13:35,475 --> 00:13:38,048
So this concludes
this video.

261
00:13:38,048 --> 00:13:41,358
We saw how to
declare objects in Java,

262
00:13:41,358 --> 00:13:44,033
we saw how to declare
data members

263
00:13:44,033 --> 00:13:46,222
and how to declare methods.

264
00:13:46,222 --> 00:13:49,674
That is to say, that we saw
this axe of this chart.

265
00:13:49,674 --> 00:13:51,566
We still need
to see

266
00:13:51,566 --> 00:13:55,233
the differences between the
user interface and implementation details,

267
00:13:55,233 --> 00:13:57,778
that is, this axe,

268
00:13:57,778 --> 00:14:00,642
which will be the
topic of our next episode.
