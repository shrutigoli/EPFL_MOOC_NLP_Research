1
00:00:04,232 --> 00:00:06,840
In certain situations,
members defined in

2
00:00:06,840 --> 00:00:09,785
the superclass, do not completely
satisfy the 

3
00:00:09,785 --> 00:00:11,341
needs of the subclass.

4
00:00:11,341 --> 00:00:13,725
Redefinition or masking
are concepts

5
00:00:13,725 --> 00:00:16,472
that can amend this
complications.

6
00:00:16,472 --> 00:00:18,641
In a precedent video,
we examined the example

7
00:00:18,641 --> 00:00:20,220
of an hierarchy of characters,

8
00:00:20,220 --> 00:00:22,539
and postulated
that all these characters

9
00:00:22,539 --> 00:00:25,935
met another character
in the same manner.

10
00:00:25,935 --> 00:00:29,204
We could imagine, for example,
that when any character

11
00:00:29,204 --> 00:00:32,000
meets another,
he only greets the other.

12
00:00:32,000 --> 00:00:35,292
But imagine if this way of implementing
this method "rencontrer" was

13
00:00:35,292 --> 00:00:37,473
valid for most of
the classes,

14
00:00:37,473 --> 00:00:38,609
but not all.

15
00:00:38,609 --> 00:00:40,342
For example, we could imagine
that a warrior

16
00:00:40,342 --> 00:00:42,899
is somewhat more belligerent
than the others,

17
00:00:42,899 --> 00:00:45,981
and when he meets another,
instead of greeting him,

18
00:00:45,981 --> 00:00:47,758
he strikes him for example.

19
00:00:47,758 --> 00:00:50,146
Thus we are in a situation
in which we consider

20
00:00:50,146 --> 00:00:53,185
2 possible implementations
for the method "rencontrer".

21
00:00:53,185 --> 00:00:55,396
One for pacific characters,

22
00:00:55,396 --> 00:00:58,127
that will only greet
the other character

23
00:00:58,127 --> 00:00:59,966
when they meet,

24
00:00:59,966 --> 00:01:03,047
and one for warriors,
that will strike the other

25
00:01:03,047 --> 00:01:06,138
character when they meet.

26
00:01:06,138 --> 00:01:08,569
Can this be implemented
in our first design,

27
00:01:08,569 --> 00:01:12,461
without having to
change the class hierarchy?

28
00:01:12,461 --> 00:01:15,110
Happily, the answer is no,

29
00:01:15,110 --> 00:01:18,646
we can simply define
in the class Guerrier,

30
00:01:18,646 --> 00:01:21,998
a method "rencontrer"
that is specialized.

31
00:01:22,658 --> 00:01:26,522
So, in our class hierarchy,

32
00:01:26,522 --> 00:01:29,547
we will keep in
the superclass Personnage,

33
00:01:29,547 --> 00:01:31,524
a generic method "rencontrer",

34
00:01:31,524 --> 00:01:34,711
which is satisfied for most
subclasses,

35
00:01:34,711 --> 00:01:36,919
however, in the subclass
guerrier,

36
00:01:36,919 --> 00:01:40,457
we will give the method rencontrer
a new definition,

37
00:01:40,457 --> 00:01:42,561
in order that it corresponds

38
00:01:42,561 --> 00:01:45,272
to what we want a warrior
to do in this subclass.

39
00:01:45,893 --> 00:01:49,011
So for a warrior, the
specialized method

40
00:01:49,011 --> 00:01:52,521
will have precedence over the
generic method rencontrer.

41
00:01:52,521 --> 00:01:54,876
The generic method will
be invoked by default

42
00:01:54,876 --> 00:01:58,012
as long as the method
is not redefined in the subclass.

43
00:01:58,012 --> 00:02:02,669
For instance, if in a program,
I declare an object of type Magicien,

44
00:02:06,891 --> 00:02:09,769
and that I invoke the
method rencontrer on it

45
00:02:13,194 --> 00:02:15,493
since the subclass Magicien

46
00:02:15,493 --> 00:02:19,027
does not have its own
definition of this method,

47
00:02:19,027 --> 00:02:22,200
it's the generic method rencontrer
inherited from Personnage that

48
00:02:22,200 --> 00:02:24,426
will be called here.

49
00:02:24,426 --> 00:02:30,898
Now, if I declare an object
of type Guerrier

50
00:02:33,211 --> 00:02:36,131
and apply to it the
method rencontrer,

51
00:02:38,805 --> 00:02:41,674
well this time, because
the method has been redefined,

52
00:02:41,674 --> 00:02:43,034
in Guerrier,

53
00:02:43,034 --> 00:02:46,049
it will be this specialized
method that will be applied.

54
00:02:46,544 --> 00:02:48,908
In a class hierarchy, it is possible

55
00:02:48,908 --> 00:02:51,269
that a name of a data member
or method be used

56
00:02:51,269 --> 00:02:54,320
on several tiers of the
hierarchy.

57
00:02:54,320 --> 00:02:56,784
In the last example, the
method rencontrer

58
00:02:56,784 --> 00:03:00,826
with the same header,
is found at 2 levels of the hierarchy.

59
00:03:00,826 --> 00:03:03,863
In this situation,
we will speak of redefinition,

60
00:03:03,863 --> 00:03:08,724
a method is redefined so as to
be adapted to the subclass.

61
00:03:08,724 --> 00:03:11,619
The english term for this
is "overriding".

62
00:03:11,619 --> 00:03:14,423
Similarly, it is possible
for a member variable to be present

63
00:03:14,423 --> 00:03:18,313
at several tiers

64
00:03:18,313 --> 00:03:20,422
of the hierarchy.

65
00:03:20,422 --> 00:03:23,689
For example, if in the superclass A
we have

66
00:03:23,689 --> 00:03:26,583
a data member "a",

67
00:03:26,583 --> 00:03:29,523
it is possible to declare this

68
00:03:29,523 --> 00:03:32,270
data member "a" again
in the subclass B.

69
00:03:32,270 --> 00:03:36,076
Consequently, we find
a data member of the same name

70
00:03:36,076 --> 00:03:38,735
on 2 different levels of the
hierarchy.

71
00:03:38,735 --> 00:03:41,419
In this case it is important to
now, that an object of type B

72
00:03:41,419 --> 00:03:44,927
now has at its disposal 2 data
members called "a",

73
00:03:44,927 --> 00:03:49,697
one that is directly in class B,
and one inherited from A.

74
00:03:49,697 --> 00:03:52,952
If in the method B,
we use the data member "a",

75
00:03:52,952 --> 00:03:56,222
it will be the one from the 
same class that is used,

76
00:03:56,222 --> 00:03:58,508
and not the one inherited
from a.

77
00:03:58,508 --> 00:04:01,213
We say that the data member
present in B

78
00:04:01,213 --> 00:04:05,528
"masks" the one of the same name
defined in the superclass.

79
00:04:05,528 --> 00:04:08,787
So, for data members,
we speak of "masking",

80
00:04:08,787 --> 00:04:11,614
or "shadowing".

81
00:04:11,984 --> 00:04:14,297
The shadowing of variables
in an hierarchy

82
00:04:14,297 --> 00:04:16,439
is clearly a source
of ambiguity,

83
00:04:16,439 --> 00:04:19,662
thus it is not a very
common practice.

84
00:04:21,282 --> 00:04:23,520
On the other hand, method
redefinition or "overriding",

85
00:04:23,520 --> 00:04:27,079
is a very useful and
is used frequently.

86
00:04:27,079 --> 00:04:31,613
This device allows methods to be adapted
to the specific needs of a subclass

87
00:04:31,613 --> 00:04:32,987
so as to specialize it.

88
00:04:33,387 --> 00:04:37,276
To summarize, the redefinition of methods
in a class hierarchy

89
00:04:37,276 --> 00:04:39,782
consists of defining a method
for the specific requirements of its class

90
00:04:39,782 --> 00:04:43,458
with the same header
as a method

91
00:04:43,458 --> 00:04:45,960
already present
in the superclass.

92
00:04:47,000 --> 00:04:50,737
In jargon, we callthe
inherited method

93
00:04:50,737 --> 00:04:54,497
that can be used by subclasses
of Personnage

94
00:04:54,497 --> 00:04:57,366
that do not override
this method,

95
00:04:57,366 --> 00:04:59,805
the default method,.

96
00:05:00,355 --> 00:05:03,245
The method that
redefines a default method

97
00:05:03,245 --> 00:05:06,454
is called a specialized method,

98
00:05:06,454 --> 00:05:10,339
and which is adapted to
the individual needs of a subclass.

99
00:05:10,339 --> 00:05:13,424
As seen before,
it is always the specialized method

100
00:05:13,424 --> 00:05:16,363
that has precedence over
the default method,

101
00:05:16,363 --> 00:05:19,865
for example, if we declare
an object of type Guerrier,

102
00:05:19,865 --> 00:05:22,949
and invoke the method rencontrer
on this instance,

103
00:05:22,949 --> 00:05:27,117
it will be the specialized method rencontrer
that will be called.

104
00:05:27,117 --> 00:05:30,791
In reality, an object of type Guerrier
has 2 methods rencontrer,

105
00:05:30,791 --> 00:05:34,837
the one specific to its class,
and the other inherited.

106
00:05:34,837 --> 00:05:38,642
In certain cases, it can be
useful to call the default method

107
00:05:38,642 --> 00:05:40,576
even if it was redefined

108
00:05:40,576 --> 00:05:42,717
in the subclass.

109
00:05:42,717 --> 00:05:44,718
How can we do this?

110
00:05:44,718 --> 00:05:47,501
For example, imagine
that we want to give our warrior

111
00:05:47,501 --> 00:05:48,779
some good manners,

112
00:05:48,779 --> 00:05:50,868
so that instead of attacking
characters he meet

113
00:05:50,868 --> 00:05:53,301
he greets them instead.

114
00:05:53,671 --> 00:05:56,043
So this is the code
for a pacific character,

115
00:05:56,043 --> 00:05:57,976
we want to keep the default method

116
00:05:57,976 --> 00:06:00,876
where the character
greets his contacts

117
00:06:00,876 --> 00:06:03,087
but for a warrior,

118
00:06:03,087 --> 00:06:05,143
we want to keep a specialized
method

119
00:06:05,143 --> 00:06:09,290
so that the warrior can attack people
he accosts, but before clouting them

120
00:06:09,290 --> 00:06:11,937
we want to be able
to invoke the default method

121
00:06:11,937 --> 00:06:15,782
so as to greet them.

122
00:06:15,782 --> 00:06:17,766
Which means concretely
that we wish

123
00:06:17,766 --> 00:06:20,931
to call the generic method
from the specialized method.

124
00:06:21,451 --> 00:06:25,854
The code allowing
a character to greet another

125
00:06:25,854 --> 00:06:27,798
is indeed already code
in the general method,

126
00:06:27,798 --> 00:06:30,898
so it is useless to
duplicate it in the redefined method,

127
00:06:30,898 --> 00:06:34,708
so it makes more sense to
invoke the default method

128
00:06:34,708 --> 00:06:37,763
without duplicating code.

129
00:06:38,373 --> 00:06:39,826
To access masked
data members

130
00:06:39,826 --> 00:06:42,305
or the original methods
of a superclass,

131
00:06:42,305 --> 00:06:44,918
necessitates a certain
syntax in Java

132
00:06:44,918 --> 00:06:48,687
using the keyword super followed
by a dot operator

133
00:06:48,687 --> 00:06:51,654
and the name of the member in
question: "super.name_member".

134
00:06:52,444 --> 00:06:55,369
In our example, if I want
to invoke the method rencontrer

135
00:06:55,369 --> 00:06:59,797
inherited from Personnage,

136
00:06:59,797 --> 00:07:04,234
then I write "super.rencontrer()",

137
00:07:04,234 --> 00:07:08,475
which means that I am calling
the default method of the superclass.

138
00:07:08,475 --> 00:07:12,339
Of course, it is possible to
follow up with more specific actions.

139
00:07:12,549 --> 00:07:15,167
Invoking a superclass method
is very convenient,

140
00:07:15,167 --> 00:07:18,820
because it avoids duplicating code

141
00:07:18,820 --> 00:07:22,783
in the redefined method.

142
00:07:22,783 --> 00:07:26,972
Invoking a redefined method
with this syntax

143
00:07:26,972 --> 00:07:29,128
allowed us to define a warrior

144
00:07:29,128 --> 00:07:31,038
so as to have more suitable
behavior,

145
00:07:31,038 --> 00:07:35,320
and will first greet his adversary
before showering him with blows,

146
00:07:35,320 --> 00:07:38,069
and this, without
duplicating code.

147
00:07:38,819 --> 00:07:42,551
Note that in Java, it is not possible to
invoke super several times in succession,

148
00:07:43,141 --> 00:07:46,942
and this kind of expression
is forbidden.

149
00:07:50,199 --> 00:07:53,444
This means that if we have

150
00:07:55,574 --> 00:07:57,524
a subclass Sorcier,

151
00:07:57,524 --> 00:08:01,175
that inherits from a subclass Magicien,

152
00:08:01,175 --> 00:08:05,975
that is derived
from a superclass Personnage,

153
00:08:07,129 --> 00:08:13,384
if the method rencontrer
is defined in Personnage,

154
00:08:14,121 --> 00:08:26,264
and again in Magicien,
and again in Sorcier,

155
00:08:27,504 --> 00:08:32,118
then the method rencontrer in Sorcier
cannot avoid the method

156
00:08:32,118 --> 00:08:37,115
inherited from Magicien by
invoking

157
00:08:38,775 --> 00:08:42,719
"super.super.rencontrer".

158
00:08:47,307 --> 00:08:50,510
The designers of Java probably
considered this expression

159
00:08:50,510 --> 00:08:53,793
dangerous that an object
of type "sub-subclass"

160
00:08:53,793 --> 00:08:58,227
be more like an object of type
"super-superclass",

161
00:08:58,227 --> 00:09:02,446
than like an object of its
direct class, its superclass,

162
00:09:02,446 --> 00:09:04,198
which is seen as
weakening

163
00:09:04,198 --> 00:09:06,877
the "is-a" inheritance relationship.

164
00:09:07,543 --> 00:09:09,421
Note that this is not
always limited

165
00:09:09,421 --> 00:09:11,621
in the other OOP languages,

166
00:09:11,621 --> 00:09:15,530
which authorize this
kind of syntax,

167
00:09:15,530 --> 00:09:17,891
namely, that a sub-subclass
can directly call

168
00:09:17,891 --> 00:09:21,198
a method of its super-superclass.

169
00:09:21,638 --> 00:09:23,430
Note that if the
method rencontrer

170
00:09:23,430 --> 00:09:26,594
had not been defined
at this intermediate level,

171
00:09:27,184 --> 00:09:30,721
then "super.rencontrer"
would be valid

172
00:09:30,721 --> 00:09:33,794
and would simply call
the method rencontrer

173
00:09:33,794 --> 00:09:36,230
in the most closely relate superclass
in which it is defined,

174
00:09:36,230 --> 00:09:38,419
and so would indeed have

175
00:09:38,419 --> 00:09:41,223
used the method
from the class Personnage.

176
00:09:41,603 --> 00:09:43,520
And this concludes this video.
