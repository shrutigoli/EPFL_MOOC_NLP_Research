1
00:00:04,164 --> 00:00:06,989
Having considered the notions of
encapsulation and abstraction,

2
00:00:06,989 --> 00:00:09,832
we will, in the following episodes,
consider

3
00:00:09,832 --> 00:00:13,785
a third fundamental notion
in OOP:

4
00:00:13,785 --> 00:00:15,508
inheritance.

5
00:00:15,698 --> 00:00:17,647
Let's start with an example,

6
00:00:17,647 --> 00:00:22,378
and forget, for once, rectangles
and other geometric shapes

7
00:00:22,378 --> 00:00:25,635
to concentrate on
players of a game.

8
00:00:25,635 --> 00:00:28,094
Imagine that we would like
to play a game that involves

9
00:00:28,094 --> 00:00:31,341
warriors, magicians, thieves,
and the like.

10
00:00:31,891 --> 00:00:33,974
How would we represent this?

11
00:00:34,114 --> 00:00:36,288
We could imagine for one
that we have a class for warriors,

12
00:00:36,288 --> 00:00:39,306
a class for thieves, a class for
magicians, and so on.

13
00:00:39,876 --> 00:00:41,656
For a warrior we could imagine

14
00:00:41,656 --> 00:00:44,562
that we could have data members
such as a name,

15
00:00:44,562 --> 00:00:47,981
an energy level, a certain
lifespan, and

16
00:00:48,321 --> 00:00:50,643
certainly a weapon.

17
00:00:51,122 --> 00:00:52,758
As for methods, we
could imagine

18
00:00:52,758 --> 00:00:55,639
that a warrior can meet
other people.

19
00:00:56,399 --> 00:00:59,354
For a thief, he would
also have a name,

20
00:00:59,354 --> 00:01:01,520
an energy level, a lifespan,

21
00:01:01,520 --> 00:01:04,764
and he can also meet other
people, and even steal from them.

22
00:01:05,234 --> 00:01:08,789
As for the magician, he would also
have a name, energy level, lifespan

23
00:01:08,789 --> 00:01:10,581
he could also meet others
and he would maybe

24
00:01:10,581 --> 00:01:13,983
also have a wand instead
of a weapon.

25
00:01:13,983 --> 00:01:17,528
We could also have witches kind
of like magicians

26
00:01:17,528 --> 00:01:20,297
but who would have a
stick as well as a wand.

27
00:01:20,297 --> 00:01:23,280
All these classes would have much
duplicated code,

28
00:01:23,280 --> 00:01:25,441
and would be a waste of time to write
all that,

29
00:01:25,441 --> 00:01:28,243
and most importantly, would be
problematic for maintenance.

30
00:01:28,243 --> 00:01:31,176
Imagine that we do want a
property lifespan anymore,

31
00:01:31,176 --> 00:01:33,318
and instead have life points,

32
00:01:33,318 --> 00:01:36,712
or that the energy level is
not an "int" but a "double".

33
00:01:36,712 --> 00:01:40,391
Then we would have to
revise all the classes that we made.

34
00:01:40,391 --> 00:01:42,854
There is definitely
a better way than this!

35
00:01:43,054 --> 00:01:45,723
This is where the notion of inheritance
comes in:

36
00:01:45,723 --> 00:01:47,767
inheritance solves this type of problem

37
00:01:47,767 --> 00:01:51,350
by grouping together data
members and methods

38
00:01:51,350 --> 00:01:53,979
that are common to each class

39
00:01:53,979 --> 00:01:57,846
into what we will call a superclass.
This class regroups characteristics

40
00:01:57,846 --> 00:02:00,462
that are enriched or
specialized

41
00:02:00,462 --> 00:02:02,965
in its derived classes.

42
00:02:03,335 --> 00:02:06,830
In our class, the superclass would be
a class Personnage (TN: = character)

43
00:02:06,830 --> 00:02:08,920
a generic character which
would by the way

44
00:02:08,920 --> 00:02:11,687
solve one of the problems we had:

45
00:02:11,687 --> 00:02:15,837
the fact that we did not
have a class Personnage.

46
00:02:15,837 --> 00:02:18,281
Anticipating a little,

47
00:02:18,281 --> 00:02:20,949
here is what we could
do using inheritance,

48
00:02:20,949 --> 00:02:23,404
by grouping in the class
Personnage

49
00:02:23,404 --> 00:02:25,636
the properties shared by
the classes:

50
00:02:25,636 --> 00:02:28,995
name, energy, lifespan, as well
as methods, for example

51
00:02:28,995 --> 00:02:32,218
"recontrer" (TN: = meet).

52
00:02:32,218 --> 00:02:33,774
So this superclass groups

53
00:02:33,774 --> 00:02:35,819
together the characteristics
of these characters

54
00:02:35,819 --> 00:02:39,908
which would be inherited
by the thief, the magician, etc.

55
00:02:39,908 --> 00:02:43,349
with each character having
his own particularities, like

56
00:02:43,349 --> 00:02:45,031
a weapon for the warrior,
a wand for the magician,

57
00:02:45,031 --> 00:02:49,034
or a method "voler" (TN: =to steal)
for the thief.

58
00:02:49,034 --> 00:02:52,441
For the magician we could
also have an extension,

59
00:02:52,441 --> 00:02:55,104
a 2nd inheritance

60
00:02:55,104 --> 00:02:58,242
so that a witch is a
sort of magician,

61
00:02:58,242 --> 00:03:01,543
who would have a stick as well
as a wand.

62
00:03:01,543 --> 00:03:05,966
So this is the purpose of 
inheritance in OOP.

63
00:03:05,966 --> 00:03:08,893
It represents an "is-a" relationship,

64
00:03:08,893 --> 00:03:13,397
and avoids that code be
duplicated.

65
00:03:13,397 --> 00:03:16,693
Inheritance also enables
specialized or enriched

66
00:03:16,693 --> 00:03:19,056
classes to be created.

67
00:03:19,056 --> 00:03:21,531
So a superclass is a class

68
00:03:21,531 --> 00:03:25,246
from which subclasses
are derived.

69
00:03:25,246 --> 00:03:27,206
We also say that subclasses
inherit

70
00:03:27,206 --> 00:03:29,643
and we draw an arrow
in this direction.

71
00:03:29,643 --> 00:03:32,463
Subclasses inherit
from superclasses,

72
00:03:32,463 --> 00:03:35,414
and subclasses are
as a result extensions,

73
00:03:35,414 --> 00:03:37,932
either by adding data members
or methods,

74
00:03:37,932 --> 00:03:40,019
or by specializing the
inherited methods,

75
00:03:40,019 --> 00:03:43,102
making them extensions
of the superclass.

76
00:03:43,702 --> 00:03:45,779
Before detailing this
in an example,

77
00:03:45,779 --> 00:03:48,643
let's investigate what a inheritance
relationship implicates.

78
00:03:48,643 --> 00:03:51,697
If a subclass C1 is derived from
a class C

79
00:03:51,697 --> 00:03:54,765
or "inherits" from the class C,

80
00:03:54,765 --> 00:03:57,223
we will say that C1 "is a" C.

81
00:03:57,223 --> 00:03:59,293
that is to say, that the type
is inherited.

82
00:03:59,293 --> 00:04:02,468
So for example, if I
have a variable x, of type C,

83
00:04:02,468 --> 00:04:05,464
and a variable y of type C1,

84
00:04:05,464 --> 00:04:13,426
I can in fact put y in x, because
a C1 y "is a" C.

85
00:04:13,426 --> 00:04:17,389
Moreover, the class C1 inherits
from the set of data members

86
00:04:17,389 --> 00:04:20,646
and methods of C.

87
00:04:20,646 --> 00:04:23,303
When we say the set of
data members and members,

88
00:04:23,303 --> 00:04:26,515
the constructors are not included,
so they are not inherited.

89
00:04:26,515 --> 00:04:29,578
The data members of C
are as a result available

90
00:04:29,578 --> 00:04:34,490
in C1 without having to
redefine them.

91
00:04:34,490 --> 00:04:37,226
Finally, extra data members
or methods can be

92
00:04:37,226 --> 00:04:40,853
added to C1, which is
called enrichment,

93
00:04:40,853 --> 00:04:45,559
and methods inherited from C
can also be redefined in C1,

94
00:04:45,559 --> 00:04:48,083
which is called specialization.

95
00:04:48,083 --> 00:04:50,533
Let's see all this
in an example.

96
00:04:51,063 --> 00:04:54,686
Imagine we make a
superclass Personnage,

97
00:04:54,686 --> 00:04:58,779
with 2 subclasses Guerrier and Voleur
(TN: guerrier = warrior, voleur = thief).

98
00:04:58,779 --> 00:05:02,439
So we said that when a subclass C1,
for example Guerrier,

99
00:05:02,439 --> 00:05:04,844
is created from a superclass C,

100
00:05:04,844 --> 00:05:07,929
so for example here Personnage
the type is inherited.

101
00:05:07,929 --> 00:05:12,671
Actually Guerrier is also
a character,

102
00:05:12,671 --> 00:05:14,463
which allows us to write the
following code.

103
00:05:14,463 --> 00:05:18,565
Suppose that we have declared
a variable p of type Personnage and

104
00:05:18,565 --> 00:05:22,281
a variable g of type Guerrier

105
00:05:22,281 --> 00:05:24,029
that we manipulate and for example

106
00:05:24,029 --> 00:05:27,284
we say that the character p
is the warrior g.

107
00:05:27,284 --> 00:05:29,876
So we put the warrior g
in the character p,

108
00:05:29,876 --> 00:05:34,370
which we are allowed to do
because a warrior is a character.

109
00:05:34,370 --> 00:05:36,361
Of course, we can't do
the contrary and write

110
00:05:36,361 --> 00:05:38,512
"g = p;"

111
00:05:38,512 --> 00:05:41,927
A generic character is
not a warrior,

112
00:05:41,927 --> 00:05:45,076
because characters can also
be thieves or magicians,

113
00:05:45,076 --> 00:05:47,491
and we cannot put
a thief in a warrior,

114
00:05:47,491 --> 00:05:49,322
it doesn't have any meaning.

115
00:05:49,322 --> 00:05:51,179
So here, the relationship
has a certain direction,

116
00:05:51,179 --> 00:05:54,541
it's the warrior who
is a character.

117
00:05:54,541 --> 00:05:56,237
We can also imagine a function

118
00:05:56,237 --> 00:06:00,039
that displays a character,

119
00:06:00,039 --> 00:06:04,602
and we could display g,
which is a warrior here

120
00:06:04,602 --> 00:06:10,481
and is passed as argument to
the function "afficher" as a character,

121
00:06:10,481 --> 00:06:12,877
(the function "afficher" sees
g as a character),

122
00:06:12,877 --> 00:06:16,414
but we can only do this
because a warrior is a character.

123
00:06:17,214 --> 00:06:18,896
A 2nd aspect of inheritance:

124
00:06:18,896 --> 00:06:23,310
Guerrier will inherit, that is to
say, receive, contain

125
00:06:23,310 --> 00:06:26,446
the set of data members
and methods of Personnage.

126
00:06:26,446 --> 00:06:30,030
So for example, if Personnage
had a name, an energy,

127
00:06:30,030 --> 00:06:33,228
a lifespan, and
a method "rencontrer",

128
00:06:33,228 --> 00:06:37,326
and Guerrier inherited
of the class Personnage,

129
00:06:37,326 --> 00:06:41,985
then in Guerrier we would also have
an energy, a lifespan,

130
00:06:41,985 --> 00:06:44,537
without needing to
redefine them,

131
00:06:44,537 --> 00:06:48,034
and also a method rencontrer, so
we could do something like this.

132
00:06:48,034 --> 00:06:51,582
Suppose that here, with a
Guerrier g and Voleur v,

133
00:06:51,582 --> 00:06:53,343
which are characters,

134
00:06:53,343 --> 00:06:58,111
g , of type Guerrier, will inherit
the method rencontrer,

135
00:06:58,111 --> 00:07:00,924
which we could invoke,
if this method is

136
00:07:00,924 --> 00:07:04,003
included in the public
interface of Personnage,

137
00:07:04,003 --> 00:07:08,206
using a syntax "g.rencontrer(v);",

138
00:07:08,206 --> 00:07:13,017
here we pass the thief v as
argument to the method rencontrer,

139
00:07:13,017 --> 00:07:16,310
but what is important here is to
see that this method rencontrer

140
00:07:16,310 --> 00:07:18,755
is visible to g and
can be called by g because

141
00:07:18,755 --> 00:07:22,614
Guerrier has inherited this
method from Personnage.

142
00:07:22,614 --> 00:07:25,846
Likewise, if we had some
method in Guerrier,

143
00:07:25,846 --> 00:07:30,156
we can directly use the data
member energie like this

144
00:07:30,156 --> 00:07:33,229
in a method of Guerrier,
supposing that energie is not private.

145
00:07:33,229 --> 00:07:39,783
So energie is inherited from
Personnage in the class Guerrier

146
00:07:39,783 --> 00:07:42,943
without having to add
any code.

147
00:07:42,943 --> 00:07:46,588
It's done automatically thanks
to inheritance.

148
00:07:46,588 --> 00:07:49,891
The third and last aspect
that we want to focus on

149
00:07:49,891 --> 00:07:52,464
is that even if the members
of a class are inherited,

150
00:07:52,464 --> 00:07:53,795
and are accessible in the
subclasses,

151
00:07:53,795 --> 00:07:56,151
we can always add
data members and

152
00:07:56,151 --> 00:07:59,138
methods which is called
enrichment,

153
00:07:59,138 --> 00:08:02,803
e.g. adding a data member "weapon"
to the class Guerrier,

154
00:08:02,803 --> 00:08:05,468
and we can redefine methods

155
00:08:05,468 --> 00:08:07,485
called specialization,

156
00:08:07,485 --> 00:08:09,727
so for instance, we could redefine

157
00:08:09,727 --> 00:08:12,590
the method rencontrer
of the class Voleur

158
00:08:12,590 --> 00:08:14,124
by saying that when a thief

159
00:08:14,124 --> 00:08:17,549
meets another person, he
also steals, for example.

160
00:08:17,929 --> 00:08:20,142
Inheritance is a paramount
notion

161
00:08:20,142 --> 00:08:21,878
in POO,

162
00:08:21,878 --> 00:08:24,423
because it enables the code to
be organized

163
00:08:24,423 --> 00:08:27,751
to make it more comprehensible

164
00:08:27,751 --> 00:08:30,819
by elucidating structural and
semantical relationships

165
00:08:30,819 --> 00:08:33,164
that exist among the classes,

166
00:08:33,164 --> 00:08:35,647
for example, that a warrior
is a character,

167
00:08:35,647 --> 00:08:38,548
or that a witch is a type of magician.

168
00:08:38,548 --> 00:08:42,812
Inheritance also avoids writing
large sections of code,

169
00:08:42,812 --> 00:08:45,414
called code redundancy.

170
00:08:45,414 --> 00:08:48,853
Be careful in how you use
inheritance, to use it

171
00:08:48,853 --> 00:08:53,007
only in "is-a" relationships,

172
00:08:53,007 --> 00:08:55,688
e.g. a warrior is a character,

173
00:08:55,688 --> 00:08:57,902
but a warrior is not a weapon,

174
00:08:57,902 --> 00:08:59,982
we say a warrior "has a" weapon,

175
00:08:59,982 --> 00:09:03,560
and to represent a
relationship of possession,

176
00:09:03,560 --> 00:09:06,673
we will use a notion from
before: encapsulation.

177
00:09:06,793 --> 00:09:11,229
Therefore, to summarize, a warrior
inherits from the class Personnage

178
00:09:11,229 --> 00:09:16,134
but will also have as encapsulated
data member a weapon.

179
00:09:16,814 --> 00:09:19,796
We saw that a subclass
enherits from a superclass,

180
00:09:19,796 --> 00:09:22,605
inherit means
receive and possess

181
00:09:22,605 --> 00:09:27,023
the data members and methods of this
superclass, except for constructors.

182
00:09:27,023 --> 00:09:29,975
This aspect is transitive,
that is to say if we have

183
00:09:29,975 --> 00:09:32,638
a super-super-class from which
a superclass is derived,

184
00:09:32,638 --> 00:09:34,993
then in the subclass, we
will find all the members

185
00:09:34,993 --> 00:09:38,538
of these 2 classes.

186
00:09:38,538 --> 00:09:41,943
More concretely,
if I have a super-super-class A,

187
00:09:41,943 --> 00:09:46,772
from which a superclass B is derived, 
from which a class C is derived,

188
00:09:46,772 --> 00:09:51,993
we will find in C the members
found in B,

189
00:09:51,993 --> 00:09:55,257
but also those in A, because
B inherits them from A,

190
00:09:55,457 --> 00:09:58,846
and so they are
accessible in B.

191
00:09:58,846 --> 00:10:01,798
So in B, I have the data
members and methods of A,

192
00:10:01,798 --> 00:10:05,762
and by transitivity,
I also have in

193
00:10:05,762 --> 00:10:09,828
C, these same data members
and methods of A.

194
00:10:09,828 --> 00:10:13,826
So in a concrete example, if we
have for instance a class Personnage,

195
00:10:13,826 --> 00:10:16,168
from which a class Magicien
is derived,

196
00:10:16,168 --> 00:10:19,279
and if we say a witch
is a kind of magician,

197
00:10:19,279 --> 00:10:22,571
then the class Sorcier
inherits from the class Magicien.

198
00:10:22,571 --> 00:10:24,334
At this point, in the class Sorcier,

199
00:10:24,334 --> 00:10:28,540
we will also have the
data members for the

200
00:10:28,540 --> 00:10:32,949
name, energy, lifespan
that were inherited along with

201
00:10:32,949 --> 00:10:35,952
the method rencontrer that were
inherited in the magician class

202
00:10:35,952 --> 00:10:39,089
and inherited again in the
class Sorcier

203
00:10:39,089 --> 00:10:44,693
and of course, Sorcier will also
have the member baguette,

204
00:10:44,693 --> 00:10:46,663
inherited from Magicien.

205
00:10:46,663 --> 00:10:48,859
Thus we have something like
this for inheritance,

206
00:10:48,859 --> 00:10:52,479
a progressive enrichment
of each class,

207
00:10:52,479 --> 00:10:55,440
finally resulting in,

208
00:10:55,440 --> 00:10:57,973
if we draw all the relationships
between the classes,

209
00:10:57,973 --> 00:11:02,545
an arborescent graph,
a treelike organization,

210
00:11:02,545 --> 00:11:06,057
where we see the dependencies
between classes,

211
00:11:06,057 --> 00:11:07,618
the "is-a" relationships, and
the relationships of inheritance,

212
00:11:07,618 --> 00:11:11,585
of data members, methods,
and also types,

213
00:11:11,585 --> 00:11:15,936
which we call as whole,
a class hierarchy,

214
00:11:15,936 --> 00:11:18,607
with the most general class,
Personnnage, at the top,

215
00:11:18,607 --> 00:11:21,939
and the most specialized classes
on the bottom.

216
00:11:22,829 --> 00:11:24,817
To summarize, the inheritance
relationship

217
00:11:24,817 --> 00:11:28,414
avoids duplicating code.

218
00:11:28,414 --> 00:11:31,724
Superclasses, resulting from
using "is-a" relationships

219
00:11:31,724 --> 00:11:35,671
in programs,

220
00:11:35,671 --> 00:11:38,743
also called "parent classes"
are more broad,

221
00:11:38,743 --> 00:11:40,852
grouping general
aspects, and so from

222
00:11:40,852 --> 00:11:43,891
them are derived subclasses

223
00:11:43,891 --> 00:11:45,312
also called "child classes",

224
00:11:45,312 --> 00:11:48,211
that receive the set
of data members and methods,

225
00:11:48,211 --> 00:11:51,264
as well as the type of the superclass
that they depend on.

226
00:11:51,714 --> 00:11:54,775
Up to now, this notion of
inheritance has been

227
00:11:54,775 --> 00:11:57,722
presented very conceptually
and theoretically,

228
00:11:57,722 --> 00:11:59,266
but how do we implement it
in a real program,

229
00:11:59,266 --> 00:12:02,628
and make a subclass inherit
from a superclass?

230
00:12:02,628 --> 00:12:05,033
Let's start with a concrete example.

231
00:12:05,033 --> 00:12:08,070
Suppose, that we want to define
a class Rectangle

232
00:12:08,070 --> 00:12:11,469
with a width largeur and
a height hauteur,

233
00:12:11,469 --> 00:12:13,938
and which is also a
FigureGeometrique.

234
00:12:13,938 --> 00:12:17,764
And this class of geometric
shapes also has a position.

235
00:12:17,764 --> 00:12:20,079
So we would have the
following inheritance diagram,

236
00:12:20,079 --> 00:12:24,035
a superclass "FigureGeometrique",
with a data member "position",

237
00:12:24,035 --> 00:12:27,747
and a subclass "Rectangle",
derived from "FigureGeometrique".

238
00:12:27,747 --> 00:12:30,012
A rectangle
is a geometric shape,

239
00:12:30,012 --> 00:12:32,523
and so will have supplementary
data members,

240
00:12:32,523 --> 00:12:34,744
besides the inherited
data member position,

241
00:12:34,744 --> 00:12:36,673
such as largeur
and hauteur that

242
00:12:36,673 --> 00:12:39,293
are defined in Rectangle.

243
00:12:39,293 --> 00:12:42,101
But how do I code all this?

244
00:12:42,101 --> 00:12:46,126
The syntax for a subclass
to inherit from a superclass

245
00:12:46,126 --> 00:12:49,255
is simply to add the
keyword "extends" and

246
00:12:49,255 --> 00:12:50,802
the name of the superclass,

247
00:12:50,802 --> 00:12:54,029
after the heading of the subclass,

248
00:12:54,029 --> 00:12:56,846
so we would have: "class Name_subclass
extends Name_superclass",

249
00:12:56,846 --> 00:12:58,910
and then, as usual,

250
00:12:58,910 --> 00:13:02,314
the definition of the
subclass,

251
00:13:02,314 --> 00:13:04,980
with the definition
of data members and methods

252
00:13:04,980 --> 00:13:06,936
unique to that subclass.

253
00:13:06,936 --> 00:13:09,553
So for example,
if I have a class Rectangle,

254
00:13:09,553 --> 00:13:13,153
that inherits from the
class "FigureGeometrique",

255
00:13:13,153 --> 00:13:14,669
I would write the following:

256
00:13:14,669 --> 00:13:18,087
"class Rectangle extends
FigureGeometrique"

257
00:13:18,087 --> 00:13:21,501
and write the definition
of the class underneath

258
00:13:21,501 --> 00:13:23,023
with, for example,

259
00:13:23,023 --> 00:13:28,397
the 2 data members largeur and
hauteur particular to the class.

260
00:13:28,397 --> 00:13:33,209
The only thing I need to add to
the precedent class definition

261
00:13:33,209 --> 00:13:36,699
for it to inherit from
"FigureGeometrique" is this

262
00:13:36,699 --> 00:13:39,301
section of the code.

263
00:13:40,271 --> 00:13:43,264
In the same way, if we come
back to the example of warriors,

264
00:13:43,264 --> 00:13:45,494
that inherit from characters,

265
00:13:45,494 --> 00:13:47,670
we would have a class
Personnage previously

266
00:13:47,670 --> 00:13:50,997
defined, and the way to

267
00:13:50,997 --> 00:13:53,368
derive the class Guerrier
from Personnage

268
00:13:53,368 --> 00:13:57,903
is simply by specifying:
"class Guerrier extends Personnage",

269
00:13:57,903 --> 00:14:00,505
followed

270
00:14:00,505 --> 00:14:03,475
by the specific definition of the
class Guerrier,

271
00:14:03,475 --> 00:14:08,797
such as defining a data
member for weapons.

272
00:14:09,707 --> 00:14:12,105
So this concludes this
introduction

273
00:14:12,105 --> 00:14:15,506
to an important concept in
OOP: inheritance.

274
00:14:15,506 --> 00:14:17,238
In the next episodes,

275
00:14:17,238 --> 00:14:20,354
we will continue to deepen
our understanding of this concept

276
00:14:20,354 --> 00:14:22,189
from a practical point of view,

277
00:14:22,189 --> 00:14:24,739
in how it is implemented
in real code.
