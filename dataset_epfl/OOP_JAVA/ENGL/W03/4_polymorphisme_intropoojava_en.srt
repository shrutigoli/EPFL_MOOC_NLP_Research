1
00:00:04,361 --> 00:00:07,306
Now you are acquainted with
the fundamental notions in OOP of

2
00:00:07,306 --> 00:00:10,117
encapsulation, abstraction,
and inheritance.

3
00:00:10,117 --> 00:00:12,832
Let's move on to another
important concept:

4
00:00:12,832 --> 00:00:14,103
polymorphism.

5
00:00:14,103 --> 00:00:17,128
In general terms, polymorphism
provides that the same code

6
00:00:17,128 --> 00:00:20,814
can automatically adapt itself to
the type of the data to which it is applied.

7
00:00:20,916 --> 00:00:24,731
This is important because it
allows code to be much more generic:

8
00:00:24,731 --> 00:00:28,793
it can be written the same way
for different types of data.

9
00:00:29,153 --> 00:00:32,214
Note that this video is
only a brief introduction to polymorphism.

10
00:00:32,214 --> 00:00:34,717
We will be able to come back
to this concept in more detail

11
00:00:34,717 --> 00:00:36,266
in the episodes next week.

12
00:00:36,708 --> 00:00:39,298
Let's take up our introductive
example to inheritance.

13
00:00:39,456 --> 00:00:41,752
Suppose that we have a
hierarchy of characters

14
00:00:41,752 --> 00:00:44,966
and that we want to program
a game where a group of

15
00:00:44,966 --> 00:00:48,765
different characters meet
a central figure.

16
00:00:49,366 --> 00:00:50,610
How do we implement this?

17
00:00:50,796 --> 00:00:53,602
The idea is to have a group
of characters that we could

18
00:00:53,602 --> 00:00:58,088
for example store in an array

19
00:00:58,088 --> 00:01:02,005
to simplify, a array of fixed size,
and we want to ensure that these

20
00:01:02,005 --> 00:01:04,139
characters meet one by
one the principle character.

21
00:01:04,997 --> 00:01:07,719
So we would program
each encounter

22
00:01:07,719 --> 00:01:09,039
using a loop,

23
00:01:09,039 --> 00:01:13,316
so as to allow each character
of the group

24
00:01:13,316 --> 00:01:15,638
to meet the principle character
in turn.

25
00:01:16,308 --> 00:01:19,064
The main idea here is
that in an array of characters,

26
00:01:19,064 --> 00:01:21,170
we can have different characters.

27
00:01:21,527 --> 00:01:24,639
For instance, the first entry
in our table could be a thief,

28
00:01:24,639 --> 00:01:27,025
the second, a warrior,
the third, a witch.

29
00:01:27,887 --> 00:01:29,845
And so our first question is,

30
00:01:29,845 --> 00:01:32,803
since Java is a strong typing
programming language,

31
00:01:32,803 --> 00:01:35,975
which implies that everything on the left
of the assignment operator =

32
00:01:35,975 --> 00:01:38,875
has to be of the same type as
that on the right,

33
00:01:39,908 --> 00:01:42,942
"Is this requirement fulfilled
here?"

34
00:01:42,942 --> 00:01:45,183
"Are we allowed to put thieves, 
warriors, witches, different,

35
00:01:45,183 --> 00:01:46,768
sub-classes of the class Personnage
in an array of type Personnage?"

36
00:01:47,409 --> 00:01:50,687
The answer is in fact "yes".
Actually, when we write an assigment

37
00:01:50,687 --> 00:01:57,996
where we assign  to a variable of type
superclass a reference to an object

38
00:01:57,996 --> 00:02:02,163
of type subclass, this is
not in contradiction with the requirement

39
00:02:02,163 --> 00:02:04,683
that what is on the right of =
has to be of the same type

40
00:02:04,799 --> 00:02:07,936
as that on the left thanks to
inheritance of types

41
00:02:07,936 --> 00:02:10,630
in a class hierarchy that
we studied

42
00:02:10,630 --> 00:02:12,257
on our last videos.

43
00:02:12,572 --> 00:02:15,852
So, an object of a subclass
here, an object of type Sorcier,

44
00:02:15,852 --> 00:02:19,675
inherits the type of its superclass
which is Personnage.

45
00:02:20,337 --> 00:02:24,047
Because inheritance is transitive,
an object of a subclass

46
00:02:24,047 --> 00:02:28,213
inherits through transitivity
all the types of its progenitors,

47
00:02:28,213 --> 00:02:29,985
and can have several types.

48
00:02:30,397 --> 00:02:33,402
These are aspects already
considered in other videos,

49
00:02:33,402 --> 00:02:37,075
but are important enough
to have to refresh.

50
00:02:37,927 --> 00:02:40,137
Our outline of the program is
correct here:

51
00:02:40,137 --> 00:02:43,486
we are allowed to stock in
an array of characters, characters

52
00:02:43,486 --> 00:02:47,306
of different types, which has
the advantage of being able

53
00:02:47,306 --> 00:02:49,876
to manipulate in one
combined way like here,

54
00:02:49,876 --> 00:02:51,164
with a loop 'for'.

55
00:02:51,870 --> 00:02:54,512
So let's see what happens
when characters

56
00:02:54,512 --> 00:02:59,124
meet the principle character,
particularly for certain

57
00:02:59,124 --> 00:03:03,180
subclasses of Personnage that have
a peculier way of encountering someone.

58
00:03:04,040 --> 00:03:06,803
We examined before how

59
00:03:06,803 --> 00:03:10,224
a subclass can redefine
a method in its

60
00:03:10,224 --> 00:03:11,458
superclass.

61
00:03:11,834 --> 00:03:14,812
And we took the example
of a warrior who, when he

62
00:03:14,812 --> 00:03:19,998
encountered someone, would clobber him
while other characters would perhaps

63
00:03:19,998 --> 00:03:23,412
merrily greet the other person.

64
00:03:24,036 --> 00:03:26,197
The problem we have now is

65
00:03:26,197 --> 00:03:29,963
if we store an object of type
Guerrier, warrior, in a variable

66
00:03:29,963 --> 00:03:34,366
of type Personnage, what happens
when we invoke the method rencontrer

67
00:03:34,366 --> 00:03:35,875
with this variable unPersonage?

68
00:03:37,895 --> 00:03:41,166
Will it be the method recontrer
of the subclass that wil be invoked?

69
00:03:41,793 --> 00:03:44,036
Or the method of the superclass?

70
00:03:45,129 --> 00:03:48,266
This is exactly the same problem
as in the introductory example,

71
00:03:48,266 --> 00:03:52,395
because we stock an object of type
Guerrier in an entry of an array

72
00:03:52,395 --> 00:03:55,246
of type Personnage, that is
a collection of type Personnage.

73
00:03:55,697 --> 00:03:58,897
It is important to know here
if rencontrer will result in

74
00:03:58,897 --> 00:04:02,069
a simple greeting or
a violent act.

75
00:04:02,338 --> 00:04:05,361
We can examine this question
from 2 perspectives.

76
00:04:05,361 --> 00:04:08,347
We can first of all consider that
the type of the variable

77
00:04:08,347 --> 00:04:11,410
on which is invoked the method
will determine

78
00:04:11,410 --> 00:04:12,911
which method to use.

79
00:04:13,436 --> 00:04:17,623
Here, the type of the variable on which
is invoked the method

80
00:04:17,623 --> 00:04:21,207
is Personnage.
Then with this perpective,

81
00:04:21,207 --> 00:04:25,099
to decide the method we will 
look for the method in the class

82
00:04:25,099 --> 00:04:29,707
Personnage, and so the encounter
will result in mere greetings.

83
00:04:30,342 --> 00:04:34,027
This way of solving this problem

84
00:04:34,027 --> 00:04:37,041
of finding which variable goes with
which method

85
00:04:37,041 --> 00:04:40,296
is called in programming,
the "...".

86
00:04:40,485 --> 00:04:43,369
We speak of static resolution because
we don't need to wait

87
00:04:43,369 --> 00:04:47,317
for the program to be executed
to make the choice of the method

88
00:04:47,317 --> 00:04:48,242
recontrer to apply here.

89
00:04:49,104 --> 00:04:52,276
If, by simply reading the code
when the program compiles

90
00:04:52,276 --> 00:04:55,302
we can know unPersonnage is of
type Personnage,

91
00:04:55,302 --> 00:04:58,045
consequently, it's the method
rencontrer of Personnage

92
00:04:58,045 --> 00:04:59,153
that is applied.

93
00:04:59,570 --> 00:05:02,392
In summary, we speak of
static resolution when it's

94
00:05:02,392 --> 00:05:06,576
the apparent type of the variable
that determines which method

95
00:05:06,576 --> 00:05:07,763
to apply.

96
00:05:08,273 --> 00:05:11,472
Static resolution exists in certain
languages, but not

97
00:05:11,472 --> 00:05:13,456
the perspective used in
Java.

98
00:05:14,735 --> 00:05:17,937
The 2nd perspective is
"dynamic resolution of links"

99
00:05:17,937 --> 00:05:21,497
where will will consider that it
is the effective type, that is,

100
00:05:21,497 --> 00:05:25,611
the type that is stored inside
the variable, that will determine

101
00:05:25,611 --> 00:05:27,535
which method to apply.

102
00:05:28,102 --> 00:05:30,845
In our example, the
variable unPersonnage is evidently

103
00:05:30,890 --> 00:05:35,276
of type Personnage, but contains
a reference to an object of type Guerrier.

104
00:05:35,276 --> 00:05:38,853
Because it is the type contained
in the variable that is determinant,

105
00:05:38,853 --> 00:05:42,110
in this case we will choose

106
00:05:42,110 --> 00:05:43,532
the method rencontrer of
the class Guerrier.

107
00:05:44,171 --> 00:05:47,597
So here, the character encountered
will not only be greeted,

108
00:05:47,597 --> 00:05:49,332
but will also endure several
blows.

109
00:05:49,826 --> 00:05:52,601
We speak of dynamic resolution
because in general, it's during

110
00:05:52,601 --> 00:05:55,881
the program's execution that
we will be able to determine

111
00:05:55,881 --> 00:05:57,262
what a variable contains
in fact.

112
00:05:57,817 --> 00:06:01,548
So there are 2 ways of resolving
methods in programming:

113
00:06:01,548 --> 00:06:06,353
statique resolution and dynamic
resolution.

114
00:06:06,897 --> 00:06:09,951
Certain languages offer
the choice between the two,

115
00:06:09,951 --> 00:06:12,808
that is we can choose if we want
to use static resolution or

116
00:06:12,808 --> 00:06:14,659
dynamic resolution.

117
00:06:15,026 --> 00:06:18,739
In Java, this choice is not given,
it's always dynamic resolution

118
00:06:18,739 --> 00:06:21,125
that is used.

119
00:06:22,527 --> 00:06:25,603
Thus it is the effective type
which is stored in the variable

120
00:06:25,603 --> 00:06:29,143
rather than the apparent type
of the variable that will determine

121
00:06:29,458 --> 00:06:32,465
the method to apply,
and so, in our example,

122
00:06:32,465 --> 00:06:36,967
the warrior will fatally strike
the character he meets.

123
00:06:37,657 --> 00:06:41,401
To close, let's summarize and
synthesize with an example

124
00:06:41,401 --> 00:06:43,274
similar to the introductory one.

125
00:06:43,502 --> 00:06:47,867
Suppose that we have a class Jeu
which contains a data member

126
00:06:47,867 --> 00:06:52,064
of type Personnage that would
be the principle player, and

127
00:06:52,064 --> 00:06:55,639
another data member, an array of
type Personnage, that would

128
00:06:55,639 --> 00:06:57,422
contain the opponents
that will meet the player.

129
00:06:58,172 --> 00:07:01,419
The class Jeu contains a method
public tourDeJeu that

130
00:07:01,419 --> 00:07:04,110
ensures that each adversary meets
in turn the principle player.

131
00:07:04,644 --> 00:07:07,458
Suppose that in a constructor
of the class Jeu,

132
00:07:07,458 --> 00:07:10,485
the array is filled like this:

133
00:07:10,485 --> 00:07:13,516
the first entry is a witch

134
00:07:13,516 --> 00:07:15,044
and the second a warrior.

135
00:07:15,630 --> 00:07:20,011
Suppose, like in other examples,
that a witch

136
00:07:20,011 --> 00:07:24,226
simply meets another character
by greeting them,

137
00:07:24,226 --> 00:07:28,371
and that the warrior encounters
others

138
00:07:28,371 --> 00:07:29,546
by striking them.

139
00:07:30,038 --> 00:07:33,941
If a user of the class Jeu
declares a variable leJeu,

140
00:07:33,941 --> 00:07:36,956
of type Jeu, and that it invokes the
method tourDeJeu on this variable,

141
00:07:36,956 --> 00:07:38,116
what happens?

142
00:07:39,429 --> 00:07:42,847
If a static resolution is possible,

143
00:07:42,847 --> 00:07:46,143
the apparent
type of variables is determinant,

144
00:07:46,143 --> 00:07:47,541
so Personnage is determinant.

145
00:07:47,828 --> 00:07:50,883
In this case, the player
will be greeted twice:

146
00:07:50,883 --> 00:07:53,599
once by the warrior
and once by the witch.

147
00:07:54,009 --> 00:07:58,478
But with a dynamic resolution,
the method rencontrer will adapt itself

148
00:07:58,478 --> 00:08:02,517
to the type of the variable's contents,
that is, the entry

149
00:08:02,517 --> 00:08:03,292
of the array.

150
00:08:03,590 --> 00:08:07,729
It is this effective type that is decisive,
and so here, the player

151
00:08:07,729 --> 00:08:10,144
will be greeted by the witch,
but attacked by the warrior.

152
00:08:12,106 --> 00:08:15,283
This second option,
dynamic resolution,

153
00:08:16,089 --> 00:08:17,101
is what is always used in Java.

154
00:08:17,340 --> 00:08:20,386
So, this concludes this little
introduction to polymorphism in Java.

155
00:08:20,386 --> 00:08:23,547
In the next episode, we will
be able to come back to

156
00:08:23,547 --> 00:08:25,593
this notion in more detail.
