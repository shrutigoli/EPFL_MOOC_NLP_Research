1
00:00:04,002 --> 00:00:05,559
In this video

2
00:00:05,559 --> 00:00:07,409
we will continue the topic
of inheritance

3
00:00:07,409 --> 00:00:08,827
and will consider in this
context

4
00:00:08,827 --> 00:00:10,805
the notion of protected
access rights.

5
00:00:10,805 --> 00:00:14,240
You have seen that the accessibility
of a class's member

6
00:00:14,240 --> 00:00:16,918
--a data member or a method--

7
00:00:16,918 --> 00:00:18,934
can either be "public"
which means

8
00:00:18,934 --> 00:00:21,113
that it can be used
without restriction

9
00:00:21,113 --> 00:00:24,340
whether inside or
outside a class,

10
00:00:24,340 --> 00:00:27,863
or it can be private, which means
that the member

11
00:00:27,863 --> 00:00:30,760
can only be directly
accessed inside the class.

12
00:00:30,760 --> 00:00:34,036
In Java, there is also
the access right "by default"

13
00:00:34,036 --> 00:00:36,944
if no access modifier
is specified

14
00:00:36,944 --> 00:00:39,772
in front of the member's
declaration

15
00:00:39,772 --> 00:00:42,409
and in this case, the member
is visible

16
00:00:42,409 --> 00:00:44,624
from any class in
the same package.

17
00:00:44,624 --> 00:00:47,024
This is also the case
for the default package

18
00:00:47,024 --> 00:00:49,166
that you have frequently
used

19
00:00:49,166 --> 00:00:50,569
in the excercizes.

20
00:00:50,569 --> 00:00:53,537
Note, that we have prepared a
PDF complement on packages

21
00:00:53,537 --> 00:00:57,039
that is available on the
course's website.

22
00:00:57,039 --> 00:00:59,075
The question that we
ask now is

23
00:00:59,075 --> 00:01:01,890
what about access rights
in a hierarchy of classes?

24
00:01:01,890 --> 00:01:04,745
Suppose that we have
a superclass A

25
00:01:04,745 --> 00:01:07,453
from which is derived a subclass B.

26
00:01:10,501 --> 00:01:13,291
Suppose that the superclass

27
00:01:14,814 --> 00:01:18,050
includes the declaration
of a data member "a"

28
00:01:18,050 --> 00:01:20,595
that is private.

29
00:01:20,595 --> 00:01:23,296
Since we have always

30
00:01:23,296 --> 00:01:25,393
declared variables private
up to now,

31
00:01:25,393 --> 00:01:27,368
our question is:

32
00:01:27,368 --> 00:01:30,449
"Is this data member
accessible

33
00:01:30,449 --> 00:01:33,508
in a method of the class B?"

34
00:01:39,027 --> 00:01:42,546
For example, could we write
something like this

35
00:01:42,546 --> 00:01:44,910
in the class B?

36
00:01:44,910 --> 00:01:46,926
We have seen that due
to inheritance,

37
00:01:46,926 --> 00:01:49,056
the subclass B has

38
00:01:49,056 --> 00:01:51,623
a data member "a"
inherited from A,

39
00:01:51,623 --> 00:01:54,623
but the question is,
"Can B use "a" freely,

40
00:01:54,623 --> 00:01:57,710
and use it directly in
its own methods?"

41
00:01:57,710 --> 00:02:01,006
However, as we saw,
the private access modifier

42
00:02:01,006 --> 00:02:03,457
only insures the
visiblity inside the class

43
00:02:03,457 --> 00:02:05,245
in which the member
is defined.

44
00:02:05,245 --> 00:02:09,284
Which means that "a" can
only be used here directly

45
00:02:09,284 --> 00:02:11,720
in the methods
of the class A.

46
00:02:11,720 --> 00:02:14,818
Which then means
that this is not allowed.

47
00:02:14,818 --> 00:02:18,115
So we find paradoxically

48
00:02:18,115 --> 00:02:21,510
that the class B inherits
from A and has at its disposal

49
00:02:21,510 --> 00:02:24,203
a member variable "a"

50
00:02:24,203 --> 00:02:27,216
but cannot use it freely,

51
00:02:27,216 --> 00:02:29,217
accessing it directly

52
00:02:29,217 --> 00:02:31,397
like here in this case.

53
00:02:31,397 --> 00:02:33,434
Because it is perhaps intuitive

54
00:02:33,434 --> 00:02:36,709
that a subclass has at its disposal
directly all of its data members

55
00:02:36,709 --> 00:02:38,963
defined in the class itself

56
00:02:38,963 --> 00:02:41,648
but also those inherited
from a superclass,

57
00:02:41,648 --> 00:02:44,326
there exists another
access right

58
00:02:44,326 --> 00:02:46,510
which is "protected".

59
00:02:46,510 --> 00:02:49,852
When a member is declared
"protected" in a given class

60
00:02:49,852 --> 00:02:52,670
it is consequently accessible
directly from

61
00:02:52,670 --> 00:02:54,760
any class of its descendants.

62
00:02:54,760 --> 00:02:56,791
The access right "protected"
in Java

63
00:02:56,791 --> 00:02:59,530
is specified with the keyword
"protected".

64
00:02:59,530 --> 00:03:03,604
So, replacing "private" with "protected"

65
00:03:03,604 --> 00:03:05,958
in this case,

66
00:03:05,958 --> 00:03:08,652
renders this syntax valid.

67
00:03:09,392 --> 00:03:13,638
Note that a protected access
enables a member to be seen

68
00:03:13,638 --> 00:03:16,315
in other classes
of the package

69
00:03:16,315 --> 00:03:19,060
containing the class
with the protected member.

70
00:03:19,060 --> 00:03:22,388
Schematically, here is how
this can be summarized,

71
00:03:22,388 --> 00:03:24,952
so suppose that we have
a protected member

72
00:03:24,952 --> 00:03:28,010
in a class defined
in a certain package

73
00:03:28,010 --> 00:03:31,208
then this protected member
is directly accessible

74
00:03:31,208 --> 00:03:35,049
in all the classes
descendant from A

75
00:03:35,049 --> 00:03:38,756
whether they are in the
same package or not

76
00:03:38,756 --> 00:03:41,724
which means that in
all the classes derived from A,

77
00:03:41,724 --> 00:03:44,676
this access is possible.

78
00:03:44,676 --> 00:03:47,601
And what if there
isn't any dependency?

79
00:03:47,601 --> 00:03:51,812
Well, in Java, a protected member
is also accessible

80
00:03:51,812 --> 00:03:55,005
in all the classes in
the same package

81
00:03:55,005 --> 00:03:57,698
as the class containing
the protected member

82
00:03:57,698 --> 00:04:00,833
even if they are not linked
by inheritance.

83
00:04:00,833 --> 00:04:04,699
For example, the class C,
doesn't have any relationship

84
00:04:04,699 --> 00:04:06,864
with the class A, but it is in
the same package,

85
00:04:06,864 --> 00:04:09,352
hence a method from C

86
00:04:09,352 --> 00:04:12,166
can directly access
a protected data member of A

87
00:04:12,166 --> 00:04:13,837
through any instance of A,

88
00:04:13,837 --> 00:04:15,529
without having to use
another method.

89
00:04:15,529 --> 00:04:17,565
This access is possible.

90
00:04:17,565 --> 00:04:20,828
On the other hand, a class
in another package,

91
00:04:20,828 --> 00:04:23,184
and does not have an
inheritance relationship

92
00:04:23,184 --> 00:04:26,125
with the class in which
the protected member is

93
00:04:26,125 --> 00:04:28,504
can not access the
protected data members.

94
00:04:28,504 --> 00:04:31,554
Here, for example, the
class E cannot access

95
00:04:31,554 --> 00:04:35,254
the protected member "a"
through an instance of A.

96
00:04:36,074 --> 00:04:38,912
The access modifier "protected"
is dangerous for encapsulation

97
00:04:38,912 --> 00:04:40,792
namely in that it allows

98
00:04:40,792 --> 00:04:43,173
all programmers of 
extensions of the class A,

99
00:04:43,173 --> 00:04:45,909
so all programmers with
classes that inherit from A

100
00:04:45,909 --> 00:04:49,046
to access protected members
as if they were public

101
00:04:49,046 --> 00:04:52,415
which results in strong
dependencies between

102
00:04:52,415 --> 00:04:54,930
because the programmer
of the class A

103
00:04:54,930 --> 00:04:57,625
cannot freely modify
the class's implementation details

104
00:04:57,625 --> 00:04:59,054
for the protected members

105
00:04:59,054 --> 00:05:02,379
without the programmer of
class D being disturbed.

106
00:05:02,379 --> 00:05:04,232
The default access right

107
00:05:04,232 --> 00:05:07,804
in which case no access modifier
 is specified in front of the

108
00:05:07,804 --> 00:05:09,469
member's declaration,

109
00:05:09,469 --> 00:05:11,882
is more restrictive

110
00:05:11,882 --> 00:05:13,266
than being private

111
00:05:13,266 --> 00:05:15,559
in a package other
than the default package

112
00:05:15,559 --> 00:05:18,622
to the effect that this kind
of access is invalid.

113
00:05:20,260 --> 00:05:22,963
With a default access,
members can only be 

114
00:05:22,963 --> 00:05:25,637
accessed in the classes
of the same package.

115
00:05:25,637 --> 00:05:27,192
The default access

116
00:05:27,192 --> 00:05:29,387
even though it is more
restrictive than protected access

117
00:05:29,387 --> 00:05:31,288
hinders a good encapsulation

118
00:05:31,288 --> 00:05:33,578
because it enables an
open access

119
00:05:33,578 --> 00:05:36,208
from all classes
of a package.

120
00:05:36,208 --> 00:05:38,768
To summarize this discussion,

121
00:05:38,768 --> 00:05:41,841
a subclass cannot access
private members

122
00:05:41,841 --> 00:05:43,440
inherited from superclasses,

123
00:05:43,440 --> 00:05:45,452
and to use them

124
00:05:45,452 --> 00:05:48,145
even if through inheritance
the subclass has them

125
00:05:48,145 --> 00:05:50,770
it has to use
getters or setters

126
00:05:50,770 --> 00:05:52,332
provided in the superclass.

127
00:05:52,332 --> 00:05:55,888
If a superclass wants to give access
to a member to its subclasses,

128
00:05:55,888 --> 00:05:58,678
then it can declare it protected.

129
00:05:58,678 --> 00:06:02,566
But be careful, this
interferes with a good encapsulation.

130
00:06:02,566 --> 00:06:07,282
In one word, protected member variables
are not recommended.

131
00:06:07,282 --> 00:06:10,800
Finally, to understand
the access modifier protected,

132
00:06:10,800 --> 00:06:14,670
you have to grasp
that it is an extension of

133
00:06:14,670 --> 00:06:17,232
of the private sphere
when we are outside of subclasses

134
00:06:17,232 --> 00:06:19,700
and outside of the same package.

135
00:06:19,700 --> 00:06:22,612
So to take a concrete example,

136
00:06:22,612 --> 00:06:25,006
let's examine again the hierarchy
of characters

137
00:06:25,006 --> 00:06:27,848
with a subclass Guerrier

138
00:06:27,848 --> 00:06:30,119
derived from a superclass Personnage.

139
00:06:30,119 --> 00:06:33,348
So imagine
that the class Personnage

140
00:06:33,348 --> 00:06:36,053
was defined in a certain package

141
00:06:40,638 --> 00:06:42,544
"P1" for example.

142
00:06:42,548 --> 00:06:45,238
Whichever package
it is defined in,

143
00:06:45,238 --> 00:06:48,525
the subclass Guerrier,
due to inheritance,

144
00:06:48,525 --> 00:06:51,800
will be able to directly access
the protected members

145
00:06:51,800 --> 00:06:54,090
in the methods of

146
00:06:54,090 --> 00:06:55,937
the class Guerrier,

147
00:06:55,937 --> 00:06:57,809
which is in the class
Personnage,

148
00:06:57,809 --> 00:07:00,284
and directly use this
protected member variable.

149
00:07:00,284 --> 00:07:04,013
On the other hand,
if I am in another package,

150
00:07:04,813 --> 00:07:08,699
for example the package P2,

151
00:07:09,499 --> 00:07:12,543
and in a class without
any parental link

152
00:07:12,543 --> 00:07:14,295
with the class
Personnage,

153
00:07:14,295 --> 00:07:16,279
for example, a class Jeu,

154
00:07:16,279 --> 00:07:19,308
which uses in its
principal program,

155
00:07:19,308 --> 00:07:22,946
a few characters in the hierarchy,

156
00:07:23,726 --> 00:07:26,594
such as in the main method

157
00:07:26,594 --> 00:07:29,735
declaring an instance of Guerrier,

158
00:07:34,516 --> 00:07:38,969
in this case, the data member
energie cannot be accessed

159
00:07:40,189 --> 00:07:41,902
in the method main

160
00:07:43,362 --> 00:07:46,076
with an instance of Guerrier.

161
00:07:46,076 --> 00:07:48,760
For classes not linked
by inheritance,

162
00:07:48,760 --> 00:07:51,044
with the superclass Personnage

163
00:07:51,044 --> 00:07:53,335
and that are not in the
same package,

164
00:07:53,335 --> 00:07:58,786
for them, it is as if
the protected data member was private.

165
00:07:58,786 --> 00:08:01,099
To recap on access rights,

166
00:08:01,099 --> 00:08:03,866
so public members are
accessible without restriction

167
00:08:03,866 --> 00:08:05,846
by all users of

168
00:08:05,846 --> 00:08:07,643
the class in which they
were defined,

169
00:08:07,643 --> 00:08:10,998
protected members are
intended for users who extend the class,

170
00:08:10,998 --> 00:08:13,686
by inheritance or who
work in the same package

171
00:08:13,686 --> 00:08:16,765
but can hinder inhibit
good encapsulation,

172
00:08:16,765 --> 00:08:20,605
and finally, private members are
reserved for the class programmers

173
00:08:20,605 --> 00:08:23,336
which reflect the internal
structure of the class

174
00:08:23,336 --> 00:08:25,910
and cannot be modified
without disturbing

175
00:08:25,910 --> 00:08:29,457
the class users
or users that extend the class.

176
00:08:29,457 --> 00:08:31,846
So this concludes this episode

177
00:08:31,846 --> 00:08:34,635
on access rights
in a class hierarchy.
