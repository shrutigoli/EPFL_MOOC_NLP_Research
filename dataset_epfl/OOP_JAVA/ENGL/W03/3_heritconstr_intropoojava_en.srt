1
00:00:04,059 --> 00:00:06,249
In this episode,
will will examine how

2
00:00:06,249 --> 00:00:08,985
inheritance effects
constructors,

3
00:00:08,985 --> 00:00:10,573
that is to say, how
instances are initialized.

4
00:00:11,408 --> 00:00:14,396
We saw in other videos
on constructors

5
00:00:14,396 --> 00:00:16,520
that in an instantiation
of a subclass,

6
00:00:16,520 --> 00:00:18,522
the data members have
to be initialized.

7
00:00:18,522 --> 00:00:19,974
Which is what we do

8
00:00:19,974 --> 00:00:24,368
when, for example, we declare
an instance "r" of the class Rectangle

9
00:00:25,088 --> 00:00:29,016
by passing the
width and height.

10
00:00:30,047 --> 00:00:32,988
This is done with a constructor

11
00:00:33,273 --> 00:00:36,096
which is in charge of
initializing the data members.

12
00:00:36,527 --> 00:00:40,235
But if the class Rectangle
inherits from a class FigureGeometrique,

13
00:00:43,994 --> 00:00:46,924
then the class Rectangle receives
the set of data members

14
00:00:46,924 --> 00:00:48,727
from the class FigureGeometrique.

15
00:00:49,115 --> 00:00:52,299
So the constructors of the class
Rectangle are to

16
00:00:52,299 --> 00:00:55,089
initialize the data members
of the class Rectangle,

17
00:00:55,089 --> 00:00:59,971
including those inherited
from the superclass FigureGeometrique.

18
00:01:00,726 --> 00:01:04,279
However, it shouldn't be
the class programmer of Rectangle

19
00:01:04,279 --> 00:01:06,675
who has to initialize

20
00:01:06,762 --> 00:01:09,651
the data members of
the class FigureGeometrique himself,

21
00:01:09,651 --> 00:01:12,120
and he would perhaps even
be incapable of doing this

22
00:01:12,120 --> 00:01:15,134
if the superclass had
private data members

23
00:01:15,134 --> 00:01:16,955
which he couldn't access.

24
00:01:16,955 --> 00:01:19,884
So, how can the designer
of the subclass Rectangle

25
00:01:20,017 --> 00:01:24,163
initialize the data members
of the superclass FigureGeometrique?

26
00:01:24,979 --> 00:01:28,515
To do this, he has to call in the
constructor of the class Rectangle

27
00:01:28,515 --> 00:01:31,812
the constructor of the
class FigureGeometrique.

28
00:01:32,390 --> 00:01:35,529
So that the initialization of the
inherited data members 

29
00:01:35,529 --> 00:01:38,504
be done by calling the
constructor of the superclass

30
00:01:38,504 --> 00:01:40,573
in the constructor of the subclass.

31
00:01:41,196 --> 00:01:42,976
Let's see how this is
done in Java.

32
00:01:43,302 --> 00:01:45,633
To call the constructor
of a superclass

33
00:01:45,633 --> 00:01:47,347
in the constructor of a subclass,

34
00:01:47,347 --> 00:01:50,288
you use the method "super".

35
00:01:50,449 --> 00:01:52,538
And this method super
has to be called

36
00:01:52,538 --> 00:01:55,979
in the very beginning of the body
of the constructor of the subclass.

37
00:01:56,249 --> 00:01:57,722
So the syntax  will look like this;

38
00:01:57,722 --> 00:01:59,613
in the subclass constructor,

39
00:01:59,613 --> 00:02:01,414
that can take several
different parameters,

40
00:02:01,414 --> 00:02:05,277
in the opening of its body,
we will have the invocation

41
00:02:05,277 --> 00:02:08,297
of the constructors of the superclass

42
00:02:08,297 --> 00:02:11,507
by simply writing like this
the keyword "super"

43
00:02:11,507 --> 00:02:15,802
and passing to the
necessary arguments

44
00:02:15,802 --> 00:02:18,761
to the superclass constructor
we want to invoke.

45
00:02:19,131 --> 00:02:22,507
Thereupon, after this first line,

46
00:02:22,880 --> 00:02:26,570
we can continue to initialize the
data members of the superclass.

47
00:02:27,451 --> 00:02:31,425
Note that if the superclass
has a default constructor,

48
00:02:31,425 --> 00:02:34,327
it is not necessary to
explicitly call

49
00:02:34,327 --> 00:02:36,652
the superclass constructor,

50
00:02:36,652 --> 00:02:39,438
because the compiler
automatically calls

51
00:02:39,438 --> 00:02:41,618
the default superclass constructor.

52
00:02:42,381 --> 00:02:43,875
Lets thoroughly examine
an example.

53
00:02:44,327 --> 00:02:48,001
First of all, if the superclass doesn't
have a default constructor,

54
00:02:48,001 --> 00:02:52,106
then the class absolutely
has to invoke

55
00:02:52,106 --> 00:02:54,738
a superclass constructor.

56
00:02:54,738 --> 00:02:57,449
Evidently, this implies that
the subclass also has

57
00:02:57,449 --> 00:02:59,873
an explicit constructor

58
00:02:59,873 --> 00:03:03,791
where we can write this
call of the superclass constructor.

59
00:03:04,313 --> 00:03:07,759
For example, if we conside
the class FigureGeometrique,

60
00:03:08,529 --> 00:03:13,108
with no default constructor,
but an explicit constructor

61
00:03:13,296 --> 00:03:15,519
which receives 2 parameters,

62
00:03:15,519 --> 00:03:18,461
to initialize the data member
position here,

63
00:03:18,461 --> 00:03:22,705
then we would suppose
that it has a constructor like this

64
00:03:23,125 --> 00:03:25,291
with 2 parameters x and y

65
00:03:25,291 --> 00:03:27,721
to establish the position
of the geometric shape.

66
00:03:27,721 --> 00:03:31,758
Then we have a class Rectangle, here
that is derived from the class FigureGeometrique,

67
00:03:31,758 --> 00:03:34,893
and in this class, we
will have a constructor

68
00:03:34,893 --> 00:03:38,617
that receives parameters in order
to initialize the data member

69
00:03:38,617 --> 00:03:41,381
position of the superclass
FigureGeometrique.

70
00:03:41,381 --> 00:03:43,184
A rectangle is a geometric shape

71
00:03:43,184 --> 00:03:46,808
and has inherited position
from FigureGeometrique,

72
00:03:46,808 --> 00:03:50,452
so a rectangle will also have
a position that needs to be initialized,

73
00:03:50,452 --> 00:03:52,213
and of course, as usual,

74
00:03:52,213 --> 00:03:54,822
the parameters l and h
to initialize its own

75
00:03:54,822 --> 00:03:57,874
member variables largeur
and hauteur.

76
00:03:58,385 --> 00:04:01,554
This constructor here, takes
4 parameters,


77
00:04:01,554 --> 00:04:05,691
and starts by invoking
the constructor of the superclass

78
00:04:05,691 --> 00:04:07,339
with the keyword super,

79
00:04:07,339 --> 00:04:09,141
and passing the 2 parameters
it takes

80
00:04:09,141 --> 00:04:13,528
to it: x and y.

81
00:04:13,852 --> 00:04:16,234
So here we have an
invocation of this constructor

82
00:04:16,234 --> 00:04:18,530
that initializes the position.

83
00:04:18,952 --> 00:04:21,903
Next as usual, we will
continue by initializing

84
00:04:21,903 --> 00:04:24,873
Rectangle's own data members
largeur and hauteur

85
00:04:24,873 --> 00:04:27,616
with the parameters it received:
l and h.

86
00:04:28,798 --> 00:04:31,064
In the case where the
superclass FigureGeometrique

87
00:04:31,064 --> 00:04:32,867
has a default constructor,

88
00:04:32,867 --> 00:04:35,609
then as mentioned before, an explicit
call with super of the constructor

89
00:04:35,609 --> 00:04:38,902
of the superclass from the constructor
of the subclass is superfluous.

90
00:04:38,902 --> 00:04:42,453
So here for example, we have
a class FigureGeometrique,

91
00:04:42,453 --> 00:04:45,309
which does have a
default constructor,

92
00:04:45,309 --> 00:04:48,273
that is, a constructor
without any parameters,

93
00:04:48,273 --> 00:04:51,850
that initializes
the position at (0,0).

94
00:04:52,144 --> 00:04:53,997
So in this case,
the subclass Rectangle

95
00:04:53,997 --> 00:04:56,941
doesn't have to explicitly
invoke the default constructor

96
00:04:56,941 --> 00:05:00,214
and we have endowed it
with a conventional constructor

97
00:05:00,214 --> 00:05:02,660
that takes 2 parameters
l and h

98
00:05:02,660 --> 00:05:05,675
to initialize its width
and height.

99
00:05:05,675 --> 00:05:08,283
But we see here there
isn't an explicit invocation

100
00:05:08,405 --> 00:05:10,235
of the superclass
constructor

101
00:05:10,235 --> 00:05:11,877
because in fact

102
00:05:11,877 --> 00:05:15,088
the default constructor
of the superclass

103
00:05:15,088 --> 00:05:17,876
is automatically invoked
by the compiler.

104
00:05:18,798 --> 00:05:21,190
Something I would like
to underline and which is

105
00:05:21,190 --> 00:05:23,938
sometimes asked is

106
00:05:23,938 --> 00:05:26,378
that even if a subclass

107
00:05:26,378 --> 00:05:28,837
doesn't have any
specific data members,

108
00:05:28,837 --> 00:05:33,026
it may be obliged to redefine
a constructor in the subclass.

109
00:05:33,696 --> 00:05:35,278
The constructor of a subclass,

110
00:05:35,278 --> 00:05:38,334
even if there aren't any specific
member variables in a subclass,

111
00:05:38,334 --> 00:05:40,809
can also used
to invoke specific

112
00:05:40,809 --> 00:05:42,690
constructors of the superclass.

113
00:05:43,123 --> 00:05:44,287
Let's take an example,

114
00:05:44,287 --> 00:05:48,000
suppose that Carre inherits
from the superclass Rectangle,

115
00:05:48,000 --> 00:05:51,972
a square is a special
kind of rectangle

116
00:05:51,972 --> 00:05:54,837
whose width and height
are of equal length.

117
00:05:55,135 --> 00:05:58,231
In this case, will not introduce
supplementary data members

118
00:05:58,231 --> 00:06:00,044
to the subclass Carre
(TN: "carre" means "square"),

119
00:06:00,044 --> 00:06:02,218
but we will nevertheless
want to redefine

120
00:06:02,218 --> 00:06:04,526
a constructor for this
class.

121
00:06:04,526 --> 00:06:07,126
The constructor of this
subclass Carre

122
00:06:07,127 --> 00:06:10,117
will call the constructor of
the superclass Rectangle

123
00:06:10,117 --> 00:06:14,306
by obliging it to have an equal
length for the height and width.

124
00:06:15,377 --> 00:06:16,997
Note that this class Carre,

125
00:06:16,997 --> 00:06:20,167
will have nothing else
than a constructor here

126
00:06:20,167 --> 00:06:22,164
that forces the constructor
of its parent class

127
00:06:22,164 --> 00:06:25,227
to have equal width and height.

128
00:06:25,406 --> 00:06:28,356
There wouldn't be anything
else, if in Rectangle,

129
00:06:28,356 --> 00:06:31,873
there aren't mutators
setHauteur or setLargeur.

130
00:06:32,191 --> 00:06:34,775
But if we did have in the
super class

131
00:06:35,315 --> 00:06:37,302
for instance a method
setHauteur,

132
00:06:38,978 --> 00:06:40,695
which received for example

133
00:06:40,695 --> 00:06:43,933
a parameter h to set the height,

134
00:06:45,977 --> 00:06:51,047
then in the class Carre, we would
need to redefine the method Sethauteur

135
00:06:51,576 --> 00:06:55,332
so as to guaranty that the
height is always equal to the width,

136
00:06:55,332 --> 00:06:59,899
and so here, setHauteur would
also set the width.

137
00:07:00,157 --> 00:07:04,602
And likewise, if we had a method to set
the width, this method

138
00:07:04,602 --> 00:07:07,619
would also set the height
so as to ensure that

139
00:07:07,619 --> 00:07:10,564
the height is always equal
to the width in the class Carre.

140
00:07:11,705 --> 00:07:13,389
This concludes this example.

141
00:07:13,389 --> 00:07:17,814
So to summarize the implications
of inheritance in constructors,

142
00:07:17,814 --> 00:07:22,975
every subclass has to invoke
the constructors of its superclass,

143
00:07:22,975 --> 00:07:26,083
this is done with the method "super"

144
00:07:26,083 --> 00:07:28,268
and the necessary arguments

145
00:07:28,268 --> 00:07:30,147
for a constructor of the
superclass.

146
00:07:30,147 --> 00:07:32,999
This call of the superclass
constructor must be done

147
00:07:33,166 --> 00:07:36,619
in the first line of the
child class's constructor's body.

148
00:07:37,555 --> 00:07:40,574
If super is invoked later
in the body,

149
00:07:40,574 --> 00:07:42,330
or is even invoked twice,

150
00:07:42,330 --> 00:07:45,606
we will receive an error message
from the compiler.

151
00:07:46,382 --> 00:07:49,244
No method other
than a constructor of a subclass

152
00:07:49,244 --> 00:07:51,332
can invoke the method "super".

153
00:07:51,844 --> 00:07:54,932
"super" doesn't need to be invoked
if the superclass

154
00:07:54,932 --> 00:07:56,876
has a default constructor.

155
00:07:57,683 --> 00:08:00,643
In this case,

156
00:08:00,643 --> 00:08:02,622
even if we forget to write "super"

157
00:08:02,622 --> 00:08:06,098
super, the default constructor
will be invoked

158
00:08:06,098 --> 00:08:09,712
automatically by the compiler.

159
00:08:10,741 --> 00:08:13,299
I would like to remind you
that this default constructor,

160
00:08:13,299 --> 00:08:15,670
that is, a constructor without
any arguments,

161
00:08:15,670 --> 00:08:18,621
is a special case, because if
we do not implement it,

162
00:08:18,623 --> 00:08:21,746
a default version of this
default constructor

163
00:08:21,746 --> 00:08:23,502
is provided by the compiler,

164
00:08:23,502 --> 00:08:26,218
but the moment we implement
another constructor,

165
00:08:26,218 --> 00:08:29,910
this defaulted default constructor
is not provided anymore.

166
00:08:29,910 --> 00:08:33,748
And at this point, if we want a default
constructor, we would have

167
00:08:33,748 --> 00:08:37,029
to write it ourselves.

168
00:08:37,029 --> 00:08:38,925
So to avoid this problem connected
with inheritance,

169
00:08:38,925 --> 00:08:42,037
I recommend that you always
declare at least one constructor

170
00:08:42,037 --> 00:08:44,061
and always explicitly invoke a
superclass constructor

171
00:08:44,061 --> 00:08:47,173
from a subclass constructor.

172
00:08:47,173 --> 00:08:49,982
Even if it is the default constructor
that you want to call,

173
00:08:49,982 --> 00:08:52,162
it is better to write
it explicitly

174
00:08:52,162 --> 00:08:54,259
which is more clear
for the time being.

175
00:08:55,375 --> 00:08:58,341
Let's come back to the order
in which constructors are called

176
00:08:58,341 --> 00:08:59,985
in a class hierarchy.

177
00:08:59,985 --> 00:09:03,467
Suppose for example, that we
have defined a class C,

178
00:09:03,467 --> 00:09:06,596
that contains certain
data members and methods,

179
00:09:06,596 --> 00:09:08,904
and extends a class B,

180
00:09:08,904 --> 00:09:11,387
which has its own data
members and methods,

181
00:09:11,387 --> 00:09:14,756
and which itself inherits
from a class A

182
00:09:14,756 --> 00:09:16,972
that has its own data members
and methods.

183
00:09:16,972 --> 00:09:20,863
And we declare an instance monC
of the class C

184
00:09:20,863 --> 00:09:24,601
by calling a constructor
of this class C.

185
00:09:25,046 --> 00:09:28,528
So what happens when we declare

186
00:09:28,528 --> 00:09:31,789
an instance like this?

187
00:09:32,320 --> 00:09:36,536
This constructor will call
the constructor of B,

188
00:09:36,536 --> 00:09:38,315
whether by default

189
00:09:38,315 --> 00:09:40,399
or explicitly,

190
00:09:40,399 --> 00:09:43,269
and then initialize
its own data members.

191
00:09:43,269 --> 00:09:45,728
So in calling this constructor

192
00:09:45,728 --> 00:09:50,825
we first call the constructor
of the class B.

193
00:09:50,825 --> 00:09:53,047
And the constructor of the
class B, will first call

194
00:09:53,047 --> 00:09:55,547
a constructor of its superclass.

195
00:09:55,554 --> 00:09:58,815
And so, in this call
of the constructor of B

196
00:09:58,815 --> 00:10:00,757
in the constructor of the class C,

197
00:10:00,757 --> 00:10:05,693
the constructors of the superclass A
will first be called.

198
00:10:05,693 --> 00:10:08,173
Thus the first thing that happens

199
00:10:08,173 --> 00:10:11,334
when a constructor of C is called,

200
00:10:11,334 --> 00:10:15,296
is the execution of the
constructor of the super-superclass,

201
00:10:15,296 --> 00:10:17,535
the class at the
topmost tier.

202
00:10:17,535 --> 00:10:20,355
So the constructor

203
00:10:20,355 --> 00:10:23,488
will start by initializing
the data members a1 and a2

204
00:10:23,488 --> 00:10:25,892
and so, in the construction of a C,

205
00:10:25,892 --> 00:10:28,427
we will have started the construction
of a B

206
00:10:28,427 --> 00:10:31,061
which will have started
a construction of a A.

207
00:10:31,755 --> 00:10:34,366
Therefore the first thing that
happens in this construction of C,

208
00:10:34,366 --> 00:10:36,926
is the construction of its section A.

209
00:10:36,926 --> 00:10:39,600
I remind you that through
inheritance,

210
00:10:39,600 --> 00:10:42,459
C inherits all the data
members of B,

211
00:10:42,459 --> 00:10:44,886
and B inherits those of A,

212
00:10:44,886 --> 00:10:49,869
which results in C effectively
having the data members a1 and a2.

213
00:10:49,869 --> 00:10:53,535
So in constructing C,

214
00:10:53,535 --> 00:10:56,853
we start by construction
its section A.

215
00:10:57,021 --> 00:10:58,999
That's the first thing that happens.

216
00:10:59,278 --> 00:11:02,680
When constructing A is finished,

217
00:11:02,680 --> 00:11:05,155
we then continue in the
constructor B

218
00:11:05,155 --> 00:11:08,692
to initialize B's own
data members,

219
00:11:08,692 --> 00:11:13,067
in this case b1.

220
00:11:13,795 --> 00:11:16,701
Once B's construction is done,

221
00:11:16,701 --> 00:11:18,912
we come back to

222
00:11:18,912 --> 00:11:21,132
the execution of the
constructor of C.

223
00:11:21,132 --> 00:11:23,733
Once this first constructor
is finished executing,

224
00:11:23,733 --> 00:11:28,425
it will have initialized its section C.

225
00:11:28,430 --> 00:11:30,435
And so this completes

226
00:11:30,435 --> 00:11:33,194
the construction of C.

227
00:11:33,194 --> 00:11:35,635
So in the construction
of a subclass instance,

228
00:11:35,635 --> 00:11:37,088
we first call the constructor

229
00:11:37,088 --> 00:11:39,872
of the highest class from which
the subclass is derived,

230
00:11:39,872 --> 00:11:43,495
then call in turn the constructors
of the intermediate classes,

231
00:11:43,495 --> 00:11:47,814
and finally end in the
subclass constructor

232
00:11:47,814 --> 00:11:49,988
with the construction of the
section of the subclass itself.

233
00:11:51,118 --> 00:11:53,254
So! This concludes this video

234
00:11:53,254 --> 00:11:56,643
on the consequences of inheritance
in the instantiation of objects.
