1
00:00:04,218 --> 00:00:06,291
In the previous episodes,
we saw that

2
00:00:06,291 --> 00:00:08,633
the attributes defined inside
a class represent

3
00:00:08,633 --> 00:00:11,838
information that is specific too
each instance of the class.

4
00:00:11,838 --> 00:00:13,908
If we take our favorite example
with the rectangle again,

5
00:00:13,908 --> 00:00:17,511
each instance of "Rectangle",
each Rectangle-type object 

6
00:00:17,511 --> 00:00:20,467
will have its own width, its own
height,

7
00:00:20,467 --> 00:00:23,637
information that is specific to it and
which caracterizes it.

8
00:00:23,637 --> 00:00:26,416
However, what happens if many
instances of a same class

9
00:00:26,416 --> 00:00:28,411
need to access the same
information,

10
00:00:28,411 --> 00:00:29,808
a common information?

11
00:00:29,808 --> 00:00:31,547
That's the topic of this episode.

12
00:00:31,547 --> 00:00:35,758
Until now, we have used different types
of variables in our programs.

13
00:00:35,758 --> 00:00:38,579
We've used instance variables,

14
00:00:38,579 --> 00:00:40,546
which are commonly called "attributes".

15
00:00:40,546 --> 00:00:42,952
We've used local variables,

16
00:00:42,952 --> 00:00:46,824
which are variables declared inside
a method's body.

17
00:00:46,824 --> 00:00:49,239
We've also used parameters,
which we can assimilate

18
00:00:49,239 --> 00:00:51,251
to local variables in the methods,

19
00:00:51,251 --> 00:00:53,891
and which are used to provide
data to methods

20
00:00:53,891 --> 00:00:55,498
so that they can work with.

21
00:00:55,498 --> 00:00:59,417
In this episode, you'll discover
the notion of "static variables",

22
00:00:59,417 --> 00:01:01,969
which are also called "class variables",

23
00:01:01,969 --> 00:01:04,709
as opposed to instance variables.

24
00:01:04,709 --> 00:01:07,700
They are in fact particular attributes,

25
00:01:07,700 --> 00:01:11,766
the declaration of which is preceded
by the reserved word "static".

26
00:01:11,766 --> 00:01:14,786
They look like the standard attributes,
the instance variables.

27
00:01:14,786 --> 00:01:17,010
They are declared the same way,

28
00:01:17,010 --> 00:01:20,719
except for the "static" modifier
that is added before.

29
00:01:20,719 --> 00:01:22,813
They are declared as instance
attributes,

30
00:01:22,813 --> 00:01:25,074
as instance variables, outside
of the methods.

31
00:01:25,074 --> 00:01:29,582
As the instance variables, they are
visible everywhere in the class,

32
00:01:29,582 --> 00:01:32,269
and are inherited by the
subclasses.

33
00:01:32,269 --> 00:01:34,854
In this episode, we'll mainly
focus

34
00:01:34,854 --> 00:01:36,208
on static variables,

35
00:01:36,208 --> 00:01:41,053
but it must be noted that there also
exist static methods,

36
00:01:45,211 --> 00:01:47,481
which will see later on.

37
00:01:47,481 --> 00:01:51,133
In Java, the static modifier
is used

38
00:01:51,133 --> 00:01:54,152
for both variables and
methods.

39
00:01:54,152 --> 00:01:57,252
In the two cases, a static member
can be used

40
00:01:57,252 --> 00:02:00,203
without having constructed
the object beforehand.

41
00:02:00,203 --> 00:02:02,777
Note that in Java, the static
modifier

42
00:02:02,777 --> 00:02:05,385
doesn't apply to local
variables,

43
00:02:05,385 --> 00:02:09,460
that is, to variables declared
inside a method's body.

44
00:02:09,460 --> 00:02:11,631
But what does it actually mean that a static
member can be

45
00:02:11,631 --> 00:02:14,417
accessed without constructing
any object?

46
00:02:14,417 --> 00:02:18,728
If we take the example
of the rectangle again,

47
00:02:18,728 --> 00:02:24,504
what we've used until now
were attributes

48
00:02:24,504 --> 00:02:28,632
declared inside classes,

49
00:02:28,632 --> 00:02:36,385
a.k.a. instance variables.

50
00:02:36,385 --> 00:02:42,318
And we have methods,

51
00:02:42,318 --> 00:02:44,696
and in this context it is
strictly impossible

52
00:02:44,696 --> 00:02:47,764
to use a member of the
rectangle class

53
00:02:47,764 --> 00:02:52,606
without constructing an instance
of rectangle beforehand.

54
00:02:52,606 --> 00:02:57,685
So here for example, if I want
to use the surface method,

55
00:02:57,685 --> 00:03:05,474
I have to construct an object
of rectangle type.

56
00:03:05,474 --> 00:03:10,714
And through this object, I can
call the

57
00:03:10,714 --> 00:03:14,544
method that computes the surface.

58
00:03:14,544 --> 00:03:17,867
A static member, whether it's a
variable or a method,

59
00:03:17,867 --> 00:03:21,161
is invokable without having created
an instance beforehand,

60
00:03:21,161 --> 00:03:23,791
by using only the class name

61
00:03:23,791 --> 00:03:27,177
according to terms that we'll
examine later.

62
00:03:27,177 --> 00:03:29,737
One of the facets is that we
can use

63
00:03:29,737 --> 00:03:32,186
a static member without
constructing any objects.

64
00:03:32,186 --> 00:03:36,230
The other facet, relatively to
static variables,

65
00:03:36,230 --> 00:03:41,288
is that they are shared between
each instance of the class.

66
00:03:41,288 --> 00:03:44,609
Until now you've learnt that
each instance has

67
00:03:44,609 --> 00:03:48,787
its own memory area for
each of its attributes.

68
00:03:48,787 --> 00:03:54,115
Each instantiated rectangle in
a program will have

69
00:03:54,115 --> 00:03:58,345
its own memory areas for
the width and the height.

70
00:03:58,345 --> 00:04:03,027
So here for example, for
the rectangle 'r1',

71
00:04:03,035 --> 00:04:05,890
we'll have memory areas storing

72
00:04:05,890 --> 00:04:09,192
the value of its own width and height.

73
00:04:09,192 --> 00:04:15,564
For another rectangle, there'll be
other memory areas

74
00:04:15,564 --> 00:04:18,843
that will store the width and the
height of that second rectangle.

75
00:04:22,528 --> 00:04:25,949
That's why we say "instance variables":

76
00:04:25,949 --> 00:04:30,093
because each instance owns its own variables.

77
00:04:30,093 --> 00:04:35,608
On the other hand, a static variable
would be an unique memory area

78
00:04:35,608 --> 00:04:38,445
associated with the class rather
than the instances,

79
00:04:38,445 --> 00:04:43,294
but accessible from each
instance.

80
00:04:43,294 --> 00:04:47,497
To sum up, for instance
variables, the attributes,

81
00:04:47,497 --> 00:04:49,532
we reserve a memory area

82
00:04:49,532 --> 00:04:52,727
for each object that we instantiate,
that we create with "new".

83
00:04:52,727 --> 00:04:56,662
So each object has its own
memory area, its own value

84
00:04:56,662 --> 00:04:58,945
for the corresponding instance variable.


85
00:04:58,945 --> 00:05:01,941
For a class variable, that is,
a class-attribute,

86
00:05:01,941 --> 00:05:04,304
declared as static,

87
00:05:04,304 --> 00:05:07,024
there's a single allocation of an
unique memory area.

88
00:05:07,024 --> 00:05:09,979
This reservation is done as soon
as we load the class,

89
00:05:09,979 --> 00:05:14,521
that is, to simplify, as soon as the class
is mentioned in the program,

90
00:05:14,521 --> 00:05:17,376
No memory area will be
allocated for that attribute

91
00:05:17,376 --> 00:05:20,505
when we create a new instance
with "new".

92
00:05:20,505 --> 00:05:23,157
However, that attribute remains accessible

93
00:05:23,157 --> 00:05:25,667
like instance attributes used up to now,

94
00:05:25,667 --> 00:05:27,387
via all the objects of the class,

95
00:05:27,387 --> 00:05:30,440
which will refer to the same
memory area,

96
00:05:30,440 --> 00:05:34,609
the unique memory area allocated
for that static attribute.

97
00:05:34,609 --> 00:05:36,580
Let's see this with a
concrete example.

98
00:05:36,580 --> 00:05:41,693
We have the case of a class A
that contains an instance variable,

99
00:05:41,693 --> 00:05:44,296
an attribute as we have always
used them until now,

100
00:05:44,296 --> 00:05:47,445
and a class variable, that is,
an attribute

101
00:05:47,445 --> 00:05:51,051
whose declaration is preceded
of the reserved word 'static'.

102
00:05:51,051 --> 00:05:55,035
The class A also contains a
modified method,

103
00:05:55,035 --> 00:05:58,414
which can access all the
attributes of the class,

104
00:05:58,414 --> 00:06:00,876
whether they're static or not.

105
00:06:00,876 --> 00:06:02,999
Now let's examine step by step
what happens

106
00:06:02,999 --> 00:06:05,685
when we execute the following
code.

107
00:06:05,685 --> 00:06:07,921
In fact, before the execution,

108
00:06:07,921 --> 00:06:10,959
as soon as the class A is used
in a program,

109
00:06:10,959 --> 00:06:13,786
as it contains a static
variable "c",

110
00:06:13,786 --> 00:06:18,637
there'll be an allocation of a memory
space for this static variable "c",

111
00:06:18,637 --> 00:06:24,828
which will be initialized with the
value 10 because of this line.

112
00:06:24,828 --> 00:06:26,852
If we examine this first
line of code,

113
00:06:26,852 --> 00:06:29,952
the first thing that we see is that
the class variable

114
00:06:29,952 --> 00:06:33,067
is accessible independently of the
creation of any instance.

115
00:06:33,067 --> 00:06:37,468
We can access the 'c' attribute through
the name of the class only,

116
00:06:37,468 --> 00:06:40,760
without creating any instance.

117
00:06:40,760 --> 00:06:42,715
When we execute this line
of code,

118
00:06:42,715 --> 00:06:45,152
we increment the class variable 'c',

119
00:06:45,152 --> 00:06:51,101
which is a class variable of the class A,
which has already been initialized.

120
00:06:51,101 --> 00:06:53,203
We'll have this situation,

121
00:06:53,203 --> 00:06:56,488
the value of 'c' will go
from 10 to 11.

122
00:06:56,488 --> 00:06:59,165
The two following lines declare
an instance of A,

123
00:06:59,165 --> 00:07:02,247
and initialize it using the
default constructor.

124
00:07:02,247 --> 00:07:06,236
Each instance of A has its
own instance variables,

125
00:07:06,236 --> 00:07:08,960
here, in this case, the variable
instance 'b',

126
00:07:08,960 --> 00:07:11,830
which means that when this instruction
line's execution has finished,

127
00:07:11,830 --> 00:07:14,620
the memory situation will be
the following:

128
00:07:14,620 --> 00:07:16,750
we'll have a variable "v1"

129
00:07:16,750 --> 00:07:20,568
containing a reference to an object
of type A

130
00:07:20,568 --> 00:07:22,433
which has an attribute 'b',

131
00:07:22,433 --> 00:07:26,929
initialized to 1 with the 
help of this line.

132
00:07:26,929 --> 00:07:30,888
The modified method is then
called on the instance "v1".

133
00:07:30,888 --> 00:07:35,385
This method increments the value
of the instance variable 'b',

134
00:07:35,385 --> 00:07:39,354
we'll therefore be in this
situation

135
00:07:39,354 --> 00:07:42,284
at the end of the instruction
line's execution.

136
00:07:42,284 --> 00:07:47,054
The modified method then increments
the class variable 'c'.

137
00:07:47,054 --> 00:07:49,807
You'll note by the way that the
methods of the class A

138
00:07:49,807 --> 00:07:52,485
can access the static
attributes

139
00:07:52,485 --> 00:07:56,461
in the same way they access
the non-static attributes,

140
00:07:56,461 --> 00:07:58,652
the instance variables.

141
00:07:58,658 --> 00:08:01,499
The execution of the second line
of this modified method

142
00:08:01,499 --> 00:08:05,404
will therefore result in an
additional incrementation

143
00:08:05,404 --> 00:08:08,935
of the class variable 'c', which
will be 12.

144
00:08:08,935 --> 00:08:12,523
So we were able to modify the
value of the class variable

145
00:08:12,523 --> 00:08:15,035
of the static attribute both by
passing by the name

146
00:08:15,035 --> 00:08:17,856
of the class uniquely, and by
using an instance.

147
00:08:17,856 --> 00:08:20,224
So here through the "v1" instance,

148
00:08:20,224 --> 00:08:24,457
we were able to modify the
class-variable 'c'.

149
00:08:24,457 --> 00:08:27,531
The modified variable, whether its
through the name of the class,

150
00:08:27,531 --> 00:08:32,097
or through an instance, is an
unique memory area.

151
00:08:32,097 --> 00:08:34,586
With this example
we saw

152
00:08:34,586 --> 00:08:36,847
that when we modify an
instance variable,

153
00:08:36,847 --> 00:08:39,599
the value changes only for
the current object.

154
00:08:39,599 --> 00:08:42,429
But when we modify a
class variable,

155
00:08:42,429 --> 00:08:46,167
the value changes for all the
objects of the class.

156
00:08:46,167 --> 00:08:50,987
Indeed, the class variable is unique
and accessible to all the objects.

157
00:08:50,987 --> 00:08:53,756
As we have just seen in the
previous example,

158
00:08:53,756 --> 00:08:57,041
a static variable can be used
through the name of the class

159
00:08:57,041 --> 00:08:59,425
without passing by the creation
of any object.

160
00:08:59,425 --> 00:09:01,844
We can therefore use static
members

161
00:09:01,844 --> 00:09:03,623
and do completely without
objects,

162
00:09:03,623 --> 00:09:07,197
which goes against the
"object-oriented" approach.

163
00:09:07,207 --> 00:09:11,841
Using static members to avoid
the "object-oriented" approach

164
00:09:11,841 --> 00:09:15,414
is of course a bad reason to use
static variables.

165
00:09:15,414 --> 00:09:18,801
A good reason is to represent
a value

166
00:09:18,801 --> 00:09:20,553
common to all the objects
of a class.

167
00:09:20,553 --> 00:09:22,378
Let's have a look at this with
a concrete example.

168
00:09:22,378 --> 00:09:26,418
Let's imagine that in a program, we have an
"Employe" (= employee) class.

169
00:09:26,418 --> 00:09:30,138
We want to represent the fact
that 65 years old

170
00:09:30,138 --> 00:09:33,627
is the official retirement age for
all the employees.

171
00:09:33,627 --> 00:09:37,137
Let's consider two possible
versions to implement this.

172
00:09:37,137 --> 00:09:41,111
So a version where we use
an instance variable

173
00:09:41,111 --> 00:09:42,942
to represent the retirement
age,

174
00:09:42,942 --> 00:09:46,341
and another version where we use
a class variable,

175
00:09:46,341 --> 00:09:47,960
a static variable.

176
00:09:47,960 --> 00:09:50,232
First version, an "Employe"
class

177
00:09:50,232 --> 00:09:54,648
that represents the retirement
age as an instance variable.

178
00:09:54,648 --> 00:09:57,603
The constructor of the class
"Employe1" would be in charge

179
00:09:57,603 --> 00:10:01,727
of initializing each attribute with
values passed as parameters.

180
00:10:01,727 --> 00:10:04,147
Now let's suppose that an
"Entreprise" class

181
00:10:04,147 --> 00:10:07,377
uses this "Employe1" type, in
particular to create an array

182
00:10:07,377 --> 00:10:09,439
containing a number of employees.

183
00:10:09,439 --> 00:10:11,790
Each element of the array

184
00:10:11,790 --> 00:10:14,630
would be filled by creating
an instance of Employe.

185
00:10:14,630 --> 00:10:17,401
As the official retirement age
is represented

186
00:10:17,401 --> 00:10:19,489
with an instance variable,

187
00:10:19,489 --> 00:10:24,944
each Employe will store a memory
area that contains this official age,

188
00:10:24,944 --> 00:10:27,247
which happens to be the same
for everybody.

189
00:10:27,247 --> 00:10:31,028
Therefore, we reserve a memory
area for each Employe,

190
00:10:31,028 --> 00:10:33,745
to contain the exact same
information.

191
00:10:33,745 --> 00:10:36,403
So if we have thousands of
employees,

192
00:10:36,403 --> 00:10:40,449
we'll end up with thousands of
times the value 65 stored,

193
00:10:40,449 --> 00:10:43,708
which of course is an
unncessary duplication.

194
00:10:43,708 --> 00:10:46,708
Moreover, this duplication causes major
maintenance problems.

195
00:10:46,708 --> 00:10:48,868
Let's suppose for example that the
law changes,

196
00:10:48,868 --> 00:10:52,530
and that the official retirement age
is now 67 years old.

197
00:10:52,530 --> 00:10:55,326
We would have to iterate over all
the possible instances

198
00:10:55,326 --> 00:10:59,923
to modify this age in
a proper way.

199
00:10:59,923 --> 00:11:03,164
If the instances were stored in an
array, it's still feasible,

200
00:11:03,164 --> 00:11:06,680
but imagine if the instance were
created independently.

201
00:11:06,680 --> 00:11:10,318
This would create a major update issue.

202
00:11:10,318 --> 00:11:13,492
In the second version, where we now
use a static variable

203
00:11:13,492 --> 00:11:15,659
for the official retirement age,

204
00:11:15,659 --> 00:11:19,135
so where we precede the declaration of the
attribute with the reserved word "static",

205
00:11:19,135 --> 00:11:20,990
we don't have this problem
anymore.

206
00:11:20,990 --> 00:11:24,537
Indeed, there would be an
unique memory area

207
00:11:24,537 --> 00:11:26,849
accessible by each
instance,

208
00:11:26,849 --> 00:11:29,217
which would contain the official
retirement age,

209
00:11:29,217 --> 00:11:30,766
which is the same for everybody.

210
00:11:30,766 --> 00:11:34,449
This retirement age can be
accessed from each instance,

211
00:11:34,449 --> 00:11:36,271
or from the class name.

212
00:11:36,271 --> 00:11:38,185
There isn't information
duplication anymore,

213
00:11:38,185 --> 00:11:41,191
and it's easy to do
modifications.

214
00:11:41,201 --> 00:11:45,193
Here we don't have to look for each
instance of every employee anymore,

215
00:11:45,193 --> 00:11:48,789
just to modify the retirement age
and change it to 67 years old.

216
00:11:48,789 --> 00:11:51,527
Voilà! I hope that this small
example will have convinced you

217
00:11:51,527 --> 00:11:54,813
of the benefits of using
static variable well.

218
00:11:54,813 --> 00:11:58,466
Also note that for
constants

219
00:11:58,466 --> 00:12:01,290
that are common to every
instance of a class,

220
00:12:01,290 --> 00:12:04,526
it is unnecessary to store the value
for each object of the class.

221
00:12:04,526 --> 00:12:08,016
You must in fact declare them
as "final static".

222
00:12:08,016 --> 00:12:10,137
For example, for a "Planete"
(= Planet) class,

223
00:12:10,137 --> 00:12:13,078
we need to use G, the
gravitational constant.

224
00:12:13,078 --> 00:12:15,595
This constant is the same for each
planet,

225
00:12:15,595 --> 00:12:17,849
and in this case, it is better
to declare

226
00:12:17,849 --> 00:12:20,988
the constant in question as
"final static",

227
00:12:20,988 --> 00:12:22,894
whether than only "final",

228
00:12:22,894 --> 00:12:27,150
to avoid duplicating this constant
for each instance of Planete.

229
00:12:27,150 --> 00:12:29,934
To conclude on this chapter
of static variables,

230
00:12:29,934 --> 00:12:32,972
let's come back to an often-used
instruction line.

231
00:12:32,972 --> 00:12:35,693
We are now in position to
understand

232
00:12:35,693 --> 00:12:38,168
what this instruction line
does,

233
00:12:38,168 --> 00:12:42,159
which we had used up till now as
a magical incantation.

234
00:12:42,159 --> 00:12:45,496
What can we use directly through
a class name,

235
00:12:45,496 --> 00:12:48,706
well that's nothing else than
a static variable.

236
00:12:48,706 --> 00:12:50,511
So 'out' is a static variable,

237
00:12:50,511 --> 00:12:53,452
it must therefore most likely
contain a reference to an object,

238
00:12:53,452 --> 00:12:55,867
as we apply a method on
this 'out' variable,

239
00:12:55,867 --> 00:12:57,995
obviously the 'println' method.

240
00:12:57,995 --> 00:13:02,239
'out' is indeed a static variable of the
'System' class,

241
00:13:02,239 --> 00:13:04,942
a variable of type 'PrintStream',

242
00:13:04,942 --> 00:13:08,190
so it's an instance of the
'PrintStream' class,

243
00:13:08,190 --> 00:13:12,518
and this 'PrintStream' class contains
a 'println' method,

244
00:13:12,518 --> 00:13:14,485
which is invoked like this.

245
00:13:14,485 --> 00:13:17,178
This concludes our episode
on static variables.

246
00:13:17,178 --> 00:13:18,457
In a following episode,

247
00:13:18,457 --> 00:13:20,550
you'll have the opportunity of
learning about static methods.
