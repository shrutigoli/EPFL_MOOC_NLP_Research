1
00:00:03,926 --> 00:00:05,910
In this episode and the
following one,

2
00:00:05,910 --> 00:00:07,898
we'll see a new concept:

3
00:00:07,898 --> 00:00:09,648
Java interfaces.

4
00:00:09,648 --> 00:00:13,163
But first, let's begin with an example,
with another game

5
00:00:13,163 --> 00:00:15,295
that would for example
need balls,


6
00:00:15,295 --> 00:00:18,218
rackets, nets, and players.

7
00:00:18,628 --> 00:00:21,258
And let's suppose that each
of these entities

8
00:00:21,258 --> 00:00:25,468
needs an 'evolue' (= "evolves") method,
to make them evolve during the game.

9
00:00:25,478 --> 00:00:27,818
Naturally, the way of
conceiving this

10
00:00:27,818 --> 00:00:29,758
in object-oriented
programming

11
00:00:29,758 --> 00:00:32,418
would be to create an abstract
class 'Entite' (= "Entity")

12
00:00:32,418 --> 00:00:35,178
which would have the abstract
method 'evolue',

13
00:00:35,178 --> 00:00:39,058
and to make the ball, the rackets, the
net, the player

14
00:00:39,058 --> 00:00:41,298
inherit from the abstract class
'Entite'.

15
00:00:42,078 --> 00:00:44,408
But let's suppose that we
go a bit further

16
00:00:44,408 --> 00:00:45,818
in the game's analysis,

17
00:00:45,818 --> 00:00:48,478
and that we realize that
some of these entities,

18
00:00:48,478 --> 00:00:50,958
for example the balls, the
rackets, the nets,

19
00:00:50,958 --> 00:00:52,958
should have a graphical
representation such

20
00:00:52,958 --> 00:00:56,228
that we effectively do see them
on the game's screen,

21
00:00:56,228 --> 00:00:59,238
and that, for example, we
don't see the player.

22
00:00:59,238 --> 00:01:01,598
So at that moment we would
have to dissociate

23
00:01:01,598 --> 00:01:03,958
the players from the balls, the
rackets, and the nets,

24
00:01:03,958 --> 00:01:07,518
as having or not  a graphical
representation.

25
00:01:07,978 --> 00:01:10,318
We could also imagine that
some entities

26
00:01:10,318 --> 00:01:12,238
should be interactive,

27
00:01:12,238 --> 00:01:14,218
for example to be able
to control them

28
00:01:14,218 --> 00:01:15,858
with the keyboard or
with the mouse,

29
00:01:15,858 --> 00:01:18,278
like a ball or a racket.

30
00:01:18,548 --> 00:01:21,478
And others that we
couldn't move,

31
00:01:21,478 --> 00:01:24,378
so for example the net
and the player.

32
00:01:24,378 --> 00:01:26,618
So how would we organize
all this

33
00:01:26,618 --> 00:01:29,738
in the context of our object-
oriented conception?

34
00:01:30,228 --> 00:01:33,038
Ideally we would do all
this through classes

35
00:01:33,038 --> 00:01:36,038
with, for example, an
interactive class

36
00:01:36,038 --> 00:01:38,638
which would allow us to manage
the ball and the racket

37
00:01:38,638 --> 00:01:41,438
in an interactive way.

38
00:01:41,438 --> 00:01:44,338
A class that would allow us
to have a method

39
00:01:44,338 --> 00:01:46,678
to graphically draw the
graphical objects

40
00:01:46,678 --> 00:01:49,578
of which would inherit
net, racket and ball.

41
00:01:49,938 --> 00:01:53,178
But this would make what is
called multiple inheritance.

42
00:01:53,178 --> 00:01:55,698
The ball would inherit in
multiple ways

43
00:01:55,698 --> 00:01:58,858
from an interactive and graphical
entity.

44
00:01:58,858 --> 00:02:02,018
But we can't have multiple
inheritance in Java;

45
00:02:02,018 --> 00:02:04,638
there's only single inheritance
in Java.

46
00:02:04,638 --> 00:02:06,318
So how do we do?

47
00:02:06,878 --> 00:02:08,738
Before answering that question,
let's simply note

48
00:02:08,738 --> 00:02:10,658
that some other programming
languages

49
00:02:10,658 --> 00:02:12,738
have chosen multiple
inheritance,

50
00:02:12,738 --> 00:02:15,558
so why isn't there multiple
inheritance in Java?

51
00:02:15,558 --> 00:02:17,848
Simply because multiple inheritance

52
00:02:17,848 --> 00:02:19,838
may induce confusion,

53
00:02:19,838 --> 00:02:22,498
and make some situations difficult to understand.

54
00:02:22,498 --> 00:02:26,138
For example if we had a class
that multiply inherits of an animal,

55
00:02:26,138 --> 00:02:28,428
is it an animal? The same
animal?

56
00:02:28,428 --> 00:02:30,358
Or is it two animals?

57
00:02:30,358 --> 00:02:33,381
And these situations are also
difficult for the compiler,

58
00:02:33,381 --> 00:02:35,418
which has decisions
to take.

59
00:02:35,418 --> 00:02:37,758
Those that would want to convince
themselves could go and see

60
00:02:37,758 --> 00:02:40,918
the episode on virtual
classes in C++,

61
00:02:40,918 --> 00:02:43,758
on our other MOOC that is taking
place in parallel

62
00:02:43,758 --> 00:02:47,018
on the C++ language, and you'll
most certainly be convinced.

63
00:02:47,018 --> 00:02:49,698
Another reason is that there
can be ambiguity

64
00:02:49,698 --> 00:02:51,778
when a method or a variable
is declared

65
00:02:51,778 --> 00:02:53,398
in many super-classes.

66
00:02:53,398 --> 00:02:55,758
Which one to use? How to
access it?

67
00:02:55,758 --> 00:02:58,218
So, for good reasons, Java
decided

68
00:02:58,218 --> 00:03:00,358
not to have multiple
inheritance.

69
00:03:00,358 --> 00:03:02,638
So, how can we well
design the game

70
00:03:02,638 --> 00:03:05,378
that we've imagined until now
in Java?

71
00:03:05,378 --> 00:03:08,058
For that, let's go back to the
reason that pushed

72
00:03:08,058 --> 00:03:10,358
us to introducing multiple
inheritance.

73
00:03:10,358 --> 00:03:13,578
Why did we want multiple inheritance
in our video game?

74
00:03:13,578 --> 00:03:16,558
To impose the use of common
methods to

75
00:03:16,558 --> 00:03:18,818
some classes.

76
00:03:18,818 --> 00:03:21,238
So for example, we wanted
'ball' and 'racket'

77
00:03:21,238 --> 00:03:24,668
to have methods that allow you to
manage a mouse click, for example.

78
00:03:24,668 --> 00:03:26,508
But the 'gestionClic' (= "clickManager")
method

79
00:03:26,508 --> 00:03:28,628
can't be a method for their
super-class,

80
00:03:28,628 --> 00:03:30,868
common to all for the 'Entite'
class,

81
00:03:30,868 --> 00:03:34,538
because a 'gestionClic' method makes no sense for the player
for example.

82
00:03:34,548 --> 00:03:38,668
What we want to do is to impose a common
content to some sub-classes,

83
00:03:38,668 --> 00:03:40,788
without any inheritance
relation,

84
00:03:40,788 --> 00:03:42,688
and differentiate them from
other sub-classes.

85
00:03:42,688 --> 00:03:44,788
That's the notion of

86
00:03:44,788 --> 00:03:47,038
interface in Java.

87
00:03:47,606 --> 00:03:49,257
The interface notion
in Java,

88
00:03:49,257 --> 00:03:51,717
which is different from the
notion of class,

89
00:03:51,717 --> 00:03:54,577
will allow us to impose to
some classes

90
00:03:54,577 --> 00:03:56,857
to have a particular
content,

91
00:03:56,857 --> 00:04:00,077
without them being part of
a class, properly speaking.

92
00:04:00,077 --> 00:04:03,397
So for example, here, the sub-classes
'Raquette' and 'Balle',

93
00:04:03,397 --> 00:04:05,217
sub-classes of the 'Entite'
class,

94
00:04:05,217 --> 00:04:08,090
will additionally have, for
example,

95
00:04:08,090 --> 00:04:09,723
the 'Interaction' or
'Interactive' interface,

96
00:04:09,723 --> 00:04:13,397
which gives the ability to manage, for
example, mouse interactions.

97
00:04:13,397 --> 00:04:15,517
Of course, it wouldn't have
been correct

98
00:04:15,517 --> 00:04:19,147
to have this 'gestionClic' method in
the 'Entite' class,

99
00:04:19,147 --> 00:04:21,623
because in that case, the net
and the player

100
00:04:21,623 --> 00:04:24,099
would also have had a
'gestionClic' method,

101
00:04:24,099 --> 00:04:26,577
of which they doesn't have any use.

102
00:04:26,577 --> 00:04:30,677
The 'balle', 'raquette' and 'filet' (= "net")
sub-classes of the 'Entite' class

103
00:04:30,677 --> 00:04:33,557
will also have an interface

104
00:04:33,557 --> 00:04:38,457
that oblige them to make a choice, from
a graphical point of view.

105
00:04:38,717 --> 00:04:41,307
So that's it concerning the
interface concept.

106
00:04:41,857 --> 00:04:44,537
Now that you have an idea of the
utility of interfaces,

107
00:04:44,537 --> 00:04:47,637
let's see what they concretely
look like in Java.

108
00:04:48,000 --> 00:04:49,900 
Before going on about interfaces,

109
00:04:50,000 --> 00:04:52,400 
we shall add an important remark.

110
00:04:52,500 --> 00:04:53,900 
Interfaces up to Java 7,

111
00:04:54,000 --> 00:04:56,900 
as you'll see it in the coming slide,

112
00:04:57,000 --> 00:05:00,900 
can contain only constant variables,

113
00:05:01,000 --> 00:05:02,900 
and abstract methods.

114
00:05:03,000 --> 00:05:06,900 
However, many new features have 
been added in Java 8.

115
00:05:08,000 --> 00:05:11,900 
In the following slides, we will
mainly present interfaces

116
00:05:12,000 --> 00:05:16,900 
as they were till Java 7.

117
00:05:18,500 --> 00:05:22,500 
The new Java 8 features will be
presented in another video.

118
00:05:23,077 --> 00:05:26,054
In Java, an interface is declared
a bit like a class,

119
00:05:26,054 --> 00:05:28,474
with the difference that we'll
replace

120
00:05:28,474 --> 00:05:31,394
reserved word 'class' with the
reserved word 'interface'

121
00:05:31,394 --> 00:05:34,694
followed by the interface's name,
freely chosen,

122
00:05:34,694 --> 00:05:37,694
then a pair of opening and
closing curly braces,

123
00:05:37,694 --> 00:05:39,624
like the body of a class.

124
00:05:39,994 --> 00:05:42,714
Unlike a class, an interface can
only contain

125
00:05:42,714 --> 00:05:45,494
abstract methods, which is the
most common case,

126
00:05:45,494 --> 00:05:47,554
or also constants.

127
00:05:47,554 --> 00:05:51,034
This is how the code of interfaces from
the small introductory example

128
00:05:51,034 --> 00:05:53,334
could look like.

129
00:05:53,334 --> 00:05:55,334
Here you'll wonder why

130
00:05:55,334 --> 00:05:58,514
the methods defined inside
the interfaces

131
00:05:58,514 --> 00:06:00,834
are defined without the reserved
word 'abstract',

132
00:06:00,834 --> 00:06:02,854
when we've just seen that
an interface

133
00:06:02,854 --> 00:06:05,014
can only contain abstract methods.

134
00:06:05,014 --> 00:06:07,374
We'll come back to this
later.

135
00:06:07,624 --> 00:06:10,814
As a reminder, the idea was
that these interfaces

136
00:06:10,814 --> 00:06:13,094
impose a certain content
to the classes

137
00:06:13,094 --> 00:06:15,154
to which they are
related to.

138
00:06:15,154 --> 00:06:17,274
And here the imposed content
was typically

139
00:06:17,274 --> 00:06:19,364
a number of methods.

140
00:06:19,944 --> 00:06:23,114
An interface, that can only contain
abstract methods,

141
00:06:23,114 --> 00:06:25,314
can't contain any constructors.

142
00:06:25,314 --> 00:06:29,014
It is therefore impossible to create
an interface instance.

143
00:06:29,304 --> 00:06:33,114
So for example here, I can't
write something like

144
00:06:33,114 --> 00:06:35,634
this in a program, which

145
00:06:35,634 --> 00:06:38,185
is to declare a graphical
object

146
00:06:38,185 --> 00:06:42,125
and try to instantiate it
this way.

147
00:06:42,125 --> 00:06:44,495
This is obviously impossible.

148
00:06:44,805 --> 00:06:47,481
But let's go back to the question in which
we were concerned before:

149
00:06:47,481 --> 00:06:49,421
why are we here exempt
from

150
00:06:49,421 --> 00:06:52,841
explicitly putting the reserved word
'abstract', for example?

151
00:06:52,841 --> 00:06:55,781
As the methods of an interface are
necessarily abstract,

152
00:06:55,781 --> 00:06:58,241
java exempts you from explicitly
mentioning it.

153
00:06:58,241 --> 00:06:59,641
What you must know

154
00:06:59,641 --> 00:07:02,531
is that any method declared in
an interface

155
00:07:02,531 --> 00:07:07,291
is necessarily abstract and
necessarily public.

156
00:07:08,800 --> 00:07:11,540
If you try declaring an interface
method

157
00:07:11,540 --> 00:07:13,680
with another modifier than
'public',

158
00:07:13,680 --> 00:07:16,550
you'll get a compiler error
message.

159
00:07:16,740 --> 00:07:19,580
It is also possible to put
constants in an

160
00:07:19,580 --> 00:07:22,500
interface, even if that's
less common

161
00:07:22,500 --> 00:07:24,420
than abstract methods.

162
00:07:24,420 --> 00:07:27,600
For example, I could define
an interface like this

163
00:07:27,600 --> 00:07:31,503
that contains constants.

164
00:07:31,503 --> 00:07:34,503
And in this case, I need to give values
to the constants,

165
00:07:34,503 --> 00:07:36,563
as there's no eventual
constructor

166
00:07:36,563 --> 00:07:39,643
that could give initial values
to these constants.

167
00:07:39,643 --> 00:07:42,043
I must do it at this stage,

168
00:07:42,273 --> 00:07:43,683
and like the methods,

169
00:07:43,683 --> 00:07:47,243
there are also implicit modifiers
for the constants.

170
00:07:47,243 --> 00:07:50,063
Every constant that you put in
an interface

171
00:07:50,063 --> 00:07:55,139
is necessarily public, final,

172
00:07:55,139 --> 00:07:56,433
and static.

173
00:07:57,583 --> 00:07:59,823
We now know what we can put

174
00:07:59,823 --> 00:08:01,643
inside an interface.

175
00:08:01,643 --> 00:08:04,423
Let's look at how to
establish the link

176
00:08:04,423 --> 00:08:06,983
between the interface and
the class.

177
00:08:07,403 --> 00:08:10,983
This link is established with a particular
reserved word: 

178
00:08:10,983 --> 00:08:13,043
the reserved word 'implements'.

179
00:08:13,043 --> 00:08:15,163
When we declare the class,

180
00:08:15,163 --> 00:08:19,033
we'll indicate that this class implements
a number of interfaces.

181
00:08:19,043 --> 00:08:21,803
There can be many, separated
by commas.

182
00:08:22,243 --> 00:08:25,511
For example, to indicate that our
net class

183
00:08:25,511 --> 00:08:27,431
extends the class Entite,

184
00:08:27,431 --> 00:08:29,571
but implements the Graphique
interface,

185
00:08:29,571 --> 00:08:34,051
which will let us see this net as
a draw-able object,

186
00:08:34,051 --> 00:08:37,931
we'll write, in Java, the class 'Filet' (= net)
extends the class 'Entite' (= entity),

187
00:08:37,991 --> 00:08:40,922
and implements the 'Graphique'
(= Graphical) interface.

188
00:08:41,162 --> 00:08:44,182
When a class implements a number of
interfaces,

189
00:08:44,182 --> 00:08:47,302
It is imperative, if we want it
to be instanciable,

190
00:08:47,302 --> 00:08:49,502
that is redefines all the
methods

191
00:08:49,502 --> 00:08:51,422
declared in the
interfaces.

192
00:08:51,422 --> 00:08:53,102
All the abstract methods

193
00:08:53,102 --> 00:08:57,552
must be concretely redefined in
the class that implements them,

194
00:08:57,552 --> 00:08:59,482
so that these are
instanciable.

195
00:08:59,482 --> 00:09:02,642
This is the way that an interface
imposes a content 

196
00:09:02,642 --> 00:09:04,282
to a class that implements it.

197
00:09:04,282 --> 00:09:10,042
The moment we establish the link
between the class and the interface,

198
00:09:10,052 --> 00:09:12,242
so the class, if we want to
instantiate it,

199
00:09:12,242 --> 00:09:16,962
must redefine all the methods
specified in the interface.

200
00:09:16,962 --> 00:09:18,585
So as we've seen,

201
00:09:18,585 --> 00:09:20,725
a class can perfectly
implement

202
00:09:20,725 --> 00:09:23,185
many interfaces, for
example,

203
00:09:23,185 --> 00:09:28,125
the ball is a clickable object and
is a draw-able object,

204
00:09:28,125 --> 00:09:30,205
so it implements two
interfaces.

205
00:09:30,205 --> 00:09:33,345
The Interactive interface and
the Graphique interface.

206
00:09:33,815 --> 00:09:36,405
If we want to create basic
instances,

207
00:09:36,405 --> 00:09:37,985
which is probably the case,

208
00:09:37,985 --> 00:09:40,345
then the Balle class must
imperatively

209
00:09:40,345 --> 00:09:44,105
give a concrete definition of
the 'gestionClic'

210
00:09:44,105 --> 00:09:46,345
and 'dessiner' (= draw) methods.

211
00:09:46,811 --> 00:09:49,191
Note that in Java, it is
totally possible

212
00:09:49,191 --> 00:09:51,851
to declare a hierarchy of
interfaces.

213
00:09:52,221 --> 00:09:54,731
We'll say that an interface
extends another

214
00:09:54,731 --> 00:09:57,831
and this is expressed with the
reserved word 'extends',

215
00:09:57,831 --> 00:09:59,571
like with the classes.

216
00:09:59,571 --> 00:10:02,011
For example, here we have
two interfaces

217
00:10:02,011 --> 00:10:04,551
GerableParSouris (= manageable with the mouse) and
GerableParClavier (= manageable with the keyboard),

218
00:10:04,551 --> 00:10:08,551
which both extend an Interactive
super-interface.

219
00:10:08,971 --> 00:10:12,681
Here we indeed have a hierarchy
of interfaces

220
00:10:13,051 --> 00:10:16,581
and two interactive
super-interfaces,

221
00:10:16,581 --> 00:10:21,031
and two sub-interfaces
GerableParSouris 

222
00:10:21,031 --> 00:10:24,274
and by keyboard.

223
00:10:25,747 --> 00:10:27,151
Before continuing,

224
00:10:27,151 --> 00:10:30,771
let's go back to our first example of
a class implementing an interface,

225
00:10:30,771 --> 00:10:34,451
to mention a point that can have
its importance.

226
00:10:34,451 --> 00:10:36,864
We previously saw that, in
an interface,

227
00:10:36,864 --> 00:10:39,291
the methods are de
facto public.

228
00:10:39,411 --> 00:10:43,661
What happens if a class that
implements an interface

229
00:10:43,661 --> 00:10:47,031
defines the method present
in the interface

230
00:10:47,031 --> 00:10:50,051
but with rights different
that the public right?

231
00:10:50,051 --> 00:10:52,151
So imagine for example
that here

232
00:10:52,151 --> 00:10:55,241
I put the access right
'protected'.

233
00:10:55,671 --> 00:10:58,961
Well this will simply be refused
by the compiler

234
00:10:58,961 --> 00:11:02,831
because in Java, when you
redefine an existing method,

235
00:11:02,831 --> 00:11:05,021
you are allowed to enlarge
the rights,

236
00:11:05,021 --> 00:11:06,921
but never restrict them.

237
00:11:06,921 --> 00:11:08,861
Note that this is
also valid

238
00:11:08,861 --> 00:11:11,901
for the redefinition in the
context of inheritance.

239
00:11:11,901 --> 00:11:13,961
For example, if I have a
super-class  A

240
00:11:13,961 --> 00:11:15,901
of which inherits a
sub-class 'B',

241
00:11:15,901 --> 00:11:20,841
if  A defines a method
m as 'public',

242
00:11:20,851 --> 00:11:23,721
then the method's redefinition

243
00:11:23,721 --> 00:11:25,601
can't restrict the
rights.

244
00:11:27,081 --> 00:11:28,661
This will be refused.

245
00:11:29,001 --> 00:11:31,414
By declaring an interface
in a Java program,

246
00:11:31,414 --> 00:11:33,534
you in fact declare a
new type,

247
00:11:33,534 --> 00:11:36,354
as it is the case when you
declare a new class.

248
00:11:36,354 --> 00:11:38,754
It is therefore possible
to declare

249
00:11:38,754 --> 00:11:40,954
a variable of 'interface'
type

250
00:11:40,954 --> 00:11:42,714
like this, for example,

251
00:11:42,714 --> 00:11:46,394
and to affect an object to it. But
be careful, not any object:

252
00:11:46,394 --> 00:11:49,022
the object of a class that
implements this interface.

253
00:11:49,562 --> 00:11:50,972
This is the case here,

254
00:11:50,972 --> 00:11:54,022
so we affect to a variable of type Graphique,

255
00:11:54,022 --> 00:11:57,712
an object 

256
00:11:57,722 --> 00:11:59,382
initially instantiated as a Balle.

257
00:11:59,382 --> 00:12:02,202
So that it is possible, the 'Balle'
class must

258
00:12:02,202 --> 00:12:03,842
obviously implement

259
00:12:03,842 --> 00:12:05,962
the 'Graphique' interface.

260
00:12:05,962 --> 00:12:08,222
In some situations, it can be
interesting

261
00:12:08,222 --> 00:12:11,502
to manipulate the objects
through their interface

262
00:12:11,502 --> 00:12:13,342
rather than through their initial type.

263
00:12:13,342 --> 00:12:15,882
For example here, rather
manipulate a ball

264
00:12:15,882 --> 00:12:18,382
as a graphical object, and
in this case,

265
00:12:18,382 --> 00:12:20,902
it justifies this kind of
assignment.

266
00:12:20,902 --> 00:12:22,442
Last small note:

267
00:12:22,442 --> 00:12:24,882
knowing that we can perfectly assign

268
00:12:24,882 --> 00:12:28,342
an object of a sub-class type to
a variable of super-class type,

269
00:12:28,342 --> 00:12:31,792
this variable containing an object
of 'Balle' type,

270
00:12:31,802 --> 00:12:33,842
which implements the 'Graphique'
interface.

271
00:12:33,842 --> 00:12:36,642
Is it possible to assign this
variable

272
00:12:36,642 --> 00:12:38,502
to an object of 'Graphique'
type?

273
00:12:38,502 --> 00:12:41,522
So, this is possible, but
with a condition.

274
00:12:41,522 --> 00:12:44,002
You must here reassure
your compiler

275
00:12:44,002 --> 00:12:46,642
on the fact of what is contained
in the variable

276
00:12:46,642 --> 00:12:51,012
is indeed an object that implements
the interface

277
00:12:51,012 --> 00:12:53,209
in question, the 'Graphique'
interface.

278
00:12:53,209 --> 00:12:56,209
To do so, we use type
conversion,

279
00:12:56,209 --> 00:12:58,009
casting, here.

280
00:12:58,009 --> 00:13:01,389
To summarize, the essential
function of an interface

281
00:13:01,389 --> 00:13:04,049
is to attribute common
components

282
00:13:04,049 --> 00:13:07,729
to classes that aren't linked with
an inheritance relation.

283
00:13:07,729 --> 00:13:10,589
In our example, the 'Interactif'
interface

284
00:13:10,589 --> 00:13:12,409
allowed us here to impose

285
00:13:12,409 --> 00:13:15,769
a common content, a
'gestionClic' method,

286
00:13:15,769 --> 00:13:18,529
to two classes, Balle and
Raquette for example,

287
00:13:18,529 --> 00:13:21,229
which aren't related by an
inheritance relation.

288
00:13:21,229 --> 00:13:24,049
We don't have 'Balle' inheriting
from 'Raquette' or vice versa.

289
00:13:24,799 --> 00:13:27,979
An interface can have
constants,

290
00:13:27,979 --> 00:13:31,319
that is, final, static, public
variables.

291
00:13:31,319 --> 00:13:34,399
That's quite rare and requires
some discipline.

292
00:13:34,399 --> 00:13:36,419
Why? Because there can be

293
00:13:36,419 --> 00:13:39,239
a possible ambiguity, if, for
example, a class

294
00:13:39,239 --> 00:13:43,519
implements two interfaces that each
contain the same constant.

295
00:13:43,519 --> 00:13:45,799
Suppose for example that
in a program,

296
00:13:45,799 --> 00:13:48,339
we have a first interface 'l1'

297
00:13:48,339 --> 00:13:52,079
that contains the definition
of a constant,

298
00:13:52,079 --> 00:13:55,649
and a second interface 'l2'

299
00:13:55,649 --> 00:13:58,439
that would contain a constant
of the same name.

300
00:13:59,047 --> 00:14:02,627
With possibly another value,
but not necessarily.

301
00:14:03,097 --> 00:14:06,727
Now, if we want to declare
a class C

302
00:14:06,727 --> 00:14:10,467
that implements the two
interfaces,

303
00:14:10,477 --> 00:14:14,647
then there is clearly a problem,
an ambiguity:  

304
00:14:14,657 --> 00:14:16,917
which of the two constants
do we want to use?

305
00:14:16,917 --> 00:14:19,977
This will be refused by
the compiler.

306
00:14:20,312 --> 00:14:22,702
Another possible component
of an interface,

307
00:14:22,702 --> 00:14:25,282
and the most common one:
the abstract methods.

308
00:14:25,282 --> 00:14:27,562
And here we saw that
every class

309
00:14:27,562 --> 00:14:30,702
that implements the interface, if
it wants to be instantiated,

310
00:14:30,702 --> 00:14:33,662
must provide a concrete
definition of the method,

311
00:14:33,662 --> 00:14:36,022
otherwise it can't be instantiated.

312
00:14:36,022 --> 00:14:38,088
The interface therefore
allow to

313
00:14:38,088 --> 00:14:42,202
impose to some classes to provide
a certain content without necessarily

314
00:14:42,202 --> 00:14:45,372
using the notion of class and
abstract method.

315
00:14:45,642 --> 00:14:47,682
Contrary to the case of
variables,

316
00:14:47,682 --> 00:14:50,302
as the abstract methods don't
have any instruction lines,

317
00:14:50,302 --> 00:14:53,002
there isn't any possible
ambiguity, for example,

318
00:14:53,002 --> 00:14:55,042
if in the 'l1' interface

319
00:14:55,042 --> 00:14:59,302
there's an abstract method m, and
in another

320
00:15:00,731 --> 00:15:03,731
interface 'l2' there's also

321
00:15:05,170 --> 00:15:08,070
an abstract method 'm', then a
class 'C'

322
00:15:09,463 --> 00:15:13,853
can perfectly implement the
two interfaces

323
00:15:14,103 --> 00:15:17,173
without making the compiler
react.

324
00:15:18,657 --> 00:15:20,757
If it wants to be instantiated,

325
00:15:20,757 --> 00:15:24,977
the 'C' class must, indeed, provide
a definition of the 'm' method,

326
00:15:25,017 --> 00:15:27,517
no matter what imposes
its presence.

327
00:15:27,517 --> 00:15:29,657
Note that the Java API

328
00:15:29,657 --> 00:15:33,277
provides many predefined
interfaces, for example,

329
00:15:33,277 --> 00:15:37,237
the 'comparable' interface

330
00:15:37,877 --> 00:15:45,497
imposes to the classes that implement it
to provide a 'compareTo' method,

331
00:15:45,497 --> 00:15:50,847
that takes an object of Object
type as an argument.

332
00:15:51,664 --> 00:15:54,604
To conclude, let's look at what
relation types

333
00:15:54,604 --> 00:15:56,384
set up an interface.

334
00:15:56,384 --> 00:15:58,444
Typically, we saw that

335
00:15:58,444 --> 00:16:02,284
inheritance allows us to use an
"is-a" relation type.

336
00:16:02,284 --> 00:16:04,284
A ball "is an" entity of the game.

337
00:16:04,724 --> 00:16:07,154
We also saw that when
a class

338
00:16:07,154 --> 00:16:09,414
has as an object of another
class as an attribute,

339
00:16:09,414 --> 00:16:11,454
then a "has-a" relation type
is established

340
00:16:11,454 --> 00:16:14,614
between the two classes:
a warrior has a weapon.

341
00:16:14,854 --> 00:16:18,054
Finally, an interface lets us
be reassured

342
00:16:18,054 --> 00:16:20,854
that a class conforms to a
certain protocol,

343
00:16:20,854 --> 00:16:23,614
and we'll say that the relation
that is set up

344
00:16:23,614 --> 00:16:25,414
is a relation of type:

345
00:16:25,414 --> 00:16:28,954
"behaves-as": a ball 'is-a'
game entity,

346
00:16:28,954 --> 00:16:31,174
but it behaves like

347
00:16:31,174 --> 00:16:34,054
a graphical object and an
interactive object.

348
00:16:34,054 --> 00:16:37,754
And this concludes our episode
about Java interfaces.
