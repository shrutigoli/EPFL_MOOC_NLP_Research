1
00:00:04,191 --> 00:00:07,466
After the static attributes, we'll learn
about static methods,

2
00:00:07,466 --> 00:00:11,256
class methods, in this video
episode.

3
00:00:11,366 --> 00:00:13,633
Like with the attributes,

4
00:00:13,633 --> 00:00:17,079
if we add the keyword "static" in
front of a method,

5
00:00:17,079 --> 00:00:20,059
then that method becomes a
class method;

6
00:00:20,059 --> 00:00:23,781
that is, a method that we can call
without any object,

7
00:00:23,781 --> 00:00:27,697
without any concrete instance of the class.

8
00:00:27,697 --> 00:00:28,923
So let's see an example:

9
00:00:28,923 --> 00:00:33,350
here we have a class A in which
a method is defined.

10
00:00:33,350 --> 00:00:37,997
"methode1", which is a class method,
a static method.

11
00:00:37,997 --> 00:00:40,414
We also have a usual method,

12
00:00:40,414 --> 00:00:43,370
an instance method, here, named
"methode2".

13
00:00:43,420 --> 00:00:46,312
In the use example of this
class method,

14
00:00:46,312 --> 00:00:48,744
we see here that we can absolutely
call

15
00:00:48,744 --> 00:00:51,270
"methode1", a class method,

16
00:00:51,270 --> 00:00:55,476
without any instance of the
class A.

17
00:00:55,476 --> 00:00:59,714
The syntax is simply: "name of the
class, dot ('.'), name of the static method,

18
00:00:59,714 --> 00:01:01,204
name of the class method".

19
00:01:01,204 --> 00:01:04,069
This is entirely possible, it
will call "methode1"

20
00:01:04,069 --> 00:01:06,583
and print the message
« Méthode 1 ».

21
00:01:06,583 --> 00:01:09,101
Of course, for a standard method,
an instance method

22
00:01:09,101 --> 00:01:11,150
that isn't declared with the
"static" keyword,

23
00:01:11,150 --> 00:01:14,267
we aren't allowed to use this
syntax, it doesn't make any sense.

24
00:01:14,267 --> 00:01:17,568
"methode2" must be related to
some instance.

25
00:01:17,867 --> 00:01:22,248
So here, to continue the example, we
create an instance 'v' of the class A.

26
00:01:22,248 --> 00:01:25,539
Of course, we cal call the
class method

27
00:01:25,539 --> 00:01:29,204
with the syntax "v.methode1". That's
exactly the same

28
00:01:29,204 --> 00:01:33,532
that writing "A.methode1". It's
only an alternative form.

29
00:01:33,532 --> 00:01:36,464
I recommend you to
rather use


30
00:01:36,464 --> 00:01:39,782
"the name of the class"."the name of the
method", for class methods,

31
00:01:39,782 --> 00:01:43,899
to show your intention and remind
that it's a class method,

32
00:01:43,899 --> 00:01:47,284
even if the instance method
notation is possible.

33
00:01:47,284 --> 00:01:50,050
It is in my opinion a bit
more ambiguous,

34
00:01:50,050 --> 00:01:51,800
and I find this one to be
more clear.

35
00:01:51,800 --> 00:01:54,662
And of course, as usual, we
can call "methode2",

36
00:01:54,662 --> 00:01:57,930
which is an instance method
on the 'v' instance.

37
00:01:59,092 --> 00:02:02,784
As a static method can be called without
any instance, without any object,

38
00:02:02,784 --> 00:02:05,366
such a method can't rely on

39
00:02:05,366 --> 00:02:07,203
the existence of such
an object,

40
00:02:07,203 --> 00:02:10,870
and can therefore not use any instance
variable nor call any instance method.

41
00:02:11,070 --> 00:02:14,514
The "this" reference doesn't exist
in such a method,

42
00:02:14,514 --> 00:02:17,497
as we can't guarantee the
existence of an object.

43
00:02:17,497 --> 00:02:20,276
So such a method, a
static method,

44
00:02:20,276 --> 00:02:23,249
can only call other
static methods,

45
00:02:23,249 --> 00:02:27,654
and can only access class members,
static attributes.

46
00:02:29,404 --> 00:02:33,248
Let's illustrate this with an example.
Here we have a class A

47
00:02:33,248 --> 00:02:38,566
that contains a usual non-
static attribute 'i',

48
00:02:38,566 --> 00:02:42,340
and a class attribute, a
static attribute 'j',

49
00:02:42,340 --> 00:02:47,633
a usual non-static instance
method "methode1",

50
00:02:47,633 --> 00:02:52,285
and a static method, "methode2",
which is a class method.

51
00:02:52,285 --> 00:02:54,822
In the usual method, "methode1",

52
00:02:54,822 --> 00:02:58,772
we try to access the 'i' attribute,
which isn't problematic.

53
00:02:58,772 --> 00:03:01,110
A method linked here to
an instance can access

54
00:03:01,110 --> 00:03:04,096
both the instance
attributes

55
00:03:04,096 --> 00:03:07,543
and the 'j' class-attribute.

56
00:03:07,543 --> 00:03:09,170
We can access the two.

57
00:03:09,170 --> 00:03:11,708
Of course, we're allowed to call
"methode2",

58
00:03:11,708 --> 00:03:15,138
which is a class method,
in "methode1".

59
00:03:15,138 --> 00:03:18,403
So everything is permitted
in an instance method.

60
00:03:18,403 --> 00:03:20,572
But in a class method,

61
00:03:20,572 --> 00:03:25,461
we can only access the attributes
and the class methods.

62
00:03:25,461 --> 00:03:28,773
If we try doing the same thing
than in "methode1",

63
00:03:28,773 --> 00:03:31,630
and accessing the instance
attribute 'i',

64
00:03:31,630 --> 00:03:34,704
then we'll get a compilation
error.

65
00:03:34,704 --> 00:03:38,329
We aren't allowed to do this because
we are in a class method.

66
00:03:38,329 --> 00:03:41,401
We can't guarantee the existence
of an attribute,

67
00:03:41,401 --> 00:03:43,170
of an object, of the
A class.

68
00:03:43,170 --> 00:03:47,741
But we can access the static
attribute 'j',

69
00:03:47,741 --> 00:03:50,018
'j' is a class attribute, a
static attribute.

70
00:03:50,018 --> 00:03:52,532
We are allowed to do this.

71
00:03:52,532 --> 00:03:56,115
We aren't allowed either in
"methode2", static method,

72
00:03:56,115 --> 00:03:58,822
to call a non-static method,
"methode1",

73
00:03:58,822 --> 00:04:01,755
so this would also generate
a compilor error.

74
00:04:01,755 --> 00:04:04,761
On the other hand, we can
absolutely call static methods,

75
00:04:04,761 --> 00:04:06,333
including themselves.

76
00:04:06,353 --> 00:04:09,485
This call is syntactically correct,
there's no problem with it.

77
00:04:09,485 --> 00:04:11,901
So of course, here, as we've
called the same method,

78
00:04:11,901 --> 00:04:14,357
we should be careful and
take precautions

79
00:04:14,357 --> 00:04:16,516
so that it doesn't end up
with an infinite recursion,

80
00:04:16,516 --> 00:04:20,514
and protect this call with a
break condition.

81
00:04:20,514 --> 00:04:24,372
But that is bringing us a bit to far,
we only wanted to show, here,

82
00:04:24,372 --> 00:04:26,886
that we can call another
static method

83
00:04:26,886 --> 00:04:29,062
in a static method.

84
00:04:29,062 --> 00:04:34,734
Of course, if we create an instance
like this in a static method,

85
00:04:34,734 --> 00:04:37,698
we can absolutely create an instance
like this in a static method,

86
00:04:37,698 --> 00:04:39,751
so of course we can here call

87
00:04:39,751 --> 00:04:43,414
"methode1" on the 'v' instance
of the A class.

88
00:04:44,847 --> 00:04:48,307
Therefore, what are the uses of these
static methods, these class methods?

89
00:04:48,307 --> 00:04:51,969
Well precisely, to write methods
that aren't attached

90
00:04:51,969 --> 00:04:54,439
to particular instances
of a class,

91
00:04:54,439 --> 00:04:58,382
very general methods, typically
tool methods.

92
00:04:58,382 --> 00:05:00,999
We'll do toolbox classes
like this,

93
00:05:00,999 --> 00:05:03,338
which we won't create any
instance of,

94
00:05:03,338 --> 00:05:06,669
but of which we'll simply use
the class methods.

95
00:05:06,669 --> 00:05:09,510
For example, a mathematical
toolbox

96
00:05:09,510 --> 00:05:13,104
like this class, 'MathUtils',

97
00:05:13,104 --> 00:05:17,706
in which we've defined a
class constant,

98
00:05:17,706 --> 00:05:21,532
in which we can also define
a class method,

99
00:05:21,532 --> 00:05:25,267
that is, typically, a tool function
'auCube',

100
00:05:25,267 --> 00:05:29,746
which would compute the
cube of its parameter.

101
00:05:29,746 --> 00:05:33,149
Of course, the creation of an
object of 'MathUtils' type

102
00:05:33,149 --> 00:05:35,212
is totally artifical.

103
00:05:35,212 --> 00:05:38,467
We don't need any object of
'MathUtils' type,

104
00:05:38,467 --> 00:05:46,182
and we could directly call the PI
constant of the 'MathUtils' class,

105
00:05:46,182 --> 00:05:51,049
as, let me repeat it, PI is
indeed a class-variable.

106
00:05:51,049 --> 00:05:58,934
We could therefore also call, like this,
'MathUtils.auCube(3.4)',

107
00:05:59,654 --> 00:06:03,682
as here again, 'auCube' is an
instance-method.

108
00:06:03,682 --> 00:06:09,030
We can therefore call it without the
creation of any 'MathUtils' object,

109
00:06:09,030 --> 00:06:13,058
directly with the name of the
class.the name of the method

110
00:06:13,058 --> 00:06:16,269
to compute the cube of 3.4.

111
00:06:16,269 --> 00:06:18,475
This 'MathUtils' class is only
used to

112
00:06:18,475 --> 00:06:22,096
store utility methods and
constants.

113
00:06:22,096 --> 00:06:25,535
It isn't used to create any
concrete objects.

114
00:06:26,025 --> 00:06:30,754
In fact, that's exactly the case
of the Math class.

115
00:06:30,754 --> 00:06:34,146
And if you had to use the
PI constant,

116
00:06:34,146 --> 00:06:40,271
you'd use the one of the API, and in standard
Java that is written Math.PI,

117
00:06:40,271 --> 00:06:42,249
the Math class of the API,
exactly like

118
00:06:42,249 --> 00:06:45,427
our small pedagogic example
with MathUtils.

119
00:06:45,427 --> 00:06:47,863
Of course, you never do this
yourself,

120
00:06:47,863 --> 00:06:52,061
but you use the constants
defined in the API.

121
00:06:53,401 --> 00:06:56,362
So that's typically what static methods,

122
00:06:56,362 --> 00:06:59,320
class methods, can
be used for.

123
00:06:59,320 --> 00:07:03,241
That being said, avoid abusing
of the "static" keyword,

124
00:07:03,241 --> 00:07:05,946
avoid proliferating this
"static" keyword,

125
00:07:05,946 --> 00:07:09,410
and keep it for very
particular cases.

126
00:07:10,070 --> 00:07:12,506
Typically, the three following
cases.

127
00:07:12,506 --> 00:07:16,739
We can use static with 'final'
for an attribute,

128
00:07:16,739 --> 00:07:22,059
that is, here, a class variable,
to define constants.

129
00:07:22,059 --> 00:07:25,331
That was the example with
the Math.PI variable.

130
00:07:25,701 --> 00:07:29,586
The second situation is to
use static without 'final',

131
00:07:29,586 --> 00:07:32,467
for an attribute. That's
more rare,

132
00:07:32,467 --> 00:07:38,467
and it's for sharing a common
value at the class level,

133
00:07:38,467 --> 00:07:41,798
value common to the class, but
that could change.

134
00:07:41,798 --> 00:07:44,382
This situation is more rare and
you won't come upon it

135
00:07:44,382 --> 00:07:46,367
in the context of this course.

136
00:07:46,367 --> 00:07:48,165
Concerning the methods,
finally,

137
00:07:48,165 --> 00:07:50,919
we can define class methods,
static methods,

138
00:07:50,919 --> 00:07:53,636
when, as we've seen before,
we have utility methods,

139
00:07:53,636 --> 00:07:57,386
for which it is artificial to
link to a particular object,

140
00:07:57,386 --> 00:08:00,954
and which are therefore invokable
without any object.

141
00:08:00,954 --> 00:08:04,302
It's generally also very rare that
you write them yourself,

142
00:08:04,302 --> 00:08:07,581
but you'll typically use the ones
provided by the API,

143
00:08:07,581 --> 00:08:10,742
like for example the sqrt,
square-root, method

144
00:08:10,742 --> 00:08:14,639
of the Math class, provided by
the Java API.

145
00:08:14,639 --> 00:08:18,375
Another example of static method,
that you've already practiced,

146
00:08:18,375 --> 00:08:20,811
is the main method.

147
00:08:21,217 --> 00:08:24,268
And we now understand why the
auxiliary methods,

148
00:08:24,268 --> 00:08:27,775
which we call functions in general
procedural programmation,

149
00:08:27,775 --> 00:08:31,927
so the auxiliary methods of main
are static methods.

150
00:08:31,927 --> 00:08:35,433
As main has indeed a
fixed header,

151
00:08:35,433 --> 00:08:39,501
it must be a method that is
static in a class.

152
00:08:39,501 --> 00:08:41,150
As it's a static method,

153
00:08:41,150 --> 00:08:44,424
it can only access other
static methods,

154
00:08:44,424 --> 00:08:46,960
and therefore the auxiliary
methods of main

155
00:08:46,960 --> 00:08:50,580
have to be static
methods.

156
00:08:50,580 --> 00:08:53,064
Likewise, the main method,
because it is static,

157
00:08:53,064 --> 00:08:58,571
can't access any object of the class
in which it was defined.

158
00:08:58,571 --> 00:09:01,031
So it can't access
variables

159
00:09:01,031 --> 00:09:04,538
and instance methods of the class
in which it has been defined.

160
00:09:04,538 --> 00:09:06,287
Note that apart from that,

161
00:09:06,287 --> 00:09:08,667
the class in which the main
method is defined

162
00:09:08,667 --> 00:09:12,919
is like any other class, it
can have attributes,

163
00:09:12,919 --> 00:09:15,441
methods, constructors, etc.

164
00:09:16,331 --> 00:09:20,761
Voilà! This concludes our episode
about static methods,

165
00:09:20,761 --> 00:09:22,140
class methods.
