1
00:00:04,090 --> 00:00:06,512
Let's continue our case study
on watches.

2
00:00:06,512 --> 00:00:10,061
The idea is to refine the model of
the different types of mechanisms used

3
00:00:10,061 --> 00:00:12,500
in particular by including
the concept of interfaces.

4
00:00:12,500 --> 00:00:14,545
As a reminder, in the
previous episodes,

5
00:00:14,545 --> 00:00:17,767
the heart of a watch was
modeled as being a mechanism,

6
00:00:17,767 --> 00:00:20,713
a mechanism that could take
on different forms;

7
00:00:20,713 --> 00:00:23,293
we could have either
an analog mechanism,

8
00:00:23,298 --> 00:00:26,223
a digital mechanism, or
a double mechanism

9
00:00:26,223 --> 00:00:30,800
These three types of mechanism
all inherited from Mecanisme.

10
00:00:30,800 --> 00:00:34,462
This first hierarchy, however, does not quite
correspond to our wishes

11
00:00:34,462 --> 00:00:36,942
concerning modeling of
double mechanisms.

12
00:00:36,943 --> 00:00:39,393
Indeed, we would like a double
mechanism

13
00:00:39,407 --> 00:00:42,106
to be able to have
characteristics

14
00:00:42,106 --> 00:00:46,753
from both analog mechanisms

15
00:00:46,753 --> 00:00:48,378
and digital mechanisms.

16
00:00:48,378 --> 00:00:50,672
Ideally, a double mechanism

17
00:00:50,672 --> 00:00:55,922
should be able to inherit
from the MecanismeDigital class

18
00:00:55,949 --> 00:01:00,276
as well as from the
MecanismeAnalogique class.

19
00:01:00,276 --> 00:01:02,416
Unfortunately, multiple inheritance

20
00:01:02,416 --> 00:01:04,092
does not exist in Java.

21
00:01:04,092 --> 00:01:05,496
Suppose for example that

22
00:01:05,496 --> 00:01:06,938
in the analog class

23
00:01:06,938 --> 00:01:09,178
we have a attribute that is specific

24
00:01:09,183 --> 00:01:10,563
to analog mechanisms

25
00:01:10,569 --> 00:01:12,679
which would be the date
displayed by the mechanism

26
00:01:12,681 --> 00:01:15,720
and that in the case of the digital
mechanism,

27
00:01:15,720 --> 00:01:17,376
we have another attribute

28
00:01:17,376 --> 00:01:21,516
which would be an alarm
linked to the digital mechanism.

29
00:01:21,516 --> 00:01:24,107
Then, maintaining this inheritance link

30
00:01:24,107 --> 00:01:25,777
would result in a duplication

31
00:01:25,781 --> 00:01:27,875
of both attributes into
the double mechanism class

32
00:01:27,875 --> 00:01:29,415
since we would effectively want

33
00:01:29,428 --> 00:01:31,787
a double mechanism to have
the characteristics

34
00:01:31,787 --> 00:01:33,139
of both of these classes

35
00:01:33,139 --> 00:01:35,525
that is, having both an alarm
and a date.

36
00:01:35,525 --> 00:01:37,859
We would end up in this situation

37
00:01:39,821 --> 00:01:41,521
as would be the case

38
00:01:41,521 --> 00:01:42,950
for all the methods

39
00:01:42,950 --> 00:01:45,520
specific to analog mechanisms

40
00:01:45,530 --> 00:01:46,880
and to digital mechanisms

41
00:01:46,880 --> 00:01:49,124
which we would have to 
review entirely

42
00:01:49,124 --> 00:01:50,349
in double mechanisms.

43
00:01:50,349 --> 00:01:53,629
Thus, we could decide that,
for example,

44
00:01:53,629 --> 00:01:56,795
a double mechanism is an
analog mechanism

45
00:01:56,795 --> 00:01:58,907
to which some characteristics
of digital mechanisms

46
00:01:58,907 --> 00:02:00,553
would be added.

47
00:02:00,553 --> 00:02:02,233
If we take this point of view,

48
00:02:02,241 --> 00:02:04,673
we can prevent

49
00:02:04,673 --> 00:02:06,343
duplication incurred by the

50
00:02:06,343 --> 00:02:08,113
original conception of inheritance.

51
00:02:08,113 --> 00:02:09,793
In this case, we would end up with

52
00:02:09,793 --> 00:02:11,979
a hierarchy that would look
like this:

53
00:02:11,979 --> 00:02:13,889
double mechanisms inherit

54
00:02:13,889 --> 00:02:15,314
from analog mechanisms,

55
00:02:15,314 --> 00:02:17,062
and for now there is no

56
00:02:17,062 --> 00:02:18,472
direct link between

57
00:02:18,484 --> 00:02:20,638
double mechanisms and
digital mechanisms.

58
00:02:20,638 --> 00:02:22,798
We will correct this a little later on.

59
00:02:22,802 --> 00:02:25,769
All the attributes specific

60
00:02:25,769 --> 00:02:27,384
to analog mechanisms

61
00:02:27,384 --> 00:02:29,336
and all the methods are thus

62
00:02:29,336 --> 00:02:31,473
inherited by the MecanismeDouble class

63
00:02:31,473 --> 00:02:33,133
which doesn't need to duplicate them.

64
00:02:33,133 --> 00:02:35,443
However, since we cannot inherit fro

65
00:02:35,446 --> 00:02:37,336
the MecanismeDigital class,

66
00:02:37,346 --> 00:02:41,456
the characteristics of digital mechanisms

67
00:02:41,456 --> 00:02:44,475
that we would like to see
in double mechanisms

68
00:02:44,475 --> 00:02:46,265
must be duplicated.

69
00:02:46,272 --> 00:02:49,564
The Java code that corresponds
to this first revision of the hierarchy

70
00:02:49,564 --> 00:02:50,756
is as follows.

71
00:02:50,756 --> 00:02:53,538
We have a Mecanisme superclass

72
00:02:53,538 --> 00:02:56,952
which is derived from Produit and which
has two direct subclasses:

73
00:02:56,952 --> 00:03:00,402
the MecanismeAnalogique class and
the MecanismeDigital class;

74
00:03:00,412 --> 00:03:03,316
so we suppose, here, that our classes
for analog mechanisms

75
00:03:03,316 --> 00:03:05,836
and digital mechanisms have
specific attributes:

76
00:03:05,845 --> 00:03:07,705
a date, for analog mechanisms

77
00:03:07,715 --> 00:03:09,675
and an alarm for digital mechanisms.

78
00:03:09,678 --> 00:03:12,478
And we choose to consider
that a double mechanism

79
00:03:12,484 --> 00:03:16,688
is first and foremost an analog mechanism
to which we add some characteristics

80
00:03:16,688 --> 00:03:18,811
of digital mechanisms.

81
00:03:18,811 --> 00:03:23,371
So here, the inheritance link between
double mechanisms

82
00:03:23,381 --> 00:03:24,825
and analog mechanisms is established,

83
00:03:24,825 --> 00:03:28,437
and we graft onto the MecanismeDouble
class some elements

84
00:03:28,437 --> 00:03:31,253
that are characteristic of
digital mechanisms.

85
00:03:31,253 --> 00:03:35,745
So here we are forced to duplicate
the reveil attribute (TN: "reveil" means "alarm").

86
00:03:35,745 --> 00:03:38,542
Now, let's focus on construction
of the mechanisms:

87
00:03:38,542 --> 00:03:41,466
programming constructors in a
class hierarchy

88
00:03:41,466 --> 00:03:44,346
follows certain rules that we
will review now.

89
00:03:44,349 --> 00:03:47,313
Let's start by defining how
we will construct mechanisms

90
00:03:47,313 --> 00:03:49,843
-- up until now we only had a
default constructor --

91
00:03:49,843 --> 00:03:52,710
and let's refine the description
of this constructor.

92
00:03:52,710 --> 00:03:54,797
Given that a mechanism is a product,

93
00:03:54,797 --> 00:03:56,851
meaning it inherits from the Produit class,

94
00:03:56,851 --> 00:03:58,502
it must initialize the base value

95
00:03:58,502 --> 00:04:00,188
of the product inherited from Produit

96
00:04:00,188 --> 00:04:02,444
and it must initialize its own attribute,

97
00:04:02,444 --> 00:04:03,780
that is, heure (TN: means "time").

98
00:04:03,780 --> 00:04:05,893
So naturally, we could think
of a constructor for the Mecanisme

99
00:04:05,893 --> 00:04:08,076
class that would look like this.

100
00:04:08,076 --> 00:04:11,211
It would take as parameter a
value allowing

101
00:04:11,211 --> 00:04:13,705
to initialize the attribute inherited
from Produit

102
00:04:13,705 --> 00:04:15,959
and as second parameter,
a value

103
00:04:15,959 --> 00:04:18,984
allowing to initialize its
own attribute.

104
00:04:18,984 --> 00:04:20,624
The constructor of the Mecanisme class

105
00:04:20,624 --> 00:04:22,295
must absolutely invoke

106
00:04:22,295 --> 00:04:24,365
the constructor of the Produit
superclass

107
00:04:24,370 --> 00:04:25,871
via this syntax.

108
00:04:25,871 --> 00:04:28,724
If, during construction, we want to
assign a default value

109
00:04:28,724 --> 00:04:30,725
to the heure attribute,
then we will do this

110
00:04:30,725 --> 00:04:33,513
in the same way as we did
for the Produit class

111
00:04:33,513 --> 00:04:35,505
by overloading the constructor.

112
00:04:35,505 --> 00:04:38,329
That is, we define a second constructor

113
00:04:38,329 --> 00:04:40,664
that would take no parameter

114
00:04:40,664 --> 00:04:45,544
for the mechanism's time, but
that would initialize this attribute

115
00:04:45,548 --> 00:04:47,858
with a specific value.

116
00:04:47,858 --> 00:04:50,536
Now, let's work on the
constructors of the subclasses.

117
00:04:50,536 --> 00:04:54,127
First, the constructor of the
MecanismeAnalogique subclass

118
00:04:54,127 --> 00:04:56,577
for example, which inherits directly
from the Mecanisme class.

119
00:04:57,217 --> 00:05:00,069
This constructor will take, as
parameters, values

120
00:05:00,069 --> 00:05:01,548
allowing it to initialize

121
00:05:01,548 --> 00:05:04,255
all of its attributes; those
inherited from higher up

122
00:05:04,255 --> 00:05:07,085
and its own ones.

123
00:05:07,085 --> 00:05:09,355
The constructor of the
MecanismeAnalogique subclass

124
00:05:09,355 --> 00:05:10,791
must therefore also invoke

125
00:05:10,791 --> 00:05:13,837
the constructor of the
Mecanisme superclass

126
00:05:13,837 --> 00:05:15,437
always in the same way.

127
00:05:15,437 --> 00:05:17,482
And the constructor of the
MecanismeDigital class

128
00:05:17,482 --> 00:05:19,665
will be written in a very
analogous way.

129
00:05:19,665 --> 00:05:21,803
One possible constructor for
the MecanismeDouble class

130
00:05:21,803 --> 00:05:23,454
is a constructor allowing

131
00:05:23,454 --> 00:05:26,826
the initialization of all
of its attributes,

132
00:05:26,826 --> 00:05:29,246
those that are specific to it
such as the alarm here,

133
00:05:29,255 --> 00:05:32,199
and those that are inherited from above.

134
00:05:32,199 --> 00:05:34,488
We will inherit several attributes
from higher up:

135
00:05:34,488 --> 00:05:36,858
the date, from MecanismeAnalogique,

136
00:05:36,861 --> 00:05:40,847
the time from Mecanisme and
the base value from Produit.

137
00:05:40,847 --> 00:05:42,836
This constructor for MecanismeDouble

138
00:05:42,836 --> 00:05:46,296
will thus call the superclass's
constructor to initialize

139
00:05:46,296 --> 00:05:48,605
the inherited attributes

140
00:05:48,605 --> 00:05:50,242
and it will initialize its own attribute.

141
00:05:50,242 --> 00:05:51,843
Now, let's focus on how the constructors

142
00:05:51,843 --> 00:05:54,481
will handle default values.

143
00:05:54,481 --> 00:05:56,448
Remember that when we
defined

144
00:05:56,448 --> 00:05:58,151
the constructors of the 
Mecanisme class,

145
00:05:58,151 --> 00:06:01,260
we had provided the possibility of
constructing a mechanism

146
00:06:01,260 --> 00:06:03,676
without supplying a time,
in which case the time

147
00:06:03,676 --> 00:06:04,935
would have a certain default value.

148
00:06:04,935 --> 00:06:07,148
And now, we want to know how

149
00:06:07,148 --> 00:06:09,045
the constructors of the subclasses

150
00:06:09,045 --> 00:06:11,703
can preserve this default value.

151
00:06:11,703 --> 00:06:13,643
For example, we would like 
to be able to

152
00:06:13,643 --> 00:06:15,951
define a double mechanism without
giving it a time

153
00:06:15,951 --> 00:06:17,330
and in that case, we would like

154
00:06:17,330 --> 00:06:20,114
its heure attribute to have
the same default value

155
00:06:20,114 --> 00:06:22,732
as the one that is intended
for simple mechanisms

156
00:06:22,732 --> 00:06:27,587
and of course, we still want to have
the ability to initialize its own value

157
00:06:27,587 --> 00:06:30,307
The solution, once again, relies
on overloading.

158
00:06:30,317 --> 00:06:34,072
The overload would define
the constructor of the MecanismeDouble

159
00:06:34,072 --> 00:06:36,698
class in a way that would allow it to
work without a value

160
00:06:36,698 --> 00:06:38,733
for its heure attribute

161
00:06:38,733 --> 00:06:41,299
It would then call the constructor
of the superclass

162
00:06:41,299 --> 00:06:42,890
that is based on the same principle,

163
00:06:42,890 --> 00:06:47,304
that is, a constructor that would not
require the time as a parameter.

164
00:06:47,304 --> 00:06:49,143
This means that in the
MecanismeAnalogique

165
00:06:49,143 --> 00:06:50,462
superclass,

166
00:06:50,462 --> 00:06:54,261
there is a constructor that does not
require a parameter for the time.

167
00:06:54,261 --> 00:06:58,479
and do you know what the first instruction
of this constructor will be?

168
00:06:58,479 --> 00:07:00,579
The constructor of MecanismeAnalogique

169
00:07:00,580 --> 00:07:04,128
will indeed invoke this constructor
of the Mecanisme superclass

170
00:07:04,128 --> 00:07:07,318
which will initialize the default
time correctly 

171
00:07:07,318 --> 00:07:10,777
To conclude our discussion on
construction at this step,

172
00:07:10,777 --> 00:07:15,417
remember that the Montre class has a
core attribute of type Mecanisme.

173
00:07:15,417 --> 00:07:18,566
The constructor that we used up til now
was a default constructor

174
00:07:18,566 --> 00:07:21,565
which simply initialized the
set of accessories

175
00:07:21,565 --> 00:07:22,925
as an empty array

176
00:07:22,925 --> 00:07:26,942
Now, we can provide a somewhat
more complete constructor

177
00:07:26,942 --> 00:07:29,716
which would take as parameter a Mecanisme

178
00:07:29,716 --> 00:07:32,139
that would be used to initialize
the core attribute

179
00:07:32,139 --> 00:07:34,694
This way of initializing the core

180
00:07:34,694 --> 00:07:38,594
using a reference to an object passed
as parameter to the constructor

181
00:07:38,594 --> 00:07:40,409
is not very satisfactory.

182
00:07:40,409 --> 00:07:43,153
We will come back to this
in the next episode

183
00:07:43,153 --> 00:07:46,133
when we will cover deep copy.

184
00:07:46,133 --> 00:07:49,340
Now we have finished with the
constructors for mechanism,

185
00:07:49,340 --> 00:07:51,050
let's focus on displaying them.

186
00:07:51,050 --> 00:07:52,816
Suppose that to do these displays,

187
00:07:52,816 --> 00:07:55,509
we wish for all mechanisms

188
00:07:55,509 --> 00:07:57,783
to be displayed following
the same model:

189
00:07:57,783 --> 00:08:00,463
a model that is imposed and
cannot be modified.

190
00:08:00,463 --> 00:08:02,811
This model would for example be
to systematically

191
00:08:02,811 --> 00:08:05,081
display the mechanism's type

192
00:08:05,095 --> 00:08:07,120
followed by displaying the dial

193
00:08:07,120 --> 00:08:09,457
which would contain the time
and, when applicable,

194
00:08:09,457 --> 00:08:11,259
the date, the time of the alarm,
all of this followed

195
00:08:11,259 --> 00:08:13,289
by the price, for example

196
00:08:13,289 --> 00:08:14,773
But we would also like

197
00:08:14,773 --> 00:08:16,816
each of these parts,

198
00:08:17,984 --> 00:08:20,501
each of the parts of this model to
be adaptable.

199
00:08:20,501 --> 00:08:21,960
What we mean by <i>part</i>

200
00:08:21,960 --> 00:08:25,593
would be for example the part that
displays the mechanism's type

201
00:08:25,593 --> 00:08:28,509
the part that displays the dial.

202
00:08:28,509 --> 00:08:30,763
This conception implies

203
00:08:30,763 --> 00:08:32,605
that there is a general display method

204
00:08:32,605 --> 00:08:35,531
for all mechanisms that follows
a precise model

205
00:08:35,531 --> 00:08:40,052
but that this method calls other
methods

206
00:08:43,560 --> 00:08:46,471
which could have a
dynamic behavior,

207
00:08:46,471 --> 00:08:49,425
in a polymorphic way.

208
00:08:52,275 --> 00:08:53,577
Therefore, the idea is to allow

209
00:08:53,577 --> 00:08:56,539
these methods to have
a specific behavior

210
00:08:56,539 --> 00:08:58,961
depending on the subclass, meaning
that, for example,

211
00:08:58,961 --> 00:09:02,110
we would have a display method

212
00:09:02,110 --> 00:09:04,911
for mechanisms that would be
specific to each subclass.

213
00:09:04,911 --> 00:09:07,525
Similarly, we would have a method
for displaying the dial

214
00:09:07,525 --> 00:09:10,658
that would be specific to each subclass
and, thanks to polymorphism,

215
00:09:10,658 --> 00:09:13,660
it would be able to adapt automatically
to the real nature of the objects

216
00:09:13,660 --> 00:09:15,512
for which it is called.

217
00:09:15,512 --> 00:09:17,835
The fact that the same basic schema

218
00:09:17,835 --> 00:09:21,364
is imposed for all mechanisms

219
00:09:21,364 --> 00:09:26,282
implies that once these methods are
made to follow this fixed outline,

220
00:09:26,282 --> 00:09:30,116
they must not be modified anymore.
This should make us think of

221
00:09:30,906 --> 00:09:32,695
final methods.

222
00:09:33,665 --> 00:09:35,586
We also want to make sure that

223
00:09:35,586 --> 00:09:38,890
there exists a usable version
of the dial display

224
00:09:38,890 --> 00:09:40,927
in the subclasses.

225
00:09:40,927 --> 00:09:43,731
So this method should have
a default definition,

226
00:09:43,731 --> 00:09:47,095
typically right at the top of the hierarchy,
in the Mecanisme class.

227
00:09:47,095 --> 00:09:49,468
This default version could for
example simply

228
00:09:49,468 --> 00:09:52,360
display the time and be used
in the subclasses

229
00:09:52,360 --> 00:09:55,961
to display the time but also possibly
more information

230
00:09:55,961 --> 00:09:58,399
So here, we are going towards
a method that would be

231
00:09:58,399 --> 00:10:00,505
polymorphic for the display of the dial

232
00:10:00,505 --> 00:10:03,787
but that would have a default
definition in the superclass.

233
00:10:03,787 --> 00:10:07,265
However, to display the type
of mechanism,

234
00:10:07,265 --> 00:10:09,022
we absolutely want

235
00:10:09,022 --> 00:10:12,606
to force an override in subclasses,

236
00:10:12,606 --> 00:10:14,591
which should make us think

237
00:10:14,591 --> 00:10:18,154
of abstract methods here.

238
00:10:21,184 --> 00:10:24,649
Here is how we can translate these
constraints into Java code

239
00:10:25,395 --> 00:10:30,663
Our Mecanisme superclass provides a
polymorphic display method

240
00:10:31,343 --> 00:10:35,610
which overrides the one inherited
from Product that displayed the price

241
00:10:35,610 --> 00:10:39,463
our Mecanisme superclass therefore
provides a display method

242
00:10:39,463 --> 00:10:43,641
that follows a precise schema
including displaying the type,

243
00:10:43,641 --> 00:10:46,264
the dial and the price via

244
00:10:46,264 --> 00:10:49,197
the method inherited from Produit

245
00:10:49,197 --> 00:10:52,911
To make sure that this schema is
fixed once and for all

246
00:10:52,911 --> 00:10:56,758
and cannot be overridden in a subclass
of the hierarchy,

247
00:10:56,758 --> 00:11:01,526
we mark this method as "final".

248
00:11:02,436 --> 00:11:05,667
Subclasses of Mecanisme will no
longer be able

249
00:11:05,667 --> 00:11:09,304
to redefine the toString method. It is
declared as final.

250
00:11:09,304 --> 00:11:13,184
However, they will be able to
redefine parts

251
00:11:13,184 --> 00:11:16,389
of this schema, such as the display
of the dial for example,

252
00:11:16,389 --> 00:11:18,964
or the display of the type,
which are polymorphic methods

253
00:11:18,964 --> 00:11:20,962
which will be able to adapt

254
00:11:20,962 --> 00:11:23,325
to the type of mechanism on which
they are called.

255
00:11:23,906 --> 00:11:26,548
The method that displays the dial
according to what we

256
00:11:26,548 --> 00:11:29,805
specified earlier has a 
default definition

257
00:11:29,805 --> 00:11:31,649
in the Mecanisme class.

258
00:11:31,649 --> 00:11:33,786
There, it simply allows one
to display the time

259
00:11:33,786 --> 00:11:36,403
We have decided to declare
it as protected

260
00:11:36,403 --> 00:11:40,567
to allow subclasses to use this method
of their superclass.

261
00:11:40,567 --> 00:11:43,565
There is no risk concerning
encapsulation here

262
00:11:43,565 --> 00:11:46,293
since the toStringCadran method, which

263
00:11:46,293 --> 00:11:48,362
allows us to generate a representation
of the dial,

264
00:11:48,362 --> 00:11:52,153
does not modify internal details of
the mechanism.

265
00:11:52,719 --> 00:11:55,044
However, we can consider
that the method

266
00:11:55,044 --> 00:11:57,021
that displays the type of the mechanism

267
00:11:57,021 --> 00:12:00,272
cannot really be defined at this
stage of the hierarchy.

268
00:12:00,272 --> 00:12:01,610
This method will therefore

269
00:12:01,610 --> 00:12:03,908
be defined as abstract.

270
00:12:03,908 --> 00:12:06,748
The fact that we declare this method
as abstract

271
00:12:06,748 --> 00:12:10,858
forces its redefinition in all of the
subclasses of Mecanisme

272
00:12:10,858 --> 00:12:12,997
that we want to instantiate later on.

273
00:12:12,997 --> 00:12:16,473
Any subclass of the Mecanisme class
that we want to be able to instantiate, 

274
00:12:16,473 --> 00:12:19,111
such as the MecanismeDigital class
for example,

275
00:12:19,111 --> 00:12:21,982
will absolutely have to provide
an actual definition

276
00:12:21,982 --> 00:12:24,076
for the method that displays

277
00:12:24,076 --> 00:12:26,683
the type, as is the case here.

278
00:12:26,683 --> 00:12:30,404
The MecanismeDigital sublcass
can of course also

279
00:12:30,404 --> 00:12:33,360
override the method that handles
the dial's display.

280
00:12:33,360 --> 00:12:35,515
And it can override this method

281
00:12:35,515 --> 00:12:37,982
by using the method
inherited from above,

282
00:12:37,982 --> 00:12:40,481
that is, the one that allows us
to display the time.

283
00:12:40,481 --> 00:12:45,399
So here, displaying the dial of a digital
mechanism will display the time

284
00:12:45,399 --> 00:12:48,278
as well as the alarm.

285
00:12:48,778 --> 00:12:51,607
Displaying the alarm is also
handled through a method

286
00:12:51,607 --> 00:12:55,900
but in this case, the method is specific
to the MecanismeDigital class.

287
00:12:55,900 --> 00:12:59,929
It simply displays "réveil" followed
by the time of the alarm.

288
00:12:59,929 --> 00:13:01,575
The MecanismeDouble class,

289
00:13:01,575 --> 00:13:03,715
if it is do be instantiated,
which is the case,

290
00:13:03,715 --> 00:13:06,315
must also imperatively

291
00:13:06,315 --> 00:13:08,977
override the method handling
multiple display.

292
00:13:09,824 --> 00:13:12,727
Since it has an alarm, whose value
we probably also

293
00:13:12,727 --> 00:13:16,647
want to be able to display, we
must also define

294
00:13:16,647 --> 00:13:19,276
the method that will allow us
to display the time of the alarm

295
00:13:19,276 --> 00:13:23,610
in the same way as we did for
digital mechanisms.

296
00:13:23,610 --> 00:13:25,768
And we can consider redefining

297
00:13:25,768 --> 00:13:28,143
the method that handles the
display of the dial,

298
00:13:28,148 --> 00:13:30,977
that is, the one that can display
information on the dial

299
00:13:30,977 --> 00:13:34,194
inherited from MecanismeAnalogique,

300
00:13:34,194 --> 00:13:36,352
specifically the time and the
date here.

301
00:13:36,352 --> 00:13:40,032
And we would then display the
information pertaining to the alarm

302
00:13:40,049 --> 00:13:42,252
through this specific method.

303
00:13:42,252 --> 00:13:45,909
So as you can see, both the 
MecanismeDouble class

304
00:13:46,876 --> 00:13:50,594
and the MecanismeDigital class
contain methods that are used

305
00:13:50,594 --> 00:13:52,946
to display information about the alarm

306
00:13:52,946 --> 00:13:54,837
and do so in a completely analogous way.

307
00:13:54,837 --> 00:13:57,499
However, there is no link
between the two.

308
00:13:58,040 --> 00:14:01,703
It would be nice to clarify the link
between mechanisms

309
00:14:01,703 --> 00:14:03,418
that have a digital behavior,

310
00:14:03,418 --> 00:14:06,758
that is, MecanismeDouble and
MecanismeDigital in our case,

311
00:14:06,758 --> 00:14:10,512
and to force mechanisms that
have this digital behavior

312
00:14:10,519 --> 00:14:12,848
to implement these common methods
such as

313
00:14:12,848 --> 00:14:15,594
the toStringReveil method that
handles the display

314
00:14:15,594 --> 00:14:17,699
of information relating to the alarm.

315
00:14:17,699 --> 00:14:21,817
And this leads us to a new revision of
our class hierarchy.

316
00:14:21,817 --> 00:14:24,783
We can establish the link between
digital mechanisms

317
00:14:24,783 --> 00:14:28,856
and double mechanisms via an interface,
which would force

318
00:14:28,856 --> 00:14:31,043
subclasses that implement it

319
00:14:31,043 --> 00:14:33,574
to implement the method that
handles the display

320
00:14:33,574 --> 00:14:36,274
of information about the alarm.

321
00:14:36,274 --> 00:14:39,207
So we can introduce the ReveilDigital
(TN: means "digital alarm") interface

322
00:14:39,224 --> 00:14:43,358
and force all classes that would implement
digital characteristics

323
00:14:43,365 --> 00:14:46,429
to provide a method allowing the display

324
00:14:46,429 --> 00:14:48,226
of information concerning the alarm.

325
00:14:48,226 --> 00:14:50,034
Our MecanismeDigital class

326
00:14:50,034 --> 00:14:52,884
would implement this interface.

327
00:14:52,884 --> 00:14:56,560
The same would go for the MecanismeDouble
class. And if we want to be able to

328
00:14:56,560 --> 00:14:59,930
instantiate these two classes, they
must imperatively provide

329
00:14:59,930 --> 00:15:03,187
an implementation of the
same method,

330
00:15:03,187 --> 00:15:06,583
the method allowing the display of
information about the alarm.

331
00:15:07,002 --> 00:15:09,446
In this model, the MecanismeDouble class

332
00:15:09,446 --> 00:15:11,216
is mostly an analog mechanism

333
00:15:11,216 --> 00:15:15,575
that would contain a certain number of aspects
of digital mechanisms,

334
00:15:15,575 --> 00:15:18,724
that we can also find in the
MecanismeDigital class.

335
00:15:18,724 --> 00:15:21,917
But it is forced to implement these
elements that are characteristic

336
00:15:21,917 --> 00:15:27,142
of digital mechanisms due to the fact that
it implements the ReveilDigital interface.

337
00:15:27,143 --> 00:15:31,256
Note that thanks to the introduction
of the interface,

338
00:15:31,256 --> 00:15:33,799
the model is now clearer, more
understandable,

339
00:15:33,799 --> 00:15:37,360
but we have not avoided code
duplication

340
00:15:37,360 --> 00:15:41,395
that results from the lack of real
multiple inheritance in Java.

341
00:15:41,395 --> 00:15:44,007
If these code duplications become
too common,

342
00:15:44,007 --> 00:15:47,923
then this model that we based on 
inheritance

343
00:15:47,923 --> 00:15:50,137
would have to be reviewed, and
probably changed to have

344
00:15:50,137 --> 00:15:53,919
a model using encapsulation.

345
00:15:53,919 --> 00:15:56,151
For example, we could imagine

346
00:15:56,151 --> 00:15:57,879
introducing a "DigitalFunctions" class

347
00:15:57,879 --> 00:15:59,793
grouping all the common elements

348
00:15:59,793 --> 00:16:02,229
from digital mechanisms,

349
00:16:02,229 --> 00:16:05,751
and so each of the MecanismeDigital
and MecanismeDouble classes

350
00:16:05,751 --> 00:16:09,279
would have an instance of this as
an attribute, for example.

351
00:16:09,279 --> 00:16:11,465
If you paid attention to the
evolution of the code

352
00:16:11,465 --> 00:16:13,115
in the previous slides,

353
00:16:13,115 --> 00:16:16,805
you may have noticed that we modified
the access rights

354
00:16:16,805 --> 00:16:19,922
of the toStringReveil method.

355
00:16:19,922 --> 00:16:21,834
Do you know why?

356
00:16:21,834 --> 00:16:24,118
There, this concludes the modelling

357
00:16:24,118 --> 00:16:25,963
of our class hierarchy.

358
00:16:25,963 --> 00:16:27,584
As usual now,

359
00:16:27,584 --> 00:16:29,292
here is a small main program

360
00:16:29,292 --> 00:16:31,966
allowing us to test the latest
additions.

361
00:16:32,525 --> 00:16:35,724
These lines of code will allow us to
test the different constructors

362
00:16:35,724 --> 00:16:38,123
of our subclasses, including
those that manage

363
00:16:38,123 --> 00:16:40,581
unprovided, default values.

364
00:16:40,581 --> 00:16:42,940
This constructor builds an analog

365
00:16:42,940 --> 00:16:46,340
mechanism that has a base
value of 312,

366
00:16:46,340 --> 00:16:48,793
a time that will take on 
the default value,

367
00:16:48,793 --> 00:16:52,468
that is, 12.0, and with this date.

368
00:16:52,468 --> 00:16:57,765
And this call builds a double mechanism with
a base value of 543,

369
00:16:57,765 --> 00:17:02,094
with an explicit initialization time of
8:20,

370
00:17:02,094 --> 00:17:07,202
a date -- since it is a MecanismeDouble, it
inherits from MecanismeAnalogique

371
00:17:07,202 --> 00:17:10,390
and thus has a date -- and an
alarm time.

372
00:17:10,390 --> 00:17:12,798
The following lines will test

373
00:17:12,798 --> 00:17:16,771
that the toString methods coded in
the different levels

374
00:17:16,771 --> 00:17:18,759
were coded correctly.

375
00:17:18,759 --> 00:17:21,472
We can now declare a watch with
a core

376
00:17:21,472 --> 00:17:23,604
that corresponds to a specific mechanism

377
00:17:23,604 --> 00:17:25,907
and we can, as we could earlier,

378
00:17:25,907 --> 00:17:28,391
add accessories to this watch.

379
00:17:28,391 --> 00:17:30,247
We can finalize the display method

380
00:17:30,247 --> 00:17:32,065
by having it display its core too,

381
00:17:33,623 --> 00:17:35,888
since we now have display methods
for our mechanisms

382
00:17:35,888 --> 00:17:39,297
and this will allow us to display
an entire watch.

383
00:17:39,297 --> 00:17:42,690
The code for this part can be downloaded
on the course website.

384
00:17:43,540 --> 00:17:46,651
And this concludes this episode
on the modeling of mechanisms.
