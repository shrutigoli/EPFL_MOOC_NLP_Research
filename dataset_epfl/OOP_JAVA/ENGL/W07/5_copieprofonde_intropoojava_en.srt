1
00:00:04,284 --> 00:00:06,392
To conclude this case study
on watches,

2
00:00:06,392 --> 00:00:09,765
we will focus on a particular
problem, namely

3
00:00:09,765 --> 00:00:11,248
how to copy watches.

4
00:00:11,248 --> 00:00:14,131
We are not talking about counterfeiting,
but introducing

5
00:00:14,131 --> 00:00:16,545
a new theme, interesting in programming,

6
00:00:16,545 --> 00:00:17,766
which is "deep copying".

7
00:00:17,920 --> 00:00:19,894
Let's define the problem concretely.

8
00:00:19,894 --> 00:00:22,268
You have a watch, and your
friend wants the same one.

9
00:00:22,268 --> 00:00:25,248
We have learned all along this course
that assignment in Java

10
00:00:25,248 --> 00:00:28,070
does not actually make a copy as such.

11
00:00:28,308 --> 00:00:32,712
If I write "montreToto = maMontre"
(TN: could be translated: "totosWatch = myWatch")

12
00:00:34,213 --> 00:00:38,337
I am simply assigning the reference to
"maMontre"

13
00:00:38,773 --> 00:00:40,116
to the "montreToto" variable.

14
00:00:40,712 --> 00:00:42,036
So basically,

15
00:00:49,124 --> 00:00:53,719
"maMontre" and "montreToto"

16
00:00:55,502 --> 00:00:59,802
point to the same object in memory.

17
00:01:00,274 --> 00:01:03,238
This means that if a watch provides
a method

18
00:01:03,238 --> 00:01:05,175
for setting the time, for example,

19
00:01:05,175 --> 00:01:08,597
then whenever I set a time on my watch,
I will also modify Toto's time;

20
00:01:09,274 --> 00:01:11,088
a rather unexpected behavior, indeed!

21
00:01:11,700 --> 00:01:13,843
Therefore, we need a mechanism
that will allow us

22
00:01:13,843 --> 00:01:15,706
to truly copy a watch.

23
00:01:15,706 --> 00:01:18,320
Let's try to see how we can
implement this

24
00:01:18,320 --> 00:01:20,144
using a copy constructor.

25
00:01:20,728 --> 00:01:23,053
A watch is a relatively complex
object

26
00:01:23,053 --> 00:01:25,524
that includes a core attribute
of type Mecanisme

27
00:01:25,661 --> 00:01:27,557
and a list of accessories.

28
00:01:28,139 --> 00:01:32,008
So, when I declare an object
of type "Montre",

29
00:01:32,008 --> 00:01:35,566
initialize it and add, for example,
accessories like this,

30
00:01:35,566 --> 00:01:39,443
I end up with a memory situation
which looks like this,

31
00:01:39,652 --> 00:01:43,237
where my variable 'm', of type "Montre",
is a reference

32
00:01:43,384 --> 00:01:45,358
to an object of type "Montre",

33
00:01:45,358 --> 00:01:50,485
that has a "coeur" attribute (TN: means "core"),
which is a reference to an object,

34
00:01:50,666 --> 00:01:52,944
for example of type "MecanismeDouble",

35
00:01:53,333 --> 00:01:57,590
and whose second attribute is a
reference to a dynamic array

36
00:01:57,684 --> 00:02:01,872
containing references to accessories.

37
00:02:02,850 --> 00:02:06,738
When I build a watch by copying 'm',

38
00:02:06,900 --> 00:02:09,305
what situation do I want to
end up in?

39
00:02:09,782 --> 00:02:15,569
If I simply copy "m" into "m2"

40
00:02:17,060 --> 00:02:20,312
by copying the different attributes
one by one,

41
00:02:32,830 --> 00:02:37,169
then the "coeur" of "m2" will have the
same value as the "coeur" of "m",

42
00:02:37,307 --> 00:02:42,300
which means that it will point to the
same object in memory,

43
00:02:42,369 --> 00:02:46,157
and for the accessories of "m2",
I will have

44
00:02:46,374 --> 00:02:48,063
a reference to the same array

45
00:02:48,971 --> 00:02:51,863
Here, we end up with a problem similar

46
00:02:51,863 --> 00:02:53,548
to the previous one,

47
00:02:53,548 --> 00:02:58,379
since the "m" and "m2" objects share the
same array of accessories in memory:

48
00:02:58,822 --> 00:03:02,027
if we add an accessory to m's array,

49
00:03:02,387 --> 00:03:05,160
we will add it to m2's array as well.

50
00:03:05,994 --> 00:03:09,667
Similarly, setting the time on m's mechanism

51
00:03:09,667 --> 00:03:12,808
will set the time on m2's mechanism.

52
00:03:14,205 --> 00:03:17,512
To have two objects of type Montre that
have the same values

53
00:03:17,512 --> 00:03:19,894
but that are totally independant,

54
00:03:19,894 --> 00:03:23,045
we must implement what is called
a "deep copy".

55
00:03:23,045 --> 00:03:27,197
The situation in which we want to end up
is rather the following:

56
00:03:35,777 --> 00:03:37,923
we want m2 to have

57
00:03:39,233 --> 00:03:42,470
its own "coeur"

58
00:03:43,809 --> 00:03:45,177
which would be identical...

59
00:03:48,318 --> 00:03:50,181
to that of m,

60
00:03:50,181 --> 00:03:51,557
but in a separate memory area,

61
00:03:52,565 --> 00:03:55,223
and a set of accessories which would
also be its own

62
00:04:01,739 --> 00:04:06,148
and whose values would point
towards identical objects

63
00:04:06,645 --> 00:04:08,247
that are nonetheless in their own
memory area.

64
00:04:12,014 --> 00:04:15,569
This is what we call "deep copying".

65
00:04:15,569 --> 00:04:18,057
If we write a copy constructor
for Montre

66
00:04:18,057 --> 00:04:21,936
that would simply assign to the core
of the current instance

67
00:04:21,936 --> 00:04:23,649
the core of the copied object,

68
00:04:24,262 --> 00:04:26,826
and if we do the same thing for
the accessories,

69
00:04:26,826 --> 00:04:30,514
we do what is called a "shallow copy"

70
00:04:30,514 --> 00:04:32,013
which, as we learned earlier

71
00:04:32,013 --> 00:04:34,031
will, as opposed to deep copy,

72
00:04:34,031 --> 00:04:38,407
simply allow both watches to share
the same core

73
00:04:38,407 --> 00:04:40,975
and to share the same list of
accessories;

74
00:04:41,826 --> 00:04:45,222
this way of doing things is not satisfactory
[for our current situation].

75
00:04:47,303 --> 00:04:49,870
Here, we should really make
a deep copy

76
00:04:49,870 --> 00:04:52,802
of each of the entities we mentioned
earlier,

77
00:04:52,802 --> 00:04:56,203
meaning that we should assign to
the core of the current instance

78
00:04:56,625 --> 00:05:01,429
a new mechanism built based on
the copied core

79
00:05:01,458 --> 00:05:05,113
and we should build a new
list of accessories

80
00:05:05,397 --> 00:05:08,206
where each accessory, added to the list,

81
00:05:08,206 --> 00:05:12,126
would be a copy of the corresponding
accessory in the copied object.

82
00:05:13,575 --> 00:05:16,705
Here, we would iterate over the list of
accessories of the copied object

83
00:05:17,375 --> 00:05:21,009
and we would create a copy of each of
these accessories

84
00:05:21,009 --> 00:05:23,438
to be put into the new list.

85
00:05:24,101 --> 00:05:25,754
However, we have a problem here.

86
00:05:26,391 --> 00:05:29,973
Indeed, to get a copy of the core,

87
00:05:29,973 --> 00:05:33,118
since [the attribute] "coeur" is of type "Mecanisme",

88
00:05:33,201 --> 00:05:36,871
we used the copy constructor of the
"Mecanisme" class.

89
00:05:38,241 --> 00:05:40,679
Actually,  "autre.coeur"
(TN: means "other.core")

90
00:05:40,679 --> 00:05:44,919
might very well be
a "MecanismeDouble".

91
00:05:46,266 --> 00:05:48,505
In such a case, it's indeed
a "MecanismeDouble"

92
00:05:48,505 --> 00:05:50,315
that we want to obtain for "coeur".

93
00:05:51,535 --> 00:05:54,001
Can the copy constructor of "Mecanisme"

94
00:05:54,078 --> 00:05:56,365
produce a "MecanismeDouble"?

95
00:05:57,694 --> 00:05:59,397
The answer is no!

96
00:05:59,839 --> 00:06:01,476
Because, as we discussed
in the corresponding lectures,

97
00:06:01,476 --> 00:06:06,087
constructors are inherently
non-polymorphic.

98
00:06:12,691 --> 00:06:16,148
The copy constructor of the "Mecanisme"
class will thus not be able to adapt

99
00:06:16,148 --> 00:06:18,250
to the actual type of the instance

100
00:06:18,250 --> 00:06:19,460
that it is trying to copy

101
00:06:20,327 --> 00:06:23,394
Thus it will only see the object to copy
as a Mecanisme,

102
00:06:23,394 --> 00:06:25,998
and will only copy the part of it that
is a Mecanisme

103
00:06:25,998 --> 00:06:29,646
So anything that is specific to
MecanismeDouble will disappear.

104
00:06:31,411 --> 00:06:33,245
There will be no date and no alarm clock then.

105
00:06:34,001 --> 00:06:35,545
So, the question that arises is:

106
00:06:35,545 --> 00:06:36,934
how do we copy each element,

107
00:06:36,934 --> 00:06:38,890
be it an accessory or a mechanism,

108
00:06:38,890 --> 00:06:40,131
as such?

109
00:06:40,240 --> 00:06:42,350
Meaning that, if it is a
MecanismeDouble,

110
00:06:42,350 --> 00:06:44,048
it will be copied as a MecanismeDouble.

111
00:06:44,382 --> 00:06:46,715
If it is a "Bracelet" (TN: means "Watchstrap"),
it will be copied as a "Bracelet".

112
00:06:46,715 --> 00:06:49,882
So, how do we implement this
polymorphic copy?

113
00:06:51,240 --> 00:06:53,476
To carry out a polymorphic copy,

114
00:06:53,476 --> 00:06:55,873
we cannot resort to
copy constructors,

115
00:06:55,873 --> 00:06:57,218
as we have just seen,

116
00:06:57,218 --> 00:07:02,319
but we simply need to use a method that
can, itself, be polymorphic.

117
00:07:03,401 --> 00:07:05,002
The idea would thus be to define

118
00:07:05,002 --> 00:07:08,415
a polymorphic copy method that would
allow us to copy mechanisms

119
00:07:08,415 --> 00:07:11,240
and a polymorphic copy method

120
00:07:11,240 --> 00:07:13,496
allowing us to copy accessories.

121
00:07:14,501 --> 00:07:16,312
Let's see exactly how  we can write

122
00:07:16,312 --> 00:07:18,032
a polymorphic copy method,

123
00:07:18,032 --> 00:07:19,653
for accessories for example,

124
00:07:19,653 --> 00:07:22,187
and we will be able to apply the same
thing to mechanisms,

125
00:07:22,187 --> 00:07:24,801
and this procedure will allow
us to really implement

126
00:07:24,801 --> 00:07:26,738
deep copy,

127
00:07:26,738 --> 00:07:30,097
in a way that will allow us to obtain
a copy of the object to be copied

128
00:07:30,097 --> 00:07:32,088
that is completely independant
from this object.

129
00:07:33,246 --> 00:07:36,694
Finally, an aspect that I did not mention
up til now but that is important

130
00:07:36,694 --> 00:07:38,765
is that when we write a copy constructor,

131
00:07:38,765 --> 00:07:41,804
it is crucial not to forget to call

132
00:07:41,804 --> 00:07:43,880
the copy constructor of the superclass

133
00:07:44,663 --> 00:07:47,573
Otherwise, if we forget this call,
what will happen?

134
00:07:47,573 --> 00:07:52,810
Then, the default constructor for
Montre's superclass,

135
00:07:52,810 --> 00:07:54,194
that is, for the "Produit" class,

136
00:07:54,194 --> 00:07:55,363
will be invoked

137
00:07:55,363 --> 00:07:59,676
This constructor will initialize the
base value of the object to 0;

138
00:07:59,676 --> 00:08:02,395
which means that any watch that is
made with a copy

139
00:08:02,395 --> 00:08:04,638
would have a base value of zero,

140
00:08:04,638 --> 00:08:06,053
which is not necessarily what we want.

141
00:08:07,031 --> 00:08:08,871
Now, let's see how we can code

142
00:08:08,871 --> 00:08:11,284
a polymorphic copy method
for accessories

143
00:08:12,807 --> 00:08:15,741
An accessory as such is
an abstract entity,

144
00:08:15,741 --> 00:08:19,513
we will not define a copy for
accessories themselves,

145
00:08:19,513 --> 00:08:22,790
so we will simply define the
copy method

146
00:08:22,790 --> 00:08:25,710
as an abstract method in the
"Accessoire" class.

147
00:08:25,710 --> 00:08:28,946
In each concrete subclass of
"Accessoire",

148
00:08:28,946 --> 00:08:32,808
we will have to define
the copy concretely

149
00:08:33,358 --> 00:08:35,097
and the trick here

150
00:08:35,097 --> 00:08:39,130
is that the polymorphic copy method,
in the subclass, can use

151
00:08:39,130 --> 00:08:43,392
the subclass's copy constructor to carry
out the copy

152
00:08:43,962 --> 00:08:46,179
Suppose, here, that an object of
type "Accessoire"

153
00:08:46,200 --> 00:08:48,896
is copied using the copy method,

154
00:08:49,616 --> 00:08:53,675
and that it happens that in reality,
this object corresponds to a "Bracelet".

155
00:08:54,843 --> 00:08:57,088
The memory situation would
be as follows:

156
00:08:57,088 --> 00:09:00,672
we have the object that we
want to copy,

157
00:09:01,904 --> 00:09:05,523
which is a reference to an object
of type "Bracelet"...

158
00:09:11,231 --> 00:09:13,279
which would have, for example,
a base value,

159
00:09:14,642 --> 00:09:16,115
as well as a name...

160
00:09:25,715 --> 00:09:28,218
so when we call the copy method

161
00:09:28,218 --> 00:09:30,183
the current object is this object;

162
00:09:30,564 --> 00:09:32,581
since it is an object of type "Bracelet",

163
00:09:32,591 --> 00:09:35,794
we will look for the copy method in the
"Bracelet" class,

164
00:09:36,504 --> 00:09:40,791
which will invoke the copy constructor
of the "Bracelet" class.

165
00:09:41,099 --> 00:09:44,167
Here we copy a "Bracelet", so there
is no problem

166
00:09:44,435 --> 00:09:47,043
in using the copy constructor to
copy a "Bracelet".

167
00:09:47,726 --> 00:09:52,380
And this constructor will simply call
the superclasses' constructors

168
00:09:53,367 --> 00:09:56,980
to initialize the name inherited
from "Accessoire"

169
00:09:57,649 --> 00:09:59,956
and to initialize the value inherited
from "Produit".

170
00:10:01,425 --> 00:10:05,087
This supposes that there is
a copy constructor

171
00:10:05,268 --> 00:10:07,520
in the "Accessoire" class,

172
00:10:07,617 --> 00:10:09,730
which could be written like this
for example:

173
00:10:13,074 --> 00:10:15,822
the copy constructor for the
"Accessoire" class

174
00:10:15,822 --> 00:10:17,978
would take as argument...

175
00:10:20,873 --> 00:10:22,185
another accessory, of course!

176
00:10:24,338 --> 00:10:27,988
It would call the copy constructor
of the superclass,

177
00:10:28,092 --> 00:10:30,951
which would be the copy constructor
for the "Produit" class

178
00:10:31,479 --> 00:10:36,362
and it would copy the values
that are specific to it...

179
00:10:42,285 --> 00:10:45,727
given that an accessory has an
attribute that is the name.

180
00:10:46,450 --> 00:10:50,467
This supposes that in the superclass
of "Accessoire",

181
00:10:50,546 --> 00:10:51,898
that is, in the "Produit" class,

182
00:10:51,898 --> 00:10:54,678
there is also a copy constructor.

183
00:10:55,000 --> 00:10:59,097
This one will simply copy
the base value

184
00:10:59,992 --> 00:11:01,854
We would proceed in a similar fashion

185
00:11:01,854 --> 00:11:04,847
to define the polymorphic copy
of "Mecanisme".

186
00:11:05,814 --> 00:11:08,383
Finally, a point that might have
caught your attention

187
00:11:08,383 --> 00:11:13,114
is that if we examine the header of the
copy method in the "Bracelet" subclass

188
00:11:14,045 --> 00:11:16,797
and its header in the "Accessoire"
superclass,

189
00:11:17,148 --> 00:11:20,630
we realize that the return types are
not exactly the same.

190
00:11:21,251 --> 00:11:22,558
That said, this is still

191
00:11:22,558 --> 00:11:25,644
an override of the copy method inherited
from the superclass

192
00:11:25,644 --> 00:11:26,301
Why?

193
00:11:26,301 --> 00:11:28,720
Because the return types are
compatible;

194
00:11:28,872 --> 00:11:31,011
"Bracelet" is a subclass of "Accessoire".

195
00:11:31,428 --> 00:11:33,195
Technically, this is known as a

196
00:11:33,195 --> 00:11:35,127
"covariant return type".

197
00:11:36,114 --> 00:11:38,011
To finish with this part on copying,

198
00:11:38,011 --> 00:11:40,841
let's go back to the constructor
of the "Montre" class.

199
00:11:41,211 --> 00:11:44,482
We had originally programmed it to

200
00:11:46,436 --> 00:11:48,821
take a "Mecanisme" as a parameter

201
00:11:48,821 --> 00:11:50,923
and to assign this "Mecanisme"

202
00:11:52,050 --> 00:11:55,565
directly to the "coeur" of the "Montre".

203
00:11:56,398 --> 00:11:58,541
If the "Mecanisme" object can
be modified,

204
00:11:58,541 --> 00:12:01,499
this can cause what is called
an "encapsulation leakage".

205
00:12:02,259 --> 00:12:05,778
Imagine for example that we have
an object of type "Mecanisme"

206
00:12:11,054 --> 00:12:12,514
that is properly initialized

207
00:12:14,556 --> 00:12:15,995
such as this for example.

208
00:12:20,999 --> 00:12:25,264
If we use this "Mecanisme"
to create a "Montre"

209
00:12:34,671 --> 00:12:35,622
like so,

210
00:12:36,122 --> 00:12:40,892
then the "meca" variable
and the "coeur" of the "Montre"

211
00:12:41,714 --> 00:12:44,010
reference the same object in memory.

212
00:12:44,456 --> 00:12:46,302
If the "meca" object can be modified,

213
00:12:46,302 --> 00:12:48,406
meaning that if there is a method

214
00:12:48,406 --> 00:12:50,984
that we can call on this object to
modify it,

215
00:12:50,984 --> 00:12:53,208
imagine for example we have 
a method

216
00:12:53,208 --> 00:12:55,349
for setting the mechanism's time,

217
00:12:55,573 --> 00:12:59,141
then when I set the mechanism's
time, I will also set

218
00:12:59,671 --> 00:13:02,483
the time for the core of the watch.

219
00:13:02,708 --> 00:13:03,985
Indeed,

220
00:13:07,403 --> 00:13:12,001
the "meca" variable has a reference
to an object in memory

221
00:13:13,887 --> 00:13:15,851
that would be a "MecanismeDouble".

222
00:13:21,237 --> 00:13:25,273
'm', which is a watch,

223
00:13:26,380 --> 00:13:28,652
which is a reference to an object
of type "Montre",

224
00:13:30,835 --> 00:13:34,449
and whose core would be the reference
to the same object

225
00:13:34,478 --> 00:13:36,275
as the one pointed to by "meca".

226
00:13:36,396 --> 00:13:39,575
Suppose that at the moment the "Montre"
object was created,

227
00:13:41,207 --> 00:13:44,510
the "meca" object had a time which
was the following,

228
00:13:45,458 --> 00:13:48,947
and suppose that "Mecanisme" provide
a setting method,

229
00:13:49,119 --> 00:13:51,135
meaning that it would be possible
for example

230
00:13:52,931 --> 00:13:55,748
to set the time of the mechanism
by using

231
00:13:58,178 --> 00:14:00,270
this sort of syntax, for example.

232
00:14:01,244 --> 00:14:04,029
Then this would mean that the
time of the mechanism is modified,

233
00:14:08,551 --> 00:14:13,188
and this would mean that the
watch's time would also be modified.

234
00:14:14,747 --> 00:14:17,052
It is important to always be
mindful of this aspect

235
00:14:17,052 --> 00:14:20,024
when writing constructors that
take objects as parameters,

236
00:14:20,024 --> 00:14:23,859
if these objects can be modified, unless
we really want to share them,

237
00:14:23,859 --> 00:14:26,729
meaning that the sharing behavior
is actually intended.

238
00:14:26,729 --> 00:14:32,237
We must think of assigning a copy
of the object passed as a parameter

239
00:14:32,237 --> 00:14:34,741
to avoid undesirable side effects

240
00:14:35,089 --> 00:14:38,692
such as the fact that we can set the
watch's time

241
00:14:38,692 --> 00:14:40,655
through an outside object here,

242
00:14:40,655 --> 00:14:43,320
which is indeed an encapsulation leakage.

243
00:14:44,996 --> 00:14:46,877
So here, typically, we would

244
00:14:46,877 --> 00:14:49,003
use the polymorphic copy of "Mecanisme"

245
00:14:49,003 --> 00:14:52,446
to get a "coeur" that is independent
from the initial mechanism

246
00:14:52,446 --> 00:14:54,126
and to avoid this sort of side effect.

247
00:14:55,114 --> 00:14:58,748
Note that a similar problem arises with
the "ajouter()" method

248
00:14:58,748 --> 00:15:00,985
which provides a way to add
accessories to a watch.

249
00:15:01,870 --> 00:15:04,846
Indeed, if the "ajouter()" method receives

250
00:15:04,846 --> 00:15:07,255
a reference to an accessory
as a parameter,

251
00:15:07,255 --> 00:15:09,209
here, accessories can be modified,

252
00:15:09,209 --> 00:15:12,557
for example, there would be a method
for repairing accessories

253
00:15:12,557 --> 00:15:14,872
that would allow us to modify some
of their values,

254
00:15:14,872 --> 00:15:18,094
then in this case, the same problem
would arise

255
00:15:18,094 --> 00:15:21,950
and we would want to add to our
set of accessories...

256
00:15:27,841 --> 00:15:31,870
a copy of the accessory that
was passed as a parameter

257
00:15:32,155 --> 00:15:35,009
to make sure that our watch's
accessories

258
00:15:35,009 --> 00:15:38,957
do not depend on an accessory provided 
from the outside and that can be modified.

259
00:15:39,381 --> 00:15:41,422
Finally, and you might have been
wondering about that for a while,

260
00:15:41,422 --> 00:15:44,223
what about the "clone()" method
inherited from the "Object" class

261
00:15:44,223 --> 00:15:46,041
that is supposed to copy objects?

262
00:15:46,423 --> 00:15:49,700
Actually, we could have called our
polymorphic copy method

263
00:15:49,700 --> 00:15:51,881
"clone" instead of "copie".

264
00:15:52,099 --> 00:15:54,064
If we had called it "clone",

265
00:15:54,064 --> 00:15:57,346
we simply would have had to follow
a few conventions

266
00:15:57,732 --> 00:15:59,890
such as the fact that classes

267
00:15:59,890 --> 00:16:02,633
that define or override the 
"clone()" method

268
00:16:02,633 --> 00:16:06,986
should implement a specific interface
which is the "Cloneable" interface.

269
00:16:07,793 --> 00:16:09,913
There are a number of other
technical details

270
00:16:09,913 --> 00:16:13,846
associated to the use of "clones"
according to Java conventions.

271
00:16:14,308 --> 00:16:16,909
We deliberately ignored these aspects

272
00:16:17,044 --> 00:16:21,085
partly because "clone" is far from being
widely-accepted among developers,

273
00:16:21,085 --> 00:16:22,830
-- it is a controversial subject --

274
00:16:23,141 --> 00:16:25,741
but mostly because we want to
focus the discussion

275
00:16:25,741 --> 00:16:28,471
on the theme of deep copy itself,

276
00:16:28,471 --> 00:16:30,190
as you might see it

277
00:16:30,190 --> 00:16:31,884
in other programming languages.

278
00:16:32,158 --> 00:16:35,425
This concludes this case study,
and thus this course.
