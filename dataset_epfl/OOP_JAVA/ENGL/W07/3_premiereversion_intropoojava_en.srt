1
00:00:03,715 --> 00:00:05,237
In the previous episodes,

2
00:00:05,237 --> 00:00:08,072
the general case study problem
we are interested in



3
00:00:08,072 --> 00:00:11,193
has been presented. It's about
modeling watches

4
00:00:11,193 --> 00:00:13,657
with different mechanisms,
different accesssories.

5
00:00:13,657 --> 00:00:15,913
Then we covered the more
specific problem

6
00:00:15,913 --> 00:00:17,826
of polymorphic display.

7
00:00:17,826 --> 00:00:20,274
We also completed the Produit class
(TN : means "Product").

8
00:00:20,274 --> 00:00:22,382
In this episode, we will build

9
00:00:22,382 --> 00:00:24,912
a first operational version
of our code,

10
00:00:24,912 --> 00:00:26,918
by adding accessories to watches

11
00:00:26,918 --> 00:00:30,013
and defining several of these
accessories.

12
00:00:30,013 --> 00:00:32,636
Let's start with adding accessories

13
00:00:32,636 --> 00:00:34,884
to the Montre class (TN: means "Watch" class)
which, remember,

14
00:00:34,884 --> 00:00:39,155
inherits from Produit and
has a "MÃ©canisme" (= "Mechanism")

15
00:00:39,155 --> 00:00:41,371
and especially, something that is
of interest to us now,

16
00:00:41,371 --> 00:00:45,766
a dynamic array of accessories which
we called "Accessoire" (TN : means "Accessory")

17
00:00:45,766 --> 00:00:47,847
The idea is that we want to be able to

18
00:00:47,847 --> 00:00:51,124
add elements to this
dynamic array

19
00:00:51,124 --> 00:00:54,796
by calling for example, on a watch,
instance of the Montre class,

20
00:00:54,796 --> 00:00:58,231
Montre.ajouter, for example, a "new Bracelet"
(TN: "ajouter" means "add" and "Bracelet", "WatchStrap")

21
00:00:58,231 --> 00:01:02,422
where, remember, "Bracelet" is
a subclass of Accessoire

22
00:01:02,422 --> 00:01:05,912
And we want this to add a new
watchstrap

23
00:01:05,912 --> 00:01:08,086
to the collection of accessories;

24
00:01:08,086 --> 00:01:10,803
a "Bracelet" being an "Accessoire",

25
00:01:10,803 --> 00:01:13,980
it can be added to a collection
of accessories.

26
00:01:13,980 --> 00:01:17,479
Now, let's see how this "ajouter"
method can be defined.

27
00:01:17,479 --> 00:01:20,036
Here, we will implement a
very very simple solution

28
00:01:20,036 --> 00:01:22,060
which we will revise later on,

29
00:01:22,060 --> 00:01:25,650
in the last episode in this series,

30
00:01:25,650 --> 00:01:28,521
covering the concept of deep copies.

31
00:01:28,521 --> 00:01:30,356
But for now, we simply make

32
00:01:30,356 --> 00:01:32,191
a shallow copy here

33
00:01:32,191 --> 00:01:35,764
by just adding a reference
to an accessory

34
00:01:35,764 --> 00:01:39,417
that we received, to the dynamic
array of accessories

35
00:01:39,417 --> 00:01:41,906
which is called "accessoires".

36
00:01:42,506 --> 00:01:44,215
Now, let's try to make

37
00:01:44,215 --> 00:01:46,676
a first operational version of the program.

38
00:01:46,676 --> 00:01:49,589
So let's try to finalize what we
have written up until now.

39
00:01:49,589 --> 00:01:52,502
And for now, let's not add
any mechanism

40
00:01:52,502 --> 00:01:56,024
nor copy any watch; we will leave
these two points

41
00:01:56,024 --> 00:01:59,151
for the next two episodes.

42
00:01:59,151 --> 00:02:02,536
So, to be able to finalize the program
that we have written until now,

43
00:02:02,536 --> 00:02:05,207
we will need a few more concrete
accessories.

44
00:02:05,207 --> 00:02:07,243
We will have to finish the Montre class

45
00:02:07,243 --> 00:02:09,765
which is not quite operational yet

46
00:02:09,765 --> 00:02:13,683
and, of course, use all of this in
a typical "main" method.

47
00:02:13,683 --> 00:02:16,187
We will take each of these points
one after the other

48
00:02:16,187 --> 00:02:18,822
starting with a few accessories.

49
00:02:18,822 --> 00:02:23,702
Remember that we have an "Accessoire"
class which is a "Produit"

50
00:02:23,702 --> 00:02:25,636
And let's decide, say,

51
00:02:25,636 --> 00:02:28,638
that at the accessory level,

52
00:02:28,638 --> 00:02:31,241
we have a name to refer to them.

53
00:02:31,241 --> 00:02:34,316
For this, we will say that
we have a name

54
00:02:34,316 --> 00:02:36,630
which will not change once
it has been fixed

55
00:02:36,630 --> 00:02:38,919
by the constructor.

56
00:02:38,919 --> 00:02:42,477
And so we will add a constructor
to the Accessoire class

57
00:02:42,477 --> 00:02:47,174
that will take a name, to name
this accessory.

58
00:02:47,174 --> 00:02:50,224
Then, we mustn't forget that
any product can be sold

59
00:02:50,224 --> 00:02:53,550
and will thus have a price. So
it will take a second parameter here

60
00:02:53,550 --> 00:02:58,579
to initialize the base value for the
price of the product.

61
00:02:58,579 --> 00:03:02,073
Accessoire's constructor will
start by calling

62
00:03:02,073 --> 00:03:06,117
the constructor of the superclass, Produit,
passing it

63
00:03:06,117 --> 00:03:09,335
the parameter valeurDeBase which we received.
(TN: "valeurDeBase" means "basisValue")

64
00:03:09,335 --> 00:03:11,472
Then, we will initialize

65
00:03:11,472 --> 00:03:15,065
the "nom" attribute with the name received.
(TN: "nom" means "name")

66
00:03:15,065 --> 00:03:16,858
So, that's it for the constructor

67
00:03:16,858 --> 00:03:19,264
that we decided to give to
all the accessories.

68
00:03:19,264 --> 00:03:21,369
Now, let's decide on a way to display

69
00:03:21,369 --> 00:03:23,679
the accessories because,
as we have seen

70
00:03:23,679 --> 00:03:25,546
all products can be

71
00:03:25,546 --> 00:03:27,848
displayed in a polymorphic way.

72
00:03:27,848 --> 00:03:31,395
So we will override the
toString method here,

73
00:03:31,395 --> 00:03:33,682
inherited from Produit.

74
00:03:33,682 --> 00:03:35,884
As we have seen, we override it by adding

75
00:03:35,884 --> 00:03:39,082
the "override" annotation here.

76
00:03:39,082 --> 00:03:40,817
Let's say that, for example, it is
displayed with an indication

77
00:03:40,817 --> 00:03:42,704
of its name and cost.

78
00:03:42,704 --> 00:03:44,699
So we will simply display
the name

79
00:03:44,699 --> 00:03:46,593
then indicate what it costs

80
00:03:46,593 --> 00:03:49,266
-- and we already know how to
display the price --

81
00:03:49,266 --> 00:03:53,481
by simply calling the method from
the Produit superclass.

82
00:03:53,481 --> 00:03:55,974
So here, we use the "super" keyword

83
00:03:55,974 --> 00:03:58,994
to call the method inherited
from the Produit superclass.

84
00:03:58,994 --> 00:04:01,641
Because, of course, if we
only write toString

85
00:04:01,641 --> 00:04:04,974
with no unmasking here,
it is the toString method

86
00:04:04,974 --> 00:04:08,207
from the current class, and
we would have infinite recursion:

87
00:04:08,207 --> 00:04:10,222
toString would call itself

88
00:04:10,222 --> 00:04:12,378
and so, to call, within the toString

89
00:04:12,378 --> 00:04:15,137
method of the Accessoire class,
the toString method

90
00:04:15,137 --> 00:04:16,947
inherited from the Produit superclass,

91
00:04:16,947 --> 00:04:21,094
we need to unmask this
toString method.

92
00:04:21,094 --> 00:04:24,280
Finally, let's say that the
price of accessories

93
00:04:24,280 --> 00:04:27,757
is the same as the price
of a normal product,

94
00:04:27,757 --> 00:04:29,277
that is, a product

95
00:04:29,277 --> 00:04:31,547
as we designed right at the
top of the hierarchy

96
00:04:31,547 --> 00:04:32,971
and so now,

97
00:04:32,971 --> 00:04:35,157
we don't have to do anything

98
00:04:35,157 --> 00:04:37,040
since the prix method

99
00:04:37,040 --> 00:04:39,540
that we inherited from
the Produit class

100
00:04:39,540 --> 00:04:42,981
is enough here, and we don't
need to override

101
00:04:42,981 --> 00:04:44,959
it in the Accessoire class.

102
00:04:44,959 --> 00:04:48,851
So now, we have a completely
functional Accessoire class

103
00:04:48,851 --> 00:04:51,198
that corresponds to what
we wanted.

104
00:04:51,198 --> 00:04:53,369
So let's now define a few accessories

105
00:04:53,369 --> 00:04:54,934
for example, a Bracelet (= "watchstrap")

106
00:04:54,934 --> 00:04:57,285
A "Bracelet" is an "Accessoire"

107
00:04:57,285 --> 00:05:00,507
so we have an inheritance relation here.

108
00:05:00,507 --> 00:05:03,451
Regarding accessories,
let's say that we want

109
00:05:03,451 --> 00:05:07,040
their name -- remember that
accessories have a name,

110
00:05:07,040 --> 00:05:09,363
so every accessory will
inherit this name --

111
00:05:09,363 --> 00:05:11,017
let's say that we want

112
00:05:11,017 --> 00:05:13,179
each of the accessories to
have a name

113
00:05:13,179 --> 00:05:16,058
that marks what it is, for example,

114
00:05:16,058 --> 00:05:18,703
the name of a watchstrap will
start with "bracelet",

115
00:05:18,703 --> 00:05:21,363
the name of a "Fermoir" will, for example,
start with "fermoir" (TN: means "clasp").

116
00:05:21,363 --> 00:05:24,035
And so we will force this at 
the constructor level

117
00:05:24,035 --> 00:05:26,177
so for example, for the Bracelet
subclass

118
00:05:26,177 --> 00:05:28,647
of the Accessory class, we will
receive the name

119
00:05:28,647 --> 00:05:31,531
which will be a complement that
we will add here,

120
00:05:31,531 --> 00:05:33,103
behind the word "bracelet".

121
00:05:33,103 --> 00:05:36,985
So for example, "en cuir"
(TN: means "of leather")

122
00:05:36,985 --> 00:05:40,749
for the complete name to be "bracelet en cuir"
(TN: means "leather watchstrap")

123
00:05:40,749 --> 00:05:43,777
and as a second parameter the price,

124
00:05:43,777 --> 00:05:47,699
which we also pass to the constructor
of the superclass.

125
00:05:47,699 --> 00:05:51,840
So, in the same way, we could define
a Fermoir inheriting from Accessory

126
00:05:51,840 --> 00:05:55,372
in which we would define a constructor
taking a complement to the Fermoir name

127
00:05:55,372 --> 00:05:57,878
and a price to be able to call
the constructor

128
00:05:57,878 --> 00:05:59,469
of the Accessoire superclass

129
00:05:59,469 --> 00:06:00,976
where the full name will thus be

130
00:06:00,976 --> 00:06:03,701
"fermoir" with this complement we
received as the first parameter

131
00:06:03,701 --> 00:06:07,332
and as second parameter, the
price that we received,

132
00:06:07,332 --> 00:06:09,474
and as always, the virtual destructor.

133
00:06:10,044 --> 00:06:13,045
There, we have now finished
with accessories

134
00:06:13,045 --> 00:06:16,028
Let's try to make the Montre
class usable,

135
00:06:16,028 --> 00:06:18,584
without mechanisms and without
copy, still,

136
00:06:18,584 --> 00:06:20,564
as we will treat those later.

137
00:06:20,564 --> 00:06:24,505
At this stage, we have simply defined
the contents of the Montre class

138
00:06:24,505 --> 00:06:27,772
in which we thus have this "ajouter" method,

139
00:06:27,772 --> 00:06:31,787
which allows us to add accessories
to our watches.

140
00:06:31,787 --> 00:06:35,932
Let's start by giving our Montre
class a constructor.

141
00:06:35,932 --> 00:06:38,782
For now, let's settle for a
default constructor

142
00:06:38,782 --> 00:06:40,335
that we will still override

143
00:06:40,335 --> 00:06:42,518
since the "default default constructor"

144
00:06:42,518 --> 00:06:44,583
would make this reference null,

145
00:06:44,583 --> 00:06:48,824
where we would rather have an
empty dynamic array, here,

146
00:06:48,824 --> 00:06:53,357
that we could then fill up with
our ajouter method

147
00:06:53,357 --> 00:06:55,301
This is how Montre objects are constructed.

148
00:06:55,301 --> 00:06:58,036
Now, let's decide how we want
to compute the price of watches

149
00:06:58,036 --> 00:07:02,270
and let's say that it is the sum of the
prices of its accessories.

150
00:07:02,270 --> 00:07:05,292
For this, we will override the
"prix" method:

151
00:07:05,292 --> 00:07:10,219
We override this "prix" method inherited
from the Produit superclass.

152
00:07:10,219 --> 00:07:16,509
So we will decide that, at first,
the price of a watch is the base price

153
00:07:16,509 --> 00:07:20,794
that we get through the original
"prix" method

154
00:07:20,794 --> 00:07:23,452
inherited from the Produit superclass.

155
00:07:23,452 --> 00:07:27,492
Then, from this base price,
we will add

156
00:07:27,492 --> 00:07:30,642
the sum of prices of the various
accessories.

157
00:07:30,642 --> 00:07:33,779
For this, we go through the list
of accessories

158
00:07:33,779 --> 00:07:39,339
and add their price to the
price that we had initialized,

159
00:07:39,339 --> 00:07:42,918
by calling the "prix" method each time.

160
00:07:42,918 --> 00:07:47,298
Finally, we return the price that
we have just computed.

161
00:07:47,298 --> 00:07:50,877
Now, let's define how to
display watches.

162
00:07:50,877 --> 00:07:53,317
For example, let's say that we
want a message

163
00:07:53,317 --> 00:07:55,074
to say that a watch is composed of,

164
00:07:55,074 --> 00:07:59,009
followed by a list of its various
accessories, etc.

165
00:07:59,009 --> 00:08:03,070
Then, at the end, we display
the total price of the watch.

166
00:08:03,070 --> 00:08:06,994
To do so, we will for example add an 
"afficher" method (TN: "afficher" means "display")

167
00:08:06,994 --> 00:08:10,774
in which we will start by displaying

168
00:08:10,774 --> 00:08:12,708
"une montre composÃ©e de"
(TN: means "a watch composed of").

169
00:08:12,708 --> 00:08:18,021
Then, we go through all of the
accessories of the watch.

170
00:08:18,021 --> 00:08:20,743
For each of these accessories,
we display an asterisk

171
00:08:20,743 --> 00:08:25,621
and then we display the
current accessory.

172
00:08:25,621 --> 00:08:28,612
Finally, we end the display with the message
"prix total" (means "total price")

173
00:08:28,612 --> 00:08:32,498
and a call to the "prix" method of the watch

174
00:08:32,498 --> 00:08:36,856
to compute its total cost, as we
have just seen.

175
00:08:37,166 --> 00:08:39,354
Next, to have an executable program,

176
00:08:39,354 --> 00:08:42,407
we need a "main" function that we will
use here

177
00:08:42,407 --> 00:08:45,770
to test the implementations of the
objects we have created.

178
00:08:45,770 --> 00:08:49,137
And to do so, we will declare a watch
like this, in the main.

179
00:08:49,137 --> 00:08:51,035
We can do this

180
00:08:51,035 --> 00:08:54,754
because now, we have a default constructor.

181
00:08:54,754 --> 00:09:00,217
Then, in the watch, we add different
accessories, like so.

182
00:09:00,217 --> 00:09:02,781
Each of the accessories has
its own constructor,

183
00:09:02,781 --> 00:09:07,165
with the name or the complement to the
name, then its price

184
00:09:07,165 --> 00:09:09,746
This way, we add four accessories
for example

185
00:09:09,746 --> 00:09:14,264
and finally, we display a message
to display the watch here.

186
00:09:14,264 --> 00:09:17,799
And so executing this program will
yield the following result:

187
00:09:17,799 --> 00:09:20,024
we will first display the message
"Montre m"

188
00:09:20,024 --> 00:09:23,031
then, we will enter the afficher
method of Montre

189
00:09:23,031 --> 00:09:26,360
which will display
"Une montre composÃ©e de: "

190
00:09:26,360 --> 00:09:29,500
and then a loop over its
different accessories,

191
00:09:29,500 --> 00:09:32,796
and then the display of its
total price,

192
00:09:32,796 --> 00:09:35,515
which is the sum of prices of
its accessories.

193
00:09:35,515 --> 00:09:38,318
For those who would like it,
the entire code is available

194
00:09:38,318 --> 00:09:39,854
on the course's website

195
00:09:39,854 --> 00:09:42,178
There, this ends the presentation

196
00:09:42,178 --> 00:09:44,594
of this first operational
version of our code.

197
00:09:44,594 --> 00:09:46,497
There are still two chapters to cover

198
00:09:46,497 --> 00:09:48,338
in the next two episodes.

199
00:09:48,338 --> 00:09:50,592
First, all of these mechanisms and their

200
00:09:50,592 --> 00:09:53,303
dependencies, and the concept
of interfaces,

201
00:09:53,303 --> 00:09:55,979
and finally the concept of
copying a watch,

202
00:09:55,979 --> 00:09:59,993
how to make a deep copy of all the
different accessories of a watch.
