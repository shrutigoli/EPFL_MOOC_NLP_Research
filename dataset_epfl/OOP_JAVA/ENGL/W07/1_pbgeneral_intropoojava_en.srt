1
00:00:04,248 --> 00:00:06,674
This is the last series of episodes

2
00:00:06,674 --> 00:00:09,901
of this MOOC, introducing
object-oriented programming (OOP)

3
00:00:09,901 --> 00:00:11,249
in Java.

4
00:00:11,446 --> 00:00:13,352
In this last series of episodes,

5
00:00:13,352 --> 00:00:16,243
we wanted to present to you
an entire problem,

6
00:00:16,243 --> 00:00:19,194
a very general problem,
a case study

7
00:00:19,194 --> 00:00:22,462
which will consist in representing
different watches.

8
00:00:22,462 --> 00:00:24,536
There will be analog watches,

9
00:00:24,536 --> 00:00:27,282
digital watches,
watches that will be both;

10
00:00:27,282 --> 00:00:31,230
watches will have accessories such
as bracelets, bodies,...

11
00:00:31,578 --> 00:00:34,277
So a rather general frame
which could serve for example

12
00:00:34,277 --> 00:00:37,170
as management software for a jeweler's 
or as sales software

13
00:00:37,170 --> 00:00:39,009
or even for printing catalogs. 

14
00:00:39,009 --> 00:00:42,702
Through this, we will illustrate
different concepts

15
00:00:42,702 --> 00:00:44,956
that were presented all along
this course.

16
00:00:45,447 --> 00:00:47,885
The themes we have chosen to
present to you

17
00:00:47,885 --> 00:00:50,979
in these summary episodes
include first of all

18
00:00:50,979 --> 00:00:54,240
the notion of conception, the
modelling of a problem

19
00:00:54,240 --> 00:00:56,710
from an OOP point of view :

20
00:00:56,710 --> 00:00:58,572
which classes have to
inherit from which other ones,

21
00:00:58,572 --> 00:01:01,217
whether abstract classes are
needed,

22
00:01:01,217 --> 00:01:05,718
how to make the calculation of watches'
prices polymorphic,

23
00:01:05,718 --> 00:01:07,386
or how to make the output polymorphic.

24
00:01:07,386 --> 00:01:10,619
Output will be treated in a
very specific way,

25
00:01:10,619 --> 00:01:13,795
with an override of the toString method
inherited from Object,

26
00:01:13,795 --> 00:01:16,880
and an adaptation of the output

27
00:01:16,880 --> 00:01:20,676
for each class, to have a polymorphic
output.

28
00:01:20,957 --> 00:01:22,978
We will also go over interfaces,

29
00:01:22,978 --> 00:01:24,607
with the different mechanisms,

30
00:01:24,607 --> 00:01:28,144
digital or analog watch mechanisms,

31
00:01:28,144 --> 00:01:32,521
and even double mechanisms, which
will be both analog and digital,

32
00:01:32,521 --> 00:01:35,287
then we will end with a last
episode

33
00:01:35,287 --> 00:01:38,642
presenting a problem
we have not yet seen

34
00:01:38,642 --> 00:01:41,855
in this course, which is the notion
of polymorphic copy,

35
00:01:41,855 --> 00:01:44,883
how to copy heterogeneous
collections; 

36
00:01:44,883 --> 00:01:48,900
how to copy watches which can
contain different components,

37
00:01:48,900 --> 00:01:51,215
each behaving in different ways,

38
00:01:51,215 --> 00:01:53,395
on the point of view of either
price or display.

39
00:01:54,174 --> 00:01:56,904
This is the menu for this final week.

40
00:01:57,100 --> 00:02:00,762
But let's start by presenting
the problem in more detail.

41
00:02:00,762 --> 00:02:03,478
We want to model watches,

42
00:02:03,478 --> 00:02:05,733
let's say that watches are products,

43
00:02:05,733 --> 00:02:09,765
in the sense that a product is something
that we can sell, that has a price.

44
00:02:09,765 --> 00:02:13,530
Watches will have basic mechanisms,

45
00:02:13,530 --> 00:02:16,593
typically hands, to display the time,

46
00:02:16,593 --> 00:02:19,420
and will be made of different
accessories

47
00:02:19,420 --> 00:02:23,974
such as a body, a bracelet,
the glass, the clasp.

48
00:02:24,325 --> 00:02:27,058
The products we will discuss later
on will have a price,

49
00:02:27,058 --> 00:02:29,874
and the calculation of this
price can vary.

50
00:02:29,874 --> 00:02:33,307
So this aspect is interesting for
conception,

51
00:02:33,307 --> 00:02:37,903
as it varies depending on a base
price that is fixed at the level of the product.

52
00:02:38,488 --> 00:02:44,485
All products can be displayed,
and the output can vary,

53
00:02:44,485 --> 00:02:47,541
as each product must be
displayed in its own way.

54
00:02:47,541 --> 00:02:49,346
Of course, what is behind these notions

55
00:02:49,346 --> 00:02:52,137
of "can vary" and "displayed in
its own way",

56
00:02:52,137 --> 00:02:54,574
is the concept of polymorphism.

57
00:02:54,896 --> 00:02:58,533
Then, the mechanisms we have
discussed just above,

58
00:02:58,533 --> 00:03:02,408
and the accessories that
make up the watches,

59
00:03:02,408 --> 00:03:06,629
these mechanisms and accessories
are also products.

60
00:03:06,629 --> 00:03:10,570
We have used the
verb "to be" several times,

61
00:03:10,570 --> 00:03:14,219
which refers to inheritance
relationships.

62
00:03:14,586 --> 00:03:18,739
We could for example buy accessories
or mechanisms separately,

63
00:03:18,739 --> 00:03:21,303
so each of these could behave
like a product,

64
00:03:21,303 --> 00:03:24,097
and have its own price,

65
00:03:24,097 --> 00:03:27,108
and its own way of calculating its price.

66
00:03:27,663 --> 00:03:30,353
Fundamentally, there are
three sorts of mechanisms:

67
00:03:30,353 --> 00:03:32,307
mechanisms we will
refer to as analog,

68
00:03:32,307 --> 00:03:34,265
to represent watches with hands,

69
00:03:34,265 --> 00:03:37,984
whereas digital watches will be
represented by a digital mechanism,

70
00:03:37,984 --> 00:03:40,553
and we will have watches
that are both

71
00:03:40,553 --> 00:03:44,140
analog and digital.

72
00:03:44,502 --> 00:03:47,665
For mechanisms that we call double
mechanisms,

73
00:03:47,665 --> 00:03:50,790
we will suppose that they
display only one time,

74
00:03:50,790 --> 00:03:55,354
so we will say that there is
a time associated to a watch here,

75
00:03:55,354 --> 00:03:57,847
and that it will have two
ways of being represented.

76
00:03:57,847 --> 00:04:00,057
This is a point of view
chosen as an exercise

77
00:04:00,057 --> 00:04:02,443
we could of course have chosen
a different point of view

78
00:04:02,443 --> 00:04:06,759
which would consist in associating a time
to each of the representation mechanisms,

79
00:04:06,759 --> 00:04:08,150
either analog or digital,

80
00:04:08,150 --> 00:04:10,033
but it is not the point of view
that we took here,

81
00:04:10,033 --> 00:04:12,741
in order to introduce an interesting
problem

82
00:04:12,741 --> 00:04:14,486
on coding these classes.

83
00:04:15,001 --> 00:04:16,706
To sum up, regarding classes,

84
00:04:16,706 --> 00:04:19,323
that is, regarding the types of objects
that we will have in our program,

85
00:04:19,323 --> 00:04:22,502
we will have watches, we will have
products,

86
00:04:22,502 --> 00:04:26,573
we will have mechanisms and
accessories,

87
00:04:26,573 --> 00:04:29,650
where accessories can be
bodies, bracelets

88
00:04:29,650 --> 00:04:31,677
-- all of these will be classes --

89
00:04:31,677 --> 00:04:34,319
regarding mechanisms, we can have
analog mechanisms,

90
00:04:34,319 --> 00:04:37,713
digital mechanisms, or
double mechanisms.

91
00:04:37,713 --> 00:04:39,673
That is the whole set of classes.

92
00:04:39,673 --> 00:04:41,742
Regarding inheritance relationships,

93
00:04:41,742 --> 00:04:44,712
we have seen that watches
are products,

94
00:04:44,712 --> 00:04:46,909
so they will inherit from Produit
(TN: means "products"),

95
00:04:46,909 --> 00:04:52,290
we have seen that analog, digital and
double mechanisms

96
00:04:52,290 --> 00:04:54,833
are sorts of mechanisms,

97
00:04:54,833 --> 00:05:00,935
so these three classes will naturally
inherit from the Mecanisme class

98
00:05:01,463 --> 00:05:04,303
We have also seen that
mechanisms and accessories

99
00:05:04,303 --> 00:05:07,801
are also products.

100
00:05:08,109 --> 00:05:13,704
So all of this will lead to the following
hierarchic model:

101
00:05:13,704 --> 00:05:16,762
Right at the top, we have the concept
of a product,

102
00:05:17,217 --> 00:05:21,715
accessories, mechanisms and watches
are products (TN: "montre" means "watch") 

103
00:05:21,715 --> 00:05:27,388
however, a watch will have a mechanism
and accessories,

104
00:05:27,388 --> 00:05:29,973
so it will encapsulate those classes.

105
00:05:30,075 --> 00:05:32,817
Among the accessories, we will find bodies, 
bracelets (TN: "boitier" means "body"),

106
00:05:32,817 --> 00:05:36,701
clasps, glasses (TN: "fermoir" and "vitre",
resp.), all of these are accessories.

107
00:05:36,701 --> 00:05:39,712
Mechanisms can be analog

108
00:05:39,712 --> 00:05:43,154
or digital, these are both 
mechanisms.

109
00:05:43,154 --> 00:05:46,438
Finally, the double mechanism.
Originally, it is a mechanism,

110
00:05:46,438 --> 00:05:49,749
but we have decided, according
to the last remark,

111
00:05:49,749 --> 00:05:51,986
that it indicated only one time,

112
00:05:51,986 --> 00:05:56,727
which we will certainly represent
at the level of the notion of mechanism,

113
00:05:56,727 --> 00:06:01,333
and that it behaves both
as analog mechanism

114
00:06:01,333 --> 00:06:05,146
and digital mechanism, which will
certainly require an interface,

115
00:06:05,146 --> 00:06:08,337
but we will see later on how to model
this exactly.

116
00:06:08,557 --> 00:06:11,340
Let's see how all of this can be
translated into code

117
00:06:11,340 --> 00:06:14,044
By the way, we suggest that while
you watch these videos,

118
00:06:14,044 --> 00:06:17,165
you take breaks from time to time
to write the code yourselves

119
00:06:17,165 --> 00:06:20,192
in your favorite development
environment.

120
00:06:20,192 --> 00:06:23,031
First point, watches
are products,

121
00:06:23,031 --> 00:06:28,751
this is represented with a Montre class,
which is a, which inherits from Produit,

122
00:06:28,751 --> 00:06:32,294
and so of course we introduce
a Produit class,

123
00:06:32,294 --> 00:06:35,155
of which Montre inherits.
And for now,

124
00:06:35,155 --> 00:06:37,434
we simply have an empty main.

125
00:06:37,434 --> 00:06:41,393
Second point,
watches have a mechanism,

126
00:06:41,393 --> 00:06:44,745
so they will encapsulate a mechanism,

127
00:06:44,745 --> 00:06:47,397
watches have a mechanism and
are made of,

128
00:06:47,397 --> 00:06:50,372
they have, different accessories.

129
00:06:50,546 --> 00:06:52,345
So how do we translate
different accessories?

130
00:06:52,345 --> 00:06:54,554
It is simply a collection
of accessories,

131
00:06:54,554 --> 00:06:57,266
a dynamic array of accessories.

132
00:06:57,266 --> 00:07:00,085
And so this introduces
two new classes.

133
00:07:00,085 --> 00:07:03,852
A Mecanisme (TN: "mechanism") class and
an Accessoire (TN: "accessory") class.

134
00:07:04,462 --> 00:07:07,534
Next aspect: products
have a price

135
00:07:07,534 --> 00:07:10,626
So we could simply encapsulate
a price,

136
00:07:10,626 --> 00:07:13,968
naturally represented as a double,

137
00:07:13,968 --> 00:07:17,172
but we have a constraint saying
that the price can vary,

138
00:07:17,172 --> 00:07:20,652
which shows that we will have
to calculate the price.

139
00:07:20,652 --> 00:07:22,982
For example, later on, we will
decide that the price of a watch

140
00:07:22,982 --> 00:07:26,576
is the price of its mechanism and
the sum of the prices of its accessories,

141
00:07:26,576 --> 00:07:30,197
and so a price is no longer a datum
but becomes a process,

142
00:07:30,197 --> 00:07:33,817
which we will represent
with a method here.

143
00:07:33,817 --> 00:07:36,978
This method returns a price,
naturally a double,

144
00:07:36,978 --> 00:07:40,812
then we want to say that
the price can vary,

145
00:07:40,812 --> 00:07:45,788
so this means that we may have
a polymorphic behavior

146
00:07:45,788 --> 00:07:50,402
Let's say that, by default,
we will return the base price,

147
00:07:50,402 --> 00:07:52,785
the base value,

148
00:07:52,785 --> 00:07:55,258
and so what we called a
price, earlier,

149
00:07:55,258 --> 00:07:58,037
will become a base value,

150
00:07:58,037 --> 00:08:01,659
to be the price of the product
by default,

151
00:08:01,659 --> 00:08:03,939
but maybe later,

152
00:08:03,939 --> 00:08:06,051
in other subclasses of the
Produit class,

153
00:08:06,051 --> 00:08:08,945
it will simply be used
in different calculations

154
00:08:08,945 --> 00:08:13,209
for the price of other products,
subclasses derived from the Produit class.

155
00:08:13,506 --> 00:08:16,012
Moreover, all products
can be displayed,

156
00:08:16,012 --> 00:08:20,807
which means concretely that we will
add a polymorphic toString method,

157
00:08:20,807 --> 00:08:23,849
that will be capable of giving us
a character string

158
00:08:23,849 --> 00:08:26,323
corresponding to displaying a product.

159
00:08:26,653 --> 00:08:29,980
Products can be displayed
but each in their own way

160
00:08:29,980 --> 00:08:33,225
which means that we will have
a polymorphic output.

161
00:08:33,225 --> 00:08:35,552
We will leave this for the
next episode,

162
00:08:35,552 --> 00:08:37,693
we will come back to it in that episode

163
00:08:37,693 --> 00:08:40,254
For now, we will simply
write a header

164
00:08:40,254 --> 00:08:44,131
to remember that we want to
override the toString method for products.

165
00:08:44,576 --> 00:08:47,324
Regarding mechanisms and accessories,

166
00:08:47,324 --> 00:08:50,941
we said that mechanisms and
accessories are products.

167
00:08:50,941 --> 00:08:53,895
So here too, we have an
inheritance relationship,

168
00:08:53,895 --> 00:08:56,937
where the Accessoire class
inherits from the Produit class

169
00:08:56,937 --> 00:08:58,473
which was defined earlier,

170
00:08:58,473 --> 00:09:02,699
and the Mecanisme class also inherits
from the Produit class.

171
00:09:03,779 --> 00:09:08,401
About mechanisms: there are three
kinds of mechanisms

172
00:09:08,401 --> 00:09:11,854
so these three classes, of course,
extend Mecanisme.

173
00:09:11,854 --> 00:09:15,633
We have MecanismeAnalogique (TN: means
"analog mechanism") which is a Mecanisme,

174
00:09:15,633 --> 00:09:17,848
which inherits from Mecanisme,

175
00:09:17,848 --> 00:09:20,676
we have MecanismeDigital
which inherits from Mecanisme,

176
00:09:20,676 --> 00:09:24,029
and MecanismeDouble which
also inherits from Mecanisme.

177
00:09:24,029 --> 00:09:27,231
And final point, about double
mechanisms,

178
00:09:27,231 --> 00:09:31,686
we will suppose that there exists only
one time within the double mechanism,

179
00:09:31,686 --> 00:09:33,543
but that double mechanisms behave

180
00:09:33,543 --> 00:09:36,777
as analog mechanisms and as
digital mechanisms,

181
00:09:36,777 --> 00:09:39,147
which is something we haven't
translated here,

182
00:09:39,147 --> 00:09:42,447
and which will affect this inheritance
relationship,

183
00:09:42,447 --> 00:09:44,781
but we will come back to that

184
00:09:44,781 --> 00:09:47,706
in an episode specifically
dedicated to that aspect.

185
00:09:48,219 --> 00:09:50,772
There, this concludes this
first episode

186
00:09:50,772 --> 00:09:54,691
on the presentation and object-oriented
modelling of the problem.

187
00:09:54,691 --> 00:09:56,915
The next episode will focus on

188
00:09:56,915 --> 00:09:58,444
polymorphic display

189
00:09:58,444 --> 00:10:00,217
and on filling the Produit class.
