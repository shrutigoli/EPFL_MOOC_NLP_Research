1
00:00:03,897 --> 00:00:05,529
In today's episode,

2
00:00:05,529 --> 00:00:07,976
we will focus on a
particular constructor :

3
00:00:07,976 --> 00:00:09,298
the copy constructor.

4
00:00:09,298 --> 00:00:11,552
Thus, we will check what
happens

5
00:00:11,552 --> 00:00:13,536
when an object is initialized

6
00:00:13,536 --> 00:00:16,482
with a copy of another object
of the same class.

7
00:00:17,312 --> 00:00:20,156
Indeed, Java lets us create
instance copies

8
00:00:20,156 --> 00:00:21,476
such as here, for example.

9
00:00:21,476 --> 00:00:25,017
Here, we have a first "r1" instance
of the "Rectangle" class

10
00:00:25,017 --> 00:00:28,370
which we initialize through
a call to a constructor

11
00:00:28,370 --> 00:00:31,864
taking two values.
This leads to the following schema.

12
00:00:34,634 --> 00:00:39,505
"r1" is initialized to
the values 12.3 and 24.5

13
00:00:39,505 --> 00:00:45,066
Then, we have another "r2" instance
of the "Rectangle" class.

14
00:00:45,066 --> 00:00:48,969
r2 is initialized with a copy of r1.

15
00:00:50,239 --> 00:00:56,764
We will thus copy r1's height
into r2

16
00:00:56,764 --> 00:01:00,135
and copy r1's width into r2.

17
00:01:00,135 --> 00:01:05,517
However, r1 and r2 and two
separated instances;

18
00:01:05,517 --> 00:01:10,669
r2 has simply been initialized
with a copy of r1.

19
00:01:10,669 --> 00:01:15,442
The copy constructor is
tasked with this kind of initializations.

20
00:01:15,442 --> 00:01:19,081
The copy constructor is tasked
with initializing an instance

21
00:01:19,081 --> 00:01:22,412
with copy of another instance
of the same class.

22
00:01:23,002 --> 00:01:26,716
Its header is perfectly defined
since it is a constructor.

23
00:01:26,716 --> 00:01:28,758
It has thus the same name
as the name of class.

24
00:01:28,758 --> 00:01:32,138
And since it receives another
instance of the same class,

25
00:01:32,138 --> 00:01:36,011
its parameter list is reduced
to one single parameter :

26
00:01:36,011 --> 00:01:38,518
another instance of the
same class.

27
00:01:38,518 --> 00:01:42,129
For example, in the case our
"Rectangle" class,

28
00:01:42,129 --> 00:01:45,919
we would have a constructor,
which is obviously in the interface

29
00:01:45,919 --> 00:01:48,771
of the "Rectangle" class. This
constructor is thus called "Rectangle".

30
00:01:48,771 --> 00:01:52,526
Also, it receives, as its unique
parameter, another rectangle,

31
00:01:52,526 --> 00:01:54,964
another instance of the "Rectangle" class.

32
00:01:54,964 --> 00:01:56,151
This instance would, for example,

33
00:01:56,151 --> 00:01:59,901
be the copy
of the height

34
00:01:59,901 --> 00:02:04,579
of the rectangle received as parameter
into the height of

35
00:02:04,579 --> 00:02:07,588
of the instance we are currently
initializing.

36
00:02:07,588 --> 00:02:12,543
And similarly, a copy of the other
rectangle's width into the width

37
00:02:12,543 --> 00:02:14,865
of the instance we are
currently initializing.

38
00:02:15,785 --> 00:02:20,396
Let us go back to the previous example
where we had an r1 rectangle

39
00:02:21,086 --> 00:02:26,315
with a height of 12.3 and
a width of 24.5

40
00:02:27,435 --> 00:02:29,535
and an r2 rectangle

41
00:02:33,315 --> 00:02:36,065
initialized with the copy constructor.

42
00:02:39,195 --> 00:02:45,075
In this line we indeed have a call
to the copy constructor.

43
00:02:45,075 --> 00:02:47,769
Here, the construction of r2

44
00:02:47,769 --> 00:02:50,385
will trigger a call to the
copy constructor

45
00:02:50,385 --> 00:02:53,021
passing, as parameter, r1

46
00:02:53,021 --> 00:02:58,066
which is here "autre rectangle"
(TN: means "other rectangle").

47
00:02:58,066 --> 00:03:00,379
In this case, it is indeed r1

48
00:03:00,379 --> 00:03:04,483
passed to the copy constructor
of r2.

49
00:03:04,483 --> 00:03:08,490
What happens is that,
here, the height of r2

50
00:03:09,230 --> 00:03:14,505
will receive the height of r1
in copy.

51
00:03:15,125 --> 00:03:20,023
Through this line, we will copy

52
00:03:20,903 --> 00:03:25,783
the height of r1 into the width
of r2.

53
00:03:26,573 --> 00:03:30,076
In the following line,

54
00:03:30,076 --> 00:03:31,786
what happens is that we will

55
00:03:31,786 --> 00:03:35,760
copy the width of r1
(the rectangle argument)

56
00:03:35,760 --> 00:03:40,905
into the width of r2
(the rectangle we are currently constructing).

57
00:03:41,685 --> 00:03:48,647
Here, we copy the width of r1
into the width of r2.

58
00:03:48,967 --> 00:03:50,793
By the way please note
that, unlike other languages,

59
00:03:50,793 --> 00:03:54,141
Java does not provide us with
a default version of the copy constructor.

60
00:03:54,141 --> 00:03:56,153
This means that, if we do not
do anything particular

61
00:03:56,153 --> 00:03:58,791
we are not allowed to do
copies, like these.

62
00:03:58,791 --> 00:04:01,256
This constructor does not exist.

63
00:04:01,256 --> 00:04:04,794
Therefore, if we want to do
copy constructions,

64
00:04:04,794 --> 00:04:07,589
we need to write it explicitly.

65
00:04:08,679 --> 00:04:11,815
Also, the copy constructor is not
the only way

66
00:04:11,815 --> 00:04:13,092
to do copies in Java.

67
00:04:13,092 --> 00:04:15,983
There is another way which is
more widely used.

68
00:04:15,983 --> 00:04:19,293
It is the "clone" method, as you
can see here.

69
00:04:19,573 --> 00:04:24,806
Through a call to the "clone" method,
we will clone the r1 instance

70
00:04:24,806 --> 00:04:28,604
which we had previously initialized
with a usual constructor.

71
00:04:28,604 --> 00:04:34,150
We will clone it into r2,
upon the declaration-initalization

72
00:04:34,150 --> 00:04:37,221
of the r2 instance of the "Rectangle" class.

73
00:04:37,221 --> 00:04:40,806
This "clone" method will be detailed
later in another video sequences

74
00:04:40,806 --> 00:04:42,810
during the upcoming weeks.

75
00:04:42,950 --> 00:04:46,795
This concludes this short episode
on copy constructors in Java.
