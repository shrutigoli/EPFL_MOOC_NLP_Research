1
00:00:04,594 --> 00:00:06,401
The goal of this episode
is to present

2
00:00:06,401 --> 00:00:07,988
a few complements regarding objects.

3
00:00:07,988 --> 00:00:10,249
We know now how to build
objects. Now we will focus

4
00:00:10,249 --> 00:00:11,973
on the end of these objects'
life.

5
00:00:11,973 --> 00:00:15,662
We will also see that, since objects
are manipulated

6
00:00:15,932 --> 00:00:18,740
through references, this
impacts the way

7
00:00:18,740 --> 00:00:21,789
to print, assign and compare them.

8
00:00:22,168 --> 00:00:24,379
Let us begin with the end
of an object's life.

9
00:00:24,379 --> 00:00:26,581
First of all, what is the end
of an object's life?

10
00:00:27,523 --> 00:00:31,573
In Java, an object reaches the
end of its life when the reference

11
00:00:31,573 --> 00:00:35,304
associated to it is not usable
anymore in the program.

12
00:00:35,304 --> 00:00:37,686
Let us illustrate this with a
simple example.

13
00:00:37,686 --> 00:00:40,307
This example right here might
be a little artificial

14
00:00:40,307 --> 00:00:42,521
but should make
things clear.

15
00:00:42,954 --> 00:00:47,289
We can see a "main" method
calling an auxiliary method

16
00:00:47,289 --> 00:00:53,042
"afficherUnRectangle". This method only
(TN: means "printARectangle")


17
00:00:53,042 --> 00:00:58,930
locally creates a Rectangle-type
object "r" initializing it appropriately.

18
00:00:58,930 --> 00:01:02,088
It then prints this rectangle.

19
00:01:02,088 --> 00:01:05,707
The reference associated to this object
created in the method

20
00:01:05,707 --> 00:01:08,814
"afficherUnRectangle" is not usable
anywhere else.

21
00:01:08,814 --> 00:01:12,718
We never assign this reference

22
00:01:12,718 --> 00:01:14,271
to another more globablly acessible variable.

23
00:01:14,704 --> 00:01:16,878
Therefore, when the method
"afficherUnRectangle"

24
00:01:16,878 --> 00:01:21,328
has concluded its execution, it is
not possible anymore

25
00:01:21,328 --> 00:01:25,926
to access the reference locally created
inside the method.

26
00:01:26,730 --> 00:01:29,102
Namely, once the method
"afficherUnRectangle"

27
00:01:29,102 --> 00:01:32,839
has terminated its execution, the "r"
object, local to this method,

28
00:01:32,839 --> 00:01:36,647
reaches the end of its life since
the reference associoated to it

29
00:01:36,647 --> 00:01:38,327
cannot be used anywhere.

30
00:01:38,901 --> 00:01:42,458
Thus, the memory associoated to
this object must be retrieved

31
00:01:42,458 --> 00:01:46,103
so that it can be available in
other programs

32
00:01:46,103 --> 00:01:47,864
or portions of the same program.

33
00:01:48,742 --> 00:01:51,904
In some languages, the
memory retrieval

34
00:01:51,904 --> 00:01:55,217
must be explicitly supported by
the programmer.

35
00:01:55,217 --> 00:01:56,910
In Java, this is not the case.

36
00:01:56,910 --> 00:02:01,424
There is a particular program called
the "Garbage Collection"

37
00:02:01,424 --> 00:02:04,993
tasked with the very reclaiming
of the

38
00:02:04,993 --> 00:02:08,208
memory associated with these objects

39
00:02:08,208 --> 00:02:09,653
which do not need to be used
in the program.

40
00:02:10,125 --> 00:02:13,273
Normally, this "garbage collection" is
completely transaprent.

41
00:02:13,273 --> 00:02:16,326
You do not need to worry about
it at this point

42
00:02:16,326 --> 00:02:18,515
of your programming learning.

43
00:02:19,273 --> 00:02:21,723
The "garbage collector" program
is thus

44
00:02:21,723 --> 00:02:25,189
regularly launched during a program
execution in Java.

45
00:02:25,189 --> 00:02:28,697
What you must remember is that
the Java remember

46
00:02:28,697 --> 00:02:32,271
does not have to explicitly
liberate the memory they are using.

47
00:02:32,271 --> 00:02:35,058
However, this is not the case
in all languages.

48
00:02:36,031 --> 00:02:38,534
Now, let us move on to
the object manipulation

49
00:02:38,534 --> 00:02:41,461
via references and the implications
this can have.

50
00:02:42,532 --> 00:02:44,839
Every time we create an object
in a Java program,

51
00:02:44,839 --> 00:02:48,683
this object is manipulated, as we have
seen, via references.

52
00:02:48,683 --> 00:02:52,261
If we declare a Rectangle-type
variable,

53
00:02:52,261 --> 00:02:55,902
the situation in the memory is the following.

54
00:02:56,660 --> 00:02:59,962
Let us call this Rectangle-type
variable "rect".

55
00:02:59,962 --> 00:03:03,220
This variable is actually a reference
to an object

56
00:03:04,659 --> 00:03:06,415
with its different attributes.

57
00:03:07,228 --> 00:03:08,791
Now, we are focusing on the following
problem.

58
00:03:08,791 --> 00:03:12,529
We suppose that we wish to create
an object "b" from an object "a".

59
00:03:12,529 --> 00:03:16,067
Both will have the same type.
However, we wish for "a" and "b"

60
00:03:16,067 --> 00:03:18,622
to be distinct objects in
the memory.

61
00:03:18,622 --> 00:03:21,455
How can we do this properly
in Java when objects

62
00:03:21,455 --> 00:03:23,088
are manipulated via references.

63
00:03:24,121 --> 00:03:25,370
Let us take a concrete example.

64
00:03:25,370 --> 00:03:29,266
Here, our "a" is the rectangle "r1".

65
00:03:29,266 --> 00:03:34,202
From this "r1" rectangle, we wish
to create another rectangle

66
00:03:34,202 --> 00:03:38,146
- thus with the same type. However,
we want both objects "r2" and "r1"

67
00:03:38,146 --> 00:03:40,124
to be two distincts objects in the memory.

68
00:03:40,710 --> 00:03:44,829
In Java, if we create a "r2" object
from "r1" object using

69
00:03:44,829 --> 00:03:48,416
an assignment, the two objects

70
00:03:48,416 --> 00:03:51,329
will be not be distinct in the memory.

71
00:03:52,089 --> 00:03:53,680
Let us see why.

72
00:03:53,680 --> 00:03:56,491
When we execute this
line of code,

73
00:03:58,000 --> 00:03:59,855
we have the following situation
in the memory

74
00:03:59,855 --> 00:04:01,282
after the execution.

75
00:04:01,816 --> 00:04:05,451
In the "r1" variable, we have
a reference to a rectangle object

76
00:04:05,451 --> 00:04:10,089
with particular values for
its width and height members.

77
00:04:11,743 --> 00:04:14,711
Then, when we execute this
line of code,

78
00:04:16,311 --> 00:04:19,381
we will create an "r2" variable.

79
00:04:24,822 --> 00:04:29,283
Let us call "ref1"

80
00:04:29,283 --> 00:04:31,669
the reference contained in "r1".

81
00:04:31,968 --> 00:04:35,103
Upon this assignment, we will
simply copy

82
00:04:35,103 --> 00:04:39,567
the value contained in "r1"
into "r2";

83
00:04:39,567 --> 00:04:42,266
namely the reference to the
same object.

84
00:04:42,922 --> 00:04:46,722
Concretely, this means that
we will point here,

85
00:04:46,722 --> 00:04:48,101
on the same object in the memory.

86
00:04:49,946 --> 00:04:53,977
"r1" and "r2" are NOT two distinct
objects in the memory.

87
00:04:55,068 --> 00:04:57,249
Concretely, this means that
any manipulation

88
00:04:57,249 --> 00:04:59,498
on "r1" will impact "r2" aswell

89
00:05:01,407 --> 00:05:03,488
and vice versa.

90
00:05:03,995 --> 00:05:07,422
For example, if we change

91
00:05:09,242 --> 00:05:11,595
the value of the height of "r2",

92
00:05:14,283 --> 00:05:16,277
this will impact "r1" aswell.

93
00:05:23,370 --> 00:05:26,921
Therefore, if we wish for "r2" to
be

94
00:05:26,921 --> 00:05:29,272
a copy distinct from "r1"

95
00:05:29,272 --> 00:05:33,283
we cannot use the assignment
operator in Java.

96
00:05:34,003 --> 00:05:37,955
Instead, we will use either the
copy constructor or the "clone" method

97
00:05:37,955 --> 00:05:40,967
which will be discussed later
in the course.

98
00:05:41,676 --> 00:05:43,249
We are talking about it here

99
00:05:43,249 --> 00:05:45,141
because this is not systematically
the case in all languages.

100
00:05:45,192 --> 00:05:48,545
In some languages, we can
perfectly create

101
00:05:48,545 --> 00:05:50,944
two distinct copies through
the assignment operator.

102
00:05:52,046 --> 00:05:54,025
In the previous episodes,
we have seen how

103
00:05:54,025 --> 00:05:56,575
to write the copy constructor
in a class.

104
00:05:56,575 --> 00:06:00,051
This very copy constructor
is used here.

105
00:06:00,503 --> 00:06:04,965
This constructor creates a rectangle
from the values of another rectangle.

106
00:06:04,965 --> 00:06:08,040
Thus, if we execute this line of code,

107
00:06:08,040 --> 00:06:10,437
we are in the same situation as before.

108
00:06:11,452 --> 00:06:15,713
"r1" is a reference to a particular
"Rectangle" object.

109
00:06:20,283 --> 00:06:24,067
When we execute this line of code,

110
00:06:25,212 --> 00:06:28,709
we are creating another "Rectangle"
object.

111
00:06:34,708 --> 00:06:37,794
This is thus a distinct object
in the memory

112
00:06:39,598 --> 00:06:41,847
where we will simply copy,

113
00:06:44,387 --> 00:06:46,220
member by member,

114
00:06:47,443 --> 00:06:49,147
the values of the first rectangle.

115
00:06:55,714 --> 00:06:57,864
We can clearly see that this
not the same situation

116
00:06:57,864 --> 00:06:58,958
as before.

117
00:06:59,281 --> 00:07:04,011
Here, "r2" and "r1" are indeed two
distinct objects in the memory.

118
00:07:05,631 --> 00:07:07,923
Still regarding objects
manipulated

119
00:07:07,923 --> 00:07:11,199
through references in Java,
let us focus on the implications

120
00:07:11,199 --> 00:07:12,792
for the printing of objects.

121
00:07:13,845 --> 00:07:15,769
If we execute this line of code,

122
00:07:16,205 --> 00:07:19,401
what is contained in our "rect" is
indeed a reference.

123
00:07:25,391 --> 00:07:30,322
A reference is sort of like an
address

124
00:07:30,322 --> 00:07:33,352
which a slightly peculiar format.

125
00:07:34,028 --> 00:07:35,990
Now, if we try to

126
00:07:37,287 --> 00:07:39,337
print the content of our "rect" object

127
00:07:39,337 --> 00:07:42,047
through such an instruction.

128
00:07:42,917 --> 00:07:46,057
This instruction will simply
print the content

129
00:07:46,057 --> 00:07:47,445
of the "rect" variable.

130
00:07:47,727 --> 00:07:50,102
What will result is somewhat
unnatural

131
00:07:50,102 --> 00:07:53,684
and unpleasant to read. We would
probably prefear to print

132
00:07:53,684 --> 00:07:57,744
the content of a rectangle, that is,
the value of its attributes

133
00:07:57,744 --> 00:07:59,749
instead of its reference.

134
00:07:59,956 --> 00:08:02,470
So, what should we do in
order to print the content

135
00:08:02,470 --> 00:08:05,121
pointed by the reference
instead of the reference itself,

136
00:08:05,121 --> 00:08:07,824
using exactly this same
instruction?

137
00:08:08,524 --> 00:08:10,325
In order to make this possible,

138
00:08:10,325 --> 00:08:14,561
so that such a line of code
may print the content pointed by "rect"

139
00:08:14,600 --> 00:08:16,809
instead of this eerie referance,

140
00:08:16,809 --> 00:08:20,995
we simply need to place, in the "Rectangle"
class, a particular method.

141
00:08:20,995 --> 00:08:23,601
The header of this method is
the following.

142
00:08:23,601 --> 00:08:26,967
This is the "toString() " method
with an empty parameter list

143
00:08:26,967 --> 00:08:29,753
and returning a character string of
the type "string".

144
00:08:30,943 --> 00:08:34,455
This " toString() " method will actually
be automatically be summoned

145
00:08:34,455 --> 00:08:39,466
in order to convert this rectangle
into its representation

146
00:08:39,466 --> 00:08:41,763
as a character string.

147
00:08:41,763 --> 00:08:45,143
We are the ones deciding
what character string

148
00:08:45,185 --> 00:08:47,456
will be produced by the "toString()" method.

149
00:08:47,456 --> 00:08:50,750
Concretely, in the "Rectangle"
class, we will place

150
00:08:50,750 --> 00:08:54,416
our famous "toString()" method as 
public since we wish

151
00:08:54,416 --> 00:08:56,380
to use from the outisde.

152
00:08:56,902 --> 00:09:00,197
This "toString()" method will simply
build a character string

153
00:09:00,197 --> 00:09:03,675
corresponding to the representation
we wish to have

154
00:09:03,675 --> 00:09:08,855
when the object is provided as
argument to "System.out.println", typically.

155
00:09:08,855 --> 00:09:12,709
Here, we have decided that
the string "String"

156
00:09:12,709 --> 00:09:14,973
will be built as the concatenation

157
00:09:14,973 --> 00:09:18,641
of the "Rectangle" string,
the value of the member "hauteur",

158
00:09:20,051 --> 00:09:23,383
the value of the member "largeur"
separated by this character string here.

159
00:09:23,779 --> 00:09:27,183
Thus, from now on,

160
00:09:27,183 --> 00:09:30,311
every "Rectangle" will have
a representation built

161
00:09:30,311 --> 00:09:33,277
with the "toString()" method.

162
00:09:33,277 --> 00:09:36,054
This printing representation will be
a character string.

163
00:09:36,914 --> 00:09:39,019
The execution of this line of code,

164
00:09:39,019 --> 00:09:44,425
printing a rectangle with these
particular values as attribute,

165
00:09:44,425 --> 00:09:47,773
will result in a printing of this kind.

166
00:09:47,773 --> 00:09:50,193
This printing is much more
readable than the

167
00:09:50,197 --> 00:09:51,393
previous one.

168
00:09:52,070 --> 00:09:55,196
The fact that, in Java, objects are
manipulated through references

169
00:09:55,196 --> 00:09:58,579
impact the assignment and
the printing of objects.

170
00:09:58,657 --> 00:10:01,434
This will also impact the
object comparison.

171
00:10:01,434 --> 00:10:03,892
This is the last point we
are now going to examine.

172
00:10:04,930 --> 00:10:07,391
Let us now suppose that, in a given,
program, we create two rectangles

173
00:10:07,391 --> 00:10:10,742
"r1" and "r2" with the same
attribute values.

174
00:10:10,742 --> 00:10:13,389
The two will thus have the same height
and the same width.

175
00:10:14,046 --> 00:10:16,594
What will happen if we try
to compare these two rectangles

176
00:10:16,594 --> 00:10:19,137
with the " == " operator.

177
00:10:19,753 --> 00:10:22,538
Will the values of the attributes


178
00:10:22,538 --> 00:10:24,955
be compared or something
else?

179
00:10:25,910 --> 00:10:29,615
In order to answer this question,
we have to see what is stored

180
00:10:29,615 --> 00:10:31,663
inside the "r1" and "r2"
variables.

181
00:10:31,663 --> 00:10:36,026
We have seen that, when we
create a rectangle

182
00:10:38,241 --> 00:10:41,410
with this kind of instruction,
what we are retrieving

183
00:10:41,410 --> 00:10:44,074
in the object variance is a
reference on an object.

184
00:10:44,074 --> 00:10:45,862
We have this in the memory.

185
00:10:45,862 --> 00:10:48,478
We thus have a "r1" variable

186
00:10:48,478 --> 00:10:54,678
containing a reference, an address
on a "Rectangle" object.

187
00:10:54,726 --> 00:10:58,351
Its "hauteur" member is 4.0
and its "largeur" member is 5.0

188
00:11:00,576 --> 00:11:04,946
The same thing happens upon
the execution of the second line.

189
00:11:04,946 --> 00:11:09,010
We will have an "r2" variable
in the memory,

190
00:11:10,364 --> 00:11:13,655
containing a reference to a
"Rectangle" object.

191
00:11:13,655 --> 00:11:16,654
Its "hauteur" member is 4.0
and its "largeur" member is 5.0

192
00:11:16,755 --> 00:11:19,634
We can see that each of
these "new"

193
00:11:20,454 --> 00:11:23,096
will actually create a distinct instance.

194
00:11:24,021 --> 00:11:26,862
This means that even if these objects
have the same attribute values,

195
00:11:26,862 --> 00:11:31,793
what will be compared through
the " r1 == r2 " comparison

196
00:11:31,793 --> 00:11:35,186
is none other than the content
of the "r1" and "r2" variables.

197
00:11:35,186 --> 00:11:38,177
These variables are distinct references

198
00:11:38,177 --> 00:11:40,230
pointing on two different memory areas.

199
00:11:41,837 --> 00:11:46,075
The result of this comparison
is the boolean value "false"

200
00:11:46,075 --> 00:11:49,670
since we have two distinct
references.

201
00:11:52,184 --> 00:11:55,591
However, in most cases, when
we wish to compare objects,

202
00:11:55,591 --> 00:11:58,252
we do not wish to compare their addresses

203
00:11:58,252 --> 00:12:00,810
but rather their content;

204
00:12:01,022 --> 00:12:03,099
if these objects have the
same attribute values.

205
00:12:03,099 --> 00:12:05,748
Thus, this not the good way to
reach this result.

206
00:12:07,238 --> 00:12:10,465
If you have followed our previous
"MOOC" on the fundamentals

207
00:12:10,567 --> 00:12:12,712
of Java programming, you have
seen how we proceed

208
00:12:12,712 --> 00:12:15,852
in order to compare two character
strings.

209
00:12:17,138 --> 00:12:20,407
In order to compare two strings,
we resorted

210
00:12:21,037 --> 00:12:24,088
to the "equals" method rather
than the " == " operator.

211
00:12:24,495 --> 00:12:27,233
We use this in case we wish to compare
the content of these strings

212
00:12:27,233 --> 00:12:30,007
rather than the references to
these character strings.

213
00:12:30,898 --> 00:12:33,347
As a reminder, let us examine
the following example.

214
00:12:33,347 --> 00:12:37,906
The execution of this line
will allow us

215
00:12:37,906 --> 00:12:44,055
to store  the reference on the character
string "Rouge" into the variable "s1".

216
00:12:45,429 --> 00:12:48,881
After the execution of
these lines of code,

217
00:12:48,881 --> 00:12:51,516
we will have a variable "s3",

218
00:12:52,666 --> 00:12:56,470
the reference on a character string
built by concatenation

219
00:12:56,470 --> 00:13:00,224
of the content of the variable "s2" and
the literal "ge".

220
00:13:00,499 --> 00:13:03,924
The variable "s3" will thus have
the same content as "s1".

221
00:13:06,752 --> 00:13:10,227
However, they both correspond
to disctinct references in the memory.

222
00:13:10,883 --> 00:13:15,384
Comparing "s1" and "s3" through the
" == " operator, will compare

223
00:13:15,384 --> 00:13:18,373
only the references in these
two different values

224
00:13:18,373 --> 00:13:20,295
and will thus return "false",

225
00:13:20,688 --> 00:13:23,349
even if their content are identical.

226
00:13:24,058 --> 00:13:27,021
In order to compare their content,
we have seen that

227
00:13:27,021 --> 00:13:31,191
we needed to resort to a predefined
methode for the strings.

228
00:13:31,971 --> 00:13:35,561
This is the "equals" method. At this point,
if we use "equals",

229
00:13:35,561 --> 00:13:37,690
we are comparing their content.

230
00:13:38,139 --> 00:13:41,215
Thus, message "Chaînes identiques".
(TN: means "identical strings").

231
00:13:41,903 --> 00:13:43,645
will be printed.

232
00:13:44,674 --> 00:13:48,659
In order to compare the content
of two Rectangle-type objects,

233
00:13:48,659 --> 00:13:50,800
we will resort to a similar solution.

234
00:13:50,800 --> 00:13:54,334
We will thus use an "equals"
method.

235
00:13:54,334 --> 00:13:57,085
The programmer of "Rectangle" will
have to define "equals"

236
00:13:57,085 --> 00:13:59,123
correctly for rectangles.

237
00:13:59,586 --> 00:14:02,629
How do we define "equals"
so that it returns "true"

238
00:14:02,629 --> 00:14:05,530
if and only if the attributes of
the rectangles are identical?

239
00:14:06,017 --> 00:14:10,191
The programmer of the "Rectangle"
class must concretely provide a method

240
00:14:10,191 --> 00:14:14,363
testing the equality according
to the criteria we deem

241
00:14:14,363 --> 00:14:16,759
sound for "Rectangle"-type objects.

242
00:14:17,219 --> 00:14:19,716
When will we consider that
two rectangles are equal

243
00:14:19,716 --> 00:14:21,766
according to their content?

244
00:14:21,786 --> 00:14:24,927
One of the possible headers provided
by Java in the "Rectangle" class

245
00:14:25,025 --> 00:14:28,487
in order to porgram the "equals" method
is the following.

246
00:14:28,487 --> 00:14:30,920
We will more thoroughly on
an example

247
00:14:30,920 --> 00:14:33,355
how to program this method in
the "Rectangle" class.

248
00:14:34,588 --> 00:14:37,369
The "equals" method is a
method of the "Rectangle" class.

249
00:14:37,369 --> 00:14:40,311
This means that will necessarily
be applied

250
00:14:40,311 --> 00:14:41,886
on a Rectangle-type object.

251
00:14:42,170 --> 00:14:44,321
Typically, we can imagine we have

252
00:14:46,561 --> 00:14:51,151
declared an "r1" rectangle and
initialized it properly.

253
00:14:52,892 --> 00:14:55,832
If we wish to compare "r1" with
another rectangle,

254
00:14:55,832 --> 00:14:58,537
we will use the "equals" method.

255
00:14:59,923 --> 00:15:04,333
This method will compare "r1" with
another rectangle provided as argument.

256
00:15:05,158 --> 00:15:08,148
We imagine, for example, another
"r2" rectangle previously declared.

257
00:15:10,248 --> 00:15:13,417
The "equals" method will thus take
a rectangle in argument

258
00:15:13,487 --> 00:15:17,487
and compare it with a given
istance of rectangle.

259
00:15:17,976 --> 00:15:22,271
It is the programmer's task to give
the body of the "equals" method,

260
00:15:22,319 --> 00:15:26,298
to give the criteria to according to which
two rectangles can be equal.

261
00:15:27,234 --> 00:15:31,461
The result is a boolean :
we expect it

262
00:15:31,461 --> 00:15:35,729
to be "true" if the two rectangles
are considered equal

263
00:15:35,939 --> 00:15:37,998
and "false" otherwise.

264
00:15:38,601 --> 00:15:41,068
Concretely, we can imagine to
program the body

265
00:15:41,068 --> 00:15:42,732
of the "equals" method as follows.

266
00:15:42,732 --> 00:15:46,866
Usually, we take the precaution
to test if the instance

267
00:15:46,866 --> 00:15:50,064
which we are trying to compare
the current instance is "null".

268
00:15:50,130 --> 00:15:53,192
In this case, we will consider
that the comparison fails;

269
00:15:53,192 --> 00:15:55,667
our "equals" method will thus
return "false".

270
00:15:55,667 --> 00:15:58,697
A given instance cannot be
equal to "null".

271
00:16:00,147 --> 00:16:04,739
Otherwise, we will return "true"
if the height of the current instance

272
00:16:05,769 --> 00:16:09,020
has the same value as the
height of the rectangle passed

273
00:16:10,460 --> 00:16:12,888
as argument.
And the same for the width.

274
00:16:14,132 --> 00:16:17,807
Using the "equals" method
thus defined on two rectangles

275
00:16:17,878 --> 00:16:20,509
with the same values for their
height and width

276
00:16:20,509 --> 00:16:22,072
will result in the

277
00:16:26,132 --> 00:16:29,337
boolean value "true".
Indeed,

278
00:16:30,517 --> 00:16:35,132
"r2" is not "null", the values of the
heights are identical.

279
00:16:35,166 --> 00:16:37,975
and so are the widths.

280
00:16:38,145 --> 00:16:41,568
In this case, we will have the printing
"Rectangles identiques" (TN: means "identical Rectangles")

281
00:16:41,568 --> 00:16:45,134
This was not the case when
we compared two rectangles

282
00:16:45,134 --> 00:16:47,488
through the " == " operator.

283
00:16:47,488 --> 00:16:51,625
In Java, the programmer of a class
is thus tasked to

284
00:16:51,625 --> 00:16:55,241
define an "equals" method if we
wish to be able

285
00:16:55,241 --> 00:16:59,449
to compare instances according
to particular criteria.

286
00:16:59,449 --> 00:17:01,917
We will go back to this once
we have discussed

287
00:17:01,917 --> 00:17:04,458
the inheritance and particularly
the predefined class "Object".

288
00:17:04,458 --> 00:17:08,327
For now, just be aware that there
can be two possible headers

289
00:17:08,327 --> 00:17:10,133
for the "equals" method.

290
00:17:10,133 --> 00:17:13,418
The one we have just seen
where, in a given class called

291
00:17:13,418 --> 00:17:16,484
"UneClass", we define the "equals"
method passing as agument

292
00:17:16,484 --> 00:17:19,423
an object of the same type
as the class.

293
00:17:19,423 --> 00:17:22,803
It is also possible to define
the "equals" method

294
00:17:22,803 --> 00:17:26,800
passing as argument an Object-type
object.

295
00:17:26,800 --> 00:17:29,716
We will go back to this
when the time is ripe.

296
00:17:30,151 --> 00:17:33,097
This concludes our first chapter
on the fundamentals

297
00:17:33,097 --> 00:17:34,966
of the object-oriented in Java.

298
00:17:34,966 --> 00:17:37,483
In what comes next, we will
open another very important

299
00:17:37,483 --> 00:17:39,742
chapter : the inheritance.
