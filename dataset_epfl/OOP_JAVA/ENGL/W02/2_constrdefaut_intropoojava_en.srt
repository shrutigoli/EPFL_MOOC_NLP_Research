1
00:00:04,356 --> 00:00:06,921
In this new episode, we will
focus

2
00:00:06,921 --> 00:00:09,149
on the default constructor.
Namely the constructor which

3
00:00:09,149 --> 00:00:12,163
are called when we do not provide
any initialization value,

4
00:00:12,163 --> 00:00:15,339
no parameter. We will also
discuss what happens

5
00:00:15,339 --> 00:00:19,904
if, in a classe, we do not define
any explicit constrcutor.

6
00:00:20,639 --> 00:00:23,652
A default constructor is simply
a constructor which

7
00:00:23,652 --> 00:00:27,342
has no parameter. You can see here
a concrete example.

8
00:00:27,342 --> 00:00:31,076
We can imagine that, in the "Rectangle",
three different constructors

9
00:00:31,076 --> 00:00:35,051
cohabit. This means, three different
ways to initialize a "Rectangle"-type example.

10
00:00:35,051 --> 00:00:40,767
The default constructor -without
parameter- has for mission to initialize

11
00:00:40,767 --> 00:00:44,169
the "hauteur" and "largeur" attributes
to default values.

12
00:00:44,169 --> 00:00:49,917
Concretely, this default constructor
will be summoned like this.

13
00:00:49,917 --> 00:00:55,933
We will declare an "r" object of the "Rectangle"
type. We will initialize it

14
00:00:56,014 --> 00:01:00,556
by using the default constructor.
It will be call through

15
00:01:00,556 --> 00:01:04,635
this instruction. Here, since we
are specifying that the constructor

16
00:01:04,635 --> 00:01:08,616
is called with an empty argument
list, this means

17
00:01:08,616 --> 00:01:12,515
we are indeed calling this
constructor here.

18
00:01:12,758 --> 00:01:17,360
After this initialization, the
situation in the memory will be this one :

19
00:01:17,360 --> 00:01:22,746
We will thus have an "r" variable
containing a reference on a

20
00:01:22,746 --> 00:01:31,644
"Rectangle"-type object. Its "hauteur"
member will be initialized to the

21
00:01:31,644 --> 00:01:45,263
default value 1.0 and its "largeur"
member

22
00:01:45,263 --> 00:01:47,337
to the default value 2.0

23
00:01:49,630 --> 00:01:53,236
The other constructors of the class
are not

24
00:01:53,236 --> 00:01:56,607
default constructors; indeed, their
parameter lists

25
00:01:56,607 --> 00:01:58,118
are not empty.

26
00:01:58,118 --> 00:02:01,606
If, for example, we wish to
summon this constructor here,

27
00:02:01,606 --> 00:02:06,462
we must use this particular phrase.
Thus, just like before,

28
00:02:06,462 --> 00:02:10,944
we declare a "Rectangle"-type
variable "r1".

29
00:02:10,944 --> 00:02:16,170
We call the constructor will
a phrase similar to the one

30
00:02:16,170 --> 00:02:20,794
we have seen previously.
However, we precise, as argument,

31
00:02:20,794 --> 00:02:25,642
the value we wish to give to
this parameter "c".

32
00:02:27,220 --> 00:02:29,082
Now, what does happen if the
programmer of a class

33
00:02:29,082 --> 00:02:31,214
does not code any explicit constructor?

34
00:02:31,214 --> 00:02:34,012
Why, the object initialization is
considered so essential

35
00:02:34,012 --> 00:02:39,047
that a constructor will be automatically
generated for this call.

36
00:02:39,047 --> 00:02:40,974
This will obviously be a
default constructor.

37
00:02:41,944 --> 00:02:45,199
We will call it the default default
constructor.

38
00:02:45,199 --> 00:02:49,511
This automatically-generated constructor
is a default constructor because

39
00:02:49,511 --> 00:02:53,703
it has not parameter. We call it "default"
itself because it is provided

40
00:02:53,703 --> 00:02:57,659
automatically if there is no
other explicit constructor

41
00:02:57,659 --> 00:02:59,304
in the class.

42
00:03:00,017 --> 00:03:02,875
This default default constructor will
do a minimum work

43
00:03:02,875 --> 00:03:04,107
regarding the initialization.

44
00:03:04,403 --> 00:03:10,931
It will initialize all basic-type
attributes with

45
00:03:10,931 --> 00:03:16,334
default values such as 0 , 0.0 or "false".
Regarding objects, they will all

46
00:03:16,334 --> 00:03:18,628
be initialized to "null".

47
00:03:19,345 --> 00:03:24,538
Let us suppose that we define a
"Rectangle" class. It will have,

48
00:03:24,538 --> 00:03:28,729
as in our previously-seen examples,
two double-type attributes "largeur" and

49
00:03:28,729 --> 00:03:35,652
and "hauteur". It will also have
another, more complex argument :

50
00:03:35,652 --> 00:03:39,986
for example, an object (an instance)
of another class.

51
00:03:39,986 --> 00:03:45,314
For example a "Position" class permitting
to represent the

52
00:03:45,314 --> 00:03:48,498
Rectangle's position on a two-
dimensional screen.

53
00:03:49,441 --> 00:03:52,271
Thus, in the "Rectangle" class,
there is no explicit constructor.

54
00:03:52,271 --> 00:03:55,416
That means that the default default
constructor is generated;

55
00:03:55,416 --> 00:03:59,252
we can use it to initialize
a rectangle.

56
00:03:59,798 --> 00:04:02,271
For example, in another part
of the program,

57
00:04:02,271 --> 00:04:07,528
we may declare a "Rectangle"-type
variable, a "Rectangle" object

58
00:04:07,528 --> 00:04:13,507
and initialize it with the default
default constructor

59
00:04:13,507 --> 00:04:16,068
which, of course, does not take
any parameter.

60
00:04:16,852 --> 00:04:23,459
After this initializaiton, we will
have, in the "rect" variable,

61
00:04:23,459 --> 00:04:28,450
a reference on a "Rectangle"-type
object. Its height and width

62
00:04:28,450 --> 00:04:34,111
will be initialized to default values
since they are

63
00:04:34,111 --> 00:04:37,259
basic-type attributes.

64
00:04:43,399 --> 00:04:46,968
The height and width will thus
have the value 0.0

65
00:04:46,968 --> 00:04:57,623
Also, the position, the "position"
attribute, will be initialized to "null":

66
00:04:59,133 --> 00:05:01,846
since it is an object.

67
00:05:03,669 --> 00:05:06,880
By the way, in order not to overburder
the writing of this example, we have not

68
00:05:06,880 --> 00:05:10,275
precised the access rights.
Rigorously, for the better

69
00:05:10,275 --> 00:05:14,282
encapsulation, all attributes
should be declared

70
00:05:14,282 --> 00:05:16,448
as "private".

71
00:05:17,350 --> 00:05:21,244
Be careful though!
This default default constructor

72
00:05:21,244 --> 00:05:24,240
is not provided anymore as
soon as we define

73
00:05:24,240 --> 00:05:27,302
at least one explicit constructor
for this class;

74
00:05:27,302 --> 00:05:29,887
be this constructor default or not.

75
00:05:30,820 --> 00:05:35,192
Concretely, this means that if, in a class,
we specify a constructor

76
00:05:35,192 --> 00:05:39,863
which is not a default constructor,
we have no way to build

77
00:05:39,863 --> 00:05:42,662
a object without providing
initialization values.

78
00:05:42,662 --> 00:05:48,015
In other words, we cannot write
something like this anymore.

79
00:05:51,945 --> 00:05:57,717
This instruction, calling a default
constructor is not valid anymore.

80
00:05:59,984 --> 00:06:03,355
Why? Because the default default
constructor has disappeared.

81
00:06:04,582 --> 00:06:07,320
This corresponds to something we
could wish. If we have taken the

82
00:06:07,320 --> 00:06:10,523
time to explicitly program a
constructor in the class,

83
00:06:10,523 --> 00:06:14,752
we do not wish for Java to inconspicuously
slide a default constructor

84
00:06:14,752 --> 00:06:17,755
we never asked for; we never
explicitly specified

85
00:06:17,755 --> 00:06:20,864
we wished to use a default
constructor.

86
00:06:21,756 --> 00:06:24,115
In order to illustrate this, we will
now study three variants

87
00:06:24,115 --> 00:06:27,268
of the same program differing
one from the others only

88
00:06:27,268 --> 00:06:29,304
by the constructors.

89
00:06:29,752 --> 00:06:33,941
In the first variant, the A variant, a
"Rectangle" class is defined

90
00:06:33,941 --> 00:06:36,564
with two double-type attributes
"hauteur" and lsrgeur".

91
00:06:36,564 --> 00:06:40,682
This class can have more content
but it has no

92
00:06:40,682 --> 00:06:43,121
explicit constructor at all.

93
00:06:43,564 --> 00:06:47,007
In the B variant, there are still
the same attributes. This time though,

94
00:06:47,007 --> 00:06:50,917
we have an explicit constructor
which is a default constructor

95
00:06:50,917 --> 00:06:54,852
because its parameter list is empty.
This constructor will initialize

96
00:06:54,852 --> 00:06:57,790
the height and the width
to the value 0.0

97
00:06:57,790 --> 00:07:01,666
Finally, in the C variant, the "Rectangle"
class has only one

98
00:07:01,666 --> 00:07:05,888
explicit constructor which is not
a default construcotr anymore

99
00:07:05,888 --> 00:07:08,533
since its parameter list
is not empty.

100
00:07:08,533 --> 00:07:12,105
Here, this constructor expects one
value for the

101
00:07:12,105 --> 00:07:15,829
height and another for the width. The
constructor will then assign these values

102
00:07:15,829 --> 00:07:18,577
to the corresponding attributes.

103
00:07:19,768 --> 00:07:22,410
For each of these variants, we will
ask ourselves the following questions:

104
00:07:22,410 --> 00:07:24,868
Is there a default constructor?

105
00:07:24,868 --> 00:07:28,208
Is it valid to initialize an object
with this instruction?

106
00:07:28,208 --> 00:07:32,371
Is it valid to initialize an object
with this other instruction?

107
00:07:33,058 --> 00:07:36,609
Let us begin by the first variant,
the A variant. Remember that,

108
00:07:36,609 --> 00:07:40,380
here, we are only indicating the
constructors of the class; not the rest.

109
00:07:40,380 --> 00:07:43,508
Here, we do not have any
explicit constructor.

110
00:07:43,876 --> 00:07:47,637
As we have seen previously,
when a class does not define

111
00:07:47,637 --> 00:07:50,334
any explicit constructor, a default
constructor is generated.

112
00:07:50,334 --> 00:07:53,172
It is the default default constructor.

113
00:07:53,172 --> 00:07:56,462
Therefore, the initialization
through this instruction is valid.

114
00:07:56,462 --> 00:07:59,120
We are using a constructor
without parameter.

115
00:07:59,120 --> 00:08:02,600
We have seen that, for basic-type
attributes, the default

116
00:08:02,600 --> 00:08:07,655
default constructor initialize these
attributes

117
00:08:07,655 --> 00:08:09,216
to the basic values.

118
00:08:09,216 --> 00:08:12,405
Thus, the height will be 0.0
and the height will be 0.0

119
00:08:13,024 --> 00:08:16,161
However, since the only available
constructor is the default default constructor,

120
00:08:16,161 --> 00:08:19,946
we cannot initialize an object
with this instruction.

121
00:08:19,946 --> 00:08:23,038
Since we are using a constructor
without parameter,

122
00:08:23,038 --> 00:08:27,466
this instruction expecting parameters
is invalid.

123
00:08:27,466 --> 00:08:31,115
Regarding variant B, we have, in the
"Rectangle" class

124
00:08:31,115 --> 00:08:34,923
an explicit constructor; it is a
default constructor.

125
00:08:34,923 --> 00:08:37,850
On the question asking if there
is a default constructor,

126
00:08:37,850 --> 00:08:39,344
the answer is yes.

127
00:08:39,344 --> 00:08:42,468
It is this explicitly declared
constructor.

128
00:08:42,468 --> 00:08:46,070
Just like before, we can obviously
use this default constructor

129
00:08:46,070 --> 00:08:49,584
with this instuction, calling a constructor
expecting no parameter.

130
00:08:49,584 --> 00:08:52,855
Here, this constructor will have
the same effect as the

131
00:08:52,855 --> 00:08:54,781
the default default constructor.

132
00:08:54,781 --> 00:08:57,485
Indeed, it initializes the height
and the width to the same

133
00:08:57,485 --> 00:09:01,517
values as the ones used by
the default default constructor.

134
00:09:01,887 --> 00:09:04,019
On the same basic as for variant A,

135
00:09:04,019 --> 00:09:06,613
this instruction is invalid;
there is indeed no other

136
00:09:06,613 --> 00:09:10,095
constructor as the default constructor
in the "Rectangle" thus.

137
00:09:10,095 --> 00:09:14,675
Therefore, no constructor expecting
two values could work here.

138
00:09:15,474 --> 00:09:18,833
Finally, for the C variant, we have
an explicit constructor

139
00:09:18,833 --> 00:09:21,003
which is not a default constructor.

140
00:09:21,003 --> 00:09:25,223
On the question asking if there
is a default constructor,

141
00:09:25,223 --> 00:09:26,787
the answer is no.

142
00:09:26,787 --> 00:09:28,794
There is no default constructor.

143
00:09:28,794 --> 00:09:31,850
Why? As we have said before,
as soon as we define

144
00:09:31,850 --> 00:09:36,138
an explicit constructor -be it a default
constructor or not-

145
00:09:36,138 --> 00:09:39,387
the default default constructor
vanishes.

146
00:09:39,387 --> 00:09:43,099
Therefore, the only constructor
available in this class

147
00:09:43,099 --> 00:09:44,658
is now this one.

148
00:09:44,658 --> 00:09:48,355
It is thus not possible to
initialize an object with this instruction.

149
00:09:48,355 --> 00:09:51,481
There is no constructor which
does not expect any argument.

150
00:09:51,481 --> 00:09:53,781
This is thus invalid.

151
00:09:53,781 --> 00:09:56,689
On the other hand, the second
instruction becomes valid.

152
00:09:56,689 --> 00:10:00,493
It will initialize the height and
the width with the values

153
00:10:00,493 --> 00:10:03,952
passed as argument. We will thus
obtain a "Rectangle" object

154
00:10:03,952 --> 00:10:08,141
where the height will be 1.0
and the width 2.0

155
00:10:09,199 --> 00:10:12,910
Let us now examine a few shortcuts
provided by the Java language

156
00:10:12,910 --> 00:10:16,490
regarding object construction
and attribute initialization.

157
00:10:17,459 --> 00:10:20,456
If there are several constructors
in a class, Java lets

158
00:10:20,456 --> 00:10:24,500
any constructor summon
any other constructor

159
00:10:24,500 --> 00:10:25,945
of the same class.

160
00:10:26,159 --> 00:10:29,529
This is done with a particular
instruction : "this ".

161
00:10:29,529 --> 00:10:34,029
We are thus using the reserved keyword
"this" and, between parentheses,

162
00:10:34,029 --> 00:10:37,860
we provide the arguments corresponding
to those expected by the constructor

163
00:10:37,860 --> 00:10:40,080
we wish to call.

164
00:10:40,080 --> 00:10:43,871
For example, in this "Rectangle" class,
we have an explicit constructor

165
00:10:43,871 --> 00:10:45,319
with two parameters.

166
00:10:45,319 --> 00:10:49,603
We can define the default constructor
using this first definition

167
00:10:49,603 --> 00:10:51,853
of the constructor.

168
00:10:51,853 --> 00:10:54,801
Here, the default constructor, through
this "this" instruction,

169
00:10:54,801 --> 00:11:00,439
summons the constructor expecting
two parameters -this one-

170
00:11:01,379 --> 00:11:05,867
providing, for the first parameter,
the value 0.0

171
00:11:05,867 --> 00:11:08,875
and 0.0 aswell for the
second parameter.

172
00:11:10,072 --> 00:11:12,653
This is an elegant twist permitting,
in many a case,

173
00:11:12,653 --> 00:11:15,051
to avoid duplicating code.

174
00:11:15,051 --> 00:11:19,621
But please note that there can
only be one "this" instruction

175
00:11:19,621 --> 00:11:23,630
in a constructor. Also, this
"this" instruction

176
00:11:23,630 --> 00:11:26,317
must be the very first summoned
instruction.

177
00:11:26,317 --> 00:11:29,680
We cannot put any other instruction
before the "this".

178
00:11:29,920 --> 00:11:34,478
It is also possible, in Java,
to give default values to

179
00:11:34,478 --> 00:11:37,524
the attributes, without passing
by the constructor.

180
00:11:37,684 --> 00:11:41,227
This is done upon the declaration
of the attribute.

181
00:11:41,227 --> 00:11:44,156
Here, for example, when we
declare the "hauteur" attribute,

182
00:11:44,156 --> 00:11:47,819
we give it a default value : 1.0

183
00:11:48,515 --> 00:11:53,368
Now, we summon the default
constructor of the class

184
00:11:53,368 --> 00:11:56,133
with such a familiar instruction.

185
00:11:57,040 --> 00:11:58,604
Like this.

186
00:12:01,100 --> 00:12:03,795
In the default constructor, there is
no value

187
00:12:03,795 --> 00:12:06,554
explicitly assigned to "hauteur"
or "largeur".

188
00:12:06,554 --> 00:12:09,413
Therefore, the default values
will be taken.

189
00:12:09,724 --> 00:12:13,771
After the constructor, we will have
an object in the memory.

190
00:12:17,960 --> 00:12:23,394
A "Rectangle"-type object.
Its height has been

191
00:12:23,394 --> 00:12:26,941
initialized to the default
value here : 1.0

192
00:12:28,883 --> 00:12:30,913
The same goes for the width.

193
00:12:34,114 --> 00:12:38,500
Let us now imagine that the default
constructor, instead of having an empty body,

194
00:12:38,500 --> 00:12:42,359
initializes only the width member

195
00:12:42,359 --> 00:12:43,977
to, for example, 3.0

196
00:12:43,977 --> 00:12:50,089
After the constructor of a
rectangle with this

197
00:12:50,089 --> 00:12:52,942
default constructor, we
will have, in the memory,

198
00:12:52,942 --> 00:13:00,315
a "Rectangle"-type object.
Of course, the "hauteur" member

199
00:13:01,652 --> 00:13:04,886
will have been initialized
to this value 3.0

200
00:13:06,007 --> 00:13:12,619
And since the "hauteur" member does
not receive any explicit

201
00:13:12,619 --> 00:13:15,633
value in the constructor,
it will take the default value

202
00:13:15,633 --> 00:13:20,074
specified upon the declaration
of the attribute,

203
00:13:20,411 --> 00:13:22,273
that is, 1.0

204
00:13:22,811 --> 00:13:25,411
Please note that, in order to make
your programming intentions clear,

205
00:13:25,411 --> 00:13:28,679
it is recommanded to initialize
the attributes in the constructors

206
00:13:28,679 --> 00:13:31,073
instead of resorting to this
kind of twist.

207
00:13:31,673 --> 00:13:33,911
Indeed, if each of the constructors
is tasked with all the

208
00:13:33,911 --> 00:13:38,306
necessary initializations, it is possible
to understand what are

209
00:13:38,306 --> 00:13:43,000
the realized initializations merely upon
the reading of these constructors.

210
00:13:43,000 --> 00:13:45,846
It is not necessary to search everywhere
in the class

211
00:13:45,846 --> 00:13:49,682
for other implicit initializations.

212
00:13:50,310 --> 00:13:53,288
Voilà! We have no concluded this
sequence on the default constructors.

213
00:13:53,288 --> 00:13:56,348
We will go back to them

214
00:13:56,348 --> 00:13:59,692
in later episodes on the inheritance.
In the meantime, you will discover

215
00:13:59,692 --> 00:14:02,662
other possible ways to build
an object through the

216
00:14:02,662 --> 00:14:04,142
copy constructors.
