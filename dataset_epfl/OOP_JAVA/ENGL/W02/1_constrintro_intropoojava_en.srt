1
00:00:03,973 --> 00:00:06,989
In the previous episodes, we have learnt
how to declare classes

2
00:00:06,989 --> 00:00:10,667
and objects, that is, class instances.

3
00:00:10,667 --> 00:00:14,919
For example, in order to declare a "rect"
instance of the "Rectangle" class,

4
00:00:14,919 --> 00:00:20,099
we will write "Rectangle rect; ".
Now, we could wonder

5
00:00:20,099 --> 00:00:23,427
how to give other values for the
default variables

6
00:00:23,427 --> 00:00:27,515
(which is 0) to the attributes of
our rect instance. For example,

7
00:00:27,515 --> 00:00:31,830
the attributes "hauteur" and "largeur"
(TN: "hauteur" means "height", "largeur" means "width").

8
00:00:31,830 --> 00:00:35,941
Even better, we would like to initialize,
namely give an initial value of "rect"'s creation,

9
00:00:35,941 --> 00:00:40,737
to the "hauteur" and "largeur" attributes.
Of course, we could resort to

10
00:00:40,737 --> 00:00:44,740
the setter "setHauteur" and "setLargeur",
thus assigning

11
00:00:44,740 --> 00:00:49,560
individually, one after the other, values
for each attribute. For example,

12
00:00:49,560 --> 00:00:53,402
here, we have declared a "rect" instance
of the "Rectangle" class.

13
00:00:53,402 --> 00:00:58,350
We have prevously declared a double "lu" and
ask the user to enter

14
00:00:58,350 --> 00:01:04,018
the height on the keyboard. Then, through
the setter "setHateur", we will assign

15
00:01:04,018 --> 00:01:07,900
the value read from the keyboard in "lu"
to the height of the "rect" instance.

16
00:01:07,900 --> 00:01:13,873
Similarly, via user interaction, we will
assign the value of "lu"

17
00:01:13,873 --> 00:01:18,653
to the width of the "rect" instance.
Obviously, this is a very poor

18
00:01:18,653 --> 00:01:23,405
solution in the general case. Indeed, this
will either require for each attribute

19
00:01:23,405 --> 00:01:28,109
to be part of the interface (which  will
break the encapsulation

20
00:01:28,109 --> 00:01:31,811
as we have seen in last week's 
episodea)

21
00:01:31,811 --> 00:01:35,817
or for us to have a setter for
attribute.

22
00:01:35,817 --> 00:01:41,258
This itself translates how the class
has been implemented

23
00:01:41,258 --> 00:01:46,372
and breaks the encapsulation since we
need a setter for each

24
00:01:46,372 --> 00:01:50,355
attribute. The goal of this encapsulation
is precisely to clearly separate

25
00:01:50,355 --> 00:01:53,978
the interface from the implementation.
If we had, for each attribute,

26
00:01:53,978 --> 00:01:57,374
a setter in the interface,  the
implementation choices would

27
00:01:57,374 --> 00:02:01,270
spill over the inteface. In that way

28
00:02:01,270 --> 00:02:06,220
does it break the encapsulation. Moreover,
we are bestowing the responsability

29
00:02:06,220 --> 00:02:10,531
to initialize the attributes on the
programmer-user of the class.

30
00:02:10,531 --> 00:02:15,439
This begets the risk of omissions.
It is the duty of the programmer-developper

31
00:02:15,439 --> 00:02:20,189
to initialize the attributes
or offer

32
00:02:20,189 --> 00:02:25,333
an interface permitting the initialization
of a few carefully selected attributes

33
00:02:25,333 --> 00:02:29,378
for the programmer-user of the class.
So far, every time we have

34
00:02:29,378 --> 00:02:33,833
indentified a specific task, we created
a specific method dedicated to this task.

35
00:02:33,833 --> 00:02:38,238
Right now, this task is the initialization.
A solution is thus to create

36
00:02:38,238 --> 00:02:43,175
a method dedicated to the
initialization. For example,

37
00:02:43,175 --> 00:02:48,447
an "init" method, here. Of course, we will
offer it in the interface

38
00:02:48,447 --> 00:02:51,441
so that programmer-users of the class
may use it.

39
00:02:51,441 --> 00:02:54,803
This "init" method will thus be tasked
to initialized the two

40
00:02:54,803 --> 00:02:57,488
attributes "hauteur" and "largeur".
To that end, it will receive two values

41
00:02:57,488 --> 00:03:04,404
"h" and "l" to initialize the
height and the width respectively.

42
00:03:04,404 --> 00:03:09,901
Typically, we would use this newly-
created initialization method

43
00:03:09,901 --> 00:03:13,493
like this. We will declare a "rect"
instance of the "Rectangle"

44
00:03:13,493 --> 00:03:19,412
class. Then, we will call the "init" method
in order to initialize,

45
00:03:19,412 --> 00:03:26,113
for example, the height to 3 and
the width to 4.

46
00:03:26,113 --> 00:03:29,198
This is definitely not a poor solution.
Actually, this is such a good solution

47
00:03:29,198 --> 00:03:32,608
that the Java language offers a way to do
so properly.

48
00:03:32,608 --> 00:03:36,393
Namely, letting us do a true
initialization. Such methods,

49
00:03:36,393 --> 00:03:40,842
tasked with the instance initialization
are called constructors.

50
00:03:41,598 --> 00:03:44,943
A constructor is a method which is systematically
called upon

51
00:03:44,943 --> 00:03:50,040
an object's declaration. In other words,
it is called when an instance is born.

52
00:03:50,040 --> 00:03:53,687
Its task is thus to do whatever is
necessary for the beginning of

53
00:03:53,687 --> 00:03:57,717
an instance's life -particularly
initializing its attributes.

54
00:03:58,019 --> 00:04:02,464
In order to declare a constructor, we
simply need to add a method

55
00:04:02,464 --> 00:04:07,130
which name is none other than the name of
the class. Then, follow the possible parameters

56
00:04:07,130 --> 00:04:10,976
required for the initialization. As usual,
the definition of the metod

57
00:04:10,976 --> 00:04:15,093
then follows.
For example, for the "Rectangle" class,

58
00:04:15,093 --> 00:04:18,909
we will define a "Rectangle" method
(the same is the same as the class)

59
00:04:18,909 --> 00:04:24,641
which is thus a constructor.
It receives two parameters "h" and "l"

60
00:04:24,641 --> 00:04:29,791
in order to initialize, in the body
of this method,

61
00:04:29,791 --> 00:04:34,044
the attributes "hauteur" and "largeur"
respectively.

62
00:04:34,044 --> 00:04:37,366
Constructors are very similar to your
average methods.

63
00:04:37,366 --> 00:04:40,547
There are however three differences!
First of all, a constructor

64
00:04:40,547 --> 00:04:42,229
has no return type.

65
00:04:42,229 --> 00:04:46,202
We have no written anything here, not even "void";
this means that the constructor

66
00:04:46,202 --> 00:04:50,429
has no return type at all.
The second difference is that

67
00:04:50,429 --> 00:04:54,452
the constructor MUST have a name
identical to the name

68
00:04:54,452 --> 00:04:58,345
of the class. Finally, a constructor will
systematically be called

69
00:04:58,345 --> 00:05:02,437
every time a new instance is
created. It is called with a syntax

70
00:05:02,437 --> 00:05:04,740
we will detail in an instant.

71
00:05:04,740 --> 00:05:06,906
These are the differences.
However, constructors can,

72
00:05:06,906 --> 00:05:09,843
like other methods, be
overloaded.

73
00:05:09,843 --> 00:05:12,780
This means that we will have

74
00:05:12,780 --> 00:05:15,718
several different parameter lists
for different constructors.

75
00:05:15,718 --> 00:05:20,059
We may thus have several constructors.
We will go back

76
00:05:20,059 --> 00:05:23,295
to this point later. For now,
we merely wish to stretch

77
00:05:23,295 --> 00:05:26,448
that we talking about the
possible constructorS for a class.

78
00:05:26,448 --> 00:05:29,134
There is not necessarily a
unique constructor.

79
00:05:29,134 --> 00:05:31,206
Let us go back to our
starting example

80
00:05:31,206 --> 00:05:33,441
and see how this is
concretely written.

81
00:05:33,441 --> 00:05:36,475
We will declare only one constructor
in our "Rectangle" class.

82
00:05:36,475 --> 00:05:40,515
To that end, we will declare the
"Rectangle" class as usual.

83
00:05:40,515 --> 00:05:45,778
Its attributes "hauteur" and "largeur"
are in the private parts.

84
00:05:45,778 --> 00:05:50,166
As usual, the different setters,
getters and methods

85
00:05:50,166 --> 00:05:54,588
we have decided to put
in the interface.

86
00:05:54,588 --> 00:05:57,813
However, we have now added
a constructor.

87
00:05:57,813 --> 00:06:03,861
This constructor is a method with the
same name as the class.

88
00:06:03,861 --> 00:06:08,181
Of course, this constructor must be part
of the interface since its goal is

89
00:06:08,181 --> 00:06:11,670
to be called by  the people
using the class.

90
00:06:11,670 --> 00:06:15,384
It needs to be accessible from
outiside the class.

91
00:06:15,384 --> 00:06:19,148
In this case, it receives two parameter:
"h" and "l"

92
00:06:19,148 --> 00:06:23,751
in order to initialize the "hauteur"
attribute and

93
00:06:23,751 --> 00:06:25,809
the "largeur" attribute.

94
00:06:26,625 --> 00:06:30,052
Let us now see a constructor is called.
That is, how will we declare

95
00:06:30,052 --> 00:06:34,150
an instance which we will declare an
initialize at the same time.

96
00:06:34,150 --> 00:06:37,785
To that end, we will resort to a
usual declaration of a certain

97
00:06:37,785 --> 00:06:41,275
class' instance here. This declaration
will be followed by

98
00:06:41,275 --> 00:06:46,209
" = new ", name of the class. This here, will
be a call to the constructor to which

99
00:06:46,209 --> 00:06:48,609
we pass, between parentheses, the
different parameters

100
00:06:48,609 --> 00:06:51,009
necessary for the constructor.

101
00:06:51,009 --> 00:06:53,410
Here, in the example of our "Rectangle"
clsss, we will declare

102
00:06:53,410 --> 00:06:59,534
an "r1" instance of the "Rectangle" class,
" = new ", call to the "Rectangle" constructor

103
00:06:59,534 --> 00:07:02,301
which takes two parameters here.

104
00:07:02,301 --> 00:07:06,693
Concretely, in this example we are following
from the start,

105
00:07:06,693 --> 00:07:10,446
we thus have the "Rectangle" class with,
here, in public, a constructor

106
00:07:10,446 --> 00:07:14,475
taking two parameters. It will be responsible
to initialize the parameters

107
00:07:14,475 --> 00:07:18,842
"largeur" and "hauteur" of the class.
For example,

108
00:07:18,842 --> 00:07:22,719
here, in the class "Example" where
we have the "main" we will declare

109
00:07:22,719 --> 00:07:28,537
an "rect1" instance of the "Rectangle" class.
We initialize it directly

110
00:07:28,537 --> 00:07:34,341
through a call to the constructor. We pass
the value 3 to the parameter "h"

111
00:07:34,341 --> 00:07:39,004
in order to store it in "hauteur" and the
value 4 to the parameter "l"

112
00:07:39,004 --> 00:07:41,003
in order to store it in the "largeur"
of "rect1".

113
00:07:42,005 --> 00:07:48,289
Concretely, the following will happen
in the memory. "rect1" is thus

114
00:07:48,289 --> 00:07:56,485
a reference on a rectangle. Upon this
"new Rectangle" instruction, we will indeed

115
00:07:56,485 --> 00:08:02,076
create an "Rectangle" instance in the 
memory with these two

116
00:08:02,076 --> 00:08:08,775
parameter "hauteur" and "largeur".
The call to the constructor, here, will thus

117
00:08:08,775 --> 00:08:13,325
initialize these to the values 3 and 4.

118
00:08:13,325 --> 00:08:16,620
Voilà! This concludes our introductory
sequence on the constructors.

119
00:08:16,620 --> 00:08:19,883
We still have a lot to tell you, though.
For example, we will discuss

120
00:08:19,883 --> 00:08:23,193
the default constructor, which
is unique. We will discuss

121
00:08:23,193 --> 00:08:28,109
the copy constructor and see
what happens at the end of an object's life.

122
00:08:28,109 --> 00:08:32,613
And we will see how to compare
different objects.

123
00:08:32,613 --> 00:08:34,486
This will be the subject of the
following episodes.
