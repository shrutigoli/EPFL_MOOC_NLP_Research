1
00:00:04,300 --> 00:00:06,900
We'll see how to work with vectors and
matrices.

2
00:00:06,990 --> 00:00:10,280
First, we will see sum and multiplication
applications

3
00:00:10,360 --> 00:00:12,310
are defined as in mathematics.

4
00:00:12,780 --> 00:00:16,170
In addition, it is possible to do
operations element by element.

5
00:00:21,070 --> 00:00:23,310
Consider first the basic vector
operations.

6
00:00:23,950 --> 00:00:27,760
You can define vectors, e.g columns.

7
00:00:28,700 --> 00:00:35,490
I need the equal symbol to define
the variable and then

8
00:00:35,490 --> 00:00:44,740
brackets to enter the values ​​of this
vector.

9
00:00:47,940 --> 00:00:52,820
So then I hit enter, the vector is
defined and I

10
00:00:52,750 --> 00:00:57,880
can see the form. This vector is a
2, 4, 5 columns.

11
00:00:58,290 --> 00:01:01,200
I can also set row vectors.

12
00:01:04,170 --> 00:01:06,110
The syntax is very similar.

13
00:01:06,510 --> 00:01:08,170
I also use brackets.

14
00:01:07,760 --> 00:01:13,010
I have minus 2. I put a comma instead
of the semicolon,

15
00:01:13,120 --> 00:01:20,100
3.4 and I close the brackets.

16
00:01:25,490 --> 00:01:28,670
On my keyboard, there are no brackets.

17
00:01:29,070 --> 00:01:36,260
They are here on the 5 and 6.

18
00:01:37,430 --> 00:01:40,470
So maybe we can see them when we

19
00:01:40,460 --> 00:01:44,580
look for them on the keyboard.
We can also define a copy of a vector.

20
00:01:45,170 --> 00:01:49,530
For example, V can equal my vector
lines we saw earlier.

21
00:01:57,030 --> 00:02:04,820
I can see the size of this vector V which is a 1 by 3 vector.

22
00:02:05,630 --> 00:02:08,490
So 1 row 3 columns.

23
00:02:09,470 --> 00:02:16,810
While the size of the columns vector
is 3 by1.

24
00:02:17,820 --> 00:02:22,370
I can also define vectors by
concatenation.

25
00:02:23,120 --> 00:02:28,500
For example, I can set a vector A
which is equal to the vector

26
00:02:28,500 --> 00:02:36,230
ranging from minus 1 to 4 which is
distributed.

27
00:02:36,220 --> 00:02:41,980
It means that the distance between
a value and the other is always the same.

28
00:02:42,310 --> 00:02:43,460
Here default is 1.

29
00:02:44,850 --> 00:02:49,970
I can also define a vector B that is
distributed, but with

30
00:02:49,970 --> 00:02:52,710
a distance of 2 between the elements.

31
00:02:52,830 --> 00:03:00,170
So for example, minus 0.5 in steps of 2
to get to

32
00:03:00,280 --> 00:03:01,970
For example, 3

33
00:03:06,650 --> 00:03:10,600
We see there is only minus 0.5 and 1.5.

34
00:03:14,880 --> 00:03:22,060
If I go up to 5, the last entry will
be 3.5.

35
00:03:22,060 --> 00:03:26,910
Why? Because 5 is the upper limit, but

36
00:03:27,010 --> 00:03:36,660
not always reached. If I write that B is
minus 0.5 to 3.5

37
00:03:36,660 --> 00:03:40,190
in steps of 2, I get the same thing.

38
00:03:41,800 --> 00:03:45,540
Each time, we redefine the variable B.

39
00:03:46,860 --> 00:03:52,290
When I do B equal, I will crush
the existing value

40
00:03:52,350 --> 00:03:56,330
already in B, the last one I defined will

41
00:03:56,330 --> 00:03:57,040
remain in the memory.

42
00:03:58,860 --> 00:04:03,370
There is another way to define
equidistributed vectors

43
00:04:03,380 --> 00:04:08,700
it is with the In space,C equals Inspace.

44
00:04:09,490 --> 00:04:13,180
So then I make sure I have the range
I want.

45
00:04:13,160 --> 00:04:20,220
For example between 2.1 and 4.2 and
I want 4 elements.

46
00:04:21,800 --> 00:04:24,710
So I am sure I have 4 elements, the
first and

47
00:04:24,710 --> 00:04:27,620
last are given and those in the middle
are calculated automatically.

48
00:04:29,670 --> 00:04:35,250
We can manipulate vectors by a
concatenation

49
00:04:35,250 --> 00:04:37,980
that is to say, put them together,
extract some or

50
00:04:38,250 --> 00:04:40,220
also transpose a vector.

51
00:04:41,320 --> 00:04:44,990
First, clean up our environment with
clear all.

52
00:04:46,300 --> 00:04:49,370
I erase all the variables that I have in
my environment.

53
00:04:49,850 --> 00:04:54,990
Now, I define a new variable, eg A

54
00:04:57,140 --> 00:05:02,050
which was equal to minus 1 to 5.

55
00:05:04,200 --> 00:05:12,360
Now if I type enter A will be displayed
on the screen.

56
00:05:12,360 --> 00:05:17,150
I did not want to see each time what
I just typed

57
00:05:17,530 --> 00:05:21,760
then I do the semicolon like that
the variable is defined,

58
00:05:21,970 --> 00:05:25,420
it has the values ​​I expect, but isn't

59
00:05:25,420 --> 00:05:26,680
displayed again on the screen.

60
00:05:26,600 --> 00:05:40,680
I define a second vector which goes
from 0.5 with a step of 1.4 up to 6.

61
00:05:46,170 --> 00:05:51,030
And again, I do not want to see
the content.

62
00:05:50,740 --> 00:06:00,370
And I want to put together the vectors
A and B in a single vector line.

63
00:06:00,280 --> 00:06:09,500
I need to new brackets and I put
A and B following.

64
00:06:12,740 --> 00:06:18,920
I have a vector line consisting of
8 columns with the first

65
00:06:18,920 --> 00:06:20,700
inputs A and then B.

66
00:06:23,500 --> 00:06:28,550
Now I can extract values ​​of this vector.

67
00:06:28,820 --> 00:06:34,020
For example, I want the third value
so I do C 3.

68
00:06:35,170 --> 00:06:40,020
If I want more values once, I can take

69
00:06:40,580 --> 00:06:43,560
and I can even put them in another vector.

70
00:06:44,510 --> 00:06:50,970
So I can have the vector X
that is equal to some entries

71
00:06:50,970 --> 00:06:58,960
C, for example I want the inputs
2, 4 and 5.

72
00:06:58,960 --> 00:07:05,140
I can even take another value,
the first, won't

73
00:07:05,140 --> 00:07:10,250
be in the same order and
I retrieve these indexes then C.

74
00:07:11,830 --> 00:07:15,700
That's my new vector it is always a vector line

75
00:07:16,210 --> 00:07:19,310
but with only some entries of C.

76
00:07:22,600 --> 00:07:33,290
A column vector can be transposed to a row vector.

77
00:07:34,620 --> 00:07:44,120
If I do X with this symbol, it is a small
symbol that ressembles

78
00:07:44,120 --> 00:07:48,240
a derivative function, but is not at all

79
00:07:48,350 --> 00:07:51,270
the derivative is the transpose.

80
00:07:53,260 --> 00:07:55,420
The vector lines now is a column vector.

81
00:07:57,650 --> 00:08:01,180
Let's now see sum and scalar
multiplication.

82
00:08:02,480 --> 00:08:08,640
I clean my environment again and
I define two vectors.

83
00:08:09,370 --> 00:08:12,460
This time, I take a little smaller vectors

84
00:08:12,460 --> 00:08:16,510
column vectors with  3 entries.

85
00:08:19,240 --> 00:08:22,450
I separate with a semicolon because
I want them in columns.

86
00:08:22,430 --> 00:08:25,960
Think of the semicolon like going
to the line.

87
00:08:29,140 --> 00:08:34,290
I defined A and B in the second vector.

88
00:08:39,520 --> 00:08:44,440
I define the same size because
I'm going to work with

89
00:08:46,970 --> 00:08:52,290
A and B together, do the sum,
they should be

90
00:08:52,510 --> 00:09:00,740
the same size. If I make C equal to
A plus B, I get a

91
00:09:00,960 --> 00:09:04,490
vector which has the same size as
A and B of which the entries

92
00:09:04,490 --> 00:09:09,420
are the sum of the inputs A and B.

93
00:09:09,410 --> 00:09:13,860
Here I multiply by a scalar by a number
so I will

94
00:09:13,860 --> 00:09:20,990
take 3.2 times the vector A.

95
00:09:23,090 --> 00:09:31,530
I get less than 9, 6; 6,4; 3, 2, the A
inputs multiplied by 3,2.

96
00:09:32,780 --> 00:09:36,220
So as I said the sizes of the vectors
must be

97
00:09:36,370 --> 00:09:38,360
the same if we want the sum

98
00:09:39,010 --> 00:09:43,500
If I have a vector that is too long,
for example, I take

99
00:09:44,600 --> 00:09:53,200
along vector which is equal to
concatenation of A and B, here

100
00:09:53,360 --> 00:09:57,920
I have to take A semicolon B,
I'll concatenate A and B

101
00:09:58,480 --> 00:10:04,240
a single column. And then I do the sum
of A and

102
00:10:04,240 --> 00:10:11,290
this new vector, I'll get an error
because the vectors

103
00:10:12,140 --> 00:10:14,820
are not compatible, do not have the
same size.

104
00:10:14,820 --> 00:10:21,260
There is a particular vector the
zero vector.

105
00:10:21,570 --> 00:10:27,640
I define a new variable zero vector
that is set

106
00:10:27,640 --> 00:10:34,910
as size 0 4,1.

107
00:10:35,540 --> 00:10:37,470
What does that mean?

108
00:10:37,820 --> 00:10:44,040
I have a column vector with 4 inputs
all equal to 0.

109
00:10:44,490 --> 00:10:50,150
I can also define a vector of 1,
this time, I will

110
00:10:50,150 --> 00:10:52,020
take the vector lines.

111
00:10:52,500 --> 00:10:58,090
So I can point 1,4 and I get a vector
lines

112
00:11:01,400 --> 00:11:03,740
with 4 inputs all equal to 1.

