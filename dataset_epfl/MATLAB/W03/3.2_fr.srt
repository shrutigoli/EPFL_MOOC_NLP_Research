1
00:00:04,160 --> 00:00:07,310
L'écriture et la lecture d'un
fichier est souvent nécessaire

2
00:00:07,310 --> 00:00:09,250
afin de lire ou de
transférer des données.

3
00:00:09,570 --> 00:00:12,220
Nous n'allons pas voir toutes les
possibilités, mais nous concentrer

4
00:00:12,220 --> 00:00:12,960
sur l'essentiel.

5
00:00:14,080 --> 00:00:17,780
Nous allons d'abord voir comment
sauvegarder l'état de l'espace

6
00:00:17,780 --> 00:00:20,910
de travail ou seulement quelques
variables pour les récupérer

7
00:00:20,910 --> 00:00:21,820
à un moment ultérieur.

8
00:00:22,310 --> 00:00:25,620
Ensuite nous allons voir l'écriture
de fichiers un peu plus complexes.

9
00:00:25,990 --> 00:00:29,560
Voyons d'abord comment
sauvegarder notre espace.

10
00:00:31,170 --> 00:00:44,880
Par exemple, je prends deux
variables A et B, deux matrices.

11
00:00:45,750 --> 00:00:48,390
B, par exemple, qui est
égal juste à deux fois a.

12
00:00:51,240 --> 00:00:58,060
Et maintenant je vais les
sauvegarder sur un fichier MATLAB

13
00:00:59,690 --> 00:01:01,260
que j'appelle workspace. mat.

14
00:01:01,850 --> 00:01:05,500
Ici, l'extension est mat, n'est pas M.

15
00:01:07,520 --> 00:01:11,330
C'est un fichier
binaire, on l’appelle.

16
00:01:11,650 --> 00:01:14,280
mat parce qu'on reconnaît
que c'est ce format matlab.

17
00:01:15,020 --> 00:01:18,950
Cela est valable quand on
travaille sur MATLAB ou Octave.

18
00:01:19,710 --> 00:01:23,340
C'est un fichier qu'on appelle
en format binaire matlab.

19
00:01:25,500 --> 00:01:28,040
Maintenant, je nettoie
à nouveau mon espace.

20
00:01:29,290 --> 00:01:39,130
Il n'y a plus de variable dans mon
environnement et je recharge mon fichier.

21
00:01:41,010 --> 00:01:43,020
Je regarde les données.

22
00:01:43,890 --> 00:01:45,740
Il y a A et B qui sont réapparues.

23
00:01:47,270 --> 00:01:52,770
A à la valeur qu'on a donnée
au début à cette matrice.

24
00:01:54,550 --> 00:02:03,710
Maintenant, je peux renettoyer et
 charger seulement la variable

25
00:02:03,730 --> 00:02:05,490
A de workspace. mat.

26
00:02:05,490 --> 00:02:11,810
À ce moment-là, il n'y a plus que
la variable A qui est chargée.

27
00:02:12,760 --> 00:02:16,210
Si vous préférez sauvegarder vos
variables dans le fichier texte

28
00:02:16,980 --> 00:02:20,890
plutôt que sauvegarder dans un
format matlab binaire, on fait

29
00:02:20,890 --> 00:02:22,540
une sauvegarde en format ASCII.

30
00:02:24,250 --> 00:02:29,010
Pour cela, il faut donner la
commande save, maintenant avec

31
00:02:29,480 --> 00:02:36,390
l'option - ascii et donner le nom d'un
fichier texte dans lequel sauvegarder.

32
00:02:37,730 --> 00:02:42,210
La différence avec la sauvegarde
d’un fichier matlab, c'est

33
00:02:42,210 --> 00:02:44,240
qu'ici on peut sauvegarder
une seule variable.

34
00:02:44,230 --> 00:02:47,460
C'est pour ça que j'ai donné le
nom 1var, et du coup, il faut

35
00:02:47,460 --> 00:02:49,520
dire quelle variable
on veut sauvegarder.

36
00:02:50,660 --> 00:02:54,080
Maintenant, je nettoie mon environnement,
il n'y a plus de variable.

37
00:02:55,030 --> 00:03:02,350
Et je charge le fichier que je
viens d'écrire: load 1var.

38
00:03:03,650 --> 00:03:07,570
txt et une nouvelle
variable a été créée.

39
00:03:07,810 --> 00:03:10,510
Une variable qui s'appelle
comme notre fichier.

40
00:03:11,030 --> 00:03:13,430
Là-dedans, il y a la
matrice A originale.

41
00:03:14,620 --> 00:03:19,960
Si je veux donner le nom A à
cette nouvelle variable, je dois

42
00:03:19,960 --> 00:03:23,950
plutôt appeler load comme fonction.

43
00:03:24,310 --> 00:03:28,580
Donc, c'est load, le
nom du fichier, 1var.

44
00:03:29,080 --> 00:03:34,110
txt et puis je termine
l'appel à cette fonction.

45
00:03:34,840 --> 00:03:39,730
Maintenant, la seule variable
que j'ai, c'est A et sa valeur

46
00:03:40,140 --> 00:03:42,200
c'est la matrice qu'on avait avant.

47
00:03:42,370 --> 00:03:43,930
Ce fichier texte 1var.

48
00:03:43,650 --> 00:03:49,240
txt, peut être modifié à l'aide
d'un éditeur commun ou peut

49
00:03:49,240 --> 00:03:54,870
aussi être le résultat de calculs
qui viennent de notre logiciel

50
00:03:55,120 --> 00:03:56,090
ou même d'un autre ordinateur.

51
00:03:57,330 --> 00:04:01,160
Donc, vous avez un fichier txt
et vous pouvez le charger dans

52
00:04:01,640 --> 00:04:04,490
votre environnement à l'aide
de la commande load.

53
00:04:04,410 --> 00:04:10,150
Ce qui est essentiel, c'est que le
fichier est formaté comme une matrice.

54
00:04:10,600 --> 00:04:14,360
Donc, si on regarde la première
ligne, il y aura un certain

55
00:04:14,360 --> 00:04:17,480
nombre des nombres, donc disons 5.

56
00:04:17,830 --> 00:04:20,660
Maintenant sur chaque ligne
successive, il doit aussi y avoir

57
00:04:20,840 --> 00:04:24,710
5 valeurs indiquées sinon
load ne va pas marcher.

58
00:04:25,340 --> 00:04:28,900
Si vous voulez écrire des textes
plus élaborés sur un fichier

59
00:04:28,900 --> 00:04:32,560
texte, on peut utiliser les
commandes fopen, fprintf ou fclose.

60
00:04:33,050 --> 00:04:37,760
Elles fonctionnent de manière
un peu plus complexe, donc je

61
00:04:37,760 --> 00:04:43,420
vous conseille de regarder l'aide
de ces fonctions, donc help

62
00:04:43,460 --> 00:04:47,810
fopen, fprintf ou regarder sur
internet pour des exemples.

63
00:04:48,410 --> 00:04:52,780
Ici, je vous donne juste un exemple
simple d'utilisation, donc

64
00:04:52,780 --> 00:04:57,740
si on veut écrire dans un fichier
plus que juste une matrice,

65
00:04:58,100 --> 00:05:05,150
il faut d'abord ouvrir un fichier,
et pour l'ouvrir, il faut

66
00:05:05,150 --> 00:05:06,780
utiliser la fonction fopen.

67
00:05:07,730 --> 00:05:09,310
La fonction fopen a deux sorties.

68
00:05:09,840 --> 00:05:15,310
On verra plus loin, qu’est-ce que ça veut
dire 1 ou 2 sorties d'une fonction.

69
00:05:15,330 --> 00:05:18,490
En tout cas, la syntaxe est comme ça.

70
00:05:18,660 --> 00:05:23,770
On a 2 sorties pour la fonction
fopen et la fonction fopen a

71
00:05:23,770 --> 00:05:30,710
deux arguments: un, c'est le
fichier qu’on va écrire et l'autre

72
00:05:30,850 --> 00:05:31,770
qu'est-ce qu'on veut en faire.

73
00:05:31,900 --> 00:05:34,380
Nous, on veut écrire w comme write.

74
00:05:34,560 --> 00:05:40,690
Maintenant, dans fileID (Message),
il y a le résultat de l'ouverture,

75
00:05:40,720 --> 00:05:43,760
ce fileID c'est
l'identifiant du fichier.

76
00:05:43,860 --> 00:05:49,290
Comme ça maintenant, si on veut
écrire quelque chose sur ce

77
00:05:49,290 --> 00:05:49,960
fichier, on aura le droit.

78
00:05:50,850 --> 00:05:54,530
Avec la fonction fprintf,'il
faut donner cet ID, il ne faut

79
00:05:54,530 --> 00:05:58,910
pas donner le nom du fichier,
mais l'identifiant du fichier.

80
00:06:00,550 --> 00:06:05,620
Et ensuite, on peut écrire le
message qu'on veut sur ce fichier.

81
00:06:05,930 --> 00:06:09,800
Par exemple, je commence
par aller à la ligne.

82
00:06:10,080 --> 00:06:17,660
Aller à la ligne, c'est un \n, ensuite
texte bonjour, on est en 2016.

83
00:06:18,660 --> 00:06:24,880
Et je donne l'année comme un nombre
à la fin qui pourrait être

84
00:06:24,850 --> 00:06:25,750
dans une variable.

85
00:06:28,170 --> 00:06:31,110
Et quelle température il fait.

86
00:06:34,830 --> 00:06:39,660
Alors, on veut donner un nombre
avec virgule, donc ce nombre

87
00:06:39,660 --> 00:06:43,780
va occuper 3 places dont une
place après la virgule.

88
00:06:43,840 --> 00:06:46,330
Et après, j'écris degrés.

89
00:06:50,380 --> 00:06:55,820
Et maintenant, il faut donner le
nombre qu'on veut imprimer.

90
00:06:55,870 --> 00:07:02,630
Donc, c'est le 2016 et
la température 4.

91
00:07:02,730 --> 00:07:03,390
5 degrés.

92
00:07:04,090 --> 00:07:08,130
Et après, je peux fermer le fichier.

93
00:07:13,470 --> 00:07:17,030
Maintenant, je peux regarder ce
qu'il a écrit dans mon fichier.

94
00:07:17,620 --> 00:07:20,720
Par exemple, si je veux juste
regarder, j'utilise la commande

95
00:07:20,720 --> 00:07:24,550
(inaudible) avant et je dois
donner le nom du fichier.

96
00:07:26,390 --> 00:07:30,850
On voit dans le fichier écrit:
bonjour on est en 2016 et il fait 4.

97
00:07:31,470 --> 00:07:32,080
5 degrés.

98
00:07:32,680 --> 00:07:37,230
La commande fprintf imprime
quelque chose dans le fichier.

99
00:07:37,310 --> 00:07:41,450
On peut aussi imprimer directement
sur une chaîne de caractères,

100
00:07:42,060 --> 00:07:46,500
donc sur un string avec la
commande qui s'appelle sprintf.

101
00:07:47,660 --> 00:07:53,090
Par contre, elle ne prend pas
l'identifiant pour le fichier

102
00:07:53,130 --> 00:07:54,660
puisqu'elle va imprimer à l'écran.

103
00:07:55,420 --> 00:07:58,880
On a exactement le même
message que tout à l'heure.

104
00:07:59,470 --> 00:08:04,500
Alors pourquoi j'introduis cette
variable aussi, c'est dans

105
00:08:04,500 --> 00:08:07,620
le cas où je veux à la place
d'utiliser 2016 et 4.

106
00:08:07,940 --> 00:08:12,340
5, je vais utiliser les valeurs qui
sont dans une variable spécifique.

107
00:08:14,500 --> 00:08:20,020
Par exemple, cette variable var,
j'ai 2016 et puis la température

108
00:08:20,020 --> 00:08:23,190
qui, peut-être, a été
calculée d'une autre façon.

109
00:08:23,630 --> 00:08:27,590
Alors à ce moment-là, je peux à
la place de donner une nouvelle

110
00:08:27,590 --> 00:08:29,300
matrice ici, je donne la variable var.

111
00:08:30,310 --> 00:08:35,810
L’effet est exactement le même.

112
00:08:36,200 --> 00:08:38,950
Le plus souvent, l'écriture et la
lecture d'un fichier s'avèrent

113
00:08:38,950 --> 00:08:39,640
plus compliquées.

114
00:08:39,680 --> 00:08:41,840
Ici, on a vu vraiment les bases.

115
00:08:42,370 --> 00:08:45,050
Néanmoins avec les notions apprises,
vous devrez être capables

116
00:08:45,050 --> 00:08:47,900
d'adapter les concepts vus
à vos besoins spécifiques.

117
00:08:48,170 --> 00:08:50,730
Dans ce cas, il faudra d'abord
faire quelques tests et vérifier

118
00:08:50,760 --> 00:08:53,360
que les commandes que vous avez
mises en place sont fiables.

