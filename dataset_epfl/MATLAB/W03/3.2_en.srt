1
00:00:04,160 --> 00:00:07,310
Writing and reading a file is often
necessary

2
00:00:07,310 --> 00:00:09,250
in order to read or transfer data.

3
00:00:09,570 --> 00:00:12,220
We won't see all the possibilities,
but will focus

4
00:00:12,220 --> 00:00:12,960
on the essential.

5
00:00:14,080 --> 00:00:17,780
First we will see how to save space

6
00:00:17,780 --> 00:00:20,910
of work or only some variables to recover

7
00:00:20,910 --> 00:00:21,820
later.

8
00:00:22,310 --> 00:00:25,620
Then we will see the writing of
more complex files.

9
00:00:25,990 --> 00:00:29,560
Let's first see how to save space.

10
00:00:31,170 --> 00:00:44,880
For example, I take two variables
A and B, two matrices.

11
00:00:45,750 --> 00:00:48,390
B, for example, which is just equal
to two times a.

12
00:00:51,240 --> 00:00:58,060
And now I'll save them to a MATLAB file

13
00:00:59,690 --> 00:01:01,260
I call workspace.mat.

14
00:01:01,850 --> 00:01:05,500
Here, the extension is mat, not M.

15
00:01:07,520 --> 00:01:11,330
This is a binary file, it is called

16
00:01:11,650 --> 00:01:14,280
mat because we recognize that this is
Matlab format.

17
00:01:15,020 --> 00:01:18,950
This is true when working on MATLAB or
Octave.

18
00:01:19,710 --> 00:01:23,340
This is a file called in binary format
Matlab

19
00:01:25,500 --> 00:01:28,040
Now I clean my workspace again

20
00:01:29,290 --> 00:01:39,130
There are no more variable in my
environment and I reload my file.

21
00:01:41,010 --> 00:01:43,020
I look at the data.

22
00:01:43,890 --> 00:01:45,740
There is A and B which have reappeared.

23
00:01:47,270 --> 00:01:52,770
A at the value that was given earlier
to this matrix.

24
00:01:54,550 --> 00:02:03,710
Now I can only re-clean and only
load the variable

25
00:02:03,730 --> 00:02:05,490
A from the workspace.mat.

26
00:02:05,490 --> 00:02:11,810
At this moment, there is more than
variable A that is loaded.

27
00:02:12,760 --> 00:02:16,210
If you prefer to save your variables
in the text file

28
00:02:16,980 --> 00:02:20,890
rather than save in Matlab binary format

29
00:02:20,890 --> 00:02:22,540
we save in ASCII format.

30
00:02:24,250 --> 00:02:29,010
For this, you must give the save
command, with

31
00:02:29,480 --> 00:02:36,390
the option - ASCII and give the name of
a text file in which to save.

32
00:02:37,730 --> 00:02:42,210
The difference with the backup of a
Matlab file is

33
00:02:42,210 --> 00:02:44,240
that here you can save only one variable.

34
00:02:44,230 --> 00:02:47,460
That's why I gave the name 1VAR,

35
00:02:47,460 --> 00:02:49,520
you need to state what variable you
want to save.

36
00:02:50,660 --> 00:02:54,080
Now I clean my environment,
there is more variable.

37
00:02:55,030 --> 00:03:02,350
And I load the file that I just wrote:
load 1VAR.

38
00:03:03,650 --> 00:03:07,570
txt and a new variable was created.

39
00:03:07,810 --> 00:03:10,510
A variable named as our file.

40
00:03:11,030 --> 00:03:13,430
Inside is the original matrix.

41
00:03:14,620 --> 00:03:19,960
If I want to give the name A to this
new variable, I have to

42
00:03:19,960 --> 00:03:23,950
call load as function.

43
00:03:24,310 --> 00:03:28,580
So it's load, the file name, 1VAR.

44
00:03:29,080 --> 00:03:34,110
txt and then I end the call of
this function.

45
00:03:34,840 --> 00:03:39,730
Now the only variable I have is A and
its value

46
00:03:40,140 --> 00:03:42,200
is the matrix we had before.

47
00:03:42,370 --> 00:03:43,930
This text file 1VAR .

48
00:03:43,650 --> 00:03:49,240
can be changed using a common editor
or can

49
00:03:49,240 --> 00:03:54,870
also be the result of the calculations
from our software

50
00:03:55,120 --> 00:03:56,090
or even another computer.

51
00:03:57,330 --> 00:04:01,160
So you have a txt file and you can
load it in

52
00:04:01,640 --> 00:04:04,490
your environment using the load command.

53
00:04:04,410 --> 00:04:10,150
What is essential is that the file is
formatted as a matrix.

54
00:04:10,600 --> 00:04:14,360
So if we look at the first line,
there will be some

55
00:04:14,360 --> 00:04:17,480
number of numbers, say 5.

56
00:04:17,830 --> 00:04:20,660
Now on each successive line,
there should be

57
00:04:20,840 --> 00:04:24,710
5 values ​​indicated otherwise load
will not work.

58
00:04:25,340 --> 00:04:28,900
If you want to write more complex
texts on a file

59
00:04:28,900 --> 00:04:32,560
text, you can use the command
fopen, fprintf or fclose.

60
00:04:33,050 --> 00:04:37,760
They work in a little more complex way,
so I

61
00:04:37,760 --> 00:04:43,420
advice you to look up help for these
functions,

62
00:04:43,460 --> 00:04:47,810
fopen, fprintf or look on the internet
for examples.

63
00:04:48,410 --> 00:04:52,780
Here, I give you just a simple example
on the use, so

64
00:04:52,780 --> 00:04:57,740
if we want to write in a file more than
just a matrix,

65
00:04:58,100 --> 00:05:05,150
you must first open a file, and to
open it, you need

66
00:05:05,150 --> 00:05:06,780
to use fopen.

67
00:05:07,730 --> 00:05:09,310
fopen function has two outputs.

68
00:05:09,840 --> 00:05:15,310
We will see later, what it means 1 or 2
outputs of a function.

69
00:05:15,330 --> 00:05:18,490
In any case, the syntax is like that.

70
00:05:18,660 --> 00:05:23,770
It has 2 outputs for fopen fopen and has

71
00:05:23,770 --> 00:05:30,710
two arguments: one is the file we will write
and the other

72
00:05:30,850 --> 00:05:31,770
what we want to do.

73
00:05:31,900 --> 00:05:34,380
We, we want to write w like write.

74
00:05:34,560 --> 00:05:40,690
Now in fileID (message), there is the
result of the opening,

75
00:05:40,720 --> 00:05:43,760
this fileID is the identifier's file.

76
00:05:43,860 --> 00:05:49,290
Now, if you want to write something
about this

77
00:05:49,290 --> 00:05:49,960
file, you have the right.

78
00:05:50,850 --> 00:05:54,530
With the fprintf function, you need
to give this ID, do

79
00:05:54,530 --> 00:05:58,910
not give the name of the file,
but the file identifier.

80
00:06:00,550 --> 00:06:05,620
And then we can write the message we want
on this file.

81
00:06:05,930 --> 00:06:09,800
For example, I first go to the line.

82
00:06:10,080 --> 00:06:17,660
Go to the line is a \ n, then text Hello,
we are in 2016.

83
00:06:18,660 --> 00:06:24,880
And I give the year as a number at the
end which could be

84
00:06:24,850 --> 00:06:25,750
in a variable.

85
00:06:28,170 --> 00:06:31,110
And what temperature it is.

86
00:06:34,830 --> 00:06:39,660
So we want to give a number with
a decimal point, so this number

87
00:06:39,660 --> 00:06:43,780
will occupy 3 places one place after
the decimal point.

88
00:06:43,840 --> 00:06:46,330
And then I write degrees.

89
00:06:50,380 --> 00:06:55,820
And now, we must give the number
you want to print.

90
00:06:55,870 --> 00:07:02,630
So it's 2016, and the temperature 4.

91
00:07:02,730 --> 00:07:03,390
5 degrees

92
00:07:04,090 --> 00:07:08,130
After I can close the file.

93
00:07:13,470 --> 00:07:17,030
Now I can look at what he has written
in my file.

94
00:07:17,620 --> 00:07:20,720
For example, if I want to just to look,
I use the command

95
00:07:20,720 --> 00:07:24,550
before I have to give the file name.

96
00:07:26,390 --> 00:07:30,850
We see in the written file: hello we are
in 2016 and it is 4.

97
00:07:31,470 --> 00:07:32,080
5 degrees

98
00:07:32,680 --> 00:07:37,230
The fprintf command prints something
in the file.

99
00:07:37,310 --> 00:07:41,450
We can also print directly on a string
of characters,

100
00:07:42,060 --> 00:07:46,500
So on a string with the command
called sprintf.

101
00:07:47,660 --> 00:07:53,090
But, it does not take the identifier
of the file

102
00:07:53,130 --> 00:07:54,660
as it will be displayed on the screen.

103
00:07:55,420 --> 00:07:58,880
We have exactly the same message as
before.

104
00:07:59,470 --> 00:08:04,500
This is why I am introducing this
variable, it is in

105
00:08:04,500 --> 00:08:07,620
the case where I want to use 2016 and 4.

106
00:08:07,940 --> 00:08:12,340
5, I will use the values ​​in
a specific variable.

107
00:08:14,500 --> 00:08:20,020
For example, this variable var, I have
2016 and then the temperature

108
00:08:20,020 --> 00:08:23,190
which, perhaps, were calculated in
another way.

109
00:08:23,630 --> 00:08:27,590
So at this point, I can instead give a new

110
00:08:27,590 --> 00:08:29,300
matrix here, I give the variable var.

111
00:08:30,310 --> 00:08:35,810
The effect is exactly the same.

112
00:08:36,200 --> 00:08:38,950
Most often, the writing and reading
of a file are

113
00:08:38,950 --> 00:08:39,640
more complicated.

114
00:08:39,680 --> 00:08:41,840
Here we have seen the basics.

115
00:08:42,370 --> 00:08:45,050
Nevertheless with the concepts learned,
you should be able

116
00:08:45,050 --> 00:08:47,900
to adapt the concepts presented to
your specific needs.

117
00:08:48,170 --> 00:08:50,730
In this case, it will first run some
tests and check

118
00:08:50,760 --> 00:08:53,360
that the controls you have in place are
reliable.

