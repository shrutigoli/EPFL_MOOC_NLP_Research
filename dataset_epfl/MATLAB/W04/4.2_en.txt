To control the flow of operation in an algorithm, you must be able to verify the conditions and act accordingly.
To check if certain conditions are met or not, there are keywords if, else, literally, if or otherwise.
If a condition is met then we made some commands, otherwise we do others.
The conditions are verified using logical operations as feast, different, etc.
You must also know the order of priority between operators to ensure the program runs as desired.
Logical operations more equal, equal, etc have as a result, true or false.
We can compare numbers or also associate relations,
A check for example greater than B and
B greater than 0.
The logical operations can be summarized thus.
So major, major symbol for the largest.
The major symbol equal to more equal lowest with the minor symbol, and so on.
Then we can tell if something is equal, use double equal sign, otherwise there is a set operation
So for example, A = 3, we will not make it if true or false that A equals 3 but will not simply say that A must be equal to 3.
So you have to use double equals symbol to check equality between two things, the difference with tilde, equal, then "and" or "or" double symbol in percent (%) or the vertical bar.
There is also a table of truth that helps us understand when is that the conditions are met or not.
For example, if X is true, then no X, the X tild mean, it is the negation of X, then it is wrong and naturally if X is false, the negation of X is true.
Then, if it takes 2 variables X and Y, if the two are true, then X or Y is true and X and Y is also true.
As against the xor is something that is true only if only one of the two is true and therefore xor is true or false, it is true but in this case, in the first line, xor true comma true is false.
That's why the first line, when X and Y are true, xor goes false and then we read the truth table, false if X and Y is true, then X or Y is true and X and Y xor false and as we see, is true.
If X and Y are false, then X or Y is also false, X and Y this is wrong, and xor of X and Y is also false.
The order of operations allows us to simplify writing without always put parentheses.
Of course, parentheses are always given priority.
Then there is the transpose and power, negation, multiplication and division, and so on until the definition.
So this table summarizes us right to the left priorities in operations.
Seeing how to use the "if" otherwise.
Then we will build a simple little function that will call (if test).
So we said we want to define a function, so it is in what we did last week, we must say, start with the keyword, function, ie what are the outputs.
This time, I did not want to have to exit so I say, there is no output.
Empty set. And then I have to call the function as the file, if test, and say what are the inputs,
Here I will take 2 numbers and I'll compare them.
I can now write the hub of this function, it is known already we're going to do, then, if test checks whether A is smaller than B.
First thing to do is check with the command "if",
A smaller than B. Now I have to do several things,
For example, if I can just write,
A is smaller than B.
I have to finish this block "if", my job is done.
What will she do ?
I save and I run, if test, so it is a function so I have to call arguments, for example,
3-point 4 and it said, A is smaller than B.
So what is it that happens if I make 4-3.
Nothing happens and indeed, this function we said, there is nothing that should be done when the number A is greater than or equal to a number B.
So I can also write several things in this part of the code between "if" and the "end", it's called a block.
So here begins the command block to run if the condition is fulfilled. And "end" finishes the block "if".
So that means basically, you can write between "if" and the "end" several commands that can be displayed on the screen.
For example, I also want to write exactly the condition,
A smaller than B, so I'll turn into a string A
40 characters with the num command to string (num2str), then
I'll put the symbol "smaller" and then also turn the number B string.
I bind it all in a single string, that is why there are square brackets, I can save and now run my function and 3 smaller than 4 appears.
Then the field inside the parenthesis are not that important,  we can also add other blocks and other conditions "if", so now
I can say, if A is greater than 0, and also B is greater than 0, so it is between the two, I have to put the symbols "and" so it's a double ampersand, then I'll run another command list.
Here I just want to say, the two numbers are positive.
Now if I run with 3 and 4, I 3 sentences print, if I do with 4-3, then number 2 are positive, is displayed on the screen.
But if I take the numbers within
3 least 4, there is nothing that appears.
Do I add something to do if
One of the conditions is not met?
So now I want to print something on the screen in the case where A is not smaller than B.
So what I can do is to add a block to be executed on the other hand. So first if A smaller than B, while I do something else, that's bloc to run.
If A is greater than or equal to B.
While there, we can say that A is greater than or equal to B. the function, it will display something even when A is greater than B.
One can also add the middle between the "if" and "else" other conditions that run if the first is not met.
So for example, I would say that if
A equals B, then in this block, we will simply write
A equals B.
And suddenly. What remains, the condition remains if A is not smaller than B, it is not equal to B, then it is right.
A is greater than B.
So I can run my test, saying, minus 3 minus 3,
A is equal to B, or least 3 least 4,
A is greater than B
So we have the possibility to use conditions with "if" and this condition can complement with the "else if" or
"Else", and each of these blocks is performed according to the condition
A smaller than B or condition which is given in the "if".
To control what goes into a program, you can also use the keyword "switch".
So how walking this "switch"?
I still have a function, this time,
I have prepared, so I want to build a function called
"switch test ", and give a number of points, it makes the note.
First we will control that the number of points is positive and smaller than 10. So if the number of points is negative, or when the "or" is said, use the vertical bar.
To do that, I have to Alt 7.
So it depends on your keyboard.
So if the points are negative or points are more than
10, while in fact there is a problem in calling this function, then the note, we will say that it is not defined,
NA said, that is not acquired.
And then one stops immediately the function that it has not yet seen.
If you want to stop immediately the execution of a function, you can use the keyword Return, it makes sense only when we know how to do conditions, if there are no conditions,
Return once called, is like saying, here, it's over.
And now here we end immediately if the number of points is negative or greater than 10.
And now I finish the block linked to this "if".
So now we know that the points are between 0 and 10.
Now I use the keyword "switch".
So this "switch", what does it do?
It looks so variable, here the variable point, it is in some cases, called "box".
While the first case, it is for example if
I have 9 or 10 points.
Then the rating will be A, we obtain the highest rating, or if you want (in Switzerland) we use 6 for the best rating so you decide what you want.
Then the case was 8 points.
You see, before I had 2 cases, 9 and 10,
I put them between braces, now I have one, then it is enough to say the case 8, then in that case, we will get the rating of 5.5.
Here is made in the form of a character string, one could also decide that it is in the form of names.
So every time I have the right to a small block, perform, a block mean, you can put several commands
Then, when 7 we will say 25, 25 to 6, and now, we find that our students must always have at least an average 5, otherwise we're not happy, so if in any other cases, we will say that the rating is 3.
If we have not done at least 7 points, we don't deserve the average a bit harsh. Now I have finished all my cases so the "switch" is finished, I have to close the block
"switch" with "end" and then finish my job. Now I will use my function.
If I had 9 points, very well.
If I have less points, this is really not good, it is not granted at all.
If I have 7 points, I have a rating of 5.
The flow of operations can be controlled with the keywords,
"If", "else" or "switch" that is less sophisticated, sometimes lighter use.
These are the first programming elements.
The next step is the use of loops to repeat a block of code several times.
