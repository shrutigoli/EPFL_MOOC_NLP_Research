1
00:00:04,300 --> 00:00:07,730
To control the flow of operation
in an algorithm,

2
00:00:07,870 --> 00:00:10,880
you must be able to verify the
conditions and act accordingly.

3
00:00:12,030 --> 00:00:15,150
To check if certain conditions
are met or not,

4
00:00:15,210 --> 00:00:20,310
there are keywords if, else,
literally, if or otherwise.

5
00:00:20,550 --> 00:00:23,520
If a condition is met then we made
some commands,

6
00:00:23,740 --> 00:00:24,640
otherwise we do others.

7
00:00:25,880 --> 00:00:28,940
The conditions are verified using
logical operations as

8
00:00:28,940 --> 00:00:31,470
feast, different, etc.

9
00:00:31,460 --> 00:00:35,600
You must also know the order of
priority between operators

10
00:00:36,210 --> 00:00:38,620
to ensure the program runs as desired.

11
00:00:39,170 --> 00:00:42,690
Logical operations more equal, equal,
etc have

12
00:00:42,690 --> 00:00:44,260
as a result, true or false.

13
00:00:44,810 --> 00:00:47,850
We can compare numbers or also
associate relations,

14
00:00:47,970 --> 00:00:52,480
A check for example greater than B and
B greater than 0.

15
00:00:52,910 --> 00:00:55,300
The logical operations can be
summarized thus.

16
00:00:55,710 --> 00:00:58,560
So major, major symbol for the largest.

17
00:00:58,560 --> 00:01:03,260
The major symbol equal to more equal
lowest with

18
00:01:03,260 --> 00:01:04,580
the minor symbol, and so on.

19
00:01:05,930 --> 00:01:09,580
Then we can tell if something is equal,
use

20
00:01:09,580 --> 00:01:15,490
double equal sign, otherwise there is
a set operation

21
00:01:15,490 --> 00:01:19,250
So for example, A = 3, we will not make
it if

22
00:01:19,250 --> 00:01:22,730
true or false that A equals 3 but
will not simply say

23
00:01:22,730 --> 00:01:24,090
that A must be equal to 3.

24
00:01:24,960 --> 00:01:29,230
So you have to use double equals symbol
to check equality

25
00:01:29,230 --> 00:01:34,770
between two things, the difference
with tilde, equal, then "and"

26
00:01:34,800 --> 00:01:39,620
or "or" double symbol in percent (%)
or the vertical bar.

27
00:01:39,620 --> 00:01:42,660
There is also a table of truth that
helps us understand

28
00:01:43,600 --> 00:01:45,880
when is that the conditions are met or
not.

29
00:01:46,280 --> 00:01:52,650
For example, if X is true, then
no X, the X tild mean,

30
00:01:52,670 --> 00:01:57,180
it is the negation of X, then it is
wrong and naturally

31
00:01:57,180 --> 00:01:59,280
if X is false, the negation of X is true.

32
00:02:00,280 --> 00:02:04,420
Then, if it takes 2 variables X and Y,
if the two are true,

33
00:02:04,420 --> 00:02:08,970
then X or Y is true and X and Y is
also true.

34
00:02:09,510 --> 00:02:13,970
As against the xor is something
that is true only

35
00:02:13,970 --> 00:02:16,930
if only one of the two is true and
therefore xor is true

36
00:02:17,960 --> 00:02:22,370
or false, it is true but in this case,
in the first line,

37
00:02:24,040 --> 00:02:28,090
xor true comma true is false.

38
00:02:28,940 --> 00:02:32,990
That's why the first line, when X and Y
are true,

39
00:02:33,280 --> 00:02:37,060
xor goes false and then we read
the truth table,

40
00:02:37,060 --> 00:02:43,090
false if X and Y is true, then X or Y
is true and X and Y

41
00:02:43,090 --> 00:02:45,660
xor false and as we see, is true.

42
00:02:46,330 --> 00:02:52,220
If X and Y are false, then X or Y
is also false, X and Y

43
00:02:52,650 --> 00:02:54,860
this is wrong, and xor of X and Y
is also false.

44
00:02:55,380 --> 00:02:58,620
The order of operations allows us
to simplify writing

45
00:02:58,620 --> 00:02:59,790
without always put parentheses.

46
00:03:00,490 --> 00:03:03,520
Of course, parentheses are always
given priority.

47
00:03:03,690 --> 00:03:07,270
Then there is the transpose and power,
negation,

48
00:03:07,290 --> 00:03:11,030
multiplication and division, and
so on until the definition.

49
00:03:11,500 --> 00:03:16,770
So this table summarizes us right
to the left

50
00:03:16,770 --> 00:03:18,040
priorities in operations.

51
00:03:19,150 --> 00:03:22,990
Seeing how to use the "if" otherwise.

52
00:03:23,370 --> 00:03:30,780
Then we will build a simple little
function that will call (if test).

53
00:03:31,910 --> 00:03:35,790
So we said we want to define
a function, so it is in

54
00:03:35,790 --> 00:03:39,320
what we did last week, we must say,
start with

55
00:03:39,380 --> 00:03:42,990
the keyword, function, ie what are
the outputs.

56
00:03:43,930 --> 00:03:47,200
This time, I did not want to have
to exit so I say,

57
00:03:47,980 --> 00:03:49,470
there is no output.

58
00:03:49,480 --> 00:03:54,440
Empty set. And then I have to call
the function as

59
00:03:54,480 --> 00:03:59,090
the file, if test, and say what are
the inputs,

60
00:03:59,090 --> 00:04:01,260
Here I will take 2 numbers and I'll
compare them.

61
00:04:01,880 --> 00:04:04,370
I can now write the hub of this function,
it is known

62
00:04:04,370 --> 00:04:13,510
already we're going to do, then, if test
checks whether A is smaller than B.

63
00:04:17,050 --> 00:04:21,960
First thing to do is check with the
command "if",

64
00:04:23,220 --> 00:04:30,860
A smaller than B. Now I have to do
several things,

65
00:04:31,400 --> 00:04:41,460
For example, if I can just write,
A is smaller than B.

66
00:04:43,830 --> 00:04:49,700
I have to finish this block "if",
my job is done.

67
00:04:50,270 --> 00:04:51,800
What will she do ?

68
00:04:51,800 --> 00:04:56,860
I save and I run, if test, so it is a
function

69
00:04:56,860 --> 00:05:00,870
so I have to call arguments, for example,
3-point 4

70
00:05:00,870 --> 00:05:05,450
and it said, A is smaller than B.

71
00:05:06,420 --> 00:05:08,680
So what is it that happens if I make 4-3.

72
00:05:08,680 --> 00:05:14,250
Nothing happens and indeed, this function

73
00:05:14,310 --> 00:05:20,350
we said, there is nothing that should be
done when the number A

74
00:05:20,380 --> 00:05:22,940
is greater than or equal to a number B.

75
00:05:24,010 --> 00:05:28,200
So I can also write several things
in this part

76
00:05:28,200 --> 00:05:31,000
of the code between "if" and the "end",
it's called a block.

77
00:05:31,990 --> 00:05:49,460
So here begins the command block
to run if the condition

78
00:05:49,480 --> 00:05:59,960
is fulfilled. And "end" finishes
the block "if".

79
00:06:03,100 --> 00:06:06,810
So that means basically, you can write
between "if" and

80
00:06:07,040 --> 00:06:10,370
the "end" several commands that can be
displayed on the screen.

81
00:06:10,430 --> 00:06:18,860
For example, I also want to write
exactly the condition,

82
00:06:19,300 --> 00:06:24,350
A smaller than B, so I'll turn into
a string A

83
00:06:24,350 --> 00:06:28,180
40 characters with the num command
to string (num2str), then

84
00:06:28,210 --> 00:06:37,660
I'll put the symbol "smaller" and
then also turn

85
00:06:37,660 --> 00:06:39,370
the number B string.

86
00:06:39,850 --> 00:06:43,170
I bind it all in a single string, that is

87
00:06:43,170 --> 00:06:46,400
why there are square brackets, I can save

88
00:06:47,000 --> 00:06:57,240
and now run my function and 3 smaller
than 4 appears.

89
00:06:57,750 --> 00:07:03,090
Then the field inside the parenthesis
are not

90
00:07:03,240 --> 00:07:09,400
that important,  we can also add other
blocks

91
00:07:10,090 --> 00:07:14,190
and other conditions "if", so now
I can say,

92
00:07:15,050 --> 00:07:28,230
if A is greater than 0, and also B is
greater than 0,

93
00:07:28,230 --> 00:07:33,840
so it is between the two, I have to put
the symbols "and"

94
00:07:34,350 --> 00:07:47,330
so it's a double ampersand, then I'll run
another command list.

95
00:07:47,330 --> 00:07:53,700
Here I just want to say, the two
numbers are positive.

96
00:07:59,670 --> 00:08:09,760
Now if I run with 3 and 4, I 3 sentences

97
00:08:09,760 --> 00:08:17,530
print, if I do with 4-3, then number 2
are positive,

98
00:08:17,530 --> 00:08:20,310
is displayed on the screen.

99
00:08:20,930 --> 00:08:30,710
But if I take the numbers within
3 least 4, there is nothing that appears.

100
00:08:31,030 --> 00:08:37,430
Do I add something to do if

101
00:08:37,430 --> 00:08:38,960
One of the conditions is not met?

102
00:08:39,030 --> 00:08:43,810
So now I want to print something
on the screen

103
00:08:44,180 --> 00:08:47,480
in the case where A is not smaller than B.

104
00:08:48,010 --> 00:08:56,540
So what I can do is to add a block
to be executed

105
00:08:58,430 --> 00:09:03,540
on the other hand. So first if A smaller
than B,

106
00:09:03,540 --> 00:09:09,850
while I do something else, that's
bloc to run.

107
00:09:11,240 --> 00:09:19,430
If A is greater than or equal to B.

108
00:09:20,350 --> 00:09:33,280
While there, we can say that A is
greater than or equal to B.

109
00:09:37,130 --> 00:09:44,840
the function, it will display something

110
00:09:44,840 --> 00:09:46,300
even when A is greater than B.

111
00:09:49,380 --> 00:09:55,640
One can also add the middle between
the "if" and "else"

112
00:09:55,990 --> 00:10:04,540
other conditions that run if the
first is not met.

113
00:10:05,120 --> 00:10:11,280
So for example, I would say that if
A equals B,

114
00:10:11,280 --> 00:10:22,780
then in this block, we will simply write
A equals B.

115
00:10:23,200 --> 00:10:29,700
And suddenly. What remains, the condition
remains if A is

116
00:10:29,700 --> 00:10:33,530
not smaller than B, it is not equal to B,
then it is right.

117
00:10:34,610 --> 00:10:37,240
A is greater than B.

118
00:10:38,290 --> 00:10:47,440
So I can run my test, saying, minus 3
minus 3,

119
00:10:47,440 --> 00:10:58,050
A is equal to B, or least 3 least 4,
A is greater than B

120
00:10:58,050 --> 00:11:04,670
So we have the possibility to use
conditions with "if"

121
00:11:05,480 --> 00:11:09,500
and this condition can complement with
the "else if" or

122
00:11:09,520 --> 00:11:17,220
"Else", and each of these blocks is
performed according to the condition

123
00:11:18,170 --> 00:11:21,570
A smaller than B or condition which
is given in the "if".

124
00:11:23,250 --> 00:11:27,580
To control what goes into a program,
you can also

125
00:11:27,830 --> 00:11:30,200
use the keyword "switch".

126
00:11:30,450 --> 00:11:32,030
So how walking this "switch"?

127
00:11:32,720 --> 00:11:35,920
I still have a function, this time,
I have prepared,

128
00:11:36,550 --> 00:11:39,490
so I want to build a function called
"switch

129
00:11:39,490 --> 00:11:43,400
test ", and give a number of points,
it makes the note.

130
00:11:45,130 --> 00:11:50,730
First we will control that the number
of points is positive

131
00:11:51,910 --> 00:12:03,180
and smaller than 10. So if the number
of points is negative,

132
00:12:03,180 --> 00:12:10,070
or when the "or" is said, use the
vertical bar.

133
00:12:10,910 --> 00:12:14,660
To do that, I have to Alt 7.

134
00:12:15,760 --> 00:12:17,070
So it depends on your keyboard.

135
00:12:20,240 --> 00:12:31,590
So if the points are negative or points
are more than

136
00:12:31,590 --> 00:12:40,030
10, while in fact there is a problem
in calling this

137
00:12:40,030 --> 00:12:45,290
function, then the note, we will say
that it is not defined,

138
00:12:45,310 --> 00:12:51,670
NA said, that is not acquired.

139
00:12:55,750 --> 00:13:00,410
And then one stops immediately
the function that it has not yet seen.

140
00:13:00,410 --> 00:13:05,540
If you want to stop immediately
the execution of a function,

141
00:13:05,570 --> 00:13:10,690
you can use the keyword Return,
it makes sense only

142
00:13:10,690 --> 00:13:14,550
when we know how to do conditions,
if there are no conditions,

143
00:13:14,980 --> 00:13:17,320
Return once called, is like saying,
here, it's over.

144
00:13:17,360 --> 00:13:22,240
And now here we end immediately
if the number of points

145
00:13:22,600 --> 00:13:23,860
is negative or greater than 10.

146
00:13:23,860 --> 00:13:31,770
And now I finish the block linked
to this "if".

147
00:13:34,610 --> 00:13:37,600
So now we know that the points are
between 0 and 10.

148
00:13:42,580 --> 00:13:45,030
Now I use the keyword "switch".

149
00:13:45,370 --> 00:13:47,540
So this "switch", what does it do?

150
00:13:48,050 --> 00:13:53,770
It looks so variable, here the variable
point, it is

151
00:13:54,230 --> 00:13:56,950
in some cases, called "box".

152
00:13:58,320 --> 00:14:06,760
While the first case, it is for example if
I have 9 or 10 points.

153
00:14:09,580 --> 00:14:21,010
Then the rating will be A, we obtain
the highest rating, or if

154
00:14:21,010 --> 00:14:26,360
you want (in Switzerland) we use 6 for
the best rating

155
00:14:26,360 --> 00:14:29,560
so you decide what you want.

156
00:14:30,680 --> 00:14:36,430
Then the case was 8 points.

157
00:14:41,840 --> 00:14:46,430
You see, before I had 2 cases, 9 and 10,
I put them between

158
00:14:46,930 --> 00:14:51,480
braces, now I have one, then it is enough

159
00:14:51,480 --> 00:15:00,830
to say the case 8, then in that case,
we will get the rating of 5.5.

160
00:15:02,410 --> 00:15:09,770
Here is made in the form of a
character string, one could

161
00:15:09,770 --> 00:15:15,130
also decide that it is in the form of
names.

162
00:15:16,880 --> 00:15:21,090
So every time I have the right to a
small block, perform,

163
00:15:21,210 --> 00:15:25,610
a block mean, you can put several commands

164
00:15:25,610 --> 00:15:41,160
Then, when 7 we will say 25, 25 to 6,
and now,

165
00:15:41,160 --> 00:15:44,780
we find that our students must
always have at least

166
00:15:44,780 --> 00:15:57,120
an average 5, otherwise we're not
happy, so if in any

167
00:15:58,900 --> 00:16:08,630
other cases, we will say that the
rating is 3.

168
00:16:10,800 --> 00:16:14,140
If we have not done at least 7 points,
we don't deserve the average

169
00:16:16,860 --> 00:16:22,270
a bit harsh. Now I have finished
all my cases so the "switch"

170
00:16:25,860 --> 00:16:35,620
is finished, I have to close the block
"switch" with "end" and

171
00:16:35,620 --> 00:16:42,300
then finish my job. Now I will use my
function.

172
00:16:43,060 --> 00:16:46,510
If I had 9 points, very well.

173
00:16:47,250 --> 00:16:57,480
If I have less points, this is really
not good,

174
00:16:57,480 --> 00:16:58,530
it is not granted at all.

175
00:16:59,560 --> 00:17:06,100
If I have 7 points, I have a rating of 5.

176
00:17:06,100 --> 00:17:09,910
The flow of operations can be controlled
with the keywords,

177
00:17:09,930 --> 00:17:12,930
"If", "else" or "switch" that is
less sophisticated,

178
00:17:12,930 --> 00:17:14,410
sometimes lighter use.

179
00:17:14,920 --> 00:17:16,960
These are the first programming elements.

180
00:17:17,400 --> 00:17:20,110
The next step is the use of loops to
repeat

181
00:17:20,110 --> 00:17:21,230
a block of code several times.

