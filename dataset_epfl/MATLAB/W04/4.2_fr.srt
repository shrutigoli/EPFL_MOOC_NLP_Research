1
00:00:04,300 --> 00:00:07,730
Pour pouvoir contrôler le flux des
opérations dans un algorithme,

2
00:00:07,870 --> 00:00:10,880
il faut pouvoir vérifier les
conditions et agir en conséquence.

3
00:00:12,030 --> 00:00:15,150
Pour vérifier si certaines
conditions sont remplies ou pas,

4
00:00:15,210 --> 00:00:20,310
il existe les mots clés if, else,
littéralement, si ou autrement.

5
00:00:20,550 --> 00:00:23,520
Si une condition est remplie alors
on fait certaines commandes,

6
00:00:23,740 --> 00:00:24,640
autrement on en fait d'autres.

7
00:00:25,880 --> 00:00:28,940
Les conditions se vérifient à l'aide
d'opérations logiques comme

8
00:00:28,940 --> 00:00:31,470
plus grand régal, différent, etc.

9
00:00:31,460 --> 00:00:35,600
. Il faut aussi connaître l'ordre
de priorité entre les opérateurs

10
00:00:36,210 --> 00:00:38,620
pour être sûr que le programme
s'exécute comme on le souhaite.

11
00:00:39,170 --> 00:00:42,690
Les opérations logiques plus
grand égal, égale, et cetera ont

12
00:00:42,690 --> 00:00:44,260
comme résultat, vrai ou faux.

13
00:00:44,810 --> 00:00:47,850
On peut donc comparer de nombres
ou aussi associer des relations,

14
00:00:47,970 --> 00:00:52,480
par exemple vérifier A plus grand
que B et B plus grands que 0.

15
00:00:52,910 --> 00:00:55,300
Les opérations logiques
se résument ainsi.

16
00:00:55,710 --> 00:00:58,560
Alors majeur, le symbole
majeur pour plus grand.

17
00:00:58,560 --> 00:01:03,260
Le symbole majeur égal pour plus
grand égal plus petit avec

18
00:01:03,260 --> 00:01:04,580
le symbole mineur, et cetera.

19
00:01:05,930 --> 00:01:09,580
Ensuite on pourra dire, si quelque
chose est égal, il faut utiliser

20
00:01:09,580 --> 00:01:15,490
le double symbole égal, autrement
on a une opération de définition

21
00:01:15,490 --> 00:01:19,250
donc par exemple A est égal à 3,
on ne va pas rendre si c'est

22
00:01:19,250 --> 00:01:22,730
vrai ou faux que A est égal à 3
mais ne va pas simplement dire

23
00:01:22,730 --> 00:01:24,090
que A doit être égal à 3.

24
00:01:24,960 --> 00:01:29,230
Donc il faut utiliser le double
symbole égal pour vérifier l'égalité

25
00:01:29,230 --> 00:01:34,770
entre 2 choses, différence avec
le tild, égal, ensuite "et"

26
00:01:34,800 --> 00:01:39,620
ou "ou" avec double symbole de en
percent (%) ou la barre verticale.

27
00:01:39,620 --> 00:01:42,660
Il y a aussi un tableau de vérité
qui nous aide à comprendre

28
00:01:43,600 --> 00:01:45,880
quand est-ce que les conditions
sont remplies ou pas.

29
00:01:46,280 --> 00:01:52,650
Par exemple, si X est vrai, alors
non X, le tild X ça veut dire,

30
00:01:52,670 --> 00:01:57,180
c'est la négation de X, alors
c'est faux et naturellement

31
00:01:57,180 --> 00:01:59,280
si X est faux, la négation de X est vrai.

32
00:02:00,280 --> 00:02:04,420
Ensuite, si on prend 2 variables
X et Y, si les 2 sont vraies,

33
00:02:04,420 --> 00:02:08,970
alors X ou Y est vrai et
X et Y est vrai aussi.

34
00:02:09,510 --> 00:02:13,970
Par contre le xor, c'est quelque
chose qui est vrai seulement

35
00:02:13,970 --> 00:02:16,930
si seulement une des 2 est vraie
et donc xor est vrai

36
00:02:17,960 --> 00:02:22,370
ou faux, c'est vrai mais dans ce
cas, dans la première ligne,

37
00:02:24,040 --> 00:02:28,090
xor de vrai virgule vrai, c'est faux.

38
00:02:28,940 --> 00:02:32,990
C'est pour ça que la première
ligne, quand X et Y sont vrais,

39
00:02:33,280 --> 00:02:37,060
xor devient faux et ensuite on
peut lire la table de vérité,

40
00:02:37,060 --> 00:02:43,090
si X faux et Y est vrai, alors X
ou Y c'est vrai et X et Y est

41
00:02:43,090 --> 00:02:45,660
faux et le xor comme
on voit, est vrai.

42
00:02:46,330 --> 00:02:52,220
Si X et Y sont faux, alors X ou Y
c'est faux aussi, X et Y 

43
00:02:52,650 --> 00:02:54,860
c'est faux, et xor de X et
Y c'est faux aussi.

44
00:02:55,380 --> 00:02:58,620
La priorité des opérations nous
permet de simplifier l'écriture

45
00:02:58,620 --> 00:02:59,790
sans toujours mettre des parenthèses.

46
00:03:00,490 --> 00:03:03,520
Bien sûr, les parenthèses
sont toujours prioritaires.

47
00:03:03,690 --> 00:03:07,270
Ensuite, il y a la transposée
et la puissance, la négation,

48
00:03:07,290 --> 00:03:11,030
la multiplication et division, ainsi
de suite jusqu'à la définition.

49
00:03:11,500 --> 00:03:16,770
Donc ce tableau nous résume de la
droite jusqu'à la gauche

50
00:03:16,770 --> 00:03:18,040
les priorités dans les opérations.

51
00:03:19,150 --> 00:03:22,990
Voyant comment utiliser
le "si" autrement.

52
00:03:23,370 --> 00:03:30,780
Alors on va construire une petite fonction
simple qu'on va appeler (if test).

53
00:03:31,910 --> 00:03:35,790
Alors on a dit qu'on veut définir
une fonction, donc c'est dans

54
00:03:35,790 --> 00:03:39,320
ce qu'on a fait la semaine passée,
il faut dire, commencer avec

55
00:03:39,380 --> 00:03:42,990
le mot clé, fonction, dire
quelles sont les sorties.

56
00:03:43,930 --> 00:03:47,200
Cette fois-ci, je n'ai pas envie
d'avoir de sortie donc je dis,

57
00:03:47,980 --> 00:03:49,470
il n'y a pas de sortie.

58
00:03:49,480 --> 00:03:54,440
Ensemble vide. Et ensuite je
dois appeler la fonction comme

59
00:03:54,480 --> 00:03:59,090
le fichier, if test, et dire
quelles sont les entrées,

60
00:03:59,090 --> 00:04:01,260
ici je vais prendre 2 nombres 
et je vais les comparer.

61
00:04:01,880 --> 00:04:04,370
Je peux écrire maintenant le hub
de cette fonction, ça on sait

62
00:04:04,370 --> 00:04:13,510
déjà ce qu'on va faire, alors, if test
vérifie si A est plus petit que B.

63
00:04:17,050 --> 00:04:21,960
Première chose à faire, c'est de
vérifier avec la commande "if",

64
00:04:23,220 --> 00:04:30,860
A plus petit que B. Maintenant je
dois faire plusieurs choses,

65
00:04:31,400 --> 00:04:41,460
par exemple, je peux juste if
écrire, A est plus petit que B.

66
00:04:43,830 --> 00:04:49,700
Je dois terminer le bloc de ce
"if", ma fonction est faite.

67
00:04:50,270 --> 00:04:51,800
Qu'est-ce qu'elle va faire ?

68
00:04:51,800 --> 00:04:56,860
Je sauvegarde et j'exécute, if
test, alors c'est une fonction

69
00:04:56,860 --> 00:05:00,870
donc je dois l'appeler avec des
arguments, par exemple, 3 virgule 4

70
00:05:00,870 --> 00:05:05,450
et elle me dit, A
est plus petit que B.

71
00:05:06,420 --> 00:05:08,680
Alors qu'est- ce qui se
passe si je fais 4-3.

72
00:05:08,680 --> 00:05:14,250
Il n'y a rien qui se passe et
effectivement, cette fonction

73
00:05:14,310 --> 00:05:20,350
nous dit, il n'y a rien qui doit
se faire quand le nombre A

74
00:05:20,380 --> 00:05:22,940
est plus grand ou égal à un nombre B.

75
00:05:24,010 --> 00:05:28,200
Alors je peux aussi écrire
plusieurs choses dans cette partie

76
00:05:28,200 --> 00:05:31,000
de code, entre le "if" et le
"end", ça s'appelle un bloc.

77
00:05:31,990 --> 00:05:49,460
Donc ici, commence le bloc des
commandes à exécuter si la condition

78
00:05:49,480 --> 00:05:59,960
est remplie. Et "end"
termine le bloc du "if".

79
00:06:03,100 --> 00:06:06,810
Donc ça veut dire en gros, on
peut écrire entre le "if" et

80
00:06:07,040 --> 00:06:10,370
le "end" plusieurs commandes qui
peuvent être montrées à l'écran.

81
00:06:10,430 --> 00:06:18,860
Par exemple, je peux vouloir aussi
écrire exactement la condition,

82
00:06:19,300 --> 00:06:24,350
A plus petit que B, donc je vais
transformer A dans une chaîne

83
00:06:24,350 --> 00:06:28,180
de 40 caractères avec la commande
num to string (num2str), ensuite

84
00:06:28,210 --> 00:06:37,660
je vais mettre le symbole "plus
petit" et ensuite aussi transformer

85
00:06:37,660 --> 00:06:39,370
le nombre B en chaîne de caractères.

86
00:06:39,850 --> 00:06:43,170
Je lie tout ça dans une seule
chaîne de caractères, c'est pour

87
00:06:43,170 --> 00:06:46,400
ça qu'il y a les parenthèses
carrées et je peux sauvegarder

88
00:06:47,000 --> 00:06:57,240
et maintenant exécuter ma fonction
et 3 plus petit que 4 apparaît.

89
00:06:57,750 --> 00:07:03,090
Alors les espaces à l'intérieur
de la parenthèse ne sont pas

90
00:07:03,240 --> 00:07:09,400
si importants que ça, on peut
aussi rajouter d'autres blocs

91
00:07:10,090 --> 00:07:14,190
et d'autres conditions "if",
alors maintenant je peux dire,

92
00:07:15,050 --> 00:07:28,230
si A est plus grand que 0, et
aussi B est plus grand que 0,

93
00:07:28,230 --> 00:07:33,840
donc c'est entre les 2, je dois
mettre les symboles du "et"

94
00:07:34,350 --> 00:07:47,330
donc c'est double ampersand, alors je vais
exécuter une autre liste de commande.

95
00:07:47,330 --> 00:07:53,700
Ici, je veux simplement dire,
les 2 nombres sont positifs.

96
00:07:59,670 --> 00:08:09,760
Maintenant, si j'exécute avec 3
et 4, j'ai les 3 phrases qui

97
00:08:09,760 --> 00:08:17,530
s'impriment, si je fais avec 4-3,
alors les 2 nombre sont positifs,

98
00:08:17,530 --> 00:08:20,310
c'est affiché à l'écran.

99
00:08:20,930 --> 00:08:30,710
Mais si je prends les nombres moins 3
moins 4, il n'y a rien qui s'affiche.

100
00:08:31,030 --> 00:08:37,430
Est-ce que je peux rajouter
quelque chose à faire si

101
00:08:37,430 --> 00:08:38,960
une des conditions n'est pas remplie ?

102
00:08:39,030 --> 00:08:43,810
Alors maintenant, je voudrais
imprimer quelque chose à l'écran

103
00:08:44,180 --> 00:08:47,480
dans le cas où A n'est
pas plus petit que B.

104
00:08:48,010 --> 00:08:56,540
Alors ce que je peux faire, c'est
de rajouter un bloc à exécuter

105
00:08:58,430 --> 00:09:03,540
dans le cas contraire. Donc d'abord
if A plus petit que B,

106
00:09:03,540 --> 00:09:09,850
alors je fais quelque chose autrement,
ça c'est bloc à exécuter.

107
00:09:11,240 --> 00:09:19,430
Si A est plus grand ou égal à B.

108
00:09:20,350 --> 00:09:33,280
Alors là, on peut dire que A
est plus grand ou égal à B.

109
00:09:37,130 --> 00:09:44,840
la fonction, elle va
afficher quelque chose même

110
00:09:44,840 --> 00:09:46,300
dans le cas où A est plus grand que B.

111
00:09:49,380 --> 00:09:55,640
On peut aussi rajouter au milieu
entre les "if" et le "else"

112
00:09:55,990 --> 00:10:04,540
d'autres conditions qui s'exécutent
si la première n'est pas remplie.

113
00:10:05,120 --> 00:10:11,280
Donc par exemple, j'aimerais dire
que si A est égal à B,

114
00:10:11,280 --> 00:10:22,780
alors dans ce bloc, on va simplement
écrire A est égal à B.

115
00:10:23,200 --> 00:10:29,700
Et du coup. Ce qui reste, la
condition qui reste si A n'est

116
00:10:29,700 --> 00:10:33,530
pas plus petit que B, il n'est
pas égal à B, alors c'est juste.

117
00:10:34,610 --> 00:10:37,240
A est plus grand que B.

118
00:10:38,290 --> 00:10:47,440
Donc je peux exécuter mon test
en disant, moins 3 moins 3,

119
00:10:47,440 --> 00:10:58,050
A est égal à B, ou encore moins 3
moins 4, A est plus grand que B

120
00:10:58,050 --> 00:11:04,670
donc on a la possibilité d'utiliser
des conditions avec "if"

121
00:11:05,480 --> 00:11:09,500
et cette condition, on peut la
complémenter avec "else if" ou

122
00:11:09,520 --> 00:11:17,220
"else", et chacun de ces blocs
est exécuté selon la condition

123
00:11:18,170 --> 00:11:21,570
A plus petit que B ou la condition
qui est donnée dans le "if".

124
00:11:23,250 --> 00:11:27,580
Pour contrôler ce qui se passe
dans un programme, on peut aussi

125
00:11:27,830 --> 00:11:30,200
utiliser le mot clé "switch".

126
00:11:30,450 --> 00:11:32,030
Alors comment marche ce "switch" ?

127
00:11:32,720 --> 00:11:35,920
Je fais encore une fonction, cette
fois-ci, je l'ai déjà préparée,

128
00:11:36,550 --> 00:11:39,490
alors je veux construire une
fonction qui s'appelle "switch

129
00:11:39,490 --> 00:11:43,400
test", et donner un nombre de points,
il rend la note correspondante.

130
00:11:45,130 --> 00:11:50,730
D'abord on va contrôler que le
nombre de points est positif

131
00:11:51,910 --> 00:12:03,180
et plus petit que 10. Donc si le
nombre de points est négatif,

132
00:12:03,180 --> 00:12:10,070
ou, alors le "ou", on a dit, il faut
utiliser cette barre verticale.

133
00:12:10,910 --> 00:12:14,660
Pour le faire, moi je
dois faire Alt 7.

134
00:12:15,760 --> 00:12:17,070
Alors ça dépend de votre clavier.

135
00:12:20,240 --> 00:12:31,590
Donc si les points sont négatifs
ou les points sont plus que

136
00:12:31,590 --> 00:12:40,030
10, alors en fait, il y a un
problème dans l'appel de cette

137
00:12:40,030 --> 00:12:45,290
fonction, alors la note, on va
dire qu'elle n'est pas définie,

138
00:12:45,310 --> 00:12:51,670
NA dit, c'est à dire non acquis.

139
00:12:55,750 --> 00:13:00,410
Et puis un n'arrête tout de suite la
fonction, ça, on ne l'a pas encore vu.

140
00:13:00,410 --> 00:13:05,540
Si on veut arrêter tout de suite
l'exécution d'une fonction,

141
00:13:05,570 --> 00:13:10,690
on peut utiliser le mot clé Return,
ça a du sens seulement depuis

142
00:13:10,690 --> 00:13:14,550
qu'on sait faire des conditions,
s'il n'y a pas de conditions,

143
00:13:14,980 --> 00:13:17,320
une fois qu'on appelle Return, c'est
comme dire, voilà, c'est fini.

144
00:13:17,360 --> 00:13:22,240
Et maintenant, ici on finit tout
de suite si le nombre de points

145
00:13:22,600 --> 00:13:23,860
est négatif ou plus grand que 10.

146
00:13:23,860 --> 00:13:31,770
Et maintenant, je termine
le bloc lié à ce "if".

147
00:13:34,610 --> 00:13:37,600
Alors maintenant, on sait que les
points, ils sont entre 0 et 10.

148
00:13:42,580 --> 00:13:45,030
Maintenant, j'utilise
le mot clé "switch".

149
00:13:45,370 --> 00:13:47,540
Alors, ce "switch",
qu'est-ce qu'il fait?

150
00:13:48,050 --> 00:13:53,770
Il regarde si une variable, ici
la variable point, elle est

151
00:13:54,230 --> 00:13:56,950
dans un certain cas,
qu'on appelle "case".

152
00:13:58,320 --> 00:14:06,760
Alors le premier cas, c'est par
exemple si j'ai 9 ou 10 points.

153
00:14:09,580 --> 00:14:21,010
Alors la note va être A, on
obtient la meilleure note ou si

154
00:14:21,010 --> 00:14:26,360
vous voulez, (en Suisse) on utilise
la note 6 pour la meilleure

155
00:14:26,360 --> 00:14:29,560
note, ainsi vous décidez
ce que vous voulez.

156
00:14:30,680 --> 00:14:36,430
Ensuite le cas où on a 8 points.

157
00:14:41,840 --> 00:14:46,430
Vous voyez, avant, j'avais 2 cas,
9 et 10, je les ai mis entre

158
00:14:46,930 --> 00:14:51,480
accolades, maintenant j'ai un
seul cas, alors il me suffit

159
00:14:51,480 --> 00:15:00,830
de dire le cas 8, alors dans ce cas, on
va obtenir la note 5 virgule 5.

160
00:15:02,410 --> 00:15:09,770
Ici, c'est rendu sous forme d'une
chaîne de caractères, on pourrait

161
00:15:09,770 --> 00:15:15,130
aussi décider que c'est
sous forme de noms.

162
00:15:16,880 --> 00:15:21,090
Donc à chaque fois, j'ai le droit
de faire un petit bloc, exécuter,

163
00:15:21,210 --> 00:15:25,610
un bloc ça veut dire, on peut
mettre plusieurs commandes à

164
00:15:25,610 --> 00:15:41,160
la suite, alors 7, on va dire 25, 25
sur 6, et en fait maintenant,

165
00:15:41,160 --> 00:15:44,780
on trouve que nos étudiants, ils
doivent toujours avoir au moins

166
00:15:44,780 --> 00:15:57,120
5 de moyenne, sinon, on n'est
pas content, alors si dans tout

167
00:15:58,900 --> 00:16:08,630
autre cas, on va dire que
la note est égale à 3.

168
00:16:10,800 --> 00:16:14,140
Si on n'a pas fait au moins 7 points,
on ne mérite pas la moyenne

169
00:16:16,860 --> 00:16:22,270
un peu sévère. Maintenant, j'ai fini
tous mes cas donc le "switch"

170
00:16:25,860 --> 00:16:35,620
est terminé, je dois fermer le
bloc de "switch" avec "end" et

171
00:16:35,620 --> 00:16:42,300
puis terminer ma fonction. Maintenant,
je vais utiliser ma fonction.

172
00:16:43,060 --> 00:16:46,510
Si j'ai fait 9 points, très bien.

173
00:16:47,250 --> 00:16:57,480
Si j'ai fait moins de points,
ce n'est vraiment pas bon, 

174
00:16:57,480 --> 00:16:58,530
ce n'est pas acquis du tout.

175
00:16:59,560 --> 00:17:06,100
Si j'ai fait 7 points, j'ai la note 5.

176
00:17:06,100 --> 00:17:09,910
Le flux des opérations peut se
contrôler avec les mots clés,

177
00:17:09,930 --> 00:17:12,930
"if", "else" ou encore "switch"
qui est moins sophistiqué et

178
00:17:12,930 --> 00:17:14,410
parfois d'utilisation plus claire.

179
00:17:14,920 --> 00:17:16,960
Ce sont les premiers
éléments de programmation.

180
00:17:17,400 --> 00:17:20,110
L'étape suivante est l'utilisation
des boucles afin de répéter

181
00:17:20,110 --> 00:17:21,230
un bloc de code plusieurs fois.

