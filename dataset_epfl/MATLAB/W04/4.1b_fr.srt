1
00:00:04,550 --> 00:00:08,150
Des fonctions définies par
vous-même dans un fichier point M

2
00:00:08,800 --> 00:00:13,010
sont très utiles pour être
réutilisées d'un côté, et de l'autre

3
00:00:13,010 --> 00:00:16,660
aussi pour faire une structure
de programme assez complexe.

4
00:00:18,180 --> 00:00:21,370
Donc, vous pouvez avoir à une
librairie de plusieurs fonctions

5
00:00:21,680 --> 00:00:24,650
et vous savez après laquelle
appeler au bon moment.

6
00:00:25,710 --> 00:00:29,330
Il y a aussi des fonctions anonymes,
ce sont des fonctions beaucoup

7
00:00:29,330 --> 00:00:33,120
plus simples, rapides d'utilisation,
mais qu'après vous mettez

8
00:00:34,160 --> 00:00:37,600
à la poubelle et que vous
n'utilisez peut-être plus.

9
00:00:37,600 --> 00:00:41,190
Comment construit-on ces
fonctions anonymes?

10
00:00:42,970 --> 00:00:44,790
On est arrivé ici. On a A, on a Z.

11
00:00:45,180 --> 00:00:49,180
Maintenant on aimerait construire
une fonction qui fait la même

12
00:00:49,180 --> 00:00:52,490
chose, donc A fois Z ou A fois X.

13
00:00:54,910 --> 00:00:59,530
Mais on n'a pas envie de construire
un fichier qui efface tout ça.

14
00:01:00,930 --> 00:01:02,260
La syntaxe est assez simple.

15
00:01:02,360 --> 00:01:05,120
On fait F. Qu'est-ce que c'est F ?

16
00:01:05,480 --> 00:01:14,820
C'est une fonction qui
prend comme entrée A et X.

17
00:01:14,820 --> 00:01:17,590
Et comme sortie, elle
va rendre A fois X.

18
00:01:23,400 --> 00:01:25,710
Maintenant, on peut faire
tourner mon script.

19
00:01:27,190 --> 00:01:28,780
Ma fonction F est définie.

20
00:01:28,950 --> 00:01:32,800
Vous voyez. C'est F qui prend A et X.

21
00:01:32,800 --> 00:01:34,350
Je peux l'évaluer quelque part.

22
00:01:34,410 --> 00:01:38,250
Alors déjà, je peux l'évaluer ici,
puisque le script m'a donné

23
00:01:38,250 --> 00:01:44,390
accès à ses variables. Je peux
prendre A et Z et j'obtiens

24
00:01:44,390 --> 00:01:47,620
le vecteur, qui est d'ailleurs
le même, que V.

25
00:01:50,380 --> 00:01:53,180
Alors ici, ce n'est pas possible
d'intégrer des commentaires.

26
00:01:53,180 --> 00:01:55,330
Les seuls commentaires possibles
qu'on peut faire, c'est juste

27
00:01:55,330 --> 00:01:59,810
avant sa définition, et
dire F calcule AX.

28
00:01:59,900 --> 00:02:04,630
Ça, c'est une première chose.

29
00:02:05,260 --> 00:02:09,370
Maintenant, il y a une autre
particularité de ces fonctions anonymes.

30
00:02:09,370 --> 00:02:14,480
Admettons qu'on a un paramètre
qu'on veut insérer, par exemple

31
00:02:16,150 --> 00:02:22,600
un paramètre qui est 3 égal à
3, et je veux l'utiliser ici.

32
00:02:22,970 --> 00:02:25,930
Un petit a fois X.

33
00:02:27,470 --> 00:02:31,140
Je sauvegarde. Je nettoie ma fenêtre.

34
00:02:31,270 --> 00:02:43,110
Maintenant je fais tourner mon
script, et je peux regarder

35
00:02:43,110 --> 00:02:46,870
ce que ça donne, A,Z.

36
00:02:47,110 --> 00:02:50,360
J'ai multiplié fois 3, le
résultat de tout à l'heure.

37
00:02:51,330 --> 00:02:55,690
Est-ce que si je change A, est-ce que
je vais obtenir un autre résultat?

38
00:02:55,690 --> 00:02:57,490
Par exemple, je dis A égal à 0.

39
00:02:58,510 --> 00:03:01,950
Ok. J'appelle à nouveau F de A Z.

40
00:03:03,110 --> 00:03:08,490
Et en effet, on n'a pas changé la valeur
de l'évaluation de la fonction.

41
00:03:09,280 --> 00:03:14,010
Pourquoi? Parce que la valeur de
A a été intégrée directement

42
00:03:14,010 --> 00:03:15,650
dans la fonction anonyme.

43
00:03:16,100 --> 00:03:21,610
Je peux même nettoyer la variable
A, évaluer la fonction F.

44
00:03:25,510 --> 00:03:29,820
Cette fonction va marcher même si,
quand je regarde la fonction,

45
00:03:29,820 --> 00:03:33,490
elle me dit, mais c'est la
fonction A, donc le petit a

46
00:03:33,490 --> 00:03:35,900
fois la matrice A fois X.

47
00:03:40,000 --> 00:03:45,080
Donc, c'est aussi utile d'utiliser
ces fonctions anonymes pour

48
00:03:45,110 --> 00:03:49,210
intégrer des paramètres directement
et après, oublier ces paramètres.

49
00:03:49,210 --> 00:03:54,480
Donc, ici je pourrais même me dire
qu'on va nettoyer le petit a.

50
00:03:55,890 --> 00:04:00,460
Il y a ainsi une autre façon de
définir rapidement les fonctions.

51
00:04:01,130 --> 00:04:03,050
Ça s'appelle les fonctions inline.

52
00:04:03,030 --> 00:04:05,370
Alors, comment est la syntaxe ?

53
00:04:05,370 --> 00:04:06,840
Donc, je dois dire G.

54
00:04:06,850 --> 00:04:10,110
Donc, je prends une autre fonction,
mais cette fois-ci je dis

55
00:04:10,110 --> 00:04:18,720
que cette fonction inline
est égale à A fois X.

56
00:04:20,310 --> 00:04:27,570
Donc, ici j'ai une chaîne de caractères
qui décrit les opérations à faire.

57
00:04:27,570 --> 00:04:30,860
Et maintenant, je dois dire quelles
sont les entrées de ma fonction.

58
00:04:31,210 --> 00:04:34,730
Alors ici les entrées sont A et X.

59
00:04:34,760 --> 00:04:37,920
Je dois lui dire explicitement
quelles sont les entrées.

60
00:04:39,510 --> 00:04:46,300
Voilà. Je peux faire cette
définition et je peux aussi faire

61
00:04:46,300 --> 00:04:50,200
un appel, donc W égal à G2A,Z.

62
00:04:58,850 --> 00:05:03,060
Et je peux faire tourner mon script.

63
00:05:03,620 --> 00:05:07,560
Regardez ce qu'est W et je vois
que c'est la même chose que V.

64
00:05:08,660 --> 00:05:11,360
Essayons de mettre ce
paramètre A à l'intérieur.

65
00:05:11,400 --> 00:05:12,530
Alors, j'en ai besoin.

66
00:05:13,600 --> 00:05:14,440
J'efface le client A.

67
00:05:14,440 --> 00:05:19,720
Je dis A égal, cette fois-ci je
prends 0, comme ça je vais tout

68
00:05:19,720 --> 00:05:21,360
de suite voir s'il est
pris en compte ou pas.

69
00:05:21,960 --> 00:05:30,900
Je fais A fois, appelons-le P comme ça,
c'est un paramètre supplémentaire.

70
00:05:32,790 --> 00:05:34,050
Donc, P fois A fois X.

71
00:05:36,000 --> 00:05:42,360
Et maintenant, je vais
exécuter mon script.

72
00:05:44,430 --> 00:05:51,720
W est égal à 0. Effectivement le
paramètre a été pris en compte.

73
00:05:52,270 --> 00:05:53,870
Voyons si je peux le nettoyer.

74
00:05:54,250 --> 00:06:03,420
Je vais nettoyer le paramètre P, mais
avant de faire appel à la fonction.

75
00:06:05,760 --> 00:06:06,890
Comme on aurait pu faire ici.

76
00:06:11,960 --> 00:06:15,590
Donc ici, avant on le nettoyait
tout de suite et on pouvait

77
00:06:15,590 --> 00:06:18,900
encore utiliser la fonction.
Est-ce que c'est encore le cas?

78
00:06:19,790 --> 00:06:25,610
Je vais exécuter. Et le paramètre
a été encore pris en compte.

79
00:06:28,120 --> 00:06:31,470
P n'est pas défini, mais quand
vous définissez la fonction G,

80
00:06:32,110 --> 00:06:35,830
en fait si vous appelez la fonction
G avec A et a, vous retrouvez..

81
00:06:36,160 --> 00:06:37,730
le paramètre.

82
00:06:38,610 --> 00:06:42,040
Attention, c'est possible que dans
certaines versions d'Octave ou de Matlab.

83
00:06:44,350 --> 00:06:47,640
Quand vous exécutez ces trois dernières
lignes, vous avez une erreur.

84
00:06:48,230 --> 00:06:50,180
Il y a des fonctions
qui sont prédéfinies.

85
00:06:50,160 --> 00:06:50,960
Des fonctions build in.

86
00:06:50,700 --> 00:06:55,540
Celles-ci sont accessibles à tout
moment, et vous pouvez voir

87
00:06:56,680 --> 00:06:59,110
leur utilisation en divisant L.

88
00:06:59,110 --> 00:07:01,310
Ensuite, il y a des fonctions
définies par l'utilisateur.

89
00:07:01,350 --> 00:07:05,030
Nous avons vu un petit exemple pour
comment les mettre en place.

90
00:07:05,030 --> 00:07:07,060
On en verra d'autres
par la suite du cours.

91
00:07:08,030 --> 00:07:10,870
Après, il y a les fonctions
anonymes inline qu'on va utiliser

92
00:07:10,870 --> 00:07:16,780
plutôt pour des calculs ou des
utilisations très rapides.

93
00:07:17,000 --> 00:07:21,610
On ne va pas les sauvegarder quelque
part pour une utilisation ultérieure.

94
00:07:22,320 --> 00:07:24,860
Utiliser proprement une fonction
ou en définir de nouvelles,

95
00:07:24,860 --> 00:07:28,290
c'est essentiel pour pouvoir écrire
des algorithmes ou des programmes.

96
00:07:28,830 --> 00:07:33,280
Les organiser dans des fichiers permet
d'isoler certaines fonctionnalités,

97
00:07:33,450 --> 00:07:36,140
et aussi d'éviter dans la
mesure du possible des bugs.

98
00:07:36,950 --> 00:07:40,600
Bon malheureusement, ce n'est pas
possible d'éviter tous les bugs.

99
00:07:40,600 --> 00:07:42,410
Il n'y a pas une recette pour cela.

100
00:07:42,830 --> 00:07:46,190
Souvent, c'est l'expérience qui
va vous aider pour résoudre

101
00:07:46,430 --> 00:07:48,780
des problèmes de bug, quand
vous en rencontrez.

