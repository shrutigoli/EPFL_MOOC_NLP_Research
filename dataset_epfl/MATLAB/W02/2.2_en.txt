We'll see how to work with vectors and matrices.
First, we will see sum and multiplication applications are defined as in mathematics.
In addition, it is possible to do operations element by element.
Consider first the basic vector operations.
You can define vectors, e.g columns.
I need the equal symbol to define the variable and then brackets to enter the values â€‹â€‹of this vector.
So then I hit enter, the vector is defined and I can see the form. This vector is a
2, 4, 5 columns.
I can also set row vectors.
The syntax is very similar.
I also use brackets.
I have minus 2. I put a comma instead of the semicolon,
3.4 and I close the brackets.
On my keyboard, there are no brackets.
They are here on the 5 and 6.
So maybe we can see them when we look for them on the keyboard.
We can also define a copy of a vector.
For example, V can equal my vector lines we saw earlier.
I can see the size of this vector V which is a 1 by 3 vector.
So 1 row 3 columns.
While the size of the columns vector is 3 by1.
I can also define vectors by concatenation.
For example, I can set a vector A which is equal to the vector ranging from minus 1 to 4 which is distributed.
It means that the distance between a value and the other is always the same.
Here default is 1.
I can also define a vector B that is distributed, but with a distance of 2 between the elements.
So for example, minus 0.5 in steps of 2 to get to
For example, 3
We see there is only minus 0.5 and 1.5.
If I go up to 5, the last entry will be 3.5.
Why? Because 5 is the upper limit, but not always reached. If I write that B is minus 0.5 to 3.5 in steps of 2, I get the same thing.
Each time, we redefine the variable B.
When I do B equal, I will crush the existing value already in B, the last one I defined will remain in the memory.
There is another way to define equidistributed vectors it is with the In space,C equals Inspace.
So then I make sure I have the range
I want.
For example between 2.1 and 4.2 and
I want 4 elements.
So I am sure I have 4 elements, the first and last are given and those in the middle are calculated automatically.
We can manipulate vectors by a concatenation that is to say, put them together, extract some or also transpose a vector.
First, clean up our environment with clear all.
I erase all the variables that I have in my environment.
Now, I define a new variable, eg A which was equal to minus 1 to 5.
Now if I type enter A will be displayed on the screen.
I did not want to see each time what
I just typed then I do the semicolon like that the variable is defined, it has the values â€‹â€‹I expect, but isn't displayed again on the screen.
I define a second vector which goes from 0.5 with a step of 1.4 up to 6.
And again, I do not want to see the content.
And I want to put together the vectors
A and B in a single vector line.
I need to new brackets and I put
A and B following.
I have a vector line consisting of
8 columns with the first inputs A and then B.
Now I can extract values â€‹â€‹of this vector.
For example, I want the third value so I do C 3.
If I want more values once, I can take and I can even put them in another vector.
So I can have the vector X that is equal to some entries
C, for example I want the inputs
2, 4 and 5.
I can even take another value, the first, won't be in the same order and
I retrieve these indexes then C.
That's my new vector it is always a vector line but with only some entries of C.
A column vector can be transposed to a row vector.
If I do X with this symbol, it is a small symbol that ressembles a derivative function, but is not at all the derivative is the transpose.
The vector lines now is a column vector.
Let's now see sum and scalar multiplication.
I clean my environment again and
I define two vectors.
This time, I take a little smaller vectors column vectors with  3 entries.
I separate with a semicolon because
I want them in columns.
Think of the semicolon like going to the line.
I defined A and B in the second vector.
I define the same size because
I'm going to work with
A and B together, do the sum, they should be the same size. If I make C equal to
A plus B, I get a vector which has the same size as
A and B of which the entries are the sum of the inputs A and B.
Here I multiply by a scalar by a number so I will take 3.2 times the vector A.
I get less than 9, 6; 6,4; 3, 2, the A inputs multiplied by 3,2.
So as I said the sizes of the vectors must be the same if we want the sum
If I have a vector that is too long, for example, I take along vector which is equal to concatenation of A and B, here
I have to take A semicolon B,
I'll concatenate A and B a single column. And then I do the sum of A and this new vector, I'll get an error because the vectors are not compatible, do not have the same size.
There is a particular vector the zero vector.
I define a new variable zero vector that is set as size 0 4,1.
What does that mean?
I have a column vector with 4 inputs all equal to 0.
I can also define a vector of 1, this time, I will take the vector lines.
So I can point 1,4 and I get a vector lines with 4 inputs all equal to 1.
