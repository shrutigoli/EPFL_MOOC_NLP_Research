1
00:00:00,000 --> 00:00:06,200
In a previous episode we saw
that to program is to describe a

2
00:00:06,200 --> 00:00:12,686
task that we want the computer to execute,
and that this task can be broken down into

3
00:00:12,686 --> 00:00:18,475
data that will represent real life variables
on the one hand,

4
00:00:18,475 --> 00:00:20,371
and a number of computations,
manipulations,

5
00:00:20,371 --> 00:00:23,552
and operations on the other hand.

6
00:00:23,552 --> 00:00:25,350
We have seen how some
computations

7
00:00:25,350 --> 00:00:27,060
could operate on the data.

8
00:00:27,060 --> 00:00:30,062
But if we really want it to be
a program, the

9
00:00:30,062 --> 00:00:34,046
data must be able to influence the
computations.

10
00:00:34,046 --> 00:00:37,390
This is what are called control structures, and it's

11
00:00:37,390 --> 00:00:42,010
what we are going to have a look at
in this episode.

12
00:00:42,010 --> 00:00:43,858
Until now, our programs

13
00:00:43,858 --> 00:00:46,434
were simply made of instructions
that were

14
00:00:46,434 --> 00:00:50,446
executed one after the other, and the
data had no influence on

15
00:00:50,446 --> 00:00:51,468
the processing.

16
00:00:51,468 --> 00:00:54,315
To have influence, so that the
values

17
00:00:54,315 --> 00:00:58,403
of some of the data, some of the variables,
are able to alter

18
00:00:58,403 --> 00:01:01,619
the strictly linear flow of the execution,
we use

19
00:01:01,619 --> 00:01:04,490
what are called "control structures".

20
00:01:04,490 --> 00:01:08,086
Fundamentally, there exists three
types of control structures.

21
00:01:08,086 --> 00:01:11,580
First of all, the conditional branches,
which we are going to have a look at

22
00:01:11,580 --> 00:01:15,795
in this episode, and which allow
to select a sequence of code

23
00:01:15,795 --> 00:01:20,010
or another, depending on certain values.

24
00:01:20,010 --> 00:01:23,658
Next, we have the iterations, which
allow to

25
00:01:23,658 --> 00:01:27,990
repeat an entire sequence of instructions.
Finally, we have

26
00:01:27,990 --> 00:01:32,713
the conditional loops, which also let us
repeat

27
00:01:32,713 --> 00:01:36,880
a sequence of instructions, but
with a condition.

28
00:01:36,880 --> 00:01:41,038
Let's begin with the conditional

29
00:01:41,038 --> 00:01:45,860
branches, which let you skip
certain

30
00:01:45,860 --> 00:01:51,510
parts of the program, or let you choose
what parts of the program to execute.

31
00:01:51,510 --> 00:01:53,051
Let's take a concrete example.

32
00:01:53,051 --> 00:01:56,401
Suppose for example you want to do
one thing or the other

33
00:01:56,401 --> 00:02:00,710
depending on an a value
entered by the user.

34
00:02:00,710 --> 00:02:06,040
Suppose for example that you want
to execute a certain sequence of

35
00:02:06,040 --> 00:02:10,710
instructions if n is less than
five,

36
00:02:10,710 --> 00:02:13,350
for example to print out that the
number is less

37
00:02:13,350 --> 00:02:16,142
than five, and contrariwise if n
is greater or

38
00:02:16,142 --> 00:02:20,515
equal to five, then you want to execute
another sequence of instructions.

39
00:02:20,515 --> 00:02:22,475
Well this right here is what
we call

40
00:02:22,475 --> 00:02:26,930
a conditional branch, and we are now
going to detail it's use.

41
00:02:26,930 --> 00:02:31,547
To this effect, you first have
a part that begins with

42
00:02:31,547 --> 00:02:34,585
the keyword "if", that will make
this branching.

43
00:02:34,585 --> 00:02:39,486
Here, this "if" will let you make
a choice.

44
00:02:39,486 --> 00:02:45,185
If the condition that follows it
is true, the "if" will execute the

45
00:02:45,185 --> 00:02:50,758
instructions indicated below. 
You could

46
00:02:50,758 --> 00:02:56,610
optionally have an "else part",
which is used with

47
00:02:56,610 --> 00:03:02,553
the keyword "else", which is here.
If the condition isn't

48
00:03:02,553 --> 00:03:08,330
true, then this second part will
be executed.

49
00:03:08,330 --> 00:03:10,965
The general structure is the
following.

50
00:03:10,965 --> 00:03:17,130
We have the keyword "if", that is followed 
by a condition given in parentheses. We'll

51
00:03:17,130 --> 00:03:21,892
come back later on the conditions. Then
we have an opening brace, a block

52
00:03:21,892 --> 00:03:25,008
of instructions that we want to
execute if

53
00:03:25,008 --> 00:03:28,218
the condition is true. When the
condition

54
00:03:28,218 --> 00:03:31,403
is true, this block of instructions
will

55
00:03:31,403 --> 00:03:34,685
be executed. Then there's a
closing brace.

56
00:03:34,685 --> 00:03:37,711
Then, we can optionally have

57
00:03:37,711 --> 00:03:40,980
the keyword "else", another
opening

58
00:03:40,980 --> 00:03:47,015
brace, another block of instructions, here
in blue, that will be executed

59
00:03:47,015 --> 00:03:52,374
if the condition is false. So
that's the

60
00:03:52,374 --> 00:03:57,770
general structure, but let's have a step-
by-step look at a particular example.

61
00:03:57,770 --> 00:04:01,418
In this example, the control
structure, the conditional

62
00:04:01,418 --> 00:04:05,220
statement that we are interested in, will
be found here. Before, we

63
00:04:05,220 --> 00:04:08,705
start by declaring a int-type variable n

64
00:04:08,705 --> 00:04:12,207
that we didn't initialize,
so here we don't

65
00:04:12,207 --> 00:04:15,436
know it's value yet. Then we print
the

66
00:04:15,436 --> 00:04:18,880
message "entrer un nombre" (= "enter a number")
on the terminal, followed by

67
00:04:18,880 --> 00:04:21,500
a line-break. Then we wait for an
input

68
00:04:21,500 --> 00:04:25,395
of type integer from the user.

69
00:04:25,395 --> 00:04:28,610
Lets' suppose the user
inputs the value 3.

70
00:04:28,610 --> 00:04:31,106
So now n has value 3.

71
00:04:31,106 --> 00:04:34,538
We now come to our conditional branch,
which is

72
00:04:34,538 --> 00:04:36,990
introduced by the keyword "if",
here,

73
00:04:36,990 --> 00:04:41,690
and which has it's condition in
parentheses: n smaller than five.

74
00:04:41,690 --> 00:04:44,243
We ask ourselves,

75
00:04:44,243 --> 00:04:46,820
is n stricly smaller than 5?

76
00:04:46,820 --> 00:04:51,770
3 is strictly smaller than 5.
Here the condition is

77
00:04:51,770 --> 00:04:56,960
thus true, and we execute the code,
the block that

78
00:04:56,960 --> 00:05:02,056
immediately follows the "if".
So, what happens is that we

79
00:05:02,056 --> 00:05:05,085
arrive at the execution of cout,
"votre nombre est... (= "your number is...)

80
00:05:05,085 --> 00:05:07,750
...plus petit que 5" (= ...smaller than 5"),
is the message that will be displayed.

81
00:05:07,750 --> 00:05:12,106
The execution then continues after
the block.

82
00:05:12,106 --> 00:05:15,432
In other word we skip directly
to the

83
00:05:15,432 --> 00:05:19,850
instruction here that prints the message
"Au revoir" (= "Bye"), and the program ends.

84
00:05:19,850 --> 00:05:23,760
What about if at this step

85
00:05:23,760 --> 00:05:27,717
here, the user had entered the
value 7?

86
00:05:27,717 --> 00:05:32,877
At this stage, the program will
check again, whether

87
00:05:32,877 --> 00:05:38,030
7 is strictly smaller than 5.
But now the condition is false.

88
00:05:38,030 --> 00:05:41,040
7 is not strictly smaller than 5.

89
00:05:41,040 --> 00:05:47,959
As the condition is false, the if
will this time skip to the else part,

90
00:05:47,959 --> 00:05:50,848
and completely ignore the previous

91
00:05:50,848 --> 00:05:53,326
part and branch directly (hence
the name "conditional

92
00:05:53,326 --> 00:05:57,726
branch"), to branch directly here
at this display line

93
00:05:57,726 --> 00:06:03,800
that will print that the number n
is greater or equal to 5.

94
00:06:03,800 --> 00:06:07,410
Then we continue the execution
of the program

95
00:06:07,410 --> 00:06:09,613
after the block, the part of the
program

96
00:06:09,613 --> 00:06:12,235
that follows the conditional
branch,

97
00:06:12,235 --> 00:06:14,760
and display the last message
"Au revoir".

98
00:06:14,760 --> 00:06:19,255
The curly braces are used to
define

99
00:06:19,255 --> 00:06:22,747
the block of instructions that is
going to be monitored,

100
00:06:22,747 --> 00:06:26,416
either the block of instructions that
is executed when

101
00:06:26,416 --> 00:06:28,880
the condition is true, or the
block

102
00:06:28,880 --> 00:06:32,946
of instructions that is executed when
the condition is false.

103
00:06:32,946 --> 00:06:35,954
The block of instructions is the set
of instructions

104
00:06:35,954 --> 00:06:38,386
that we want to monitor, on which
we want

105
00:06:38,386 --> 00:06:41,010
to branch, and we can

106
00:06:41,010 --> 00:06:44,432
gather many instructions, as
many as we like,

107
00:06:44,432 --> 00:06:46,750
in one block. Let's suppose for
example that we

108
00:06:46,750 --> 00:06:49,497
not only want to print that
the number

109
00:06:49,497 --> 00:06:53,701
is smaller than five, but also print
the value of the number.

110
00:06:53,701 --> 00:06:57,990
In that case, when the condition is
true, we'll simply, in the block

111
00:06:57,990 --> 00:07:01,645
monitored by the condition, when
the condition is

112
00:07:01,645 --> 00:07:04,150
true, here, add a line to this
block.

113
00:07:04,150 --> 00:07:06,250
This is perfectly possible and

114
00:07:06,250 --> 00:07:09,665
lets us monitor many instructions
with our

115
00:07:09,665 --> 00:07:11,320
conditional branch.

116
00:07:11,320 --> 00:07:14,808
When a block includes a single

117
00:07:14,808 --> 00:07:18,436
instruction, the curly braces are
absolutely optional.

118
00:07:18,436 --> 00:07:22,156
I urge you however to always
use these blocks and always

119
00:07:22,156 --> 00:07:25,690
put these curly braces, in order
to keep the code

120
00:07:25,690 --> 00:07:29,785
readable and maintainable. But I'm
just pointing out that these

121
00:07:29,785 --> 00:07:34,650
curly braces are optional, in case
you come upon this kind of code.

122
00:07:34,650 --> 00:07:38,220
Likewise, the else block is
also totally

123
00:07:38,220 --> 00:07:41,333
optional, we can have an

124
00:07:41,333 --> 00:07:45,469
if without any else. In that case if
the condition isn't

125
00:07:45,469 --> 00:07:51,100
true, then we'll simply continue
the execution of the program.

126
00:07:51,100 --> 00:07:56,855
We'll do a particular thing only
if the condition is true.

127
00:07:56,855 --> 00:08:00,074
If the condition is true, then we'll
additionally execute

128
00:08:00,074 --> 00:08:03,408
the block monitored by the
if.

129
00:08:03,408 --> 00:08:09,205
If I take an example, again with
the input value typed on a keyboard

130
00:08:09,205 --> 00:08:14,356
of an integer, with the test without
the else,

131
00:08:14,356 --> 00:08:19,920
so if the input value is strictly smaller
than five, for example

132
00:08:19,920 --> 00:08:25,307
three, in this case we'll branch here
and execute the display of "Votre

133
00:08:25,307 --> 00:08:29,746
nombre est plus petit que cinq", then
we'll continue with

134
00:08:29,746 --> 00:08:34,382
the rest of the program, so here
we'll print "Au revoir".

135
00:08:34,382 --> 00:08:38,878
Contrariwise, if we input a greater value,
strictly greater or

136
00:08:38,878 --> 00:08:41,342
equal to 5, for example
the value

137
00:08:41,342 --> 00:08:43,624
7, at that moment the test
is false and

138
00:08:43,624 --> 00:08:46,534
we simply don't execute anything
in

139
00:08:46,534 --> 00:08:50,530
particular, we simply continue
by

140
00:08:50,530 --> 00:08:55,690
ending the program by printing
the message "Au revoir".

141
00:08:55,690 --> 00:09:01,220
To sum up, the general structure of
a conditional branch in C++ is

142
00:09:01,220 --> 00:09:05,305
the following : we have an if
instruction followed by

143
00:09:05,305 --> 00:09:10,340
a condition in parentheses, then a
block of instructions here,

144
00:09:10,340 --> 00:09:15,621
in curly braces, which are the instructions
that are going to be executed if

145
00:09:15,621 --> 00:09:20,304
the condition is true, and
optionally the keyword "else"

146
00:09:20,304 --> 00:09:25,495
followed by a block of instructions which
are executed if the condition is false.

147
00:09:25,495 --> 00:09:28,382
And the instructions here that are
in the

148
00:09:28,382 --> 00:09:30,650
blocks are absolutely ordinary C++

149
00:09:30,650 --> 00:09:34,875
instructions, they can in particular
contain if statements themselves,

150
00:09:34,875 --> 00:09:38,181
which are so-called nested
statements.

151
00:09:38,181 --> 00:09:41,260
Let's take an example, suppose for
example

152
00:09:41,260 --> 00:09:44,329
that we have three values
x, y and z,

153
00:09:44,329 --> 00:09:50,061
and we want to test their
equality,

154
00:09:50,061 --> 00:09:53,899
test if x is equal to y, test if x

155
00:09:53,899 --> 00:09:57,709
is equal to z, or test if the three
variables are equal.

156
00:09:57,709 --> 00:10:01,949
We'll start for example by testing
if x is equal

157
00:10:01,949 --> 00:10:06,336
to y, and here you see we'll have a
block

158
00:10:06,336 --> 00:10:13,318
going all the way to here, so this is the
case where x is equal to y and if x is

159
00:10:13,318 --> 00:10:18,194
different from y, at that moment this
other block will be executed.

160
00:10:18,194 --> 00:10:22,322
If x is equal to y, then we can
enter a

161
00:10:22,322 --> 00:10:26,249
block of instructions and have
another

162
00:10:26,249 --> 00:10:31,870
instruction which contains its own
sub-block

163
00:10:31,870 --> 00:10:35,830
of true conditions, here, and optionally
an

164
00:10:35,830 --> 00:10:39,076
else for a sub-block of false
conditions.

165
00:10:39,076 --> 00:10:44,395
So if y is equal to y, we enter the
block, and

166
00:10:44,395 --> 00:10:46,796
if y is equal to z, then

167
00:10:46,796 --> 00:10:51,470
in this case we print that the
three values are equal.

168
00:10:51,470 --> 00:10:56,830
Otherwise, if y is equal to y but
y isn't equal to z,

169
00:10:56,830 --> 00:11:00,302
in this case we print

170
00:11:00,302 --> 00:11:04,760
this, only the two first values
are equal.

171
00:11:04,760 --> 00:11:09,677
We could also do so in the case
where x is different from y.

172
00:11:09,677 --> 00:11:13,340
Obviously, we shall not abuse this
kind of solutions.

173
00:11:13,340 --> 00:11:16,468
In practice, if you have more than
three levels, then

174
00:11:16,468 --> 00:11:19,193
the programs becomes
quickly unreadable.

175
00:11:19,193 --> 00:11:22,325
Let us now illustrate concretely

176
00:11:22,325 --> 00:11:27,534
the previous example with, for example,
the case where we have three variables

177
00:11:27,534 --> 00:11:30,215
x, y and z, all with value one.

178
00:11:30,215 --> 00:11:34,501
We begin with the first if: is x equal to y?

179
00:11:34,501 --> 00:11:40,260
Yes, one is equal to one, so we enter
the block here,

180
00:11:40,260 --> 00:11:45,613
so we are going to execute our second
if here : is y equal to z?

181
00:11:45,613 --> 00:11:47,527
So we ask ourselves the following
question :

182
00:11:47,527 --> 00:11:52,088
are the two values equal?

183
00:11:52,088 --> 00:11:55,444
In this case they are, 1 is equal
to 1, so we enter here this

184
00:11:55,444 --> 00:11:57,706
line, and message that

185
00:11:57,706 --> 00:12:00,970
is going to be printed is "les trois valeurs
sont égales" (= "the three values are all equal").

186
00:12:00,970 --> 00:12:03,994
Then the program will continue and
execute what follows.

187
00:12:03,994 --> 00:12:05,995
Here, there isn't anything to
execute afterwards.

188
00:12:05,995 --> 00:12:09,474
Execute the following of the first block,
of higher level, there

189
00:12:09,474 --> 00:12:12,760
still isn't any following, so the program
end here.

190
00:12:12,760 --> 00:12:15,040
Now suppose we have different

191
00:12:15,040 --> 00:12:17,516
values, for example that we have
the

192
00:12:17,516 --> 00:12:22,090
value 2 in z and y, and the value
1 in x.

193
00:12:22,090 --> 00:12:25,616
So here the first condition
will be

194
00:12:25,616 --> 00:12:28,368
tested, is 1 equal to 2?

195
00:12:28,368 --> 00:12:32,260
Of course not, so the condition
is false and we

196
00:12:32,260 --> 00:12:34,140
branch here on the corresponding

197
00:12:34,140 --> 00:12:37,924
else statement, and we execute

198
00:12:37,924 --> 00:12:41,140
this block here, with the test
of

199
00:12:41,140 --> 00:12:45,660
a second condition : is x equal
to z?

200
00:12:45,660 --> 00:12:47,730
Is 1 equal to 2?

201
00:12:47,730 --> 00:12:52,816
This is also false; so this second if
will branch on

202
00:12:52,816 --> 00:12:57,758
a block that will be executed, which
is this block here,

203
00:12:57,758 --> 00:13:03,180
which begins with a third
if

204
00:13:03,180 --> 00:13:07,820
statement, which will evaluate
its condition. Is y equal to z?

205
00:13:07,820 --> 00:13:09,492
2 is indeed equal to 2.

206
00:13:09,492 --> 00:13:13,034
So in this case we execute the
block that

207
00:13:13,034 --> 00:13:17,185
is monitored by the true condition,
so here we

208
00:13:17,185 --> 00:13:22,076
print that the two last values are
equal, then we

209
00:13:22,076 --> 00:13:25,332
end the program's execution, which
means

210
00:13:25,332 --> 00:13:28,300
we end the execution of the
instructions here

211
00:13:28,300 --> 00:13:29,476
that followed the if.

212
00:13:29,476 --> 00:13:34,372
There isn't anything, then the end
of the instructions of this

213
00:13:34,372 --> 00:13:38,000
block, there isn't anything either,
and finally the instructions

214
00:13:38,000 --> 00:13:40,738
of the higher level block, nothing
either

215
00:13:40,738 --> 00:13:43,000
in this particular case, and that's
how

216
00:13:43,000 --> 00:13:46,120
the example's program would
execute.

