1
00:00:00,000 --> 00:00:06,050
Now let's have a look at various
mistakes often made by

2
00:00:06,050 --> 00:00:09,550
beginner programmers, when it comes
to writing conditional branches.

3
00:00:09,550 --> 00:00:12,379
The first trap that awaits you is a
trap into

4
00:00:12,379 --> 00:00:17,055
which probably every beginner has
fallen,

5
00:00:17,055 --> 00:00:21,215
it's the fact that the equality test
is written with two equal

6
00:00:21,215 --> 00:00:25,780
symbols, and not a unique symbol, which
is itself for the assignement.

7
00:00:25,780 --> 00:00:32,677
For example, this code here

8
00:00:32,677 --> 00:00:38,974
is accepted by the compiler, but won't
test if one is equal to one.

9
00:00:38,974 --> 00:00:43,716
To achieve this, we should have
written a equal equal one.

10
00:00:43,716 --> 00:00:48,871
Moreover, it will assign the value one
to the variable a.

11
00:00:48,871 --> 00:00:50,983
So, even if the compiler

12
00:00:50,983 --> 00:00:54,960
accepts this code, most of the compilers
will display a warning.

13
00:00:54,960 --> 00:00:57,068
That is, a warning message.

14
00:00:57,068 --> 00:01:02,193
For example, g plus plus, with the
option Wall, will

15
00:01:02,193 --> 00:01:08,060
print this message here, or this one here,
if you have a french version of the compiler.

16
00:01:08,060 --> 00:01:11,524
So, if you get one of these two
messages, you

17
00:01:11,524 --> 00:01:15,500
will know that you too have fallen
in this trap.

18
00:01:15,500 --> 00:01:22,095
Perhaps, you see the error in this
new piece of code, there

19
00:01:22,095 --> 00:01:25,330
shouldn't be two semicolons, here.

20
00:01:25,330 --> 00:01:29,681
And, if you put all the same a
semicolon, the message "a

21
00:01:29,681 --> 00:01:33,840
vaut un" will be printed, whatever the
value of a.

22
00:01:33,840 --> 00:01:34,867
So why ?

23
00:01:34,867 --> 00:01:37,316
Because in fact, this semicolon is

24
00:01:37,316 --> 00:01:40,904
considered as an instruction, an
instruction

25
00:01:40,904 --> 00:01:42,048
that does nothing.

26
00:01:42,048 --> 00:01:44,990
And this code will be interpreted in
the following

27
00:01:44,990 --> 00:01:47,876
way, that is that the semicolon,

28
00:01:47,876 --> 00:01:49,826
this instruction that does

29
00:01:49,826 --> 00:01:55,060
nothing, will be considered within the
conditional branch, and

30
00:01:55,060 --> 00:02:00,246
the instruction cout will be considered
only after the conditional branch.

31
00:02:00,246 --> 00:02:02,359
This means that if a has the value
one, we

32
00:02:02,359 --> 00:02:06,583
execute the empty instruction, that is,
we do nothing.

33
00:02:06,583 --> 00:02:09,868
And whatever the value of a, execute

34
00:02:09,868 --> 00:02:14,127
the instruction cout, that is, to print
the message "a vaut un".

35
00:02:14,127 --> 00:02:20,190
And watch out, in this case the compiler 
doesn't give any warning during  the

36
00:02:20,190 --> 00:02:27,531
compilation. You'll note that if we had
used curly braces, there would have

37
00:02:27,531 --> 00:02:31,626
been a single instruction in the conditional
branch, and the error we have just

38
00:02:31,626 --> 00:02:34,193
discussed would have less likely
happened.

39
00:02:34,193 --> 00:02:37,788
It is therefore a good idea to
systematically use curly braces, even

40
00:02:37,788 --> 00:02:40,130
when there's only one instruction
in the block.

41
00:02:40,130 --> 00:02:42,980
A third possible mistake is
precisely

42
00:02:42,980 --> 00:02:45,840
to forget the curly braces, in the same
way as in this code.

43
00:02:45,840 --> 00:02:48,882
Having indented these lines,
that is,

44
00:02:48,882 --> 00:02:51,534
to have shifted them slightly
to the

45
00:02:51,534 --> 00:02:53,406
right, is not sufficient for them to be
considered as

46
00:02:53,406 --> 00:02:56,657
inside the conditional branch,
unlike

47
00:02:56,657 --> 00:02:57,662
other languages.

48
00:02:57,662 --> 00:03:01,160
In your opinion, what happens if
I try and compile this code ?

49
00:03:01,160 --> 00:03:05,186
Well, the compiler will print this
warning message, meaning that he

50
00:03:05,186 --> 00:03:09,115
thinks that there's a syntax error,
before the key-word else.

51
00:03:09,115 --> 00:03:10,545
So, why ?

52
00:03:10,545 --> 00:03:13,434
That's because, in fact, this code
is

53
00:03:13,434 --> 00:03:17,225
interpreted in the same way as this
code here.

54
00:03:17,225 --> 00:03:22,211
That is to say, the first cout instruction,
here, is considered

55
00:03:22,211 --> 00:03:24,958
as being within the conditional
branch.

56
00:03:24,958 --> 00:03:26,633
This is what I represented here.

57
00:03:26,633 --> 00:03:28,809
But this second instruction is

58
00:03:28,809 --> 00:03:32,094
considered as being after the
conditional branch.

59
00:03:32,094 --> 00:03:33,950
This is what I represented here.

60
00:03:33,950 --> 00:03:38,240
The compiler then comes upon
the key-word else,

61
00:03:38,240 --> 00:03:40,968
and, from its perspective, there
isn't any if instruction

62
00:03:40,968 --> 00:03:43,564
related to this else key-word,

63
00:03:43,564 --> 00:03:48,160
as we have already left the conditional
branch.

64
00:03:48,160 --> 00:03:54,145
It therefore thinks that there's a syntax
error around this part of the program,

65
00:03:54,145 --> 00:03:59,634
and will print this error message.
Now let's do three quizzes. 

66
00:03:59,634 --> 00:04:05,380
First of all, what does this code print
when it is executed ?

67
00:04:05,380 --> 00:04:08,660
And when the user enters the value one
for the

68
00:04:08,660 --> 00:04:11,750
variable n, and the value two for the
variable b.

69
00:04:11,750 --> 00:04:13,190
In your opinion,

70
00:04:13,190 --> 00:04:19,777
what's the correct answer ?
The correct answer is the answer C.

71
00:04:19,777 --> 00:04:21,518
Let's have a look why.

72
00:04:21,518 --> 00:04:26,130
If you think you've understood, you can
go directly to the next quiz.

73
00:04:26,130 --> 00:04:29,718
So, let me remind you that, in order
for a condition with an

74
00:04:29,718 --> 00:04:33,655
and to be true, the two operands
must be true.

75
00:04:33,655 --> 00:04:38,263
And in order for a condition with an or
to be true, it is sufficient for

76
00:04:38,263 --> 00:04:41,180
only one of the two operands to
be true.

77
00:04:41,180 --> 00:04:47,114
I said earlier that the user enters one
for n, and two for p.

78
00:04:47,114 --> 00:04:52,330
This condition is therefore true, because
one is strictly less than two.

79
00:04:52,330 --> 00:04:57,540
This expression, two times n, simply
has the value two.

80
00:04:57,540 --> 00:05:03,640
Two is greater than or equal to two.
Therefore, this condition is true.

81
00:05:03,640 --> 00:05:10,390
So the overall expression is, here, a
condition that is true.

82
00:05:10,390 --> 00:05:14,174
We are therefore going to enter the
conditional branch,

83
00:05:14,174 --> 00:05:17,920
execute this cout instruction, which
prints one, one.

84
00:05:17,920 --> 00:05:21,160
We then go to this conditional
branch.

85
00:05:21,160 --> 00:05:25,550
This condition is, well, the same as
before, it is still true.

86
00:05:25,550 --> 00:05:30,080
The overall condition

87
00:05:30,080 --> 00:05:31,367
uses an or.

88
00:05:31,367 --> 00:05:36,762
Therefore, I don't need to look at
the value of this condition.

89
00:05:36,762 --> 00:05:39,950
I know that this overall condition
is true.

90
00:05:39,950 --> 00:05:42,002
And as it is true, well, we

91
00:05:42,002 --> 00:05:45,210
execute this instruction, which prints
a two.

92
00:05:45,210 --> 00:05:48,787
We then advance to this third
conditional branch,

93
00:05:48,787 --> 00:05:51,770
which uses, once again, the same
condition.

94
00:05:51,770 --> 00:05:54,250
We know that this condition
is true.

95
00:05:54,250 --> 00:05:54,890
We are therefore going to

96
00:05:54,890 --> 00:05:59,380
enter the conditional branch, and
execute this part.

97
00:05:59,380 --> 00:06:02,163
This expression has the value two.

98
00:06:02,163 --> 00:06:04,220
p still has the value two.

99
00:06:04,220 --> 00:06:08,340
Therefore, this condition is true.

100
00:06:08,340 --> 00:06:10,590
We are therefore going to
execute this part

101
00:06:10,590 --> 00:06:13,935
of the conditional branch, and print
three.

102
00:06:13,935 --> 00:06:19,530
We are then going to arrive at the
end of this conditional branch,

103
00:06:19,530 --> 00:06:23,940
move to this instruction, which simply
prints an newline.

104
00:06:23,940 --> 00:06:25,956
Another exercise, another code.

105
00:06:25,956 --> 00:06:32,630
This time, the user enters the values
one for n, and three for p.

106
00:06:32,630 --> 00:06:34,644
What is going to be printed ?

107
00:06:34,644 --> 00:06:40,070
The correct answer is the answer B.
And we are going to have a look why.

108
00:06:40,070 --> 00:06:44,910
This time, the user enters one for n,
and three

109
00:06:44,910 --> 00:06:49,228
for p. This condition is therefore
true, as one

110
00:06:49,228 --> 00:06:54,532
is strictly less than three. This
expression two times

111
00:06:54,532 --> 00:06:59,900
n has the value two, p has the value
three. Therefore, this condition is false.

112
00:06:59,900 --> 00:07:05,335
As this condition uses a single

113
00:07:05,335 --> 00:07:10,053
and, this condition is false.

114
00:07:10,053 --> 00:07:14,930
We are consequently going to skip
the conditional branch, and move on.

115
00:07:14,930 --> 00:07:18,670
This condition is still true, like
before.

116
00:07:18,670 --> 00:07:23,402
The overall condition uses one or.

117
00:07:23,402 --> 00:07:27,697
Thus, I don't need to consider
the value of this condition.

118
00:07:27,697 --> 00:07:30,060
I know that whatever its value,

119
00:07:30,060 --> 00:07:34,550
this entire expression, this entire
condition, is true.

120
00:07:34,550 --> 00:07:35,134
We are therefore going to

121
00:07:35,134 --> 00:07:38,755
enter the conditional branch, and print
two.

122
00:07:38,755 --> 00:07:42,960
We then move on to this conditional
branch.

123
00:07:42,960 --> 00:07:46,740
This condition is true, once again,
so we enter

124
00:07:46,740 --> 00:07:51,780
the conditional branch to execute this
part.

125
00:07:51,780 --> 00:07:55,628
Therefore, this expression has the value
two, p has the value three.

126
00:07:55,628 --> 00:07:59,561
Thus I already know that this condition
is false.

127
00:07:59,561 --> 00:08:00,481
As this

128
00:08:00,481 --> 00:08:03,608
condition is false, we move on to this

129
00:08:03,608 --> 00:08:07,950
part of the conditional branch, and
print four.

130
00:08:07,950 --> 00:08:12,740
We arrive at the end of this
conditional branch, to then

131
00:08:12,740 --> 00:08:17,280
move on to the cout endl, which simply
prints an newline.

132
00:08:17,280 --> 00:08:19,887
One last time, still the same code.

133
00:08:19,887 --> 00:08:25,623
This time, the user enter the values
two for n, and one

134
00:08:25,623 --> 00:08:29,392
for p. Which is the correct answer ?

135
00:08:29,392 --> 00:08:31,290
It's the answer A.

136
00:08:31,290 --> 00:08:35,661
For this last time, the user
enters the value

137
00:08:35,661 --> 00:08:38,511
two for n, and the value one
for p.

138
00:08:38,511 --> 00:08:46,020
This condition is therefore false, as
two isn't strictly less than one.

139
00:08:46,020 --> 00:08:48,516
As the overall condition uses an

140
00:08:48,516 --> 00:08:51,156
and, I don't have to consider

141
00:08:51,156 --> 00:08:56,450
the value of this condition. I know
that it's all necesseraly false.

142
00:08:56,450 --> 00:09:01,200
We therefore skip this first conditional
branch.

143
00:09:01,200 --> 00:09:04,150
This condition is always false.

144
00:09:04,150 --> 00:09:07,747
On the other side, I this time use
an or.

145
00:09:07,747 --> 00:09:12,830
Therefore, I am obliged to consider
the value of this condition.

146
00:09:12,830 --> 00:09:16,449
This expression has the value two
times n. That is, two times

147
00:09:16,449 --> 00:09:19,083
two, so four. p has the value one.

148
00:09:19,083 --> 00:09:27,232
Thus, this condition is true, as four
is greater than or equal to one.

149
00:09:27,232 --> 00:09:33,530
Therefore, the overall condition is
true.

150
00:09:33,530 --> 00:09:38,360
We are therefore going to execute
this instruction, and print two.

151
00:09:38,360 --> 00:09:42,430
We then move on to the next
conditional branch.

152
00:09:42,430 --> 00:09:45,160
This condition is always false.

153
00:09:45,160 --> 00:09:49,700
We are therefore going to skip what
is inside the conditional branch,

154
00:09:49,700 --> 00:09:54,350
and move on to this part of the program,
which simply prints an newline.

155
00:09:54,350 --> 00:09:59,660
Let's end with the bool type, bool for boolean,
which is the type of conditions.

156
00:09:59,660 --> 00:10:02,745
This type will let us declare

157
00:10:02,745 --> 00:10:06,537
variables which will contain the value
of a condition.

158
00:10:06,537 --> 00:10:07,564
A variable of

159
00:10:07,564 --> 00:10:10,271
type bool is often called a boolean.

160
00:10:10,271 --> 00:10:15,534
And a boolean has only two possible
values : either true, or false. Or

161
00:10:15,534 --> 00:10:22,240
more specifically, in C++, we are going to
use the literal values, true and false.

162
00:10:22,240 --> 00:10:26,860
In this example, I begin by declaring two
variables of type int.

163
00:10:26,860 --> 00:10:32,845
a which will be initialized with value one.
b which will be

164
00:10:32,845 --> 00:10:37,570
initialized with value two. In this third
instruction,

165
00:10:37,570 --> 00:10:42,234
I declare a variable which is called
test un, which is of type bool.

166
00:10:42,234 --> 00:10:47,606
Like with all variables, I can
represent

167
00:10:47,606 --> 00:10:52,712
test un with a box. And
test un will be

168
00:10:52,712 --> 00:10:58,422
initialized with the value of this
condition : a equal b.

169
00:10:58,422 --> 00:11:03,438
As a has the value one, and b has the
value two, this condition is

170
00:11:03,438 --> 00:11:08,573
false. test1 will therefore be initialized
with the value

171
00:11:08,573 --> 00:11:13,768
false

172
00:11:13,768 --> 00:11:18,274
This last

173
00:11:18,274 --> 00:11:24,028
instruction declares a variable test

174
00:11:24,028 --> 00:11:30,568
deux, of type bool.
That is, a boolean.

175
00:11:30,568 --> 00:11:35,650
And test deux is going to be initialized
with the value of this condition.

176
00:11:35,650 --> 00:11:40,190
a has the value one, b has the value
two. This condition is thus true.

177
00:11:40,190 --> 00:11:44,530
test2 will therefore be initialized
with the value true, or

178
00:11:44,530 --> 00:11:49,100
more specifically, true, which means
true in

179
00:11:49,100 --> 00:11:50,010
English.

180
00:11:50,010 --> 00:11:53,506
Some students have problems with

181
00:11:53,506 --> 00:11:56,370
booleans, others sometimes have
a mental block.

182
00:11:56,370 --> 00:11:58,840
So, remember that a variable of type

183
00:11:58,840 --> 00:12:01,199
bool is a variable like another.

184
00:12:01,199 --> 00:12:05,580
That is, you can represent it as
a box.

185
00:12:05,580 --> 00:12:13,777
It turns out that this box can only
contain two possible values,

186
00:12:13,777 --> 00:12:16,330
either true, or false.

187
00:12:16,330 --> 00:12:21,946
We can also use logical

188
00:12:21,946 --> 00:12:26,835
operators, and, or, not, between variables
of type bool, and we can also

189
00:12:26,835 --> 00:12:31,320
use these variables as conditions in
conditional branches,

190
00:12:31,320 --> 00:12:33,894
and that's what we're going to have a look
at in this example.

191
00:12:33,894 --> 00:12:36,468
As in the previous example, I begin by

192
00:12:36,468 --> 00:12:39,294
declaring a variable called a, of type

193
00:12:39,294 --> 00:12:43,998
int, and initialized with the value one,
and a

194
00:12:43,998 --> 00:12:49,023
variable b, also of type int, initialized
with the value

195
00:12:49,023 --> 00:12:54,040
two. In this instruction, I declare a

196
00:12:54,040 --> 00:12:59,370
variable of type bool, which is called c,
and is initialized with

197
00:12:59,370 --> 00:13:04,476
the value true. Then, here, I
declare a

198
00:13:04,476 --> 00:13:09,860
value of type bool, which I will call d,
initialized with

199
00:13:09,860 --> 00:13:15,338
the value of the condition "a equals b". a has
the value 1, b has the value 2.

200
00:13:15,338 --> 00:13:19,890
The condition is therefore false, and
has the value false.

201
00:13:19,890 --> 00:13:24,615
d is therefore initialized with
the value false.

202
00:13:29,015 --> 00:13:36,193
Then, here, I declare a variable of type
bool, called e, initialized with

203
00:13:36,193 --> 00:13:41,350
the value of this condition.
d has the value false.

204
00:13:41,350 --> 00:13:46,530
This condition, a less than b, is true.

205
00:13:46,530 --> 00:13:52,113
It therefore has the value true. The
logical operator is here an or.

206
00:13:52,113 --> 00:13:54,850
Thus, all this condition

207
00:13:54,850 --> 00:13:59,736
is true, and has the value true.
e is therefore

208
00:13:59,736 --> 00:14:05,806
initialized with the value true. Then,
in this conditional branch,

209
00:14:05,806 --> 00:14:10,955
the condition is the value of the variable
e of type bool.

210
00:14:10,955 --> 00:14:12,290
e therefore has the value true.

211
00:14:12,290 --> 00:14:14,349
The condition is this true, and
we are going to

212
00:14:14,349 --> 00:14:19,900
enter the conditional branch, to
execute this instruction,

213
00:14:19,900 --> 00:14:23,200
which will print the message :
e has the value true.

214
00:14:23,200 --> 00:14:25,825
That's all for the moment, concerning
booleans.

215
00:14:25,825 --> 00:14:29,938
But booleans are helpful in many
problems, and we'll

216
00:14:29,938 --> 00:14:34,669
encounter them in concrete examples
in following videos of the course.

