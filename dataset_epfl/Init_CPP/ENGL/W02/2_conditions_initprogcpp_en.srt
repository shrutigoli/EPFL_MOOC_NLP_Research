1
00:00:00,000 --> 00:00:05,523
In a previous video, we introduced

2
00:00:05,523 --> 00:00:08,690
the conditional branch instruction,
the if.

3
00:00:08,690 --> 00:00:10,283
We also saw that in order to

4
00:00:10,283 --> 00:00:13,650
work, this instruction needs to
express conditions.

5
00:00:13,650 --> 00:00:15,214
The conditions we used

6
00:00:15,214 --> 00:00:16,962
until now were simple conditions,
which

7
00:00:16,962 --> 00:00:20,231
consisted of, for example, comparing
the value of a variable with a value.

8
00:00:20,231 --> 00:00:22,277
We are now going to see that
in C++,

9
00:00:22,277 --> 00:00:25,200
it is possible to express more
complex conditions.

10
00:00:25,200 --> 00:00:28,858
Here you see an example of a
condition branch instructions, an

11
00:00:28,858 --> 00:00:32,363
if, as we have already seen
previously.

12
00:00:32,363 --> 00:00:35,549
We can see that in order to write
down this instruction, we need

13
00:00:35,549 --> 00:00:38,712
to formulate a condition, as we can
concretely see here.

14
00:00:38,712 --> 00:00:42,078
The condition in the present case is
a simple condition, which

15
00:00:42,078 --> 00:00:46,232
consist in comparing the value of
a variable n to the value 5.

16
00:00:46,232 --> 00:00:50,410
Small syntactic detail : the condition
in a conditional

17
00:00:50,410 --> 00:00:52,710
branch instruction is always
surrounded by

18
00:00:52,710 --> 00:00:55,880
parentheses, as we can concretely
see here.

19
00:00:55,880 --> 00:00:59,348
A condition in C++ is in fact a
sort of

20
00:00:59,348 --> 00:01:04,269
expression whose particularity is
to return two possible values.

21
00:01:04,269 --> 00:01:06,360
These values are either "true",
or "false".

22
00:01:06,360 --> 00:01:10,167
Simply enough, a condition will be
evaluated to "true" when

23
00:01:10,167 --> 00:01:13,997
it is true, and evaluated to "false"
when it is false.

24
00:01:13,997 --> 00:01:15,906
Let's take a concrete example.

25
00:01:15,906 --> 00:01:19,724
Let's imagine I have a variable n
whose value is zero,

26
00:01:19,724 --> 00:01:23,540
and I write the condition n smaller
than five, that I want to evaluate.

27
00:01:23,540 --> 00:01:27,110
Here the value of n, zero, is less
than 5, which means

28
00:01:27,110 --> 00:01:29,824
that this condition is true when I
evaluate

29
00:01:29,824 --> 00:01:33,130
it it will therefore return the
value "true".

30
00:01:33,130 --> 00:01:36,141
Now let's imagine n has a value
of 10.

31
00:01:36,141 --> 00:01:40,973
I evaluate the same expression.
Obviously this isn't verified

32
00:01:40,973 --> 00:01:45,238
anymore, the condition is false,
therefore the evaluation

33
00:01:45,238 --> 00:01:48,460
of the condition will return the
value "false".

34
00:01:48,460 --> 00:01:51,327
Let's begin by examining in
a more exhaustive way

35
00:01:51,327 --> 00:01:54,350
how to formulate simple conditions
in C++.

36
00:01:54,350 --> 00:01:59,370
The purpose of a simple condition is
to compare two expressions.

37
00:01:59,370 --> 00:02:03,650
and to do so we need to use
comparison operators.

38
00:02:03,650 --> 00:02:05,990
"Less than", "greater than" are two
examples

39
00:02:05,990 --> 00:02:09,045
which you already had the opportunity
to see before.

40
00:02:09,045 --> 00:02:11,055
So obviously C++ offers a whole

41
00:02:11,055 --> 00:02:14,977
range of predefined operators to
formulate simple

42
00:02:14,977 --> 00:02:19,264
conditions. Let's imagine for example
that I have two variables x, y. I want

43
00:02:19,264 --> 00:02:22,681
to know if the value of x is less than
the value of y. Naturally,

44
00:02:22,681 --> 00:02:25,870
I'm going to use the "less than"
operator

45
00:02:25,870 --> 00:02:28,505
and write my condition like so.

46
00:02:28,505 --> 00:02:31,055
Similarly, if I want to know if the
value

47
00:02:31,055 --> 00:02:33,706
of x is equal to the value of y,
I am going to

48
00:02:33,706 --> 00:02:36,475
use the comparison operator ==,

49
00:02:36,475 --> 00:02:38,860
which lets me test this condition.

50
00:02:38,860 --> 00:02:42,292
You have the operators "less than or
equal", "greater or equal",

51
00:02:42,292 --> 00:02:46,550
and "different than", which let you express
all sorts of simple conditions.

52
00:02:46,550 --> 00:02:52,355
Here's a little warning : in C++, the
operator used to check

53
00:02:52,355 --> 00:02:56,180
if two values are equal is defined by
two "equal" symbols.

54
00:02:56,180 --> 00:02:59,024
Don't confuse it with the = symbol,

55
00:02:59,024 --> 00:03:03,125
which is used to formulate an
assignment.

56
00:03:03,125 --> 00:03:06,644
If I want to check if the value of
a variable n is 5, I'm going

57
00:03:06,644 --> 00:03:09,404
to use the operator ==
to formulate my

58
00:03:09,404 --> 00:03:12,085
condition, and not the simple
equal operator.

59
00:03:12,085 --> 00:03:16,416
You must be aware however that this way of
writing a condition

60
00:03:16,416 --> 00:03:18,306
is considered licit by C++ compilers, we

61
00:03:18,306 --> 00:03:21,250
are going to examine why in
the next slide.

62
00:03:21,250 --> 00:03:24,733
Licit indeed, yet discouraged, at

63
00:03:24,733 --> 00:03:27,510
this stage of learning at least.

64
00:03:27,510 --> 00:03:30,678
What you must know is that in
C++, every expression

65
00:03:30,678 --> 00:03:34,140
whatsoever does something, but
also has a value.

66
00:03:34,140 --> 00:03:36,100
Let's examine this wtih a
concrete example.

67
00:03:36,100 --> 00:03:38,200
Here we have an expression,
n =

68
00:03:38,200 --> 00:03:41,140
5, this expression clearly does
something.

69
00:03:41,140 --> 00:03:46,546
What it does is assigning to a variable n
the

70
00:03:46,546 --> 00:03:47,740
value 5.

71
00:03:47,740 --> 00:03:51,758
In C++, this expression also has a
value.

72
00:03:51,758 --> 00:03:55,801
It's value is the the value of n after the
assignment.

73
00:03:55,801 --> 00:03:58,230
Thus, the expression "n = 5"
has value 5.

74
00:03:58,230 --> 00:04:01,954
That is why it is perfectly licit to
write something

75
00:04:01,954 --> 00:04:04,225
like this : m = n = 5,

76
00:04:04,225 --> 00:04:07,265
5, which aims to assign to a

77
00:04:07,265 --> 00:04:11,160
variable m the value of this expression,
that is 5.

78
00:04:11,160 --> 00:04:11,735
It is

79
00:04:11,735 --> 00:04:17,600
therefore totally correct to write something
like this : "if (n = 5)"

80
00:04:17,600 --> 00:04:23,410
which is the same as writing
"if (5)".

81
00:04:23,410 --> 00:04:28,550
Knowing that in C++, every
non-zero value is

82
00:04:28,550 --> 00:04:34,220
equivalent to "true", this condition will
always be evaluated as true.

83
00:04:34,220 --> 00:04:36,588
Note that in terms of best practices,

84
00:04:36,588 --> 00:04:39,622
it is totally discouraged to
do it this

85
00:04:39,622 --> 00:04:43,158
way. I have shown you this in detail

86
00:04:43,158 --> 00:04:46,441
and explicitly only because to confuse
== and = to

87
00:04:46,441 --> 00:04:51,003
perform a comparison is a mistake
beginners often make.

88
00:04:51,003 --> 00:04:53,482
So in absolute, this way of doing it
is to

89
00:04:53,482 --> 00:04:56,980
avoid, even if it is tolerated
by the compiler.

90
00:04:56,980 --> 00:05:01,697
Now let's illustrate the use of
simple conditions in C++

91
00:05:01,697 --> 00:05:03,660
on small examples.

92
00:05:03,660 --> 00:05:07,680
Here we have a small program that begins
by declaring two

93
00:05:07,680 --> 00:05:13,000
variables a and b and affects initial
values to them, respectively 1 and 2.

94
00:05:13,000 --> 00:05:18,212
We then encounter a conditional
branch instruction, which tests

95
00:05:18,212 --> 00:05:23,100
if the value of a is the same as the value
of b with a simple condition.

96
00:05:23,100 --> 00:05:26,300
This is done with the comparison
operator ==.

97
00:05:26,300 --> 00:05:26,940
Since this

98
00:05:26,940 --> 00:05:32,527
condition isn't verified, the result
of the condition's evaluation

99
00:05:32,527 --> 00:05:37,490
will be the value "false", which will
result in

100
00:05:37,490 --> 00:05:42,164
branching the execution on the else
block of the if instruction, therefore

101
00:05:42,164 --> 00:05:45,430
causing to print the message "cas 2",
which we can see here.

102
00:05:45,430 --> 00:05:50,110
We then continue the execution of
the sequences,

103
00:05:50,110 --> 00:05:52,105
and we encounter a second
conditional

104
00:05:52,105 --> 00:05:55,052
branch instruction, which will this
time compare the

105
00:05:55,052 --> 00:05:59,265
value of two times a to the value of b.

106
00:05:59,265 --> 00:06:02,793
By the way, we can here observe that
the comparison

107
00:06:02,793 --> 00:06:06,248
operators not only allow to compare
the values of

108
00:06:06,248 --> 00:06:08,931
two variables, as it is the case here,
but also

109
00:06:08,931 --> 00:06:12,250
the values of two expressions, in a more
general sense.

110
00:06:12,250 --> 00:06:17,608
Here if we evaluate two times a, we
obtain

111
00:06:17,608 --> 00:06:20,872
the value 2, which is the same as the
value

112
00:06:20,872 --> 00:06:25,030
of b, and the result of the condition's
evaluation will therefore

113
00:06:25,030 --> 00:06:28,528
be "true", which will have as a consequence
to branch

114
00:06:28,528 --> 00:06:32,690
the execution on the positive block,
the true block of the if instruction.

115
00:06:32,690 --> 00:06:36,130
This will cause the message "b
est Ã©gal au

116
00:06:36,130 --> 00:06:38,870
double de a" to be printed, as can be
seen here.

117
00:06:38,870 --> 00:06:42,698
In terms of good practices, we here have
a relatively

118
00:06:42,698 --> 00:06:46,673
simple expression. You will however note
that it is recommended,

119
00:06:46,673 --> 00:06:50,579
when the expression becomes more
complex, to use parentheses, as

120
00:06:50,579 --> 00:06:53,804
we could already do here, by adding
parentheses around, for example, this

121
00:06:53,804 --> 00:06:57,400
part of the expression, which makes the
expression more readable.

122
00:06:57,400 --> 00:07:00,392
We have just seen how to
use

123
00:07:00,392 --> 00:07:05,090
simple conditions by using
comparison operators.

124
00:07:05,090 --> 00:07:07,844
In practice, it is often necessary to
combine many

125
00:07:07,844 --> 00:07:10,976
of these simple conditions to formulate
a more complex condition.

126
00:07:10,976 --> 00:07:13,920
To combine simple expressions, we
need

127
00:07:13,920 --> 00:07:17,796
to use another type of operator,
the logical operators.

128
00:07:17,796 --> 00:07:21,764
For example, the logical operator AND,
which is defined in C++ either

129
00:07:21,764 --> 00:07:24,962
by the key-word "and", or by the
symbol

130
00:07:24,962 --> 00:07:28,165
"&&", is an operator operating
with two operands, which are

131
00:07:28,165 --> 00:07:30,642
two logical expressions, that is to say

132
00:07:30,642 --> 00:07:33,138
expressions returning either "true"
or "false".

133
00:07:33,138 --> 00:07:37,185
The result of the evaluation involving
the and is "true"

134
00:07:37,185 --> 00:07:41,790
only in the case where each operand
has the value "true".

135
00:07:41,790 --> 00:07:49,298
In every other case, let's say for example
that one of the two operands, and a

136
00:07:49,298 --> 00:07:51,122
fortiori the two, are "false", the result
of

137
00:07:51,122 --> 00:07:53,700
the global expression's evaluation will
also be "false", here.

138
00:07:53,700 --> 00:07:58,292
Now let's have a look, with a concrete
example, at how to use the logical

139
00:07:58,292 --> 00:07:59,160
operator "and".

140
00:07:59,160 --> 00:08:00,635
Here an example of a small

141
00:08:00,635 --> 00:08:03,305
program, which asks the user to
enter a

142
00:08:03,305 --> 00:08:07,210
number, and we want this number
to be between 1 and 10.

143
00:08:07,210 --> 00:08:12,630
The number is read from the standard
input, and stored in a variable n.

144
00:08:12,630 --> 00:08:15,990
We want to verify that the number
entered by

145
00:08:15,990 --> 00:08:18,952
the user meets our expectations, is
between

146
00:08:18,952 --> 00:08:21,026
the boundary numbers in question,
and that's why

147
00:08:21,026 --> 00:08:23,527
the two following conditions
must

148
00:08:23,527 --> 00:08:25,032
simultaneously verified. 

149
00:08:25,032 --> 00:08:27,820
The entered number must be
greater than or

150
00:08:27,820 --> 00:08:29,605
equal to 1, and less than or equal
to 10.

151
00:08:29,605 --> 00:08:31,765
Since we want the two conditions
to be

152
00:08:31,765 --> 00:08:34,790
simultaneously verified, we must
use the logical operator AND. 

153
00:08:34,790 --> 00:08:38,054
Now let's imagine that the user has
entered the

154
00:08:38,054 --> 00:08:40,662
value zero, this will mean that

155
00:08:40,662 --> 00:08:46,027
this expression's evaluation
will return "false". An

156
00:08:46,027 --> 00:08:48,787
expression that involves an and
returns "true"

157
00:08:48,787 --> 00:08:51,945
only if its two operands are "true", which
isn't the case here.

158
00:08:51,945 --> 00:08:53,737
So here, the result of the
evaluation of the

159
00:08:53,737 --> 00:08:55,830
expression with the and is also
"false".

160
00:08:55,830 --> 00:08:58,854
As a result, we will branch on the

161
00:08:58,854 --> 00:09:01,457
else part of the if, and print
"incorrect"

162
00:09:01,457 --> 00:09:03,662
to show the user that he hasn't

163
00:09:03,662 --> 00:09:05,950
entered a number according to
our expectations.

164
00:09:05,950 --> 00:09:10,164
Contrariwise, if the user now
enters

165
00:09:10,164 --> 00:09:13,888
the value 5, this expression's
evaluation

166
00:09:13,888 --> 00:09:17,390
will return "true", the evaluation of
this second

167
00:09:17,390 --> 00:09:20,405
expression will also return "true",
which

168
00:09:20,405 --> 00:09:22,435
will mean that the evaluation of

169
00:09:22,435 --> 00:09:24,890
the expression with the and
also returns "true".

170
00:09:24,890 --> 00:09:29,920
At this moment, we will branch on the
positive part of the if and print

171
00:09:29,920 --> 00:09:31,972
"correct" to tell the user that the

172
00:09:31,972 --> 00:09:33,870
entered number is indeed correct.

173
00:09:33,870 --> 00:09:36,390
Another usual logical operator, the OR,
which

174
00:09:36,390 --> 00:09:38,982
is defined in C++ either by the reserved
word or,

175
00:09:38,982 --> 00:09:41,585
or by a double vertical bar.

176
00:09:41,585 --> 00:09:46,373
As with the logical operator AND, the
logical operator OR requires two

177
00:09:46,373 --> 00:09:48,653
operands, which are the logical

178
00:09:48,653 --> 00:09:51,508
expressions, meaning that they return
"true" or "false".

179
00:09:51,508 --> 00:09:56,380
The expression's evaluation with an
OR returns "true" if one or the other,

180
00:09:56,380 --> 00:10:00,980
not necessarily the two, one or the
other of the operands is "true".

181
00:10:00,980 --> 00:10:04,340
It is therefore quite clear that the only
situation or logical

182
00:10:04,340 --> 00:10:07,830
expression involving and OR returning
"false" is

183
00:10:07,830 --> 00:10:12,370
a situation where the two operands
return "false".

184
00:10:12,370 --> 00:10:17,380
In this case, the expression with the OR
also returns "false".

185
00:10:17,380 --> 00:10:22,290
Now let's illustrate the use of the logical
OR with a small concrete example.

186
00:10:22,290 --> 00:10:24,160
Here we have a small program

187
00:10:24,160 --> 00:10:26,525
which asks the user to choose two
values.

188
00:10:26,525 --> 00:10:29,908
These two values are entered from
the standard input and are stored

189
00:10:29,908 --> 00:10:31,819
in two variables m and n.

190
00:10:31,819 --> 00:10:36,619
In the present case, we want one
or the other

191
00:10:36,619 --> 00:10:39,067
of them to be positive, as we only
need

192
00:10:39,067 --> 00:10:41,610
one of the two values to be
positive.

193
00:10:41,610 --> 00:10:45,725
We test these conditions by using the
logical operator OR.

194
00:10:45,725 --> 00:10:48,497
Initially, let's suppose that the
user

195
00:10:48,497 --> 00:10:50,896
enters the values 1 and -1.

196
00:10:50,896 --> 00:10:55,780
In this case, the
first operand

197
00:10:55,780 --> 00:11:00,890
will be evaluated as "true", because it
is indeed positive, and therefore

198
00:11:00,890 --> 00:11:06,400
the expression's evaluation returns
"true", as it is sufficient

199
00:11:06,400 --> 00:11:08,740
that one or the other of the operands
be "true"

200
00:11:08,740 --> 00:11:11,678
for the result to be "true" for
the global expression.

201
00:11:11,678 --> 00:11:13,743
Therefore, it is indeed the message
"au moins

202
00:11:13,743 --> 00:11:16,760
une valeur est positive" that will be printed
in the present case.

203
00:11:16,760 --> 00:11:20,910
Now let's suppose that the entered
values are 

204
00:11:20,910 --> 00:11:21,250
-1 and 1.

205
00:11:21,250 --> 00:11:23,735
In this case, the evaluation of this
first

206
00:11:23,735 --> 00:11:27,448
expression will return "false", and the
evaluation of the second

207
00:11:27,448 --> 00:11:30,986
expression, on the other hand, will return
"true", as it

208
00:11:30,986 --> 00:11:32,970
sufficient that one or the other
of the operands

209
00:11:32,970 --> 00:11:34,954
be "true" for all of it to be "true".

210
00:11:34,954 --> 00:11:37,806
The global expression's evaluation
returns "true", and

211
00:11:37,806 --> 00:11:42,350
once again the message "au moins une
valeur est positive" is printed.

212
00:11:42,350 --> 00:11:46,395
Last case : let's imagine that the user
enters

213
00:11:46,395 --> 00:11:50,780
the values minus 1 and -1
for each variable m and n. In this

214
00:11:50,780 --> 00:11:54,265
case, the evaluation of the first
expression

215
00:11:54,265 --> 00:11:58,747
will return "false", the evaluation of
the second expression

216
00:11:58,747 --> 00:12:02,681
will also return "false", as the two
operands

217
00:12:02,681 --> 00:12:06,685
are evaluated as "false", the global
expression also returns

218
00:12:06,685 --> 00:12:08,942
"false" and in this case, it's the
message

219
00:12:08,942 --> 00:12:12,170
"les deux valeurs sont nÃ©gatives"
that will be printed.

220
00:12:12,170 --> 00:12:17,978
Last usual logical operator, the NOT,
the negation, which is

221
00:12:17,978 --> 00:12:22,720
defined in C++ either by the reserved word
not, or by the exclamation mark.

222
00:12:22,720 --> 00:12:25,610
The logical operator NOT is a

223
00:12:25,610 --> 00:12:28,565
unary logical operator, which
means that it expects only

224
00:12:28,565 --> 00:12:30,125
one operand, which is once again

225
00:12:30,125 --> 00:12:32,610
a logical expression returning "true"
or "false".

226
00:12:32,610 --> 00:12:37,202
The purpose of the logical operator NOT
is to return the negation

227
00:12:37,202 --> 00:12:39,130
of the value of its operand.

228
00:12:39,130 --> 00:12:43,834
For example, let's suppose that the
operand is evaluated as

229
00:12:43,834 --> 00:12:46,642
"false", which means that a is
greater than or

230
00:12:46,642 --> 00:12:49,743
equal to b, the global expression's
evaluation with the

231
00:12:49,743 --> 00:12:53,230
not will return the negation of "false",
namely "true".

232
00:12:53,230 --> 00:12:57,738
Now let's suppose that the evaluation
of this operand

233
00:12:57,738 --> 00:13:02,304
returns "true", the global expression
will this time return the

234
00:13:02,304 --> 00:13:04,930
negation of "true", namely "false".

235
00:13:04,930 --> 00:13:07,900
We'll have the opportunity to see
many examples of the use

236
00:13:07,900 --> 00:13:09,715
of the operator NOT in the following
chapters of this course.

