1
00:00:05,659 --> 00:00:07,929
In a previous video,

2
00:00:07,929 --> 00:00:10,809
we went over the
three aspects of functions.

3
00:00:10,951 --> 00:00:14,011
We also detailed function calls.

4
00:00:14,011 --> 00:00:15,551
In this episode,

5
00:00:15,551 --> 00:00:18,781
we will focus on the prototype aspect.

6
00:00:19,087 --> 00:00:23,177
In the course example,
the example with the computation of the mean,

7
00:00:23,240 --> 00:00:28,210
the prototype the <i>moyenne</i> function
is this line here ("moyenne" means "mean").

8
00:00:28,638 --> 00:00:31,418
We will now examine
prototypes in detail.

9
00:00:32,105 --> 00:00:34,115
In C++, just like variables,

10
00:00:34,115 --> 00:00:37,965
functions must be declared
before they can be used.

11
00:00:38,040 --> 00:00:41,830
In the case of functions, this
is known as a prototype.

12
00:00:42,004 --> 00:00:46,304
The prototype's purpose is to declare
three things to the rest of the program:

13
00:00:46,304 --> 00:00:48,902
the name of the function, how it will be called;

14
00:00:48,902 --> 00:00:52,332
the parameters we must pass it,
for the function to work;

15
00:00:52,332 --> 00:00:54,990
and finally, the return type,

16
00:00:54,990 --> 00:00:59,054
that is, the type of value that the
function will return to the rest of the program.

17
00:00:59,184 --> 00:01:03,628
The general syntax of declaration of a 
prototype is as follows:

18
00:01:03,678 --> 00:01:05,857
first, we declare the return type,

19
00:01:05,857 --> 00:01:08,007
that the function will send to
the rest of the program.

20
00:01:08,037 --> 00:01:10,587
Then, we provide the name
of the function.

21
00:01:10,587 --> 00:01:13,313
And finally, between parentheses,

22
00:01:13,313 --> 00:01:16,039
is the list of all parameters

23
00:01:16,039 --> 00:01:18,767
that the function must receive
in order to work.

24
00:01:18,767 --> 00:01:20,737
This list can be empty

25
00:01:20,737 --> 00:01:23,817
if the function does not
need any parameters.

26
00:01:23,817 --> 00:01:27,817
As an example of a prototype,
we can reuse the code example

27
00:01:27,817 --> 00:01:30,517
given in the previous slide,

28
00:01:30,517 --> 00:01:32,667
which is the mean calculation.

29
00:01:32,937 --> 00:01:35,917
Here, we will calculate
the mean of two numbers.

30
00:01:36,067 --> 00:01:40,706
For that, let's say the function returns,
to the rest of the program,

31
00:01:40,713 --> 00:01:44,053
a value of type "double",

32
00:01:44,053 --> 00:01:48,353
that it will be called "moyenne" ("mean")
and that it will take two parameters:

33
00:01:48,523 --> 00:01:53,954
a parameter x of type double,
and a parameter y of type double.

34
00:01:53,954 --> 00:02:01,064
We end the prototype declaration
with a semicolon, ";".

35
00:02:01,064 --> 00:02:04,177
The part preceding the semicolon
in a prototype,

36
00:02:04,177 --> 00:02:07,673
is what we call the "function header".

37
00:02:07,673 --> 00:02:12,443
And when the header is followed by a
semicolon, then it is called a "prototype".

38
00:02:12,909 --> 00:02:16,399
The list of parameters
can be empty.

39
00:02:16,399 --> 00:02:21,568
If, for example, we have a function
which must ask the user for an integer,

40
00:02:22,748 --> 00:02:25,738
we could say that it must
return an integer,

41
00:02:25,738 --> 00:02:27,908
that it must ask for a number.

42
00:02:28,067 --> 00:02:31,047
And to ask for a number,

43
00:02:31,047 --> 00:02:33,437
it doesn't need to receive any parameter.

44
00:02:33,437 --> 00:02:37,067
Now, the prototype will be as follows,
with two empty parentheses

45
00:02:37,431 --> 00:02:41,211
and no list of parameters; simply 
two parentheses stuck together.

46
00:02:42,456 --> 00:02:45,715
The purpose of the prototype is
to announce to the rest of the program

47
00:02:45,715 --> 00:02:48,204
what the function will do.

48
00:02:48,204 --> 00:02:50,140
For this purpose, the function

49
00:02:50,140 --> 00:02:52,556
must do only what it was designed to do.

50
00:02:52,556 --> 00:02:55,454
It must not have any hidden effects,

51
00:02:55,454 --> 00:02:56,950
what is known as "side effects".

52
00:02:56,950 --> 00:03:00,650
For example, if you imagine
the square root function,

53
00:03:00,650 --> 00:03:02,760
which calculates the square root of a number,

54
00:03:02,832 --> 00:03:06,832
its prototype, as we can find it in the
standard library,

55
00:03:06,832 --> 00:03:10,832
says that it expects an argument
of type "double";

56
00:03:11,339 --> 00:03:15,339
that it is called "sqrt",
and that it returns a "double".

57
00:03:15,509 --> 00:03:17,897
You expect this function

58
00:03:17,897 --> 00:03:20,625
only to compute a square root value,

59
00:03:20,625 --> 00:03:23,871
and not to pollute the prompt
with messages.

60
00:03:23,871 --> 00:03:27,139
These are known as "side effects".

61
00:03:27,139 --> 00:03:30,259
These are unexpected effects.

62
00:03:30,359 --> 00:03:32,889
Once we have clearly specified
what the function must do,

63
00:03:32,899 --> 00:03:34,529
then we must choose a suitable name

64
00:03:34,529 --> 00:03:38,105
which illustrates exactly what
the function does.

65
00:03:38,105 --> 00:03:40,043
Finally, a last piece of advice:

66
00:03:40,043 --> 00:03:43,201
always start by writing the
prototype of a function.

67
00:03:43,201 --> 00:03:47,430
Writing the prototype of your function
will allow you to clarify

68
00:03:47,430 --> 00:03:51,430
what parameters it must receive,
as we have seen earlier,

69
00:03:51,430 --> 00:03:53,932
and also what it must provide,

70
00:03:54,174 --> 00:03:56,224
the type of what it must return.

71
00:03:56,224 --> 00:04:00,374
This way, you will already have 
specified two things

72
00:04:00,374 --> 00:04:03,104
before you even have to think about

73
00:04:03,104 --> 00:04:06,734
how you will implement
what the function must do.

74
00:04:07,620 --> 00:04:10,080
Now, let's sum up the different aspects
of the syntax

75
00:04:10,080 --> 00:04:12,520
that we have seen up til now in this lecture.

76
00:04:13,030 --> 00:04:15,140
If you write an expression
which starts with a type,

77
00:04:15,140 --> 00:04:17,090
followed here by a name and a semicolon,

78
00:04:17,120 --> 00:04:20,400
then it is the declaration of
a variable.

79
00:04:20,410 --> 00:04:24,410
However, if you add, between the name
and the semicolon,

80
00:04:24,410 --> 00:04:27,330
some parentheses without arguments,

81
00:04:27,330 --> 00:04:30,060
then it will be the prototype of a
function, and not a variable.

82
00:04:30,060 --> 00:04:32,820
This might seem a little more natural to you

83
00:04:32,820 --> 00:04:36,180
if I write it in this fashion here,
int f();

84
00:04:36,180 --> 00:04:39,601
Here, we can see more clearly, maybe because
of its name, that it is a function.

85
00:04:39,601 --> 00:04:44,571
Or better yet, if I write, like
in the previous example,

86
00:04:45,015 --> 00:04:48,645
the function "demande nb" ("ask number"),
which doesn't take any arguments.

87
00:04:48,645 --> 00:04:52,445
Be very careful,
this is indeed a function prototype.

88
00:04:52,445 --> 00:04:55,945
And it has nothing to do with a variable.
This is a common mistake.

89
00:04:56,173 --> 00:04:58,283
If, however, between the parentheses,

90
00:04:58,283 --> 00:05:01,853
you enter a value which
is compatible with the type

91
00:05:01,853 --> 00:05:04,063
which is at the beginning of the line,

92
00:05:04,063 --> 00:05:07,353
then you have a variable declaration again,

93
00:05:07,353 --> 00:05:10,153
and this time, with a value
is also an initialization.

94
00:05:10,153 --> 00:05:13,433
So this line is actually very
close to the first line.

95
00:05:13,433 --> 00:05:16,693
Here, we are simply adding a value
for an initialization.

96
00:05:16,693 --> 00:05:20,113
And it has absolutely nothing
to do with the second line.

97
00:05:20,113 --> 00:05:22,753
So be very careful with 
this sort of form.

98
00:05:22,753 --> 00:05:26,753
Finally, for a function call,
if we put a name with no type in front,

99
00:05:26,753 --> 00:05:28,973
-- there is absolutely no type in front --

100
00:05:28,973 --> 00:05:32,333
or we can have an "=" expression in front,
for example z = a(5),

101
00:05:32,766 --> 00:05:35,686
but there is no type here,

102
00:05:35,686 --> 00:05:37,726
then it is of course a function call.

103
00:05:37,726 --> 00:05:39,976
It might have seemed more natural to you if

104
00:05:39,976 --> 00:05:42,176
I had written z = f(5).

105
00:05:42,176 --> 00:05:45,926
There, you naturally recognize a
call to a function f.

106
00:05:45,926 --> 00:05:51,786
Or if I had written z = sqrt(2.0).

107
00:05:51,786 --> 00:05:55,749
There, you recognize a function call.
