1
00:00:05,523 --> 00:00:07,113
In the previous episodes,

2
00:00:07,271 --> 00:00:10,157
we went over the three aspects
of functions.

3
00:00:10,939 --> 00:00:13,504
We've seen what a function call is,

4
00:00:14,159 --> 00:00:16,349
and we have also seen,
in another episode,

5
00:00:16,349 --> 00:00:18,402
what a function prototype is.

6
00:00:18,451 --> 00:00:19,916
In this episode,

7
00:00:19,916 --> 00:00:23,341
we will focus on the definition.

8
00:00:23,825 --> 00:00:27,457
If I come back to the example
of the mean calculation,

9
00:00:27,457 --> 00:00:32,957
the definition of the "moyenne" function are these lines here,
at the bottom of the program. ["moyenne" means "mean"]

10
00:00:33,334 --> 00:00:36,606
We will now focus specifically on this.

11
00:00:37,648 --> 00:00:41,096
The definition of a function,
as its name implies,

12
00:00:41,096 --> 00:00:43,344
serves to define a function technically,

13
00:00:43,344 --> 00:00:46,621
that is, to specify the body
of the function,

14
00:00:46,621 --> 00:00:49,249
the set of instructions

15
00:00:49,249 --> 00:00:52,041
that make up this function.

16
00:00:52,644 --> 00:00:56,856
Specifically, the definition of
a function will start with

17
00:00:56,856 --> 00:00:59,545
the header of the function,

18
00:00:59,545 --> 00:01:03,372
that is, the beginning of the prototype,
without the semicolon

19
00:01:03,372 --> 00:01:06,447
where, as you already know,
we first define the type,

20
00:01:06,447 --> 00:01:10,148
then the name of the function and
finally, between parentheses,

21
00:01:10,148 --> 00:01:13,288
the set of parameters that
we wish to pass to the function.

22
00:01:13,541 --> 00:01:17,782
This header is followed,
for the definition, by the block

23
00:01:17,782 --> 00:01:20,446
which is the body of the function.

24
00:01:20,446 --> 00:01:23,667
This body is a set of
usual C++ instructions

25
00:01:23,667 --> 00:01:25,556
which we put into a block here

26
00:01:25,556 --> 00:01:28,805
and which contains
one or more return statements

27
00:01:28,805 --> 00:01:32,355
which will end the execution
of the function body.

28
00:01:32,355 --> 00:01:35,872
If I take, as an example,
the "moyenne" ("mean") function,

29
00:01:35,872 --> 00:01:41,069
we can see here the function header
with the double return type, meaning

30
00:01:41,069 --> 00:01:46,638
the function will return a double;
its name and a list of two parameters.

31
00:01:46,638 --> 00:01:50,432
Here, we will calculate
the mean of two numbers x and y.

32
00:01:50,432 --> 00:01:55,696
In the definition, we have the body
of the function which is this block,

33
00:01:55,696 --> 00:02:00,076
which is, here, simply one single
return instruction and nothing else.

34
00:02:01,380 --> 00:02:05,396
The body of the function is simply
a block in the C++ sense,

35
00:02:05,396 --> 00:02:09,425
that is, a set of C++ instructions
contained between an opening brace

36
00:02:09,425 --> 00:02:11,230
and a closing brace.

37
00:02:11,230 --> 00:02:15,108
The only difference is that in this
block, we have access to extra variables

38
00:02:15,108 --> 00:02:18,747
which are the parameters of the function.
We can use these in this block

39
00:02:18,747 --> 00:02:21,580
as if they were any normal variable.

40
00:02:21,580 --> 00:02:25,471
The value returned by the function
is indicated by the <i>return</i> instruction.

41
00:02:25,471 --> 00:02:30,379
This instruction is followed by
an expression in the C++ sense,

42
00:02:30,379 --> 00:02:36,146
which will be evaluated and will
give the value which the function will return.

43
00:02:36,146 --> 00:02:41,782
This expression must be of the same type
as the function's return type.

44
00:02:41,782 --> 00:02:46,761
In the mean calculation example,
we have here the body of the function

45
00:02:46,761 --> 00:02:50,071
which is this block here,
which is very simple in this case,

46
00:02:50,071 --> 00:02:53,268
as it contains only one
<i>return</i> statement,

47
00:02:53,268 --> 00:02:57,918
which will evaluate the expression here,

48
00:02:57,918 --> 00:03:00,859
where you can see that we have

49
00:03:00,859 --> 00:03:04,605
access to the two parameters x and y.

50
00:03:04,605 --> 00:03:07,887
The expression will be evaluated,
we will calculate <i>x + y</i>,

51
00:03:07,887 --> 00:03:10,234
then we will divide by two,

52
00:03:10,234 --> 00:03:14,523
and the result will be of type <i>double</i>
and will be returned by the function

53
00:03:14,523 --> 00:03:18,603
to the rest of the program.
The <i>return</i> statement does two things:

54
00:03:18,603 --> 00:03:22,242
it allows us to specify the type
of the return value

55
00:03:22,242 --> 00:03:25,699
which will be given by the function
to the rest of the program

56
00:03:25,699 --> 00:03:29,540
and it ends the execution
of the function body.

57
00:03:29,540 --> 00:03:32,677
As soon as the first <i>return</i> is
encountered, the function halts

58
00:03:32,677 --> 00:03:36,221
and returns the value corresponding 
to the expression.

59
00:03:36,221 --> 00:03:41,348
Very often, you will find relatively simple
return statement

60
00:03:41,348 --> 00:03:44,762
which are just variable names,

61
00:03:44,762 --> 00:03:48,414
such as <i>return x</i> where x
is a variable name.

62
00:03:48,414 --> 00:03:52,604
Or even values, such as return 3
to return a value of 3.

63
00:03:52,699 --> 00:03:55,106
But this is a specific case,

64
00:03:55,106 --> 00:03:58,203
and we can perfectly,
as we have seen earlier,

65
00:03:58,203 --> 00:04:01,888
use a complete C++ expression.

66
00:04:01,888 --> 00:04:05,917
And this is the general case: the
evaluation of a complete expression.

67
00:04:05,917 --> 00:04:09,961
<i>x</i> and <i>3</i>, here, are simply
particular expressions.

68
00:04:11,031 --> 00:04:13,448
A few remarks about the
<i>return</i> statement

69
00:04:13,448 --> 00:04:15,710
on which it is important to insist.

70
00:04:15,710 --> 00:04:18,732
First, we can place several <i>return</i>
statements

71
00:04:18,732 --> 00:04:20,515
in one function.

72
00:04:20,515 --> 00:04:23,650
Let's look at a simple example of
a function which will return

73
00:04:23,650 --> 00:04:26,511
the biggest of two values, let's say,
<i>a</i> and <i>b</i>.

74
00:04:26,511 --> 00:04:29,869
I call my function <i>max2</i> simply because
there already exists a function

75
00:04:29,869 --> 00:04:33,048
named <i>max</i> in the C++
standard library.

76
00:04:33,048 --> 00:04:37,779
Let's look at the body of this function.
We start by declaring a variable <i>m</i>

77
00:04:37,779 --> 00:04:43,145
and then, if <i>a</i> is bigger than <i>b</i>,
then we copy <i>a</i> into <i>m</i>

78
00:04:43,145 --> 00:04:47,029
and if <i>b</i> is smaller than, or equal
to <i>a</i>,

79
00:04:47,029 --> 00:04:49,865
then the value of <i>m</i> 
will be the value of <i>b</i>.

80
00:04:49,865 --> 00:04:52,775
Then, we return the value of <i>m</i>.

81
00:04:52,775 --> 00:04:57,441
However, we could have written this
code with two <i>return</i> statements,

82
00:04:57,441 --> 00:05:01,614
in a somewhat more compact way.
The prototype remains the same,

83
00:05:01,614 --> 00:05:05,872
but here, if <i>a</i> is bigger than <i>b</i>,
we <i>return</i> <i>a</i>, which means

84
00:05:05,872 --> 00:05:08,131
that if <i>a</i> is bigger than <i>b</i>,

85
00:05:08,131 --> 00:05:11,795
we will evaluate this expression
and return it, and we will stop here.

86
00:05:11,795 --> 00:05:14,683
The <i>return</i> ensures that we stop here.

87
00:05:14,683 --> 00:05:17,729
If, however, <i>b</i> is smaller than
or equal to <i>a</i>,

88
00:05:17,729 --> 00:05:20,676
then what will happen is that

89
00:05:20,676 --> 00:05:24,569
this <i>if</i> instruction will directly
jump here,

90
00:05:24,569 --> 00:05:28,130
and now, it is this <i>return</i>
which will be executed.

91
00:05:28,130 --> 00:05:30,218
Please note that there is only one single <i>return</i> 

92
00:05:30,218 --> 00:05:33,128
executed for a given function call.

93
00:05:34,115 --> 00:05:39,138
Second remark, the expression which follows
a <i>return</i> instruction in a function

94
00:05:39,138 --> 00:05:42,699
must of course be of the same type
as the return type indicated

95
00:05:42,699 --> 00:05:44,477
in the function header.

96
00:05:44,477 --> 00:05:48,376
For example, here, if I have a function <i>f</i>
which does not take any arguments

97
00:05:48,376 --> 00:05:52,025
but which returns a <i>double</i>, then

98
00:05:52,025 --> 00:05:55,852
all the <i>return</i> statements in this
function must be of type <i>double</i>.

99
00:05:55,852 --> 00:06:01,536
Here, I have an expression which returns <i>b</i>,
of type <i>bool</i>. This is incorrect,

100
00:06:01,536 --> 00:06:04,036
and it will generate an error.

101
00:06:04,112 --> 00:06:06,337
Third remark concerning
the <i>return</i> statement:

102
00:06:06,337 --> 00:06:10,180
it must of course be the last
instruction executed

103
00:06:10,180 --> 00:06:13,357
since the <i>return</i> statement
ends the execution of the function.

104
00:06:13,357 --> 00:06:16,658
It makes no sense to put
instructions after the <i>return</i> statement.

105
00:06:16,658 --> 00:06:21,985
Let's take, for example, this <i>lire</i> function
["lire" means "read"], which must return

106
00:06:21,985 --> 00:06:23,354
a double after reading it
from the standard input.

107
00:06:23,354 --> 00:06:26,951
It begins by displaying a message
on the standard output

108
00:06:26,951 --> 00:06:32,571
and then. it declares a variable of type
double called <i>n</i> and initializes it

109
00:06:32,599 --> 00:06:36,599
with a value of 0. It reads the value
of the double on the standard input

110
00:06:36,599 --> 00:06:41,465
and finally, it returns to the rest
of the program the value of <i>n</i>.

111
00:06:41,465 --> 00:06:44,395
After this, the <i>lire</i> function ends.

112
00:06:44,395 --> 00:06:47,873
So there is absolutely no reason to
put an instruction after this,

113
00:06:47,873 --> 00:06:49,923
it would be completely wrong.

114
00:06:50,214 --> 00:06:54,194
Fourth and last remark concerning the
return statement.

115
00:06:54,220 --> 00:06:59,028
The compiler must always be able
to execute a return statement.

116
00:06:59,028 --> 00:07:02,256
Here is the example of the <i>lire</i>
function again, written

117
00:07:02,256 --> 00:07:04,539
slightly differently.

118
00:07:04,539 --> 00:07:09,369
We see, again, the request for the
user to input a number,

119
00:07:09,429 --> 00:07:13,619
the declaration and initialization
of the variable <i>n</i>,

120
00:07:13,674 --> 00:07:17,745
the reading, from the keyboard,
of the value of <i>n</i>;

121
00:07:17,745 --> 00:07:22,689
but here, we have a simple test to
check if <i>n</i> is strictly positive.

122
00:07:22,689 --> 00:07:27,654
If so, the function will execute the return
statement and will thus end

123
00:07:27,654 --> 00:07:30,366
and return the value of <i>n</i>.

124
00:07:30,366 --> 00:07:33,870
But what happens if <i>n</i> is negative?

125
00:07:33,870 --> 00:07:36,570
It is quite possible for <i>n</i>
to be negative,

126
00:07:36,570 --> 00:07:39,093
we can absolutely assume that
at this point,

127
00:07:39,093 --> 00:07:41,717
the user might have entered a
negative value.

128
00:07:41,717 --> 00:07:48,195
In such a case, this test here will be false
and so the function will jump to the line after

129
00:07:48,195 --> 00:07:51,830
the <i>if</i> statement and will end
up here. And you can see that from

130
00:07:51,830 --> 00:07:55,247
here, there is nothing left to execute.
The function will thus end <i>without a return</i>

131
00:07:55,247 --> 00:07:56,644
value. This is impossible,

132
00:07:56,644 --> 00:08:00,024
so the compiler will throw
you an error.

133
00:08:00,055 --> 00:08:04,365
The compiler verifies that
the function will always end

134
00:08:04,365 --> 00:08:07,027
with a <i>return</i> statement, 

135
00:08:07,027 --> 00:08:12,855
which returns a double, here, since
it is the function's return type.

136
00:08:12,855 --> 00:08:16,271
In this particular case, what
we could have done

137
00:08:16,271 --> 00:08:21,355
would have been to correct the function
by adding, for example, a loop here

138
00:08:21,355 --> 00:08:26,651
that would go back to the top
of this block as long as, e.g.,

139
00:08:26,651 --> 00:08:32,786
the value of n is negative or zero.
Then we would repeat the block

140
00:08:32,786 --> 00:08:36,516
that asks the user for number and
assigns it,

141
00:08:36,518 --> 00:08:41,778
which would allow the function to end
with a legal value every time.

142
00:08:41,803 --> 00:08:43,379
More specifically,

143
00:08:43,379 --> 00:08:47,829
since we first want to ask the user 
for a value before testing whether

144
00:08:47,829 --> 00:08:51,197
it is positive or negative,

145
00:08:51,197 --> 00:08:54,404
we obviously need a 
 <i>do while</i> loop.

146
00:08:54,404 --> 00:08:58,294
So, let's write the  <i>do while</i> loop here,

147
00:08:58,294 --> 00:09:01,555
with, as condition,

148
00:09:01,555 --> 00:09:05,876
that we ask the question again as
long as we get a bad answer.

149
00:09:05,876 --> 00:09:11,397
Originally, we wanted <i>n</i> 
to be positive

150
00:09:11,397 --> 00:09:15,466
to have a good answer.
So we will repeat the loop <i>while</i>,

151
00:09:15,466 --> 00:09:23,155
as long as, <i>n</i> is negative. While it is
negative, we must repeat

152
00:09:23,155 --> 00:09:28,818
this loop and as soon as <i>n</i>
will have a positive value ,

153
00:09:28,818 --> 00:09:38,438
we will be able to return the value.
So we can already write the <i>return</i> statement.

154
00:09:38,535 --> 00:09:42,976
Then, in the loop, we will
get the user's input --

155
00:09:42,976 --> 00:09:47,376
first we ask them the question,
and then we save their input.

156
00:09:47,379 --> 00:09:51,056
This is what the loop will do.

157
00:09:51,056 --> 00:09:57,701
We write the message here,
and we read the value into the variable <i>n</i>.

158
00:09:57,701 --> 00:10:01,111
Now, we still need to declare this
variable <i>n</i>

159
00:10:01,111 --> 00:10:04,270
since we use it here as
a condition for the <i>while</i> statement

160
00:10:04,270 --> 00:10:09,200
which is outside of the <i>do while</i>
loop and since we also use it here for

161
00:10:09,204 --> 00:10:13,137
the return statement; we will declare this variable
outside of the block to be able to use it

162
00:10:13,137 --> 00:10:16,947
outside of the block. So we will declare
it here, and initialize it with a value

163
00:10:16,947 --> 00:10:19,510
that makes sense, for example, 0.

164
00:10:19,510 --> 00:10:24,328
So, here is the precise form, which
corrects the previous mistake.

165
00:10:24,878 --> 00:10:27,366
Now, let's go over a few special
cases of functions.

166
00:10:27,366 --> 00:10:29,325
Let's start, for example, with
a function

167
00:10:29,325 --> 00:10:30,920
which has no return type.

168
00:10:30,920 --> 00:10:33,780
I must remind you that a function in
programming has nothing to do with

169
00:10:33,790 --> 00:10:35,714
a mathematical function.

170
00:10:35,714 --> 00:10:38,916
In programming, a function is simply
a set of instructions

171
00:10:38,916 --> 00:10:41,434
that we have put to the side,
and named.

172
00:10:41,434 --> 00:10:43,317
This set of instructions

173
00:10:43,317 --> 00:10:45,958
can certainly have 
no return value.

174
00:10:45,958 --> 00:10:50,232
It will return nothing to
the rest of the program.

175
00:10:50,232 --> 00:10:51,601
Such a function is sometimes called

176
00:10:51,601 --> 00:10:54,312
a "void function". [In French, there is a special word
for it: "procedure", not used in English]

177
00:10:54,312 --> 00:10:59,903
Such a function will need a specific
kind of declaration.

178
00:10:59,903 --> 00:11:03,270
The declaration of its type,
since it returns nothing,

179
00:11:03,270 --> 00:11:07,008
will be done with the reserved word
<i>void</i> to indicate

180
00:11:07,008 --> 00:11:09,139
that it has no return value.

181
00:11:09,139 --> 00:11:11,486
If I take the example here,
at the bottom of the slide,

182
00:11:11,486 --> 00:11:15,198
the function "affiche racine"
[means "display square root"] will simply

183
00:11:15,198 --> 00:11:19,671
print something to the terminal
and has no need for a return type,

184
00:11:19,671 --> 00:11:22,163
since it does not need to return anything
to the rest of the program.

185
00:11:22,163 --> 00:11:24,829
We will, if you will, "define its return type",
indicate the fact that

186
00:11:24,829 --> 00:11:29,669
it does not return anything,
by using the reserved word <i>void</i>.

187
00:11:30,330 --> 00:11:33,262
Since such a function does not return
anything to the rest of the program,

188
00:11:33,262 --> 00:11:35,300
it needs no return instruction,

189
00:11:35,300 --> 00:11:38,270
and the return statement is
optional in these functions.

190
00:11:38,275 --> 00:11:42,342
However, it could be useful to halt
the execution of the function

191
00:11:42,342 --> 00:11:45,903
prematurely, for example, depending 
on the result of an <i>if</i> statement.

192
00:11:45,903 --> 00:11:49,598
Here, we can certainly put a <i>return</i> 
statement in the function body --

193
00:11:49,598 --> 00:11:53,918
and this <i>return</i> will
be followed by a semicolon.

194
00:11:53,973 --> 00:11:59,547
If I go back to the "affiche racine" function
here at the bottom of the slide,

195
00:11:59,547 --> 00:12:02,001
which returns nothing at all,

196
00:12:02,001 --> 00:12:04,464
since it simply displays on the screen

197
00:12:04,464 --> 00:12:07,803
the square root of the argument
received.

198
00:12:07,803 --> 00:12:12,330
If "a" is negative here,
then we should simply display nothing,

199
00:12:12,330 --> 00:12:15,676
since the square root of a negative
number is not defined.

200
00:12:15,676 --> 00:12:17,578
So here, we will

201
00:12:17,578 --> 00:12:20,866
halt the execution of the
function body

202
00:12:20,866 --> 00:12:22,896
with a return statement

203
00:12:22,896 --> 00:12:25,249
which returns no expression,

204
00:12:25,249 --> 00:12:27,120
which is followed by nothing.

205
00:12:27,120 --> 00:12:33,633
If "a", for example, is positive,
then the <i>if</i> will not be executed

206
00:12:33,633 --> 00:12:35,592
and the function body will continue

207
00:12:35,592 --> 00:12:40,392
normally by displaying its square root.

208
00:12:40,978 --> 00:12:44,640
Another special case of functions:
functions with no parameters.

209
00:12:44,640 --> 00:12:46,758
We can of course define functions

210
00:12:46,758 --> 00:12:49,971
which need no external parameter
to work,

211
00:12:49,971 --> 00:12:51,449
to do their job.

212
00:12:51,449 --> 00:12:53,712
We have already seen this during
the lecture on prototypes:

213
00:12:53,712 --> 00:12:57,749
all we have to do is give an empty
list of parameters,

214
00:12:57,749 --> 00:13:02,486
which is simply a pair of empty 
parentheses, like this: <i>()</i>.

215
00:13:02,486 --> 00:13:04,550
For example, if I want a "saisie" function
["saisie" means "input"]

216
00:13:04,550 --> 00:13:08,210
whose job is to ask the user
for a <i>double</i>

217
00:13:08,210 --> 00:13:11,107
in the terminal.
This function must return a <i>double</i>

218
00:13:11,107 --> 00:13:13,457
but needs no parameter.

219
00:13:13,457 --> 00:13:17,637
So we will declare a variable here,
for example, a number of points,

220
00:13:17,640 --> 00:13:22,596
that the user will input, which
we will define with type <i>double</i>.

221
00:13:22,596 --> 00:13:27,631
Here, the type we will use is
the same as the type of the return value

222
00:13:27,631 --> 00:13:30,250
since it is this variable
that we will use

223
00:13:30,250 --> 00:13:33,938
to return the value to the rest
of the program.

224
00:13:33,938 --> 00:13:39,553
We declare this variable here, "nb_points"
["number of points"] and initialize it to zero.

225
00:13:39,553 --> 00:13:44,276
Then, we ask the user
to input a number of points.

226
00:13:44,276 --> 00:13:47,231
We will read the number of points

227
00:13:47,231 --> 00:13:49,477
as supplied by the user.

228
00:13:49,477 --> 00:13:51,700
And as long as the number of points

229
00:13:51,700 --> 00:13:54,288
is negative or larger than a certain
threshold,

230
00:13:54,288 --> 00:13:59,931
we will loop and ask the user
for input again.

231
00:13:59,931 --> 00:14:02,247
When we finally have a correct value,

232
00:14:02,247 --> 00:14:06,024
we return the number of points 
supplied by the user

233
00:14:06,024 --> 00:14:07,828
to the rest of the program.

234
00:14:07,828 --> 00:14:11,341
As you can see, the program which
will use, which will call "saisie" [means "input"]

235
00:14:11,341 --> 00:14:15,276
does not need to pass any arguments to
that function.

236
00:14:15,276 --> 00:14:19,966
The "saisie" function works
completely autonomously.

237
00:14:20,145 --> 00:14:23,176
Last special case of functions:

238
00:14:23,176 --> 00:14:25,951
the <i>main</i> function.

239
00:14:25,951 --> 00:14:29,921
"Main" is a function like
almost any other.

240
00:14:29,921 --> 00:14:34,349
It is simply the function which is
called right at the beginning of the program.

241
00:14:34,349 --> 00:14:38,154
This function has a special prototype.
Actually, it has two,

242
00:14:38,154 --> 00:14:42,887
but the prototype that we will use
in this course is this one:

243
00:14:42,887 --> 00:14:48,576
it must return an integer, <i>int</i>,
and receive no argument.

244
00:14:48,576 --> 00:14:52,367
The standard way of defining <i>main</i>
is like this:

245
00:14:52,367 --> 00:14:56,039
This integer, <i>int</i>, here,
which we return to the rest of the program,

246
00:14:56,039 --> 00:14:59,631
is what we return to the program which
called our program, that is,

247
00:14:59,631 --> 00:15:00,978
the environment

248
00:15:00,978 --> 00:15:03,089
in which you will execute
your program.

249
00:15:03,089 --> 00:15:08,048
And this return value will typically be an error code. 
By convention, the value 0

250
00:15:08,048 --> 00:15:12,124
indicates that the program was
executed correctly.

251
00:15:12,124 --> 00:15:17,685
It means that there was no error.
It might be a little surprising,

252
00:15:17,685 --> 00:15:21,335
but it is a common convention. Zero
means that there is no error.

253
00:15:21,335 --> 00:15:25,615
Generally, we use error codes
bigger than zero, one, two etc.

254
00:15:25,622 --> 00:15:29,838
to indicate that there is an error.
But that is outside the scope of this lecture.

255
00:15:29,838 --> 00:15:32,594
I will just mention the other prototype,

256
00:15:32,594 --> 00:15:36,565
the only other prototype accepted
for "main",

257
00:15:36,565 --> 00:15:38,212
which we sometimes encounter.

258
00:15:38,212 --> 00:15:40,112
In some development environments.

259
00:15:40,112 --> 00:15:41,696
it is the one you will get
by default.

260
00:15:41,696 --> 00:15:44,757
It is a prototype which takes
two arguments.

261
00:15:44,757 --> 00:15:46,685
But it would take us a bit too far

262
00:15:46,685 --> 00:15:48,922
to explain what these two arguments
are now.

263
00:15:48,922 --> 00:15:51,689
In short, they are parameters that we
could receive

264
00:15:51,689 --> 00:15:54,549
from the environment in which
we execute our program.
