1
00:00:06,369 --> 00:00:09,182
In a previous episode, we
introduced the concept of functions

2
00:00:09,182 --> 00:00:10,957
and their usefulness in programming.

3
00:00:11,230 --> 00:00:14,301
Today, we will look into what happens

4
00:00:14,301 --> 00:00:16,060
when we call a function.

5
00:00:16,347 --> 00:00:19,933
At this point, we know that the concept
of a "function" is associated

6
00:00:19,933 --> 00:00:25,347
with 3 aspects: the prototype, 
the definition and the call.

7
00:00:25,517 --> 00:00:29,969
We now will detail what goes on
at the moment we call a function.

8
00:00:30,828 --> 00:00:33,269
Let's go back to the
mean calculation example.

9
00:00:33,552 --> 00:00:38,194
Here, we have a little program which
asks the user to input

10
00:00:38,194 --> 00:00:44,177
two grades. It reads these two
grades from the standard input

11
00:00:44,177 --> 00:00:46,818
and displays the mean of these
two grades.

12
00:00:48,322 --> 00:00:53,548
The calculation of the mean is
done by calling a function,

13
00:00:53,548 --> 00:00:57,093
as you can see here,
and it is the specific mechanisms

14
00:00:57,093 --> 00:00:59,496
of this function call that
we will now study.

15
00:01:00,742 --> 00:01:04,731
Let's take a concrete example where
we wish to calculate the mean

16
00:01:04,731 --> 00:01:10,151
of two numbers, passed to the "moyenne" function
as C++ expressions. ["moyenne" means "mean"]

17
00:01:10,371 --> 00:01:15,697
The arguments passed to the "moyenne"
function upon calling it correspond

18
00:01:15,697 --> 00:01:20,038
to the parameters which the function
expects in order to run.

19
00:01:20,863 --> 00:01:24,826
Note that we usually call the data
needed by the function to run

20
00:01:24,826 --> 00:01:28,136
correctly as described in its
prototype as "parameters", whereas

21
00:01:28,136 --> 00:01:33,206
"arguments" refer to the values
that we actually pass to the function

22
00:01:33,206 --> 00:01:36,469
at the moment we invoke it, at
the moment we call it.

23
00:01:36,962 --> 00:01:39,720
So we will now dissect the different
steps that follow

24
00:01:39,720 --> 00:01:42,660
such a function call.

25
00:01:43,052 --> 00:01:48,672
First step: we start by evaluating the
arguments passed to the "moyenne" function

26
00:01:48,672 --> 00:01:49,739
at the moment of the call.

27
00:01:49,949 --> 00:01:53,716
In C++, we cannot know in advance
in which order this evaluation

28
00:01:53,716 --> 00:01:57,164
will take place. In this example, let's decide that

29
00:01:57,164 --> 00:02:01,017
it is the second argument
which is evaluated first.

30
00:02:01,783 --> 00:02:04,562
So we evaluate the second argument,
which works out to

31
00:02:04,562 --> 00:02:07,909
give a value of 4.25.

32
00:02:09,996 --> 00:02:16,146
Then, the first argument is evaluated,
which gives

33
00:02:16,146 --> 00:02:17,279
a value of 2.3.

34
00:02:19,277 --> 00:02:27,329
Second step: the arguments
supplied at the function call

35
00:02:28,209 --> 00:02:31,890
are matched with the parameters
expected by the "moyenne" function.

36
00:02:34,362 --> 00:02:37,539
This match is mediated by
an assignment -- we will assign

37
00:02:37,539 --> 00:02:43,669
to x the result of the evaluation
of the first argument, that is, 2.3.

38
00:02:44,761 --> 00:02:49,824
And we will affect to y the result
of the evaluation of the second argument,

39
00:02:49,824 --> 00:02:51,751
that is, 4.25.

40
00:02:52,803 --> 00:02:56,728
The "moyenne" function now has actual
values in x and y,

41
00:02:56,728 --> 00:02:59,380
with which it will be able to
work, to run.

42
00:03:00,723 --> 00:03:05,629
Third step: we start the execution
of the "moyenne" function.

43
00:03:06,229 --> 00:03:09,473
Here, all the instructions preceding
this final statement,

44
00:03:09,473 --> 00:03:12,903
this <i>return</i> statement,
will be executed/run.

45
00:03:13,425 --> 00:03:17,527
In this case, there is no instruction
preceding the <i>return</i> statement,

46
00:03:17,527 --> 00:03:21,296
so the third step doesn't
do anything in particular.

47
00:03:22,827 --> 00:03:27,194
Finally, the <i>return</i> statement
is executed.

48
00:03:27,650 --> 00:03:33,176
We start by evaluating the expression
following the <i>return</i> keyword,

49
00:03:33,176 --> 00:03:37,330
so here, this expression is
evaluated with

50
00:03:37,330 --> 00:03:42,049
actual values for x and y,
which produces

51
00:03:42,049 --> 00:03:46,918
a value of 3.275.

52
00:03:48,386 --> 00:03:56,850
Last step: we make this value, produced
by the expression, available

53
00:03:56,850 --> 00:04:00,287
to the one who invoked the
"moyenne" function by means of

54
00:04:00,287 --> 00:04:05,649
the <i>return</i> statement, which means
that the function call can now

55
00:04:05,649 --> 00:04:11,345
be replaced by the
value produced by the function call,

56
00:04:11,345 --> 00:04:14,493
that is, 3.275.

57
00:04:14,856 --> 00:04:22,317
So, after this last step, the variable
z now has a value of 3.275.

58
00:04:23,364 --> 00:04:26,730
Here is a small summary of the various
steps we have just examined.

59
00:04:26,986 --> 00:04:30,610
When a function call happens in a program,
five steps follow in the most general case:

60
00:04:30,610 --> 00:04:33,929
first step: the expressions which

61
00:04:33,929 --> 00:04:36,583
are passed as arguments to
the function are evaluated.

62
00:04:36,583 --> 00:04:40,872
Second step: the results of these
evaluations of expressions

63
00:04:40,872 --> 00:04:43,406
are affected to the parameters of
the function.

64
00:04:44,841 --> 00:04:48,186
Third step: the parameters of the function
now have actual values

65
00:04:48,186 --> 00:04:51,015
which which the function can work --

66
00:04:51,015 --> 00:04:53,128
the body of the function is executed.

67
00:04:53,466 --> 00:04:57,485
Fourth step: the expression which follows
the first <i>return</i> statement encountered

68
00:04:57,485 --> 00:05:02,557
during execution is evaluated and the result
of this evaluation is returned

69
00:05:02,791 --> 00:05:08,090
as result of the function call, which basically
means that this value replaces

70
00:05:08,090 --> 00:05:10,062
the function call.

71
00:05:10,916 --> 00:05:14,069
This is what happens in the 
most general case.

72
00:05:14,251 --> 00:05:18,987
The case where a function needs,
to work, data as inputs in the form

73
00:05:18,987 --> 00:05:25,207
of arguments, of incoming parameters,
and returns an actual value.

74
00:05:25,873 --> 00:05:26,965
That is the most general case.

75
00:05:27,070 --> 00:05:32,201
There are situations where this five-step
scheme is somewhat simplified.

76
00:05:32,201 --> 00:05:37,468
First situation: there exist cases
where a function can, for example,

77
00:05:37,468 --> 00:05:43,316
return a result, but
does not need any input

78
00:05:43,316 --> 00:05:44,356
to work.

79
00:05:44,785 --> 00:05:50,281
So, in this case, since there is no
use for input arguments,

80
00:05:50,281 --> 00:05:52,761
steps 1 and 2 do not happen.

81
00:05:53,541 --> 00:05:57,432
Second situation: there are cases
where a function

82
00:05:57,432 --> 00:06:04,612
can do work, but without returning
any actual value.

83
00:06:04,908 --> 00:06:07,407
For example: a function can display
a certain number of outputs

84
00:06:07,407 --> 00:06:10,943
on the terminal, but without
returning any values [to the core program].

85
00:06:11,157 --> 00:06:15,063
In this case, steps 4 and 5 do not happen.

86
00:06:15,904 --> 00:06:20,956
There is a specific argument-passing scheme,
called "passing by reference",

87
00:06:20,956 --> 00:06:24,387
which we will examine later on,

88
00:06:24,387 --> 00:06:28,001
where step 2 does not happen.
We will go over this in detail

89
00:06:28,001 --> 00:06:30,307
a little farther in this lesson.

90
00:06:32,197 --> 00:06:35,028
Here is another example which illustrates
that a function can

91
00:06:35,028 --> 00:06:38,677
call another function when running:

92
00:06:38,677 --> 00:06:41,344
we have a function "affiche score"
[means "display score"] the job of which

93
00:06:41,344 --> 00:06:44,856
is to display the score of a player.
It needs 3 inputs,

94
00:06:44,856 --> 00:06:46,912
it works with 3 parameters:

95
00:06:46,912 --> 00:06:50,191
the player, represented here by an integer;

96
00:06:50,191 --> 00:06:53,469
the number of points that he
won during the game;

97
00:06:53,469 --> 00:06:56,737
and the time he spent to
gain these points.

98
00:06:56,845 --> 00:07:00,584
And the "affiche score" function
will simply display the score of the player,

99
00:07:00,584 --> 00:07:04,333
which is calculated by using a call
to the "score" function.

100
00:07:04,333 --> 00:07:09,515
The "score" function's job is to
calculate the score and return it as an

101
00:07:09,515 --> 00:07:12,240
integer, calculated from the number
of points and the game time.

102
00:07:12,404 --> 00:07:15,329
So, this shows that
a function can absolutely

103
00:07:15,329 --> 00:07:16,620
call another function.

104
00:07:16,620 --> 00:07:19,207
The only thing to respect,
the golden rule, is to

105
00:07:19,207 --> 00:07:23,557
prototype the function before
calling it. Here, before calling the 

106
00:07:23,557 --> 00:07:25,969
"score" function, we must have
prototyped it.

107
00:07:27,259 --> 00:07:30,693
Finally, here is a small summary
of function calling.

108
00:07:30,802 --> 00:07:35,413
So, a function that was prototyped
beforehand can be called

109
00:07:35,413 --> 00:07:36,971
in a program.

110
00:07:36,971 --> 00:07:40,787
Here, it happens to
be called in the body of another function.

111
00:07:40,787 --> 00:07:43,601
At the moment of the function
call, there is a match being made

112
00:07:43,601 --> 00:07:47,898
between the actual arguments
and the parameters of the function.

113
00:07:47,898 --> 00:07:53,213
Here, what happens is that the argument
y is copied into the parameter x.

114
00:07:53,472 --> 00:07:56,586
The parameter x now has an actual value
with which the body of the function

115
00:07:56,586 --> 00:07:58,156
can be executed.

116
00:07:58,715 --> 00:08:03,091
The expression following the <i>return</i>
keyword is evaluated and made available

117
00:08:03,091 --> 00:08:06,263
to the program which called the function,
by means of the <i>return</i> statement.

118
00:08:06,263 --> 00:08:10,321
So here, the function call is
replaced by the result of the evaluation

119
00:08:10,321 --> 00:08:16,229
of the <i>return</i> statement an can
be assigned to variable of the program

120
00:08:16,515 --> 00:08:18,565
which called it.
You will have no doubt noticed,

121
00:08:18,565 --> 00:08:21,024
during this episode, that there
exists a jargon, a terminology

122
00:08:21,024 --> 00:08:21,998
associated to function calls.

123
00:08:22,175 --> 00:08:23,690
I spoke of "calling" a function,

124
00:08:23,690 --> 00:08:26,040
of "passing" arguments
to a function.

125
00:08:26,297 --> 00:08:28,932
Let's summarize this jargon
now.

126
00:08:29,085 --> 00:08:31,998
You surely understood that when I speak
of calling a function, I refer to

127
00:08:31,998 --> 00:08:34,573
the actual fact of using it.

128
00:08:34,573 --> 00:08:38,616
Here, I am using the function f to
calculate a value which I then store

129
00:08:38,616 --> 00:08:40,000
in a variable x.

130
00:08:40,458 --> 00:08:44,859
When I say that a value is passed as
argument to a function,

131
00:08:44,859 --> 00:08:50,258
I mean that this value is copied
into a parameter of the function.

132
00:08:50,593 --> 00:08:54,886
And finally, when I say that a function
returns a value y, I mean that

133
00:08:54,886 --> 00:08:59,608
the expression of the function call is
effectively replaced by the returned value.

134
00:08:59,922 --> 00:09:04,397
Let's take a concrete example here:
let's imagine that, if we are dealing

135
00:09:04,397 --> 00:09:12,073
with a small function f which returns
a result y, let's imagine that,

136
00:09:12,073 --> 00:09:15,460
at the moment we call this function,
the value of y is 5.

137
00:09:16,330 --> 00:09:21,818
Saying that the function returns 5 here
simply means that I can replace this

138
00:09:21,818 --> 00:09:24,632
call by the return value,
that is, 5.

139
00:09:25,235 --> 00:09:28,713
So I can just as well say that

140
00:09:28,713 --> 00:09:33,521
cosine of 0 returns the cosine of 0, or
cosine of 0 returns 1.
