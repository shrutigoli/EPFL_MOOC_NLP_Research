1
00:00:05,407 --> 00:00:07,422
Hello!
Welcome to this new lesson

2
00:00:07,422 --> 00:00:10,058
of the course, Introduction
to programming in C++.

3
00:00:10,058 --> 00:00:12,755
The objective of this new lesson
is to teach you

4
00:00:12,755 --> 00:00:15,679
to organize your code
by modularizing it

5
00:00:15,679 --> 00:00:17,257
using what we call functions.

6
00:00:17,644 --> 00:00:19,948
Functions are a part
of C++ programs,

7
00:00:19,948 --> 00:00:23,333
just like expressions and operators,

8
00:00:23,333 --> 00:00:26,477
and control structures,
which we have studied previously.

9
00:00:26,937 --> 00:00:31,403
Generally, functions operate on data,

10
00:00:31,403 --> 00:00:35,367
and these data will
influence the functions.

11
00:00:36,475 --> 00:00:38,647
Up until now, the programs
that you have written

12
00:00:38,798 --> 00:00:41,065
were made up of a 
linear sequence of instructions

13
00:00:41,065 --> 00:00:45,051
with no global organization
and no sharing of repeated tasks.

14
00:00:45,051 --> 00:00:47,704
For example, if the task consisting of

15
00:00:47,704 --> 00:00:52,030
asking the user for a number,
as the following code does,

16
00:00:52,313 --> 00:00:54,308
were to be executed several times
in our program.

17
00:00:54,807 --> 00:00:57,515
For example to ask once
for a number of points,

18
00:00:57,749 --> 00:01:00,090
for a time,
and for an age.

19
00:01:00,090 --> 00:01:01,640
What would you do?

20
00:01:02,810 --> 00:01:05,960
You might be tempted to copy the code
as many times as necessary

21
00:01:06,187 --> 00:01:08,833
to the appropriate places,
but, of course,

22
00:01:08,833 --> 00:01:11,520
this is a very bad solution.

23
00:01:11,520 --> 00:01:14,410
One must never duplicate
code when programming.

24
00:01:14,410 --> 00:01:16,660
Do not be tempted by the copy-paste.

25
00:01:16,660 --> 00:01:20,658
What you would like to copy
should be put into a function.

26
00:01:21,298 --> 00:01:23,523
Why must one never duplicate code?

27
00:01:23,523 --> 00:01:26,529
It makes the program
unnecessarily long,

28
00:01:26,529 --> 00:01:29,919
hard to understand,

29
00:01:29,919 --> 00:01:32,652
and especially, hard to maintain.

30
00:01:32,652 --> 00:01:36,019
One would have to apply every
modification to each of the copies.

31
00:01:36,019 --> 00:01:39,155
This is why every
good programming language

32
00:01:39,155 --> 00:01:43,277
provides means to allow
reusing parts of a program.

33
00:01:43,277 --> 00:01:47,102
In C++, this is done
using functions.

34
00:01:48,519 --> 00:01:51,089
Let's consider for example
the following program:

35
00:01:51,089 --> 00:01:54,065
This program begins
by asking for a number of points

36
00:01:54,065 --> 00:01:55,608
obtained by a player.

37
00:01:55,608 --> 00:01:58,928
As you can see, it does this
by using a do / while loop

38
00:01:58,928 --> 00:02:03,372
to force the user to input
a value between 0 and 100.

39
00:02:04,722 --> 00:02:07,881
Next, the program continues by
asking the user

40
00:02:07,881 --> 00:02:10,351
to enter the time spent by the player.

41
00:02:10,351 --> 00:02:14,382
This time,
it is a value between 1 and 60.

42
00:02:15,837 --> 00:02:19,376
Then, from the number of points
obtained by the player

43
00:02:19,949 --> 00:02:21,791
and the time he took,

44
00:02:21,791 --> 00:02:25,329
the program calculates
the score of the first player.

45
00:02:26,554 --> 00:02:31,529
Then, the program repeats these
operations for a second player.

46
00:02:31,842 --> 00:02:34,513
It asks for a number of points,

47
00:02:35,093 --> 00:02:36,526
a time,

48
00:02:36,526 --> 00:02:40,365
and calculates the score of the second player.

49
00:02:40,934 --> 00:02:46,709
Finally, the program compares
the scores of the two players

50
00:02:46,987 --> 00:02:52,145
to announce who, of
player 1 or player 2, has won.

51
00:02:52,679 --> 00:02:54,974
You can thus see
that in this program,

52
00:02:54,974 --> 00:02:59,422
the code which consists in asking 
for a number of points, a time,

53
00:02:59,422 --> 00:03:02,233
and calculating a score from 
the number of points and the time

54
00:03:02,233 --> 00:03:06,110
is repeated twice,
once for each of the two players.

55
00:03:06,110 --> 00:03:08,640
In such a case,
one must use a function

56
00:03:08,640 --> 00:03:11,367
to avoid code duplication.

57
00:03:11,367 --> 00:03:15,407
For this, I will first put to the side
the code that I am interested in.

58
00:03:15,912 --> 00:03:20,988
The code I am interested in is this,
the code which asks for a number of points,

59
00:03:20,988 --> 00:03:24,961
a time and which calculates a score.

60
00:03:24,961 --> 00:03:28,807
So I will put this code to the side.

61
00:03:28,807 --> 00:03:31,881
For example here.

62
00:03:34,918 --> 00:03:37,511
This code will constitute what we call

63
00:03:38,025 --> 00:03:41,494
the body of my function-to-be.

64
00:03:42,116 --> 00:03:45,564
We will have to name this body,
to be able to refer to it

65
00:03:45,756 --> 00:03:47,379
in the rest of the program.

66
00:03:47,379 --> 00:03:52,571
I will call it, here, saisie_et_calcul
(TN: saisie_et_calcul means input_and_calculation)

67
00:03:53,050 --> 00:03:57,886
and this will become the name
of my function-to-be.

68
00:03:58,414 --> 00:03:59,961
I now want my function
to be able to

69
00:03:59,961 --> 00:04:03,342
pass on a result
to the rest of the program.

70
00:04:03,789 --> 00:04:05,220
The result, in this example,

71
00:04:05,654 --> 00:04:08,655
is the player's score,
which was calculated by the function.

72
00:04:09,191 --> 00:04:12,297
I will start by removing the references
to player 1,

73
00:04:12,657 --> 00:04:16,698
since my function is now
valid for any player.

74
00:04:17,585 --> 00:04:20,233
I will use the <i>return</i> keyword

75
00:04:20,233 --> 00:04:26,768
followed by the variable name score_joueur
(TN: score_joueur means score_player).

76
00:04:26,931 --> 00:04:31,595
to say that my function must
return the value

77
00:04:31,595 --> 00:04:34,005
contained in the variable <i>score_joueur</i>.

78
00:04:34,166 --> 00:04:37,300
Dont worry, we will go over this
in detail in the rest of the course.

79
00:04:37,973 --> 00:04:41,428
My function can thus return a value
to the rest of the program.

80
00:04:41,771 --> 00:04:43,815
This value has a certain type.

81
00:04:43,897 --> 00:04:45,770
I must tell the rest of the program

82
00:04:45,770 --> 00:04:47,423
what this type is.

83
00:04:47,696 --> 00:04:49,700
The value returned by my function

84
00:04:49,700 --> 00:04:53,022
is the value contained
in the variable <i>score_joueur</i>.

85
00:04:53,256 --> 00:04:56,565
<i>score_joueur</i> was defined
with a <i>double</i> type.

86
00:04:56,565 --> 00:05:00,397
So I have to indicate
that my function will return

87
00:05:00,397 --> 00:05:02,212
a value of type <i>double</i>.

88
00:05:02,232 --> 00:05:06,769
And this is done by adding,
before the name of the function,

89
00:05:06,769 --> 00:05:12,252
the type of the value returned,
which is, here, <i>double</i>.

90
00:05:13,945 --> 00:05:16,260
Another aspect of functions
is that they can use

91
00:05:16,260 --> 00:05:19,086
values given by the outside
to work.

92
00:05:19,497 --> 00:05:22,748
Our function, saisie_et_calcul,
is relatively simple,

93
00:05:23,015 --> 00:05:25,320
it doesn't need
any such values.

94
00:05:25,320 --> 00:05:31,968
To indicate this, we add,
after the name of the function,

95
00:05:31,968 --> 00:05:35,614
opening and closing parentheses.

96
00:05:35,841 --> 00:05:38,003
Our function is complete.

97
00:05:38,260 --> 00:05:42,049
I will now use
my saisie_et_calcul function 

98
00:05:42,049 --> 00:05:43,903
to ask the user

99
00:05:43,903 --> 00:05:46,555
for a number of points, a time,
and to calculate the score of player 1.

100
00:05:46,555 --> 00:05:51,007
For this, I will return to the place
where I had extracted the code

101
00:05:51,298 --> 00:05:54,309
that I used
to create my function.

102
00:05:54,547 --> 00:05:56,096
That is, here.

103
00:05:56,828 --> 00:06:01,989
I will declare a variable
which will contain the score of player 1.

104
00:06:02,380 --> 00:06:05,863
I will use the function which
I named saisie_et_calcul

105
00:06:06,191 --> 00:06:08,559
and this will be written like so.

106
00:06:10,107 --> 00:06:13,952
The instruction that I have just created, here,

107
00:06:13,952 --> 00:06:15,726
is thus a declaration

108
00:06:15,736 --> 00:06:17,585
of the variable score_joueur1
(score_player1)

109
00:06:17,585 --> 00:06:25,426
and I initialize this variable
by using the function saisie_et_calcul.

110
00:06:26,884 --> 00:06:32,830
This is known as
<i>function call</i>.

111
00:06:32,830 --> 00:06:36,901
The call will return the result
of the execution of the function.

112
00:06:36,901 --> 00:06:39,664
Which is, here, the player's score.

113
00:06:39,664 --> 00:06:43,912
This value can then, for example,
be stored in a variable,

114
00:06:43,912 --> 00:06:45,461
as is the case here.

115
00:06:45,461 --> 00:06:48,605
I can do exactly the same thing
for the second player.

116
00:06:49,285 --> 00:06:53,589
I can remove the code
that corresponds to my function

117
00:06:53,589 --> 00:07:00,464
that is, this code, and replace it
by a call to my function saisie_et_calcul

118
00:07:00,976 --> 00:07:05,504
to initialize the variable <i>score_joueur2</i>.

119
00:07:06,723 --> 00:07:09,977
You can see that the code
is now much more concise.

120
00:07:10,656 --> 00:07:15,288
For the moment, my function saisie_et_calcul
is defined at the beginning of the program.

121
00:07:15,648 --> 00:07:16,887
That is, here.

122
00:07:17,575 --> 00:07:21,863
But I could define it
elsewhere in the program,

123
00:07:22,206 --> 00:07:23,635
for example at the end.

124
00:07:23,974 --> 00:07:25,648
Like so.

125
00:07:26,158 --> 00:07:32,048
But if I want to use my function
to initialize the variables

126
00:07:32,391 --> 00:07:35,157
score_joueur1 and score_joueur2,
(TN: score_player1 and score_player2)

127
00:07:35,540 --> 00:07:38,526
the compiler must know this function

128
00:07:38,795 --> 00:07:40,699
at the moment of the function call.

129
00:07:41,194 --> 00:07:45,840
To be able to declare this
function before its call,

130
00:07:46,477 --> 00:07:52,363
I will simply repeat the first line
of the definition of my function.

131
00:07:52,421 --> 00:07:57,261
I will put this first line before the
function call, somewhere here,

132
00:07:57,261 --> 00:08:02,600
and end this line
with a semicolon.

133
00:08:03,024 --> 00:08:07,027
This way, now, when I call
my function,

134
00:08:07,027 --> 00:08:10,561
the compiler already knows
the name of the function

135
00:08:10,561 --> 00:08:14,747
and the return type of the function,
i.e <i>double</i>, here.

136
00:08:15,570 --> 00:08:25,021
This line that declares a function
is called a function prototype.

137
00:08:25,901 --> 00:08:29,592
Creating the saisie_et_calcul function
allowed me to avoid duplicating code.

138
00:08:30,380 --> 00:08:34,321
It is also interesting to use a function

139
00:08:34,321 --> 00:08:37,754
to focus on a somewhat
difficult part of the program,

140
00:08:37,754 --> 00:08:41,705
such as, here, the calculation
of a player's score.

141
00:08:42,072 --> 00:08:49,446
So I will extract, as before, the code
which calculates a player's score.

142
00:08:50,046 --> 00:08:53,538
And from there, I will create 
a function in the same way

143
00:08:53,538 --> 00:08:56,125
as in my saisie_et_calcul function.

144
00:08:56,125 --> 00:08:59,954
This new function will
return the player's score,

145
00:09:00,359 --> 00:09:02,381
so a value of type double.

146
00:09:02,982 --> 00:09:05,960
I will call this new function,
simply, <i>score</i>,

147
00:09:05,960 --> 00:09:09,771
and for now I will put
opening and closing parentheses

148
00:09:09,771 --> 00:09:12,462
after the name of the function.

149
00:09:12,462 --> 00:09:16,831
I will put the code that I have just
extracted between braces.

150
00:09:16,831 --> 00:09:21,698
As before,
I will use the <i>return</i> keyword

151
00:09:21,698 --> 00:09:25,662
to indicate that my function
must return the player's score.

152
00:09:26,848 --> 00:09:29,244
It will be written like so.

153
00:09:29,887 --> 00:09:34,009
The difference with the first
saisie_et_calcul function

154
00:09:34,009 --> 00:09:37,030
is that this new <i>score</i> function needs

155
00:09:37,030 --> 00:09:42,856
the variables <i>nb_points</i> 
and <i>temps</i> (TN : temps means time)

156
00:09:42,856 --> 00:09:44,834
to calculate the player's score.

157
00:09:44,834 --> 00:09:50,312
For this I will add these two
variables between parentheses.

158
00:09:50,312 --> 00:09:55,428
This is written like so.

159
00:09:56,041 --> 00:10:00,374
What I have just added between
parentheses, here,

160
00:10:00,374 --> 00:10:05,420
is called parameters.

161
00:10:05,975 --> 00:10:08,470
These are the parameters
of my function.

162
00:10:08,470 --> 00:10:12,945
Like before, I will go back
to where I extracted the code

163
00:10:12,945 --> 00:10:17,575
to create my <i>score</i> function
to call this <i>score</i> function.

164
00:10:17,754 --> 00:10:22,625
I can do it, for example,
just after the <i>return</i> keyword.

165
00:10:22,915 --> 00:10:25,270
I will call my new <i>score</i> function.

166
00:10:25,270 --> 00:10:28,566
This new function requires
the number of points,

167
00:10:28,566 --> 00:10:32,216
which is this variable here,

168
00:10:32,972 --> 00:10:37,385
and the game time, which I will
but between parentheses here.

169
00:10:39,689 --> 00:10:45,725
To sum up, I first identified the code
that was to be put into a function.

170
00:10:46,544 --> 00:10:53,241
I extracted this code to create
my new function which I named.

171
00:10:53,643 --> 00:10:56,769
I identified what we needed
as inputs to the function

172
00:10:57,240 --> 00:10:58,889
for the function to work.

173
00:10:59,643 --> 00:11:05,445
I also identified what my function had
to return to the rest of the program.

174
00:11:05,469 --> 00:11:10,117
Now I can replace the part
of code that I have extracted

175
00:11:10,578 --> 00:11:13,300
by a call to my function.

176
00:11:14,206 --> 00:11:17,674
A function is thus
a reusable fragment of a program,

177
00:11:17,674 --> 00:11:19,737
such as the saisie_et_calcul function.

178
00:11:19,737 --> 00:11:21,838
or important as-is,
like the <i>score</i> function.

179
00:11:22,283 --> 00:11:26,276
It is characterized by a body,
which the program fragment

180
00:11:26,276 --> 00:11:29,922
which is reused or emphasized.

181
00:11:30,244 --> 00:11:33,515
It is characterized also by its name

182
00:11:33,515 --> 00:11:36,494
which will allow one to refer
to that function.

183
00:11:36,494 --> 00:11:40,400
It can have parameters,

184
00:11:40,400 --> 00:11:42,872
which are the set of variables
external to the function

185
00:11:42,872 --> 00:11:46,594
and which the body needs in order to work.

186
00:11:46,846 --> 00:11:50,383
The function can also
return a value,

187
00:11:50,675 --> 00:11:53,605
and this value must have a type.

188
00:11:54,075 --> 00:11:59,661
And finally, the use of a function
in the rest of the program

189
00:12:00,043 --> 00:12:03,173
is known as a function call.

190
00:12:04,263 --> 00:12:06,763
A function thus has three aspects.

191
00:12:07,218 --> 00:12:11,518
First, its prototype, which 
we can see as a summary

192
00:12:11,518 --> 00:12:13,209
of what the function does.

193
00:12:13,209 --> 00:12:19,625
Since it contains the function's
name, its parameters,

194
00:12:19,846 --> 00:12:22,863
corresponding to the values
needed by the function

195
00:12:23,231 --> 00:12:24,969
to work;

196
00:12:25,564 --> 00:12:32,392
As well as the type of value
that the function must return.

197
00:12:32,886 --> 00:12:39,638
A second aspect is the effective
creation of the function, or its definition.

198
00:12:40,387 --> 00:12:45,760
Which starts like a prototype but
which also contains

199
00:12:45,948 --> 00:12:50,302
what we call the function body,

200
00:12:50,633 --> 00:12:53,817
which is the code which will be executed
when we use the function.

201
00:12:54,959 --> 00:12:59,866
The final aspect is thus the use of
the function, or its call.

202
00:13:01,587 --> 00:13:06,068
We will use the function
by giving it actual values

203
00:13:06,357 --> 00:13:09,258
for these parameters.

204
00:13:09,258 --> 00:13:17,532
The function will return a value
that we can easily assign to a variable.

205
00:13:17,532 --> 00:13:20,676
In practice, the developer,

206
00:13:20,676 --> 00:13:26,678
that is, the person who will write
the definition of the function,

207
00:13:26,678 --> 00:13:32,565
is not necessarily the same person as the
programmer,

208
00:13:32,565 --> 00:13:37,188
who
will use the function.

209
00:13:37,188 --> 00:13:43,745
The programmer using the function does not need to
know the body of the function.

210
00:13:43,745 --> 00:13:48,086
All that he needs to know is the
prototype of the function

211
00:13:48,086 --> 00:13:51,020
to be able to call it.

212
00:13:51,020 --> 00:14:00,294
The prototype thus acts as a bridge
between the programmers using functionnalities

213
00:14:00,294 --> 00:14:05,484
and the developers of these functionnalities.

214
00:14:05,484 --> 00:14:09,357
The (user) programmer must respect
the function's prototype

215
00:14:09,357 --> 00:14:11,685
when he calls the function.

216
00:14:11,685 --> 00:14:15,722
The developer must
make sure that the prototype

217
00:14:15,722 --> 00:14:21,888
corresponds to the problem
that other programmers want to solve

218
00:14:21,888 --> 00:14:23,067
by calling the function.

219
00:14:23,067 --> 00:14:25,886
Let's take a new example of a program,

220
00:14:25,886 --> 00:14:29,148
which uses a function called moyenne (TN: mean )
to calculate the mean of two values.

221
00:14:29,148 --> 00:14:31,272
I think that you are now able to

222
00:14:31,272 --> 00:14:33,884
identify the three aspects of this
mean function

223
00:14:33,884 --> 00:14:35,897
in this new program.

224
00:14:35,897 --> 00:14:43,929
First, we have the 
prototype of the function.

225
00:14:43,929 --> 00:14:47,713
As you can see, 
the function has two parameters

226
00:14:47,713 --> 00:14:54,039
which correspond to the two values
that we want to average.

227
00:14:54,039 --> 00:14:57,407
These two values are of type <i>double</i>.

228
00:14:57,407 --> 00:15:00,880
So their mean will also
be of type double.

229
00:15:00,880 --> 00:15:03,484
The value returned by the <i>moyenne</i>
(<i>mean</i>) function

230
00:15:03,484 --> 00:15:06,896
will also be of type <i>double</i>.

231
00:15:06,896 --> 00:15:14,804
We then have a call to our
<i>moyenne</i> function.

232
00:15:15,649 --> 00:15:19,766
We can call this <i>moyenne</i> function
in this part of the program

233
00:15:19,766 --> 00:15:23,512
because the prototype was
placed earlier in the program.

234
00:15:24,182 --> 00:15:28,765
We give the values of two variables
to this function,

235
00:15:28,765 --> 00:15:35,638
<i>note1</i> and <i>note2</i> (TN: <i>grade1, grade2</i>)
which were first given by the user.

236
00:15:37,560 --> 00:15:42,515
This instruction displays the values
returned by the <i>moyenne</i> function.

237
00:15:43,549 --> 00:15:50,050
Finally, we have the definition
of the function here,

238
00:15:50,572 --> 00:15:53,590
with its body, that is,

239
00:15:54,286 --> 00:16:00,281
the code which defines how the function
will calculate the mean of the two values.

240
00:16:00,837 --> 00:16:03,966
We will now go over
the three aspects,

241
00:16:03,966 --> 00:16:06,825
the three aspects of functions.
