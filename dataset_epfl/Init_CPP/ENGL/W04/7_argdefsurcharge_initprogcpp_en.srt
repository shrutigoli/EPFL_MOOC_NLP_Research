1
00:00:05,935 --> 00:00:08,758
Let's end with two fairly
easy-to-understand notions.

2
00:00:08,758 --> 00:00:11,510
First, default arguments.

3
00:00:11,510 --> 00:00:14,590
In function prototypes, we can

4
00:00:14,590 --> 00:00:16,852
give default values

5
00:00:16,852 --> 00:00:19,824
to some parameters of
the function.

6
00:00:20,337 --> 00:00:22,293
And in that case,
it becomes unnecessary

7
00:00:22,293 --> 00:00:26,091
to supply values, that is,
arguments, to these parameters

8
00:00:26,501 --> 00:00:28,876
when we call the function.

9
00:00:29,186 --> 00:00:31,751
To define such a parameter

10
00:00:31,751 --> 00:00:34,156
with a default value,

11
00:00:34,156 --> 00:00:37,197
all that is needed is to add, in the function's prototype, 
an equals sign ('=')

12
00:00:37,197 --> 00:00:39,187
after the parameter,
followed by the default value


13
00:00:39,187 --> 00:00:43,506
that we wish to give

14
00:00:43,506 --> 00:00:45,334
to this parameter.

15
00:00:45,334 --> 00:00:47,322
Kind of like an assignment.

16
00:00:47,819 --> 00:00:49,676
And be careful,

17
00:00:49,676 --> 00:00:52,238
these parameters with default values

18
00:00:52,238 --> 00:00:54,699
must absolutely appear last

19
00:00:54,699 --> 00:00:57,504
in the list of parameters
of the function.

20
00:00:58,746 --> 00:01:01,625
Let's take as an example a function
which will display a line

21
00:01:01,625 --> 00:01:03,125
of several characters.

22
00:01:03,131 --> 00:01:06,424
The prototype of this function
is here,

23
00:01:06,753 --> 00:01:09,513
the name of the function is 
<i>affiche_ligne</i> (TN: means "<i>display_line</i>").

24
00:01:09,513 --> 00:01:12,261
This function takes two parameters:

25
00:01:12,261 --> 00:01:17,199
the first parameter will define 
the character

26
00:01:17,217 --> 00:01:18,976
that we wish to repeat on the line.

27
00:01:18,976 --> 00:01:22,007
The type, <i>char</i>, simply means that

28
00:01:22,007 --> 00:01:26,194
the parameter <i>elt</i> will
contain a character.

29
00:01:26,699 --> 00:01:29,510
The second parameter of the function is

30
00:01:29,510 --> 00:01:33,067
the number of times that we
wish to repeat the character.

31
00:01:33,067 --> 00:01:34,854
And you can see that 

32
00:01:34,854 --> 00:01:39,263
this parameter has a default value
of 5.

33
00:01:39,263 --> 00:01:41,593
Which means that when I call

34
00:01:41,593 --> 00:01:45,137
the <i>affiche_ligne</i> function
in this way,

35
00:01:45,137 --> 00:01:47,632
that is, with a single argument,

36
00:01:47,632 --> 00:01:52,111
where the first argument is the
'*' character (star),

37
00:01:52,111 --> 00:01:57,550
The parameter <i>elt</i>
will contain the star character.

38
00:01:57,550 --> 00:02:00,729
Since I don't have a second argument

39
00:02:00,729 --> 00:02:03,214
in this call to my <i>affiche_ligne</i>
function,

40
00:02:03,524 --> 00:02:06,930
the second parameter <i>nb</i>
will take

41
00:02:06,930 --> 00:02:09,773
the default value of 5.

42
00:02:11,084 --> 00:02:16,239
And so, this call to the
<i>affiche_ligne</i> function

43
00:02:16,239 --> 00:02:20,279
will display a line with
5 stars.

44
00:02:21,052 --> 00:02:22,975
Now,

45
00:02:22,975 --> 00:02:25,958
the second call

46
00:02:27,109 --> 00:02:29,698
to my <i>affiche_ligne</i> function

47
00:02:29,698 --> 00:02:32,459
has two arguments,

48
00:02:32,459 --> 00:02:35,030
where the first argument is
the '+' (plus) character

49
00:02:35,030 --> 00:02:38,898
and the second argument
has a value of 8.

50
00:02:39,468 --> 00:02:41,638
In this case,

51
00:02:41,638 --> 00:02:46,177
the parameter <i>elt</i> will
contain the '+' character

52
00:02:46,816 --> 00:02:49,919
and the second parameter <i>nb</i>

53
00:02:49,919 --> 00:02:52,982
will not take the default value
of 5,

54
00:02:52,982 --> 00:02:56,067
but the value which is passed
as an argument here,

55
00:02:56,067 --> 00:02:57,689
which is 8.

56
00:02:57,689 --> 00:03:00,638
And so this call to my
<i>affiche_ligne</i> function

57
00:03:00,638 --> 00:03:05,533
will display the '+'
character eight times.

58
00:03:06,649 --> 00:03:09,487
Two remarks on this concept
of default arguments:

59
00:03:09,487 --> 00:03:12,688
arguments with default values

60
00:03:12,688 --> 00:03:17,405
must be specified
in the function prototype

61
00:03:17,405 --> 00:03:20,436
and not in the definition
of the function.

62
00:03:21,010 --> 00:03:25,659
What's more, upon calling a
function with several parameters

63
00:03:25,659 --> 00:03:27,890
with default values,

64
00:03:27,890 --> 00:03:32,239
omitted arguments must be
the last ones

65
00:03:32,239 --> 00:03:36,787
and omitted in the order
of the parameter list

66
00:03:36,787 --> 00:03:43,219
For example, look
at this function

67
00:03:44,080 --> 00:03:47,966
which has a first parameter
called "i"

68
00:03:47,966 --> 00:03:50,058
which has no default value,

69
00:03:50,058 --> 00:03:53,833
a second parameter "c" which
has the character "a"

70
00:03:53,833 --> 00:03:55,986
as default value;

71
00:03:57,218 --> 00:03:59,569
and a third parameter "x"

72
00:03:59,569 --> 00:04:02,035
with a value of 0 by default.

73
00:04:02,552 --> 00:04:07,580
If I now call my function "f"
in this way,

74
00:04:07,593 --> 00:04:09,464
that is, with one single argument,

75
00:04:09,464 --> 00:04:13,488
then the parameter "i" will
take on the value of 1,

76
00:04:13,642 --> 00:04:16,451
the parameter "c" will take

77
00:04:16,451 --> 00:04:19,400
the default character, "a",

78
00:04:19,950 --> 00:04:23,712
and the parameter "x"
will take its default value

79
00:04:23,775 --> 00:04:26,019
which is 0.

80
00:04:27,121 --> 00:04:29,820
I can also call my function "f"

81
00:04:29,820 --> 00:04:34,157
in this way, with
two arguments.

82
00:04:34,157 --> 00:04:35,867
"i" will take

83
00:04:37,057 --> 00:04:41,010
the value of the first argument,
that is, 1,

84
00:04:41,023 --> 00:04:44,569
"c" will contain the second argument,

85
00:04:44,569 --> 00:04:47,947
that is, the character "b",

86
00:04:47,947 --> 00:04:50,579
and the third parameter "x"

87
00:04:51,039 --> 00:04:53,455
will still take its
default value

88
00:04:53,455 --> 00:04:55,223
of 0.

89
00:04:55,653 --> 00:04:59,525
Now, if I try to call my
"f" function

90
00:04:59,525 --> 00:05:01,445
in this way,

91
00:05:01,445 --> 00:05:04,210
the compiler will refuse the call

92
00:05:04,210 --> 00:05:09,284
because the second argument
here is of type <i>double</i>.

93
00:05:09,557 --> 00:05:14,053
The compiler will try to assign this
<i>double</i>-type value

94
00:05:14,463 --> 00:05:19,303
to the second parameter "c"
which is of type <i>char</i>,

95
00:05:19,303 --> 00:05:23,304
so this call will be refused
by the compiler.

96
00:05:24,224 --> 00:05:27,006
Now, we might be tempted

97
00:05:27,006 --> 00:05:30,274
to call our "f" function
like this,

98
00:05:30,282 --> 00:05:34,241
that is, by omitting
the second parameter.

99
00:05:34,540 --> 00:05:38,719
Unfortunately, the compiler will
refuse such a call.

100
00:05:40,874 --> 00:05:42,466
And finally,

101
00:05:42,466 --> 00:05:46,740
if I try to call my "f" function
like this,

102
00:05:46,740 --> 00:05:48,544
with these three arguments,

103
00:05:48,544 --> 00:05:50,218
what will happen?

104
00:05:50,218 --> 00:05:53,850
The parameter "i" will take
a value of 1,

105
00:05:54,260 --> 00:05:58,722
the parameter "c" will contain
the character "b",

106
00:05:59,578 --> 00:06:05,546
and the parameter "x" will take
the value of the third argument,

107
00:06:05,546 --> 00:06:07,574
a value of 3.

108
00:06:08,660 --> 00:06:12,560
We will finish by talking about
overloading of functions.

109
00:06:12,850 --> 00:06:15,315
In C++, it is possible to define

110
00:06:15,315 --> 00:06:17,496
several functions with the same name

111
00:06:17,496 --> 00:06:20,091
if these functions have
different parameters.

112
00:06:20,091 --> 00:06:26,139
That is, if the number or types of these
parameters are different.

113
00:06:26,549 --> 00:06:30,078
This will allow the compiler to
distinguish between these functions.

114
00:06:30,920 --> 00:06:33,749
This is called function
overloading

115
00:06:33,749 --> 00:06:36,347
and it will come in very
handy when we use functions

116
00:06:36,347 --> 00:06:39,688
which have similar tasks,

117
00:06:39,695 --> 00:06:42,319
but operate on different kinds of data.

118
00:06:43,463 --> 00:06:46,443
So, in C++, what determines the
difference between functions

119
00:06:46,443 --> 00:06:48,475
is not only the names of
these functions,

120
00:06:48,475 --> 00:06:50,898
but also the types of their parameters,

121
00:06:50,898 --> 00:06:55,048
which is technically called the
"signature" of the function.

122
00:06:55,063 --> 00:06:57,001
Note that the return type

123
00:06:57,001 --> 00:06:59,227
is not part of these distinctions.

124
00:06:59,227 --> 00:07:01,385
You cannot have two functions

125
00:07:01,385 --> 00:07:03,773
with the same name and same
parameters

126
00:07:03,773 --> 00:07:06,572
and simply with different
return types.

127
00:07:06,572 --> 00:07:10,182
So I can have two functions "f",

128
00:07:10,512 --> 00:07:14,236
where the first function has
a parameter of type <i>int</i>,

129
00:07:14,236 --> 00:07:18,079
and where the second function
has a parameter of type <i>double</i>,

130
00:07:18,439 --> 00:07:21,501
and where the return type
for these two functions

131
00:07:21,501 --> 00:07:24,888
is the same, for example <i>int</i>.

132
00:07:25,687 --> 00:07:29,515
However, I cannot have two
functions "f"

133
00:07:29,515 --> 00:07:34,292
which both have a parameter of type
<i>int</i> for example,

134
00:07:34,732 --> 00:07:39,107
and which vary only in
their return type.

135
00:07:39,537 --> 00:07:41,739
For example <i>int</i> for the first

136
00:07:41,739 --> 00:07:43,979
and <i>double</i> for the second.

137
00:07:45,363 --> 00:07:49,495
To sum up, in C++, one can have
several functions with the same name,

138
00:07:49,495 --> 00:07:52,408
as long as they have different types
of parameters.

139
00:07:52,868 --> 00:07:55,663
For example, I can have three functions

140
00:07:55,663 --> 00:07:57,867
which are all named <i>affiche</i>
(<i>display</i>).

141
00:08:00,073 --> 00:08:03,561
The first function has a
parameter of type <i>int</i>,

142
00:08:03,561 --> 00:08:06,982
the second, a parameter of type
<i>double</i>,

143
00:08:06,982 --> 00:08:10,932
and the third, two parameters
of type <i>int</i>.

144
00:08:10,940 --> 00:08:13,665
These are indeed 3
different functions.

145
00:08:14,501 --> 00:08:19,874
Now, if I call <i>affiche(1)</i>,

146
00:08:19,874 --> 00:08:22,841
since the argument 1 is of type <i>int</i>,

147
00:08:23,271 --> 00:08:25,466
it is the first function,

148
00:08:25,766 --> 00:08:30,175
which has one parameter of type <i>int</i>,
that will be called.

149
00:08:30,175 --> 00:08:33,364
And in this case, I will
get the message

150
00:08:34,634 --> 00:08:38,000
"entier : 1". 
(TN : means "integer: 1")

151
00:08:39,161 --> 00:08:43,982
If I now call <i>affiche(1.0)</i>,

152
00:08:44,599 --> 00:08:49,272
since the argument (1.0) is of type <i>double</i>,

153
00:08:49,582 --> 00:08:51,536
it is the second function,

154
00:08:51,536 --> 00:08:55,750
which has one parameter of type <i>double</i>,
that will be called,

155
00:08:55,755 --> 00:08:58,041
and it will display the message

156
00:08:59,071 --> 00:09:02,317
"reel : 1" (TN : means "real : 1").

157
00:09:03,967 --> 00:09:08,373
If I call <i>d'affiche(1,1)</i>,

158
00:09:08,373 --> 00:09:13,623
since both arguments have the same
<i>int</i> type,

159
00:09:14,293 --> 00:09:17,253
it is the third function

160
00:09:17,923 --> 00:09:19,851
that will be called

161
00:09:20,271 --> 00:09:26,063
and I will get, on the display,
"couple : 11".

162
00:09:28,435 --> 00:09:32,517
Careful: I cannot define these
2 functions

163
00:09:32,517 --> 00:09:34,201
in the same program.

164
00:09:34,201 --> 00:09:37,133
The first function has a parameter
of type  <i>int</i>;

165
00:09:37,133 --> 00:09:39,712
the second has two parameters,

166
00:09:39,712 --> 00:09:41,704
both of type  <i>int</i>,

167
00:09:41,704 --> 00:09:44,279
but the second parameter has
a default value.

168
00:09:44,664 --> 00:09:51,160
If I now call <i>affiche(2)</i>,

169
00:09:51,860 --> 00:09:54,918
it is impossible to know whether
I want to call

170
00:09:54,918 --> 00:09:57,161
the first function "affiche"

171
00:09:57,161 --> 00:10:00,878
by passing 2 as an argument
to the parameter "x",

172
00:10:00,878 --> 00:10:03,017
or the second function,

173
00:10:03,187 --> 00:10:06,056
by passing 2 to the parameter "x1"

174
00:10:06,056 --> 00:10:09,919
and using the default value of 1
for parameter "x2".

175
00:10:09,935 --> 00:10:11,736
There is an ambiguity 

176
00:10:11,736 --> 00:10:14,277
between these two functions
in this call.

177
00:10:14,277 --> 00:10:16,488
This is why

178
00:10:17,378 --> 00:10:19,753
defining these two functions together

179
00:10:19,753 --> 00:10:23,280
in the same program
is forbidden.
