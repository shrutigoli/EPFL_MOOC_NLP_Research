1
00:00:05,591 --> 00:00:09,039
In this episode, I would like to sum up
the general methodology

2
00:00:09,039 --> 00:00:14,631
that I advise you to follow to
design and write a function.

3
00:00:14,631 --> 00:00:15,674
First of all,

4
00:00:15,674 --> 00:00:19,373
I ask you to clearly identify
what the function must do.

5
00:00:19,373 --> 00:00:20,826
It is a very important point.

6
00:00:20,826 --> 00:00:24,246
You must start by identifying what
the function must do.

7
00:00:24,246 --> 00:00:26,404
It is useless to try
to write a function

8
00:00:26,404 --> 00:00:28,817
if you don't know clearly
what it is you want to do.

9
00:00:28,888 --> 00:00:30,848
So this is a very
conceptual point.

10
00:00:30,848 --> 00:00:33,995
There is no line of C++ to write here.

11
00:00:33,995 --> 00:00:35,986
But the point is to design,

12
00:00:37,977 --> 00:00:39,969
with the help perhaps of a piece of
paper and pencil to draw diagrams,

13
00:00:39,969 --> 00:00:42,856
to design what the function will do.

14
00:00:42,856 --> 00:00:46,353
Here, we are really interested
in what the function does.

15
00:00:46,353 --> 00:00:49,280
We are interested in the "what" and
for the moment, we do not concern

16
00:00:49,280 --> 00:00:52,137
ourselves with the "how", that is,
how the function will be implemented.

17
00:00:52,137 --> 00:00:55,319
And this is the stage where it
is important to watch out for what

18
00:00:55,319 --> 00:00:58,813
we have seen in a previous episode
on prototypes, the so-called

19
00:00:58,813 --> 00:01:00,697
"side effects".

20
00:01:00,697 --> 00:01:02,434
In other words, the function

21
00:01:02,434 --> 00:01:06,065
must do exactly what it was 
designed to do, no more, no less.

22
00:01:06,065 --> 00:01:09,955
If, for example, you have designed
a <i>sqrt</i> function whose

23
00:01:09,955 --> 00:01:12,904
goal is to calculate the square
root of a <i>double</i>,

24
00:01:12,904 --> 00:01:14,379
for example <i>x</i> here,

25
00:01:14,379 --> 00:01:19,856
and whose call would correspond
to something like <i>z=sqrt(x)</i>,

26
00:01:19,856 --> 00:01:24,497
then the <i>sqrt</i> function here must
only calculate the square root of <i>x</i>

27
00:01:24,497 --> 00:01:25,732
and return it to z.

28
00:01:25,732 --> 00:01:28,934
It must not pollute the output
in the terminal

29
00:01:28,934 --> 00:01:31,018
with displayed messages.

30
00:01:31,018 --> 00:01:36,671
It must only calculate, without displaying anything at all,
the value of the square root of <i>x</i>.

31
00:01:37,691 --> 00:01:41,250
Then, once you have done this,
you should ask yourselves:

32
00:01:41,250 --> 00:01:42,982
what should the function receive as inputs?

33
00:01:42,982 --> 00:01:46,382
What are the arguments
that the function needs?

34
00:01:46,382 --> 00:01:49,278
Say, for example, I go back to our example 
<i>moyenne</i> function ("moyenne" means "mean").

35
00:01:49,278 --> 00:01:52,457
In the beginning, I clearly decided
that this function's job

36
00:01:52,457 --> 00:01:55,894
was to calculate the mean of two
real numbers.

37
00:01:55,894 --> 00:01:57,308
It would take two real numbers as inputs

38
00:01:57,308 --> 00:01:59,918
and it would calculate the mean
value of these two real numbers.

39
00:01:59,918 --> 00:02:04,304
So at this stage, I'm thinking that
it will take two arguments of type <i>double</i>.

40
00:02:04,304 --> 00:02:08,886
For example, I can call them <i>x</i> and <i>y</i>.

41
00:02:09,926 --> 00:02:13,526
Then, you will ask yourselves whether
you should pass your arguments

42
00:02:13,526 --> 00:02:15,727
by value or by reference.

43
00:02:15,727 --> 00:02:18,274
Let me remind you briefly that there
exist two ways of passing arguments:

44
00:02:18,274 --> 00:02:20,463
passing by value, which creates a copy

45
00:02:20,463 --> 00:02:24,193
and thus does not allow the function
the modify the arguments received;

46
00:02:24,193 --> 00:02:26,092
and passing by reference,

47
00:02:26,152 --> 00:02:33,131
which is used when one wishes to be
able to modify the arguments in the function.

48
00:02:33,261 --> 00:02:38,945
So here, if I take the example of
a call to the "moyenne" function,

49
00:02:38,945 --> 00:02:44,427
where we would pass two arguments
<i>a</i> and <i>b</i>,

50
00:02:44,427 --> 00:02:47,980
the question is: will "moyenne"
modify <i>a</i> or <i>b</i>?

51
00:02:47,980 --> 00:02:50,482
The answer is clearly no.

52
00:02:50,482 --> 00:02:53,901
So here, we will pass them
by value.

53
00:02:55,671 --> 00:02:58,321
If, however, you think
that your function

54
00:02:58,328 --> 00:03:00,677
has to modify the arguments that
it received,

55
00:03:00,677 --> 00:03:03,391
then you should use passing
by reference,

56
00:03:03,391 --> 00:03:06,268
as we have seen in the video
about function calls.

57
00:03:07,038 --> 00:03:10,370
Then, optionally,  you can wonder
if it makes sense to give

58
00:03:10,370 --> 00:03:14,041
a default value to each parameter.

59
00:03:14,041 --> 00:03:16,959
This will be treated in
a subsequent video,

60
00:03:16,959 --> 00:03:20,023
but it is at this point that you
should ask yourselves this question.

61
00:03:20,743 --> 00:03:21,883
Fourth step:

62
00:03:22,793 --> 00:03:25,622
ask yourselves which type
of value

63
00:03:25,622 --> 00:03:28,444
the function must return to the
rest of the program.

64
00:03:28,444 --> 00:03:31,862
For this, you can write the code
in your head like this:

65
00:03:31,862 --> 00:03:35,682
z = "function call",
with the various arguments.

66
00:03:36,522 --> 00:03:40,448
Does it make sense to write
z = "function call"?

67
00:03:40,448 --> 00:03:42,966
So, for, example,
does it make sense to write,

68
00:03:42,966 --> 00:03:45,760
z = "the mean of <i>a</i> and <i>b</i>" ?

69
00:03:45,760 --> 00:03:47,891
In our case of course, it makes sense,

70
00:03:47,891 --> 00:03:51,851
and the sense is that <i>z</i>, at that moment,
will be the mean of <i>a</i> and <i>b</i>.

71
00:03:51,851 --> 00:03:56,937
So if it makes sense, the return 
value must be of the same type as <i>z</i>,

72
00:03:56,937 --> 00:03:58,955
when this expression makes sense.

73
00:03:58,955 --> 00:04:02,149
So here, it will be a <i>double</i>

74
00:04:02,149 --> 00:04:05,110
and this means that the
<i>moyenne</i> function

75
00:04:05,110 --> 00:04:08,621
must return a <i>double</i>.

76
00:04:09,131 --> 00:04:12,417
Sometimes, such an expression 
makes absolutely no sense;

77
00:04:12,417 --> 00:04:17,045
it makes no sense to write
z = "function call".

78
00:04:17,045 --> 00:04:19,242
For example, would it
make sense to write

79
00:04:19,242 --> 00:04:23,737
z = "display" ? We had the example,
earlier, of "display square root".

80
00:04:23,737 --> 00:04:27,541
Would it make sense to write
z = "display square root of 2" ?

81
00:04:27,541 --> 00:04:29,402
Careful, I said "display", 

82
00:04:29,402 --> 00:04:31,309
and not "calculate square root of 2".

83
00:04:31,309 --> 00:04:32,967
What would <i>z</i> be in this case?

84
00:04:32,967 --> 00:04:36,260
Personally, I don't see what it could refer to.

85
00:04:36,260 --> 00:04:39,756
"Display" displays something and that is all!
It has nothing to return here.

86
00:04:39,756 --> 00:04:42,786
So this expression, in my opinion,
makes no sense

87
00:04:42,786 --> 00:04:45,762
and in this case, the return type

88
00:04:45,762 --> 00:04:47,876
-- we call this a procedure --

89
00:04:47,876 --> 00:04:50,873
the return type would be <i>void</i>.

90
00:04:51,703 --> 00:04:53,739
Fifth and final step, at last.

91
00:04:53,739 --> 00:04:56,249
Now, and only now, you
can start to preoccupy

92
00:04:56,249 --> 00:05:00,477
yourselves with the "how":
how to write the function body,

93
00:05:00,477 --> 00:05:03,440
how the function will do what
it's got to do.

94
00:05:03,440 --> 00:05:07,775
Until now, we only worried about
the "what"

95
00:05:07,775 --> 00:05:11,502
and it is only now, right at the end,
that we attack the "how".

96
00:05:11,502 --> 00:05:15,847
Let's take the example of the <i>moyenne</i>
function, which I know

97
00:05:15,847 --> 00:05:19,919
thanks to the previous steps,
must return a <i>double</i>.

98
00:05:19,919 --> 00:05:24,617
It is called <i>moyenne</i>,

99
00:05:24,617 --> 00:05:28,545
it takes an argument <i>x</i> by value,

100
00:05:28,545 --> 00:05:31,314
since this argument must not
be modified,

101
00:05:31,314 --> 00:05:33,646
it takes a second argument <i>y</i>.

102
00:05:33,646 --> 00:05:39,382
We will know think about
how to write this function.

103
00:05:39,382 --> 00:05:42,503
So here I suggest that you start,
for example,

104
00:05:42,503 --> 00:05:47,780
by declaring a variable which
we will call <i>resultat</i> (means "result"),

105
00:05:49,180 --> 00:05:53,802
which we will initialize with a value
that makes sense, let's say, 0,

106
00:05:53,802 --> 00:05:59,031
and to immediately write a <i>return</i>
statement

107
00:05:59,031 --> 00:06:00,760
which uses this variable.

108
00:06:00,760 --> 00:06:04,239
I encourage you to proceed like this
every time you have such

109
00:06:04,239 --> 00:06:08,756
a function which returns a certain
type, for example <i>double</i>.

110
00:06:08,756 --> 00:06:11,991
You should define, right away,
a variable

111
00:06:11,991 --> 00:06:14,357
that you will use as
return value.

112
00:06:14,357 --> 00:06:17,910
This makes writing the function
body easier.

113
00:06:17,910 --> 00:06:19,049
Then, that is now,

114
00:06:19,049 --> 00:06:21,795
we will think about how to
calculate this result.

115
00:06:22,365 --> 00:06:24,393
So here, we could write

116
00:06:25,203 --> 00:06:30,851
<i>result = (x + y) / 2</i>.

117
00:06:33,261 --> 00:06:35,031
Suppose that we wanted to
write a function

118
00:06:35,031 --> 00:06:39,399
which asks the user for a number
between two bounds.

119
00:06:39,399 --> 00:06:44,231
The first step is to specify clearly
what the function must do.

120
00:06:44,741 --> 00:06:47,717
For this, we can start, for example,
by writing a comment

121
00:06:47,717 --> 00:06:49,911
indicating what the function will do.

122
00:06:50,701 --> 00:06:54,903
So here, we will indicate
that it is a function

123
00:06:55,513 --> 00:06:58,145
which asks for a number

124
00:06:58,255 --> 00:07:01,111
between two bounds,

125
00:07:01,911 --> 00:07:08,567
for example an integer
between 1 and 10.

126
00:07:08,727 --> 00:07:13,963
So we will name this function, for example,
<i>demander nombre</i> (<i>ask number</i>).

127
00:07:14,353 --> 00:07:15,828
Suppose, now, that we have

128
00:07:15,828 --> 00:07:18,138
understood well enough
what the function must do.

129
00:07:18,138 --> 00:07:20,113
We can now go on to the second
step,

130
00:07:20,113 --> 00:07:23,931
which is to specify
the parameters of the function.

131
00:07:23,931 --> 00:07:27,885
Here, since we want to ask
for a number between two bounds,

132
00:07:27,885 --> 00:07:30,734
the parameters that the function
needs to work are,

133
00:07:30,734 --> 00:07:32,732
of course, the two bounds.

134
00:07:32,732 --> 00:07:36,283
Suppose that we are working
on integers, here.

135
00:07:36,283 --> 00:07:40,353
Then the two bounds will be an
integer "borne inférieure" (= "lower bound")

136
00:07:41,123 --> 00:07:44,797
and an integer "borne supérieure"
(= "upper bound").

137
00:07:45,777 --> 00:07:49,331
So we will receive two integers.

138
00:07:50,711 --> 00:07:54,395
Then, we must ask ourselves whether
the two parameters passed

139
00:07:54,395 --> 00:07:56,956
must be modified by
the function or not.

140
00:07:56,956 --> 00:07:59,549
If they have to be passed by value
or by reference.

141
00:07:59,879 --> 00:08:00,927
It seem clear, here,

142
00:08:00,927 --> 00:08:03,169
that the lower and upper
bounds

143
00:08:03,169 --> 00:08:07,108
will not be modified by the
action of asking for a number,

144
00:08:07,598 --> 00:08:11,341
and so we will pass them by value,

145
00:08:11,341 --> 00:08:12,776
as indicated here.

146
00:08:13,226 --> 00:08:17,068
We can now proceed to step
number 4,

147
00:08:17,068 --> 00:08:22,897
which is to know what the return
type of the function should be.

148
00:08:23,457 --> 00:08:25,278
A good way to answer this question

149
00:08:25,988 --> 00:08:28,940
is to ask ourselves: how will
the function be called?

150
00:08:28,940 --> 00:08:33,429
And here, typically, it would be
called with an integer <i>i</i>

151
00:08:33,429 --> 00:08:35,339
and we would make a call
like this:

152
00:08:35,339 --> 00:08:43,043
<i>i = ask_number(between, we said,
1 and 10)</i>.

153
00:08:45,047 --> 00:08:49,901
When we have assignments such as
this one which can take the return value,

154
00:08:49,901 --> 00:08:53,367
where it makes sense to retrieve
a return value from the function,

155
00:08:53,367 --> 00:08:57,783
then, naturally, the return
type of the function

156
00:08:57,783 --> 00:09:02,929
must be the type of the variable used
in such an assignment.

157
00:09:02,929 --> 00:09:05,271
So here, it would make sense
to write what I wrote.

158
00:09:05,271 --> 00:09:07,550
The type of <i>i</i> would be <i>int</i>,

159
00:09:07,550 --> 00:09:12,819
which means that the return type
that we will specify for the function

160
00:09:13,339 --> 00:09:15,144
will be an <i>int</i> type.

161
00:09:15,934 --> 00:09:19,210
We can now return to
our program, here,

162
00:09:19,210 --> 00:09:26,132
and specify the return type
as being an integer.

163
00:09:27,702 --> 00:09:30,376
I can now go to the 
last step.

164
00:09:30,376 --> 00:09:31,897
Now and only now,

165
00:09:31,897 --> 00:09:35,552
I will attack the function
body.

166
00:09:36,222 --> 00:09:39,514
For this, I start by writing
the body and,

167
00:09:39,514 --> 00:09:41,342
small piece of advice here,

168
00:09:41,342 --> 00:09:46,878
when your function has a
return value,

169
00:09:46,878 --> 00:09:50,602
I suggest you immediately
declare a variable

170
00:09:50,602 --> 00:09:52,725
which will be used for the return.

171
00:09:52,725 --> 00:09:55,968
Ideally, you should also
initialize it directly

172
00:09:55,968 --> 00:10:01,317
and specify that you will
return this value.

173
00:10:02,121 --> 00:10:04,547
And you can now concentrate

174
00:10:04,547 --> 00:10:10,063
on how exactly the function
body will be written,

175
00:10:10,063 --> 00:10:11,818
you can preoccupy yourselves
with the "how".

176
00:10:11,818 --> 00:10:14,456
How should we ask for a number
between

177
00:10:14,456 --> 00:10:17,145
the lower bound and
the upper bound?

178
00:10:17,145 --> 00:10:19,401
I will leave you to do this
as an exercise.
