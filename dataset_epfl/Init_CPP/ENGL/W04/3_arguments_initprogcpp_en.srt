1
00:00:05,834 --> 00:00:08,396
In a previous video, 
we examined the five steps

2
00:00:08,396 --> 00:00:10,998
that follow, in the most general case,

3
00:00:10,998 --> 00:00:11,964
 a function call.

4
00:00:11,964 --> 00:00:15,521
In the examples we've seen up until now, 
the arguments we passed to the function

5
00:00:15,521 --> 00:00:18,612
were either simple values, 
or expressions to evaluate.

6
00:00:18,612 --> 00:00:21,673
Today, we'll take a closer look 
at what goes on 

7
00:00:21,673 --> 00:00:24,919
when the arguments we pass to a function 
are variables. 

8
00:00:24,919 --> 00:00:28,071
Let's start with a real example. 
Here, we have a small program 

9
00:00:28,071 --> 00:00:32,182
whose first instruction is 
to declare a variable "val"

10
00:00:32,182 --> 00:00:34,744
and to initialize it with a value of 1.

11
00:00:34,744 --> 00:00:38,364
The 2nd instruction of this program calls 
the function f, which is defined here,

12
00:00:38,809 --> 00:00:42,728
giving it as an argument
the variable val

13
00:00:42,728 --> 00:00:43,897
which we just defined.

14
00:00:44,264 --> 00:00:48,140
We have seen in a previous video
that at the moment of this function call,

15
00:00:48,140 --> 00:00:52,534
there is a link being made between 
the argument we passed to the function

16
00:00:52,534 --> 00:00:54,784
and the list of parameters 
expected by the function.

17
00:00:54,784 --> 00:00:58,757
So here, we have two entities.
We have a variable x used

18
00:00:58,757 --> 00:01:04,418
by the function. And the function
"f" modifies this variable,

19
00:01:05,050 --> 00:01:07,369
by incrementing it by one unit.

20
00:01:07,369 --> 00:01:09,935
The question we ask 
ourselves now, is this:

21
00:01:09,935 --> 00:01:13,187
Are x and val in the same memory area?

22
00:01:13,187 --> 00:01:17,787
In other words, 
will the modification of x

23
00:01:17,787 --> 00:01:19,939
have an effect on val, or not?

24
00:01:22,596 --> 00:01:25,466
In programming, there are 
two ways of passing arguments.

25
00:01:25,869 --> 00:01:28,203
Passing by value and 
passing by reference.

26
00:01:28,822 --> 00:01:32,896
Let's examine, in the same
example as earlier,

27
00:01:32,896 --> 00:01:35,940
what happens
in either of these cases.

28
00:01:35,940 --> 00:01:43,666

So, we have a small function "f" 
which takes as parameter an integer "x".

29
00:01:43,666 --> 00:01:45,775
It has a <i>void</i> return type,
which simply means

30
00:01:45,775 --> 00:01:47,943
that it does not return any value.
As you can see,

31
00:01:47,943 --> 00:01:49,911
there is no <i>return</i> statement.

32
00:01:49,911 --> 00:01:52,158
And what this function does 
is to increment the value

33
00:01:52,158 --> 00:01:54,314
of its parameter, "x" equals "x+1".

34
00:01:54,314 --> 00:01:57,484
If a function uses passing of arguments
by value, this means that

35
00:02:00,654 --> 00:02:03,826
the parameter "x" of the function corresponds
to a memory area local to the function.

36
00:02:03,826 --> 00:02:08,181
This means that, when we
invoke the function by passing it

37
00:02:08,181 --> 00:02:11,995
as an argument, a variable 
which is defined elsewhere

38
00:02:11,995 --> 00:02:15,571
in the program, for example here, 
in the main program.

39
00:02:15,571 --> 00:02:21,141
At the moment we call this function, 
we will copy the value of the variable

40
00:02:21,141 --> 00:02:25,622
passed as an argument into a 
memory area local to the function.

41
00:02:25,622 --> 00:02:30,025
This means that when I execute 
this code, I am going to modify

42
00:02:30,025 --> 00:02:34,758
the local area, in which is stored the value 
of the variable we passed as an argument.

43
00:02:34,758 --> 00:02:38,499
This is passing by value.

44
00:02:38,499 --> 00:02:42,987
To indicate that we want 
to use passing by reference,

45
00:02:42,987 --> 00:02:48,970
we have to declare the function 
header in a specific way, in C++.

46
00:02:48,970 --> 00:02:54,049
We will indicate, using a specific symbol,
the "&" (ampersand), that the function "f"

47
00:02:54,049 --> 00:02:58,378
should use references.
When we define the header

48
00:02:58,378 --> 00:03:02,325
of the function in this way, we indicate 
that, when the function is called,

49
00:03:02,325 --> 00:03:08,564
the parameter "x" for this function is
a reference to the variable that

50
00:03:08,564 --> 00:03:12,440
we passed as an argument. It is just
another name for the variable "val" passed

51
00:03:12,440 --> 00:03:17,764
as argument. Here, the variable "val"
was equal to 1, and the name "x"

52
00:03:17,764 --> 00:03:21,880
references the same memory area 
as the one occupied by "val".

53
00:03:21,880 --> 00:03:28,472
So in this case, incrementing x 
will also increment val.

54
00:03:28,472 --> 00:03:34,234
When we pass an argument 
by value, the function will work

55
00:03:34,234 --> 00:03:37,866
on a copy of the argument, which means 
that any modification that we make

56
00:03:37,866 --> 00:03:43,016
within the function does not 
affect anything outside the function.

57
00:03:43,016 --> 00:03:46,235
We are working on a local area, 
and the argument is not modified. 

58
00:03:46,625 --> 00:03:50,576
When we use passing by reference, 
we indicate that the local variable 

59
00:03:50,576 --> 00:03:57,286
which is passed as an argument corresponds
to a reference on the object

60
00:03:57,286 --> 00:04:00,504
associated to the argument, when the
function is called. So, the main difference

61
00:04:00,504 --> 00:04:03,909
is that any modification made within
the function also affects

62
00:04:03,909 --> 00:04:08,430
the outside, and is visible
when the function ends.

63
00:04:08,430 --> 00:04:14,799
In C++, we indicate that a function 
uses, for one of its parameters,

64
00:04:14,799 --> 00:04:18,956
passing by reference by using 
a particular symbol, an ampersand (&).

65
00:04:18,956 --> 00:04:24,330
When we prototype the function, 
we can use it to indicate that

66
00:04:24,745 --> 00:04:28,522
the parameter x is passed by reference.
In this case, it is a double

67
00:04:28,522 --> 00:04:31,286
which is passed by reference.

68
00:04:31,286 --> 00:04:35,873
To summarize, when we pass 
by value, the parameter of the function 

69
00:04:35,873 --> 00:04:38,976
is a memory area local to the function
and any modification affects only the

70
00:04:38,976 --> 00:04:43,549
local area, and does not affect the
variable which was passed as an argument.

71
00:04:43,549 --> 00:04:47,248
When we pass by reference, we indicate 
that the parameter for the function

72
00:04:47,248 --> 00:04:51,833
is simply an alias, another name for the 
variable that was passed as argument

73
00:04:51,833 --> 00:04:56,402
and that any modification of the 
parameter will also modify the variable

74
00:04:56,402 --> 00:04:59,868
passed as argument. Now, if we return 
to our little introductory example,

75
00:04:59,868 --> 00:05:04,266
we had a small main program which
declared a variable "val" containing

76
00:05:04,266 --> 00:05:09,423
an integer of value 1.
Then, there was a function call.

77
00:05:09,423 --> 00:05:13,881
If we examine the header of the function, 
there is no particular symbol,

78
00:05:13,881 --> 00:05:18,676
no ampersand, which means that 
we are passing by value. 

79
00:05:18,676 --> 00:05:23,389
Since we are using passing by value, 
this means that x, the parameter

80
00:05:23,389 --> 00:05:26,976
for the function, is a local memory 
area and thus that the value of "val"

81
00:05:26,976 --> 00:05:29,510
is copied into "x".

82
00:05:29,510 --> 00:05:37,619
Modifications to "x" will affect only "x".
If we display "x", we can clearly see

83
00:05:37,703 --> 00:05:42,540
that x was modified. However, when we
are done executing the function

84
00:05:42,540 --> 00:05:47,340
and we display the value of "val", we can
clearly see that its original value

85
00:05:47,340 --> 00:05:51,201
is unchanged, and that "val" is
still equal to 1.

86
00:05:51,617 --> 00:05:56,347
If we take this same example, but indicate
that the function uses passing by reference

87
00:05:56,347 --> 00:06:03,738
with the ampersand symbol, we
still have a variable local to

88
00:06:03,738 --> 00:06:09,276
the <i>main</i> which contains 1. When
we make this function call, since there

89
00:06:09,276 --> 00:06:16,986
is a passing by reference, we simply
indicate that "x" is another name for

90
00:06:16,986 --> 00:06:21,125
the argument passed to the function, "val".
This means that here, whenever

91
00:06:21,125 --> 00:06:26,792
I modify "x", I also modify "val".
Displaying "x" clearly shows that x

92
00:06:26,792 --> 00:06:34,219
was modified. Displaying "val" also
shows that "val" was modified.

93
00:06:35,566 --> 00:06:39,995
So, in what situations is it useful to use
passing by reference?

94
00:06:39,995 --> 00:06:43,098
Well, simply when we want a function

95
00:06:43,098 --> 00:06:46,323
to be able to modify a variable that
is passed to it as an argument.

96
00:06:46,323 --> 00:06:50,525
Suppose for example that I wish to write
a function that is able to input an integer.

97
00:06:50,525 --> 00:06:53,663
So the goal of this function would be
to ask the user to input an integer

98
00:06:53,663 --> 00:06:57,390
on his keyboard. And of course, 
we want to retrieve this value

99
00:06:57,390 --> 00:07:00,796
in order to use it elsewhere
in the program.

100
00:07:00,796 --> 00:07:04,293
How do we access this input value?

101
00:07:04,293 --> 00:07:08,120
One way to do this would be to
use passing by reference.

102
00:07:08,120 --> 00:07:12,119
So, in the program that calls this
input function,

103
00:07:12,119 --> 00:07:16,582
we declare a variable which will store
the result of the input, and we pass

104
00:07:16,582 --> 00:07:22,974
this variable to the <i>saisie</i> (input) function.
So when the function is executed,

105
00:07:22,974 --> 00:07:26,534
the user will input a number,
and this number will be

106
00:07:26,606 --> 00:07:30,601
passed as a parameter local to the 
function. Suppose that the user inputs a 2.

107
00:07:30,601 --> 00:07:35,018
Then, as we have seen when we
pass by reference,

108
00:07:35,018 --> 00:07:39,866
the argument that is passed to the
function is exactly the same memory area

109
00:07:39,866 --> 00:07:44,487
as the parameter. If we input a 2 into "a_lire"
("to_read"), it will also end up in "i", which means

110
00:07:44,487 --> 00:07:47,906
that when the function ends, "i" will
contain the value we input, 2.

111
00:07:47,906 --> 00:07:52,796
Of course, this is not the only way
to design an input function.

112
00:07:52,796 --> 00:07:56,425
The most natural way, and no doubt

113
00:07:56,425 --> 00:08:00,205
the best way, is to use the
return value to retrieve

114
00:08:00,279 --> 00:08:04,757
the result of the input. So here, our
input function would have no argument.

115
00:08:04,757 --> 00:08:08,977
When it is executed, it will ask the user
for a value and will assign it

116
00:08:08,977 --> 00:08:12,645
to a variable local to the function.
It will then return it so that it can be

117
00:08:12,645 --> 00:08:16,595
used by the outside world.
And so here, we would need

118
00:08:16,595 --> 00:08:22,296
to use assignment to retrieve the
return value of the input function

119
00:08:22,296 --> 00:08:27,073
and to store it in a variable.
For example a variable in the

120
00:08:27,073 --> 00:08:30,401
main program which will be used
elsewhere in the main program.

121
00:08:30,401 --> 00:08:34,473
So we can see here that we have two
options for designing the input function,

122
00:08:34,473 --> 00:08:38,744
one of which uses passing by reference.

123
00:08:40,157 --> 00:08:43,812
We can also take advantage of this
mechanism of passing by reference

124
00:08:43,812 --> 00:08:47,619
to deal with situations where
a function "returns" several results.

125
00:08:47,619 --> 00:08:51,772
Let's imagine, for example, that we wish
to write a function which converts

126
00:08:51,916 --> 00:08:54,983
cartesian coordinates to polar coordinates.
The function would

127
00:08:54,983 --> 00:08:58,582
need, as parameters, the two
cartesian coordinates. And the point

128
00:08:58,582 --> 00:09:01,468
would be to calculate, from these two
cartesian coordinates, the two polar coordinates.

129
00:09:01,468 --> 00:09:05,332
Since in C++, a function can return
only one value,

130
00:09:05,332 --> 00:09:08,873
we can decide to have the function not
return anything.

131
00:09:08,873 --> 00:09:15,128
But instead, we can pass it, as parameters,
two variables by reference

132
00:09:15,128 --> 00:09:19,141
which will store the final result.
This mechanism is also used,

133
00:09:19,141 --> 00:09:24,972
for example, to exchange the content
of two variables. Passing by reference,

134
00:09:24,972 --> 00:09:28,152
here, is essential to carry out this switch.
