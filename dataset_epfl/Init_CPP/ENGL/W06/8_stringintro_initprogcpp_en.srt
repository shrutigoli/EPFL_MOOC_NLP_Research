1
00:00:05,810 --> 00:00:09,810
Hello. In this episode, we will see
a new type : "string".

2
00:00:10,155 --> 00:00:12,385
This type will let us declare variables

3
00:00:12,385 --> 00:00:14,585
containing character strings.

4
00:00:14,585 --> 00:00:18,145
A character string is simply
a list of characters,

5
00:00:18,145 --> 00:00:22,055
such as a word, a sentence. For
example, "Hello everybody!".

6
00:00:22,843 --> 00:00:26,843
In order to use this new type, we
must include its definition.

7
00:00:27,131 --> 00:00:31,131
This means we will will have to add 
this this line at the beginning of the program :

8
00:00:31,131 --> 00:00:34,131
 #include <string> 

9
00:00:35,060 --> 00:00:38,910
Then, we can declare
string-type variables.

10
00:00:39,563 --> 00:00:41,473
We will do it like this :

11
00:00:41,473 --> 00:00:47,563
As usual, we will start with the type
of the variable, here "string"

12
00:00:47,682 --> 00:00:50,442
followed by the name we wish
to give to the variable.

13
00:00:50,442 --> 00:00:52,632
We will finish by a semicolon.

14
00:00:53,933 --> 00:00:58,943
In this example of code, we start
by indicating the line

15
00:00:58,943 --> 00:01:02,813
" #include <string> " so that we
can use this new "string" type.

16
00:01:04,281 --> 00:01:06,457
In this line, we are declaring

17
00:01:06,457 --> 00:01:09,477
a variable called "un_nom"
(TN: means "a_name").

18
00:01:13,764 --> 00:01:18,074
For now, it is initialized
to the empty character string.

19
00:01:18,357 --> 00:01:22,357
This is a specificity of the "string" type
in comparison with the already encountered types.

20
00:01:22,666 --> 00:01:25,936
If we do not put any explicit
initial value,

21
00:01:26,167 --> 00:01:28,507
the value is initialized to
the empty string.

22
00:01:28,884 --> 00:01:31,547
However, this second declaration

23
00:01:31,547 --> 00:01:34,507
declares a variable "message"

24
00:01:37,183 --> 00:01:39,583
initialized to "Bonjour Ã  tous !"
(TN: means "Hello everyone!")

25
00:01:42,898 --> 00:01:46,788
Be careful though, these
characters called "quotation marks"

26
00:01:46,788 --> 00:01:51,128
or "double quotes" are not part
of the string.

27
00:01:51,128 --> 00:01:54,198
They are merely used to indicate the
beginning and the end of the string.

28
00:01:54,776 --> 00:01:58,096
Character strings are thus constituted
of characters.

29
00:01:58,096 --> 00:02:02,096
These characters have their own
type called "char".

30
00:02:02,345 --> 00:02:06,345
Thus, we can declare variables
containing only one character.

31
00:02:07,121 --> 00:02:12,421
For example, here, we are declaring
a variable called c 

32
00:02:12,559 --> 00:02:15,344
containing the character " x ".

33
00:02:15,344 --> 00:02:18,794
We can represent it like this.

34
00:02:18,888 --> 00:02:22,508
Please note that the character x 
is between apostrophes

35
00:02:24,295 --> 00:02:26,915
also called "simple quotes".

36
00:02:27,272 --> 00:02:31,272
On the other hand, character
strings are delimited by quotation marks

37
00:02:31,440 --> 00:02:33,520
or double quotes.

38
00:02:34,086 --> 00:02:36,956
In this second declaration,

39
00:02:37,176 --> 00:02:41,846
we are declaring a variable  u 
also of the type char.

40
00:02:41,988 --> 00:02:45,208
It is not initialized; this means we
do not know what it contains.

41
00:02:45,809 --> 00:02:49,149
Once we execute this instruction,
which is an assignment,

42
00:02:49,939 --> 00:02:53,949
we will assign the character 's'
to the variable  u.

43
00:02:55,295 --> 00:02:58,845
Please endeavor not to mix
the types "char" and "string".

44
00:02:58,845 --> 00:03:03,835
For example, if we write
" char s('c'); " ,

45
00:03:03,844 --> 00:03:07,445
it is the declaration of a variable
which will perforce contain

46
00:03:07,445 --> 00:03:10,125
a single character since
"char" is its type.

47
00:03:10,624 --> 00:03:15,214
If we write : " string s("c"); "

48
00:03:15,214 --> 00:03:18,114
it is the declaration of a
character string

49
00:03:18,114 --> 00:03:20,464
which will contain
one character.

50
00:03:20,824 --> 00:03:26,254
Thus, be careful as you cannot write,
for example, " char s("c"); "

51
00:03:26,786 --> 00:03:30,506
since this is of the type "string".

52
00:03:30,506 --> 00:03:34,330
We cannot assign a string-type value
to our char-type variable s.

53
00:03:34,774 --> 00:03:39,049
A good mnemonic way to
remember this is that

54
00:03:39,133 --> 00:03:42,843
a char-type variable can
only contain one character,

55
00:03:42,843 --> 00:03:46,353
we thus use simple quotes.

56
00:03:46,819 --> 00:03:51,169
A character string will generally contain
more than one character,

57
00:03:51,169 --> 00:03:55,689
and we will thus double quotes to
delimit a character string.

58
00:03:56,521 --> 00:03:58,781
As for any other type,

59
00:03:58,781 --> 00:04:01,111
we can modify, through an assignment,

60
00:04:01,111 --> 00:04:04,161
variables declared of the type "string".

61
00:04:04,161 --> 00:04:07,741
For example, let us start by
declaring

62
00:04:07,741 --> 00:04:10,561
a string-type variable

63
00:04:11,191 --> 00:04:12,571
called "chaine".
(TN: means "string")

64
00:04:12,571 --> 00:04:15,021
We are not giving any value to
initialize it.

65
00:04:15,021 --> 00:04:19,061
Remember that, in this case, "chaine"
will be initialized to the empty string.

66
00:04:20,245 --> 00:04:24,375
Then, here, we declare
a second variable,

67
00:04:24,375 --> 00:04:27,956
still of the type "string" and
call it "chaine2".

68
00:04:27,956 --> 00:04:31,806
"chaine2" is initialized to the
"test" string.

69
00:04:31,806 --> 00:04:35,556
Then, here, we do an assignment

70
00:04:35,556 --> 00:04:38,104
changing the value of "chaine".

71
00:04:38,104 --> 00:04:41,244
we will put "test3" into "chaine".

72
00:04:41,244 --> 00:04:43,434
In the following assignment,

73
00:04:43,434 --> 00:04:46,724
we are copying the value of "chaine2"
into "chaine".

74
00:04:47,054 --> 00:04:49,484
Therefore, "chaine 2" will
contain "test".

75
00:04:49,484 --> 00:04:53,794
This "test3" here will be replaced
by the character string "test".

76
00:04:54,086 --> 00:04:56,686
In this last assignment,

77
00:04:56,822 --> 00:05:00,822
we are assigning the character 'a'
to the variable "chaine",

78
00:05:01,045 --> 00:05:03,065
that is, this one.

79
00:05:03,324 --> 00:05:05,234
Here, it is indeed a character

80
00:05:05,234 --> 00:05:08,024
since we are using simple quotes,

81
00:05:08,024 --> 00:05:10,754
apostrophes to delimit
the characters.

82
00:05:11,077 --> 00:05:13,737
However, C++ will automatically
convert

83
00:05:13,737 --> 00:05:16,657
this char-type value

84
00:05:17,091 --> 00:05:19,511
into a string-type value,

85
00:05:19,511 --> 00:05:22,911
that is, a character string

86
00:05:22,911 --> 00:05:25,111
we can represent like this.

87
00:05:25,324 --> 00:05:28,814
Now, after this last assignment,

88
00:05:29,060 --> 00:05:32,280
"chaine" contains the string "a".

89
00:05:32,768 --> 00:05:35,218
Also, we can concatenate two strings.

90
00:05:35,218 --> 00:05:37,488
This means we can put two strings
one after other

91
00:05:37,559 --> 00:05:39,889
thanks to the " + " operator.

92
00:05:39,889 --> 00:05:42,229
For example, if we have "chaine1"
and "chaine2",

93
00:05:42,229 --> 00:05:44,209
two string-type variables,

94
00:05:44,209 --> 00:05:46,169
we can write this.

95
00:05:46,509 --> 00:05:49,889
This will result in a new character string

96
00:05:49,897 --> 00:05:53,307
beginning with the characters
of "chaine1"

97
00:05:53,307 --> 00:05:56,847
and ending with the characters of "chaine2".

98
00:05:56,847 --> 00:06:00,337
For example, in this code,

99
00:06:00,337 --> 00:06:03,487
we are declaring three string-type
variables.

100
00:06:03,686 --> 00:06:06,606
For now, they are all initialized
to the empty character string.

101
00:06:09,823 --> 00:06:14,493
Let us suppose we have given a value
to the variable "prenom" (TN: means "first name"),

102
00:06:14,493 --> 00:06:17,173
for example, "Jean"

103
00:06:18,083 --> 00:06:21,997
and a surname in the variable "famille".
(TN: means "family").

104
00:06:22,985 --> 00:06:25,805
Once we execute this assignment,

105
00:06:26,635 --> 00:06:29,535
we will first concatenate

106
00:06:29,535 --> 00:06:31,925
the value of the variable "famille"

107
00:06:31,925 --> 00:06:34,375
with this character string

108
00:06:34,375 --> 00:06:36,685
which simply contains a blank space.

109
00:06:36,685 --> 00:06:38,795
This will give us

110
00:06:38,905 --> 00:06:42,605
"Dupont" followed by a blank space.

111
00:06:42,605 --> 00:06:44,925
Let us represent it like this.

112
00:06:45,360 --> 00:06:48,230
Then, we will add the

113
00:06:48,230 --> 00:06:51,400
content of the variable "prenom",

114
00:06:52,025 --> 00:06:53,995
that is, "Jean".

115
00:06:54,377 --> 00:06:57,617
All this forms a new character string

116
00:06:58,302 --> 00:07:01,372
which we will store in the variable "nom"

117
00:07:01,372 --> 00:07:03,112
upon the assignment.

118
00:07:03,573 --> 00:07:05,923
The following combinations are
possible

119
00:07:05,923 --> 00:07:07,963
for the concatenation of two strings.

120
00:07:08,395 --> 00:07:11,625
We can concatenate two
string-type variables.

121
00:07:12,145 --> 00:07:15,635
We can also concatenate
a string-type variable

122
00:07:15,635 --> 00:07:19,295
with a literate value of the
type "string".

123
00:07:20,077 --> 00:07:23,427
Or, we can start with the
literal value

124
00:07:23,427 --> 00:07:25,957
followed by the string-type variable.

125
00:07:26,378 --> 00:07:30,188
We can also start with

126
00:07:30,188 --> 00:07:34,658
a string-type variable
and add a character.

127
00:07:35,233 --> 00:07:38,113
We can also begin with the character

128
00:07:38,353 --> 00:07:41,983
and concatenate it with
a string-type variable.

129
00:07:42,263 --> 00:07:45,093
Let us go back to the example
of the previous slide.

130
00:07:45,093 --> 00:07:46,663
We had used

131
00:07:46,663 --> 00:07:49,643
a string-type literal value

132
00:07:50,074 --> 00:07:52,904
to represent the blank space

133
00:07:53,812 --> 00:07:57,486
we wished to inserate between
the first name and the surname.

134
00:07:57,486 --> 00:08:00,356
Actually, we may also use
a character.

135
00:08:00,356 --> 00:08:01,896
We are doing just that here,

136
00:08:01,896 --> 00:08:04,306
using simple quotes.

137
00:08:04,817 --> 00:08:08,927
This thing here is a char-type
literal value.

138
00:08:09,310 --> 00:08:11,110
We may very well

139
00:08:11,110 --> 00:08:14,830
concatenate a "char" with a
string-type variable.

140
00:08:15,008 --> 00:08:16,748
You can see this here.

141
00:08:19,558 --> 00:08:22,508
Concatenations of the form string + char

142
00:08:22,508 --> 00:08:25,158
are very practical to add
characters

143
00:08:25,168 --> 00:08:27,328
at the end of a character string.

144
00:08:27,591 --> 00:08:29,941
For example, here, we declare

145
00:08:29,941 --> 00:08:32,471
a variable "reponse".
(TN: means "answer")

146
00:08:33,397 --> 00:08:36,317
It contains the character
string "solution".

147
00:08:37,247 --> 00:08:40,757
When a variable " n " is
greater than 1,

148
00:08:40,979 --> 00:08:43,709
we would like to put "solution"
in the plural.

149
00:08:44,041 --> 00:08:47,103
To that end, we will use this assignment.

150
00:08:47,173 --> 00:08:51,423
For now, the variable "reponse"
contains "solution".

151
00:08:52,032 --> 00:08:55,630
And we will simply concatenate it
with the character 's'.

152
00:08:55,848 --> 00:09:00,326
We will thus obtain the string
"solutions" with an " s " at the end.

153
00:09:00,549 --> 00:09:03,319
We will then store the result
in our variable "reponse".

154
00:09:03,319 --> 00:09:08,439
Now, "reponse" will therefore contain
"solutions", in the plural.

155
00:09:08,439 --> 00:09:10,779
We can use the same trick to


156
00:09:10,779 --> 00:09:13,649
add characters at the beginning
of a string.

157
00:09:14,868 --> 00:09:18,298
As for other types, we will
use the " == " symbol

158
00:09:18,298 --> 00:09:20,978
to test if two strings are equal.

159
00:09:21,287 --> 00:09:25,967
Also, we will use the " != " symbol
to test if two strings are different.

160
00:09:26,306 --> 00:09:30,361
For example, in this code, we
are using a "do while loop".

161
00:09:30,361 --> 00:09:34,401
Inside, we are calling a function
which asks a question.

162
00:09:34,401 --> 00:09:37,131
The result of this function

163
00:09:38,181 --> 00:09:39,971
is a character string

164
00:09:39,971 --> 00:09:42,491
which we will assign to our
variable "reponse".

165
00:09:43,256 --> 00:09:45,796
We wish to keep asking the
question

166
00:09:45,796 --> 00:09:49,056
as long as the answer is
not "oui" (TN: means "yes" )

167
00:09:49,056 --> 00:09:51,816
To that end, we will write,

168
00:09:51,816 --> 00:09:55,036
between the parentheses,
this condition here.

169
00:09:55,676 --> 00:09:58,794
It will test if "reponse" is different from
the character string "oui".

170
00:10:00,932 --> 00:10:03,362
This should be enough for
this introduction

171
00:10:03,362 --> 00:10:04,512
on the character strings.

172
00:10:04,512 --> 00:10:07,482
In the following episode, we will
discuss manipulations on strings.
