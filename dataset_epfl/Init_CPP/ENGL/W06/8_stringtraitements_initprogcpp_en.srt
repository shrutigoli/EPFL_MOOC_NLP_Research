1
00:00:05,563 --> 00:00:08,844
In this episode we will discuss
the processing we can apply

2
00:00:08,859 --> 00:00:10,869
on character strings.

3
00:00:10,869 --> 00:00:13,891
We can access the different
characters of a string individually.

4
00:00:13,891 --> 00:00:15,921
For example, let "chaine"

5
00:00:15,921 --> 00:00:18,231
be a string-type variable.

6
00:00:18,231 --> 00:00:20,801
So, " chaine[i] "

7
00:00:20,801 --> 00:00:24,661
is the (i+1)th character of a "chaine".

8
00:00:24,661 --> 00:00:27,661
It will be a char-type character.

9
00:00:27,661 --> 00:00:30,184
Be careful though! as for arrays

10
00:00:30,184 --> 00:00:33,319
the first character has 0 for index.

11
00:00:33,319 --> 00:00:37,067
The last one has  
" taille - 1 " for index,

12
00:00:37,067 --> 00:00:40,204
if "taille" (TN: means "size")
is the number of characters in the string.

13
00:00:40,380 --> 00:00:41,663
For example, 

14
00:00:42,163 --> 00:00:45,126
we declare here a variable "demo"

15
00:00:46,067 --> 00:00:47,661
of the type "string".

16
00:00:47,661 --> 00:00:51,494
It contains the character
string "ABCD".

17
00:00:53,082 --> 00:00:57,107
We declare here to characters :

18
00:00:57,107 --> 00:00:59,037
"premier" and "dernier".
(TN: "premier" means "first", "dernier" means "last"). 

19
00:00:59,037 --> 00:01:01,453
For now, they are not
initialized.

20
00:01:01,453 --> 00:01:04,951
We assign "premier" with the
following assignment.

21
00:01:05,343 --> 00:01:08,570
" demo[0] ". What is this?

22
00:01:08,924 --> 00:01:11,986
Why, "demo" is the string here.

23
00:01:11,986 --> 00:01:14,712
[0] corresponds to this first
character.

24
00:01:14,712 --> 00:01:19,800
Therefore, "premier" will 
receive the character 'A'.

25
00:01:19,800 --> 00:01:24,176
Here, in "dernier" we will
store the character

26
00:01:24,176 --> 00:01:27,458
with the index 3 of the string
"demo".

27
00:01:27,458 --> 00:01:29,882
The character with the index 3 is :

28
00:01:30,252 --> 00:01:34,246
0 , 1, 2, 3 this 'D' here.

29
00:01:34,246 --> 00:01:37,462
We will thus store 'D' in
our variable "dernier".

30
00:01:40,724 --> 00:01:43,159
Here is another example : a quiz.

31
00:01:43,159 --> 00:01:45,591
In your opinion, what will this code print

32
00:01:45,941 --> 00:01:47,583
upon execution?

33
00:01:48,813 --> 00:01:53,756
We start here by declaring a variable
called "essai" (TN: means "attempt", "trial").

34
00:01:53,756 --> 00:01:56,747
It contains the character
string "essai".

35
00:01:56,747 --> 00:01:59,952
Here, we declare another
character string

36
00:01:59,952 --> 00:02:02,475
initialized to the empty character string.

37
00:02:03,146 --> 00:02:05,046
Now, we keep going with a "for loop".

38
00:02:05,046 --> 00:02:09,264
There, the variable " i " will
take the values 1, 2 and 3.

39
00:02:09,264 --> 00:02:11,044
For now, " i " is 1.

40
00:02:11,044 --> 00:02:13,863
Now, we enter the "for loop".

41
00:02:15,033 --> 00:02:18,332
" essai[6 - 2 * i]

42
00:02:18,332 --> 00:02:19,778
what does it mean?

43
00:02:19,778 --> 00:02:21,762
First, it will be a character.

44
00:02:21,762 --> 00:02:25,876
Since "i" is 1, the index is 4.

45
00:02:25,876 --> 00:02:29,727
The character with the index 4 in "essai"

46
00:02:29,727 --> 00:02:32,648
is : 0, 1, 2, 3, 3

47
00:02:32,648 --> 00:02:35,101
the character 'i'.

48
00:02:35,101 --> 00:02:37,582
All this is actually the character 'i'.

49
00:02:37,582 --> 00:02:41,097
We will add it to what is contained
in the "test" string.

50
00:02:41,097 --> 00:02:45,011
Since "test" is empty, we will
simply obtain

51
00:02:45,011 --> 00:02:47,972
the string "i" which we will store
in the variable "test".

52
00:02:47,972 --> 00:02:51,734
Now to this assignment :

53
00:02:51,734 --> 00:02:55,616
" essai[i] ". Since "i" is 1,

54
00:02:55,956 --> 00:02:59,670
it is the character 's' here.

55
00:03:00,091 --> 00:03:03,352
For now, "test" contains the
string "i".

56
00:03:03,352 --> 00:03:07,032
All this is now the 
string "si"

57
00:03:07,032 --> 00:03:08,870
which we will assign to "test".

58
00:03:11,898 --> 00:03:13,832
Now, "i" is 2.

59
00:03:13,832 --> 00:03:16,069
We can keep going inside
the "for loop".

60
00:03:16,069 --> 00:03:20,768
We will execute this assignment here.
This expression is 2.

61
00:03:20,768 --> 00:03:27,210
Therefore, this is the character with
the index 2 in the string "essai".

62
00:03:27,949 --> 00:03:30,906
It is this 's' here.

63
00:03:32,298 --> 00:03:36,666
Remember that "test" contains "si".

64
00:03:37,588 --> 00:03:39,740
Thus, the result of this
assignment

65
00:03:39,740 --> 00:03:45,150
is that we will store "sis"
into our variable "test".

66
00:03:45,150 --> 00:03:49,902
Let us keep going here.
"essai[i] "

67
00:03:49,902 --> 00:03:53,485
is the element with the index 2
of our variable "essai";

68
00:03:53,485 --> 00:03:56,582
it is this 's' here.

69
00:03:57,019 --> 00:03:59,413
"test" contains "sis".

70
00:03:59,413 --> 00:04:02,377
Through this assignment,

71
00:04:02,377 --> 00:04:05,981
we will obtain "ssis" in the variable "test".

72
00:04:06,597 --> 00:04:07,802
Let us keep going.

73
00:04:10,171 --> 00:04:13,001
This time, "i" is 3.

74
00:04:13,432 --> 00:04:17,011
The expression in this
assignment

75
00:04:18,352 --> 00:04:20,704
is now 0.

76
00:04:21,203 --> 00:04:26,499
This all here is therefore the character
of the index 0 in the string "essai".

77
00:04:26,499 --> 00:04:28,787
This is this 'e' here.

78
00:04:28,787 --> 00:04:31,345
Let us add it to "test".

79
00:04:31,922 --> 00:04:37,401
Now, we get 6 and move on
to this assignment.

80
00:04:38,484 --> 00:04:42,752
"essai[3]" is :

81
00:04:42,752 --> 00:04:45,310
0, 1, 2, 3

82
00:04:45,310 --> 00:04:47,278
this character here.

83
00:04:47,278 --> 00:04:48,734
That means an 'a'.

84
00:04:48,734 --> 00:04:52,126
We will add it to "ssise".

85
00:04:52,126 --> 00:04:55,908
We thus obtain the string "assise"
(TN: "assise" means "seated")

86
00:04:56,898 --> 00:04:59,461
which we will put in the variable "test".

87
00:04:59,461 --> 00:05:03,321
Ultimately, we will thus print "assise".

88
00:05:05,088 --> 00:05:08,764
There are several functions specific
to the type "string" defined in C++

89
00:05:08,764 --> 00:05:10,049
just like for the vectors.

90
00:05:10,049 --> 00:05:12,571
They are used with the
following syntax.

91
00:05:12,571 --> 00:05:17,009
First of all the name of the
string-type variable

92
00:05:17,009 --> 00:05:21,987
followed by a period, followed
by the name of the function we wish to use,

93
00:05:21,987 --> 00:05:25,033
followed by the eventual arguments

94
00:05:25,033 --> 00:05:27,522
required by the function.

95
00:05:27,522 --> 00:05:30,698
For example, we may use
the "size" function.

96
00:05:30,698 --> 00:05:34,627
We will call it like this.
Let "chaine" be

97
00:05:34,627 --> 00:05:37,719
a string-type variable.

98
00:05:37,719 --> 00:05:41,323
This function will return
the size of the string,

99
00:05:41,323 --> 00:05:45,272
that is, the number of characters
of the variable "chaine".

100
00:05:46,772 --> 00:05:49,959
We also have a function called "insert".

101
00:05:50,251 --> 00:05:51,995
It has two arguments.

102
00:05:51,995 --> 00:05:53,756
First of all,

103
00:05:53,756 --> 00:05:58,187
the position of a character,
defining where we wish

104
00:05:58,187 --> 00:05:59,740
to insert a second string.

105
00:05:59,740 --> 00:06:02,851
It is defined with this argument here.

106
00:06:03,742 --> 00:06:07,494
The call to this function will
insert "chaine2"

107
00:06:07,494 --> 00:06:09,858
into the variable "chaine",

108
00:06:09,858 --> 00:06:12,393
starting with this position here.

109
00:06:12,393 --> 00:06:15,681
For example, let us declare

110
00:06:15,681 --> 00:06:17,989
a string-type variable

111
00:06:17,989 --> 00:06:22,948
containing the string "abcd".

112
00:06:24,491 --> 00:06:27,076
Now, we are calling the function
"insert"

113
00:06:27,076 --> 00:06:31,523
with the position "1" (this one)

114
00:06:32,455 --> 00:06:35,084
and the string "xx".

115
00:06:35,084 --> 00:06:39,356
Why, this function "insert" will
insert the string "xx"

116
00:06:39,937 --> 00:06:42,934
between the character index 0

117
00:06:43,924 --> 00:06:45,951
and the character index 1,

118
00:06:45,951 --> 00:06:47,619
that is, here.

119
00:06:48,480 --> 00:06:51,632
Then, we will store the result
into the string "exemple".

120
00:06:51,632 --> 00:06:54,378
After the call to this "insert"
function,

121
00:06:54,378 --> 00:06:58,266
our variable "exemple" will
contain the string

122
00:06:58,266 --> 00:07:02,974
"axxbcd".

123
00:07:04,294 --> 00:07:06,954
We may also use the
"replace" function.

124
00:07:06,954 --> 00:07:09,055
It needs 3 arguments.

125
00:07:09,055 --> 00:07:12,069
First of all, the position (just
like the "insert" function

126
00:07:12,069 --> 00:07:13,430
we have just seen).

127
00:07:13,430 --> 00:07:16,472
A number of characters.
The third argument

128
00:07:16,472 --> 00:07:18,297
is a character string.

129
00:07:18,297 --> 00:07:20,355
This "replace" functions works

130
00:07:20,355 --> 00:07:22,471
a little like the "insert" function.

131
00:07:22,471 --> 00:07:26,543
In stead, it will replace n character

132
00:07:28,078 --> 00:07:29,827
of the variable "string".

133
00:07:29,827 --> 00:07:32,272
To make things clear,
let us take an example.

134
00:07:32,272 --> 00:07:34,917
After this declaration-initialization,

135
00:07:34,917 --> 00:07:39,561
the variable "exemple"
contains the string

136
00:07:39,561 --> 00:07:43,095
"abcd".

137
00:07:43,095 --> 00:07:47,559
We are now calling the "replace" function
with, for position, the value 1.

138
00:07:47,962 --> 00:07:49,977
It corresponds to this 'b' here.

139
00:07:50,885 --> 00:07:55,064
The "replace" function will
replace two characters

140
00:07:55,064 --> 00:07:57,681
starting with this character 'b'.

141
00:07:58,692 --> 00:08:01,365
That means we will replace
this 'b' and this 'c'.

142
00:08:01,365 --> 00:08:04,237
We will replace them with this string here

143
00:08:04,237 --> 00:08:07,838
which is "1234".

144
00:08:07,838 --> 00:08:13,209
In the variable "exemple", we thus
obtain

145
00:08:15,439 --> 00:08:20,281
the string "a1234d".

146
00:08:21,914 --> 00:08:25,516
By the way, we may use
this "replace" function

147
00:08:25,516 --> 00:08:28,327
to suppress the characters
of a string.

148
00:08:28,327 --> 00:08:31,290
To that end, we simply need
to use the empty string

149
00:08:31,590 --> 00:08:34,070
as the third argument.

150
00:08:35,466 --> 00:08:37,016
In this new example,

151
00:08:37,496 --> 00:08:39,345
our variable "exemple"

152
00:08:40,445 --> 00:08:45,964
contains the string "abcd".

153
00:08:47,184 --> 00:08:51,373
As before, we will replace the
characters "b" and "c".

154
00:08:51,373 --> 00:08:54,067
But we will replace them with
the empty string.

155
00:08:54,067 --> 00:08:57,619
Ultimately, we will obtain

156
00:08:57,619 --> 00:09:00,798
the string "ad"

157
00:09:00,798 --> 00:09:03,997
in our variable "exemple".

158
00:09:07,177 --> 00:09:10,354
The "find" function expects only
one argument

159
00:09:10,354 --> 00:09:12,621
of the type "string".

160
00:09:12,621 --> 00:09:15,509
It will return the index in "chaine"

161
00:09:15,929 --> 00:09:17,620
of the first character

162
00:09:17,620 --> 00:09:20,653
of the leftmost appearance
of the string

163
00:09:20,653 --> 00:09:22,068
passed as argument.

164
00:09:22,068 --> 00:09:23,431
So, what does it mean?

165
00:09:23,431 --> 00:09:24,651
Let us take an example.

166
00:09:24,651 --> 00:09:28,212
Let "exemple" be a variable initialized

167
00:09:28,212 --> 00:09:30,331
to this character string here.

168
00:09:30,331 --> 00:09:35,393
We are  calling the "find" function,
passing "ab" as parameter.

169
00:09:35,393 --> 00:09:39,987
Starting from the left, "ab" appears
for the first time

170
00:09:39,987 --> 00:09:41,673
here, in "exemple".

171
00:09:43,553 --> 00:09:46,255
The index of the first character is 2

172
00:09:46,258 --> 00:09:48,027
since we start from 0.

173
00:09:48,027 --> 00:09:52,171
Our "find" function will thus
return the value 2.

174
00:09:52,583 --> 00:09:57,152
There is also the reverse function,
starting from the right.

175
00:09:57,152 --> 00:09:58,966
It is the function "rfind".

176
00:09:59,869 --> 00:10:02,623
So, if we call our "rfind" function

177
00:10:02,623 --> 00:10:05,486
on this same "exemple" string.

178
00:10:06,858 --> 00:10:09,317
As we said, we are starting
from the right.

179
00:10:09,317 --> 00:10:13,720
The first time "ab" appears
in this string

180
00:10:13,720 --> 00:10:19,176
is here.
The index of this character here

181
00:10:20,044 --> 00:10:24,258
is 0, 1, 2, 3, 4, 5, 6

182
00:10:24,258 --> 00:10:26,722
Thus, our "rfind" function

183
00:10:26,722 --> 00:10:29,817
will return the value 6 in
this case.

184
00:10:29,817 --> 00:10:31,669
By the way, please note that
we cannot be sure

185
00:10:31,669 --> 00:10:35,901
the string passed as argument to
the functions "find" and "rfind"

186
00:10:35,901 --> 00:10:40,074
will be found in the string to which
we apply these functions.

187
00:10:40,074 --> 00:10:43,367
In this case, the functions "find"
and "rfind"

188
00:10:43,367 --> 00:10:45,745
will return a predefined value

189
00:10:45,745 --> 00:10:49,460
written " string::npos "

190
00:10:49,460 --> 00:10:53,296
meaning that we have not found
the string passed as argument.

191
00:10:53,296 --> 00:10:57,620
For example, with this
instruction here.

192
00:10:57,620 --> 00:11:01,814
Let "exemple" be, like in the previous
examples,

193
00:11:01,814 --> 00:11:06,623
contain "baabbaab".

194
00:11:06,623 --> 00:11:10,312
Here, we are seeking the
string "xy".

195
00:11:10,312 --> 00:11:13,113
Since the string "xy" does not appear

196
00:11:13,113 --> 00:11:14,779
in the string "exemple",

197
00:11:14,779 --> 00:11:16,722
the function "find"

198
00:11:16,722 --> 00:11:21,751
will return the predefined value
" string::npos ".

199
00:11:22,860 --> 00:11:26,487
Finally, a last function
called "substr".

200
00:11:26,487 --> 00:11:29,771
It has two parameters : "depart" and "longueur" (TN: "depart" means "start" and "longueur" means "length").

201
00:11:29,771 --> 00:11:32,989
On this example, it is applied on
the character string "chaine".

202
00:11:32,989 --> 00:11:37,105
This call to the function "substr"

203
00:11:37,105 --> 00:11:39,393
will return the sub-string of "chaine"

204
00:11:39,393 --> 00:11:44,044
which has, as length, "longueur"
passed as argument

205
00:11:44,044 --> 00:11:47,363
and starting with the starting position "depart".

206
00:11:47,363 --> 00:11:51,902
For example, we are considering
this character string

207
00:11:51,902 --> 00:11:55,326
"exemple" which contains this value.

208
00:11:55,326 --> 00:12:00,276
The call to this function :
" exemple.substr(8, 4) "

209
00:12:00,276 --> 00:12:02,807
will return a sub-string

210
00:12:03,687 --> 00:12:07,478
beginning with the
character of the index 8.

211
00:12:07,688 --> 00:12:14,676
So, 0, 1, 2, 3, 4, 5, 6, 7, 8

212
00:12:14,906 --> 00:12:17,360
we will thus jump here.

213
00:12:17,360 --> 00:12:21,055
We will take 4 characters starting
with this 't'.

214
00:12:22,135 --> 00:12:24,719
Thus, the call to this
function will return

215
00:12:24,719 --> 00:12:27,195
the string "tous".

216
00:12:28,041 --> 00:12:29,805
Voilà! this is all we will see

217
00:12:29,805 --> 00:12:31,844
regarding the string-type
functionalities.

218
00:12:31,844 --> 00:12:34,639
Be aware that there are many
others, all operating

219
00:12:34,639 --> 00:12:36,622
based on the same principles.
