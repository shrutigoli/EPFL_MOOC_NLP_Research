1
00:00:05,163 --> 00:00:07,896
At this juncture of our course,
we have already encountered many a type.

2
00:00:07,896 --> 00:00:12,089
We have seen the basic types int and double.
Then we have seen more advanced types

3
00:00:12,089 --> 00:00:14,831
such as dynamic arrays which
we can even compose :

4
00:00:14,831 --> 00:00:17,341
dynamic arrays of
dynamic arrays and so on.

5
00:00:17,346 --> 00:00:20,828
Complex types sometimes make
the writing a little tedious.

6
00:00:20,828 --> 00:00:24,014
For this reason, among others we will
develop soon,

7
00:00:24,151 --> 00:00:28,038
it can be interesting to define
type aliases.

8
00:00:28,038 --> 00:00:33,700
Namely giving an other name to
a previously defined type.

9
00:00:33,700 --> 00:00:35,764
This is done as follows :

10
00:00:35,778 --> 00:00:40,081
You start your line with the
reserved keyword "typedef",

11
00:00:40,084 --> 00:00:44,542
then you write the name of the type you wish to name
anew.

12
00:00:44,542 --> 00:00:49,631
And finally, the new name you
wish to give to this type,

13
00:00:49,631 --> 00:00:52,008
finishing with a semicolon.

14
00:00:52,041 --> 00:00:55,575
For example, let us suppose
you wish to call "Vecteur" (TN: "Vecteur" means "Vector"),

15
00:00:55,575 --> 00:00:58,807
something that is
a dynamic array of double.

16
00:00:58,807 --> 00:01:01,524
How should we proceed?
We will start our line

17
00:01:01,524 --> 00:01:07,117
with "typedef". Then comes the type we wish to
give a new name to : vector<double>.

18
00:01:07,117 --> 00:01:11,356
And finally, the new name we have chosen
for this vector type.

19
00:01:11,356 --> 00:01:15,378
Starting with this line,
you will be able to use

20
00:01:15,378 --> 00:01:20,425
either the old name vector<double>
or, if you want, your new name:

21
00:01:20,425 --> 00:01:23,836
"Vecteur" with a capital V here
is now strictly equivalent to vector<double>,

22
00:01:23,836 --> 00:01:27,072
it is an alias for vector<double>.

23
00:01:27,072 --> 00:01:33,361
For example, you can now declare
a variable v of type  "Vecteur",

24
00:01:33,361 --> 00:01:36,523
which is a dynamic array
of doubles.

25
00:01:36,523 --> 00:01:38,785
Of course, you can keep the old
syntax,

26
00:01:38,785 --> 00:01:42,543
you had previously. For exemple,
you can initialize a vector v2,

27
00:01:42,543 --> 00:01:48,963
with a size of 3 and a certain value,
for example.

28
00:01:48,963 --> 00:01:52,818
Now, the type "Vecteur", as has
been specified here,

29
00:01:52,818 --> 00:01:56,662
is strictly equivalent to
vector <double>.

30
00:01:56,662 --> 00:02:00,907
You can even reuse this type itself
in another type.

31
00:02:00,907 --> 00:02:05,597
For example, you can now define
the type "Matrice" (TN:"matrix") as a

32
00:02:05,608 --> 00:02:07,709
dynamic array of "Vecteur",

33
00:02:07,709 --> 00:02:10,461
which has been previously defined.

34
00:02:10,461 --> 00:02:14,578
This is done with this line :
"typedef vector<Vecteur> Matrice"

35
00:02:14,578 --> 00:02:19,108
Vecteur being the type which has already been redefined.
Now, the type "Matrice",

36
00:02:19,108 --> 00:02:23,095
is a dynamic array of
dynamic array of doubles.

37
00:02:23,095 --> 00:02:32,209
Instead of writing, for example :
"vector <vector <double> > m;" ,

38
00:02:32,209 --> 00:02:39,425
thanks to this line, you can now
simply write "Matrice m;"

39
00:02:39,425 --> 00:02:41,501
which is quite a lot
simpler.

40
00:02:41,501 --> 00:02:45,683
You can also use the initialization.

41
00:02:45,683 --> 00:02:49,535
Matrice here is the newly defined
type.

42
00:02:49,535 --> 00:02:51,604
"rotation" is the variable name, 

43
00:02:51,604 --> 00:02:54,333
and the initialization  is here, 
between parentheses.

44
00:02:54,333 --> 00:02:57,113
We are initializing a dynamic
array of dynamic array,

45
00:02:57,113 --> 00:03:00,378
specifying that the variable "rotation"
is initialized to 3.

46
00:03:00,378 --> 00:03:05,519
3 what ? 3 dynamic
arrays of double.

47
00:03:05,519 --> 00:03:07,891
But since we have already defined
"Vecteur" why not use it?

48
00:03:07,891 --> 00:03:15,120
We can use three "Vecteur".
Each Vecteur is here of size 3 and has all its values initialized
 with the value 1.

49
00:03:15,120 --> 00:03:21,680
Therefore, we will create a "Matrice" 
named  "rotation"

50
00:03:21,680 --> 00:03:30,282
which will be a dynamic array of 3
dynamic arrays of 3 doubles,

51
00:03:30,286 --> 00:03:35,396
each one with the value 1.

52
00:03:35,396 --> 00:03:39,799
These type aliases, these "typedef",
are useful for three reasons :

53
00:03:39,799 --> 00:03:42,940
First of all, the declaration of arrays,
which we have just seen.

54
00:03:42,940 --> 00:03:45,121
This will improve the reading,

55
00:03:45,121 --> 00:03:48,703
writing, and manipulating of
vectors and matrices.

56
00:03:48,703 --> 00:03:52,637
It will also make it easier to identify
concepts : the concept of vectors

57
00:03:52,637 --> 00:03:55,747
and the concept of matrices.

58
00:03:55,747 --> 00:03:59,985
The "typedef"s let us clearly define
and identify the concepts;

59
00:03:59,985 --> 00:04:03,620
this is probably the most important
use of these "typedef"s.

60
00:04:03,620 --> 00:04:06,524
So, we can easily identify the
objects we are working with.

61
00:04:06,524 --> 00:04:09,568
Let us take an example.
Let us suppose that we have a program

62
00:04:09,568 --> 00:04:13,389
in which we need to manipulate distances.
We have decided these distances

63
00:04:13,389 --> 00:04:15,616
will be integers.
So, we have a distance d,

64
00:04:15,616 --> 00:04:18,893
declared as an integer.
For example, we have here a distance d2,

65
00:04:18,893 --> 00:04:20,566
declared as an integer.

66
00:04:20,566 --> 00:04:23,034
Let us suppose that we also
have numbers.

67
00:04:23,034 --> 00:04:26,932
So, we have a number "nb"
of the type integer.

68
00:04:26,932 --> 00:04:30,259
We may also have temperatures and so on.

69
00:04:30,259 --> 00:04:32,728
In our programs, we thus have
a lot of integers,

70
00:04:32,728 --> 00:04:36,305
sharing the same type but representing
completely different concepts :

71
00:04:36,305 --> 00:04:37,949
distances, temperatures, numbers.

72
00:04:37,949 --> 00:04:40,727
Now, let us suppose that we decide
to modify our program

73
00:04:40,727 --> 00:04:43,748
so that the distances will
now be of the type double.

74
00:04:43,748 --> 00:04:46,785
The question is : among all
these ints,

75
00:04:46,785 --> 00:04:49,360
scattered all around our
program,

76
00:04:49,360 --> 00:04:54,730
which ones will have to be changed to double,
which ones will stay ints ?

77
00:04:54,730 --> 00:04:57,043
If you had defined a "typedef",

78
00:04:57,045 --> 00:04:59,181
the solution would have
been much easier.

79
00:04:59,181 --> 00:05:05,771
If you have a "typedef" like here,
"typedef int Distance",

80
00:05:05,771 --> 00:05:09,911
this means that the "Distance"
has now become

81
00:05:09,911 --> 00:05:13,795
a new type, representing an integer.
We can now freely

82
00:05:13,795 --> 00:05:15,803
use this new type,
this type alias

83
00:05:15,803 --> 00:05:19,647
in order to represent lenghts.
The variable "maLongueur" (TN:"myLenght).


84
00:05:19,647 --> 00:05:28,947
At this point of the previous example,
the variables d and d2 would have been distances.

85
00:05:28,947 --> 00:05:32,275
Therefore, if we need to
modify distances so that

86
00:05:32,275 --> 00:05:35,074
they are no longer integers but
doubles,

87
00:05:35,074 --> 00:05:39,522
we only need to modify one single
line -the "typedef" line.

88
00:05:39,522 --> 00:05:43,237
We simply replace the "int" by "double"
like this.

89
00:05:43,237 --> 00:05:47,246
Through this one change
of the "typedef" line,

90
00:05:47,246 --> 00:05:50,857
all our distances will instantly
become doubles;

91
00:05:50,857 --> 00:05:55,770
we needed to change neither the numbers
nor the temperatures.

92
00:05:55,770 --> 00:05:57,906
The use of "typedef" as we have just seen

93
00:05:57,906 --> 00:06:01,807
permits a better identification
of the concepts; this is essential

94
00:06:01,807 --> 00:06:04,587
in order to make your
programs all the clearer

95
00:06:04,587 --> 00:06:06,167
and more readable.

96
00:06:06,167 --> 00:06:08,605
In the same time, it will also
facilitate subsequent

97
00:06:08,605 --> 00:06:13,290
changes such as the modification
of int to double,

98
00:06:13,290 --> 00:06:14,720
here for the distances.

99
00:06:14,743 --> 00:06:17,953
Therefore, modifications will
become much easier.

100
00:06:17,953 --> 00:06:21,675
The usefulness of concepts identification
 through "typedef"s

101
00:06:21,675 --> 00:06:25,851
is also illustrated by  the writing
of function parameters.

102
00:06:25,851 --> 00:06:28,387
The writing of the functions
will indeed become

103
00:06:28,387 --> 00:06:30,874
much clearer and more compact.

104
00:06:30,874 --> 00:06:35,076
Let us take an example of a
function which would be the dot product.

105
00:06:35,076 --> 00:06:37,745
The dot product of two vectors.
If we write it like this,

106
00:06:37,745 --> 00:06:41,424
we can clearly see that these
are two vectors returning a vector.

107
00:06:41,424 --> 00:06:44,197
This is made possible by this line here,

108
00:06:44,197 --> 00:06:46,142
placed at the beginning
of the program :

109
00:06:46,142 --> 00:06:49,005
"typedef vector<double> Vecteur;" .

110
00:06:49,005 --> 00:06:51,060
Thanks to this line, it is much clearer to read

111
00:06:51,060 --> 00:06:54,363
that the dot product returns
a vector and takes two vectors

112
00:06:54,363 --> 00:06:56,911
as arguments.
Without it, we would have to write

113
00:06:56,911 --> 00:07:08,861
"vector<double> produit_vectoriel
(vector<double>, vector<double>);

114
00:07:08,861 --> 00:07:13,410
Obviously this is much less
readable and understandable.

115
00:07:13,418 --> 00:07:17,217
For all these reasons,
and fundamentally the first one

116
00:07:17,217 --> 00:07:19,784
-identifying the concepts-

117
00:07:19,784 --> 00:07:22,564
we warmly advise you to use them
whenever possible. 

118
00:07:22,564 --> 00:07:26,171
Every time you have the chance to

119
00:07:26,171 --> 00:07:29,581
give a clear type to a variable, please
do so : this will enhance de quality of your programs.
