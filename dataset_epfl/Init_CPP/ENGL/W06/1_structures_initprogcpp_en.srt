1
00:00:05,511 --> 00:00:09,344
During the previous episodes, we have discussed
arrays and character strings.

2
00:00:09,344 --> 00:00:13,578
Today, we will discuss data
structures, which are another

3
00:00:13,578 --> 00:00:16,074
way to represent data.

4
00:00:16,074 --> 00:00:19,613
A program may need to store
so-called "structured data".

5
00:00:19,613 --> 00:00:21,913
For example, we way wish to

6
00:00:21,913 --> 00:00:26,263
to store the age of several people,
as is represented here.

7
00:00:26,263 --> 00:00:30,584
As we have discussed in a previous video,
in such a case, we will need

8
00:00:30,584 --> 00:00:35,634
a kind of array, which would in this case
be declared as follows.

9
00:00:35,634 --> 00:00:39,541
We we will use the "vector" type if we do not
know how many people

10
00:00:39,541 --> 00:00:43,586
the program will consider.
On the other hand,

11
00:00:43,586 --> 00:00:46,103
we will use the "array" type

12
00:00:46,103 --> 00:00:49,168
if, for example, we know that we will
always consider 5 people.

13
00:00:49,168 --> 00:00:52,430
Arrays and vectors are homgenous
data structures. This means

14
00:00:52,430 --> 00:00:55,416
that all the values contained
in them share

15
00:00:55,416 --> 00:01:00,361
the same type -- int in this example.

16
00:01:00,361 --> 00:01:04,727
However, we may also want
to consider heterogenous data,

17
00:01:04,727 --> 00:01:08,462
data with different types.
For example, we could want to consider

18
00:01:08,462 --> 00:01:13,061
data regarding people,
like here, where the

19
00:01:13,061 --> 00:01:17,636
data would be the person's name
-- a character string --

20
00:01:17,636 --> 00:01:23,895
the person's height
-- a double-type value --

21
00:01:23,895 --> 00:01:26,743
their age -- an int-type value --

22
00:01:26,743 --> 00:01:32,195
and their gender -- a character,
either 'M' or 'F', for instance.

23
00:01:32,195 --> 00:01:35,851
Here, we cannot resort to an array
to store all these data,

24
00:01:35,851 --> 00:01:39,920
for they do not share
the same type. However, we can

25
00:01:39,920 --> 00:01:43,587
regroup them in a new
type called "structure".

26
00:01:43,587 --> 00:01:48,842
These "structures" allow us
to represent the data of a row.

27
00:01:48,842 --> 00:01:52,118
We will then create an array/vector of "structures"
to store all the data

28
00:01:52,118 --> 00:01:56,198
regarding a group of
people.

29
00:01:56,228 --> 00:02:00,171
In general, we use structures,
when we wish

30
00:02:00,171 --> 00:02:04,751
to regroup data of different
types or natures.

31
00:02:04,751 --> 00:02:07,258
Structures have various usage.

32
00:02:07,613 --> 00:02:12,405
First of all, we will be able
to represented entities.

33
00:02:12,405 --> 00:02:16,234
These entities will be defined
by several data. For example,

34
00:02:16,234 --> 00:02:20,137
such an entity could be a person
defined, according to the program's needs,

35
00:02:20,137 --> 00:02:24,371
by a first name, a last
name and a birth date.

36
00:02:24,371 --> 00:02:28,508
Another entity could be a date,
defined by

37
00:02:28,508 --> 00:02:32,818
a day number, a month and a year.

38
00:02:32,818 --> 00:02:39,293
Regrouping these data makes it
easier to manipulate such entities.

39
00:02:39,293 --> 00:02:43,736
Another useful application of
structures is when we need to have

40
00:02:43,736 --> 00:02:47,867
a function to return several values.
This will be discussed this later.

41
00:02:47,867 --> 00:02:51,368
Finally, a third use,

42
00:02:51,368 --> 00:02:55,485
generalizing the first one,
is to simplify

43
00:02:55,485 --> 00:02:58,265
the conception and writing
of our programs.

44
00:02:58,265 --> 00:03:01,778
Before we burry ourselves in the details,
let's provide a few examples of structures.

45
00:03:01,778 --> 00:03:07,397
This "Date" structure gathers a day,
a month and a year.

46
00:03:09,417 --> 00:03:12,277
Such a declaration thus defines
a new type,

47
00:03:12,277 --> 00:03:14,284
usable in the program.

48
00:03:14,284 --> 00:03:20,684
Thanks to this type, we can now declare
variables. Here, for example,

49
00:03:20,684 --> 00:03:27,952
we are declaring a date-type variable
called "aujourdhui" [TN: "aujourd'hui" means "today"]

50
00:03:27,952 --> 00:03:31,556
This variable can now
have concrete values

51
00:03:31,556 --> 00:03:34,592
for the day, the month and the year.

52
00:03:34,592 --> 00:03:39,269
This structure "Etudiant" regroups the
student's name, and their faculty

53
00:03:39,269 --> 00:03:43,829
-- both character strings -- as well as his
course inscriptions,

54
00:03:43,829 --> 00:03:47,385
an array containing "Cours"-type values.
[TN: "cours" means "course"],

55
00:03:47,395 --> 00:03:51,055
where "Cours" is another structure,
previously declared in the program.

56
00:03:51,055 --> 00:03:54,648
The last data in this structure
would be

57
00:03:54,648 --> 00:03:57,654
the average of the student's grades.

58
00:03:57,654 --> 00:04:02,132
This structure "Particule" would be
useful for a physics simulation program.

59
00:04:02,162 --> 00:04:07,812
It regroups the values related to an
elementary particle :

60
00:04:07,812 --> 00:04:10,745
first of all, the position of the particle

61
00:04:10,745 --> 00:04:13,678
-- a three-dimensional vector --

62
00:04:14,578 --> 00:04:17,053
the velocity of the particle

63
00:04:17,053 --> 00:04:21,901
-- another three-dimensional vector --
as well as the mass

64
00:04:25,091 --> 00:04:29,451
and charge of the particle
-- both of the type double.

65
00:04:30,017 --> 00:04:36,139
A structure is thus a new type defined
and declared by a programmer

66
00:04:36,139 --> 00:04:40,151
respecting the following syntax.
We begin with

67
00:04:40,151 --> 00:04:46,241
the reserved keyword "struct" followed by
the desired name of the structure.

68
00:04:46,241 --> 00:04:52,736
Then, between braces, is what we call
the list

69
00:04:52,736 --> 00:04:59,404
of the structure members regrouped
in the structure.

70
00:04:59,404 --> 00:05:01,889
As you can see, the declaration
of these members

71
00:05:01,889 --> 00:05:07,081
looks similar to the declaration
of variables. Indeed, the declaration

72
00:05:07,081 --> 00:05:12,592
starts with the member's type,
followed by its identifier or name,

73
00:05:12,592 --> 00:05:15,903
followed by a semicolon.

74
00:05:15,903 --> 00:05:20,039
Also, please note that a semicolon
is required after the closing brace.

75
00:05:20,039 --> 00:05:24,689
Structures are the only circumstance
where a semiclon appears

76
00:05:24,689 --> 00:05:27,321
after a closing brace.

77
00:05:28,001 --> 00:05:31,223
For example here, we define 
a new structure,

78
00:05:31,223 --> 00:05:35,898
a new type called "personne". This structure
would be useful in order to define the type

79
00:05:35,898 --> 00:05:39,563
of the elements of the array presented in
the beginning of this episode. It regroups

80
00:05:39,563 --> 00:05:43,786
a person's name, height, age 
and gender.

81
00:05:43,796 --> 00:05:49,735
This other structure called "Complexe"
regroups two members.

82
00:05:49,735 --> 00:05:55,457
A member x and a member y. This structure could
be useful to represent complex numbers

83
00:05:55,457 --> 00:06:02,379
-versus real numbers- written
"x + iy" in mathematics.

84
00:06:02,898 --> 00:06:07,318
SImilarly to arrays, the members of a
structure are not limited

85
00:06:07,318 --> 00:06:10,128
to scalar types such as int or double.

86
00:06:10,128 --> 00:06:12,688
The members of a structure can be

87
00:06:12,688 --> 00:06:15,129
arrays or even other structures!

88
00:06:15,129 --> 00:06:19,293
For example, we declare here a type
"Compliquee" (TN:"compliquÃ©e" means "complicated")

89
00:06:19,293 --> 00:06:23,397
whose second member is of the type int.

90
00:06:23,397 --> 00:06:27,797
Its first member, however, is an
array of doubles.

91
00:06:27,797 --> 00:06:34,335
And its third member is of the type
"Simple", which has been declared here

92
00:06:34,335 --> 00:06:36,551
and contains two members

93
00:06:36,551 --> 00:06:39,478
of type int and double.

94
00:06:39,650 --> 00:06:44,961
A structure is thus a new type which
we can use to declare

95
00:06:44,961 --> 00:06:49,317
variables. This declaration is no different
from

96
00:06:49,317 --> 00:06:54,902
any other declaration. Namely, we begin
by the type,

97
00:06:54,902 --> 00:06:56,820
followed by the variable's name.

98
00:06:56,820 --> 00:07:01,618
For example, we rewrote here the code
defining the structure "Personne".

99
00:07:01,618 --> 00:07:04,976
and here, I declare a variable "untel"
(TN: "untel" means "someone")

100
00:07:04,976 --> 00:07:09,201
of the type "Personne".

101
00:07:09,201 --> 00:07:13,555
Be careful though, the definition
of a structure must be written outside

102
00:07:13,555 --> 00:07:17,057
any function before we can use it
to declare variables.

103
00:07:17,057 --> 00:07:21,607
On the other hand, the declaration
of variables of this new type

104
00:07:21,607 --> 00:07:24,786
has to occur inside a function.

105
00:07:24,786 --> 00:07:32,733
For example, the definition will be written
outside any function. Then, we will define

106
00:07:32,733 --> 00:07:37,094
the variable "untel" inside
a function,

107
00:07:37,094 --> 00:07:38,966
such as the "main" function, like this.

108
00:07:44,010 --> 00:07:48,022
We can represent this variable
"untel" like this:

109
00:07:50,865 --> 00:07:59,139
it has a member called "nom" (TN:"name")
a member called "taille" (TN:"height"), etc.

110
00:08:02,882 --> 00:08:07,388
In this other example, we first declare
a structure called

111
00:08:07,388 --> 00:08:12,819
"Complexe" with a member "x" and a member "y".
Then, we declare here a new variable

112
00:08:12,819 --> 00:08:19,559
called z of the type "Complexe".
z will thus contain

113
00:08:19,559 --> 00:08:24,609
two members : a member 'x' and a member 'y'.

114
00:08:27,136 --> 00:08:30,928
Similarly to other types,
we can initialize

115
00:08:30,928 --> 00:08:32,682
 a structure-type variable.

116
00:08:32,682 --> 00:08:36,820
During the declaration, we will
proceed with the following syntax.

117
00:08:36,820 --> 00:08:42,094
After the type of the structure and
the variable name, we will add

118
00:08:42,094 --> 00:08:48,288
the sign equals and, between braces,
the values

119
00:08:48,288 --> 00:08:53,439
we wish to give to the different
members of the variable.

120
00:08:53,439 --> 00:08:59,339
And, after the closing brace
comes our semicolon.

121
00:08:59,356 --> 00:09:03,311
For example, here is our
structure "Personne" once again.

122
00:09:03,311 --> 00:09:07,198
Here, we declare a personne-type
variable "untel".

123
00:09:07,198 --> 00:09:10,084
"untel" can be represented like this.

124
00:09:27,240 --> 00:09:33,072
This declaration also initializes the
members of the variable untel:

125
00:09:33,072 --> 00:09:37,262
"Dupond" will go into the first
member, the member "nom".

126
00:09:37,262 --> 00:09:41,532
Namely, the member "nom" will contain
the value "Dupond".

127
00:09:41,532 --> 00:09:46,047
The member "taille" will contain
the value 1.75 .

128
00:09:46,047 --> 00:09:50,787
The member "age" will
contain the value 41 .

129
00:09:50,787 --> 00:09:54,646
And the member "sexe" (TN: "gender")
will contain the character 'M'.

130
00:09:54,646 --> 00:10:00,110
Moreover, in C++11,
we can also use this syntax

131
00:10:00,110 --> 00:10:05,078
outside the initialization, for
an assignment and we will obtain

132
00:10:05,078 --> 00:10:07,795
the exact same values in the same members.

133
00:10:07,856 --> 00:10:12,553
Please note that in C++, before 2011,
we could not use this syntax

134
00:10:12,553 --> 00:10:18,274
for the assignment; there was no easy
way to assign literal values to

135
00:10:18,274 --> 00:10:20,547
all the members of a structure.

136
00:10:21,114 --> 00:10:26,012
We now know how to initialize the
members of a structure-type variable,

137
00:10:26,012 --> 00:10:29,503
namely giving a value to its
members during the declaration

138
00:10:29,503 --> 00:10:34,969
of the variable. Now we would like to
access these values. To that end, we

139
00:10:34,969 --> 00:10:40,238
have to respect the following syntax.
We begin by writing

140
00:10:40,238 --> 00:10:46,611
the name of the structure-type variable,
followed by a period, followed the member's name.

141
00:10:46,611 --> 00:10:50,224
For example, let us go back to
our  variable "untel"

142
00:10:50,224 --> 00:10:53,461
of the previous slide, which was a
"Personne"-type variable.

143
00:10:53,461 --> 00:10:58,566
We can represent it like this.
This instruction is an assignment,

144
00:10:58,566 --> 00:11:02,220
which will store the value 1.75
inside the member "taille"

145
00:11:02,220 --> 00:11:08,279
of the variable "untel". Namely,
we will put the value 1.75 at this place

146
00:11:08,279 --> 00:11:11,003
of our representation of
the variable "untel".

147
00:11:12,483 --> 00:11:17,258
This instruction will add 1 to the
member "age" of "untel" (happy birthday!).

148
00:11:17,258 --> 00:11:23,517
In other words, it will go from 41 to 42.
By the way, please note that the

149
00:11:23,517 --> 00:11:26,881
parentheses here are mandatory;
we cannot simply write

150
00:11:26,881 --> 00:11:35,902
" ++untel.age " since the operator "++"
has priority over the operator '.' (dot). 

151
00:11:35,902 --> 00:11:40,241
This last instruction here will print
the value contained in the member "sexe"

152
00:11:40,241 --> 00:11:44,831
of the variable "untel"; it will thus print
the character 'M'.

153
00:11:45,538 --> 00:11:48,788
Now, let us detail a complete
example, regarding, inter alia,

154
00:11:48,788 --> 00:11:51,983
functions with structure-type
parameters.

155
00:11:52,338 --> 00:11:57,893
We will start by reusing here the code of our
structure "Personne",

156
00:11:57,893 --> 00:12:03,417
which data are: a name, a height,
an age and a gender.

157
00:12:03,417 --> 00:12:08,488
The function "main" will start
by declaring a personne-type

158
00:12:08,551 --> 00:12:13,964
variable "untel". We can represent
"untel" like this.

159
00:12:13,964 --> 00:12:19,463
"untel" will be initialized through
the return value of

160
00:12:19,463 --> 00:12:23,680
the function "naissance" (TN:"birth"),
called here.

161
00:12:24,277 --> 00:12:28,917
Here is the code of the birth function.
Its goal is to ask the user to give us

162
00:12:28,938 --> 00:12:34,642
the values of the members of a
personne-type variable,

163
00:12:34,642 --> 00:12:39,104
namely, a name, a height, an age and
a gender. The function will then return,

164
00:12:39,104 --> 00:12:42,865
as a structure, the members'
values entered by the user.

165
00:12:42,865 --> 00:12:46,656
This function does not need
any 

166
00:12:46,656 --> 00:12:52,112
value in order to work:
it has no parameters.

167
00:12:52,112 --> 00:12:55,825
On the other hand, it returns
a structure-type value;

168
00:12:55,825 --> 00:13:03,002
more precisely, a "Personne"-type value.
The return type of

169
00:13:03,002 --> 00:13:05,698
the "naissance" function is thus "Personne".

170
00:13:05,777 --> 00:13:10,612
How does the "naissance" function proceed, exactly?
It starts by declaring

171
00:13:10,858 --> 00:13:14,378
a local personne-type variable
called "p".

172
00:13:14,378 --> 00:13:19,922
"p" can be represented just like
the variable "untel".

173
00:13:19,922 --> 00:13:22,548
For now, the members of "p"
are not initialized;

174
00:13:22,548 --> 00:13:25,648
we do not know what they contain.
Then, the function "naissance"

175
00:13:25,648 --> 00:13:29,771
will ask the user to enter a name,
which will be stored

176
00:13:29,771 --> 00:13:33,508
directly inside the field "nom"
of the variable "p", right here.

177
00:13:33,508 --> 00:13:39,340
Let us suppose, for our example,
that the user enters the name "Dupond".

178
00:13:39,340 --> 00:13:42,911
Then, the function will ask
the user to enter a height

179
00:13:42,911 --> 00:13:45,826
and an age; let us use
the values

180
00:13:45,826 --> 00:13:48,854
of the previous example.
The function will then

181
00:13:48,854 --> 00:13:53,686
ask the user to enter a character --either
'M' or 'F'-- for the member "sexe"

182
00:13:53,686 --> 00:13:58,363
of the variable "p", making sure
that the user enters

183
00:13:58,363 --> 00:14:02,995
either 'M' or 'F' thanks to a "do-while loop".

184
00:14:02,995 --> 00:14:05,978
Let'assume that our person here
is a man.

185
00:14:05,978 --> 00:14:11,374
Finally, the function will finish
by returning the value

186
00:14:11,374 --> 00:14:15,916
contained inside the variable "p",
that is all the values

187
00:14:15,916 --> 00:14:17,020
stored in its members.

188
00:14:17,970 --> 00:14:21,102
Let's go back to the call
of the function "naissance".

189
00:14:21,102 --> 00:14:27,495
What will happen here, exactly?
The values of the members of the variable "p"

190
00:14:27,495 --> 00:14:32,209
will be copied inside the fields
of the variable "untel". Precisely,

191
00:14:32,209 --> 00:14:35,533
the member "name" will take
the value "Dupond",

192
00:14:35,533 --> 00:14:39,972
the member "height", 1.75,
"age", 41

193
00:14:39,972 --> 00:14:43,285
and the member "sexe" the character 'M'.

194
00:14:43,285 --> 00:14:47,188
The next instruction
in the "main" function is this one;

195
00:14:47,200 --> 00:14:51,616
a call to the "anniversaire" function
 (TN: "anniversaire" means "birthday"),

196
00:14:51,616 --> 00:14:54,382
 passing the variable "untel" as argument.

197
00:14:54,382 --> 00:14:57,906
Here is the code of the "anniversaire" function.

198
00:14:57,906 --> 00:15:01,938
The goal of this function "anniversaire"
is to add 1 to the "age" member

199
00:15:01,938 --> 00:15:05,817
of the variable passed as argument.
This function has thus

200
00:15:05,817 --> 00:15:09,176
only one parameter of the
type "Personne",

201
00:15:09,176 --> 00:15:12,002
since "untel" is a "Personne"-type
variable.

202
00:15:12,002 --> 00:15:17,141
We will use a passage by reference since
the function aims to modify

203
00:15:17,141 --> 00:15:20,386
the value of the variable passed
as argument.

204
00:15:20,606 --> 00:15:25,195
This function does not return
anything; its return type

205
00:15:25,195 --> 00:15:31,110
is thus "void". If we execute the function's
body in our example,

206
00:15:32,049 --> 00:15:38,504
we will change this 41 -- the value
contained by the member "age"

207
00:15:38,510 --> 00:15:43,569
of the variable "untel" -- to 42.
Then, we will  keep going

208
00:15:43,796 --> 00:15:47,585
in the body of the "main" function,
thus reaching this instruction

209
00:15:47,585 --> 00:15:52,642
calling the function "affiche" [TN: "print"/"display"]
passing the variable "untel"

210
00:15:52,642 --> 00:15:58,008
 as argument.
Here is the code of this "affiche" function.

211
00:15:58,008 --> 00:16:02,317
The goal of this "affiche" function
is to print the values of the members

212
00:16:02,317 --> 00:16:05,123
of a variable passed as argument.
This function thus has

213
00:16:05,123 --> 00:16:10,141
only one personne-type parameter.
It will not need to modify

214
00:16:10,141 --> 00:16:12,984
the value of the variable
passed as argument.

215
00:16:13,092 --> 00:16:17,770
We used here keyword "const"
followed by an ampersand

216
00:16:17,779 --> 00:16:23,035
similarly to the passage by reference,
between the paramter's type

217
00:16:23,043 --> 00:16:28,902
and the parameter's name.
This is an optimization you do not

218
00:16:28,902 --> 00:16:32,029
need to worry about for now.

219
00:16:32,029 --> 00:16:36,869
This optimization avoids to
make a copy. Indeed, be reminded

220
00:16:36,869 --> 00:16:42,173
that during passage by value, a copy
is created; a costly copy of a

221
00:16:42,173 --> 00:16:43,775
structure containing many members.

222
00:16:43,775 --> 00:16:48,991
The function will simply print
the values of the different members

223
00:16:48,991 --> 00:16:52,984
of the parameter.
By the way, we are here using a "switch"

224
00:16:53,289 --> 00:16:59,246
instruction to print if the person is man
or a woman. This "switch" instruction

225
00:16:59,246 --> 00:17:01,597
is explained in the complements.

226
00:17:01,597 --> 00:17:05,307
We could also have used
an "if" instruction.

227
00:17:05,307 --> 00:17:08,780
You can verify yourself that, in the
case of our example,

228
00:17:08,780 --> 00:17:10,932
the function will print this.

229
00:17:14,282 --> 00:17:18,631
Once the "affiche" function has been
executed, we will come back in the

230
00:17:18,631 --> 00:17:24,656
"main" function, here. We will then
execute the "return" instruction,

231
00:17:24,715 --> 00:17:27,401
thus ending the program.

232
00:17:27,450 --> 00:17:30,955
We can assign a structure-type
variable

233
00:17:30,955 --> 00:17:36,345
to another variable of the same type.
For example, we declare here a

234
00:17:36,345 --> 00:17:41,292
personne-type variable p1, initializing
its members with these values.

235
00:17:41,463 --> 00:17:45,496
Then, we declare another personne-type
variable p2

236
00:17:45,496 --> 00:17:49,886
without initializing the value
of its members.

237
00:17:49,886 --> 00:17:52,853
In this last instruction -- an assignment --

238
00:17:52,853 --> 00:17:57,593
we will copy the value of the
members of p1 inside the members

239
00:17:57,593 --> 00:18:02,070
of the variable p2. Namely, this assignment
is strictly equivalent 

240
00:18:02,070 --> 00:18:07,143
to these 4 assignments, copying
member by member,

241
00:18:08,333 --> 00:18:13,608
the variable p1 into p2. In other words,
we copy here, for example, the value

242
00:18:13,608 --> 00:18:17,336
of the member "nom" of p1
into the member "nom" of p2.

243
00:18:18,553 --> 00:18:22,007
Be careful though, the assignment
is the only global operator

244
00:18:22,007 --> 00:18:25,668
usable for structure-type
variables.

245
00:18:25,668 --> 00:18:29,079
We cannot compare nor
print them in a global way.

246
00:18:29,079 --> 00:18:35,370
Reusing the previous example,
we were allowed to write "p2 = p1",

247
00:18:35,370 --> 00:18:38,824
which is an assignment.
However, we are not allowed

248
00:18:38,868 --> 00:18:48,123
to write "p1 == p2" to compare p1 and p2
or two write "cout << p1" in order to print

249
00:18:48,123 --> 00:18:53,414
the values of the members of p1.
In such a case, we have to proceed

250
00:18:53,616 --> 00:18:58,113
member by member. For example,
we may use this instruction

251
00:18:58,113 --> 00:19:02,554
to print the four members of p1.
Obviously though, it is much better

252
00:19:02,554 --> 00:19:06,686
to write a function tasked with
this comparison or printing.

253
00:19:06,686 --> 00:19:09,222
This is exactly what we did with the former
"affiche" function,

254
00:19:09,222 --> 00:19:10,898
in a previous example.

255
00:19:11,805 --> 00:19:17,423
By the way, please note that even
if the operators == and << are not defined

256
00:19:17,423 --> 00:19:23,344
a priori for structures, in C++, a programmer
has the possibility to define them himself.

257
00:19:23,344 --> 00:19:26,071
This is called operator
overloading,

258
00:19:26,071 --> 00:19:31,108
But this goes beyond this course's frame.
For now, simply remember

259
00:19:31,108 --> 00:19:35,252
that you have to compare structures
member by member.

260
00:19:36,114 --> 00:19:39,257
Now, let us go back to the
example of the beginning of this episode

261
00:19:39,298 --> 00:19:44,858
Remember, we wanted to store
all these values in the memory.

262
00:19:44,858 --> 00:19:48,826
Now, we will be able to use
an array, the elements of which

263
00:19:48,826 --> 00:19:52,851
will be of structure type.
First of all, we will declare

264
00:19:52,851 --> 00:19:57,676
the structure "Personne", regrouping
the four members interesting us,

265
00:19:57,676 --> 00:20:01,662
namely the name, the height,
the age and the gender of the person.

266
00:20:02,642 --> 00:20:06,572
Then, we will declare an array called
"Personnes", here. [TN : notice the plural.]

267
00:20:06,777 --> 00:20:11,155
Its elements will be
of the type "Personne".

268
00:20:11,779 --> 00:20:18,800
Now, each row of this table
will correspond to an element

269
00:20:18,800 --> 00:20:23,683
of our array. Each column of
the table will correspond

270
00:20:23,683 --> 00:20:27,669
to a member of the
array's elements.

271
00:20:28,077 --> 00:20:32,587
We can represent the beginning
of our "Personnes" array like this :

272
00:20:33,617 --> 00:20:37,745
Each element of the "Personnes" array
will contain a member "nom",

273
00:20:38,457 --> 00:20:43,272
a member "taille" and so on.

274
00:20:47,157 --> 00:20:51,846
All this forms the first
element of the "Personnes" array.

275
00:20:51,846 --> 00:20:56,797
And this assignment will store,
among others, these values

276
00:20:56,797 --> 00:21:00,696
inside the first element of the
"Personnes" array. Therefore,

277
00:21:00,696 --> 00:21:05,519
"Dupond" will be stored in this member,
1.75 in this member,

278
00:21:05,519 --> 00:21:10,081
41 here and 'M' here.

279
00:21:10,799 --> 00:21:13,968
As we have said, structures can
used to let

280
00:21:13,968 --> 00:21:17,183
functions returns several values.
For example, we may want to write a function

281
00:21:17,183 --> 00:21:22,021
"division_euclidienne" (TN:"euclidean division")
returning, at the same time,

282
00:21:22,021 --> 00:21:27,106
the quotient and the remainder
of two values passed as argument.

283
00:21:27,276 --> 00:21:30,756
In such a case, we have
several possible solutions.

284
00:21:30,756 --> 00:21:34,094
We could have the function
return a structure

285
00:21:34,094 --> 00:21:38,057
containing the different values we
wish to have returned.

286
00:21:38,057 --> 00:21:42,453
Another possibility is to pass the
variables by reference

287
00:21:42,453 --> 00:21:46,275
and to have them assigned,
inside the function, to the

288
00:21:46,275 --> 00:21:47,717
values we wish to calculate.

289
00:21:48,091 --> 00:21:51,119
We will see an example
on the next slide.

290
00:21:51,119 --> 00:21:54,966
A third possibility, if all the values
have the same type,

291
00:21:54,966 --> 00:21:58,312
is to have the function return
a dynamic array

292
00:21:58,312 --> 00:22:00,671
containing these values.

293
00:22:01,327 --> 00:22:05,153
In more complex cases, we could
even combine the solutions

294
00:22:05,153 --> 00:22:11,969
1 and 3, thus returning either a structure,

295
00:22:11,969 --> 00:22:14,209
with vector members containing
homogenous

296
00:22:14,209 --> 00:22:19,005
data or returning vectors of structure
containing heterogenous values.

297
00:22:19,005 --> 00:22:22,313
For example, in the case of

298
00:22:22,313 --> 00:22:25,441
the function "division_euclidienne", which
has two parameters:

299
00:22:25,441 --> 00:22:28,490
the dividend and the divisor.

300
00:22:28,491 --> 00:22:33,960
the first solution would be to start
by declaring a structure called

301
00:22:33,960 --> 00:22:39,942
here "Resultat" (TN:"result") containing
a member for the quotient

302
00:22:39,942 --> 00:22:43,653
and a member for the remainder.
Then, we will define, as the return

303
00:22:43,653 --> 00:22:46,728
type of the function "division_euclidienne",
the type "Resultat".

304
00:22:46,757 --> 00:22:50,690
In such a case, we will call our
function "division_euclidienne"

305
00:22:50,690 --> 00:22:53,056
like this:

306
00:22:53,056 --> 00:22:59,549
"Resultat" in order to define the type
of a variable containing the result,

307
00:22:59,549 --> 00:23:04,784
and passing two variables by value,
one for the dividend and one for the divisor.

308
00:23:05,064 --> 00:23:08,093
The second solution is to add
two parameters,

309
00:23:08,093 --> 00:23:11,407
passed by reference
and to use the function

310
00:23:11,407 --> 00:23:14,031
like this.
We will start by declaring

311
00:23:14,031 --> 00:23:17,929
two supplementary variables;
they will store the values

312
00:23:17,929 --> 00:23:22,462
calculated by the function.
Then, we will call our function

313
00:23:22,462 --> 00:23:24,959
like this.

314
00:23:25,163 --> 00:23:30,692
The third solution is to define,
as the return type of the function,

315
00:23:30,692 --> 00:23:33,776
an integer array containing two elements.

316
00:23:34,906 --> 00:23:38,860
We will then call the function like this.

317
00:23:43,020 --> 00:23:47,354
We have used here the type "array"
but we could also have used

318
00:23:47,354 --> 00:23:51,926
the type "vector" since "vector" is a more
general form of arrays.

319
00:23:52,330 --> 00:23:55,313
To sum up, structures let us
regroup several data

320
00:23:55,313 --> 00:24:00,135
under a same type. They serve to represent
entities such as people

321
00:24:00,135 --> 00:24:04,515
or dates or to have functions return
several values.

322
00:24:04,515 --> 00:24:09,037
More generally, they let us simplify
the conception and writing of our programs.

323
00:24:09,037 --> 00:24:11,710
Now, we invite you to try and take
the quizzes,

324
00:24:11,710 --> 00:24:14,712
testing the new knowledge acquired

325
00:24:14,712 --> 00:24:16,513
during this new lesson.
