1
00:00:03,682 --> 00:00:05,543
With our address book analogy,

2
00:00:05,543 --> 00:00:07,401
you now know of most of the
operations we can do

3
00:00:07,401 --> 00:00:09,213
on pointers.

4
00:00:09,213 --> 00:00:11,583
In this episode, we will go over all
these operations

5
00:00:11,583 --> 00:00:13,779
one after the other and
discuss

6
00:00:13,779 --> 00:00:16,307
how to use them in C++ language
syntax.

7
00:00:17,289 --> 00:00:20,528
To declare a variable in C++,
we know we can

8
00:00:20,528 --> 00:00:21,995
use the following syntax.

9
00:00:21,995 --> 00:00:24,486
So, name of the type, for example
"int" for integers

10
00:00:24,486 --> 00:00:26,893
followed by the identifier associated
to the variable, i.e "x".

11
00:00:26,893 --> 00:00:30,941
For a pointer, the notation is
the same, except that the type

12
00:00:30,941 --> 00:00:34,757
will indicate that it is a pointer
to a particular data type.

13
00:00:34,897 --> 00:00:37,239
So for example if I want to
declare a pointer

14
00:00:37,239 --> 00:00:40,768
on an integer, the associated
type will be: "int*"

15
00:00:40,768 --> 00:00:44,805
to mean "pointer to an integer",
followed by the name of the pointer,

16
00:00:45,145 --> 00:00:47,067
so of the pointer-type variable
we are creating.

17
00:00:48,427 --> 00:00:50,753
Similarly, if I want to declare a
pointer on a "double"

18
00:00:50,753 --> 00:00:52,470
I will use the following syntax.

19
00:00:52,470 --> 00:00:55,992
I will write "double*" as the type

20
00:00:55,992 --> 00:00:59,079
followed by the identifier for
the variable, "ptr".

21
00:00:59,079 --> 00:01:02,082
So here, I declared a variable named
"ptr", the type of which is pointer

22
00:01:02,082 --> 00:01:03,697
on a variable of type "double".

23
00:01:05,129 --> 00:01:08,810
This is for simple declaration. If I want
to initialize at the same time,

24
00:01:08,810 --> 00:01:10,998
the syntax is analogous to the one
I used up until now.

25
00:01:10,998 --> 00:01:15,643
For example, if I want to write, declare
and initialize a variable "x"

26
00:01:15,643 --> 00:01:19,262
of integer type, initialized to 4,
I use the following syntax.

27
00:01:19,262 --> 00:01:21,964
Well, the syntax is quite 
analogous for pointers.

28
00:01:21,964 --> 00:01:25,326
I must indicate in parentheses
the value of the pointer.

29
00:01:25,826 --> 00:01:28,600
And this value must be an address.

30
00:01:30,000 --> 00:01:33,812
So here are three examples of
declaration-initialization situations

31
00:01:33,825 --> 00:01:35,349
on pointer-type variables.

32
00:01:35,349 --> 00:01:38,545
Here, we are taking a bit of ahead
start on what will follow in this episode

33
00:01:38,545 --> 00:01:40,155
and the following ones, by seeing

34
00:01:40,155 --> 00:01:43,475
how to obtain the address
of a given memory area,

35
00:01:43,475 --> 00:01:46,625
in this case the address of the memory
area named "i", the variable "i";

36
00:01:46,625 --> 00:01:49,049
and how to dynamically allocate
a memory area

37
00:01:49,049 --> 00:01:52,425
capable of storing data of a
certain type, in this case an integer.

38
00:01:52,425 --> 00:01:54,594
So of course, we will review
these concepts

39
00:01:54,594 --> 00:01:56,558
in much further detail when the time comes.

40
00:01:56,944 --> 00:02:00,437
First line here, I am 
declaring-initializing

41
00:02:00,437 --> 00:02:03,363
a "ptr" variable of type pointer
to integer

42
00:02:03,363 --> 00:02:07,049
So the "ptr" variable can contain
the address of an integer

43
00:02:07,049 --> 00:02:10,504
and we initialize this variable
using a special value

44
00:02:10,504 --> 00:02:15,111
which is "nullptr" meaning
that the "ptr" pointer

45
00:02:15,111 --> 00:02:17,916
points to nothing.

46
00:02:17,916 --> 00:02:20,052
So remember our address book
analogy.

47
00:02:20,052 --> 00:02:22,351
Here, we have a page of our
address book which is empty,

48
00:02:22,351 --> 00:02:24,851
which is initialized to nothing,
which contains nothing.

49
00:02:25,825 --> 00:02:31,477
Second instruction,
I initialize a "ptr" pointer

50
00:02:31,477 --> 00:02:33,868
using the address of an existing
memory area,

51
00:02:33,868 --> 00:02:35,505
of a variable which exists in memory.

52
00:02:35,643 --> 00:02:37,244
We will come back to this later.

53
00:02:37,244 --> 00:02:40,951
And here, I initialize my pointer
using the address of

54
00:02:40,951 --> 00:02:42,874
a dynamically allocated memory area.

55
00:02:42,894 --> 00:02:45,681
These concepts will be the focus
of the following episodes

56
00:02:45,681 --> 00:02:47,586
and of the rest of this sequence.

57
00:02:47,766 --> 00:02:50,192
By the way, please note that the special value
"nullptr" can be assigned

58
00:02:50,192 --> 00:02:53,350
to any type of pointer --
be it a pointer to a "double",

59
00:02:53,350 --> 00:02:55,801
pointer to an integer, pointer
to any other type

60
00:02:55,801 --> 00:02:57,568
of data defined in C++.

61
00:02:57,568 --> 00:03:00,686
In either case, it means that

62
00:03:00,686 --> 00:03:02,551
the pointer points to nothing.

63
00:03:03,839 --> 00:03:07,383
C++ provides two fundamental
operators

64
00:03:07,383 --> 00:03:09,325
for pointer manipulation.

65
00:03:09,415 --> 00:03:11,464
The '&' operator (ampersand), 
and the '*' operator (star).

66
00:03:11,464 --> 00:03:14,792
The role of the '&' operator
is to return the memory address

67
00:03:14,792 --> 00:03:16,645
of the value of a variable.

68
00:03:17,563 --> 00:03:19,637
Let's see what this means on
a real example.

69
00:03:19,689 --> 00:03:23,268
Here, we have a small program which
starts by declaring

70
00:03:23,268 --> 00:03:26,528
a variable 'x' of integer type, and
initializes it to 3.

71
00:03:26,528 --> 00:03:30,737
We know that to each variable of a program,

72
00:03:30,737 --> 00:03:33,740
an address in memory is assigned.

73
00:03:33,740 --> 00:03:35,382
Let's name this address "adr".

74
00:03:35,662 --> 00:03:39,022
Then, we declare a second variable "px"

75
00:03:39,022 --> 00:03:41,506
which is of type pointer-to-integer.

76
00:03:41,506 --> 00:03:44,775
Meaning that it is capable
of containing the address

77
00:03:44,775 --> 00:03:46,502
of a memory area containing an integer.

78
00:03:46,750 --> 00:03:48,711
So we have this situation.

79
00:03:49,539 --> 00:03:54,148
And here, we will start by initializing
the variable "px"

80
00:03:54,148 --> 00:03:56,755
using the special value "nullptr".

81
00:03:57,150 --> 00:04:00,174
Which basically means that "px"

82
00:04:00,174 --> 00:04:03,028
is capable of pointing to a memory
area containing an integer,

83
00:04:03,028 --> 00:04:05,593
but that at this moment,
it points towards nothing.

84
00:04:07,568 --> 00:04:09,438
It points to nothing at all.

85
00:04:09,438 --> 00:04:11,501
Now, the third line of the program.

86
00:04:12,210 --> 00:04:14,684
And this is where our "&" operator
comes in.

87
00:04:16,214 --> 00:04:21,451
We assign, to the variable "px",
the address of the variable "x".

88
00:04:21,916 --> 00:04:24,386
We have seen that this address
here is "adr",

89
00:04:24,386 --> 00:04:26,730
so this is what we end up with.

90
00:04:26,730 --> 00:04:29,207
We will assign the address of the
variable "x" to "px".

91
00:04:29,207 --> 00:04:32,255
We are establishing the link between
pointer and pointed-to area

92
00:04:34,655 --> 00:04:36,448
with this assignment.

93
00:04:38,246 --> 00:04:43,159
So to sum up, "px" returns the address
associated to the variable "x".

94
00:04:48,949 --> 00:04:52,811
The '*' operator allows us
to get the value pointed to

95
00:04:52,811 --> 00:04:54,555
by a pointer-type variable.

96
00:04:54,555 --> 00:04:57,309
Earlier, we learned about the '&'
operator.

97
00:04:57,309 --> 00:04:59,078
So "&x", where "x" is a variable,

98
00:04:59,078 --> 00:05:01,343
will return the address of "x"
in memory.

99
00:05:03,391 --> 00:05:06,081
Now, imagine that we have a pointer
"px".

100
00:05:06,081 --> 00:05:09,837
This pointer points to, contains the
address of, a memory area

101
00:05:09,837 --> 00:05:12,201
containing a certain value, for example 3.

102
00:05:12,201 --> 00:05:15,606
And we wish to find the value pointed to
by using the pointer.

103
00:05:16,233 --> 00:05:18,817
For this, we need to use the
'*' operator

104
00:05:18,817 --> 00:05:21,824
applied to a pointer-type variable.
This is what will allow us

105
00:05:21,824 --> 00:05:25,003
to get the value pointed to
by this pointer.

106
00:05:26,740 --> 00:05:29,475
So if we go over our small example
from the previous episode again,

107
00:05:29,475 --> 00:05:31,279
we go through the first instructions

108
00:05:31,279 --> 00:05:33,293
and we find ourselves in the following
situation.

109
00:05:33,293 --> 00:05:36,842
A variable "x" initialized to a value of 3,
of integer type and which has an address.

110
00:05:36,842 --> 00:05:39,594
A second variable "px" which is of
pointer-to-integer type

111
00:05:39,594 --> 00:05:41,659
which we begin by initializing
to "nullptr",

112
00:05:41,659 --> 00:05:43,825
meaning that it points to nothing.

113
00:05:43,825 --> 00:05:47,501
And to which we then assign the
address of "x"

114
00:05:48,671 --> 00:05:50,933
which will establish the link
between pointer

115
00:05:50,933 --> 00:05:52,734
and pointed-to variable.

116
00:05:52,734 --> 00:05:56,542
Then, last instruction,
and this is where we call

117
00:05:56,542 --> 00:05:58,087
our famous little '*' operator

118
00:05:58,087 --> 00:06:01,529
which will allow us to establish the
link between pointer

119
00:06:01,529 --> 00:06:03,029
and pointed-to value.

120
00:06:03,029 --> 00:06:04,846
So here, we have "*px".

121
00:06:04,846 --> 00:06:08,839
we use the '*' operator on the pointer,
which will allow us to get,

122
00:06:08,839 --> 00:06:12,463
through the pointer, the value
pointed to by this pointer.

123
00:06:16,597 --> 00:06:19,193
Now, imagine that I have a variable
of type "int"

124
00:06:19,193 --> 00:06:23,174
named "i" which contains a certain value
and which has an address in memory.

125
00:06:24,804 --> 00:06:30,841
If I write "&i", I will get a value
of type pointer-to-int

126
00:06:30,841 --> 00:06:34,819
which is the address "adr".

127
00:06:36,454 --> 00:06:39,794
Now, if I write " *&i ",

128
00:06:40,706 --> 00:06:43,677
I will apply the '*' operator to
this pointer

129
00:06:43,677 --> 00:06:47,957
which will return the value stored
at that address,

130
00:06:47,957 --> 00:06:49,956
which is 3.

131
00:06:50,336 --> 00:06:54,906
So writing " *&i " is exactly
equivalent to writing "i"

132
00:06:54,906 --> 00:06:58,092
since I directly access the value
contained in "i".

133
00:07:00,252 --> 00:07:04,191
C++ has the reputation of being a
language with a somewhat complicated syntax.

134
00:07:04,191 --> 00:07:07,035
The '*' and '&' operators which
we have just seen

135
00:07:07,035 --> 00:07:08,683
are a first example of that.

136
00:07:08,683 --> 00:07:11,092
In fact, depending on the context in which
they are used, these operators

137
00:07:11,092 --> 00:07:12,578
do not necessarily always mean
the same thing.

138
00:07:12,578 --> 00:07:13,968
Let's see why.

139
00:07:15,390 --> 00:07:18,741
There are now two contexts in which
we use the '&' operator.

140
00:07:18,741 --> 00:07:21,991
The first context is when the ampersand
follows a type name

141
00:07:21,991 --> 00:07:24,049
and the second is when the &

142
00:07:24,049 --> 00:07:26,221
precedes the name of a pointer-type variable.

143
00:07:27,582 --> 00:07:31,190
In the first case, we will use
the '&' to declare

144
00:07:31,190 --> 00:07:34,258
a reference, either
when we pass

145
00:07:34,258 --> 00:07:37,529
a variable by reference to a function,
or when we declare a reference on its own.

146
00:07:39,737 --> 00:07:42,311
For example, I can declare a variable
"i" of integer type

147
00:07:47,061 --> 00:07:49,779
and I can declare a reference

148
00:07:51,368 --> 00:07:53,603
to this variable named "id".

149
00:07:54,321 --> 00:07:56,366
This simply means that "id"
is now

150
00:07:56,366 --> 00:07:58,702
another name for the variable "i".

151
00:07:59,162 --> 00:08:00,912
So, first context of use,

152
00:08:02,622 --> 00:08:06,016
we use the "&" to indicate that
we are declaring a reference.

153
00:08:07,732 --> 00:08:10,453
Second context of use:
when the ampersand symbol

154
00:08:10,453 --> 00:08:13,012
precedes a variable name.
We have just seen

155
00:08:13,012 --> 00:08:15,662
that in this case, we will
simply obtain

156
00:08:15,662 --> 00:08:17,326
the address of this variable.

157
00:08:17,525 --> 00:08:21,639
And this address can of course
be assigned to a pointer-type variable

158
00:08:21,639 --> 00:08:26,688
to establish the link between a
pointer and a pointed-to variable.

159
00:08:27,502 --> 00:08:29,749
So here, we have a context
of use which

160
00:08:29,749 --> 00:08:32,483
is completely different from
the first and which

161
00:08:32,483 --> 00:08:34,345
leads us to a totally different
situation.

162
00:08:35,545 --> 00:08:39,446
So, first potential for confusion:
two possible contexts for use

163
00:08:39,523 --> 00:08:42,457
of the ampersand which means different
things in C++.

164
00:08:44,514 --> 00:08:47,193
Second example where C++
uses the same symbol

165
00:08:47,193 --> 00:08:49,972
to represent two different things: the star '*'.

166
00:08:50,360 --> 00:08:52,740
Indeed, we saw earlier that

167
00:08:52,809 --> 00:08:55,811
when a '*' follows a type name
as it is the case here,

168
00:08:55,811 --> 00:08:59,552
it is simply used to declare a variable
of pointer type.

169
00:08:59,928 --> 00:09:03,353
For example, if I write something like
this in a program,

170
00:09:03,353 --> 00:09:06,900
I am declaring a variable
named "id"

171
00:09:06,900 --> 00:09:10,517
and this variable is defined
as having a pointer-to-int type

172
00:09:10,517 --> 00:09:12,247
thanks to this '*'.

173
00:09:12,247 --> 00:09:15,680
This means that it can store,
potentially,

174
00:09:17,960 --> 00:09:21,728
the address of a memory area
containing an integer.

175
00:09:23,492 --> 00:09:24,836
Like so.

176
00:09:25,542 --> 00:09:27,018
So "id"

177
00:09:28,348 --> 00:09:30,259
is a variable of pointer type 

178
00:09:30,259 --> 00:09:32,135
declared using '*'.

179
00:09:32,936 --> 00:09:37,619
If, however, the '*' precedes
the name of a variable,

180
00:09:37,619 --> 00:09:40,754
this supposes that
the variable considered

181
00:09:40,754 --> 00:09:42,361
is a pointer-type variable.

182
00:09:42,361 --> 00:09:46,615
And the '*' will serve to return
the value pointed to by the pointer.

183
00:09:46,865 --> 00:09:49,615
And here, this is the situation we are in.

184
00:09:49,615 --> 00:09:53,051
We have a pointer-type variable
which contains

185
00:09:53,051 --> 00:09:57,137
the address of a certain memory area,
which contains a value.

186
00:09:59,037 --> 00:10:01,563
Let's say that this variable is an integer.

187
00:10:02,873 --> 00:10:07,035
So "*id" will simply return the value of 3,

188
00:10:07,945 --> 00:10:11,164
the value pointed to by the "id" pointer.

189
00:10:11,391 --> 00:10:16,141
So here, the '*' serves to find
the value pointed to by a pointer.

190
00:10:16,141 --> 00:10:18,518
It is a context of use

191
00:10:18,518 --> 00:10:21,065
which is quite different from what we have
seen up until now.
