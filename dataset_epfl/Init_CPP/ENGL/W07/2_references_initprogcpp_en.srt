1
00:00:05,317 --> 00:00:07,940
A reference is simply another name,

2
00:00:07,940 --> 00:00:10,376
a synonym, an alias,

3
00:00:10,376 --> 00:00:12,505
for an object which already
exists in memory.

4
00:00:12,505 --> 00:00:16,304
If, for example, I have an object,
a variable of integer type

5
00:00:16,304 --> 00:00:20,641
which is called <i>val</i> and
which contains the value 1.

6
00:00:20,896 --> 00:00:25,515
I can give another name,
for example <i>x</i>,

7
00:00:25,515 --> 00:00:31,214
for this same area, for this same variable
in memory. This is a reference.

8
00:00:31,605 --> 00:00:34,574
A reference is simply used
to refer

9
00:00:34,574 --> 00:00:36,534
to another object in memory.

10
00:00:36,534 --> 00:00:38,385
This is exactly what we used

11
00:00:38,385 --> 00:00:41,117
when we passed arguments
by reference.

12
00:00:41,117 --> 00:00:48,532
If, for example, we had a function <i>f</i>
which took an integer a by reference,

13
00:00:48,532 --> 00:00:53,692
which we wrote like this, with
the & symbol here,

14
00:00:53,880 --> 00:00:56,926
we were passing this argument by reference.

15
00:00:56,926 --> 00:00:59,765
If, somewhere else in the program

16
00:00:59,765 --> 00:01:03,605
I defined an integer, for example,

17
00:01:03,605 --> 00:01:08,063
named <i>b</i> and
initialized to 3,

18
00:01:08,063 --> 00:01:11,838
and that I called <i>f(b)</i>,

19
00:01:12,370 --> 00:01:16,245
then <i>b</i> was passed by reference
to the function <i>f</i>

20
00:01:16,251 --> 00:01:19,976
through the variable <i>a</i>,
a parameter of function <i>f</i>.

21
00:01:20,462 --> 00:01:23,002
This passing by reference
means that

22
00:01:23,002 --> 00:01:29,582
it is the same object that is referred
to inside and outside the function.

23
00:01:29,582 --> 00:01:33,511
This is what it means to
pass by reference.

24
00:01:33,511 --> 00:01:37,068
The general syntax for declaring
a reference is the following.

25
00:01:37,381 --> 00:01:39,905
We can generalize
this syntax, used

26
00:01:40,166 --> 00:01:43,062
for passing arguments by
reference to functions,

27
00:01:43,062 --> 00:01:47,196
by adding a & symbol after the type
and the name of the reference.

28
00:01:47,196 --> 00:01:49,406
It is not a new variable.

29
00:01:49,602 --> 00:01:52,329
It is just a new label for a variable
which already exists.

30
00:01:52,329 --> 00:01:55,851
Here, we link it to an identifier.

31
00:01:55,851 --> 00:02:01,950
If I go back to a previous example,
with a variable named <i>val</i>

32
00:02:01,950 --> 00:02:05,992
of int type, containing
a value of 1.

33
00:02:06,078 --> 00:02:07,813
Now, I can declare

34
00:02:07,813 --> 00:02:13,170
a reference which I will
call <i>x</i>

35
00:02:13,170 --> 00:02:18,664
and which is just another
name for the variable <i>val</i>.

36
00:02:18,664 --> 00:02:23,665
This declaration, this
syntax, means that

37
00:02:23,665 --> 00:02:28,472
<i>x</i> is another name for
the variable <i>val</i>

38
00:02:28,472 --> 00:02:30,968
It does not create a new variable <i>x</i>

39
00:02:30,968 --> 00:02:35,068
in which I would copy <i>val</i>,
but it creates a new flag,

40
00:02:35,068 --> 00:02:37,554
a new name,
a new label,

41
00:02:37,554 --> 00:02:42,240
for something that already exists
in memory, that is, the variable <i>val</i>.

42
00:02:43,080 --> 00:02:49,059
From now on, I can refer to this variable
by the name <i>x</i> or by <i>val</i>.

43
00:02:49,545 --> 00:02:53,554
These two names will indicate
the same variable.

44
00:02:53,554 --> 00:02:55,821
So be careful of possible
confusions and traps

45
00:02:55,821 --> 00:02:58,993
linked to the fact that a reference
is not a variable.

46
00:02:58,993 --> 00:03:01,813
It is just a label on a variable.

47
00:03:01,813 --> 00:03:04,713
For example, the <i>=</i> sign can be a trap.

48
00:03:05,690 --> 00:03:08,346
Let's compare two fairly
similar pieces of code

49
00:03:08,346 --> 00:03:12,987
where we have a variable <i>i</i>
initialized to 3

50
00:03:12,987 --> 00:03:19,592
and a reference <i>j</i>
which is a reference, an alias of <i>i</i>,

51
00:03:19,592 --> 00:03:22,895
and the other case, where we have
a second variable <i>j</i>.

52
00:03:23,260 --> 00:03:24,768
What will happen?

53
00:03:24,768 --> 00:03:28,231
In both cases, we have
a variable <i>i</i>

54
00:03:28,231 --> 00:03:32,753
which is initialized and
contains a value of 3.

55
00:03:32,753 --> 00:03:39,373
In the case of the reference, we also
have a reference <i>j</i>,

56
00:03:39,637 --> 00:03:41,664
that is, another name for the
same variable,

57
00:03:41,664 --> 00:03:44,510
for the same memory area.

58
00:03:44,510 --> 00:03:49,826
In the right-hand side case,
we have a variable <i>j</i>

59
00:03:49,826 --> 00:03:55,034
which is very different from the
other case.

60
00:03:55,034 --> 00:03:59,241
In this case, what will happen is that
we initialize <i>j</i> with the value of <i>i</i>.

61
00:03:59,241 --> 00:04:03,140
We copy the value of <i>i</i> into <i>j</i>.

62
00:04:03,294 --> 00:04:06,341
Whereas in the left-hand side case,
in the reference case,

63
00:04:06,471 --> 00:04:10,077
it is the same object, the
same variable which is referenced.

64
00:04:10,407 --> 00:04:14,791
This means that if we assign
4 to i

65
00:04:15,342 --> 00:04:18,703
in the case of the reference,
what will happen

66
00:04:18,703 --> 00:04:23,907
is that both <i>i</i> and <i>j</i> will
have a value of 4.

67
00:04:23,907 --> 00:04:26,062
<i>j</i> will also have a value
of 4.

68
00:04:26,062 --> 00:04:30,735
Whereas in the right-hand side case,
we only have <i>i</i> here;

69
00:04:30,735 --> 00:04:34,330
once the copy has been done,
this arrow should not be here anymore.

70
00:04:34,729 --> 00:04:35,816
The copy is over.

71
00:04:36,251 --> 00:04:39,569
So, it is <i>i</i> and only <i>i</i>
which has a value of 4.

72
00:04:39,569 --> 00:04:43,020
<i>j</i> still has a value of 3.

73
00:04:43,450 --> 00:04:49,555
Similarly, if we modify <i>j</i>,
in the reference case,

74
00:04:49,555 --> 00:04:54,040
modifying <i>j</i> also modifies <i>i</i>.

75
00:04:54,555 --> 00:04:58,718
So here, if I modify <i>j</i>, then 
<i>i</i> will also have a value of 6.

76
00:04:58,718 --> 00:05:02,347
Whereas in the case of two completely
different variables,

77
00:05:02,347 --> 00:05:10,975
modifying <i>j</i> will not modify <i>i</i>
and so <i>i</i> still has a value of 4.

78
00:05:12,247 --> 00:05:15,390
Second little trap that can often
lead to confusion:

79
00:05:15,397 --> 00:05:17,377
the meaning of <i>const</i>.

80
00:05:17,377 --> 00:05:19,977
We have already insisted several times
on the fact that <i>const</i> means

81
00:05:20,202 --> 00:05:22,530
that modifications are
impossible through the

82
00:05:22,530 --> 00:05:24,193
object which we described
as <i>const</i>.

83
00:05:24,193 --> 00:05:26,742
But this object can be modified
from elsewhere.

84
00:05:26,742 --> 00:05:29,263
This is the case with references.

85
00:05:29,263 --> 00:05:33,091
Let's look at it with an integer <i>i</i>

86
00:05:33,091 --> 00:05:35,975
initialized with a value of 3.

87
00:05:35,975 --> 00:05:43,958
Here, we declare a <i>const</i> reference
on <i>i</i>

88
00:05:44,245 --> 00:05:47,295
which we name <i>j</i>.
In other words, we have

89
00:05:47,295 --> 00:05:51,348
defined another name, another flag,
another label.

90
00:05:51,348 --> 00:05:55,841
Through this label -- I will
draw it thicker --

91
00:05:55,841 --> 00:06:00,209
we cannot modify the content.

92
00:06:00,859 --> 00:06:03,714
This doesn't mean that the content
cannot be modified elsewhere.

93
00:06:04,134 --> 00:06:07,842
If I want to modify the content of
this variable

94
00:06:07,842 --> 00:06:10,478
which is named i and j, for example,

95
00:06:10,478 --> 00:06:12,349
by an assignment with a value
of 12,

96
00:06:12,349 --> 00:06:15,795
I will not be able to. This line will
be forbidden by the compiler.

97
00:06:15,795 --> 00:06:19,449
It is forbidden because, here,
<i>j</i> is <i>const</i>,

98
00:06:19,466 --> 00:06:22,377
which means that I cannot effect
any modification through <i>j</i>.

99
00:06:22,626 --> 00:06:26,589
However, I can still modify this memory
area through <i>i</i>

100
00:06:26,743 --> 00:06:29,658
and I am allowed to do:
<i>i = 12</i>,

101
00:06:29,658 --> 00:06:32,651
which will put 12 in the memory
area <i>i</i>

102
00:06:32,651 --> 00:06:35,600
which is also the memory area
named <i>j</i>.

103
00:06:35,600 --> 00:06:38,758
<i>j</i> also has a value of 12.

104
00:06:39,457 --> 00:06:43,183
To summarize, it is important
to realize that the keyword,

105
00:06:43,659 --> 00:06:47,818
the reserved word <i>const</i> applies
to the object, 

106
00:06:47,818 --> 00:06:50,338
to the name we are talking about
and not necessarily

107
00:06:50,338 --> 00:06:52,459
to the object in memory behind it.

108
00:06:52,459 --> 00:06:55,882
It applies to the object only through
this name

109
00:06:55,882 --> 00:06:59,146
and not to the object itself.

110
00:06:59,486 --> 00:07:01,253
I said in the introduction sequence

111
00:07:01,253 --> 00:07:03,308
that references were
not real pointers

112
00:07:03,308 --> 00:07:05,579
as such, and that they
were quite different objects.

113
00:07:05,579 --> 00:07:08,433
This is why, incidentally, they have a
different name, "references".

114
00:07:08,637 --> 00:07:12,730
So I would like to insist on the
specifics of these references.

115
00:07:13,151 --> 00:07:16,806
The first of these is that a reference
must absolutely

116
00:07:16,806 --> 00:07:19,080
always be initialized.

117
00:07:19,088 --> 00:07:21,469
It always refers to an existing object.

118
00:07:21,474 --> 00:07:24,630
A pointer, on the other hand, could
point to something that does not exist.

119
00:07:24,897 --> 00:07:29,727
Here, I declared, again, a variable <i>i</i>
of integer type,

120
00:07:29,727 --> 00:07:36,011
and here, I declare a reference <i>ri</i>
on the object, the variable <i>i</i>.

121
00:07:36,011 --> 00:07:38,501
Which means that it is
another name for <i>i</i>.

122
00:07:38,501 --> 00:07:41,708
But I cannot declare a
reference <i>rj</i>

123
00:07:41,708 --> 00:07:43,545
which would be linked to no object.

124
00:07:43,545 --> 00:07:44,672
This is invalid.

125
00:07:44,672 --> 00:07:46,173
To what is it a reference?

126
00:07:46,346 --> 00:07:48,396
We do not know
what it refers to.

127
00:07:48,396 --> 00:07:52,054
We cannot declare references
which refer to nothing.

128
00:07:52,054 --> 00:07:53,622
It would lose all its sense.

129
00:07:54,022 --> 00:07:58,205
Similarly, a reference can be
linked only to one object.

130
00:07:58,515 --> 00:08:00,831
This is another big difference
with pointers.

131
00:08:00,831 --> 00:08:03,792
Let's go back to our example
with the variable <i>i</i>.

132
00:08:03,792 --> 00:08:08,235
Here is a reference <i>ri</i>
which refers to this variable <i>i</i>.

133
00:08:08,235 --> 00:08:13,262
Here, I declare another variable <i>j</i>
initialized to 2.

134
00:08:13,730 --> 00:08:17,794
I cannot use <i>ri</i>, which is
a reference to <i>i</i>.

135
00:08:17,794 --> 00:08:21,016
It is already used. It refers
to an object <i>i</i>.

136
00:08:21,016 --> 00:08:23,806
I cannot move the label to <i>j</i>.

137
00:08:23,806 --> 00:08:28,917
If I draw this, I have the variable
<i>i</i> which contains a value,

138
00:08:28,917 --> 00:08:32,086
we do not know which,
it has not been initialized.

139
00:08:32,966 --> 00:08:36,784
I attached the reference <i>ri</i>
to it.

140
00:08:39,487 --> 00:08:42,111
Then I declared another variable <i>j</i>

141
00:08:42,763 --> 00:08:44,817
which I initialized to 2.

142
00:08:46,196 --> 00:08:52,887
I cannot move a reference, it isn't
possible.

143
00:08:53,333 --> 00:08:55,323
We are not allowed to
do this sort of thing.

144
00:08:55,547 --> 00:09:00,765
However, this line, <i>ri = j</i>, compiles.

145
00:09:00,765 --> 00:09:03,147
It is quite legitimate in C++.

146
00:09:03,147 --> 00:09:04,964
What does this do now?

147
00:09:04,964 --> 00:09:08,453
Let's go back to the fundamentals.
What is <i>ri</i>?

148
00:09:08,453 --> 00:09:10,459
It is another name for <i>i</i>.

149
00:09:10,459 --> 00:09:14,086
It is as if I had written <i>i = j</i>.

150
00:09:15,008 --> 00:09:17,480
If I had written <i>i = j</i>,
what would have happened?

151
00:09:17,596 --> 00:09:23,077
We would have copied the value of <i>j</i>
into <i>i</i> and so here, in the same way,

152
00:09:23,077 --> 00:09:27,291
we will copy the value of <i>j</i> into <i>ri</i>.

153
00:09:27,291 --> 00:09:31,963
So this line here, <i>ri = j</i>,
does not mean

154
00:09:31,963 --> 00:09:36,948
that we move the label of <i>ri</i> to <i>j</i> and
that we have another reference on the object <i>j</i>.

155
00:09:36,948 --> 00:09:40,012
It mean that we are copying
the object <i>j</i>

156
00:09:40,012 --> 00:09:45,260
over to the object which
is named <i>ri</i>.

157
00:09:45,539 --> 00:09:51,246
Proof: if I modify the value of <i>j</i>, for
example if I give it a value of 3,

158
00:09:51,246 --> 00:09:56,804
then if I display the value of <i>i</i>

159
00:09:57,350 --> 00:09:59,459
you will see what will be displayed...

160
00:09:59,638 --> 00:10:01,843
I encourage you to test this
program on your end.

161
00:10:02,073 --> 00:10:03,403
You will see that it will display 2.

162
00:10:03,403 --> 00:10:07,812
2 because it is the value which
we assigned to the variable,

163
00:10:07,812 --> 00:10:10,901
which is named both <i>i</i> and <i>ri</i>.

164
00:10:11,601 --> 00:10:16,254
Third specificity of references: one
cannot refer to a reference.

165
00:10:16,254 --> 00:10:18,873
A reference is not an object
in memory.

166
00:10:18,873 --> 00:10:21,935
It is just an additional label on
an object in memory.

167
00:10:21,935 --> 00:10:27,064
So we cannot get its address, we cannot
refer to such an object.

168
00:10:27,064 --> 00:10:30,972
If I go back once again to our example with
the variable <i>i</i>

169
00:10:30,972 --> 00:10:36,897
which I initialize to 3, and
to which I assign another name.

170
00:10:36,897 --> 00:10:42,756
If I take a reference named <i>ri</i>
which refers to <i>i</i>.

171
00:10:42,756 --> 00:10:44,979
What we are asking ourselves is,
can I take

172
00:10:44,979 --> 00:10:46,967
a reference on the reference <i>ri</i>?

173
00:10:46,967 --> 00:10:49,882
Well, no. <i>ri</i> is not an object as such.

174
00:10:49,882 --> 00:10:54,995
We cannot say that we will take
a reference on a reference.

175
00:10:54,995 --> 00:10:58,236
This does not refer to <i>ri</i> as
pointers would do,

176
00:10:58,236 --> 00:11:00,803
but actually to i, to the variable <i>i</i>.

177
00:11:00,803 --> 00:11:04,908
Even if this line compiles and
makes <i>ri</i>

178
00:11:04,908 --> 00:11:06,733
another reference to <i>i</i>,

179
00:11:06,733 --> 00:11:09,700
it does not do what we
wanted it do to originally.

180
00:11:09,700 --> 00:11:13,844
That is, a reference on the label
<i>ri</i> itself.

181
00:11:13,844 --> 00:11:17,298
Even if I changed the type
to say that I wanted

182
00:11:17,298 --> 00:11:19,715
a reference on a reference,
this wouldn't work.

183
00:11:19,779 --> 00:11:21,372
We are not allowed to do that
either.

184
00:11:21,617 --> 00:11:23,952
It is just as wrong, since
this label <i>ri</i>

185
00:11:24,155 --> 00:11:25,328
does not really exist.

186
00:11:25,550 --> 00:11:27,865
It is not an actual variable
in memory.

187
00:11:27,865 --> 00:11:33,109
<i>ri</i> is just another name for
a variable which already existed.

188
00:11:33,109 --> 00:11:35,270
The consequence of all this,

189
00:11:35,270 --> 00:11:37,347
is that we cannot make
arrays of references.

190
00:11:37,495 --> 00:11:40,572
We cannot put references into
an array.

191
00:11:40,779 --> 00:11:45,465
I have an advanced remark however:
the syntax <i>int&&</i>

192
00:11:45,465 --> 00:11:47,294
with two ampersands

193
00:11:47,294 --> 00:11:51,059
exists since C++2011, but it is not at all
a reference on a reference.

194
00:11:51,401 --> 00:11:54,758
It is a much more advanced concept
introduced in this new standard

195
00:11:54,758 --> 00:11:58,881
which is an rvalue reference.

196
00:11:58,881 --> 00:12:00,693
This is much too advanced for
this course

197
00:12:00,693 --> 00:12:03,090
and will not be covered here.
