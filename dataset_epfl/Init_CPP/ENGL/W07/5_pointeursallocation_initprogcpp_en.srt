1
00:00:02,839 --> 00:00:05,609
In the introduction episode on
pointers, you learned

2
00:00:05,609 --> 00:00:08,779
that they serve essentially three
purposes: they allow

3
00:00:08,779 --> 00:00:11,669
referencing, that is, to point
indirectly to a memory area;

4
00:00:11,669 --> 00:00:15,009
genericity, to choose, to select
an element that is unknown

5
00:00:15,009 --> 00:00:18,049
at the time of programming; and finally,
they can also be used for what we call

6
00:00:18,049 --> 00:00:21,079
dynamic allocation. This is what
we will focus on now.

7
00:00:22,504 --> 00:00:24,914
When a program needs to manipulate
data, it will have

8
00:00:24,914 --> 00:00:28,714
to allocate memory to store this data.

9
00:00:28,714 --> 00:00:33,224
And in C++, you have two ways of
allocating memory.

10
00:00:33,224 --> 00:00:36,474
The first, which you already know, is
what you do

11
00:00:36,474 --> 00:00:40,004
when you write a line of code like this
one, a variable declaration.

12
00:00:40,004 --> 00:00:43,544
At this moment, a so-called static
allocation is made.

13
00:00:44,284 --> 00:00:45,774
Why static?

14
00:00:45,954 --> 00:00:48,144
This means that we do
not need

15
00:00:48,144 --> 00:00:51,534
to wait for the execution of the program
to know the memory requirements.

16
00:00:51,534 --> 00:00:54,704
Here, when we compile this line of code,
we already know

17
00:00:54,704 --> 00:00:57,614
that the program will need a
memory area dedicated

18
00:00:57,614 --> 00:01:00,224
to storing an integer, and which
is named v.

19
00:01:01,204 --> 00:01:05,204
There are however situations where
the memory requirements are known

20
00:01:05,204 --> 00:01:07,464
only when the program is executed.

21
00:01:07,464 --> 00:01:10,614
And a typical example is linked
to the use of dynamic arrays

22
00:01:10,614 --> 00:01:13,384
of <i>vector</i> type, which
you have already encountered.

23
00:01:13,384 --> 00:01:16,944
Suppose that we come across a
vector of integers v, in our program.

24
00:01:16,944 --> 00:01:22,294
I can easily add, during execution
of the program,

25
00:01:22,294 --> 00:01:26,294
a new element, a new cell to my
array, using a line

26
00:01:26,297 --> 00:01:27,487
such as this one.

27
00:01:27,919 --> 00:01:33,039
At the moment I execute this line of code,
this routine

28
00:01:33,039 --> 00:01:37,039
will allocate the memory necessary
to store this new integer.

29
00:01:37,039 --> 00:01:40,789
So it is only at the time that this
line is executed that allocation

30
00:01:40,789 --> 00:01:44,559
happens, that the new memory area
is reserved for the needs

31
00:01:44,559 --> 00:01:45,859
of your program.

32
00:01:46,269 --> 00:01:51,349
So of course in this case, we speak
of dynamic allocation,

33
00:01:52,179 --> 00:01:55,709
because we need to wait for the
program's execution,

34
00:01:55,929 --> 00:02:00,009
and not just its compilation, to know
the memory needs.

35
00:02:00,909 --> 00:02:03,999
Why? Well, we aren't sure that
this line will necessarily be executed,

36
00:02:03,999 --> 00:02:07,479
so we cannot, at compilation time,

37
00:02:07,479 --> 00:02:10,839
know what memory area to reserve.
We must wait for execution.

38
00:02:11,976 --> 00:02:15,331
Here, the memory area that we
allocated dynamically via the push_back statement

39
00:02:15,331 --> 00:02:18,481
was allocated to contain a value of 3,
and we are thus

40
00:02:18,481 --> 00:02:19,701
in this situation.

41
00:02:21,244 --> 00:02:24,764
Note that in the case of pointers,
dynamic allocation

42
00:02:24,764 --> 00:02:28,184
allows us to manipulate data without
them having to be associated

43
00:02:28,184 --> 00:02:31,544
with explicit names -- they don't have
to correspond to variables.

44
00:02:32,113 --> 00:02:36,113
For example if, in a program, we have
declared a pointer named px,

45
00:02:36,113 --> 00:02:40,463
it can easily store the address of an
object that we allocated dynamically

46
00:02:40,463 --> 00:02:43,253
during the program's execution.

47
00:02:43,253 --> 00:02:48,213
We can absolutely store the address of
the new object in this pointer.

48
00:02:49,623 --> 00:02:52,733
And what we notice
is that it is not necessary

49
00:02:52,733 --> 00:02:54,613
for this object to have a name.

50
00:02:56,289 --> 00:03:00,289
We can simply access it via
its associated pointer.

51
00:03:01,298 --> 00:03:04,018
Basically, if you want to do dynamic
allocation

52
00:03:04,018 --> 00:03:07,478
in a C++ program, then you can
use two operators

53
00:03:07,478 --> 00:03:11,478
defined by the language: the <i>new</i>
operator which allows you to allocate

54
00:03:11,478 --> 00:03:15,718
the memory you need, and the <i>delete</i>
operator, its converse, which

55
00:03:15,718 --> 00:03:19,478
allows you to free this memory once
you do not need it anymore in your program.

56
00:03:20,747 --> 00:03:24,747
Usage of the <i>new</i> operator
follows this syntax:

57
00:03:24,747 --> 00:03:27,847
one writes the name of a pointer
which will

58
00:03:27,847 --> 00:03:31,547
store the address, and one uses
the following syntax:

59
00:03:31,547 --> 00:03:34,017
<i>new</i> followed by a type name.

60
00:03:34,017 --> 00:03:39,587
This will reserve a memory area capable

61
00:03:39,587 --> 00:03:43,547
of storing data of this type,
and will return the address

62
00:03:43,547 --> 00:03:47,127
of this memory area, allowing it to be assigned
to the pointer.

63
00:03:49,267 --> 00:03:51,127
Let's look at a real situation.
Imagine, for example,

64
00:03:51,127 --> 00:03:53,877
that a program contains the following
line of code:

65
00:03:53,877 --> 00:03:57,267
this line declares a pointer capable

66
00:03:57,267 --> 00:03:58,487
of pointing to an integer.

67
00:03:58,487 --> 00:04:02,327
So I will now use the syntax
that we have just seen

68
00:04:02,327 --> 00:04:03,927
to do dynamic allocation.

69
00:04:03,927 --> 00:04:05,787
So I take the name of my pointer

70
00:04:07,275 --> 00:04:11,275
and I write px, followed by "="

71
00:04:12,973 --> 00:04:18,013
and followed by my new
little instruction: "new <i>type</i>;".

72
00:04:18,273 --> 00:04:22,273
Here, my pointer is a pointer to an
integer,

73
00:04:22,273 --> 00:04:26,023
so "type", corresponding to the type to
which my pointer can point,

74
00:04:26,023 --> 00:04:28,983
will be "int".

75
00:04:28,983 --> 00:04:32,983
What I have just done is what
we call dynamic allocation.

76
00:04:33,186 --> 00:04:36,296
So, how will this happen, really?

77
00:04:36,296 --> 00:04:38,786
When you compile this line of code,

78
00:04:39,485 --> 00:04:43,745
-- compile, not execute -- you will have
a static allocation

79
00:04:44,435 --> 00:04:49,455
for a variable of pointer type, named px,
and capable of storing

80
00:04:49,455 --> 00:04:50,955
the address of an integer.

81
00:04:51,280 --> 00:04:55,280
However, it is at the moment you execute
this line of code that you

82
00:04:55,280 --> 00:04:57,900
will have a dynamic allocation.

83
00:04:58,640 --> 00:05:04,050
And at that moment, you will have allocated
a memory area for an integer,

84
00:05:04,050 --> 00:05:07,010
which is this area.
This area will have an address,

85
00:05:07,010 --> 00:05:11,950
and it is precisely this address
that you will store in px like so.

86
00:05:14,808 --> 00:05:16,748
So this happens at the moment...

87
00:05:17,308 --> 00:05:19,068
So what we have here is
a static allocation.

88
00:05:23,663 --> 00:05:26,563
However here, you have
a dynamic allocation.

89
00:05:29,575 --> 00:05:33,835
It is this instruction, the "new int",
which allows this,

90
00:05:33,835 --> 00:05:35,235
which effects this allocation

91
00:05:37,158 --> 00:05:40,898
If we use this syntax to do dynamic
allocation,

92
00:05:40,898 --> 00:05:44,538
the newly allocated area is reserved,
indeed, but it does not contain any value.

93
00:05:44,538 --> 00:05:48,508
So if, when we allocate memory, we
also want to assign a value

94
00:05:48,508 --> 00:05:51,778
in the memory area, we must use
the following option:

95
00:05:52,608 --> 00:05:54,698
for an instruction for dynamic allocation.

96
00:05:54,698 --> 00:05:57,718
If we refer to the example we used
earlier,

97
00:05:57,718 --> 00:06:01,718
so for example if I have a px pointer
declared in a program,

98
00:06:01,898 --> 00:06:05,898
we can use this variant of the dynamic
allocation instruction.

99
00:06:05,898 --> 00:06:06,918
Like so.

100
00:06:07,969 --> 00:06:13,469
We write "px = new int;". So, I
reserve a memory area for an integer

101
00:06:13,469 --> 00:06:16,589
and I put a value in it,
for example a value of 3.

102
00:06:17,575 --> 00:06:21,165
When this line of code is executed,
this will

103
00:06:21,165 --> 00:06:26,255
reserve a memory area for an integer,
which is what "new int;" means.

104
00:06:30,067 --> 00:06:33,057
We put a value in it, that is, 3.

105
00:06:33,448 --> 00:06:38,008
"new int(3)" returns the address
of the newly-allocated area,

106
00:06:38,008 --> 00:06:41,851
and the assignment will make sure
that this address is copied into px.

107
00:06:46,011 --> 00:06:49,031
You now know how to allocate
memory dynamically.

108
00:06:49,031 --> 00:06:51,811
What should you do to free this memory
when you do not need it anymore?

109
00:06:51,811 --> 00:06:54,681
Actually, first, why is it necessary
to free this memory?

110
00:06:55,392 --> 00:06:59,212
Let's take another real example.
Imagine that in a program,

111
00:07:00,592 --> 00:07:01,682
in a bloc,

112
00:07:01,889 --> 00:07:05,099
I declare a variable
which I use in that bloc.

113
00:07:06,826 --> 00:07:09,716
I obviously use static allocation.

114
00:07:10,629 --> 00:07:13,419
Since I am declaring a
variable,

115
00:07:13,419 --> 00:07:16,649
I can know my memory requirements
at compile time.

116
00:07:16,943 --> 00:07:20,333
We know, thanks to the notion of
scope, that this variable

117
00:07:20,333 --> 00:07:22,323
is not accessible outside of this bloc.

118
00:07:22,323 --> 00:07:25,443
So, when we execute this set
of instructions,

119
00:07:25,443 --> 00:07:29,128
and we reach the end of this bloc,
then we know that this variable v

120
00:07:29,128 --> 00:07:32,183
will never be used again.
And so, statically-allocated variables

121
00:07:32,183 --> 00:07:35,432
have the property

122
00:07:35,432 --> 00:07:39,132
of being deallocated automatically.

123
00:07:40,747 --> 00:07:43,657
You do not need to worry about
what will become

124
00:07:43,657 --> 00:07:45,867
of the memory area which is, here,
no longer accessible.

125
00:07:47,674 --> 00:07:50,024
Let's look at an analogous example
but where, this time,

126
00:07:50,024 --> 00:07:52,664
we use dynamic allocation.
So here, say I declare, for example,

127
00:07:52,664 --> 00:07:55,664
a pointer px.

128
00:07:56,127 --> 00:07:58,037
Then, in a bloc,

129
00:07:59,892 --> 00:08:04,182
I decide to dynamically allocate
memory that I retrieve

130
00:08:05,258 --> 00:08:06,918
in the px pointer.

131
00:08:07,585 --> 00:08:10,415
What is important to note here is
that the memory area

132
00:08:10,415 --> 00:08:14,415
that you have just allocated
is not destroyed, it is not freed

133
00:08:14,415 --> 00:08:16,745
as long as you have not
done it explicitely.

134
00:08:16,745 --> 00:08:20,005
So, when we reach the end of this
bloc here during execution, this memory

135
00:08:20,005 --> 00:08:24,005
area stays totally accessible as long
as you do not deallocate it.

136
00:08:24,005 --> 00:08:26,665
This is what makes it possible
for dynamic allocation to

137
00:08:26,665 --> 00:08:31,845
create memory areas which have a
lifespan greater than the scope

138
00:08:31,845 --> 00:08:33,635
in which they were created.

139
00:08:33,635 --> 00:08:36,815
And if, at any given time, we wish to
free this area,

140
00:08:36,815 --> 00:08:40,775
it is up to us to do it explicitly
and for that, we will need to use

141
00:08:40,775 --> 00:08:46,235
the <i>delete</i> operator.
So for example, I can decide after this bloc

142
00:08:46,545 --> 00:08:51,375
that I do not need this memory area
anymore, and I can free

143
00:08:51,375 --> 00:08:54,632
the area by calling <i>delete</i> on
its associated pointer.

144
00:08:55,925 --> 00:08:59,625
Basically, imagine that in a program,
you have a px pointer

145
00:08:59,625 --> 00:09:02,495
that points to a dynamically-allocated
memory area.

146
00:09:02,495 --> 00:09:05,585
Imagine that this memory area contains
3, and of course

147
00:09:05,585 --> 00:09:08,025
px contains the address
of this area.

148
00:09:08,156 --> 00:09:11,966
What happens when we free
memory

149
00:09:11,966 --> 00:09:16,485
by deallocating the memory area
associated to px by using this statement?

150
00:09:17,664 --> 00:09:20,514
Remember the little analogy with
the houses on a piece of land.

151
00:09:20,514 --> 00:09:22,504
well, when we call <i>delete</i>,
we destroy the house.

152
00:09:22,504 --> 00:09:25,874
Which means, really, that the contents
of this memory area

153
00:09:26,079 --> 00:09:30,329
are no longer predictable and can no
longer be used safely by the program.

154
00:09:30,329 --> 00:09:32,995
Your value of 3 might well stay
there for a little while,

155
00:09:32,995 --> 00:09:35,661
but you cannot be sure, you
cannot predict

156
00:09:35,661 --> 00:09:38,329
what the contents of this memory area
will be.

157
00:09:38,411 --> 00:09:43,421
So we see here that by simply
using delete px, we are in a situation

158
00:09:43,421 --> 00:09:47,181
where this memory area no longer
has usable content.

159
00:09:47,222 --> 00:09:50,432
However, of course, the address
still exists in memory

160
00:09:51,298 --> 00:09:54,568
And this address is still stored, at
this point, in the px pointer.

161
00:09:54,568 --> 00:09:58,058
So this justifies one of the guidelines which
I highly recommend that you follow:

162
00:09:58,058 --> 00:10:01,538
that every <i>delete</i> instruction
must be followed

163
00:10:01,538 --> 00:10:03,688
by the instruction, "pointer = nullptr;".

164
00:10:03,688 --> 00:10:09,348
Which will translate to something like
"px = nullptr;".

165
00:10:09,575 --> 00:10:12,705
This means that you are explicitly
saying that, as of that moment,

166
00:10:12,705 --> 00:10:17,411
px points to nothing valid and you do
not keep,

167
00:10:17,411 --> 00:10:22,161
within px, an address which means
nothing for the program

168
00:10:22,161 --> 00:10:24,801
which cannot be used safely
for the program.

169
00:10:26,678 --> 00:10:30,608
To summarize dynamic allocation,
and to return to our little analogy

170
00:10:30,608 --> 00:10:33,008
of the address book, what I am doing

171
00:10:33,028 --> 00:10:35,868
when I execute a statement
such as this one,

172
00:10:36,585 --> 00:10:40,745
is to add a new page to my address
book, a page named ptr.

173
00:10:42,116 --> 00:10:45,856
What exactly am I putting on this ptr
page? Well, I am writing down the address

174
00:10:45,856 --> 00:10:47,766
of this dynamically-allocated area.

175
00:10:47,766 --> 00:10:51,766
So allocation can be viewed, in the context
of the address book,

176
00:10:51,766 --> 00:10:57,766
as reservation of land, of the memory
area that will store the value.

177
00:10:58,816 --> 00:11:02,056
I build a house on this land; we can
see this house as being

178
00:11:02,056 --> 00:11:04,806
a bit like the value 3 that I am storing
in the int memory area.

179
00:11:05,904 --> 00:11:09,344
And what is returned is the address
of this memory area,

180
00:11:09,344 --> 00:11:11,494
which I am storing in my address book.

181
00:11:12,564 --> 00:11:16,564
I can, in a program, allocate memory
areas dynamically

182
00:11:16,564 --> 00:11:19,854
for any type of data, and it is
up to the programmer to make sure

183
00:11:19,854 --> 00:11:23,324
to free the memory area once
he needs it no more.

184
00:11:23,324 --> 00:11:26,774
For example, if I do not need
this memory area anymore

185
00:11:26,774 --> 00:11:34,454
then what I must do is to call
<i>delete ptr</i>

186
00:11:34,454 --> 00:11:36,837
to deallocate, to free the memory area.

187
00:11:36,957 --> 00:11:43,407
This means that my land no longer
contains any usable data.

188
00:11:45,203 --> 00:11:48,523
And that it is now available

189
00:11:51,539 --> 00:11:52,919
to anyone else.

190
00:11:55,605 --> 00:11:58,315
If I simply do this, then

191
00:11:58,315 --> 00:12:01,895
in my address book, I will still
have the address of this piece of land

192
00:12:01,895 --> 00:12:03,985
which is for sale, which is available
to someone else.

193
00:12:03,985 --> 00:12:07,545
So, I must absolutely take care
to indicate

194
00:12:07,545 --> 00:12:13,465
that ptr no longer points to anything
by assigning nullptr to it.

195
00:12:14,094 --> 00:12:18,984
This is analogous to removing the
page from my address book.

196
00:12:18,984 --> 00:12:20,324
I am deleting this link,

197
00:12:22,693 --> 00:12:24,963
which is no longer relevant
or useful.

198
00:12:26,025 --> 00:12:30,275
If however we assign the nullptr value
without having first deallocated

199
00:12:30,275 --> 00:12:33,195
the linked memory area, we
will end up in

200
00:12:33,195 --> 00:12:34,335
the following situation

201
00:12:34,335 --> 00:12:36,535
Suppose that on the analog
of this page from the

202
00:12:36,535 --> 00:12:43,555
address book, we wrote "ptr3 = nullptr;".

203
00:12:44,335 --> 00:12:49,075
Well, we know now that this means
that we are erasing this page

204
00:12:49,075 --> 00:12:52,025
and that the link to this area is lost.

205
00:12:52,096 --> 00:12:55,896
This means that I cannot access
it anymore via this page

206
00:12:55,896 --> 00:12:58,466
from my address book, but
that the area itself is intact.

207
00:12:58,466 --> 00:13:03,726
The land is not made available to anyone else,
and is left as-is.

208
00:13:03,726 --> 00:13:09,136
So if, for example, no other page from
my address book references

209
00:13:09,136 --> 00:13:12,866
this memory area, then this area is
lost, it cannot be reused

210
00:13:12,866 --> 00:13:16,316
in my program. It is not available
for reuse

211
00:13:16,316 --> 00:13:18,646
and this causes what is known as a
memory leak.

212
00:13:18,646 --> 00:13:21,826
This is something that must absolutely
be avoided in any program.

213
00:13:24,261 --> 00:13:27,991
To end on good practices: Any 
memory area that was allocated dynamically,

214
00:13:27,991 --> 00:13:32,881
i.e, that was made using <i>new</i>,
must imperatively be deallocated,

215
00:13:32,881 --> 00:13:35,551
as we discussed earlier. Indeed,
a memory area that was

216
00:13:35,551 --> 00:13:39,361
allocated dynamically is not freed

217
00:13:39,361 --> 00:13:40,841
until we do it explicitely.

218
00:13:42,678 --> 00:13:45,478
There, now you know a lot of
essential information

219
00:13:45,478 --> 00:13:48,688
about pointers and we will summarize
all of this with a small example

220
00:13:48,688 --> 00:13:51,288
Here is a program we will go
over step-by-step.

221
00:13:51,288 --> 00:13:57,978
Here, we declare a variable px
which is a pointer

222
00:13:57,978 --> 00:14:01,268
that can point to an integer, and I
take the precaution

223
00:14:01,268 --> 00:14:05,268
of initializing it to nullptr,
which means that it points to nothing.

224
00:14:05,898 --> 00:14:07,268
Second line of code,

225
00:14:07,323 --> 00:14:10,483
there is a dynamic allocation.
This dynamic allocation reserves

226
00:14:10,483 --> 00:14:13,913
a memory area capable of
storing an integer.

227
00:14:14,191 --> 00:14:17,766
And this memory area has an address,

228
00:14:17,766 --> 00:14:22,696
and this address is returned by the
execution of "new int".

229
00:14:22,696 --> 00:14:24,906
This is the address I will
assign to px.

230
00:14:26,537 --> 00:14:29,897
So now, I am making the px pointer
point to this

231
00:14:29,897 --> 00:14:31,337
newly allocated memory area.

232
00:14:31,403 --> 00:14:33,123
Then, third instruction.

233
00:14:33,594 --> 00:14:38,344
I use the famous little star to access
the content pointer to by px.

234
00:14:38,695 --> 00:14:40,955
The content pointed to by
px is this.

235
00:14:41,023 --> 00:14:44,613
In this pointed-to content, I will
store the value 20,

236
00:14:44,613 --> 00:14:45,884
which corresponds to this.

237
00:14:46,880 --> 00:14:50,940
Then, I want to make sure that
I have stored the right value

238
00:14:50,940 --> 00:14:53,600
in this memory area, and so I
want to display its contents.

239
00:14:53,600 --> 00:14:58,480
Once again, I access the content that
px points to with the star operator,

240
00:14:58,480 --> 00:15:04,150
and this will simply display the value 20,
followed by a newline,

241
00:15:04,150 --> 00:15:05,640
a line break.

242
00:15:05,640 --> 00:15:08,130
Then, I suppose that I no longer need

243
00:15:09,746 --> 00:15:12,716
my memory area, and so I call
delete,

244
00:15:12,716 --> 00:15:16,626
which means that this memory area
no longer has any usable content.

245
00:15:16,781 --> 00:15:21,211
And I want to make sure that px
doesn't point towards obsolete content,

246
00:15:21,211 --> 00:15:25,461
that it doesn't point to an address that
cannot be used safely and so,

247
00:15:25,461 --> 00:15:29,461
once again, I assign nullptr
to the pointer's value.

248
00:15:31,592 --> 00:15:34,392
The first version of the program that
we have examined can be written

249
00:15:34,392 --> 00:15:38,522
in a more concise way, given that these
two instructions, which consist

250
00:15:38,522 --> 00:15:41,872
in allocating memory and storing
a value within it,

251
00:15:41,872 --> 00:15:45,872
can actually be written as a single line
with this syntax.

252
00:15:48,180 --> 00:15:52,440
To make it shorter still, I can replace
these two lines of code

253
00:15:52,440 --> 00:15:54,920
by a single line, this one.

254
00:15:54,920 --> 00:15:58,560
In this line, I start by declaring
the pointer,

255
00:15:58,560 --> 00:16:02,920
except that instead of starting by
initializing it to nullptr and then

256
00:16:02,920 --> 00:16:06,580
assigning to it the result of
"new int(20)", I simply

257
00:16:06,580 --> 00:16:09,290
put the value of "new int(20)"
directly into px.

258
00:16:09,290 --> 00:16:11,590
This means that I spare one
statement.

259
00:16:13,242 --> 00:16:15,872
When you write your first
programs with pointers,

260
00:16:15,872 --> 00:16:18,912
and even for the following ones, it
is likely that, from time to time,

261
00:16:18,912 --> 00:16:22,022
you will encounter a dreadful error,
the "segmentation fault", which will cause

262
00:16:22,022 --> 00:16:24,822
your program to crash.
What is it?

263
00:16:26,359 --> 00:16:29,459
Typically, "segmentation fault"-type
errors will occur

264
00:16:29,459 --> 00:16:31,859
when we try, via a pointer,
to access a memory area

265
00:16:31,859 --> 00:16:33,259
which was not reserved.

266
00:16:33,259 --> 00:16:37,779
If we look at this example,
this statement

267
00:16:37,779 --> 00:16:40,729
declares a px pointer but does not
reserve any allocated memory area.

268
00:16:40,729 --> 00:16:43,189
There is no initialization,
no new, no nothing.

269
00:16:43,189 --> 00:16:47,019
So here, the contents of px are unknown
and here, what we are trying to do

270
00:16:47,019 --> 00:16:51,539
is to access the content pointed
to by px,

271
00:16:51,539 --> 00:16:53,012
which does not exist, since we
never allocated it, and

272
00:16:54,485 --> 00:16:55,959
to store a value of 20 in it.

273
00:16:55,959 --> 00:17:00,929
Obviously, this is impossible and
it will result in a segmentation fault

274
00:17:00,929 --> 00:17:04,369
error, causing your program to crash.

275
00:17:05,301 --> 00:17:10,881
The correct solution would of course
be to allocate some memory

276
00:17:11,496 --> 00:17:14,316
to associate to the px pointer,
which is done like so,

277
00:17:14,316 --> 00:17:16,876
at execution time. So we allocate the
memory area, and at that moment,

278
00:17:16,876 --> 00:17:22,066
our px pointer will contain the address of
this newly-allocated

279
00:17:22,066 --> 00:17:23,486
memory area.

280
00:17:23,486 --> 00:17:26,756
So of course, once this memory
area exists, we can

281
00:17:26,756 --> 00:17:31,026
access it with no trouble, to store a 
value of 20 in it.

282
00:17:31,793 --> 00:17:34,743
So now, this statement will execute
without any errors.

283
00:17:36,924 --> 00:17:40,634
We have just seen that it is essential
to allocate before using;

284
00:17:40,634 --> 00:17:43,104
some advice follows,
good practice concerning

285
00:17:43,104 --> 00:17:44,894
initialization of pointers.

286
00:17:44,894 --> 00:17:48,618
It is recommended to always
initialize pointers,

287
00:17:48,618 --> 00:17:50,438
even just to the nullptr value.

288
00:17:50,692 --> 00:17:54,332
Thus, if, when we declare the pointer,
we do not yet know

289
00:17:54,332 --> 00:17:58,722
where it will point to,
it is recommended to initialize it

290
00:17:58,722 --> 00:18:03,182
by using nullptr, which means that
the pointers points to nothing,

291
00:18:03,182 --> 00:18:05,092
but that it is known explicitly.

292
00:18:05,092 --> 00:18:09,162
And thanks to this initialization,
it becomes possible to implement

293
00:18:09,162 --> 00:18:12,522
a certain number of safeguards.
For example, before accessing

294
00:18:12,522 --> 00:18:16,072
a memory area pointed to by
a pointer, I can now

295
00:18:16,072 --> 00:18:20,012
take care to check if this pointer

296
00:18:20,012 --> 00:18:21,931
does indeed point to
something or not.

297
00:18:21,931 --> 00:18:26,501
Thus, it is possible, thanks to this
initialization, to test

298
00:18:26,501 --> 00:18:30,881
whether the pointer points to something
before accessing this area,

299
00:18:30,881 --> 00:18:32,191
as I could do here.

300
00:18:32,191 --> 00:18:35,941
So we see that, thanks to this
initialization, a certain number

301
00:18:35,941 --> 00:18:39,170
of safeguards can be implemented
to protect access to memory areas

302
00:18:39,170 --> 00:18:41,280
pointed to by pointers.
