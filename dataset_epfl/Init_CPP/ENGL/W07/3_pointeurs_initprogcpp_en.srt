1
00:00:05,603 --> 00:00:07,496
We have seen references in detail.

2
00:00:07,496 --> 00:00:09,543
Now, let's pass to real pointers.

3
00:00:09,543 --> 00:00:11,356
The main difference is
that a pointer

4
00:00:11,356 --> 00:00:14,097
is a variable
which actually exists in memory.

5
00:00:14,097 --> 00:00:17,382
It is not just a label for
a variable which already exists,

6
00:00:17,382 --> 00:00:20,203
it is a new variable.

7
00:00:20,203 --> 00:00:24,268
To understand what pointers are,
one must first know that variables,

8
00:00:24,268 --> 00:00:28,082
generally, are identified by
an address in memory.

9
00:00:28,792 --> 00:00:33,087
Suppose, for example, that I have
a variable <i>x</i> which exists in memory

10
00:00:33,087 --> 00:00:35,697
and which contains something,
anything, and that I look

11
00:00:35,697 --> 00:00:40,216
at memory like this as I
go along.

12
00:00:40,216 --> 00:00:42,710
At a certain place, the value of <i>x</i>

13
00:00:42,710 --> 00:00:45,049
will be written to memory
in binary form,

14
00:00:45,049 --> 00:00:47,715
and at another moment it will be
something else, some other variables.

15
00:00:47,715 --> 00:00:53,827
Well, this variable <i>x</i> is
identified by its address,

16
00:00:53,827 --> 00:00:57,139
the place in memory where it begins.

17
00:00:57,139 --> 00:01:00,469
So, we can take the address in
memory of a variable.

18
00:01:00,469 --> 00:01:02,645
And a pointer is just that,
precisely,

19
00:01:03,105 --> 00:01:08,663
it is a variable which contains the
address of another object in memory.

20
00:01:08,663 --> 00:01:12,538
A pointer is simply a variable which contains
the address of another variable.

21
00:01:13,138 --> 00:01:18,699
It is a sort of variable of variables, just
like a bookmark

22
00:01:18,699 --> 00:01:22,207
for a website, which I took as
an example in the introduction,

23
00:01:22,537 --> 00:01:26,532
is the address of a site
which exists elsewhere.

24
00:01:27,122 --> 00:01:28,247
And so this way,

25
00:01:28,247 --> 00:01:31,130
references and pointers are
fundamentally different.

26
00:01:31,130 --> 00:01:34,392
A reference is not a variable which
contains an address,

27
00:01:34,392 --> 00:01:35,805
it is just another label.

28
00:01:35,805 --> 00:01:39,711
There is a big difference between having
another label on the same drawer

29
00:01:39,711 --> 00:01:43,470
and another drawer which contains
the address of something.

30
00:01:43,470 --> 00:01:48,258
A pointer thus has an extra level,
a level of abstraction.

31
00:01:48,258 --> 00:01:51,926
A pointer is really like a book
from an address book.

32
00:01:51,926 --> 00:01:54,978
A page on which we could write only
one address at a time.

33
00:01:55,298 --> 00:01:57,332
And I would now like to
use this analogy

34
00:01:57,332 --> 00:02:00,362
to illustrate a whole bunch
of practical applications

35
00:02:00,362 --> 00:02:03,570
for pointers in programs.

36
00:02:03,930 --> 00:02:07,786
These different cases will be
illustrated with C++ syntax

37
00:02:07,786 --> 00:02:10,207
that you have not encountered
yet and that will be presented

38
00:02:10,207 --> 00:02:11,819
in the next video

39
00:02:11,819 --> 00:02:14,059
which presents the more practical,
technical aspects.

40
00:02:14,059 --> 00:02:15,940
Still, we left them here

41
00:02:15,940 --> 00:02:18,101
in case you might want to
review this video

42
00:02:18,101 --> 00:02:21,583
or review the slides once you will
have learnt about this syntax.

43
00:02:21,583 --> 00:02:23,467
It could be useful.

44
00:02:24,097 --> 00:02:26,934
Let's start with the first case:
declaring a pointer.

45
00:02:26,934 --> 00:02:28,900
I told you that a pointer was
a variable

46
00:02:28,900 --> 00:02:31,363
and so we can declare a pointer.

47
00:02:31,363 --> 00:02:33,361
What does it mean to
declare a pointer?

48
00:02:33,361 --> 00:02:37,808
It just means that we are adding
a page to our address book.

49
00:02:37,808 --> 00:02:40,229
But careful, adding a new page

50
00:02:40,229 --> 00:02:43,059
does not mean that there
is an address written on it.

51
00:02:43,059 --> 00:02:45,853
Adding a new page is just
adding a new page

52
00:02:45,853 --> 00:02:48,870
without specifying what
will be written on it.

53
00:02:48,870 --> 00:02:53,769
There will likely be something written
on it, but we don't know how to interpret it.

54
00:02:53,769 --> 00:02:56,581
Second point:
assigning a pointer.

55
00:02:56,581 --> 00:02:58,545
What does it mean to assign
a pointer?

56
00:02:58,545 --> 00:03:01,859
It means giving an address,

57
00:03:01,859 --> 00:03:05,955
writing an address on the page
of our address book.

58
00:03:05,955 --> 00:03:08,114
We sometimes speak
of allocating a pointer.

59
00:03:08,114 --> 00:03:10,284
What does it mean to allocate
a pointer?

60
00:03:10,284 --> 00:03:14,340
Allocating a pointer means,
to go buy some land somewhere.

61
00:03:14,340 --> 00:03:17,960
It is allocating memory and
building a house in it.

62
00:03:17,960 --> 00:03:24,498
That is, putting a value there
and getting back the address of this house

63
00:03:24,498 --> 00:03:28,893
to copy it onto the page of
our address book.

64
00:03:28,893 --> 00:03:31,648
That's what allocating a pointer means.

65
00:03:32,128 --> 00:03:34,475
But note that here -- this
is a common mistake --

66
00:03:34,475 --> 00:03:38,107
the pointer is neither the
land nor the house.

67
00:03:38,427 --> 00:03:41,012
Those are two completely
different things.

68
00:03:41,372 --> 00:03:44,850
The pointer is just the page
of the address book

69
00:03:44,850 --> 00:03:46,644
which contains the address
of the house.

70
00:03:46,644 --> 00:03:48,786
It is not the house itself.

71
00:03:48,786 --> 00:03:52,743
In other words, the pointer does
not equal the value pointed by it.

72
00:03:52,743 --> 00:03:54,744
Those are two completely
different things.

73
00:03:55,524 --> 00:03:57,994
In the case of the page
of an address book

74
00:03:57,994 --> 00:04:02,419
which contains the address of the land
that we bought, that we allocated,

75
00:04:03,559 --> 00:04:07,460
freeing a pointer 
simply means

76
00:04:07,460 --> 00:04:12,452
that we authorize the memory to
re-use this area,

77
00:04:12,452 --> 00:04:15,260
that this area is no longer
our property

78
00:04:15,260 --> 00:04:19,477
and that it can be re-used
freely somewhere else.

79
00:04:20,367 --> 00:04:22,894
And so this area is no
longer our property.

80
00:04:22,894 --> 00:04:26,907
So careful, freeing a pointer
is actually a misnomer,

81
00:04:26,907 --> 00:04:29,832
it actually means freeing the
land it points to,

82
00:04:29,832 --> 00:04:33,399
it does not mean that we have
erased the page of our address book.

83
00:04:33,399 --> 00:04:37,026
The address is still there, but it is
a common mistake

84
00:04:37,026 --> 00:04:41,144
to reuse the address of a piece of land 
which does not belong to us anymore.

85
00:04:41,144 --> 00:04:42,918
This is why, later on,

86
00:04:42,918 --> 00:04:46,627
we will encourage you to
erase the page of the address book

87
00:04:46,627 --> 00:04:49,351
once you have freed the pointer.

88
00:04:50,211 --> 00:04:53,948
Copying a pointer
is what you do

89
00:04:53,948 --> 00:04:57,623
when you give an address to
someone you know.

90
00:04:57,623 --> 00:05:00,320
When you give an address to
friends,

91
00:05:00,320 --> 00:05:04,801
they copy the address that you give them
into a page of an address book.

92
00:05:04,801 --> 00:05:08,783
They will not copy the house whose
address it is.

93
00:05:08,783 --> 00:05:11,069
You do not give them your house.

94
00:05:11,069 --> 00:05:14,731
You give them only the address,
you copy the address.

95
00:05:14,731 --> 00:05:16,958
That's what it means to copy
a pointer:

96
00:05:16,958 --> 00:05:19,507
it is an exchange of addresses.

97
00:05:19,507 --> 00:05:22,564
And finally, erasing or
cancelling a pointer

98
00:05:22,564 --> 00:05:26,834
simply means that you are
erasing the page of your address book.

99
00:05:26,834 --> 00:05:31,805
Note that if this address was the address
of a piece of land

100
00:05:31,805 --> 00:05:35,569
that we had allocated in memory,

101
00:05:35,569 --> 00:05:42,294
erasing the pointer would not
free this land.

102
00:05:42,294 --> 00:05:45,911
The land is still occupied, it
is still used.

103
00:05:45,911 --> 00:05:50,980
So first, we have to destroy
the pointer before erasing it.

104
00:05:51,970 --> 00:05:55,847
There, I hope this analogy will
help you to use pointers

105
00:05:55,847 --> 00:05:59,022
more easily, to understand
what is going on.

106
00:05:59,742 --> 00:06:01,542
The next video will show you

107
00:06:01,542 --> 00:06:03,778
how to apply this practically

108
00:06:03,778 --> 00:06:06,465
by going into detail on how
to use pointers.
