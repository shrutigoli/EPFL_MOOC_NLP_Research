1
00:00:05,615 --> 00:00:07,671
In this episode, 
we will discuss

2
00:00:07,671 --> 00:00:10,920
a new data type, pointers.

3
00:00:10,920 --> 00:00:13,980
In this first video, we will go over
the general aspects of pointers

4
00:00:13,980 --> 00:00:17,053
and how they are related
to references.

5
00:00:17,053 --> 00:00:18,946
Then, in the next video,

6
00:00:18,946 --> 00:00:21,143
we will present in detail

7
00:00:21,143 --> 00:00:23,463
how to use pointers.

8
00:00:23,463 --> 00:00:26,775
Pointers have the unfortunate reputation
of being considered hard,

9
00:00:26,775 --> 00:00:29,284
whereas this is really not the case.
Actually, you already use pointers

10
00:00:29,284 --> 00:00:31,617
in everyday life, perhaps without
even knowing it.

11
00:00:31,617 --> 00:00:34,831
For example, when you are interested
in a web site,

12
00:00:34,831 --> 00:00:36,314
what do you do?

13
00:00:36,314 --> 00:00:38,614
You will certainly not copy the
entire website

14
00:00:38,614 --> 00:00:42,644
onto your computer, will you?

15
00:00:42,644 --> 00:00:45,077
You do not copy the site.

16
00:00:45,077 --> 00:00:48,051
Instead, in your browser,

17
00:00:48,051 --> 00:00:54,904
you have a bookmark, a link
which will point to the web site.

18
00:00:54,904 --> 00:00:59,015
This web site still exists independently
of this.

19
00:00:59,015 --> 00:01:02,373
Well, a pointer is nothing more 
complicated than a bookmark

20
00:01:02,373 --> 00:01:04,157
in your web browser.

21
00:01:04,157 --> 00:01:08,086
So, in a program, whenever
you want to make a link,

22
00:01:08,086 --> 00:01:12,690
a reference to an object
which exists elsewhere,

23
00:01:12,690 --> 00:01:14,454
-- not a website this time, 

24
00:01:14,757 --> 00:01:17,805
but a variable for example -- in your
program,

25
00:01:17,805 --> 00:01:21,860
you will use a pointer or
a reference.

26
00:01:21,860 --> 00:01:25,967
Any time you want to reference,
to indicate, 

27
00:01:25,967 --> 00:01:29,663
to make a link to another variable
in your program.

28
00:01:30,693 --> 00:01:34,460
Pointers -- I am talking about pointers
in the generic sense, that is,

29
00:01:34,460 --> 00:01:38,871
meaning both real pointers and references,
we will distinguish them later.

30
00:01:38,871 --> 00:01:40,855
So pointers, in a program, serve

31
00:01:40,855 --> 00:01:43,386
essentially three purposes.

32
00:01:43,386 --> 00:01:47,286
First, they can serve as
a reference,

33
00:01:47,286 --> 00:01:50,933
exactly like the example of
a bookmark for a website.

34
00:01:50,933 --> 00:01:55,663
Here is an object drawn in red,
which I will call a.

35
00:01:55,663 --> 00:02:00,613
Say, you want to reference it in
several places

36
00:02:00,613 --> 00:02:02,022
of your program.

37
00:02:02,523 --> 00:02:04,864
For example, in the case of the
website,

38
00:02:04,864 --> 00:02:07,550
a represents a website in
your browser.

39
00:02:07,550 --> 00:02:11,213
In your browser, you
have a link to this site,

40
00:02:11,213 --> 00:02:16,251
and in one of your friends' browser,
there is another link to this site,

41
00:02:16,251 --> 00:02:19,138
and in a third browser belonging
to someone else,

42
00:02:19,138 --> 00:02:22,833
there is also a link to this site.

43
00:02:22,833 --> 00:02:28,089
All of these are pointers, they refer to
the object

44
00:02:28,089 --> 00:02:29,603
that we want to reference.

45
00:02:29,603 --> 00:02:32,397
This is the first use case
of these pointers.

46
00:02:33,018 --> 00:02:35,742
The second use case of pointers
is what I call

47
00:02:35,742 --> 00:02:38,293
using pointers for genericity.

48
00:02:38,293 --> 00:02:42,604
The drawing is kind of symmetric
to the drawing in the reference case.

49
00:02:42,604 --> 00:02:44,843
Here, you have several objects

50
00:02:44,843 --> 00:02:47,831
which you don't necessarily know
in the beginning,

51
00:02:47,831 --> 00:02:52,872
so for example an object a, an object b
and an object c, and you want to describe

52
00:02:52,872 --> 00:02:57,987
these different objects in a
generic way, at a given

53
00:02:57,987 --> 00:03:00,818
moment in your program.
In this case, you will also

54
00:03:00,818 --> 00:03:02,132
use a pointer.

55
00:03:02,132 --> 00:03:06,562
The pointer will, at a certain moment,
point for example to object a.

56
00:03:06,562 --> 00:03:12,550
At another moment, it can point for example
to object b.

57
00:03:12,550 --> 00:03:16,670
Finally, at another point in your program,

58
00:03:16,670 --> 00:03:20,809
the same pointer can point to
object c.

59
00:03:21,141 --> 00:03:23,706
Here's an everyday example
of this:

60
00:03:23,706 --> 00:03:28,736
you have your friend's number, and you
store it in an addressbook.

61
00:03:28,736 --> 00:03:33,121
At that moment, your friend has
a certain number,

62
00:03:33,121 --> 00:03:34,848
but then, he changes operators,

63
00:03:34,848 --> 00:03:37,791
changing phone numbers.
In your address book, 

64
00:03:37,791 --> 00:03:43,637
you will change your friend's phone number
to the new number.

65
00:03:43,637 --> 00:03:46,968
This is what I call using pointers
for genericity.

66
00:03:46,968 --> 00:03:51,001
We have a generic pointer which
describes one or another,

67
00:03:51,001 --> 00:03:53,957
or a third object, at different times

68
00:03:53,957 --> 00:03:55,725
in the program's execution.

69
00:03:56,165 --> 00:04:00,697
The third use case for pointers is 
a little technical.

70
00:04:00,697 --> 00:04:04,122
It relates to what is referred to
technically as scope

71
00:04:04,122 --> 00:04:06,416
and lifespan.

72
00:04:06,416 --> 00:04:09,878
Scope, I will remind you, is the
set of lines of code

73
00:04:09,878 --> 00:04:11,954
in which an object is defined.

74
00:04:11,954 --> 00:04:16,809
Lifespan is the time during which
an object exists in memory

75
00:04:16,809 --> 00:04:18,927
during the execution of the program.

76
00:04:18,927 --> 00:04:21,759
Let's illustrate once again with
a small drawing.

77
00:04:21,759 --> 00:04:24,766
If I represent, on the horizontal axis,

78
00:04:24,766 --> 00:04:29,794
the time during which the program is
executed, 

79
00:04:29,794 --> 00:04:32,264
then at a certain time, the program will
execute a code fragment

80
00:04:32,264 --> 00:04:35,072
contained between curly braces.

81
00:04:35,072 --> 00:04:40,584
If, in this code fragment, I had for example
declared an integer-type variable,

82
00:04:40,584 --> 00:04:44,878
named a, then the lifespan of this
variable would be equal to

83
00:04:44,878 --> 00:04:47,958
the execution time of its
scope.

84
00:04:47,958 --> 00:04:51,619
Its scope, remember, is the block in
which it was defined.

85
00:04:51,619 --> 00:04:55,023
And if I look at the execution of the
program with respect to time,

86
00:04:55,023 --> 00:04:57,624
the lifespan of this variable
is thus equal

87
00:04:57,624 --> 00:04:59,542
to the execution time of its scope.

88
00:04:59,542 --> 00:05:05,250
The compiler will destroy this variable
as soon as

89
00:05:05,250 --> 00:05:08,888
it doesn't need it anymore, i.e as soon
as its scope is finished.

90
00:05:08,888 --> 00:05:13,096
Well, if you want to increase the lifespan
of an object,

91
00:05:13,096 --> 00:05:16,035
-- we will see how to do it exactly later --
if you want an object

92
00:05:16,035 --> 00:05:18,628
to be available in memory

93
00:05:18,628 --> 00:05:22,880
from this moment here, but have
a lifespan

94
00:05:22,880 --> 00:05:24,667
greater than its scope,

95
00:05:24,667 --> 00:05:29,162
then you will use what we call dynamic
memory allocation.

96
00:05:29,162 --> 00:05:32,412
This is the third use case of pointers.

97
00:05:32,412 --> 00:05:36,502
So, to sum up, pointers are used essentially
for three things.

98
00:05:36,502 --> 00:05:40,762
Either an object can be referenced from
several places using pointers,

99
00:05:40,762 --> 00:05:44,607
or one single pointer will point to

100
00:05:44,607 --> 00:05:47,232
different objects at different times,

101
00:05:47,232 --> 00:05:51,517
or we will want to manage
memory ourselves,

102
00:05:51,517 --> 00:05:54,279
to decide what lifespan to give these
objects in memory, using what we call

103
00:05:54,279 --> 00:05:56,100
dynamic memory allocation.

104
00:05:56,100 --> 00:05:59,045
These three ways of using pointers
are not exhaustive, and we can

105
00:05:59,045 --> 00:06:02,273
absolutely combine several, but what
counts is to always keep in mind

106
00:06:02,479 --> 00:06:05,846
the reason, or the reasons, for
which you

107
00:06:05,846 --> 00:06:09,040
want to use a pointer in your
program.

108
00:06:09,650 --> 00:06:13,019
In C++, and especially since
the new C++ 2011 standard,

109
00:06:13,019 --> 00:06:16,343
there are in fact three types
of "pointers".

110
00:06:16,343 --> 00:06:20,330
There are references, which aren't
strictly speaking real pointers

111
00:06:20,330 --> 00:06:24,023
and are actually fundamentally quite different
from real pointers,

112
00:06:24,023 --> 00:06:27,686
in the sense that they are completely
managed by the compiler,

113
00:06:27,686 --> 00:06:30,266
and that they are very secure objects
which are not manipulated

114
00:06:30,266 --> 00:06:33,272
by the programmer himself
but by the compiler.

115
00:06:33,732 --> 00:06:37,841
Then, we have, since the new C++ 2011
standard, intelligent pointers,

116
00:06:37,841 --> 00:06:42,825
so-called <i>smart pointers</i>. And finally we
have the old pointers

117
00:06:42,825 --> 00:06:45,820
inherited from the C language, the ancestor
of C++,

118
00:06:45,820 --> 00:06:49,962
which are very powerful,
all-around pointers.

119
00:06:49,962 --> 00:06:52,328
These are the ones we simply call
pointers

120
00:06:52,328 --> 00:06:54,524
when we don't explicitly specify

121
00:06:54,524 --> 00:06:57,614
which sort of "pointer" we are
talking about.

122
00:06:57,614 --> 00:07:00,439
Before going into detail about
each of these new types,

123
00:07:00,439 --> 00:07:03,549
the question we can ask ourselves
is which ones to use

124
00:07:03,549 --> 00:07:05,047
in which situation.

125
00:07:05,047 --> 00:07:08,596
The general rule is to use references
whenever we can

126
00:07:08,596 --> 00:07:11,658
and to use pointers when
we must.

127
00:07:11,658 --> 00:07:15,770
Let's go over each of the use cases
for pointers again.

128
00:07:16,240 --> 00:07:20,410
In case number one, where we want to use
pointers as references,

129
00:07:20,410 --> 00:07:24,459
then we should of course use real references

130
00:07:24,459 --> 00:07:28,130
instead of pointers. We could also
use

131
00:07:28,130 --> 00:07:31,743
C-style pointers, since these pointers
are universal and

132
00:07:31,743 --> 00:07:33,419
can be used for everything.

133
00:07:33,419 --> 00:07:36,774
But as a beginning programmer,
if you have the choice and you

134
00:07:36,774 --> 00:07:41,222
are in the use case of a reference,
then simply use references,

135
00:07:41,222 --> 00:07:44,847
which we will go over in the next
video.

136
00:07:44,847 --> 00:07:48,202
If you are in use case number two,
that is,

137
00:07:48,202 --> 00:07:53,186
you want to use a generic pointer
to describe

138
00:07:53,186 --> 00:07:56,668
several different objects which you don't
necessarily already know of,

139
00:07:56,668 --> 00:08:00,874
then, what you should use is a C-style
pointer.

140
00:08:00,874 --> 00:08:05,084
But there is another way of referring to
these objects,

141
00:08:05,084 --> 00:08:06,828
which we want to describe generically.

142
00:08:06,828 --> 00:08:11,610
I called them a, b and c in the
last example.

143
00:08:12,300 --> 00:08:15,275
So, suppose that these objects
already exist,

144
00:08:16,105 --> 00:08:18,259
and suppose that they have
been stored

145
00:08:18,259 --> 00:08:21,022
in an array.

146
00:08:21,022 --> 00:08:23,886
At this point, you don't even need a
pointer anymore,

147
00:08:23,886 --> 00:08:28,011
you can simply use the indices,
the positions in the array,

148
00:08:28,011 --> 00:08:33,586
to describe them in a generic way.
So for example, using size_t i

149
00:08:33,586 --> 00:08:36,642
to refer to them. If i equals zero then
it will describe a;

150
00:08:36,792 --> 00:08:40,845
if i equals 1, it will describe b;
if i equals 2, it will describe c.

151
00:08:40,845 --> 00:08:44,132
So, it can be useful to keep in mind
this way of doing things,

152
00:08:44,132 --> 00:08:46,589
which simply requires an extra
data structure,

153
00:08:46,589 --> 00:08:48,655
an array in this case.

154
00:08:48,655 --> 00:08:52,012
If these objects already
exist when we

155
00:08:52,012 --> 00:08:53,702
create the array,

156
00:08:53,702 --> 00:08:56,808
or if we add them as we go

157
00:08:56,808 --> 00:08:59,380
into a dynamic array using
push_backs and pop_backs,

158
00:08:59,380 --> 00:09:02,463
then we can also refer to them
generically by using an extra

159
00:09:02,463 --> 00:09:05,742
abstraction which is the index of the
element in the array

160
00:09:05,742 --> 00:09:07,458
rather than the element itself.

161
00:09:07,458 --> 00:09:08,889
And if you really want to use pointers,

162
00:09:08,889 --> 00:09:11,053
so, if you are in use case number two,

163
00:09:11,053 --> 00:09:14,992
then you will need to use C-style
pointers.

164
00:09:14,992 --> 00:09:18,262
In use case number three, dynamic
memory allocation,

165
00:09:18,262 --> 00:09:21,834
then you will of course have to use
pointers -- that is

166
00:09:21,834 --> 00:09:25,948
what they are meant for -- and in this case,
I suggest you use C++ 2011

167
00:09:25,948 --> 00:09:29,056
and smart pointers.

168
00:09:29,056 --> 00:09:31,796
Specifically, I suggest you use

169
00:09:31,796 --> 00:09:36,964
unique_ptr, which we will go over in
a subsequent video.

170
00:09:37,894 --> 00:09:40,477
This concludes the different use
cases

171
00:09:40,477 --> 00:09:43,825
of all sorts of "pointers".

172
00:09:43,825 --> 00:09:46,597
The following videos will go into
detail

173
00:09:46,597 --> 00:09:51,487
about references,
C-style pointers

174
00:09:51,487 --> 00:09:55,335
and finally smart pointers described by
the C++ 2011 standard.
