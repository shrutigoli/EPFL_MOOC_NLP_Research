1
00:00:03,645 --> 00:00:06,143
In our introduction, we have
discussed the different steps

2
00:00:06,143 --> 00:00:08,905
leading to the creation
of a program.

3
00:00:08,905 --> 00:00:11,521
We know that we should start
by thinking, conceptualizing,

4
00:00:11,521 --> 00:00:15,608
and planning the sequence of instructions
we aim to realize.

5
00:00:15,608 --> 00:00:17,675
Then, we will translate this conception

6
00:00:17,675 --> 00:00:20,435
into a known programming language,
such as C++.

7
00:00:20,435 --> 00:00:24,377
Then we will go through several steps,
such as compiling and testing,

8
00:00:24,377 --> 00:00:27,005
before we finally end up
with an executable program.

9
00:00:27,005 --> 00:00:28,946
Now, we will enter the heart of the matter

10
00:00:28,946 --> 00:00:31,490
and acquire the tools necessary

11
00:00:31,490 --> 00:00:34,129
to translate a program conception

12
00:00:34,129 --> 00:00:38,083
into a C++ program.

13
00:00:38,083 --> 00:00:40,582
A program is nothing but a
sequence of instructions,

14
00:00:40,582 --> 00:00:42,390
working with data.

15
00:00:42,390 --> 00:00:44,857
Actually, the sequence of instructions

16
00:00:44,857 --> 00:00:47,190
are closely related to
the notion of processing.

17
00:00:47,190 --> 00:00:49,708
These processing operate on data

18
00:00:49,708 --> 00:00:52,621
while the data also operate on
processing.

19
00:00:52,621 --> 00:00:55,919
Depending on the nature
of the data, different types

20
00:00:55,919 --> 00:00:58,885
of processing will be performed.

21
00:00:58,885 --> 00:01:01,875
Let us imagine that we wish to 
write a brief program

22
00:01:01,875 --> 00:01:05,467
tasked with resolving a
quadratic equation

23
00:01:05,467 --> 00:01:06,800
of this kind.

24
00:01:06,800 --> 00:01:09,872
We can picture rather easily the
different steps

25
00:01:09,872 --> 00:01:13,371
leading to the solving of such
an equation.

26
00:01:13,371 --> 00:01:17,594
First of all, we should figure out
the involved coefficients,

27
00:01:17,594 --> 00:01:21,497
the b, the c in order to know concretely

28
00:01:21,497 --> 00:01:24,237
what equation we are working
with.

29
00:01:24,237 --> 00:01:27,559
Then, we will calculate the
discriminant (delta).

30
00:01:29,491 --> 00:01:34,205
According to the value of this delta,
there will be different possible situations.

31
00:01:34,205 --> 00:01:36,896
Thus, different processing
will be held.

32
00:01:36,896 --> 00:01:41,216
For example, if the delta is negative,

33
00:01:41,239 --> 00:01:46,329
we will simply print
that there is no solution.

34
00:01:50,179 --> 00:01:59,120
If delta is zero, we will calculate
the unique solution

35
00:01:59,120 --> 00:02:01,976
and print it.

36
00:02:04,162 --> 00:02:06,999
Otherwise, there is the case where we
have two solutions.

37
00:02:06,999 --> 00:02:09,841
We will not treat this last case
explicitly now.

38
00:02:09,841 --> 00:02:13,397
We can see that there are
several processing.

39
00:02:13,397 --> 00:02:15,163
Here, at the step two,

40
00:02:15,163 --> 00:02:18,024
we have a processing calculating
the delta.

41
00:02:18,024 --> 00:02:20,203
These processing operate on data;

42
00:02:20,203 --> 00:02:22,888
indeed we see that
calculating delta

43
00:02:22,888 --> 00:02:25,757
means working with the data
b and c,

44
00:02:25,757 --> 00:02:28,201
which are provided at the beginning.

45
00:02:28,214 --> 00:02:33,477
We also see that data influence
processing,

46
00:02:33,477 --> 00:02:34,805
for example, here,

47
00:02:34,805 --> 00:02:38,563
the newly-calculated data delta

48
00:02:38,563 --> 00:02:41,469
will impact the performed
processing.

49
00:02:41,469 --> 00:02:43,433
Here, depending on the value of delta,

50
00:02:43,433 --> 00:02:46,524
we will either print that
there is no solution

51
00:02:46,524 --> 00:02:49,285
or calculate the unique solution
and so on.

52
00:02:49,285 --> 00:02:53,515
We clearly see that there is a 
codependency between data and processing.

53
00:02:53,515 --> 00:02:55,379
Processing operate on data,

54
00:02:55,379 --> 00:02:59,810
which then impact the performed
processing.

55
00:02:59,820 --> 00:03:01,496
We can draw two conclusions here.

56
00:03:01,496 --> 00:03:04,511
The first is that one of the 
fundamental component

57
00:03:04,511 --> 00:03:08,331
to express processing is
the notion of expression.

58
00:03:08,331 --> 00:03:11,917
Here, we need to evaluate
a short arithmetic expression

59
00:03:11,917 --> 00:03:14,096
in order to calculate our delta.

60
00:03:14,099 --> 00:03:18,030
The second is related to the
notion of data.

61
00:03:18,030 --> 00:03:22,482
For exemple, here, we see that a data
like delta is associated with a value.

62
00:03:22,482 --> 00:03:26,376
At different stages of the program,

63
00:03:26,376 --> 00:03:30,907
we need to find the value associated
with this data.

64
00:03:30,907 --> 00:03:34,353
Having a name,
such as "delta" gives

65
00:03:34,353 --> 00:03:36,585
 access to the value of this data,

66
00:03:36,585 --> 00:03:38,256
at different stages of the program

67
00:03:38,256 --> 00:03:40,842
and to reference this value
using a name.

68
00:03:40,842 --> 00:03:47,609
This brings us to a fundamental notion
called the notion of variable.

69
00:03:47,609 --> 00:03:50,366
The objective of this introductory
programming course

70
00:03:50,366 --> 00:03:52,314
is to present the necessary
components

71
00:03:52,314 --> 00:03:55,021
in order to perform processing

72
00:03:55,021 --> 00:03:58,029
and manipulate data in
a suitable way.

73
00:03:58,029 --> 00:04:01,011
As processing, we have declared
that the notion of expression

74
00:04:01,011 --> 00:04:04,350
was fundamental and will examine
it thouroughly later,

75
00:04:04,350 --> 00:04:05,847
along with the notion of operators.

76
00:04:05,847 --> 00:04:08,804
Regarding data, we have just
demonstrated, through

77
00:04:08,804 --> 00:04:11,855
our little example, the fact that
memorizing data

78
00:04:11,855 --> 00:04:15,064
through variables is primordial.
This is the subject

79
00:04:15,064 --> 00:04:17,703
of today's episode.

80
00:04:19,602 --> 00:04:22,982
In programming, a variable
is a way to store a data,

81
00:04:22,982 --> 00:04:24,744
to associate a name with it.

82
00:04:24,744 --> 00:04:28,534
Concretely, in a program
executed on a machine,

83
00:04:28,534 --> 00:04:32,064
a variable corresponds to an area
named in the memory,

84
00:04:32,064 --> 00:04:33,421
a named area.

85
00:04:33,421 --> 00:04:36,459
We usually call this name
an identifier,

86
00:04:36,459 --> 00:04:38,372
the identifier of the variable.

87
00:04:38,372 --> 00:04:43,743
This memory area will contain a value,
as we can see here,

88
00:04:43,743 --> 00:04:46,569
will store a value associated
with the name "n".

89
00:04:46,569 --> 00:04:51,463
An important fact is that C++
deems mandatory to clearly

90
00:04:51,463 --> 00:04:55,736
define the genre associated
with every data we wish to manipulate.

91
00:04:55,736 --> 00:04:58,238
We call this, the type
of the variable.

92
00:04:58,238 --> 00:05:01,708
For example, we may want
to manipulate integer-type,

93
00:05:01,708 --> 00:05:10,591
decimal-type or character string-type data.

94
00:05:10,591 --> 00:05:14,213
We need to clearly specify it when,
in our program,

95
00:05:14,213 --> 00:05:17,821
I indicate that I want to use a variable.

96
00:05:17,821 --> 00:05:19,904
In our example,

97
00:05:19,904 --> 00:05:26,934
we would thus have a variable called n,
storing the value 123.

98
00:05:26,934 --> 00:05:33,990
Its type is the integer type, which is written
"int" in C++.

99
00:05:33,990 --> 00:05:36,774
But what should we do
concretely in a C++ program,

100
00:05:36,774 --> 00:05:39,770
when we wish to declare a variable ?

101
00:05:39,770 --> 00:05:42,893
You have here the little shell
of a C++ program,

102
00:05:42,893 --> 00:05:44,799
ready to receive your instructions.

103
00:05:44,799 --> 00:05:48,264
We will now declare an integer-type
data,

104
00:05:48,264 --> 00:05:50,047
storing the value 4.

105
00:05:50,047 --> 00:05:53,703
To this end, we type the name of the data.

106
00:05:53,703 --> 00:05:59,256
We specify its type : integer.
And we associate it with a value,

107
00:05:59,256 --> 00:06:00,971
here, the value 4.

108
00:06:00,971 --> 00:06:03,892
We have here the aforementioned
components :

109
00:06:03,892 --> 00:06:06,960
we declare a variable n,
containing the value 4,

110
00:06:06,960 --> 00:06:09,481
with the int type.

111
00:06:09,481 --> 00:06:12,206
When we write such a line
in a program,

112
00:06:12,206 --> 00:06:14,284
as we just did in an
editor,

113
00:06:14,284 --> 00:06:17,180
we are actually
declaring a variable.

114
00:06:17,180 --> 00:06:18,895
We declare, in our program,

115
00:06:18,895 --> 00:06:21,235
that we wish to use a variable
called n.

116
00:06:21,235 --> 00:06:24,795
Referring to our former
terminology,

117
00:06:24,795 --> 00:06:29,875
the identifier of the variable here, is "n".

118
00:06:29,875 --> 00:06:32,791
Through this identifier, we will
be able to access

119
00:06:32,791 --> 00:06:35,281
the value stored in
this variable.

120
00:06:35,281 --> 00:06:40,196
Associated to this data, is a type,
the integer type,

121
00:06:40,196 --> 00:06:42,571
which is written "int" in C++.

122
00:06:42,571 --> 00:06:45,877
In C++, we do not absolutely 
need to

123
00:06:45,877 --> 00:06:50,143
give an initial value to our
variable when we declare it.

124
00:06:50,143 --> 00:06:54,116
We can declare a variable
leaving it empty,

125
00:06:54,116 --> 00:06:55,422
which we did here.

126
00:06:55,422 --> 00:06:59,232
Here, we have an identifier "n_carré"
(TN: n_carré means n_squared)

127
00:06:59,232 --> 00:07:01,534
of the type int, but with no
initial value associated.

128
00:07:01,534 --> 00:07:05,392
These two lines are both
valid variable

129
00:07:05,392 --> 00:07:08,076
declarations in C++.

130
00:07:08,076 --> 00:07:12,565
To initialize a variable is to
give it an initial value.

131
00:07:12,565 --> 00:07:16,112
This usually done along with 
the declaration

132
00:07:16,112 --> 00:07:19,078
Here, we declare an int-type
variable n

133
00:07:19,078 --> 00:07:22,047
and  initialize it to the value 4.

134
00:07:22,047 --> 00:07:25,540
this translates into 
such a memory diagram.

135
00:07:25,540 --> 00:07:29,080
We now have an area,
identified by "n",

136
00:07:29,080 --> 00:07:32,288
containing the initial
value 4.

137
00:07:32,288 --> 00:07:35,825
This is the recommanded way
to proceed.

138
00:07:35,825 --> 00:07:39,674
We have seen previously
that it was possible in C++

139
00:07:39,674 --> 00:07:43,637
to declare a variable
without initializing it.

140
00:07:43,637 --> 00:07:47,370
We find ourselves in such
a situation :

141
00:07:47,370 --> 00:07:51,814
the variable n_carré can contain
absolutely anything.

142
00:07:51,814 --> 00:07:55,737
Therefore, the processing
manipulating this variable n_carré

143
00:07:55,737 --> 00:07:57,666
are utterly unfathomable

144
00:07:57,666 --> 00:08:00,490
and can result in any 
type of results.

145
00:08:00,490 --> 00:08:02,592
These results will probably be incorrect.

146
00:08:02,592 --> 00:08:05,799
This is why we need
to initialize a variable

147
00:08:05,799 --> 00:08:09,379
before using the value
it contains.

148
00:08:09,379 --> 00:08:13,150
The type associated with
the variable upon its declaration

149
00:08:13,150 --> 00:08:14,492
is absolutely fundamental.

150
00:08:14,492 --> 00:08:16,687
This type will condition
the type of processing

151
00:08:16,687 --> 00:08:19,955
we may perform with this
variable.

152
00:08:19,955 --> 00:08:23,292
When we realize such a declaration
in our program,

153
00:08:23,292 --> 00:08:30,459
we indicate that n can contain
integers and integers only.

154
00:08:30,459 --> 00:08:37,456
Similarly, if we declare a double-type
variable in our program,

155
00:08:37,456 --> 00:08:40,509
where double means decimal in C++,

156
00:08:40,509 --> 00:08:49,057
we declare that the variable x
will contain decimal numbers

157
00:08:49,057 --> 00:08:51,426
and decimal numbers only.

158
00:08:51,426 --> 00:08:54,228
To sum up, the declaration
of a variable in C++,

159
00:08:54,228 --> 00:08:56,196
follows this layout :

160
00:08:56,196 --> 00:08:59,484
we indicate the variable type,
its identifier

161
00:08:59,484 --> 00:09:02,493
and, in parentheses, its initial value.

162
00:09:02,493 --> 00:09:06,179
Also, we should not forget
the semicolon at the end.

163
00:09:06,179 --> 00:09:10,308
This second way to declare
a variable is valid,

164
00:09:10,308 --> 00:09:12,592
but disadvised, for we do not

165
00:09:12,592 --> 00:09:15,830
give any initial value to the variable.

166
00:09:15,830 --> 00:09:19,390
By the way, please note that
the type of a variable

167
00:09:19,390 --> 00:09:21,126
cannot be changed later on.

168
00:09:21,126 --> 00:09:23,666
When we declare a variable
of a certain type,

169
00:09:23,666 --> 00:09:25,373
this variable will keep its type

170
00:09:25,373 --> 00:09:30,086
for all its existence in the program.

171
00:09:30,086 --> 00:09:34,359
In C++, it is possible to declare
two variables on the same line.

172
00:09:34,359 --> 00:09:37,380
In this case, we indicate the 
associated type only once

173
00:09:37,380 --> 00:09:41,783
and separate both declarations
by a comma.

174
00:09:41,783 --> 00:09:44,789
This can lead to ambiguities,

175
00:09:44,789 --> 00:09:48,207
therefore it is recommanded not to
overruse it.

176
00:09:48,207 --> 00:09:50,796
There a few conventions one needs
to respect

177
00:09:50,796 --> 00:09:52,899
when declaring a vairable.

178
00:09:52,899 --> 00:09:55,591
When we give an identifier
to a variable,

179
00:09:55,591 --> 00:10:00,005
this identifier may only be constituted
of letters and digit.

180
00:10:00,005 --> 00:10:03,295
By the way, the underscore character is
considered as a letter.

181
00:10:03,295 --> 00:10:06,398
You have here the example
of a valid identifier.

182
00:10:06,398 --> 00:10:09,367
Accents are not allowed.

183
00:10:09,367 --> 00:10:11,608
You have here the example
of an invalid identifier,

184
00:10:11,608 --> 00:10:13,106
containing an accent.

185
00:10:13,106 --> 00:10:16,932
Also, the first character has
to be a letter.

186
00:10:16,932 --> 00:10:20,939
You have here an example
of an invalid identifier,

187
00:10:20,939 --> 00:10:23,282
the first character being a digit.

188
00:10:23,282 --> 00:10:28,040
Of course, the identifier cannot be
a reserved keyword of the programming language.

189
00:10:28,040 --> 00:10:30,603
There are several reserved keywords

190
00:10:30,603 --> 00:10:33,945
which we cannot use as the
name of a variable.

191
00:10:33,945 --> 00:10:36,605
Upper case and lower case
are authorized

192
00:10:36,605 --> 00:10:39,784
but not equivalent, meaning that,
for example,

193
00:10:39,784 --> 00:10:45,424
the identifiers "ligne" and "Ligne"
are not equivalent.

194
00:10:45,424 --> 00:10:49,795
They do not refer to the same variable.

195
00:10:49,795 --> 00:10:51,987
We have already discussed the notion of type,

196
00:10:51,987 --> 00:10:54,903
essential when declaring
variables.

197
00:10:54,903 --> 00:10:58,056
The two main elementary types,
allowing, in a program,

198
00:10:58,056 --> 00:11:00,262
to manipulate numerical data

199
00:11:00,262 --> 00:11:03,801
or declare numerical-type
variables are int and double.

200
00:11:03,801 --> 00:11:06,777
We have already encountered
them in several examples.

201
00:11:06,777 --> 00:11:11,568
There are, of course, many
more predefined types in C++.

202
00:11:11,568 --> 00:11:16,729
For example, if, in a program, I wish
to manipulate positive integers,

203
00:11:16,729 --> 00:11:20,569
for example, the number of students
attending this course,

204
00:11:20,569 --> 00:11:24,241
we will resort to the "unsigned int"
type.

205
00:11:24,241 --> 00:11:26,539
This type precisely means
positive integer

206
00:11:26,539 --> 00:11:30,295
and lets us characterize our data
in a more precise way

207
00:11:30,295 --> 00:11:33,176
than an int would.

208
00:11:33,176 --> 00:11:36,490
Similarly, if, in a program, we need to
manipulate characters,

209
00:11:36,490 --> 00:11:41,593
namely the usual characters from
a to z, we can use the type "char".

210
00:11:41,593 --> 00:11:43,462
Later in this course,

211
00:11:43,462 --> 00:11:49,051
we will expand further on the predefined
types in the C++ language.

212
00:11:49,051 --> 00:11:52,183
Right now, we know how to
declare and initialize a variable

213
00:11:52,183 --> 00:11:54,186
in order to have it store a data.

214
00:11:54,186 --> 00:11:55,929
Very often, it will be required

215
00:11:55,929 --> 00:12:00,390
to change the value of the variable,
during the execution of the program.

216
00:12:00,390 --> 00:12:03,422
This can be accomplished
through an assignment.

217
00:12:03,422 --> 00:12:06,255
Assignment is performed
through the "equal to" operator,

218
00:12:06,255 --> 00:12:08,091
also called assignment operator.

219
00:12:08,091 --> 00:12:12,348
Such a line is read : we assign
the new value n times n

220
00:12:12,348 --> 00:12:14,349
to the variable n_carré.

221
00:12:14,349 --> 00:12:17,979
This means that we are
changing the value of the variable

222
00:12:17,979 --> 00:12:21,847
in order to store inside it
the new value n times n.

223
00:12:21,847 --> 00:12:26,800
Be very careful not to mistake
this with a mathematical equality.

224
00:12:26,800 --> 00:12:28,957
The executuion of an
assignment operation

225
00:12:28,957 --> 00:12:31,042
actually occurs in two steps.

226
00:12:31,042 --> 00:12:35,033
First of all, the expression on the right
side of the assignment symbol

227
00:12:35,033 --> 00:12:38,611
"equal to" will be evaluated.

228
00:12:38,611 --> 00:12:40,910
Here, in our example, we have
a variable n,

229
00:12:40,910 --> 00:12:43,006
storing the value 4.

230
00:12:43,006 --> 00:12:46,119
Knowing that in C++, the asterisk
represents the multiplication,

231
00:12:46,119 --> 00:12:51,520
the result of the evaluation n times n
will simply return 16.

232
00:12:51,520 --> 00:12:55,801
Then, what we have evaluated during
the first step

233
00:12:55,801 --> 00:12:58,575
will be stored inside the variable

234
00:12:58,575 --> 00:13:00,907
on the left side of the assignment symbol.

235
00:13:00,907 --> 00:13:05,993
Here, the variable n_carré
stores the value 16.

236
00:13:05,993 --> 00:13:08,412
It is important to understand,
that if n_carré formerly

237
00:13:08,412 --> 00:13:10,785
contained something else than 16,

238
00:13:10,785 --> 00:13:16,184
this result would have been
erased and replaced by the new value 16.

239
00:13:16,184 --> 00:13:19,568
In general, the assignment
goes as follows :

240
00:13:19,568 --> 00:13:23,466
You have a variable name, followed by
the assignment symbol "equal to"

241
00:13:23,466 --> 00:13:27,498
followed by an expression, which
will define the new value

242
00:13:27,498 --> 00:13:30,076
the variable will take through
the assignment.

243
00:13:30,076 --> 00:13:34,095
Naturally, we will examine expressions
thouroughly later.

244
00:13:34,095 --> 00:13:36,457
You can see a few of them here :

245
00:13:36,457 --> 00:13:39,855
An expression can be reduced
to an elementary value,

246
00:13:39,855 --> 00:13:42,671
a simple expression like
n squared here.

247
00:13:42,671 --> 00:13:45,475
We will use the usual
arithmetic operators,

248
00:13:45,475 --> 00:13:48,943
which we will discuss later on :
multiplication, soustraction...

249
00:13:48,943 --> 00:13:53,483
Of course, do not forget the famous
semicolon at the end;

250
00:13:53,483 --> 00:13:58,561
it is essential for the well-functioning
the compilation process,

251
00:13:58,561 --> 00:14:00,393
As we stated previously,

252
00:14:00,393 --> 00:14:04,116
one should not mistake the assignment
with the mathematical equality.

253
00:14:04,116 --> 00:14:09,338
Despite the "equal to" symbal being
the same, it does not carry the same meaning

254
00:14:09,338 --> 00:14:11,523
in mathematics and programming !

255
00:14:11,523 --> 00:14:14,115
Let us analyse these two
instructions here :

256
00:14:14,115 --> 00:14:17,736
in mathematics, these two lines
would mean that a and b

257
00:14:17,736 --> 00:14:19,579
have the same values,
in both cases.

258
00:14:19,579 --> 00:14:22,314
In C++ though, this is not exactly
what is going to happen.

259
00:14:22,314 --> 00:14:25,501
Let us pay attention to the first instruction,

260
00:14:25,501 --> 00:14:27,943
supposing that we have
variables a and b,

261
00:14:27,943 --> 00:14:30,681
each storing a different value.

262
00:14:30,681 --> 00:14:34,182
Executing this instruction
will result

263
00:14:34,182 --> 00:14:37,903
in evaluating b, which has
the value 2,

264
00:14:37,903 --> 00:14:40,707
taking the result of 
b's evaluation

265
00:14:40,707 --> 00:14:44,878
and storing it inside
a; this will produce this result.

266
00:14:44,878 --> 00:14:46,820
Now, let us do the same with the second instruction,

267
00:14:46,820 --> 00:14:50,935
supposing that we still
have our variables a and b,

268
00:14:50,935 --> 00:14:52,861
with the values 1 and 2.

269
00:14:52,861 --> 00:14:57,371
We will evaluate a, take the
result of the evaluation

270
00:14:57,371 --> 00:14:59,034
and store it inside b.

271
00:14:59,034 --> 00:15:02,370
We take a, and shove it inside b.

272
00:15:02,370 --> 00:15:05,090
Therefore, we end with both a and b,

273
00:15:05,090 --> 00:15:07,145
having the value 1,

274
00:15:07,145 --> 00:15:08,799
We can see that, in programming,

275
00:15:08,799 --> 00:15:11,493
a and b indeed end up with
the same values,

276
00:15:11,493 --> 00:15:14,321
but these values are not the same
in both cases.

277
00:15:14,321 --> 00:15:17,658
Moreover, if, later, one
variable is modified,

278
00:15:17,658 --> 00:15:19,080
the other will not be impacted.

279
00:15:19,080 --> 00:15:22,090
For example, if a is then
modified to 3,

280
00:15:22,090 --> 00:15:26,199
b will keep the value 1.

281
00:15:26,199 --> 00:15:29,261
Similarly in mathematics, if we
were to write something like this,

282
00:15:29,261 --> 00:15:31,157
it would mean that, throughout
all calculations,

283
00:15:31,157 --> 00:15:33,540
a and b will always verify
this property.

284
00:15:33,540 --> 00:15:35,912
In C++, the situation is not quite the same.

285
00:15:35,912 --> 00:15:39,041
Let us imagine a situation where

286
00:15:39,041 --> 00:15:43,910
we assign the value 5 to
the variable a.

287
00:15:43,910 --> 00:15:47,423
Then, we write this line, not unlike
what we previously 

288
00:15:47,423 --> 00:15:49,835
expressed in mathematics.

289
00:15:49,835 --> 00:15:52,044
This will result in

290
00:15:52,044 --> 00:15:56,532
storing inside b, the result
of the evaluation "a plus 1",

291
00:15:56,532 --> 00:15:59,209
that is, 6.

292
00:15:59,209 --> 00:16:02,528
Then, we can perfectly, when 
we execute the next instruction,

293
00:16:02,528 --> 00:16:06,285
modify the value of a again.

294
00:16:06,285 --> 00:16:10,928
We clearly see that this relation
is not verified anymore here,

295
00:16:10,928 --> 00:16:14,537
which would be the case in mathematics.

296
00:16:14,537 --> 00:16:18,468
Therefore, in C++, it is absolutely
valid to write such an instruction,

297
00:16:18,468 --> 00:16:21,949
meaning to calculate the expression
" a plus 1 "

298
00:16:21,949 --> 00:16:24,569
and store this result inside a.

299
00:16:24,569 --> 00:16:27,734
Here, concretely, if
we have a variable a,

300
00:16:27,734 --> 00:16:29,987
formerly containing, let us say,
the value 3,

301
00:16:29,987 --> 00:16:32,132
we will start by evaluating 

302
00:16:32,132 --> 00:16:36,118
the expression on the right side
of the assignment operator.

303
00:16:36,118 --> 00:16:40,582
The result of this evaluation will be 
" 3 plus 1 ", that is, 4.

304
00:16:40,582 --> 00:16:44,947
Then only, we will store this
newly-calculated value inside a,

305
00:16:44,947 --> 00:16:47,155
leading to this result.

306
00:16:47,155 --> 00:16:49,289
This here, is an instruction
very frequent

307
00:16:49,289 --> 00:16:50,921
and useful in programming.

308
00:16:50,921 --> 00:16:53,789
You will have the opportunity
to use it intensively

309
00:16:53,789 --> 00:16:55,724
through many an exercise.

310
00:16:55,724 --> 00:16:57,463
We have now seen hwo assignment

311
00:16:57,463 --> 00:16:59,522
permits to modify
the value of a variable

312
00:16:59,522 --> 00:17:01,391
during the course of a program.

313
00:17:01,391 --> 00:17:03,281
However, in certain situations,

314
00:17:03,281 --> 00:17:06,018
once a variable has been granted
an initial value,

315
00:17:06,018 --> 00:17:07,889
we do not wish to see this value
change later;

316
00:17:07,889 --> 00:17:10,322
we wish to ensure it will not change anymore.

317
00:17:10,322 --> 00:17:14,324
In such case, we will precede the 
declaration of the variable

318
00:17:14,324 --> 00:17:16,109
with the keyword "const".

319
00:17:16,109 --> 00:17:18,191
The rest of the declarations 
remains identical:

320
00:17:18,191 --> 00:17:20,910
a type, an identifier,
an intial value.

321
00:17:20,910 --> 00:17:23,595
We simply added the reserved
keyword "const".

322
00:17:23,595 --> 00:17:27,249
You have here an example of 
a constant declaration.

323
00:17:27,249 --> 00:17:29,514
We declare VITESSE_DE_LA_LUMIERE 
(TN: vitesse de la lumière means speed of light)

324
00:17:29,514 --> 00:17:31,771
as a double-typed constant

325
00:17:31,771 --> 00:17:34,836
having this for value.

326
00:17:34,836 --> 00:17:36,418
After this declaration, it will

327
00:17:36,418 --> 00:17:40,457
not be possible to modify,
via assignment,

328
00:17:40,457 --> 00:17:42,929
the speed of light.

329
00:17:42,929 --> 00:17:46,813
If I attempted it, it would cause
a compiling error.

330
00:17:46,813 --> 00:17:50,615
Now, you know how to declare
and initialize a variable.

331
00:17:50,615 --> 00:17:53,185
You also know how to change
its value in the course of the execution

332
00:17:53,185 --> 00:17:54,678
thanks to the assignment.

333
00:17:54,678 --> 00:17:56,932
We still need to discuss some
fundamental elements,

334
00:17:56,932 --> 00:17:58,809
such as printing, for example,

335
00:17:58,809 --> 00:17:59,894
the value of a variable,

336
00:17:59,894 --> 00:18:01,927
or such as the different expressions
we can use

337
00:18:01,927 --> 00:18:04,356
to assign a new value to 
variable.

338
00:18:04,356 --> 00:18:07,697
This will keep us busy
for the next episodes.
