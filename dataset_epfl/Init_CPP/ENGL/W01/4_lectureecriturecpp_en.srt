1
00:00:03,998 --> 00:00:06,811
Up until now, we have seed
how to declare, initialize

2
00:00:06,811 --> 00:00:09,079
and assign a value to a variable

3
00:00:09,429 --> 00:00:13,025
Now, we will focus on how
to print the value of a vaiable

4
00:00:13,231 --> 00:00:16,370
and how to read it from
the keyboard.

5
00:00:17,333 --> 00:00:18,450
Let us begin with the printing :

6
00:00:18,450 --> 00:00:22,000
if we glance at this
simple example program,

7
00:00:22,000 --> 00:00:25,820
a printing line is, for example,
such a line.

8
00:00:25,820 --> 00:00:27,464
Let us examine it :

9
00:00:28,494 --> 00:00:31,338
This line begins with
the reserved keyword "cout";

10
00:00:31,338 --> 00:00:33,826
this is a variable representing,
in the program,

11
00:00:33,826 --> 00:00:37,157
the standard output device,

12
00:00:37,157 --> 00:00:39,654
generally, the terminal.

13
00:00:42,710 --> 00:00:46,573
Then, we can see several printing
sections.

14
00:00:46,650 --> 00:00:51,610
We must systematically regroup them like this,
with the " << " sign (double less-than sign).

15
00:00:51,610 --> 00:00:56,103
meaning that we wish to print something.

16
00:00:56,475 --> 00:01:00,680
From a mnemonic point of view,
this represents the flow

17
00:01:00,680 --> 00:01:02,674
through which the information
circulates.

18
00:01:02,950 --> 00:01:06,227
The information will go from what
follows to "cout".

19
00:01:06,862 --> 00:01:09,306
This should make it easier to remember

20
00:01:09,306 --> 00:01:11,000
the direction of these signs.

21
00:01:11,965 --> 00:01:14,861
So, behind this sign, meaning
"print",

22
00:01:14,861 --> 00:01:17,748
we can have different possible
printing values.

23
00:01:18,253 --> 00:01:20,397
Here is a "literal" value,

24
00:01:20,397 --> 00:01:24,799
in these double quotes.

25
00:01:24,799 --> 00:01:27,965
This means that the sentence will be
printed exactly as it is.

26
00:01:29,243 --> 00:01:34,166
Then, we have a variable name, n, written
here,

27
00:01:34,166 --> 00:01:39,203
representing the value of the variable, stored in the memory

28
00:01:39,203 --> 00:01:40,567
under the name n.

29
00:01:41,361 --> 00:01:45,808
Therefore, we will print the value
contained in the variable n.

30
00:01:46,097 --> 00:01:50,913
Be careful not to mistake this with "n".
(double quote, n, double quote).

31
00:01:50,913 --> 00:01:55,492
which means "print the letter 'n', the word 'n'".

32
00:01:56,596 --> 00:02:01,330
Then, we have the period written
as it is,

33
00:02:01,330 --> 00:02:02,938
as a character string.

34
00:02:02,938 --> 00:02:06,762
Finally, we have the reserved
keyword "endl",

35
00:02:06,762 --> 00:02:08,615
meaning "end of line".

36
00:02:08,615 --> 00:02:13,927
This permits to jump to the next line,
to generate a line break.

37
00:02:16,394 --> 00:02:20,152
The printing of the variable n
is actually a specific

38
00:02:20,152 --> 00:02:22,338
case of a more complex expression.

39
00:02:22,338 --> 00:02:27,985
Actually we can use any C++
expression in "cout".

40
00:02:28,628 --> 00:02:31,698
For example, we can print 2*n
(2 times n).

41
00:02:32,598 --> 00:02:35,518
The following line is thus read :

42
00:02:35,518 --> 00:02:42,614
on cout, print the message
"le double de", print the value of n,

43
00:02:42,614 --> 00:02:45,426
print the message "est" (= "is"),

44
00:02:45,426 --> 00:02:47,414
with here, two blank spaces.

45
00:02:48,044 --> 00:02:54,650
Then, print the expression 2*n
(two times n), print a period

46
00:02:54,650 --> 00:02:57,784
and, finally, a line break.
(TN: "le double de" means "twice as many as")

47
00:02:59,804 --> 00:03:02,151
"cout" and "endl" are actually called

48
00:03:02,151 --> 00:03:04,888
std::cout
(S-T-D, colon, colon, "cout")

49
00:03:04,888 --> 00:03:07,833
and std:.endl
(S-T-D, colon, colon, "endl").

50
00:03:07,854 --> 00:03:11,008
We can write them simply
"cout" and "endl"

51
00:03:11,008 --> 00:03:15,008
because, at the beginning of the program,
we added the instruction:

52
00:03:16,233 --> 00:03:18,456
"using namespace std;"

53
00:03:18,456 --> 00:03:22,041
thanks to think, we do not
have to write

54
00:03:22,041 --> 00:03:26,813
"std::" before the reserved
keywords belonging to the

55
00:03:26,813 --> 00:03:31,725
so-called "standard library namespace",
the namespace std.

56
00:03:32,065 --> 00:03:35,226
Without the line 
"using namespace std;",

57
00:03:35,429 --> 00:03:37,823
we would need to write

58
00:03:37,823 --> 00:03:42,165
std::cout and std::endl.

59
00:03:42,895 --> 00:03:46,355
We wanted you to know that because,
in code from the outside,

60
00:03:46,355 --> 00:03:48,705
you could encounter this syntax.

61
00:03:50,415 --> 00:03:52,355
Now, to illustrate all this,

62
00:03:52,355 --> 00:03:55,085
let us examine step by step,
the course of our example program.

63
00:03:55,552 --> 00:03:59,344
First of all, we declare an
int-type

64
00:03:59,344 --> 00:04:01,274
variable n

65
00:04:01,667 --> 00:04:05,076
and initialize it to the value 4.

66
00:04:06,711 --> 00:04:10,614
This will create in the memory,
an area

67
00:04:10,614 --> 00:04:12,768
where we will store an integer n,

68
00:04:13,178 --> 00:04:15,074
inside which we put the value 4.

69
00:04:15,417 --> 00:04:20,685
Then, we will declare a int-type
variable n_carre (means "n_square").

70
00:04:20,685 --> 00:04:23,630
Since it is not initialized, we

71
00:04:23,630 --> 00:04:26,872
do not know a priori what value
it initially contains.

72
00:04:27,812 --> 00:04:33,840
Then, we execute the instruction
n*n (n times n) goes into n_carre,

73
00:04:33,840 --> 00:04:36,655
that is, n_carre = n*n.

74
00:04:36,655 --> 00:04:38,848
By the way, remember that writing
the "equal to" sign here

75
00:04:38,848 --> 00:04:44,203
means that we evaluate the expression
on the right

76
00:04:44,203 --> 00:04:48,148
and copy it inside the variable, here, on the left.

77
00:04:48,816 --> 00:04:54,284
Therefore, the variable n_carre,
will receive the value 4*4, that is, 16.

78
00:04:55,736 --> 00:04:58,460
Now, let us move on
to the printing instructions.

79
00:04:58,460 --> 00:05:03,143
First of all, we will print here : "la variable n contient" 
(TN: "la variable n contient" means "the variable n contains")

80
00:05:04,621 --> 00:05:11,423
then, we will print the expression
of the variable n, namely its value, 4;

81
00:05:11,423 --> 00:05:14,712
then, we will print a period

82
00:05:14,712 --> 00:05:19,486
and finally, here, we will generate
a line break thanks to this "endl".

83
00:05:20,217 --> 00:05:23,473
Now, we move on to the next printing,
which will print :

84
00:05:23,473 --> 00:05:28,550
"le carré de", n, which is an expression,
corresponding to the value 4 stored in the memory (TN: "le carré de" means "the square of"),

85
00:05:29,049 --> 00:05:36,076
"est", n_carre, which is another expression, the value
of which in the memory is 16 (TN: "est" means "is"),

86
00:05:36,686 --> 00:05:42,915
and finally a line break.
Now we can print the last message.

87
00:05:42,915 --> 00:05:44,987
"le double de n est"
(TN: which means "twice as much as n is")

88
00:05:45,358 --> 00:05:49,104
By the way, here n is a letter
included in the message,

89
00:05:49,104 --> 00:05:50,830
therefore, it will be printed as such.

90
00:05:50,830 --> 00:05:54,110
It is the word, the letter "n" which
will be printed here

91
00:05:54,110 --> 00:05:58,549
and not an expression as it happened 
on the previous line,

92
00:05:58,549 --> 00:06:01,359
or as we could have here.

93
00:06:01,583 --> 00:06:02,930
So, "le double de n est",

94
00:06:02,930 --> 00:06:06,879
then the printing instruction 2*n.

95
00:06:06,879 --> 00:06:09,483
Thus, we will search for the value of n, 4,

96
00:06:09,483 --> 00:06:14,557
2*4, which, of course, will be evaluated to 8.
Therefore, 8 wil be printed here.

97
00:06:14,654 --> 00:06:19,075
Then, we print the period
as a character

98
00:06:19,075 --> 00:06:22,817
and finally we generate a line break.

99
00:06:24,522 --> 00:06:27,073
A question now. Please look at
the following code

100
00:06:28,113 --> 00:06:30,446
and tell us what it will print.

101
00:06:32,987 --> 00:06:35,115
Here is the step by step answer.

102
00:06:35,115 --> 00:06:38,798
First of all, we declare an
int-type variable a

103
00:06:38,798 --> 00:06:42,993
initialized to the value 2.

104
00:06:42,993 --> 00:06:48,310
Then, we declare an int-type variable b,
intialized to the value 1.

105
00:06:49,073 --> 00:06:55,576
We then have the assignment here,
starting by evaluating the expression a*(b+2).

106
00:06:55,576 --> 00:07:01,133
That is, two times the value of b (which
is 1) plus 2.

107
00:07:01,458 --> 00:07:02,792
That is, 2 times 3.

108
00:07:02,792 --> 00:07:10,630
This expression is copied 
inside b, which is now 6.

109
00:07:11,380 --> 00:07:17,550
Now, we print the value of a, "comma",
the value of b.

110
00:07:19,451 --> 00:07:21,055
Another question :

111
00:07:21,055 --> 00:07:22,455
What will this program print ?

112
00:07:24,832 --> 00:07:28,077
Here is, again, the step by step
answer.

113
00:07:28,077 --> 00:07:31,645
First of all, we declare a variable a
initialized to the value 1.

114
00:07:32,020 --> 00:07:37,206
Then, we declare an int-type variable b
initialized to the value 2.

115
00:07:37,206 --> 00:07:41,755
Then, we copy the value of b, inside a.

116
00:07:41,755 --> 00:07:45,737
Therefore, a will be 2.

117
00:07:45,737 --> 00:07:50,535
Then copy the value of a, which
has just been modified,

118
00:07:50,535 --> 00:07:53,813
inside b. Therefore, b will
still be 2.

119
00:07:53,813 --> 00:07:57,412
Finally, thus "2, 2" wil be printed.

120
00:07:59,133 --> 00:08:00,884
A question we could ask

121
00:08:00,884 --> 00:08:04,786
is how to swap the value 
of two variables ?

122
00:08:05,247 --> 00:08:10,130
Let us suppose that we have
a variable a, containing 1, initially

123
00:08:10,130 --> 00:08:14,099
and a variable b, containing
2, initially.

124
00:08:14,099 --> 00:08:18,107
How do we proceed so that,
after the swap,

125
00:08:18,107 --> 00:08:24,539
a will contain 2, and 
b will contain 1 ?

126
00:08:25,360 --> 00:08:29,844
Let us suppose that we have
to deal with water glasses.

127
00:08:30,248 --> 00:08:34,808
Let us suppose that we
have a glass a filled with grenadine

128
00:08:34,808 --> 00:08:39,973
and glass b filled with mint.

129
00:08:40,750 --> 00:08:45,918
How would you proceed in order
to transfer the mint into the glass a

130
00:08:45,918 --> 00:08:49,870
and the grenadine into the glass b ?

131
00:08:52,116 --> 00:08:56,644
The solution is, of 
course, to resort to a third glass,

132
00:08:56,644 --> 00:08:59,467
which we will call "tmp".

133
00:08:59,467 --> 00:09:03,763
It is not any more
complicated for variables.

134
00:09:03,763 --> 00:09:09,246
One simpy needs to introduce
an intermediate variable.

135
00:09:10,019 --> 00:09:16,449
Let us do this. First of all, we will 
create an intermediate variable "temp"

136
00:09:17,108 --> 00:09:20,203
in which we will copy the value of a.

137
00:09:20,203 --> 00:09:23,017
So, we will initialize temp
to the value of a.

138
00:09:23,017 --> 00:09:25,111
Here, temp will thus be 1.

139
00:09:25,525 --> 00:09:28,730
Then, we will copy b into a.

140
00:09:28,730 --> 00:09:33,392
Finally, we will copy the value
of temp into b.

141
00:09:35,455 --> 00:09:39,171
Now, let us move on to reading
of the value of variables

142
00:09:39,171 --> 00:09:40,185
from the keyboard.

143
00:09:40,185 --> 00:09:42,206
Let us go back to our example
program

144
00:09:42,206 --> 00:09:47,241
and suppose that we do not only wish
to calculate the square of 4,

145
00:09:47,241 --> 00:09:51,361
but wish to be able to enter
the value of n

146
00:09:51,361 --> 00:09:54,499
through the keyboard, by asking
it to the user.

147
00:09:54,889 --> 00:09:56,495
How would we do that ?

148
00:09:56,987 --> 00:09:59,971
Why, we will simply add here, in the
program,

149
00:09:59,971 --> 00:10:03,182
something letting the user enter
this value.

150
00:10:03,182 --> 00:10:06,596
First of all, we will start by
printing a message :

151
00:10:06,596 --> 00:10:08,871
"Entrez une valeur pour n : "
(TN: which means "enter a value for n:").

152
00:10:08,871 --> 00:10:13,794
Then, thanks to this instruction
"cin redirected towards n",

153
00:10:13,794 --> 00:10:17,436
we will be able to read the value of n 
from the keyboard.

154
00:10:19,195 --> 00:10:21,685
Thus, the reading from the keyboard

155
00:10:21,685 --> 00:10:24,117
requires the instruction "cin".

156
00:10:24,117 --> 00:10:29,010
"cin" representes the standard input device,
"in" as in "input";

157
00:10:29,010 --> 00:10:32,342
this represents the reading 
from the keyboard.

158
00:10:32,932 --> 00:10:36,675
After the "cin", we see a sign similar
to the one used for printing;

159
00:10:36,675 --> 00:10:38,910
the direction is reversed, though!

160
00:10:39,282 --> 00:10:43,119
Here, the information goes from the
keyboard to the variable n;

161
00:10:43,119 --> 00:10:46,997
this a good way to remember the
direction of this symbol.

162
00:10:47,514 --> 00:10:51,692
Finally comes the name of the
variable inside which

163
00:10:51,692 --> 00:10:54,420
we will store the value
read from the keyboard.

164
00:10:55,280 --> 00:11:00,562
"cin" thus represents the keyboard
inside the memory, the program, of the computer.

165
00:11:00,562 --> 00:11:05,346
The symbol here represents the fact
that we are going from "cin" to the memory,

166
00:11:05,767 --> 00:11:07,059
then, the reading direction

167
00:11:07,059 --> 00:11:10,346
and, then the name of the variable.

168
00:11:11,153 --> 00:11:15,542
By the way, it is important to understand
that what follows the reading direction here,

169
00:11:15,542 --> 00:11:17,242
is indeed the name of a variable.

170
00:11:17,242 --> 00:11:20,639
It cannot be a message or 
anything else.

171
00:11:20,639 --> 00:11:22,427
This is rigorously forbidden.

172
00:11:23,191 --> 00:11:27,820
If you want to print something,
you have to use the "cout" instruction.

173
00:11:27,820 --> 00:11:30,606
You will begin by printing a message,

174
00:11:30,606 --> 00:11:33,180
then a line break -it is optional-

175
00:11:33,180 --> 00:11:36,042
and then, with a second instruction,

176
00:11:36,042 --> 00:11:40,232
we will read from the
keyboard into the variable n.

177
00:11:41,146 --> 00:11:45,445
The message will indeed be printed on
the terminal "cout" and not on the keyboard!

178
00:11:45,445 --> 00:11:51,685
Meanwhile, the reading instruction is
indeed here, and contains the "cin" here.

179
00:11:53,835 --> 00:11:57,468
By the way, it is possible to read
several variables successively,

180
00:11:57,468 --> 00:11:59,001
one behind the others.

181
00:11:59,001 --> 00:12:02,189
We simply need to add the reading
sign every time.

182
00:12:02,189 --> 00:12:08,848
Here, it means :
"from cin, read n1, then read n2, then read n3."

183
00:12:09,743 --> 00:12:14,112
Personally, we advise you to write
it in several clearly separated lines.

184
00:12:14,112 --> 00:12:18,130
Thus writing : reading from "cin" into n1.

185
00:12:18,465 --> 00:12:22,400
Then : reading from "cin" into n2.

186
00:12:22,400 --> 00:12:26,300
Then : reading from "cin" into n3.

187
00:12:26,627 --> 00:12:28,157
Mayhaps it is a little more tedious,

188
00:12:28,157 --> 00:12:29,975
but we do believe that it
is clearer

189
00:12:29,975 --> 00:12:31,409
at the beginning.

190
00:12:33,630 --> 00:12:36,767
Now, let us examine our example
step by step.

191
00:12:36,767 --> 00:12:41,618
We initially declared the variable n.
Then we print the question :

192
00:12:41,618 --> 00:12:43,616
"enter a value for n : ".

193
00:12:43,966 --> 00:12:48,780
This will result in the printing of this message.
Then, we will read from the keyboard.

194
00:12:49,254 --> 00:12:52,965
Let us suppose that the user
types the value 2.

195
00:12:52,965 --> 00:13:00,565
Thanks to this "cin into n" instruction,
the value 2, typed on the keyboard

196
00:13:01,382 --> 00:13:04,910
will be stored inside the variable n, here.

197
00:13:06,288 --> 00:13:10,104
Once this instruction has been
executed, the variable n

198
00:13:10,104 --> 00:13:12,704
will contain the value
read from the keyboard.

199
00:13:13,138 --> 00:13:14,990
From this point, the program will perform

200
00:13:14,990 --> 00:13:17,135
exactly as before.

201
00:13:17,135 --> 00:13:19,977
We declare the variable n_carre.

202
00:13:19,977 --> 00:13:26,271
Then, we calculate n squared, n times n,
 and assign it to the variable n_carre.

203
00:13:26,271 --> 00:13:29,585
Then, we will proceed to the
printings, starting with :

204
00:13:29,585 --> 00:13:34,138
"the variable n contains",then printing
the value of n,

205
00:13:34,138 --> 00:13:38,076
which is 2, in our example.

206
00:13:38,076 --> 00:13:42,084
And the program will resume exactly as before.
