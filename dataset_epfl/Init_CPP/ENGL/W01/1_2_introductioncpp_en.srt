1
00:00:03,858 --> 00:00:06,665
Programming means 
writing programs.

2
00:00:06,665 --> 00:00:11,115
A program is a sequence of instructions which
will be executed by the computer.

3
00:00:11,298 --> 00:00:16,071
For a given task, the programmer will
thus have to design a program

4
00:00:16,071 --> 00:00:20,924
well suited to accomplish this task.
The first step is to develop an algorithm,

5
00:00:20,924 --> 00:00:26,734
that is, to find the sequence of instructions
constiuting the program.

6
00:00:26,734 --> 00:00:32,391
However, it is the computer's
microprocessor which will finally

7
00:00:32,391 --> 00:00:35,203
execute the instructions
constituting the program.

8
00:00:35,203 --> 00:00:40,920
Unfortunately, the microprocessor can
only execute very simple

9
00:00:40,920 --> 00:00:45,840
instructions. Those are too basic
to be efficently used by a human being.

10
00:00:46,177 --> 00:00:52,083
Fortunatley, the programmer can write his
program in a programming language,

11
00:00:52,083 --> 00:00:57,170
C++ being one of them, more accessible
to a human being.

12
00:00:57,170 --> 00:01:01,504
The programming language will be
translated in instructions

13
00:01:01,504 --> 00:01:05,484
understandable and executable
by the microprocessor.

14
00:01:05,800 --> 00:01:11,747
Thus, do not ever forget that your
(high-level) program must be written for humans

15
00:01:11,747 --> 00:01:13,742
and not for a computer.

16
00:01:15,120 --> 00:01:18,760
More precisely, a program is one
or more text files,

17
00:01:18,783 --> 00:01:22,471
which can be automatically translated [into
machine instructions] by another program.

18
00:01:22,471 --> 00:01:26,605
This other program is either an 
interpreter or a compiler.

19
00:01:26,605 --> 00:01:30,792
In the case of C++, a compiler is
used.

20
00:01:30,792 --> 00:01:35,120
The C++ compiler generates an
executable file from the

21
00:01:35,120 --> 00:01:38,837
the text file(s) containing the
source code,

22
00:01:38,837 --> 00:01:41,921
that is, the C++ program.

23
00:01:43,318 --> 00:01:46,492
This executable file contains
the instructions

24
00:01:46,492 --> 00:01:48,986
executable by the
microprocessor.

25
00:01:50,590 --> 00:01:54,883
In this course, you will learn to
analyze a problem so as to write

26
00:01:54,911 --> 00:01:57,367
a program in a high-level language.

27
00:01:57,485 --> 00:02:02,483
The language here will be C++. However, we 
will attempt to keep a broad view

28
00:02:02,483 --> 00:02:04,681
and to teach you principles
valid

29
00:02:04,681 --> 00:02:06,590
in most programming languages.

30
00:02:07,335 --> 00:02:13,306
For a given problem, you will first have to
conceive the sequence of instructions,

31
00:02:13,306 --> 00:02:14,872
which the program will go through.

32
00:02:15,808 --> 00:02:21,916
Then, you will write the C++ program
corresponding to this sequence of instructions.

33
00:02:22,761 --> 00:02:27,775
Then, you will compile your program,
thus generating an executable program.

34
00:02:28,215 --> 00:02:32,111
In practice, it is possible for the compiling
to fail because your program

35
00:02:32,111 --> 00:02:35,236
does not abide by the C++ rules.

36
00:02:35,236 --> 00:02:37,826
Therefore, the compiler has not
been able to translate it.

37
00:02:38,263 --> 00:02:43,172
In such a case, you will have to correct
your C++ program so that it

38
00:02:43,172 --> 00:02:45,404
indeed abides by C++ rules.

39
00:02:46,356 --> 00:02:50,193
Often, the compiler will produce error
messages, which will

40
00:02:50,193 --> 00:02:52,514
guide you in the correction
of your program.

41
00:02:53,790 --> 00:02:57,151
Once your program has
been compiled,

42
00:02:57,151 --> 00:03:00,103
you will be able to execute it and
test its results.

43
00:03:00,523 --> 00:03:02,881
At this point, it is possible that your
program

44
00:03:02,881 --> 00:03:05,215
will not result in what
you expected

45
00:03:05,492 --> 00:03:08,952
because you erred during the conception
of the original sequence of instructions.

46
00:03:09,724 --> 00:03:16,432
Do not forget that the microprocessor
will blindly execute your program.

47
00:03:16,432 --> 00:03:20,600
You thus have to be cautious
during the conception.

48
00:03:20,600 --> 00:03:24,834
In case of unexpected results, you will have to rethink
your sequence of instructions,

49
00:03:24,834 --> 00:03:29,672
modify your program accordingly,
and resume the development cycle.

50
00:03:30,905 --> 00:03:33,645
Let's now write our first
C++ program.

51
00:03:34,217 --> 00:03:36,991
We will start by opening a development
environment.

52
00:03:36,991 --> 00:03:39,339
The easiest solution is 
probably to use Geany;

53
00:03:39,339 --> 00:03:42,508
you will find the instruction procedure
on this course's website.

54
00:03:43,213 --> 00:03:45,946
The beginning of our program is
a little mysterious

55
00:03:45,946 --> 00:03:51,987
and is read : hash, include, iostream.

56
00:03:51,987 --> 00:03:57,895
using, namespace, std, semicolon.

57
00:03:58,368 --> 00:04:00,801
You do not need to understand these
lines right now,

58
00:04:00,801 --> 00:04:03,713
just be aware that they are required so
that your program may function.

59
00:04:03,951 --> 00:04:10,158
The following of the program is :
int, main, opening parenthese,

60
00:04:10,158 --> 00:04:12,741
closing parenthese,
opening brace.

61
00:04:13,743 --> 00:04:16,563
This part will be thourougly 
explained in the lesson related to functions.

62
00:04:17,063 --> 00:04:19,873
The tradition, when learning
a new programming language,

63
00:04:19,873 --> 00:04:23,968
is to start with a program printing
the message "Hello world".

64
00:04:23,968 --> 00:04:26,405
We will respect this tradition.

65
00:04:26,728 --> 00:04:29,168
In C++, it will be done as follows :

66
00:04:30,523 --> 00:04:34,197
cout, less-than sign, less-than sign,
quotation mark,

67
00:04:34,197 --> 00:04:38,381
Helllo world, quotation mark,

68
00:04:38,381 --> 00:04:41,421
less-than sign, less-than sign, endl,
semicolon.

69
00:04:42,481 --> 00:04:49,375
Our program ends with the line :
return, 0, semicolon

70
00:04:49,972 --> 00:04:52,492
and a closing brace.

71
00:04:52,997 --> 00:04:56,284
From now on, always try to present
your programs clearly.

72
00:04:56,284 --> 00:04:58,987
Albeit not required for
your programs to compile and run,

73
00:04:58,987 --> 00:05:01,222
it is good practice so that

74
00:05:01,222 --> 00:05:03,135
your programs remain readable.

75
00:05:03,474 --> 00:05:08,162
For example, all lines should
begin on the first column,

76
00:05:08,162 --> 00:05:13,658
except the lines between braces, which should
be indented to the right,

77
00:05:13,658 --> 00:05:17,181
for example by adding 2 blank spaces,
as we did.

78
00:05:17,956 --> 00:05:22,487
There are no strict rules. For
example, some programmers would

79
00:05:22,487 --> 00:05:24,864
put the opening brace here.

80
00:05:26,422 --> 00:05:30,448
Simply endeavor to be readable
and coherent, in other words,

81
00:05:30,448 --> 00:05:32,972
follow always the same 
rules.

82
00:05:33,462 --> 00:05:36,214
Before we call the compiler, we should
first save our program.

83
00:05:36,214 --> 00:05:39,511
We will save it in a directorly on
the desktop,

84
00:05:39,511 --> 00:05:42,667
which we called "programme CPP".

85
00:05:42,943 --> 00:05:45,868
Of course, you are free to save
your programs wherever you wish,

86
00:05:45,868 --> 00:05:48,988
though it is recommanded to be
in a directory containing

87
00:05:48,988 --> 00:05:50,570
but C++ programs.

88
00:05:51,194 --> 00:05:56,404
We will call our fille 
helloworld.cc

89
00:05:56,404 --> 00:06:01,014
The extension ".cc" serves to indicate
that your file is a C++ file;

90
00:06:01,014 --> 00:06:03,881
we can also use the extension ".cpp".

91
00:06:05,521 --> 00:06:08,841
Now, you can see that the development
environment

92
00:06:08,842 --> 00:06:10,772
has colorized our program.

93
00:06:10,772 --> 00:06:16,088
Indeed, Geany is now aware that our
text is a C++ file,

94
00:06:16,088 --> 00:06:18,032
thanks to the ".cc" exension.

95
00:06:18,198 --> 00:06:21,115
With a bit of practice, you will soon
realize that the colors make

96
00:06:21,115 --> 00:06:22,973
your programs all the more readable.

97
00:06:25,458 --> 00:06:27,644
Now, let us compile our program.

98
00:06:27,644 --> 00:06:30,691
With Geany, we simply have
to click the "build" button.

99
00:06:30,691 --> 00:06:35,251
This will not only launch the compiling
but also generate an executable program.

100
00:06:35,495 --> 00:06:40,298
Be careful, the "compile" button
only triggers the compiling

101
00:06:40,298 --> 00:06:42,339
and does not create an executable program.

102
00:06:42,510 --> 00:06:46,113
So, if we click this "build" button,

103
00:06:46,955 --> 00:06:53,095
a message will appear here, informing us
that the compiling has ended successfully.

104
00:06:54,707 --> 00:06:58,045
Since everything went good,
we can now execute our program.

105
00:06:58,582 --> 00:07:02,127
To that end, we simply have to click
the "execute" button.

106
00:07:03,733 --> 00:07:08,844
A window opens and
prints our message.

107
00:07:08,844 --> 00:07:13,318
VoilÃ  ! We have created and
executed our first C++ program.

108
00:07:14,229 --> 00:07:17,396
In the directory where we saved the
C++ program,

109
00:07:17,396 --> 00:07:21,636
there is now a new file called
"hellowolrd" without exention

110
00:07:21,636 --> 00:07:24,203
or with the extension ".exe", 
if you are using Windows.

111
00:07:24,791 --> 00:07:28,316
This is the executable file we have
just created.

112
00:07:28,319 --> 00:07:33,550
We can now launch this file
without passing by Geany.

113
00:07:37,824 --> 00:07:42,166
As by clicking the "execute"
button on Geany,

114
00:07:42,166 --> 00:07:46,227
a window opens and our
message appears.

115
00:07:48,602 --> 00:07:51,029
It is probable that, while
typing this first program,

116
00:07:51,029 --> 00:07:53,760
you have made a typo.
What happens then?

117
00:07:53,760 --> 00:07:55,676
And what should we do in such a case?

118
00:07:55,884 --> 00:08:01,315
For example, let us suppose that
you have omitted the semicolon after the "endl".

119
00:08:02,125 --> 00:08:05,385
The compiler will display
an error message,

120
00:08:05,385 --> 00:08:10,496
indicating that it was expecting
a semicolon before the "return".

121
00:08:10,496 --> 00:08:14,870
It also indicates the line number where
the error occured.

122
00:08:15,422 --> 00:08:18,388
Be careful though, this
line number is only indicative;

123
00:08:18,388 --> 00:08:22,414
it is possible for the error to have
occured in the previous line,

124
00:08:22,414 --> 00:08:24,492
as is the case here.

125
00:08:25,230 --> 00:08:28,549
By the way, if we click on the
error message,

126
00:08:28,549 --> 00:08:30,883
Geany will send us to the corresponding line.

127
00:08:31,793 --> 00:08:35,016
Now, if we put back the semicolon,

128
00:08:37,325 --> 00:08:40,539
the compiling will, again,
be successfull.

129
00:08:42,777 --> 00:08:46,909
Now, if, instead of "std" you had
typed, for example, "sdt",

130
00:08:48,251 --> 00:08:51,537
the compiler would generate many mistakes.

131
00:08:52,030 --> 00:08:55,625
No need to panic; one always has
to start by correcting the first mistake

132
00:08:56,111 --> 00:09:00,055
and then compile again.
Very often, a mistake is caused

133
00:09:00,055 --> 00:09:03,315
by another mistake occurring
before in the program.

134
00:09:03,827 --> 00:09:12,043
If we correct the "sdt" to "std",
all the mistakes will disappear.

135
00:09:12,928 --> 00:09:16,258
To sum up : be thourough
while typing your programs,

136
00:09:16,355 --> 00:09:18,726
mind the presentation and,

137
00:09:18,726 --> 00:09:23,689
in case of mistake, always correct
the first mistake and compile again.

138
00:09:23,689 --> 00:09:27,538
Very often, this will correct, at least,
some of the following mistakes.

139
00:09:28,778 --> 00:09:32,631
In order to find this mistake,
start by checking the line number

140
00:09:32,631 --> 00:09:36,623
indicated by the compiler (do not
forget that the error

141
00:09:36,623 --> 00:09:39,357
may have occurred on the previous line).

142
00:09:39,850 --> 00:09:43,743
Then, interpret the error message
displayed by the compiler

143
00:09:43,743 --> 00:09:44,871
in order to understand the problem.

144
00:09:45,020 --> 00:09:50,447
If you have not done so already, we invite
you to open your development

145
00:09:50,447 --> 00:09:54,126
environment and create your own
helloworld program.
