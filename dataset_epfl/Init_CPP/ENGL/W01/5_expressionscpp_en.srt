1
00:00:04,487 --> 00:00:07,758
Let us go back to
expressions and operators,

2
00:00:07,758 --> 00:00:10,118
which we already discussed
in the previous episodes.

3
00:00:10,118 --> 00:00:14,806
An expression appears, for example,
in an assignment, such as here.

4
00:00:15,644 --> 00:00:20,596
In this case, the expression is necessarily
at the right side of the "equal to" sign.

5
00:00:21,094 --> 00:00:22,672
Since it calculates a value,

6
00:00:22,672 --> 00:00:26,719
this value has to be of the same
type as the variable

7
00:00:26,719 --> 00:00:29,420
on the left side of the "equal to" sign.

8
00:00:29,448 --> 00:00:34,538
Indeed, the value computed by the expression
will be assigned to the variable.

9
00:00:34,896 --> 00:00:42,603
An expression can be as simple as
a literal value, such as 4 or 3.14 .

10
00:00:42,603 --> 00:00:48,721
By the way, please note that

11
00:00:48,721 --> 00:00:53,316
C++ uses the anglo-saxon syntax.

12
00:00:53,726 --> 00:00:58,765
However, an expression can
also be a formula, such as here,

13
00:00:58,765 --> 00:01:03,001
where we multiply the variable n
by itself;

14
00:01:03,001 --> 00:01:06,032
we thus get n squared, logically.

15
00:01:06,522 --> 00:01:11,439
Multiplication is represented
by the asterisk symbol ( * ).

16
00:01:12,053 --> 00:01:16,118
Expressions can also include other
mathematical symbols

17
00:01:16,217 --> 00:01:18,728
such as addition, subtraction.

18
00:01:18,728 --> 00:01:21,239
We can also use parentheses;

19
00:01:21,239 --> 00:01:24,002
this is therefore rather general.

20
00:01:25,348 --> 00:01:28,879
One must be aware, when writing
expressions,

21
00:01:28,879 --> 00:01:31,926
that literal values all have
their own type,

22
00:01:31,926 --> 00:01:33,552
exactly as variables do.

23
00:01:33,552 --> 00:01:39,681
For example, if I write 1, simply,
this 1 is an int-type literal value.

24
00:01:41,241 --> 00:01:46,971
However, if I write 1.0,
this 1.0 will be of type double.

25
00:01:48,077 --> 00:01:52,240
Please note that we can simply
write " 1. " 

26
00:01:52,344 --> 00:01:58,265
instead of " 1.0 " and this 1. will
still be of type double.

27
00:01:58,425 --> 00:02:02,089
Therefore, we can write
a declaration like this,

28
00:02:02,564 --> 00:02:07,310
simply with 1. and this is strictly
equivalent to this declaration here.

29
00:02:07,368 --> 00:02:13,635
Obviously, though writing " 1.0 " will always
be more readable than the short " 1. ";

30
00:02:13,635 --> 00:02:15,905
therefore, please favor the " 1.0 " notation.

31
00:02:16,365 --> 00:02:19,297
We can also use the
scientific notation,

32
00:02:19,297 --> 00:02:23,048
namely, we can write " 2e3 "

33
00:02:23,074 --> 00:02:26,764
for 2 times 10 to the third,

34
00:02:27,035 --> 00:02:31,255
that is, 2000.
So 2e3 is 2000.

35
00:02:31,269 --> 00:02:37,822
In general, " aeb " is
a times 10 to the b.

36
00:02:38,480 --> 00:02:44,182
For example, in this declaration,
we initialize the variable to

37
00:02:45,609 --> 00:02:50,333
1.3 multiplied by 10 cubed,

38
00:02:50,980 --> 00:02:54,468
that is 1300.

39
00:02:56,824 --> 00:03:02,886
In this declaration, we
initialize our variable y

40
00:03:03,082 --> 00:03:09,064
to 1.3 times 10 to the -3 ,

41
00:03:10,806 --> 00:03:15,005
that is, 0.0013.

42
00:03:17,856 --> 00:03:21,591
Moving on to the operators,
we have the usual operators,

43
00:03:21,591 --> 00:03:25,598
such as the addition,
written with the + (plus) symbol,

44
00:03:25,598 --> 00:03:28,144
the subtraction, written
with the - (minus) symbol,

45
00:03:28,144 --> 00:03:33,136
the multiplication, written, as we
 said, with the * (asterisk) character

46
00:03:33,136 --> 00:03:36,698
and the division written 
with the / (slash) character.

47
00:03:37,292 --> 00:03:40,557
However, there is trick regarding
the division :

48
00:03:40,557 --> 00:03:45,721
if both values involved in a
division are of type int,

49
00:03:45,721 --> 00:03:48,042
then it is the integer division.

50
00:03:48,688 --> 00:03:53,161
For example, in this division,
1 and 2 are two literal values,

51
00:03:53,161 --> 00:03:55,966
both of type int.

52
00:03:55,966 --> 00:03:59,492
Therefore, it is the integer division
and the result will be 0.

53
00:04:00,041 --> 00:04:05,289
Why ? Because 1 is equal to
0 times 2 and the remainder is 1,

54
00:04:05,711 --> 00:04:08,403
therefore, the result of the integer
division is this 0.

55
00:04:08,403 --> 00:04:13,308
Another example thereof 
is 5 divided by 2; we will obtain 2

56
00:04:13,308 --> 00:04:18,144
because 5 is 2 times 2 and
the remainder is 1.

57
00:04:18,761 --> 00:04:21,813
Therefore the result of the division is this 2.

58
00:04:22,373 --> 00:04:26,384
However, if one of the two values
appearing in the division

59
00:04:26,384 --> 00:04:28,313
is of the type double,

60
00:04:28,313 --> 00:04:32,532
the other value will automatically be
converted to the type double,

61
00:04:32,532 --> 00:04:37,540
namely, this 1 will be converted to
a double, which we can write 1.0

62
00:04:37,540 --> 00:04:42,486
We will get the division 1.0 divided by 2.0

63
00:04:42,486 --> 00:04:44,409
and obtain, as expected,

64
00:04:44,409 --> 00:04:45,745
0.5

65
00:04:47,718 --> 00:04:52,071
In C++, we can also use
the operators : + = (plus equal),

66
00:04:52,071 --> 00:04:53,455
- = (minus equal ),

67
00:04:53,455 --> 00:04:54,932
* = (multiplied equal )

68
00:04:54,932 --> 00:04:56,318
and / = (divided equal ).

69
00:04:56,694 --> 00:05:00,838
For example, we may write a += 5

70
00:05:01,751 --> 00:05:08,016
which is strictly equivalent to writing a = a + 5

71
00:05:09,403 --> 00:05:15,756
Another example : we may write a *= b

72
00:05:16,238 --> 00:05:21,375
which is strictly equivalent to 
a = a * b

73
00:05:24,742 --> 00:05:27,710
In the case of int and ONLY in the
case of int,

74
00:05:27,710 --> 00:05:30,395
we can also use an operator
called modulo

75
00:05:30,395 --> 00:05:33,256
and written with the 
% (percent) sign

76
00:05:33,256 --> 00:05:36,274
returning the remainder
of the integer division.

77
00:05:36,536 --> 00:05:44,008
For example, 11 % 4 (11 modulo 4) is 3.

78
00:05:45,014 --> 00:05:51,534
Because ? 11 is equal to
2 times 4 and the remainded is 3.

79
00:05:51,690 --> 00:05:55,390
And the remainder is precisely the 
result of the modulo.

80
00:05:55,640 --> 00:06:01,649
Another example : 12 modulo 4...

81
00:06:02,930 --> 00:06:05,734
is, in your opinion ?

82
00:06:06,235 --> 00:06:06,867
0

83
00:06:06,882 --> 00:06:13,892
Why so ? Because
12 is equal to 3 times 4 and the remainder is 0.

84
00:06:14,754 --> 00:06:17,431
And this 0 is the result
of the modulo.

85
00:06:20,487 --> 00:06:22,860
There are other operators
written

86
00:06:22,860 --> 00:06:25,433
++ (plus plus) et -- (moins moins)

87
00:06:25,828 --> 00:06:29,896
and are called increment and
decrement operators;

88
00:06:29,896 --> 00:06:31,425
they permit to 

89
00:06:31,425 --> 00:06:33,995
add 1 to variables or subtract
1 from variables.

90
00:06:34,623 --> 00:06:38,004
For example, we may write ++i

91
00:06:38,004 --> 00:06:42,001
which is strictly equivalent to i = i + 1

92
00:06:42,001 --> 00:06:44,838
which will add 1 to the variable i.

93
00:06:45,034 --> 00:06:49,549
We may also write --a

94
00:06:49,549 --> 00:06:53,119
which is equivalent to a = a - 1

95
00:06:53,119 --> 00:06:56,921
which will subtract 1 from the
value of the variable a.

96
00:06:57,449 --> 00:07:01,758
These operators are very useful,
especially in "for loops"

97
00:07:01,758 --> 00:07:04,259
which will be discussed in the next lesson.

98
00:07:05,829 --> 00:07:08,534
Until now, we have only seen
decimal values

99
00:07:08,534 --> 00:07:11,544
and double-type variables on one side

100
00:07:11,544 --> 00:07:15,901
and integer values and int-type variables
on the other.

101
00:07:16,423 --> 00:07:20,899
But what happens when, for example,
we try to assign a decimal value

102
00:07:20,899 --> 00:07:23,325
to an int-type variable ?

103
00:07:23,328 --> 00:07:29,380
For example, we have here a double-type
variable x,

104
00:07:29,826 --> 00:07:31,741
containing the value 1.5

105
00:07:32,621 --> 00:07:38,304
We declare here an int-type
variable n, which we represented here.

106
00:07:39,088 --> 00:07:41,858
Now, through this assignment,
we try to assign

107
00:07:41,907 --> 00:07:46,047
the value 3 times x, 

108
00:07:47,582 --> 00:07:48,881
that is, 4.5

109
00:07:50,094 --> 00:07:53,358
to our int-type variable n,

110
00:07:53,609 --> 00:07:57,713
which is designed to store
integers.

111
00:07:58,642 --> 00:08:00,810
What will happen in such a case ?

112
00:08:00,810 --> 00:08:04,447
The compiler will convert the literal
value 4.5 ,

113
00:08:05,557 --> 00:08:08,000
which is of type double

114
00:08:08,248 --> 00:08:12,309
to an int-type value.

115
00:08:12,664 --> 00:08:17,041
This conversion will be done automatically,
losing the fractional part.

116
00:08:17,041 --> 00:08:20,958
Therefore, 4.5 will be converted to 4.

117
00:08:22,069 --> 00:08:25,154
This 4 is now of type int

118
00:08:25,154 --> 00:08:28,097
and we will be able to 
assign this 4

119
00:08:29,038 --> 00:08:31,809
to the int-type variable n.

120
00:08:33,549 --> 00:08:37,337
Please note that the conversion
from the double type to the int type

121
00:08:37,337 --> 00:08:39,397
is a very particular case.

122
00:08:39,397 --> 00:08:43,212
We also have the conversion
from int to double.

123
00:08:43,212 --> 00:08:45,515
However, these are two exceptions.

124
00:08:46,103 --> 00:08:50,989
In genere, C++ is what we call
a strongly typed language,

125
00:08:50,989 --> 00:08:54,234
which will require that,
for example in an assignment,

126
00:08:54,234 --> 00:08:56,493
the part on the right of the equal

127
00:08:56,493 --> 00:08:59,442
to be of the same type
as what is on the left of the equal.

128
00:09:00,732 --> 00:09:03,981
Let us go back to the trap of
the integer division.

129
00:09:03,981 --> 00:09:07,313
We have declared here
a double-type variable x,

130
00:09:07,313 --> 00:09:09,428
which we represented here.

131
00:09:09,428 --> 00:09:15,247
In this assignment, we assign
the value of the expression 1/2

132
00:09:15,247 --> 00:09:17,062
to our variable x.

133
00:09:17,502 --> 00:09:20,690
In your opinion, what will
x contain after this assignment ?

134
00:09:21,724 --> 00:09:27,402
Since 1 and 2 are two int-type
literal values,

135
00:09:28,155 --> 00:09:31,407
this division is the integer divion.

136
00:09:32,447 --> 00:09:35,846
1/2 is 0 in the case
of the integer division.

137
00:09:35,846 --> 00:09:39,680
Thus, we will assign the value
0 to the variable x.

138
00:09:41,816 --> 00:09:46,850
The fact that x has been declared as a double-type
variable does not change anything here.

139
00:09:47,805 --> 00:09:52,070
In an assignment, we always evaluate
what is on the right side of the equal sign,

140
00:09:52,070 --> 00:09:55,972
no matter what is on the left
side of the equal sign.

141
00:09:58,147 --> 00:10:01,806
A problem can arise, when, for 
example

142
00:10:01,806 --> 00:10:04,815
we try to calculate the
average of integer values.

143
00:10:05,431 --> 00:10:10,086
For example, here, we have declared two
variables : note1 initialized to 4

144
00:10:10,591 --> 00:10:12,276
and note2 initialized to 5.
(TN: note means grade)

145
00:10:12,889 --> 00:10:14,575
They are both of type int.

146
00:10:14,575 --> 00:10:18,592
Now, we want to calculate their
average; we would like to obtain 4.5

147
00:10:19,206 --> 00:10:21,990
However, if we proceed to this declaration,

148
00:10:23,177 --> 00:10:28,616
in this expression note1 and note2
are both of type int,

149
00:10:28,841 --> 00:10:32,414
therefore, note1 + note2 is also
of type int;

150
00:10:33,827 --> 00:10:38,133
this literal value 2 is also
of type int.

151
00:10:38,197 --> 00:10:41,088
This is thus the integer division.

152
00:10:41,481 --> 00:10:46,731
We will therefore obtain 9
divided by 2, that is 4,

153
00:10:46,731 --> 00:10:48,791
while we wished to obtain 4.5

154
00:10:49,860 --> 00:10:53,184
A possible solution is to proceed
as follows :

155
00:10:54,330 --> 00:11:01,575
Here, we still have note1 and note2
of type int, still initialized to 4 and 5.

156
00:11:03,175 --> 00:11:07,987
We initialize "moyenne" to the result
"note1 + note2"  (TN: moyenne means average).

157
00:11:08,685 --> 00:11:12,448
note1 + note2 is 9, of type int

158
00:11:12,871 --> 00:11:17,280
but we assign it to "moyenne", which has
been declared as a double-type variable.

159
00:11:17,891 --> 00:11:23,168
Therefore, "moyenne" will contain 9,

160
00:11:23,489 --> 00:11:26,668
which we could write 9.0

161
00:11:26,873 --> 00:11:29,490
in order to show that it is
double-type value.

162
00:11:29,745 --> 00:11:31,375
This time, when we write

163
00:11:32,095 --> 00:11:34,742
" moyenne /= 2 "

164
00:11:35,176 --> 00:11:37,220
which is strictly equivalent

165
00:11:37,425 --> 00:11:44,284
to "moyenne = moyenne / 2 " ,

166
00:11:44,284 --> 00:11:48,477
since, this time, moyenne is 
of the type double,

167
00:11:50,669 --> 00:11:52,770
this 2, albeit of type int,

168
00:11:52,770 --> 00:11:57,031
will be converted into
a double-type value,

169
00:11:57,031 --> 00:11:58,983
which we could write 2.0

170
00:11:59,431 --> 00:12:04,387
We will thus calculate 9.0 divided by 2.0

171
00:12:04,387 --> 00:12:07,038
this is the classical division

172
00:12:07,423 --> 00:12:09,970
and the result will be indeed be 4.5

173
00:12:11,009 --> 00:12:14,708
We will assign this 4.5 to the variable "moyenne".

174
00:12:16,724 --> 00:12:20,212
We can also use mathematical
functions in expression.

175
00:12:20,369 --> 00:12:25,907
To that end, we simply need to add the line :
" #include cmath "

176
00:12:25,907 --> 00:12:27,303
at the beginning of the program.

177
00:12:27,884 --> 00:12:30,660
If, for example, we wish to calculate
the sine of an angle,

178
00:12:30,660 --> 00:12:33,982
we will ba able to use the function
"sin", such as here.

179
00:12:34,488 --> 00:12:37,957
By the way, the trigonometric
functions in C++,

180
00:12:37,957 --> 00:12:40,766
expect angles in radians.

181
00:12:40,766 --> 00:12:43,905
So, if we have an angle of 10 degrees,
such as here,

182
00:12:43,905 --> 00:12:47,955
we will convert it into radians
thanks to this expression,

183
00:12:47,955 --> 00:12:50,908
and send its value to the 
function "sin"

184
00:12:50,908 --> 00:12:53,802
so that it will return
the sine of this 10 degrees angle.

185
00:12:54,058 --> 00:12:55,736
It is really that easy.

186
00:12:58,912 --> 00:13:01,314
You have here a rather complete
list of mathematical functions

187
00:13:01,314 --> 00:13:03,466
available in C++ .

188
00:13:03,619 --> 00:13:05,907
The most interesting functions
are probably

189
00:13:05,907 --> 00:13:09,189
the trigonometric functions
sin, cos and tan

190
00:13:09,189 --> 00:13:12,303
expecting, remember, angles
in radians,

191
00:13:12,577 --> 00:13:16,109
the exponential function, written
"exp",

192
00:13:16,542 --> 00:13:21,176
the natural logarithm, written "ln"
in mathematics,

193
00:13:21,176 --> 00:13:24,110
is written "log" in C++ .

194
00:13:25,149 --> 00:13:29,235
The function power, x to the y

195
00:13:29,235 --> 00:13:33,712
is written "pow(x, y) in C++ .

196
00:13:34,627 --> 00:13:38,446
The square root is written "sqrt".

197
00:13:38,974 --> 00:13:41,431
The absolute value is written "abs"

198
00:13:43,718 --> 00:13:46,765
We can also use several
mathematical constants;

199
00:13:46,765 --> 00:13:50,690
even though they are not 
officially defined by the C++ standard,

200
00:13:50,690 --> 00:13:53,484
most compilers will
recognize them.

201
00:13:53,986 --> 00:13:59,338
For example, we have Pi,
which is written M_PI (M underscore PI)

202
00:13:59,338 --> 00:14:00,427
in capital letters

203
00:14:00,754 --> 00:14:04,166
and e, which is the base of
the natural logarithm

204
00:14:04,480 --> 00:14:08,617
which is written M_E (M underscore E)
also in capital letters.

205
00:14:09,032 --> 00:14:12,722
For example, if we have an angle,
expressed in degrees,

206
00:14:12,722 --> 00:14:14,412
which we want to convert into radians,

207
00:14:14,412 --> 00:14:17,104
we will use this formula here.

208
00:14:17,888 --> 00:14:22,629
Namel multiply the degree angle by Pi
and divide by 180.

209
00:14:22,633 --> 00:14:25,974
In C++, it will be written
as follows :

210
00:14:26,577 --> 00:14:30,895
We obtain Pi's value by
writing M_PI,

211
00:14:31,268 --> 00:14:35,130
we multiply by the angle and
divide by 180.

212
00:14:35,387 --> 00:14:41,871
By the way, since this expression is
of type double,

213
00:14:44,265 --> 00:14:48,045
we have no problem with the
integer division, here.
