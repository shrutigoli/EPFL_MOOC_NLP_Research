Programming means writing programs.
A program is a sequence of instructions which will be executed by the computer.
For a given task, the programmer will thus have to design a program well suited to accomplish this task.
The first step is to develop an algorithm, that is, to find the sequence of instructions constiuting the program.
However, it is the computer's microprocessor which will finally execute the instructions constituting the program.
Unfortunately, the microprocessor can only execute very simple instructions. Those are too basic to be efficently used by a human being.
Fortunatley, the programmer can write his program in a programming language,
C++ being one of them, more accessible to a human being.
The programming language will be translated in instructions understandable and executable by the microprocessor.
Thus, do not ever forget that your
(high-level) program must be written for humans and not for a computer.
More precisely, a program is one or more text files, which can be automatically translated [into machine instructions] by another program.
This other program is either an interpreter or a compiler.
In the case of C++, a compiler is used.
The C++ compiler generates an executable file from the the text file(s) containing the source code, that is, the C++ program.
This executable file contains the instructions executable by the microprocessor.
In this course, you will learn to analyze a problem so as to write a program in a high-level language.
The language here will be C++. However, we will attempt to keep a broad view and to teach you principles valid in most programming languages.
For a given problem, you will first have to conceive the sequence of instructions, which the program will go through.
Then, you will write the C++ program corresponding to this sequence of instructions.
Then, you will compile your program, thus generating an executable program.
In practice, it is possible for the compiling to fail because your program does not abide by the C++ rules.
Therefore, the compiler has not been able to translate it.
In such a case, you will have to correct your C++ program so that it indeed abides by C++ rules.
Often, the compiler will produce error messages, which will guide you in the correction of your program.
Once your program has been compiled, you will be able to execute it and test its results.
At this point, it is possible that your program will not result in what you expected because you erred during the conception of the original sequence of instructions.
Do not forget that the microprocessor will blindly execute your program.
You thus have to be cautious during the conception.
In case of unexpected results, you will have to rethink your sequence of instructions, modify your program accordingly, and resume the development cycle.
Let's now write our first
C++ program.
We will start by opening a development environment.
The easiest solution is probably to use Geany; you will find the instruction procedure on this course's website.
The beginning of our program is a little mysterious and is read : hash, include, iostream. using, namespace, std, semicolon.
You do not need to understand these lines right now, just be aware that they are required so that your program may function.
The following of the program is : int, main, opening parenthese, closing parenthese, opening brace.
This part will be thourougly explained in the lesson related to functions.
The tradition, when learning a new programming language, is to start with a program printing the message "Hello world".
We will respect this tradition.
In C++, it will be done as follows : cout, less-than sign, less-than sign, quotation mark,
Helllo world, quotation mark, less-than sign, less-than sign, endl, semicolon.
Our program ends with the line : return, 0, semicolon and a closing brace.
From now on, always try to present your programs clearly.
Albeit not required for your programs to compile and run, it is good practice so that your programs remain readable.
For example, all lines should begin on the first column, except the lines between braces, which should be indented to the right, for example by adding 2 blank spaces, as we did.
There are no strict rules. For example, some programmers would put the opening brace here.
Simply endeavor to be readable and coherent, in other words, follow always the same rules.
Before we call the compiler, we should first save our program.
We will save it in a directorly on the desktop, which we called "programme CPP".
Of course, you are free to save your programs wherever you wish, though it is recommanded to be in a directory containing but C++ programs.
We will call our fille helloworld.cc
The extension ".cc" serves to indicate that your file is a C++ file; we can also use the extension ".cpp".
Now, you can see that the development environment has colorized our program.
Indeed, Geany is now aware that our text is a C++ file, thanks to the ".cc" exension.
With a bit of practice, you will soon realize that the colors make your programs all the more readable.
Now, let us compile our program.
With Geany, we simply have to click the "build" button.
This will not only launch the compiling but also generate an executable program.
Be careful, the "compile" button only triggers the compiling and does not create an executable program.
So, if we click this "build" button, a message will appear here, informing us that the compiling has ended successfully.
Since everything went good, we can now execute our program.
To that end, we simply have to click the "execute" button.
A window opens and prints our message.
VoilÃ  ! We have created and executed our first C++ program.
In the directory where we saved the
C++ program, there is now a new file called
"hellowolrd" without exention or with the extension ".exe", if you are using Windows.
This is the executable file we have just created.
We can now launch this file without passing by Geany.
As by clicking the "execute" button on Geany, a window opens and our message appears.
It is probable that, while typing this first program, you have made a typo.
What happens then?
And what should we do in such a case?
For example, let us suppose that you have omitted the semicolon after the "endl".
The compiler will display an error message, indicating that it was expecting a semicolon before the "return".
It also indicates the line number where the error occured.
Be careful though, this line number is only indicative; it is possible for the error to have occured in the previous line, as is the case here.
By the way, if we click on the error message,
Geany will send us to the corresponding line.
Now, if we put back the semicolon, the compiling will, again, be successfull.
Now, if, instead of "std" you had typed, for example, "sdt", the compiler would generate many mistakes.
No need to panic; one always has to start by correcting the first mistake and then compile again.
Very often, a mistake is caused by another mistake occurring before in the program.
If we correct the "sdt" to "std", all the mistakes will disappear.
To sum up : be thourough while typing your programs, mind the presentation and, in case of mistake, always correct the first mistake and compile again.
Very often, this will correct, at least, some of the following mistakes.
In order to find this mistake, start by checking the line number indicated by the compiler (do not forget that the error may have occurred on the previous line).
Then, interpret the error message displayed by the compiler in order to understand the problem.
If you have not done so already, we invite you to open your development environment and create your own helloworld program.
