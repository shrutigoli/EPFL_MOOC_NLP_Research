1
00:00:05,645 --> 00:00:07,570
In the previous episodes,

2
00:00:07,570 --> 00:00:10,030
we have mostly focused on
dynamic arrays.

3
00:00:10,030 --> 00:00:12,191
Namely, arrays whose size
can change

4
00:00:12,191 --> 00:00:14,185
during the course of the program.

5
00:00:14,185 --> 00:00:18,709
Let us now focus on arrays whose
size is known a priori.

6
00:00:18,709 --> 00:00:21,884
A priori means, at the time when
we are writing the program.

7
00:00:21,884 --> 00:00:25,708
Then, the size cannot vary
during the usage.

8
00:00:25,708 --> 00:00:29,554
For example, if we are trying to code
a program on two-dimensional geometry,

9
00:00:29,554 --> 00:00:31,700
with two-dimensional vectors,

10
00:00:31,700 --> 00:00:35,491
our arrays will always contain
two coorddinates.

11
00:00:35,491 --> 00:00:37,916
This number is known a priori :
it is 2,

12
00:00:38,046 --> 00:00:41,716
It does not vary during the course
of the program.

13
00:00:42,023 --> 00:00:45,281
Another example: if you wish to program
a chess game.

14
00:00:45,281 --> 00:00:48,310
A priori, before you start writing
the program,

15
00:00:48,310 --> 00:00:49,772
you know, for example, that there
will be two players.

16
00:00:49,772 --> 00:00:51,719
You know that this number will
never change.

17
00:00:51,719 --> 00:00:56,519
You also know that the chessboard
has 8 rows and 8 columns.

18
00:00:56,519 --> 00:01:00,614
You know these numbers a priori and
they will not change.

19
00:01:00,614 --> 00:01:05,559
We are in the case where the size is known
a priori and does not evolve.

20
00:01:05,559 --> 00:01:07,521
Thus, in this part here of the table.

21
00:01:07,521 --> 00:01:14,634
We call those "static arrays"
or "fix-sized arrays".

22
00:01:15,636 --> 00:01:19,009
In C++, there are, since the new
C++-11 norm,

23
00:01:19,092 --> 00:01:21,813
two types of fix-sized arrays.

24
00:01:22,103 --> 00:01:26,484
The "array" type introduced with this
new norm in 2011,

25
00:01:26,484 --> 00:01:32,192
and the arrays inherited from C++'s ancester:
the C language.

26
00:01:32,321 --> 00:01:34,055
We call those the arrays "à la C".

27
00:01:34,262 --> 00:01:36,350
In this episode, we will now

28
00:01:36,350 --> 00:01:38,272
focus on the C++-11 "arrays".

29
00:01:39,042 --> 00:01:42,255
The "arrays" have been introduced in
the new C++-11 norm

30
00:01:42,255 --> 00:01:45,237
since the arrays "à la C", also called
"building arrays"

31
00:01:45,237 --> 00:01:47,277
beget a few inconveniences.

32
00:01:47,277 --> 00:01:50,015
First of all, they are systematically
passed by reference,

33
00:01:50,015 --> 00:01:53,482
even if we do not put the '&' sign
of the passage by reference

34
00:01:53,482 --> 00:01:54,981
to the function arguments.

35
00:01:55,016 --> 00:01:57,347
The arrays "à la C" are passed
by reference.

36
00:01:57,731 --> 00:02:00,759
Secondly, they are never aware
of their own size.

37
00:02:00,759 --> 00:02:03,193
On the other hand, for C++-11 "arrays", just like
"vectors",

38
00:02:03,193 --> 00:02:05,159
we have an easy way to know their size.

39
00:02:05,159 --> 00:02:08,329
Also, arrays "à la C" cannot be globally
manipulated.

40
00:02:08,329 --> 00:02:11,233
If we have an array "tab1" and
an array "tab2",

41
00:02:11,233 --> 00:02:15,807
we cannot do, with arrays "à la C",
" tab1 = tab2 ".

42
00:02:16,257 --> 00:02:20,547
Also, we cannot have a function
return an array "à la C",

43
00:02:20,547 --> 00:02:24,804
The return type of a function cannot
be an "array à la C".

44
00:02:24,804 --> 00:02:28,386
Finally, "arrays à la C" have a particular
initialization syntax

45
00:02:28,386 --> 00:02:30,494
which is not as general as,
for example, the "vectors.

46
00:02:31,024 --> 00:02:33,883
Consequently, we daresay that,
since the 2011 norm,

47
00:02:33,883 --> 00:02:37,266
since the new "arrays" type, the "arrays à la C"
no longer have any use in C++.

48
00:02:37,266 --> 00:02:40,161
However, they used to be widely used,
and therefore, by inertia,

49
00:02:40,161 --> 00:02:43,467
by habit, they will still be
widely used.

50
00:02:43,467 --> 00:02:45,593
For the ones of you who would
like to study this topic,

51
00:02:45,593 --> 00:02:49,050
we will add an annexe on the
"arrays à la C".

52
00:02:49,050 --> 00:02:51,893
Let us now move on the "arrays" of
C++-11.

53
00:02:52,503 --> 00:02:54,533
We want to use a fix-sized array,

54
00:02:54,533 --> 00:02:57,839
an array whose size is known when
we are writing the program.

55
00:02:57,839 --> 00:03:01,996
This is the decisive question you need to ask
yourself when hesitating between "array" and "vector".

56
00:03:01,996 --> 00:03:06,463
In order to declare a fix-sized array,
we will use the "array" type.

57
00:03:06,463 --> 00:03:09,066
Of course, our program will need
to start with

58
00:03:09,066 --> 00:03:11,890
the directive "#include<array> ".

59
00:03:11,890 --> 00:03:17,490
Then, we will declare our array
with the keyword "array".

60
00:03:17,490 --> 00:03:21,935
Just after, we will write the type and the size,

61
00:03:21,935 --> 00:03:23,707
which is indeed known.

62
00:03:23,707 --> 00:03:26,606
This size is what is new compared
to "vectors".

63
00:03:26,606 --> 00:03:29,674
Indeed, it is known when we are writing the program.

64
00:03:29,674 --> 00:03:34,251
Then, as usual, we will finish with
the name we wish to give to the array.

65
00:03:34,941 --> 00:03:39,370
For example, if we wish to declare
an array containing doubles.

66
00:03:39,370 --> 00:03:44,615
An array whose size is fixed 3,
and containing doubles only,

67
00:03:44,615 --> 00:03:47,047
we will write :

68
00:03:47,047 --> 00:03:53,535
" array< double , 3> " and, just after,
the name.

69
00:03:53,535 --> 00:03:55,896
For example, here "vecteur_3d ".

70
00:03:55,896 --> 00:04:00,932
Beforehand, we have included, at the
beginning of our programm the "array" library.

71
00:04:00,932 --> 00:04:04,800
We this declaration, we thus have an "array",
which is a fix-sized array.

72
00:04:04,800 --> 00:04:06,316
Its size will not be able to evolve.

73
00:04:06,316 --> 00:04:09,268
The size given at the very
beginning

74
00:04:09,268 --> 00:04:12,105
will be the size during the whole
run of the program.

75
00:04:12,105 --> 00:04:16,960
It contains enough room to
store three doubles.

76
00:04:18,120 --> 00:04:21,650
Another example, if we wished
to declare the inhabitants

77
00:04:21,650 --> 00:04:24,866
of a certain numbers of districts
(known a priori).

78
00:04:24,866 --> 00:04:28,441
We can very well declare it like this,
a constant expression.

79
00:04:28,441 --> 00:04:31,416
"const", the number of districts.

80
00:04:31,416 --> 00:04:34,023
It is of the "size_t" type
since we know

81
00:04:34,023 --> 00:04:37,160
that we are indicating an
array size here.

82
00:04:37,160 --> 00:04:39,897
Thus, "nb_cantons", the name of the variable.
[TN: "canton" means "district"]

83
00:04:39,905 --> 00:04:44,114
Here, we can initialize it to 26.
[TN: there are 26 districts in Switzerland].

84
00:04:44,261 --> 00:04:48,347
This then allows us to make good use
of this variable here,

85
00:04:48,347 --> 00:04:50,035
as the number of districts

86
00:04:50,035 --> 00:04:54,415
in our dynamic array here :
An "array" of "unsigned int".

87
00:04:54,415 --> 00:04:56,310
Those are positive integers.

88
00:04:56,310 --> 00:04:58,329
The number of inhabitants is
a positive integer.

89
00:04:58,329 --> 00:05:00,715
We are indicating the name here.

90
00:05:01,325 --> 00:05:06,336
Therefore, "habitant" is an array containing
exactly

91
00:05:06,336 --> 00:05:11,234
26 unsigned integers 
(26 unsigned int ).

92
00:05:11,744 --> 00:05:14,961
We have just seen how to declare
a fix-sized array.

93
00:05:14,961 --> 00:05:18,562
Of course, we can also initialize it.
This means we can give it values

94
00:05:18,562 --> 00:05:19,616
when we declare it.

95
00:05:19,616 --> 00:05:23,727
For that, we use a usual syntax, rather
similar to the one encountered for the vectors.

96
00:05:23,727 --> 00:05:27,232
Between parentheses here, the
value for an array,

97
00:05:27,232 --> 00:05:29,670
that is, all the values.

98
00:05:29,670 --> 00:05:32,396
Of course, we should not forget
the braces

99
00:05:32,396 --> 00:05:35,903
for a set of values indicating the initial
values of the aray;

100
00:05:35,903 --> 00:05:38,227
each value being separated by a comma.

101
00:05:38,557 --> 00:05:42,870
For example, if we wish to declare
an array with 5 integers,

102
00:05:42,870 --> 00:05:45,722
a static array, a fix-sized array
of 5 inzegers,

103
00:05:45,722 --> 00:05:47,376
we declare, here, "array".

104
00:05:47,376 --> 00:05:50,084
Each element will be of the int type.

105
00:05:50,084 --> 00:05:53,898
Then, we will pass the size which is known
while we are writing the program.

106
00:05:53,898 --> 00:05:55,758
Here, we have previously 
declared it

107
00:05:55,758 --> 00:05:58,491
as a constant expression of
the type "size_t".

108
00:05:58,491 --> 00:06:01,036
We decided to call it "taille" [TN: means "size"],
and it contains 5.

109
00:06:01,036 --> 00:06:05,608
Thus, we will declare an array
containing 5 integers.

110
00:06:05,608 --> 00:06:07,881
We call this array "ages".

111
00:06:07,881 --> 00:06:13,754
Then, we initialize it between parentheses
with the values given

112
00:06:13,754 --> 00:06:16,788
as a set of values with the braces.

113
00:06:16,788 --> 00:06:19,187
The set of value is separated
by commas.

114
00:06:19,187 --> 00:06:25,683
Thus, 20, 35, 26, 38, 22; which will give us
the array represented here.

115
00:06:26,213 --> 00:06:29,066
There is a second way to
initialize arrays.

116
00:06:29,066 --> 00:06:31,018
We had seen it already for the
dynamic arrays.

117
00:06:31,018 --> 00:06:32,750
It is the equals sign.

118
00:06:32,750 --> 00:06:35,312
Then, again, on the other side
of the equals sign,

119
00:06:35,312 --> 00:06:38,214
the set of values between braces and
separated by commas.

120
00:06:38,214 --> 00:06:40,960
In the previous example, we could
have used this way.

121
00:06:40,960 --> 00:06:43,543
Of course, we cannot use both
ways at the same time.

122
00:06:43,543 --> 00:06:44,750
It is an alternative.

123
00:06:44,750 --> 00:06:47,791
But, we could have declared
our "ages" array

124
00:06:47,791 --> 00:06:52,325
and initialized it with the equals
sign and braces.

125
00:06:52,325 --> 00:06:55,635
By the way, certain compilers will
only tolerate this

126
00:06:55,635 --> 00:06:58,313
second initialization way.

127
00:06:58,313 --> 00:07:01,118
Others tolerate both ways.

128
00:07:01,118 --> 00:07:05,068
Also, please note that an
uninitialized fix-sized array

129
00:07:05,068 --> 00:07:09,099
may contain just about anything. This
means we do not know what it contains.

130
00:07:09,669 --> 00:07:12,854
Now that we have declared and
initialized our fix-sized array,

131
00:07:12,854 --> 00:07:14,723
we may start using it.

132
00:07:14,723 --> 00:07:17,520
There is here nothing more in comparison
with "vectors".

133
00:07:17,520 --> 00:07:19,910
The syntax is truly the same.

134
00:07:19,910 --> 00:07:24,319
If we want to use an element at
the position "i" of a static array

135
00:07:24,319 --> 00:07:27,066
called "tab", we will use " tab[i] ".

136
00:07:27,066 --> 00:07:29,863
This is exactly the same as for
vectors.

137
00:07:29,863 --> 00:07:32,755
We can also iterate on a
static array

138
00:07:32,755 --> 00:07:36,320
with an exact similar syntax as the
one used for vectors.

139
00:07:36,320 --> 00:07:42,902
We can either use the C++-11 "for" :
 for(auto element : tableau)  

140
00:07:42,902 --> 00:07:45,079
or with a classical "for".

141
00:07:45,969 --> 00:07:49,562
The "array"s have also a specific
function "size"

142
00:07:49,562 --> 00:07:51,057
returning their size.

143
00:07:51,057 --> 00:07:55,540
Again, we can very well write,
as we did for dynamic arrays,

144
00:07:55,540 --> 00:08:00,398
" tab.size() " to obtain the size of a
static array "tab".

145
00:08:01,078 --> 00:08:03,733
We can also use global
assignments.

146
00:08:03,733 --> 00:08:06,538
Globally assign an array "tab1" to
another "tab2".

147
00:08:06,538 --> 00:08:12,220
If we have declared an array of integers
 "tab1" which size is 3

148
00:08:12,220 --> 00:08:13,384
- its size will not change -

149
00:08:13,384 --> 00:08:16,363
initialized to the values 1, 2 and 3.

150
00:08:16,363 --> 00:08:20,452
We can very well copy
it directly

151
00:08:20,452 --> 00:08:26,143
into another static array of the
same size (3, here)

152
00:08:26,143 --> 00:08:28,582
by writing this : " tab2 = tab1 ".

153
00:08:28,582 --> 00:08:32,463
This will fully copy "tab1" into "tab2".

154
00:08:32,803 --> 00:08:35,631
Of course, they still remain two
completely separated arrays.

155
00:08:35,631 --> 00:08:38,546
it simply copies "tab1" into "tab2",

156
00:08:38,716 --> 00:08:42,536
but "tab1" and "tab2" will still live their
own life separately.

157
00:08:42,536 --> 00:08:47,400
If we modify "tab1", "tab2" will naturally
not be impacted.

158
00:08:48,300 --> 00:08:50,285
As you can see, the utilization
of arrays

159
00:08:50,285 --> 00:08:52,282
is very similar to the one of "vectors".

160
00:08:52,282 --> 00:08:55,866
The sole difference is that the size
of "arrays" is fixed from the start

161
00:08:55,866 --> 00:08:57,407
and cannot be modified.

162
00:08:57,407 --> 00:09:00,370
Similarly, while we could build
"vectors" of "vectors",

163
00:09:00,370 --> 00:09:02,731
we can also build "arrays" of "arrays" :

164
00:09:02,731 --> 00:09:04,752
static arrays of static arrays.

165
00:09:04,752 --> 00:09:07,102
Then, if need be we can of course
combine the two :

166
00:09:07,102 --> 00:09:09,034
building static arrays of vectors,

167
00:09:09,034 --> 00:09:11,317
vectors of static arrays and so on.

168
00:09:11,837 --> 00:09:14,655
Now, let us have look at static
arrays of static arrays,

169
00:09:14,655 --> 00:09:16,124
"arrays" of "arrays".

170
00:09:16,124 --> 00:09:18,590
What  we did for "vectors"
of "vectors",

171
00:09:18,590 --> 00:09:21,056
we can do for "arrays" of "arrays".

172
00:09:21,056 --> 00:09:24,054
The only difference is that we will
have to indicate the sizes.

173
00:09:24,054 --> 00:09:27,777
For example, we can have
an "array" of 2...

174
00:09:29,197 --> 00:09:34,918
Of two what?
Of two "arrays" of two doubles.


175
00:09:34,918 --> 00:09:39,916
We thus have a matrix which
we will call "rotation".

176
00:09:39,916 --> 00:09:42,668
This is a matrix we are wont
to represent

177
00:09:42,668 --> 00:09:45,964
as a 2x2 arrays containing
4 elements.

178
00:09:45,964 --> 00:09:51,762
It is indeed an array of two
"arrays of two doubles".

179
00:09:51,762 --> 00:09:57,904
Here is the declaration of a 2x2
static array.

180
00:09:57,904 --> 00:10:00,320
Of course, we can come up
with many other examples.

181
00:10:00,320 --> 00:10:03,026
We could build an array
collecting

182
00:10:03,026 --> 00:10:04,896
statistics on the districts.

183
00:10:04,896 --> 00:10:10,119
We will thus have the first-dimensional
array containing the districts.

184
00:10:10,119 --> 00:10:14,639
Its size being the number of districts.
Then, each districts will itself have

185
00:10:14,639 --> 00:10:18,198
a certain number of statistics.
For example, two statistics

186
00:10:18,198 --> 00:10:20,462
such as the surface and the
number of inhabitants.

187
00:10:20,722 --> 00:10:23,314
We can even build more
complicated objects.

188
00:10:23,314 --> 00:10:26,571
such as three-dimensional arrays :
arrays of arrays of arrays.

189
00:10:26,571 --> 00:10:29,840
Mathematically, this corresponds
to tensors.

190
00:10:29,840 --> 00:10:33,281
What matters is to truly
understand the different sizes.

191
00:10:33,281 --> 00:10:35,749
We will have an array of 3,

192
00:10:37,429 --> 00:10:40,842
of 3 arrays of 2,

193
00:10:42,135 --> 00:10:44,865
arrays of 2,

194
00:10:44,865 --> 00:10:48,787
arrays of 4 elements.

195
00:10:53,394 --> 00:10:57,435
This layer of 2 * 4 elements is
reproduced

196
00:10:57,435 --> 00:11:00,276
three times in the initial array.

197
00:11:00,786 --> 00:11:03,687
Certainly, this is rather complicated
and uncommon.

198
00:11:03,687 --> 00:11:05,989
The goal is to simply show
that we may generalize

199
00:11:05,989 --> 00:11:08,511
to virtually any number of arrays

200
00:11:08,511 --> 00:11:11,493
and mostly to indicate the
order of the different sizes.

201
00:11:12,133 --> 00:11:15,271
Let us now illustrate the use of
these multi-dimensional arrays.

202
00:11:15,271 --> 00:11:19,718
Let us go back to what we had
called the "rotation" matrix.

203
00:11:19,718 --> 00:11:23,140
It is 2x2 array of doubles

204
00:11:23,140 --> 00:11:25,537
which we represent like this.

205
00:11:25,537 --> 00:11:27,528
The utilization is exactly similar
to the one of the "vectors".

206
00:11:27,528 --> 00:11:30,823
We will use the the brackets
with two dimensions.

207
00:11:30,823 --> 00:11:33,593
Let us look at "rotation" of 1.

208
00:11:33,593 --> 00:11:36,744
Please remember that the size notation
starts with 0 and ends with "size - 1".

209
00:11:36,744 --> 00:11:38,755
Here, we have  rotation[1] 

210
00:11:38,755 --> 00:11:44,018
In "rotation" of 1, we will seach for the
element at the position 0.

211
00:11:44,018 --> 00:11:50,612
To this element here, we will
give the value 0.231 .

212
00:11:50,612 --> 00:11:56,688
Here, we are indeed focusing on
the element : " rotation[1][0] "

213
00:11:56,688 --> 00:12:00,543
Similarly, let us go back to our
array of statistics

214
00:12:00,543 --> 00:12:09,950
Here, " statistique[i] " is thus an *array"
containing "nb_statistiques" ints.

215
00:12:09,950 --> 00:12:14,103
It is an "array" of "nb_statistiques"
integers.

216
00:12:14,103 --> 00:12:16,648
Itself, is an array which size
is "nb_statistiques".

217
00:12:17,058 --> 00:12:19,128
This is rigorously similar to how
we used to proceed

218
00:12:19,128 --> 00:12:21,199
with vectors of vectors.

219
00:12:21,199 --> 00:12:24,784
Nothing new here, except that
the sizes are fixed.

220
00:12:24,784 --> 00:12:27,995
All rows thus have the same
size/length.

221
00:12:27,995 --> 00:12:31,194
However, a little specifity in
comparison to "vectors".

222
00:12:31,194 --> 00:12:34,260
This regards the initialization
of "arrays" of "arrays".

223
00:12:34,260 --> 00:12:37,672
The syntax currently suppored
by the compilers

224
00:12:37,672 --> 00:12:40,874
only tolerates one single brace
in the initializations.

225
00:12:41,304 --> 00:12:46,337
For example, if we build a
static array of static array,

226
00:12:46,337 --> 00:12:52,653
for example, 4 times 3 integers.

227
00:12:52,653 --> 00:12:55,688
Here, we are putting integers
we wish to initialize.

228
00:12:55,688 --> 00:12:58,686
Unlike vectors,

229
00:12:58,686 --> 00:13:02,924
we will have to initialize simply
with one single brace.

230
00:13:02,924 --> 00:13:07,004
Inside, we will put
the set of values

231
00:13:07,004 --> 00:13:09,434
we wish to declare, in
the reading order.


232
00:13:09,434 --> 00:13:13,887
Here, for example, 0, 1, 2
and then 3, 4, 5

233
00:13:13,887 --> 00:13:16,443
simply separated by commas.

234
00:13:16,443 --> 00:13:20,176
Voilà, this is the syntax
currently used to initialize

235
00:13:20,176 --> 00:13:22,115
static arrays of static arrays.

236
00:13:22,755 --> 00:13:24,899
To conclude, let us sum up
the different syntaxes

237
00:13:24,899 --> 00:13:26,952
between static arrays and
dynamic arrays,

238
00:13:26,952 --> 00:13:29,704
between "arrays" and "vectors".

239
00:13:29,704 --> 00:13:32,651
The size of dynamic arrays
can vary

240
00:13:32,651 --> 00:13:34,408
while the program is being
executed.

241
00:13:34,408 --> 00:13:37,521
On the other hand, the size
of static arrays must be known

242
00:13:37,521 --> 00:13:40,527
while we are writing the program.

243
00:13:40,867 --> 00:13:43,340
The dynamic arrays are of the
type "vector".

244
00:13:43,340 --> 00:13:45,666
The static arrays are of the
type "array".

245
00:13:45,666 --> 00:13:49,806
When we declare a dynamic
we can declare it empty

246
00:13:49,806 --> 00:13:52,462
- it is fully possible to declare
an empty dynamic array -

247
00:13:52,462 --> 00:13:57,071
or we can give it an initial
size, for example, 5.

248
00:13:57,071 --> 00:14:01,328
However, this size may vary during
the course of the program.

249
00:14:01,328 --> 00:14:04,455
We can very well add or
remove elements.

250
00:14:04,455 --> 00:14:08,376
For static arrays, the size must
absolutely be known.

251
00:14:08,376 --> 00:14:10,966
We can either write it like this,
or use a variable.

252
00:14:10,966 --> 00:14:13,719
One way or the other, this
size must absolutely be known.

253
00:14:13,719 --> 00:14:17,750
Here, we only have one syntax
for static arrays.

254
00:14:17,750 --> 00:14:21,120
Then, in order to
use the elements of an array,

255
00:14:21,120 --> 00:14:23,839
the syntax is the same for
static or dynamic arrays.

256
00:14:23,839 --> 00:14:25,516
For one dimension : " tab[i] ".

257
00:14:25,516 --> 00:14:27,808
If the array has two dimensions :
" tab[i][j] "

258
00:14:27,808 --> 00:14:30,868
In order to know the size of an array,
static or dynamic,

259
00:14:30,868 --> 00:14:32,583
we use the function "size".

260
00:14:32,583 --> 00:14:35,458
In order to go through an array,
dynamic or static,

261
00:14:35,458 --> 00:14:36,933
we proceed the same way :

262
00:14:36,933 --> 00:14:38,828
we can either use a classical
"for" loop

263
00:14:38,828 --> 00:14:43,753
or use a C++-11 loop with
the colons.

264
00:14:43,753 --> 00:14:45,983
If we wish to go through the array
without modifying the elements,

265
00:14:45,983 --> 00:14:49,953
we will write "for auto" followed by the
name we wish to use for the elements.

266
00:14:49,953 --> 00:14:53,819
If we wish to modify the elements,
we should not forget to add the ampersand ('&').

267
00:14:53,819 --> 00:14:56,709
This is the same for
a static array

268
00:14:56,709 --> 00:14:58,618
or a dynamic array.

269
00:14:58,618 --> 00:15:00,514
Then, in a dynamic array,

270
00:15:00,514 --> 00:15:03,569
we may possibly add
elements.

271
00:15:03,569 --> 00:15:06,057
This is only possible for dynamic
arrays

272
00:15:06,057 --> 00:15:08,545
and does not exist
for static arrays.

273
00:15:08,545 --> 00:15:11,454
We cannot modify a
static array.

274
00:15:11,454 --> 00:15:14,422
For dynamic arrays, we add elements
with "push_back".

275
00:15:14,422 --> 00:15:19,498
This will add the value we have given
to "x" at the end of the array.

276
00:15:19,498 --> 00:15:21,912
We will thus copy "x" at the end
of the array.

277
00:15:21,912 --> 00:15:24,493
If we wish to remove the last
element of a dynamic array,

278
00:15:24,493 --> 00:15:28,165
then, we will use "pop_back".
Of course, this does not exist

279
00:15:28,165 --> 00:15:30,910
for static arrays since we cannot
modify them.

280
00:15:31,840 --> 00:15:35,135
Finally, a last difference,
regarding the initialization

281
00:15:35,135 --> 00:15:38,336
of dynamic arrays of
dynamic arrays.

282
00:15:38,336 --> 00:15:41,928
We can use the syntax supported
by all compilers

283
00:15:41,928 --> 00:15:47,391
of the initialization with an array
of arrays between parentheses.

284
00:15:47,391 --> 00:15:51,436
For static arrays of static
arrays,

285
00:15:51,436 --> 00:15:54,651
we will have to use the
"equals" syntax

286
00:15:54,651 --> 00:15:58,368
with only one level
of braces

287
00:15:58,368 --> 00:16:00,537
with the list of the desired values.
Like this.

288
00:16:00,537 --> 00:16:03,410
One behind the other.
