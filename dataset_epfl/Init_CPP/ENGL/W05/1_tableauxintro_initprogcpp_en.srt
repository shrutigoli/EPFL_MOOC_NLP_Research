1
00:00:05,811 --> 00:00:08,085
In this episode and the next,

2
00:00:08,085 --> 00:00:10,049
we are going to focus less on the processing,

3
00:00:10,049 --> 00:00:12,997
and more on the data.

4
00:00:12,997 --> 00:00:15,216
As you already know, in a programming language,

5
00:00:15,216 --> 00:00:18,437
data are represented by variables.

6
00:00:18,437 --> 00:00:21,767
And in C++, variables are typed.

7
00:00:21,767 --> 00:00:24,129
At this stage of the course, we have mainly introduced

8
00:00:24,129 --> 00:00:27,177
the int type, to represent integers,

9
00:00:27,177 --> 00:00:30,874
the double type, to represent
real variables,

10
00:00:31,234 --> 00:00:33,025
and we also evoked the bool type

11
00:00:33,025 --> 00:00:35,981
to represent truth values.

12
00:00:35,981 --> 00:00:41,162
These types, int, double, bool, which are called the elementary types,

13
00:00:41,162 --> 00:00:43,608
are used to represent simple data of the world,

14
00:00:43,608 --> 00:00:46,789
like dimensions, sums, logical
expressions.

15
00:00:46,789 --> 00:00:49,907
But how about more complex, more
structured data ?

16
00:00:49,907 --> 00:00:53,686
Suppose we'd like to manage

17
00:00:53,686 --> 00:00:55,488
the ages of the students

18
00:00:55,488 --> 00:00:58,246
following this course.

19
00:00:58,756 --> 00:01:00,915
Or suppose we'd like to

20
00:01:00,915 --> 00:01:04,054
manage population statistics,

21
00:01:04,054 --> 00:01:06,512
how would these statistics be represented ?

22
00:01:06,512 --> 00:01:10,578
How would be represented a set, an array, of data (ages) ?

23
00:01:10,878 --> 00:01:12,494
Or in the case of statistics,

24
00:01:12,494 --> 00:01:16,616
how would a person involved in the statistics
be represented ?

25
00:01:16,616 --> 00:01:19,384
In both cases, we'll use what is known
as  data structure.

26
00:01:19,384 --> 00:01:23,163
As another example, how would we represent
the names of the persons involved in the statistics

27
00:01:23,163 --> 00:01:25,185
using the types we have seen until now ?

28
00:01:25,185 --> 00:01:26,878
We wouldn't know how to do it.

29
00:01:26,878 --> 00:01:30,263
This episode will look at arrays.

30
00:01:30,263 --> 00:01:32,744
We'll see later in other episodes,

31
00:01:32,744 --> 00:01:34,473
how to represent sequence of characters,

32
00:01:34,473 --> 00:01:37,448
and then how to represent
structures,

33
00:01:37,448 --> 00:01:40,293
namely, how to represent a line in 
such an array.

34
00:01:40,293 --> 00:01:42,438
But let us begin with arrays.

35
00:01:42,758 --> 00:01:45,496
Let's suppose that we want to create
a game program

36
00:01:45,496 --> 00:01:48,987
and that we have to manage the
players' scores,

37
00:01:48,987 --> 00:01:51,825
we would like for example to display the
score

38
00:01:51,825 --> 00:01:53,323
of every player,

39
00:01:53,323 --> 00:01:57,656
as well as the  deviation
of these scores from the mean.

40
00:01:57,656 --> 00:01:59,113
How would we proceed ?

41
00:01:59,113 --> 00:02:02,051
Let's modestly begin by handling

42
00:02:02,051 --> 00:02:04,179
the case of a two-player program.

43
00:02:04,179 --> 00:02:06,573
What we would do, of course, is
to introduce

44
00:02:06,573 --> 00:02:09,660
a variable for the score
of each of the two players.

45
00:02:09,660 --> 00:02:13,100
So, let's say that their scores are here
 integers,

46
00:02:13,100 --> 00:02:17,374
which will be initialized using 
a particular function here.

47
00:02:17,374 --> 00:02:22,216
This function would  calculate and
return the score.

48
00:02:22,616 --> 00:02:26,004
The score is computed like this
for the first player.

49
00:02:26,004 --> 00:02:28,507
Similarly,  computing the second
player's score

50
00:02:28,507 --> 00:02:31,213
is done using  the parameters 
associated with this second player.

51
00:02:31,213 --> 00:02:34,225
And then, as we want the
deviation from the mean,

52
00:02:34,225 --> 00:02:38,989
we compute the mean of the two players by using the function
 <i>moyenne</i> (TN : <i>moyenne</i> means <i>mean</i>)

53
00:02:38,989 --> 00:02:41,913
that we have already illustrated
in previous episodes.

54
00:02:41,913 --> 00:02:45,272
This function would take the scores of
our two players as parameters.

55
00:02:45,272 --> 00:02:48,932
The mean is  stored  in a variable
moyenne_joueurs of type integer.

56
00:02:48,932 --> 00:02:53,228
And finally, we could print the
scoreboard,

57
00:02:53,228 --> 00:02:57,244
by printing the first score and
the deviation from the mean,

58
00:02:57,244 --> 00:03:01,466
and then by  printing the second score
and its deviation from the mean.

59
00:03:01,946 --> 00:03:04,689
Two players is not bad, but the
question is,

60
00:03:04,689 --> 00:03:09,149
how can we improve our program
to accept more players ?

61
00:03:09,149 --> 00:03:12,286
We could simply use several
variables.

62
00:03:12,286 --> 00:03:14,577
So for example, if we wanted to
pass to five players,

63
00:03:14,577 --> 00:03:20,307
we would then typically use
five scores : one for each player.

64
00:03:20,307 --> 00:03:22,655
We would then compute the score of
each player

65
00:03:22,655 --> 00:03:24,544
using our function (with the players' specific  parameters).

66
00:03:24,544 --> 00:03:28,287
And we  would compute the
mean of all these players

67
00:03:28,287 --> 00:03:31,294
by changing this time the mean
function

68
00:03:31,294 --> 00:03:35,614
and passing the five scores to the
new mean function,

69
00:03:35,614 --> 00:03:39,637
then we would write the scoreboard
like this.

70
00:03:39,637 --> 00:03:41,961
Here, any good programmer
would immediately

71
00:03:41,961 --> 00:03:43,838
thinks of using a loop,

72
00:03:43,838 --> 00:03:47,175
and will therefore modify this
part of the program

73
00:03:47,175 --> 00:03:49,534
to introduce a loop here.

74
00:03:49,534 --> 00:03:52,716
The loop would go from the first player
to the fifth one,

75
00:03:52,716 --> 00:03:54,811
it would iterate on each player,

76
00:03:54,811 --> 00:03:58,656
and print the score of every
player,

77
00:03:58,656 --> 00:04:02,446
as well as its deviation from 
the mean.

78
00:04:02,856 --> 00:04:05,300
The question is how to do it
concretely ?

79
00:04:05,300 --> 00:04:09,363
Because firstly, writing scorei
like this, from the previous

80
00:04:09,363 --> 00:04:13,483
program, isn't valid.

81
00:04:13,483 --> 00:04:16,308
scorei would be here a variable name.

82
00:04:16,308 --> 00:04:17,962
It can't be used with different values of i.
scorei cannot stand for  score1 or score2.

83
00:04:17,962 --> 00:04:20,609
So this is something that
doesn't work.

84
00:04:20,609 --> 00:04:24,457
Also, how would we do if we moved
to 100, 1000 players ?

85
00:04:24,457 --> 00:04:27,879
It would quickly become tedious
to write 100 variables,

86
00:04:27,879 --> 00:04:31,589
modify the mean function to
take 100 parameters,

87
00:04:31,589 --> 00:04:35,176
so it's just impossible in practice.

88
00:04:35,176 --> 00:04:39,777
Finally, how would we do if the number
of players is unknown at the beginning ?

89
00:04:39,777 --> 00:04:44,220
You wouldn't know if you had to
deal with  five, two, or ten players.

90
00:04:44,500 --> 00:04:46,795
The answer to fulfill all these needs is actually the same,

91
00:04:46,795 --> 00:04:49,948
it's introducing a new type,
the array type.

92
00:04:49,948 --> 00:04:52,748
Let me give you by way of preamble
the version

93
00:04:52,748 --> 00:04:55,929
with an array of the players' score
program,

94
00:04:55,929 --> 00:04:58,132
but of course we'll detail all this

95
00:04:58,132 --> 00:04:59,988
later on in this episode.

96
00:04:59,988 --> 00:05:02,695
So, we would declare an array
of players,

97
00:05:02,695 --> 00:05:04,568
then we would loop,

98
00:05:04,568 --> 00:05:07,648
we again encounter this notion of
loop to compute the score

99
00:05:07,648 --> 00:05:09,609
of each player,

100
00:05:09,609 --> 00:05:11,602
then we would compute the mean here,

101
00:05:11,602 --> 00:05:14,486
this mean could take an array
of scores,

102
00:05:14,486 --> 00:05:17,747
and finally we would print the
final score

103
00:05:17,747 --> 00:05:20,602
with here a for loop which
iterates on all the values of the array.

104
00:05:20,602 --> 00:05:23,138
Let's have a look at these different
elements one by one.

105
00:05:23,748 --> 00:05:26,354
Let's begin with the notion
of array.

106
00:05:26,714 --> 00:05:30,087
An array is a collection, a set
of values

107
00:05:30,087 --> 00:05:33,865
which all have the same type. We speak
of homogeneous collection,

108
00:05:33,865 --> 00:05:35,946
to say that they are all the data of the collection are of the same type.

109
00:05:35,946 --> 00:05:38,686
For example, the array of scores in which
we were interested previously,

110
00:05:38,686 --> 00:05:40,354
if we take the case of four scores,

111
00:05:40,354 --> 00:05:43,726
it would be an array 
containing four integers.

112
00:05:43,726 --> 00:05:45,767
I decided that my scores
are integers.

113
00:05:45,767 --> 00:05:50,257
So, all the elements of my array
are  here of the same type (int).

114
00:05:50,257 --> 00:05:53,049
When would we use an array in
a program ?

115
00:05:53,049 --> 00:05:56,870
When we need to use several
variables of the same type,

116
00:05:56,870 --> 00:06:01,132
like, for example, the scores of our
previous game with players.

117
00:06:01,462 --> 00:06:04,505
In C++, we can create arrays of any type,

118
00:06:04,505 --> 00:06:06,896
arrays of integers, array of
doubles,

119
00:06:06,896 --> 00:06:10,134
we can create array of any
available type,

120
00:06:10,134 --> 00:06:11,868
arrays of bools, and even

121
00:06:11,868 --> 00:06:13,713
arrays of array, once we'll have

122
00:06:13,713 --> 00:06:15,541
defined this new array type.

123
00:06:16,201 --> 00:06:19,439
Generally speaking, there are
four kinds of arrays,

124
00:06:19,439 --> 00:06:21,019
depending on two questions :

125
00:06:21,019 --> 00:06:24,169
at the moment of writing the program,

126
00:06:24,169 --> 00:06:25,758
before using the array,

127
00:06:25,758 --> 00:06:28,516
do we know its size or not ?

128
00:06:28,516 --> 00:06:31,380
And, once known, can this size

129
00:06:31,380 --> 00:06:33,825
vary, or is it fixed ?

130
00:06:33,825 --> 00:06:36,523
Let's examine the different cases in turn.

131
00:06:36,523 --> 00:06:38,708
Let's begin with the case where
the size isn't known

132
00:06:38,708 --> 00:06:40,394
at the moment of writing the
program,

133
00:06:40,394 --> 00:06:44,085
and where the size can vary when
the program is executing.

134
00:06:44,085 --> 00:06:47,551
It's typically the example of the
set of ages

135
00:06:47,551 --> 00:06:49,401
of the students following this course.

136
00:06:49,401 --> 00:06:51,719
At the beginning, I have no idea
of how many students

137
00:06:51,719 --> 00:06:53,607
will attend this course.

138
00:06:53,607 --> 00:06:56,166
Then, at a given moment when I
have the array

139
00:06:56,166 --> 00:06:58,853
of all the students'ages,

140
00:06:58,853 --> 00:07:01,757
I can have other students who
register for the course,

141
00:07:01,757 --> 00:07:04,500
and therefore add ages, or
unfortunately,

142
00:07:04,500 --> 00:07:06,830
I can have students who leave
the course,

143
00:07:06,830 --> 00:07:09,438
and therefore have ages which
disappear.

144
00:07:09,438 --> 00:07:12,729
So here we have the case where
the size can vary,

145
00:07:12,729 --> 00:07:14,693
and it isn't known beforehand.

146
00:07:14,693 --> 00:07:17,374
Now let's illustrate the extreme
opposite,

147
00:07:17,374 --> 00:07:20,503
where we suppose that the size is
known beforehand,

148
00:07:20,503 --> 00:07:22,064
and that it can't change.

149
00:07:22,064 --> 00:07:26,494
Typically if you want to program a
linear algebra application,

150
00:07:26,494 --> 00:07:30,184
if you have 2D vectors, you
know that such vectors

151
00:07:30,184 --> 00:07:34,380
always have two coordinates, so they will
always be arrays

152
00:07:34,380 --> 00:07:38,111
with two numbers representing
the x and y coordinates.

153
00:07:38,111 --> 00:07:40,744
The size is known, it is
a priori two,

154
00:07:40,744 --> 00:07:44,077
and the size won't change,
it will always be two.

155
00:07:44,547 --> 00:07:47,038
In the case where the size isn't
known at the beginning,

156
00:07:47,038 --> 00:07:49,414
but once set, the size doesn't
change,

157
00:07:49,414 --> 00:07:52,726
we could take the example of a game,
with a fixed number of players.

158
00:07:52,726 --> 00:07:54,961
At the beginning we don't know
how many players we'll have,

159
00:07:54,961 --> 00:07:58,416
if three people will participate in the
fame, or ten people,

160
00:07:58,416 --> 00:08:00,865
but once the number of players is
set,

161
00:08:00,865 --> 00:08:03,184
we can't change it anymore.

162
00:08:03,184 --> 00:08:05,506
So here the size isn't known
at the beginning,

163
00:08:05,506 --> 00:08:07,846
but once it is known, 

164
00:08:07,846 --> 00:08:11,054
it can't change during the program's
execution.

165
00:08:11,414 --> 00:08:14,830
Finally, the last case, maybe
the little rarer one,

166
00:08:14,830 --> 00:08:17,321
and more difficult to
illustrate,

167
00:08:17,321 --> 00:08:20,221
is the case where we know the size
a priori,

168
00:08:20,221 --> 00:08:21,694
at the moment that we write the
program,

169
00:08:21,694 --> 00:08:24,993
but that size can still change.

170
00:08:24,993 --> 00:08:27,590
This would typically be if we wanted
to create a program

171
00:08:27,590 --> 00:08:30,938
which stores statistics for,
for example,

172
00:08:30,938 --> 00:08:33,517
the number of "cantons" (TN: "districts" or "states")
in a country, it's something we know.

173
00:08:33,517 --> 00:08:35,819
At the beginning we have 26 cantons (ed. in
Switzerland), and maybe, one day,

174
00:08:35,819 --> 00:08:38,865
another canton will be created,

175
00:08:38,865 --> 00:08:43,338
or two cantons will merge, so the
number would decrease.

176
00:08:43,338 --> 00:08:46,035
It's a limit case, and I confess that,
indeed,

177
00:08:46,035 --> 00:08:48,352
this case is much more rare.

178
00:08:48,732 --> 00:08:52,398
Two complementary remarks,
to conclude with arrays.

179
00:08:52,398 --> 00:08:55,269
First note that if we know how to
do

180
00:08:55,269 --> 00:08:58,745
arrays with a non-fixed size, and which
can vary,

181
00:08:58,745 --> 00:09:01,933
then we can obviously create all the other
arrays with this one,

182
00:09:01,933 --> 00:09:03,682
that's a first remark.

183
00:09:03,872 --> 00:09:05,724
Then, second observation :

184
00:09:05,724 --> 00:09:08,365
practically no programming language

185
00:09:08,365 --> 00:09:09,983
offers the four variants explicitely.

186
00:09:09,983 --> 00:09:13,590
For example, in C++, we only have two kinds
of arrays,

187
00:09:13,590 --> 00:09:17,122
we have  dynamic arrays, represented
by the vector type,

188
00:09:17,122 --> 00:09:20,541
and static, or fixed-size ones,

189
00:09:20,541 --> 00:09:24,711
which are, since C++ 2011,
represented by the array type,

190
00:09:24,711 --> 00:09:29,617
or else a former type which is inherited
from the ancestor of C++,

191
00:09:29,617 --> 00:09:32,301
which we call C, so the "C-type"
arrays.
