1
00:00:06,019 --> 00:00:09,760
In this episode, let's have a look
at typical simple applications

2
00:00:09,760 --> 00:00:13,064
of the concepts presented until now
related to "dynamic arrays" [a.k.a. "vectors"].

3
00:00:13,471 --> 00:00:15,792
Let's assume, for example, that we
have

4
00:00:15,808 --> 00:00:19,958
a dynamic array that contains "doubles",
that we name "tab";

5
00:00:19,958 --> 00:00:23,981
it is initialized  at the beginning
with 10 "doubles", all null.

6
00:00:24,246 --> 00:00:27,035
How can we print the
elements of the vector?

7
00:00:27,039 --> 00:00:29,073
If you don't need to print
the indexes,

8
00:00:29,073 --> 00:00:32,797
for instance to print "the element at position 0 is"
or "the first element is",

9
00:00:32,809 --> 00:00:35,466
but only print the contents
of the vector,

10
00:00:35,466 --> 00:00:38,990
you can use an iteration
as introduced in C++ 2011.

11
00:00:38,990 --> 00:00:41,180
So, for example, begin by

12
00:00:41,180 --> 00:00:44,017
printing a message "Le tableau contient :"
[TN: means "The vector contains:" ]

13
00:00:44,017 --> 00:00:49,997
then use a C++-11 loop with the columns (':')
[TN: a.k.a. "for-range loop"]

14
00:00:49,997 --> 00:00:51,343
here, which separate

15
00:00:51,343 --> 00:00:55,023
on one side the vector that we
want to iterate over,

16
00:00:55,023 --> 00:00:56,983
named "tab" and then,
on the other side,

17
00:00:56,987 --> 00:00:59,761
choose a name of an element
to iterate through this vector

18
00:00:59,761 --> 00:01:01,991
so we'll name it here "element".

19
00:01:01,991 --> 00:01:03,621
Here we have a loop

20
00:01:03,640 --> 00:01:05,518
that will stop at this point

21
00:01:05,518 --> 00:01:07,724
and that uses

22
00:01:08,524 --> 00:01:10,843
the variable name "element"

23
00:01:10,843 --> 00:01:14,789
to indicate the different elements of
this vector "tab".

24
00:01:14,789 --> 00:01:15,657
As here

25
00:01:15,657 --> 00:01:17,764
iterating through the vector to 
print it

26
00:01:17,764 --> 00:01:19,602
doesn't modify the vector,

27
00:01:19,602 --> 00:01:21,059
we don't need to add

28
00:01:21,059 --> 00:01:25,067
the reference character between
"auto" and the variable name.

29
00:01:25,931 --> 00:01:27,450
On the other hand, if you need

30
00:01:27,450 --> 00:01:28,767
to make the indexes explicit,

31
00:01:28,767 --> 00:01:31,031
it will be necessary somewhere

32
00:01:31,031 --> 00:01:32,770
to indicate this index

33
00:01:32,770 --> 00:01:35,001
and therefore have an additional
variable.

34
00:01:35,001 --> 00:01:37,038
To achieve this, we'll declare a
variable i.

35
00:01:37,044 --> 00:01:39,928
We'll use a for-loop

36
00:01:39,928 --> 00:01:41,303
like we have seen at the beginning,

37
00:01:41,303 --> 00:01:43,080
in the course about control
statements,

38
00:01:43,080 --> 00:01:46,302
which will declare i of type size_t

39
00:01:46,303 --> 00:01:47,982
beginning at the index 0,

40
00:01:47,982 --> 00:01:50,472
the first element of the vector is
at index 0,

41
00:01:50,487 --> 00:01:55,530
separate the for into the three parts
with the semi-column (';')

42
00:01:55,940 --> 00:01:58,756
After the first part, we have the
condition:

43
00:01:58,759 --> 00:02:01,515
here, it's "as long as i is strictly less
than size";

44
00:02:01,515 --> 00:02:03,910
actually we go to tab.size() minus 1

45
00:02:03,910 --> 00:02:06,692
and, here, one by one.
Therfore, this allows us

46
00:02:06,692 --> 00:02:08,983
in the loop, to print the index we
are

47
00:02:10,775 --> 00:02:12,721
iterating over, the index of the elements
we are iterating over.

48
00:02:12,733 --> 00:02:16,757
For example, it will print "l'élément 0
vaut" (= "the element 0 has the value")

49
00:02:16,757 --> 00:02:19,974
followed by the value of the first
element stored in the vector,

50
00:02:19,974 --> 00:02:22,353
stored at the index 0.

51
00:02:22,503 --> 00:02:25,027
In these two examples in which we print
the elements of the vector,

52
00:02:25,027 --> 00:02:27,994
we don't have to modify the elements
of the vector.

53
00:02:28,514 --> 00:02:29,721
Now, let's see an example

54
00:02:29,721 --> 00:02:32,504
in which we want to, for example,
affect the value,

55
00:02:32,510 --> 00:02:33,981
to all the elements of the vector,

56
00:02:33,981 --> 00:02:34,862
the value 1.2, for instance.

57
00:02:35,748 --> 00:02:38,219
If we want to use a C++-11 loop,

58
00:02:38,219 --> 00:02:41,517
we'll declare here "for(auto"

59
00:02:42,017 --> 00:02:43,977
with the symbol to indicate

60
00:02:43,992 --> 00:02:45,102
that we are going to modify,

61
00:02:45,102 --> 00:02:46,474
a variable name ('&')

62
00:02:46,474 --> 00:02:48,256
-- I had chosen "element" beforehand,

63
00:02:48,256 --> 00:02:49,171
here, I choose "el" --

64
00:02:49,171 --> 00:02:51,084
the column (':') to separate the two parts,

65
00:02:51,084 --> 00:02:53,122
and then the name of the vector.

66
00:02:53,605 --> 00:02:55,775
In this loop, we'll therefore
be able to use

67
00:02:55,779 --> 00:02:57,289
"el" as a variable name

68
00:02:57,289 --> 00:02:58,758
that will alternately iterate over

69
00:02:58,758 --> 00:03:00,688
the different elements of the vector "tab"

70
00:03:00,688 --> 00:03:01,535
and therefore, here,

71
00:03:01,535 --> 00:03:04,743
for each element, we put the
value 1.2.

72
00:03:04,963 --> 00:03:06,774
We could also with a vector

73
00:03:06,774 --> 00:03:09,432
if we wanted to directly assign

74
00:03:09,432 --> 00:03:10,405
the whole vector,

75
00:03:10,405 --> 00:03:11,781
we could also use

76
00:03:11,781 --> 00:03:14,370
-- but this goes beyond the scope of
illustrating for-loops --

77
00:03:15,230 --> 00:03:15,924
we coud also use

78
00:03:15,934 --> 00:03:17,523
a global affectation of one vector to another.

79
00:03:17,523 --> 00:03:19,511
So here we are going to overwrite
the vector,

80
00:03:19,511 --> 00:03:21,258
the old value of the vector,

81
00:03:21,258 --> 00:03:23,492
by the new value of a vector

82
00:03:23,492 --> 00:03:23,923
that is,

83
00:03:23,925 --> 00:03:25,257
so, we have a look here,

84
00:03:25,257 --> 00:03:26,495
element by element :

85
00:03:26,495 --> 00:03:27,752
a vector

86
00:03:27,752 --> 00:03:29,046
that contains doubles

87
00:03:29,743 --> 00:03:31,750
which we initialize, at the
beginning,

88
00:03:31,750 --> 00:03:33,993
with a certain size

89
00:03:33,993 --> 00:03:35,964
which is the former size of the
vector tab

90
00:03:35,966 --> 00:03:38,416
-- so we pass tab.size() --

91
00:03:39,476 --> 00:03:42,295
all the elements of which
have the value 1.2.

92
00:03:42,496 --> 00:03:45,233
It does indeed create a new vector

93
00:03:46,703 --> 00:03:52,036
that has exactly tab.size() elements

94
00:03:52,746 --> 00:03:54,746
and with every element

95
00:03:57,216 --> 00:03:59,266
having the value 1.2.

96
00:04:00,246 --> 00:04:03,246
It's the same as if you had declared
using two lines:

97
00:04:03,746 --> 00:04:06,285
first a vector "tab2"

98
00:04:06,600 --> 00:04:11,893
which is a vector of doubles,
initialized with the size of tab,

99
00:04:11,893 --> 00:04:13,186
that is, tab.size(),

100
00:04:13,976 --> 00:04:15,668
all with the value 1.2;

101
00:04:15,957 --> 00:04:17,558
and that you then had made

102
00:04:19,159 --> 00:04:20,762
a copy of "tab2" into "tab".

103
00:04:20,762 --> 00:04:22,352
We can write it like this,

104
00:04:22,352 --> 00:04:23,942
on a single line, in a compact way,

105
00:04:23,942 --> 00:04:25,534
by declaring here what is called

106
00:04:25,534 --> 00:04:26,923
an "anonymous vector".

107
00:04:26,923 --> 00:04:28,485
We haven't put any name here

108
00:04:28,485 --> 00:04:30,505
where we would have normally put
the name "tab2"

109
00:04:30,507 --> 00:04:32,536
if we had declared it using two lines.

110
00:04:32,536 --> 00:04:34,916
It's a vector without a name,
an anonymous vector.

111
00:04:34,928 --> 00:04:37,764
Such an expression, like this one,
can perfectly be written,

112
00:04:37,764 --> 00:04:39,710
it's an existing vector

113
00:04:39,728 --> 00:04:41,300
that is promptly created

114
00:04:41,300 --> 00:04:44,017
before being copied into "tab".

115
00:04:45,464 --> 00:04:47,609
Another typical example of 
modification

116
00:04:47,609 --> 00:04:49,148
of the elements of a vector,

117
00:04:49,148 --> 00:04:51,031
is when we ask their values to the
user.

118
00:04:51,571 --> 00:04:52,632
Again, we have two cases.

119
00:04:52,632 --> 00:04:54,865
Either we want to explicitly print

120
00:04:54,865 --> 00:04:56,103
the indexes,

121
00:04:56,103 --> 00:04:58,237
the indexes of the elements of
the vector,

122
00:04:58,237 --> 00:04:59,374
or we simply want

123
00:04:59,374 --> 00:05:00,503
to ask them,

124
00:05:00,503 --> 00:05:01,511
the elements of the vector,

125
00:05:01,511 --> 00:05:02,570
one after the other,

126
00:05:02,570 --> 00:05:04,273
without making the indexes explicit.

127
00:05:04,273 --> 00:05:05,999
Let's have a look at these two cases.

128
00:05:06,204 --> 00:05:08,113
If we don't have to make the indexes explicit,

129
00:05:08,124 --> 00:05:09,241
then we can use

130
00:05:09,241 --> 00:05:11,950
a C++-11 for-loop [a.k.a. "range for-loop"].

131
00:05:11,950 --> 00:05:15,499
But as we want to modify the vector,
as we are going to input the values,

132
00:05:15,499 --> 00:05:18,811
we are here going to use a loop
with references.

133
00:05:18,811 --> 00:05:21,678
We recognize the column (':') of the
C++-11 loops,

134
00:05:22,708 --> 00:05:23,974
and the two parts,

135
00:05:23,974 --> 00:05:26,747
the vector "tab" that we want
to modify

136
00:05:26,747 --> 00:05:28,777
and here the declarative part

137
00:05:28,777 --> 00:05:30,731
with the name we have chosen

138
00:05:30,731 --> 00:05:32,407
to iterate over the vector's elements,

139
00:05:32,407 --> 00:05:33,500
for example, "element".

140
00:05:34,260 --> 00:05:35,386
Then, in this loop

141
00:05:35,386 --> 00:05:39,253
-- I mean, in the body of this loop, indicated
by this block here --

142
00:05:39,253 --> 00:05:41,142
in this loop, we're going to
print the message

143
00:05:41,142 --> 00:05:42,409
"Entrez l'élément suivant"
[TN: means "enter the next element"],

144
00:05:43,008 --> 00:05:44,219
for example,

145
00:05:44,219 --> 00:05:47,532
and then input in the variable
"element".

146
00:05:47,532 --> 00:05:49,736
The variable "element" will
once again

147
00:05:49,736 --> 00:05:51,518
iterate over

148
00:05:51,518 --> 00:05:53,514
the different elements of
the vector

149
00:05:53,514 --> 00:05:54,744
beginning with the first,

150
00:05:54,744 --> 00:05:57,604
then, when we'll do the second
iteration,

151
00:05:57,944 --> 00:05:59,738
with the second element of the vector,

152
00:05:59,983 --> 00:06:01,532
then, when we'll re-loop

153
00:06:01,532 --> 00:06:03,366
in the third iteration,

154
00:06:03,454 --> 00:06:07,261
we'll have the third element
of the vector, etc.

155
00:06:07,261 --> 00:06:08,746
until we arrive

156
00:06:08,746 --> 00:06:10,300
at the last element of the vector.

157
00:06:10,804 --> 00:06:12,772
If we want to make the indexes explicit,

158
00:06:12,802 --> 00:06:13,974
we'll use

159
00:06:13,974 --> 00:06:16,530
the standard for-loop

160
00:06:16,999 --> 00:06:19,312
separated into three parts with
the semicolon (';').

161
00:06:19,479 --> 00:06:21,916
Here we declare as usual an
integer i

162
00:06:22,200 --> 00:06:24,742
of type size_t, at the index of
the first element,

163
00:06:24,742 --> 00:06:26,284
that is the index zero.

164
00:06:26,503 --> 00:06:29,986
While i is strictly less than tab.size()

165
00:06:29,993 --> 00:06:32,704
we increment it, here, 1 by 1.

166
00:06:32,704 --> 00:06:34,156
Then here we print

167
00:06:34,734 --> 00:06:35,499
the index,

168
00:06:35,499 --> 00:06:36,463
-- as wanted,

169
00:06:36,463 --> 00:06:37,931
that's why we introduced i! --

170
00:06:37,931 --> 00:06:40,517
so we write: "Entrez l'élement 0"
(= "input the element 0"), the element 1, etc.

171
00:06:41,068 --> 00:06:44,728
Then, finally, we get from the keyboard the value

172
00:06:44,728 --> 00:06:47,775
of the element at the index i
in the vector "tab"

173
00:06:47,775 --> 00:06:51,675
so "tab[i]", which indicates this element.
