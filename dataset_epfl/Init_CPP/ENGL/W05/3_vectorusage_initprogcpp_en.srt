1
00:00:05,263 --> 00:00:07,999
When we have declared and initialized
a dynamic array,

2
00:00:07,999 --> 00:00:09,723
we'll of course want to use it.

3
00:00:09,723 --> 00:00:12,985
In order to do this, we can either
use the array globally,

4
00:00:12,985 --> 00:00:14,922
or element by element.

5
00:00:14,922 --> 00:00:17,230
To use an array globally, it isn't
very frequent,

6
00:00:17,230 --> 00:00:19,227
but I can be useful occasionally,

7
00:00:19,227 --> 00:00:21,313
we'll simply globally assign

8
00:00:21,313 --> 00:00:24,461
an existing array 

9
00:00:24,461 --> 00:00:26,322
to the array that we want to
manipulate.

10
00:00:26,322 --> 00:00:29,983
So this will be done simply with
the usual assignment syntax (=).

11
00:00:29,983 --> 00:00:31,944
Let's take an example.

12
00:00:31,944 --> 00:00:34,469
Suppose that we have an
array tab1,

13
00:00:34,469 --> 00:00:35,957
that we've declared beforehand,

14
00:00:35,957 --> 00:00:39,960
and initialized here with
three values.

15
00:00:39,960 --> 00:00:41,912
It's an array of integers.

16
00:00:41,912 --> 00:00:45,386
So this array tab1 will contain, 

17
00:00:45,386 --> 00:00:47,382
at the beginning,

18
00:00:47,382 --> 00:00:49,332
three integers,

19
00:00:49,332 --> 00:00:53,477
which have as values 1, 2, 3,
because of this initialization here.

20
00:00:53,477 --> 00:00:57,577
We then declare here a dynamic
array tab2,

21
00:00:57,577 --> 00:00:59,225
which is the empty array.

22
00:00:59,225 --> 00:01:02,736
The declaration we have done here,
as it has nothing after it,

23
00:01:02,736 --> 00:01:05,530
declares an array initialized to
an empty array.

24
00:01:05,530 --> 00:01:07,179
It's an array without elements.

25
00:01:07,179 --> 00:01:09,269
We'll then make different computations,

26
00:01:09,269 --> 00:01:11,184
and finally, at a certain point,

27
00:01:11,184 --> 00:01:15,133
we'll maybe need to make a copy
of tab1 in tab2,

28
00:01:15,133 --> 00:01:18,135
so we'll make a copy of tab1 in
tab2,

29
00:01:18,135 --> 00:01:22,607
which means that now, tab2 will
contain the elements 1, 2, 3.

30
00:01:22,607 --> 00:01:26,476
Once again, this is a copy, so
starting from this line,

31
00:01:26,476 --> 00:01:30,060
tab1 and tab2 will continue to live
separately,

32
00:01:30,060 --> 00:01:34,396
if I modify tab1, there won't be any
modifications on tab2.

33
00:01:34,396 --> 00:01:36,845
If a modification is made here,

34
00:01:36,845 --> 00:01:39,056
there isn't any modification in tab2.

35
00:01:39,056 --> 00:01:43,334
tab1 and tab2 are two completely
separated arrays.

36
00:01:43,334 --> 00:01:45,812
That's for the global assignment
of an array.

37
00:01:45,812 --> 00:01:49,822
But in general, we'll rather manipulate
arrays element by element.

38
00:01:50,522 --> 00:01:52,658
To designate the element of an array,

39
00:01:52,658 --> 00:01:55,025
we'll use the following syntax :

40
00:01:55,025 --> 00:01:59,845
the name of the array, followed
by, in brackets ( [  ]),

41
00:01:59,845 --> 00:02:03,379
the index of the element that we
want to select.

42
00:02:03,531 --> 00:02:06,262
Be careful, the indexes of an
array's elements,

43
00:02:06,262 --> 00:02:10,715
are between zero and the array's
size minus one,

44
00:02:10,715 --> 00:02:11,997
they begin at zero

45
00:02:11,997 --> 00:02:14,478
and go to the array's size
minus one.

46
00:02:14,478 --> 00:02:18,064
If for example, I have an array
with five elements,

47
00:02:18,064 --> 00:02:21,783
that contains 4, 3, 2, 7, 1,

48
00:02:21,783 --> 00:02:25,743
the element 4 here, 

49
00:02:25,743 --> 00:02:28,657
is the element with the position
zero in the array.

50
00:02:28,657 --> 00:02:34,987
If this array is named tab, I'll use
tab[0],

51
00:02:34,987 --> 00:02:37,642
to designate this 4.

52
00:02:37,642 --> 00:02:42,516
Then, I have tab[1], here I have
tab[2], tab[3], tab[4].

53
00:02:42,516 --> 00:02:46,392
This array has a size of five.

54
00:02:46,392 --> 00:02:51,978
The last element of the array is
tab[5 minus one], namely tab[4].

55
00:02:51,978 --> 00:02:58,141
The indexes do go from zero
to the array's size minus one.

56
00:02:58,561 --> 00:03:02,939
The first element of the array is therefore
indeed designated by tab[0],

57
00:03:02,939 --> 00:03:08,105
and the tenth element of the array is
designated by tab[9],

58
00:03:08,105 --> 00:03:10,492
as we begin at zero.

59
00:03:10,492 --> 00:03:14,300
Be also careful with the fact that there is no control at all

60
00:03:14,300 --> 00:03:16,209
if you are in a situation of array overflow.

61
00:03:16,209 --> 00:03:20,882
If for example, you write with
the previous example tab[10],

62
00:03:20,882 --> 00:03:25,349
nothing will tell you you have overflowed
here the array's size.

63
00:03:25,349 --> 00:03:27,821
So be careful when you write

64
00:03:27,821 --> 00:03:30,361
something like tab[i],

65
00:03:30,361 --> 00:03:36,034
to be sure that i is between zero
and the array's size minus one,

66
00:03:36,034 --> 00:03:38,895
or is strictly less than the array's
size,

67
00:03:38,895 --> 00:03:41,980
or else you may encounter this
fatal error,

68
00:03:41,980 --> 00:03:43,874
that we call segmentation fault,

69
00:03:43,874 --> 00:03:46,737
which indicates a memory
access error.

70
00:03:46,737 --> 00:03:49,618
I'm telling you, you may encounter it,
because it isn't even guaranteed 

71
00:03:49,618 --> 00:03:54,267
that the segmentation fault happens,
the error is there, but it isn't even sure

72
00:03:54,267 --> 00:03:57,167
that the program will detect it.

73
00:03:57,167 --> 00:03:59,342
Anyway, if the detection happens,

74
00:03:59,342 --> 00:04:01,498
at that moment, you'll have a
segmentation fault,

75
00:04:01,498 --> 00:04:04,640
with here the typical example,
that we encounter a lot

76
00:04:04,640 --> 00:04:06,543
in beginner programmers' programs,

77
00:04:06,543 --> 00:04:08,365
which is the following : we declare

78
00:04:08,365 --> 00:04:13,791
a dynamic array, of doubles, which I
name v here,

79
00:04:13,791 --> 00:04:16,034
that is initialized to empty,

80
00:04:16,034 --> 00:04:18,249
as there's nothing after the
declaration,

81
00:04:18,249 --> 00:04:20,175
so we initialize an empty array,

82
00:04:20,175 --> 00:04:23,103
so this array is strictly empty, there's
nothing in it.

83
00:04:23,103 --> 00:04:25,381
It's an array with zero elements.

84
00:04:25,381 --> 00:04:30,474
In general, the programmer who
have written a program,

85
00:04:30,474 --> 00:04:35,662
will rarely make the mistake just after
it, but the error is still of this type,

86
00:04:35,662 --> 00:04:40,581
he'll write something like
v[0] = with an assignment,

87
00:04:40,581 --> 00:04:43,409
to try and put 5.4 in the array,

88
00:04:43,409 --> 00:04:47,108
but as this array is empty, we
don't even have a v[0],

89
00:04:47,108 --> 00:04:50,019
v[0] doesn't exist in the empty array,

90
00:04:50,019 --> 00:04:54,441
so here you'll get a segmentation
fault.

91
00:04:54,661 --> 00:04:57,328
A common way of accessing the
elements of an array,

92
00:04:57,328 --> 00:05:01,327
is to iterate over the array.

93
00:05:01,327 --> 00:05:04,962
In C++, we have three ways of
iterating over an array.

94
00:05:04,962 --> 00:05:07,451
Since the new C++ 2011 standard,

95
00:05:07,451 --> 00:05:11,158
we have a way that let's us iterate
simply over all the values.

96
00:05:11,158 --> 00:05:13,413
We'll detail it in a moment.

97
00:05:13,413 --> 00:05:15,888
You could also, of course, with the
iteration

98
00:05:15,888 --> 00:05:18,400
you have seen until now, the standard
for loop,

99
00:05:18,400 --> 00:05:22,680
iterate over the different
explicit indexes of the array,

100
00:05:22,680 --> 00:05:25,647
so if I designate these indexes using  i,

101
00:05:25,647 --> 00:05:27,116
l'll do a loop iterating on different values for i,

102
00:05:27,116 --> 00:05:30,717
i will begin with the value 0,

103
00:05:30,717 --> 00:05:36,299
and will go for example one by one,
till the last element of the array,

104
00:05:36,299 --> 00:05:39,008
the last element, let me remind you,
if t is the array's size,

105
00:05:39,008 --> 00:05:42,130
has the index t - 1.

106
00:05:42,130 --> 00:05:43,779
So here we'll do a loop

107
00:05:43,779 --> 00:05:47,365
that goes from 0 to strictly less than
the array's size.

108
00:05:47,365 --> 00:05:49,961
The question is how are we going to
represent this size,

109
00:05:49,961 --> 00:05:51,816
how are we going to know this
size,

110
00:05:51,816 --> 00:05:54,037
I'll detail that to you in a moment,
too.

111
00:05:54,037 --> 00:05:56,912
I'll also explain what this new size_t
type represents.

112
00:05:56,912 --> 00:05:59,342
Finally, third way, much more
advanced,

113
00:05:59,342 --> 00:06:01,268
which will not be presented in this
course,

114
00:06:01,268 --> 00:06:03,864
is to use what are called
iterators.

115
00:06:03,864 --> 00:06:06,739
Once you want to iterate over
an array,

116
00:06:06,739 --> 00:06:08,536
the question you'll ask yourself,

117
00:06:08,536 --> 00:06:11,226
is which of these two previous ways
to choose.

118
00:06:11,736 --> 00:06:14,150
In most cases, I recommend you
to choose

119
00:06:14,150 --> 00:06:20,015
the first way of proceeding, to use
the C++ 2011 iterations,

120
00:06:20,015 --> 00:06:21,815
which we will now detail.

121
00:06:21,815 --> 00:06:23,706
If you can't, in this case

122
00:06:23,706 --> 00:06:26,255
you use a standard iteration.

123
00:06:26,255 --> 00:06:30,405
So, let's move on to the iterations introduced
in the new C++ 2011 standard.

124
00:06:30,405 --> 00:06:33,684
These iterations also use the
key-word for,

125
00:06:33,684 --> 00:06:36,115
as well as parentheses ().

126
00:06:36,115 --> 00:06:37,794
But in parentheses,

127
00:06:37,794 --> 00:06:40,691
we'll this time use the colon
separator (:)

128
00:06:40,691 --> 00:06:43,283
instead of the semicolon, and we'll
have two parts,

129
00:06:43,283 --> 00:06:44,978
instead of three parts.

130
00:06:44,978 --> 00:06:48,475
Before the colon, we'll have the
declaration of the variable

131
00:06:48,475 --> 00:06:51,150
that we want to use to
iterate over the array,

132
00:06:51,150 --> 00:06:53,691
and after the colon, simply the
name of the array

133
00:06:53,691 --> 00:06:55,273
that we want to iterate over.

134
00:06:55,273 --> 00:06:58,832
If the iteration over this array
must modify the elements,

135
00:06:58,832 --> 00:07:03,007
you'll have to add between the
reserved key-word here,

136
00:07:03,007 --> 00:07:09,074
auto and the variable name, add
the modification symbol,

137
00:07:09,074 --> 00:07:14,017
like we used to indicate to a
function f

138
00:07:14,017 --> 00:07:16,324
that its parameters could be modified
by the function.

139
00:07:16,324 --> 00:07:19,057
Let me remind you that if for
example we have a function f,

140
00:07:19,057 --> 00:07:22,201
that takes a parameter x, which we 
want to modify,

141
00:07:22,201 --> 00:07:25,937
what you must do, is to pass
it by reference,

142
00:07:25,937 --> 00:07:28,453
so here we used the reference
symbol

143
00:07:28,453 --> 00:07:30,586
to indicate a pass by reference.

144
00:07:30,586 --> 00:07:33,042
It's exactly the same thing here
in this for loop,

145
00:07:33,042 --> 00:07:37,699
we'll use the reference symbol to
indicate that the iterated array

146
00:07:37,699 --> 00:07:41,944
can be modified through the variable
used to iterate it.

147
00:07:41,944 --> 00:07:44,095
Let's go to an example.

148
00:07:44,095 --> 00:07:47,206
Let's suppose we want to manipulate
an array of integers,

149
00:07:47,206 --> 00:07:49,253
which we will name ages here, in the
plural form,

150
00:07:49,253 --> 00:07:52,157
which is a dynamic array containing
integers,

151
00:07:52,157 --> 00:07:57,517
and which we initialize at the beginning
with five integers all with the null value.

152
00:07:58,467 --> 00:08:01,075
At the beginning, we'll want to
fill this array

153
00:08:01,075 --> 00:08:03,722
with values requested from
the user.

154
00:08:03,722 --> 00:08:07,371
To achieve this, we iterate over the
array with a for loop.

155
00:08:07,371 --> 00:08:09,679
But as we are going to modify the
array,

156
00:08:09,679 --> 00:08:12,571
it is important to iterate over the
for loop here,

157
00:08:12,571 --> 00:08:16,865
with the modification symbol, with
a reference to the array.

158
00:08:16,865 --> 00:08:18,917
The syntax is therefore the
following,

159
00:08:18,917 --> 00:08:22,868
we'll have the key-word for,
followed by a parenthesis,

160
00:08:22,868 --> 00:08:29,787
followed by the array's name, ages,
that is after the colon,

161
00:08:29,787 --> 00:08:34,181
and before we'll find again auto,

162
00:08:34,181 --> 00:08:36,531
and the name of a variable, so here
we declare

163
00:08:36,531 --> 00:08:39,001
a new variable age in the singular
form,

164
00:08:39,001 --> 00:08:41,310
that will iterate over the array.

165
00:08:41,310 --> 00:08:46,838
Then, in the block associated with the for,
you can simply use this variable age,

166
00:08:46,838 --> 00:08:50,724
it's the name we have given to the
variable which will store the different values of the array.

167
00:08:50,724 --> 00:08:53,996
Like any variable, it is going to
alternately

168
00:08:53,996 --> 00:08:57,259
iterate over the different elements
of the array,

169
00:08:57,259 --> 00:09:02,486
it is going to iterate over the array
step by step.

170
00:09:02,486 --> 00:09:06,774
Every step will print the intended
message,

171
00:09:06,774 --> 00:09:09,016
the age of the next employee, to ask
the age,

172
00:09:09,016 --> 00:09:14,210
and stored in this variable age here,
which, alternately,

173
00:09:14,210 --> 00:09:17,447
will go over every element of the
array.

174
00:09:17,447 --> 00:09:19,809
What will happen is that the first
time

175
00:09:19,809 --> 00:09:21,949
the loop is executed,

176
00:09:21,949 --> 00:09:26,188
the variable age will indicate the
first element of the array,

177
00:09:26,188 --> 00:09:28,245
and we'll ask a value for this variable.

178
00:09:28,245 --> 00:09:31,728
Let's suppose that the user inputs the value 5,

179
00:09:31,728 --> 00:09:36,286
at that moment, we'll put 5
in this cell of the array.

180
00:09:36,286 --> 00:09:39,167
We then redo the iteration,

181
00:09:39,167 --> 00:09:41,998
its the role of the for loop to
iterate,

182
00:09:41,998 --> 00:09:46,884
and at that moment, age will move
to the second entry of the array.

183
00:09:46,884 --> 00:09:49,466
Let's suppose that here, the user
inputs 7,

184
00:09:49,466 --> 00:09:53,502
at this moment we'll have 7
that goes here,

185
00:09:53,502 --> 00:09:56,924
and so on, until age has iterated
over the entire array,

186
00:09:56,924 --> 00:09:59,538
until we fill the whole array.

187
00:09:59,538 --> 00:10:03,730
We'll then be able to print it using another iteration,

188
00:10:03,730 --> 00:10:06,544
so we begin here

189
00:10:06,544 --> 00:10:10,857
by displaying a message to say that
we are going to print the array of ages,

190
00:10:10,857 --> 00:10:16,772
then we redo an iterative loop with the
key-word for,

191
00:10:16,772 --> 00:10:21,033
the parenthesis, the colon which
separates on one side

192
00:10:21,033 --> 00:10:25,741
the array's name, ages in plural form,
and on the other side,

193
00:10:25,741 --> 00:10:29,050
a variable. which I can call again
age,

194
00:10:29,050 --> 00:10:31,728
it's another variable age, it has
another scope,

195
00:10:31,728 --> 00:10:34,511
it will have the scope of this for
loop here,

196
00:10:34,511 --> 00:10:39,632
while the previous age variable had
the scope of this first for, here.

197
00:10:40,152 --> 00:10:44,306
And we use this age variable to
iterate over the array,

198
00:10:44,306 --> 00:10:47,023
like any other variable, simply,
what will happen

199
00:10:47,023 --> 00:10:50,803
is that at the beginning, this age
variable will indicate

200
00:10:50,803 --> 00:10:53,983
the first element of the array, and
then alternately,

201
00:10:53,983 --> 00:10:56,045
will take the value of the different
elements of the array,

202
00:10:56,045 --> 00:10:59,050
so we'll begin by printing 5
here,

203
00:10:59,050 --> 00:11:02,391
then we'll print 7...

204
00:11:02,391 --> 00:11:06,995
until we have iterated over the
entire array.

205
00:11:08,025 --> 00:11:10,263
This way of writing loops is
therefore very useful

206
00:11:10,263 --> 00:11:11,593
because it is compact,

207
00:11:11,593 --> 00:11:14,614
it suffices to simply write the key-word
for to indicate that we want to iterate,

208
00:11:14,614 --> 00:11:17,181
to put the name of the variable,
a colon, the array's name,

209
00:11:17,181 --> 00:11:19,021
like we had written previously,

210
00:11:19,021 --> 00:11:23,528
simply write for "(auto", indicate that
we have a variable age 

211
00:11:23,528 --> 00:11:25,896
which iterates over the array of
ages.

212
00:11:25,896 --> 00:11:28,267
Voilà, nothing more to write, so
it's very compact.

213
00:11:28,267 --> 00:11:33,256
This way of iterating doesn't allow you
to iterate over several arrays at a time.

214
00:11:33,256 --> 00:11:37,641
Indeed, we here have a single array
over which we can iterate,

215
00:11:38,181 --> 00:11:41,617
so we couldn't for example
compare arrays

216
00:11:41,617 --> 00:11:44,200
or insert an array in another...

217
00:11:44,210 --> 00:11:46,984
We can't access several
elements either,

218
00:11:46,984 --> 00:11:49,420
because at one single moment, we
have a single variable

219
00:11:49,420 --> 00:11:51,362
that indicates a single entry.

220
00:11:51,362 --> 00:11:54,543
So we can't shift for example

221
00:11:54,543 --> 00:11:57,365
the elements of an array by taking
an element

222
00:11:57,365 --> 00:11:59,898
and its following element in
a same loop.

223
00:11:59,898 --> 00:12:03,794
Finally, we can't skip elements
of the array.

224
00:12:03,794 --> 00:12:06,496
This way of iterating goes over

225
00:12:06,496 --> 00:12:10,477
the different elements of the array
one after the other,

226
00:12:10,477 --> 00:12:14,610
we can't skip an element

227
00:12:14,610 --> 00:12:16,425
to go to the next element.

228
00:12:16,425 --> 00:12:18,676
So if we need one of these
three cases,

229
00:12:18,676 --> 00:12:22,973
iterating over several arrays, or accessing
several elements,

230
00:12:22,973 --> 00:12:25,593
or skipping elements during an
iteration,

231
00:12:25,593 --> 00:12:27,929
we'll have to use another for
loop,

232
00:12:27,929 --> 00:12:30,568
use the for loops we saw in the
course

233
00:12:30,568 --> 00:12:32,465
about control statements.

234
00:12:32,965 --> 00:12:35,590
In this type of for iteration, we'll
typically need to

235
00:12:35,590 --> 00:12:37,555
indicate the array's size,

236
00:12:37,555 --> 00:12:39,683
for example to indicate the last
element,

237
00:12:39,683 --> 00:12:41,794
which has the index size minus
one.

238
00:12:41,794 --> 00:12:43,944
So how can we indicate the
array's size?

239
00:12:43,944 --> 00:12:46,817
To achieve this, we'll use what are
called specific functions,

240
00:12:46,817 --> 00:12:50,241
in object-oriented languages, we
speak of methods,

241
00:12:50,241 --> 00:12:54,188
which can return the array's
size.

242
00:12:54,188 --> 00:12:56,618
a specific function is simply
a function

243
00:12:56,618 --> 00:12:59,519
that is associated to a variable,

244
00:12:59,519 --> 00:13:02,138
and that we use in the following way,

245
00:13:02,858 --> 00:13:06,713
if I have a variable, a dynamic
array named tab,

246
00:13:06,713 --> 00:13:11,329
to know its size, I'll use
tab.size(),

247
00:13:11,329 --> 00:13:16,088
the function size is applied to
the variable tab,

248
00:13:16,088 --> 00:13:18,492
tab being the array's name.

249
00:13:18,852 --> 00:13:21,819
The return type of this specific
function, size,

250
00:13:21,819 --> 00:13:24,399
is a new type which is known as
size_t,

251
00:13:24,399 --> 00:13:27,819
it's just a particular int, which
has the garantueed

252
00:13:27,819 --> 00:13:30,677
property, by the standard, to
always be positive.

253
00:13:30,677 --> 00:13:33,379
As the standard says that the
return type

254
00:13:33,379 --> 00:13:37,555
of the specific function size, of the
dynamic arrays, is size_t,

255
00:13:37,555 --> 00:13:41,497
you have to declare, when you are
using variables

256
00:13:41,497 --> 00:13:45,518
to store such a size, you have to
declare them of type size_t.

257
00:13:45,518 --> 00:13:48,089
For example, we'll write with
a standard for,

258
00:13:48,089 --> 00:13:50,724
as we have seen in the course
about control statements,

259
00:13:50,724 --> 00:13:53,203
with three parts separated by
semi-colons,

260
00:13:53,203 --> 00:13:57,272
the declaration of a variable of
type size_t,

261
00:13:57,272 --> 00:14:01,353
as we are going to store in it the
size, which we name here i,

262
00:14:01,353 --> 00:14:05,032
which will iterate until the
array's size,

263
00:14:05,032 --> 00:14:08,510
so here strictly less than the
array's size,

264
00:14:08,510 --> 00:14:11,641
as the indexes must go to
the array's size minus one,

265
00:14:11,641 --> 00:14:15,170
we'll stop just before
tab.size().

266
00:14:15,170 --> 00:14:19,297
And finally in the iterative part we'll
go one by one,

267
00:14:19,297 --> 00:14:22,800
so if I take the same example as before,
with the array, ages,

268
00:14:22,800 --> 00:14:26,143
initialized with five integers,
all null,

269
00:14:26,143 --> 00:14:29,603
to input them, we'll for example,
with  a standard loop,

270
00:14:29,603 --> 00:14:35,723
write "for (", the declare size_t i, a
a positive integer,

271
00:14:35,723 --> 00:14:38,814
and  initialize it with zero,

272
00:14:38,814 --> 00:14:42,412
that is, we'll begin with the first
element of the array,

273
00:14:42,412 --> 00:14:47,188
so the index is zero. Then,
the "test" part of the iteration,

274
00:14:47,188 --> 00:14:50,664
while i is strictly less than ages.size(),

275
00:14:50,664 --> 00:14:53,557
as the index of the last element

276
00:14:53,557 --> 00:14:58,948
must be the array's size minus one,

277
00:14:58,948 --> 00:15:02,921
we'll write strictly less than
ages.size(),

278
00:15:02,921 --> 00:15:05,957
for example, we'll iterate one
by one.

279
00:15:06,937 --> 00:15:10,357
And what are we going to do?
We'll ask the question,

280
00:15:10,357 --> 00:15:14,681
(what is) the employee's age. Here humans
rather count from one to n,

281
00:15:14,681 --> 00:15:18,978
instead of from zero to n minus one,
we'll print here i + 1,

282
00:15:18,978 --> 00:15:23,153
which will print 1 first, then 2, etc.

283
00:15:23,153 --> 00:15:26,051
until n if n is the array's
size,

284
00:15:26,051 --> 00:15:31,281
and we'll get the element at the
index i of the array ages,

285
00:15:31,281 --> 00:15:35,222
with the syntax on the array's access
that we have seen.

286
00:15:35,722 --> 00:15:38,156
That's it ! Perhaps all this is a
bit too much,

287
00:15:38,156 --> 00:15:41,217
the next episode will illustrate
these cases

288
00:15:41,217 --> 00:15:42,758
with typical examples.
