1
00:00:05,971 --> 00:00:09,697
In this episode, we are going to
study the dynamic array of C++,

2
00:00:10,059 --> 00:00:11,091
known as "vectors".

3
00:00:12,670 --> 00:00:16,445
A dynamic array is an array,  a homogeneous collection,

4
00:00:16,445 --> 00:00:20,151
a set of elements of the same type.

5
00:00:20,151 --> 00:00:23,654
It is said to be dynamic because its size can vary
during the execution of the program.

6
00:00:24,534 --> 00:00:26,810
For example the array of the
ages of the students

7
00:00:26,810 --> 00:00:29,275
attending this course could
evolve during the execution,

8
00:00:29,275 --> 00:00:33,284
as new students register for the
course.

9
00:00:33,950 --> 00:00:38,357
Dynamic arrays in C++ are
represented by the "vector" type.

10
00:00:38,927 --> 00:00:42,364
In order to use the "vector" type, we
must indicate to the compiler

11
00:00:42,364 --> 00:00:46,916
that we want this type, and therefore
include the corresponding library

12
00:00:46,916 --> 00:00:50,996
with the <i>#include <vector></i>
directive at the beginning of the program.

13
00:00:52,096 --> 00:00:54,404
In order to use a dynamic
array,

14
00:00:54,404 --> 00:00:57,154
you must of course declare a
variable of this type,

15
00:00:57,154 --> 00:01:00,595
namely,  a variable of
type "vector".

16
00:01:00,595 --> 00:01:04,604
That is done as usual, by indicating
the name of the variable

17
00:01:04,604 --> 00:01:09,196
preceded by the type and here the
type is <i>vector</i>,

18
00:01:09,196 --> 00:01:12,666
with between signs like this (chevrons),

19
00:01:12,666 --> 00:01:19,195
between less than character and greater than
character, the type of each array element.

20
00:01:19,195 --> 00:01:24,423
So for example, if I want to declare
an array which will contain integers,

21
00:01:25,863 --> 00:01:29,855
what I am going to do is to declare
a variable here,

22
00:01:29,855 --> 00:01:33,386
which of type <i>vector<int></i>,

23
00:01:33,386 --> 00:01:38,931
<i>int</i> being the type of each
element of the array.

24
00:01:39,421 --> 00:01:42,049
Beforehand, don't forget, so that
all this compiles,

25
00:01:42,049 --> 00:01:46,349
to include the "vector" library.

26
00:01:46,660 --> 00:01:49,609
As already mentioned, the type of the
elements of an array

27
00:01:49,609 --> 00:01:52,759
can be any type available in C++.

28
00:01:52,759 --> 00:01:55,960
So what you put here between chevrons
in the definition of the type

29
00:01:55,960 --> 00:01:58,334
is any valid type,

30
00:01:58,334 --> 00:02:01,149
including eventually another array,

31
00:02:01,149 --> 00:02:03,464
we'll come back to that later.

32
00:02:03,464 --> 00:02:05,947
When you declare a variable of
type array,

33
00:02:05,947 --> 00:02:08,049
you also think, like for any other
variable,

34
00:02:08,049 --> 00:02:09,368
about initializing it.

35
00:02:09,368 --> 00:02:12,516
Their exists in fact, since the new
C++ 2011 standard,

36
00:02:12,516 --> 00:02:14,988
five ways of initializing a dynamic
array.

37
00:02:14,988 --> 00:02:16,870
You can either initialize it as empty,

38
00:02:16,870 --> 00:02:19,550
or explicitly give the list of values

39
00:02:19,550 --> 00:02:20,895
that you want to use at the beginning,

40
00:02:20,895 --> 00:02:24,103
or give it a size with eventually

41
00:02:24,103 --> 00:02:26,545
an identical value for all elements

42
00:02:26,545 --> 00:02:29,051
that you put in this array
at the beginning,

43
00:02:29,051 --> 00:02:32,098
or make a copy of an already
existing array.

44
00:02:32,268 --> 00:02:34,038
Let's have a look, in turn, at these
different ways

45
00:02:34,038 --> 00:02:35,483
of initializing an array.

46
00:02:36,003 --> 00:02:38,201
To initialize an empty array, it's
very simple :

47
00:02:38,201 --> 00:02:40,398
there isn't anything in
particular to do.

48
00:02:40,398 --> 00:02:45,302
You only have to declare a variable of
this type, <i>vector<int></i>,

49
00:02:45,302 --> 00:02:47,370
if, for example, you want an array
of integers,

50
00:02:47,370 --> 00:02:51,213
but without adding anything at the
end of the declaration,

51
00:02:51,213 --> 00:02:53,285
without putting an explicit
initialization.

52
00:02:53,285 --> 00:02:54,297
At that moment,

53
00:02:54,297 --> 00:02:57,463
the array will be an array initialized
by the compiler

54
00:02:57,463 --> 00:02:59,871
as being an empty array without any
element.

55
00:02:59,871 --> 00:03:03,391
Contrariwise, if you want to initially
give it values,

56
00:03:03,391 --> 00:03:05,118
for example put the values

57
00:03:05,118 --> 00:03:09,938
20, 35, 26, 38 and 22 already at
the beginning in your array,

58
00:03:09,938 --> 00:03:13,128
the fact remains that it's a dynamic
array, it will be able to evolve.

59
00:03:13,128 --> 00:03:16,364
But if you want these values
at the beginning,

60
00:03:16,364 --> 00:03:17,864
you'll use the syntax

61
00:03:17,864 --> 00:03:21,564
which gives here an explicit list
in the initialization.

62
00:03:21,564 --> 00:03:25,911
So between the two opening and
closing curly braces, a list of values.

63
00:03:25,911 --> 00:03:30,217
Of course, the values you give in this
list must be of the same type

64
00:03:30,217 --> 00:03:35,010
as the type you have specified for your array.

65
00:03:35,279 --> 00:03:36,342
We can also write,

66
00:03:36,342 --> 00:03:38,767
although it isn't tolerated by all
the compilers yet,

67
00:03:38,767 --> 00:03:41,043
instead of having here an
initialization syntax

68
00:03:41,043 --> 00:03:43,021
as we have always had for the
other variables,

69
00:03:43,021 --> 00:03:46,542
have a syntax here which initializes
with the character =.

70
00:03:47,482 --> 00:03:51,070
Third case of initialization, if I want
to set a size at the beginning,

71
00:03:51,070 --> 00:03:53,419
at that moment the syntax will
be the following :

72
00:03:53,419 --> 00:03:57,155
we are, here in parentheses, not going
to set a list of elements,

73
00:03:57,155 --> 00:03:59,853
but set an integer, a size.

74
00:03:59,853 --> 00:04:00,860
So for example,

75
00:04:00,860 --> 00:04:04,106
if I want my dynamic array
to have with five elements at the beginning,

76
00:04:04,106 --> 00:04:08,740
I'll declare a dynamic array of integers,
called here "tab",

77
00:04:08,740 --> 00:04:12,290
and behind it here, I'll specify
that it begins initially

78
00:04:12,290 --> 00:04:13,753
with five elements.

79
00:04:13,753 --> 00:04:17,132
Anticipating a bit with a syntax that
will come later,

80
00:04:17,132 --> 00:04:20,676
you must pay attention to the fact that
here it is indeed a dynamic array

81
00:04:20,676 --> 00:04:22,656
that initially contains five elements

82
00:04:22,656 --> 00:04:25,977
and that it has nothing to do
with a static array

83
00:04:25,977 --> 00:04:28,364
that would always contain
five elements

84
00:04:28,364 --> 00:04:31,225
and which we couldn't
make the size vary.

85
00:04:31,225 --> 00:04:34,580
Here we are still talking about
dynamic arrays

86
00:04:34,580 --> 00:04:38,242
and not at all about arrays whose

87
00:04:38,242 --> 00:04:40,935
size is fixed and which can't evolve,
yet.

88
00:04:40,935 --> 00:04:43,562
So a dynamic array, you can give
it a size.

89
00:04:43,562 --> 00:04:45,031
If we only give it a size,

90
00:04:45,031 --> 00:04:47,399
the array is initialized at the beginning

91
00:04:47,399 --> 00:04:50,721
with elements which are all null,
with that size.

92
00:04:50,721 --> 00:04:52,259
But we can also initialize them

93
00:04:52,259 --> 00:04:55,624
with different elements
of the same value.

94
00:04:55,624 --> 00:05:00,035
If for example I want to begin my
array, which stays dynamic,

95
00:05:00,035 --> 00:05:04,079
with five elements which will
all have the value 1.

96
00:05:06,659 --> 00:05:07,692
At that moment,

97
00:05:07,692 --> 00:05:11,245
I'll declare my array as a dynamic
array of integers

98
00:05:11,865 --> 00:05:14,139
with five elements

99
00:05:16,949 --> 00:05:20,053
which all have the value 1.

100
00:05:20,053 --> 00:05:24,458
So here, this second element is
an element with a value which

101
00:05:24,458 --> 00:05:29,144
has to be of the same type as the type
of the dynamic array,

102
00:05:29,144 --> 00:05:31,652
the type of the elements of the
dynamic array.

103
00:05:31,652 --> 00:05:36,041
So here I put a 1, of type integer,
which causes the five elements

104
00:05:36,061 --> 00:05:39,711
that I initialized to have the same value, 1.

105
00:05:40,231 --> 00:05:44,075
Whereas the 5 here, can be nothing but an integer, since  it's
a size.

106
00:05:44,075 --> 00:05:46,866
Whatever the array's type is,

107
00:05:46,866 --> 00:05:49,274
it's always a size that I give.

108
00:05:49,354 --> 00:05:52,066
Finally, last way of initializing a
dynamic array.

109
00:05:52,156 --> 00:05:54,835
We can also initialize a
dynamic array

110
00:05:54,835 --> 00:05:58,496
by making a copy of an already
existing array.

111
00:05:58,496 --> 00:06:01,399
So for example here I can declare
an array

112
00:06:01,399 --> 00:06:04,382
called "tab2", which will be a copy of another array.

113
00:06:04,382 --> 00:06:09,326
So here we'll copy element by
element the array "tab1" in "tab2"

114
00:06:09,326 --> 00:06:15,355
but we'll indeed have two arrays which,
at the beginning, are in the same situation.

115
00:06:15,355 --> 00:06:19,059
"tab1" and "tab2" both have
five elements

116
00:06:20,339 --> 00:06:23,355
that each have the value 1
at the beginning.

117
00:06:24,815 --> 00:06:31,159
But then each of these two arrays "tab1"
"and "tab2" will evolve separately.

118
00:06:31,159 --> 00:06:35,821
And for example we'll be able to
eventually modify elements in "tab2",

119
00:06:36,881 --> 00:06:39,295
and vary "tab2" as we wish,

120
00:06:39,295 --> 00:06:41,429
independently from "tab1".

121
00:06:41,429 --> 00:06:43,781
They are indeed two completely
separated arrays.

122
00:06:43,781 --> 00:06:48,261
We here have a copy of "tab1"
in "tab2".

123
00:06:49,391 --> 00:06:51,907
So to sum up, we have the five
following ways

124
00:06:51,907 --> 00:06:53,827
of initializing a dynamic array : 

125
00:06:53,827 --> 00:06:57,121
Either empty, we don't put anything,
I insist on this,

126
00:06:57,121 --> 00:07:00,297
after the name of the variable in its
declaration.

127
00:07:00,297 --> 00:07:01,518
The array will here be empty.

128
00:07:01,518 --> 00:07:05,569
Or initialize it with an initial sequence
of values.

129
00:07:05,569 --> 00:07:08,271
To do this we use an opening
curly brace,

130
00:07:08,271 --> 00:07:11,954
a closing curly brace in the
initializaion parentheses.

131
00:07:11,954 --> 00:07:16,160
Or initialize it with a given number
of null elements.

132
00:07:16,160 --> 00:07:18,938
At that moment, in parentheses,
we'll just put an integer.

133
00:07:18,938 --> 00:07:22,148
Or initialize it with a given number
of elements,

134
00:07:22,148 --> 00:07:26,224
so we'll give its size, but with a value
different from 0.

135
00:07:26,224 --> 00:07:28,871
So here we'll provide a value
which is of the same type

136
00:07:28,871 --> 00:07:31,250
as the type announced for every
element.

137
00:07:31,250 --> 00:07:34,620
Or, finally, make a copy of an
already existing array,

138
00:07:38,020 --> 00:07:40,307
and make a copy element by
element.

139
00:07:40,307 --> 00:07:42,673
So there are the five ways of
initalizing a dynamic array.
