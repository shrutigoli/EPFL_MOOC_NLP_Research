1
00:00:06,033 --> 00:00:07,465
Regarding loops on arrays,

2
00:00:07,465 --> 00:00:10,775
we have already seen how to retrieve
the size of the array.

3
00:00:10,775 --> 00:00:14,449
For that, we used a specific function
called "size".

4
00:00:14,449 --> 00:00:16,579
There are actually many
specific functions

5
00:00:16,579 --> 00:00:18,378
associated with dynamic arrays.

6
00:00:18,378 --> 00:00:20,889
We would like to introduce
you to a few ones.

7
00:00:20,889 --> 00:00:24,866
Specific functions are always used
the same way.

8
00:00:24,866 --> 00:00:29,731
That is, the name of the array, followed by
a period (directly glued to the array's name),

9
00:00:29,731 --> 00:00:32,252
followed by the name of the specific
function.

10
00:00:32,252 --> 00:00:35,164
This specific function may, for example,
take arguments

11
00:00:35,164 --> 00:00:36,522
if need be.

12
00:00:36,522 --> 00:00:38,924
In the "size" function, there is
no argument to be provided.

13
00:00:38,924 --> 00:00:40,510
However, we will see examples

14
00:00:40,510 --> 00:00:42,885
where we will need to
provide arguments.

15
00:00:42,885 --> 00:00:46,586
For example, the "size" function
is a specific function

16
00:00:46,586 --> 00:00:48,800
we will apply to an array.

17
00:00:48,800 --> 00:00:50,414
Here, we have declared a dynamic array

18
00:00:50,414 --> 00:00:55,261
called "mesure" which can contain
doubles.

19
00:00:55,261 --> 00:00:59,401
If we want to retrieve this size,
in order to use it in a variable,

20
00:00:59,401 --> 00:01:02,776
remember that the return type
of the "size" function is "size_t".

21
00:01:02,776 --> 00:01:04,218
Thus we will declare a variable


22
00:01:04,218 --> 00:01:07,174
for example, "nombre de mesures" of the
type "size_t".

23
00:01:07,174 --> 00:01:09,509
We will intialize it to 0, for example.

24
00:01:09,509 --> 00:01:13,226
Then, we may use it to retrieve
the return value

25
00:01:13,226 --> 00:01:16,384
of this specific "size" function.

26
00:01:16,384 --> 00:01:18,264
There are several other
specific functions

27
00:01:19,054 --> 00:01:20,630
related to dynamic arrays.

28
00:01:20,630 --> 00:01:25,622
For example, the "front" function will return
a reference to the first element.

29
00:01:25,622 --> 00:01:28,024
For example, if we have
an array called "tableau",

30
00:01:28,024 --> 00:01:33,385
"tableau.front() " is exactly the same
thing as having written  " tableau[0] ".

31
00:01:33,385 --> 00:01:37,362
Of course, there is the symmetry :
"back " returns the last element.

32
00:01:37,362 --> 00:01:39,706
So, what is the last 
element of an array ?

33
00:01:39,706 --> 00:01:46,403
It is "tableau[the size of the array - 1]".

34
00:01:46,837 --> 00:01:51,569
Thus, the last element is :
" tableau[tableau.size() - 1] ".

35
00:01:52,369 --> 00:01:57,360
There is also a function testing
if the array is empty or not.

36
00:01:57,360 --> 00:02:01,796
Thus, the specific function "empty",
will return a boolean-type value

37
00:02:01,796 --> 00:02:05,076
"true" if the array is empty

38
00:02:05,076 --> 00:02:08,321
and "false" if the array
contains something.

39
00:02:08,321 --> 00:02:11,960
You have the specific function "clear"
letting us suppress

40
00:02:11,960 --> 00:02:16,027
all the elements of the array
on which we apply it.

41
00:02:16,027 --> 00:02:20,310
Still with the same syntax :
"the_name_of_the_array.clear() ".

42
00:02:20,310 --> 00:02:24,338
After the call of this specific function
"clear", the array is thus empty.

43
00:02:24,338 --> 00:02:28,315
You then have functions letting
us add or suppress

44
00:02:28,315 --> 00:02:30,180
elements from an array.

45
00:02:30,180 --> 00:02:32,762
For example, the "pop_back" function

46
00:02:32,762 --> 00:02:36,491
lets us suppress the last
element of an array.

47
00:02:36,491 --> 00:02:38,495
Also, the "push_back" function

48
00:02:38,495 --> 00:02:41,145
will add an element at
the end of an array.

49
00:02:41,145 --> 00:02:43,272
Be reminded that we are talking
about dynamic arrays here;

50
00:02:43,272 --> 00:02:44,957
their size can therefore vary.

51
00:02:44,957 --> 00:02:47,046
This means we can add or
suppress elements.

52
00:02:47,046 --> 00:02:51,698
In order to add an element to an
array, we need to indicate its value.

53
00:02:51,698 --> 00:02:52,980
Therefore, the "push_back" function

54
00:02:52,980 --> 00:02:56,686
will receive here the value
we wish to add to the array.

55
00:02:56,686 --> 00:02:59,625
For example, let us consider
a dynamic array "v",

56
00:02:59,625 --> 00:03:01,746
a dynamic array of doubles

57
00:03:02,306 --> 00:03:08,146
initialized with three values :
all 4.5

58
00:03:08,602 --> 00:03:11,983
For example, if we do a "pop_back"
to this "v" array,

59
00:03:11,983 --> 00:03:16,971
"pop_back" will suppress the last element.
We thus end up with an array

60
00:03:16,971 --> 00:03:19,732
only containing two elements.

61
00:03:20,380 --> 00:03:24,169
If we then do a "push_back" on
this same array,

62
00:03:24,169 --> 00:03:27,012
pushing back a certain value, let us
say 5.6,

63
00:03:27,012 --> 00:03:30,515
"push_back" will add an element
behind this array.

64
00:03:30,515 --> 00:03:35,461
Our "v" array now contains
4.5 , 4.6 and 5.6

65
00:03:36,315 --> 00:03:40,423
Now, if we do a second
"push_back", here, with the value 6.7

66
00:03:40,423 --> 00:03:45,000
this means that we add, at the
end of our array, the value 6.7

67
00:03:45,000 --> 00:03:51,362
The array thus now contains
the four values 4.5 , 4.5 , 5.6 and 6.7

68
00:03:51,362 --> 00:03:55,039
And if, finally, we do
another "pop_back",

69
00:03:55,039 --> 00:03:58,759
"pop_back" will suppress the last element
we have just added.

70
00:03:58,759 --> 00:04:03,611
We thus end up with this array
here containing three elements.

71
00:04:04,806 --> 00:04:08,136
Let us take an example using
several of these specific examples.

72
00:04:09,346 --> 00:04:11,769
This example, will revolve
around writing a function

73
00:04:11,769 --> 00:04:16,727
initializing or reinitializing
a dynamic array of integers.

74
00:04:16,727 --> 00:04:19,317
It will ask the user to
enter values

75
00:04:19,317 --> 00:04:21,353
according to the following conventions.

76
00:04:21,353 --> 00:04:24,846
If the user enters strictly positive
numbers,

77
00:04:25,156 --> 00:04:27,593
we will add them to the array.

78
00:04:27,773 --> 00:04:30,025
If the user enters 0,

79
00:04:30,315 --> 00:04:33,959
we will cancel everything
and start all over again.

80
00:04:34,249 --> 00:04:37,285
If the user enters
a negative number,

81
00:04:37,495 --> 00:04:41,572
we will simply suppress the
last element of the array.

82
00:04:42,572 --> 00:04:46,569
For example, let us suppose we
ask the user to enter three values.

83
00:04:47,169 --> 00:04:50,366
The user initially enters
the value 5,

84
00:04:50,366 --> 00:04:54,185
They will thus create a dynamic array with
one single element : 5,

85
00:04:54,185 --> 00:04:58,871
Then, the user will enter the value 2.
We thus add an element : 2

86
00:04:58,871 --> 00:05:01,273
Then, the user enters 0.

87
00:05:01,273 --> 00:05:04,503
According to our convention,
we go back to square one,

88
00:05:04,503 --> 00:05:06,492
and restart with an empty array.

89
00:05:06,752 --> 00:05:10,124
Then, the user types 7.

90
00:05:10,124 --> 00:05:13,740
We thus recreate a dynamic array with
one single element : 7.

91
00:05:13,740 --> 00:05:18,687
They then type 2 and -4.

92
00:05:18,687 --> 00:05:20,585
This is the second convention
according to which,

93
00:05:20,585 --> 00:05:24,803
we simply suppress the last element
of the array.

94
00:05:24,803 --> 00:05:31,770
Then, the user types 4
and 12.

95
00:05:32,510 --> 00:05:36,555
We have thus reached the three values
we were expecting.

96
00:05:36,555 --> 00:05:40,659
The program stops; the array
indeed contains 7, 4 and 12.

97
00:05:41,444 --> 00:05:43,077
We are trying to write this function.

98
00:05:43,267 --> 00:05:46,437
Let us remember the different steps
in order to write a function.

99
00:05:46,437 --> 00:05:50,430
We have just clearly specified
what we wish to do : the "what".

100
00:05:50,430 --> 00:05:53,497
The second step is to focus
on the prototype.

101
00:05:53,497 --> 00:05:56,414
Let us look at typical examples
of calls to thus function.

102
00:05:56,414 --> 00:05:59,925
Let us suppose we have a dynamic
array of integers called "tab".

103
00:05:59,925 --> 00:06:01,387
We could, for example,

104
00:06:01,387 --> 00:06:05,017
use our function (let us call it "saisie")
(TN: "saisie" means "input").

105
00:06:05,017 --> 00:06:08,264
We would like to use this
function, indicating "tab",

106
00:06:08,264 --> 00:06:11,945
and the size of the array;
for example, 5 elements.

107
00:06:12,313 --> 00:06:14,163
For example, we could arbitrarily decide

108
00:06:14,163 --> 00:06:15,805
that if we do not give the size,

109
00:06:15,805 --> 00:06:21,143
this means that we will have to enter,
for example, 4 elements.

110
00:06:21,493 --> 00:06:25,682
Another possible utilization example
would be to have a dynamic array

111
00:06:25,682 --> 00:06:28,117
which is already initialized.

112
00:06:28,117 --> 00:06:32,050
Here, the difference is that "tab"
was an empty dynamic array

113
00:06:32,050 --> 00:06:36,720
while "tab2" is a dynamic array containing
12 elements.

114
00:06:36,720 --> 00:06:39,265
In this case, we could, for example, decide

115
00:06:39,265 --> 00:06:45,823
to enter, in "tab2", the 12 elements.
Namely, the "tab2.size()" elements it contains.

116
00:06:45,823 --> 00:06:49,852
Thus, we will reenter them, using
its size as the second argument.

117
00:06:49,852 --> 00:06:53,759
Those were a few different examples
on how to use the "saisie" function.

118
00:06:54,099 --> 00:06:56,179
We will have to write it, now.

119
00:06:57,179 --> 00:06:58,704
In order to write the "saisie" function.

120
00:06:58,704 --> 00:07:01,313
We start by wondering what its
prototype should be.

121
00:07:01,483 --> 00:07:03,228
First of all, the parameters.

122
00:07:03,228 --> 00:07:04,773
As we seen in the exemplary call,

123
00:07:04,773 --> 00:07:09,041
we will pass an array as the first
argument.

124
00:07:09,041 --> 00:07:14,326
Also, the second optional argument
is a size.

125
00:07:14,736 --> 00:07:17,276
This leaves us with the following
two parameters :

126
00:07:17,276 --> 00:07:19,636
an array and a size.

127
00:07:19,636 --> 00:07:21,361
What is the type of the size?

128
00:07:21,361 --> 00:07:23,158
We will respect the custom

129
00:07:23,158 --> 00:07:26,160
according to which the size of arrays
are of the type "size_t".

130
00:07:26,160 --> 00:07:28,534
Thus, we declare "taille" of the "size_t" type.
(TN: "taille" means "size").

131
00:07:28,534 --> 00:07:30,736
Can the size take a default value?

132
00:07:30,736 --> 00:07:33,584
Yes! as we have seen in the calls,
the size may have a default value.

133
00:07:33,584 --> 00:07:35,977
This means that we are not forced
to specifiy the size.

134
00:07:35,977 --> 00:07:40,605
We will thus arbitrarily decide that
this default size is 4.

135
00:07:40,605 --> 00:07:42,405
Let us move on to the first parameter.

136
00:07:42,405 --> 00:07:45,038
The first parameter is
the dynamic array "vect".

137
00:07:45,038 --> 00:07:48,061
Should this array be
modified by the function.

138
00:07:48,061 --> 00:07:50,332
Yes! it is the task of
our "saisie" function

139
00:07:50,332 --> 00:07:52,279
to input values into the array.

140
00:07:52,279 --> 00:07:56,178
Since the array is modify, we
will pass it by reference.

141
00:07:56,698 --> 00:08:00,860
Its type is a dynamic array of integers,
passed by reference.

142
00:08:00,860 --> 00:08:04,365
We are now done with the parameters
of our function.

143
00:08:04,855 --> 00:08:08,175
Regarding the return value,
we ask ourselves the usual question :

144
00:08:08,175 --> 00:08:13,874
does it make sense to write
" z = saisie(tab) " ?

145
00:08:13,874 --> 00:08:15,368
Does it make sense ?

146
00:08:15,968 --> 00:08:19,941
What would be the value of z
in this input of an array?

147
00:08:19,941 --> 00:08:22,436
Personally, we fail to see
what sense it makes.

148
00:08:22,436 --> 00:08:25,070
Therefore, the return type

149
00:08:25,070 --> 00:08:28,349
will be "void", meaning that
the function will not return anything.

150
00:08:28,719 --> 00:08:30,524
We are now done with the prototype.

151
00:08:30,524 --> 00:08:32,526
Now, we can focus

152
00:08:32,526 --> 00:08:35,645
on the body of the function.

153
00:08:35,645 --> 00:08:42,079
To that end, we will begin
with the empty vector.

154
00:08:42,079 --> 00:08:45,381
That means we will start
by emptying the "vect" vector here

155
00:08:45,381 --> 00:08:48,164
received as argument (we are using
the same name, here).

156
00:08:48,164 --> 00:08:51,807
We are going to empty it with
the specific function "clear".

157
00:08:52,467 --> 00:08:57,101
Then, will print "saisie de" to the user.
(TN : "saisie de" means "input of")

158
00:08:57,101 --> 00:09:00,071
and the number of elements we wish to input.

159
00:09:01,561 --> 00:09:03,900
Thus, "saisie de", for example 3 values.

160
00:09:04,230 --> 00:09:08,024
Then we will start looping as long
as all the desired values

161
00:09:08,024 --> 00:09:10,070
have not been entered.

162
00:09:10,070 --> 00:09:14,495
That means, as long as the current
size of the "vect" array

163
00:09:14,495 --> 00:09:16,052
-which we are manipulating-

164
00:09:16,202 --> 00:09:19,481
is strictly less than the demanded
size.

165
00:09:20,411 --> 00:09:23,462
At this point, as long as the
condition is "true",

166
00:09:23,792 --> 00:09:27,366
we will print "entrez la valeur".
(TN: means "enter the value").

167
00:09:27,826 --> 00:09:29,178
But what value?

168
00:09:29,498 --> 00:09:32,899
At a given time, let us suppose
that the array is partially entered.

169
00:09:32,899 --> 00:09:36,351
For example, we have
already entered the values 7 and 2.

170
00:09:36,351 --> 00:09:39,243
Now, we would like to ask
for a third value here

171
00:09:39,243 --> 00:09:41,428
which will then be added.

172
00:09:41,428 --> 00:09:45,700
What is the position of this
to-be-added value?

173
00:09:45,700 --> 00:09:48,998
The position of the last element
is "the size of the array - 1".

174
00:09:48,998 --> 00:09:52,949
Thus, this upcoming position

175
00:09:52,949 --> 00:09:55,393
is indeed the size of the array.

176
00:09:55,393 --> 00:09:58,426
Thus, we will write vect.size().

177
00:09:58,426 --> 00:10:03,350
And we will print "vect.size() " meaning

178
00:10:03,350 --> 00:10:05,914
to enter the value of the desired index.

179
00:10:06,594 --> 00:10:11,414
Then, we will read, through the
keyboard,

180
00:10:11,414 --> 00:10:13,905
the value entered by the user.

181
00:10:13,905 --> 00:10:16,077
With these lines, we
are reading this value.

182
00:10:16,397 --> 00:10:18,589
Now, we are to treat the
three cases

183
00:10:18,589 --> 00:10:20,516
chosen by our convention.

184
00:10:20,516 --> 00:10:23,718
As we have said, if the value
is negative,

185
00:10:24,728 --> 00:10:30,003
we need to suppress the
last element.

186
00:10:30,003 --> 00:10:33,902
To that end, we first need to make
sure that there is a last element.

187
00:10:33,902 --> 00:10:38,845
That means, if the value is negative
and the array is not empty.

188
00:10:38,845 --> 00:10:41,740
Here, you can see that we are
using the specific function "empty"

189
00:10:41,740 --> 00:10:44,018
testing if, yes or no,
the array is empty.

190
00:10:44,018 --> 00:10:47,849
And suppressing the last element
if the array is not empty.

191
00:10:47,849 --> 00:10:51,955
We thus write "the array is not
empty" : "not vect.empty() "

192
00:10:51,955 --> 00:10:54,581
At this point, if these
two conditions

193
00:10:54,581 --> 00:10:57,237
(the entered value is negative
and the array is not empty)

194
00:10:57,237 --> 00:11:00,228
then we will,

195
00:11:00,228 --> 00:11:02,463
with the specific function "pop_back",

196
00:11:02,463 --> 00:11:05,640
suppress the last element
of the "vect" array.

197
00:11:06,290 --> 00:11:10,310
Otherwise, if the entered value is zero,

198
00:11:10,310 --> 00:11:14,510
our convention is to
destroy the whole array.

199
00:11:14,510 --> 00:11:18,604
This is done with the
specific function "clear".

200
00:11:18,604 --> 00:11:20,023
We thus do "vect.clear() ".

201
00:11:20,723 --> 00:11:24,977
Otherwise, either the value
is strictly positive

202
00:11:25,607 --> 00:11:28,311
or it is strictly negative and
the array is empty.

203
00:11:28,731 --> 00:11:31,237
In order to eliminate this last case

204
00:11:31,237 --> 00:11:34,203
and only keep the case with
a strictly positive value,

205
00:11:34,203 --> 00:11:37,408
we are testing if "val" is
strictly positive.

206
00:11:37,408 --> 00:11:40,603
In this case, we will add the value
with a "push_back".

207
00:11:40,603 --> 00:11:44,739
We will push back this value,

208
00:11:44,739 --> 00:11:47,562
adding it as the last element
of the array.
