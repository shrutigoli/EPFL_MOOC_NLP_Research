1
00:00:03,660 --> 00:00:05,389
In a previous episode,

2
00:00:05,389 --> 00:00:07,946
we have seen one-dimensional
dynamic array,

3
00:00:07,946 --> 00:00:09,849
that is, dynamic arrays
of values.

4
00:00:09,849 --> 00:00:13,551
For example, the different ages
of this course's students.

5
00:00:13,801 --> 00:00:15,446
How should we proceed in order
to represent

6
00:00:15,446 --> 00:00:17,038
multi-dimensional arrays?

7
00:00:17,038 --> 00:00:19,416
For example, an array of
all the grades

8
00:00:19,416 --> 00:00:21,924
of all the students for
for all exams.

9
00:00:22,194 --> 00:00:26,067
For example, we could build
an array for one student

10
00:00:26,078 --> 00:00:29,783
containing the different grades
for the different exams.

11
00:00:29,783 --> 00:00:33,080
Then build a second array
for another student,

12
00:00:33,080 --> 00:00:36,761
also containing the grades
for all their exams.

13
00:00:36,761 --> 00:00:38,555
Then build a third array and so on.

14
00:00:38,555 --> 00:00:41,379
Globablly, we would thus have

15
00:00:41,379 --> 00:00:44,369
an array of ... arrays.

16
00:00:44,679 --> 00:00:50,759
Each element of this array being
an array of grades itself.

17
00:00:53,952 --> 00:00:55,255
For example, let us suppose

18
00:00:55,255 --> 00:00:58,111
that we wish to have
an array for 5 students.

19
00:00:59,051 --> 00:01:00,193
And that, for example,

20
00:01:00,193 --> 00:01:03,894
each of these students will
have passed 6 exams.

21
00:01:03,894 --> 00:01:05,428
Finally, we thus have 6 grades.

22
00:01:05,428 --> 00:01:10,442
We will thus end up with a dynamic array
of 5 arrays of 6 marks.

23
00:01:10,442 --> 00:01:13,519
We will thus declare a dynamic array

24
00:01:13,519 --> 00:01:15,474
which we will call "tab".

25
00:01:15,474 --> 00:01:17,753
This dynamic array will itself contain

26
00:01:17,753 --> 00:01:20,913
a dynamic array of integers.

27
00:01:20,913 --> 00:01:23,498
The integers are our grades.

28
00:01:23,498 --> 00:01:26,240
The dynamic array of integers

29
00:01:26,240 --> 00:01:28,469
is the array of a student's grades.

30
00:01:28,469 --> 00:01:31,136
And the dynamic array of the
dynamic arrays of integers

31
00:01:31,136 --> 00:01:33,730
is the array of the arrays of
all the students.

32
00:01:33,880 --> 00:01:36,129
We will initialize it to the number
of students.

33
00:01:36,129 --> 00:01:38,363
We have 5 students here.

34
00:01:38,713 --> 00:01:42,787
What is each of these 5 element
actually?

35
00:01:42,787 --> 00:01:45,999
It is itself a dynamic array
of integers,

36
00:01:45,999 --> 00:01:47,529
representing a student's grades.

37
00:01:47,529 --> 00:01:49,736
Each of these elements will
contain 6 grades.

38
00:01:49,736 --> 00:01:51,951
Finally, we have a dynamic array

39
00:01:51,951 --> 00:01:58,783
containing 5 dynamic arrays
of 6 grades.

40
00:02:04,227 --> 00:02:08,254
The syntax used here in order
to give an initial value

41
00:02:08,254 --> 00:02:11,292
to each array of grades,
each student,

42
00:02:11,292 --> 00:02:12,975
each subarray

43
00:02:12,975 --> 00:02:15,500
is the same as the one
we have already encountered

44
00:02:15,500 --> 00:02:18,039
during the  copy of an array.

45
00:02:18,039 --> 00:02:20,530
It is the anonymous array.

46
00:02:20,530 --> 00:02:26,762
It is like writing :
" vector <int> tab2 ",

47
00:02:26,762 --> 00:02:31,505
initialized with 6 ints, all with the
initial value zero

48
00:02:32,431 --> 00:02:35,277
except that we have suppressed the name.

49
00:02:35,277 --> 00:02:38,843
We thus end up with an
anonymous array.

50
00:02:38,843 --> 00:02:42,185
Here, we did not name

51
00:02:43,045 --> 00:02:46,027
our dynamic array of 6 null integers.

52
00:02:48,257 --> 00:02:50,529
Now, let us look at our
dynamic array

53
00:02:50,529 --> 00:02:51,993
of dynamic arrays of integers

54
00:02:51,993 --> 00:02:56,868
that we have declared here
and called "tab".

55
00:02:56,868 --> 00:03:03,217
" tab[i] " is thus an element of this
dynamic array

56
00:03:03,217 --> 00:03:09,009
corresponding to an array of grades.

57
00:03:09,460 --> 00:03:13,620
" tab[i] " is thus a itself a dynamic
array of integers,

58
00:03:13,620 --> 00:03:16,211
It corresponds to the type
we have given here :

59
00:03:16,211 --> 00:03:17,785
a dynamic array of integers.

60
00:03:17,785 --> 00:03:22,162
Also, we have given the
initial value here.

61
00:03:22,552 --> 00:03:26,258
Thus "tab[i]", for example "tab[0]"

62
00:03:26,258 --> 00:03:31,174
is this array of 6 integers.

63
00:03:32,224 --> 00:03:36,283
" tab[i][j] " is the element
at the position "j".

64
00:03:36,283 --> 00:03:41,638
Therefore, it means that it is
the (j+1)th element of the "tab[i]" array.

65
00:03:41,978 --> 00:03:44,631
Thus, starting from this array here,

66
00:03:45,211 --> 00:03:49,182
the dynamic array of
dynamic arrays of integers,

67
00:03:50,002 --> 00:03:54,071
if we take "tab[i]",

68
00:03:54,071 --> 00:03:58,779
" tab[i] " is itself a dynamic
array of integers.

69
00:04:01,369 --> 00:04:04,566
We are looking for the (j+1)th element,

70
00:04:04,566 --> 00:04:06,898
the element at the position "j".

71
00:04:08,968 --> 00:04:11,694
As usual, we represent " tab[i] [j] "

72
00:04:11,694 --> 00:04:16,185
as the element on the (j+1)th
row and (j+1)th column.

73
00:04:16,505 --> 00:04:18,511
We do not need to forget that,
here, we have

74
00:04:18,511 --> 00:04:20,994
a dynamic array of dynamic
arrays of integers.

75
00:04:20,994 --> 00:04:23,989
The dynamic aspect of these rows
is still there;

76
00:04:23,989 --> 00:04:26,595
indeed, each of the rows
may have elements

77
00:04:26,595 --> 00:04:29,977
added or removed from it.

78
00:04:29,977 --> 00:04:32,217
Finally, this means that

79
00:04:32,217 --> 00:04:34,276
the dynamic array of
dynamic arrays

80
00:04:34,276 --> 00:04:37,260
does not necessarily have
rows of the same size.

81
00:04:37,260 --> 00:04:39,731
For example, we may very well

82
00:04:39,731 --> 00:04:44,487
have a first size for " tab[0] " here

83
00:04:44,487 --> 00:04:46,973
(it is indeed a dynamic
array of integers),

84
00:04:46,973 --> 00:04:49,250
a different size for " tab[1] "

85
00:04:49,250 --> 00:04:52,487
(a second dynamic array of
integers)

86
00:04:52,487 --> 00:04:54,575
and so on.

87
00:04:56,465 --> 00:04:58,921
Let us now thoroughly
look at this example.

88
00:04:58,921 --> 00:05:00,452
We will thus declare

89
00:05:00,452 --> 00:05:03,216
a dynamic array of dynamic
arrays of integers.

90
00:05:03,216 --> 00:05:05,587
We will call it, for example, "tableau".
(TN: "tableau" means "array").

91
00:05:05,587 --> 00:05:08,232
If we wish to initialize it
to the value of the example

92
00:05:08,232 --> 00:05:10,134
we have drawn here,

93
00:05:10,134 --> 00:05:12,298
what we will do is to

94
00:05:12,298 --> 00:05:16,568
give an initial value as
a list of elements.

95
00:05:16,568 --> 00:05:19,359
Each of these elements being

96
00:05:19,359 --> 00:05:21,179
a dynamic array of integers.

97
00:05:21,179 --> 00:05:23,526
We can see  the first row here.

98
00:05:23,526 --> 00:05:26,499
Then the second row

99
00:05:26,499 --> 00:05:29,931
and so on for the third row

100
00:05:29,931 --> 00:05:31,328
and the fourth row

101
00:05:31,328 --> 00:05:34,923
of our dynamic array of
dynamic arrays of integers.

102
00:05:34,923 --> 00:05:38,468
This initialization corresponds exactly

103
00:05:38,468 --> 00:05:42,512
to the drawing here on the right.

104
00:05:43,712 --> 00:05:46,084
A little digression regarding the syntax :

105
00:05:46,084 --> 00:05:49,192
When we declare a dynamic array
of dynamic array of integers,

106
00:05:49,192 --> 00:05:52,068
we need here to glue together 
the closing of the two types

107
00:05:52,068 --> 00:05:54,217
with the two "greater than" signs,

108
00:05:54,217 --> 00:05:55,767
glued together like this.

109
00:05:55,767 --> 00:05:58,006
This is only allowed in C++ 2011.

110
00:05:58,006 --> 00:06:00,662
If need to write it in a compiler

111
00:06:00,662 --> 00:06:02,227
which is not C++ 2011,

112
00:06:02,227 --> 00:06:05,224
then you will have to put
a blank space between these two signs here.

113
00:06:05,224 --> 00:06:07,557
Indeed, the syntax with the two "greater
than" signs

114
00:06:07,557 --> 00:06:10,590
glued together like this
is not supported

115
00:06:10,590 --> 00:06:12,570
by older compilers.

116
00:06:12,849 --> 00:06:15,255
Now, let us see how to go through
this array.

117
00:06:15,255 --> 00:06:18,392
For that, we will use a
C++ 2011 loop

118
00:06:18,392 --> 00:06:20,736
with the colon.

119
00:06:20,736 --> 00:06:22,248
The array we wish to go through

120
00:06:22,248 --> 00:06:23,653
is "tableau" here.

121
00:06:23,653 --> 00:06:27,565
Here, we are declaring the variable
which will go through the rows.

122
00:06:27,565 --> 00:06:29,814
We call it "ligne".
(TN: "ligne" means "line" or "row").

123
00:06:29,814 --> 00:06:33,874
This will let us go through
the array row by row.

124
00:06:34,823 --> 00:06:37,844
Then, going through a row,

125
00:06:37,844 --> 00:06:40,500
we will explore all the elements of
a given row.

126
00:06:40,500 --> 00:06:42,644
For example, if we are on
the first row,

127
00:06:42,644 --> 00:06:46,077
we will then go through the
different elements of this line here

128
00:06:46,077 --> 00:06:48,492
in a second "for loop".

129
00:06:48,492 --> 00:06:49,871
This loop will, this time,

130
00:06:49,871 --> 00:06:53,719
go through the array "ligne" we have
declared here

131
00:06:53,719 --> 00:06:55,999
which is a given line.

132
00:06:55,999 --> 00:06:58,722
We will go through this row,
naming it

133
00:06:58,722 --> 00:07:00,374
"element".

134
00:07:00,374 --> 00:07:07,136
This "element" variable will go
through the different elements of a row.

135
00:07:07,264 --> 00:07:10,019
This is what we have written here.

136
00:07:10,019 --> 00:07:13,671
We can then use this
"element" variable

137
00:07:13,671 --> 00:07:17,645
in order to go through the
different elements

138
00:07:18,735 --> 00:07:20,144
of a row.

139
00:07:22,694 --> 00:07:25,781
Finally, let us illustrate the
fact that the elements of the array

140
00:07:25,781 --> 00:07:27,548
are indeed dynamic arrays

141
00:07:27,548 --> 00:07:29,916
by giving the size of the
different rows

142
00:07:29,916 --> 00:07:31,483
of the different dynamic arrays.

143
00:07:31,483 --> 00:07:32,861
To that end, we will use

144
00:07:32,861 --> 00:07:35,479
a usual "for loop".

145
00:07:35,479 --> 00:07:38,001
As usual, we will start with " i ",

146
00:07:38,001 --> 00:07:41,728
declared as a "size_t" to the value 0.

147
00:07:41,728 --> 00:07:46,047
As long as " i " is less than
the array size

148
00:07:46,047 --> 00:07:47,464
(the array we are talking about,

149
00:07:47,464 --> 00:07:49,604
the initial array, here),

150
00:07:49,604 --> 00:07:51,049
as we have done countless times,

151
00:07:51,049 --> 00:07:53,301
" i " will be incremented 1 by 1.

152
00:07:53,301 --> 00:07:55,911
What we will do
is to print

153
00:07:55,911 --> 00:07:58,082
" tableau[i] ".

154
00:07:58,082 --> 00:08:01,984
Thus, we will print "tableau[0].size() ",
"tableau[1].size() " and so on.

155
00:08:01,984 --> 00:08:04,646
Then, we can use, as such,

156
00:08:04,646 --> 00:08:08,943
"tableau[i]" which as array

157
00:08:08,943 --> 00:08:11,897
".size()", returning the size of the array.

158
00:08:11,897 --> 00:08:14,167
The following will thus be printed :

159
00:08:14,327 --> 00:08:17,161
5 for " tab[0].size() " ,

160
00:08:17,481 --> 00:08:20,103
3 for " tab[1].size() " ,

161
00:08:21,033 --> 00:08:23,756
2 for " tab[2].size() " ,

162
00:08:25,866 --> 00:08:27,965
and, finally, 3 again 

163
00:08:27,965 --> 00:08:32,263
for " tab[3].size() " .
