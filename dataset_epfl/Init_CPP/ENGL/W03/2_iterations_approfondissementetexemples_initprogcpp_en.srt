1
00:00:00,000 --> 00:00:06,192
Let us start by discussing a few 
more examples of

2
00:00:06,192 --> 00:00:12,864
"for loops". In this loop,
we declared a variable

3
00:00:12,864 --> 00:00:16,785
p, initialized to 0,
the condition is

4
00:00:16,785 --> 00:00:22,521
"p strictly less than 10" and
the increment statement is p += 2.

5
00:00:22,521 --> 00:00:25,734
Be reminded that

6
00:00:25,734 --> 00:00:31,660
p += 2 is strictly equivalent to 
p = p + 2. p is thus

7
00:00:31,660 --> 00:00:37,760
initialized to 0. At the end of the
first iteration, we add

8
00:00:37,760 --> 00:00:42,539
2 to p;  p will thus have the value 2,

9
00:00:42,539 --> 00:00:47,906
then 4 and so on until 10.

10
00:00:47,906 --> 00:00:51,299
In this case, the condition will become

11
00:00:51,299 --> 00:00:56,141
false and we will exit the loop. 
Thus, in the

12
00:00:56,141 --> 00:01:00,853
loop, p will take the values 0, 2, 4

13
00:01:00,853 --> 00:01:05,682
6 and 8.
Let us now consider this

14
00:01:05,682 --> 00:01:11,124
instruction "for", which declares
a variable k

15
00:01:11,124 --> 00:01:16,950
initialized to 10, the condition is
now "k strictly greater than 0"

16
00:01:16,950 --> 00:01:22,307
Please note that the sense of inequality
 has changed. Also, the

17
00:01:22,307 --> 00:01:27,312
increment statement is --k,
meaning k = k  - 1 .

18
00:01:27,312 --> 00:01:32,386
In other words, we will substract 1
from k at every iteration.

19
00:01:32,386 --> 00:01:36,495
Thus, k is initialized to 10, at the
end of the first

20
00:01:36,495 --> 00:01:42,019
iteration, we substract 1 from k;
k will therefore have

21
00:01:42,019 --> 00:01:46,285
the value 9, then 8

22
00:01:46,285 --> 00:01:51,035
and so on until k will be 0.
In this case, the

23
00:01:51,035 --> 00:01:56,040
condition will become false and we
will exit the loop.

24
00:01:56,040 --> 00:02:01,730
Thus within the loop, k will successively
have the values 10, 9

25
00:02:01,730 --> 00:02:07,461
et cetera until 1.
Let us now consider 

26
00:02:07,461 --> 00:02:13,130
a third example, in which we
declare a variable i, initialized to

27
00:02:13,130 --> 00:02:18,530
0, the condition is
"i greater or equal to 0"

28
00:02:18,530 --> 00:02:22,970
and the increment statement
is ++i, meaning we add 

29
00:02:22,970 --> 00:02:25,140
1 to i at every iteration.

30
00:02:25,140 --> 00:02:28,470
i will initially be 0, at
the end of the first

31
00:02:28,470 --> 00:02:32,507
iteration, we add 1
to i;

32
00:02:32,507 --> 00:02:38,085
i will thus have the value 1, the condition
will be true and we keep going.

33
00:02:38,085 --> 00:02:44,330
At the end of the second cycle, we
add 1 to i, which will be 2.

34
00:02:44,330 --> 00:02:49,100
The condition is once again 
true and we repeat.

35
00:02:49,100 --> 00:02:52,928
As you can see, theoretically
 at least,

36
00:02:52,928 --> 00:02:58,110
i will take every possible positive 
value without the 

37
00:02:58,110 --> 00:03:03,865
condition ever becoming false : the loop
will repeat indefinitely.

38
00:03:03,865 --> 00:03:04,762
So why "at least theoretically"?

39
00:03:04,762 --> 00:03:07,229
For technical reasons,

40
00:03:07,229 --> 00:03:10,104
which we won't explain,
it isn't

41
00:03:10,104 --> 00:03:13,212
completely true. But the loop

42
00:03:13,212 --> 00:03:16,420
will still be repeated many a time.

43
00:03:16,420 --> 00:03:19,588
A "for loop" may thus keep going forever.

44
00:03:19,588 --> 00:03:23,140
This happens when the 
condition

45
00:03:23,140 --> 00:03:24,420
is always true.

46
00:03:24,420 --> 00:03:28,132
Several causes thereof are possible,
as in the previous example.

47
00:03:28,132 --> 00:03:32,346
Mayhaps we erred in the condition.
Once again,

48
00:03:32,346 --> 00:03:35,160
in such a case, the loop will

49
00:03:35,160 --> 00:03:39,570
still stop eventually but only
after a lot of iterations.

50
00:03:39,570 --> 00:03:42,522
Another possible cause is
the misspelling of the

51
00:03:42,522 --> 00:03:48,536
increment statement : like
here where we incremented

52
00:03:48,536 --> 00:03:53,260
the variable j, while the condition
relates to the variable i.

53
00:03:53,260 --> 00:03:58,095
If the value of i is not modified
within the block of instructions,

54
00:03:58,095 --> 00:04:03,983
since i is initialized to 0, this 
condition will always be true.

55
00:04:03,983 --> 00:04:08,519
Practically, if you ever find yourself
in a situation where 

56
00:04:08,519 --> 00:04:10,925
a "for loop" is not stopping, you can always

57
00:04:10,925 --> 00:04:13,725
use the shortcut ctrl-c in
order to shut down

58
00:04:13,725 --> 00:04:14,720
your program.

59
00:04:14,720 --> 00:04:21,240
Let us consider a few mistakes,
frequent among beginners.

60
00:04:21,240 --> 00:04:25,240
First of all, note that there is
no semicolon at the

61
00:04:25,240 --> 00:04:27,760
end of the line starting with the keyword "for".

62
00:04:27,760 --> 00:04:30,960
Namely there is no semicolon here.

63
00:04:30,960 --> 00:04:34,110
However, if you were to type a
semicolon here,

64
00:04:34,110 --> 00:04:36,465
the compiler would still accept
your program,

65
00:04:36,465 --> 00:04:39,596
though your program will behave

66
00:04:39,596 --> 00:04:45,336
strangely. Indeed, this code 
with a semicolon,

67
00:04:45,336 --> 00:04:51,000
will only print "bonjour" once.

68
00:04:51,000 --> 00:04:51,904
Why ?

69
00:04:51,904 --> 00:04:56,537
Because the semicolon here,
is considered as

70
00:04:56,537 --> 00:05:01,020
an instruction; an instruction
doing nothing at all.

71
00:05:01,020 --> 00:05:05,154
Thus, your code will 
be interpreted

72
00:05:05,154 --> 00:05:10,152
as, first of all, a "for loop",
the body of which

73
00:05:10,152 --> 00:05:15,462
is nothing but a semicolon.
Thus, this loop will repeat

74
00:05:15,462 --> 00:05:20,860
ten times the blank instruction,
doing strictly nothing,

75
00:05:20,860 --> 00:05:25,735
while the "cout" instruction will be
considered as outside

76
00:05:25,735 --> 00:05:30,515
the loop and will be executed
only once.

77
00:05:30,515 --> 00:05:35,302
Let us consider these three lines

78
00:05:35,302 --> 00:05:40,366
of code. These lines will
result in the following print:

79
00:05:40,366 --> 00:05:45,509
namely the first instruction "cout"
will be repeated five

80
00:05:45,509 --> 00:05:50,700
times, and the second instruction "cout"
will be executed but once.

81
00:05:50,700 --> 00:05:51,883
Then why ?

82
00:05:51,883 --> 00:05:55,930
Because, in fact, this code is
interpreted like this :

83
00:05:55,930 --> 00:06:01,327
the first instruction 
"cout" is within the

84
00:06:01,327 --> 00:06:06,597
"for loop", while the second "cout" instruction
is placed after the "for loop"

85
00:06:06,597 --> 00:06:11,430
and will thus not be repeated.
And be careful !

86
00:06:11,430 --> 00:06:15,890
It is not enough to shift these lines right,
to make 

87
00:06:15,890 --> 00:06:19,545
them both be placed inside
the "for loop".

88
00:06:19,545 --> 00:06:21,075
If you want both these

89
00:06:21,075 --> 00:06:27,469
lines effectively repeated,
one has to place the two

90
00:06:27,469 --> 00:06:33,077
instructions between
braces

91
00:06:33,077 --> 00:06:40,003
In this new version, the code will
indeed produce the printing

92
00:06:40,003 --> 00:06:46,010
"i=0 Bonjour", "i=1 Bonsoir"

93
00:06:46,010 --> 00:06:47,430
et cetera.

94
00:06:47,430 --> 00:06:53,950
Also, refrain from modifying the
variable controlling the number

95
00:06:53,950 --> 00:06:58,986
of iterations within the loop's
body; namely do not attempt

96
00:06:58,986 --> 00:07:04,283
to proceed as in this example, declaring
a variable i at the start

97
00:07:04,283 --> 00:07:10,410
 of the "for loop" and then modifying the
variable i, here in the loop body.

98
00:07:10,410 --> 00:07:11,775
But why ?

99
00:07:11,775 --> 00:07:15,961
First of all because it probably
will not result in what you expect;

100
00:07:15,961 --> 00:07:18,780
do not forget that the "for loop"
will modify

101
00:07:18,780 --> 00:07:21,600
the variable i aswell, through

102
00:07:21,600 --> 00:07:26,406
the increment statement. And secondly,

103
00:07:26,406 --> 00:07:29,214
a  human rereader may not notice that

104
00:07:29,214 --> 00:07:33,980
you were modifying the variable i
within the loop's body.

105
00:07:33,920 --> 00:07:37,274
Let us now treat a new example,

106
00:07:37,274 --> 00:07:41,920
clearly demonstrating some problems
we may encounter with "for loops"

107
00:07:41,920 --> 00:07:45,404
This example consists of a program,
asking four

108
00:07:45,404 --> 00:07:48,303
grades from the user and
printing the average of

109
00:07:48,303 --> 00:07:48,996
these four grades.

110
00:07:48,996 --> 00:07:52,290
We will start with a very simple
version, not taking advantage

111
00:07:52,290 --> 00:07:56,450
of the "for loop", simply declaring 
four different variables.

112
00:07:56,450 --> 00:07:59,310
These variables are called note 1,
note 2, note 3

113
00:07:59,310 --> 00:08:05,450
and note 4, storing the four values inputted
by the user. (TN: note means grade )

114
00:08:05,450 --> 00:08:11,085
At this time, the variables note

115
00:08:11,085 --> 00:08:13,625
1, 2, 3, and 4 are storing the four

116
00:08:13,625 --> 00:08:17,150
values inputted by the user.
We can thus calculate

117
00:08:17,150 --> 00:08:20,990
the sum of these four variables, 
store the result

118
00:08:20,990 --> 00:08:23,789
in a variable we decided to call "somme"
(TN: somme means sum)

119
00:08:23,789 --> 00:08:26,930
and divide this variable by 4
in order to obtain the average.

120
00:08:26,930 --> 00:08:32,946
However, the fact we have declared and
used four different variables

121
00:08:32,946 --> 00:08:35,077
in order to store the four grades

122
00:08:35,077 --> 00:08:39,133
inputted by the user, prevents us,
from directly introducing a

123
00:08:39,133 --> 00:08:41,800
"for loop" and rewriting the program accordingly.

124
00:08:41,800 --> 00:08:47,163
Thus, we will start by modifying this code,
in an equivalent version

125
00:08:47,163 --> 00:08:53,660
using one single variable to store the 
four grades inputted by the user.

126
00:08:53,660 --> 00:08:59,939
Here is our new version where we,
indeed, only have one

127
00:08:59,939 --> 00:09:04,170
variable called "note" used
to store the four 

128
00:09:04,170 --> 00:09:07,520
grades inputted by the user
and a second variable,

129
00:09:07,520 --> 00:09:11,320
called "somme", initialized to 0.

130
00:09:11,320 --> 00:09:15,621
We will ask the user to
enter a value

131
00:09:15,621 --> 00:09:18,825
and store it inside "note". Then we have

132
00:09:18,825 --> 00:09:23,350
an assignment : "somme = 
somme + note".

133
00:09:23,350 --> 00:09:27,654
This code will be 
repeated four times.

134
00:09:27,654 --> 00:09:30,153
At this point,

135
00:09:30,153 --> 00:09:35,778
the variable "somme" will, indeed,
contain the sum of the four variables

136
00:09:35,778 --> 00:09:40,860
inputted by the user, which we
will demonstrate by an example.

137
00:09:40,860 --> 00:09:45,956
With this goal in mind, let us
suppose that the user

138
00:09:45,956 --> 00:09:47,954
types the values 5, 4, 6 and 4.

139
00:09:47,954 --> 00:09:51,526
The variable "note" is not initialized,
thus we

140
00:09:51,526 --> 00:09:55,024
have no clue what it contains
now.

141
00:09:55,024 --> 00:09:58,260
The variable "somme" has been
intialized to 0.

142
00:09:58,260 --> 00:10:03,282
As said, the first value entered by
the user, was 5. Therefore, 

143
00:10:03,282 --> 00:10:08,380
this instruction will assign 5 to
the variable "note".

144
00:10:08,380 --> 00:10:13,913
We move forward to this assignment,
which will compute the value

145
00:10:13,913 --> 00:10:19,795
of this expression, namely compute : sum,
that is, 0

146
00:10:19,795 --> 00:10:25,625
plus note, which is 5, obtain the result
of this expression, 5 again 

147
00:10:25,625 --> 00:10:30,420
and store it inside the variable 
"somme".

148
00:10:30,420 --> 00:10:38,250
The second value entered by
the user is, here, 4. For

149
00:10:38,250 --> 00:10:40,970
this assignment we compute

150
00:10:40,970 --> 00:10:44,604
"somme", which is 5,
plus "note",

151
00:10:44,604 --> 00:10:50,103
which is 4, obtain 9 and store this 9
inside

152
00:10:50,103 --> 00:10:55,562
the variable "somme".
Obviously, at this

153
00:10:55,562 --> 00:11:01,920
point, the variable "somme" will be

154
00:11:01,920 --> 00:11:08,342
0, plus 5, plus 4, plus 6

155
00:11:08,342 --> 00:11:15,255
plus 4, which is indeed the sum
of the 4 values entered by the user.

156
00:11:15,255 --> 00:11:20,223
The edge of this new version
is that we can now 

157
00:11:20,223 --> 00:11:25,688
move this portion of code, repeated four times,
into a "for loop".

158
00:11:25,688 --> 00:11:28,593
This is precisely what we did here:

159
00:11:28,593 --> 00:11:33,670
We reused the code from the last
slide and simply modified the

160
00:11:33,670 --> 00:11:39,170
the "note" index while
using a "for loop" with

161
00:11:39,170 --> 00:11:44,246
a variable declared inside the
"for loop",

162
00:11:44,246 --> 00:11:49,540
called i, intialized to 1 and going
up to 4.

163
00:11:49,540 --> 00:11:58,380
Do not forget to initialize 
the variable "somme" to 0.

164
00:11:58,380 --> 00:12:02,460
Now, our program is only
relevant in case

165
00:12:02,460 --> 00:12:06,380
the user wishes to compute
the average of FOUR grades.

166
00:12:06,380 --> 00:12:10,475
Let us suppose we are to leave the
user choose the number of grades.

167
00:12:10,475 --> 00:12:13,075
How should we modify
the program ?

168
00:12:13,075 --> 00:12:18,547
First of all, we set aside some
space to add the modifications.

169
00:12:18,547 --> 00:12:23,130
Now, we declare an int-type variable
called

170
00:12:23,130 --> 00:12:25,618
"nombre de notes".
(TN: "nombre de notes" means "number of grades")

171
00:12:25,618 --> 00:12:29,648
We ask the user to input a value for
this variable "nombre de notes".

172
00:12:29,648 --> 00:12:32,221
Now, all we need to do is to

173
00:12:32,221 --> 00:12:35,425
replace this 4 here by the variable "nombre
de notes".

174
00:12:35,425 --> 00:12:40,239
Also, we should not forget to replace
this 4 aswell so that we indeed

175
00:12:40,239 --> 00:12:45,712
compute the average.

176
00:12:48,802 --> 00:12:52,652
This was not very difficult.
However, we have

177
00:12:52,652 --> 00:12:56,230
just spawned an error in
our program.

178
00:12:56,230 --> 00:12:59,300
Can you spot it ?

179
00:12:59,300 --> 00:13:03,563
This error will manifest itself when
the user enters

180
00:13:03,563 --> 00:13:08,021
the value 0 for the variable "nombre
de notes".

181
00:13:08,021 --> 00:13:10,787
In this case, a division by 0

182
00:13:10,787 --> 00:13:14,360
will occur, causing a severe error.

183
00:13:14,360 --> 00:13:19,440
There are several solutions to this 
problem. For example, we

184
00:13:19,440 --> 00:13:24,370
could test if the number of grades

185
00:13:24,370 --> 00:13:29,455
is, as expected, greater than 0.
To this end, we simply add

186
00:13:29,455 --> 00:13:34,770
a conditional statement,
move the portion of code

187
00:13:34,770 --> 00:13:40,001
asking for the number of grades
inside this

188
00:13:40,001 --> 00:13:43,446
conditional branch aswell as

189
00:13:43,446 --> 00:13:49,860
the instruction printing the
average.

190
00:13:49,860 --> 00:13:53,862
Let us conclude with the 
so-called nested loops.

191
00:13:53,862 --> 00:13:59,261
To this end, let us go back to the example
regarding the multiplication table of 5

192
00:13:59,261 --> 00:14:05,500
which used a "for loop" to print the table. 
Now let us suppose that we 

193
00:14:05,500 --> 00:14:10,920
wish to print all multiplication
tables from 2 to 10.

194
00:14:10,920 --> 00:14:14,176
We only need to move this
"for loop" into

195
00:14:14,176 --> 00:14:18,756
another "for loop" and modify it
ever so slightly.

196
00:14:18,756 --> 00:14:24,458
If we proceed this way,

197
00:14:24,458 --> 00:14:30,730
which we did here, keeping
the "for loop" exactly as it was

198
00:14:30,730 --> 00:14:33,694
and moving it inside another

199
00:14:33,694 --> 00:14:37,466
"for loop" using a variable j,

200
00:14:37,466 --> 00:14:42,260
initialized to 2 with the condition
"j less or equal to 10".

201
00:14:42,260 --> 00:14:47,470
Thus, j will successively take the values
from 2 to 10.

202
00:14:47,470 --> 00:14:53,535
As such, this code will print 9 times the
multiplication table of 5.

203
00:14:53,535 --> 00:14:56,031
However, since we wish to print

204
00:14:56,031 --> 00:15:02,284
all the tables from 2 to 10,
we only need to modify

205
00:15:02,284 --> 00:15:08,595
this 5 here to j and, most importantly,
to modify this 5 to j aswell.

206
00:15:08,595 --> 00:15:12,252
We obtain this code, which we

207
00:15:12,252 --> 00:15:17,380
will detail in order to verify its
accuracy.

208
00:15:17,380 --> 00:15:21,070
The first "for loop" starts with

209
00:15:21,070 --> 00:15:26,350
the declaration of a variable j initialized
to 2 followed by

210
00:15:26,350 --> 00:15:32,286
testing the condition "j less or equal 
to 10". The condition is true and we thus

211
00:15:32,286 --> 00:15:33,892
enter the body of the

212
00:15:33,892 --> 00:15:38,055
"for loop" j and exececute this
instruction here

213
00:15:38,055 --> 00:15:45,500
printing "table de multiplication par",
then the value of j, that is 2,

214
00:15:45,500 --> 00:15:52,424
then a " : ". Now we execute the
"for loop" i here,

215
00:15:52,424 --> 00:15:59,309
declaring a variable i,
intialized to 1.

216
00:15:59,309 --> 00:16:04,960
Then we test the condition
"i smaller or equal to 10", which is true.

217
00:16:04,960 --> 00:16:10,604
and thus enter the "for loop" i,
executing this instruction

218
00:16:10,604 --> 00:16:16,304
here, with j's value being

219
00:16:16,304 --> 00:16:21,577
2. We will print "multiplié par " then

220
00:16:21,577 --> 00:16:26,373
the value of i being 1, then

221
00:16:26,373 --> 00:16:31,238
"vaut" and finally the value of

222
00:16:31,238 --> 00:16:36,509
j times i, which is simply 2.
We then keep going,

223
00:16:36,509 --> 00:16:40,692
executing the "for loop" i,

224
00:16:40,692 --> 00:16:45,982
namely coming back here.
The increment statement

225
00:16:45,982 --> 00:16:51,560
will add 1 to the value of i.

226
00:16:51,560 --> 00:16:56,725
i will thus take the value 2.
The condition remains true

227
00:16:56,725 --> 00:17:01,765
and therefore we execute
the body of the "for loop" i,

228
00:17:01,765 --> 00:17:06,690
with j still being 2.

229
00:17:06,690 --> 00:17:11,702
Now, i is 2, we thus 

230
00:17:11,702 --> 00:17:16,684
print 2 here and the expression

231
00:17:16,684 --> 00:17:21,660
j times i is now 2 times 2,

232
00:17:21,660 --> 00:17:27,060
that is 4.
And so on until

233
00:17:27,060 --> 00:17:35,711
i has the value 10. Through the 
increment statement, i will pass to 11,

234
00:17:35,711 --> 00:17:41,973
the condition will become false 
and we'll exit the i-loop.

235
00:17:41,973 --> 00:17:47,226
Exiting the loop means
resuming here.

236
00:17:47,226 --> 00:17:52,438
We reach the end of the
"for loop"'s body.

237
00:17:52,438 --> 00:17:56,082
Thus we will keep iterating

238
00:17:56,082 --> 00:18:01,550
within the "for loop" j,
thus jumping back here,

239
00:18:01,550 --> 00:18:06,990
incrementing j, through 

240
00:18:06,990 --> 00:18:13,380
the increment statement ++j.
j therefore has the value 3.

241
00:18:13,380 --> 00:18:17,540
The condition "j smaller or equal to 10"
is still true and we

242
00:18:17,540 --> 00:18:22,244
enter the body of the loop,

243
00:18:22,244 --> 00:18:27,117
first executing this 
instruction, printing "Table de

244
00:18:27,117 --> 00:18:32,392
multiplication par", with j's value,
which is now 3.

245
00:18:32,392 --> 00:18:37,750
Again, we enter the 
"for loop" i. The variable i

246
00:18:37,750 --> 00:18:42,990
is initalized anew

247
00:18:42,990 --> 00:18:47,980
to 1. The condition is true, thus we enter
the body

248
00:18:47,980 --> 00:18:52,905
of the "for loop" i and execute
this instruction here.

249
00:18:52,905 --> 00:18:58,075
This time, j is 3. We print
"multiplié par",

250
00:18:58,075 --> 00:19:03,050
the value of i, which is 1, then

251
00:19:03,050 --> 00:19:08,216
then "vaut" and the value of this 
expression, which is 3 times

252
00:19:08,216 --> 00:19:16,990
1, that is 3 and so on.