1
00:00:00,000 --> 00:00:03,816
In previous episodes we have

2
00:00:03,816 --> 00:00:07,670
discussed the notion of
control structures.

3
00:00:07,670 --> 00:00:09,353
They are special instructions,

4
00:00:09,353 --> 00:00:11,291
making it possible to repeat

5
00:00:11,291 --> 00:00:13,280
processing or to execute 
processing

6
00:00:13,280 --> 00:00:15,340
according to a number
of conditions.

7
00:00:15,340 --> 00:00:19,060
Today, we will expand on this idea
with another way

8
00:00:19,060 --> 00:00:23,210
to repeat processing :
the conditional loops.

9
00:00:23,210 --> 00:00:25,586
If, in a program, we wish

10
00:00:25,586 --> 00:00:28,542
to repeat a number of processing
and that the number

11
00:00:28,542 --> 00:00:31,836
of repetitions is known Ã  priori,
that is,

12
00:00:31,836 --> 00:00:34,600
before entering the loop,
it is possible

13
00:00:34,600 --> 00:00:38,760
to use a "for loop".

14
00:00:38,760 --> 00:00:41,550
However, there are situations
where we wish to repeat processing

15
00:00:41,550 --> 00:00:43,350
as long as a given
condition

16
00:00:43,350 --> 00:00:45,332
is true but we do not know how
many times

17
00:00:45,332 --> 00:00:48,340
it will be necessary to repeat
the processing until

18
00:00:48,340 --> 00:00:50,638
the condition becomes false.
In such

19
00:00:50,638 --> 00:00:52,998
a case we have to use
other types of

20
00:00:52,998 --> 00:00:55,122
repetition instructions :

21
00:00:55,122 --> 00:00:57,425
The conditional loops.
Their execution

22
00:00:57,425 --> 00:01:01,097
depends on the fulfillment of a condition.

23
00:01:01,097 --> 00:01:04,330
In C++ they appear as loops
"do while" or "while".

24
00:01:04,330 --> 00:01:04,730
For illustrations purposes, let us reuse our example

25
00:01:04,730 --> 00:01:05,070
tasked with the computation of some grades' average.

26
00:01:05,070 --> 00:01:10,903
A priori, we do not know


27
00:01:10,903 --> 00:01:16,046
how many grades will be entered
to calculate their average. We begin by

28
00:01:16,046 --> 00:01:18,167
by asking it from the user.
The number of

29
00:01:18,167 --> 00:01:21,560
grades will thus be entered
via keyboard interaction.

30
00:01:21,560 --> 00:01:24,144
Then, if this number is 
positive, we will

31
00:01:24,144 --> 00:01:27,835
use an iteration "for"
and input all the grades.

32
00:01:27,835 --> 00:01:32,547
At every iteration, a grade will be
typed on the keyboard

33
00:01:32,547 --> 00:01:36,966
and added to the sum of all grades.

34
00:01:36,966 --> 00:01:41,417
Once all the grades have been entered,
we will obviously

35
00:01:41,417 --> 00:01:44,343
exit the iteration and
continue

36
00:01:44,343 --> 00:01:46,788
with the execution of the rest of the program

37
00:01:46,788 --> 00:01:51,400
At this point, we will calculate
the average and print it.

38
00:01:51,400 --> 00:01:55,172
We can surmise that is not

39
00:01:55,172 --> 00:01:59,238
very natural to let the user
input a number of grades

40
00:01:59,238 --> 00:02:01,474
equal to 0. Thus, we wonder

41
00:02:01,474 --> 00:02:03,318
how to compel the user into

42
00:02:03,318 --> 00:02:06,721
typing a number of grades

43
00:02:06,721 --> 00:02:08,480
strictly greater than 0.

44
00:02:08,480 --> 00:02:13,478
Concretely, we wish to repeat
these instructions until

45
00:02:13,478 --> 00:02:15,545
the user inputs 
a number of

46
00:02:15,545 --> 00:02:17,310
grades strictly positive.

47
00:02:17,310 --> 00:02:19,418
We do not know how many times

48
00:02:19,418 --> 00:02:22,342
we will have to repeat these instructions,
for we cannot

49
00:02:22,342 --> 00:02:25,310
forsee a priori when
the user will indeed

50
00:02:25,310 --> 00:02:29,405
input a number strictly
positive.

51
00:02:29,405 --> 00:02:31,751
Thus, we will have tu use
a special control structure.

52
00:02:31,751 --> 00:02:36,160
What we are looking for, here,
is the so-called

53
00:02:36,160 --> 00:02:43,216
"do while" loop. The "do while" loop
is written this way :

54
00:02:43,216 --> 00:02:45,428
the keyword "do" followed by a pair

55
00:02:45,428 --> 00:02:48,632
of braces and
the keyword

56
00:02:48,632 --> 00:02:51,994
"while" which means

57
00:02:51,994 --> 00:02:56,775
to repeat as long as

58
00:02:56,775 --> 00:02:58,920
this condition is true.

59
00:02:58,920 --> 00:03:02,139
Concretely, we will repeat

60
00:03:02,139 --> 00:03:05,097
these instruction inside

61
00:03:05,097 --> 00:03:07,190
the body, that is 

62
00:03:07,190 --> 00:03:10,955
the instructions in the
braces

63
00:03:10,955 --> 00:03:15,040
as long as the condition
is true.

64
00:03:15,040 --> 00:03:18,484
Let us now examine step by step
the execution flow of

65
00:03:18,484 --> 00:03:21,778
our little example with the
"do while" loop.

66
00:03:21,778 --> 00:03:25,158
We presuppose that a variable "nombre_de_notes"
has been previously declared

67
00:03:25,158 --> 00:03:28,100
and is ready to contain the number of grades
entered by the user.

68
00:03:28,100 --> 00:03:32,052
Once we reach this instruction,
nothing prevents us from

69
00:03:32,052 --> 00:03:34,408
entering the loop's body.

70
00:03:34,408 --> 00:03:37,460
At this point, we wil ask the user
to input

71
00:03:37,460 --> 00:03:39,825
the number of grades.

72
00:03:39,825 --> 00:03:42,676
The number of grades is entered via
keyboard interation.

73
00:03:42,676 --> 00:03:47,605
Now this line will be executed,
evaluating the

74
00:03:47,605 --> 00:03:50,395
loop continuation condition.

75
00:03:50,395 --> 00:03:52,663
Let us suppose that the user
types,

76
00:03:52,663 --> 00:03:54,450
as the number of grades, the value 0.

77
00:03:54,450 --> 00:03:57,798
In this case, the evaluation of the
condition will return

78
00:03:57,798 --> 00:04:01,534
"true" which means that the number
of grades doesn't

79
00:04:01,534 --> 00:04:04,262
fulfill our criteria.

80
00:04:04,262 --> 00:04:07,500
Since the condition is true, we
will enter a new cycle.

81
00:04:07,500 --> 00:04:10,238
Once again, we will thus execute
the loop's body.

82
00:04:10,238 --> 00:04:12,905
This time, let us suppose that

83
00:04:12,905 --> 00:04:15,849
the user inputs, as number of
grades,

84
00:04:15,849 --> 00:04:18,310
the value -1.

85
00:04:18,310 --> 00:04:23,642
During the evaluation of the continuation
condition, this condition

86
00:04:23,642 --> 00:04:27,050
will once again return true, for, of course,
-1 is less or equal to 0.

87
00:04:27,050 --> 00:04:30,344
At this point, we will

88
00:04:30,344 --> 00:04:34,540
once again, enter a new cycle.

89
00:04:34,540 --> 00:04:38,236
We begin our third iteration
and, again, 

90
00:04:38,236 --> 00:04:41,993
we will ask the user to 
input the number of grades

91
00:04:41,993 --> 00:04:45,470
and read it via keyboard interaction.
Let us suppose, that this time,

92
00:04:45,470 --> 00:04:49,128
the crestfallen user ends up
understanding what we're expecting

93
00:04:49,128 --> 00:04:53,230
and inputs number of grades strictly
positive, for example, 6.

94
00:04:53,230 --> 00:04:57,826
At this time, during the evaluation
of the loop continuation

95
00:04:57,826 --> 00:05:03,840
condition, the evaluation will return false
since 6 is

96
00:05:03,840 --> 00:05:07,728
strictly greater than 0. Thus, we exit
the "do while" loop

97
00:05:07,728 --> 00:05:10,210
and resume the execution right

98
00:05:10,210 --> 00:05:13,910
after the semicolon concluding
the "do while" instruction.

99
00:05:13,910 --> 00:05:18,372
Now let us formally examine
the syntax of a

100
00:05:18,372 --> 00:05:21,910
"do while" instruction in C++.

101
00:05:21,910 --> 00:05:24,213
The keywords "do while" frame 
the so-called

102
00:05:24,213 --> 00:05:27,040
"do while body", which rests in
braces.

103
00:05:27,040 --> 00:05:28,900
Following the "while" is the

104
00:05:28,900 --> 00:05:34,466
loop continuation condition.
The semantic is as follows:

105
00:05:34,466 --> 00:05:39,860
the processing within the body are 
repeated as long as the condition is "true".

106
00:05:39,860 --> 00:05:44,240
Once again : we repeat the processing
as long as the condition is "true".

107
00:05:44,240 --> 00:05:47,052
Not unlike the instruction of a
conditional branching,

108
00:05:47,052 --> 00:05:49,568
the "do while" loop continuation

109
00:05:49,568 --> 00:05:54,212
condition can be relatively complex,
resorting

110
00:05:54,212 --> 00:05:55,488
to logical operators.

111
00:05:55,488 --> 00:05:59,501
For example, we can formulate such
a condition :

112
00:05:59,501 --> 00:06:05,580
let's repeat the processing as long as
x is equal to y plus z and that

113
00:06:05,580 --> 00:06:13,495
z is greater than 10 or t is
less than 25.

114
00:06:13,495 --> 00:06:16,127
Thus we can imagine pretty

115
00:06:16,127 --> 00:06:19,655
sophisticated continuation conditions,
especially resorting to

116
00:06:19,655 --> 00:06:21,410
logical operators.

117
00:06:21,410 --> 00:06:25,235
It is also worth noting that the
parentheses around

118
00:06:25,235 --> 00:06:29,265
the condition are absolutely 
mandatory in C++.

119
00:06:29,265 --> 00:06:31,225
Just as it is with the"if", the condition

120
00:06:31,225 --> 00:06:35,160
will be written in a pair of parentheses.

121
00:06:35,160 --> 00:06:39,102
An important observation regarding
the "do while" loop is

122
00:06:39,102 --> 00:06:43,295
that its body will systematically be executed
at least once.

123
00:06:43,295 --> 00:06:44,663
Indeed, if we recall our

124
00:06:44,663 --> 00:06:47,830
step by step example of a
"do while" loop,

125
00:06:47,830 --> 00:06:50,050
we see that at this point, 

126
00:06:50,050 --> 00:06:52,450
nothing prevents us from entering
the body,

127
00:06:52,450 --> 00:06:54,570
thus we will execute the block at
least once.

128
00:06:54,570 --> 00:06:58,340
However, this block will only be
executed once if, after the

129
00:06:58,340 --> 00:07:01,395
first iteration, the evaluation
of the condition

130
00:07:01,395 --> 00:07:04,860
returns "false".

131
00:07:04,860 --> 00:07:09,984
In this case, we will simply resume
the execution after

132
00:07:09,984 --> 00:07:10,680
the loop.

133
00:07:10,680 --> 00:07:14,450
But in the meantime, the block of instructions 
will have been executed once.

134
00:07:14,450 --> 00:07:18,520
This is very important and stands among the
"do while" loop's specificities.

135
00:07:18,520 --> 00:07:22,048
Another observation : if the
condition doesn't ever

136
00:07:22,048 --> 00:07:26,520
become false, then the processing
will be repeated indefinitely.

137
00:07:26,520 --> 00:07:30,550
Consequently, one must be careful in
the condition's formulation in order

138
00:07:30,550 --> 00:07:33,435
to prevent an infinite loop.
Indeed, infinite loops are generally

139
00:07:33,435 --> 00:07:35,297
not the expected result,

140
00:07:35,297 --> 00:07:37,110
at least not for beginners.

141
00:07:37,110 --> 00:07:38,090
Those were the 

142
00:07:38,090 --> 00:07:40,350
core ideas regarding the "do while" loop.

143
00:07:40,350 --> 00:07:42,040
Before we can put behind us

144
00:07:42,040 --> 00:07:45,290
the topic of the "do while" syntax,
please heed this last warning :

145
00:07:45,290 --> 00:07:48,315
this semicolon here, at the end
of the "do while" instruction,

146
00:07:48,315 --> 00:07:50,850
which is rather easy to forget.

147
00:07:50,850 --> 00:07:56,583
Now, there are situations where we wish
to test the loop's condition

148
00:07:56,583 --> 00:08:00,287
prior to the execution of the body.

149
00:08:00,287 --> 00:08:03,187
In such as case, we will resort
to another variant of

150
00:08:03,187 --> 00:08:05,780
conditional loops :
the "while" instruction.

151
00:08:05,780 --> 00:08:07,288
Its syntax is as follows :

152
00:08:07,288 --> 00:08:09,144
the keyword "while" immediately followed

153
00:08:09,144 --> 00:08:11,986
by the condition, in parentheses.

154
00:08:11,986 --> 00:08:17,666
Then comes the loop's body
in braces.

155
00:08:17,666 --> 00:08:21,815
The "while" loop is rather similar
to the

156
00:08:21,815 --> 00:08:25,315
"do while" loop : we will repeat
the processing as long as

157
00:08:25,315 --> 00:08:30,286
the condition returns true.
The main difference is that, in the "while" loop,

158
00:08:30,286 --> 00:08:36,396
the condition is tested before
we enter the loop.

159
00:08:36,396 --> 00:08:40,092
Thus, if the condition is

160
00:08:40,092 --> 00:08:44,110
false from the get-go,
we will immediately jump

161
00:08:44,110 --> 00:08:47,118
to the next instruction after the "while",
meaning that the block

162
00:08:47,118 --> 00:08:50,317
will not be executed a single time.
As we've seen before, it is not

163
00:08:50,317 --> 00:08:52,585
the case with the "do while" loop 

164
00:08:52,585 --> 00:08:55,050
where the block will always be executed
at least once.

165
00:08:55,050 --> 00:08:59,082
Here are two basic examples,
illustrating the

166
00:08:59,082 --> 00:09:02,127
fundamental difference between 
"while" and "do while".

167
00:09:02,127 --> 00:09:05,232
We have here two very
similar loops,

168
00:09:05,232 --> 00:09:08,190
with identical continuation conditions.

169
00:09:08,190 --> 00:09:11,190
In both cases, the continuation condition
relies on

170
00:09:11,190 --> 00:09:13,977
a variable i, intialized to 100.

171
00:09:13,977 --> 00:09:15,804
Let us start by examining

172
00:09:15,804 --> 00:09:18,729
what happens during the execution
of the "do while" loop.

173
00:09:18,729 --> 00:09:20,973
When we reach the execution of the
"do while",

174
00:09:20,973 --> 00:09:23,115
nothing prevents us from entering the
loop's body.

175
00:09:23,115 --> 00:09:24,543
At this point, we will print

176
00:09:24,543 --> 00:09:27,676
the message "bonjour".

177
00:09:27,676 --> 00:09:31,399
Now we reach the point of the
"do while" loop

178
00:09:31,399 --> 00:09:33,890
where the continuation condition
is evaluated.

179
00:09:33,890 --> 00:09:38,176
Since i contains 100, the condition
will of course return "false".

180
00:09:38,176 --> 00:09:40,929
Thus we exit the loop and continue

181
00:09:40,929 --> 00:09:42,441
the execution with the possible

182
00:09:42,441 --> 00:09:44,547
instructions after the "do while".

183
00:09:44,547 --> 00:09:48,160
In the meantime, the message "bonjour"
has been displayed on the terminal.

184
00:09:48,160 --> 00:09:53,630
Now on to the "while" loop. Upon this

185
00:09:53,630 --> 00:09:55,190
line's execution, we will right away

186
00:09:55,190 --> 00:09:56,790
test the condition which will,
as before,

187
00:09:56,790 --> 00:09:59,362
since both conditions are identical,

188
00:09:59,362 --> 00:10:02,715
be evaluated as false.
This means that we won't

189
00:10:02,715 --> 00:10:04,027
ever enter the loop's body

190
00:10:04,027 --> 00:10:05,954
and instead continue the execution 

191
00:10:05,954 --> 00:10:08,900
right after the "while".
Thus, the loop has not printed anything.

192
00:10:08,900 --> 00:10:12,350
Here, we found ourselves in a situation
where two

193
00:10:12,350 --> 00:10:15,036
very similar loops : one "do while"
and one "while"

194
00:10:15,036 --> 00:10:17,088
do not lead to the same result.

195
00:10:17,088 --> 00:10:19,690
This is due to the time where the
continuation condition is evaluated.

196
00:10:19,690 --> 00:10:23,470
Among the classic mistakes among
beginners using

197
00:10:23,470 --> 00:10:26,998
the "while" and "do while" loops is one

198
00:10:26,998 --> 00:10:29,115
possibly leading to very

199
00:10:29,115 --> 00:10:31,167
puzzling results. This mistake relates

200
00:10:31,167 --> 00:10:32,560
to our famous semicolon.

201
00:10:32,560 --> 00:10:35,944
This semicolon marks the end
of the "do while"

202
00:10:35,944 --> 00:10:39,050
instruction and is placed right
after the condition.

203
00:10:39,050 --> 00:10:43,829
Now, if we were to add 
a semicolon after the

204
00:10:43,829 --> 00:10:47,435
"while" condition, our program would behave strangely
and, most importantly, incorrectly.

205
00:10:47,435 --> 00:10:49,396
Let us see what would happen

206
00:10:49,396 --> 00:10:51,610
if we added this semicolon.

207
00:10:51,610 --> 00:10:54,348
This instruction would be interpreted

208
00:10:54,348 --> 00:10:56,272
as if it were a "while" loop

209
00:10:56,272 --> 00:11:01,510
with, as body, an empty instruction.
Therefore, there is nothing

210
00:11:01,510 --> 00:11:05,731
within the loop impacting i.

211
00:11:05,731 --> 00:11:10,171
So, if i contained something

212
00:11:10,171 --> 00:11:15,340
less than 10, for example 1,
this loop would cycle indefinitely

213
00:11:15,340 --> 00:11:17,815
since there is no way to 
make i reach a value

214
00:11:17,815 --> 00:11:20,810
greater than 10, which would render
the condition false.

215
00:11:20,810 --> 00:11:21,674
As a matter of fact,

216
00:11:21,674 --> 00:11:23,869
this ++i, which we probably wished

217
00:11:23,869 --> 00:11:26,415
to be inside the body,

218
00:11:26,415 --> 00:11:30,370
will never be reached if
i started containing less than 10.

219
00:11:30,370 --> 00:11:34,722
Indeed, this plus plus i instruction

220
00:11:34,722 --> 00:11:38,140
will be considered as being
outside the "while" loop.

221
00:11:38,140 --> 00:11:40,486
Now you know three ways to 
repeat instructions

222
00:11:40,486 --> 00:11:42,628
in a program : the "for loop"

223
00:11:42,628 --> 00:11:44,362
which we have discussed

224
00:11:44,362 --> 00:11:46,962
in a previous episode and what we 
have just seen, 

225
00:11:46,962 --> 00:11:50,610
namely the conditional loops 
which can take two forms,

226
00:11:50,610 --> 00:11:53,200
either "while" or "do while".

227
00:11:53,200 --> 00:11:55,081
Now, we will discuss

228
00:11:55,081 --> 00:11:57,361
how to choose which form to use.

229
00:11:57,361 --> 00:11:59,440
The choice depends on rather
simple criteria.

230
00:11:59,440 --> 00:12:04,032
If the number of repetitions is known
a priori,

231
00:12:04,032 --> 00:12:07,580
we will want to choose the "for" type
iteration.

232
00:12:07,580 --> 00:12:09,881
Imagine for example that you wish 
to calculate

233
00:12:09,881 --> 00:12:12,064
the average of all students
attending

234
00:12:12,064 --> 00:12:15,104
this course. We know a priori how many 
students follow

235
00:12:15,104 --> 00:12:17,920
this course. Thus, in order to calculate the
sum of the grades

236
00:12:17,920 --> 00:12:21,065
and the average, we will gladly

237
00:12:21,065 --> 00:12:25,330
use a "for loop" since the number
of iterations is known a priori.

238
00:12:25,330 --> 00:12:27,943
However, if the number of iterations is not
known

239
00:12:27,943 --> 00:12:31,570
a priori, we will pick a conditional
loop,

240
00:12:31,570 --> 00:12:33,901
either "while" or "do while".
Now how do we choose

241
00:12:33,901 --> 00:12:36,550
between "while" and "do while" ?

242
00:12:36,550 --> 00:12:37,398
Simply, we will ask 

243
00:12:37,398 --> 00:12:39,889
ourselves if we need to execute

244
00:12:39,889 --> 00:12:42,380
at least once the loop's body.

245
00:12:42,380 --> 00:12:45,142
If we want the body to be executed
at least once,

246
00:12:45,142 --> 00:12:49,465
which is the case, if we're
interracting with the user,

247
00:12:49,465 --> 00:12:52,210
for example, if we ask a value from the user
and demand this value to be

248
00:12:52,210 --> 00:12:55,712
between two values, we need
the user to input the value

249
00:12:55,712 --> 00:12:59,051
at least once before we can test
if it fulfills the condition.

250
00:12:59,051 --> 00:13:02,781
In this situation, we will rather
resort to a

251
00:13:02,781 --> 00:13:03,704
"do while" loop.

252
00:13:03,704 --> 00:13:06,544
Otheriwse, we will naturally
use a

253
00:13:06,544 --> 00:13:08,646
"while" loop, that is, 

254
00:13:08,646 --> 00:13:11,344
a loop where the condition evaluation
will

255
00:13:11,344 --> 00:13:14,060
occur before entering the 
loop's body.

256
00:13:14,060 --> 00:13:17,372
Now, let us enrich our little example
from before.

257
00:13:17,372 --> 00:13:20,132
It is a typical situation where
a "do while" loop

258
00:13:20,132 --> 00:13:22,944
is required since we need the user
to input

259
00:13:22,944 --> 00:13:24,920
the number of grades at least once
before we can

260
00:13:24,920 --> 00:13:27,570
test if this number is within
the desired interval.

261
00:13:27,570 --> 00:13:30,538
Thus we resorted to a "do while"
loop. Now we

262
00:13:30,538 --> 00:13:33,840
wish to upgrade this program a
little so that

263
00:13:33,840 --> 00:13:38,172
the user will be informed upon
entering, for example,

264
00:13:38,172 --> 00:13:41,919
a negative number, of the program's
expectations.

265
00:13:41,919 --> 00:13:43,593
So we wish to complete 

266
00:13:43,593 --> 00:13:46,010
the here program so that a 

267
00:13:46,010 --> 00:13:49,506
relevant message will be displayed
when the user

268
00:13:49,506 --> 00:13:52,862
enters a negative or null
grade.

269
00:13:52,862 --> 00:13:54,553
How should we proceed ?

270
00:13:54,553 --> 00:13:59,502
Obviously, this message will appear
every time the number

271
00:13:59,502 --> 00:14:01,814
does not fulfill the desired condition.

272
00:14:01,814 --> 00:14:04,953
Thus, it will probably be placed

273
00:14:04,953 --> 00:14:08,648
within the loop's body : we will 
repeat this instruction

274
00:14:08,648 --> 00:14:09,890
every time the user

275
00:14:09,890 --> 00:14:11,690
inputs something incorrect.

276
00:14:11,690 --> 00:14:15,302
We could imagine such a solution :

277
00:14:15,302 --> 00:14:17,985
enriching the loop's body

278
00:14:17,985 --> 00:14:20,785
with one more test. After having read
the

279
00:14:20,785 --> 00:14:25,435
entered value, we will test if
the typed number

280
00:14:25,435 --> 00:14:27,255
is less or equal to 0.

281
00:14:27,255 --> 00:14:31,840
In this case, we will display a message
to warn the user.

282
00:14:31,840 --> 00:14:35,726
Please note, that this is indeed part
of the loop's body

283
00:14:35,726 --> 00:14:38,272
since we wish to repeat this process
every time

284
00:14:38,272 --> 00:14:40,850
an unsatisfactory number is entered.

285
00:14:40,850 --> 00:14:43,160
As you can see in this example,

286
00:14:43,160 --> 00:14:46,075
the condition testing if the number
of grades

287
00:14:46,075 --> 00:14:48,801
is less or equal to 0 appears now twice :

288
00:14:48,801 --> 00:14:50,580
Once in the "if" and another

289
00:14:50,580 --> 00:14:54,905
as the loop continuation condition.

290
00:14:54,905 --> 00:14:58,713
It would have been smart to store
the result of this evaluation

291
00:14:58,713 --> 00:15:03,610
in a variable so that we do not need
to evaluate it again.

292
00:15:03,610 --> 00:15:05,553
For example, we can introduce a

293
00:15:05,553 --> 00:15:09,188
boolean variable "saisie_invalide"
initialized to "false". (TN: saisie_invalide means invalid_entry )

294
00:15:09,188 --> 00:15:14,793
We will update this variable here, 
in the loop's body at every iteration,

295
00:15:14,793 --> 00:15:21,640
storing the result of the condition
evaluation, that is

296
00:15:21,640 --> 00:15:29,150
"number of grades less or equal to 0". Thus, 
"saisie_invalide" will contain either "true" or "false"

297
00:15:29,150 --> 00:15:31,460
This will allow us to write the condition

298
00:15:31,460 --> 00:15:34,420
in a unified way, replacing
this by

299
00:15:34,420 --> 00:15:40,141
"if (saisie_invalide)" and we'll

300
00:15:40,141 --> 00:15:46,610
resume the processing as before.

301
00:15:46,610 --> 00:15:54,240
We will repeat the processing "while" the
the variable "saisie_invalide" contains true.

302
00:15:54,240 --> 00:15:56,268
This here is good practice.

303
00:15:56,268 --> 00:15:59,856
In a program, we always wish
to avoid

304
00:15:59,856 --> 00:16:02,280
situations where we express the same thing

305
00:16:02,280 --> 00:16:04,930
multiple times in independant ways,
in several places.

306
00:16:04,930 --> 00:16:06,130
It is like the copy-paste.

307
00:16:06,130 --> 00:16:08,866
So, let us return to our little example

308
00:16:08,866 --> 00:16:11,870
regarding the input of grades
by a user.

309
00:16:11,870 --> 00:16:14,930
Let us examine different ways to
formulate the condition

310
00:16:14,930 --> 00:16:17,610
in order to tend to different
needs.

311
00:16:17,610 --> 00:16:21,135
Until now, we compelled the user
to type 

312
00:16:21,135 --> 00:16:24,000
a number of grades greater than 0.

313
00:16:24,000 --> 00:16:25,159
Let us imagine,

314
00:16:25,159 --> 00:16:27,965
that we wish to restrict the
number of grades to 10.

315
00:16:27,965 --> 00:16:30,390
The question we are asking is:

316
00:16:30,390 --> 00:16:34,450
how do we formulate the condition
with this new goal in mind ?

317
00:16:34,450 --> 00:16:38,071
In order to formulate the
continuation condition,

318
00:16:38,071 --> 00:16:41,124
let us start by expressing it in
plain words.

319
00:16:41,124 --> 00:16:43,302
Now, the number of entered

320
00:16:43,302 --> 00:16:45,810
grades will be incorrect in two cases :

321
00:16:45,810 --> 00:16:48,495
either this number will be

322
00:16:48,495 --> 00:16:50,315
less or equal to 0, which contradicts

323
00:16:50,315 --> 00:16:53,500
this expectation, or the user will
input a number

324
00:16:53,500 --> 00:16:57,332
greater than 10, which contradicts
this.

325
00:16:57,332 --> 00:17:00,494
That means we will loop 
as long as

326
00:17:00,494 --> 00:17:03,285
we find ourselves in either one of these
situations.

327
00:17:03,285 --> 00:17:06,764
In both cases, the number of grades,
is incorrect.

328
00:17:06,764 --> 00:17:09,296
It now becomes obvious

329
00:17:09,296 --> 00:17:11,066
that we will have to resort to

330
00:17:11,066 --> 00:17:13,131
the logical connective "OR". Namely,

331
00:17:13,131 --> 00:17:16,065
we repeat the processing as long as
either situation

332
00:17:16,065 --> 00:17:17,274
is encountered.

333
00:17:17,274 --> 00:17:20,343
In C++, this will be translated

334
00:17:20,343 --> 00:17:24,022
by such a code.
We repeat the processing as long

335
00:17:24,022 --> 00:17:27,150
as the entered number of grades is
less or equal to 0

336
00:17:27,150 --> 00:17:31,690
OR that the number of grades is greater
than 10.

337
00:17:31,690 --> 00:17:35,650
Let us move on to another example.
We wish to write a short

338
00:17:35,650 --> 00:17:39,447
program which purpose is
to make the user guess a number.

339
00:17:39,447 --> 00:17:41,085
To simplify, let us imagine

340
00:17:41,085 --> 00:17:43,038
that the number to guess is always 5.

341
00:17:43,038 --> 00:17:45,440
The idea is to code a "do while" loop

342
00:17:45,440 --> 00:17:48,252
asking a number from the user
and comparing it

343
00:17:48,252 --> 00:17:50,694
with the secret number. We will exit

344
00:17:50,694 --> 00:17:53,375
the loop only once the number
has been guessed.

345
00:17:53,375 --> 00:17:55,142
We're wondering how to

346
00:17:55,142 --> 00:17:57,422
formulate the condition so that

347
00:17:57,422 --> 00:18:01,310
we exit the loop once the user has
guessed the correct number.

348
00:18:01,310 --> 00:18:05,930
As before, we will start by formulating
the condition in plain words.

349
00:18:05,930 --> 00:18:06,238
We know that 

350
00:18:06,238 --> 00:18:08,788
the loop is to be repeated as long as

351
00:18:08,788 --> 00:18:11,182
the user has not guessed the secret number.

352
00:18:11,182 --> 00:18:12,664
What does it concretely mean ?

353
00:18:12,664 --> 00:18:15,172
They have not guessed correctly as 
long as the typed

354
00:18:15,172 --> 00:18:19,547
number is different from the secret
number, which is 5.

355
00:18:19,547 --> 00:18:23,030
How do we formulate this condition in C++ ?

356
00:18:23,030 --> 00:18:26,446
Simply through this line :
we repeat the process

357
00:18:26,446 --> 00:18:30,227
as long as the entered number is
different from the secret number.

358
00:18:30,227 --> 00:18:31,347
We notice that

359
00:18:31,347 --> 00:18:34,638
the formulation in C++ is not 
too far from

360
00:18:34,638 --> 00:18:36,130
the formulation in plain words.

361
00:18:36,130 --> 00:18:40,820
Let us now enrich this example where
the user is tasked with guessing

362
00:18:40,820 --> 00:18:44,966
a number. We wish to give the user
only a limited number of trials.

363
00:18:44,966 --> 00:18:48,047
The poor fellow will not be allowed to guess

364
00:18:48,047 --> 00:18:50,800
indefinitely. Thus we will 
resort to a

365
00:18:50,800 --> 00:18:53,501
trial counter, that is, a variable we

366
00:18:53,501 --> 00:18:56,494
introduce here. This trial counter
will be

367
00:18:56,494 --> 00:18:59,476
incremented at every loop
iteration.

368
00:18:59,476 --> 00:19:01,151
Now, we wish that,

369
00:19:01,151 --> 00:19:03,825
after three trials, the game will
be over

370
00:19:03,825 --> 00:19:05,505
unless the user has guessed correctly.

371
00:19:05,505 --> 00:19:06,737
Now we're wondering

372
00:19:06,737 --> 00:19:09,380
how to formulate this condition.

373
00:19:09,380 --> 00:19:13,475
Once again, let us start by formulating
this condition in plain words.

374
00:19:13,475 --> 00:19:17,955
We will repeat the loop as long as
the user has not guessed

375
00:19:17,955 --> 00:19:21,503
the correct number and as long
as the user still has trials left.

376
00:19:21,503 --> 00:19:23,042
It is clear that both conditions

377
00:19:23,042 --> 00:19:25,151
must be fulfilled together.

378
00:19:25,151 --> 00:19:28,591
We will keep iterating only if both conditions
are fulfilled.

379
00:19:28,591 --> 00:19:30,661
Now, let us try to formulate

380
00:19:30,661 --> 00:19:33,607
this somehow closer to C++.

381
00:19:33,607 --> 00:19:36,610
The first condition is that the entered
number

382
00:19:36,610 --> 00:19:38,510
is different from the secret number.
The second 

383
00:19:38,510 --> 00:19:40,660
condition is that the number of trials
is less

384
00:19:40,660 --> 00:19:46,330
than 3. Both these conditions must be
verified together.

385
00:19:46,330 --> 00:19:46,644
In C++,

386
00:19:46,644 --> 00:19:53,590
this translates into this line of code.

387
00:19:53,590 --> 00:19:57,100
The first condition is that entered number
is different from the secret number,

388
00:19:57,100 --> 00:20:00,850
which translates into what is written here.
The second condition is that

389
00:20:00,850 --> 00:20:05,425
the number of trials must be less than 3, 
which translates into

390
00:20:05,425 --> 00:20:08,130
what is written.

391
00:20:08,130 --> 00:20:11,902
We have here the logical connective "AND"
which guarantees.

392
00:20:11,902 --> 00:20:15,592
that both conditions must be fulfilled
simultaneously.

393
00:20:15,592 --> 00:20:18,626
Again, we see, that the C++
formulation

394
00:20:18,626 --> 00:20:21,440
is not too different from the formulation
in plain words.

395
00:20:21,440 --> 00:20:25,806
The user can now exit the loop in
two different ways.

396
00:20:25,806 --> 00:20:30,290
He can exit the loop because he has
guessed correctly, in which case,

397
00:20:30,290 --> 00:20:33,426
this part of the condition 
becomes false

398
00:20:33,426 --> 00:20:36,130
or because he has run out
of trials.

399
00:20:36,130 --> 00:20:36,982
Now,

400
00:20:36,982 --> 00:20:40,532
let us suppose that we wish to let
the user know

401
00:20:40,532 --> 00:20:43,810
why, concretely, he exits the loop.

402
00:20:43,810 --> 00:20:47,743
Since we wish to inform the user of
the reason why he

403
00:20:47,743 --> 00:20:51,905
exits the loop, we need to enrich
the program.

404
00:20:51,905 --> 00:20:54,905
Once we have exited the loop,

405
00:20:54,905 --> 00:20:58,920
we will test for which condition
we have exited.

406
00:20:58,920 --> 00:21:02,120
Did we exit the loop because of 
the failure

407
00:21:02,120 --> 00:21:06,280
of this condition, namely, because
the user has guessed

408
00:21:06,280 --> 00:21:08,722
correctly. Or did we exit the loop

409
00:21:08,722 --> 00:21:12,070
due to the failure of this second
condition,

410
00:21:12,070 --> 00:21:15,125
namely, because we ran out of
trials.

411
00:21:15,125 --> 00:21:17,310
Thus, we will run the test here.

412
00:21:17,310 --> 00:21:19,486
If the entered number is equal to

413
00:21:19,486 --> 00:21:21,918
the secret number, it means we
exited the loop

414
00:21:21,918 --> 00:21:24,386
because of this condition's failure
and we can

415
00:21:24,386 --> 00:21:27,430
inform the user that he has guessed
correctly.

416
00:21:27,430 --> 00:21:31,665
Otherwise, it means that the user
has burnt all his trials

417
00:21:31,665 --> 00:21:34,881
and we can inform his that he has 
lost the game.

418
00:21:34,881 --> 00:21:38,366
We can also print the secret numer
to let him know

419
00:21:38,366 --> 00:21:41,540
what we were expecting from him.

420
00:21:41,540 --> 00:21:46,725
However, we must avoid logical
fallacies in the test formulation.

421
00:21:46,725 --> 00:21:49,749
Let us imagine that, trying to the 
see if the

422
00:21:49,749 --> 00:21:52,580
correct number has been guessed, we
test if

423
00:21:52,580 --> 00:21:55,863
the limited number of trials has been reached.
In this case, the situation

424
00:21:55,863 --> 00:21:57,940
where the user has guessed

425
00:21:57,940 --> 00:22:00,714
the correct number exactly on
his third trial

426
00:22:00,714 --> 00:22:03,997
will be interpeted as a failure

427
00:22:03,997 --> 00:22:07,695
while it was actually a success.

428
00:22:07,695 --> 00:22:09,895
Thus, one must remain careful
regarding the logic

429
00:22:09,895 --> 00:22:13,130
in test formulations when we
aim to realize such processing.

430
00:22:13,130 --> 00:22:15,145
The correct way here was 

431
00:22:15,145 --> 00:22:17,810
the one presented in the first solution,
namely

432
00:22:17,810 --> 00:22:20,605
formulating the condition not in
relation to

433
00:22:20,605 --> 00:22:23,091
the number of trials but in relation 
to wether or not 

434
00:22:23,091 --> 00:22:25,264
the correct number has been guessed.
This way,

435
00:22:25,264 --> 00:22:31,137
we avoid the aforementioned
trap.

