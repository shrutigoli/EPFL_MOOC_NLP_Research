1
00:00:00,000 --> 00:00:03,162
In this episode, we will discuss

2
00:00:03,162 --> 00:00:08,000
a second contol structure, namely
the iteration statements

3
00:00:08,000 --> 00:00:11,950
So, what is the use of this new
control structure ?

4
00:00:11,950 --> 00:00:14,916
Let's imagine, for example, that we wish
to print

5
00:00:14,916 --> 00:00:17,430
the square of the five first integers,
just like here.

6
00:00:17,430 --> 00:00:20,823
Obviously, we could reach
this goal

7
00:00:20,823 --> 00:00:24,755
by using five print
instructions. However

8
00:00:24,755 --> 00:00:28,088
in such a case, we can, or even must

9
00:00:28,088 --> 00:00:33,904
use an iteration statement:
the "for loop".

10
00:00:33,904 --> 00:00:39,380
Indeed, this code will do
that printing

11
00:00:39,380 --> 00:00:42,980
by iterating, looping through the
print instruction.

12
00:00:42,980 --> 00:00:46,680
We will thoroughly examine this code
and explain the whos and whys.

13
00:00:46,680 --> 00:00:50,130
A "for loop" simply begins 

14
00:00:50,130 --> 00:00:55,443
with the keyword "for".
Then follows

15
00:00:55,443 --> 00:01:00,985
the declaration/initialization of a
type int variable.

16
00:01:00,985 --> 00:01:06,530
This initialisation will be executed only once
before entering the loop.

17
00:01:06,530 --> 00:01:11,810
Then appears something which
you're already familiar with,

18
00:01:11,810 --> 00:01:15,465
for it is a condition,
already discussed

19
00:01:15,465 --> 00:01:19,070
throughout the condition 
statement episode.

20
00:01:19,070 --> 00:01:23,550
This condition will be tested before
each iteration.

21
00:01:23,550 --> 00:01:25,970
If it is false, we exit
the loop.

22
00:01:25,970 --> 00:01:30,674
Then comes what we call
an "increment" statement.

23
00:01:30,674 --> 00:01:34,918
Remember that the ++ operator,
applied to

24
00:01:34,918 --> 00:01:40,535
the variable i, is strictly
equivalent to the statement

25
00:01:40,535 --> 00:01:47,120
i = i + 1, and will thus add 1
to the variable i.

26
00:01:47,120 --> 00:01:52,135
This increment statement is executed
at the end of every iteration.

27
00:01:52,135 --> 00:01:58,490
This allows to change the value of 
the variable related to the "for loop".

28
00:01:58,490 --> 00:02:05,535
Please note that the declaration and
initialization, the condition and

29
00:02:05,535 --> 00:02:10,424
the increment statement are all separated
by semicolons and

30
00:02:10,424 --> 00:02:15,219
are placed between parenthesis.
Then comes the

31
00:02:15,219 --> 00:02:20,296
block of instructions which is

32
00:02:20,296 --> 00:02:25,550
the loop's body.

33
00:02:25,550 --> 00:02:30,794
It contains the instructions which will be
repeated, executed at every iteration

34
00:02:30,794 --> 00:02:31,430
of the loop.

35
00:02:31,430 --> 00:02:38,326
As with the "if", the curly braces
are mandatory for the

36
00:02:38,326 --> 00:02:43,970
instruction block only if several
instructions must be repeated.

37
00:02:43,970 --> 00:02:47,537
In case there is only one instruction,
here for example,

38
00:02:47,537 --> 00:02:50,674
the curly braces can
be omitted.

39
00:02:50,674 --> 00:02:52,918
Namely, we are not compelled

40
00:02:52,918 --> 00:02:56,007
to place the curly braces here,
at the beginning of the loop,

41
00:02:56,007 --> 00:03:01,568
at the start and end of the block.
But, as was the case with "if", it is advised

42
00:03:01,568 --> 00:03:06,160
to keep the curly braces, which
I did in the previous example.

43
00:03:06,160 --> 00:03:11,215
Now let's detail, step by step,

44
00:03:11,215 --> 00:03:14,615
the execution of our first example
of a "for loop".

45
00:03:14,615 --> 00:03:21,155
The "for loop" starts, here, with the
declaration and initialization

46
00:03:21,155 --> 00:03:26,040
of a variable i, here initialized
to the value 0.

47
00:03:26,040 --> 00:03:29,996
This variable will control the 
number of iterations.

48
00:03:29,996 --> 00:03:35,669
Then, the condition "i less than 5"
will be tested. i is equal to 0,

49
00:03:35,669 --> 00:03:40,657
0 is less than 5 : the condiction is

50
00:03:40,657 --> 00:03:45,926
thus true and we will keep going,
entering the loop body.

51
00:03:45,926 --> 00:03:52,022
Namely, we will execute this instruction :

52
00:03:52,022 --> 00:03:57,410
a good old printing which will
print "le carrÃ© de" (= "the square of")

53
00:03:57,410 --> 00:04:02,648
followed by the value of i, namely 0,
followed by "vaut" (= "has value") and followed

54
00:04:02,648 --> 00:04:07,814
by the value of i times i :
simply 0.

55
00:04:07,814 --> 00:04:11,139
It is the only instruction in the

56
00:04:11,139 --> 00:04:12,115
loop body.

57
00:04:12,115 --> 00:04:16,920
The loop will now...loop and resume
here.

58
00:04:16,920 --> 00:04:24,760
The increment statement
will be executed.

59
00:04:24,760 --> 00:04:30,460
Namely, we will execute "++i"
and i will go from 

60
00:04:30,460 --> 00:04:36,772
the value 0, to the value 1. Then, we 
will once again test

61
00:04:36,772 --> 00:04:42,882
the condition "i less than 5".
i is equal to 1, 1 is less than 5.

62
00:04:42,882 --> 00:04:49,658
The condition remains true and we will,
again, enter

63
00:04:49,658 --> 00:04:55,540
the loop body, but this time with i
containing the value 1.

64
00:04:55,540 --> 00:04:58,100
Again, we will execute

65
00:04:58,100 --> 00:05:02,785
this instruction which
will simply

66
00:05:02,785 --> 00:05:07,523
print "the square of" followed by i's value,
which is

67
00:05:07,523 --> 00:05:11,620
now 1, followed by "vaut" (="has value"), followed by
the value

68
00:05:11,620 --> 00:05:16,600
of the expression i times i which
is, obviously 1.

69
00:05:16,600 --> 00:05:22,552
Again we will loop, namely

70
00:05:22,552 --> 00:05:28,950
resume here and execute
the increment statement.

71
00:05:28,950 --> 00:05:34,911
Thus, i will go from the value 1 to 2 
and so on.

72
00:05:34,911 --> 00:05:41,359
At a certain point, i will contain the value 4.

73
00:05:41,359 --> 00:05:48,100
We will, again, execute the
increment statement and

74
00:05:48,100 --> 00:05:54,259
i will go from the value 4, to the value 5.
Then the condition

75
00:05:54,259 --> 00:06:02,970
"i less than 5" will be be tested.
5 is not strictly less than 5.

76
00:06:02,970 --> 00:06:08,732
Thus, the condition is now false.

77
00:06:08,732 --> 00:06:13,815
Since the condition is now false,
we will exit the loop.

78
00:06:13,815 --> 00:06:19,480
Exiting the loop means
jumping to the

79
00:06:19,480 --> 00:06:26,530
the instructions after the loop.
Note, by the way, that the variable i,

80
00:06:26,530 --> 00:06:33,575
declared at the beginning of the loop,
will not be usable after the loop.

81
00:06:33,575 --> 00:06:38,645
Indeed, the variable i exists
only within the loop body,

82
00:06:38,645 --> 00:06:40,190
that is, this part here.

83
00:06:40,190 --> 00:06:44,474
The "for loop" follows the
following syntax.

84
00:06:44,474 --> 00:06:47,542
First of all, the keyword "for" then,

85
00:06:47,542 --> 00:06:50,900
in parentheses, the declaration and 
initialization

86
00:06:50,900 --> 00:06:55,545
of a variable, not necessarily of the 
type int, then a condition,

87
00:06:55,545 --> 00:06:59,220
a priori regarding the aforementioned 
variable, though it is not

88
00:06:59,220 --> 00:07:02,308
mandatory then, an increment statement
which should impact

89
00:07:02,308 --> 00:07:05,510
this variable aswell.

90
00:07:05,510 --> 00:07:09,686
And, finally, a block of instructions,
the instructions of which

91
00:07:09,686 --> 00:07:11,560
will be repeated throughout the loop.

92
00:07:11,560 --> 00:07:13,600
Also, we remind you that the three

93
00:07:13,600 --> 00:07:16,116
elements in parentheses
of the 

94
00:07:16,116 --> 00:07:19,473
"for loop" are separated 
by semicolons

95
00:07:19,473 --> 00:07:22,010
and that there is no semicolon here.

96
00:07:22,010 --> 00:07:26,396
The "for loop" will repeat the instructions

97
00:07:26,396 --> 00:07:29,485
within the block as long as
the condition is true.

98
00:07:29,485 --> 00:07:31,865
If the condition is never to become false,

99
00:07:31,865 --> 00:07:35,956
these instructions will be repeated indefinitely.

100
00:07:35,956 --> 00:07:40,840
By the way, in C++ 2011, there is another

101
00:07:40,840 --> 00:07:46,050
form of "for loop" which will be discussed
in the lessons dedicated to arrays and vectors.

102
00:07:46,050 --> 00:07:49,490
Let us resume with another example
regarding the "for loop".

103
00:07:49,490 --> 00:07:54,590
Let us suppose we wish to print
the multiplication table 5.

104
00:07:54,590 --> 00:07:58,273
Without a "for loop", we will almost

105
00:07:58,273 --> 00:08:01,085
have to repeat 10 times the

106
00:08:01,085 --> 00:08:02,200
same instruction.

107
00:08:02,200 --> 00:08:09,360
Namely, this instruction here which
prints 5 times 1 is 5*1.

108
00:08:09,360 --> 00:08:14,625
Followed by the instruction 5 times 2
is 5*2,

109
00:08:14,625 --> 00:08:19,890
and so on until 5 times 10 
is 5*10.

110
00:08:19,890 --> 00:08:23,530
In such a case, it is required

111
00:08:23,530 --> 00:08:27,220
to use a "for loop" in order to 
avoid all these repetitions.

112
00:08:27,220 --> 00:08:32,766
This "for loop" will be written like this :
We initialize the variable

113
00:08:32,766 --> 00:08:37,475
in charge of controlling the number
of loops, this time to 1.

114
00:08:37,475 --> 00:08:41,274
As condition we will use

115
00:08:41,274 --> 00:08:43,718
"i smaller or equal to 10". Be reminded 

116
00:08:43,718 --> 00:08:47,196
that the symbol "smaller or equal to"
is represented

117
00:08:47,196 --> 00:08:52,095
by the less-than sign (<) followed
by the equal-to sign (=).

118
00:08:52,095 --> 00:08:57,625
Thus, with our initialization to 1, the
condition "smaller or equal to 10"

119
00:08:57,625 --> 00:09:02,885
and the increment statement
at every iteration,

120
00:09:02,885 --> 00:09:08,020
i will take, consecutively, the values 
from 1 to 10.

121
00:09:08,020 --> 00:09:12,776
The loop body will be presented
this way:

122
00:09:12,776 --> 00:09:17,521
at every iteration, we will print 

123
00:09:17,521 --> 00:09:21,685
the value of i and the expression
5 times i.

124
00:09:21,685 --> 00:09:24,296
As expected, this "for loop" 

125
00:09:24,296 --> 00:09:28,570
will print the complete
multiplication table of 5.

126
00:09:28,570 --> 00:09:31,329
The block of instructions, repeated by

127
00:09:31,329 --> 00:09:35,423
a loop, may contain 
any instruction.

128
00:09:35,423 --> 00:09:38,115
For example, a conditional statement.

129
00:09:38,115 --> 00:09:42,805
Here's a quiz relating to a
conditional statement in a "for loop".

130
00:09:42,805 --> 00:09:45,510
In your opinion, what will this code print
upon execution?

131
00:09:45,510 --> 00:09:48,390
The correct answer is the answer A.

132
00:09:48,390 --> 00:09:51,060
Let us explain why.

133
00:09:51,060 --> 00:09:56,154
First of all, you can see
that i will

134
00:09:56,154 --> 00:10:01,860
take the values 0, 1, 2, 3 and 4.

135
00:10:01,860 --> 00:10:05,710
At the first iteration, i will 
contain the value 0,

136
00:10:05,710 --> 00:10:07,975
This instruction will thus print

137
00:10:07,975 --> 00:10:10,455
i's value, namely 0.

138
00:10:10,455 --> 00:10:14,098
Be careful, there is 
no line break here.

139
00:10:14,098 --> 00:10:16,650
Thus the next thing

140
00:10:16,650 --> 00:10:20,660
printed here, will be printed
right after the 0.

141
00:10:20,660 --> 00:10:26,540
Next, we pass to the conditional
statement which tests if

142
00:10:26,540 --> 00:10:33,164
i modulo 2 is equal to 0, that is,
if the remainder of

143
00:10:33,164 --> 00:10:35,276
i divided by 2 is 0.

144
00:10:35,276 --> 00:10:41,170
Since i contains 0, this condition is true

145
00:10:41,170 --> 00:10:43,889
and, thus, the instruction within the

146
00:10:43,889 --> 00:10:48,130
conditional statement, will be executed,
namely printing p.

147
00:10:48,130 --> 00:10:53,790
We then exit the conditional statement
and end up here

148
00:10:53,790 --> 00:10:59,450
printing a blank space,
which we will represent this way.

149
00:10:59,450 --> 00:11:05,330
We are now at the end of the loop.

150
00:11:05,330 --> 00:11:13,090
The loop will now start anew with, this time,
i containing the value 1.

151
00:11:13,090 --> 00:11:19,161
This instruction will be executed again.
Since i contains 1,

152
00:11:19,161 --> 00:11:20,840
we will print 1.

153
00:11:20,840 --> 00:11:24,515
Then, we encounter the condition statement
again, testing if

154
00:11:24,515 --> 00:11:27,714
the remainder of 1 divided by 2
is equal to 0.

155
00:11:27,714 --> 00:11:33,244
it appears that this condition 
is now false since

156
00:11:33,244 --> 00:11:38,728
1 modulo 2 is equal to 1 and thus
not equal to 0;

157
00:11:38,728 --> 00:11:44,167
we will skip this instruction and jump
to this instruction here

158
00:11:44,167 --> 00:11:49,600
printing 1 blank space and so on.
You can plainly see that the

159
00:11:49,600 --> 00:11:54,700
code will print what

160
00:11:54,700 --> 00:11:59,572
stands under the answer A, namely

161
00:11:59,572 --> 00:12:04,336
this. Let us ask a subsidiary question :

162
00:12:04,336 --> 00:12:09,622
Can you explain,

163
00:12:09,622 --> 00:12:14,854
in plain English, what this

164
00:12:14,854 --> 00:12:19,914
conditional statement does ? Mathematically, it 

165
00:12:19,914 --> 00:12:24,910
tests if the remainder of 
i divided by 2 is equal to 0.

166
00:12:24,910 --> 00:12:30,150
In plain words, it means : 
is i an even number ?

167
00:12:30,150 --> 00:12:32,030
Self-evidently.

168
00:12:32,030 --> 00:12:37,950
Thus, this condition tests if i
is even.

