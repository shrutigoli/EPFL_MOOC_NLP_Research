1
00:00:00,000 --> 00:00:07,327
In a previous episode, we have
discussed

2
00:00:07,327 --> 00:00:11,853
control statements, that is, C++
instructions

3
00:00:11,853 --> 00:00:16,221
letting data influence, choose or repeat,
the executed

4
00:00:16,221 --> 00:00:18,298
processing. These control
statements

5
00:00:18,298 --> 00:00:21,089
work along blocks.

6
00:00:21,089 --> 00:00:25,570
These blocks impact the 
use of variables.

7
00:00:25,570 --> 00:00:28,534
This impact is called the "scope
of a variable" ;

8
00:00:28,534 --> 00:00:32,030
and this is what we will study
in this episode.

9
00:00:32,030 --> 00:00:35,068
In C++, instructions can be regrouped
within

10
00:00:35,068 --> 00:00:37,920
blocks, independently of any control
statement.

11
00:00:37,920 --> 00:00:40,786
All it requires is a pair of curly braces

12
00:00:40,786 --> 00:00:43,978
bording a sequence of instructions.

13
00:00:43,978 --> 00:00:46,412
For example, we start a block here,

14
00:00:46,412 --> 00:00:50,368
declare an int-type variable
called i

15
00:00:50,368 --> 00:00:55,573
declare a double-type variable called
x, print a message 

16
00:00:55,573 --> 00:01:00,384
asking the user to enter the values
of x and i

17
00:01:00,384 --> 00:01:05,890
and finally printing the result
on-screen.

18
00:01:05,890 --> 00:01:10,416
Now the closing curly braces signify 
the end of the block.

19
00:01:10,416 --> 00:01:12,387
In C++, blocks have

20
00:01:12,387 --> 00:01:15,559
much autonomy. They can delcare 

21
00:01:15,559 --> 00:01:19,136
their own local variables, as we have seen
previously.

22
00:01:19,136 --> 00:01:22,375
Local variables can even be declared
in such a block, 

23
00:01:22,375 --> 00:01:25,340
assiociated with an "if" instruction. 
For example,

24
00:01:25,340 --> 00:01:28,960
this variable j, used in this here
block.

25
00:01:28,960 --> 00:01:32,040
This variable is local which
means that

26
00:01:32,040 --> 00:01:34,944
once we reach the end of the block,

27
00:01:34,944 --> 00:01:37,658
we cannot use j anymore.
A local variable

28
00:01:37,658 --> 00:01:40,976
can only be used in the block
where it has been defined.

29
00:01:40,976 --> 00:01:43,899
Such a variable, defined in a block

30
00:01:43,899 --> 00:01:46,644
is called a local variable.

31
00:01:46,644 --> 00:01:49,686
The variable j, for example, 

32
00:01:49,686 --> 00:01:53,622
is a variable local to this block here,
controlled by the "if" instruction.

33
00:01:53,622 --> 00:01:57,425
Variables declared outside of any block,
even outside

34
00:01:57,425 --> 00:01:59,905
the main - this is perfectly allowed -

35
00:01:59,905 --> 00:02:02,750
are called global variables.

36
00:02:02,750 --> 00:02:06,390
However, we will not give you
examples

37
00:02:06,390 --> 00:02:10,112
of global variables. Indeed, a good practice rule

38
00:02:10,112 --> 00:02:14,170
is never to declare global variables,
never ever!

39
00:02:14,170 --> 00:02:14,794
Why?

40
00:02:14,794 --> 00:02:19,362
Because, precisely, global variables
are accessible from anywhere 

41
00:02:19,362 --> 00:02:23,454
in the program. Thus, any instruction,
anywhere in the program,

42
00:02:23,454 --> 00:02:27,370
can, for example modify this variable.
It then becomes 

43
00:02:27,370 --> 00:02:31,869
extremely tedious to keep
track of the value of this variable.

44
00:02:31,869 --> 00:02:36,620
And that is why you are never to
declare global variables.

45
00:02:36,620 --> 00:02:40,542
For that matter, we advise you
to declare variables

46
00:02:40,542 --> 00:02:44,082
the closest to their utilization.
In other words, 

47
00:02:44,082 --> 00:02:47,294
the declaration line should be as close
as possible

48
00:02:47,294 --> 00:02:50,460
to the line where this variable will
be used for the first time.

49
00:02:50,460 --> 00:02:57,141
For example, in the previous
"if" example, we had

50
00:02:57,141 --> 00:03:02,352
a variable j, we used inside the
block of instructions controlled

51
00:03:02,352 --> 00:03:07,397
by the "if" and we had declared j
in the previous block.

52
00:03:07,397 --> 00:03:12,826
Since j was not used in this section
here, we should have

53
00:03:12,826 --> 00:03:18,094
moved this line closer to
the variable's usage.

54
00:03:18,094 --> 00:03:22,284
j is only used in this block,
and we assume that

55
00:03:22,284 --> 00:03:24,670
we do not use j anywhere else
in the program.

56
00:03:24,670 --> 00:03:27,482
Therefore, such an instruction,

57
00:03:27,482 --> 00:03:30,442
declaring the variable outisde
the block, does not follow

58
00:03:30,442 --> 00:03:34,249
the recommandation to declare as close
to the usage as possible.

59
00:03:34,249 --> 00:03:36,529
We will thus move the declaration

60
00:03:36,529 --> 00:03:39,949
closer to the first instruction 
using j.

61
00:03:39,949 --> 00:03:43,852
Of course, we consider that j

62
00:03:43,852 --> 00:03:47,416
is only used within this block

63
00:03:47,416 --> 00:03:48,180
and nowhere else.

64
00:03:48,180 --> 00:03:53,020
This notion of the location where
a variable can be used

65
00:03:53,020 --> 00:03:56,818
has a name: it is called the "scope of a variable".

66
00:03:56,818 --> 00:04:00,030
The scope of a variable is defined as
all the lines

67
00:04:00,030 --> 00:04:03,705
of code where this variable is accessible;
where we can use it.

68
00:04:03,705 --> 00:04:05,225
Let us take an example.

69
00:04:05,225 --> 00:04:09,755
We here have two nested
"if" instructions,

70
00:04:09,755 --> 00:04:12,555
each one with its own block.
Here the block

71
00:04:12,555 --> 00:04:17,616
of the first "if" instruction . And here 
the block of the second "if" instruction .

72
00:04:17,616 --> 00:04:23,015
In the block of the first "if "instruction, we
declare a variable j.

73
00:04:23,015 --> 00:04:26,535
Thus, we can use this variable

74
00:04:26,535 --> 00:04:32,210
anywhere in the block where
it has been declared.

75
00:04:32,210 --> 00:04:36,520
So, we can use j here,
or here.

76
00:04:36,520 --> 00:04:37,768
We could also

77
00:04:37,768 --> 00:04:41,434
use it in this block here.

78
00:04:41,434 --> 00:04:45,373
However, once we exit the block
concerned, we cannot, here, use j.

79
00:04:45,373 --> 00:04:48,961
Similarly, we will declare a variable
k, here,

80
00:04:48,961 --> 00:04:52,623
closer to its utilization inside its 
own block.

81
00:04:52,623 --> 00:04:55,921
Thus, we can use k here, 
or here in this block.

82
00:04:55,921 --> 00:04:59,950
But we will not be able to use
k afterwards.

83
00:04:59,950 --> 00:05:02,925
We say that the scope of k is this block
here,

84
00:05:02,925 --> 00:05:06,520
the block where it has been declared.

85
00:05:06,520 --> 00:05:10,520
The scope of j is this block, where it 
has been declared.

86
00:05:10,520 --> 00:05:15,256
In C++, we can have variables with
the same name but a different scope.

87
00:05:15,256 --> 00:05:17,480
Therefore, we need rules

88
00:05:17,480 --> 00:05:20,640
in order to know which variable
we're talking about.

89
00:05:20,640 --> 00:05:24,440
Those are called the "scoping rules"
(or "scope rules").

90
00:05:24,440 --> 00:05:27,991
In C++, the scoping rule is very simple, 
we resolve 

91
00:05:27,991 --> 00:05:31,341
to the nearest scope.
Now what does it mean?

92
00:05:31,341 --> 00:05:32,440
Let us take an example

93
00:05:32,440 --> 00:05:36,725
We have two blocks, here. The first one is
controlled by a higher level

94
00:05:36,725 --> 00:05:42,150
"if" instruction. Inside it, we declare
a variable j.  We will call it

95
00:05:42,150 --> 00:05:47,844
"j 1" or "red j". Here, we have a second block

96
00:05:47,844 --> 00:05:53,186
controlled by another "if" instruction.
Inside it, we declare

97
00:05:53,186 --> 00:05:56,254
another j variable.

98
00:05:56,254 --> 00:05:58,180
By the way, this is not a very good idea

99
00:05:58,180 --> 00:06:00,208
and we do not advise you to adopt
these practice

100
00:06:00,208 --> 00:06:02,080
in your programs. We're merely doing it
here

101
00:06:02,080 --> 00:06:04,916
for explanation purposes.

102
00:06:04,916 --> 00:06:08,180
So, we have a second variable j;
let's call it "j 2" or "blue j".

103
00:06:08,180 --> 00:06:10,740
The scope of this j is all the lines of code

104
00:06:10,740 --> 00:06:14,719
where it has been defined,
declared, where it can be used.

105
00:06:14,719 --> 00:06:18,439
It is the block where it has been declared.

106
00:06:18,439 --> 00:06:23,650
The scope of the higher level j is 
all the lines of code

107
00:06:23,650 --> 00:06:28,750
where it is usable: it is the whole 
higher level block.

108
00:06:28,750 --> 00:06:32,221
So, in the deepest block - the blue 
block -

109
00:06:32,221 --> 00:06:36,623
the name j is ambiguous.

110
00:06:36,623 --> 00:06:40,280
Does it refer to the higher level j?

111
00:06:40,280 --> 00:06:44,215
Or does it refer to the lower level j?

112
00:06:44,215 --> 00:06:47,445
According to C++ scoping rules,

113
00:06:47,445 --> 00:06:50,714
we resolve to the nearest scope.

114
00:06:50,714 --> 00:06:54,458
Thus, j here refers to the j
corresponding to the

115
00:06:54,458 --> 00:06:58,410
nearest block. The j that has been declared
in this very block.

116
00:06:58,410 --> 00:07:03,730
The higher level j is perfectly valid here,

117
00:07:03,730 --> 00:07:09,050
but it is masked inside this block, and cannot
thus be summoned.

118
00:07:09,050 --> 00:07:12,518
It will only reappear at the end of the
block where "blue j" was declared.

119
00:07:12,518 --> 00:07:17,690
In the deepest block, "blue j" masks
"red j".

120
00:07:17,690 --> 00:07:21,155
This was to illustrate the C++
scoping rules.

121
00:07:21,155 --> 00:07:25,175
However, what you should remember
from this explanation

122
00:07:25,175 --> 00:07:29,095
is to avoid using multiple times,
the same variable name:

123
00:07:29,095 --> 00:07:30,560
dodge ambuiguity.

124
00:07:30,560 --> 00:07:34,041
Indeed, we do not write programs
for machines only.

125
00:07:34,041 --> 00:07:36,696
If this were the case, we would still
write them in assembly language.

126
00:07:36,696 --> 00:07:39,253
We use "evolved" languages so 
that

127
00:07:39,253 --> 00:07:42,090
our fellow humans may

128
00:07:42,090 --> 00:07:45,384
understand, maintain, correct
or transmit our programs.

129
00:07:45,384 --> 00:07:48,612
For that matter,

130
00:07:48,612 --> 00:07:52,488
avoid all ambiguity and strive to
render

131
00:07:52,488 --> 00:07:55,215
your programs as clear as possible :
do not call

132
00:07:55,215 --> 00:07:58,390
different things with the same
name.

133
00:07:58,390 --> 00:07:59,446
A specific case 

134
00:07:59,446 --> 00:08:02,680
of scope you should know is the scope
of variables

135
00:08:02,680 --> 00:08:06,429
declared within an iterative loop,
a "for loop".

136
00:08:06,429 --> 00:08:10,940
In this "for loop", we have declared
a variable i.

137
00:08:10,940 --> 00:08:13,365
The scope of this i is

138
00:08:13,365 --> 00:08:17,910
the block controlled by the "for
instruction", aswell as the

139
00:08:17,910 --> 00:08:21,960
condition and increment statement
of the "for loop".

140
00:08:21,960 --> 00:08:24,637
However, the scope of i, does not
reach any further.

141
00:08:24,637 --> 00:08:28,444
Starting from there, the variable i

142
00:08:28,444 --> 00:08:32,454
cannot be used anymore.

143
00:08:32,454 --> 00:08:36,150
Let us now finish with an example,
which you

144
00:08:36,150 --> 00:08:39,034
should not encounter unless 
you call

145
00:08:39,034 --> 00:08:42,570
different things with the same name, which
you shouldn't.

146
00:08:42,570 --> 00:08:46,810
This is merely to check if you are now
familiar with the scoping rules.

147
00:08:46,810 --> 00:08:49,696
We have here a complete program.

148
00:08:49,696 --> 00:08:54,475
In the main, we declare an int-type
variable i and intialize it

149
00:08:54,475 --> 00:08:58,910
to the value 120. Then comes a "for loop"
iterating around a variable i,

150
00:08:58,910 --> 00:09:02,403
going from 0 to 5. We print the value of i
in the loop.

151
00:09:02,403 --> 00:09:07,385
And, here, print the value of i at the 
end of the program.

152
00:09:07,385 --> 00:09:10,600
The question is: what does this program print?

153
00:09:10,600 --> 00:09:14,818
Let us examine the program step by step.
First of all, we declare a

154
00:09:14,818 --> 00:09:19,267
variable i and initialized it to 120.

155
00:09:19,267 --> 00:09:24,290
Then, we enter the loop,

156
00:09:24,290 --> 00:09:30,090
declaring another variable i,
initialized to 0.

157
00:09:30,090 --> 00:09:31,404
We test the condition:

158
00:09:31,404 --> 00:09:34,825
"i less than 5". 
Now which i is it?

159
00:09:34,825 --> 00:09:39,560
It is of course the i related to the loop;
this i here.

160
00:09:39,560 --> 00:09:45,080
Thus, this value is indeed less
than 5. We can enter the loop

161
00:09:45,080 --> 00:09:51,170
and print the value of i.

162
00:09:51,170 --> 00:09:52,610
Again, which i is it?

163
00:09:52,610 --> 00:09:58,626
The i with the closest scope is
the i related to the loop,

164
00:09:58,626 --> 00:10:04,849
that is, this i here. Consequently,
this line will print

165
00:10:04,849 --> 00:10:08,416
the value 0. Now we execute

166
00:10:08,416 --> 00:10:11,966
the increment statement.
Once again, which i is it?

167
00:10:11,966 --> 00:10:15,614
Resolving to the closest scope,

168
00:10:15,614 --> 00:10:23,072
it is, as before, the i related to the loop.
This i will thus

169
00:10:23,072 --> 00:10:30,324
go from 0 to 1, via this "++i" instruction.
Now we retest the condition.

170
00:10:30,324 --> 00:10:33,717
We reach this line of code
and test the condtion:

171
00:10:33,717 --> 00:10:36,643
"is i less than 5? "

172
00:10:36,643 --> 00:10:36,970
Yes.

173
00:10:36,970 --> 00:10:42,116
Thus, we print the value of i,

174
00:10:42,116 --> 00:10:46,462
that is still the i realted to the loop,

175
00:10:46,462 --> 00:10:51,234
which is 1. Now we execute the
increment statement.

176
00:10:51,234 --> 00:10:55,750
i goes from 1 to 2. We test
the condition again.

177
00:10:55,750 --> 00:10:59,590
It remains true.

178
00:10:59,590 --> 00:11:04,103
And we print the value of i, 2.

179
00:11:04,103 --> 00:11:07,295
And so on with 2, 3, 4.

180
00:11:07,295 --> 00:11:10,360
Now what will happen once
i contains 4?

181
00:11:10,360 --> 00:11:15,980
We reach the increment statement,

182
00:11:15,980 --> 00:11:20,670
i goes from 4 to 5.

183
00:11:20,670 --> 00:11:24,780
The condition is now false.
Indeed i is not less 

184
00:11:24,780 --> 00:11:28,890
than 5, 5 is not strictly less than 5.

185
00:11:28,890 --> 00:11:32,416
Since the condition is false we exit the loop.

186
00:11:32,416 --> 00:11:35,310
We reach this point, at the end of the loop.

187
00:11:35,310 --> 00:11:41,570
Now we execute the instruction, following
the loop, printing i.

188
00:11:41,570 --> 00:11:46,021
Which i is it, though?
According to scoping rules,

189
00:11:46,021 --> 00:11:51,520
this i is the main. The i belonging to the level
we're in.

190
00:11:51,520 --> 00:11:54,400
Do not forget that the i from the loop

191
00:11:54,400 --> 00:11:59,050
has its scope reduced to the loop.

192
00:11:59,050 --> 00:12:04,982
Thus, this i does not exist outside the loop.

193
00:12:04,982 --> 00:12:11,265
Therefore, the i we're talking about is the
i from the main block. The starting i.

194
00:12:11,265 --> 00:12:17,986
It is now obvious that we will print 120.

