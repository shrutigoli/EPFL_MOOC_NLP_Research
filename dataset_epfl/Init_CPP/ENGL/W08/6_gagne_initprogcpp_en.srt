1
00:00:05,250 --> 00:00:08,909
In the previous episode, we have seen
how to write the main loop,

2
00:00:08,909 --> 00:00:12,379
allowing the players to take
their turns and play.

3
00:00:12,380 --> 00:00:13,769
Only missing

4
00:00:13,769 --> 00:00:16,367
was the stopping condition.

5
00:00:16,367 --> 00:00:18,158
Thus, we still need to write

6
00:00:18,158 --> 00:00:20,969
something here so that the loop will stop

7
00:00:20,969 --> 00:00:24,259
either once a player has won
or once the grid is full.

8
00:00:24,259 --> 00:00:26,899
For now, we will focus on

9
00:00:26,899 --> 00:00:30,060
the case where we expect the
loop to stop

10
00:00:30,059 --> 00:00:31,739
because one of the two players has won.

11
00:00:31,739 --> 00:00:33,339
To that end, we will simply introduce

12
00:00:33,340 --> 00:00:37,040
a new function called "est_ce_gagne"
(TN: means "is_it_won").

13
00:00:37,040 --> 00:00:39,330
We will call this functions as follows.

14
00:00:39,329 --> 00:00:43,369
We will store the result of the "est_ce_gagne"
function

15
00:00:43,369 --> 00:00:44,599
 inside a variable called "gagne"
(TN: means "won" or "wins").

16
00:00:44,600 --> 00:00:46,919
This bool-type variable

17
00:00:46,919 --> 00:00:49,689
"gagne" will receive

18
00:00:49,689 --> 00:00:52,689
the return value of the function
"est_ce_gagne".

19
00:00:52,689 --> 00:00:55,169
As argument, the "est_ce_gagne" function

20
00:00:55,170 --> 00:00:57,329
will receive the grid,

21
00:00:57,329 --> 00:00:59,509
and the color of the player

22
00:00:59,509 --> 00:01:00,810
who has just played.

23
00:01:00,810 --> 00:01:04,310
Also, we will need to declare
our "gagne" variable.

24
00:01:04,310 --> 00:01:07,000
Since we will need to use it

25
00:01:07,000 --> 00:01:12,469
as the stopping condition, we need
to declare "gagne" outiside the loop,

26
00:01:12,469 --> 00:01:15,059
that is, somewhere around here.
Now, we can use

27
00:01:15,060 --> 00:01:18,560
the "gagne" variable in our
stopping condition.

28
00:01:18,560 --> 00:01:20,430
This will simply be

29
00:01:20,430 --> 00:01:21,789
written like this.

30
00:01:21,789 --> 00:01:23,769
We will repeat the loop

31
00:01:23,770 --> 00:01:26,960
as long as the player has not won.

32
00:01:26,959 --> 00:01:31,250
We now need to write this "est_ce_gagne"
function; this will probably

33
00:01:31,250 --> 00:01:34,069
be the trickiest part
of our program.

34
00:01:34,069 --> 00:01:34,899
So, how should

35
00:01:34,900 --> 00:01:36,609
we proceed?

36
00:01:36,609 --> 00:01:40,120
Actually, there are several ways
to write this "est_ce_gagne" function.

37
00:01:40,120 --> 00:01:43,990
The strategy we are offering is
the following:

38
00:01:43,989 --> 00:01:46,929
We will run through the grid
row by row

39
00:01:46,930 --> 00:01:49,179
and column by column

40
00:01:49,179 --> 00:01:52,599
until we encounter
a disk which color

41
00:01:52,599 --> 00:01:53,998
is the color of the player
who has just played.

42
00:01:53,998 --> 00:01:58,379
Let us say, for example, that the
red player has just played.

43
00:01:58,379 --> 00:02:00,549
This newly-dropped disk is here.

44
00:02:00,549 --> 00:02:03,379
Now, we will start from this disk

45
00:02:03,379 --> 00:02:07,759
and look over the grid
in several directions,

46
00:02:07,759 --> 00:02:11,159
horizontally, vertically
and diagonally.

47
00:02:11,158 --> 00:02:14,229
Thus, we will count the

48
00:02:14,229 --> 00:02:16,048
same-colored disks,

49
00:02:16,049 --> 00:02:17,628
starting from this one here.

50
00:02:17,628 --> 00:02:20,598
If, for example, we consider
this direction here,

51
00:02:20,598 --> 00:02:22,279
we can count

52
00:02:22,279 --> 00:02:25,560
1, 2, 3, 4 red disks;

53
00:02:25,560 --> 00:02:27,988
the red player has thus
won.

54
00:02:27,989 --> 00:02:30,920
If, on the other hand, we have looked
over the whole grid

55
00:02:30,919 --> 00:02:33,469
without counting at least
4 disks,

56
00:02:33,469 --> 00:02:36,258
we know that the player
has not won.

57
00:02:36,258 --> 00:02:39,329
By the way, we do not have
to consider

58
00:02:39,329 --> 00:02:41,030
all the directions.

59
00:02:41,030 --> 00:02:45,240
Actually, we will only have to count
the disks in 4 directions.

60
00:02:45,240 --> 00:02:47,779
For example, we will choose

61
00:02:48,049 --> 00:02:49,488
the Northeast,

62
00:02:49,818 --> 00:02:50,948
the East,

63
00:02:51,449 --> 00:02:52,969
the Southeast,

64
00:02:52,968 --> 00:02:54,028
and the South.

65
00:02:54,028 --> 00:02:55,060
But why is

66
00:02:55,060 --> 00:02:56,479
it possible to consider

67
00:02:56,479 --> 00:02:58,659
these 4 directions only?

68
00:02:58,658 --> 00:03:01,229
We said that we were going
to look over the grid

69
00:03:01,229 --> 00:03:02,698
line by line

70
00:03:02,699 --> 00:03:04,679
and column by column.

71
00:03:04,679 --> 00:03:08,449
Let' assume once more that the
red player has played,

72
00:03:08,449 --> 00:03:10,509
the first disk we have found

73
00:03:10,509 --> 00:03:11,918
is this one.

74
00:03:11,919 --> 00:03:16,639
We will now start counting the disks
in this direction here;

75
00:03:16,639 --> 00:03:19,469
we have only counted one disk,
this one.

76
00:03:19,468 --> 00:03:23,338
Same thing for this direction here
and this direction here;

77
00:03:23,338 --> 00:03:25,779
there is only one disk
in these 3 directions.

78
00:03:25,779 --> 00:03:30,829
In this direction here, we count
2 disks, which is still not enough to win.

79
00:03:30,829 --> 00:03:33,709
We will now keep looking
over the grid.

80
00:03:33,709 --> 00:03:35,509
The next red disk

81
00:03:35,509 --> 00:03:36,508
we will find

82
00:03:36,508 --> 00:03:39,308
is this one, in this direction here.

83
00:03:39,308 --> 00:03:41,748
In this direction,
we will only count

84
00:03:41,748 --> 00:03:45,679
2 disks, which is not enough
to win. In this direction

85
00:03:45,679 --> 00:03:48,919
and this direction here, we will
only count one disk:

86
00:03:48,919 --> 00:03:51,528
still not enough to win.

87
00:03:51,528 --> 00:03:54,360
Thus, we will keep looking
over the grid

88
00:03:54,360 --> 00:03:56,688
until we reach this disk here.

89
00:03:56,688 --> 00:03:58,519
We will count the disks

90
00:03:58,519 --> 00:04:00,058
in this direction here.

91
00:04:00,058 --> 00:04:04,288
This time, we will count 1, 2, 3, 4 disks;

92
00:04:04,288 --> 00:04:07,578
we thus know that the red player has won.

93
00:04:07,579 --> 00:04:11,829
In order to prove that the red
player has indeed aligned 4 disks,

94
00:04:11,829 --> 00:04:17,269
we can either start from this disk here,
and go in this direction here

95
00:04:17,269 --> 00:04:21,979
or start from this disk here
and go in this direction here.

96
00:04:21,979 --> 00:04:26,128
Therefore, we only need to consider

97
00:04:26,128 --> 00:04:28,945
one of the two directions.
And the same goes

98
00:04:28,945 --> 00:04:31,262
for the 6 other directions.

99
00:04:31,442 --> 00:04:34,289
We will only consider this
direction here

100
00:04:34,289 --> 00:04:36,258
and not this direction here.

101
00:04:36,259 --> 00:04:37,960
We will consider this direction here

102
00:04:37,959 --> 00:04:39,228
and not this one.

103
00:04:39,228 --> 00:04:42,068
This direction here
and not this one.

104
00:04:42,069 --> 00:04:45,949
Therefore, we only need
to consider 4 directions.

105
00:04:46,399 --> 00:04:50,618
Now, we will need to code this
strategy and write the "est_ce_gagne" function.

106
00:04:50,618 --> 00:04:53,449
Be reminded that we will call the
"est_ce_gagne" function

107
00:04:53,449 --> 00:04:54,949
as follows.

108
00:04:54,949 --> 00:04:56,699
We will store

109
00:04:56,699 --> 00:05:01,679
the return value of the function
inside a bool-type variable.

110
00:05:01,679 --> 00:05:05,279
Also, the function receives
the grid

111
00:05:05,279 --> 00:05:06,870
and the color of the player who
has just played

112
00:05:06,870 --> 00:05:07,848
as its two parameters.

113
00:05:07,848 --> 00:05:13,198
The header of this function will
thus be this one here.

114
00:05:13,198 --> 00:05:16,480
The result will be a bool-type value.

115
00:05:16,480 --> 00:05:19,018
We will pass the grid

116
00:05:19,018 --> 00:05:22,749
by constant reference since
the grid does not need to be modified.

117
00:05:22,749 --> 00:05:24,569
In this "est_ce_gagne" function,

118
00:05:24,569 --> 00:05:28,609
the second parameter is
a "Couleur"-type variable.

119
00:05:29,569 --> 00:05:33,359
Our strategy is to look
over the grid.

120
00:05:33,360 --> 00:05:34,699
We will do just do that

121
00:05:34,699 --> 00:05:36,680
thanks to two "for loops".

122
00:05:37,019 --> 00:05:39,399
Since we need the disk
coordinates,

123
00:05:39,399 --> 00:05:43,648
we will use two "old-style for loops";
these will be written as follows.

124
00:05:45,259 --> 00:05:47,920
The variables "ligne" et "colonne"
(TN: means "row" and "column)

125
00:05:47,920 --> 00:05:51,100
will contain the coordinates of the disk
from which

126
00:05:51,100 --> 00:05:54,850
we will start counting the aligned
disks. In order to simplify

127
00:05:54,850 --> 00:05:57,689
the writing of this code, we will
introduce

128
00:05:57,689 --> 00:06:00,218
a local variable

129
00:06:00,218 --> 00:06:02,858
called "couleur_case"
(TN: means "square_color").

130
00:06:02,858 --> 00:06:06,148
This variable will contain the color
of the disk.

131
00:06:06,668 --> 00:06:09,598
If the square color is the
same

132
00:06:09,598 --> 00:06:12,550
as the color of the player
who has just played,

133
00:06:12,550 --> 00:06:16,930
we will count the disks
aligned, starting from this square,

134
00:06:16,930 --> 00:06:18,418
in the 4 directions

135
00:06:18,418 --> 00:06:19,478
we are focusing on.

136
00:06:19,478 --> 00:06:22,008
Since counting the aligned disks
is no easy task,

137
00:06:22,009 --> 00:06:25,369
we will introduce a new function called "compte"
(TN: means "count).

138
00:06:25,369 --> 00:06:28,189
What arguments does this "compte"
function need?

139
00:06:28,189 --> 00:06:31,189
First of all, of course, the grid.

140
00:06:31,599 --> 00:06:36,610
Also needed is the square from which
we will count the aligned disks;

141
00:06:36,610 --> 00:06:37,949
this corresponds simply

142
00:06:37,949 --> 00:06:41,038
to the variables "ligne" and "colonne".

143
00:06:41,528 --> 00:06:44,259
We will also need the direction
in which

144
00:06:44,259 --> 00:06:45,728
we are counting the disks.

145
00:06:45,728 --> 00:06:47,588
So, how can we define

146
00:06:47,588 --> 00:06:48,719
this direction?

147
00:06:48,720 --> 00:06:51,370
Let us suppose that we wish
to count the disks

148
00:06:51,370 --> 00:06:54,919
in the Northeast direction.

149
00:06:54,919 --> 00:06:58,918
Then, in order to move from
one square to the next,

150
00:06:58,918 --> 00:07:02,088
we will subtract 1 from the row

151
00:07:02,088 --> 00:07:05,678
and add 1 to the column.

152
00:07:05,680 --> 00:07:11,449
Thus, we will use these variables here:
this -1 and this +1

153
00:07:11,449 --> 00:07:13,879
as arguments of the "compte"
function.

154
00:07:13,879 --> 00:07:19,209
This means that we will be
counting in the Northeast direction.

155
00:07:19,669 --> 00:07:22,430
The "compte" function will
return the

156
00:07:22,430 --> 00:07:24,379
number of same-colored

157
00:07:24,379 --> 00:07:25,830
aligned disks.

158
00:07:25,829 --> 00:07:29,078
We know that if this number
of aligned disks

159
00:07:29,078 --> 00:07:30,848
is greater or equal to 4,

160
00:07:30,848 --> 00:07:32,478
the player has won.

161
00:07:32,478 --> 00:07:35,538
But why greater or equal to 4

162
00:07:35,538 --> 00:07:39,219
instead of simply 4?
Of course because

163
00:07:39,220 --> 00:07:42,330
we may and can align more than 4 disks.

164
00:07:42,329 --> 00:07:45,760
Obviously, we will also need to
consider the 3 other directions.

165
00:07:45,760 --> 00:07:49,038
We will thus proceed this way.

166
00:07:49,038 --> 00:07:51,868
In order to count the disks horizontally,

167
00:07:51,869 --> 00:07:55,429
we will not change the "ligne" here,
thus using 0

168
00:07:55,429 --> 00:07:56,729
as argument here.

169
00:07:56,728 --> 00:07:58,188
On the other hand,

170
00:07:58,189 --> 00:08:01,179
we will move onto the next column

171
00:08:01,179 --> 00:08:04,280
which is why we use the value +1
as the last argument.

172
00:08:04,280 --> 00:08:05,428
Now to

173
00:08:06,718 --> 00:08:08,899
count the disks

174
00:08:08,899 --> 00:08:09,968
in the Southweast

175
00:08:09,968 --> 00:08:11,139
direction

176
00:08:11,139 --> 00:08:14,318
In order to move from one square
to the next,

177
00:08:14,998 --> 00:08:17,838
we will add 1 to the row

178
00:08:18,458 --> 00:08:20,838
-- thus using the value +1 here--

179
00:08:20,838 --> 00:08:25,269
and we will also add 1 to the
column

180
00:08:25,269 --> 00:08:28,770
-- thus using the value -1 here.

181
00:08:28,769 --> 00:08:31,419
We still need to deal with the
very last direction.

182
00:08:32,789 --> 00:08:36,168
In order to count disks
in the South direction,

183
00:08:36,168 --> 00:08:39,570
we will move from one square to
the next

184
00:08:39,570 --> 00:08:41,356
by adding 1 to the row

185
00:08:43,142 --> 00:08:44,930
-- thus using the value +1 here --

186
00:08:44,930 --> 00:08:51,080
but the column will not change
-- thus using the value 0 here.

187
00:08:51,080 --> 00:08:54,059
If one of these 4 conditions is
true,

188
00:08:54,059 --> 00:08:56,350
we know that the player has won.

189
00:08:56,350 --> 00:08:59,230
Since only one of these conditions
needs to be true,

190
00:08:59,230 --> 00:09:02,309
we used "or" here.

191
00:09:02,309 --> 00:09:05,879
In this case, our function
will return true.

192
00:09:05,879 --> 00:09:09,618
We here close the previously
opened braces.

193
00:09:11,018 --> 00:09:12,730
Reaching this point of
our function,

194
00:09:12,730 --> 00:09:16,590
this means that we have
looked over the whole grid

195
00:09:16,590 --> 00:09:18,629
without ever passing by here.

196
00:09:18,629 --> 00:09:20,879
Indeed, if we had, we would already
have exited the function.

197
00:09:20,879 --> 00:09:22,850
We therefore know

198
00:09:22,850 --> 00:09:24,470
that we were not able to count 4

199
00:09:24,470 --> 00:09:28,500
or more aligned disks; thus, the
player has not won, yet.

200
00:09:28,500 --> 00:09:31,580
The function will thus return
false.

201
00:09:32,120 --> 00:09:35,260
Obviously, we still have to write
the "compte" function.

202
00:09:35,260 --> 00:09:38,210
We are calling this "compte"
function here, for example.

203
00:09:38,210 --> 00:09:42,080
It will return the number
of aligned disks

204
00:09:42,080 --> 00:09:46,420
which is for sure a non-negative integer,

205
00:09:46,420 --> 00:09:51,330
which is why we used the "unsigned int"
type in order to define the return type of the function.

206
00:09:51,330 --> 00:09:53,750
The first parameter of the function
is thus the grid,

207
00:09:53,750 --> 00:09:55,539
passed, once again,

208
00:09:55,539 --> 00:09:57,219
by constant reference.

209
00:09:57,220 --> 00:09:59,829
The two following parameters are simply

210
00:09:59,828 --> 00:10:01,489
the row and the column

211
00:10:01,490 --> 00:10:04,590
of the square from which we will
start counting the disks.

212
00:10:04,590 --> 00:10:06,639
The last two parameters

213
00:10:06,639 --> 00:10:07,769
of the function

214
00:10:07,769 --> 00:10:11,809
are the two values which will
define the couting direction.

215
00:10:11,809 --> 00:10:16,529
These can be positive or negative
integers; we will thus use the int type.

216
00:10:16,529 --> 00:10:18,635
We will call these
parameters "dir_ligne"

217
00:10:18,635 --> 00:10:22,711
and "dir_colonne" in order
to signify that these two values

218
00:10:22,711 --> 00:10:24,839
will correspond to the
row and column

219
00:10:24,839 --> 00:10:26,830
for a given direction.

220
00:10:26,830 --> 00:10:29,570
We will resort to a variable "compteur"
(TN: means "counter")

221
00:10:29,570 --> 00:10:34,810
initialized to 0. Its type is the same
as the return type of the "compte" function.

222
00:10:34,810 --> 00:10:36,888
It will keep the count of aligned disks.

223
00:10:36,888 --> 00:10:39,800
What should the "compte" function
do exactly?

224
00:10:39,800 --> 00:10:43,993
It must start from the square
with the coordinates "ligne_depart"

225
00:10:43,993 --> 00:10:46,006
and "colonne_depart".
(TN: means "starting_row" and "starting_column")

226
00:10:47,506 --> 00:10:50,909
It must loop over
the grid following a given direction

227
00:10:51,539 --> 00:10:56,149
as long as it encounters disks
which color is the same as

228
00:10:56,149 --> 00:10:57,776
the disk located on "ligne_depart"

229
00:10:57,776 --> 00:10:59,403
and "colonne_depart".

230
00:10:59,403 --> 00:11:01,030
How will we do this?

231
00:11:01,029 --> 00:11:05,980
We will use variables "ligne" and "colonne"
(TN: means "row" and "column")

232
00:11:05,980 --> 00:11:08,660
which will be initialized to

233
00:11:08,659 --> 00:11:10,019
"ligne_depart"

234
00:11:10,019 --> 00:11:11,758
and "colonne_depart".

235
00:11:11,758 --> 00:11:13,230
At every loop,

236
00:11:13,230 --> 00:11:15,590
in order to move from one square
to the next,

237
00:11:15,590 --> 00:11:19,520
we will add "dir_ligne"
to the variable "ligne"

238
00:11:20,610 --> 00:11:23,420
and add "dir_colonne" to the
variable "colonne".

239
00:11:25,350 --> 00:11:27,139
Since we will look over the grid

240
00:11:27,139 --> 00:11:30,289
as long as we encounter disks
which color is the same as the disk

241
00:11:30,289 --> 00:11:30,846
in "ligne_depart"

242
00:11:30,846 --> 00:11:31,703
and "colonne_depart"

243
00:11:31,703 --> 00:11:33,670
we will use a "while loop".

244
00:11:33,669 --> 00:11:36,270
At every loop,

245
00:11:36,270 --> 00:11:39,919
we will have found a new disk
of the selected color

246
00:11:39,919 --> 00:11:42,750
and will thus increment the
"compteur" variable.

247
00:11:42,750 --> 00:11:46,820
How will we writte all this?
Well, we will start by declaring

248
00:11:46,820 --> 00:11:49,690
the variables "ligne" and colonne"

249
00:11:49,690 --> 00:11:52,226
initialized to "ligne_depart"

250
00:11:52,226 --> 00:11:54,762
and "colonne_depart".

251
00:11:54,762 --> 00:11:57,299
As we said, we are using a "while loop"
with a stopping condition

252
00:11:57,299 --> 00:11:59,858
depending on the color of the disk
on "ligne" and "colonne".

253
00:11:59,858 --> 00:12:02,600
We will keep going as long
as the color of this disk is the same as

254
00:12:02,600 --> 00:12:05,239
the color of the disk on
"ligne_depart"

255
00:12:05,239 --> 00:12:07,128
and "colonne_depart".

256
00:12:07,688 --> 00:12:10,519
At every loop we will thus increment
the "compteur" variable

257
00:12:10,519 --> 00:12:11,309
since we have found

258
00:12:11,309 --> 00:12:13,919
a new disk which color is the same
as the first one.

259
00:12:13,919 --> 00:12:15,600
Then, we will add

260
00:12:16,240 --> 00:12:17,370
"dir_ligne"

261
00:12:17,370 --> 00:12:18,640
and "dir_colonne"

262
00:12:18,930 --> 00:12:20,650
to "ligne" and "colonne".

263
00:12:21,750 --> 00:12:24,070
By the way, please note that we
haved added blank spaces here

264
00:12:24,070 --> 00:12:28,710
and here in order to align the " = " and
" + " signs on these two lines;

265
00:12:28,710 --> 00:12:30,679
this makes the code easier to read

266
00:12:30,678 --> 00:12:32,379
and makes it obvious that

267
00:12:32,379 --> 00:12:36,010
the variables "ligne" and "colonne"
share the same nature.

268
00:12:36,309 --> 00:12:39,310
When we exit the loop,
this means that we have found a disk

269
00:12:39,310 --> 00:12:40,428
which color was not the good one.

270
00:12:40,428 --> 00:12:43,679
We can thus return the value contained
in the "compteur" variable.

271
00:12:43,679 --> 00:12:45,878
However, this is not entierely correct.

272
00:12:45,879 --> 00:12:47,670
Do you see why?

273
00:12:47,669 --> 00:12:49,490
At this point,

274
00:12:49,490 --> 00:12:51,299
similarly to the "joue" function,

275
00:12:51,299 --> 00:12:54,389
if we do not add conditions to
our "while loop",

276
00:12:54,389 --> 00:12:57,640
the possibility remains that we could
exit the "grille" array.

277
00:12:58,070 --> 00:13:02,890
We will follow the path opened with
the alternative version of the "joue" function

278
00:13:02,889 --> 00:13:04,659
and use the same solution.

279
00:13:04,659 --> 00:13:08,059
Namely, we will add a test
regarding the variable "ligne",

280
00:13:08,059 --> 00:13:12,259
making sure that it remains less
than the size of "grille".

281
00:13:12,289 --> 00:13:15,529
The same goes for the
variable "colonne".

282
00:13:16,080 --> 00:13:19,879
Finally, we will return to our "est_ce_gagne"
function and notive that,

283
00:13:19,879 --> 00:13:22,299
if the row of the starting square

284
00:13:22,299 --> 00:13:25,289
has 0, 1 or 2 as index,

285
00:13:25,289 --> 00:13:28,019
there is not need to search

286
00:13:28,019 --> 00:13:30,559
in this direction here,
for example.

287
00:13:30,559 --> 00:13:32,308
Indeed, we already know

288
00:13:32,308 --> 00:13:36,309
that the player could not possiblity
align four disks in this direction here.

289
00:13:36,309 --> 00:13:38,839
We could align 3 disks at most,

290
00:13:38,840 --> 00:13:42,289
if we are starting from the
row number 2.

291
00:13:43,149 --> 00:13:44,798
The same goes if we are starting

292
00:13:44,798 --> 00:13:46,489
from the edge of the grid

293
00:13:46,489 --> 00:13:48,930
and are counting the disks
towards the right

294
00:13:48,929 --> 00:13:51,429
or if we are starting from the bottom
of the grid

295
00:13:51,429 --> 00:13:54,189
and counting the disks
downward.

296
00:13:54,189 --> 00:13:57,329
Therefore, the "est_ce_gagne" function
executes more operations than necessary.

297
00:13:57,330 --> 00:13:59,990
We will thus add conditions
preventing the disk counting

298
00:13:59,990 --> 00:14:03,949
whenever we are sure 4 disks
could not possibly be aligned.

299
00:14:03,949 --> 00:14:06,409
This will be written
as follows:

300
00:14:06,409 --> 00:14:10,869
We are considering the
Northeast direction.

301
00:14:10,869 --> 00:14:15,079
So that at least 4 disks could be
aligned,

302
00:14:15,079 --> 00:14:16,750
the row needs to be

303
00:14:16,750 --> 00:14:18,940
strictly greater than 2.

304
00:14:18,940 --> 00:14:21,690
Also, the column should not be too big;

305
00:14:21,690 --> 00:14:23,708
feel free to check that, in fact,

306
00:14:23,708 --> 00:14:25,769
the column must be less than

307
00:14:25,769 --> 00:14:27,960
the number of columns minus 4.

308
00:14:27,960 --> 00:14:29,250
This will be written

309
00:14:29,250 --> 00:14:30,389
as follows.

310
00:14:30,389 --> 00:14:34,780
If we are searching for disks
aligned horizontally,

311
00:14:34,780 --> 00:14:38,030
we only nest to test the column.

312
00:14:38,030 --> 00:14:41,039
The test will be the same as before.

313
00:14:41,039 --> 00:14:43,740
The test for the

314
00:14:43,740 --> 00:14:45,330
Southeast direction

315
00:14:45,330 --> 00:14:48,190
will be written like this.

316
00:14:48,190 --> 00:14:52,150
This time, we will make sure that
that neither the row

317
00:14:52,150 --> 00:14:54,129
nor the column are too big.

318
00:14:54,129 --> 00:14:56,820
In the case where we count
the disks in the South direction,

319
00:14:56,820 --> 00:15:00,168
we simply need to verify that
the row is not too big.

320
00:15:02,008 --> 00:15:05,629
Now, as you can see, we have
introduced several repetitions.

321
00:15:05,629 --> 00:15:09,779
Indeed, this expression appears
here, here and here.

322
00:15:09,799 --> 00:15:13,079
This expression also appears here.

323
00:15:13,080 --> 00:15:16,430
In order to avoid this, we will introduce
two constants

324
00:15:16,430 --> 00:15:19,388
which will contain the values
of these expressions.

325
00:15:19,388 --> 00:15:21,370
This will be written like this.

326
00:15:21,370 --> 00:15:24,159
We will call our constants "ligne_max"
(TN: means "max_row")

327
00:15:24,159 --> 00:15:26,019
and "colonne_max"
(TN: means "max_column").

328
00:15:26,019 --> 00:15:27,559
We will use them

329
00:15:27,559 --> 00:15:30,799
wherever the previous expressions
were used.

330
00:15:36,129 --> 00:15:39,539
Voilà! This is now the final
version of our

331
00:15:39,539 --> 00:15:41,362
"est_ce_gagne" and "compte" functions.

332
00:15:41,362 --> 00:15:44,649
Now, we only need to deal
with the situation where the grid becomes full

333
00:15:44,649 --> 00:15:47,199
without any player having won.

334
00:15:47,199 --> 00:15:49,429
This will be the subject of the
very last video.
