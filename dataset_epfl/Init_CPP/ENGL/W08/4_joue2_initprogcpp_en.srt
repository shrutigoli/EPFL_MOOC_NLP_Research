1
00:00:05,382 --> 00:00:08,960
In this episode, we will present
the different alternative versions

2
00:00:08,960 --> 00:00:12,929
of the "joue" (TN: means "plays") function that we
have written in the previous episode.

3
00:00:12,929 --> 00:00:17,089
Please be reminded that this  function's
goal is to place a disk

4
00:00:17,089 --> 00:00:20,519
in the grid, given the number
of the column

5
00:00:20,529 --> 00:00:23,739
where we intend to drop our disk.

6
00:00:23,739 --> 00:00:27,799
Also given is the player's color.
By the way, do not forget

7
00:00:27,807 --> 00:00:30,289
that this function also verifies
the validity of our move.

8
00:00:30,289 --> 00:00:31,978
Namely, if the column is full,

9
00:00:31,978 --> 00:00:34,759
we will declare that the move is not valid.

10
00:00:34,759 --> 00:00:38,030
No matter the implementing we choose
for our alternate version

11
00:00:38,030 --> 00:00:41,730
of the "joue" function, the prototype
is not going to change.

12
00:00:41,729 --> 00:00:44,959
Therefore, we will still have here
a grid passed by reference,

13
00:00:44,960 --> 00:00:47,039
a column passed as argument

14
00:00:47,039 --> 00:00:49,869
and a color passed as argument aswell.
Nothing has changed here.

15
00:00:49,869 --> 00:00:53,019
However, the idea is to come up
with a rather different algorithm.

16
00:00:53,020 --> 00:00:55,270
We will thus start by saying that,

17
00:00:55,270 --> 00:00:57,359
if the column is full,

18
00:00:57,359 --> 00:00:59,300
we will not play.

19
00:00:59,299 --> 00:01:03,539
The idea is to start by run the test
here instead of doing it later.

20
00:01:03,539 --> 00:01:04,858
This is written like this:

21
00:01:04,858 --> 00:01:06,964
We are testing if the
column is full,

22
00:01:06,964 --> 00:01:09,269
Be reminded that a column
is full if and only if

23
00:01:09,269 --> 00:01:12,599
the uppermost level,

24
00:01:12,599 --> 00:01:14,729
the level 0 is occupied.

25
00:01:14,730 --> 00:01:21,890
Here, we will thus test
if the square in the row 0,

26
00:01:21,890 --> 00:01:24,590
this row here,

27
00:01:24,590 --> 00:01:29,080
and in the column received as argument
is not empty.

28
00:01:29,080 --> 00:01:31,599
If this square is not empty, that means
that the column is full

29
00:01:31,599 --> 00:01:33,619
and we will immediately

30
00:01:33,620 --> 00:01:37,540
return the fact that this move
was invalid, that is, the value "false",

31
00:01:37,540 --> 00:01:39,650
We are now released from this condition.

32
00:01:39,650 --> 00:01:41,739
Since at this point we know the column is
not empty,

33
00:01:41,739 --> 00:01:44,849
we can calmly search the place
where the disk will be placed.

34
00:01:44,849 --> 00:01:48,199
We can freely seek the place
where we will play.

35
00:01:48,199 --> 00:01:51,740
To that end, we will run through the column,
like we did in the previous version,

36
00:01:51,740 --> 00:01:55,260
starting from the bottom.
In C++, this is written like this.

37
00:01:55,260 --> 00:01:57,270
We are declaring a variable

38
00:01:57,269 --> 00:01:59,259
which will allow us to
climb up the rows,

39
00:01:59,260 --> 00:02:02,640
just like we did in the previous version
of the "joue" function.

40
00:02:02,640 --> 00:02:06,730
We initialize this variable
to the size of the grid - 1

41
00:02:06,739 --> 00:02:10,228
then to the current position.

42
00:02:10,228 --> 00:02:12,498
That means that, if the square on the
position "grille[ligne][colonne]" is not empty,

43
00:02:12,498 --> 00:02:15,998
we will decrement the row by 1.

44
00:02:15,998 --> 00:02:17,959
Finally, the last step

45
00:02:17,959 --> 00:02:21,149
is to fill the square we have found

46
00:02:21,149 --> 00:02:23,728
(indeed, thanks to our previous test,
we know that such a square exists)

47
00:02:23,729 --> 00:02:25,819
and finally to return "true"

48
00:02:25,819 --> 00:02:29,649
since we have been able to
play our move.

49
00:02:29,649 --> 00:02:33,778
Now, we should test our brand
new "joue" function;

50
00:02:33,778 --> 00:02:36,998
we let you do this as an exercise.

51
00:02:36,998 --> 00:02:42,098
Also, feel free to appreciate
the differences between the two codes,

52
00:02:42,098 --> 00:02:45,298
independently of the number of
lines and the comments, by the way.

53
00:02:45,299 --> 00:02:48,898
Now, let us see a third version
of this "joue" function,

54
00:02:48,898 --> 00:02:52,259
restarting with the beginning of
the first version, which

55
00:02:52,259 --> 00:02:55,319
we presented in the 
previous episode.

56
00:02:55,319 --> 00:02:59,519
We will start by helping you
recall the first version.

57
00:02:59,519 --> 00:03:02,899
The idea is to focus on the troubles

58
00:03:02,899 --> 00:03:08,088
we initially encountered, and brought us
so many lines

59
00:03:08,088 --> 00:03:11,718
with "pleine" (TN: means "full") here,
also revised here aswell.

60
00:03:11,718 --> 00:03:14,138
Those precisely pertained on this
critical point

61
00:03:14,138 --> 00:03:19,018
of decrementing "ligne" here
when "ligne" was 0.

62
00:03:19,018 --> 00:03:20,079
What happens then?

63
00:03:20,079 --> 00:03:22,939
Also, is there a way to rewrite the
code in

64
00:03:22,939 --> 00:03:24,410
a slightly different way?

65
00:03:24,410 --> 00:03:28,630
The idea is to do
without this boolean "pleine"

66
00:03:28,629 --> 00:03:31,078
and to replace it with
another test.

67
00:03:31,078 --> 00:03:33,550
Let us keep going from
the intial problem.

68
00:03:33,550 --> 00:03:37,379
and with a question that we had left
unanswered,

69
00:03:37,378 --> 00:03:42,268
that was: what happened when we were at the
line 0.

70
00:03:42,278 --> 00:03:43,889
Since we had not written

71
00:03:43,889 --> 00:03:47,479
all this text here,

72
00:03:47,479 --> 00:03:49,599
we still executed the instruction " ligne --"

73
00:03:49,598 --> 00:03:54,588
Therefore, there was a risk, in this
case, to exit the array.

74
00:03:54,588 --> 00:03:57,318
So, let us go back to the
type of "ligne",

75
00:03:57,318 --> 00:03:59,488
which is of "size_t" type.

76
00:03:59,489 --> 00:04:01,808
As we told you before, this type,

77
00:04:01,808 --> 00:04:05,448
the "size_t" type is always
a positive integer.

78
00:04:05,449 --> 00:04:09,609
Here, we thus have a problem
regarding the number representation.

79
00:04:09,609 --> 00:04:12,989
Practically, what wil happen in the memory
is that we will have

80
00:04:12,989 --> 00:04:14,079
a very big number.

81
00:04:14,079 --> 00:04:17,620
No matter the technical aspects though;
this is not our focus here.

82
00:04:17,620 --> 00:04:21,579
However, this very big number
will certainly not be 

83
00:04:21,579 --> 00:04:23,098
a row number of our array.

84
00:04:23,098 --> 00:04:23,899
And so,

85
00:04:23,899 --> 00:04:26,948
what should we do here?
Well, the systematic reflex

86
00:04:26,949 --> 00:04:28,319
we should learn here

87
00:04:28,319 --> 00:04:32,680
-another critique regarding our code
here will thus arise-

88
00:04:32,680 --> 00:04:34,620
is that we should systematically

89
00:04:34,620 --> 00:04:39,439
test if the accesses to our array are
correct.

90
00:04:39,439 --> 00:04:43,240
We garantee this either by a
demonstration of our algorithm

91
00:04:43,240 --> 00:04:46,699
or by a true test.
So, the conditions here

92
00:04:46,699 --> 00:04:50,292
are that "ligne" should always
be

93
00:04:50,292 --> 00:04:55,186
less than "grille.size()".

94
00:04:55,186 --> 00:04:57,437
Secondly, an array index cannot
be

95
00:04:57,437 --> 00:05:00,389
greater than the array size.

96
00:05:00,399 --> 00:05:05,438
And, lastly, we should be able to verify
that "colonne" (TN: means "column")

97
00:05:05,439 --> 00:05:08,189
should always be less than

98
00:05:08,189 --> 00:05:13,038
"grille[ligne.size()]"

99
00:05:13,038 --> 00:05:17,439
Therefore, this value here "-1"
which is the "size_t"-type 0

100
00:05:17,439 --> 00:05:21,380
on which we execute the instruction " -- "
will be represented one way or another,

101
00:05:21,380 --> 00:05:24,960
for example "impossible", or a
very big number,

102
00:05:24,959 --> 00:05:29,250
no matter what, this number,
" 0 -- ", that is, -1

103
00:05:29,250 --> 00:05:31,740
cannot be represented as a "size_t".

104
00:05:31,740 --> 00:05:35,563
Therefore, condition grid here, 
"less than grille.size() "

105
00:05:35,563 --> 00:05:37,686
is not verified.

106
00:05:37,686 --> 00:05:39,970
We will use precisely this
condition

107
00:05:39,970 --> 00:05:42,520
as the overflowing condition

108
00:05:42,519 --> 00:05:44,098
of our array.

109
00:05:44,098 --> 00:05:45,750
We will thus write,

110
00:05:45,750 --> 00:05:47,508
along with a comment here,

111
00:05:47,508 --> 00:05:51,501
that if the test
"ligne" less than grille.size()

112
00:05:51,501 --> 00:05:53,284
is false,

113
00:05:53,284 --> 00:05:55,069
that means that the column is full.

114
00:05:55,069 --> 00:05:56,949
We thus need to stop

115
00:05:56,949 --> 00:06:00,360
since the move is invalid.

116
00:06:00,360 --> 00:06:03,569
Now that we have understood and
explained what we wish to accomplish,

117
00:06:03,569 --> 00:06:05,588
we can correct our code

118
00:06:05,588 --> 00:06:07,990
and supress the variable "pleine".

119
00:06:07,990 --> 00:06:12,019
We supress here the test which
involved it and replace it by this test :

120
00:06:12,019 --> 00:06:17,908
"ligne" less than the size of the grid.

121
00:06:17,908 --> 00:06:23,019
Please note the protection
of the access index,

122
00:06:23,019 --> 00:06:25,109
according to the size of the accessed array,

123
00:06:25,109 --> 00:06:28,088
before we access it. This is an advice

124
00:06:28,088 --> 00:06:31,939
you should systematically abide by.
Of course, if such a condition is garanteed by "for loop",


125
00:06:31,939 --> 00:06:34,710
or some other constraint, you will not add such a test
at every step. However,

126
00:06:34,709 --> 00:06:38,038
every time you have to
access an array through an index,

127
00:06:38,038 --> 00:06:40,120
you should at least ask yourself whether the condition

128
00:06:40,120 --> 00:06:42,530
that it is less than

129
00:06:42,529 --> 00:06:46,249
the array size is fulfilled.

130
00:06:46,249 --> 00:06:47,610
So, we now see that we have

131
00:06:47,610 --> 00:06:50,609
explicitly written this useful test,

132
00:06:50,609 --> 00:06:54,038
tasked to test if the column is full.

133
00:06:54,038 --> 00:06:56,979
Now, we can keep suppressing

134
00:06:56,979 --> 00:07:00,420
everything involving "pleine"

135
00:07:00,420 --> 00:07:03,108
and finally correct our program

136
00:07:03,108 --> 00:07:05,448
wherever the variable "pleine"

137
00:07:05,448 --> 00:07:08,128
is no longer needed.

138
00:07:08,129 --> 00:07:12,460
Here, still the same test : if the row is less

139
00:07:12,459 --> 00:07:15,028
than the grid size,

140
00:07:15,028 --> 00:07:17,098
then we can play.

141
00:07:17,098 --> 00:07:19,990
Otherwise, that means we could
not play.

142
00:07:19,990 --> 00:07:22,430
We thus modify our

143
00:07:22,430 --> 00:07:27,848
code accordingly.

144
00:07:27,848 --> 00:07:32,248
Our third version of "joue"
function is now finished.

145
00:07:32,249 --> 00:07:35,579
That being said, if you have followed our
discourse so far,

146
00:07:35,579 --> 00:07:36,879
then you should realize that

147
00:07:36,879 --> 00:07:39,319
an error remains in all our
"joue" functions.

148
00:07:39,319 --> 00:07:40,749
Do you have any idea

149
00:07:40,749 --> 00:07:44,739
what we should add to our three
"joue" functions in order

150
00:07:44,738 --> 00:07:46,329
to render them correct?

151
00:07:46,329 --> 00:07:50,109
We will let you implement it yourself
as an exercise

152
00:07:50,109 --> 00:07:53,949
in the variant of the "joue"
function you have choosen

153
00:07:53,949 --> 00:07:55,689
to keep for your Connect Four.

154
00:07:55,689 --> 00:07:59,629
So, at this point, you should have
a correct "joue" function.

155
00:07:59,629 --> 00:08:02,050
In the previous episodes,
we have presented

156
00:08:02,050 --> 00:08:05,750
the data structures necessary to build
a Connect Four game,

157
00:08:05,750 --> 00:08:09,129
simple functions such as "initialize"
and "affiche".

158
00:08:09,129 --> 00:08:13,078
Also, in these last two episodes, we have
implement the "joue" function,

159
00:08:13,078 --> 00:08:17,118
letting us a drop a disk down the
indicated column (if this column is valid).

160
00:08:17,119 --> 00:08:21,869
Now, we still have to ask
the players where they intend to play.

161
00:08:21,869 --> 00:08:25,289
We then validate their move
-we have just done that.

162
00:08:25,289 --> 00:08:29,019
Then, we just just need to iterate,
alternating between players.

163
00:08:29,019 --> 00:08:31,210
Asking the red player to play,
the yellow player and so on.

164
00:08:31,210 --> 00:08:35,418
Finally, we will terminate the program
once a player wins

165
00:08:35,418 --> 00:08:37,850
or once the grid is full.

166
00:08:37,850 --> 00:08:42,319
This will occupy us for
the next episodes.
