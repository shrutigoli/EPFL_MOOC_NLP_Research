1
00:00:05,410 --> 00:00:08,049
Let us resume the programming
of our Connect Four game.

2
00:00:08,049 --> 00:00:11,320
In the first episode, we
have endeavoured to

3
00:00:11,320 --> 00:00:13,526
represent the game, the colors,

4
00:00:13,526 --> 00:00:16,512
namely the data structures
used in our prgram.

5
00:00:16,512 --> 00:00:19,110
Then, in the second episode,
we have coded the

6
00:00:19,110 --> 00:00:23,139
basic functions for doing
the intialization and printing of the game.

7
00:00:23,139 --> 00:00:25,439
Now, let us tackle the game itself.

8
00:00:25,439 --> 00:00:28,230
In order to play, we will need
to ask the

9
00:00:28,230 --> 00:00:31,749
user to drop a disk into the grid.

10
00:00:31,749 --> 00:00:34,588
We need to make sure that their
answer is correct

11
00:00:34,588 --> 00:00:36,509
and ensure that the data structures

12
00:00:36,509 --> 00:00:38,140
will remain valid according to the player's move,

13
00:00:38,140 --> 00:00:42,159
thus indeed playing this move
in the grid.

14
00:00:42,169 --> 00:00:47,260
Then, we will ask the other
player to drop a disk, validate and so on.

15
00:00:47,260 --> 00:00:51,103
Thus, we will loop like this
until one player has won

16
00:00:51,103 --> 00:00:53,486
or the grid has been filled.

17
00:00:53,696 --> 00:00:56,530
In this sequence, we will focus
on the second point,

18
00:00:56,530 --> 00:01:00,439
that is, validate the player's move
and, according to the data structure,

19
00:01:00,439 --> 00:01:02,478
render the data structure valid,

20
00:01:02,478 --> 00:01:05,060
effectively playing the move
in the grid.

21
00:01:05,060 --> 00:01:08,310
Let's decide to make it a function.

22
00:01:08,310 --> 00:01:10,979
The first step consists of
precisely knowing

23
00:01:10,979 --> 00:01:13,548
what this function has to do;
we here focus on the "what".

24
00:01:13,549 --> 00:01:15,902
In this case, we already have a precise idea:

25
00:01:15,902 --> 00:01:18,115
We need to receive a column
number,

26
00:01:18,115 --> 00:01:20,609
signifying where the player intends to drop
his disk.

27
00:01:20,609 --> 00:01:24,670
Then, we will verify if this move
is valid and update the game

28
00:01:24,670 --> 00:01:28,079
according to the move
indicated by the player.

29
00:01:28,079 --> 00:01:30,199
We can name this function

30
00:01:30,199 --> 00:01:33,149
"joue" (TN: means "play"), for
example.

31
00:01:33,150 --> 00:01:36,429
Now, let us focus on this
function's prototype.

32
00:01:36,429 --> 00:01:39,810
What are the arguments to be passed to
the function?

33
00:01:39,810 --> 00:01:43,820
To that end, we will imagine what
the typical call of this function

34
00:01:43,819 --> 00:01:47,539
would look like. Typically, we would
write "joue",

35
00:01:47,539 --> 00:01:50,859
of course, we need a game to play
with; thus, we will pass a grid as argument.

36
00:01:50,859 --> 00:01:53,732
Then, we will indicate where we 
intend to drop the disk;

37
00:01:53,732 --> 00:01:56,121
for example to drop a disk down column 3

38
00:01:56,121 --> 00:01:58,203
Finally, we need the player's color;

39
00:01:58,203 --> 00:02:01,691
is it the red  or the yellow
player's turn?

40
00:02:01,691 --> 00:02:06,649
For example, we would inidicate
that it is the red player's turn;

41
00:02:06,649 --> 00:02:08,519
we would consequently

42
00:02:08,519 --> 00:02:12,139
drop a red disk down
column 3.

43
00:02:12,849 --> 00:02:15,772
Then, it would be the
yellow player's turn.

44
00:02:15,782 --> 00:02:18,175
For example, the yellow player
could wish to drop a disk down column 2.

45
00:02:18,175 --> 00:02:22,869
Then, the red player, at turn again,
would drop their disk down column 3.

46
00:02:22,869 --> 00:02:26,589
Thus, we clearly see that the
function needs to receive three parameters,

47
00:02:26,589 --> 00:02:29,519
we must pass three arguments:
the grid,

48
00:02:29,519 --> 00:02:32,179
a column number and a color.

49
00:02:32,179 --> 00:02:34,822
Now, we can start writing
the function's prototype.

50
00:02:34,822 --> 00:02:37,465
Thus, "joue" (the name of the function),

51
00:02:37,465 --> 00:02:40,109
then a grid, called "grille",
passed as argument.

52
00:02:40,109 --> 00:02:41,850
(TN:"grille" means "grid").

53
00:02:41,850 --> 00:02:44,508
Then, we will retrieve a
column number,

54
00:02:44,508 --> 00:02:46,608
typically an integer number.

55
00:02:46,608 --> 00:02:49,559
Finally, we will pass the
plalyer's color

56
00:02:49,559 --> 00:02:52,989
for which we had already
defined the type "Couleur".

57
00:02:53,259 --> 00:02:55,988
Here is a first version of
this prototype.

58
00:02:55,988 --> 00:02:58,908
Let us begin by criticizing it a little.

59
00:02:58,908 --> 00:03:01,859
Here, for the column number,
we used the integer type.

60
00:03:01,859 --> 00:03:05,868
However, a priori, the columns
will go from 0 to 6

61
00:03:05,868 --> 00:03:08,891
and are all positive integers.

62
00:03:08,891 --> 00:03:13,014
Thus, here, we wish to force
this number to be a positive integer.

63
00:03:13,014 --> 00:03:16,589
Moreover, this column will serve

64
00:03:16,589 --> 00:03:22,449
to indicate the position in an array.
Typically, if we have the grid here,

65
00:03:22,449 --> 00:03:28,399
as you have seen during the printing,
we used the indices "i" and "j",

66
00:03:28,399 --> 00:03:30,448
where j is precisely the column index

67
00:03:30,448 --> 00:03:34,627
Thus, this column being used to index
the array elements,

68
00:03:34,627 --> 00:03:39,778
we will respect the previously established
conventions, namely that,

69
00:03:39,778 --> 00:03:43,918
for array sizes and indices,
we use the "size_t" type.

70
00:03:43,918 --> 00:03:48,908
Here, we will thus use the "size_t" type and
correct this aspect in our function's prototype.

71
00:03:48,908 --> 00:03:53,492
Now, another very important
correction

72
00:03:53,492 --> 00:03:54,916
regarding the grid.

73
00:03:54,916 --> 00:03:59,240
Obviously, the fact that we are
playing in the grid will modify it.

74
00:03:59,240 --> 00:04:01,168
The grid will be modified!

75
00:04:01,168 --> 00:04:05,430
If, for example, the red player drops
his disk down column 3,

76
00:04:05,430 --> 00:04:08,929
that means that a red disk will
appear here;

77
00:04:08,929 --> 00:04:12,299
the grid is indeed modified!

78
00:04:12,300 --> 00:04:15,179
Therefore, we have to resort to

79
00:04:15,179 --> 00:04:18,129
by-reference passing.

80
00:04:18,509 --> 00:04:23,719
The grid being modified, we resort
to by-reference passing thanks to this sign

81
00:04:23,719 --> 00:04:27,208
which, we remind you, is used
to signify that the grid is passed by reference.

82
00:04:27,509 --> 00:04:30,340
Those were the arguments of
our prototype.

83
00:04:30,340 --> 00:04:32,930
Let us now focus on the
return value.

84
00:04:32,930 --> 00:04:36,810
We did not use any return
value in our calls;

85
00:04:36,810 --> 00:04:41,260
we did not write something like
"z = joue(grille, 3)".

86
00:04:41,260 --> 00:04:43,480
If we had, what would this
z be exaclty?!

87
00:04:43,480 --> 00:04:46,670
Since we do not need to return
anything,

88
00:04:46,670 --> 00:04:51,380
the return type will be
the "void" type.

89
00:04:52,639 --> 00:04:55,429
Now that the prototype is finished,

90
00:04:55,429 --> 00:04:57,209
we can move on to the function definition

91
00:04:57,209 --> 00:05:00,570
and start coding what we
wish to accomplish.

92
00:05:00,570 --> 00:05:03,218
Our goal is to drop a disk

93
00:05:03,218 --> 00:05:07,769
down the column received as parameter.

94
00:05:07,769 --> 00:05:11,360
For example, if we drop a red
disk down column 3,

95
00:05:11,370 --> 00:05:14,929
what we wish to do is to move
to the third column,

96
00:05:14,929 --> 00:05:18,388
and check what the first empty position is.

97
00:05:18,389 --> 00:05:22,279
For example, let us suppose that we
already have a red disk here

98
00:05:22,279 --> 00:05:25,019
and a yellow disk just
above.

99
00:05:25,019 --> 00:05:29,859
So, we are dropping a red
disk down column 3.

100
00:05:29,860 --> 00:05:33,408
This disk will therefore be placed
on the first empty position.

101
00:05:33,408 --> 00:05:36,389
We will thus check:
here it is already occupied,

102
00:05:36,389 --> 00:05:41,080
here it is empty and
we can thus place our red disk.

103
00:05:41,080 --> 00:05:44,338
First of all, we should write
a comment

104
00:05:44,338 --> 00:05:47,288
explaining what we wish to accomplish
in order to clarify our thoughts

105
00:05:47,288 --> 00:05:51,228
and make it easier for future
readers to understand our code.

106
00:05:51,228 --> 00:05:55,228
We will run through the furnished
column

107
00:05:55,228 --> 00:05:59,228
from bottom to top, starting with
the lowest point.

108
00:05:59,228 --> 00:06:04,638
How will we write this in C++?
Why, we will give ourselves an index

109
00:06:04,638 --> 00:06:08,438
in order to run through the rows.
Let us call this index "ligne" (TN: means "row").

110
00:06:08,439 --> 00:06:12,009
With this index, we will start from
the bottom.

111
00:06:12,009 --> 00:06:14,338
By the way, please be reminded that the
array is always numbered

112
00:06:14,338 --> 00:06:17,920
from 0, at the top, to the bottom.

113
00:06:17,920 --> 00:06:22,920
The bottom is the size of the array minus 1.

114
00:06:22,920 --> 00:06:27,490
Therefore, we will start here,
at "size -1".

115
00:06:27,490 --> 00:06:31,149
Thus, we declare a "size_t"-type
variable "ligne"

116
00:06:31,149 --> 00:06:34,780
initialized to the size of
the grid minus 1.

117
00:06:35,160 --> 00:06:36,639
We run through this column,

118
00:06:36,639 --> 00:06:41,568
starting from the bottom until
we reach an empty square.

119
00:06:41,988 --> 00:06:46,089
In C++, "until" means that we
have a loop,

120
00:06:46,089 --> 00:06:48,878
here a conditional loop.

121
00:06:48,878 --> 00:06:53,228
Since the condition is :
"as long we do not have an empty square",

122
00:06:53,228 --> 00:06:57,990
that is, as long as the square of the column
we are currently visiting

123
00:06:57,990 --> 00:06:59,028
is not empty.

124
00:06:59,028 --> 00:07:01,149
This is written as follows:

125
00:07:01,149 --> 00:07:04,080
As long as (a "while loop")

126
00:07:04,080 --> 00:07:07,990
the square, that is "grille[ligne]",

127
00:07:07,990 --> 00:07:09,579
indeed, for a given column,

128
00:07:09,579 --> 00:07:14,239
we are running through

129
00:07:15,149 --> 00:07:16,649
the different rows

130
00:07:16,649 --> 00:07:20,329
starting from the bottom and going up.

131
00:07:20,329 --> 00:07:24,778
A square of the grid is indeed

132
00:07:24,778 --> 00:07:30,111
the row index of "grille" which
we decided to call "ligne"

133
00:07:31,011 --> 00:07:33,434
and the "colonne" (TN: means "column") index.

134
00:07:33,434 --> 00:07:37,967
Thus, we are advancing row by row

135
00:07:38,407 --> 00:07:43,710
on the column which is the variable
received as parameter.

136
00:07:43,709 --> 00:07:46,818
As long the square with the indices "ligne"
and "colonne"

137
00:07:46,818 --> 00:07:49,319
(going up the lines

138
00:07:49,959 --> 00:07:51,839
of a given column),

139
00:07:51,839 --> 00:07:54,490
as long as this square is not "vide" (TN: means "empty")

140
00:07:54,490 --> 00:07:57,819
where "vide" is a previously
defined value,

141
00:07:57,819 --> 00:08:02,179
belonging to the "Couleur" type.

142
00:08:02,178 --> 00:08:05,459
As long as the square of the indices
"ligne" and "colonne" is not "vide";

143
00:08:05,459 --> 00:08:07,630
at this point, what should we do?

144
00:08:07,630 --> 00:08:10,601
Well, we go up one line,

145
00:08:10,601 --> 00:08:13,770
subtracting 1 from "ligne".

146
00:08:13,770 --> 00:08:18,088
Indeed, the grid, the array,
is numbered

147
00:08:18,088 --> 00:08:21,688
from 0 to "size - 1".

148
00:08:21,688 --> 00:08:24,348
Since we are following this direction,

149
00:08:24,348 --> 00:08:29,839
we must decrement 1 from
line to line.

150
00:08:30,779 --> 00:08:33,372
Voilà! At this point, we have found the

151
00:08:33,372 --> 00:08:35,925
first empty square in
our column.

152
00:08:35,925 --> 00:08:38,500
Now, we simplty need to fill
this square. Thanks to a comment,

153
00:08:38,500 --> 00:08:40,390
we clarify the process.

154
00:08:40,390 --> 00:08:42,620
We will fill the obtained square.

155
00:08:43,980 --> 00:08:48,770
This is written like this : "grille[ligne] [colonne]"
(the square of indices "line" and "colonne")

156
00:08:48,770 --> 00:08:50,740
"= the color", received
as parameter, we wish to store

157
00:08:50,740 --> 00:08:54,390
insidie this square.

158
00:08:55,179 --> 00:08:58,209
This concludes our "joue" function.

159
00:08:58,210 --> 00:09:01,570
Now, as good programmers, we will
test our function.

160
00:09:01,570 --> 00:09:04,599
We are doing just that, writing
the following "main".

161
00:09:04,599 --> 00:09:07,148
We start, of course, by declaring
a game, a grid.

162
00:09:07,148 --> 00:09:10,775
We then initialize and print
this grid here,

163
00:09:10,775 --> 00:09:14,002
just as we had done in the
previous episode.

164
00:09:14,002 --> 00:09:19,079
Now we can test our "joue" function
on our grid, column 3,

165
00:09:19,079 --> 00:09:23,359
color rouge (TN: means "red").
This should correspond,

166
00:09:23,359 --> 00:09:28,279
upon the printing of the grid,
to a red disk at this position.

167
00:09:28,959 --> 00:09:32,702
Then, we will test dropping
a yellow disk down the column 2.

168
00:09:32,702 --> 00:09:35,945
We can then reprint the grid.
This should correspond to this

169
00:09:35,945 --> 00:09:40,580
printing: a yellow disk here.

170
00:09:40,580 --> 00:09:45,098
Now, we go for a third and final test
where we print the grid.

171
00:09:45,098 --> 00:09:49,359
Feel free to unfold and compile
this program yourselves.

172
00:09:49,359 --> 00:09:52,028
This should correspond to
the printing

173
00:09:52,028 --> 00:09:54,775
corresponding to two red disks
in the column 3

174
00:09:54,775 --> 00:09:57,192
and one yellow disk in the
 column 2.

175
00:09:57,962 --> 00:10:02,009
But is our program correct?
Have we considered all the tests?

176
00:10:02,009 --> 00:10:04,209
Let us reexamine our code

177
00:10:04,209 --> 00:10:07,850
and imagine that a player decides to
play all the time in the same column.

178
00:10:07,850 --> 00:10:11,219
Both players will always drop their
disks in the same column.

179
00:10:11,219 --> 00:10:12,742
What will happen?

180
00:10:12,742 --> 00:10:15,005
Here, in order to simplify,

181
00:10:15,005 --> 00:10:16,949
we will always use the
same color.

182
00:10:16,948 --> 00:10:20,738
We will start by putting a disk here,
another here,

183
00:10:20,739 --> 00:10:23,080
another here and so on.

184
00:10:23,080 --> 00:10:25,330
Eventually, we will put a disk here.

185
00:10:25,330 --> 00:10:27,250
Now let us suppose we ask
to drop another disk

186
00:10:27,250 --> 00:10:32,413
down column 3.

187
00:10:32,523 --> 00:10:36,528
What will happen? We will start
from the lower row

188
00:10:36,528 --> 00:10:40,975
and, until we encounter an empty
square, execute the instruction "ligne --".

189
00:10:40,975 --> 00:10:44,342
Here, we will thus go
up our row until here.

190
00:10:44,902 --> 00:10:48,440
Now we reach the row index 0

191
00:10:48,440 --> 00:10:52,550
but we still have not encountered
any empty square. What should we do?

192
00:10:52,549 --> 00:10:55,859
We execute here the instruction "ligne--".
The question is:

193
00:10:55,860 --> 00:10:57,390
What happens now?

194
00:10:57,390 --> 00:10:59,890
For now, it does not really matter;
whatever happens here

195
00:10:59,890 --> 00:11:02,730
is a conception error, an algorithm
error.

196
00:11:02,730 --> 00:11:04,100
What we need to do,

197
00:11:04,100 --> 00:11:09,650
is correct our algorithm. We will research
the fact that

198
00:11:09,650 --> 00:11:12,940
the case is indeed empty in the game
and that we have not exited.

199
00:11:12,940 --> 00:11:16,840
Therefore, we will introduce a
boolean indicating if yes or no,

200
00:11:16,840 --> 00:11:19,439
the column is empty.

201
00:11:19,439 --> 00:11:23,009
At the beginning, the column
is not empty;

202
00:11:23,009 --> 00:11:25,039
we will thus initialize our boolean
to "false".

203
00:11:25,979 --> 00:11:30,149
Therefore, during our process,

204
00:11:30,149 --> 00:11:33,065
we will verify if we have not
overflowed.

205
00:11:33,065 --> 00:11:38,411
So that, if we ever
reach the row 0, here,

206
00:11:38,411 --> 00:11:42,079
that means we have overflowed

207
00:11:42,079 --> 00:11:45,939
and that the array is full.

208
00:11:45,939 --> 00:11:49,340
So, we are testing "ligne == 0"

209
00:11:49,340 --> 00:11:53,360
If so, that means that our variable
"pleine" (TN: means "full"),

210
00:11:53,360 --> 00:11:56,370
which we have declared here,

211
00:11:56,370 --> 00:12:03,520
is true since we reached the row 0;
the column is thus full.

212
00:12:03,520 --> 00:12:06,606
Indeed, the row 0 of a column
is not empty

213
00:12:06,606 --> 00:12:08,762
if and only if the column is full.

214
00:12:08,762 --> 00:12:10,709
Else, at this point,

215
00:12:10,709 --> 00:12:14,799
we will keep going as we did
previously,

216
00:12:14,799 --> 00:12:17,600
subtracting 1 from the row at every iteration.

217
00:12:18,220 --> 00:12:21,120
Now, let us correct our loop so
that is stops

218
00:12:21,120 --> 00:12:22,698
as soon as the column is empty.

219
00:12:22,698 --> 00:12:26,978
Here, we had a "while loop" which means
"continue as long as".

220
00:12:26,978 --> 00:12:32,010
Thus, here, we kept going as long
as the column was not full.

221
00:12:32,010 --> 00:12:34,309
So, we will add "is not full",

222
00:12:34,309 --> 00:12:37,109
namely that the column is not full

223
00:12:37,109 --> 00:12:41,528
in addition to the prevous condition, namely 
that we did not encounter an empty square.

224
00:12:41,528 --> 00:12:44,238
This is written exactly like we had
done previously;

225
00:12:44,238 --> 00:12:47,039
we are not changing anything,
simply adding the condition

226
00:12:47,039 --> 00:12:49,969
that the column should not
be full.

227
00:12:49,969 --> 00:12:52,430
Here, we thus explain in a comment

228
00:12:52,429 --> 00:12:57,189
that we have either found an empty
square or that

229
00:12:57,189 --> 00:13:01,130
we will stop for having reached
the top of the column.

230
00:13:01,130 --> 00:13:04,720
Finally, we will correct the end
of our program.

231
00:13:04,720 --> 00:13:08,616
If, at this point, the column was
not full, then we will proceed

232
00:13:08,616 --> 00:13:11,672
like previously, filling the empty
square.

233
00:13:11,672 --> 00:13:16,729
We could also take the chance to
indicate a boolean return value,

234
00:13:16,729 --> 00:13:19,609
indicating if we have been
able to play.

235
00:13:19,609 --> 00:13:23,350
In this case, we have indeed been
able to drop the desired

236
00:13:23,350 --> 00:13:24,820
colored disk in the selected column.

237
00:13:24,820 --> 00:13:28,689
Therefore, we could, for example,
decide to return

238
00:13:28,689 --> 00:13:30,280
the value "true",

239
00:13:30,280 --> 00:13:34,400
meaning that we have been
able to play.

240
00:13:34,400 --> 00:13:37,640
On the other hand, if the column
was full,

241
00:13:37,640 --> 00:13:41,220
we will return the value "false".

242
00:13:41,700 --> 00:13:46,576
We thus take the chance to modify
the return type of our function,

243
00:13:46,576 --> 00:13:51,452
which now returns a boolean
value instead of nothing.

244
00:13:51,452 --> 00:13:55,571
In a comment, we explain that if the
column was not full,

245
00:13:55,571 --> 00:13:59,370
we have played and returned
the value "true".

246
00:13:59,370 --> 00:14:02,180
Otherwise, we have not been able to
play and have return the value "false".

247
00:14:03,440 --> 00:14:05,930
Since we have modified our "joue" function here,

248
00:14:05,930 --> 00:14:08,819
in order to correct a possible
mistake,

249
00:14:08,818 --> 00:14:11,638
it is important to test
this correction.

250
00:14:11,638 --> 00:14:14,899
Indeed, it is always important to
test your program regularly.

251
00:14:14,899 --> 00:14:17,930
Thus, we now write another
"main" here

252
00:14:17,930 --> 00:14:20,560
which will allows us to
test the exact same thing.

253
00:14:20,560 --> 00:14:24,579
We declare, initialize 
and print a grid.

254
00:14:24,579 --> 00:14:27,209
Here though, we will try to fill,
let us say,

255
00:14:27,209 --> 00:14:29,310
10 times the same column.

256
00:14:29,310 --> 00:14:34,086
To that end, we will again call
our brand new "joue" function,

257
00:14:34,086 --> 00:14:37,192
this time playing constantly in
the same column.

258
00:14:37,200 --> 00:14:40,999
This "joue" function now returns

259
00:14:40,999 --> 00:14:43,178
a boolean-type value.

260
00:14:43,178 --> 00:14:46,610
We declare here a bool-type
variable

261
00:14:46,610 --> 00:14:50,069
in order to retrieve the return value.

262
00:14:50,069 --> 00:14:53,518
In our loop, we will test
at every turn

263
00:14:53,518 --> 00:14:57,320
if the played move was valid
at this point.

264
00:14:57,320 --> 00:15:01,150
If it was not valid, we will print that
it was impossible to play on this column.

265
00:15:01,150 --> 00:15:06,800
Also, our loop will print the grid
at every iteration.

266
00:15:07,170 --> 00:15:09,089
What will happen in the "main"

267
00:15:09,089 --> 00:15:13,629
is that we will try to play 10 times
in the column 3.

268
00:15:13,629 --> 00:15:17,129
Thus, the first 6 moves will
occur without trouble.

269
00:15:17,129 --> 00:15:20,365
The first 6 moves will
be played here.

270
00:15:20,365 --> 00:15:22,959
Now, let us see what happens

271
00:15:22,959 --> 00:15:24,463
upon the 7th move.

272
00:15:24,463 --> 00:15:28,669
At this point, we will our function :
" joue(grille, 3 rouge) ",

273
00:15:28,669 --> 00:15:31,429
thus asking to drop a red disk
down the column 3.

274
00:15:31,429 --> 00:15:37,929
We will initialize "ligne" to the
soze of the grid minus 1

275
00:15:37,929 --> 00:15:41,800
and initialize the "pleine"
value to "false".

276
00:15:41,800 --> 00:15:45,799
Indeed, before the test, we suppose
that the column is not full,

277
00:15:45,799 --> 00:15:48,180
for it is precisely what we
wish to verify.

278
00:15:48,180 --> 00:15:54,398
Obviously here, the test is true and we
will check this part of the test.

279
00:15:54,398 --> 00:15:59,498
Here, the square on the row
"size - 1"

280
00:15:59,500 --> 00:16:02,229
and on the column 3, here

281
00:16:02,229 --> 00:16:04,620
is not empty; the test is correct.

282
00:16:04,620 --> 00:16:08,790
We are not in the case where
"ligne" is 0

283
00:16:10,090 --> 00:16:11,790
and will thus decrement the row.

284
00:16:11,789 --> 00:16:16,359
This condition will still be true
as long as the tested square is not empty.

285
00:16:16,359 --> 00:16:19,730
We will thus decrement, decrement,
decrement

286
00:16:19,730 --> 00:16:24,160
until we arrive here,
on the row 0.

287
00:16:24,160 --> 00:16:28,679
At this point, we will reach this
test phase.

288
00:16:28,679 --> 00:16:31,940
"pleine" is still false and
the square is not empty.

289
00:16:31,940 --> 00:16:35,010
We thus enter the loop once more

290
00:16:35,010 --> 00:16:39,330
except this time, "ligne" is 0.
Since "ligne" is 0,

291
00:16:39,330 --> 00:16:42,800
we will assing "true" to the
variable "pleine".

292
00:16:42,799 --> 00:16:47,689
Also, we will not execute the decrement 
statement, thus staying on the row 0.

293
00:16:47,689 --> 00:16:51,149
Therefore, we will loop one last
time inside our "while loop".

294
00:16:51,149 --> 00:16:54,669
This time, the condition "not pleine"
is false

295
00:16:54,669 --> 00:16:59,969
and we will therefore exit
the "while loop".

296
00:16:59,969 --> 00:17:01,990
We now reach this "if".

297
00:17:01,990 --> 00:17:03,939
This time, 

298
00:17:03,939 --> 00:17:07,449
the condition "not pleine"
is still false

299
00:17:07,449 --> 00:17:12,089
and we will enter the
"else" block.

300
00:17:12,098 --> 00:17:15,319
Ultimatley, we see that the
grid has not been modified

301
00:17:15,319 --> 00:17:18,858
and that we have return "false" here.

302
00:17:18,858 --> 00:17:22,878
Consequently, the first 6 valid
moves were correct

303
00:17:22,880 --> 00:17:25,269
and the loop in the "main"

304
00:17:25,269 --> 00:17:27,759
(the "for loop" here) has looped
6 times.

305
00:17:27,759 --> 00:17:32,619
However, upon the 7th move,
this "valide" has become "false"

306
00:17:32,619 --> 00:17:34,339
because of this returned "false".

307
00:17:34,339 --> 00:17:37,270
The 7th move is thus invalid

308
00:17:37,270 --> 00:17:41,319
and we will print "impossible d'ajouter un pion"
(TN: means "impossible do drop a disk").

309
00:17:42,169 --> 00:17:47,500
Since, in our testing "main", we did not
add any condition regarding

310
00:17:47,500 --> 00:17:49,529
the validity of the game,

311
00:17:49,529 --> 00:17:53,759
the "for loop" will be executed
10 times

312
00:17:53,759 --> 00:17:59,672
and the message regarding the impossibility
to play will be printed  4 times.

313
00:17:59,672 --> 00:18:02,035
That is it four this "joue" function,

314
00:18:02,035 --> 00:18:07,210
allowing us, given a grid, a column
number and a grid,

315
00:18:07,210 --> 00:18:12,060
to effectively play if the
position is valid

316
00:18:12,060 --> 00:18:14,330
and to indicate if the move was invalid.

317
00:18:14,330 --> 00:18:17,620
There several different ways to
write this function;

318
00:18:17,620 --> 00:18:21,559
those will be presented in the
next episode.
