1
00:00:05,755 --> 00:00:08,322
Let us keep on following the demanding path

2
00:00:08,322 --> 00:00:10,786
of the programming of our
Connect Four game.

3
00:00:10,786 --> 00:00:12,863
At this point, we know how

4
00:00:12,863 --> 00:00:14,504
to represent the game: the grid (type "Grille").

5
00:00:14,504 --> 00:00:16,624
We also know how to represent
the player's colors,

6
00:00:16,624 --> 00:00:19,912
initialize the game, and print it.

7
00:00:19,912 --> 00:00:22,429
Finally, we have coded a more
complex function

8
00:00:22,429 --> 00:00:24,522
 to drop a disk

9
00:00:24,522 --> 00:00:27,019
in the grid if the

10
00:00:27,019 --> 00:00:28,976
inidicated move is valid.

11
00:00:28,976 --> 00:00:30,323
However, right now,

12
00:00:30,323 --> 00:00:32,635
we are still not able to effectively
play.

13
00:00:32,635 --> 00:00:34,909
Let's try to play, then!

14
00:00:35,509 --> 00:00:37,960
To that end, we will try to write
a "main" method

15
00:00:37,960 --> 00:00:40,104
which will let us play.

16
00:00:40,104 --> 00:00:41,743
We start just like usual :

17
00:00:41,743 --> 00:00:43,746
" int main() " then the body of the
"main".

18
00:00:43,746 --> 00:00:46,172
Let us begin, of course, by
defining a game,

19
00:00:46,172 --> 00:00:48,382
that is, a "grille" (TN: means "grid"),

20
00:00:48,400 --> 00:00:50,318
which we will initialize.

21
00:00:50,318 --> 00:00:51,928
This is very usual.

22
00:00:51,928 --> 00:00:54,046
Also, at the beginning,
we will have to show it

23
00:00:54,046 --> 00:00:55,798
to the players, thus printing it.

24
00:00:55,798 --> 00:00:57,604
Now, what should we do?

25
00:00:57,604 --> 00:00:59,302
We need a player

26
00:00:59,302 --> 00:01:01,199
which will be represented by a color.

27
00:01:01,199 --> 00:01:04,280
Therefore, we will start by declaring
a "Couleur"-type variable;

28
00:01:04,280 --> 00:01:06,388
this will be the color of the current player.

29
00:01:06,388 --> 00:01:10,046
Now, let us initialize it, for example to,
"jaune" (TN: means "yellow").

30
00:01:10,526 --> 00:01:12,189
What should we do now?

31
00:01:12,189 --> 00:01:14,846
Well, we should of course strive
to run through the game,

32
00:01:14,846 --> 00:01:16,921
as long as we can play.

33
00:01:16,921 --> 00:01:18,553
We will thus need a loop.

34
00:01:18,553 --> 00:01:22,175
Should this be a "while loop" or
a "do while loop"?

35
00:01:22,175 --> 00:01:24,889
Will we start by testing
something?

36
00:01:24,889 --> 00:01:27,225
Or will we start by playing?

37
00:01:27,225 --> 00:01:29,008
Here, all the conditions are fulfilled,

38
00:01:29,008 --> 00:01:31,623
the game is initialized, we have a player:

39
00:01:31,623 --> 00:01:33,583
we can start playing right away.

40
00:01:33,583 --> 00:01:35,630
Therefore, we resort to a "do while loop".

41
00:01:35,630 --> 00:01:37,035
Here, we thus write "do".

42
00:01:37,035 --> 00:01:39,184
Now, what will we do exactly
inside this loop?

43
00:01:39,184 --> 00:01:40,886
The first thing is, of course,

44
00:01:40,886 --> 00:01:44,323
to ask the player to inidicate
his move.

45
00:01:44,530 --> 00:01:47,088
So, let us start by printing a
message to the player

46
00:01:47,088 --> 00:01:49,929
to inform him that we
expect him to enter a move.

47
00:01:49,929 --> 00:01:52,805
In this message, we will also
indiciate the player's color.

48
00:01:52,805 --> 00:01:56,790
To that end, we should use a
"print_player" function,

49
00:01:56,790 --> 00:01:59,265
but, here we will write it directly

50
00:01:59,265 --> 00:02:01,832
to show right now how it looks like.

51
00:02:01,832 --> 00:02:06,808
Thus, if the color of the player is
yellow, we will print :

52
00:02:06,808 --> 00:02:09,594
"joueur jaune entre un coup"
(TN: "yellow player, enter a move")

53
00:02:09,594 --> 00:02:12,667
Otherwise, if the red player is at turn,

54
00:02:12,667 --> 00:02:15,747
we will print that the red player,


55
00:02:15,747 --> 00:02:17,347
that is, according to our convention, 'O',

56
00:02:17,347 --> 00:02:19,914
has to enter a move.

57
00:02:19,914 --> 00:02:21,815
They must thus enter a column number.

58
00:02:21,815 --> 00:02:24,930
Then we should, of course, read
their answer.

59
00:02:24,930 --> 00:02:28,224
To that end, we will declare
a "colonne" (TN: means "column") variable,

60
00:02:28,224 --> 00:02:30,664
a "size-t"-type variable,

61
00:02:30,664 --> 00:02:32,742
since we will use it
to index our grid.

62
00:02:32,742 --> 00:02:34,722
In this variable, we will retrieve

63
00:02:34,722 --> 00:02:37,710
the player's answer.

64
00:02:37,920 --> 00:02:41,269
By the way, we should not forget
that the players will play

65
00:02:41,269 --> 00:02:44,878
between 1 and 7. However,
in C++,

66
00:02:44,878 --> 00:02:48,505
the arrays are indexed
between 0 and 6.

67
00:02:48,505 --> 00:02:51,424
Therefore, it is absolutely
necessary to decrement,

68
00:02:51,424 --> 00:02:54,077
subtract 1 from the column.

69
00:02:54,885 --> 00:02:58,454
Now that we have a column number,
given by the player,

70
00:02:58,454 --> 00:03:01,706
we can play our move thanks to the
"joue" function,

71
00:03:01,706 --> 00:03:05,020
which we have developped
in the previous episodes.

72
00:03:05,028 --> 00:03:06,767
Thus, we declare a boolean
variable "valide"

73
00:03:06,767 --> 00:03:08,451
which will test the validity of the move.

74
00:03:08,451 --> 00:03:10,978
We will thus call the

75
00:03:10,978 --> 00:03:14,904
"joue" function here, in the
initialization of the boolean.

76
00:03:15,775 --> 00:03:18,823
Now, here a little comment
regarding this line.

77
00:03:18,823 --> 00:03:22,057
Here, we declare a bool-type variable

78
00:03:22,057 --> 00:03:24,362
"valide" initialized directly

79
00:03:24,362 --> 00:03:27,990
with the return value

80
00:03:27,990 --> 00:03:29,945
of the "joue" function call.

81
00:03:29,945 --> 00:03:31,347
By the way, please remember

82
00:03:31,347 --> 00:03:34,213
that we passed the grid, the column
we just declared here

83
00:03:34,213 --> 00:03:36,081
and the color of the current player
to the "joue" function.

84
00:03:36,081 --> 00:03:39,353
Thus, since this function is
testing if the move is valid,

85
00:03:39,353 --> 00:03:43,059
and that the result is stored
inside the variable "valide",

86
00:03:43,059 --> 00:03:45,035
we need to inform the
player

87
00:03:45,035 --> 00:03:46,962
if the move was not valid.

88
00:03:46,962 --> 00:03:48,989
Therefore, if "not valid",

89
00:03:48,989 --> 00:03:51,413
we will print a message,

90
00:03:51,413 --> 00:03:53,489
warning the player.

91
00:03:54,623 --> 00:03:59,086
Once the move has been played
or once the player has been

92
00:03:59,086 --> 00:04:01,402
warned that his move was
invalid, in both cases,

93
00:04:01,402 --> 00:04:03,230
we will print the game again.

94
00:04:03,230 --> 00:04:06,905
Therefore, the player will see
what is happening.

95
00:04:06,905 --> 00:04:09,190
Let us shift this all.

96
00:04:09,190 --> 00:04:12,007
Now, we can move to the
other player.

97
00:04:12,007 --> 00:04:13,405
Thus, simply,

98
00:04:13,405 --> 00:04:16,509
if the player's color is yellow,

99
00:04:16,509 --> 00:04:19,954
then the current player's color
will become red.

100
00:04:20,424 --> 00:04:22,304
Otherwise, that is, "else",

101
00:04:22,304 --> 00:04:26,076
the color of the current player will
become yellow.

102
00:04:26,076 --> 00:04:29,052
Here, out of this little portion
of code here,

103
00:04:29,052 --> 00:04:31,953
similarly to the previous
printing a little while ago,

104
00:04:31,953 --> 00:04:34,610
we should have made a function

105
00:04:34,610 --> 00:04:38,372
called, for example, "alternate_player".

106
00:04:38,372 --> 00:04:41,092
For this episode though, it is enough to
have it in the "main";

107
00:04:41,092 --> 00:04:43,146
we simply wanted to show you

108
00:04:43,146 --> 00:04:45,862
how to globally organize
the game.

109
00:04:45,862 --> 00:04:48,956
Now, at this point, we have
asked the player to enter a move,

110
00:04:48,956 --> 00:04:50,872
retrieved his answer

111
00:04:50,872 --> 00:04:53,493
and tested the validity of the move.
If the move was valid,

112
00:04:53,493 --> 00:04:57,167
we effectively dropped the disk
in the grid.

113
00:04:57,167 --> 00:04:59,620
If it wasn't valid, we 
warned the player.

114
00:04:59,620 --> 00:05:01,543
One way or the other, we printed the game

115
00:05:01,543 --> 00:05:04,246
and swapped the player's
colors.

116
00:05:04,246 --> 00:05:06,060
We have thus terminated a
game turn.

117
00:05:06,060 --> 00:05:09,606
We can thus finish our
"do while loop",

118
00:05:09,606 --> 00:05:13,140
making it possible to alternate
game turns.

119
00:05:13,147 --> 00:05:16,474
Now, the question is:
what test should we put here,

120
00:05:16,474 --> 00:05:20,869
for the game stopping condition?

121
00:05:20,869 --> 00:05:23,613
We will leave this aside for now

122
00:05:23,613 --> 00:05:26,699
since this will be the topic
of the next episode.

123
00:05:26,699 --> 00:05:29,984
For now, we will leave
this blank.

124
00:05:30,194 --> 00:05:32,471
Our version is now almost
complete.

125
00:05:32,471 --> 00:05:34,289
Only this test here is missing,

126
00:05:34,289 --> 00:05:37,362
finishing the almost complete
version of the game.

127
00:05:38,152 --> 00:05:41,180
At this point, we can criticize our
work a little bit

128
00:05:41,180 --> 00:05:43,177
and try to improve our code.

129
00:05:43,177 --> 00:05:45,288
The problem here, is that the "main"

130
00:05:45,288 --> 00:05:46,825
is way too big; it does not even fit

131
00:05:46,825 --> 00:05:48,547
on one slide!

132
00:05:48,547 --> 00:05:51,613
This proves that our "main" function
is way too big.

133
00:05:51,613 --> 00:05:53,800
We will thus need to
"modularize",

134
00:05:53,800 --> 00:05:56,677
try to split this big "main", into
smaller functions.

135
00:05:56,677 --> 00:05:58,393
Thus, we propose here

136
00:05:58,393 --> 00:06:02,624
to regroup all this
in a function.

137
00:06:02,624 --> 00:06:04,723
What does this portion
of code do?

138
00:06:04,723 --> 00:06:07,418
This is where we ask the
player

139
00:06:07,418 --> 00:06:09,991
to enter a move.

140
00:06:10,471 --> 00:06:12,718
We were testing the validity

141
00:06:12,718 --> 00:06:14,305
and playing this move.

142
00:06:14,305 --> 00:06:18,604
If the move was invalid, we
warned the player.

143
00:06:18,604 --> 00:06:21,360
This all corresponds indeed
to a functionality

144
00:06:21,360 --> 00:06:23,149
which can thus be grouped in a function.

145
00:06:23,149 --> 00:06:27,837
We will call it "demande_et_joue"
(TN: means "ask_and_play").

146
00:06:27,967 --> 00:06:30,767
This is a possible example
of modularization;

147
00:06:30,767 --> 00:06:32,807
there are many others.

148
00:06:32,807 --> 00:06:36,439
If you so desire, you may create
your very own modules(= functions).

149
00:06:36,439 --> 00:06:38,360
What matters is to
identify the key concepts

150
00:06:38,360 --> 00:06:40,217
and, mostly, to decompose

151
00:06:40,217 --> 00:06:43,652
in order to render our code
all the more modular,

152
00:06:43,652 --> 00:06:46,243
readable and maintainable

153
00:06:46,243 --> 00:06:48,318
in a independent way.

154
00:06:48,318 --> 00:06:50,981
Now, let us go back the function
methodology.

155
00:06:50,981 --> 00:06:54,197
If we have identified a portion
of code that is

156
00:06:54,197 --> 00:06:56,954
either repeated (never ever copy-paste!!)

157
00:06:56,954 --> 00:06:59,890
or important by itself,
which is the case here.

158
00:06:59,890 --> 00:07:02,680
We wish to make a function
out of this portion of code.

159
00:07:02,680 --> 00:07:05,354
What we start by doing is
simply to cut it.

160
00:07:05,354 --> 00:07:07,590
Voilà! We have suppressed
this portion of code.

161
00:07:07,590 --> 00:07:09,789
We then replace it

162
00:07:09,789 --> 00:07:13,626
by a call to our function
"demande_et_joue".

163
00:07:13,626 --> 00:07:15,067
So, what will this function
receive as parameters?

164
00:07:15,067 --> 00:07:16,457
Of course, the game
-- the grid --

165
00:07:16,457 --> 00:07:18,209
and the color of the current player.

166
00:07:18,229 --> 00:07:20,230
This should be enough
for our function.

167
00:07:20,460 --> 00:07:22,981
Now, let us move on to the
writing of this function.

168
00:07:22,981 --> 00:07:25,306
As a reminder, we added
here in a comment

169
00:07:25,306 --> 00:07:27,897
how to call this function.

170
00:07:27,897 --> 00:07:30,185
Thus, the function "demande_et_joue"

171
00:07:30,185 --> 00:07:33,092
is called directly; its return
type is

172
00:07:33,092 --> 00:07:34,861
thus "void".

173
00:07:34,861 --> 00:07:36,609
The function is called "demande_et_joue".


174
00:07:36,609 --> 00:07:38,797
As parameters, it will receive a grid,

175
00:07:38,797 --> 00:07:40,788
which we had defined with the
"Grille" type.

176
00:07:41,008 --> 00:07:42,692
Is the grid modified?

177
00:07:42,692 --> 00:07:45,490
Yes! "demande_et_joue" will let
us play in the grid;

178
00:07:45,490 --> 00:07:47,165
the grid is thus modified

179
00:07:47,165 --> 00:07:49,481
and will be passed by
reference.

180
00:07:49,921 --> 00:07:51,771
Then, we pass the player's
color.

181
00:07:51,771 --> 00:07:53,614
Is the player's color
modified?

182
00:07:53,614 --> 00:07:55,317
Obviously, the answer is no.

183
00:07:55,317 --> 00:07:57,697
Therefore, a passage by value is
enough here.

184
00:07:57,697 --> 00:08:02,156
Here is now the prototype
of our "demande_et_joue" function.

185
00:08:02,446 --> 00:08:04,925
We can now move on to its body.
This is simple;

186
00:08:04,925 --> 00:08:08,138
we simply need to paste the
portion of code

187
00:08:08,138 --> 00:08:10,657
we had suppressed from the "main".

188
00:08:10,657 --> 00:08:13,427
At this point, when you practice
this kind of exercise,

189
00:08:13,427 --> 00:08:16,012
it is a good idea to
reread your code in order

190
00:08:16,012 --> 00:08:18,110
to verify that you have not omitted
anything or made a mistake.

191
00:08:18,110 --> 00:08:21,361
Then, you should compile because
you could have erred in the names.

192
00:08:21,361 --> 00:08:23,771
For example, we could have called this
"couleur"

193
00:08:23,771 --> 00:08:26,553
instead of "couleur_joueur". Because of this
mistake,

194
00:08:26,553 --> 00:08:29,395
we would have triggered
a compiling error.

195
00:08:29,395 --> 00:08:32,342
Finally, we should test
our function.

196
00:08:32,784 --> 00:08:35,409
Let us keep modularizing

197
00:08:35,409 --> 00:08:38,762
and improve this portion
of code here.

198
00:08:38,775 --> 00:08:40,690
We have already mentioned,

199
00:08:40,690 --> 00:08:43,333
previously in this episode, that we
could make a function out of it.

200
00:08:43,333 --> 00:08:45,715
We would call it "affiche_joueur"
(TN: means "print_player").

201
00:08:45,715 --> 00:08:48,046
But here, even without
making a function out of it,

202
00:08:48,049 --> 00:08:50,530
we can still improve this code,

203
00:08:50,530 --> 00:08:53,660
regrouping the common parts.

204
00:08:53,660 --> 00:08:56,552
Do not ever resort to copy-
pasting. And there is copy-pasting here.

205
00:08:56,552 --> 00:08:59,587
Indeed, "joueur" (TN: means "player")
has been copied twice.

206
00:08:59,587 --> 00:09:02,718
Also, the message "entrez un numéro de colonne"
(TN: means "enter a column enter")

207
00:09:02,718 --> 00:09:04,895
has been repeated twice.

208
00:09:04,895 --> 00:09:08,182
Here, we can thus rearrange
our code a little,

209
00:09:08,182 --> 00:09:11,192
beginning by printing
the common part.

210
00:09:11,192 --> 00:09:13,550
Thus, we will print the message
"joueur".

211
00:09:13,550 --> 00:09:16,639
Here, we do not need the "endl"
since we will print

212
00:09:16,639 --> 00:09:18,893
either "X" or "O" just after

213
00:09:18,893 --> 00:09:21,823
and resume the "message";
there is thus no "endl".

214
00:09:21,826 --> 00:09:23,636
Then, we will keep the test

215
00:09:23,636 --> 00:09:25,671
that was there previously,
regarding the color.

216
00:09:25,671 --> 00:09:27,632
Thus, if the player's color
is yellow,

217
00:09:27,632 --> 00:09:30,252
we will print X". Otherwise,
we will print  "O".

218
00:09:31,632 --> 00:09:32,940
At this point,

219
00:09:32,940 --> 00:09:37,361
it is this part we can
modularize

220
00:09:37,362 --> 00:09:40,228
and turn it into a function :

221
00:09:40,228 --> 00:09:41,874
for example, "affiche_couleur"
(TN: means "print_color").

222
00:09:41,874 --> 00:09:43,611
This function will thus print

223
00:09:43,611 --> 00:09:46,407
'X' if the color received as
parameter is yellow

224
00:09:46,407 --> 00:09:49,159
and 'O' otherwise.

225
00:09:49,618 --> 00:09:52,789
Let us conclude our printing
of the common part

226
00:09:52,789 --> 00:09:55,094
following the printing
of the player's color.

227
00:09:55,094 --> 00:09:58,540
Namely, the message
"entrez un numéro de colonne"

228
00:09:58,540 --> 00:10:00,522
and, of course, the line break.

229
00:10:01,662 --> 00:10:06,226
Let us conclude by improving
another aspect, algorithmic, this time,

230
00:10:06,226 --> 00:10:08,336
of our "demande_et_joue" function.

231
00:10:08,336 --> 00:10:11,796
What will happen if a player
enters an invalid move?

232
00:10:11,796 --> 00:10:13,502
In the current version,

233
00:10:13,502 --> 00:10:15,692
we will simply print

234
00:10:15,692 --> 00:10:19,292
that the entered move is
invalid.

235
00:10:19,302 --> 00:10:21,122
Then, we will switch to
the other player.

236
00:10:21,122 --> 00:10:23,852
This does not, in fact,
correspond to the reality of the game.

237
00:10:23,852 --> 00:10:25,870
What should we do, then?

238
00:10:25,870 --> 00:10:28,224
Well, as long as the player
does not enter a valid move,

239
00:10:28,224 --> 00:10:29,883
we will not let him free;

240
00:10:29,883 --> 00:10:31,666
we will keep asking and asking.

241
00:10:31,666 --> 00:10:33,817
Therefore, we will once more resort to a 
"do-while loop",

242
00:10:33,817 --> 00:10:37,278
since we will start by asking the
player to enter a move,

243
00:10:37,278 --> 00:10:39,715
verify that the move is valid,

244
00:10:39,715 --> 00:10:43,878
and keep asking as long as the entered
move is invalid.

245
00:10:43,914 --> 00:10:45,619
We thus have a "do" loop

246
00:10:45,619 --> 00:10:50,898
on all the block asking the player
to enter a move.

247
00:10:50,916 --> 00:10:53,294
Then, we will verify if the move is valid

248
00:10:53,294 --> 00:10:56,326
and, finally, inform them if the move
was invalid.

249
00:10:56,326 --> 00:10:58,423
Therefore, we will move all this
block inside a "while".

250
00:10:58,423 --> 00:10:59,761
While what?

251
00:10:59,761 --> 00:11:03,986
While the move is not valid, that is,
"while not valide".

252
00:11:03,988 --> 00:11:08,237
However, this code will not compile.
Indeed, we use the "valide" variable here

253
00:11:08,253 --> 00:11:13,774
and the scope of "valide",

254
00:11:13,794 --> 00:11:17,400
which has been declared
here, is this block.

255
00:11:17,910 --> 00:11:22,685
Therefore, we have a utilization of
"valide" beyond its scope.

256
00:11:22,685 --> 00:11:24,139
Consequently, at this point,

257
00:11:24,139 --> 00:11:26,337
the compiler will produce an error.

258
00:11:26,337 --> 00:11:28,385
What we have to do is to pull

259
00:11:28,385 --> 00:11:32,600
the declaration of "valide"
outisde the loop.

260
00:11:32,926 --> 00:11:35,790
For example, we could put the
declaration up here,

261
00:11:35,790 --> 00:11:38,919
or just before the loop.

262
00:11:38,919 --> 00:11:40,923
Here, we thus declare "valide",

263
00:11:40,923 --> 00:11:45,729
which we could initialize
to "false".

264
00:11:45,815 --> 00:11:48,263
Of course, we should not keep

265
00:11:48,263 --> 00:11:53,550
this declaration here, for we would
then have two variables "valide".

266
00:11:53,550 --> 00:11:57,460
We would have this one here,
with a scope local

267
00:11:57,460 --> 00:12:00,330
to the block controlled by the
"while" instruction.

268
00:12:00,330 --> 00:12:05,225
And we would have another "valide" here,
with a scope local to the function body.

269
00:12:05,241 --> 00:12:07,328
Obviously, this would not
work,

270
00:12:07,328 --> 00:12:09,292
and we will thus change this

271
00:12:09,292 --> 00:12:13,868
declaration-initialization
to an assignment.

272
00:12:13,872 --> 00:12:16,362
This is it for our function
"demande_et_joue".

273
00:12:16,362 --> 00:12:18,088
A last comment though.

274
00:12:18,088 --> 00:12:20,165
We could obviously have put

275
00:12:20,165 --> 00:12:24,767
the printing of the question
inside the "do-while loop";

276
00:12:24,767 --> 00:12:27,632
this is a variant. Namely,

277
00:12:27,632 --> 00:12:32,568
after every valid move, we will print
which player is to play.

278
00:12:32,568 --> 00:12:34,782
In the previous version,

279
00:12:34,782 --> 00:12:37,688
we simply repeated the
entered answer.

280
00:12:38,474 --> 00:12:41,886
Let us conclude by a  last comment
regarding the "joue" function.

281
00:12:41,886 --> 00:12:44,398
This is related to a quiz of the
previous episodes.

282
00:12:44,398 --> 00:12:46,843
The problem with this "joue" function

283
00:12:46,843 --> 00:12:50,937
is that the column number is
never verified

284
00:12:50,937 --> 00:12:53,947
before we access the array here.

285
00:12:53,947 --> 00:12:57,057
It is not verified, neither in
the "joue" function here,

286
00:12:57,057 --> 00:12:59,977
nor in the function "demande_et_joue".

287
00:12:59,977 --> 00:13:02,197
Here, we simply trust

288
00:13:02,197 --> 00:13:05,937
the player and decrement 1 from
the entered column.

289
00:13:05,937 --> 00:13:08,627
However, we do not verify
if the player has entered, for example,

290
00:13:08,627 --> 00:13:10,987
100,000 as the column number.

291
00:13:10,987 --> 00:13:14,167
Now, we thus have to correct our
"joue" function,

292
00:13:14,187 --> 00:13:19,087
making sure that the access to the column
here is indeed valid.

293
00:13:19,087 --> 00:13:20,947
We start, as usual, by explaining it

294
00:13:20,947 --> 00:13:24,587
in a comment before coding it.

295
00:13:24,587 --> 00:13:28,437
So, if the "colonne" parameter

296
00:13:28,437 --> 00:13:30,665
is greater than the grid size,

297
00:13:30,665 --> 00:13:35,845
then the entered move is not valid
and we can return "false".

298
00:13:35,845 --> 00:13:38,355
We systematically need to check

299
00:13:38,355 --> 00:13:41,685
the access condition to
an array cell.

300
00:13:42,427 --> 00:13:44,507
This concludes this episode.

301
00:13:44,507 --> 00:13:47,347
Today, we have added 3 functionalities
to our program.

302
00:13:47,347 --> 00:13:50,697
We have asked the player to enter
a move.

303
00:13:50,707 --> 00:13:52,947
We have coded the main loop,

304
00:13:52,947 --> 00:13:55,277
making it possible to repeat the game.

305
00:13:55,277 --> 00:13:58,547
And we have alternated between
the two players.

306
00:13:58,547 --> 00:14:03,287
Now, we only need, in order to
exit the loop,

307
00:14:03,307 --> 00:14:06,257
to define the loop stopping
condition -- we left it blank here.

308
00:14:06,257 --> 00:14:08,637
This condition is either that

309
00:14:08,637 --> 00:14:10,777
the grid is full or that a player has won.

310
00:14:10,777 --> 00:14:13,727
This will be the subject of
the next episode.
