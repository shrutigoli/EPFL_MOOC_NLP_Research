1
00:00:05,330 --> 00:00:08,670
In this last lesson, we will see how to
approach much more

2
00:00:08,670 --> 00:00:11,778
ambitious projects than those we
have considered until now.

3
00:00:11,778 --> 00:00:13,329
Thus, we'll see how to split

4
00:00:13,329 --> 00:00:17,459
such a project into subproblems,
easier to solve,

5
00:00:17,459 --> 00:00:20,869
until we may write the
final program.

6
00:00:20,869 --> 00:00:23,029
In order to make our point clear,

7
00:00:23,030 --> 00:00:25,249
we have chosen a "Connect Four" game.

8
00:00:25,248 --> 00:00:28,439
You probably know the rules
of the Connect Four.

9
00:00:28,439 --> 00:00:30,219
This two-player game

10
00:00:30,219 --> 00:00:34,030
requires a 6 high, 7 wide grid.

11
00:00:34,030 --> 00:00:37,010
The players take turns,

12
00:00:37,009 --> 00:00:41,238
dropping disks of their own color
into the column of their choice.

13
00:00:41,238 --> 00:00:46,349
The game will keep going until a player
manages to connect 4 disks of his own color

14
00:00:46,349 --> 00:00:48,979
or until the grid is completely
filled.

15
00:00:49,770 --> 00:00:51,809
First of all, please note
that we are not

16
00:00:51,809 --> 00:00:53,788
going to develop a fancy
graphical interface.

17
00:00:53,789 --> 00:00:55,629
Here, we are interested

18
00:00:55,628 --> 00:00:59,119
in programming the game
mechanics

19
00:00:59,119 --> 00:01:03,449
and will thus merely print
the grid and the disks

20
00:01:03,450 --> 00:01:09,700
using characters. The end result will
look like this.

21
00:01:10,180 --> 00:01:12,649
In a general way,
how should we proceed

22
00:01:12,649 --> 00:01:16,459
when confronted with a substantial
problem such as this one?

23
00:01:16,459 --> 00:01:20,179
Above all, we should not try
to write the whole program in one go;

24
00:01:20,180 --> 00:01:21,790
it would just not work.

25
00:01:21,790 --> 00:01:25,940
We will have to split
the problem into subproblems.,

26
00:01:25,939 --> 00:01:28,399
writing the program step by step.

27
00:01:28,400 --> 00:01:32,650
At every step, we will test the
newly-written code

28
00:01:32,650 --> 00:01:35,140
in order to continue with solid bases.

29
00:01:35,750 --> 00:01:39,718
First of all, we will need to identify
the types necessary

30
00:01:39,718 --> 00:01:42,039
to the program to run, 
that is


31
00:01:42,039 --> 00:01:46,918
needed to represent the data
needed by the program.

32
00:01:47,299 --> 00:01:50,269
In the case of our example, we
will essentially need to

33
00:01:50,269 --> 00:01:52,450
represent the grid.

34
00:01:52,450 --> 00:01:56,940
Then, we will have to indentify
the functions related to these types,

35
00:01:56,959 --> 00:02:00,828
write these functions and test
them as we go.

36
00:02:00,828 --> 00:02:04,529
And, if we are confronted with
a particularly complicated function,

37
00:02:04,530 --> 00:02:06,390
we may introduce

38
00:02:06,390 --> 00:02:09,937
a subfunction for each
difficult point.

39
00:02:10,527 --> 00:02:13,248
As we said, we have to start
by indentifying the types.

40
00:02:13,248 --> 00:02:14,738
What does it mean, concretely?

41
00:02:14,739 --> 00:02:19,669
Well, we will start by identifying
the data required by the program

42
00:02:19,669 --> 00:02:22,649
and find a way to represent
these data.

43
00:02:22,649 --> 00:02:25,419
In this case, for our
Connect Four program,

44
00:02:25,419 --> 00:02:29,489
the main data is the grid and the
disks it contains.

45
00:02:29,500 --> 00:02:34,739
More exactly, we wish to know,
for every square, what this square contains:

46
00:02:34,739 --> 00:02:38,188
Is it a red risk,
a yellow disk

47
00:02:38,188 --> 00:02:39,968
or nothing at all?

48
00:02:40,669 --> 00:02:43,589
There are several possible ways
to represent the grid.

49
00:02:43,589 --> 00:02:47,209
A way to proceed is to see
the grid as

50
00:02:47,209 --> 00:02:49,869
made of rows

51
00:02:50,479 --> 00:02:52,709
where each element of a row

52
00:02:52,709 --> 00:02:55,378
corresponds to a square.

53
00:02:55,378 --> 00:02:57,738
Namely, we will
represent the lines

54
00:02:57,739 --> 00:02:59,269
as arrays.

55
00:02:59,269 --> 00:03:03,449
There are several possibilities
to represent arrays in C++

56
00:03:03,449 --> 00:03:06,979
We remind you that you can
either the use the "array" type,

57
00:03:06,979 --> 00:03:09,699
or the "vector" type.

58
00:03:10,299 --> 00:03:14,480
Here, since the number
of squares, or rather, the number

59
00:03:14,479 --> 00:03:17,778
of possible elements for each row
is known a priori,

60
00:03:17,778 --> 00:03:18,859
that is,

61
00:03:18,859 --> 00:03:22,389
we know that each row
will contain 7 elements,

62
00:03:22,390 --> 00:03:26,989
we will rather use the "array" type
to represent a row.

63
00:03:27,968 --> 00:03:33,028
In order to store all the rows, we
may use another array

64
00:03:33,329 --> 00:03:39,899
whose elements will contain the
rows of the grid.

65
00:03:39,908 --> 00:03:43,009
And, since the number of rows
is also known a priori

66
00:03:43,009 --> 00:03:45,108
(a Connect Four grid has always 6 rows)

67
00:03:45,108 --> 00:03:48,298
we will, once again, resort to
the "array" type.

68
00:03:49,498 --> 00:03:52,778
The type representing the Connect Four grid

69
00:03:52,778 --> 00:03:56,112
and its content is thus an array of arrays,

70
00:03:56,112 --> 00:03:57,566
or, more exactly,

71
00:03:57,566 --> 00:04:02,780
a 6 elements array, whose elements
are themselves 7 elements arrays,

72
00:04:02,780 --> 00:04:07,038
corresponsding to a row
of the grid.

73
00:04:07,038 --> 00:04:10,979
Now, we still need to define
the type of the elements of a row,

74
00:04:10,979 --> 00:04:14,750
that is, the type of what is
contained in a square of the grid.

75
00:04:14,759 --> 00:04:17,289
Before that though, please
note that,

76
00:04:17,290 --> 00:04:21,260
although we have decided to represent
the grid as a 6 rows array,

77
00:04:21,259 --> 00:04:25,490
we could have proceeded differently.
For exemple, we could have represented the grid

78
00:04:25,490 --> 00:04:28,009
as a 7 columns array.

79
00:04:28,009 --> 00:04:32,110
In general, there are several
ways to write

80
00:04:32,110 --> 00:04:34,969
a program tasked with
solving the same problem.

81
00:04:34,969 --> 00:04:36,800
Here, we will give you one solution

82
00:04:36,800 --> 00:04:38,870
of a Connect Four program;

83
00:04:38,870 --> 00:04:42,068
obviously there are many other
ways to produce the same result.

84
00:04:42,848 --> 00:04:47,479
Now, we will use the "typedef"
keyword in order to define a new type

85
00:04:48,620 --> 00:04:50,569
"Grille" (TN: "grille" means "grid") which
is an appropriately sized

86
00:04:50,569 --> 00:04:53,050
 array of arrays for a

87
00:04:53,050 --> 00:04:55,640
Connect Four grid.

88
00:04:55,649 --> 00:04:58,438
Thanks to this new type,

89
00:04:58,439 --> 00:05:00,769
we will be able to define variables

90
00:05:00,769 --> 00:05:03,528
which will be array
of arrays

91
00:05:03,528 --> 00:05:05,898
representing a Connect Four grid.

92
00:05:06,348 --> 00:05:08,430
The question now is:

93
00:05:08,430 --> 00:05:11,870
How will we represent the
elements of the grid?

94
00:05:11,870 --> 00:05:14,528
For example, we could
use the int type

95
00:05:15,288 --> 00:05:19,948
and come up with a convention that,
if an element contains the value 0,

96
00:05:19,959 --> 00:05:23,219
this element corresponds to
an empty square.

97
00:05:23,228 --> 00:05:24,818
If the element contains 1,

98
00:05:24,819 --> 00:05:28,389
it will correspond to a square
occupied by a red disk.

99
00:05:28,389 --> 00:05:31,949
And if it contains 2, it will correspond
to a square occupied by a yellow disk.

100
00:05:31,949 --> 00:05:34,580
Also, we could use


101
00:05:34,580 --> 00:05:36,180
a char-type

102
00:05:36,180 --> 00:05:38,400
and decide that, for example,

103
00:05:38,399 --> 00:05:41,850
a blank space corresponds
to an empty square;

104
00:05:41,850 --> 00:05:48,110
the character "O" corresponds
to a square occupied by a yellow disk;

105
00:05:48,110 --> 00:05:52,370
and the character "X" corresponds
to a square occupied a red disk.

106
00:05:52,370 --> 00:05:55,050
However, these two solutions
beget an incovenience:

107
00:05:55,050 --> 00:05:59,119
If, for example, we choose
the int type, nothing prevents

108
00:05:59,119 --> 00:06:02,869
an element of the grid to contain,
for example, the value 3.

109
00:06:02,869 --> 00:06:06,619
However, the value 3 does not correspond
to anything in our program.

110
00:06:06,619 --> 00:06:08,430
Even if we choose the char type,

111
00:06:08,430 --> 00:06:11,819
an element of the grid could
contain the character "z"

112
00:06:11,819 --> 00:06:15,470
which does not correspond to
anything in our game.

113
00:06:16,369 --> 00:06:21,319
In such a case, it's much better to define
a new type using the "enum" keyword,

114
00:06:21,319 --> 00:06:25,568
thus limiting the number of
possible values

115
00:06:25,569 --> 00:06:28,839
for the elements of
our grid.

116
00:06:29,189 --> 00:06:31,519
Indeed, in C++,

117
00:06:31,519 --> 00:06:36,189
we can give names to the entities of
an enumeration. An enumeration

118
00:06:36,189 --> 00:06:40,800
could, for example, be all the possible
colors for a disk


119
00:06:40,808 --> 00:06:44,208
or the list of a continent countries.

120
00:06:44,649 --> 00:06:48,088
This will be done thanks to
the "enum" keyword,

121
00:06:48,088 --> 00:06:50,540
respecting the following syntax.

122
00:06:50,540 --> 00:06:53,418
First comes the
keyword "enum"

123
00:06:53,418 --> 00:06:57,139
followed by the name we wish
to give to the enumeration,

124
00:06:57,139 --> 00:07:00,810
followed by, between braces,

125
00:07:00,810 --> 00:07:05,019
the list of the names for the
enumeration values,

126
00:07:05,198 --> 00:07:08,568
the names being separated
by commas.

127
00:07:08,569 --> 00:07:12,649
The instruction is concluded
by a semicolon.

128
00:07:12,658 --> 00:07:15,168
In our program, we will use

129
00:07:15,168 --> 00:07:18,049
the enumeration we define as follows:

130
00:07:18,050 --> 00:07:21,278
"enum" followed by the enumeration name.

131
00:07:21,278 --> 00:07:24,389
In our case, this enumeration will
be used to define

132
00:07:24,389 --> 00:07:27,229
the value of the elements of a grid.

133
00:07:27,228 --> 00:07:32,308
A good idea would be, for example, to call
this enumeration "couleur (TN: means "color")

134
00:07:32,308 --> 00:07:36,878
These elements will correspond to
an empty square,

135
00:07:36,879 --> 00:07:41,020
a square containing a red disk

136
00:07:41,019 --> 00:07:43,829
or a square containing
a yellow disk.

137
00:07:43,829 --> 00:07:47,819
Thus, for the names of the enumeration
entities, we will simply use

138
00:07:47,819 --> 00:07:51,339
"vide" (TN:"empty"), "rouge" (TN:"red)
and "jaune" (TN:"yellow").

139
00:07:51,959 --> 00:07:53,818
Once this enumeration has been defined,

140
00:07:53,818 --> 00:07:56,769
we can use it just like
any other type

141
00:07:56,769 --> 00:08:00,349
in order to declare variables.
This instruction, for example,

142
00:08:00,349 --> 00:08:04,729
will declare a
Couleur-type

143
00:08:04,728 --> 00:08:06,889
variable called "element"

144
00:08:06,889 --> 00:08:09,110
initialized to the value
"vide".

145
00:08:10,678 --> 00:08:13,269
We can then change the value
of this element

146
00:08:13,269 --> 00:08:15,959
thanks to an assignment.
In this assignment instruction,

147
00:08:15,959 --> 00:08:18,058
we are changing the value "vide"

148
00:08:18,059 --> 00:08:19,939
to the value "jaune".

149
00:08:19,939 --> 00:08:23,559
We may also test what the variable
"element" contains

150
00:08:23,559 --> 00:08:24,919
with such a condition:

151
00:08:24,918 --> 00:08:28,240
does the variable "element" contain
the value "rouge"?

152
00:08:28,240 --> 00:08:29,960
In this case, the test

153
00:08:29,959 --> 00:08:32,209
is obviously false.

154
00:08:33,149 --> 00:08:37,068
The types in our program will thus be
our new "Couleur" enumeration

155
00:08:37,070 --> 00:08:40,470
as well as the type "Grille"
which we can finally define

156
00:08:40,470 --> 00:08:42,000
like this.

157
00:08:42,460 --> 00:08:46,150
As you can see, we have here
used the type "Couleur"

158
00:08:46,149 --> 00:08:48,869
in order to define the element type.

159
00:08:49,549 --> 00:08:53,839
Now that our "Grille" type has
been defined we can use it

160
00:08:53,840 --> 00:08:55,100
to declare variables.

161
00:08:55,559 --> 00:08:57,299
Here, we declare a variable

162
00:08:57,299 --> 00:09:00,209
called "grille".

163
00:09:00,210 --> 00:09:02,410

This variable, an array,

164
00:09:02,410 --> 00:09:04,139
can then be modified

165
00:09:04,139 --> 00:09:06,789
through instructions such
as

166
00:09:06,789 --> 00:09:08,320
these ones.

167
00:09:08,990 --> 00:09:10,680
This instruction assigns
the value "jaune"

168
00:09:13,710 --> 00:09:15,750
to the index 3 element
of the index 2 row

169
00:09:18,250 --> 00:09:19,719
of our "grille" array.

170
00:09:20,299 --> 00:09:21,938
However, we must know what element

171
00:09:23,539 --> 00:09:26,240
of the grid we are referencing in
this assignment.

172
00:09:28,450 --> 00:09:29,820
For that, we must
make a choice.

173
00:09:32,539 --> 00:09:35,799
Does the index 0 row

174
00:09:35,799 --> 00:09:38,750
of our "grille" array correspond

175
00:09:38,750 --> 00:09:42,079
to the uppermost row of the true grid?

176
00:09:42,078 --> 00:09:45,179
Or does the index 0 row

177
00:09:45,179 --> 00:09:48,230
correspond to the lowermost row of the true grid?

178
00:09:48,230 --> 00:09:50,709
There is no unique correct way to 
make the decision;

179
00:09:50,709 --> 00:09:54,578
no way is strictly better
than the other.

180
00:09:54,578 --> 00:09:57,299
Therefore, we will arbitrarily
decide that, in our case,

181
00:09:58,649 --> 00:10:03,079
the 0 line corresponds

182
00:10:03,099 --> 00:10:06,710
to the uppermost line of the true grid.

183
00:10:06,710 --> 00:10:08,889
Now we can understand

184
00:10:08,889 --> 00:10:10,189
the result

185
00:10:10,190 --> 00:10:12,980
of this assignment
for our true grid.

186
00:10:12,980 --> 00:10:17,120
Considering the row 0, 1, 2

187
00:10:17,120 --> 00:10:20,700
and the index 3 element of this row.

188
00:10:20,700 --> 00:10:24,190
This element has the index 0,

189
00:10:24,190 --> 00:10:27,100
this one the index 1, 2 3.

190
00:10:27,510 --> 00:10:32,060
Therefore, our assignment will
modify the value of this element,

191
00:10:32,059 --> 00:10:34,619
giving it the value "jaune",

192
00:10:34,620 --> 00:10:38,679
meaning that this square
now contains a yellow disk.

193
00:10:39,179 --> 00:10:42,299
In the next video, we will discuss
how to write functions

194
00:10:42,299 --> 00:10:45,900
letting us initialize and print
the grid.
