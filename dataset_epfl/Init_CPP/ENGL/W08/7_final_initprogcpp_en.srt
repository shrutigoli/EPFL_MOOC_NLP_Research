1
00:00:05,197 --> 00:00:07,011
Right now, we are nearing the
conclusion of

2
00:00:07,011 --> 00:00:08,662
our Connect Four game.

3
00:00:08,662 --> 00:00:10,940
We have managed to let
both players play alternatively

4
00:00:10,940 --> 00:00:12,718
and to test if a player has won.

5
00:00:12,718 --> 00:00:15,598
Now, we still have to tweak
a little our main program

6
00:00:15,598 --> 00:00:18,358
in order to indicate to our
players who has won.

7
00:00:18,358 --> 00:00:20,783
Also, we will have to deal
with the draw situation.

8
00:00:20,783 --> 00:00:22,581
This will be the topic of this episode.

9
00:00:22,861 --> 00:00:26,415
As a reminder, our Connect Four
game is a struggle

10
00:00:26,415 --> 00:00:30,997
between two players : the player
'X', in charge of the yellow disks

11
00:00:31,867 --> 00:00:34,140
and the player 'O', in charge of the
red disks.

12
00:00:34,880 --> 00:00:36,715
These two players play alternatively.

13
00:00:36,915 --> 00:00:39,879
Thus, we have made sure that,
after every loop iteration,

14
00:00:39,879 --> 00:00:44,086
the current player's color will
alternate between red and yellow.

15
00:00:44,086 --> 00:00:47,120
Both players will keep playing
until one of them has won.

16
00:00:47,810 --> 00:00:50,358
We still need to tweak our
program a little bit.

17
00:00:50,358 --> 00:00:53,634
The first natural thing to do is,
once the loop has finished its execution

18
00:00:53,634 --> 00:00:55,833
-- which means that either one of
the two players has won --

19
00:00:55,833 --> 00:00:59,487
is to indeed signify who has
won the Connect Four game.

20
00:00:59,867 --> 00:01:02,353
Another thing to do is
to consider

21
00:01:02,353 --> 00:01:04,541
the situation where no
player has won.

22
00:01:04,541 --> 00:01:06,258
The draw situation is not yet
covered by our program;

23
00:01:06,258 --> 00:01:08,419
which does not correspond
to a realistic simulation.

24
00:01:08,419 --> 00:01:10,416
Let us now obviate these
two holes.

25
00:01:10,876 --> 00:01:12,036
Let us now begin by having

26
00:01:12,036 --> 00:01:14,194
our program indicate who
the winner is.

27
00:01:14,194 --> 00:01:17,165
Therefore, after the loop, we will have
to add a few instructions,

28
00:01:17,165 --> 00:01:20,956
testing the color of the
current player.

29
00:01:20,956 --> 00:01:23,287
If the color of the current player is
yellow, for example,

30
00:01:23,637 --> 00:01:26,933
we will print the the winner
is the red player.

31
00:01:26,933 --> 00:01:30,355
But, why the red player instead
of the yellow player?

32
00:01:30,355 --> 00:01:33,671
Well, remember:
at the end of the loop iteration,

33
00:01:33,671 --> 00:01:35,931
we switch the color of the current player.

34
00:01:35,931 --> 00:01:40,170
Therefore, if the current player's color
is the yellow color,

35
00:01:40,170 --> 00:01:43,352
that means the winner

36
00:01:44,392 --> 00:01:47,338
is the player with the other
color, that is, red.

37
00:01:47,338 --> 00:01:50,056
This means that the red player
has indeed  won the game

38
00:01:50,056 --> 00:01:52,103
when the current player was
the yellow player.

39
00:01:52,643 --> 00:01:54,945
This explains why,
in the case where the

40
00:01:54,945 --> 00:01:56,746
color of the current player
is yellow,

41
00:01:56,746 --> 00:01:59,059
the winner is indeed
the red player.

42
00:02:00,119 --> 00:02:04,985
We will cover the situation
where the yellow player has won similarly.

43
00:02:05,515 --> 00:02:08,802
We have thus covered the
two possible cases.

44
00:02:09,052 --> 00:02:13,921
Now, we will take the precaution to comment
this particular test

45
00:02:13,921 --> 00:02:15,491
indicating that we have first

46
00:02:15,491 --> 00:02:19,085
switched of the players' colors, which

47
00:02:19,085 --> 00:02:22,841
explains the conter-intuitive
nature of this test.

48
00:02:24,771 --> 00:02:27,449
Also, as we have said
at the beginning of this episode,

49
00:02:27,449 --> 00:02:28,930
there are situations

50
00:02:28,930 --> 00:02:30,870
where both players will be playing


51
00:02:30,870 --> 00:02:34,086
and eventually fill out the whole grid,
without anyone having won.

52
00:02:34,086 --> 00:02:36,490
This corresponds to the
draw situation.

53
00:02:36,490 --> 00:02:38,719
Consequently, we have to
deal with this situation aswell,

54
00:02:38,719 --> 00:02:42,699
thus exiting the loop if
one player has won or if

55
00:02:42,699 --> 00:02:44,385
the grid is full.

56
00:02:45,345 --> 00:02:47,312
We thus have to complete our code

57
00:02:47,312 --> 00:02:49,625
so that this case will be
covered aswell.

58
00:02:49,625 --> 00:02:52,916
If we do not, the program will behave
incorrectly

59
00:02:52,916 --> 00:02:56,850
and keep on looping even once
the grid has been filled,

60
00:02:56,850 --> 00:02:59,924
forever asking the same player to
indicate a column number where to play.

61
00:02:59,924 --> 00:03:01,646
This does not make sense
since the grid is full

62
00:03:01,646 --> 00:03:03,735
and it is not possible
to drop disks anymore.

63
00:03:03,735 --> 00:03:07,450
This corresponds to an erroneous
situation we have to correct.

64
00:03:07,620 --> 00:03:09,425
The modifications required

65
00:03:09,425 --> 00:03:11,549
in order to solve this problem
are rather natural.

66
00:03:11,549 --> 00:03:13,729
Thus, we have to signify that
we are iterating,

67
00:03:13,729 --> 00:03:17,362
looping, as long as we do not have
a winner

68
00:03:17,362 --> 00:03:21,496
-- this part is already covered -- and
as long as the grid is not full.


69
00:03:21,496 --> 00:03:24,643
This can be written this
way.

70
00:03:24,643 --> 00:03:28,181
We will be foresseing the existence
of a function called "plein" (TN: means "full")

71
00:03:28,361 --> 00:03:31,315
which will test if the
grid is full or not.

72
00:03:32,035 --> 00:03:34,717
This will also require a few
modifications

73
00:03:34,717 --> 00:03:36,210
after the execution of the loop.

74
00:03:36,210 --> 00:03:38,169
Indeed, at this point,

75
00:03:38,169 --> 00:03:40,991
once we have exited the loop, we will not be 
confronted with a unique situation anymore

76
00:03:40,991 --> 00:03:42,979
where, fatally, one player
has won.

77
00:03:42,979 --> 00:03:44,756
Now, there is another possibility aswell:

78
00:03:44,756 --> 00:03:47,058
a draw which we will have to
signal.

79
00:03:47,058 --> 00:03:51,100
Therefore, we will have to modify
our program so that

80
00:03:51,100 --> 00:03:54,761
if there is a winner, then we will

81
00:03:54,761 --> 00:03:57,946
find ourselves in the situation
where we will signify who has won.

82
00:03:57,946 --> 00:03:59,928
However, this will not always be the case;

83
00:03:59,928 --> 00:04:02,150
it is also possible not to
have any winner.

84
00:04:02,992 --> 00:04:06,325
In this second case, we will indicate
the game ended in a draw.

85
00:04:06,325 --> 00:04:08,841
Now, we have covered all the
possible situations.

86
00:04:09,421 --> 00:04:12,020
Let us now move on to the
coding of the "plein" function.

87
00:04:12,062 --> 00:04:15,614
Remember that our program will
ask the red and yellow player

88
00:04:15,614 --> 00:04:19,833
in what column they intend to drop
their disk.

89
00:04:19,833 --> 00:04:22,089
Let us suppose that it 
is the yellow player's turn.

90
00:04:22,089 --> 00:04:26,641
If, for example, they decide to
drop their disk down the first column,

91
00:04:26,641 --> 00:04:28,964
the filling will occur from bottom
to top.

92
00:04:28,964 --> 00:04:32,438
Namely, the disk will be
automatically placed

93
00:04:32,438 --> 00:04:36,205
on the first available square,
starting from the bottom.

94
00:04:36,995 --> 00:04:40,859
Therefore, in order to test
if the grid is full,

95
00:04:40,859 --> 00:04:44,588
we do not need to test
all the squares of the grid,

96
00:04:44,588 --> 00:04:47,134
testing if they are occupied
by a particular color.

97
00:04:47,134 --> 00:04:52,464
We simply need to test the squares
of the very first line.

98
00:04:52,464 --> 00:04:55,512
Indeed, in the case
where the grid is full,

99
00:04:55,512 --> 00:04:59,012
we will have filled all
the columns starting from the bottom.

100
00:05:00,652 --> 00:05:03,625
This means that all the squares
of the first row

101
00:05:03,625 --> 00:05:05,311
will also have been filled.

102
00:05:06,271 --> 00:05:08,856
Now, we should be able to
effectively code our "plein" function.

103
00:05:08,856 --> 00:05:12,096
Methodologically speaking, we have
briefly wondered,

104
00:05:12,096 --> 00:05:13,915
since it is a rather
simple function,

105
00:05:13,915 --> 00:05:17,173
about the "what":
what does the "plein" function do?

106
00:05:17,173 --> 00:05:22,888
In the main program, we have
planned for this function

107
00:05:22,888 --> 00:05:26,055
to take, as argument, the grid
and to test whether it is full or not.

108
00:05:26,055 --> 00:05:28,414
This corresponds naturally
to the following prototype:

109
00:05:28,414 --> 00:05:31,960
the function returns a boolean
indicating if the grid is full or not.

110
00:05:31,960 --> 00:05:35,061
The only parameter of the function
is a grid.

111
00:05:38,351 --> 00:05:39,625
In the previous episodes,

112
00:05:39,625 --> 00:05:42,673
we have seen that, for all the functions
having, as parameter,

113
00:05:42,673 --> 00:05:44,670
a rather voluminous object

114
00:05:44,670 --> 00:05:47,531
used only in reading, in consultation,

115
00:05:47,531 --> 00:05:48,829
which we did not want to modify,

116
00:05:48,829 --> 00:05:52,892
it was a good idea to resort to
passing by constant reference.

117
00:05:52,892 --> 00:05:55,546
We will do just that here.

118
00:05:55,546 --> 00:05:59,294
Here, the "plein" function aims only
to consult the content

119
00:05:59,294 --> 00:06:02,537
of certain squares of the grid
in order to know if they are filled or not.

120
00:06:02,537 --> 00:06:04,704
It thus does not aim to
modify the grid.

121
00:06:04,704 --> 00:06:07,066
This is precisely the reason
why are resorting to

122
00:06:07,066 --> 00:06:08,879
a passage by constant reference here.

123
00:06:09,709 --> 00:06:11,084
Let us now focus on the "how".

124
00:06:11,084 --> 00:06:14,377
How should effectively write the body
of this "pleine" function?

125
00:06:14,377 --> 00:06:18,104
We have already sketched the algorithm
on the previous slide.

126
00:06:18,884 --> 00:06:23,972
Namely, if we encounter an empty
square on the first row,

127
00:06:23,972 --> 00:06:27,036
we know that the grid is
not yet full.

128
00:06:27,036 --> 00:06:29,449
This is what we will
concretely code.

129
00:06:29,449 --> 00:06:34,460
We will iterate square by square

130
00:06:34,460 --> 00:06:36,528
on the first row, "grille[0]", and test the squares.

131
00:06:36,528 --> 00:06:41,512
If one or more squares are empty, then we know
that the grid is not full.

132
00:06:41,512 --> 00:06:43,367
Therefore, the "plein" function
will return "false".

133
00:06:43,367 --> 00:06:47,161
Otherwise, obviously, the
grid is full

134
00:06:47,161 --> 00:06:50,119
and we will thus return
the value "true",

135
00:06:50,119 --> 00:06:51,973
signifying that the grid is full.

136
00:06:51,973 --> 00:06:55,376
Now, we have finished coding
our little

137
00:06:55,376 --> 00:06:56,563
Connect Four application.

138
00:06:56,563 --> 00:06:59,576
The goal of this case study was to
show you how to tackle

139
00:06:59,576 --> 00:07:02,864
the programming of such an application
when we are programming begginers.

140
00:07:03,154 --> 00:07:04,925
Several key ideas are to be
remembered.

141
00:07:04,925 --> 00:07:07,593
First of all, always proceed
bottom-up.

142
00:07:07,593 --> 00:07:10,258
Start by identifying the
essential types,

143
00:07:10,258 --> 00:07:11,817
the fundamental functionalities

144
00:07:11,817 --> 00:07:13,010
before dealing with the details.

145
00:07:13,130 --> 00:07:15,504
Each fundamental function
can then, at its turn,

146
00:07:15,504 --> 00:07:18,279
be modularized, call other
functions or more details

147
00:07:18,279 --> 00:07:20,042
helping to fulfill the process.

148
00:07:20,912 --> 00:07:23,626
For each function, proceed
with methodology.

149
00:07:23,626 --> 00:07:25,295
Ask yourself "what",

150
00:07:25,295 --> 00:07:27,342
what is the role of the funciton
in your program?

151
00:07:27,342 --> 00:07:30,049
What informations does it need
in order to perform effectively?

152
00:07:30,049 --> 00:07:32,494
What will the function deliver
as return information?

153
00:07:32,494 --> 00:07:34,714
Then ask yourself "how"

154
00:07:34,714 --> 00:07:36,773
and consider the algorithm

155
00:07:36,773 --> 00:07:39,059
which will help to realize
the desired processing.

156
00:07:39,529 --> 00:07:42,249
Focus on the essential aspects

157
00:07:42,249 --> 00:07:45,344
before dealing with cosmetic
tweaking aspects.

158
00:07:45,344 --> 00:07:47,151
Finally, last essential point,

159
00:07:47,151 --> 00:07:49,994
be systematic when testing
the different functionalities

160
00:07:49,994 --> 00:07:54,428
as you are progressing in the development of the
application program.

161
00:07:54,428 --> 00:07:56,828
Voilà! These were some
of the key points

162
00:07:56,828 --> 00:07:59,869
we wished to illustrate through
this case study.

163
00:07:59,869 --> 00:08:02,787
We hope they will prove useful
to you once you will be facing yourselves

164
00:08:03,357 --> 00:08:05,535
the programming of such applications.
