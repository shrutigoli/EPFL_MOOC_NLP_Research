1
00:00:05,263 --> 00:00:07,999
Quand on a déclaré et initialisé 
un tableau dynamique,

2
00:00:07,999 --> 00:00:09,723
on va bien sûr vouloir l'utiliser.

3
00:00:09,723 --> 00:00:12,985
Pour cela, on va pouvoir utiliser 
soit globalement le tableau,

4
00:00:12,985 --> 00:00:14,922
soit, élément par élément.

5
00:00:14,922 --> 00:00:17,230
Pour utiliser un tableau globalement,
ce n'est pas très fréquent,

6
00:00:17,230 --> 00:00:19,227
mais ça peut quand même 
être utile de temps en temps,

7
00:00:19,227 --> 00:00:21,313
on va simplement affecter globalement,

8
00:00:21,313 --> 00:00:24,461
un tableau qui existe, 
qui existait déjà,

9
00:00:24,461 --> 00:00:26,322
au tableau que l'on veut manipuler.

10
00:00:26,322 --> 00:00:29,983
Donc ça va se faire simplement
avec la syntaxe usuelle égale (=).

11
00:00:29,983 --> 00:00:31,944
Le mieux est de prendre un exemple.

12
00:00:31,944 --> 00:00:34,469
Pour cela, on va donc avoir 
un tableau tab1,

13
00:00:34,469 --> 00:00:35,957
qu'on déclare au préalable,

14
00:00:35,957 --> 00:00:39,960
et qu'on initialise 
avec ici trois valeurs,

15
00:00:39,960 --> 00:00:41,912
c'est un tableau d'entiers.

16
00:00:41,912 --> 00:00:45,386
Donc ce tableau tab1,

17
00:00:45,386 --> 00:00:47,382
on va l'appeler tab1,

18
00:00:47,382 --> 00:00:49,332
va contenir au démarrage 
trois entiers,

19
00:00:49,332 --> 00:00:53,477
qui ont pour valeur, 1, 2, 3,
par cette initialisation ici.

20
00:00:53,477 --> 00:00:57,577
Puis on va ensuite déclarer ici 
un tableau dynamique tab2,

21
00:00:57,577 --> 00:00:59,225
qui est le tableau vide.

22
00:00:59,225 --> 00:01:02,736
La déclaration qu'on a faite ici,
comme elle n'a rien derrière,

23
00:01:02,736 --> 00:01:05,530
déclare un tableau initialisé à vide.

24
00:01:05,530 --> 00:01:07,179
C'est un tableau sans éléments.

25
00:01:07,179 --> 00:01:09,269
Puis on va faire différents traitements,

26
00:01:09,269 --> 00:01:11,184
et enfin, à un moment donné,

27
00:01:11,184 --> 00:01:15,133
on aura peut-être besoin 
de faire une copie de tab1 dans tab2,

28
00:01:15,133 --> 00:01:18,135
donc on va faire une copie 
de tab1 dans tab2,

29
00:01:18,135 --> 00:01:22,607
ce qui fait que maintenant, tab2 
va contenir les éléments 1, 2, 3.

30
00:01:22,607 --> 00:01:26,476
Encore une fois, ceci est une copie,
donc à partir de cette ligne là,

31
00:01:26,476 --> 00:01:30,060
tab1 et tab2 vont continuer à vivre
de façon séparée,

32
00:01:30,060 --> 00:01:34,396
si je modifie tab1, il n'y aura pas 
de modifications sur tab2.

33
00:01:34,396 --> 00:01:36,845
Si j'ai une modification qui arrive ici,

34
00:01:36,845 --> 00:01:39,056
il n'y a pas de modifications dans tab2.

35
00:01:39,056 --> 00:01:43,334
tab1 et tab2 sont bien deux tableaux 
complètement séparés.

36
00:01:43,334 --> 00:01:45,812
Voilà pour l'affectation
globale d'un tableau.

37
00:01:45,812 --> 00:01:49,822
Mais en général, on manipulera plutôt 
les tableaux élément par élément.

38
00:01:50,522 --> 00:01:52,658
Pour désigner un élément d'un tableau,

39
00:01:52,658 --> 00:01:55,025
on va utiliser la syntaxe suivante :

40
00:01:55,025 --> 00:01:59,845
le nom du tableau, 
suivi entre crochets ( [ ] ),

41
00:01:59,845 --> 00:02:03,379
de l'indice de l'élément 
dont on veut parler.

42
00:02:03,531 --> 00:02:06,262
Attention, les indices 
des éléments d'un tableau,

43
00:02:06,262 --> 00:02:10,715
sont compris entre zéro 
et la taille du tableau moins un,

44
00:02:10,715 --> 00:02:11,997
ils commencent à partir de zéro

45
00:02:11,997 --> 00:02:14,478
et vont jusqu'à la taille 
du tableau moins un.

46
00:02:14,478 --> 00:02:18,064
Si par exemple, j'ai un tableau
à cinq éléments,

47
00:02:18,064 --> 00:02:21,783
qui contient 4, 3,
2, 7, 1,

48
00:02:21,783 --> 00:02:25,743
l'élément 4 ici, 
pour accéder à cet élément,

49
00:02:25,743 --> 00:02:28,657
c'est l'élément qui a la position
zéro dans le tableau,

50
00:02:28,657 --> 00:02:34,987
si ce tableau s'appelle tab, 
ici j'ai tab[0],

51
00:02:34,987 --> 00:02:37,642
pour désigner ce 4.

52
00:02:37,642 --> 00:02:42,516
Ensuite j'ai tab[1], ici j'ai tab[2], 
tab[3], tab[4],

53
00:02:42,516 --> 00:02:46,392
la taille du tableau, 
ce tableau a une taille cinq.

54
00:02:46,392 --> 00:02:51,978
Le dernier élément du tableau, 
c'est tab[5 - 1], tab[4].

55
00:02:51,978 --> 00:02:58,141
Les indices vont bien entre zéro
et la taille du tableau moins un.

56
00:02:58,561 --> 00:03:02,939
Le premier élément du tableau 
est donc bien désigné par tab[0],

57
00:03:02,939 --> 00:03:08,105
et le dixième élément du tableau 
est bien désigné par tab[9],

58
00:03:08,105 --> 00:03:10,492
puisque on commence à zéro.

59
00:03:10,492 --> 00:03:14,300
Faites aussi très attention au fait 
qu'on ne contrôle absolument pas

60
00:03:14,300 --> 00:03:16,209
si vous débordez du tableau.

61
00:03:16,209 --> 00:03:20,882
Si par exemple, vous écrivez 
avec l'exemple précédent tab[10],

62
00:03:20,882 --> 00:03:25,349
personne ne vous dira que vous avez ici
dépassé la taille du tableau.

63
00:03:25,349 --> 00:03:27,821
Donc faites bien attention 
lorsque vous écrivez

64
00:03:27,821 --> 00:03:30,361
quelque chose comme tab[i],

65
00:03:30,361 --> 00:03:36,034
à être sûr que i est compris entre zéro 
et la taille du tableau moins un,

66
00:03:36,034 --> 00:03:38,895
ou strictement inférieur 
à la taille du tableau,

67
00:03:38,895 --> 00:03:41,980
sinon vous risquez 
d'avoir cette erreur fatale,

68
00:03:41,980 --> 00:03:43,874
qu'on appelle "segmentation fault",

69
00:03:43,874 --> 00:03:46,737
qui indique une erreur 
d'accès à la mémoire.

70
00:03:46,737 --> 00:03:49,618
Je dis, vous risquez de l'avoir, 
parce qu'il n'est même pas garanti

71
00:03:49,618 --> 00:03:54,267
que le segmentation fault se produise,
l'erreur est là, mais ce n'est pas sûr

72
00:03:54,267 --> 00:03:57,167
que le déroulement du programme
va la détecter.

73
00:03:57,167 --> 00:03:59,342
En tout cas, si la détection se produit,

74
00:03:59,342 --> 00:04:01,498
à ce moment là, vous aurez 
un segmentation fault,

75
00:04:01,498 --> 00:04:04,640
avec l'exemple typique ici, 
qu'on rencontre beaucoup

76
00:04:04,640 --> 00:04:06,543
dans des programmes 
de programmeurs débutants,

77
00:04:06,543 --> 00:04:08,365
qui est la suivante, c'est qu'on déclare

78
00:04:08,365 --> 00:04:13,791
un tableau de dynamique, de double,
que j'appelle v ici,

79
00:04:13,791 --> 00:04:16,034
qui est initialisé donc à vide,

80
00:04:16,034 --> 00:04:18,249
puisqu'il n'y a rien derrière 
la déclaration,

81
00:04:18,249 --> 00:04:20,175
donc on initialise un tableau vide,

82
00:04:20,175 --> 00:04:23,103
donc ce tableau est strictement vide, 
il n'y a rien dedans.

83
00:04:23,103 --> 00:04:25,381
C'est un tableau à zéro élément.

84
00:04:25,381 --> 00:04:30,474
Ensuite en général, le programmeur 
aura écrit un programme,

85
00:04:30,474 --> 00:04:35,662
il fait rarement l'erreur juste derrière,
mais l'erreur est quand même de ce type,

86
00:04:35,662 --> 00:04:40,581
ensuite il va écrire quelque chose
comme v[0] = avec une affectation,

87
00:04:40,581 --> 00:04:43,409
pour essayer de mettre 
5.4 dans le tableau,

88
00:04:43,409 --> 00:04:47,108
mais comme ce tableau est vide, 
on n'a même pas de v[0],

89
00:04:47,108 --> 00:04:50,019
v[0] n'existe pas dans un tableau vide,

90
00:04:50,019 --> 00:04:54,441
donc ici vous allez avoir 
un segmentation fault.

91
00:04:54,661 --> 00:04:57,328
Une façon fréquente d'accéder 
aux éléments d'un tableau,

92
00:04:57,328 --> 00:05:01,327
c'est de les parcourir tour à tour,
c'est-à-dire d'itérer sur le tableau.

93
00:05:01,327 --> 00:05:04,962
On a en fait en C++ trois façons 
d'itérer sur un tableau.

94
00:05:04,962 --> 00:05:07,451
Depuis la nouvelle norme C++ 2011,

95
00:05:07,451 --> 00:05:11,158
on a une façon qui permet d'itérer
sur l'ensemble des valeurs.

96
00:05:11,158 --> 00:05:13,413
Nous allons la détailler dans un instant.

97
00:05:13,413 --> 00:05:15,888
Vous pourriez aussi 
bien sûr avec l'itération

98
00:05:15,888 --> 00:05:18,400
que vous avez vue jusqu'à maintenant,
le for classique,

99
00:05:18,400 --> 00:05:22,680
itérer sur les différentes 
positions explicites du tableau,

100
00:05:22,680 --> 00:05:25,647
donc si j'appelle ces différentes 
positions tour à tour i,

101
00:05:25,647 --> 00:05:27,116
je vais faire une boucle en i,

102
00:05:27,116 --> 00:05:30,717
i au départ va démarrer
avec la position zéro,

103
00:05:30,717 --> 00:05:36,299
et va passer par exemple de un en un, 
jusqu'au dernier élément du tableau,

104
00:05:36,299 --> 00:05:39,008
le dernier élément, je vous rappelle, 
si t est la taille du tableau,

105
00:05:39,008 --> 00:05:42,130
le dernier élément est 
indexé par t - 1.

106
00:05:42,130 --> 00:05:43,779
Donc on va faire ici une boucle

107
00:05:43,779 --> 00:05:47,365
qui va de zéro jusqu'à strictement 
inférieur à la taille du tableau.

108
00:05:47,365 --> 00:05:49,961
La question, c'est comment on va 
représenter cette taille,

109
00:05:49,961 --> 00:05:51,816
comment on va savoir cette taille,

110
00:05:51,816 --> 00:05:54,037
je vous le détaillerai 
aussi dans un instant.

111
00:05:54,037 --> 00:05:56,912
Je vous dirai aussi ce que représente 
ce nouveau type size_t.

112
00:05:56,912 --> 00:05:59,342
Troisième façon enfin, 
beaucoup plus avancée,

113
00:05:59,342 --> 00:06:01,268
qui ne sera pas présentée dans ce cours,

114
00:06:01,268 --> 00:06:03,864
c'est d'utiliser ce qu'on appelle
des itérateurs.

115
00:06:03,864 --> 00:06:06,739
Une fois que vous voulez 
itérer sur un tableau,

116
00:06:06,739 --> 00:06:08,536
la question que vous pouvez vous poser,

117
00:06:08,536 --> 00:06:11,226
c'est laquelle des deux façons 
précédentes choisir.

118
00:06:11,736 --> 00:06:14,150
Dans la plupart des cas, 
je vous conseille de choisir

119
00:06:14,150 --> 00:06:20,015
la première façon de procéder, 
d'utiliser les itérations C++ 2011,

120
00:06:20,015 --> 00:06:21,815
que nous allons maintenant détailler.

121
00:06:21,815 --> 00:06:23,706
Si vous ne pouvez pas, 
alors à ce moment là,

122
00:06:23,706 --> 00:06:26,255
vous utilisez une itération classique.

123
00:06:26,255 --> 00:06:30,405
Passons donc aux itérations introduites 
depuis la nouvelle norme C++2011.

124
00:06:30,405 --> 00:06:33,684
Ces itérations utilisent aussi 
le mot clé for,

125
00:06:33,684 --> 00:06:36,115
ainsi que la parenthèse ronde ().

126
00:06:36,115 --> 00:06:37,794
Mais entre parenthèses rondes,

127
00:06:37,794 --> 00:06:40,691
nous allons cette fois-ci utiliser 
le séparateur deux points (:)

128
00:06:40,691 --> 00:06:43,283
au lieu du point virgule, 
et nous allons trouver deux parties,

129
00:06:43,283 --> 00:06:44,978
au lieu de trois parties.

130
00:06:44,978 --> 00:06:48,475
Devant le deux points, nous allons avoir
ici la déclaration de la variable

131
00:06:48,475 --> 00:06:51,150
que l'on veut utiliser 
pour parcourir le tableau,

132
00:06:51,150 --> 00:06:53,691
et derrière le deux points, 
simplement le nom du tableau

133
00:06:53,691 --> 00:06:55,273
que l'on veut parcourir.

134
00:06:55,273 --> 00:06:58,832
Si le parcours sur ce tableau 
doit modifier les éléments,

135
00:06:58,832 --> 00:07:03,007
alors il faudra rajouter 
entre le mot clé réservé ici,

136
00:07:03,007 --> 00:07:09,074
auto et le nom de la variable, 
rajouter le signe de modification,

137
00:07:09,074 --> 00:07:14,017
comme on utilisait pour indiquer
à une fonction f,

138
00:07:14,017 --> 00:07:16,324
que ses paramètres pouvaient être 
modifiés par la fonction.

139
00:07:16,324 --> 00:07:19,057
Je vous rappelle que si par exemple,
on a une fonction f,

140
00:07:19,057 --> 00:07:22,201
qui prend un paramètre x, 
que l'on veut modifier,

141
00:07:22,201 --> 00:07:25,937
alors ce qu'il faut faire,
c'est le passer par référence,

142
00:07:25,937 --> 00:07:28,453
et donc on utilisait ici
le signe de référence

143
00:07:28,453 --> 00:07:30,586
pour indiquer un passage par référence.

144
00:07:30,586 --> 00:07:33,042
C'est exactement la même chose ici
dans cette boucle for,

145
00:07:33,042 --> 00:07:37,699
on va utiliser le signe de référence
pour dire que le tableau parcouru

146
00:07:37,699 --> 00:07:41,944
pourra être modifié au travers de
la variable utilisée pour le parcourir.

147
00:07:41,944 --> 00:07:44,095
Passons donc à un exemple.

148
00:07:44,095 --> 00:07:47,206
Supposons que l'on veuille manipuler
un tableau d'entiers,

149
00:07:47,206 --> 00:07:49,253
qu'on va appeler ages ici, au pluriel,

150
00:07:49,253 --> 00:07:52,157
qui est donc un tableau dynamique 
contenant des entiers,

151
00:07:52,157 --> 00:07:57,517
et qu'on initialise au départ avec
cinq entiers tous à la valeur nulle.

152
00:07:58,467 --> 00:08:01,075
Au départ, on va vouloir 
remplir ce tableau

153
00:08:01,075 --> 00:08:03,722
avec des valeurs demandées
à l'utilisateur.

154
00:08:03,722 --> 00:08:07,371
Pour cela on va parcourir le tableau
avec une boucle for.

155
00:08:07,371 --> 00:08:09,679
Mais comme on va modifier le tableau,

156
00:08:09,679 --> 00:08:12,571
il est important de parcourir 
la boucle for ici,

157
00:08:12,571 --> 00:08:16,865
avec le signe de modification,
avec une référence sur le tableau.

158
00:08:16,865 --> 00:08:18,917
La syntaxe est donc la suivante,

159
00:08:18,917 --> 00:08:22,868
on va avoir le mot clé for,
suivi de la parenthèse ronde,

160
00:08:22,868 --> 00:08:29,787
suivi donc du nom du tableau, ages,
qui est derrière le deux points,

161
00:08:29,787 --> 00:08:34,181
et devant nous allons retrouver ici auto,

162
00:08:34,181 --> 00:08:36,531
et le nom d'une variable, 
donc ici on déclare

163
00:08:36,531 --> 00:08:39,001
une nouvelle variable
age au singulier,

164
00:08:39,001 --> 00:08:41,310
qui va parcourir le tableau.

165
00:08:41,310 --> 00:08:46,838
Ensuite, dans le bloc associé au for,
il suffit d'utiliser cette variable age,

166
00:08:46,838 --> 00:08:50,724
c'est le nom qu'on a donné 
à la variable pour parcourir le tableau.

167
00:08:50,724 --> 00:08:53,996
Comme n'importe quelle variable,
elle va elle tour à tour,

168
00:08:53,996 --> 00:08:57,259
parcourir les différents 
éléments du tableau,

169
00:08:57,259 --> 00:09:02,486
elle va itérer sur les tableaux
étape par étape.

170
00:09:02,486 --> 00:09:06,774
Chacune des étapes va donc afficher
le message demandé,

171
00:09:06,774 --> 00:09:09,016
âge de l'employé suivant,
pour demander l'âge,

172
00:09:09,016 --> 00:09:14,210
et saisi dans cette variable age ici,
qui tour à tour,

173
00:09:14,210 --> 00:09:17,447
va donc passer sur les différents
éléments du tableau.

174
00:09:17,447 --> 00:09:19,809
Ce qui va se passer, 
c'est donc la première fois

175
00:09:19,809 --> 00:09:21,949
que la boucle va se produire,

176
00:09:21,949 --> 00:09:26,188
on va être avec age qui indique
la première case du tableau,

177
00:09:26,188 --> 00:09:28,245
on va demander l'âge.

178
00:09:28,245 --> 00:09:31,728
Supposons que l'utilisateur 
rentre un âge qui est cinq,

179
00:09:31,728 --> 00:09:36,286
à ce moment là, on mettra cinq
dans cette case du tableau.

180
00:09:36,286 --> 00:09:39,167
Puis on va refaire l'itération,

181
00:09:39,167 --> 00:09:41,998
c'est le rôle de 
la boucle for que d'itérer,

182
00:09:41,998 --> 00:09:46,884
et à ce moment là, age va passer 
sur la deuxième position du tableau.

183
00:09:46,884 --> 00:09:49,466
Supposons que là, 
l'utilisateur rentre sept,

184
00:09:49,466 --> 00:09:53,502
à ce moment on aura sept 
qui va se mettre ici,

185
00:09:53,502 --> 00:09:56,924
et ainsi de suite, jusqu'à ce que 
age ait parcouru tout le tableau,

186
00:09:56,924 --> 00:09:59,538
on pourra remplir tout le tableau.

187
00:09:59,538 --> 00:10:03,730
Ensuite on va pouvoir l'afficher
avec donc une autre itération,

188
00:10:03,730 --> 00:10:06,544
une boucle itérative, 
donc on commence ici

189
00:10:06,544 --> 00:10:10,857
par mettre un message pour dire
qu'on va afficher le tableau des âges,

190
00:10:10,857 --> 00:10:16,772
puis on va refaire une boucle itérative
avec donc le mot clé for,

191
00:10:16,772 --> 00:10:21,033
les parenthèses rondes, 
le deux points qui séparent d'un coté

192
00:10:21,033 --> 00:10:25,741
le nom du tableau, ages au pluriel, 
et puis de l'autre côté,

193
00:10:25,741 --> 00:10:29,050
une variable, que je peux 
ré-appeler age ici,

194
00:10:29,050 --> 00:10:31,728
c'est une autre variable, age,
elle a une autre portée,

195
00:10:31,728 --> 00:10:34,511
elle aura la portée de la boucle for ici,

196
00:10:34,511 --> 00:10:39,632
alors que la variable age précédente
avait la portée de ce premier for ici.

197
00:10:40,152 --> 00:10:44,306
Et on utilise cette variable age
pour parcourir le tableau,

198
00:10:44,306 --> 00:10:47,023
comme n'importe quelle variable,
simplement, ce qui va se produire,

199
00:10:47,023 --> 00:10:50,803
c'est que au début, 
cette variable age va indiquer

200
00:10:50,803 --> 00:10:53,983
le premier élément du tableau,
puis tour à tour,

201
00:10:53,983 --> 00:10:56,045
parcourra les différents 
éléments du tableau,

202
00:10:56,045 --> 00:10:59,050
donc on commencera par afficher ici cinq,

203
00:10:59,050 --> 00:11:02,391
puis on affichera ensuite sept...

204
00:11:02,391 --> 00:11:06,995
jusqu'à ce qu'on ait parcouru 
l'entièreté du tableau age.

205
00:11:08,025 --> 00:11:10,263
Cette façon d'écrire les boucles
est donc très pratique

206
00:11:10,263 --> 00:11:11,593
parce qu'elle est compacte,

207
00:11:11,593 --> 00:11:14,614
il suffit simplement d'écrire le mot clé
for pour dire que l'on veut itérer,

208
00:11:14,614 --> 00:11:17,181
de mettre le nom de la variable, 
deux points, le nom du tableau,

209
00:11:17,181 --> 00:11:19,021
comme on avait écrit précédemment,

210
00:11:19,021 --> 00:11:23,528
tout simplement écrire "for (auto", 
puis dire qu'on a une variable age

211
00:11:23,528 --> 00:11:25,896
qui parcoure le tableau des âges.

212
00:11:25,896 --> 00:11:28,267
Voilà rien de plus à écrire, 
donc c'est très compact.

213
00:11:28,267 --> 00:11:33,256
Cette façon d'itérer ne permet pas 
d'itérer sur plusieurs tableaux à la fois.

214
00:11:33,256 --> 00:11:37,641
En effet, on n'a ici qu'un seul tableau 
sur lequel on peut itérer,

215
00:11:38,181 --> 00:11:41,617
on ne pourrait donc pas par exemple, 
comparer des tableaux

216
00:11:41,617 --> 00:11:44,200
ou réinsérer un tableau dans un autre...

217
00:11:44,210 --> 00:11:46,984
On ne peut pas non plus accéder 
à plusieurs éléments,

218
00:11:46,984 --> 00:11:49,420
puisque à un seul moment, 
on a une seule variable

219
00:11:49,420 --> 00:11:51,362
qui indique une seule position.

220
00:11:51,362 --> 00:11:54,543
Donc on n'a pas moyen 
de décaler par exemple

221
00:11:54,543 --> 00:11:57,365
les éléments d'un tableau 
en prenant un élément

222
00:11:57,365 --> 00:11:59,898
et son élément suivant 
dans une même boucle.

223
00:11:59,898 --> 00:12:03,794
Enfin, on ne peut pas sauter
des éléments du tableau.

224
00:12:03,794 --> 00:12:06,496
Cette façon d'itérer passe tour à tour

225
00:12:06,496 --> 00:12:10,477
les différents éléments du tableau
les uns après les autres,

226
00:12:10,477 --> 00:12:14,610
on ne peut pas sauter 
par dessus un élément

227
00:12:14,610 --> 00:12:16,425
pour passer un élément suivant.

228
00:12:16,425 --> 00:12:18,676
Si l'on a donc besoin 
de l'un de ces trois cas,

229
00:12:18,676 --> 00:12:22,973
itérer sur plusieurs tableaux,
ou alors accéder à plusieurs éléments,

230
00:12:22,973 --> 00:12:25,593
ou sauter des éléments
dans les itérations,

231
00:12:25,593 --> 00:12:27,929
il va falloir utiliser
une autre boucle for,

232
00:12:27,929 --> 00:12:30,568
utiliser les boucles for 
que l'on avait vues dans le cours

233
00:12:30,568 --> 00:12:32,465
sur les structures de contrôle.

234
00:12:32,965 --> 00:12:35,590
Dans ce type d'itération for,
on va typiquement avoir besoin

235
00:12:35,590 --> 00:12:37,555
d'indiquer la taille du tableau,

236
00:12:37,555 --> 00:12:39,683
par exemple pour indiquer 
le dernier élément,

237
00:12:39,683 --> 00:12:41,794
qui a la position taille moins un.

238
00:12:41,794 --> 00:12:43,944
Donc comment indiquer 
la taille du tableau ?

239
00:12:43,944 --> 00:12:46,817
Pour ça, on va utiliser 
ce qu'on appelle une fonction spécifique,

240
00:12:46,817 --> 00:12:50,241
en langage orienté objet, 
on parlera de méthode,

241
00:12:50,241 --> 00:12:54,188
qui va pouvoir donner, 
renvoyer la taille du tableau.

242
00:12:54,188 --> 00:12:56,618
Une fonction spécifique, 
c'est simplement une fonction

243
00:12:56,618 --> 00:12:59,519
qui est associée à une variable,

244
00:12:59,519 --> 00:13:02,138
et que l'on utilise de la façon suivante,

245
00:13:02,858 --> 00:13:06,713
si j'ai une variable, (de type) tableau dynamique
qui s'appelle tab,

246
00:13:06,713 --> 00:13:11,329
pour connaître sa taille, 
je vais écrire tab.size(),

247
00:13:11,329 --> 00:13:16,088
c'est la fonction size() qui
s'applique à la variable tab,

248
00:13:16,088 --> 00:13:18,492
tab étant donc le nom du tableau.

249
00:13:18,852 --> 00:13:21,819
Le type de retour de 
cette fonction spécifique size(),

250
00:13:21,819 --> 00:13:24,399
est un nouveau type
que l'on appelle size_t,

251
00:13:24,399 --> 00:13:27,819
c'est juste un int particulier, 
qui a la propriété

252
00:13:27,819 --> 00:13:30,677
garantie par la norme, 
de toujours être positif.

253
00:13:30,677 --> 00:13:33,379
Comme la norme nous dit 
que le type de retour

254
00:13:33,379 --> 00:13:37,555
de la fonction spécifique size(),
des tableaux dynamiques est size_t,

255
00:13:37,555 --> 00:13:41,497
vous devez déclarer, 
lorsque vous utilisez des variables

256
00:13:41,497 --> 00:13:45,518
pour stocker une telle taille,
vous devez les déclarer de type size_t.

257
00:13:45,518 --> 00:13:48,089
On écrira donc par exemple 
avec un for classique,

258
00:13:48,089 --> 00:13:50,724
comme on l'a vu dans le cours
sur les structures de contrôle,

259
00:13:50,724 --> 00:13:53,203
en trois parties séparées 
par des points virgule,

260
00:13:53,203 --> 00:13:57,272
la déclaration d'une variable 
de type size_t,

261
00:13:57,272 --> 00:14:01,353
puisqu'on va y stocker la taille,
qu'on va ici appeler i,

262
00:14:01,353 --> 00:14:05,032
qui va itérer jusqu'à 
la taille du tableau,

263
00:14:05,032 --> 00:14:08,510
donc ici strictement inférieur 
à la taille du tableau,

264
00:14:08,510 --> 00:14:11,641
puisque les indexes doivent aller 
jusqu'à taille du tableau moins un,

265
00:14:11,641 --> 00:14:15,170
donc on va s'arrêter juste avant tab.size.

266
00:14:15,170 --> 00:14:19,297
Et enfin dans la partie itérative 
on va par exemple aller de un en un,

267
00:14:19,297 --> 00:14:22,800
donc si je prends l'exemple 
de tout à l'heure avec le tableau ages,

268
00:14:22,800 --> 00:14:26,143
initialisé à cinq entiers tous nuls,

269
00:14:26,143 --> 00:14:29,603
on va par exemple pour les saisir, 
avec une boucle classique,

270
00:14:29,603 --> 00:14:35,723
ici déclarer size_t i, 
qui est donc un entier de type positif,

271
00:14:35,723 --> 00:14:38,814
donc de type size_t, 
initialisé à zéro,

272
00:14:38,814 --> 00:14:42,412
c'est-à-dire qu'on va commencer
par le premier élément du tableau,

273
00:14:42,412 --> 00:14:47,188
dont l'indexe est zéro.
Ensuite, partie test de l'itération,
					
274()
00:14:47,188 --> 00:14:50,664
tant que i est strictement 
inférieur à ages.size(),

275
00:14:50,664 --> 00:14:53,557
puisque l'index du dernier élément ici,

276
00:14:53,557 --> 00:14:58,948
doit être la taille du tableau moins un,

277
00:14:58,948 --> 00:15:02,921
donc on va faire strictement
inférieur à ages.size(),

278
00:15:02,921 --> 00:15:05,957
par exemple, on va itérer de un en un.

279
00:15:06,937 --> 00:15:10,357
Et qu'est-ce que l'on va faire ?
On va demander, poser la question,

280
00:15:10,357 --> 00:15:14,681
(quel est)l'âge de l'employé. Ici les humains
comptant plutôt de un à n,

281
00:15:14,681 --> 00:15:18,978
plutôt que de zéro jusqu'à n moins un,
on va ici afficher i + 1,

282
00:15:18,978 --> 00:15:23,153
ce qui va donc afficher 1 en premier, 
puis 2 etc,

283
00:15:23,153 --> 00:15:26,051
jusqu'à n, si n est la taille du tableau,

284
00:15:26,051 --> 00:15:31,281
et on saisira donc l'élément 
à la position i du tableau age,

285
00:15:31,281 --> 00:15:35,222
avec la syntaxe que l'on a vue
sur les accès au tableau.

286
00:15:35,722 --> 00:15:38,156
Voilà, tout ceci fait peut-être
un peu beaucoup,

287
00:15:38,156 --> 00:15:41,217
la prochaine séquence vidéo
illustrera tous ces points

288
00:15:41,217 --> 00:15:42,758
sur des exemples typiques.
