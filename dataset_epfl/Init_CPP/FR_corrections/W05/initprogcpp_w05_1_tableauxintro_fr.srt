1
00:00:05,811 --> 00:00:08,085
Dans cette vidéo-ci, 
ainsi que dans les suivantes,

2
00:00:08,085 --> 00:00:10,049
nous allons moins nous
focaliser sur les traitements,

3
00:00:10,049 --> 00:00:12,997
mais plus nous focaliser
sur les données.

4
00:00:12,997 --> 00:00:15,216
Comme vous le savez 
dans un langage de programmation,

5
00:00:15,216 --> 00:00:18,437
les données sont représentées
par des variables.

6
00:00:18,437 --> 00:00:21,767
Et en C++, les variables sont typées.

7
00:00:21,767 --> 00:00:24,129
A ce stade du cours,
nous avons surtout présenté

8
00:00:24,129 --> 00:00:27,177
les types int, pour représenter
des nombres entiers,

9
00:00:27,177 --> 00:00:30,874
le type double, pour représenter
des grandeurs réelles,

10
00:00:31,234 --> 00:00:33,025
et nous avons aussi évoqué le type bool

11
00:00:33,025 --> 00:00:35,981
pour représenter des valeurs de vérité.

12
00:00:35,981 --> 00:00:41,162
Ces types, int, double, bool,
que l'on appelle les types élémentaires,

13
00:00:41,162 --> 00:00:43,608
servent à représenter 
des données simples du monde,

14
00:00:43,608 --> 00:00:46,789
comme des dimensions, des sommes, 
des expressions logiques.

15
00:00:46,789 --> 00:00:49,907
Mais comment faire pour des données 
plus complexes, plus structurées ?

16
00:00:49,907 --> 00:00:53,686
Comment représenter 
dans le programme qui gère

17
00:00:53,686 --> 00:00:55,488
le cours que vous êtes 
en train de regarder,

18
00:00:55,488 --> 00:00:58,246
les âges des différents étudiants?

19
00:00:58,756 --> 00:01:00,915
Un autre exemple, 
si on avait un programme

20
00:01:00,915 --> 00:01:04,054
qui doit gérer des statistiques 
sur la population,

21
00:01:04,054 --> 00:01:06,512
comment seraient représentées 
ces statistiques ?

22
00:01:06,512 --> 00:01:10,578
Comment seraient représentés
ce que l'on appelle donc des tableaux ?

23
00:01:10,878 --> 00:01:12,494
Ou dans le cas des statistiques,

24
00:01:12,494 --> 00:01:16,616
comment serait représentée 
une personne dans un tel tableau ?

25
00:01:16,616 --> 00:01:19,384
La réponse est la notion de 
structure de données.

26
00:01:19,384 --> 00:01:23,163
Comment d'ailleurs représenteriez-vous
simplement le nom d'une de ces personnes

27
00:01:23,163 --> 00:01:25,185
avec les types que l'on a vus
jusqu'à maintenant ?

28
00:01:25,185 --> 00:01:26,878
Vous ne sauriez pas le faire.

29
00:01:26,878 --> 00:01:30,263
Cette séquence vidéo va s'intéresser
aux tableaux.

30
00:01:30,263 --> 00:01:32,744
Nous verrons plus tard dans 
d'autres séquences vidéo,

31
00:01:32,744 --> 00:01:34,473
comment représenter
les chaînes de caractères,

32
00:01:34,473 --> 00:01:37,448
et puis comment
représenter des structures,

33
00:01:37,448 --> 00:01:40,293
comment représenter 
une ligne dans ce tableau.

34
00:01:40,293 --> 00:01:42,438
Mais commençons donc par les tableaux.

35
00:01:42,758 --> 00:01:45,496
Supposons que l'on veuille créer
un programme de jeu

36
00:01:45,496 --> 00:01:48,987
et que l'on ait à gérer
le score des joueurs,

37
00:01:48,987 --> 00:01:51,825
on voudrait par exemple, 
que pour les différents joueurs,

38
00:01:51,825 --> 00:01:53,323
on puisse afficher leur score,

39
00:01:53,323 --> 00:01:57,656
et puis par exemple, afficher 
l'écart de ces scores au score moyen.

40
00:01:57,656 --> 00:01:59,113
Comment procéderions-nous ?

41
00:01:59,113 --> 00:02:02,051
Commençons modestement 
par nous intéresser

42
00:02:02,051 --> 00:02:04,179
à un programme qui aurait deux joueurs.

43
00:02:04,179 --> 00:02:06,573
Donc ce que l'on ferait, bien sûr,
c'est que l'on introduirait

44
00:02:06,573 --> 00:02:09,660
une variable représentant le score
pour chacun des deux joueurs.

45
00:02:09,660 --> 00:02:13,100
Disons typiquement que
les scores sont ici des entiers,

46
00:02:13,100 --> 00:02:17,374
que l'on initialiserait 
avec une certaine fonction ici.

47
00:02:17,374 --> 00:02:22,216
Cette fonction calculerait le score
et le retournerait.

48
00:02:22,616 --> 00:02:26,004
On ferait le calcul du score comme ceci
pour le premier joueur.

49
00:02:26,004 --> 00:02:28,507
Le calcul du score pour le deuxième joueur

50
00:02:28,507 --> 00:02:31,213
se ferait de façon analogue
avec ses paramètres spécifiques.

51
00:02:31,213 --> 00:02:34,225
Et ensuite, comme on veut 
l'écart à la moyenne,

52
00:02:34,225 --> 00:02:38,989
on va calculer la moyenne des deux joueurs
en utilisant la fonction <i>moyenne</i>

53
00:02:38,989 --> 00:02:41,913
que l'on avait déjà illustrée 
dans des vidéos précédentes,

54
00:02:41,913 --> 00:02:45,272
qui prendrait en paramètre les scores
de nos deux joueurs.

55
00:02:45,272 --> 00:02:48,932
On stockerait le résultat dans une variable 
moyenne_joueurs de type entier.

56
00:02:48,932 --> 00:02:53,228
Et enfin, on pourrait afficher 
le tableau des scores,

57
00:02:53,228 --> 00:02:57,244
en affichant le premier score
et l'écart à la moyenne,

58
00:02:57,244 --> 00:03:01,466
et en affichant ensuite le deuxième score
et son écart à la moyenne.

59
00:03:01,946 --> 00:03:04,689
Deux joueurs, c'est déjà pas mal,
mais la question c'est,

60
00:03:04,689 --> 00:03:09,149
comment améliorer notre programme
pour passer à plusieurs joueurs ?

61
00:03:09,149 --> 00:03:12,286
Il suffirait pour cela simplement
d'utiliser plusieurs variables.

62
00:03:12,286 --> 00:03:14,577
Donc par exemple, 
si l'on voulait passer à cinq joueurs,

63
00:03:14,577 --> 00:03:20,307
on utiliserait alors typiquement
cinq scores, un pour chacun des joueurs,

64
00:03:20,307 --> 00:03:22,655
on calculerait le score 
de chacun des joueurs

65
00:03:22,655 --> 00:03:24,544
avec leurs différents paramètres.

66
00:03:24,544 --> 00:03:28,287
Puis on calculerait 
la moyenne de tous ces joueurs

67
00:03:28,287 --> 00:03:31,294
en ayant ici cette fois-ci 
changé la fonction moyenne

68
00:03:31,294 --> 00:03:35,614
et en passant les cinq scores
à notre nouvelle fonction moyenne,

69
00:03:35,614 --> 00:03:39,637
puis on écrirait comme ça
le tableau des scores.

70
00:03:39,637 --> 00:03:41,961
Ici, tout bon programmeur 
pense tout de suite

71
00:03:41,961 --> 00:03:43,838
naturellement à une boucle,

72
00:03:43,838 --> 00:03:47,175
et va donc modifier 
cette partie là du programme

73
00:03:47,175 --> 00:03:49,534
pour faire une boucle ici,

74
00:03:49,534 --> 00:03:52,716
qui va aller du premier joueur
au cinquième joueur,

75
00:03:52,716 --> 00:03:54,811
de un en un pour tous les joueurs,

76
00:03:54,811 --> 00:03:58,656
et qui va afficher le score
de chacun des joueurs,

77
00:03:58,656 --> 00:04:02,446
et l'écart à la moyenne 
pour chacun des joueurs.

78
00:04:02,856 --> 00:04:05,300
La question c'est comment 
le faire vraiment concrètement.

79
00:04:05,300 --> 00:04:09,363
Car déjà premièrement, 
l'écriture comme ceci, scorei,

80
00:04:09,363 --> 00:04:13,483
du programme précédent, n'est pas valable.

81
00:04:13,483 --> 00:04:16,308
scorei, c'est un nom de variable et i
ne peut pas prendre différentes valeurs,

82
00:04:16,308 --> 00:04:17,962
ce n'est pas score1, score2.

83
00:04:17,962 --> 00:04:20,609
Donc c'est quelque chose
qui ne fonctionne pas.

84
00:04:20,609 --> 00:04:24,457
Ensuite, comment faire
si on passait à 100, 1000 joueurs ?

85
00:04:24,457 --> 00:04:27,879
Ça deviendrait très vite fastidieux
d'écrire 100 variables,

86
00:04:27,879 --> 00:04:31,589
de modifier la fonction moyenne
pour prendre 100 paramètres,

87
00:04:31,589 --> 00:04:35,176
donc c'est simplement impossible
pour un programmeur normal.

88
00:04:35,176 --> 00:04:39,777
Enfin, comment faire même si le nombre 
de joueurs n'est pas connu au départ ?

89
00:04:39,777 --> 00:04:44,220
Vous ne sauriez pas si vous devez 
mettre cinq, deux, ou dix joueurs.

90
00:04:44,500 --> 00:04:46,795
La réponse à ces nouveaux
besoins est la même,

91
00:04:46,795 --> 00:04:49,948
c'est l'introduction d'un nouveau type,
d'un type tableau.

92
00:04:49,948 --> 00:04:52,748
Je vous montre, juste en guise 
de préambule la version

93
00:04:52,748 --> 00:04:55,929
avec un tableau du programme
du score des joueurs,

94
00:04:55,929 --> 00:04:58,132
mais bien sûr nous allons 
détailler tout ceci

95
00:04:58,132 --> 00:04:59,988
dans la suite de cette séquence vidéo.

96
00:04:59,988 --> 00:05:02,695
Donc, on déclarerait
un tableau de joueurs,

97
00:05:02,695 --> 00:05:04,568
ensuite on ferait ici une boucle,

98
00:05:04,568 --> 00:05:07,648
on retrouve cette notion de boucle
pour calculer le score

99
00:05:07,648 --> 00:05:09,609
de chacun des joueurs,

100
00:05:09,609 --> 00:05:11,602
puis on calculerait ici la moyenne,

101
00:05:11,602 --> 00:05:14,486
cette moyenne pourrait prendre 
un tableau de scores,

102
00:05:14,486 --> 00:05:17,747
et enfin on aurait donc
l'affichage du score final

103
00:05:17,747 --> 00:05:20,602
avec ici une boucle for
qui parcourrait le tableau.

104
00:05:20,602 --> 00:05:23,138
Voyons donc ces différents 
éléments un par un.

105
00:05:23,748 --> 00:05:26,354
Commençons par la notion 
même de tableau.

106
00:05:26,714 --> 00:05:30,087
Un tableau, c'est une collection,
un ensemble de valeurs

107
00:05:30,087 --> 00:05:33,865
qui ont toutes le même type.
On parle de collection homogène,

108
00:05:33,865 --> 00:05:35,946
pour dire que les données stockées ont 
toutes le même type.

109
00:05:35,946 --> 00:05:38,686
Par exemple, le tableau des scores 
qui nous intéressait précédemment,

110
00:05:38,686 --> 00:05:40,354
si je prenais ici le cas de quatre scores,

111
00:05:40,354 --> 00:05:43,726
ça serait un tableau 
qui contiendrait quatre entiers.

112
00:05:43,726 --> 00:05:45,767
J'ai décidé que mes scores 
étaient entiers.

113
00:05:45,767 --> 00:05:50,257
Donc le tableau en question 
a tous les éléments de même type, le type int.

114
00:05:50,257 --> 00:05:53,049
Quand est-ce qu'on utilisera un tableau 
dans un programme ?

115
00:05:53,049 --> 00:05:56,870
Justement, lorsque l'on a besoin d'utiliser
plusieurs variables de même type,

116
00:05:56,870 --> 00:06:01,132
comme par exemple les scores 
de notre exemple de jeu avec les joueurs.

117
00:06:01,462 --> 00:06:04,505
En C++, on peut faire des tableaux
de n'importe quel type,

118
00:06:04,505 --> 00:06:06,896
des tableaux d'entiers, 
des tableaux de double,

119
00:06:06,896 --> 00:06:10,134
on peut faire des tableaux 
de n'importe quel type à disposition,

120
00:06:10,134 --> 00:06:11,868
des tableaux de bool, et même,

121
00:06:11,868 --> 00:06:13,713
une fois qu'on aura 
ce nouveau type tableau,

122
00:06:13,713 --> 00:06:15,541
des tableaux de tableaux.

123
00:06:16,201 --> 00:06:19,439
Il existe de façon générale
quatre sortes de tableaux,

124
00:06:19,439 --> 00:06:21,019
en fonction de deux questions,

125
00:06:21,019 --> 00:06:24,169
est-ce qu'on connait 
avant d'utiliser le tableau,

126
00:06:24,169 --> 00:06:25,758
au moment où on écrit le programme,

127
00:06:25,758 --> 00:06:28,516
la taille du tableau à utiliser ?

128
00:06:28,516 --> 00:06:31,380
Et est-ce que cette taille,
une fois connue,

129
00:06:31,380 --> 00:06:33,825
peut varier ou est fixée ?

130
00:06:33,825 --> 00:06:36,523
Examinons les différents cas tour à tour.

131
00:06:36,523 --> 00:06:38,708
Commençons par le cas 
où la taille n'est pas connue

132
00:06:38,708 --> 00:06:40,394
au moment où j'écris le programme,

133
00:06:40,394 --> 00:06:44,085
et où la taille peut varier
lorsque le programme se déroule.

134
00:06:44,085 --> 00:06:47,551
C'est typiquement l'exemple
de l'ensemble des âges

135
00:06:47,551 --> 00:06:49,401
des étudiants qui suivent ce cours.

136
00:06:49,401 --> 00:06:51,719
Au début je n'ai aucune idée 
de combien d'étudiants

137
00:06:51,719 --> 00:06:53,607
vont être présents à ce cours ?

138
00:06:53,607 --> 00:06:56,166
Puis ensuite, à un moment donné
quand j'ai le tableau

139
00:06:56,166 --> 00:06:58,853
de tous les âges des étudiants à ce cours,

140
00:06:58,853 --> 00:07:01,757
on peut très bien avoir des étudiants
qui se réinscrivent,

141
00:07:01,757 --> 00:07:04,500
et donc rajouter des âges, 
ou malheureusement,

142
00:07:04,500 --> 00:07:06,830
on peut aussi avoir des étudiants 
qui quittent le cours,

143
00:07:06,830 --> 00:07:09,438
et donc avoir des âges qui disparaissent.

144
00:07:09,438 --> 00:07:12,729
Donc on a ici le cas 
où la taille peut varier,

145
00:07:12,729 --> 00:07:14,693
et elle n'est pas connue au préalable.

146
00:07:14,693 --> 00:07:17,374
Illustrons maintenant
l'extrême inverse,

147
00:07:17,374 --> 00:07:20,503
où on suppose que la taille 
est connue à priori,

148
00:07:20,503 --> 00:07:22,064
et qu'elle ne peut pas évoluer.

149
00:07:22,064 --> 00:07:26,494
Un exemple typique, si vous voulez faire
un programme d'algèbre linéaire,

150
00:07:26,494 --> 00:07:30,184
est celui des vecteurs en 2D.
Vous savez qu'un vecteur en 2D

151
00:07:30,184 --> 00:07:34,380
a deux coordonnés tout le temps,
et donc ce sera tout le temps un tableau

152
00:07:34,380 --> 00:07:38,111
avec deux nombres représentant 
les coordonnées x et y.

153
00:07:38,111 --> 00:07:40,744
La taille est connue, 
à priori elle vaut deux,

154
00:07:40,744 --> 00:07:44,077
et la taille ne changera pas,
elle vaudra toujours deux.

155
00:07:44,547 --> 00:07:47,038
Pour le cas où la taille 
n'est pas connue au départ,

156
00:07:47,038 --> 00:07:49,414
mais une fois fixée, 
la taille n'évolue pas,

157
00:07:49,414 --> 00:07:52,726
on pourrait prendre l'exemple d'un jeu,
avec un nombre fixé de joueurs.

158
00:07:52,726 --> 00:07:54,961
On ne connait pas au début 
combien on va avoir de joueurs,

159
00:07:54,961 --> 00:07:58,416
s'il y a trois personnes qui vont 
participer au jeu ou dix personnes,

160
00:07:58,416 --> 00:08:00,865
mais une fois que le nombre 
de joueurs est fixé,

161
00:08:00,865 --> 00:08:03,184
on n'a plus le droit 
de le varier.

162
00:08:03,184 --> 00:08:05,506
Donc ici la taille
n'est pas connue au départ,

163
00:08:05,506 --> 00:08:07,846
mais une fois qu'elle est connue,
à ce moment là,

164
00:08:07,846 --> 00:08:11,054
elle ne peut plus évoluer pendant 
que le programme se déroule.

165
00:08:11,414 --> 00:08:14,830
Enfin le dernier cas,
peut-être un peu plus rare,

166
00:08:14,830 --> 00:08:17,321
et plus difficile à illustrer,

167
00:08:17,321 --> 00:08:20,221
c'est le cas où on connait
effectivement la taille à priori,

168
00:08:20,221 --> 00:08:21,694
au moment où on écrit le programme,

169
00:08:21,694 --> 00:08:24,993
mais où cette taille peut 
quand même varier.

170
00:08:24,993 --> 00:08:27,590
Ce serait typiquement si 
on voulait faire un programme

171
00:08:27,590 --> 00:08:30,938
qui stocke des statistiques 
pour par exemple,

172
00:08:30,938 --> 00:08:33,517
le nombre de cantons dans un pays,
c'est quelque chose que l'on connait.

173
00:08:33,517 --> 00:08:35,819
Au départ on a 26 cantons, 
et puis peut-être un jour,

174
00:08:35,819 --> 00:08:38,865
il y a un canton de plus qui se créera,

175
00:08:38,865 --> 00:08:43,338
ou deux cantons vont fusionner, 
et donc le nombre diminuerait.

176
00:08:43,338 --> 00:08:46,035
C'est un cas un petit peu limite, 
et j'avoue que, effectivement,

177
00:08:46,035 --> 00:08:48,352
ce cas là est beaucoup plus rare.

178
00:08:48,732 --> 00:08:52,398
Deux remarques complémentaires,
pour conclure sur les tableaux.

179
00:08:52,398 --> 00:08:55,269
Remarquez d'abord que si on sait faire

180
00:08:55,269 --> 00:08:58,745
des tableaux à taille non fixée, 
et qui peut varier,

181
00:08:58,745 --> 00:09:01,933
alors on peut évidemment avec ces tableaux
faire tous les autres,

182
00:09:01,933 --> 00:09:03,682
ça c'est une première remarque.

183
00:09:03,872 --> 00:09:05,724
Et ensuite deuxième remarque,

184
00:09:05,724 --> 00:09:08,365
c'est que pratiquement 
aucun langage de programmation

185
00:09:08,365 --> 00:09:09,983
n'offre les quatre variantes de façon
explicite.

186
00:09:09,983 --> 00:09:13,590
D'ailleurs en C++, on n'a que deux types
de tableaux,

187
00:09:13,590 --> 00:09:17,122
on va avoir les tableaux dynamiques,
représentés par le type vector,

188
00:09:17,122 --> 00:09:20,541
et les tableaux statiques, 
ou de taille fixe,

189
00:09:20,541 --> 00:09:24,711
qui sont depuis C++ 2011,
représentés avec le type array,

190
00:09:24,711 --> 00:09:29,617
ou alors avec un ancien type 
qui est hérité de l'ancêtre du C++,

191
00:09:29,617 --> 00:09:32,301
qu'on appelle le C, 
donc les tableaux "à la C".
