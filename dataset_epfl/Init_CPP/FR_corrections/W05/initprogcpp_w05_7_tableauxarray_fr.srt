1
00:00:05,645 --> 00:00:07,570
Dans les séquences vidéos précédentes,

2
00:00:07,570 --> 00:00:10,030
nous nous sommes surtout intéressés
aux tableaux dynamiques.

3
00:00:10,030 --> 00:00:12,191
C'est-à-dire aux tableaux 
dont la taille peut changer

4
00:00:12,191 --> 00:00:14,185
lorsque le programme se déroule.

5
00:00:14,185 --> 00:00:18,709
Intéressons-nous ici aux tableaux 
dont la taille est connue à priori.

6
00:00:18,709 --> 00:00:21,884
C'est-à-dire est connue au moment
où on écrit le programme,

7
00:00:21,884 --> 00:00:25,708
et dont la taille ne peut pas 
varier lors de l'utilisation.

8
00:00:25,708 --> 00:00:29,554
Par exemple si l'on veut faire 
un programme de géométrie dans le plan

9
00:00:29,554 --> 00:00:31,700
avec des vecteurs en dimensions 2,

10
00:00:31,700 --> 00:00:35,491
on aura toujours un tableau 
qui contient les deux coordonnées.

11
00:00:35,491 --> 00:00:37,916
Ce chiffre est connu à l'avance : c'est 2.

12
00:00:38,046 --> 00:00:41,716
Il ne varie pas au fur et à mesure
que le programme évolue.

13
00:00:42,023 --> 00:00:45,281
Un autre exemple, c'est si vous voulez 
faire un programme de jeu d'échec,

14
00:00:45,281 --> 00:00:48,310
Vous savez au préalable, 
avant d'écrire le programme,

15
00:00:48,310 --> 00:00:49,772
qu'il y a par exemple deux joueurs.

16
00:00:49,772 --> 00:00:51,719
Et vous savez que ce nombre 
ne va pas changer.

17
00:00:51,719 --> 00:00:56,519
Vous savez aussi que le jeu d'échec, 
ça va toujours être 8 fois 8 cases.

18
00:00:56,519 --> 00:01:00,614
Vous connaissez ce nombre au préalable 
et ce nombre ne va pas changer.

19
00:01:00,614 --> 00:01:05,559
On est donc dans ce cas où la taille est
connue à priori et où elle n'évolue pas.

20
00:01:05,559 --> 00:01:07,521
Donc, dans cette partie là du tableau.

21
00:01:07,521 --> 00:01:14,634
Ce que l'on appelle des tableaux 
statiques ou des tableaux de taille fixe.

22
00:01:15,636 --> 00:01:19,009
Il existe en C++, 
depuis la nouvelle norme C++-2011

23
00:01:19,092 --> 00:01:21,813
deux types de tableaux de taille fixe.

24
00:01:22,103 --> 00:01:26,484
Les tableaux « array » introduits
avec cette nouvelle norme en C++-2011

25
00:01:26,484 --> 00:01:32,192
et depuis le début, les tableaux hérités
de l'ancêtre du C++, le langage C,

26
00:01:32,321 --> 00:01:34,055
qu'on appellera les « tableaux à la C ».

27
00:01:34,262 --> 00:01:36,350
Dans le cadre de cette vidéo, 
nous allons maintenant

28
00:01:36,350 --> 00:01:38,272
nous focaliser sur les « arrays ».

29
00:01:39,042 --> 00:01:42,255
Les « arrays » ont été introduits
dans la nouvelle norme C++-2011

30
00:01:42,255 --> 00:01:45,237
parce que les « tableaux à la C », 
ou « building arrays »,

31
00:01:45,237 --> 00:01:47,277
présentent un certain 
nombre d'inconvénients.

32
00:01:47,277 --> 00:01:50,015
Tout d'abord, ils sont systématiquement
passés par référence

33
00:01:50,015 --> 00:01:53,482
même si on ne met pas le petit signe
de passage par référence

34
00:01:53,482 --> 00:01:54,981
aux arguments de la fonction.

35
00:01:55,016 --> 00:01:57,347
Les « tableaux à la C » 
sont passés par référence.

36
00:01:57,731 --> 00:02:00,759
Ensuite, ils n'ont jamais 
connaissance de leur propre taille.

37
00:02:00,759 --> 00:02:03,193
Alors qu'avec les « arrays »
on a comme avec les « vectors »

38
00:02:03,193 --> 00:02:05,159
un moyen simple de connaître la taille.

39
00:02:05,159 --> 00:02:08,329
Ensuite, les « tableaux à la C » ne peuvent 
pas être manipulés globalement.

40
00:02:08,329 --> 00:02:11,233
Si j'ai un tableau « tab1 »
et un tableau « tab2 »

41
00:02:11,233 --> 00:02:15,807
je ne peux pas faire avec les « tableaux 
à la C » « tab1 » égal « tab2 »

42
00:02:16,257 --> 00:02:20,547
Ensuite, on ne peut pas retourner 
un « tableau à la C » d'une fonction.

43
00:02:20,547 --> 00:02:24,804
On ne peut pas avoir un type de retour 
de fonction qui est un « tableau à la C ».

44
00:02:24,804 --> 00:02:28,386
Et enfin, les « tableaux à la C » ont 
une syntaxe d'initialisation particulière

45
00:02:28,386 --> 00:02:30,494
pas aussi générale que, 
par exemple, les « vectors ».

46
00:02:31,024 --> 00:02:33,883
Bref, je pense que 
depuis la norme C++-2011,

47
00:02:33,883 --> 00:02:37,266
depuis les « arrays », les « tableaux 
à la C » n'ont aucun avantage.

48
00:02:37,266 --> 00:02:40,161
Ceci dit, ils étaient très répandus 
et je pense que par inertie,

49
00:02:40,161 --> 00:02:43,467
par habitude, 
ils vont être largement utilisés,

50
00:02:43,467 --> 00:02:45,593
Donc, pour ceux qui voudraient 
étudier ce sujet,

51
00:02:45,593 --> 00:02:49,050
nous mettrons une annexe 
sur les « tableaux à la C ».

52
00:02:49,050 --> 00:02:51,893
Passons maintenant aux « arrays » de C++-2011.

53
00:02:52,503 --> 00:02:54,533
Pour utiliser un tableau de taille fixe,

54
00:02:54,533 --> 00:02:57,839
un tableau dont on connaît la taille
au moment où on écrit le programme,

55
00:02:57,839 --> 00:03:01,996
et c'est vraiment ça qui va déterminer 
si vous utilisez un « array » ou un « vector »

56
00:03:01,996 --> 00:03:06,463
pour déclarer un tableau de taille fixe,
on va utiliser le type « array »

57
00:03:06,463 --> 00:03:09,066
il faut bien sûr faire 
commencer le programme

58
00:03:09,066 --> 00:03:11,890
avec la directive « #include<array> ».

59
00:03:11,890 --> 00:03:17,490
Ensuite, un tableau va se déclarer, 
donc avec le mot-clef « array »

60
00:03:17,490 --> 00:03:21,935
Puis on mettra derrière le type et la taille,

61
00:03:21,935 --> 00:03:23,707
qui justement est connue.

62
00:03:23,707 --> 00:03:26,606
C'est cette taille qui est 
nouvelle par rapport aux vecteurs.

63
00:03:26,606 --> 00:03:29,674
Elle est justement connue 
au moment où on écrit le programme.

64
00:03:29,674 --> 00:03:34,251
Puis on terminera, comme d'habitude, avec 
le nom que l'on veut donner au tableau.

65
00:03:34,941 --> 00:03:39,370
Donc par exemple, si je veux déclarer 
un tableau qui contient des « double »,

66
00:03:39,370 --> 00:03:44,615
un tableau de taille fixe 3, 
que je connais, qui contient des « double »,

67
00:03:44,615 --> 00:03:47,047
je vais donc écrire à ce moment là :

68
00:03:47,047 --> 00:03:53,535
array de double, virgule trois, 
puis ensuite mettre derrière le nom

69
00:03:53,535 --> 00:03:55,896
par exemple ici, « vecteur_3d ».

70
00:03:55,896 --> 00:04:00,932
J'aurai au préalable inclus au début 
de mon programme, la bibliothèque « array ».

71
00:04:00,932 --> 00:04:04,800
Avec cette déclaration, on a donc « array »
qui est un tableau de taille fixe.

72
00:04:04,800 --> 00:04:06,316
Ca ne pourra plus bouger.

73
00:04:06,316 --> 00:04:09,268
C'est exactement la taille 
qui est donnée au départ,

74
00:04:09,268 --> 00:04:12,105
qui va être la taille tout au long 
de l'exécution du programme.

75
00:04:12,105 --> 00:04:16,960
Et qui contient de la place 
pour stocker trois « double ».

76
00:04:18,120 --> 00:04:21,650
Un autre exemple, 
si on voulait déclarer les habitants

77
00:04:21,650 --> 00:04:24,866
d'un certain nombre de cantons 
que l'on connaît au préalable.

78
00:04:24,866 --> 00:04:28,441
On peut tout à fait déclarer comme ça, 
une expression constante,

79
00:04:28,441 --> 00:04:31,416
« const » ; le nombre de cantons

80
00:04:31,416 --> 00:04:34,023
de type « size_t »
puisque l'on sait que

81
00:04:34,023 --> 00:04:37,160
c'est une taille de tableau 
que l'on veut indiquer ici.

82
00:04:37,160 --> 00:04:39,897
Donc 
« nb_cantons », le nom de la variable.

83
00:04:39,905 --> 00:04:44,114
On peut l'initialiser ici, 
par exemple à 26.

84
00:04:44,261 --> 00:04:48,347
Ce qui nous permet donc ensuite, 
d'utiliser cette variable, ici,

85
00:04:48,347 --> 00:04:50,035
comme le nombre de cantons,

86
00:04:50,035 --> 00:04:54,415
dans le tableau dynamique ici, 
« array » de unsigned_int.

87
00:04:54,415 --> 00:04:56,310
Ce sont des entiers positifs.

88
00:04:56,310 --> 00:04:58,329
Le nombre d'habitants 
est un entier positif.

89
00:04:58,329 --> 00:05:00,715
Donc on indique le nom ici.

90
00:05:01,325 --> 00:05:06,336
Donc « habitant » sera un tableau 
qui contient, exactement,

91
00:05:06,336 --> 00:05:11,234
26 entiers non signés,
26 « unsigned int ».

92
00:05:11,744 --> 00:05:14,961
Nous venons de voir comment 
déclarer un tableau de taille fixe.

93
00:05:14,961 --> 00:05:18,562
On peut aussi bien sûr l'initialiser, 
c'est-à-dire lui donner des valeurs

94
00:05:18,562 --> 00:05:19,616
au moment où on le déclare.

95
00:05:19,616 --> 00:05:23,727
Avec une syntaxe usuelle, très similaire 
à celle rencontrée pour les vecteurs.

96
00:05:23,727 --> 00:05:27,232
Entre parenthèses rondes ici, 
la valeur pour un tableau

97
00:05:27,232 --> 00:05:29,670
c'est-à-dire un ensemble de valeurs,

98
00:05:29,670 --> 00:05:32,396
donc on n'oubliera pas 
de mettre les accolades

99
00:05:32,396 --> 00:05:35,903
pour un ensemble de valeurs qui indiquent
les valeurs initiales du tableau.

100
00:05:35,903 --> 00:05:38,227
Chacune étant séparée par une virgule.

101
00:05:38,557 --> 00:05:42,870
Par exemple, si je veux déclarer 
un tableau de cinq entiers

102
00:05:42,870 --> 00:05:45,722
un tableau statique, 
un tableau de taille fixe de cinq entiers,

103
00:05:45,722 --> 00:05:47,376
je vais déclarer ici « array ».

104
00:05:47,376 --> 00:05:50,084
Chacun des éléments sera de type entier.

105
00:05:50,084 --> 00:05:53,898
Puis je passe donc la taille qui est connue
au moment où j'écris le programme.

106
00:05:53,898 --> 00:05:55,758
Donc ici, je l'aurai 
au préalable déclarée

107
00:05:55,758 --> 00:05:58,491
comme une expression 
constante de type size_t

108
00:05:58,491 --> 00:06:01,036
je l'ai donc appelée « taille »
et qui contient 5.

109
00:06:01,036 --> 00:06:05,608
Je vais donc déclarer un tableau
qui contient cinq entiers.

110
00:06:05,608 --> 00:06:07,881
Ce tableau je l'appelle « ages ».

111
00:06:07,881 --> 00:06:13,754
Puis je l'initialise entre parenthèses
rondes avec les valeurs données

112
00:06:13,754 --> 00:06:16,788
comme un ensemble de valeurs 
avec les accolades.

113
00:06:16,788 --> 00:06:19,187
L'ensemble des valeurs est 
séparé par des virgules.

114
00:06:19,187 --> 00:06:25,683
Donc 20, 35, 26, 38, 22 ; qui va donc 
me donner le tableau représenté ici.

115
00:06:26,213 --> 00:06:29,066
Il existe aussi une seconde 
façon d'initialiser les tableaux.

116
00:06:29,066 --> 00:06:31,018
On l'avait vu avec
les tableaux dynamiques,

117
00:06:31,018 --> 00:06:32,750
c'est avec le signe égal.

118
00:06:32,750 --> 00:06:35,312
Et puis donc de nouveau, 
de l'autre côté du signe égal,

119
00:06:35,312 --> 00:06:38,214
l'ensemble des valeurs entre accolades, 
séparées par des virgules.

120
00:06:38,214 --> 00:06:40,960
Donc si je reprends l'exemple 
précédent, j'aurais pu aussi,

121
00:06:40,960 --> 00:06:43,543
on ne peut pas, évidemment, 
mettre les deux en même temps,

122
00:06:43,543 --> 00:06:44,750
C'est une alternative.

123
00:06:44,750 --> 00:06:47,791
Mais j'aurais pu aussi déclarer 
mon tableau « ages »

124
00:06:47,791 --> 00:06:52,325
et l'initialiser ici avec le signe égal
puis des accolades.

125
00:06:52,325 --> 00:06:55,635
En fonction des compilateurs, d'ailleurs,
à l'heure actuelle, certains compilateurs

126
00:06:55,635 --> 00:06:58,313
ne tolèrent que cette seconde 
façon d'initialiser.

127
00:06:58,313 --> 00:07:01,118
D'autres tolèrent 
les deux façons d'initialiser.

128
00:07:01,118 --> 00:07:05,068
A noter pour finir qu'un tableau
de taille fixe non initialisé

129
00:07:05,068 --> 00:07:09,099
contient n'importe quoi, en ce sens 
qu'on ne sait pas dire ce qu'il contient.

130
00:07:09,669 --> 00:07:12,854
Maintenant que l'on a déclaré, 
initialisé un tableau de taille fixe,

131
00:07:12,854 --> 00:07:14,723
on peut aussi bien sûr l'utiliser.

132
00:07:14,723 --> 00:07:17,520
Il n'y a ici rien de nouveau 
par rapport aux tableaux dynamiques.

133
00:07:17,520 --> 00:07:19,910
Les syntaxes sont vraiment identiques.

134
00:07:19,910 --> 00:07:24,319
Pour utiliser un élément 
à la position i d'un tableau statique

135
00:07:24,319 --> 00:07:27,066
qui s'appelle « tab »,
on utilisera « tab[i] »

136
00:07:27,066 --> 00:07:29,863
exactement comme on l'aurait fait 
pour un tableau dynamique.

137
00:07:29,863 --> 00:07:32,755
On peut aussi itérer 
sur un tableau statique

138
00:07:32,755 --> 00:07:36,320
avec exactement la même syntaxe 
que pour un tableau dynamique,

139
00:07:36,320 --> 00:07:42,902
soit le « for » à la C++-2011 :
« for(auto element : tableau) »

140
00:07:42,902 --> 00:07:45,079
soit avec un « for » classique.

141
00:07:45,969 --> 00:07:49,562
Les « array » ont aussi 
une fonction spécifique « size() »

142
00:07:49,562 --> 00:07:51,057
qui indique leur taille.

143
00:07:51,057 --> 00:07:55,540
On peut tout à fait, de nouveau,
écrire comme pour les tableaux dynamiques

144
00:07:55,540 --> 00:08:00,398
tab.size pour obtenir la taille du tableau,
tableau statique « tab ».

145
00:08:01,078 --> 00:08:03,733
On peut aussi faire 
des affectations globales.

146
00:08:03,733 --> 00:08:06,538
Affecter globalement 
un tableau tab1 à tab2.

147
00:08:06,538 --> 00:08:12,220
Si j'ai déclaré un tableau « tab1 »
qui est un tableau statique de taille 3

148
00:08:12,220 --> 00:08:13,384
ça ne bougera pas

149
00:08:13,384 --> 00:08:16,363
d'entiers que j'initialise 
aux valeurs 1, 2, 3.

150
00:08:16,363 --> 00:08:20,452
Je peux donc tout à fait 
le recopier directement

151
00:08:20,452 --> 00:08:26,143
dans un autre tableau statique 
de même taille, de taille 3,

152
00:08:26,143 --> 00:08:28,582
en écrivant comme ça, 
« tab2 = tab1 »

153
00:08:28,582 --> 00:08:32,463
ce qui va recopier 
l'intégrité de « tab1 » dans « tab2 ».

154
00:08:32,803 --> 00:08:35,631
Mais ça reste bien sûr 
deux tableaux complètement séparés

155
00:08:35,631 --> 00:08:38,546
ça recopie « tab1 » dans « tab2 »,

156
00:08:38,716 --> 00:08:42,536
Mais « tab1 » et « tab2 » vivent 
leurs vies séparément.

157
00:08:42,536 --> 00:08:47,400
Si je modifie « tab1 », 
« tab2 » ne sera pas modifié bien sûr.

158
00:08:48,300 --> 00:08:50,285
Vous voyez donc que 
l'utilisation des « array »

159
00:08:50,285 --> 00:08:52,282
est très similaire à celle des « vector »

160
00:08:52,282 --> 00:08:55,866
La différence, c'est simplement que 
la taille d'un « array » est fixée au départ

161
00:08:55,866 --> 00:08:57,407
et ne peux pas bouger.

162
00:08:57,407 --> 00:09:00,370
De même, comme on pouvait 
faire des « vector » de « vector »

163
00:09:00,370 --> 00:09:02,731
on va pouvoir faire des « array » de « array » :

164
00:09:02,731 --> 00:09:04,752
des tableaux statiques 
de tableaux statiques.

165
00:09:04,752 --> 00:09:07,102
Et puis, si l'on a besoin, 
on peut bien sûr combiner,

166
00:09:07,102 --> 00:09:09,034
et faire des tableaux statiques 
de tableaux dynamiques

167
00:09:09,034 --> 00:09:11,317
des tableaux dynamiques 
de tableaux statiques, etc.

168
00:09:11,837 --> 00:09:14,655
Regardons ici les tableaux statiques 
de tableaux statiques,

169
00:09:14,655 --> 00:09:16,124
array de array,

170
00:09:16,124 --> 00:09:18,590
donc comme on faisait 
des vector de vector,

171
00:09:18,590 --> 00:09:21,056
on va pouvoir faire 
des « array » de « array ».

172
00:09:21,056 --> 00:09:24,054
La différence c'est qu'on va devoir 
indiquer les tailles.

173
00:09:24,054 --> 00:09:27,777
Donc par exemple je vais faire
un « array » de 2.

174
00:09:29,197 --> 00:09:34,918
De deux quoi ?
De deux « array » de deux « double ».

175
00:09:34,918 --> 00:09:39,916
Donc cette matrice,
que j'appelle ici « rotation »,

176
00:09:39,916 --> 00:09:42,668
c'est bien une matrice 
qu'on a l'habitude de représenter

177
00:09:42,668 --> 00:09:45,964
comme un tableau 2 * 2, 
un tableau à quatre éléments.

178
00:09:45,964 --> 00:09:51,762
Qui est bien un array de deux
array de deux double.

179
00:09:51,762 --> 00:09:57,904
Voilà donc la déclaration 
d'un tableau statique à 2 * 2 éléments.

180
00:09:57,904 --> 00:10:00,320
On peut donc bien sûr 
faire d'autres exemples.

181
00:10:00,320 --> 00:10:03,026
On peut faire un tableau 
qui collectionnerait

182
00:10:03,026 --> 00:10:04,896
les statistiques sur les cantons.

183
00:10:04,896 --> 00:10:10,119
On aura donc un tableau à nombre 
de cantons, de première dimension

184
00:10:10,119 --> 00:10:14,639
qui est le nombre de cantons 
et puis chacun des cantons aura lui même

185
00:10:14,639 --> 00:10:18,198
un certain nombre de statistiques, 
par exemple deux statistiques

186
00:10:18,198 --> 00:10:20,462
comme la surface 
et le nombre d'habitants.

187
00:10:20,722 --> 00:10:23,314
On peut même faire des objets 
encore plus compliqués

188
00:10:23,314 --> 00:10:26,571
comme des tableaux à trois indices : 
des tableaux de tableaux de tableaux.

189
00:10:26,571 --> 00:10:29,840
Ce qui mathématiquement 
correspondrait à un tenseur.

190
00:10:29,840 --> 00:10:33,281
Ce qui compte ici c'est de bien 
comprendre les différentes tailles.

191
00:10:33,281 --> 00:10:35,749
On aura un tableau de 3,

192
00:10:37,429 --> 00:10:40,842
de 3 tableaux de 2,

193
00:10:42,135 --> 00:10:44,865
tableaux de 2,

194
00:10:44,865 --> 00:10:48,787
tableaux de quatre éléments.

195
00:10:53,394 --> 00:10:57,435
Cette couche de 2 * 4 éléments 
étant reproduite

196
00:10:57,435 --> 00:11:00,276
trois fois dans le tableau initial.

197
00:11:00,786 --> 00:11:03,687
Ceci est certainement 
un petit peu compliqué et peu courant,

198
00:11:03,687 --> 00:11:05,989
mais le but était ici de montrer 
que l'on peut généraliser

199
00:11:05,989 --> 00:11:08,511
à n'importe quel nombre de tableau

200
00:11:08,511 --> 00:11:11,493
et surtout d'indiquer 
l'ordre des différentes tailles.

201
00:11:12,133 --> 00:11:15,271
Voyons maintenant l'utilisation 
de ces tableaux à plusieurs dimensions.

202
00:11:15,271 --> 00:11:19,718
Revenons à ce que l'on avait 
appelé la matrice « rotation »

203
00:11:19,718 --> 00:11:23,140
qui est un tableau de 2 fois 2 « double »,

204
00:11:23,140 --> 00:11:25,537
que l'on représente comme ceci.

205
00:11:25,537 --> 00:11:27,528
L'utilisation est exactement 
comme pour les « vector ».

206
00:11:27,528 --> 00:11:30,823
On va utiliser les crochets 
avec deux dimensions.

207
00:11:30,823 --> 00:11:33,593
On va regarder « rotation » de 1,

208
00:11:33,593 --> 00:11:36,744
la numérotation, je vous le rappelle, 
commence à 0 va jusqu'à taille -1.

209
00:11:36,744 --> 00:11:38,755
Donc ici, rotation de 1.

210
00:11:38,755 --> 00:11:44,018
Dans rotation de 1, on va chercher 
l'élément à la position 0.

211
00:11:44,018 --> 00:11:50,612
Cet élément ici, 
auquel on donnera la valeur 0.231.

212
00:11:50,612 --> 00:11:56,688
C'est bien l'élément rotation de 1, 
crochet 0 qui nous intéresse.

213
00:11:56,688 --> 00:12:00,543
De même, si je prends 
le tableau statistique,

214
00:12:00,543 --> 00:12:09,950
ici, statistique de i est donc un 
« array » de « nb_statistiques » « int »

215
00:12:09,950 --> 00:12:14,103
C'est donc un « array » de 
« nb_statistiques » « int ».

216
00:12:14,103 --> 00:12:16,648
C'est-à-dire, lui-même 
un tableau de « nb_statistiques ».

217
00:12:17,058 --> 00:12:19,128
Tout ceci est exactement 
comme on procédait

218
00:12:19,128 --> 00:12:21,199
avec les tableaux dynamiques 
de tableaux dynamiques.

219
00:12:21,199 --> 00:12:24,784
Rien de nouveau ici, si ce n'est 
que toutes les tailles sont fixées

220
00:12:24,784 --> 00:12:27,995
et donc toutes les lignes 
ont la même longueur.

221
00:12:27,995 --> 00:12:31,194
Une petite spécificité, cependant, 
par rapport aux « vector »

222
00:12:31,194 --> 00:12:34,260
qui concerne l'initialisation 
des « array » de « array ».

223
00:12:34,260 --> 00:12:37,672
La syntaxe actuellement supportée 
par les compilateurs

224
00:12:37,672 --> 00:12:40,874
ne tolèrent qu'une seule accolade
dans les initialisations.

225
00:12:41,304 --> 00:12:46,337
Donc si je fais un tableau statique 
de tableau statique,

226
00:12:46,337 --> 00:12:52,653
par exemple, à 4 fois 3 entiers.

227
00:12:52,653 --> 00:12:55,688
Donc ici je mets des entiers, 
que je vais initialiser.

228
00:12:55,688 --> 00:12:58,686
Contrairement aux tableaux dynamiques,

229
00:12:58,686 --> 00:13:02,924
il va falloir initialiser avec 
simplement une seule accolade

230
00:13:02,924 --> 00:13:07,004
et mettre à l'intérieur
l'ensemble des valeurs

231
00:13:07,004 --> 00:13:09,434
que l'on veut déclarer, 
dans l'ordre de lecture.

232
00:13:09,434 --> 00:13:13,887
Ici, par exemple, 0, 1, 2
et puis ensuite 3, 4 , 5,

233
00:13:13,887 --> 00:13:16,443
séparés simplement par des virgules.

234
00:13:16,443 --> 00:13:20,176
Voilà à l'heure actuelle, 
la syntaxe utilisée pour initialiser

235
00:13:20,176 --> 00:13:22,115
les tableaux statiques 
de tableaux statiques.

236
00:13:22,755 --> 00:13:24,899
Pour conclure, résumons 
les différentes syntaxes

237
00:13:24,899 --> 00:13:26,952
entre les tableaux statiques et 
les tableaux dynamiques,

238
00:13:26,952 --> 00:13:29,704
entre les « vector » et les « array ».

239
00:13:29,704 --> 00:13:32,651
Les tableaux dynamiques 
dont la taille peut varier

240
00:13:32,651 --> 00:13:34,408
au fur et à mesure
que le programme s'exécute.

241
00:13:34,408 --> 00:13:37,521
Par opposition aux tableaux statiques 
dont la taille doit être connue

242
00:13:37,521 --> 00:13:40,527
au moment où l'on écrit le programme.

243
00:13:40,867 --> 00:13:43,340
Les premiers tableaux dynamiques, 
sont des « vector »

244
00:13:43,340 --> 00:13:45,666
et les tableaux statiques sont des « array ».

245
00:13:45,666 --> 00:13:49,806
On déclarera un tableau 
dynamique soit vide,

246
00:13:49,806 --> 00:13:52,462
on peut tout à fait déclarer 
un tableau dynamique vide.

247
00:13:52,462 --> 00:13:57,071
Soit lui donner une valeur initiale, 
une taille initiale : 5.

248
00:13:57,071 --> 00:14:01,328
Mais cette taille va pouvoir varier 
au fur et à mesure du programme.

249
00:14:01,328 --> 00:14:04,455
On pourra rajouter ou 
enlever des éléments.

250
00:14:04,455 --> 00:14:08,376
Alors que du côté statique, 
la taille doit absolument être connue.

251
00:14:08,376 --> 00:14:10,966
On peut soit l'écrire comme ceci, 
soit utiliser une variable.

252
00:14:10,966 --> 00:14:13,719
Mais cette taille doit 
absolument être connue.

253
00:14:13,719 --> 00:14:17,750
Donc ici, on n'a qu'une seule 
syntaxe pour les tableaux statiques.

254
00:14:17,750 --> 00:14:21,120
Ensuite pour utiliser 
les éléments d'un tableau

255
00:14:21,120 --> 00:14:23,839
à une ou deux dimensions,
c'est la même syntaxe.

256
00:14:23,839 --> 00:14:25,516
A une dimension : tab[i]

257
00:14:25,516 --> 00:14:27,808
Si le tableau a deux dimensions : tab[i][j].

258
00:14:27,808 --> 00:14:30,868
Pour connaître la taille d'un tableau 
statique ou d'un tableau dynamique,

259
00:14:30,868 --> 00:14:32,583
on utilise la fonction « size() ».

260
00:14:32,583 --> 00:14:35,458
Pour parcourir un tableau 
statique ou dynamique,

261
00:14:35,458 --> 00:14:36,933
ça se fait de la même façon,

262
00:14:36,933 --> 00:14:38,828
on peut soit utiliser 
une boucle for classique,

263
00:14:38,828 --> 00:14:43,753
soit utiliser une boucle for C++-2011 
donc avec les deux points.

264
00:14:43,753 --> 00:14:45,983
Si on veut parcourir 
sans modifier les éléments,

265
00:14:45,983 --> 00:14:49,953
on écrira « for(auto » et puis le nom 
que l'on veut utiliser pour les éléments.

266
00:14:49,953 --> 00:14:53,819
Si on veut modifier les éléments 
on n'oubliera pas de rajouter le signe &.

267
00:14:53,819 --> 00:14:56,709
Et ça de façon identique 
dans un tableau statique

268
00:14:56,709 --> 00:14:58,618
ou dans un tableau dynamique.

269
00:14:58,618 --> 00:15:00,514
Ensuite dans un tableau dynamique,

270
00:15:00,514 --> 00:15:03,569
on va pouvoir éventuellement 
rajouter des éléments.

271
00:15:03,569 --> 00:15:06,057
C'est spécifique au tableau dynamique,

272
00:15:06,057 --> 00:15:08,545
ça n'existe pas
pour les tableaux statiques.

273
00:15:08,545 --> 00:15:11,454
On ne peut pas modifier 
un tableau statique.

274
00:15:11,454 --> 00:15:14,422
Donc pour un tableau dynamique 
uniquement : « push_back »

275
00:15:14,422 --> 00:15:19,498
on rajoute la valeur 
que l'on a donnée « x » à la fin du tableau.

276
00:15:19,498 --> 00:15:21,912
Donc ça va recopier « x » à la fin du tableau.

277
00:15:21,912 --> 00:15:24,493
Si l'on veut enlever le dernier élément 
d'un tableau dynamique,

278
00:15:24,493 --> 00:15:28,165
alors on utilisera « pop_back »
et ceci, bien sûr, n'existe pas

279
00:15:28,165 --> 00:15:30,910
pour les tableaux statiques 
qu'on ne peut pas modifier.

280
00:15:31,840 --> 00:15:35,135
Enfin dernière différence, 
pour l'initialisation

281
00:15:35,135 --> 00:15:38,336
des tableaux dynamiques 
de tableaux dynamiques,

282
00:15:38,336 --> 00:15:41,928
on pourra utiliser la syntaxe, 
supportée par tous les compilateurs,

283
00:15:41,928 --> 00:15:47,391
d'initialisation avec un tableau 
de tableaux avec les parenthèses rondes.

284
00:15:47,391 --> 00:15:51,436
Alors que pour les tableaux statiques 
de tableaux statiques

285
00:15:51,436 --> 00:15:54,651
il faudra utiliser la syntaxe « = »
à l'heure actuelle

286
00:15:54,651 --> 00:15:58,368
et utiliser uniquement 
un seul niveau d'accolade

287
00:15:58,368 --> 00:16:00,537
avec la liste des valeurs désirées, 
comme ça,

288
00:16:00,537 --> 00:16:03,410
les unes derrière les autres.
