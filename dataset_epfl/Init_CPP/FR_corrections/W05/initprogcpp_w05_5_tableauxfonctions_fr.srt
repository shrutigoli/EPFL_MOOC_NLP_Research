1
00:00:06,033 --> 00:00:07,465
Dans les boucles sur les tableaux,

2
00:00:07,465 --> 00:00:10,775
nous avons donc vu comment récupérer
la taille du tableau

3
00:00:10,775 --> 00:00:14,449
au travers d'une fonction spécifique
qui s'appelle <i>size</i>.

4
00:00:14,449 --> 00:00:16,579
Il existe en fait beaucoup
de fonctions spécifiques

5
00:00:16,579 --> 00:00:18,378
associées aux tableaux dynamiques

6
00:00:18,378 --> 00:00:20,889
et j'aimerais vous en présenter
maintenant quelques-unes.

7
00:00:20,889 --> 00:00:24,866
L'utilisation d'une fonction spécifique
se fait toujours de la même façon.

8
00:00:24,866 --> 00:00:29,731
Ce sera le nom du tableau suivi d'un point
collé directement au nom du tableau,

9
00:00:29,731 --> 00:00:32,252
suivi du nom de la fonction spécifique.

10
00:00:32,252 --> 00:00:35,164
Cette fonction spécifique peut par exemple
prendre des arguments,

11
00:00:35,164 --> 00:00:36,522
si elle en a besoin.

12
00:00:36,522 --> 00:00:38,924
Dans la fonction <i>size</i>
il n'y avait pas d'arguments à fournir,

13
00:00:38,924 --> 00:00:40,510
mais nous allons voir des exemples

14
00:00:40,510 --> 00:00:42,885
où l'on aura besoin
de fournir des arguments.

15
00:00:42,885 --> 00:00:46,586
Donc par exemple, la fonction <i>size</i>
est une fonction spécifique

16
00:00:46,586 --> 00:00:48,800
que l'on va appliquer à un tableau.

17
00:00:48,800 --> 00:00:50,414
Donc ici le tableau <i>mesure</i>,

18
00:00:50,414 --> 00:00:55,261
que l'on aura déclaré comme un tableau
dynamique pouvant prendre des <i>double</i>.

19
00:00:55,261 --> 00:00:59,401
Si l'on veut récupérer cette taille
pour pouvoir l'utiliser dans une variable,

20
00:00:59,401 --> 00:01:02,776
je vous rappelle que le type de retour
de la fonction <i>size</i> c'est <i>size_t</i>,

21
00:01:02,776 --> 00:01:04,218
et donc on déclarerait une variable,

22
00:01:04,218 --> 00:01:07,174
par exemple <i>nombre_de_mesures</i>
de type <i>size_t</i>.

23
00:01:07,174 --> 00:01:09,509
On l'initialiserait à 0 par exemple

24
00:01:09,509 --> 00:01:13,226
et on pourrait donc l'utiliser
pour récupérer la valeur de retour

25
00:01:13,226 --> 00:01:16,384
de cette fonction spécifique <i>size</i>.

26
00:01:16,384 --> 00:01:18,264
Il existe plusieurs autres
fonctions spécifiques

27
00:01:19,054 --> 00:01:20,630
propres aux tableaux dynamiques.

28
00:01:20,630 --> 00:01:25,622
Par exemple, la fonction <i>front</i> va renvoyer
une référence sur le premier élément.

29
00:01:25,622 --> 00:01:28,024
Si j'ai donc un tableau
qui s'appelle "tableau"

30
00:01:28,024 --> 00:01:33,385
<i>tableau.front()</i> c'est exactement
la même chose qu'avoir écrit <i>tableau[0]</i>.

31
00:01:33,385 --> 00:01:37,362
Il existe la symétrie bien sûr, <i>back</i>,
qui renvoie le dernier élément.

32
00:01:37,362 --> 00:01:39,706
Alors quel est le dernier
élément d'un tableau ?

33
00:01:39,706 --> 00:01:46,403
C'est "tableau[la taille du tableau()-1]".

34
00:01:46,837 --> 00:01:51,569
Donc le dernier élément,
c'est "tableau[tableau.size()-1].

35
00:01:52,369 --> 00:01:57,360
Il existe une fonction qui permet
de tester si le tableau est vide ou non.

36
00:01:57,360 --> 00:02:01,796
Donc la fonction spécifique <i>empty</i>,
va renvoyer un type booléen

37
00:02:01,796 --> 00:02:05,076
qui vous dira <i>vrai</i> si le tableau est vide

38
00:02:05,076 --> 00:02:08,321
et <i>faux</i> si le tableau
contient quelque chose.

39
00:02:08,321 --> 00:02:11,960
Vous avez la fonction spécifique <i>clear</i>
qui permet de supprimer

40
00:02:11,960 --> 00:02:16,027
tous les éléments d'un tableau
auquel elle s'applique.

41
00:02:16,027 --> 00:02:20,310
Donc toujours la même syntaxe :
<i>le_nom_du_tableau.clear()</i>.

42
00:02:20,310 --> 00:02:24,338
Après l'appel à cette fonction spécifique
<i>clear</i>, le tableau est donc vide.

43
00:02:24,338 --> 00:02:28,315
Vous avez ensuite des fonctions
qui permettent d'ajouter et de supprimer

44
00:02:28,315 --> 00:02:30,180
des éléments derrière un tableau.

45
00:02:30,180 --> 00:02:32,762
Donc par exemple, la fonction <i>pop_back</i>,

46
00:02:32,762 --> 00:02:36,491
va permettre de supprimer
le dernier élément d'un tableau.

47
00:02:36,491 --> 00:02:38,495
Et la fonction <i>push_back</i>

48
00:02:38,495 --> 00:02:41,145
va rajouter un élément
à la fin d'un tableau.

49
00:02:41,145 --> 00:02:43,272
Je vous rappelle, on parle ici
de tableaux dynamiques,

50
00:02:43,272 --> 00:02:44,957
dont on peut faire varier la taille,

51
00:02:44,957 --> 00:02:47,046
dont on peut rajouter
ou supprimer des éléments.

52
00:02:47,046 --> 00:02:51,698
Pour rajouter un élément à un tableau,
il faut bien sûr en indiquer la valeur.

53
00:02:51,698 --> 00:02:52,980
Et donc la fonction <i>push_back</i>,

54
00:02:52,980 --> 00:02:56,686
elle va recevoir ici la valeur
que l'on veut rajouter.

55
00:02:56,686 --> 00:02:59,625
Par exemple, si je considère
un tableau dynamique "v",

56
00:02:59,625 --> 00:03:01,746
tableau dynamique de <i>double</i>,

57
00:03:02,306 --> 00:03:08,146
initialisé au départ avec trois valeurs
qui valent toutes 4.5.

58
00:03:08,602 --> 00:03:11,983
Par exemple, si je fais un <i>pop_back</i>
sur ce tableau "v",

59
00:03:11,983 --> 00:03:16,971
<i>pop_back</i> supprime le dernier élément
et je me retrouve donc avec un tableau

60
00:03:16,971 --> 00:03:19,732
qui n'a plus que deux éléments.

61
00:03:20,380 --> 00:03:24,169
Si ensuite je fais un <i>push_back</i>,
toujours sur ce même tableau,

62
00:03:24,169 --> 00:03:27,012
<i>push_back</i> d'une certaine valeur,
<i>push</i>back* de 5.6,

63
00:03:27,012 --> 00:03:30,515
<i>push_back</i> rajoute cet élément
derrière le tableau

64
00:03:30,515 --> 00:03:35,461
et donc mon tableau "v"
contient maintenant 4.5, 4.5 et 5.6.

65
00:03:36,315 --> 00:03:40,423
Je refais un deuxième
<i>push_back</i> ici avec la valeur 6.7,

66
00:03:40,423 --> 00:03:45,000
ça veut dire que je rajoute,
derrière mon tableau, la valeur 6.7

67
00:03:45,000 --> 00:03:51,362
et le tableau contient donc maintenant
les quatre valeurs 4.5, 4.5, 5.6 et 6.7.

68
00:03:51,362 --> 00:03:55,039
Enfin, si par exemple
je refais un <i>pop_back</i>,

69
00:03:55,039 --> 00:03:58,759
<i>pop_back</i> supprime le dernier élément
que je venais juste d'ajouter

70
00:03:58,759 --> 00:04:03,611
et je me retrouve donc
avec ce tableau-ci à trois éléments.

71
00:04:04,806 --> 00:04:08,136
Prenons un exemple qui utilise
plusieurs de ces fonctions spécifiques.

72
00:04:09,346 --> 00:04:11,769
L'exemple en question
ça va être d'écrire une fonction

73
00:04:11,769 --> 00:04:16,727
qui va initialiser ou réinitialiser
un tableau dynamique d'entiers

74
00:04:16,727 --> 00:04:19,317
en demandant à l'utilisateur
de rentrer des valeurs

75
00:04:19,317 --> 00:04:21,353
suivant les conventions suivantes.

76
00:04:21,353 --> 00:04:24,846
Si l'utilisateur entre des nombres
strictement positifs

77
00:04:25,156 --> 00:04:27,593
alors on va les ajouter au tableau.

78
00:04:27,773 --> 00:04:30,025
Si l'utilisateur entre 0

79
00:04:30,315 --> 00:04:33,959
alors on va tout annuler
et on va recommencer au début.

80
00:04:34,249 --> 00:04:37,285
Si l'utilisateur enfin
entre un nombre négatif,

81
00:04:37,495 --> 00:04:41,572
alors ça veut juste dire qu'on va effacer
le dernier élément du tableau.

82
00:04:42,572 --> 00:04:46,569
Par exemple, supposons que l'on demande
à l'utilisateur d'entrer trois valeurs

83
00:04:47,169 --> 00:04:50,366
et que l'utilisateur donc au départ,
entre la valeur 5.

84
00:04:50,366 --> 00:04:54,185
Il va donc créer ici le tableau dynamique
avec un seul élément : 5.

85
00:04:54,185 --> 00:04:58,871
Puis, l'utilisateur rentre la valeur 2,
donc on rajoute un élément qui a 2.

86
00:04:58,871 --> 00:05:01,273
Puis l'utilisateur a tapé 0,

87
00:05:01,273 --> 00:05:04,503
ce qui correspond à la convention
de dire : on recommence tout à zéro

88
00:05:04,503 --> 00:05:06,492
et donc on repart du tableau vide.

89
00:05:06,752 --> 00:05:10,124
Ensuite l'utilisateur tape 7,

90
00:05:10,124 --> 00:05:13,740
donc on recrée un tableau dynamique
à un seul élément qui est 7

91
00:05:13,740 --> 00:05:18,687
puis il retape 2 puis il tape -4.

92
00:05:18,687 --> 00:05:20,585
Ça c'est la deuxième
convention,

93
00:05:20,585 --> 00:05:24,803
ça veut dire que à ce moment-là on efface
juste le dernier élément du tableau.

94
00:05:24,803 --> 00:05:31,770
Puis l'utilisateur tape 4,
puis il tape 12.

95
00:05:32,510 --> 00:05:36,555
On a donc ici atteint les trois valeurs
que l'on voulait entrer,

96
00:05:36,555 --> 00:05:40,659
le programme s'arrête
et le tableau contient bien 7, 4 et 12.

97
00:05:41,444 --> 00:05:43,077
On cherche à écrire une fonction.

98
00:05:43,267 --> 00:05:46,437
Si vous vous souvenez des différentes
étapes pour écrire une fonction,

99
00:05:46,437 --> 00:05:50,430
on vient ici de spécifier clairement
ce que l'on veut faire : le "quoi".

100
00:05:50,430 --> 00:05:53,497
La deuxième étape maintenant
c'est de s'intéresser au prototype

101
00:05:53,497 --> 00:05:56,414
donc regardons des exemples
typiques d'appels.

102
00:05:56,414 --> 00:05:59,925
Supposons qu'on ait donc
un tableau dynamique <i>tab</i> d'entiers,

103
00:05:59,925 --> 00:06:01,387
on pourrait par exemple,

104
00:06:01,387 --> 00:06:05,017
notre fonction on va vouloir décider
qu'elle s'appelle <i>saisie</i>, c'est son nom

105
00:06:05,017 --> 00:06:08,264
et on voudrait par exemple
saisir en indiquant <i>tab</i>

106
00:06:08,264 --> 00:06:11,945
et en indiquant la taille,
par exemple 5 éléments.

107
00:06:12,313 --> 00:06:14,163
On pourrait aussi décider
que arbitrairement,

108
00:06:14,163 --> 00:06:15,805
si on ne donne pas la taille,

109
00:06:15,805 --> 00:06:21,143
alors à ce moment-là ça veut dire que
on aura à saisir 4 éléments, par exemple.

110
00:06:21,493 --> 00:06:25,682
Un autre exemple d'utilisation serait ici
d'avoir un tableau dynamique

111
00:06:25,682 --> 00:06:28,117
qui est déjà initialisé.

112
00:06:28,117 --> 00:06:32,050
La différence ici c'était que <i>tab</i>
était un tableau dynamique vide

113
00:06:32,050 --> 00:06:36,720
alors qu'ici <i>tab2</i> est un tableau dynamique
qui contient 12 éléments

114
00:06:36,720 --> 00:06:39,265
et à ce moment-là
on pourrait par exemple dire

115
00:06:39,265 --> 00:06:45,823
qu'on va saisir dans <i>tab2</i> les 12 éléments,
donc <i>tab2.size()</i>, qu'il contient.

116
00:06:45,823 --> 00:06:49,852
Donc on va les ressaisir en plaçant
comme deuxième argument, ici, sa taille.

117
00:06:49,852 --> 00:06:53,759
Voilà donc différents exemples
d'utilisation de notre fonction <i>saisie</i>.

118
00:06:54,099 --> 00:06:56,179
Reste maintenant donc à l'écrire.

119
00:06:57,179 --> 00:06:58,704
Pour écrire la fonction <i>saisie</i>,

120
00:06:58,704 --> 00:07:01,313
on commence par se demander
quel doit être son prototype.

121
00:07:01,483 --> 00:07:03,228
Tout d'abord, ses paramètres.

122
00:07:03,228 --> 00:07:04,773
On a vu pour cela, dans l'appel,

123
00:07:04,773 --> 00:07:09,041
que l'on allait devoir passer à un tableau
comme premier argument

124
00:07:09,041 --> 00:07:14,326
et qu'on allait avoir un deuxième argument
optionnel qui serait une taille.

125
00:07:14,736 --> 00:07:17,276
Donc ça nous donne
les deux paramètres suivants :

126
00:07:17,276 --> 00:07:19,636
un tableau et une taille.

127
00:07:19,636 --> 00:07:21,361
Quel est le type de la taille ?

128
00:07:21,361 --> 00:07:23,158
Pour cela, on respecte la norme,

129
00:07:23,158 --> 00:07:26,160
qui nous dit que les tailles de tableaux
sont de type <i>size_t</i>.

130
00:07:26,160 --> 00:07:28,534
Donc on déclare <i>taille</i> de type <i>size_t</i>.

131
00:07:28,534 --> 00:07:30,736
Est-ce que taille peut prendre
une valeur par défaut ?

132
00:07:30,736 --> 00:07:33,584
Oui, on a vu dans les appels
qu'on pouvait avoir une valeur par défaut,

133
00:07:33,584 --> 00:07:35,977
c'est-à-dire ne pas spécifier la taille

134
00:07:35,977 --> 00:07:40,605
et on va arbitrairement décider
donc que cette taille par défaut, est 4.

135
00:07:40,605 --> 00:07:42,405
Passons au premier paramètre.

136
00:07:42,405 --> 00:07:45,038
Le premier paramètre
c'est le tableau dynamique <i>vect</i>.

137
00:07:45,038 --> 00:07:48,061
Est-ce que ce tableau
doit être modifié par la fonction ?

138
00:07:48,061 --> 00:07:50,332
Oui, c'est bien le rôle
de la fonction <i>saisie</i>

139
00:07:50,332 --> 00:07:52,279
que de saisir les valeurs du tableau,

140
00:07:52,279 --> 00:07:56,178
donc comme le tableau est modifié,
on va le passer par référence.

141
00:07:56,698 --> 00:08:00,860
Son type, c'est un type tableau dynamique
d'entiers, donc passé par référence.

142
00:08:00,860 --> 00:08:04,365
Ce qui nous donne donc la partie
paramètres de la fonction.

143
00:08:04,855 --> 00:08:08,175
Pour la partie valeur de retour,
je vous rappelle, on se pose la question :

144
00:08:08,175 --> 00:08:13,874
est-ce que ça a un sens
d'écrire <i>z=saisie(tab)</i> ?

145
00:08:13,874 --> 00:08:15,368
Est-ce que ça aurait un sens ?

146
00:08:15,968 --> 00:08:19,941
Qu'est-ce que serait la valeur de z
de cette saisie d'un tableau ?

147
00:08:19,941 --> 00:08:22,436
Personnellement je ne vois pas
quel sens ça pourrait avoir.

148
00:08:22,436 --> 00:08:25,070
Et donc le type de retour ici

149
00:08:25,070 --> 00:08:28,349
sera <i>void</i> pour dire que
la fonction ne retourne rien.

150
00:08:28,719 --> 00:08:30,524
On a donc terminé avec le prototype

151
00:08:30,524 --> 00:08:32,526
et maintenant on peut s'intéresser

152
00:08:32,526 --> 00:08:35,645
au comment s'intéresser
au corps de la fonction.

153
00:08:35,645 --> 00:08:42,079
Donc pour cela, ce que l'on va commencer
par faire c'est de partir du vecteur vide.

154
00:08:42,079 --> 00:08:45,381
Donc on va commencer
par vider le vecteur <i>vect</i> ici

155
00:08:45,381 --> 00:08:48,164
que l'on a reçu comme argument,
c'est le même nom que j'utilise,

156
00:08:48,164 --> 00:08:51,807
et on va le vider avec la fonction
spécifique <i>clear</i>.

157
00:08:52,467 --> 00:08:57,101
Ensuite, on va afficher
à l'utilisateur <i>saisie de</i>

158
00:08:57,101 --> 00:09:00,071
le nombre d'éléments que l'on veut saisir.

159
00:09:01,561 --> 00:09:03,900
<i>saisie de</i> donc par exemple 3 valeurs

160
00:09:04,230 --> 00:09:08,024
puis ensuite, on va faire une boucle
tant que l'on n'a pas saisi

161
00:09:08,024 --> 00:09:10,070
toutes les valeurs que l'on veut.

162
00:09:10,070 --> 00:09:14,495
Donc tant que la taille
actuelle du tableau <i>vect</i>

163
00:09:14,495 --> 00:09:16,052
que l'on est en train de manipuler,

164
00:09:16,202 --> 00:09:19,481
est strictement inférieure
à la taille demandée.

165
00:09:20,411 --> 00:09:23,462
Alors à ce moment-là tant que
cette condition est vraie,

166
00:09:23,792 --> 00:09:27,366
on va afficher le message
"entrez la valeur"

167
00:09:27,826 --> 00:09:29,178
Mais quelle valeur ?

168
00:09:29,498 --> 00:09:32,899
A un moment donné supposons 
que le tableau est partiellement saisi.

169
00:09:32,899 --> 00:09:36,351
Par exemple on a déjà
saisi les valeurs 7 et 2,

170
00:09:36,351 --> 00:09:39,243
et on voudrait donc demander
la troisième valeur ici

171
00:09:39,243 --> 00:09:41,428
qui va venir être ajoutée.

172
00:09:41,428 --> 00:09:45,700
Quelle est la position de cette valeur
qui n'est pas encore dedans ?

173
00:09:45,700 --> 00:09:48,998
La position du dernier élément
c'est "la taille du tableau - 1"

174
00:09:48,998 --> 00:09:52,949
et donc cette position ici à venir,
c'est bien la position,

175
00:09:52,949 --> 00:09:55,393
c'est bien la taille du tableau.

176
00:09:55,393 --> 00:09:58,426
Donc ça s'écrit <i>vect.size()</i>.

177
00:09:58,426 --> 00:10:03,350
Et donc on va ici afficher
<i>vect.size</i> pour dire entrez la valeur,

178
00:10:03,350 --> 00:10:05,914
numéro de la valeur qui va être saisie.

179
00:10:06,594 --> 00:10:11,414
Ensuite donc on prévoit de lire
une valeur lue au clavier

180
00:10:11,414 --> 00:10:13,905
la valeur entrée par utilisateur.

181
00:10:13,905 --> 00:10:16,077
Donc on lit sur ces lignes,
la valeur en question

182
00:10:16,397 --> 00:10:18,589
et l'on va maintenant
donc traiter les trois cas

183
00:10:18,589 --> 00:10:20,516
que l'on a choisi par convention.

184
00:10:20,516 --> 00:10:23,718
Donc on avait dit que
si la valeur était négative,

185
00:10:24,728 --> 00:10:30,003
alors à ce moment-là il fallait
que l'on supprime le dernier élément.

186
00:10:30,003 --> 00:10:33,902
Donc pour ça il faut garantir
que on a bien un dernier élément.

187
00:10:33,902 --> 00:10:38,845
Donc si la valeur est négative
et que le tableau n'est pas vide.

188
00:10:38,845 --> 00:10:41,740
Donc ici, vous voyez, on utilise
la fonction spécifique <i>empty</i>

189
00:10:41,740 --> 00:10:44,018
qui va nous dire oui ou non,
le tableau est vide.

190
00:10:44,018 --> 00:10:47,849
Et supprimer le dernier élément
suppose que le tableau n'est pas vide.

191
00:10:47,849 --> 00:10:51,955
On écrit donc le tableau
n'est pas vide : <i>not vect.empty()</i>.

192
00:10:51,955 --> 00:10:54,581
A ce moment-là donc,
si les des deux conditions

193
00:10:54,581 --> 00:10:57,237
la valeur saisie est négative
et le tableau n'est pas vide,

194
00:10:57,237 --> 00:11:00,228
alors ce que l'on fait
c'est que l'on supprime,

195
00:11:00,228 --> 00:11:02,463
avec la fonction spécifique <i>pop_back</i>,

196
00:11:02,463 --> 00:11:05,640
supprime le dernier élément
du tableau <i>vect</i>.

197
00:11:06,290 --> 00:11:10,310
Sinon, si la valeur saisie est nulle,

198
00:11:10,310 --> 00:11:14,510
à ce moment-là la convention
c'était de détruire tout le tableau

199
00:11:14,510 --> 00:11:18,604
et donc ça se fait à l'aide
de la fonction spécifique <i>clear</i>.

200
00:11:18,604 --> 00:11:20,023
Donc ici <i>vect.clear()</i>.

201
00:11:20,723 --> 00:11:24,977
Sinon, c'est-à-dire si, soit la valeur
est strictement positive,

202
00:11:25,607 --> 00:11:28,311
soit elle est strictement négative,
et le tableau est vide.

203
00:11:28,731 --> 00:11:31,237
Alors pour éliminer ce dernier cas

204
00:11:31,237 --> 00:11:34,203
et ne garder que le cas
de valeur strictement positive,

205
00:11:34,203 --> 00:11:37,408
je fais le test est-ce que <i>val</i>
est strictement positif ?

206
00:11:37,408 --> 00:11:40,603
Et dans ce cas, je rajoute la valeur
avec un <i>push_back</i>,

207
00:11:40,603 --> 00:11:44,739
<i>push_back</i> de cette valeur
qui va donc bien ajouter la valeur

208
00:11:44,739 --> 00:11:47,562
comme dernier élément
au tableau dynamique.
