1
00:00:06,019 --> 00:00:09,760
Voyons dans cette séquence vidéo
quelques cas d'application typique simple

2
00:00:09,760 --> 00:00:13,064
des concepts présentés jusqu'ici
sur les tableaux dynamiques.

3
00:00:13,471 --> 00:00:15,792
Supposons, par exemple, que l'on ait

4
00:00:15,808 --> 00:00:19,958
un tableau dynamique qui contient 
des doubles que l'on appelle « tab »

5
00:00:19,958 --> 00:00:23,981
et qu'on initialise au départ
avec 10 doubles tous nuls

6
00:00:24,246 --> 00:00:27,035
comment faire pour afficher
les éléments du tableau?

7
00:00:27,039 --> 00:00:29,073
Si vous avez pas besoin 
d'afficher les indices,

8
00:00:29,073 --> 00:00:32,797
c'est-à-dire « l'élément à la position 0 »
ou « le premier élément est »,

9
00:00:32,809 --> 00:00:35,466
mais juste afficher 
le contenu du tableau,

10
00:00:35,466 --> 00:00:38,990
vous pouvez utiliser 
une itération à la C++ 2011;

11
00:00:38,990 --> 00:00:41,180
Donc, par exemple, commencez par

12
00:00:41,180 --> 00:00:44,017
afficher un message « Le tableau contient : »

13
00:00:44,017 --> 00:00:49,997
puis ensuite, donc, 
utilisez une boucle C++2011 avec les :

14
00:00:49,997 --> 00:00:51,343
ici, qui séparent

15
00:00:51,343 --> 00:00:55,023
d'un côté le tableau
sur lequel on veut itérer

16
00:00:55,023 --> 00:00:56,983
qui s'appelle tab
et puis, ensuite,

17
00:00:56,987 --> 00:00:59,761
choisir un nom d'un élément
pour parcourir ce tableau

18
00:00:59,761 --> 00:01:01,991
donc on va ici l'appeler élément.

19
00:01:01,991 --> 00:01:03,621
On a une boucle ici

20
00:01:03,640 --> 00:01:05,518
qui va s'arrêter à cet endroit-là

21
00:01:05,518 --> 00:01:07,724
et qui utilise donc

22
00:01:08,524 --> 00:01:10,843
le nom de variable élément

23
00:01:10,843 --> 00:01:14,789
pour indiquer les différents éléments
de ce tableau tab.

24
00:01:14,789 --> 00:01:15,657
Comme ici,

25
00:01:15,657 --> 00:01:17,764
parcourir le tableau pour l'afficher

26
00:01:17,764 --> 00:01:19,602
ne modifie pas le tableau,

27
00:01:19,602 --> 00:01:21,059
on n'a pas besoin d'ajouter

28
00:01:21,059 --> 00:01:25,067
le signe de référence entre
auto et le nom de la variable.

29
00:01:25,931 --> 00:01:27,450
Si vous avez, par contre, besoin

30
00:01:27,450 --> 00:01:28,767
d'expliciter les indices,

31
00:01:28,767 --> 00:01:31,031
alors il faudra bien quelque part

32
00:01:31,031 --> 00:01:32,770
indiquer cet indice

33
00:01:32,770 --> 00:01:35,001
et donc avoir une variable supplémentaire.

34
00:01:35,001 --> 00:01:37,038
Pour ça on va donc déclarer 
une variable i.

35
00:01:37,044 --> 00:01:39,928
on va utiliser donc une boucle for

36
00:01:39,928 --> 00:01:41,303
comme on l'a vu au début,

37
00:01:41,303 --> 00:01:43,080
dans le cours 
sur les structures de contrôle

38
00:01:43,080 --> 00:01:46,302
qui va déclarer i de type size_t

39
00:01:46,303 --> 00:01:47,982
démarrant à l'indice 0

40
00:01:47,982 --> 00:01:50,472
premier élément du tableau est l'indice 0

41
00:01:50,487 --> 00:01:55,530
séparez donc le for par
les trois parties avec le ;

42
00:01:55,940 --> 00:01:58,756
Derrière la première partie, 
nous avons la condition.

43
00:01:58,759 --> 00:02:01,515
Ici, c'est tant que
i est strictement inférieur à size,

44
00:02:01,515 --> 00:02:03,910
on va jusqu'à tab.size() moins 1

45
00:02:03,910 --> 00:02:06,692
et puis, ici de 1 en 1,
ce qui nous permet donc,

46
00:02:06,692 --> 00:02:08,983
dans la boucle, d'afficher l'indice

47
00:02:10,775 --> 00:02:12,721
que l'on parcourt,
de l'élément que l'on parcourt.

48
00:02:12,733 --> 00:02:16,757
Par exemple, ça va afficher
« l'élément 0 vaut »

49
00:02:16,757 --> 00:02:19,974
et puis la valeur du premier élément
stocké dans le tableau,

50
00:02:19,974 --> 00:02:22,353
stocké à l'indice 0.

51
00:02:22,503 --> 00:02:25,027
Dans ces deux exemples 
où l'on affiche les éléments du tableau,

52
00:02:25,027 --> 00:02:27,994
on n'a donc pas besoin
de modifier les éléments du tableau.

53
00:02:28,514 --> 00:02:29,721
Voyons, maintenant, un exemple

54
00:02:29,721 --> 00:02:32,504
où l'on souhaite, par exemple,
affecter la valeur,

55
00:02:32,510 --> 00:02:33,981
à tous les éléments du tableau,

56
00:02:33,981 --> 00:02:34,862
la valeur 1.2

57
00:02:35,748 --> 00:02:38,219
Si l'on veut utiliser une boucle C++ 2011,

58
00:02:38,219 --> 00:02:41,517
alors on déclarera ici « for(auto »

59
00:02:42,017 --> 00:02:43,977
avec le signe pour indiquer

60
00:02:43,992 --> 00:02:45,102
que l'on va modifier ('&'),

61
00:02:45,102 --> 00:02:46,474
un nom de variable

62
00:02:46,474 --> 00:02:48,256
-- j'avais choisi « élément » au préalable,

63
00:02:48,256 --> 00:02:49,171
ici, je peux choisir « el » --

64
00:02:49,171 --> 00:02:51,084
le ':' pour séparer les deux parties

65
00:02:51,084 --> 00:02:53,122
et donc le nom du tableau.

66
00:02:53,605 --> 00:02:55,775
Dans cette boucle-là,
on va donc pouvoir utiliser

67
00:02:55,779 --> 00:02:57,289
el comme un nom de variable

68
00:02:57,289 --> 00:02:58,758
qui va parcourir tour à tour

69
00:02:58,758 --> 00:03:00,688
les différents éléments du tableau tab

70
00:03:00,688 --> 00:03:01,535
et donc, ici,

71
00:03:01,535 --> 00:03:04,743
pour chacun de ces éléments,
on va mettre la valeur 1.2

72
00:03:04,963 --> 00:03:06,774
On pourrait aussi
dans un tableau dynamique

73
00:03:06,774 --> 00:03:09,432
si on voulait affecter directement

74
00:03:09,432 --> 00:03:10,405
tout le tableau

75
00:03:10,405 --> 00:03:11,781
on peut aussi utiliser,

76
00:03:11,781 --> 00:03:14,370
mais ça sort du cadre 
d'illustrations des itérations,

77
00:03:15,230 --> 00:03:15,924
utiliser

78
00:03:15,934 --> 00:03:17,523
une affectation globale de tableaux.

79
00:03:17,523 --> 00:03:19,511
Ici, on va donc écraser le tableau,

80
00:03:19,511 --> 00:03:21,258
l'ancienne valeur du tableau,

81
00:03:21,258 --> 00:03:23,492
par la nouvelle valeur d'un tableau

82
00:03:23,492 --> 00:03:23,923
qui est,

83
00:03:23,925 --> 00:03:25,257
alors, on regarde ici,

84
00:03:25,257 --> 00:03:26,495
élément par élément :

85
00:03:26,495 --> 00:03:27,752
un tableau dynamique

86
00:03:27,752 --> 00:03:29,046
qui contient des double

87
00:03:29,743 --> 00:03:31,750
que l'on initialise, au départ,

88
00:03:31,750 --> 00:03:33,993
à une certaine taille

89
00:03:33,993 --> 00:03:35,964
qui est l'ancienne taille du tableau tab

90
00:03:35,966 --> 00:03:38,416
donc on donne tab.size()

91
00:03:39,476 --> 00:03:42,295
et dont tous les éléments
prennent la valeur 1.2

92
00:03:42,496 --> 00:03:45,233
Ça crée bien un nouveau tableau dynamique

93
00:03:46,703 --> 00:03:52,036
qui a exactement tab.size() éléments

94
00:03:52,746 --> 00:03:54,746
et dont chacun des éléments

95
00:03:57,216 --> 00:03:59,266
a la valeur 1.2

96
00:04:00,246 --> 00:04:03,246
C'est comme si vous aviez déclaré 
en deux lignes,

97
00:04:03,746 --> 00:04:06,285
tout d'abord un tableau tab2

98
00:04:06,600 --> 00:04:11,893
qui est un tableau dynamique de « double »,
initialisé à la taille de tab

99
00:04:11,893 --> 00:04:13,186
donc tab.size()

100
00:04:13,976 --> 00:04:15,668
et tous à la valeur 1.2

101
00:04:15,957 --> 00:04:17,558
puis qu'ensuite vous ayez fait

102
00:04:19,159 --> 00:04:20,762
la copie de tab2 dans tab

103
00:04:20,762 --> 00:04:22,352
On peut l'écrire comme ça,

104
00:04:22,352 --> 00:04:23,942
en une seule ligne, de façon compacte,

105
00:04:23,942 --> 00:04:25,534
en déclarant ici ce qu'on appelle

106
00:04:25,534 --> 00:04:26,923
un tableau anonyme.

107
00:04:26,923 --> 00:04:28,485
On n'a pas mis le nom ici

108
00:04:28,485 --> 00:04:30,505
où on aurait mis normalement le nom tab2

109
00:04:30,507 --> 00:04:32,536
si on l'avait déclaré en deux lignes.

110
00:04:32,536 --> 00:04:34,916
c'est un tableau sans nom,
un tableau anonyme.

111
00:04:34,928 --> 00:04:37,764
Une telle expression comme ceci,
on peut tout à fait l'écrire

112
00:04:37,764 --> 00:04:39,710
c'est un tableau qui existe

113
00:04:39,728 --> 00:04:41,300
qui est créé ponctuellement

114
00:04:41,300 --> 00:04:44,017
avant d'être recopié dans tab.

115
00:04:45,464 --> 00:04:47,609
Autre exemple de modification typique

116
00:04:47,609 --> 00:04:49,148
des éléments d'un tableau,

117
00:04:49,148 --> 00:04:51,031
c'est lorsqu'on les demande 
à l'utilisateur.

118
00:04:51,571 --> 00:04:52,632
Là aussi, on a deux cas.

119
00:04:52,632 --> 00:04:54,865
Soit on veut afficher explicitement

120
00:04:54,865 --> 00:04:56,103
les positions,

121
00:04:56,103 --> 00:04:58,237
les indices des éléments du tableau.

122
00:04:58,237 --> 00:04:59,374
Soit on souhaite simplement

123
00:04:59,374 --> 00:05:00,503
juste les demander,

124
00:05:00,503 --> 00:05:01,511
les éléments du tableau

125
00:05:01,511 --> 00:05:02,570
les uns après les autres

126
00:05:02,570 --> 00:05:04,273
sans expliciter les indices.

127
00:05:04,273 --> 00:05:05,999
Regardons ces deux cas.

128
00:05:06,204 --> 00:05:08,113
Si on n'a pas besoin
d'expliciter les indices

129
00:05:08,124 --> 00:05:09,241
alors on peut utiliser

130
00:05:09,241 --> 00:05:11,950
une boucle for de type C++ 2011.

131
00:05:11,950 --> 00:05:15,499
Mais comme on veut modifier le tableau,
puisqu'on va saisir les valeurs,

132
00:05:15,499 --> 00:05:18,811
on va utiliser ici une boucle par référence.

133
00:05:18,811 --> 00:05:21,678
Donc on retrouve le ':'
des boucles C++ 2011

134
00:05:22,708 --> 00:05:23,974
et toujours les deux parties,

135
00:05:23,974 --> 00:05:26,747
le tableau que l'on veut modifier tab

136
00:05:26,747 --> 00:05:28,777
et puis, ici, la partie déclarative

137
00:05:28,777 --> 00:05:30,731
avec le nom qu'on a choisi

138
00:05:30,731 --> 00:05:32,407
pour parcourir les éléments du tableau,

139
00:05:32,407 --> 00:05:33,500
par exemple, élément.

140
00:05:34,260 --> 00:05:35,386
Puis, dans cette boucle,

141
00:05:35,386 --> 00:05:39,253
donc le corps de la boucle
toujours contrôlé par le bloc ici

142
00:05:39,253 --> 00:05:41,142
dans cette boucle, on va afficher

143
00:05:41,142 --> 00:05:42,409
« Entrez l'élément suivant »,

144
00:05:43,008 --> 00:05:44,219
le message par exemple,

145
00:05:44,219 --> 00:05:47,532
et puis saisir dans la variable élément.

146
00:05:47,532 --> 00:05:49,736
La variable élément va parcourir,

147
00:05:49,736 --> 00:05:51,518
encore une fois, tour à tour,

148
00:05:51,518 --> 00:05:53,514
les différents éléments du tableau

149
00:05:53,514 --> 00:05:54,744
en commençant par le premier

150
00:05:54,744 --> 00:05:57,604
puis quand on va faire la 2e itération,

151
00:05:57,944 --> 00:05:59,738
le deuxième élément du tableau

152
00:05:59,983 --> 00:06:01,532
puis lorsqu'on va reboucler

153
00:06:01,532 --> 00:06:03,366
dans la troisième itération

154
00:06:03,454 --> 00:06:07,261
on sera sur le troisième élément
du tableau, etc, etc

155
00:06:07,261 --> 00:06:08,746
jusqu'à arriver

156
00:06:08,746 --> 00:06:10,300
au dernier élément du tableau.

157
00:06:10,804 --> 00:06:12,772
Si vous voulez expliciter les indices,

158
00:06:12,802 --> 00:06:13,974
alors on utilisera

159
00:06:13,974 --> 00:06:16,530
une boucle for plus classique

160
00:06:16,999 --> 00:06:19,312
séparée en trois parties avec le ;

161
00:06:19,479 --> 00:06:21,916
on déclare comme d'habitude
ici un entier i

162
00:06:22,200 --> 00:06:24,742
de type size_t
à la position du premier élément,

163
00:06:24,742 --> 00:06:26,284
c'est-à-dire la position 0.

164
00:06:26,503 --> 00:06:29,986
Tant que i est strictement
inférieur à tab.size()

165
00:06:29,993 --> 00:06:32,704
on incrémente ici de 1 en 1

166
00:06:32,704 --> 00:06:34,156
et on va donc afficher ici

167
00:06:34,734 --> 00:06:35,499
l'indice,

168
00:06:35,499 --> 00:06:36,463
c'est ce qu'on voulait,

169
00:06:36,463 --> 00:06:37,931
c'est pour ça qu'on a introduit i

170
00:06:37,931 --> 00:06:40,517
donc on dit : « Entrez l'élément  0 »,
« l'élément 1 », etc.

171
00:06:41,068 --> 00:06:44,728
Puis, enfin, on va saisir au clavier

172
00:06:44,728 --> 00:06:47,775
l'élément à la position i
dans le tableau tab

173
00:06:47,775 --> 00:06:51,675
donc « tab[i] » qui désigne cet élément.
