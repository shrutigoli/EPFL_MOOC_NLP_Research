1
00:00:05,523 --> 00:00:07,113
Dans les séquences précédentes,

2
00:00:07,271 --> 00:00:10,157
nous avions vu ce que sont 
les trois facettes des fonctions.

3
00:00:10,939 --> 00:00:13,504
Nous avions vu ce qu'est
l'<i>appel</i> d'une fonction,

4
00:00:14,159 --> 00:00:16,349
nous avions vu aussi 
dans une autre séquence

5
00:00:16,349 --> 00:00:18,402
ce qu'est le prototype d'une fonction.

6
00:00:18,451 --> 00:00:19,916
Dans cette séquence-ci,

7
00:00:19,916 --> 00:00:23,341
nous allons plus particulièrement étudier 
la notion de définition.

8
00:00:23,825 --> 00:00:27,457
Si je reprends l'exemple 
du calcul de la moyenne,

9
00:00:27,457 --> 00:00:32,957
la définition de la fonction moyenne,
ce sont ces lignes ici en bas du programme

10
00:00:33,334 --> 00:00:36,606
Nous allons maintenant nous focaliser
plus particulièrement là-dessus.

11
00:00:37,648 --> 00:00:41,096
La définition d'une fonction sert,
comme son nom l'indique,

12
00:00:41,096 --> 00:00:43,344
à définir une fonction techniquement,

13
00:00:43,344 --> 00:00:46,621
c'est-à-dire à spécifier 
le corps de la fonction,

14
00:00:46,621 --> 00:00:49,249
c'est-à-dire l'ensemble des instructions

15
00:00:49,249 --> 00:00:52,041
qui ont fait qu'on a choisi 
de faire cette fonction.

16
00:00:52,644 --> 00:00:56,856
Plus particulièrement,
la définition d'une fonction va commencer

17
00:00:56,856 --> 00:00:59,545
par la donnée de l'entête de la fonction,

18
00:00:59,545 --> 00:01:03,372
c'est-à-dire le début du prototype 
sans le point virgule

19
00:01:03,372 --> 00:01:06,447
où je vous rappelle 
que l'on définit d'abord le type,

20
00:01:06,447 --> 00:01:10,148
puis le nom de la fonction et enfin,
entre parenthèses rondes,

21
00:01:10,148 --> 00:01:13,288
l'ensemble des paramètres 
que l'on souhaite fournir à la fonction.

22
00:01:13,541 --> 00:01:17,782
Pour la définition, derrière cet entête,
vient ensuite le bloc

23
00:01:17,782 --> 00:01:20,446
qui est le corps de la fonction.

24
00:01:20,446 --> 00:01:23,667
Ce corps est donc 
un ensemble d'instructions C++ usuel

25
00:01:23,667 --> 00:01:25,556
que l'on a mis dans un bloc ici

26
00:01:25,556 --> 00:01:28,805
et qui contient 
une ou plusieurs expressions return

27
00:01:28,805 --> 00:01:32,355
qui mettront fin à l'exécution du corps 
de la fonction.

28
00:01:32,355 --> 00:01:35,872
Si je prends un exemple,
l'exemple de la fonction moyenne,

29
00:01:35,872 --> 00:01:41,069
on retrouve ici l'entête de la fonction
avec le type de retour double,

30
00:01:41,069 --> 00:01:46,638
la moyenne va retourner un double,
son nom et la liste des deux arguments.

31
00:01:46,638 --> 00:01:50,432
Ici, on va faire 
la moyenne entre deux nombres x et y.

32
00:01:50,432 --> 00:01:55,696
Dans la définition, on a le corps ici
de la fonction qui est ce bloc

33
00:01:55,696 --> 00:02:00,076
qui est ici réduit 
à une simple instruction return sans +.

34
00:02:01,380 --> 00:02:05,396
Le corps de la fonction est simplement
un bloc au sens C++,

35
00:02:05,396 --> 00:02:09,425
c'est-à-dire un ensemble d'instructions C++
comprise entre une accolade ouvrante

36
00:02:09,425 --> 00:02:11,230
et une accolade fermante.

37
00:02:11,230 --> 00:02:15,108
La seule différente est que l'on dispose
de variables supplémentaires dans ce bloc

38
00:02:15,108 --> 00:02:18,747
qui sont les paramètres de la fonction
que l'on peut utiliser dans ce bloc

39
00:02:18,747 --> 00:02:21,580
comme n'importe quelle variable usuelle.

40
00:02:21,580 --> 00:02:25,471
La valeur retournée par la fonction 
est indiquée par l'instruction <i>return</i>.

41
00:02:25,471 --> 00:02:30,379
Cette instruction est suivie 
par une expression au sens C++

42
00:02:30,379 --> 00:02:36,146
qui sera évaluée et qui donnera la valeur
que la fonction va retourner.

43
00:02:36,146 --> 00:02:41,782
Cette expression doit être de même type 
que le type de retour de la fonction.

44
00:02:41,782 --> 00:02:46,761
Dans l'exemple du calcul de la moyenne, 
nous avons ici le corps de la fonction

45
00:02:46,761 --> 00:02:50,071
qui est ce bloc ici, 
qui est très simple dans ce cas-là

46
00:02:50,071 --> 00:02:53,268
qui ne contient qu'une seule instruction
<i>return</i>

47
00:02:53,268 --> 00:02:57,918
laquelle va donc évaluer 
l'expression qui est ici

48
00:02:57,918 --> 00:03:00,859
où vous voyez que l'on récupère

49
00:03:00,859 --> 00:03:04,605
et que l'on peut utiliser 
les deux paramètres x et y.

50
00:03:04,605 --> 00:03:07,887
L'expression sera évaluée,
on va en faire <i>x + y</i>

51
00:03:07,887 --> 00:03:10,234
puis, on va diviser par deux

52
00:03:10,234 --> 00:03:14,523
et le résultat qui est de type <i>double</i>
sera renvoyé par la fonction

53
00:03:14,523 --> 00:03:18,603
au reste du programme.
L'instruction <i>return</i> fait deux choses :

54
00:03:18,603 --> 00:03:22,242
elle permet de préciser
la valeur de retour

55
00:03:22,242 --> 00:03:25,699
qui sera fournie par la fonction
au reste du programme

56
00:03:25,699 --> 00:03:29,540
et elle termine l'exécution 
du corps de la fonction

57
00:03:29,540 --> 00:03:32,677
dès le premier <i>return</i> rencontré,
la fonction s'arrête

58
00:03:32,677 --> 00:03:36,221
et retourne la valeur correspondant
à l'expression.

59
00:03:36,221 --> 00:03:41,348
Très souvent, vous trouverez dans du code
des expressions return relativement simples

60
00:03:41,348 --> 00:03:44,762
qui se réduit simplement 
à un nom de variables

61
00:03:44,762 --> 00:03:48,414
comme par exemple, <i>return x</i> où x ici
est un nom de variables

62
00:03:48,414 --> 00:03:52,604
ou même des valeurs par exemple, 
return 3 pour renvoyer la valeur trois.

63
00:03:52,699 --> 00:03:55,106
Mais ceci est un cas 
tout à fait particulier

64
00:03:55,106 --> 00:03:58,203
on peut absolument, 
et comme on l'a vu précédemment,

65
00:03:58,203 --> 00:04:01,888
utiliser une expression complète 
au sens C++

66
00:04:01,888 --> 00:04:05,917
et c'est ça qui est la cas général
d'évaluer une expression complète.

67
00:04:05,917 --> 00:04:09,961
<i>x</i> et <i>3</i> ici sont simplement 
des expressions particulières.

68
00:04:11,031 --> 00:04:13,448
Quelques remarques concernant
l'instruction <i>return</i>

69
00:04:13,448 --> 00:04:15,710
sur lesquelles il est peut-être 
important d'insister.

70
00:04:15,710 --> 00:04:18,732
Tout d'abord, on peut placer 
plusieurs instructions <i>return</i>

71
00:04:18,732 --> 00:04:20,515
dans une même fonction.

72
00:04:20,515 --> 00:04:23,650
Prenons un exemple simple ici
d'une fonction qui va retourner

73
00:04:23,650 --> 00:04:26,511
le maximum de deux valeurs,
disons ici, <i>a</i> et <i>b</i>.

74
00:04:26,511 --> 00:04:29,869
J'appelle ma fonction <i>max2</i>
parce que tout simplement il existe déjà

75
00:04:29,869 --> 00:04:33,048
une fonction <i>max</i>
dans la bibliothèque standard du C++.

76
00:04:33,048 --> 00:04:37,779
Regardons le corps de cette fonction, 
on commence par déclarer une variable <i>m</i>

77
00:04:37,779 --> 00:04:43,145
et puis, si <i>a</i> est plus grand que <i>b</i>,
alors on va recopier <i>a</i> dans <i>m</i>

78
00:04:43,145 --> 00:04:47,029
et si <i>b</i> est inférieur ou égal à <i>a</i>,

79
00:04:47,029 --> 00:04:49,865
alors à ce moment là,
la valeur de <i>m</i> sera la valeur de <i>b</i>

80
00:04:49,865 --> 00:04:52,775
et puis on retourne la valeur de <i>m</i>.

81
00:04:52,775 --> 00:04:57,441
Mais, on aurait pu très bien écrire 
ce code ici avec deux <i>return</i>

82
00:04:57,441 --> 00:05:01,614
de façon un petit peu plus compacte,
le prototype reste le même

83
00:05:01,614 --> 00:05:05,872
mais ici, si <i>a</i> est plus grand que <i>b</i>,
on <i>return</i> <i>a</i> ce qui aura l'effet

84
00:05:05,872 --> 00:05:08,131
que si effectivement <i>a</i>
est plus grand que <i>b</i>

85
00:05:08,131 --> 00:05:11,795
on va évaluer cette expression 
et la retourner et on va s'arrêter ici.

86
00:05:11,795 --> 00:05:14,683
Le <i>return</i> fait que l'on s'arrête 
à cet endroit-là.

87
00:05:14,683 --> 00:05:17,729
Si par contre <i>b</i> était inférieur 
ou égal à <i>a</i>

88
00:05:17,729 --> 00:05:20,676
alors à ce moment-là ce qui va se passer

89
00:05:20,676 --> 00:05:24,569
c'est que cette instruction <i>if</i>
va directement sauter ici

90
00:05:24,569 --> 00:05:28,130
et à ce moment-là, ça sera ce <i>return</i> là 
qui sera exécuté.

91
00:05:28,130 --> 00:05:30,218
Notez bien qu'il y aura qu'un seul <i>return</i>

92
00:05:30,218 --> 00:05:33,128
exécuté pour un appel donné 
de cette fonction.

93
00:05:34,115 --> 00:05:39,138
Deuxième remarque, l'expression qui suit
une instruction return dans une fonction

94
00:05:39,138 --> 00:05:42,699
doit bien sûr être de même type 
que le type de retour indiqué

95
00:05:42,699 --> 00:05:44,477
dans l'entête de cette fonction.

96
00:05:44,477 --> 00:05:48,376
Par exemple ici, si j'ai une fonction <i>f</i>
qui ne prend pas d'arguments

97
00:05:48,376 --> 00:05:52,025
mais qui retourne un <i>double</i>,
alors à ce moment-là,

98
00:05:52,025 --> 00:05:55,852
tous les <i>return</i> dans cette fonction
devront être de type <i>double</i>

99
00:05:55,852 --> 00:06:01,536
et ici j'ai une expression qui retourne <i>b</i>
<i>b</i> de type <i>bool 1</i>, ceci n'est pas correct,

100
00:06:01,536 --> 00:06:04,036
cela va me générer une erreur.

101
00:06:04,112 --> 00:06:06,337
Troisième remarque concernant
l'instruction <i>return</i>,

102
00:06:06,337 --> 00:06:10,180
elle doit être bien sûr
la dernière instruction exécutée

103
00:06:10,180 --> 00:06:13,357
puisque l'instruction return met fin 
à l’exécution de la fonction,

104
00:06:13,357 --> 00:06:16,658
ça n'a pas de sens 
de mettre des instructions derrière <i>return</i>

105
00:06:16,658 --> 00:06:21,985
Prenons l'exemple ici d'une fonction <i>lire</i>
qui doit retourner un double en l'ayant lu

106
00:06:21,985 --> 00:06:23,354
sur l'entrée standard.

107
00:06:23,354 --> 00:06:26,951
Elle commence par afficher un message
sur la sortie standard

108
00:06:26,951 --> 00:06:32,571
puis ensuite, elle déclare une variable 
de type double de nom <i>n</i> et initialisé à 0.

109
00:06:32,599 --> 00:06:36,599
Elle lit la valeur de ce double 
sur l'entrée standard

110
00:06:36,599 --> 00:06:41,465
et enfin elle retourne 
au reste du programme la valeur de <i>n</i>.

111
00:06:41,465 --> 00:06:44,395
A ce moment-là, la fonction <i>lire</i>
est terminée.

112
00:06:44,395 --> 00:06:47,873
Il n'y a donc absolument aucune raison
de mettre une instruction ici derrière,

113
00:06:47,873 --> 00:06:49,923
c'est complètement erroné.

114
00:06:50,214 --> 00:06:54,194
Quatrième et dernière remarque
concernant l'instruction return.

115
00:06:54,220 --> 00:06:59,028
Le compilateur doit toujours pouvoir
exécuter un return.

116
00:06:59,028 --> 00:07:02,256
Je reprends ici l'exemple 
de la fonction <i>lire</i> écrite

117
00:07:02,256 --> 00:07:04,539
un tout petit peu différemment.

118
00:07:04,539 --> 00:07:09,369
On retrouve ici la demande d'entrer 
un nombre à l'utilisateur,

119
00:07:09,429 --> 00:07:13,619
la déclaration et initialisation 
de la variable <i>n</i>,

120
00:07:13,674 --> 00:07:17,745
la lecture sur le clavier 
de la valeur de <i>n</i>

121
00:07:17,745 --> 00:07:22,689
mais, ici, on a donc simplement un test
si <i>n</i> est strictement positif

122
00:07:22,689 --> 00:07:27,654
alors, la fonction va exécuter ce return
et va donc terminer

123
00:07:27,654 --> 00:07:30,366
et renvoyer la valeur de <i>n</i>.

124
00:07:30,366 --> 00:07:33,870
Mais, que se passe t-il si <i>n</i> est négatif ?

125
00:07:33,870 --> 00:07:36,570
C'est tout à fait possible 
que <i>n</i> soit négatif,

126
00:07:36,570 --> 00:07:39,093
on pourrait tout à fait imaginer
qu' à ce niveau-là,

127
00:07:39,093 --> 00:07:41,717
l'utilisateur est rentré une valeur négative.

128
00:07:41,717 --> 00:07:48,195
A ce compte-là, le test ici va être faux
et donc la fonction va sauter après le <i>if</i>

129
00:07:48,195 --> 00:07:51,830
et va se retrouver ici,
et vous voyez qu'à partir de là,

130
00:07:51,830 --> 00:07:55,247
il n'y a plus rien à exécuter.
On va donc terminer la fonction <i>sans return</i>

131
00:07:55,247 --> 00:07:56,644
ceci n'est pas possible

132
00:07:56,644 --> 00:08:00,024
et donc le compilateur 
va vous renvoyer une erreur.

133
00:08:00,055 --> 00:08:04,365
Le compilateur vérifie 
que l'on doit terminer la fonction

134
00:08:04,365 --> 00:08:07,027
chaque fois en ayant 
une expression <i>return</i>

135
00:08:07,027 --> 00:08:12,855
qui retourne un double puisque 
c'est le type de retour de la fonction.

136
00:08:12,855 --> 00:08:16,271
Dans ce cas particulier, 
ce que l'on aurait pu faire

137
00:08:16,271 --> 00:08:21,355
c'est corriger par exemple la fonction
et éventuellement rajouter ici une boucle

138
00:08:21,355 --> 00:08:26,651
qui reprend tout ce bloc ici,
tant que par exemple,

139
00:08:26,651 --> 00:08:32,786
la valeur de n est négative ou nulle, 
on répète alors le bloc

140
00:08:32,786 --> 00:08:36,516
qui demande la question et qui fait saisir
un autre à un nombre

141
00:08:36,518 --> 00:08:41,778
ce qui aurait permis de tout le temps
terminer avec une bonne condition.

142
00:08:41,803 --> 00:08:43,379
Plus précisément,

143
00:08:43,379 --> 00:08:47,829
puisque l'on veut d'abord demander 
à l’utilisateur d'entrer une valeur

144
00:08:47,829 --> 00:08:51,197
avant de tester si elle est positive 
ou négative,

145
00:08:51,197 --> 00:08:54,404
il s'agit ici bien sûr 
d'une boucle <i>do while</i>.

146
00:08:54,404 --> 00:08:58,294
On va donc écrire la boucle <i>do while</i> ici

147
00:08:58,294 --> 00:09:01,555
avec comme condition,

148
00:09:01,555 --> 00:09:05,876
on va demander la question 
tant qu'on n'a pas la bonne réponse.

149
00:09:05,876 --> 00:09:11,397
On voulait dans la version de départ
du programme que <i>n</i> soit positif

150
00:09:11,397 --> 00:09:15,466
pour avoir une bonne réponse.
Donc, on va répéter <i>while</i>

151
00:09:15,466 --> 00:09:23,155
tant que <i>n</i> est cette fois-ci négatif,
tant que <i>n</i> est négatif,

152
00:09:23,155 --> 00:09:28,818
il faut répéter la boucle
et dès que <i>n</i> sera positif,

153
00:09:28,818 --> 00:09:38,438
on pourra retourner la valeur,
donc on peut déjà écrire ici le <i>return</i>.

154
00:09:38,535 --> 00:09:42,976
Ensuite, dans la boucle,
on va saisir la réponse de l'utilisateur

155
00:09:42,976 --> 00:09:47,376
commencer par lui écrire la question,
et ensuite saisir sa réponse

156
00:09:47,379 --> 00:09:51,056
c'est ça qui va faire
l'objet d'une boucle.

157
00:09:51,056 --> 00:09:57,701
On l'écrit ici, le message 
et puis la lecture dans la variable <i>n</i>.

158
00:09:57,701 --> 00:10:01,111
Reste maintenant à déclarer 
cette variable <i>n</i>

159
00:10:01,111 --> 00:10:04,270
comme on l'utilise ici 
dans la condition du <i>while</i>

160
00:10:04,270 --> 00:10:09,200
qui est hors du bloc <i>do while</i>
et qu'on l'utilise ici aussi en retour,

161
00:10:09,204 --> 00:10:13,137
on va déclarer la variable hors du bloc
pour pouvoir l'utiliser hors du bloc,

162
00:10:13,137 --> 00:10:16,947
donc, on va la déclarer ici,
au départ l'initialiser avec une valeur

163
00:10:16,947 --> 00:10:19,510
qui fait sens, donc, par exemple 0.

164
00:10:19,510 --> 00:10:24,328
Et voici donc, la formulation précise
qui corrige l’erreur précédente.

165
00:10:24,878 --> 00:10:27,366
Voyons maintenant 
quelques cas particuliers de fonctions.

166
00:10:27,366 --> 00:10:29,325
On va commencer par exemple
par une fonction

167
00:10:29,325 --> 00:10:30,920
qui n'a pas de valeur de retour.

168
00:10:30,920 --> 00:10:33,780
Je dois vous rappeler qu'une fonction
en programmation n'a rien à voir

169
00:10:33,790 --> 00:10:35,714
avec une fonction mathématique.

170
00:10:35,714 --> 00:10:38,916
Une fonction en programmation,
c'est simplement un ensemble d'instructions

171
00:10:38,916 --> 00:10:41,434
que l'on a réservé de côté, 
que l'on a nommé.

172
00:10:41,434 --> 00:10:43,317
Cet ensemble d'instructions

173
00:10:43,317 --> 00:10:45,958
peut tout à fait n'avoir 
aucune valeur de retour

174
00:10:45,958 --> 00:10:50,232
n'avoir aucun résultat à fournir
au reste du programme.

175
00:10:50,232 --> 00:10:51,601
Une telle fonction,

176
00:10:51,601 --> 00:10:54,312
c'est ce que l'on appelle parfois 
une procédure.

177
00:10:54,312 --> 00:10:59,903
Une fonction comme ceci va avoir besoin
d'une déclaration particulière.

178
00:10:59,903 --> 00:11:03,270
La déclaration particulière de son type,
puisqu'elle ne renvoie rien,

179
00:11:03,270 --> 00:11:07,008
sera d'utiliser le mot réservé <i>void</i>
pour indiquer

180
00:11:07,008 --> 00:11:09,139
qu'elle n'a pas de type de retour.

181
00:11:09,139 --> 00:11:11,486
Si je prends l'exemple ici 
en bas du transparent,

182
00:11:11,486 --> 00:11:15,198
la fonction affichée racine 
va simplement afficher quelque chose

183
00:11:15,198 --> 00:11:19,671
sur le terminal 
et elle n'a pas besoin de retour

184
00:11:19,671 --> 00:11:22,163
et elle n'a pas besoin de retourner 
quelque chose au reste du programme.

185
00:11:22,163 --> 00:11:24,829
On va définir son type de retour 
entre guillemets,

186
00:11:24,829 --> 00:11:29,669
indiquer qu'il n'y a pas de retour
par le mot réservé <i>void</i>.

187
00:11:30,330 --> 00:11:33,262
Comme une telle fonction ne retourne rien
au reste du programme,

188
00:11:33,262 --> 00:11:35,300
elle n'a pas besoin d'instructions return

189
00:11:35,300 --> 00:11:38,270
et l'instruction return 
dans de telles fonctions est optionnelle.

190
00:11:38,275 --> 00:11:42,342
Cependant, il pourrait être utile 
de devoir arrêter préalablement

191
00:11:42,342 --> 00:11:45,903
le corps de la fonction,
en fonction par exemple d'un <i>if</i>.

192
00:11:45,903 --> 00:11:49,598
A ce moment-là, on peut tout à fait mettre
un return dans le corps de la fonction

193
00:11:49,598 --> 00:11:53,918
et le return est écrit 
avec un point virgule derrière.

194
00:11:53,973 --> 00:11:59,547
Si je reprends l'exemple de la fonction
affiche racine ici en bas du transparent,

195
00:11:59,547 --> 00:12:02,001
qui retourne donc rien du tout

196
00:12:02,001 --> 00:12:04,464
puisqu'elle fait simplement 
afficher sur l'écran

197
00:12:04,464 --> 00:12:07,803
la racine carré de l'argument reçu.

198
00:12:07,803 --> 00:12:12,330
Si a est ici négatif,
alors il faut simplement ne rien afficher

199
00:12:12,330 --> 00:12:15,676
puisque la racine carré 
d'un nombre négatif n'est pas définie

200
00:12:15,676 --> 00:12:17,578
et donc on va provoquer ici

201
00:12:17,578 --> 00:12:20,866
l'arrêt de l'exécution 
du corps de la fonction

202
00:12:20,866 --> 00:12:22,896
par une expression return

203
00:12:22,896 --> 00:12:25,249
qui ne contient absolument
aucune expression à renvoyer,

204
00:12:25,249 --> 00:12:27,120
qui ne contient rien derrière lui.

205
00:12:27,120 --> 00:12:33,633
Si <i>a</i>, par exemple, était positif,
le <i>if</i> ne s'exécute pas

206
00:12:33,633 --> 00:12:35,592
et le corps de la fonction continue

207
00:12:35,592 --> 00:12:40,392
normalement ici en exécutant 
l'affichage de la racine carré.

208
00:12:40,978 --> 00:12:44,640
Autre cas particulier de fonction, 
les fonctions sans paramètre.

209
00:12:44,640 --> 00:12:46,758
On peut tout à fait définir des fonctions

210
00:12:46,758 --> 00:12:49,971
qui n'ont besoin d'aucun paramètre 
de l'extérieur pour fonctionner

211
00:12:49,971 --> 00:12:51,449
pour faire ce qu'elle doit faire.

212
00:12:51,449 --> 00:12:53,712
On a déjà vu cela dans le cours 
sur les prototypes,

213
00:12:53,712 --> 00:12:57,749
il suffit alors simplement dans l'entête
de mettre une liste de paramètres vide,

214
00:12:57,749 --> 00:13:02,486
c'est simplement deux parenthèses, 
comme ceci <i>()</i> sans rien à l'intérieur.

215
00:13:02,486 --> 00:13:04,550
Par exemple, si je veux 
une fonction saisie

216
00:13:04,550 --> 00:13:08,210
qui dont le but est de demander
un nombre <i>double</i> à l'utilisateur

217
00:13:08,210 --> 00:13:11,107
sur le terminal.
Cette fonction doit retourner un <i>double</i>

218
00:13:11,107 --> 00:13:13,457
mais elle n'a besoin d'aucun paramètre.

219
00:13:13,457 --> 00:13:17,637
On va alors déclarer ici une variable,
par exemple, un nombre de points,

220
00:13:17,640 --> 00:13:22,596
à demander à l'utilisateur, 
qu'on va déclarer de type double.

221
00:13:22,596 --> 00:13:27,631
Ici le type qu'on va utiliser 
va être le même type de la valeur de retour

222
00:13:27,631 --> 00:13:30,250
puisque c'est cette variable
qu'on va utiliser

223
00:13:30,250 --> 00:13:33,938
pour retourner la valeur 
au reste du programme.

224
00:13:33,938 --> 00:13:39,553
On déclare cette variable ici "nb_points",
on l'initialise à zéro.

225
00:13:39,553 --> 00:13:44,276
Ensuite, on pose la question
à l'utilisateur d'entrer un nombre de points.

226
00:13:44,276 --> 00:13:47,231
On va lire sur le terminal 
le nombre de points

227
00:13:47,231 --> 00:13:49,477
que l'utilisateur doit nous fournir

228
00:13:49,477 --> 00:13:51,700
et puis tant le nombre de points

229
00:13:51,700 --> 00:13:54,288
est négatif ou plus grand 
qu'un certain seuil,

230
00:13:54,288 --> 00:13:59,931
à ce moment-là, on va reboucler
demander à l'utilisateur.

231
00:13:59,931 --> 00:14:02,247
Quand on aura enfin une valeur correcte,

232
00:14:02,247 --> 00:14:06,024
on retourne au reste du programme 
le nombre de points

233
00:14:06,024 --> 00:14:07,828
que nous aura donné l'utilisateur.

234
00:14:07,828 --> 00:14:11,341
Vous voyez que le programme 
qui va utiliser, qui va faire appel à saisie

235
00:14:11,341 --> 00:14:15,276
n'a absolument besoin de ne rien passer 
comme arguments.

236
00:14:15,276 --> 00:14:19,966
La fonction saisie travaille tout à fait
de façon autonome.

237
00:14:20,145 --> 00:14:23,176
Dernier cas un peu particulier 
de fonction.

238
00:14:23,176 --> 00:14:25,951
La fonction « <i>main</i> »,
la fonction principale.

239
00:14:25,951 --> 00:14:29,921
« Main » est une fonction 
comme pratiquement toutes les autres,

240
00:14:29,921 --> 00:14:34,349
simplement, c'est la fonction 
qui est appelée au tout début du programme.

241
00:14:34,349 --> 00:14:38,154
Cette fonction a un prototype particulier.
Elle en a en fait deux,

242
00:14:38,154 --> 00:14:42,887
mais le prototype qu'on utilisera 
dans ce cours, c'est le protoype suivant :

243
00:14:42,887 --> 00:14:48,576
elle doit retourner un entier, <i>int</i>,
et ne recevoir aucun argument.

244
00:14:48,576 --> 00:14:52,367
La façon standard de définir « <i>main</i> »
est la suivante.

245
00:14:52,367 --> 00:14:56,039
Cet entier, <i>int</i>, ici
qu'on retourne au reste du programme

246
00:14:56,039 --> 00:14:59,631
c'est ce qu'on retourne au programme
qui a appelé notre programme

247
00:14:59,631 --> 00:15:00,978
c'est-à-dire l'environnement

248
00:15:00,978 --> 00:15:03,089
dans lequel vous allez lancer 
votre programme

249
00:15:03,089 --> 00:15:08,048
et ça va être typiquement un code d'erreur
avec la convention que la valeur 0

250
00:15:08,048 --> 00:15:12,124
indique par convention que le programme
s'est bien déroulé ici.

251
00:15:12,124 --> 00:15:17,685
Cela veut dire qu'il n'y a pas d'erreur.
C'est peut-être un peu surprenant

252
00:15:17,685 --> 00:15:21,335
mais c'est une convention habituelle,
zéro veut dire qu'il n'y a pas d'erreur.

253
00:15:21,335 --> 00:15:25,615
En général, on utilise ici un code d'erreur
plus grand que zéro, un, deux etc.

254
00:15:25,622 --> 00:15:29,838
pour indiquer qu'il y a une erreur.
Mais ça, ça sort du cadre de ce cours.

255
00:15:29,838 --> 00:15:32,594
Juste pour signaler un autre prototype,

256
00:15:32,594 --> 00:15:36,565
le seul autre prototype autorisé 
ici pour « main »,

257
00:15:36,565 --> 00:15:38,212
que l'on peut parfois rencontrer

258
00:15:38,212 --> 00:15:40,112
dans certains environnements 
de développement,

259
00:15:40,112 --> 00:15:41,696
c'est celui que vous aurez 
de façon standard.

260
00:15:41,696 --> 00:15:44,757
C'est un prototype qui prend 
deux arguments

261
00:15:44,757 --> 00:15:46,685
mais ça nous amènerait un peu trop loin

262
00:15:46,685 --> 00:15:48,922
d'expliquer ici ce que sont
ces deux arguments.

263
00:15:48,922 --> 00:15:51,689
Ce sont tout simplement des paramètres
que l'on pourrait recevoir

264
00:15:51,689 --> 00:15:54,549
de l'environnement dans lequel 
vous allez lancer votre programme.
