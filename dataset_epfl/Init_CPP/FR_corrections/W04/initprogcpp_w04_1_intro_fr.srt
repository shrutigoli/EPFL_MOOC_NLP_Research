1
00:00:05,407 --> 00:00:07,422
Bonjour !
Bienvenue à cette nouvelle leçon

2
00:00:07,422 --> 00:00:10,058
de notre cours d'introduction 
à la programmation en C++.

3
00:00:10,058 --> 00:00:12,755
L'objectif de cette nouvelle leçon
est de vous apprendre

4
00:00:12,755 --> 00:00:15,679
à organiser votre code 
en le modularisant

5
00:00:15,679 --> 00:00:17,257
à l'aide de ce qu'on appelle 
des fonctions.

6
00:00:17,644 --> 00:00:19,948
Les fonctions font partie 
des aspects de traitement.

7
00:00:19,948 --> 00:00:23,333
au même titre que les expressions
et opérateurs,

8
00:00:23,333 --> 00:00:26,477
et les structures de contrôle, 
que nous avons vues précédemment.

9
00:00:26,937 --> 00:00:31,403
En règle générale, les fonctions opèrent
sur des données,

10
00:00:31,403 --> 00:00:35,367
et en retour les données 
vont influencer nos fonctions.

11
00:00:36,475 --> 00:00:38,647
Jusqu'à maintenant les programmes
que vous avez écrits

12
00:00:38,798 --> 00:00:41,065
étaient constitués 
d'une séquence linéaire d'instructions

13
00:00:41,065 --> 00:00:45,051
sans organisation plus globale 
et sans partage des tâches répétées.

14
00:00:45,051 --> 00:00:47,704
Par exemple, si la tâche consistant

15
00:00:47,704 --> 00:00:52,030
à demander un nombre à l'utilisateur, 
comme le fait le code suivant,

16
00:00:52,313 --> 00:00:54,308
devait être exécuté plusieurs fois 
dans notre programme.

17
00:00:54,807 --> 00:00:57,515
Par exemple pour demander une fois
un nombre de points,

18
00:00:57,749 --> 00:01:00,090
une fois un temps, 
une fois un âge.

19
00:01:00,090 --> 00:01:01,640
Que feriez-vous ?

20
00:01:02,810 --> 00:01:05,960
Vous pourriez être tenté de recopier 
le code autant de fois que nécessaire

21
00:01:06,187 --> 00:01:08,833
aux endroits appropriés, 
mais, évidemment,

22
00:01:08,833 --> 00:01:11,520
ceci est une très mauvaise solution.

23
00:01:11,520 --> 00:01:14,410
Il ne faut jamais dupliquer 
de code en programmant.

24
00:01:14,410 --> 00:01:16,660
Ne soyez pas tenté par le copier-coller.

25
00:01:16,660 --> 00:01:20,658
Ce que vous voudriez recopier 
doit être mis dans une fonction.

26
00:01:21,298 --> 00:01:23,523
Pourquoi ne faut-il 
jamais dupliquer du code ?

27
00:01:23,523 --> 00:01:26,529
Cela rend le programme inutilement long,

28
00:01:26,529 --> 00:01:29,919
difficile à comprendre,

29
00:01:29,919 --> 00:01:32,652
et surtout difficile à maintenir.

30
00:01:32,652 --> 00:01:36,019
Il faudrait reporter chaque modification
dans chacune des copies.

31
00:01:36,019 --> 00:01:39,155
C'est pour ça que 
tout bon langage de programmation

32
00:01:39,155 --> 00:01:43,277
fournit des moyens pour permettre 
la réutilisation de portions de programme.

33
00:01:43,277 --> 00:01:47,102
En C++, ça se fait 
en utilisant des fonctions.

34
00:01:48,519 --> 00:01:51,089
Considérons par exemple 
le programme suivant :

35
00:01:51,089 --> 00:01:54,065
Ce programme commence 
par demander un nombre de points

36
00:01:54,065 --> 00:01:55,608
obtenus par un joueur.

37
00:01:55,608 --> 00:01:58,928
Vous pouvez constater qu'il utilise, 
pour cela, une boucle do / while

38
00:01:58,928 --> 00:02:03,372
pour forcer l'utilisateur à entrer 
une valeur entre 0 et 100.

39
00:02:04,722 --> 00:02:07,881
Ensuite, le programme continue 
en demandant à l'utilisateur

40
00:02:07,881 --> 00:02:10,351
d'entrer le temps utilisé par le joueur.

41
00:02:10,351 --> 00:02:14,382
Cette fois-ci, 
c'est une valeur entre 1 et 60.

42
00:02:15,837 --> 00:02:19,376
Puis à partir du nombre de points 
obtenus par le joueur

43
00:02:19,949 --> 00:02:21,791
et du temps qu'il a utilisé,

44
00:02:21,791 --> 00:02:25,329
le programme calcule 
le score du premier joueur.

45
00:02:26,554 --> 00:02:31,529
Ensuite, le programme répète 
ces opérations pour un deuxième joueur.

46
00:02:31,842 --> 00:02:34,513
Il demande un nombre de points,

47
00:02:35,093 --> 00:02:36,526
un temps,

48
00:02:36,526 --> 00:02:40,365
et calcule le score du deuxième joueur.

49
00:02:40,934 --> 00:02:46,709
Finalement, le programme compare 
le score des deux joueurs,

50
00:02:46,987 --> 00:02:52,145
pour pouvoir annoncer, si c'est 
le joueur 1 ou le joueur 2 qui a gagné.

51
00:02:52,679 --> 00:02:54,974
Vous pouvez donc constater 
que dans ce programme,

52
00:02:54,974 --> 00:02:59,422
le code qui consiste à demander 
un nombre de points, un temps,

53
00:02:59,422 --> 00:03:02,233
et de calculer un score 
à partir du nombre de points et du temps,

54
00:03:02,233 --> 00:03:06,110
est répété deux fois, 
une fois pour chacun des deux joueurs.

55
00:03:06,110 --> 00:03:08,640
Dans un cas comme celui-là, 
il faut utiliser une fonction

56
00:03:08,640 --> 00:03:11,367
pour éviter la duplication du code.

57
00:03:11,367 --> 00:03:15,407
Pour cela, je vais d'abord 
mettre de côté le code qui m'intéresse.

58
00:03:15,912 --> 00:03:20,988
Le code qui m'intéresse, c'est ici, 
le code qui demande un nombre de points

59
00:03:20,988 --> 00:03:24,961
un temps et qui calcule un score.

60
00:03:24,961 --> 00:03:28,807
Donc je vais mettre de côté ce code.

61
00:03:28,807 --> 00:03:31,881
Par exemple ici.

62
00:03:34,918 --> 00:03:37,511
Ce code va constituer ce qu'on appelle,

63
00:03:38,025 --> 00:03:41,494
le corps de ma future fonction.

64
00:03:42,116 --> 00:03:45,564
Ce corps, il va falloir le nommer, 
pour pouvoir y faire référence

65
00:03:45,756 --> 00:03:47,379
dans le reste du programme.

66
00:03:47,379 --> 00:03:52,571
Je vais l'appeler ici, <i>saisie_et_calcul</i>

67
00:03:53,050 --> 00:03:57,886
et ça va devenir le nom 
de ma future fonction.

68
00:03:58,414 --> 00:03:59,961
Je veux maintenant 
que ma fonction

69
00:03:59,961 --> 00:04:03,342
puisse fournir un résultat 
au reste du programme.

70
00:04:03,789 --> 00:04:05,220
Le résultat, dans cet exemple,

71
00:04:05,654 --> 00:04:08,655
c'est le score du joueur 
qui a été calculé par la fonction.

72
00:04:09,191 --> 00:04:12,297
Je vais commencer par enlever
les références au joueur 1,

73
00:04:12,657 --> 00:04:16,698
puisque ma fonction est maintenant
valable pour n'importe quel joueur.

74
00:04:17,585 --> 00:04:20,233
Je vais utiliser le mot-clef <i>return</i>

75
00:04:20,233 --> 00:04:26,768
suivi du nom de la variable score_joueur

76
00:04:26,931 --> 00:04:31,595
pour dire que ma fonction doit 
fournir la valeur

77
00:04:31,595 --> 00:04:34,005
contenue dans la variable <i>score_joueur</i>.

78
00:04:34,166 --> 00:04:37,300
Ne vous inquiétez pas, on verra ça
en détail dans la suite du cours.

79
00:04:37,973 --> 00:04:41,428
Ma fonction peut donc fournir une valeur
au reste du programme.

80
00:04:41,771 --> 00:04:43,815
Cette valeur a un certain type.

81
00:04:43,897 --> 00:04:45,770
Il faut que je signale 
au reste du programme

82
00:04:45,770 --> 00:04:47,423
quel est ce type.

83
00:04:47,696 --> 00:04:49,700
La valeur retournée par ma fonction

84
00:04:49,700 --> 00:04:53,022
c'est la valeur qui est contenue 
dans la variable <i>score_joueur</i>.

85
00:04:53,256 --> 00:04:56,565
<i>score_joueur</i> a été définie
comme ayant le type <i>double</i>.

86
00:04:56,565 --> 00:05:00,397
Donc il faut que je signale 
que ma fonction va renvoyer

87
00:05:00,397 --> 00:05:02,212
une valeur de type <i>double</i>.

88
00:05:02,232 --> 00:05:06,769
Et ça se fait en rajoutant, 
avant le nom de la fonction,

89
00:05:06,769 --> 00:05:12,252
le type de la valeur renvoyée, 
qui est ici <i>double</i>.

90
00:05:13,945 --> 00:05:16,260
Un autre aspect des fonctions 
est qu'elles peuvent utiliser

91
00:05:16,260 --> 00:05:19,086
des valeurs fournies par l'extérieur 
pour pouvoir fonctionner.

92
00:05:19,497 --> 00:05:22,748
Notre fonction saisie_et_calcul 
est relativement simple,

93
00:05:23,015 --> 00:05:25,320
elle n'a pas besoin 
encore de telles valeurs.

94
00:05:25,320 --> 00:05:31,968
Pour signaler cela, il faut mettre 
à la fin du nom de la fonction

95
00:05:31,968 --> 00:05:35,614
une parenthèse ouvrante 
suivie d'une parenthèse fermante.

96
00:05:35,841 --> 00:05:38,003
Notre fonction est complète.

97
00:05:38,260 --> 00:05:42,049
Je vais maintenant utiliser 
ma fonction saisie<u>et</u>calcul

98
00:05:42,049 --> 00:05:43,903
pour demander à l'utilisateur

99
00:05:43,903 --> 00:05:46,555
un nombre de points, un temps 
et calculer le score du joueur 1.

100
00:05:46,555 --> 00:05:51,007
Pour cela, je vais retourner à l'endroit 
où j'avais extrait le code

101
00:05:51,298 --> 00:05:54,309
que j'ai utilisé
pour créer ma fonction.

102
00:05:54,547 --> 00:05:56,096
C'est à dire, ici.

103
00:05:56,828 --> 00:06:01,989
Je vais déclarer une variable 
qui va contenir le score du joueur 1.

104
00:06:02,380 --> 00:06:05,863
Je vais utiliser ma fonction que 
j'avais appelée saisie_et_calcul

105
00:06:06,191 --> 00:06:08,559
et ça va s'écrire de cette façon là.

106
00:06:10,107 --> 00:06:13,952
L'instruction que je viens de créer, ici,

107
00:06:13,952 --> 00:06:15,726
est donc une déclaration de variable

108
00:06:15,736 --> 00:06:17,585
de la variable score_joueur1

109
00:06:17,585 --> 00:06:25,426
et j'initialise cette variable 
en utilisant la fonction saisie_et_calcul.

110
00:06:26,884 --> 00:06:32,830
Cette utilisation s'appelle 
un <i>appel de fonction</i>.

111
00:06:32,830 --> 00:06:36,901
L'appel va fournir le résultat 
de l'exécution de la fonction.

112
00:06:36,901 --> 00:06:39,664
C'est à dire, ici, le score du joueur.

113
00:06:39,664 --> 00:06:43,912
Cette valeur peut, ensuite, par exemple, 
être stockée dans une variable

114
00:06:43,912 --> 00:06:45,461
comme c'est le cas ici.

115
00:06:45,461 --> 00:06:48,605
Je peux faire exactement la même chose
pour le second joueur.

116
00:06:49,285 --> 00:06:53,589
Je peux enlever le code 
qui correspond à ma fonction

117
00:06:53,589 --> 00:07:00,464
c'est à dire celui-ci, et le remplacer
par un appel à ma fonction <i>saisie_et_calcul</i>

118
00:07:00,976 --> 00:07:05,504
pour initialiser la variable <i>score_joueur2</i>

119
00:07:06,723 --> 00:07:09,977
Vous pouvez remarquer que le code 
maintenant est beaucoup plus concis.

120
00:07:10,656 --> 00:07:15,288
Pour l'instant, ma fonction saisie_et_calcul 
est définie au début du programme.

121
00:07:15,648 --> 00:07:16,887
C'est à dire, ici.

122
00:07:17,575 --> 00:07:21,863
Mais je pourrais la définir 
à un autre endroit du programme,

123
00:07:22,206 --> 00:07:23,635
par exemple à la fin.

124
00:07:23,974 --> 00:07:25,648
Comme ceci.

125
00:07:26,158 --> 00:07:32,048
Mais si je veux utiliser ma fonction 
pour initialiser les variables

126
00:07:32,391 --> 00:07:35,157
<i>score_joueur1</i> et <i>score_joueur2</i>,

127
00:07:35,540 --> 00:07:38,526
il faut que le compilateur connaisse 
cette fonction

128
00:07:38,795 --> 00:07:40,699
au moment de l'appel de la fonction.

129
00:07:41,194 --> 00:07:45,840
Pour pouvoir déclarer 
ma fonction avant son appel

130
00:07:46,477 --> 00:07:52,363
je vais juste répéter la première ligne 
de la définition de ma fonction.

131
00:07:52,421 --> 00:07:57,261
Mettre cette première ligne avant 
l'appel de la fonction quelque part ici,

132
00:07:57,261 --> 00:08:02,600
et terminer cette ligne 
avec un point virgule.

133
00:08:03,024 --> 00:08:07,027
De cette façon, maintenant, au moment 
de l'appel de ma fonction,

134
00:08:07,027 --> 00:08:10,561
le compilateur connaît déjà 
le nom de la fonction

135
00:08:10,561 --> 00:08:14,747
et le type du résultat de la fonction, 
c'est à dire <i>double</i> ici.

136
00:08:15,570 --> 00:08:25,021
Cette ligne qui déclare une fonction 
s'appelle un prototype de fonction.

137
00:08:25,901 --> 00:08:29,592
Créer la fonction <i>saisie_et_calcul</i>
m'a permis d'éviter de dupliquer du code.

138
00:08:30,380 --> 00:08:34,321
C'est aussi intéressant d'utiliser 
une fonction pour pouvoir

139
00:08:34,321 --> 00:08:37,754
se concentrer sur un aspect 
un peu difficile du programme,

140
00:08:37,754 --> 00:08:41,705
comme par exemple, ici, 
le calcul du score du joueur.

141
00:08:42,072 --> 00:08:49,446
Donc je vais extraire, comme avant, 
le code qui calcule le score du joueur.

142
00:08:50,046 --> 00:08:53,538
Puis à partir de là, je vais créer 
une fonction de la même façon

143
00:08:53,538 --> 00:08:56,125
que pour ma fonction saisie_et_calcul.

144
00:08:56,125 --> 00:08:59,954
Cette nouvelle fonction 
va renvoyer le score du joueur,

145
00:09:00,359 --> 00:09:02,381
donc une valeur de type double.

146
00:09:02,982 --> 00:09:05,960
Je vais appeler cette nouvelle fonction, 
tout simplement, <i>score</i>

147
00:09:05,960 --> 00:09:09,771
et pour l'instant je vais faire 
suivre le nom de la fonction

148
00:09:09,771 --> 00:09:12,462
par une parenthèse ouvrante 
et une parenthèse fermante.

149
00:09:12,462 --> 00:09:16,831
Je vais mettre le code que je viens 
d'extraire entre accolades.

150
00:09:16,831 --> 00:09:21,698
Comme avant, 
je vais utiliser le mot clef <i>return</i>

151
00:09:21,698 --> 00:09:25,662
pour dire que ma fonction 
doit fournir le score du joueur.

152
00:09:26,848 --> 00:09:29,244
Ça va s'écrire de cette façon-là.

153
00:09:29,887 --> 00:09:34,009
La différence par rapport 
à la première fonction saisie<u>et</u>calcul

154
00:09:34,009 --> 00:09:37,030
est que cette nouvelle fonction 
<i>score</i> a besoin

155
00:09:37,030 --> 00:09:42,856
de la variable <i>nb_points</i>
et de la variable <i>temps</i>

156
00:09:42,856 --> 00:09:44,834
pour pouvoir calculer 
le score du joueur.

157
00:09:44,834 --> 00:09:50,312
Pour cela je vais rajouter 
entre parenthèses ces deux variables.

158
00:09:50,312 --> 00:09:55,428
Ça va se noter de cette façon-ci.

159
00:09:56,041 --> 00:10:00,374
Ce que je viens de rajouter 
entre parenthèses, ici,

160
00:10:00,374 --> 00:10:05,420
ça s'appelle des paramètres.

161
00:10:05,975 --> 00:10:08,470
Ce seront les paramètres 
de ma fonction.

162
00:10:08,470 --> 00:10:12,945
Comme avant je vais retourner 
là où j'ai extrait le code

163
00:10:12,945 --> 00:10:17,575
pour créer ma fonction <i>score</i> pour 
pouvoir appeler cette fonction <i>score</i>.

164
00:10:17,754 --> 00:10:22,625
Je peux le faire, par exemple,
juste après le mot-clef <i>return</i>

165
00:10:22,915 --> 00:10:25,270
je vais appeler ma nouvelle fonction <i>score</i>

166
00:10:25,270 --> 00:10:28,566
Cette nouvelle fonction 
a besoin du nombre de points

167
00:10:28,566 --> 00:10:32,216
qui est la variable ici,

168
00:10:32,972 --> 00:10:37,385
et le temps de jeu, que je vais 
mettre ici entre parenthèses.

169
00:10:39,689 --> 00:10:45,725
En résumé, j'ai d'abord identifié le code
qui devait être mis dans une fonction.

170
00:10:46,544 --> 00:10:53,241
J'ai extrait ce code pour pouvoir créer 
ma nouvelle fonction que j'ai nommée.

171
00:10:53,643 --> 00:10:56,769
J'ai identifié ce dont avait besoin 
en entrée ma fonction

172
00:10:57,240 --> 00:10:58,889
pour pouvoir fonctionner.

173
00:10:59,643 --> 00:11:05,445
J'ai aussi identifié ce que devait fournir 
ma fonction au reste du programme.

174
00:11:05,469 --> 00:11:10,117
Maintenant je peux remplacer 
la partie du code que j'ai extraite,

175
00:11:10,578 --> 00:11:13,300
par un appel à ma fonction.

176
00:11:14,206 --> 00:11:17,674
Une fonction est donc 
une portion de programme réutilisable,

177
00:11:17,674 --> 00:11:19,737
comme la fonction saisie<u>et</u>calcul

178
00:11:19,737 --> 00:11:21,838
ou importante en soi 
comme la fonction <i>score</i>.

179
00:11:22,283 --> 00:11:26,276
Elle est caractérisée par un corps, 
qui est la portion de programme

180
00:11:26,276 --> 00:11:29,922
réutilisée ou à mettre en évidence.

181
00:11:30,244 --> 00:11:33,515
Elle est aussi caractérisée par son nom

182
00:11:33,515 --> 00:11:36,494
qui va permettre de faire référence 
à cette fonction.

183
00:11:36,494 --> 00:11:40,400
Elle peut avoir des paramètres,

184
00:11:40,400 --> 00:11:42,872
qui sont l'ensemble des variables 
extérieures à la fonction

185
00:11:42,872 --> 00:11:46,594
dont le corps a besoin pour fonctionner.

186
00:11:46,846 --> 00:11:50,383
La fonction peut également 
renvoyer une valeur en retour

187
00:11:50,675 --> 00:11:53,605
et cette valeur doit avoir un type.

188
00:11:54,075 --> 00:11:59,661
Et finalement, l'utilisation d'une fonction 
dans le reste du programme

189
00:12:00,043 --> 00:12:03,173
se nomme un appel à la fonction.

190
00:12:04,263 --> 00:12:06,763
Une fonction a donc trois facettes.

191
00:12:07,218 --> 00:12:11,518
Tout d'abord son prototype, 
qu'on peut voir comme un résumé

192
00:12:11,518 --> 00:12:13,209
de ce que doit faire la fonction.

193
00:12:13,209 --> 00:12:19,625
Puisqu'il contient son nom, 
ses paramètres,

194
00:12:19,846 --> 00:12:22,863
qui correspondent aux valeurs 
dont a besoin la fonction

195
00:12:23,231 --> 00:12:24,969
pour pouvoir fonctionner.

196
00:12:25,564 --> 00:12:32,392
Ainsi que le type de la valeur 
que va fournir la fonction.

197
00:12:32,886 --> 00:12:39,638
Un deuxième aspect est la création 
effective de la fonction ou sa définition.

198
00:12:40,387 --> 00:12:45,760
Qui commence comme un prototype
mais qui contient également

199
00:12:45,948 --> 00:12:50,302
ce qu'on appelle le corps de la fonction,

200
00:12:50,633 --> 00:12:53,817
qui est le code qui va être exécuté
quand on utilise la fonction.

201
00:12:54,959 --> 00:12:59,866
Le dernier aspect est donc l'utilisation
de la fonction ou son appel.

202
00:13:01,587 --> 00:13:06,068
On va utiliser la fonction 
en lui donnant des valeurs effectives

203
00:13:06,357 --> 00:13:09,258
pour ces paramètres.

204
00:13:09,258 --> 00:13:17,532
La fonction va fournir une valeur 
qu'on va pouvoir affecter à une variable.

205
00:13:17,532 --> 00:13:20,676
En pratique le programmeur-concepteur,

206
00:13:20,676 --> 00:13:26,678
c'est à dire la personne qui va écrire 
la définition de la fonction,

207
00:13:26,678 --> 00:13:32,565
n'est pas forcément la même personne 
que le programmeur-utilisateur,

208
00:13:32,565 --> 00:13:37,188
c'est à dire la personne 
qui va utiliser la fonction.

209
00:13:37,188 --> 00:13:43,745
Le programmeur-utilisateur n'a pas 
à connaître le corps de la fonction.

210
00:13:43,745 --> 00:13:48,086
Tout ce dont il a besoin de connaître 
c'est le prototype de la fonction,

211
00:13:48,086 --> 00:13:51,020
pour pouvoir l'appeler.

212
00:13:51,020 --> 00:14:00,294
Le prototype sert donc d'accord 
entre le programmeur-utilisateur

213
00:14:00,294 --> 00:14:05,484
et le programmeur-concepteur.

214
00:14:05,484 --> 00:14:09,357
Le programmeur-utilisateur doit 
respecter le prototype de la fonction

215
00:14:09,357 --> 00:14:11,685
quand il appelle la fonction.

216
00:14:11,685 --> 00:14:15,722
Le programmeur-concepteur 
va s'arranger pour que le prototype

217
00:14:15,722 --> 00:14:21,888
corresponde au problème que 
le programmeur-utilisateur veut résoudre

218
00:14:21,888 --> 00:14:23,067
en appelant la fonction.

219
00:14:23,067 --> 00:14:25,886
Prenons un nouvel exemple de programme,

220
00:14:25,886 --> 00:14:29,148
qui utilise une fonction moyenne
pour calculer la moyenne de deux valeurs.

221
00:14:29,148 --> 00:14:31,272
Je pense que vous êtes 
maintenant en mesure

222
00:14:31,272 --> 00:14:33,884
d'identifier les trois facettes 
de cette fonction moyenne

223
00:14:33,884 --> 00:14:35,897
dans ce nouveau programme.

224
00:14:35,897 --> 00:14:43,929
Nous avons tout d'abord 
ici le prototype de la fonction.

225
00:14:43,929 --> 00:14:47,713
Vous pouvez remarquer 
que la fonction a deux paramètres

226
00:14:47,713 --> 00:14:54,039
qui correspondront aux deux valeurs 
dont on veut calculer la moyenne.

227
00:14:54,039 --> 00:14:57,407
Ces deux valeurs sont ici de type <i>double</i>.

228
00:14:57,407 --> 00:15:00,880
Leur moyenne sera donc 
également de type double.

229
00:15:00,880 --> 00:15:03,484
La valeur fournie par la fonction <i>moyenne</i>

230
00:15:03,484 --> 00:15:06,896
sera également de type <i>double</i>.

231
00:15:06,896 --> 00:15:14,804
Nous avons ensuite un appel 
à notre fonction <i>moyenne</i>.

232
00:15:15,649 --> 00:15:19,766
On peut bien appeler cette fonction 
<i>moyenne</i> à cet endroit du programme

233
00:15:19,766 --> 00:15:23,512
car le prototype a été placé 
avant dans le programme.

234
00:15:24,182 --> 00:15:28,765
Cette fonction, on lui donne 
la valeur de deux variables

235
00:15:28,765 --> 00:15:35,638
<i>note1</i> et <i>note2</i> qui ont été demandées 
à l'utilisateur précédemment.

236
00:15:37,560 --> 00:15:42,515
Cette instruction affiche donc 
la valeur fournie par la fonction <i>moyenne</i>.

237
00:15:43,549 --> 00:15:50,050
Nous avons finalement 
ici la définition de la fonction,

238
00:15:50,572 --> 00:15:53,590
avec son corps, c'est à dire,

239
00:15:54,286 --> 00:16:00,281
le code qui définit comment la fonction 
va calculer la moyenne des deux valeurs.

240
00:16:00,837 --> 00:16:03,966
Nous allons donc maintenant détailler 
ces trois aspects,

241
00:16:03,966 --> 00:16:06,825
ces trois facettes des fonctions.
