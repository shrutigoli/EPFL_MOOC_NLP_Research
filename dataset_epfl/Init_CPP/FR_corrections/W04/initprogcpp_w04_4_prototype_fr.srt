1
00:00:05,659 --> 00:00:07,929
Dans une séquence vidéo précédente,

2
00:00:07,929 --> 00:00:10,809
nous avions vu ce que sont 
les trois facettes des fonctions,

3
00:00:10,951 --> 00:00:14,011
nous avions aussi vu en détail,
les appels des fonctions.

4
00:00:14,011 --> 00:00:15,551
Nous allons dans cette séquence-ci

5
00:00:15,551 --> 00:00:18,781
plus particulièrement 
nous concentrer sur l'aspect prototype.

6
00:00:19,087 --> 00:00:23,177
Dans l'exemple du cours,
l'exemple avec le calcul de la moyenne,

7
00:00:23,240 --> 00:00:28,210
le prototype de la fonction moyenne
est la ligne qui se trouve ici.

8
00:00:28,638 --> 00:00:31,418
Nous allons maintenant voir
les détails des prototypes.

9
00:00:32,105 --> 00:00:34,115
En C++, tout comme les variables,

10
00:00:34,115 --> 00:00:37,965
les fonctions doivent être 
annoncées avant d'être utilisées.

11
00:00:38,040 --> 00:00:41,830
Dans le cadre des fonctions,
c'est ce que l'on appelle le prototype.

12
00:00:42,004 --> 00:00:46,304
Le prototype sert donc à déclarer 
au reste du programme trois choses :

13
00:00:46,304 --> 00:00:48,902
le nom de la fonction, comment on va l'appeler,

14
00:00:48,902 --> 00:00:52,332
les paramètres à lui fournir 
pour que la fonction puisse fonctionner

15
00:00:52,332 --> 00:00:54,990
et enfin, le type de la valeur de retour,

16
00:00:54,990 --> 00:00:59,054
c'est-à-dire le type que la fonction 
va retourner au reste du programme.

17
00:00:59,184 --> 00:01:03,628
La syntaxe générale de déclaration 
d'un prototype de fonction est la suivante :

18
00:01:03,678 --> 00:01:05,857
on commence par annoncer 
le type de retour,

19
00:01:05,857 --> 00:01:08,007
ce que la fonction va renvoyer 
au reste du programme.

20
00:01:08,037 --> 00:01:10,587
Puis ensuite, on donne 
le nom de cette fonction.

21
00:01:10,587 --> 00:01:13,313
Et enfin, entre les parenthèses rondes,

22
00:01:13,313 --> 00:01:16,039
on va avoir la liste 
de tous les paramètres

23
00:01:16,039 --> 00:01:18,767
que la fonction doit recevoir 
pour fonctionner.

24
00:01:18,767 --> 00:01:20,737
Cette liste est éventuellement vide

25
00:01:20,737 --> 00:01:23,817
si la fonction n'a pas besoin 
de recevoir de paramètres.

26
00:01:23,817 --> 00:01:27,817
Comme exemple de prototye, 
on peut reprendre l'exemple précédent

27
00:01:27,817 --> 00:01:30,517
du code donné 
dans le transparent précédent,

28
00:01:30,517 --> 00:01:32,667
qui est le calcul de la moyenne.

29
00:01:32,937 --> 00:01:35,917
Ici, on va donc calculer 
la moyenne de deux nombres.

30
00:01:36,067 --> 00:01:40,706
Pour cela, on va dire que la fonction 
retourne au reste du programme,

31
00:01:40,713 --> 00:01:44,053
renvoie une valeur de type "double",

32
00:01:44,053 --> 00:01:48,353
qu'elle va s'appeler "moyenne" et
qu'elle va recevoir deux paramètres.

33
00:01:48,523 --> 00:01:53,954
Un paramètre x de type double, 
et un paramètre y de type double.

34
00:01:53,954 --> 00:02:01,064
Et on termine la déclaration 
du prototype avec le point virgule ";".

35
00:02:01,064 --> 00:02:04,177
La partie qui précède le ";"
dans un prototype,

36
00:02:04,177 --> 00:02:07,673
c'est ce qu'on appelle 
l'entête de la fonction

37
00:02:07,673 --> 00:02:12,443
et quand l'entête est suivie d'un ";", 
c'est ce que l'on appelle le prototype.

38
00:02:12,909 --> 00:02:16,399
La liste des paramètres 
peut éventuellement être vide.

39
00:02:16,399 --> 00:02:21,568
Si par exemple, j'ai une fonction qui 
doit demander un entier à l'utilisateur,

40
00:02:22,748 --> 00:02:25,738
on pourrait par exemple lui dire
qu'elle doit retourner à un entier,

41
00:02:25,738 --> 00:02:27,908
qu'elle doit demander un nombre.

42
00:02:28,067 --> 00:02:31,047
Et pour demander un nombre, 
elle n'a pas besoin

43
00:02:31,047 --> 00:02:33,437
de recevoir quoi que ce soit 
pour effectuer cette tâche.

44
00:02:33,437 --> 00:02:37,067
A ce moment-là, le prototype sera 
le suivant, avec ici deux parenthèses,

45
00:02:37,431 --> 00:02:41,211
sans liste de paramètres, 
deux parenthèses simplement collées.

46
00:02:42,456 --> 00:02:45,715
Le prototype sert donc à annoncer
au reste du programme

47
00:02:45,715 --> 00:02:48,204
ce que va faire la fonction.

48
00:02:48,204 --> 00:02:50,140
Pour cela, il faut donc que la fonction

49
00:02:50,140 --> 00:02:52,556
ne fasse que ce pour quoi 
elle a été prévue.

50
00:02:52,556 --> 00:02:55,454
Il ne faut absolument pas 
qu'elle ait des effets cachés,

51
00:02:55,454 --> 00:02:56,950
ce qu'on appelle des "effets de bords".

52
00:02:56,950 --> 00:03:00,650
Par exemple, si vous imaginez 
la fonction racine carrée

53
00:03:00,650 --> 00:03:02,760
qui calcule la racine d'un nombre,

54
00:03:02,832 --> 00:03:06,832
son prototype typiquement, comme on peut
le trouver dans la bibliothèque standard,

55
00:03:06,832 --> 00:03:10,832
c'est de recevoir
un argument de type "double x",

56
00:03:11,339 --> 00:03:15,339
elle s'appelle sqrt, 
et elle retourne un double,

57
00:03:15,509 --> 00:03:17,897
cette fonction, vous vous attendez

58
00:03:17,897 --> 00:03:20,625
à ce qu'elle calcule uniquement 
la racine carrée,

59
00:03:20,625 --> 00:03:23,871
et non pas à ce qu'elle 
pollue l'affichage avec des messages.

60
00:03:23,871 --> 00:03:27,139
Donc, c'est ce qu'on appelle
des effets de bords.

61
00:03:27,139 --> 00:03:30,259
C'est quand on a des effets 
qui ne sont pas attendus.

62
00:03:30,359 --> 00:03:32,889
Une fois qu'on a bien spécifié
ce que doit faire la fonction,

63
00:03:32,899 --> 00:03:34,529
alors il faut bien sûr choisir 
un nom pertinent

64
00:03:34,529 --> 00:03:38,105
qui illustre exactement 
ce que fait la fonction.

65
00:03:38,105 --> 00:03:40,043
Enfin, un dernier conseil,

66
00:03:40,043 --> 00:03:43,201
commencer par toujours faire 
le prototype de votre fonction.

67
00:03:43,201 --> 00:03:47,430
Faire le prototype de votre fonction,
ça va vous permettre de clarifier

68
00:03:47,430 --> 00:03:51,430
ce qu'elle doit recevoir, les paramètres,
on l'a vu tout à l'heure

69
00:03:51,430 --> 00:03:53,932
et aussi ce qu'elle doit fournir :

70
00:03:54,174 --> 00:03:56,224
la valeur de retour, le type de retour.

71
00:03:56,224 --> 00:04:00,374
Ce seront donc déjà deux choses
que vous aurez spécifiées

72
00:04:00,374 --> 00:04:03,104
avant même de vous préoccuper de savoir

73
00:04:03,104 --> 00:04:06,734
comment vous allez faire 
ce que doit faire la fonction.

74
00:04:07,620 --> 00:04:10,080
Résumons maintenant 
différents aspects de la syntaxe

75
00:04:10,080 --> 00:04:12,520
que nous avons vu jusqu'ici dans ce cours.

76
00:04:13,030 --> 00:04:15,140
Si vous écrivez une expression 
qui commence par un type,

77
00:04:15,140 --> 00:04:17,090
ici suivi d'un nom avec un point virgule,

78
00:04:17,120 --> 00:04:20,400
alors ce sera 
la déclaration d'une variable.

79
00:04:20,410 --> 00:04:24,410
Par contre, si vous ajoutez 
entre le nom et le point virgule, ici

80
00:04:24,410 --> 00:04:27,330
des parenthèses sans argument,

81
00:04:27,330 --> 00:04:30,060
ça sera le prototype d'une fonction,
et non pas une variable.

82
00:04:30,060 --> 00:04:32,820
Cela peut vous paraître 
peut-être un petit peu plus naturel

83
00:04:32,820 --> 00:04:36,180
si je l'avais écrit 
de cette façon ici, int f();

84
00:04:36,180 --> 00:04:39,601
on voit ici, peut-être à cause du nom,
mieux que c'est une fonction.

85
00:04:39,601 --> 00:04:44,571
Ou alors, encore mieux, si je vous écris,
comme je l'ai fait dans l'exemple précédent

86
00:04:45,015 --> 00:04:48,645
la fonction "demande nb",
ici qui ne prend aucun argument.

87
00:04:48,645 --> 00:04:52,445
Faites très attention, 
ici c'est bien un prototype de fonction.

88
00:04:52,445 --> 00:04:55,945
Et ça n'a rien à voir avec une variable,
c'est une erreur fréquemment commise.

89
00:04:56,173 --> 00:04:58,283
Si par contre, entre les parenthèses,

90
00:04:58,283 --> 00:05:01,853
vous mettez une valeur 
qui est compatible avec le type

91
00:05:01,853 --> 00:05:04,063
qui est au début de la ligne en question,

92
00:05:04,063 --> 00:05:07,353
alors vous avez de nouveau
une déclaration de variable

93
00:05:07,353 --> 00:05:10,153
et cette fois-ci, avec 
la valeur, c'est une initialisation.

94
00:05:10,153 --> 00:05:13,433
Donc cette ligne est en fait
très proche de la première ligne.

95
00:05:13,433 --> 00:05:16,693
Simplement on rajoute ici 
une valeur pour une initialisation.

96
00:05:16,693 --> 00:05:20,113
Et ça n'a absolument 
rien à voir avec la deuxième ligne.

97
00:05:20,113 --> 00:05:22,753
Donc faites très attention
à ce genre d'écriture.

98
00:05:22,753 --> 00:05:26,753
Enfin, pour l'appel de la fonction,
si on met un nom sans type devant,

99
00:05:26,753 --> 00:05:28,973
il n'y a absolument pas de type devant,

100
00:05:28,973 --> 00:05:32,333
ou on peut avoir une expression de type =
devant, par exemple z=a(5)

101
00:05:32,766 --> 00:05:35,686
mais il n'y a pas de type ici

102
00:05:35,686 --> 00:05:37,726
alors c'est bien sûr un appel de fonction

103
00:05:37,726 --> 00:05:39,976
ça vous aurait peut-être paru plus naturel

104
00:05:39,976 --> 00:05:42,176
si j'avais écrit z=f(5)

105
00:05:42,176 --> 00:05:45,926
là vous reconnaissez naturellement
un appel à une fonction f

106
00:05:45,926 --> 00:05:51,786
ou si j'avais écrit z=sqrt(2.0)

107
00:05:51,786 --> 00:05:55,749
Là, vous reconnaissez
l'appel d'une fonction.
