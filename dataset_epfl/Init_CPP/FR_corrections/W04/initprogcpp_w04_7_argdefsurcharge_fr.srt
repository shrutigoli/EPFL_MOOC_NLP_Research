1
00:00:05,935 --> 00:00:08,758
Terminons par deux notions
qui sont assez facile à comprendre.

2
00:00:08,758 --> 00:00:11,510
Tout d'abord, les arguments par défaut.

3
00:00:11,510 --> 00:00:14,590
On peut, dans un prototype de fonctions,

4
00:00:14,590 --> 00:00:16,852
donner des valeurs par défaut

5
00:00:16,852 --> 00:00:19,824
à certains des paramètres
de cette fonction.

6
00:00:20,337 --> 00:00:22,293
Et dans ce cas là,
il n'est plus nécessaire

7
00:00:22,293 --> 00:00:26,091
de fournir de valeurs, c'est à dire
d'arguments à ces paramètres

8
00:00:26,501 --> 00:00:28,876
quand on appelle la fonction.

9
00:00:29,186 --> 00:00:31,751
Pour pouvoir définir un tel paramètre

10
00:00:31,751 --> 00:00:34,156
avec une valeur par défaut,

11
00:00:34,156 --> 00:00:37,197
il suffit, lors de la déclaration
du paramètre

12
00:00:37,197 --> 00:00:39,187
dans le prototype de la fonction,

13
00:00:39,187 --> 00:00:43,506
d'ajouter le signe '=' (égal)
suivi de la valeur par défaut

14
00:00:43,506 --> 00:00:45,334
qu'on veut donner à ce paramètre.

15
00:00:45,334 --> 00:00:47,322
Un peu comme dans une affectation.

16
00:00:47,819 --> 00:00:49,676
Et attention,

17
00:00:49,676 --> 00:00:52,238
ces paramètres, avec valeur par défaut

18
00:00:52,238 --> 00:00:54,699
doivent forcément apparaître en dernier

19
00:00:54,699 --> 00:00:57,504
dans la liste des paramètres
de la fonction.

20
00:00:58,746 --> 00:01:01,625
Prenons l'exemple d'une fonction
qui va afficher une ligne

21
00:01:01,625 --> 00:01:03,125
de plusieurs caractères.

22
00:01:03,131 --> 00:01:06,424
Le prototype
d'une telle fonction se trouve ici,

23
00:01:06,753 --> 00:01:09,513
le nom de la fonction est
<i>affiche_ligne</i>.

24
00:01:09,513 --> 00:01:12,261
Cette fonction a deux paramètres :

25
00:01:12,261 --> 00:01:17,199
le premier paramètre va permettre
de définir le caractère

26
00:01:17,217 --> 00:01:18,976
qu'on veut répéter sur la ligne.

27
00:01:18,976 --> 00:01:22,007
Le type <i>char</i>, sert simplement à dire

28
00:01:22,007 --> 00:01:26,194
que le paramètre <i>elt</i>
va contenir un caractère.

29
00:01:26,699 --> 00:01:29,510
Le deuxième paramètre de la fonction :

30
00:01:29,510 --> 00:01:33,067
le nombre de fois
qu'on veut répéter le caractère,

31
00:01:33,067 --> 00:01:34,854
et vous pouvez constater que

32
00:01:34,854 --> 00:01:39,263
ce paramètre a une valeur par défaut
qui est "5".

33
00:01:39,263 --> 00:01:41,593
Ce qui veut dire que quand j'appelle

34
00:01:41,593 --> 00:01:45,137
la fonction <i>affiche_ligne</i>
de cette façon ci,

35
00:01:45,137 --> 00:01:47,632
c'est à dire, avec un seul argument

36
00:01:47,632 --> 00:01:52,111
où le premier argument
est le caractère '*' ( étoile ),

37
00:01:52,111 --> 00:01:57,550
le paramètre <i>elt</i>
va contenir le caractère étoile.

38
00:01:57,550 --> 00:02:00,729
Comme, je n'ai pas de deuxième argument

39
00:02:00,729 --> 00:02:03,214
à cet appel de ma fonction <i>affiche_ligne</i>,

40
00:02:03,524 --> 00:02:06,930
le deuxième paramètre <i>nb</i> va prendre

41
00:02:06,930 --> 00:02:09,773
la valeur par défaut qui est 5 .

42
00:02:11,084 --> 00:02:16,239
Et donc, cet appel
à la fonction <i>affiche_ligne</i>

43
00:02:16,239 --> 00:02:20,279
va m'afficher une ligne
de 5 étoiles ( * ) .

44
00:02:21,052 --> 00:02:22,975
Maintenant,

45
00:02:22,975 --> 00:02:25,958
le deuxième appel

46
00:02:27,109 --> 00:02:29,698
à ma fonction <i>affiche_ligne</i> ici

47
00:02:29,698 --> 00:02:32,459
qui a cette fois deux arguments

48
00:02:32,459 --> 00:02:35,030
où le premier argument
est le caractère '+' ( plus )

49
00:02:35,030 --> 00:02:38,898
et le deuxième argument
est la valeur 8.

50
00:02:39,468 --> 00:02:41,638
Dans ce cas là,

51
00:02:41,638 --> 00:02:46,177
le paramètre <i>elt</i>
va contenir le caractère '+'

52
00:02:46,816 --> 00:02:49,919
et le deuxième paramètre <i>nb</i>

53
00:02:49,919 --> 00:02:52,982
va non pas prendre la valeur 
par défaut 5,

54
00:02:52,982 --> 00:02:56,067
mais la valeur
qui est passée en argument ici,

55
00:02:56,067 --> 00:02:57,689
c'est à dire 8.

56
00:02:57,689 --> 00:03:00,638
Et donc cet appel
à ma fonction <i>affiche_ligne</i>

57
00:03:00,638 --> 00:03:05,533
va m'afficher huit fois
le caractère '+' .

58
00:03:06,649 --> 00:03:09,487
Deux remarques sur cette notion
d'arguments par défaut,

59
00:03:09,487 --> 00:03:12,688
les arguments aux valeurs par défaut

60
00:03:12,688 --> 00:03:17,405
doivent être spécifiés
dans le prototype de la fonction

61
00:03:17,405 --> 00:03:20,436
et non pas dans la définition
de la fonction.

62
00:03:21,010 --> 00:03:25,659
De plus, lors de l'appel,
à une fonction avec plusieurs paramètres

63
00:03:25,659 --> 00:03:27,890
ayant des valeurs par défaut,

64
00:03:27,890 --> 00:03:32,239
les arguments omis
doivent être les derniers

65
00:03:32,239 --> 00:03:36,787
et omis dans l'ordre
de la liste des paramètres.

66
00:03:36,787 --> 00:03:43,219
Je vais prendre l'exemple
de cette fonction

67
00:03:44,080 --> 00:03:47,966
qui a un premier paramètre
qui s'appelle "i"

68
00:03:47,966 --> 00:03:50,058
qui n'a pas de valeur par défaut,

69
00:03:50,058 --> 00:03:53,833
un deuxième paramètre "c"
qui a le caractère "a"

70
00:03:53,833 --> 00:03:55,986
par défaut.

71
00:03:57,218 --> 00:03:59,569
Et un troisième paramètre " x "

72
00:03:59,569 --> 00:04:02,035
qui a la valeur 0 par défaut.

73
00:04:02,552 --> 00:04:07,580
Si maintenant j'appelle ma fonction " f "
de cette façon ci,

74
00:04:07,593 --> 00:04:09,464
c'est à dire avec un seul argument,

75
00:04:09,464 --> 00:04:13,488
le paramètre "i" va prendre
la valeur 1

76
00:04:13,642 --> 00:04:16,451
le paramètre "c" va prendre

77
00:04:16,451 --> 00:04:19,400
le caractère par défaut
c'est à dire "a",

78
00:04:19,950 --> 00:04:23,712
et le paramètre "x"
va prendre la valeur, par défaut,

79
00:04:23,775 --> 00:04:26,019
la sienne qui est 0.

80
00:04:27,121 --> 00:04:29,820
Je peux également appeler ma fonction

81
00:04:29,820 --> 00:04:34,157
"f" de cette façon ci,
avec deux arguments,

82
00:04:34,157 --> 00:04:35,867
"i" va prendre

83
00:04:37,057 --> 00:04:41,010
la valeur du premier argument
c'est à dire 1,

84
00:04:41,023 --> 00:04:44,569
"c" va contenir le deuxième argument

85
00:04:44,569 --> 00:04:47,947
c'est à dire le caractère "b",

86
00:04:47,947 --> 00:04:50,579
et le troisième paramètre "x"

87
00:04:51,039 --> 00:04:53,455
va continuer à prendre
sa valeur par défaut

88
00:04:53,455 --> 00:04:55,223
c'est à dire 0.

89
00:04:55,653 --> 00:04:59,525
Maintenant si j'essaye
d'appeler ma fonction " f "

90
00:04:59,525 --> 00:05:01,445
de cette façon là,

91
00:05:01,445 --> 00:05:04,210
le compilateur va refuser l'appel

92
00:05:04,210 --> 00:05:09,284
parce que le deuxième argument ici
est de type <i>double</i>,

93
00:05:09,557 --> 00:05:14,053
le compilateur va essayer d'affecter
cette valeur de type double

94
00:05:14,463 --> 00:05:19,303
au deuxième paramètre "c"
qui est de type <i>char</i>.

95
00:05:19,303 --> 00:05:23,304
Donc cette appel ci
va être refusé par le compilateur.

96
00:05:24,224 --> 00:05:27,006
Maintenant on peut être tentés

97
00:05:27,006 --> 00:05:30,274
d'appeler la fonction " f "
de cette façon ci,

98
00:05:30,282 --> 00:05:34,241
c'est à dire, en omettant
le deuxième paramètre.

99
00:05:34,540 --> 00:05:38,719
Malheureusement, le compilateur C++
va refuser un tel appel.

100
00:05:40,874 --> 00:05:42,466
Et finalement,

101
00:05:42,466 --> 00:05:46,740
si j'essaye d'appeler ma fonction
" f " de cette façon ci,

102
00:05:46,740 --> 00:05:48,544
avec ces trois arguments,

103
00:05:48,544 --> 00:05:50,218
qu'est ce qu'il va se passer ?

104
00:05:50,218 --> 00:05:53,850
Le paramètre "i" va prendre
la valeur 1,

105
00:05:54,260 --> 00:05:58,722
le paramètre "c", va contenir
le caractère "b" ,

106
00:05:59,578 --> 00:06:05,546
et le paramètre "x" va prendre
la valeur du troisième argument

107
00:06:05,546 --> 00:06:07,574
qui est la valeur 3.

108
00:06:08,660 --> 00:06:12,560
Nous allons terminer en abordant
la surcharge de fonctions.

109
00:06:12,850 --> 00:06:15,315
En C++ il est possible de définir

110
00:06:15,315 --> 00:06:17,496
plusieurs fonctions qui ont le même nom

111
00:06:17,496 --> 00:06:20,091
si ces fonctions ont
des paramètres différents.

112
00:06:20,091 --> 00:06:26,139
C'est à dire, si le nombre ou le type
des paramètres sont différents.

113
00:06:26,549 --> 00:06:30,078
Ça va permettre au compilateur
de distinguer entre les fonctions.

114
00:06:30,920 --> 00:06:33,749
C'est ce qu'on appelle
la surcharge des fonctions

115
00:06:33,749 --> 00:06:36,347
et c'est très utile
quand on va voir des fonctions

116
00:06:36,347 --> 00:06:39,688
qui font des traitements similaires,

117
00:06:39,695 --> 00:06:42,319
mais à partir de données différentes.

118
00:06:43,463 --> 00:06:46,443
Donc, en c++ ce qui différencie
deux fonctions

119
00:06:46,443 --> 00:06:48,475
ce n'est pas seulement
le nom des fonctions,

120
00:06:48,475 --> 00:06:50,898
mais aussi le type de leurs paramètres,

121
00:06:50,898 --> 00:06:55,048
ce qu'on appelle techniquement
la 'signature' de la fonction.

122
00:06:55,063 --> 00:06:57,001
À noter que le type de retour

123
00:06:57,001 --> 00:06:59,227
lui ne fait pas partie de ces distinctions,

124
00:06:59,227 --> 00:07:01,385
on n'a pas le droit d'avoir deux fonctions

125
00:07:01,385 --> 00:07:03,773
de même nom et de même paramètre

126
00:07:03,773 --> 00:07:06,572
qui ne différeraient que
par le type de retour.

127
00:07:06,572 --> 00:07:10,182
C'est à dire que je peux avoir
deux fonctions " f ",

128
00:07:10,512 --> 00:07:14,236
la première fonction a
un paramètre de type <i>int</i>,

129
00:07:14,236 --> 00:07:18,079
la deuxième fonction a
un paramètre de type <i>double</i>,

130
00:07:18,439 --> 00:07:21,501
et le type de retour
pour ces deux fonctions

131
00:07:21,501 --> 00:07:24,888
est le même,
par exemple, <i>int</i>.

132
00:07:25,687 --> 00:07:29,515
En revanche, je ne peux pas avoir
deux fonctions " f "

133
00:07:29,515 --> 00:07:34,292
qui ont toutes les deux
un paramètre de type <i>int</i> par exemple,

134
00:07:34,732 --> 00:07:39,107
et qui ne différerait
que par le type de retour.

135
00:07:39,537 --> 00:07:41,739
Par exemple <i>int</i> pour la première,

136
00:07:41,739 --> 00:07:43,979
et <i>double</i> pour la deuxième.

137
00:07:45,363 --> 00:07:49,495
En résumé, en c++, on peut avoir
des fonctions ayant le même nom,

138
00:07:49,495 --> 00:07:52,408
du moment qu'elles aient
des paramètres de types différents.

139
00:07:52,868 --> 00:07:55,663
Par exemple, je peux avoir trois fonctions

140
00:07:55,663 --> 00:07:57,867
qui s'appellent toutes <i>affiche</i>.

141
00:08:00,073 --> 00:08:03,561
La première fonction
a un paramètre de type <i>int</i>,

142
00:08:03,561 --> 00:08:06,982
la deuxième, un paramètre de type <i>double</i>,

143
00:08:06,982 --> 00:08:10,932
et la troisième, deux paramètres
tout les deux de type <i>int</i>.

144
00:08:10,940 --> 00:08:13,665
Ce sont donc bien
3 fonctions différentes.

145
00:08:14,501 --> 00:08:19,874
Maintenant, si j'appelle <i>affiche(1)</i>,

146
00:08:19,874 --> 00:08:22,841
comme l'argument 1 est de type <i>int</i>,

147
00:08:23,271 --> 00:08:25,466
c'est la première fonction,

148
00:08:25,766 --> 00:08:30,175
qui a un paramètre de type <i>int</i>
qui va être appelé.

149
00:08:30,175 --> 00:08:33,364
Et dans ce cas là,
j'obtiendrai l'affichage

150
00:08:34,634 --> 00:08:38,000
"entier : 1".

151
00:08:39,161 --> 00:08:43,982
Si maintenant j'appelle <i>affiche(1.0)</i>

152
00:08:44,599 --> 00:08:49,272
comme l'argument (1.0) est de type <i>double</i>,

153
00:08:49,582 --> 00:08:51,536
c'est la deuxième fonction

154
00:08:51,536 --> 00:08:55,750
qui a un paramètre de type <i>double</i>
qui sera appelée,

155
00:08:55,755 --> 00:08:58,041
et j'obtiendrai comme affichage

156
00:08:59,071 --> 00:09:02,317
"reel : 1".

157
00:09:03,967 --> 00:09:08,373
À l'appel <i>d'affiche(1,1)</i>

158
00:09:08,373 --> 00:09:13,623
comme les deux arguments
sont tous les deux de type <i>int</i>,

159
00:09:14,293 --> 00:09:17,253
c'est la troisième fonction

160
00:09:17,923 --> 00:09:19,851
qui sera appelée,

161
00:09:20,271 --> 00:09:26,063
et j'obtiendrai comme affichage
"couple : 11".

162
00:09:28,435 --> 00:09:32,517
Attention, je ne peux pas définir
ces 2 fonctions ensemble

163
00:09:32,517 --> 00:09:34,201
dans un même programme.

164
00:09:34,201 --> 00:09:37,133
La première fonction
a un paramètre de type <i>int</i>,

165
00:09:37,133 --> 00:09:39,712
la deuxième a deux paramètres,

166
00:09:39,712 --> 00:09:41,704
tous les deux de types <i>int</i>,

167
00:09:41,704 --> 00:09:44,279
mais le deuxième paramètre
a une valeur par défaut.

168
00:09:44,664 --> 00:09:51,160
Si maintenant j'appelle
<i>affiche(2)</i>

169
00:09:51,860 --> 00:09:54,918
on ne peut pas savoir si je veux appeler

170
00:09:54,918 --> 00:09:57,161
la première fonction "affiche"

171
00:09:57,161 --> 00:10:00,878
en passant 2 comme argument
au paramètre "x",

172
00:10:00,878 --> 00:10:03,017
ou la deuxième fonction,

173
00:10:03,187 --> 00:10:06,056
en passant 2 au paramètre "x1"

174
00:10:06,056 --> 00:10:09,919
et utiliser la valeur par défaut 1
le paramètre "x2".

175
00:10:09,935 --> 00:10:11,736
Il y a donc une ambiguïté

176
00:10:11,736 --> 00:10:14,277
entre ces deux fonctions à cet appel.

177
00:10:14,277 --> 00:10:16,488
Donc, c'est pour ça

178
00:10:17,378 --> 00:10:19,753
que définir ces deux fonctions ensemble

179
00:10:19,753 --> 00:10:23,280
dans le même programme
est interdit.
