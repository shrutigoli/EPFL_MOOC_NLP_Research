1
00:00:06,369 --> 00:00:09,182
Dans une séquence précédente, nous 
avons introduit la notion de fonction

2
00:00:09,182 --> 00:00:10,957
et son utilité en programmation.

3
00:00:11,230 --> 00:00:14,301
Nous allons aujourd'hui nous intéresser
à ce qui se passe lorsqu'on utilise,

4
00:00:14,301 --> 00:00:16,060
lorsqu'on appelle une fonction.

5
00:00:16,347 --> 00:00:19,933
Concrètement, à ce stade, nous savons
qu'à la notion de « fonction »

6
00:00:19,933 --> 00:00:25,347
sont associées 3 facettes : 
le prototype, la définition, l'appel,

7
00:00:25,517 --> 00:00:29,969
et nous allons détailler ce qui se passe
au moment où on appelle une fonction.

8
00:00:30,828 --> 00:00:33,269
Reprenons l'exemple du 
calcul des moyennes.

9
00:00:33,552 --> 00:00:38,194
Nous avons ici le cas d'un petit programme
principal qui demande à l'utilisateur

10
00:00:38,194 --> 00:00:44,177
d'introduire deux notes, qui lit ces deux
notes depuis l'entrée standard

11
00:00:44,177 --> 00:00:46,818
et qui enfin affiche la moyenne
de ces deux notes.

12
00:00:48,322 --> 00:00:53,548
Le calcul de la moyenne est réalisé
au moyen d'un appel de fonction,

13
00:00:53,548 --> 00:00:57,093
tel que vous le voyez ici, 
et c'est les mécanismes appliqués

14
00:00:57,093 --> 00:00:59,496
par cet appel de fonction que 
nous allons maintenant étudier.

15
00:01:00,742 --> 00:01:04,731
Plaçons-nous dans une situation concrète
où l'on souhaite calculer la moyenne

16
00:01:04,731 --> 00:01:10,151
de deux nombres, passer à la fonction
moyenne sous la forme d'expression C++.

17
00:01:10,371 --> 00:01:15,697
Les arguments passés à la fonction moyenne
au moment de l'appel correspondent

18
00:01:15,697 --> 00:01:20,038
évidemment aux paramètres attendus par la
fonction pour qu'elle puisse s'exécuter.

19
00:01:20,863 --> 00:01:24,826
Notez que l'on appelle usuellement
« paramètres » les données nécessaires

20
00:01:24,826 --> 00:01:28,136
à la fonction pour qu'elle puisse 
s'exécuter telle que décrite dans

21
00:01:28,136 --> 00:01:33,206
le prototype, et par « argument » 
les valeurs que l'on passe effectivement

22
00:01:33,206 --> 00:01:36,469
à la fonction au moment où on 
l'invoque, où on l'appelle.

23
00:01:36,962 --> 00:01:39,720
Donc, nous allons maintenant disséquer
les différentes étapes qui ont lieu

24
00:01:39,720 --> 00:01:42,660
lorsqu'un tel appel est réalisé.

25
00:01:43,052 --> 00:01:48,672
Première étape : on commence par évaluer
les arguments passés à la fonction moyenne

26
00:01:48,672 --> 00:01:49,739
au moment de l'appel.

27
00:01:49,949 --> 00:01:53,716
En C++, on ne peut pas présupposer 
de l'ordre selon lequel cette évaluation

28
00:01:53,716 --> 00:01:57,164
est faite, et donc ici on part 
de l'exemple de la situation

29
00:01:57,164 --> 00:02:01,017
où c'est le second argument 
qui est évalué en premier.

30
00:02:01,783 --> 00:02:04,562
Donc on évalue le second argument,
ce qui a pour conséquence

31
00:02:04,562 --> 00:02:07,909
de produire la valeur 4.25.

32
00:02:09,996 --> 00:02:16,146
Ensuite, le premier argument est évalué
à son tour, ce qui produit

33
00:02:16,146 --> 00:02:17,279
la valeur 2.3.

34
00:02:19,277 --> 00:02:27,329
Seconde étape : il s'agit maintenant 
d'apparier les arguments d'appel

35
00:02:28,209 --> 00:02:31,890
de la fonction avec les paramètres
attendus par la fonction moyenne.

36
00:02:34,362 --> 00:02:37,539
Cet appariement se fait par le biais 
d'une affectation, donc on va affecter

37
00:02:37,539 --> 00:02:43,669
à x le résultat de l'évaluation 
du premier argument, à savoir 2.3,

38
00:02:44,761 --> 00:02:49,824
et on va affecter à y le résultat 
de l'évaluation du second argument,

39
00:02:49,824 --> 00:02:51,751
à savoir 4.25.

40
00:02:52,803 --> 00:02:56,728
La fonction moyenne dispose désormais
de valeurs concrètes dans x et y,

41
00:02:56,728 --> 00:02:59,380
avec lesquelles elle va 
pouvoir travailler, s'exécuter.

42
00:03:00,723 --> 00:03:05,629
Troisième étape : on commence 
l'exécution de la fonction moyenne.

43
00:03:06,229 --> 00:03:09,473
Ici, en l'occurrence, toutes les 
instructions précédant cette instruction

44
00:03:09,473 --> 00:03:12,903
terminale, l'instruction <i>return</i> 
vont être exécutées.

45
00:03:13,425 --> 00:03:17,527
Dans le cas présent, il n'existe aucune
instruction précédant le <i>return</i>,

46
00:03:17,527 --> 00:03:21,296
donc la troisième étape ne fait
rien de particulier.

47
00:03:22,827 --> 00:03:27,194
Enfin, l'instruction <i>return</i> 
est exécutée.

48
00:03:27,650 --> 00:03:33,176
On commence par évaluer l'expression
suivant le mot clé <i>return</i>,

49
00:03:33,176 --> 00:03:37,330
donc ici, en l'occurrence, cette
expression est évaluée avec

50
00:03:37,330 --> 00:03:42,049
des valeurs concrètes pour x et y,
ce qui a pour résultat

51
00:03:42,049 --> 00:03:46,918
de produire la valeur 3.275.

52
00:03:48,386 --> 00:03:56,850
Ultime étape : on met la valeur produite
par l'expression, on met cette valeur

53
00:03:56,850 --> 00:04:00,287
à disposition de celui qui a invoqué
la fonction moyenne par le biais

54
00:04:00,287 --> 00:04:05,649
d'une instruction <i>return</i>, ce qui veut
dire que cet appel de fonction

55
00:04:05,649 --> 00:04:11,345
peut désormais être remplacé par la
valeur résultant de l'appel de fonction,

56
00:04:11,345 --> 00:04:14,493
à savoir 3.275.

57
00:04:14,856 --> 00:04:22,317
Donc, à l'issue de la dernière étape,
la variable Z ôte ici la valeur 3.275.

58
00:04:23,364 --> 00:04:26,730
Voici donc un petit résumé des différentes
étapes que nous venons d'examiner.

59
00:04:26,986 --> 00:04:30,610
Lorsqu'un appel de fonction a lieu
dans un programme, cinq étapes ont lieu

60
00:04:30,610 --> 00:04:33,929
dans le cas le plus général : 
première étape, les expressions qui sont

61
00:04:33,929 --> 00:04:36,583
passées en argument à 
la fonction sont évaluées.

62
00:04:36,583 --> 00:04:40,872
Seconde étape : les valeurs résultant
de l'évaluation de ces expressions

63
00:04:40,872 --> 00:04:43,406
sont affectées aux paramètres 
de la fonction.

64
00:04:44,841 --> 00:04:48,186
Troisième étape : les paramètres 
de la fonction disposent désormais

65
00:04:48,186 --> 00:04:51,015
de valeurs concrètes avec lesquelles
la fonction peut travailler,

66
00:04:51,015 --> 00:04:53,128
le corps de la fonction s'exécute.

67
00:04:53,466 --> 00:04:57,485
Quatrième étape : l'expression qui suit
la première commande <i>return</i> rencontrée

68
00:04:57,485 --> 00:05:02,557
à l'exécution est évaluée et le résultat
de cette évaluation est retourné

69
00:05:02,791 --> 00:05:08,090
comme résultat de l'appel, ce qui en clair
signifie que cette valeur remplace

70
00:05:08,090 --> 00:05:10,062
désormais l'expression de l'appel.

71
00:05:10,916 --> 00:05:14,069
Ceci est ce qui se produit 
dans le cas le plus général.

72
00:05:14,251 --> 00:05:18,987
Le cas où une fonction a besoin, 
pour travailler, de données entrantes

73
00:05:18,987 --> 00:05:25,207
d'arguments, de paramètres entrants
et fournit en sortie une valeur concrète.

74
00:05:25,873 --> 00:05:26,965
Il s'agit du cas le plus général.

75
00:05:27,070 --> 00:05:32,201
Il existe des situations où ce schéma 
en cinq étapes est un petit peu simplifié.

76
00:05:32,201 --> 00:05:37,468
Première situation : il existe des cas
où une fonction peut par exemple

77
00:05:37,468 --> 00:05:43,316
fournir un résultat en sortie, 
mais n'a pas besoin de données entrantes

78
00:05:43,316 --> 00:05:44,356
pour pouvoir travailler.

79
00:05:44,785 --> 00:05:50,281
Donc, dans ce cas de figure, puisqu'il n'y
a pas besoin d'arguments en entrée,

80
00:05:50,281 --> 00:05:52,761
les étapes 1 et 2 n'ont pas lieu.

81
00:05:53,541 --> 00:05:57,432
Deuxième cas de figure : il peut 
se produire des situations où une fonction

82
00:05:57,432 --> 00:06:04,612
réalise des traitements, mais ne fournit
en sortie aucune valeur concrète.

83
00:06:04,908 --> 00:06:07,407
Par exemple : une fonction peut réaliser
un certain nombre d'affichages

84
00:06:07,407 --> 00:06:10,943
sur un terminal, mais ne pas fournir
de valeurs en sortie,

85
00:06:11,157 --> 00:06:15,063
et dans ce cas de figure, 
les étapes 4 et 5 n'ont pas lieu.

86
00:06:15,904 --> 00:06:20,956
Il existe un schéma de passage d'arguments
particulier, que l'on va examiner

87
00:06:20,956 --> 00:06:24,387
un petit peu plus tard, qui s'appelle le
« passage par références »

88
00:06:24,387 --> 00:06:28,001
où l'étape 2 n'a pas lieu, mais nous 
examinerons tout cela en détails

89
00:06:28,001 --> 00:06:30,307
un tout petit peu plus loin 
dans cette séquence.

90
00:06:32,197 --> 00:06:35,028
Autre exemple d'appel qui illustre 
le fait qu'une fonction peut parfaitement

91
00:06:35,028 --> 00:06:38,677
appeler une autre fonction 
au moment où elle s'exécute :

92
00:06:38,677 --> 00:06:41,344
nous avons le cas ici d'une fonction 
« affiche score » dont le but

93
00:06:41,344 --> 00:06:44,856
est d'afficher le score d'un joueur.
Elle a besoin de 3 données entrantes,

94
00:06:44,856 --> 00:06:46,912
elle fonctionne au moyen de 3 paramètres : 

95
00:06:46,912 --> 00:06:50,191
le joueur, codifié ici 
au moyen d'un entier ;

96
00:06:50,191 --> 00:06:53,469
le nombre de points qu'il a gagnés
pendant sa partie du jeu ; 

97
00:06:53,469 --> 00:06:56,737
et le temps qu'il a passé pour gagner
les points en question.

98
00:06:56,845 --> 00:07:00,584
Et la fonction « affiche score » va
simplement afficher le score du joueur,

99
00:07:00,584 --> 00:07:04,333
lequel est calculé au moyen de l'appel
d'une fonction « score ».

100
00:07:04,333 --> 00:07:09,515
La fonction « score », elle, calcule le
score, retourné sous la forme d'un entier,

101
00:07:09,515 --> 00:07:12,240
en fonction du nombre de points
et du temps de jeu.

102
00:07:12,404 --> 00:07:15,329
Donc, ceci illustre le fait 
qu'une fonction peut parfaitement

103
00:07:15,329 --> 00:07:16,620
en appeler une autre.

104
00:07:16,620 --> 00:07:19,207
La seule chose à respecter, 
la règle d'or, c'est d'avoir

105
00:07:19,207 --> 00:07:23,557
prototypé la fonction avant l'appel. 
Ici avant d'appeler la fonction « score »,

106
00:07:23,557 --> 00:07:25,969
il faut l'avoir au préalable prototypée.

107
00:07:27,259 --> 00:07:30,693
Et voici enfin une petite synthèse 
de l'appel fonctionnel.

108
00:07:30,802 --> 00:07:35,413
Donc, une fonction préalablement 
prototypée peut être appelée

109
00:07:35,413 --> 00:07:36,971
dans un programme.

110
00:07:36,971 --> 00:07:40,787
Ici, en l'occurrence, elle est appelée
dans le corps d'une autre fonction.

111
00:07:40,787 --> 00:07:43,601
Au moment de l'appel, il y a 
un appariement qui est fait

112
00:07:43,601 --> 00:07:47,898
entre les arguments d'appel 
et les paramètres de la fonction.

113
00:07:47,898 --> 00:07:53,213
Ici, concrètement, l'argument y va être
copié dans le paramètre x.

114
00:07:53,472 --> 00:07:56,586
Le paramètre x a désormais une valeur 
concrète avec laquelle le corps

115
00:07:56,586 --> 00:07:58,156
de la fonction peut s'exécuter.

116
00:07:58,715 --> 00:08:03,091
L'expression qui suit le <i>return</i> 
est évaluée et mise à disposition

117
00:08:03,091 --> 00:08:06,263
du programme appelant par le biais
de l'instruction <i>return</i>.

118
00:08:06,263 --> 00:08:10,321
Donc, ici, l'appel de fonction est 
remplacé par le résultat de l'évaluation

119
00:08:10,321 --> 00:08:16,229
du <i>return</i> et peut être affecté à 
une variable du programme appelant.

120
00:08:16,515 --> 00:08:18,565
Vous aurez sans doute constaté, 
tout au long de cette séquence,

121
00:08:18,565 --> 00:08:21,024
qu'il existe un certain jargon, 
une terminologie associée

122
00:08:21,024 --> 00:08:21,998
à l'appel fonctionnel.

123
00:08:22,175 --> 00:08:23,690
J'ai parlé d'« appeler » une fonction,

124
00:08:23,690 --> 00:08:26,040
j'ai parlé de « passer » des 
arguments à une fonction.

125
00:08:26,297 --> 00:08:28,932
Résumons maintenant 
un peu ce jargon.

126
00:08:29,085 --> 00:08:31,998
Vous aurez compris que lorsque je parle
d'appeler une fonction, je parle

127
00:08:31,998 --> 00:08:34,573
concrètement du fait de l'utiliser.

128
00:08:34,573 --> 00:08:38,616
Ici, j'utilise la fonction f pour calculer
une valeur que je stocke ensuite

129
00:08:38,616 --> 00:08:40,000
dans une variable x.

130
00:08:40,458 --> 00:08:44,859
Lorsque je dis qu'une valeur est passée
en argument d'une fonction,

131
00:08:44,859 --> 00:08:50,258
je signifie que cette valeur est copiée
dans un paramètre de la fonction.

132
00:08:50,593 --> 00:08:54,886
Et enfin, lorsque je dis qu'une fonction
retourne une valeur y, je signifie

133
00:08:54,886 --> 00:08:59,608
que l'expression de l'appel de la fonction
est remplacée par la valeur retournée.

134
00:08:59,922 --> 00:09:04,397
Prenons un exemple concret ici :
imaginons que, si nous ayons affaire

135
00:09:04,397 --> 00:09:12,073
à une petite fonction f qui retourne
un résultat y, imaginons que concrètement,

136
00:09:12,073 --> 00:09:15,460
au moment de l'appel 
la valeur de ce y vaille 5.

137
00:09:16,330 --> 00:09:21,818
Dire que la fonction retourne 5 ici
signifie simplement que je peux remplacer

138
00:09:21,818 --> 00:09:24,632
cet appel par la valeur de retour,
c'est-à-dire 5.

139
00:09:25,235 --> 00:09:28,713
Ainsi, je peux parler aussi bien, 
je peux dire de façon indifférenciée,

140
00:09:28,713 --> 00:09:33,521
cosinus de 0 retourne le cosinus de 0
ou cosinus de 0 retourne 1.
