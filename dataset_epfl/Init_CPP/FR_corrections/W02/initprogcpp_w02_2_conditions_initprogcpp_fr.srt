1
00:00:00,000 --> 00:00:05,523
Dans une séquence vidéo précédente, nous
avons

2
00:00:05,523 --> 00:00:08,690
introduit l'instruction de branchement
conditionnel, le if.

3
00:00:08,690 --> 00:00:10,283
Et nous avons vu que, pour pouvoir

4
00:00:10,283 --> 00:00:13,650
fonctionner, cette instruction a besoin
d'exprimer des conditions.

5
00:00:13,650 --> 00:00:15,214
Les conditions que nous avons employées

6
00:00:15,214 --> 00:00:16,962
jusqu'ici étaient des conditions simples,
qui

7
00:00:16,962 --> 00:00:20,231
consistaient par exemple à comparer la
valeur d'une variable avec une valeur.

8
00:00:20,231 --> 00:00:22,277
Nous allons voir maintenant, qu'en C++, il

9
00:00:22,277 --> 00:00:25,200
est possible d'exprimer des conditions
plus complexes.

10
00:00:25,200 --> 00:00:28,858
Vous avez ici un exemple d'instruction de
branchement conditionnel, un

11
00:00:28,858 --> 00:00:32,363
if tel que nous avons déjà eu l'occasion
d'en rencontrer précédemment.

12
00:00:32,363 --> 00:00:35,549
Nous voyons que pour écrire cette
instruction, nous avons besoin

13
00:00:35,549 --> 00:00:38,712
de formuler une condition, ce que l'on
voit concrètement ici.

14
00:00:38,712 --> 00:00:42,078
La condition dans le cas présent, est une
condition simple, qui

15
00:00:42,078 --> 00:00:46,232
consiste à comparer la valeur d'une
variable n avec la valeur 5.

16
00:00:46,232 --> 00:00:50,410
Petit détail syntaxique: la condition dans
une instruction

17
00:00:50,410 --> 00:00:52,710
de branchement conditionnel est toujours
entourée de

18
00:00:52,710 --> 00:00:55,880
parenthèses, ce que l'on voit concrètement
ici.

19
00:00:55,880 --> 00:00:59,348
Une condition en C++, est en fait une
sorte

20
00:00:59,348 --> 00:01:04,269
d'expression dont la particularité est de
retourner deux valeurs possibles.

21
00:01:04,269 --> 00:01:06,360
Ces valeurs sont soit "true", soit
"false".

22
00:01:06,360 --> 00:01:10,167
Tout simplement, une condition sera
évaluée à "true" quand

23
00:01:10,167 --> 00:01:13,997
elle est vraie, et évaluée à "false"
lorsqu'elle est fausse.

24
00:01:13,997 --> 00:01:15,906
Prenons un exemple concret,

25
00:01:15,906 --> 00:01:19,724
imaginons que j'ai une variable n dont la
valeur est zéro,

26
00:01:19,724 --> 00:01:23,540
et j'écris la condition n inférieur à 5
que je veux évaluer.

27
00:01:23,540 --> 00:01:27,110
Ici la valeur n, zéro, est bien inférieur
à 5, ce qui veut dire

28
00:01:27,110 --> 00:01:29,824
que cette condition est vraie, lorsque je

29
00:01:29,824 --> 00:01:33,130
l'évalue elle va donc retourner la valeur
"true".

30
00:01:33,130 --> 00:01:36,141
Imaginons maintenant que n vaille 10.

31
00:01:36,141 --> 00:01:40,973
J'évalue la même expression.
Evidemment ceci n'est plus

32
00:01:40,973 --> 00:01:45,238
vérifié, la condition est fausse, par
conséquent l'évaluation

33
00:01:45,238 --> 00:01:48,460
de la condition va me retourner la valeur
"false".

34
00:01:48,460 --> 00:01:51,327
Commençons par examiner de façon un peu
plus exhaustive

35
00:01:51,327 --> 00:01:54,350
comment on peut formuler des conditions
simples, en C++.

36
00:01:54,350 --> 00:01:59,370
La vocation d'une condition simple est de
comparer deux expressions,

37
00:01:59,370 --> 00:02:03,650
et pour cela nous avons besoin d'utiliser
des opérateurs de comparaison.

38
00:02:03,650 --> 00:02:05,990
Inférieur, supérieur en sont deux exemples

39
00:02:05,990 --> 00:02:09,045
que vous avez déjà eu l'occasion de
croiser précédemment.

40
00:02:09,045 --> 00:02:11,055
Donc évidemment C++ offre toute une

41
00:02:11,055 --> 00:02:14,977
palette d'opérateurs prédéfinis pour
formuler des conditions

42
00:02:14,977 --> 00:02:19,264
simples, imaginons par exemple que j'ai
deux variables x, y, je veux savoir

43
00:02:19,264 --> 00:02:22,681
si la valeur de x est inférieure à la
valeur de y, naturellement

44
00:02:22,681 --> 00:02:25,870
je vais employer l'opérateur de
comparaison inférieur

45
00:02:25,870 --> 00:02:28,505
et écrire ma condition de cette façon.

46
00:02:28,505 --> 00:02:31,055
De même, si je veux savoir si la valeur

47
00:02:31,055 --> 00:02:33,706
de x est la même que la valeur de y, je
vais

48
00:02:33,706 --> 00:02:36,475
utiliser l'opérateur de comparaison ==,

49
00:02:36,475 --> 00:02:38,860
qui me permet de tester cette condition.

50
00:02:38,860 --> 00:02:42,292
Vous disposez des tenants inférieur ou
égal, supérieur ou égal,

51
00:02:42,292 --> 00:02:46,550
et différent, qui permettent d'exprimer
toutes sortes de conditions simples.

52
00:02:46,550 --> 00:02:52,355
Petite mise en garde de rigueur:
l'opérateur utilisé en C++ pour savoir

53
00:02:52,355 --> 00:02:56,180
si deux valeurs sont égales, se formule au
moyen de deux symboles égal.

54
00:02:56,180 --> 00:02:59,024
À ne pas confondre donc avec le symbole =

55
00:02:59,024 --> 00:03:03,125
tout court, qui lui est utilisé pour
formuler une affectation.

56
00:03:03,125 --> 00:03:06,644
Si je veux savoir si la valeur d'une
variable n est 5, je vais donc

57
00:03:06,644 --> 00:03:09,404
utiliser l'opérateur == pour
formuler ma

58
00:03:09,404 --> 00:03:12,085
condition, et non pas l'opérateur égal
tout court.

59
00:03:12,085 --> 00:03:16,416
Ce qu'il faut savoir cependant, c'est que
les compilateurs C++ vont considérer ce

60
00:03:16,416 --> 00:03:18,306
genre de tournure comme licite, nous

61
00:03:18,306 --> 00:03:21,250
allons examiner pourquoi dans le
transparent suivant,

62
00:03:21,250 --> 00:03:24,733
licite, certes, mais néanmoins
déconseillée, en tout

63
00:03:24,733 --> 00:03:27,510
cas à ce stade d'apprentissage du langage.

64
00:03:27,510 --> 00:03:30,678
Ce qu'il faut savoir c'est qu'en C++,
toute expression, quelle

65
00:03:30,678 --> 00:03:34,140
qu'elle soit, fait quelque chose, mais
vaut aussi quelque chose.

66
00:03:34,140 --> 00:03:36,100
Examinons ceci sur un cas concret.

67
00:03:36,100 --> 00:03:38,200
Nous avons ici une expression, n = 5,

68
00:03:38,200 --> 00:03:41,140
Cette expression fait clairement
quelque chose.

69
00:03:41,140 --> 00:03:46,546
Ce qu'elle fait, c'est affecter à une
variable n la

70
00:03:46,546 --> 00:03:47,740
valeur 5.

71
00:03:47,740 --> 00:03:51,758
En C++, cette expression vaut aussi
quelque chose.

72
00:03:51,758 --> 00:03:55,801
Ce qu'elle vaut, c'est la valeur de n
après l'affectation.

73
00:03:55,801 --> 00:03:58,230
Donc l'expression n = 5 vaut 5.

74
00:03:58,230 --> 00:04:01,954
C'est pourquoi il est parfaitement licite
d'écrire quelque

75
00:04:01,954 --> 00:04:04,225
chose comme ceci: m = n = 5,

76
00:04:04,225 --> 00:04:07,265
ce qui a pour vocation d'affecter à une

77
00:04:07,265 --> 00:04:11,160
variable m ce que vaut cette expression,
c'est-à-dire 5.

78
00:04:11,160 --> 00:04:11,735
Il est

79
00:04:11,735 --> 00:04:17,600
donc tout à fait correct d'écrire quelque
	chose comme ceci: "if (n = 5)",

80
00:04:17,600 --> 00:04:23,410
ce qui est équivalent à écrire


81
00:04:23,410 --> 00:04:28,550
"if (5)", sachant qu'en C++ toute
valeur non nulle est

82
00:04:28,550 --> 00:04:34,220
équivalente à "true", cette condition sera
toujours évaluée comme vérifiée.

83
00:04:34,220 --> 00:04:36,588
Notez qu'en termes de bonnes pratiques,

84
00:04:36,588 --> 00:04:39,622
il est tout à fait déconseillé d'avoir
recours à ce

85
00:04:39,622 --> 00:04:43,158
genre de tournure, je ne l'ai montrée ici
de façon détaillée

86
00:04:43,158 --> 00:04:46,441
et explicite que parce que confondre ==
et = pour

87
00:04:46,441 --> 00:04:51,003
effectuer une comparaison est une erreur
couramment commise par les débutants.

88
00:04:51,003 --> 00:04:53,482
Donc dans l'absolu, ce genre de tournures
est à

89
00:04:53,482 --> 00:04:56,980
éviter, même si elles sont tolérées par le
compilateur.

90
00:04:56,980 --> 00:05:01,697
Illustrons maintenant sur de petits
exemples l'utilisation de

91
00:05:01,697 --> 00:05:03,660
conditions simples en C++.

92
00:05:03,660 --> 00:05:07,680
Nous avons ici le cas d'un petit programme
qui commence par déclarer deux

93
00:05:07,680 --> 00:05:13,000
variables a et b en leur affectant des
valeurs initiales, respectivement 1 et 2.

94
00:05:13,000 --> 00:05:18,212
Nous rencontrons ensuite une instruction
de branchement conditionnel qui teste au

95
00:05:18,212 --> 00:05:23,100
moyen d'une condition simple si la valeur
de a est la même que la valeur de b.

96
00:05:23,100 --> 00:05:26,300
Ceci se fait au moyen de l'opérateur de
comparaison ==.

97
00:05:26,300 --> 00:05:26,940
Comme cette

98
00:05:26,940 --> 00:05:32,527
condition n'est pas vérifiée, le résultat
de l'évaluation de la condition

99
00:05:32,527 --> 00:05:37,490
sera la valeur "false", ce qui aura pour
conséquence de faire

100
00:05:37,490 --> 00:05:42,164
brancher l'exécution sur le bloc else de
l'instruction if et donc

101
00:05:42,164 --> 00:05:45,430
va causer l'affichage du message "cas 2",
que l'on voit ici.

102
00:05:45,430 --> 00:05:50,110
On continue ensuite l'exécution des
séquences,

103
00:05:50,110 --> 00:05:52,105
et on rencontre une deuxième instruction

104
00:05:52,105 --> 00:05:55,052
de branchement conditionnel qui cette fois
va comparer la

105
00:05:55,052 --> 00:05:59,265
valeur de deux fois a avec la valeur de b.

106
00:05:59,265 --> 00:06:02,793
On remarquera ici au passage que les
opérateurs de

107
00:06:02,793 --> 00:06:06,248
comparaison permettent non seulement de
comparer les valeurs de

108
00:06:06,248 --> 00:06:08,931
deux variables, comme c'est la cas ici,
mais également

109
00:06:08,931 --> 00:06:12,250
les valeurs de deux expressions de façon
plus générale.

110
00:06:12,250 --> 00:06:17,608
Si on évalue ici deux fois a, on obtient

111
00:06:17,608 --> 00:06:20,872
la valeur 2, qui est la même que la valeur

112
00:06:20,872 --> 00:06:25,030
de b, et donc le résultat de l'évaluation
de cette condition

113
00:06:25,030 --> 00:06:28,528
sera "true" ce qui aura pour conséquence
de faire brancher

114
00:06:28,528 --> 00:06:32,690
l'exécution sur le bloc positif, le bloc
vrai de l'instruction if.

115
00:06:32,690 --> 00:06:36,130
Ceci provoquera l'affichage du message "b
est égal au

116
00:06:36,130 --> 00:06:38,870
double de a", comme on peut le constater
ici.

117
00:06:38,870 --> 00:06:42,698
En termes de bonnes pratiques, nous avons
ici affaire à une expression

118
00:06:42,698 --> 00:06:46,673
qui est relativement simple, vous noterez
cependant qu'il est conseillé,

119
00:06:46,673 --> 00:06:50,579
lorsque l'expression se complexifie, de
parenthéser ces termes, donc ici on

120
00:06:50,579 --> 00:06:53,804
pourrait déjà commencer à le faire, en
parenthésant par exemple

121
00:06:53,804 --> 00:06:57,400
cette partie de l'expression, ce qui rend
l'expression beaucoup plus lisible.

122
00:06:57,400 --> 00:07:00,392
Nous venons de voir comment utiliser des

123
00:07:00,392 --> 00:07:05,090
conditions simples en utiliser des
opérateurs de comparaison.

124
00:07:05,090 --> 00:07:07,844
En pratique, il est souvent nécessaire de
combiner plusieurs

125
00:07:07,844 --> 00:07:10,976
de ces conditions simples pour formuler
une condition plus complexe.

126
00:07:10,976 --> 00:07:13,920
Pour combiner des expressions simples nous
avons besoin

127
00:07:13,920 --> 00:07:17,796
d'utiliser un autre type d'opérateur, les
opérateurs logiques.

128
00:07:17,796 --> 00:07:21,764
Par exemple, l'opérateur logique ET, qui
en  C++ s'exprime soit

129
00:07:21,764 --> 00:07:24,962
au moyen du mot-clé "and", soit au moyen
du symbole

130
00:07:24,962 --> 00:07:28,165
"&&", est un opérateur fonctionnant avec
deux opérandes qui sont

131
00:07:28,165 --> 00:07:30,642
deux expressions logiques, c'est-à-dire
des

132
00:07:30,642 --> 00:07:33,138
expressions retournant "true" ou "false",

133
00:07:33,138 --> 00:07:37,185
le résultat de l'évaluation impliquant le
and est "true"

134
00:07:37,185 --> 00:07:41,790
uniquement dans le cas où chacun des
opérandes vaut "true".

135
00:07:41,790 --> 00:07:49,298
Dans tous les autres cas, imaginons par
exemple que l'un des deux opérandes et a

136
00:07:49,298 --> 00:07:51,122
fortiori les deux, soient "false", le
résultat de

137
00:07:51,122 --> 00:07:53,700
l'évaluation de l'expression globale sera
"false" également, ici.

138
00:07:53,700 --> 00:07:58,292
Voyons maintenant sur un cas concret
comment utiliser l'opérateur

139
00:07:58,292 --> 00:07:59,160
logique and.

140
00:07:59,160 --> 00:08:00,635
Nous avons ici le cas d'un petit

141
00:08:00,635 --> 00:08:03,305
programme qui demande à l'utilisateur
d'introduire un

142
00:08:03,305 --> 00:08:07,210
nombre, et nous souhaitons que ce nombre
soit compris entre deux bornes, 1 et 10.

143
00:08:07,210 --> 00:08:12,630
Le nombre est lu depuis l'entrée standard,
et stocké dans une variable n.

144
00:08:12,630 --> 00:08:15,990
Nous voulons vérifier que le nombre
introduit par

145
00:08:15,990 --> 00:08:18,952
l'utilisateur répond à nos attentes, est
bien compris

146
00:08:18,952 --> 00:08:21,026
entre les bornes en question, et pour cela

147
00:08:21,026 --> 00:08:23,527
il faut que les deux conditions suivantes
soient

148
00:08:23,527 --> 00:08:25,032
simultanément vérifiées.

149
00:08:25,032 --> 00:08:27,820
Il faut que le nombre introduit soit
supérieur ou

150
00:08:27,820 --> 00:08:29,605
égal à 1 et inférieur ou égal à 10.

151
00:08:29,605 --> 00:08:31,765
Puisque l'on veut que les deux conditions
soient

152
00:08:31,765 --> 00:08:34,790
simultanément vérifiées, il faut utiliser
l'opérateur logique ET.

153
00:08:34,790 --> 00:08:38,054
Imaginons maintenant que l'utilisateur ait
introduit la

154
00:08:38,054 --> 00:08:40,662
valeur zéro, ceci aura pour conséquence
que

155
00:08:40,662 --> 00:08:46,027
l'évaluation de cette expression
retournera "false". Une

156
00:08:46,027 --> 00:08:48,787
expression qui implique un and ne retourne
"true"

157
00:08:48,787 --> 00:08:51,945
que si ces deux opérandes sont "true", ce
qui n'est pas le cas ici.

158
00:08:51,945 --> 00:08:53,737
Donc le résultat ici de l'évaluation de

159
00:08:53,737 --> 00:08:55,830
l'expression avec le and est également
"false".

160
00:08:55,830 --> 00:08:58,854
Par conséquent, nous allons brancher sur
la

161
00:08:58,854 --> 00:09:01,457
partie else du if, et afficher "incorrect"

162
00:09:01,457 --> 00:09:03,662
pour signifier à l'utilisateur qu'il n'a
pas

163
00:09:03,662 --> 00:09:05,950
introduit un nombre conforme à nos
attente.

164
00:09:05,950 --> 00:09:10,164
Si maintenant, par contre, l'utilisateur a
introduit

165
00:09:10,164 --> 00:09:13,888
la valeur 5, l'évaluation de cette
expression

166
00:09:13,888 --> 00:09:17,390
retournera "true", l'évaluation de cette
seconde

167
00:09:17,390 --> 00:09:20,405
expression retournera également "true", ce
qui

168
00:09:20,405 --> 00:09:22,435
aura pour conséquence que l'évaluation de

169
00:09:22,435 --> 00:09:24,890
l'expression avec le and retourne
également "true".

170
00:09:24,890 --> 00:09:29,920
À ce moment-là nous allons brancher sur la
partie positive du if et afficher

171
00:09:29,920 --> 00:09:31,972
"correct" pour signifier à l'utilisateur
que le

172
00:09:31,972 --> 00:09:33,870
nombre introduit est bel et bien correct.

173
00:09:33,870 --> 00:09:36,390
Autre opérateur logique usuel, le OU, qui
en

174
00:09:36,390 --> 00:09:38,982
C++ s'exprime soit au moyen du mot réservé
or,

175
00:09:38,982 --> 00:09:41,585
soit au moyen de doubles barres
verticales.

176
00:09:41,585 --> 00:09:46,373
Tout comme pour l'opérateur logique ET,
l'opérateur logique OU requiert deux

177
00:09:46,373 --> 00:09:48,653
opérandes qui sont les expressions

178
00:09:48,653 --> 00:09:51,508
logiques, c'est-à-dire retournant "true"
ou "false".

179
00:09:51,508 --> 00:09:56,380
L'évaluation de l'expression avec un OU
retourne "true" si l'un ou l'autre, l'un

180
00:09:56,380 --> 00:10:00,980
ou l'autre, pas forcément les deux, l'un
ou l'autre des opérandes est "true".

181
00:10:00,980 --> 00:10:04,340
On voit donc bien que la seule situation
ou une expression

182
00:10:04,340 --> 00:10:07,830
logique impliquant un OU retourne "false"
est

183
00:10:07,830 --> 00:10:12,370
une situation où les deux opérandes
retournent "false".

184
00:10:12,370 --> 00:10:17,380
Dans ce cas-là, l'espression avec le or
retourne aussi "false".

185
00:10:17,380 --> 00:10:22,290
Illustrons maintenant l'utilisation du OU
logique sur un petit exemple concret.

186
00:10:22,290 --> 00:10:24,160
Ici nous avons le cas d'un petit programme

187
00:10:24,160 --> 00:10:26,525
qui demande à l'utilisateur de choisir
deux valeurs.

188
00:10:26,525 --> 00:10:29,908
Ces deux valeurs sont saisies depuis
l'entrée standard et stockées

189
00:10:29,908 --> 00:10:31,819
dans deux variables m et n.

190
00:10:31,819 --> 00:10:36,619
Nous souhaitons dans le cas présent que
l'une ou l'autre au moins soit

191
00:10:36,619 --> 00:10:39,067
positive, puisqu’il nous suffit que l'une

192
00:10:39,067 --> 00:10:41,610
ou l'autre des deux valeurs soit
positives.

193
00:10:41,610 --> 00:10:45,725
Nous testons ces conditions au moyen de
l'opérateur logique OU.

194
00:10:45,725 --> 00:10:48,497
Supposons dans un premier temps que
l'utilisateur

195
00:10:48,497 --> 00:10:50,896
introduise les valeur 1 et -1.

196
00:10:50,896 --> 00:10:55,780
Dans ce cas, le premier
opérande

197
00:10:55,780 --> 00:11:00,890
sera évalué à 'true" puisqu'il est
effectivement positif, et donc

198
00:11:00,890 --> 00:11:06,400
l'évaluation de l'expression retourne
"true" puisqu'il suffit

199
00:11:06,400 --> 00:11:08,740
que l'un ou l'autre des opérandes soient
"true"

200
00:11:08,740 --> 00:11:11,678
pour que le résultat soit "true" pour
l'expression globale.

201
00:11:11,678 --> 00:11:13,743
Et donc c'est bel et bien le message "au
moins

202
00:11:13,743 --> 00:11:16,760
une valeur est positive" qui sera affiché
dans le cas présent.

203
00:11:16,760 --> 00:11:20,910
Supposons maintenant que les valeurs
saisies soient 

204
00:11:20,910 --> 00:11:21,250
-1 et 1.

205
00:11:21,250 --> 00:11:23,735
Dans ce cas, l'évaluation de cette
première

206
00:11:23,735 --> 00:11:27,448
expression retourne "false" l'évaluation
de la seconde

207
00:11:27,448 --> 00:11:30,986
expression retourne quant à elle "true",
puisqu'il

208
00:11:30,986 --> 00:11:32,970
suffit que l'un ou l'autre des opérandes

209
00:11:32,970 --> 00:11:34,954
soit "true" pour que l'ensemble soit
"true",

210
00:11:34,954 --> 00:11:37,806
l'évaluation de l'expression globale
retourne "true", et

211
00:11:37,806 --> 00:11:42,350
là encore c'est le message "au moins une
valeur est positive" qui sera affiché.

212
00:11:42,350 --> 00:11:46,395
Dernier cas de figure: imaginons
maintenant que l'utilisateur saisisse

213
00:11:46,395 --> 00:11:50,780
les valeurs moins 1 et -1 pour
chacune des variables m et n, dans

214
00:11:50,780 --> 00:11:54,265
ce cas-ci l'évaluation de la première
expression

215
00:11:54,265 --> 00:11:58,747
va retourner "false", l'évaluation de la
seconde expression

216
00:11:58,747 --> 00:12:02,681
retourne également "false", puisque les
deux opérandes

217
00:12:02,681 --> 00:12:06,685
sont évalués à "false", l'expression
globale retourne également

218
00:12:06,685 --> 00:12:08,942
"false" et dans ce cas c'est le message

219
00:12:08,942 --> 00:12:12,170
"les deux valeurs sont négatives" qui sera
affiché.

220
00:12:12,170 --> 00:12:17,978
Dernier opérateur logique usuel, le NON,
la négation, qui en

221
00:12:17,978 --> 00:12:22,720
C++ s'écrit soit au moyen du mot réservé
not, soit au moyen du point d'exclamation.

222
00:12:22,720 --> 00:12:25,610
L'opérateur logique not est un opérateur

223
00:12:25,610 --> 00:12:28,565
logique unaire, c'est-à-dire qu'il
n'attend qu'un

224
00:12:28,565 --> 00:12:30,125
seul opérande, qui à nouveau est

225
00:12:30,125 --> 00:12:32,610
une expression logique retournant "true"
ou "false".

226
00:12:32,610 --> 00:12:37,202
La vocation de l'opérateur logique not est
de retourner la négation

227
00:12:37,202 --> 00:12:39,130
de la valeur de son opérande.

228
00:12:39,130 --> 00:12:43,834
Par exemple, supposons que l'opérande soit
évalué à

229
00:12:43,834 --> 00:12:46,642
"false" ce qui signifie que a est
supérieur ou

230
00:12:46,642 --> 00:12:49,743
égal à b, l'évaluation de l'expression
globale avec le

231
00:12:49,743 --> 00:12:53,230
not retournera avec la négation de
"false", c'est-à-dire "true".

232
00:12:53,230 --> 00:12:57,738
Supposons maintenant que l'évaluation de
cet opérande

233
00:12:57,738 --> 00:13:02,304
retourne "true", l'expression globale
retournera cette fois la

234
00:13:02,304 --> 00:13:04,930
négation de "true", c'est-à-dire "false".

235
00:13:04,930 --> 00:13:07,900
Nous aurons l'occasion de voir plusieurs
exemples d'utilisation

236
00:13:07,900 --> 00:13:09,715
de l'opérateur not dans la suite du cours.

