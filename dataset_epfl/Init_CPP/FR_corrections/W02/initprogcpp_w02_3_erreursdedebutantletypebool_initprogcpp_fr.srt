1
00:00:00,000 --> 00:00:06,050
Voyons maintenant, plusieurs erreurs
commises fréquemment par des

2
00:00:06,050 --> 00:00:09,550
programmeurs débutants, quand il s'agit
d'écrire des branchements conditionnels.

3
00:00:09,550 --> 00:00:12,379
Le premier piège qui vous guette, est un
piège dans

4
00:00:12,379 --> 00:00:17,055
lequel sont tombés probablement tous les
programmeurs débutants, voire moins

5
00:00:17,055 --> 00:00:21,215
débutants, est que le test d'égalité
s'écrit avec deux symboles

6
00:00:21,215 --> 00:00:25,780
égal, et non pas un seul symbole, qui est
pour l'affectation.

7
00:00:25,780 --> 00:00:32,677
Par exemple, ce code-ci

8
00:00:32,677 --> 00:00:38,974
est accepté par le compilateur, mais ne va
pas tester si a est égal à un.

9
00:00:38,974 --> 00:00:43,716
Pour cela, il aurait fallu écrire if a
égal, égal un.

10
00:00:43,716 --> 00:00:48,871
Mais en plus, il va affecter la valeur un,
à la variable a.

11
00:00:48,871 --> 00:00:50,983
Alors, même si le compilateur

12
00:00:50,983 --> 00:00:54,960
accepte ce code, la plupart des
compilateurs vont afficher un warning.

13
00:00:54,960 --> 00:00:57,068
C'est-à-dire, un message d'avertissement.

14
00:00:57,068 --> 00:01:02,193
Par exemple, g plus plus, avec l'option
moins Wall, va

15
00:01:02,193 --> 00:01:08,060
afficher ce message-ci, ou ce message-ci,
si vous avez une version en français.

16
00:01:08,060 --> 00:01:11,524
Donc, si vous obtenez un de ces deux
messages, vous

17
00:01:11,524 --> 00:01:15,500
savez que vous aussi, vous êtes tombés
dans ce piège.

18
00:01:15,500 --> 00:01:22,095
Peut-être, voyez-vous l'erreur dans ce
nouveau code, qu'il

19
00:01:22,095 --> 00:01:25,330
ne devrait pas y avoir deux
points-virgules, ici.

20
00:01:25,330 --> 00:01:29,681
Et, si on met tout de même un
point-virgule, le message "a

21
00:01:29,681 --> 00:01:33,840
vaut un", va être affiché, quelle que soit
la valeur de a.

22
00:01:33,840 --> 00:01:34,867
Alors, pourquoi?

23
00:01:34,867 --> 00:01:37,316
Parce qu'en fait, ce point-virgule est

24
00:01:37,316 --> 00:01:40,904
considéré comme une instruction, une
instruction

25
00:01:40,904 --> 00:01:42,048
qui ne fait rien.

26
00:01:42,048 --> 00:01:44,990
Et ce code-ci va être interprété de la
façon

27
00:01:44,990 --> 00:01:47,876
suivante, c'est-à-dire que le
point-virgule,

28
00:01:47,876 --> 00:01:49,826
cette instruction qui ne fait

29
00:01:49,826 --> 00:01:55,060
rien, va être considérée à l'intérieur du
branchement conditionnel, et

30
00:01:55,060 --> 00:02:00,246
l'instruction cout va être considérée
après le branchement conditionnel.

31
00:02:00,246 --> 00:02:02,359
C'est-à-dire que si a vaut un, on

32
00:02:02,359 --> 00:02:06,583
va exécuter l'instruction vide,
c'est-à-dire, ne rien faire.

33
00:02:06,583 --> 00:02:09,868
Et, quelqu'il, quelque soit la valeur de
a, exécuter

34
00:02:09,868 --> 00:02:14,127
l'instruction cout, c'est- à-dire afficher
le message "a vaut un".

35
00:02:14,127 --> 00:02:20,190
Et attention, dans ce cas, le compilateur
ne donne aucun warning à la compilation.

36
00:02:20,190 --> 00:02:27,531
Vous remarquerez que si on avait utilisé
des accolades, alors qu'il n'y a qu'une

37
00:02:27,531 --> 00:02:31,626
seule instruction dans le branchement
conditionnel, l'erreur que nous venons

38
00:02:31,626 --> 00:02:34,193
de voir aurait eu beaucoup moins de chance
d'arriver.

39
00:02:34,193 --> 00:02:37,788
Donc, c'est une bonne idée d'utiliser
systématiquement des accolades, même

40
00:02:37,788 --> 00:02:40,130
quand il n'y a qu'une seule instruction
dans le bloc.

41
00:02:40,130 --> 00:02:42,980
Une troisième erreur possible est
justement,

42
00:02:42,980 --> 00:02:45,840
d'oublier les accolades, comme dans ce
code-ci.

43
00:02:45,840 --> 00:02:48,882
Le fait d'avoir indenté ces lignes,
c'est-à-dire,

44
00:02:48,882 --> 00:02:51,534
de les avoir décalées légèrement vers la

45
00:02:51,534 --> 00:02:53,406
droite, ne suffit pas à ce qu'elles

46
00:02:53,406 --> 00:02:56,657
soient dans le branchement conditionnel,
contrairement à

47
00:02:56,657 --> 00:02:57,662
d'autres langages.

48
00:02:57,662 --> 00:03:01,160
Et à votre avis, que ce passe- t-il, si
j'essaye de compiler ce code?

49
00:03:01,160 --> 00:03:05,186
Et bien le compilateur va m'afficher ce
message d'erreur, c'est-à-dire qu'il

50
00:03:05,186 --> 00:03:09,115
pense qu'il y a une erreur de syntaxe,
avant le mot-clé else.

51
00:03:09,115 --> 00:03:10,545
Alors, pourquoi?

52
00:03:10,545 --> 00:03:13,434
C'est parce qu'en fait, ce code est

53
00:03:13,434 --> 00:03:17,225
interprété de la même façon que ce
code-ci.

54
00:03:17,225 --> 00:03:22,211
C'est-à-dire que la première instruction
cout, ici, est considérée,

55
00:03:22,211 --> 00:03:24,958
comme à l'intérieur du branchement
conditionnel.

56
00:03:24,958 --> 00:03:26,633
C'est ce que j'ai représenté, ici.

57
00:03:26,633 --> 00:03:28,809
Mais cette deuxième instruction est

58
00:03:28,809 --> 00:03:32,094
considérée comme après le branchement
conditionnel.

59
00:03:32,094 --> 00:03:33,950
C'est ce que j'ai représenté, ici.

60
00:03:33,950 --> 00:03:38,240
Le compilateur tombe, ensuite, sur le
mot-clé else,

61
00:03:38,240 --> 00:03:40,968
et pour lui, il n'y a aucune instruction

62
00:03:40,968 --> 00:03:43,564
if, qui se rattache à ce mot-clé else,

63
00:03:43,564 --> 00:03:48,160
puisqu'on est déjà sorti de ce branchement
conditionnel-là.

64
00:03:48,160 --> 00:03:54,145
Il pense, donc, qu'il y a une erreur de
syntaxe à ce niveau-ci du programme,

65
00:03:54,145 --> 00:03:59,634
et va afficher ce message d'erreur.
Passons, maintenant, à trois quiz.

66
00:03:59,634 --> 00:04:05,380
Je vous demande, tout d'abord, ce
qu'affiche ce code, quand on l'exécute?

67
00:04:05,380 --> 00:04:08,660
Et, quand l'utilisateur rentre la valeur
un, pour la

68
00:04:08,660 --> 00:04:11,750
variable n, et la valeur deux pour la
variable b.

69
00:04:11,750 --> 00:04:13,190
Alors à votre avis,

70
00:04:13,190 --> 00:04:19,777
quelle est la bonne réponse?
La bonne réponse, est la réponse C.

71
00:04:19,777 --> 00:04:21,518
Et, nous allons voir pourquoi.

72
00:04:21,518 --> 00:04:26,130
Si vous pensez avoir compris, vous pouvez
passer directement, au quiz suivant.

73
00:04:26,130 --> 00:04:29,718
Alors, je vous rappelle que pour qu'une
condition avec un

74
00:04:29,718 --> 00:04:33,655
"and" soit vraie, il faut que les deux
opérandes soient vrais.

75
00:04:33,655 --> 00:04:38,263
Et pour qu'une condition avec un or, soit
vraie, il suffit que

76
00:04:38,263 --> 00:04:41,180
l'un des deux opérandes soit vrai.

77
00:04:41,180 --> 00:04:47,114
J'ai dit que l'utilisateur entrait un pour
n, et deux pour p.

78
00:04:47,114 --> 00:04:52,330
Cette condition est donc vraie, puisque un
est strictement inférieur à deux.

79
00:04:52,330 --> 00:04:57,540
Cette expression, deux fois n, vaut
simplement deux.

80
00:04:57,540 --> 00:05:03,640
Deux est supérieur ou égal à deux.
Donc, cette condition est vraie.

81
00:05:03,640 --> 00:05:10,390
Donc, l'ensemble, ici, est une condition
qui est vraie.

82
00:05:10,390 --> 00:05:14,174
On va, donc, entrer dans le branchement
conditionnel,

83
00:05:14,174 --> 00:05:17,920
exécuter cette instruction cout qui
affiche un, un.

84
00:05:17,920 --> 00:05:21,160
On passe, ensuite, à ce branchement
conditionnel.

85
00:05:21,160 --> 00:05:25,550
Cette condition, et bien, c'est la même
qu'avant, elle est toujours vraie.

86
00:05:25,550 --> 00:05:30,080
L'ensemble de cette condition

87
00:05:30,080 --> 00:05:31,367
utilise un or.

88
00:05:31,367 --> 00:05:36,762
Donc, je n'ai pas besoin de regarder la
valeur de cette condition.

89
00:05:36,762 --> 00:05:39,950
Je sais que toute cette condition est
vraie.

90
00:05:39,950 --> 00:05:42,002
Et comme elle est vraie, et bien, on

91
00:05:42,002 --> 00:05:45,210
va exécuter cette instruction qui affiche
un deux.

92
00:05:45,210 --> 00:05:48,787
On passe, ensuite, à ce troisième
branchement conditionnel,

93
00:05:48,787 --> 00:05:51,770
qui utilise, encore une fois, la même
condition.

94
00:05:51,770 --> 00:05:54,250
On sait que cette condition est vraie.

95
00:05:54,250 --> 00:05:54,890
On va, donc,

96
00:05:54,890 --> 00:05:59,380
entrer dans le branchement conditionnel,
et exécuter cette partie.

97
00:05:59,380 --> 00:06:02,163
Cette expression vaut deux.

98
00:06:02,163 --> 00:06:04,220
p vaut toujours deux.

99
00:06:04,220 --> 00:06:08,340
Donc, cette condition est vraie.

100
00:06:08,340 --> 00:06:10,590
On va, donc, exécuter cette partie-ci,

101
00:06:10,590 --> 00:06:13,935
du branchement conditionnel, et donc,
afficher trois.

102
00:06:13,935 --> 00:06:19,530
On va, ensuite, arriver à la fin de ce
branchement conditionnel,

103
00:06:19,530 --> 00:06:23,940
passer à cette instruction-ci, qui fait
simplement un retour à la ligne.

104
00:06:23,940 --> 00:06:25,956
Autre exercice, même code.

105
00:06:25,956 --> 00:06:32,630
Cette fois-ci, l'utilisateur rentre les
valeurs un pour n, et trois pour p.

106
00:06:32,630 --> 00:06:34,644
Que va-t-il s'afficher?

107
00:06:34,644 --> 00:06:40,070
La bonne réponse est la réponse B.
Et, nous allons voir pourquoi.

108
00:06:40,070 --> 00:06:44,910
Cette fois-ci, l'utilisateur rentre un
pour n, et trois

109
00:06:44,910 --> 00:06:49,228
pour p.
Cette condition est donc vraie, puisque un

110
00:06:49,228 --> 00:06:54,532
est strictement inférieur à trois.
Cette expression deux fois

111
00:06:54,532 --> 00:06:59,900
n vaut deux, p vaut trois.
Donc, cette condition est fausse.

112
00:06:59,900 --> 00:07:05,335
Comme toute cette condition utilise

113
00:07:05,335 --> 00:07:10,053
un and, cette condition est donc fausse.

114
00:07:10,053 --> 00:07:14,930
On va, donc, sauter le branchement
conditionnel, passer à la suite.

115
00:07:14,930 --> 00:07:18,670
Cette condition est toujours vraie, comme
avant.

116
00:07:18,670 --> 00:07:23,402
L'ensemble de cette condition utilise un
or.

117
00:07:23,402 --> 00:07:27,697
Donc, je n'ai pas besoin de considérer la
valeur de cette condition.

118
00:07:27,697 --> 00:07:30,060
Je sais que quelque soit sa valeur,

119
00:07:30,060 --> 00:07:34,550
toute cette expression, toute cette
condition est vraie.

120
00:07:34,550 --> 00:07:35,134
On va donc,

121
00:07:35,134 --> 00:07:38,755
entrer dans le branchement conditionnel,
et afficher deux.

122
00:07:38,755 --> 00:07:42,960
On passe, ensuite, à ce branchement
conditionnel-ci.

123
00:07:42,960 --> 00:07:46,740
Cette condition est vraie, encore une
fois. On entre

124
00:07:46,740 --> 00:07:51,780
donc dans le branchement conditionnel
pour exécuter cette partie-ci.

125
00:07:51,780 --> 00:07:55,628
Cette expression vaut donc deux, p vaut
trois.

126
00:07:55,628 --> 00:07:59,561
Donc, je sais déjà que, cette condition
est fausse.

127
00:07:59,561 --> 00:08:00,481
Comme cette

128
00:08:00,481 --> 00:08:03,608
condition est fausse, on va passer à cette

129
00:08:03,608 --> 00:08:07,950
partie-ci, de ce branchement conditionnel,
et afficher quatre.

130
00:08:07,950 --> 00:08:12,740
On arrive à la fin de ce branchement
conditionnel, pour passer,

131
00:08:12,740 --> 00:08:17,280
ensuite, au cout endl, qui fait simplement
un retour à la ligne.

132
00:08:17,280 --> 00:08:19,887
Une dernière fois, toujours le même code.

133
00:08:19,887 --> 00:08:25,623
Cette fois-ci, l'utilisateur rentre les
valeurs deux pour n, et un

134
00:08:25,623 --> 00:08:29,392
pour p.
Quelle est la bonne réponse?

135
00:08:29,392 --> 00:08:31,290
C'est la réponse A.

136
00:08:31,290 --> 00:08:35,661
Pour cette dernière fois, l'utilisateur
rentre la valeur

137
00:08:35,661 --> 00:08:38,511
deux pour n, et la valeur un pour p.

138
00:08:38,511 --> 00:08:46,020
Cette condition est donc fausse, puisque
deux n'est pas strictement inférieur à un.

139
00:08:46,020 --> 00:08:48,516
Comme l'ensemble de cette condition
utilise un

140
00:08:48,516 --> 00:08:51,156
et, je n'ai pas besoin de considérer

141
00:08:51,156 --> 00:08:56,450
la valeur de cette condition.
Je sais que le tout est forcément faux.

142
00:08:56,450 --> 00:09:01,200
On saute, donc, ce premier branchement
conditionnel.

143
00:09:01,200 --> 00:09:04,150
Cette condition est toujours fausse.

144
00:09:04,150 --> 00:09:07,747
Par contre, cette fois-ci, j'utilise un
ou.

145
00:09:07,747 --> 00:09:12,830
Donc, je suis obligée de considérer la
valeur de cette condition.

146
00:09:12,830 --> 00:09:16,449
Cette expression vaut deux fois n.
C'est-à-dire, deux fois

147
00:09:16,449 --> 00:09:19,083
deux, c'est à dire, quatre.
p vaut un.

148
00:09:19,083 --> 00:09:27,232
Donc, cette condition est vraie, puisque
quatre est supérieur ou égal à un.

149
00:09:27,232 --> 00:09:33,530
Donc, l'ensemble de cette condition est
vraie.

150
00:09:33,530 --> 00:09:38,360
On va, donc, exécuter cette instruction,
et afficher deux.

151
00:09:38,360 --> 00:09:42,430
On passe, ensuite, au branchement
conditionnel suivant.

152
00:09:42,430 --> 00:09:45,160
Cette condition, elle est toujours fausse.

153
00:09:45,160 --> 00:09:49,700
On va, donc, sauter ce qu'il y a, à
l'intérieur du branchement conditionnel,

154
00:09:49,700 --> 00:09:54,350
passer à ce stade du programme, qui fait
simplement un retour à la ligne.

155
00:09:54,350 --> 00:09:59,660
Terminons avec le type bool, pour booléen,
qui est le type des conditions.

156
00:09:59,660 --> 00:10:02,745
Ce type va donc nous permettre de déclarer

157
00:10:02,745 --> 00:10:06,537
des variables qui vont contenir la valeur
d'une condition.

158
00:10:06,537 --> 00:10:07,564
Une variable de

159
00:10:07,564 --> 00:10:10,271
type bool est souvent appelée un booléen.

160
00:10:10,271 --> 00:10:15,534
Et un booléen ne peut donc prendre que
deux valeurs, soit vrai, soit faux, ou

161
00:10:15,534 --> 00:10:22,240
plus exactement, en C++, on va utiliser
les valeurs littérales, true et false.

162
00:10:22,240 --> 00:10:26,860
Dans cet exemple, je commence par déclarer
deux variables de type int.

163
00:10:26,860 --> 00:10:32,845
a qui sera initialisée à un.
b qui est

164
00:10:32,845 --> 00:10:37,570
initialisée à deux.
Dans cette troisième instruction,

165
00:10:37,570 --> 00:10:42,234
je déclare une variable qui s'appelle test
un, qui est de type bool.

166
00:10:42,234 --> 00:10:47,606
Comme toutes les variables, je peux
représenter

167
00:10:47,606 --> 00:10:52,712
test un avec une boîte.
Et test un sera

168
00:10:52,712 --> 00:10:58,422
initialisé à la valeur de cette condition:
a égal b.

169
00:10:58,422 --> 00:11:03,438
Comme a vaut un, b vaut deux, cette
condition est

170
00:11:03,438 --> 00:11:08,573
fausse.
Et test un sera donc initialisé à faux, ou

171
00:11:08,573 --> 00:11:13,768
plus exactement false, qui veut

172
00:11:13,768 --> 00:11:18,274
dire faux, en anglais.
Cette dernière

173
00:11:18,274 --> 00:11:24,028
instruction déclare une variable test2,

174
00:11:24,028 --> 00:11:30,568
de type bool.
Un booléen, donc.

175
00:11:30,568 --> 00:11:35,650
Et, test2 va être initialisé à la
valeur de cette condition.

176
00:11:35,650 --> 00:11:40,190
a vaut un, b vaut deux.
Cette condition est donc vraie.

177
00:11:40,190 --> 00:11:44,530
test2 va, donc, être initialisé à
vrai, ou

178
00:11:44,530 --> 00:11:49,100
plus exactement à true, qui veut dire
vrai, en

179
00:11:49,100 --> 00:11:50,010
anglais.

180
00:11:50,010 --> 00:11:53,506
Certains étudiants, donc, ont un problème
avec

181
00:11:53,506 --> 00:11:56,370
les booléens, d'autres font parfois un
bloquage.

182
00:11:56,370 --> 00:11:58,840
Alors, rappellez-vous qu'une variable de
type

183
00:11:58,840 --> 00:12:01,199
bool, est une variable comme les autres.

184
00:12:01,199 --> 00:12:05,580
C'est-à-dire que vous pouvez vous la
représenter comme une boîte.

185
00:12:05,580 --> 00:12:13,777
Il se trouve juste que cette boîte ne peut
contenir que deux valeurs possibles,

186
00:12:13,777 --> 00:12:16,330
soit true, soit false.

187
00:12:16,330 --> 00:12:21,946
On peut également, utilsier des opérateurs

188
00:12:21,946 --> 00:12:26,835
logiques, et ou non, entre variables de
type bool, et on peut utiliser

189
00:12:26,835 --> 00:12:31,320
aussi ces variables, comme des conditions
dans un branchement conditionnel,

190
00:12:31,320 --> 00:12:33,894
et c'est ce que nous allons voir, dans cet
exemple.

191
00:12:33,894 --> 00:12:36,468
Comme dans l'exemple précédent, je
commence par

192
00:12:36,468 --> 00:12:39,294
déclarer une variable appelée a, de type

193
00:12:39,294 --> 00:12:43,998
int, et initialisée à la valeur un, et une

194
00:12:43,998 --> 00:12:49,023
variable b, de type int, également,
initialisée à

195
00:12:49,023 --> 00:12:54,040
la valeur deux.
Dans cette instruction-ci, je déclare une

196
00:12:54,040 --> 00:12:59,370
variable de type bool, qui s'appelle c, et
initialisée

197
00:12:59,370 --> 00:13:04,476
à la valeur true.
Ensuite, ici, je déclare une

198
00:13:04,476 --> 00:13:09,860
valeur de type bool qui s'appelle d,
initialisée à

199
00:13:09,860 --> 00:13:15,338
la valeur de la condition, a égal b.
a vaut 1, b vaut 2.

200
00:13:15,338 --> 00:13:19,890
La condition est donc fausse, et vaut
false.

201
00:13:19,890 --> 00:13:24,615
d est donc initialisée à false.

202
00:13:29,015 --> 00:13:36,193
Ensuite, ici, je déclare une variable de
type bool, appelée e, initialisée

203
00:13:36,193 --> 00:13:41,350
à la valeur de cette condition.
d vaut false.

204
00:13:41,350 --> 00:13:46,530
Cette condition, a inférieure à b, est
vraie.

205
00:13:46,530 --> 00:13:52,113
Elle vaut donc true.
L'opérateur logique est, ici, un or.

206
00:13:52,113 --> 00:13:54,850
Donc, toute cette condition

207
00:13:54,850 --> 00:13:59,736
est vraie, et vaut donc, true.
e est donc

208
00:13:59,736 --> 00:14:05,806
initialisée à true.
Ensuite, dans ce branchement conditionnel,

209
00:14:05,806 --> 00:14:10,955
la condition est la valeur de la variable
e de type bool.

210
00:14:10,955 --> 00:14:12,290
e vaut true.

211
00:14:12,290 --> 00:14:14,349
La condition est donc vraie, et on va

212
00:14:14,349 --> 00:14:19,900
rentrer dans le branchement conditionnel,
pour exécuter cette instruction,

213
00:14:19,900 --> 00:14:23,200
qui va afficher le message, e vaut true.

214
00:14:23,200 --> 00:14:25,825
C'est tout pour le moment, pour les
booléens.

215
00:14:25,825 --> 00:14:29,938
Mais, les booléens sont utiles pour de
nombreux problèmes, et nous

216
00:14:29,938 --> 00:14:34,669
les rencontrerons dans des exemples
concrets, dans la suite du cours.

