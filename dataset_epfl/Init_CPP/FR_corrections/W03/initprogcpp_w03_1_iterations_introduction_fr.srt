1
00:00:00,000 --> 00:00:03,162
Dans cette vidéo, nous allons voir une

2
00:00:03,162 --> 00:00:08,000
deuxième structure de contrôle, que sont
les itérations.

3
00:00:08,000 --> 00:00:11,950
Alors, à quoi va servir cette nouvelle
structure de contrôle ?

4
00:00:11,950 --> 00:00:14,916
Supposons, par exemple, qu'on veuille
afficher le

5
00:00:14,916 --> 00:00:17,430
carré des cinq premiers entiers, comme
ici.

6
00:00:17,430 --> 00:00:20,823
On pourrait, évidemment, obtenir ce
résultat en

7
00:00:20,823 --> 00:00:24,755
utilisant cinq instructions d'affichage.
Mais en fait,

8
00:00:24,755 --> 00:00:28,088
dans un tel cas, on peut, et je dirai même
on

9
00:00:28,088 --> 00:00:33,904
doit, utiliser une itération, ou ce qu'on
appelle une "boucle for".

10
00:00:33,904 --> 00:00:39,380
Et en fait, ce code va produire cet
affichage

11
00:00:39,380 --> 00:00:42,980
en itérant, ou en bouclant sur cette
instruction d'affichage.

12
00:00:42,980 --> 00:00:46,680
Et je vais détailler ce code, pour pouvoir
expliquer pourquoi.

13
00:00:46,680 --> 00:00:50,130
Une boucle for commence tout

14
00:00:50,130 --> 00:00:55,443
simplement, avec le mot clé "for".
Vient, ensuite,

15
00:00:55,443 --> 00:01:00,985
une initialisation et une déclaration
d'une variable de type

16
00:01:00,985 --> 00:01:06,530
int, qui sera exécutée qu'une seule fois,
et avant d'entrer dans la boucle.

17
00:01:06,530 --> 00:01:11,810
Vient, ensuite, quelque chose que vous
pouvez reconnaître,

18
00:01:11,810 --> 00:01:15,465
puisqu'il s'agit d'une condition et que
vous avez déjà

19
00:01:15,465 --> 00:01:19,070
vu, lors du, de la vidéo, sur les
branchements conditionnels.

20
00:01:19,070 --> 00:01:23,550
Et cette condition sera testée avant
l'exécution de chaque tour de boucle.

21
00:01:23,550 --> 00:01:25,970
Si elle est fausse, on va sortir de la
boucle.

22
00:01:25,970 --> 00:01:30,674
Vient ensuite, ce qu'on appelle une
incrémentation.

23
00:01:30,674 --> 00:01:34,918
Je vous rappelle que l'opérateur ++,
appliqué

24
00:01:34,918 --> 00:01:40,535
sur la variable i, est équivalent à écrire
l'instruction

25
00:01:40,535 --> 00:01:47,120
i = i + 1, et ça va donc ajouter 1 à
la variable i.

26
00:01:47,120 --> 00:01:52,135
Cette incrémentation va être exécutée à la
fin de chaque tour de boucle.

27
00:01:52,135 --> 00:01:58,490
Ça permet de changer la valeur de la
variable considérée par la boucle for.

28
00:01:58,490 --> 00:02:05,535
Notez au passage, que la déclaration et
l'initialisation, la condition et

29
00:02:05,535 --> 00:02:10,424
l'incrémentation sont séparées par des
points-virgules, et

30
00:02:10,424 --> 00:02:15,219
sont entre parenthèses.
Puis, vient ce

31
00:02:15,219 --> 00:02:20,296
qu'on appelle un bloc d'instructions, qui

32
00:02:20,296 --> 00:02:25,550
constitue le corps de la boucle,

33
00:02:25,550 --> 00:02:30,794
et qui contient les instructions qui vont
être répétées, ou exécutées à chaque tour

34
00:02:30,794 --> 00:02:31,430
de boucle.

35
00:02:31,430 --> 00:02:38,326
Comme pour le if, les accolades ne sont
obligatoires, pour

36
00:02:38,326 --> 00:02:43,970
ce bloc d'instructions, que si plusieurs
instructions doivent être répétées.

37
00:02:43,970 --> 00:02:47,537
Si, il n'y a qu'une seule instruction,
comme c'était le

38
00:02:47,537 --> 00:02:50,674
cas ici, je ne suis pas obligé d'utiliser
des accolades.

39
00:02:50,674 --> 00:02:52,918
C'est-à-dire que je ne suis pas obligé de

40
00:02:52,918 --> 00:02:56,007
mettre d'accolades ici, au début de la
boucle,

41
00:02:56,007 --> 00:03:01,568
au début du bloc, et à la fin du bloc.
Mais, comme pour le if, il est conseillé

42
00:03:01,568 --> 00:03:06,160
de garder ces accolades, et c'est ce que
j'ai fait, dans l'exemple précédent.

43
00:03:06,160 --> 00:03:11,215
Je vais maintenant, détailler pas à pas,

44
00:03:11,215 --> 00:03:14,615
l'exécution de mon premier exemple de
boucle for.

45
00:03:14,615 --> 00:03:21,155
Ma boucle for commence, ici, avec la
déclaration et l'initialisation

46
00:03:21,155 --> 00:03:26,040
d'une variable i, qui sera donc,
initialisée ici, à la valeur 0,

47
00:03:26,040 --> 00:03:29,996
et qui va servir à contrôler le nombre de
tours de boucle.

48
00:03:29,996 --> 00:03:35,669
On va ensuite, tester la condition i
inférieur à 5, i vaut

49
00:03:35,669 --> 00:03:40,657
0, 0 est inférieur à 5, Cette condition
est

50
00:03:40,657 --> 00:03:45,926
donc vraie ; et on va continuer, donc,
dans le corps de la boucle.

51
00:03:45,926 --> 00:03:52,022
"Continuer dans le corps de la boucle", ça
veut dire exécuter cette instruction-ci,

52
00:03:52,022 --> 00:03:57,410
qui va simplement faire, un affichage;
donc, afficher "le carré de", en

53
00:03:57,410 --> 00:04:02,648
suivi de la valeur de i, c'est-à-dire 0,
suivi de "vaut", et suivi de

54
00:04:02,648 --> 00:04:07,814
la valeur de l'expression i fois i,
c'est-à-dire tout simplement 0.

55
00:04:07,814 --> 00:04:11,139
C'est la seule instruction dans le corps

56
00:04:11,139 --> 00:04:12,115
de la boucle.

57
00:04:12,115 --> 00:04:16,920
La boucle va maintenant boucler et revenir
ici.

58
00:04:16,920 --> 00:04:24,760
Et, l'instruction d'incrémentation va,
maintenant, être exécutée.

59
00:04:24,760 --> 00:04:30,460
C'est-à-dire qu'on va exécuter ++i
qui va faire que i va passer de la

60
00:04:30,460 --> 00:04:36,772
valeur 0 à la valeur 1.
Ensuite, on va tester de nouveau

61
00:04:36,772 --> 00:04:42,882
la condition i inférieur à 5.
i vaut 1, 1 est aussi inférieur à 5.

62
00:04:42,882 --> 00:04:49,658
Cette condition est donc toujours vraie,
et de nouveau, on va continuer

63
00:04:49,658 --> 00:04:55,540
dans le corps de la boucle, avec cette
fois-ci i qui contiendra la valeur 1.

64
00:04:55,540 --> 00:04:58,100
Continuer dans le corps de la boucle, ça

65
00:04:58,100 --> 00:05:02,785
veut dire exécuter cette instruction-ci,
qui va simplement

66
00:05:02,785 --> 00:05:07,523
afficher, "le carré de", suivi de la
valeur de i, c'est-à-dire,

67
00:05:07,523 --> 00:05:11,620
maintenant 1, suivi de "vaut", et suivi
de la valeur de

68
00:05:11,620 --> 00:05:16,600
l'expression i fois i, qui vaut, cette
fois-ci, tout simplement 1.

69
00:05:16,600 --> 00:05:22,552
On va de nouveau boucler, c'est-à-dire

70
00:05:22,552 --> 00:05:28,950
revenir, ici, et exécuter l'opération,
l'instruction d'incrémentation.

71
00:05:28,950 --> 00:05:34,911
C'est-à-dire que i va passer de la valeur
de 1, à 2, et ainsi de

72
00:05:34,911 --> 00:05:41,359
suite.
Á un moment donné, i va valoir 4.

73
00:05:41,359 --> 00:05:48,100
Et on va exécuter l'instruction
d'incrémentation, qui va faire que

74
00:05:48,100 --> 00:05:54,259
i va passer de la valeur 4, à la valeur 5.
Ensuite, la condition

75
00:05:54,259 --> 00:06:02,970
i inférieur à 5, va être testée.
5 n'est pas strictement inférieur à 5.

76
00:06:02,970 --> 00:06:08,732
Et donc, maintenant, cette condition va
devenir fausse.

77
00:06:08,732 --> 00:06:13,815
Et comme elle est fausse, on va sortir de
la boucle.

78
00:06:13,815 --> 00:06:19,480
Sortir de la boucle, ça veut dire
continuer en exécutant

79
00:06:19,480 --> 00:06:26,530
les instructions qui sont après la boucle.
Notez au passage que la variable i, qu'on

80
00:06:26,530 --> 00:06:33,575
avait déclarée au début de la boucle, ne
peut plus être utilisée après la boucle.

81
00:06:33,575 --> 00:06:38,645
La variable i n'existe que dans le corps
de la boucle.

82
00:06:38,645 --> 00:06:40,190
C'est-à-dire, ici.

83
00:06:40,190 --> 00:06:44,474
La boucle for suit donc, la syntaxe
suivante.

84
00:06:44,474 --> 00:06:47,542
Tout d'abord, le mot-clé for; puis,

85
00:06:47,542 --> 00:06:50,900
entre parenthèses, la déclaration et
l'initialisation

86
00:06:50,900 --> 00:06:55,545
d'une variable, qui n'est pas forcément de
type int; puis, vient une condition

87
00:06:55,545 --> 00:06:59,220
qui, a priori, devrait porter sur cette
variable, même s'il n'y a

88
00:06:59,220 --> 00:07:02,308
aucune obligation, et une incrémentation,
qui

89
00:07:02,308 --> 00:07:05,510
elle aussi devrait porter sur cette
variable.

90
00:07:05,510 --> 00:07:09,686
Puis, vient un bloc d'instructions qui
constitue les instructions qui

91
00:07:09,686 --> 00:07:11,560
seront répétées par la boucle.

92
00:07:11,560 --> 00:07:13,600
Alors, je vous rappelle que les trois

93
00:07:13,600 --> 00:07:16,116
éléments, à l'intérieur des parenthèses
de la

94
00:07:16,116 --> 00:07:19,473
boucle for, sont séparés par des
points-virgules,

95
00:07:19,473 --> 00:07:22,010
et qu'il n'y a pas de point-virgule, ici.

96
00:07:22,010 --> 00:07:26,396
La boucle for répète les instructions qui
sont dans

97
00:07:26,396 --> 00:07:29,485
le bloc tant que la condition, ici, est
vraie.

98
00:07:29,485 --> 00:07:31,865
Si la condition ne devient jamais

99
00:07:31,865 --> 00:07:35,956
fausse, ces instructions seront répétées
indéfiniment.

100
00:07:35,956 --> 00:07:40,840
Alors, notez au passage, qu'en C++ 2011,
il existe une autre

101
00:07:40,840 --> 00:07:46,050
forme de boucle for, que nous verrons, au
moment du cours sur les tableaux.

102
00:07:46,050 --> 00:07:49,490
Continuons avec un nouvel exemple de
boucle for.

103
00:07:49,490 --> 00:07:54,590
Supposons que je veuille afficher la table
de multiplication par 5.

104
00:07:54,590 --> 00:07:58,273
Si je n'utilise pas de boucle for, je

105
00:07:58,273 --> 00:08:01,085
serais obligé de répéter quasiment 10 fois

106
00:08:01,085 --> 00:08:02,200
la même instruction.

107
00:08:02,200 --> 00:08:09,360
C'est-à-dire, cette instruction-ci, qui
affiche 5 multiplié par 1, vaut 5 fois 1.

108
00:08:09,360 --> 00:08:14,625
Suivi de l'instruction, 5 multiplié par 2,
vaut 5 fois 2,

109
00:08:14,625 --> 00:08:19,890
et cetera, jusque, 5 multiplié par 10,
vaut 5 fois 10.

110
00:08:19,890 --> 00:08:23,530
Dans un cas comme celui-là, il faut

111
00:08:23,530 --> 00:08:27,220
utiliser une boucle for, pour éviter cette
répétition.

112
00:08:27,220 --> 00:08:32,766
Cette boucle for va s'écrire ainsi : j'ai
initialisé la variable

113
00:08:32,766 --> 00:08:37,475
qui va me servir à contrôler le nombre de
tours de boucle, cette fois-ci, à 1.

114
00:08:37,475 --> 00:08:41,274
Comme condition, je vais utiliser la
condition i

115
00:08:41,274 --> 00:08:43,718
inférieur ou égal à 10, et je vous

116
00:08:43,718 --> 00:08:47,196
rappelle que le symbole inférieur ou égal

117
00:08:47,196 --> 00:08:52,095
se note avec le caractère inférieur, suivi
du caractère égal.

118
00:08:52,095 --> 00:08:57,625
Donc, avec cette initialisation à 1, avec
la condition i inférieur

119
00:08:57,625 --> 00:09:02,885
ou égal à 10, et avec l'incrémentation à
chaque tour de boucle de i,

120
00:09:02,885 --> 00:09:08,020
i va prendre cette fois-ci, les valeurs de
1 à 10.

121
00:09:08,020 --> 00:09:12,776
Le corps de la boucle va s'écrire de cette
façon-ci :

122
00:09:12,776 --> 00:09:17,521
c'est-à-dire qu'à chaque tour de boucle,
je vais afficher la valeur

123
00:09:17,521 --> 00:09:21,685
de i, ainsi que la valeur de l'expression
5 fois i.

124
00:09:21,685 --> 00:09:24,296
Et donc, cette boucle for, va me

125
00:09:24,296 --> 00:09:28,570
permettre d'afficher la table de
multiplication par 5.

126
00:09:28,570 --> 00:09:31,329
Le bloc d'instructions, répété par une

127
00:09:31,329 --> 00:09:35,423
boucle for peut contenir n'importe quelle
instruction.

128
00:09:35,423 --> 00:09:38,115
Par exemple, un branchement conditionnel.

129
00:09:38,115 --> 00:09:42,805
Voici donc, un quiz avec un branchement
conditionnel, dans une boucle for ; à votre

130
00:09:42,805 --> 00:09:45,510
avis, qu'affiche ce code, quand on
l'exécute ?

131
00:09:45,510 --> 00:09:48,390
Alors, la bonne réponse est la réponse A.

132
00:09:48,390 --> 00:09:51,060
Et, nous allons détailler pourquoi.

133
00:09:51,060 --> 00:09:56,154
Tout d'abord, vous pouvez constater que i

134
00:09:56,154 --> 00:10:01,860
va prendre les valeurs 0, 1, 2, 3 et 4.

135
00:10:01,860 --> 00:10:05,710
Au premier tour de boucle, i va donc
valoir 0.

136
00:10:05,710 --> 00:10:07,975
Cette instruction, va donc

137
00:10:07,975 --> 00:10:10,455
afficher la valeur de i, c'est-à-dire 0.

138
00:10:10,455 --> 00:10:14,098
Et faites attention, il n'y a pas de
retour à la ligne, ici.

139
00:10:14,098 --> 00:10:16,650
Et donc, la prochaine chose qui sera

140
00:10:16,650 --> 00:10:20,660
affichée, s'affichera ici, c'est-à-dire,
juste après le 0.

141
00:10:20,660 --> 00:10:26,540
Ensuite, on passe au branchement
conditionnel, ici, qui teste si i

142
00:10:26,540 --> 00:10:33,164
modulo 2, est égal à 0.
C'est-à-dire si le reste de la division

143
00:10:33,164 --> 00:10:35,276
de i par 2, est égal à 0.

144
00:10:35,276 --> 00:10:41,170
Comme i vaut 0, il se trouve que cette
condition est vraie; et donc,

145
00:10:41,170 --> 00:10:43,889
on va exécuter l'instruction qui est à

146
00:10:43,889 --> 00:10:48,130
l'intérieur du branchement conditionnel,
c'est-à-dire afficher p.

147
00:10:48,130 --> 00:10:53,790
On sort, ensuite, du branchement
conditionnel; on arrive,

148
00:10:53,790 --> 00:10:59,450
ici, et on va afficher, donc, un espace,
que je vais représenter,

149
00:10:59,450 --> 00:11:05,330
comme ceci.
On arrive à la fin de la boucle.

150
00:11:05,330 --> 00:11:13,090
On va donc, répéter la boucle, avec cette
fois-ci, i qui prendra la valeur 1.

151
00:11:13,090 --> 00:11:19,161
Cette instruction va être exécutée une
nouvelle fois, i qui vaut 1.

152
00:11:19,161 --> 00:11:20,840
On va donc, afficher 1.

153
00:11:20,840 --> 00:11:24,515
Ensuite, on passe au branchement
conditionnel, qui teste si

154
00:11:24,515 --> 00:11:27,714
le reste de la division de 1 par 2 est
égal à 0.

155
00:11:27,714 --> 00:11:33,244
Il se trouve que maintenant, c'est faux,
puisque

156
00:11:33,244 --> 00:11:38,728
1 modulo 2 est égal à 1, qui est donc
différent de 0; on

157
00:11:38,728 --> 00:11:44,167
va sauter cette instruction, et passer
directement à cette instruction-ci, et

158
00:11:44,167 --> 00:11:49,600
afficher 1 espace, et cetera et vous
pouvez constater, que le

159
00:11:49,600 --> 00:11:54,700
code va bien afficher ce que

160
00:11:54,700 --> 00:11:59,572
donnait la réponse A, c'est-à-dire

161
00:11:59,572 --> 00:12:04,336
ceci.
Je peux, maintenant, poser une

162
00:12:04,336 --> 00:12:09,622
question subsidiaire, et vous demander,

163
00:12:09,622 --> 00:12:14,854
si vous pouvez indiquer avec des mots,
ce que

164
00:12:14,854 --> 00:12:19,914
fait ce branchement conditionnel-ci.
Mathématiquement, il

165
00:12:19,914 --> 00:12:24,910
teste si le reste de la division de i par
2 est égal à 0.

166
00:12:24,910 --> 00:12:30,150
Avec des mots, j'aurai pu dire : "est-ce
que i est pair ?"

167
00:12:30,150 --> 00:12:32,030
Tout simplement.

168
00:12:32,030 --> 00:12:37,950
Donc, cette condition teste : "est-ce
que i est pair ?"

