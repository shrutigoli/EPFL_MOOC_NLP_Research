
1
00:00:00,000 --> 00:00:06,192
Commençons par voir des exemples d'autres
formes de

2
00:00:06,192 --> 00:00:12,864
boucles for. Dans cette boucle for ici,
j'ai déclaré une variable que j'ai appelée

3
00:00:12,864 --> 00:00:16,785
p, qui va être initialisée à zéro. La
condition est p

4
00:00:16,785 --> 00:00:22,521
strictement inférieur à 10, et
l'instruction d'incrémentation est p += 2.

5
00:00:22,521 --> 00:00:25,734
Alors je vous rappelle qu'écrire

6
00:00:25,734 --> 00:00:31,660
p += 2, c'est équivalent à écrire p = p + 2,
p va

7
00:00:31,660 --> 00:00:37,760
donc être initialisé à zéro. À la fin du
premier tour de boucle, on va ajouter

8
00:00:37,760 --> 00:00:42,539
2 à p ; donc p va prendre la valeur 2.
Ensuite p va prendre la

9
00:00:42,539 --> 00:00:47,906
valeur 4 ; ainsi de suite, jusqu'à ce 
qu'il prenne la valeur 10.

10
00:00:47,906 --> 00:00:51,299
Dans ce cas, la condition va devenir

11
00:00:51,299 --> 00:00:56,141
fausse, et on va sortir de la boucle.
Donc dans

12
00:00:56,141 --> 00:01:00,853
la boucle, p va prendre les valeurs 0, 2,
4,

13
00:01:00,853 --> 00:01:05,682
6, et 8.
Considérons maintenant cette

14
00:01:05,682 --> 00:01:11,124
instruction for, qui déclare une variable
k

15
00:01:11,124 --> 00:01:16,950
initialisée à 10, la condition est
maintenant k est strictement supérieur

16
00:01:16,950 --> 00:01:22,307
à zéro, donc notez bien que le sens de
comparaison a changé ici, et l'instruction

17
00:01:22,307 --> 00:01:27,312
d'incrémentation est --k, qui est
équivalente à k égal k moins 1,

18
00:01:27,312 --> 00:01:32,386
c'est-à-dire qu'on va retrancher 1 à la
variable k à chaque tour de boucle.

19
00:01:32,386 --> 00:01:36,495
Donc k est initialisé à la valeur 10, à la
fin du premier

20
00:01:36,495 --> 00:01:42,019
tour de boucle, on va retrancher 1 à k,
donc k va prendre la

21
00:01:42,019 --> 00:01:46,285
valeur 9 ; ensuite k prendra la valeur 8,

22
00:01:46,285 --> 00:01:51,035
jusqu'à ce que k prenne la valeur 0.
Dans ce cas, la

23
00:01:51,035 --> 00:01:56,040
condition ici deviendra fausse, et on va
sortir de la boucle.

24
00:01:56,040 --> 00:02:01,730
Donc à l'intérieur de la boucle, k prend
les valeurs 10, 9,

25
00:02:01,730 --> 00:02:07,461
etc. jusque 1.
Considérons maintenant

26
00:02:07,461 --> 00:02:13,130
ce troisième exemple qui déclare une
variable i initialisée

27
00:02:13,130 --> 00:02:18,530
à zéro, la condition est i supérieur ou
égal à

28
00:02:18,530 --> 00:02:22,970
zéro, et l'instruction d'incrémentation
est ++i, c'est-à-dire qu'on va ajouter

29
00:02:22,970 --> 00:02:25,140
1 à la variable i à chaque tour de boucle.

30
00:02:25,140 --> 00:02:28,470
i commence donc avec la valeur zéro. À la
fin du

31
00:02:28,470 --> 00:02:32,507
premier tour de boucle, on va ajouter 1
à i. i va

32
00:02:32,507 --> 00:02:38,085
donc prendre la valeur 1, cette condition
va être vraie. On va donc continuer et à

33
00:02:38,085 --> 00:02:44,330
la fin du deuxième tour de boucle, on va
ajouter 1 à i qui va prendre la valeur 2.

34
00:02:44,330 --> 00:02:49,100
Cette condition va être encore une fois
vraie, et on va continuer.

35
00:02:49,100 --> 00:02:52,928
Et vous pouvez constater que, du moins
dans le principe,

36
00:02:52,928 --> 00:02:58,110
i va prendre toutes les valeurs positives
possibles sans que cette

37
00:02:58,110 --> 00:03:03,865
condition devienne fausse, et la boucle va
être répétée indéfiniment.

38
00:03:03,865 --> 00:03:04,762
Alors pourquoi «du moins dans le 
principe» ?

39
00:03:04,762 --> 00:03:07,229
Pour des raisons techniques

40
00:03:07,229 --> 00:03:10,104
que je ne vais pas détailler,
ce n'est

41
00:03:10,104 --> 00:03:13,212
pas complètement vrai ; mais on va tout de
même

42
00:03:13,212 --> 00:03:16,420
répéter la boucle un très grand nombre de
fois.

43
00:03:16,420 --> 00:03:19,588
Une boucle for peut donc ne pas s'arrêter,

44
00:03:19,588 --> 00:03:23,140
c'est ce qui se produit quand la condition
est

45
00:03:23,140 --> 00:03:24,420
toujours vraie.

46
00:03:24,420 --> 00:03:28,132
Plusieurs causes sont possibles. Par
exemple comme dans l'exemple précédent,

47
00:03:28,132 --> 00:03:32,346
peut-être qu'on s'est trompé sur la
condition. Alors, encore une

48
00:03:32,346 --> 00:03:35,160
fois, dans un tel cas, en fait la boucle
va

49
00:03:35,160 --> 00:03:39,570
tout de même s'arrêter, mais après un très
grand nombre d'itérations.

50
00:03:39,570 --> 00:03:42,522
Une deuxième cause possible est de se
tromper sur

51
00:03:42,522 --> 00:03:48,536
l'instruction de l'incrémentation, comme
ici. J'ai ici incrémenté la variable

52
00:03:48,536 --> 00:03:53,260
j, alors que ma condition est sur la
variable i.

53
00:03:53,260 --> 00:03:58,095
Si je ne modifie pas la valeur de la
variable i dans le bloc de la boucle,

54
00:03:58,095 --> 00:04:03,983
comme i est initialisé à zéro, cette
condition va être toujours vraie.

55
00:04:03,983 --> 00:04:08,519
Donc en pratique, si vous vous retrouvez
dans un tel cas, où une boucle

56
00:04:08,519 --> 00:04:10,925
for ne s'arrête pas, vous pouvez toujours

57
00:04:10,925 --> 00:04:13,725
utiliser la combinaison Control C pour
arrêter

58
00:04:13,725 --> 00:04:14,720
votre programme.

59
00:04:14,720 --> 00:04:21,240
Considérons maintenant quelques erreurs
commises fréquemment par des débutants.

60
00:04:21,240 --> 00:04:25,240
Notez tout d'abord qu'il n'y a pas de
point-virgule à la fin de la

61
00:04:25,240 --> 00:04:27,760
ligne qui commence par le mot-clé for,

62
00:04:27,760 --> 00:04:30,960
c'est-à-dire qu'il n'y a pas de
point-virgule ici.

63
00:04:30,960 --> 00:04:34,110
Il se trouve que si vous mettez tout de
même un point-virgule,

64
00:04:34,110 --> 00:04:36,465
le compilateur va accepter votre
programme,

65
00:04:36,465 --> 00:04:39,596
mais votre programme va se comporter

66
00:04:39,596 --> 00:04:45,336
de façon un peu surprenante, et en fait,
ce code, avec un point-virgule,

67
00:04:45,336 --> 00:04:51,000
va n'afficher qu'une seule fois le mot
"bonjour".

68
00:04:51,000 --> 00:04:51,904
Pourquoi ?

69
00:04:51,904 --> 00:04:56,537
Parce que le point-virgule qui, ici est
considéré

70
00:04:56,537 --> 00:05:01,020
comme une instruction ; une instruction qui
ne fait rien.

71
00:05:01,020 --> 00:05:05,154
C'est-à-dire que ce code ici va être
interprété

72
00:05:05,154 --> 00:05:10,152
comme, tout d'abord, une boucle for dont
le corps de la

73
00:05:10,152 --> 00:05:15,462
boucle est constitué par le point-virgule.
Donc cette boucle for va répéter

74
00:05:15,462 --> 00:05:20,860
dix fois l'instruction vide, c'est-à-dire
ne rien faire du tout. Et l'instruction

75
00:05:20,860 --> 00:05:25,735
avec le cout va être considérée comme en
dehors

76
00:05:25,735 --> 00:05:30,515
de la boucle for, et donc va n'être
exécutée qu'une

77
00:05:30,515 --> 00:05:35,302
seule fois.
Considérez maintenant ces trois lignes de

78
00:05:35,302 --> 00:05:40,366
codes, ces lignes vont en fait produire
l'affichage suivant :

79
00:05:40,366 --> 00:05:45,509
c'est-à-dire que la première instruction
cout va être répétée cinq

80
00:05:45,509 --> 00:05:50,700
fois, et la deuxième instruction cout va
n'être exécutée qu'une seule fois.

81
00:05:50,700 --> 00:05:51,883
Alors, pourquoi ?

82
00:05:51,883 --> 00:05:55,930
Parce qu'en fait, ce code-là est
interprété de la façon

83
00:05:55,930 --> 00:06:01,327
suivante : c'est-à-dire que la première
instruction cout à l'intérieur

84
00:06:01,327 --> 00:06:06,597
de la boucle for, la deuxième instruction
cout après la boucle

85
00:06:06,597 --> 00:06:11,430
for, et donc ne va pas être répétée.
En fait, attention !

86
00:06:11,430 --> 00:06:15,890
Il ne suffit pas de décaler ces lignes
pour qu'elles

87
00:06:15,890 --> 00:06:19,545
soient toutes les deux à l'intérieur de la
boucle for.

88
00:06:19,545 --> 00:06:21,075
Si vous voulez que ces

89
00:06:21,075 --> 00:06:27,469
deux lignes soient effectivement répétées,
il faut rajouter une accolade avant

90
00:06:27,469 --> 00:06:33,077
la première instruction, et une accolade
fermante après la dernière instruction.

91
00:06:33,077 --> 00:06:40,003
Donc, cette nouvelle version du code va
effectivement produire l'affichage

92
00:06:40,003 --> 00:06:46,010
i=0 Bonjour, i=1 Bonjour,

93
00:06:46,010 --> 00:06:47,430
etc.

94
00:06:47,430 --> 00:06:53,950
Enfin, évitez de modifier la variable qui
sert à contrôler le nombre

95
00:06:53,950 --> 00:06:58,986
de tours de boucle à l'intérieur du corps
de la boucle ; c'est-à-dire évitez de faire

96
00:06:58,986 --> 00:07:04,283
comme dans cet exemple, qui déclare au
début de la boucle for une

97
00:07:04,283 --> 00:07:10,410
variable i, et qui modifie la variable i
ici, dans le corps de la boucle.

98
00:07:10,410 --> 00:07:11,775
Alors pourquoi ?

99
00:07:11,775 --> 00:07:15,961
Tout d'abord parce ça ne va sans doute pas
faire ce que vous voulez.

100
00:07:15,961 --> 00:07:18,780
N'oubliez-pas que la boucle for va
modifier

101
00:07:18,780 --> 00:07:21,600
également, de son côté, la variable i à

102
00:07:21,600 --> 00:07:26,406
l'aide de l'instruction d'incrémentation,
et, deuxièmement, un

103
00:07:26,406 --> 00:07:29,214
relecteur risque de ne pas s'apercevoir
que

104
00:07:29,214 --> 00:07:33,980
vous modifiez la valeur de la variable i à
l'intérieur du corps de la boucle.

105
00:07:33,920 --> 00:07:37,274
Passons maintenant à un nouvel exemple qui
est très

106
00:07:37,274 --> 00:07:41,920
représentatif de problèmes qu'on peut
rencontrer avec des boucles for.

107
00:07:41,920 --> 00:07:45,404
Cet exemple consiste à écrire un programme
qui demande quatre

108
00:07:45,404 --> 00:07:48,303
notes à l'utilisateur, et qui affiche la
moyenne de ces

109
00:07:48,303 --> 00:07:48,996
quatre notes.

110
00:07:48,996 --> 00:07:52,290
Je vais commencer par une version très
simple, qui n'utilise

111
00:07:52,290 --> 00:07:56,450
pas de boucle for, et qui déclare quatre
variables différentes

112
00:07:56,450 --> 00:07:59,310
que j'ai appelées ici note 1, note 2,
note 3,

113
00:07:59,310 --> 00:08:05,450
et note 4, pour stocker les quatre valeurs
entrées par l'utilisateur.

114
00:08:05,450 --> 00:08:11,085
À ce stade du programme, les variables
note

115
00:08:11,085 --> 00:08:13,625
1, 2, 3, et 4, contiennent donc les quatre

116
00:08:13,625 --> 00:08:17,150
valeurs entrées par l'utilisateur. Je peux
donc calculer

117
00:08:17,150 --> 00:08:20,990
la somme de ces quatre variables, mettre
le résultat

118
00:08:20,990 --> 00:08:23,789
dans une variable que j'ai appelée ici
"somme", et

119
00:08:23,789 --> 00:08:26,930
diviser cette variable par quatre pour
obtenir la moyenne.

120
00:08:26,930 --> 00:08:32,946
Maintenant, le fait que j'ai déclaré et
utilisé quatre variables différentes,

121
00:08:32,946 --> 00:08:35,077
pour stocker les quatre notes

122
00:08:35,077 --> 00:08:39,133
entrées par l'utilisateur, m'empêche
d'introduire directement

123
00:08:39,133 --> 00:08:41,800
une boucle for pour réécrire ce programme.

124
00:08:41,800 --> 00:08:47,163
Donc, je vais commencer par modifier ce
code en une version équivalente, qui

125
00:08:47,163 --> 00:08:53,660
n'utilise qu'une variable pour stocker les
quatre notes entrées par l'utilisateur.

126
00:08:53,660 --> 00:08:59,939
Donc, voici cette nouvelle version, où je
n'ai effectivement plus qu'une

127
00:08:59,939 --> 00:09:04,170
seule variable que j'ai appelée "note" qui
va me servir à stocker les quatre

128
00:09:04,170 --> 00:09:07,520
notes entrées par l'utilisateur, et une
deuxième variable,

129
00:09:07,520 --> 00:09:11,320
la variable "somme", que j'ai initialisée
ici à zéro.

130
00:09:11,320 --> 00:09:15,621
Donc, je vais demander à l'utilisateur
d'entrer une valeur

131
00:09:15,621 --> 00:09:18,825
que je vais stocker dans ma variable
"note", et

132
00:09:18,825 --> 00:09:23,350
j'ai ici une affectation qui s'écrit :
somme = somme + note.

133
00:09:23,350 --> 00:09:27,654
Et je vais répéter quatre fois ce
code.

134
00:09:27,654 --> 00:09:30,153
Et à ce stade du programme,

135
00:09:30,153 --> 00:09:35,778
la variable "somme" va contenir
effectivement la somme des quatre valeurs

136
00:09:35,778 --> 00:09:40,860
entrées par l'utilisateur, et nous allons
vérifier ceci sur un exemple.

137
00:09:40,860 --> 00:09:45,956
Pour vérifier cette nouvelle version,
supposons que l'utilisateur

138
00:09:45,956 --> 00:09:47,954
entre les valeurs 5, 4, 6, et 4.

139
00:09:47,954 --> 00:09:51,526
La variable "note" n'est pas initialisée,
donc on

140
00:09:51,526 --> 00:09:55,024
ne sait pas ce qu'elle contient pour
l'instant,

141
00:09:55,024 --> 00:09:58,260
la variable "somme" a été initialisée à
zéro.

142
00:09:58,260 --> 00:10:03,282
J'ai dit que la première valeur entrée par
l'utilisateur, c'était 5, donc cette

143
00:10:03,282 --> 00:10:08,380
instruction-ci va mettre la valeur 5 dans
la variable "note".

144
00:10:08,380 --> 00:10:13,913
On passe ensuite à cette affectation, qui
va calculer la valeur de cette

145
00:10:13,913 --> 00:10:19,795
expression, c'est-à-dire, calculer somme,
c'est-à-dire zéro,

146
00:10:19,795 --> 00:10:25,625
plus note, c'est-à-dire 5, obtenir la
valeur 5 pour cette expression,

147
00:10:25,625 --> 00:10:30,420
et mettre cette valeur dans la variable
"somme".

148
00:10:30,420 --> 00:10:38,250
La deuxième valeur entrée par
l'utilisateur, ici, est la valeur 4, pour

149
00:10:38,250 --> 00:10:40,970
cette affectation. On va donc calculer

150
00:10:40,970 --> 00:10:44,604
maintenant somme, c'est-à-dire 5, plus
note,

151
00:10:44,604 --> 00:10:50,103
c'est-à-dire 4, obtenir 9, et mettre ce 9
dans

152
00:10:50,103 --> 00:10:55,562
la variable "somme".
Mais vous pouvez vous

153
00:10:55,562 --> 00:11:01,920
convaincre qu'à ce stade du programme, la
variable "somme" va contenir

154
00:11:01,920 --> 00:11:08,342
zéro, plus 5, plus 4, plus 6,

155
00:11:08,342 --> 00:11:15,255
plus 4, c'est-à-dire bien la somme de
quatre valeurs entrées par l'utilisateur.

156
00:11:15,255 --> 00:11:20,223
Alors l'avantage de cette nouvelle
version, c'est que, on va pouvoir

157
00:11:20,223 --> 00:11:25,688
mettre ce code, qui est répété quatre
fois, à l'intérieur d'une boucle for.

158
00:11:25,688 --> 00:11:28,593
C'est ce que j'ai fait ici, j'ai repris le

159
00:11:28,593 --> 00:11:33,670
code qui était sur le transparent
précédent, j'ai juste modifié

160
00:11:33,670 --> 00:11:39,170
le numéro de la note, et utilisé une
boucle for ici, avec

161
00:11:39,170 --> 00:11:44,246
une variable déclarée à l'intérieur de la
boucle for, que j'ai

162
00:11:44,246 --> 00:11:49,540
appelée i, qui est initialisée à 1 et qui
va aller jusque 4.

163
00:11:49,540 --> 00:11:58,380
N'oubliez-pas, dans cet exemple,
d'initialiser la variable "somme" à zéro.

164
00:11:58,380 --> 00:12:02,460
Maintenant, notre programme n'est
intéressant que dans le cas

165
00:12:02,460 --> 00:12:06,380
où l'utilisateur veut calculer la moyenne
de quatre notes.

166
00:12:06,380 --> 00:12:10,475
Supposons maintenant qu'on veuille laisser
choisir l'utilisateur le nombre de notes.

167
00:12:10,475 --> 00:12:13,075
Donc comment faut-il modifier notre
programme ?

168
00:12:13,075 --> 00:12:18,547
Alors je vais commencer par laisser la
place pour ajouter mes modifications ;

169
00:12:18,547 --> 00:12:23,130
je vais déclarer une variable que j'ai
appelé "nombre de notes",

170
00:12:23,130 --> 00:12:25,618
définie de type int ; je vais demander à

171
00:12:25,618 --> 00:12:29,648
l'utilisateur d'entrer une valeur pour
cette variable "nombre

172
00:12:29,648 --> 00:12:32,221
de notes". Et maintenant il me suffit de

173
00:12:32,221 --> 00:12:35,425
remplacer ce 4 par ma variable "nombre de
notes".

174
00:12:35,425 --> 00:12:40,239
Il ne faut pas que j'oublie non plus de
remplacer ce 4 ici, qui me permet de

175
00:12:40,239 --> 00:12:48,802
calculer la moyenne des notes, par ma
variable "nombre de notes".

176
00:12:48,802 --> 00:12:52,652
Les modifications n'étaient pas très difficiles.
En revanche, je

177
00:12:52,652 --> 00:12:56,230
viens d'introduire une erreur dans mon
programme.

178
00:12:56,230 --> 00:12:59,300
Alors est-ce que vous voyez où est cette
erreur ?

179
00:12:59,300 --> 00:13:03,563
Cette erreur va survenir en fait quand
l'utilisateur entre

180
00:13:03,563 --> 00:13:08,021
la valeur zéro pour la variable "nombre de
notes".

181
00:13:08,021 --> 00:13:10,787
Et à ce stade du programme, je vais

182
00:13:10,787 --> 00:13:14,360
diviser par zéro, ce qui va provoquer une
erreur.

183
00:13:14,360 --> 00:13:19,440
Alors, il y a plusieurs solutions
possibles. Une solution, ça va

184
00:13:19,440 --> 00:13:24,370
être de tester si le nombre de notes

185
00:13:24,370 --> 00:13:29,455
est bien supérieur à zéro, comme il se
doit, et donc je n'ai

186
00:13:29,455 --> 00:13:34,770
plus qu'à ajouter un branchement
conditionnel, mettre

187
00:13:34,770 --> 00:13:40,001
le code qui demande d'entrer les notes à
l'intérieur

188
00:13:40,001 --> 00:13:43,446
de ce branchement conditionnel, ainsi que

189
00:13:43,446 --> 00:13:49,860
l'instruction qui affiche la moyenne des
notes.

190
00:13:49,860 --> 00:13:53,862
Terminons avec ce qu'on appelle les
boucles imbriquées.

191
00:13:53,862 --> 00:13:59,261
Alors je vais revenir sur l'exemple de la
table de multiplication par 5 qui

192
00:13:59,261 --> 00:14:05,500
utilisait cette boucle for pour afficher
la table, et je vais supposer maintenant

193
00:14:05,500 --> 00:14:10,920
que je veuille afficher toutes les tables
de multiplication de 2 à 10.

194
00:14:10,920 --> 00:14:14,176
Et bien il suffit de mettre cette boucle
for à

195
00:14:14,176 --> 00:14:18,756
l'intérieur d'une autre boucle for, et de
la modifier légèrement.

196
00:14:18,756 --> 00:14:24,458
Alors si je mets directement cette boucle
for à l'intérieur d'une autre, comme ce

197
00:14:24,458 --> 00:14:30,730
que j'ai fait ici, donc j'ai gardé
exactement le même code pour cette boucle

198
00:14:30,730 --> 00:14:33,694
for, je l'ai mis à l'intérieur d'une

199
00:14:33,694 --> 00:14:37,466
deuxième boucle for qui utilise une
variable j,

200
00:14:37,466 --> 00:14:42,260
qui va être initialisée à 2, avec une
condition, j inférieur ou égal à 10.

201
00:14:42,260 --> 00:14:47,470
Donc j pourra prendre neuf valeurs, de 2 à
10.

202
00:14:47,470 --> 00:14:53,535
Donc tout ce code va m'afficher neuf fois
la table de multiplication par 5.

203
00:14:53,535 --> 00:14:56,031
Si je veux maintenant afficher

204
00:14:56,031 --> 00:15:02,284
toutes les tables de multiplication de 2 à
10, il me suffit de modifier ce

205
00:15:02,284 --> 00:15:08,595
5 pour le changer en la valeur de j, et
surtout de modifier ce 5, ici.

206
00:15:08,595 --> 00:15:12,252
Donc je vais donc obtenir ce code-ci, que

207
00:15:12,252 --> 00:15:17,380
je vais détailler pour vérifier qu'il
fonctionne correctement.

208
00:15:17,380 --> 00:15:21,070
La première boucle for commence par

209
00:15:21,070 --> 00:15:26,350
déclarer une variable j initialisée à 2.
On va ensuite

210
00:15:26,350 --> 00:15:32,286
tester la condition j inférieur ou égal à
10, la condition est vraie, donc on va

211
00:15:32,286 --> 00:15:33,892
rentrer dans le corps de la

212
00:15:33,892 --> 00:15:38,055
boucle for j ; c'est-à-dire exécuter cette
instruction-ci,

213
00:15:38,055 --> 00:15:45,500
qui affiche "table de multiplication par",
ensuite la valeur de j, c'est-à-dire 2,

214
00:15:45,500 --> 00:15:52,424
ensuite un ":". On va maintenant exécuter
la boucle for i qui se

215
00:15:52,424 --> 00:15:59,309
trouve ici, qui déclare donc, une variable
i, et l'initialise à la valeur 1.

216
00:15:59,309 --> 00:16:04,960
On va ensuite tester la condition i
inférieur ou égal à 10, qui est vraie.

217
00:16:04,960 --> 00:16:10,604
On va donc rentrer dans la boucle for i ;
c'est-à-dire exécuter cette

218
00:16:10,604 --> 00:16:16,304
instruction-ci avec la valeur de j qui
vaut 2.

219
00:16:16,304 --> 00:16:21,577
On va afficher multiplier par, ensuite

220
00:16:21,577 --> 00:16:26,373
la valeur de i qui vaut 1, ensuite

221
00:16:26,373 --> 00:16:31,238
"vaut", et ensuite la valeur de l'expression
j

222
00:16:31,238 --> 00:16:36,509
fois i, qui vaut tout simplement 2.
On va continuer

223
00:16:36,509 --> 00:16:40,692
ensuite à exécuter la boucle for i,

224
00:16:40,692 --> 00:16:45,982
c'est-à-dire qu'on va revenir ici.
L'opération

225
00:16:45,982 --> 00:16:51,560
d'incrémentation va ajouter 1 à la valeur

226
00:16:51,560 --> 00:16:56,725
de i, donc i va prendre la valeur 2, la
condition est toujours vraie,

227
00:16:56,725 --> 00:17:01,765
et donc on va continuer à exécuter le
corps de la boucle for

228
00:17:01,765 --> 00:17:06,690
i avec j qui vaut toujours

229
00:17:06,690 --> 00:17:11,702
2, maintenant i vaut 2. On va donc

230
00:17:11,702 --> 00:17:16,684
afficher 2 ici, et l'expression

231
00:17:16,684 --> 00:17:21,660
j multiplié par i vaut maintenant 2 fois
2,

232
00:17:21,660 --> 00:17:27,060
c'est-à-dire 4.
Ainsi de suite jusqu'à ce

233
00:17:27,060 --> 00:17:35,711
que i prenne la valeur 10, l'opération
d'incrémentation va donner la valeur 11 à

234
00:17:35,711 --> 00:17:41,973
la variable i, la condition ici va devenir
fausse, et on va sortir de la boucle.

235
00:17:41,973 --> 00:17:47,226
Sortir de la boucle, ça veut dire
continuer, ici, à ce stade du

236
00:17:47,226 --> 00:17:52,438
programme, et on arrive à la fin du corps
de la boucle

237
00:17:52,438 --> 00:17:56,082
for j.
Et donc on va continuer à itérer à

238
00:17:56,082 --> 00:18:01,550
l'intérieur de la boucle for j,
c'est-à-dire revenir ici,

239
00:18:01,550 --> 00:18:06,990
incrémenter j, en exécutant

240
00:18:06,990 --> 00:18:13,380
l'opération d'incrémentation ++j, donc j
va prendre la valeur 3.

241
00:18:13,380 --> 00:18:17,540
La condition j inférieur ou égal à 10 est
toujours vraie, donc on

242
00:18:17,540 --> 00:18:22,244
va entrer dans le corps de la boucle.
«Entrer dans le corps de la boucle», ça

243
00:18:22,244 --> 00:18:27,117
veut dire exécuter d'abord cette
instruction-ci, qui affiche "Table de

244
00:18:27,117 --> 00:18:32,392
multiplication par", avec la valeur de j
qui vaut maintenant 3.

245
00:18:32,392 --> 00:18:37,750
 Et on entre encore une fois dans la
boucle for i. La variable

246
00:18:37,750 --> 00:18:42,990
i est de nouveau initialisée

247
00:18:42,990 --> 00:18:47,980
à 1. La condition est vraie, et on va
entrer dans la boucle, dans

248
00:18:47,980 --> 00:18:52,905
le corps de la boucle for i, et exécuter
cette instruction-ci,

249
00:18:52,905 --> 00:18:58,075
avec cette fois-ci j qui vaut 3, on va
afficher "multiplié

250
00:18:58,075 --> 00:19:03,050
par". La valeur de i, qui vaut 1, ensuite

251
00:19:03,050 --> 00:19:08,216
"vaut", et la valeur de cette expression,
qui est 3 fois

252
00:19:08,216 --> 00:19:16,990
1, c'est-à-dire 3, et ainsi de suite.

