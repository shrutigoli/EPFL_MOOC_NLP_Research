1
00:00:00,000 --> 00:00:03,816
Dans des séquences précédentes, nous avons

2
00:00:03,816 --> 00:00:07,670
abordé la notion de structures de
contrôle.

3
00:00:07,670 --> 00:00:09,353
Nous avons vu qu'il s'agit d'instructions

4
00:00:09,353 --> 00:00:11,291
particulières qui vont permettre de
répéter

5
00:00:11,291 --> 00:00:13,280
des traitements, ou d'exécuter des
traitements

6
00:00:13,280 --> 00:00:15,340
en fonction d'un certain nombre de
conditions.

7
00:00:15,340 --> 00:00:19,060
Nous allons aujourd'hui continuer sur
cette lancée et aborder une autre

8
00:00:19,060 --> 00:00:23,210
façon de répéter des traitements que l'on
appelle des boucles conditionnelles.

9
00:00:23,210 --> 00:00:25,586
Lorsque l'on souhaite, dans un programme,

10
00:00:25,586 --> 00:00:28,542
répéter un certain nombre de traitements
et que le

11
00:00:28,542 --> 00:00:31,836
nombre de répétitions est connu à priori,
c'est-à-dire avant même

12
00:00:31,836 --> 00:00:34,600
d'entrer dans la boucle, nous avons vu
qu'il était

13
00:00:34,600 --> 00:00:38,760
possible d'avoir recours à une boucle for,
la notion d'itération.

14
00:00:38,760 --> 00:00:41,550
Il existe cependant des situations où l'on
souhaite répéter un traitement.

15
00:00:41,550 --> 00:00:43,350
Le répéter, par exemple tant qu'une
condition est

16
00:00:43,350 --> 00:00:45,332
vérifiée mais on ne sait pas combien de
fois

17
00:00:45,332 --> 00:00:48,340
il va être nécessaire de répéter les
traitements jusqu'à

18
00:00:48,340 --> 00:00:50,638
ce que la condition ne soit plus vérifiée
et

19
00:00:50,638 --> 00:00:52,998
dans ce cas, il faut avoir recours à
d'autres types

20
00:00:52,998 --> 00:00:55,122
d'instructions de répétition: les boucles

21
00:00:55,122 --> 00:00:57,425
conditionnelles, les boucles dont
l'exécution

22
00:00:57,425 --> 00:01:01,097
dépend de la réalisation d'une condition
et plus concrètement en

23
00:01:01,097 --> 00:01:04,330
C++, elles prendront la forme de boucles
do while ou while.

24
00:01:04,330 --> 00:01:04,730
Pour illustrer notre propos, reprenons notre petit exemple

25
00:01:04,730 --> 00:01:05,070
de calcul des moyennes d'un certain nombre de notes.

26
00:01:05,070 --> 00:01:10,903
Donc nous ne savons pas

27
00:01:10,903 --> 00:01:16,046
à priori de combien de notes nous voulons
calculer la moyenne, donc nous commençons

28
00:01:16,046 --> 00:01:18,167
par le demander à l'utilisateur et le
nombre de

29
00:01:18,167 --> 00:01:21,560
notes voulu va être saisi via une
interaction au clavier.

30
00:01:21,560 --> 00:01:24,144
Ensuite, si ce nombre de notes est
positif, nous

31
00:01:24,144 --> 00:01:27,835
allons utiliser une itération for pour
saisir toutes les notes.

32
00:01:27,835 --> 00:01:32,547
Donc à chaque itération demandée, la note
numéro i, saisir cette note via une

33
00:01:32,547 --> 00:01:36,966
interaction au clavier et incorporer la
note à la somme de toutes les notes.

34
00:01:36,966 --> 00:01:41,417
Donc une fois que nous avons atteint le
nombre de notes voulues, nous sortons

35
00:01:41,417 --> 00:01:44,343
évidemment de l'itération et nous
continuons

36
00:01:44,343 --> 00:01:46,788
l'exécution du programme en séquence et à

37
00:01:46,788 --> 00:01:51,400
ce moment-là, nous allons calculer la
moyenne des notes et la faire afficher.

38
00:01:51,400 --> 00:01:55,172
Une observation que l'on peut faire ici
est qu'il n'est pas

39
00:01:55,172 --> 00:01:59,238
très naturel qu'un utilisateur saisisse un
nombre de notes qui soit

40
00:01:59,238 --> 00:02:01,474
nul et la question que l'on peut se
poser, c'est dans

41
00:02:01,474 --> 00:02:03,318
ce cas-là, comment forcer l'utilisateur à

42
00:02:03,318 --> 00:02:06,721
introduire systématiquement un nombre de
notes

43
00:02:06,721 --> 00:02:08,480
qui soit supérieur à zéro?.

44
00:02:08,480 --> 00:02:13,478
Très concrètement, nous voulons ici
répéter ces instructions jusqu'à ce que

45
00:02:13,478 --> 00:02:15,545
l'utilisateur consente à introduire un
nombre

46
00:02:15,545 --> 00:02:17,310
de notes qui soit strictement positif.

47
00:02:17,310 --> 00:02:19,418
Nous ne savons pas ici combien de fois

48
00:02:19,418 --> 00:02:22,342
il faudra répéter ces instructions puisque
nous ne

49
00:02:22,342 --> 00:02:25,310
pouvons pas prédire à priori quand
l'utilisateur va

50
00:02:25,310 --> 00:02:29,405
effectivement saisir un nombre de notes
strictement positif.

51
00:02:29,405 --> 00:02:31,751
Et donc dans ce cas, il faut avoir recours
à une structure

52
00:02:31,751 --> 00:02:36,160
de contrôle particulière et la réponse à
nos besoins ici serait ce qu'on appelle la

53
00:02:36,160 --> 00:02:43,216
boucle do while La boucle do while se
rédige concrètement comme suit: on utilise

54
00:02:43,216 --> 00:02:45,428
le mot réservé "do" suivi d'une paire

55
00:02:45,428 --> 00:02:48,632
d'accolades ouvrantes et fermantes et le
mot

56
00:02:48,632 --> 00:02:51,994
réservé "while" pour dire tant que, ce

57
00:02:51,994 --> 00:02:56,775
qui veut dire concrètement répéter tant
que cette

58
00:02:56,775 --> 00:02:58,920
condition est vraie.

59
00:02:58,920 --> 00:03:02,139
Donc très concrètement, nous allons
répéter

60
00:03:02,139 --> 00:03:05,097
les instructions qui se trouvent dans ce

61
00:03:05,097 --> 00:03:07,190
que l'on appelle le corps, donc

62
00:03:07,190 --> 00:03:10,955
toutes les instructions comprises entre
les accolades.

63
00:03:10,955 --> 00:03:15,040
Nous allons répéter l'exécution de ce
corps tant que la condition est vraie.

64
00:03:15,040 --> 00:03:18,484
Examinons maintenant pas à pas le
déroulement de

65
00:03:18,484 --> 00:03:21,778
notre petit exemple avec la boucle do
while. Nous

66
00:03:21,778 --> 00:03:25,158
pré-supposons ici qu'une variable 
nombre_de_notes a été au préalable déclarée

67
00:03:25,158 --> 00:03:28,100
et est prête à contenir un nombre de note
saisies par un utilisateur.

68
00:03:28,100 --> 00:03:32,052
Lorsque nous abordons cette instruction,
rien ne nous empêche

69
00:03:32,052 --> 00:03:34,408
d'entrer dans le corps de la boucle et à

70
00:03:34,408 --> 00:03:37,460
ce moment-là, nous allons signifier à
l'utilisateur que nous

71
00:03:37,460 --> 00:03:39,825
attendons de lui qu'il introduise un
nombre de notes.

72
00:03:39,825 --> 00:03:42,676
Le nombre de notes est saisi via une
interaction au clavier et

73
00:03:42,676 --> 00:03:47,605
nous aboutissons à l'exécution de cette
ligne qui va évaluer la condition

74
00:03:47,605 --> 00:03:50,395
de continuation de la boucle.

75
00:03:50,395 --> 00:03:52,663
Supposons dans un premier temps que
l'utilisateur

76
00:03:52,663 --> 00:03:54,450
saisisse en guise de note la valeur zéro.

77
00:03:54,450 --> 00:03:57,798
Donc l'évaluation de cette condition, dans
ce cas-là, va retourner

78
00:03:57,798 --> 00:04:01,534
"true" ce qui signifie que le nombre de
notes ne

79
00:04:01,534 --> 00:04:04,262
répond pas aux attentes que nous avons et
nous allons

80
00:04:04,262 --> 00:04:07,500
donc entamer un nouveau cycle puisque la
condition est vraie.

81
00:04:07,500 --> 00:04:10,238
Nous allons donc à nouveau exécuter le
corps

82
00:04:10,238 --> 00:04:12,905
de la boucle et supposons que cette
fois-ci,

83
00:04:12,905 --> 00:04:15,849
l'utilisateur introduise en guise de
nombre de notes au

84
00:04:15,849 --> 00:04:18,310
moment de la saisie clavier la valeur -1.

85
00:04:18,310 --> 00:04:23,642
Au moment de l'évaluation de la condition
de continuation, cette condition

86
00:04:23,642 --> 00:04:27,050
va, comme précédemment, être évaluée à
"true" puisque -1 est

87
00:04:27,050 --> 00:04:30,344
bien évidemment inférieur ou égal à zéro,
et à ce moment-là,

88
00:04:30,344 --> 00:04:34,540
nous allons à nouveau entamer une nouvelle
itération de la boucle.

89
00:04:34,540 --> 00:04:38,236
Nous entamons alors une troisième
itération de la boucle, à nouveau

90
00:04:38,236 --> 00:04:41,993
nous allons demander à l'utilisateur
d'entrer un nombre de notes, lire

91
00:04:41,993 --> 00:04:45,470
cette note via une interaction clavier et
supposons que cette fois-ci, de

92
00:04:45,470 --> 00:04:49,128
guerre lasse, l'utilisateur finisse par
comprendre ce qu'on attend de lui et

93
00:04:49,128 --> 00:04:53,230
saisisse un nombre de notes qui soit
strictement positif, par exemple 6.

94
00:04:53,230 --> 00:04:57,826
À ce moment-là, au moment de l'évaluation
de la condition de continuation de la

95
00:04:57,826 --> 00:05:03,840
boucle, cette évaluation va retourner,
cette fois fausse puis que 6 est supérieur

96
00:05:03,840 --> 00:05:07,728
strictement à zéro et à ce moment-là, nous
allons donc sortir de la

97
00:05:07,728 --> 00:05:10,210
boucle do while et continuer l'exécution

98
00:05:10,210 --> 00:05:13,910
après le point-virgule terminant
l'instruction do while.

99
00:05:13,910 --> 00:05:18,372
Donc voici maintenant formellement les
éléments de

100
00:05:18,372 --> 00:05:21,910
la syntaxe d'une instruction do while en
C++.

101
00:05:21,910 --> 00:05:24,213
Les mots réservés do while qui encadrent
ce que l'on appelle

102
00:05:24,213 --> 00:05:27,040
le corps de do while, lequel est entre
accolades ouvrantes et fermantes.

103
00:05:27,040 --> 00:05:28,900
Après le while se trouve

104
00:05:28,900 --> 00:05:34,466
la condition de continuation de la boucle
et la sémantique est la suivante:

105
00:05:34,466 --> 00:05:39,860
les traitements du corps sont répétés tant
que la condition est évaluée à "true".

106
00:05:39,860 --> 00:05:44,240
Donc on répète les traitements tant que la
condition est évaluée à "true".

107
00:05:44,240 --> 00:05:47,052
Donc comme pour l'instruction de
branchement

108
00:05:47,052 --> 00:05:49,568
conditionel if, la condition d'arrêt de la

109
00:05:49,568 --> 00:05:54,212
boucle do while peut être rédigée de façon
relativement complexe et avoir recours

110
00:05:54,212 --> 00:05:55,488
à des opérateurs logiques.

111
00:05:55,488 --> 00:05:59,501
On peut, par exemple, écrire des
conditions qui auraient cette allure, donc

112
00:05:59,501 --> 00:06:05,580
on itère les traitements, on répète les
traitements tant que x est égal à y plus z

113
00:06:05,580 --> 00:06:13,495
et que z est supérieur à 10 ou que t est
inférieur à 25, par exemple.

114
00:06:13,495 --> 00:06:16,127
Donc on peut imaginer la rédaction de
conditions d'arrêt

115
00:06:16,127 --> 00:06:19,655
relativement sophistiquées notamment en
ayant recours à des connecteurs

116
00:06:19,655 --> 00:06:21,410
logiques, à des opérateurs logiques.

117
00:06:21,410 --> 00:06:25,235
Il faut noter également que les
parenthèses autour de

118
00:06:25,235 --> 00:06:29,265
la condition sont des éléments de syntaxe
obligatoires en

119
00:06:29,265 --> 00:06:31,225
C++ et donc tout comme pour le if, il

120
00:06:31,225 --> 00:06:35,160
va falloir rédiger notre condition entre
une paire de parenthèses.

121
00:06:35,160 --> 00:06:39,102
Une observation importante à faire à
propos de la boucle do while

122
00:06:39,102 --> 00:06:43,295
est que son corps va systématiquement être
exécuté au moins une fois.

123
00:06:43,295 --> 00:06:44,663
Effectivement, si on se

124
00:06:44,663 --> 00:06:47,830
rappelle l'exemple pas à pas d'exécution
d'une boucle

125
00:06:47,830 --> 00:06:50,050
do while, arrivé à ce stade de l'exécution
rien

126
00:06:50,050 --> 00:06:52,450
ne nous empêche de rentrer à l'intérieur
du corps

127
00:06:52,450 --> 00:06:54,570
et donc d'exécuter ce bloc au moins une
fois.

128
00:06:54,570 --> 00:06:58,340
Ce bloc d'instructions ne sera exécuté
qu'une seule fois si au bout de la

129
00:06:58,340 --> 00:07:01,395
première itération, l'évaluation de cette
condition est

130
00:07:01,395 --> 00:07:04,860
telle que le résultat de l'évaluation est
fausse.

131
00:07:04,860 --> 00:07:09,984
À ce moment-là, nous avons vu que nous
allons poursuivre l'exécution après

132
00:07:09,984 --> 00:07:10,680
la boucle.

133
00:07:10,680 --> 00:07:14,450
Mais entre-temps, le bloc d'instructions
ici aura été exécuté au moins une fois.

134
00:07:14,450 --> 00:07:18,520
Donc ceci est important et fait partie des
caractéristiques de la boucle do while.

135
00:07:18,520 --> 00:07:22,048
Autre observation qui a son importance: si
la condition ne

136
00:07:22,048 --> 00:07:26,520
devient jamais fausse, et bien les
traitements sont répétés indéfiniment.

137
00:07:26,520 --> 00:07:30,550
Donc il faut être attentif à bien formuler
la condition d'arrêt de sorte à ne

138
00:07:30,550 --> 00:07:33,435
pas tomber dans une boucle infinie qui
généralement

139
00:07:33,435 --> 00:07:35,297
n'est pas un comportement que l'on va
souhaiter,

140
00:07:35,297 --> 00:07:37,110
en tout cas à ce stade de votre
apprentissage.

141
00:07:37,110 --> 00:07:38,090
Voilà pour ce qui est des

142
00:07:38,090 --> 00:07:40,350
éléments fondamentaux concernant la boucle
do while.

143
00:07:40,350 --> 00:07:42,040
Avant de clore sur le sujet de la

144
00:07:42,040 --> 00:07:45,290
syntaxe de l'instruction do while, une
dernière toute petite

145
00:07:45,290 --> 00:07:48,315
mise en garde syntaxique: le petit
point-virgule qu'on a

146
00:07:48,315 --> 00:07:50,850
tendance à oublier et qui clôt
l'instruction do while.

147
00:07:50,850 --> 00:07:56,583
Alors il existe des situations où il est
souhaitable de tester la condition

148
00:07:56,583 --> 00:08:00,287
de la boucle avant même d'avoir exécuté le
corps au moins une fois.

149
00:08:00,287 --> 00:08:03,187
Et dans ce cas-là nous allons avoir
recours à une variante de

150
00:08:03,187 --> 00:08:05,780
boucle conditionnelle, qui est
l'instruction while,

151
00:08:05,780 --> 00:08:07,288
qui se rédige comme suit: le mot

152
00:08:07,288 --> 00:08:09,144
réservé "while" suivi directement de la

153
00:08:09,144 --> 00:08:11,986
condition entre, toujours, paire de
parenthèses fermantes

154
00:08:11,986 --> 00:08:17,666
ouvrantes et suivi du corps de la boucle
entre accolades ouvrantes et fermantes.

155
00:08:17,666 --> 00:08:21,815
Le principe de fonctionnement est le même,
est analogue à celui

156
00:08:21,815 --> 00:08:25,315
de la boucle do while donc on va répéter
les traitements tant

157
00:08:25,315 --> 00:08:30,286
que la condition est évaluée à "true".
La différence principale avec la boucle do

158
00:08:30,286 --> 00:08:36,396
while est que la condition est testée
avant même d'entrer dans la boucle.

159
00:08:36,396 --> 00:08:40,092
Donc si on imagine que la première fois où
on aborde

160
00:08:40,092 --> 00:08:44,110
cette instruction, la condition ici est
d'emblée fausse on va directement

161
00:08:44,110 --> 00:08:47,118
passer à l'instruction suivant le while et
donc le bloc ne

162
00:08:47,118 --> 00:08:50,317
sera même pas exécuté une seule fois, ce
qui est différent de

163
00:08:50,317 --> 00:08:52,585
l'instruction "do while" où ce bloc, on
vient de

164
00:08:52,585 --> 00:08:55,050
le voir, est exécuté au moins une fois,
toujours.

165
00:08:55,050 --> 00:08:59,082
Voici maintenant deux petits exemples
basiques permettant d'illustrer la

166
00:08:59,082 --> 00:09:02,127
différence fondamentale entre un do while
et un while.

167
00:09:02,127 --> 00:09:05,232
Nous avons ici affaire à deux boucles très
similaires,

168
00:09:05,232 --> 00:09:08,190
dont les deux conditions de continuation
sont les mêmes.

169
00:09:08,190 --> 00:09:11,190
Ces conditions de continuation vont
dépendre dans les deux

170
00:09:11,190 --> 00:09:13,977
cas d'une variable i qui est initialisée à
100.

171
00:09:13,977 --> 00:09:15,804
Commençons par examiner

172
00:09:15,804 --> 00:09:18,729
ce qui se passe lors de l'exécution du do
while.

173
00:09:18,729 --> 00:09:20,973
Lorsque nous atteignons l'exécution du do
while rien

174
00:09:20,973 --> 00:09:23,115
ne nous empêche d'entrer directement dans
le corps

175
00:09:23,115 --> 00:09:24,543
de la boucle et à ce moment-là, nous

176
00:09:24,543 --> 00:09:27,676
allons afficher sur le terminal le message
bonjour.

177
00:09:27,676 --> 00:09:31,399
Nous atteignons ensuite cette partie de la
boucle do

178
00:09:31,399 --> 00:09:33,890
while où il s'agit d'évaluer la condition
de continuation.

179
00:09:33,890 --> 00:09:38,176
Ici, puisque i vaut 100, le résultat de
l'évaluation sera bien évidemment "false".

180
00:09:38,176 --> 00:09:40,929
Ce qui veut dire que nous allons sortir de
la boucle

181
00:09:40,929 --> 00:09:42,441
et continuer l'exécution avec les

182
00:09:42,441 --> 00:09:44,547
éventuelles instructions suivant le do
while.

183
00:09:44,547 --> 00:09:48,160
Entre-temps, le message "bonjour" aura été
affiché sur le terminal.

184
00:09:48,160 --> 00:09:53,630
Concernant la bouche while, lorsque nous
abordons

185
00:09:53,630 --> 00:09:55,190
l'exécution de cette ligne, nous allons
d'emblée

186
00:09:55,190 --> 00:09:56,790
évaluer la condition de continuation qui,
comme

187
00:09:56,790 --> 00:09:59,362
pour le cas précédent, puisque nous sommes
exactement

188
00:09:59,362 --> 00:10:02,715
dans la même situation, va être évaluée à
"false", ce qui veut dire que nous

189
00:10:02,715 --> 00:10:04,027
n'allons jamais entrer dans le corps de

190
00:10:04,027 --> 00:10:05,954
la boucle et continuer l'exécution
directement après le

191
00:10:05,954 --> 00:10:08,900
while Donc, dans ce cas-ci, la boucle
n'affichera rien.

192
00:10:08,900 --> 00:10:12,350
Donc typiquement nous sommes ici dans une
situation où

193
00:10:12,350 --> 00:10:15,036
deux boucles très similaires, un do while
et un

194
00:10:15,036 --> 00:10:17,088
while ne font pas les mêmes choses en
raison

195
00:10:17,088 --> 00:10:19,690
du moment où la condition de continuation
est évaluée.

196
00:10:19,690 --> 00:10:23,470
Donc parmi les erreurs classiques lorsque
l'on débute

197
00:10:23,470 --> 00:10:26,998
avec l'utilisation des boucles while et do
while, il

198
00:10:26,998 --> 00:10:29,115
en est une qui peut donner des résultats

199
00:10:29,115 --> 00:10:31,167
un peu déconcertants et qui est liée à
notre

200
00:10:31,167 --> 00:10:32,560
fameux petit point-virgule.

201
00:10:32,560 --> 00:10:35,944
Nous avons vu que ce point-virgule clôt
l'instruction do

202
00:10:35,944 --> 00:10:39,050
while donc arrive après la condition du do
while.

203
00:10:39,050 --> 00:10:43,829
Si d'aventure on s'amusait à mettre un
point-virgule après la condition

204
00:10:43,829 --> 00:10:47,435
d'un while, on aurait un comportement
inattendu et erroné de notre programme.

205
00:10:47,435 --> 00:10:49,396
Donc voyons ici concrètement
ce

206
00:10:49,396 --> 00:10:51,610
qui se passerait si on mettait un
point-virgule.

207
00:10:51,610 --> 00:10:54,348
Donc ici c'est interprété, cette
instruction,

208
00:10:54,348 --> 00:10:56,272
comme si nous avions une boucle

209
00:10:56,272 --> 00:11:01,510
while avec comme corps une instruction
vide, et donc il n'y a rien à

210
00:11:01,510 --> 00:11:05,731
l'intérieur de cette boucle while dans le
corps qui permette de faire évoluer le i.

211
00:11:05,731 --> 00:11:10,171
Si l'on imagine que ce i avait pour
valeur quelque chose

212
00:11:10,171 --> 00:11:15,340
d'inférieur à 10 donc par exemple 1, cette
boucle va cycler indéfiniment parce

213
00:11:15,340 --> 00:11:17,815
que il n'y a aucun moyen de faire
atteindre à i une valeur

214
00:11:17,815 --> 00:11:20,810
qui lui permette de faire sortir de la
boucle, donc de dépasser 10.

215
00:11:20,810 --> 00:11:21,674
En réalité,

216
00:11:21,674 --> 00:11:23,869
ce ++i, que probablement on

217
00:11:23,869 --> 00:11:26,415
souhaitait mettre à l'intérieur du corps
ne va

218
00:11:26,415 --> 00:11:30,370
jamais être atteint dans le cas de figure
précis où i est inférieur à 10.

219
00:11:30,370 --> 00:11:34,722
Donc ceci, cette instruction va être
considérée, cette instruction plus plus

220
00:11:34,722 --> 00:11:38,140
i, va être considérée comme étant en
dehors de la bouche while.

221
00:11:38,140 --> 00:11:40,486
Vous connaissez désormais trois façons de
répéter des

222
00:11:40,486 --> 00:11:42,628
instructions dans un programme: la boucle
for, les

223
00:11:42,628 --> 00:11:44,362
itérations de type for que nous avons vue

224
00:11:44,362 --> 00:11:46,962
dans une séquence précédente et ce que
nous venons

225
00:11:46,962 --> 00:11:50,610
de voir, les boucles conditionnelles qui
peuvent prendre

226
00:11:50,610 --> 00:11:53,200
la forme soit d'un while, soit d'un do
while.

227
00:11:53,200 --> 00:11:55,081
On va se poser la question maintenant de

228
00:11:55,081 --> 00:11:57,361
comment choisir entre l'une ou l'autre des
formes.

229
00:11:57,361 --> 00:11:59,440
Le choix relève de principes assez
simples.

230
00:11:59,440 --> 00:12:04,032
Si le nombre de répétition des traitements
est connu d'avance, est connu à

231
00:12:04,032 --> 00:12:07,580
priori, le choix va naturellement se
porter sur une itération de type fort.

232
00:12:07,580 --> 00:12:09,881
Imaginez par exemple que je souhaite
calculer

233
00:12:09,881 --> 00:12:12,064
la moyenne de tous les étudiants qui
suivent

234
00:12:12,064 --> 00:12:15,104
ce cours, je connais à priori le nombre
d'étudiants suivant

235
00:12:15,104 --> 00:12:17,920
ce cours et donc pour calculer la somme de
leurs notes

236
00:12:17,920 --> 00:12:21,065
et calculer la moyenne, je vais plutôt
partir sur un choix

237
00:12:21,065 --> 00:12:25,330
de boucle for puisque le nombre
d'itérations est connu a priori.

238
00:12:25,330 --> 00:12:27,943
Sinon, si le nombre d'itérations n'est pas
connu à

239
00:12:27,943 --> 00:12:31,570
priori, je vais orienter mon choix vers
l'utilisation d'une boucle

240
00:12:31,570 --> 00:12:33,901
conditionnelle de type while ou do while
et à

241
00:12:33,901 --> 00:12:36,550
ce moment là, comment faire le choix entre
les deux?

242
00:12:36,550 --> 00:12:37,398
Et bien simplement,

243
00:12:37,398 --> 00:12:39,889
on va distinguer entre le cas où l'on a
besoin d'exécuter au

244
00:12:39,889 --> 00:12:42,380
moins une fois le corps ou pas.

245
00:12:42,380 --> 00:12:45,142
J'ai besoin d'exécuter au moins une fois
le corps par

246
00:12:45,142 --> 00:12:49,465
exemple lorsque j'interagis
avec l'utilisateur. Typiquement, je

247
00:12:49,465 --> 00:12:52,210
demande une valeur à l'utilisateur et je
veux que cette valeur soit comprise

248
00:12:52,210 --> 00:12:55,712
entre deux bornes. J'ai besoin que
l'utilisateur saisisse au moins une

249
00:12:55,712 --> 00:12:59,051
fois la valeur avant de tester si elle
satisfait la condition et

250
00:12:59,051 --> 00:13:02,781
à ce moment-là je vais plutôt orienter mon
choix vers une boucle

251
00:13:02,781 --> 00:13:03,704
de type do while.

252
00:13:03,704 --> 00:13:06,544
Sinon, et bien le choix se portera
naturellement

253
00:13:06,544 --> 00:13:08,646
sur une forme de type while donc une

254
00:13:08,646 --> 00:13:11,344
boucle où l'évaluation de la condition se
fait

255
00:13:11,344 --> 00:13:14,060
avant même d'entrer dans le corps de la
boucle.

256
00:13:14,060 --> 00:13:17,372
Alors étoffons un petit peu notre exemple
de tout à l'heure.

257
00:13:17,372 --> 00:13:20,132
Il s'agit d'un cas typique où nous avons
besoin d'un

258
00:13:20,132 --> 00:13:22,944
do while parce que l'utilisateur a besoin
de saisir au

259
00:13:22,944 --> 00:13:24,920
moins une fois le nombre de notes avant
que l'on

260
00:13:24,920 --> 00:13:27,570
soit capable de tester si elle entre dans
les bornes voulues,

261
00:13:27,570 --> 00:13:30,538
donc nous avons recours à une boucle do
while et maintenant nous

262
00:13:30,538 --> 00:13:33,840
nous proposons d'améliorer un petit peu ce
programme de sorte à ce

263
00:13:33,840 --> 00:13:38,172
que l'utilisateur soit avisé, au moment où
il introduit un mombre par exemple, 

264
00:13:38,172 --> 00:13:41,919
des attentes du
programme par le biais d'un message.

265
00:13:41,919 --> 00:13:43,593
Donc on aimerait faire en sorte que le

266
00:13:43,593 --> 00:13:46,010
programme si dessus soit complété de sorte
à ce

267
00:13:46,010 --> 00:13:49,506
que l'utilisateur ait un message pertinent
au moment où

268
00:13:49,506 --> 00:13:52,862
il introduit une note qui est négative ou
nulle.

269
00:13:52,862 --> 00:13:54,553
Comment procéder?

270
00:13:54,553 --> 00:13:59,502
Evidemment ce message devrait apparaitre
pour toutes les situations où le nombre

271
00:13:59,502 --> 00:14:01,814
ne satisfait pas la condition souhaitée

272
00:14:01,814 --> 00:14:04,953
donc c'est quelque chose qui
vraisemblablement va

273
00:14:04,953 --> 00:14:08,648
faire partie du corps de la boucle, on
doit répéter cette instruction

274
00:14:08,648 --> 00:14:09,890
à chaque fois que l'utilisateur a

275
00:14:09,890 --> 00:14:11,690
introduit quelque chose qui n'est pas
valable.

276
00:14:11,690 --> 00:14:15,302
Donc on peut imaginer une solution de
cette nature,

277
00:14:15,302 --> 00:14:17,985
on enrichit le corps de la boucle
avec

278
00:14:17,985 --> 00:14:20,785
	   un test supplémentaire : après avoir
fait la

279
00:14:20,785 --> 00:14:25,435
lecture, on va tester si le nombre
introduit

280
00:14:25,435 --> 00:14:27,255
est inférieur ou égal à zéro et à

281
00:14:27,255 --> 00:14:31,840
ce moment-à, afficher le message voulu
pour aviser l'utilisateur.

282
00:14:31,840 --> 00:14:35,726
A noter que ceci fait effectivement
partie du corps de la boucle

283
00:14:35,726 --> 00:14:38,272
puisqu'on veut répéter ce traitement à
chaque

284
00:14:38,272 --> 00:14:40,850
fois qu'un nombre non souhaité est
introduit.

285
00:14:40,850 --> 00:14:43,160
Vous noterez que dans cet exemple,

286
00:14:43,160 --> 00:14:46,075
la condition qui consiste à évaluer si le
nombre

287
00:14:46,075 --> 00:14:48,801
de notes est inférieur ou égal à zéro,
apparait désormais

288
00:14:48,801 --> 00:14:50,580
deux fois, une fois dans le if et une

289
00:14:50,580 --> 00:14:54,905
fois comme condition de continuation de la
boucle do while.

290
00:14:54,905 --> 00:14:58,713
il aurait été judicieux ici de stocker le
résultat de l'évaluation de

291
00:14:58,713 --> 00:15:03,610
cette condition dans une variable afin de
ne pas répéter son évaluation.

292
00:15:03,610 --> 00:15:05,553
Par exemple je peux introduire une

293
00:15:05,553 --> 00:15:09,188
variable boolénne saisie_invalide que
j'initialise

294
00:15:09,188 --> 00:15:14,793
à false, que je mets à jour ici dans le
corps de ma boucle, à chaque itération en

295
00:15:14,793 --> 00:15:21,640
y stockant le résultat de l'évaluation de
la condition, à savoir nombre_de_notes

296
00:15:21,640 --> 00:15:29,150
inférieur ou égal à zéro, donc dans 
saisie_invalide j'aurais true ou false et à ce

297
00:15:29,150 --> 00:15:31,460
moment là je peux écrire la condition de

298
00:15:31,460 --> 00:15:34,420
façon unifiée dans les deux cas en
remplaçant ceci

299
00:15:34,420 --> 00:15:40,141
simplement par "if (saisie invalide)", et je

300
00:15:40,141 --> 00:15:46,610
continue les traitements comme je l'ai
fait tout à l'heure et pareil ici.

301
00:15:46,610 --> 00:15:54,240
Je répète les traitements while la valeur
de la variable saisie_invalide est true.

302
00:15:54,240 --> 00:15:56,268
Il s'agit là d'une bonne pratique.

303
00:15:56,268 --> 00:15:59,856
Il est toujours souhaitable dans un
programme d'éviter

304
00:15:59,856 --> 00:16:02,280
les situations où on exprime deux fois de

305
00:16:02,280 --> 00:16:04,930
façon indépendante la même chose à des
endroits différents.

306
00:16:04,930 --> 00:16:06,130
C'est comme le copié-collé.

307
00:16:06,130 --> 00:16:08,866
Alors toujours avec notre petit exemple de

308
00:16:08,866 --> 00:16:11,870
la saisie d'un nombre de notes par
l'utilisateur,

309
00:16:11,870 --> 00:16:14,930
examinons maintenant comment on peut
formuler la condition

310
00:16:14,930 --> 00:16:17,610
de façon différente pour répondre à
d'autres besoins.

311
00:16:17,610 --> 00:16:21,135
Jusqu'ici nous imposions à l'utilisateur
d'introduire un

312
00:16:21,135 --> 00:16:24,000
nombre de notes qui soient supérieures à
zéro.

313
00:16:24,000 --> 00:16:25,159
Imaginons maintenant

314
00:16:25,159 --> 00:16:27,965
que l'on souhaite en plus limiter le
nombre de notes à dix.

315
00:16:27,965 --> 00:16:30,390
La question que l'on se pose est comment
trouver,

316
00:16:30,390 --> 00:16:34,450
formuler la nouvelle condition pour
répondre à ce nouveau besoin.

317
00:16:34,450 --> 00:16:38,071
Pour formuler correctement la condition
d'arrêt, commençons

318
00:16:38,071 --> 00:16:41,124
par l'exprimer tout simplement en langue
naturelle.

319
00:16:41,124 --> 00:16:43,302
Désormais, le nombre de notes introduit

320
00:16:43,302 --> 00:16:45,810
par l'utilisateur va être incorrect dans
deux

321
00:16:45,810 --> 00:16:48,495
situations : soit que l'utilisateur a
introduit

322
00:16:48,495 --> 00:16:50,315
un nombre inférieur ou égal à zéro,

323
00:16:50,315 --> 00:16:53,500
ce qui contredit ce souhait, soit
l'utilisateur a introduit

324
00:16:53,500 --> 00:16:57,332
un nombre supérieur à 10, ce qui contredit
celui ci.

325
00:16:57,332 --> 00:17:00,494
Donc ici on voit que l'on doit boucler
tant

326
00:17:00,494 --> 00:17:03,285
que l'on est dans l'une ou l'autre des
situations.

327
00:17:03,285 --> 00:17:06,764
Dans l'une ou l'autre des situations on a
un nombre incorrect.

328
00:17:06,764 --> 00:17:09,296
Ce qui nous permet de voir assez
naturellement

329
00:17:09,296 --> 00:17:11,066
que l'on doit en fait avoir recours au

330
00:17:11,066 --> 00:17:13,131
connecteur OU donc en fait on continue les

331
00:17:13,131 --> 00:17:16,065
traitements tant que l'une ou l'autre des
situations

332
00:17:16,065 --> 00:17:17,274
est rencontrée.

333
00:17:17,274 --> 00:17:20,343
Ce qui en C++ va se traduire par une ligne

334
00:17:20,343 --> 00:17:24,022
de codes qui a cette allure, on répète le
traitement tant

335
00:17:24,022 --> 00:17:27,150
que le nombre de notes introduit est
inférieur ou égal à

336
00:17:27,150 --> 00:17:31,690
zéro ou que le nombre de note est
supérieur à 10.

337
00:17:31,690 --> 00:17:35,650
Toujours dans le même esprit, imaginons
que l'on souhaite écrire un petit

338
00:17:35,650 --> 00:17:39,447
programme dont le but soit de faire
deviner un nombre à un utilisateur.

339
00:17:39,447 --> 00:17:41,085
Pour simplifier ici, on imagine

340
00:17:41,085 --> 00:17:43,038
que le nombre à deviner est toujours 5.

341
00:17:43,038 --> 00:17:45,440
L'idée ici serait d'écrire une boucle do
while

342
00:17:45,440 --> 00:17:48,252
qui demande un nombre à l'utilisateur et
qui le

343
00:17:48,252 --> 00:17:50,694
compare au nombre souhaité et on ne sort

344
00:17:50,694 --> 00:17:53,375
de la boucle qu'une fois le bon nombre
trouvé.

345
00:17:53,375 --> 00:17:55,142
Donc la question que nous nous posons,

346
00:17:55,142 --> 00:17:57,422
c'est comment formuler cette condition ici
pour

347
00:17:57,422 --> 00:18:01,310
sortir proprement de la boucle une fois
que l'utilisateur a trouvé le bon nombre.

348
00:18:01,310 --> 00:18:05,930
Comme pour tout à l'heure, on va formuler
la condition en langue naturelle.

349
00:18:05,930 --> 00:18:06,238
On se

350
00:18:06,238 --> 00:18:08,788
dit que la boucle doit être répétée tant

351
00:18:08,788 --> 00:18:11,182
que l'utilisateur n'a pas trouvé le nombre
à deviner.

352
00:18:11,182 --> 00:18:12,664
Ça veut dire quoi concrètement?

353
00:18:12,664 --> 00:18:15,172
Il n'a pas trouvé le nombre à deviner tant
que le nombre

354
00:18:15,172 --> 00:18:19,547
qu'il a entré est différent du nombre à
deviner qui était 5.

355
00:18:19,547 --> 00:18:23,030
Comment formuler cette condition en C++?

356
00:18:23,030 --> 00:18:26,446
Tout simplement par la ligne suivante,
donc on répète le traitement

357
00:18:26,446 --> 00:18:30,227
tant que le nombre entré est différent du
nombre à deviner.

358
00:18:30,227 --> 00:18:31,347
Donc on voit

359
00:18:31,347 --> 00:18:34,638
que la formulation C++ est très voisine,
très proche

360
00:18:34,638 --> 00:18:36,130
de la façon de le formuler en langue
naturelle.

361
00:18:36,130 --> 00:18:40,820
Sophistiquons maintenant un petit peu cet
exemple où l'utilisateur doit deviner un

362
00:18:40,820 --> 00:18:44,966
nombre, donc on imagine qu'on veut lui
donner un nombre limité d'essais.

363
00:18:44,966 --> 00:18:48,047
Il ne va pas pouvoir indéfiniment proposer
une

364
00:18:48,047 --> 00:18:50,800
valeur, donc ici on imagine qu'on va
devoir

365
00:18:50,800 --> 00:18:53,501
avoir recours à un compteur d'essais donc
une

366
00:18:53,501 --> 00:18:56,494
variable que l'on introduit ici et que ce
compteur

367
00:18:56,494 --> 00:18:59,476
d'essais va être incrémenté à chaque
itération de

368
00:18:59,476 --> 00:19:01,151
la boucle et en fait on veut que

369
00:19:01,151 --> 00:19:03,825
au bout de trois essais l'utilisateur ait
perdu

370
00:19:03,825 --> 00:19:05,505
s'il n'a pas trouvé le nombre à deviner.

371
00:19:05,505 --> 00:19:06,737
Donc la question que l'on se

372
00:19:06,737 --> 00:19:09,380
pose maintenant est comment formuler cette
condition.

373
00:19:09,380 --> 00:19:13,475
Encore une fois, commençons par formuler
la condition en langue naturelle.

374
00:19:13,475 --> 00:19:17,955
Donc on se dit qu'on doit répéter la
boucle tant que l'utilisateur n'a pas

375
00:19:17,955 --> 00:19:21,503
trouvé le bon nombre et qu'il lui reste
des essais, donc ici c'est clair

376
00:19:21,503 --> 00:19:23,042
que les deux conditions doivent

377
00:19:23,042 --> 00:19:25,151
simultanément être vérifiées, on doit
avoir

378
00:19:25,151 --> 00:19:28,591
les deux conditions pour pouvoir continuer
à itérer dans la boucle.

379
00:19:28,591 --> 00:19:30,661
Donc ici on va essayer de le formuler

380
00:19:30,661 --> 00:19:33,607
d'une façon un petit peu plus proche du
C++.

381
00:19:33,607 --> 00:19:36,610
Donc première condition, tant que le
nombre entré

382
00:19:36,610 --> 00:19:38,510
est différent du nombre à deviner et
deuxième

383
00:19:38,510 --> 00:19:40,660
condition, tant que le nombre d'essais est
inférieur

384
00:19:40,660 --> 00:19:46,330
à trois, les deux conditions devant être
simultanément vérifiées.

385
00:19:46,330 --> 00:19:46,644
En

386
00:19:46,644 --> 00:19:53,590
C++ cela va correspondre à la ligne de
codes suivante.

387
00:19:53,590 --> 00:19:57,100
Donc première condition ici, tant que le
nombre entré est différent du nombre à

388
00:19:57,100 --> 00:20:00,850
deviner, ce qui correspond exactement à ce
qu'on a formulé ici et deuxième condition,

389
00:20:00,850 --> 00:20:05,425
tant que le nombre d'essais est inférieur
à trois, ce qui correspond à cette

390
00:20:05,425 --> 00:20:08,130
seconde condition et nous avons ici notre

391
00:20:08,130 --> 00:20:11,902
opérateur logique ET, and, qui permet
d'assurer que

392
00:20:11,902 --> 00:20:15,592
les deux conditions soient simultanément
vérifiées.

393
00:20:15,592 --> 00:20:18,626
Donc ici encore une fois on voit que le
formuler en

394
00:20:18,626 --> 00:20:21,440
C++ n'est pas très loin de le formuler en
langue naturelle.

395
00:20:21,440 --> 00:20:25,806
L'utilisateur a désormais deux façons
possibles de sortir de la boucle.

396
00:20:25,806 --> 00:20:30,290
Il peut en sortir soit parce qu'il a
trouvé le nombre, ce qui veut dire que

397
00:20:30,290 --> 00:20:33,426
cette partie de la condition devient
fausse, ou

398
00:20:33,426 --> 00:20:36,130
alors parce qu'il a dépassé le nombre
d'essais.

399
00:20:36,130 --> 00:20:36,982
Et maintenant

400
00:20:36,982 --> 00:20:40,532
supposons que nous souhaitions indiquer à
l'utilisateur en

401
00:20:40,532 --> 00:20:43,810
clair, pourquoi il est sorti concrètement
de la boucle.

402
00:20:43,810 --> 00:20:47,743
Alors si l'on veut informer l'utilisateur
de pour quelle raison on est

403
00:20:47,743 --> 00:20:51,905
sorti exactement de la boucle, et bien il
suffit de complémenter le programme

404
00:20:51,905 --> 00:20:54,905
tel qu'il était à l'origine en faisant en
sorte qu'une fois qu'on

405
00:20:54,905 --> 00:20:58,920
est sorti de la boucle, on teste pour
quelle condition on est sorti.

406
00:20:58,920 --> 00:21:02,120
Est-ce que l'on est sorti de la boucle en
raison de

407
00:21:02,120 --> 00:21:06,280
l'échec de cette condition, c'est-à-dire
que l'utilisateur a deviné le

408
00:21:06,280 --> 00:21:08,722
nombre ou est ce qu'on est sorti de la
boucle en

409
00:21:08,722 --> 00:21:12,070
raison de l'échec de cette seconde
condition, est-ce qu'on est

410
00:21:12,070 --> 00:21:15,125
sorti de la boucle parce qu'on a dépassé
le nombre d'essais.

411
00:21:15,125 --> 00:21:17,310
Donc ici on va le tester tout simplement.

412
00:21:17,310 --> 00:21:19,486
Donc si le nombre entré est égal au nombre

413
00:21:19,486 --> 00:21:21,918
à deviner ce qui veut dire qu'on serait
sorti en

414
00:21:21,918 --> 00:21:24,386
raison de l'échec de cette condition et
bien on

415
00:21:24,386 --> 00:21:27,430
peut signifier à l'utilisateur qu'il a
trouvé le bon nombre.

416
00:21:27,430 --> 00:21:31,665
Sinon et bien cela signifie qu'il a
dépassé le nombre d'essais

417
00:21:31,665 --> 00:21:34,881
qui lui était alloué, on peut donc
l'informer qu'il a perdu et

418
00:21:34,881 --> 00:21:38,366
on peut aussi faire afficher de surcroit
le nombre à deviner de

419
00:21:38,366 --> 00:21:41,540
sorte à l'informer de ce que l'on
s'attendait à ce qu'il trouve.

420
00:21:41,540 --> 00:21:46,725
Alors attention ici aux erreurs de logique
dans la formulation des tests.

421
00:21:46,725 --> 00:21:49,749
Imaginons que pour tester cette condition
que j'ai

422
00:21:49,749 --> 00:21:52,580
effectivement trouvé le bon nombre, je
teste que

423
00:21:52,580 --> 00:21:55,863
je n'ai pas dépassé le nombre d'essais et
bien je vais passer à

424
00:21:55,863 --> 00:21:57,940
coté de la situation où l'utilisateur

425
00:21:57,940 --> 00:22:00,714
aurait deviné au troisième essai
exactement, le

426
00:22:00,714 --> 00:22:03,997
bon nombre et à ce moment là on va
comptabiliser ce cas comme

427
00:22:03,997 --> 00:22:07,695
un cas d'échec au lieu de le comptabiliser
proprement comme un cas de succès.

428
00:22:07,695 --> 00:22:09,895
Donc il faut être bien vigilant à la
logique de la

429
00:22:09,895 --> 00:22:13,130
formulation des tests si l'on veut
réaliser ce genre de traitement.

430
00:22:13,130 --> 00:22:15,145
La bonne solution ici était celle qui

431
00:22:15,145 --> 00:22:17,810
était montrée dans la première solution à
savoir

432
00:22:17,810 --> 00:22:20,605
formuler la condition non pas par rapport
au nombre

433
00:22:20,605 --> 00:22:23,091
d'essais mais par rapport au fait d'avoir
trouvé ou non

434
00:22:23,091 --> 00:22:25,264
le nombre et cette façon de formuler la
condition

435
00:22:25,264 --> 00:22:31,137
va nous permettre d'éviter l'écueil que
nous venons juste d'écrire

