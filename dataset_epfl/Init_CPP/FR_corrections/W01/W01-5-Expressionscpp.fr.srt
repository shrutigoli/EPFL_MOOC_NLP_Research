1
00:00:04,487 --> 00:00:07,758
Revenons maintenant sur
les expressions et opérateurs

2
00:00:07,758 --> 00:00:10,118
que vous avez déjà vus dans
les vidéos précédentes.

3
00:00:10,118 --> 00:00:14,806
Une expression apparaît par exemple
dans une affectation, comme ici.

4
00:00:15,644 --> 00:00:20,596
Dans ce cas, l'expression est forcément
à droite du signe =,

5
00:00:21,094 --> 00:00:22,672
puisqu'elle calcule une valeur,

6
00:00:22,672 --> 00:00:26,719
cette valeur doit être du même type
que la variable,

7
00:00:26,719 --> 00:00:29,420
qui se trouve à gauche du signe =.

8
00:00:29,448 --> 00:00:34,538
Puisqu'on va donner la valeur calculée
par l'expression à la variable.

9
00:00:34,896 --> 00:00:42,603
Une expression peut être simplement
une valeur littérale comme 4 ou 3,14

10
00:00:42,603 --> 00:00:48,721
Notez au passage qu'on n'écrit pas
3 virgule 14 mais bien 3 point 14

11
00:00:48,721 --> 00:00:53,316
puisque le C++ utilise la notation
anglo-saxonne.

12
00:00:53,726 --> 00:00:58,765
Mais en règle générale, une expression
peut être une formule, comme ici,

13
00:00:58,765 --> 00:01:03,001
où je multiplie la valeur de la variable n
avec elle-même,

14
00:01:03,001 --> 00:01:06,032
j'obtiens donc n², simplement.

15
00:01:06,522 --> 00:01:11,439
La multiplication se note avec
le symbole étoile *

16
00:01:12,053 --> 00:01:16,118
et je peux avoir dans mon expression
d'autres symboles mathématiques

17
00:01:16,217 --> 00:01:18,728
comme l'addition, la soustraction.

18
00:01:18,728 --> 00:01:21,239
Je peux également utiliser
des parenthèses,

19
00:01:21,239 --> 00:01:24,002
c'est donc quelque chose d'assez général.

20
00:01:25,348 --> 00:01:28,879
Il est important d'être conscient,
quand on écrit des expressions,

21
00:01:28,879 --> 00:01:31,926
que les valeurs littérales
ont leur propre type,

22
00:01:31,926 --> 00:01:33,552
exactement comme les variables.

23
00:01:33,552 --> 00:01:39,681
Par exemple, si j'écris 1 simplement,
ce 1 est une valeur littérale de type <i>int</i>.

24
00:01:41,241 --> 00:01:46,971
Si maintenant, j'écris 1.0,
ce 1.0 sera de type <i>double</i>.

25
00:01:48,077 --> 00:01:52,240
Notez au passage que l'on peut écrire
tout simplement 1. tout court,

26
00:01:52,344 --> 00:01:58,265
au lieu de 1.0 et ce 1. sera donc
aussi de type <i>double</i>,

27
00:01:58,425 --> 00:02:02,089
ça veut dire que je peux écrire
une déclaration de cette façon-ci

28
00:02:02,564 --> 00:02:07,310
avec seulement 1., qui est
équivalente à cette déclaration-ci

29
00:02:07,368 --> 00:02:13,635
mais évidemment, écrire 1.0 sera toujours
plus lisible que d'écrire 1. tout court,

30
00:02:13,635 --> 00:02:15,905
donc préférez la notation 1.0

31
00:02:16,365 --> 00:02:19,297
On peut également utiliser
la notation scientifique,

32
00:02:19,297 --> 00:02:23,048
c'est-à-dire que l'on peut écrire 2e3

33
00:02:23,074 --> 00:02:26,764
pour 2 multiplié par 10 puissance 3

34
00:02:27,035 --> 00:02:31,255
c'est-à-dire 2000,
donc 2e3 vaut 2000.

35
00:02:31,269 --> 00:02:37,822
Et de façon générale, aeb vaut
a multiplié par 10 puissance b.

36
00:02:38,480 --> 00:02:44,182
Par exemple, dans cette déclaration,
j'initialise la variable x

37
00:02:45,609 --> 00:02:50,333
à 1,3 multiplié par 10 puissance 3,

38
00:02:50,980 --> 00:02:54,468
c'est-à-dire 1300

39
00:02:56,824 --> 00:03:02,886
Dans cette déclaration-ci,
j'initialise ma variable y

40
00:03:03,082 --> 00:03:09,064
à 1,3 multiplié par 10 puissance -3

41
00:03:10,806 --> 00:03:15,005
c'est-à-dire que y vaut 0,0013.

42
00:03:17,856 --> 00:03:21,591
Du côté des opérateurs, on dispose
des cadres opérateurs usuels,

43
00:03:21,591 --> 00:03:25,598
c'est-à-dire l'addition qui se
note avec le symbole + (plus),

44
00:03:25,598 --> 00:03:28,144
la soustraction qui se note
avec le symbole - (moins),

45
00:03:28,144 --> 00:03:33,136
j'ai dit que la multiplication se
notait avec le caractère * (étoile)

46
00:03:33,136 --> 00:03:36,698
et la division se note avec
le caractère / (slash).

47
00:03:37,292 --> 00:03:40,557
Mais attention, il y a un piège
dans le cas de la division,

48
00:03:40,557 --> 00:03:45,721
si les deux valeurs qui interviennent
dans la division sont de type <i>int</i>,

49
00:03:45,721 --> 00:03:48,042
il s'agit de la division entière.

50
00:03:48,688 --> 00:03:53,161
Par exemple, dans cette division,
1 et 2 sont deux valeurs littérales

51
00:03:53,161 --> 00:03:55,966
qui sont toutes les deux de type <i>int</i>

52
00:03:55,966 --> 00:03:59,492
et il s'agit donc de la division entière
et on va obtenir 0.

53
00:04:00,041 --> 00:04:05,289
Alors, pourquoi ? Parce que 1 est égal
à 0 fois 2 et il reste 1

54
00:04:05,711 --> 00:04:08,403
donc le résultat de la division
entière est ce 0.

55
00:04:08,403 --> 00:04:13,308
Un autre exemple dans le cas de
5 divisé par 2, je vais obtenir 2,

56
00:04:13,308 --> 00:04:18,144
parce que 5 est égal à 2 fois 2
et il reste 1

57
00:04:18,761 --> 00:04:21,813
et le résultat de la division est ce 2.

58
00:04:22,373 --> 00:04:26,384
Si en revanche, une des deux valeurs
qui apparaissent dans la division

59
00:04:26,384 --> 00:04:28,313
est de type <i>double</i>,

60
00:04:28,313 --> 00:04:32,532
l'autre valeur va tout d'abord
être convertie en <i>double</i>,

61
00:04:32,532 --> 00:04:37,540
c'est-à-dire que ce 1 va être converti
en un <i>double</i> que je peux noter 1.0

62
00:04:37,540 --> 00:04:42,486
On va obtenir la division 1.0 divisé par 2.0
et donc obtenir,

63
00:04:42,486 --> 00:04:44,409
comme on aurait pu s'y attendre,

64
00:04:44,409 --> 00:04:45,745
0.5.

65
00:04:47,718 --> 00:04:52,071
En C++, on dispose également
des opérateurs += (plus égal)

66
00:04:52,071 --> 00:04:53,455
-= (moins égal)

67
00:04:53,455 --> 00:04:54,932
*= (multiplié égal)

68
00:04:54,932 --> 00:04:56,318
et /= (divisé égal).

69
00:04:56,694 --> 00:05:00,838
Par exemple, j'ai le droit d'écrire a += 5

70
00:05:01,751 --> 00:05:08,016
et c'est équivalent à écrire a = a + 5

71
00:05:09,403 --> 00:05:15,756
Un autre exemple, je peux écrire 
a *= b

72
00:05:16,238 --> 00:05:21,375
et c'est équivalent à écrire a = a * b

73
00:05:24,742 --> 00:05:27,710
Dans le cas des <i>int</i> et dans
le cas des <i>int</i> seulement,

74
00:05:27,710 --> 00:05:30,395
on dispose également d'un opérateur
qui s'appelle modulo

75
00:05:30,395 --> 00:05:33,256
et qui se note avec
le caractère % (pourcent)

76
00:05:33,256 --> 00:05:36,274
et qui renvoie le reste
de la division entière.

77
00:05:36,536 --> 00:05:44,008
Par exemple, 11 modulo pour cent 4 vaut 3

78
00:05:45,014 --> 00:05:51,534
Pourquoi ? Parce que 11
est égal à 2 * 4 + 3

79
00:05:51,690 --> 00:05:55,390
et c'est ce reste qui correspond
au résultat du modulo.

80
00:05:55,640 --> 00:06:01,649
Un autre exemple,
12 modulo 4...

81
00:06:02,930 --> 00:06:05,734
vaut, à votre avis... ?

82
00:06:06,235 --> 00:06:06,867
0

83
00:06:06,882 --> 00:06:13,892
Alors pourquoi ? Parce que
12 est égal à 3 * 4 + 0

84
00:06:14,754 --> 00:06:17,431
et c'est ce 0 qui est le
résultat du modulo.

85
00:06:20,487 --> 00:06:22,860
Il existe aussi des opérateurs
qui se notent

86
00:06:22,860 --> 00:06:25,433
++ (plus plus) et -- (moins moins)

87
00:06:25,828 --> 00:06:29,896
qui s'appellent des opérateurs
d'incrémentation et de décrémentation,

88
00:06:29,896 --> 00:06:31,425
c'est-à-dire qu'ils vont permettre

89
00:06:31,425 --> 00:06:33,995
d'ajouter 1 ou de soustraire 1
à des variables.

90
00:06:34,623 --> 00:06:38,004
Par exemple, j'ai le droit d'écrire ++i

91
00:06:38,004 --> 00:06:42,001
et c'est équivalent à écrire i = i + 1

92
00:06:42,001 --> 00:06:44,838
qui va donc ajouter 1 à la variable i.

93
00:06:45,034 --> 00:06:49,549
J'aurais pu aussi, par exemple,
écrire --a,

94
00:06:49,549 --> 00:06:53,119
qui sera équivalent à a = a - 1

95
00:06:53,119 --> 00:06:56,921
ce qui va retirer 1 à la valeur
de la variable a.

96
00:06:57,449 --> 00:07:01,758
Ces opérateurs sont très utilisés
dans le cas des boucles <i>for</i>,

97
00:07:01,758 --> 00:07:04,259
que nous verrons dans une leçon suivante.

98
00:07:05,829 --> 00:07:08,534
Jusqu'ici nous avons toujours vu
des valeurs décimales

99
00:07:08,534 --> 00:07:11,544
et des variables de type <i>double</i> d'un côté,

100
00:07:11,544 --> 00:07:15,901
et d'un autre côté, des valeurs entières
et des variables de type <i>int</i>.

101
00:07:16,423 --> 00:07:20,899
Que se passe-t-il quand, par exemple,
on essaie d'affecter une valeur décimale

102
00:07:20,899 --> 00:07:23,325
à une variable de type <i>int</i> ?

103
00:07:23,328 --> 00:07:29,380
Par exemple, j'ai ici une variable x
de type <i>double</i>

104
00:07:29,826 --> 00:07:31,741
qui contient la valeur 1,5

105
00:07:32,621 --> 00:07:38,304
je déclare ici une variable n de type <i>int</i>
que j'ai représenté ici,

106
00:07:39,088 --> 00:07:41,858
et dans cette affectation,
j'essaie d'affecter

107
00:07:41,907 --> 00:07:46,047
la valeur de l'expression 3 fois x,
c'est-à-dire...

108
00:07:47,582 --> 00:07:48,881
4,5

109
00:07:50,094 --> 00:07:53,358
à ma variable n de type <i>int</i>

110
00:07:53,609 --> 00:07:57,713
et qui est donc prévue que 
pour contenir des valeurs entières.

111
00:07:58,642 --> 00:08:00,810
Que se passe-t-il dans ce cas-là ?

112
00:08:00,810 --> 00:08:04,447
Le compilateur va convertir la
valeur littérale 4,5

113
00:08:05,557 --> 00:08:08,000
qui est de type <i>double</i>,

114
00:08:08,248 --> 00:08:12,309
en une valeur qui sera de type <i>int</i>.

115
00:08:12,664 --> 00:08:17,041
Cette conversion se fait tout simplement
en perdant la partie fractionnaire

116
00:08:17,041 --> 00:08:20,958
c'est-à-dire que 4,5 
va être converti en 4.

117
00:08:22,069 --> 00:08:25,154
Ce 4 est maintenant de type <i>int</i>

118
00:08:25,154 --> 00:08:28,097
et on va pouvoir effectuer
l'affectation de ce 4

119
00:08:29,038 --> 00:08:31,809
à la variable n de type <i>int</i>.

120
00:08:33,549 --> 00:08:37,337
Notez au passage que cette conversion
de type <i>double</i> vers type <i>int</i>

121
00:08:37,337 --> 00:08:39,397
est un cas très particulier,

122
00:08:39,397 --> 00:08:43,212
on dispose également de la conversion
de <i>int</i> vers <i>double</i>

123
00:08:43,212 --> 00:08:45,515
mais il s'agit là de deux exceptions.

124
00:08:46,103 --> 00:08:50,989
En règle générale, le C++ est ce qu'on
appelle un langage fortement typé,

125
00:08:50,989 --> 00:08:54,234
qui va exiger que, dans une
affectation par exemple,

126
00:08:54,234 --> 00:08:56,493
ce qui est à droite du signe égal

127
00:08:56,493 --> 00:08:59,442
soit du même type 
que ce qui est à gauche.

128
00:09:00,732 --> 00:09:03,981
Revenons maintenant sur
le piège de la division entière ;

129
00:09:03,981 --> 00:09:07,313
j'ai déclaré ici une variable x
de type <i>double</i>,

130
00:09:07,313 --> 00:09:09,428
que j'ai représentée ici,

131
00:09:09,428 --> 00:09:15,247
et dans cette affectation, j'affecte 
la valeur de l'expression 1 / 2

132
00:09:15,247 --> 00:09:17,062
à ma variable x.

133
00:09:17,502 --> 00:09:20,690
A votre avis, que contient x
après cette affectation ?

134
00:09:21,724 --> 00:09:27,402
Comme 1 et 2 sont tous les deux
des valeurs littérales de type <i>int</i>,

135
00:09:28,155 --> 00:09:31,407
cette division est la division entière

136
00:09:32,447 --> 00:09:35,846
1 / 2 dans le cas de la
division entière vaut 0

137
00:09:35,846 --> 00:09:39,680
et on va donc affecter la
valeur 0 à la variable x.

138
00:09:41,816 --> 00:09:46,850
Le fait que x ait été déclaré de
type <i>double</i> ne change rien ici.

139
00:09:47,805 --> 00:09:52,070
Dans une affectation, on évalue toujours
ce qui est à droite du signe égal,

140
00:09:52,070 --> 00:09:55,972
quelque soit ce qui se trouve
à gauche du signe égal.

141
00:09:58,147 --> 00:10:01,806
Le problème peut se poser en pratique,
quand par exemple,

142
00:10:01,806 --> 00:10:04,815
on essaie de calculer
la moyenne de deux valeurs entières.

143
00:10:05,431 --> 00:10:10,086
J'ai par exemple ici déclaré deux
variables note1 initialisée à 4

144
00:10:10,591 --> 00:10:12,276
et note2 initialisée à 5

145
00:10:12,889 --> 00:10:14,575
Elles sont toutes les deux de type <i>int</i>.

146
00:10:14,575 --> 00:10:18,592
Je veux calculer leur moyenne,
donc je voudrais obtenir 4,5

147
00:10:19,206 --> 00:10:21,990
alors que si je fais cette déclaration,

148
00:10:23,177 --> 00:10:28,616
dans cette expression note1 et note2
sont donc de type <i>int</i>

149
00:10:28,841 --> 00:10:32,414
donc note1 + note2 est également
de type <i>int</i> ;

150
00:10:33,827 --> 00:10:38,133
cette valeur littérale 2 est
également de type <i>int</i>,

151
00:10:38,197 --> 00:10:41,088
il s'agit donc ici de la division entière.

152
00:10:41,481 --> 00:10:46,731
Je vais donc obtenir 9 divisé par 2
c'est-à-dire 4

153
00:10:46,731 --> 00:10:48,791
alors que je voulais 4,5

154
00:10:49,860 --> 00:10:53,184
Une solution possible, c'est de faire
quelque chose comme ça.

155
00:10:54,330 --> 00:11:01,575
Ici, j'ai toujours note1 et note2 
de type <i>int</i> initialisé toujours à 4 et 5,

156
00:11:03,175 --> 00:11:07,987
j'initialise <i>moyenne</i> au résultat de
note1 + note2

157
00:11:08,685 --> 00:11:12,448
note1 + note2 vaut 9 de type <i>int</i>

158
00:11:12,871 --> 00:11:17,280
mais je l'affecte à <i>moyenne</i>, qui
a été déclarée de type <i>double</i>.

159
00:11:17,891 --> 00:11:23,168
Donc, <i>moyenne</i> va contenir 9

160
00:11:23,489 --> 00:11:26,668
que je pourrais écrire 9.0

161
00:11:26,873 --> 00:11:29,490
pour bien montrer qu'il est
de type <i>double</i>.

162
00:11:29,745 --> 00:11:31,375
Cette fois-ci, quand j'écris

163
00:11:32,095 --> 00:11:34,742
moyenne divisé égal 2

164
00:11:35,176 --> 00:11:37,220
qui est, je vous rappelle,

165
00:11:37,425 --> 00:11:44,284
équivalent à moyenne égal
moyenne divisé par 2.

166
00:11:44,284 --> 00:11:48,477
Comme cette fois-ci <i>moyenne</i>
est de type <i>double</i>.

167
00:11:50,669 --> 00:11:52,770
Même si 2 est de type <i>int</i>

168
00:11:52,770 --> 00:11:57,031
et va être converti en une valeur
de type <i>double</i>,

169
00:11:57,031 --> 00:11:58,983
que je peux écrire 2.0

170
00:11:59,431 --> 00:12:04,387
on va donc calculer 9.0 divisé par 2.0

171
00:12:04,387 --> 00:12:07,038
qui est la division classique,

172
00:12:07,423 --> 00:12:09,970
mais cette fois-ci on va bien obtenir 4,5

173
00:12:11,009 --> 00:12:14,708
et affecter 4,5 à la variable <i>moyenne</i>.

174
00:12:16,724 --> 00:12:20,212
On peut également utiliser des fonctions
mathématiques dans des expressions,

175
00:12:20,369 --> 00:12:25,907
pour cela il faut ajouter la ligne
<i>#include</i> (dièse include) cmath

176
00:12:25,907 --> 00:12:27,303
au début du programme,

177
00:12:27,884 --> 00:12:30,660
et si par exemple, je veux calculer
le sinus d'un angle,

178
00:12:30,660 --> 00:12:33,982
je vais pouvoir utiliser la fonction <i>sin</i>
comme ici.

179
00:12:34,488 --> 00:12:37,957
Au passage, les fonctions
trigonométriques en C++

180
00:12:37,957 --> 00:12:40,766
attendent des angles en radians.

181
00:12:40,766 --> 00:12:43,905
Donc si j'ai un angle 
de 10 degrés, comme ici,

182
00:12:43,905 --> 00:12:47,955
je vais le convertir en radians
à l'aide de cette expression

183
00:12:47,955 --> 00:12:50,908
et je vais donner sa valeur
à la fonction <i>sin</i>

184
00:12:50,908 --> 00:12:53,802
pour qu'elle me renvoie le sinus
de cet angle de 10 degrés.

185
00:12:54,058 --> 00:12:55,736
Voilà, ce n'est pas plus difficile que ça.

186
00:12:58,912 --> 00:13:01,314
Voici une liste assez complète
des fonctions mathématiques

187
00:13:01,314 --> 00:13:03,466
dont on dispose en C++,

188
00:13:03,619 --> 00:13:05,907
les fonctions les plus intéressantes
sont sans doute

189
00:13:05,907 --> 00:13:09,189
les fonctions trigonométriques
<i>sin, cos</i> et <i>tan</i>

190
00:13:09,189 --> 00:13:12,303
qui attendent, je vous le rappelle,
des angles en radians,

191
00:13:12,577 --> 00:13:16,109
la fonction exponentielle se note <i>exp</i>,

192
00:13:16,542 --> 00:13:21,176
le logarithme népérien qui se note <i>ln</i>
en mathématiques,

193
00:13:21,176 --> 00:13:24,110
se note <i>log</i> en C++.

194
00:13:25,149 --> 00:13:29,235
La fonction puissance "x puissance y"

195
00:13:29,235 --> 00:13:33,712
se note <i>pow: x, y</i> en C++,

196
00:13:34,627 --> 00:13:38,446
la racine carrée se note <i>sqrt</i>
pour <i>square root</i>,

197
00:13:38,974 --> 00:13:41,431
la valeur absolue se note <i>abs</i>.

198
00:13:43,718 --> 00:13:46,765
On dispose également de plusieurs
constantes mathématiques ;

199
00:13:46,765 --> 00:13:50,690
alors, même si elle ne sont pas définies
officiellement par le standard du C++,

200
00:13:50,690 --> 00:13:53,484
la plupart des compilateurs
les définissent.

201
00:13:53,986 --> 00:13:59,338
Par exemple, nous avons Pi
qui se note M_PI (M underscore PI)

202
00:13:59,338 --> 00:14:00,427
en lettres capitales,

203
00:14:00,754 --> 00:14:04,166
et <i>e</i> qui est la base des
logarithmes naturels,

204
00:14:04,480 --> 00:14:08,617
qui s'écrit M_E (M underscore E)
également en lettres capitales.

205
00:14:09,032 --> 00:14:12,722
Par exemple, si j'ai un angle
exprimé en degrés

206
00:14:12,722 --> 00:14:14,412
que je veux convertir en radians,

207
00:14:14,412 --> 00:14:17,104
je peux utiliser cette formule-ci.

208
00:14:17,888 --> 00:14:22,629
C'est-à-dire multiplier l'angle en degrés
par Pi et diviser par 180.

209
00:14:22,633 --> 00:14:25,974
En C++, cela va s'écrire
de cette façon-ci,

210
00:14:26,577 --> 00:14:30,895
j'obtiens la valeur de Pi
en écrivant M_PI

211
00:14:31,268 --> 00:14:35,130
je peux multiplier par l'angle,
diviser par 180

212
00:14:35,387 --> 00:14:41,871
et notez au passage que comme
cette expression est de type <i>double</i>,

213
00:14:44,265 --> 00:14:48,045
je n'ai pas de problème de la division
entière lors de cette division.
