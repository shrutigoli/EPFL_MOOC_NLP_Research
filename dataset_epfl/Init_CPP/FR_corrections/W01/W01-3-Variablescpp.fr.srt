1
00:00:03,645 --> 00:00:06,143
Nous avons vu en guise d'introduction
les différentes étapes

2
00:00:06,143 --> 00:00:08,905
qui permettent d'aboutir 
à la création d'un programme.

3
00:00:08,905 --> 00:00:11,521
Nous savons qu'il faut commencer
par réfléchir, conceptualiser,

4
00:00:11,521 --> 00:00:15,608
réfléchir à la séquence d'instructions
que nous pensons mettre en oeuvre.

5
00:00:15,608 --> 00:00:17,675
Ensuite, transcrire cette conception

6
00:00:17,675 --> 00:00:20,435
dans un langage de programmation connu,
comme le c++.

7
00:00:20,435 --> 00:00:24,377
Puis passer par différentes phases, 
comme la compilation et le test,

8
00:00:24,377 --> 00:00:27,005
pour finalement arriver 
à un programme exécutable.

9
00:00:27,005 --> 00:00:28,946
Nous allons entrer dans le vif du sujet,

10
00:00:28,946 --> 00:00:31,490
et mettre en place les briques de base,

11
00:00:31,490 --> 00:00:34,129
qui permettent de commencer à transcrire

12
00:00:34,129 --> 00:00:38,083
une conception de programme,
en un programme c++.

13
00:00:38,083 --> 00:00:40,582
Un programme n'est rien d'autre
qu'une séquence d'instructions

14
00:00:40,582 --> 00:00:42,390
travaillant avec des données.

15
00:00:42,390 --> 00:00:44,857
En fait, les séquences d'instructions

16
00:00:44,857 --> 00:00:47,190
sont assimilables
à la notion de traitement.

17
00:00:47,190 --> 00:00:49,708
Ces traitements opèrent sur des données,

18
00:00:49,708 --> 00:00:52,621
et les données influencent 
également les traitements.

19
00:00:52,621 --> 00:00:55,919
Selon la nature des données, 
différents types de traitements

20
00:00:55,919 --> 00:00:58,885
vont être mis en oeuvre.

21
00:00:58,885 --> 00:01:01,875
Imaginons que je souhaite
écrire un petit programme,

22
00:01:01,875 --> 00:01:05,467
dont le but soit de résoudre
une équation du second degré

23
00:01:05,467 --> 00:01:06,800
de cette nature.

24
00:01:06,800 --> 00:01:09,872
Je peux imaginer assez facilement
les différentes étapes

25
00:01:09,872 --> 00:01:13,371
qui aboutissent à la résolution
d'une telle équation.

26
00:01:13,371 --> 00:01:17,594
Je dois commencer par demander
les coefficients impliqués,

27
00:01:17,594 --> 00:01:21,497
le b et le c, pour savoir concrètement

28
00:01:21,497 --> 00:01:24,237
quelle équation je suis
en train de résoudre.

29
00:01:24,237 --> 00:01:27,559
Ensuite, je vais calculer le delta.

30
00:01:29,491 --> 00:01:34,205
En fonction de la valeur de ce delta,
différents cas de figure se présenteront.

31
00:01:34,205 --> 00:01:36,896
Donc, différents traitements 
vont se mettre en place.

32
00:01:36,896 --> 00:01:41,216
Par exemple, si le delta est négatif,

33
00:01:41,239 --> 00:01:46,329
alors je vais simplement afficher
qu'il n'y a pas de solutions.

34
00:01:50,179 --> 00:01:59,120
Sinon, s'il est nul, alors je vais 
calculer la solution unique

35
00:01:59,120 --> 00:02:01,976
et ensuite la faire afficher.

36
00:02:04,162 --> 00:02:06,999
Sinon, il y a évidemment le cas où
il y a deux solutions,

37
00:02:06,999 --> 00:02:09,841
que je ne vais pas traiter
de façon explicite ici.

38
00:02:09,841 --> 00:02:13,397
On voit donc qu'il y a un 
certain nombre de traitements.

39
00:02:13,397 --> 00:02:15,163
Ici, par exemple, à l'étape deux,

40
00:02:15,163 --> 00:02:18,024
j'ai un traitement qui consiste
à calculer le delta.

41
00:02:18,024 --> 00:02:20,203
Ces traitements opèrent sur des données,

42
00:02:20,203 --> 00:02:22,888
puisque je vois ici que 
le calcul de mon delta

43
00:02:22,888 --> 00:02:25,757
implique de travailler 
avec les données b et c,

44
00:02:25,757 --> 00:02:28,201
qui sont fournies au départ.

45
00:02:28,214 --> 00:02:33,477
On voit également que les données ont 
une influence sur les traitements.

46
00:02:33,477 --> 00:02:34,805
Ce qu'on voit ici.

47
00:02:34,805 --> 00:02:38,563
Dans la mesure où une nouvelle donnée
est calculée comme étant le delta,

48
00:02:38,563 --> 00:02:41,469
va avoir une influence sur la nature
des traitements entrepris.

49
00:02:41,469 --> 00:02:43,433
Ici, en fonction de la valeur du delta,

50
00:02:43,433 --> 00:02:46,524
je vais soit afficher
qu'il n'y a pas de solution,

51
00:02:46,524 --> 00:02:49,285
soit calculer une solution unique
et ainsi de suite.

52
00:02:49,285 --> 00:02:53,515
On voit qu'il y a une interrelation 
entre les traitements et les données.

53
00:02:53,515 --> 00:02:55,379
Les traitements opérant sur les données,

54
00:02:55,379 --> 00:02:59,810
lesquelles influencent à leur tour
les traitements opérés.

55
00:02:59,820 --> 00:03:01,496
On peut faire ici deux observations.

56
00:03:01,496 --> 00:03:04,511
La première est que, 
une des briques de base fondamentale

57
00:03:04,511 --> 00:03:08,331
pour exprimer des traitements
est la notion d'expression.

58
00:03:08,331 --> 00:03:11,917
Ici, j'ai besoin d'évaluer 
une petite expression arithmétique

59
00:03:11,917 --> 00:03:14,096
pour calculer mon delta.

60
00:03:14,099 --> 00:03:18,030
La seconde observation est liée
à la notion de données.

61
00:03:18,030 --> 00:03:22,482
Je vois ici par exemple qu'une donnée
comme delta est associée à une valeur,

62
00:03:22,482 --> 00:03:26,376
et que j'ai besoin de retrouver
la valeur associée à cette donnée

63
00:03:26,376 --> 00:03:30,907
à différents endroits du programme
de la séquence d'instructions.

64
00:03:30,907 --> 00:03:34,353
Le fait d'avoir un nom
comme delta me permet

65
00:03:34,353 --> 00:03:36,585
d'avoir accès à la valeur de la donnée

66
00:03:36,585 --> 00:03:38,256
à différents endroits du programme,

67
00:03:38,256 --> 00:03:40,842
de mémoriser cette valeur
au travers d'un nom.

68
00:03:40,842 --> 00:03:47,609
C'est lié à une notion fondamentale
appelée la notion de variable.

69
00:03:47,609 --> 00:03:50,366
Le but de ce cours d'introduction 
à la programmation

70
00:03:50,366 --> 00:03:52,314
est d'introduire l'ensemble
des briques de base

71
00:03:52,314 --> 00:03:55,021
qui permettent de mettre en oeuvre
des traitements

72
00:03:55,021 --> 00:03:58,029
et de manipuler des données
de façon adéquate.

73
00:03:58,029 --> 00:04:01,011
En guise de traitement, nous avons vu 
que la notion d'expression

74
00:04:01,011 --> 00:04:04,350
était fondamentale, nous allons
nous y attaquer bientôt,

75
00:04:04,350 --> 00:04:05,847
ainsi qu'à celle d'opérateurs.

76
00:04:05,847 --> 00:04:08,804
Concernant les données,
je viens d'introduire au travers

77
00:04:08,804 --> 00:04:11,855
d'un petit exemple le fait que
il faut mémoriser des données

78
00:04:11,855 --> 00:04:15,064
au travers de variables, 
et c'est l'objectif

79
00:04:15,064 --> 00:04:17,703
sur lequel je vais me focaliser
dans la séquence d'aujourd'hui.

80
00:04:19,602 --> 00:04:22,982
Une variable est un moyen 
en programmation de stocker une donnée,

81
00:04:22,982 --> 00:04:24,744
d'y associer un nom.

82
00:04:24,744 --> 00:04:28,534
Concrètement, dans un programme
s'exécutant sur une machine,

83
00:04:28,534 --> 00:04:32,064
une variable va correspondre à une zone 
nommée en mémoire,

84
00:04:32,064 --> 00:04:33,421
une zone qui a un nom.

85
00:04:33,421 --> 00:04:36,459
Un nom qu'on appelle usuellement 
un identificateur,

86
00:04:36,459 --> 00:04:38,372
l'identificateur de la variable.

87
00:04:38,372 --> 00:04:43,743
Cette zone mémoire va contenir une valeur,
ce que l'on peut voir ici,

88
00:04:43,743 --> 00:04:46,569
va stocker une valeur,
associée justement au nom n.

89
00:04:46,569 --> 00:04:51,463
Et chose très importante, 
c++ exige que l'on définisse clairement

90
00:04:51,463 --> 00:04:55,736
le genre associé à chaque donnée
que l'on va manipuler,

91
00:04:55,736 --> 00:04:58,238
ce que l'on appelle 
le type de la variable.

92
00:04:58,238 --> 00:05:01,708
Par exemple, je peux avoir envie 
de manipuler des données

93
00:05:01,708 --> 00:05:10,591
de type entier, de type décimal,
de type chaîne de caractère.

94
00:05:10,591 --> 00:05:14,213
Je dois très clairement le spécifier
au moment où dans un programme,

95
00:05:14,213 --> 00:05:17,821
j'indique que je veux utiliser une variable.

96
00:05:17,821 --> 00:05:19,904
Dans le cas de cet exemple,

97
00:05:19,904 --> 00:05:26,934
on aurait donc une variable nommée n,
stockant la valeur 123,

98
00:05:26,934 --> 00:05:33,990
et qui a pour type, le type entier,
qui en c++ s'écrit int.

99
00:05:33,990 --> 00:05:36,774
Que faire concrètement 
dans un programme c++

100
00:05:36,774 --> 00:05:39,770
où je souhaite déclarer une variable ?

101
00:05:39,770 --> 00:05:42,893
Vous avez ici une petite 
coquille de programme c++

102
00:05:42,893 --> 00:05:44,799
prête à recevoir des instructions,

103
00:05:44,799 --> 00:05:48,264
et je vais déclarer une donnée, 
de type entier,

104
00:05:48,264 --> 00:05:50,047
qui contient la valeur quatre.

105
00:05:50,047 --> 00:05:53,703
Pour ce faire, je tape le nom de la donnée.

106
00:05:53,703 --> 00:05:59,256
J'indique quel est le type entier, 
et je lui associe une valeur,

107
00:05:59,256 --> 00:06:00,971
ici la valeur quatre.

108
00:06:00,971 --> 00:06:03,892
Ainsi j'ai les briques de base, 
que je vous ai montrées tout à l'heure,

109
00:06:03,892 --> 00:06:06,960
je déclare une variable n, 
qui contient une valeur quatre,

110
00:06:06,960 --> 00:06:09,481
et qui est de type int.

111
00:06:09,481 --> 00:06:12,206
Lorsque je rédige une ligne 
de cette nature dans un programme,

112
00:06:12,206 --> 00:06:14,284
comme je viens de le faire
dans un éditeur,

113
00:06:14,284 --> 00:06:17,180
je suis en fait en train 
de déclarer une variable.

114
00:06:17,180 --> 00:06:18,895
Je déclare dans mon programme,

115
00:06:18,895 --> 00:06:21,235
que je souhaite utiliser une variable
qui s'appelle n,

116
00:06:21,235 --> 00:06:24,795
pour reprendre les éléments 
de terminologie de tout à l'heure,

117
00:06:24,795 --> 00:06:29,875
l'identificateur de la variable est ici n.

118
00:06:29,875 --> 00:06:32,791
C'est au travers de cet identificateur
que je vais pouvoir accéder

119
00:06:32,791 --> 00:06:35,281
à la donnée stockée 
dans cette variable.

120
00:06:35,281 --> 00:06:40,196
Et à cette donnée, est associé un type
qui est le type entier,

121
00:06:40,196 --> 00:06:42,571
qui en c++ s'écrit int.

122
00:06:42,571 --> 00:06:45,877
En c++, je ne suis pas
dans l'obligation absolue

123
00:06:45,877 --> 00:06:50,143
de donner une valeur initiale 
à ma variable quand je la déclare.

124
00:06:50,143 --> 00:06:54,116
Je peux déclarer une variable 
en la laissant vide de contenu,

125
00:06:54,116 --> 00:06:55,422
ce que je fais ici.

126
00:06:55,422 --> 00:06:59,232
Ici j'ai un identificateur,
qui est n_carré, un type qui est int,

127
00:06:59,232 --> 00:07:01,534
mais je n'ai pas 
de valeur initiale associée.

128
00:07:01,534 --> 00:07:05,392
Ces deux lignes constituent 
des déclarations de variables,

129
00:07:05,392 --> 00:07:08,076
valides en c++.

130
00:07:08,076 --> 00:07:12,565
Initialiser une variable consiste
à lui donner une valeur de départ.

131
00:07:12,565 --> 00:07:16,112
Ceci se fait usuellement 
au moment de la déclaration.

132
00:07:16,112 --> 00:07:19,078
Ici, je déclare une variable n, 
de type entier,

133
00:07:19,078 --> 00:07:22,047
et je l'initialise 
au moyen de la valeur quatre,

134
00:07:22,047 --> 00:07:25,540
ce qui se traduit en mémoire 
par un schéma de cette nature.

135
00:07:25,540 --> 00:07:29,080
Je dispose désormais 
d'une zone identifiée par n,

136
00:07:29,080 --> 00:07:32,288
et qui contient 
une valeur initiale quatre.

137
00:07:32,288 --> 00:07:35,825
Ceci constitue la façon conseillée
de procéder.

138
00:07:35,825 --> 00:07:39,674
Nous avons vu tout à l'heure 
qu'il était possible en c++,

139
00:07:39,674 --> 00:07:43,637
de déclarer une variable 
sans pour autant l'initialiser.

140
00:07:43,637 --> 00:07:47,370
Nous nous trouvons alors 
dans une situation de cette nature,

141
00:07:47,370 --> 00:07:51,814
où la variable n_carré peut contenir
absolument n'importe quoi.

142
00:07:51,814 --> 00:07:55,737
Les traitements que l'on ferait 
avec cette variable n_carré,

143
00:07:55,737 --> 00:07:57,666
sont complètement imprédictibles,

144
00:07:57,666 --> 00:08:00,490
et peuvent produire 
n'importe quel type de résultats.

145
00:08:00,490 --> 00:08:02,592
Certainement des résultats erronés.

146
00:08:02,592 --> 00:08:05,799
C'est pour cela qu'il faut 
toujours initialiser une variable,

147
00:08:05,799 --> 00:08:09,379
avant d'utiliser la valeur
qu'elle contient.

148
00:08:09,379 --> 00:08:13,150
Le type associé à la variable
au moment de sa déclaration,

149
00:08:13,150 --> 00:08:14,492
est tout à fait fondamentale.

150
00:08:14,492 --> 00:08:16,687
C'est lui qui va conditionner 
le type de traitement

151
00:08:16,687 --> 00:08:19,955
que l'on peut réaliser avec 
la variable en question.

152
00:08:19,955 --> 00:08:23,292
Lorsque je fais une déclaration 
de cette nature dans un programme,

153
00:08:23,292 --> 00:08:30,459
j'indique que n ne peut contenir
que des entiers, et rien d'autre.

154
00:08:30,459 --> 00:08:37,456
De même, si je déclare dans un programme
une variable de type double,

155
00:08:37,456 --> 00:08:40,509
qui signifie décimale pour c++,

156
00:08:40,509 --> 00:08:49,057
j'impose le fait que la variable x,
ne peut contenir que des décimaux,

157
00:08:49,057 --> 00:08:51,426
et rien d'autre.

158
00:08:51,426 --> 00:08:54,228
Pour résumer, la déclaration 
d'une variable en c++

159
00:08:54,228 --> 00:08:56,196
suit le schéma suivant.

160
00:08:56,196 --> 00:08:59,484
On indique le type de la variable, 
son identificateur,

161
00:08:59,484 --> 00:09:02,493
entre parenthèses, sa valeur initiale.

162
00:09:02,493 --> 00:09:06,179
Et ne pas oublier 
le point virgule à la fin.

163
00:09:06,179 --> 00:09:10,308
Cette deuxième façon 
de déclarer une variable est licite,

164
00:09:10,308 --> 00:09:12,592
mais déconseillée puisqu'on ne donne

165
00:09:12,592 --> 00:09:15,830
aucune valeur initiale à la variable,
pour commencer.

166
00:09:15,830 --> 00:09:19,390
Il faut être attentif au fait 
que le type d'une variable

167
00:09:19,390 --> 00:09:21,126
ne peut pas changer.

168
00:09:21,126 --> 00:09:23,666
Lorsqu'on déclare
une variable d'un certain type,

169
00:09:23,666 --> 00:09:25,373
cette variable va garder ce type

170
00:09:25,373 --> 00:09:30,086
jusqu'à la fin de son existence 
dans le programme.

171
00:09:30,086 --> 00:09:34,359
Il est possible en c++ de déclarer 
deux variables sur la même ligne.

172
00:09:34,359 --> 00:09:37,380
Dans ce cas, on n'indique 
qu'une seule fois le type associé,

173
00:09:37,380 --> 00:09:41,783
et on sépare les différentes déclarations
par une virgule.

174
00:09:41,783 --> 00:09:44,789
Ceci peut donner lieu à des ambiguïtés,

175
00:09:44,789 --> 00:09:48,207
il est conseillé de ne pas en abuser.

176
00:09:48,207 --> 00:09:50,796
Il existe un certain nombre
de conventions à respecter

177
00:09:50,796 --> 00:09:52,899
lorsqu'on déclare une variable,

178
00:09:52,899 --> 00:09:55,591
lorsqu'on donne un identificateur
à une variable.

179
00:09:55,591 --> 00:10:00,005
Il faut que l'identificateur soit constitué
de lettres et de chiffres,

180
00:10:00,005 --> 00:10:03,295
sachant que le caractère souligné
est considéré comme une lettre.

181
00:10:03,295 --> 00:10:06,398
Vous avez ici un exemple 
d'identificateur valide.

182
00:10:06,398 --> 00:10:09,367
Les accents ne sont pas autorisés.

183
00:10:09,367 --> 00:10:11,608
Vous avez un exemple ici
d'identificateur invalide,

184
00:10:11,608 --> 00:10:13,106
contenant un accent.

185
00:10:13,106 --> 00:10:16,932
De même, le premier caractère
doit être une lettre,

186
00:10:16,932 --> 00:10:20,939
et vous avez ici un exemple
d'identificateur invalide,

187
00:10:20,939 --> 00:10:23,282
commençant par un chiffre.

188
00:10:23,282 --> 00:10:28,040
Bien sûr, l'identificateur ne doit pas
être un mot réservé du langage,

189
00:10:28,040 --> 00:10:30,603
il existe un certain nombre de mots réservés

190
00:10:30,603 --> 00:10:33,945
qu'il convient de ne pas utiliser
comme nom de variable.

191
00:10:33,945 --> 00:10:36,605
Les majuscules et minuscules 
sont autorisées

192
00:10:36,605 --> 00:10:39,784
mais ne sont pas équivalentes, 
ce qui signifie par exemple,

193
00:10:39,784 --> 00:10:45,424
qu'un identificateur comme ligne 
ou Ligne ne sont pas équivalents.

194
00:10:45,424 --> 00:10:49,795
Ils ne vont pas désigner la même variable.

195
00:10:49,795 --> 00:10:51,987
Nous avons vu la notion de type,

196
00:10:51,987 --> 00:10:54,903
qui est essentielle
pour déclarer des variables.

197
00:10:54,903 --> 00:10:58,056
Les deux types élémentaire principaux
qui nous permettent dans un programme

198
00:10:58,056 --> 00:11:00,262
de manipuler des donnés numériques,

199
00:11:00,262 --> 00:11:03,801
de déclarer des variables 
de type numérique, sont int et double,

200
00:11:03,801 --> 00:11:06,777
que nous avons déjà croisées
dans divers exemples.

201
00:11:06,777 --> 00:11:11,568
Il existe bien sûr beaucoup d'autres
types prédéfinis en c++.

202
00:11:11,568 --> 00:11:16,729
Par exemple, si je veux manipuler
dans un programme des entiers positifs,

203
00:11:16,729 --> 00:11:20,569
par exemple si je veux représenter 
le nombre d'étudiants suivant ce cours,

204
00:11:20,569 --> 00:11:24,241
je peux avoir recours au type
unsigned int,

205
00:11:24,241 --> 00:11:26,539
qui précisément veut dire entier positif,

206
00:11:26,539 --> 00:11:30,295
et qui va me permettre de caractériser
ma donnée de façon plus précise,

207
00:11:30,295 --> 00:11:33,176
que uniquement par le biais d'un int.

208
00:11:33,176 --> 00:11:36,490
De même, si j'ai besoin dans un programme
de manipuler des caractères,

209
00:11:36,490 --> 00:11:41,593
les caractères usuelles entre a et z,
je peux avoir recours au type char.

210
00:11:41,593 --> 00:11:43,462
Nous aurons l'occasion lors de ce cours

211
00:11:43,462 --> 00:11:49,051
de revenir sur des types prédéfinis
utiles dans le langage c++.

212
00:11:49,051 --> 00:11:52,183
Nous savons à ce stade déclarer
et initialiser une variable,

213
00:11:52,183 --> 00:11:54,186
pour y stocker une donné.

214
00:11:54,186 --> 00:11:55,929
Dans de nombreuses situations,

215
00:11:55,929 --> 00:12:00,390
il faudra changer la valeur de la variable,
en cours d’exécution du programme.

216
00:12:00,390 --> 00:12:03,422
Ceci se fait au moyen 
de la notion d'affectation.

217
00:12:03,422 --> 00:12:06,255
L'affectation se pratique 
au moyen de l'opérateur égal,

218
00:12:06,255 --> 00:12:08,091
dit opérateur d'affectation.

219
00:12:08,091 --> 00:12:12,348
Une ligne de cette nature se lit, 
j'affecte à la variable n carré,

220
00:12:12,348 --> 00:12:14,349
la nouvelle valeur, n fois n.

221
00:12:14,349 --> 00:12:17,979
Ce qui signifie que je suis en train 
de changer la valeur de la variable,

222
00:12:17,979 --> 00:12:21,847
pour y stocker 
la nouvelle valeur n fois n.

223
00:12:21,847 --> 00:12:26,800
Attention à ne pas confondre
avec une égalité mathématique.

224
00:12:26,800 --> 00:12:28,957
L’exécution
d'une instruction d'affectation

225
00:12:28,957 --> 00:12:31,042
se déroule en réalité en deux temps.

226
00:12:31,042 --> 00:12:35,033
Dans un premier temps, ce qui est à droite
du symbole de l'affectation,

227
00:12:35,033 --> 00:12:38,611
à droite du symbole égal, 
va être évalué.

228
00:12:38,611 --> 00:12:40,910
Ici, dans notre exemple, 
nous avons une variable n

229
00:12:40,910 --> 00:12:43,006
qui stocke la valeur quatre.

230
00:12:43,006 --> 00:12:46,119
Sachant qu'en c++, l'étoile 
représente la multiplication,

231
00:12:46,119 --> 00:12:51,520
le résultat de l'évaluation de n fois n,
retourne tout simplement 16.

232
00:12:51,520 --> 00:12:55,801
Dans un second temps, 
ce que nous avons évalué à l'étape une,

233
00:12:55,801 --> 00:12:58,575
va être tout simplement stocké
dans la variable

234
00:12:58,575 --> 00:13:00,907
qui est à gauche du symbole d'affectation.

235
00:13:00,907 --> 00:13:05,993
Ici, désormais la variable n carré
stocke la valeur 16.

236
00:13:05,993 --> 00:13:08,412
Il faut bien réaliser ici, 
que si au préalable, n carré

237
00:13:08,412 --> 00:13:10,785
contenait autre chose que 16,

238
00:13:10,785 --> 00:13:16,184
ce résultat est effacé et remplacé
par la nouvelle valeur, 16.

239
00:13:16,184 --> 00:13:19,568
De façon plus générale, l'affectation
suit le schéma suivant.

240
00:13:19,568 --> 00:13:23,466
Vous avez un nom de variable suivi
du symbole d'affectation égal,

241
00:13:23,466 --> 00:13:27,498
et suivi d'une expression qui va
déterminer la nouvelle valeur

242
00:13:27,498 --> 00:13:30,076
que va prendre la variable,
suite à l'affectation.

243
00:13:30,076 --> 00:13:34,095
Nous allons bien sûr voir
les expressions plus en détails plus loin.

244
00:13:34,095 --> 00:13:36,457
Vous en avez un certain nombre ici.

245
00:13:36,457 --> 00:13:39,855
Une expression peut se réduire
à une simple valeur élémentaire,

246
00:13:39,855 --> 00:13:42,671
une expression simple, 
comme ici le calcul du carré de n.

247
00:13:42,671 --> 00:13:45,475
Et on utilisera les opérateurs
arithmétiques usuels,

248
00:13:45,475 --> 00:13:48,943
que l'on verra plus tard, 
la multiplication, le moins...

249
00:13:48,943 --> 00:13:53,483
Bien sûr, ne pas oublier le fameux
petit point virgule à la fin,

250
00:13:53,483 --> 00:13:58,561
qui est essentiel pour que la compilation
se passe de façon satisfaisante.

251
00:13:58,561 --> 00:14:00,393
Comme je l'ai dit tout à l'heure,

252
00:14:00,393 --> 00:14:04,116
il ne faut pas confondre l'affectation
avec une égalité mathématique.

253
00:14:04,116 --> 00:14:09,338
Le symbole égal est le même, 
mais en mathématique et en programmation,

254
00:14:09,338 --> 00:14:11,523
il ne signifie pas la même chose.

255
00:14:11,523 --> 00:14:14,115
Si on s'intéresse ici 
à ces deux instructions,

256
00:14:14,115 --> 00:14:17,736
ces deux lignes en mathématique
signifieraient que a et b

257
00:14:17,736 --> 00:14:19,579
ont les mêmes valeurs 
dans les deux cas.

258
00:14:19,579 --> 00:14:22,314
En c++, ce n'est pas exactement
ce qui va se passer.

259
00:14:22,314 --> 00:14:25,501
Intéressons-nous à la première instruction.

260
00:14:25,501 --> 00:14:27,943
Imaginons que nous ayons
des variables a et b,

261
00:14:27,943 --> 00:14:30,681
stockant chacune
deux valeurs différentes.

262
00:14:30,681 --> 00:14:34,182
Exécuter cette instruction 
aura pour conséquence

263
00:14:34,182 --> 00:14:37,903
d'évaluer le b,
qui a pour valeur deux,

264
00:14:37,903 --> 00:14:40,707
de prendre le résultat 
de l'évaluation de b,

265
00:14:40,707 --> 00:14:44,878
et de le stocker dans a, 
ce qui produira ce résultat.

266
00:14:44,878 --> 00:14:46,820
Si on s'intéresse à la deuxième situation,

267
00:14:46,820 --> 00:14:50,935
imaginons que l'on ait à nouveau
les variables a et b,

268
00:14:50,935 --> 00:14:52,861
avec des valeurs un et deux.

269
00:14:52,861 --> 00:14:57,371
Je vais évaluer a et prendre
le résultat de l'évaluation de a

270
00:14:57,371 --> 00:14:59,034
pour le stocker dans b.

271
00:14:59,034 --> 00:15:02,370
Je prends a, je le mets dans b.

272
00:15:02,370 --> 00:15:05,090
Donc je me retrouve avec un a et un b

273
00:15:05,090 --> 00:15:07,145
qui ont tous les deux la valeur une.

274
00:15:07,145 --> 00:15:08,799
On voit bien qu'en programmation,

275
00:15:08,799 --> 00:15:11,493
a et b se retrouvent certes 
avec les mêmes valeurs,

276
00:15:11,493 --> 00:15:14,321
mais ce ne sont pas les mêmes valeurs
dans les deux cas.

277
00:15:14,321 --> 00:15:17,658
Qui plus est, si plus tard
l'un des deux est modifié,

278
00:15:17,658 --> 00:15:19,080
l'autre ne l'est pas.

279
00:15:19,080 --> 00:15:22,090
Par exemple, si a est ensuite
modifié en trois,

280
00:15:22,090 --> 00:15:26,199
b garde sa propre valeur un.

281
00:15:26,199 --> 00:15:29,261
De même si en mathématique,
j'écris quelque chose comme ceci,

282
00:15:29,261 --> 00:15:31,157
je signifie que tout au long des calculs,

283
00:15:31,157 --> 00:15:33,540
a et b vérifieront toujours cette relation.

284
00:15:33,540 --> 00:15:35,912
En c++, la situation est différente.

285
00:15:35,912 --> 00:15:39,041
Ici, imaginons que nous ayons la situation

286
00:15:39,041 --> 00:15:43,910
où j'affecte à la variable a
la valeur cinq.

287
00:15:43,910 --> 00:15:47,423
Ensuite, j'écris une ligne 
qui ressemble très fortement

288
00:15:47,423 --> 00:15:49,835
à ce que j'exprimais ici en mathématique,

289
00:15:49,835 --> 00:15:52,044
et qui va avoir pour conséquence,

290
00:15:52,044 --> 00:15:56,532
de mettre dans b, le résultat 
de l'évaluation de a plus un,

291
00:15:56,532 --> 00:15:59,209
qui ici serait six.

292
00:15:59,209 --> 00:16:02,528
Ensuite, je peux parfaitement, 
lorsque j'exécute l'instruction suivante,

293
00:16:02,528 --> 00:16:06,285
changer à nouveau la valeur de a.

294
00:16:06,285 --> 00:16:10,928
On voit bien qu'ici, cette relation
n'est plus vérifiée,

295
00:16:10,928 --> 00:16:14,537
comme elle le serait en mathématique.

296
00:16:14,537 --> 00:16:18,468
Je peux donc en c++ parfaitement 
écrire une tournure de cette nature,

297
00:16:18,468 --> 00:16:21,949
qui va signifier, 
calculer l'expression de a plus un,

298
00:16:21,949 --> 00:16:24,569
puis ranger le résultat dans a.

299
00:16:24,569 --> 00:16:27,734
Ici, très concrètement, 
si on a une variable a,

300
00:16:27,734 --> 00:16:29,987
qui contenait à l'origine 
par exemple, trois,

301
00:16:29,987 --> 00:16:32,132
je vais commencer par évaluer

302
00:16:32,132 --> 00:16:36,118
l'expression qui est à droite
de l'opérateur d'affectation,

303
00:16:36,118 --> 00:16:40,582
ce qui va me produire le résultat,
trois plus un, donc quatre.

304
00:16:40,582 --> 00:16:44,947
Et ensuite seulement, ranger
la nouvelle valeur ainsi calculée dans a,

305
00:16:44,947 --> 00:16:47,155
ce qui produira ce résultat.

306
00:16:47,155 --> 00:16:49,289
Il s'agit là d'une tournure 
très fréquente,

307
00:16:49,289 --> 00:16:50,921
et très utile en programmation,

308
00:16:50,921 --> 00:16:53,789
que vous aurez l'occasion de pratiquer
de façon très intensive,

309
00:16:53,789 --> 00:16:55,724
au travers des exercices.

310
00:16:55,724 --> 00:16:57,463
Nous venons de voir comment l'affectation

311
00:16:57,463 --> 00:16:59,522
permet de modifier 
la valeur d'une variable,

312
00:16:59,522 --> 00:17:01,391
en cours d'exécution d'un programme.

313
00:17:01,391 --> 00:17:03,281
Il existe cependant des situations,

314
00:17:03,281 --> 00:17:06,018
où une fois qu'une variable 
a pris une valeur de départ,

315
00:17:06,018 --> 00:17:07,889
on ne souhaite plus la changer
par la suite,

316
00:17:07,889 --> 00:17:10,322
et garantir qu'elle ne change plus.

317
00:17:10,322 --> 00:17:14,324
Dans ce cas, il faudra précéder 
la déclaration de la variable

318
00:17:14,324 --> 00:17:16,109
par le mot réservé const.

319
00:17:16,109 --> 00:17:18,191
Le reste de la déclaration 
reste identique,

320
00:17:18,191 --> 00:17:20,910
un type, un identificateur,
une valeur de départ.

321
00:17:20,910 --> 00:17:23,595
Simplement on ajoute
le mot réservé const.

322
00:17:23,595 --> 00:17:27,249
Vous avez ici un exemple 
de déclaration d'une constante.

323
00:17:27,249 --> 00:17:29,514
Je déclare VITESSE_DE_LA_LUMIERE,

324
00:17:29,514 --> 00:17:31,771
comme étant une constante
de type double,

325
00:17:31,771 --> 00:17:34,836
qui a pour valeur ceci.

326
00:17:34,836 --> 00:17:36,418
Une fois que je fais cette déclaration,

327
00:17:36,418 --> 00:17:40,457
il ne me sera plus possible 
de modifier par une affectation

328
00:17:40,457 --> 00:17:42,929
la valeur de la vitesse de la lumière.

329
00:17:42,929 --> 00:17:46,813
Ceci me causera une erreur
à la compilation.

330
00:17:46,813 --> 00:17:50,615
Vous savez maintenant
déclarer une variable, l'initialiser.

331
00:17:50,615 --> 00:17:53,185
Vous savez aussi en changer la valeur
en cours d'exécution,

332
00:17:53,185 --> 00:17:54,678
au travers de l'affectation.

333
00:17:54,678 --> 00:17:56,932
Il nous reste à voir un certain nombre
d'éléments fondamentaux,

334
00:17:56,932 --> 00:17:58,809
comment afficher une variable par exemple,

335
00:17:58,809 --> 00:17:59,894
la valeur d'une variable,

336
00:17:59,894 --> 00:18:01,927
et quelles sont les expressions
qu'on peut utiliser

337
00:18:01,927 --> 00:18:04,356
pour affecter une nouvelle valeur
à une variable.

338
00:18:04,356 --> 00:18:07,697
C'est ce que nous allons voir
dans la suite des séquences vidéos.
