1
00:00:03,998 --> 00:00:06,811
Nous avons vu jusqu'à maintenant 
comment déclarer, initialiser,

2
00:00:06,811 --> 00:00:09,079
puis comment affecter une variable.

3
00:00:09,429 --> 00:00:13,025
Intéressons-nous, ici, à comment afficher
la valeur d'une variable

4
00:00:13,231 --> 00:00:16,370
et puis, aussi, à comment la
lire depuis le clavier.

5
00:00:17,333 --> 00:00:18,450
Commençons par l'affichage :

6
00:00:18,450 --> 00:00:22,000
si l'on regarde le programme
d'exemples simples suivant ;

7
00:00:22,000 --> 00:00:25,820
une ligne d'affichage est, par exemple,
une ligne telle qu'on la trouve ici.

8
00:00:25,820 --> 00:00:27,464
Regardons cette ligne d'un peu plus près.

9
00:00:28,494 --> 00:00:31,338
Cette ligne commence par
le mot réservé <i>cout</i>

10
00:00:31,338 --> 00:00:33,826
qui est une variable qui représente
dans le programme

11
00:00:33,826 --> 00:00:37,157
ce que l'on appelle techniquement le 
flot de sortie standard,

12
00:00:37,157 --> 00:00:39,654
c'est-à-dire, en général, le terminal.

13
00:00:42,710 --> 00:00:46,573
Ensuite on retrouve ici plusieurs
sections d'affichages,

14
00:00:46,650 --> 00:00:51,610
il faut chaque fois les regrouper comme
ceci, avec le signe << (double chevrons)

15
00:00:51,610 --> 00:00:56,103
qui représente le fait que l'on
veuille afficher quelque chose.

16
00:00:56,475 --> 00:01:00,680
D'un point de vue mnémotechnique,
cela représente le sens dans lequel

17
00:01:00,680 --> 00:01:02,674
va circuler l'information.

18
00:01:02,950 --> 00:01:06,227
L'information va aller de ce
qui suit vers <i>cout</i>.

19
00:01:06,862 --> 00:01:09,306
Cela devrait vous permettre de vous
souvenir plus facilement

20
00:01:09,306 --> 00:01:11,000
dans quel sens écrire ces signes.

21
00:01:11,965 --> 00:01:14,861
Donc, derrière ce signe qui
veut dire « affiche »,

22
00:01:14,861 --> 00:01:17,748
on trouve différentes valeurs
possibles d'affichage.

23
00:01:18,253 --> 00:01:20,397
Une valeur, ici, dite « littérale »,

24
00:01:20,397 --> 00:01:24,799
qui entre ces doubles <i>quote</i>,
ces guillemets doubles,

25
00:01:24,799 --> 00:01:27,965
va écrire exactement la
phrase telle quelle.

26
00:01:29,243 --> 00:01:34,166
Ensuite, nous avons ici l'écriture
d'une variable <i>n</i>

27
00:01:34,166 --> 00:01:39,203
représentant la valeur de la
variable stockée en mémoire

28
00:01:39,203 --> 00:01:40,567
sous le nom de <i>n</i>.

29
00:01:41,361 --> 00:01:45,808
Donc, on affichera ici la valeur contenue
par la variable <i>n</i>.

30
00:01:46,097 --> 00:01:50,913
Attention à ne pas confondre avec "n"
(double <i>quote</i> n double <i>quote</i>)

31
00:01:50,913 --> 00:01:55,492
qui veut dire 
« afficher la <i>lettre</i> n, le <i>mot</i> n ».

32
00:01:56,596 --> 00:02:01,330
Ensuite on aura ici l'écriture du point
en tant que tel,

33
00:02:01,330 --> 00:02:02,938
en tant que chaîne de caractères.

34
00:02:02,938 --> 00:02:06,762
Enfin, tout à la fin, nous avons
le mot réservé <i>endl</i>,

35
00:02:06,762 --> 00:02:08,615
qui veut dire « <i>end of line</i>»,

36
00:02:08,615 --> 00:02:13,927
et qui permet de passer à la ligne
suivante, d'afficher un saut de ligne.

37
00:02:16,394 --> 00:02:20,152
L'affichage de la variable <i>n</i> est
en fait un cas particulier

38
00:02:20,152 --> 00:02:22,338
d'une expression plus complexe ;

39
00:02:22,338 --> 00:02:27,985
on peut en fait utiliser n'importe quelle
expression au sens C++ dans <i>cout</i>.

40
00:02:28,628 --> 00:02:31,698
On peut, par exemple, afficher 2 * n
(deux fois n)

41
00:02:32,598 --> 00:02:35,518
La ligne complète suivante se lit donc :

42
00:02:35,518 --> 00:02:42,614
« sur <i>cout</i>, affiche le message
"Le double de", affiche la valeur de n,

43
00:02:42,614 --> 00:02:45,426
affiche le message "est"... »

44
00:02:45,426 --> 00:02:47,414
Avec ici, deux espaces.

45
00:02:48,044 --> 00:02:54,650
« ... puis, affiche l'expression 2 * n
(deux fois n) puis affiche un point,

46
00:02:54,650 --> 00:02:57,784
et enfin, affiche un saut de ligne. »

47
00:02:59,804 --> 00:03:02,151
<i>Cout</i> et <i>endl</i> s'appellent en fait

48
00:03:02,151 --> 00:03:04,888
std: :cout 
(S-T-D deux points deux points <i>cout</i>)

49
00:03:04,888 --> 00:03:07,833
et std: :endl 
(S-T-D deux points deux points <i>endl</i>).

50
00:03:07,854 --> 00:03:11,008
On peut les écrire simplement
<i>cout</i> et <i>endl</i>

51
00:03:11,008 --> 00:03:15,008
parce qu'au début du programme,
on a mis l'instruction :

52
00:03:16,233 --> 00:03:18,456
« using namespace std »,

53
00:03:18,456 --> 00:03:22,041
ce qui permet d'éviter d'avoir
à chaque fois à écrire

54
00:03:22,041 --> 00:03:26,813
std: devant les mots réservés
qui sont dans ce qu'on appelle

55
00:03:26,813 --> 00:03:31,725
« le <i>namespace</i> de la bibliothèque
standard, le <i>namespace std</i> ».

56
00:03:32,065 --> 00:03:35,226
Si on n'avait pas mis cette ligne
<i>using namespace std</i>,

57
00:03:35,429 --> 00:03:37,823
alors il aurait fallu en
toute rigueur écrire :

58
00:03:37,823 --> 00:03:42,165
std: :cout 
et std: :endl.

59
00:03:42,895 --> 00:03:46,355
Nous faisons cette remarque car parfois
dans du code provenant de l'extérieur,

60
00:03:46,355 --> 00:03:48,705
vous pourriez rencontrer cette syntaxe.

61
00:03:50,415 --> 00:03:52,355
Reprenons maintenant pour
illustrer tout ceci,

62
00:03:52,355 --> 00:03:55,085
le déroulement pas à pas de notre
programme d'exemple.

63
00:03:55,552 --> 00:03:59,344
Au tout début, on commence
par déclarer une variable n

64
00:03:59,344 --> 00:04:01,274
de type entier,

65
00:04:01,667 --> 00:04:05,076
que l'on initialise avec la valeur 4.

66
00:04:06,711 --> 00:04:10,614
Ceci a pour but de créer en mémoire
un espace dans lequel

67
00:04:10,614 --> 00:04:12,768
on va pouvoir stocker un entier n

68
00:04:13,178 --> 00:04:15,074
et dans lequel on met la valeur 4.

69
00:04:15,417 --> 00:04:20,685
Ensuite, on va déclarer une variable,
ici n², de type entier,

70
00:04:20,685 --> 00:04:23,630
mais comme elle n'est pas initialisée,

71
00:04:23,630 --> 00:04:26,872
on ne sait pas, <i>a priori</i>, quelle est
la valeur qu'elle contient au départ.

72
00:04:27,812 --> 00:04:33,840
Puis, on exécute l'instruction
n * n (n fois n) va dans n²

73
00:04:33,840 --> 00:04:36,655
c'est-à-dire, n² = n * n

74
00:04:36,655 --> 00:04:38,848
je vous rappelle que l'écriture
du signe égal ici

75
00:04:38,848 --> 00:04:44,203
signifie que l'on évalue l'expression
qui était à droite et qu'on la recopie

76
00:04:44,203 --> 00:04:48,148
dans la variable qui est ici, à gauche.

77
00:04:48,816 --> 00:04:54,284
Donc la variable n² reçoit 4 * 4
c'est-à-dire 16.

78
00:04:55,736 --> 00:04:58,460
Puis nous passons aux
instructions d'affichage,

79
00:04:58,460 --> 00:05:03,143
tout d'abord, on va afficher ici
<i>la variable n contient</i> ,

80
00:05:04,621 --> 00:05:11,423
puis on va afficher l'expression de
la variable n, c'est-à-dire 4, sa valeur,

81
00:05:11,423 --> 00:05:14,712
puis on va ensuite afficher un point,

82
00:05:14,712 --> 00:05:19,486
et enfin, ici, on saute à la ligne
grâce à ce <i>endl</i>.

83
00:05:20,217 --> 00:05:23,473
On passe à l'affichage suivant qui
affiche

84
00:05:23,473 --> 00:05:28,550
le carré de expression recherchée en
mémoire n qui vaut 4

85
00:05:29,049 --> 00:05:36,076
est de nouveau une expression recherchée
en mémoire, qui est n², qui vaut 16,

86
00:05:36,686 --> 00:05:42,915
puis saut à la ligne et enfin, on
affiche le dernier message,

87
00:05:42,915 --> 00:05:44,987
« Le double de n est »

88
00:05:45,358 --> 00:05:49,104
Notez bien ici que n est une
lettre comprise dans le message,

89
00:05:49,104 --> 00:05:50,830
elle va s'afficher telle quelle.

90
00:05:50,830 --> 00:05:54,110
C'est le mot, la lettre n qui
va s'afficher ici,

91
00:05:54,110 --> 00:05:58,549
et non pas une expression comme on avait
pu l'avoir sur la ligne précédente,

92
00:05:58,549 --> 00:06:01,359
ou comme on peut en avoir une ici.

93
00:06:01,583 --> 00:06:02,930
Donc le double de n est,

94
00:06:02,930 --> 00:06:06,879
puis affichage de l'expression 2 * n

95
00:06:06,879 --> 00:06:09,483
donc on va chercher ici la valeur de n4,

96
00:06:09,483 --> 00:06:14,557
2 * 4 qui, bien sûr, va s'évaluer à 8,
pour nous afficher ici 8.

97
00:06:14,654 --> 00:06:19,075
Enfin, affichage du point en tant
que lettre, le message point

98
00:06:19,075 --> 00:06:22,817
et affichage du retour à la ligne.

99
00:06:24,522 --> 00:06:27,073
Une question, maintenant,
regardez le code suivant

100
00:06:28,113 --> 00:06:30,446
et dites-nous ce qu'il affiche.

101
00:06:32,987 --> 00:06:35,115
La réponse détaillée pas à pas.

102
00:06:35,115 --> 00:06:38,798
Tout d'abord, on commence par
déclarer une variable de nom a

103
00:06:38,798 --> 00:06:42,993
de type entier, et qu'on initialise
avec la valeur 2,

104
00:06:42,993 --> 00:06:48,310
puis on déclare une variable b de type
entier qu'on initialise avec la valeur 1,

105
00:06:49,073 --> 00:06:55,576
puis on a l'affectation, ici, qui commence
par évaluer l'expression a * (b + 2 )

106
00:06:55,576 --> 00:07:01,133
c'est-à-dire 2 fois la valeur de b
qui vaut 1 plus 2

107
00:07:01,458 --> 00:07:02,792
c'est-à-dire 2 fois 3.

108
00:07:02,792 --> 00:07:10,630
Cette expression est recopiée dans b,
ce qui fait que b vaut maintenant 6.

109
00:07:11,380 --> 00:07:17,550
Enfin, on affiche ici la valeur de a,
virgule, la valeur de b.

110
00:07:19,451 --> 00:07:21,055
Autre question :

111
00:07:21,055 --> 00:07:22,455
qu'affiche ce programme ?

112
00:07:24,832 --> 00:07:28,077
La réponse : déroulons-la 
pas à pas de nouveau.

113
00:07:28,077 --> 00:07:31,645
On commence par déclarer une variable a
que l'on initialise à la valeur 1,

114
00:07:32,020 --> 00:07:37,206
puis on déclare une variable b de type
entier qu'on initialise à la valeur 2,

115
00:07:37,206 --> 00:07:41,755
ensuite on recopie la valeur de b dans a,

116
00:07:41,755 --> 00:07:45,737
donc ici, on va avoir a qui vaut 2,

117
00:07:45,737 --> 00:07:50,535
puis on recopie la valeur de a
qui a été modifiée,

118
00:07:50,535 --> 00:07:53,813
on recopie la valeur de
a dans b, reste 2,

119
00:07:53,813 --> 00:07:57,412
et donc au final, on va afficher 2, 2.

120
00:07:59,133 --> 00:08:00,884
La question qu'on pourrait se poser,

121
00:08:00,884 --> 00:08:04,786
c'est comment échanger la
valeur de deux variables ?

122
00:08:05,247 --> 00:08:10,130
Supposons qu'on ait une variable a
qui au départ contient 1,

123
00:08:10,130 --> 00:08:14,099
une variable b qui au départ contient 2,

124
00:08:14,099 --> 00:08:18,107
comment fait-on pour que l'on ait,
après échange,

125
00:08:18,107 --> 00:08:24,539
un 2 dans la variable a et
un 1 dans la variable b ?

126
00:08:25,360 --> 00:08:29,844
Supposons que vous ayez à le faire
avec des verres à eau.

127
00:08:30,248 --> 00:08:34,808
Supposons qu'on ait ici un
verre a rempli de grenadine

128
00:08:34,808 --> 00:08:39,973
et un verre b rempli de menthe.

129
00:08:40,750 --> 00:08:45,918
Comment feriez-vous, concrètement,
pour transférer la menthe dans le verre a

130
00:08:45,918 --> 00:08:49,870
et transférer la grenadine
dans le verre b ?

131
00:08:52,116 --> 00:08:56,644
La solution consiste bien sûr
à utiliser un troisième verre

132
00:08:56,644 --> 00:08:59,467
que je vais appeler tmp,

133
00:08:59,467 --> 00:09:03,763
ce n'est pas plus compliqué
pour des variables,

134
00:09:03,763 --> 00:09:09,246
il suffit simplement de penser à utiliser,
à introduire, une variable intermédiaire.

135
00:09:10,019 --> 00:09:16,449
Ce que l'on va faire, on va commencer par
créer cette variable intermédiaire <i>temp</i>

136
00:09:17,108 --> 00:09:20,203
dans laquelle on va recopier la valeur de a.

137
00:09:20,203 --> 00:09:23,017
Donc on va initialiser <i>temp</i>
avec la valeur de a,

138
00:09:23,017 --> 00:09:25,111
donc ici, <i>temp</i> vaudra 1.

139
00:09:25,525 --> 00:09:28,730
Puis on pourra recopier b dans a.

140
00:09:28,730 --> 00:09:33,392
Enfin, on pourra recopier
la valeur de <i>temp</i> dans b.

141
00:09:35,455 --> 00:09:39,171
Passons maintenant à la lecture
de valeurs de variables,

142
00:09:39,171 --> 00:09:40,185
depuis le clavier.

143
00:09:40,185 --> 00:09:42,206
Revenons à notre programme d'exemples,

144
00:09:42,206 --> 00:09:47,241
et supposons que l'on ne veuille pas
calculer que la valeur de 4 le carré de n,

145
00:09:47,241 --> 00:09:51,361
mais que l'on veuille pouvoir entrer
depuis le clavier

146
00:09:51,361 --> 00:09:54,499
la valeur de n en la demandant
à l'utilisateur.

147
00:09:54,889 --> 00:09:56,495
Comment ferait-on cela ?

148
00:09:56,987 --> 00:09:59,971
Eh bien, on va simplement insérer
dans le programme, ici,

149
00:09:59,971 --> 00:10:03,182
de quoi demander à l'utilisateur
d'entrer cette valeur,

150
00:10:03,182 --> 00:10:06,596
on commence bien sûr par
lui afficher un message

151
00:10:06,596 --> 00:10:08,871
« Entrez une valeur pour n: »

152
00:10:08,871 --> 00:10:13,794
puis ensuite avec cette instruction,
« <i>cin</i> redirigé vers n »,

153
00:10:13,794 --> 00:10:17,436
on va pouvoir lire depuis le clavier
la valeur de n.

154
00:10:19,195 --> 00:10:21,685
La lecture d'une variable au clavier
se fait donc

155
00:10:21,685 --> 00:10:24,117
grâce à l'instruction <i>cin</i> (C - <i>IN</i>)

156
00:10:24,117 --> 00:10:29,010
<i>cin</i> veut dire le flot d'entrée standard,
<i>in</i> comme <i>input</i>,

157
00:10:29,010 --> 00:10:32,342
c'est-à-dire que cela va représenter
la lecture au clavier.

158
00:10:32,932 --> 00:10:36,675
Puis on retrouve ici un signe similaire à
celui qu'on avait utilisé pour l'affichage

159
00:10:36,675 --> 00:10:38,910
mais dirigé dans l'autre sens.

160
00:10:39,282 --> 00:10:43,119
L'information, ici, va du clavier vers
votre variable n,

161
00:10:43,119 --> 00:10:46,997
si cela peut vous aider à vous souvenir
de la façon d'écrire ce symbole.

162
00:10:47,514 --> 00:10:51,692
Et enfin, derrière, on va avoir le nom
d'une variable dans lequel

163
00:10:51,692 --> 00:10:54,420
on va stocker la valeur
qui sera lue au clavier.

164
00:10:55,280 --> 00:11:00,562
<i>cin</i> représente donc le clavier dans
la mémoire, le programme, de l'ordinateur.

165
00:11:00,562 --> 00:11:05,346
Le symbole ici représente le fait que l'on
aille de <i>cin</i> vers la mémoire,

166
00:11:05,767 --> 00:11:07,059
le sens de lecture,

167
00:11:07,059 --> 00:11:10,346
et puis, ensuite le nom de la variable.

168
00:11:11,153 --> 00:11:15,542
Attention, il faut bien comprendre que
ce qui suit le signe de lecture ici,

169
00:11:15,542 --> 00:11:17,242
c'est bien le nom d'une variable.

170
00:11:17,242 --> 00:11:20,639
Ça ne peut pas être un message ou
quoique ce soit d'autre.

171
00:11:20,639 --> 00:11:22,427
Ceci est absolument interdit.

172
00:11:23,191 --> 00:11:27,820
Si vous voulez afficher quelque chose,
vous devez utiliser l'instruction <i>cout</i>.

173
00:11:27,820 --> 00:11:30,606
Vous commencez par afficher un message,

174
00:11:30,606 --> 00:11:33,180
éventuellement un retour à la ligne,
c'est optionnel,

175
00:11:33,180 --> 00:11:36,042
puis ensuite, dans une seconde
instruction,

176
00:11:36,042 --> 00:11:40,232
vous allez lire depuis le clavier
dans la variable n.

177
00:11:41,146 --> 00:11:45,445
Le message s'affiche bien, non pas sur
le clavier, mais sur le terminal <i>cout</i>

178
00:11:45,445 --> 00:11:51,685
et l'instruction de lecture est bien la
ligne qui contient le <i>cin</i> ici.

179
00:11:53,835 --> 00:11:57,468
A signaler toutefois, que vous pouvez lire
plusieurs variables à la suite,

180
00:11:57,468 --> 00:11:59,001
les unes derrières les autres,

181
00:11:59,001 --> 00:12:02,189
il faut simplement à chaque fois
rajouter le signe de lecture.

182
00:12:02,189 --> 00:12:08,848
Ici, cela veut dire 
« depuis <i>cin</i> n1 <i>puis</i> lis n2 <i>puis</i> lis n3 ».

183
00:12:09,743 --> 00:12:14,112
Personnellement, je vous encourage plutôt
à l'écrire en plusieurs lignes séparées,

184
00:12:14,112 --> 00:12:18,130
donc écrire « lecture depuis <i>cin</i> dans n1 »

185
00:12:18,465 --> 00:12:22,400
puis « lecture depuis <i>cin</i> dans n2 »

186
00:12:22,400 --> 00:12:26,300
puis « lecture depuis <i>cin</i> dans n3 ».

187
00:12:26,627 --> 00:12:28,157
C'est peut-être un peu plus fastidieux,

188
00:12:28,157 --> 00:12:29,975
mais je crois que dans une
première approche,

189
00:12:29,975 --> 00:12:31,409
c'est quand même beaucoup plus clair.

190
00:12:33,630 --> 00:12:36,767
Regardons maintenant notre exemple
se dérouler pas à pas,

191
00:12:36,767 --> 00:12:41,618
on a donc déclaré au départ la variable n,
puis on affiche la question,

192
00:12:41,618 --> 00:12:43,616
« Entrez une valeur pour n: »

193
00:12:43,966 --> 00:12:48,780
ce qui aura pour conséquences d'afficher
ce message, puis on va lire au clavier.

194
00:12:49,254 --> 00:12:52,965
Supposons ici que l'utilisateur tape
la valeur 2,

195
00:12:52,965 --> 00:13:00,565
cette instruction <i>cin</i> dans n va
faire que le 2 saisi au clavier

196
00:13:01,382 --> 00:13:04,910
va aller dans la variable n, ici.

197
00:13:06,288 --> 00:13:10,104
La variable n, une fois cette instruction
exécutée à ce stade-là,

198
00:13:10,104 --> 00:13:12,704
contiendra la valeur
qu'on a lue au clavier.

199
00:13:13,138 --> 00:13:14,990
Ensuite, la suite du programme se déroule

200
00:13:14,990 --> 00:13:17,135
exactement de la même façon
que précédemment,

201
00:13:17,135 --> 00:13:19,977
On déclare par exemple la variable n²,

202
00:13:19,977 --> 00:13:26,271
ensuite on calcule le carré de n,
n fois n, on l'affecte à la variable n²,

203
00:13:26,271 --> 00:13:29,585
puis on commence les affichages
en commençant par l'affichage de

204
00:13:29,585 --> 00:13:34,138
« La variable n contient » - affichage
de la valeur de n ;

205
00:13:34,138 --> 00:13:38,076
pour ce message, la variable n contient 2,

206
00:13:38,076 --> 00:13:42,084
et on continuerait le programme
de la même façon que précédemment.
