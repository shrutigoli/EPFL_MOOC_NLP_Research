1
00:00:05,810 --> 00:00:09,810
Bonjour. Dans cette vidéo nous allons voir 
un nouveau type, le string,

2
00:00:10,155 --> 00:00:12,385
qui permet de déclarer des variables

3
00:00:12,385 --> 00:00:14,585
qui vont contenir des chaînes de caractères.

4
00:00:14,585 --> 00:00:18,145
Une chaîne de caractères, 
c'est simplement une liste de caractères,

5
00:00:18,145 --> 00:00:22,055
comme un mot, ou une phrase, 
par exemple, "Bonjour tout le monde!"

6
00:00:22,843 --> 00:00:26,843
Pour pouvoir utiliser ce nouveau type,
il faut inclure sa définition,

7
00:00:27,131 --> 00:00:31,131
c'est-à-dire, ajouter cette ligne 
au début du programme,

8
00:00:31,131 --> 00:00:34,131
#include <string>

9
00:00:35,060 --> 00:00:38,910
On peut alors déclarer
des variables de type string.

10
00:00:39,563 --> 00:00:41,473
Ça va se faire de cette façon-ci,

11
00:00:41,473 --> 00:00:47,563
comme d'habitude, ça va commencer 
par le type de la variable, ici string,

12
00:00:47,682 --> 00:00:50,442
suivie du nom qu'on 
veut donner à la variable,

13
00:00:50,442 --> 00:00:52,632
et finir par un point virgule.

14
00:00:53,933 --> 00:00:58,943
Dans cet exemple de code, 
je commence par indiquer la ligne

15
00:00:58,943 --> 00:01:02,813
#include <string> pour pouvoir 
utiliser ce nouveau type string.

16
00:01:04,281 --> 00:01:06,457
Cette ligne est une déclaration de variable

17
00:01:06,457 --> 00:01:09,477
qui déclare une variable
qui s'appelle "un_nom"

18
00:01:13,764 --> 00:01:18,074
et qui est pour l'instant,
initialisée à la chaîne vide.

19
00:01:18,357 --> 00:01:22,357
C'est une particularité du type string
par rapport au type qu'on a déjà rencontré.

20
00:01:22,666 --> 00:01:25,936
Si on ne met aucune 
valeur initiale explicitement,

21
00:01:26,167 --> 00:01:28,507
la variable est initialisée 
à la chaîne vide.

22
00:01:28,884 --> 00:01:31,547
En revanche, cette deuxième déclaration

23
00:01:31,547 --> 00:01:34,507
déclare une variable "message"

24
00:01:37,183 --> 00:01:39,583
qui sera initialisée à 
"Bonjour à tous !"

25
00:01:42,898 --> 00:01:46,788
Alors attention, ces caractères,
qui sont des guillemets

26
00:01:46,788 --> 00:01:51,128
ou qu'on appelle aussi <i>double quotes</i>,
ne font pas partie de la chaîne,

27
00:01:51,128 --> 00:01:54,198
elles servent juste à indiquer 
le début et la fin de la chaîne.

28
00:01:54,776 --> 00:01:58,096
Les chaînes de caractères sont donc
constituées de caractères,

29
00:01:58,096 --> 00:02:02,096
et ces caractères ont leur propre type
qui s'appelle le type <i>char</i>.

30
00:02:02,345 --> 00:02:06,345
On peut donc déclarer des variables 
qui vont contenir un seul caractère.

31
00:02:07,121 --> 00:02:12,421
Par exemple, ici, je déclare 
une variable qui s'appelle <i>c</i>,

32
00:02:12,559 --> 00:02:15,344
qui va contenir le caractère <i>'x'</i>.

33
00:02:15,344 --> 00:02:18,794
Je peux le représenter de cette façon-ci,

34
00:02:18,888 --> 00:02:22,508
et notez que le caractère <i>x</i> 
se trouve ici entre apostrophes

35
00:02:24,295 --> 00:02:26,915
ou ce qu'on appelle aussi
simple quotes.

36
00:02:27,272 --> 00:02:31,272
Alors que les chaînes de caractères
étaient délimitées par des guillemets

37
00:02:31,440 --> 00:02:33,520
ou des double quotes.

38
00:02:34,086 --> 00:02:36,956
Dans cette deuxième déclaration,

39
00:02:37,176 --> 00:02:41,846
on déclare une variable <i>u</i>,
également de type <i>char</i>.

40
00:02:41,988 --> 00:02:45,208
Elle n'a pas été initialisée, donc 
on ne sait pas ce qu'elle contient.

41
00:02:45,809 --> 00:02:49,149
Et quand on exécute cette instruction, 
qui est une affectation,

42
00:02:49,939 --> 00:02:53,949
et bien on va affecter 
le caractère <i>'s'</i> à la variable <i>u</i>.

43
00:02:55,295 --> 00:02:58,845
Attention à ne pas mélanger 
les types char et string.

44
00:02:58,845 --> 00:03:03,835
Si par exemple j'écris char s('c');

45
00:03:03,844 --> 00:03:07,445
c'est la déclaration d'une variable
qui va contenir forcément

46
00:03:07,445 --> 00:03:10,125
un seul caractère
puisqu'elle est de type char.

47
00:03:10,624 --> 00:03:15,214
Si j'écris string s ("c");

48
00:03:15,214 --> 00:03:18,114
c'est la déclaration 
d'une chaîne de caractères

49
00:03:18,114 --> 00:03:20,464
qui se trouve contenir
qu'un seul caractère.

50
00:03:20,824 --> 00:03:26,254
Donc attention je ne peux pas écrire
par exemple char s ("c");

51
00:03:26,786 --> 00:03:30,506
puisque ceci est de type string,

52
00:03:30,506 --> 00:03:34,330
donc je ne peux pas affecter 
à ma variable s, de type char.

53
00:03:34,774 --> 00:03:39,049
Donc un bon moyen mnémotechnique,
c'est de se rappeler que

54
00:03:39,133 --> 00:03:42,843
une variable de type char
contient qu'un seul caractère

55
00:03:42,843 --> 00:03:46,353
et que donc on utilise ici
des simple quotes.

56
00:03:46,819 --> 00:03:51,169
Et qu'une chaîne de caractères contient 
en général plus qu'un seul caractère

57
00:03:51,169 --> 00:03:55,689
et qu'on va utiliser des doubles quotes
pour délimiter une chaine de caractères.

58
00:03:56,521 --> 00:03:58,781
Comme n'importe quel autre type,

59
00:03:58,781 --> 00:04:01,111
on peut modifier à l'aide d'une affectation

60
00:04:01,111 --> 00:04:04,161
des variables déclarées de type string.

61
00:04:04,161 --> 00:04:07,741
Alors par exemple, 
ici je commence par déclarer

62
00:04:07,741 --> 00:04:10,561
une variable qui s'appelle "chaine",

63
00:04:11,191 --> 00:04:12,571
de type string,

64
00:04:12,571 --> 00:04:15,021
et j'ai donné aucune valeur pour initialiser,

65
00:04:15,021 --> 00:04:19,061
je vous rappelle que dans ce cas, 
"chaine" va être initialisé à la chaîne vide.

66
00:04:20,245 --> 00:04:24,375
Ensuite, ici, je déclare 
une deuxième variable

67
00:04:24,375 --> 00:04:27,956
toujours de type string, 
qui s'appelle "chaine2"

68
00:04:27,956 --> 00:04:31,806
"chaine2" est initialisée à la chaine "test".

69
00:04:31,806 --> 00:04:35,556
Ensuite, ici, je fais une affectation

70
00:04:35,556 --> 00:04:38,104
qui va changer la valeur de chaine

71
00:04:38,104 --> 00:04:41,244
en mettant "test3" dans "chaine".

72
00:04:41,244 --> 00:04:43,434
Dans cette affectation suivante,

73
00:04:43,434 --> 00:04:46,724
je copie la valeur de "chaine2"
dans "chaine".

74
00:04:47,054 --> 00:04:49,484
Alors "chaine2" contient "test"

75
00:04:49,484 --> 00:04:53,794
ce "test3" ici va être remplacé 
par la chaine de caractères "test"

76
00:04:54,086 --> 00:04:56,686
et dans cette dernière affectation,

77
00:04:56,822 --> 00:05:00,822
j'affecte le caractère 'a'
à la variable "chaine"

78
00:05:01,045 --> 00:05:03,065
c'est-à-dire celle-ci.

79
00:05:03,324 --> 00:05:05,234
Alors il s'agit bien d'un caractère

80
00:05:05,234 --> 00:05:08,024
parce que j'ai utilisé des simple quotes

81
00:05:08,024 --> 00:05:10,754
ou des apostrophes 
pour délimiter les caractères.

82
00:05:11,077 --> 00:05:13,737
Mais le C++ va faire 
une conversion automatique

83
00:05:13,737 --> 00:05:16,657
de cette valeur qui est de type char

84
00:05:17,091 --> 00:05:19,511
en une valeur qui est de type string,

85
00:05:19,511 --> 00:05:22,911
c'est-à-dire en une chaine de caractères

86
00:05:22,911 --> 00:05:25,111
que je peux représenter de cette façon-ci.

87
00:05:25,324 --> 00:05:28,814
Donc maintenant, après cette
dernière affectation,

88
00:05:29,060 --> 00:05:32,280
"chaine" contient la chaine "a".

89
00:05:32,768 --> 00:05:35,218
On peut concaténer deux chaînes,

90
00:05:35,218 --> 00:05:37,488
c'es-à-dire mettre à bout ces deux chaînes,

91
00:05:37,559 --> 00:05:39,889
à l'aide de l'opérateur +

92
00:05:39,889 --> 00:05:42,229
Par exemple, si "chaine1" et "chaine2"

93
00:05:42,229 --> 00:05:44,209
sont deux variables de type string,

94
00:05:44,209 --> 00:05:46,169
je peux écrire ceci,

95
00:05:46,509 --> 00:05:49,889
qui me donnera une nouvelle
chaîne de caractères

96
00:05:49,897 --> 00:05:53,307
qui commencera par
les caractères de "chaine1"

97
00:05:53,307 --> 00:05:56,847
et qui finira par les caractères de "chaine2".

98
00:05:56,847 --> 00:06:00,337
Par exemple, dans ce code

99
00:06:00,337 --> 00:06:03,487
je déclare trois variables de type string

100
00:06:03,686 --> 00:06:06,606
qui sont pour l'instant 
initialisés à la chaîne vide.

101
00:06:09,823 --> 00:06:14,493
Supposons qu'ici j'aurais donné
une valeur à la variable "prenom"

102
00:06:14,493 --> 00:06:17,173
par exemple "Jean"

103
00:06:18,083 --> 00:06:21,997
et un nom de famille dans la variable "famille".

104
00:06:22,985 --> 00:06:25,805
Quand j'exécute cette affectation,

105
00:06:26,635 --> 00:06:29,535
je vais d'abord concaténer

106
00:06:29,535 --> 00:06:31,925
la valeur de la variable "famille

107
00:06:31,925 --> 00:06:34,375
avec cette chaîne de caractères

108
00:06:34,375 --> 00:06:36,685
qui contient simplement un espace.

109
00:06:36,685 --> 00:06:38,795
Ça va donc me donner

110
00:06:38,905 --> 00:06:42,605
"Dupont" suivi d'un espace

111
00:06:42,605 --> 00:06:44,925
que je vais représenter comme ceci.

112
00:06:45,360 --> 00:06:48,230
Et je vais ensuite ajouter

113
00:06:48,230 --> 00:06:51,400
le contenu de la valeur "prenom"

114
00:06:52,025 --> 00:06:53,995
c'est-à-dire "Jean".

115
00:06:54,377 --> 00:06:57,617
Tout ceci est une nouvelle 
chaîne de caractères

116
00:06:58,302 --> 00:07:01,372
que je vais mettre dans la variable "nom"

117
00:07:01,372 --> 00:07:03,112
au moment de l'affectation.

118
00:07:03,573 --> 00:07:05,923
Les combinaisons suivantes sont possibles

119
00:07:05,923 --> 00:07:07,963
pour la concaténation de deux chaînes.

120
00:07:08,395 --> 00:07:11,625
Je peux concaténer 
deux variables de type string.

121
00:07:12,145 --> 00:07:15,635
Mais je peux aussi concaténer
une variable de type string

122
00:07:15,635 --> 00:07:19,295
avec une valeur littérale de type string.

123
00:07:20,077 --> 00:07:23,427
Ou je peux commencer
par la valeur littérale

124
00:07:23,427 --> 00:07:25,957
suivie de la variable de type string.

125
00:07:26,378 --> 00:07:30,188
Je peux également commencer par

126
00:07:30,188 --> 00:07:34,658
une variable de type string
et lui ajouter un caractère.

127
00:07:35,233 --> 00:07:38,113
Ou je peux commencer par le caractère

128
00:07:38,353 --> 00:07:41,983
et le concaténer avec
une variable de type string.

129
00:07:42,263 --> 00:07:45,093
Si je reprends l'exemple 
du transparent précédent,

130
00:07:45,093 --> 00:07:46,663
où j'avais utilisé

131
00:07:46,663 --> 00:07:49,643
une valeur littérale de type string

132
00:07:50,074 --> 00:07:52,904
pour représenter l'espace

133
00:07:53,812 --> 00:07:57,486
que je voulais insérer entre 
le nom de famille et le prénom,

134
00:07:57,486 --> 00:08:00,356
et bien en fait je peux aussi 
utiliser un caractère.

135
00:08:00,356 --> 00:08:01,896
C'est ce que j'ai fait ici

136
00:08:01,896 --> 00:08:04,306
en utilisant des simples quotes.

137
00:08:04,817 --> 00:08:08,927
Cette chose-ci est une 
valeur littérale de type char.

138
00:08:09,310 --> 00:08:11,110
Et j'ai parfaitement le droit

139
00:08:11,110 --> 00:08:14,830
de concaténer un char
avec une variable de type string.

140
00:08:15,008 --> 00:08:16,748
C'est ce qu'on voit ici.

141
00:08:19,558 --> 00:08:22,508
Les concaténations de la forme string+char

142
00:08:22,508 --> 00:08:25,158
sont très pratiques pour 
pouvoir ajouter des caractères

143
00:08:25,168 --> 00:08:27,328
à la fin d'une chaîne de caractères

144
00:08:27,591 --> 00:08:29,941
Par exemple, je déclare ici

145
00:08:29,941 --> 00:08:32,471
une variable "reponse"

146
00:08:33,397 --> 00:08:36,317
qui contient la chaîne 
de caractères "solutions"

147
00:08:37,247 --> 00:08:40,757
et quand une variable "n" 
est supérieure à 1,

148
00:08:40,979 --> 00:08:43,709
j'ai envie de mettre "solutions" au pluriel.

149
00:08:44,041 --> 00:08:47,103
Pour cela je vais utiliser cette affectation :

150
00:08:47,173 --> 00:08:51,423
"reponse" contient 
pour l'instant "solutions".

151
00:08:52,032 --> 00:08:55,630
Et je vais lui concaténer 
le caractère 's'.

152
00:08:55,848 --> 00:09:00,326
Je vais donc obtenir la chaîne 
"solutions" avec un "s" à la fin.

153
00:09:00,549 --> 00:09:03,319
Et je vais mettre le résultat
dans ma variable "reponse".

154
00:09:03,319 --> 00:09:08,439
C'est-à-dire que dans "reponse", 
je vais obtenir "solutions" au pluriel.

155
00:09:08,439 --> 00:09:10,779
Et on peut utiliser exactement le même truc

156
00:09:10,779 --> 00:09:13,649
pour ajouter des caractères 
au début d'une chaîne.

157
00:09:14,868 --> 00:09:18,298
Comme pour les autres types,
on va utiliser le symbole ==

158
00:09:18,298 --> 00:09:20,978
pour tester si deux chaînes sont égales.

159
00:09:21,287 --> 00:09:25,967
Et le symbole != pour tester 
si deux chaînes sont différentes.

160
00:09:26,306 --> 00:09:30,361
Par exemple, dans ce code 
j'utilise une boucle do-while

161
00:09:30,361 --> 00:09:34,401
avec à l'intérieur l'appel à 
une fonction qui pose une question.

162
00:09:34,401 --> 00:09:37,131
Le résultat de cette fonction,

163
00:09:38,181 --> 00:09:39,971
est une chaîne de caractères

164
00:09:39,971 --> 00:09:42,491
que je vais affecter à ma variable "reponse".

165
00:09:43,256 --> 00:09:45,796
Et puis je veux poser la question

166
00:09:45,796 --> 00:09:49,056
tant que la réponse est différente de oui.

167
00:09:49,056 --> 00:09:51,816
Et pour cela, j'ai qu'à écrire

168
00:09:51,816 --> 00:09:55,036
à l'intérieur des parenthèses ici,
cette condition-ci,

169
00:09:55,676 --> 00:09:58,794
qui va tester si "reponse" est différent
de la chaîne de caractères "oui".

170
00:10:00,932 --> 00:10:03,362
Nous allons nous arrêter là
pour cette introduction

171
00:10:03,362 --> 00:10:04,512
aux chaînes de caractères.

172
00:10:04,512 --> 00:10:07,482
Dans la vidéo suivante, nous verrons
des manipulations de chaînes.
