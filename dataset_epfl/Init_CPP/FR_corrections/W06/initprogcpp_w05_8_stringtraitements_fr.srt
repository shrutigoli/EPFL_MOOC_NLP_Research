1
00:00:05,563 --> 00:00:08,844
Dans cette vidéo, nous allons voir
quel traitement nous pouvons faire

2
00:00:08,859 --> 00:00:10,869
sur les chaines de caractères.

3
00:00:10,869 --> 00:00:13,891
On peut accéder aux caractères
d'une chaîne, individuellement.

4
00:00:13,891 --> 00:00:15,921
Par exemple, si <i>chaine</i>

5
00:00:15,921 --> 00:00:18,231
est une variable de type "string"

6
00:00:18,231 --> 00:00:20,801
alors, <i>chaine[i]</i>

7
00:00:20,801 --> 00:00:24,661
est le ( i + 1) ème caractère de <i>chaine</i>

8
00:00:24,661 --> 00:00:27,661
et ce caractère sera de type "char".

9
00:00:27,661 --> 00:00:30,184
Alors attention, comme pour les tableaux

10
00:00:30,184 --> 00:00:33,319
le premier caractère a pour indice 0

11
00:00:33,319 --> 00:00:37,067
le dernier caractère
a pour indice (<i>taille - 1</i>)

12
00:00:37,067 --> 00:00:40,204
si <i>taille</i> est le nombre
de caractères de la chaîne.

13
00:00:40,380 --> 00:00:41,663
Par exemple,

14
00:00:42,163 --> 00:00:45,126
je déclare ici une variable <i>demo</i>

15
00:00:46,067 --> 00:00:47,661
de type chaîne de caractères

16
00:00:47,661 --> 00:00:51,494
qui contient la chaîne
de caractères "ABCD"

17
00:00:53,082 --> 00:00:57,107
je déclare ici, deux caractères :

18
00:00:57,107 --> 00:00:59,037
<i>premier</i> et <i>dernier</i>,

19
00:00:59,037 --> 00:01:01,453
qui, pour l'instant
ne sont pas initialisés.

20
00:01:01,453 --> 00:01:04,951
J'affecte <i>premier</i>, à l'aide
de cette affectation ici :

21
00:01:05,343 --> 00:01:08,570
demo [0], qu'est ce que c'est ?

22
00:01:08,924 --> 00:01:11,986
Et bien, <i>demo</i> c'est ma chaîne qui est ici,

23
00:01:11,986 --> 00:01:14,712
[0] correspond à ce premier caractère.

24
00:01:14,712 --> 00:01:19,800
Donc <i>premier</i> va recevoir
le caractère grand 'A'

25
00:01:19,800 --> 00:01:24,176
et ici, et bien dans <i>dernier</i>
je vais mettre le caractère

26
00:01:24,176 --> 00:01:27,458
d'indice 3 de ma chaîne <i>demo</i>.

27
00:01:27,458 --> 00:01:29,882
Le caractère d'indice 3 c'est

28
00:01:30,252 --> 00:01:34,246
0, 1, 2, 3, c'est ce 'D' ici,

29
00:01:34,246 --> 00:01:37,462
et je vais donc mettre 'D'
dans ma variable <i>dernier</i>.

30
00:01:40,724 --> 00:01:43,159
Un autre exemple sous forme de quiz

31
00:01:43,159 --> 00:01:45,591
à votre avis, qu'affiche ce code

32
00:01:45,941 --> 00:01:47,583
quand on l'exécute ?

33
00:01:48,813 --> 00:01:53,756
Je commence par déclarer ici
une variable qui s'appelle <i>essai</i>

34
00:01:53,756 --> 00:01:56,747
et qui contient la chaîne 
de caractères <i>essai</i>,

35
00:01:56,747 --> 00:01:59,952
et je déclare ici
une autre chaîne de caractères

36
00:01:59,952 --> 00:02:02,475
qui est initialisée à la chaîne vide.

37
00:02:03,146 --> 00:02:05,046
Je continue avec cette boucle <i>for</i>

38
00:02:05,046 --> 00:02:09,264
où la variable 'i'
va prendre les valeurs 1, 2, et 3,

39
00:02:09,264 --> 00:02:11,044
pour l'instant 'i' vaut 1.

40
00:02:11,044 --> 00:02:13,863
J'entre dans la boucle <i>for</i> :

41
00:02:15,033 --> 00:02:18,332
<i>essai</i> [ 6 - 2 * i ]

42
00:02:18,332 --> 00:02:19,778
qu'est ce que ça vaut ?

43
00:02:19,778 --> 00:02:21,762
Alors ça sera un caractère déjà,

44
00:02:21,762 --> 00:02:25,876
comme 'i' vaut 1, l'indice vaut 4

45
00:02:25,876 --> 00:02:29,727
et le caractère d'indice 4 de <i>essai</i>

46
00:02:29,727 --> 00:02:32,648
c'est 0, 1, 2, 3, 4

47
00:02:32,648 --> 00:02:35,101
c'est le caractère 'i'.

48
00:02:35,101 --> 00:02:37,582
Tout ceci, est le caractère 'i'

49
00:02:37,582 --> 00:02:41,097
que je vais ajouter à
ce que contient la chaîne <i>test</i> .

50
00:02:41,097 --> 00:02:45,011
La chaîne <i>test</i> est vide
donc j'ai tout simplement à obtenir

51
00:02:45,011 --> 00:02:47,972
la chaîne 'i', que je vais mettre
dans la variable <i>test</i>.

52
00:02:47,972 --> 00:02:51,734
Ensuite, ici dans cette affectation,

53
00:02:51,734 --> 00:02:55,616
essai [ i ] , comme 'i' vaut 1

54
00:02:55,956 --> 00:02:59,670
et bien, c'est le caractère 's' ici.

55
00:03:00,091 --> 00:03:03,352
<i>Test</i>, pour l'instant,
vaut la chaîne de caractères "i".

56
00:03:03,352 --> 00:03:07,032
Donc tout cet ensemble
vaut la chaîne "si"

57
00:03:07,032 --> 00:03:08,870
que je vais affecter à <i>test</i>.

58
00:03:11,898 --> 00:03:13,832
'i' vaut maintenant 2,

59
00:03:13,832 --> 00:03:16,069
je continue dans la boucle for.

60
00:03:16,069 --> 00:03:20,768
J'exécute cette affectation ici,
cette expression vaut 2.

61
00:03:20,768 --> 00:03:27,210
Ceci est donc le caractère
de la chaîne <i>essai</i> d'indice 2,

62
00:03:27,949 --> 00:03:30,906
qui est ce 's' ci.

63
00:03:32,298 --> 00:03:36,666
Ceci vaut 's', <i>test</i> vaut 'si'.

64
00:03:37,588 --> 00:03:39,740
Donc le résultat
de cette affectation,

65
00:03:39,740 --> 00:03:45,150
c'est je vais mettre "sis" 
dans la variable <i>test</i>.

66
00:03:45,150 --> 00:03:49,902
Je continue ici, <i>essai[i]</i>

67
00:03:49,902 --> 00:03:53,485
c'est l'élément d'indice 2
de ma variable <i>essai</i>

68
00:03:53,485 --> 00:03:56,582
c'est à dire, ce 's' ci.

69
00:03:57,019 --> 00:03:59,413
<i>test</i> vaut "sis",

70
00:03:59,413 --> 00:04:02,377
et donc quand je fais
cette affectation ici

71
00:04:02,377 --> 00:04:05,981
j'obtiens "ssis" dans la variable <i>test</i>.

72
00:04:06,597 --> 00:04:07,802
Je continue,

73
00:04:10,171 --> 00:04:13,001
cette fois-ci, 'i' vaut 3

74
00:04:13,432 --> 00:04:17,011
dans cette affectation
et dans cette expression

75
00:04:18,352 --> 00:04:20,704
qui vaut donc maintenant 0.

76
00:04:21,203 --> 00:04:26,499
Tout ceci vaut donc le caractère
d'indice 0 de ma chaîne <i>essai</i>,

77
00:04:26,499 --> 00:04:28,787
c'est à dire, ce 'e' ci

78
00:04:28,787 --> 00:04:31,345
que je vais ajouter à <i>test</i>.

79
00:04:31,922 --> 00:04:37,401
J'obtiens donc, 6 pour l'instant,
je passe à cette affectation.

80
00:04:38,484 --> 00:04:42,752
<i>essai[3]</i> c'est,

81
00:04:42,752 --> 00:04:45,310
0, 1, 2, 3,

82
00:04:45,310 --> 00:04:47,278
ce caractère-ci.

83
00:04:47,278 --> 00:04:48,734
C'est à dire un 'a'.

84
00:04:48,734 --> 00:04:52,126
Je vais lui ajouter "ssise"

85
00:04:52,126 --> 00:04:55,908
et j'obtiens la chaîne "assise"

86
00:04:56,898 --> 00:04:59,461
que je vais mettre dans ma variable <i>test</i>.

87
00:04:59,461 --> 00:05:03,321
Et cet affichage me donne donc
l'affichage 'd'assise'.

88
00:05:05,088 --> 00:05:08,764
Plusieurs fonctions propres
au type <i>string</i> sont définis en c++

89
00:05:08,764 --> 00:05:10,049
comme pour les vectors,

90
00:05:10,049 --> 00:05:12,571
elles s'utilisent avec
la syntaxe suivante,

91
00:05:12,571 --> 00:05:17,009
tout d'abord le nom de la variable
de type chaîne de caractères,

92
00:05:17,009 --> 00:05:21,987
suivi d'un point, suivi du nom
de la fonction q'on veut utiliser,

93
00:05:21,987 --> 00:05:25,033
suivi des éventuels arguments

94
00:05:25,033 --> 00:05:27,522
dont a besoin la fonction
pour pouvoir fonctionner.

95
00:05:27,522 --> 00:05:30,698
On dispose entre autres
de la fonction <i>size</i>

96
00:05:30,698 --> 00:05:34,627
qui va s'appeler ainsi,
si je suppose que <i>chaine</i>

97
00:05:34,627 --> 00:05:37,719
est une variable de type
chaîne de caractères

98
00:05:37,719 --> 00:05:41,323
et cette fonction
va me renvoyer la taille,

99
00:05:41,323 --> 00:05:45,272
c'est à dire, le nombre de caractères
de ma variable <i>chaine</i>.

100
00:05:46,772 --> 00:05:49,959
Je dispose également de la fonction <i>insert</i>

101
00:05:50,251 --> 00:05:51,995
qui a elle, deux arguments.

102
00:05:51,995 --> 00:05:53,756
Tout d'abord

103
00:05:53,756 --> 00:05:58,187
la position d'un caractère
qui définit là où on va insérer

104
00:05:58,187 --> 00:05:59,740
une deuxième chaîne.

105
00:05:59,740 --> 00:06:02,851
Et qui est définit par cet argument ici.

106
00:06:03,742 --> 00:06:07,494
Donc l'appel à ces fonctions
va insérer la chaine2

107
00:06:07,494 --> 00:06:09,858
dans la variable <i>chaine</i>

108
00:06:09,858 --> 00:06:12,393
à partir de cette position-ci.

109
00:06:12,393 --> 00:06:15,681
Par exemple, je déclare ici

110
00:06:15,681 --> 00:06:17,989
une variable chaîne de caractères

111
00:06:17,989 --> 00:06:22,948
qui contient la chaîne:
"abcd",

112
00:06:24,491 --> 00:06:27,076
et j'appelle ici la fonction <i>insert</i>

113
00:06:27,076 --> 00:06:31,523
avec la position 1, qui est celle-ci.

114
00:06:32,455 --> 00:06:35,084
Et la chaîne "xx".

115
00:06:35,084 --> 00:06:39,356
Et bien, cette fonction <i>insert</i>
va insérer la chaîne "xx"

116
00:06:39,937 --> 00:06:42,934
entre le caractère d'indice 0

117
00:06:43,924 --> 00:06:45,951
et le caractère d'indice 1,

118
00:06:45,951 --> 00:06:47,619
c'est à dire, ici.

119
00:06:48,480 --> 00:06:51,632
Et on va mettre le résultat
dans la chaîne <i>exemple</i>

120
00:06:51,632 --> 00:06:54,378
C'est à dire que après l'appel
à la fonction <i>insert</i>

121
00:06:54,378 --> 00:06:58,266
ma variable <i>exemple</i>
contient la chaîne

122
00:06:58,266 --> 00:07:02,974
"axxbcd".

123
00:07:04,294 --> 00:07:06,954
On dispose également
de la fonction <i>replace</i>,

124
00:07:06,954 --> 00:07:09,055
qui a elle besoin de 3 arguments.

125
00:07:09,055 --> 00:07:12,069
Tout d'abord, position,
un peu comme la fonction <i>insert</i>

126
00:07:12,069 --> 00:07:13,430
que nous venons de voir.

127
00:07:13,430 --> 00:07:16,472
Un nombre de caractères,
et le troisième argument

128
00:07:16,472 --> 00:07:18,297
est une chaîne de caractères.

129
00:07:18,297 --> 00:07:20,355
Cette fonction <i>replace</i> fonctionne

130
00:07:20,355 --> 00:07:22,471
un peu comme la fonction <i>insert</i>,

131
00:07:22,471 --> 00:07:26,543
sauf que, elle va remplacer 'n' caractères

132
00:07:28,078 --> 00:07:29,827
de la variable <i>chaîne</i>.

133
00:07:29,827 --> 00:07:32,272
Alors plus précisément,
je vais prendre un exemple,

134
00:07:32,272 --> 00:07:34,917
après cette déclaration et initialisation

135
00:07:34,917 --> 00:07:39,561
la variable <i>exemple</i>
contient la chaîne

136
00:07:39,561 --> 00:07:43,095
"abcd".

137
00:07:43,095 --> 00:07:47,559
J'appelle ma fonction <i>replace</i>
avec pour position la valeur 1,

138
00:07:47,962 --> 00:07:49,977
qui correspond à ce 'b' ci.

139
00:07:50,885 --> 00:07:55,064
La fonction <i>replace</i>
va remplacer deux caractères

140
00:07:55,064 --> 00:07:57,681
à partir de ce caractère 'b'

141
00:07:58,692 --> 00:08:01,365
C'est à dire, ce 'b' et ce 'c',

142
00:08:01,365 --> 00:08:04,237
et va les remplacer par cette chaîne-ci

143
00:08:04,237 --> 00:08:07,838
qui est "1234"

144
00:08:07,838 --> 00:08:13,209
et je vais donc obtenir
dans ma variable <i>exemple</i>

145
00:08:15,439 --> 00:08:20,281
la chaîne "a1234d".

146
00:08:21,914 --> 00:08:25,516
Au passage je peux utiliser
cette fonction <i>replace</i>,

147
00:08:25,516 --> 00:08:28,327
pour supprimer les caractères
dans une chaîne.

148
00:08:28,327 --> 00:08:31,290
Pour cela il nous suffit
d'utiliser la chaîne vide

149
00:08:31,590 --> 00:08:34,070
pour le troisième argument.

150
00:08:35,466 --> 00:08:37,016
Dans ce nouvel exemple,

151
00:08:37,496 --> 00:08:39,345
ma variable <i>exemple</i>

152
00:08:40,445 --> 00:08:45,964
contient la chaîne "abcd".

153
00:08:47,184 --> 00:08:51,373
Je vais remplacer comme avant
les caractères 'b' et 'c',

154
00:08:51,373 --> 00:08:54,067
mais je vais les remplacer
avec la chaîne vide.

155
00:08:54,067 --> 00:08:57,619
Ça veut dire, qu'au final, je veux obtenir

156
00:08:57,619 --> 00:09:00,798
la chaîne 'ad'

157
00:09:00,798 --> 00:09:03,997
dans ma variable <i>exemple</i>.

158
00:09:07,177 --> 00:09:10,354
La fonction <i>find</i> attend un seul argument

159
00:09:10,354 --> 00:09:12,621
de type chaîne de caractères

160
00:09:12,621 --> 00:09:15,509
et renvoie l'indice dans <i>chaine</i>

161
00:09:15,929 --> 00:09:17,620
du premier caractère

162
00:09:17,620 --> 00:09:20,653
de l'occurrence la plus
à gauche de la chaîne

163
00:09:20,653 --> 00:09:22,068
passé en argument.

164
00:09:22,068 --> 00:09:23,431
Alors qu'est ce que ça veut dire ?

165
00:09:23,431 --> 00:09:24,651
Je vais prendre un exemple,

166
00:09:24,651 --> 00:09:28,212
Où ma variable <i>exemple</i> est initialisée

167
00:09:28,212 --> 00:09:30,331
à cette chaîne de caractère-ci,

168
00:09:30,331 --> 00:09:35,393
et j'appelle la fonction <i>find</i>
en lui passant "ab" en paramètre.

169
00:09:35,393 --> 00:09:39,987
Et bien "ab", en partant de la gauche
apparaît pour la première fois

170
00:09:39,987 --> 00:09:41,673
dans <i>exemple</i> ici,

171
00:09:43,553 --> 00:09:46,255
l'indice du premier caractère
c'est l'indice 2,

172
00:09:46,258 --> 00:09:48,027
puisqu'on part de 0.

173
00:09:48,027 --> 00:09:52,171
Et ma fonction <i>find</i> va donc
me renvoyer la valeur 2.

174
00:09:52,583 --> 00:09:57,152
Il existe également la fonction inverse
qui part de la droite,

175
00:09:57,152 --> 00:09:58,966
c'est la fonction <i>rfind</i>.

176
00:09:59,869 --> 00:10:02,623
Et donc, quand j'appelle
cette fonction <i>rfind</i>

177
00:10:02,623 --> 00:10:05,486
sur cette même chaîne <i>exemple</i>

178
00:10:06,858 --> 00:10:09,317
j'ai dit que je partais de la droite

179
00:10:09,317 --> 00:10:13,720
et la première fois que "ab"
apparaît dans cette chaîne-ci

180
00:10:13,720 --> 00:10:19,176
c'est ici et l'indice
de ce caractère-ci c'est

181
00:10:20,044 --> 00:10:24,258
'0, 1, 2, 3, 4, 5, 6',

182
00:10:24,258 --> 00:10:26,722
et donc ma fonction <i>rfind</i>

183
00:10:26,722 --> 00:10:29,817
dans ce cas ci,
va me renvoyer la valeur 6.

184
00:10:29,817 --> 00:10:31,669
Notez qu'il n'y a pas de garantie

185
00:10:31,669 --> 00:10:35,901
que la chaîne passée en argument
aux fonctions <i>find</i> et <i>rfind</i>

186
00:10:35,901 --> 00:10:40,074
se trouve dans la chaîne sur laquelle
ces fonctions s'appliquent.

187
00:10:40,074 --> 00:10:43,367
Dans ce cas, les fonctions <i>find</i> et <i>rfind</i>

188
00:10:43,367 --> 00:10:45,745
vont envoyer une valeur prédéfinie

189
00:10:45,745 --> 00:10:49,460
qui se note <i>string::npos</i>

190
00:10:49,460 --> 00:10:53,296
pour signaler qu'elle n'ont pas trouvé
la chaîne passée en argument.

191
00:10:53,296 --> 00:10:57,620
Par exemple si je fais
cette instruction-ci

192
00:10:57,620 --> 00:11:01,814
avec <i>exemple</i> qui vaut
comme dans les exemples précédents

193
00:11:01,814 --> 00:11:06,623
"baabbaab"

194
00:11:06,623 --> 00:11:10,312
et que j'essaye
de chercher la chaîne "xy".

195
00:11:10,312 --> 00:11:13,113
Comme cette chaîne "xy" n'apparaît pas

196
00:11:13,113 --> 00:11:14,779
dans la chaîne <i>exemple</i>

197
00:11:14,779 --> 00:11:16,722
et bien, la fonction <i>find</i>

198
00:11:16,722 --> 00:11:21,751
va renvoyer la valeur prédéfinie
<i>string::npos</i> .

199
00:11:22,860 --> 00:11:26,487
Enfin, une dernière fonction
qui s'appel <i>substr</i>

200
00:11:26,487 --> 00:11:29,771
qui a deux paramètres : <i>depart</i> et <i>longueur</i>

201
00:11:29,771 --> 00:11:32,989
qui s'applique dans cet exemple
sur la chaîne de caractères <i>chaine</i>,

202
00:11:32,989 --> 00:11:37,105
et bien, cet appel à la fonction <i>substr</i>

203
00:11:37,105 --> 00:11:39,393
renvoie la sous-chaîne de <i>chaine</i>

204
00:11:39,393 --> 00:11:44,044
qui a, comme longueur,
cette <i>longueur</i> passée en argument

205
00:11:44,044 --> 00:11:47,363
et qui va commencer à la position <i>depart</i>.

206
00:11:47,363 --> 00:11:51,902
Par exemple, si je considère
cette chaîne de caractères

207
00:11:51,902 --> 00:11:55,326
<i>exemple</i>, qui contient cette valeur

208
00:11:55,326 --> 00:12:00,276
l'appel à cette fonction
<i>exemple</i> . <i>substr</i> ( 8, 4 )

209
00:12:00,276 --> 00:12:02,807
va me renvoyer une sous-chaîne

210
00:12:03,687 --> 00:12:07,478
qui va commencer
aux caractères d'indice 8.

211
00:12:07,688 --> 00:12:14,676
Alors, 0,1,2,3,4,5,6,7,8

212
00:12:14,906 --> 00:12:17,360
c'est à dire sauter ici

213
00:12:17,360 --> 00:12:21,055
et va prendre 4 caractères à partir du 't'

214
00:12:22,135 --> 00:12:24,719
et donc l'appel à
cette fonction va renvoyer

215
00:12:24,719 --> 00:12:27,195
la chaîne "tous".

216
00:12:28,041 --> 00:12:29,805
Voila, c'est tous ce que nous allons voir

217
00:12:29,805 --> 00:12:31,844
sur les fonctionnalités du type <i>string</i>.

218
00:12:31,844 --> 00:12:34,639
Sachez qu'il y en a d'autres
mais qu'elle fonctionnent toutes

219
00:12:34,639 --> 00:12:36,622
sur le même principe.
