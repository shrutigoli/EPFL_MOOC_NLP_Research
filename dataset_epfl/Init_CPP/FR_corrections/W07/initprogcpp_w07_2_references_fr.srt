1
00:00:05,317 --> 00:00:07,940
Une référence, c'est simplement
juste un autre nom,

2
00:00:07,940 --> 00:00:10,376
un synonyme, un alias,

3
00:00:10,376 --> 00:00:12,505
pour un objet qui existe déjà en mémoire.

4
00:00:12,505 --> 00:00:16,304
Si par exemple j'ai déjà un objet, 
une variable de type entier

5
00:00:16,304 --> 00:00:20,641
qui s'appelle par exemple <i>val</i>
et qui contient la valeur 1.

6
00:00:20,896 --> 00:00:25,515
Je peux lui donner un autre nom, 
par exemple <i>x</i>,

7
00:00:25,515 --> 00:00:31,214
pour ce même endroit, cette même variable
en mémoire, ce sera une référence.

8
00:00:31,605 --> 00:00:34,574
Une référence ça sert 
donc juste à désigner

9
00:00:34,574 --> 00:00:36,534
un autre objet 
qui est en mémoire.

10
00:00:36,534 --> 00:00:38,385
C'est exactement 
ce que l'on utilisait

11
00:00:38,385 --> 00:00:41,117
lorsque l'on faisait 
des passages par référence.

12
00:00:41,117 --> 00:00:48,532
Si on avait pas exemple une fonction <i>f</i>
qui prenait par référence un entier a,

13
00:00:48,532 --> 00:00:53,692
qu'on écrivait comme ceci, 
avec le signe &, ici.

14
00:00:53,880 --> 00:00:56,926
On faisait bien un passage par référence

15
00:00:56,926 --> 00:00:59,765
si quelque part, plus tard, 
dans le programme,

16
00:00:59,765 --> 00:01:03,605
j'avais déclaré par exemple un entier

17
00:01:03,605 --> 00:01:08,063
que j'appelle <i>b</i>,
que j'initialise à 3,

18
00:01:08,063 --> 00:01:11,838
et que je faisais un appel à <i>f(b)</i>.

19
00:01:12,370 --> 00:01:16,245
<i>b</i> était passé par référence 
à la fonction <i>f</i>

20
00:01:16,251 --> 00:01:19,976
au travers de la variable a, 
paramètre de la fonction <i>f</i>.

21
00:01:20,462 --> 00:01:23,002
Ce passage par référence 
permettait que ce soit

22
00:01:23,002 --> 00:01:29,582
le même objet qui soit désigné à 
l'extérieur et à l'intérieur de la fonction.

23
00:01:29,582 --> 00:01:33,511
C'est de ça dont il s'agit 
quand on parle de référence.

24
00:01:33,511 --> 00:01:37,068
La syntaxe très générale de déclaration 
d'une référence est la suivante.

25
00:01:37,381 --> 00:01:39,905
On va pouvoir généraliser 
cette syntaxe, utilisée

26
00:01:40,166 --> 00:01:43,062
par le passage par référence 
dans les fonctions,

27
00:01:43,062 --> 00:01:47,196
en ajoutant le signe & derrière le type
puis le nom d'une référence.

28
00:01:47,196 --> 00:01:49,406
Ce n'est pas une nouvelle variable.

29
00:01:49,602 --> 00:01:52,329
C'est juste une nouvelle étiquette 
sur une variable qui existe.

30
00:01:52,329 --> 00:01:55,851
Puis ici, on la lie à un identificateur.

31
00:01:55,851 --> 00:02:01,950
Si je reprends un exemple, 
avec une variable qui s'appelle <i>val</i>

32
00:02:01,950 --> 00:02:05,992
qui est de type entier, 
qui contient la valeur 1.

33
00:02:06,078 --> 00:02:07,813
Je peux alors à ce moment là,

34
00:02:07,813 --> 00:02:13,170
déclarer ici une référence 
que j'appelle <i>x</i>

35
00:02:13,170 --> 00:02:18,664
et qui est un autre nom 
sur la variable <i>val</i>.

36
00:02:18,664 --> 00:02:23,665
Cette déclaration, 
cette syntaxe, fait

37
00:02:23,665 --> 00:02:28,472
que <i>x</i> est un autre nom 
pour la variable <i>val</i>

38
00:02:28,472 --> 00:02:30,968
Ça ne fait pas une nouvelle variable <i>x</i>

39
00:02:30,968 --> 00:02:35,068
dans laquelle je copierai <i>val</i>, 
mais ça crée un nouveau drapeau,

40
00:02:35,068 --> 00:02:37,554
un nouveau nom, 
une nouvelle étiquette,

41
00:02:37,554 --> 00:02:42,240
pour ce qui existe déjà en mémoire, 
qui est la variable <i>val</i>.

42
00:02:43,080 --> 00:02:49,059
A partir de là, je peux aussi bien 
désigner cette variable par <i>x</i> que par <i>val</i>

43
00:02:49,545 --> 00:02:53,554
Ces deux noms vont désigner 
la même variable.

44
00:02:53,554 --> 00:02:55,821
Attention donc aux confusions, 
aux pièges,

45
00:02:55,821 --> 00:02:58,993
liés au fait qu'une référence 
n'est pas une variable.

46
00:02:58,993 --> 00:03:01,813
C'est juste une étiquette 
sur une variable.

47
00:03:01,813 --> 00:03:04,713
Par exemple, au piège lié au signe <i>=</i>

48
00:03:05,690 --> 00:03:08,346
Comparons deux bouts de code, 
ici assez similaires

49
00:03:08,346 --> 00:03:12,987
où l'on a une variable <i>i</i> initialisée à 3

50
00:03:12,987 --> 00:03:19,592
et où l'on a dans un cas une référence <i>j</i>
qui est une référence, un alias, sur <i>i</i>,

51
00:03:19,592 --> 00:03:22,895
et dans l'autre cas, ici, 
une seconde variable <i>j</i>

52
00:03:23,260 --> 00:03:24,768
Qu'est-ce qu'il va se passer ?

53
00:03:24,768 --> 00:03:28,231
Dans les deux cas, 
nous avons une variable <i>i</i>

54
00:03:28,231 --> 00:03:32,753
qui est initialisée 
et qui contient la valeur 3.

55
00:03:32,753 --> 00:03:39,373
Dans le cas de la référence nous avons,
par ailleurs, en plus une référence <i>j</i>

56
00:03:39,637 --> 00:03:41,664
c'est à dire un autre nom 
pour la même variable,

57
00:03:41,664 --> 00:03:44,510
au même endroit en mémoire.

58
00:03:44,510 --> 00:03:49,826
Alors que dans le cas de droite, 
nous avons ici une variable <i>j</i>

59
00:03:49,826 --> 00:03:55,034
et donc une seconde variable 
est très différent.

60
00:03:55,034 --> 00:03:59,241
Dans ce cas là, ce qui va se passer, c'est
qu'on initialise <i>j</i> avec la valeur de <i>i</i>.

61
00:03:59,241 --> 00:04:03,140
On copie la valeur de <i>i</i> dans <i>j</i>.

62
00:04:03,294 --> 00:04:06,341
Alors que dans le cas de gauche, 
dans le cas des références,

63
00:04:06,471 --> 00:04:10,077
c'est le même objet, 
la même variable qui est référencée.

64
00:04:10,407 --> 00:04:14,791
Ça a pour conséquence
que si on affecte 4 à i

65
00:04:15,342 --> 00:04:18,703
dans le cas de la référence, 
ce qu'il va se passer,

66
00:04:18,703 --> 00:04:23,907
c'est que à la fois <i>i</i> et <i>j</i>
vont avoir la valeur 4.

67
00:04:23,907 --> 00:04:26,062
J vaudra aussi 4.

68
00:04:26,062 --> 00:04:30,735
Alors que dans le cas de droite, 
ici nous avons juste <i>i</i>,

69
00:04:30,735 --> 00:04:34,330
la copie ayant été effectuée, 
cette flèche n'a plus lieu d'être.

70
00:04:34,729 --> 00:04:35,816
La copie est terminée.

71
00:04:36,251 --> 00:04:39,569
C'est donc seulement <i>i</i>, 
<i>i</i> et lui seul, qui vaut 4.

72
00:04:39,569 --> 00:04:43,020
<i>j</i> continue à avoir une valeur 3.

73
00:04:43,450 --> 00:04:49,555
De même si on modifie <i>j</i>, 
dans le cas de la référence,

74
00:04:49,555 --> 00:04:54,040
modifier <i>j</i> revient à modifier aussi <i>i</i>.

75
00:04:54,555 --> 00:04:58,718
Donc ici si je modifie <i>j</i>
alors <i>i</i> vaut aussi 6.

76
00:04:58,718 --> 00:05:02,347
Alors que dans le cas de deux variables
complètement différentes,

77
00:05:02,347 --> 00:05:10,975
si je modifie <i>j</i> alors <i>i</i> n'est pas modifié 
et <i>i</i> vaut toujours 4.

78
00:05:12,247 --> 00:05:15,390
Deuxième petit piège, avec lequel 
on a souvent des confusions,

79
00:05:15,397 --> 00:05:17,377
c'est le sens de <i>const</i>.

80
00:05:17,377 --> 00:05:19,977
on avait déjà insisté plusieurs fois 
sur le fait que <i>const</i> voulait dire

81
00:05:20,202 --> 00:05:22,530
qu'au travers de l'objet 
qu'on a qualifié de <i>const</i>

82
00:05:22,530 --> 00:05:24,193
on ne pouvait pas le modifier.

83
00:05:24,193 --> 00:05:26,742
Mais cet objet pouvait être 
par ailleurs modifié.

84
00:05:26,742 --> 00:05:29,263
C'est le cas avec des références.

85
00:05:29,263 --> 00:05:33,091
Regardons ici toujours avec un entier <i>i</i>

86
00:05:33,091 --> 00:05:35,975
qui est initialisé à la valeur 3.

87
00:05:35,975 --> 00:05:43,958
On déclare ici une <i>const</i> référence sur <i>i</i>

88
00:05:44,245 --> 00:05:47,295
que l'on appelle <i>j</i>.
C'est à dire que l'on a défini

89
00:05:47,295 --> 00:05:51,348
ici un autre nom, un autre drapeau, 
une autre étiquette.

90
00:05:51,348 --> 00:05:55,841
Au travers de cette étiquette,
je vais la dessiner plus grasse,

91
00:05:55,841 --> 00:06:00,209
on n'a pas le droit de modifier le contenu.

92
00:06:00,859 --> 00:06:03,714
Ça ne veut pas dire que le contenu 
ne peut pas être modifié par ailleurs.

93
00:06:04,134 --> 00:06:07,842
Si je veux modifier le contenu de 
cette même variable en mémoire

94
00:06:07,842 --> 00:06:10,478
qui s'appelle i et j, par exemple,

95
00:06:10,478 --> 00:06:12,349
par une affectation en voulant mettre 12.

96
00:06:12,349 --> 00:06:15,795
Je ne pourrais pas. Cette ligne va être 
interdite par le compilateur.

97
00:06:15,795 --> 00:06:19,449
Elle est interdite parce que, ici, 
<i>j</i> est <i>const</i>,

98
00:06:19,466 --> 00:06:22,377
c'est à dire qu'au travers de <i>j</i>
je n'ai pas le droit de modifier.

99
00:06:22,626 --> 00:06:26,589
Cela n'empêche pas qu'au travers de <i>i</i>
je peux modifier cet espace mémoire

100
00:06:26,743 --> 00:06:29,658
et j'ai tout à fait le droit de faire : 
<i>i = 12</i>

101
00:06:29,658 --> 00:06:32,651
ce qui va me mettre 12 
dans la case mémoire <i>i</i>

102
00:06:32,651 --> 00:06:35,600
qui est aussi 
la case mémoire qui s'appelle <i>j</i>.

103
00:06:35,600 --> 00:06:38,758
<i>j</i> vaut aussi 12.

104
00:06:39,457 --> 00:06:43,183
Tout ça pour récapituler, il faut 
bien faire attention que le mot clé,

105
00:06:43,659 --> 00:06:47,818
le mot réservé <i>const</i> s'applique à l'objet,

106
00:06:47,818 --> 00:06:50,338
au nom dont on parle et pas forcément

107
00:06:50,338 --> 00:06:52,459
à l'objet en mémoire qui est derrière.

108
00:06:52,459 --> 00:06:55,882
Ça s'applique à l'objet au travers de ce nom

109
00:06:55,882 --> 00:06:59,146
et non pas à l'objet 
en tant que tel dans l'absolu.

110
00:06:59,486 --> 00:07:01,253
J'ai dit dans la séquence d'introduction

111
00:07:01,253 --> 00:07:03,308
que les références 
n'étaient pas des vrais pointeurs

112
00:07:03,308 --> 00:07:05,579
en tant que tel, 
ce sont des objets assez séparés.

113
00:07:05,579 --> 00:07:08,433
C'est pour ça, d'ailleurs, qu'elles ont 
un nom séparé qu'on appelle référence.

114
00:07:08,637 --> 00:07:12,730
Je voudrais donc insister 
sur les spécificités de ces références.

115
00:07:13,151 --> 00:07:16,806
La première de ces spécificités, 
c'est qu'une référence doit absolument

116
00:07:16,806 --> 00:07:19,080
toujours être initialisée.

117
00:07:19,088 --> 00:07:21,469
Elle désigne toujours un objet existant.

118
00:07:21,474 --> 00:07:24,630
Alors qu'un pointeur pourrait pointer 
vers quelque chose qui n'existe pas.

119
00:07:24,897 --> 00:07:29,727
Ici, j'ai déclaré de nouveau une variable <i>i</i>
de type entier,

120
00:07:29,727 --> 00:07:36,011
et ici je déclare une référence <i>ri</i>
sur l'objet, la variable <i>i</i>

121
00:07:36,011 --> 00:07:38,501
C'est à dire que 
c'est un autre nom pour <i>i</i>.

122
00:07:38,501 --> 00:07:41,708
Mais je ne peux pas déclarer 
une référence <i>rj</i>

123
00:07:41,708 --> 00:07:43,545
qui ne serait liée à aucun objet.

124
00:07:43,545 --> 00:07:44,672
Ceci est invalide.

125
00:07:44,672 --> 00:07:46,173
C'est une référence de quoi ?

126
00:07:46,346 --> 00:07:48,396
On ne sait pas vers 
quoi c'est une référence.

127
00:07:48,396 --> 00:07:52,054
On n'a pas le droit de déclarer 
des références qui ne réfèrent rien.

128
00:07:52,054 --> 00:07:53,622
Ça perdrait tout son sens.

129
00:07:54,022 --> 00:07:58,205
De la même façon, une référence 
ne peut être liée qu'à un seul objet.

130
00:07:58,515 --> 00:08:00,831
C'est aussi une grosse différence 
par rapport aux pointeurs.

131
00:08:00,831 --> 00:08:03,792
Je reprends notre exemple 
avec notre variable <i>i</i>.

132
00:08:03,792 --> 00:08:08,235
Ici, une référence <i>ri</i>
qui référence cette variable i

133
00:08:08,235 --> 00:08:13,262
Ici, je déclare une autre variable <i>j</i>
que j'initialise à 2.

134
00:08:13,730 --> 00:08:17,794
Je ne peux pas utiliser <i>ri</i>
qui est une référence vers <i>i</i>.

135
00:08:17,794 --> 00:08:21,016
Elle a déjà été utilisée. 
Elle référence un objet <i>i</i>.

136
00:08:21,016 --> 00:08:23,806
Je ne peux pas déplacer 
l'étiquette vers <i>j</i>.

137
00:08:23,806 --> 00:08:28,917
Si je faisais le dessin, 
j'ai la variable <i>i</i> qui contient une valeur,

138
00:08:28,917 --> 00:08:32,086
on ne sait pas laquelle, 
ça n'a pas été initialisé.

139
00:08:32,966 --> 00:08:36,784
Je lui ai attaché la référence <i>ri</i>.

140
00:08:39,487 --> 00:08:42,111
Puis j'ai déclaré une autre variable <i>j</i>

141
00:08:42,763 --> 00:08:44,817
que j'ai initialisée à 2.

142
00:08:46,196 --> 00:08:52,887
Je ne peux pas déplacer une référence, 
ça n'est pas possible.

143
00:08:53,333 --> 00:08:55,323
On n'a pas le droit 
de faire ce genre de chose.

144
00:08:55,547 --> 00:09:00,765
Et pourtant la ligne, ici, <i>ri = j</i> compile.

145
00:09:00,765 --> 00:09:03,147
Elle est tout à fait licite en C++.

146
00:09:03,147 --> 00:09:04,964
Qu'est-ce que ça fait à ce moment là ?

147
00:09:04,964 --> 00:09:08,453
Revenons aux fondamentaux, <i>ri</i>,
qu'est-ce que c'est ?

148
00:09:08,453 --> 00:09:10,459
C'est un autre nom pour <i>i</i>.

149
00:09:10,459 --> 00:09:14,086
C'est donc comme si j'avais écrit <i>i = j</i>

150
00:09:15,008 --> 00:09:17,480
Si j'avais écrit <i>i = j</i>, 
qu'est-ce qu'il se passe ?

151
00:09:17,596 --> 00:09:23,077
On recopie la valeur de <i>j</i> dans <i>i</i>
et donc ici, de la même façon,

152
00:09:23,077 --> 00:09:27,291
on va recopier la valeur de <i>j</i> dans <i>ri</i>.

153
00:09:27,291 --> 00:09:31,963
Donc, cette ligne ici, <i>ri = j</i>,
ne veut pas du tout dire,

154
00:09:31,963 --> 00:09:36,948
qu'on déplace l'étiquette de <i>ri</i> vers <i>j</i> et 
qu'on a une autre référence vers l'objet <i>j</i>

155
00:09:36,948 --> 00:09:40,012
mais veut dire que l'on fait 
une copie de l'objet <i>j</i>

156
00:09:40,012 --> 00:09:45,260
vers l'objet dont un des
noms possibles est <i>ri</i>.

157
00:09:45,539 --> 00:09:51,246
La preuve, si je modifie la valeur de <i>j</i>,
par exemple si je lui mets la valeur 3,

158
00:09:51,246 --> 00:09:56,804
alors à ce moment là et 
si j'affiche ensuite ici la valeur de <i>i</i>

159
00:09:57,350 --> 00:09:59,459
vous allez voir que ça va afficher...

160
00:09:59,638 --> 00:10:01,843
Je vous encourage à tester 
ce programme de votre côté.

161
00:10:02,073 --> 00:10:03,403
Vous allez voir que ça affiche 2.

162
00:10:03,403 --> 00:10:07,812
2 parce que c'est bien la valeur 
à laquelle on a affecté la variable,

163
00:10:07,812 --> 00:10:10,901
qui s'appelle et à la fois <i>i</i>
et à la fois <i>ri</i>.

164
00:10:11,601 --> 00:10:16,254
Troisième spécificité des références, 
on ne peut pas référencer une référence.

165
00:10:16,254 --> 00:10:18,873
Une référence, 
ça n'est pas un objet en mémoire.

166
00:10:18,873 --> 00:10:21,935
C'est juste une étiquette de plus 
sur un objet en mémoire.

167
00:10:21,935 --> 00:10:27,064
Donc on ne peut pas prendre l'adresse, 
on ne peut pas référencer un tel objet.

168
00:10:27,064 --> 00:10:30,972
Si je reprends de nouveau notre exemple 
avec une variable <i>i</i>

169
00:10:30,972 --> 00:10:36,897
que j'initialise à la valeur 3,
et dont j'affecte un autre nom.

170
00:10:36,897 --> 00:10:42,756
Je prends une référence que j'appelle <i>ri</i>
que je donne sur <i>i</i>.

171
00:10:42,756 --> 00:10:44,979
L'idée serait de se dire, 
est-ce que je peux prendre

172
00:10:44,979 --> 00:10:46,967
une référence sur la référence <i>ri</i> ?

173
00:10:46,967 --> 00:10:49,882
Eh bien non. <i>ri</i> n'est pas un objet en tant que tel.

174
00:10:49,882 --> 00:10:54,995
On n'a pas le droit de dire qu'on prend 
une référence sur une référence.

175
00:10:54,995 --> 00:10:58,236
Ceci ne prend pas de référence sur <i>ri</i>
comme le ferait des pointeurs,

176
00:10:58,236 --> 00:11:00,803
mais en fait sur i, sur la variable <i>i</i>.

177
00:11:00,803 --> 00:11:04,908
Même si cette ligne compile 
et fait, en fait, de <i>ri(i)</i>

178
00:11:04,908 --> 00:11:06,733
une autre référence sur <i>i</i>.

179
00:11:06,733 --> 00:11:09,700
Elle ne fait pas 
ce qu'on aurait voulu au début.

180
00:11:09,700 --> 00:11:13,844
Ce qu'on voulait expliquer 
de référence sur l'étiquette ri elle même.

181
00:11:13,844 --> 00:11:17,298
En plus, même si je changeais le type, 
en disant que je veux

182
00:11:17,298 --> 00:11:19,715
une référence sur une référence.

183
00:11:19,779 --> 00:11:21,372
On n'a pas non plus le droit.

184
00:11:21,617 --> 00:11:23,952
C'est tout aussi faux, 
puisque cette étiquette <i>ri</i>

185
00:11:24,155 --> 00:11:25,328
n'a pas d'existence propre.

186
00:11:25,550 --> 00:11:27,865
Ça n'est pas une variable 
en tant que telle en mémoire.

187
00:11:27,865 --> 00:11:33,109
<i>ri</i>, c'est juste un autre nom 
sur une variable qui existait déjà.

188
00:11:33,109 --> 00:11:35,270
La conséquence de tout ceci,

189
00:11:35,270 --> 00:11:37,347
c'est qu'on ne peut pas faire 
de tableau de référence.

190
00:11:37,495 --> 00:11:40,572
On ne peut pas mettre les références 
elles-mêmes dans un tableau.

191
00:11:40,779 --> 00:11:45,465
Une remarque avancée cependant, 
il faut savoir que la syntaxe <i>int&&</i>

192
00:11:45,465 --> 00:11:47,294
avec deux signes &

193
00:11:47,294 --> 00:11:51,059
existe depuis C++2011 mais ça n'est pas
du tout une référence de référence.

194
00:11:51,401 --> 00:11:54,758
C'est une notion beaucoup plus avancée
introduite dans cette nouvelle norme

195
00:11:54,758 --> 00:11:58,881
qui veut dire une référence 
sur une partie droite d'affectation.

196
00:11:58,881 --> 00:12:00,693
Ce qui nous emmènerait 
beaucoup trop loin

197
00:12:00,693 --> 00:12:03,090
et qui ne sera pas du tout 
abordé dans ce cours.
