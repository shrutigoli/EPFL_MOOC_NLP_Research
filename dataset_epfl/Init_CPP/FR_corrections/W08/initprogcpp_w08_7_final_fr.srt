1
00:00:05,197 --> 00:00:07,011
Nous sommes arrivés à ce stade
presqu'au terme

2
00:00:07,011 --> 00:00:08,662
de notre étude de cas du « Puissance 4 ».

3
00:00:08,662 --> 00:00:10,940
Nous savons faire jouer
en alternance les deux joueurs,

4
00:00:10,940 --> 00:00:12,718
tester si un joueur a gagné.

5
00:00:12,718 --> 00:00:15,598
Il nous reste maintenant à peaufiner
un petit peu le programme principal,

6
00:00:15,598 --> 00:00:18,358
pour indiquer notamment
aux deux joueurs, qui a gagné

7
00:00:18,358 --> 00:00:20,783
et pour faire face
aux situations de match nul.

8
00:00:20,783 --> 00:00:22,581
C'est l'objet de notre
séquence d'aujourd'hui.

9
00:00:22,861 --> 00:00:26,415
Pour rappel, notre jeu de « Puissance 4 »
tel qu'on le connait jusqu'ici,

10
00:00:26,415 --> 00:00:30,997
c'est faire jouer en boucle deux joueurs,
le joueur 'X' qui joue les pions jaunes,

11
00:00:31,867 --> 00:00:34,140
et le joueur 'O' qui joue les pions rouges.

12
00:00:34,880 --> 00:00:36,715
Ces deux joueurs jouent en alternance.

13
00:00:36,915 --> 00:00:39,879
C'est-à-dire qu'à la fin
de chaque itération de la boucle,

14
00:00:39,879 --> 00:00:44,086
nous garantissons que la couleur du joueur
alterne entre le jaune et le rouge.

15
00:00:44,086 --> 00:00:47,120
Et les deux joueurs jouent jusqu'à ce que
l'un des deux ait gagné.

16
00:00:47,810 --> 00:00:50,358
Il nous reste cependant à finir
un petit peu ce programme.

17
00:00:50,358 --> 00:00:53,634
La première chose naturelle à faire est,
lorsque la boucle a terminé son exécution,

18
00:00:53,634 --> 00:00:55,833
ce qui signifie que l'un ou l'autre
des joueurs à gagné,

19
00:00:55,833 --> 00:00:59,487
de signaler qui a effectivement
gagné la partie de « Puissance 4 ».

20
00:00:59,867 --> 00:01:02,353
Une seconde chose à faire
est de considérer

21
00:01:02,353 --> 00:01:04,541
la situation où aucun
des deux joueurs n'a gagné,

22
00:01:04,541 --> 00:01:06,258
ce qui n'est pas couvert
dans le cas actuel,

23
00:01:06,258 --> 00:01:08,419
et qui ne correspond pas
à une situation très réaliste.

24
00:01:08,419 --> 00:01:10,416
Nous allons nous occuper
de ceci maintenant.

25
00:01:10,876 --> 00:01:12,036
Commençons par faire en sorte

26
00:01:12,036 --> 00:01:14,194
que notre programme indique
quel est le joueur gagnant,

27
00:01:14,194 --> 00:01:17,165
donc après la boucle, nous devons ajouter
un certain nombre d'instructions,

28
00:01:17,165 --> 00:01:20,956
qui consistent naturellement à tester
la couleur du joueur courant,

29
00:01:20,956 --> 00:01:23,287
et si cette couleur est jaune par exemple,

30
00:01:23,637 --> 00:01:26,933
afficher que le joueur gagnant
est le joueur rouge.

31
00:01:26,933 --> 00:01:30,355
Alors pourquoi le joueur rouge ici
et non pas le joueur jaune ?

32
00:01:30,355 --> 00:01:33,671
Eh bien pour rappel,
à la fin de l'itération de la boucle,

33
00:01:33,671 --> 00:01:35,931
nous alternons d'un joueur à l'autre,

34
00:01:35,931 --> 00:01:40,170
et donc si la couleur du joueur courant
est la couleur jaune,

35
00:01:40,170 --> 00:01:43,352
ceci signifie que le joueur
qui a remporté la partie,

36
00:01:44,392 --> 00:01:47,338
était celui de la couleur
alternative, donc le rouge ;

37
00:01:47,338 --> 00:01:50,056
et donc ça signifie que c'est
effectivement bien le rouge qui a gagné

38
00:01:50,056 --> 00:01:52,103
dans le cas où on a alterné
à la couleur jaune.

39
00:01:52,643 --> 00:01:54,945
Ce qui explique la raison
pour laquelle nous indiquons ici

40
00:01:54,945 --> 00:01:56,746
que si la couleur du joueur
courant est jaune,

41
00:01:56,746 --> 00:01:59,059
c'est le joueur rouge
qui a effectivement gagné.

42
00:02:00,119 --> 00:02:04,985
Et pareil, nous couvrons la situation
où c'est le joueur jaune qui a gagné.

43
00:02:05,515 --> 00:02:08,802
Et nous avons ainsi couvert
les deux cas possibles.

44
00:02:09,052 --> 00:02:13,921
Nous prenons la précaution de commenter
ce test un petit peu particulier,

45
00:02:13,921 --> 00:02:15,491
donc en indiquant qu'effectivement on a

46
00:02:15,491 --> 00:02:19,085
au préalable changé
la couleur du joueur courant,

47
00:02:19,085 --> 00:02:22,841
ce qui explique la nature un petit peu
contre-intuitive de ce test.

48
00:02:24,771 --> 00:02:27,449
Alors comme indiqué
en introduction de cette séquence,

49
00:02:27,449 --> 00:02:28,930
il existe aussi des situations

50
00:02:28,930 --> 00:02:30,870
où les deux joueurs vont jouer
l'un après l'autre

51
00:02:30,870 --> 00:02:34,086
et vont remplir totalement la grille
sans que l'un ou l'autre n'ait gagné ;

52
00:02:34,086 --> 00:02:36,490
ce qui va correspondre à
une situation de match nul.

53
00:02:36,490 --> 00:02:38,719
Il nous faut donc parer
à cette situation également ;

54
00:02:38,719 --> 00:02:42,699
et donc sortir de la boucle,
si l'un des deux a gagné

55
00:02:42,699 --> 00:02:44,385
ou si la grille est pleine.

56
00:02:45,345 --> 00:02:47,312
Donc nous devons compléter notre code,

57
00:02:47,312 --> 00:02:49,625
de sorte à ce que ce cas
soit également couvert.

58
00:02:49,625 --> 00:02:52,916
Si nous ne couvrons pas ce cas,
le programme aura un comportement erroné,

59
00:02:52,916 --> 00:02:56,850
qui fera que, une fois la grille remplie,
le programme va tourner en boucle,

60
00:02:56,850 --> 00:02:59,924
en demandant sans cesse au même joueur
d'indiquer un numéro de colonne à jouer

61
00:02:59,924 --> 00:03:01,646
alors que la grille
est complètement remplie

62
00:03:01,646 --> 00:03:03,735
et qu'il n'est plus possible
de placer aucun jeton.

63
00:03:03,735 --> 00:03:07,450
Ceci correspond bien sûr à une situation
erronée à laquelle il faut remédier.

64
00:03:07,620 --> 00:03:09,425
Donc les modifications
à apporter au programme

65
00:03:09,425 --> 00:03:11,549
pour parer à cette situation,
sont assez naturelles.

66
00:03:11,549 --> 00:03:13,729
Donc nous devons indiquer
que nous itérons,

67
00:03:13,729 --> 00:03:17,362
que nous continuons à boucler dans le cas
où aucun des deux joueurs n'a gagné,

68
00:03:17,362 --> 00:03:21,496
ce qui est déjà testé,
et tant que la grille n'est pas pleine,

69
00:03:21,496 --> 00:03:24,643
ce qui peut s'écrire
naturellement de cette façon.

70
00:03:24,643 --> 00:03:28,181
Donc nous anticipons l'existence
d'une fonction « plein »

71
00:03:28,361 --> 00:03:31,315
qui va tester si la grille
est pleine ou non.

72
00:03:32,035 --> 00:03:34,717
Ceci présuppose que l'on apporte aussi
quelques modifications

73
00:03:34,717 --> 00:03:36,210
après l'exécution de la boucle.

74
00:03:36,210 --> 00:03:38,169
En effet à ce stade-là,

75
00:03:38,169 --> 00:03:40,991
nous n'aurons plus à la sortie
de la boucle une situation unique

76
00:03:40,991 --> 00:03:42,979
où fatalement l'un ou l'autre
des joueurs a gagné,

77
00:03:42,979 --> 00:03:44,756
mais il peut y avoir également

78
00:03:44,756 --> 00:03:47,058
une situation de match nul
qu'il faudra signaler.

79
00:03:47,058 --> 00:03:51,100
Donc il faut prévoir de modifier
le programme de sorte à ce que,

80
00:03:51,100 --> 00:03:54,761
si il y a effectivement un gagnant,
alors effectivement ici,

81
00:03:54,761 --> 00:03:57,946
nous sommes dans la situation
où il faut signaler quel est le gagnant,

82
00:03:57,946 --> 00:03:59,928
mais ça n'est pas fatalement le cas,

83
00:03:59,928 --> 00:04:02,150
il peut y avoir la situation
où il n'y a pas de gagnant,

84
00:04:02,992 --> 00:04:06,325
et à ce moment là, il faut indiquer
qu'il y a match nul.

85
00:04:06,325 --> 00:04:08,841
Et nous avons ainsi couvert
l'ensemble des situations possibles.

86
00:04:09,421 --> 00:04:12,020
Passons maintenant au codage
de la fonction « plein ».

87
00:04:12,062 --> 00:04:15,614
Donc pour rappel, le programme va demander
en alternance au joueur jaune

88
00:04:15,614 --> 00:04:19,833
et au joueur rouge, sur quelle colonne
il veut placer son jeton.

89
00:04:19,833 --> 00:04:22,089
Supposons que la main
soit au joueur jaune,

90
00:04:22,089 --> 00:04:26,641
si par exemple il décide d'introduire
un jeton à la première colonne,

91
00:04:26,641 --> 00:04:28,964
eh bien ce remplissage va se faire
toujours de bas en haut,

92
00:04:28,964 --> 00:04:32,438
c'est-à-dire que nous allons mettre
automatiquement le jeton

93
00:04:32,438 --> 00:04:36,205
sur la première case disponible,
en partant du bas.

94
00:04:36,995 --> 00:04:40,859
Ceci a pour conséquence
que pour tester si la grille est pleine,

95
00:04:40,859 --> 00:04:44,588
il n'est pas nécessaire de tester
l'intégralité des cases de la grille ;

96
00:04:44,588 --> 00:04:47,134
pour savoir si elles sont occupées
par une couleur particulière,

97
00:04:47,134 --> 00:04:52,464
il suffit simplement de tester les cases
de la toute première ligne.

98
00:04:52,464 --> 00:04:55,512
En effet, dans le cas
où la grille est pleine,

99
00:04:55,512 --> 00:04:59,012
on aura rempli l'intégralité
des colonnes en partant du bas.

100
00:05:00,652 --> 00:05:03,625
Ce qui signifie que l'ensemble des cases
de la première ligne,

101
00:05:03,625 --> 00:05:05,311
auront également été remplies.

102
00:05:06,271 --> 00:05:08,856
Passons maintenant au codage
effectif de la fonction « plein ».

103
00:05:08,856 --> 00:05:12,096
Donc au niveau méthodologique,
nous nous étions demandé de façon rapide,

104
00:05:12,096 --> 00:05:13,915
parce qu'il s'agit
d'une fonction très simple,

105
00:05:13,915 --> 00:05:17,173
ce qui concerne le « quoi » :
que fait cette fonction « plein » ?

106
00:05:17,173 --> 00:05:22,888
Dans le programme principal,
nous avions prévu que cette fonction,

107
00:05:22,888 --> 00:05:26,055
prendrait en argument la grille
et testerait si elle est pleine ou non.

108
00:05:26,055 --> 00:05:28,414
Ce qui correspond assez naturellement
au prototype suivant :

109
00:05:28,414 --> 00:05:31,960
donc la fonction retourne un « boulean »
indiquant que la grille est pleine ou non,

110
00:05:31,960 --> 00:05:35,061
et prend en paramètre, une grille.

111
00:05:38,351 --> 00:05:39,625
Dans les séquences précédentes,

112
00:05:39,625 --> 00:05:42,673
nous avons vu que pour toutes
les fonctions qui avaient en paramètre,

113
00:05:42,673 --> 00:05:44,670
un objet relativement volumineux,

114
00:05:44,670 --> 00:05:47,531
qui n'était utilisé qu'en lecture,
qu'en consultation,

115
00:05:47,531 --> 00:05:48,829
qu'on ne veut pas modifier,

116
00:05:48,829 --> 00:05:52,892
il était judicieux de faire un passage
par référence constante.

117
00:05:52,892 --> 00:05:55,546
Nous reprenons exactement
ici cette précaution.

118
00:05:55,546 --> 00:05:59,294
Ici la fonction « plein » a pour vocation
de consulter le contenu

119
00:05:59,294 --> 00:06:02,537
de certaines cases de la grille,
pour savoir si elles sont remplies ou non,

120
00:06:02,537 --> 00:06:04,704
et n'a pas pour vocation
de modifier la grille.

121
00:06:04,704 --> 00:06:07,066
Et c'est la raison pour laquelle
nous faisons également ici,

122
00:06:07,066 --> 00:06:08,879
un passage par référence constante.

123
00:06:09,709 --> 00:06:11,084
Passons maintenant au « comment ».

124
00:06:11,084 --> 00:06:14,377
Comment va effectivement s'écrire le corps
de cette fonction « plein » ?

125
00:06:14,377 --> 00:06:18,104
Nous avons esquissé l'algorithme
dans le transparent précédent,

126
00:06:18,884 --> 00:06:23,972
à savoir que si on trouve une case vide
sur la première ligne,

127
00:06:23,972 --> 00:06:27,036
alors nous savons que la grille
n'est pas encore remplie.

128
00:06:27,036 --> 00:06:29,449
Et c'est ce que nous allons
concrètement coder.

129
00:06:29,449 --> 00:06:34,460
Nous allons itérer sur chacune des cases
de la première ligne de la grille,

130
00:06:34,460 --> 00:06:36,528
« grille[0] », et tester.

131
00:06:36,528 --> 00:06:41,512
Si la case est vide, alors nous savons
que la grille n'est pas pleine

132
00:06:41,512 --> 00:06:43,367
et c'est ce que la fonction
« plein » va retourner.

133
00:06:43,367 --> 00:06:47,161
Sinon, eh bien naturellement,
la grille est pleine,

134
00:06:47,161 --> 00:06:50,119
et à ce moment-là,
nous retournons la valeur « true »,

135
00:06:50,119 --> 00:06:51,973
pour indiquer que la grille est pleine.

136
00:06:51,973 --> 00:06:55,376
Voilà, nous avons ainsi terminé le codage
de notre petite application

137
00:06:55,376 --> 00:06:56,563
du « Puissance 4 ».

138
00:06:56,563 --> 00:06:59,576
Le but de cette étude de cas était
de vous montrer comment on aborde

139
00:06:59,576 --> 00:07:02,864
la programmation d'une telle application
lorsque l'on débute en programmation.

140
00:07:03,154 --> 00:07:04,925
Plusieurs idées clés à retenir.

141
00:07:04,925 --> 00:07:07,593
La première est :
toujours procéder de bas en haut.

142
00:07:07,593 --> 00:07:10,258
Commencer par identifier
les types essentiels,

143
00:07:10,258 --> 00:07:11,817
les fonctionnalités fondamentales,

144
00:07:11,817 --> 00:07:13,010
avant d'affiner.

145
00:07:13,130 --> 00:07:15,504
Chaque fonction fondamentale
peut elle-même à son tour,

146
00:07:15,504 --> 00:07:18,279
être modularisée, faire appel
à d'autres fonctions ou plus de détails,

147
00:07:18,279 --> 00:07:20,042
qui vont l'aider
à réaliser les traitements.

148
00:07:20,912 --> 00:07:23,626
Pour chacune des fonctions,
toujours procéder avec méthodologie.

149
00:07:23,626 --> 00:07:25,295
Se poser la question du « quoi ».

150
00:07:25,295 --> 00:07:27,342
Quel est le rôle de la fonction
dans le programme ?

151
00:07:27,342 --> 00:07:30,049
De quelles informations elle a besoin
pour pouvoir fonctionner ?

152
00:07:30,049 --> 00:07:32,494
Qu'est-ce qu'elle va livrer
comme information en retour ?

153
00:07:32,494 --> 00:07:34,714
Ensuite, se poser la question du « comment »

154
00:07:34,714 --> 00:07:36,773
et réfléchir à l'algorithme

155
00:07:36,773 --> 00:07:39,059
qui va l'aider à réaliser
les traitements souhaités.

156
00:07:39,529 --> 00:07:42,249
Enfin, se préoccuper
des aspects essentiels

157
00:07:42,249 --> 00:07:45,344
avant de passer à des aspects
plus de cosmétiques, de peaufinage.

158
00:07:45,344 --> 00:07:47,151
Et dernier point essentiel :

159
00:07:47,151 --> 00:07:49,994
être systématique dans le test
des différentes fonctionnalités,

160
00:07:49,994 --> 00:07:54,428
au fur et à mesure que l'on progresse
dans la programmation de l'application.

161
00:07:54,428 --> 00:07:56,828
Voilà c'était un certain nombre
de points clés essentiels

162
00:07:56,828 --> 00:07:59,869
que nous souhaitions illustrer
au travers de cette étude de cas et qui,

163
00:07:59,869 --> 00:08:02,787
nous l'espérons, vous seront utiles
lorsque vous aborderez par vous-même,

164
00:08:03,357 --> 00:08:05,535
la programmation de telles applications.
