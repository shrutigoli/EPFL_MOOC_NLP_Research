1
00:00:05,755 --> 00:00:08,322
Continuons donc sur le chemin difficile

2
00:00:08,322 --> 00:00:10,786
de la programmation
de notre jeu puissance 4

3
00:00:10,786 --> 00:00:12,863
où à ce stade nous avons de quoi

4
00:00:12,863 --> 00:00:14,504
représenter le jeu : la « Grille »,

5
00:00:14,504 --> 00:00:16,624
de quoi représenter
les couleurs des joueurs ;

6
00:00:16,624 --> 00:00:19,912
nous avons de quoi initialiser
le jeu et l'afficher,

7
00:00:19,912 --> 00:00:22,429
et enfin nous avons une fonction
un peu plus complexe

8
00:00:22,429 --> 00:00:24,522
qui nous permet de jouer un pion

9
00:00:24,522 --> 00:00:27,019
dans le jeu, si tant est

10
00:00:27,019 --> 00:00:28,976
que le coup indiqué est valide.

11
00:00:28,976 --> 00:00:30,323
Mais à ce stade là,

12
00:00:30,323 --> 00:00:32,635
nous ne sommes toujours pas capable
de effectivement jouer.

13
00:00:32,635 --> 00:00:34,909
Donc, essayons de jouer.

14
00:00:35,509 --> 00:00:37,960
Pour cela, essayons d'écrire
une méthode « main »

15
00:00:37,960 --> 00:00:40,104
qui nous permet effectivement de jouer.

16
00:00:40,104 --> 00:00:41,743
Donc on commence comme d'habitude :

17
00:00:41,743 --> 00:00:43,746
« int main » et puis le corps du « main »

18
00:00:43,746 --> 00:00:46,172
et commençons donc bien sûr
par définir un jeu

19
00:00:46,172 --> 00:00:48,382
c'est-à-dire ...une grille,

20
00:00:48,400 --> 00:00:50,318
que l'on va initialiser ;

21
00:00:50,318 --> 00:00:51,928
tout ceci est normal,

22
00:00:51,928 --> 00:00:54,046
et puis au départ bien sûr
il faut la montrer aux joueurs

23
00:00:54,046 --> 00:00:55,798
donc on va aussi l'afficher.

24
00:00:55,798 --> 00:00:57,604
Voila, que faisons nous ensuite ?

25
00:00:57,604 --> 00:00:59,302
Nous avons besoin d'un joueur

26
00:00:59,302 --> 00:01:01,199
on va donc le représenter par une couleur.

27
00:01:01,199 --> 00:01:04,280
Donc pour ça on va commencer
par déclarer une variable [de type] « Couleur »

28
00:01:04,280 --> 00:01:06,388
qui sera la couleur du joueur courant.

29
00:01:06,388 --> 00:01:10,046
Et on va l'initialiser,
donc par exemple à « jaune ».

30
00:01:10,526 --> 00:01:12,189
Qu'est ce que l'on veut faire ensuite ?

31
00:01:12,189 --> 00:01:14,846
Ce que l'on veut faire c'est bien sûr
se faire dérouler le jeu,

32
00:01:14,846 --> 00:01:16,921
tant que l'on peut jouer,

33
00:01:16,921 --> 00:01:18,553
et donc, une boucle-

34
00:01:18,553 --> 00:01:22,175
est ce que ici c'est une boucle « while »
ou une boucle « do-while » ?

35
00:01:22,175 --> 00:01:24,889
Est ce qu'on va commencer
par tester quelque chose ?

36
00:01:24,889 --> 00:01:27,225
Ou est ce qu'on va commencer par jouer ?

37
00:01:27,225 --> 00:01:29,008
Ici toutes les conditions sont bonnes

38
00:01:29,008 --> 00:01:31,623
le jeu est initialisé, on a un joueur

39
00:01:31,623 --> 00:01:33,583
donc on peut commencer par jouer

40
00:01:33,583 --> 00:01:35,630
et donc ça va être une boucle « do-while ».

41
00:01:35,630 --> 00:01:37,035
Donc on écrit notre « do »,

42
00:01:37,035 --> 00:01:39,184
et puis, qu'est ce qu'on va faire
dans cette boucle ?

43
00:01:39,184 --> 00:01:40,886
La première chose à faire, bien sûr,

44
00:01:40,886 --> 00:01:44,323
c'est de demander au joueur
de nous indiquer un coup.

45
00:01:44,530 --> 00:01:47,088
Commençons donc par afficher
un message au joueur

46
00:01:47,088 --> 00:01:49,929
pour lui indiquer qu'on attend
qu'il nous entre un coups,

47
00:01:49,929 --> 00:01:52,805
et dans ce message indiquons même
la couleur du joueur

48
00:01:52,805 --> 00:01:56,790
Pour ça on pourrait utiliser
une fonction « affiche_joueur » ;

49
00:01:56,790 --> 00:01:59,265
mais je vais ici l'écrire directement

50
00:01:59,265 --> 00:02:01,832
pour qu'on voit concrètement
de quoi il s'agit.

51
00:02:01,832 --> 00:02:06,808
Donc, si la couleur du joueur est jaune
alors je vais afficher :

52
00:02:06,808 --> 00:02:09,594
« joueur jaune entre un coup »

53
00:02:09,594 --> 00:02:12,667
et sinon, si c'est donc le joueur rouge

54
00:02:12,667 --> 00:02:15,747
j'affiche que c'est le joueur
avec la convention donc rouge,

55
00:02:15,747 --> 00:02:17,347
c'est-à-dire 'O'

56
00:02:17,347 --> 00:02:19,914
qui doit rentrer un coup

57
00:02:19,914 --> 00:02:21,815
c'est-à-dire, un numéro de colonne.

58
00:02:21,815 --> 00:02:24,930
Ensuite on va donc bien sûr
devoir saisir sa réponse

59
00:02:24,930 --> 00:02:28,224
donc pour ça, on va déclarer
par exemple, une colonne

60
00:02:28,224 --> 00:02:30,664
donc une variable de type « size_t »

61
00:02:30,664 --> 00:02:32,742
puisqu'on l'utilisera
pour indexer notre grille,

62
00:02:32,742 --> 00:02:34,722
dans laquelle donc on récupère

63
00:02:34,722 --> 00:02:37,710
la réponse du joueur,

64
00:02:37,920 --> 00:02:41,269
et il ne faut pas oublier que
les joueurs vont jouer

65
00:02:41,269 --> 00:02:44,878
entre 1 et 7, alors que nous,
nous jouons,

66
00:02:44,878 --> 00:02:48,505
puisqu'en C++ ces tableaux
sont indexés entre 0 et 6.

67
00:02:48,505 --> 00:02:51,424
Donc pour ça il faut
absolument décrémenter,

68
00:02:51,424 --> 00:02:54,077
soustraire 1 à colonne.

69
00:02:54,885 --> 00:02:58,454
Maintenant qu'on a un numéro de colonne
qui nous a été fourni par le joueur

70
00:02:58,454 --> 00:03:01,706
on peut le jouer en utilisant donc
la fonction « joue »

71
00:03:01,706 --> 00:03:05,020
que l'on avait développée
dans les vidéos précédentes.

72
00:03:05,028 --> 00:03:06,767
Donc pour ça on déclare un booléen « valide »

73
00:03:06,767 --> 00:03:08,451
qui va tester la validité du coup

74
00:03:08,451 --> 00:03:10,978
et on appelle, donc ici,

75
00:03:10,978 --> 00:03:14,904
la fonction « joue » dans
l'initialisation du booléen.

76
00:03:15,775 --> 00:03:18,823
Voila donc peut être
un petit commentaire sur cette ligne

77
00:03:18,823 --> 00:03:22,057
donc ici on déclare une variable « valide »

78
00:03:22,057 --> 00:03:24,362
de type booléen qu'on initialise

79
00:03:24,362 --> 00:03:27,990
directement avec la valeur
de retour de l'appel

80
00:03:27,990 --> 00:03:29,945
donc de notre fonction joue

81
00:03:29,945 --> 00:03:31,347
à laquelle je vous rappelle

82
00:03:31,347 --> 00:03:34,213
on passait la grille, la colonne,
ici qu'on vient de déclarer

83
00:03:34,213 --> 00:03:36,081
et la couleur du joueur courant.

84
00:03:36,081 --> 00:03:39,353
Donc comme cette fonction teste
si le coup a été valide

85
00:03:39,353 --> 00:03:43,059
et on a récupéré ça ici
dans la variable « valide »,

86
00:03:43,059 --> 00:03:45,035
il faut bien sûr
bien en informer le joueur

87
00:03:45,035 --> 00:03:46,962
si le coup n'était pas valide

88
00:03:46,962 --> 00:03:48,989
et donc pour ça si 'not valid'

89
00:03:48,989 --> 00:03:51,413
alors on affiche un message

90
00:03:51,413 --> 00:03:53,489
prévenant le joueur.

91
00:03:54,623 --> 00:03:59,086
Une fois le coup joué
ou alors, le joueur averti du fait

92
00:03:59,086 --> 00:04:01,402
que son coup n'était pas valide,
dans tout les cas,

93
00:04:01,402 --> 00:04:03,230
on affiche à nouveau le jeu

94
00:04:03,230 --> 00:04:06,905
pour que le joueur voit
de quoi il s'agit, et puis,

95
00:04:06,905 --> 00:04:09,190
décalons un peu tout ça,

96
00:04:09,190 --> 00:04:12,007
on va pouvoir maintenant passer
à l'autre joueur,

97
00:04:12,007 --> 00:04:13,405
donc tout simplement si,

98
00:04:13,405 --> 00:04:16,509
la couleur du joueur courant est jaune,

99
00:04:16,509 --> 00:04:19,954
alors la couleur du joueur courant
doit devenir rouge.

100
00:04:20,424 --> 00:04:22,304
Et sinon bien sûr, donc « else »

101
00:04:22,304 --> 00:04:26,076
c'est que la couleur du joueur courant
doit être jaune.

102
00:04:26,076 --> 00:04:29,052
Là, encore une fois
ce petit bout de code ici,

103
00:04:29,052 --> 00:04:31,953
exactement comme l'affichage
précédent tout à l'heure,

104
00:04:31,953 --> 00:04:34,610
on aurait pu en faire une fonction

105
00:04:34,610 --> 00:04:38,372
qui s’appellerait par exemple
alterne joueur

106
00:04:38,372 --> 00:04:41,092
mais ici c'est suffisamment 
simple dans ce « main »

107
00:04:41,092 --> 00:04:43,146
je voulais donc vous montrer

108
00:04:43,146 --> 00:04:45,862
globalement comment
on pouvait organiser le jeu.

109
00:04:45,862 --> 00:04:48,956
Voila donc à ce stade
on a demandé un coup au joueur,

110
00:04:48,956 --> 00:04:50,872
récupéré sa réponse,

111
00:04:50,872 --> 00:04:53,493
on a testé la validité du coup,
si il était valide

112
00:04:53,493 --> 00:04:57,167
on a joué effectivement le pion
dans la grille,

113
00:04:57,167 --> 00:04:59,620
si il n'était pas valide
on a averti le joueur.

114
00:04:59,620 --> 00:05:01,543
Dans tout les cas, on a affiché le jeu

115
00:05:01,543 --> 00:05:04,246
et on a inversé donc
les couleurs des joueurs,

116
00:05:04,246 --> 00:05:06,060
donc on a terminé un tour de jeu

117
00:05:06,060 --> 00:05:09,606
ce qui fait que on peut maintenant
finir notre boucle do-while

118
00:05:09,606 --> 00:05:13,140
qui nous permet donc d'alterner
les tours de jeux.

119
00:05:13,147 --> 00:05:16,474
La question c'est maintenant,
quel test mettre ici

120
00:05:16,474 --> 00:05:20,869
pour cette condition d'arrêt de jeu.

121
00:05:20,869 --> 00:05:23,613
Je vais laisser ça
pour l'instant en suspens

122
00:05:23,613 --> 00:05:26,699
puisque ça sera l'objet
de la prochaine séquence vidéo

123
00:05:26,699 --> 00:05:29,984
donc à ce stade je vais simplement
laisser un blanc.

124
00:05:30,194 --> 00:05:32,471
Ce qui termine notre version
presque complète,

125
00:05:32,471 --> 00:05:34,289
il manque juste ce test ici

126
00:05:34,289 --> 00:05:37,362
qui termine donc la version
presque complète du jeu.

127
00:05:38,152 --> 00:05:41,180
À ce stade on peut maintenant critiquer
un peu ce que l'on a fait,

128
00:05:41,180 --> 00:05:43,177
et essayer d’améliorer notre code.

129
00:05:43,177 --> 00:05:45,288
Ce qui ce passe ici, c'est que le « main »

130
00:05:45,288 --> 00:05:46,825
est beaucoup trop grand, puisque, vous voyez,

131
00:05:46,825 --> 00:05:48,547
il ne tient même pas sur un transparent

132
00:05:48,547 --> 00:05:51,613
qui est bien une preuve
que la fonction « main » est trop grande.

133
00:05:51,613 --> 00:05:53,800
Donc il va falloir,
ce qu'on appelle « modulariser »,

134
00:05:53,800 --> 00:05:56,677
essayer de mettre des petits bouts
dans des fonctions.

135
00:05:56,677 --> 00:05:58,393
Et donc je vous propose ici

136
00:05:58,393 --> 00:06:02,624
de regrouper tout ceci
dans une fonction

137
00:06:02,624 --> 00:06:04,723
parce que, qu'est ce que c'es
que cette partie ?

138
00:06:04,723 --> 00:06:07,418
C'est la partie où
vous demandez au joueur

139
00:06:07,418 --> 00:06:09,991
de rentrer un coup.

140
00:06:10,471 --> 00:06:12,718
On testait la validité

141
00:06:12,718 --> 00:06:14,305
et on jouait ce coup,

142
00:06:14,305 --> 00:06:18,604
et si le coup n'était pas valide
on avertissait le joueur.

143
00:06:18,604 --> 00:06:21,360
Tout ceci correspond donc bien
à une fonctionnalité

144
00:06:21,360 --> 00:06:23,149
donc on peut mettre ça dans une fonction,

145
00:06:23,149 --> 00:06:27,837
et on pourrait la nommer, par exemple
« demande_et_joue ».

146
00:06:27,967 --> 00:06:30,767
C'est un exemple
de modularisation possible,

147
00:06:30,767 --> 00:06:32,807
il y en a évidement plusieurs autres

148
00:06:32,807 --> 00:06:36,439
et si vous voulez, vous pouvez créer
vos propres modularisations.

149
00:06:36,439 --> 00:06:38,360
Ce qui compte c'est
donc d'identifier les concepts

150
00:06:38,360 --> 00:06:40,217
et surtout donc de décomposer

151
00:06:40,217 --> 00:06:43,652
pour pouvoir rendre le code
beaucoup plus modulaire,

152
00:06:43,652 --> 00:06:46,243
beaucoup plus lisible
et beaucoup plus maintenable

153
00:06:46,243 --> 00:06:48,318
de façon indépendante.

154
00:06:48,318 --> 00:06:50,981
Donc revenons à la méthodologie
sur les fonctions,

155
00:06:50,981 --> 00:06:54,197
si on a identifié comme ça
un bout de code qui est,

156
00:06:54,197 --> 00:06:56,954
soit répété, pas de copier coller,

157
00:06:56,954 --> 00:06:59,890
soit important en soi,
qui est notre cas ici.

158
00:06:59,890 --> 00:07:02,680
Ce qu'on commence par faire, donc
on veut le mettre dans une fonction

159
00:07:02,680 --> 00:07:05,354
ce qu'on commence par faire c'est donc,
de le couper, simplement.

160
00:07:05,354 --> 00:07:07,590
Donc voila, on a supprimé
toute cette partie du code

161
00:07:07,590 --> 00:07:09,789
et on remplace ce bout de code

162
00:07:09,789 --> 00:07:13,626
donc par un appel
à notre fonction « demande_et_joue ».

163
00:07:13,626 --> 00:07:15,067
Donc, qu'est ce qu'elle va
devoir recevoir ?

164
00:07:15,067 --> 00:07:16,457
Bien sûr, le jeu, la grille

165
00:07:16,457 --> 00:07:18,209
la couleur du joueur courant

166
00:07:18,229 --> 00:07:20,230
et cela devrait suffire
pour cette fonction.

167
00:07:20,460 --> 00:07:22,981
Passons donc maintenant
à l'écriture de cette fonction.

168
00:07:22,981 --> 00:07:25,306
Je vous ai mis ici
en commentaire pour rappel

169
00:07:25,306 --> 00:07:27,897
comment on faisait appel à cette fonction.

170
00:07:27,897 --> 00:07:30,185
Donc la fonction « demande_et_joue »

171
00:07:30,185 --> 00:07:33,092
on l'appelle directement,
donc son type de retour

172
00:07:33,092 --> 00:07:34,861
ça sera « void »,

173
00:07:34,861 --> 00:07:36,609
elle s'appelle « demande_et_joue ».

174
00:07:36,609 --> 00:07:38,797
Ensuite elle va recevoir donc, une grille,

175
00:07:38,797 --> 00:07:40,788
qu'on avait définie de type « Grille ».

176
00:07:41,008 --> 00:07:42,692
Est ce que la grille est modifiée ?

177
00:07:42,692 --> 00:07:45,490
Oui, donc « demande_et_joue »
va permettre de jouer dans la grille

178
00:07:45,490 --> 00:07:47,165
donc la grille est modifiée

179
00:07:47,165 --> 00:07:49,481
donc on doit faire
un passage par référence.

180
00:07:49,921 --> 00:07:51,771
Et ensuite on passe la couleur du joueur,

181
00:07:51,771 --> 00:07:53,614
est ce que la couleur 
du joueur est modifiée ?

182
00:07:53,614 --> 00:07:55,317
La réponse est clairement non.

183
00:07:55,317 --> 00:07:57,697
Donc un passage par valeur suffit ici.

184
00:07:57,697 --> 00:08:02,156
Voila donc, le prototype
de cette fonction « demande_et_joue »,

185
00:08:02,446 --> 00:08:04,925
on peut maintenant passer à son corps
et là c'est tout simple,

186
00:08:04,925 --> 00:08:08,138
il suffit simplement de recoller
tout le bout de code

187
00:08:08,138 --> 00:08:10,657
qu'on avait supprimé du « main ».

188
00:08:10,657 --> 00:08:13,427
À ce stade là, lorsque vous pratiquez
ce genre d’exercices,

189
00:08:13,427 --> 00:08:16,012
il est bon un,
de relire votre code pour vérifier

190
00:08:16,012 --> 00:08:18,110
si vous n'avez rien oublié,
pas fait d'erreur.

191
00:08:18,110 --> 00:08:21,361
Deux, le compiler, parce que peut être
vous auriez pu faire des erreurs de noms

192
00:08:21,361 --> 00:08:23,771
par exemple ici on aurait peut être
pu appeler ça « couleur »

193
00:08:23,771 --> 00:08:26,553
au lieu de l'appeler « couleur_joueur »
et donc du coup,

194
00:08:26,553 --> 00:08:29,395
les aspects ici « couleur_joueur »
n'auraient plus compilé.

195
00:08:29,395 --> 00:08:32,342
Et enfin, trois,
tester bien sûr votre fonction.

196
00:08:32,784 --> 00:08:35,409
Continuons dans ce même esprit
de modularisation

197
00:08:35,409 --> 00:08:38,762
et améliorons un peu là,
cette partie là du code.

198
00:08:38,775 --> 00:08:40,690
Donc j'ai déjà mentionné

199
00:08:40,690 --> 00:08:43,333
précédemment dans la vidéo,
qu'on pourrait en faire une fonction,

200
00:08:43,333 --> 00:08:45,715
qui serait du genre « affiche_joueur ».

201
00:08:45,715 --> 00:08:48,046
Mais même ici sans en faire
disons, une fonction,

202
00:08:48,049 --> 00:08:50,530
on peut quand même encore arranger ce code

203
00:08:50,530 --> 00:08:53,660
en regroupant les parties communes,

204
00:08:53,660 --> 00:08:56,552
ne faite jamais de copier coller,
là moi je vois du copier coller,

205
00:08:56,552 --> 00:08:59,587
je vois joueur, qui a été,
ici recopié deux fois,

206
00:08:59,587 --> 00:09:02,718
je vois l'espace,
«  : entrez un numéro de colonne  << endl »

207
00:09:02,718 --> 00:09:04,895
qui a été répété deux fois.

208
00:09:04,895 --> 00:09:08,182
Donc ici on va pouvoir
réarranger un peu ce code,

209
00:09:08,182 --> 00:09:11,192
en commençant donc
par afficher la partie commune.

210
00:09:11,192 --> 00:09:13,550
Donc ici on affiche le message « joueur »

211
00:09:13,550 --> 00:09:16,639
et là je ne mets pas de « endl »
puisque je vais continuer

212
00:09:16,639 --> 00:09:18,893
à vouloir afficher derrière 'X' ou 'O'

213
00:09:18,893 --> 00:09:21,823
et continuer le message,
donc ici il n'y a pas de « endl ».

214
00:09:21,826 --> 00:09:23,636
Ensuite je garde donc le test

215
00:09:23,636 --> 00:09:25,671
qu'il y avait tout à l'heure
sur la couleur,

216
00:09:25,671 --> 00:09:27,632
donc si la couleur du joueur est jaune

217
00:09:27,632 --> 00:09:30,252
j'affiche 'X' si non, j'affiche 'O'.

218
00:09:31,632 --> 00:09:32,940
Et à ce stade là,

219
00:09:32,940 --> 00:09:37,361
c'est cette partie là en fait
qu'on pourrait modulariser

220
00:09:37,362 --> 00:09:40,228
et en faire une fonction qui serait,

221
00:09:40,228 --> 00:09:41,874
« affiche_couleur »  par exemple,

222
00:09:41,874 --> 00:09:43,611
qui afficherait systématiquement donc,

223
00:09:43,611 --> 00:09:46,407
un 'X' si la couleur qu'elle reçoit
en paramètre est jaune

224
00:09:46,407 --> 00:09:49,159
et un 'O' si ce n'est pas le cas.

225
00:09:49,618 --> 00:09:52,789
Terminons donc par l'affichage
de la partie commune

226
00:09:52,789 --> 00:09:55,094
qui suit l'affichage
de la couleur du joueur

227
00:09:55,094 --> 00:09:58,540
donc, ici le message
« entrez un numéro de colonne »

228
00:09:58,540 --> 00:10:00,522
et bien sûr le retour à la ligne.

229
00:10:01,662 --> 00:10:06,226
Terminons en améliorant un autre aspect
cette fois ci, algorithmique,

230
00:10:06,226 --> 00:10:08,336
de notre fonction « demande_et_joue ».

231
00:10:08,336 --> 00:10:11,796
Que se passe-t-il si un joueur
donne un coup invalide ?

232
00:10:11,796 --> 00:10:13,502
Dans la version actuelle

233
00:10:13,502 --> 00:10:15,692
tout ce qui va ce passer, c'est simplement

234
00:10:15,692 --> 00:10:19,292
qu'on va afficher le fait
que le coup est invalide

235
00:10:19,302 --> 00:10:21,122
et puis ensuite on va passer
à l'autre joueur.

236
00:10:21,122 --> 00:10:23,852
Ce qui ne correspond pas
à la vrai réalité du jeu.

237
00:10:23,852 --> 00:10:25,870
Donc pour cela
qu'est ce qu'il faut faire ?

238
00:10:25,870 --> 00:10:28,224
C'est : tant que on reçoit
un coup invalide,

239
00:10:28,224 --> 00:10:29,883
il ne faut pas lâcher le joueur,

240
00:10:29,883 --> 00:10:31,666
il faut continuer à lui redemander.

241
00:10:31,666 --> 00:10:33,817
C'est donc à nouveau une boucle do-while

242
00:10:33,817 --> 00:10:37,278
puisqu'on commence par demander
au joueur d'entrer un coup

243
00:10:37,278 --> 00:10:39,715
puis on vérifie si le coup est valide

244
00:10:39,715 --> 00:10:43,878
et tant que le coup n'est pas valide,
on le redemande.

245
00:10:43,914 --> 00:10:45,619
Donc on a une boucle ici 'do',

246
00:10:45,619 --> 00:10:50,898
sur tout le bloc qui consiste
à demander au joueur d'entrer un coup.

247
00:10:50,916 --> 00:10:53,294
Puis qui vérifie si coup est valide

248
00:10:53,294 --> 00:10:56,326
et enfin, l'informe du fait que
le coup n'était pas valide.

249
00:10:56,326 --> 00:10:58,423
Donc tout ce bloc on le met
ici dans un « while ».

250
00:10:58,423 --> 00:10:59,761
« while » quoi ?

251
00:10:59,761 --> 00:11:03,986
« while » tant que le coup n'est pas valide,
donc « while (not valide) ».

252
00:11:03,988 --> 00:11:08,237
Ce code, cependant ne compile pas
parce que nous avons ici

253
00:11:08,253 --> 00:11:13,774
une utilisation de « valide »
et la portée de « valide »,

254
00:11:13,794 --> 00:11:17,400
qui a été déclaré ici
est ce bloc là.

255
00:11:17,910 --> 00:11:22,685
Donc ici on a une utilisation
de « valide » qui est au-delà de sa portée,

256
00:11:22,685 --> 00:11:24,139
ce qui fait que à ce stade là

257
00:11:24,139 --> 00:11:26,337
le compilateur va nous donner une erreur.

258
00:11:26,337 --> 00:11:28,385
Donc ce qu'il faut faire c'est sortir

259
00:11:28,385 --> 00:11:32,600
la déclaration de « valide »
hors de la boucle.

260
00:11:32,926 --> 00:11:35,790
Donc, par exemple,
ici je la mets tout en haut

261
00:11:35,790 --> 00:11:38,919
ou on pourrait la mettre
juste avant la boucle.

262
00:11:38,919 --> 00:11:40,923
Donc ici, on déclare « valide »

263
00:11:40,923 --> 00:11:45,729
et on pourrait aussi
l'initialiser par exemple, à 'false'.

264
00:11:45,815 --> 00:11:48,263
Il faut aussi bien sûr ici ne pas garder

265
00:11:48,263 --> 00:11:53,550
cette déclaration ici, parce que sinon
on aurait deux variables « valid »,

266
00:11:53,550 --> 00:11:57,460
on aurait une, celle ci,
qui serait de portée locale

267
00:11:57,460 --> 00:12:00,330
ici au bloc contrôlé par le while.

268
00:12:00,330 --> 00:12:05,225
Et on aurait notre autre « valide » ici
de portée le corps de la fonction,

269
00:12:05,241 --> 00:12:07,328
ce qui fait qu’évidemment,
ça ne fonctionnerait pas

270
00:12:07,328 --> 00:12:09,292
donc évidemment ici on change

271
00:12:09,292 --> 00:12:13,868
cette déclaration initialisation
en une affectation.

272
00:12:13,872 --> 00:12:16,362
Voila donc pour notre fonction
« demande_et_joue »

273
00:12:16,362 --> 00:12:18,088
un dernier commentaire cependant,

274
00:12:18,088 --> 00:12:20,165
on aurait bien sûr évidemment pu

275
00:12:20,165 --> 00:12:24,767
mettre l'affichage de la question
dans la boucle do while,

276
00:12:24,767 --> 00:12:27,632
ici c'est une variante, 
c'est-à dire-qu'à chaque fois

277
00:12:27,632 --> 00:12:32,568
qu'on a un coup valide, on ré-affiche
à quel joueur c'est d'entrer le coup ;

278
00:12:32,568 --> 00:12:34,782
alors que dans la version précédente

279
00:12:34,782 --> 00:12:37,688
on fait simplement que répéter
la saisie de sa réponse.

280
00:12:38,474 --> 00:12:41,886
Terminons enfin par un dernier retour
sur la fonction « joue »,

281
00:12:41,886 --> 00:12:44,398
lié à un des quizz des vidéos précédentes.

282
00:12:44,398 --> 00:12:46,843
Le problème de cette version de « joue »

283
00:12:46,843 --> 00:12:50,937
c'est que le numéro de colonne
n'a jamais été vérifié

284
00:12:50,937 --> 00:12:53,947
avant d'accéder ici dans le tableau.

285
00:12:53,947 --> 00:12:57,057
Il n'est pas vérifié
ni dans la fonction « joue » ici,

286
00:12:57,057 --> 00:12:59,977
ni dans la fonction « demande_et_joue »,

287
00:12:59,977 --> 00:13:02,197
ici on fait simplement
que faire confiance

288
00:13:02,197 --> 00:13:05,937
à l'utilisateur et on décrémente
de 1 à 7 la colonne

289
00:13:05,937 --> 00:13:08,627
mais on ne vérifie pas
si il nous a donné, par exemple

290
00:13:08,627 --> 00:13:10,987
100 000 comme numéro de colonne,

291
00:13:10,987 --> 00:13:14,167
et donc, il faut maintenant corriger
notre fonction « joue »

292
00:13:14,187 --> 00:13:19,087
pour garantir que l'accès à la colonne ici
est effectivement valide.

293
00:13:19,087 --> 00:13:20,947
Donc on commence par, comme d'habitude,

294
00:13:20,947 --> 00:13:24,587
mettre le commentaire
et puis ensuite, on l'écrit,

295
00:13:24,587 --> 00:13:28,437
donc si le paramètre « colonne »

296
00:13:28,437 --> 00:13:30,665
est plus grand que la taille de la grille,

297
00:13:30,665 --> 00:13:35,845
alors, le coup n'est pas valide et donc
on « return false » tout simplement

298
00:13:35,845 --> 00:13:38,355
mais il faut penser à systématiquement

299
00:13:38,355 --> 00:13:41,685
vérifier les conditions d'accès
à un tableau.

300
00:13:42,427 --> 00:13:44,507
Ceci termine donc cette séquence vidéo

301
00:13:44,507 --> 00:13:47,347
où nous avons ajouté 3 fonctionnalités
à notre programme,

302
00:13:47,347 --> 00:13:50,697
nous avons demandé au joueur
d'entrer un coup.

303
00:13:50,707 --> 00:13:52,947
Nous avons codé la boucle principale

304
00:13:52,947 --> 00:13:55,277
qui permet de répéter le jeu

305
00:13:55,277 --> 00:13:58,547
et nous avons alterné les 2 joueurs.

306
00:13:58,547 --> 00:14:03,287
Reste, pour terminer complètement le jeu
à terminer la boucle,

307
00:14:03,307 --> 00:14:06,257
donc la condition d’arrêt
qu'on a laissée en blanc dans la boucle

308
00:14:06,257 --> 00:14:08,637
soit que le jeu donc est plein,

309
00:14:08,637 --> 00:14:10,777
soit que l'un des deux joueurs gagne.

310
00:14:10,777 --> 00:14:13,727
Ceci est l'objet de la prochaine
séquence vidéo.
