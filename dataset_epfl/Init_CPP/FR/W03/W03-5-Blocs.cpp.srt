1
00:00:00,000 --> 00:00:07,327
Dans une séquence vidéo précédente, nous
avons

2
00:00:07,327 --> 00:00:11,853
vu comment les structures de contrôle,
c'est à dire les instructions C++ qui

3
00:00:11,853 --> 00:00:16,221
permettent aux données d'influencer, de
choisir, de répéter les traitements

4
00:00:16,221 --> 00:00:18,298
effectués, comment ces structures de

5
00:00:18,298 --> 00:00:21,089
contrôle, justement, utilisaient des
blocs.

6
00:00:21,089 --> 00:00:25,570
Ces blocs vont avoir un impact sur
l'utilisation des variables,

7
00:00:25,570 --> 00:00:28,534
c'est ce que l'on appelle la portée des
variables

8
00:00:28,534 --> 00:00:32,030
et que nous allons étudier donc dans cette
séquence-ci.

9
00:00:32,030 --> 00:00:35,068
En C++, les instructions peuvent donc être
regroupées dans

10
00:00:35,068 --> 00:00:37,920
des blocs et ceci indépendamment de toute
structure de

11
00:00:37,920 --> 00:00:40,786
contrôle; il suffit pour cela d'avoir une
accolade ouvrante

12
00:00:40,786 --> 00:00:43,978
et une accolade fermante qui entourent une
séquence d'instructions.

13
00:00:43,978 --> 00:00:46,412
Par exemple, je peux donc ici commencer un
bloc,

14
00:00:46,412 --> 00:00:50,368
déclarer une variable de type entier qui
s'appelle i,

15
00:00:50,368 --> 00:00:55,573
déclarer une variable de type double qui
s'appelle x, afficher un message pour

16
00:00:55,573 --> 00:01:00,384
pouvoir saisir la réponse de l'utilisateur
pour saisir les valeurs de i et de x,

17
00:01:00,384 --> 00:01:05,890
et puis ensuite donc afficher ce qui a été
saisi sur le terminal;

18
00:01:05,890 --> 00:01:10,416
et tout ceci donc dans un bloc qui est
terminé, ici, par une accolade fermante.

19
00:01:10,416 --> 00:01:12,387
Les blocs en C++ ont vraiment une

20
00:01:12,387 --> 00:01:15,559
très grande autonomie, ils peuvent ainsi
déclarer

21
00:01:15,559 --> 00:01:19,136
leur propres variables locales comme on a
vu précédemment,

22
00:01:19,136 --> 00:01:22,375
ou même dans bloc ici associé à une
instruction if,

23
00:01:22,375 --> 00:01:25,340
on peut tout à fait déclarer une variable,
ici,

24
00:01:25,340 --> 00:01:28,960
j, qui va être utilisée dans le bloc en
question

25
00:01:28,960 --> 00:01:32,040
et cette variable est locale, en ce sens
que

26
00:01:32,040 --> 00:01:34,944
une fois qu'on a terminé le bloc, on ne
peut

27
00:01:34,944 --> 00:01:37,658
plus utiliser j à partir du moment où on

28
00:01:37,658 --> 00:01:40,976
a quitté le bloc dans lequel elle avait
été définie.

29
00:01:40,976 --> 00:01:43,899
Une variable comme ceci qui est définie
dans

30
00:01:43,899 --> 00:01:46,644
un bloc, c'est ce qu'on appelle une
variable

31
00:01:46,644 --> 00:01:49,686
locale, donc la variable j précédemment
est une

32
00:01:49,686 --> 00:01:53,622
variable locale au bloc ici contrôlée par
l'instruction if.

33
00:01:53,622 --> 00:01:57,425
Les variables qui sont déclarées hors de
tout bloc, même y

34
00:01:57,425 --> 00:01:59,905
compris hors du main, on a le droit de
déclarer des

35
00:01:59,905 --> 00:02:02,750
variables comme ça hors de tout bloc, hors
du main, c'est

36
00:02:02,750 --> 00:02:06,390
ce qu'on appelle des variables globales et
je ne vous donnerais

37
00:02:06,390 --> 00:02:10,112
pas d'exemple de variables globales parce
que la règle d'or c'est de

38
00:02:10,112 --> 00:02:14,170
ne jamais déclarer de variables globales,
ne jamais utiliser de variables globales.

39
00:02:14,170 --> 00:02:14,794
Pourquoi?

40
00:02:14,794 --> 00:02:19,362
Parce que une variable globale justement,
est accessible à l'ensemble du

41
00:02:19,362 --> 00:02:23,454
programme, ce qui fait que n'importe
quelle instruction, n'importe où dans le

42
00:02:23,454 --> 00:02:27,370
programme peut, par exemple, modifier
cette variable et donc il devient

43
00:02:27,370 --> 00:02:31,869
extrêmement difficile dans le programme de
suivre la valeur de cette variable,

44
00:02:31,869 --> 00:02:36,620
c'est pour cela qu'il ne faut absolument
jamais utiliser de variables globales.

45
00:02:36,620 --> 00:02:40,542
D'ailleurs on vous conseille aussi de
déclarer les variables au

46
00:02:40,542 --> 00:02:44,082
plus près de leur utilisation, c'est à
dire déclarer, mettre

47
00:02:44,082 --> 00:02:47,294
la ligne de déclaration le plus proche
possible de la

48
00:02:47,294 --> 00:02:50,460
ligne où on va, la première fois, utiliser
la variable.

49
00:02:50,460 --> 00:02:57,141
Par exemple, dans l'exemple du if
précédent, nous avions ici une

50
00:02:57,141 --> 00:03:02,352
variable j que l'on utilisait dans le bloc
d'instructions contrôlé

51
00:03:02,352 --> 00:03:07,397
par le if et nous l'avons donc déclarée
ici dans le bloc correspondant.

52
00:03:07,397 --> 00:03:12,826
Si on n'utilisait pas j dans la partie ici
correspondante, on aurait même pu

53
00:03:12,826 --> 00:03:18,094
déplacer la ligne encore plus près ici,
plus près de son utilisation.

54
00:03:18,094 --> 00:03:22,284
En tout cas, comme j ici, n'est utilisé
que dans le bloc, on suppose qu'on

55
00:03:22,284 --> 00:03:24,670
n'utilise pas j dans le reste du
programme,

56
00:03:24,670 --> 00:03:27,482
là en bas, alors une instruction comme
ceci, qui

57
00:03:27,482 --> 00:03:30,442
déclarerait la variable hors du bloc, ne
suit pas

58
00:03:30,442 --> 00:03:34,249
la recommandation de déclarer au plus près
de l'utilisation

59
00:03:34,249 --> 00:03:36,529
de la variable et on la mettra donc au

60
00:03:36,529 --> 00:03:39,949
plus près de la première instruction qui
utilisera le

61
00:03:39,949 --> 00:03:43,852
j; étant entendu ici que donc j n'est
utilisé

62
00:03:43,852 --> 00:03:47,416
que dans ce bloc et n'est plus utilisé par

63
00:03:47,416 --> 00:03:48,180
la suite.

64
00:03:48,180 --> 00:03:53,020
Cette notion d'endroit où on utilise la
variable, d'endroit où on peut utiliser la

65
00:03:53,020 --> 00:03:56,818
variable, a un nom et c'est ce que l'on
appelle la notion de portée.

66
00:03:56,818 --> 00:04:00,030
La portée d'une variable c'est l'ensemble
des lignes de

67
00:04:00,030 --> 00:04:03,705
code où la variable est accessible, où
l'on peut l'utiliser.

68
00:04:03,705 --> 00:04:05,225
Prenons un exemple.

69
00:04:05,225 --> 00:04:09,755
Nous avons ici deux instructions if
imbriquées l'une dans l'autre,

70
00:04:09,755 --> 00:04:12,555
chacune ayant donc son propre bloc, le
bloc ici de

71
00:04:12,555 --> 00:04:17,616
la première instruction if et puis le bloc
de la seconde instruction if qui

72
00:04:17,616 --> 00:04:23,015
arrive ici et nous avons donc la
déclaration d'une variable j, ici,

73
00:04:23,015 --> 00:04:26,535
qui est déclarée dans le bloc de la
première instruction if, que l'on

74
00:04:26,535 --> 00:04:32,210
va pouvoir utiliser dans l'ensemble du
bloc ici, où elle a été déclarée.

75
00:04:32,210 --> 00:04:36,520
Donc on va pouvoir utiliser j à cet
endroit-là, on peut l'utiliser encore ici.

76
00:04:36,520 --> 00:04:37,768
On pourrait encore

77
00:04:37,768 --> 00:04:41,434
l'utiliser tout à fait dans ce bloc-là,
mais une fois qu'on a

78
00:04:41,434 --> 00:04:45,373
quitté le bloc en question, on ne peut
plus ici, utiliser j.

79
00:04:45,373 --> 00:04:48,961
De la même façon, on va déclarer une
variable ici

80
00:04:48,961 --> 00:04:52,623
k, plus près de son utilisation, qui va
être dans

81
00:04:52,623 --> 00:04:55,921
son bloc, ici et là on peut utiliser dans
ce

82
00:04:55,921 --> 00:04:59,950
bloc la variable k et on ne pourra plus
l'utiliser après.

83
00:04:59,950 --> 00:05:02,925
On va dire que la portée de k c'est le
bloc ici

84
00:05:02,925 --> 00:05:06,520
dans lequel elle est définie et que la
portée de

85
00:05:06,520 --> 00:05:10,520
j c'est le bloc ici dans lequel elle a été
définie.

86
00:05:10,520 --> 00:05:15,256
En C++, on va pouvoir avoir des variables
de même nom mais de portée différente.

87
00:05:15,256 --> 00:05:17,480
Il va donc falloir fixer des règles

88
00:05:17,480 --> 00:05:20,640
pour pouvoir savoir de quelle variable on
parle.

89
00:05:20,640 --> 00:05:24,440
C'est ce que l'on appelle les règles de
résolution de portée.

90
00:05:24,440 --> 00:05:27,991
La règle de résolution de portée en C++
est très simple, c'est qu'on

91
00:05:27,991 --> 00:05:31,341
résout à la portée la plus proche.
Qu'est-ce que cela veut dire?

92
00:05:31,341 --> 00:05:32,440
Prenons un exemple.

93
00:05:32,440 --> 00:05:36,725
On a deux blocs, ici un bloc contrôlé par
une première instruction if

94
00:05:36,725 --> 00:05:42,150
de plus haut niveau, dans laquelle on
déclare une variable j, que je vais

95
00:05:42,150 --> 00:05:47,844
appeler j premier ou j rouge, ici, et puis
on a un deuxième bloc, ici, contrôlé

96
00:05:47,844 --> 00:05:53,186
par exemple par une deuxième instruction
if, ici, dans lequel on déclare

97
00:05:53,186 --> 00:05:56,254
aussi une variable j de même nom.

98
00:05:56,254 --> 00:05:58,180
En soi, c'est pas une très bonne idée et

99
00:05:58,180 --> 00:06:00,208
je vous déconseille de faire ce genre de
choses

100
00:06:00,208 --> 00:06:02,080
dans vos programmes, mais on l'a fait ici
pour

101
00:06:02,080 --> 00:06:04,916
illustrer le propos, on a donc déclaré,
ici une

102
00:06:04,916 --> 00:06:08,180
deuxième variable j, appelons-la j 2 ou j
bleu,

103
00:06:08,180 --> 00:06:10,740
la portée de ce j est donc l'ensemble des

104
00:06:10,740 --> 00:06:14,719
lignes de code où elle est définie,
déclarée, utilisable,

105
00:06:14,719 --> 00:06:18,439
c'est le bloc donc dans lequel elle a été
déclarée.

106
00:06:18,439 --> 00:06:23,650
La portée du j de plus haut niveau, c'est
l'ensemble des lignes de code où

107
00:06:23,650 --> 00:06:28,750
il est utilisable et c'est donc le bloc
complet, ici de plus haut niveau.

108
00:06:28,750 --> 00:06:32,221
On a donc, ici dans le bloc le plus
profond, dans le

109
00:06:32,221 --> 00:06:36,623
bloc bleu, un nom j, qui est utilisé mais
de façon ambiguë.

110
00:06:36,623 --> 00:06:40,280
Est-ce que, il réfère au j de plus haut
niveau, ou

111
00:06:40,280 --> 00:06:44,215
est-ce qu'il réfère au j ici, du bloc de
deuxième niveau?

112
00:06:44,215 --> 00:06:47,445
En C++ les règles de résolution de portée
fait

113
00:06:47,445 --> 00:06:50,714
qu'on résout à la portée la plus proche et
donc

114
00:06:50,714 --> 00:06:54,458
le j ici, réfère le j correspondant au
bloc le

115
00:06:54,458 --> 00:06:58,410
plus proche, au bloc dans lequel il a été
défini.

116
00:06:58,410 --> 00:07:03,730
J, qui serait déclaré plus haut ici, est
parfaitement utilisable,

117
00:07:03,730 --> 00:07:09,050
mais il est caché dans ce bloc, on ne peut
pas en parler dans le bloc ici,

118
00:07:09,050 --> 00:07:12,518
il ne réapparaitra que à la fin du bloc
qui

119
00:07:12,518 --> 00:07:17,690
a déclaré un j bleu ici qui masque le j
rouge.

120
00:07:17,690 --> 00:07:21,155
Ceci donc pour illustrer les règles de
résolution de portée en C++.

121
00:07:21,155 --> 00:07:25,175
Mais peut-être ce qu'il faut avant tout
retenir de cette explication c'est

122
00:07:25,175 --> 00:07:29,095
qu'il ne faut jamais utiliser plusieurs
fois le même nom de variable.

123
00:07:29,095 --> 00:07:30,560
Evitez toute ambiguïté.

124
00:07:30,560 --> 00:07:34,041
J'ai l'habitude de dire qu'on n'écrit pas
des programmes pour les machines,

125
00:07:34,041 --> 00:07:36,696
sinon on continuerait à écrire en
assembleur comme au

126
00:07:36,696 --> 00:07:39,253
tout début, mais on écrit dans des
langages évolués

127
00:07:39,253 --> 00:07:42,090
avant tout pour les humains, pour écrire
des programmes

128
00:07:42,090 --> 00:07:45,384
qui sont compréhensibles, maintenables,
que l'on peut corriger et

129
00:07:45,384 --> 00:07:48,612
transmettre vers des humains et donc dans
cet esprit-là,

130
00:07:48,612 --> 00:07:52,488
évitez toute ambiguïté dans vos programmes
et essayez d'être

131
00:07:52,488 --> 00:07:55,215
au maximum le plus clair possible et donc
ne

132
00:07:55,215 --> 00:07:58,390
nommez pas des choses différentes avec le
même nom.

133
00:07:58,390 --> 00:07:59,446
Un cas particulier

134
00:07:59,446 --> 00:08:02,680
de portée qu'il faut connaître, c'est la
portée des variables

135
00:08:02,680 --> 00:08:06,429
qui sont déclarées dans une boucle
itérative, dans un for.

136
00:08:06,429 --> 00:08:10,940
Ici dans la boucle for, nous avons déclaré
une variable i.

137
00:08:10,940 --> 00:08:13,365
La portée de ce i va donc être le

138
00:08:13,365 --> 00:08:17,910
bloc contrôlé par l'instruction for, ainsi
bien sûr que la

139
00:08:17,910 --> 00:08:21,960
partie condition et la partie
incrémentation du for, mais la

140
00:08:21,960 --> 00:08:24,637
portée de ce i n'ira pas plus loin donc
que

141
00:08:24,637 --> 00:08:28,444
ce for, à partir de cet endroit-là on ne
peut plus utiliser

142
00:08:28,444 --> 00:08:32,454
cette variable i, cette variable i est
locale à la boucle for.

143
00:08:32,454 --> 00:08:36,150
Terminons donc maintenant par une exemple
à ne pas suivre

144
00:08:36,150 --> 00:08:39,034
si vous suivez le conseil de ne pas nommer
avec le

145
00:08:39,034 --> 00:08:42,570
même nom deux choses qui sont différentes,
mais juste pour voir

146
00:08:42,570 --> 00:08:46,810
si vous avez bien compris les règles de
résolution de portée.

147
00:08:46,810 --> 00:08:49,696
Donc ici on a un programme complet, dans
le

148
00:08:49,696 --> 00:08:54,475
main on déclare ici une variable i de type
entier que l'on initialise à la

149
00:08:54,475 --> 00:08:58,910
valeur cent vingt et puis on a ensuite une
boucle for, ici, qui va itérer pour

150
00:08:58,910 --> 00:09:02,403
un i qui va de zéro jusqu'à cinq et on
affiche donc la valeur de

151
00:09:02,403 --> 00:09:07,385
i dans la boucle, on affiche la valeur de
i ici, à la fin du programme.

152
00:09:07,385 --> 00:09:10,600
La question c'est qu'affiche le programme?

153
00:09:10,600 --> 00:09:14,818
Déroulons donc le programme pas à pas.
Tout d'abord nous déclarons ici

154
00:09:14,818 --> 00:09:19,267
donc une variable que l'on appelle i et
que l'on initialise à la

155
00:09:19,267 --> 00:09:24,290
valeur cent vingt.
Ensuite nous entrons dans la boucle, qui

156
00:09:24,290 --> 00:09:30,090
déclare ici une autre variable i qu'on
initialise à la valeur zéro.

157
00:09:30,090 --> 00:09:31,404
On teste la condition.

158
00:09:31,404 --> 00:09:34,825
Est-ce que i est inférieur à cinq?
De quell i s'agit-il ici?

159
00:09:34,825 --> 00:09:39,560
Il s'agit bien du i de la boucle,
c'est-à-dire de ce i ici,

160
00:09:39,560 --> 00:09:45,080
donc cette valeur zéro est bien inférieure
à cinq, donc effectivement on

161
00:09:45,080 --> 00:09:51,170
rentre dans la boucle et on affiche ici la
valeur de i.

162
00:09:51,170 --> 00:09:52,610
Quel i une fois de plus?

163
00:09:52,610 --> 00:09:58,626
Le i ici, résolution à la portée la plus
proche, c'est le i de la boucle, c'est à

164
00:09:58,626 --> 00:10:04,849
dire ce i, ici et donc la ligne en
question va nous afficher ici,

165
00:10:04,849 --> 00:10:08,416
la valeur zéro.
Puis on arrive donc à

166
00:10:08,416 --> 00:10:11,966
l'exécution de l'incrément.
A nouveau ici,

167
00:10:11,966 --> 00:10:15,614
de quel i s'agit-il?
Il s'agit, résolution de la portée la plus

168
00:10:15,614 --> 00:10:23,072
proche du i de la boucle, de nouveau et
donc c'est ce i ici, qui va passer à

169
00:10:23,072 --> 00:10:30,324
un, à la valeur un par le i++ qui est là.
Ensuite donc on re-teste la condition,

170
00:10:30,324 --> 00:10:33,717
donc on arrive ici pour re-tester la
condition.

171
00:10:33,717 --> 00:10:36,643
Est-ce que ce i, est inférieur à cinq?

172
00:10:36,643 --> 00:10:36,970
Oui.

173
00:10:36,970 --> 00:10:42,116
Donc on refait l'affichage et on affiche
donc, la valeur, cette

174
00:10:42,116 --> 00:10:46,462
fois-ci toujours du i de la boucle, mais
qui vaut maintenant donc

175
00:10:46,462 --> 00:10:51,234
la valeur un, puis on incrémente toujours
ce même i, qui va

176
00:10:51,234 --> 00:10:55,750
donc passer à la valeur deux, ce qui fait
que la condition

177
00:10:55,750 --> 00:10:59,590
qu'on va tester va toujours être vraie et
donc

178
00:10:59,590 --> 00:11:04,103
on va ici, de nouveau, afficher cette
valeur deux.

179
00:11:04,103 --> 00:11:07,295
Et ainsi de suite, donc deux, trois,
quatre.

180
00:11:07,295 --> 00:11:10,360
Qu'est-ce qu'il se passe quand maintenant
ce i vaut quatre?

181
00:11:10,360 --> 00:11:15,980
Quand ce i vaut quatre on arrive à
l'instruction incrémentation ici, qui le

182
00:11:15,980 --> 00:11:20,670
fait passer à cinq, donc on arrive à cinq.
On teste la condition.

183
00:11:20,670 --> 00:11:24,780
La condition cette fois-ci est fausse
puisque i ici, n'est pas

184
00:11:24,780 --> 00:11:28,890
strictement inférieur à cinq, cinq n'est
pas strictement inférieur à cinq.

185
00:11:28,890 --> 00:11:32,416
La condition étant fausse, on termine la
boucle et

186
00:11:32,416 --> 00:11:35,310
on arrive donc ici à la fin de la boucle.

187
00:11:35,310 --> 00:11:41,570
Ensuite donc on exécute l'instruction qui
suit la boucle et on va afficher un i.

188
00:11:41,570 --> 00:11:46,021
La question c'est quel est ce i?
En fonction des règles de résolution

189
00:11:46,021 --> 00:11:51,520
de portée, ce i c'est le i principal, le i
du niveau dans lequel on est ici, puisque

190
00:11:51,520 --> 00:11:54,400
je vous rappelle que le i de la boucle

191
00:11:54,400 --> 00:11:59,050
ici, a une portée qui est réduite à la
boucle.

192
00:11:59,050 --> 00:12:04,982
Ce i ici a une portée qui est réduite à la
boucle, il n'existe plus à partir d'ici.

193
00:12:04,982 --> 00:12:11,265
Et donc le i dont on parle ici, dans le
bloc main, c'est bien le i de départ ce

194
00:12:11,265 --> 00:12:17,986
qui fait que donc, le dernier affichage va
être cent vingt.

