1
00:00:05,330 --> 00:00:08,670
Dans cette dernière leçon, nous allons
voir comment aborder un projet

2
00:00:08,670 --> 00:00:11,778
plus ambitieux que ceux que nous avons
considérés jusqu'ici ;

3
00:00:11,778 --> 00:00:13,329
c'est-à-dire comment décomposer

4
00:00:13,329 --> 00:00:17,459
ce projet en sous problèmes,
plus faciles à résoudre,

5
00:00:17,459 --> 00:00:20,869
jusqu'à ce que l'on sache 
écrire le programme final.

6
00:00:20,869 --> 00:00:23,029
Alors, pour illustrer nos propos

7
00:00:23,030 --> 00:00:25,249
nous avons choisi un jeu de « puissance 4 ».

8
00:00:25,248 --> 00:00:28,439
Vous connaissez sans doute 
les règles du « puissance 4 ».

9
00:00:28,439 --> 00:00:30,219
Ça se joue à deux joueurs,

10
00:00:30,219 --> 00:00:34,030
avec une grille de 7 colonnes 
ayant 6 cases chacune.

11
00:00:34,030 --> 00:00:37,010
Chaque joueur laisse tomber tour à tour

12
00:00:37,009 --> 00:00:41,238
un pion de sa couleur
dans la colonne de son choix,

13
00:00:41,238 --> 00:00:46,349
jusqu'à ce que un joueur réussisse
à aligner 4 pions de sa couleur

14
00:00:46,349 --> 00:00:48,979
ou que la grille 
soit complètement remplie.

15
00:00:49,770 --> 00:00:51,809
Tout d'abord une précision :
nous n'allons pas

16
00:00:51,809 --> 00:00:53,788
développer une jolie 
interface graphique.

17
00:00:53,789 --> 00:00:55,629
Ce qui nous intéresse ici

18
00:00:55,628 --> 00:00:59,119
c'est que notre programme suive
la mécanique du jeu

19
00:00:59,119 --> 00:01:03,449
et nous allons nous contenter d'un
affichage de la grille et des pions

20
00:01:03,450 --> 00:01:09,700
avec des caractères, c'est-à-dire
quelque chose qui ressemblerait à ceci.

21
00:01:10,180 --> 00:01:12,649
De façon générale, 
comment devez-vous procéder

22
00:01:12,649 --> 00:01:16,459
quand vous êtes face à un problème
un peu conséquent tel que celui-ci ?

23
00:01:16,459 --> 00:01:20,179
Surtout il ne faut pas essayer d'écrire
tout le programme en une seule fois !

24
00:01:20,180 --> 00:01:21,790
Vous n'allez pas vous en sortir.

25
00:01:21,790 --> 00:01:25,940
Il faut savoir décomposer
le problème en sous-problèmes

26
00:01:25,939 --> 00:01:28,399
pour écrire le programme par étapes.

27
00:01:28,400 --> 00:01:32,650
Et à chaque étape, il faut
tester le code que vous aurez écrit

28
00:01:32,650 --> 00:01:35,140
pour continuer sur des bases solides.

29
00:01:35,750 --> 00:01:39,718
Tout d'abord, il faut identifier les
types nécessaires

30
00:01:39,718 --> 00:01:42,039
pour que le programme puisse fonctionner,
c'est-à-dire,

31
00:01:42,039 --> 00:01:46,918
pour pouvoir représenter les
données dont le programme a besoin.

32
00:01:47,299 --> 00:01:50,269
Dans le cas de notre exemple il s'agit
essentiellement

33
00:01:50,269 --> 00:01:52,450
de pouvoir représenter la grille.

34
00:01:52,450 --> 00:01:56,940
Ensuite, il faudra identifier les
fonctions qui portent sur ces types,

35
00:01:56,959 --> 00:02:00,828
écrire ces fonctions et les tester
au fur et à mesure,

36
00:02:00,828 --> 00:02:04,529
et enfin quand une fonction
est difficile à écrire,

37
00:02:04,530 --> 00:02:06,390
et bien on peut introduire

38
00:02:06,390 --> 00:02:09,937
une fonction pour chacun
des points un peu difficiles.

39
00:02:10,527 --> 00:02:13,248
J'ai dit qu'il fallait commencer
par identifier le type,

40
00:02:13,248 --> 00:02:14,738
alors qu'est-ce que ça veut dire

41
00:02:14,739 --> 00:02:19,669
et bien on va commencer par identifier
les données dont a besoin le programme ;

42
00:02:19,669 --> 00:02:22,649
et trouver comment représenter
ces données.

43
00:02:22,649 --> 00:02:25,419
En l'occurrence, pour 
notre programme de « puissance 4 »,

44
00:02:25,419 --> 00:02:29,489
la donnée principale est la grille
et les pions qu'elle contient.

45
00:02:29,500 --> 00:02:34,739
Plus exactement, on veut savoir
pour chaque case ce que contient la case,

46
00:02:34,739 --> 00:02:38,188
Est-ce que c'est un pion rouge
ou un pion jaune

47
00:02:38,188 --> 00:02:39,968
ou alors, rien du tout ?

48
00:02:40,669 --> 00:02:43,589
Il y a plusieurs façons possibles
de représenter la grille.

49
00:02:43,589 --> 00:02:47,209
Alors une façon de faire,
c'est de voir la grille comme

50
00:02:47,209 --> 00:02:49,869
étant faite de lignes

51
00:02:50,479 --> 00:02:52,709
où chaque élément de la ligne

52
00:02:52,709 --> 00:02:55,378
correspond à une case.

53
00:02:55,378 --> 00:02:57,738
C'est-à-dire qu'on va
représenter les lignes

54
00:02:57,739 --> 00:02:59,269
comme des tableaux.

55
00:02:59,269 --> 00:03:03,449
Alors il y a plusieurs possiblités
pour représenter des tableaux en C++.

56
00:03:03,449 --> 00:03:06,979
Je rappelle qu'on peut utiliser
soit le type « array »,

57
00:03:06,979 --> 00:03:09,699
soit le type « vector ».

58
00:03:10,299 --> 00:03:14,480
Ici, comme on sait à l'avance
le nombre de cases,

59
00:03:14,479 --> 00:03:17,778
plus exactement d'éléments
possibles pour notre ligne,

60
00:03:17,778 --> 00:03:18,859
c'est-à-dire,

61
00:03:18,859 --> 00:03:22,389
on sait que chaque ligne
aura 7 éléments,

62
00:03:22,390 --> 00:03:26,989
on va plutôt utiliser le type « array »
pour représenter une ligne.

63
00:03:27,968 --> 00:03:33,028
Pour stocker l'ensemble des lignes
on peut utiliser encore une fois un tableau

64
00:03:33,329 --> 00:03:39,899
dont chacun des éléments va contenir
une des lignes de la grille,

65
00:03:39,908 --> 00:03:43,009
et comme le nombre de lignes
est connu à l'avance,

66
00:03:43,009 --> 00:03:45,108
-- une grille de « puissance 4 »
a toujours 6 lignes --

67
00:03:45,108 --> 00:03:48,298
là encore, on va utiliser le type « array ».

68
00:03:49,498 --> 00:03:52,778
Le type qui va me permettre de
représenter une grille de « puissance 4 »

69
00:03:52,778 --> 00:03:56,112
et ce qu'elle contient est donc
un tableau de tableaux

70
00:03:56,112 --> 00:03:57,566
ou plus exactement

71
00:03:57,566 --> 00:04:02,780
un tableau à 6 éléments dont chacun des
éléments est lui-même de type tableau

72
00:04:02,780 --> 00:04:07,038
à 7 éléments, et correspond
à une ligne de la grille.

73
00:04:07,038 --> 00:04:10,979
Alors il me reste à définir
le type des éléments d'une ligne,

74
00:04:10,979 --> 00:04:14,750
c'est-à-dire le type de ce que
contient une case de la grille.

75
00:04:14,759 --> 00:04:17,289
Mais avant cela, j'aimerais
faire une remarque :

76
00:04:17,290 --> 00:04:21,260
j'ai choisi de représenter la grille
sous la forme d'un tableau de 6 lignes

77
00:04:21,259 --> 00:04:25,490
mais j'aurais pu faire autrement par
exemple, j'aurais pu représenter la grille

78
00:04:25,490 --> 00:04:28,009
sous la forme d'un tableau de 7 colonnes.

79
00:04:28,009 --> 00:04:32,110
Alors de manière générale
il y a plusieurs façons d'écrire

80
00:04:32,110 --> 00:04:34,969
un programme pour résoudre
le même problème.

81
00:04:34,969 --> 00:04:36,800
On va vous donner une solution

82
00:04:36,800 --> 00:04:38,870
d'un programme de « puissance 4 »,

83
00:04:38,870 --> 00:04:42,068
mais évidemment il y a
plusieurs façons de faire.

84
00:04:42,848 --> 00:04:47,479
On va utiliser le mot clé « typedef »
pour définir un nouveau type, « Grille »,

85
00:04:48,620 --> 00:04:50,569
comme étant un tableau de tableaux

86
00:04:50,569 --> 00:04:53,050
de la bonne taille
c'est-à-dire de la taille

87
00:04:53,050 --> 00:04:55,640
d'une grille de jeu de « puissance 4 ».

88
00:04:55,649 --> 00:04:58,438
Et ce nouveau type va nous permettre

89
00:04:58,439 --> 00:05:00,769
de définir des variables

90
00:05:00,769 --> 00:05:03,528
qui seront donc
des tableaux de tableaux

91
00:05:03,528 --> 00:05:05,898
permettant de représenter
une grille de « puissance 4 ».

92
00:05:06,348 --> 00:05:08,430
La question qui se
pose maintenant c'est :

93
00:05:08,430 --> 00:05:11,870
comment va-t'on pouvoir représenter
les éléments de la grille ?

94
00:05:11,870 --> 00:05:14,528
On pourrait par exemple
utiliser le type « int »

95
00:05:15,288 --> 00:05:19,948
et décider d'une convention qui dirait que
si un élément contient la valeur '0'

96
00:05:19,959 --> 00:05:23,219
et bien cet élément correspond
à une case vide ;

97
00:05:23,228 --> 00:05:24,818
s'il contient '1'

98
00:05:24,819 --> 00:05:28,389
ça correspond à une case occupée
par un pion rouge ;

99
00:05:28,389 --> 00:05:31,949
s'il contient 2, à une case occupée
par un pion jaune.

100
00:05:31,949 --> 00:05:34,580
Ou alors on pourrait
utiliser des caractères

101
00:05:34,580 --> 00:05:36,180
avec le type « char »

102
00:05:36,180 --> 00:05:38,400
et décider que par exemple

103
00:05:38,399 --> 00:05:41,850
un espace correspond
à une case vide ;

104
00:05:41,850 --> 00:05:48,110
le caractère 'O' correspondrait
à une case occupée par un pion jaune ;

105
00:05:48,110 --> 00:05:52,370
le caractère 'X' à une case
occupée par un pion rouge.

106
00:05:52,370 --> 00:05:55,050
Mais ces deux solutions
ont un inconvénient.

107
00:05:55,050 --> 00:05:59,119
Si par exemple on choisit 
le type « int », rien n'empêche

108
00:05:59,119 --> 00:06:02,869
qu'un élément de la grille contienne
la valeur 3 par exemple

109
00:06:02,869 --> 00:06:06,619
alors que 3 ne correspond à rien
pour notre programme.

110
00:06:06,619 --> 00:06:08,430
Même si l'on choisit le « char »,

111
00:06:08,430 --> 00:06:11,819
un élément de la grille pourrait
contenir le caractère 'z'

112
00:06:11,819 --> 00:06:15,470
qui également ne correspond à rien
pour notre jeu.

113
00:06:16,369 --> 00:06:21,319
Dans un tel cas, il faut définir un
nouveau type à l'aide du mot-clé « enum ».

114
00:06:21,319 --> 00:06:25,568
Il va nous permettre de limiter
le nombre de valeurs possibles

115
00:06:25,569 --> 00:06:28,839
que vont prendre
les éléments de notre grille.

116
00:06:29,189 --> 00:06:31,519
En effet, en C++

117
00:06:31,519 --> 00:06:36,189
on peut donner des noms aux entités
d'une énumération, où une énumération

118
00:06:36,189 --> 00:06:40,800
est par exemple l'ensemble des couleurs
possibles pour un pion,

119
00:06:40,808 --> 00:06:44,208
ou alors la liste des pays d'un continent.

120
00:06:44,649 --> 00:06:48,088
Ça va se faire en utilisant
le mot-clé « enum »

121
00:06:48,088 --> 00:06:50,540
en respectant la syntaxe suivante.

122
00:06:50,540 --> 00:06:53,418
Tout d'abord donc
le mot-clé « enum »,

123
00:06:53,418 --> 00:06:57,139
suivi du nom qu'on veut donner
à l'énumération,

124
00:06:57,139 --> 00:07:00,810
suivi, entre accolades 
ouvrantes et fermantes,

125
00:07:00,810 --> 00:07:05,019
de la liste des noms qu'on veut donner
aux valeurs de l'énumération,

126
00:07:05,198 --> 00:07:08,568
et chacun des noms devra 
être séparé par une virgule (',').

127
00:07:08,569 --> 00:07:12,649
L'instruction se termine par
un point-virgule (';').

128
00:07:12,658 --> 00:07:15,168
Et dans notre programme
nous allons utiliser

129
00:07:15,168 --> 00:07:18,049
l'énumération définie
de la façon suivante :

130
00:07:18,050 --> 00:07:21,278
« enum », suivi du nom de l'énumération.

131
00:07:21,278 --> 00:07:24,389
Dans notre cas, cette énumération 
va servir à définir

132
00:07:24,389 --> 00:07:27,229
la valeur des éléments d'une grille ;

133
00:07:27,228 --> 00:07:32,308
donc une bonne idée ce serait par exemple
d'appeler cette énumération « Couleur ».

134
00:07:32,308 --> 00:07:36,878
Ensuite, ces éléments vont correspondre
soit à une case vide,

135
00:07:36,879 --> 00:07:41,020
soit à une case qui va contenir un
pion de couleur rouge,

136
00:07:41,019 --> 00:07:43,829
soit une case qui va contenir un
pion de couleur jaune.

137
00:07:43,829 --> 00:07:47,819
Donc pour les noms des entités de
l'énumération nous allons utiliser

138
00:07:47,819 --> 00:07:51,339
simplement « vide », « rouge » et « jaune ».

139
00:07:51,959 --> 00:07:53,818
Une fois cette énumération définie,

140
00:07:53,818 --> 00:07:56,769
on peut l'utiliser comme
n'importe quel autre type

141
00:07:56,769 --> 00:08:00,349
pour déclarer des variables.
Cette instruction-ci par exemple

142
00:08:00,349 --> 00:08:04,729
déclare une variable
qui s'appelle « element »,

143
00:08:04,728 --> 00:08:06,889
qui sera donc de type « Couleur »

144
00:08:06,889 --> 00:08:09,110
et qui sera initialisée
à la valeur « vide ».

145
00:08:10,678 --> 00:08:13,269
On peut également changer
la valeur de l'élément

146
00:08:13,269 --> 00:08:15,959
à l'aide d'une affectation,
comme dans cette instruction

147
00:08:15,959 --> 00:08:18,058
qui va changer « vide »

148
00:08:18,059 --> 00:08:19,939
en « jaune », ici.

149
00:08:19,939 --> 00:08:23,559
Et on peut également tester ce que
contient la variable élément

150
00:08:23,559 --> 00:08:24,919
avec cette condition,

151
00:08:24,918 --> 00:08:28,240
est-ce que cette variable élément
contient la valeur « rouge » ?

152
00:08:28,240 --> 00:08:29,960
Dans ce cas évidemment,

153
00:08:29,959 --> 00:08:32,209
le test est faux.

154
00:08:33,149 --> 00:08:37,068
Les types de notre programme vont donc
être notre énumération « Couleur »,

155
00:08:37,070 --> 00:08:40,470
ainsi que le type « Grille »
qui va être finalement défini

156
00:08:40,470 --> 00:08:42,000
de la façon suivante.

157
00:08:42,460 --> 00:08:46,150
Vous pourrez remarquer que j'ai
utilisé ici le type « Couleur »

158
00:08:46,149 --> 00:08:48,869
pour définir le type des éléments.

159
00:08:49,549 --> 00:08:53,839
Une fois défini ce type « Grille »,
je vais pouvoir m'en servir pour déclarer

160
00:08:53,840 --> 00:08:55,100
des variables.

161
00:08:55,559 --> 00:08:57,299
Comme cette variable

162
00:08:57,299 --> 00:09:00,209
que je vais appeler
« grille ».

163
00:09:00,210 --> 00:09:02,410
Cette variable,
qui est donc un tableau,

164
00:09:02,410 --> 00:09:04,139
je vais pouvoir la modifier

165
00:09:04,139 --> 00:09:06,789
en utilisant des instructions 
qui vont ressembler

166
00:09:06,789 --> 00:09:08,320
à celles-ci.

167
00:09:08,990 --> 00:09:10,680
Cette instruction affecte
la valeur « jaune »

168
00:09:13,710 --> 00:09:15,750
à l'élément d'indice 3
de la ligne indice 2

169
00:09:18,250 --> 00:09:19,719
du tableau « grille »

170
00:09:20,299 --> 00:09:21,938
Encore faut-il savoir à quel élément

171
00:09:23,539 --> 00:09:26,240
de la vraie grille nous faisons référence
dans cette affectation.

172
00:09:28,450 --> 00:09:29,820
Alors, pour cela,
il faut faire un choix.

173
00:09:32,539 --> 00:09:35,799
Est-ce que la ligne d'indice 0

174
00:09:35,799 --> 00:09:38,750
de notre tableau « grille » correspond

175
00:09:38,750 --> 00:09:42,079
à la ligne du haut de la vraie grille ?

176
00:09:42,078 --> 00:09:45,179
Ou est-ce que la ligne d'indice 0

177
00:09:45,179 --> 00:09:48,230
correspond au bas de la vraie grille ?

178
00:09:48,230 --> 00:09:50,709
Alors il n'y a pas de bonne façon 
de décider,

179
00:09:50,709 --> 00:09:54,578
il n'y a pas de façon qui est
meilleure qu'une autre,

180
00:09:54,578 --> 00:09:57,299
et on va décider arbitrairement
dans notre cas

181
00:09:58,649 --> 00:10:03,079
de dire que la ligne 0

182
00:10:03,099 --> 00:10:06,710
correspond à la ligne du haut de la grille.

183
00:10:06,710 --> 00:10:08,889
on peut donc savoir maintenant

184
00:10:08,889 --> 00:10:10,189
quel est le résultat

185
00:10:10,190 --> 00:10:12,980
de cette affectation
pour notre vraie grille.

186
00:10:12,980 --> 00:10:17,120
A considérer la ligne 0, 1, 2

187
00:10:17,120 --> 00:10:20,700
et l'élément d'indice 3 sur cette ligne.

188
00:10:20,700 --> 00:10:24,190
Cet élément è l'indice 0

189
00:10:24,190 --> 00:10:27,100
celui-ci a l'indice 1, 2, 3.

190
00:10:27,510 --> 00:10:32,060
Et donc, notre affectation va
modifier la valeur de cet élément

191
00:10:32,059 --> 00:10:34,619
et va lui mettre la valeur « jaune »

192
00:10:34,620 --> 00:10:38,679
pour définir que cette case
contient un pion jaune.

193
00:10:39,179 --> 00:10:42,299
Dans la vidéo suivante, nous allons voir
comment écrire des fonctions

194
00:10:42,299 --> 00:10:45,900
qui vont nous permettre d'initialiser
et d'afficher la grille.
