1
00:00:05,382 --> 00:00:08,960
Dans cette vidéo nous allons présenter
les différentes versions alternatives

2
00:00:08,960 --> 00:00:12,929
de la fonction « joue » que je vous ai
présenté dans la vidéo précédente.

3
00:00:12,929 --> 00:00:17,089
Je vous rappelle que cette fonction
« joue » a pour but de placer un pion

4
00:00:17,089 --> 00:00:20,519
dans la grille, étant donné donc
la grille dans laquelle on joue

5
00:00:20,529 --> 00:00:23,739
le numéro de colonne dans lequel on
veut insérer le pion dans lequel

6
00:00:23,739 --> 00:00:27,799
on veut jouer le pion et la couleur du
joueur, je vous rappelle aussi que cette

7
00:00:27,807 --> 00:00:30,289
fonction vérifie la validité du coup

8
00:00:30,289 --> 00:00:31,978
c'est-à-dire que si la colonne est pleine

9
00:00:31,978 --> 00:00:34,759
on va dire que le coup n'est pas valide.

10
00:00:34,759 --> 00:00:38,030
Pour avoir une version alternative
le prototype tout d'abord,

11
00:00:38,030 --> 00:00:41,730
quelle que soit l'implémentation de la
fonction « joue », le prototype ne va donc

12
00:00:41,729 --> 00:00:44,959
pas changer, on aura toujours ici une
grille par référence

13
00:00:44,960 --> 00:00:47,039
on aura toujours une colonne à passer

14
00:00:47,039 --> 00:00:49,869
et une couleur donc rien de changé ici

15
00:00:49,869 --> 00:00:53,019
mais l'idée est d'avoir un
algorithme assez différent

16
00:00:53,020 --> 00:00:55,270
et de commencer par se dire que

17
00:00:55,270 --> 00:00:57,359
si la colonne est pleine

18
00:00:57,359 --> 00:00:59,300
alors déjà on ne joue pas.

19
00:00:59,299 --> 00:01:03,539
Donc l'idée est vraiment de commencer 
par là plutôt que de le tester après

20
00:01:03,539 --> 00:01:04,858
donc ça s'écrit que si,

21
00:01:04,858 --> 00:01:06,964
comme on va tester que la
colonne est pleine,

22
00:01:06,964 --> 00:01:09,269
je rappelle que une
colonne est pleine

23
00:01:09,269 --> 00:01:12,599
si le dernier niveau

24
00:01:12,599 --> 00:01:14,729
le niveau 0 est occupé

25
00:01:14,730 --> 00:01:21,890
donc ici on va tester que 
si la grille est en position 0

26
00:01:21,890 --> 00:01:24,590
ici, c'est bien cette ligne là

27
00:01:24,590 --> 00:01:29,080
et dans la colonne qu'on a reçu
n'est pas vide.

28
00:01:29,080 --> 00:01:31,599
A ce moment-là ça veut dire que la
colonne est pleine

29
00:01:31,599 --> 00:01:33,619
et donc de suite on retourne

30
00:01:33,620 --> 00:01:37,540
le fait que le coup est invalide
c'est-à-dire on retourne « false ».

31
00:01:37,540 --> 00:01:39,650
Nous voilà donc dégagés de cette condition

32
00:01:39,650 --> 00:01:41,739
et donc on peut maintenant
tranquillement

33
00:01:41,739 --> 00:01:44,849
chercher l'endroit, puisqu'on sait
que la colonne n'est pas pleine,

34
00:01:44,849 --> 00:01:48,199
on peut donc maintenant tranquillement 
chercher l'endroit où on va jouer

35
00:01:48,199 --> 00:01:51,740
pour ça on parcourt la colonne 
comme dans la version précédente

36
00:01:51,740 --> 00:01:55,260
en partant du bas
donc cela s'écrit en C++

37
00:01:55,260 --> 00:01:57,270
en déclarant donc une variable

38
00:01:57,269 --> 00:01:59,259
qui va nous permettre
de parcourir les lignes

39
00:01:59,260 --> 00:02:02,640
comme dans la version précédente 
de la fonction « joue »

40
00:02:02,640 --> 00:02:06,730
et qu'on l'initialise
à la taille de la grille -1

41
00:02:06,739 --> 00:02:10,228
puis ensuite la position courante.

42
00:02:10,228 --> 00:02:12,498
C'est-à-dire que la « grille[ligne][colonne] »
n'est pas vide

43
00:02:12,498 --> 00:02:15,998
alors on décrémente la ligne de 1.

44
00:02:15,998 --> 00:02:17,959
Enfin pour terminer

45
00:02:17,959 --> 00:02:21,149
on remplit la case qu'on a trouvé

46
00:02:21,149 --> 00:02:23,728
puisqu'on sait qu'on
peut en trouver une

47
00:02:23,729 --> 00:02:25,819
et enfin on renvoie « true »

48
00:02:25,819 --> 00:02:29,649
puisqu'on a pu jouer le coup.

49
00:02:29,649 --> 00:02:33,778
Voilà il faudrait à ce stade bien sûr
tester cette nouvelle fonction « joue »

50
00:02:33,778 --> 00:02:36,998
ce que je vous laisse faire 
en tant qu'exercice,

51
00:02:36,998 --> 00:02:42,098
je vous laisse aussi apprécier la
différence entre les deux codes

52
00:02:42,098 --> 00:02:45,298
indépendamment d'ailleurs du nombre de
lignes de commentaires.

53
00:02:45,299 --> 00:02:48,898
Voyons maintenant une troisième version
de cette fonction « joue »

54
00:02:48,898 --> 00:02:52,259
qui repart justement de la première 
version que nous avons présenté donc

55
00:02:52,259 --> 00:02:55,319
dans la vidéo précédente et 
qu'on va essayer d'améliorer,

56
00:02:55,319 --> 00:02:59,519
donc je vous rappelle ici le code 
de cette première version,

57
00:02:59,519 --> 00:03:02,899
et l'idée est de se concentrer sur ce

58
00:03:02,899 --> 00:03:08,088
qui nous a posé initialement souci
et aporté donc tant de lignes

59
00:03:08,088 --> 00:03:11,718
avec là « pleine »,
révisé aussi ici,

60
00:03:11,718 --> 00:03:14,138
qui était donc justement sur ce point

61
00:03:14,138 --> 00:03:19,018
de décrémenter ici « ligne »
quand « ligne » valait 0.

62
00:03:19,018 --> 00:03:20,079
Qu'est ce qui se passe à ce moment là ?

63
00:03:20,079 --> 00:03:22,939
Est-ce qu'on pourrait peut-être 
écrire le code de façon

64
00:03:22,939 --> 00:03:24,410
un petit peu différente ?

65
00:03:24,410 --> 00:03:28,630
Donc l'idée c'est de
supprimer ce booléen « pleine »

66
00:03:28,629 --> 00:03:31,078
et de le remplacer par un autre test.

67
00:03:31,078 --> 00:03:33,550
Nous reprenons depuis
le problème de départ,

68
00:03:33,550 --> 00:03:37,379
peut-être sur une question que nous
avions laissé en suspens

69
00:03:37,378 --> 00:03:42,268
qui est que, je vous rappelle que ce qui se
passait c'est que quand la ligne était nulle

70
00:03:42,278 --> 00:03:43,889
on faisait quand même,

71
00:03:43,889 --> 00:03:47,479
puisqu'on avait à ce moment-là
pas mis tout ce texte ici,

72
00:03:47,479 --> 00:03:49,599
on faisait quand même un « ligne-- »

73
00:03:49,598 --> 00:03:54,588
et donc qu'est-ce qui se passe dans 
ce cas-là, on risquait de sortir du tableau.

74
00:03:54,588 --> 00:03:57,318
Donc pour ça on va revenir 
sur le type de ligne

75
00:03:57,318 --> 00:03:59,488
qui est un type « size_t »

76
00:03:59,489 --> 00:04:01,808
et dans le cours qui vous présentait ce type

77
00:04:01,808 --> 00:04:05,448
on vous a dit que un « size_t »c'est
toujours un entier positif.

78
00:04:05,449 --> 00:04:09,609
Donc on a un problème ici
de représentation de nombre.

79
00:04:09,609 --> 00:04:12,989
Et donc ce qui va se passer en pratique
en mémoire c'est qu'on va avoir

80
00:04:12,989 --> 00:04:14,079
un très grand nombre.

81
00:04:14,079 --> 00:04:17,620
Peu importe les aspects techniques ici ;
c'est pas ça qui nous intéresse !

82
00:04:17,620 --> 00:04:21,579
Mais ce très grand nombre ne va
certainement pas être un numéro de

83
00:04:21,579 --> 00:04:23,098
ligne de notre tableau.

84
00:04:23,098 --> 00:04:23,899
Et donc

85
00:04:23,899 --> 00:04:26,948
ce qu'on devrait faire -- ce qui devrait
d'ailleurs être le réflexe de

86
00:04:26,949 --> 00:04:28,319
façon systématique ; 

87
00:04:28,319 --> 00:04:32,680
et qui va me donner une autre critique
sur ce code qu'on a écrit ici plus tard --

88
00:04:32,680 --> 00:04:34,620
ce qu'on devrait faire, donc, c'est

89
00:04:34,620 --> 00:04:39,439
de tester systématiquement que les accès
à un tableau sont corrects ; en tout cas

90
00:04:39,439 --> 00:04:43,240
de le garantir, soit par une 
démonstration sur l'algorithme,

91
00:04:43,240 --> 00:04:46,699
soit par un vrai test.
Et donc quelles sont ces conditions ici ?

92
00:04:46,699 --> 00:04:50,292
C'est qu'on doit absolument avoir que « ligne »

93
00:04:50,292 --> 00:04:55,186
doit être inférieur à « grille.size ».

94
00:04:55,186 --> 00:04:57,437
Et, de même, un index de tableau 
ne peut pas être

95
00:04:57,437 --> 00:05:00,389
plus grand que la taille de ce tableau.

96
00:05:00,399 --> 00:05:05,438
Et, de même, on devrait avoir et vérifier 
-- ce qu'on discutera un peu plus tard --

97
00:05:05,439 --> 00:05:08,189
que « colonne » doit être inférieur

98
00:05:08,189 --> 00:05:13,038
à « grille[ligne().size] ».

99
00:05:13,038 --> 00:05:17,439
Donc que cette valeur ici « -1 »,
c'est-à-dire « size_t 0 » 

100
00:05:17,439 --> 00:05:21,380
sur lequel on fait « -- » , soit représentée 
d'une façon ou d'une autre,

101
00:05:21,380 --> 00:05:24,960
par exemple « impossible »,
ou par exemple un très grand nombre,

102
00:05:24,959 --> 00:05:29,250
toujours est-il que ce nombre 
qui est « 0-- » c'est-à-dire -1

103
00:05:29,250 --> 00:05:31,740
n'est pas représentable sur un « size_t »

104
00:05:31,740 --> 00:05:35,563
et donc la condition de grille ici
inférieure à grille.size

105
00:05:35,563 --> 00:05:37,686
ne sera pas vérifiée.

106
00:05:37,686 --> 00:05:39,970
C'est donc cette condition 
que nous allons utiliser

107
00:05:39,970 --> 00:05:42,520
comme condition de débordement

108
00:05:42,519 --> 00:05:44,098
de notre tableau

109
00:05:44,098 --> 00:05:45,750
et donc on va l'écrire

110
00:05:45,750 --> 00:05:47,508
ici avec un commentaire

111
00:05:47,508 --> 00:05:51,501
donc si le test 
de « ligne inférieur à grille.size »

112
00:05:51,501 --> 00:05:53,284
est faux,

113
00:05:53,284 --> 00:05:55,069
alors c'est que la colonne était pleine

114
00:05:55,069 --> 00:05:56,949
et qu'il faut donc s'arrêter,

115
00:05:56,949 --> 00:06:00,360
que le coup est invalide.

116
00:06:00,360 --> 00:06:03,569
Maintenant qu'on a bien compris et
expliqué ce que l'on voulait faire

117
00:06:03,569 --> 00:06:05,588
on peut maintenant corriger notre code

118
00:06:05,588 --> 00:06:07,990
donc on supprime la variable pleine,

119
00:06:07,990 --> 00:06:12,019
on supprime ici le test qui
l'impliquait et on le remplace par

120
00:06:12,019 --> 00:06:17,908
le test que la ligne donc 
est inférieure à la taille de la grille.

121
00:06:17,908 --> 00:06:23,019
Notez que l'on a donc bien ici cette
protection de l'indice d'accès

122
00:06:23,019 --> 00:06:25,109
par rapport à la taille du tableau accédé

123
00:06:25,109 --> 00:06:28,088
avant d'y accéder. 
Ce qui est un conseil

124
00:06:28,088 --> 00:06:31,939
à vérifier de façon systématique.
Si c'est garanti par une boucle « for »

125
00:06:31,939 --> 00:06:34,710
ou autre, vous n'allez bien sûr pas remettre
le test à chaque fois,

126
00:06:34,709 --> 00:06:38,038
mais vous devriez avoir comme réflexe
chaque fois que vous faites

127
00:06:38,038 --> 00:06:40,120
un accès comme ça à un tableau au travers d'un indice

128
00:06:40,120 --> 00:06:42,530
de vous demander : est-ce que la condition

129
00:06:42,529 --> 00:06:46,249
qu'il est strictement plus petit que la
taille de ce tableau est vérifiée ?

130
00:06:46,249 --> 00:06:47,610
Donc là on voit bien qu'on l'a

131
00:06:47,610 --> 00:06:50,609
explicitement écrit et qui nous sert 
de test très utile

132
00:06:50,609 --> 00:06:54,038
pour tester si la colonne était pleine.

133
00:06:54,038 --> 00:06:56,979
Ensuite on peut donc continuer à supprimer

134
00:06:56,979 --> 00:07:00,420
tout ce qui dépend de « pleine »

135
00:07:00,420 --> 00:07:03,108
et enfin corriger la fin de notre programme ;

136
00:07:03,108 --> 00:07:05,448
où on n'a plus besoin non plus

137
00:07:05,448 --> 00:07:08,128
de cette variable « pleine ».

138
00:07:08,129 --> 00:07:12,460
Donc ici toujours le même test, si la ligne est plus petite que

139
00:07:12,459 --> 00:07:15,028
la taille de la grille

140
00:07:15,028 --> 00:07:17,098
alors c'est qu'on peut jouer sinon

141
00:07:17,098 --> 00:07:19,990
c'est qu'on n'a pas pu jouer.

142
00:07:19,990 --> 00:07:22,430
Et, on modifie donc

143
00:07:22,430 --> 00:07:27,848
le code en conséquence.

144
00:07:27,848 --> 00:07:32,248
Ce qui termine notre troisième
version de la fonction « joue ».

145
00:07:32,249 --> 00:07:35,579
Ceci dit, si vous avez bien suivi 
ce que je viens de vous dire

146
00:07:35,579 --> 00:07:36,879
dans cette dernière fonction

147
00:07:36,879 --> 00:07:39,319
il reste une erreur à toutes nos
fonctions « joue ».

148
00:07:39,319 --> 00:07:40,749
Est-ce que vous voyez

149
00:07:40,749 --> 00:07:44,739
ce qu'il faudrait encore ajouter pour
que ces trois fonctions « joue »

150
00:07:44,738 --> 00:07:46,329
soient correctes.

151
00:07:46,329 --> 00:07:50,109
Je vous laisse implémenter cette
correction en guise d'exercice

152
00:07:50,109 --> 00:07:53,949
dans la variante de la fonction « joue » 
que vous avez choisi de garder

153
00:07:53,949 --> 00:07:55,689
pour votre puissance 4.

154
00:07:55,689 --> 00:07:59,629
Et donc, à ce stade vous devriez avoir
une fonction « joue » correcte.

155
00:07:59,629 --> 00:08:02,050
Nous avons vu dans les vidéos
qui précèdent

156
00:08:02,050 --> 00:08:05,750
les structures de données qui vous
permettent de construire le puissance 4,

157
00:08:05,750 --> 00:08:09,129
des fonctions simples comme
« initialise » et « affiche »,

158
00:08:09,129 --> 00:08:13,078
et puis sur ces deux dernières séquences vidéos
la fonction « joue » qui nous permet

159
00:08:13,078 --> 00:08:17,118
de mettre un pion dans la grille
si la colonne indiquée est valide.

160
00:08:17,119 --> 00:08:21,869
Reste pour jouer à demander
aux joueurs où ils jouent

161
00:08:21,869 --> 00:08:25,289
et donc valider son coup, 
c'est ce qu'ont vient de faire

162
00:08:25,289 --> 00:08:29,019
et puis d'itérer donc d'alterner sur 
les joueurs demander

163
00:08:29,019 --> 00:08:31,210
un coup au joueur rouge,
un coup au joueur jaune

164
00:08:31,210 --> 00:08:35,418
et puis enfin de terminer le programme
si l'un des deux joueurs gagne

165
00:08:35,418 --> 00:08:37,850
ou bien sûr si le jeu est plein.

166
00:08:37,850 --> 00:08:42,319
Ce sera l'objet donc 
des séquences suivantes.
