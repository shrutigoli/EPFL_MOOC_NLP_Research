1
00:00:05,410 --> 00:00:08,049
Continuons la programmation
de notre jeu de puissance 4,

2
00:00:08,049 --> 00:00:11,320
dans les séquences vidéo précédentes
vous aviez respectivement vu

3
00:00:11,320 --> 00:00:13,526
comment représenter le jeu, les couleurs,

4
00:00:13,526 --> 00:00:16,512
donc les structures de données
utilisées par le programme

5
00:00:16,512 --> 00:00:19,110
et puis dans une seconde
séquence les fonctions de base

6
00:00:19,110 --> 00:00:23,139
pour initialiser la grille de
jeu et puis pour l'afficher.

7
00:00:23,139 --> 00:00:25,439
Voyons maintenant comment jouer.

8
00:00:25,439 --> 00:00:28,230
Pour pouvoir jouer qu'est-ce qu'il faut
faire, il faut être capable de demander

9
00:00:28,230 --> 00:00:31,749
à l'utilisateur de placer un pion
dans la grille,

10
00:00:31,749 --> 00:00:34,588
il faut valider que sa réponse
était correcte,

11
00:00:34,588 --> 00:00:36,509
et garantir que les structures de données

12
00:00:36,509 --> 00:00:38,140
restent valides par rapport au coup joué,

13
00:00:38,140 --> 00:00:42,159
c'est-à-dire jouer effectivement
le coup dans la grille,

14
00:00:42,169 --> 00:00:47,260
puis ensuite il faut demander à l'autre
joueur de placer un pion, valider, etc

15
00:00:47,260 --> 00:00:51,103
donc boucler comme ça
tant qu'aucun des deux joueurs n'a gagné

16
00:00:51,103 --> 00:00:53,486
ou que la grille n'est pas remplie.

17
00:00:53,696 --> 00:00:56,530
Nous allons dans cette séquence ci
s'intéresser au second point,

18
00:00:56,530 --> 00:01:00,439
c'est-à-dire valider son coup et du point
de vue de la structure de données

19
00:01:00,439 --> 00:01:02,478
rendre la structure de données valide

20
00:01:02,478 --> 00:01:05,060
en jouant effectivement
dans la grille.

21
00:01:05,060 --> 00:01:08,310
Décidons donc dans un premier temps 
d'en faire une fonction.

22
00:01:08,310 --> 00:01:10,979
La première étape c'est
de savoir très précisément

23
00:01:10,979 --> 00:01:13,548
ce que cette fonction doit faire
de s'intéresser au « quoi »,

24
00:01:13,549 --> 00:01:15,902
et donc ici on a une idée assez précise

25
00:01:15,902 --> 00:01:18,115
l'idée c'est de recevoir 
un numéro de colonnes

26
00:01:18,115 --> 00:01:20,609
qui nous indique où le joueur veut jouer,

27
00:01:20,609 --> 00:01:24,670
et de vérifier que ce coup est valide
puis de mettre le jeu à jour

28
00:01:24,670 --> 00:01:28,079
en fonction donc du coup
indiqué par le joueur.

29
00:01:28,079 --> 00:01:30,199
On peut donc la nommer 
cette fonction

30
00:01:30,199 --> 00:01:33,149
par exemple on voudrait l'appeler « joue »

31
00:01:33,150 --> 00:01:36,429
et on va donc maintenant s'intéresser
à son prototype,

32
00:01:36,429 --> 00:01:39,810
quels sont les arguments que l'on doit 
passer à la fonction.

33
00:01:39,810 --> 00:01:43,820
Pour ça on va imaginer donc quels
sont les appels typiques que l'on ferait

34
00:01:43,819 --> 00:01:47,539
de cette fonction donc typiquement 
on écrirait « joue »,

35
00:01:47,539 --> 00:01:50,859
il faut bien sûr jouer sur un jeu
donc on passerait une grille

36
00:01:50,859 --> 00:01:53,732
et puis on va indiquer la colonne
dans laquelle on veut jouer

37
00:01:53,732 --> 00:01:56,121
donc par exemple jouer dans la colonne 3

38
00:01:56,121 --> 00:01:58,203
et la couleur du joueur

39
00:01:58,203 --> 00:02:01,691
est ce que c'est le joueur rouge ou
est ce que c'est le joueur jaune qui joue

40
00:02:01,691 --> 00:02:06,649
donc par exemple ici on indiquerait
que c'est le joueur rouge qui a joué,

41
00:02:06,649 --> 00:02:08,519
ce qui aurait donc pour effet

42
00:02:08,519 --> 00:02:12,139
de mettre un pion rouge ici
en colonne 3,

43
00:02:12,849 --> 00:02:15,772
on pourrait faire ensuite
jouer le joueur jaune

44
00:02:15,782 --> 00:02:18,175
par exemple le joueur jaune
a envie de jouer dans la colonne 2

45
00:02:18,175 --> 00:02:22,869
puis c'est de nouveau le joueur rouge
qui joue dans la colonne 3.

46
00:02:22,869 --> 00:02:26,589
Donc on voit bien ici que 
l'on souhaite recevoir trois paramètres

47
00:02:26,589 --> 00:02:29,519
passer trois arguments : la grille,

48
00:02:29,519 --> 00:02:32,179
un numéro de colonne 
et puis une couleur.

49
00:02:32,179 --> 00:02:34,822
Donc on peut commencer
à écrire le prototype,

50
00:02:34,822 --> 00:02:37,465
donc « joue » c'est le nom de la fonction,

51
00:02:37,465 --> 00:02:40,109
ensuite on passe une grille 
qu'on va appeler grille

52
00:02:40,109 --> 00:02:41,850
de façon un peu originale,

53
00:02:41,850 --> 00:02:44,508
puis ensuite on va récupérer
un numéro de colonne

54
00:02:44,508 --> 00:02:46,608
donc typiquement un type entier

55
00:02:46,608 --> 00:02:49,559
et puis enfin on va passer donc 
une couleur de joueur

56
00:02:49,559 --> 00:02:52,989
et on avait pour ça défini 
le type « Couleur ».

57
00:02:53,259 --> 00:02:55,988
Voilà donc une première version 
de ce prototype.

58
00:02:55,988 --> 00:02:58,908
Commençons par la critiquer un petit peu,

59
00:02:58,908 --> 00:03:01,859
déjà donc ici la colonne 
on a mis un entier,

60
00:03:01,859 --> 00:03:05,868
mais les colonnes à priori
vont aller de 0 jusqu'à 6

61
00:03:05,868 --> 00:03:08,891
et donc sont des nombres positifs,

62
00:03:08,891 --> 00:03:13,014
donc ici on va pouvoir vouloir forcer
que c'est un nombre positif,

63
00:03:13,014 --> 00:03:16,589
et qui plus est, cette colonne 
va en fait nous servir

64
00:03:16,589 --> 00:03:22,449
à indiquer des positions dans un tableau,
typiquement si on a la grille ici

65
00:03:22,449 --> 00:03:28,399
vous avez vu lors de l'affichage
qu'on allait faire des « grille[i][j] »

66
00:03:28,399 --> 00:03:30,448
où 'j' est justement la colonne.

67
00:03:30,448 --> 00:03:34,627
Donc cette colonne nous servant à indexer
des éléments d'un tableau,

68
00:03:34,627 --> 00:03:39,778
on va respecter donc les conventions
qui sont que les tailles de tableau

69
00:03:39,778 --> 00:03:43,918
et tous ces indices,
on utilise le type « size_t »

70
00:03:43,918 --> 00:03:48,908
donc ici on va utiliser un type « size_t »,
donc on corrige cet aspect là

71
00:03:48,908 --> 00:03:53,492
et puis ensuite deuxième correction
qui est très importante,

72
00:03:53,492 --> 00:03:54,916
concerne la grille.

73
00:03:54,916 --> 00:03:59,240
Bien entendu le fait
de jouer dans la grille va la modifier,

74
00:03:59,240 --> 00:04:01,168
la grille ici va être modifiée,

75
00:04:01,168 --> 00:04:05,430
si le joueur rouge par exemple 
joue en colonne 3

76
00:04:05,430 --> 00:04:08,929
ça veut dire qu'un pion rouge
vient se mettre ici,

77
00:04:08,929 --> 00:04:12,299
et donc la grille a bien été modifiée

78
00:04:12,300 --> 00:04:15,179
et donc pour ceci on va devoir faire ici

79
00:04:15,179 --> 00:04:18,129
un passage par référence.

80
00:04:18,509 --> 00:04:23,719
La grille étant modifiée il faut passer 
par référence avec donc ce signe

81
00:04:23,719 --> 00:04:27,208
je vous rappelle qui indique que
la grille est passée par référence.

82
00:04:27,509 --> 00:04:30,340
Voilà donc pour la partie arguments 
du prototype.

83
00:04:30,340 --> 00:04:32,930
Intéressons-nous maintenant
à la valeur de retour.

84
00:04:32,930 --> 00:04:36,810
On n'a pas ici utilisé dans les
appels, de valeur de retour ;

85
00:04:36,810 --> 00:04:41,260
on n'a pas écrit quelque chose
du genre « z = joue(grille, 3) ».

86
00:04:41,260 --> 00:04:43,480
Qu'est que ce serait que
z à ce moment là ?

87
00:04:43,480 --> 00:04:46,670
Donc comme qu'on n'a pas besoin
de valeurs de retour ici,

88
00:04:46,670 --> 00:04:51,380
le type de retour que l'on va utiliser
c'est donc le type « void ».

89
00:04:52,639 --> 00:04:55,429
Donc on peut maintenant passer
à la définition

90
00:04:55,429 --> 00:04:57,209
une fois qu'on a terminé le prototype

91
00:04:57,209 --> 00:05:00,570
et donc commencer à coder
ce que nous voulions faire,

92
00:05:00,570 --> 00:05:03,218
ce que l'on veut faire,
c'est donc jouer un pion

93
00:05:03,218 --> 00:05:07,769
dans la colonne que l'on a reçue
ici comme paramètre,

94
00:05:07,769 --> 00:05:11,360
donc par exemple si on joue rouge
dans la colonne 3,

95
00:05:11,370 --> 00:05:14,929
ce que l'on va faire c'est que
l'on va dans la colonne 3

96
00:05:14,929 --> 00:05:18,388
regarder où est la première position vide ;

97
00:05:18,389 --> 00:05:22,279
par exemple supposons qu'on avait déjà
un pion rouge ici

98
00:05:22,279 --> 00:05:25,019
et puis un pion jaune 
juste au dessus

99
00:05:25,019 --> 00:05:29,859
et puis donc que l'on joue ici 
en position 3 un pion rouge

100
00:05:29,860 --> 00:05:33,408
le pion rouge va donc se mettre
à la première position vide

101
00:05:33,408 --> 00:05:36,389
donc on va regarder, 
ici c'est déjà occupé,

102
00:05:36,389 --> 00:05:41,080
là c'est vide et donc 
on va pouvoir y mettre le pion rouge.

103
00:05:41,080 --> 00:05:44,338
Donc on commence par 
écrire le commentaire

104
00:05:44,338 --> 00:05:47,288
de ce que l'on va faire à la fois pour
nous même avoir les idées plus claires

105
00:05:47,288 --> 00:05:51,228
et puis pour expliquer à ceux qui
plus tard reliront notre code

106
00:05:51,228 --> 00:05:55,228
que l'on veut donc parcourir 
la colonne que l'on nous a fournie

107
00:05:55,228 --> 00:05:59,228
de bas en haut, donc on écrit qu'on 
parcourt la colonne en partant du bas,

108
00:05:59,228 --> 00:06:04,638
comment on va l'écrire en c++ ?
Pour ça on va se donner un indice

109
00:06:04,638 --> 00:06:08,438
pour parcourir donc les lignes
alors appelons cet indice « ligne »

110
00:06:08,439 --> 00:06:12,009
et on va partir donc avec cet indice 
à partir du bas

111
00:06:12,009 --> 00:06:14,338
donc je vous rappelle que le tableau 
est toujours numéroté

112
00:06:14,338 --> 00:06:17,920
à partir de 0 et jusqu'à où est le bas,

113
00:06:17,920 --> 00:06:22,920
le bas c'est la taille du tableau moins 1.

114
00:06:22,920 --> 00:06:27,490
Donc on va partir ici
à « size -1 » de la grille.

115
00:06:27,490 --> 00:06:31,149
Donc on déclare une variable ligne
de type « size_t »

116
00:06:31,149 --> 00:06:34,780
et que l'on initialise donc
à la taille de la grille moins 1 .

117
00:06:35,160 --> 00:06:36,639
On parcourt donc cette colonne

118
00:06:36,639 --> 00:06:41,568
en partant du bas et jusqu'à ce 
qu'on ait atteint une case vide.

119
00:06:41,988 --> 00:06:46,089
« jusqu'à » signifie en C++ 
que l'on a une boucle

120
00:06:46,089 --> 00:06:48,878
ici c'est donc une boucle conditionnelle

121
00:06:48,878 --> 00:06:53,228
puisque la condition c'est :
tant qu'on n'a pas une case vide,

122
00:06:53,228 --> 00:06:57,990
donc tant que la case colonne qu'on
est en train de visiter, de parcourir,

123
00:06:57,990 --> 00:06:59,028
n'est pas vide.

124
00:06:59,028 --> 00:07:01,149
Donc ceci s'écrit :

125
00:07:01,149 --> 00:07:04,080
tant que, donc boucle « while »

126
00:07:04,080 --> 00:07:07,990
la case c'est-à-dire « grille[ligne] »

127
00:07:07,990 --> 00:07:09,579
puisqu'on est en train

128
00:07:09,579 --> 00:07:14,239
pour une colonne donnée
de parcourir

129
00:07:15,149 --> 00:07:16,649
les différentes lignes

130
00:07:16,649 --> 00:07:20,329
en partant du bas et en remontant.

131
00:07:20,329 --> 00:07:24,778
Une case de la grille c'est bien

132
00:07:24,778 --> 00:07:30,111
« grille[ l'indice de ligne ] »
qui donc ici chez nous s'appelle « ligne »

133
00:07:31,011 --> 00:07:33,434
et l'indice de « colonne ».

134
00:07:33,434 --> 00:07:37,967
Donc parcourir la grille à la ligne « ligne »

135
00:07:38,407 --> 00:07:43,710
et à la colonne qui est la variable
que l'on a reçue ici comme paramètre ;

136
00:07:43,709 --> 00:07:46,818
donc tant que « grille[ligne][colonne] »

137
00:07:46,818 --> 00:07:49,319
c'est-à-dire dans la colonne donnée

138
00:07:49,959 --> 00:07:51,839
on va faire remonter la ligne,

139
00:07:51,839 --> 00:07:54,490
tant que cette case n'est pas vide

140
00:07:54,490 --> 00:07:57,819
alors « vide » c'était une valeur 
que l'on avait définie

141
00:07:57,819 --> 00:08:02,179
comme appartenant au type « Couleur »
donc on écrit ici tout simplement

142
00:08:02,178 --> 00:08:05,459
tant que la grille à la position
ligne/colonne n'est pas vide,

143
00:08:05,459 --> 00:08:07,630
à ce moment-là qu'est ce qu'on fait ?

144
00:08:07,630 --> 00:08:10,601
et bien on fait diminuer,
on fait remonter la ligne,

145
00:08:10,601 --> 00:08:13,770
on fait diminuer la ligne de 1

146
00:08:13,770 --> 00:08:18,088
puisque je vous rappelle que la grille,
le tableau, est numéroté

147
00:08:18,088 --> 00:08:21,688
depuis 0 jusqu'à la « taille - 1 ».

148
00:08:21,688 --> 00:08:24,348
Et donc si on veut aller 
dans ce sens ici,

149
00:08:24,348 --> 00:08:29,839
ça veut dire qu'on décrémente 
de 1 en 1 la ligne.

150
00:08:30,779 --> 00:08:33,372
Voilà donc à ce stade on a trouvé

151
00:08:33,372 --> 00:08:35,925
la première case vide 
dans notre colonne ;

152
00:08:35,925 --> 00:08:38,500
et il n'y a plus qu'à remplir.
Donc ce que l'on écrit à nouveau

153
00:08:38,500 --> 00:08:40,390
avec un commentaire,

154
00:08:40,390 --> 00:08:42,620
on remplit la case que l'on a trouvée.

155
00:08:43,980 --> 00:08:48,770
Ce qui s'écrit donc « grille[ligne][colonne] »
égal cette fois-ci

156
00:08:48,770 --> 00:08:50,740
la couleur que l'on veut mettre

157
00:08:50,740 --> 00:08:54,390
dans cette case que
l'on a reçue comme paramètre.

158
00:08:55,179 --> 00:08:58,209
Voilà ce qui conclut notre fonction
« joue » à ce stade.

159
00:08:58,210 --> 00:09:01,570
Et en bons programmeurs nous devons
maintenant tester notre fonction.

160
00:09:01,570 --> 00:09:04,599
C'est ce que l'on fait en écrivant
le « main » suivant :

161
00:09:04,599 --> 00:09:07,148
on commence bien sûr par 
déclarer un jeu, une grille,

162
00:09:07,148 --> 00:09:10,775
ici, que l'on initialise,
et que l'on commence par afficher

163
00:09:10,775 --> 00:09:14,002
comme vous l'aviez fait dans
la séquence vidéo précédente ;

164
00:09:14,002 --> 00:09:19,079
puis on teste notre fonction 
« joue » sur la grille en colonne 3,

165
00:09:19,079 --> 00:09:23,359
de couleur rouge,
ce qui, si on affiche la grille,

166
00:09:23,359 --> 00:09:28,279
devrait correspondre à l'affichage 
d'un pion rouge à cet endroit-là ;

167
00:09:28,959 --> 00:09:32,702
ensuite on teste mettre 
un pion jaune en colonne 2

168
00:09:32,702 --> 00:09:35,945
et on réaffiche la grille,
ce qui devrait correspondre

169
00:09:35,945 --> 00:09:40,580
à l'affichage correspondant
à un pion jaune ici,

170
00:09:40,580 --> 00:09:45,098
enfin on refait ici un troisième test
où on affiche la grille.

171
00:09:45,098 --> 00:09:49,359
Je vous laisse bien sûr dérouler
et compiler ce programme par vous-mêmes ;

172
00:09:49,359 --> 00:09:52,028
ce qui devrait donc
correspondre à l'affichage

173
00:09:52,028 --> 00:09:54,775
correspondant à deux 
pions rouges en colonne 3

174
00:09:54,775 --> 00:09:57,192
et un pion jaune en colonne 2.

175
00:09:57,962 --> 00:10:02,009
Mais notre programme est-il correct ?
Avons nous pensé à tous les tests ?

176
00:10:02,009 --> 00:10:04,209
Pour ça réexaminons le code,

177
00:10:04,209 --> 00:10:07,850
et imaginons qu'un joueur décide de
tout le temps jouer dans la même colonne ;

178
00:10:07,850 --> 00:10:11,219
les deux joueurs décident de tout le temps
jouer dans la même colonne.

179
00:10:11,219 --> 00:10:12,742
Qu'est-ce qui va se passer ?

180
00:10:12,742 --> 00:10:15,005
Évidemment on va commencer,
ici pour simplifier

181
00:10:15,005 --> 00:10:16,949
je vais toujours prendre
la même couleur,

182
00:10:16,948 --> 00:10:20,738
on va commencer par mettre un pion
ici et puis on aura un pion ici

183
00:10:20,739 --> 00:10:23,080
puis on aura un pion là, etc. etc.

184
00:10:23,080 --> 00:10:25,330
jusqu'à ce qu'on mette un pion ici ;

185
00:10:25,330 --> 00:10:27,250
maintenant supposons 
qu'on redemande donc

186
00:10:27,250 --> 00:10:32,413
de rentrer ici dans la colonne 3,
de nouveau un pion.

187
00:10:32,523 --> 00:10:36,528
Qu'est-ce qui se passe ? Donc on part
depuis la ligne qui est en bas

188
00:10:36,528 --> 00:10:40,975
et puis jusqu'à ce qu'on trouve 
une case vide, on va faire « ligne-- »

189
00:10:40,975 --> 00:10:44,342
donc ici on va remonter 
notre ligne jusqu'ici,

190
00:10:44,902 --> 00:10:48,440
et puis là on arrive avec ligne qui vaut 0

191
00:10:48,440 --> 00:10:52,550
mais on n'a toujours pas trouvé de
case vide et donc qu'est-ce qu'on fait ?

192
00:10:52,549 --> 00:10:55,859
On fait ici « ligne-- » ,
et la question c'est

193
00:10:55,860 --> 00:10:57,390
qu'est-ce qui se passe ici ?

194
00:10:57,390 --> 00:10:59,890
alors pour l'instant peu importe 
ce qui se passe ici,

195
00:10:59,890 --> 00:11:02,730
parce que c'est une erreur de
conception, une erreur d'algorithme !

196
00:11:02,730 --> 00:11:04,100
Donc ce qu'il faut que l'on fasse,

197
00:11:04,100 --> 00:11:09,650
c'est que l'on corrige notre algorithme
et que l'on recherche le fait que

198
00:11:09,650 --> 00:11:12,940
la case vide est bien dans le jeu
et qu'on n'est pas sorti.

199
00:11:12,940 --> 00:11:16,840
Pour ça, on va introduire un booléen
ceci va nous indiquer vrai ou faux

200
00:11:16,840 --> 00:11:19,439
si la colonne est pleine.

201
00:11:19,439 --> 00:11:23,009
Donc au départ bien sûr la colonne
n'est pas pleine

202
00:11:23,009 --> 00:11:25,039
et donc on l'initialise à « faux ».

203
00:11:25,979 --> 00:11:30,149
Et donc lorsque l'on va faire ici 
notre parcours ce que l'on va faire,

204
00:11:30,149 --> 00:11:33,065
c'est que l'on va vérifier 
que l'on n'a pas débordé,

205
00:11:33,065 --> 00:11:38,411
donc pour ça si jamais
on atteint la ligne ici 0,

206
00:11:38,411 --> 00:11:42,079
alors c'est qu'on a débordé

207
00:11:42,079 --> 00:11:45,939
et donc que le tableau est plein.

208
00:11:45,939 --> 00:11:49,340
Donc on dit : si la ligne est « = = 0 »

209
00:11:49,340 --> 00:11:53,360
alors on va dire que cette fois-ci 
la variable pleine,

210
00:11:53,360 --> 00:11:56,370
que l'on avait donc déclarée ici,

211
00:11:56,370 --> 00:12:03,520
est « vraie » puisqu'on a atteint la ligne 0 
donc on sait que la colonne est pleine

212
00:12:03,520 --> 00:12:06,606
puisque la ligne 0 d'une colonne
n'est pas vide

213
00:12:06,606 --> 00:12:08,762
que si cette colonne est pleine.

214
00:12:08,762 --> 00:12:10,709
Donc sinon, à ce moment-là

215
00:12:10,709 --> 00:12:14,799
on continue comme on faisait
précédemment par diminuer donc

216
00:12:14,799 --> 00:12:17,600
la ligne de 1 à chaque fois.

217
00:12:18,220 --> 00:12:21,120
Corrigeons donc maintenant 
notre boucle pour qu'elle s'arrête

218
00:12:21,120 --> 00:12:22,698
dès que la colonne est pleine

219
00:12:22,698 --> 00:12:26,978
donc ici on faisait une boucle « while »
c'est à dire qu'on peut « continuer tant que »

220
00:12:26,978 --> 00:12:32,010
donc ici on doit continuer tant que
la grille, la colonne n'est pas pleine

221
00:12:32,010 --> 00:12:34,309
donc ici on rajoute « n'est pas pleine »

222
00:12:34,309 --> 00:12:37,109
donc que la colonne n'est pas pleine

223
00:12:37,109 --> 00:12:41,528
et que l'on a la condition précédente
et que l'on n'a pas trouvé de case vide ;

224
00:12:41,528 --> 00:12:44,238
ça s'écrit exactement comme ce que
l'on avait précédemment

225
00:12:44,238 --> 00:12:47,039
on ne change rien 
on rajoute juste le fait que

226
00:12:47,039 --> 00:12:49,969
la condition c'est que la colonne
ne soit pas pleine.

227
00:12:49,969 --> 00:12:52,430
Donc on explique ici avec un commentaire

228
00:12:52,429 --> 00:12:57,189
que l'on a trouvé une case vide,
éventuellement,

229
00:12:57,189 --> 00:13:01,130
ou alors que on a atteint le haut
de la colonne pour s'arrêter.

230
00:13:01,130 --> 00:13:04,720
Enfin donc on va corriger 
la fin du programme

231
00:13:04,720 --> 00:13:08,616
si à ce moment-là la colonne 
n'était pas pleine,

232
00:13:08,616 --> 00:13:11,672
alors on fait comme précédemment,
on remplit.

233
00:13:11,672 --> 00:13:16,729
On peut aussi à ce stade en profiter
pour indiquer en valeur de retour

234
00:13:16,729 --> 00:13:19,609
si on a pu jouer ou si 
on n'a pas pu jouer.

235
00:13:19,609 --> 00:13:23,350
Donc dans ce cas là effectivement
on a pu mettre la couleur désirée

236
00:13:23,350 --> 00:13:24,820
dans la colonne en question,

237
00:13:24,820 --> 00:13:28,689
et donc on pourrait par exemple dire 
que l'on retourne la valeur de vérité,

238
00:13:28,689 --> 00:13:30,280
« vrai », la valeur « true »,

239
00:13:30,280 --> 00:13:34,400
pour dire que l'on a pu jouer et
sinon c'est-à-dire

240
00:13:34,400 --> 00:13:37,640
que si la colonne était pleine,
à ce moment-là,

241
00:13:37,640 --> 00:13:41,220
on retourne la valeur « false » ;

242
00:13:41,700 --> 00:13:46,576
on en profite pour changer le type 
de retour de notre fonction,

243
00:13:46,576 --> 00:13:51,452
qui maintenant retourne quelque chose 
et donc retourne ici un booléen,

244
00:13:51,452 --> 00:13:55,571
et on indique par un commentaire que
si la colonne n'était pas pleine

245
00:13:55,571 --> 00:13:59,370
on a joué et on renvoie « true » 
et que sinon,

246
00:13:59,370 --> 00:14:02,180
à ce moment-là on n'a pas pu jouer
et on renvoie « false ».

247
00:14:03,440 --> 00:14:05,930
Comme on a modifié notre fonction « joue » ici

248
00:14:05,930 --> 00:14:08,819
pour corriger une erreur 
que l'on avait envisagée,

249
00:14:08,818 --> 00:14:11,638
il est important de tester 
cette correction,

250
00:14:11,638 --> 00:14:14,899
c'est toujours important de tester
votre programme régulièrement

251
00:14:14,899 --> 00:14:17,930
donc maintenant 
on réécrit un autre « main » ici,

252
00:14:17,930 --> 00:14:20,560
qui nous permet donc de tester
toujours la même chose,

253
00:14:20,560 --> 00:14:24,579
on initialise une grille 
que l'on a déclarée et puis on l'affiche,

254
00:14:24,579 --> 00:14:27,209
mais ici on va essayer de remplir 
disons par exemple,

255
00:14:27,209 --> 00:14:29,310
dix fois la même colonne.

256
00:14:29,310 --> 00:14:34,086
Pour cela on va donc faire appel
à notre toute nouvelle fonction « joue »

257
00:14:34,086 --> 00:14:37,192
mais en jouant tout le temps ici 
donc dans la même colonne.

258
00:14:37,200 --> 00:14:40,999
Cette fonction « joue » retournant
maintenant une valeur,

259
00:14:40,999 --> 00:14:43,178
ayant une valeur de retour de type booléen,

260
00:14:43,178 --> 00:14:46,610
on déclare ici une variable valide 
de type booléen

261
00:14:46,610 --> 00:14:50,069
pour récupérer la valeur de retour.

262
00:14:50,069 --> 00:14:53,518
Et dans notre boucle 
on va à chaque fois tester

263
00:14:53,518 --> 00:14:57,320
si le coup joué n'est pas valide ;
alors à ce moment-là,

264
00:14:57,320 --> 00:15:01,150
on affiche qu'il est impossible 
de jouer dans la colonne

265
00:15:01,150 --> 00:15:06,800
et puis dans la boucle aussi à chaque fois,
on affichera la grille.

266
00:15:07,170 --> 00:15:09,089
Donc ce qui va se passer dans le « main »

267
00:15:09,089 --> 00:15:13,629
c'est qu'on va vouloir jouer dix fois
dans la colonne 3.

268
00:15:13,629 --> 00:15:17,129
Donc les six premiers coups vont
se dérouler sans aucun souci,

269
00:15:17,129 --> 00:15:20,365
donc on va jouer ici
les six premiers coups

270
00:15:20,365 --> 00:15:22,959
mais dès qu'on va vouloir jouer 
le septième coup,

271
00:15:22,959 --> 00:15:24,463
regardons ce qui va se passer :

272
00:15:24,463 --> 00:15:28,669
à ce moment-là on va donc appeler ici
« joue grille 3 » , on va recevoir 3

273
00:15:28,669 --> 00:15:31,429
et puis la couleur rouge ici,

274
00:15:31,429 --> 00:15:37,929
on va initialiser donc « ligne » 
à la taille de la grille - 1

275
00:15:37,929 --> 00:15:41,800
puis on va initialiser 
la valeur pleine à « false »

276
00:15:41,800 --> 00:15:45,799
puisqu'au début avant de tester on
suppose que la colonne n'est pas pleine,

277
00:15:45,799 --> 00:15:48,180
puisque c'est justement 
ce que l'on veut vérifier,

278
00:15:48,180 --> 00:15:54,398
et donc évidemment ici le test est vrai ;
et donc on va faire cette partie du test,

279
00:15:54,398 --> 00:15:59,498
et donc ici 

280
00:15:59,500 --> 00:16:02,229
« grille[taille - 1][colonne 3] »

281
00:16:02,229 --> 00:16:04,620
n'est pas vide,
donc ce test est correct.

282
00:16:04,620 --> 00:16:08,790
On est pas dans le cas où
la ligne vaut 0 donc

283
00:16:10,090 --> 00:16:11,790
on décrémente la ligne,

284
00:16:11,789 --> 00:16:16,359
cette condition ici sera toujours vraie
tant que la case testée n'est pas vide,

285
00:16:16,359 --> 00:16:19,730
donc on va faire ici « -- », « -- », « -- ».

286
00:16:19,730 --> 00:16:24,160
On va finalement donc
arriver ici en 0,

287
00:16:24,160 --> 00:16:28,679
et à ce moment-là on va arriver
à cette phase-là du test

288
00:16:28,679 --> 00:16:31,940
« pleine » est toujours « false » 
et la case n'est pas vide,

289
00:16:31,940 --> 00:16:35,010
on re-rentre donc dans la boucle ici,

290
00:16:35,010 --> 00:16:39,330
mais cette fois-ci « ligne » vaut 0
et donc comme ligne vaut 0

291
00:16:39,330 --> 00:16:42,800
alors on met « pleine » à « true »

292
00:16:42,799 --> 00:16:47,689
et on n'exécute pas le « -- »
donc on reste ici sur la ligne 0,

293
00:16:47,689 --> 00:16:51,149
ce qui fait que l'on reboucle encore
une fois dans la boucle « while »

294
00:16:51,149 --> 00:16:54,669
et fois-ci la condition « not pleine »
devient « false »

295
00:16:54,669 --> 00:16:59,969
et donc la boucle « while » 
sort ici et se termine.

296
00:16:59,969 --> 00:17:01,990
Donc on arrive dans ce « if »

297
00:17:01,990 --> 00:17:03,939
et cette fois-ci

298
00:17:03,939 --> 00:17:07,449
la condition « not pleine » 
est toujours fausse,

299
00:17:07,449 --> 00:17:12,089
« if » lui-même va rentrer 
dans le bloc « else »

300
00:17:12,098 --> 00:17:15,319
on voit donc que la grille
n'a pas été modifiée

301
00:17:15,319 --> 00:17:18,858
et simplement on retourne « false » ici,

302
00:17:18,858 --> 00:17:22,878
ce qui fait donc que les six premiers 
coups valides étaient corrects

303
00:17:22,880 --> 00:17:25,269
et la boucle dans le « main » s'est déroulée,

304
00:17:25,269 --> 00:17:27,759
(la boucle « for » ici s'est déroulée)
six fois

305
00:17:27,759 --> 00:17:32,619
mais, arrivé au septième coup,
on a ici un « valide » qui devient « false »

306
00:17:32,619 --> 00:17:34,339
à cause de ce return « false »

307
00:17:34,339 --> 00:17:37,270
et donc ici le coup n'est pas valide

308
00:17:37,270 --> 00:17:41,319
et on affiche « impossible d'ajouter un pion ».
dans cette colonne

309
00:17:42,169 --> 00:17:47,500
Comme dans notre « main » ici de test
on n'a pas mis de conditions ici

310
00:17:47,500 --> 00:17:49,529
sur la validité du jeu,

311
00:17:49,529 --> 00:17:53,759
la boucle « for » va continuer 
à s'exécuter donc 10 fois,

312
00:17:53,759 --> 00:17:59,672
et on aura donc quatre fois l'affichage
de ce message d'impossibilité de jouer.

313
00:17:59,672 --> 00:18:02,035
Voilà donc pour cette fonction « joue »

314
00:18:02,035 --> 00:18:07,210
qui nous permet, étant donné un numéro 
de colonne, une couleur et une grille,

315
00:18:07,210 --> 00:18:12,060
effectivement de jouer à l'endroit
si la position est valide

316
00:18:12,060 --> 00:18:14,330
et d'indiquer si le coup n'est pas valide.

317
00:18:14,330 --> 00:18:17,620
Il existe différentes variantes 
d'écriture de cette fonction

318
00:18:17,620 --> 00:18:21,559
qui vont être présentées donc 
dans une séquence vidéo suivante.
