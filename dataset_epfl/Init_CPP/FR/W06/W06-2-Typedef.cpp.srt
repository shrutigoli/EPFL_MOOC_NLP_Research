1
00:00:05,163 --> 00:00:07,896
A ce stade du cours, nous avons déjà 
rencontré un certain nombre de types.

2
00:00:07,896 --> 00:00:12,089
On a vu les types de base <i>int</i>, <i>double</i>
et puis, on a vu aussi des types plus avancés

3
00:00:12,089 --> 00:00:14,831
comme les tableaux dynamiques
que l'on peut même composer,

4
00:00:14,831 --> 00:00:17,341
tableaux dynamiques 
de tableaux dynamiques etc...

5
00:00:17,346 --> 00:00:20,828
ce qui rend parfois l'écriture 
de ses types un petit peu fastidieuse.

6
00:00:20,828 --> 00:00:24,014
Pour ses raisons et pour d'autres que 
je vais développer juste dans un instant,

7
00:00:24,151 --> 00:00:28,038
il peut être intéressant 
de définir des alias de types,

8
00:00:28,038 --> 00:00:33,700
c'est-à-dire de donner un autre nom 
à des types qu'on a déjà défini.

9
00:00:33,700 --> 00:00:35,764
Cela se fait 
avec le schéma général suivant :

10
00:00:35,778 --> 00:00:40,081
Vous commencez votre ligne 
avec le mot clé réservé <i>typedef</i>

11
00:00:40,084 --> 00:00:44,542
puis ensuite, vous mettez le nom du type
auquel vous voulez donner un autre nom

12
00:00:44,542 --> 00:00:49,631
et enfin, le nouveau nom 
que vous voulez donner à ce type

13
00:00:49,631 --> 00:00:52,008
et vous terminez par un point virgule.

14
00:00:52,041 --> 00:00:55,575
Par exemple, supposons 
que vous vouliez appeler <i>Vecteur</i>

15
00:00:55,575 --> 00:00:58,807
quelque chose 
qui est un tableau dynamique de <i>double</i>

16
00:00:58,807 --> 00:01:01,524
et bien, ce que vous allez faire 
c'est que vous allez commencer une ligne

17
00:01:01,524 --> 00:01:07,117
avec <i>typedef</i>. Ensuite, le type 
que vous voulez renommer <i>Vector <double></i>

18
00:01:07,117 --> 00:01:11,356
et puis enfin, le nouveau nom 
que vous choisissez pour ce type vecteur.

19
00:01:11,356 --> 00:01:15,378
A partir de cette ligne, 
vous pourrez utiliser

20
00:01:15,378 --> 00:01:20,425
soit l'ancien nom <i>vector<double></i>
si vous voulez, soit votre nouveau nom.

21
00:01:20,425 --> 00:01:23,836
<i>Vecteur</i> avec un V majuscule ici
est strictement équivalent,

22
00:01:23,836 --> 00:01:27,072
c'est un alias de vecteur de <i>double</i>.

23
00:01:27,072 --> 00:01:33,361
Vous pourrez par exemple déclarer 
une variable <i>Vecteur v</i> pour déclarer,

24
00:01:33,361 --> 00:01:36,523
<i>v</i> étant une variable 
tableau dynamique de <i>double</i>.

25
00:01:36,523 --> 00:01:38,785
Vous pouvez bien sûr garder 
toutes les syntaxes

26
00:01:38,785 --> 00:01:42,543
que vous aviez précédemment.
Par exemple, initialiser un <i>vecteur v2</i>

27
00:01:42,543 --> 00:01:48,963
avec une certaine taille 3 et puis, 
une certaine valeur par exemple,

28
00:01:48,963 --> 00:01:52,818
<i>Vecteur</i> avec un V majuscule
comme vous l'avez spécifié là

29
00:01:52,818 --> 00:01:56,662
est strictement équivalent 
à <i>vector<double></i>.

30
00:01:56,662 --> 00:02:00,907
Vous pouvez même le réutilisez lui-même
dans un autre type,

31
00:02:00,907 --> 00:02:05,597
par exemple, vous pouvez définir
le type Matrice comme étant un vector,

32
00:02:05,608 --> 00:02:07,709
tableau dynamique de Vecteur

33
00:02:07,709 --> 00:02:10,461
qui est ce vous avez défini 
juste au préalable,

34
00:02:10,461 --> 00:02:14,578
ce qui fait qu'avec cette ligne 
<i>typedef vector<Vecteur></i>

35
00:02:14,578 --> 00:02:19,108
que vous avez juste redéfini 
précédemment Matrice, le type Matrice

36
00:02:19,108 --> 00:02:23,095
est maintenant un tableau dynamique 
de tableau dynamique de double.

37
00:02:23,095 --> 00:02:32,209
Au lieu d'écrire <i>vector<vector<double>> m</i>,
par exemple;

38
00:02:32,209 --> 00:02:39,425
vous pouvez maintenant tout à fait écrire
après cette ligne <i>Matrice m;</i>

39
00:02:39,425 --> 00:02:41,501
ce qui est quand même 
beaucoup plus simple.

40
00:02:41,501 --> 00:02:45,683
Vous pouvez donc aussi ici utiliser
l'initialisation,

41
00:02:45,683 --> 00:02:49,535
Matrice ici c'est le nouveau nom de type
que vous avez donné,

42
00:02:49,535 --> 00:02:51,604
rotation, le nom de la variable

43
00:02:51,604 --> 00:02:54,333
et puis l'initialisation est ici 
entre paranthèses

44
00:02:54,333 --> 00:02:57,113
comme on initialise un tableau dynamique 
de tableau dynamique

45
00:02:57,113 --> 00:03:00,378
en disant que la variable rotation
est initialisée à trois.

46
00:03:00,378 --> 00:03:05,519
Trois quoi ? Trois vecteurs ou 
tableaux dynamiques de double,

47
00:03:05,519 --> 00:03:07,891
mais puisque vous avez défini Vecteur,
autant l'utiliser.

48
00:03:07,891 --> 00:03:15,120
On peut utiliser trois <i>Vecteur</i>, chacun étant initialisé ici,
avec toutes les valeurs à 1

49
00:03:15,120 --> 00:03:21,680
ce qui va avoir comme propriété 
de vous créer une <i>matrice</i> ici <i>rotation</i>

50
00:03:21,680 --> 00:03:30,282
qui sera un tableau dynamique de trois
tableaux dynamiques de 3 <i>double</i>

51
00:03:30,286 --> 00:03:35,396
chacun a la valeur 1.

52
00:03:35,396 --> 00:03:39,799
Ces alias de types, ces <i>typedef</i>,
sont utiles pour trois choses :

53
00:03:39,799 --> 00:03:42,940
tout d'abord, les déclarations de tableaux
comme nous venons de le voir

54
00:03:42,940 --> 00:03:45,121
ce qui permet non seulement d'améliorer

55
00:03:45,121 --> 00:03:48,703
la lecture, l'écriture ou la manipulation
des vecteurs, des matrices

56
00:03:48,703 --> 00:03:52,637
mais aussi de clairement identifier
les concepts, le concept de vecteur,

57
00:03:52,637 --> 00:03:55,747
le concept de matrice.

58
00:03:55,747 --> 00:03:59,985
Les <i>typedef</i> permettent de bien définir,
de bien identifier les concepts

59
00:03:59,985 --> 00:04:03,620
et c'est peut-être là l'utilisation
la plus importante des <i>typedef</i>

60
00:04:03,620 --> 00:04:06,524
pour bien identifier les objets 
que l'on manipule.

61
00:04:06,524 --> 00:04:09,568
Prenons un exemple,
supposons que vous ayez un programme

62
00:04:09,568 --> 00:04:13,389
dans lequel vous avez besoin de manipuler
les distances. Et vous avez décidé au départ

63
00:04:13,389 --> 00:04:15,616
que c'était de type entier,
donc, vous avez une distance <i>d</i>

64
00:04:15,616 --> 00:04:18,893
vous l'avez déclaré comme un entier.
Vous avez par exemple une distance <i>d2</i>

65
00:04:18,893 --> 00:04:20,566
que vous avez déclaré comme un entier

66
00:04:20,566 --> 00:04:23,034
et supposons aussi 
que vous ayez des nombres,

67
00:04:23,034 --> 00:04:26,932
que vous ayez compté 
un nombre <i>nb</i> de type entier.

68
00:04:26,932 --> 00:04:30,259
Vous avez aussi des températures etc...

69
00:04:30,259 --> 00:04:32,728
Vous avez dans votre programme
plein d'entiers

70
00:04:32,728 --> 00:04:36,305
mais qui représentent fondamentalement
des concepts différents, des distances,

71
00:04:36,305 --> 00:04:37,949
des températures, des nombres

72
00:04:37,949 --> 00:04:40,727
et supposons maintenant que vous décidiez
de modifier votre programme

73
00:04:40,727 --> 00:04:43,748
et que les distances 
deviennent de type <i>double</i>.

74
00:04:43,748 --> 00:04:46,785
La question c'est de savoir 
parmi tous ces <i>int</i>

75
00:04:46,785 --> 00:04:49,360
que vous avez partout 
dans votre programme,

76
00:04:49,360 --> 00:04:54,730
lesquels doivent être changés en double
et lesquels doivent encore garder <i>int</i> ?

77
00:04:54,730 --> 00:04:57,043
Si vous aviez défini un <i>typedef</i>,

78
00:04:57,045 --> 00:04:59,181
la solution aurait été 
beaucoup plus simple.

79
00:04:59,181 --> 00:05:05,771
Si vous avez comme ça un <i>typedef</i> ici,
<i>typedef int Distance</i>,

80
00:05:05,771 --> 00:05:09,911
ce qui signifie 
que le terme distance ici

81
00:05:09,911 --> 00:05:13,795
le mot "distance" représente un entier,
vous pouvez tout à fait l'utiliser

82
00:05:13,795 --> 00:05:15,803
comme un nouveau type,
un alias de type

83
00:05:15,803 --> 00:05:19,647
pour représenter des longueurs,
la variable <i>ma longueur</i>.

84
00:05:19,647 --> 00:05:28,947
A ce moment-là, dans l'exemple précédent,
le <i>d</i> et le <i>d2</i> auraient été des distances

85
00:05:28,947 --> 00:05:32,275
et si vous avez besoin 
de modifier les distances

86
00:05:32,275 --> 00:05:35,074
pour qu'elles ne soient plus des entiers,
mais qu'elles soient des double,

87
00:05:35,074 --> 00:05:39,522
vous avez une seule ligne à modifier,
c'est la ligne de votre <i>typedef</i>.

88
00:05:39,522 --> 00:05:43,237
Vous remplacez <i>int</i> par <i>double</i>
et en faisant ceci,

89
00:05:43,237 --> 00:05:47,246
en ayant modifié une seule ligne,
la ligne du typedef

90
00:05:47,246 --> 00:05:50,857
alors toutes vos distances d'un seul coup
deviennent de type double

91
00:05:50,857 --> 00:05:55,770
et vous n'avez pas changé ni les nombres
d'un côté, ni les températures de l'autre.

92
00:05:55,770 --> 00:05:57,906
L'utilisation des <i>typedef</i> comme ceci

93
00:05:57,906 --> 00:06:01,807
permet une meilleure identification 
des concepts et ça c'est très important

94
00:06:01,807 --> 00:06:04,587
pour rendre votre programme 
beaucoup plus clair,

95
00:06:04,587 --> 00:06:06,167
beaucoup plus intelligible,

96
00:06:06,167 --> 00:06:08,605
mais aussi et en même temps 
quelque chose qui est aussi important

97
00:06:08,605 --> 00:06:13,290
de permettre les changements ultérieurs
comme la modification de <i>int</i> en <i>double</i>

98
00:06:13,290 --> 00:06:14,720
ici pour les distances,

99
00:06:14,743 --> 00:06:17,953
de rendre ces modifications
beaucoup plus faciles.

100
00:06:17,953 --> 00:06:21,675
Un cas particulier de l'identification
des concepts à l'aide de typedef

101
00:06:21,675 --> 00:06:25,851
c'est de faciliter l'écriture 
des paramètres des fonctions.

102
00:06:25,851 --> 00:06:28,387
On a une écriture du coup 
beaucoup plus claire

103
00:06:28,387 --> 00:06:30,874
beaucoup plus compacte des fonctions.

104
00:06:30,874 --> 00:06:35,076
Prenons l'exemple d'une fonction 
qui serait le produit vectoriel,

105
00:06:35,076 --> 00:06:37,745
produit vectoriel entre deux vecteurs.
Si on écrit comme ceci,

106
00:06:37,745 --> 00:06:41,424
on voit clairement que ce sont 
deux vecteurs qui retournent un vecteur.

107
00:06:41,424 --> 00:06:44,197
Ceci étant possible grâce à la ligne ici,

108
00:06:44,197 --> 00:06:46,142
que l'on aura mis au début 
de son programme

109
00:06:46,142 --> 00:06:49,005
<i>typedef vector<double> Vecteur</i>

110
00:06:49,005 --> 00:06:51,060
et il est beaucoup plus clair de lire

111
00:06:51,060 --> 00:06:54,363
que le produit vectoriel 
retourne un vecteur et prend deux vecteurs

112
00:06:54,363 --> 00:06:56,911
plutôt que d'avoir à écrire

113
00:06:56,911 --> 00:07:08,861
<i>vector<double>produit_vectoriel
(vector<double>,vector<double>);</i>

114
00:07:08,861 --> 00:07:13,410
ce qui est quand même 
nettement moins lisible et compréhensible.

115
00:07:13,418 --> 00:07:17,217
Pour toutes ces raisons, 
et fondamentalement pour la première

116
00:07:17,217 --> 00:07:19,784
bien identifier les concepts,

117
00:07:19,784 --> 00:07:22,564
je vous encourage vraiment 
à utiliser les typedef.

118
00:07:22,564 --> 00:07:26,171
Utilisez-les au maximum. A chaque fois 
que vous pouvez donner un nom clair,

119
00:07:26,171 --> 00:07:29,581
intelligible à un type,
cela améliore largement votre programme.
