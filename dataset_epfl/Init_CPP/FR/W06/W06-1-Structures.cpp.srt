1
00:00:05,511 --> 00:00:09,344
Lors des leçons précédentes, nous avons vu
les tableaux et les chaînes de caractère.

2
00:00:09,344 --> 00:00:13,578
Dans cette vidéo nous allons voir
les structures, qui sont une autre façon

3
00:00:13,578 --> 00:00:16,074
de représenter des données.

4
00:00:16,074 --> 00:00:19,613
Un programme peut avoir besoin de stocker
ce qu'on appelle des données structurées,

5
00:00:19,613 --> 00:00:21,913
par exemple un programme peut avoir besoin

6
00:00:21,913 --> 00:00:26,263
de stocker les âges de plusieurs personnes,
comme ce qui est représenté ici, et

7
00:00:26,263 --> 00:00:30,584
nous avons vu lors d'une séance précédente
que dans un tel cas, il faut utiliser

8
00:00:30,584 --> 00:00:35,634
un tableau, c'est-à-dire un tableau 
qui serait déclaré de cette façon-ci,

9
00:00:35,634 --> 00:00:39,541
en utilisant le type "vector", 
si on ne sait pas combien de personnes

10
00:00:39,541 --> 00:00:43,586
le programme doit considérer ;
ou déclarer de cette façon-ci,

11
00:00:43,586 --> 00:00:46,103
en utilisant le type "array"

12
00:00:46,103 --> 00:00:49,168
si par exemple on sait que
l'on a cinq personnes.

13
00:00:49,168 --> 00:00:52,430
Les tableaux sont des structures 
de données homogènes, c'est-à-dire que

14
00:00:52,430 --> 00:00:55,416
toutes les valeurs contenues 
dans un même tableau sont toutes

15
00:00:55,416 --> 00:01:00,361
de même type, le type "int" 
dans le cas de cet exemple.

16
00:01:00,361 --> 00:01:04,727
Mais on peut avoir aussi besoin 
de considérer des données hétérogènes,

17
00:01:04,727 --> 00:01:08,462
c'est-à-dire des données ayant des types
différents, par exemple

18
00:01:08,462 --> 00:01:13,061
si on veut considérer les données 
relatives à une personne, comme ici,

19
00:01:13,061 --> 00:01:17,636
où les données seraient par exemple 
d'abord le nom de la personne, qui serait

20
00:01:17,636 --> 00:01:23,895
une chaîne de caractères, la taille 
de la personne, qui serait de type "double",

21
00:01:23,895 --> 00:01:26,743
son âge, qui serait de type "int"

22
00:01:26,743 --> 00:01:32,195
et son sexe représenté sous la forme 
d'un caractère M ou F.

23
00:01:32,195 --> 00:01:35,851
Ici, on ne peut pas utiliser de tableau 
pour stocker toutes ces données

24
00:01:35,851 --> 00:01:39,920
puisqu'elles sont de type différent, 
par contre on peut les regrouper dans

25
00:01:39,920 --> 00:01:43,587
un nouveau type, qu'on appelle
un type "structure".

26
00:01:43,587 --> 00:01:48,842
Nos structures nous permettraient 
de représenter les données d'une ligne.

27
00:01:48,842 --> 00:01:52,118
On peut ensuite faire un tableau 
de structures pour représenter l'ensemble

28
00:01:52,118 --> 00:01:56,198
de ces données relatives 
à un ensemble de personnes.

29
00:01:56,228 --> 00:02:00,171
De façon plus générale, on utilise 
des structures quand on souhaite

30
00:02:00,171 --> 00:02:04,751
regrouper des données ayant des types
ou des natures différents ;

31
00:02:04,751 --> 00:02:07,258
elles vont avoir différentes utilisations.

32
00:02:07,613 --> 00:02:12,405
Tout d'abord, on va pouvoir 
représenter des entités

33
00:02:12,405 --> 00:02:16,234
qui doivent être définies avec
plusieurs données, par exemple

34
00:02:16,234 --> 00:02:20,137
une telle entité pourrait être une personne
qui, suivant les besoins du programme,

35
00:02:20,137 --> 00:02:24,371
serait définie par son prénom,
son nom, sa date de naissance.

36
00:02:24,371 --> 00:02:28,508
Une autre entité pourrait être une date, 
qui serait définie

37
00:02:28,508 --> 00:02:32,818
par un numéro de jour, de mois et d'année.

38
00:02:32,818 --> 00:02:39,293
Regrouper ces données facilite 
la manipulation de telles entités.

39
00:02:39,293 --> 00:02:43,736
Une deuxième utilisation possible 
des structures est de faire retourner

40
00:02:43,736 --> 00:02:47,867
plusieurs valeurs à une fonction, que nous
allons détailler comment par la suite.

41
00:02:47,867 --> 00:02:51,368
Et enfin, 
une troisième utilisation possible,

42
00:02:51,368 --> 00:02:55,485
qui généralise 
la première utilisation, est de simplifier

43
00:02:55,485 --> 00:02:58,265
la conception et l'écriture 
des programmes.

44
00:02:58,265 --> 00:03:01,778
Avant d'entrer dans les détails, voici
quelques exemples de structures.

45
00:03:01,778 --> 00:03:07,397
Cette structure "Date" réunit un jour, 
un mois et une année.

46
00:03:09,417 --> 00:03:12,277
Une telle déclaration définit donc
un nouveau type

47
00:03:12,277 --> 00:03:14,284
utilisable dans un programme.

48
00:03:14,284 --> 00:03:20,684
Ce type va nous permettre de déclarer 
des variables, par exemple comme ceci

49
00:03:20,684 --> 00:03:27,952
qui est la déclaration d'une variable 
qui s'appelle "aujourd'hui" de type "date"

50
00:03:27,952 --> 00:03:31,556
et qui va pouvoir 
avoir des valeurs concrètes

51
00:03:31,556 --> 00:03:34,592
pour le jour, le mois et l'année.

52
00:03:34,592 --> 00:03:39,269
Cette structure "Etudiant" regroupe le nom
d'un étudiant avec le nom de sa section

53
00:03:39,269 --> 00:03:43,829
sous la forme de chaîne de caractères, 
ainsi que ses inscriptions au cours,

54
00:03:43,829 --> 00:03:47,385
sous la forme d'un tableau, 
où les éléments seraient de type "cours",

55
00:03:47,395 --> 00:03:51,055
où "cours" serait une structure 
qui devrait être déclarée plus haut.

56
00:03:51,055 --> 00:03:54,648
La dernière donnée contenue dans
la structure serait

57
00:03:54,648 --> 00:03:57,654
la moyenne des notes de l'étudiant.

58
00:03:57,654 --> 00:04:02,132
Cette structure "particule" serait utile
à un programme de simulation de physique,

59
00:04:02,162 --> 00:04:07,812
puisqu'elle regroupe les valeurs relatives
à une particule élémentaire, avec

60
00:04:07,812 --> 00:04:10,745
tout d'abord la position de la particule

61
00:04:10,745 --> 00:04:13,678
sous la forme d'un vecteur 
à trois dimensions,

62
00:04:14,578 --> 00:04:17,053
La vitesse de la particule qui aurait

63
00:04:17,053 --> 00:04:21,901
également trois coordonnées, 
ainsi que la masse

64
00:04:25,091 --> 00:04:29,451
et la charge de la particule, qui sont
toutes les deux de type "double".

65
00:04:30,017 --> 00:04:36,139
Une structure est donc un nouveau type,
qu'un programmeur va définir et déclarer

66
00:04:36,139 --> 00:04:40,151
en respectant la syntaxe suivante, 
c'est-à-dire en commençant

67
00:04:40,151 --> 00:04:46,241
par le mot-clé "struct", suivi du nom 
qu'il veut donner à la structure,

68
00:04:46,241 --> 00:04:52,736
suivi entre accolades ouvrante et 
fermante, de la liste de ce qu'on appelle

69
00:04:52,736 --> 00:04:59,404
les champs de la structure et qui sont
les données que regroupe la structure.

70
00:04:59,404 --> 00:05:01,889
Et vous pouvez remarquer que 
la déclaration de ces champs

71
00:05:01,889 --> 00:05:07,081
ressemble beaucoup à la déclaration
d'une variable, puisqu'une déclaration

72
00:05:07,081 --> 00:05:12,592
commence par le type qu'on veut donner
au champ, suivi de son identificateur ou

73
00:05:12,592 --> 00:05:15,903
son nom, suivi d'un point-virgule.

74
00:05:15,903 --> 00:05:20,039
Notez enfin qu'il faut un point-virgule
après l'accolade fermante.

75
00:05:20,039 --> 00:05:24,689
Une structure : le seul cas où 
un point-virgule apparaît

76
00:05:24,689 --> 00:05:27,321
après une accolade fermante.

77
00:05:28,001 --> 00:05:31,223
Par exemple ce que défnit
une nouvelle structure donc

78
00:05:31,223 --> 00:05:35,898
un nouveau type qui s'appelle "Personne"
et qui serait utile pour définir le type

79
00:05:35,898 --> 00:05:39,563
des éléments du tableau qu'on a vu
au début du cours, puisqu'elle regroupe

80
00:05:39,563 --> 00:05:43,786
le nom, la taille, l'âge et le sexe
d'une personne ;

81
00:05:43,796 --> 00:05:49,735
Cette autre structure s'appelle "complexe"
et regroupe deux champs :

82
00:05:49,735 --> 00:05:55,457
un champ x et un champ y et serait utile
pour représenter des valeurs complexes,

83
00:05:55,457 --> 00:06:02,379
par opposition à des valeurs réelles, 
qui se noteraient en mathématiques : x+iy.

84
00:06:02,898 --> 00:06:07,318
Comme les éléments de tableau, les champs
d'une structure ne sont pas limités à être

85
00:06:07,318 --> 00:06:10,128
de type scalaire comme "int" ou "double".

86
00:06:10,128 --> 00:06:12,688
Les champs d'une structure peuvent être

87
00:06:12,688 --> 00:06:15,129
des tableaux, voire des structures.

88
00:06:15,129 --> 00:06:19,293
Par exemple, je déclare ici un type 
qui s'appelle "Compliquee",

89
00:06:19,293 --> 00:06:23,397
où le deuxième champ est de type "int",

90
00:06:23,397 --> 00:06:27,797
mais le premier champ est un tableau 
de "double".

91
00:06:27,797 --> 00:06:34,335
Et le troisième champ est 
de type "simple", qui a été déclaré ici,

92
00:06:34,335 --> 00:06:36,551
qui contient lui-même deux champs.

93
00:06:36,551 --> 00:06:39,478
Le premier de type "int",
le deuxième de type "double".

94
00:06:39,650 --> 00:06:44,961
Une structure est donc un nouveau type,
que je peux utiliser pour déclarer

95
00:06:44,961 --> 00:06:49,317
des variables, et une déclaration
va se faire de la même façon qu'avec

96
00:06:49,317 --> 00:06:54,902
n'importe quel autre type, c'est-à-dire 
que je vais commencer par le nom du type,

97
00:06:54,902 --> 00:06:56,820
suivi du nom de la variable.

98
00:06:56,820 --> 00:07:01,618
Par exemple, j'ai repris ici le code 
qui définit la structure "Personne",

99
00:07:01,618 --> 00:07:04,976
et ici, je déclare une variable

100
00:07:04,976 --> 00:07:09,201
qui s'appelle "untel" et qui sera 
de type "Personne".

101
00:07:09,201 --> 00:07:13,555
Attention, la définition de la structure
doit s'écrire en dehors des fonctions,

102
00:07:13,555 --> 00:07:17,057
avant de l'utiliser pour déclarer 
des variables.

103
00:07:17,057 --> 00:07:21,607
Par-contre, comme avant, la déclaration
des variables de ce nouveau type

104
00:07:21,607 --> 00:07:24,786
doit se faire à l'intérieur d'une fonction.

105
00:07:24,786 --> 00:07:32,733
Par exemple, on écrira en dehors 
de toute fonction, puis on peut définir

106
00:07:32,733 --> 00:07:37,094
la variable "untel" à l'intérieur 
d'une fonction, par exemple

107
00:07:37,094 --> 00:07:38,966
la fonction "main", comme ceci.

108
00:07:44,010 --> 00:07:48,022
Cette variable "untel", je peux la
représenter de la façon suivante :

109
00:07:50,865 --> 00:07:59,139
elle aura un champ qui s'appelle "nom",
un champ qui s'appelle "taille", etc.

110
00:08:02,882 --> 00:08:07,388
Dans ce deuxième exemple, je déclare
tout d'abord une structure qui s'appelle

111
00:08:07,388 --> 00:08:12,819
"complexe" avec un champ x et un champ y, 
et je déclare ici une nouvelle variable,

112
00:08:12,819 --> 00:08:19,559
qui s'appelle z, qui sera
de type "complexe", et donc z va contenir

113
00:08:19,559 --> 00:08:24,609
deux champs : un champ x et un champ y.

114
00:08:27,136 --> 00:08:30,928
Comme avec les autres types,
on peut initialiser une variable

115
00:08:30,928 --> 00:08:32,682
de type "structure".

116
00:08:32,682 --> 00:08:36,820
Au moment de cette déclaration, 
ça va se faire avec la syntaxe suivante.

117
00:08:36,820 --> 00:08:42,094
Donc après le type de la structure, 
le nom de la variable : on va mettre

118
00:08:42,094 --> 00:08:48,288
le signe "=" avec, entre accolade ouvrante
et accolade fermante, les valeurs

119
00:08:48,288 --> 00:08:53,439
des différents champs qu'on veut 
donner à la variable.

120
00:08:53,439 --> 00:08:59,339
Et après l'accolade fermante, 
on va avoir ici un point-virgule.

121
00:08:59,356 --> 00:09:03,311
Par exemple, j'ai repris ici 
une nouvelle fois ma structure "Personne"

122
00:09:03,311 --> 00:09:07,198
et déclaré une variable "untel" 
de type "Personne".

123
00:09:07,198 --> 00:09:10,084
Je peux représenter "untel" de cette façon.

124
00:09:27,240 --> 00:09:33,072
Cette déclaration initialise également
les champs de la variable "untel" ;

125
00:09:33,072 --> 00:09:37,262
Dupond va aller dans le premier champ,
qui est le champ "nom",

126
00:09:37,262 --> 00:09:41,532
c'est-à-dire que le champ "nom" va contenir
la valeur "Dupond",

127
00:09:41,532 --> 00:09:46,047
le champ "taille" va contenir 
la valeur "1.75",

128
00:09:46,047 --> 00:09:50,787
le champ "âge", 
la valeur "41"

129
00:09:50,787 --> 00:09:54,646
et le champ "sexe",
le caractère "M".

130
00:09:54,646 --> 00:10:00,110
Par ailleurs, en C++2011, 
on peut également utiliser cette syntaxe

131
00:10:00,110 --> 00:10:05,078
en dehors d'une initialisation 
pour une affectation et on va obtenir

132
00:10:05,078 --> 00:10:07,795
les mêmes valeurs aux mêmes endroits.

133
00:10:07,856 --> 00:10:12,553
Notez bien qu'en C++ avant 2011, 
on ne pouvait pas utiliser cette syntaxe

134
00:10:12,553 --> 00:10:18,274
pour l'affectation et il n'y avait pas
de moyen simple d'affecter tous les champs

135
00:10:18,274 --> 00:10:20,547
d'une structure à des valeurs littérales.

136
00:10:21,114 --> 00:10:26,012
On sait donc initialiser les champs 
d'une variable de type "structure",

137
00:10:26,012 --> 00:10:29,503
c'est-à-dire donenr une valeur 
à ces champs, au moment de la déclaration

138
00:10:29,503 --> 00:10:34,969
de la variable, encore faut-il pouvoir 
accéder à ces valeurs, ça va se faire

139
00:10:34,969 --> 00:10:40,238
en respectant la syntaxe suivante, 
c'est-à-dire qu'on va commencer par écrire

140
00:10:40,238 --> 00:10:46,611
le nom de la variable de type "structure",
suivi d'un point, suivi du nom du champ.

141
00:10:46,611 --> 00:10:50,224
Par exemple, si je reprends
ma variable "untel"

142
00:10:50,224 --> 00:10:53,461
du transparent précédent, qui était 
de type "Personne" et que

143
00:10:53,461 --> 00:10:58,566
je peux représenter de la façon suivante, 
cette instruction est une affectation

144
00:10:58,566 --> 00:11:02,220
qui va mettre la valeur "1,75"
dans le champ "taille"

145
00:11:02,220 --> 00:11:08,279
de la variable "untel", c'est-à-dire
mettre la valeur "1,75" à cet endroit

146
00:11:08,279 --> 00:11:11,003
dans ma représentation 
de la variable "untel".

147
00:11:12,483 --> 00:11:17,258
Cette instruction va ajouter 1 
au champ "âge" de "untel",

148
00:11:17,258 --> 00:11:23,517
c'est-à-dire changer ce "41" en "42".
Notez au passage que je suis obligé

149
00:11:23,517 --> 00:11:26,881
d'utiliser des parenthèses ici : 
je ne peux pas écrire simplement

150
00:11:26,881 --> 00:11:35,902
"++untel.age" car l'opérateur "++"
est prioritaire sur l'opérateur "."

151
00:11:35,902 --> 00:11:40,241
Et cette dernière instruction va afficher
la valeur contenue dans le champ "sexe"

152
00:11:40,241 --> 00:11:44,831
de la variable "untel", c'est-à-dire
le caractère "M".

153
00:11:45,538 --> 00:11:48,788
Je vais maintenant détailler 
un exemple complet qui met en œuvre,

154
00:11:48,788 --> 00:11:51,983
notamment, des fonctions ayant 
des paramètres de type "structure".

155
00:11:52,338 --> 00:11:57,893
Je vais commencer par reprendre le code 
de ma structure "Personne", ici,

156
00:11:57,893 --> 00:12:03,417
avec, je vous le rappelle : un nom, 
une taille, un âge et un sexe comme données.

157
00:12:03,417 --> 00:12:08,488
La fonction "main" va commencer 
par déclarer une variable "untel"

158
00:12:08,551 --> 00:12:13,964
de type "Personne" : je peux donc
représenter "untel" de la façon suivante.

159
00:12:13,964 --> 00:12:19,463
Et "untel" va être initialisé en utilisant
la valeur de retour

160
00:12:19,463 --> 00:12:23,680
de la fonction "naissance",
qui est appelée ici.

161
00:12:24,277 --> 00:12:28,917
Voici le code de la fonction naissance.
Le but de cette fonction est de demander

162
00:12:28,938 --> 00:12:34,642
la valeur des champs d'une variable 
de type "Personne" à l'utilisateur,

163
00:12:34,642 --> 00:12:39,104
c'est-à-dire un nom, une taille, un âge 
et un sexe, et de retourner

164
00:12:39,104 --> 00:12:42,865
les valeurs des champs entrés 
par l'utilisateur

165
00:12:42,865 --> 00:12:46,656
sous la forme d'une structure.
Cette fonction n'a donc besoin

166
00:12:46,656 --> 00:12:52,112
d'aucune valeur pour pouvoir fonctionner :
elle n'a donc pas de paramètre.

167
00:12:52,112 --> 00:12:55,825
En revanche, elle doit retourner 
une valeur de type "structure",

168
00:12:55,825 --> 00:13:03,002
plus exactement de type "Personne" ici,
et donc le type de retour

169
00:13:03,002 --> 00:13:05,698
de la fonction "naissance" et "Personne".

170
00:13:05,777 --> 00:13:10,612
Comment fonctionne "naissance" exactement?
On commence par déclarer

171
00:13:10,858 --> 00:13:14,378
une variable locale qui s'appelle "p"
de type "Personne",

172
00:13:14,378 --> 00:13:19,922
et "p" peut être représentée comme 
la variable "untel".

173
00:13:19,922 --> 00:13:22,548
Pour l'instant les champs de "p" 
ne sont pas initialisés,

174
00:13:22,548 --> 00:13:25,648
on ne sait donc pas ce qu'ils contiennent
mais la fonction "naissance" commence

175
00:13:25,648 --> 00:13:29,771
par demander à l'utilisateur 
d'entrer un nom et ce nom va être rangé

176
00:13:29,771 --> 00:13:33,508
directement dans le champ "nom"
de la variable "p", c'est-à-dire ici.

177
00:13:33,508 --> 00:13:39,340
Supposons, pour l'exemple, 
que l'utilisateur rentre le nom "Dupond",

178
00:13:39,340 --> 00:13:42,911
la fonction continue
en demandant une taille et un âge

179
00:13:42,911 --> 00:13:45,826
à l'utilisateur : reprenons 
les mêmes valeurs

180
00:13:45,826 --> 00:13:48,854
que dans l'exemple pécédent.
La fonction continue en demandant

181
00:13:48,854 --> 00:13:53,686
à l'utilisateur d'entrer 
le caractère "M" ou "F" pour le champ sexe

182
00:13:53,686 --> 00:13:58,363
de la variable "p" et s'assure 
que l'utilisateur rentre bien

183
00:13:58,363 --> 00:14:02,995
soit "M", soit "F" en utilisant 
une boucle "do while",

184
00:14:02,995 --> 00:14:05,978
supposons que la personne soit ici
un homme,

185
00:14:05,978 --> 00:14:11,374
et enfin, la fonction finit en retournant 
la valeur contenue

186
00:14:11,374 --> 00:14:15,916
dans la variable "p", c'est-à-dire 
l'ensemble des valeurs stockées

187
00:14:15,916 --> 00:14:17,020
dans ces champs.

188
00:14:17,970 --> 00:14:21,102
Revenons à l'appel 
de la fonction "naissance", c'est-à-dire

189
00:14:21,102 --> 00:14:27,495
ici, que va-t-il se passe exactement?
Les valeurs des champs de la variable "p"

190
00:14:27,495 --> 00:14:32,209
vont être recopiés dans les champs
de la variable "untel", c'est-à-dire que

191
00:14:32,209 --> 00:14:35,533
le champ "nom" d'untel va prendre 
la valeur "Dupond",

192
00:14:35,533 --> 00:14:39,972
le champ "taille": 1,75
Âge: 41

193
00:14:39,972 --> 00:14:43,285
Et le champ sexe, le caractère "M".

194
00:14:43,285 --> 00:14:47,188
L'instruction suivante 
dans la fonction "main" est celle-ci,

195
00:14:47,200 --> 00:14:51,616
c'est-à-dire qu'on va appeler
la fonction "anniversaire" en lui passant

196
00:14:51,616 --> 00:14:54,382
la variable "untel" en argument.

197
00:14:54,382 --> 00:14:57,906
Le code de la fonction "anniversaire" 
est ici.

198
00:14:57,906 --> 00:15:01,938
Le but de la fonction "anniversaire" 
est d'ajouter 1 au champ "âge"

199
00:15:01,938 --> 00:15:05,817
de la variable passée en argument : 
cette fonction n'a donc

200
00:15:05,817 --> 00:15:09,176
qu'un seul paramètre 
qui sera de type "Personne",

201
00:15:09,176 --> 00:15:12,002
puisque la variable "untel" était
de type "Personne"

202
00:15:12,002 --> 00:15:17,141
et on va utiliser un passage par référence
puisque la fonction doit modifier

203
00:15:17,141 --> 00:15:20,386
la valeur de la variable à passer 
en argument.

204
00:15:20,606 --> 00:15:25,195
Cette fonction ne doit envoyer 
aucune valeur : son type de retour

205
00:15:25,195 --> 00:15:31,110
sera donc "void" et quand on exécute
le corps de la fonction sur l'exemple,

206
00:15:32,049 --> 00:15:38,504
on va changer ce 41 et La valeur
contenue par le champ "âge"

207
00:15:38,510 --> 00:15:43,569
de la variable "untel", en 42.
On continue dans le corps

208
00:15:43,796 --> 00:15:47,585
de la fonction "main", c'est-à-dire
qu'on va passer à cette instruction

209
00:15:47,585 --> 00:15:52,642
et appeler la fonction "affiche"
en lui passant la variable "untel"

210
00:15:52,642 --> 00:15:58,008
en argument.
Le code de la fonction "affiche" est ici.

211
00:15:58,008 --> 00:16:02,317
Le but de cette fonction "affiche"
est d'afficher la valeur des champs

212
00:16:02,317 --> 00:16:05,123
de la variable passée en argument.
Cette fonction n'aura donc

213
00:16:05,123 --> 00:16:10,141
qu'un seul paramètre de type "Personne"
et ne devra pas modifier

214
00:16:10,141 --> 00:16:12,984
la valeur de la variable
passée en argument.

215
00:16:13,092 --> 00:16:17,770
On a utilisé ici le mot-clé "const", 
suivi de &,

216
00:16:17,779 --> 00:16:23,035
comme pour le passage par référence,
entre le nom du type du paramètre,

217
00:16:23,043 --> 00:16:28,902
le nom du paramètre lui-même :
il s'agit là d'une optimisation à laquelle

218
00:16:28,902 --> 00:16:32,029
vous pouvez ne pas attacher 
trop d'importance pour l'instant.

219
00:16:32,029 --> 00:16:36,869
Cette optimisation évite de faire 
une copie car je vous rappelle

220
00:16:36,869 --> 00:16:42,173
qu'un passage par valeur ferait une copie,
une copie coûteuse d'une structure

221
00:16:42,173 --> 00:16:43,775
qui contient beaucoup de gens.

222
00:16:43,775 --> 00:16:48,991
La fonction va simplement afficher 
les valeurs des différents champs

223
00:16:48,991 --> 00:16:52,984
du paramètre.
A noter qu'on utilise ici un "switch"

224
00:16:53,289 --> 00:16:59,246
pour afficher si la personne est un homme
ou une femme. Cette instruction "switch"

225
00:16:59,246 --> 00:17:01,597
est expliquée dans les compléments.

226
00:17:01,597 --> 00:17:05,307
On aurait pu utiliser ici aussi
une instruction "if".

227
00:17:05,307 --> 00:17:08,780
Vous pourrez vérifier par vous-même que
dans le cas de mon exemple,

228
00:17:08,780 --> 00:17:10,932
la fonction va afficher ceci.

229
00:17:14,282 --> 00:17:18,631
Une fois la fonction "affiche" exécutée, 
on va revenir dans la fonction "main",

230
00:17:18,631 --> 00:17:24,656
c'est-à-dire ici. On va exécuter 
l'instruction "return"

231
00:17:24,715 --> 00:17:27,401
et terminer le programme.

232
00:17:27,450 --> 00:17:30,955
On peut affecter une variable 
de type "structure"

233
00:17:30,955 --> 00:17:36,345
à une variable du même type, par exemple
je déclare ici une variable p1

234
00:17:36,345 --> 00:17:41,292
de type "Personne" en initialisant 
ces champs à ces valeurs.

235
00:17:41,463 --> 00:17:45,496
Ensuite, je déclare une variable p2,
également de type "Personne",

236
00:17:45,496 --> 00:17:49,886
mais sans initialiser la valeur 
de ces champs,

237
00:17:49,886 --> 00:17:52,853
et dans cette dernière instruction 
qui est une affectation,

238
00:17:52,853 --> 00:17:57,593
je vais recopier la valeur des champs 
de la variable p1 dans les champs

239
00:17:57,593 --> 00:18:02,070
de la variable p2, c'est-à-dire que
cette affectation est équivalente

240
00:18:02,070 --> 00:18:07,143
à ces quatre affectations, 
qui recopieraient, champ par champ,

241
00:18:08,333 --> 00:18:13,608
la variable p1 dans p2, c'est-à-dire 
par exemple ici, je recopie la valeur

242
00:18:13,608 --> 00:18:17,336
du champ "nom" de p1 
dans le champ "nom" de p2.

243
00:18:18,553 --> 00:18:22,007
Mais attention : l'affectation est 
la seule opération qu'on peut faire

244
00:18:22,007 --> 00:18:25,668
de façon globale sur des variables 
de type "structure".

245
00:18:25,668 --> 00:18:29,079
On ne peut pas les comparer, 
ni les afficher globalement.

246
00:18:29,079 --> 00:18:35,370
Si je reprends l'exemple précédent,
j'avais le droit d'écrire p2=p1,

247
00:18:35,370 --> 00:18:38,824
qui est une affectation.
Par-contre, je n'ai pas le droit d'écrire

248
00:18:38,868 --> 00:18:48,123
p1==p2 pour comparer p1 et p2, ni d'écrire
par exemple cout<<p1 pour afficher

249
00:18:48,123 --> 00:18:53,414
les valeurs des champs de p1.
Dans ce cas-là, je suis obligé de procéder

250
00:18:53,616 --> 00:18:58,113
champ par champ, par exemple 
je peux utiliser cette instruction

251
00:18:58,113 --> 00:19:02,554
pour afficher les quatre champs de p1
mais évidemment, il vaut mieux écrire

252
00:19:02,554 --> 00:19:06,686
une fonction qui ferait 
cette comparaison ou cet affichage,

253
00:19:06,686 --> 00:19:09,222
c'est ce que nous avions fait 
avec la fonction "affiche"

254
00:19:09,222 --> 00:19:10,898
d'un exemple précédent.

255
00:19:11,805 --> 00:19:17,423
Notez enfin que si les opérateurs == et <<
ne sont pas définis a priori

256
00:19:17,423 --> 00:19:23,344
par les structures, en C++ un programmeur
a la possibilité de les définir lui-même,

257
00:19:23,344 --> 00:19:26,071
c'est ce qu'on appelle 
la surcharge d'opérateur

258
00:19:26,071 --> 00:19:31,108
mais ceci sort du cadre de ce cours.
Pour le moment, rappelez-vous

259
00:19:31,108 --> 00:19:35,252
que vous devez faire la comparaison
ou l'affichage champ par champ.

260
00:19:36,114 --> 00:19:39,257
Revenons sur l'exemple 
du début de cette vidéo.

261
00:19:39,298 --> 00:19:44,858
Si vous vous souvenez, je voulais stocker 
en mémoire l'ensemble de ces valeurs ;

262
00:19:44,858 --> 00:19:48,826
et bien maintenant, je vais pouvoir 
utiliser un tableau dont les éléments

263
00:19:48,826 --> 00:19:52,851
seront de type "structure".
Donc je vais commencer par déclarer

264
00:19:52,851 --> 00:19:57,676
la structure "Personne" qui regroupe
les quatre champs qui m'intéressent,

265
00:19:57,676 --> 00:20:01,662
c'est-à-dire le nom, la taille, l'âge 
et le sexe d'une personne.

266
00:20:02,642 --> 00:20:06,572
Et je vais déclarer un tableau
que j'ai appelé "Personnes" ici,

267
00:20:06,777 --> 00:20:11,155
dont les éléments
seront de type "Personne".

268
00:20:11,779 --> 00:20:18,800
Maintenant, chaque ligne de cette table
va correspondre à un élément

269
00:20:18,800 --> 00:20:23,683
de mon tableau. Chaque colonne 
de la table va correspondre

270
00:20:23,683 --> 00:20:27,669
à un différent champ 
des éléments du tableau.

271
00:20:28,077 --> 00:20:32,587
Je peux représenter le début 
de mon tableau "Personnes" de cette façon :

272
00:20:33,617 --> 00:20:37,745
Chaque élément du tableau "Personnes"
va contenir un champ "nom",

273
00:20:38,457 --> 00:20:43,272
un champ "taille", etc.

274
00:20:47,157 --> 00:20:51,846
Tout ceci constitue 
le premier élément du tableau "Personnes".

275
00:20:51,846 --> 00:20:56,797
Et cette affectation va mettre, 
entre autres, ces valeurs

276
00:20:56,797 --> 00:21:00,696
dans le premier élément
du tableau "Personnes", c'est-à-dire que

277
00:21:00,696 --> 00:21:05,519
Dupond va aller dans ce champ, 
1,75 dans ce champ,

278
00:21:05,519 --> 00:21:10,081
41 ici et M ici.

279
00:21:10,799 --> 00:21:13,968
J'ai dit que les structures étaient
également utiles pour permettre

280
00:21:13,968 --> 00:21:17,183
aux fonctions de renvoyer 
plusieurs valeurs, par exemple

281
00:21:17,183 --> 00:21:22,021
je peux avoir envie d'écrire une fonction 
"division_euclidienne", qui renverrait

282
00:21:22,021 --> 00:21:27,106
à la fois le quotient et le reste 
de deux valeurs passées en argument ;

283
00:21:27,276 --> 00:21:30,756
et bien dans un tel cas, 
j'ai plusieurs solutions possibles :

284
00:21:30,756 --> 00:21:34,094
je peux donc faire renvoyer, 
par la fonction, une structure

285
00:21:34,094 --> 00:21:38,057
qui va contenir les différentes valeurs 
à retourner.

286
00:21:38,057 --> 00:21:42,453
Une deuxième possibilité est de passer 
des variables par référence

287
00:21:42,453 --> 00:21:46,275
et de les affecter à l'intérieur 
de la fonction aux valeurs

288
00:21:46,275 --> 00:21:47,717
que la fonction doit calculer.

289
00:21:48,091 --> 00:21:51,119
Nous allons voir un exemple
sur le transparent suivant.

290
00:21:51,119 --> 00:21:54,966
Une troisième possibilité, dans le cas
où toutes les valeurs sont de même type,

291
00:21:54,966 --> 00:21:58,312
est de faire renvoyer, par la fonction, 
un tableau dynamique

292
00:21:58,312 --> 00:22:00,671
qui va contenir ces valeurs.

293
00:22:01,327 --> 00:22:05,153
Dans des cas plus complexes, 
on peut avoir aussi envie de combiner

294
00:22:05,153 --> 00:22:11,969
les solutions 1 et 3, c'est-à-dire 
renvoyer une structure,

295
00:22:11,969 --> 00:22:14,209
avec des champs vecteurs, 
qui vont contenir

296
00:22:14,209 --> 00:22:19,005
plusieurs données homogènes ou 
des vecteurs de structure contenant

297
00:22:19,005 --> 00:22:22,313
des valeurs hétérogènes.
Par exemple, dans le cas

298
00:22:22,313 --> 00:22:25,441
de cette fonction "division_euclidienne",
qui aurait deux paramètres :

299
00:22:25,441 --> 00:22:28,490
un pour le dividende, 
l'autre pour le diviseur,

300
00:22:28,491 --> 00:22:33,960
la première solution consisterait 
tout d'abord à déclarer une structure,

301
00:22:33,960 --> 00:22:39,942
qu'on a appelée ici "Résultat", 
qui contiendrait un champ pour le quotient

302
00:22:39,942 --> 00:22:43,653
et un champ pour le reste, 
et définir le type de retour

303
00:22:43,653 --> 00:22:46,728
de la fonction "division_euclidienne"
comme "Resultat".

304
00:22:46,757 --> 00:22:50,690
Dans un tel cas, j'appellerais
ma fonction "division_euclidienne"

305
00:22:50,690 --> 00:22:53,056
de la façon suivante :

306
00:22:53,056 --> 00:22:59,549
"Résultat", pour définir le type
d'une variable qui recevrait le résultat,

307
00:22:59,549 --> 00:23:04,784
en lui passant deux valeurs, 
pour le dividende et le diviseur.

308
00:23:05,064 --> 00:23:08,093
La deuxième solution
consiste à ajouter deux paramètres

309
00:23:08,093 --> 00:23:11,407
passés par référence
et utiliser ma fonction va se faire

310
00:23:11,407 --> 00:23:14,031
de la façon suivante.
Je vais commencer par déclarer

311
00:23:14,031 --> 00:23:17,929
deux variables supplémentaires,
qui vont me servir à stocker les valeurs

312
00:23:17,929 --> 00:23:22,462
calculées par la fonction.
Et je peux ensuite appeler ma fonction

313
00:23:22,462 --> 00:23:24,959
de cette façon.

314
00:23:25,163 --> 00:23:30,692
La troisième solution consiste à définir 
le type de retour de la fonction

315
00:23:30,692 --> 00:23:33,776
comme un tableau entier à deux éléments.

316
00:23:34,906 --> 00:23:38,860
Et ma fonction s'appellerait alors ainsi.

317
00:23:43,020 --> 00:23:47,354
On a utilisé ici le type "array" mais 
on pourrait utiliser aussi

318
00:23:47,354 --> 00:23:51,926
le type "vector", puisque le type "vector"
est la forme la plus générale de tableau.

319
00:23:52,330 --> 00:23:55,313
En résumé, les structures permettent 
de regrouper plusieurs données

320
00:23:55,313 --> 00:24:00,135
sous un même type et servent à représenter
des entités comme des personnes ou

321
00:24:00,135 --> 00:24:04,515
des dates, à faire retourner aux fonctions
plusieurs valeurs,

322
00:24:04,515 --> 00:24:09,037
et plus généralement à simplifier
la conception et l'écriture de programmes.

323
00:24:09,037 --> 00:24:11,710
Donc je vous invite maintenant 
à répondre au quizz

324
00:24:11,710 --> 00:24:14,712
pour tester les connaissances 
que vous avez acquises

325
00:24:14,712 --> 00:24:16,513
sur cette nouvelle leçon.
