1
00:00:05,591 --> 00:00:09,039
Je voudrais dans cette séquence vidéo,
résumer la méthodologie générale

2
00:00:09,039 --> 00:00:14,631
que je vous conseille de suivre
pour concevoir, écrire, une fonction.

3
00:00:14,631 --> 00:00:15,674
Donc tout d'abord,

4
00:00:15,674 --> 00:00:19,373
je vous demande de clairement
identifier ce que la fonction doit faire.

5
00:00:19,373 --> 00:00:20,826
C'est vraiment le point important.

6
00:00:20,826 --> 00:00:24,246
Il faut commencer par identifier
ce que la fonction doit faire.

7
00:00:24,246 --> 00:00:26,404
Ça ne sert à rien
d'essayer d'écrire une fonction

8
00:00:26,404 --> 00:00:28,817
si vous savez pas clairement
ce que vous voulez faire.

9
00:00:28,888 --> 00:00:30,848
Donc c'est vraiment ici
un point conceptuel.

10
00:00:30,848 --> 00:00:33,995
Il n'y a aucune ligne de c++ à écrire ici.

11
00:00:33,995 --> 00:00:35,986
Mais il y a vraiment à concevoir,

12
00:00:37,977 --> 00:00:39,969
éventuellement en vous aidant d'un papier
et d'un crayon en faisant des schémas,

13
00:00:39,969 --> 00:00:42,856
à concevoir ce que la fonction doit faire.

14
00:00:42,856 --> 00:00:46,353
On s'intéresse ici vraiment
à ce que fait la fonction.

15
00:00:46,353 --> 00:00:49,280
On s'intéresse au "quoi" et on s'intéresse
absolument pas pour l'instant

16
00:00:49,280 --> 00:00:52,137
à "comment" faire
ce que la fonction doit faire.

17
00:00:52,137 --> 00:00:55,319
Et c'est là où il faut bien
faire attention de ne pas faire

18
00:00:55,319 --> 00:00:58,813
ce que l'on a appelé précédemment
dans la vidéo sur les prototypes

19
00:00:58,813 --> 00:01:00,697
"des effets de bord".

20
00:01:00,697 --> 00:01:02,434
C'est à dire que la fonction doit faire

21
00:01:02,434 --> 00:01:06,065
exactement ce pourquoi
elle a été prévue, ni plus ni moins.

22
00:01:06,065 --> 00:01:09,955
Si par exemple vous avez conçu
une fonction <i>sqrt</i>

23
00:01:09,955 --> 00:01:12,904
dont le but est de calculer
la racine carrée d'un <i>double</i>

24
00:01:12,904 --> 00:01:14,379
par exemple ici <i>x</i>

25
00:01:14,379 --> 00:01:19,856
et dont l'appel correspondrait
par exemple comme ça à <i>z=sqrt(x)</i>

26
00:01:19,856 --> 00:01:24,497
La fonction ici <i>sqrt</i> doit simplement
calculer la racine carrée de <i>x</i>

27
00:01:24,497 --> 00:01:25,732
et la retourner à z.

28
00:01:25,732 --> 00:01:28,934
Elle ne doit pas polluer
l'affichage sur le terminal

29
00:01:28,934 --> 00:01:31,018
avec des valeurs affichées.

30
00:01:31,018 --> 00:01:36,671
Elle doit juste calculer, sans afficher,
la valeur de la racine carrée de <i>x</i>.

31
00:01:37,691 --> 00:01:41,250
Ensuite, quand vous avez fait ceci,
vous devez vous demander :

32
00:01:41,250 --> 00:01:42,982
qu'est-ce que la fonction doit recevoir ?

33
00:01:42,982 --> 00:01:46,382
Quels sont les arguments
que la fonction doit recevoir ?

34
00:01:46,382 --> 00:01:49,278
Si par exemple je reprends l'exemple
de notre fonction <i>moyenne</i>.

35
00:01:49,278 --> 00:01:52,457
Donc très clairement au début,
j'ai pensé que c'était une fonction

36
00:01:52,457 --> 00:01:55,894
qui devait calculer la moyenne
de 2 nombres réels.

37
00:01:55,894 --> 00:01:57,308
Elle prendra 2 nombres réels

38
00:01:57,308 --> 00:01:59,918
et elle calculera la moyenne
de 2 nombres réels.

39
00:01:59,918 --> 00:02:04,304
Donc ici, à ce stade-là, je me dis qu'elle
va recevoir deux arguments de type <i>double</i>.

40
00:02:04,304 --> 00:02:08,886
Par exemple je peux les appeler <i>x</i> et <i>y</i>.

41
00:02:09,926 --> 00:02:13,526
Ensuite vous allez vous demander
si vous devez passer vos arguments

42
00:02:13,526 --> 00:02:15,727
par valeur ou par référence.

43
00:02:15,727 --> 00:02:18,274
Je vous rappelle brièvement
qu'il existe deux types de passage :

44
00:02:18,274 --> 00:02:20,463
le passage par valeur, qui fait une copie

45
00:02:20,463 --> 00:02:24,193
et ne permet donc pas à la fonction
de modifier les arguments reçus

46
00:02:24,193 --> 00:02:26,092
et le passage par référence

47
00:02:26,152 --> 00:02:33,131
qui sera utilisé lorsque on veut modifier
les arguments reçus passés à la fonction.

48
00:02:33,261 --> 00:02:38,945
Donc si je prends l'exemple ici
d'un appel à la fonction moyenne,

49
00:02:38,945 --> 00:02:44,427
où on passerait ici
deux arguments <i>a</i> et <i>b</i>.

50
00:02:44,427 --> 00:02:47,980
La question : est-ce que moyenne
va modifier <i>a</i> ou modifier <i>b</i> ?

51
00:02:47,980 --> 00:02:50,482
La réponse ici est clairement : non.

52
00:02:50,482 --> 00:02:53,901
Et donc ici, on va faire
un passage par valeur.

53
00:02:55,671 --> 00:02:58,321
Si par contre vous pensez
que votre fonction

54
00:02:58,328 --> 00:03:00,677
doit modifier les arguments
qu'elle a reçu,

55
00:03:00,677 --> 00:03:03,391
alors à ce moment-là il faudra faire
un passage par référence

56
00:03:03,391 --> 00:03:06,268
comme on a vu dans la vidéo
concernant l'appel.

57
00:03:07,038 --> 00:03:10,370
Ensuite vous pouvez de façon optionnelle
vous demander si ça a un sens

58
00:03:10,370 --> 00:03:14,041
de donner une valeur par défaut
aux paramètres correspondants.

59
00:03:14,041 --> 00:03:16,959
Ceci sera traité
dans une autre vidéo plus tard,

60
00:03:16,959 --> 00:03:20,023
mais c'est à cet endroit-là
que vous vous poseriez la question.

61
00:03:20,743 --> 00:03:21,883
Quatrième étape :

62
00:03:22,793 --> 00:03:25,622
vous demander de quel type
doit-être la valeur

63
00:03:25,622 --> 00:03:28,444
que la fonction doit retourner
au reste du programme.

64
00:03:28,444 --> 00:03:31,862
Donc pour ça, vous écrivez le code
comme ça dans votre tête

65
00:03:31,862 --> 00:03:35,682
z = "appel de votre fonction
avec les différents arguments"

66
00:03:36,522 --> 00:03:40,448
Est-ce que ça a un sens d'écrire
z = "un appel de la fonction" ?

67
00:03:40,448 --> 00:03:42,966
Donc par exemple,
est-ce que ça a un sens d'écrire

68
00:03:42,966 --> 00:03:45,760
z = "la moyenne de <i>a</i> et <i>b</i>" ?

69
00:03:45,760 --> 00:03:47,891
Dans notre cas évidemment ça a un sens,

70
00:03:47,891 --> 00:03:51,851
et le sens c'est que <i>z</i> à ce moment-là
sera la moyenne de <i>a</i> et <i>b</i>.

71
00:03:51,851 --> 00:03:56,937
Donc si ça a un sens,
le type de retour doit être le type de <i>z</i>

72
00:03:56,937 --> 00:03:58,955
pour lequel cette expression a un sens.

73
00:03:58,955 --> 00:04:02,149
Donc ici ça sera typiquement un <i>double</i>

74
00:04:02,149 --> 00:04:05,110
et donc ça veut dire
que la fonction <i>moyenne</i>

75
00:04:05,110 --> 00:04:08,621
doit retourner un <i>double</i>.

76
00:04:09,131 --> 00:04:12,417
Si une telle expression n'a pas de sens,

77
00:04:12,417 --> 00:04:17,045
si ça n'a absolument pas de sens
d'écrire z = "appel de fonction",

78
00:04:17,045 --> 00:04:19,242
par exemple est-ce que
ça aurait un sens d'écrire

79
00:04:19,242 --> 00:04:23,737
z = "affiche", on avait vu
tout à l'heure "afficher racine".

80
00:04:23,737 --> 00:04:27,541
Est-ce que ça a un sens d'écrire
z = "affiche racine de 2" ?

81
00:04:27,541 --> 00:04:29,402
Attention ici c'était bien "afficher".

82
00:04:29,402 --> 00:04:31,309
C'était pas "calculer la racine de 2".

83
00:04:31,309 --> 00:04:32,967
Qu'est-ce que serait <i>z</i> dans ce cas-là ?

84
00:04:32,967 --> 00:04:36,260
Moi je vois pas très bien
à quoi ça pourrait faire référence.

85
00:04:36,260 --> 00:04:39,756
"Afficher" affiche et puis c'est tout,
n'a rien à retourner ici.

86
00:04:39,756 --> 00:04:42,786
Donc cette expression à mon avis
non, n'aurait pas de sens

87
00:04:42,786 --> 00:04:45,762
et dans ce cas-là le type de retour
est à ce moment-là,

88
00:04:45,762 --> 00:04:47,876
on appelle ça une procédure,

89
00:04:47,876 --> 00:04:50,873
donc le type de retour
est à ce moment-là <i>void</i>.

90
00:04:51,703 --> 00:04:53,739
Cinquième et dernière étape enfin.

91
00:04:53,739 --> 00:04:56,249
Maintenant et c'est seulement
maintenant, pas avant,

92
00:04:56,249 --> 00:05:00,477
vous vous préoccupez du "comment" :
comment écrire le corps de la fonction,

93
00:05:00,477 --> 00:05:03,440
comment la fonction va faire
ce qu'elle a à faire.

94
00:05:03,440 --> 00:05:07,775
Au préalable on s'était uniquement
préoccupé du "quoi"

95
00:05:07,775 --> 00:05:11,502
et c'est seulement ici, tout à la fin,
qu'on se préoccupe du "comment".

96
00:05:11,502 --> 00:05:15,847
Si je vous donne l'exemple
de la fonction <i>moyenne</i> dont je sais,

97
00:05:15,847 --> 00:05:19,919
par les étapes précédentes,
qu'elle doit retourner un <i>double</i>.

98
00:05:19,919 --> 00:05:24,617
Elle s'écrit <i>moyenne</i>,

99
00:05:24,617 --> 00:05:28,545
elle reçoit un argument <i>x</i> par valeur,

100
00:05:28,545 --> 00:05:31,314
puisque cet argument
doit pas être modifié,

101
00:05:31,314 --> 00:05:33,646
elle reçoit un deuxième argument <i>y</i>.

102
00:05:33,646 --> 00:05:39,382
On va s'intéresser maintenant
à comment écrire cette fonction.

103
00:05:39,382 --> 00:05:42,503
Donc ici je vous conseille
de commencer par, par exemple,

104
00:05:42,503 --> 00:05:47,780
déclarer une variable
que l'on va appeler <i>résultat</i>,

105
00:05:49,180 --> 00:05:53,802
que l'on va initialiser à une valeur
qui fait sens, disons ici 0,

106
00:05:53,802 --> 00:05:59,031
et tout de suite écrire un <i>return</i> de 7

107
00:05:59,031 --> 00:06:00,760
qui utilise cette variable.

108
00:06:00,760 --> 00:06:04,239
Je vous encourage à procéder de la sorte
à chaque fois que vous avez comme ça,

109
00:06:04,239 --> 00:06:08,756
une fonction qui retourne un type définit,
donc par exemple ici un <i>double</i>,

110
00:06:08,756 --> 00:06:11,991
à définir ici tout de suite une variable

111
00:06:11,991 --> 00:06:14,357
que vous allez utiliser
comme valeur de retour.

112
00:06:14,357 --> 00:06:17,910
Comme ça, ça vous facilite
l'écriture de ce corps.

113
00:06:17,910 --> 00:06:19,049
Et ensuite, donc maintenant,

114
00:06:19,049 --> 00:06:21,795
on va se demander
comment on calcule ce résultat.

115
00:06:22,365 --> 00:06:24,393
Donc ici on pourrait écrire

116
00:06:25,203 --> 00:06:30,851
<i>résultat = (x + y) / 2</i>

117
00:06:33,261 --> 00:06:35,031
Supposons que l'on veuille
faire une fonction

118
00:06:35,031 --> 00:06:39,399
qui demande un nombre à l'utilisateur
compris entre deux bornes.

119
00:06:39,399 --> 00:06:44,231
Première étape, c'est donc de spécifier
clairement ce que doit faire la fonction.

120
00:06:44,741 --> 00:06:47,717
Pour cela, on peut par exemple
commencer par faire un commentaire

121
00:06:47,717 --> 00:06:49,911
qui va indiquer ce que fait la fonction.

122
00:06:50,701 --> 00:06:54,903
Donc ici on va indiquer
que c'est une fonction

123
00:06:55,513 --> 00:06:58,145
qui demande un nombre

124
00:06:58,255 --> 00:07:01,111
compris entre deux bornes,

125
00:07:01,911 --> 00:07:08,567
par exemple un entier
compris entre 1 et 10.

126
00:07:08,727 --> 00:07:13,963
Donc on va nommer cette fonction,
par exemple <i>demander nombre</i>

127
00:07:14,353 --> 00:07:15,828
On suppose qu'on est donc maintenant

128
00:07:15,828 --> 00:07:18,138
assez au clair avec ce que
doit faire la fonction

129
00:07:18,138 --> 00:07:20,113
et on va donc pouvoir passer
à la deuxième étape,

130
00:07:20,113 --> 00:07:23,931
qui est d'indiquer
les paramètres de la fonction.

131
00:07:23,931 --> 00:07:27,885
Donc ici comme on veut demander
un nombre entre deux bornes,

132
00:07:27,885 --> 00:07:30,734
les paramètres que doit recevoir
la fonction pour travailler,

133
00:07:30,734 --> 00:07:32,732
ce sont bien sûr les deux bornes.

134
00:07:32,732 --> 00:07:36,283
Donc supposons qu'on travaille
sur des entiers ici.

135
00:07:36,283 --> 00:07:40,353
Donc les deux bornes
seront un entier "borne inférieure"

136
00:07:41,123 --> 00:07:44,797
et puis un entier "borne supérieure".

137
00:07:45,777 --> 00:07:49,331
Donc on doit recevoir ici deux entiers.

138
00:07:50,711 --> 00:07:54,395
Ensuite, il faut se demander
si les 2 paramètres que l'on a passé

139
00:07:54,395 --> 00:07:56,956
doivent être modifiés
ou non par la fonction.

140
00:07:56,956 --> 00:07:59,549
Si on doit les passer par valeur
ou par référence.

141
00:07:59,879 --> 00:08:00,927
Il semble clair ici

142
00:08:00,927 --> 00:08:03,169
que la borne inférieure
et la borne supérieure

143
00:08:03,169 --> 00:08:07,108
ne seront pas modifiées
par le fait de demander un nombre,

144
00:08:07,598 --> 00:08:11,341
et donc on va les passer comme indiqué ici

145
00:08:11,341 --> 00:08:12,776
les passer par valeurs.

146
00:08:13,226 --> 00:08:17,068
On peut alors passer maintenant
à l'étape numéro 4,

147
00:08:17,068 --> 00:08:22,897
qui est de savoir quel doit-être
le type de retour de la fonction.

148
00:08:23,457 --> 00:08:25,278
Une bonne façon de répondre
à cette question,

149
00:08:25,988 --> 00:08:28,940
c'est de se poser la question :
comment serait appelée la fonction ?

150
00:08:28,940 --> 00:08:33,429
Et là typiquement, la fonction
serait appelée avec un entier <i>i</i>

151
00:08:33,429 --> 00:08:35,339
et on ferait un appel comme ça :

152
00:08:35,339 --> 00:08:43,043
<i>i = demander_nombre (pris entre,
on avait dit par exemple 1 et 10)</i>

153
00:08:45,047 --> 00:08:49,901
Lorsque l'on a comme ça des affectations
qui peuvent récupérer la valeur de retour,

154
00:08:49,901 --> 00:08:53,367
où ça a un sens de récupérer
la valeur de retour d'une fonction,

155
00:08:53,367 --> 00:08:57,783
alors naturellement,
le type de retour de la fonction

156
00:08:57,783 --> 00:09:02,929
doit être le type qu'aurait une variable
dans une telle affectation.

157
00:09:02,929 --> 00:09:05,271
Donc ici, ça aurait un sens
d'écrire ce que j'ai écrit.

158
00:09:05,271 --> 00:09:07,550
Le type de <i>i</i> serait un <i>int</i>,

159
00:09:07,550 --> 00:09:12,819
ce qui fait que le type de retour
de la fonction que nous allons indiquer

160
00:09:13,339 --> 00:09:15,144
va être un type <i>entier</i>.

161
00:09:15,934 --> 00:09:19,210
On peut donc revenir ici
dans notre programme,

162
00:09:19,210 --> 00:09:26,132
et indiquer le type de retour,
comme étant un entier.

163
00:09:27,702 --> 00:09:30,376
Je peux donc maintenant
passer à la dernière étape.

164
00:09:30,376 --> 00:09:31,897
Maintenant et seulement maintenant,

165
00:09:31,897 --> 00:09:35,552
je me préoccupe d'écrire
le corps de la fonction.

166
00:09:36,222 --> 00:09:39,514
Donc pour ceci je commence
par écrire le corps

167
00:09:39,514 --> 00:09:41,342
et, un petit truc ici,

168
00:09:41,342 --> 00:09:46,878
lorsque vous avez une valeur
de retour à renvoyer par la fonction,

169
00:09:46,878 --> 00:09:50,602
je vous conseille de directement
déclarer une variable

170
00:09:50,602 --> 00:09:52,725
qui va être utilisée pour le retour.

171
00:09:52,725 --> 00:09:55,968
Le mieux c'est aussi
de l'initialiser directement

172
00:09:55,968 --> 00:10:01,317
et de tout de suite indiquer
vous allez retourner cette valeur.

173
00:10:02,121 --> 00:10:04,547
Et vous pouvez donc
maintenant vous concentrer

174
00:10:04,547 --> 00:10:10,063
sur ici écrire exactement
le corps de la fonction,

175
00:10:10,063 --> 00:10:11,818
vous préoccuper maintenant du "comment".

176
00:10:11,818 --> 00:10:14,456
Comment faire pour demander
un nombre compris

177
00:10:14,456 --> 00:10:17,145
entre la borne inférieure
et la borne supérieure.

178
00:10:17,145 --> 00:10:19,401
Je vous laisse le faire
en guise d'exercice.
