1
00:00:05,834 --> 00:00:08,396
Dans une séquence vidéo précédente,
nous avons examiné les cinq étapes

2
00:00:08,396 --> 00:00:10,998
qui se déroulent dans le cas
le plus général lorsqu'on appelle

3
00:00:10,998 --> 00:00:11,964
une fonction

4
00:00:11,964 --> 00:00:15,521
Dans les exemples vus jusqu'à lors,
les arguments passés à la fonction

5
00:00:15,521 --> 00:00:18,612
étaient soit de simples valeurs,
soit des expressions à évaluer.

6
00:00:18,612 --> 00:00:21,673
Nous allons aujourd'hui examiner
un peu plus finement ce qu'il se passe

7
00:00:21,673 --> 00:00:24,919
lorsque les arguments passés à la fonction
sont des variables.

8
00:00:24,919 --> 00:00:28,071
Partons d'un exemple concret.
Nous avons ici un petit programme

9
00:00:28,071 --> 00:00:32,182
principal dont la première instruction
consiste à déclarer une variable « val »

10
00:00:32,182 --> 00:00:34,744
et l'initialiser avec la valeur 1.

11
00:00:34,744 --> 00:00:38,364
La 2e instruction de ce programme appelle
la fonction « f » qui est définie ici,

12
00:00:38,809 --> 00:00:42,728
en lui fournissant justement en argument,
la variable « val » que nous venons juste

13
00:00:42,728 --> 00:00:43,897
de déclarer.

14
00:00:44,264 --> 00:00:48,140
Nous avons vu dans une séquence précédente
qu'au moment de cet appel il y a une

15
00:00:48,140 --> 00:00:52,534
mise en correspondance entre l'argument
d'appel de la fonction et la liste des

16
00:00:52,534 --> 00:00:54,784
paramètres attendus par la fonction.

17
00:00:54,784 --> 00:00:58,757
Donc ici nous avons deux entités,
nous avons une variable « x » utilisée

18
00:00:58,757 --> 00:01:04,418
par la fonction. Et il se trouve que
la fonction « f » altère cette variable,

19
00:01:05,050 --> 00:01:07,369
la modifie en l'incrémentant
d'une unité.

20
00:01:07,369 --> 00:01:09,935
La question que nous nous posons
maintenant est la suivante :

21
00:01:09,935 --> 00:01:13,187
Est-ce que « x » et « val » sont la
même zone mémoire ?

22
00:01:13,187 --> 00:01:17,787
Ce qui veut dire concrètement
que l'altération de "x" aura une

23
00:01:17,787 --> 00:01:19,939
incidence sur « val » ou non.

24
00:01:22,596 --> 00:01:25,466
Il existe en programmation deux types
de passage d'arguments.

25
00:01:25,869 --> 00:01:28,203
Le passage par valeur 
et le passage par référence.

26
00:01:28,822 --> 00:01:32,896
Donc examinons sur le même exemple
que vu précédemment

27
00:01:32,896 --> 00:01:35,940
ce qui se produit 
dans l'un ou l'autre des cas.

28
00:01:35,940 --> 00:01:43,666
Donc nous avons une petite fonction « f »
qui prend en paramètre un entier « x »

29
00:01:43,666 --> 00:01:45,775
Elle a pour type de retour <i>void</i>
ce qui veut dire simplement

30
00:01:45,775 --> 00:01:47,943
qu'elle ne retourne aucune valeur,
d'ailleurs il n'y a pas

31
00:01:47,943 --> 00:01:49,911
d'instruction <i>return</i>.

32
00:01:49,911 --> 00:01:52,158
Et ce que réalise cette fonction
est d'incrémenter la valeur

33
00:01:52,158 --> 00:01:54,314
de son paramètre « x » égal à « x+1 ».

34
00:01:54,314 --> 00:01:57,484
Si une fonction utilise le passage
par valeur, cela signifie que

35
00:02:00,654 --> 00:02:03,826
le paramètre « x » de la fonction correspond
à une zone locale à la fonction.

36
00:02:03,826 --> 00:02:08,181
Ce qui signifie que, au moment où on
invoque la fonction en lui passant

37
00:02:08,181 --> 00:02:11,995
en argument une variable, variable qui
est définie à un autre endroit

38
00:02:11,995 --> 00:02:15,571
du programme comme par exemple ici,
dans le programme principal.

39
00:02:15,571 --> 00:02:21,141
Au moment où on appelle la fonction,
on va copier la valeur de la variable

40
00:02:21,141 --> 00:02:25,622
passée en argument 
dans la zone locale à la fonction.

41
00:02:25,622 --> 00:02:30,025
Ce qui signifie que lorsque j'exécute
ce traitement, je vais altérer

42
00:02:30,025 --> 00:02:34,758
la zone locale, la variable passée
comme argument.

43
00:02:34,758 --> 00:02:38,499
Ceci correspond au passage par valeur.

44
00:02:38,499 --> 00:02:42,987
Pour indiquer que l'on souhaite
utiliser un passage par référence,

45
00:02:42,987 --> 00:02:48,970
on va spécifier l'en-tête de la fonction
d'une façon un peu particulière en C++

46
00:02:48,970 --> 00:02:54,049
Donc on va indiquer par un symbole
particulier, le « & » que la fonction « f »

47
00:02:54,049 --> 00:02:58,378
travaille par référence.
Lorsqu'on définit l'en-tête

48
00:02:58,378 --> 00:03:02,325
de la fonction de cette façon là,
on indique qu'au moment de l'appel

49
00:03:02,325 --> 00:03:08,564
« x » le paramètre de la fonction est une
référence à la variable passée en

50
00:03:08,564 --> 00:03:12,440
argument, donc est simplement un autre
nom pour la variable « val » passée

51
00:03:12,440 --> 00:03:17,764
en argument. Ici la variable « val »
valait donc 1, et le nom x référence

52
00:03:17,764 --> 00:03:21,880
le même emplacement mémoire qui est le
même que celui occupé par « val ».

53
00:03:21,880 --> 00:03:28,472
Et dans le cas présent, l'incrémentation
de « x » va correspondre aussi à une

54
00:03:28,472 --> 00:03:34,234
incrémentation de « val ». Lors d'un passage
par valeur, la fonction va travailler sur une

55
00:03:34,234 --> 00:03:37,866
copie de l'argument, ce qui signifie
que les modifications que l'on fait

56
00:03:37,866 --> 00:03:43,016
à l'intérieur de la fonction ne sont pas
répercutées à l'extérieur de la fonction.

57
00:03:43,016 --> 00:03:46,235
On travaille sur une zone locale,
et l'argument n'est pas altéré.

58
00:03:46,625 --> 00:03:50,576
Lorsqu'on utilise le passage
par référence, on indique que la

59
00:03:50,576 --> 00:03:57,286
variable locale qui est passée en argument
correspond à une référence sur l'objet

60
00:03:57,286 --> 00:04:00,504
associé à l'argument lors de l'appel,
et donc la différence principale c'est

61
00:04:00,504 --> 00:04:03,909
que toute modification effectuée à
l'intérieur de la fonction se répercute

62
00:04:03,909 --> 00:04:08,430
aussi, est visible aussi, une fois que
la fonction a terminé son exécution.

63
00:04:08,430 --> 00:04:14,799
En C++, on indique qu'une fonction
pour l'un de ses paramètres utilise

64
00:04:14,799 --> 00:04:18,956
le passage par référence en utilisant
un symbole particulier qui est le « & ».

65
00:04:18,956 --> 00:04:24,330
Typiquement, au moment du prototypage
de la fonction, on va indiquer que le

66
00:04:24,745 --> 00:04:28,522
paramètre « x » est passé par référence,
ici en l’occurrence il s'agit d'un double

67
00:04:28,522 --> 00:04:31,286
qui est passé par référence.

68
00:04:31,286 --> 00:04:35,873
Pour résumer, lors d'un passage par valeur,
le paramètre de la fonction est une zone

69
00:04:35,873 --> 00:04:38,976
locale à la fonction et toute altération
n'a d'incidence que sur la zone

70
00:04:38,976 --> 00:04:43,549
locale, ne se répercute pas sur la
variable passée en argument.

71
00:04:43,549 --> 00:04:47,248
Lors d'un passage par référence, on
indique que le paramètre de la fonction

72
00:04:47,248 --> 00:04:51,833
n'est autre qu'un nom supplémentaire
pour la variable passée en argument

73
00:04:51,833 --> 00:04:56,402
et toute altération du paramètre
altérera aussi la variable passée

74
00:04:56,402 --> 00:04:59,868
en argument. Si l'on prend maintenant
notre petit exemple introductif,

75
00:04:59,868 --> 00:05:04,266
nous avions donc un petit programme
principal qui déclarait une variable

76
00:05:04,266 --> 00:05:09,423
« val » donc le contenu est 1. Ensuite,
il y avait un appel de fonction.

77
00:05:09,423 --> 00:05:13,881
Si l'on examine, l'en-tête de la fonction,
il n'y a aucun symbole particulier,

78
00:05:13,881 --> 00:05:18,676
pas de « & », ce qui signifie que l'on
utilise ici le passage par valeur.

79
00:05:18,676 --> 00:05:23,389
Puisqu'on utilise le passage par valeur,
cela signifie que « x », le paramètre

80
00:05:23,389 --> 00:05:26,976
de la fonction est une zone locale et
que donc la valeur de « val » est copiée

81
00:05:26,976 --> 00:05:29,510
à l'intérieur de « x ».

82
00:05:29,510 --> 00:05:37,619
L'altération de « x » n'a d'incidence
que sur « x ». Si on affiche « x », on perçoit

83
00:05:37,703 --> 00:05:42,540
bien la modification de « x », par contre
lorsqu'on a terminé d'exécuter la fonction

84
00:05:42,540 --> 00:05:47,340
et qu'on fait afficher la valeur de « val »,
on voit bien que la valeur d'origine

85
00:05:47,340 --> 00:05:51,201
reste inchangée, et donc que « val »
vaut toujours 1.

86
00:05:51,617 --> 00:05:56,347
Si l'on reprend maintenant le même exemple
mais qu'on indique que la fonction travaille

87
00:05:56,347 --> 00:06:03,738
par référence au moyen du symbole « & »,
nous avons toujours une variable locale

88
00:06:03,738 --> 00:06:09,276
au <i>main</i> qui contient 1, au moment de
cet appel, vu qu'il y a un passage

89
00:06:09,276 --> 00:06:16,986
par référence, on indique simplement
que « x » est un autre nom pour l'argument

90
00:06:16,986 --> 00:06:21,125
passé à la fonction, donc pour « val ».
Ce qui veut dire ici qu'au moment où

91
00:06:21,125 --> 00:06:26,792
j'altère « x », j'altère également « val ».
L'affichage de « x » me montre bien

92
00:06:26,792 --> 00:06:34,219
l'altération de « x », l'affichage de « val »
me montre également l'altération de « val ».

93
00:06:35,566 --> 00:06:39,995
Donc concrètement, dans quelle situation
va-t-il être utile de recourir au passage

94
00:06:39,995 --> 00:06:43,098
par référence ? Et bien, simplement
lorsque l'on souhaite qu'une fonction

95
00:06:43,098 --> 00:06:46,323
soit capable de modifier une variable
qui lui est passée en argument.

96
00:06:46,323 --> 00:06:50,525
Supposons par exemple que je souhaite
écrire une fonction capable de saisir

97
00:06:50,525 --> 00:06:53,663
un entier. Donc le but de la fonction
serait de demander à l'utilisateur

98
00:06:53,663 --> 00:06:57,390
de saisir au clavier un entier, et bien
évidemment nous souhaitons récupérer

99
00:06:57,390 --> 00:07:00,796
la valeur saisie afin de pouvoir
l'exploiter dans un autre endroit

100
00:07:00,796 --> 00:07:04,293
du programme. Comment faire pour récupérer
cette valeur saisie ?

101
00:07:04,293 --> 00:07:08,120
Une première façon de procéder consiste
effectivement à utiliser le passage

102
00:07:08,120 --> 00:07:12,119
par référence. Donc dans le programme
qui appelle la fonction de saisie,

103
00:07:12,119 --> 00:07:16,582
on prévoit une variable qui va stocker
le résultat de la saisie, et on passe

104
00:07:16,582 --> 00:07:22,974
cette variable à la fonction saisie.
En fait lorsque la fonction s'exécute,

105
00:07:22,974 --> 00:07:26,534
l'utilisateur va introduire un nombre,
va saisir un nombre, et ce nombre

106
00:07:26,606 --> 00:07:30,601
va être saisi dans le paramètre local
de la fonction, supposant que l'utilisateur

107
00:07:30,601 --> 00:07:35,018
saisisse un 2 alors comme nous avons vu
que lors du passage par référence,

108
00:07:35,018 --> 00:07:39,866
l'argument passé est exactement la même
zone mémoire que le paramètre, si on a

109
00:07:39,866 --> 00:07:44,487
saisi un 2 dans « a_lire » il va se trouver
également dans « i », ce qui veut dire

110
00:07:44,487 --> 00:07:47,906
que lorsque la fonction a terminé de
s'exécuter, « i » se trouve avec la valeur

111
00:07:47,906 --> 00:07:52,796
saisie 2. Evidemment, il ne s'agit pas
de la seule façon possible de pouvoir

112
00:07:52,796 --> 00:07:56,425
programmer cette fonction de saisie.
La façon la plus naturelle et sans doute

113
00:07:56,425 --> 00:08:00,205
la meilleure est celle qui va utiliser
la valeur de retour pour récupérer

114
00:08:00,279 --> 00:08:04,757
le résultat de la saisie. Donc ici notre
fonction saisie de trouverait sans argument

115
00:08:04,757 --> 00:08:08,977
Lorsqu'elle s'exécute, elle va demander
une valeur à l'utilisateur qui va la

116
00:08:08,977 --> 00:08:12,645
saisir dans une variable locale à la
fonction puis la retourner pour qu'elle

117
00:08:12,645 --> 00:08:16,595
puisse être exploitée par le monde
extérieur. Donc ici, on serait dans la

118
00:08:16,595 --> 00:08:22,296
nécessité de recourir à l'affectation
pour récupérer la valeur de retour

119
00:08:22,296 --> 00:08:27,073
de la fonction de saisie dans une
variable, par exemple du programme

120
00:08:27,073 --> 00:08:30,401
principal qui sera utilisée dans le
programme principal.

121
00:08:30,401 --> 00:08:34,473
Nous voyons donc ici que nous avons deux
alternatives de codage pour la fonction

122
00:08:34,473 --> 00:08:38,744
de saisie dont l'une utilise le passage
par référence.

123
00:08:40,157 --> 00:08:43,812
Nous pouvons également tirer profit du
mécanisme du passage par référence

124
00:08:43,812 --> 00:08:47,619
pour gérer des situations 
où une fonction «retourne»

125
00:08:47,619 --> 00:08:51,772
plusieurs résultats. Imaginons par exemple
que l'on souhaite écrire une fonction

126
00:08:51,916 --> 00:08:54,983
qui convertit des coordonnées cartésiennes
en coordonnées polaires. La fonction

127
00:08:54,983 --> 00:08:58,582
prendrait donc en paramètres les deux
coordonnées cartésiennes, et il s'agit

128
00:08:58,582 --> 00:09:01,468
à partir de ces deux coordonnées
cartésiennes, de calculer des coordonnées

129
00:09:01,468 --> 00:09:05,332
polaires. Comme en C++, une fonction ne
peut retourner qu'un seul résultat,

130
00:09:05,332 --> 00:09:08,873
nous pouvons prendre le parti ici de ne
rien faire retourner à la fonction.

131
00:09:08,873 --> 00:09:15,128
Par contre, de lui fournir en paramètres
deux variables passées par références

132
00:09:15,128 --> 00:09:19,141
qui stockeront le résultat final.
Ce mécanisme est également utilisé

133
00:09:19,141 --> 00:09:24,972
par exemple pour pouvoir échanger le
contenu de deux variables, le passage

134
00:09:24,972 --> 00:09:28,152
par référence est ici indispensable
pour réaliser ce traitement.
