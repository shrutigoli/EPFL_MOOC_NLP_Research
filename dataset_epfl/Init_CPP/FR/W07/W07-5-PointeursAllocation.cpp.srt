1
00:00:02,839 --> 00:00:05,609
Dans la séquence d'introduction
sur les pointeurs, vous avez vu

2
00:00:05,609 --> 00:00:08,779
que ces derniers servent essentiellement
trois objectifs : ils permettent

3
00:00:08,779 --> 00:00:11,669
le référencement, c'est-à-dire pointer 
indirectement sur une donnée,

4
00:00:11,669 --> 00:00:15,009
la généricité, choisir, sélectionner 
une donnée non-connue

5
00:00:15,009 --> 00:00:18,049
au moment de la programmation, et enfin,
ils servent également à ce qu'on appelle

6
00:00:18,049 --> 00:00:21,079
l'allocation dynamique. C'est ce volet
qui va nous occuper maintenant.

7
00:00:22,504 --> 00:00:24,914
Lorsqu'un programme a besoin
de manipuler une donnée, il va

8
00:00:24,914 --> 00:00:28,714
être nécessaire d'allouer de la mémoire
pour justement y stocker cette donnée.

9
00:00:28,714 --> 00:00:33,224
Et en C++, vous disposez de deux façons
possibles d'allouer de la mémoire.

10
00:00:33,224 --> 00:00:36,474
La première façon que vous connaissez déjà
est ce que vous faîtes lorsque

11
00:00:36,474 --> 00:00:40,004
vous écrivez une ligne de code comme
celle-ci, une déclaration de variable.

12
00:00:40,004 --> 00:00:43,544
À ce moment-là, il y a ce qu'on appelle 
une allocation statique.

13
00:00:44,284 --> 00:00:45,774
Pourquoi parle-t-on de statique ?

14
00:00:45,954 --> 00:00:48,144
Eh bien, c'est par le fait 
que l'on n'a pas besoin

15
00:00:48,144 --> 00:00:51,534
d'attendre l'exécution du programme 
pour connaître le besoin en mémoire.

16
00:00:51,534 --> 00:00:54,704
Ici, au moment où l'on compile cette ligne
de code, eh bien on sait déjà

17
00:00:54,704 --> 00:00:57,614
que le programme va avoir besoin 
d'une zone mémoire dédiée

18
00:00:57,614 --> 00:01:00,224
à contenir un entier, et qui s'appelle v.

19
00:01:01,204 --> 00:01:05,204
Il existe par contre des situations où
le besoin en mémoire s'avère seulement

20
00:01:05,204 --> 00:01:07,464
au moment de l'exécution du programme.

21
00:01:07,464 --> 00:01:10,614
Et un exemple typique est lié à
l'utilisation des tableaux dynamiques

22
00:01:10,614 --> 00:01:13,384
de type vector que vous avez
eu l'occasion de croiser.

23
00:01:13,384 --> 00:01:16,944
Supposons que dans un programme
jaillit un vector d'entier v,

24
00:01:16,944 --> 00:01:22,294
et je peux parfaitement, donc, ajouter,
pendant que le programme s'exécute,

25
00:01:22,294 --> 00:01:26,294
une nouvelle case, une nouvelle cellule
à mon tableau, par le biais d'une ligne

26
00:01:26,297 --> 00:01:27,487
comme celle-ci.

27
00:01:27,919 --> 00:01:33,039
C'est au moment où j'exécute cette
ligne de code que cette fonctionnalité

28
00:01:33,039 --> 00:01:37,039
va faire l'allocation de mémoire
nécessaire à contenir ce nouvel entier.

29
00:01:37,039 --> 00:01:40,789
Donc, c'est seulement au moment où
cette ligne-là s'exécute que l'allocation

30
00:01:40,789 --> 00:01:44,559
a lieu, que le nouvel emplacement
mémoire est réservé pour les besoins

31
00:01:44,559 --> 00:01:45,859
de votre programme.

32
00:01:46,269 --> 00:01:51,349
Donc bien sûr, nous parlons dans ce
cas d'allocation dynamique,

33
00:01:52,179 --> 00:01:55,709
parce que nous avons besoin
d'attendre l'exécution du programme,

34
00:01:55,929 --> 00:02:00,009
non pas simplement la compilation
pour déterminer le besoin en mémoire.

35
00:02:00,909 --> 00:02:03,999
Pourquoi ? Parce qu'il n'est pas sûr
que cette ligne soit forcément exécutée,

36
00:02:03,999 --> 00:02:07,479
donc nous ne pouvons pas, 
au moment de la compilation,

37
00:02:07,479 --> 00:02:10,839
savoir quelle zone mémoire réserver.
Nous devons attendre l'exécution.

38
00:02:11,976 --> 00:02:15,331
Ici, la zone mémoire que nous avons
allouée dynamiquement via le push_back

39
00:02:15,331 --> 00:02:18,481
a été allouée pour contenir la valeur 3,
et nous nous trouvons donc

40
00:02:18,481 --> 00:02:19,701
dans cette situation.

41
00:02:21,244 --> 00:02:24,764
Vous noterez que dans le cas particulier
des pointeurs, l'allocation dynamique

42
00:02:24,764 --> 00:02:28,184
va permettre de manipuler des données
sans pour autant qu'elles soient associées

43
00:02:28,184 --> 00:02:31,544
à des noms explicites, sans pour autant
qu'elles correspondent à des variables.

44
00:02:32,113 --> 00:02:36,113
Par exemple, si dans un programme, on
dispose, on a déclaré un pointeur px,

45
00:02:36,113 --> 00:02:40,463
ce dernier peut parfaitement contenir
l'adresse d'un objet que l'on aurait

46
00:02:40,463 --> 00:02:43,253
alloué dynamiquement pendant que
le programme s'exécute.

47
00:02:43,253 --> 00:02:48,213
Donc, on peut parfaitement mettre dans
ce pointeur l'adresse de ce nouvel objet.

48
00:02:49,623 --> 00:02:52,733
Et ce que l'on peut constater,
c'est qu'il n'est pas nécessaire

49
00:02:52,733 --> 00:02:54,613
que cet objet ait un nom,

50
00:02:56,289 --> 00:03:00,289
il suffit d'y accéder par le biais
du pointeur qui y est associé.

51
00:03:01,298 --> 00:03:04,018
Très concrètement, si vous voulez
faire de l'allocation dynamique

52
00:03:04,018 --> 00:03:07,478
dans un programme C++, eh bien vous
pourrez utiliser deux opérateurs

53
00:03:07,478 --> 00:03:11,478
prédéfinis par le langage : l'opérateur
new qui permet d'allouer la mémoire

54
00:03:11,478 --> 00:03:15,718
qui vous est nécessaire, et l'opérateur
delete, la contre-partie, qui permet

55
00:03:15,718 --> 00:03:19,478
de libérer cette mémoire lorsque vous
n'en n'avez plus besoin dans le programme.

56
00:03:20,747 --> 00:03:24,747
L'utilisation de l'opérateur new se fait
selon la syntaxe suivante :

57
00:03:24,747 --> 00:03:27,847
vous devez mettre le nom
d'un pointeur qui va être destiné

58
00:03:27,847 --> 00:03:31,547
à recueillir une adresse, et vous
utiliserez la syntaxe suivante :

59
00:03:31,547 --> 00:03:34,017
new suivi d'un nom de type.

60
00:03:34,017 --> 00:03:39,587
Ce que ceci va faire, c'est que ça va
réserver une zone mémoire capable

61
00:03:39,587 --> 00:03:43,547
de contenir une donnée de ce type,
et retourner l'adresse

62
00:03:43,547 --> 00:03:47,127
de cette zone mémoire, laquelle va pouvoir
être affectée au pointeur.

63
00:03:49,267 --> 00:03:51,127
Soyons concret.
Imaginons par exemple,

64
00:03:51,127 --> 00:03:53,877
que dans un programme, il y ait
la ligne de code suivante :

65
00:03:53,877 --> 00:03:57,267
donc cette ligne, ce qu'elle fait c'est
déclarer un pointeur capable

66
00:03:57,267 --> 00:03:58,487
de pointer sur un entier.

67
00:03:58,487 --> 00:04:02,327
Donc je vais maintenant adhérer à la
syntaxe que l'on vient de voir ici,

68
00:04:02,327 --> 00:04:03,927
pour faire de l'allocation dynamique.

69
00:04:03,927 --> 00:04:05,787
Donc je prends mon nom de pointeur

70
00:04:07,275 --> 00:04:11,275
et j'écris donc px suivi de "="

71
00:04:12,973 --> 00:04:18,013
et suivi enfin de ma fameuse
petite instruction "new type;".

72
00:04:18,273 --> 00:04:22,273
Donc ici, étant donné que mon pointeur
est un pointeur sur entier, eh bien

73
00:04:22,273 --> 00:04:26,023
il faut que "type", ici, corresponde au type
sur lequel peut pointer le pointeur

74
00:04:26,023 --> 00:04:28,983
et donc je devrai mettre ici "int".

75
00:04:28,983 --> 00:04:32,983
Donc à ce moment-là, j'ai fait
ce qu'on appelle une allocation dynamique.

76
00:04:33,186 --> 00:04:36,296
Alors comment ça va se passer, en clair ?

77
00:04:36,296 --> 00:04:38,786
Donc ici, au moment où vous compilez
cette ligne de code,

78
00:04:39,485 --> 00:04:43,745
je dis bien compiler et non pas exécuter,
vous aurez une allocation statique

79
00:04:44,435 --> 00:04:49,455
pour une variable de type pointeur,
qui s'appelle px, capable de recueillir

80
00:04:49,455 --> 00:04:50,955
l'adresse d'un entier.

81
00:04:51,280 --> 00:04:55,280
Par contre, c'est au moment où vous
exécutez cette ligne de code que vous

82
00:04:55,280 --> 00:04:57,900
aurez une allocation,
cette fois dynamique.

83
00:04:58,640 --> 00:05:04,050
Et à ce moment-là, vous avez alloué
un emplacement mémoire pour un entier,

84
00:05:04,050 --> 00:05:07,010
qui est cet emplacement.
Cet emplacement aura une adresse,

85
00:05:07,010 --> 00:05:11,950
et c'est précisément cette adresse
que vous allez stocker dans px comme ceci.

86
00:05:14,808 --> 00:05:16,748
Donc ceci se passe au moment...

87
00:05:17,308 --> 00:05:19,068
Donc il s'agit ici d'une
allocation statique.

88
00:05:23,663 --> 00:05:26,563
Par contre ici, vous avez
une allocation dynamique.

89
00:05:29,575 --> 00:05:33,835
C'est l'instruction, ici "new int;", 
qui permet justement

90
00:05:33,835 --> 00:05:35,235
de faire cette allocation.

91
00:05:37,158 --> 00:05:40,898
Si on a recours à cette syntaxe pour faire
de l'allocation dynamique,

92
00:05:40,898 --> 00:05:44,538
la zone nouvellement allouée est réservée,
certes, mais ne contient aucune valeur.

93
00:05:44,538 --> 00:05:48,508
Donc si on veut, au moment de l'allocation
de mémoire, mettre en plus une valeur

94
00:05:48,508 --> 00:05:51,778
dans la zone mémoire, eh bien il faut 
avoir recours à l'alternative suivante :

95
00:05:52,608 --> 00:05:54,698
de l'instruction d'allocation dynamique.

96
00:05:54,698 --> 00:05:57,718
Donc, si l'on s'en réfère à l'exemple 
que nous avons pris tout à l'heure,

97
00:05:57,718 --> 00:06:01,718
donc j'ai par exemple ici un pointeur px
déclaré dans un programme.

98
00:06:01,898 --> 00:06:05,898
On peut utiliser cette variante
de l'instruction d'allocation dynamique

99
00:06:05,898 --> 00:06:06,918
comme ceci.

100
00:06:07,969 --> 00:06:13,469
Donc : "px = new int;". Donc, je réserve
un emplacement mémoire pour un entier

101
00:06:13,469 --> 00:06:16,589
et je mets une valeur dedans,
ici par exemple, la valeur 3.

102
00:06:17,575 --> 00:06:21,165
Ce qui va correspondre, au moment
de l'exécution de cette ligne de code,

103
00:06:21,165 --> 00:06:26,255
à la réservation d'un emplacement mémoire
pour un entier, ce que fait le "new int;".

104
00:06:30,067 --> 00:06:33,057
On y met une valeur, qui est 3.

105
00:06:33,448 --> 00:06:38,008
Le "new int(3);" retourne l'adresse
de la zone nouvellement allouée,

106
00:06:38,008 --> 00:06:41,851
et l'affectation va faire en sorte que
cette adresse soit copiée dans px.

107
00:06:46,011 --> 00:06:49,031
Vous savez désormais allouer 
dynamiquement de la mémoire.

108
00:06:49,031 --> 00:06:51,811
Que faire pour libérer cette mémoire 
lorsque vous n'en n'avez plus besoin ?

109
00:06:51,811 --> 00:06:54,681
Et d'abord, pourquoi est-il nécessaire 
de libérer cette mémoire ?

110
00:06:55,392 --> 00:06:59,212
Prenons à nouveau un exemple concret.
Imaginez que dans un programme,

111
00:07:00,592 --> 00:07:01,682
dans un bloc,

112
00:07:01,889 --> 00:07:05,099
je déclare une variable, 
que j'utilise dans le bloc.

113
00:07:06,826 --> 00:07:09,716
Ce que je fais ici évidemment 
est une allocation statique.

114
00:07:10,629 --> 00:07:13,419
Puisque je suis en train 
de déclarer une variable,

115
00:07:13,419 --> 00:07:16,649
donc au moment de la compilation, je peux 
savoir quels sont mes besoins en mémoire.

116
00:07:16,943 --> 00:07:20,333
Nous savons, en vertu de la notion
de portée, que cette variable

117
00:07:20,333 --> 00:07:22,323
n'est plus accessible en dehors du bloc.

118
00:07:22,323 --> 00:07:25,443
Donc, au moment où on exécute
cet ensemble d'instructions,

119
00:07:25,443 --> 00:07:29,128
et qu'on atteint la fin du bloc, 
eh bien on sait que cette variable v

120
00:07:29,128 --> 00:07:32,183
ne sera plus jamais utilisée.
Et donc, les variables statiques

121
00:07:32,183 --> 00:07:35,432
ont la particularité

122
00:07:35,432 --> 00:07:39,132
d'être désallouées 
automatiquement.

123
00:07:40,747 --> 00:07:43,657
Vous n'avez pas à vous préoccuper
de ce qui va advenir

124
00:07:43,657 --> 00:07:45,867
de l'emplacement mémoire qui, ici, 
n'est plus accessible.

125
00:07:47,674 --> 00:07:50,024
Prenons un exemple analogue, 
mais où, cette fois,

126
00:07:50,024 --> 00:07:52,664
on fait de l'allocation dynamique.
Donc, ici, imaginez que, par exemple,

127
00:07:52,664 --> 00:07:55,664
j'ai déclaré un pointeur px.

128
00:07:56,127 --> 00:07:58,037
Ensuite, dans un bloc,

129
00:07:59,892 --> 00:08:04,182
je décide d'allouer dynamiquement
de la mémoire que je récupère

130
00:08:05,258 --> 00:08:06,918
dans le pointeur px.

131
00:08:07,585 --> 00:08:10,415
Donc, ce qu'il faut savoir, c'est que
cette zone mémoire que vous avez

132
00:08:10,415 --> 00:08:14,415
allouée dynamiquement ici, 
n'est pas détruite, n'est pas libérée,

133
00:08:14,415 --> 00:08:16,745
tant que vous n'avez pas
décidé de le faire.

134
00:08:16,745 --> 00:08:20,005
Donc, lorsqu'on atteint l'exécution
de la fin du bloc ici, cette zone mémoire

135
00:08:20,005 --> 00:08:24,005
reste parfaitement disponible tant que 
vous ne l'avez pas désallouée.

136
00:08:24,005 --> 00:08:26,665
C'est ce qui fait en sorte que
l'allocation dynamique permette

137
00:08:26,665 --> 00:08:31,845
de créer des zones mémoires, qui vivent
au-delà de la portée dans laquelle

138
00:08:31,845 --> 00:08:33,635
elles ont été créées justement.

139
00:08:33,635 --> 00:08:36,815
Et donc si on veut, à un moment donné,
restituer cet emplacement,

140
00:08:36,815 --> 00:08:40,775
c'est à nous de le faire explicitement et 
à ce moment-là il va falloir avoir recours

141
00:08:40,775 --> 00:08:46,235
à l'opérateur delete, donc par exemple,
ici, je peux décider après le bloc,

142
00:08:46,545 --> 00:08:51,375
car je n'ai plus besoin de la zone mémoire
en question, de restituer

143
00:08:51,375 --> 00:08:54,632
l'emplacement mémoire en faisant 
un delete sur le pointeur associé.

144
00:08:55,925 --> 00:08:59,625
Très concrètement, imaginez que dans
un programme, vous ayez un pointeur px

145
00:08:59,625 --> 00:09:02,495
qui pointe sur une zone mémoire
dynamiquement allouée.

146
00:09:02,495 --> 00:09:05,585
Imaginons que cette zone mémoire 
contienne 3, donc bien évidemment,

147
00:09:05,585 --> 00:09:08,025
px contient l'adresse 
de cette zone mémoire.

148
00:09:08,156 --> 00:09:11,966
Que se passe-t-il lorsqu'on fait une
désallocation de mémoire

149
00:09:11,966 --> 00:09:16,485
en désallouant l'emplacement mémoire 
associé à px par cette instruction-là ?

150
00:09:17,664 --> 00:09:20,514
Rappelez-vous la petite analogie avec
les maisons sur un terrain,

151
00:09:20,514 --> 00:09:22,504
eh bien lorsqu'on fait un delete,
on détruit la maison.

152
00:09:22,504 --> 00:09:25,874
Ce qui veut dire concrètement que
le contenu de cette zone mémoire

153
00:09:26,079 --> 00:09:30,329
n'est plus prévisible, plus utilisable
de façon sûre par le programme.

154
00:09:30,329 --> 00:09:32,995
Votre 3 peut parfaitement 
y rester un petit moment,

155
00:09:32,995 --> 00:09:35,661
mais vous ne pouvez plus savoir
de façon sûre et prévisible

156
00:09:35,661 --> 00:09:38,329
quel va être le contenu de cette zone mémoire.

157
00:09:38,411 --> 00:09:43,421
Donc on voit ici qu'en se contentant
d'un delete px, on est dans la situation

158
00:09:43,421 --> 00:09:47,181
où la zone mémoire ici n'a plus
un contenu utilisable.

159
00:09:47,222 --> 00:09:50,432
Par contre, bien sûr, l'adresse existe
toujours en mémoire.

160
00:09:51,298 --> 00:09:54,568
Et cette adresse est toujours stockée
à ce stade dans le pointeur px.

161
00:09:54,568 --> 00:09:58,058
Donc, ça justifie une des bonnes pratiques
que je vous conseille absolument de suivre

162
00:09:58,058 --> 00:10:01,538
c'est qu'il faut faire suivre
toute instruction delete

163
00:10:01,538 --> 00:10:03,688
d'une instruction "pointeur = nullptr;".

164
00:10:03,688 --> 00:10:09,348
Ce qui va se traduire par quelque chose
de cette nature : "px = nullptr;",

165
00:10:09,575 --> 00:10:12,705
donc ici, vous êtes en train de dire
explicitement que, désormais,

166
00:10:12,705 --> 00:10:17,411
px ne pointe vers plus rien de valable 
et donc vous ne gardez pas,

167
00:10:17,411 --> 00:10:22,161
à l'intérieur de px, une adresse qui
ne veut plus rien dire pour le programme,

168
00:10:22,161 --> 00:10:24,801
qui n'est plus utilisable de façon sûre
pour le programme.

169
00:10:26,678 --> 00:10:30,608
Pour résumer sur l'allocation dynamique,
et pour revenir à notre petite analogie

170
00:10:30,608 --> 00:10:33,008
du carnet d'adresses, ce que je fais

171
00:10:33,028 --> 00:10:35,868
lorsque j'exécute une instruction 
de cette nature,

172
00:10:36,585 --> 00:10:40,745
est que j'ajoute une nouvelle page 
dans mon carnet d'adresses, la page ptr.

173
00:10:42,116 --> 00:10:45,856
Sur cette page ptr, qu'est-ce que je mets
exactement ? Eh bien je mets l'adresse

174
00:10:45,856 --> 00:10:47,766
de cette zone allouée dynamiquement.

175
00:10:47,766 --> 00:10:51,766
Donc l'allocation dynamique peut être vue,
dans le contexte du carnet d'adresses,

176
00:10:51,766 --> 00:10:57,766
comme étant la réservation d'un terrain,
la zone mémoire qui va contenir la valeur.

177
00:10:58,816 --> 00:11:02,056
Je construis une maison sur ce terrain,
on peut voir la maison

178
00:11:02,056 --> 00:11:04,806
un peu comme la valeur 3 que je mets 
dans la zone mémoire int.

179
00:11:05,904 --> 00:11:09,344
Et ce qui est retourné, c'est l'adresse,
donc, de cette zone mémoire,

180
00:11:09,344 --> 00:11:11,494
que je stocke dans mon carnet d'adresses.

181
00:11:12,564 --> 00:11:16,564
Je peux, dans un programme, allouer
des zones mémoires dynamiquement

182
00:11:16,564 --> 00:11:19,854
pour tout type de données, et c'est
au programmeur d'être attentif

183
00:11:19,854 --> 00:11:23,324
à restituer l'emplacement mémoire
lorsqu'il ne lui est plus nécessaire.

184
00:11:23,324 --> 00:11:26,774
Par exemple, si je n'ai plus besoin
de cet emplacement mémoire,

185
00:11:26,774 --> 00:11:34,454
alors ce qu'il faut faire, c'est que
je dois faire un delete de ptr,

186
00:11:34,454 --> 00:11:36,837
restituer, libérer l'emplacement mémoire,

187
00:11:36,957 --> 00:11:43,407
ce qui veut dire ici que mon terrain 
ne contient plus aucune donnée utilisable.

188
00:11:45,203 --> 00:11:48,523
Et le terrain est désormais disponible

189
00:11:51,539 --> 00:11:52,919
pour quelqu'un d'autre.

190
00:11:55,605 --> 00:11:58,315
Si je me contente de cela, 
eh bien ça voudra dire

191
00:11:58,315 --> 00:12:01,895
que dans mon carnet d'adresses, 
figure toujours l'adresse de ce terrain

192
00:12:01,895 --> 00:12:03,985
qui est à vendre, qui est disponible 
pour quelqu'un d'autre.

193
00:12:03,985 --> 00:12:07,545
Donc, la précaution que je dois
impérativement prendre est d'indiquer

194
00:12:07,545 --> 00:12:13,465
que ptr ne pointe vers plus rien,
en lui affectant nullptr.

195
00:12:14,094 --> 00:12:18,984
Ce qui revient ici à effacer la page
de mon carnet d'adresses, et donc,

196
00:12:18,984 --> 00:12:20,324
supprimer ce lien,

197
00:12:22,693 --> 00:12:24,963
qui n'est plus pertinent,
qui n'est plus utile.

198
00:12:26,025 --> 00:12:30,275
Si par contre on affecte la valeur nullptr
sans avoir au préalable désalloué

199
00:12:30,275 --> 00:12:33,195
l'emplacement mémoire concerné,
eh bien nous allons nous retrouver dans

200
00:12:33,195 --> 00:12:34,335
la situation suivante.

201
00:12:34,335 --> 00:12:36,535
Supposons que nous fassions sur
l'équivalent de cette page

202
00:12:36,535 --> 00:12:43,555
du carnet d'adresses, ce qui reviendrait,
ici, à écrire "ptr3 = nullptr;".

203
00:12:44,335 --> 00:12:49,075
Eh bien, nous savons maintenant que cela
signifie que nous effaçons cette page,

204
00:12:49,075 --> 00:12:52,025
et le lien vers cet emplacement est perdu.

205
00:12:52,096 --> 00:12:55,896
Ce qui signifie que je ne peux plus 
y accéder via cette page

206
00:12:55,896 --> 00:12:58,466
du carnet d'adresses, 
mais l'emplacement est intact,

207
00:12:58,466 --> 00:13:03,726
le terrain n'est pas rendu disponible pour
quelqu'un d'autre, et est laissé en l'état.

208
00:13:03,726 --> 00:13:09,136
Donc, si par exemple, aucune page de
mon carnet d'adresses ne référence plus

209
00:13:09,136 --> 00:13:12,866
cette zone mémoire, eh bien cette zone
est perdue, n'est plus réutilisable

210
00:13:12,866 --> 00:13:16,316
dans mon programme, n'est plus rendue
disponible pour une autre utilisation,

211
00:13:16,316 --> 00:13:18,646
et j'ai à ce moment-là ce qu'on appelle
une fuite de mémoire.

212
00:13:18,646 --> 00:13:21,826
C'est quelque chose qu'il faut
impérativement éviter dans un programme.

213
00:13:24,261 --> 00:13:27,991
Pour conclure sur les bonnes pratiques,
toute zone mémoire allouée dynamiquement,

214
00:13:27,991 --> 00:13:32,881
donc qui a fait l'objet d'un new ,
doit impérativement être désallouée,

215
00:13:32,881 --> 00:13:35,551
ce que nous avons expliqué tout à l'heure
par le fait qu'une zone,

216
00:13:35,551 --> 00:13:39,361
dynamiquement allouée, n'est pas restituée
tant que l'on avait pas explicitement

217
00:13:39,361 --> 00:13:40,841
pris la décision de le faire.

218
00:13:42,678 --> 00:13:45,478
Voilà, vous connaissez maintenant
beaucoup de choses essentielles

219
00:13:45,478 --> 00:13:48,688
sur les pointeurs et on va résumer
tout ceci sur un petit exemple.

220
00:13:48,688 --> 00:13:51,288
Alors ici, un petit programme
que l'on va dérouler pas à pas.

221
00:13:51,288 --> 00:13:57,978
Ici, il y a déclaration d'une variable px,
qui est capable de pointer,

222
00:13:57,978 --> 00:14:01,268
qui est un pointeur capable de pointer
sur un entier, et je prends la précaution

223
00:14:01,268 --> 00:14:05,268
de l'initialiser à nullptr, 
ce qui veut dire qu'il ne pointe sur rien.

224
00:14:05,898 --> 00:14:07,268
Deuxième ligne de code,

225
00:14:07,323 --> 00:14:10,483
il y a une allocation dynamique.
Cette allocation dynamique réserve

226
00:14:10,483 --> 00:14:13,913
un emplacement mémoire capable
de contenir un entier.

227
00:14:14,191 --> 00:14:17,766
Et cet emplacement mémoire a une adresse,

228
00:14:17,766 --> 00:14:22,696
c'est exactement cette adresse qui résulte 
de l'exécution de "new int",

229
00:14:22,696 --> 00:14:24,906
et c'est cette adresse 
que je vais affecter à px.

230
00:14:26,537 --> 00:14:29,897
Donc désormais, je fais pointer le
pointeur px sur cette zone mémoire

231
00:14:29,897 --> 00:14:31,337
nouvellement allouée.

232
00:14:31,403 --> 00:14:33,123
Ensuite, troisième instruction.

233
00:14:33,594 --> 00:14:38,344
J'utilise la fameuse petite étoile
pour accéder au contenu pointé par px.

234
00:14:38,695 --> 00:14:40,955
Le contenu pointé par px est ceci.

235
00:14:41,023 --> 00:14:44,613
A l'intérieur de ce contenu pointé,
je vais mettre la valeur 20,

236
00:14:44,613 --> 00:14:45,884
ce qui correspond à ceci.

237
00:14:46,880 --> 00:14:50,940
Ensuite, je veux m'assurer du fait
que j'ai bien mis la bonne valeur

238
00:14:50,940 --> 00:14:53,600
dans cette zone mémoire, et donc,
je veux en faire afficher le contenu.

239
00:14:53,600 --> 00:14:58,480
A nouveau, j'accède au contenu pointé
par px au travers de la petite étoile,

240
00:14:58,480 --> 00:15:04,150
et ceci va donc simplement m'afficher
la valeur 20, suivi d'un retour de ligne,

241
00:15:04,150 --> 00:15:05,640
d'un saut de ligne.

242
00:15:05,640 --> 00:15:08,130
Ensuite je présume que je n'ai plus besoin

243
00:15:09,746 --> 00:15:12,716
de ma zone mémoire, et donc 
je fais un delete,

244
00:15:12,716 --> 00:15:16,626
ce qui veut dire que cette zone mémoire 
n'a plus un contenu qui est utilisable.

245
00:15:16,781 --> 00:15:21,211
Et je veux m'assurer du fait que px
n'a plus un contenu qui est obsolète,

246
00:15:21,211 --> 00:15:25,461
qui ne pointe vers aucune adresse
utilisable de façon sûre, et donc,

247
00:15:25,461 --> 00:15:29,461
à nouveau, je mets nullptr 
dans ma zone mémoire du pointeur.

248
00:15:31,592 --> 00:15:34,392
La première variante du programme
que nous avons examiné peut s'écrire

249
00:15:34,392 --> 00:15:38,522
de façon plus concise, sachant que
ces deux instructions, qui consistent

250
00:15:38,522 --> 00:15:41,872
à allouer l'emplacement mémoire
et y mettre une valeur à l'intérieur,

251
00:15:41,872 --> 00:15:45,872
peut en fait être rédigée en une seule et
même ligne par le biais de cette syntaxe.

252
00:15:48,180 --> 00:15:52,440
De façon encore plus concise encore,
je peux remplacer ces deux lignes de code

253
00:15:52,440 --> 00:15:54,920
par une seule ligne, qui est celle-ci.

254
00:15:54,920 --> 00:15:58,560
Dans cette ligne, je commence
par faire la déclaration du pointeur,

255
00:15:58,560 --> 00:16:02,920
seulement au lieu de commencer
par l'initialiser à nullptr pour ensuite

256
00:16:02,920 --> 00:16:06,580
mettre à l'intérieur le résultat 
de "new int(20)", eh bien je mets

257
00:16:06,580 --> 00:16:09,290
directement la valeur 
"new int(20)" dans px.

258
00:16:09,290 --> 00:16:11,590
Ce qui fait que je fais l'économie
d'une instruction.

259
00:16:13,242 --> 00:16:15,872
Lorsque vous écrirez vos premiers
programmes avec des pointeurs,

260
00:16:15,872 --> 00:16:18,912
et même les suivants d'ailleurs, il est
vraisemblable que, de temps en temps,

261
00:16:18,912 --> 00:16:22,022
vous tombiez sur une erreur redoutable,
le "segmentation fault", qui va causer

262
00:16:22,022 --> 00:16:24,822
un arrêt abrupt de votre programme.
De quoi s'agit-il ?

263
00:16:26,359 --> 00:16:29,459
Typiquement, les erreurs de type
"segmentation fault" vont se produire

264
00:16:29,459 --> 00:16:31,859
lorsqu'on essaie, via un pointeur,
d'accéder à une zone mémoire

265
00:16:31,859 --> 00:16:33,259
qui n'a pas été réservée.

266
00:16:33,259 --> 00:16:37,779
Donc, si on regarde ici cet exemple,
cette instruction, donc,

267
00:16:37,779 --> 00:16:40,729
déclare un pointeur px mais ne réserve
aucun emplacement mémoire alloué.

268
00:16:40,729 --> 00:16:43,189
Il n'y a pas d'initialisation, 
pas de new, rien du tout.

269
00:16:43,189 --> 00:16:47,019
Donc ici, le contenu de px est inconnu
et ici, ce qu'on essaie de faire

270
00:16:47,019 --> 00:16:51,539
c'est d'accéder au contenu pointé,
donc à une éventuelle case pointée par px,

271
00:16:51,539 --> 00:16:53,012
mais qui n'existe pas, puisqu'on
ne l'a jamais allouée, et pour y mettre

272
00:16:54,485 --> 00:16:55,959
la valeur 20 à l'intérieur.

273
00:16:55,959 --> 00:17:00,929
Evidemment, ce n'est pas possible,
et cela va résulter en une erreur

274
00:17:00,929 --> 00:17:04,369
de type segmentation fault, qui va causer
justement l'arrêt de votre programme.

275
00:17:05,301 --> 00:17:10,881
La bonne solution consiste évidemment,
ici, à allouer un emplacement mémoire

276
00:17:11,496 --> 00:17:14,316
à associer au pointeur px,
ce qui se traduit par ceci,

277
00:17:14,316 --> 00:17:16,876
au moment de l'exécution, donc on alloue
la zone mémoire, et à ce moment-là,

278
00:17:16,876 --> 00:17:22,066
on aura notre pointeur px qui va contenir
l'adresse de cet emplacement mémoire,

279
00:17:22,066 --> 00:17:23,486
nouvellement alloué.

280
00:17:23,486 --> 00:17:26,756
Et donc, évidemment, une fois que
cette zone mémoire existe, on peut

281
00:17:26,756 --> 00:17:31,026
parfaitement y accéder, accéder 
à son contenu pour y mettre la valeur 20.

282
00:17:31,793 --> 00:17:34,743
Donc, à ce moment-là, cette instruction
va parfaitement se dérouler.

283
00:17:36,924 --> 00:17:40,634
Nous venons de voir qu'il était impératif
d'allouer avant d'utiliser,

284
00:17:40,634 --> 00:17:43,104
il en suit un conseil, 
une bonne pratique courante

285
00:17:43,104 --> 00:17:44,894
concernant l'initialisation des pointeurs.

286
00:17:44,894 --> 00:17:48,618
Il est en fait conseillé 
de toujours initialiser les pointeurs,

287
00:17:48,618 --> 00:17:50,438
ne serait-ce qu'à la valeur nullptr.

288
00:17:50,692 --> 00:17:54,332
Donc, si au moment où on déclare
un pointeur, on ne connaît pas encore

289
00:17:54,332 --> 00:17:58,722
la mémoire que ce pointeur pointe,
alors il est conseillé de l'initialiser

290
00:17:58,722 --> 00:18:03,182
au moyen de nullptr, qui veut dire
que le pointeur ne pointe vers rien,

291
00:18:03,182 --> 00:18:05,092
mais qui le dit explicitement.

292
00:18:05,092 --> 00:18:09,162
Et grâce à cette initialisation,
il devient possible de mettre en place

293
00:18:09,162 --> 00:18:12,522
un certain nombre de garde-fous,
par exemple avant d'accéder

294
00:18:12,522 --> 00:18:16,072
à la zone mémoire pointée
par un pointeur, je peux désormais

295
00:18:16,072 --> 00:18:20,012
prendre la précaution de contrôler 
si le pointeur en question

296
00:18:20,012 --> 00:18:21,931
pointe effectivement 
vers quelque chose ou non.

297
00:18:21,931 --> 00:18:26,501
Donc, il devient possible, grâce à cette
initialisation, de tester

298
00:18:26,501 --> 00:18:30,881
si le pointeur pointe vers quelque chose 
avant d'accéder à la zone pointée,

299
00:18:30,881 --> 00:18:32,191
comme je pourrais le faire ici.

300
00:18:32,191 --> 00:18:35,941
Donc, on voit que, grâce à cette
initialisation, un certain nombre

301
00:18:35,941 --> 00:18:39,170
de garde-fous peuvent être mis en place
pour l'accès aux zones mémoires

302
00:18:39,170 --> 00:18:41,280
pointées par des pointeurs.
