1
00:00:05,615 --> 00:00:07,671
Dans cette séquence vidéo,
nous allons nous intéresser

2
00:00:07,671 --> 00:00:10,920
à un nouveau type de données 
de type pointeurs.

3
00:00:10,920 --> 00:00:13,980
Dans cette première séquence, nous allons
vous présenter les pointeurs en général

4
00:00:13,980 --> 00:00:17,053
et un concept très relié 
à la notion de référence,

5
00:00:17,053 --> 00:00:18,946
puis dans une seconde séquence vidéo,

6
00:00:18,946 --> 00:00:21,143
nous vous présenterons plus
particulièrement la technique

7
00:00:21,143 --> 00:00:23,463
d'utilisation des pointeurs en détails.

8
00:00:23,463 --> 00:00:26,775
Les pointeurs ont la mauvaise réputation
d'être considérés comme difficiles,

9
00:00:26,775 --> 00:00:29,284
mais en fait il n'en est rien, vous
utilisez déjà des pointeurs

10
00:00:29,284 --> 00:00:31,617
dans la vie de tous les jours,
peut-être sans le savoir.

11
00:00:31,617 --> 00:00:34,831
Par exemple, quand vous avez un site
internet qui vous intéresse,

12
00:00:34,831 --> 00:00:36,314
qu'est-ce que vous faîtes ?

13
00:00:36,314 --> 00:00:38,614
Vous n'allez certainement pas 
dans votre navigateur

14
00:00:38,614 --> 00:00:42,644
recopier tout le site internet 
sur votre ordinateur ?

15
00:00:42,644 --> 00:00:45,077
Vous ne faîtes pas la copie du site,

16
00:00:45,077 --> 00:00:48,051
ce que vous faîtes c'est que 
depuis votre navigateur,

17
00:00:48,051 --> 00:00:54,904
vous avez un signet, une adresse
qui va pointer sur le site internet,

18
00:00:54,904 --> 00:00:59,015
lequel site internet existe
toujours de façon indépendante.

19
00:00:59,015 --> 00:01:02,373
Et bien un pointeur c'est pas plus
compliqué qu'un signet

20
00:01:02,373 --> 00:01:04,157
dans votre navigateur internet.

21
00:01:04,157 --> 00:01:08,086
Ainsi, dans un programme, 
chaque fois qu'on voudra faire un lien,

22
00:01:08,086 --> 00:01:12,690
une référence vers un objet 
qui existe par ailleurs,

23
00:01:12,690 --> 00:01:14,454
c'est pas un site internet cette fois-ci

24
00:01:14,757 --> 00:01:17,805
mais ça sera une autre variable par
exemple dans votre programme,

25
00:01:17,805 --> 00:01:21,860
vous utiliserez un pointeur 
ou une référence

26
00:01:21,860 --> 00:01:25,967
chaque fois que vous voudrez 
comme ceci donc, référencer, indiquer,

27
00:01:25,967 --> 00:01:29,663
faire un lien vers une autre variable
de votre programme.

28
00:01:30,693 --> 00:01:34,460
Les pointeurs entre guillemets, j'inclue
pour l'instant sous ce terme générique

29
00:01:34,460 --> 00:01:38,871
les vrais pointeurs et les références,
nous ferons la distinction plus tard.

30
00:01:38,871 --> 00:01:40,855
Les pointeurs donc, dans un programme,

31
00:01:40,855 --> 00:01:43,386
servent fondamentalement 
à trois choses.

32
00:01:43,386 --> 00:01:47,286
Tout d'abord, ils peuvent 
servir de référence,

33
00:01:47,286 --> 00:01:50,933
exactement comme l'exemple 
du signet d'un site internet,

34
00:01:50,933 --> 00:01:55,663
vous avez un objet dessiné en rouge ici,
par exemple que j'appelle a,

35
00:01:55,663 --> 00:02:00,613
et vous voulez le référencer 
depuis plusieurs endroits

36
00:02:00,613 --> 00:02:02,022
de votre programme.

37
00:02:02,523 --> 00:02:04,864
Par exemple, si c'était l'exemple
du site internet,

38
00:02:04,864 --> 00:02:07,550
a représente un site internet
dans le navigateur,

39
00:02:07,550 --> 00:02:11,213
dans votre navigateur
vous avez un lien vers ce site,

40
00:02:11,213 --> 00:02:16,251
dans le navigateur d'un de vos amis 
vous avez encore un autre lien vers ce site,

41
00:02:16,251 --> 00:02:19,138
dans un troisième navigateur 
de quelqu'un qu'on ne connaît pas

42
00:02:19,138 --> 00:02:22,833
vous avez un lien vers ce site aussi.

43
00:02:22,833 --> 00:02:28,089
Toutes ces utilisations ici, ces pointeurs
référencent donc l'objet

44
00:02:28,089 --> 00:02:29,603
que l'on veut référencer.

45
00:02:29,603 --> 00:02:32,397
Ça c'est le premier cas
d'utilisation des pointeurs.

46
00:02:33,018 --> 00:02:35,742
Le deuxième cas d'utilisation des
pointeurs, c'est ce que j'appelle

47
00:02:35,742 --> 00:02:38,293
l'utilisation pour la généricité.

48
00:02:38,293 --> 00:02:42,604
Le dessin est un petit peu symétrique
du dessin pour les références.

49
00:02:42,604 --> 00:02:44,843
Ici, vous avez disons plusieurs objets

50
00:02:44,843 --> 00:02:47,831
que vous ne connaissez pas 
forcément au départ,

51
00:02:47,831 --> 00:02:52,872
donc par exemple un objet a, un objet b, 
un objet c, et vous voulez décrire

52
00:02:52,872 --> 00:02:57,987
disons de façon générique ces différents
objets par, à un moment donné,

53
00:02:57,987 --> 00:03:00,818
vous allez donc à ce moment-là

54
00:03:00,818 --> 00:03:02,132
utiliser un pointeur.

55
00:03:02,132 --> 00:03:06,562
Ce pointeur à un moment donné
pointera par exemple sur l'objet a,

56
00:03:06,562 --> 00:03:12,550
puis à un autre moment à ce moment-là
pointera vers par exemple l'objet b,

57
00:03:12,550 --> 00:03:16,670
et enfin, à peut-être un autre moment 
dans votre programme

58
00:03:16,670 --> 00:03:20,809
le même pointeur pourra pointer,
indiquer un objet c.

59
00:03:21,141 --> 00:03:23,706
Un exemple de la vie courante, 
c'est par exemple si vous avez

60
00:03:23,706 --> 00:03:28,736
le numéro de téléphone d'un ami, vous 
le stockez dans votre carnet d'adresses

61
00:03:28,736 --> 00:03:33,121
et puis si votre ami donc a 
à un moment un certain téléphone,

62
00:03:33,121 --> 00:03:34,848
puis à un autre moment
il change d'opérateur,

63
00:03:34,848 --> 00:03:37,791
il a changé de numéro, 
dans votre carnet d'adresses

64
00:03:37,791 --> 00:03:43,637
vous allez changer le numéro de téléphone
de votre ami pour le nouveau numéro.

65
00:03:43,637 --> 00:03:46,968
Voilà ce que j'appelle donc
l'utilisation pour la généricité.

66
00:03:46,968 --> 00:03:51,001
On a de façon générique un pointeur 
qui décrit l'un ou l'autre

67
00:03:51,001 --> 00:03:53,957
ou un troisième objet possible 
au fur et à mesure

68
00:03:53,957 --> 00:03:55,725
que le programme va se dérouler.

69
00:03:56,165 --> 00:04:00,697
Le troisième cas d'utilisation des
pointeurs est lui un petit peu technique.

70
00:04:00,697 --> 00:04:04,122
Il a à voir avec ce qu'on appelle
techniquement la portée

71
00:04:04,122 --> 00:04:06,416
et la durée de vie.

72
00:04:06,416 --> 00:04:09,878
Donc, la portée, je vous rappelle, c'est
l'ensemble des lignes de code

73
00:04:09,878 --> 00:04:11,954
où un objet est défini.

74
00:04:11,954 --> 00:04:16,809
La durée de vie ça va être le temps
pendant lequel un objet existe en mémoire

75
00:04:16,809 --> 00:04:18,927
pendant que le programme se déroule.

76
00:04:18,927 --> 00:04:21,759
Illustrons à nouveau avec un petit dessin,

77
00:04:21,759 --> 00:04:24,766
si je représente comme ça 
sur un axe horizontal

78
00:04:24,766 --> 00:04:29,794
le temps où le programme se déroule, 
évidemment le programme va exécuter

79
00:04:29,794 --> 00:04:32,264
à un moment donné une
certaine portion de code

80
00:04:32,264 --> 00:04:35,072
qui était comprise entre accolades.

81
00:04:35,072 --> 00:04:40,584
Si dans cette portion de code j'avais par
exemple une variable de type entier

82
00:04:40,584 --> 00:04:44,878
que j'avais déclarée, donc par exemple a,
alors la durée de vie de cette variable

83
00:04:44,878 --> 00:04:47,958
va être égale au temps
d'exécution de sa portée.

84
00:04:47,958 --> 00:04:51,619
Sa portée vous vous souvenez, c'est le
bloc dans lequel elle a été définie

85
00:04:51,619 --> 00:04:55,023
et si je regarde donc le déroulement 
du programme au cours du temps,

86
00:04:55,023 --> 00:04:57,624
la durée de vie de cette variable 
va donc être ici égale

87
00:04:57,624 --> 00:04:59,542
au temps d'exécution de sa portée.

88
00:04:59,542 --> 00:05:05,250
Le compilateur va terminer, l'existence va
supprimer la variable du moment

89
00:05:05,250 --> 00:05:08,888
qu'il en a plus besoin, c'est-à-dire du
moment qu'on a terminé sa portée.

90
00:05:08,888 --> 00:05:13,096
Et bien si techniquement vous voulez
augmenter la durée de vie d'un objet,

91
00:05:13,096 --> 00:05:16,035
alors on verra techniquement plus tard
comment, mais vous voulez décider

92
00:05:16,035 --> 00:05:18,628
qu'un objet commence à être disponible
dans votre mémoire

93
00:05:18,628 --> 00:05:22,880
à partir de cet instant-là, et puis
a une durée de vie donc,

94
00:05:22,880 --> 00:05:24,667
qui est plus grande que sa portée,

95
00:05:24,667 --> 00:05:29,162
à ce moment-là vous allez être dans
ce qu'on appelle l'allocation dynamique,

96
00:05:29,162 --> 00:05:32,412
c'est le troisième cas
d'utilisation des pointeurs.

97
00:05:32,412 --> 00:05:36,502
Donc, pour résumer, les pointeurs servent
fondamentalement à trois choses.

98
00:05:36,502 --> 00:05:40,762
Soit un objet peut être référencé depuis
plusieurs endroits avec des pointeurs,

99
00:05:40,762 --> 00:05:44,607
soit on va avoir un même pointeur qui
lui-même va pointer

100
00:05:44,607 --> 00:05:47,232
à différents moments vers différents objets,

101
00:05:47,232 --> 00:05:51,517
soit on veut vouloir gérer
nous-même la mémoire,

102
00:05:51,517 --> 00:05:54,279
le temps de vie des objets en mémoire
et utiliser ce que l'on appelle

103
00:05:54,279 --> 00:05:56,100
l'allocation dynamique.

104
00:05:56,100 --> 00:05:59,045
Ces trois raisons d'utilisation des
pointeurs ne sont pas exhaustives et

105
00:05:59,045 --> 00:06:02,273
on peut vouloir en combiner plusieurs,
mais ce qui compte surtout c'est d'avoir

106
00:06:02,479 --> 00:06:05,846
bien présent à l'esprit la raison, 
ou les raisons, pour lesquelles

107
00:06:05,846 --> 00:06:09,040
vous voulez utiliser un pointeur
dans votre programme.

108
00:06:09,650 --> 00:06:13,019
En C++, et surtout depuis 
la nouvelle norme C++ 2011,

109
00:06:13,019 --> 00:06:16,343
il existe en fait trois sortes 
de pointeurs entre guillemets.

110
00:06:16,343 --> 00:06:20,330
Il existe les références, qui ne sont pas
à strictement parler de vrais pointeurs

111
00:06:20,330 --> 00:06:24,023
et sont même en fait assez fondamentalement 
différentes des vrais pointeurs,

112
00:06:24,023 --> 00:06:27,686
en ce sens qu'elles sont gérées
complètement par le compilateur.

113
00:06:27,686 --> 00:06:30,266
Et ce sont donc des objets très sûrs 
qui ne sont pas manipulés

114
00:06:30,266 --> 00:06:33,272
par le programmeur lui-même, 
mais par le compilateur.

115
00:06:33,732 --> 00:06:37,841
Ensuite, nous avons depuis le nouvelle
norme C++ 2011 des pointeurs intelligents,

116
00:06:37,841 --> 00:06:42,825
ce qu'on appelle des <i>smart pointers</i>, et puis
enfin nous avons les anciens pointeurs

117
00:06:42,825 --> 00:06:45,820
hérités du langage C ancêtre du C++,

118
00:06:45,820 --> 00:06:49,962
qui sont vraiment les pointeurs 
très puissants, les pointeurs à tout faire.

119
00:06:49,962 --> 00:06:52,328
Ce sont donc ceux-ci qu'on appelle
simplement pointeurs

120
00:06:52,328 --> 00:06:54,524
quand on ne spécifie pas
plus particulièrement

121
00:06:54,524 --> 00:06:57,614
de quelle sorte de pointeur 
entre guillemets il s'agit.

122
00:06:57,614 --> 00:07:00,439
Avant de rentrer dans les détails 
de chacun de ces nouveaux types,

123
00:07:00,439 --> 00:07:03,549
la question que l'on peut se poser
c'est lesquels devons-nous utiliser

124
00:07:03,549 --> 00:07:05,047
dans quelle situation.

125
00:07:05,047 --> 00:07:08,596
La règle générale est d'utiliser des
références chaque fois qu'on le peut

126
00:07:08,596 --> 00:07:11,658
et d'utiliser des pointeurs
quand on le doit.

127
00:07:11,658 --> 00:07:15,770
Reprenons tour à tour les trois
situations d'utilisation des pointeurs.

128
00:07:16,240 --> 00:07:20,410
Dans le cas numéro un où l'on veut
utiliser des pointeurs pour des références,

129
00:07:20,410 --> 00:07:24,459
bien sûr dans ce cas-là il vaut mieux
utiliser des vraies références

130
00:07:24,459 --> 00:07:28,130
à ce moment-là plutôt que des pointeurs
ou alors on peut utiliser aussi

131
00:07:28,130 --> 00:07:31,743
des pointeurs « à la C » puisque 
ces pointeurs sont universels

132
00:07:31,743 --> 00:07:33,419
et peuvent servir à tout.

133
00:07:33,419 --> 00:07:36,774
Mais en tant que programmeur débutant,
si vous avez le choix et que vous êtes

134
00:07:36,774 --> 00:07:41,222
dans un cas d'utilisation donc de
référence, alors utilisez des références

135
00:07:41,222 --> 00:07:44,847
que nous allons détailler juste dans
la séquence qui suit.

136
00:07:44,847 --> 00:07:48,202
Si jamais vous êtes dans le cas
d'utilisation numéro deux, c'est-à-dire

137
00:07:48,202 --> 00:07:53,186
que vous voulez utiliser un pointeur
générique qui décrit de façon générique

138
00:07:53,186 --> 00:07:56,668
différents objets possibles que vous
ne connaissez peut-être pas encore,

139
00:07:56,668 --> 00:08:00,874
alors à ce moment-là, ce qu'il faut
utiliser ce sont des pointeurs « à la C ».

140
00:08:00,874 --> 00:08:05,084
Mais il existe aussi un autre cas
particulier où les objets en question

141
00:08:05,084 --> 00:08:06,828
qu'on veut décrire de façon générique,

142
00:08:06,828 --> 00:08:11,610
je les avais appelés a, b et c 
dans l'exemple précédent,

143
00:08:12,300 --> 00:08:15,275
donc supposons que 
ces objets existent déjà.

144
00:08:16,105 --> 00:08:18,259
Et supposons justement
qu'ils aient été du coup stockés

145
00:08:18,259 --> 00:08:21,022
puisqu'ils existent déjà, 
stockés dans un tableau.

146
00:08:21,022 --> 00:08:23,886
A ce moment-là, il n'y a même pas besoin
du tout de compteur,

147
00:08:23,886 --> 00:08:28,011
on peut simplement utiliser les index, 
les positions dans ce tableau

148
00:08:28,011 --> 00:08:33,586
comme décrivant de façon générique,
donc par exemple, par un size_t i

149
00:08:33,586 --> 00:08:36,642
comme décrivant de façon générique
si i vaut zéro ça décrira a,

150
00:08:36,792 --> 00:08:40,845
si i vaut un ça décrira b,
si i vaut deux ça décrira c.

151
00:08:40,845 --> 00:08:44,132
C'est donc qu'il est bien aussi d'avoir
présent à l'esprit que cette possibilité-là

152
00:08:44,132 --> 00:08:46,589
peut aussi exister en rajoutant 
une structure

153
00:08:46,589 --> 00:08:48,655
de données supplémentaires, 
ici un tableau.

154
00:08:48,655 --> 00:08:52,012
On arrive aussi, si tant est 
que les objets existent déjà

155
00:08:52,012 --> 00:08:53,702
au moment où on crée le tableau,

156
00:08:53,702 --> 00:08:56,808
à, ou alors qu'on peut les
rajouter au fur et à mesure

157
00:08:56,808 --> 00:08:59,380
dans un tableau dynamique
par des push back et des popback,

158
00:08:59,380 --> 00:09:02,463
à aussi donc décrire de façon
générique avec une abstraction

159
00:09:02,463 --> 00:09:05,742
de plus qui est l'index de l'élément
dans le tableau

160
00:09:05,742 --> 00:09:07,458
plutôt que l'élément lui-même.

161
00:09:07,458 --> 00:09:08,889
Et si vous voulez vraiment des pointeurs,

162
00:09:08,889 --> 00:09:11,053
donc dans ce cas
d'utilisation numéro deux,

163
00:09:11,053 --> 00:09:14,992
alors ce seront des pointeurs 
« à la C » qu'il faudra utiliser.

164
00:09:14,992 --> 00:09:18,262
Dans le cas d'utilisation numéro trois,
pour faire de l'allocation dynamique,

165
00:09:18,262 --> 00:09:21,834
alors là il fait bien sûr utiliser
vraiment que des pointeurs,

166
00:09:21,834 --> 00:09:25,948
ils sont faits pour ça, et dans ce cas-là, 
je vous conseille d'utiliser C++ 2011

167
00:09:25,948 --> 00:09:29,056
et les pointeurs intelligents, ce qu'on
appelle aussi les smart pointers,

168
00:09:29,056 --> 00:09:31,796
parmi lesquels je vous recommande 
surtout d'utiliser,

169
00:09:31,796 --> 00:09:36,964
commencer par unique_ptr qui sera détaillé
donc dans une séquence vidéo suivante.

170
00:09:37,894 --> 00:09:40,477
Voilà donc pour les différents
cas d'utilisation

171
00:09:40,477 --> 00:09:43,825
de toutes ces sortes de pointeurs 
entre guillemets.

172
00:09:43,825 --> 00:09:46,597
Les séquences vidéos suivantes vont
maintenant entrer dans les détails

173
00:09:46,597 --> 00:09:51,487
tour à tour des références, 
des pointeurs « à la C »,

174
00:09:51,487 --> 00:09:55,335
puis nous finirons par les pointeurs 
intelligents de C++ 2011.
