1
00:00:03,682 --> 00:00:05,543
Avec notre petite analogie
du carnet d'adresses,

2
00:00:05,543 --> 00:00:07,401
vous connaissez maintenant 
l'essentiel des manipulations

3
00:00:07,401 --> 00:00:09,213
que l'on peut faire sur des pointeurs.

4
00:00:09,213 --> 00:00:11,583
Nous allons maintenant aborder
l'ensemble de ces manipulations

5
00:00:11,583 --> 00:00:13,779
les unes après les autres
et voir comment concrètement

6
00:00:13,779 --> 00:00:16,307
elles se pratiquent dans la syntaxe
du langage C++..

7
00:00:17,289 --> 00:00:20,528
Pour déclarer une variable en C++
nous savons que nous pouvons

8
00:00:20,528 --> 00:00:21,995
avoir recours à la syntaxe suivante.

9
00:00:21,995 --> 00:00:24,486
Donc nom du type, par exemple
<i>int</i> pour des entiers

10
00:00:24,486 --> 00:00:26,893
suivi de l'identificateur associé à la
variable, à savoir « x ».

11
00:00:26,893 --> 00:00:30,941
Pour un pointeur, c'est une notation
équivalente, sauf que le type

12
00:00:30,941 --> 00:00:34,757
va indiquer qu'il s'agit d'un pointeur
sur une valeur d'un type particulier.

13
00:00:34,897 --> 00:00:37,239
Donc si par exemple je veux
déclarer un pointeur

14
00:00:37,239 --> 00:00:40,768
sur un entier, le type associé
sera « <i>int</i>*»

15
00:00:40,768 --> 00:00:44,805
pour dire pointeur sur entier
suivi de l'identificateur du pointeur,

16
00:00:45,145 --> 00:00:47,067
donc de la variable de type
pointeur associé.

17
00:00:48,427 --> 00:00:50,753
De même si je veux déclarer 
un pointeur sur un <i>double</i>

18
00:00:50,753 --> 00:00:52,470
j'aurais recours à la syntaxe suivante.

19
00:00:52,470 --> 00:00:55,992
Donc j'écrirais <i>double</i>* comme type

20
00:00:55,992 --> 00:00:59,079
suivi de l'identificateur 
de la variable « ptr »

21
00:00:59,079 --> 00:01:02,082
Donc ici, j'ai déclaré une variable « ptr »
qui est de type pointeur

22
00:01:02,082 --> 00:01:03,697
sur une valeur de type <i>double</i>.

23
00:01:05,129 --> 00:01:08,810
Ceci est pour la déclaration tout court.
Si je veux déclarer-initialiser,

24
00:01:08,810 --> 00:01:10,998
la syntaxe est analogue à ce que
je connais jusqu'ici.

25
00:01:10,998 --> 00:01:15,643
Par exemple, si je veux écrire, déclarer
et initialiser une variable « x »

26
00:01:15,643 --> 00:01:19,262
de type entier initialisée à 4,
j'ai recours à cette syntaxe-là

27
00:01:19,262 --> 00:01:21,964
Et bien, la syntaxe est tout à fait
analogue pour les pointeurs

28
00:01:21,964 --> 00:01:25,326
Je dois indiquer entre parenthèses
la valeur du pointeur.

29
00:01:25,826 --> 00:01:28,600
Et cette valeur doit être une adresse.

30
00:01:30,000 --> 00:01:33,812
Donc ici très concrètement, trois exemples
de déclaration-initialisation

31
00:01:33,825 --> 00:01:35,349
d'une variable de type pointeur.

32
00:01:35,349 --> 00:01:38,545
Ici nous anticipons un petit peu sur
ce qui va suivre dans cette séquence

33
00:01:38,545 --> 00:01:40,155
et dans les suivantes, à savoir

34
00:01:40,155 --> 00:01:43,475
comment obtenir l'adresse 
d'une zone mémoire nommée,

35
00:01:43,475 --> 00:01:46,625
ici l'adresse de la zone mémoire
appelée « i », de la variable « i »

36
00:01:46,625 --> 00:01:49,049
Comment allouer dynamiquement
un emplacement mémoire

37
00:01:49,049 --> 00:01:52,425
capable de contenir une donnée
d'un type particulier, ici un entier.

38
00:01:52,425 --> 00:01:54,594
Donc bien évidemment, 
nous allons revoir ces notions

39
00:01:54,594 --> 00:01:56,558
beaucoup plus en détails le moment venu.

40
00:01:56,944 --> 00:02:00,437
Première ligne ici, je suis 
en train de déclarer-initialiser

41
00:02:00,437 --> 00:02:03,363
une variable « ptr » 
de type pointeur, sur un entier.

42
00:02:03,363 --> 00:02:07,049
Donc la variable « ptr » est capable
de contenir l'adresse d'un entier

43
00:02:07,049 --> 00:02:10,504
et nous initialisons cette variable
au moyen d'une valeur spéciale

44
00:02:10,504 --> 00:02:15,111
qui est <i>nullptr</i> qui signifie
que le pointeur « ptr »

45
00:02:15,111 --> 00:02:17,916
ne pointe vers rien.

46
00:02:17,916 --> 00:02:20,052
Donc rappelez-vous la petite analogie
avec le carnet d'adresses.

47
00:02:20,052 --> 00:02:22,351
Ici nous avons une page du carnet
d'adresses qui est vide,

48
00:02:22,351 --> 00:02:24,851
qui est initialisée à – qui est effacée,
qui ne contient rien.

49
00:02:25,825 --> 00:02:31,477
Deuxième instruction, 
j'initialise un pointeur « ptr »

50
00:02:31,477 --> 00:02:33,868
au moyen de l'adresse d'une zone existante,

51
00:02:33,868 --> 00:02:35,505
d'une variable existante en mémoire.

52
00:02:35,643 --> 00:02:37,244
Donc nous allons revenir sur ce point
un peu plus tard

53
00:02:37,244 --> 00:02:40,951
Et puis ici, j'initialise mon pointeur
au moyen de l'adresse

54
00:02:40,951 --> 00:02:42,874
d'une zone allouée dynamiquement.

55
00:02:42,894 --> 00:02:45,681
Ce sont des notions qui vont faire
l'objet des séquences suivantes

56
00:02:45,681 --> 00:02:47,586
et de la suite de cette séquence.

57
00:02:47,766 --> 00:02:50,192
Vous noterez au passage que la valeur
spéciale <i>nullptr</i> peut être

58
00:02:50,192 --> 00:02:53,350
affectée à tout type de pointeur
donc un pointeur sur <i>double</i>,

59
00:02:53,350 --> 00:02:55,801
pointeur sur <i>entier</i>, pointeur
sur n'importe quel type

60
00:02:55,801 --> 00:02:57,568
de donnée valide en C++.

61
00:02:57,568 --> 00:03:00,686
Elle signifie dans tous les cas,
de façon explicite

62
00:03:00,686 --> 00:03:02,551
que le pointeur ne pointe vers rien.

63
00:03:03,839 --> 00:03:07,383
C++ met à disposition 
deux opérateurs fondamentaux

64
00:03:07,383 --> 00:03:09,325
pour la manipulation de pointeurs.

65
00:03:09,415 --> 00:03:11,464
L'opérateur « & », l'opérateur « * »

66
00:03:11,464 --> 00:03:14,792
Le rôle de l'opérateur « & » est
de retourner l'adresse mémoire

67
00:03:14,792 --> 00:03:16,645
de la valeur d'une variable.

68
00:03:17,563 --> 00:03:19,637
Examinons ce que cela signifie 
sur un exemple concret

69
00:03:19,689 --> 00:03:23,268
Donc ici nous avons un petit programme
qui commence par déclarer

70
00:03:23,268 --> 00:03:26,528
une variable « x » de type entier 
et l'initialise à 3.

71
00:03:26,528 --> 00:03:30,737
Donc nous avons cette situation mémoire
et nous savons que à chaque variable

72
00:03:30,737 --> 00:03:33,740
d'un programme est associée une
adresse en mémoire.

73
00:03:33,740 --> 00:03:35,382
Notons cette adresse « adr ».

74
00:03:35,662 --> 00:03:39,022
Dans un second temps nous déclarons
une seconde variable « px »

75
00:03:39,022 --> 00:03:41,506
qui cette fois est de type 
pointeur sur un entier.

76
00:03:41,506 --> 00:03:44,775
Donc elle est capable 
de contenir l'adresse

77
00:03:44,775 --> 00:03:46,502
d'une zone mémoire contenant un entier.

78
00:03:46,750 --> 00:03:48,711
Donc nous avons cette situation mémoire.

79
00:03:49,539 --> 00:03:54,148
Et ici dans un premier temps nous
initialisons la variable « px »

80
00:03:54,148 --> 00:03:56,755
au moyen de la variable
spéciale <i>nullptr</i>

81
00:03:57,150 --> 00:04:00,174
Ce qui veut dire concrètement que « px »

82
00:04:00,174 --> 00:04:03,028
est capable de pointer sur 
une zone mémoire contenant un entier,

83
00:04:03,028 --> 00:04:05,593
mais à ce stade 
ne pointe vers rien.

84
00:04:07,568 --> 00:04:09,438
Elle ne pointe sur rien du tout.

85
00:04:09,438 --> 00:04:11,501
Ensuite, troisième ligne du programme.

86
00:04:12,210 --> 00:04:14,684
Et c'est là qu'intervient 
notre petit opérateur « & ».

87
00:04:16,214 --> 00:04:21,451
Nous affectons à la variable « px »
l'adresse de la variable « x ».

88
00:04:21,916 --> 00:04:24,386
Nous avons vu que 
cette adresse ici est « adr » ,

89
00:04:24,386 --> 00:04:26,730
donc nous allons 
nous trouver dans cette situation.

90
00:04:26,730 --> 00:04:29,207
Nous allons affecter à « px »
l'adresse de « x »

91
00:04:29,207 --> 00:04:32,255
Donc nous établissons le lien entre
le pointeur et la zone pointée,

92
00:04:34,655 --> 00:04:36,448
au moyen de cette affectation.

93
00:04:38,246 --> 00:04:43,159
Donc pour résumer, « px » retourne
l'adresse associée à la variable « x »

94
00:04:48,949 --> 00:04:52,811
L'opérateur « * » permet 
de retourner la valeur pointée

95
00:04:52,811 --> 00:04:54,555
par une variable de type pointeur.

96
00:04:54,555 --> 00:04:57,309
Tout à l'heure nous avons vu
l'opérateur « & ».

97
00:04:57,309 --> 00:04:59,078
Donc « &x » où « x » est une variable,

98
00:04:59,078 --> 00:05:01,343
et va retourner 
l'adresse de « x » en mémoire.

99
00:05:03,391 --> 00:05:06,081
Maintenant imaginons que nous ayons
un pointeur « px »

100
00:05:06,081 --> 00:05:09,837
Ce dernier pointe, contient 
l'adresse d'une zone mémoire

101
00:05:09,837 --> 00:05:12,201
contenant une certaine valeur,
par exemple 3.

102
00:05:12,201 --> 00:05:15,606
Et nous souhaitons à partir du pointeur,
retrouver la valeur pointée.

103
00:05:16,233 --> 00:05:18,817
À ce moment-là il faut 
utiliser l'opérateur « * »

104
00:05:18,817 --> 00:05:21,824
appliqué à une variable de type pointeur 
et c'est ce qui va nous permettre

105
00:05:21,824 --> 00:05:25,003
de retrouver la valeur 
pointée par ce pointeur.

106
00:05:26,740 --> 00:05:29,475
Donc si nous reprenons notre petit
exemple de la séquence précédente.

107
00:05:29,475 --> 00:05:31,279
Nous déroulons les premières instructions

108
00:05:31,279 --> 00:05:33,293
et nous nous trouvons la situation suivante.

109
00:05:33,293 --> 00:05:36,842
Une variable « x » initialisée à 3
de type entier et qui a une adresse.

110
00:05:36,842 --> 00:05:39,594
Une seconde variable « px »
qui est de type pointeur sur un entier

111
00:05:39,594 --> 00:05:41,659
qu'on commence
par initialiser à <i>nullptr</i>,

112
00:05:41,659 --> 00:05:43,825
ce qui veut dire qu'elle ne
pointe sur rien.

113
00:05:43,825 --> 00:05:47,501
Et à laquelle nous affectons par la suite
l'adresse de « x »

114
00:05:48,671 --> 00:05:50,933
ce qui va permettre d'établir 
le lien entre le pointeur

115
00:05:50,933 --> 00:05:52,734
et la variable pointée.

116
00:05:52,734 --> 00:05:56,542
Ensuite, dernière instruction,
et c'est là que nous faisons appel

117
00:05:56,542 --> 00:05:58,087
à notre fameux petit opérateur « * »

118
00:05:58,087 --> 00:06:01,529
qui va permettre justement d'établir
le lien entre le pointeur

119
00:06:01,529 --> 00:06:03,029
et la valeur pointée

120
00:06:03,029 --> 00:06:04,846
Donc ici « *px »

121
00:06:04,846 --> 00:06:08,839
nous appliquons « * » au pointeur,
va nous permettre de retrouver

122
00:06:08,839 --> 00:06:12,463
à partir du pointeur, la valeur
pointée par ce pointeur

123
00:06:16,597 --> 00:06:19,193
Imaginez maintenant que j'ai
une variable de type <i>int</i>

124
00:06:19,193 --> 00:06:23,174
nommée « i » qui contient une certaine
valeur et qui a une adresse en mémoire.

125
00:06:24,804 --> 00:06:30,841
Si j'écris « &i », j'ai en fait en retour
une valeur de type pointeur

126
00:06:30,841 --> 00:06:34,819
sur entier qui a pour valeur
l'adresse « adr »

127
00:06:36,454 --> 00:06:39,794
Si j'écris maintenant « *&i »,

128
00:06:40,706 --> 00:06:43,677
je vais appliquer « * » à ce pointeur

129
00:06:43,677 --> 00:06:47,957
qui va me retourner la valeur
contenue à l'adresse

130
00:06:47,957 --> 00:06:49,956
et donc exactement 3.

131
00:06:50,336 --> 00:06:54,906
Donc écrire « *&i » est donc 
strictement équivalent à écrire « i »

132
00:06:54,906 --> 00:06:58,092
puisque j'accède directement 
à la valeur contenue dans « i »

133
00:07:00,252 --> 00:07:04,191
C++ a la réputation d'être un langage
à la syntaxe un peu compliquée.

134
00:07:04,191 --> 00:07:07,035
Avec les opérateurs « * » et « & »
que nous venons de voir,

135
00:07:07,035 --> 00:07:08,683
nous en avons un premier exemple.

136
00:07:08,683 --> 00:07:11,092
En fait, selon le contexte d'utilisation,
ces deux opérateurs

137
00:07:11,092 --> 00:07:12,578
ne veulent pas toujours dire la même chose.

138
00:07:12,578 --> 00:07:13,968
Regardons tout ceci en détails

139
00:07:15,390 --> 00:07:18,741
Il existe désormais deux contextes
d'utilisation du symbole « & ».

140
00:07:18,741 --> 00:07:21,991
Le premier contexte où le « & »
suit le nom d'un type

141
00:07:21,991 --> 00:07:24,049
et le second contexte où le « & »

142
00:07:24,049 --> 00:07:26,221
précède le nom d'une variable de type pointeur.

143
00:07:27,582 --> 00:07:31,190
Dans le premier cas, nous allons
utiliser le « & » pour déclarer

144
00:07:31,190 --> 00:07:34,258
une référence, 
soit lors d'un passage

145
00:07:34,258 --> 00:07:37,529
par référence de fonction,
soit pour déclarer une référence en elle-même.

146
00:07:39,737 --> 00:07:42,311
Par exemple, je peux déclarer
une variable « i » de type entier

147
00:07:47,061 --> 00:07:49,779
Et je peux déclarer une référence

148
00:07:51,368 --> 00:07:53,603
à cette variable qui s'appelle « id »

149
00:07:54,321 --> 00:07:56,366
qui veut dire simplement que 
« id » est désormais

150
00:07:56,366 --> 00:07:58,702
un autre nom pour la variable « i »

151
00:07:59,162 --> 00:08:00,912
Donc premier contexte d'utilisation,

152
00:08:02,622 --> 00:08:06,016
utiliser le « & » pour signifier
la déclaration d'une référence.

153
00:08:07,732 --> 00:08:10,453
Second contexte d'utilisation,
celui où le symbole « & »

154
00:08:10,453 --> 00:08:13,012
précède le nom d'une variable,
et nous venons de voir

155
00:08:13,012 --> 00:08:15,662
que dans ce cas, nous allons
simplement obtenir

156
00:08:15,662 --> 00:08:17,326
l'adresse de cette variable.

157
00:08:17,525 --> 00:08:21,639
Et cette adresse peut évidemment 
être affectée à une variable de type pointeur

158
00:08:21,639 --> 00:08:26,688
pour établir le lien entre
un pointeur et une variable pointée

159
00:08:27,502 --> 00:08:29,749
Donc ici nous avons typiquement
un contexte d'utilisation

160
00:08:29,749 --> 00:08:32,483
qui est tout à fait différent
du premier et qui nous permet

161
00:08:32,483 --> 00:08:34,345
d'aboutir à une situation tout
à fait différente.

162
00:08:35,545 --> 00:08:39,446
Donc première ambiguïté possible,
deux contextes possibles d'utilisation

163
00:08:39,523 --> 00:08:42,457
du « & » qui ne veulent strictement pas
dire la même chose en C++.

164
00:08:44,514 --> 00:08:47,193
Deuxième exemple où C++ utilise
le même symbole

165
00:08:47,193 --> 00:08:49,972
pour représenter deux chose différentes,
le cas de l'étoile.

166
00:08:50,360 --> 00:08:52,740
Nous avons en effet vu dans
ce qui a précédé

167
00:08:52,809 --> 00:08:55,811
que lorsque l'étoile suit le nom
d'un type comme c'est le cas ici,

168
00:08:55,811 --> 00:08:59,552
il sert tout simplement à déclarer
une variable de type pointeur.

169
00:08:59,928 --> 00:09:03,353
Par exemple, si j'écris dans un programme
quelque chose comme ceci,

170
00:09:03,353 --> 00:09:06,900
je suis en train de déclarer 
une variable appelée « id »

171
00:09:06,900 --> 00:09:10,517
et cette variable est déclarée
de type pointeur sur un entier

172
00:09:10,517 --> 00:09:12,247
grâce à cette étoile.

173
00:09:12,247 --> 00:09:15,680
Ce qui veut dire qu'elle peut
contenir, potentiellement,

174
00:09:17,960 --> 00:09:21,728
l'adresse d'une zone mémoire
contenant un entier.

175
00:09:23,492 --> 00:09:24,836
Comme ceci

176
00:09:25,542 --> 00:09:27,018
Donc « id »

177
00:09:28,348 --> 00:09:30,259
est une variable de type pointeur

178
00:09:30,259 --> 00:09:32,135
déclarée grâce à l'étoile

179
00:09:32,936 --> 00:09:37,619
Si par contre, l'étoile est employée
en précédent le nom d'une variable,

180
00:09:37,619 --> 00:09:40,754
cela présuppose que 
la variable en question

181
00:09:40,754 --> 00:09:42,361
est une variable de type pointeur.

182
00:09:42,361 --> 00:09:46,615
Et l'étoile va servir à retrouver 
la valeur pointée par le pointeur en question.

183
00:09:46,865 --> 00:09:49,615
Donc ici nous sommes plutôt 
dans cette situation.

184
00:09:49,615 --> 00:09:53,051
Nous avons une variable de type
pointeur qui contient

185
00:09:53,051 --> 00:09:57,137
l'adresse d'une certaine zone mémoire,
laquelle contient une valeur.

186
00:09:59,037 --> 00:10:01,563
Imaginons que cette valeur soit un entier.

187
00:10:02,873 --> 00:10:07,035
Donc « *id » va tout simplement
nous retourner la valeur 3

188
00:10:07,945 --> 00:10:11,164
la valeur pointée par le pointeur « id ».

189
00:10:11,391 --> 00:10:16,141
Donc ici, l'étoile nous sert à retrouver
la valeur pointée par un pointeur.

190
00:10:16,141 --> 00:10:18,518
Il s'agit d'un contexte d'utilisation

191
00:10:18,518 --> 00:10:21,065
tout à fait différent de celui qui a précédé ici.
