1
00:00:00,000 --> 00:00:06,200
Dans une séquence précédente nous avions
vu que programmer c'est décrire une

2
00:00:06,200 --> 00:00:12,686
tâche que l'on veut faire exécuter à
l'ordinateur et que cette tâche nous la

3
00:00:12,686 --> 00:00:18,475
décomposons d'un coté en des données qui
vont représenter les grandeurs réelles du

4
00:00:18,475 --> 00:00:20,371
monde et un certain nombre de

5
00:00:20,371 --> 00:00:23,552
traitements, de manipulations,
d'opérations sur ces données.

6
00:00:23,552 --> 00:00:25,350
On a vu comment certains traitements

7
00:00:25,350 --> 00:00:27,060
pouvaient opérer sur les données.

8
00:00:27,060 --> 00:00:30,062
Mais pour que ce soit vraiment un
programme il

9
00:00:30,062 --> 00:00:34,046
faut que les données puissent influencer
les traitements et

10
00:00:34,046 --> 00:00:37,390
c'est ce qui s'appelle les structures de
contrôle, c'est

11
00:00:37,390 --> 00:00:42,010
ce que nous allons donc maintenant aborder
dans cette séquence.

12
00:00:42,010 --> 00:00:43,858
En effet, jusqu'à présent nos programmes

13
00:00:43,858 --> 00:00:46,434
étaient simplement constitués
d'instructions que l'on

14
00:00:46,434 --> 00:00:50,446
exécutait les unes après les autres et les
données n'avaient aucune influence sur

15
00:00:50,446 --> 00:00:51,468
ces traitements.

16
00:00:51,468 --> 00:00:54,315
Pour avoir de l'influence, faire que les
valeurs

17
00:00:54,315 --> 00:00:58,403
de certaines données, de certaines
grandeurs, permettent de changer

18
00:00:58,403 --> 00:01:01,619
ce comportement strictement linéaire de
l'exécution, on a

19
00:01:01,619 --> 00:01:04,490
ce que l'on appelle donc des structures de
contrôle.

20
00:01:04,490 --> 00:01:08,086
Il existe fondamentalement ce qu'on
appelle trois types de contrôles.

21
00:01:08,086 --> 00:01:11,580
Tout d'abord les branchements
conditionnels que nous allons voir

22
00:01:11,580 --> 00:01:15,795
dans cette vidéo et qui permettent de
choisir une séquence

23
00:01:15,795 --> 00:01:20,010
ou une autre en fonction de certaines
valeurs.

24
00:01:20,010 --> 00:01:23,658
Ensuite on a les itérations qui permettent
de

25
00:01:23,658 --> 00:01:27,990
répéter toute une séquence d'instructions
et enfin on a

26
00:01:27,990 --> 00:01:32,713
les boucles conditionnelles qui permettent
elles aussi de répéter

27
00:01:32,713 --> 00:01:36,880
toute une séquence d'instructions mais à
une certaine condition.

28
00:01:36,880 --> 00:01:41,038
Commençons donc maintenant par les
branchements

29
00:01:41,038 --> 00:01:45,860
conditionnels qui comme je viens donc de
le dire, permettent de sauter certaines

30
00:01:45,860 --> 00:01:51,510
parties du programme ou de choisir
certaines parties du programme à exécuter.

31
00:01:51,510 --> 00:01:53,051
Prenons un exemple concret.

32
00:01:53,051 --> 00:01:56,401
Supposons par exemple que vous vouliez
faire l'une ou l'autre

33
00:01:56,401 --> 00:02:00,710
chose en fonction d'une valeur entrée,
saisie au clavier par l'utilisateur.

34
00:02:00,710 --> 00:02:06,040
Supposons par exemple que vous décidiez
que si n est plus petit que

35
00:02:06,040 --> 00:02:10,710
cinq, vous voulez afficher, faire exécuter
un certain type d'instructions,

36
00:02:10,710 --> 00:02:13,350
afficher par exemple que le nombre est
plus petit que

37
00:02:13,350 --> 00:02:16,142
cinq et que par contre si n est supérieur
ou

38
00:02:16,142 --> 00:02:20,515
égal à cinq alors vous voulez faire une
autre séquence d'instructions.

39
00:02:20,515 --> 00:02:22,475
Et bien c'est ce que l'on appelle ici

40
00:02:22,475 --> 00:02:26,930
un branchement conditionnel que nous
allons maintenant donc détailler.

41
00:02:26,930 --> 00:02:31,547
Pour cela donc vous avez d'abord une
partie ici qui va être introduite

42
00:02:31,547 --> 00:02:34,585
par le mot-clé if qui va faire ce
branchement.

43
00:02:34,585 --> 00:02:39,486
Ici if, qui veut dire si en anglais, qui
va vous permettre de faire un choix.

44
00:02:39,486 --> 00:02:45,185
Si la condition qui est derrière est
vérifiée alors le if va exécuter les

45
00:02:45,185 --> 00:02:50,758
instructions qui lui sont indiquées et
éventuellement vous

46
00:02:50,758 --> 00:02:56,610
pourriez avoir une partie sinon, qui en
anglais s'écrit avec

47
00:02:56,610 --> 00:03:02,553
le mot-clé else, qui se trouve ici, qui si
la condition n'est pas

48
00:03:02,553 --> 00:03:08,330
vérifiée alors va faire que c'est cette
deuxième partie qui va s'exécuter.

49
00:03:08,330 --> 00:03:10,965
Le schéma général est donc le suivant.

50
00:03:10,965 --> 00:03:17,130
Nous avons le mot clé if qui va être suivi
d'une condition entre parenthèses, nous

51
00:03:17,130 --> 00:03:21,892
reviendrons plus tard sur les conditions,
puis une accolade ouvrante, un bloc

52
00:03:21,892 --> 00:03:25,008
d'instructions que l'on veut voir
exécutées si

53
00:03:25,008 --> 00:03:28,218
la condition est vraie, lorsque la
condition

54
00:03:28,218 --> 00:03:31,403
sera vraie, c'est ce bloc d'instructions
qui

55
00:03:31,403 --> 00:03:34,685
va s'exécuter, et puis une accolade
fermante.

56
00:03:34,685 --> 00:03:37,711
On peut ensuite avoir éventuellement le

57
00:03:37,711 --> 00:03:40,980
mot clé-réservé else, de nouveau une
accolade

58
00:03:40,980 --> 00:03:47,015
ouvrante, un autre bloc d'instructions ici
que je mets en bleu, et qui s'exécutera

59
00:03:47,015 --> 00:03:52,374
si la condition est fausse.
Voilà donc pour le

60
00:03:52,374 --> 00:03:57,770
schéma général mais regardons maintenant
pas à pas un exemple particulier.

61
00:03:57,770 --> 00:04:01,418
Dans cet exemple, la structure de
contrôle, le branchement

62
00:04:01,418 --> 00:04:05,220
conditionnel qui nous intéresse, va se
trouver ici, mais on

63
00:04:05,220 --> 00:04:08,705
commence par donc déclarer une variable n
de type

64
00:04:08,705 --> 00:04:12,207
entier que l'on n'a pas initialisée donc
ici on ne

65
00:04:12,207 --> 00:04:15,436
connait pas sa valeur puis on affiche sur
le

66
00:04:15,436 --> 00:04:18,880
terminal ici le message "entrez un nombre"
suivit du

67
00:04:18,880 --> 00:04:21,500
saut à la ligne puis on attend la saisie

68
00:04:21,500 --> 00:04:25,395
au clavier d'une valeur ici de type entier
par l'utilisateur.

69
00:04:25,395 --> 00:04:28,610
Supposons que l'utilisateur entre la
valeur trois

70
00:04:28,610 --> 00:04:31,106
donc maintenant n a ici la valeur trois.

71
00:04:31,106 --> 00:04:34,538
On arrive donc à notre branchement
conditionnel qui

72
00:04:34,538 --> 00:04:36,990
a été introduit par le mot-clé if ici,

73
00:04:36,990 --> 00:04:41,690
puis qui a donc sa condition entre
parenthèses n inférieur à cinq.

74
00:04:41,690 --> 00:04:44,243
On commence par se poser la question,
évaluer

75
00:04:44,243 --> 00:04:46,820
est ce que n est strictement inférieur à
cinq?

76
00:04:46,820 --> 00:04:51,770
Trois est strictement inférieur à cinq,
ici la condition est

77
00:04:51,770 --> 00:04:56,960
donc vraie et donc on va rentrer dans le
code, le bloc ici qui

78
00:04:56,960 --> 00:05:02,056
est directement sous le if.
Donc ce qui se passe c'est que l'on

79
00:05:02,056 --> 00:05:05,085
arrive ici à l'exécution du cout, "votre
nombre est

80
00:05:05,085 --> 00:05:07,750
plus petit que cinq", c'est le message qui
s'affiche.

81
00:05:07,750 --> 00:05:12,106
L'exécution continue ensuite après le
bloc,

82
00:05:12,106 --> 00:05:15,432
c'est-à-dire ici qu'on va sauter
directement à

83
00:05:15,432 --> 00:05:19,850
l'instruction ici qui affiche le message
"Au revoir" et le programme se termine.

84
00:05:19,850 --> 00:05:23,760
Quand est-il maintenant si à cette étape

85
00:05:23,760 --> 00:05:27,717
ici, l'utilisateur avait entré la valeur
sept?

86
00:05:27,717 --> 00:05:32,877
Alors à ce stade, le programme va de
nouveau se poser la question, est-e que

87
00:05:32,877 --> 00:05:38,030
sept est strictement inférieur à cinq?
Mais ici la condition va être fausse.

88
00:05:38,030 --> 00:05:41,040
Sept n'est pas strictement inférieur à
cinq.

89
00:05:41,040 --> 00:05:47,959
Comme la condition est fausse, le if va
cette fois-ci sauter dans la partie else,

90
00:05:47,959 --> 00:05:50,848
va complètement ignorer la partie
précédente pour

91
00:05:50,848 --> 00:05:53,326
se brancher directement et d'où le nom
branchement

92
00:05:53,326 --> 00:05:57,726
conditionnel, va pour se brancher
directement donc ici sur cette ligne

93
00:05:57,726 --> 00:06:03,800
d'affichage qui va dire que le nombre n
est supérieur ou égal à cinq.

94
00:06:03,800 --> 00:06:07,410
Puis on va continuer l'exécution du
programme

95
00:06:07,410 --> 00:06:09,613
après le bloc, la suite du programme

96
00:06:09,613 --> 00:06:12,235
qui suit le bloc de branchement
conditionnel

97
00:06:12,235 --> 00:06:14,760
et donc afficher le dernier message "Au
revoir".

98
00:06:14,760 --> 00:06:19,255
Les accolades servent donc à définir

99
00:06:19,255 --> 00:06:22,747
le bloc d'instructions qui va être
contrôlé,

100
00:06:22,747 --> 00:06:26,416
soit le bloc d'instructions qui s'exécute
lorsque

101
00:06:26,416 --> 00:06:28,880
la condition est vraie, soit le bloc

102
00:06:28,880 --> 00:06:32,946
d'instructions qui s'exécute lorsque la
condition est fausse.

103
00:06:32,946 --> 00:06:35,954
Ce bloc d'instructions c'est l'ensemble
des instructions

104
00:06:35,954 --> 00:06:38,386
que l'on veut contrôler, sur lesquelles on
veut

105
00:06:38,386 --> 00:06:41,010
justement effectuer un branchement et on
peut donc

106
00:06:41,010 --> 00:06:44,432
regrouper plusieurs instructions, autant
d'instructions que l'on veut,

107
00:06:44,432 --> 00:06:46,750
dans un bloc, Supposons par exemple que
l'on

108
00:06:46,750 --> 00:06:49,497
veuille, non seulement afficher que le
nombre est

109
00:06:49,497 --> 00:06:53,701
plus petit que cinq mais que l'on veuille
aussi dire quelle est la valeur du nombre,

110
00:06:53,701 --> 00:06:57,990
alors on va simplement ici dans le cas où
la condition est vraie, dans le bloc

111
00:06:57,990 --> 00:07:01,645
contrôlé par la condition, lorsque la
condition est

112
00:07:01,645 --> 00:07:04,150
vraie, ici rajouter une ligne dans ce
bloc.

113
00:07:04,150 --> 00:07:06,250
Ceci est donc tout à fait possible et

114
00:07:06,250 --> 00:07:09,665
ça permet de contrôler plusieurs
instructions par notre

115
00:07:09,665 --> 00:07:11,320
branchement conditionnel.

116
00:07:11,320 --> 00:07:14,808
Lorsqu'un bloc ne comprend qu'une seule

117
00:07:14,808 --> 00:07:18,436
instruction, l'accolade est tout à fait
optionnelle.

118
00:07:18,436 --> 00:07:22,156
Je vous encourage cependant de toujours
utiliser ces blocs et toujours

119
00:07:22,156 --> 00:07:25,690
de mettre ces accolades de sorte à rendre
le code plus facilement

120
00:07:25,690 --> 00:07:29,785
lisible et plus facilement maintenable
mais je signale simplement que ces

121
00:07:29,785 --> 00:07:34,650
accolades sont optionnelles au cas où vous
rencontriez ce genre de code.

122
00:07:34,650 --> 00:07:38,220
Par ailleurs le bloc else est tout à fait
optionnel

123
00:07:38,220 --> 00:07:41,333
lui aussi, on peut tout à fait avoir juste
un

124
00:07:41,333 --> 00:07:45,469
seul if sans else, simplement ici si la
condition n'est

125
00:07:45,469 --> 00:07:51,100
pas vérifiée alors on continuera
simplement à exécuter le programme.

126
00:07:51,100 --> 00:07:56,855
On ne fera quelque chose de particulier
que si la condition est vraie.

127
00:07:56,855 --> 00:08:00,074
Si la condition est vraie alors on
exécutera

128
00:08:00,074 --> 00:08:03,408
en plus le bloc qui est ici contrôlé par
le if.

129
00:08:03,408 --> 00:08:09,205
Si je prends un exemple, ici toujours avec
donc la saisie au clavier

130
00:08:09,205 --> 00:08:14,356
d'une valeur d'un entier avec ici
simplement juste le test sans le else,

131
00:08:14,356 --> 00:08:19,920
donc si la valeur entrée est strictement
inférieure à cinq donc par exemple

132
00:08:19,920 --> 00:08:25,307
trois, alors on va se brancher ici et on
va exécuter l'affichage de "Votre

133
00:08:25,307 --> 00:08:29,746
nombre est plus petit que cinq" puis l'on
continuera le

134
00:08:29,746 --> 00:08:34,382
reste du programme donc ici à afficher le
message "Au revoir".

135
00:08:34,382 --> 00:08:38,878
Par contre si l'on entre une valeur plus
grande strictement supérieure ou

136
00:08:38,878 --> 00:08:41,342
égale à cinq alors à ce moment là par
exemple la valeur

137
00:08:41,342 --> 00:08:43,624
sept, alors à ce moment là ici le test est
faux et

138
00:08:43,624 --> 00:08:46,534
tout simplement on n'exécute rien de

139
00:08:46,534 --> 00:08:50,530
particulier, on va continuer tout
simplement par

140
00:08:50,530 --> 00:08:55,690
terminer le programme en affichant ici
simplement le message "Au revoir".

141
00:08:55,690 --> 00:09:01,220
Pour résumer, le schéma général d'un
branchement conditionnel en C++ est

142
00:09:01,220 --> 00:09:05,305
donc le suivant : on a une instruction if
suivie d'une

143
00:09:05,305 --> 00:09:10,340
condition entre parenthèses rondes puis un
bloc d'instructions ici donc

144
00:09:10,340 --> 00:09:15,621
entre accolades qui sont les instructions
qui vont s'exécuter si la condition

145
00:09:15,621 --> 00:09:20,304
est vraie et éventuellement de façon
optionnelle, le mot réservé else

146
00:09:20,304 --> 00:09:25,495
suivi d'un bloc d'instructions qui vont
s'exécuter si la condition est fausse.

147
00:09:25,495 --> 00:09:28,382
Et ces instructions ici qui sont dans les

148
00:09:28,382 --> 00:09:30,650
blocs sont des instructions C++ tout à
fait

149
00:09:30,650 --> 00:09:34,875
générales, elles peuvent en particulier
elles-mêmes contenir d'autres

150
00:09:34,875 --> 00:09:38,181
if, c'est ce que l'on appelle des choix
imbriqués.

151
00:09:38,181 --> 00:09:41,260
Prenons un exemple, supposons par exemple

152
00:09:41,260 --> 00:09:44,329
que si on ait trois valeurs donc x, y et z

153
00:09:44,329 --> 00:09:50,061
et que on veuille tester comment elles se
positionnent par rapport à

154
00:09:50,061 --> 00:09:53,899
leur égalité, savoir si x est égal à
y,savoir si x

155
00:09:53,899 --> 00:09:57,709
est égal à z, ou savoir si les trois
variables sont égales.

156
00:09:57,709 --> 00:10:01,949
On va commencer donc par exemple, on va
faire un test si x est égal

157
00:10:01,949 --> 00:10:06,336
à y, et là vous voyez, on va avoir tout un
bloc si x égal

158
00:10:06,336 --> 00:10:13,318
y qui va aller jusqu'ici, donc ça, ça sera
vrai si x égal y et si x est différent

159
00:10:13,318 --> 00:10:18,194
de y alors à ce moment-là ça sera tout cet
autre bloc ici qui sera exécuté.

160
00:10:18,194 --> 00:10:22,322
Si x est égal à y alors à ce moment-là on
peut rentrer dans un

161
00:10:22,322 --> 00:10:26,249
bloc d'instructions et avoir de nouveau
une autre

162
00:10:26,249 --> 00:10:31,870
instruction ici qui contient elle-même son
propre sous-bloc

163
00:10:31,870 --> 00:10:35,830
de conditions vraies, ici, et puis
éventuellement son

164
00:10:35,830 --> 00:10:39,076
else pour un sous bloc ici de conditions
fausses.

165
00:10:39,076 --> 00:10:44,395
Donc ce qui fait que si x est égal à y et
ensuite, on rentre dans le bloc,

166
00:10:44,395 --> 00:10:46,796
si y est égal à z, alors dans ce

167
00:10:46,796 --> 00:10:51,470
cas-là on affichera que les trois valeurs
sont égales.

168
00:10:51,470 --> 00:10:56,830
Sinon si x est égal à y mais que y n'est
pas égal à z,

169
00:10:56,830 --> 00:11:00,302
alors à ce moment-là on exécutera cet

170
00:11:00,302 --> 00:11:04,760
affichage, seules les deux premières
valeurs sont égales.

171
00:11:04,760 --> 00:11:09,677
Et on pourrait procéder de la sorte aussi
dans le cas où x est différent de y.

172
00:11:09,677 --> 00:11:13,340
Evidemment il ne faut pas abuser de ce
genre de solutions.

173
00:11:13,340 --> 00:11:16,468
Pratiquement, si vous avez plus que trois
niveaux alors

174
00:11:16,468 --> 00:11:19,193
à ce moment là le code devient vite
illisible.

175
00:11:19,193 --> 00:11:22,325
Illustrons maintenant très concrètement

176
00:11:22,325 --> 00:11:27,534
l'exemple précédent avec par exemple le
cas où on a trois variables

177
00:11:27,534 --> 00:11:30,215
x, y et z qui ont toutes les trois la
valeur un.

178
00:11:30,215 --> 00:11:34,501
On commence ici par le premier if, est-ce
que x est égal à y?

179
00:11:34,501 --> 00:11:40,260
Oui, un est égal à un donc à ce moment là
on va rentrer dans ce bloc ici,

180
00:11:40,260 --> 00:11:45,613
on va pouvoir donc exécuter notre deuxième
if ici, est-ce que y est égal à z?

181
00:11:45,613 --> 00:11:47,527
Donc on se pose la question

182
00:11:47,527 --> 00:11:52,088
est-ce que les deux valeurs sont égales?

183
00:11:52,088 --> 00:11:55,444
Ici oui, un est égal à un donc on va
rentrer ici dans

184
00:11:55,444 --> 00:11:57,706
cette ligne et le message qui va

185
00:11:57,706 --> 00:12:00,970
s'afficher c'est "les trois valeurs sont
égales".

186
00:12:00,970 --> 00:12:03,994
Puis le programme va continuer à exécuter
la suite.

187
00:12:03,994 --> 00:12:05,995
Ici il n'y a pas de suite à exécuter.

188
00:12:05,995 --> 00:12:09,474
Exécuter la suite du premier bloc ici de
plus haut niveau, il

189
00:12:09,474 --> 00:12:12,760
n'y a toujours pas de suite et donc ici le
programme se termine.

190
00:12:12,760 --> 00:12:15,040
Supposons maintenant que l'on ait des
valeurs

191
00:12:15,040 --> 00:12:17,516
différentes, par exemple que l'on ait les

192
00:12:17,516 --> 00:12:22,090
valeurs deux dans z et dans y et qu'on ait
la valeur un dans x.

193
00:12:22,090 --> 00:12:25,616
Alors la première condition ici va
commencer par

194
00:12:25,616 --> 00:12:28,368
s'exécuter, est-ce que un est égal à deux?

195
00:12:28,368 --> 00:12:32,260
Bien sûr que non et donc la condition ici
est fausse ce qui fait qu'on

196
00:12:32,260 --> 00:12:34,140
va se brancher ici sur le bloc else

197
00:12:34,140 --> 00:12:37,924
correspondant et donc on va rentrer dans
l'exécution

198
00:12:37,924 --> 00:12:41,140
de ce bloc ici par donc le test de ici

199
00:12:41,140 --> 00:12:45,660
une deuxième condition, est-ce que x est
égal à z?

200
00:12:45,660 --> 00:12:47,730
Est-ce que un est égal à deux?

201
00:12:47,730 --> 00:12:52,816
C'est aussi un faux et donc ce deuxième if
va lui-même ici se brancher

202
00:12:52,816 --> 00:12:57,758
sur un bloc qui va s'exécuter, qui est le
bloc qui va s'exécuter ici,

203
00:12:57,758 --> 00:13:03,180
lequel bloc commence lui-même par une
troisième instruction

204
00:13:03,180 --> 00:13:07,820
if qui va évaluer sa condition.
Est-e que y est égal à z?

205
00:13:07,820 --> 00:13:09,492
Deux est égal à deux, oui.

206
00:13:09,492 --> 00:13:13,034
Et donc à ce moment-là on va exécuter le
bloc qui

207
00:13:13,034 --> 00:13:17,185
est contrôlé par la condition vraie et
donc ici on va

208
00:13:17,185 --> 00:13:22,076
afficher que les deux dernières valeurs
sont égales puis on va

209
00:13:22,076 --> 00:13:25,332
terminer l'exécution du programme,
c'est-à-dire qu'on

210
00:13:25,332 --> 00:13:28,300
va terminer l'exécution des instructions
ici

211
00:13:28,300 --> 00:13:29,476
qui suivaient if.

212
00:13:29,476 --> 00:13:34,372
Il n'y a rien, puis ensuite la fin des
instructions de ce

213
00:13:34,372 --> 00:13:38,000
bloc ici, il n'y a rien non plus, puis
enfin les instructions

214
00:13:38,000 --> 00:13:40,738
du bloc de plus haut niveau, il n'y a rien
non plus

215
00:13:40,738 --> 00:13:43,000
dans ce cas particulier, mais voilà

216
00:13:43,000 --> 00:13:46,120
comment s'exécuterait le programme de
l'exemple.

