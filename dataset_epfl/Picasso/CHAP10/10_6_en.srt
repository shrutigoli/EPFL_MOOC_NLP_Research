1
00:00:03,336 --> 00:00:07,156
I will now solve the nonlinear
system of N equations

2
00:00:07,156 --> 00:00:10,506
and N unknowns using Newton's method. 

3
00:00:10,506 --> 00:00:13,786
I remind you that we are searching for

4
00:00:13,786 --> 00:00:22,076
the vector u, with components
of u_1, u_2 up to u_N,

5
00:00:22,076 --> 00:00:26,406
the approximations of u in x_1,
u in x_2 and so on to u in x_N

6
00:00:26,406 --> 00:00:33,276
such that the vector F(u) = 0.

7
00:00:33,276 --> 00:00:37,276
And F(u) contains

8
00:00:37,276 --> 00:00:42,396
these equation,

9
00:00:42,396 --> 00:00:48,056
the first equation is 2u_1 - u_2
all divided by h^2,

10
00:00:48,056 --> 00:00:51,136
the approximation of u'' in x_1,

11
00:00:51,136 --> 00:00:57,746
plus x_1 times u_1^3 minus f(x_1),

12
00:00:57,746 --> 00:00:59,086
and so on for all equations. 

13
00:01:00,690 --> 00:01:03,410
I shall now use Newton's method

14
00:01:03,410 --> 00:01:05,300
to find a zero of this function.

15
00:01:05,300 --> 00:01:07,690
A short recall on Newton's method.

16
00:01:07,690 --> 00:01:15,350
I am searching x such that f(x) = 0.

17
00:01:15,350 --> 00:01:20,720
Here the graph of the function f,

18
00:01:21,579 --> 00:01:23,139
and here the zero.

19
00:01:24,360 --> 00:01:28,660
I start from x_n and I want to calculate x_n+1.

20
00:01:28,660 --> 00:01:32,660
So I take the tangent and
search for the intersection

21
00:01:32,660 --> 00:01:34,640
with the x axis. 

22
00:01:34,640 --> 00:01:37,610
I have f(x_n),

23
00:01:39,033 --> 00:01:41,463
this is the graph of the function f,

24
00:01:41,801 --> 00:01:45,191
I have the slope f '(x_n)

25
00:01:47,650 --> 00:01:54,620
which is equal to f(x_n),
the increase in y, f(x_n) - 0

26
00:01:54,620 --> 00:01:58,620
divided by the increase in x
which is x_n minus x_n+1.

27
00:01:58,620 --> 00:02:01,820
Beware of the sign: x_n minus x_n+1 !

28
00:02:02,007 --> 00:02:09,547
Well f ' (x_n) times x_n minus x_n+1

29
00:02:09,547 --> 00:02:11,977
must be equal to f(x_n).

30
00:02:12,492 --> 00:02:14,692
This is for a function from R to R.

31
00:02:14,697 --> 00:02:18,697
Now for a nonlinear system,

32
00:02:18,697 --> 00:02:23,497
let's assume u^n is known,

33
00:02:23,497 --> 00:02:30,347
well u^n is the vector of
components u_1^nn, u_2^n

34
00:02:30,347 --> 00:02:33,987
and so on up to u _N^n with N lower
index and n the upper index. 

35
00:02:34,572 --> 00:02:38,572
u^n is an approximation of the
vector u such that F(u) = 0,

36
00:02:38,871 --> 00:02:45,991
and u_n+1 is such that

37
00:02:45,991 --> 00:02:52,031
f '(u_n) becomes the jacobian matrix DF
evaluated in u^n,

38
00:02:52,031 --> 00:02:53,811
which I know,

39
00:02:53,811 --> 00:03:01,631
times the vector u^n minus u^n+1
and all this equal to F evaluated in u^n,

40
00:03:01,631 --> 00:03:02,651
which is also known
since u^n is known.

41
00:03:03,089 --> 00:03:08,979
Now I must specify what
the jacobian matrix is. 

42
00:03:08,979 --> 00:03:14,759
Here is the expression of F(u),

43
00:03:14,759 --> 00:03:20,299
for all u in R^N, with
components u_1, u_2 up to u_N.

44
00:03:20,299 --> 00:03:23,539
I will compute DF evaluated in u.

45
00:03:24,235 --> 00:03:26,605
So DF(u), what must I do ?

46
00:03:26,605 --> 00:03:29,595
I must compute all the derivatives,

47
00:03:29,595 --> 00:03:32,675
so I take the first line,

48
00:03:32,675 --> 00:03:36,005
I must differentiate this
expression with respect to x_1.

49
00:03:36,866 --> 00:03:39,986
This will give me the
coefficient '' 1 - 1 '' of this jacobian.

50
00:03:39,986 --> 00:03:43,406
So the derivative of this
expression with respect to u_1,

51
00:03:43,406 --> 00:03:47,174
I get 2 / h^2

52
00:03:47,174 --> 00:03:51,822
and here 3 * x_1 * u_1^2.

53
00:03:51,822 --> 00:03:56,851
 I have 2 over h squared

54
00:03:56,851 --> 00:04:02,231
plus 3 times x_1 times u_1 squared.

55
00:04:02,610 --> 00:04:06,610
This is the derivative of this
first line with respect to u_1.

56
00:04:06,610 --> 00:04:10,610
Then I must differentiate the
first line with respect to u_2,

57
00:04:10,992 --> 00:04:14,992
So here I simply have -1 over h.

58
00:04:15,561 --> 00:04:18,651
This is the coefficient on the
first line second column ("1 - 2")

59
00:04:18,651 --> 00:04:20,241
of the jacobian matrix. 

60
00:04:20,241 --> 00:04:24,071
Next I must differentiate
with respect to u_3,

61
00:04:24,071 --> 00:04:26,321
but u_3 does not appear in this
equation so the derivative is 0.

62
00:04:26,321 --> 00:04:28,731
Ans do on up to u_N where
the derivatives are o.

63
00:04:28,731 --> 00:04:33,131
So on the first line of
this matrix I only have

64
00:04:33,131 --> 00:04:34,581
the derivative w.r.t. u_1,

65
00:04:34,581 --> 00:04:36,581
and here the derivative w.r.t. u_2.

66
00:04:36,581 --> 00:04:38,671
By doing the same thing
on the second line,

67
00:04:38,671 --> 00:04:43,301
I get -1 / h^2,

68
00:04:43,301 --> 00:04:45,701
the term here below the diagonal-

69
00:04:45,701 --> 00:04:48,701
The term on the diagonal is 2 / h^2

70
00:04:48,701 --> 00:04:54,021
plus  3 times x_2 times u_2 squared.

71
00:04:54,021 --> 00:04:56,671
And next I have I will
differentiate w.r.t. u_3,

72
00:04:56,671 --> 00:04:59,401
and will get  -1 / h^2 for the
term above the diagonal.

73
00:04:59,636 --> 00:05:04,296
I will obtain a tridiagonal matrix.

74
00:05:07,940 --> 00:05:13,420
The coefficient above and
below the diagonal are -1/ h^2.

75
00:05:14,259 --> 00:05:17,749
Whereas the coefficients
on the diagonal are for example

76
00:05:17,749 --> 00:05:24,799
2 over h squared plus 3 times
x_N times u_N squared.

77
00:05:26,381 --> 00:05:28,611
All the other elements are zero.

78
00:05:29,759 --> 00:05:33,019
There we have it, I am able
to compute the jacobian matrix.

79
00:05:33,019 --> 00:05:38,259
Now I can write the algorithm which
corresponds to Newton's method.

80
00:05:39,530 --> 00:05:44,500
I start from an initial guess u^0 given,

81
00:05:46,037 --> 00:05:50,037
all the components
u_0^0, u_1^0 up to u_N^0

82
00:05:50,037 --> 00:05:51,397
are known.

83
00:05:52,087 --> 00:05:56,257
Next I loop: from n=0 ,1, 2
and so on,

84
00:05:57,579 --> 00:06:00,209
I must solve a linear system,
this one here,

85
00:06:00,209 --> 00:06:04,209
a matrix times unknown vector
equal to this known vector.

86
00:06:04,558 --> 00:06:11,748
I set A equal to DF(u^n).

87
00:06:11,748 --> 00:06:14,728
This is the jacobian  matrix
I have computed

88
00:06:14,728 --> 00:06:16,978
I did the computation
for any vector u

89
00:06:16,978 --> 00:06:20,138
I have to evaluate it at u^n 
which is known. 

90
00:06:20,138 --> 00:06:24,138
So at the first step of the algorithm, n=0,

91
00:06:24,138 --> 00:06:26,258
I must evaluate the jacobian at u^0.

92
00:06:27,233 --> 00:06:31,553
Next I must compute
the right hand side

93
00:06:31,553 --> 00:06:33,783
of the linear system, denoted as b.

94
00:06:33,783 --> 00:06:37,783
Here b is equal to F(u^n).

95
00:06:41,309 --> 00:06:42,539
C'est un vecteur.

96
00:06:42,539 --> 00:06:44,139
F vecteur de uN vecteur.

97
00:06:44,139 --> 00:06:51,749
We solve A y = b.

98
00:06:52,142 --> 00:06:55,452
Donc il se trouve, ici, que la matrice,

99
00:06:55,452 --> 00:07:01,032
I claim that DF (u) 

100
00:07:01,032 --> 00:07:02,852
is a symmetric positive definite matrix.

101
00:07:02,852 --> 00:07:05,782
Indeed, it is a matrix with 2s and -1s here, 

102
00:07:05,782 --> 00:07:08,652
which is symmetric positive definite, 

103
00:07:08,652 --> 00:07:11,612
plus a diagonal matrix with positive entries

104
00:07:11,612 --> 00:07:13,992
therefore the sum is
symmetric positive definite. 

105
00:07:13,992 --> 00:07:18,532
I can compute the
cholesky factorization

106
00:07:18,532 --> 00:07:22,192
L times L-transpose, A = L L^T.

107
00:07:22,192 --> 00:07:25,042
Next I must solve both of these linear systems.

108
00:07:25,042 --> 00:07:30,612
I must solve L z = b,

109
00:07:30,612 --> 00:07:41,542
then L-transpose times y = z.

110
00:07:44,582 --> 00:07:47,822
So I have solved this linear system A y = b.

111
00:07:47,822 --> 00:07:51,502
Here, y is u^n - u^n+1,

112
00:07:51,502 --> 00:07:54,292
so I define:

113
00:07:55,635 --> 00:08:01,945
u^n+1 equal to u^n-y.

114
00:08:01,945 --> 00:08:08,365
And when F(u^n) is small enough,

115
00:08:08,365 --> 00:08:10,035
I exit this loop.

116
00:08:10,035 --> 00:08:12,865
I know that Newton's
method, if it converges,

117
00:08:12,865 --> 00:08:17,125
it will converge if the initial guess is sufficiently
close to the solution u,

118
00:08:17,125 --> 00:08:18,745
then Newton's method will
converge quickly.

119
00:08:18,745 --> 00:08:23,645
In practice, I will only do a few
iterations of Newton's method. 

120
00:08:23,645 --> 00:08:30,775
You can notice that we have
a nonlinear system to solve,

121
00:08:30,775 --> 00:08:33,255
a nonlinear system with
N equations and N unknowns,

122
00:08:33,255 --> 00:08:37,255
which comes from a nonlinear differential equation,

123
00:08:37,255 --> 00:08:40,265
and this nonlinear system is obtained

124
00:08:40,265 --> 00:08:44,265
by solving several linear systems.
