1
00:00:03,592 --> 00:00:06,403
We now present Euler schemes

2
00:00:06,403 --> 00:00:09,086
to solve numerically 
a differential equation.

3
00:00:09,086 --> 00:00:12,350
We start with the forward
Euler scheme.

4
00:00:12,580 --> 00:00:19,822
Here is t and there is the solution u(t)

5
00:00:19,822 --> 00:00:27,191
of the differential equation, 


6
00:00:27,191 --> 00:00:31,116
here is u(0) at time 0.

7
00:00:32,196 --> 00:00:35,987
The idea is to select
discrete time values

8
00:00:35,987 --> 00:00:45,261
t0, t1, t2, t3 until tn,

9
00:00:45,351 --> 00:00:47,054
here you have t4.

10
00:00:47,054 --> 00:00:51,391
all these points are distant
by h, which is the time step,

11
00:00:51,391 --> 00:00:58,981
thus tn=h*n, 
n=0,1,2, etc...

12
00:00:59,691 --> 00:01:05,219
The goal is to compute
approximations u_n

13
00:01:05,389 --> 00:01:08,715
of u at these discrete times tn.

14
00:01:08,715 --> 00:01:12,412
Here is u at time t4.

15
00:01:12,412 --> 00:01:14,632
Here are the approximations

16
00:01:14,632 --> 00:01:18,382
starting from u0, here is 
the approximation u1,

17
00:01:18,382 --> 00:01:19,793
of u at the time t1,

18
00:01:19,793 --> 00:01:22,499
u2 of u at the time t2,

19
00:01:22,499 --> 00:01:25,023
u3 of u at the time t3,

20
00:01:25,023 --> 00:01:30,459
and u4, the approximation 
of u at the time t4.

21
00:01:31,719 --> 00:01:37,583
So from u0, chosen as

22
00:01:37,583 --> 00:01:40,433
the initial value,

23
00:01:40,433 --> 00:01:43,830
we will compute an
approximation u1.

24
00:01:43,970 --> 00:01:48,376
then, from u1 we will 
compute u2,

25
00:01:48,376 --> 00:01:50,964
the approximation of u at the time t2, 
and so on.

26
00:01:51,064 --> 00:01:57,358
So, from u_n we will compute u_(n+1) the approximation

27
00:01:57,358 --> 00:01:59,057
of u at the time t(n+1).

28
00:01:59,057 --> 00:02:02,642
The question is: 
how to compute

29
00:02:02,642 --> 00:02:04,025
u_(n+1) from u_n?

30
00:02:04,025 --> 00:02:07,439
This is marching method in time,

31
00:02:07,669 --> 00:02:11,328
which corresponds to intuition,
predict the future from the present.

32
00:02:11,718 --> 00:02:15,569
So, how to go from u_n to u_(n+1)?

33
00:02:15,569 --> 00:02:22,731
We shall use Euler's forward scheme.

34
00:02:23,121 --> 00:02:25,856
Again, I know u_n, I want to compute u_(n+1),

35
00:02:25,856 --> 00:02:32,686
the differential equation 
is u'(t)=f(u(t),t),

36
00:02:32,686 --> 00:02:35,623
I am now writing the term corresponding to u',

37
00:02:35,623 --> 00:02:39,755
(u_(n+1)-u_n)/h,

38
00:02:39,755 --> 00:02:45,973
which must be equal to f(u_n, t_n).

39
00:02:46,463 --> 00:02:51,922
How is this scheme obtained?

40
00:02:51,922 --> 00:02:54,506
comment obtient-on 
ce schéma d'Euler ?

41
00:02:54,506 --> 00:03:00,043
Well, write the differential 
equation at time tn.

42
00:03:04,483 --> 00:03:13,518
We have u'(t_n)=f(u(t_n),t_n).

43
00:03:14,768 --> 00:03:18,029
The differential equation is satisfied
for all nonnegative t,

44
00:03:18,029 --> 00:03:20,016
I simply write it at time tn.

45
00:03:20,376 --> 00:03:23,695
Then, we use a finite difference formula,

46
00:03:23,695 --> 00:03:28,349
the forward difference method, 
to approximate u'(tn),

47
00:03:28,609 --> 00:03:38,606
Donc, on utilise une formule 
de différence finie progressive

48
00:03:39,126 --> 00:03:43,585
pour approcher <i>u</i> point au temps <i>tn</i>.

49
00:03:43,585 --> 00:03:47,981
We did this in chapter 2, 
we've introduced finite

50
00:03:47,981 --> 00:03:50,302
difference formulas to 
approach derivatives

51
00:03:50,582 --> 00:03:53,756
of order 1 or order 2.

52
00:03:53,756 --> 00:03:55,366
de différence finie progressive.

53
00:03:55,366 --> 00:03:59,166
We will approach u'(tn)

54
00:03:59,166 --> 00:04:05,770
by u(t(n+1))

55
00:04:06,120 --> 00:04:09,100
minus u(tn), divided by h.

56
00:04:09,370 --> 00:04:11,911
Voilà une formule 
de différence finie progressive

57
00:04:11,911 --> 00:04:14,786
pour approcher <i>u</i> ' au temps <i>tn</i>.

58
00:04:15,546 --> 00:04:20,369
Donc, ceci doit être égal à <i>f(u)</i>
au temps <i>tn, tn</i>,

59
00:04:20,679 --> 00:04:22,644
mais ici, j'avais 
une équation différentielle

60
00:04:22,644 --> 00:04:26,299
<i>u</i> point au temps <i>tn</i> = <i>f(u) tn, tn</i>.

61
00:04:26,609 --> 00:04:31,540
I replaced u' at the time tn 
by a forward finite difference formula

62
00:04:31,540 --> 00:04:37,938
so obviously 
I am left with a term of order 1 in h.

63
00:04:39,028 --> 00:04:45,599
Alors, si on regarde maintenant 
la différence entre le schéma d'Euler

64
00:04:45,599 --> 00:04:49,602
et celui-ci, eh bien, j'ai obtenu 
le schéma d'Euler en remplaçant,

65
00:04:49,602 --> 00:04:52,830
We must end up with a scheme,

66
00:04:52,830 --> 00:04:56,569
that is something I can implement
on a computer.

67
00:04:56,569 --> 00:04:59,375
I cannot implement this 
formula on a computer,

68
00:04:59,375 --> 00:05:01,894
simply because I do not
know 

69
00:05:01,894 --> 00:05:05,019
I do not know u(tn), I do not know
how to implement O(h).

70
00:05:05,019 --> 00:05:08,814
But I can implement

71
00:05:08,814 --> 00:05:11,160
this formula here 
because if I know u_n,

72
00:05:11,160 --> 00:05:13,462
I can compute u_(n+1)
with this formula here.

73
00:05:13,462 --> 00:05:16,061
What I am going to do is 
simply from this line,

74
00:05:16,061 --> 00:05:23,058
I will replace u(tn) by u_n
and u(tn+1) by u_(n+1),

75
00:05:23,378 --> 00:05:26,247
and I get the scheme.

76
00:05:26,247 --> 00:05:31,693
So if we replace u(tn)
by its approximation u_n,

77
00:05:31,853 --> 00:05:35,887
we replace u(t(n+1)) by its 
approximation u_(n+1)

78
00:05:35,887 --> 00:05:39,215
and we give up on this O(h)
that we cannot implement

79
00:05:39,215 --> 00:05:42,254
on a computer.
We obtain the following forward

80
00:05:42,254 --> 00:05:44,148
Euler scheme.

81
00:05:44,818 --> 00:05:50,076
What are the advantages of this
forward Euler's method ?

82
00:05:50,076 --> 00:05:51,681
"Advantages"

83
00:05:52,231 --> 00:05:56,414
It is a explicit scheme,

84
00:05:56,894 --> 00:05:59,969
which means that 
there is

85
00:05:59,969 --> 00:06:03,569
an explicit formula to 
compute u_(n+1)

86
00:06:03,569 --> 00:06:04,995
from u_n.

87
00:06:04,995 --> 00:06:11,705
Simply we have u_(n+1) equals, 
I put the h here, 

88
00:06:11,705 --> 00:06:14,416
and I put everything I know
on the right hand side, and get

89
00:06:14,416 --> 00:06:20,811
u_(n+1)=u_n+h*f(u_n,tn).

90
00:06:21,121 --> 00:06:26,794
So I am at the time tn, I know the function f(x,t), 

91
00:06:26,894 --> 00:06:30,895
I evaluate it at the time tn 
for x=u_n,

92
00:06:30,895 --> 00:06:32,208
I know u_n,

93
00:06:32,208 --> 00:06:35,692
so I can compute u_(n+1).

94
00:06:35,692 --> 00:06:39,875
This method is explicit,
so easy to implement on a computer.

95
00:06:41,545 --> 00:06:43,928
"Easy to program"

96
00:06:44,668 --> 00:06:49,953
We will see a matlab/octave implementation
during the exercise session.

97
00:06:49,953 --> 00:06:52,530
What are the drawbacks?

98
00:06:53,350 --> 00:06:56,162
We will see the drawback later on.

99
00:06:56,782 --> 00:07:01,706
This will be linked to the 
notion of stability that we

100
00:07:01,724 --> 00:07:04,574
will see later in the course.

101
00:07:04,574 --> 00:07:08,237
Now I will present the backward
Euler's method.
