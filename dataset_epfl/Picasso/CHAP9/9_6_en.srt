1
00:00:04,105 --> 00:00:07,266
I just introduced the forward
Euler's method.

2
00:00:07,266 --> 00:00:12,466
(u_(n+1)- u_n)/h = f(u_n, tn).

3
00:00:12,466 --> 00:00:15,770
Now I will present Euler's
backward method,

4
00:00:16,280 --> 00:00:19,962
which is written : 
(u_(n+1) - u_n)/h,

5
00:00:19,962 --> 00:00:22,090
as in the forward method

6
00:00:22,090 --> 00:00:28,859
and instead of f(u_n,tn)
we write f(u_(n+1),t(n+1)).

7
00:00:29,179 --> 00:00:34,295
How do we get this method ?

8
00:00:34,356 --> 00:00:36,755
Well, we write the 
differential equation at 

9
00:00:36,755 --> 00:00:38,645
time t(n+1,)

10
00:00:40,238 --> 00:00:46,736
so u'(t(n+1))= f(u(t(n+1)),t(n+1))

11
00:00:46,826 --> 00:00:54,184
this time we use a backward 
finite difference formula,

12
00:00:54,344 --> 00:00:57,779
in other words we'll approach
u'(t(n+1))

13
00:00:57,779 --> 00:01:07,910
by (u(t(n+1))-u(t(n+1)-h))/h

14
00:01:08,330 --> 00:01:15,403
this must be equal to f(u(t(n+1)),t(n+1))

15
00:01:15,956 --> 00:01:20,650
plus obviously a remainder of 
order 1 in h, since I used a backward

16
00:01:20,650 --> 00:01:23,576
finite difference formula.

17
00:01:23,576 --> 00:01:26,966
That was in chapter 2 of the course.

18
00:01:26,966 --> 00:01:30,059
Now, to get the scheme, 
I simply replace

19
00:01:30,059 --> 00:01:33,381
u(t(n+1)), the exact solution at 
the time t(n+1),

20
00:01:33,381 --> 00:01:35,855
which I do not know, 
by u_(n+1).

21
00:01:35,855 --> 00:01:37,959
I replace u(tn) which I 
do not know,

22
00:01:37,959 --> 00:01:43,933
by u_n, and likewise here, 
f(u_(n+1),t(n+1)),

23
00:01:43,933 --> 00:01:46,618
I give up on the term in O(h)

24
00:01:46,618 --> 00:01:49,149
and get Euler's backward method.

25
00:01:49,269 --> 00:01:57,636
This scheme is an implicit scheme.

26
00:01:59,158 --> 00:02:01,116
What does this mean?

27
00:02:01,116 --> 00:02:04,567
Well, there is an implicit relation
between u_(n+1) and u_n,

28
00:02:04,567 --> 00:02:07,571
so I cannot write 
u_(n+1) =...

29
00:02:07,571 --> 00:02:09,977
since u_(n+1) appears here and there,

30
00:02:09,977 --> 00:02:12,439
But I can write the method 
in the following way:

31
00:02:12,439 --> 00:02:22,586
I can write 
(u_(n+1)-u_n)-h*f(u_(n+1),t(n+1)),

32
00:02:22,586 --> 00:02:25,432
this must be equal to 0,
so if I denote this as

33
00:02:25,432 --> 00:02:32,930
g(u_(n+1)), it 
boils down to finding the 0 of the function g.

34
00:02:32,930 --> 00:02:39,847
So u_(n+1) is the zero of the function g.

35
00:02:39,847 --> 00:02:42,746
The function g which is defined 
for all x in ℝ

36
00:02:42,746 --> 00:02:47,700
by g(x)=x, 
so I replace u_(n+1) by x,

37
00:02:47,910 --> 00:02:56,358
x-u_n, which is known, 
minus f(x,t(n+1)).

38
00:02:56,548 --> 00:02:58,644
And to find the zero of the function
I will use 

39
00:02:58,644 --> 00:03:01,303
Newton's method, 
so I will need g':

40
00:03:01,303 --> 00:03:06,023
g'(x)=1, 
u_n is know, minus here

41
00:03:06,023 --> 00:03:12,456
df*dx at (x,t(n+1)).

42
00:03:12,456 --> 00:03:15,986
So Newton's method is
written in the following way:

43
00:03:15,986 --> 00:03:20,525
The Newton method that let
us from u_n

44
00:03:20,525 --> 00:03:25,710
which we know, to find u_(n+1), 
such that g(u_(n+1))=0.

45
00:03:26,980 --> 00:03:30,962
I start from u_n,

46
00:03:30,962 --> 00:03:33,807
which is the last value I computed.

47
00:03:34,237 --> 00:03:40,299
Then I do a loop
m=0,1,2, etc ...

48
00:03:40,299 --> 00:03:41,767
It is the Newton's loop,

49
00:03:41,767 --> 00:03:53,559
so I let x_(m+1)=x_m-g(x_m), 
(I am looking for the zero of g)

50
00:03:53,619 --> 00:03:55,694
divided by g'(xm).

51
00:03:56,815 --> 00:04:10,842
So g(x_m) = x_m-u_n (which we know)
-f(x_m,t(n+1))/g'(x_m),

52
00:04:10,862 --> 00:04:17,658
which is 1-df*dx at the point x_m
and time t(n+1).

53
00:04:19,235 --> 00:04:26,242
To finish, I exit the loop when 
x(m+1)-x(m) is very small

54
00:04:26,272 --> 00:04:29,777
for example when less than 10^-8.

55
00:04:29,777 --> 00:04:34,331
In this case, I let u_(n+1)
be the last computed value,

56
00:04:34,331 --> 00:04:36,030
that is, x_(m+1).

57
00:04:36,030 --> 00:04:42,146
So, see that to go from u_n to 
u_(n+1) I must do a loop,

58
00:04:42,146 --> 00:04:46,237
m=0,1,2,... but in practice, 
you know that Newton's method,

59
00:04:46,237 --> 00:04:47,945
if it converges, that is to say
its starting point

60
00:04:47,945 --> 00:04:51,675
is close enough from the solution,
converges quickly,

61
00:04:51,675 --> 00:04:56,229
at least when g'(u_(u+1)) is nonzero,

62
00:04:56,239 --> 00:04:58,794
il est dérivé au dénominateur,
donc converge rapidement,

63
00:04:58,794 --> 00:05:01,087
in practice after a few iterations, 

64
00:05:01,087 --> 00:05:04,341
we will get the solution to 
our non linear system,

65
00:05:04,341 --> 00:05:06,078
in other words, u_(n+1).

66
00:05:08,623 --> 00:05:13,434
"Drawbacks of this method"
We see that this method

67
00:05:13,434 --> 00:05:17,514
is implicit, so more difficult to implement.

68
00:05:17,514 --> 00:05:19,228
It is also more costly

69
00:05:19,228 --> 00:05:22,354
since I have to do some iteration, 
but not too many,

70
00:05:22,354 --> 00:05:24,855
in practice less than 10.

71
00:05:24,855 --> 00:05:26,611
The advantage of this method, 

72
00:05:26,611 --> 00:05:30,947
compared to a forward
Euler's method,

73
00:05:30,947 --> 00:05:32,645
which is explicit,

74
00:05:32,645 --> 00:05:35,742
is that this method will be stable,
no matter what the time step h is.

75
00:05:36,639 --> 00:05:40,304
We now have to talk about stability
of Euler's schemes.
