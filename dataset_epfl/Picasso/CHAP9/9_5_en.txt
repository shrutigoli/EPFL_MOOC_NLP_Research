We now present Euler schemes to solve numerically a differential equation.
We start with the forward
Euler scheme.
Here is t and there is the solution u(t) of the differential equation, here is u(0) at time 0.
The idea is to select discrete time values t0, t1, t2, t3 until tn, here you have t4. all these points are distant by h, which is the time step, thus tn=h*n, n=0,1,2, etc...
The goal is to compute approximations u_n of u at these discrete times tn.
Here is u at time t4.
Here are the approximations starting from u0, here is the approximation u1, of u at the time t1, u2 of u at the time t2, u3 of u at the time t3, and u4, the approximation of u at the time t4.
So from u0, chosen as the initial value, we will compute an approximation u1. then, from u1 we will compute u2, the approximation of u at the time t2, and so on.
So, from u_n we will compute u_(n+1) the approximation of u at the time t(n+1).
The question is: how to compute u_(n+1) from u_n?
This is marching method in time, which corresponds to intuition, predict the future from the present.
So, how to go from u_n to u_(n+1)?
We shall use Euler's forward scheme.
Again, I know u_n, I want to compute u_(n+1), the differential equation is u'(t)=f(u(t),t),
I am now writing the term corresponding to u',
(u_(n+1)-u_n)/h, which must be equal to f(u_n, t_n).
How is this scheme obtained? comment obtient-on ce schÃ©ma d'Euler ?
Well, write the differential equation at time tn.
We have u'(t_n)=f(u(t_n),t_n).
The differential equation is satisfied for all nonnegative t,
I simply write it at time tn.
Then, we use a finite difference formula, the forward difference method, to approximate u'(tn),
Donc, on utilise une formule de diffÃ©rence finie progressive pour approcher <i>u</i> point au temps <i>tn</i>.
We did this in chapter 2, we've introduced finite difference formulas to approach derivatives of order 1 or order 2. de diffÃ©rence finie progressive.
We will approach u'(tn) by u(t(n+1)) minus u(tn), divided by h.
VoilÃ  une formule de diffÃ©rence finie progressive pour approcher <i>u</i> ' au temps <i>tn</i>.
Donc, ceci doit Ãªtre Ã©gal Ã  <i>f(u)</i> au temps <i>tn, tn</i>, mais ici, j'avais une Ã©quation diffÃ©rentielle
<i>u</i> point au temps <i>tn</i> = <i>f(u) tn, tn</i>.
I replaced u' at the time tn by a forward finite difference formula so obviously 
I am left with a term of order 1 in h.
Alors, si on regarde maintenant la diffÃ©rence entre le schÃ©ma d'Euler et celui-ci, eh bien, j'ai obtenu le schÃ©ma d'Euler en remplaÃ§ant,
We must end up with a scheme, that is something I can implement on a computer.
I cannot implement this formula on a computer, simply because I do not know 
I do not know u(tn), I do not know how to implement O(h).
But I can implement this formula here because if I know u_n,
I can compute u_(n+1) with this formula here.
What I am going to do is simply from this line,
I will replace u(tn) by u_n and u(tn+1) by u_(n+1), and I get the scheme.
So if we replace u(tn) by its approximation u_n, we replace u(t(n+1)) by its approximation u_(n+1) and we give up on this O(h) that we cannot implement on a computer.
We obtain the following forward
Euler scheme.
What are the advantages of this forward Euler's method ?
"Advantages"
It is a explicit scheme, which means that there is an explicit formula to compute u_(n+1) from u_n.
Simply we have u_(n+1) equals, 
I put the h here, and I put everything I know on the right hand side, and get u_(n+1)=u_n+h*f(u_n,tn).
So I am at the time tn, I know the function f(x,t), 
I evaluate it at the time tn for x=u_n,
I know u_n, so I can compute u_(n+1).
This method is explicit, so easy to implement on a computer.
"Easy to program"
We will see a matlab/octave implementation during the exercise session.
What are the drawbacks?
We will see the drawback later on.
This will be linked to the notion of stability that we will see later in the course.
Now I will present the backward
Euler's method.
