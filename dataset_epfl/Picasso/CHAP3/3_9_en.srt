1
00:00:00,361 --> 00:00:03,068
Now I will present some
numerical experiments

2
00:00:03,068 --> 00:00:05,582
with different quadrature formula,

3
00:00:05,582 --> 00:00:10,774
in the interval [a,b], with a equal
to 0 and b equal to 1.

4
00:00:10,774 --> 00:00:18,342
Let us take the function f defined
by x times sin(2 k pi x )

5
00:00:18,342 --> 00:00:23,307
with k equal to 10. Now I calculate

6
00:00:23,307 --> 00:00:25,863
by hand the integral between
a and b of f(x) dx.

7
00:00:26,832 --> 00:00:31,159
After integrating by parts,
I find minus (1 / 2) times k pi.

8
00:00:32,396 --> 00:00:34,910
We can plot this function,

9
00:00:34,910 --> 00:00:38,168
with gnuplot for example.
Here the command plot

10
00:00:38,168 --> 00:00:42,339
on the interval 0 to 1 of x sin(20 pi x).

11
00:00:44,461 --> 00:00:47,882
You can see that this function

12
00:00:47,882 --> 00:00:50,839
oscillates strongly on
the interval [0,1].

13
00:00:52,091 --> 00:00:54,867
Now I can write a
program which allows me

14
00:00:54,867 --> 00:00:57,588
to calculate L_h( f ).

15
00:00:57,588 --> 00:01:02,328
L_h( f ) is the approximation of the
integral between a and b of f(x) dx.

16
00:01:02,748 --> 00:01:06,840
First I consider

17
00:01:07,623 --> 00:01:09,642
the trapezoidal formula.

18
00:01:13,468 --> 00:01:15,786
I have 2 quadrature nodes

19
00:01:15,786 --> 00:01:19,784
which are the nodes equal to
t_1 = -1 and t_2 = 1.

20
00:01:20,304 --> 00:01:25,643
I will also use the Gauss
formula with two nodes.

21
00:01:27,176 --> 00:01:31,006
So M is still equal to 2.
This time the quadrature nodes

22
00:01:31,006 --> 00:01:36,346
are t_1 equal to -1 / sqrt(3) and
t_2 equal to 1 / sqrt(3).

23
00:01:36,914 --> 00:01:40,945
Finally I will also consider the
Gauss formula with three nodes,

24
00:01:41,892 --> 00:01:44,469
I haven't presented this one so far
but here it is:

25
00:01:44,830 --> 00:01:50,739
I use 3 nodes, the first is minus
the square root of 3 over 5,

26
00:01:51,620 --> 00:01:57,938
the second t_1 equal to 0, and the third
equal to sqrt( 3 / 5 ).

27
00:01:59,754 --> 00:02:04,129
Now I have  a program that
calculates the error,

28
00:02:06,627 --> 00:02:09,996
which is the integral
from a to b of f(x) dx,

29
00:02:11,186 --> 00:02:13,510
previously calculated here, 
minus 1 / 2 times k pi,

30
00:02:13,990 --> 00:02:18,249
and the error is the difference
between this exact value

31
00:02:18,249 --> 00:02:23,284
and the corresponding approximated
value calculated using L_h( f ), depending on h.

32
00:02:29,382 --> 00:02:34,480
Here is such a program.
This program takes as input N,

33
00:02:34,480 --> 00:02:37,730
the number of sub-intervals
in the interval [a,b]

34
00:02:37,730 --> 00:02:40,860
and returns three errors

35
00:02:40,860 --> 00:02:43,164
the one corresponding to
the trapezoidal rule,

36
00:02:43,164 --> 00:02:45,943
the error corresponding to the
2-node Gauss rule,

37
00:02:45,943 --> 00:02:49,181
and the error corresponding to the
3-node Gauss rule.

38
00:02:49,181 --> 00:02:52,425
With h equal to b minus a divided by N,
the length of each sub-interval

39
00:02:52,425 --> 00:02:56,500
which approaches 0.
For example the trapezoidal rule,

40
00:02:56,967 --> 00:03:01,897
the function L_h( f ) is given
by the following formula:

41
00:03:01,897 --> 00:03:07,204
You have the sum of h times f(x_i)
plus f (x_i+1).

42
00:03:07,315 --> 00:03:12,143
If I run this code, I get the
errors [e1, e2, e3] equal to "integration(10)".

43
00:03:12,143 --> 00:03:18,217
Here with N equal to 10, well the error for
the trapezoidal rule is 0.016,

44
00:03:18,693 --> 00:03:24,838
for the 2-node Gauss rule it is 0.012 and
for the 3-node Gauss rule the error is 0.019.

45
00:03:25,222 --> 00:03:29,844
Now by repeating the same calculation
with 20 points instead of 10,

46
00:03:29,844 --> 00:03:33,778
so twice as many points,
you can observe that the error

47
00:03:33,778 --> 00:03:37,869
for the trapezoidal rule
has not diminshed

48
00:03:37,869 --> 00:03:39,991
since the function oscillates 
strongly.

49
00:03:39,991 --> 00:03:43,536
We need a larger N
to have a correct approximation.

50
00:03:43,536 --> 00:03:47,889
Nevertheless, you see here that the error
corresponding to the Gauss formula

51
00:03:51,006 --> 00:03:54,031
with 2 nodes is much
lower than previously.

52
00:03:54,031 --> 00:03:56,995
and even more so in the case of
the 3-node Gauss rule.

53
00:03:57,626 --> 00:04:02,003
Here i use 40 sub-intervals
and this time

54
00:04:02,003 --> 00:04:05,802
you can observe that all three
errors are smaller.

55
00:04:09,416 --> 00:04:12,502
The order of magnitudes are 10 minus 4,
10 minus 6 and 10 minus 9

56
00:04:12,502 --> 00:04:14,660
for the 3-nodes Gauss rule. 

57
00:04:14,660 --> 00:04:17,766
Now the question is to know whether 

58
00:04:17,766 --> 00:04:21,081
the observed convergence rate matches

59
00:04:21,081 --> 00:04:25,504
the theoretical rate stated
previously in the lesson?

60
00:04:26,894 --> 00:04:32,994
In this figure, we have plotted the
error, on the y axis, with respect to 

61
00:04:32,994 --> 00:04:38,269
to h, on the x axis, in a log-log scale. 

62
00:04:38,829 --> 00:04:44,341
One can observe that the points are found on lines

63
00:04:44,341 --> 00:04:46,169
with different slopes. 

64
00:04:46,169 --> 00:04:50,984
The trapezoidal formula has a slope of 2

65
00:04:50,984 --> 00:04:52,842
which indicates that the error
has convergence of order 2.

66
00:04:52,842 --> 00:04:57,674
The Gauss formula with 2 nodes
has a slope of 4, which indicates an error

67
00:04:57,674 --> 00:05:00,464
of h to the power 4.

68
00:05:00,464 --> 00:05:05,110
And finally the 3-node Gauss
rule has a slope of 6

69
00:05:05,110 --> 00:05:07,387
which indicates an error following
h to the power 6.

70
00:05:07,387 --> 00:05:09,975
The experimental results indeed match
the theoretical ones.

71
00:05:09,975 --> 00:05:12,010
 
