1
00:00:04,067 --> 00:00:06,537
Now we'll talk about the 
round-off error.

2
00:00:06,787 --> 00:00:09,650
In general, differentiating

3
00:00:09,650 --> 00:00:13,893
a noisy signal increases this noise

4
00:00:14,353 --> 00:00:18,907
an integrating a noisy signal
lowers the noise.

5
00:00:18,907 --> 00:00:20,087
Why is that?

6
00:00:20,177 --> 00:00:23,487
For example, take a function u(x)

7
00:00:23,887 --> 00:00:27,627
which is the zero function, 
with for some reason

8
00:00:27,797 --> 00:00:34,067
a little noise 
ε*sin(k*π*x) with k large.

9
00:00:34,787 --> 00:00:36,517
If you calculate the

10
00:00:37,027 --> 00:00:40,607
amplitude of the noise
it's ε on this function

11
00:00:40,607 --> 00:00:42,997
Now if we differentiate, 
we get 

12
00:00:43,327 --> 00:00:49,987
u'(x) = ε*k*π*cos(k*π*x)

13
00:00:50,267 --> 00:00:53,497
So the noise of the 
derivative is ε*k*π

14
00:00:53,497 --> 00:00:56,577
so the noise increased
since k is large.

15
00:00:57,037 --> 00:01:00,477
On the other hand, if we integrate, 
a primitive of u(x)

16
00:01:00,627 --> 00:01:06,517
is - ε/(k*π)*cos(k*π*x).

17
00:01:08,697 --> 00:01:09,987
 

18
00:01:10,387 --> 00:01:13,767
This time the noise ε
was divided by k*π

19
00:01:13,767 --> 00:01:17,177
k is large so the noise got smaller.

20
00:01:17,177 --> 00:01:20,317
In general, when solving 
a differential equation

21
00:01:20,317 --> 00:01:24,957
so u'(t)-=f(t)

22
00:01:24,957 --> 00:01:28,017
then we do not 
differentiate, we integrate

23
00:01:28,017 --> 00:01:34,827
u(t) is u(0) plus the integral 
from 0 to t of f(s)ds.

24
00:01:34,827 --> 00:01:37,667
Luckily when we solve a 
differential equation

25
00:01:37,927 --> 00:01:42,697
or a partial differential equation
we integrate something,

26
00:01:42,697 --> 00:01:45,397
so the noise is lowered.

27
00:01:45,397 --> 00:01:48,647
So that does not bring problems.
On the other side,

28
00:01:48,647 --> 00:01:52,057
when differentiating something, 
a numerical signal, we increase the noise.

29
00:01:52,107 --> 00:01:56,087
How can we formalize 
these lines? 

30
00:01:56,847 --> 00:02:01,877
So declare a double, c, 
equal to a third.

31
00:02:02,207 --> 00:02:05,427
in a program written for
 example in C,

32
00:02:05,767 --> 00:02:11,743
a third is the exact
value of c

33
00:02:11,743 --> 00:02:16,799
and its approximation on a computer
with N digits,

34
00:02:17,079 --> 00:02:20,727
say c bar,


35
00:02:20,727 --> 00:02:23,637
 with 16 digits,

36
00:02:23,637 --> 00:02:25,667
this is the case when using a double,

37
00:02:26,017 --> 00:02:32,027
c bar is 0.333 and so on

38
00:02:32,297 --> 00:02:36,239
there are here 16 3.

39
00:02:36,799 --> 00:02:41,131
On a computer with 16 
digits,

40
00:02:41,641 --> 00:02:47,295
the error 
|c-c bar|

41
00:02:47,455 --> 00:02:52,615
will approximately be 
(1/3) * 10^-16

42
00:02:52,615 --> 00:02:58,835
that is to say, the exact value of c, 
a third, times 10^-N,

43
00:02:59,635 --> 00:03:03,085
given a computer with
N digits.

44
00:03:03,728 --> 00:03:06,608
So now let's 
check what is the error,

45
00:03:07,538 --> 00:03:08,918
I mean the rounding error,

46
00:03:09,318 --> 00:03:12,168
when using a finite difference
formula?

47
00:03:12,178 --> 00:03:18,618
For example when using (f(x0 + h)- f(x0))/h

48
00:03:18,988 --> 00:03:21,498
to approximate the 
derivative f'(x0).

49
00:03:22,929 --> 00:03:24,675
This rounding error

50
00:03:28,765 --> 00:03:31,811
when evaluating f(x0)

51
00:03:32,171 --> 00:03:36,709
is approximatively f(x0) in absolute value

52
00:03:37,119 --> 00:03:40,709
times 10^-N

53
00:03:41,309 --> 00:03:44,149
where N is the number of 
digits, usually 16.

54
00:03:44,755 --> 00:03:48,805
If I want to evaluate f(x0+h)

55
00:03:51,595 --> 00:03:57,575
the error will be roughly 
f(x0+h)*10^-N

56
00:03:57,575 --> 00:04:00,531
but h is supposed small, so 
it is close to

57
00:04:01,481 --> 00:04:04,927
f(x0)*10^-N.

58
00:04:06,567 --> 00:04:13,003
So the rounding error to evaluate 
the finite difference formula

59
00:04:13,003 --> 00:04:15,933
(f(x0 + h)- f(x0))/h

60
00:04:16,133 --> 00:04:17,719
is more or less

61
00:04:18,149 --> 00:04:24,815
2*f(x0)*10^-N / h.

62
00:04:29,585 --> 00:04:31,813
Observe that when 

63
00:04:31,813 --> 00:04:36,743
h gets close to the 
value of the numerator,

64
00:04:37,043 --> 00:04:40,613
here f(x0)*10^-N.

65
00:04:41,933 --> 00:04:46,730
First, if h is a lot 
greater than 

66
00:04:48,160 --> 00:04:53,107
2*f(x0)*10^-N

67
00:04:54,247 --> 00:04:57,224
we do not observe
rounding errors

68
00:04:57,224 --> 00:05:01,704
which is the general case
since recall that N is 16

69
00:05:01,704 --> 00:05:07,234
so 2*f(x0)*10^-16 is in
very small in general.

70
00:05:07,694 --> 00:05:13,284
But if h is close to the 
order of 

71
00:05:13,284 --> 00:05:16,174
this quantity,

72
00:05:16,684 --> 00:05:21,054
then we'll observe the 
effect of rounding errors.
