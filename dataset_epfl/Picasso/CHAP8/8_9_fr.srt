1
00:00:01,886 --> 00:00:06,276
Je veux maintenant étendre
la méthode de Newton

2
00:00:06,276 --> 00:00:09,368
au cas des systèmes d'équations
non linéaires.

3
00:00:09,368 --> 00:00:12,375
Le problème que je souhaite résoudre
maintenant est le suivant :

4
00:00:12,375 --> 00:00:13,959
je cherche x dans R^n,

5
00:00:13,959 --> 00:00:16,656
donc un vecteur à n composantes
x1, x2, ..., xn tel que

6
00:00:16,656 --> 00:00:22,604
f vecteur de x vecteur est égal à 0.

7
00:00:22,604 --> 00:00:29,838
Ici x c'est le vecteur 
de composantes x1, x2, ..., xn

8
00:00:29,838 --> 00:00:37,610
et f c'est une fonction de R^n dans R^n

9
00:00:37,610 --> 00:00:43,190
qui à x retourne f vecteur de x vecteur

10
00:00:43,190 --> 00:00:51,255
et f(x) c'est, la première composante
c'est une application f1

11
00:00:51,255 --> 00:00:56,639
qui dépend de x, 
c'est-à-dire x1, x2,... xn,

12
00:00:56,639 --> 00:01:02,406
f2 qui dépend de x1, x2, ..., xn

13
00:01:02,406 --> 00:01:11,690
jusqu'à la dernière composante qui est une
fonction fn qui dépend de x1, x2, ..., xn.

14
00:01:11,690 --> 00:01:16,386
Exemple dans le cas n=2 :

15
00:01:16,386 --> 00:01:22,310
je cherche (x1, x2) tel que

16
00:01:22,310 --> 00:01:34,587
2.x1 - x2 + exp(x1) = 0
et -x1+2.x2 + exp(x2) = 0

17
00:01:34,587 --> 00:01:36,345
Dans ce cas-là le vecteur x

18
00:01:36,345 --> 00:01:40,913
c'est bien évidemment le vecteur
de composantes (x1, x2)

19
00:01:40,913 --> 00:01:52,702
et f(x) c'est f1 qui dépend de x1 et de x2
et f2 qui dépend de x1 et de x2.

20
00:01:52,702 --> 00:02:00,966
f1 c'est la première ligne de l'équation
c'est 2.x1 - x2 + exp(x1)

21
00:02:00,966 --> 00:02:05,687
première équation,

22
00:02:05,687 --> 00:02:15,380
et f2 c'est -x1 + 2.x2 + exp(x2)

23
00:02:15,380 --> 00:02:23,690
Comment écrire la méthode de Newton ?

24
00:02:23,690 --> 00:02:28,828
Réécrivons la méthode dans le cas n=1,
une équation à une inconnue.

25
00:02:28,828 --> 00:02:39,768
On avait écrit xn+1 = xn - f(xn)/f'(xn)

26
00:02:39,768 --> 00:02:47,199
Ici on avait une fonction f d'une variable
et on calcule la dérivée f'.

27
00:02:47,199 --> 00:02:51,207
Alors maintenant le problème c'est que
l'on a affaire à une fonction f

28
00:02:51,207 --> 00:02:58,690
qui est une fonction f1 de n variables,
f2 de n variables, ..., fn de n variables.

29
00:02:58,690 --> 00:03:06,207
Je peux calculer par exemple df1/dx1,
df1/dx2, df1/dxn, df2/dx1

30
00:03:06,207 --> 00:03:08,591
et ainsi de suite jusqu'à dfn/dxn.

31
00:03:08,591 --> 00:03:12,690
Il y a donc n fois n dérivées
que je peux calculer

32
00:03:12,690 --> 00:03:16,165
à partir de cette fonction f(x).

33
00:03:16,165 --> 00:03:22,793
Je vais mettre ces n fois n dérivées
dans ce que je vais noter Df(x)

34
00:03:22,793 --> 00:03:29,069
qui est la matrice nxn,
n lignes n colonnes,

35
00:03:29,069 --> 00:03:30,858
que j'appelle la matrice jacobienne.

36
00:03:30,858 --> 00:03:36,214
Df en un point x quelconque c'est donc
la matrice qui contient

37
00:03:36,214 --> 00:03:38,828
toutes les dérivées possibles,

38
00:03:38,828 --> 00:03:51,021
la première c'est df1/dx1 évaluée en
(x1, x2,..., xn) c'est-à-dire x vecteur,

39
00:03:51,021 --> 00:04:03,740
ensuite df1/dx2 évaluée en x
jusqu'à df1/dxn évaluée en x.

40
00:04:03,740 --> 00:04:08,828
J'ai donc ici calculé toutes les dérivées
possibles à partir de cette fonction f1

41
00:04:08,828 --> 00:04:11,111
qui dépendait de (x1, x2, ... , xn).

42
00:04:11,111 --> 00:04:13,253
Je fais la même chose pour
la deuxième ligne :

43
00:04:13,253 --> 00:04:24,170
df2/dx1 évaluée en x, df2/dx2,
jusqu'à df2/dxn.

44
00:04:24,170 --> 00:04:27,724
Et je fais la même chose
jusqu'à la dernière ligne

45
00:04:27,724 --> 00:04:35,733
donc je vais avoir dfn/dx1, dfn/dx2,

46
00:04:35,733 --> 00:04:47,623
jusqu'à dfn/dxn qui est la dérivée de fn
par rapport à la dernière variable.

47
00:04:47,623 --> 00:04:49,828
J'ai bien ici une matrice nxn.

48
00:04:49,828 --> 00:04:53,250
Dans le cas de l'exemple ici, n=2,

49
00:04:53,250 --> 00:04:57,904
dans le cas du petit exemple
que j'ai considéré ici.

50
00:04:57,904 --> 00:05:03,725
J'ai f(x), voilà son expression :
(f1(x1,x2),f2(x1,x2))

51
00:05:03,725 --> 00:05:06,793
et donc je peux calculer les dérivées,

52
00:05:06,793 --> 00:05:11,475
Df(x), j'ai une matrice 2x2,

53
00:05:11,475 --> 00:05:14,001
je dois dériver la première ligne
par rapport à x1,

54
00:05:14,001 --> 00:05:20,241
je trouve 2 + exp(x1),

55
00:05:20,241 --> 00:05:24,588
quand je dérive la première ligne
par rapport à x2, je trouve -1

56
00:05:24,588 --> 00:05:28,121
et sur la deuxième ligne j'ai :
-1 et 2 + exp(x2)

57
00:05:28,121 --> 00:05:31,310
Je sais maintenant calculer
la matrice jacobienne

58
00:05:31,310 --> 00:05:35,793
de la fonction f évaluée au point x.

59
00:05:35,793 --> 00:05:38,241
Revenons à la méthode 
de Newton maintenant.

60
00:05:38,241 --> 00:05:40,229
J'avais dit dans le cas n=1,

61
00:05:40,229 --> 00:05:48,961
je vais écrire cette méthode de Newton
de manière un peu différente,

62
00:05:48,961 --> 00:06:00,386
je vais écrire que 
f'(xn).(xn-xn+1) = f(xn)

63
00:06:00,386 --> 00:06:04,663
une écriture équivalente
à cette écriture ici.

64
00:06:04,663 --> 00:06:09,552
Dans le cas n quelconque,
n équations, n inconnues,

65
00:06:09,552 --> 00:06:16,638
à la place de f'(xn) j'ai la matrice
jacobienne évaluée en x^n,

66
00:06:16,638 --> 00:06:29,931
ici le vecteur x^n c'est le vecteur
de composantes (x1)^n, (x2)^n, ... ,(xN)^n

67
00:06:30,083 --> 00:06:38,199
Evidemment je vais partir de x^0,
donc (x1)^0, (x2)^0, ... , (xn)^0

68
00:06:38,199 --> 00:06:43,483
Revenons à l'écriture, j'ai ici
la dérivée fois l'incrément.

69
00:06:43,483 --> 00:06:47,500
Notez ici que j'ai mis 
l'indice itération en haut

70
00:06:47,500 --> 00:06:49,489
alors que tout à l'heure il était en bas

71
00:06:49,489 --> 00:06:52,927
tout simplement parce que l'indice du bas
est réservé aux composantes.

72
00:06:52,927 --> 00:07:02,728
Donc Df(x^n).(x^n - x^(n+1))
égal f(x^n).

73
00:07:02,728 --> 00:07:08,828
Vous avec ici une matrice,
ici un vecteur, et ici un vecteur.

74
00:07:08,828 --> 00:07:12,394
Donc matrice nxn fois 
vecteur n composantes

75
00:07:12,394 --> 00:07:13,812
égal vecteur à n composantes.

76
00:07:13,812 --> 00:07:21,233
Ensuite vous avez, si x^n est connu,
la matrice jacobienne est calculable

77
00:07:21,233 --> 00:07:23,759
donc ceci est connu, x^n est connu

78
00:07:23,759 --> 00:07:27,470
par contre x^(n+1) est l'inconnue

79
00:07:27,470 --> 00:07:31,862
et, à nouveau, f(x^n) est connue
si x^n est connu.

80
00:07:31,862 --> 00:07:37,053
Donc il s'agit ici de résoudre 
un système linéaire

81
00:07:37,053 --> 00:07:38,483
à n équations et n inconnues.

82
00:07:38,483 --> 00:07:43,094
A chaque étape de la méthode de Newton,
on va résoudre un système linéaire

83
00:07:43,094 --> 00:07:45,276
de n équations à n inconnues

84
00:07:45,276 --> 00:07:48,587
ce qui nous permettra d'obtenir x^(n+1).

85
00:07:48,587 --> 00:07:50,207
L'algorithme est le suivant :

86
00:07:50,207 --> 00:07:54,282
je pars d'un x^0 donné

87
00:07:54,282 --> 00:08:00,393
qui est l'approximation
de x tel que f(x) = 0,

88
00:08:00,393 --> 00:08:02,759
mon système d'équations non linéaires.

89
00:08:02,759 --> 00:08:07,766
Ensuite, pour n=0,1,2...,

90
00:08:07,766 --> 00:08:11,035
je vais calculer le second membre
du système linéaire

91
00:08:11,035 --> 00:08:17,801
que je vais noter b,
b c'est f(x^n)

92
00:08:17,801 --> 00:08:22,208
x^n étant connu, je peux calculer f(x^n),
c'est mon second membre,

93
00:08:22,208 --> 00:08:26,103
je vais calculer la matrice
du système linéaire que je note A,

94
00:08:26,103 --> 00:08:32,138
A c'est Df(x^n) qui est calculable
dès l'instant où je connais x^n,

95
00:08:32,138 --> 00:08:39,679
je vais résoudre le système linéaire Ay=b

96
00:08:39,679 --> 00:08:49,001
et ensuite je vais poser que
x^(n+1), j'ai que y c'est x^n - x^(n+1)

97
00:08:49,001 --> 00:08:53,850
donc x^(n+1) c'est x^n - y.

98
00:08:53,850 --> 00:08:56,376
Et éventuellement je vais mettre
un test d'arrêt donc

99
00:08:56,376 --> 00:09:00,862
si y est plus petit
qu'une certaine valeur,

100
00:09:00,862 --> 00:09:04,966
par exemple 10^(-8), 
je sors de la boucle, je m'arrête

101
00:09:04,966 --> 00:09:10,295
j'ai trouvé une très bonne approximation
de mon système non linéaire.
