1
00:00:01,886 --> 00:00:06,276
Now I wish to extend Newton's method

2
00:00:06,276 --> 00:00:09,368
to non linear systems of equations. 

3
00:00:09,368 --> 00:00:12,375
The problem I wish to
solve is the following:

4
00:00:12,375 --> 00:00:13,959
I search x in R^N,

5
00:00:13,959 --> 00:00:16,656
where x is a vector with n
components x1, x2, ... xN such that

6
00:00:16,656 --> 00:00:22,604
the vector f of x is equal to 0. 

7
00:00:22,604 --> 00:00:29,838
Here x is a vector with N
components x1, x2, ... xN

8
00:00:29,838 --> 00:00:37,610
and f a function of R^N to R^N

9
00:00:37,610 --> 00:00:43,190
which returns for x a vector f ( x );

10
00:00:43,190 --> 00:00:51,255
the first component of f(x)
is an application f1

11
00:00:51,255 --> 00:00:56,639
which depends on x, that is x1, x2, ... xN,

12
00:00:56,639 --> 00:01:02,406
the second component 
f2 depends on x1, x2, ... xN

13
00:01:02,406 --> 00:01:11,690
and so on up to the last component
fN which is a function of x1, x2, ... xN.

14
00:01:11,690 --> 00:01:16,386
An example for N equal to 2:

15
00:01:16,386 --> 00:01:22,310
I search the couple (x1, x2) such that

16
00:01:22,310 --> 00:01:34,587
2 x1 - x2 + exp(x1) = 0 and
-x1 + 2 x2 + exp(x2) = 0. 

17
00:01:34,587 --> 00:01:36,345
In this case the vector x,

18
00:01:36,345 --> 00:01:40,913
is of course the vector
of components (x1, x2)

19
00:01:40,913 --> 00:01:52,702
and f(x) is f1 which depends on x1 and x2,
and f2 also depends on x1 and x2. 

20
00:01:52,702 --> 00:02:00,966
f1 is the first line of the equation,
it is 2 x1 - x2 + exp(x1)

21
00:02:00,966 --> 00:02:05,687
the first equation,

22
00:02:05,687 --> 00:02:15,380
and the second line
f2 is - x1 + 2 x2 + exp(x2). 

23
00:02:15,380 --> 00:02:23,690
How to write Newton's method?

24
00:02:23,690 --> 00:02:28,828
Lets re-write the method for the case N=1,
the equation for one unknown. 

25
00:02:28,828 --> 00:02:39,768
We wrote x_n+1 = x_n - f(x_n) / f ' (x_n).

26
00:02:39,768 --> 00:02:47,199
Here f is a function depending
on one variable x and its derivative is f '(x).

27
00:02:47,199 --> 00:02:51,207
Now, for N larger than 1,
we have to deal with a function f

28
00:02:51,207 --> 00:02:58,690
which has first component a function 
f1 of N variables, so as f2 to fN.

29
00:02:58,690 --> 00:03:06,207
I can compute the partial derivatives df1 / dx1,
df1 / dx2, df1 / dxN and df2 / dx1

30
00:03:06,207 --> 00:03:08,591
and so on up to dfN / dxN. 

31
00:03:08,591 --> 00:03:12,690
There are N times N derivatives

32
00:03:12,690 --> 00:03:16,165
which can be computed from f(x).

33
00:03:16,165 --> 00:03:22,793
I can put these N times N derivatives
in what I shall denote as Df(x)

34
00:03:22,793 --> 00:03:29,069
which is the N times N matrix, 
N rows and N columns,

35
00:03:29,069 --> 00:03:30,858
which I call the jacobian matrix. 

36
00:03:30,858 --> 00:03:36,214
Df in any point x is
the matrix containing

37
00:03:36,214 --> 00:03:38,828
all the possible derivatives,

38
00:03:38,828 --> 00:03:51,021
the first is df1 / dx1 evaluated at
(x1, x2, ... xn), that is the vector x,

39
00:03:51,021 --> 00:04:03,740
next df1 / dx2 evaluated in x, this
up to df1 / dxN evaluated in x.

40
00:04:03,740 --> 00:04:08,828
These are all the possible
derivatives from this function f1

41
00:04:08,828 --> 00:04:11,111
which depends on (x1, x2, ... xn). 

42
00:04:11,111 --> 00:04:13,253
I can do the same
for the second function f2,

43
00:04:13,253 --> 00:04:24,170
df2 / dx1 evaluated in x df2 / dx2
up to df2 / dxN,

44
00:04:24,170 --> 00:04:27,724
and I can do the same thing 
untill the last function fN

45
00:04:27,724 --> 00:04:35,733
dfN / dx1, dfN / dx2,

46
00:04:35,733 --> 00:04:47,623
up to dfN / dxN which is the derivative of
fN with respect to the last variable xN.

47
00:04:47,623 --> 00:04:49,828
This is a matrix N times N,

48
00:04:49,828 --> 00:04:53,250
when N = 2,

49
00:04:53,250 --> 00:04:57,904
for the example I considered here,

50
00:04:57,904 --> 00:05:03,725
I have f(x), here the expression : 
( f1 (x1, x2) , f2 (x1 , x2) ) 

51
00:05:03,725 --> 00:05:06,793
and I can compute four derivatives,

52
00:05:06,793 --> 00:05:11,475
that I place in the 2 times 2 matrix Df(x).

53
00:05:11,475 --> 00:05:14,001
I differentiate the first
line with respect to x1,

54
00:05:14,001 --> 00:05:20,241
I get 2 + exp(x1),

55
00:05:20,241 --> 00:05:24,588
by differentiating  the  first
line with respect to x2 I  get -1,

56
00:05:24,588 --> 00:05:28,121
and on, I differentiate the second line,
I obtain -1 and 2 + exp(x2).

57
00:05:28,121 --> 00:05:31,310
I can therefore compute 
the jacobian matrix Df(x).

58
00:05:31,310 --> 00:05:35,793
of the function f evaluated in point x.

59
00:05:35,793 --> 00:05:38,241
Lets come back to
Newton's method.

60
00:05:38,241 --> 00:05:40,229
I said for the case N equal to 1,

61
00:05:40,229 --> 00:05:48,961
I can write the Newton's method
in a slightly different way,

62
00:05:48,961 --> 00:06:00,386
I can write f ' (x^n) times (x^n - x^n+1)
equal to f(x^n)

63
00:06:00,386 --> 00:06:04,663
which is an alternative formulation.

64
00:06:04,663 --> 00:06:09,552
In the general case, any N,
N equations with N unknowns,

65
00:06:09,552 --> 00:06:16,638
instead of f ' (x^n) I must use the jacobian
matrix evaluated in x^n.

66
00:06:16,638 --> 00:06:29,931
Here the vector x^n is the vector with N
components x1^n, x2^n, .. xN^n.

67
00:06:30,083 --> 00:06:38,199
Of course I start from x^0, which is
x1^0, x2^0, ... up to xN^0.

68
00:06:38,199 --> 00:06:43,483
Let's return to the formulation, here I 
have the derivative times the increment.

69
00:06:43,483 --> 00:06:47,500
Note here that the index corresponding
to the Newton iteration, n, is a superscript.

70
00:06:47,500 --> 00:06:49,489
unlike previously where it
was a lowerscript,

71
00:06:49,489 --> 00:06:52,927
the lower index being
reserved for the components. of the vector.

72
00:06:52,927 --> 00:07:02,728
So Df(x^n) * (x^n - x^(n+1) ) = f(x^n).

73
00:07:02,728 --> 00:07:08,828
You have here a matrix, a vector and here a vector. 

74
00:07:08,828 --> 00:07:12,394
So a matrix N times N multiplied by
a N components vector

75
00:07:12,394 --> 00:07:13,812
is equal to a N components vector.

76
00:07:13,812 --> 00:07:21,233
Note that, since  x^n is known, 
then the jacobian matrix Df(x^n) is computable.

77
00:07:21,233 --> 00:07:23,759
donc ceci est connu, x^n est connu

78
00:07:23,759 --> 00:07:27,470
Here x^(n+1) is the unknown,

79
00:07:27,470 --> 00:07:31,862
again, here f(x^n) is known
since x^n is known.

80
00:07:31,862 --> 00:07:37,053
Therefore, a linear system of equations
has to be solved,

81
00:07:37,053 --> 00:07:38,483
a system with N linear equations 
and N unknowns. 

82
00:07:38,483 --> 00:07:43,094
At each step, Newton's method
requires to solve a linear system

83
00:07:43,094 --> 00:07:45,276
of N equations with N unknowns,

84
00:07:45,276 --> 00:07:48,587
which will give us x^(n+1).

85
00:07:48,587 --> 00:07:50,207
The algorithm is the following:

86
00:07:50,207 --> 00:07:54,282
Start from a given x^0

87
00:07:54,282 --> 00:08:00,393
which is an approximation
of x such that f(x) = 0,

88
00:08:00,393 --> 00:08:02,759
the system of N non linear equations.

89
00:08:02,759 --> 00:08:07,766
Next for n = 0,1,2,...

90
00:08:07,766 --> 00:08:11,035
I can calculate the second
term of the linear system

91
00:08:11,035 --> 00:08:17,801
which I will denote b,
b is equal to f(x^n),

92
00:08:17,801 --> 00:08:22,208
x^n being known, I can compute f(x^n) 
the right hand side of the linear system,

93
00:08:22,208 --> 00:08:26,103
I can then calculate the matrix A of
the linear system,

94
00:08:26,103 --> 00:08:32,138
A is Df(x^n) which can be
computed as soon as x^n is known,

95
00:08:32,138 --> 00:08:39,679
I then solve the linear system 
A times y equals to b, 

96
00:08:39,679 --> 00:08:49,001
and next I will set x^(n+1), I have that
y is equal to x^n - x^(n+1),

97
00:08:49,001 --> 00:08:53,850
thus x^(n+1) is x^n minus y. 

98
00:08:53,850 --> 00:08:56,376
To terminate, I need a stopping criterion, 

99
00:08:56,376 --> 00:09:00,862
if some norm of y is smaller 
than a prescribed tolerance,

100
00:09:00,862 --> 00:09:04,966
for example 10^-8, I exit my loop

101
00:09:04,966 --> 00:09:10,295
and I have found a good
approximation of my nonlinear system.
