1
00:00:04,710 --> 00:00:06,914
Hello,after the continuous
engines, we will

2
00:00:06,914 --> 00:00:09,420
talk about stepper motors and encoded.

3
00:00:09,420 --> 00:00:11,404
There is not much to say

4
00:00:11,404 --> 00:00:15,300
but it will allow us to revise our
experience in programming.

5
00:00:15,300 --> 00:00:19,476
We will talk about the types
of stepper motors, focus

6
00:00:19,476 --> 00:00:23,716
on Lavet type engines and talk
a little bit about the encoders.

7
00:00:23,716 --> 00:00:29,774
The stepper motors you know are
generally of the 4-phase type and

8
00:00:29,774 --> 00:00:34,604
the two coils inside the motor will move a

9
00:00:34,604 --> 00:00:39,747
magnet or attract the metal poles so

10
00:00:39,747 --> 00:00:44,850
that when you generate the
phases on the motor,

11
00:00:44,850 --> 00:00:50,110
you have a rotation in a forward
or reverse direction.

12
00:00:50,110 --> 00:00:55,410
A trick that makes it possible
to refine a little bit the position

13
00:00:55,410 --> 00:00:59,580
is to make half-steps, to move

14
00:00:59,580 --> 00:01:05,162
not simultaneously, in the
background, the two signals.

15
00:01:05,162 --> 00:01:08,903
So if you need stepper motors of

16
00:01:08,903 --> 00:01:13,266
this type, you need the power interfaces,

17
00:01:13,266 --> 00:01:17,529
you often need extra voltages so I will

18
00:01:17,529 --> 00:01:20,448
not take care of them, I
am not a seller of

19
00:01:20,448 --> 00:01:25,432
schiltz and you will find libraries
associated with this engine control.

20
00:01:25,432 --> 00:01:30,675
I'm interested in these miniature stepping
motors that are also found

21
00:01:30,675 --> 00:01:36,020
in watches, which are the Lavet engines,
which have a simplified construction

22
00:01:36,020 --> 00:01:41,083
and in this example, you see that
you have a small Here

23
00:01:41,083 --> 00:01:45,962
in the center that will be
positioned by two

24
00:01:45,962 --> 00:01:50,900
coils for in this case take
the vertical position

25
00:01:50,900 --> 00:01:55,892
but if you now cut the current here
you will only have this

26
00:01:55,892 --> 00:02:01,170
coil that will draw the motor to
60 degrees and in 6

27
00:02:01,170 --> 00:02:06,451
phases, You will have a complete turn.

28
00:02:06,451 --> 00:02:11,090
Is pretty pretty, you find them in cars,

29
00:02:11,090 --> 00:02:14,694
in the dashboard cars, they have been
in existence for more than

30
00:02:14,694 --> 00:02:18,250
10 years so it should be easy
enough to recover.

31
00:02:18,250 --> 00:02:22,075
So it is the programming
aspect that interests us.

32
00:02:22,075 --> 00:02:27,750
We need four wires that we will
connect to port C by

33
00:02:27,750 --> 00:02:33,234
activating these four bits here
at output, bits 0, 3 out.

34
00:02:33,234 --> 00:02:36,117
And now we have to define

35
00:02:36,117 --> 00:02:42,915
a table, the advance table, which
defines in the background the

36
00:02:42,915 --> 00:02:50,110
euh, six combinations of four bits
that allow to advance  the engine.

37
00:02:50,110 --> 00:02:55,244
So,just spend a little bit of time
reading the documentation and

38
00:02:55,244 --> 00:03:00,880
converting into 4-bit words,
encoded in hexadecimal,

39
00:03:00,880 --> 00:03:05,060
to have the sequence of
steps to move forward.

40
00:03:05,060 --> 00:03:09,338
If you swap those values,
well, it's going to go back.

41
00:03:09,338 --> 00:03:12,066
So if you want to move forward
and backward, you have

42
00:03:12,066 --> 00:03:16,090
the choice between passing between two
tables but watch out for synchronization.

43
00:03:16,090 --> 00:03:23,310
You will prefer to move in one direction
or the other with the time pointer.

44
00:03:23,310 --> 00:03:25,886
So the program is trivial,

45
00:03:25,886 --> 00:03:32,253
if I want to test, I do a loop for,
I advance every 2000 microseconds

46
00:03:32,253 --> 00:03:35,795
ah, stepper motors, it's interesting to

47
00:03:35,795 --> 00:03:39,402
study, they sometimes have speeds where

48
00:03:39,402 --> 00:03:46,333
the impulse that causes it to rotate makes
it oscillate and it has trouble, in fact, To

49
00:03:46,333 --> 00:03:51,110
position itself exactly on the position,
in the correct position before

50
00:03:51,110 --> 00:03:52,830
there is the next pulse.

51
00:03:52,830 --> 00:03:56,780
The other point of today is the encoders.

52
00:03:56,780 --> 00:04:01,727
The mouse encoders will generate
a phase-shifted signal, in this case

53
00:04:01,727 --> 00:04:06,746
these two diodes are not diametrically
opposed, there is a small shift

54
00:04:06,746 --> 00:04:11,820
which causes the received sequence
to be decoupled, said to be

55
00:04:11,820 --> 00:04:17,214
90 degrees, since this corresponds
not necessarily

56
00:04:17,214 --> 00:04:19,790
to one revolution Complete
but at one advance

57
00:04:19,790 --> 00:04:26,780
of a tooth on the sensor,
on the optical disk.

58
00:04:26,780 --> 00:04:31,068
In all the devices now, the potentiometer
has been replaced by an

59
00:04:31,068 --> 00:04:36,686
encoder which is actually a series of
brushes that will generate out

60
00:04:36,686 --> 00:04:42,910
of phase signals but be careful since
it is mechanical contacts,

61
00:04:42,910 --> 00:04:45,115
you are going to have contact rebounds.

62
00:04:45,115 --> 00:04:48,246
This is what I observed
on an oscilloscope.

63
00:04:48,246 --> 00:04:53,187
Uh, this is a bit odd, I have
trouble to interpret

64
00:04:53,187 --> 00:04:58,002
it but it is what the processor
will see and it must be

65
00:04:58,002 --> 00:05:02,925
filtered either by instructions
that will decide that this

66
00:05:02,925 --> 00:05:08,343
pulse is too short, Or by
a capacitor that does

67
00:05:08,343 --> 00:05:09,360
not filter too much.

68
00:05:09,360 --> 00:05:15,946
There, apparently, there is something
odd, which has been poorly filtered.

69
00:05:15,946 --> 00:05:21,871
So uh, programming, even if it's
easy, the full implementation

70
00:05:21,871 --> 00:05:27,660
is not always obvious, you
have to have the means

71
00:05:27,660 --> 00:05:32,940
to observe what happens exactly
at  the electrical level.

72
00:05:32,940 --> 00:05:33,437
So

73
00:05:33,437 --> 00:05:37,830
from a programming point of view,
typically we have a state machine.

74
00:05:37,830 --> 00:05:42,960
We are in state 0 with the two
entries that are valid

75
00:05:42,960 --> 00:05:47,948
0. We pass to state 1 with 0 which is at 1,

76
00:05:47,948 --> 00:05:53,032
so the input in0 is at 1 has passed in
this

77
00:05:53,032 --> 00:05:58,534
state where we will remain until we have

78
00:05:58,534 --> 00:06:02,898
the in1 that activates and cetera. And if

79
00:06:02,898 --> 00:06:07,908
Now, we change direction here, well,

80
00:06:07,908 --> 00:06:13,492
in position 3, we will see that

81
00:06:13,492 --> 00:06:18,808
it is in1 that has activated. And

82
00:06:18,808 --> 00:06:24,180
And in this position 3, we should go

83
00:06:24,180 --> 00:06:28,149
to state 1, there may be an inconsistency
between these two drawings but

84
00:06:28,149 --> 00:06:33,410
you see the spirit. If I turn in
the other direction now,

85
00:06:33,410 --> 00:06:38,800
I will go once in one direction,
once in the other.

86
00:06:38,800 --> 00:06:44,136
Then this, by programming,
can be done quite

87
00:06:44,136 --> 00:06:49,266
easily, it is naturally necessary
to define on which

88
00:06:49,266 --> 00:06:54,100
bit the two bits 0 and 1 are wired.
It is necessary

89
00:06:54,100 --> 00:06:59,525
And now, naturally give the
directions of these bits

90
00:06:59,525 --> 00:07:04,990
at the level of the direction
registers.And now,

91
00:07:04,990 --> 00:07:09,755
And now I
continue in a moment, the main algorithm

92
00:07:09,755 --> 00:07:14,630
that handles this state machine is done with

93
00:07:14,630 --> 00:07:20,306
a switch next and you have
a number of cases and there

94
00:07:20,306 --> 00:07:26,030
we arranged to give names to those
cases that correspond precisely

95
00:07:26,030 --> 00:07:30,782
To the states that have been defined
here. There is case 0, and 0 that

96
00:07:30,782 --> 00:07:35,457
it must be put a letter in front.
If we are

97
00:07:35,457 --> 00:07:40,384
in in0, we will pass

98
00:07:40,384 --> 00:07:42,500
to state 1.

99
00:07:42,500 --> 00:07:45,293
So, we must increment
the counter since we turn

100
00:07:45,293 --> 00:07:47,245
in this direction, we will increment by 1.

101
00:07:47,245 --> 00:07:52,648
We increment the position
and then we say next,

102
00:07:52,648 --> 00:07:56,878
the next state,that's part eh,
of the structure of the

103
00:07:56,878 --> 00:08:01,336
switch variable next, if this
variable next is equal to

104
00:08:01,336 --> 00:08:05,468
e1, we will see how it was declared, well,

105
00:08:05,468 --> 00:08:12,280
we did everything we had to do,
we leave and then when we

106
00:08:12,280 --> 00:08:20,094
return in this switch next, well we will
see that it is Plus the case 0, 1, we

107
00:08:20,094 --> 00:08:25,552
are in case 1 and in this case 1,
and if we see that the signal

108
00:08:25,552 --> 00:08:30,630
is in fact somehow, we have
come back in the rotation, we will

109
00:08:30,630 --> 00:08:35,208
find ourselves in in0,
Finally we will end up

110
00:08:35,208 --> 00:08:40,130
in e0 and we will decrement
the counter again.

111
00:08:40,130 --> 00:08:47,501
So we will  go through these different
cases and the speed of access is relatively

112
00:08:47,501 --> 00:08:51,160
fast so we can find faster
algorithms naturally.

113
00:08:51,160 --> 00:08:55,268
Then the cases e0, e1, e2,

114
00:08:55,268 --> 00:09:00,330
e3 have been declared by
this function called enum.

115
00:09:00,330 --> 00:09:06,606
Enum, in the background,
simply says: I know it's 0, 1,

116
00:09:06,606 --> 00:09:13,090
2, 3 but the user prefers
to say e0, e1, e2, e3.

117
00:09:13,090 --> 00:09:16,740
It's a bit like define, a match.

118
00:09:16,740 --> 00:09:20,395
And then we go, here, and
there is a variable next that

119
00:09:20,395 --> 00:09:24,510
declares itself at the same time
and whose initial value is e0.

120
00:09:24,510 --> 00:09:27,330
So that's part of the switch.

121
00:09:27,330 --> 00:09:31,560
Now, we have to say that our counter

122
00:09:31,560 --> 00:09:35,698
is at 0 and we can go in the loop.

123
00:09:35,698 --> 00:09:41,910
We will display the counter,
here I decided on port C.

124
00:09:41,910 --> 00:09:46,266
Can I send it on a serial print?

125
00:09:46,266 --> 00:09:50,788
The serial print will
take a while so I risk

126
00:09:50,788 --> 00:09:54,580
losing steps and believing
that my program is fake.

127
00:09:54,580 --> 00:09:58,008
So it will have to turn
very, very slowly if

128
00:09:58,008 --> 00:10:02,470
I want to display the steps,
here, in the serial print.

129
00:10:02,470 --> 00:10:06,762
Here I decided that within a millisecond

130
00:10:06,762 --> 00:10:11,120
I had the advantage of
sampling these entries.

131
00:10:11,120 --> 00:10:14,840
I can sample them more often but

132
00:10:14,840 --> 00:10:18,863
it will use CPU power.

133
00:10:18,863 --> 00:10:22,770
Well, then, we saw a little
bit that there were

134
00:10:22,770 --> 00:10:26,760
4-phase motors, that there are
Lavet motors with 6 phases,

135
00:10:26,760 --> 00:10:31,110
that their programming is trivial and
that  there are encoders also which

136
00:10:31,110 --> 00:10:36,135
are ' Use more and more frequently
and are easy to program with

137
00:10:36,135 --> 00:10:42,240
a state machine, the switch statement box.

