1
00:00:00,000 --> 00:00:05,695
Hello, We are going to talk about

2
00:00:05,695 --> 00:00:10,210
computer architecture and you will
understand why this term is used.

3
00:00:10,210 --> 00:00:14,530
We saw the flip-flops, we
saw the logical gates.

4
00:00:14,530 --> 00:00:20,010
These are bricks with which
we can build subsets,

5
00:00:20,010 --> 00:00:25,637
these combinatorial systems and
sequential systems, that are, decoders,

6
00:00:25,637 --> 00:00:30,540
registers, counters. And now
we can assemble these

7
00:00:30,540 --> 00:00:38,538
prefabricated elements to build, in the
background, computer machines.

8
00:00:38,538 --> 00:00:44,840
The current microprocessors are palaces
and some rooms will be discovered.

9
00:00:44,840 --> 00:00:48,038
Now, we'll just build

10
00:00:48,038 --> 00:00:50,906
a garden hut, and have a vague

11
00:00:50,906 --> 00:00:53,714
idea, how we could make a home.

12
00:00:53,714 --> 00:00:57,608
So we are going to talk about
a simplified machine that will

13
00:00:57,608 --> 00:01:02,982
help us to understand the architecture
of computers, and we will be able

14
00:01:02,982 --> 00:01:07,630
to speak a little bit about
the languages that are used

15
00:01:07,630 --> 00:01:12,440
to program, in particular, the
microcontrollers that interest us.

16
00:01:12,440 --> 00:01:16,250
Then our simplified machine,

17
00:01:16,250 --> 00:01:22,260
it will calculate the Fibonacci sequence.
Then the Fibonacci sequence,

18
00:01:22,260 --> 00:01:28,840
each element is the sum
of the two previous elements.

19
00:01:28,840 --> 00:01:34,870
We start with 01, we add them, the total

20
00:01:34,870 --> 00:01:41,160
is 1, we take those 2
elements,the total is 2.

21
00:01:41,160 --> 00:01:49,020
1 plus 2, it will do 3, 2 plus 3, it will
do 5, 3 plus 5, it's 8 , 13, 21, 34.

22
00:01:49,020 --> 00:01:50,720
It is a series that true

23
00:01:50,720 --> 00:01:54,540
architects know since it leads
to the number of gold.

24
00:01:54,540 --> 00:01:56,511
Good, we will not work in

25
00:01:56,511 --> 00:02:00,090
decimal, we will work
in binary, of course.

26
00:02:00,090 --> 00:02:05,640
So we start with the combination
000, which represents 0 there,

27
00:02:05,640 --> 00:02:10,600
it is limited to 5 bits.
The 1, then 0 plus

28
00:02:10,600 --> 00:02:15,680
0 it will do 1, 1 plus 1, it will do 10,

29
00:02:15,680 --> 00:02:20,732
we are in binary. Therefore,
1, 0 unit and a 2 n.

30
00:02:20,732 --> 00:02:25,898
Then 1 plus 10, that's 11, 10 plus

31
00:02:25,898 --> 00:02:30,942
11; then we have not studied
the binary adder, but you

32
00:02:30,942 --> 00:02:35,250
you see now, a little bit, its principle.

33
00:02:35,250 --> 00:02:40,870
We add a column, we get a 0 and
we have a report,

34
00:02:40,870 --> 00:02:46,356
as when we calculate in decimal and
that it exceeds 9, this report will be

35
00:02:46,356 --> 00:02:51,720
added, one will have 1 plus
0, plus 1, it will redo a 0.

36
00:02:51,720 --> 00:02:56,128
We have a report, 1 plus 0, 1 is going

37
00:02:56,128 --> 00:03:01,760
to make a 0 and 1, and that is the
coding that you must recognize

38
00:03:01,760 --> 00:03:07,055
from the 8 since we have
the binary weights 1, 2,

39
00:03:07,055 --> 00:03:12,530
4, 8, 16, as you saw the last time.

40
00:03:12,530 --> 00:03:14,910
There, if we want to talk
about a logical system

41
00:03:14,910 --> 00:03:17,676
now, and what have we done?

42
00:03:17,676 --> 00:03:21,080
We had to add two numbers,
we got a result,

43
00:03:21,080 --> 00:03:27,198
we did the same thing for the
following numbers; And each

44
00:03:27,198 --> 00:03:32,510
time a digit was obtained.But,

45
00:03:32,510 --> 00:03:37,765
Since 1 plus 1 can make
10, there is a report

46
00:03:37,765 --> 00:03:43,330
called carry from one adder to the other.

47
00:03:43,330 --> 00:03:46,008
And you see that now,

48
00:03:46,008 --> 00:03:51,598
well, we have a logic system
with three inputs and

49
00:03:51,598 --> 00:03:56,950
a carry, and then we have an
output and a carry.

50
00:03:56,950 --> 00:04:02,836
So it's easy to transform this
rectangle, into a series

51
00:04:02,836 --> 00:04:07,570
of doors, and make an adder the
size we are interested in.

52
00:04:07,570 --> 00:04:11,442
So, now what we have to do, well,

53
00:04:11,442 --> 00:04:15,580
it's symbolized here. Here is
our algorithm, we must

54
00:04:15,580 --> 00:04:21,082
add two numbers, put the result,
and then move this

55
00:04:21,082 --> 00:04:26,690
operator to act on the staggered numbers.

56
00:04:26,690 --> 00:04:32,131
So let's build this machine
so that it can work.

57
00:04:32,131 --> 00:04:37,260
We will use two registers of 8 bits wide,

58
00:04:37,260 --> 00:04:40,802
these are the values a bit
standard in our elements,

59
00:04:40,802 --> 00:04:44,388
they are called A and B
commonly logical, these

60
00:04:44,388 --> 00:04:49,978
two registers will supply their
information to a binary adder

61
00:04:49,978 --> 00:04:56,360
and the result can be stored in a register.

62
00:04:56,360 --> 00:05:00,770
So how does it work now?

63
00:05:00,770 --> 00:05:02,688
We started with 1

64
00:05:02,688 --> 00:05:07,900
0 over A, we went with 1 in B,

65
00:05:07,900 --> 00:05:14,480
The adder will provide the result 0, 1,
and

66
00:05:14,480 --> 00:05:21,780
a first clock pulse will be given, which
will store this information at the output,

67
00:05:21,780 --> 00:05:27,540
where small light-emitting diodes can
be placed to display the result.

68
00:05:27,540 --> 00:05:28,422
And now,

69
00:05:28,422 --> 00:05:32,895
we must go on to the next cycle,
so what we have to do now is to say,

70
00:05:32,895 --> 00:05:38,760
well, C is equal to A plus B,
to transport

71
00:05:38,760 --> 00:05:43,686
B to A,

72
00:05:43,686 --> 00:05:48,080
and transport C

73
00:05:48,080 --> 00:05:54,293
to B. And there, if you notice

74
00:05:54,293 --> 00:05:58,290
The wiring can be done simultaneously at

75
00:05:58,290 --> 00:06:02,340
the level of this machine. And
then we will start again and

76
00:06:02,340 --> 00:06:09,170
we will obtain the successive values,
in the background, of this series, until there is

77
00:06:09,170 --> 00:06:15,117
an overflow of capacity, since
here the maximum is 256.

78
00:06:15,117 --> 00:06:19,758
And I told you about carry, this

79
00:06:19,758 --> 00:06:24,860
8-bit adder provides you with
a carry, if you ever wanted

80
00:06:24,860 --> 00:06:30,430
to add 16 bits, it would suffice
to add a module.

81
00:06:30,430 --> 00:06:37,334
This carry, well, we can very well
use it to stop, the small

82
00:06:37,334 --> 00:06:44,020
sequential machine that will
generate the clocks alternately.

83
00:06:44,020 --> 00:06:45,055
So now

84
00:06:45,055 --> 00:06:49,540
well, obviously, we could
say: here I am going to build another

85
00:06:49,540 --> 00:06:54,230
machine to make the multiples of 2,
I will build another machine.

86
00:06:54,230 --> 00:06:59,390
It's not so much, what we want
is an universal machine.

87
00:06:59,390 --> 00:07:03,090
So what is this universal
machine what should it contain?

88
00:07:03,090 --> 00:07:09,710
It must contain those registers
with which we are going to work,

89
00:07:09,710 --> 00:07:15,740
it must contain an adder, but there
are times we want to subtract,

90
00:07:15,740 --> 00:07:19,995
there are times when we want to make
logical operations between these numbers.

91
00:07:19,995 --> 00:07:22,875
So this is called an arithmetic
and logical unit,

92
00:07:22,875 --> 00:07:27,480
A.L.U., Arithmetic Logic Unit, in English.

93
00:07:27,480 --> 00:07:30,604
And now we must be able, typically for
and now, we must be able, typically for

94
00:07:30,604 --> 00:07:35,174
our algorithm, now we must be able to add

95
00:07:35,174 --> 00:07:40,646
A and B, and return the result in C. So

96
00:07:40,646 --> 00:07:45,479
So this is going to be done by means of

97
00:07:45,479 --> 00:07:50,700
a bus that allows to interconnect

98
00:07:50,700 --> 00:07:55,389
any unit to any other. It is

99
00:07:55,389 --> 00:08:00,230
Like a station with parallel tracks

100
00:08:00,230 --> 00:08:05,318
and of course, you have to
order the switches that will

101
00:08:05,318 --> 00:08:10,570
transport the information
to the right place.

102
00:08:10,570 --> 00:08:16,306
And it takes orders, to position, in
the background, these gears.

103
00:08:16,306 --> 00:08:20,436
So we will define binary
words by saying, well,

104
00:08:20,436 --> 00:08:25,240
here we go, I have three
registers, I will take 2

105
00:08:25,240 --> 00:08:30,490
bits to say what is the registry
with which I will work.

106
00:08:30,490 --> 00:08:33,158
And then eventually you
will be able to work

107
00:08:33,158 --> 00:08:35,058
with two registers at the same time,

108
00:08:35,058 --> 00:08:40,845
you have to choose them independently,
with bits 00, it will be 1, 01, it will be B.

109
00:08:40,845 --> 00:08:45,240
And then, well, we'll be able to say,

110
00:08:45,240 --> 00:08:50,750
by adding bits, that we
want to add, and so on.

111
00:08:50,750 --> 00:08:54,735
All the operations that are to be ordered

112
00:08:54,735 --> 00:08:57,455
will be transmitted to a decoder
which will

113
00:08:57,455 --> 00:09:02,640
position the switches and
we will give one or many

114
00:09:02,640 --> 00:09:08,090
clock strokes for the sequence
of operations to take place.

115
00:09:08,090 --> 00:09:12,149
And that, well, that will be the first thing we

116
00:09:12,149 --> 00:09:15,680
want to do, as we said, C equal A plus B,

117
00:09:15,680 --> 00:09:20,322
it will be the binary code that
we will put here, and

118
00:09:20,322 --> 00:09:24,969
then the next thing, that will be
to make a transfer,

119
00:09:24,969 --> 00:09:29,430
in a second position memory,
but it could be a strip

120
00:09:29,430 --> 00:09:34,640
of paper that is unrolled, historically
we started like that, et cetera.

121
00:09:34,640 --> 00:09:40,940
See, we are building a sequence
of binary words that

122
00:09:40,940 --> 00:09:45,560
will evolve the machine so

123
00:09:45,560 --> 00:09:50,768
as to obtain the result that
interests us. So those words

124
00:09:50,768 --> 00:09:56,087
So these binary words,
obviously, are very painful

125
00:09:56,087 --> 00:10:01,625
to memorize, to manipulate,
to write. We will replace

126
00:10:01,625 --> 00:10:06,191
the binary words with expressions that

127
00:10:06,191 --> 00:10:13,570
are more explicit, we want to move from
one register to another, we will use move.

128
00:10:13,570 --> 00:10:18,654
What was the first operation in
our Fibonacci algorithm?

129
00:10:18,654 --> 00:10:23,305
It was to put 0 in A, it
was to put 1 in B.

130
00:10:23,305 --> 00:10:28,330
Well,it costs us two elementary
instructions, which

131
00:10:28,330 --> 00:10:31,450
will be coded in binary, but
if we write them in

132
00:10:31,450 --> 00:10:35,194
an explicit way, we can easily imagine a

133
00:10:35,194 --> 00:10:39,045
program that will do a
little syntactic analysis

134
00:10:39,045 --> 00:10:44,180
and create the bits; A, well, we saw that
it was 0.0 in two places and so on.

135
00:10:44,180 --> 00:10:44,320
.

136
00:10:44,320 --> 00:10:49,312
So now we have to add A, B, C.

137
00:10:49,312 --> 00:10:55,160
A, B goes on C, so here it is,
quite understandable.

138
00:10:55,160 --> 00:10:56,686
We must display

139
00:10:56,686 --> 00:11:01,586
C, and then we must move
B into A, C into B

140
00:11:01,586 --> 00:11:06,500
And start again. So here are instructions

141
00:11:06,500 --> 00:11:11,550
And start again. So these are instructions
that are exactly the binary statements

142
00:11:11,550 --> 00:11:16,675
that are stored in memory,
but they have been written

143
00:11:16,675 --> 00:11:21,910
in a readable way. Each
line corresponds to a

144
00:11:21,910 --> 00:11:26,130
binary word, and that is the
setup language,

145
00:11:26,130 --> 00:11:30,190
since we will assemble bits,
in the background,

146
00:11:30,190 --> 00:11:34,250
according to the instructions and
it is said rather the assembler.

147
00:11:34,250 --> 00:11:41,628
So what we lack now is to
communicate, and rather than

148
00:11:41,628 --> 00:11:47,286
putting small LEDs, we will  put
something that will become quite

149
00:11:47,286 --> 00:11:54,038
complicated, to be able to enter
and leave information, in

150
00:11:54,038 --> 00:12:01,470
extremely varied formats. And that
is what we will study afterwards.

151
00:12:01,470 --> 00:12:07,700
And now what we need is to be able
to load the program, and for

152
00:12:07,700 --> 00:12:12,591
that we need to communicate externally
and naturally we are going to put in

153
00:12:12,591 --> 00:12:18,190
a serial communication, and we need
a small parallel program that we Will

154
00:12:18,190 --> 00:12:23,940
put in an indestructible memory, a
read-only memory as we say, which

155
00:12:23,940 --> 00:12:31,670
will be attentive, which will handle these
operations of filling the memory, as a function

156
00:12:31,670 --> 00:12:37,180
of a sequencer which is obviously going
to be a  relatively complex element.

157
00:12:37,180 --> 00:12:42,410
So the next step, well it is to
say, the assembler,

158
00:12:42,410 --> 00:12:48,125
it is very nice, but I would like to be
able to write as at the beginning, C equal

159
00:12:48,125 --> 00:12:53,482
A plus B.And this transformation

160
00:12:53,482 --> 00:12:57,535
of C equal to A plus B,

161
00:12:57,535 --> 00:13:02,364
in a sequence of instructions that we
had seen before, can be done

162
00:13:02,364 --> 00:13:04,704
by a program.

163
00:13:04,704 --> 00:13:09,755
And that's the C language we're
going to study, which will allow us

164
00:13:09,755 --> 00:13:14,180
to write things like this, with
still a semicolon at the end.

165
00:13:14,180 --> 00:13:16,975
And the interest is that we can write

166
00:13:16,975 --> 00:13:20,500
programs in a way that is
much more natural to us.

167
00:13:20,500 --> 00:13:25,896
Then all the computer languages,
from this binary, then the Assembler,

168
00:13:25,896 --> 00:13:27,790
the C, Java and there are still

169
00:13:27,790 --> 00:13:32,563
many others behind, have been
developed to interact

170
00:13:32,563 --> 00:13:36,764
with man, to program your
graphic tablets and so on.

171
00:13:36,764 --> 00:13:39,166
We, what interests us, is

172
00:13:39,166 --> 00:13:43,338
not to interact with man,
it is to interact with a

173
00:13:43,338 --> 00:13:47,286
technical device, that we will plug on

174
00:13:47,286 --> 00:13:51,445
these inputs and outputs,
sensors, actuators.

175
00:13:51,445 --> 00:13:53,095
and for that we need to

176
00:13:53,095 --> 00:13:56,208
And for that you have to have an
appropriate language, which at the same time

177
00:13:56,208 --> 00:14:00,650
allows to make calculations,
in binary, or in

178
00:14:00,650 --> 00:14:05,792
decimal, since if it is of the
decimal, the program

179
00:14:05,792 --> 00:14:11,070
will be able to choose, to call all the
conversions instructions necessary .

180
00:14:11,070 --> 00:14:13,333
So it is language C that will

181
00:14:13,333 --> 00:14:18,606
allow us to write these kinds of
expressions, in which we can

182
00:14:18,606 --> 00:14:22,883
also think, for numbers, of
their decimal representation,

183
00:14:22,883 --> 00:14:27,580
the program will have only to make
the necessary transformations.

184
00:14:27,580 --> 00:14:33,000
And these languages have developed

185
00:14:33,000 --> 00:14:36,608
a lot, thinking about interaction
with humans, but what

186
00:14:36,608 --> 00:14:40,614
interests us with microcontrollers is not

187
00:14:40,614 --> 00:14:44,124
interacting with a tablet, with a screen,

188
00:14:44,124 --> 00:14:49,320
with a keyboard, Is to interact
with physical devices,

189
00:14:49,320 --> 00:14:54,990
sensors, motors. And that is the
purpose of this course;

190
00:14:54,990 --> 00:14:59,800
And it is the role of microcontrollers,
compared

191
00:14:59,800 --> 00:15:04,840
to microprocessors, with their
huge memories.

