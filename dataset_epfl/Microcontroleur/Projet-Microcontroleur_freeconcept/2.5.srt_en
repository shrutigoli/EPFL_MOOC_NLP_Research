1
00:00:04,470 --> 00:00:08,058
Hello, we need now to consolidate
the little

2
00:00:08,058 --> 00:00:11,352
we've learned from C,
by doing some simple programs.

3
00:00:11,352 --> 00:00:14,645
See the difference between
if and while, between

4
00:00:14,645 --> 00:00:19,966
the binary and the BCD,
and how we can make conversions.

5
00:00:19,966 --> 00:00:23,965
We saw how to read a pusher
and write on a led.

6
00:00:23,965 --> 00:00:30,042
We are going to a little bit complicate
the problem by having two pushers and two

7
00:00:30,042 --> 00:00:36,210
leds, and seek to program different features.

8
00:00:36,210 --> 00:00:41,852
These features interact with
push buttons and LEDs that

9
00:00:41,852 --> 00:00:47,276
are switched on or off, pushers
that are pressed or released, and

10
00:00:47,276 --> 00:00:53,200
the way it was wired is another level.

11
00:00:53,200 --> 00:00:55,279
So it was like we had

12
00:00:55,279 --> 00:00:58,830
seen the last time,
in the definition that we will say.

13
00:00:58,830 --> 00:01:03,934
Well, for this wiring, in this program,
and

14
00:01:03,934 --> 00:01:08,273
for, uh, this wiring in which
we will test the program.

15
00:01:08,273 --> 00:01:14,506
Well, the led one is in pin five,
led two on the six pin, ah,

16
00:01:14,506 --> 00:01:18,522
the push function on, and well, that's when

17
00:01:18,522 --> 00:01:21,770
we read a zero, there is the
exclamation point.

18
00:01:21,770 --> 00:01:26,902
Uh, when you want to activate
the led, well, you have to

19
00:01:26,902 --> 00:01:30,540
put low on the led that is on the pin one.

20
00:01:30,540 --> 00:01:34,036
Once we have defined this, we can

21
00:01:34,036 --> 00:01:38,800
forget the wiring, and
only worry about functionality.

22
00:01:38,800 --> 00:01:42,630
So, the first functionality,
well, that's what we'd already seen.

23
00:01:42,630 --> 00:01:46,995
One pusher is copied
on the led one, the pusher two

24
00:01:46,995 --> 00:01:52,291
on the led two, and there,
with an if, our problem, if the

25
00:01:52,291 --> 00:01:57,970
pusher one is to one,
one lights the led, otherwise it is off,

26
00:01:57,970 --> 00:02:02,720
and the program, after, in if,
continue, will take care of

27
00:02:02,720 --> 00:02:07,432
the pusher two, and then start again.
You have a reaction

28
00:02:07,432 --> 00:02:12,154
of the processor, to the input actions.

29
00:02:12,154 --> 00:02:17,235
We can enjoy complicating a little bit
the rule of the game, in saying, but the led

30
00:02:17,235 --> 00:02:21,697
one, I would like it to turn on
if the pusher one

31
00:02:21,697 --> 00:02:26,020
is active, or if the push-button two
is active.

32
00:02:26,020 --> 00:02:30,630
And there, we made a little bit logic,
it can be converted directly

33
00:02:30,630 --> 00:02:37,427
in the logical symbol of Or, and
we can also, make a truth table,

34
00:02:37,427 --> 00:02:44,540
and then, see, the different
cases expressed with some, zeros.

35
00:02:44,540 --> 00:02:46,850
So here we have the function Or, and then

36
00:02:46,850 --> 00:02:49,424
thereon the other side, we will change a

37
00:02:49,424 --> 00:02:51,780
little bit the rule, and we will say the led

38
00:02:51,780 --> 00:02:56,620
two, it lights up when
the pusher two is operated.

39
00:02:56,620 --> 00:03:03,069
But it should not light up if at the same
time we add on the pusher one.

40
00:03:03,069 --> 00:03:07,312
So this is an AND condition. For the led

41
00:03:07,312 --> 00:03:11,316
two is on, the pusher two must be active

42
00:03:11,316 --> 00:03:15,314
and the pusher one must not be active.

43
00:03:15,314 --> 00:03:23,110
This little round of reversal,
replaces the inverter we had, drawn.

44
00:03:23,110 --> 00:03:28,154
So now, how do we program this?
So, at the level

45
00:03:28,154 --> 00:03:33,618
of C, you have the logical OR
which is a vertical bar,

46
00:03:33,618 --> 00:03:38,664
and we shall see that as for
the equal sign, the simple vertical bar

47
00:03:38,664 --> 00:03:44,028
acts on binary Mo,
and the double vertical bar acts on

48
00:03:44,028 --> 00:03:49,210
the conditions, pusher condition one,
pusher condition two.

49
00:03:49,210 --> 00:03:53,640
If either of these conditions is met,

50
00:03:53,640 --> 00:03:58,870
the led one is turned on;
otherwise it is off.

51
00:03:58,870 --> 00:04:02,470
And then, in the case of logical AND,

52
00:04:02,470 --> 00:04:06,730
we have the symbol of ET
which is easy to recognize.

53
00:04:06,730 --> 00:04:14,828
If pusher two is active,
and pusher one is not acted upon,

54
00:04:14,828 --> 00:04:18,350
well, we'll turn on the led. So,

55
00:04:18,350 --> 00:04:23,210
to test these programs,
we use definitions that have been,

56
00:04:23,210 --> 00:04:28,630
listed on the previous link.
Always with the same

57
00:04:28,630 --> 00:04:33,704
pattern, but we have only
pusher one and then only one

58
00:04:33,704 --> 00:04:38,742
led, we think, but it can be fun to blink a

59
00:04:38,742 --> 00:04:44,140
number of times, depending
on the duration of a pusher.

60
00:04:44,140 --> 00:04:46,972
Eh, you press quickly, it blinks once.

61
00:04:46,972 --> 00:04:50,496
You press very long,
it will blink several times.

62
00:04:50,496 --> 00:04:53,100
How can we program that?

63
00:04:53,100 --> 00:04:57,870
Well, we'll say, as long
as I press the button, I'll

64
00:04:57,870 --> 00:05:03,190
increment a counter, increase,
every 20 milliseconds, for example.

65
00:05:03,190 --> 00:05:06,034
Actually, we have the little stairs here.

66
00:05:06,034 --> 00:05:09,470
And then, once we have released, well,

67
00:05:09,470 --> 00:05:14,729
we will count down, but we can
count down, in the background,

68
00:05:14,729 --> 00:05:19,100
we do not want to count as many times
as here, it would make too many blinks.

69
00:05:19,100 --> 00:05:21,071
So we're going to take steps.

70
00:05:21,071 --> 00:05:22,750
Here, we increased by one.

71
00:05:22,750 --> 00:05:26,380
Now, we will decrease, for example, by 25.

72
00:05:26,380 --> 00:05:29,515
Therefore, at the program level,

73
00:05:29,515 --> 00:05:35,128
we need to define a c Time variable
that is the counter

74
00:05:35,128 --> 00:05:37,410
of the pusher time.

75
00:05:37,410 --> 00:05:43,570
In the loop, well, we will start
by setting the counter to zero.

76
00:05:43,570 --> 00:05:48,770
And then, we will say, well,
as long as the pusher is at

77
00:05:48,770 --> 00:05:53,890
one, we will increase
the time every 20 milliseconds.

78
00:05:53,890 --> 00:05:56,680
And there, it must be a while,

79
00:05:56,680 --> 00:06:00,699
we will stay in this part of the program.

80
00:06:00,699 --> 00:06:02,884
If we had put it in if, well,

81
00:06:02,884 --> 00:06:05,604
we would have right away, look at what

82
00:06:05,604 --> 00:06:08,578
should go further, and, you would have had

83
00:06:08,578 --> 00:06:11,850
a blink, with each press, and only one.

84
00:06:11,850 --> 00:06:12,720
Check.

85
00:06:12,720 --> 00:06:17,005
So, once you release
the button, well, while,

86
00:06:17,005 --> 00:06:20,120
will get us out,
in the background, of this loop.

87
00:06:20,120 --> 00:06:26,153
And then, we will say, well, as long
as the time counter cTime is superior

88
00:06:26,153 --> 00:06:32,344
at zero, one blinks,
one decreases by 25, and we

89
00:06:32,344 --> 00:06:38,627
remain in this loop, to make impulses

90
00:06:38,627 --> 00:06:43,760
until it becomes negative.

91
00:06:43,760 --> 00:06:47,204
And then, well, we'll start again to

92
00:06:47,204 --> 00:06:50,933
wait on the pusher and repeat the game.

93
00:06:50,933 --> 00:06:57,639
So here you see the difference between
a while that's waiting for the end of an

94
00:06:57,639 --> 00:07:04,590
event, and the if that tests
one thing and goes further.

95
00:07:04,590 --> 00:07:10,341
Then we will talk a lot about pwm,
to make pulses of variable lengths

96
00:07:10,341 --> 00:07:15,595
and change the speed of an engine,
or change the intensity of a led.

97
00:07:15,595 --> 00:07:18,115
Well, we have a led, here, uh, in

98
00:07:18,115 --> 00:07:21,985
the exit from our circuit
which was declared by one.

99
00:07:21,985 --> 00:07:27,320
Well, we'll turn it on for a while,
turn it off some time.

100
00:07:27,320 --> 00:07:32,915
Repeating it every 20 milliseconds,
well, the retinal persistence

101
00:07:32,915 --> 00:07:40,482
will integrate this luminous intensity,
and we shall see, if we define a value two.

102
00:07:40,482 --> 00:07:46,278
Well, there will be two-twentieth
of intensity, 10% intensity

103
00:07:46,278 --> 00:07:51,860
on the led. So, we define a duration, a

104
00:07:51,860 --> 00:07:57,960
on, a delay, duration, led ET.

105
00:07:57,960 --> 00:08:01,440
And then, afterwards,
we turn off, and wait

106
00:08:01,440 --> 00:08:05,350
the complementary duration to 20,
since one has a slice,

107
00:08:05,350 --> 00:08:07,360
Here, 20 milliseconds.

108
00:08:07,360 --> 00:08:12,191
So there is a small problem that
you need to be careful about, is that the delay

109
00:08:12,191 --> 00:08:17,997
duration On, If you set a duration of zero,
you will not have

110
00:08:17,997 --> 00:08:23,185
a duration of zero, but a duration of 65 seconds,
because of the count down which

111
00:08:23,185 --> 00:08:28,170
is done, and if one counts from zero,
well, one has the maximum value.

112
00:08:28,170 --> 00:08:30,550
Similarly, the value 20 must be

113
00:08:30,550 --> 00:08:37,450
excluded since this would correspond,
on this side, to a waiting of zero.

114
00:08:37,450 --> 00:08:42,763
Now, of course, we can perfect
the program, and say, and

115
00:08:42,763 --> 00:08:49,890
Well, if it's zero, I do not go through
those instructions, I activate it.

116
00:08:49,890 --> 00:08:54,490
If it's 20, I do not go through
these instructions,

117
00:08:54,490 --> 00:08:59,542
I permanently activate the On. And now,

118
00:08:59,542 --> 00:09:04,356
if you really want to be able to turn off
completely and turn on without

119
00:09:04,356 --> 00:09:09,258
loss of intensity, you have
to decode, here, at

120
00:09:09,258 --> 00:09:14,533
the beginning of the program.
If the duration is zero,

121
00:09:14,533 --> 00:09:20,175
then, you must not
go through these instructions,

122
00:09:20,175 --> 00:09:22,375
and only turn off.

123
00:09:22,375 --> 00:09:24,997
If it is 20, do not pass

124
00:09:24,997 --> 00:09:28,334
these instructions
and only turn on, and it costs,

125
00:09:28,334 --> 00:09:31,557
several instructions that you may still have

126
00:09:31,557 --> 00:09:33,660
trouble to write well, but try.

127
00:09:33,660 --> 00:09:41,250
What we will rather do is to vary
this intensity to have a led

128
00:09:41,250 --> 00:09:45,268
which lights up longer
and longer. And there,

129
00:09:45,268 --> 00:09:47,920
one can say, and well it is easy, it

130
00:09:47,920 --> 00:09:51,960
is enough, I had time, two, here.

131
00:09:51,960 --> 00:09:58,050
I can put the value three
in the near, pro, next loop.

132
00:09:58,050 --> 00:10:02,938
But, that means that,
20 times 20 milliseconds, zero

133
00:10:02,938 --> 00:10:08,050
Four seconds, we will have switched
from minimum to maximum intensity.

134
00:10:08,050 --> 00:10:10,970
So to slow down this development,

135
00:10:10,970 --> 00:10:15,326
We must repeat the same

136
00:10:15,326 --> 00:10:20,537
configuration of pulses, and for this,

137
00:10:20,537 --> 00:10:25,270
well, we will, in addition
to the duration that will vary,

138
00:10:25,270 --> 00:10:30,780
now, and that will start at one.
We will introduce a number

139
00:10:30,780 --> 00:10:36,091
of repetitions which will be a counter,
and we will define a

140
00:10:36,091 --> 00:10:42,972
number of such repetitions,
and if we take, for example, the value 10,

141
00:10:42,972 --> 00:10:49,683
it means that we will, now, ah,
repeat 10 times each pulse.

142
00:10:49,683 --> 00:10:55,050
So, it will last zero two seconds,
and all the zero two seconds, one

143
00:10:55,050 --> 00:10:59,670
will change the value and
the cycle will take in three, four seconds.

144
00:10:59,670 --> 00:11:01,540
So, at the level of the loop,

145
00:11:01,540 --> 00:11:06,505
we start with a number
of repetitions which is zero,

146
00:11:06,505 --> 00:11:11,470
we check whether this number
is less than the maximum.

147
00:11:11,470 --> 00:11:16,624
If yes, the led is activated
and deactivated, and

148
00:11:16,624 --> 00:11:21,950
we increase the repeat counter

149
00:11:21,950 --> 00:11:27,030
to leave this loop

150
00:11:27,030 --> 00:11:31,430
when the condition here
will no longer be satisfied.

151
00:11:31,430 --> 00:11:36,790
When we leave this loop, we modify
the duration, since we want to increase

152
00:11:36,790 --> 00:11:42,480
the intensity, and
if the duration is equal to

153
00:11:42,480 --> 00:11:47,957
20, we were at 19, it was accepted.

154
00:11:47,957 --> 00:11:52,282
But when, here, we added one,

155
00:11:52,282 --> 00:11:56,979
it's no longer acceptable, that's why
I preferred to write 19 plus one.

156
00:11:56,979 --> 00:11:58,450
The state is restored.

157
00:11:58,450 --> 00:12:04,708
When we have these last cycles
at 19, we anticipated

158
00:12:04,708 --> 00:12:10,570
an evolution which did not take place
and well one resets the counter to 1.

159
00:12:10,570 --> 00:12:13,108
So here are some examples.

160
00:12:13,108 --> 00:12:17,068
If now we are interested in incrementing,

161
00:12:17,068 --> 00:12:22,374
increase by 1 a BCD counter.
The representation in

162
00:12:22,374 --> 00:12:27,570
BCD, and well it is each time,
as we saw, 4 bits

163
00:12:27,570 --> 00:12:32,685
and we should not use
all possible combinations of this

164
00:12:32,685 --> 00:12:37,790
binary word. So I start from
an example that is 399,

165
00:12:37,790 --> 00:12:42,605
I would like to add 1, and well in binary

166
00:12:42,605 --> 00:12:48,120
I have to add 1. 1 plus 1 makes 0.

167
00:12:48,120 --> 00:12:49,520
There is a postponement.

168
00:12:49,520 --> 00:12:53,330
1 plus 0 it's 1. There's no postponement.

169
00:12:53,330 --> 00:12:55,980
0 plus 0, is copied. 1.

170
00:12:55,980 --> 00:13:00,710
And here, the result is actually
the hexadecimal number A.

171
00:13:00,710 --> 00:13:08,074
While we would like to have
a 0 here and then a report

172
00:13:08,074 --> 00:13:12,890
for the next bit. Then this

173
00:13:12,890 --> 00:13:18,463
difference is 6. So at
the level of the algorithm

174
00:13:18,463 --> 00:13:23,424
and we will say
if the result exceeded 9, we

175
00:13:23,424 --> 00:13:28,521
adds 6, which brings
the result to the value

176
00:13:28,521 --> 00:13:33,127
0 and increments the next stage.
Therefore, this

177
00:13:33,127 --> 00:13:39,085
continues, and at the level
of programming, since that is what

178
00:13:39,085 --> 00:13:45,348
we're interested in, we need to define
a number of 16 bits, which we will call bcd.

179
00:13:45,348 --> 00:13:52,100
It is important to note that
when you have 8,000 or 9,000

180
00:13:52,100 --> 00:13:58,670
and well you have the first bit
that is the sign bit,

181
00:13:58,670 --> 00:14:01,946
which might lead  to believe some parts

182
00:14:01,946 --> 00:14:05,660
of the program that handles
a negative number.

183
00:14:05,660 --> 00:14:10,210
So we must define unsigned int bcd.

184
00:14:10,210 --> 00:14:15,770
And now we increase bcd in binary.

185
00:14:15,770 --> 00:14:21,280
So we will find in this case, A, 9.

186
00:14:21,280 --> 00:14:23,760
And then we say if

187
00:14:23,760 --> 00:14:30,224
the result is greater than 9, we add

188
00:14:30,224 --> 00:14:35,440
6, which means that
the result will become 0 A.

189
00:14:35,440 --> 00:14:41,628
And the next line,
well it is said if it is superior

190
00:14:41,628 --> 00:14:47,430
to 90, which is the case here,
and we add 60.

191
00:14:47,430 --> 00:14:48,770
The results

192
00:14:48,770 --> 00:14:55,000
will become 0 0 4 since 1 has been added.

193
00:14:55,000 --> 00:15:00,348
And we will pass through
the following two instructions without

194
00:15:00,348 --> 00:15:05,890
diong nothing since it is not more
than 900 nor more than 9,000.

195
00:15:05,890 --> 00:15:09,542
So when it's more than 9,000, there's

196
00:15:09,542 --> 00:15:14,187
an overflow, which will not
be reported (by) the program.

197
00:15:14,187 --> 00:15:16,400
You will get a value of 0.

198
00:15:16,400 --> 00:15:21,050
So if you want to report the overflow,
you will need to add

199
00:15:21,050 --> 00:15:26,988
additional instructions, activate
a variable that says it overflowed.

200
00:15:26,988 --> 00:15:33,805
To make a BCD down counter,
it is extremely close and even simpler.

201
00:15:33,805 --> 00:15:39,212
You have to subtract 1.
So 0 minus 1 makes 1 and

202
00:15:39,212 --> 00:15:41,250
there is a loan.

203
00:15:41,250 --> 00:15:47,600
0 minus the loan it makes
1 minus the loan, it makes 1.

204
00:15:47,600 --> 00:15:51,970
So we find the value F while
we should have the value 9.

205
00:15:51,970 --> 00:15:54,940
And then there is no borrowing that

206
00:15:54,940 --> 00:15:58,904
was propagated, so the rule is very simple.

207
00:15:58,904 --> 00:16:04,650
say if we have 9, we put F and
we just have to look, as we did before,

208
00:16:04,650 --> 00:16:08,830
one digit after another
with masks to get the result.

209
00:16:08,830 --> 00:16:12,190
That is what I have just explained.

210
00:16:12,190 --> 00:16:16,790
We could subtract 6 or

211
00:16:16,790 --> 00:16:22,550
explain it simply to force a 9.

212
00:16:22,550 --> 00:16:25,464
We often have the implication
that a variable must remain

213
00:16:25,464 --> 00:16:30,000
in fact in a certain interval.
Then if this variable

214
00:16:30,000 --> 00:16:34,656
X is greater than a
and well we bring the

215
00:16:34,656 --> 00:16:38,919
value at a If it is smaller than b,

216
00:16:38,919 --> 00:16:43,323
we return the value to b
And it costs us 2 instructions

217
00:16:43,323 --> 00:16:48,373
finally 4 instructions, 5 hm
And that costs us 2 instructions.

218
00:16:48,373 --> 00:16:55,936
Arduino offers you this function
which is constrain with 3 parameters

219
00:16:55,936 --> 00:17:00,550
: X, input, maximum and minimum.

220
00:17:00,550 --> 00:17:05,180
Adruino offers you this function
if you do not want to think.

221
00:17:05,180 --> 00:17:10,947
Constrain if x must remain in

222
00:17:10,947 --> 00:17:16,470
the interval between a and b
and the result therefore will be confined,

223
00:17:16,470 --> 00:17:21,664
Constrain, in this interval,
we can also be interested

224
00:17:21,664 --> 00:17:25,030
in defining a maximum and a minimum.

225
00:17:25,030 --> 00:17:30,130
You have a variable, is it larger
than a, smaller than b?

226
00:17:30,130 --> 00:17:35,065
So it's also one of the functions that Arduino

227
00:17:35,065 --> 00:17:39,388
but are not really essential.

228
00:17:39,388 --> 00:17:42,230
Minimum of a, b.
Maximum of a, b.

229
00:17:42,230 --> 00:17:47,140
A more interesting case
is a conversion in the bottom of scale.

230
00:17:47,140 --> 00:17:51,118
We will see in numerical analog converters

231
00:17:51,118 --> 00:17:54,144
that you get from

232
00:17:54,144 --> 00:17:56,358
a voltage at an input of

233
00:17:56,358 --> 00:18:00,060
the micro-controller,
a value between 0 and 1023.

234
00:18:00,060 --> 00:18:06,685
Often it would make us have
only this value between 0 and 255.

235
00:18:06,685 --> 00:18:09,149
So there it is enough to divide by 4,

236
00:18:09,149 --> 00:18:12,229
What you have,
you have a value that is

237
00:18:12,229 --> 00:18:13,310
actually 10 bits.

238
00:18:13,310 --> 00:18:18,878
What we want is to keep only 8 bits
and we will naturally keep

239
00:18:18,878 --> 00:18:24,422
the bits of high weights and we will cut
the last 8 bits what is done,

240
00:18:24,422 --> 00:18:29,870
actually, in practice, by shifting by 2
and, as we will discuss later, there is the

241
00:18:29,870 --> 00:18:38,165
upper sign, upper, 2 to say
that the word of 2 positions is shifted.

242
00:18:38,165 --> 00:18:41,463
So there were 10 before, we ejected

243
00:18:41,463 --> 00:18:44,770
of zeros, there are no more
than 8 successive positions.

244
00:18:44,770 --> 00:18:49,300
It's a little more complicated
if now you go,

245
00:18:49,300 --> 00:18:53,830
you would want the 1023
to match the sum value.

246
00:18:53,830 --> 00:18:58,480
So instead of dividing 256 by

247
00:18:58,480 --> 00:19:03,910
1023, which was the x over 4, we now need

248
00:19:03,910 --> 00:19:10,720
to divide 200 by 1024
and then multiply by x.

249
00:19:10,720 --> 00:19:16,050
So there you have to be careful
because 200 out of 1024 is 0.

250
00:19:16,050 --> 00:19:24,338
The micro-controller works with integers
and it will signal to you that

251
00:19:24,338 --> 00:19:29,560
it's 0 and there may be a remainder
to that division that you can retrieve

252
00:19:29,560 --> 00:19:34,950
in a way but this product
will always give you 0.

253
00:19:34,950 --> 00:19:38,258
So what you need to write is x

254
00:19:38,258 --> 00:19:43,191
times 200, regardless that it could become

255
00:19:43,191 --> 00:19:48,431
too large compared to the memory size
that was reserved and divided by 1024.

256
00:19:48,431 --> 00:19:53,626
Divide by 1024, as we have
just said, it can be lags.

257
00:19:53,626 --> 00:19:54,778
It is a power

258
00:19:54,778 --> 00:20:00,415
of 2, so if you shift 10 times
and well you will have your result.

259
00:20:00,415 --> 00:20:05,630
One can still have fun
to say but 200 times 200

260
00:20:05,630 --> 00:20:11,008
is multiplying by 128, by 64,
by 8 and adding them.

261
00:20:11,008 --> 00:20:19,246
These multiplications by 128, 64 and 8
is the shift in the other direction.

262
00:20:19,246 --> 00:20:19,798
So the

263
00:20:19,798 --> 00:20:24,956
value y is obtained with instructions
which are not divisions

264
00:20:24,956 --> 00:20:29,844
or multiplications that take
a lot of time on the processor but

265
00:20:29,844 --> 00:20:35,520
simple shifts in one direction and then the

266
00:20:35,520 --> 00:20:41,220
result is offset in the other direction.

267
00:20:41,220 --> 00:20:44,820
And now if we thought again,
we could say but we could remove

268
00:20:44,820 --> 00:20:48,410
3 shifts here and then compensate
by removing them here too.

269
00:20:48,410 --> 00:20:52,410
These are little tricks
that accelerate the execution.

270
00:20:52,410 --> 00:20:55,600
Let's look at another example.

271
00:20:55,600 --> 00:21:01,990
You have a medical thermometer
that works between 32 and 35 degrees.

272
00:21:01,990 --> 00:21:08,315
And the sensor gives values ​​
between 240 and 680.

273
00:21:08,315 --> 00:21:09,953
So the program is a

274
00:21:09,953 --> 00:21:12,605
little longer since we have to start

275
00:21:12,605 --> 00:21:16,304
by defining coordinates, here by subtracting

276
00:21:16,304 --> 00:21:20,880
these values ​​and
then apply the multiplication

277
00:21:20,880 --> 00:21:24,020
and division which we have just seen.

278
00:21:24,020 --> 00:21:29,604
Fortunately, Arduino provides
us with a function called

279
00:21:29,604 --> 00:21:35,127
map, which is very well documented
since we say it's map

280
00:21:35,127 --> 00:21:40,190
of a value, the value x, fromLow,

281
00:21:40,190 --> 00:21:45,920
fromHigh. So we had a scale

282
00:21:45,920 --> 00:21:50,684
which they call from,
since we want to convert

283
00:21:50,684 --> 00:21:55,570
this value x in y. So fromLow fromHigh,

284
00:21:55,570 --> 00:22:00,496
ToLow, toHigh and you get

285
00:22:00,496 --> 00:22:06,160
the value y by calling
this function. So in the

286
00:22:06,160 --> 00:22:11,980
special case, here are the numerical values
​​that correspond to my drawing.

287
00:22:11,980 --> 00:22:18,004
So much the better when we find
functions that do exactly what we

288
00:22:18,004 --> 00:22:23,924
want as long as they exist
in the environment that is used.

289
00:22:23,924 --> 00:22:25,260
This is not the C,

290
00:22:25,260 --> 00:22:27,523
it is the facilities of Arduino which

291
00:22:27,523 --> 00:22:31,220
may also exist in other compilers.

292
00:22:31,220 --> 00:22:35,760
With these few examples,
we clearly saw the difference between

293
00:22:35,760 --> 00:22:39,430
the if and the while, between
the binary and the decimal.

294
00:22:39,430 --> 00:22:45,770
It was learned that the calculations
were done in whole numbers only.

295
00:22:45,770 --> 00:22:50,500
And then with comparisons, we can verify

296
00:22:50,500 --> 00:22:57,052
the values, transform linear variables
and we will naturally see

297
00:22:57,052 --> 00:23:03,080
other solutions in the future.

