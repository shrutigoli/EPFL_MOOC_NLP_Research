1
00:00:04,285 --> 00:00:08,570
Hello;we saw the concept of
interruption with the timers.

2
00:00:08,570 --> 00:00:11,841
We will talk about it
in detail today, show

3
00:00:11,841 --> 00:00:16,606
the difference between scan, polling
and then the interruption,talking about

4
00:00:16,606 --> 00:00:20,178
vectors and routines of
interruption which are

5
00:00:20,178 --> 00:00:23,794
called by the processor and
which use the stack.

6
00:00:23,794 --> 00:00:30,578
I go back 15 years when the 16F877
microcontroller was announced.

7
00:00:30,578 --> 00:00:34,735
It was the most powerful of the time.

8
00:00:34,735 --> 00:00:40,502
Its interrupt mechanism was to
have a single interrupt, allowed,

9
00:00:40,502 --> 00:00:48,296
as we had seen, by a general interrupt
bit and before this possibility

10
00:00:48,296 --> 00:00:53,347
of interruption, there are several flags,
the timer, an external input

11
00:00:53,347 --> 00:00:57,070
and I do not remember what that
one was doing.

12
00:00:57,070 --> 00:01:02,236
And the 877, that's what we

13
00:01:02,236 --> 00:01:07,350
had in the previous generation, the 84.

14
00:01:07,350 --> 00:01:13,690
The 877 adds a lot of functionality
with timers and each

15
00:01:13,690 --> 00:01:20,720
time you have an additional timer
with its authorization bit.

16
00:01:20,720 --> 00:01:22,421
From the internal point of view,

17
00:01:22,421 --> 00:01:28,185
the architecture was very simple,
you had an address counter,

18
00:01:28,185 --> 00:01:32,725
you had program memory with

19
00:01:32,725 --> 00:01:37,115
The start-up program for
the main program and

20
00:01:37,115 --> 00:01:42,320
a start position for the main program and
a start position for interrupts at address 4.

21
00:01:42,320 --> 00:01:47,589
So,at the beginning of the
program, you had to put a

22
00:01:47,589 --> 00:01:51,314
jump instruction in the
execution part and then

23
00:01:51,314 --> 00:01:55,190
the interrupt routine could run from 4.

24
00:01:55,190 --> 00:02:00,715
When there was interruption or
when there was a routine that was

25
00:02:00,715 --> 00:02:05,990
called, well, the stack offered the
possibility of some access to nest.

26
00:02:05,990 --> 00:02:13,320
Well,the improvement is
to say: it's still annoying

27
00:02:13,320 --> 00:02:19,900
when we have an interruption, to
sweep all these flags, it's polling,

28
00:02:19,900 --> 00:02:25,720
as they say in english, to know
which created the interruption .

29
00:02:25,720 --> 00:02:31,143
Of course we, with the enable, we
activated only the fl, the few

30
00:02:31,143 --> 00:02:35,146
interruptions that will be used
in the application but

31
00:02:35,146 --> 00:02:39,015
the obvious improvement for
the next generation

32
00:02:39,015 --> 00:02:44,060
was to say: if we are interested
in this interruption , It would

33
00:02:44,060 --> 00:02:49,600
be nice that it go directly
to call a vector,

34
00:02:49,600 --> 00:02:54,130
if it is naturally allowed, call

35
00:02:54,130 --> 00:02:59,404
a vector in the processor,
go directly to a different

36
00:02:59,404 --> 00:03:04,380
address.And here, the term

37
00:03:04,380 --> 00:03:11,088
vector is used but it is a jump
address and as seen in

38
00:03:11,088 --> 00:03:16,046
this example for a processor a little
bit more recent but it is actually a simpler AVR

39
00:03:16,046 --> 00:03:19,320
Simpler than Arduino cards, you can

40
00:03:19,320 --> 00:03:22,272
than that of Arduino cards, You have a
number of vectors that are

41
00:03:22,272 --> 00:03:25,488
prepared in memory: you have the reset,

42
00:03:25,488 --> 00:03:29,280
you have the timer overflow,
that we have already seen,

43
00:03:29,280 --> 00:03:32,721
and ah, this list extends from year to

44
00:03:32,721 --> 00:03:36,930
year depending on the
complexity of the processors.

45
00:03:36,930 --> 00:03:40,920
So there are different
categories of interruptions.

46
00:03:40,920 --> 00:03:44,241
You can have an external
pin that requires

47
00:03:44,241 --> 00:03:49,337
an interruption, this is called
the external interrupt.

48
00:03:49,337 --> 00:03:54,454
You have the PIN change, I
talk about it later, you have

49
00:03:54,454 --> 00:03:59,132
the timer, we know, you
have the A / D converter,

50
00:03:59,132 --> 00:04:03,960
we talked about it but I did not
say it could trigger An interruption.

51
00:04:03,960 --> 00:04:09,704
In general, with the analogRead
routine, we wait until

52
00:04:09,704 --> 00:04:15,020
it is finished, it is the
analogRead function

53
00:04:15,020 --> 00:04:19,889
that waits on the flag to
know when the conversion

54
00:04:19,889 --> 00:04:21,180
is finished.

55
00:04:21,180 --> 00:04:24,370
So of course we could do something
else during this time

56
00:04:24,370 --> 00:04:27,140
and have an interruption
when the flag is activated.

57
00:04:27,140 --> 00:04:29,930
There is usually an analog channel

58
00:04:29,930 --> 00:04:34,520
that measures the temperature
inside the processor.

59
00:04:34,520 --> 00:04:39,450
So what we could program
there is that above a

60
00:04:39,450 --> 00:04:44,908
certain temperature, and well there is
an interruption and you trigger an

61
00:04:44,908 --> 00:04:48,384
action ah, special blinking for example.

62
00:04:48,384 --> 00:04:51,662
You naturally have interruptions
associated with

63
00:04:51,662 --> 00:04:54,910
the possibilities of communication,
we will talk about it again.

64
00:04:54,910 --> 00:04:58,060
You have the watchdog.

65
00:04:58,060 --> 00:04:59,908
What is it?

66
00:04:59,908 --> 00:05:02,744
Well, the dog will scream if you

67
00:05:02,744 --> 00:05:05,432
do not bother to feed him in time.

68
00:05:05,432 --> 00:05:10,356
In other words, you have a
counter that decreases

69
00:05:10,356 --> 00:05:18,750
to 0 and when it arrives at 0, it
creates this interrupt uh, watchdog.

70
00:05:18,750 --> 00:05:25,086
And what you have to do in the
program is to put in this

71
00:05:25,086 --> 00:05:33,270
watchdog register a value large
enough to have time to reactivate it.

72
00:05:33,270 --> 00:05:35,349
So it can be used,

73
00:05:35,349 --> 00:05:40,780
for example, in a weather
station where suddenly

74
00:05:40,780 --> 00:05:46,134
a lightning disruption, for example,
can derail the processor, it is

75
00:05:46,134 --> 00:05:50,102
unlikely that it will fall back into
the Main program, which reactivates

76
00:05:50,102 --> 00:05:52,680
this watchdog every minute, for example,

77
00:05:52,680 --> 00:05:55,930
you check that the operation is correct.

78
00:05:55,930 --> 00:06:00,569
If the function is no longer correct,
ben, after a minute, there will be a

79
00:06:00,569 --> 00:06:06,070
reset action triggered by
this watchdog routine.

80
00:06:06,070 --> 00:06:09,535
You have exceptions, it becomes
a little more complicated

81
00:06:09,535 --> 00:06:11,930
but there is one that is
easy to understand.

82
00:06:11,930 --> 00:06:14,810
In a division, you do not
have the right to

83
00:06:14,810 --> 00:06:17,370
divide by 0, if you make this

84
00:06:17,370 --> 00:06:21,094
program error, well, a modern
processor will call an

85
00:06:21,094 --> 00:06:25,803
exception routine that will get you out
of the arithmetic calculations

86
00:06:25,803 --> 00:06:30,107
in which you No hope of
obtaining a valid answer.

87
00:06:30,107 --> 00:06:34,850
There may be detections
of internal malfunction.

88
00:06:34,850 --> 00:06:39,995
You finally have the "no
maskable interrupt"

89
00:06:39,995 --> 00:06:45,140
and ben, it just means that it does not
have the door and that allows to disable.

90
00:06:45,140 --> 00:06:47,686
So it is often, finally in old

91
00:06:47,686 --> 00:06:51,093
processors, associated with
a pin that allowed

92
00:06:51,093 --> 00:06:55,715
to recover the processor
and no longer exists

93
00:06:55,715 --> 00:07:00,210
on the recent processors that I have seen.

94
00:07:00,210 --> 00:07:05,510
And you have as a last resort,
the reset, which obviously

95
00:07:05,510 --> 00:07:10,584
is not really one, an interrupt vector,

96
00:07:10,584 --> 00:07:15,585
it is the start of the processor that is
done in position 0 for some processors,

97
00:07:15,585 --> 00:07:18,570
possibly it can be at the
top of the memory.

98
00:07:18,570 --> 00:07:22,962
I mention this sleep, which in
fact is not an interruption,

99
00:07:22,962 --> 00:07:26,168
it is a possibility of programming that we

100
00:07:26,168 --> 00:07:30,288
will see again, which in fact,
puts the processor down.

101
00:07:30,288 --> 00:07:35,728
Sleeping, well it means that we
will deactivate as much as possible

102
00:07:35,728 --> 00:07:40,682
Of its functions, keep a clock
that only monitors

103
00:07:40,682 --> 00:07:44,756
the interrupts and, as soon as
there is an interruption, and well

104
00:07:44,756 --> 00:07:48,760
the processor will wake up
to serve this interruption.

105
00:07:48,760 --> 00:07:54,270
So it is a way to save a lot of energy
because instead the processor

106
00:07:54,270 --> 00:08:00,160
runs in a loop at maximum speed
and waste the same energy

107
00:08:00,160 --> 00:08:05,690
as usual, well we sleep it and
wakes up as soon as

108
00:08:05,690 --> 00:08:11,390
there is internal or external
stress.If I look

109
00:08:11,390 --> 00:08:16,210
Now a little bit the organization
in memory of this processor.

110
00:08:16,210 --> 00:08:18,494
So we have seen that there
is a whole series of

111
00:08:18,494 --> 00:08:23,555
vectors that will be at the beginning
of the flash memory.

112
00:08:23,555 --> 00:08:29,440
Then, ben, you will have the program,
you will have the functions.

113
00:08:29,440 --> 00:08:30,870
You remark

114
00:08:30,870 --> 00:08:34,280
that the end of the memory
is a reserved part,

115
00:08:34,280 --> 00:08:38,694
in the background, for the
boot program,

116
00:08:38,694 --> 00:08:42,535
it is a relatively complicated program
that monitors USB and that

117
00:08:42,535 --> 00:08:47,580
will allow you, via USB, to
come fill this program.

118
00:08:47,580 --> 00:08:51,668
So;it's protected area since naturally

119
00:08:51,668 --> 00:08:56,076
you should not declaring your program,

120
00:08:56,076 --> 00:08:59,040
Intervene in this area.

121
00:08:59,040 --> 00:09:03,168
well,on the side of RAM,so  we saw that

122
00:09:03,168 --> 00:09:08,165
it was one,a width of 16 bits;
all instructions are 16bits.

123
00:09:08,165 --> 00:09:11,980
In 8 bits processors,well,we
take two consecutive words.

124
00:09:11,980 --> 00:09:15,599
There,it's a 8 bits processor
because the data

125
00:09:15,599 --> 00:09:19,490
memory,is 8bits,the arithmetic
unit is 8bits.

126
00:09:19,490 --> 00:09:21,466
and you find

127
00:09:21,466 --> 00:09:26,803
work registrer in which
uh,the calculation will be done,

128
00:09:26,803 --> 00:09:31,390
all the important transfers will be made.

129
00:09:31,390 --> 00:09:35,035
When we need more of informations and

130
00:09:35,035 --> 00:09:38,615
we will find in the RAM and it's lowe,

131
00:09:38,615 --> 00:09:42,580
transfers lose timme so we try to manage

132
00:09:42,580 --> 00:09:46,756
It is the work complier ,to manage
at better these registers

133
00:09:46,756 --> 00:09:52,535
for that the execution be fast and to
prepare at time of the compilation

134
00:09:52,535 --> 00:09:58,610
so that the good iformation
is pur in RAM or the registers.

135
00:09:58,610 --> 00:10:02,870
You have here the input-output
registers,the timers

136
00:10:02,870 --> 00:10:06,580
the edges,and etc...,64 positions
are reserved for that.

137
00:10:06,580 --> 00:10:11,974
And in addition,we talked about it,
you have this memory ,e square

138
00:10:11,974 --> 00:10:17,210
PROM,up to the address a FF.So 100 is 256

139
00:10:17,210 --> 00:10:23,604
You have,here 512,positions
memory of the PROMs

140
00:10:23,604 --> 00:10:30,110
Then, let us return, to specify,
these external interrupts.

141
00:10:30,110 --> 00:10:33,035
so,you have ,in the case the processors

142
00:10:33,035 --> 00:10:37,802
found on Arduino,two pins
which can trigger

143
00:10:37,802 --> 00:10:39,590
an interruption.

144
00:10:39,590 --> 00:10:46,880
And then,you have the
int zero vector which be called,

145
00:10:46,880 --> 00:10:52,470
if you have enabled both pins,int one,if
you have actived the other of two pins.

146
00:10:52,470 --> 00:10:55,242
And now,obviously,then we will leave

147
00:10:55,242 --> 00:10:57,790
the choice to the user to say,is it

148
00:10:57,790 --> 00:11:00,030
That it is a rising flank,a falling flank,

149
00:11:00,030 --> 00:11:05,308
a change that will activate
the intrruption?

150
00:11:05,308 --> 00:11:11,686
So this information, you
find it in a register,

151
00:11:11,686 --> 00:11:17,560
and there I copied some small parts
of the manufacturer's documentation.

152
00:11:17,560 --> 00:11:25,028
And you are told, these two bits allow
you to have the following choice.

153
00:11:25,028 --> 00:11:30,340
If it's zero-zero configuration,
well, it's a

154
00:11:30,340 --> 00:11:36,275
low level, it's one, a zero state,
you might have trouble reading.

155
00:11:36,275 --> 00:11:42,144
If it's zero one, it's a change,
any logical change.

156
00:11:42,144 --> 00:11:46,550
If it is a zero, it is a descending flank.

157
00:11:46,550 --> 00:11:51,280
If it's zero, uh, one, it's
a rising flank.

158
00:11:51,280 --> 00:11:55,755
So you choose when your interrupt
is going to be triggered

159
00:11:55,755 --> 00:12:00,460
by saying, well, in this
register EICR, well,

160
00:12:00,460 --> 00:12:05,682
we will activate, for example,
falling edge by

161
00:12:05,682 --> 00:12:10,940
taking this bit that will be activated

162
00:12:10,940 --> 00:12:15,980
in this configuration mode.
Now, in addition

163
00:12:15,980 --> 00:12:20,840
you have to know that the
interruption flag

164
00:12:20,840 --> 00:12:25,680
will be in that register, at that
position.In fact,

165
00:12:25,680 --> 00:12:30,695
the interrupt vector will make it easier
for us, but what is very

166
00:12:30,695 --> 00:12:35,620
important is to enable
this interrupt with

167
00:12:35,620 --> 00:12:40,770
an enable interrupt. So this,
in this interrupt

168
00:12:40,770 --> 00:12:45,920
Enable mask, we will activate the int one.

169
00:12:45,920 --> 00:12:49,420
And that, it was done, it is to
do in the setup.

170
00:12:49,420 --> 00:12:54,268
Then, once one has activated all,
prepared all the interruptions, one will

171
00:12:54,268 --> 00:12:59,640
be able to make the set
interrupt enable SEI,

172
00:12:59,640 --> 00:13:05,044
and the program, from now on,
will be sensitive to these

173
00:13:05,044 --> 00:13:11,214
interruptions.So, at the level
of the functions that

174
00:13:11,214 --> 00:13:15,910
must be defined to this, to
this interrupt, well,

175
00:13:15,910 --> 00:13:21,500
Compiler,in conjunction
with the processor,

176
00:13:21,500 --> 00:13:26,680
allows you to write ISR, interrupt
service routine,

177
00:13:26,680 --> 00:13:31,870
and the int name an vect
will be recognized

178
00:13:31,870 --> 00:13:36,710
to go to execute what needs to be executed

179
00:13:36,710 --> 00:13:40,860
when this interrupt is enabled.

180
00:13:40,860 --> 00:13:45,768
So, I decided simply to flash a led.

181
00:13:45,768 --> 00:13:49,620
So this is all the content of this
interruption procedure.

182
00:13:49,620 --> 00:13:54,165
Initialize the registers,
ask the processor

183
00:13:54,165 --> 00:13:56,733
to go to the correct address,

184
00:13:56,733 --> 00:14:01,970
in the right interrupt vector, and
do what you have to do with some

185
00:14:01,970 --> 00:14:03,870
small rules that will be seen if you try

186
00:14:03,870 --> 00:14:06,240
to do something of a little bit
more complicated.

187
00:14:06,240 --> 00:14:12,120
So, Arduino tells you, oh la, it's
too complicated for you.

188
00:14:12,120 --> 00:14:17,178
We will provide you with an
attachInterrupt. We will

189
00:14:17,178 --> 00:14:22,476
provide an attachInterrupt library,
and once you have

190
00:14:22,476 --> 00:14:27,530
set the pin mode, you write
attachInterrupt,

191
00:14:27,530 --> 00:14:32,366
you write the pin number, but

192
00:14:32,366 --> 00:14:36,570
in some cases it is the zero number
one of those interrupts.

193
00:14:36,570 --> 00:14:42,855
You give the name of the procedure that
you have to run, and you say with

194
00:14:42,855 --> 00:14:46,310
keywords that you find in a certain place,

195
00:14:46,310 --> 00:14:50,660
if it's low, if it's changed, and cetera.

196
00:14:50,660 --> 00:14:52,715
And then,

197
00:14:52,715 --> 00:14:57,966
in your program, in the part
of the functions,

198
00:14:57,966 --> 00:15:02,549
It will be necessary to define the
function to do something, which

199
00:15:02,549 --> 00:15:07,532
here was simply flashing, and that is how

200
00:15:07,532 --> 00:15:12,370
it fits in the Arduino mind
where the response to

201
00:15:12,370 --> 00:15:17,810
the interruption will naturally
be much slower, since each

202
00:15:17,810 --> 00:15:21,950
time it is the procedures who
test and who declare.

203
00:15:21,950 --> 00:15:28,050
So, it's up to you. And now let's
talk about the pine change.

204
00:15:28,050 --> 00:15:32,562
Then, the pine change acts on
several bits at a time.

205
00:15:32,562 --> 00:15:38,256
It acts, in fact, on a port to know
if there has been a change.

206
00:15:38,256 --> 00:15:42,990
The typical application is a swept
keyboard where in fact,

207
00:15:42,990 --> 00:15:45,090
since you have too many keys,

208
00:15:45,090 --> 00:15:48,460
you can not connect them
directly to the processor.

209
00:15:48,460 --> 00:15:55,640
We make a network where we will
select a row of keys, and the keys that

210
00:15:55,640 --> 00:15:57,944
are pressed, so, we will put a zero

211
00:15:57,944 --> 00:16:00,900
in the particular case, since
we have amp poles.

212
00:16:00,900 --> 00:16:04,660
The keys that are pressed
will go to zero.

213
00:16:04,660 --> 00:16:08,430
Then, each of these keys

214
00:16:08,430 --> 00:16:13,720
will be, read. There I drew only one.

215
00:16:13,720 --> 00:16:18,123
But that means that I was interested in

216
00:16:18,123 --> 00:16:23,689
this, this pine,

217
00:16:23,689 --> 00:16:28,584
here. And then, to say that
I am interested in

218
00:16:28,584 --> 00:16:34,025
this pine, I must act on a mask
that will activate,

219
00:16:34,025 --> 00:16:40,356
here, the AND gate so that the
following logic is attentive to what happens

220
00:16:40,356 --> 00:16:44,196
on this pine, so that c Is always

221
00:16:44,196 --> 00:16:48,740
this general principle that one
finds with the authorizations.

222
00:16:48,740 --> 00:16:51,420
So, what 's happen now?

223
00:16:51,420 --> 00:16:53,832
You have not pressed this key.

224
00:16:53,832 --> 00:16:57,312
So you have one. This one
goes into a shift register.

225
00:16:57,312 --> 00:16:59,132
You remember, they continue in

226
00:16:59,132 --> 00:17:02,048
the shift register, since they are clearly

227
00:17:02,048 --> 00:17:04,860
connected as a result of one iii.

228
00:17:04,860 --> 00:17:10,900
There you have, an exclusive OR
gate, one and one, that means zero.

229
00:17:10,900 --> 00:17:16,203
Now you press the key,
there, what's going on?

230
00:17:16,203 --> 00:17:19,013
You will see a zero, here, first, that

231
00:17:19,013 --> 00:17:23,140
will go through the door,
since you have allowed.

232
00:17:23,140 --> 00:17:24,460
This zero will be

233
00:17:24,460 --> 00:17:29,576
copied into the first flip-flop,
and be careful, there,

234
00:17:29,576 --> 00:17:35,390
Now there is always one,
here. I have a zero, there.

235
00:17:35,390 --> 00:17:39,440
So the exclusive OR gate will go to one.

236
00:17:39,440 --> 00:17:45,180
Therefore, the PCF flag  pin changes

237
00:17:45,180 --> 00:17:50,220
and i flag is enabled. If it was allowed

238
00:17:50,220 --> 00:17:55,928
with an interrupt enable, if the
interrupts are active, you are gone

239
00:17:55,928 --> 00:18:02,020
in the routine that will tell you that
you have activated  this key.

240
00:18:02,020 --> 00:18:07,152
And given that you are being offered
the opportunity to make a pine change,

241
00:18:07,152 --> 00:18:11,202
well, you will also have an interruption when it's

242
00:18:11,202 --> 00:18:15,382
released, and we will not talk
about the swept keyboards,

243
00:18:15,382 --> 00:18:19,619
but if you study them, You will learn

244
00:18:19,619 --> 00:18:22,171
that it may be prudent to
put diodes at each

245
00:18:22,171 --> 00:18:25,075
intersection to avoid what are
called the ghost keys,

246
00:18:25,075 --> 00:18:28,510
keys that appear, while they
have not been solicited.

247
00:18:28,510 --> 00:18:34,607
So here we have been able to make
a small revision of the logical system here, and it's

248
00:18:34,607 --> 00:18:37,553
multiplied on, and well, in the, in the

249
00:18:37,553 --> 00:18:40,770
Arduino processors, you have,
if I'm not mistaken, about twenty

250
00:18:40,770 --> 00:18:46,108
times, this logic, and you can

251
00:18:46,108 --> 00:18:51,462
distribute your actions,
keyboard on the pins that

252
00:18:51,462 --> 00:18:55,423
you arrange, but then I don't say

253
00:18:55,423 --> 00:19:00,176
it's trivial to find the
routine that works well.

254
00:19:00,176 --> 00:19:02,510
Well, I come back to my timer.

255
00:19:02,510 --> 00:19:05,898
We had seen that he could
create an interruption.

256
00:19:05,898 --> 00:19:08,955
So the RJs were initialized.
I will not repeat.

257
00:19:08,955 --> 00:19:14,216
The goal now is to see a
little more detail, a

258
00:19:14,216 --> 00:19:20,180
routine that seems very, very useful
for many, many applications.

259
00:19:20,180 --> 00:19:26,450
Then you have initialized your
timers with its clock,

260
00:19:26,450 --> 00:19:31,769
with its mask, and you have
launched the interrupts.

261
00:19:31,769 --> 00:19:37,470
So when you get every 100 microseconds,

262
00:19:37,470 --> 00:19:42,354
an interrupt that takes you here in timer

263
00:19:42,354 --> 00:19:47,412
2 overflow, the flag is
automatically reset.

264
00:19:47,412 --> 00:19:52,330
This is the general procedure,
with, ah, with AVR.

265
00:19:52,330 --> 00:19:56,623
You reset your timer to have a new auto,

266
00:19:56,623 --> 00:19:59,650
interrupt in 100 microseconds.

267
00:19:59,650 --> 00:20:03,638
And now you are gone to do

268
00:20:03,638 --> 00:20:07,190
what you want, and the example
that I explain a little

269
00:20:07,190 --> 00:20:10,600
bit more in detail, because
it understands, it fits

270
00:20:10,600 --> 00:20:13,420
better, to something I do frequently.

271
00:20:13,420 --> 00:20:17,770
Every 100 microseconds, you want to manage

272
00:20:17,770 --> 00:20:21,970
an encoder, rotation encoder,
we will talk about it soon.

273
00:20:21,970 --> 00:20:26,535
Every 100 microseconds, it is necessary
to manage stepper motors,

274
00:20:26,535 --> 00:20:30,644
because the transitions, for the steps,
must be precise enough.

275
00:20:30,644 --> 00:20:33,270
We also talk about stepper motors soon.

276
00:20:33,270 --> 00:20:37,920
And now we do not need to
do things that often.

277
00:20:37,920 --> 00:20:43,070
So, we start up, we monitor
a counter by 40,

278
00:20:43,070 --> 00:20:47,000
which every 40 times begins
again,and that means

279
00:20:47,000 --> 00:20:53,350
we will continue, we will run,
every four milliseconds,

280
00:20:53,350 --> 00:20:58,994
uh, this function which is Pfm, Uh, that's

281
00:20:58,994 --> 00:21:04,890
my favorite, to replace the PVM. It will
also be discussed in detail.

282
00:21:04,890 --> 00:21:08,490
And now I'd still like to do something

283
00:21:08,490 --> 00:21:12,585
every second, and have
to refresh the memory

284
00:21:12,585 --> 00:21:15,030
about the, watchdog.

285
00:21:15,030 --> 00:21:20,744
You start an operation, you
expect a key from a keyboard.

286
00:21:20,744 --> 00:21:25,950
Well, if that key does not come,you
have to stop waiting at some point.

287
00:21:25,950 --> 00:21:28,597
So, that's what we call, the concept of

288
00:21:28,597 --> 00:21:31,780
the timeout, the foreclosure,
should we say in French.

289
00:21:31,780 --> 00:21:38,124
And then, I realize a timeout function
that could be programmed

290
00:21:38,124 --> 00:21:43,690
according to the needs. So,
every second, that's with

291
00:21:43,690 --> 00:21:49,640
this little counter that will count
250 times four milliseconds.

292
00:21:49,640 --> 00:21:53,560
I count down a timeout, and if this

293
00:21:53,560 --> 00:21:57,950
counter arrive at zero, I
have to do Something.

294
00:21:57,950 --> 00:22:00,200
And then, this something, it will be

295
00:22:00,200 --> 00:22:03,425
a procedure that I will define, called

296
00:22:03,425 --> 00:22:04,550
alarm time out.

297
00:22:04,550 --> 00:22:08,918
And now, I have to do
something, since here

298
00:22:08,918 --> 00:22:12,150
I have, I will constantly go through.

299
00:22:12,150 --> 00:22:17,538
So, we should avoid that,
the timeout counter

300
00:22:17,538 --> 00:22:21,610
remains at zero, if not, I decided.

301
00:22:21,610 --> 00:22:24,592
Therefore, it is in the main
program that we

302
00:22:24,592 --> 00:22:27,342
will define a value greater than zero.

303
00:22:27,342 --> 00:22:28,890
And now that we

304
00:22:28,890 --> 00:22:33,640
have arrived at zero, we must remain calm.

305
00:22:33,640 --> 00:22:36,896
So there, a solution is to reincrement the

306
00:22:36,896 --> 00:22:42,550
timer, so we will be different from zero.

307
00:22:42,550 --> 00:22:44,534
So what we have seen today

308
00:22:44,534 --> 00:22:47,670
is the difference between
polling and interruption.

309
00:22:47,670 --> 00:22:51,660
It is the power of these
interrupt vectors that

310
00:22:51,660 --> 00:22:54,260
forces us to understand
a little bit, the structure

311
00:22:54,260 --> 00:22:57,355
of the processor, if we want
to work directly with

312
00:22:57,355 --> 00:23:00,715
this interrupt initiation
which is very efficient.

313
00:23:00,715 --> 00:23:04,635
And I see that we have not talked much
about the stack which, is in fact, just

314
00:23:04,635 --> 00:23:10,890
slightly larger than in the case of
calls of procedures usual functions,

315
00:23:10,890 --> 00:23:18,160
since it is necessary to save a little
more of the state of the processor.

