1
00:00:00,000 --> 00:00:05,184
We continue the course "Understanding

2
00:00:05,184 --> 00:00:12,640
microcontrollers".  When we talked
about a logical system, we saw

3
00:00:12,640 --> 00:00:14,903
that we used 1 and 0, and

4
00:00:14,903 --> 00:00:18,710
we felt that we were using the
famous binary system.

5
00:00:18,710 --> 00:00:21,560
It's time to talk about it
a little more seriously.

6
00:00:21,560 --> 00:00:25,028
We'll look at how the

7
00:00:25,028 --> 00:00:26,360
binary numbering system works.

8
00:00:26,360 --> 00:00:28,811
We will also see how we can represent

9
00:00:28,811 --> 00:00:31,430
binary numbers in registers,

10
00:00:31,430 --> 00:00:34,270
in objects of limited size,
in a limited number

11
00:00:34,270 --> 00:00:37,418
of bits, we will also see
how to represent

12
00:00:37,418 --> 00:00:40,260
positive and negative numbers,
so signed numbers,

13
00:00:40,260 --> 00:00:43,053
finally we will again talk a little
about hexadecimal, which

14
00:00:43,053 --> 00:00:45,930
is much used in the world
of microcontrollers,

15
00:00:45,930 --> 00:00:49,350
of BCD, and also of character encoding.

16
00:00:49,350 --> 00:00:50,340
Everybody  knows

17
00:00:50,340 --> 00:00:53,835
the system of binary numbering,
I will not talk about it in great

18
00:00:53,835 --> 00:00:58,320
detail, we remember that we have two

19
00:00:58,320 --> 00:01:01,050
numbers available, when we put them

20
00:01:01,050 --> 00:01:06,530
both we are obliged to introduce an
additional rank for the number 10 which

21
00:01:06,530 --> 00:01:15,421
corresponds to the 2 of the decimal world,
we then move to 11, then we need a

22
00:01:15,421 --> 00:01:20,770
third rank here, to express
100, that is to say

23
00:01:20,770 --> 00:01:25,992
the number 4, and so on.It may
be noted that each column

24
00:01:25,992 --> 00:01:30,782
represents a weight, in this case the
weight 1, expressed as a decimal, the

25
00:01:30,782 --> 00:01:35,596
weight 2, weight 4, weight 8,
which correspond to

26
00:01:35,596 --> 00:01:40,550
2 to the power 0, 2 to
the power 1, 2 to the

27
00:01:40,550 --> 00:01:43,900
power 2, and so on.

28
00:01:43,900 --> 00:01:49,788
When it is desired to pass from the
binary to the decimal, it is relatively simple,

29
00:01:49,788 --> 00:01:56,160
it is enough to add the weights, so here
we will say that we have zero times the weight 1,

30
00:01:56,160 --> 00:02:02,010
that we have once the weight 2,
We have zero times the weight 4,

31
00:02:02,010 --> 00:02:05,810
we have once the weight 8,
the result gives us 8 plus 2,

32
00:02:05,810 --> 00:02:12,050
that is to say 10 in decimal. The
binary system is very easy.

33
00:02:12,050 --> 00:02:15,350
The problem that arises is that
in the binary system of

34
00:02:15,350 --> 00:02:19,110
numbers we can have numbers
as large as we wish.

35
00:02:19,110 --> 00:02:22,342
In reality, we are going to
have binary objects

36
00:02:22,342 --> 00:02:27,100
of limited size, and that is where
problems begin to arise.

37
00:02:27,100 --> 00:02:30,913
We have seen that a flip-flop
can store a binary value,

38
00:02:30,913 --> 00:02:36,173
a bit, we speak of register when
we are in front of a set of

39
00:02:36,173 --> 00:02:42,068
several flip-flops, a register contains
a binary word, note that I did

40
00:02:42,068 --> 00:02:47,380
not write a binary number,
this binary word may have

41
00:02:47,380 --> 00:02:51,206
any a priori meaning, and
in certain situations,

42
00:02:51,206 --> 00:02:54,310
that binary word will represent a number.

43
00:02:54,310 --> 00:02:56,060
Let us try to see a little more clearly.

44
00:02:56,060 --> 00:03:01,514
We often give a number to each
bit, here I have presented

45
00:03:01,514 --> 00:03:07,046
a byte, an 8-bit word, we give
numbers starting with zero,

46
00:03:07,046 --> 00:03:10,821
computer scientists are always
used to starting

47
00:03:10,821 --> 00:03:12,927
with zero, we end here at the bit

48
00:03:12,927 --> 00:03:20,177
7, let's take a concrete example: we have
a binary value placed in a register.

49
00:03:20,177 --> 00:03:21,203
The only thing that

50
00:03:21,203 --> 00:03:24,836
can be said is that this
bit is at 1, this bit

51
00:03:24,836 --> 00:03:29,580
is at 1, and the other bits are at zero.

52
00:03:29,580 --> 00:03:32,226
There is no question of numbers
at the moment.

53
00:03:32,226 --> 00:03:35,156
Moreover,we will have the
opportunity to see in

54
00:03:35,156 --> 00:03:37,844
a device that we will use very often in

55
00:03:37,844 --> 00:03:41,798
this course "Understanding
microcontrollers" that at this point of

56
00:03:41,798 --> 00:03:46,130
a certain register, will be
a red led connected,

57
00:03:46,130 --> 00:03:49,580
that at this point will connect
a green led, so we

58
00:03:49,580 --> 00:03:52,880
can say that with this binary
word in the register in

59
00:03:52,880 --> 00:03:56,088
question, we will turn on
the red lamp and we will

60
00:03:56,088 --> 00:04:00,100
turn off the green lamp, we
can say nothing else.

61
00:04:00,100 --> 00:04:05,968
On the other hand, if this word is
considered as a binary number, then we

62
00:04:05,968 --> 00:04:11,338
can do what we did just now,
calculate its value in decimal, here

63
00:04:11,338 --> 00:04:17,378
once, zero times 2, times 4, times 8,

64
00:04:17,378 --> 00:04:23,028
times 16, once 32, that
gives us the result 33.

65
00:04:23,028 --> 00:04:27,580
The question is that this binary
word that represents

66
00:04:27,580 --> 00:04:32,670
a binary number, is it
possible to work with it?

67
00:04:32,670 --> 00:04:36,465
And in fact this is the whole problem of
modular arithmetic that we will try

68
00:04:36,465 --> 00:04:37,860
to touch now.

69
00:04:37,860 --> 00:04:41,996
To simplify an example, which is not

70
00:04:41,996 --> 00:04:45,240
widely used, but the 3-bit words.

71
00:04:45,240 --> 00:04:50,980
Each 3-bit word can represent
8 different numbers.

72
00:04:50,980 --> 00:04:53,810
It is indeed the value
of 2 to the power 3.

73
00:04:53,810 --> 00:04:57,674
we can , for example decide to
represent the positive numbers

74
00:04:57,674 --> 00:05:01,550
ranging from zero to 7, that
is to say from zero to

75
00:05:01,550 --> 00:05:06,780
2 to the power 3 minus 1.Can the addition,

76
00:05:06,780 --> 00:05:11,013
which is used in arithmetic ,
work? Let's take

77
00:05:11,013 --> 00:05:16,640
an example: 10 plus 1.

78
00:05:16,640 --> 00:05:21,632
Since these are 3-bit numbers,
I should clearly write

79
00:05:21,632 --> 00:05:26,830
the values of the other two bits here.
I will do the calculation, zero plus

80
00:05:26,830 --> 00:05:30,975
1 gives me 1, 1 plus zero, gives me

81
00:05:30,975 --> 00:05:35,632
1, zero  plus zero gives me zero,
the number written in

82
00:05:35,632 --> 00:05:40,816
binary, here it was the value
2, here it was

83
00:05:40,816 --> 00:05:45,280
value 1,the result is 3, everything
seems perfectly correct.

84
00:05:45,280 --> 00:05:47,824
Let us take a second example.

85
00:05:47,824 --> 00:05:53,590
The value 3 will be added to the value 3.

86
00:05:53,590 --> 00:05:58,846
The total will be: 1 plus 1,

87
00:05:58,846 --> 00:06:04,396
it gives me zero, I have a hold of 1.
1 plus 1 plus 1, it will

88
00:06:04,396 --> 00:06:10,020
give me 1, with a hold of 1,
and here I have a 1.

89
00:06:10,020 --> 00:06:13,980
And I keep the values in binary,
I had the number

90
00:06:13,980 --> 00:06:18,586
3, I had the number 3, here I have
the value zero times 1,

91
00:06:18,586 --> 00:06:23,611
plus one times 2, plus a 4 times,
so it is equal to

92
00:06:23,611 --> 00:06:28,926
the value 6 is therefore quite
correct. Let's take a last

93
00:06:28,926 --> 00:06:34,759
example, the value 6 to
which I add the value

94
00:06:34,759 --> 00:06:39,830
3. And in total I get:

95
00:06:39,830 --> 00:06:44,150
zero plus 1 gives me one,
1 plus 1 gives me

96
00:06:44,150 --> 00:06:48,798
zero, I retain 1, 1 plus 1
gives me zero, and

97
00:06:48,798 --> 00:06:53,955
I still have a hold. There is actually

98
00:06:53,955 --> 00:06:59,380
a problem. I had here the number 6,

99
00:06:59,380 --> 00:07:04,670
I had here the number 3, and
my result is equal to 1.

100
00:07:04,670 --> 00:07:05,640
Why?

101
00:07:05,640 --> 00:07:09,580
Because in reality I lost
the 1 which should

102
00:07:09,580 --> 00:07:13,100
be there, since, I remind you,

103
00:07:13,100 --> 00:07:16,605
we decided to work 3-bit words.

104
00:07:16,605 --> 00:07:21,580
We have come to what we
call capacity overruns.

105
00:07:21,580 --> 00:07:24,590
Thus, as we have seen, an
overflow is obtained,

106
00:07:24,590 --> 00:07:27,650
the result is in fact deprived of the bit

107
00:07:27,650 --> 00:07:31,004
of weight 8 which does not
exist on a notation of

108
00:07:31,004 --> 00:07:35,024
three bits, and in fact, arithmetically,

109
00:07:35,024 --> 00:07:40,781
the result is really 6 plus 3, modulo 8,
I remind you that the modulo

110
00:07:40,781 --> 00:07:46,500
is the rest of the whole division, a very
important arithmetic operation.

111
00:07:46,500 --> 00:07:51,150
Let's try to better understand these
positive modular numbers.

112
00:07:51,150 --> 00:07:55,380
And there are two representations that
will help us to better understand them,

113
00:07:55,380 --> 00:07:59,610
,on the one hand , and on the other hand
this function that we will see here.

114
00:07:59,610 --> 00:08:03,543
What is happening?

115
00:08:03,543 --> 00:08:11,275
When I start from zero, incrementing,
adding 1, will change to 1, 2, 3,

116
00:08:11,275 --> 00:08:14,011
4, 5, 6, 7, with

117
00:08:14,011 --> 00:08:18,010
the corresponding binary values
that you could read right here.

118
00:08:18,010 --> 00:08:21,413
When I add 1 to 7, I fall back to zero,

119
00:08:21,413 --> 00:08:25,695
so this notation in a circle
seems quite coherent.

120
00:08:25,695 --> 00:08:27,865
But what happened?

121
00:08:27,865 --> 00:08:30,735
I actually had a capacity overrun.

122
00:08:30,735 --> 00:08:34,445
This boundary, which corresponds
to the excess of

123
00:08:34,445 --> 00:08:38,918
capacity, corresponds to what might
be called a calculation error.

124
00:08:38,918 --> 00:08:41,720
This is a fairly modulo
calculation, but it is

125
00:08:41,720 --> 00:08:44,450
not a just calculation in the
usual sense of the term.

126
00:08:44,450 --> 00:08:47,497
In this representation, we will represent the

127
00:08:47,497 --> 00:08:51,140
numbers on a straight line,
which is obviously infinite.

128
00:08:51,140 --> 00:08:56,100
On the other hand, the corresponding
function can take only the eight values

129
00:08:56,100 --> 00:09:01,250
that can be expressed with 3 bits,
and again we have this phenomenon

130
00:09:01,250 --> 00:09:06,740
of overflow that will occur when
switching from the

131
00:09:06,740 --> 00:09:12,230
value 7 to the value zero
every time we cross this line.

132
00:09:12,230 --> 00:09:16,947
There is still an important
problem, it is the possibility

133
00:09:16,947 --> 00:09:20,505
of representing negative numbers,
we are very often interested

134
00:09:20,505 --> 00:09:23,710
in having both positive and
negative numbers,

135
00:09:23,710 --> 00:09:27,242
and not having to treat them
separately at the level

136
00:09:27,242 --> 00:09:29,612
of a program, and there are many

137
00:09:29,612 --> 00:09:32,435
solutions to represent these
negative numbers.

138
00:09:32,435 --> 00:09:37,378
I'm not going toall  list them,
obviously, let's use the one that's

139
00:09:37,378 --> 00:09:42,620
most commonly used, which is called
the two-complement notation.

140
00:09:42,620 --> 00:09:47,737
In fact, I took the two drawings
of a moment ago, but this

141
00:09:47,737 --> 00:09:52,564
time we decided to
attribute the same for the

142
00:09:52,564 --> 00:09:57,476
zero, for the 1, for the 2, for the 3,
but here we decided to make

143
00:09:57,476 --> 00:10:02,774
a border that will be the border
of the overflow, and

144
00:10:02,774 --> 00:10:07,922
the numbers that follow will
be minus 4, minus 3,

145
00:10:07,922 --> 00:10:10,960
minus 2, minus 1, and then here zero.

146
00:10:10,960 --> 00:10:13,164
So this is not really a border,

147
00:10:13,164 --> 00:10:16,825
we simply pass from negative
numbers to positive numbers,

148
00:10:16,825 --> 00:10:19,826
or from positive numbers to
negative numbers, I still put

149
00:10:19,826 --> 00:10:22,327
a small line here, but it is a

150
00:10:22,327 --> 00:10:24,645
line in some sort correct
from the point of

151
00:10:24,645 --> 00:10:26,754
calculations, on the other hand, the line

152
00:10:26,754 --> 00:10:29,284
which is dangerous, the overflow,
which was formerly

153
00:10:29,284 --> 00:10:32,120
in this region, is maintained
in this region.

154
00:10:32,120 --> 00:10:33,065
And we see on

155
00:10:33,065 --> 00:10:38,295
the other diagram that we have the
same problem when passing from

156
00:10:38,295 --> 00:10:42,720
3 to minus 4, we have an overflow.

157
00:10:42,720 --> 00:10:48,294
So, it should be noted that most
microcontrollers are able

158
00:10:48,294 --> 00:10:53,326
to do calculation on these negative
numbers, without being

159
00:10:53,326 --> 00:10:58,382
told anything special, the problem is that
for example the language C is

160
00:10:58,382 --> 00:11:01,978
not able to signal these capacity overrun.

161
00:11:01,978 --> 00:11:06,570
The processor that is inside the
microcontroller knows how to do it,

162
00:11:06,570 --> 00:11:11,070
but the C does not, in some
ways, give that access.

163
00:11:11,070 --> 00:11:17,370
So, these negative numbers, very often,
are used in 8 bits, 16 bits or in

164
00:11:17,370 --> 00:11:23,670
or 32 bits, with 4 bits, they only range
from zero to 15, so from minus 8 to plus 7,

165
00:11:23,670 --> 00:11:29,282
heu, we go from zero to 255 for 8 bits,
with negative numbers

166
00:11:29,282 --> 00:11:34,300
here, the same for 16 bits,
the same for 32 bits, note that even

167
00:11:34,300 --> 00:11:37,138
in positive and negative numbers you see

168
00:11:37,138 --> 00:11:39,184
that for 32 bits we already arrive

169
00:11:39,184 --> 00:11:42,490
at extremely large numbers,
and these 32-bit numbers

170
00:11:42,490 --> 00:11:46,780
can be fully manipulated
by microcontrollers.

171
00:11:46,780 --> 00:11:49,216
The names given to these numbers of

172
00:11:49,216 --> 00:11:53,438
limited size, then the byte and
the byte are actually

173
00:11:53,438 --> 00:11:56,506
well known and well-standardized
names, english byte, byte is

174
00:11:56,506 --> 00:11:59,272
often used in french, for other values,
there

175
00:11:59,272 --> 00:12:02,395
are standardization, but
unfortunately not

176
00:12:02,395 --> 00:12:05,607
followed at all, we often
see the term nibble

177
00:12:05,607 --> 00:12:08,155
for 4-bit words, but for 16-bit

178
00:12:08,155 --> 00:12:10,245
and 32-bit words, I did not
even dare to put a

179
00:12:10,245 --> 00:12:14,228
value because it is relatively inconherent,
and in particular programming

180
00:12:14,228 --> 00:12:18,373
languages are not always very clear
on this subject, it will be necessary to be

181
00:12:18,373 --> 00:12:20,875
extremely careful with the C language

182
00:12:20,875 --> 00:12:25,470
about the types corresponding to
these arithmetic values.

183
00:12:25,470 --> 00:12:29,790
Writing numbers into binary is tedious.

184
00:12:29,790 --> 00:12:30,878
It is too long.

185
00:12:30,878 --> 00:12:33,870
If you have 16-bit words, it's hard

186
00:12:33,870 --> 00:12:36,800
to recognize the 1 and zeros
there, in the middle.

187
00:12:36,800 --> 00:12:39,323
Conversion to decimal is also

188
00:12:39,323 --> 00:12:43,174
quite complicated. This is

189
00:12:43,174 --> 00:12:46,974
why an hexadecimal notation is often used

190
00:12:46,974 --> 00:12:51,411
simply to express binary numbers that are

191
00:12:51,411 --> 00:12:55,428
easier to write. What will be the method?

192
00:12:55,428 --> 00:13:04,412
Well, we're just going to group here
in bits of 4 bits and then give a

193
00:13:04,412 --> 00:13:08,370
code for each of these 4-bit pieces.

194
00:13:08,370 --> 00:13:10,780
That's the code that's available.

195
00:13:10,780 --> 00:13:12,956
Zero, 1, 2, 3, 4, 5, 6, 7,

196
00:13:12,956 --> 00:13:16,028
Zero,1, 2, 3, 4, 5, 6, 7, 8, 9, evidently,
like the decimal system, as

197
00:13:16,028 --> 00:13:18,414
it was necessary to add
characters, and well

198
00:13:18,414 --> 00:13:21,422
here we added the first
letters of the alphabet.

199
00:13:21,422 --> 00:13:25,524
Then these hexadecimal numbers
are easily recognized, because they

200
00:13:25,524 --> 00:13:29,712
often have not only numbers
but also the first letters

201
00:13:29,712 --> 00:13:32,206
of the alphabet, and, I recall,

202
00:13:32,206 --> 00:13:35,010
the binary number must be
cut into 4-bit slices,

203
00:13:35,010 --> 00:13:38,839
of course from the right,
and then of course code

204
00:13:38,839 --> 00:13:42,510
each group with these
numbers from zero to F.

205
00:13:42,510 --> 00:13:46,282
Another system that has
absolutely nothing to do

206
00:13:46,282 --> 00:13:51,164
but that people sometimes
confuse is the BCD system.

207
00:13:51,164 --> 00:13:54,810
Then the BCD system is no longer
much used, but it is

208
00:13:54,810 --> 00:13:57,945
still sometimes used, for example
for clock circuits.

209
00:13:57,945 --> 00:14:02,201
In this case, it is a question of decimal
numbers, it must be remembered.

210
00:14:02,201 --> 00:14:05,280
Each decimal digit is encoded on 4 bits.

211
00:14:05,280 --> 00:14:10,831
For example, a 16 bit mode can
code BCD numbers from zero

212
00:14:10,831 --> 00:14:16,154
to only 9'999. Let's take an example.

213
00:14:16,154 --> 00:14:19,388
Here is an hourly value,

214
00:14:19,388 --> 00:14:24,538
21:35 coded in BCD 2, 1,

215
00:14:24,538 --> 00:14:29,662
coded each time on 4 bits,
3, 5, in the same

216
00:14:29,662 --> 00:14:34,800
way, but it is not a hexadecimal,

217
00:14:34,800 --> 00:14:38,784
and it must be understood that
the passage from the binary to the BCD

218
00:14:38,784 --> 00:14:42,089
requires many operations, that it is

219
00:14:42,089 --> 00:14:44,651
that it is this famous conversion
from the binary to the decimal,

220
00:14:44,651 --> 00:14:48,190
and it is even more complicated
to go from decimal to binary.

221
00:14:48,190 --> 00:14:56,730
Let us end this chapter by talking about
the encoding of the characters, we certainly

222
00:14:56,730 --> 00:14:58,992
heard about the ASCII code, which

223
00:14:58,992 --> 00:15:02,346
is indeed extremely old, it dates from

224
00:15:02,346 --> 00:15:05,651
1963, it was coded at the time
on 7 bits, which does not

225
00:15:05,651 --> 00:15:09,540
suit us at all, And what is dramatic
for us francophones

226
00:15:09,540 --> 00:15:13,634
is that it does not contain
accented letters.

227
00:15:13,634 --> 00:15:18,652
Here is the code as it is,
as it was standardized, let's take

228
00:15:18,652 --> 00:15:23,690
for example the letter T
to see how it is encoded,

229
00:15:23,690 --> 00:15:28,982
here on the line we have the value 4,
it's mean

230
00:15:28,982 --> 00:15:34,518
that we will have the value zero, 1,
zero,

231
00:15:34,518 --> 00:15:40,824
zero for the least significant bits, and
here I have the value 5 which will encode

232
00:15:40,824 --> 00:15:47,384
the high-order bits, 1, zero, 1,
here the letter T corresponds

233
00:15:47,384 --> 00:15:53,400
to This binary value 1010100,
therefore a 7-bit word.

234
00:15:53,400 --> 00:15:55,010
It should be noted that there are

235
00:15:55,010 --> 00:15:59,933
many extensions of the ASCII
code that unfortunately

236
00:15:59,933 --> 00:16:03,306
are not compatible with
each other, and it is

237
00:16:03,306 --> 00:16:05,378
a relatively complicated jungle, even

238
00:16:05,378 --> 00:16:07,674
on the Internet several codes cohabit, we

239
00:16:07,674 --> 00:16:13,286
often use a code that Is called
the UTF and in particular

240
00:16:13,286 --> 00:16:18,940
its 8 bits UTF-8 version, but
other codes are also used.

241
00:16:18,940 --> 00:16:21,965
As far as microcontrollers are
concerned, let us say that we do not

242
00:16:21,965 --> 00:16:24,990
often need accented letters,
and that we can

243
00:16:24,990 --> 00:16:28,840
easily get away with the
traditional ASCII system.

244
00:16:28,840 --> 00:16:33,080
So I remind you that in this
chapter we talked about

245
00:16:33,080 --> 00:16:38,608
binary numeration, we talked about
binary numbers of limited size, we

246
00:16:38,608 --> 00:16:43,378
talked about the coding of negative
numbers, and we also addressed

247
00:16:43,378 --> 00:16:50,080
the question of hexadecimal,BCD
and Also character encoding.

