1
00:00:04,405 --> 00:00:05,026
Hello.

2
00:00:05,026 --> 00:00:08,810
We continue the course:
Understanding microcontrollers.

3
00:00:08,810 --> 00:00:13,650
Today,we will talk about LED signs.

4
00:00:13,650 --> 00:00:17,094
It is certainly the extraordinary
progress of these

5
00:00:17,094 --> 00:00:20,986
LEDs in the past 20 years that have

6
00:00:20,986 --> 00:00:23,121
made it possible to produce impressive

7
00:00:23,121 --> 00:00:25,927
signs and impressive displays thanks

8
00:00:25,927 --> 00:00:30,084
to this technology, but it is also
certainly the existence

9
00:00:30,084 --> 00:00:33,272
of microcontrollers, which greatly
facilitates the control of

10
00:00:33,272 --> 00:00:36,250
such signs, such displays.

11
00:00:36,250 --> 00:00:41,557
In this module we will discuss
2 main categories

12
00:00:41,557 --> 00:00:46,294
of LED signs: stationary
patterned signs, and we

13
00:00:46,294 --> 00:00:50,660
will discuss in particular the
transistor control of large

14
00:00:50,660 --> 00:00:55,460
quantities of LEDs and also the extension
of the number of inputs Outputs

15
00:00:55,460 --> 00:00:58,870
of the microcontrollers, which
are particularly useful in this

16
00:00:58,870 --> 00:01:01,110
case, and we will also speak

17
00:01:01,110 --> 00:01:04,413
of matrix displays, also studying

18
00:01:04,413 --> 00:01:08,730
the particular case of the raster
display scanners.

19
00:01:08,730 --> 00:01:12,430
And naturally, we will, for all

20
00:01:12,430 --> 00:01:15,696
these cases, evoke the software,

21
00:01:15,696 --> 00:01:19,830
programs we have to write to
order such signs and displays.

22
00:01:19,830 --> 00:01:20,730
You see

23
00:01:20,730 --> 00:01:26,050
Here, a small sign that indicates
the presence of a hotel.

24
00:01:26,050 --> 00:01:28,129
It has not been realized, as is

25
00:01:28,129 --> 00:01:32,094
traditionally done, with a
plexiglass plate, the

26
00:01:32,094 --> 00:01:36,020
word hotel is a backlight
with neon lights,

27
00:01:36,020 --> 00:01:39,100
it was realized with LEDs

28
00:01:39,100 --> 00:01:42,437
What is the advantage of the LED system?

29
00:01:42,437 --> 00:01:46,456
Well,it's much easier to break up

30
00:01:46,456 --> 00:01:50,152
the sign into small pieces, for example,

31
00:01:50,152 --> 00:01:53,400
pieces of the frame, for example,
obviously the

32
00:01:53,400 --> 00:01:55,712
letters, and then make

33
00:01:55,712 --> 00:01:59,630
visual effects that attract attention,
bright animations.

34
00:01:59,630 --> 00:02:02,435
It is recalled that a current of

35
00:02:02,435 --> 00:02:07,000
10 to 20 milliamps is
required to control a LED.

36
00:02:07,000 --> 00:02:09,059
Of course, there are more
powerful diodes,

37
00:02:09,059 --> 00:02:11,899
which can also be used

38
00:02:11,899 --> 00:02:14,567
for this type of sign, but we used

39
00:02:14,567 --> 00:02:17,520
relatively small diodes are
used relatively often.

40
00:02:17,520 --> 00:02:23,376
Then, for example, all the LEDs
that will compose the

41
00:02:23,376 --> 00:02:29,020
letter H will be connected to the same
output of a microcontroller.

42
00:02:29,020 --> 00:02:32,488
In this sign, we could have a first exit

43
00:02:32,488 --> 00:02:35,714
for the H, the same thing for
the other letters.

44
00:02:35,714 --> 00:02:37,200
As far as the framework is concerned,

45
00:02:37,200 --> 00:02:41,043
we can have all kinds of solutions,
for example, creating

46
00:02:41,043 --> 00:02:46,496
small segments that would make
rotating effects, which can

47
00:02:46,496 --> 00:02:51,808
be pretty pretty.It is therefore
necessary to use a transistor for

48
00:02:51,808 --> 00:02:57,656
Control a number of LEDs.
And here is the diagram that

49
00:02:57,656 --> 00:03:03,410
to be used.Each LED has
its limiting resistance,

50
00:03:03,410 --> 00:03:05,962
extremely important.

51
00:03:05,962 --> 00:03:11,460
The whole of these LEDs are
controlled by a transistor,

52
00:03:11,460 --> 00:03:16,136
the transistor itself being controlled
by a tab of the microcontroller, with

53
00:03:16,136 --> 00:03:21,010
a limitation of the current on
the base of the transistor.

54
00:03:21,010 --> 00:03:25,560
We will gladly put a resistance
of 1 kilo ohm, here.

55
00:03:25,560 --> 00:03:29,232
I would point out that the
assembly which would consist

56
00:03:29,232 --> 00:03:32,910
in proceeding in this way to suppress

57
00:03:32,910 --> 00:03:35,790
these resistances, in order
to put here only a

58
00:03:35,790 --> 00:03:39,848
resistance, must be considered
as a montage

59
00:03:39,848 --> 00:03:43,320
which is false, which should not be used.

60
00:03:43,320 --> 00:03:44,210
The reason?

61
00:03:44,210 --> 00:03:49,018
This is because the diodes do not
have exactly the same behavior and

62
00:03:49,018 --> 00:03:54,435
we would obtain a brightness that
would be variable, and the manufacturers

63
00:03:54,435 --> 00:04:00,288
really do not recommend this
assembly. It is not impossible

64
00:04:00,288 --> 00:04:06,150
to put several LEDs in series but
this method has its constraints.

65
00:04:06,150 --> 00:04:10,910
The voltage here, could not be 5 volts.

66
00:04:10,910 --> 00:04:11,920
Why?

67
00:04:11,920 --> 00:04:16,310
Each diode has a voltage
of its own, it will be

68
00:04:16,310 --> 00:04:19,950
a voltage of the order of 2
volts, for red diodes,

69
00:04:19,950 --> 00:04:24,030
or 3 volts, for green diodes. Therefore,

70
00:04:24,030 --> 00:04:27,978
at least, there must be 2 plus
2 plus 2, so it's about

71
00:04:27,978 --> 00:04:31,968
ten volts. Thus,in this case,
it is possible, for

72
00:04:31,968 --> 00:04:38,984
example, to use, advantageously,
a 12-volt supply,

73
00:04:38,984 --> 00:04:45,144
and to put 5 diodes in
series for the red LEDs

74
00:04:45,144 --> 00:04:49,270
and 3 LEDs in series for the green LEDs.

75
00:04:49,270 --> 00:04:54,724
We agree, so we must take
into account the voltage of

76
00:04:54,724 --> 00:05:00,002
the LED according to its type, that is to
say its color but also its technology.

77
00:05:00,002 --> 00:05:03,838
It is therefore clearly necessary
to increase the voltage

78
00:05:03,838 --> 00:05:07,160
to cope with the number of diodes
that have been chosen.

79
00:05:07,160 --> 00:05:09,485
The advantage of this technology,

80
00:05:09,485 --> 00:05:14,410
of course, is that you can put
more LEDs per transistor.

81
00:05:14,410 --> 00:05:19,426
We have fewer resistors, since we
will no longer have a resistance

82
00:05:19,426 --> 00:05:24,620
by LED but a resistance for
a number of LEDs.

83
00:05:24,620 --> 00:05:30,175
It should be noted that the current
passing through these 5 LEDs is strictly

84
00:05:30,175 --> 00:05:34,700
identical and it is, of course,
determined by the resistance that

85
00:05:34,700 --> 00:05:37,796
it will be necessary, therefore,
to calculate correctly.

86
00:05:37,796 --> 00:05:40,736
A small question I will ask you:

87
00:05:40,736 --> 00:05:44,668
with a laptop power supply providing

88
00:05:44,668 --> 00:05:47,910
16 Volt and a maximum of 4.5 amperes,

89
00:05:47,910 --> 00:05:51,450
how many green LEDs is
it possible to  order?

90
00:05:51,450 --> 00:05:54,010
I'm not talking about the number
of patterns, the number of

91
00:05:54,010 --> 00:05:57,260
transistors, but the total
number of LEDs you need.

92
00:05:57,260 --> 00:05:59,768
The voltage at the terminals of each

93
00:05:59,768 --> 00:06:03,890
LED must be about 3 Volts, for
a current of 10 milliampere.

94
00:06:03,890 --> 00:06:07,070
Those are the 4 answers.

95
00:06:12,885 --> 00:06:17,951
So, we will first choose the number

96
00:06:17,951 --> 00:06:22,732
of LEDs that will be put into series. With a

97
00:06:22,732 --> 00:06:27,380
voltage of 16 Volt and 3

98
00:06:27,380 --> 00:06:32,960
Volt for each LED, we will be able to

99
00:06:32,960 --> 00:06:38,080
put 5 LEDs in series and therefore,

100
00:06:38,080 --> 00:06:43,515
we will have 10 milliampere that pass through

101
00:06:43,515 --> 00:06:48,876
these 5 LEDs in series. It will therefore
be possible

102
00:06:48,876 --> 00:06:54,520
to have 450

103
00:06:54,520 --> 00:06:59,490
groups of LEDs and consequently,

104
00:06:59,490 --> 00:07:03,210
as there are 5 LEDs per group, we will

105
00:07:03,210 --> 00:07:11,210
therefore have, here, 2250 LEDs possible.

106
00:07:11,210 --> 00:07:13,835
Let us return to the
question of this famous

107
00:07:13,835 --> 00:07:17,335
resistance of limitation
which, here, is used

108
00:07:17,335 --> 00:07:22,360
to limit the current throughout
this branch, here we chose 5 LEDs.

109
00:07:22,360 --> 00:07:28,260
The value of this resistance must
be calculated in such a way that a

110
00:07:28,260 --> 00:07:32,870
current, which is the current chosen,
for example, 10 milliampere,

111
00:07:32,870 --> 00:07:38,240
may circulate in this branch.
To calculate a resistance

112
00:07:38,240 --> 00:07:43,121
when the current is known, it would also
be necessary to know the voltage

113
00:07:43,121 --> 00:07:48,206
at the terminals of this resistance.
So, if we admit, here, for

114
00:07:48,206 --> 00:07:53,725
the example, that we have
16 Volt, and that we have 3 Volt

115
00:07:53,725 --> 00:07:58,680
in each of the LEDs, so we have

116
00:07:58,680 --> 00:08:03,454
16 minus 3 times 5, that is 1 Volt at

117
00:08:03,454 --> 00:08:08,540
the terminals of the resistor. It
is therefore desired to calculate the

118
00:08:08,540 --> 00:08:13,710
resistance by Ohm's law, this
gives us a resistance of 100

119
00:08:13,710 --> 00:08:19,130
Ohm. Is this value definitive?

120
00:08:19,130 --> 00:08:23,100
We are not sure of this 3 Volt.

121
00:08:23,100 --> 00:08:26,150
Of course, the manufacturer
specifies it, may be a

122
00:08:26,150 --> 00:08:31,035
slightly different value, but it is
always good to experiment.

123
00:08:31,035 --> 00:08:35,310
This is why the current must be measured.

124
00:08:35,310 --> 00:08:38,714
Once we have our 100 Ohm
resistor, we

125
00:08:38,714 --> 00:08:44,380
switche on the device and the
voltage is measured here

126
00:08:44,380 --> 00:08:46,030
and the current is calculated.

127
00:08:46,030 --> 00:08:50,534
Once we have the current, we
compare it with the one we wanted and

128
00:08:50,534 --> 00:08:53,270
eventually we will correct the value of

129
00:08:53,270 --> 00:08:56,670
the resistance, and resume,
of course, the test.

130
00:08:56,670 --> 00:08:59,852
Let us say a few words about
the control software

131
00:08:59,852 --> 00:09:03,340
needed for such fixed pattern signs.

132
00:09:03,340 --> 00:09:08,666
Obviously, this is a sequencer. We
have already seen this subject.

133
00:09:08,666 --> 00:09:09,590
It is sometimes tricky

134
00:09:09,590 --> 00:09:13,130
to write programs that are legible because

135
00:09:13,130 --> 00:09:15,986
they are sequencers that
often have extremely

136
00:09:15,986 --> 00:09:18,613
long sequences and you
can get tedious lists

137
00:09:18,613 --> 00:09:22,900
of instructions that sometimes take
up too much space memory.

138
00:09:22,900 --> 00:09:26,045
We are not only interested in turning on

139
00:09:26,045 --> 00:09:28,764
or off LEDs but in some cases

140
00:09:28,764 --> 00:09:32,068
we will try to use variations
in intensity, we

141
00:09:32,068 --> 00:09:35,090
will use the technique of
PWM, which  we know.

142
00:09:35,090 --> 00:09:38,001
For reasons of legibility,
and sometimes for

143
00:09:38,001 --> 00:09:41,365
reasons of memory size, we can imagine,

144
00:09:41,365 --> 00:09:45,086
in some cases, a specific
programming language, which

145
00:09:45,086 --> 00:09:48,820
will then be interpreted by
our program in C.

146
00:09:48,820 --> 00:09:51,790
So,maybe all this frightens you, but

147
00:09:51,790 --> 00:09:54,694
you will see that a few lines
of programming in

148
00:09:54,694 --> 00:09:57,295
C will suffice to write
this little interpreter

149
00:09:57,295 --> 00:10:00,780
in a  language that will often
have only 2 instructions.

150
00:10:00,780 --> 00:10:05,450
Output assignment and expectations.

151
00:10:05,450 --> 00:10:06,990
On the other hand, it is often

152
00:10:06,990 --> 00:10:10,045
interesting to have
independent sign parts,

153
00:10:10,045 --> 00:10:12,322
and the multi-tasking technique
that

154
00:10:12,322 --> 00:10:15,972
we usually use can be used.

155
00:10:15,972 --> 00:10:21,050
So it would be too tedious here to
give an example of such a program,

156
00:10:21,050 --> 00:10:26,120
you will find them in additional
documents available on the site.

157
00:10:26,120 --> 00:10:30,245
Obviously, if it is possible
to put more patterns

158
00:10:30,245 --> 00:10:32,246
on a sign, we can make

159
00:10:32,246 --> 00:10:35,866
animations more astute, more attractive.

160
00:10:35,866 --> 00:10:39,659
So if we need more outputs, one of the

161
00:10:39,659 --> 00:10:44,340
solutions is to take a microcontroller
with more legs.

162
00:10:44,340 --> 00:10:47,760
This is not always the right
solution, and anyway,

163
00:10:47,760 --> 00:10:51,200
we are pretty quickly limited
by the number of legs

164
00:10:51,200 --> 00:10:53,720
available on processors.

165
00:10:53,720 --> 00:10:59,240
Another solution is to use specialized
circuits, in particular they

166
00:10:59,240 --> 00:11:05,470
exist with the I2C and SPI technology,
which are seen in another module.

167
00:11:05,470 --> 00:11:10,721
But it is also possible to simply
use standard registers

168
00:11:10,721 --> 00:11:16,275
to make this extension of the number
of outputs and it is a solution

169
00:11:16,275 --> 00:11:22,370
which has the advantage of being
very inexpensive. Very often the circuit

170
00:11:22,370 --> 00:11:27,270
of type 74 HC 595 is used.

171
00:11:27,270 --> 00:11:31,590
This is how it is described by
one of its manufacturers.

172
00:11:31,590 --> 00:11:36,700
There is therefore a series
register, with an input serie,

173
00:11:36,700 --> 00:11:41,810
with a clock, which is then
transmitted to a parallel register,

174
00:11:41,810 --> 00:11:47,066
which has its own clock, and finally
output amplifiers with the

175
00:11:47,066 --> 00:11:50,486
possibility of using the
three-state outputs ,

176
00:11:50,486 --> 00:11:52,890
and the outputs you find here.

177
00:11:52,890 --> 00:11:58,830
a more elegant way to give a symbol
to this component is here.

178
00:11:58,830 --> 00:12:04,120
We can see the series register,
with its input, with its clock.

179
00:12:04,120 --> 00:12:07,480
The parallel register with its clock,

180
00:12:07,480 --> 00:12:13,312
with its outputs, and the reset
signal, which allows

181
00:12:13,312 --> 00:12:19,592
the serial register to be reset, and
the output enable, the remote of the

182
00:12:19,592 --> 00:12:25,740
tri-state output, which allow to
activate or deactivate the exits.

183
00:12:25,740 --> 00:12:32,422
It should be noted that this signal reset and
this signal output enable have a negative polarity,

184
00:12:32,422 --> 00:12:37,784
they are active at zero. Note also
the very interesting presence

185
00:12:37,784 --> 00:12:44,110
of this output signal of the series
register which can be used,

186
00:12:44,110 --> 00:12:48,820
we will see it, to cascade the registers,
and to make long registers.

187
00:12:48,820 --> 00:12:53,678
The schematic shows:

188
00:12:53,678 --> 00:12:58,830
the series clock goes
to all the registers,

189
00:12:58,830 --> 00:13:03,904
the parallel clock goes to all
the registers, and the serial

190
00:13:03,904 --> 00:13:08,876
output of a first register goes
to the serial input of

191
00:13:08,876 --> 00:13:13,800
second.For normal use,

192
00:13:13,800 --> 00:13:18,880
Reset is inactive, it is set to one,
and then the output enable

193
00:13:18,880 --> 00:13:24,110
is set so that the outputs are working,

194
00:13:24,110 --> 00:13:27,250
Correctly,so it is set to zero.

195
00:13:27,250 --> 00:13:33,184
Let's take a look at the time
diagram used to operate

196
00:13:33,184 --> 00:13:38,930
this 16-bit register, which we have
formed by cascading two 8-bit registers.

197
00:13:38,930 --> 00:13:45,050
We have the data to
present at the input S in.

198
00:13:45,050 --> 00:13:49,496
We have the clock strokes to validate

199
00:13:49,496 --> 00:13:51,980
each of these values.

200
00:13:51,980 --> 00:13:56,620
The sensitivity is at the
rising edge of the clock.

201
00:13:56,620 --> 00:14:01,547
When the sixteen values
have been transferred, it

202
00:14:01,547 --> 00:14:05,733
is still necessary to transfer all sixteen

203
00:14:05,733 --> 00:14:09,121
values from the serial register to

204
00:14:09,121 --> 00:14:12,470
Parallel, so that the values
arrive at the output.

205
00:14:12,470 --> 00:14:14,626
And you notice that during

206
00:14:14,626 --> 00:14:19,558
the data preparation time, during
the transfer here of these data,

207
00:14:19,558 --> 00:14:24,952
the outputs continue to
keep the previous value.

208
00:14:24,952 --> 00:14:27,840
There are no parasites
that are generated by

209
00:14:27,840 --> 00:14:31,600
the offset, therefore, with the use
of this second register.

210
00:14:31,600 --> 00:14:34,932
Here is the program that will allow us

211
00:14:34,932 --> 00:14:39,800
to send these 16 bits,
given in the variable

212
00:14:39,800 --> 00:14:45,120
value, on the outputs S in
according to the time diagram

213
00:14:45,120 --> 00:14:49,940
that is given here. We can see
that we have a for loop that goes

214
00:14:49,940 --> 00:14:55,595
execute 16 times, with
the variable i. This

215
00:14:55,595 --> 00:15:00,701
variable will be used to select

216
00:15:00,701 --> 00:15:05,399
the corresponding bit
within value and then

217
00:15:05,399 --> 00:15:12,020
either turn on the output
or turn off the output,

218
00:15:12,020 --> 00:15:17,900
and then either turn on

219
00:15:17,900 --> 00:15:24,496
the serial input or switch
off the serial input.

220
00:15:24,496 --> 00:15:29,990
Next, it is necessary to
generate a clock pulse.

221
00:15:29,990 --> 00:15:30,846
It suffices

222
00:15:30,846 --> 00:15:34,520
to put it to one then set it to zero.

223
00:15:34,520 --> 00:15:38,336
And when everything is
finished, you have to do

224
00:15:38,336 --> 00:15:43,310
the same thing, but this time
for the parallel clock.

225
00:15:43,310 --> 00:15:47,800
It should be noted that this way
of writing is not very clever.

226
00:15:47,800 --> 00:15:50,880
This line is a bit complicated.

227
00:15:50,880 --> 00:15:55,971
For each of the sixteen instances, it
will be necessary to shift a certain

228
00:15:55,971 --> 00:15:58,260
number of times this value one.

229
00:15:58,260 --> 00:16:00,674
In reality, what we are trying to do

230
00:16:00,674 --> 00:16:03,690
is shift each time a little more.

231
00:16:03,690 --> 00:16:07,250
Why, then, do not program that way?

232
00:16:07,250 --> 00:16:15,038
The masking is always done with
the value one, the zero power bit,

233
00:16:15,038 --> 00:16:21,522
but then the value changes and
takes the value shifted to the right,

234
00:16:21,522 --> 00:16:26,516
this time of one, in such a way that the

235
00:16:26,516 --> 00:16:31,704
bit one, the bit two, and cetera.
We now turn to another topic.

236
00:16:31,704 --> 00:16:36,390
This is the subject of LED displays.

237
00:16:36,390 --> 00:16:41,610
What is shown here with the hotel
seems to resemble what we

238
00:16:41,610 --> 00:16:45,862
had earlier, but it is
not at all the same,

239
00:16:45,862 --> 00:16:48,902
since here we have a
regular matrix with an

240
00:16:48,902 --> 00:16:52,954
individual control of each
light-emitting diode , And it

241
00:16:52,954 --> 00:16:56,910
is possible, on this
matrix, for example, to

242
00:16:56,910 --> 00:17:00,290
create,characters such
as those shown here.

243
00:17:00,290 --> 00:17:03,707
Obviously, there are so many
LED that we will

244
00:17:03,707 --> 00:17:08,220
systematically use registers,
as we saw earlier.

245
00:17:08,220 --> 00:17:10,950
As an example, I realized

246
00:17:10,950 --> 00:17:15,790
a model of 16 times 16 LED,
that is to say 256 LED.

247
00:17:15,790 --> 00:17:19,865
I had to use 32 registers of the same type

248
00:17:19,865 --> 00:17:24,330
as earlier, and of course, a
microcontroller by card.

249
00:17:24,330 --> 00:17:29,503
With this type of module, it is possible

250
00:17:29,503 --> 00:17:32,960
to make long displays, such
as bright newspapers.

251
00:17:32,960 --> 00:17:36,092
It is also possible to make
specific displays, with

252
00:17:36,092 --> 00:17:39,594
special shapes, such as
crosses of pharmacy.

253
00:17:39,594 --> 00:17:42,986
You may be telling me that
this electronics is a bit

254
00:17:42,986 --> 00:17:47,050
complicated, and that there may
be a simpler way to proceed.

255
00:17:47,050 --> 00:17:52,970
Indeed, the scanning technique makes
it possible to obtain simpler diagrams.

256
00:17:52,970 --> 00:17:56,998
In this case, we will use lines,

257
00:17:56,998 --> 00:18:01,191
we will use columns, and each light diode

258
00:18:01,191 --> 00:18:06,301
must be linked between a row and a column.

259
00:18:06,301 --> 00:18:08,602
Can this device work?

260
00:18:08,602 --> 00:18:10,667
Let's look for example if it is possible

261
00:18:10,667 --> 00:18:14,910
to turn on this light and to light it.

262
00:18:14,910 --> 00:18:20,400
Certainly. We must put more
here, we must put

263
00:18:20,400 --> 00:18:26,380
more here. In the same way, at least here

264
00:18:26,380 --> 00:18:32,270
and at least there, and these two
diodes can be switched on.

265
00:18:32,270 --> 00:18:35,389
But there is a problem: these diodes

266
00:18:35,389 --> 00:18:37,920
will also light up and you do not want to.

267
00:18:37,920 --> 00:18:41,664
It is therefore not possible to switch on

268
00:18:41,664 --> 00:18:45,764
these LEDs at the same time
without creating this interference.

269
00:18:45,764 --> 00:18:48,860
The solution is to first turn on all the

270
00:18:48,860 --> 00:18:51,668
diodes in this line, then all the diodes

271
00:18:51,668 --> 00:18:55,608
on that line, then all the diodes
on that line, and so on, and

272
00:18:55,608 --> 00:18:59,626
have that process repeated
quickly enough so

273
00:18:59,626 --> 00:19:02,950
that our eye does not
perceive the flashing.

274
00:19:02,950 --> 00:19:08,410
It should be noted that a frequency
at least greater than 100 hertz

275
00:19:08,410 --> 00:19:11,526
to have not an unpleasant impression

276
00:19:11,526 --> 00:19:14,952
of blinking, 150 hertz
would be even better.

277
00:19:14,952 --> 00:19:16,668
Is it possible to control

278
00:19:16,668 --> 00:19:20,260
this assembly directly by the
legs of a microcontroller?

279
00:19:20,260 --> 00:19:24,996
Certainly not, because the current that

280
00:19:24,996 --> 00:19:28,330
will pass here when it
is desired, for example,

281
00:19:28,330 --> 00:19:31,410
to turn on all these LEDs, is probably

282
00:19:31,410 --> 00:19:34,420
greater than what the
microcontroller can provide.

283
00:19:34,420 --> 00:19:37,850
It is therefore necessary to put,
at this level, a transistor.

284
00:19:37,850 --> 00:19:41,721
It will also be necessary to
put a limiting resistor.

285
00:19:41,721 --> 00:19:43,310
Where should we put it?

286
00:19:43,310 --> 00:19:49,348
Well, it is very important to note that
it must be placed on the columns,

287
00:19:49,348 --> 00:19:55,062
more exactly on the other side with
respect to the side where the sweeping is carried out.

288
00:19:55,062 --> 00:20:00,780
By means of these transistors, these lines will be successively accessed.

289
00:20:00,780 --> 00:20:06,545
Consequently, for a given line, a
column will receive no current,

290
00:20:06,545 --> 00:20:08,712
because the LED is off, or

291
00:20:08,712 --> 00:20:12,490
the nominal current of the
LED when it is lit.

292
00:20:12,490 --> 00:20:16,135
Therefore, we will have a
constant brightness.

293
00:20:16,135 --> 00:20:19,159
If the diodes were set at this point,

294
00:20:19,159 --> 00:20:23,210
the brightness would vary depending
on the number of LEDs lit.

295
00:20:23,210 --> 00:20:27,896
Of course, it is necessary to connect, here, most,

296
00:20:27,896 --> 00:20:31,582
for example, plus 5 volts to feed this

297
00:20:31,582 --> 00:20:38,125
assembly and of course, also,each of
these tabs, for the columns and for the

298
00:20:38,125 --> 00:20:43,160
lines, are connected to the microcontroller
or to registers extension.

299
00:20:43,160 --> 00:20:47,470
Here is the complete diagram
of a display of this type.

300
00:20:47,470 --> 00:20:54,836
In this case, registers of type
74 F 164 were used.

301
00:20:54,836 --> 00:20:57,450
The 164 has the peculiarity

302
00:20:57,450 --> 00:21:02,994
of having not  the parallel register
but it is not necessary since it

303
00:21:02,994 --> 00:21:05,500
is possible while the data is

304
00:21:05,500 --> 00:21:08,360
sent, to cut off the control transistors.

305
00:21:08,360 --> 00:21:11,400
We have chosen here not

306
00:21:11,400 --> 00:21:15,283
HC technology but F technology,
which is an

307
00:21:15,283 --> 00:21:18,902
Technology, but which allows
to draw a larger

308
00:21:18,902 --> 00:21:22,220
current when the output is at 0.

309
00:21:22,220 --> 00:21:26,038
And it is possible to exceed
the nominal current

310
00:21:26,038 --> 00:21:31,670
of the LEDs to the maximum
current of these LEDs,

311
00:21:31,670 --> 00:21:35,520
since they are not used full-time, they

312
00:21:35,520 --> 00:21:39,450
are used part of the time,
here a seventh time.

313
00:21:39,450 --> 00:21:42,984
The loss of brightness caused
by the fact that the LEDs

314
00:21:42,984 --> 00:21:47,459
are lit only one-seventh of the
time is partially gained by the fact

315
00:21:47,459 --> 00:21:50,495
that the current can be increased
to the maximum current

316
00:21:50,495 --> 00:21:53,570
which is generally 20 milliamperes .

317
00:21:53,570 --> 00:21:59,279
Here, a material realization
of this display is the one

318
00:21:59,279 --> 00:22:02,860
you may have seen in the
"teaser" of this course.

319
00:22:02,860 --> 00:22:07,790
And you will also understand
why we chose 31 LEDs,

320
00:22:07,790 --> 00:22:13,740
the size of these plates, of the
type Veroboard, was used.

321
00:22:13,740 --> 00:22:19,322
And, the choice, on the other hand,
of this line is related to the fact that,

322
00:22:19,322 --> 00:22:24,825
at least this line is necessary to be able
to draw the capital letters  properly.

323
00:22:24,825 --> 00:22:29,172
Note that lowercase characters
do not appear in a very

324
00:22:29,172 --> 00:22:33,310
aesthetic way, but instead use capital
letters with this technology.

325
00:22:33,310 --> 00:22:39,130
I do not want to write the complete
program of a bright newspaper,

326
00:22:39,130 --> 00:22:41,330
which is relatively complicated,

327
00:22:41,330 --> 00:22:44,072
especially for the generation
of characters, but

328
00:22:44,072 --> 00:22:46,277
I will still write all

329
00:22:46,277 --> 00:22:48,990
the routines that make it possible
to make animations .

330
00:22:48,990 --> 00:22:53,340
Then, firstly, in a matrix, the

331
00:22:53,340 --> 00:22:58,200
pixels are stored, initialized to
0 so that the display is empty.

332
00:22:58,200 --> 00:23:04,390
And then we will use a procedure
called "Poster", which will last

333
00:23:04,390 --> 00:23:09,645
for a while, we will have for example
10 milliseconds for this

334
00:23:09,645 --> 00:23:15,290
part of the procedure and it will be
repeated a number of times.

335
00:23:15,290 --> 00:23:20,420
Then, we actually find a loop for the
number of repetitions of the cycle.

336
00:23:20,420 --> 00:23:24,395
And now, each cycle requires,
for each anode,

337
00:23:24,395 --> 00:23:29,676
for each line, from 0 to 6, to put

338
00:23:29,676 --> 00:23:34,124
the correct values on the columns,
to activate the corresponding

339
00:23:34,124 --> 00:23:38,150
line and to make a small wait.

340
00:23:38,150 --> 00:23:43,600
Between the various successive
displays, it is possible to

341
00:23:43,600 --> 00:23:47,025
turn on or off pixels, for
example with these

342
00:23:47,025 --> 00:23:49,885
2 procedures: "SetPoint", "ClearPoint",

343
00:23:49,885 --> 00:23:54,771
which make it possible to switch on or
off a pixel, which is extremely simple

344
00:23:54,771 --> 00:23:59,747
in view of the structure Is given
by the index in the matrix

345
00:23:59,747 --> 00:24:04,500
and the x is given by the number
of the bit inside the number.

346
00:24:04,500 --> 00:24:10,320
Here a little game that allows
to bounce a ball on the edges.

347
00:24:10,320 --> 00:24:15,590
Here we have the edges drawn on each side.

348
00:24:15,590 --> 00:24:19,880
And then we will turn on the point,

349
00:24:19,880 --> 00:24:25,888
wait a certain time, 20 repetitions
of the display cycle, then

350
00:24:25,888 --> 00:24:31,520
we will turn off this point, and then
we will calculate the next point.

351
00:24:31,520 --> 00:24:38,520
Look at the little trick, d x and
d y can be at 1 or minus

352
00:24:38,520 --> 00:24:45,114
1, so that the ball bounces off quite

353
00:24:45,114 --> 00:24:50,290
logically on both edges.
Finally, the main program.

354
00:24:50,290 --> 00:24:54,280
The usual initialization
of the "watchdog".

355
00:24:54,280 --> 00:25:00,480
Do not forget the normal use of P
1 point 6 and P 1 point 7 for it to be

356
00:25:00,480 --> 00:25:04,546
normal input-output, since they
are used in this case, it is not

357
00:25:04,546 --> 00:25:07,530
the default value at the time of "Reset".

358
00:25:07,530 --> 00:25:10,171
The rows and

359
00:25:10,171 --> 00:25:12,680
columns are output.

360
00:25:12,680 --> 00:25:17,190
And finally, we carry out without
end the small procedure "Ping".

361
00:25:17,190 --> 00:25:20,388
This subject of signs and LED displays

362
00:25:20,388 --> 00:25:25,010
is extreme wide, we did that touch it.

363
00:25:25,010 --> 00:25:27,272
We have seen how to make signs with

364
00:25:27,272 --> 00:25:30,615
fixed patterns and some techniques
associated with it.

365
00:25:30,615 --> 00:25:36,320
We also saw how to make matrix signs

