1
00:00:00,000 --> 00:00:01,161
Hello.

2
00:00:01,161 --> 00:00:07,890
We continue the course
Understanding microcontrollers

3
00:00:07,890 --> 00:00:10,926
And we will talk today about
the consumption

4
00:00:10,926 --> 00:00:14,065
of these microcontrollers,
and in particular the problem

5
00:00:14,065 --> 00:00:16,963
of low consumption that is often desired.

6
00:00:16,963 --> 00:00:21,400
First, we will try to understand
what consumption depends on.

7
00:00:21,400 --> 00:00:25,360
Then we'll talk about Sleep modes.
And finally,

8
00:00:25,360 --> 00:00:27,250
we will take some examples.

9
00:00:27,250 --> 00:00:31,040
What is the consumption of
a microcontroller?

10
00:00:31,040 --> 00:00:34,629
Is it a microamp? A milliamp?

11
00:00:34,629 --> 00:00:35,600
An ampere?

12
00:00:35,600 --> 00:00:41,220
Well, we can remember, it's
not much more than a LED.

13
00:00:41,220 --> 00:00:45,315
Obviously, the different models
of microcontrollers may have

14
00:00:45,315 --> 00:00:47,925
different consumptions, we have

15
00:00:47,925 --> 00:00:50,700
microcontrollers whose consumption

16
00:00:50,700 --> 00:00:52,800
in normal mode is less than one

17
00:00:52,800 --> 00:00:56,238
Milliampere, we also have microcontrollers
whose

18
00:00:56,238 --> 00:00:59,415
consumption in normal mode is more

19
00:00:59,415 --> 00:01:03,250
than ten or even several tens
of milliamps.

20
00:01:03,250 --> 00:01:06,284
Despite this, these consumptions
don't seem to be

21
00:01:06,284 --> 00:01:10,199
extremely high, and yet they will only

22
00:01:10,199 --> 00:01:12,736
allow to use a small battery during

23
00:01:12,736 --> 00:01:16,130
At most a few hours, or possibly
a few days.

24
00:01:16,130 --> 00:01:19,238
So the first question to be

25
00:01:19,238 --> 00:01:22,890
ask is: what consumption depends on?

26
00:01:22,890 --> 00:01:29,120
Let's look at this diagram from
a data sheet from a manufacturer.

27
00:01:29,120 --> 00:01:34,398
It tells us two things.
It is always a question of the

28
00:01:34,398 --> 00:01:41,200
consumption, and we see here the change
in consumption as a function of the

29
00:01:41,200 --> 00:01:46,540
supply voltage, and here it is
seen as a function of the frequency.

30
00:01:46,540 --> 00:01:49,279
In this diagram, we give several

31
00:01:49,279 --> 00:01:53,480
values which correspond
to different frequencies,

32
00:01:53,480 --> 00:01:56,112
and in this diagram two

33
00:01:56,112 --> 00:02:00,680
curves which correspond to
different voltages.

34
00:02:00,680 --> 00:02:06,137
First thing: the more the tension
increases,

35
00:02:06,137 --> 00:02:11,470
The more the current increases.
For example, here, around

36
00:02:11,470 --> 00:02:16,860
2.2 volts, we have a current that is
barely more than a milliampere.

37
00:02:16,860 --> 00:02:20,370
At three volts, we are already at
two milliamps.

38
00:02:20,370 --> 00:02:26,099
We doubled, we almost doubled
the current but we have more than

39
00:02:26,099 --> 00:02:31,235
doubled the power which I remind
you that it is the current multiplied by

40
00:02:31,235 --> 00:02:32,020
The voltage

41
00:02:32,020 --> 00:02:37,346
Why do these curves here do not go down?

42
00:02:37,346 --> 00:02:42,536
Well, it's because, for example, at
16 megahertz, the processor can not

43
00:02:42,536 --> 00:02:46,355
operate at two volts,
two-and-a-half volts, or even

44
00:02:46,355 --> 00:02:48,380
at three volts, and this is the reason

45
00:02:48,380 --> 00:02:50,681
why, on the launchpad, there is a power

46
00:02:50,681 --> 00:02:53,245
supply of 3.5 volts to be able to

47
00:02:53,245 --> 00:02:56,010
operate the processor at 16 megahertz.

48
00:02:56,010 --> 00:03:03,510
Now look at the second curve.
It is even more spectacular.

49
00:03:03,510 --> 00:03:09,960
Here there is a current which is
substantially less than half a milliampere.

50
00:03:09,960 --> 00:03:14,910
Here we have three milliamps, but
all this passing from a frequency

51
00:03:14,910 --> 00:03:19,260
Of the order of one megahertz up to
a frequency of the order of 12 megahertz.

52
00:03:19,260 --> 00:03:21,036
Basically, if you want to

53
00:03:21,036 --> 00:03:26,056
reduce the consumption, it is necessary
to reduce the tension, but we

54
00:03:26,056 --> 00:03:30,590
can not always, and the
frequency should be reduced.

55
00:03:30,590 --> 00:03:35,590
But why not, then, go up to
zero frequency?

56
00:03:35,590 --> 00:03:38,593
We would then have a consumption that

57
00:03:38,593 --> 00:03:42,080
is not zero, but that will be
truly minimal.

58
00:03:42,080 --> 00:03:43,900
You will tell me that the processor

59
00:03:43,900 --> 00:03:46,820
does not work anymore
and it is not very interesting,

60
00:03:46,820 --> 00:03:50,798
and yet this is what is done
in what is called the

61
00:03:50,798 --> 00:03:53,820
Sleep mode of microcontrollers,
and currently

62
00:03:53,820 --> 00:03:56,540
all microcontrollers have this facility.

63
00:03:56,540 --> 00:04:00,484
It is indeed a question of stopping

64
00:04:00,484 --> 00:04:04,486
operating the microprocessor that is

65
00:04:04,486 --> 00:04:07,412
inside the microcontroller,

66
00:04:07,412 --> 00:04:10,528
so that we have a minimal consumption.

67
00:04:10,528 --> 00:04:12,048
This can be done some

68
00:04:12,048 --> 00:04:17,490
time, but who will then wake up
the microcontroller?

69
00:04:17,490 --> 00:04:21,740
Well, it's the mechanism of
the interruptions

70
00:04:21,740 --> 00:04:25,304
which will make it possible
to wake up the microcontroller.

71
00:04:25,304 --> 00:04:27,060
Let us take two examples.

72
00:04:27,060 --> 00:04:32,580
We wish to be able to light our
microcontroller when we press

73
00:04:32,580 --> 00:04:37,954
a button. At that point,

74
00:04:37,954 --> 00:04:42,970
a Pin Change Interrupt will be used.

75
00:04:42,970 --> 00:04:48,295
On the contrary, we want to put
the processor to sleep

76
00:04:48,295 --> 00:04:53,643
for a certain time, and in this case,

77
00:04:53,643 --> 00:04:58,880
an interrupt linkeded to the timer
can be used.

78
00:04:58,880 --> 00:05:03,210
This means that before the
processor falls asleep,

79
00:05:03,210 --> 00:05:07,796
the desired interrupts will be
correctly initialized,

80
00:05:07,796 --> 00:05:10,358
so that at the desired moment,
either after

81
00:05:10,358 --> 00:05:12,371
some time, or at the time of

82
00:05:12,371 --> 00:05:16,460
particular event, the processor
will restart.

83
00:05:16,460 --> 00:05:21,890
There are many modes of
sleeping microcontrollers.

84
00:05:21,890 --> 00:05:28,790
For example, documentation for the
ARM processor, one of the STM32 models,

85
00:05:28,790 --> 00:05:31,034
there are 37 pages of documentation
to read

86
00:05:31,034 --> 00:05:35,200
if we want to know all modes
of sleep of the processor.

87
00:05:35,200 --> 00:05:38,316
The idea is to disable different

88
00:05:38,316 --> 00:05:41,710
parts of the microcontroller as needed.

89
00:05:41,710 --> 00:05:44,790
The processor, yes, in general.

90
00:05:44,790 --> 00:05:47,430
The timers, do we keep them or
we do not keep them?

91
00:05:47,430 --> 00:05:51,190
Well, depending on the needs,
we will keep them or not keep them.

92
00:05:51,190 --> 00:05:53,638
Inputs output, will we keep them?

93
00:05:53,638 --> 00:05:53,926
Are

94
00:05:53,926 --> 00:05:56,380
not we going not to keep them?
It will depend on the cases.

95
00:05:56,380 --> 00:05:59,572
To get by, the manufacturers offer

96
00:05:59,572 --> 00:06:02,421
libraries, but I would point out
that these libraries

97
00:06:02,421 --> 00:06:05,187
are not always easy to use, otherwise

98
00:06:05,187 --> 00:06:08,820
they are not always very well
written, unfortunately.

99
00:06:08,820 --> 00:06:14,166
And, quite often, it will be necessary,

100
00:06:14,166 --> 00:06:18,976
nevertheless, to look in detail in
the documentation to get the best

101
00:06:18,976 --> 00:06:21,472
part of these mechanisms of falling asleep.

102
00:06:21,472 --> 00:06:24,736
I remind you, it can be extremely
interesting because

103
00:06:24,736 --> 00:06:30,960
this will make it possible to extend
the duration of use of the batteries

104
00:06:30,960 --> 00:06:33,027
for a given device, which of course is

105
00:06:33,027 --> 00:06:36,260
an extremely interesting commercial
argument in many cases.

106
00:06:36,260 --> 00:06:41,145
Another application that we
might not think of

107
00:06:41,145 --> 00:06:44,690
, of this sleep, this Sleep
mode of microcontrollers,

108
00:06:44,690 --> 00:06:47,683
this is the analog-to-digital conversions.

109
00:06:47,683 --> 00:06:51,896
You know that analog-to-digital
conversions are electronically

110
00:06:51,896 --> 00:06:55,672
complex and extremely sensitive

111
00:06:55,672 --> 00:06:59,039
to noise, electronic noise, we understand,

112
00:06:59,039 --> 00:07:03,220
electronic noise on power
supplies, pads, and so on.

113
00:07:03,220 --> 00:07:06,280
And then the processor, we know it is

114
00:07:06,280 --> 00:07:09,835
a source of electrical noise,
by the fact that there

115
00:07:09,835 --> 00:07:12,299
are oscillations and phenomena

116
00:07:12,299 --> 00:07:15,330
more or less periodic that occur.

117
00:07:15,330 --> 00:07:18,401
Therefore, we very often use a

118
00:07:18,401 --> 00:07:23,719
sleeping, sometimes specific,
for converters, in such a way

119
00:07:23,719 --> 00:07:26,734
that during the conversion,
the processor does

120
00:07:26,734 --> 00:07:29,640
nothing, and that the noise is minimum.

121
00:07:29,640 --> 00:07:35,490
Here is a small example of using
a converter of an MSP430,

122
00:07:35,490 --> 00:07:38,714
it is extracted from the documents
provided by the manufacturer, and we

123
00:07:38,714 --> 00:07:41,541
will try to find ourselves,
it is true that it makes a

124
00:07:41,541 --> 00:07:43,725
little bit scary because there is many

125
00:07:43,725 --> 00:07:47,100
terms that we do not understand,
but still try to look.

126
00:07:47,100 --> 00:07:50,488
I recall the traditional line that
corresponds

127
00:07:50,488 --> 00:07:55,790
to Watchdog, the removal
of watchdog activation.

128
00:07:55,790 --> 00:08:01,150
We notice here the initializations,
here the loop

129
00:08:01,150 --> 00:08:04,660
which corresponds to loop,
and therefore to the main loop.

130
00:08:04,660 --> 00:08:10,673
So, we often see this word ADC10,
it corresponds to the ten bits analog converter

131
00:08:10,673 --> 00:08:15,844
available in the MSP430 processors.

132
00:08:15,844 --> 00:08:18,215
We have here two control registers in

133
00:08:18,215 --> 00:08:20,820
which a certain number of bits
will be activated

134
00:08:20,820 --> 00:08:26,120
Here we see the ON of the
converter, so we put it walking.

135
00:08:26,120 --> 00:08:29,400
Here we see the interrupt enable, so we

136
00:08:29,400 --> 00:08:34,900
start the corresponding interrupt,
and here we have the sample

137
00:08:34,900 --> 00:08:38,308
and hold, which is a technique that is used

138
00:08:38,308 --> 00:08:42,400
to memorize the value to avoid
certain fluctuations.

139
00:08:42,400 --> 00:08:51,265
And finally, we have here the choice of
the channel used, here the channel A1.

140
00:08:51,265 --> 00:08:57,250
We must also act in this
additional selection register.

141
00:08:57,250 --> 00:08:59,122
All this is in the documentation.

142
00:08:59,122 --> 00:09:02,044
It's always quite difficult to write
this kind of programs,I

143
00:09:02,044 --> 00:09:06,824
reminds us that the usual way
is to look for this type

144
00:09:06,824 --> 00:09:10,482
of programs in the documentation,
and then try to understand the

145
00:09:10,482 --> 00:09:14,100
instructions, and it's much
easier be to done at that time.

146
00:09:14,100 --> 00:09:16,498
Finally, we will run

147
00:09:16,498 --> 00:09:22,615
the command of the beginning of the
conversion, then we will stop the processor,

148
00:09:22,615 --> 00:09:27,640
it will be in low power mode 0,
it is one of its modes

149
00:09:27,640 --> 00:09:33,935
of falling asleep and the status
register will be used to stop the

150
00:09:33,935 --> 00:09:37,640
processor and to enable interrupts

151
00:09:37,640 --> 00:09:41,542
general interrupt enable in such a way
that

152
00:09:41,542 --> 00:09:45,124
the processor falls asleep
during the conversion and

153
00:09:45,124 --> 00:09:48,030
that the interrupt routine
reactivates the processor.

154
00:09:48,030 --> 00:09:53,500
Another example, this time it will be
an AVR processor, the registers

155
00:09:53,500 --> 00:09:57,710
have names a little bit different,
but the concepts are relatively identical.

156
00:09:57,710 --> 00:10:01,265
This is therefore the sleep of the
electronics die that you

157
00:10:01,265 --> 00:10:05,332
have certainly seen on the
"teaser" of the MOOC.

158
00:10:05,332 --> 00:10:06,956
This procedure

159
00:10:06,956 --> 00:10:10,370
"Sleep" will then put the processor
to sleep

160
00:10:10,370 --> 00:10:13,960
: it begins by turning off all
the light emitting diodes.

161
00:10:13,960 --> 00:10:21,640
The interrupt is switched on
at the push button bit.

162
00:10:21,640 --> 00:10:26,730
This "Pin Change Interupt"
is specifically triggered.

163
00:10:26,730 --> 00:10:32,000
The set of interrupts is
activated by a set interup.

164
00:10:32,000 --> 00:10:36,554
And finally, we choose the mode,
a mode

165
00:10:36,554 --> 00:10:40,502
among a series proposed by
the manufacturer.

166
00:10:40,502 --> 00:10:45,170
It switches on and finally
switches to standby mode.

167
00:10:45,170 --> 00:10:48,170
And only when we press the

168
00:10:48,170 --> 00:10:51,350
push button the processor will
turn on again.

169
00:10:51,350 --> 00:10:57,010
We still have a small problem,
it is to measure this consumption.

170
00:10:57,010 --> 00:11:00,373
Then, the consumption in normal
mode, it is easily measured with

171
00:11:00,373 --> 00:11:04,340
a simple measuring device of the
type of multimeters that is easily found.

172
00:11:04,340 --> 00:11:07,891
But when it comes to measuring
currents of the order of

173
00:11:07,891 --> 00:11:12,200
microamp, it is much more difficult
to make current measurements.

174
00:11:12,200 --> 00:11:14,060
And here I propose an original solution

175
00:11:14,060 --> 00:11:17,714
, which I will try to explain.

176
00:11:17,714 --> 00:11:22,382
In normal mode, our system is powered by

177
00:11:22,382 --> 00:11:26,486
a battery, therefore, this switch, somehow

178
00:11:26,486 --> 00:11:29,940
, does not exist, it is always on.

179
00:11:29,940 --> 00:11:33,342
For handling, we will add this switch.

180
00:11:33,342 --> 00:11:35,702
We will also add, here, a

181
00:11:35,702 --> 00:11:40,280
capacitor, of the order of
100 microfarads,

182
00:11:40,280 --> 00:11:46,650
and, here, the possibility of measuring
the voltage at the terminals of our assembly.

183
00:11:46,650 --> 00:11:52,340
So what would seem natural, it would be

184
00:11:52,340 --> 00:11:59,030
to trigger the measurement,
to start our assembly,

185
00:11:59,030 --> 00:12:05,156
to connect the capacitor,
to leave our assembly

186
00:12:05,156 --> 00:12:11,180
falling asleep, for example
after 20 seconds of non-use,

187
00:12:11,180 --> 00:12:16,690
then disconect the battery.

188
00:12:16,690 --> 00:12:23,224
By disconnecting the battery, the assembly
will be powered by the little energy

189
00:12:23,224 --> 00:12:28,130
which is in the capacitor and
the capacitor will discharge.

190
00:12:28,130 --> 00:12:33,690
It is possible to observe with the
multimeter the discharge.

191
00:12:33,690 --> 00:12:36,786
Is that a good

192
00:12:36,786 --> 00:12:38,850
way to do it?

193
00:12:38,850 --> 00:12:43,320
No, because the multimeter consumes a lot.

194
00:12:43,320 --> 00:12:47,192
It is therefore necessary to
remove the multimeter, to do again

195
00:12:47,192 --> 00:12:51,448
the manipulation of just now,
that is to say, to plug in

196
00:12:51,448 --> 00:12:55,680
the capacitor, connect the
battery, leave the device

197
00:12:55,680 --> 00:13:01,161
to fall asleep, then unplug
the battery, leave, for example,

198
00:13:01,161 --> 00:13:06,062
for one minute, the consuming
assembly, from

199
00:13:06,062 --> 00:13:10,095
from the energy in the capacitor.

200
00:13:10,095 --> 00:13:14,480
Then, after one minute,
make a voltage measurement

201
00:13:14,480 --> 00:13:18,080
and, at that moment, we will
have a voltage variation.

202
00:13:18,080 --> 00:13:21,408
We know that when we started
measuring, we had the

203
00:13:21,408 --> 00:13:25,900
the battery voltage, since the capacitor
was connected to the battery.

204
00:13:25,900 --> 00:13:30,445
The value we will have after one minute
will

205
00:13:30,445 --> 00:13:34,990
correspond to this delta U,
this voltage difference.

206
00:13:34,990 --> 00:13:40,149
Now, it is known that the load is equal to the
capacitance times the voltage difference.

207
00:13:40,149 --> 00:13:43,906
It is also known that the current
is the load divided by

208
00:13:43,906 --> 00:13:49,990
time and we will be able, thus, to calculate
this consumption, and calculate this current.

209
00:13:49,990 --> 00:13:51,126
And with the measurements

210
00:13:51,126 --> 00:13:57,306
That we made, we could deduce a current
of the order of 1 microampère,

211
00:13:57,306 --> 00:14:03,970
which is quite suitable not to
discharge the battery too quickly.

212
00:14:03,970 --> 00:14:08,380
Then we will remember that
the consumption depends

213
00:14:08,380 --> 00:14:11,870
on the voltage and frequency
of the processor.

214
00:14:11,870 --> 00:14:16,120
We also remember that there
are modes of sleep,

215
00:14:16,120 --> 00:14:23,078
more or less partial, of the microcontroller
to switch to low consumption mode. And

216
00:14:23,078 --> 00:14:26,274
also saw some applications

217
00:14:26,274 --> 00:14:30,560
and some tricks to measure
this consumption.

