1
00:00:04,185 --> 00:00:04,878
Hello.

2
00:00:04,878 --> 00:00:08,370
The traditional C show
hello world on the screen.

3
00:00:08,370 --> 00:00:11,840
We are more interested in interacting
with the real world

4
00:00:11,840 --> 00:00:14,234
we have displayed, we
have flashed LED.

5
00:00:14,234 --> 00:00:18,113
But it also can be interesting
to transmit texts

6
00:00:18,113 --> 00:00:21,982
and parameters on screen and
that is what we will see.

7
00:00:21,982 --> 00:00:24,720
We will also be interested in
random numbers.

8
00:00:24,720 --> 00:00:29,382
Our microcontrolllers is in
communicatio wih the PC via

9
00:00:29,382 --> 00:00:32,070
the USB line which we is used to load the

10
00:00:32,070 --> 00:00:36,463
programs,and no,what we want do is that

11
00:00:36,463 --> 00:00:41,080
the microcontroller send
information on screen ,or that

12
00:00:41,080 --> 00:00:45,515
characters typed on keyboard can
reach the microcontrollers.

13
00:00:45,515 --> 00:00:49,046
So,it 's necessary to etablished
the link at level of the setup

14
00:00:49,046 --> 00:00:54,825
And that's the serial begin
instruction in which to set

15
00:00:54,825 --> 00:00:57,370
the communication speed,

16
00:00:57,370 --> 00:01:00,930
it's traditionally 1600 bits per second.

17
00:01:00,930 --> 00:01:05,800
Once this communication
has been established

18
00:01:05,800 --> 00:01:11,035
and the PC has been selected,
the display of this information

19
00:01:11,035 --> 00:01:16,938
can be used, and you can use the serial
print with parameters, or serial println,

20
00:01:16,938 --> 00:01:20,695
there will be a return, a passage
To the automatic line.

21
00:01:20,695 --> 00:01:25,559
So at Adriano level,uh,
it's extremelly poor,

22
00:01:25,559 --> 00:01:30,861
the display possibilities because
it will rather help me out ,whereas

23
00:01:30,861 --> 00:01:33,790
when you do C on screen,
it is really a

24
00:01:33,790 --> 00:01:38,160
basic functions with all sorts
Small gadgets to express.

25
00:01:38,160 --> 00:01:41,790
So, if I take the screen now

26
00:01:41,790 --> 00:01:45,706
from our Arduino, you may have noticed,

27
00:01:45,706 --> 00:01:50,472
you already know, that there is a
possibility of clicking serial monitor

28
00:01:50,472 --> 00:01:55,260
when the program runs, and we
will have, Displayed, the results.

29
00:01:55,260 --> 00:02:00,745
The test program we order now,
you have serial begin of

30
00:02:00,745 --> 00:02:05,950
1600 in the setup, and then we declared

31
00:02:05,950 --> 00:02:10,980
a variable that was worth 45. It is
printed, a space,

32
00:02:10,980 --> 00:02:14,813
It is printed in decimal,
it is the same thing.

33
00:02:14,813 --> 00:02:18,155
By default, the variables
are decimal.

34
00:02:18,155 --> 00:02:20,427
It can be printed in hexadecimal.

35
00:02:20,427 --> 00:02:24,727
You can print a text in quotation
marks, and then, we can here,

36
00:02:24,727 --> 00:02:30,290
uh, print successive
numbers to see how it looks.

37
00:02:30,290 --> 00:02:35,692
Then, 45, 45, two D, the exact value,
counts, and then we note, here,

38
00:02:35,692 --> 00:02:40,250
zero, one, two, three, 15, that
the not significant zeros

39
00:02:40,250 --> 00:02:46,008
are eliminated. So, the
program

40
00:02:46,008 --> 00:02:51,254
gets closer to our reading
habits of numbers.

41
00:02:51,254 --> 00:02:54,764
Uh, a typical example, you have a

42
00:02:54,764 --> 00:02:57,938
light sensor, you need to order a motor.

43
00:02:57,938 --> 00:03:01,140
Every ten milliseconds, you do

44
00:03:01,140 --> 00:03:03,970
a calculation that decides the speed

45
00:03:03,970 --> 00:03:07,708
of the motor in relation to
the light intensity.

46
00:03:07,708 --> 00:03:12,051
These calculations, this formula,
it is well to be able to verify it

47
00:03:12,051 --> 00:03:16,554
and according to the luminous
conditions, being, ah, immobile.

48
00:03:16,554 --> 00:03:20,766
So, every 10 milliseconds, we will do the

49
00:03:20,766 --> 00:03:24,842
calculations, but we will not
display every 10 milliseconds.

50
00:03:24,842 --> 00:03:26,206
It would fill the screen,

51
00:03:26,206 --> 00:03:30,295
uh, too fast. So, we will
decide that every 0.5

52
00:03:30,295 --> 00:03:35,202
seconds, every 50 measurements,
we will display the light

53
00:03:35,202 --> 00:03:40,690
value and then the motor speed, pwm.

54
00:03:40,690 --> 00:03:46,022
So,every 10 milliseconds,
we go through this program,

55
00:03:46,022 --> 00:03:51,347
but with a small count of 50, it is

56
00:03:51,347 --> 00:03:56,210
only every 50 times that we
will display the light sensor.

57
00:03:56,210 --> 00:03:58,730
It is good to put an explicit sign.

58
00:03:58,730 --> 00:04:02,770
I'm wary of that, uh, a graph
that probably will not pass.

59
00:04:02,770 --> 00:04:07,485
The value of the light, the
value of the motor, the

60
00:04:07,485 --> 00:04:12,508
value of the PWM, so we will have
this on a line, you have the

61
00:04:12,508 --> 00:04:17,780
ln, here, uh, every 0.5 seconds.

62
00:04:17,780 --> 00:04:24,662
So, this is fine for testing, but first,
if it starts to move again,

63
00:04:24,662 --> 00:04:29,648
you can not follow it with one, with
a laptop, it's not comfortable.

64
00:04:29,648 --> 00:04:34,366
And the other element is that
to transmit this information,

65
00:04:34,366 --> 00:04:38,262
At 9600 bits per second,
it's a millisecond.

66
00:04:38,262 --> 00:04:42,897
So it's in the order of 50, uh,
milliseconds, and in addition to that,

67
00:04:42,897 --> 00:04:47,490
it will use 2000 bytes in memory.

68
00:04:47,490 --> 00:04:54,258
So we're concerned with optimizing
the applications,

69
00:04:54,258 --> 00:04:59,909
and we can not even put radio
communications on the

70
00:04:59,909 --> 00:05:05,700
radio, that kind of execution.

71
00:05:05,700 --> 00:05:08,178
One can also be interested in
going the other way,

72
00:05:08,178 --> 00:05:10,774
that is to type in characters on the

73
00:05:10,774 --> 00:05:13,490
keyboard, then to recover
it in your program.

74
00:05:13,490 --> 00:05:17,846
Meaning, typing in characters on the
keyboard, and then retrieving it in your program.

75
00:05:17,846 --> 00:05:21,976
But that's a bit more complicated, because,
uh, your program can naturally wait on a

76
00:05:21,976 --> 00:05:24,328
key on the keyboard to
do nothing else during

77
00:05:24,328 --> 00:05:26,990
that time, but that's not
what we're interested in.

78
00:05:26,990 --> 00:05:33,450
What we would like is to be able to type
on the keyboard when we want, and the program,

79
00:05:33,450 --> 00:05:37,782
when it needs the information,
comes to look for it.

80
00:05:37,782 --> 00:05:42,289
And what is programmed is
a buffer. The characters

81
00:05:42,289 --> 00:05:47,046
sent from the keyboard
come, uh, to be stored

82
00:05:47,046 --> 00:05:51,500
in a buffer memory. You have a counter.

83
00:05:51,500 --> 00:05:58,700
Then, the first character
arrives, here, and then,

84
00:05:58,700 --> 00:06:04,560
there is a character, here, in a
variable called serial available.

85
00:06:04,560 --> 00:06:08,810
And if you have a second character,
well, it will be incremented.

86
00:06:08,810 --> 00:06:13,942
So your program will monitor this,

87
00:06:13,942 --> 00:06:19,250
this variable serial available, and
if it is different from zero,

88
00:06:19,250 --> 00:06:23,904
read the character, so, empty
the buffer.The serial

89
00:06:23,904 --> 00:06:29,516
available will go to zero, and now,
if your program, uh, is not at

90
00:06:29,516 --> 00:06:33,295
all attentive to what is happening,
well, uh, it can fill up.

91
00:06:33,295 --> 00:06:35,335
You can read the characters one after

92
00:06:35,335 --> 00:06:37,890
the other, ah, in your reading loop.

93
00:06:37,890 --> 00:06:43,590
So, at the level of a small, small
test program, we expect a

94
00:06:43,590 --> 00:06:49,022
character, if serial available
greater than zero,

95
00:06:49,022 --> 00:06:52,907
that means that there is
a character waiting.

96
00:06:52,907 --> 00:06:58,938
One transfers into the variable received, and
then, one can have fun making a name,

97
00:06:58,938 --> 00:07:02,282
a small text, uh, saying I typed,

98
00:07:02,282 --> 00:07:05,816
the value received, and it
will appear in decimal.

99
00:07:05,816 --> 00:07:11,445
I can say, well, its value in
hexadecimal, well, here it is.

100
00:07:11,445 --> 00:07:14,115
And then we'll come back to

101
00:07:14,115 --> 00:07:19,226
print the next character. So
we tapped one, we entered

102
00:07:19,226 --> 00:07:24,410
this program. We must warn

103
00:07:24,410 --> 00:07:29,610
that this letter was typed, and then
we will have the text I typed,

104
00:07:29,610 --> 00:07:34,480
65 which is the ascii code of A

105
00:07:34,480 --> 00:07:39,320
In decimal, or zero x 41 which is the code

106
00:07:39,320 --> 00:07:45,184
Ascii in hexadecimal of this
letter A. So you see that

107
00:07:45,184 --> 00:07:50,870
type a letter, but you get
the code of that letter.

108
00:07:50,870 --> 00:07:56,400
It may be interesting to retrieve a
number, and for this, there is a function

109
00:07:56,400 --> 00:08:01,614
that is poorly documented, little
known, that is serial parselnt.

110
00:08:01,614 --> 00:08:04,610
So parsing is

111
00:08:04,610 --> 00:08:06,670
a syntactic analysis.

112
00:08:06,670 --> 00:08:10,982
So this program will recognize
several characters as you

113
00:08:10,982 --> 00:08:14,080
type it, it will read the
numbers you type.

114
00:08:14,080 --> 00:08:19,708
You type three, type two, type
seven, each time the program

115
00:08:19,708 --> 00:08:24,845
should, uh, put these numbers
together and calculate,

116
00:08:24,845 --> 00:08:29,460
in the background, a decimal value
that will calculate in binary, naturally,

117
00:08:29,460 --> 00:08:34,112
uh, and then prepare this variable
will be transmitted

118
00:08:34,112 --> 00:08:38,490
further, at the time you type
the carriage return.

119
00:08:38,490 --> 00:08:46,828
So, uh, the type, then, if we want
to use this function, we must

120
00:08:46,828 --> 00:08:53,240
first, in the program, be concerned
that a first character arrives.

121
00:08:53,240 --> 00:08:55,360
If this first character

122
00:08:55,360 --> 00:09:01,182
arrives, then the serial parse
function will reach all

123
00:09:01,182 --> 00:09:06,716
characters until the carriage
return, until the enter key.

124
00:09:06,716 --> 00:09:10,543
So we're in a blocked state,
huh, blocking.

125
00:09:10,543 --> 00:09:16,678
Nothing else runs at your
microcontroller unless you wait for

126
00:09:16,678 --> 00:09:20,374
you to type the carriage return,
and if you do not type it,

127
00:09:20,374 --> 00:09:21,750
it will not progress.

128
00:09:21,750 --> 00:09:28,010
Then, once you have typed the,
carriage return, enter key,

129
00:09:28,010 --> 00:09:32,381
you can continue in the
program, display the

130
00:09:32,381 --> 00:09:36,685
value that will appear in
decimal, display it in hexadecimal.

131
00:09:36,685 --> 00:09:40,963
So, you see, uh, the program
has to do something

132
00:09:40,963 --> 00:09:45,630
complicated to make a
binary number from what

133
00:09:45,630 --> 00:09:46,530
you typed.

134
00:09:46,530 --> 00:09:53,305
Then, here, it must convert it
back to decimal to display it, 327.

135
00:09:53,305 --> 00:10:00,140
And then, here, it will resume
it in binary, and then

136
00:10:00,140 --> 00:10:07,470
convert it to display it, this time,
in hexadecimal, in four-bit slices.

137
00:10:07,470 --> 00:10:11,012
So, here is for this
possibility of display.

138
00:10:11,012 --> 00:10:13,400
One can, use it

139
00:10:13,400 --> 00:10:17,048
now, to understand the random numbers.

140
00:10:17,048 --> 00:10:20,275
So generating a random number is something

141
00:10:20,275 --> 00:10:23,173
that is not obvious from a
programming point of view.

142
00:10:23,173 --> 00:10:26,285
There are algorithms that generate
numbers, uh, successive,

143
00:10:26,285 --> 00:10:31,850
but an algorithm will always
compute in the same way.

144
00:10:31,850 --> 00:10:36,030
So it's like a robot playing dice

145
00:10:36,030 --> 00:10:38,760
starting from a die that always has the

146
00:10:38,760 --> 00:10:41,593
same position and under the
same physical conditions.

147
00:10:41,593 --> 00:10:43,387
Well, every time he throws
the die with the

148
00:10:43,387 --> 00:10:47,747
same program, uh, the die will
always give the same value.

149
00:10:47,747 --> 00:10:52,750
So, at Arduino, there is a function
called random, long type,

150
00:10:52,750 --> 00:10:55,075
which is very easy to use, but

151
00:10:55,075 --> 00:10:59,110
it uses again, some, some 1000 bytes.

152
00:10:59,110 --> 00:11:01,420
You can write random, value

153
00:11:01,420 --> 00:11:02,113
maximum

154
00:11:02,113 --> 00:11:06,594
That's okay, give you a number between
zero, and then max minus one.

155
00:11:06,594 --> 00:11:09,714
It's whole numbers, of course, huh.

156
00:11:09,714 --> 00:11:15,560
And then, you have random between two
values min and max, min and max minus one.

157
00:11:15,560 --> 00:11:18,200
And as a small example, to make sure that

158
00:11:18,200 --> 00:11:21,235
we have understood, well,
we do a program for.

159
00:11:21,235 --> 00:11:26,458
We will display 20 successive
numbers on the screen, i from

160
00:11:26,458 --> 00:11:28,504
zero to 20.

161
00:11:28,504 --> 00:11:34,490
The random value from zero
to three is printed.

162
00:11:34,490 --> 00:11:40,370
We put a space between two, and that's
what it gives, three, one, one, and etc...

163
00:11:40,370 --> 00:11:43,290
Uh, we would have to do a little statistic

164
00:11:43,290 --> 00:11:46,580
to check that the random is, is valid.

165
00:11:46,580 --> 00:11:51,990
And we display a carriage
return to prepare a future,

166
00:11:51,990 --> 00:11:56,192
and we wait with the while
1, we do nothing more.

167
00:11:56,192 --> 00:12:01,090
So now if I press the reset
key, I will display a

168
00:12:01,090 --> 00:12:06,935
second line and I get exactly
the same random sequence

169
00:12:06,935 --> 00:12:12,500
since, uh, the program
was running from scratch.

170
00:12:12,500 --> 00:12:17,540
He called the routine which is always
the same, which starts from the

171
00:12:17,540 --> 00:12:18,510
default settings.

172
00:12:18,510 --> 00:12:23,046
So, it can be quite annoying,
in some applications,

173
00:12:23,046 --> 00:12:26,560
that the program always generates
the same random sequences.

174
00:12:26,560 --> 00:12:31,305
So that's why there's an
additional function called

175
00:12:31,305 --> 00:12:37,300
random seed, qui va en fait
modifier ces conditions initiales.

176
00:12:37,300 --> 00:12:40,360
But obviously, now
you have a setting here.

177
00:12:40,360 --> 00:12:42,808
If you always put the same one, well,

178
00:12:42,808 --> 00:12:45,950
you will always generate the
same random sequence.

179
00:12:45,950 --> 00:12:51,540
So what is needed is to find
somewhere a parameter

180
00:12:51,540 --> 00:12:56,611
that will not have the same
value, and, uh, the solution,

181
00:12:56,611 --> 00:13:02,204
Uh, used is to read an

182
00:13:02,204 --> 00:13:08,680
analog input and use the
fact that these entries fluctuate,

183
00:13:08,680 --> 00:13:11,880
and it goes, uh, change a little bit, in

184
00:13:11,880 --> 00:13:17,540
the background, this, that seed
used to start the random values.

185
00:13:17,540 --> 00:13:20,224
We could also find a counter, but

186
00:13:20,224 --> 00:13:24,950
this counter, actually, ah, must change
from one execution to another.

187
00:13:24,950 --> 00:13:29,237
Then,by reusing this same
program with random seed,

188
00:13:29,237 --> 00:13:33,796
well, you see that every
time the sequence that

189
00:13:33,796 --> 00:13:37,847
started, uh, was not the,
is not the same,

190
00:13:37,847 --> 00:13:43,411
and that's the interest
of this Random seed.

191
00:13:43,411 --> 00:13:46,790
So, a small example with
an electronic die, eh.

192
00:13:46,790 --> 00:13:51,550
Uh, you can very easily program
it by saying, well, here, if

193
00:13:51,550 --> 00:13:59,240
the pusher is active, we light the dice with
the random value from zero to five.

194
00:13:59,240 --> 00:14:05,410
This, this procedure turns on,
uh, something very

195
00:14:05,410 --> 00:14:12,011
similar is written by displaying the
digits of this segment from zero to 10.

196
00:14:12,011 --> 00:14:16,376
So, just sort out the same kind of table.

197
00:14:16,376 --> 00:14:20,140
And then, wait a second to
release, release the key.

198
00:14:20,140 --> 00:14:24,820
So, there, we really make the program
as simple as possible, we could

199
00:14:24,820 --> 00:14:31,765
wait for the key to be released to
prepare to display another value.

200
00:14:31,765 --> 00:14:34,214
So, if we keep pressed, we

201
00:14:34,214 --> 00:14:39,282
generate, every second, a
new random number.

202
00:14:39,282 --> 00:14:44,570
So,a variant that we use in this die,
for which

203
00:14:44,570 --> 00:14:50,198
you have a very small processor,
here, then, we will not load a library

204
00:14:50,198 --> 00:14:56,408
of random numbers that fills half
of the memory, that is to say, I

205
00:14:56,408 --> 00:15:02,400
Account at full speed. In
a loop, uh, I count zero,

206
00:15:02,400 --> 00:15:08,610
One, two, three, four, five, et cetera,
as long as I do not lean on the pusher.

207
00:15:08,610 --> 00:15:15,120
And at the moment I press
the pushbutton, I transmit the value,

208
00:15:15,120 --> 00:15:20,994
uh, to the lighted routine. And then,
I can wait a certain amount of time

209
00:15:20,994 --> 00:15:25,902
for the pusher to be released.
So while, here,

210
00:15:25,902 --> 00:15:30,960
it costs you, ah, a dozen bytes in memory.

211
00:15:30,960 --> 00:15:35,664
Here, it costs you a thousand,
and it is clear

212
00:15:35,664 --> 00:15:40,574
that when you program in real time,
we are satisfied perfectly

213
00:15:40,574 --> 00:15:46,735
with random solutions like this, where
randomness is generated by the human being

214
00:15:46,735 --> 00:15:53,250
who is not  able to, repeat pressure
durations, always the same.

215
00:15:53,250 --> 00:15:55,801
Thus, we are certain to have, here,

216
00:15:55,801 --> 00:15:58,970
a random distribution quite correct.

217
00:15:58,970 --> 00:16:02,200
Here, we have just seen
that the serial monitor

218
00:16:02,200 --> 00:16:05,989
is very useful to display variables and

219
00:16:05,989 --> 00:16:10,480
also get variables to change
the execution parameters.

220
00:16:10,480 --> 00:16:15,155
We also saw that random
numbers can be generated in

221
00:16:15,155 --> 00:16:21,335
different ways, and what counts is
to understand the application and to

222
00:16:21,335 --> 00:16:27,600
choose the right programming facilities.

