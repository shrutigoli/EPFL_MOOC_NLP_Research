1
00:00:04,280 --> 00:00:08,560
Hello, we continue the course:
understanding microcontrollers.

2
00:00:08,560 --> 00:00:11,953
We have already talked about
programming,we

3
00:00:11,953 --> 00:00:15,076
have already talked about
the language C but today

4
00:00:15,076 --> 00:00:17,150
I would like to come back a
little bit more in

5
00:00:17,150 --> 00:00:19,990
details on some points concerning
that language C.

6
00:00:19,990 --> 00:00:23,520
We will give some elements
of its history, it is interesting.

7
00:00:23,520 --> 00:00:26,094
We will give some explanations on the

8
00:00:26,094 --> 00:00:28,640
variables and especially on the
assignments.

9
00:00:28,640 --> 00:00:29,420
We will talk

10
00:00:29,420 --> 00:00:32,720
more in details about the control
structures that is obviously

11
00:00:32,720 --> 00:00:36,580
essential to understand well in order
to be able to do even simple programs.

12
00:00:36,580 --> 00:00:39,028
And finally, I will say a few words about

13
00:00:39,028 --> 00:00:41,960
the procedures as well as
the main program.

14
00:00:41,960 --> 00:00:48,900
It was in 1972 that the C language
was created.

15
00:00:48,900 --> 00:00:52,120
So you can imagine it is extremely old.

16
00:00:52,120 --> 00:00:54,599
At that time, we used mini

17
00:00:54,599 --> 00:01:00,390
computers that were big like a
wardrobe and there were not many.

18
00:01:00,390 --> 00:01:04,460
So the situation was very different
from the current situation.

19
00:01:04,460 --> 00:01:09,500
It was developed in the Bell
laboratories of the big

20
00:01:09,500 --> 00:01:14,536
American company AT&T
telecommunication company.

21
00:01:14,536 --> 00:01:19,734
So by Dennis Ritchie. In fact,
it is the result of the evolution

22
00:01:19,734 --> 00:01:23,780
of older languages, especially the
language B.

23
00:01:23,780 --> 00:01:26,972
So this may be the explanation of
its name,

24
00:01:26,972 --> 00:01:29,950
it is called C or C as compiler.

25
00:01:29,950 --> 00:01:34,975
Given the power of the computers
of the time, it is finally a

26
00:01:34,975 --> 00:01:40,000
language that is close to the assembler,
which is relatively simple.

27
00:01:40,000 --> 00:01:43,530
And especially that has an
extremely concise writing.

28
00:01:43,530 --> 00:01:44,622
And finally,

29
00:01:44,622 --> 00:01:49,196
it is this simplicity and conciseness
that makes the C language a very

30
00:01:49,196 --> 00:01:53,770
good candidate as programming
language for microcontrollers.

31
00:01:53,770 --> 00:01:59,235
It is much later that this language
C was standardized as

32
00:01:59,235 --> 00:02:04,810
an ANSI standard in 1989 and also in 1999.

33
00:02:04,810 --> 00:02:10,700
The C language has been the ancestor of
many other programming languages.

34
00:02:10,700 --> 00:02:14,510
Many modern languages ​​are
inspired by the syntax of C.

35
00:02:14,510 --> 00:02:17,680
I would cite very simply as an
example the JAVA language.

36
00:02:17,680 --> 00:02:22,785
C ++ is another language than C language.

37
00:02:22,785 --> 00:02:27,890
Although it has a lot of similarities,
it is a very large extension of C.

38
00:02:27,890 --> 00:02:35,768
I note that the free community around
Linux has a project called GCC,

39
00:02:35,768 --> 00:02:41,660
so GNU compiler collection, which has,
a large number of compilers

40
00:02:41,660 --> 00:02:45,462
for a large number of processors,
and this GCC is the basis of

41
00:02:45,462 --> 00:02:51,734
many compilers that are used
for microcontrollers, and given

42
00:02:51,734 --> 00:02:57,660
that it is a free, open source product,
it is obviously easy to get it.

43
00:02:57,660 --> 00:03:01,638
I will start by saying a few
words about the variables.

44
00:03:01,638 --> 00:03:05,540
Variables are an extremely important
concept.

45
00:03:05,540 --> 00:03:07,751
The variables are cells in

46
00:03:07,751 --> 00:03:10,340
which we can put a content.

47
00:03:10,340 --> 00:03:14,852
Physically, these cells are in RAM, hm.

48
00:03:14,852 --> 00:03:18,464
Each memory has a name.
Here I put the name X.

49
00:03:18,464 --> 00:03:23,120
It also has a type that is
extremely important to know

50
00:03:23,120 --> 00:03:26,970
the type so I will not talk about
type today.

51
00:03:26,970 --> 00:03:30,938
I'm just telling you that int means
integer, that is to say, an integer,

52
00:03:30,938 --> 00:03:34,680
but we will talk more in detail
about the types later.

53
00:03:34,680 --> 00:03:39,618
A variable will contain a certain
value, and we will

54
00:03:39,618 --> 00:03:45,370
be able to assign to it a new value.

55
00:03:45,370 --> 00:03:52,252
Therefore, we must understand
this line as the variable x will

56
00:03:52,252 --> 00:03:57,950
take the content that is in this
case there, the value 12.

57
00:03:57,950 --> 00:04:01,980
We can obviously put values
​​in the form of a constant.

58
00:04:01,980 --> 00:04:09,190
We can also, as has been done
here, use another variable.

59
00:04:09,190 --> 00:04:14,110
We can even use the same
variable to recalculate.

60
00:04:14,110 --> 00:04:17,468
Then you notice that this line is
an absurdity

61
00:04:17,468 --> 00:04:20,320
from the mathematical point
of view, but we must

62
00:04:20,320 --> 00:04:24,270
understand well X will take a new value.

63
00:04:24,270 --> 00:04:30,390
which is the subtraction of the
value 2 from the old value of X.

64
00:04:30,390 --> 00:04:33,918
To perform these assignments,
these calculations,

65
00:04:33,918 --> 00:04:37,300
we will use arithmetic operations.

66
00:04:37,300 --> 00:04:42,680
When using integers, as I did here,

67
00:04:42,680 --> 00:04:48,261
there are five basic arithmetic
operations, addition,

68
00:04:48,261 --> 00:04:53,304
substraction, multiplication,

69
00:04:53,304 --> 00:04:58,609
the whole division and the
rest of the division,

70
00:04:58,609 --> 00:05:02,998
that is to say the value modulo. Let's talk

71
00:05:02,998 --> 00:05:07,905
now about control structures that are

72
00:05:07,905 --> 00:05:12,276
obviously essential to master,even

73
00:05:12,276 --> 00:05:14,285
to write a relatively simple program.

74
00:05:14,285 --> 00:05:15,706
So we've heard about it.

75
00:05:15,706 --> 00:05:18,044
I would like to highlight the fact that

76
00:05:18,044 --> 00:05:21,877
there are two fundamentally
different categories from

77
00:05:21,877 --> 00:05:28,240
structures that are linked to tests
and structures that are loops.

78
00:05:28,240 --> 00:05:32,980
I have represented here flowcharts
and you can notice that

79
00:05:32,980 --> 00:05:39,410
for a test, I took here the example
of the if, all the arrows go down.

80
00:05:39,410 --> 00:05:44,310
On the other hand, in the case of loops,I have
taken two examples of which we will talk about

81
00:05:44,310 --> 00:05:50,620
just now, a certain number of arrows,
such as that one, goes up.

82
00:05:50,620 --> 00:05:53,420
It is also the case here.

83
00:05:53,420 --> 00:05:58,126
Fundamentally in that structure
of if we will

84
00:05:58,126 --> 00:06:02,908
start there, we will pass and
we will end,

85
00:06:02,908 --> 00:06:07,930
while in the loop structure
we will be able to go back.

86
00:06:07,930 --> 00:06:11,640
So let's look at it a little bit
more in details.

87
00:06:11,640 --> 00:06:17,776
Let's look at in detail the structure if,
which is the basic test in

88
00:06:17,776 --> 00:06:23,570
C language. The principle is we will test

89
00:06:23,570 --> 00:06:27,560
a condition and depending on the answer
that

90
00:06:27,560 --> 00:06:30,410
can be yes or that may be no, it's

91
00:06:30,410 --> 00:06:33,603
highlighted in the small circle,
we will carry out

92
00:06:33,603 --> 00:06:39,170
the instruction or, on the contrary,
we will not perform the instruction.

93
00:06:39,170 --> 00:06:43,275
Quite often we will use an
instruction that can be

94
00:06:43,275 --> 00:06:48,825
in fact, several instructions and
so we use open brace,

95
00:06:48,825 --> 00:06:50,200
closed brace.

96
00:06:50,200 --> 00:06:55,448
Then there are two ways of presenting
it graphically either we align the two

97
00:06:55,448 --> 00:07:00,640
braces, open and closed,
or on the contrary we put

98
00:07:00,640 --> 00:07:07,210
the closed brace opposite the line
where the open brace is located.

99
00:07:07,210 --> 00:07:10,290
So, you have to be able

100
00:07:10,290 --> 00:07:15,220
to read these both ways of
presenting things.

101
00:07:15,220 --> 00:07:18,600
This way is perhaps more readable.

102
00:07:18,600 --> 00:07:21,900
This way obviously has the
advantage of taking fewer

103
00:07:21,900 --> 00:07:25,780
lines, and sometimes it's extremely
interesting to have fewer lines.

104
00:07:25,780 --> 00:07:29,135
Our screens are always limited
in size and the more we can see

105
00:07:29,135 --> 00:07:31,555
lines, the more our brain is able

106
00:07:31,555 --> 00:07:35,730
to apprehend a significant
number of different things.

107
00:07:35,730 --> 00:07:41,008
So the if structure is a test and
then the program continues,

108
00:07:41,008 --> 00:07:43,220
you have to understand that.

109
00:07:43,220 --> 00:07:49,840
Then, this instruction can be
executed either zero or once.

110
00:07:49,840 --> 00:07:55,208
There is no other way. We have a
variant of the if that is a

111
00:07:55,208 --> 00:08:01,020
more complete test, not only as with
the if, we will execute the statement,

112
00:08:01,020 --> 00:08:06,458
the first statement if the test is true,
but we also have

113
00:08:06,458 --> 00:08:12,490
another statement that it will
run only if the test is false.

114
00:08:12,490 --> 00:08:17,340
And finally, here too the
program continues.

115
00:08:17,340 --> 00:08:22,440
Writing is well understood. If,
a condition

116
00:08:22,440 --> 00:08:27,440
which has been put between brace,
else, another condition.

117
00:08:27,440 --> 00:08:31,164
also put between brace,

118
00:08:31,164 --> 00:08:35,990
therefore with the if else, the false
condition also gives rise to an instruction.

119
00:08:35,990 --> 00:08:41,680
We have exactly one instruction
that runs in every case.

120
00:08:41,680 --> 00:08:47,170
Either the first or the second.

121
00:08:47,170 --> 00:08:51,660
A small example, let's try to
look at this small piece of program.

122
00:08:51,660 --> 00:08:55,450
We have a first if with a condition.

123
00:08:55,450 --> 00:08:56,638
Here instructions

124
00:08:56,638 --> 00:08:59,700
which executes when this condition is true.

125
00:08:59,700 --> 00:09:04,670
And here an else, followed by an instruction,
this if statement that starts here.

126
00:09:04,670 --> 00:09:10,690
And that will end here.

127
00:09:10,690 --> 00:09:12,307
So I will represent it in form

128
00:09:12,307 --> 00:09:15,130
of an organizational , perhaps
we will better understand.

129
00:09:15,130 --> 00:09:18,090
We see clearly that we have
a first if that is marked

130
00:09:18,090 --> 00:09:23,120
in black with the true condition
that gives rise to an instruction.

131
00:09:23,120 --> 00:09:29,794
And then the else enters in
a new if statement that

132
00:09:29,794 --> 00:09:37,230
also has its test, its true condition,
its false condition.

133
00:09:37,230 --> 00:09:40,570
And finally the whole thing is
found there.

134
00:09:40,570 --> 00:09:44,997
It is a structure of multiple choices
that is fairly frequently used, which

135
00:09:44,997 --> 00:09:48,133
is quite practical, you will see
that there is another one that

136
00:09:48,133 --> 00:09:50,765
looks like it, which is not identical, we

137
00:09:50,765 --> 00:09:54,120
will study it later, which is
called the switch case.

138
00:09:54,120 --> 00:09:57,100
Now let's talk about loops.

139
00:09:57,100 --> 00:10:01,323
In a loop there is basically
this backtracking

140
00:10:01,323 --> 00:10:04,845
the fact that it can last a long time.

141
00:10:04,845 --> 00:10:07,847
We will be able to stay in that loop,
and this

142
00:10:07,847 --> 00:10:11,140
rotating movement that I am now doing.

143
00:10:11,140 --> 00:10:13,080
This is what explains this word, loop.

144
00:10:13,080 --> 00:10:16,434
Here a test, followed by an
instruction, if the

145
00:10:16,434 --> 00:10:19,625
test is false, then the loop is finished.

146
00:10:19,625 --> 00:10:26,170
This is how it is written again with the
syntax where the parentheses are aligned,

147
00:10:26,170 --> 00:10:29,115
the syntax where we
align the closed parenthesis

148
00:10:29,115 --> 00:10:32,630
to the line of the open parenthesis.

149
00:10:32,630 --> 00:10:38,326
I insist that the while structure
is a loop and that it can

150
00:10:38,326 --> 00:10:40,020
last indefinitely.

151
00:10:40,020 --> 00:10:42,204
Always be extremely careful.

152
00:10:42,204 --> 00:10:45,810
Sometimes that's what we're looking for,
sometimes it's not what we're looking for.

153
00:10:45,810 --> 00:10:51,410
And the statement that is here,
it may not run, zero times.

154
00:10:51,410 --> 00:10:54,850
It can run once or several times.

155
00:10:54,850 --> 00:10:57,585
According to, of course, the condition.

156
00:10:57,585 --> 00:11:03,520
Do you see the difference
between this loop, this new loop?

157
00:11:03,520 --> 00:11:04,960
and the previous loop?

158
00:11:04,960 --> 00:11:09,486
There is simply a reversal of
instruction and testing.

159
00:11:09,486 --> 00:11:17,430
In the while, the test was at the beginning,
in the do while, the test is at the end.

160
00:11:17,430 --> 00:11:24,195
Then the syntax followed by an
instruction which is, usually,

161
00:11:24,195 --> 00:11:28,622
written between braces, again
with the two ways of writing.

162
00:11:28,622 --> 00:11:33,858
The statement that will execute.
And finally, the condition

163
00:11:33,858 --> 00:11:39,370
followed by a semicolon.
I insist on that, that's important.

164
00:11:39,370 --> 00:11:43,935
So the do while structure is a loop.

165
00:11:43,935 --> 00:11:48,500
Again, it can last indefinitely.
I emphasize it is important.

166
00:11:48,500 --> 00:11:52,650
This time it can only be executed
once or several times.

167
00:11:52,650 --> 00:11:53,940
It will inevitably

168
00:11:53,940 --> 00:11:59,260
run at least once. And it's
important to remember.

169
00:11:59,260 --> 00:12:05,254
Let us take a new example of mechanics.

170
00:12:05,254 --> 00:12:07,772
We have a motor that drives
an endless wheel,

171
00:12:07,772 --> 00:12:10,725
which makes it possible to move a trolley.

172
00:12:10,725 --> 00:12:14,289
For example, it will be decided
that the trolley

173
00:12:14,289 --> 00:12:19,510
moves in this direction and moves
back in the other direction.

174
00:12:19,510 --> 00:12:25,284
The program we wrote, you see
an endless loop and then you have

175
00:12:25,284 --> 00:12:31,310
two "if" which allow to move forward and back
the engine.

176
00:12:31,310 --> 00:12:34,625
So I will leave you a few moments to

177
00:12:34,625 --> 00:12:37,101
think about this program and you ask

178
00:12:37,101 --> 00:12:39,175
the question: what movement of the trolley

179
00:12:39,175 --> 00:12:41,550
Is carried out by this part of
the program?

180
00:12:47,960 --> 00:12:50,840
So the answer actually is that the

181
00:12:50,840 --> 00:12:54,370
trolley makes a permanent
back and forth movement.

182
00:12:54,370 --> 00:12:58,910
The permanent is linked to the fact that we
have this "while (1)" which is an endless loop.

183
00:12:58,910 --> 00:13:04,068
And indeed, when we finish the
race to the right, we will note here

184
00:13:04,068 --> 00:13:09,820
the right limit switch, well we
will go into "advance" mode.

185
00:13:09,820 --> 00:13:12,988
Whereas when we have reached the

186
00:13:12,988 --> 00:13:15,164
left limit switch, we will move back and

187
00:13:15,164 --> 00:13:19,660
we will actually have the back and
forth movements that will take place.

188
00:13:19,660 --> 00:13:25,490
So we've already seen the "while" loop
and the "do while" loop.

189
00:13:25,490 --> 00:13:28,380
There is a third way to write the,

190
00:13:28,380 --> 00:13:31,430
a loop, it is the structure called "for".

191
00:13:31,430 --> 00:13:34,464
So it's  nothing fundamentally

192
00:13:34,464 --> 00:13:38,154
new, it's just a writting trick

193
00:13:38,154 --> 00:13:43,084
which allows relatively compact
presentations and often quite enjoyable.

194
00:13:43,084 --> 00:13:48,662
If you agree, I will start with
an example: here, "for" we

195
00:13:48,662 --> 00:13:54,570
give it three objects separated
by semicolons.

196
00:13:54,570 --> 00:13:57,604
These parameters in some sorts of the,

197
00:13:57,604 --> 00:14:02,540
loop "for" are as follows: first,
initialization.

198
00:14:02,540 --> 00:14:03,377
it is a

199
00:14:03,377 --> 00:14:08,040
statement that runs once at
the beginning of the loop.

200
00:14:08,040 --> 00:14:11,406
Only once and at the beginning
of the loop.

201
00:14:11,406 --> 00:14:16,630
The second, the second parameter,
is a condition.

202
00:14:16,630 --> 00:14:20,550
It is the condition for the
loop to continue.

203
00:14:20,550 --> 00:14:25,060
If this condition is false,
we will get out of the loop.

204
00:14:25,060 --> 00:14:29,700
And finally, the third parameter,
it is often called incrementation.

205
00:14:29,700 --> 00:14:34,524
In fact, it is simply an instruction
that runs at each iteration

206
00:14:34,524 --> 00:14:37,799
of the loop, each time at
the beginning of the loop.

207
00:14:37,799 --> 00:14:44,049
So when we have finished these instructions,
if the condition is true, we will go back

208
00:14:44,049 --> 00:14:50,550
to the beginning and this third parameter
is executed at the time of this iteration.

209
00:14:50,550 --> 00:14:54,918
In the particular case of this example,
it is very clear  that

210
00:14:54,918 --> 00:14:59,481
"I" will go from 0 to 10 minus 1, until

211
00:14:59,481 --> 00:15:04,060
9 and it takes the successive
values ​​0, 1, 2, 3, 4, and so on.

212
00:15:04,060 --> 00:15:09,890
Another example, this time more complete:
"for i equal

213
00:15:09,890 --> 00:15:15,393
0, i less than or equal to 5; I ++) "we

214
00:15:15,393 --> 00:15:20,740
use this "for" loop again to make
counting in some way.

215
00:15:20,740 --> 00:15:25,950
And in this case, we turn on
an LED, we wait half a second,

216
00:15:25,950 --> 00:15:31,111
turn off the LED and wait
another 500 milliseconds.

217
00:15:31,111 --> 00:15:36,190
How many times will the LED
light up by this program?

218
00:15:40,660 --> 00:15:45,130
Then the LED will actually
light up six times.

219
00:15:45,130 --> 00:15:48,655
Because, we agree that every time we

220
00:15:48,655 --> 00:15:53,070
execute these instructions,
the LED will be turned on and off.

221
00:15:53,070 --> 00:15:59,342
And we will execute it for the value 0,
for the value 1, for the value 2, for the

222
00:15:59,342 --> 00:16:06,020
value 3, the value 4 and for the value 5
since when "i" is equal to 5,

223
00:16:06,020 --> 00:16:08,720
we are still less than or equal to 5.

224
00:16:08,720 --> 00:16:13,840
The condition is still checked and
the loop can be executed one last time.

225
00:16:13,840 --> 00:16:16,090
So the answer, 6 times.

226
00:16:16,090 --> 00:16:21,406
With the "while" loop, the test is
performed at the beginning of the loop.

227
00:16:21,406 --> 00:16:24,850
With the "do while", it runs at the end.

228
00:16:24,850 --> 00:16:28,460
And there are cases where we might be
interested in doing it in the middle.

229
00:16:28,460 --> 00:16:31,052
Then there is a

230
00:16:31,052 --> 00:16:34,805
very general instruction called
"break" which

231
00:16:34,805 --> 00:16:39,590
allows to terminate the execution
of the bounding loop.

232
00:16:39,590 --> 00:16:44,870
So the first loop in which that "break"
is contained.

233
00:16:44,870 --> 00:16:49,255
This can be a "while", "do while" loop,
or a "for" loop.

234
00:16:49,255 --> 00:16:51,004
It will be seen that this may also be the

235
00:16:51,004 --> 00:16:53,640
case in the "switch" structure
that will be seen later.

236
00:16:53,640 --> 00:16:56,490
This is an example which shows that

237
00:16:56,490 --> 00:16:58,340
generalized loop.

238
00:16:58,340 --> 00:17:00,782
We have a series of statements
at the beginning of the

239
00:17:00,782 --> 00:17:03,422
loop, we have a series of statements
at the end

240
00:17:03,422 --> 00:17:06,732
of the loop, and the condition is tested

241
00:17:06,732 --> 00:17:11,214
in the middle of the loop with
an "if" followed by a "break".

242
00:17:11,214 --> 00:17:13,730
I will now talk about the last

243
00:17:13,730 --> 00:17:16,810
control structure we will need.

244
00:17:16,810 --> 00:17:21,360
It is more complicated than the others.
It is even, in some respects,

245
00:17:21,360 --> 00:17:22,410
a little odd.

246
00:17:22,410 --> 00:17:27,995
That's what it does: we
have a test on a variable.

247
00:17:27,995 --> 00:17:32,077
We will therefore give, an
expression which gives as result

248
00:17:32,077 --> 00:17:36,310
values, numerical values, 0, 1, 2, 3,
of the values uh, discretes.

249
00:17:36,310 --> 00:17:40,395
And we will test the different cases.

250
00:17:40,395 --> 00:17:42,875
Here I tested case 1, case 2, case 3

251
00:17:42,875 --> 00:17:46,920
but I can of course also test
the case 1000 if I wish.

252
00:17:46,920 --> 00:17:50,550
And the order does not matter,
it's separate tests.

253
00:17:50,550 --> 00:17:53,836
It is therefore a conditional branch.

254
00:17:53,836 --> 00:17:59,098
Depending on the value of the variable
that was given at the beginning,well, we

255
00:17:59,098 --> 00:18:04,580
go in instruction 1, instruction 2
or instruction 3, and so on.

256
00:18:04,580 --> 00:18:08,640
The problem is that, very curiously,

257
00:18:08,640 --> 00:18:12,248
after executing instruction 1,
we execute

258
00:18:12,248 --> 00:18:15,830
instruction 2 and instruction 3.

259
00:18:15,830 --> 00:18:19,934
Which is definitely not what
we want most of the time.

260
00:18:19,934 --> 00:18:23,460
It turns out that the C works in this way.

261
00:18:23,460 --> 00:18:28,030
Note also that it is possible to learn
a case that is the default case.

262
00:18:28,030 --> 00:18:31,040
That is to say, all cases that are
not taken

263
00:18:31,040 --> 00:18:34,830
into account by the values ​​that
have been given with the "box".

264
00:18:34,830 --> 00:18:37,324
Here, it allows to make another
instruction for

265
00:18:37,324 --> 00:18:38,368
all the other cases.

266
00:18:38,368 --> 00:18:39,992
But as I was telling you earlier,

267
00:18:39,992 --> 00:18:44,740
this structure does not correspond
to the real needs.

268
00:18:44,740 --> 00:18:48,210
Most of the time, for the case,
the first case

269
00:18:48,210 --> 00:18:53,090
we took, we wish to execute
this instruction and then to finish.

270
00:18:53,090 --> 00:18:58,090
And do not perform this second
or third instruction.

271
00:18:58,090 --> 00:19:03,625
Then, it is necessary in this case
to use the command "break".

272
00:19:03,625 --> 00:19:05,968
Some believe that this way of

273
00:19:05,968 --> 00:19:09,160
presenting the switch, is the
standard way.

274
00:19:09,160 --> 00:19:14,230
Well, then in this case we must
not forget the "breaks".

275
00:19:14,230 --> 00:19:17,710
Here, this one is not necessary
since it is the last.

276
00:19:17,710 --> 00:19:22,195
In some cases, we can have
special tricks: if, for example, we

277
00:19:22,195 --> 00:19:28,695
wanted to use, the same
treatment for case 1 and

278
00:19:28,695 --> 00:19:34,715
case 2, well indeed we could
delete this instruction, delete

279
00:19:34,715 --> 00:19:40,294
this "break" and we would have,
for case 1 and case 2, the same

280
00:19:40,294 --> 00:19:46,930
statement 2 which would execute,
followed by the exit by the "break".

281
00:19:46,930 --> 00:19:51,170
I will conclude this chapter
by talking about procedures.

282
00:19:51,170 --> 00:19:54,272
It would take too long to
talk about it in detail now.

283
00:19:54,272 --> 00:19:56,990
We do not need to know a lot.

284
00:19:56,990 --> 00:20:00,518
I will just give the essential points.

285
00:20:00,518 --> 00:20:02,396
A procedure has a name.

286
00:20:02,396 --> 00:20:09,730
A procedure can receive input parameters.

287
00:20:09,730 --> 00:20:12,010
One or more.

288
00:20:12,010 --> 00:20:17,590
A procedure can make output parameters.

289
00:20:17,590 --> 00:20:19,414
Here, it is not rendered

290
00:20:19,414 --> 00:20:22,870
that in this case, an output
parameter is rendered.

291
00:20:22,870 --> 00:20:26,950
So, a procedure is a number of instructions
that

292
00:20:26,950 --> 00:20:29,800
have been grouped together
and given a name.

293
00:20:29,800 --> 00:20:35,880
And thus the possibility of passing
input and output parameters.

294
00:20:35,880 --> 00:20:41,030
This is a very concrete example.
We're going to make a flicker here.

295
00:20:41,030 --> 00:20:44,550
This flicker, it will last a certain
number

296
00:20:44,550 --> 00:20:46,800
of times with a "for" structure.

297
00:20:46,800 --> 00:20:51,140
And every time we turn on,
we wait, we turn off, we wait.

298
00:20:51,140 --> 00:20:54,525
Another example: here we give as input

299
00:20:54,525 --> 00:20:58,360
a number and we wish to get
the square of the number.

300
00:20:58,360 --> 00:21:03,730
This square is calculated here.
The reserved word "return" allows to

301
00:21:03,730 --> 00:21:09,660
output a value. Here, a value
of type integer.

302
00:21:09,660 --> 00:21:15,255
It happens that in C, the main program is

303
00:21:15,255 --> 00:21:21,274
simply a particular procedure that has
a reserved name that is the name "main".

304
00:21:21,274 --> 00:21:24,175
So we have both ways to note it:

305
00:21:24,175 --> 00:21:28,840
sometimes we see "void hand",
sometimes we see "int main".

306
00:21:28,840 --> 00:21:32,140
Let's say that on a microcontroller,
it would be more logical

307
00:21:32,140 --> 00:21:34,978
to take the "void hand"
for the following reason:

308
00:21:34,978 --> 00:21:38,410
In a microcontroller, the program
never ends.

309
00:21:38,410 --> 00:21:43,562
On the other hand, on a computer,
the habit is to be able to ah,

310
00:21:43,562 --> 00:21:49,220
get, an error code when a program ends,
hence this "int".

311
00:21:49,220 --> 00:21:51,524
So we can use both, some

312
00:21:51,524 --> 00:21:54,360
Compilers are ticklish and like
to see this

313
00:21:54,360 --> 00:21:56,505
"Int", this is the reason why we will

314
00:21:56,505 --> 00:22:00,320
often use it but both solutions
are possible.

315
00:22:00,320 --> 00:22:03,840
Note that in this example here, I wrote

316
00:22:03,840 --> 00:22:08,108
a main program, the "main" program,
which,

317
00:22:08,108 --> 00:22:11,580
only calls two procedures:
the procedure "setup"

318
00:22:11,580 --> 00:22:15,860
and, inside a "while" loop, the
"loop" procedure.

319
00:22:15,860 --> 00:22:19,682
And you recognized that this
is the Arduino system.

320
00:22:19,682 --> 00:22:22,717
When you do not write the "hand" in

321
00:22:22,717 --> 00:22:25,795
an Arduino program, but that you write

322
00:22:25,795 --> 00:22:29,486
"Setup" on the one hand and
"loop" on the other hand, the

323
00:22:29,486 --> 00:22:33,420
program will, of itself, add in some sort

324
00:22:33,420 --> 00:22:37,133
this structure for the main
program that exists

325
00:22:37,133 --> 00:22:41,270
of course, even in an Arduino application.

326
00:22:41,270 --> 00:22:44,690
Obviously, we did not talk
about the whole language C.

327
00:22:44,690 --> 00:22:47,150
It's a bit more complicated than

328
00:22:47,150 --> 00:22:51,099
that,but we have a number
of important elements:

329
00:22:51,099 --> 00:22:56,730
the variables and assignments,
the control structures we have had,

330
00:22:56,730 --> 00:22:59,544
in exhaustive manner, and a small

331
00:22:59,544 --> 00:23:02,330
approach of procedures that
are often needed.

332
00:23:02,330 --> 00:23:04,531
With what is available, we will

333
00:23:04,531 --> 00:23:08,900
already do many programs
for microcontrollers.

334
00:23:08,900 --> 00:23:16,160
It is a subset of the C language
that is already sufficient to work.

