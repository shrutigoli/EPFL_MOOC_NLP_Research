1
00:00:04,595 --> 00:00:09,190
Hello, we continue the course
"Understanding  microcontrollers."

2
00:00:09,190 --> 00:00:13,926
And this time, finally, we're
really talking about microcontrollers.

3
00:00:13,926 --> 00:00:19,915
We'll even be able to define
precisely what it is.

4
00:00:19,915 --> 00:00:21,987
Indeed in this module, we will give

5
00:00:21,987 --> 00:00:24,830
a precise definition of what a
microcontroller is.

6
00:00:24,830 --> 00:00:27,514
We will also look at how we

7
00:00:27,514 --> 00:00:30,259
are going to implement the
electronic level,

8
00:00:30,259 --> 00:00:33,284
give implementation schema and are
also talking about

9
00:00:33,284 --> 00:00:35,526
the development of the environment that is

10
00:00:35,526 --> 00:00:38,110
needed to implement a microcontroller.

11
00:00:38,110 --> 00:00:39,742
Instead of dropping from the

12
00:00:39,742 --> 00:00:43,142
sky a microcontroller definition, let me

13
00:00:43,142 --> 00:00:44,706
go back a little bit

14
00:00:44,706 --> 00:00:50,350
on the architecture of IT systems.

15
00:00:50,350 --> 00:00:55,060
We had seen that a computer
system contain a processor,

16
00:00:55,060 --> 00:01:01,080
it contains a program memory, it contains
a memory.(Random Access Memory)

17
00:01:01,080 --> 00:01:03,868
Then obviously it contains what

18
00:01:03,868 --> 00:01:07,810
interact with the outside input / output.

19
00:01:07,810 --> 00:01:11,040
There is of course
a clock here that allows to

20
00:01:11,040 --> 00:01:16,040
clocking the operation of the processor
and thus the whole system.

21
00:01:16,040 --> 00:01:20,352
Note that this diagram of a
computer system may correspond

22
00:01:20,352 --> 00:01:23,820
to many different computer systems.

23
00:01:23,820 --> 00:01:27,980
let us take a concrete example:
the motherboard of a personal computer.

24
00:01:27,980 --> 00:01:33,930
The one you usually use.
This motherboard has a processor,

25
00:01:33,930 --> 00:01:39,741
It will be for example a processor
of the type P4, pentium 4, or

26
00:01:39,741 --> 00:01:45,900
perhaps it will be if
you are fortunate an I7, the latest

27
00:01:45,900 --> 00:01:51,348
generation 2013. This processor will
be clocked by a clock

28
00:01:51,348 --> 00:01:56,290
perhaps three gigaHertz or a
small Little more, or a little less.

29
00:01:56,290 --> 00:02:01,841
You will certainly have bar memory
on your system.

30
00:02:01,841 --> 00:02:05,572
Maybe you have 4 GB of bar memory.

31
00:02:05,572 --> 00:02:08,600
You will certainly have the
inputs and outputs.

32
00:02:08,600 --> 00:02:10,923
For example, a keyboard,

33
00:02:10,923 --> 00:02:14,344
for example, a mouse for input.

34
00:02:14,344 --> 00:02:19,500
You will certainly have a screen and
many other things for the exits.

35
00:02:19,500 --> 00:02:24,700
Small question: will you have
a ROM in your system?

36
00:02:24,700 --> 00:02:27,542
It is true that we are perhaps less aware,

37
00:02:27,542 --> 00:02:29,900
sometimes the manufacturers
do not talk about it but

38
00:02:29,900 --> 00:02:32,930
any computer system has
a read-only memory for

39
00:02:32,930 --> 00:02:36,002
the program to be executed
at startup and in

40
00:02:36,002 --> 00:02:39,255
the case of a computer system,
a motherboard.

41
00:02:39,255 --> 00:02:41,855
This is called the BIOS for those

42
00:02:41,855 --> 00:02:45,040
who did a little bit a computer
maintenance.

43
00:02:45,040 --> 00:02:51,260
Well, imagine that a
microcontroller can respond exactly

44
00:02:51,260 --> 00:02:54,728
to the same pattern block that just now.

45
00:02:54,728 --> 00:02:59,340
I took the same design,
I took the same expressions.

46
00:02:59,340 --> 00:03:01,042
However it's not

47
00:03:01,042 --> 00:03:06,804
exactly the same device.
Maybe we will have a

48
00:03:06,804 --> 00:03:12,698
processor clocked at a
frequency of 8 megaHertz.

49
00:03:12,698 --> 00:03:17,760
We are far from the 3 gigahertz
of just now.

50
00:03:17,760 --> 00:03:21,452
The processor will certainly be
much less powerful than

51
00:03:21,452 --> 00:03:25,156
your Pentium 4 or your I5, or I7.

52
00:03:25,156 --> 00:03:26,460
The size

53
00:03:26,460 --> 00:03:31,283
of the memory in a microcontroller that we

54
00:03:31,283 --> 00:03:36,200
will use, we will find 512.512 what?

55
00:03:36,200 --> 00:03:41,580
Simply 512 Bytes, 512 Octets.

56
00:03:41,580 --> 00:03:46,602
We are well, far from the four GB
you may have on

57
00:03:46,602 --> 00:03:51,730
your computer. We have a program
memory of a

58
00:03:51,730 --> 00:03:55,970
certain size. For example, 16 kB.

59
00:03:55,970 --> 00:04:00,194
That means, for a certain number of
systems, that we will be able to put

60
00:04:00,194 --> 00:04:04,030
about 8000 instructions, which
is already interesting.

61
00:04:04,030 --> 00:04:10,633
Finally, the inputs / outputs,
will actually be inputs / outputs

62
00:04:10,633 --> 00:04:16,924
binary with possibility to exit
or enter zeros or

63
00:04:16,924 --> 00:04:21,546
1. But what is interesting is that

64
00:04:21,546 --> 00:04:30,612
all this computer system can
fit in a single integrated circuit.

65
00:04:30,612 --> 00:04:36,311
Here we will have a single integrated
circuit which

66
00:04:36,311 --> 00:04:41,928
will contain all this computer
system. An

67
00:04:41,928 --> 00:04:48,490
integrated circuit, in english "integrated
circuit". So obviously, the

68
00:04:48,490 --> 00:04:54,970
structural comparison can be made
with a computer such as a PC.

69
00:04:54,970 --> 00:04:58,561
Other comparisons are a little
difficult to do.

70
00:04:58,561 --> 00:05:01,396
We have much less memory, we have
much less

71
00:05:01,396 --> 00:05:06,945
computing power, but we also
have a system that costs a lot

72
00:05:06,945 --> 00:05:12,254
cheaper since we find many
microcontrollers whose price

73
00:05:12,254 --> 00:05:17,350
is less than 1 euro.

74
00:05:17,350 --> 00:05:21,370
So now I can launch into a
microcontroller definition.

75
00:05:21,370 --> 00:05:24,880
The microcontroller is an
integrated circuit

76
00:05:24,880 --> 00:05:28,312
which contains a small computer system.

77
00:05:28,312 --> 00:05:31,670
So it is both an integrated circuit uh,

78
00:05:31,670 --> 00:05:35,870
it is therefore a basic elementary
electronic component, inexpensive.

79
00:05:35,870 --> 00:05:38,699
But it contains an entire computer system.

80
00:05:38,699 --> 00:05:40,631
We'll find inside a

81
00:05:40,631 --> 00:05:43,742
processor, we will find inside

82
00:05:43,742 --> 00:05:46,020
memories of program and data

83
00:05:46,020 --> 00:05:49,050
and also the input and output circuits.

84
00:05:49,050 --> 00:05:52,970
Since it is an integrated circuit, there

85
00:05:52,970 --> 00:05:56,836
is an electronic implementation
which must be made.

86
00:05:56,836 --> 00:05:59,812
And since it is a computer system, it will

87
00:05:59,812 --> 00:06:03,420
have to be programmed, so make
a software implementation.

88
00:06:03,420 --> 00:06:07,334
Let's try to look in a little more detail how

89
00:06:07,334 --> 00:06:12,970
the electronic scheme using a
microcontroller will be to be drawn.

90
00:06:12,970 --> 00:06:17,416
Here, I simply took the
microcontroller component,

91
00:06:17,416 --> 00:06:19,648
there is no specific symbol.

92
00:06:19,648 --> 00:06:22,168
So I simply put a rectangle

93
00:06:22,168 --> 00:06:27,580
or a square and where I wanted,
I put the legs that I need.

94
00:06:27,580 --> 00:06:32,990
There is obviously here a tab for
the electrical reference, the zero Volt.

95
00:06:32,990 --> 00:06:38,047
There is the famous VDC, which allow
to power our microcontroller in 5V,

96
00:06:38,047 --> 00:06:43,443
perhaps even for other models
in 3V or other lower voltages.

97
00:06:43,443 --> 00:06:47,856
we also have a tab called "reset"

98
00:06:47,856 --> 00:06:53,580
here which will allow restarting
at the beginning of the program.

99
00:06:53,580 --> 00:06:55,697
It is therfore a tab which exists in

100
00:06:55,697 --> 00:06:58,959
principle on all the microcontrollers
and which allows

101
00:06:58,959 --> 00:07:01,581
to restart the implementation of
the program which

102
00:07:01,581 --> 00:07:04,220
is inside from its beginning.

103
00:07:04,220 --> 00:07:08,060
Here we still have a mysterious tab
which is called "test" of which I will

104
00:07:08,060 --> 00:07:12,190
say you a few words just now, that
will be useful for programming.

105
00:07:12,190 --> 00:07:13,492
And finally,

106
00:07:13,492 --> 00:07:18,455
I have here represented a single
input and output leg which I will

107
00:07:18,455 --> 00:07:22,140
use in this case as an ouput
in the example we are going to take.

108
00:07:22,140 --> 00:07:26,230
To complete my scheme, well
and I must signal that the mass

109
00:07:26,230 --> 00:07:29,254
was actually connected to zero V,

110
00:07:29,254 --> 00:07:33,680
that we will have to provide power
to the VCC.

111
00:07:33,680 --> 00:07:38,830
We will put here a pull-up resistor.
We heard

112
00:07:38,830 --> 00:07:44,502
about these pull up resistor, a pull-up
a resisting reset on the reset.

113
00:07:44,502 --> 00:07:47,823
So that the reset is not in

114
00:07:47,823 --> 00:07:52,576
an undetermined  state, as entry in
the air takes an undetermined state.

115
00:07:52,576 --> 00:07:55,930
Here it is necessary to give it
a specific state.

116
00:07:55,930 --> 00:08:00,061
Since the reset is active at zero,
what this small round shows,

117
00:08:00,061 --> 00:08:04,098
well, it will be necessary
to pull up the signal so that

118
00:08:04,098 --> 00:08:05,826
the reset will not run

119
00:08:05,826 --> 00:08:09,450
continuously and that the
program can run normally.

120
00:08:09,450 --> 00:08:13,659
I signal that even when, inside
the microcontroller, there is a

121
00:08:13,659 --> 00:08:18,139
system whereby when the voltage
is applied on the VCC, I should

122
00:08:18,139 --> 00:08:22,598
say between the ground and the VCC
there is an automatic reset which

123
00:08:22,598 --> 00:08:24,736
is executed so that the

124
00:08:24,736 --> 00:08:27,520
program can start in good conditions.

125
00:08:27,520 --> 00:08:29,260
We must add a component

126
00:08:29,260 --> 00:08:31,090
which is here a small capacitor.

127
00:08:31,090 --> 00:08:34,335
A capacitor which is not of high
value but must be

128
00:08:34,335 --> 00:08:36,975
of good quality, that is to say with an

129
00:08:36,975 --> 00:08:39,482
internal resistor which is as low
as possible.

130
00:08:39,482 --> 00:08:41,626
This type of capacitor is called

131
00:08:41,626 --> 00:08:46,032
decoupling capacitors uh,
"decoupling capacitor" in english.

132
00:08:46,032 --> 00:08:50,600
There are other terms which are
also used: "bypass capacitor".

133
00:08:50,600 --> 00:08:52,504
I could give you an explanation

134
00:08:52,504 --> 00:08:54,800
very simple on the usefulness
of this capacitor,

135
00:08:54,800 --> 00:08:59,348
it is a small power reserve which allow,
when there is an

136
00:08:59,348 --> 00:09:04,040
important instataneous request to
face to this current demand at the level

137
00:09:04,040 --> 00:09:08,346
of the power supplies since it is
connected here at the plus and here

138
00:09:08,346 --> 00:09:12,900
at the minus, it must be put as close as
possible to the integrated circuit.

139
00:09:12,900 --> 00:09:19,861
I will continue to complete my setup
by adding here a connector on which

140
00:09:19,861 --> 00:09:24,874
there will the tab "reset", on
which there will be this tab

141
00:09:24,874 --> 00:09:30,249
"Test", and on which there will be at least the
mass, which is therefore the common point.

142
00:09:30,249 --> 00:09:33,542
I have,quite often, the power
supply, so it will be

143
00:09:33,542 --> 00:09:38,110
possible to power our assembly
by this connector.

144
00:09:38,110 --> 00:09:40,926
So, in fact, this connector will be
used for

145
00:09:40,926 --> 00:09:45,942
programming, therefore
for this step of putting inside

146
00:09:45,942 --> 00:09:52,210
the read-only memory of the microcontroller,
of that is intented to execute

147
00:09:52,210 --> 00:09:53,617
I'm almost done.

148
00:09:53,617 --> 00:09:56,985
I can now very easily complete my assembly

149
00:09:56,985 --> 00:10:00,300
by adding here for example,
a light-emitting diode.

150
00:10:00,300 --> 00:10:03,958
This will be the only output of my
system that will not even have an input.

151
00:10:03,958 --> 00:10:07,510
We can, for example, flash this LED.

152
00:10:07,510 --> 00:10:10,873
This is something that may
not be very sophisticated,

153
00:10:10,873 --> 00:10:12,879
but if we can flash a light diode

154
00:10:12,879 --> 00:10:15,860
and vary, from one program to another

155
00:10:15,860 --> 00:10:18,380
sound, its speed of blnking,
we will already have the

156
00:10:18,380 --> 00:10:22,120
conviction that we managed
to operate our microcontroller.

157
00:10:22,120 --> 00:10:25,113
Such a assembly is not
complicated to achieve.

158
00:10:25,113 --> 00:10:27,084
You know that these plates that

159
00:10:27,084 --> 00:10:30,580
are sometimes called experimental plates

160
00:10:30,580 --> 00:10:35,390
in French, or "breadboards"
or "project boards" in English.

161
00:10:35,390 --> 00:10:35,926
Well,

162
00:10:35,926 --> 00:10:40,214
these experiments plates allow
easily to connect

163
00:10:40,214 --> 00:10:42,820
according to the scheme that we
have just given.

164
00:10:42,820 --> 00:10:44,850
Here we see the integrated circuit,

165
00:10:44,850 --> 00:10:48,000
we see on the corresponding tab,
the resistance

166
00:10:48,000 --> 00:10:53,710
for the reset that is connected at most,
so to the red band here.

167
00:10:53,710 --> 00:10:58,150
Here we see the power supply, the
two power supplies of the processor,

168
00:10:58,150 --> 00:11:01,170
we see here the connection of a tab
to a light diode

169
00:11:01,170 --> 00:11:05,026
ah, with a resistance that goes to ground.

170
00:11:05,026 --> 00:11:10,108
Here I added these few wiries so
that we can actually

171
00:11:10,108 --> 00:11:13,517
have on both sides the least
and the the sides the

172
00:11:13,517 --> 00:11:18,512
most so that this connector here
makes it possible to supply the

173
00:11:18,512 --> 00:11:23,610
assembly and this connector
completes it for programming.

174
00:11:23,610 --> 00:11:26,275
Note that this drawing was
made with a software

175
00:11:26,275 --> 00:11:32,350
called Fritzing so that you can
find on this website Fritzing.org.

176
00:11:32,350 --> 00:11:34,900
So I now have my schema, it will

177
00:11:34,900 --> 00:11:39,025
will be necessary to find a development
environment, a system

178
00:11:39,025 --> 00:11:41,734
of development that will allow me to

179
00:11:41,734 --> 00:11:46,050
put the program inside my microcontroller.

180
00:11:46,050 --> 00:11:52,720
I will use fo this a PC and
here called a programmer.

181
00:11:52,720 --> 00:11:54,992
So, rather good news: the PC

182
00:11:54,992 --> 00:11:58,470
does not need to be an extremely
sophisticated pc.

183
00:11:58,470 --> 00:12:02,040
We have software development environment
which we will discuss later

184
00:12:02,040 --> 00:12:05,598
and in the next modules that are
not too heavy, not too complex.

185
00:12:05,598 --> 00:12:08,990
For programmers, well some
are more or less complicated.

186
00:12:08,990 --> 00:12:13,990
Here are a few. This allows
programming a Pick.

187
00:12:13,990 --> 00:12:18,121
This one allows to programan AVR ,
of course there are

188
00:12:18,121 --> 00:12:20,280
many other models.

189
00:12:20,280 --> 00:12:22,289
That one is something a little bit more

190
00:12:22,289 --> 00:12:24,700
sophisticated for systems a
little bit more expensive.

191
00:12:24,700 --> 00:12:26,502
Here we have an extremely simple
programmer

192
00:12:26,502 --> 00:12:29,070
, which has virtually no electronics.

193
00:12:29,070 --> 00:12:31,905
Unfortunately, it uses the LPT port

194
00:12:31,905 --> 00:12:34,437
of computers that are no longer available.

195
00:12:34,437 --> 00:12:36,621
On Mordern computers, we will prefer

196
00:12:36,621 --> 00:12:40,092
solutions using USB type connectors.

197
00:12:40,092 --> 00:12:44,250
There are also several electronic cards,

198
00:12:44,250 --> 00:12:48,900
usually small , such as the
Arduino,that you right here,

199
00:12:48,900 --> 00:12:52,969
which contain both the
microcontroller, with

200
00:12:52,969 --> 00:12:57,242
connectors for connecting the
inputs and outputs  tab, but also

201
00:12:57,242 --> 00:13:01,300
the programmer and you recognize
on this image the USB connector.

202
00:13:01,300 --> 00:13:05,643
Another example is the LaunchPad

203
00:13:05,643 --> 00:13:09,310
provided by Texas Instruments,
which is also a

204
00:13:09,310 --> 00:13:13,408
very interesting card that contains
the programmer in the

205
00:13:13,408 --> 00:13:14,883
uper part, which contains the

206
00:13:14,883 --> 00:13:17,420
microcrontroller also with also

207
00:13:17,420 --> 00:13:20,630
side connectors and we will use
this this card abundantly to

208
00:13:20,630 --> 00:13:24,900
make demonstrations during this
course "understand the microcontrollers."

209
00:13:24,900 --> 00:13:28,250
One thing is the material aspect.

210
00:13:28,250 --> 00:13:31,260
Another thing is the software side.

211
00:13:31,260 --> 00:13:35,190
Here you see development environments.

212
00:13:35,190 --> 00:13:39,040
This corresponds to the
environment of the Arduino.

213
00:13:39,040 --> 00:13:42,911
This corresponds to the environment
of the MSP430.

214
00:13:42,911 --> 00:13:46,578
You see that they are extremely
similar to each other.

215
00:13:46,578 --> 00:13:49,360
We even have almost the
same program that is written.

216
00:13:49,360 --> 00:13:54,756
So these softwares so will allow
to write programs, to  convert them

217
00:13:54,756 --> 00:14:00,570
in machine language and then to send
them on the memory of the microcontroller.

218
00:14:00,570 --> 00:14:04,825
There are also more sophisticated
environments.

219
00:14:04,825 --> 00:14:10,800
Here, for example, the environment that
is called Code Composer Studio that is

220
00:14:10,800 --> 00:14:16,850
provided with processors of Texas
Instruments, including the MSP430.

221
00:14:16,850 --> 00:14:20,850
We will also use during this
course this software in such way

222
00:14:20,850 --> 00:14:25,680
so that we can learn to use a
certain number of

223
00:14:25,680 --> 00:14:29,004
advanced features, especially that
hide behind

224
00:14:29,004 --> 00:14:32,285
here, this key "debug", the possibility to

225
00:14:32,285 --> 00:14:34,826
see, in a way, on the computer screen

226
00:14:34,826 --> 00:14:39,240
the instructions run inside
the microcontroller.

227
00:14:39,240 --> 00:14:44,137
So We learned today what a
microcontroller is.

228
00:14:44,137 --> 00:14:47,368
I remind this definition: it is a small

229
00:14:47,368 --> 00:14:51,330
computer system contained
in a single integrated circuit.

230
00:14:51,330 --> 00:14:55,730
We also saw how to draw the
diagram for the implementation

231
00:14:55,730 --> 00:14:59,990
of this microcontroller. And we
touched on some

232
00:14:59,990 --> 00:15:05,700
hardware and software solutions that will
serve as a development system, which will therefore

233
00:15:05,700 --> 00:15:12,400
allow to develop applications
made from microcontroller.

