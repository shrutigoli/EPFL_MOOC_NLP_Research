1
00:00:00,000 --> 00:00:09,400
Hello, we continue the course,
"Understanding microcontrollers."

2
00:00:09,400 --> 00:00:11,668
We have not talked a lot about

3
00:00:11,668 --> 00:00:15,100
microcontrollers, but this time we'll
finally

4
00:00:15,100 --> 00:00:18,310
touch a little bit microcontrollers,

5
00:00:18,310 --> 00:00:21,303
without talking about them
in many details.

6
00:00:21,303 --> 00:00:25,190
In this module, we'll talk
about sequential systems.

7
00:00:25,190 --> 00:00:28,180
We will discuss in particular how
to represent

8
00:00:28,180 --> 00:00:30,750
a sequential system by a state graph.

9
00:00:30,750 --> 00:00:35,315
We also look at how to realise,
how to synthesize

10
00:00:35,315 --> 00:00:39,660
a state machine, uh, for a
sequential system,

11
00:00:39,660 --> 00:00:42,028
and finally we will show that the solution

12
00:00:42,028 --> 00:00:47,510
more simple, is perhaps
precisely to use a microcontroller.

13
00:00:47,510 --> 00:00:50,300
We had already seen what

14
00:00:50,300 --> 00:00:55,559
a logical system is, with its inputs,
with its

15
00:00:55,559 --> 00:01:00,996
outputs, and the description
with a truth table

16
00:01:00,996 --> 00:01:04,388
insofar as it is a combinatorial
system, and we are going

17
00:01:04,388 --> 00:01:08,730
to see systems that are not
combinatorial today.

18
00:01:08,730 --> 00:01:11,656
To convince you that all systems

19
00:01:11,656 --> 00:01:15,242
are not combinatorial, I propose
to you an example.

20
00:01:15,242 --> 00:01:18,470
In addition, this example we'll use it

21
00:01:18,470 --> 00:01:21,080
throughout the course, and
finally on several occasions.

22
00:01:21,080 --> 00:01:23,840
In any case, we will have the
opportunity to talk about it again

23
00:01:23,840 --> 00:01:27,552
So I try to explain a little
bit to you what it is.

24
00:01:27,552 --> 00:01:29,350
It is a drill system.

25
00:01:29,350 --> 00:01:34,014
We have the pieces that have
to be drilled with by a wick

26
00:01:34,014 --> 00:01:41,102
Here, the motor that turn the wick.
And during manual use,

27
00:01:41,102 --> 00:01:45,936
the worker had to place the piece
in the right place, fix it, and

28
00:01:45,936 --> 00:01:51,165
then, lower the drill at a certain
speed, until

29
00:01:51,165 --> 00:01:56,500
down and then back up to clear the fuse.

30
00:01:56,500 --> 00:02:01,280
We wish to automate this process,
and then we'll

31
00:02:01,280 --> 00:02:06,560
add to our device, here, a small
start button

32
00:02:06,560 --> 00:02:10,666
which will allow to start,
to launch the

33
00:02:10,666 --> 00:02:14,730
hole, at the moment when
the piece has been fixed.

34
00:02:14,730 --> 00:02:18,558
And so, I recall the scenario,
the drill must

35
00:02:18,558 --> 00:02:24,170
go down to the bottom, then
must go up the top and stop.

36
00:02:24,170 --> 00:02:27,360
The first question that could be asked,

37
00:02:27,360 --> 00:02:31,060
is the system that controls
the vertical engine,

38
00:02:31,060 --> 00:02:35,460
what are its inputs, what
are its outputs for now?

39
00:02:35,460 --> 00:02:37,847
How many entries does it has?

40
00:02:37,847 --> 00:02:39,860
How many outputs does it has?

41
00:02:39,860 --> 00:02:46,082
So the answer is actually,

42
00:02:46,082 --> 00:02:51,085
is that, the system has three
inputs and two outputs.

43
00:02:51,085 --> 00:02:56,146
I'll explain it to you. What
inputs are needed?

44
00:02:56,146 --> 00:02:59,666
Everybody thinks, uh, that there
is indeed an

45
00:02:59,666 --> 00:03:03,976
entry called start; it's
not too hard to find.

46
00:03:03,976 --> 00:03:05,839
Are there any other entries?

47
00:03:05,839 --> 00:03:07,730
Yes, there are other entries.

48
00:03:07,730 --> 00:03:12,520
An entry called low, which
corresponds to the fact that I said

49
00:03:12,520 --> 00:03:17,571
that when the drill had arrived
down, we had to go up.

50
00:03:17,571 --> 00:03:21,111
So it must be a detection system
that gives the information,

51
00:03:21,111 --> 00:03:22,740
when we are arrived at the bottom.

52
00:03:22,740 --> 00:03:25,092
Thi is in fact a limit switch

53
00:03:25,092 --> 00:03:27,674
that gives this information.

54
00:03:27,674 --> 00:03:32,670
And in the same way, we have a signal
that, uh, notes that we arrived at the top.

55
00:03:32,670 --> 00:03:37,789
Concerning the outputs, the
engine that is located, is the one

56
00:03:37,789 --> 00:03:42,794
that will allow to lower and raise
the device.

57
00:03:42,794 --> 00:03:46,442
There is only one motor,
but there is a need of two

58
00:03:46,442 --> 00:03:49,400
values ​​to control it. Why?

59
00:03:49,400 --> 00:03:53,110
Well, because this engine actually
has three operating modes.

60
00:03:53,110 --> 00:03:55,125
At times, it is arrested.

61
00:03:55,125 --> 00:03:58,216
At times, it rotates in one
direction corresponding

62
00:03:58,216 --> 00:04:00,439
to the descent, and at
another time, it turns

63
00:04:00,439 --> 00:04:04,044
in the other direction, and thus
these three modes of operation

64
00:04:04,044 --> 00:04:08,230
of the engine must be presented
by at least two outputs.

65
00:04:08,230 --> 00:04:11,856
For example, an output which would
be called

66
00:04:11,856 --> 00:04:16,400
forward, and an output which
would be called backward.

67
00:04:16,400 --> 00:04:25,200
So we have our system with the
three inputs, with two outputs,

68
00:04:25,200 --> 00:04:31,320
which we naively see if a truth
table will allow us to describe it.

69
00:04:31,320 --> 00:04:35,994
Let's take the first line of the truth table.

70
00:04:35,994 --> 00:04:37,020
We have

71
00:04:37,020 --> 00:04:41,940
start which is zero,high which is
zero, down which is zero.

72
00:04:41,940 --> 00:04:45,135
The fact that start is at zero
indicates that the worker

73
00:04:45,135 --> 00:04:48,250
is not pressing the start button.

74
00:04:48,250 --> 00:04:51,850
The fact that we are neither above nor

75
00:04:51,850 --> 00:04:56,164
down, suggests that the drill is somewhere

76
00:04:56,164 --> 00:04:59,342
in the middle, and according to
the operation that I described

77
00:04:59,342 --> 00:05:01,939
earlier, if it is in the middle
that means that it is ,

78
00:05:01,939 --> 00:05:03,710
for example, going down.

79
00:05:03,710 --> 00:05:08,214
So, actually, we could put
here a value, followed

80
00:05:08,214 --> 00:05:11,890
by a zero, which would correspond
to that the motor is moving forward.

81
00:05:11,890 --> 00:05:15,842
But, obviously, it would also
be possible to be in the

82
00:05:15,842 --> 00:05:20,885
situation or we are going up.

83
00:05:20,885 --> 00:05:25,070
That is to say that we are at one for
the setback, and at zero for the advance.

84
00:05:25,070 --> 00:05:27,050
So, for this single

85
00:05:27,050 --> 00:05:31,354
line, there are two, uh,
different values ​​of outputs.

86
00:05:31,354 --> 00:05:33,932
Therefore, the system is not a

87
00:05:33,932 --> 00:05:37,052
combinatorial system, and in
some ways, we can

88
00:05:37,052 --> 00:05:41,760
put aside the truth table,
it is not useful in this case.

89
00:05:41,760 --> 00:05:44,504
We must find another way

90
00:05:44,504 --> 00:05:48,840
to represent our, uh, sequential system.

91
00:05:48,840 --> 00:05:53,290
Well, what we are going to
use is a state graph.

92
00:05:53,290 --> 00:05:58,131
The idea is to find states in our system.

93
00:05:58,131 --> 00:06:02,725
So, the states correspond to
the fact that we can say, the

94
00:06:02,725 --> 00:06:06,511
system is, it is in a stable situation.

95
00:06:06,511 --> 00:06:08,490
For example, it is stopped.

96
00:06:08,490 --> 00:06:13,290
it is either standing still or
it is coming down or it is

97
00:06:13,290 --> 00:06:15,564
going up, and in this case, it

98
00:06:15,564 --> 00:06:18,364
is not difficult to find that these

99
00:06:18,364 --> 00:06:20,250
three states are actually presented here.

100
00:06:20,250 --> 00:06:23,632
At each state corresponds clearly the

101
00:06:23,632 --> 00:06:27,220
values, forward and  backward signals.

102
00:06:27,220 --> 00:06:31,800
for the stop, we go forward
and backward that are at zero.

103
00:06:31,800 --> 00:06:37,622
For the descent, forward is at
one and backward is at zero, and it is

104
00:06:37,622 --> 00:06:41,722
the opposite for the rise, backward
is at one and forward is at zero.

105
00:06:41,722 --> 00:06:43,433
What will allow us

106
00:06:43,433 --> 00:06:45,793
to move from the stop state
to the descent state?

107
00:06:45,793 --> 00:06:48,010
Well, we'll call it a transition.

108
00:06:48,010 --> 00:06:50,635
I'll draw, an arrow here, which will

109
00:06:50,635 --> 00:06:53,990
allow us to move from the stop
to the descent.

110
00:06:53,990 --> 00:06:58,360
What is the condition related
to this transition?

111
00:06:58,360 --> 00:07:02,730
Well, of course, it is the start button.

112
00:07:02,730 --> 00:07:08,900
We could ask ourselves the question,
is there a transition that allows

113
00:07:08,900 --> 00:07:10,990
to go downhill?

114
00:07:10,990 --> 00:07:15,037
Well, we realize that with the
scenario that I described

115
00:07:15,037 --> 00:07:18,460
earlier, there is no situation where
we go from descent to stop.

116
00:07:18,460 --> 00:07:22,130
When finished the descent, we
must go up, but we must not stop.

117
00:07:22,130 --> 00:07:25,304
So in fact, this, uh, arrow does
not exist.

118
00:07:25,304 --> 00:07:29,712
So I'll just remove it. There
will be no need to draw it.

119
00:07:29,712 --> 00:07:31,710
Similarly, there will be transitions

120
00:07:31,710 --> 00:07:33,730
from descent to climb, and from
climb to stop.

121
00:07:33,730 --> 00:07:34,220
In such

122
00:07:34,220 --> 00:07:39,120
a way that finally,our state
graph is presented in this way.

123
00:07:39,120 --> 00:07:45,320
I recall, we have the states represented
by, uh, for example, an oval.

124
00:07:45,320 --> 00:07:48,037
We have transitions.

125
00:07:48,037 --> 00:07:54,310
Each state is associated with a name, but
mostly associated with the output values,

126
00:07:54,310 --> 00:07:59,314
and at each transition is associated
a condition for this, so that

127
00:07:59,314 --> 00:08:03,170
this transition is, uh, passed
or validated.

128
00:08:03,170 --> 00:08:07,180
The question now arises is how to realise

129
00:08:07,180 --> 00:08:09,875
with logic circuits which we know,
logic gates

130
00:08:09,875 --> 00:08:13,935
flip-flops, our sequential
system, our state machine,

131
00:08:13,935 --> 00:08:16,520
from the state graph we have described?

132
00:08:16,520 --> 00:08:19,450
Then, the solution is as follows.

133
00:08:19,450 --> 00:08:24,402
Since we have states, and these
states must be maintained, we will

134
00:08:24,402 --> 00:08:28,953
use two flip-flops that will allow
to store

135
00:08:28,953 --> 00:08:32,550
the value of forward and the value
of backward.

136
00:08:32,550 --> 00:08:36,356
We will here provide a clock that is

137
00:08:36,356 --> 00:08:41,185
a certain number of times per
second, continuously, for example,

138
00:08:41,185 --> 00:08:44,920
at a frequency of 100 hertz or 1 kilohertz,

139
00:08:44,920 --> 00:08:48,768
recalculate the new state to
put it on the outputs.

140
00:08:48,768 --> 00:08:49,878
How can we

141
00:08:49,878 --> 00:08:51,506
calculate this new state?

142
00:08:51,506 --> 00:08:54,720
Well, we need a combinatorial system.

143
00:08:54,720 --> 00:08:58,824
Certainly this combinatorial
system will use as input,

144
00:08:58,824 --> 00:09:02,497
the entries of our sequential system,
the famous

145
00:09:02,497 --> 00:09:08,862
signals start, low and high, and they
are not enough, as we saw earlier.

146
00:09:08,862 --> 00:09:14,430
It is also necessary to resume the present
state in order to calculate the future state.

147
00:09:14,430 --> 00:09:15,310
I repeat

148
00:09:15,310 --> 00:09:17,690
the example of a moment ago.

149
00:09:17,690 --> 00:09:20,820
If I'm descending, it is because

150
00:09:20,820 --> 00:09:23,350
I'm descending, that I have to continue.

151
00:09:23,350 --> 00:09:25,420
It is not the entries that tell me it.

152
00:09:25,420 --> 00:09:30,968
And if I were,on the contrary,in the same
situation with start,down and up that are

153
00:09:30,968 --> 00:09:36,332
at zero, but I am in the state of
climbing, I have to keep climbing.

154
00:09:36,332 --> 00:09:40,552
So the present state is reused
to calculate,the

155
00:09:40,552 --> 00:09:41,650
the future state.

156
00:09:41,650 --> 00:09:46,830
And then the future state is present,
here, and it is loaded by the clock stroke

157
00:09:46,830 --> 00:09:49,290
in the two fli-flops which is given,

158
00:09:49,290 --> 00:09:52,956
um, therefore, by this clock, by
this oscillator.

159
00:09:52,956 --> 00:09:58,514
Note that these two flip-flops have the
same clock, and we speak in this case of

160
00:09:58,514 --> 00:10:03,920
synchronous sequential system,
it is the technical term that is used.

161
00:10:03,920 --> 00:10:05,840
We now realize

162
00:10:05,840 --> 00:10:12,000
the combinational system that is therefore
a subset of our sequential system.

163
00:10:12,000 --> 00:10:14,032
It has five entries.

164
00:10:14,032 --> 00:10:20,723
Oh la la, that means it has 32 lines,since
the number of possible combinations

165
00:10:20,723 --> 00:10:25,974
of five entries is two to the
power of five, that is to 32.

166
00:10:25,974 --> 00:10:29,690
obviously, I will not have room on
my board here.

167
00:10:29,690 --> 00:10:30,762
I told you,

168
00:10:30,762 --> 00:10:35,195
however, that, uh, when we talking
about truth table, we were not

169
00:10:35,195 --> 00:10:39,300
not at all obliged to do them
in the traditional binary order.

170
00:10:39,300 --> 00:10:41,156
And in fact, in this case, what i'm

171
00:10:41,156 --> 00:10:43,660
goig to do is that I will try to browse

172
00:10:43,660 --> 00:10:46,928
my state graph, by putting the
values, and we

173
00:10:46,928 --> 00:10:50,580
will see that things will happen
relatively well.

174
00:10:50,580 --> 00:10:56,664
I start by telling myself, I'm
in the stop state,

175
00:10:56,664 --> 00:11:00,900
with backward and forward
which are at zero.

176
00:11:00,900 --> 00:11:04,500
What is, or what the possible
future states of

177
00:11:04,500 --> 00:11:08,010
this stop state? Well, actually,
there are two cases.

178
00:11:08,010 --> 00:11:15,212
There is the case where we will stay at the
stop, and the case where on the contrary,

179
00:11:15,212 --> 00:11:22,302
we will go downhill. You agree
that here it represents

180
00:11:22,302 --> 00:11:24,278
the stop in both cases.

181
00:11:24,278 --> 00:11:27,470
Here, I stay at the stop, I go to
the decent.

182
00:11:27,470 --> 00:11:32,500
I have the same values ​​here.
What will help now

183
00:11:32,500 --> 00:11:37,499
to know whether we should stay at the
standstill, or on the contrary, go down?

184
00:11:37,499 --> 00:11:40,305
Well, it is quite naturally the
start button.

185
00:11:40,305 --> 00:11:42,788
When it is zero, it remains stationary.

186
00:11:42,788 --> 00:11:45,494
When it is at one, we will go down.

187
00:11:45,494 --> 00:11:47,850
And basically, no matter

188
00:11:47,850 --> 00:11:50,850
high or low values, in that case.

189
00:11:50,850 --> 00:11:56,040
And you see that, uh, this way ,
at the bottom of, to notice,

190
00:11:56,040 --> 00:12:01,230
here, with CX, this line actually
represents four lines of the truth table.

191
00:12:01,230 --> 00:12:08,070
Since we  have the combinations
with 0, 0, 0, 1, 1, 0 and 1, 1.

192
00:12:08,070 --> 00:12:10,144
And the same for the next line.

193
00:12:10,144 --> 00:12:12,889
So we can now continue our course of

194
00:12:12,889 --> 00:12:13,690
our graph.

195
00:12:13,690 --> 00:12:18,760
I'll uh, see what happens when I am
in the state "down".

196
00:12:18,760 --> 00:12:24,337
And again there are two possible cases,
the case where I continue to go down

197
00:12:24,337 --> 00:12:29,120
and the casewhere I will instead
go up the rise.

198
00:12:29,120 --> 00:12:35,410
And what will determine if we stay
on the descent or if we go to rise?

199
00:12:35,410 --> 00:12:38,335
Well it is quite naturally the fact
that "low"

200
00:12:38,335 --> 00:12:44,218
is reached or it is not reached.
And again, we do not worry about

201
00:12:44,218 --> 00:12:50,870
the values ​​of "start" and "high"
for this choice of the future state.

202
00:12:50,870 --> 00:12:56,761
And finally, I can now finish
my uh, my journey taking

203
00:12:56,761 --> 00:13:02,460
the case where I am, this time
on the rise, both where I am up.

204
00:13:02,460 --> 00:13:03,516
I can stay

205
00:13:03,516 --> 00:13:08,113
on the rise or on the contrary,
I can go to the stop.

206
00:13:08,113 --> 00:13:15,448
And, this time, it is the top state that
will influence uh, the future state.

207
00:13:15,448 --> 00:13:21,000
And the "start" buttons, the
lowers values ​​are not important.

208
00:13:21,000 --> 00:13:26,670
I finished the course of my state graph.

209
00:13:26,670 --> 00:13:28,638
I have not finished my table

210
00:13:28,638 --> 00:13:29,480
of truth.

211
00:13:29,480 --> 00:13:33,005
I actually had you said that it
was essential that

212
00:13:33,005 --> 00:13:36,260
all cases should be included
in the truth table.

213
00:13:36,260 --> 00:13:40,908
So have to point out this case,
whatever the

214
00:13:40,908 --> 00:13:46,006
values ​​of A um, "high"
"low" and "start".

215
00:13:46,006 --> 00:13:50,298
When I have this at 1 for "advance" and

216
00:13:50,298 --> 00:13:53,997
1 for"backward" is a state
that is not expected.

217
00:13:53,997 --> 00:13:57,474
Therefore, it seems to be a
technical error in some way.

218
00:13:57,474 --> 00:14:00,030
For example, when we feed our setup,

219
00:14:00,030 --> 00:14:02,760
we could by chance end in this state.

220
00:14:02,760 --> 00:14:06,290
And, obviously, in this case,
we must quickly return

221
00:14:06,290 --> 00:14:09,251
to the neutral state of the
system which is the state "off".

222
00:14:09,251 --> 00:14:12,440
And this time, I have a truth
table that is complete.

223
00:14:12,440 --> 00:14:14,992
I have here four lines, four lines, four

224
00:14:14,992 --> 00:14:17,975
lines, four lines, four lines, four lines.

225
00:14:17,975 --> 00:14:18,695
Eight lines.

226
00:14:18,695 --> 00:14:19,235
So I have

227
00:14:19,235 --> 00:14:21,830
well in all my 32 lines of my truth table.

228
00:14:21,830 --> 00:14:27,286
It will be relatively easy now
from this truth table to

229
00:14:27,286 --> 00:14:34,230
find, the logical formula, with the
expressions of Boolean algebra.

230
00:14:34,230 --> 00:14:38,331
This is exactly what we did in
the combinatorial systems.

231
00:14:38,331 --> 00:14:44,268
For example, this 1 here is
the fact that "low"

232
00:14:44,268 --> 00:14:48,200
is at 1, "back" is at 0, "advance"
is at 1.

233
00:14:48,200 --> 00:14:51,518
So "down", "backspace" bar "advance".

234
00:14:51,518 --> 00:14:55,190
I take another example: this 1
here corresponds to the fact

235
00:14:55,190 --> 00:14:59,790
that "down" is at 0, "back" is 0,
"back" is at 0, forward is at 1

236
00:14:59,790 --> 00:15:04,886
"Down" bar "back" bar "advance".
And therefore

237
00:15:04,886 --> 00:15:09,858
"And" logics here to group
the two terms each time

238
00:15:09,858 --> 00:15:15,716
So I have my final formula.
It is easy now to have the

239
00:15:15,716 --> 00:15:23,256
scheme that we will be able to uh, draw with
the doors "or" and with the doors "and."

240
00:15:23,256 --> 00:15:28,840
So here is the logical scheme
we have drawn just now.

241
00:15:28,840 --> 00:15:31,720
You recognize the entries here on switches

242
00:15:31,720 --> 00:15:34,400
with display of values ​​so that
we see well.

243
00:15:34,400 --> 00:15:35,003
The combinatorial system

244
00:15:35,003 --> 00:15:38,930
with the inverters to have
the inverted signals.

245
00:15:38,930 --> 00:15:41,735
The two flip-flops which
will therefore take

246
00:15:41,735 --> 00:15:45,475
the outputs of the gates "or"
to record them.

247
00:15:45,475 --> 00:15:50,475
The clock, which will allow uh,
validate and save the state.

248
00:15:50,475 --> 00:15:54,984
Here, the two outputs "forward"
and "backspace" and the use of

249
00:15:54,984 --> 00:15:59,450
these values ​​for the combinational
system according therefore, to the diagram.

250
00:15:59,450 --> 00:16:00,708
So now,

251
00:16:00,708 --> 00:16:05,724
we are going to put ourselves in
a realistic situation: the drill is up

252
00:16:05,724 --> 00:16:10,820
and the user uh, will soon
press the button "start".

253
00:16:10,820 --> 00:16:15,204
And when it presses the "start"
button, here, the next time

254
00:16:15,204 --> 00:16:19,380
the clock is pressed, we go into
well in the "advance" mode.

255
00:16:19,380 --> 00:16:22,507
We can press again on the clock,
it does not change anything.

256
00:16:22,507 --> 00:16:25,510
As the system goes down,
it will leave the "high".

257
00:16:25,510 --> 00:16:29,860
There is still nothing happening.

258
00:16:29,860 --> 00:16:32,869
The user will stop pressing
the button "start"

259
00:16:32,869 --> 00:16:35,360
since he sees that the start has
been made.

260
00:16:35,360 --> 00:16:36,504
There is still nothing happening at the

261
00:16:36,504 --> 00:16:38,720
output, we do not change state,
we always go down.

262
00:16:38,720 --> 00:16:41,063
Until we arrive down and at

263
00:16:41,063 --> 00:16:44,684
that time we actually going to rise,
"backward"

264
00:16:44,684 --> 00:16:47,470
is activated on and we will
maintain this state despite the

265
00:16:47,470 --> 00:16:50,940
fact that will leave the bottom
since the drill goes up.

266
00:16:50,940 --> 00:16:56,498
And it is only when we arrive
at the top that the system

267
00:16:56,498 --> 00:17:02,010
will be found in the initial
state where we stopped.

268
00:17:02,010 --> 00:17:04,530
It's fine to have done the simulation,

269
00:17:04,530 --> 00:17:07,512
but we now want to make this setup.

270
00:17:07,512 --> 00:17:10,860
Realize it in a concrete way
with logic integrated circuits

271
00:17:10,860 --> 00:17:14,170
as discussed in the last chapters.

272
00:17:14,170 --> 00:17:16,060
So here is our complete scheme

273
00:17:16,060 --> 00:17:19,520
with the block diagram and the
details of the combinatorial system.

274
00:17:19,520 --> 00:17:25,905
To realize the clock, we could
use a circuit of type NE555.

275
00:17:25,905 --> 00:17:30,750
Those who have done a little bit
electronics know it very well.

276
00:17:30,750 --> 00:17:36,254
And for the record, this is the most
manufactured integrated circuit

277
00:17:36,254 --> 00:17:41,220
in the world since its conception
some forty

278
00:17:41,220 --> 00:17:45,075
years ago and I add that its design
was made by a swiss engineer

279
00:17:45,075 --> 00:17:48,770
who worked at the time in the
American company Signetics.

280
00:17:48,770 --> 00:17:54,740
To make the flip-flops the two
flip-flops that

281
00:17:54,740 --> 00:18:00,885
we have here, we will use a
circuit, for example,

282
00:18:00,885 --> 00:18:06,272
of th type 74HC74. To realize
the combinatorial system

283
00:18:06,272 --> 00:18:12,817
shown here, we will use an integrated
circuit which contains three-

284
00:18:12,817 --> 00:18:20,430
input NAND gate. This circuit is called 74HC10.

285
00:18:20,430 --> 00:18:25,630
It will even been necessary to use two of
these integrated circuits in order to have these

286
00:18:25,630 --> 00:18:31,402
two doors and it will also be
necessary to use a circuit

287
00:18:31,402 --> 00:18:38,825
of the 74HC04 type that will
provide the inverters

288
00:18:38,825 --> 00:18:44,135
needed for the different values
​​which are inverted at the input.

289
00:18:44,135 --> 00:18:50,235
So finally, if I count one, two,
three,four, five

290
00:18:50,235 --> 00:18:55,780
integrated circuits to realise this small
controller that therefore controls our drill.

291
00:18:55,780 --> 00:18:56,492
It is no longer

292
00:18:56,492 --> 00:18:59,429
a scheme worthy of the XXI century .

293
00:18:59,429 --> 00:19:05,078
Today, we are able to realize
with a single integrated circuit.

294
00:19:05,078 --> 00:19:08,191
Today there is a simpler solution than

295
00:19:08,191 --> 00:19:11,590
the solution that uses
traditional logic circuits.

296
00:19:11,590 --> 00:19:16,050
And you've probably guessed,
this solution is a microcontroller.

297
00:19:16,050 --> 00:19:21,808
This microcontroller has just the
legs that suit us well: the mass, the VCC

298
00:19:21,808 --> 00:19:24,870
for both power supplies.

299
00:19:24,870 --> 00:19:28,630
These three legs can be used as inputs.

300
00:19:28,630 --> 00:19:31,990
Both legs can be used as outputs.

301
00:19:31,990 --> 00:19:34,197
And here we even have a "reset"
function that

302
00:19:34,197 --> 00:19:37,795
can be used for example for the
emergency stop of our drill.

303
00:19:37,795 --> 00:19:41,890
I present here even the scheme of
implementation of this integrated circuit.

304
00:19:41,890 --> 00:19:46,020
It's extremely simple, we have
to plug it in.

305
00:19:46,020 --> 00:19:46,944
Must be added

306
00:19:46,944 --> 00:19:49,782
some discrete components: a resistance and

307
00:19:49,782 --> 00:19:52,330
a capacitor, that is very little thing.

308
00:19:52,330 --> 00:19:56,130
And we can enter here with
the three signals.

309
00:19:56,130 --> 00:19:58,280
We will here the outputs.

310
00:19:58,280 --> 00:20:01,272
So it remains a little bit mysterious part

311
00:20:01,272 --> 00:20:04,624
which is that part with this
programming connector.

312
00:20:04,624 --> 00:20:08,410
We will have obviously the opportunity
to talk about it, in more details.

313
00:20:08,410 --> 00:20:12,410
It should be noted that when
you buy this integrated circuit,

314
00:20:12,410 --> 00:20:15,060
your installation will not work

315
00:20:15,060 --> 00:20:17,551
because a microcontroller must
be programmed

316
00:20:17,551 --> 00:20:18,929
and this is precisely the aim of this

317
00:20:18,929 --> 00:20:21,950
course, learn also to program
these microcontrollers.

318
00:20:21,950 --> 00:20:27,584
So I tried it, the experience of
programming a

319
00:20:27,584 --> 00:20:33,190
microcontroller according to the logic
that inspired by this scheme.

320
00:20:33,190 --> 00:20:37,180
This program I wrote is not optimal.

321
00:20:37,180 --> 00:20:37,855
We'll see

322
00:20:37,855 --> 00:20:41,005
in some lessons more elegant ways

323
00:20:41,005 --> 00:20:46,328
to write this program but it
works perfectly well.

324
00:20:46,328 --> 00:20:50,808
Note that the clock here, which allows
many

325
00:20:50,808 --> 00:20:54,390
times per second, to recalculate
the current state.

326
00:20:54,390 --> 00:20:58,002
It is, at bottom, given by this
information

327
00:20:58,002 --> 00:21:00,930
here, loop,with a beginning and an end.

328
00:21:00,930 --> 00:21:03,198
This program will actually be repeated

329
00:21:03,198 --> 00:21:04,080
permanently.

330
00:21:04,080 --> 00:21:07,545
This will play a similar role as the clock.

331
00:21:07,545 --> 00:21:11,660
Now, the inputs here must be read, we

332
00:21:11,660 --> 00:21:15,034
have procedures to read these signals.

333
00:21:15,034 --> 00:21:18,388
For the start, from the "start" tab, for

334
00:21:18,388 --> 00:21:21,468
the bottom, from the "bottom" tab
and so on.

335
00:21:21,468 --> 00:21:23,102
Same for the top.

336
00:21:23,102 --> 00:21:27,795
Then we have our combinatorial
system that we will have to program.

337
00:21:27,795 --> 00:21:28,510
We recognize

338
00:21:28,510 --> 00:21:30,655
here the formulas of just now except

339
00:21:30,655 --> 00:21:33,400
that the syntax is a little bit different.

340
00:21:33,400 --> 00:21:35,116
That is the logical "and".

341
00:21:35,116 --> 00:21:39,180
That is the logical "or" and this isthe logical
"inversion" logic.

342
00:21:39,180 --> 00:21:40,908
And finally, there is therefore our

343
00:21:40,908 --> 00:21:44,666
signals "ForwardPlus" and "BackwardPlus"
which corresponds

344
00:21:44,666 --> 00:21:49,130
therefore to the outputs of the combinatorial
system and thus to the inputs of flip-flops.

345
00:21:49,130 --> 00:21:54,515
It must now be implemented in the
flip-flops in the form of recording

346
00:21:54,515 --> 00:21:56,720
the value which has just been
calculated in

347
00:21:56,720 --> 00:21:59,900
a variable "forward" and the same
for "backward."

348
00:21:59,900 --> 00:22:02,690
And finally, the ouputs must be made

349
00:22:02,690 --> 00:22:06,844
available outside of the circuit by
the procedure "digitalWrite"

350
00:22:06,844 --> 00:22:10,372
indicating that the "forward"
signal must be copied to the

351
00:22:10,372 --> 00:22:14,895
tab which corresponds to the "forward"
and the same for "backward."

352
00:22:14,895 --> 00:22:20,034
So we have discovered a little bit the
sequential systems by looking at how

353
00:22:20,034 --> 00:22:22,452
it is possible to describe them with a

354
00:22:22,452 --> 00:22:25,864
state graph, to realise them
with a machine

355
00:22:25,864 --> 00:22:29,300
of state, which physical
realization is sometimes a

356
00:22:29,300 --> 00:22:32,430
little complicated with logical
gates and flip-flops.

357
00:22:32,430 --> 00:22:35,454
And finally, we also saw that the
microcontroller

358
00:22:35,454 --> 00:22:41,240
was going to help us to realize in a
simpler way such a setup.

