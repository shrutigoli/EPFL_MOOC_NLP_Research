1
00:00:05,360 --> 00:00:05,900
Hello.

2
00:00:05,900 --> 00:00:08,840
When working with microcontrollers, one

3
00:00:08,840 --> 00:00:11,660
of biggest difficulties is to make the

4
00:00:11,660 --> 00:00:14,181
the programs we have written, to find

5
00:00:14,181 --> 00:00:18,470
the breakdowns that are inside,
to troubleshoot.

6
00:00:18,470 --> 00:00:23,670
It is also sometimes referred to
as debugging or debugging,

7
00:00:23,670 --> 00:00:28,928
but it is certainly the English term
"debug" which is the most used.

8
00:00:28,928 --> 00:00:30,424
I recall that there

9
00:00:30,424 --> 00:00:34,780
are several ways to program
a microcontroller.

10
00:00:34,780 --> 00:00:37,100
The technique that is used in

11
00:00:37,100 --> 00:00:40,870
the Arduino uses what is called
a bootloader.

12
00:00:40,870 --> 00:00:44,940
This is a program that must be
present on the microcontroller

13
00:00:44,940 --> 00:00:50,530
and which allows to load another
program in this same microcontroller.

14
00:00:50,530 --> 00:00:53,070
It is also one of the constraints,

15
00:00:53,070 --> 00:00:56,360
we can not buy a microcontroller

16
00:00:56,360 --> 00:01:00,066
naked, brand new, as the manufacturer
the book.

17
00:01:00,066 --> 00:01:01,966
It will not work on an

18
00:01:01,966 --> 00:01:06,884
Arduino since it must first install
a bootloader.

19
00:01:06,884 --> 00:01:10,404
There are also programmers, one that

20
00:01:10,404 --> 00:01:13,560
is used for MSP430, for example.

21
00:01:13,560 --> 00:01:16,344
The ISP mode that is used for

22
00:01:16,344 --> 00:01:21,332
AVR and which allows a first
programming of an Arduino.

23
00:01:21,332 --> 00:01:26,640
You remember, we have our schema,
our montage, we have here,

24
00:01:26,640 --> 00:01:32,640
something that allows us to connect
to the PC to do the programming.

25
00:01:32,640 --> 00:01:34,980
Most programmers can

26
00:01:34,980 --> 00:01:37,700
simply program the microcontroller.

27
00:01:37,700 --> 00:01:39,844
But some programmers have

28
00:01:39,844 --> 00:01:42,457
additional features that offer this

29
00:01:42,457 --> 00:01:47,336
possibility to, somehow, see inside
the microcontroller,

30
00:01:47,336 --> 00:01:50,630
see what happens in our microcontroller.

31
00:01:50,630 --> 00:01:57,000
Historically, JTAG systems have
often been used.

32
00:01:57,000 --> 00:01:59,280
This is a term you should know, we

33
00:01:59,280 --> 00:02:02,170
often talks about it in relation
to microcontrollers.

34
00:02:02,170 --> 00:02:05,905
We can program AVRs with JTAG interfaces.

35
00:02:05,905 --> 00:02:10,710
ARMs are almost always
programmed with this technology.

36
00:02:10,710 --> 00:02:12,894
There are also

37
00:02:12,894 --> 00:02:17,158
specific systems invented by
some manufacturers, for

38
00:02:17,158 --> 00:02:20,890
example, the debugWire system of the AVR.

39
00:02:20,890 --> 00:02:25,090
It is pretty awesome because it
uses only one tab, the

40
00:02:25,090 --> 00:02:29,173
Reset tab, but in a special mode
and thus allows not only

41
00:02:29,173 --> 00:02:32,953
to program the microcontroller, but also
to follow what is happening

42
00:02:32,953 --> 00:02:38,230
inside, and ithat's going to be a huge
help to do the troubleshooting,

43
00:02:38,230 --> 00:02:39,120
debugging.

44
00:02:39,120 --> 00:02:44,487
In this case, use the Dragon
programmer proposed by Atmel.

45
00:02:44,487 --> 00:02:51,920
It happens that the  MSP430 launchpad
also contains one of these

46
00:02:51,920 --> 00:02:57,800
advanced programmers which allows you to
watch what happens inside the microcontroller.

47
00:02:57,800 --> 00:02:59,681
These devices were until recently

48
00:02:59,681 --> 00:03:02,189
reserved for professionals.

49
00:03:02,189 --> 00:03:03,443
These were

50
00:03:03,443 --> 00:03:07,256
extremely expensive, and the fact
that they are available on the launchpad

51
00:03:07,256 --> 00:03:11,380
at a very attractive price is, ah,
an advantage, ah, of size.

52
00:03:11,380 --> 00:03:16,845
Obviously, a given programmer can be used

53
00:03:16,845 --> 00:03:22,310
in its debug function, provided that
the corresponding software is used.

54
00:03:22,310 --> 00:03:28,490
In the case of the MSP430 from
Texas Instrument it is the software

55
00:03:28,490 --> 00:03:35,560
Code Composer Studio, which you can see
here, a general view that allows to do this

56
00:03:35,560 --> 00:03:42,430
programming with debug. You
recognize this type of environment.

57
00:03:42,430 --> 00:03:45,452
Here we see the files that are associated

58
00:03:45,452 --> 00:03:48,250
with the project that is being carried out.

59
00:03:48,250 --> 00:03:53,695
Here is the source of the program
we write, and then there will be

60
00:03:53,695 --> 00:03:58,680
the console which for example, will give us,
the result of the compilation, with

61
00:03:58,680 --> 00:04:01,128
possible errors, and there are

62
00:04:01,128 --> 00:04:04,370
here, too, a window with various aids.

63
00:04:04,370 --> 00:04:06,892
Let's try to create step by step, a

64
00:04:06,892 --> 00:04:11,410
project with this Code Composer Studio
environment.

65
00:04:11,410 --> 00:04:14,412
The first thing to do is to

66
00:04:14,412 --> 00:04:18,922
go to File, select New, then CCS Project.

67
00:04:18,922 --> 00:04:22,036
So we will create a project that

68
00:04:22,036 --> 00:04:26,452
will later contain one or more source files.

69
00:04:26,452 --> 00:04:28,170
So CCS Project.

70
00:04:28,170 --> 00:04:31,368
The next menu, uh, asks us to give

71
00:04:31,368 --> 00:04:35,730
the name to the project, the
extension is given automatically.

72
00:04:35,730 --> 00:04:38,964
As usual, click Next.

73
00:04:38,964 --> 00:04:44,540
There are still two windows on
which you just click Next, and I stop

74
00:04:44,540 --> 00:04:47,420
here, on the third window, in which

75
00:04:47,420 --> 00:04:49,980
It is necessary to give an answer.

76
00:04:49,980 --> 00:04:54,430
We must choose the microcontroller
that we will use.

77
00:04:54,430 --> 00:04:58,005
If we simply click in the list,
the list is very long.

78
00:04:58,005 --> 00:05:01,476
It is a bit difficult to find the
processor that interests us.

79
00:05:01,476 --> 00:05:03,960
So, what's easier is to choose from

80
00:05:03,960 --> 00:05:10,550
this family, in this list of families,
the family MSP430G

81
00:05:10,550 --> 00:05:13,270
which is the one that corresponds
to the launchpad.

82
00:05:13,270 --> 00:05:16,702
And then we roll out a list that is
shorter and

83
00:05:16,702 --> 00:05:22,248
the processor that is originally
on the launchpad, is this one, the 53.

84
00:05:22,248 --> 00:05:25,750
Then, just choose Next.

85
00:05:25,750 --> 00:05:29,276
So we created a project, and we have

86
00:05:29,276 --> 00:05:32,910
not yet create a source file associated
with this project.

87
00:05:32,910 --> 00:05:35,750
And it is necessary to click,
with the right button

88
00:05:35,750 --> 00:05:38,650
, on the project name, to choose

89
00:05:38,650 --> 00:05:44,390
again, new, and this time,
to choose Source File, source file.

90
00:05:44,390 --> 00:05:48,500
Then we have the menu where
we have to give the name of the file.

91
00:05:48,500 --> 00:05:51,855
Do not forget to give the extension
point C, since it will be

92
00:05:51,855 --> 00:05:54,827
of a file point C, and then we

93
00:05:54,827 --> 00:05:57,750
are with an empty page in which

94
00:05:57,750 --> 00:06:01,340
it is enough to write the program
we want to write.

95
00:06:01,340 --> 00:06:05,360
I have taken as an example,
for this demonstration,

96
00:06:05,360 --> 00:06:09,560
a source that it is important
to be able to calibrate.

97
00:06:09,560 --> 00:06:14,533
This is the, the use of an
infrared distance sensor, and

98
00:06:14,533 --> 00:06:17,582
at some point, a little waitting period
is required so

99
00:06:17,582 --> 00:06:23,130
that, overall, the measurement time
corresponds to the

100
00:06:23,130 --> 00:06:26,826
discharge time of the capacity
under the conditions of work,

101
00:06:26,826 --> 00:06:30,230
and you have to adjust that value.

102
00:06:30,230 --> 00:06:33,182
So it will be very interesting
to be able to

103
00:06:33,182 --> 00:06:36,620
visualize what is going to render
our procedure

104
00:06:36,620 --> 00:06:41,690
and we will see that it will be very
easy to do it, thanks to the debugger.

105
00:06:41,690 --> 00:06:47,132
When the source is ready,
click in Project,

106
00:06:47,132 --> 00:06:52,502
then Build Active Project.
So we are building the project.

107
00:06:52,502 --> 00:06:56,530
This is the theme that is used for
compilation, followed by

108
00:06:56,530 --> 00:07:01,170
the steps that follow the compilation
party, especially, ah, link editing.

109
00:07:01,170 --> 00:07:06,230
In this case, there were no errors,
we see, here, Build Complete.

110
00:07:06,230 --> 00:07:11,370
On the other hand, there was a Warning,
a warning that is also quite

111
00:07:11,370 --> 00:07:14,480
relevant, since my main program

112
00:07:14,480 --> 00:07:19,690
says this: Equal Measurement Distance
Measurement,

113
00:07:19,690 --> 00:07:23,020
but nothing is done for this moment.

114
00:07:23,020 --> 00:07:25,170
So it is not used.

115
00:07:25,170 --> 00:07:30,434
And it is very interesting to be able,
, to launch this program despite all,

116
00:07:30,434 --> 00:07:35,761
which we will then stop and we
will look at the

117
00:07:35,761 --> 00:07:39,494
measured value without needing
to take care of putting

118
00:07:39,494 --> 00:07:41,664
additional material around our

119
00:07:41,664 --> 00:07:45,670
microcontroller to display this
measured value.

120
00:07:45,670 --> 00:07:50,078
We will launch the environment
of Debug thanks

121
00:07:50,078 --> 00:07:54,494
to the Target selection, then
to the Debug Active Project.

122
00:07:54,494 --> 00:07:58,020
Target is therfore the target,
we often talk about

123
00:07:58,020 --> 00:08:01,710
target system for, uh, these
microcontroller systems.

124
00:08:01,710 --> 00:08:06,900
So, we will troubleshoot the active
project on the target system.

125
00:08:06,900 --> 00:08:10,660
And we are, after a few tens of seconds,

126
00:08:10,660 --> 00:08:16,284
I should say, it takes a little bit of time;
the environment must

127
00:08:16,284 --> 00:08:22,545
switch, must change, the programmer
must send the code inside

128
00:08:22,545 --> 00:08:27,534
the microcontroller and when all these
operations have been completed, we

129
00:08:27,534 --> 00:08:31,480
are in an environment a little bit
different from earlier.

130
00:08:31,480 --> 00:08:35,846
Somewhere, in a little window
we find the source

131
00:08:35,846 --> 00:08:38,500
of the program we have just written.

132
00:08:38,500 --> 00:08:42,490
We find here, uh, the messages
coming from a console.

133
00:08:42,490 --> 00:08:45,278
Here we find the instructions ta,
translated

134
00:08:45,278 --> 00:08:47,970
into assembler, that can be
extremely useful,

135
00:08:47,970 --> 00:08:49,710
and we will find, here, names of

136
00:08:49,710 --> 00:08:52,390
variables, which will be extremely
interesting.

137
00:08:52,390 --> 00:08:57,650
For the moment, the program
does not run yet,,

138
00:08:57,650 --> 00:09:00,887
it will be necessary, here,
to click on the Run button

139
00:09:00,887 --> 00:09:03,460
which is a small green arrow that will

140
00:09:03,460 --> 00:09:07,820
allow to launch the program
inside the microcontroller.

141
00:09:07,820 --> 00:09:13,280
Once the program is launched,
we will not see anything at all.

142
00:09:13,280 --> 00:09:13,880
Why?

143
00:09:13,880 --> 00:09:17,730
Our program runs inside the
microcontroller, it does

144
00:09:17,730 --> 00:09:21,130
its distance measurements,
but it does not display them.

145
00:09:21,130 --> 00:09:26,010
It will therefore be necessary to stop
the execution of the program.

146
00:09:26,010 --> 00:09:27,922
Here, there is an Alt key that

147
00:09:27,922 --> 00:09:31,380
you will find, which allows
you to stop the program.

148
00:09:31,380 --> 00:09:35,234
So, the Alt key, this key is just

149
00:09:35,234 --> 00:09:38,970
between the Run and the complete
shutdown of the Debug system.

150
00:09:38,970 --> 00:09:42,760
Once the program is stopped, we

151
00:09:42,760 --> 00:09:47,090
see here the place where the
program stopped.

152
00:09:47,090 --> 00:09:51,540
It so happened that it was in this
waiting loop when he stopped.

153
00:09:51,540 --> 00:09:59,187
We see that local variables, here,
i and j have a certain

154
00:09:59,187 --> 00:10:05,850
value. The distance is the same as the j.

155
00:10:05,850 --> 00:10:08,442
we are in the middle of the

156
00:10:08,442 --> 00:10:13,210
distance measurement, so it is not
at all interesting information.

157
00:10:13,210 --> 00:10:16,572
What we are going to do now is that
we will

158
00:10:16,572 --> 00:10:20,400
create a breakpoint inside the program.

159
00:10:20,400 --> 00:10:23,130
In English, we call it a break point.

160
00:10:23,130 --> 00:10:29,151
So I'm going to click on this
line here, which is the end of

161
00:10:29,151 --> 00:10:35,242
the procedure and which gives the Return
Distance instruction, with the right button.

162
00:10:35,242 --> 00:10:37,850
I'll choose New Breakpoint.

163
00:10:37,850 --> 00:10:42,040
I will choose Breakpoint, and at
that time,

164
00:10:42,040 --> 00:10:48,020
my program will have to stop if
it goes to that place.

165
00:10:48,020 --> 00:10:53,304
So I will give up the execution and
when it

166
00:10:53,304 --> 00:10:58,580
will stop, I will see the result
inside my microcontroller.

167
00:10:58,580 --> 00:11:05,332
It's right here, that I stopped, therefore,
just at the level of the return distance.

168
00:11:05,332 --> 00:11:07,066
I have the

169
00:11:07,066 --> 00:11:08,820
values ​​of i and j again.

170
00:11:08,820 --> 00:11:15,130
The j has arrived at 254, so we are well
at the end of the measurement loop.

171
00:11:15,130 --> 00:11:18,202
On the other hand, we have here
the value that

172
00:11:18,202 --> 00:11:22,280
has actually been read, which is
the value 41.

173
00:11:22,280 --> 00:11:27,498
So, depending on the object
I had placed in front of my sensor,

174
00:11:27,498 --> 00:11:32,608
I see that the value 41 has been given.
I will be able to make other

175
00:11:32,608 --> 00:11:36,720
tests in this way to possibly
calibrate my program.

176
00:11:36,720 --> 00:11:38,610
I think you realize

177
00:11:38,610 --> 00:11:42,070
that it is extremely powerful,
as a way of working

178
00:11:42,070 --> 00:11:44,694
since we can, in a way, go and see

179
00:11:44,694 --> 00:11:47,650
inside the microcontroller, what happens.

180
00:11:47,650 --> 00:11:51,376
When we write complex programs,
you can suddenly

181
00:11:51,376 --> 00:11:54,910
lose control, no longer very
well know what is happening.

182
00:11:54,910 --> 00:11:57,630
It is always possible, with this device,

183
00:11:57,630 --> 00:12:01,630
to stop the execution, to go to
see variables.

184
00:12:01,630 --> 00:12:03,864
It is also possible to take step

185
00:12:03,864 --> 00:12:06,440
by step, which is also extremely interesting.

186
00:12:06,440 --> 00:12:07,952
What we have just seen

187
00:12:07,952 --> 00:12:12,090
was considered professional tools

188
00:12:12,090 --> 00:12:18,780
quite expensive and unaffordable
for students and amateurs.

189
00:12:18,780 --> 00:12:22,666
Today, they are inexpensive
technologies and I

190
00:12:22,666 --> 00:12:27,858
strongly encourage you to learn how to
use them, to master them, you will be

191
00:12:27,858 --> 00:12:32,720
much more effective for
development-microcontroller.

