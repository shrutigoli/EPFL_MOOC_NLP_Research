1
00:00:00,000 --> 00:00:09,034
Hello, let's talk about the development
of your programs, and I assume

2
00:00:09,034 --> 00:00:14,930
you are rather a beginner user, and
you use Arduino or Energia.

3
00:00:14,930 --> 00:00:20,298
Professionals use much more
complex tools, which include some

4
00:00:20,298 --> 00:00:26,410
developer they become popular and we
will see one in the next sequence.

5
00:00:26,410 --> 00:00:29,146
What is  needed is knowing

6
00:00:29,146 --> 00:00:35,018
how to structure programs, understand
error messages, imagine

7
00:00:35,018 --> 00:00:40,026
solutions for, observe the program,
and not

8
00:00:40,026 --> 00:00:45,408
disrupt its real-time execution in
some applications.

9
00:00:45,408 --> 00:00:48,288
Your program has a structure
schematized here, it

10
00:00:48,288 --> 00:00:51,680
is necessary to start by putting
a name, a date,

11
00:00:51,680 --> 00:00:56,280
so that if it is printed, you find on
what folder it will be located.

12
00:00:56,280 --> 00:01:01,434
Then you have the description
of the material with

13
00:01:01,434 --> 00:01:06,282
includes, it's very important to choose

14
00:01:06,282 --> 00:01:11,960
explicit names, as we have saw it,
and to fully initialize the material.

15
00:01:11,960 --> 00:01:13,960
This will be done in the set up.

16
00:01:13,960 --> 00:01:16,976
And now, the functions used in
the program,

17
00:01:16,976 --> 00:01:20,917
Some are called in the set-up,
to initialize, and

18
00:01:20,917 --> 00:01:26,560
they are obviously found, in
the programming loop.

19
00:01:26,560 --> 00:01:31,370
And these functions, of course,
very often, call functions

20
00:01:31,370 --> 00:01:35,766
of lowest level, which refer
to the material.

21
00:01:35,766 --> 00:01:42,185
What is important is to progress in
small steps, to test

22
00:01:42,185 --> 00:01:49,420
the material and definitions and
the functions independently.

23
00:01:49,420 --> 00:01:54,844
It is also important to keep the older
versions, with

24
00:01:54,844 --> 00:02:00,080
numbers, or a chronology; very often,
we suddenly lose the pedals,

25
00:02:00,080 --> 00:02:03,768
saying but why does it work anymore,
I made a

26
00:02:03,768 --> 00:02:07,304
very small step of nothing at all,
is it the material

27
00:02:07,304 --> 00:02:08,600
which has deteriorated?

28
00:02:08,600 --> 00:02:13,938
So it's very useful to be able
to go up,take a

29
00:02:13,938 --> 00:02:19,353
previous version, re-test basic
hardware routines, and regain

30
00:02:19,353 --> 00:02:24,779
confidence gradually, to find
the error in the latest version.

31
00:02:24,779 --> 00:02:29,255
Compilation errors are often quite
surprising, you

32
00:02:29,255 --> 00:02:32,488
forget a semicolon, you can have a

33
00:02:32,488 --> 00:02:38,413
relatively clear message, the next
statement is "delay"; but if you find one

34
00:02:38,413 --> 00:02:44,560
"63 can not be used as a function"
there is no 63 in your program, and

35
00:02:44,560 --> 00:02:51,340
what is to be noticed is that there is,
on the other hand, a binary word,whose

36
00:02:51,340 --> 00:02:57,982
value is 63, where the semicolon has
been forgotten at the end, and that is

37
00:02:57,982 --> 00:03:00,960
how the compiler responded.

38
00:03:00,960 --> 00:03:05,733
A forgotten comma, can indeed,
we can understand that

39
00:03:05,733 --> 00:03:08,857
it's lacking arguments, but we really ask

40
00:03:08,857 --> 00:03:11,280
the question when, suddenly, there are

41
00:03:11,280 --> 00:03:15,790
destructors, that have not
appeared in your program.

42
00:03:15,790 --> 00:03:18,830
The typos, most frequently, it's the

43
00:03:18,830 --> 00:03:22,988
lowercase, uppercase, which causes the

44
00:03:22,988 --> 00:03:29,416
symbol not to be declared, whenever
you have a symbol

45
00:03:29,416 --> 00:03:34,730
which is not recognized by the compiler,
well it will get you this message.

46
00:03:34,730 --> 00:03:37,764
Well, the worst part is when you have

47
00:03:37,764 --> 00:03:41,328
errors that were not recognized
by the compiler.

48
00:03:41,328 --> 00:03:44,064
Well, the most frequent is when you

49
00:03:44,064 --> 00:03:48,120
write a condition is to forget the
double equal sign,

50
00:03:48,120 --> 00:03:51,474
for the compiler, this is an expression
that

51
00:03:51,474 --> 00:03:54,162
has a value, it has the value 0, so the if

52
00:03:54,162 --> 00:03:57,418
will always be false here, whatever
the value of

53
00:03:57,418 --> 00:04:02,864
aa, obviously, it might deflect
your program.

54
00:04:02,864 --> 00:04:08,419
Then, you write a value like 78,
you strongly tend

55
00:04:08,419 --> 00:04:13,828
to tell you that it is a decimal
number and then forget to mark

56
00:04:13,828 --> 00:04:19,210
the 0x ahead, which obviously will
not give the same numeric value at all.

57
00:04:19,210 --> 00:04:24,192
The missing parentheses, it is
clear that if you write

58
00:04:24,192 --> 00:04:29,266
a plus 1, shifted by 2, is is it

59
00:04:29,266 --> 00:04:34,020
a plus 1, let's take the example
in which a is worth 3, well that, that

60
00:04:34,020 --> 00:04:39,016
would make 4, shifted by 2,
it would make 16, 4, 8,

61
00:04:39,016 --> 00:04:44,350
16. So if you put the parenthesis

62
00:04:44,350 --> 00:04:49,424
differently, a plus 1 offset of 2,
1 offset of 2, well,

63
00:04:49,424 --> 00:04:54,220
it is 4, we had decided it was 3,
here you will have the value 7.

64
00:04:54,220 --> 00:04:59,360
So, what the compiler does, by default, it

65
00:04:59,360 --> 00:05:04,024
has rules of priority, the simplest, well,

66
00:05:04,024 --> 00:05:08,220
is to respect the right solution,
and then you can

67
00:05:08,220 --> 00:05:11,380
check, with a small test program,
what is being done.

68
00:05:11,380 --> 00:05:15,595
A little more delicate of the times,
it is the incorrect types.

69
00:05:15,595 --> 00:05:18,597
There are conversions of types that have

70
00:05:18,597 --> 00:05:21,919
not been explained to you, there is
the volatile, that was mentioned, there

71
00:05:21,919 --> 00:05:24,484
is the static, which has been
misunderstood, so there is

72
00:05:24,484 --> 00:05:29,116
in fact, a whole level, of the
C language, that a professional

73
00:05:29,116 --> 00:05:34,100
need, and then that we have partially
not had time to explain well.

74
00:05:34,100 --> 00:05:40,216
Now, your compilation is correct,
electrically, you

75
00:05:40,216 --> 00:05:46,326
may have problems on the
input-output tab, you must

76
00:05:46,326 --> 00:05:48,990
have zero, which are less than one

77
00:05:48,990 --> 00:05:52,106
volt, of the 1 which are greater than
three volts.

78
00:05:52,106 --> 00:05:54,614
It may happen for you to have a bad

79
00:05:54,614 --> 00:05:59,772
level because you have asked for too much
current on an output and if you ask

80
00:05:59,772 --> 00:06:03,040
for current, the voltage will
naturally rise, if

81
00:06:03,040 --> 00:06:07,136
it's a short circuit, it's clear that
it's catastrophic.

82
00:06:07,136 --> 00:06:10,142
A floating state can take all
values ​​between 0 and

83
00:06:10,142 --> 00:06:13,163
5 volts, you remember, if you
touch with your finger,

84
00:06:13,163 --> 00:06:16,216
well, it's going to take the finger tension,
fortunately with

85
00:06:16,216 --> 00:06:20,200
protective diodes, which makes
that if you are slightly electrostatic,

86
00:06:20,200 --> 00:06:25,080
it will remain in the range
of 0 to 5 volts.

87
00:06:25,080 --> 00:06:30,146
The signals can be pulsed, it is
more difficult to observe them

88
00:06:30,146 --> 00:06:35,363
with a voltmeter, but with a logical
pencil, a "logic probe" which

89
00:06:35,363 --> 00:06:40,262
offers you the possibility to have
a red diode, a green LED to show

90
00:06:40,262 --> 00:06:45,953
the logic signals, and logic, which will
convert the

91
00:06:45,953 --> 00:06:50,174
short pulses, into longer visible
pulses on these

92
00:06:50,174 --> 00:06:53,930
diodes, you have a good way to observe
the signals.

93
00:06:53,930 --> 00:06:58,105
The ideal, of course, is the oscilloscope,
which will show you

94
00:06:58,105 --> 00:07:02,280
both analog levels and pulses.

95
00:07:02,280 --> 00:07:07,280
Do you feel that you have a critical
behavior in your system?

96
00:07:07,280 --> 00:07:11,590
The rule I am applying is to change
the tension.

97
00:07:11,590 --> 00:07:13,570
If indeed, due to bad

98
00:07:13,570 --> 00:07:16,288
levels, due to different conditions, to

99
00:07:16,288 --> 00:07:19,683
delays, for example, the behavior does not

100
00:07:19,683 --> 00:07:23,585
seem not to be perfectly repetitive,
or not

101
00:07:23,585 --> 00:07:26,915
identical to a copy of the program, in

102
00:07:26,915 --> 00:07:30,414
another system, you change the voltage,

103
00:07:30,414 --> 00:07:33,230
and all circuits must be very

104
00:07:33,230 --> 00:07:36,636
tolerant to the current tension, it must

105
00:07:36,636 --> 00:07:39,831
work, if it is guaranteed 5 volts, it must

106
00:07:39,831 --> 00:07:42,590
in any case operate from 4 to 5 volts
and a half.

107
00:07:42,590 --> 00:07:47,960
Well, you still have a problem
now with your program,

108
00:07:47,960 --> 00:07:53,322
and a solution is to remove parts
of the program,

109
00:07:53,322 --> 00:07:57,921
thinking, well, maybe the error is
in that part, then

110
00:07:57,921 --> 00:08:01,854
you have an ease of Arduino,
which you find in the menu

111
00:08:01,854 --> 00:08:05,126
editing, which is to comment, uncomment.

112
00:08:05,126 --> 00:08:08,031
So here, in this period,well we

113
00:08:08,031 --> 00:08:13,110
had, deleted, commented on part
of the program, and then

114
00:08:13,110 --> 00:08:18,176
now, by re-clicking on the same index,

115
00:08:18,176 --> 00:08:22,980
Well, we'll uncomment and restart
that part..

116
00:08:22,980 --> 00:08:26,790
This is obviously a little bit dangerous sometimes,

117
00:08:26,790 --> 00:08:30,345
since if a variable is used or declared in

118
00:08:30,345 --> 00:08:34,150
this part can disrupt the rest
of the program.

119
00:08:34,150 --> 00:08:38,660
But in many cases, you have
to know the trick.

120
00:08:38,660 --> 00:08:46,436
Professionals use, in their very
complex programs, a

121
00:08:46,436 --> 00:08:52,158
conditional insertion, which is very handy,
if you want to have, a single

122
00:08:52,158 --> 00:08:58,910
program which in fact acts on
two different environments,

123
00:08:58,910 --> 00:09:03,134
and then that are slightly different,
you have two types of sensors,

124
00:09:03,134 --> 00:09:10,042
well, your program with an if, sharp if,

125
00:09:10,042 --> 00:09:16,630
in fact, will say what is kept as
instruction, in one case, or the other.

126
00:09:16,630 --> 00:09:22,262
Then there is the instruction defines
define Debug, and then, here,

127
00:09:22,262 --> 00:09:27,790
well for a small test program,
I have an ifdef debug.

128
00:09:27,790 --> 00:09:32,035
So, if Debug has been defined,
the instructions

129
00:09:32,035 --> 00:09:36,280
between the ifdef, and the endif,
will be executed.

130
00:09:36,280 --> 00:09:38,740
So, this is the kind of small test program

131
00:09:38,740 --> 00:09:41,860
That you always to make,
to make sure that you have

132
00:09:41,860 --> 00:09:44,584
understood well what is the role
of the Debug, and

133
00:09:44,584 --> 00:09:48,970
then, if I delete this line, that's what

134
00:09:48,970 --> 00:09:55,036
this syntax, requires, well, I'm going
to delete the execution of

135
00:09:55,036 --> 00:10:01,080
these instructions, which are only
done when Debug is defined.

136
00:10:01,080 --> 00:10:03,180
Then there is no semicolon,

137
00:10:03,180 --> 00:10:06,864
it is a pre-processor that will manage
the program before

138
00:10:06,864 --> 00:10:10,564
sending it to the compiler,
and it will simply send

139
00:10:10,564 --> 00:10:14,890
the statements that have been defined
with sharp if.

140
00:10:14,890 --> 00:10:20,145
A troubleshooting solution is to say,
I have

141
00:10:20,145 --> 00:10:24,742
function which does not seem
to give the right results, is it

142
00:10:24,742 --> 00:10:27,838
the fault of the function, or

143
00:10:27,838 --> 00:10:32,280
is it the fault of the use of
these results

144
00:10:32,280 --> 00:10:33,090
further?

145
00:10:33,090 --> 00:10:37,604
So if you simplify this function
simply to make

146
00:10:37,604 --> 00:10:41,050
the known value, you can
check that the rest of the

147
00:10:41,050 --> 00:10:45,833
program is working properly with
this value, and then check

148
00:10:45,833 --> 00:10:50,290
boundary conditions, is it a 0,
is that maximum?

149
00:10:50,290 --> 00:10:54,480
So it's a good way to certify, in a way,
the programs.

150
00:10:54,480 --> 00:10:57,456
And now, once you have

151
00:10:57,456 --> 00:11:01,663
focused, on the error, on the fact
that there is an error in

152
00:11:01,663 --> 00:11:03,914
this function, you can test it

153
00:11:03,914 --> 00:11:06,560
separately, or analyze it a
little bit better.

154
00:11:06,560 --> 00:11:10,550
When you have displays scanned as

155
00:11:10,550 --> 00:11:14,730
we had seen, the four-digit display,
increases

156
00:11:14,730 --> 00:11:17,530
the delays, it is clear, makes it possible
to clearly see

157
00:11:17,530 --> 00:11:21,312
what happens, successively, on each digit.

158
00:11:21,312 --> 00:11:22,638
We can also

159
00:11:22,638 --> 00:11:27,821
at a critical point in the program,
turn on an LED, and then we know

160
00:11:27,821 --> 00:11:32,730
that if this LED is turned on and off,
well, the program has gone through it.

161
00:11:32,730 --> 00:11:37,900
Richer, but that will then,
block execution,

162
00:11:37,900 --> 00:11:42,706
is to observe the variables,
thanks to Serial print, and

163
00:11:42,706 --> 00:11:47,753
you can do a StopHex function,
which will take

164
00:11:47,753 --> 00:11:53,320
parameter you declared, and then print

165
00:11:53,320 --> 00:11:59,110
Hex value, print l, and hexadecimal value.

166
00:11:59,110 --> 00:12:03,158
It is very important, when you see a value,

167
00:12:03,158 --> 00:12:07,062
to know wether it is decimal
or hexadecimal.

168
00:12:07,062 --> 00:12:13,506
And then you block the program,
and then it will have to recompile,

169
00:12:13,506 --> 00:12:18,756
having identified the error. So the
Serial print is relatively

170
00:12:18,756 --> 00:12:23,890
slow, you can use SPI, faster,
but it's less comfortable.

171
00:12:23,890 --> 00:12:28,030
If you now want to watch and continue,

172
00:12:28,030 --> 00:12:31,894
then, you can, for example, provide two

173
00:12:31,894 --> 00:12:38,010
parameters, and make sure that when
you call this variable display,

174
00:12:38,010 --> 00:12:44,440
you have a reference number, a
variable that is not always the same,

175
00:12:44,440 --> 00:12:51,102
and you will see now, having
pressed each time, or

176
00:12:51,102 --> 00:12:56,960
having made a delay, but it can be
quite practical to go step by step,

177
00:12:56,960 --> 00:13:02,542
from one observation point to
the next, and, in the bottom,

178
00:13:02,542 --> 00:13:06,989
that is what the debuggers do,
simply, they offer you a

179
00:13:06,989 --> 00:13:12,514
possibility of interaction with
all your variables, much

180
00:13:12,514 --> 00:13:17,960
more complete, and also, a
greater ease of removing

181
00:13:17,960 --> 00:13:23,080
these breakpoints in the program.

182
00:13:23,080 --> 00:13:25,540
Now, if you have real time problems,

183
00:13:25,540 --> 00:13:28,430
and you can not stop running,

184
00:13:28,430 --> 00:13:34,868
a solution is to display, on an LED,
and if you

185
00:13:34,868 --> 00:13:41,250
using a digitalWrite, it will slow down
your program by 2 microseconds.

186
00:13:41,250 --> 00:13:46,997
So it's better to use a bitSet,
bitClear, which

187
00:13:46,997 --> 00:13:52,618
will take two cycles of instructions,
less than 0.1 microsecond.

188
00:13:52,618 --> 00:13:53,508
You can

189
00:13:53,508 --> 00:13:58,378
also, as we have seen, do one exclusive
with a

190
00:13:58,378 --> 00:14:03,810
mask which is a Bit 1, position 5,
and not 4.

191
00:14:03,810 --> 00:14:09,165
Obviously if you now have an
oscilloscope, that allows you

192
00:14:09,165 --> 00:14:14,520
to visualize bits that have been
activated, deactivated,

193
00:14:14,520 --> 00:14:19,030
it allows you to measure durations
of routines,

194
00:14:19,030 --> 00:14:23,125
and, you can disrupt, in the bottom,

195
00:14:23,125 --> 00:14:27,220
as little as possible, the activities
of the program.

196
00:14:27,220 --> 00:14:30,440
If you have, for example,
a program that receives an

197
00:14:30,440 --> 00:14:34,727
infrared signal, it is clear that
you can not stop it, but

198
00:14:34,727 --> 00:14:38,446
you can, for example, turn on
a LED at the beginning of a

199
00:14:38,446 --> 00:14:44,550
block of information received, turn it off
at the end, you can turn it on,

200
00:14:44,550 --> 00:14:47,494
only if this block of information
corresponds to an

201
00:14:47,494 --> 00:14:50,689
address that was decoded correctly,
and so on.

202
00:14:50,689 --> 00:14:53,316
So what we've seen, to help
with the development

203
00:14:53,316 --> 00:14:55,850
is that it is necessary to document

204
00:14:55,850 --> 00:14:58,515
the programs, of course,
is that it is necessary

205
00:14:58,515 --> 00:15:04,460
to know some tricks, to better
interpret the error messages

206
00:15:04,460 --> 00:15:10,345
and intervene in the program to make it
progress step by step, and check

207
00:15:10,345 --> 00:15:15,785
that its evolution is correct,
until it works entirely.

208
00:15:15,785 --> 00:15:18,469
And then, the big question is

209
00:15:18,469 --> 00:15:21,477
is it worth the effort to use

210
00:15:21,477 --> 00:15:26,028
a debugger, it implies having a tool more

211
00:15:26,028 --> 00:15:28,880
complicated to implement,
declare projects.

212
00:15:28,880 --> 00:15:32,104
Above all, what I would like you
to realize is that

213
00:15:32,104 --> 00:15:36,251
these programs are compatible
with C, and do not recognize

214
00:15:36,251 --> 00:15:38,500
Arduino instructions.

215
00:15:38,500 --> 00:15:45,480
So, an Arduino compiler, which
would call functions

216
00:15:45,480 --> 00:15:51,265
of debugging, does not yet exist
to my knowledge, and if you now

217
00:15:51,265 --> 00:15:56,070
move once, to a more powerful
tool, which certainly

218
00:15:56,070 --> 00:16:01,227
will happen, well, you have any
advantage right now, to avoid,

219
00:16:01,227 --> 00:16:06,680
in the main program, to use
Arduino facilities,

220
00:16:06,680 --> 00:16:10,346
that, on the other hand, they are
useful at the level of

221
00:16:10,346 --> 00:16:15,348
definitions, declarations, where there,
the transformation of

222
00:16:15,348 --> 00:16:20,520
the program will be much more
localized and easy to do.

