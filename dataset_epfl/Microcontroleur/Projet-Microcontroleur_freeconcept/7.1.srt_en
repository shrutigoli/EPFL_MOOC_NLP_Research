1
00:00:00,000 --> 00:00:01,332
Hello.

2
00:00:01,332 --> 00:00:08,000
Today we're talking of DC motors.

3
00:00:08,000 --> 00:00:11,498
We will describe a little their
characteristics, see how

4
00:00:11,498 --> 00:00:15,236
to control them with transistors
or H-bridges, talk

5
00:00:15,236 --> 00:00:20,215
about the PWM, which you
probably know, and detail a

6
00:00:20,215 --> 00:00:25,260
little bit about the PFM, that noone
knows, and that I like very much.

7
00:00:25,260 --> 00:00:28,780
We can also say a few words
about remote Servo.

8
00:00:28,780 --> 00:00:34,612
So engines, you have two categories.

9
00:00:34,612 --> 00:00:39,460
You have the engines used by
the industry, you have those

10
00:00:39,460 --> 00:00:44,861
used by the toys, these cost 40 francs,

11
00:00:44,861 --> 00:00:49,820
these cost 40 centimes, and
there is not much between them.

12
00:00:49,820 --> 00:00:55,165
Our goal is not to prepare you to do

13
00:00:55,165 --> 00:00:59,340
serious industrial projects, you
have to learn a lot more,

14
00:00:59,340 --> 00:01:04,085
and, understand the good
engines with their speed

15
00:01:04,085 --> 00:01:07,630
constants, their torque constants,
and being able to calculate.

16
00:01:07,630 --> 00:01:11,278
The general understanding of the
engine with its

17
00:01:11,278 --> 00:01:15,460
principle, you can easily find it
on the net.

18
00:01:15,460 --> 00:01:20,685
This curve, here, is interesting to know.

19
00:01:20,685 --> 00:01:24,642
When the motor is blocked, zero speed, you

20
00:01:24,642 --> 00:01:28,414
have maximum current, and maximum torque.

21
00:01:28,414 --> 00:01:34,317
If now you release the effort,
well, the engine will run faster,

22
00:01:34,317 --> 00:01:40,953
reduce its torque, reduce its current,
and theoretically, for a perfect engine,

23
00:01:40,953 --> 00:01:45,838
you have freewheeling speed,
in which you have no

24
00:01:45,838 --> 00:01:51,360
the motor runs at maximum
speed without voltage drop.

25
00:01:51,360 --> 00:01:56,285
So, of course, the engines
that are going to be used have

26
00:01:56,285 --> 00:02:02,700
friction, because of the brooms,
they have bad characters ...

27
00:02:02,700 --> 00:02:06,304
So I have bad magnetic
characteristics, it just means

28
00:02:06,304 --> 00:02:12,015
that this theoretical curve of the
engine will be a little different.

29
00:02:12,015 --> 00:02:17,199
But whatreally bothers us is these
the frictions, which make that at

30
00:02:17,199 --> 00:02:22,310
the start, the engine will need
a significant voltage

31
00:02:22,310 --> 00:02:27,640
to start and to approach the ideal curve.

32
00:02:27,640 --> 00:02:31,462
Similarly, if you increase the tension,
well,

33
00:02:31,462 --> 00:02:34,730
there will be warming and
loss of characteristics.

34
00:02:34,730 --> 00:02:39,820
Then, all the motors have a
nominal voltage, which is well

35
00:02:39,820 --> 00:02:44,400
defined, for industrial engines,
in relation to lifetime.

36
00:02:44,400 --> 00:02:46,794
When you play with these cheap engines,
well

37
00:02:46,794 --> 00:02:50,650
often, their characteristics
are not well known.

38
00:02:50,650 --> 00:02:56,628
We work at the tension that suits us,
according to

39
00:02:56,628 --> 00:03:02,990
the power required and the
speed of rotation required.

40
00:03:02,990 --> 00:03:08,432
If we need much more power,
we do not hesitate to overheat the

41
00:03:08,432 --> 00:03:15,010
engine by over-powering it, and
shorten its life significantly.

42
00:03:15,010 --> 00:03:17,474
There are few non-industrial applications

43
00:03:17,474 --> 00:03:21,695
that insist on having

44
00:03:21,695 --> 00:03:24,845
lifetimes of 100,000 hours, for example.

45
00:03:24,845 --> 00:03:28,464
If we have 10 hours, sometimes,
we are already happy.

46
00:03:28,464 --> 00:03:29,052
Good.

47
00:03:29,052 --> 00:03:33,184
So the parameter that is important is the

48
00:03:33,184 --> 00:03:36,919
resistance of the coil, since
the resistance of the

49
00:03:36,919 --> 00:03:42,586
coil will set you the short-circuit
current, the current blocked,

50
00:03:42,586 --> 00:03:47,990
in fact, the characteristics of the output

51
00:03:47,990 --> 00:03:49,120
amplifiers.

52
00:03:49,120 --> 00:03:53,215
What also interests us, too, is
this tension of

53
00:03:53,215 --> 00:03:56,229
start, and, I would say it's the first

54
00:03:56,229 --> 00:03:58,049
thing to check if you do not know

55
00:03:58,049 --> 00:04:00,530
the engine, at what voltage does it start?

56
00:04:00,530 --> 00:04:05,358
Then, if you put the tension
you want, with which you

57
00:04:05,358 --> 00:04:12,330
want to work, you block it,
is the warm-up fast?

58
00:04:12,330 --> 00:04:13,232
In which case,

59
00:04:13,232 --> 00:04:16,930
it is certainly the sign that
it is boosted.

60
00:04:16,930 --> 00:04:22,570
To control a motor, if it is in
all-or-nothing unidirectional,

61
00:04:22,570 --> 00:04:27,975
you use a transistor,
which controls the coils

62
00:04:27,975 --> 00:04:33,167
via the brooms, and it is essential
to put a recovery diode.

63
00:04:33,167 --> 00:04:37,090
What happens when you turn off the power?

64
00:04:37,090 --> 00:04:38,050
The coil,

65
00:04:38,050 --> 00:04:44,523
the inertia of the electrons in the coil,
will raise the tension here, it is

66
00:04:44,523 --> 00:04:47,681
the principle of the Ruhmkorff coils which

67
00:04:47,681 --> 00:04:51,610
allow to generate very high voltages.

68
00:04:51,610 --> 00:04:55,087
And it is not favorable, in the
background, for transistors, that the

69
00:04:55,087 --> 00:04:59,270
tension suddenly, rises to 20-50 Volts,
even for a very weak moment.

70
00:04:59,270 --> 00:05:03,645
So what we do is that this current
that tends to go towards the transistor,

71
00:05:03,645 --> 00:05:08,902
is short-circuited by a diode, called

72
00:05:08,902 --> 00:05:13,900
freewheel, protection diode.
Then, this diode,

73
00:05:13,900 --> 00:05:18,901
can also be put it
(oh, I turned it upside down, I

74
00:05:18,901 --> 00:05:23,874
was distracted), It can also be put
on the side of the transistor, and

75
00:05:23,874 --> 00:05:29,520
the interest of this solution
is that the power

76
00:05:29,520 --> 00:05:38,790
transitors contain this diode and
you do not have to worry about wiring.

77
00:05:38,790 --> 00:05:43,754
Now, if you're working with
low-power motors

78
00:05:43,754 --> 00:05:51,330
can you connect them directly
to your processor without amplifier?

79
00:05:51,330 --> 00:05:54,636
Yes, partly at your own risk

80
00:05:54,636 --> 00:05:58,894
and perils. These are very
small engines that have a

81
00:05:58,894 --> 00:06:03,790
very low inductance and especially
a resistance of 30 Ohm.

82
00:06:03,790 --> 00:06:09,278
It is known that on the outputs
of a microcontroller,

83
00:06:09,278 --> 00:06:14,442
we can request 30 mA, and my
experience shows that if

84
00:06:14,442 --> 00:06:19,845
it is above 30 Ohm, we have
no problems, even with the

85
00:06:19,845 --> 00:06:24,665
overvoltages which are released
at the switching.

86
00:06:24,665 --> 00:06:27,140
That is what I observed.

87
00:06:27,140 --> 00:06:30,992
The voltage does not go down to 0,
does not rise

88
00:06:30,992 --> 00:06:36,610
to 5 Volts because of the
internal resistance of the amps.

89
00:06:36,610 --> 00:06:41,068
So, it is with a period of 1 ms, the

90
00:06:41,068 --> 00:06:45,130
current continues a little bit
to rise, to stabilize

91
00:06:45,130 --> 00:06:50,222
further, and that is what seems
realistic. So be careful, the

92
00:06:50,222 --> 00:06:55,870
so-called solar engines have a higher
resistance, and are sometimes

93
00:06:55,870 --> 00:07:01,800
also usable to avoid wasting
batteries or current.

94
00:07:01,800 --> 00:07:06,850
But their resistance is still
rarely more than 30 Ohm.

95
00:07:06,850 --> 00:07:11,405
Well, the PWM,

96
00:07:11,405 --> 00:07:16,400
therefore, you know the principle,
we make pulses of variable width, with

97
00:07:16,400 --> 00:07:21,028
a frequency that is known. It is in the

98
00:07:21,028 --> 00:07:26,226
500 Hertz to have something
that does not charge

99
00:07:26,226 --> 00:07:30,830
the processor too much and
then, that is acceptable.

100
00:07:30,830 --> 00:07:36,474
Industrially, 20 kHz, or more,
is requested so that there is no

101
00:07:36,474 --> 00:07:41,312
audible effect. So it's clear
that around 5 to 10

102
00:07:41,312 --> 00:07:46,845
KHz, the motor sings and
it is relatively unpleasant.

103
00:07:46,845 --> 00:07:51,549
So the PWM, as proposed by Arduino, with

104
00:07:51,549 --> 00:07:56,882
analogWrite, it's perfect for LEDs,
it's good for

105
00:07:56,882 --> 00:08:01,880
good engines. The problem, for the bad

106
00:08:01,880 --> 00:08:04,936
engines, I explain it just now.

107
00:08:04,936 --> 00:08:09,993
And the other problem with Arduino
is that this PWM is available on

108
00:08:09,993 --> 00:08:15,156
a number of pins, a little more
if you buy a more

109
00:08:15,156 --> 00:08:20,212
powerful processor, a little more if you have
a routine that simulates PWM channels by

110
00:08:20,212 --> 00:08:25,390
lowering the frequency a little,
but it is still quite limiting.

111
00:08:25,390 --> 00:08:26,930
But it is relatively

112
00:08:26,930 --> 00:08:30,550
well documented, and that's
why everybody does it.

113
00:08:30,550 --> 00:08:33,652
So one of the problems brought by the

114
00:08:33,652 --> 00:08:37,710
PWM, if you do not have enough channels,

115
00:08:37,710 --> 00:08:40,498
I first have to explain in the

116
00:08:40,498 --> 00:08:44,900
bottom, how to control the
motors in bi-directional.

117
00:08:44,900 --> 00:08:48,300
So you have a motor driver, we will

118
00:08:48,300 --> 00:08:52,165
have a little fun to put transistors,
four transistors

119
00:08:52,165 --> 00:08:54,550
for controlling a motor in
both directions.

120
00:08:54,550 --> 00:09:00,795
These motor drivers have an input
voltage that is that of the processor.

121
00:09:00,795 --> 00:09:06,276
They sometimes have a specific
input of power, with a higher voltage

122
00:09:06,276 --> 00:09:11,465
, to control the motors.

123
00:09:11,465 --> 00:09:14,691
There are some that are in
large boxes with several

124
00:09:14,691 --> 00:09:18,030
control, even if there is only one
engine that will be connected on it.

125
00:09:18,030 --> 00:09:23,815
There are some that are in
tvery small boxes with naturally

126
00:09:23,815 --> 00:09:29,876
much lower current, but much
lower voltages.

127
00:09:29,876 --> 00:09:32,560
This one is still working at 2 Volts.

128
00:09:32,560 --> 00:09:37,630
Well, the important question now is:
we have two

129
00:09:37,630 --> 00:09:43,176
entries, we have two exits,
I can make the truth table,

130
00:09:43,176 --> 00:09:46,540
0, 0, quite naturally, the
engine will be stopped.

131
00:09:46,540 --> 00:09:49,920
0.1 it rotates in one direction,
1.0 it rotates in the other direction.

132
00:09:49,920 --> 00:09:55,220
1.1, what is the functionality?

133
00:09:55,220 --> 00:09:58,864
There, it is necessary to know
that a direct

134
00:09:58,864 --> 00:10:02,680
current motor, you can easily
experience it.

135
00:10:02,680 --> 00:10:08,170
It has a short-circuited mode and
it has a freewheel mode.

136
00:10:08,170 --> 00:10:14,836
If you connect the input and the two
pins of an engine together, you see that you

137
00:10:14,836 --> 00:10:17,674
have relatively trouble turning

138
00:10:17,674 --> 00:10:20,715
the axis because as soon as
you turn the axis,

139
00:10:20,715 --> 00:10:23,058
you generate a force, as its part,

140
00:10:23,058 --> 00:10:27,780
electromotive which will
generate a braking torque,

141
00:10:27,780 --> 00:10:30,420
and indeed, if you turn to

142
00:10:30,420 --> 00:10:33,380
speed provided by the engine, you have a

143
00:10:33,380 --> 00:10:38,700
generator that transforms the
torque that you provided by running.

144
00:10:38,700 --> 00:10:43,485
On the other hand, if you now
leave the two pines open, well,

145
00:10:43,485 --> 00:10:47,170
there is no current that can be established,
your motor will rotate freely.

146
00:10:47,170 --> 00:10:52,630
So, this free motor function,
you find it in some

147
00:10:52,630 --> 00:10:58,448
circuits, and other circuits, you are
blocked, for this combination one

148
00:10:58,448 --> 00:11:02,550
good, you have to live with it.

149
00:11:02,550 --> 00:11:06,380
So what is the important consequence?

150
00:11:06,380 --> 00:11:09,708
If you never work with this combination,
well

151
00:11:09,708 --> 00:11:13,282
you will not see the difference
between the two interfaces.

152
00:11:13,282 --> 00:11:18,528
But now, if you want to make
PWM bi-directional, go

153
00:11:18,528 --> 00:11:23,484
both directions, you have
the easy solution, which is to

154
00:11:23,484 --> 00:11:26,536
say I send my PWM on a channel to

155
00:11:26,536 --> 00:11:30,345
go in one way, I send the PWM on the other

156
00:11:30,345 --> 00:11:36,970
channel to go in the other direction, and
I always ask myself an In which is zero.

157
00:11:36,970 --> 00:11:41,002
So the routine to go in one direction,

158
00:11:41,002 --> 00:11:44,740
on one side the PWM speed is set,
on the other

159
00:11:44,740 --> 00:11:48,700
side we put zero, and then to retreat,
we swap the two, but it means that it

160
00:11:48,700 --> 00:11:54,967
you need two PWM guns, and we have
just seen that they are rather rare.

161
00:11:54,967 --> 00:11:59,847
If I have two engines, that makes
four PWM guns, which are

162
00:11:59,847 --> 00:12:03,550
spread across the map, ok,
it can be a solution.

163
00:12:03,550 --> 00:12:08,388
So, a solution that seems to have
been planned

164
00:12:08,388 --> 00:12:13,766
since the two PWN pine, three
and four, are side by side with

165
00:12:13,766 --> 00:12:18,318
reserve pin is to say: I use
only one PWM channel, and

166
00:12:18,318 --> 00:12:24,250
now I do a trick to turn in the
other direction, I put one

167
00:12:24,250 --> 00:12:30,270
on the other side, and I reverse
the PWM value.

168
00:12:30,270 --> 00:12:34,680
So I want the 25% PWM, ok, that's clear.

169
00:12:34,680 --> 00:12:38,915
We will have, 25% of the time,
the current that passes like that.

170
00:12:38,915 --> 00:12:43,998
Now I would still like 25% of PWM,
it's the

171
00:12:43,998 --> 00:12:48,972
zero which is going to be active
which will make the current to go

172
00:12:48,972 --> 00:12:54,226
the other direction. So my
engine will run with 25%

173
00:12:54,226 --> 00:12:59,253
of PWM, having written that on the other

174
00:12:59,253 --> 00:13:03,927
pin now, I have HIGH, and on my

175
00:13:03,927 --> 00:13:08,700
PWM pin I have 256 less speed.

176
00:13:08,700 --> 00:13:13,900
So why is it related to what
we just said before?

177
00:13:13,900 --> 00:13:18,976
If I have PWM 25%, in case

178
00:13:18,976 --> 00:13:23,756
the free wheel, well,

179
00:13:23,756 --> 00:13:29,446
I have 25% on and then,
since I will have zero, of each

180
00:13:29,446 --> 00:13:33,550
side I'm blocked. So, I will have 75%
blocked.

181
00:13:33,550 --> 00:13:38,730
If now I ask minus 25%, so the other way,

182
00:13:38,730 --> 00:13:44,416
I have 25% on, therefore

183
00:13:44,416 --> 00:13:49,944
I am at zero here, and I have 75% with

184
00:13:49,944 --> 00:13:56,450
the state in one, so 75% free wheel.

185
00:13:56,450 --> 00:14:00,870
Then, the motor which alternates phases

186
00:14:00,870 --> 00:14:06,400
of activity and blockage, or activity and

187
00:14:06,400 --> 00:14:11,790
freewheel, will naturally not
run at the same average speed.

188
00:14:11,790 --> 00:14:16,878
So, your go now, for the same PWM,
it will not

189
00:14:16,878 --> 00:14:21,938
at all have the same speed forward,
or backward, to you to compensate for it.

190
00:14:21,938 --> 00:14:25,790
You saved somewhere,
you lose somewhere else.

191
00:14:25,790 --> 00:14:30,233
So, of course, my approach is to say:

192
00:14:30,233 --> 00:14:33,382
so much the worse for these PWMs,
I will program them myself, I

193
00:14:33,382 --> 00:14:36,480
will be able to have them on
the pine I want,

194
00:14:36,480 --> 00:14:40,792
and programming the PWM
can be done in different ways.

195
00:14:40,792 --> 00:14:46,970
There is the naïve method, I would say,
where we make a certain delay in

196
00:14:46,970 --> 00:14:51,140
the state one, then, another delay
in the state zero.

197
00:14:51,140 --> 00:14:56,768
If the addition of the delays, we will always have
the same frequency, therefore delay,

198
00:14:56,768 --> 00:15:02,180
additional delay and you can program
your PWM and play with it, and you

199
00:15:02,180 --> 00:15:07,150
will obviously already have difficulty to do
something else at the same time because they are

200
00:15:07,150 --> 00:15:09,454
programs, as soon as you have

201
00:15:09,454 --> 00:15:12,064
programs that are blocking.

202
00:15:12,064 --> 00:15:14,957
So, look for a non-blocking solution.

203
00:15:14,957 --> 00:15:19,668
That is to say that we will
call a PWM procedure every

204
00:15:19,668 --> 00:15:23,581
100 microseconds, but we will leave it

205
00:15:23,581 --> 00:15:29,126
as fast as possible, to have
another 90 microseconds

206
00:15:29,126 --> 00:15:34,580
to do regularly, so none of
the tasks will be blocked.

207
00:15:34,580 --> 00:15:37,154
And in fact, more than 10,

208
00:15:37,154 --> 00:15:42,282
20 microseconds, in the worst case. So,

209
00:15:42,282 --> 00:15:47,562
I draw a staircase with perhaps 16,
but I take

210
00:15:47,562 --> 00:15:52,796
the example with 32, not, so I define a

211
00:15:52,796 --> 00:15:58,040
maximum value, which is here 32,
we will see why.

212
00:15:58,040 --> 00:16:02,220
Why? Because it's useless to have

213
00:16:02,220 --> 00:16:07,375
a sharpness of steps of 256, while we

214
00:16:07,375 --> 00:16:12,280
do not realize at all a change
of speed of a few percent.

215
00:16:12,280 --> 00:16:16,979
Thus, with 1 / 32th, we have 3% of

216
00:16:16,979 --> 00:16:22,150
difference of speed between each
step, it is enough for all

217
00:16:22,150 --> 00:16:27,260
the applications I know. Then,
a maximum of 32 steps is fixed.

218
00:16:27,260 --> 00:16:29,906
You absolutely want to work with 256?

219
00:16:29,906 --> 00:16:33,434
You only have to divide by 8 each time,
you think

220
00:16:33,434 --> 00:16:37,470
256, you divide by 8, and you use
my simplified routine.

221
00:16:37,470 --> 00:16:45,865
So the routine Do PWM, which, since
it is a routine, there is a local parameter

222
00:16:45,865 --> 00:16:48,241
I called here pp, and then, in

223
00:16:48,241 --> 00:16:51,380
the main program, we will have
he variable PWM.

224
00:16:51,380 --> 00:16:52,670
There is a

225
00:16:52,670 --> 00:16:58,120
small byte i which will be used
to make a counter.

226
00:16:58,120 --> 00:17:02,460
The term "volatile", I explain
it a little bit further.

227
00:17:02,460 --> 00:17:10,188
Then, I increment the counter i,
I do my hemi stairs slices, if i is

228
00:17:10,188 --> 00:17:17,160
equal to maximum PWM,
I arrived at the top, I reset.

229
00:17:17,160 --> 00:17:22,150
But i equals max PWM, i equals zero,

230
00:17:22,150 --> 00:17:26,230
if it's the same, you remember, equal equal.

231
00:17:26,230 --> 00:17:31,536
And then, again, I make another
comparison, that is to say, if

232
00:17:31,536 --> 00:17:36,629
i is less than pp, so in all these

233
00:17:36,629 --> 00:17:42,177
zones, I activate the PWM,
and then here, of course, I will not

234
00:17:42,177 --> 00:17:46,364
activate it, else (LedOff). So,
here is my PWM routine, which

235
00:17:46,364 --> 00:17:50,870
uses very few instructions,
very few microseconds, much less

236
00:17:50,870 --> 00:17:55,205
than the digitalWrite.
In the main program, I can

237
00:17:55,205 --> 00:18:01,440
Test with PWM equal seven,
I have to insert this routine

238
00:18:01,440 --> 00:18:07,370
Do PWM, in a loop that repeats
for 100 microseconds, but I

239
00:18:07,370 --> 00:18:12,647
have 90 microseconds left, to do

240
00:18:12,647 --> 00:18:17,586
something else. So now I have

241
00:18:17,586 --> 00:18:22,518
this routine. It must of course
be tested, with the

242
00:18:22,518 --> 00:18:27,486
value zero, the value one,
the value 31, the value

243
00:18:27,486 --> 00:18:32,389
32, to check, because it's often in

244
00:18:32,389 --> 00:18:38,436
limiting conditions that we have
the errors.

245
00:18:38,436 --> 00:18:43,406
Good. So let's talk about the PFM now.

246
00:18:43,406 --> 00:18:47,860
The PFM, what we want is that,
on average, the

247
00:18:47,860 --> 00:18:52,896
processor has an amount of energy
whose percentage has been defined.

248
00:18:52,896 --> 00:18:55,880
This amount of energy will fix the speed.

249
00:18:55,880 --> 00:18:57,446
So, with the PWM, we make

250
00:18:57,446 --> 00:19:00,354
pulses more or less long, with the PFM,

251
00:19:00,354 --> 00:19:04,850
we make impulses more or less
close.

252
00:19:04,850 --> 00:19:08,194
So here, there is an impulse
from time to time.

253
00:19:08,194 --> 00:19:12,990
There are, at times, many impulses
that follow one another, so in fact,if we

254
00:19:12,990 --> 00:19:18,020
observes the oscilloscope, is that
the hollows, the quantity of hollows,

255
00:19:18,020 --> 00:19:23,430
decrease, and we are back
in a given period.

256
00:19:23,430 --> 00:19:26,980
So, the interest of this for bad engines,
I

257
00:19:26,980 --> 00:19:31,246
reminds you of the problem
with starting voltage, with

258
00:19:31,246 --> 00:19:35,026
PWM, as long as you are
in this area, the engine

259
00:19:35,026 --> 00:19:39,540
does not start, and a cheap
engine, especially engines.

260
00:19:39,540 --> 00:19:48,236
Pager of 4-6 mm, need 30
to 40% of PWM to start.

261
00:19:48,236 --> 00:19:53,510
So the idea is to say:
but, we start the engine

262
00:19:53,510 --> 00:19:58,370
with sufficient tension, but it
is stopped immediately.

263
00:19:58,370 --> 00:20:04,469
Then we send to the motor,
Pulses that are enough to make it

264
00:20:04,469 --> 00:20:11,390
start but that will not throw it,
it will stop right after.

265
00:20:11,390 --> 00:20:13,766
So it is obvious that if the starting

266
00:20:13,766 --> 00:20:17,792
pulse and the engine get
closer good take more and more

267
00:20:17,792 --> 00:20:22,884
speed. So here is the

268
00:20:22,884 --> 00:20:28,220
great principle of the PFM.
The trouble with

269
00:20:28,220 --> 00:20:33,480
the PFM is that if you want to have,

270
00:20:33,480 --> 00:20:39,028
something here that turns very slowly,
since that

271
00:20:39,028 --> 00:20:46,462
this pulse lasts, at minimum,
2, 4, 8 milliseconds, for large

272
00:20:46,462 --> 00:20:53,510
engines, this impulse, in the background,
if you want it to happen once

273
00:20:53,510 --> 00:20:59,267
in 10, so you'll get 10 percent PFM,
well it gives you

274
00:20:59,267 --> 00:21:04,570
a period of 40 milliseconds, so you
will have refresh at 25 Hertz.

275
00:21:04,570 --> 00:21:10,004
And now, if you want 1 percent,
you'll get refresh at 2.5 Hertz

276
00:21:10,004 --> 00:21:17,225
so it is 2 and half times per second
that the engine will make a small hook.

277
00:21:17,225 --> 00:21:20,233
But, of course, you have no limits,
if you want

278
00:21:20,233 --> 00:21:23,800
want it to make a small impulse every day

279
00:21:23,800 --> 00:21:26,670
and well it will, it will advance a little bit

280
00:21:26,670 --> 00:21:29,586
every day, and it is not incompatible
with this

281
00:21:29,586 --> 00:21:33,530
concept of PFM while you have
no hope with the PWM to run

282
00:21:33,530 --> 00:21:38,280
engines extremely slowly. To

283
00:21:38,280 --> 00:21:43,828
convince you, the robot receives pulses

284
00:21:43,828 --> 00:21:49,172
of 1 compared to 256, it accelerates with

285
00:21:49,172 --> 00:21:54,610
10, and the movement is much
more regular, and as soon as you set

286
00:21:54,610 --> 00:21:56,910
the maximum speed, of course, it leaves.

287
00:21:56,910 --> 00:21:57,696
Good.

288
00:21:57,696 --> 00:22:01,240
How to make a PFM routine?

289
00:22:01,240 --> 00:22:03,928
We will take a little bit inspiration
om what

290
00:22:03,928 --> 00:22:07,240
we said earlier but our staircase

291
00:22:07,240 --> 00:22:10,828
will not have regular marches,
we will add the

292
00:22:10,828 --> 00:22:13,720
value "pfm" to define
the height of the steps.

293
00:22:13,720 --> 00:22:19,641
So if "pfm" is slow, you'll get

294
00:22:19,641 --> 00:22:23,910
something that will take a long t
ime to come up.

295
00:22:23,910 --> 00:22:29,136
If the "pfm" increases, the ramp is larger,
and

296
00:22:29,136 --> 00:22:33,735
whenever you arrive at maximum,
of 255, but you can very

297
00:22:33,735 --> 00:22:38,705
well define other values, which
will define the resolution, in the

298
00:22:38,705 --> 00:22:43,900
bottom, of the "pfm", and you
reset to 0 and you start again.

299
00:22:43,900 --> 00:22:44,945
Therefore,

300
00:22:44,945 --> 00:22:49,175
we can not simulate these cases
because we do not change

301
00:22:49,175 --> 00:22:53,711
the value "pfm" without stopping, finally, at
each cycle, we usually execute

302
00:22:53,711 --> 00:22:56,690
several cycles since we have, here, a few

303
00:22:56,690 --> 00:22:59,615
tenths, hundredths of a second, but we

304
00:22:59,615 --> 00:23:05,840
had changed at each cycle, and well,
we would see the impulses coming closer.

305
00:23:05,840 --> 00:23:09,980
Thus we need to have a global
variable that is

306
00:23:09,980 --> 00:23:14,456
the value of the "pfm", we
will decide 200 as first

307
00:23:14,456 --> 00:23:18,990
test, and a value of 255 was
chosen as the maximum.

308
00:23:18,990 --> 00:23:23,445
We must be define a local variable

309
00:23:23,445 --> 00:23:27,900
"Int pfm" which is 0. So
there I am in a program.

310
00:23:27,900 --> 00:23:35,090
And then now I can define
the duration of the

311
00:23:35,090 --> 00:23:40,192
pulses with this "DelPfm"
that I set at 4 milliseconds.

312
00:23:40,192 --> 00:23:44,240
I do not like to have numbers
in the programs.

313
00:23:44,240 --> 00:23:49,634
And now I go into my test loop,
I do my delay of 4

314
00:23:49,634 --> 00:23:55,195
milliseconds, I increment the counter of

315
00:23:55,195 --> 00:24:00,630
the value of the "pfm". I look at

316
00:24:00,630 --> 00:24:05,978
whether if it exceeds 255, if yes, I

317
00:24:05,978 --> 00:24:12,152
reset to 0, and there, there is advantage
to make a "logical

318
00:24:12,152 --> 00:24:19,270
"rather than forcing a 0, and in that
case, well, I activate the impulse

319
00:24:19,270 --> 00:24:25,304
which goes, the next stroke,
to be postponed,

320
00:24:25,304 --> 00:24:30,316
necessarily to 0. This is the PFM routine,

321
00:24:30,316 --> 00:24:35,445
I did a procedure, I called this procedure

322
00:24:35,445 --> 00:24:40,728
1000 times with the value 1
to have slow moving.

323
00:24:40,728 --> 00:24:45,432
And then, I changed the value
"pfm" and changed

324
00:24:45,432 --> 00:24:50,652
The number of times, the duration, in the
background, ahed on edges, and I could

325
00:24:50,652 --> 00:24:54,150
very well have done other things
at the same time, monitor

326
00:24:54,150 --> 00:24:58,859
the whiskers, for example,
and act and change the speed.

327
00:24:58,859 --> 00:25:04,100
Well, two words about the PPM
you find in the remote control brains.

328
00:25:04,100 --> 00:25:10,140
"Pulse Position Modulation",
in fact this position term

329
00:25:10,140 --> 00:25:16,268
refers to the possibility of having
other brains that will overlap

330
00:25:16,268 --> 00:25:21,779
in this 20 millisecond frame. And then
the position of these additional

331
00:25:21,779 --> 00:25:28,355
pulses, will allow to transmit
the information.

332
00:25:28,355 --> 00:25:33,538
So at each pulse, you know
you have a pulse between 1

333
00:25:33,538 --> 00:25:39,330
and 2 milliseconds, that the repetition
period is around 20 milliseconds.

334
00:25:39,330 --> 00:25:41,270
And now it's trivial

335
00:25:41,270 --> 00:25:46,200
to program, to adjust your impulse

336
00:25:46,200 --> 00:25:50,410
duration at the angles that interest you.

337
00:25:50,410 --> 00:25:54,384
So, I said that it is difficult
to program because, in fact, if,

338
00:25:54,384 --> 00:25:59,386
you are in a blocking procedure,
what I have just mentioned, and then,

339
00:25:59,386 --> 00:26:06,320
obviously, if you now want to have
several brains,

340
00:26:06,320 --> 00:26:11,270
do a procedure in which you repeat
for each

341
00:26:11,270 --> 00:26:16,367
brain, a precision of, say,
10 microseconds to have

342
00:26:16,367 --> 00:26:20,976
1 degree of accuracy, it is
relatively delicate to program,

343
00:26:20,976 --> 00:26:24,680
especially if you want to do
other things in parallel.

344
00:26:24,680 --> 00:26:27,673
So there is an "Arduino" library

345
00:26:27,673 --> 00:26:31,422
that uses the "timer 1", so I did not

346
00:26:31,422 --> 00:26:34,655
tested but I think it's not worth it

347
00:26:34,655 --> 00:26:40,358
trying to do better to control many brains.

348
00:26:40,358 --> 00:26:43,841
Well, so, here we have a little talk about

349
00:26:43,841 --> 00:26:47,424
PWM, PFM, highlighted the difference,
a little

350
00:26:47,424 --> 00:26:51,414
better understood what can be
done with engines, and

351
00:26:51,414 --> 00:26:56,484
then, mentioned the brains
that are so easy to use,

352
00:26:56,484 --> 00:26:59,000
That there is not much to say.

