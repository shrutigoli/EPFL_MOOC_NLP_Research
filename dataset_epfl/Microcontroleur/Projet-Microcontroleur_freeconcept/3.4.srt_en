1
00:00:04,225 --> 00:00:07,225
Hello,we saw the structure of a

2
00:00:07,225 --> 00:00:11,258
C program,and the main
control structure.

3
00:00:11,258 --> 00:00:15,010
We will now talk about
the types of data ,8,16

4
00:00:15,010 --> 00:00:20,285
32 bits,and which apply
to variables and tables.

5
00:00:20,285 --> 00:00:25,410
Let us return to the
microcontroller structure.

6
00:00:25,410 --> 00:00:30,172
So,we saw the bus 8 bits
,the arithmetic unit,

7
00:00:30,172 --> 00:00:35,364
the registers and,if we have an 8 bits
structure,we can very well

8
00:00:35,364 --> 00:00:39,386
at the level of the variables,
take many

9
00:00:39,386 --> 00:00:43,342
successive words, to have, for
example 32bits.

10
00:00:43,342 --> 00:00:49,357
And, at the  calculation level;
cut the word 32 bit into slices,and;

11
00:00:49,357 --> 00:00:55,310
then do several successives
operations,for, a 32bits operation.

12
00:00:55,310 --> 00:01:00,155
So of course,the transistors, have become

13
00:01:00,155 --> 00:01:05,990
miniaturized and we speak of
processor 16 and 32bits.

14
00:01:05,990 --> 00:01:09,520
The bus is a wider, registers are longer

15
00:01:09,520 --> 00:01:15,246
The aritmetic unity is at the correct
width,the variables also

16
00:01:15,246 --> 00:01:19,950
and so,now we want to work with
8bits,and well we will use,

17
00:01:19,950 --> 00:01:29,640
some part of variables and of memories
and,considering C, this does'nt concern us.

18
00:01:29,640 --> 00:01:35,910
Simply;the compiler will have more
work to cut

19
00:01:35,910 --> 00:01:41,958
the word into pieces,or ignore
some parts of informations.

20
00:01:41,958 --> 00:01:45,082
So we'll work functionally with

21
00:01:45,082 --> 00:01:50,257
data types ,the simplest, well
is a 1 bit type, true, false.

22
00:01:50,257 --> 00:01:55,392
It's the one that we found in some
comparaisons, which are called the

23
00:01:55,392 --> 00:02:00,757
booleans types; which obviously,since
we do not have flip-flops

24
00:02:00,757 --> 00:02:03,530
that drag around the processor, we have

25
00:02:03,530 --> 00:02:10,170
binary words, Boolean variables,
which will never be declared

26
00:02:10,170 --> 00:02:14,514
in fact, are represented in
the form of a 0 for

27
00:02:14,514 --> 00:02:18,050
false,and a different from 0, for true.

28
00:02:18,050 --> 00:02:21,534
In general we take the value 1;
but operations can

29
00:02:21,534 --> 00:02:23,495
very well  lead to

30
00:02:23,495 --> 00:02:27,180
differents value, which will be
considered true.

31
00:02:27,180 --> 00:02:30,829
So,for the calculations,
the representation of

32
00:02:30,829 --> 00:02:34,956
the information,we use
the word byte ,8 bits,

33
00:02:34,956 --> 00:02:38,380
as we have already seen,a
value between 0 and

34
00:02:38,380 --> 00:02:44,075
255,which can be represented
in form of a circle.

35
00:02:44,075 --> 00:02:49,810
If we increment and overflow,
well, we start again,you've seen.

36
00:02:49,810 --> 00:02:51,840
And then now ,at the level of

37
00:02:51,840 --> 00:02:54,710
applications,we will declare
the bytes types.

38
00:02:54,710 --> 00:03:00,461
There I want to blink a number of
times, and i'll do a "for loop",

39
00:03:00,461 --> 00:03:05,355
in which it will require a counter,
the variable

40
00:03:05,355 --> 00:03:07,954
I,and as long as I have'nt reached my

41
00:03:07,954 --> 00:03:11,345
number of blinks, I still do my little

42
00:03:11,345 --> 00:03:16,860
blink here, and increment the
counter, for this condition.

43
00:03:16,860 --> 00:03:21,459
So,the car type ,has been defined
historically, to represent

44
00:03:21,459 --> 00:03:25,605
characters which are between 0 and
127,and for a surprising reason

45
00:03:25,605 --> 00:03:32,340
which may still depend on the compiler,
it is considered signed,

46
00:03:32,340 --> 00:03:39,400
and it is sometimes prudent to write
signed char, and for a byte, unsigned char.

47
00:03:39,400 --> 00:03:44,763
So,the the representation can
also be done on a

48
00:03:44,763 --> 00:03:50,605
circle, with negative numbers which
are on that half of the circle, and it's

49
00:03:50,605 --> 00:03:55,652
at the level of the transition here,
that the adder may

50
00:03:55,652 --> 00:04:00,920
report errors, but, your programm, except

51
00:04:00,920 --> 00:04:06,704
for some pretty clever programming,
is not at all concerned

52
00:04:06,704 --> 00:04:12,000
with this kind of over-capacity,which
are very difficult to manage.

53
00:04:12,000 --> 00:04:15,666
so ,a little quizz, to see if you have

54
00:04:15,666 --> 00:04:20,631
well understood, i defined an ss
char,so a number 8

55
00:04:20,631 --> 00:04:25,390
bits signed, which is 200,an
unsigned 8-bits number

56
00:04:25,390 --> 00:04:30,427
which is also 200, and I am

57
00:04:30,427 --> 00:04:35,433
in an instruction With an if. Is ss,

58
00:04:35,433 --> 00:04:40,870
the same as bb? Is this expression

59
00:04:40,870 --> 00:04:42,436
true or false?

60
00:04:42,436 --> 00:04:47,400
so, here are the possibe answers,
think a moment.

61
00:04:52,175 --> 00:05:00,070
So,if you answered "not accepted",
I would be quite so sastified

62
00:05:00,070 --> 00:05:06,575
since we defined here,an ss equal to
200,which is in fact on  the circle of

63
00:05:06,575 --> 00:05:11,670
arithmetic numbers of 8 bits,the
processor only sees bits and

64
00:05:11,670 --> 00:05:16,750
numbers, hence the 200 will be
pretty much there, and then

65
00:05:16,750 --> 00:05:20,733
in this part, well, we have

66
00:05:20,733 --> 00:05:24,680
negative numbers,that correspond
in fact to minus 57.

67
00:05:24,680 --> 00:05:30,031
So, a good compiler should ask you:
Did you

68
00:05:30,031 --> 00:05:35,230
understand what was a signed number?

69
00:05:35,230 --> 00:05:38,270
Since here, you wrote a value,

70
00:05:38,270 --> 00:05:42,030
which isn't a positive value, they are

71
00:05:42,030 --> 00:05:46,570
limited, to 127, as we have seen.
So, in fact, the

72
00:05:46,570 --> 00:05:52,040
compiler does not care, and we have
the choice to know if it is true or false.

73
00:05:52,040 --> 00:05:57,109
Then we must compare this value minus

74
00:05:57,109 --> 00:06:02,170
57, with the value 200. If we represent

75
00:06:02,170 --> 00:06:07,450
that on an axis, well you have 0,200,
and then

76
00:06:07,450 --> 00:06:13,100
it would seem logical to say, there
are so far

77
00:06:13,100 --> 00:06:17,910
minus 128, and here we'll find 57.

78
00:06:17,910 --> 00:06:23,146
So it's obvious that 200 is

79
00:06:23,146 --> 00:06:28,250
is greater than 57, and that they are

80
00:06:28,250 --> 00:06:33,303
different. So, does

81
00:06:33,303 --> 00:06:39,740
the compiler reason like me?
I am cautious.

82
00:06:39,740 --> 00:06:43,980
I have not read the 600-page of
C specifications,

83
00:06:43,980 --> 00:06:48,732
so I'll prefer to write a small program,
and then put

84
00:06:48,732 --> 00:06:54,043
behind this statement if, light the
letter if it's true, extinguish

85
00:06:54,043 --> 00:06:58,386
a letter if it's false; And,
I could be sure that

86
00:06:58,386 --> 00:07:01,520
my interpretation is correct.

87
00:07:01,520 --> 00:07:06,884
So that is a technique that should
always be used,

88
00:07:06,884 --> 00:07:11,344
write small programs, to verify
that we have understood.

89
00:07:11,344 --> 00:07:17,080
You naturally have the types 16 bits
and 32 bits,which are called "word","int"

90
00:07:17,080 --> 00:07:23,439
Then,the "int" is abundantly used
in Arduino,because we do not want

91
00:07:23,439 --> 00:07:28,190
to explainn a lot of things, and then,
it's the type going everywhere.

92
00:07:28,190 --> 00:07:33,026
In general,we work with words relatively

93
00:07:33,026 --> 00:07:38,364
shorts, so we do not see the difference,
between positive integer and signed integer,

94
00:07:38,364 --> 00:07:43,723
as long as the 16 bits is not retouched,
you have, the long ones

95
00:07:43,723 --> 00:07:49,065
that are signed and that must be
called unsigned

96
00:07:49,065 --> 00:07:53,990
long, when you want to retrieve
these last bits.

97
00:07:53,990 --> 00:07:59,440
And, as a small example of
the rather rare use of long,

98
00:07:59,440 --> 00:08:04,457
you have, an primitive of Arduino,
it is not of

99
00:08:04,457 --> 00:08:09,710
C, it is the compilers Arduino and
compatible, which have added

100
00:08:09,710 --> 00:08:14,590
a small program, which uses a
Internal resource of the processor,

101
00:08:14,590 --> 00:08:18,955
to calculate the time from the reset.
So at the moment when you release

102
00:08:18,955 --> 00:08:24,989
processor, you have the value 0,
and then, it increments by 1 all

103
00:08:24,989 --> 00:08:30,420
the millisecond, and you can
measure the elapsed time.

104
00:08:30,420 --> 00:08:35,060
So here, we use that quite often,
as you do

105
00:08:35,060 --> 00:08:37,382
when you drive, you

106
00:08:37,382 --> 00:08:40,050
look at the time of departure,
you look at the time

107
00:08:40,050 --> 00:08:42,210
of arrival, and then, the travel time that

108
00:08:42,210 --> 00:08:44,466
interests you, well, it's a stupid
difference.

109
00:08:44,466 --> 00:08:51,440
Therefore we will have to define in the
type long, the time, the previous time,

110
00:08:51,440 --> 00:08:57,661
the start time, and then we will calculate
the elapsed time, with a subtraction.

111
00:08:57,661 --> 00:09:00,859
So we will memorize the
current time, we have

112
00:09:00,859 --> 00:09:05,560
already memorized the previous time,
we make the subtraction.

113
00:09:05,560 --> 00:09:08,860
And if now we continue the
journey, and we want

114
00:09:08,860 --> 00:09:13,810
to know again the time, we rememorize
the present time in the variable.

115
00:09:13,810 --> 00:09:19,090
So, you will tell me, we could
economize one variable,

116
00:09:19,090 --> 00:09:24,651
because, I can do my subtraction,
by watching my watch,

117
00:09:24,651 --> 00:09:29,145
rather than having already copied the
time on a piece of paper or in my memory.

118
00:09:29,145 --> 00:09:30,745
So we could write

119
00:09:30,745 --> 00:09:34,088
directly millis minus previous time, and

120
00:09:34,088 --> 00:09:38,086
then reset the new time, with millis.

121
00:09:38,086 --> 00:09:41,500
So,what i would like to  point out
to you is that,

122
00:09:41,500 --> 00:09:46,650
between these 2 instructions,
the time is not the same,

123
00:09:46,650 --> 00:09:51,240
since a certain number of
instructions had to be executed

124
00:09:51,240 --> 00:09:55,821
to analyze this line ,and start
by analizing a

125
00:09:55,821 --> 00:10:01,094
number; before transfering the time.
So that can be 10,20

126
00:10:01,094 --> 00:10:06,198
processor instructions,so 5,10

127
00:10:06,198 --> 00:10:11,710
microsecond,which can be
regarded as quite negligible.

128
00:10:11,710 --> 00:10:16,041
But, be careful, if you allowed
interruptions, and it's

129
00:10:16,041 --> 00:10:21,046
what will happen in interresting
applications, you may have an

130
00:10:21,046 --> 00:10:25,780
interruption that arises between
these two instructions, and it's

131
00:10:25,780 --> 00:10:28,326
like with your PC, and suddenly your

132
00:10:28,326 --> 00:10:31,823
keyboard is out of order,because
there are interruptions which

133
00:10:31,823 --> 00:10:36,420
make that, we no longer take care
of your main program.

134
00:10:36,420 --> 00:10:40,684
So in that case, of course, if you have
many

135
00:10:40,684 --> 00:10:46,246
milliseconds, you will see seconds
of waiting,that will completely distort

136
00:10:46,246 --> 00:10:50,296
the time measurements, whereas
here we made a precise photograph

137
00:10:50,296 --> 00:10:55,150
at a moment, and then we copied
the variable.

138
00:10:55,150 --> 00:10:58,790
Well, let's talk a little bit about
the variables of tables

139
00:10:58,790 --> 00:11:02,885
So,a variable, as we have just seen,

140
00:11:02,885 --> 00:11:05,973
can  be declared with its semicolon
at the end,

141
00:11:05,973 --> 00:11:08,038
and it can be assigned a value which

142
00:11:08,038 --> 00:11:11,697
will be valid at the beginning of the
program, which can be further transformed

143
00:11:11,697 --> 00:11:16,800
since if I Write in the program
var 2 equal 33,

144
00:11:16,800 --> 00:11:22,020
well, I reset this variable to
a new value.

145
00:11:22,020 --> 00:11:27,046
So now it's quite practical
to have tables of variables, not

146
00:11:27,046 --> 00:11:32,286
to be able to number variable
1, 2, 3, while it goes together,

147
00:11:32,286 --> 00:11:37,680
therefore if we write table hook 4, well, you book

148
00:11:37,680 --> 00:11:42,885
4 times 16 bits signed and
it is declared, you can

149
00:11:42,885 --> 00:11:48,308
give values, to these 4modes 16-bit
modes, and the compiler

150
00:11:48,308 --> 00:11:53,202
is quite smart enough to count
and then memorize,

151
00:11:53,202 --> 00:11:57,972
that there is value 4 here in
this index we speak

152
00:11:57,972 --> 00:12:02,860
of indexing in an array, and now I can,

153
00:12:02,860 --> 00:12:08,476
when writing xx equal table
hooks 2, I can fetch

154
00:12:08,476 --> 00:12:13,432
the second element but remember
that we always count in binary

155
00:12:13,432 --> 00:12:18,450
from zero, so I'll
retrieve The value 33.

156
00:12:18,450 --> 00:12:23,058
And then now I can also assign a value in

157
00:12:23,058 --> 00:12:27,864
my table, write table 4 equal
to 15, and what will

158
00:12:27,864 --> 00:12:33,515
happen there, ben, my 4, you notice
that it is outside the array,

159
00:12:33,515 --> 00:12:39,223
the compiler C usually does not say
anything at all, it will go to put

160
00:12:39,223 --> 00:12:43,364
In the next memory position, the value

161
00:12:43,364 --> 00:12:46,892
15 and will perhaps overwrite a variable

162
00:12:46,892 --> 00:12:50,004
you use in the program and

163
00:12:50,004 --> 00:12:53,028
it will be a wonderful
planted, so it is not

164
00:12:53,028 --> 00:12:56,930
advisable to Do, but, it's easy to watch.

165
00:12:56,930 --> 00:13:01,505
Application for a painting:
we want to play some notes.

166
00:13:01,505 --> 00:13:06,840
And then we will put these
notes in a table to say,

167
00:13:06,840 --> 00:13:10,816
well, if I want a re the
frequency is 247 hertz.

168
00:13:10,816 --> 00:13:10,980
 

169
00:13:10,980 --> 00:13:14,096
So what we have to program

170
00:13:14,096 --> 00:13:19,098
is a period, because you will have
to attract the loudspeaker,

171
00:13:19,098 --> 00:13:23,882
the membrane of the loudspeaker,
release it, and do that with

172
00:13:23,882 --> 00:13:28,020
a period that can be determined
from the frequency.

173
00:13:28,020 --> 00:13:33,690
So having to calculate this
period each time is absurd,

174
00:13:33,690 --> 00:13:39,348
even if the time was reasonable,
we have to make a table, so put

175
00:13:39,348 --> 00:13:44,680
in this table directly the
periods, and that is,

176
00:13:44,680 --> 00:13:48,366
we gave an explicit name, periods of

177
00:13:48,366 --> 00:13:52,024
notes Do, re, mi, fa, which will be in

178
00:13:52,024 --> 00:13:55,764
positions 0, 1, 2, 3. So now
I can define my

179
00:13:55,764 --> 00:14:03,142
table by saying, iii integers,
period note, I have four notes

180
00:14:03,142 --> 00:14:10,544
that I have calculated and then
I can now do a "for loop"

181
00:14:10,544 --> 00:14:14,070
since I will have to repeat
many times this

182
00:14:14,070 --> 00:14:19,054
period that lasts 4 microseconds,
4 milliseconds, forgiveness

183
00:14:19,054 --> 00:14:23,075
my table is in microseconds,to have a note

184
00:14:23,075 --> 00:14:27,270
that can be heard for a second at least.

185
00:14:27,270 --> 00:14:30,238
So we will do a counter that will

186
00:14:30,238 --> 00:14:35,594
work with the half-period,
and then to change

187
00:14:35,594 --> 00:14:37,090
the state of the speaker.

188
00:14:37,090 --> 00:14:40,429
So again there are two things
that should shock you,

189
00:14:40,429 --> 00:14:46,239
the small semicolon, that's traditional,
and then there is especially this

190
00:14:46,239 --> 00:14:51,511
1, which is there, whereas what
I would like is to have

191
00:14:51,511 --> 00:14:56,900
something, an explicit name
that tells me what it is.

192
00:14:56,900 --> 00:15:00,690
So it's easy to make a define,

193
00:15:00,690 --> 00:15:05,953
and then say ben, define,
re, 1, and there is an ease of,

194
00:15:05,953 --> 00:15:11,290
Arduino, and C, which is an enumeration,

195
00:15:11,290 --> 00:15:16,522
the name is not Essential,but
I have my enumeration

196
00:15:16,522 --> 00:15:21,170
here, I gave the equivalence
between names

197
00:15:21,170 --> 00:15:25,884
I understand and order numbers that my

198
00:15:25,884 --> 00:15:31,974
processor will understand.
Why did I write do?

199
00:15:31,974 --> 00:15:36,660
Well,it's because of the do,
do while, huh, it's a word

200
00:15:36,660 --> 00:15:40,979
reserved by the C, and you
see it in the editor it's

201
00:15:40,979 --> 00:15:45,850
colored whereas the names you
define yourself are not

202
00:15:45,850 --> 00:15:50,924
colored, So if you set, if you put
do in there you will have

203
00:15:50,924 --> 00:15:52,706
a natural error message.

204
00:15:52,706 --> 00:15:58,130
Well,another application that is often
documented on the internet, you want

205
00:15:58,130 --> 00:16:04,658
to turn on a display, set seg1,
it is the usual name of these

206
00:16:04,658 --> 00:16:10,590
segments, and here you find as
example of programming, you must

207
00:16:10,590 --> 00:16:16,240
start by saying that the pins on
which the Processor is wired

208
00:16:16,240 --> 00:16:20,050
are outputs, then pins 2, 3, 4, up to

209
00:16:20,050 --> 00:16:24,710
9 in order are used and are
programmed output.

210
00:16:24,710 --> 00:16:29,548
And then I can not remember
the comment that was there before but I

211
00:16:29,548 --> 00:16:35,530
guess the a is wired on the fuse 2,
the b on fuse 3,

212
00:16:35,530 --> 00:16:41,344
it would seem logical, and obviously I would prefer that

213
00:16:41,344 --> 00:16:44,264
it was Documented a bit better, that we

214
00:16:44,264 --> 00:16:46,896
define segment a on fuse 2, segment

215
00:16:46,896 --> 00:16:49,052
b on fuse 3, so we

216
00:16:49,052 --> 00:16:52,920
know exactly what has been wired, and now

217
00:16:52,920 --> 00:16:56,295
since we just talk about data tables,

218
00:16:56,295 --> 00:16:58,545
Ben,there it really makes me think of

219
00:16:58,545 --> 00:17:01,845
an array, and then I'll define it,

220
00:17:01,845 --> 00:17:06,475
saying, it's my fuse numbers,

221
00:17:06,475 --> 00:17:11,263
segment a, segment b, segment 3,
so i defined here 2, 3, 4 , But I

222
00:17:11,263 --> 00:17:16,256
recognize what it is,uh, it
makes me an array of

223
00:17:16,256 --> 00:17:21,131
7, and then hold, I can
write a "for loop",

224
00:17:21,131 --> 00:17:26,120
saying I leave with i
equal zero, and I write

225
00:17:26,120 --> 00:17:31,476
fuse Mode, fuse of zero, OUTPUT,
fuse of zeros that means

226
00:17:31,476 --> 00:17:36,004
that I will look in this table the segment

227
00:17:36,004 --> 00:17:40,902
a, which was defined as fuse number 2,

228
00:17:40,902 --> 00:17:45,910
so i executes exactly this statement

229
00:17:45,910 --> 00:17:50,610
with fuseMode, fusehooks zero,

230
00:17:50,610 --> 00:17:56,633
OUTPUT, and then of course with
the loop for I take 1, I take

231
00:17:56,633 --> 00:18:02,142
2, I take 3, the order, pins
numbers do not need at all

232
00:18:02,142 --> 00:18:06,285
To be in an ascending order,
I have here defined

233
00:18:06,285 --> 00:18:09,990
the fuses which may be
absolutely arbitrary.

234
00:18:09,990 --> 00:18:16,543
So this is a much more elegant
writing, and we can go further,

235
00:18:16,543 --> 00:18:22,799
because I have defined
my fuse, I can define

236
00:18:22,799 --> 00:18:27,463
the digit 7 as a table.

237
00:18:27,463 --> 00:18:32,450
In this table I have a, b,
c, which are active,

238
00:18:32,450 --> 00:18:38,666
lit, that does not mean that
I will put a 5

239
00:18:38,666 --> 00:18:40,773
volts or a 0 volt, it is at
another level that we

240
00:18:40,773 --> 00:18:46,780
will think about this, and then there
are segments that are off.

241
00:18:46,780 --> 00:18:48,580
And then

242
00:18:48,580 --> 00:18:53,680
keep, ben, to turn on this digit, I
can make a small for loop,

243
00:18:53,680 --> 00:18:58,431
where instead of making the fuseMode
as before, well I will do a

244
00:18:58,431 --> 00:19:03,621
digitalWrite, to say ben, in pin
number zero , for

245
00:19:03,621 --> 00:19:09,120
example, I will put the state
of the segment zero.

246
00:19:09,120 --> 00:19:13,965
So we find the i here, but once in a table

247
00:19:13,965 --> 00:19:15,498
once in the other.

248
00:19:15,498 --> 00:19:18,810
So now, be attentive!

249
00:19:18,810 --> 00:19:24,218
Because I will define a
two-dimensional array.

250
00:19:24,218 --> 00:19:28,924
I have 10 digits to represent,
and in every

251
00:19:28,924 --> 00:19:33,640
digit I have 8 bits. So here is my
painting, you recognize

252
00:19:33,640 --> 00:19:39,658
the 7th, it is there, I define it
as a single element, but now

253
00:19:39,658 --> 00:19:44,928
I can index it, and then I can come with

254
00:19:44,928 --> 00:19:49,990
an adequate program, select
the 7, which will be

255
00:19:49,990 --> 00:19:55,830
a variable Is 7, and then scan to display.

256
00:19:55,830 --> 00:20:00,390
So there,Ben, I did a little program
to display the numbers in order,

257
00:20:00,390 --> 00:20:04,950
for, it will be, the digits counter,

258
00:20:04,950 --> 00:20:09,880
we end with a delay of
one second like that

259
00:20:09,880 --> 00:20:14,809
we will see 0, 1, 2, 3,
displayed for one second,

260
00:20:14,809 --> 00:20:19,815
and then we have a second
for loop inside that

261
00:20:19,815 --> 00:20:24,871
will scan the segments here to set them

262
00:20:24,871 --> 00:20:29,986
to 1 or 0, that is the digitalWrite
that acts on bits, there

263
00:20:29,986 --> 00:20:33,057
are other ways to act on bits,

264
00:20:33,057 --> 00:20:36,036
we will see them, which are
compatible with the C,

265
00:20:36,036 --> 00:20:39,514
that is compatible with
Arduino, but it gives us a

266
00:20:39,514 --> 00:20:42,682
Writing pretty elegant in the
background where we will

267
00:20:42,682 --> 00:20:47,347
sweep the right line of
the table, and given

268
00:20:47,347 --> 00:20:49,307
that we have a second loop for and well we

269
00:20:49,307 --> 00:20:51,980
will display all the successive digits,

270
00:20:51,980 --> 00:20:55,580
there is apparently a small error,
that is, You recognize

271
00:20:55,580 --> 00:21:01,780
that here I forgot that there
were 10 numbers, from 0 to

272
00:21:01,780 --> 00:21:07,670
9, so I have to put a 10 here,
I come back on this table, which allows

273
00:21:07,670 --> 00:21:13,600
to display the, The digits,
the digits from 0 to 9.

274
00:21:13,600 --> 00:21:17,833
You may not have realized
that this sequence of

275
00:21:17,833 --> 00:21:20,323
1 and 0 are not bits,

276
00:21:20,323 --> 00:21:25,017
but they are bytes, 8-bit words.

277
00:21:25,017 --> 00:21:30,248
So this table takes 8 times 10 positions

278
00:21:30,248 --> 00:21:35,654
in memory, 80 bytes, and if
without thinking, you

279
00:21:35,654 --> 00:21:40,574
int int here, and well you will
have160 bytes used in

280
00:21:40,574 --> 00:21:45,556
memory. So it's clear that
we're going to avoid

281
00:21:45,556 --> 00:21:51,054
programming like this, we will
see how, actually

282
00:21:51,054 --> 00:21:56,074
delete the commas, delete a single 8-bit
word for each digit, apply those bits

283
00:21:56,074 --> 00:22:01,950
directly to the segments,
and be much more efficient.

284
00:22:01,950 --> 00:22:06,875
Then one more thing:
by writing byte digit, or int

285
00:22:06,875 --> 00:22:11,962
digit, you reserve space in memory.

286
00:22:11,962 --> 00:22:17,280
In variable memory. If you specify const,

287
00:22:17,280 --> 00:22:22,485
well you will define constants

288
00:22:22,485 --> 00:22:27,690
and it is clear that we will not
have fun modifying segments

289
00:22:27,690 --> 00:22:32,155
during execution, so
by writing const, this

290
00:22:32,155 --> 00:22:37,237
information will go into the
program space, which has ten

291
00:22:37,237 --> 00:22:43,365
times more space than the variables
space, and this is the

292
00:22:43,365 --> 00:22:47,874
most efficient way to
proceed, declare const

293
00:22:47,874 --> 00:22:50,880
whenever you have constants.

294
00:22:50,880 --> 00:22:57,062
So you see that, the C allows
writes that are, er quite

295
00:22:57,062 --> 00:23:03,126
compact and interesting, and then
this is what we will continue

296
00:23:03,126 --> 00:23:09,080
to discover by expanding with
different types of material.

