1
00:00:04,055 --> 00:00:08,110
Hello, today we start programming in C.

2
00:00:08,110 --> 00:00:13,180
In the industry, if we have to do a project,
we choose a microcontroller, we

3
00:00:13,180 --> 00:00:19,620
buy the development tools, and
get involved to finish the application.

4
00:00:19,620 --> 00:00:28,800
With Arduino, there was suddenly a
possibility that concerned amateurs,

5
00:00:28,800 --> 00:00:34,946
which has been very successful.
This success is due to two reasons, on

6
00:00:34,946 --> 00:00:41,620
the one hand environment is free,
and runs on different platforms.

7
00:00:41,620 --> 00:00:43,490
On the other hand, the three

8
00:00:43,490 --> 00:00:47,342
major manufacturers of
microcontrollers, currently,

9
00:00:47,342 --> 00:00:49,718
support this Arduino with

10
00:00:49,718 --> 00:00:54,850
different names, Pinguino for Microchip,
Energia

11
00:00:54,850 --> 00:00:59,850
for Texas Instruments, with CMSP.
The aim of our

12
00:00:59,850 --> 00:01:05,041
course is to make you understand
the microcontrollers, and to help you

13
00:01:05,041 --> 00:01:09,683
to implement them. Implementing, without

14
00:01:09,683 --> 00:01:14,574
having a practice is difficult. So we

15
00:01:14,574 --> 00:01:19,938
encourage you to buy, or if you do
not already have one,

16
00:01:19,938 --> 00:01:25,476
these many microcontroller cards,
uh, that exist, and we

17
00:01:25,476 --> 00:01:30,893
will sometimes offer practical exercices that

18
00:01:30,893 --> 00:01:36,653
are not part of the evaluation
of the course, and

19
00:01:36,653 --> 00:01:42,260
will allow the testing of programs that
have been quoted or to complement them

20
00:01:42,260 --> 00:01:44,828
Well, so,

21
00:01:44,828 --> 00:01:50,485
what we are going to do now is to

22
00:01:50,485 --> 00:01:56,650
understand the structure of a
microcontroller, see how we can

23
00:01:56,650 --> 00:02:02,628
easily manage, inputs outputs,
and most especially,

24
00:02:02,628 --> 00:02:09,800
learn how to handle input-output,

25
00:02:09,800 --> 00:02:15,040
and especially learn to write
the programs correctly.

26
00:02:15,040 --> 00:02:20,870
Let's go back to our, drawing that showed,

27
00:02:20,870 --> 00:02:25,570
the platforms on which the software runs.

28
00:02:25,570 --> 00:02:30,716
We'll basically look after Arduino,
which runs on

29
00:02:30,716 --> 00:02:35,553
many AVR cards, and with Energia

30
00:02:35,553 --> 00:02:40,452
which runs on MSP. So what I said is

31
00:02:40,452 --> 00:02:45,390
that the interest, for the beginner
of Arduino, is that we hide the

32
00:02:45,390 --> 00:02:50,360
complexity of the processor, it will
highlighted, be assured, and that

33
00:02:50,360 --> 00:02:55,680
we work with pins that are outputs,
or inputs,

34
00:02:55,680 --> 00:03:00,682
and we will keep the possibility
of programming these

35
00:03:00,682 --> 00:03:05,770
pins, either at the input or at the output.
For that, we

36
00:03:05,770 --> 00:03:11,020
we need instructions, and at once
immediately take a practical implication.

37
00:03:11,020 --> 00:03:16,550
On pine three, we will connect
a led with its resistance.

38
00:03:16,550 --> 00:03:19,450
It will therefore require a zero
to turn on the led.

39
00:03:19,450 --> 00:03:25,899
The arrow here shows that it
is an output to the processor.

40
00:03:25,899 --> 00:03:32,430
But the current will have to enter
the processor, eh, to turn on the led.

41
00:03:32,430 --> 00:03:34,626
On the pine four, well, we'll put a

42
00:03:34,626 --> 00:03:38,080
pusher, it was explained with
its, its resistance for the amp.

43
00:03:38,080 --> 00:03:44,664
And the Arduino instructions
is to define that direction.

44
00:03:44,664 --> 00:03:49,250
This is pinMode, pine three is
output, pins four is at the input.

45
00:03:49,250 --> 00:03:50,930
PinMode, it is easy

46
00:03:50,930 --> 00:03:55,880
to remember, it is an instruction
that ends with a semicolon.

47
00:03:55,880 --> 00:04:01,380
And if we want to turn on the led, well,
we

48
00:04:01,380 --> 00:04:06,805
has the instruction digitalWrite.
We will write on that pin in digital.

49
00:04:06,805 --> 00:04:11,130
We will see once that we can
also write in analog.

50
00:04:11,130 --> 00:04:16,466
On pin 3, we put either high,
which is actually the logical state

51
00:04:16,466 --> 00:04:22,120
one, or a low which is logical state
zero, five volts, zero

52
00:04:22,120 --> 00:04:27,610
volt, high, low, according to habits,
ah, taken by Arduino.

53
00:04:27,610 --> 00:04:34,330
If we want to read the pusher, we
have to write digitalRead of four.

54
00:04:34,330 --> 00:04:36,970
So let's start with the famous

55
00:04:36,970 --> 00:04:41,050
program, uh, to Arduino, blink, pink.

56
00:04:41,050 --> 00:04:41,642
In

57
00:04:41,642 --> 00:04:46,210
C it is Hello World. Here it will flash.

58
00:04:46,210 --> 00:04:49,850
It should be defined that
the pine three is output.

59
00:04:49,850 --> 00:04:55,560
We must then repeat, write, wait,

60
00:04:55,560 --> 00:05:01,136
write, wait. The function that will execute

61
00:05:01,136 --> 00:05:07,320
permanently, it is called loop.
Initialization is called setup,

62
00:05:07,320 --> 00:05:12,280
And it should be noted that this structure

63
00:05:12,280 --> 00:05:17,508
of the C, where we always have
an opening brace and

64
00:05:17,508 --> 00:05:22,538
a closing brace, and sometimes
the brace is

65
00:05:22,538 --> 00:05:27,610
Put, opening is put, ah, at
the beginning of a line, ah,

66
00:05:27,610 --> 00:05:32,699
here, to gain a little place, uh, it is put next

67
00:05:32,699 --> 00:05:34,510
to the instruction.

68
00:05:34,510 --> 00:05:39,805
And always, we have semicolons
at the end of the instructions.

69
00:05:39,805 --> 00:05:42,580
If you forget them, you have messages

70
00:05:42,580 --> 00:05:46,886
which can sometimes be a little bit,
ah, inappropriate.

71
00:05:46,886 --> 00:05:53,650
Then, as in any microcontroller,
there is an initialization phase,

72
00:05:53,650 --> 00:05:58,193
and even in your PC, you suffer
with all this time of start

73
00:05:58,193 --> 00:06:01,650
in the bottom of your PC,
and then we go into a

74
00:06:01,650 --> 00:06:04,380
loop, where the program does

75
00:06:04,380 --> 00:06:06,100
what it was told to do.

76
00:06:06,100 --> 00:06:12,500
So, this is not a C program,
it's really an Arduino program.

77
00:06:12,500 --> 00:06:17,102
In C, one enters the program
with one hand, and then once we

78
00:06:17,102 --> 00:06:20,839
have finished initializing, well,
it's the while statement

79
00:06:20,839 --> 00:06:23,380
which we shall see just now that allows

80
00:06:23,380 --> 00:06:26,270
to repeat the loop forever.

81
00:06:26,270 --> 00:06:30,200
Okay, now, if I show you this
program in a week,

82
00:06:30,200 --> 00:06:34,800
you will inevitably say, but
what is this pine three?

83
00:06:34,800 --> 00:06:37,660
Output, good, well, it must be an exit.

84
00:06:37,660 --> 00:06:38,890
That, I remember.

85
00:06:38,890 --> 00:06:45,036
Then, here, we find a three,
we seem to set to zero.

86
00:06:45,036 --> 00:06:45,933
What's the point?

87
00:06:45,933 --> 00:06:48,486
what are we trying to do? We put

88
00:06:48,486 --> 00:06:52,090
a zero, we put one, we wait.
What is it about?

89
00:06:52,090 --> 00:06:55,626
So, of course, you will tell me,
this program is badly

90
00:06:55,626 --> 00:07:00,170
written, it was necessary to
document, here, what we do.

91
00:07:00,170 --> 00:07:03,309
And if we start putting notes, comments

92
00:07:03,309 --> 00:07:07,801
at each instruction, uh, it's
actually, not helping readability.

93
00:07:07,801 --> 00:07:13,554
What is important is to say, here,
as first thing, the pine

94
00:07:13,554 --> 00:07:15,590
three, it's a led.

95
00:07:15,590 --> 00:07:22,570
So we can declare it with Arduino
notations, int led equals three.

96
00:07:22,570 --> 00:07:26,585
We will understand, once,
why I do not like this notation.

97
00:07:26,585 --> 00:07:33,930
I prefer the define, which in fact,
announces a dictionary.

98
00:07:33,930 --> 00:07:38,799
Whenever you have written
led in the program, well,

99
00:07:38,799 --> 00:07:43,871
the compiler will put three instead.
Led space three, no

100
00:07:43,871 --> 00:07:49,080
semicolon at the end, since this
is not an instruction.

101
00:07:49,080 --> 00:07:54,180
It is really an equivalence
that allows us now to write

102
00:07:54,180 --> 00:07:59,120
led, here, and then write
led also in the digitalWrite.

103
00:07:59,120 --> 00:08:04,014
And now, well, to turn on, we
have to put a low, but in

104
00:08:04,014 --> 00:08:08,010
other schemes, it has been seen, the diode

105
00:08:08,010 --> 00:08:11,210
upside down, and to turn it on,
we must put a high.

106
00:08:11,210 --> 00:08:16,327
So, if in each part of the program,we

107
00:08:16,327 --> 00:08:21,847
have to repeat, it's a low
for turn on, it does not make sense.

108
00:08:21,847 --> 00:08:24,190
So we will define, say, well,

109
00:08:24,190 --> 00:08:29,190
that is the function on,
the function LedOn.

110
00:08:29,190 --> 00:08:33,770
And I will define LedOn

111
00:08:33,770 --> 00:08:38,138
as such instruction. This will
allow me, in the

112
00:08:38,138 --> 00:08:43,138
program, to write very elegantly
LedOn, delay,

113
00:08:43,138 --> 00:08:47,846
LedOff, delay. In a month
you will know very well what

114
00:08:47,846 --> 00:08:54,730
I wanted to do with that program.
The next thing to understand,

115
00:08:54,730 --> 00:08:57,572
is how to handle an entry.

116
00:08:57,572 --> 00:09:01,150
A pusher was connected to pine four.

117
00:09:01,150 --> 00:09:05,110
So we'll define, pinMode, four, input.

118
00:09:05,110 --> 00:09:09,050
We have the digitalRead instruction
of four,

119
00:09:09,050 --> 00:09:12,125
but be careful, this is not an expression.

120
00:09:12,125 --> 00:09:15,688
If you say a four digitalRead
processor, it

121
00:09:15,688 --> 00:09:20,070
will answer you, OK, I read the pine four,

122
00:09:20,070 --> 00:09:24,610
I read that it was a one or zero,
but what do I do with it?

123
00:09:24,610 --> 00:09:25,426
huh?

124
00:09:25,426 --> 00:09:30,680
So the digitalRead, returns you
a value that

125
00:09:30,680 --> 00:09:35,216
is one, if released, zero if pressed, and

126
00:09:35,216 --> 00:09:40,190
most often the if statement is used

127
00:09:40,190 --> 00:09:45,400
to make a decision if that key
is pressed, or released.

128
00:09:45,400 --> 00:09:50,356
So we will write if, parentheses,
with precisely this

129
00:09:50,356 --> 00:09:55,613
condition that is true or false.
If digitalRead of four is

130
00:09:55,613 --> 00:10:00,764
equal to zero, well, the key
is pressed, and we will put

131
00:10:00,764 --> 00:10:05,998
in a brace, the instructions to realize.

132
00:10:05,998 --> 00:10:10,622
Why equal, equal? Well, here too,
we will see,

133
00:10:10,622 --> 00:10:13,865
the equal, as in arithmetic,
it is reserved for

134
00:10:13,865 --> 00:10:18,580
the assignment, uh, six equal
two times three.

135
00:10:18,580 --> 00:10:21,520
Here we need a sign to

136
00:10:21,520 --> 00:10:25,440
say question mark, is that equal?

137
00:10:25,440 --> 00:10:29,440
Eh, this is a question, actually.

138
00:10:29,440 --> 00:10:35,165
It is true, or it is false, if it is true,
we execute.

139
00:10:35,165 --> 00:10:40,285
So, again, we're dragging
these four while thinking about

140
00:10:40,285 --> 00:10:42,610
this pine, and we must add

141
00:10:42,610 --> 00:10:48,108
definitions, Push is worth four,
mode, Push, input.

142
00:10:48,108 --> 00:10:53,661
And then, the digitalRead of Push, in its

143
00:10:53,661 --> 00:10:57,530
equality, which means is it in a hurry?

144
00:10:57,530 --> 00:11:01,118
We can very well give it a name,
saying PushOn.

145
00:11:01,118 --> 00:11:04,920
If you want to invent a different
name, you are free.

146
00:11:04,920 --> 00:11:08,274
And what matters is that in the program,we

147
00:11:08,274 --> 00:11:12,540
have something here that is quite clear.

148
00:11:12,540 --> 00:11:16,060
If PushOn, we must do this.

149
00:11:16,060 --> 00:11:20,620
And then, we continue programming.

150
00:11:20,620 --> 00:11:25,867
So now, well, as little concrete
examples, I would like to,

151
00:11:25,867 --> 00:11:30,522
turn on when I press the key.

152
00:11:30,522 --> 00:11:35,656
Well, if PushOn, LedOn, otherwise,

153
00:11:35,656 --> 00:11:40,672
LEDOFF. So the instructions of

154
00:11:40,672 --> 00:11:45,420
C, if, else, uh, are easy to understand;
we shall see them again.

155
00:11:45,420 --> 00:11:52,580
Braces are required as always.

156
00:11:52,580 --> 00:11:57,503
We have the structure of the loop.
The structure

157
00:11:57,503 --> 00:12:02,415
of the "if", the structure of
the "else" and the

158
00:12:02,415 --> 00:12:07,623
semicolons at the end of the
instructions. The compiler will be

159
00:12:07,623 --> 00:12:12,574
happy and the execution  will be
done in according to the

160
00:12:12,574 --> 00:12:17,706
definitions. So there
I really insist because here

161
00:12:17,706 --> 00:12:23,150
you see that we have a program
that does not depend on

162
00:12:23,150 --> 00:12:28,670
wiring. We made an application, copied a

163
00:12:28,670 --> 00:12:34,670
pushbutton on an LED and
the program is perfectly clear.

164
00:12:34,670 --> 00:12:39,309
Now, in order for this program to run on

165
00:12:39,309 --> 00:12:42,708
your small card where you plugged in

166
00:12:42,708 --> 00:12:48,612
the LED on pin 3, the push-button
on pin 4, well we must

167
00:12:48,612 --> 00:12:55,250
simply define in C language,
the wiring that you have made.

168
00:12:55,250 --> 00:13:00,590
The pushbutton is active at 0,
the LED is active at 0.

169
00:13:00,590 --> 00:13:03,866
If you change now, you have
reasons to change

170
00:13:03,866 --> 00:13:08,370
or that it is another application,
well, you modify

171
00:13:08,370 --> 00:13:13,575
the definitions only. Well,
little question to ah,

172
00:13:13,575 --> 00:13:18,990
see if you have understood well:
If I remove the structure

173
00:13:18,990 --> 00:13:23,974
"else" here, huh, I have "if" Pous,
Led On, well, what's happening?

174
00:13:23,974 --> 00:13:28,498
It does not change anything, the LED
does not turn on, the LED stays on?

175
00:13:28,498 --> 00:13:31,770
Think for a few seconds.

176
00:13:38,320 --> 00:13:41,916
It is clear that the first two
answers are bad since

177
00:13:41,916 --> 00:13:44,870
here we will in any case have
a possibility to turn on.

178
00:13:44,870 --> 00:13:51,383
Uh, the third answer is closest
to the truth but the LED

179
00:13:51,383 --> 00:13:57,590
will light up when we push it,
it will never turn off.

180
00:13:57,590 --> 00:14:02,340
And now the question is what is the setup?

181
00:14:02,340 --> 00:14:03,717
If the setup

182
00:14:03,717 --> 00:14:10,810
has turned off the LED, well it
will remain off until pressed.

183
00:14:10,810 --> 00:14:16,710
And then, it will light up and stay
eternally on.

184
00:14:16,710 --> 00:14:23,030
This is actually an alarm function.
Just put in the setup,

185
00:14:23,030 --> 00:14:28,770
the LED off and then, as
soon as someone pressed the key,

186
00:14:28,770 --> 00:14:33,210
and the LED will light up,
you will know that someone has

187
00:14:33,210 --> 00:14:37,871
intervened on this key. A second
similar question is that

188
00:14:37,871 --> 00:14:42,444
Now I just remove the "else", I keep the

189
00:14:42,444 --> 00:14:48,240
"If" and then the LedOff.
So what's going to happen?

190
00:14:48,240 --> 00:14:53,972
The LED blinks, on, off, on, off, the
LED does not turn on anymore or

191
00:14:53,972 --> 00:14:56,870
the LED does not turn off anymore?

192
00:15:03,390 --> 00:15:08,430
Well, well, the answer is almost the

193
00:15:08,430 --> 00:15:13,420
answer A. What's going on, actually?

194
00:15:13,420 --> 00:15:18,682
If you do not press the key, well you
go through

195
00:15:18,682 --> 00:15:24,049
this, this block of instructions,
you turn off the LED

196
00:15:24,049 --> 00:15:29,546
and you stay with the LED off. If now,

197
00:15:29,546 --> 00:15:34,058
you press the key, well, you turn on

198
00:15:34,058 --> 00:15:38,660
the LED, but you continue,
and you turn off the LED.

199
00:15:38,660 --> 00:15:42,960
So turn on, turn off, turn on, turn off.

200
00:15:42,960 --> 00:15:46,340
And now, is it 50%?

201
00:15:46,340 --> 00:15:49,412
This is where, when you really
want to do C and know

202
00:15:49,412 --> 00:15:54,640
what we are doing, well,
we will look at what are,

203
00:15:54,640 --> 00:15:57,390
the execution times of the instructions

204
00:15:57,390 --> 00:16:02,679
Uh, to determine the percentage to on.

205
00:16:02,679 --> 00:16:07,233
So the LED flashes if the button
is pressed.

206
00:16:07,233 --> 00:16:12,550
Otherwise, it will not turn on. Analyzing
what the processor is doing is

207
00:16:12,550 --> 00:16:20,022
something extremely important and you
have to have this reflex to get

208
00:16:20,022 --> 00:16:23,330
into the skin of the processor to
understand well,

209
00:16:23,330 --> 00:16:27,334
the information you give it.

210
00:16:27,334 --> 00:16:31,506
Well, now, small variant, I would
like to turn on the

211
00:16:31,506 --> 00:16:33,830
LED if I do not act on the pusher.

212
00:16:33,830 --> 00:16:36,614
So, of course, a simple solution
would be to

213
00:16:36,614 --> 00:16:38,876
say: ben, I define the function PushOff.

214
00:16:38,876 --> 00:16:40,730
If it's PushOff, well I turn on.

215
00:16:40,730 --> 00:16:45,062
A variant, it would be to say:
well, I turn off the LED if I act

216
00:16:45,062 --> 00:16:48,390
on the pusher. So, well,
here we would change.

217
00:16:48,390 --> 00:16:54,190
And then, what I would like to show you
there is that this function PushOff,

218
00:16:54,190 --> 00:16:59,838
which is the inverse of PushOn,
huh, if PushOff is true, ben PushOn

219
00:16:59,838 --> 00:17:04,781
is false and reciprocally, well,
we can define it with a small

220
00:17:04,781 --> 00:17:10,006
very practical sign that we will very
often see that is the exclamation point,

221
00:17:10,006 --> 00:17:13,735
which is the logical negation,
the logical "inversion".

222
00:17:13,735 --> 00:17:18,260
It had already been seen with the small,
the small triangle and a small round.

223
00:17:18,260 --> 00:17:22,552
So, uh, I can write "if!

224
00:17:22,552 --> 00:17:28,640
PushOn "which means" PushOff
"and in this case, I turn on.

225
00:17:28,640 --> 00:17:34,750
So, here's a little extra feature
that will do us a favor.

226
00:17:34,750 --> 00:17:38,894
Well, another foundamental
instruction that we will see

227
00:17:38,894 --> 00:17:43,028
later with more details, is
the "while" that we must well

228
00:17:43,028 --> 00:17:47,386
distinguish from "if". The "while",
with a condition,

229
00:17:47,386 --> 00:17:53,688
pressed key touch for example, well,
we will do as long as the condition is

230
00:17:53,688 --> 00:18:00,182
true. So "while" PushOn, well,
as long as we

231
00:18:00,182 --> 00:18:05,983
press, we will make this condition.
So if I write here "while PushOn"

232
00:18:05,983 --> 00:18:13,360
just right, LedOn, well, as long
as I press, the LED will be on.

233
00:18:13,360 --> 00:18:18,960
And I stay stuck here contrary
to the "if" that would look further.

234
00:18:18,960 --> 00:18:25,398
So, when I release, well, "while"
is not satisfied,we leave

235
00:18:25,398 --> 00:18:30,270
right away, LedOff, and then
we restart.

236
00:18:30,270 --> 00:18:36,460
So we did the same function, copy in the
background, of the pusher on the LED

237
00:18:36,460 --> 00:18:39,864
but in a way that is not really
recommended

238
00:18:39,864 --> 00:18:43,746
since we will hang here, in this wait.

239
00:18:43,746 --> 00:18:49,476
For a program as simple as that
obviously, it has no consequence.

240
00:18:49,476 --> 00:18:50,598
So if you have

241
00:18:50,598 --> 00:18:54,750
well understood the "while",
"while (condition)", if we put

242
00:18:54,750 --> 00:18:58,640
"while (1)", condition 1,
it is always true.

243
00:18:58,640 --> 00:19:05,010
Hein, true it's 1, we might have been
able to write uh, "while (high)", "while uh".

244
00:19:05,010 --> 00:19:07,740
And that, well, it means eternally.

245
00:19:07,740 --> 00:19:11,900
So you're going to stay, that's
precisely what does ,

246
00:19:11,900 --> 00:19:15,640
when we write C, well we replace "loop" by

247
00:19:15,640 --> 00:19:20,349
this "while (1)". And then
if you now have "while

248
00:19:20,349 --> 00:19:25,853
(1) "with a brace that contains
nothing at all, and well the

249
00:19:25,853 --> 00:19:31,170
processor does nothing anymore.
That is not true.

250
00:19:31,170 --> 00:19:33,890
The processor, it always does something

251
00:19:33,890 --> 00:19:37,000
hein,it always passes to
the next instruction.

252
00:19:37,000 --> 00:19:41,240
Simply, well, at the machine code level,

253
00:19:41,240 --> 00:19:45,934
well, what we told him is: you are now at

254
00:19:45,934 --> 00:19:51,164
the instruction 18, for example, well,will

255
00:19:51,164 --> 00:19:56,222
in 18, repeat, go to 18, and then

256
00:19:56,222 --> 00:20:01,312
restart, repeat do not anything,
go back in 18, do

257
00:20:01,312 --> 00:20:06,410
nothing returns in 18, does nothing,
returns in 18, it turns the thumbs.

258
00:20:06,410 --> 00:20:10,665
And then uh, a reset to get out of
this loop will be necessay.

259
00:20:10,665 --> 00:20:13,605
Then lastly, before last interesting thing,

260
00:20:13,605 --> 00:20:15,478
is to invert the state of the LED.

261
00:20:15,478 --> 00:20:17,710
We saw how to set it to 1, we saw

262
00:20:17,710 --> 00:20:22,360
how to set it to 0, Now what I
would like is to reverse its state.

263
00:20:22,360 --> 00:20:26,065
I can  very well say, I will read
the state of

264
00:20:26,065 --> 00:20:31,560
The LED, if it is 0, it means
that it is tuened off,

265
00:20:31,560 --> 00:20:36,000
I'll turn it on. And then I'll turn
it off.

266
00:20:36,000 --> 00:20:40,450
So obviously it's not very pleasant,
because again euh, if

267
00:20:40,450 --> 00:20:46,028
you read this in the program,
nothing tells you that the LED

268
00:20:46,028 --> 00:20:51,960
is on is lit by a state 0. Therefore
it would been necessary

269
00:20:51,960 --> 00:20:57,662
to define in any case StateLed
as being digitalRead

270
00:20:57,662 --> 00:21:01,298
of Led and better defined, is the

271
00:21:01,298 --> 00:21:04,954
LED is off? Is the LED off?

272
00:21:04,954 --> 00:21:11,163
If so, turn it on. So, if (LedEsteinte),

273
00:21:11,163 --> 00:21:17,500
LedOn. And we put this
transcription of the material

274
00:21:17,500 --> 00:21:23,570
into a definition in which we gave
an explicit name

275
00:21:23,570 --> 00:21:28,675
and the coding that the compiler
will be able to translate

276
00:21:28,675 --> 00:21:32,420
In the instructions of low level
of the processor.

277
00:21:32,420 --> 00:21:35,852
Then, we can still do more cleverly.

278
00:21:35,852 --> 00:21:41,602
This is to say: but reversing my LED,
is writting with a

279
00:21:41,602 --> 00:21:48,580
digitalWrite, writting in LED, what?
What we read on

280
00:21:48,580 --> 00:21:54,390
the same LED pin, but inverted. So we

281
00:21:54,390 --> 00:22:00,170
will copy in the LED the inverse
of its state.

282
00:22:00,170 --> 00:22:03,530
And it will remind you of the D flip-flop

283
00:22:03,530 --> 00:22:07,580
Which had been wired by plugging
the output on the input.

284
00:22:07,580 --> 00:22:12,534
What did we do? We had
made it into a divider by two.

285
00:22:12,534 --> 00:22:13,710
Each time,

286
00:22:13,710 --> 00:22:15,790
the value is reversed.

287
00:22:15,790 --> 00:22:19,755
Now, well what replaces the clock,
well, that's the selection

288
00:22:19,755 --> 00:22:24,027
when this instruction runs,
well, we will have that effect.

289
00:22:24,027 --> 00:22:29,177
We could simply write in the program:
LedToggle.

290
00:22:29,177 --> 00:22:34,460
So think about it, it's actually

291
00:22:34,460 --> 00:22:39,000
a very elegant way to write C.

292
00:22:39,000 --> 00:22:42,927
We can do several things in
only one instruction.

293
00:22:42,927 --> 00:22:45,853
It's a bit more difficult to decode,
but

294
00:22:45,853 --> 00:22:48,948
since we will think about

295
00:22:48,948 --> 00:22:52,076
the definition once and then we write
something

296
00:22:52,076 --> 00:22:55,088
that is quite easy to understand.

297
00:22:55,088 --> 00:22:58,485
Well, it's a good way to program.

298
00:22:58,485 --> 00:23:00,753
And now I do a little bit

299
00:23:00,753 --> 00:23:04,494
more complicated, that is
to say that I noticed switching

300
00:23:04,494 --> 00:23:09,720
whenever I weigh a key. So,
to switch whenever I weigh

301
00:23:09,720 --> 00:23:14,924
on a touch in fact, I have to weigh,
I have to release,

302
00:23:14,924 --> 00:23:19,552
And it is only when I release
that it will turn on.

303
00:23:19,552 --> 00:23:24,584
I could imagine the reverse, when
I press, it turns on, but then

304
00:23:24,584 --> 00:23:29,650
it is necessary to release,
repress so that it changes state.

305
00:23:29,650 --> 00:23:32,887
So it's, it's on / off buttons

306
00:23:32,887 --> 00:23:36,096
that we see in several devices that we

307
00:23:36,096 --> 00:23:40,350
can realize with a logic system and
then we will do it by programming.

308
00:23:40,350 --> 00:23:47,845
So, wait until the button is pressed,
well it's "while (! PushOn)".

309
00:23:47,845 --> 00:23:52,009
As long as we are released,
we stay here in

310
00:23:52,009 --> 00:23:54,817
this "while" line and this small
delay because

311
00:23:54,817 --> 00:23:58,040
of the contact rebounds,
we will talk about it later.

312
00:23:58,040 --> 00:24:02,070
We did not want to hide it if we do
not put it on, it may work wrong.

313
00:24:02,070 --> 00:24:06,310
Then, once we pressed, we
move to the next line.

314
00:24:06,310 --> 00:24:10,550
And we wait for it to be
released with a "while".

315
00:24:10,550 --> 00:24:15,045
And when we go out here,
we reverse the LED,

316
00:24:15,045 --> 00:24:19,540
and then we come back, wait,
press, release, and so on.

317
00:24:19,540 --> 00:24:24,594
So here the LED will change
when we release, if

318
00:24:24,594 --> 00:24:29,250
you allow the instructions, the LED
will light up when weighing.

319
00:24:29,250 --> 00:24:35,477
So this is an example of a program
that makes the C's richness and the

320
00:24:35,477 --> 00:24:42,840
ability to write programs in a
compact and readable way.

321
00:24:42,840 --> 00:24:44,712
So we have seen

322
00:24:44,712 --> 00:24:50,960
very important: this general
structure of the programs

323
00:24:50,960 --> 00:24:57,168
C,the Arduino facilities to read,
write, on

324
00:24:57,168 --> 00:25:03,272
a bit and the need to name

325
00:25:03,272 --> 00:25:09,332
clearly the functionality that we,

326
00:25:09,332 --> 00:25:15,118
need for, at the level of the program
to speak in that  functional language

327
00:25:15,118 --> 00:25:22,400
and not in a language that
takes into account of wiring.

