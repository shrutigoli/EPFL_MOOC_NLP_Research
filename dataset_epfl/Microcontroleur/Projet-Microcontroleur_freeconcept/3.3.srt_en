1
00:00:00,000 --> 00:00:08,930
Hello we continue the course
"Understanding microcontrollers."

2
00:00:08,930 --> 00:00:14,360
And today we will talk about
manipulating bit fields.

3
00:00:14,360 --> 00:00:17,960
Oh, do not be afraid of
the little complicated name.

4
00:00:17,960 --> 00:00:21,281
It is simply a question of being able to

5
00:00:21,281 --> 00:00:25,971
play with individual bits inside
the registers.

6
00:00:25,971 --> 00:00:32,121
So, in this lesson, we will try
to manipulate

7
00:00:32,121 --> 00:00:37,780
the bits independently to set them to 1,
this will be the "set

8
00:00:37,780 --> 00:00:43,440
bit ", set them to 0, the" clear bit ",
and test the value.

9
00:00:43,440 --> 00:00:47,010
So I recall the problem:

10
00:00:47,010 --> 00:00:50,946
the microcontroller sees sets of bits,

11
00:00:50,946 --> 00:00:55,400
registers, for example 8 bits,
that is to say one

12
00:00:55,400 --> 00:01:00,186
byte, byte, or 16 bits, or 32 bits.

13
00:01:00,186 --> 00:01:05,715
On the other hand, the application,
which is being written,

14
00:01:05,715 --> 00:01:10,638
generally wishes to see independent bits.
For example,

15
00:01:10,638 --> 00:01:16,000
I have a port, there are two LEDs
connected, there is

16
00:01:16,000 --> 00:01:20,345
a push button connected,
I am interested in each of the

17
00:01:20,345 --> 00:01:25,090
light-emitting diodes, I am interested
in the push-button, I do not

18
00:01:25,090 --> 00:01:28,946
want to think about the level of
an 8-bit word,

19
00:01:28,946 --> 00:01:33,950
I want to think more about my
separate bits.

20
00:01:33,950 --> 00:01:39,020
How do I use the C language to do
these bit manipulations?

21
00:01:39,020 --> 00:01:41,230
Does this means that it, I

22
00:01:41,230 --> 00:01:44,332
remind you, has a few decades,

23
00:01:44,332 --> 00:01:47,060
had been planned to do these operations.

24
00:01:47,060 --> 00:01:50,804
And yes, it was actually planned to do so.

25
00:01:50,804 --> 00:01:55,588
I suggest you start with an example,
the setting a bit to 1

26
00:01:55,588 --> 00:02:02,060
within a bit field, this will be the
"set bit" operation.

27
00:02:02,060 --> 00:02:06,650
The word "set" also means, in English,
"set to 1"

28
00:02:06,650 --> 00:02:09,030
"enable", "set to 1".

29
00:02:09,030 --> 00:02:12,767
The problem arises in the following way.

30
00:02:12,767 --> 00:02:19,570
I have a register, for example
an output register, the values

31
00:02:19,570 --> 00:02:25,750
which are in X0 to X7, I do not know
them, I have noted them in that way.

32
00:02:25,750 --> 00:02:32,110
And I hope that after a well done
operation, I find myself

33
00:02:32,110 --> 00:02:37,131
having a 1 on this exit. But that all

34
00:02:37,131 --> 00:02:42,140
the other values ​​have retained their
initial values.

35
00:02:42,140 --> 00:02:46,200
I only want to set this bit to 1.

36
00:02:46,200 --> 00:02:51,900
I must seek an operation,
here an operation which allows,

37
00:02:51,900 --> 00:02:57,090
with a certain operant,
to do the desired work

38
00:02:57,090 --> 00:03:02,190
Obviously, an arithmetic operation will
not be suitable for this type of work.

39
00:03:02,190 --> 00:03:05,500
We are going to turn to a
logical operation.

40
00:03:05,500 --> 00:03:10,704
And for that, we will have to go back
to the algebra of Boole, of which

41
00:03:10,704 --> 00:03:13,980
we spoke of a little bit at the
beginning of this course.

42
00:03:18,185 --> 00:03:22,390
And I will enjoy testing your
knowledge by asking you the question:

43
00:03:22,390 --> 00:03:27,911
what is the answer to these
four formulas, two of which use

44
00:03:27,911 --> 00:03:33,630
the "and" logic, two others using
the "or" logic?

45
00:03:33,630 --> 00:03:37,220
I'll leave you a few seconds to
think about it.

46
00:03:41,845 --> 00:03:47,575
The answer is: X and 0

47
00:03:47,575 --> 00:03:52,980
give me 0, you can never have an output

48
00:03:52,980 --> 00:03:57,500
of type "and" at 1 when there is a 0.
On the other hand, X and 1

49
00:03:57,500 --> 00:04:02,103
give me sometimes 1, sometimes 0
according to the value of X.

50
00:04:02,103 --> 00:04:07,478
So the answer is X. In
the same way with the "or",

51
00:04:07,478 --> 00:04:13,270
when I have a 0, I hold the value.

52
00:04:13,270 --> 00:04:18,080
By cons when I have a 1, it is a 1
I will have to exit.

53
00:04:18,080 --> 00:04:23,380
It is sometimes said, in mathematics,
that the 1 is the

54
00:04:23,380 --> 00:04:27,910
neutral element of the "and"
and that the 0 is the

55
00:04:27,910 --> 00:04:32,700
neutral element of "or". I come
back to the problem that arose

56
00:04:32,700 --> 00:04:33,620
earlier.

57
00:04:33,620 --> 00:04:41,359
I wish sometimes to retain the value,
sometimes to have a 1.

58
00:04:41,359 --> 00:04:47,470
I must therefore seek the
proper operation.

59
00:04:47,470 --> 00:04:53,204
It is clear that it is the operation "or"
which is sometimes able to give as

60
00:04:53,204 --> 00:04:57,736
result the value X, sometimes the value 1.
It is therefore easy to

61
00:04:57,736 --> 00:05:03,756
see the operand that I have to use.
Since 0 is the neutral element of

62
00:05:03,756 --> 00:05:10,066
"Or", I place it wherever I want
to hold the value and I place,

63
00:05:10,066 --> 00:05:15,910
here on the 1 where I want
to get a 1 after my operation.

64
00:05:15,910 --> 00:05:20,810
So I have the formula,
just write it down in C.

65
00:05:20,810 --> 00:05:23,600
That is an opportunity to introduce

66
00:05:23,600 --> 00:05:28,486
a new operator in C, which
we have not yet seen, it

67
00:05:28,486 --> 00:05:33,680
is the "or" logic that is represented
by this vertical bar.

68
00:05:33,680 --> 00:05:41,070
P1OUT, that is what corresponds
to the "after" is affected, it is

69
00:05:41,070 --> 00:05:48,415
the equal sign, by the combination with
the "or" logic of two operands, P1OUT,

70
00:05:48,415 --> 00:05:51,794
that is what I had before, and this value,

71
00:05:51,794 --> 00:05:55,630
which I have for the moment
written in binary.

72
00:05:55,630 --> 00:06:00,302
Looking at this formula, I confess
that I am not at all satisfied.

73
00:06:00,302 --> 00:06:02,250
It is not very readable.

74
00:06:02,250 --> 00:06:05,022
We will try to find a

75
00:06:05,022 --> 00:06:08,570
simpler way to write the same
thing rigorously.

76
00:06:08,570 --> 00:06:13,770
First step, I'll start by trying
to use the "or equal"

77
00:06:13,770 --> 00:06:19,450
which is a syntax proposed by the C,
which allow to not have to repeat the

78
00:06:19,450 --> 00:06:25,036
same operand but implies that
it as one of the two operands.

79
00:06:25,036 --> 00:06:28,480
It is already more compact,
a bit more readable.

80
00:06:28,480 --> 00:06:31,660
On the other hand, this binary
value is not at all readable.

81
00:06:31,660 --> 00:06:38,930
Let's see the bit number 0, 1, 2, 3,
4, 5, 6, yes, bit number 6.

82
00:06:38,930 --> 00:06:42,164
It is not at all evident at first reading.

83
00:06:42,164 --> 00:06:45,924
I want to see the number 6
appear in my formula.

84
00:06:45,924 --> 00:06:50,330
So, right away, I'll know it's bit
number 6.

85
00:06:50,330 --> 00:06:54,270
For that, I'll have to be a little crafty.

86
00:06:54,270 --> 00:06:59,355
I take here the value 1, which
I expressed in binary in a register.

87
00:06:59,355 --> 00:07:04,440
If I shift it to the left of six

88
00:07:04,440 --> 00:07:10,010
positions, I get that result. It happens
that the operation exists.

89
00:07:10,010 --> 00:07:13,450
This operator, which is taking
shape by smaller than,

90
00:07:13,450 --> 00:07:18,160
smaller than, is the, the offset
operator to the left

91
00:07:18,160 --> 00:07:21,790
There is of course also
the right shift operator.

92
00:07:21,790 --> 00:07:26,260
So, here the value 1 has been
shifted by 6.

93
00:07:26,260 --> 00:07:29,442
The result I get is obviously a

94
00:07:29,442 --> 00:07:30,850
result on 8 bits.

95
00:07:30,850 --> 00:07:34,010
These bits are lost and these bit-there

96
00:07:34,010 --> 00:07:37,850
have been replaced, conventionally, by 0.

97
00:07:37,850 --> 00:07:42,170
Thus, this expression can be
written in the

98
00:07:42,170 --> 00:07:45,760
following way: I integrate it
directly into my formula.

99
00:07:45,760 --> 00:07:47,860
1 shifted to the left of 6.

100
00:07:47,860 --> 00:07:54,779
So finally, my "set bit" can be
written P1OUT "or

101
00:07:54,779 --> 00:07:56,834
equal" 1 shifted by 6.

102
00:07:56,834 --> 00:08:02,190
Then some of my students told me:
"but, it's still very boring,

103
00:08:02,190 --> 00:08:07,450
because here, we had a logical
operation to do,

104
00:08:07,450 --> 00:08:13,082
here we have a first and then
a second logical operation to do.

105
00:08:13,082 --> 00:08:17,909
This will take time, take up
space in memory. "

106
00:08:17,909 --> 00:08:19,818
So, it's not quite right.

107
00:08:19,818 --> 00:08:25,120
This calculation must be done

108
00:08:25,120 --> 00:08:29,885
by the microcontroller. On the other
hand, this calculation since

109
00:08:29,885 --> 00:08:34,802
it touches a constant and a second

110
00:08:34,802 --> 00:08:40,148
constant, it will never change.
This result

111
00:08:40,148 --> 00:08:44,919
itself is a constant. And then, it's a

112
00:08:44,919 --> 00:08:48,658
constant, it is not the microcontroller
that will have

113
00:08:48,658 --> 00:08:52,310
to calculate it, but indeed
the compiler itself.

114
00:08:52,310 --> 00:08:56,696
So the compiler, if it has a little
bit more work by this line

115
00:08:56,696 --> 00:08:59,156
than by this line, it does not

116
00:08:59,156 --> 00:09:03,456
matter, the result of the
compilation is identical.

117
00:09:03,456 --> 00:09:06,228
These two lines, I might even say

118
00:09:06,228 --> 00:09:10,265
these three lines, give exactly
the same result

119
00:09:10,265 --> 00:09:12,000
after the compilation.

120
00:09:12,000 --> 00:09:17,370
So I will now be able to remember,
memorize that the "set

121
00:09:17,370 --> 00:09:23,242
bit "can be achieved by this
combination" or equal ".

122
00:09:23,242 --> 00:09:27,510
It remains to do the same for
the "clear bit".

123
00:09:27,510 --> 00:09:32,270
The problem is almost the same
except that we must put a 0.

124
00:09:32,270 --> 00:09:35,336
We again have the laws of

125
00:09:35,336 --> 00:09:40,854
Boolean algebra and this time
it is the "and" logic that will

126
00:09:40,854 --> 00:09:46,190
interest us. And then the
operand will look that way.

127
00:09:46,190 --> 00:09:52,184
The neutral elements, the 1 as neutral
elements of the "and" when we

128
00:09:52,184 --> 00:09:58,520
want to keep the value, and the 0
to impose the 0 at the output.

129
00:09:58,520 --> 00:10:01,180
So I can write it

130
00:10:01,180 --> 00:10:06,500
in that way. Again, we will try to use a

131
00:10:06,500 --> 00:10:12,380
simpler syntax, more readable.
We regroup with the "or equal".

132
00:10:12,380 --> 00:10:17,415
Remains the problem of this value.
Here it is

133
00:10:17,415 --> 00:10:22,470
the bit number 6 that interests
me and it's the only one that is at 0.

134
00:10:22,470 --> 00:10:26,566
So I sometimes have a distracted
student who says to me, "but

135
00:10:26,566 --> 00:10:31,358
Sir, why can we not write 0 shifted to

136
00:10:31,358 --> 00:10:36,812
"the left of 6?, the answer is obvious,
if I

137
00:10:36,812 --> 00:10:42,110
take 0, that I shift it to the left
of 6 squares, I always get a 0.

138
00:10:42,110 --> 00:10:47,600
Now, in this case, it is these 1 that
interest me, and the 0 naturally.

139
00:10:47,600 --> 00:10:50,640
The syntax to be used is as follows.

140
00:10:50,640 --> 00:10:51,693
It uses an

141
00:10:51,693 --> 00:10:57,444
operator which is still unknown to us,
which is called the inversion operator

142
00:10:57,444 --> 00:11:03,131
bit to bit, and that uses that Tilde symbol,
that's how it's called.

143
00:11:03,131 --> 00:11:06,810
I just point out that it is,
in Spanish, an accent.

144
00:11:06,810 --> 00:11:12,340
So when it is typed under some editors,
it does not come, it looks

145
00:11:12,340 --> 00:11:14,240
like a floating accent and we have to type

146
00:11:14,240 --> 00:11:16,670
a space for it to appear as a character.

147
00:11:16,670 --> 00:11:22,518
And then finally, we will be able to remember
the fact that the operation "clear

148
00:11:22,518 --> 00:11:30,740
bit ", set to 0 of a bit, is done with
this set" and equal tilde ".

149
00:11:30,740 --> 00:11:35,984
And I would like us to learn to recognize
the "or equal" on the one hand, the

150
00:11:35,984 --> 00:11:42,890
"and equal tilde" being the way
to write the "set bit" and the "clear bit".

151
00:11:42,890 --> 00:11:48,588
The operations "set bit" and "clear bit",
which we have just seen, are obviously

152
00:11:48,588 --> 00:11:54,420
mainly used for exits.
How do I manage an entry?

153
00:11:54,420 --> 00:11:58,920
So, we usually, try to test an entry.

154
00:11:58,920 --> 00:12:03,114
For example "if" and we want
to set the condition that

155
00:12:03,114 --> 00:12:06,240
allows to know if the start button
has been pressed.

156
00:12:06,240 --> 00:12:08,040
To move forward,

157
00:12:08,040 --> 00:12:13,608
I must remind you one thing,
the C language has no

158
00:12:13,608 --> 00:12:19,330
boolean type and for it, a zero
value corresponds

159
00:12:19,330 --> 00:12:24,689
to false and a non-zero value
corresponds to true.

160
00:12:24,689 --> 00:12:28,370
Sometimes people say value 1 matches true.

161
00:12:28,370 --> 00:12:33,426
That's right, but the value 33 also
matches true.

162
00:12:33,426 --> 00:12:38,496
A non-zero value is considered
true and we will use this

163
00:12:38,496 --> 00:12:43,966
trick to test our input. Here's
the problem: I have 8 values,

164
00:12:43,966 --> 00:12:48,972
If it's an 8-bit register, I'm
interested in wheter

165
00:12:48,972 --> 00:12:54,068
I have a 0 here in position 3,
here, on the contrary, I have a 1.

166
00:12:54,068 --> 00:12:59,210
And I would like to be able to say:
in this case, it is false,

167
00:12:59,210 --> 00:13:01,424
in that case, it is true.

168
00:13:01,424 --> 00:13:06,760
The only presence of this 1 will
make me understand that it is true.

169
00:13:06,760 --> 00:13:11,360
And the same thing, this implies
that the condition is false.

170
00:13:11,360 --> 00:13:14,080
I recall that false is a

171
00:13:14,080 --> 00:13:17,240
null value, that true is a non-zero value.

172
00:13:17,240 --> 00:13:24,534
What operation should I use now
to make disappear all these

173
00:13:24,534 --> 00:13:29,520
bits that do not interest me? Well, it is

174
00:13:29,520 --> 00:13:35,080
obviously of the logical operation "and".
I put a value 1 in this place.

175
00:13:35,080 --> 00:13:42,110
I get, if I had a 0, a 0,
if I had a 1, I get a 1.

176
00:13:42,110 --> 00:13:49,148
Everywhere else, these 0 that
I put there give me zero values.

177
00:13:49,148 --> 00:13:49,634
And if I

178
00:13:49,634 --> 00:13:53,522
now look globally at this value, it is

179
00:13:53,522 --> 00:13:57,590
completely null, so it is a
false condition.

180
00:13:57,590 --> 00:14:01,340
This value is not zero, because of this 1.

181
00:14:01,340 --> 00:14:04,502
It therefore makes the condition "true".

182
00:14:04,502 --> 00:14:09,890
It remains only to write it in C.
My condition, here, is written as

183
00:14:09,890 --> 00:14:15,430
follows: for example, P1IN "and"

184
00:14:15,430 --> 00:14:20,944
1 offset by 3. I propose that we write

185
00:14:20,944 --> 00:14:26,350
a small example that uses these
three notions that we have just seen.

186
00:14:26,350 --> 00:14:32,282
Here we have on an input, a button
called "on", on another input,

187
00:14:32,282 --> 00:14:38,330
a button called "off", on an output,
we have a light diode.

188
00:14:38,330 --> 00:14:40,570
To show that this diagram is

189
00:14:40,570 --> 00:14:44,792
not complete, I did not bother to indicate

190
00:14:44,792 --> 00:14:50,120
the power supply, to mention
the decoupling capacitor,

191
00:14:50,120 --> 00:14:55,548
that it is right to put between
the plus and minus, I have

192
00:14:55,548 --> 00:15:00,400
not talked about the reset, the test paw.

193
00:15:00,400 --> 00:15:05,580
It is a simplified diagram
given that I usually use my

194
00:15:05,580 --> 00:15:09,150
microcontroller, often to give
explanations,

195
00:15:09,150 --> 00:15:11,576
I do not repeat all these details.

196
00:15:11,576 --> 00:15:14,770
So I wrote the program here.

197
00:15:14,770 --> 00:15:21,089
Certainly, it does not use the
simplifications that we

198
00:15:21,089 --> 00:15:24,680
have learned to use to make
programs more readable.

199
00:15:24,680 --> 00:15:30,220
The objective here is really to show what
operations are being used.

200
00:15:30,220 --> 00:15:31,270
I must

201
00:15:31,270 --> 00:15:36,528
set the bit number 6 to 1

202
00:15:36,528 --> 00:15:41,930
to have my LED output.
I make an "or equal".

203
00:15:41,930 --> 00:15:46,666
I have to set to 1 both 2 bits
2 power 2 and 2

204
00:15:46,666 --> 00:15:52,135
power 3 of my register P1OUT
to activate the resistors in pull up.

205
00:15:52,135 --> 00:15:56,347
We have not yet seen that part,
we shall see it later,

206
00:15:56,347 --> 00:16:00,910
but understand here that it is
"or equal", so that it is "set bit".

207
00:16:00,910 --> 00:16:06,940
At the level of my main loop,
which runs infinitely, I will

208
00:16:06,940 --> 00:16:13,550
test bit 2 in P1IN to see if the
"on" button is on.

209
00:16:13,550 --> 00:16:15,563
You will do the same a little later

210
00:16:15,563 --> 00:16:18,720
with the 2 power 3, which
corresponds to the "off" button.

211
00:16:18,720 --> 00:16:22,022
If the "on" button is active,

212
00:16:22,022 --> 00:16:24,710
I will turn on the LED.

213
00:16:24,710 --> 00:16:27,370
If, on the contrary, the "off" button is

214
00:16:27,370 --> 00:16:30,370
active, I will turn off the LED.

215
00:16:30,370 --> 00:16:35,130
Why did I have to add this
exclamation point here?

216
00:16:35,130 --> 00:16:38,055
I just point out that it is related
to the fact that

217
00:16:38,055 --> 00:16:41,760
we have wired the "on"
and "off" buttons to ground.

218
00:16:41,760 --> 00:16:47,487
In a future course, we will have
very precise explanations on the use

219
00:16:47,487 --> 00:16:52,110
of this exclamation point which means
the inversion of a logical condition.

220
00:16:52,110 --> 00:16:56,743
We have thus learned that the C language
makes it possible to manipulate

221
00:16:56,743 --> 00:17:01,070
bits inside bit fields, inside registers.

222
00:17:01,070 --> 00:17:07,200
The function of setting a bit with the
"or equal" bit can be performed.

223
00:17:07,200 --> 00:17:13,290
The function of setting a bit with the
"and equal tilde" can be performed.

224
00:17:13,290 --> 00:17:18,322
And we can test a bit by masking,

225
00:17:18,322 --> 00:17:23,920
making the "and" logic with
the read value.

