1
00:00:00,000 --> 00:00:05,292
Hello, we've already talked about

2
00:00:05,292 --> 00:00:12,030
the functions, today we will
go into details, to better clarify the

3
00:00:12,030 --> 00:00:17,192
writing conventions, the difference
between define and functions, speak

4
00:00:17,192 --> 00:00:21,640
of the internal execution and
see the different types of functions.

5
00:00:21,640 --> 00:00:25,474
Concerning the rules of writing,
the habit is to have

6
00:00:25,474 --> 00:00:30,343
the constants in uppercase, and
we have already seen OUTPUT, HIGH,

7
00:00:30,343 --> 00:00:33,978
I do not really respect
this Convention, since, with

8
00:00:33,978 --> 00:00:37,880
explicit names,
it's pretty heavy as a writing.

9
00:00:37,880 --> 00:00:43,274
The variables, the rule is to have
the lower case, we already saw the

10
00:00:43,274 --> 00:00:47,260
I in the for loops, counter, max level,

11
00:00:47,260 --> 00:00:50,704
some prefer to put underlines,
it's up to you

12
00:00:50,704 --> 00:00:55,806
to decide. On the definition side,
we have a first

13
00:00:55,806 --> 00:01:01,380
letter that is capitalized,
and the definitions apply

14
00:01:01,380 --> 00:01:06,760
to the hardware. On the functions side,
there are also

15
00:01:06,760 --> 00:01:11,184
capital letters in
the first position, but they

16
00:01:11,184 --> 00:01:16,230
are, a function that will designate
an action.

17
00:01:16,230 --> 00:01:22,304
So here I insist, and I will insist,
the definitions are

18
00:01:22,304 --> 00:01:28,380
concerning the hardware,
the functions concerns the functionality.

19
00:01:28,380 --> 00:01:33,150
And, in some languages,
there is a subtle difference between

20
00:01:33,150 --> 00:01:37,620
procedures and functions, C,
does not make that difference.

21
00:01:37,620 --> 00:01:41,463
So, I come back again:
define to describe the material,

22
00:01:41,463 --> 00:01:47,320
function for functionality,
I take an example, with a simple robot.

23
00:01:47,320 --> 00:01:52,690
This simple robot has two engines,
if you look

24
00:01:52,690 --> 00:01:57,874
at the rear of the engine,
where the wires leave, you have a plus

25
00:01:57,874 --> 00:02:01,482
and a minus, and
if you send the current on

26
00:02:01,482 --> 00:02:06,580
the plus, all the engines of
the same manufacturer, will turn in

27
00:02:06,580 --> 00:02:11,291
the same direction.
So I define here, the plus of my

28
00:02:11,291 --> 00:02:16,190
motor, will be on pin 4,
the minus on pin 3.

29
00:02:16,190 --> 00:02:21,422
And now, for the engine
to advance, that is for

30
00:02:21,422 --> 00:02:26,536
this motor to rotate in the direction
that will advance the robot,

31
00:02:26,536 --> 00:02:31,780
I must put on fuse 4 a 0, on fuse 3,

32
00:02:31,780 --> 00:02:32,610
a 1.

33
00:02:32,610 --> 00:02:36,012
And this will not be accepted
by the compiler,

34
00:02:36,012 --> 00:02:40,510
since, I did not put capital letters
as it is recognized.

35
00:02:40,510 --> 00:02:43,993
So now I will define the same thing

36
00:02:43,993 --> 00:02:47,340
for the left engine, but the left engine,

37
00:02:47,340 --> 00:02:50,570
for it to move, I will have to swap

38
00:02:50,570 --> 00:02:54,883
here, these two definitions,
the motors are symmetrical.

39
00:02:54,883 --> 00:02:56,910
So on the right engine,

40
00:02:56,910 --> 00:03:01,150
If the positive fuse must be at 0,
well, on the left engine, the

41
00:03:01,150 --> 00:03:05,415
positive fuse will have to be at 1.
Then, you can grope, and then get out

42
00:03:05,415 --> 00:03:11,020
the soldering iron, to move the wires,
but see that if we think well,

43
00:03:11,020 --> 00:03:16,294
we will have something that is,
correct, that will react according to the

44
00:03:16,294 --> 00:03:21,924
definition of the material.
And now if we want to move the

45
00:03:21,924 --> 00:03:27,312
robot, and well there is an action,
which requires to have both engines

46
00:03:27,312 --> 00:03:32,260
that are advancing, we have
defined what made them advance,

47
00:03:32,260 --> 00:03:36,945
There is no need to worry
about the wiring and the hardware.

48
00:03:36,945 --> 00:03:40,650
So now we can add a function
that is to make a

49
00:03:40,650 --> 00:03:46,020
round trip, with a certain duration
that will fix the distance of travel.

50
00:03:46,020 --> 00:03:47,160
Let's continue,

51
00:03:47,160 --> 00:03:51,960
we wait, we move back,
we wait, the duration being

52
00:03:51,960 --> 00:03:56,690
a parameter of this function.
And in the main program,

53
00:03:56,690 --> 00:04:01,878
and well, we're going to have,
make a round-trip,

54
00:04:01,878 --> 00:04:07,005
the duration of action, and of course,
it is a quite simplified case,

55
00:04:07,005 --> 00:04:12,375
which clearly shows
the hierarchy of functions.

56
00:04:12,375 --> 00:04:16,846
What we have just done
is descending programming,

57
00:04:16,846 --> 00:04:22,480
we started from the material
to go towards complexity.

58
00:04:22,480 --> 00:04:27,690
In real cases, one is concerned first,

59
00:04:27,690 --> 00:04:32,235
of the application, its specifications, the

60
00:04:32,235 --> 00:04:37,390
structure of the main program,
system calls

61
00:04:37,390 --> 00:04:42,431
that we will use, which themselves,
will make calls to

62
00:04:42,431 --> 00:04:47,620
simpler functions,
which will rely on the hardware,

63
00:04:47,620 --> 00:04:53,130
therefore, top-down, or bottom-up,
these are the two options.

64
00:04:53,130 --> 00:04:55,877
How does it work internally?

65
00:04:55,877 --> 00:04:58,530
The program has been stored in memory, and

66
00:04:58,530 --> 00:05:02,602
You have an address counter,
the PC, which points

67
00:05:02,602 --> 00:05:08,410
the instruction that will be executed.
This address counter increases each

68
00:05:08,410 --> 00:05:13,847
time the instruction has been executed,
and during execution

69
00:05:13,847 --> 00:05:18,859
of the program, we will refer
to the arithmetic unit,

70
00:05:18,859 --> 00:05:24,230
we'll access the variables to do
the function that interests you.

71
00:05:24,230 --> 00:05:27,971
You come across an instruction
that will allow

72
00:05:27,971 --> 00:05:32,968
you to make a loop, in assembler
it is called Jump, Jump A1.

73
00:05:32,968 --> 00:05:38,505
The effect of this instruction, well,
it will be to copy the value A1 which

74
00:05:38,505 --> 00:05:44,100
is found in the instruction in the PC,
which will return to

75
00:05:44,100 --> 00:05:49,620
the address 3A1, to re-execute the loop.

76
00:05:49,620 --> 00:05:52,673
Well, now, if we have a function call,

77
00:05:52,673 --> 00:05:56,720
it's a little different,
the instruction is Call

78
00:05:56,720 --> 00:06:03,097
in assembler, and at the memory,
the compiler

79
00:06:03,097 --> 00:06:09,410
reserved a place for the functions,
following the program.

80
00:06:09,410 --> 00:06:12,686
So we have the program, it continues with

81
00:06:12,686 --> 00:06:17,974
the functions, and I call
the first function which is in 7,1F,

82
00:06:17,974 --> 00:06:24,255
so the PC will be loaded by
the 3F instruction, so it will continue

83
00:06:24,255 --> 00:06:29,520
its execution, in 7, 1F.

84
00:06:29,520 --> 00:06:32,289
And now, what is important is

85
00:06:32,289 --> 00:06:36,320
to return to the main program,
in assembler, it is

86
00:06:36,320 --> 00:06:40,195
the instruction Return, Ret,
which is used, and

87
00:06:40,195 --> 00:06:43,612
at this moment, how do you know
where to go?

88
00:06:43,612 --> 00:06:49,458
So there is a small additional
operation characteristic of Call,

89
00:06:49,458 --> 00:06:57,850
which is to save in the PC the return address,
which will be 3A2, the next address.

90
00:06:57,850 --> 00:07:03,174
The PC increases as soon as
it has read the instruction, so we

91
00:07:03,174 --> 00:07:08,780
saved the instruction that would have
been executed if it was not a Call.

92
00:07:08,780 --> 00:07:14,959
And, the Return instruction,
will have the effect of

93
00:07:14,959 --> 00:07:21,568
SavePC in the PC
and the execution will continue.

94
00:07:21,568 --> 00:07:27,482
So now, in every function, you may need

95
00:07:27,482 --> 00:07:33,669
variables, and here you may
need to use variable i,

96
00:07:33,669 --> 00:07:37,321
which will occupy this position.
You can have here

97
00:07:37,321 --> 00:07:40,882
another function, which will also

98
00:07:40,882 --> 00:07:44,718
need a variable counter that I call j,

99
00:07:44,718 --> 00:07:47,805
which I call k, which I could call i.

100
00:07:47,805 --> 00:07:50,347
Why reserve another memory location,

101
00:07:50,347 --> 00:07:55,140
a new memory position, in each function?

102
00:07:55,140 --> 00:07:58,806
At the moment of access here,
this variable j,

103
00:07:58,806 --> 00:08:03,862
we could very well access
the same memory position, which had

104
00:08:03,862 --> 00:08:09,320
been used by another function,
since it will not run at the same time.

105
00:08:09,320 --> 00:08:16,494
Thus, we distinguish between local variables,
and global variables that are

106
00:08:16,494 --> 00:08:23,638
used by the program, defined
at the beginning of the program,

107
00:08:23,638 --> 00:08:31,900
while the local variables are defined
at the beginning of the functions.

108
00:08:31,900 --> 00:08:36,175
And now what is still happening is that

109
00:08:36,175 --> 00:08:41,464
when you call a function,
for example, the delay function,

110
00:08:41,464 --> 00:08:44,570
there is a parameter,
which is the duration of the delay,

111
00:08:44,570 --> 00:08:49,410
which has been prepared in
the program and thus the function

112
00:08:49,410 --> 00:08:53,461
will need.
Then, this parameter can be transferred

113
00:08:53,461 --> 00:08:58,817
as a global variable, it can be
transferred as a local variable,

114
00:08:58,817 --> 00:09:04,462
but, the parameter we put
in a function, we will save it with

115
00:09:04,462 --> 00:09:09,930
the return address, in what is called,

116
00:09:09,930 --> 00:09:14,776
the stack, in the background.
And this stack, with the address counter,

117
00:09:14,776 --> 00:09:18,266
that is what is being prepared,

118
00:09:18,266 --> 00:09:22,038
at the moment of the function call,
so that the function

119
00:09:22,038 --> 00:09:27,700
can work with this data set

120
00:09:27,700 --> 00:09:33,334
and return to the program,
possibly with the addition of data.

121
00:09:33,334 --> 00:09:38,280
So let's take examples,
starting with the simplest things.

122
00:09:38,280 --> 00:09:40,080
You have the function

123
00:09:40,080 --> 00:09:46,875
"Blink once", you call it by,
Blink once, there are no

124
00:09:46,875 --> 00:09:52,980
parameters that will be transferred,
on the stack, the parenthesis is empty.

125
00:09:52,980 --> 00:09:59,069
You have the function BlinkXtimes,
there you have a parameter

126
00:09:59,069 --> 00:10:05,172
and it is necessary to say what will be
the name of this parameter, but it is a local name,

127
00:10:05,172 --> 00:10:08,359
it's a name used only in that.

128
00:10:08,359 --> 00:10:14,130
On the other hand, it was necessary
to specify the size to be reserved in the

129
00:10:14,130 --> 00:10:20,448
Stack, to transfer this parameter,
and, when we call, and

130
00:10:20,448 --> 00:10:25,236
well, we have blinked so many times,
the parameter one constant or one

131
00:10:25,236 --> 00:10:30,172
variable, but, of type byte,
if we put a number too big here,

132
00:10:30,172 --> 00:10:32,900
the compiler should grumble.

133
00:10:32,900 --> 00:10:38,110
Then you can have two parameters,
which do not necessarily have the

134
00:10:38,110 --> 00:10:42,115
same type, want to blink x times,
with a certain period.

135
00:10:42,115 --> 00:10:45,517
We'll give the byte type for the number of

136
00:10:45,517 --> 00:10:50,834
times, the byte type for the period,
and we will have both parameters.

137
00:10:50,834 --> 00:10:55,206
And we can test now, this program,
we must always test the

138
00:10:55,206 --> 00:10:59,107
functions when they were written,
with a small loop,

139
00:10:59,107 --> 00:11:04,560
we blink three times, and then
we do nothing.

140
00:11:04,560 --> 00:11:09,340
If you delete this while, what happens?

141
00:11:09,340 --> 00:11:12,756
You blink three times, blink three times, blink

142
00:11:12,756 --> 00:11:17,019
three times, you feel
that your program is wrong.

143
00:11:17,019 --> 00:11:20,442
A delay must be added here,
so that after each

144
00:11:20,442 --> 00:11:25,200
blinking three times, well,
you have a space that allows you to

145
00:11:25,200 --> 00:11:29,717
verify the start of the function call.

146
00:11:29,717 --> 00:11:36,070
So now we can have
an output parameter, that is, the

147
00:11:36,070 --> 00:11:43,260
function has prepared, has calculated a value
that must return to the main program.

148
00:11:43,260 --> 00:11:45,638
And, it will be necessary to reserve space

149
00:11:45,638 --> 00:11:48,720
in memory, to say what is the result, and

150
00:11:48,720 --> 00:11:52,035
there may be local variables
that need to be declared.

151
00:11:52,035 --> 00:11:55,756
So an example to illustrate things,
here I rely on

152
00:11:55,756 --> 00:12:00,505
something we had already seen,
read the pushbutton, read a pushbutton.

153
00:12:00,505 --> 00:12:07,066
One can make a function of it, what we read is
Activated pushbutton, inactivated,

154
00:12:07,066 --> 00:12:10,880
it is actually a Boolean variable. It can

155
00:12:10,880 --> 00:12:15,860
be written like that, even if it's not usual.

156
00:12:15,860 --> 00:12:20,855
And then this function, will make

157
00:12:20,855 --> 00:12:26,262
the state of the pusher,
pressed or not pressed, and,

158
00:12:26,262 --> 00:12:31,309
it is the return statement,
in the background, that allows

159
00:12:31,309 --> 00:12:36,416
to point out this fact.
So if we had a function

160
00:12:36,416 --> 00:12:41,350
a bit more complex here,
and well, we could define a

161
00:12:41,350 --> 00:12:46,360
boolean variable, statePush
to describe the state

162
00:12:46,360 --> 00:12:51,554
of the Pusher,
it is the state of our pusher with

163
00:12:51,554 --> 00:12:56,800
the digitalRead, and
I will return the variable that

164
00:12:56,800 --> 00:13:01,776
has been declared. So this is where

165
00:13:01,776 --> 00:13:06,080
you should see it clearly,
we reserved space,for something

166
00:13:06,080 --> 00:13:10,392
that will be returned
that will be of the same

167
00:13:10,392 --> 00:13:14,633
Boolean type, and, as can
be stated, we can declare a

168
00:13:14,633 --> 00:13:19,772
variable that will be returned,
which must be, of course, of the same type.

169
00:13:19,772 --> 00:13:26,036
At the call level, well, we write
if Push On, parentheses,

170
00:13:26,036 --> 00:13:33,538
since we did not send parameters,
but you remember the define, with

171
00:13:33,538 --> 00:13:38,340
the define, this parenthesis isn't there,
the behavior will be exactly

172
00:13:38,340 --> 00:13:41,640
the same, so when you call
the actions, you have to

173
00:13:41,640 --> 00:13:45,680
know whether they were defined
by a define, or by a function.

174
00:13:45,680 --> 00:13:47,863
Here, I took a Boolean example which is a

175
00:13:47,863 --> 00:13:51,135
little unusual, but it was
so that we would cling to

176
00:13:51,135 --> 00:13:55,746
something known. The example
that is explained to you very

177
00:13:55,746 --> 00:14:00,731
often, is the multiplication,
where you are told: you

178
00:14:00,731 --> 00:14:05,660
want to multiply two numbers a, b,
and then it will

179
00:14:05,660 --> 00:14:10,708
give a result; Then, you need to

180
00:14:10,708 --> 00:14:16,325
naturally define a equal 3, b equal 4,
and say

181
00:14:16,325 --> 00:14:21,430
what are their types. So

182
00:14:21,430 --> 00:14:26,777
these are global variables, and

183
00:14:26,777 --> 00:14:32,138
so now, at the time of
the call for multiplication, well,

184
00:14:32,138 --> 00:14:37,550
it will be necessary
to repeat this type. And now I can

185
00:14:37,550 --> 00:14:42,550
return this value, by writing

186
00:14:42,550 --> 00:14:47,142
return, a times b; but

187
00:14:47,142 --> 00:14:52,170
I need to warn

188
00:14:52,170 --> 00:14:57,300
the compiler, to reserve space, for this

189
00:14:57,300 --> 00:15:02,530
value a times b. So we're going
to put here, the whole type,

190
00:15:02,530 --> 00:15:07,610
and here is a function
that will pass in its most simplest form.

191
00:15:07,610 --> 00:15:12,170
If now I want to

192
00:15:12,170 --> 00:15:17,457
introduce a variable, and

193
00:15:17,457 --> 00:15:22,975
I say, I will, define that the product is a

194
00:15:22,975 --> 00:15:28,631
variable of type c, I will calculate c equal

195
00:15:28,631 --> 00:15:33,900
at times b, and I will return

196
00:15:33,900 --> 00:15:38,550
the result c, and finish my

197
00:15:38,550 --> 00:15:43,136
function. Well, we have seen how

198
00:15:43,136 --> 00:15:48,210
a function is run and we highlighted,

199
00:15:48,210 --> 00:15:53,850
the importance of defining
clear names, in French, English,

200
00:15:53,850 --> 00:15:59,500
in a mixture, I think it is very difficult
to define clear names.

201
00:15:59,500 --> 00:16:06,890
So we can now use
the functions in our next examples.

