1
00:00:06,920 --> 00:00:12,095
Hello, the environment Arduino,
should be recognized, is great to start

2
00:00:12,095 --> 00:00:18,760
with microcontrollers, it's simple
to use, it's convenient.

3
00:00:18,760 --> 00:00:21,660
However, when you have a little
bit more experience, you

4
00:00:21,660 --> 00:00:24,910
often want to go to programs
written entirely in C.

5
00:00:24,910 --> 00:00:26,810
And then, there are a few

6
00:00:26,810 --> 00:00:31,230
difficulties I would like
to try to explain today.

7
00:00:31,230 --> 00:00:33,792
First of all, I would like to remind

8
00:00:33,792 --> 00:00:35,988
that the word Arduino actually
has three

9
00:00:35,988 --> 00:00:39,471
quite different meanings:
Firstly, it is a question of

10
00:00:39,471 --> 00:00:43,428
a microcontroller card, you know it well.

11
00:00:43,428 --> 00:00:49,746
Secondly, this is a programming environment;

12
00:00:49,746 --> 00:00:52,554
besides there are other
environments similar to

13
00:00:52,554 --> 00:00:56,480
the Arduino environment
for other microcontrollers.

14
00:00:56,480 --> 00:00:59,240
Today we will use the environment

15
00:00:59,240 --> 00:01:01,430
Energia for MSP 430 processors.

16
00:01:01,430 --> 00:01:08,310
And the third meaning of the word
Arduino is the Arduino bookstores,

17
00:01:08,310 --> 00:01:14,555
they are the calls, the functions,
the procedures that are in the

18
00:01:14,555 --> 00:01:18,335
Arduino library that you know well,
such as Pin Mode, such as

19
00:01:18,335 --> 00:01:24,409
Digital Read, Digital Write and is
sometimes called the Arduino language.

20
00:01:24,409 --> 00:01:27,636
So let's look at the simplest program

21
00:01:27,636 --> 00:01:30,410
which has already been used several times.

22
00:01:30,410 --> 00:01:36,252
So you know this program well,
that's how it is written,

23
00:01:36,252 --> 00:01:41,866
there is the Setup procedure
which initializes the output tab, and

24
00:01:41,866 --> 00:01:44,646
successively in the loop

25
00:01:44,646 --> 00:01:47,844
a Digital write to turn on the LED,

26
00:01:47,844 --> 00:01:50,541
an expectation, a digital write to

27
00:01:50,541 --> 00:01:54,084
turn off the LED and wait.

28
00:01:54,084 --> 00:01:57,446
I will keep the essence of this program

29
00:01:57,446 --> 00:02:00,260
so that we can see what is going on.

30
00:02:00,260 --> 00:02:07,974
We will compile it, then
we will run, more exactly,

31
00:02:07,974 --> 00:02:14,910
upload it, and you can see
that the small lamp is flashing.

32
00:02:14,910 --> 00:02:17,010
You know that we do not like writing

33
00:02:17,010 --> 00:02:19,960
programs in this way,
which, moreover, require

34
00:02:19,960 --> 00:02:22,898
comments, because it is not easy to

35
00:02:22,898 --> 00:02:26,620
understand what this digital
write corresponds to.

36
00:02:26,620 --> 00:02:34,901
We prefer this way of writing
where we define Led1On with its digital

37
00:02:34,901 --> 00:02:40,320
write, and inside the program
just call this definition.

38
00:02:40,320 --> 00:02:42,768
And you see that I even removed the

39
00:02:42,768 --> 00:02:46,730
comments which, in my opinion,
are no longer truly useful.

40
00:02:46,730 --> 00:02:49,150
The program, of course,
works in the same way.

41
00:02:49,150 --> 00:02:52,660
I suggest you start by editing a little bit

42
00:02:52,660 --> 00:02:57,095
this program to make it
a little more complicated.

43
00:02:57,095 --> 00:03:02,716
We add here the reading
of the push-button of such

44
00:03:02,716 --> 00:03:08,517
So that the flashing can
start by pressing the button.

45
00:03:08,517 --> 00:03:14,050
So, naively, I initiated the

46
00:03:14,050 --> 00:03:20,070
leg of the push button in input,
I made a digital read

47
00:03:20,070 --> 00:03:25,680
of this, this paw, and you will see
that the program does not work.

48
00:03:25,680 --> 00:03:32,102
The lamp is on, I press the button,
nothing happens, if I stroke

49
00:03:32,102 --> 00:03:38,080
the legs here, things happen,
it's really quite mysterious.

50
00:03:38,080 --> 00:03:43,792
So of course, we know what it is,
we have to modify the program in this

51
00:03:43,792 --> 00:03:49,330
way: I put here INPUT_PULLUP
for the utilization mode

52
00:03:49,330 --> 00:03:55,020
of the push-button, in such
a way that there is thus this resistance

53
00:03:55,020 --> 00:03:59,560
which gives a steady state
when the button is not pressed.

54
00:03:59,560 --> 00:04:04,610
I have also benefited
from correctly defining the call

55
00:04:04,610 --> 00:04:09,930
Push 1 On and I also added

56
00:04:09,930 --> 00:04:15,420
the inversion of this digital read reading
in such a way that when

57
00:04:15,420 --> 00:04:19,213
The button is pressed and
therefore has a logical zero state

58
00:04:19,213 --> 00:04:24,621
The input which is given by the wiring,
one obtains a true condition so

59
00:04:24,621 --> 00:04:27,040
that it may have a meaning.

60
00:04:27,040 --> 00:04:30,040
And this time, the program should work.

61
00:04:30,040 --> 00:04:34,117
We see that when I press

62
00:04:34,117 --> 00:04:38,910
the button, it actually starts to flash.

63
00:04:38,910 --> 00:04:44,606
Let's try to replace all these calls
Pin mode, Digital read,

64
00:04:44,606 --> 00:04:50,240
Digital write by direct access
to the microcontroller register.

65
00:04:50,240 --> 00:04:54,723
We see here that we have defined the bits in port one,
for the led on the one hand, for

66
00:04:54,723 --> 00:05:01,709
the pushbutton on the other hand,
we defined Led on / Led off with a seven

67
00:05:01,709 --> 00:05:05,707
bits on the corresponding bit, with a clear

68
00:05:05,707 --> 00:05:09,559
bit on the corresponding bit, we

69
00:05:09,559 --> 00:05:12,270
used P1 In playback with masking of the

70
00:05:12,270 --> 00:05:16,630
bit of the push-button
for reading the push-button.

71
00:05:16,630 --> 00:05:20,300
The main program, of course, does not change,

72
00:05:20,300 --> 00:05:22,536
the main loop is completely identical to

73
00:05:22,536 --> 00:05:25,060
that we had earlier, however,

74
00:05:25,060 --> 00:05:28,220
the setup I acted directly on P1 Dir

75
00:05:28,220 --> 00:05:33,762
to put the led out, I took advantage to turn
it off at the beginning of the program and

76
00:05:33,762 --> 00:05:38,274
I also activated the pull-up resistance by

77
00:05:38,274 --> 00:05:42,202
acting on P1REN and I indicated that it was

78
00:05:42,202 --> 00:05:46,225
about a pull-up resistance, so pull-up

79
00:05:46,225 --> 00:05:51,310
putting one in the corresponding
bit of P1OUT.

80
00:05:51,310 --> 00:05:55,940
So this program should
work just like the other.

81
00:05:55,940 --> 00:06:01,086
Let's see earlier we had 714 bytes for this

82
00:06:01,086 --> 00:06:06,352
program, I compile it, we have now,
we will see it very

83
00:06:06,352 --> 00:06:12,090
exactly at the time of uploading, only 410

84
00:06:12,090 --> 00:06:17,360
bytes for a program that does
the same thing rigorously.

85
00:06:17,360 --> 00:06:20,220
When the button is pressed,
the lamp lights up.

86
00:06:20,220 --> 00:06:23,080
So we see that it is relatively interesting,

87
00:06:23,080 --> 00:06:24,990
we gained space in memory.

88
00:06:24,990 --> 00:06:30,247
Now, there would remain a final step,
to get rid of the setup and

89
00:06:30,247 --> 00:06:35,770
loop and directly write
the main hand program.

90
00:06:35,770 --> 00:06:37,119
Let's try to do it.

91
00:06:37,119 --> 00:06:42,730
This is how this program could be presented,
with the hand that contains this

92
00:06:42,730 --> 00:06:48,170
famous instruction for
the initialization of the watchdog

93
00:06:48,170 --> 00:06:54,316
Timer, which was previously in the setup, an

94
00:06:54,316 --> 00:07:00,198
while loop one,
and what was previously in the loop.

95
00:07:00,198 --> 00:07:02,190
So we'll see if it works.

96
00:07:02,190 --> 00:07:07,470
Then my lamp is off, it's a good

97
00:07:07,470 --> 00:07:13,690
Sign, I press the button,
it lights up, but it does not flash.

98
00:07:13,690 --> 00:07:15,510
Why?

99
00:07:15,510 --> 00:07:22,179
Well, we made a serious mistake,
we forgot that the

100
00:07:22,179 --> 00:07:24,736
Delay call was also a call unique to

101
00:07:24,736 --> 00:07:28,225
the Arduino environment,
and for it to function

102
00:07:28,225 --> 00:07:31,280
the Arduino environment
must initialize a certain

103
00:07:31,280 --> 00:07:34,050
number of things, in this case timers,

104
00:07:34,050 --> 00:07:37,200
and as we have written ourselves

105
00:07:37,200 --> 00:07:41,282
the main routine, the hand,
these initializations

106
00:07:41,282 --> 00:07:44,730
did not take place and
the program did not work.

107
00:07:44,730 --> 00:07:50,250
Then we will have to rewrite
ourselves the, the delay procedure.

108
00:07:50,250 --> 00:07:54,824
So here I called it MS wait as I used to

109
00:07:54,824 --> 00:07:59,130
do it, but we understand
that it is the same functionality.

110
00:07:59,130 --> 00:08:06,020
So we have this routine, so with
a volatile variable for it to be, hum.

111
00:08:06,020 --> 00:08:10,080
that the loop, here central,
is actually executed

112
00:08:10,080 --> 00:08:12,390
even when it is empty, which will take a

113
00:08:12,390 --> 00:08:15,822
little time, and then my main program

114
00:08:15,822 --> 00:08:20,302
here with these expectations,
and this time it should work.

115
00:08:20,302 --> 00:08:23,350
I press the button, it flashes.

116
00:08:23,350 --> 00:08:27,320
So do not fall into the trap
you have to choose.

117
00:08:27,320 --> 00:08:32,430
Either you use the Arduino environment
and you use the setup and

118
00:08:32,430 --> 00:08:34,800
loop, or you get free of

119
00:08:34,800 --> 00:08:38,300
the Arduino environment,
you access directly the

120
00:08:38,300 --> 00:08:45,380
processor registers, you write
the hand procedure and an infinite while loop one,

121
00:08:45,380 --> 00:08:51,690
but then you no longer have
the right to use Arduino calls.

