1
00:00:00,000 --> 00:00:07,030
Bonjour.

2
00:00:07,030 --> 00:00:11,876
J'ai toujours estimé que pour comprendre
les microcontrôleurs, il

3
00:00:11,876 --> 00:00:16,950
fallait pratiquer avec de vrais
microcontrôleutrs Et aujourd'hui c'est

4
00:00:16,950 --> 00:00:22,017
relativement facile, de nombreux
dispositifs nous facilitent cet

5
00:00:22,017 --> 00:00:27,500
apprentissage, en particulier des cartes
du type Arduino,

6
00:00:27,500 --> 00:00:33,220
ou encore le LaunchPad MSP 430,

7
00:00:33,220 --> 00:00:37,477
qui sont très peu coûteux, et qui
permettent de faire facilement de

8
00:00:37,477 --> 00:00:41,510
la pratique avec de jolis environnements
de programmation très simples à utiliser.

9
00:00:41,510 --> 00:00:46,090
Malheureusement, tout le monde n'a pas
accès à ce matériel,

10
00:00:46,090 --> 00:00:50,930
alors on peut être tenté de se replier
vers des simulateurs.

11
00:00:50,930 --> 00:00:55,600
Alors il existe de nombreux simulateurs,
malheureusement

12
00:00:55,600 --> 00:01:00,568
les meilleurs sont extrêmement coûteux,
nettement plus chers

13
00:01:00,568 --> 00:01:03,666
que ce type de cartes, j'aimerais citer en

14
00:01:03,666 --> 00:01:07,930
particulier l'excellent logiciel Proteus,
mais qui est coûteux.

15
00:01:07,930 --> 00:01:13,180
Il existe quelques simulateurs qui sont
gratuits, et en ce qui

16
00:01:13,180 --> 00:01:18,390
me concerne, j'ai l'habitude d'utiliser
AVR STUDIO 4.

17
00:01:18,390 --> 00:01:26,132
Alors ce logiciel a été formé par Atmel,
le fabriquant des processeurs AVR, qui

18
00:01:26,132 --> 00:01:28,500
sont donc les processeurs qu'on trouve sur

19
00:01:28,500 --> 00:01:32,415
les Arduinos, ils sont actuellement à la
version

20
00:01:32,415 --> 00:01:38,690
qui s'appelle Atmel Studio 6, mais je
trouve que la version 4 est plus pratique

21
00:01:38,690 --> 00:01:41,316
à utiliser pour la simulation, et c'est

22
00:01:41,316 --> 00:01:43,940
cette version que je vais vous montrer
aujourd'hui.

23
00:01:43,940 --> 00:01:48,630
Elle ne tourne que sous Windows, vous

24
00:01:48,630 --> 00:01:51,204
savez que j'ai l'habitude de travailler
avec un

25
00:01:51,204 --> 00:01:54,858
environnement Linux, c'est la raison pour
laquelle aujourd'hui

26
00:01:54,858 --> 00:01:59,690
j'utiliserai une machine virtuelle pour
exécuter ce programme.

27
00:01:59,690 --> 00:02:04,566
Alors je vais lancer le programme AVR
STUDIO 4, je

28
00:02:04,566 --> 00:02:09,678
signale que c'est un logiciel propriétaire
mais

29
00:02:09,678 --> 00:02:14,830
qu'il est gratuit, et je veux créer un
nouveau projet.

30
00:02:14,830 --> 00:02:20,591
Ce sera un projet écrit en C, je vais lui
donner un nom,

31
00:02:20,591 --> 00:02:25,780
ce sera mon Test, je signale que c'est
bien de proposer

32
00:02:25,780 --> 00:02:30,840
la création d'un fichier initial, qui
prendra le nom Test point C,

33
00:02:30,840 --> 00:02:35,830
et également de mettre un dossier dans
lequel l'ensemble du projet sera stocké.

34
00:02:35,830 --> 00:02:40,070
Je clique ensuite dans Next, et là je vais

35
00:02:40,070 --> 00:02:45,785
choisir le mode simulateur, et je vais
également choisir parmi

36
00:02:45,785 --> 00:02:49,699
la grande liste de processeurs, un
processeur que je

37
00:02:49,699 --> 00:02:55,384
connais, par exemple l'AT méga 328 qui
équipe les Arduinos.

38
00:02:55,384 --> 00:03:00,392
Je me retrouve dans un environnement dans
lequel je

39
00:03:00,392 --> 00:03:05,506
vais pouvoir écrire un petit programme, je
vais maintenant

40
00:03:05,506 --> 00:03:09,964
coller le petit programme que j'ai écrit,
avec

41
00:03:09,964 --> 00:03:15,544
l'option Built ou F7, on va pouvoir lancer

42
00:03:15,544 --> 00:03:20,686
la compilation de ce programme, ici, tout
s'est exécuté

43
00:03:20,686 --> 00:03:24,410
correctement, et tout à l'heure je ferai
du

44
00:03:24,410 --> 00:03:28,850
Debug en lançant de Debuging, mais je vais

45
00:03:28,850 --> 00:03:31,210
le faire avec une meilleure résolution
pour que

46
00:03:31,210 --> 00:03:33,590
vous puissiez voir ce qui se passe
exactement.

47
00:03:38,775 --> 00:03:44,130
Voilà ici le petit programme que j'ai
écrit, qui initialise tout le port B en

48
00:03:44,130 --> 00:03:49,801
sortie, puis qui grâce à un motif dans la
variable V, va réaliser un petit

49
00:03:49,801 --> 00:03:56,760
chenillard sur le port B avec décalage
vers la gauche de la valeur un.

50
00:03:56,760 --> 00:03:59,595
Et un boucle While à l'infini.

51
00:03:59,595 --> 00:04:03,742
Alors nous allons lancer le Debug, et on
va voir que

52
00:04:03,742 --> 00:04:08,850
l'environnement de travail change avec la
petite flèche jaune dans le source.

53
00:04:08,850 --> 00:04:12,770
Il est possible ici sur la droite
d'afficher différentes

54
00:04:12,770 --> 00:04:17,412
parties internes du microcontrôleur, ici
port B, pin B et

55
00:04:17,412 --> 00:04:23,042
DDRB seront visibles, nous allons
maintenant chercher à faire du

56
00:04:23,042 --> 00:04:26,660
pas à pas dans le programme avec la touche
F11.

57
00:04:26,660 --> 00:04:32,450
On voit l'effet des instructions, ici sur
DDRP.

58
00:04:32,450 --> 00:04:38,740
Puis ensuite sur le port B, et sur la pin.

59
00:04:38,740 --> 00:04:45,272
On va exécuter l'ensemble de la boucle du
chenillard,

60
00:04:45,272 --> 00:04:51,520
et voir qu'après le dernier bit, c'est le
premier qui est allumé, et ainsi de suite.

61
00:04:51,520 --> 00:04:59,190
Alors vous voyez que cet environnement AVR
STUDIO 4 est simple à mettre en oeuvre, il

62
00:04:59,190 --> 00:05:04,020
permet de véritablement voir à l'intérieur
du processeur ce qu'il se passe, ce

63
00:05:04,020 --> 00:05:06,996
qui peut être extrêmement intéressant,
donc en

64
00:05:06,996 --> 00:05:10,236
plus de son utilisation comme outil
lorsqu'on

65
00:05:10,236 --> 00:05:12,746
n'a pas de matériel, il peut aussi

66
00:05:12,746 --> 00:05:17,470
être utilisé pour exécuter des petites
séries d'instructions,

67
00:05:17,470 --> 00:05:20,880
pour essayer de comprendre exactement ce
qui se passe.

68
00:05:20,880 --> 00:05:24,030
peut-être certains d'entre vous ont lu

69
00:05:24,030 --> 00:05:27,790
l'explication dans le document LearnCbot
4,

70
00:05:27,790 --> 00:05:30,516
ils auront vu que c'est difficile

71
00:05:30,516 --> 00:05:34,558
de comprendre comment fonctionne
l'extension du

72
00:05:34,558 --> 00:05:41,364
signe avec les opérations sur des nombres
signés, eh bien en regardant

73
00:05:41,364 --> 00:05:45,970
avec un simulateur, on peut effectivement
comprendre beaucoup mieux ce qui se passe.

74
00:05:45,970 --> 00:05:52,130
Je vous souhaite bien du plaisir à
l'utiliser.