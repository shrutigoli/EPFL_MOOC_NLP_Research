1
00:00:00,000 --> 00:00:09,034
Bonjour, nous allons parler de la mise au
point de vos programmes, et je suppose que

2
00:00:09,034 --> 00:00:14,930
vous êtes un utilisateur plutôt débutant,
et que vous utilisez Arduino ou Energia.

3
00:00:14,930 --> 00:00:20,298
Les professionnels utilisent des outils
beaucoup plus complexes, qui incluent, des

4
00:00:20,298 --> 00:00:26,410
dévermineurs, ils se popularisent et on en
verra un dans la prochaine séquence.

5
00:00:26,410 --> 00:00:29,146
Ce qu'il faut de toute façon, c'est savoir

6
00:00:29,146 --> 00:00:35,018
structurer les programmes, comprendre les
messages d'erreurs, imaginer des

7
00:00:35,018 --> 00:00:40,026
solutions pour, observer le programme, et
ne pas trop

8
00:00:40,026 --> 00:00:45,408
perturber son exécution en temps réel dans
certaines applications.

9
00:00:45,408 --> 00:00:48,288
Votre programme a une structure
schématisée ici, il

10
00:00:48,288 --> 00:00:51,680
faut naturellement commencer par mettre un
nom, une date,

11
00:00:51,680 --> 00:00:56,280
pour que s'il est imprimé, vous retrouviez
sur quel dossier il va se trouver.

12
00:00:56,280 --> 00:01:01,434
Ensuite, vous avez la description du
matériel avec

13
00:01:01,434 --> 00:01:06,282
des includes, c'est très important de
choisir des noms

14
00:01:06,282 --> 00:01:11,960
explicites, on l'a vu, et d'initialiser
complètement le matériel.

15
00:01:11,960 --> 00:01:13,960
Ceci se fera dans le set up.

16
00:01:13,960 --> 00:01:16,976
Et maintenant, les fonctions utilisées
dans le programme,

17
00:01:16,976 --> 00:01:20,917
certaines sont appelées dans le set-up,
pour initialiser, et

18
00:01:20,917 --> 00:01:26,560
on les retrouve évidemment, dans la boucle
de programmation.

19
00:01:26,560 --> 00:01:31,370
Et ces fonctions, naturellement, très
souvent, appellent des fonctions

20
00:01:31,370 --> 00:01:35,766
de plus bas niveau, qui se réfèrent au
matériel.

21
00:01:35,766 --> 00:01:42,185
Ce qui est important, c'est de progresser
par petits pas, de bien tester

22
00:01:42,185 --> 00:01:49,420
le matériel et les définitions et les
fonctions indépendamment.

23
00:01:49,420 --> 00:01:54,844
C'est aussi important de garder les
anciennes versions, avec

24
00:01:54,844 --> 00:02:00,080
des nombres, ou une chronologie; très
souvent, on perd tout à coup les pédales,

25
00:02:00,080 --> 00:02:03,768
en disant mais pourquoi est-ce que ça
marche plus, j'ai fait un

26
00:02:03,768 --> 00:02:07,304
tout petit pas de rien du tout, est-ce que
c'est le matériel

27
00:02:07,304 --> 00:02:08,600
qui s'est dégradé?

28
00:02:08,600 --> 00:02:13,938
Donc là, c'est très utile de pouvoir
remonter, prendre une version

29
00:02:13,938 --> 00:02:19,353
précédente, re-tester des routines de base
du matériel, et reprendre

30
00:02:19,353 --> 00:02:24,779
confiance progressivement, pour trouver
l'erreur dans la dernière version.

31
00:02:24,779 --> 00:02:29,255
Les erreurs de compilation, c'est souvent
assez surprenant, vous

32
00:02:29,255 --> 00:02:32,488
oubliez un point virgule, vous pouvez
avoir un message

33
00:02:32,488 --> 00:02:38,413
relativement clair, l'instruction suivante
est "delay"; mais, si vous trouvez un

34
00:02:38,413 --> 00:02:44,560
"63 cannot be used as a function" il y a
pas de 63 dans votre programme, et

35
00:02:44,560 --> 00:02:51,340
ce qu'il faut remarquer c'est qu'il y a
par contre, un mot binaire, dont la

36
00:02:51,340 --> 00:02:57,982
valeur est 63, où le point-virgule a été
oublié à la fin, et voilà

37
00:02:57,982 --> 00:03:00,960
comment a réagi le compilateur.

38
00:03:00,960 --> 00:03:05,733
Une virgule oubliée, peut effectivement,
on peut comprendre que

39
00:03:05,733 --> 00:03:08,857
il manquait des arguments, mais on se pose
vraiment

40
00:03:08,857 --> 00:03:11,280
la question quand, tout à coup, il y a

41
00:03:11,280 --> 00:03:15,790
des destructeurs, qui ne sont pas apparus
dans votre programme.

42
00:03:15,790 --> 00:03:18,830
Les typos, le plus fréquemment, c'est les

43
00:03:18,830 --> 00:03:22,988
erreurs de minuscules, majuscules, qui
font que le

44
00:03:22,988 --> 00:03:29,416
symbole n'est pas déclaré, toutes les fois
que vous avez un symbole

45
00:03:29,416 --> 00:03:34,730
qui n'est pas reconnu par le compilateur,
hé bien il va vous sortir ce message.

46
00:03:34,730 --> 00:03:37,764
Bien, le plus grave, c'est quand vous avez
des

47
00:03:37,764 --> 00:03:41,328
erreurs qui n'ont pas été reconnues par le
compilateur.

48
00:03:41,328 --> 00:03:44,064
Hé bien la plus fréquente, c'est quand
vous

49
00:03:44,064 --> 00:03:48,120
écrivez une condition, c'est d'oublier le
double signe égal,

50
00:03:48,120 --> 00:03:51,474
pour le compilateur, ceci est une
expression qui a

51
00:03:51,474 --> 00:03:54,162
une valeur, ça a la valeur 0, donc le if

52
00:03:54,162 --> 00:03:57,418
sera toujours faux ici, quelle que soit la
valeur de

53
00:03:57,418 --> 00:04:02,864
aa, évidemment que ça risque de faire
dévier votre programme.

54
00:04:02,864 --> 00:04:08,419
Ensuite, quand vous écrivez une valeur
comme 78, vous avez fortement tendance

55
00:04:08,419 --> 00:04:13,828
à vous dire que c'est un nombre décimal et
puis oublier de marquer

56
00:04:13,828 --> 00:04:19,210
le 0x devant, qui va évidemment pas du
tout donner la même valeur numérique.

57
00:04:19,210 --> 00:04:24,192
Les parenthèses manquantes, c'est clair
que si vous écrivez

58
00:04:24,192 --> 00:04:29,266
a plus 1, décalé de 2, est-ce que que
c'est

59
00:04:29,266 --> 00:04:34,020
a plus 1, prenons l'exemple où a vaut 3,
hé bien ça, ça

60
00:04:34,020 --> 00:04:39,016
ferait 4, décalé de 2, ça ferait 16, 4, 8,

61
00:04:39,016 --> 00:04:44,350
16.
Alors que si vous mettez la parenthèse

62
00:04:44,350 --> 00:04:49,424
différemment, a plus 1 décalé de 2, 1
décalé de 2, hé bien,

63
00:04:49,424 --> 00:04:54,220
ça fait 4, on avait décidé que c'était 3,
ici, vous aurez la valeur 7.

64
00:04:54,220 --> 00:04:59,360
Alors, ce que fait le compilateur, par
défaut, il

65
00:04:59,360 --> 00:05:04,024
a des règles de priorité, le plus simple,
hé bien,

66
00:05:04,024 --> 00:05:08,220
c'est de respecter la bonne solution, et
puis vous pouvez

67
00:05:08,220 --> 00:05:11,380
vérifier, avec un petit programme de test,
ce qui est fait.

68
00:05:11,380 --> 00:05:15,595
Un peu plus délicat des fois, c'est les
types incorrects.

69
00:05:15,595 --> 00:05:18,597
Il y a des conversions de types que l'on
vous a

70
00:05:18,597 --> 00:05:21,919
pas expliquées, il y a le volatile, qu'on
a mentionné, il y

71
00:05:21,919 --> 00:05:24,484
a le statique, qu'on a mal expliqué, donc
là, il y a

72
00:05:24,484 --> 00:05:29,116
en fait, tout un niveau, du langage C, que
un professionnel a

73
00:05:29,116 --> 00:05:34,100
besoin, et puis que l'on a partiellement
pas eu le temps de bien expliquer.

74
00:05:34,100 --> 00:05:40,216
Maintenant, votre compilation est
correcte, électriquement, vous

75
00:05:40,216 --> 00:05:46,326
pouvez avoir des problèmes sur les pattes
d'entrées-sorties, vous devez

76
00:05:46,326 --> 00:05:48,990
avoir des 0, qui sont inférieurs à un

77
00:05:48,990 --> 00:05:52,106
volt, des 1 qui sont supérieurs à trois
volts.

78
00:05:52,106 --> 00:05:54,614
Il peut arriver que vous ayez un mauvais

79
00:05:54,614 --> 00:05:59,772
niveau parce que vous avez trop demandé de
courant sur une sortie et si vous demandez

80
00:05:59,772 --> 00:06:03,040
du courant, la tension va naturellement
monter, si

81
00:06:03,040 --> 00:06:07,136
c'est un court-circuit, là, c'est clair
que c'est catastrophique.

82
00:06:07,136 --> 00:06:10,142
Un état flottant peut prendre toutes les
valeurs entre 0 et

83
00:06:10,142 --> 00:06:13,163
5 volts, vous vous souvenez, si vous
touchez avec le doigt,

84
00:06:13,163 --> 00:06:16,216
hé bien, ça va prendre la tension du
doigt, heureusement avec

85
00:06:16,216 --> 00:06:20,200
des diodes de protection, qui fait que si
vous êtes légèrement électrostatique,

86
00:06:20,200 --> 00:06:25,080
ça restera dans le domaine de 0 à 5 volts.

87
00:06:25,080 --> 00:06:30,146
Les signaux peuvent être pulsés, là c'est
plus difficile de les observer

88
00:06:30,146 --> 00:06:35,363
avec un voltmètre, mais avec un crayon
logique, une "logic probe" qui

89
00:06:35,363 --> 00:06:40,262
vous offre la possibilité d'avoir une
diode rouge, une diode verte pour montrer

90
00:06:40,262 --> 00:06:45,953
les signaux logiques, et une logique, qui
va convertir les impulsions

91
00:06:45,953 --> 00:06:50,174
brèves, en impulsions plus longues
visibles sur ces

92
00:06:50,174 --> 00:06:53,930
diodes, vous avez un bon moyen
d'observation des signaux.

93
00:06:53,930 --> 00:06:58,105
L'idéal évidemment, c'est l'oscilloscope,
qui vous montrera, à

94
00:06:58,105 --> 00:07:02,280
la fois les niveaux analogiques et les
impulsions.

95
00:07:02,280 --> 00:07:07,280
Vous avez l'impression que vous avez un
comportement critique dans votre système?

96
00:07:07,280 --> 00:07:11,590
La règle que j'applique, c'est de modifier
la tension.

97
00:07:11,590 --> 00:07:13,570
Si effectivement, dû à des mauvais

98
00:07:13,570 --> 00:07:16,288
niveaux, dû à différentes conditions, à
des

99
00:07:16,288 --> 00:07:19,683
retards par exemple, le comportement ne

100
00:07:19,683 --> 00:07:23,585
semble pas être parfaitement répétitif, ou
pas

101
00:07:23,585 --> 00:07:26,915
identique d'une copie du programme, dans

102
00:07:26,915 --> 00:07:30,414
un autre système, vous modifiez la
tension,

103
00:07:30,414 --> 00:07:33,230
et tous les circuits doivent être très

104
00:07:33,230 --> 00:07:36,636
tolérants à la tension actuellement, ça
doit

105
00:07:36,636 --> 00:07:39,831
fonctionner, si c'est garanti 5 volts, ça
doit en

106
00:07:39,831 --> 00:07:42,590
tout cas fonctionner de 4 à 5 volts et
demi.

107
00:07:42,590 --> 00:07:47,960
Bien, vous avez quand même un problème
maintenant avec votre programme,

108
00:07:47,960 --> 00:07:53,322
et une solution, c'est d'enlever des
parties de programme, en se

109
00:07:53,322 --> 00:07:57,921
disant, hé bien, peut-être que l'erreur
est dans cette partie, alors

110
00:07:57,921 --> 00:08:01,854
vous avez une facilité d'Arduino, que vous
trouvez dans le menu

111
00:08:01,854 --> 00:08:05,126
édition, qui est de commenter,
décommenter.

112
00:08:05,126 --> 00:08:08,031
Donc ici, dans cette période, hé bien on

113
00:08:08,031 --> 00:08:13,110
avait, supprimé, commenté une partie du
programme, et puis

114
00:08:13,110 --> 00:08:18,176
maintenant, en re-cliquant sur le même
index, hé

115
00:08:18,176 --> 00:08:22,980
bien, on va décommenter et faire repartir
cette partie.

116
00:08:22,980 --> 00:08:26,790
C'est évidemment un petit peu dangereux
parfois,

117
00:08:26,790 --> 00:08:30,345
puisque si une variable est utilisée ou
déclarée dans

118
00:08:30,345 --> 00:08:34,150
cette partie, ça peut perturber le reste
du programme.

119
00:08:34,150 --> 00:08:38,660
Mais dans beaucoup de cas, enfin il faut
connaitre le truc.

120
00:08:38,660 --> 00:08:46,436
Les professionnels, utilisent dans leurs
programmes très complexes, une possibilité

121
00:08:46,436 --> 00:08:52,158
d'insertion conditionnelle, qui est très
pratique, si vous voulez avoir, un seul

122
00:08:52,158 --> 00:08:58,910
programme qui en fait, agit sur deux
environnements différents,

123
00:08:58,910 --> 00:09:03,134
et puis qui sont légèrement différents,
vous avez deux types de capteurs, hé

124
00:09:03,134 --> 00:09:10,042
bien, votre programme avec un if, dièse
if,

125
00:09:10,042 --> 00:09:16,630
en fait, va dire ce qu'on garde comme
instruction, dans un cas, ou dans l'autre.

126
00:09:16,630 --> 00:09:22,262
Alors, il y a l'instruction dièse define
Debug, et puis, ici,

127
00:09:22,262 --> 00:09:27,790
hé bien pour un petit programme de test,
j'ai un ifdef Debug.

128
00:09:27,790 --> 00:09:32,035
Donc, si Debug a été défini, les
instructions

129
00:09:32,035 --> 00:09:36,280
entre le ifdef, et le endif, vont être
exécutées.

130
00:09:36,280 --> 00:09:38,740
Alors, voilà le genre de petit programme
de test

131
00:09:38,740 --> 00:09:41,860
qu'il vous faut toujours faire, pour
vérifier que vous avez

132
00:09:41,860 --> 00:09:44,584
bien compris quel est le rôle du Debug, et

133
00:09:44,584 --> 00:09:48,970
puis maintenant, si je supprime cette
ligne, c'est ce que

134
00:09:48,970 --> 00:09:55,036
demande cette syntaxe, hé bien, je vais
supprimer l'exécution de

135
00:09:55,036 --> 00:10:01,080
ces instructions, qui se font seulement
quand Debug est défini.

136
00:10:01,080 --> 00:10:03,180
Alors il y a pas de point virgule,

137
00:10:03,180 --> 00:10:06,864
c'est un pré-processeur qui va gérer le
programme avant

138
00:10:06,864 --> 00:10:10,564
de l'envoyer au compilateur, et il va
simplement envoyer

139
00:10:10,564 --> 00:10:14,890
les instructions qui ont été définies avec
des dièse if.

140
00:10:14,890 --> 00:10:20,145
Une solution de dépannage, c'est de dire,
j'ai ma

141
00:10:20,145 --> 00:10:24,742
fonction qui semble pas donner les bons
résultats, est-ce

142
00:10:24,742 --> 00:10:27,838
que c'est la faute de la fonction, ou bien

143
00:10:27,838 --> 00:10:32,280
est-ce que c'est la faute de l'utilisation
de ces résultats

144
00:10:32,280 --> 00:10:33,090
plus loin?

145
00:10:33,090 --> 00:10:37,604
Alors si vous simplifiez cette fonction
pour simplement qu'elle rende

146
00:10:37,604 --> 00:10:41,050
la valeur connue, vous pouvez vérifier que
la suite du

147
00:10:41,050 --> 00:10:45,833
programme travaille correctement avec
cette valeur, et puis, vérifier des

148
00:10:45,833 --> 00:10:50,290
conditions limites, est-ce que c'est un 0,
est-ce que c'est maximum?

149
00:10:50,290 --> 00:10:54,480
Donc, c'est un bon moyen de certifier, en
quelque sorte, les programmes.

150
00:10:54,480 --> 00:10:57,456
Et maintenant, une fois que vous avez

151
00:10:57,456 --> 00:11:01,663
focalisé, sur l'erreur, sur le fait qu'il
y a une erreur dans

152
00:11:01,663 --> 00:11:03,914
cette fonction, vous pouvez la tester

153
00:11:03,914 --> 00:11:06,560
séparément, ou l'analyser un petit peu
mieux.

154
00:11:06,560 --> 00:11:10,550
Quand vous avez les affichages balayés
comme

155
00:11:10,550 --> 00:11:14,730
on avait vu, l'affichage à quatre digits,
augmenter

156
00:11:14,730 --> 00:11:17,530
les délais, c'est clair, permet de bien
voir

157
00:11:17,530 --> 00:11:21,312
ce qui se passe, successivement, sur
chaque digit.

158
00:11:21,312 --> 00:11:22,638
On peut aussi,

159
00:11:22,638 --> 00:11:27,821
à un endroit critique du programme,
allumer une LED, et puis on sait

160
00:11:27,821 --> 00:11:32,730
que si cette LED est allumée et éteinte,
hé bien, le programme a passé par là.

161
00:11:32,730 --> 00:11:37,900
Plus riche, mais qui va alors, bloquer
l'exécution,

162
00:11:37,900 --> 00:11:42,706
c'est d'observer les variables, grâce au
Serial print, et

163
00:11:42,706 --> 00:11:47,753
vous pouvez faire une fonction StopHex,
qui va prendre le

164
00:11:47,753 --> 00:11:53,320
paramètre que vous avez déclaré, et puis
imprimer

165
00:11:53,320 --> 00:11:59,110
valeur Hexa, print l, et valeur
hexadécimale.

166
00:11:59,110 --> 00:12:03,158
C'est très important, quand vous voyez une
valeur,

167
00:12:03,158 --> 00:12:07,062
de bien savoir si elle est décimale ou
hexadécimale.

168
00:12:07,062 --> 00:12:13,506
Et ensuite vous bloquez le programme, et
puis il faudra le recompiler,

169
00:12:13,506 --> 00:12:18,756
en ayant repéré l'erreur.
Alors, le Serial print est relativement

170
00:12:18,756 --> 00:12:23,890
lent, vous pouvez utiliser du SPI, plus
rapide, mais c'est moins confortable.

171
00:12:23,890 --> 00:12:28,030
Si vous voulez maintenant observer et
continuer,

172
00:12:28,030 --> 00:12:31,894
alors, vous pouvez, par exemple, prévoir
deux

173
00:12:31,894 --> 00:12:38,010
paramètres, et faire en sorte que quand
vous appelez cet affichage de la variable,

174
00:12:38,010 --> 00:12:44,440
d'avoir un numéro de référence, une
variable qui n'est pas toujours la même,

175
00:12:44,440 --> 00:12:51,102
et vous allez voir maintenant, en ayant
pressé chaque fois, ou

176
00:12:51,102 --> 00:12:56,960
en ayant fait un delay, mais ça peut être
assez pratique d'aller pas à pas,

177
00:12:56,960 --> 00:13:02,542
d'un point d'observation au suivant, et,
dans le fond,

178
00:13:02,542 --> 00:13:06,989
c'est ce que font les dévermineurs,
simplement, ils vous offrent une

179
00:13:06,989 --> 00:13:12,514
possibilité d'interaction avec toutes vos
variables, beaucoup

180
00:13:12,514 --> 00:13:17,960
plus complète, et aussi, une plus grande
facilité d'enlever ces,

181
00:13:17,960 --> 00:13:23,080
ces points d'arrêt dans le programme.

182
00:13:23,080 --> 00:13:25,540
Maintenant, si vous avez des problèmes de
temps

183
00:13:25,540 --> 00:13:28,430
réel, et que vous ne pouvez pas arrêter
l'exécution,

184
00:13:28,430 --> 00:13:34,868
une solution c'est d'afficher, sur une
LED, et si vous

185
00:13:34,868 --> 00:13:41,250
utilisez un digitalWrite, ça va ralentir
votre programme de 2 microsecondes.

186
00:13:41,250 --> 00:13:46,997
Donc c'est nettement mieux d'utiliser un
bitSet, bitClear, qui

187
00:13:46,997 --> 00:13:52,618
va prendre deux cycles d'instructions,
moins de 0,1 microseconde.

188
00:13:52,618 --> 00:13:53,508
Vous pouvez

189
00:13:53,508 --> 00:13:58,378
aussi, comme on l'a vu, faire un ou
exclusif avec un

190
00:13:58,378 --> 00:14:03,810
masque qui est un Bit 1, position 5, et
pas 4.

191
00:14:03,810 --> 00:14:09,165
Evidemment que si maintenant, vous avez un
oscilloscope, ça vous permet

192
00:14:09,165 --> 00:14:14,520
de visualiser des bits qui ont été
activés, désactivés,

193
00:14:14,520 --> 00:14:19,030
ça vous permet de mesurer des durées de
routines,

194
00:14:19,030 --> 00:14:23,125
et, vous pouvez perturber, dans le fond,

195
00:14:23,125 --> 00:14:27,220
le moins possible, les activités du
programme.

196
00:14:27,220 --> 00:14:30,440
Si vous avez, par exemple, un programme
qui reçoit un

197
00:14:30,440 --> 00:14:34,727
signal infrarouge, c'est clair que vous
pouvez pas l'arrêter, mais

198
00:14:34,727 --> 00:14:38,446
vous pouvez par exemple, allumer une LED
au début d'un

199
00:14:38,446 --> 00:14:44,550
bloc d'informations reçues, l'éteindre à
la fin, vous pouvez l'allumer,

200
00:14:44,550 --> 00:14:47,494
seulement si ce bloc d'informations
correspond à une

201
00:14:47,494 --> 00:14:50,689
adresse qui a été décodée correctement, et
cetera.

202
00:14:50,689 --> 00:14:53,316
Donc, ce qu'on a vu, pour aider à la mise
au

203
00:14:53,316 --> 00:14:55,850
point, c'est qu'il faut bien documenter

204
00:14:55,850 --> 00:14:58,515
les programmes évidemment, c'est qu'il
faut

205
00:14:58,515 --> 00:15:04,460
connaitre quelques trucs, pour mieux
interpréter les messages d'erreur

206
00:15:04,460 --> 00:15:10,345
et intervenir dans le programme pour le
faire avancer pas à pas, et vérifier

207
00:15:10,345 --> 00:15:15,785
que son évolution est correcte, jusqu'à ce
qu'il marche entièrement.

208
00:15:15,785 --> 00:15:18,469
Et puis maintenant, la grande question,
c'est de

209
00:15:18,469 --> 00:15:21,477
savoir est-ce que ça vaut la peine
d'utiliser

210
00:15:21,477 --> 00:15:26,028
un dévermineur, ça implique d'avoir un
outil plus

211
00:15:26,028 --> 00:15:28,880
compliqué à mettre en oeuvre, déclarer des
projets.

212
00:15:28,880 --> 00:15:32,104
Surtout, ce que j'aimerais que vous
réalisiez, c'est que

213
00:15:32,104 --> 00:15:36,251
ces programmes sont compatibles avec du C,
et ne reconnaissent

214
00:15:36,251 --> 00:15:38,500
pas les instructions Arduino.

215
00:15:38,500 --> 00:15:45,480
Donc, un compilateur Arduino, qui
permettrait d'appeler des fonctions

216
00:15:45,480 --> 00:15:51,265
de débuggage, n'existe pas encore à ma
connaissance, et si maintenant, vous

217
00:15:51,265 --> 00:15:56,070
évoluez une fois, vers un outil plus
performant, ce qui certainement

218
00:15:56,070 --> 00:16:01,227
arrivera, hé bien, vous avez tout avantage
dès maintenant, à éviter,

219
00:16:01,227 --> 00:16:06,680
dans le programme principal, d'utiliser
des facilités Arduino,

220
00:16:06,680 --> 00:16:10,346
que par contre, rendent service au niveau
des

221
00:16:10,346 --> 00:16:15,348
définitions, déclarations, où là, la
transformation du

222
00:16:15,348 --> 00:16:20,520
programme sera beaucoup plus localisée et
facile à faire.