1
00:00:04,185 --> 00:00:04,878
Bonjour.

2
00:00:04,878 --> 00:00:08,370
Le C traditionnel affiche hello world sur
l'écran.

3
00:00:08,370 --> 00:00:11,840
On s'intéresse plus à interagir avec le
monde réel

4
00:00:11,840 --> 00:00:14,234
et on a affiché, on a fait clignoter des
LED.

5
00:00:14,234 --> 00:00:18,113
Mais ça peut être aussi intéressant de
transmettre des textes

6
00:00:18,113 --> 00:00:21,982
et des paramètres sur l'écran et c'est ce
qu'on va voir.

7
00:00:21,982 --> 00:00:24,720
On s'intéressera aussi aux nombres
aléatoires.

8
00:00:24,720 --> 00:00:29,382
Notre microcontrôleur est en communication
avec le PC via

9
00:00:29,382 --> 00:00:32,070
la ligne USB qui nous sert à charger les

10
00:00:32,070 --> 00:00:36,463
programmes, et maintenant, ce qu'on veut
faire c'est que

11
00:00:36,463 --> 00:00:41,080
le microcontrôleur envoie de l'information
sur l'écran, ou que

12
00:00:41,080 --> 00:00:45,515
des caractères tapés au clavier puissent
arriver au mircrocontrôleur.

13
00:00:45,515 --> 00:00:49,046
Alors, il faut établir ce lien au niveau
du setup,

14
00:00:49,046 --> 00:00:54,825
et ça c'est l'instruction serial begin
dans laquelle il faut définir

15
00:00:54,825 --> 00:00:57,370
la vitesse de communication, c'est

16
00:00:57,370 --> 00:01:00,930
traditionnellement de 1600 bits par
seconde.

17
00:01:00,930 --> 00:01:05,800
Une fois cette communication établie et
qu'on a sélectionné au niveau

18
00:01:05,800 --> 00:01:11,035
de, du PC, l'affichage de cette
information, et bien, on

19
00:01:11,035 --> 00:01:16,938
peut utiliser le serial print avec des
paramètres, ou serial println,

20
00:01:16,938 --> 00:01:20,695
il y aura un retour, un passage à la ligne
automatique.

21
00:01:20,695 --> 00:01:25,559
Alors, au niveau d'Arduino, euh, c'est
extrêmement pauvre, les

22
00:01:25,559 --> 00:01:30,861
possibilités d'affichage puisque ça va
plutôt me dépanner, alors que quand

23
00:01:30,861 --> 00:01:33,790
on fait du C sur écran, c'est vraiment une
des

24
00:01:33,790 --> 00:01:38,160
fonctions de base avec toutes sortes de
petits gadgets pour exprimer.

25
00:01:38,160 --> 00:01:41,790
Alors, si je prends l'écran, maintenant,

26
00:01:41,790 --> 00:01:45,706
de notre Arduino, vous avez peut-être
remarqué,

27
00:01:45,706 --> 00:01:50,472
vous le savez déjà, qu'il y a une
possibilité de cliquer serial monitor

28
00:01:50,472 --> 00:01:55,260
quand le programme s'exécute, et on va
avoir, affichés, les résultats.

29
00:01:55,260 --> 00:02:00,745
Le programme de test que nous commandons
maintenant, vous avez serial begin

30
00:02:00,745 --> 00:02:05,950
de 1600 dans le setup, et ensuite on a
déclaré

31
00:02:05,950 --> 00:02:10,980
une variable qui valait 45.
On l'imprime, un espace,

32
00:02:10,980 --> 00:02:14,813
on l'imprime en décimal, c'est la même
chose.

33
00:02:14,813 --> 00:02:18,155
Par défaut, les variables sont décimales.

34
00:02:18,155 --> 00:02:20,427
On peut l'imprimer en hexadécimal.

35
00:02:20,427 --> 00:02:24,727
On peut imprimer un texte entre
guillemets, et puis, on peut ici,

36
00:02:24,727 --> 00:02:30,290
euh, imprimer des, des nombres successifs
pour voir comment ça se présente.

37
00:02:30,290 --> 00:02:35,692
Alors, 45, 45, deux D, la valeur exacte,
compte, et puis on remarque, ici,

38
00:02:35,692 --> 00:02:40,250
zéro, un, deux, trois, 15, que les zéros
non

39
00:02:40,250 --> 00:02:46,008
significatifs sont éliminés.
Donc, le programme

40
00:02:46,008 --> 00:02:51,254
se rapproche de nos habitudes de lecture
des nombres.

41
00:02:51,254 --> 00:02:54,764
Euh, un exemple typique, vous avez un

42
00:02:54,764 --> 00:02:57,938
capteur de lumière, vous devez commander
un moteur.

43
00:02:57,938 --> 00:03:01,140
Toutes les dix millisecondes, vous faites

44
00:03:01,140 --> 00:03:03,970
un calcul qui décide de la vitesse

45
00:03:03,970 --> 00:03:07,708
du moteur par rapport à l'intensité
lumineuse.

46
00:03:07,708 --> 00:03:12,051
Ces calculs, cette formule, c'est bien de
pouvoir la vérifier

47
00:03:12,051 --> 00:03:16,554
et en fonction des conditions lumineuses,
en étant, euh, immobile.

48
00:03:16,554 --> 00:03:20,766
Donc, on va, toutes les 10 millisecondes,
on va faire les

49
00:03:20,766 --> 00:03:24,842
calculs, mais on ne va pas afficher toutes
les 10 millisecondes.

50
00:03:24,842 --> 00:03:26,206
Ça remplirait l'écran,

51
00:03:26,206 --> 00:03:30,295
euh, beaucoup trop vite.
Donc, on va décider que toutes les 0,5

52
00:03:30,295 --> 00:03:35,202
secondes, toutes les 50 mesures, on va
afficher la

53
00:03:35,202 --> 00:03:40,690
valeur de la lumière et puis la vitesse du
moteur, le pwm.

54
00:03:40,690 --> 00:03:46,022
Donc, toutes les 10 millisecondes, on
passe à travers ce programme,

55
00:03:46,022 --> 00:03:51,347
mais avec un petit comptage de 50, ce
n'est

56
00:03:51,347 --> 00:03:56,210
que toutes les 50 fois qu'on va afficher
le capteur de lumière.

57
00:03:56,210 --> 00:03:58,730
C'est bien de mettre un signe explicif.

58
00:03:58,730 --> 00:04:02,770
Je me méfie de ce, euh, graphe qui
probablement ne passera pas.

59
00:04:02,770 --> 00:04:07,485
La valeur de la lumière, la valeur du
moteur, la

60
00:04:07,485 --> 00:04:12,508
valeur du PWM, donc on aura ceci sur une
ligne, vous avez le

61
00:04:12,508 --> 00:04:17,780
ln, ici, euh, toutes les 0.5 secondes.

62
00:04:17,780 --> 00:04:24,662
Alors, ceci va très bien pour les tests,
mais d'abord, si elle recommence à bouger,

63
00:04:24,662 --> 00:04:29,648
on peut pas le suivre avec un, avec un PC
portable, c'est pas confortable.

64
00:04:29,648 --> 00:04:34,366
Et l'autre élément, c'est que transmettre
cette information,

65
00:04:34,366 --> 00:04:38,262
À 9600 bits par seconde, ça fait une
milliseconde.

66
00:04:38,262 --> 00:04:42,897
Donc, ça fait de l'ordre de 50, euh,
millisecondes, et en plus

67
00:04:42,897 --> 00:04:47,490
de ça, ça va utiliser 2000 bytes en
mémoire.

68
00:04:47,490 --> 00:04:54,258
Donc, on se préoccupe d'optimiser les
applications,

69
00:04:54,258 --> 00:04:59,909
et on ne pourra pas mettre en service,
même via, euh, des communications

70
00:04:59,909 --> 00:05:05,700
radio, ce genre d'affichage pendant
l'exécution.

71
00:05:05,700 --> 00:05:08,178
On peut s'intéresser aussi à aller dans
l'autre

72
00:05:08,178 --> 00:05:10,774
sens, c'est-à-dire à taper en caractères
sur le

73
00:05:10,774 --> 00:05:13,490
clavier, puis à le récupérer dans votre
programme.

74
00:05:13,490 --> 00:05:17,846
Mais là, c'est un petit peu plus
compliqué, parce

75
00:05:17,846 --> 00:05:21,976
que, euh, votre programme peut
naturellement attendre sur une

76
00:05:21,976 --> 00:05:24,328
touche du clavier à ne rien faire d'autre
pendant

77
00:05:24,328 --> 00:05:26,990
ce temps-là, mais c'est pas ça qui nous
intéresse.

78
00:05:26,990 --> 00:05:33,450
Ce qu'on voudrait, c'est pouvoir taper sur
le clavier quand on veut, et le programme,

79
00:05:33,450 --> 00:05:37,782
quand il a besoin de l'information, vient
la chercher.

80
00:05:37,782 --> 00:05:42,289
Et ce qui est programmé, c'est un tampon.
Les caractères

81
00:05:42,289 --> 00:05:47,046
qu'on envoie depuis la clavier viennent,
euh, se stocker

82
00:05:47,046 --> 00:05:51,500
dans une mémoire tampon.
Vous avez un compteur.

83
00:05:51,500 --> 00:05:58,700
Alors, le premier caractère arrive, ici,
et puis, on compte

84
00:05:58,700 --> 00:06:04,560
que il y a un caractère, ici, dans une
variable qui s'appelle serial available.

85
00:06:04,560 --> 00:06:08,810
Et si vous avez un deuxième caractère, et
bien, ça sera incrémenté.

86
00:06:08,810 --> 00:06:13,942
Donc, votre programme va surveiller ce,
cette

87
00:06:13,942 --> 00:06:19,250
variable serial available, et si elle est
différente de zéro,

88
00:06:19,250 --> 00:06:23,904
lire le caracttère, donc, vider le tampon.
Le serial

89
00:06:23,904 --> 00:06:29,516
available passera à zéro, et maintenant,
si votre programme, euh, n'est pas du

90
00:06:29,516 --> 00:06:33,295
tout attentif à ce qui arrive, et bien,
euh, ça peut se remplir.

91
00:06:33,295 --> 00:06:35,335
On peut lire les caractères les uns après

92
00:06:35,335 --> 00:06:37,890
les autres, euh, dans votre boucle de
lecture.

93
00:06:37,890 --> 00:06:43,590
Donc, au niveau d'une petite, d'un petit
programme de test, on attend un

94
00:06:43,590 --> 00:06:49,022
caractère, if serial available supérieur à
zéro,

95
00:06:49,022 --> 00:06:52,907
ça veut dire que il y a un caractère en
attente.

96
00:06:52,907 --> 00:06:58,938
On transfère dans la variable recu, et
puis, on peut s'amuser à faire un nom,

97
00:06:58,938 --> 00:07:02,282
un petit texte, euh, disant j'ai tapé, la

98
00:07:02,282 --> 00:07:05,816
valeur recu, et elle va apparaître en
décimal.

99
00:07:05,816 --> 00:07:11,445
Je peux dire, et bien, sa valeur en
hexadécimal, et bien, la voilà.

100
00:07:11,445 --> 00:07:14,115
Et puis, on va revenir pour

101
00:07:14,115 --> 00:07:19,226
imprimer le caractère suivant.
Alors, on a tapé un un, on a

102
00:07:19,226 --> 00:07:24,410
rentré ce programme.
Il faut avertir

103
00:07:24,410 --> 00:07:29,610
que cette lettre a été tapée, et puis on
va avoir le texte j'ai tapé,

104
00:07:29,610 --> 00:07:34,480
65 qui est le code ascii du A

105
00:07:34,480 --> 00:07:39,320
en décimal, ou zéro x 41 qui est le code

106
00:07:39,320 --> 00:07:45,184
ascii en hexadécimal de cette lettre A.
Donc, vous voyez que

107
00:07:45,184 --> 00:07:50,870
vous tapez une lettre, mais vous récupérez
le code de cette lettre.

108
00:07:50,870 --> 00:07:56,400
Ça peut être intéressant de récupérer un
nombre, et pour cela, il y a une fonction

109
00:07:56,400 --> 00:08:01,614
qui est mal documentée, peu connue, qui
est serial parselnt.

110
00:08:01,614 --> 00:08:04,610
Alors parsing, c'est faire une

111
00:08:04,610 --> 00:08:06,670
analyse syntaxique.

112
00:08:06,670 --> 00:08:10,982
Donc, ce programme va reconnaître
plusieurs caractères que vous

113
00:08:10,982 --> 00:08:14,080
tapez, il va lire les chiffres que vous
tapez.

114
00:08:14,080 --> 00:08:19,708
Vous tapez trois, vous tapez deux, vous
tapez sept, chaque fois le programme

115
00:08:19,708 --> 00:08:24,845
doit, euh, mettre ces chiffres ensemble et
calculer,

116
00:08:24,845 --> 00:08:29,460
dans le fond, une valeur décimale qui va
calculer en binaire, naturellement,

117
00:08:29,460 --> 00:08:34,112
euh, et puis préparer cette variable qui
sera transmise

118
00:08:34,112 --> 00:08:38,490
plus loin, au moment où vous tapez le
carriage return.

119
00:08:38,490 --> 00:08:46,828
Donc, euh, le type, alors, si on, si on
veut utiliser cette fonction, il faut

120
00:08:46,828 --> 00:08:53,240
d'abord, dans le programme, se préoccuper
à ce qu'un premier caractère arrive.

121
00:08:53,240 --> 00:08:55,360
Si ce premier caractère

122
00:08:55,360 --> 00:09:01,182
arrive, alors, la fonction serial parse va
atteindre tous

123
00:09:01,182 --> 00:09:06,716
les caractères jusqu'au carriage return,
jusqu'à la touche enter.

124
00:09:06,716 --> 00:09:10,543
Donc, on est dans un état bloqué, hein,
bloquant.

125
00:09:10,543 --> 00:09:16,678
Rien d'autre ne s'exécute au niveau de
votre microcontrôleur, sauf d'attendre que

126
00:09:16,678 --> 00:09:20,374
vous tapiez le carriage return, et si vous
le tapez pas, et bien,

127
00:09:20,374 --> 00:09:21,750
ça ne progressera pas.

128
00:09:21,750 --> 00:09:28,010
Alors, une fois que vous avez tapé le, le
retour de chariot, la touche enter,

129
00:09:28,010 --> 00:09:32,381
vous pourrez continuer dans le programme,
afficher la

130
00:09:32,381 --> 00:09:36,685
valeur qui apparaîtra en décimal,
l'afficher en hexadécimal.

131
00:09:36,685 --> 00:09:40,963
Donc, vous voyez, euh, le programme doit
faire quelque chose de

132
00:09:40,963 --> 00:09:45,630
compliqué pour fabriquer un nombre binaire
à partir de ce que vous

133
00:09:45,630 --> 00:09:46,530
avez tapé.

134
00:09:46,530 --> 00:09:53,305
Ensuite, ici, il doit le reconvertir en
décimal pour l'afficher, 327.

135
00:09:53,305 --> 00:10:00,140
Et puis, ici, il va le reprendre en
binaire, et puis, le

136
00:10:00,140 --> 00:10:07,470
convertir pour l'afficher, cette fois, en
hexadécimal, par tranches de quatre bits.

137
00:10:07,470 --> 00:10:11,012
Alors, voilà pour cette possibilité
d'affichage.

138
00:10:11,012 --> 00:10:13,400
On peut le, profiter de l'utiliser

139
00:10:13,400 --> 00:10:17,048
maintenant, pour comprendre les nombres
aléatoires.

140
00:10:17,048 --> 00:10:20,275
Alors, générer un nombre au hasard est
quelque chose

141
00:10:20,275 --> 00:10:23,173
qui n'est pas évident du point de vue
programmation.

142
00:10:23,173 --> 00:10:26,285
Il y a des algorithmes qui génèrent des
nombres, euh,

143
00:10:26,285 --> 00:10:31,850
successifs, mais un algorithme va toujours
calculer de la même façon.

144
00:10:31,850 --> 00:10:36,030
Donc, c'est comme un robot qui jouerait au
dés

145
00:10:36,030 --> 00:10:38,760
en partant d'un dé qui a toujours la

146
00:10:38,760 --> 00:10:41,593
même position et dans les mêmes conditions
physiques.

147
00:10:41,593 --> 00:10:43,387
Et bien, chaque fois qu'il lance le dé
avec le

148
00:10:43,387 --> 00:10:47,747
même programme, euh, le dé va donner
toujours la même valeur.

149
00:10:47,747 --> 00:10:52,750
Alors, au niveau d'Arduino, il y a une
fonction qui s'appelle random, type long,

150
00:10:52,750 --> 00:10:55,075
qui est très facile à utiliser, mais

151
00:10:55,075 --> 00:10:59,110
elle utilise de nouveau, quelque, quelque
1000 bytes.

152
00:10:59,110 --> 00:11:01,420
Vous pouvez écrire random, valeur

153
00:11:01,420 --> 00:11:02,113
maximum.

154
00:11:02,113 --> 00:11:06,594
Ça vous va, vous donner un nombre entre
zéro, et puis max moins un.

155
00:11:06,594 --> 00:11:09,714
C'est des nombres entiers, bien sûr, hein.

156
00:11:09,714 --> 00:11:15,560
Et puis, vous avez random entre deux
valeurs min et max, min et max moins un.

157
00:11:15,560 --> 00:11:18,200
Et comme petit exemple, pour être sûrs
qu'on a

158
00:11:18,200 --> 00:11:21,235
bien compris, et bien, on fait un
programme for.

159
00:11:21,235 --> 00:11:26,458
On va afficher 20 nombres successifs sur
l'écran, i de

160
00:11:26,458 --> 00:11:28,504
zéro à 20.

161
00:11:28,504 --> 00:11:34,490
On imprime la valeur aléatoire de zéro à
trois.

162
00:11:34,490 --> 00:11:40,370
On met un espace entre deux, et voilà ce
que ça donne, trois, un, un, et cetera.

163
00:11:40,370 --> 00:11:43,290
Euh, il faudrait faire une petite
statistique

164
00:11:43,290 --> 00:11:46,580
pour vérifier que l'aléatoire est, est
valable.

165
00:11:46,580 --> 00:11:51,990
Et on affiche un retour de chariot pour
préparer un avenir,

166
00:11:51,990 --> 00:11:56,192
et on attend avec le while 1, on ne fait
plus rien.

167
00:11:56,192 --> 00:12:01,090
Alors maintenant, si je presse sur la
touche reset, je vais afficher une

168
00:12:01,090 --> 00:12:06,935
deuxième ligne et j'obtiens exactement la
même séquence aléatoire

169
00:12:06,935 --> 00:12:12,500
puisque, euh, le programme s'exécutait à
partir de zéro.

170
00:12:12,500 --> 00:12:17,540
Il a appelé la routine qui est toujours la
même, qui part des paramètres

171
00:12:17,540 --> 00:12:18,510
par défaut.

172
00:12:18,510 --> 00:12:23,046
Donc, ça peut être assez gênant, dans
certaines applications,

173
00:12:23,046 --> 00:12:26,560
que le programme génère toujours les mêmes
séquences aléatoires.

174
00:12:26,560 --> 00:12:31,305
Alors, c'est pour ça qu'il y a une
fonction supplémentaire qui s'appelle

175
00:12:31,305 --> 00:12:37,300
random seed, qui va en fait modifier ces
conditions initiales.

176
00:12:37,300 --> 00:12:40,360
Mais évidemment, maintenant, vous avez un
paramètre, ici.

177
00:12:40,360 --> 00:12:42,808
Si vous mettez toujours le même, et bien,

178
00:12:42,808 --> 00:12:45,950
vous générerez toujours la même séquence
aléatoire.

179
00:12:45,950 --> 00:12:51,540
Donc ce qu'il faut, c'est arriver à
trouver quelque part un paramètre

180
00:12:51,540 --> 00:12:56,611
qui n'aura pas la même valeur, et, euh, la
solution,

181
00:12:56,611 --> 00:13:02,204
euh, utilisée, c'est de lire une entrée

182
00:13:02,204 --> 00:13:08,680
analogique et d'utiliser le fait que ces
entrées fluctuent,

183
00:13:08,680 --> 00:13:11,880
et ça va, euh, changer un tout petit peu,
dans

184
00:13:11,880 --> 00:13:17,540
le fond, cette, cette graine utilisée pour
démarrer les valeurs aléatoires.

185
00:13:17,540 --> 00:13:20,224
On pourrait aussi trouver un compteur,
mais il faut

186
00:13:20,224 --> 00:13:24,950
que ce compteur, effectivement, euh,
change d'une exécution à l'autre.

187
00:13:24,950 --> 00:13:29,237
Alors, en réutilisant ce même programme
avec random seed, et

188
00:13:29,237 --> 00:13:33,796
bien, vous voyez que chaque fois, la
séquence qui a

189
00:13:33,796 --> 00:13:37,847
démarré, euh, n'était pas la, n'est pas la

190
00:13:37,847 --> 00:13:43,411
même, et c'est l'intérêt de ce random
seed.

191
00:13:43,411 --> 00:13:46,790
Alors, un petit exemple avec un dé
électronique, hein.

192
00:13:46,790 --> 00:13:51,550
Euh, vous pouvez très facilement le
programmer en disant, et bien, voilà, si

193
00:13:51,550 --> 00:13:59,240
le poussoir est actif, on allume le dé
avec la valeur aléatoire de zéro à cinq.

194
00:13:59,240 --> 00:14:05,410
Cette, cette procédure allumeDe, euh, on
écrit quelque chose de très

195
00:14:05,410 --> 00:14:12,011
similaire en affichant les chiffres de ce
segment de zéro à 10.

196
00:14:12,011 --> 00:14:16,376
Donc, il suffit de ressortir le même genre
de table.

197
00:14:16,376 --> 00:14:20,140
Et puis, on attend une seconde pour
relâcher, relâcher la touche.

198
00:14:20,140 --> 00:14:24,820
Donc là, on, on fait vraiment le programme
le plus simple possible, on pourrait

199
00:14:24,820 --> 00:14:31,765
attendre que la touche soit relâchée pour
se préparer à afficher une autre valeur.

200
00:14:31,765 --> 00:14:34,214
Donc, si on maintient pressé, on va

201
00:14:34,214 --> 00:14:39,282
générer, toutes les secondes, un nouveau
nombre aléatoire.

202
00:14:39,282 --> 00:14:44,570
Alors, une variante que l'on utilise dans
ce dé, pour lequel

203
00:14:44,570 --> 00:14:50,198
vous avez un tout petit processeur, ici,
donc, on va pas charger une librairie

204
00:14:50,198 --> 00:14:56,408
de nombres aléatoires qui remplit la
moitié de la mémoire, c'est de dire, je

205
00:14:56,408 --> 00:15:02,400
compte à toute vitesse.
Dans une boucle, euh, je compte zéro,

206
00:15:02,400 --> 00:15:08,610
un, deux, trois, quatre, cinq, et cetera,
tant que je n'appuie pas sur le poussoir.

207
00:15:08,610 --> 00:15:15,120
Et au moment où j'appuie sur le poussoir,
je transmets la valeur,

208
00:15:15,120 --> 00:15:20,994
euh, à la routine allumeDe.
Et puis, je peux attendre un certain temps

209
00:15:20,994 --> 00:15:25,902
pour que l'on ait relâché le poussoir.
Donc while, ici,

210
00:15:25,902 --> 00:15:30,960
ça vous coûte, euh, une dizaine des bytes
en mémoire.

211
00:15:30,960 --> 00:15:35,664
Ici, ça vous en coûte quelque un millier,
et c'est clair

212
00:15:35,664 --> 00:15:40,574
que quand on programme en temps réel, on
se contente parfaitement

213
00:15:40,574 --> 00:15:46,735
de solutions aléatoires comme celle-là, où
l'aléatoire est généré par l'être humain

214
00:15:46,735 --> 00:15:53,250
qui n'est pas capable de, de répéter des
durées de pression, toujours les mêmes.

215
00:15:53,250 --> 00:15:55,801
Donc, on est certain d'avoir, ici,

216
00:15:55,801 --> 00:15:58,970
une distribution aléatoire tout à fait
correcte.

217
00:15:58,970 --> 00:16:02,200
Voilà, on vient de voir que le moniteur
série

218
00:16:02,200 --> 00:16:05,989
est très utile pour afficher des variables
et obtenir

219
00:16:05,989 --> 00:16:10,480
aussi des variables pour changer les
paramètres d'exécution.

220
00:16:10,480 --> 00:16:15,155
On a également vu que les nombres
aléatoires peuvent se générer de

221
00:16:15,155 --> 00:16:21,335
différentes façons, et ce qui compte c'est
de bien comprendre l'application et de

222
00:16:21,335 --> 00:16:27,600
choisir les bonnes facilités de
programmation.