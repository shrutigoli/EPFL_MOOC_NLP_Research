1
00:00:00,000 --> 00:00:01,332
Bonjour.

2
00:00:01,332 --> 00:00:08,000
On parle aujourd'hui de moteurs à courant
continu.

3
00:00:08,000 --> 00:00:11,498
On va décrire un peu leurs
caractéristiques, voir comment les

4
00:00:11,498 --> 00:00:15,236
commander avec des transistors ou avec des
ponts en H, parler

5
00:00:15,236 --> 00:00:20,215
du PWM, que vous connaissez probablement,
et détailler un

6
00:00:20,215 --> 00:00:25,260
petit peu le PFM, que personne ne connaît,
et que j'aime beaucoup.

7
00:00:25,260 --> 00:00:28,780
On dira aussi quelques mots des Servo de
télécommandes.

8
00:00:28,780 --> 00:00:34,612
Alors, des moteurs, vous en avez deux
catégories.

9
00:00:34,612 --> 00:00:39,460
Vous avez les moteurs utilisés par
l'industrie, vous avez ceux

10
00:00:39,460 --> 00:00:44,861
utilisés par les jouets, ceux-ci coûtent
40 francs,

11
00:00:44,861 --> 00:00:49,820
ceux-ci coûtent 40 centimes, et il n'y a
pas grand chose entre eux-deux.

12
00:00:49,820 --> 00:00:55,165
Notre but n'est pas de vous préparer à
faire des

13
00:00:55,165 --> 00:00:59,340
projets industriels sérieux, il faut
apprendre beaucoup plus de choses,

14
00:00:59,340 --> 00:01:04,085
et ça, bien comprendre les bons moteurs
avec leurs constantes

15
00:01:04,085 --> 00:01:07,630
de vitesse, leurs constantes de couple,
être capable de calculer.

16
00:01:07,630 --> 00:01:11,278
La compréhension générale du moteur avec
son

17
00:01:11,278 --> 00:01:15,460
principe, vous la trouvez facilement sur
le net.

18
00:01:15,460 --> 00:01:20,685
Cette courbe, ici, est quand même
intéressante à connaître.

19
00:01:20,685 --> 00:01:24,642
Quand le moteur est bloqué, vitesse nulle,
vous

20
00:01:24,642 --> 00:01:28,414
avez le courant maximum, et le couple
maximum.

21
00:01:28,414 --> 00:01:34,317
Si maintenant, vous lâchez l'effort, et
bien, le moteur va tourner plus vite,

22
00:01:34,317 --> 00:01:40,953
réduire son couple, réduire son courant,
et, théoriquement, pour un moteur parfait,

23
00:01:40,953 --> 00:01:45,838
vous avez la vitesse roue libre, dans
laquelle vous n'avez aucune

24
00:01:45,838 --> 00:01:51,360
consommation, le moteur tourne à la
vitesse maximale sans chute de tension.

25
00:01:51,360 --> 00:01:56,285
Alors, évidemment, les moteurs que l'on va
utiliser, ont du

26
00:01:56,285 --> 00:02:02,700
frottement, à cause des balais, ils ont de
mauvaises carac...

27
00:02:02,700 --> 00:02:06,304
Alors, j'ai de mauvaises caractéristiques
magnétiques, ça veut simplement

28
00:02:06,304 --> 00:02:12,015
dire que cette courbe théorique du moteur
va être un petit peu différente.

29
00:02:12,015 --> 00:02:17,199
Mais, ce qui nous gêne beaucoup, ce sont
les frottements, qui font qu'au

30
00:02:17,199 --> 00:02:22,310
démarrage, le moteur va avoir besoin d'une
tension non négligeable

31
00:02:22,310 --> 00:02:27,640
pour démarrer et se rapprocher de la
courbe idéale.

32
00:02:27,640 --> 00:02:31,462
De même, si vous augmentez la tension, et
bien,

33
00:02:31,462 --> 00:02:34,730
il va y avoir réchauffement et perte des
caractéristiques.

34
00:02:34,730 --> 00:02:39,820
Alors, tous les moteurs ont une tension
nominale, qui est bien

35
00:02:39,820 --> 00:02:44,400
définie, pour les moteurs industriels, en
liaison avec la durée de vie.

36
00:02:44,400 --> 00:02:46,794
Quand on joue avec ces moteurs bon marché,
et

37
00:02:46,794 --> 00:02:50,650
bien, souvent, on ne connaît pas très bien
leurs caractéristiques.

38
00:02:50,650 --> 00:02:56,628
On travaille à la tension qui nous
arrange, en fonction de

39
00:02:56,628 --> 00:03:02,990
la puissance nécessaire et de la vitesse
de rotation nécessaire.

40
00:03:02,990 --> 00:03:08,432
Si on a besoin de beaucoup plus de
puissance, on n'hésite pas à échauffer le

41
00:03:08,432 --> 00:03:15,010
moteur en le sur-alimentant, et en
réduisant nettement sa durée de vie.

42
00:03:15,010 --> 00:03:17,474
Il y a peu d'applications

43
00:03:17,474 --> 00:03:21,695
non-industrielles qui insistent pour avoir
des

44
00:03:21,695 --> 00:03:24,845
durées de vie de 100 000 heures, par
exemple.

45
00:03:24,845 --> 00:03:28,464
Si on a 10 heures, des fois, on est déjà
content.

46
00:03:28,464 --> 00:03:29,052
Bien.

47
00:03:29,052 --> 00:03:33,184
Alors, le paramètre qui est important,
c'est la

48
00:03:33,184 --> 00:03:36,919
résistance de la bobine, puisque la
résistance de la

49
00:03:36,919 --> 00:03:42,586
bobine va vous définir le courant de
court-circuit, le courant bloqué,

50
00:03:42,586 --> 00:03:47,990
en fait, donc, les caractéristiques des
amplificateurs

51
00:03:47,990 --> 00:03:49,120
de sortie.

52
00:03:49,120 --> 00:03:53,215
Ce qui nous intéresse aussi, cette tension
de

53
00:03:53,215 --> 00:03:56,229
démarrage, et, je dirais que c'est la
première

54
00:03:56,229 --> 00:03:58,049
chose à vérifier si vous ne connaissez pas

55
00:03:58,049 --> 00:04:00,530
le moteur, à quelle tension est-ce qu'il
démarre?

56
00:04:00,530 --> 00:04:05,358
Ensuite, si vous mettez la tension que
vous avez envie, avec laquelle vous avez

57
00:04:05,358 --> 00:04:12,330
envie de travailler, vous le bloquez,
est-ce que l'échauffement est rapide?

58
00:04:12,330 --> 00:04:13,232
Auquel cas,

59
00:04:13,232 --> 00:04:16,930
c'est certainement le signe qu'il est
survolté.

60
00:04:16,930 --> 00:04:22,570
Pour commander un moteur, si c'est en
tout-ou-rien unidirectionnel,

61
00:04:22,570 --> 00:04:27,975
vous utilisez un transistor, qui commande
les bobines

62
00:04:27,975 --> 00:04:33,167
via les balais, et c'est essentiel de
mettre une diode de récupération.

63
00:04:33,167 --> 00:04:37,090
Qu'est-ce qu'il se passe au moment où vous
coupez le courant?

64
00:04:37,090 --> 00:04:38,050
La bobine,

65
00:04:38,050 --> 00:04:44,523
l'inertie des électrons dans la bobine, va
faire monter la tension ici, c'est

66
00:04:44,523 --> 00:04:47,681
le principe des bobines de Ruhmkorff qui

67
00:04:47,681 --> 00:04:51,610
permettent de générer des très hautes
tensions.

68
00:04:51,610 --> 00:04:55,087
Et ce n'est pas favorable, dans le fond,
pour les transistors, que la

69
00:04:55,087 --> 00:04:59,270
tension tout à coup, monte à 20-50 Volts,
même pendant un instant très faible.

70
00:04:59,270 --> 00:05:03,645
Donc, ce qu'on fait, c'est que ce courant
qui tend à aller vers le transistor,

71
00:05:03,645 --> 00:05:08,902
on le court-circuite par une diode, dite
diode

72
00:05:08,902 --> 00:05:13,900
de roue libre, diode de protection.
Alors, cette diode,

73
00:05:13,900 --> 00:05:18,901
on peut aussi la mettre (oh, je l'ai
tournée à l'envers, j'ai

74
00:05:18,901 --> 00:05:23,874
été distrait), on peut aussi la mettre du
côté du transistor, et

75
00:05:23,874 --> 00:05:29,520
l'intérêt de cette solution, c'est que les
transistors

76
00:05:29,520 --> 00:05:38,790
de puissance contiennent cette diode et
vous n'avez pas de souci de câblage.

77
00:05:38,790 --> 00:05:43,754
Maintenant, si vous travaillez avec des
moteurs à faible consommation, est-ce que

78
00:05:43,754 --> 00:05:51,330
vous pouvez les brancher directement sur
votre processeur, sans amplificateur?

79
00:05:51,330 --> 00:05:54,636
Oui, partiellement à vos risques

80
00:05:54,636 --> 00:05:58,894
et périls.
Ce sont de très petits moteurs qui ont une

81
00:05:58,894 --> 00:06:03,790
inductance très faible et surtout une
résistance de 30 Ohm.

82
00:06:03,790 --> 00:06:09,278
C'est connu que sur les sorties d'un
microcontrôleur,

83
00:06:09,278 --> 00:06:14,442
on peut demander 30 mA, et mon expérience
montre que si

84
00:06:14,442 --> 00:06:19,845
c'est en dessus de 30 Ohm, on n'a pas de
problèmes, même avec les

85
00:06:19,845 --> 00:06:24,665
surtensions qui sont dégagées au niveau de
la commutation.

86
00:06:24,665 --> 00:06:27,140
Voilà ce que j'ai observé.

87
00:06:27,140 --> 00:06:30,992
La tension ne descend pas à 0, ne monte
pas

88
00:06:30,992 --> 00:06:36,610
à 5 Volts à cause de la résistance interne
des amplis.

89
00:06:36,610 --> 00:06:41,068
Donc, là c'est avec une période de 1 ms,
le

90
00:06:41,068 --> 00:06:45,130
courant continue un petit peu à monter,
pour se stabiliser plus

91
00:06:45,130 --> 00:06:50,222
loin, et voilà ce qui me semble réaliste.
Alors, faites attention, les

92
00:06:50,222 --> 00:06:55,870
moteurs dits solaires ont une résistance
plus élevée, et sont parfois

93
00:06:55,870 --> 00:07:01,800
utilisables aussi pour éviter de gaspiller
des piles ou du courant.

94
00:07:01,800 --> 00:07:06,850
Mais leur résistance est quand même
rarement supérieure à 30 Ohm.

95
00:07:06,850 --> 00:07:11,405
Bien, le PWM,

96
00:07:11,405 --> 00:07:16,400
donc, vous connaissez le principe, on fait
des impulsions de largeur variable, avec

97
00:07:16,400 --> 00:07:21,028
une fréquence qui est connue.
C'est dans les

98
00:07:21,028 --> 00:07:26,226
500 Hertz pour avoir quelque chose qui ne
charge

99
00:07:26,226 --> 00:07:30,830
pas trop le processeur et puis, qui est
acceptable.

100
00:07:30,830 --> 00:07:36,474
Industriellement, on demande du 20 kHz,
voir plus, pour qu'il n'y ait pas

101
00:07:36,474 --> 00:07:41,312
un effet audible.
Alors, c'est clair qu'autour de 5 à 10

102
00:07:41,312 --> 00:07:46,845
kHz, le moteur chante et c'est
relativement désagréable.

103
00:07:46,845 --> 00:07:51,549
Alors, le PWM, tel qu'il est proposé par
Arduino, avec

104
00:07:51,549 --> 00:07:56,882
l'analogWrite, c'est parfait pour des LED,
c'est bon pour

105
00:07:56,882 --> 00:08:01,880
les bons moteurs.
Le problème, pour les mauvais

106
00:08:01,880 --> 00:08:04,936
moteurs, je l'explique tout à l'heure.

107
00:08:04,936 --> 00:08:09,993
Et l'autre problème avec Arduino, c'est
que ce PWM est disponible sur

108
00:08:09,993 --> 00:08:15,156
un certain nombre de pins, un peu plus si
vous achetez un processeur plus

109
00:08:15,156 --> 00:08:20,212
performant, un peu plus si vous avez une
routine qui simule les canaux PWM en

110
00:08:20,212 --> 00:08:25,390
baissant un petit peu la fréquence, mais
c'est quand même assez limitatif.

111
00:08:25,390 --> 00:08:26,930
Mais c'est relativement

112
00:08:26,930 --> 00:08:30,550
bien documenté, et c'est pour ça que tout
le monde le fait.

113
00:08:30,550 --> 00:08:33,652
Alors, un des problèmes apporté par le

114
00:08:33,652 --> 00:08:37,710
PWM, si vous n'avez pas suffisamment de
canaux,

115
00:08:37,710 --> 00:08:40,498
il faut d'abord que j'explique dans le

116
00:08:40,498 --> 00:08:44,900
fond, comment on commande les moteurs en
bi-directionnel.

117
00:08:44,900 --> 00:08:48,300
Donc, vous avez des motor driver, on va

118
00:08:48,300 --> 00:08:52,165
un peu s'amuser à mettre des transistors,
quatre transistors

119
00:08:52,165 --> 00:08:54,550
pour commander un moteur dans les deux
sens.

120
00:08:54,550 --> 00:09:00,795
Ces motor driver ont une tension d'entrée
qui est celle du processeur.

121
00:09:00,795 --> 00:09:06,276
Ils ont parfois une entrée spécifique de
puissance, avec une tension plus

122
00:09:06,276 --> 00:09:11,465
élevée, pour commander les moteurs.

123
00:09:11,465 --> 00:09:14,691
Il y en a qui sont dans des grands
boîtiers avec plusieurs pin

124
00:09:14,691 --> 00:09:18,030
de contrôle, même s'il n'y a qu'un moteur
qui va être connecté là-dessus.

125
00:09:18,030 --> 00:09:23,815
Il y en a qui sont dans des tout petits
boîtiers avec naturellement du

126
00:09:23,815 --> 00:09:29,876
courant nettement plus faible, mais par
contre, des tensions beaucoup plus basses.

127
00:09:29,876 --> 00:09:32,560
Celui-ci travaille encore à 2 Volts.

128
00:09:32,560 --> 00:09:37,630
Bien, la question importante maintenant
c'est: on a deux

129
00:09:37,630 --> 00:09:43,176
entrées, on a deux sorties, je peux faire
la table de vérité,

130
00:09:43,176 --> 00:09:46,540
0, 0, tout naturellement, le moteur sera
arrêté.

131
00:09:46,540 --> 00:09:49,920
0,1 il tourne dans un sens, 1,0 il tourne
dans l'autre sens.

132
00:09:49,920 --> 00:09:55,220
1,1, quelle est la fonctionnalité?

133
00:09:55,220 --> 00:09:58,864
Là, il faut savoir que un moteur

134
00:09:58,864 --> 00:10:02,680
courant continu, vous pouvez facilement
faire l'expérience.

135
00:10:02,680 --> 00:10:08,170
Il a un mode court-circuité et il a un
mode roue libre.

136
00:10:08,170 --> 00:10:14,836
Si vous reliez l'entrée et les deux pin
d'un moteur ensemble, vous voyez que vous

137
00:10:14,836 --> 00:10:17,674
avez relativement de la peine à tourner

138
00:10:17,674 --> 00:10:20,715
l'axe parce que dès que vous tournez
l'axe,

139
00:10:20,715 --> 00:10:23,058
vous générez une force, quant à elle,

140
00:10:23,058 --> 00:10:27,780
électromotrice qui va générer un couple de
freinage,

141
00:10:27,780 --> 00:10:30,420
et effectivement, si vous tournez à la

142
00:10:30,420 --> 00:10:33,380
vitesse prévue par le moteur, vous avez
une

143
00:10:33,380 --> 00:10:38,700
génératrice qui vous transforme le couple
que vous avez fourni en courant.

144
00:10:38,700 --> 00:10:43,485
Par contre, si maintenant vous laissez les
deux pin ouvertes, et bien, il

145
00:10:43,485 --> 00:10:47,170
n'y a pas de courant qui peut s'établir,
votre moteur va tourner librement.

146
00:10:47,170 --> 00:10:52,630
Alors, cette fonction de moteur libre,
vous la trouvez dans certains

147
00:10:52,630 --> 00:10:58,448
circuits, et d'autres circuits, on vous
bloque, pour cette combinaison un,

148
00:10:58,448 --> 00:11:02,550
et voilà, il faut vivre avec.

149
00:11:02,550 --> 00:11:06,380
Donc, quelle est la conséquence
importante?

150
00:11:06,380 --> 00:11:09,708
Si vous ne travaillez jamais avec cette
combinaison, et bien

151
00:11:09,708 --> 00:11:13,282
vous ne verrez pas la différence entre les
deux interfaces.

152
00:11:13,282 --> 00:11:18,528
Mais maintenant, si vous voulez faire du
PWM bi-directionnel, aller

153
00:11:18,528 --> 00:11:23,484
dans les deux sens, vous avez la solution
facile, qui est de

154
00:11:23,484 --> 00:11:26,536
dire, j'envoie mon PWM sur un canal pour

155
00:11:26,536 --> 00:11:30,345
aller dans un sens, j'envoie le PWM sur
l'autre

156
00:11:30,345 --> 00:11:36,970
canal pour aller dans l'autre sens, et je
me pose toujours un In qui est à zéro.

157
00:11:36,970 --> 00:11:41,002
Donc, la routine pour aller dans un sens,

158
00:11:41,002 --> 00:11:44,740
d'un côté on met la vitesse PWM, de
l'autre

159
00:11:44,740 --> 00:11:48,700
côté on met zéro, et puis pour reculer, on
permute les deux, mais ça veut dire qu'il

160
00:11:48,700 --> 00:11:54,967
vous faut deux canons PWM, et on vient de
voir qu'ils sont plutôt rares.

161
00:11:54,967 --> 00:11:59,847
Si j'ai deux moteurs, ça fait quatre
canons PWM, qui sont

162
00:11:59,847 --> 00:12:03,550
répartis à travers la carte, ok, ça peut
être une solution.

163
00:12:03,550 --> 00:12:08,388
Alors, une solution qui semble avoir été
prévue

164
00:12:08,388 --> 00:12:13,766
puisque les deux pin PWN, trois et quatre,
sont côte à côte avec des pin

165
00:12:13,766 --> 00:12:18,318
de réserve à côté, c'est de dire:
j'utilise qu'un seul canal PWM, et

166
00:12:18,318 --> 00:12:24,250
maintenant je fais une astuce pour tourner
dans l'autre sens, je mets un

167
00:12:24,250 --> 00:12:30,270
un de l'autre côté, et j'inverse la valeur
PWM.

168
00:12:30,270 --> 00:12:34,680
Donc là, je veux les 25% PWM, ok, c'est
clair.

169
00:12:34,680 --> 00:12:38,915
On aura, 25% du temps, le courant qui
passe comme ça.

170
00:12:38,915 --> 00:12:43,998
Maintenant, j'aimerais toujours 25% de
PWM, c'est le

171
00:12:43,998 --> 00:12:48,972
zéro qui va être actif qui va faire passer
le courant dans

172
00:12:48,972 --> 00:12:54,226
l'autre sens.
Donc, mon moteur tournera avec 25%

173
00:12:54,226 --> 00:12:59,253
de PWM, en ayant écrit que sur l'autre

174
00:12:59,253 --> 00:13:03,927
pin maintenant, j'ai du HIGH, et sur ma
pin

175
00:13:03,927 --> 00:13:08,700
PWM j'ai 256 moins la vitesse.

176
00:13:08,700 --> 00:13:13,900
Alors, pourquoi est-ce que c'est lié à ce
qu'on vient de dire avant?

177
00:13:13,900 --> 00:13:18,976
Si j'ai du PWM 25%, dans le cas où,

178
00:13:18,976 --> 00:13:23,756
justement, j'ai la roue libre, et bien,

179
00:13:23,756 --> 00:13:29,446
j'ai 25% on et puis, puisque j'aurai zéro,
de chaque

180
00:13:29,446 --> 00:13:33,550
côté je suis bloqué.
Donc, j'aurai 75% bloqué.

181
00:13:33,550 --> 00:13:38,730
Si maintenant je demande moins 25%, donc
dans l'autre sens,

182
00:13:38,730 --> 00:13:44,416
j'ai 25% on, donc

183
00:13:44,416 --> 00:13:49,944
je suis à zéro ici, et j'ai 75% avec

184
00:13:49,944 --> 00:13:56,450
l'état en un, donc 75% roue libre.

185
00:13:56,450 --> 00:14:00,870
Alors, le moteur qui alterne des phases

186
00:14:00,870 --> 00:14:06,400
d'activité et de blocage, ou d'activité et
de roue

187
00:14:06,400 --> 00:14:11,790
libre, ne va naturellement pas tourner à
la même vitesse moyenne.

188
00:14:11,790 --> 00:14:16,878
Donc, votre go maintenant, pour le même
PWM, il n'aura

189
00:14:16,878 --> 00:14:21,938
pas du tout la même vitesse en avant, ou
en arrière, à vous de le compenser.

190
00:14:21,938 --> 00:14:25,790
Vous avez économisé quelque part, vous
perdez ailleurs.

191
00:14:25,790 --> 00:14:30,233
Alors évidemment, moi mon approche c'est
de dire: tant

192
00:14:30,233 --> 00:14:33,382
pis pour ces PWM, je vais les programmer
moi-même, je

193
00:14:33,382 --> 00:14:36,480
vais pouvoir les avoir sur les pin que je
veux,

194
00:14:36,480 --> 00:14:40,792
et programmer le PWM peut se faire de
différentes façons.

195
00:14:40,792 --> 00:14:46,970
Il y a la méthode naïve, je dirais, où on
fait un certain délai à

196
00:14:46,970 --> 00:14:51,140
l'état un, ensuite, un autre délai à
l'état zéro.

197
00:14:51,140 --> 00:14:56,768
Si la somme des délais, on aura toujours
la même fréquence, donc délai, délai

198
00:14:56,768 --> 00:15:02,180
complémentaire, et vous pouvez programmer
votre PWM et jouer avec ça, et vous

199
00:15:02,180 --> 00:15:07,150
aurez évidemment, déjà, peine à faire
autre chose en même temps, parce que c'est

200
00:15:07,150 --> 00:15:09,454
des programmes, dès que vous avez des

201
00:15:09,454 --> 00:15:12,064
délais, c'est des programmes qui sont
bloquants.

202
00:15:12,064 --> 00:15:14,957
Alors, cherchons une solution non
bloquante.

203
00:15:14,957 --> 00:15:19,668
C'est-à-dire qu'on va appeler une
procédure PWM toutes

204
00:15:19,668 --> 00:15:23,581
les 100 microsecondes, mais on va la
quitter le

205
00:15:23,581 --> 00:15:29,126
plus rapidement possible, pour avoir
encore 90 microsecondes

206
00:15:29,126 --> 00:15:34,580
à faire régulièrement, donc aucune des
tâches ne sera bloquée.

207
00:15:34,580 --> 00:15:37,154
Et en fait, plus de 10,

208
00:15:37,154 --> 00:15:42,282
20 microsecondes, dans le cas pire.
Alors,

209
00:15:42,282 --> 00:15:47,562
là, je dessine un escalier avec peut-être
16, mais je prends

210
00:15:47,562 --> 00:15:52,796
l'exemple avec 32, pas, donc je définis
une

211
00:15:52,796 --> 00:15:58,040
valeur maximum, qui est ici 32, on va voir
pourquoi.

212
00:15:58,040 --> 00:16:02,220
Pourquoi?
Parce que ça ne sert à rien d'avoir

213
00:16:02,220 --> 00:16:07,375
une finesse de pas de 256, alors qu'on ne

214
00:16:07,375 --> 00:16:12,280
se rend pas du tout compte d'un changement
de vitesse de quelques pour cent.

215
00:16:12,280 --> 00:16:16,979
Donc, avec 1/32ème, on a 3% de

216
00:16:16,979 --> 00:16:22,150
différence de vitesse entre chaque pas,
c'est bien assez pour toutes

217
00:16:22,150 --> 00:16:27,260
les applications que je connais.
Alors, on fixe un maximum de 32 pas.

218
00:16:27,260 --> 00:16:29,906
Vous voulez absolument travailler avec
256?

219
00:16:29,906 --> 00:16:33,434
Vous n'avez qu'à diviser par 8 chaque
fois, vous réfléchissez

220
00:16:33,434 --> 00:16:37,470
256, vous divisez par 8, et vous utilisez
ma routine simplifiée.

221
00:16:37,470 --> 00:16:45,865
Alors, la routine Do PWM, qui, comme c'est
une routine, il y a un paramètre local

222
00:16:45,865 --> 00:16:48,241
que j'ai appelé ici pp, et puis, dans

223
00:16:48,241 --> 00:16:51,380
le programme principal, on aura la
variable PWM.

224
00:16:51,380 --> 00:16:52,670
Il y a un

225
00:16:52,670 --> 00:16:58,120
petit byte i qui va être utilisé pour
faire un compteur.

226
00:16:58,120 --> 00:17:02,460
Le terme de "volatile", je l'explique un
petit peu plus loin.

227
00:17:02,460 --> 00:17:10,188
Alors, j'incrémente le compteur i, je fais
mes hémi tranches d'escalier, si i est

228
00:17:10,188 --> 00:17:17,160
égal à maximum PWM, je suis arrivé en
haut, je remets à zéro.

229
00:17:17,160 --> 00:17:22,150
Mais i égale max PWM, i égale zéro,

230
00:17:22,150 --> 00:17:26,230
si c'est identique, vous vous souvenez,
égal égal.

231
00:17:26,230 --> 00:17:31,536
Et puis, maintenant, je fais encore une
autre comparaison, c'est de dire, si

232
00:17:31,536 --> 00:17:36,629
i est inférieur à pp, donc dans toutes ces

233
00:17:36,629 --> 00:17:42,177
zones, j'active le PWM, et puis ici,
naturellement, je ne vais pas

234
00:17:42,177 --> 00:17:46,364
l'activer, else (LedOff).
Alors, voilà ma routine PWM, qui

235
00:17:46,364 --> 00:17:50,870
utilise très peu d'instructions, très peu
de microsecondes, beaucoup moins

236
00:17:50,870 --> 00:17:55,205
que le digitalWrite.
Dans le programme principal, je peux

237
00:17:55,205 --> 00:18:01,440
tester avec PWM égale sept, je dois
insérer cette routine

238
00:18:01,440 --> 00:18:07,370
Do PWM, dans une boucle qui se répète pour
les 100 microsecondes, mais il

239
00:18:07,370 --> 00:18:12,647
me reste ici 90 microsecondes, pour faire

240
00:18:12,647 --> 00:18:17,586
autre chose.
Alors, maintenant, j'ai

241
00:18:17,586 --> 00:18:22,518
cette routine.
Il faut naturellement la tester, avec la

242
00:18:22,518 --> 00:18:27,486
valeur zéro, la valeur un, la valeur 31,
la valeur

243
00:18:27,486 --> 00:18:32,389
32, pour vérifier, parce que c'est souvent
dans des

244
00:18:32,389 --> 00:18:38,436
conditions limites que l'on a les erreurs.

245
00:18:38,436 --> 00:18:43,406
Bien.
Alors parlons du PFM maintenant.

246
00:18:43,406 --> 00:18:47,860
le PFM, ce qu'on veut c'est que, en
moyenne, le

247
00:18:47,860 --> 00:18:52,896
processeur ait une quantité d'énergie dont
on a défini le pourcentage.

248
00:18:52,896 --> 00:18:55,880
Cette quantité d'énergie va fixer la
vitesse.

249
00:18:55,880 --> 00:18:57,446
Alors, avec le PWM, on fait des

250
00:18:57,446 --> 00:19:00,354
impulsions plus ou moins longues, avec le
PFM,

251
00:19:00,354 --> 00:19:04,850
on fait des impulsions plus ou moins
rapprochées.

252
00:19:04,850 --> 00:19:08,194
Alors, ici, il y a une impulsion de temps
en temps.

253
00:19:08,194 --> 00:19:12,990
Là, il y a, parfois, plusieurs impulsions
qui se suivent, donc en fait, si on

254
00:19:12,990 --> 00:19:18,020
observe à l'oscilloscope, c'est que les
creux, la quantité de creux,

255
00:19:18,020 --> 00:19:23,430
diminuent, et on est de nouveau dans une
période donnée.

256
00:19:23,430 --> 00:19:26,980
Alors, l'intérêt de ça pour des mauvais
moteurs, je vous

257
00:19:26,980 --> 00:19:31,246
rappelle ce problème qu'on avait avec la
tension de démarrage, avec

258
00:19:31,246 --> 00:19:35,026
le PWM, tant que vous êtes dans cette
zone, le moteur

259
00:19:35,026 --> 00:19:39,540
ne démarre pas, et un moteur bon marché,
surtout les moteurs.

260
00:19:39,540 --> 00:19:48,236
pager de 4-6 mm, ont besoin de 30 à 40% de
PWM pour démarrer.

261
00:19:48,236 --> 00:19:53,510
Donc l'idée, c'est de dire: mais, on fait
démarrer le moteur

262
00:19:53,510 --> 00:19:58,370
avec une tension suffisante, mais on
l'arrête tout de suite.

263
00:19:58,370 --> 00:20:04,469
Donc, on envoie au moteur Des impulsions
qui suffisent à le faire

264
00:20:04,469 --> 00:20:11,390
démarrer mais qui ne vont pas le lancer,
il va s’arrêter tout de suite après.

265
00:20:11,390 --> 00:20:13,766
Alors c’est évident que si les impulsions

266
00:20:13,766 --> 00:20:17,792
de démarrage se rapprochent et bien le
moteur va prendre de plus en plus de

267
00:20:17,792 --> 00:20:22,884
vitesse.
Donc, voilà le

268
00:20:22,884 --> 00:20:28,220
grand principe, dans le fond, du PFM.
L’ennui du

269
00:20:28,220 --> 00:20:33,480
PFM, c’est que, si vous voulez avoir, ici,

270
00:20:33,480 --> 00:20:39,028
quelque chose qui tourne très lentement,
étant donné que

271
00:20:39,028 --> 00:20:46,462
cette impulsion dure, au minimum, 2, 4, 8
millisecondes, pour des gros

272
00:20:46,462 --> 00:20:53,510
moteurs, cette impulsion, dans le fond, si
vous voulez qu’elle se produise une fois

273
00:20:53,510 --> 00:20:59,267
sur 10, donc vous aurez 10 pourcent de
PFM, et bien ça vous donne

274
00:20:59,267 --> 00:21:04,570
une période de 40 millisecondes, donc vous
aurez du rafraîchissement à 25 Hertz.

275
00:21:04,570 --> 00:21:10,004
Et maintenant, si vous voulez 1 pourcent,
vous aurez du rafraîchissement à 2,5 Hertz

276
00:21:10,004 --> 00:21:17,225
donc c’est 2 et demi fois par seconde que
le moteur va faire un petit crochet.

277
00:21:17,225 --> 00:21:20,233
Mais évidemment, vous n’avez pas de
limites, si vous

278
00:21:20,233 --> 00:21:23,800
voulez qu’il fasse une petite impulsion
tous les jours

279
00:21:23,800 --> 00:21:26,670
et bien il fera, il avancera une petit peu

280
00:21:26,670 --> 00:21:29,586
tous les jours, et c'est pas incompatible
avec ce

281
00:21:29,586 --> 00:21:33,530
concept de PFM alors que vous n’avez aucun
espoir avec le PWM de faire tourner des

282
00:21:33,530 --> 00:21:38,280
moteurs extrêmement lentement.
Avoir, voilà pour vous

283
00:21:38,280 --> 00:21:43,828
convaincre, le robot reçoit des impulsions

284
00:21:43,828 --> 00:21:49,172
de 1 par rapport à 256, il accélère avec

285
00:21:49,172 --> 00:21:54,610
10, et le mouvement est beaucoup plus
régulier, et, dès que vous mettez

286
00:21:54,610 --> 00:21:56,910
la vitesse maximum, naturellement, il
part.

287
00:21:56,910 --> 00:21:57,696
Bien.

288
00:21:57,696 --> 00:22:01,240
Comment faire une routine PFM?

289
00:22:01,240 --> 00:22:03,928
On va un petit peu s’inspirer de ce que

290
00:22:03,928 --> 00:22:07,240
l’on a dit tout à l’heure mais notre
escalier

291
00:22:07,240 --> 00:22:10,828
n’aura pas des marches régulières, on va
ajouter la

292
00:22:10,828 --> 00:22:13,720
valeur « pfm » pour définir la hauteur des
marches.

293
00:22:13,720 --> 00:22:19,641
Donc si « pfm » est lent, vous aurez

294
00:22:19,641 --> 00:22:23,910
quelque chose qui mettra longtemps à
monter.

295
00:22:23,910 --> 00:22:29,136
Si le « pfm » augmente, la rampe est plus
grande, et

296
00:22:29,136 --> 00:22:33,735
chaque fois que vous arrivez au maximum,
de 255, mais vous pouvez très

297
00:22:33,735 --> 00:22:38,705
bien définir d’autres valeurs, qui vont
définir la résolution, dans le

298
00:22:38,705 --> 00:22:43,900
fond, du « pfm », et bien vous remettez à
0 et vous recommencez.

299
00:22:43,900 --> 00:22:44,945
Donc voilà,

300
00:22:44,945 --> 00:22:49,175
on n’arrive pas à simuler ces cas parce on
ne change pas de

301
00:22:49,175 --> 00:22:53,711
valeur « pfm » sans arrêt, enfin, à chaque
cycle, on exécute en général

302
00:22:53,711 --> 00:22:56,690
plusieurs cycles puisqu’on a, ici,
quelques

303
00:22:56,690 --> 00:22:59,615
dixièmes, centièmes de secondes, mais si
on

304
00:22:59,615 --> 00:23:05,840
avait changé à chaque cycle, et bien, on
verrait les impulsions qui se rapprochent.

305
00:23:05,840 --> 00:23:09,980
Alors, il nous faut avoir une variable
globale qui est

306
00:23:09,980 --> 00:23:14,456
la valeur du « pfm », on va décider 200
comme premier

307
00:23:14,456 --> 00:23:18,990
test, et on a choisi une valeur de 255
comme maximum.

308
00:23:18,990 --> 00:23:23,445
On doit définir une variable locale

309
00:23:23,445 --> 00:23:27,900
« int pfm » qui vaut 0.
Donc là, je suis dans un programme.

310
00:23:27,900 --> 00:23:35,090
Et puis maintenant, je peux définir la
durée des

311
00:23:35,090 --> 00:23:40,192
impulsions avec ce « DelPfm » que je fixe
à 4 millisecondes.

312
00:23:40,192 --> 00:23:44,240
J’aime pas tellement avoir des chiffres
dans les programmes.

313
00:23:44,240 --> 00:23:49,634
Et maintenant, je pars dans ma boucle de
test, je fais mon délai de 4

314
00:23:49,634 --> 00:23:55,195
millisecondes, j’incrémente le compteur de

315
00:23:55,195 --> 00:24:00,630
la valeur du « pfm ».
Je regarde

316
00:24:00,630 --> 00:24:05,978
si cela dépasse 255, si oui, je

317
00:24:05,978 --> 00:24:12,152
remets à 0, et là, il y a avantage à faire
un « et logique

318
00:24:12,152 --> 00:24:19,270
» plutôt que de forcer un 0, et dans ce
cas-là, et bien, j’active l’impulsion

319
00:24:19,270 --> 00:24:25,304
qui va, le coup suivant, être remise,

320
00:24:25,304 --> 00:24:30,316
nécessairement à 0.
Voilà la routine PFM, j’en

321
00:24:30,316 --> 00:24:35,445
ai fait une procédure, j’ai appelé cette
procédure

322
00:24:35,445 --> 00:24:40,728
1000 fois avec la valeur 1 pour avoir le
déplacement lent.

323
00:24:40,728 --> 00:24:45,432
Et puis, ensuite, j’ai changé la valeur «
pfm » et j’ai modifié

324
00:24:45,432 --> 00:24:50,652
le nombre de fois, la durée, dans le fond,
d’avance sur rebords, et j’aurais

325
00:24:50,652 --> 00:24:54,150
très bien pu faire d’autres choses en même
temps, surveiller

326
00:24:54,150 --> 00:24:58,859
les moustaches, par exemple, et agir et
modifier la vitesse.

327
00:24:58,859 --> 00:25:04,100
Bien, deux mots à propos du PPM que vous
trouvez dans les cerveaux de télécommande.

328
00:25:04,100 --> 00:25:10,140
« Pulse Position Modulation », en fait ce
terme de position

329
00:25:10,140 --> 00:25:16,268
se réfère à la possibilité d’avoir
d’autres cerveaux qui vont se superposer

330
00:25:16,268 --> 00:25:21,779
dans cette trame de 20 millisecondes.
Et puis la position de ces impulsions

331
00:25:21,779 --> 00:25:28,355
supplémentaires, va permettre de
transmettre l’information.

332
00:25:28,355 --> 00:25:33,538
Alors au niveau de chaque impulsion, vous
savez que vous avez une impulsion entre 1

333
00:25:33,538 --> 00:25:39,330
et 2 millisecondes, que la période de
répétition est autour de 20 millisecondes.

334
00:25:39,330 --> 00:25:41,270
Et maintenant, c’est trivial

335
00:25:41,270 --> 00:25:46,200
de programmer, d’ajuster votre durée

336
00:25:46,200 --> 00:25:50,410
d’impulsion aux angles qui vous
intéressent.

337
00:25:50,410 --> 00:25:54,384
Alors, j’ai dit que c’est délicat à
programmer parce que, en fait, si, là,

338
00:25:54,384 --> 00:25:59,386
vous êtes dans une procédure bloquante, ce
que je viens d’évoquer, et puis,

339
00:25:59,386 --> 00:26:06,320
évidemment, si vous voulez maintenant
avoir plusieurs cerveaux,

340
00:26:06,320 --> 00:26:11,270
faire une procédure dans laquelle vous
répétez pour chaque

341
00:26:11,270 --> 00:26:16,367
cerveau, une précision de, mettons, 10
microsecondes pour avoir

342
00:26:16,367 --> 00:26:20,976
1 degré de précision, c’est relativement
délicat à programmer,

343
00:26:20,976 --> 00:26:24,680
surtout si vous voulez faire d’autres
choses en parallèle.

344
00:26:24,680 --> 00:26:27,673
Alors, il existe une librairie « Arduino »
qui

345
00:26:27,673 --> 00:26:31,422
utilise le « timer 1 », donc, je n’ai pas

346
00:26:31,422 --> 00:26:34,655
testé mais je pense que ça ne vaut pas

347
00:26:34,655 --> 00:26:40,358
la peine d'essayer de faire mieux pour
commander plusieurs cerveaux.

348
00:26:40,358 --> 00:26:43,841
Bien, alors voilà, nous avons un petit peu
parlé de

349
00:26:43,841 --> 00:26:47,424
PWM, de PFM, mis en évidence la
différence, un petit

350
00:26:47,424 --> 00:26:51,414
mieux compris ce qu’on peut faire avec des
moteurs, et

351
00:26:51,414 --> 00:26:56,484
puis, mentionné les cerveaux qui sont
tellement faciles à utiliser,

352
00:26:56,484 --> 00:26:59,000
qu’il n’y a pas grand-chose à en dire.