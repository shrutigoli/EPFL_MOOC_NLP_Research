1
00:00:06,920 --> 00:00:12,095
Bonjour, l'environnement Arduino, il faut
le reconnaître, est génial pour débuter

2
00:00:12,095 --> 00:00:18,760
avec les microcontrôleurs, c'est simple à
utiliser, c'est pratique.

3
00:00:18,760 --> 00:00:21,660
Toutefois, lorsqu'on a un tout petit peu
plus d'expérience, on a

4
00:00:21,660 --> 00:00:24,910
souvent envie de passer à des programmes
qu'on écrit intégralement en C.

5
00:00:24,910 --> 00:00:26,810
Et alors, il se pose quelques

6
00:00:26,810 --> 00:00:31,230
difficultés que j'aimerais essayer
d'expliquer aujourd'hui.

7
00:00:31,230 --> 00:00:33,792
Tout d'abord, j'aimerais vous rappeler que
le

8
00:00:33,792 --> 00:00:35,988
mot Arduino a en fait trois significations

9
00:00:35,988 --> 00:00:39,471
assez différentes : Premièrement, il
s'agit d'une

10
00:00:39,471 --> 00:00:43,428
carte à microcontrôleurs, vous la
connaissez bien.

11
00:00:43,428 --> 00:00:49,746
Deuxièmement, il s'agit d'un environnement
de programmation, il existe

12
00:00:49,746 --> 00:00:52,554
d'ailleurs des environnements similaires à

13
00:00:52,554 --> 00:00:56,480
l'environnement Arduino pour d'autres
microcontrôleurs.

14
00:00:56,480 --> 00:00:59,240
Nous allons aujourd'hui utiliser
l'environnement

15
00:00:59,240 --> 00:01:01,430
Energia pour les processeurs MSP 430.

16
00:01:01,430 --> 00:01:08,310
Et la troisième signification du mot
Arduino, c'est les librairies Arduino,

17
00:01:08,310 --> 00:01:14,555
c'est les appels, les fonctions, les
procédures qui se trouvent dans la

18
00:01:14,555 --> 00:01:18,335
librairie Arduino que vous connaissez
bien, telles que Pin Mode, telles

19
00:01:18,335 --> 00:01:24,409
que Digital Read, Digital Write et on
l'appelle parfois le langage Arduino.

20
00:01:24,409 --> 00:01:27,636
Alors regardons le programme le plus
simple

21
00:01:27,636 --> 00:01:30,410
qu'on a déjà utilisé à plusieurs reprises.

22
00:01:30,410 --> 00:01:36,252
Alors, vous connaissez bien ce programme,
voilà comment il est écrit,

23
00:01:36,252 --> 00:01:41,866
il y a la procédure Setup qui initialise
la patte en sortie, et on fait

24
00:01:41,866 --> 00:01:44,646
successivement dans la boucle loop un

25
00:01:44,646 --> 00:01:47,844
digital write pour allumer la diode
lumineuse,

26
00:01:47,844 --> 00:01:50,541
une attente, un digital write pour

27
00:01:50,541 --> 00:01:54,084
éteindre la diode lumineuse et une
attente.

28
00:01:54,084 --> 00:01:57,446
Je vais garder l'essentiel de ce programme
pour

29
00:01:57,446 --> 00:02:00,260
qu'on puisse bien voir ce qui se passe.

30
00:02:00,260 --> 00:02:07,974
Nous allons le compiler, nous allons
ensuite exécuter, plus exactement,

31
00:02:07,974 --> 00:02:14,910
le téléverser, et on voit effectivement
que la petite lampe clignote.

32
00:02:14,910 --> 00:02:17,010
Vous savez que nous n'aimons pas beaucoup
écrire

33
00:02:17,010 --> 00:02:19,960
les programmes de cette manière-là, qui
d'ailleurs nécessite des

34
00:02:19,960 --> 00:02:22,898
commentaires, parce que ce n'est pas
facile de

35
00:02:22,898 --> 00:02:26,620
comprendre à quoi correspond tel ou tel
digital write.

36
00:02:26,620 --> 00:02:34,901
Nous préférons cette manière d'écrire où
on définit Led1On avec son digital

37
00:02:34,901 --> 00:02:40,320
write, et à l'intérieur du programme il
suffit d'appeler cette définition.

38
00:02:40,320 --> 00:02:42,768
Et là, vous voyez que j'ai même enlevé les

39
00:02:42,768 --> 00:02:46,730
commentaires qui, à mon avis, ne sont plus
véritablement utiles.

40
00:02:46,730 --> 00:02:49,150
Le programme, évidemment, marche de la
même manière.

41
00:02:49,150 --> 00:02:52,660
Je vous propose de commencer par modifier
un petit peu

42
00:02:52,660 --> 00:02:57,095
ce programme pour le rendre un petit peu
plus compliqué.

43
00:02:57,095 --> 00:03:02,716
On va ici lui ajouter la lecture du
bouton-poussoir de telle

44
00:03:02,716 --> 00:03:08,517
manière que l'on puisse lancer le
clignotement en pressant sur le bouton.

45
00:03:08,517 --> 00:03:14,050
Alors, naïvement, j'ai initialisé la

46
00:03:14,050 --> 00:03:20,070
patte du bouton poussoir en input, j'ai
fait un digital read

47
00:03:20,070 --> 00:03:25,680
de ce, de cette patte, et vous allez voir
que le programme ne fonctionne pas.

48
00:03:25,680 --> 00:03:32,102
La lampe est allumée, je presse sur le
bouton, il ne se passe rien, si je caresse

49
00:03:32,102 --> 00:03:38,080
les pattes ici, il se passe des choses,
c'est vraiment assez mystérieux.

50
00:03:38,080 --> 00:03:43,792
Alors bien sûr, on sait de quoi il s'agit,
il faut modifier le programme de cette

51
00:03:43,792 --> 00:03:49,330
manière-là : j'ai mis ici INPUT_PULLUP
pour le mode

52
00:03:49,330 --> 00:03:55,020
d'utilisation du bouton-poussoir, de telle
manière qu'il y ait donc cette résistance

53
00:03:55,020 --> 00:03:59,560
de tirage qui donne un état stable
lorsqu'on ne presse pas sur le bouton.

54
00:03:59,560 --> 00:04:04,610
J'ai également profité de définir
correctement l'appel

55
00:04:04,610 --> 00:04:09,930
Push 1 On et j'ai également hum, ajouté

56
00:04:09,930 --> 00:04:15,420
l'inversion de cette lecture digitalread
de telle manière que lorsque

57
00:04:15,420 --> 00:04:19,213
le bouton est pressé et qu'on a donc un
état logique zéro à

58
00:04:19,213 --> 00:04:24,621
l'entrée qui est donnée par le câblage, on
obtienne une condition vraie pour

59
00:04:24,621 --> 00:04:27,040
que ce if puisse avoir un sens.

60
00:04:27,040 --> 00:04:30,040
Et cette fois, le programme devrait
fonctionner.

61
00:04:30,040 --> 00:04:34,117
On voit que lorsque je presse sur

62
00:04:34,117 --> 00:04:38,910
le bouton, ça se met effectivement à
clignoter.

63
00:04:38,910 --> 00:04:44,606
Essayons maintenant de remplacer tous ces
appels Pin mode, Digital read,

64
00:04:44,606 --> 00:04:50,240
Digital write par des accès directs au
registre du microcontrôleur.

65
00:04:50,240 --> 00:04:54,723
On voit ici qu'on a définit les bits dans
le port un, pour la led d'une part, pour

66
00:04:54,723 --> 00:05:01,709
le bouton-poussoir d'autre part, on a
définit Led on/Led off avec un sept

67
00:05:01,709 --> 00:05:05,707
bits sur le bit correspondant, avec un
clear

68
00:05:05,707 --> 00:05:09,559
bit sur le bit correspondant, on a utilisé

69
00:05:09,559 --> 00:05:12,270
la lecture de P1 In avec masquage du

70
00:05:12,270 --> 00:05:16,630
bit du bouton-poussoir pour la lecture du
bouton-poussoir.

71
00:05:16,630 --> 00:05:20,300
Le programme principal, évidemment, ne
change pas,

72
00:05:20,300 --> 00:05:22,536
la boucle principale est totalement
identique à ce

73
00:05:22,536 --> 00:05:25,060
qu'on avait tout à l'heure, par contre
dans

74
00:05:25,060 --> 00:05:28,220
le setup j'ai agi directement sur P1 Dir

75
00:05:28,220 --> 00:05:33,762
pour mettre la led en sortie, j'ai profité
de l'éteindre au début du programme et

76
00:05:33,762 --> 00:05:38,274
j'ai également enclenché la résistance de
pull-up en

77
00:05:38,274 --> 00:05:42,202
agissant sur P1REN et j'ai indiqué qu'il
s'agissait

78
00:05:42,202 --> 00:05:46,225
d'une résistance de tirage vers le haut,
donc pull-up hum en

79
00:05:46,225 --> 00:05:51,310
agi, en mettant un un dans le bit
correspondant de P1OUT.

80
00:05:51,310 --> 00:05:55,940
Alors ce programme devrait fonctionner
tout à fait comme l'autre.

81
00:05:55,940 --> 00:06:01,086
Regardons que tout à l'heure on avait 714
octets pour ce

82
00:06:01,086 --> 00:06:06,352
programme, je le compile, on a maintenant,
on le verra très

83
00:06:06,352 --> 00:06:12,090
exactement au moment du téléversement, on
a seulement 410

84
00:06:12,090 --> 00:06:17,360
octets pour un programme qui fait
rigoureusement la même chose.

85
00:06:17,360 --> 00:06:20,220
Quand on presse sur le bouton, la lampe
s'allume.

86
00:06:20,220 --> 00:06:23,080
Donc on voit que c'est relativement
intéressant,

87
00:06:23,080 --> 00:06:24,990
on a gagné de la place en mémoire.

88
00:06:24,990 --> 00:06:30,247
Or, il resterait maintenant une dernière
étape, celle de s'affranchir du setup et

89
00:06:30,247 --> 00:06:35,770
loop et d'écrire directement le programme
principal main.

90
00:06:35,770 --> 00:06:37,119
Essayons de le faire.

91
00:06:37,119 --> 00:06:42,730
Voilà comment ce programme pourrait se
présenter, avec le main qui contient cette

92
00:06:42,730 --> 00:06:48,170
fameuse instruction pour l'initialisation
du watchdog

93
00:06:48,170 --> 00:06:54,316
timer, ce qui était précédemment dans le
setup, une

94
00:06:54,316 --> 00:07:00,198
boucle infinie while un, et ce qui se
trouvait précédemment dans le loop.

95
00:07:00,198 --> 00:07:02,190
Alors on va voir si ça marche.

96
00:07:02,190 --> 00:07:07,470
Alors ma lampe est éteinte, c'est bon

97
00:07:07,470 --> 00:07:13,690
signe, je presse sur le bouton, elle
s'allume, mais ça ne clignote pas.

98
00:07:13,690 --> 00:07:15,510
Pourquoi?

99
00:07:15,510 --> 00:07:22,179
Eh bien, nous avons commis une erreur
grave, nous avons oublié que l'appel

100
00:07:22,179 --> 00:07:24,736
delay était aussi un appel propre à

101
00:07:24,736 --> 00:07:28,225
l'environnement Arduino, et que pour qu'il
fonctionne

102
00:07:28,225 --> 00:07:31,280
l'environnement Arduino doit initialiser
un certain

103
00:07:31,280 --> 00:07:34,050
nombre de choses, en l'occurrence des
timer,

104
00:07:34,050 --> 00:07:37,200
et que comme nous avons écrit nous-mêmes

105
00:07:37,200 --> 00:07:41,282
la routine principale, le main, ces
initialisations

106
00:07:41,282 --> 00:07:44,730
n'ont pas eu lieu et le programme n'a pas
marché.

107
00:07:44,730 --> 00:07:50,250
Alors nous allons devoir réécrire
nous-mêmes le, la procédure delay.

108
00:07:50,250 --> 00:07:54,824
Alors ici je l'ai appelé Attente MS comme
j'ai l'habitude de

109
00:07:54,824 --> 00:07:59,130
le faire, mais on comprend bien qu'il
s'agit de la même fonctionnalité.

110
00:07:59,130 --> 00:08:06,020
Donc on a cette routine, avec donc une
variable volatile pour que elle soit, hum.

111
00:08:06,020 --> 00:08:10,080
que la boucle, ici centrale, s'exécute
effectivement quand bien

112
00:08:10,080 --> 00:08:12,390
même elle est vide, ce qui va prendre un

113
00:08:12,390 --> 00:08:15,822
petit peu de temps, et alors mon programme
principal

114
00:08:15,822 --> 00:08:20,302
ici avec ces attentes, et cette fois il
devrait fonctionner.

115
00:08:20,302 --> 00:08:23,350
Je presse sur le bouton, ça clignote.

116
00:08:23,350 --> 00:08:27,320
Alors, ne tombez pas dans le piège, vous
devez choisir.

117
00:08:27,320 --> 00:08:32,430
Soit vous utilisez l'environnement Arduino
et vous utilisez les procédures setup et

118
00:08:32,430 --> 00:08:34,800
loop, soit vous vous affranchissez de

119
00:08:34,800 --> 00:08:38,300
l'environnement Arduino, vous accédez
directement les

120
00:08:38,300 --> 00:08:45,380
registres du processeur, vous écrivez la
procédure main et une boucle infinie

121
00:08:45,380 --> 00:08:51,690
while un, mais alors vous n'avez plus le
droit d'utiliser les appels Arduino.