1
00:00:05,360 --> 00:00:05,900
Bonjour.

2
00:00:05,900 --> 00:00:08,840
Lorsque l'on travaille avec des
microcontrôleurs, une

3
00:00:08,840 --> 00:00:11,660
des grandes difficultés, c'est de faire
fonctionner

4
00:00:11,660 --> 00:00:14,181
les programmes qu'on a écrit, de trouver

5
00:00:14,181 --> 00:00:18,470
les pannes qui sont à l'intérieur, de
dépanner.

6
00:00:18,470 --> 00:00:23,670
On parle parfois aussi de déverminage ou
encore de débogage,

7
00:00:23,670 --> 00:00:28,928
mais c'est certainement le terme anglais
"debug" qui est le plus utilisé.

8
00:00:28,928 --> 00:00:30,424
Je rappelle qu'il y

9
00:00:30,424 --> 00:00:34,780
a plusieurs manières de programmer un
microcontrôleur.

10
00:00:34,780 --> 00:00:37,100
La technique qui est utilisée dans

11
00:00:37,100 --> 00:00:40,870
l'Arduino utilise ce qu'on appelle une
bootloader.

12
00:00:40,870 --> 00:00:44,940
Il s'agit d'un programme qui doit être
présent sur le microcontrôleur

13
00:00:44,940 --> 00:00:50,530
et qui permet de charger un autre
programme dans ce même microcontrôleur.

14
00:00:50,530 --> 00:00:53,070
C'est d'ailleurs une de, une des
contraintes,

15
00:00:53,070 --> 00:00:56,360
on ne peut pas acheter un microcontrôleur

16
00:00:56,360 --> 00:01:00,066
tout nu, tout neuf, comme le fabriquant le
livre.

17
00:01:00,066 --> 00:01:01,966
Il ne va pas fonctionner sur un

18
00:01:01,966 --> 00:01:06,884
Arduino puisqu'il faut préalablement lui
installer un bootloader.

19
00:01:06,884 --> 00:01:10,404
Il existe aussi des programmateurs, celui
qui

20
00:01:10,404 --> 00:01:13,560
est utilisé pour les MSP430, par exemple.

21
00:01:13,560 --> 00:01:16,344
Le mode ISP qui est utilisé pour les

22
00:01:16,344 --> 00:01:21,332
AVR et qui permet une première
programmation d'un Arduino.

23
00:01:21,332 --> 00:01:26,640
Vous vous souvenez, on a notre schéma,
notre montage, on a ici,

24
00:01:26,640 --> 00:01:32,640
quelque chose qui nous permet de nous
relier au PC pour faire la programmation.

25
00:01:32,640 --> 00:01:34,980
La plupart des programmateurs permettent

26
00:01:34,980 --> 00:01:37,700
simplement de programmer le
microcontrôleur.

27
00:01:37,700 --> 00:01:39,844
Mais certains programmateurs ont des

28
00:01:39,844 --> 00:01:42,457
fonctions supplémentaires qui offrent
cette

29
00:01:42,457 --> 00:01:47,336
possibilité de, en quelque sorte, voir à
l'intérieur du microcontrôleur,

30
00:01:47,336 --> 00:01:50,630
voir ce qui se passe dans notre
microcontrôleur.

31
00:01:50,630 --> 00:01:57,000
Historiquement, c'est souvent les systèmes
JTAG qui ont été utilisés.

32
00:01:57,000 --> 00:01:59,280
C'est un terme que vous devez connaître,
on

33
00:01:59,280 --> 00:02:02,170
en parle souvent en rapport avec les
microcontrôleurs.

34
00:02:02,170 --> 00:02:05,905
On peut programmer des AVR avec des
interfaces JTAG.

35
00:02:05,905 --> 00:02:10,710
Les ARM sont presque toujours programmés
également, avec cette technologie.

36
00:02:10,710 --> 00:02:12,894
Il existe aussi des systèmes

37
00:02:12,894 --> 00:02:17,158
spécifiques inventés par certains
fabriquants, par

38
00:02:17,158 --> 00:02:20,890
exemple, le système debugWire des AVR.

39
00:02:20,890 --> 00:02:25,090
Il est assez génial parce qu'il utilise
une seule patte, la patte

40
00:02:25,090 --> 00:02:29,173
Reset, mais dans un mode spécial et qui
permet, donc, non seulement

41
00:02:29,173 --> 00:02:32,953
de programmer le microcontrôleur, mais
aussi de suivre ce qui se passe

42
00:02:32,953 --> 00:02:38,230
à l'intérieur, et ça va être une aide
énorme pour faire le dépannage,

43
00:02:38,230 --> 00:02:39,120
le debug.

44
00:02:39,120 --> 00:02:44,487
Il faut, dans ce cas-là, utiliser le
programmateur Dragon proposé par Atmel.

45
00:02:44,487 --> 00:02:51,920
Il se trouve que le launchPad MSP430
contient aussi un de ces programmateurs

46
00:02:51,920 --> 00:02:57,800
évolués qui permet de regarder ce qui se
passe à l'intérieur du microcontrôleur.

47
00:02:57,800 --> 00:02:59,681
Ces dispositifs étaient jusqu'à il y a

48
00:02:59,681 --> 00:03:02,189
pas très longtemps réservés à des
professionnels.

49
00:03:02,189 --> 00:03:03,443
C'était des dispositifs

50
00:03:03,443 --> 00:03:07,256
extrêmement coûteux, et le fait qu'ils
soient disponibles sur le launchPad

51
00:03:07,256 --> 00:03:11,380
à un prix très intéressant est, euh, un
avantage, euh, de taille.

52
00:03:11,380 --> 00:03:16,845
Évidemment, un programmateur donné pourra
être utilisé

53
00:03:16,845 --> 00:03:22,310
dans sa fonction de debug, pour autant
qu'on utilise le logiciel correspondant.

54
00:03:22,310 --> 00:03:28,490
Dans le cas des MSP430 de Texas
Instruments, c'est le logiciel

55
00:03:28,490 --> 00:03:35,560
Code Composer Studio dont vous voyez, ici,
une vue générale qui permet de faire cette

56
00:03:35,560 --> 00:03:42,430
programmation avec debug.
Vous reconnaissez ce type d'environnement.

57
00:03:42,430 --> 00:03:45,452
Ici, on voit les fichiers qui sont
associés

58
00:03:45,452 --> 00:03:48,250
au projet qu'on est en train de réaliser.

59
00:03:48,250 --> 00:03:53,695
Ici, il y a le source du programme qu'on
écrit, et puis là, il y aura

60
00:03:53,695 --> 00:03:58,680
la console qui par exemple, nous donnera
les, le résultat de la compilation, avec

61
00:03:58,680 --> 00:04:01,128
éventuellement des erreurs, et il y a

62
00:04:01,128 --> 00:04:04,370
aussi, ici, une fenêtre avec des aides
diverses.

63
00:04:04,370 --> 00:04:06,892
Essayons de créer pas à pas, un

64
00:04:06,892 --> 00:04:11,410
projet avec cet environnement Code
Composer Studio.

65
00:04:11,410 --> 00:04:14,412
La première chose qu'il faut faire, c'est

66
00:04:14,412 --> 00:04:18,922
aller dans File, sélectionner New, puis
CCS Project.

67
00:04:18,922 --> 00:04:22,036
Donc, on va créer un projet qui

68
00:04:22,036 --> 00:04:26,452
contiendra plus tard un ou plusieurs
fichiers sources.

69
00:04:26,452 --> 00:04:28,170
Donc, CCS Project.

70
00:04:28,170 --> 00:04:31,368
Le menu suivant, euh, nous demande de
donner

71
00:04:31,368 --> 00:04:35,730
le nom au projet, l'extension est donnée
automatiquement.

72
00:04:35,730 --> 00:04:38,964
Il faut, comme d'habitude, cliquer sur
Next.

73
00:04:38,964 --> 00:04:44,540
Il y a encore deux fenêtres sur lesquelles
il suffit de cliquer Next, et je m'arrête,

74
00:04:44,540 --> 00:04:47,420
ici, sur la troisième fenêtre, dans
laquelle

75
00:04:47,420 --> 00:04:49,980
il est nécessaire de donner une réponse.

76
00:04:49,980 --> 00:04:54,430
On doit choisir le microcontrôleur qu'on
va utiliser.

77
00:04:54,430 --> 00:04:58,005
Si on clique simplement dans la liste, la
liste est très longue.

78
00:04:58,005 --> 00:05:01,476
C'est un peu difficile de trouver le
processeur qui nous intéresse.

79
00:05:01,476 --> 00:05:03,960
Alors, ce qui est plus facile, c'est de
choisir dans

80
00:05:03,960 --> 00:05:10,550
cette famille, dans cette liste de
familles, la famille MSP430G

81
00:05:10,550 --> 00:05:13,270
qui est celle qui correspond au launchPad.

82
00:05:13,270 --> 00:05:16,702
Et ensuite, on fait dérouler une liste qui
est moins longue et

83
00:05:16,702 --> 00:05:22,248
le processeur qui est originalement sur le
launchPad, c'est celui-ci, le 25 53.

84
00:05:22,248 --> 00:05:25,750
Ensuite, il suffit de choisir Next.

85
00:05:25,750 --> 00:05:29,276
On a donc créé un projet, et on n'a

86
00:05:29,276 --> 00:05:32,910
pas encore créer de fichier source associé
à ce projet.

87
00:05:32,910 --> 00:05:35,750
Et il est nécessaire de cliquer, avec le
bouton

88
00:05:35,750 --> 00:05:38,650
de droite, sur le nom du projet, de
choisir à

89
00:05:38,650 --> 00:05:44,390
nouveau, New, et cette fois, de choisir
Source File, fichier source.

90
00:05:44,390 --> 00:05:48,500
Ensuite, on a le menu où on doit donner le
nom du fichier.

91
00:05:48,500 --> 00:05:51,855
N'oubliez-pas de donner l'extension point
C, puisqu'il s'agira

92
00:05:51,855 --> 00:05:54,827
bien d'un fichier point C, et ensuite, on

93
00:05:54,827 --> 00:05:57,750
se trouve avec une page vide dans lequel

94
00:05:57,750 --> 00:06:01,340
il suffit d'écrire le programme que nous
souhaitons écrire.

95
00:06:01,340 --> 00:06:05,360
J'ai pris comme exemple, pour cette
démonstration,

96
00:06:05,360 --> 00:06:09,560
un source qu'il est important de pouvoir
calibrer.

97
00:06:09,560 --> 00:06:14,533
C'est le, l'utilisation d'un capteur de
distance infrarouge, et à

98
00:06:14,533 --> 00:06:17,582
un moment donné, on doit faire une petite
attente pour

99
00:06:17,582 --> 00:06:23,130
que globalement, le temps de mesure
corresponde à, le temps

100
00:06:23,130 --> 00:06:26,826
de décharge de la capacité dans les
conditions de travail

101
00:06:26,826 --> 00:06:30,230
réel, et il va falloir ajuster cette
valeur-là.

102
00:06:30,230 --> 00:06:33,182
Donc, ça sera très intéressant de pouvoir

103
00:06:33,182 --> 00:06:36,620
visualiser ce que va nous rendre notre
procédure

104
00:06:36,620 --> 00:06:41,690
et on verra que c'est, ça sera très facile
de le faire, grâce au debugger.

105
00:06:41,690 --> 00:06:47,132
Lorsque le source est prêt, Il faut
cliquer dans Project,

106
00:06:47,132 --> 00:06:52,502
puis Build Active Project.
Donc, on fait la construction du projet.

107
00:06:52,502 --> 00:06:56,530
C'est le thème qui est utilisé pour la
compilation, suivi des

108
00:06:56,530 --> 00:07:01,170
étapes qui suivent la compilation parti,
en particulier, euh, l'édition des liens.

109
00:07:01,170 --> 00:07:06,230
Dans ce cas-là, il n'y a pas eu d'erreurs,
on voit bien, ici, Build Complete.

110
00:07:06,230 --> 00:07:11,370
Par contre, il y a eu un Warning, un
avertissement qui est d'ailleurs tout

111
00:07:11,370 --> 00:07:14,480
à fait pertinent, puisque mon programme
principal

112
00:07:14,480 --> 00:07:19,690
dit ceci : Mesure égale Mesure Distance,

113
00:07:19,690 --> 00:07:23,020
mais on ne fait rien pour le moment, de
cette valeur.

114
00:07:23,020 --> 00:07:25,170
Donc, elle n'est pas utilisée.

115
00:07:25,170 --> 00:07:30,434
Et là, c'est très intéressant de pouvoir,
malgré tout, lancer

116
00:07:30,434 --> 00:07:35,761
ce programme qu'on va ensuite arrêter et
on ira regarder la

117
00:07:35,761 --> 00:07:39,494
valeur mesurée sans avoir besoin de
s'occuper de mettre du

118
00:07:39,494 --> 00:07:41,664
matériel supplémentaire autour de notre

119
00:07:41,664 --> 00:07:45,670
microcontrôleur pour afficher cette valeur
mesurée.

120
00:07:45,670 --> 00:07:50,078
On va lancer l'environnement de Debug
grâce

121
00:07:50,078 --> 00:07:54,494
à la sélection Target, puis Debug Active
Project.

122
00:07:54,494 --> 00:07:58,020
Target, c'est donc la cible, on parle
souvent

123
00:07:58,020 --> 00:08:01,710
de système cible pour, euh, ces systèmes
microcontrôleurs.

124
00:08:01,710 --> 00:08:06,900
Donc, on va dépanner le project actif sur
le système cible.

125
00:08:06,900 --> 00:08:10,660
Et on se trouve, après quelques dizaines
de secondes,

126
00:08:10,660 --> 00:08:16,284
je devrais dire, ça prend un petit peu de
temps; le, l'environnement doit se

127
00:08:16,284 --> 00:08:22,545
commuter, doit changer Le programmateur
doit envoyer le code à l'intérieur

128
00:08:22,545 --> 00:08:27,534
du microcontrôleur et lorsque tous ces,
toutes ces opérations sont terminées, on

129
00:08:27,534 --> 00:08:31,480
se trouve avec un environnement un petit
peu différent de tout à l'heure.

130
00:08:31,480 --> 00:08:35,846
On trouve quelque part, dans une fenêtre
un peu minuscule, le source

131
00:08:35,846 --> 00:08:38,500
du programme que nous venons d'écrire.

132
00:08:38,500 --> 00:08:42,490
On trouve, ici, euh, les messages qui
viennent d'une console.

133
00:08:42,490 --> 00:08:45,278
On trouve, ici, les instruction ta,
traduites

134
00:08:45,278 --> 00:08:47,970
en assembleur, ça peut être extrêmement
utile,

135
00:08:47,970 --> 00:08:49,710
et on retrouvera, ici, des noms de

136
00:08:49,710 --> 00:08:52,390
variables, ce qui va être extrêmement
intéressant.

137
00:08:52,390 --> 00:08:57,650
Pour le moment, le programme ne s'exécute
pas encore,

138
00:08:57,650 --> 00:09:00,887
il va falloir, ici, cliquer sur la touche
Run

139
00:09:00,887 --> 00:09:03,460
qui est une petite flèche verte qui va

140
00:09:03,460 --> 00:09:07,820
permettre de lancer le programme à
l'intérieur du microcontrôleur.

141
00:09:07,820 --> 00:09:13,280
Une fois que le programme est lancé, on ne
va rien voir du tout.

142
00:09:13,280 --> 00:09:13,880
Pourquoi?

143
00:09:13,880 --> 00:09:17,730
Notre programme s'exécute à l'intérieur du
microcontrôleur, il fait

144
00:09:17,730 --> 00:09:21,130
ses mesures de distance, mais il ne les
affiche pas.

145
00:09:21,130 --> 00:09:26,010
Il va être, donc, nécessaire d'arrêter
l'exécution du programme.

146
00:09:26,010 --> 00:09:27,922
Ici, il y a une touche Alt que

147
00:09:27,922 --> 00:09:31,380
vous allez trouver, qui vous permet
d'arrêter le programme.

148
00:09:31,380 --> 00:09:35,234
Donc, la touche Alt, c'est cette touche
qui est juste

149
00:09:35,234 --> 00:09:38,970
entre le Run et l'arrêt complet du système
de Debug.

150
00:09:38,970 --> 00:09:42,760
Une fois que le programme est arrêté, on

151
00:09:42,760 --> 00:09:47,090
voit, ici, l'endroit où le programme s'est
arrêté.

152
00:09:47,090 --> 00:09:51,540
Il se trouve qu'il était dans cette boucle
d'attente lorsqu'il s'est arrêté.

153
00:09:51,540 --> 00:09:59,187
On voit que des variables locales, ici, i
et j ont une certaine

154
00:09:59,187 --> 00:10:05,850
valeur.
La distance vaut la même valeur que le j.

155
00:10:05,850 --> 00:10:08,442
On est au milieu de la procédure de mesure
de

156
00:10:08,442 --> 00:10:13,210
distance, c'est donc pas du tout des
informations qui sont intéressantes.

157
00:10:13,210 --> 00:10:16,572
Ce qu'on va faire maintenant, c'est qu'on
va

158
00:10:16,572 --> 00:10:20,400
créer un point d'arrêt à l'intérieur du
programme.

159
00:10:20,400 --> 00:10:23,130
En anglais, on appelle ça un break point.

160
00:10:23,130 --> 00:10:29,151
Je vais donc cliquer sur cette ligne, ici,
qui est la fin de

161
00:10:29,151 --> 00:10:35,242
la procédure et qui donne l'instruction
Return Distance, avec le bouton de droite.

162
00:10:35,242 --> 00:10:37,850
Je vais chosir New Breakpoint.

163
00:10:37,850 --> 00:10:42,040
Je vais choisir Breakpoint, et à ce
moment-là,

164
00:10:42,040 --> 00:10:48,020
mon programme va devoir s'arrêter s'il
passe à cet endroit-là.

165
00:10:48,020 --> 00:10:53,304
Je vais donc, renoncer l'exécution et
lorsqu'elle

166
00:10:53,304 --> 00:10:58,580
va s'arrêter, je vais voir le résultat à
l'intérieur de mon microcontrôleur.

167
00:10:58,580 --> 00:11:05,332
C'est bien ici, que je me suis arrêté,
donc, juste au niveau du return distance.

168
00:11:05,332 --> 00:11:07,066
J'ai de nouveau les

169
00:11:07,066 --> 00:11:08,820
valeurs de i et de j.

170
00:11:08,820 --> 00:11:15,130
Le j est arrivé à 254, on est donc bien à
la fin de la boucle de mesure.

171
00:11:15,130 --> 00:11:18,202
Par contre, on a, ici, la valeur qui

172
00:11:18,202 --> 00:11:22,280
a effectivement été lue, qui est la valeur
41.

173
00:11:22,280 --> 00:11:27,498
Donc, en fonction de l'objet que j'avais
placé en face de mon capteur,

174
00:11:27,498 --> 00:11:32,608
je vois que la valeur 41 a été donnée.
Je vais pouvoir faire d'autres

175
00:11:32,608 --> 00:11:36,720
tests de cette manière-là pour
éventuellement calibrer mon programme.

176
00:11:36,720 --> 00:11:38,610
Je pense que vous vous rendez compte

177
00:11:38,610 --> 00:11:42,070
que c'est extrêmement puissant, comme
manière de travailler

178
00:11:42,070 --> 00:11:44,694
puisqu'on peut, en quelque sorte, aller
voir

179
00:11:44,694 --> 00:11:47,650
à l'intérieur du microcontrôleur, ce qui
se passe.

180
00:11:47,650 --> 00:11:51,376
Lorsqu'on écrit des programmes complexes,
on peut tout à coup

181
00:11:51,376 --> 00:11:54,910
perdre contrôle, ne plus très bien savoir
ce qui se passe.

182
00:11:54,910 --> 00:11:57,630
Il est toujours possible, avec ce
dispositif,

183
00:11:57,630 --> 00:12:01,630
d'arrêter l'exécution, d'aller voir des
variables.

184
00:12:01,630 --> 00:12:03,864
Il est possible également, de faire du pas

185
00:12:03,864 --> 00:12:06,440
à pas, ce qui est aussi extrêmement
intéressant.

186
00:12:06,440 --> 00:12:07,952
Ce que nous venons de voir

187
00:12:07,952 --> 00:12:12,090
maintenant, c'était considéré comme des
outils professionnels

188
00:12:12,090 --> 00:12:18,780
tout à fait coûteux et inabordables pour
les étudiants et pour les amateurs.

189
00:12:18,780 --> 00:12:22,666
Aujourd'hui, c'est des technologies qui
sont peu coûteuses et je

190
00:12:22,666 --> 00:12:27,858
vous encourage vivement à apprendre à les
utiliser, à les maîtriser, vous serez

191
00:12:27,858 --> 00:12:32,720
beaucoup plus efficaces pour le
développement-microcontrôleur.