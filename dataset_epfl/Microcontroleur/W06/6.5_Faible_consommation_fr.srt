1
00:00:00,000 --> 00:00:01,161
Bonjour.

2
00:00:01,161 --> 00:00:07,890
Nous continuons le cours Comprendre les
microcontrôleurs,

3
00:00:07,890 --> 00:00:10,926
et nous allons parler aujourd'hui de la
consommation

4
00:00:10,926 --> 00:00:14,065
de ces microcontrôleurs, et en particulier
du problème

5
00:00:14,065 --> 00:00:16,963
de la faible consommation qui est souvent
souhaitée.

6
00:00:16,963 --> 00:00:21,400
On essaiera tout d'abord de comprendre de
quoi dépend la consommation.

7
00:00:21,400 --> 00:00:25,360
On parlera ensuite des modes Sleep.
Et finalement,

8
00:00:25,360 --> 00:00:27,250
on prendra quelques exemples.

9
00:00:27,250 --> 00:00:31,040
Au fond, quelle est la consommation d'un
microcontrôleur?

10
00:00:31,040 --> 00:00:34,629
Est-ce un microampère?
Un milliampère?

11
00:00:34,629 --> 00:00:35,600
Un ampère?

12
00:00:35,600 --> 00:00:41,220
Et bien, on peut se souvenir, ça n'est pas
beaucoup plus qu'une LED.

13
00:00:41,220 --> 00:00:45,315
Évidemment, les différents modèles de
microcontrôleurs peuvent avoir des

14
00:00:45,315 --> 00:00:47,925
consommations extrêmement différentes, on
a

15
00:00:47,925 --> 00:00:50,700
des microcontrôleurs dont la consommation

16
00:00:50,700 --> 00:00:52,800
en mode normal est inférieure à un

17
00:00:52,800 --> 00:00:56,238
milliampère, on a aussi des
microcontrôleurs dont

18
00:00:56,238 --> 00:00:59,415
la consommation en mode normal est
supérieure

19
00:00:59,415 --> 00:01:03,250
à dix ou même plusieurs dizaines de
milliampères.

20
00:01:03,250 --> 00:01:06,284
Malgré tout, ces consommations ne semblent
pas

21
00:01:06,284 --> 00:01:10,199
extrêmement élevées, et pourtant, elles ne
vont

22
00:01:10,199 --> 00:01:12,736
permettre que d'utiliser une petite pile
pendant

23
00:01:12,736 --> 00:01:16,130
au maximum quelques heures, ou
éventuellement quelques jours.

24
00:01:16,130 --> 00:01:19,238
Alors, la première question qu'il faut se

25
00:01:19,238 --> 00:01:22,890
poser, c'est : de quoi dépend la
consommation?

26
00:01:22,890 --> 00:01:29,120
Regardons ce diagramme tiré d'un data
sheet d'un fabricant.

27
00:01:29,120 --> 00:01:34,398
Il nous indique deux choses.
Il est toujours ici question de la

28
00:01:34,398 --> 00:01:41,200
consommation, et on voit ici la variation
de la consommation en fonction de la

29
00:01:41,200 --> 00:01:46,540
tension d'alimentation, et ici on la voit
en fonction de la fréquence.

30
00:01:46,540 --> 00:01:49,279
Dans ce diagramme, on donne plusieurs

31
00:01:49,279 --> 00:01:53,480
valeurs qui correspondent à des fréquences
différentes,

32
00:01:53,480 --> 00:01:56,112
et dans ce diagramme on donne deux

33
00:01:56,112 --> 00:02:00,680
courbes qui correspondent à des tensions
différentes.

34
00:02:00,680 --> 00:02:06,137
Première chose : on constate que plus la
tension augmente,

35
00:02:06,137 --> 00:02:11,470
plus le courant augmente.
Par exemple, ici, autour de

36
00:02:11,470 --> 00:02:16,860
2,2 volts, on a un courant qui est à peine
plus qu'un milliampère.

37
00:02:16,860 --> 00:02:20,370
À trois volts, on est déjà à deux
milliampères.

38
00:02:20,370 --> 00:02:26,099
On a doublé, on a presque doublé le
courant mais on a nettement plus que

39
00:02:26,099 --> 00:02:31,235
doublé la puissance dont je vous rappelle
que c'est le courant multiplié par

40
00:02:31,235 --> 00:02:32,020
la tension.

41
00:02:32,020 --> 00:02:37,346
Pourquoi est-ce que ces courbes ici ne
vont pas jusqu'en bas?

42
00:02:37,346 --> 00:02:42,536
Et bien c'est parce que, par exemple à 16
mégahertz, le processeur ne peut

43
00:02:42,536 --> 00:02:46,355
pas fonctionner, ni à deux volts, ni à
deux volts et demi, ni même à

44
00:02:46,355 --> 00:02:48,380
trois volts, et c'est la raison pour

45
00:02:48,380 --> 00:02:50,681
laquelle, sur le launchpad, on a une
tension

46
00:02:50,681 --> 00:02:53,245
d'alimentation de 3,5 volts pour être
capable

47
00:02:53,245 --> 00:02:56,010
de faire fonctionner le processeur à 16
mégahertz.

48
00:02:56,010 --> 00:03:03,510
Regardons maintenant la deuxième courbe.
C'est encore beaucoup plus spectaculaire.

49
00:03:03,510 --> 00:03:09,960
On a ici un courant qui est nettement
inférieur à un demi milliampère.

50
00:03:09,960 --> 00:03:14,910
Ici, on a trois milliampères, mais tout ça
en passant d'une fréquence

51
00:03:14,910 --> 00:03:19,260
de l'ordre d'un mégahertz jusqu'à une
fréquence de l'ordre de 12 mégahertz.

52
00:03:19,260 --> 00:03:21,036
Au fond, si on veut

53
00:03:21,036 --> 00:03:26,056
diminuer la consommation, il faut diminuer
la tension, mais on

54
00:03:26,056 --> 00:03:30,590
ne peut pas toujours, et il faudrait
diminuer la fréquence.

55
00:03:30,590 --> 00:03:35,590
Mais pourquoi pas, alors, aller jusqu'à
une fréquence nulle?

56
00:03:35,590 --> 00:03:38,593
On aurait à ce moment-là une consommation
qui

57
00:03:38,593 --> 00:03:42,080
n'est pas nulle, mais qui sera
véritablement minimale.

58
00:03:42,080 --> 00:03:43,900
Vous me direz que le processeur ne

59
00:03:43,900 --> 00:03:46,820
fonctionne plus et ce n'est pas très
intéressant,

60
00:03:46,820 --> 00:03:50,798
et pourtant, c'est ce qu'on fait dans ce
qu'on appelle le

61
00:03:50,798 --> 00:03:53,820
mode Sleep des microcontrôleurs, et
actuellement

62
00:03:53,820 --> 00:03:56,540
tous les microcontrôleurs ont cette
facilité.

63
00:03:56,540 --> 00:04:00,484
Il s'agit effectivement d'arrêter de

64
00:04:00,484 --> 00:04:04,486
faire fonctionner le microprocesseur qu'on
trouve

65
00:04:04,486 --> 00:04:07,412
à l'intérieur du microcontrôleur, de telle

66
00:04:07,412 --> 00:04:10,528
manière qu'on ait une consommation
minimale.

67
00:04:10,528 --> 00:04:12,048
On peut le faire pendant

68
00:04:12,048 --> 00:04:17,490
un certain temps, mais qui va réveiller
ensuite le microcontrôleur?

69
00:04:17,490 --> 00:04:21,740
Et bien, c'est le mécanisme des
interruptions

70
00:04:21,740 --> 00:04:25,304
qui va permettre de réveiller le
microcontrôleur.

71
00:04:25,304 --> 00:04:27,060
Prenons deux exemples.

72
00:04:27,060 --> 00:04:32,580
On souhaite pouvoir allumer notre
microcontrôleur lorsqu'on presse

73
00:04:32,580 --> 00:04:37,954
sur un bouton.
À ce moment-là, on utilisera

74
00:04:37,954 --> 00:04:42,970
une Pin Change Interrupt.

75
00:04:42,970 --> 00:04:48,295
Au contraire, on souhaite endormir le

76
00:04:48,295 --> 00:04:53,643
processeur pendant un certain temps, et
dans ce cas-là,

77
00:04:53,643 --> 00:04:58,880
on pourra utiliser une interruption liée
au timer.

78
00:04:58,880 --> 00:05:03,210
Ça signifie qu'avant d'endormir le
processeur,

79
00:05:03,210 --> 00:05:07,796
on initialisera correctement les
interruptions qu'on souhaite,

80
00:05:07,796 --> 00:05:10,358
de telle manière qu'au moment voulu, soit
après

81
00:05:10,358 --> 00:05:12,371
un certain temps, soit au moment d'un

82
00:05:12,371 --> 00:05:16,460
événement particulier, le processeur se
remette en marche.

83
00:05:16,460 --> 00:05:21,890
Il existe beaucoup de modes
d'endormissement des microcontrôleurs.

84
00:05:21,890 --> 00:05:28,790
Par exemple, la documentation pour le
processeur ARM, un des modèles des STM32,

85
00:05:28,790 --> 00:05:31,034
il y a 37 pages de documentation à lire

86
00:05:31,034 --> 00:05:35,200
si on veut connaître tous les modes
d'endormissement du processeur.

87
00:05:35,200 --> 00:05:38,316
L'idée, c'est de désactiver différentes

88
00:05:38,316 --> 00:05:41,710
parties du microcontrôleur selon les
besoins.

89
00:05:41,710 --> 00:05:44,790
Le processeur, oui, en général.

90
00:05:44,790 --> 00:05:47,430
Les timers, on les garde ou on ne les
garde pas?

91
00:05:47,430 --> 00:05:51,190
Et bien, selon les besoins, on va les
garder ou ne pas les garder.

92
00:05:51,190 --> 00:05:53,638
Les entrées sorties, on va les garder?

93
00:05:53,638 --> 00:05:53,926
On ne

94
00:05:53,926 --> 00:05:56,380
va pas les garder?
Ça dépendra des cas.

95
00:05:56,380 --> 00:05:59,572
Pour s'en sortir, les fabricants proposent
des

96
00:05:59,572 --> 00:06:02,421
librairies, mais je signale que ces
librairies ne

97
00:06:02,421 --> 00:06:05,187
sont pas toujours faciles à utiliser, par
ailleurs

98
00:06:05,187 --> 00:06:08,820
elles sont pas toujours très bien écrites,
malheureusement.

99
00:06:08,820 --> 00:06:14,166
Et, assez souvent, il sera donc
nécessaire,

100
00:06:14,166 --> 00:06:18,976
quand même, de se pencher en détail dans
la documentation pour tirer le meilleur

101
00:06:18,976 --> 00:06:21,472
parti de ces mécanismes d'endormissement.

102
00:06:21,472 --> 00:06:24,736
Je rappelle, ça peut être extrêmement
intéressant puisque

103
00:06:24,736 --> 00:06:30,960
ça va permettre d'allonger la durée
d'utilisation des piles

104
00:06:30,960 --> 00:06:33,027
pour un appareil donné, ce qui évidemment
est

105
00:06:33,027 --> 00:06:36,260
un argument commercial extrêmement
intéressant dans beaucoup de cas.

106
00:06:36,260 --> 00:06:41,145
Une autre application à laquelle on ne
penserait peut-être

107
00:06:41,145 --> 00:06:44,690
pas, de ce sommeil, de ce mode Sleep des
microcontrôleurs,

108
00:06:44,690 --> 00:06:47,683
c'est les conversions analogique
numérique.

109
00:06:47,683 --> 00:06:51,896
vous savez que les conversions analogique
numérique sont complexes

110
00:06:51,896 --> 00:06:55,672
du point de vue électronique et qu'elles
sont extrêmement sensibles

111
00:06:55,672 --> 00:06:59,039
au bruit, au bruit électronique, on
comprend bien, au

112
00:06:59,039 --> 00:07:03,220
bruit électrique sur les alimentations,
sur les pads, et cetera.

113
00:07:03,220 --> 00:07:06,280
Et alors le processeur, on sait qu'il est

114
00:07:06,280 --> 00:07:09,835
une source de bruit électrique, par le
fait qu'il

115
00:07:09,835 --> 00:07:12,299
y a des oscillations et des phénomènes

116
00:07:12,299 --> 00:07:15,330
plus ou moins périodiques qui se
produisent.

117
00:07:15,330 --> 00:07:18,401
Par conséquent, on utilise très souvent un

118
00:07:18,401 --> 00:07:23,719
endormissement, spécifique parfois, pour
les convertisseurs, de telle

119
00:07:23,719 --> 00:07:26,734
manière que pendant la conversion, le
processeur ne

120
00:07:26,734 --> 00:07:29,640
fasse rien, et que le bruit soit minimum.

121
00:07:29,640 --> 00:07:35,490
Voilà un petit exemple d'utilisation d'un
convertisseur d'un MSP430,

122
00:07:35,490 --> 00:07:38,714
c'est extrait des documents fournis par le
fabricant, et on

123
00:07:38,714 --> 00:07:41,541
va essayer de s'y retrouver, c'est vrai
que ça fait un

124
00:07:41,541 --> 00:07:43,725
tout petit peu peur parce qu'il y a
beaucoup de

125
00:07:43,725 --> 00:07:47,100
termes qu'on ne comprend pas, mais
essayons quand même de regarder.

126
00:07:47,100 --> 00:07:50,488
Je rappelle la traditionnelle ligne qui
correspond

127
00:07:50,488 --> 00:07:55,790
au Watchdog, la suppression de
l'activation du Watchdog.

128
00:07:55,790 --> 00:08:01,150
on remarque ici les initialisations, ici
la boucle

129
00:08:01,150 --> 00:08:04,660
qui correspond à loop, donc à la boucle
principale.

130
00:08:04,660 --> 00:08:10,673
Alors, on voit souvent ce mot ADC10, ça
correspond au convertisseur analogique

131
00:08:10,673 --> 00:08:15,844
numérique dix bits disponible dans les
processeurs MSP430.

132
00:08:15,844 --> 00:08:18,215
On a ici deux registres de contrôle dans

133
00:08:18,215 --> 00:08:20,820
lequel on va activer un certain nombre de
bits.

134
00:08:20,820 --> 00:08:26,120
On voit ici le ON du convertisseur, donc
on le met on marche.

135
00:08:26,120 --> 00:08:29,400
On voit ici l'interrupt enable, donc on
met en

136
00:08:29,400 --> 00:08:34,900
marche l'interruption correspondante, et
ici on a le sample

137
00:08:34,900 --> 00:08:38,308
and hold, qui est une technique qui est
utilisée

138
00:08:38,308 --> 00:08:42,400
pour mémoriser la valeur pour s'affranchir
de certaines fluctuations.

139
00:08:42,400 --> 00:08:51,265
Et finalement, on aura ici le choix du
canal qu'on a utilisé, ici le canal A1.

140
00:08:51,265 --> 00:08:57,250
On doit également agir dans ce registre de
sélection supplémentaire.

141
00:08:57,250 --> 00:08:59,122
Tout ça, ça se trouve dans la
documentation.

142
00:08:59,122 --> 00:09:02,044
C'est toujours assez difficile d'écrire ce
type de programmes, je

143
00:09:02,044 --> 00:09:06,824
rappelle que la manière habituelle, c'est
de chercher ce type

144
00:09:06,824 --> 00:09:10,482
de programmes dans la documentation, puis
d'essayer de comprendre les

145
00:09:10,482 --> 00:09:14,100
instructions, et c'est beaucoup plus
facile à faire à ce moment-là.

146
00:09:14,100 --> 00:09:16,498
Finalement, on va lancer

147
00:09:16,498 --> 00:09:22,615
la commande du début de la conversion,
puis on va arrêter le processeur,

148
00:09:22,615 --> 00:09:27,640
il sera en low power mode 0, c'est un de
ses modes

149
00:09:27,640 --> 00:09:33,935
d'endormissement, et on va utiliser le
registre de statut pour arrêter le

150
00:09:33,935 --> 00:09:37,640
processeur et pour activer les
interruptions

151
00:09:37,640 --> 00:09:41,542
general interrupt enable de telle manière
que

152
00:09:41,542 --> 00:09:45,124
le processeur s'endorme pendant la
conversion et

153
00:09:45,124 --> 00:09:48,030
que la routine d'interruption réactive le
processeur.

154
00:09:48,030 --> 00:09:53,500
Un autre exemple, cette fois il s'agira
d'un processeur AVR, les registres

155
00:09:53,500 --> 00:09:57,710
ont des noms un petit peu différents, mais
les concepts sont relativement identiques.

156
00:09:57,710 --> 00:10:01,265
Il s’agit donc du sommeil du dé
électronique que vous

157
00:10:01,265 --> 00:10:05,332
avez certainement vu sur le « teaser » de,
du MOOC.

158
00:10:05,332 --> 00:10:06,956
Cette procédure

159
00:10:06,956 --> 00:10:10,370
« Sommeil » va donc endormir le processeur

160
00:10:10,370 --> 00:10:13,960
: on commence par éteindre toutes les
diodes lumineuses.

161
00:10:13,960 --> 00:10:21,640
On enclenche l’interruption sur le bit du
bouton poussoir.

162
00:10:21,640 --> 00:10:26,730
On enclenche spécifiquement cette « Pin
Change Interupt ».

163
00:10:26,730 --> 00:10:32,000
On active l’ensemble des interruptions par
un « set interup ».

164
00:10:32,000 --> 00:10:36,554
Et finalement, on choisit le mode, un mode

165
00:10:36,554 --> 00:10:40,502
parmi toute une série proposée par le
fabricant.

166
00:10:40,502 --> 00:10:45,170
On enclenche et finalement, on passe au
mode de veille.

167
00:10:45,170 --> 00:10:48,170
Et c’est seulement lorsqu’on pressera sur
le

168
00:10:48,170 --> 00:10:51,350
bouton poussoir que le processeur se
rallumera.

169
00:10:51,350 --> 00:10:57,010
Il nous reste un petit problème, c’est de
mesurer cette consommation.

170
00:10:57,010 --> 00:11:00,373
Alors, la consommation en mode normal, on
la mesure facilement avec

171
00:11:00,373 --> 00:11:04,340
un appareil de mesure simple de type des
multimètres qu’on trouve facilement.

172
00:11:04,340 --> 00:11:07,891
Mais lorsqu’il s’agit de mesurer des
courants de l’ordre du

173
00:11:07,891 --> 00:11:12,200
microampère, c’est beaucoup plus difficile
de faire des mesures de courant.

174
00:11:12,200 --> 00:11:14,060
Et là, je vous propose une solution

175
00:11:14,060 --> 00:11:17,714
originale, que je vais essayer de vous
expliquer.

176
00:11:17,714 --> 00:11:22,382
En mode normal, notre montage est alimenté
par

177
00:11:22,382 --> 00:11:26,486
une pile, donc, cet interrupteur, en
quelque

178
00:11:26,486 --> 00:11:29,940
sorte, n’existe pas, il est toujours
allumé.

179
00:11:29,940 --> 00:11:33,342
Pour la manipulation, nous allons ajouter
cet interrupteur.

180
00:11:33,342 --> 00:11:35,702
Nous allons également ajouter, ici, un

181
00:11:35,702 --> 00:11:40,280
condensateur, de l’ordre de 100
microfarads,

182
00:11:40,280 --> 00:11:46,650
et, ici, la possibilité de mesurer la
tension aux bornes de notre montage.

183
00:11:46,650 --> 00:11:52,340
Alors, ce qui semblerait naturel, ce
serait

184
00:11:52,340 --> 00:11:59,030
d’enclencher la mesure, d’enclencher notre
montage,

185
00:11:59,030 --> 00:12:05,156
de brancher le condensateur, de laisser
notre montage

186
00:12:05,156 --> 00:12:11,180
s’endormir, par exemple après 20 secondes
d’absence d’utilisation,

187
00:12:11,180 --> 00:12:16,690
puis de débrancher la pile.

188
00:12:16,690 --> 00:12:23,224
En débranchant la pile, le montage sera
alimenté par le peu d’énergie

189
00:12:23,224 --> 00:12:28,130
qui se trouve dans le condensateur et le
condensateur va se décharger.

190
00:12:28,130 --> 00:12:33,690
On pourra d’ailleurs observer avec le
multimètre la décharge.

191
00:12:33,690 --> 00:12:36,786
Est-ce que c’est une bonne

192
00:12:36,786 --> 00:12:38,850
manière de faire?

193
00:12:38,850 --> 00:12:43,320
Non, parce que le multimètre consomme
beaucoup.

194
00:12:43,320 --> 00:12:47,192
Il faut donc supprimer le multimètre,
refaire

195
00:12:47,192 --> 00:12:51,448
la manipulation de tout à l’heure,
c’est-à-dire, brancher

196
00:12:51,448 --> 00:12:55,680
le condensateur, brancher la pile, laisser
l’appareil

197
00:12:55,680 --> 00:13:01,161
s’endormir, puis débrancher la pile,
laisser, par exemple,

198
00:13:01,161 --> 00:13:06,062
pendant une minute, le montage consommer,
à partir

199
00:13:06,062 --> 00:13:10,095
de l’énergie qui se trouve dans le
condensateur.

200
00:13:10,095 --> 00:13:14,480
Puis, après une minute, faire une mesure
de tension

201
00:13:14,480 --> 00:13:18,080
et, à ce moment-là, on aura une variation
de tension.

202
00:13:18,080 --> 00:13:21,408
On sait que quand on a commencé la mesure,
on avait la

203
00:13:21,408 --> 00:13:25,900
tension de la pile, puisque le
condensateur était connecté à la pile.

204
00:13:25,900 --> 00:13:30,445
La valeur qu’on aura après une minute va

205
00:13:30,445 --> 00:13:34,990
correspondre à ce delta U, cette
différence de tension.

206
00:13:34,990 --> 00:13:40,149
Or, on sait que la charge est égale à la
capacité fois la différence de tension.

207
00:13:40,149 --> 00:13:43,906
On sait aussi que le courant c’est la
charge divisée par le

208
00:13:43,906 --> 00:13:49,990
temps et on va pouvoir, ainsi, calculer
cette consommation, calculer ce courant.

209
00:13:49,990 --> 00:13:51,126
Et avec les mesures

210
00:13:51,126 --> 00:13:57,306
que nous avons faites, on a pu en déduire
un courant de l’ordre de 1 microampère, ce

211
00:13:57,306 --> 00:14:03,970
qui est tout à fait convenable pour ne pas
décharger trop rapidement la pile.

212
00:14:03,970 --> 00:14:08,380
Alors on va se souvenir que la
consommation dépend

213
00:14:08,380 --> 00:14:11,870
de la tension et de la fréquence du
processeur.

214
00:14:11,870 --> 00:14:16,120
On se souvient aussi qu’il y a des modes
d’endormissements,

215
00:14:16,120 --> 00:14:23,078
plus ou moins partiels, du microcontrôleur
pour passer en mode faible consommation Et

216
00:14:23,078 --> 00:14:26,274
on a vu également quelques applications

217
00:14:26,274 --> 00:14:30,560
et quelques trucs pour mesurer cette
consommation.