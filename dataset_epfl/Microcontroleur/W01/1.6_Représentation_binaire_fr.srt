1
00:00:00,000 --> 00:00:05,184
Nous continuons le cours "Comprendre les

2
00:00:05,184 --> 00:00:12,640
microcontrôleurs" Lorsque nous avons parlé
de système logique, nous avons vu

3
00:00:12,640 --> 00:00:14,903
qu'on utilisait des 1 et des 0, et

4
00:00:14,903 --> 00:00:18,710
on sentait bien qu'on utilisait le fameux
système binaire.

5
00:00:18,710 --> 00:00:21,560
Il est temps qu'on en parle un petit peu
plus sérieusement.

6
00:00:21,560 --> 00:00:25,028
Nous allons regarder un peu comment
fonctionne le système de

7
00:00:25,028 --> 00:00:26,360
numération binaire.

8
00:00:26,360 --> 00:00:28,811
Nous allons voir aussi comment on peut
représenter

9
00:00:28,811 --> 00:00:31,430
des nombres binaires dans des registres,
dans des,

10
00:00:31,430 --> 00:00:34,270
objets de taille limitée, d'un nombre de
bits

11
00:00:34,270 --> 00:00:37,418
limités, nous allons voir également
comment représenter des

12
00:00:37,418 --> 00:00:40,260
nombres positifs et négatifs, donc des
nombres signés,

13
00:00:40,260 --> 00:00:43,053
finalement on parlera encore un peu
d'hexadécimal, qui

14
00:00:43,053 --> 00:00:45,930
est beaucoup utilisé dans le monde des
microcontrôleurs,

15
00:00:45,930 --> 00:00:49,350
de BCD, et également de codage de
caractères.

16
00:00:49,350 --> 00:00:50,340
Tout le monde connaît

17
00:00:50,340 --> 00:00:53,835
le système de numération binaire, je ne
vais pas en parler avec beaucoup de

18
00:00:53,835 --> 00:00:58,320
détails, on se souvient qu'on a deux

19
00:00:58,320 --> 00:01:01,050
chiffres à disposition, lorsqu'on les a
mis les

20
00:01:01,050 --> 00:01:06,530
deux on est obligé d'introduire un rang
supplémentaire pour le nombre 10 qui

21
00:01:06,530 --> 00:01:15,421
correspond au 2 du monde décimal, on passe
ensuite à 11, on a ensuite besoin d'un

22
00:01:15,421 --> 00:01:20,770
troisième rang ici, pour exprimer 100,
c'est-à-dire

23
00:01:20,770 --> 00:01:25,992
le nombre 4, et cetera.
On peut remarquer que chaque colonne

24
00:01:25,992 --> 00:01:30,782
représente un poids, ici le poids 1,
exprimé en décimal, le

25
00:01:30,782 --> 00:01:35,596
poids 2, le poids 4, le poids 8, qui
correspondent d'ailleurs

26
00:01:35,596 --> 00:01:40,550
à 2 à la puissance 0, 2 à la puissance 1,
2 à la

27
00:01:40,550 --> 00:01:43,900
puissance 2, et cetera.

28
00:01:43,900 --> 00:01:49,788
Lorsqu'on souhaite passer du binaire au
décimal, c'est relativement simple, il

29
00:01:49,788 --> 00:01:56,160
suffit d'additionner les poids, donc ici
on va dire qu'on a zéro fois le poids 1,

30
00:01:56,160 --> 00:02:02,010
qu'on a une fois le poids 2, qu'on a zéro
fois le poids 4,

31
00:02:02,010 --> 00:02:05,810
on a une fois le poids 8, le résultat nous
donne 8 plus 2,

32
00:02:05,810 --> 00:02:12,050
c'est-à-dire 10 en décimal.
Le système binaire c'est très facile.

33
00:02:12,050 --> 00:02:15,350
Le problème qui se pose, c'est que dans le
système binaire

34
00:02:15,350 --> 00:02:19,110
des nombres, on peut avoir des nombres
aussi grands qu'on le souhaite.

35
00:02:19,110 --> 00:02:22,342
Or, dans la réalité, on va avoir des
objets binaires de

36
00:02:22,342 --> 00:02:27,100
taille limitée, et c'est là que les
problèmes commencent à se présenter.

37
00:02:27,100 --> 00:02:30,913
On a vu qu'une bascule peut mémoriser une
valeur

38
00:02:30,913 --> 00:02:36,173
binaire, un bit, on parle de registre
lorsqu'on est en face d'un ensemble de

39
00:02:36,173 --> 00:02:42,068
plusieurs bascules, un registre contient
un mot binaire, remarquez que je n'ai

40
00:02:42,068 --> 00:02:47,380
pas écrit un nombre binaire, ce mot
binaire peut avoir une signification a

41
00:02:47,380 --> 00:02:51,206
priori quelconque, et dans certaines
situations,

42
00:02:51,206 --> 00:02:54,310
ce mot binaire va représenter un nombre.

43
00:02:54,310 --> 00:02:56,060
Essayons d'y voir un petit peu plus clair.

44
00:02:56,060 --> 00:03:01,514
On donne souvent un numéro à chacun des
bits, ici j'ai présenté

45
00:03:01,514 --> 00:03:07,046
un octet, un mot de 8 bits, on va donner
des numéros qui commencent par zéro,

46
00:03:07,046 --> 00:03:10,821
les informaticiens ont toujours l'habitude
de commencer

47
00:03:10,821 --> 00:03:12,927
par zéro, on termine ici au bit

48
00:03:12,927 --> 00:03:20,177
7, prenons un exemple concret: on a une
valeur binaire placée dans un registre.

49
00:03:20,177 --> 00:03:21,203
La seule chose qu'on

50
00:03:21,203 --> 00:03:24,836
peut affirmer, c'est que ce bit est à 1,
ce bit

51
00:03:24,836 --> 00:03:29,580
est à 1, et que les autres bits sont à
zéro.

52
00:03:29,580 --> 00:03:32,226
Il n'est pour le moment pas question de
nombres.

53
00:03:32,226 --> 00:03:35,156
D'ailleurs, nous aurons l'occasion de voir
dans un

54
00:03:35,156 --> 00:03:37,844
dispositif que nous allons utiliser très
souvent dans ce

55
00:03:37,844 --> 00:03:41,798
cours "Comprendre les microcontrôleurs"
que, à cet endroit-là,

56
00:03:41,798 --> 00:03:46,130
d'un certain registre, se trouvera une led
rouge connectée,

57
00:03:46,130 --> 00:03:49,580
qu'à cet endroit se connectera une led
verte, donc on

58
00:03:49,580 --> 00:03:52,880
peut dire qu'avec ce mot binaire dans le
registre en

59
00:03:52,880 --> 00:03:56,088
question, on va allumer la lampe rouge et
on va

60
00:03:56,088 --> 00:04:00,100
éteindre la lampe verte, on ne peut rien
dire d'autre.

61
00:04:00,100 --> 00:04:05,968
Par contre, si ce mot est considéré comme
un nombre binaire, alors on

62
00:04:05,968 --> 00:04:11,338
peut faire ce qu'on a fait tout à l'heure,
calculer sa valeur en décimal, ici une

63
00:04:11,338 --> 00:04:17,378
fois 1, zéro fois 2, fois 4, fois 8,

64
00:04:17,378 --> 00:04:23,028
fois 16, une fois 32, ça nous donne donc
le résultat 33.

65
00:04:23,028 --> 00:04:27,580
La question c'est que ce mot binaire qui
représente un

66
00:04:27,580 --> 00:04:32,670
nombre binaire, est-ce que c'est possible
de travailler avec lui?

67
00:04:32,670 --> 00:04:36,465
Et en fait c'est tout le problème de
l'arithmétique modulaire qu'on va essayer

68
00:04:36,465 --> 00:04:37,860
d'effleurer maintenant.

69
00:04:37,860 --> 00:04:41,996
Prenons pour simplifier un exemple, qui
n'est pas

70
00:04:41,996 --> 00:04:45,240
très utilisé, mais les mots de 3 bits.

71
00:04:45,240 --> 00:04:50,980
Chaque mots de 3 bits peut représenter 8
nombres différents.

72
00:04:50,980 --> 00:04:53,810
C'est en effet la valeur de 2 à la
puissance 3.

73
00:04:53,810 --> 00:04:57,674
On peut par exemple décider de représenter
les nombres

74
00:04:57,674 --> 00:05:01,550
positifs allant de zéro à 7, c'est-à-dire
de zéro

75
00:05:01,550 --> 00:05:06,780
à 2 à la puissance 3 moins 1.
Est-ce que l'addition,

76
00:05:06,780 --> 00:05:11,013
dont on a l'habitude en arithmétique, peut
fonctionner?

77
00:05:11,013 --> 00:05:16,640
Prenons un exemple: 10 plus 1.

78
00:05:16,640 --> 00:05:21,632
Comme il s'agit de nombres de 3 bits, je
devrais écrire ici clairement les

79
00:05:21,632 --> 00:05:26,830
valeurs des deux autres bits.
je vais faire le calcul, zéro plus

80
00:05:26,830 --> 00:05:30,975
1 me donne 1, 1 plus zéro, me donne

81
00:05:30,975 --> 00:05:35,632
1, zéro plus zéro me donne zéro, le nombre
écrit

82
00:05:35,632 --> 00:05:40,816
en binaire, ici c'était la valeur 2, ici
c'était la

83
00:05:40,816 --> 00:05:45,280
veleur 1, le résultat c'est 3, tout semble
parfaitement correct.

84
00:05:45,280 --> 00:05:47,824
Prenons un second exemple.

85
00:05:47,824 --> 00:05:53,590
On va additionner la valeur 3 à la valeur
3.

86
00:05:53,590 --> 00:05:58,846
Le total sera: 1 plus 1, ça me

87
00:05:58,846 --> 00:06:04,396
donne zéro, j'ai une retenue de 1.
1 plus 1 plus 1, ça va me

88
00:06:04,396 --> 00:06:10,020
donner 1, avec une retenue de 1, et ici
j'ai donc un 1.

89
00:06:10,020 --> 00:06:13,980
Et maintenent je mets les valeurs en
binaire, j'avais le nombre

90
00:06:13,980 --> 00:06:18,586
3, j'avais le nombre 3, ici j'ai la valeur
zéro fois 1,

91
00:06:18,586 --> 00:06:23,611
plus une fois 2, plus une fois 4, c'est
donc bien égal à la

92
00:06:23,611 --> 00:06:28,926
valeur 6, c'est donc tout à fait correct.
Prenons un dernier

93
00:06:28,926 --> 00:06:34,759
exemple, la valeur 6 auquel j'additionne

94
00:06:34,759 --> 00:06:39,830
la valeur 3.
Et au total j'obtiens:

95
00:06:39,830 --> 00:06:44,150
zéro plus 1 me donne un, 1 plus 1 me donne

96
00:06:44,150 --> 00:06:48,798
zéro, je retiens 1, 1 plus 1 me donne
zéro, et

97
00:06:48,798 --> 00:06:53,955
j'ai encore une retenue.
Là il se pose effectivement un

98
00:06:53,955 --> 00:06:59,380
problème.
J'avais ici le nombre 6,

99
00:06:59,380 --> 00:07:04,670
j'avais ici le nombre 3, et mon résultat
est égal à 1.

100
00:07:04,670 --> 00:07:05,640
Pourquoi?

101
00:07:05,640 --> 00:07:09,580
Parce qu'en réalité j'ai perdu le 1 qui
devrait

102
00:07:09,580 --> 00:07:13,100
se trouver là, puisque, je vous le
rappelle, nous

103
00:07:13,100 --> 00:07:16,605
avons décidé de travailler des mots de 3
bits.

104
00:07:16,605 --> 00:07:21,580
On est arrivé à ce qu'on appelle le
dépassement de capacité.

105
00:07:21,580 --> 00:07:24,590
Donc, comme on l'a vu, on obtient un
dépassement

106
00:07:24,590 --> 00:07:27,650
de capacité, le résultat est en fait privé
du bit

107
00:07:27,650 --> 00:07:31,004
de poids 8 qui n'existe pas sur une
notation à

108
00:07:31,004 --> 00:07:35,024
trois bits, et en fait, du point de vue
arithmétique,

109
00:07:35,024 --> 00:07:40,781
le résultat c'est vraiment 6 plus 3,
modulo 8, je rappelle que le modulo,

110
00:07:40,781 --> 00:07:46,500
c'est le reste de la division entière, une
opération arithmétique très importante.

111
00:07:46,500 --> 00:07:51,150
Essayons de mieux comprendre ces nombres
modulaires positifs.

112
00:07:51,150 --> 00:07:55,380
Et il y a deux représentations qui vont
nous aider à mieux les comprendre,

113
00:07:55,380 --> 00:07:59,610
d'une part de cercle, et d'autre part
cette fonction que nous allons voir ici.

114
00:07:59,610 --> 00:08:03,543
Qu'est-ce qui se passe?

115
00:08:03,543 --> 00:08:11,275
Lorsque je pars de zéro, l'incrémentation,
l'ajout de 1, va me passer à 1, à 2, à 3,

116
00:08:11,275 --> 00:08:14,011
à 4, à 5, à 6, à 7, avec

117
00:08:14,011 --> 00:08:18,010
les valeurs binaires correspondantes que
vous avez pu lire ici.

118
00:08:18,010 --> 00:08:21,413
Lorsque je rajoute 1 à 7, je retombe sur
zéro,

119
00:08:21,413 --> 00:08:25,695
donc cette notation en cercle semble tout
à fait cohérente.

120
00:08:25,695 --> 00:08:27,865
Mais qu'est-ce qui s'est passé?

121
00:08:27,865 --> 00:08:30,735
J'ai eu en réalité un dépassement de
capacité.

122
00:08:30,735 --> 00:08:34,445
Cette frontière qui se trouve là
correspond au dépassement de

123
00:08:34,445 --> 00:08:38,918
capacité, correspond à ce qu'on pourrait
appeler une erreur de calcul.

124
00:08:38,918 --> 00:08:41,720
C'est un calcul juste modulo, mais ce
n'est

125
00:08:41,720 --> 00:08:44,450
pas un calcul juste au sens habituel du
terme.

126
00:08:44,450 --> 00:08:47,497
dans cette représentation, on va
représenter les

127
00:08:47,497 --> 00:08:51,140
nombres sur une droite, qui est évidemment
infinie,

128
00:08:51,140 --> 00:08:56,100
par contre, la fonction correspondante ne
peut prendre que les huit valeurs

129
00:08:56,100 --> 00:09:01,250
qu'on peut exprimer avec 3 bits, et de
nouveau on a ce phénomène

130
00:09:01,250 --> 00:09:06,740
de dépassement de capacité qui va se
produire lors du passage de la

131
00:09:06,740 --> 00:09:12,230
valeur 7 à la valeur zéro, à chaque fois
qu'on franchit cette ligne-là.

132
00:09:12,230 --> 00:09:16,947
Il reste encore un problème important,
c'est la possibilité

133
00:09:16,947 --> 00:09:20,505
de représenter des nombres négatifs, on
est très souvent intéressé

134
00:09:20,505 --> 00:09:23,710
d'avoir à la fois des nombres positifs et
négatifs, et

135
00:09:23,710 --> 00:09:27,242
de ne pas devoir les traiter séparément au
niveau d'un

136
00:09:27,242 --> 00:09:29,612
programme, et il existe plusieurs

137
00:09:29,612 --> 00:09:32,435
solutions pour représenter ces nombres
négatifs.

138
00:09:32,435 --> 00:09:37,378
je ne vais pas toutes vous les énumérer,
évidemment, utilisons plutôt celle qui est

139
00:09:37,378 --> 00:09:42,620
la plus utilisée, qu'on appelle la
notation à complément à deux.

140
00:09:42,620 --> 00:09:47,737
En fait j'ai repris les deux dessins de
tout à l'heure, mais cette

141
00:09:47,737 --> 00:09:52,564
fois on a décidé d'attribuer, bon, la même
chose pour le

142
00:09:52,564 --> 00:09:57,476
zéro, pour le 1, pour le 2, pour le 3,
mais ici on a décidé de faire une

143
00:09:57,476 --> 00:10:02,774
frontière qui sera la frontière du
dépassement de capacité, et

144
00:10:02,774 --> 00:10:07,922
les nombres qui suivent seront moins 4,
moins 3,

145
00:10:07,922 --> 00:10:10,960
moins 2, moins 1, et puis ici zéro.

146
00:10:10,960 --> 00:10:13,164
Alors ça ce n'est pas vraiment une
frontière

147
00:10:13,164 --> 00:10:16,825
on passe simplement des nombres négatifs
aux nombres positifs,

148
00:10:16,825 --> 00:10:19,826
ou des nombres positifs aux nombres
négatifs, je mets

149
00:10:19,826 --> 00:10:22,327
quand même ici une petite ligne, mais
c'est une

150
00:10:22,327 --> 00:10:24,645
ligne en quelques sortes correcte du point
de

151
00:10:24,645 --> 00:10:26,754
vue des calculs, par contre, la ligne qui
est

152
00:10:26,754 --> 00:10:29,284
dangereuse, le dépassement de capacité,
qui avant se trouvait

153
00:10:29,284 --> 00:10:32,120
dns cette région-là, se trouve maintenent
dans cette région-là.

154
00:10:32,120 --> 00:10:33,065
Et on voit bien sur

155
00:10:33,065 --> 00:10:38,295
l'autre diagramme que on a le même
problème lorsqu'on passe ici

156
00:10:38,295 --> 00:10:42,720
de 3 à moins 4, on a un dépassement de
capacité.

157
00:10:42,720 --> 00:10:48,294
Alors, il est à noter que la plupart des
microcontrôleurs sont capables

158
00:10:48,294 --> 00:10:53,326
de faire du calcul sur ces nombres
négatifs, sans qu'on leur

159
00:10:53,326 --> 00:10:58,382
dise rien de spécial, le problème c'est
que par exemple le langage C n'est

160
00:10:58,382 --> 00:11:01,978
pas capable de signaler ces dépassements
de capacité.

161
00:11:01,978 --> 00:11:06,570
Le processeur qui est à l'intérieur du
microcontrôleur sait le faire,

162
00:11:06,570 --> 00:11:11,070
mais le C ne donne pas, en quelques
sortes, cet accès.

163
00:11:11,070 --> 00:11:17,370
Donc, ces nombres négatifs, très souvent,
on les utilise en 8 bits, en 16 bits ou en

164
00:11:17,370 --> 00:11:23,670
32 bits, avec 4 bits ils vont seulement de
zéro à 15, donc de moins 8 à plus 7,

165
00:11:23,670 --> 00:11:29,282
heu, on va de zéro à 255 pour 8 bits, avec
des nombres négatifs

166
00:11:29,282 --> 00:11:34,300
ici, la même chose pour 16 bits, la même
chose pour 32 bits, à noter que même en

167
00:11:34,300 --> 00:11:37,138
nombres positifs et négatifs, vous voyez
que pour

168
00:11:37,138 --> 00:11:39,184
32 bits on arrive déjà à des nombres

169
00:11:39,184 --> 00:11:42,490
extrêmement importants, et ces nombres de
32 bits

170
00:11:42,490 --> 00:11:46,780
peuvent être tout à fait manipulés par des
microcontrôleurs.

171
00:11:46,780 --> 00:11:49,216
Les noms qu'on donne à ces nombres

172
00:11:49,216 --> 00:11:53,438
de taille limitée, alors le byte et
l'octet c'est effectivement

173
00:11:53,438 --> 00:11:56,506
des noms connus et bien standardisés, byte
à l'anglaise, octet est

174
00:11:56,506 --> 00:11:59,272
bien souvent utilisé en français, pour les
autres valeurs, il

175
00:11:59,272 --> 00:12:02,395
existe des standardisations, mais qui ne
sont malheureusement pas du tout

176
00:12:02,395 --> 00:12:05,607
suivies, on voit souvent le terme de
nibble pour des

177
00:12:05,607 --> 00:12:08,155
mots de 4 bits, mais pour les mots de16
bits et

178
00:12:08,155 --> 00:12:10,245
de 32 bits, je n'ai même pas osé mettre
une

179
00:12:10,245 --> 00:12:14,228
valeur parce que c'est relativement
incohérent, et en particulier les langages

180
00:12:14,228 --> 00:12:18,373
de programmation ne sont pas toujours très
clairs à ce sujet, il faudra être

181
00:12:18,373 --> 00:12:20,875
extrêmement prudent avec le langage C à

182
00:12:20,875 --> 00:12:25,470
propos des types correspondants à ces
valeurs arithmétiques.

183
00:12:25,470 --> 00:12:29,790
L'écriture de nombres en binaire est
fastidieuse.

184
00:12:29,790 --> 00:12:30,878
C'est trop long.

185
00:12:30,878 --> 00:12:33,870
Si vous avez des mots de16 bits, c'est
difficile

186
00:12:33,870 --> 00:12:36,800
de reconnaître les 1 et les zéros là, au
milieu.

187
00:12:36,800 --> 00:12:39,323
La conversion en décimal est aussi

188
00:12:39,323 --> 00:12:43,174
quelque chose de relativement compliqué.
C'est la

189
00:12:43,174 --> 00:12:46,974
raison pour laquelle on utilise très
souvent une notation en

190
00:12:46,974 --> 00:12:51,411
hexadécimal simplement pour exprimer des
nombres binaires

191
00:12:51,411 --> 00:12:55,428
plus faciles à écrire.
Quelle va être la méthode?

192
00:12:55,428 --> 00:13:04,412
Et bien on va simplement ici regrouper par
morceaux de 4 bits et ensuite donner un

193
00:13:04,412 --> 00:13:08,370
code pour chacun de ces morceaux de 4
bits.

194
00:13:08,370 --> 00:13:10,780
Voilà le code qui est à disposition.

195
00:13:10,780 --> 00:13:12,956
Zéro, 1, 2, 3, 4, 5, 6, 7,

196
00:13:12,956 --> 00:13:16,028
8, 9, évidemment, comme le système
décimal, comme

197
00:13:16,028 --> 00:13:18,414
il a fallu rajouter des caractères, et
bien

198
00:13:18,414 --> 00:13:21,422
ici on a rajouté les premières lettres de
l'alphabet.

199
00:13:21,422 --> 00:13:25,524
Alors ces nombres hexadécimaux, on les
reconnaît facilement, parce qu'ils

200
00:13:25,524 --> 00:13:29,712
ont souvent, non seulement des chiffres,
mais également, les premières lettres

201
00:13:29,712 --> 00:13:32,206
de l'alphabet, et, je rappelle, il faut
couper

202
00:13:32,206 --> 00:13:35,010
le nombre binaire en tranches de 4 bits,
bien

203
00:13:35,010 --> 00:13:38,839
entendu depuis la droite, et ensuite bien
sûr coder

204
00:13:38,839 --> 00:13:42,510
chaque groupe avec ces chiffres de zéro à
F.

205
00:13:42,510 --> 00:13:46,282
Un autre système qui n'a strictement rien
à voir

206
00:13:46,282 --> 00:13:51,164
mais que parfois les gens confondent,
c'est le système BCD.

207
00:13:51,164 --> 00:13:54,810
Alors le système BCD il n'est plus
beaucoup utilisé, mais il est

208
00:13:54,810 --> 00:13:57,945
encore parfois utilisé, par exemple pour
les circuits horloges.

209
00:13:57,945 --> 00:14:02,201
Il s'agit bien dans ce cas-là de nombres
décimaux, il faut s'en souvenir.

210
00:14:02,201 --> 00:14:05,280
Chaque chiffre décimal est codé sur 4
bits.

211
00:14:05,280 --> 00:14:10,831
Par exmple, un mode 16 bits peut coder des
nombres BCD de zéro jusqu'à

212
00:14:10,831 --> 00:14:16,154
seulement 9'999.
Prenons un exemple.

213
00:14:16,154 --> 00:14:19,388
Voilà une valeur horaire,

214
00:14:19,388 --> 00:14:24,538
21h35 codée en BCD 2, 1,

215
00:14:24,538 --> 00:14:29,662
codés chaque fois sur 4 bits, 3, 5, de la
même

216
00:14:29,662 --> 00:14:34,800
manière, mais il ne s'agit pas
d'hexadécimal,

217
00:14:34,800 --> 00:14:38,784
et il faut bien comprendre que le passage
du binaire au BCD

218
00:14:38,784 --> 00:14:42,089
nécessite de nombreuses opérations, que
c'est

219
00:14:42,089 --> 00:14:44,651
cette fameuse conversion du binaire au
décimal,

220
00:14:44,651 --> 00:14:48,190
et c'est encore plus compliqué pour passer
du décimal au binaire.

221
00:14:48,190 --> 00:14:56,730
Terminons ce chapitre par parler du codage
des caractères, on a certainement

222
00:14:56,730 --> 00:14:58,992
entendu parler du code ASCII, qui

223
00:14:58,992 --> 00:15:02,346
est effectivement extrêmement ancien, il
date de

224
00:15:02,346 --> 00:15:05,651
1963, il était codé à l'époque sur 7 bits,
ce qui ne nous

225
00:15:05,651 --> 00:15:09,540
arrange pas du tout, et ce qui est
dramatique pour nous autres, francophones,

226
00:15:09,540 --> 00:15:13,634
c'est qu'il ne contient pas de lettres
accentuées.

227
00:15:13,634 --> 00:15:18,652
Voilà ce code tel qu'il est, tel qu'il a
été standardisé, prenons

228
00:15:18,652 --> 00:15:23,690
par exemple la lettre T pour regarder
comment est-ce qu'on la code,

229
00:15:23,690 --> 00:15:28,982
ici sur la ligne on a la valeur 4, donc ça
signifie

230
00:15:28,982 --> 00:15:34,518
qu'on aura la valeur zéro, 1, zéro,

231
00:15:34,518 --> 00:15:40,824
zéro pour les bits de poids faibles, et là
ici j'ai la valeur 5 qui va coder les

232
00:15:40,824 --> 00:15:47,384
bits de poids forts, 1, zéro, 1, donc ici
la lettre T correspond

233
00:15:47,384 --> 00:15:53,400
bien à cette valeur binaire 1010100, donc
un mot de 7 bits.

234
00:15:53,400 --> 00:15:55,010
Il est à noter qu'il existe

235
00:15:55,010 --> 00:15:59,933
beaucoup d'extensions du code ASCII qui
malheureusement

236
00:15:59,933 --> 00:16:03,306
ne sont pas compatibles les unes avec les
autres, et c'est

237
00:16:03,306 --> 00:16:05,378
une jungle relativement compliquée, même

238
00:16:05,378 --> 00:16:07,674
sur internet plusieurs codes cohabitent,
on

239
00:16:07,674 --> 00:16:13,286
utilise assez souvent un code qui
s'appelle l'UTF et en particulier sa

240
00:16:13,286 --> 00:16:18,940
version 8 bits UTF-8, mais d'autres codes
sont également utilisés.

241
00:16:18,940 --> 00:16:21,965
En ce qui concerne les microcontrôleurs,
disons qu'on n'a pas

242
00:16:21,965 --> 00:16:24,990
très souvent besoin de lettres accentuées,
et qu'on peut assez

243
00:16:24,990 --> 00:16:28,840
bien s'en sortir avec le système ASCII
traditionnel.

244
00:16:28,840 --> 00:16:33,080
Donc je vous rappelle que dans ce
chapitre, nous avons parlé de

245
00:16:33,080 --> 00:16:38,608
numération binaire, nous avons parlé de
nombres binaires de taille limitée, nous

246
00:16:38,608 --> 00:16:43,378
avons parlé du codage des nombres
négatifs, et nous avons également abordé

247
00:16:43,378 --> 00:16:50,080
la question de l'hexadécimal, du BCD et
également du codage des caractères.