1
00:00:04,055 --> 00:00:08,110
Bonjour, nous commençons aujourd'hui la
programmation en C.

2
00:00:08,110 --> 00:00:13,180
Dans l'industrie, si on doit faire un
projet, on choisit un microcontrôleur, on

3
00:00:13,180 --> 00:00:19,620
achète les outils de développement, et on
s'investit pour terminer l'application.

4
00:00:19,620 --> 00:00:28,800
Avec Arduino, il y a eu tout à coup une
possibilité qui concernait les amateurs,

5
00:00:28,800 --> 00:00:34,946
qui a eu énormément de succès.
Ce succès est dû à deux raisons, d'une

6
00:00:34,946 --> 00:00:41,620
part, l'environnement est gratuite, et
tourne sur différentes plates-formes.

7
00:00:41,620 --> 00:00:43,490
Et d'autre part, les trois

8
00:00:43,490 --> 00:00:47,342
grands fabriquants de microcontrôleurs,
actuellement,

9
00:00:47,342 --> 00:00:49,718
supportent cet Arduino avec des

10
00:00:49,718 --> 00:00:54,850
appelations différentes, Pinguino pour
Microchip, Energia

11
00:00:54,850 --> 00:00:59,850
pour Texas Instruments, avec CMSP.
Le but de notre

12
00:00:59,850 --> 00:01:05,041
cours est de vous faire comprendre les
microcontrôleurs, et de vous aider

13
00:01:05,041 --> 00:01:09,683
à les mettre en œuvre.
Mettre en œuvre, sans

14
00:01:09,683 --> 00:01:14,574
avoir une pratique est difficile.
Donc, nous vous

15
00:01:14,574 --> 00:01:19,938
encourageons à acheter, ou si vous ne les
avez pas déjà, une de ces

16
00:01:19,938 --> 00:01:25,476
nombreuses cartes microcontrôleurs, euh,
qui existent, et nous

17
00:01:25,476 --> 00:01:30,893
proposerons parfois, des travaux pratiques
qui

18
00:01:30,893 --> 00:01:36,653
n'interviennent pas dans le, l'évaluation
du cours, et qui vous

19
00:01:36,653 --> 00:01:42,260
permettront de tester des programmes que
l'on a cités ou de les compléter.

20
00:01:42,260 --> 00:01:44,828
Bien, donc,

21
00:01:44,828 --> 00:01:50,485
ce que nous allons faire maintenant, c'est
de

22
00:01:50,485 --> 00:01:56,650
comprendre la structure d'un
microcontrôleur, euh, voir comment on peut

23
00:01:56,650 --> 00:02:02,628
gérer simplement, des entrées sorties, et
surtout,

24
00:02:02,628 --> 00:02:09,800
apprendre à voir comment on peut gérer des
entrées-sorties,

25
00:02:09,800 --> 00:02:15,040
et surtout apprendre à écrire les
programmes correctement.

26
00:02:15,040 --> 00:02:20,870
Revenons à notre, euh, dessin qui
montrait,

27
00:02:20,870 --> 00:02:25,570
euh, les plates-formes sur lesquelles les
logiciels tournent.

28
00:02:25,570 --> 00:02:30,716
On va essentiellement s'occuper d'Arduino
qui tourne sur

29
00:02:30,716 --> 00:02:35,553
de nombreuses cartes de type AVR, et avec
Energia

30
00:02:35,553 --> 00:02:40,452
qui tourne sur MSP.
Alors, ce que j'ai dit, c'est

31
00:02:40,452 --> 00:02:45,390
que l'intérêt, pour le débutant d'Arduino,
est que l'on cache la

32
00:02:45,390 --> 00:02:50,360
complexité du processeur, on la remettra
en évidence, rassurez-vous, et que

33
00:02:50,360 --> 00:02:55,680
l'on travaille avec des pins qui sont des
sorties, ou des entrées,

34
00:02:55,680 --> 00:03:00,682
et on va garder la possibilité de
programmer ces

35
00:03:00,682 --> 00:03:05,770
pins, soit en entrée, soit en sortie.
Pour cela, il nous

36
00:03:05,770 --> 00:03:11,020
faut des instructions, et prenons tout de
suite une implication pratique.

37
00:03:11,020 --> 00:03:16,550
Sur la pin trois, on va brancher une led
avec sa résistance.

38
00:03:16,550 --> 00:03:19,450
Il faudra donc un zéro pour allumer la
led.

39
00:03:19,450 --> 00:03:25,899
La flèche, ici, montre que c'est une
sortie vis-à-vis du processeur.

40
00:03:25,899 --> 00:03:32,430
Mais le courant va devoir rentrer dans le
processeur, hein, pour allumer la led.

41
00:03:32,430 --> 00:03:34,626
Sur la pin quatre, et bien, on va mettre
un

42
00:03:34,626 --> 00:03:38,080
poussoir, on l'a expliqué avec sa, sa
résistance pour l'amp.

43
00:03:38,080 --> 00:03:44,664
Et les instructions Arduino, c'est pour
définir cette direction.

44
00:03:44,664 --> 00:03:49,250
C'est pinMode, la pin trois est en sortie,
les pin quatre est à l'entrée.

45
00:03:49,250 --> 00:03:50,930
PinMode, c'est facile

46
00:03:50,930 --> 00:03:55,880
de se souvenir, c'est une instruction qui
se termine par un point-virgule.

47
00:03:55,880 --> 00:04:01,380
Et si on veut maintenant allumer la led,
et bien, on

48
00:04:01,380 --> 00:04:06,805
a l'instruction digitalWrite.
On va écrire sur cette pin en digital.

49
00:04:06,805 --> 00:04:11,130
On verra une fois que on peut aussi écrire
en analogique.

50
00:04:11,130 --> 00:04:16,466
Sur la pin trois, on met soit high, qui
est en fait, l'état logique

51
00:04:16,466 --> 00:04:22,120
un, soit un low qui est l'état logique
zéro, cinq volts, zéro

52
00:04:22,120 --> 00:04:27,610
volt, high, low, selon les habitudes, euh,
prises par Arduino.

53
00:04:27,610 --> 00:04:34,330
Si on veut lire le poussoire, on doit
écrire digitalRead de quatre.

54
00:04:34,330 --> 00:04:36,970
Alors, commençons par faire le fameux

55
00:04:36,970 --> 00:04:41,050
programme, euh, à Arduino, euh,
clignotement, pink.

56
00:04:41,050 --> 00:04:41,642
En

57
00:04:41,642 --> 00:04:46,210
C, c'est Hello World.
Ici, ça sera clignoter.

58
00:04:46,210 --> 00:04:49,850
On doit définir que la pin trois est en
sortie.

59
00:04:49,850 --> 00:04:55,560
On doit ensuite répéter, écrire, attendre,

60
00:04:55,560 --> 00:05:01,136
écrire, attendre.
La fonction qui va s'exécuter en

61
00:05:01,136 --> 00:05:07,320
permanence, elle s'appelle loop.
L'initialisation s'appelle setup,

62
00:05:07,320 --> 00:05:12,280
et il faut bien remarquer cette structure

63
00:05:12,280 --> 00:05:17,508
du C, où on a toujours une accolade
ouvrante et

64
00:05:17,508 --> 00:05:22,538
une accolade fermante, et parfois
l'accolade est

65
00:05:22,538 --> 00:05:27,610
mise, ouvrante est mise, euh, au début
d'une ligne, euh,

66
00:05:27,610 --> 00:05:32,699
ici, pour gagner un petit peu de place,
euh, elle est mise à côté

67
00:05:32,699 --> 00:05:34,510
de l'instruction.

68
00:05:34,510 --> 00:05:39,805
Et toujours, on a des points-virgules à la
fin des instructions.

69
00:05:39,805 --> 00:05:42,580
Si vous les oubliez, vous avez des
messages

70
00:05:42,580 --> 00:05:46,886
qui peuvent être parfois un petit peu,
euh, inappropriés.

71
00:05:46,886 --> 00:05:53,650
Alors, comme dans tout microcontrôleur, il
y a une phase d'initialisation,

72
00:05:53,650 --> 00:05:58,193
et même dans votre PC, vous en souffrez
avec tout ce temps de démarrage

73
00:05:58,193 --> 00:06:01,650
dans le fond de votre PC, et ensuite, on
rentre dans une

74
00:06:01,650 --> 00:06:04,380
boucle, où le programme fait
successivement

75
00:06:04,380 --> 00:06:06,100
ce qu'on lui a dit de faire.

76
00:06:06,100 --> 00:06:12,500
Alors, ceci n'est pas un programme C,
c'est vraiment un programme Arduino.

77
00:06:12,500 --> 00:06:17,102
En C, on rentre dans le programme avec un
main, et puis une fois qu'on

78
00:06:17,102 --> 00:06:20,839
a fini d'initialiser, et bien, c'est
l'instruction while

79
00:06:20,839 --> 00:06:23,380
que l'on verra tout à l'heure qui permet

80
00:06:23,380 --> 00:06:26,270
de répéter éternellement la boucle.

81
00:06:26,270 --> 00:06:30,200
Bon, maintenant, si je vous montre ce
programme dans une semaine,

82
00:06:30,200 --> 00:06:34,800
vous allez inévitablement dire, mais
qu'est-ce que c'est que cette pin trois?

83
00:06:34,800 --> 00:06:37,660
Output, bon, et bien, ça doit être une
sortie.

84
00:06:37,660 --> 00:06:38,890
Ça, je me souviens.

85
00:06:38,890 --> 00:06:45,036
Ensuite, ici, tiens, on retrouve un trois,
on a l'air de mettre à zéro.

86
00:06:45,036 --> 00:06:45,933
À quoi ça sert?

87
00:06:45,933 --> 00:06:48,486
Qu'est-ce qu'on cherche à faire?
On met

88
00:06:48,486 --> 00:06:52,090
un zéro, on met un un, on attend.
De quoi s'agit-il?

89
00:06:52,090 --> 00:06:55,626
Alors, naturellement, vous me direz, ce
programme est mal

90
00:06:55,626 --> 00:07:00,170
écrit, il fallait documenter, ici, ce que
l'on fait.

91
00:07:00,170 --> 00:07:03,309
Et si on commence à mettre des é, des
commentaires à

92
00:07:03,309 --> 00:07:07,801
chaque instruction, euh, ça va en fait,
pas aider la lisibilité.

93
00:07:07,801 --> 00:07:13,554
Ce qui est important, c'est de dire, ici,
comme première chose, la pin

94
00:07:13,554 --> 00:07:15,590
trois, c'est une led.

95
00:07:15,590 --> 00:07:22,570
Donc, on peut le déclarer avec les
notations Arduino, int led égal trois.

96
00:07:22,570 --> 00:07:26,585
On comprendra, une fois, pourquoi je
n'aime pas cette notation.

97
00:07:26,585 --> 00:07:33,930
Je préfère le define, qui en fait, annonce
un dictionnaire.

98
00:07:33,930 --> 00:07:38,799
Toutes les fois que vous avez écrit led
dans le programme, et bien,

99
00:07:38,799 --> 00:07:43,871
le compilateur va mettre trois à la place.
Led espace trois, pas

100
00:07:43,871 --> 00:07:49,080
de point-virgule à la fin, puisque ce
n'est pas une instruction.

101
00:07:49,080 --> 00:07:54,180
C'est vraiment une équivalence qui nous
permet maintenant d'écrire

102
00:07:54,180 --> 00:07:59,120
led, ici, et puis d'écrire led aussi dans
le digitalWrite.

103
00:07:59,120 --> 00:08:04,014
Et alors maintenant, et bien, pour
allumer, il faut mettre un low, mais dans

104
00:08:04,014 --> 00:08:08,010
d'autres schémas, on a vu, on peut tourner
la diode

105
00:08:08,010 --> 00:08:11,210
à l'envers, et pour l'allumer, il faut
mettre un high.

106
00:08:11,210 --> 00:08:16,327
Donc, ça, si dans chaque partie du
programme, il

107
00:08:16,327 --> 00:08:21,847
faut répéter, euh, c'est un low pour
allumer, ça n'a pas de sens.

108
00:08:21,847 --> 00:08:24,190
Donc, on va définir, dire, et bien,

109
00:08:24,190 --> 00:08:29,190
ça c'est la fonction allumée, la fonction
LedOn.

110
00:08:29,190 --> 00:08:33,770
Et je vais définir LedOn

111
00:08:33,770 --> 00:08:38,138
comme étant cette instruction.
Ce qui me permettra, dans le

112
00:08:38,138 --> 00:08:43,138
programme, d'écrire très élégamment LedOn,
delay,

113
00:08:43,138 --> 00:08:47,846
LedOff, delay.
Dans un mois, vous saurez très bien ce que

114
00:08:47,846 --> 00:08:54,730
j'ai voulu faire avec ce programme.
La prochaine chose à comprendre,

115
00:08:54,730 --> 00:08:57,572
c'est comment gérer une entrée.

116
00:08:57,572 --> 00:09:01,150
On a branché un poussoir sur la pin
quatre.

117
00:09:01,150 --> 00:09:05,110
Donc, on va définir, pinMode, quatre,
input.

118
00:09:05,110 --> 00:09:09,050
On a l'instruction digitalRead de quatre,

119
00:09:09,050 --> 00:09:12,125
mais attention, ça n'est pas une
expression.

120
00:09:12,125 --> 00:09:15,688
Si vous dites un processeur digitalRead de
quatre, il

121
00:09:15,688 --> 00:09:20,070
va vous répondre, OK, j'ai lu la pin
quatre,

122
00:09:20,070 --> 00:09:24,610
j'ai lu que c'était un ou zéro, mais
qu'est-ce que j'en fais?

123
00:09:24,610 --> 00:09:25,426
Hein?

124
00:09:25,426 --> 00:09:30,680
Alors, le digitalRead, vous rend une
valeur qui

125
00:09:30,680 --> 00:09:35,216
est un, si relâché, zéro si c'est pressé,
et

126
00:09:35,216 --> 00:09:40,190
on utilise, le plus souvent, l'instruction
if

127
00:09:40,190 --> 00:09:45,400
pour prendre une décision si cette touche
est pressée, ou relâchée.

128
00:09:45,400 --> 00:09:50,356
Donc, on écrira if, parenthèses, avec
justement cette

129
00:09:50,356 --> 00:09:55,613
condition qui est vraie ou fausse.
Si digitalRead de quatre est

130
00:09:55,613 --> 00:10:00,764
égal à zéro, et bien, la touche est
pressée, et on va mettre

131
00:10:00,764 --> 00:10:05,998
dans une accolade, les instructions à
réaliser.

132
00:10:05,998 --> 00:10:10,622
Pourquoi égal, égal?
Et bien, là aussi, on le verra,

133
00:10:10,622 --> 00:10:13,865
l'égal, comme en arithmétique, c'est
réservé pour

134
00:10:13,865 --> 00:10:18,580
l'assignation, euh, six égal deux fois
trois.

135
00:10:18,580 --> 00:10:21,520
Ici, on a besoin d'un signe pour

136
00:10:21,520 --> 00:10:25,440
dire point d'interrogation, est-ce que
c'est égal?

137
00:10:25,440 --> 00:10:29,440
Hein, ceci est une question, en fait.

138
00:10:29,440 --> 00:10:35,165
C'est vrai, ou c'est faux, si c'est vrai,
on exécute.

139
00:10:35,165 --> 00:10:40,285
Alors, de nouveau, on est en train de
traîner ces quatre en réfléchissant à

140
00:10:40,285 --> 00:10:42,610
ce pin, et il nous faut rajouter

141
00:10:42,610 --> 00:10:48,108
des définitions, Pous vaut quatre, mode,
Pous, input.

142
00:10:48,108 --> 00:10:53,661
Et puis, le digitalRead de Pous, dans son

143
00:10:53,661 --> 00:10:57,530
égalité, qui veut dire est-ce que c'est
pressé?

144
00:10:57,530 --> 00:11:01,118
On peut très bien lui donner un nom, en
disant PousOn.

145
00:11:01,118 --> 00:11:04,920
Si vous voulez inventer un autre nom, vous
êtes libres.

146
00:11:04,920 --> 00:11:08,274
Et ce qui compte, c'est que dans le
programme, on

147
00:11:08,274 --> 00:11:12,540
ait quelque chose, ici, qui est tout à
fait clair.

148
00:11:12,540 --> 00:11:16,060
If PousOn, on doit faire ceci.

149
00:11:16,060 --> 00:11:20,620
Et puis, on continue ensuite, la
programmation.

150
00:11:20,620 --> 00:11:25,867
Alors, maintenant, et bien, comme petits
exemple concrets, j'aimerais faire,

151
00:11:25,867 --> 00:11:30,522
allumer quand je presse sur la touche.
Et

152
00:11:30,522 --> 00:11:35,656
bien, if PousOn, LedOn, autrement,

153
00:11:35,656 --> 00:11:40,672
LedOff.
Alors, les instructions du

154
00:11:40,672 --> 00:11:45,420
C, if, else, euh, sont faciles à
comprendre; on les reverra.

155
00:11:45,420 --> 00:11:52,580
Les accolades sont exigées comme toujours.

156
00:11:52,580 --> 00:11:57,503
On a la structure de la boucle.
La structure

157
00:11:57,503 --> 00:12:02,415
du "if", la structure du "else" et les

158
00:12:02,415 --> 00:12:07,623
points-virgules à la fin des instructions.
Le compilateur sera

159
00:12:07,623 --> 00:12:12,574
content et l'exécution va se faire
conformément aux

160
00:12:12,574 --> 00:12:17,706
définitions.
Alors là j'insiste vraiment parce que ici

161
00:12:17,706 --> 00:12:23,150
vous voyez que on a un programme qui ne
dépend pas

162
00:12:23,150 --> 00:12:28,670
du cablage.
On a fait une application, copié un

163
00:12:28,670 --> 00:12:34,670
poussoir sur une LED et le programme est
parfaitement clair.

164
00:12:34,670 --> 00:12:39,309
Maintenant, pour que ce programme
s'exécute sur

165
00:12:39,309 --> 00:12:42,708
votre petite carte où vous avez branché

166
00:12:42,708 --> 00:12:48,612
la LED sur la pin 3, le poussoir sur la
pin 4, et bien, il faut

167
00:12:48,612 --> 00:12:55,250
simplement définir en langage C, le
cablage que vous avez fait.

168
00:12:55,250 --> 00:13:00,590
Le poussoir est actif à 0, la LED est
active à 0.

169
00:13:00,590 --> 00:13:03,866
Si maintenant vous changez, vous avez des
raisons de changer

170
00:13:03,866 --> 00:13:08,370
ou que c'est une autre application, et
bien, vous modifiez

171
00:13:08,370 --> 00:13:13,575
les définitions uniquement.
Bien, petite question pour euh,

172
00:13:13,575 --> 00:13:18,990
voir si vous avez bien compris : Si
j'enlève la structure

173
00:13:18,990 --> 00:13:23,974
"else" ici, hein, j'ai "if" Pous, Led On,
et bien, qu'est-ce qu'il se passe?

174
00:13:23,974 --> 00:13:28,498
Ça ne change rien, la LED ne s'allume
plus, la LED reste allumée?

175
00:13:28,498 --> 00:13:31,770
Réfléchissez pendant quelques secondes.

176
00:13:38,320 --> 00:13:41,916
C'est clair que les deux premières
réponses sont mauvaises puisque

177
00:13:41,916 --> 00:13:44,870
ici on va en tout cas avoir une
possibilité d'allumer.

178
00:13:44,870 --> 00:13:51,383
Euh, la troisième réponse est la plus
proche de la vérité mais la LED

179
00:13:51,383 --> 00:13:57,590
va s'allumer quand on pousse, elle ne va
jamais s'éteindre.

180
00:13:57,590 --> 00:14:02,340
Et maintenant la question c'est de savoir
quel est le setup?

181
00:14:02,340 --> 00:14:03,717
Si le setup

182
00:14:03,717 --> 00:14:10,810
a éteint la LED, et bien elle va rester
éteinte jusqu'à ce qu'on presse.

183
00:14:10,810 --> 00:14:16,710
Et ensuite, elle va s'allumer et rester
éternellement allumée.

184
00:14:16,710 --> 00:14:23,030
C'est en fait une fonction alarme.
Il faut simplement mettre dans le setup

185
00:14:23,030 --> 00:14:28,770
le LED off et puis ensuite, ben euh, dès
que quelqu'un aura pressé sur la touche,

186
00:14:28,770 --> 00:14:33,210
et bien la LED va s'allumer, vous saurez
que quelqu'un est

187
00:14:33,210 --> 00:14:37,871
venu intervenir sur cette touche.
Une deuxième question similaire c'est que

188
00:14:37,871 --> 00:14:42,444
maintenant j'enlève uniquement le "else",
je garde le

189
00:14:42,444 --> 00:14:48,240
"if" et puis le LedOff.
Alors qu'est-ce qu'il va se passer?

190
00:14:48,240 --> 00:14:53,972
La LED clignote, on, off, on, off, la LED
ne s'allume plus ou

191
00:14:53,972 --> 00:14:56,870
la LED ne s'éteint plus?

192
00:15:03,390 --> 00:15:08,430
Bien, ben la réponse, c'est presque la

193
00:15:08,430 --> 00:15:13,420
réponse A.
Euh, qu'est-ce qu'il se passe, en fait?

194
00:15:13,420 --> 00:15:18,682
Si vous n'appuyez pas sur la touche, et
bien, vous traversez

195
00:15:18,682 --> 00:15:24,049
ce, ce bloc d'instructions, vous eteignez
la LED

196
00:15:24,049 --> 00:15:29,546
et vous restez avec la LED éteinte.
Si maintenant,

197
00:15:29,546 --> 00:15:34,058
vous appuyez sur la touche, et bien, vous
allumez

198
00:15:34,058 --> 00:15:38,660
la LED, mais vous continuez, et vous
éteignez la LED.

199
00:15:38,660 --> 00:15:42,960
Donc, allumer, éteindre, allumer,
éteindre.

200
00:15:42,960 --> 00:15:46,340
Et puis maintenant, est-ce que c'est du
50%?

201
00:15:46,340 --> 00:15:49,412
C'est là que, quand on veut vraiment faire
du C et savoir

202
00:15:49,412 --> 00:15:54,640
ce que l'on fait, et bien, on va regarder
quelles sont les,

203
00:15:54,640 --> 00:15:57,390
les temps d'exécution des instructions

204
00:15:57,390 --> 00:16:02,679
euh, pour déterminer le pourcentage
d'allumé.

205
00:16:02,679 --> 00:16:07,233
Donc, la LED clignote si on presse sur le
bouton.

206
00:16:07,233 --> 00:16:12,550
Autrement, elle ne s'allume pas.
Analyser ce que fait le processeur est

207
00:16:12,550 --> 00:16:20,022
quelque chose d'extrêmement important et
il faut avoir ce réflexe de se mettre

208
00:16:20,022 --> 00:16:23,330
dans la peau du processeur pour bien
comprendre,

209
00:16:23,330 --> 00:16:27,334
dans le fond, l'information que vous lui
donnez.

210
00:16:27,334 --> 00:16:31,506
Bon, maintenant, petite variante,
j'aimerais allumer la

211
00:16:31,506 --> 00:16:33,830
LED si je n'agis pas sur le poussoir.

212
00:16:33,830 --> 00:16:36,614
Alors, évidemment, une solution simple, ce
serait de

213
00:16:36,614 --> 00:16:38,876
dire : ben, je définis la fonction
PousOff.

214
00:16:38,876 --> 00:16:40,730
Si c'est PousOff, ben j'allume.

215
00:16:40,730 --> 00:16:45,062
Une variante, ce serait de dire : ben,
j'éteins la LED si j'agis

216
00:16:45,062 --> 00:16:48,390
sur le poussoir.
Donc, ben, ici on changerait.

217
00:16:48,390 --> 00:16:54,190
Et puis, ce que j'aimerais vous montrer
là, c'est que cette fonction PousOff,

218
00:16:54,190 --> 00:16:59,838
qui est l'inverse de PousOn, hein, si
PousOff est vrai, ben PousOn

219
00:16:59,838 --> 00:17:04,781
est faux et réciproquement, et bien, on
peut la définir avec un petit

220
00:17:04,781 --> 00:17:10,006
signe très pratique que l'on verra très
souvent qui est le point d'exclamation,

221
00:17:10,006 --> 00:17:13,735
qui est la négation logique, l'"inversion"
logique.

222
00:17:13,735 --> 00:17:18,260
On l'avait déjà vue avec le petit, le
petit triangle et un petit rond.

223
00:17:18,260 --> 00:17:22,552
Donc, euh, je peux écrire "if!

224
00:17:22,552 --> 00:17:28,640
PousOn" ce qui veut dire "PousOff" et dans
ce cas-là, j'allume.

225
00:17:28,640 --> 00:17:34,750
Donc, voilà une petite fonctionnalité
supplémentaire qui nous rendra service.

226
00:17:34,750 --> 00:17:38,894
Bien un autre instruction fondamentale que
l'on verra aussi plus

227
00:17:38,894 --> 00:17:43,028
tard avec plus de détails, c'est le
"while" qu'il faut bien

228
00:17:43,028 --> 00:17:47,386
distinguer du "if".
Le "while", avec une condition, touche

229
00:17:47,386 --> 00:17:53,688
pressée par exemple, et bien, on va faire
tant que la condition est

230
00:17:53,688 --> 00:18:00,182
vraie.
Alors "while" PousOn, et bien, tant qu'on

231
00:18:00,182 --> 00:18:05,983
presse, on va faire cette condition.
Donc si j'écris ici "while PousOn"

232
00:18:05,983 --> 00:18:13,360
justement, LedOn, et bien, tant que je
presse, la LED sera allumée.

233
00:18:13,360 --> 00:18:18,960
Et je reste bloqué ici contrairement au
"if" qui allait regarder plus loin.

234
00:18:18,960 --> 00:18:25,398
Donc, au moment où je relache, et bien,
"while" n'est pas satisfait, on sort

235
00:18:25,398 --> 00:18:30,270
tout de suite, LedOff, et puis on
recommence.

236
00:18:30,270 --> 00:18:36,460
Donc on a fait la même fonction, copie
dans le fond, du poussoir sur la LED

237
00:18:36,460 --> 00:18:39,864
mais d'une façon qui n'est pas vraiment
recommandée

238
00:18:39,864 --> 00:18:43,746
puisqu'on va se bloquer ici, dans cette
attente.

239
00:18:43,746 --> 00:18:49,476
Pour un programme aussi simple que ça
évidemment, cela n'a pas de conséquence.

240
00:18:49,476 --> 00:18:50,598
Alors, si vous avez

241
00:18:50,598 --> 00:18:54,750
bien compris le "while", "while
(condition)", si on mettait

242
00:18:54,750 --> 00:18:58,640
"while (1)", la condition 1, elle est
toujours vraie.

243
00:18:58,640 --> 00:19:05,010
Hein, vrai c'est 1, on aurait peut-être pu
écrire euh, "while (high)", "while euh".

244
00:19:05,010 --> 00:19:07,740
Et ça, ben ça veut dire faire
éternellement.

245
00:19:07,740 --> 00:19:11,900
Donc vous allez rester, c'est justement ce
que fait le,

246
00:19:11,900 --> 00:19:15,640
quand on écrit du C, et bien on remplace
"loop" par

247
00:19:15,640 --> 00:19:20,349
ce "while (1)".
Et puis si maintenant vous avez "while

248
00:19:20,349 --> 00:19:25,853
(1)" avec une accolade qui ne contient
rien du tout, et bien le

249
00:19:25,853 --> 00:19:31,170
processeur ne fait plus rien.
Ça c'est faux de dire comme ça.

250
00:19:31,170 --> 00:19:33,890
Le processeur, il fait toujours quelque
chose

251
00:19:33,890 --> 00:19:37,000
hein, il passe toujours à l'instruction
suivant.

252
00:19:37,000 --> 00:19:41,240
Simplement, ben, au niveau du code
machine,

253
00:19:41,240 --> 00:19:45,934
et bien, ce qu'on lui a dit c'est : tu es
maintenant à

254
00:19:45,934 --> 00:19:51,164
l'instruction 18, par exemple, et bien, va
en

255
00:19:51,164 --> 00:19:56,222
18, répète, aller en 18, et puis

256
00:19:56,222 --> 00:20:01,312
recommence, répète ne fais rien, retourne
en 18, ne fais

257
00:20:01,312 --> 00:20:06,410
rien, retourne en 18, ne fais rien,
retourne en 18, il se tourne les pouces.

258
00:20:06,410 --> 00:20:10,665
Et puis euh, il faudra un reset pour
sortir de cette boucle.

259
00:20:10,665 --> 00:20:13,605
Alors dernière, avnat-dernière chose
intéressante,

260
00:20:13,605 --> 00:20:15,478
c'est inverser l'état de la LED.

261
00:20:15,478 --> 00:20:17,710
Hein, on a vu comment la mettre à 1, on a
vu

262
00:20:17,710 --> 00:20:22,360
comment la mettre à 0, Maintenant, ce que
j'aimerais c'est inverser son état.

263
00:20:22,360 --> 00:20:26,065
Je peux très bien dire, je vais lire
l'état de

264
00:20:26,065 --> 00:20:31,560
la LED, si c'est 0, ça veut dire qu'elle
est éteinte,

265
00:20:31,560 --> 00:20:36,000
je vais l'allumer.
Et puis autrement, je vais l'éteindre.

266
00:20:36,000 --> 00:20:40,450
Alors évidemment ça c'est pas très
plaisant, parce que de nouveau euh, si

267
00:20:40,450 --> 00:20:46,028
vous lisez ça dans le programme, rien ne
vous apprend que la LED

268
00:20:46,028 --> 00:20:51,960
allumée est allumée par un état 0.
Donc, il aurait fallu

269
00:20:51,960 --> 00:20:57,662
définir en tout cas ÉtatLed comme étant
digitalRead

270
00:20:57,662 --> 00:21:01,298
de Led et mieux définir est-ce que la

271
00:21:01,298 --> 00:21:04,954
LED est éteinte?
Est-ce que la LED est éteinte?

272
00:21:04,954 --> 00:21:11,163
Si oui, on l'allume.
Donc, "if (LedEstÉteinte)",

273
00:21:11,163 --> 00:21:17,500
LedOn.
Et on met cette transcription du matériel

274
00:21:17,500 --> 00:21:23,570
dans une définition dans laquelle on a
donné un nom explicite

275
00:21:23,570 --> 00:21:28,675
et le codage que le compilateur saura
traduire

276
00:21:28,675 --> 00:21:32,420
dans les instructions de bas niveau du
processeur.

277
00:21:32,420 --> 00:21:35,852
Alors, on peut encore faire plus
astucieusement.

278
00:21:35,852 --> 00:21:41,602
C'est de dire : mais inverser ma LED,
c'est écrire avec un

279
00:21:41,602 --> 00:21:48,580
digitalWrite, écrire dans la LED, quoi?
Ce qu'on a lu sur

280
00:21:48,580 --> 00:21:54,390
la même pin LED, mais inversé.
Donc on

281
00:21:54,390 --> 00:22:00,170
va copier dans la LED l'inverse de son
état.

282
00:22:00,170 --> 00:22:03,530
Et ça va vous rappeler la bascule D

283
00:22:03,530 --> 00:22:07,580
qu'on avait cablée en branchant la sortie
sur l'entrée.

284
00:22:07,580 --> 00:22:12,534
Qu'est-ce qu'on avait fait?
On l'avait fait en diviseur par deux.

285
00:22:12,534 --> 00:22:13,710
Chaque fois,

286
00:22:13,710 --> 00:22:15,790
la valeur est inversée.

287
00:22:15,790 --> 00:22:19,755
Maintenant, ben ce qui remplace l'horloge,
et bien, c'est la sélection

288
00:22:19,755 --> 00:22:24,027
quand cette instruction s'exécute, et
bien, on va avoir cet effet.

289
00:22:24,027 --> 00:22:29,177
On pourrait écrire tout simplement dans le
programme : LedToggle.

290
00:22:29,177 --> 00:22:34,460
Alors réfléchissez bien à ça, c'est
effectivement

291
00:22:34,460 --> 00:22:39,000
une façon très élégante d'écrire du C.

292
00:22:39,000 --> 00:22:42,927
On peut faire plusieurs choses dans une
seule instruction.

293
00:22:42,927 --> 00:22:45,853
C'est un peu plus difficile à décoder,
mais

294
00:22:45,853 --> 00:22:48,948
puisqu'on va réfléchir une seule fois au
niveau de

295
00:22:48,948 --> 00:22:52,076
la définition et qu'on pourra ensuite
écrire quelque

296
00:22:52,076 --> 00:22:55,088
chose qui est tout à fait facile à
comprendre.

297
00:22:55,088 --> 00:22:58,485
Et bien, c'est une bonne façon de
programmer.

298
00:22:58,485 --> 00:23:00,753
Et maintenant je fais un petit peu

299
00:23:00,753 --> 00:23:04,494
plus compliqué, c'est-à-dire que j'ai noté
basculer

300
00:23:04,494 --> 00:23:09,720
à chaque fois que je pèse sur une touche.
Alors, basculer à chaque fois que je pèse

301
00:23:09,720 --> 00:23:14,924
sur une touche en fait, il faut que je
pèse, il faut que je relache,

302
00:23:14,924 --> 00:23:19,552
et c'est seulement au moment où je relache
que ça va s'allumer.

303
00:23:19,552 --> 00:23:24,584
Je pourrais imaginer l'inverse, au moment
où je presse, ça s'allume, mais ensuite

304
00:23:24,584 --> 00:23:29,650
il faut relacher, represser pour que cela
change d'état.

305
00:23:29,650 --> 00:23:32,887
Alors c'est des, c'est des boutons on/off

306
00:23:32,887 --> 00:23:36,096
que l'on voit dans plusieurs appareils
qu'on

307
00:23:36,096 --> 00:23:40,350
peut réaliser avec un système logique et
puis là on va le faire par programmation.

308
00:23:40,350 --> 00:23:47,845
Alors, attendre que le bouton soit pressé,
ben c'est "while (!PousOn)".

309
00:23:47,845 --> 00:23:52,009
Tant qu'on est relâché, on reste ici dans

310
00:23:52,009 --> 00:23:54,817
cette ligne "while" et ce petit délai à
cause

311
00:23:54,817 --> 00:23:58,040
des rebonds de contact, on en reparlera
plus tard.

312
00:23:58,040 --> 00:24:02,070
On ne voulait pas vous le cacher si on ne
le met pas, ça risque de mal fonctionner.

313
00:24:02,070 --> 00:24:06,310
Ensuite, ben une fois qu'on a pressé, ben
on passe à la ligne suivante.

314
00:24:06,310 --> 00:24:10,550
Et on attend que ça soit relaché avec un
"while".

315
00:24:10,550 --> 00:24:15,045
Et quand on sort ici, on inverse la LED,

316
00:24:15,045 --> 00:24:19,540
et puis on revient, attendre, presser,
relacher, et cetera.

317
00:24:19,540 --> 00:24:24,594
Donc ici, la LED va changer quand on
relache, si

318
00:24:24,594 --> 00:24:29,250
vous permettez les instructions, la LED va
s'allumer quand on pèse.

319
00:24:29,250 --> 00:24:35,477
Donc voilà un exemple de programme qui
fait bien sentir la richesse du C et la

320
00:24:35,477 --> 00:24:42,840
possibilité d'écrire les programmes d'une
façon à la fois compacte et lisible.

321
00:24:42,840 --> 00:24:44,712
Donc on a vu aujourd'hui des

322
00:24:44,712 --> 00:24:50,960
choses très importantes : cette structure
générale des programmes

323
00:24:50,960 --> 00:24:57,168
C, les facilités d'Arduino pour lire,
écrire euh, sur

324
00:24:57,168 --> 00:25:03,272
un bit et la nécessité de nommer

325
00:25:03,272 --> 00:25:09,332
clairement la fonctionnalité que l'on,

326
00:25:09,332 --> 00:25:15,118
dont on a besoin pour, au niveau du
programme, parler dans ce langage

327
00:25:15,118 --> 00:25:22,400
fontionnel et pas dans un langage qui
tient compte du cablage.