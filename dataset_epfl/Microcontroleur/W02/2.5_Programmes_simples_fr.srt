1
00:00:04,470 --> 00:00:08,058
Bonjour, il nous faut maintenant,
consolider le peu qu'on

2
00:00:08,058 --> 00:00:11,352
a appris du C, en faisant quelques
programmes simples.

3
00:00:11,352 --> 00:00:14,645
Bien voir la différence entre le if et le
while, entre

4
00:00:14,645 --> 00:00:19,966
le binaire et le BCD, et comment on peut
faire des conversions.

5
00:00:19,966 --> 00:00:23,965
On a vu comment lire un poussoir et écrire
sur une led.

6
00:00:23,965 --> 00:00:30,042
On va un tout petit peu compliquer le
problème en ayant deux poussoirs et deux

7
00:00:30,042 --> 00:00:36,210
leds, et chercher à programmer différentes
fonctionnalités.

8
00:00:36,210 --> 00:00:41,852
Ces fonctionnalités interagissent avec des
poussoirs et des leds qui

9
00:00:41,852 --> 00:00:47,276
sont allumées ou éteintes, des poussoirs
qui sont pressés ou relâchés, et la

10
00:00:47,276 --> 00:00:53,200
façon dont ça a été câblé est un autre
niveau.

11
00:00:53,200 --> 00:00:55,279
Donc, c'est comme on l'avait

12
00:00:55,279 --> 00:00:58,830
vu la dernière fois, dans le define que
l'on va dire.

13
00:00:58,830 --> 00:01:03,934
Et bien, pour ce câblage, dans pour ce
programme, et

14
00:01:03,934 --> 00:01:08,273
pour, euh, ce câblage dans lequel on va
tester le programme.

15
00:01:08,273 --> 00:01:14,506
Et bien, la led un est dans la pin cinq,
la led deux sur la pin six, euh,

16
00:01:14,506 --> 00:01:18,522
la fonction poussoir on, et bien, c'est
quand on

17
00:01:18,522 --> 00:01:21,770
lit un zéro, il y a le point
d'exclamation.

18
00:01:21,770 --> 00:01:26,902
Euh, quand on veut activer la led, et
bien, on doit

19
00:01:26,902 --> 00:01:30,540
mettre low sur la led qui est sur la pin
un.

20
00:01:30,540 --> 00:01:34,036
Une fois qu'on a défini ça, et bien, on
peut

21
00:01:34,036 --> 00:01:38,800
oublier le câblage, et ne se préoccuper
que de la fonctionnalité.

22
00:01:38,800 --> 00:01:42,630
Alors, première fonctionnalité, et bien,
c'est ce qu'on avait déjà vu.

23
00:01:42,630 --> 00:01:46,995
On copie le poussoir un sur la led un, le
poussoir deux

24
00:01:46,995 --> 00:01:52,291
sur la led deux, et là, avec un if, notre
problème, si le

25
00:01:52,291 --> 00:01:57,970
poussoir un est à un, on allume la led,
autrement, on l'éteint,

26
00:01:57,970 --> 00:02:02,720
et le programme, après, en if, continue,
va s'occuper

27
00:02:02,720 --> 00:02:07,432
du poussoir deux, et ensuite, recommence.
Vous avez une réaction

28
00:02:07,432 --> 00:02:12,154
immédiate du processeur, aux actions
d'entrées On peut

29
00:02:12,154 --> 00:02:17,235
s'amuser à compliquer un tout petit peu la
règle du jeu, en disant, mais la led

30
00:02:17,235 --> 00:02:21,697
un, j'aimerais qu'elle s'allume si le
poussoir un

31
00:02:21,697 --> 00:02:26,020
est actif, ou si le poussoir deux est
actif.

32
00:02:26,020 --> 00:02:30,630
Et là, on a fait un tout petit peu de
logique, ça peut se convertir directement

33
00:02:30,630 --> 00:02:37,427
dans le symbole logique du Ou, et on peut
également, euh, faire une table de vérité,

34
00:02:37,427 --> 00:02:44,540
et puis, euh, voir, euh, les différents
cas exprimés avec des uns, des zéros.

35
00:02:44,540 --> 00:02:46,850
Alors, ici, on a la fonction Ou, et puis

36
00:02:46,850 --> 00:02:49,424
là, de l'autre côté, et bien on va changer
un

37
00:02:49,424 --> 00:02:51,780
petit peu la règle, et on va dire la led

38
00:02:51,780 --> 00:02:56,620
deux, elle s'allume quand on agit sur le
poussoir deux.

39
00:02:56,620 --> 00:03:03,069
Mais elle ne doit pas s'allumer si on
ajoute, en même temps, sur le poussoir un.

40
00:03:03,069 --> 00:03:07,312
Donc, là, c'est une condition ET.
Pour que la led

41
00:03:07,312 --> 00:03:11,316
deux soit allumée, il faut que le poussoir
deux soit

42
00:03:11,316 --> 00:03:15,314
actif, et il faut que le poussoir un ne
soit pas actif.

43
00:03:15,314 --> 00:03:23,110
Ce petit rond d'inversion, euh, remplace
le, l'inverseur qu'on avait eu, dessiné.

44
00:03:23,110 --> 00:03:28,154
Donc maintenant, comment programmer ça?
Alors, au niveau

45
00:03:28,154 --> 00:03:33,618
du C, vous avez le OU logique qui est une
barre

46
00:03:33,618 --> 00:03:38,664
verticale, et on verra que comme pour le
signe égal, la simple barre

47
00:03:38,664 --> 00:03:44,028
verticale agit sur des Mo binaires, et la
double barre verticale agit sur

48
00:03:44,028 --> 00:03:49,210
des conditions, condition de poussoir un
on, condition de poussoir deux on.

49
00:03:49,210 --> 00:03:53,640
Si l'une de ces deux conditions est
réalisée,

50
00:03:53,640 --> 00:03:58,870
on allume la led un; autrement, on
l'éteint.

51
00:03:58,870 --> 00:04:02,470
Et puis, dans le cas du ET logique, et
bien

52
00:04:02,470 --> 00:04:06,730
on a le symbole du ET qui est facile à
reconnaître.

53
00:04:06,730 --> 00:04:14,828
Si le poussoir deux est actif, et que on
n'agit pas avec le poussoir

54
00:04:14,828 --> 00:04:18,350
un, et bien, on va allumer la led.
Donc,

55
00:04:18,350 --> 00:04:23,210
pour tester ces programmes, on utilise des
définitions qui ont été, euh,

56
00:04:23,210 --> 00:04:28,630
listées au lien précédent.
Avec toujours le même

57
00:04:28,630 --> 00:04:33,704
schéma, mais on a un seul poussoir et puis
une seule

58
00:04:33,704 --> 00:04:38,742
led, on se dit, tiens, mais ça peut être
amusant de clignoter un

59
00:04:38,742 --> 00:04:44,140
nombre de fois, en fonction de la durée
d'un poussoir.

60
00:04:44,140 --> 00:04:46,972
Hein, vous pressez rapidement, ça clignote
une fois.

61
00:04:46,972 --> 00:04:50,496
Vous pressez très longuement, ça va
clignoter plusieurs fois.

62
00:04:50,496 --> 00:04:53,100
Comment est-ce qu'on peut programmer ça?

63
00:04:53,100 --> 00:04:57,870
Et bien, on va dire, tant que je presse
sur le bouton, je vais

64
00:04:57,870 --> 00:05:03,190
incrémenter un compteur, augmenter, euh,
toutes les 20 millisecondes, par exemple.

65
00:05:03,190 --> 00:05:06,034
En fait, on a les petits escaliers, ici.

66
00:05:06,034 --> 00:05:09,470
Et puis, une fois qu'on a relâché, et
bien,

67
00:05:09,470 --> 00:05:14,729
on va décompter, mais on peut décompter,
dans le fond, on

68
00:05:14,729 --> 00:05:19,100
veut pas décompter autant de fois qu'ici,
ça ferait trop de clignotements.

69
00:05:19,100 --> 00:05:21,071
Donc, on va faire des paliers.

70
00:05:21,071 --> 00:05:22,750
Là, on a incrémenté de un.

71
00:05:22,750 --> 00:05:26,380
Maintenant, on va décrémenter, par
exemple, de 25.

72
00:05:26,380 --> 00:05:29,515
Donc, au niveau du programme, il faut

73
00:05:29,515 --> 00:05:35,128
définir une variable cTime qui est le
compteur

74
00:05:35,128 --> 00:05:37,410
de temps du poussoir.

75
00:05:37,410 --> 00:05:43,570
Dans la boucle, et bien, on va commencer
par mettre le compteur à zéro.

76
00:05:43,570 --> 00:05:48,770
Et puis ensuite, on dira, et bien, tant
que le poussoir est à

77
00:05:48,770 --> 00:05:53,890
un, on va augmenter le temps toutes les 20
millisecondes.

78
00:05:53,890 --> 00:05:56,680
Et là, ça doit être un while, aussi

79
00:05:56,680 --> 00:06:00,699
longtemps, on va rester dans cette partie
du programme.

80
00:06:00,699 --> 00:06:02,884
Si on l'avait mis en if, et bien,

81
00:06:02,884 --> 00:06:05,604
on aurait tout de suite été, regarder ce
qu'il

82
00:06:05,604 --> 00:06:08,578
fallait faire plus loin, et, euh, vous
auriez eu

83
00:06:08,578 --> 00:06:11,850
un clignotement, euh, à chaque pression,
et un seul.

84
00:06:11,850 --> 00:06:12,720
Verifiez.

85
00:06:12,720 --> 00:06:17,005
Alors, une fois qu'on relâche le bouton,
et bien, le while,

86
00:06:17,005 --> 00:06:20,120
euh, va nous faire sortir, dans le fond,
de cette boucle.

87
00:06:20,120 --> 00:06:26,153
Et puis, on va dire, et bien, tant que le
compteur de temps cTime est supérieur

88
00:06:26,153 --> 00:06:32,344
à zéro, on fait un clignotement, on
diminue de 25, et on

89
00:06:32,344 --> 00:06:38,627
reste dans cette boucle, à faire des
impulsions

90
00:06:38,627 --> 00:06:43,760
jusqu'à ce que ça soit en négatif.
Voilà.

91
00:06:43,760 --> 00:06:47,204
Et puis, ensuite, et bien, on va
recommencer à

92
00:06:47,204 --> 00:06:50,933
attendre sur le poussoir et refaire le
petit jeu.

93
00:06:50,933 --> 00:06:57,639
Donc là, vous voyez bien la différence
entre un while qui attend la fin d'un

94
00:06:57,639 --> 00:07:04,590
événement, et le if qui teste une chose et
continue plus loin.

95
00:07:04,590 --> 00:07:10,341
Alors, on parlera beaucoup de pwm, euh,
pour faire des impulsions de longueurs

96
00:07:10,341 --> 00:07:15,595
variables, et changer la vitesse d'un
moteur, ou changer l'intensité d'une led.

97
00:07:15,595 --> 00:07:18,115
Bon, on a, on a une led, ici, euh, en

98
00:07:18,115 --> 00:07:21,985
sortie de notre circuit qui a été déclaré
led un on.

99
00:07:21,985 --> 00:07:27,320
Et bien, on va l'allumer un certain temps,
l'éteindre un certain temps.

100
00:07:27,320 --> 00:07:32,915
En répétant toutes les 20 millisecondes,
et bien, la persistance rétinienne

101
00:07:32,915 --> 00:07:40,482
intégrera cette intensité lumineuse, et on
verra, euh, si on définit une valeur deux.

102
00:07:40,482 --> 00:07:46,278
Et bien, on aura deux-vingtième
d'intensité, 10% d'intensité

103
00:07:46,278 --> 00:07:51,860
sur la led.
Donc, on définit une durée, led un

104
00:07:51,860 --> 00:07:57,960
on, un délai, la durée, led un on ET.

105
00:07:57,960 --> 00:08:01,440
Et puis, après, ensuite on éteint, et
attend

106
00:08:01,440 --> 00:08:05,350
la durée complémentaire à 20, puisqu'on a
une tranche,

107
00:08:05,350 --> 00:08:07,360
ici, de 20 millisecondes.

108
00:08:07,360 --> 00:08:12,191
Alors, il y a un petit problème auquel il
faut faire attention, c'est que le delay

109
00:08:12,191 --> 00:08:17,997
duréeOn, si vous mettez une durée de zéro,
vous n'aurez pas du tout

110
00:08:17,997 --> 00:08:23,185
une durée de zéro, mais une durée de 65
secondes, à cause du décomptage qui

111
00:08:23,185 --> 00:08:28,170
se fait, et si on décompte de zéro, et
bien, on a la valeur maximum.

112
00:08:28,170 --> 00:08:30,550
De même, la valeur 20 doit être

113
00:08:30,550 --> 00:08:37,450
exclue puisque ça correspondrait, de ce
côté, à une attente de zéro.

114
00:08:37,450 --> 00:08:42,763
On peut naturellement, maintenant,
perfectionner le programme, et dire, et

115
00:08:42,763 --> 00:08:49,890
bien, si c'est zéro, je ne passe pas par
ces instructions, j'active le on.

116
00:08:49,890 --> 00:08:54,490
Si c'est 20, je ne passe pas par ces
instructions,

117
00:08:54,490 --> 00:08:59,542
j'active en permanence le on.
Et maintenant,

118
00:08:59,542 --> 00:09:04,356
si vous voulez vraiment pouvoir éteindre
totalement et allumer sans

119
00:09:04,356 --> 00:09:09,258
perte d'intensité, il vous faut, décoder,
ici, au

120
00:09:09,258 --> 00:09:14,533
début du programme.
Si la durée est à zéro,

121
00:09:14,533 --> 00:09:20,175
alors, il faut ne pas passer par ces
instructions,

122
00:09:20,175 --> 00:09:22,375
et uniquement éteindre.

123
00:09:22,375 --> 00:09:24,997
Si c'est 20, il ne faut pas passer

124
00:09:24,997 --> 00:09:28,334
ces instructions et uniquement allumer, et
ça coûte,

125
00:09:28,334 --> 00:09:31,557
euh, plusieurs instructions que vous avez
peut-être encore

126
00:09:31,557 --> 00:09:33,660
de la peine à bien écrire, mais essayez.

127
00:09:33,660 --> 00:09:41,250
Ce qu'on va plutôt faire, c'est de varier
cette intensité pour avoir une led

128
00:09:41,250 --> 00:09:45,268
qui s'allume de plus en plus longtemps.
Et là,

129
00:09:45,268 --> 00:09:47,920
on peut dire, et bien c'est facile, il

130
00:09:47,920 --> 00:09:51,960
suffit de, euh, j'avais le temps, euh,
deux, ici.

131
00:09:51,960 --> 00:09:58,050
Je peux mettre la valeur trois dans la
proche, pro, prochaine boucle.

132
00:09:58,050 --> 00:10:02,938
Mais, ça veut dire que, 20 fois 20
millisecondes, zéro

133
00:10:02,938 --> 00:10:08,050
quatre secondes, on aura passé de
l'intentité minimum à maximum.

134
00:10:08,050 --> 00:10:10,970
Donc, pour ralentir cette évolution,

135
00:10:10,970 --> 00:10:15,326
il nous faut répéter plusieurs fois la
même

136
00:10:15,326 --> 00:10:20,537
configuration de, d'impulsions, et pour
cela,

137
00:10:20,537 --> 00:10:25,270
et bien, on va, en plus de la durée qui va
varier,

138
00:10:25,270 --> 00:10:30,780
maintenant, et qui va commencer à un.
On va introduire un nombre

139
00:10:30,780 --> 00:10:36,091
de répétitions qui sera un compteur, et on
va définir un

140
00:10:36,091 --> 00:10:42,972
nombre maximum de ces répétitions, et si
on prend par exemple la valeur 10, ça

141
00:10:42,972 --> 00:10:49,683
veut dire que l'on va, maintenant, euh,
répéter 10 fois chaque impulsion.

142
00:10:49,683 --> 00:10:55,050
Donc, ça va durer zéro deux secondes, et
toutes les zéro deux secondes, on

143
00:10:55,050 --> 00:10:59,670
va modifier la valeur et le cycle va
prendre dans les trois, quatre secondes.

144
00:10:59,670 --> 00:11:01,540
Donc, au niveau de la boucle,

145
00:11:01,540 --> 00:11:06,505
on part avec un nombre de répétitions qui
vaut zéro,

146
00:11:06,505 --> 00:11:11,470
on vérifie si ce nombre est inférieur au
maximum.

147
00:11:11,470 --> 00:11:16,624
Si oui, on active et désactive la led, et

148
00:11:16,624 --> 00:11:21,950
on incrémente le compteur de répétitions

149
00:11:21,950 --> 00:11:27,030
pour sortir de cette boucle

150
00:11:27,030 --> 00:11:31,430
quand la condition, ici, ne sera plus
satisfaite.

151
00:11:31,430 --> 00:11:36,790
Quand on sort de cette boucle, on modifie
la durée, puisqu'on veut augmenter

152
00:11:36,790 --> 00:11:42,480
l'intensité, et si la durée on est égale à

153
00:11:42,480 --> 00:11:47,957
20, hein, on était à 19, c'était accepté.

154
00:11:47,957 --> 00:11:52,282
Mais quand, ici, on a rajouté un, et bien,
ça n'est

155
00:11:52,282 --> 00:11:56,979
plus acceptable, c'est pour ça que j'ai
préféré écrire 19 plus un.

156
00:11:56,979 --> 00:11:58,450
On remet l'état un.

157
00:11:58,450 --> 00:12:04,708
Quand on a ces derniers cycles à 19, Que
l'on a anticipé

158
00:12:04,708 --> 00:12:10,570
une évolution qui n'a pas eu lieu et bien
on remet le compteur à 1.

159
00:12:10,570 --> 00:12:13,108
Donc voila quelques exemples.

160
00:12:13,108 --> 00:12:17,068
Si maintenant on s'intéresse à
incrémenter,

161
00:12:17,068 --> 00:12:22,374
augmenter de 1 un compteur BCD.
La repésentation en

162
00:12:22,374 --> 00:12:27,570
BCD, et bien c'est chaque fois, comme on a
vu, 4 bits

163
00:12:27,570 --> 00:12:32,685
et on ne doit pas utiliser toutes les
combinaisons possibles de ce

164
00:12:32,685 --> 00:12:37,790
mot binaire.
Donc je pars d'un exemple qui est 399,

165
00:12:37,790 --> 00:12:42,605
j'aimerais ajouter 1, et bien en binaire

166
00:12:42,605 --> 00:12:48,120
je dois ajouter 1.
1 plus 1 ça fait 0.

167
00:12:48,120 --> 00:12:49,520
Il y a un report.

168
00:12:49,520 --> 00:12:53,330
1 plus 0 ça fait 1.
Il n'y a pas de report.

169
00:12:53,330 --> 00:12:55,980
0 plus 0, c'est copié.
1.

170
00:12:55,980 --> 00:13:00,710
Et voilà, le résultat ben c'est en fait le
chiffre hexadécimal A.

171
00:13:00,710 --> 00:13:08,074
Alors qu'on voudrait avoir des 0 ici et
puis un report

172
00:13:08,074 --> 00:13:12,890
pour le bit suivant.
Alors cette

173
00:13:12,890 --> 00:13:18,463
différence elle est de 6.
Donc au niveau de l'algorithme

174
00:13:18,463 --> 00:13:23,424
et bien on va dire si le résultat
dépassait 9, on

175
00:13:23,424 --> 00:13:28,521
ajoute 6, ce qui amène le résultat à la
valeur

176
00:13:28,521 --> 00:13:33,127
0 et incrémente l'étage suivant.
Donc ce raisonnement peut

177
00:13:33,127 --> 00:13:39,085
se continuer, et au niveau de la
programmation, puisque c’est ça qui nous

178
00:13:39,085 --> 00:13:45,348
intéresse, il nous faut définir un nombre
de 16 bits, que l’on va appeler bcd.

179
00:13:45,348 --> 00:13:52,100
C’est important de remarquer que quand
vous avez ici 8,000 ou 9,000

180
00:13:52,100 --> 00:13:58,670
et bien vous avez le premier bit qui est
le bit de signe,

181
00:13:58,670 --> 00:14:01,946
qui pourrait faire croire à certaines
parties

182
00:14:01,946 --> 00:14:05,660
du programme que l’on manipule un nombre
négatif.

183
00:14:05,660 --> 00:14:10,210
Donc il faut bien définir unsigned int
bcd.

184
00:14:10,210 --> 00:14:15,770
Et maintenant on incrémente bcd en
binaire.

185
00:14:15,770 --> 00:14:21,280
Donc, on va trouver dans ce cas-là, A, heu
9.

186
00:14:21,280 --> 00:14:23,760
Et puis on dit ben si

187
00:14:23,760 --> 00:14:30,224
le résultat est supérieur à 9, on ajoute

188
00:14:30,224 --> 00:14:35,440
6, ce qui veux dire que le résultat va
devenir 0 A.

189
00:14:35,440 --> 00:14:41,628
Et la ligne suivante, et bien on dit si
c’est supérieur

190
00:14:41,628 --> 00:14:47,430
à 90, ce qui est le cas ici, et bien on
ajoute 60.

191
00:14:47,430 --> 00:14:48,770
Le résultat

192
00:14:48,770 --> 00:14:55,000
va devenir 0 0 4 puisqu’on a ajouté 1.

193
00:14:55,000 --> 00:15:00,348
Et on va passer à travers les deux
instructions suivantes sans

194
00:15:00,348 --> 00:15:05,890
rien faire puisque ce n’est pas supérieur
à 900 ni supérieur à 9,000.

195
00:15:05,890 --> 00:15:09,542
Alors quand c’est supérieur à 9,000, il y
a en

196
00:15:09,542 --> 00:15:14,187
fait un débordement, qui ne sera pas
signalé (par) le programme.

197
00:15:14,187 --> 00:15:16,400
Vous allez obtenir la valeur 0.

198
00:15:16,400 --> 00:15:21,050
Donc si vous voulez signaler le
débordement, il vous faudra rajouter des

199
00:15:21,050 --> 00:15:26,988
instructions supplémentaires, activer une
variable qui dit ça a débordé.

200
00:15:26,988 --> 00:15:33,805
Pour faire un décompteur BCD, c’est
extrêmement proche et même plus simple.

201
00:15:33,805 --> 00:15:39,212
Vous devez soustraire 1.
Donc 0 moins 1 ça fait 1 et

202
00:15:39,212 --> 00:15:41,250
il y a un emprunt.

203
00:15:41,250 --> 00:15:47,600
0 moins l’emprunt ça fait 1 moins
l’emprunt, ça fait 1.

204
00:15:47,600 --> 00:15:51,970
Donc on trouve la valeur F alors qu’on
devrait avoir la valeur 9.

205
00:15:51,970 --> 00:15:54,940
Et puis il n’y a pas d’emprunt qui a

206
00:15:54,940 --> 00:15:58,904
été propagé donc la règle est très simple
c’est de

207
00:15:58,904 --> 00:16:04,650
dire ben si on a 9, on met F et il suffit
de regarder, comme on l’a fait avant,

208
00:16:04,650 --> 00:16:08,830
un digit après l’autre avec des masques
pour avoir le résultat.

209
00:16:08,830 --> 00:16:12,190
Voilà en plus propre ce que je viens
d’expliquer.

210
00:16:12,190 --> 00:16:16,790
On pourrait soustraire 6 ou bien comme on
vient de

211
00:16:16,790 --> 00:16:22,550
l’expliquer simplement forcer un 9.

212
00:16:22,550 --> 00:16:25,464
On a souvent l’implication où une variable
doit rester

213
00:16:25,464 --> 00:16:30,000
en fait dans un certain intervalle Alors
si cette variable

214
00:16:30,000 --> 00:16:34,656
x est plus grande que a et bien on ramène
la

215
00:16:34,656 --> 00:16:38,919
valeur à a Si elle est plus petite que b,
on

216
00:16:38,919 --> 00:16:43,323
ramène la valeur à b Et cela nous coûte 2
instructions

217
00:16:43,323 --> 00:16:48,373
enfin 4 instructions, heu 5 hm Et cela
nous coûte 2 instructions.

218
00:16:48,373 --> 00:16:55,936
Arduino vous offre cette fonction qui est
constrain avec 3 paramètres

219
00:16:55,936 --> 00:17:00,550
: x, l’entrée, le maximum et le minimum.

220
00:17:00,550 --> 00:17:05,180
Adruino vous offre cette fonction si vous
ne voulez pas réfléchir.

221
00:17:05,180 --> 00:17:10,947
Constrain if x doit rester dans

222
00:17:10,947 --> 00:17:16,470
l’intervalle entre a et b et le résultat
donc sera confiné,

223
00:17:16,470 --> 00:17:21,664
constrain, dans cet intervalle On peut
aussi s’intéresser

224
00:17:21,664 --> 00:17:25,030
à définir un maximum et un minimum.

225
00:17:25,030 --> 00:17:30,130
Vous avez une variable, est-ce qu’elle est
plus grande que a, plus petite que b?

226
00:17:30,130 --> 00:17:35,065
Donc c’est aussi une, des fonctions
qu’Arduino vous

227
00:17:35,065 --> 00:17:39,388
offre mais qui ne sont pas vraiment
essentielles.

228
00:17:39,388 --> 00:17:42,230
Minimum de a, b.
Maximum de a, b.

229
00:17:42,230 --> 00:17:47,140
Un cas plus intéressant c’est une
conversion dans le fond d’échelle.

230
00:17:47,140 --> 00:17:51,118
On verra dans les convertisseurs
analogiques

231
00:17:51,118 --> 00:17:54,144
numériques que vous obtenez à partir

232
00:17:54,144 --> 00:17:56,358
d’une tension sur une entrée du

233
00:17:56,358 --> 00:18:00,060
microcontrôleur, une valeur entre 0 et
1023.

234
00:18:00,060 --> 00:18:06,685
Souvent cela nous arrangerait d’avoir
seulement cette valeur entre 0 et 255.

235
00:18:06,685 --> 00:18:09,149
Donc là il suffit de la diviser par 4,

236
00:18:09,149 --> 00:18:12,229
ce qui revient, vous avez une valeur qui
en fait

237
00:18:12,229 --> 00:18:13,310
est 10 bits.

238
00:18:13,310 --> 00:18:18,878
Ce qu’on voudrait c’est ne garder que 8
bits et on va garder naturellement

239
00:18:18,878 --> 00:18:24,422
les bits de poids forts et on va couper
les 8 derniers bits ce qui se fait,

240
00:18:24,422 --> 00:18:29,870
en fait, dans la pratique, en décalant de
2 et, on en reparlera plus tard, il y a le

241
00:18:29,870 --> 00:18:38,165
signe supérieur, supérieur, 2 pour dire
qu’on décale le mot de 2 positions.

242
00:18:38,165 --> 00:18:41,463
Donc il y en avait 10 avant, on a éjecté

243
00:18:41,463 --> 00:18:44,770
des zéros, il n’y a pas plus que 8
positions successives.

244
00:18:44,770 --> 00:18:49,300
C’est un peu plus compliqué si maintenant
on va vous,

245
00:18:49,300 --> 00:18:53,830
vous voudriez que le 1023 corresponde à la
valeur de somme.

246
00:18:53,830 --> 00:18:58,480
Alors, au lieu de diviser 256 par

247
00:18:58,480 --> 00:19:03,910
1023, qui était le x sur 4, il nous faut
maintenant

248
00:19:03,910 --> 00:19:10,720
diviser 200 par 1024 et puis multiplier
par x.

249
00:19:10,720 --> 00:19:16,050
Alors là il faut quand même faire
attention parce 200 sur 1024 ça fait 0.

250
00:19:16,050 --> 00:19:24,338
Le microcontrôleur travaille avec des
nombres entiers et il va vous signaler que

251
00:19:24,338 --> 00:19:29,560
ça fait 0 et qu’il y a peut-être un reste
à cette division que vous pouvez récupérer

252
00:19:29,560 --> 00:19:34,950
d’une certaine façon mais ce produit vous
donnera toujours 0.

253
00:19:34,950 --> 00:19:38,258
Donc ce qui faut écrire ben c’est x

254
00:19:38,258 --> 00:19:43,191
fois 200, en se méfiant que cela pourrait
devenir

255
00:19:43,191 --> 00:19:48,431
trop grand par rapport à la taille mémoire
que l’on a réservé et on divise par 1024.

256
00:19:48,431 --> 00:19:53,626
Diviser par 1024, comme on vient de le
dire, ça peut être des décalages.

257
00:19:53,626 --> 00:19:54,778
C’est une puissance

258
00:19:54,778 --> 00:20:00,415
de 2, donc si on décale 10 fois et bien
vous aurez votre résultat.

259
00:20:00,415 --> 00:20:05,630
On peut encore s’amuser à dire mais 200
multiplié par 200

260
00:20:05,630 --> 00:20:11,008
c’est multiplier par 128, par 64, par 8 et
ajouter le tout.

261
00:20:11,008 --> 00:20:19,246
Ces multiplications par 128, 64 et 8,
c’est le décalage dans l’autre sens.

262
00:20:19,246 --> 00:20:19,798
Donc la

263
00:20:19,798 --> 00:20:24,956
valeur y on l’obtient avec des
instructions qui ne sont pas des divisions

264
00:20:24,956 --> 00:20:29,844
ou des multiplications qui prennent
beaucoup de temps au processeur mais de

265
00:20:29,844 --> 00:20:35,520
simples décalages dans un sens et puis
ensuite le

266
00:20:35,520 --> 00:20:41,220
résultat est décalé dans l’autre sens.

267
00:20:41,220 --> 00:20:44,820
Et maintenant si on réfléchissait encore,
on pourrait dire mais on pourrait enlever

268
00:20:44,820 --> 00:20:48,410
3 décalages ici et puis compenser en les
enlevant ici aussi.

269
00:20:48,410 --> 00:20:52,410
Ce sont des petits trucs qui accélèrent
encore l’exécution.

270
00:20:52,410 --> 00:20:55,600
Bien regardons un autre exemple.

271
00:20:55,600 --> 00:21:01,990
Vous avez un thermomètre médical qui
travaille entre 32 et 35 degrés.

272
00:21:01,990 --> 00:21:08,315
Et le capteur donne des valeurs entre 240
et 680.

273
00:21:08,315 --> 00:21:09,953
Alors le programme est un

274
00:21:09,953 --> 00:21:12,605
peu plus long puisqu’il faut commencer

275
00:21:12,605 --> 00:21:16,304
par définir des coordonnées, ici en
soustrayant

276
00:21:16,304 --> 00:21:20,880
ces valeurs et ensuite appliquer la
multiplication

277
00:21:20,880 --> 00:21:24,020
et division que l’on vient de voir.

278
00:21:24,020 --> 00:21:29,604
Là heureusement, Arduino nous fournit une
fonction qui s’appelle

279
00:21:29,604 --> 00:21:35,127
map, qui est très bien documentée
puisqu’on dit ben c’est map

280
00:21:35,127 --> 00:21:40,190
d’une valeur, la valeur x, fromLow,

281
00:21:40,190 --> 00:21:45,920
fromHigh.
Donc on avait une échelle qu’ils

282
00:21:45,920 --> 00:21:50,684
appellent from puisqu’on veut convertir

283
00:21:50,684 --> 00:21:55,570
cette valeur x en y.
Donc fromLow fromHigh,

284
00:21:55,570 --> 00:22:00,496
toLow, toHigh et vous obtenez

285
00:22:00,496 --> 00:22:06,160
la valeur y en appelant cette fonction.
Donc dans le

286
00:22:06,160 --> 00:22:11,980
cas particulier, ben voilà les valeurs
numériques qui correspondent à mon dessin.

287
00:22:11,980 --> 00:22:18,004
Donc tant mieux quand on trouve des
fonctions qui font exactement ce que l’on

288
00:22:18,004 --> 00:22:23,924
veut pour autant qu’elles existent dans
l’environnement que l’on utilise.

289
00:22:23,924 --> 00:22:25,260
Ça c’est pas du C,

290
00:22:25,260 --> 00:22:27,523
c’est les facilités d’Arduino qui

291
00:22:27,523 --> 00:22:31,220
existent peut-être aussi dans d’autres
compilateurs.

292
00:22:31,220 --> 00:22:35,760
Avec ces quelques exemples, on a
clairement vu la différence entre

293
00:22:35,760 --> 00:22:39,430
le if et le while, entre le binaire et le
décimal.

294
00:22:39,430 --> 00:22:45,770
On a appris que les calculs se faisaient
en nombre entiers uniquement.

295
00:22:45,770 --> 00:22:50,500
Et puis avec des comparaisons, on peut
vérifier

296
00:22:50,500 --> 00:22:57,052
des valeurs, transformer linéairement des
variables et on verra naturellement

297
00:22:57,052 --> 00:23:03,080
d’autres solutions dans le futur.