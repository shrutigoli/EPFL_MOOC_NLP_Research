1
00:00:00,000 --> 00:00:05,695
Bonjour, On va parler

2
00:00:05,695 --> 00:00:10,210
d'architecture d'ordinateurs et vous allez
comprendre pourquoi on utilise ce terme.

3
00:00:10,210 --> 00:00:14,530
On a vu les bascules, on a vu les portes
logiques.

4
00:00:14,530 --> 00:00:20,010
Ce sont des briques avec lesquelles on
peut construire des sous-ensembles,

5
00:00:20,010 --> 00:00:25,637
ces systèmes combinatoires et systèmes
séquentiels, que sont, les décodeurs,

6
00:00:25,637 --> 00:00:30,540
les registres, les compteurs.
Et maintenant, on peut assembler ces

7
00:00:30,540 --> 00:00:38,538
éléments préfabriqués pour construire,
dans le fond, des machines informatiques.

8
00:00:38,538 --> 00:00:44,840
Les microprocesseurs actuels, ce sont des
palais et on découvrira quelques chambres.

9
00:00:44,840 --> 00:00:48,038
Maintenant, on va se contenter de
construire

10
00:00:48,038 --> 00:00:50,906
une cabane de jardin, et d'avoir une vague

11
00:00:50,906 --> 00:00:53,714
idée, comment on pourrait faire une
maison.

12
00:00:53,714 --> 00:00:57,608
Donc on va parler, d'une machine
simplifiée, qui nous

13
00:00:57,608 --> 00:01:02,982
aidera à comprendre l'architecture des
ordinateurs, et on pourra

14
00:01:02,982 --> 00:01:07,630
un petit peu, évoquer les langages qui
sont utilisés

15
00:01:07,630 --> 00:01:12,440
pour programmer, en particulier, les
microcontrôleurs qui nous intéressent.

16
00:01:12,440 --> 00:01:16,250
Alors notre machine simplifiée,

17
00:01:16,250 --> 00:01:22,260
elle va calculer la suite de Fibonacci.
Alors la suite de Fibonacci,

18
00:01:22,260 --> 00:01:28,840
chaque élément est la somme des deux
éléments précédents.

19
00:01:28,840 --> 00:01:34,870
On part avec 01, on les additionne, le
total

20
00:01:34,870 --> 00:01:41,160
vaut 1, on reprend ces 2 éléments, le
total vaut 2,

21
00:01:41,160 --> 00:01:49,020
1 plus 2, ça va faire 3, 2 plus 3, ça va
faire 5, 3 plus 5, ça fait 8, 13, 21, 34.

22
00:01:49,020 --> 00:01:50,720
C'est une série que les vrais

23
00:01:50,720 --> 00:01:54,540
architectes connaissent puisqu'elle
conduit au nombre d'or.

24
00:01:54,540 --> 00:01:56,511
Bien, on ne va pas travailler en

25
00:01:56,511 --> 00:02:00,090
décimal, on va travailler en binaire,
naturellement.

26
00:02:00,090 --> 00:02:05,640
Donc on part avec la combinaison 000, qui
représente 0 là,

27
00:02:05,640 --> 00:02:10,600
c'est limité à 5 bits.
Le 1, ensuite 0 plus

28
00:02:10,600 --> 00:02:15,680
1, ça va faire 1, 1 plus 1, ça va faire
10,

29
00:02:15,680 --> 00:02:20,732
on est en binaire.
Donc 1, 0 unité et une 2 n.

30
00:02:20,732 --> 00:02:25,898
Ensuite 1 plus 10, ça fait 11, 10 plus

31
00:02:25,898 --> 00:02:30,942
11; alors on n'a pas étudié l'additionneur
binaire, mais vous

32
00:02:30,942 --> 00:02:35,250
en voyez bien maintenant, un petit peu,
son principe.

33
00:02:35,250 --> 00:02:40,870
On additionne une colonne, on obtient un 0
et on a un report,

34
00:02:40,870 --> 00:02:46,356
comme quand on calcule en décimal et qu'on
dépasse 9, ce report va être

35
00:02:46,356 --> 00:02:51,720
additionné, on aura 1 plus 0, plus 1, ça
va nous refaire un 0.

36
00:02:51,720 --> 00:02:56,128
On a de nouveau un report, 1 plus 0, 1 ça
va

37
00:02:56,128 --> 00:03:01,760
faire un 0 et 1, et ça c'est bien le
codage que vous devez

38
00:03:01,760 --> 00:03:07,055
reconnaître du 8 puisqu'on a les poids
binaires 1, 2,

39
00:03:07,055 --> 00:03:12,530
4, 8, 16, comme vous l'avez vu la la
dernière fois.

40
00:03:12,530 --> 00:03:14,910
Là, si on veut parler de système logique

41
00:03:14,910 --> 00:03:17,676
maintenant, et bien qu'est ce qu'on a
fait?

42
00:03:17,676 --> 00:03:21,080
On a du additionner deux nombres, on a
obtenu un résultat,

43
00:03:21,080 --> 00:03:27,198
on a fait la même chose pour les chiffres
suivants; et chaque

44
00:03:27,198 --> 00:03:32,510
fois, on a obtenu un digit.
Mais,

45
00:03:32,510 --> 00:03:37,765
étant donné que 1 plus 1 peut faire 10, on
a un report qu'on

46
00:03:37,765 --> 00:03:43,330
appelle carry, d'un additionneur à
l'autre.

47
00:03:43,330 --> 00:03:46,008
Et vous voyez que maintenant,

48
00:03:46,008 --> 00:03:51,598
et bien, on a un système logique avec
trois entrées et un

49
00:03:51,598 --> 00:03:56,950
carry, et puis on a une sortie et un
carry.

50
00:03:56,950 --> 00:04:02,836
Donc c'est facile de, transformer ce
rectangle, dans une série

51
00:04:02,836 --> 00:04:07,570
de portes, et de fabriquer un additionneur
de la taille qui nous intéresse.

52
00:04:07,570 --> 00:04:11,442
Alors, maintenant ce qu'on doit faire, et
bien,

53
00:04:11,442 --> 00:04:15,580
c'est c'est symbolisé ici.
Voilà notre algorithme, on doit

54
00:04:15,580 --> 00:04:21,082
additionner deux nombres, mettre le
résultat, et puis ensuite déplacer cet

55
00:04:21,082 --> 00:04:26,690
opérateur pour agir sur les nombres
décalés.

56
00:04:26,690 --> 00:04:32,131
Alors, construisons cette machine de façon
à ce qu'elle puisse fonctionner.

57
00:04:32,131 --> 00:04:37,260
On va utiliser deux registres de 8 bits de
large,

58
00:04:37,260 --> 00:04:40,802
c'est les valeurs un peu standard dans nos
éléments,

59
00:04:40,802 --> 00:04:44,388
on les appelle A et B communément
logiques, ces

60
00:04:44,388 --> 00:04:49,978
deux registres vont fournir leur
information à un additionneur

61
00:04:49,978 --> 00:04:56,360
binaire et le résultat pourra être
mémorisé dans un registre.

62
00:04:56,360 --> 00:05:00,770
Donc comment est-ce que ça fonctionne
maintenant?

63
00:05:00,770 --> 00:05:02,688
On est parti avec 1,

64
00:05:02,688 --> 00:05:07,900
0 partout dans A, on est parti avec 1 dans
B,

65
00:05:07,900 --> 00:05:14,480
L'additionneur va fournir le résultat 0,
1, et on va donner

66
00:05:14,480 --> 00:05:21,780
une première impulsion d'horloge, qui va
mémoriser cette information en sortie,

67
00:05:21,780 --> 00:05:27,540
où on pourra mettre des petites diodes
lumineuses pour afficher le résultat.

68
00:05:27,540 --> 00:05:28,422
Et maintenant,

69
00:05:28,422 --> 00:05:32,895
il faut passer au cycle suivant, donc ce
qu'on a fait maintenant c'est de dire, et

70
00:05:32,895 --> 00:05:38,760
bien, C est égal à A plus B, il faut
transporter

71
00:05:38,760 --> 00:05:43,686
B dans A, et il

72
00:05:43,686 --> 00:05:48,080
faut transporter C

73
00:05:48,080 --> 00:05:54,293
dans B.
Et là, si vous remarquez

74
00:05:54,293 --> 00:05:58,290
le câblage, ça peut se faire simultanément
au

75
00:05:58,290 --> 00:06:02,340
niveau de cette machine.
Et puis ensuite on va recommencer et on

76
00:06:02,340 --> 00:06:09,170
obtiendra les valeurs successives, dans le
fond, de cette série, jusqu'à ce

77
00:06:09,170 --> 00:06:15,117
qu' il y ait un débordement de capacité,
puisque ici, le maximum est de 256.

78
00:06:15,117 --> 00:06:19,758
Et je vous ai parlé du carry, cet
additionneur

79
00:06:19,758 --> 00:06:24,860
8 bits vous fournit un carry, si jamais
vous vouliez

80
00:06:24,860 --> 00:06:30,430
additionner 16 bits, il suffirait de
rajouter un module.

81
00:06:30,430 --> 00:06:37,334
Ce carry, et bien, on peut très bien
l'utiliser pour stopper, la petite machine

82
00:06:37,334 --> 00:06:44,020
séquentielle qui va générer les horloges
alternativement.

83
00:06:44,020 --> 00:06:45,055
Alors maintenant

84
00:06:45,055 --> 00:06:49,540
et bien, évidemment, on pourrait dire :
voilà je vais construire une autre

85
00:06:49,540 --> 00:06:54,230
machine pour faire les multiples de 2, je
vais construire une autre machine.

86
00:06:54,230 --> 00:06:59,390
C'est pas tellement, ce qu'on voudrait
c'est une machine universelle.

87
00:06:59,390 --> 00:07:03,090
Alors, cette machine universelle qu'est-ce
qu'elle doit contenir?

88
00:07:03,090 --> 00:07:09,710
Elle doit contenir ces registres avec
lesquels on va travailler,

89
00:07:09,710 --> 00:07:15,740
elle doit contenir un additionneur mais,
il y a des fois on voudra soustraire,

90
00:07:15,740 --> 00:07:19,995
il y a des fois où on voudra faire des
opérations logiques entre ces nombres.

91
00:07:19,995 --> 00:07:22,875
Donc c'est ce qu'on appelle une unité
arithmétique

92
00:07:22,875 --> 00:07:27,480
et logique, A.L.U., Arithmetic Logic Unit,
en anglais.

93
00:07:27,480 --> 00:07:30,604
Et maintenant, on doit pouvoir,
typiquement pour

94
00:07:30,604 --> 00:07:35,174
notre algorithme, maintenant, on doit
pouvoir additionner

95
00:07:35,174 --> 00:07:40,646
A et B, et renvoyer le résultat dans C.
Donc

96
00:07:40,646 --> 00:07:45,479
ça, ça va se faire au moyen d'un

97
00:07:45,479 --> 00:07:50,700
bus qui permet d'interconnecter n'importe

98
00:07:50,700 --> 00:07:55,389
quelle unité à n'importe quelle autre.
C'est

99
00:07:55,389 --> 00:08:00,230
comme une gare avec des voies en
parallèles

100
00:08:00,230 --> 00:08:05,318
et naturellement, il faut commander les
aiguillages qui vont

101
00:08:05,318 --> 00:08:10,570
permettre de transporter l'information au
bon endroit.

102
00:08:10,570 --> 00:08:16,306
Et il faut des ordres, pour positionner,
dans le fond, ces engrenages.

103
00:08:16,306 --> 00:08:20,436
Alors on va définir des mots binaires en
disant, et bien,

104
00:08:20,436 --> 00:08:25,240
voilà on va prendre, j'ai trois registres,
je vais prendre 2

105
00:08:25,240 --> 00:08:30,490
bits pour dire quel est le registre avec
lequel je vais travailler.

106
00:08:30,490 --> 00:08:33,158
Et puis éventuellement vous allez pouvoir
travailler

107
00:08:33,158 --> 00:08:35,058
avec deux registres en même temps, il

108
00:08:35,058 --> 00:08:40,845
faut les choisir indépendamment, avec des
bits 00, ça sera 1, 01, ça sera B.

109
00:08:40,845 --> 00:08:45,240
Et puis maintenant, et bien, on va pouvoir
dire,

110
00:08:45,240 --> 00:08:50,750
en rajoutant des bits, qu'on veut
additionner, et cetera.

111
00:08:50,750 --> 00:08:54,735
Toutes les opérations que l'on veut
commander, et bien,

112
00:08:54,735 --> 00:08:57,455
on va les transmettre à un décodeur qui va

113
00:08:57,455 --> 00:09:02,640
positionner les aiguillages et on va
donner un, ou plusieurs

114
00:09:02,640 --> 00:09:08,090
coups d'horloge pour que la séquence
d'opérations s'effectue.

115
00:09:08,090 --> 00:09:12,149
Et ça, et bien, ça sera la première chose
qu'on

116
00:09:12,149 --> 00:09:15,680
veut faire, on l'a dit, C égal A plus B,

117
00:09:15,680 --> 00:09:20,322
ce sera le code binaire que l'on va mettre
ici, et

118
00:09:20,322 --> 00:09:24,969
puis ensuite la chose suivante, ça sera de
faire un transfert,

119
00:09:24,969 --> 00:09:29,430
dans une deuxième position mémoire, mais
ça pourrait être une bande

120
00:09:29,430 --> 00:09:34,640
de papier qu'on déroule, historiquement on
a commencé comme ça, et cetera.

121
00:09:34,640 --> 00:09:40,940
Voyez, on est en train de construire une
séquence de mots binaires qui

122
00:09:40,940 --> 00:09:45,560
vont faire évoluer la machine de façon à

123
00:09:45,560 --> 00:09:50,768
obtenir le résultat qui nous intéresse.
Donc, ces mots

124
00:09:50,768 --> 00:09:56,087
binaires, évidemment, sont très pénibles à

125
00:09:56,087 --> 00:10:01,625
mémoriser, à manipuler, à écrire.
On va, remplacer

126
00:10:01,625 --> 00:10:06,191
les mots binaires par des expressions qui

127
00:10:06,191 --> 00:10:13,570
sont plus explicites, on veut bouger d'un
registre à un autre, on va utiliser move.

128
00:10:13,570 --> 00:10:18,654
Quelle était la première opération dans
notre algorithme de Fibonacci?

129
00:10:18,654 --> 00:10:23,305
C'était de mettre 0 dans A, c'était de
mettre 1 dans B.

130
00:10:23,305 --> 00:10:28,330
Et bien ça nous coûte deux instructions
élémentaires, qui

131
00:10:28,330 --> 00:10:31,450
seront codées en binaire, mais si on les
écrit

132
00:10:31,450 --> 00:10:35,194
d'une façon explicite, on peut facilement
imaginer un

133
00:10:35,194 --> 00:10:39,045
programme qui va faire une petite analyse
syntaxique et

134
00:10:39,045 --> 00:10:44,180
créer les bits; A, et bien, on avait vu
que c'était 0,0 à deux endroits et cetera.

135
00:10:44,180 --> 00:10:44,320
.

136
00:10:44,320 --> 00:10:49,312
Alors maintenant, on doit faire l'addition
A, B, C.

137
00:10:49,312 --> 00:10:55,160
A, B va sur C, donc voilà, c'est tout à
fait compréhensible.

138
00:10:55,160 --> 00:10:56,686
On doit afficher

139
00:10:56,686 --> 00:11:01,586
C, et puis ensuite on doit déplacer B dans
A, C dans B

140
00:11:01,586 --> 00:11:06,500
et recommencer.
Donc voilà des instructions

141
00:11:06,500 --> 00:11:11,550
qui sont exactement les instructions
binaires

142
00:11:11,550 --> 00:11:16,675
que l'on met en mémoire, mais on les a
écrites de

143
00:11:16,675 --> 00:11:21,910
façon lisible.
Chaque ligne correspond à un

144
00:11:21,910 --> 00:11:26,130
mot binaire, et c'est le langage

145
00:11:26,130 --> 00:11:30,190
d'assemblage, puisqu'on va assembler des
bits, dans le fond,

146
00:11:30,190 --> 00:11:34,250
en fonction des instructions et on dit
plutôt l'assembleur.

147
00:11:34,250 --> 00:11:41,628
Alors ce qui nous manque maintenant, c'est
de pouvoir communiquer, et plutôt

148
00:11:41,628 --> 00:11:47,286
que de mettre des petites leds, on va
mettre quelque chose qui deviendra assez

149
00:11:47,286 --> 00:11:54,038
compliqué, pour pouvoir entrer et sortir
de l'information, dans des

150
00:11:54,038 --> 00:12:01,470
formats extrêmement variés.
Et c'est ce qu'on étudiera par la suite.

151
00:12:01,470 --> 00:12:07,700
Et maintenant ce qu'il nous faut, c'est
pouvoir charger le programme, et pour ça,

152
00:12:07,700 --> 00:12:12,591
il faut une communication vers l'extérieur
et tout naturellement on va mettre

153
00:12:12,591 --> 00:12:18,190
une communication série, et il nous faut
un petit programme parallèle qu'on

154
00:12:18,190 --> 00:12:23,940
mettra dans une mémoire indestructible,
une mémoire morte comme on dit, qui va

155
00:12:23,940 --> 00:12:31,670
être attentif, qui va gérer ces opérations
de remplissage de la mémoire, en fonction

156
00:12:31,670 --> 00:12:37,180
d'un séquenceur qui est évidemment, va
être un élément relativement complexe.

157
00:12:37,180 --> 00:12:42,410
Alors l'étape suivante, et bien c'est de
dire, l'assembleur,

158
00:12:42,410 --> 00:12:48,125
c'est bien joli, mais j'aimerais pouvoir
écrire comme au début, C égal

159
00:12:48,125 --> 00:12:53,482
A plus B.
Et cette transformation

160
00:12:53,482 --> 00:12:57,535
de C égal A plus B, dans une

161
00:12:57,535 --> 00:13:02,364
séquence d'instructions, qu'on avait vue
avant, ça peut

162
00:13:02,364 --> 00:13:04,704
se faire par un programme.

163
00:13:04,704 --> 00:13:09,755
Et ça, c'est le Langage C que l'on va
étudier, qui nous permettra

164
00:13:09,755 --> 00:13:14,180
d'écrire des choses comme ceci, avec
encore un petit point-virgule à la fin.

165
00:13:14,180 --> 00:13:16,975
Et l'intérêt, c'est que l'on pourra écrire
les

166
00:13:16,975 --> 00:13:20,500
programmes d'une façon qui nous est
beaucoup plus naturelle.

167
00:13:20,500 --> 00:13:25,896
Alors tous les langages informatiques,
depuis ce binaire, puis l'Assembleur,

168
00:13:25,896 --> 00:13:27,790
le C, le Java et il y en a encore

169
00:13:27,790 --> 00:13:32,563
beaucoup d'autres derrière, ont été
développés pour interagir

170
00:13:32,563 --> 00:13:36,764
avec l'homme, programmer vos tablettes
graphiques et cetera.

171
00:13:36,764 --> 00:13:39,166
Nous, ce qui nous intéresse, ce n'est

172
00:13:39,166 --> 00:13:43,338
pas d'interagir avec l'homme, c'est
d'interagir avec un

173
00:13:43,338 --> 00:13:47,286
dispositif technique, que l'on va brancher
sur

174
00:13:47,286 --> 00:13:51,445
ces entrées et sorties, des capteurs, des
actionneurs.

175
00:13:51,445 --> 00:13:53,095
et pour cela il faut qu'on

176
00:13:53,095 --> 00:13:56,208
ait un langage approprié, qui à la fois

177
00:13:56,208 --> 00:14:00,650
permet de faire des calculs, en binaire,
ou en

178
00:14:00,650 --> 00:14:05,792
décimal, puisque si c'est du décimal, le
programme

179
00:14:05,792 --> 00:14:11,070
saura choisir, appeler toutes les
instructions de conversions nécessaires.

180
00:14:11,070 --> 00:14:13,333
Donc, c'est le langage C qui va nous

181
00:14:13,333 --> 00:14:18,606
permettre d'écrire ce genre d'expressions,
dans lesquelles on pourra

182
00:14:18,606 --> 00:14:22,883
aussi penser, pour des nombres, à leur
représentation

183
00:14:22,883 --> 00:14:27,580
décimale, le programme n'aura qu'à faire
les transformations nécessaires.

184
00:14:27,580 --> 00:14:33,000
Et ces langages se sont beaucoup
développés,

185
00:14:33,000 --> 00:14:36,608
en pensant à l'interaction avec l'homme,
mais ce

186
00:14:36,608 --> 00:14:40,614
qui nous intéresse avec les
microcontrôleurs, ce n'est

187
00:14:40,614 --> 00:14:44,124
pas d'interagir avec une tablette, avec un
écran,

188
00:14:44,124 --> 00:14:49,320
avec un clavier, c'est d'interagir avec
des dispositifs physiques, des

189
00:14:49,320 --> 00:14:54,990
capteurs, des moteurs.
Et c'est le but de ce cours;

190
00:14:54,990 --> 00:14:59,800
et c'est le rôle des microcontrôleurs, par
rapport

191
00:14:59,800 --> 00:15:04,840
aux microprocesseurs, avec leurs mémoires
énormes.