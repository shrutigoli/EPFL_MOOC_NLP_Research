1
00:00:04,225 --> 00:00:07,225
Bonjour, on a vu la structure d'un

2
00:00:07,225 --> 00:00:11,258
programme C, et les principales structures
de commandes.

3
00:00:11,258 --> 00:00:15,010
On va parler maintenant des types de
données, 8, 16,

4
00:00:15,010 --> 00:00:20,285
32 bits, et qui s'appliquent aux variables
et aux tableaux.

5
00:00:20,285 --> 00:00:25,410
Revenons d'abord à la structure du
microcontrôleur.

6
00:00:25,410 --> 00:00:30,172
Donc, on a vu le bus 8 bits, l'unité
arithmétique,

7
00:00:30,172 --> 00:00:35,364
les registres et, si on a une structure 8
bits, on peut très bien,

8
00:00:35,364 --> 00:00:39,386
au niveau des variables, prendre,
plusieurs mots

9
00:00:39,386 --> 00:00:43,342
successifs, pour avoir, par exemple 32
bits.

10
00:00:43,342 --> 00:00:49,357
Et, au niveau du calcul, couper le mot 32
bits en tranches, et

11
00:00:49,357 --> 00:00:55,310
puis faire plusieurs opérations
successives, pour, une opération 32 bits.

12
00:00:55,310 --> 00:01:00,155
Alors évidemment actuellement, les
transistors, se sont

13
00:01:00,155 --> 00:01:05,990
miniaturisés et on parle de processeurs 16
et 32 bits.

14
00:01:05,990 --> 00:01:09,520
Le bus est plus large, les registres sont
plus longs,

15
00:01:09,520 --> 00:01:15,246
l'unité arithmétique est à la bonne
largeur, les variables aussi.

16
00:01:15,246 --> 00:01:19,950
Et si, maintenant on veut travailler avec
8 bits, et bien on va utiliser,

17
00:01:19,950 --> 00:01:29,640
une partie des variables et des mémoires.
Et, vu du C, cela ne nous concerne pas.

18
00:01:29,640 --> 00:01:35,910
Simplement, le compilateur aura plus de
travail pour couper

19
00:01:35,910 --> 00:01:41,958
les mots en morceaux, ou ignorer certaines
parties de l'information.

20
00:01:41,958 --> 00:01:45,082
Donc on va travailler fonctionnellement,
avec des

21
00:01:45,082 --> 00:01:50,257
types de données, le plus simple, et bien,
c'est un type 1 bit, vrai, faux.

22
00:01:50,257 --> 00:01:55,392
C'est celui qu'on trouve dans des
comparaisons, qu'on appelle les types

23
00:01:55,392 --> 00:02:00,757
booléens; qui évidemment, étant donné
qu'on n'a pas des bascules

24
00:02:00,757 --> 00:02:03,530
qui traînent un peu partout dans le
processeur, on a des

25
00:02:03,530 --> 00:02:10,170
mots binaires, les variables booléennes,
que l'on ne déclarera jamais en

26
00:02:10,170 --> 00:02:14,514
fait, sont représentées sous forme d'un 0
pour

27
00:02:14,514 --> 00:02:18,050
faux, et puis d'un différent de 0, pour
vrai.

28
00:02:18,050 --> 00:02:21,534
En général on prend la valeur 1, mais des
opérations peuvent

29
00:02:21,534 --> 00:02:23,495
très bien conduire à des valeurs

30
00:02:23,495 --> 00:02:27,180
différentes, qui seront considérées comme
vraies.

31
00:02:27,180 --> 00:02:30,829
Alors, pour les calculs, la représentation
de

32
00:02:30,829 --> 00:02:34,956
l'information, on utilise le mot byte, 8
bits,

33
00:02:34,956 --> 00:02:38,380
on l'a déjà vu, une valeur entre 0 et

34
00:02:38,380 --> 00:02:44,075
255, que l'on peut représenter sous forme
d'un cercle.

35
00:02:44,075 --> 00:02:49,810
Si on incrémente et qu'on déborde, et
bien, on recommence, ça vous avez vu.

36
00:02:49,810 --> 00:02:51,840
Et puis maintenant, au niveau des

37
00:02:51,840 --> 00:02:54,710
applications, on va déclarer les types
bytes.

38
00:02:54,710 --> 00:03:00,461
Là je veux clignoter un certain nombre de
fois, et je vais faire une boucle for,

39
00:03:00,461 --> 00:03:05,355
dans lequel il faudra un compteur, la
variable

40
00:03:05,355 --> 00:03:07,954
i, et tant que je n'ai pas atteint mon

41
00:03:07,954 --> 00:03:11,345
nombre de clignotements, je vais faire mon
petit

42
00:03:11,345 --> 00:03:16,860
clignotement, ici, et incrémenter le
compteur, pour cette condition.

43
00:03:16,860 --> 00:03:21,459
Alors, le type char, a été défini
historiquement, pour représenter des

44
00:03:21,459 --> 00:03:25,605
caractères qui sont entre 0 et 127, et,
pour une raison

45
00:03:25,605 --> 00:03:32,340
surprenante, qui peut dépendre encore du
compilateur, il est considéré comme signé,

46
00:03:32,340 --> 00:03:39,400
et c'est parfois prudent d'écrire signed
char, et puis pour un byte, unsigned char.

47
00:03:39,400 --> 00:03:44,763
Donc, voilà alors, la représentation peut
se faire aussi sur un

48
00:03:44,763 --> 00:03:50,605
cercle, avec les nombres négatifs qui sont
sur cette moitié du cercle, et c'est

49
00:03:50,605 --> 00:03:55,652
au niveau de la transition ici, que
l'additionneur pourra

50
00:03:55,652 --> 00:04:00,920
signaler des erreurs, mais, votre
programme, sauf

51
00:04:00,920 --> 00:04:06,704
programmation assez astucieuse, ne se
préoccupe pas du tout

52
00:04:06,704 --> 00:04:12,000
de ce genre de dépassement de capacité,
qui sont très difficiles à bien gérer.

53
00:04:12,000 --> 00:04:15,666
Alors, un petit quizz, pour voir si vous
avez

54
00:04:15,666 --> 00:04:20,631
bien compris, je définis un char ss, donc
un nombre 8

55
00:04:20,631 --> 00:04:25,390
bits signé, qui vaut 200, un nombre 8 bits

56
00:04:25,390 --> 00:04:30,427
non signé, qui vaut 200 également, et je
me trouve

57
00:04:30,427 --> 00:04:35,433
dans une instruction avec un if.
Est-ce que ss, est

58
00:04:35,433 --> 00:04:40,870
identique à bb?
Est-ce que cette expression

59
00:04:40,870 --> 00:04:42,436
est vraie ou fausse?

60
00:04:42,436 --> 00:04:47,400
Alors, voilà les réponses possibles,
réfléchissez un instant.

61
00:04:52,175 --> 00:05:00,070
Alors, si vous avez répondu "not
accepted", je serais assez satisfait,

62
00:05:00,070 --> 00:05:06,575
puisque on a défini ici, un ss égal 200,
qui est en fait sur le cercle des

63
00:05:06,575 --> 00:05:11,670
nombres arithmétiques du 8 bits, le
processeur ne voit que des bits et

64
00:05:11,670 --> 00:05:16,750
des nombres, donc le 200 va se trouver à
peu près par là; et puis,

65
00:05:16,750 --> 00:05:20,733
dans cette partie-là, et bien, on a des

66
00:05:20,733 --> 00:05:24,680
nombres négatifs, ça correspond en fait à
moins 57.

67
00:05:24,680 --> 00:05:30,031
Donc, un bon compilateur devrait vous
poser la question : Est-ce

68
00:05:30,031 --> 00:05:35,230
que vous avez bien compris ce que c'était
un nombre signé?

69
00:05:35,230 --> 00:05:38,270
Puisque ici, vous avez écrit une valeur,

70
00:05:38,270 --> 00:05:42,030
qui n'est pas une valeur positive, elles
sont

71
00:05:42,030 --> 00:05:46,570
limitées, à 127, comme on l'a vu.
Alors, en fait le

72
00:05:46,570 --> 00:05:52,040
compilateur s'en fiche, et on a le choix
de savoir si c'est vrai ou faux.

73
00:05:52,040 --> 00:05:57,109
Alors, on doit comparer cette valeur moins

74
00:05:57,109 --> 00:06:02,170
57, avec, la valeur 200.
Si on représente

75
00:06:02,170 --> 00:06:07,450
ça sur un axe, et bien vous avez 0, 200,
et puis,

76
00:06:07,450 --> 00:06:13,100
ça semblerait assez logique de dire, il y
a ici jusqu'à

77
00:06:13,100 --> 00:06:17,910
moins 128, et on va trouver ici le 57.

78
00:06:17,910 --> 00:06:23,146
Alors là, c'est évident que 200 est

79
00:06:23,146 --> 00:06:28,250
supérieur à moins 57, et qu'ils sont

80
00:06:28,250 --> 00:06:33,303
différents.
Alors est-ce que vraiment

81
00:06:33,303 --> 00:06:39,740
le compilateur, raisonne comme moi?
Je suis prudent.

82
00:06:39,740 --> 00:06:43,980
Je n'ai pas lu les 600 pages des
spécifications du C,

83
00:06:43,980 --> 00:06:48,732
donc je vais préférer écrire un petit
programme, et puis mettre

84
00:06:48,732 --> 00:06:54,043
derrière cette instruction if, allumer la
lettre si c'est vrai, éteindre

85
00:06:54,043 --> 00:06:58,386
une lettre si c'est faux; et, je pourrais
être sûr que

86
00:06:58,386 --> 00:07:01,520
mon interprétation est correcte.

87
00:07:01,520 --> 00:07:06,884
Donc ça c'est une technique qu'il faut
toujours utiliser,

88
00:07:06,884 --> 00:07:11,344
écrire des petits programmes, pour
vérifier qu'on a bien compris.

89
00:07:11,344 --> 00:07:17,080
Vous avez naturellement les types 16 bits
et 32 bits, qui s'appellent word, int,

90
00:07:17,080 --> 00:07:23,439
alors, le int est abondamment utilisé dans
Arduino, parce que on ne veut

91
00:07:23,439 --> 00:07:28,190
pas expliquer trop de choses, et puis,
c'est le type passe partout.

92
00:07:28,190 --> 00:07:33,026
En général, on travaille avec des mots qui
sont relativement

93
00:07:33,026 --> 00:07:38,364
courts, donc on ne voit pas la différence,
entre entier positif et entier signé,

94
00:07:38,364 --> 00:07:43,723
tant que le 16 bits n'est pas retouché,
vous avez, les longs

95
00:07:43,723 --> 00:07:49,065
qui sont signés et qu'il faut appeler
unsigned

96
00:07:49,065 --> 00:07:53,990
long, quand vous voulez récupérer ces
derniers bits.

97
00:07:53,990 --> 00:07:59,440
Et, comme petit exemple de l'utilisation
assez rare du long,

98
00:07:59,440 --> 00:08:04,457
vous avez, une primitive d'Arduino, ce
n'est pas du

99
00:08:04,457 --> 00:08:09,710
C, c'est les compilateurs Arduino et
compatibles, qui ont rajouté

100
00:08:09,710 --> 00:08:14,590
un petit programme, qui utilise une
ressource interne du processeur,

101
00:08:14,590 --> 00:08:18,955
pour calculer le temps à partir du reset.
Donc au moment où vous lâchez le

102
00:08:18,955 --> 00:08:24,989
processeur, vous avez la valeur 0, et
ensuite, ça incrémente de 1 toutes

103
00:08:24,989 --> 00:08:30,420
les millisecondes, et vous pouvez mesurer
le temps écoulé.

104
00:08:30,420 --> 00:08:35,060
Donc là, et bien, on utilise ça assez
souvent, comme vous le faites

105
00:08:35,060 --> 00:08:37,382
quand vous partez en voiture, vous

106
00:08:37,382 --> 00:08:40,050
regardez l'heure du départ, vous regardez
l'heure

107
00:08:40,050 --> 00:08:42,210
d'arrivée, et puis, le temps de parcours
qui

108
00:08:42,210 --> 00:08:44,466
vous intéresse, et bien, c'est une bête
différence.

109
00:08:44,466 --> 00:08:51,440
Donc, il nous faudra définir dans le type
long, le temps, le temps précédent,

110
00:08:51,440 --> 00:08:57,661
le temps de départ, et puis on va calculer
le temps écoulé, avec une soustraction.

111
00:08:57,661 --> 00:09:00,859
Donc on va mémoriser le temps actuel, on a

112
00:09:00,859 --> 00:09:05,560
déjà mémorisé le temps précédent, on fait
la différence.

113
00:09:05,560 --> 00:09:08,860
Et si maintenant, on continue le voyage,
et qu'on veut de

114
00:09:08,860 --> 00:09:13,810
nouveau connaître le temps, on remémorise
le temps actuel dans la variable.

115
00:09:13,810 --> 00:09:19,090
Alors, vous me direz, tiens, on pourrait
économiser une variable,

116
00:09:19,090 --> 00:09:24,651
parce que, je peux faire ma soustraction,
en regardant ma montre,

117
00:09:24,651 --> 00:09:29,145
plutôt que d'avoir déjà copié l'heure sur
un bout de papier ou dans ma mémoire.

118
00:09:29,145 --> 00:09:30,745
Donc on pourrait écrire

119
00:09:30,745 --> 00:09:34,088
directement millis moins previous time, et

120
00:09:34,088 --> 00:09:38,086
puis réinitialiser le nouveau temps, avec
millis.

121
00:09:38,086 --> 00:09:41,500
Alors, ce que j'aimerais vous faire
remarquer, c'est que,

122
00:09:41,500 --> 00:09:46,650
entre ces deux instructions, le temps
n'est pas le même,

123
00:09:46,650 --> 00:09:51,240
puisque il a fallu exécuter un certain
nombre d'instructions,

124
00:09:51,240 --> 00:09:55,821
pour analyser cette ligne, et commencer en
analysant un certain

125
00:09:55,821 --> 00:10:01,094
nombre, avant de transférer le temps.
Donc, ça, ça peut être 10, 20

126
00:10:01,094 --> 00:10:06,198
instructions du processeur, donc, 5, 10

127
00:10:06,198 --> 00:10:11,710
microsecondes, qu'on peut considérer comme
tout à fait négligeables.

128
00:10:11,710 --> 00:10:16,041
Mais, attention, si vous avez autorisé les
interruptions, et c'est

129
00:10:16,041 --> 00:10:21,046
ça qui arrivera dans des applications
intéressantes, vous pouvez avoir une

130
00:10:21,046 --> 00:10:25,780
interruption qui surgit entre ces deux
instructions, et, c'est

131
00:10:25,780 --> 00:10:28,326
comme avec votre PC, et bien tout à coup
votre

132
00:10:28,326 --> 00:10:31,823
clavier est mort, parce qu'il y a les
interruptions qui

133
00:10:31,823 --> 00:10:36,420
font que, on ne s'occupe plus de votre
programme principal.

134
00:10:36,420 --> 00:10:40,684
Donc, dans ce cas-là, évidemment, si vous
avez plusieurs

135
00:10:40,684 --> 00:10:46,246
millisecondes, voir des secondes
d'attente, ça va complètement fausser les

136
00:10:46,246 --> 00:10:50,296
mesures de temps, alors qu'ici on a fait
une photographie

137
00:10:50,296 --> 00:10:55,150
précise à un instant, et puis, on a copié
la variable.

138
00:10:55,150 --> 00:10:58,790
Bien, parlons un petit peu des tableaux de
variables.

139
00:10:58,790 --> 00:11:02,885
Alors, une variable, on vient de le voir,
on

140
00:11:02,885 --> 00:11:05,973
peut la déclarer avec son point virgule à
la fin,

141
00:11:05,973 --> 00:11:08,038
et puis on peut lui assigner une valeur
qui

142
00:11:08,038 --> 00:11:11,697
sera valable au début du programme, qui
peut être transformée

143
00:11:11,697 --> 00:11:16,800
par la suite, puisque, si j'écris dans le
programme var 2 égal 33,

144
00:11:16,800 --> 00:11:22,020
et bien, j'ai réinitialisé cette variable
à une nouvelle valeur.

145
00:11:22,020 --> 00:11:27,046
Alors maintenant, c'est assez pratique
d'avoir des tableaux de variables, de ne

146
00:11:27,046 --> 00:11:32,286
pas devoir numéroter variable 1, 2, 3,
alors que ça va ensemble,

147
00:11:32,286 --> 00:11:37,680
donc, si on écrit tableau crochet 4, et
bien, vous réservez

148
00:11:37,680 --> 00:11:42,885
4 fois 16 bits signés et c'est déclaré,
vous pouvez

149
00:11:42,885 --> 00:11:48,308
donner des valeurs, à ces 4 modes 16 bits,
et le compilateur

150
00:11:48,308 --> 00:11:53,202
est assez intelligent pour compter et puis
mémoriser,

151
00:11:53,202 --> 00:11:57,972
que, il y a la valeur 4 ici, dans cet
index, on parle

152
00:11:57,972 --> 00:12:02,860
de d'indexage dans un tableau, et
maintenant je peux,

153
00:12:02,860 --> 00:12:08,476
en écrivant xx égal tableau crochets 2, je
peux aller chercher

154
00:12:08,476 --> 00:12:13,432
le deuxième élément mais souvenez-vous
qu'on compte toujours en binaire

155
00:12:13,432 --> 00:12:18,450
à partir de zéro, donc je vais récupérer
la valeur 33.

156
00:12:18,450 --> 00:12:23,058
Et puis maintenant je peux aussi assigner
une valeur dans

157
00:12:23,058 --> 00:12:27,864
mon tableau, écrire tableau 4 égal 15, et
ce qui va

158
00:12:27,864 --> 00:12:33,515
se passer là, ben, mon 4, vous remarquez
qu'il est en-dehors du tableau,

159
00:12:33,515 --> 00:12:39,223
le compilateur C, ne va en général rien
dire du tout, il va aller mettre

160
00:12:39,223 --> 00:12:43,364
dans la position mémoire suivante, la
valeur

161
00:12:43,364 --> 00:12:46,892
15 et va peut-être écraser une variable

162
00:12:46,892 --> 00:12:50,004
que vous utilisez dans le programme et

163
00:12:50,004 --> 00:12:53,028
ce sera une merveilleuse plantée, donc il
n'est

164
00:12:53,028 --> 00:12:56,930
pas conseillé de le faire, mais, c'est
facile à surveiller.

165
00:12:56,930 --> 00:13:01,505
Application pour un tableau : on veut
jouer quelques notes.

166
00:13:01,505 --> 00:13:06,840
Et puis on va mettre ces notes dans un
tableau pour dire,

167
00:13:06,840 --> 00:13:10,816
ben, si je veux un ré, ben la fréquence
est de 247 hertz.

168
00:13:10,816 --> 00:13:10,980
.

169
00:13:10,980 --> 00:13:14,096
Alors en fait, ce qu'on devra programmer,

170
00:13:14,096 --> 00:13:19,098
c'est une période, puisqu'il faudra
attirer le haut-parleur,

171
00:13:19,098 --> 00:13:23,882
la membrane du haut-parleur, la relâcher,
et faire ça avec

172
00:13:23,882 --> 00:13:28,020
une période que l'on peut déterminer à
partir de la fréquence.

173
00:13:28,020 --> 00:13:33,690
Alors devoir chaque fois calculer cette
période, est absurde,

174
00:13:33,690 --> 00:13:39,348
même si le temps était raisonnable, il
nous faut faire un tableau, autant mettre

175
00:13:39,348 --> 00:13:44,680
dans ce tableau directement les périodes,
et c'est,

176
00:13:44,680 --> 00:13:48,366
on a donné un nom explicite, les périodes
des

177
00:13:48,366 --> 00:13:52,024
notes do, ré, mi, fa, qui vont se trouver
dans les

178
00:13:52,024 --> 00:13:55,764
positions 0, 1, 2, 3.
Donc maintenant je peux définir mon

179
00:13:55,764 --> 00:14:03,142
tableau en disant, iii nombres entiers,
période note, j'ai quatre notes

180
00:14:03,142 --> 00:14:10,544
que j'ai calculées et puis je peux
maintenant faire une boucle for puisqu'il

181
00:14:10,544 --> 00:14:14,070
faudra que je répète beaucoup de fois
cette

182
00:14:14,070 --> 00:14:19,054
période qui dure 4 microsecondes, 4
millisecondes, pardon là

183
00:14:19,054 --> 00:14:23,075
mon tableau est en microsecondes, pour
avoir une note

184
00:14:23,075 --> 00:14:27,270
que l'on peut entendre pendant une seconde
au moins.

185
00:14:27,270 --> 00:14:30,238
Donc on va faire un compteur qui va

186
00:14:30,238 --> 00:14:35,594
travailler avec la demi-période, et puis
pour changer l'état

187
00:14:35,594 --> 00:14:37,090
du haut-parleur.

188
00:14:37,090 --> 00:14:40,429
Alors de nouveau il y a deux choses qui
devraient vous choquer,

189
00:14:40,429 --> 00:14:46,239
le petit point-virgule, ça c'est
traditionnel, et puis il y a surtout

190
00:14:46,239 --> 00:14:51,511
ce 1, qui est là, alors que ce que je
voudrais, c'est avoir

191
00:14:51,511 --> 00:14:56,900
quelque chose, un nom explicite qui me dit
de quoi il s'agit.

192
00:14:56,900 --> 00:15:00,690
Donc ça c'est facile de faire un define,

193
00:15:00,690 --> 00:15:05,953
et puis de dire ben, define, ré, 1, et il
y a une facilité

194
00:15:05,953 --> 00:15:11,290
de, d'Arduino, et du C, qui est une
énumération,

195
00:15:11,290 --> 00:15:16,522
le nom n'est pas essentiel, mais j'ai mon
énumération

196
00:15:16,522 --> 00:15:21,170
ici, j'ai donné l'équivalence entre des
noms

197
00:15:21,170 --> 00:15:25,884
que je comprends et des numéros d'ordre
que mon

198
00:15:25,884 --> 00:15:31,974
processeur va comprendre.
Pourquoi est-ce que j'ai écrit doo?

199
00:15:31,974 --> 00:15:36,660
Ben c'est à cause du do, do while, hein,
c'est un mot

200
00:15:36,660 --> 00:15:40,979
réservé par le C, et vous le voyez à
l'éditeur il est

201
00:15:40,979 --> 00:15:45,850
coloré alors que les noms que vous
définissez vous-mêmes ne sont pas

202
00:15:45,850 --> 00:15:50,924
colorés, donc si vous définissez, si vous
mettez do là-dedans vous aurez

203
00:15:50,924 --> 00:15:52,706
un message d'erreur naturel.

204
00:15:52,706 --> 00:15:58,130
Bien, autre application qui est souvent
documentée sur internet, vous voulez

205
00:15:58,130 --> 00:16:04,658
allumer un affichage, set seg1, c'est le
nom habituel de ces

206
00:16:04,658 --> 00:16:10,590
segments, et là vous trouvez comme exemple
de programmation, il faut

207
00:16:10,590 --> 00:16:16,240
commencer par dire que les pins sur
lesquels le processeur est câblé

208
00:16:16,240 --> 00:16:20,050
sont sortis, alors les pins 2, 3, 4,
jusqu'à

209
00:16:20,050 --> 00:16:24,710
9 dans l'ordre sont utilisés et sont
programmés en sortie.

210
00:16:24,710 --> 00:16:29,548
Et puis là, je ne me souviens plus du
commentaire qu'il y avait avant mais je

211
00:16:29,548 --> 00:16:35,530
devine que le a est câblé sur la pin 2, le
b sur la pin 3,

212
00:16:35,530 --> 00:16:41,344
ça semblerait assez logique, et
évidemment, je préfèrerais que ça

213
00:16:41,344 --> 00:16:44,264
soit documenté un petit peu mieux, qu'on
dise

214
00:16:44,264 --> 00:16:46,896
define segment a sur la pin 2, segment

215
00:16:46,896 --> 00:16:49,052
b sur la pin 3, comme ça on

216
00:16:49,052 --> 00:16:52,920
sait exactement ce qui a été câblé, et
maintenant

217
00:16:52,920 --> 00:16:56,295
puisqu'on vient de parler des tableaux de
données,

218
00:16:56,295 --> 00:16:58,545
ben, là ça me fait vraiment penser à

219
00:16:58,545 --> 00:17:01,845
un tableau, et puis je vais le définir,

220
00:17:01,845 --> 00:17:06,475
en disant, c'est mes numéros de pins,
segment a,

221
00:17:06,475 --> 00:17:11,263
segment b, segment 3, donc j'ai défini ici
2, 3, 4, mais je

222
00:17:11,263 --> 00:17:16,256
reconnais de quoi il s'agit, heu, ça me
fait un tableau de

223
00:17:16,256 --> 00:17:21,131
7, et puis maintenent, je peux écrire une
boucle

224
00:17:21,131 --> 00:17:26,120
for, en disant je pars avec i égal zéro,
et j'écris

225
00:17:26,120 --> 00:17:31,476
pinMode, pin de zéro, OUTPUT,pin de zëro
ça veut dire

226
00:17:31,476 --> 00:17:36,004
que je vais chercher dans ce tableau le
segment

227
00:17:36,004 --> 00:17:40,902
a, qui a été défini comme étant pin numéro
2,

228
00:17:40,902 --> 00:17:45,910
donc j'exécute exactement cette
instruction

229
00:17:45,910 --> 00:17:50,610
avec pinMode, pin crochets zéro,

230
00:17:50,610 --> 00:17:56,633
OUTPUT, et puis évidemment avec la boucle
for je prends 1, je prends

231
00:17:56,633 --> 00:18:02,142
2, je prends 3, l'ordre, les numéros de
pins n'ont pas du tout besoin

232
00:18:02,142 --> 00:18:06,285
d'être dans un ordre croissant, j'ai
défini

233
00:18:06,285 --> 00:18:09,990
ici les pins qui peuvent être absolument
quelconques.

234
00:18:09,990 --> 00:18:16,543
Donc voilà une écriture qui est beaucoup
plus élégante, et, on peut aller plus

235
00:18:16,543 --> 00:18:22,799
loin, parce que j'ai défini mes pins, je
peux définir

236
00:18:22,799 --> 00:18:27,463
le digit 7 comme étant un tableau.

237
00:18:27,463 --> 00:18:32,450
Dans ce tableau, j'ai a, b, c, qui sont
actifs,

238
00:18:32,450 --> 00:18:38,666
allumés, ça ne veut pas dire que je vais
mettre un 5

239
00:18:38,666 --> 00:18:40,773
volts ou un 0 volt, c'est à un autre
niveau qu'on

240
00:18:40,773 --> 00:18:46,780
réfléchira à ça, et puis ensuite là des
segments qui sont éteints.

241
00:18:46,780 --> 00:18:48,580
Et puis maintenent,

242
00:18:48,580 --> 00:18:53,680
ben, pour allumer ce digit, je peux faire
une petite boucle

243
00:18:53,680 --> 00:18:58,431
for, où au lieu de faire du pinMode comme
tout à l'heure, et bien je vais faire un

244
00:18:58,431 --> 00:19:03,621
digitalWrite, pour dire ben, dans la pin
numéro zéro, par

245
00:19:03,621 --> 00:19:09,120
exemple, je vais mettre l'état du segment
zéro.

246
00:19:09,120 --> 00:19:13,965
Donc on retrouve le i ici, mais une fois
dans un tableau

247
00:19:13,965 --> 00:19:15,498
une fois dans l'autre.

248
00:19:15,498 --> 00:19:18,810
Alors maintenant, ben, accrochez vos
ceintures!

249
00:19:18,810 --> 00:19:24,218
Parce que je vais définir un tableau
bidimentionnel.

250
00:19:24,218 --> 00:19:28,924
J'ai 10 digits à représenter, et dans
chaque

251
00:19:28,924 --> 00:19:33,640
digit j'ai 8 bits.
Donc voilà mon tableau, vous reconnaissez

252
00:19:33,640 --> 00:19:39,658
le 7, il est là, là je le définis comme un
seul élément, mais maintenant

253
00:19:39,658 --> 00:19:44,928
je peux l'indexer, et puis je pourrai
venir avec

254
00:19:44,928 --> 00:19:49,990
un programme adéquat, sélectionner le 7,
qui sera une

255
00:19:49,990 --> 00:19:55,830
variable qui vaut 7, et puis balayer pour
afficher.

256
00:19:55,830 --> 00:20:00,390
Donc là, ben, j'ai fait un petit programme
pour afficher les chiffres dans l'ordre,

257
00:20:00,390 --> 00:20:04,950
for, ça ça sera, le compteur de chiffres,

258
00:20:04,950 --> 00:20:09,880
on termine par un delay d'une seconde
comme ça

259
00:20:09,880 --> 00:20:14,809
ben on verra 0, 1, 2, 3, affichés pendant
une seconde, et puis

260
00:20:14,809 --> 00:20:19,815
on a une deuxième for boucle à l'intérieur
qui va

261
00:20:19,815 --> 00:20:24,871
balayer les segments ici pour les mettre

262
00:20:24,871 --> 00:20:29,986
à 1 ou à 0, ça c'est le digitalWrite qui
agit sur des bits, il y

263
00:20:29,986 --> 00:20:33,057
a d'autres façons d'agir sur des bits, on

264
00:20:33,057 --> 00:20:36,036
les verra, qui sont compatibles avec le C,
ça

265
00:20:36,036 --> 00:20:39,514
c'est compatible avec Arduino, mais ça
nous donne une

266
00:20:39,514 --> 00:20:42,682
écriture assez élégante dans le fond où on
va

267
00:20:42,682 --> 00:20:47,347
balayer la bonne ligne du tableau, et
étant donné

268
00:20:47,347 --> 00:20:49,307
qu'on a une deuxième boucle for et bien on

269
00:20:49,307 --> 00:20:51,980
va afficher tous les chiffres successifs,
heu, il y

270
00:20:51,980 --> 00:20:55,580
a apparamment une petite erreur, qui est,
vous reconnaissez,

271
00:20:55,580 --> 00:21:01,780
c'est qu'ici j'ai oublié qu'il y avait 10
chiffres, de 0 jusqu'à

272
00:21:01,780 --> 00:21:07,670
9, donc il faut que je mettes un 10 ici,
je reviens sur cette table, qui permet

273
00:21:07,670 --> 00:21:13,600
d'afficher les, les digits, les chiffres
de 0 à 9.

274
00:21:13,600 --> 00:21:17,833
Vous n'avez peut-être pas réalisé que,
cette séquence de

275
00:21:17,833 --> 00:21:20,323
1 et de 0, ce ne sont pas des bits,

276
00:21:20,323 --> 00:21:25,017
mais ce sont des bytes, des mots de 8
bits.

277
00:21:25,017 --> 00:21:30,248
Donc cette table prend 8 fois 10 positions

278
00:21:30,248 --> 00:21:35,654
en mémoire, 80 bytes, et si sans
réfléchir, vous évcrivez

279
00:21:35,654 --> 00:21:40,574
int ici, et bien vous aurez 160 bytes
utilisés en

280
00:21:40,574 --> 00:21:45,556
mémoire.
Donc c'est clair que, on va éviter de

281
00:21:45,556 --> 00:21:51,054
programmer comme cela, on verra comment,
supprimer en fait les virgules,

282
00:21:51,054 --> 00:21:56,074
supprimer un seul mot de 8 bits pour
chaque digit, appliquer ces bits

283
00:21:56,074 --> 00:22:01,950
directement sur les segments, et être
beaucoup plus efficaces.

284
00:22:01,950 --> 00:22:06,875
Alors encore une chose : en écrivant byte
digit, ou int

285
00:22:06,875 --> 00:22:11,962
digit, vous réservez de la place en
mémoire.

286
00:22:11,962 --> 00:22:17,280
En mémoire variable.
Si vous précisez const,

287
00:22:17,280 --> 00:22:22,485
et bien vous allez définir des constantes

288
00:22:22,485 --> 00:22:27,690
et c'est clair qu'on ne va pas s'amuser à
modifier des segments

289
00:22:27,690 --> 00:22:32,155
pendant l'exécution, donc en écrivant
const, cette

290
00:22:32,155 --> 00:22:37,237
information va passer dans l'espace
programme, qui a dix

291
00:22:37,237 --> 00:22:43,365
fois plus de place que l'espace des
variables, et c'est la façon la

292
00:22:43,365 --> 00:22:47,874
plus efficace de procéder, déclarer const
toutes

293
00:22:47,874 --> 00:22:50,880
les fois que vous avez des constantes.

294
00:22:50,880 --> 00:22:57,062
Donc vous voyez que, le C permet des
écritures qui sont, heu tout à fait

295
00:22:57,062 --> 00:23:03,126
compactes et intéressantes, et puis c'est
ce que l'on va continuer

296
00:23:03,126 --> 00:23:09,080
à découvrir en interagissant avec
différents types de matériel.