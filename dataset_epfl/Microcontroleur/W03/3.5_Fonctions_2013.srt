1
00:00:00,000 --> 00:00:05,292
Bonjour, on vous a déjà parlé de

2
00:00:05,292 --> 00:00:12,030
fonctions, aujourd'hui, on va rentrer dans
les détails, mieux préciser les

3
00:00:12,030 --> 00:00:17,192
conventions d'écriture, la différence
entre define et fonctions, parler

4
00:00:17,192 --> 00:00:21,640
de l'exécution interne et voir les
différents types de fonctions.

5
00:00:21,640 --> 00:00:25,474
Concernant les règles d'écriture,
l'habitude est d'avoir

6
00:00:25,474 --> 00:00:30,343
les constantes en majuscules, et on a déjà
vu OUTPUT, HIGH, je ne respecte

7
00:00:30,343 --> 00:00:33,978
pas tellement cette convention, puisque,
avec des

8
00:00:33,978 --> 00:00:37,880
noms explicites, c'est assez lourd comme
écriture.

9
00:00:37,880 --> 00:00:43,274
Les variables, la règle est d'avoir des
minuscules, on a déjà vu le

10
00:00:43,274 --> 00:00:47,260
i dans les boucles for, compteur,
niveauMaximum,

11
00:00:47,260 --> 00:00:50,704
certains préfèrent mettre des soulignés, à
vous

12
00:00:50,704 --> 00:00:55,806
de décider.
Du côté des définitions, on a une première

13
00:00:55,806 --> 00:01:01,380
lettre qui est majuscule, et les
définitions s'appliquent

14
00:01:01,380 --> 00:01:06,760
au matériel.
Du côté des fonctions, on a également

15
00:01:06,760 --> 00:01:11,184
des majuscules en première position, mais
ils

16
00:01:11,184 --> 00:01:16,230
sont, une fonction va désigner une action.

17
00:01:16,230 --> 00:01:22,304
Donc là, j'insiste et je vais encore
insister, les definitions c'est

18
00:01:22,304 --> 00:01:28,380
concernant le matériel, les fonctions
c'est concernant la fonctionnalité.

19
00:01:28,380 --> 00:01:33,150
Et, dans certains langages, on fait une
différence subtile entre

20
00:01:33,150 --> 00:01:37,620
procédures et fonctions, le C, ne fait pas
cette différence.

21
00:01:37,620 --> 00:01:41,463
Alors, je reviens encore la-dessus :
define pour décrire le matériel,

22
00:01:41,463 --> 00:01:47,320
fonction pour la fonctionnalité, je prends
un exemple, avec un robot simple.

23
00:01:47,320 --> 00:01:52,690
Ce robot simple a deux moteurs, si vous
regardez

24
00:01:52,690 --> 00:01:57,874
l'arrière du moteur, là où les fils
partent, vous avez un plus

25
00:01:57,874 --> 00:02:01,482
et un moins, et, si vous envoyez le
courant sur

26
00:02:01,482 --> 00:02:06,580
le plus, tous les moteurs du même
fabricant, vont tourner dans

27
00:02:06,580 --> 00:02:11,291
le même sens.
Donc, je définis ici, le plus de mon

28
00:02:11,291 --> 00:02:16,190
moteur, va être sur la pin 4, le moins sur
la pin 3.

29
00:02:16,190 --> 00:02:21,422
Et maintenant, pour que le moteur avance,
c'est-à-dire que

30
00:02:21,422 --> 00:02:26,536
pour que ce moteur tourne dans le sens qui
va faire avancer le robot, je

31
00:02:26,536 --> 00:02:31,780
dois mettre sur la pin 4 un 0, sur la pin
3,

32
00:02:31,780 --> 00:02:32,610
un 1.

33
00:02:32,610 --> 00:02:36,012
Et là, ça ne sera pas accepté par le
compilateur,

34
00:02:36,012 --> 00:02:40,510
puisque, je n'ai pas mis des majuscules
comme c'est reconnu.

35
00:02:40,510 --> 00:02:43,993
Alors, maintenant, je vais définir la même
chose

36
00:02:43,993 --> 00:02:47,340
pour le moteur gauche, mais le moteur
gauche,

37
00:02:47,340 --> 00:02:50,570
pour qu'il avance, il faudra que je
permute

38
00:02:50,570 --> 00:02:54,883
ici, ces deux définitions, les moteurs
sont symétriques.

39
00:02:54,883 --> 00:02:56,910
Donc, sur le moteur droit,

40
00:02:56,910 --> 00:03:01,150
si la pin plus doit être à 0, hé bien, sur
le moteur gauche, la

41
00:03:01,150 --> 00:03:05,415
pin plus devra être à 1.
Alors, on peut tâtonner, et puis sortir

42
00:03:05,415 --> 00:03:11,020
son fer à souder, pour déplacer les fils,
mais voyez que si on réfléchit bien,

43
00:03:11,020 --> 00:03:16,294
on aura quelque chose qui est, correct,
qui réagira selon la

44
00:03:16,294 --> 00:03:21,924
définition du matériel.
Et maintenant si on veut faire avancer le

45
00:03:21,924 --> 00:03:27,312
robot, et bien là, c'est une action, qui
nécessite d'avoir les deux moteurs

46
00:03:27,312 --> 00:03:32,260
qui avancent, on a défini ce qui les
faisait avancer,

47
00:03:32,260 --> 00:03:36,945
on n'a plus besoin de se préoccuper du
câblage et du matériel.

48
00:03:36,945 --> 00:03:40,650
Alors maintenant, on peut rajouter une
fonction qui est de faire un

49
00:03:40,650 --> 00:03:46,020
aller-retour, avec une certaine durée qui
va fixer la distance de déplacement.

50
00:03:46,020 --> 00:03:47,160
On avance,

51
00:03:47,160 --> 00:03:51,960
on attend, on recule, on attend, la durée
étant

52
00:03:51,960 --> 00:03:56,690
paramètre de cette fonction.
Et dans le programme

53
00:03:56,690 --> 00:04:01,878
principal, et bien, on va avoir, faire
aller-retour,

54
00:04:01,878 --> 00:04:07,005
la durée d'action, et évidemment, c'est un
cas un petit peu

55
00:04:07,005 --> 00:04:12,375
simplifié, qui montre bien la
hiérarchisation des fonctions.

56
00:04:12,375 --> 00:04:16,846
Ce que l'on vient de faire, c'est une
programmation

57
00:04:16,846 --> 00:04:22,480
descendante, on est parti du matériel pour
aller vers la complexité.

58
00:04:22,480 --> 00:04:27,690
Dans les cas réels, on se préoccupe
d'abord,

59
00:04:27,690 --> 00:04:32,235
de l'application, de son cahier des
charges, de la

60
00:04:32,235 --> 00:04:37,390
structure du programme principal, des
appels systèmes que

61
00:04:37,390 --> 00:04:42,431
l'on va utiliser, qui eux-mêmes, vont
faire des appels à

62
00:04:42,431 --> 00:04:47,620
des fonctions plus simples, qui vont
s'appuyer sur le matériel,

63
00:04:47,620 --> 00:04:53,130
donc, top-down, ou bottom-up, ce sont les
deux options.

64
00:04:53,130 --> 00:04:55,877
Comment est-ce que ça marche de façon
interne?

65
00:04:55,877 --> 00:04:58,530
Le programme a été mémorisé en mémoire, et

66
00:04:58,530 --> 00:05:02,602
vous avez un compteur d'adresses, le PC,
qui pointe

67
00:05:02,602 --> 00:05:08,410
l'instruction qui va être exécutée.
Ce compteur d'adresses augmente chaque

68
00:05:08,410 --> 00:05:13,847
fois que l'instruction a été exécutée, et,
pendant l'exécution

69
00:05:13,847 --> 00:05:18,859
du programme, on va se référer à l'unité
arithmétique, on va

70
00:05:18,859 --> 00:05:24,230
accéder des variables pour faire la
fonction qui vous intéresse.

71
00:05:24,230 --> 00:05:27,971
Vous tombez sur une instruction qui vont
permettre

72
00:05:27,971 --> 00:05:32,968
de faire une boucle, en assembleur ça
s'appelle Jump, Jump A1.

73
00:05:32,968 --> 00:05:38,505
L'effet de cette instruction, et bien, ça
sera de copier la valeur A1 qui

74
00:05:38,505 --> 00:05:44,100
se trouve dans l'instruction dans le PC,
qui va repartir à

75
00:05:44,100 --> 00:05:49,620
l'adresse 3A1, pour ré-exécuter la boucle.

76
00:05:49,620 --> 00:05:52,673
Bien, maintenant, si on a un appel de
fonctions,

77
00:05:52,673 --> 00:05:56,720
c'est un petit peu différent,
l'instruction s'appelle Call en

78
00:05:56,720 --> 00:06:03,097
assembleur, et au niveau de la mémoire, le
compilateur

79
00:06:03,097 --> 00:06:09,410
à réservé, une place pour les fonctions, à
la suite du programme.

80
00:06:09,410 --> 00:06:12,686
Donc, on a le programme, ça continue avec
les

81
00:06:12,686 --> 00:06:17,974
fonctions, et j'appelle la première
fonction qui est en 7,1F,

82
00:06:17,974 --> 00:06:24,255
donc le PC va être chargé par
l'instruction 3F, donc va continuer

83
00:06:24,255 --> 00:06:29,520
son exécution, en 7, 1F.

84
00:06:29,520 --> 00:06:32,289
Et maintenant, ce qui est important, c'est

85
00:06:32,289 --> 00:06:36,320
de retourner au programme principal, en
assembleur, c'est

86
00:06:36,320 --> 00:06:40,195
l'instruction Return, Ret, qui est
utilisée, et, à

87
00:06:40,195 --> 00:06:43,612
ce moment-là, comment est-ce qu'on sait où
retourner?

88
00:06:43,612 --> 00:06:49,458
Donc il y a une petite opération
supplémentaire caractéristique du Call,

89
00:06:49,458 --> 00:06:57,850
qui est de sauver dans le PC, l'adresse de
retour, qui sera 3A2, l'adresse suivante.

90
00:06:57,850 --> 00:07:03,174
Le PC augmente dès qu'il a lu
l'instruction, donc on a

91
00:07:03,174 --> 00:07:08,780
sauvé l'instruction qu'il aurait exécutée
autrement si ça n'était pas un Call.

92
00:07:08,780 --> 00:07:14,959
Et, l'instruction Return, va avoir pour
effet de remettre le

93
00:07:14,959 --> 00:07:21,568
SavePC dans le PC et l'exécution pourra
continuer.

94
00:07:21,568 --> 00:07:27,482
Alors maintenant, dans chaque fonction,
vous pouvez avoir besoin de

95
00:07:27,482 --> 00:07:33,669
variables, et ici, vous pouvez être amené
à utiliser la variable i,

96
00:07:33,669 --> 00:07:37,321
qui occupera cette position.Vous pouvez
avoir ici

97
00:07:37,321 --> 00:07:40,882
une autre fonction, qui va elle aussi,
avoir

98
00:07:40,882 --> 00:07:44,718
besoin d'une variable compteur que
j'appelle j,

99
00:07:44,718 --> 00:07:47,805
que j'appelle k, que je pourrais appeler
i.

100
00:07:47,805 --> 00:07:50,347
Pourquoi réserver une autre position
mémoire,

101
00:07:50,347 --> 00:07:55,140
une nouvelle position mémoire, dans chaque
fonction?

102
00:07:55,140 --> 00:07:58,806
Au moment où on accède ici, cette variable
j,

103
00:07:58,806 --> 00:08:03,862
on pourrait très bien aller accéder cette
même position mémoire, qui avait

104
00:08:03,862 --> 00:08:09,320
utilisée par une autre fonction, puisque
elle ne va pas s'exécuter en même temps.

105
00:08:09,320 --> 00:08:16,494
Donc, on distingue les variables locales,
et les variables globales qui sont

106
00:08:16,494 --> 00:08:23,638
elles, utilisées par le programme,
définies au début du programme,

107
00:08:23,638 --> 00:08:31,900
alors que les variables locales, sont
définies, au début des fonctions.

108
00:08:31,900 --> 00:08:36,175
Et maintenant ce qui se passe encore,
c'est que, au

109
00:08:36,175 --> 00:08:41,464
moment où vous appelez une fonction, par
exemple, la fonction delay,

110
00:08:41,464 --> 00:08:44,570
il y a un paramètre, qui est la durée du
retard,

111
00:08:44,570 --> 00:08:49,410
qui a été préparée dans le programme et
donc la fonction

112
00:08:49,410 --> 00:08:53,461
aura besoin.
Alors, ce paramètre il peut être transféré

113
00:08:53,461 --> 00:08:58,817
comme une variable globale, il peut être
transféré comme une variable locale,

114
00:08:58,817 --> 00:09:04,462
mais, le paramètre qu'on met dans une
fonction, on va le sauver avec

115
00:09:04,462 --> 00:09:09,930
l'adresse de retour, dans ce qu'on
appelle,

116
00:09:09,930 --> 00:09:14,776
la pile, dans le fond.
Et cette pile, avec le compteur

117
00:09:14,776 --> 00:09:18,266
d'adresse, c'est ce qui est préparé, au
moment

118
00:09:18,266 --> 00:09:22,038
de l'appel de la fonction, pour que la
fonction

119
00:09:22,038 --> 00:09:27,700
puisse travailler avec cet ensemble de
données

120
00:09:27,700 --> 00:09:33,334
et revenir au programme, en ayant,
éventuellement, rajouté, des données.

121
00:09:33,334 --> 00:09:38,280
Alors prenons des exemples, en commençant
par les choses les plus simples.

122
00:09:38,280 --> 00:09:40,080
Vous avez la fonction

123
00:09:40,080 --> 00:09:46,875
"clignoter une fois", vous l'appelez par,
ClignoteUneFois, il n'y a pas

124
00:09:46,875 --> 00:09:52,980
de paramètres qui vont être transférés,
sur la pile, la parenthèse est vide.

125
00:09:52,980 --> 00:09:59,069
Vous avez la fonction ClignoteXFois, là
vous avez un paramètre

126
00:09:59,069 --> 00:10:05,172
et il faut dire quel va être le nom de ce
paramètre, mais c'est un nom local,

127
00:10:05,172 --> 00:10:08,359
c'est un nom uniquement utilisé là-dedans.

128
00:10:08,359 --> 00:10:14,130
Par contre, on a du bien préciser quelle
était la taille à réserver sur la

129
00:10:14,130 --> 00:10:20,448
pile, pour transférer ce paramètre, et,
quand on appelle, et

130
00:10:20,448 --> 00:10:25,236
bien, on a clignoté tant de fois, le
paramètre une constante ou une

131
00:10:25,236 --> 00:10:30,172
variable, mais, de type byte, si on met un
nombre trop grand ici,

132
00:10:30,172 --> 00:10:32,900
le compilateur devrait rouspéter.

133
00:10:32,900 --> 00:10:38,110
Ensuite on peut avoir deux paramètres, qui
n'ont pas nécessairement le

134
00:10:38,110 --> 00:10:42,115
même type, ont veut clignoter x fois, avec
une certaine période.

135
00:10:42,115 --> 00:10:45,517
Hé bien, on va donner le type byte pour le
nombre de

136
00:10:45,517 --> 00:10:50,834
fois, le type byte pour la période, et on
aura les deux paramètres.

137
00:10:50,834 --> 00:10:55,206
Et on pourra tester maintenant, ce
programme, il faut toujours tester les

138
00:10:55,206 --> 00:10:59,107
fonctions quand on les a écrites, avec une
petite boucle,

139
00:10:59,107 --> 00:11:04,560
on clignote trois fois, et puis, on ne
fait plus rien.

140
00:11:04,560 --> 00:11:09,340
Si vous supprimez ce while, qu'est-ce qui
se passe?

141
00:11:09,340 --> 00:11:12,756
Vous clignotez trois fois, vous clignotez
trois fois, vous clignotez

142
00:11:12,756 --> 00:11:17,019
trois fois, vous avez l'impression que
votre programme est faux.

143
00:11:17,019 --> 00:11:20,442
Il faut ajouter un delay ici, pour
qu'après chaque

144
00:11:20,442 --> 00:11:25,200
clignotements trois fois, et bien, vous
avez un espace qui vous permet

145
00:11:25,200 --> 00:11:29,717
de vérifier que quand se trouve le début
de l'appel de la fonction.

146
00:11:29,717 --> 00:11:36,070
Alors maintenant, on peut avoir un
paramètre en sortie, c'est-à-dire que la

147
00:11:36,070 --> 00:11:43,260
fonction a préparé, a calculé une valeur
qui doit retourner au programme principal.

148
00:11:43,260 --> 00:11:45,638
Et, il faudra réserver de la place

149
00:11:45,638 --> 00:11:48,720
en mémoire, dire quel est ce résultat, et
il

150
00:11:48,720 --> 00:11:52,035
peut y avoir des variables locales qu'il
faudra déclarer.

151
00:11:52,035 --> 00:11:55,756
Alors, un exemple pour illustrer les
choses, là je m'appuie sur

152
00:11:55,756 --> 00:12:00,505
quelque chose qu'on avait déjà vu, lire le
poussoir, lire un poussoir.

153
00:12:00,505 --> 00:12:07,066
On peut en faire une fonction, ce qu'on
lit c'est Poussoir activé, inactivé,

154
00:12:07,066 --> 00:12:10,880
c'est en fait une variable booléenne.
Ça peut

155
00:12:10,880 --> 00:12:15,860
s'écrire comme ça, même si ça n'est pas
habituel.

156
00:12:15,860 --> 00:12:20,855
Et puis cette fonction, va rendre

157
00:12:20,855 --> 00:12:26,262
l'état du poussoir, pressé ou non pressé,
et,

158
00:12:26,262 --> 00:12:31,309
c'est l'instruction return, dans le fond,
qui permet

159
00:12:31,309 --> 00:12:36,416
de signaler ce fait.
Alors, si on avait une fonction

160
00:12:36,416 --> 00:12:41,350
un petit peu plus complexe ici, et bien,
on pourrait définir une

161
00:12:41,350 --> 00:12:46,360
variable booléenne, etatPous, dire, l'état
du

162
00:12:46,360 --> 00:12:51,554
poussoir, c'est l'état de notre poussoir
avec

163
00:12:51,554 --> 00:12:56,800
le digitalRead, et je vais retourner la
variable qui

164
00:12:56,800 --> 00:13:01,776
a été déclarée.
Donc c'est là qu'il faut bien

165
00:13:01,776 --> 00:13:06,080
y voir clair, on réserve de la place, pour
quelque

166
00:13:06,080 --> 00:13:10,392
chose qui va être retourné qui sera du
même type

167
00:13:10,392 --> 00:13:14,633
booléen, et, on peut le déclarer, on peut
déclarer une

168
00:13:14,633 --> 00:13:19,772
variable qui sera retournée, qui doit
être, naturellement du même type.

169
00:13:19,772 --> 00:13:26,036
Au niveau de l'appel, et bien, on écrit if
PousOn, parenthèses,

170
00:13:26,036 --> 00:13:33,538
puisqu'on n'a pas envoyé de paramètres,
mais vous vous souvenez du define, avec

171
00:13:33,538 --> 00:13:38,340
le define, il n'y a pas cette parenthèse,
le comportement sera exactement

172
00:13:38,340 --> 00:13:41,640
le même, donc au moment où vous appelez
les actions, il faut bien

173
00:13:41,640 --> 00:13:45,680
savoir si elles ont été définies par un
define, ou par une fonction.

174
00:13:45,680 --> 00:13:47,863
Là, j'ai pris un exemple booléen qui est
un

175
00:13:47,863 --> 00:13:51,135
petit peu inhabituel, mais c'était pour
qu'on se raccroche à

176
00:13:51,135 --> 00:13:55,746
quelque chose de connu.
L'exemple qu'on vous explique très

177
00:13:55,746 --> 00:14:00,731
souvent, c'est la multiplication, où on
vous dit : vous

178
00:14:00,731 --> 00:14:05,660
voulez multiplier deux nombres a, b, et
puis ça va

179
00:14:05,660 --> 00:14:10,708
donner un résultat; alors, il faudra

180
00:14:10,708 --> 00:14:16,325
naturellement définir a égal 3, b égal 4,
et dire

181
00:14:16,325 --> 00:14:21,430
quels sont leurs types.
Alors

182
00:14:21,430 --> 00:14:26,777
ça, c'est des variables globales, et

183
00:14:26,777 --> 00:14:32,138
puis maintenant, au moment de l'appel de
la multiplication, et bien,

184
00:14:32,138 --> 00:14:37,550
il faudra répéter ce type.
Et maintenant, je peux

185
00:14:37,550 --> 00:14:42,550
retourner cette valeur, en écrivant

186
00:14:42,550 --> 00:14:47,142
return, a fois b; mais

187
00:14:47,142 --> 00:14:52,170
il faut que j'ai averti le

188
00:14:52,170 --> 00:14:57,300
compilateur, de réserver de la place, pour
cette

189
00:14:57,300 --> 00:15:02,530
valeur a fois b.
Donc, on va mettre ici, le type entier,

190
00:15:02,530 --> 00:15:07,610
et voilà une fonction qui va passer dans
sa forme

191
00:15:07,610 --> 00:15:12,170
la plus simple.
Si maintenant, je veux

192
00:15:12,170 --> 00:15:17,457
introduire une variable, et bien, il faut
que

193
00:15:17,457 --> 00:15:22,975
je dise, je vais, définir que le produit
est une

194
00:15:22,975 --> 00:15:28,631
variable de type c, je vais calculer c
égal

195
00:15:28,631 --> 00:15:33,900
à fois b, et je vais retourner

196
00:15:33,900 --> 00:15:38,550
le résultat c, et terminer ma

197
00:15:38,550 --> 00:15:43,136
fonction.
Bien, on a donc vu comment

198
00:15:43,136 --> 00:15:48,210
s'exécute une fonction et on a mis en
évidence,

199
00:15:48,210 --> 00:15:53,850
l'importance de définir des noms clairs,
en français, en anglais,

200
00:15:53,850 --> 00:15:59,500
en mélange, je crois que c'est très
difficile de définir des noms clairs.

201
00:15:59,500 --> 00:16:06,890
Donc, on va pouvoir maintenant, utiliser
les fonctions dans nos prochains exemples.

