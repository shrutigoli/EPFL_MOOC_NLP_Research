1
00:00:04,280 --> 00:00:08,560
Bonjour, nous continuons le cours :
comprendre les microcontrôleurs.

2
00:00:08,560 --> 00:00:11,953
Nous avons déjà parlé de programmation,
nous

3
00:00:11,953 --> 00:00:15,076
avons déjà parlé du langage C Mais
aujourd'hui

4
00:00:15,076 --> 00:00:17,150
j'aimerais revenir un petit peu plus en

5
00:00:17,150 --> 00:00:19,990
détails sur certains points concernant ce
langage C.

6
00:00:19,990 --> 00:00:23,520
Nous donnerons quelques éléments de son
histoire, c'est intéressant.

7
00:00:23,520 --> 00:00:26,094
Nous donnerons quelques explications sur
les

8
00:00:26,094 --> 00:00:28,640
variables et surtout sur les assignations.

9
00:00:28,640 --> 00:00:29,420
Nous parlerons

10
00:00:29,420 --> 00:00:32,720
plus en détails des structures de contrôle
qu'il est évidemment

11
00:00:32,720 --> 00:00:36,580
essentiel de bien comprendre pouvoir faire
même des programmes simples.

12
00:00:36,580 --> 00:00:39,028
Et finalement, je dirai quelques mots sur

13
00:00:39,028 --> 00:00:41,960
les procédures ainsi que le programme
principal.

14
00:00:41,960 --> 00:00:48,900
C'est en 1972 que le langage C a été créé.

15
00:00:48,900 --> 00:00:52,120
Donc vous imaginez que c'est extrêmement
ancien.

16
00:00:52,120 --> 00:00:54,599
À cette époque-là, on utilisait des minis

17
00:00:54,599 --> 00:01:00,390
ordinateurs qui étaient grands comme une
armoire et il n'y en avait pas beaucoup.

18
00:01:00,390 --> 00:01:04,460
Donc la situation était très différente de
la situation actuelle.

19
00:01:04,460 --> 00:01:09,500
Ça a été développé dans les laboratoires
Bell de la grande

20
00:01:09,500 --> 00:01:14,536
société américaine AT&T Société de
télécommunication.

21
00:01:14,536 --> 00:01:19,734
Donc par Dennis Ritchie.
En fait c'est le résultat de l'évolution

22
00:01:19,734 --> 00:01:23,780
de langages plus anciens, en particulier
le langage B.

23
00:01:23,780 --> 00:01:26,972
Donc c'est peut être l'explication de son
nom,

24
00:01:26,972 --> 00:01:29,950
il s'appelle C ou alors C comme
compilateur.

25
00:01:29,950 --> 00:01:34,975
Étant donné la puissance des ordinateurs
de l'époque, c'est finalement un

26
00:01:34,975 --> 00:01:40,000
langage qui est proche de l'assembleur,
qui est relativement simple.

27
00:01:40,000 --> 00:01:43,530
Et surtout qui a une écriture extrêmement
concise.

28
00:01:43,530 --> 00:01:44,622
Et finalement,

29
00:01:44,622 --> 00:01:49,196
c'est cette simplicité et cette concision
qui fait du langage C un très

30
00:01:49,196 --> 00:01:53,770
bon candidat comme langage de
programmation pour les microcontrôleurs.

31
00:01:53,770 --> 00:01:59,235
C'est beaucoup plus tard que ce langage C
a été standardisé sous forme

32
00:01:59,235 --> 00:02:04,810
d'une norme ANSI en 1989 et également en
1999.

33
00:02:04,810 --> 00:02:10,700
Le langage C a été l'ancêtre de beaucoup
d'autres langages de programmation.

34
00:02:10,700 --> 00:02:14,510
Beaucoup de langages modernes s'inspirent
de la syntaxe du C.

35
00:02:14,510 --> 00:02:17,680
Je citerais très simplement comme exemple
le langage JAVA.

36
00:02:17,680 --> 00:02:22,785
Le C ++ est un autre langage que le
langage C.

37
00:02:22,785 --> 00:02:27,890
Bien qu'il a énormément de points communs,
mais c'est une très grande extension du C.

38
00:02:27,890 --> 00:02:35,768
Je signale que la communauté libre autour
de Linux a un projet qui s'appelle GCC,

39
00:02:35,768 --> 00:02:41,660
donc GNU compiler collection, qui dispose
de, d'un grand nombre de compilateurs

40
00:02:41,660 --> 00:02:45,462
pour un grand nombre de processeurs, et ce
GCC est la base de

41
00:02:45,462 --> 00:02:51,734
beaucoup de compilateurs qui sont utilisés
pour les microcontrôleurs, et étant donné

42
00:02:51,734 --> 00:02:57,660
que c'est un produit libre, open source,
il est évidemment facile de l'obtenir.

43
00:02:57,660 --> 00:03:01,638
Je vais commencer par dire quelques mots
sur les variables.

44
00:03:01,638 --> 00:03:05,540
Les variables c'est un concept extrêmement
important.

45
00:03:05,540 --> 00:03:07,751
Les variables c'est des cellules dans

46
00:03:07,751 --> 00:03:10,340
lesquelles on va pouvoir mettre un
contenu.

47
00:03:10,340 --> 00:03:14,852
Physiquement, ces cellules sont en mémoire
vive, hm.

48
00:03:14,852 --> 00:03:18,464
Chaque mémoire à un nom.
Ici j'ai mis le nom X.

49
00:03:18,464 --> 00:03:23,120
Elle a également un type c'est extrêmement
important de savoir

50
00:03:23,120 --> 00:03:26,970
le type alors je ne vais pas parler
aujourd'hui de type.

51
00:03:26,970 --> 00:03:30,938
Je vous dis simplement que int signifie
intenger c'est-à-dire un nombre

52
00:03:30,938 --> 00:03:34,680
entier, mais on parlera plus en détails
des types plus tard.

53
00:03:34,680 --> 00:03:39,618
Une variable va contenir une certaine
valeur, et on va

54
00:03:39,618 --> 00:03:45,370
pouvoir lui assigner une nouvelle valeur.

55
00:03:45,370 --> 00:03:52,252
Donc, il faut bien comprendre cette ligne
là comme étant la variable x va

56
00:03:52,252 --> 00:03:57,950
prendre le contenu qui est dans ce cas là,
la valeur 12.

57
00:03:57,950 --> 00:04:01,980
On peut évidement mettre des valeurs sous
forme de constante.

58
00:04:01,980 --> 00:04:09,190
On peut également, comme on l'a fait ici,
hm, utiliser une autre variable.

59
00:04:09,190 --> 00:04:14,110
On peut même utiliser la même variable
pour recalculer.

60
00:04:14,110 --> 00:04:17,468
Alors vous remarquez que cette ligne est
une absurdité

61
00:04:17,468 --> 00:04:20,320
du point de vue mathématique, mais il faut

62
00:04:20,320 --> 00:04:24,270
bien comprendre X va prendre une nouvelle
valeur.

63
00:04:24,270 --> 00:04:30,390
qui est la soustraction de la valeur 2 à
l'ancienne valeur de X.

64
00:04:30,390 --> 00:04:33,918
Pour effectuer ces assignations, ces
calculs,

65
00:04:33,918 --> 00:04:37,300
on va utiliser des opérations
arithmétiques.

66
00:04:37,300 --> 00:04:42,680
Lorsqu'on utilise des nombres entiers,
comme je l'ai fait ici,

67
00:04:42,680 --> 00:04:48,261
on dispose de cinq opérations
arithmétiques de base, l'addition,

68
00:04:48,261 --> 00:04:53,304
la soustraction, la multiplication,

69
00:04:53,304 --> 00:04:58,609
la division entière et le reste de la
division,

70
00:04:58,609 --> 00:05:02,998
c'est-à-dire la valeur modulo.
Parlons

71
00:05:02,998 --> 00:05:07,905
maintenant des structures de contrôle qui
sont

72
00:05:07,905 --> 00:05:12,276
évidement essentielle à bien maîtriser,
même

73
00:05:12,276 --> 00:05:14,285
pour écrire un programme relativement
simple.

74
00:05:14,285 --> 00:05:15,706
Alors on en a déjà entendu parler.

75
00:05:15,706 --> 00:05:18,044
J'aimerais mettre en évidence le fait
qu'il

76
00:05:18,044 --> 00:05:21,877
y a deux catégories fondamentalement
différentes Des

77
00:05:21,877 --> 00:05:28,240
structures qui sont liés à des tests et
des structures qui sont des boucles.

78
00:05:28,240 --> 00:05:32,980
J'ai représenté ici des organigrammes et
vous pouvez remarquer que

79
00:05:32,980 --> 00:05:39,410
pour un test, j'ai pris ici l'exemple du
if, toutes les flèches descendent.

80
00:05:39,410 --> 00:05:44,310
Par contre dans les cas des boucles, j'ai
pris deux exemples dont on parlera tout à

81
00:05:44,310 --> 00:05:50,620
l'heure, Un certain nombre de flèches,
comme par exemple celle-là, remonte.

82
00:05:50,620 --> 00:05:53,420
C'est également le cas ici.

83
00:05:53,420 --> 00:05:58,126
Fondamentalement dans cette structure du
if on va

84
00:05:58,126 --> 00:06:02,908
commencer là, on va passer et on va
terminer ici, alors

85
00:06:02,908 --> 00:06:07,930
que dans la structure de boucle on va
pouvoir revenir en arrière.

86
00:06:07,930 --> 00:06:11,640
Alors regardons ça un petit peu plus en
détails.

87
00:06:11,640 --> 00:06:17,776
Regardons en détail la structure if, qui
est donc le test de base en

88
00:06:17,776 --> 00:06:23,570
langage C.
Le principe est on va tester

89
00:06:23,570 --> 00:06:27,560
une condition et en fonction de la réponse
qui

90
00:06:27,560 --> 00:06:30,410
peut être oui ou qui peut être non, c'est
mis

91
00:06:30,410 --> 00:06:33,603
en évidence par le petit rond, on va
effectuer

92
00:06:33,603 --> 00:06:39,170
l'instruction ou au contraire on ne va pas
effectuer l'instruction.

93
00:06:39,170 --> 00:06:43,275
Assez souvent on va utiliser une
instruction qui peut être

94
00:06:43,275 --> 00:06:48,825
en fait, plusieurs instructions et on
utilise donc accolade ouverte,

95
00:06:48,825 --> 00:06:50,200
accolade fermée.

96
00:06:50,200 --> 00:06:55,448
Alors y a deux manières de le présenter
graphiquement soit on aligne les deux

97
00:06:55,448 --> 00:07:00,640
accolades, ouverte et fermée, soit au
contraire on met

98
00:07:00,640 --> 00:07:07,210
l'accolade fermée en regard de la ligne où
se trouve l'accolade ouverte.

99
00:07:07,210 --> 00:07:10,290
Alors, il faut que vous puissiez avoir
l'habitude

100
00:07:10,290 --> 00:07:15,220
de lire ces deux manières de présenter les
choses.

101
00:07:15,220 --> 00:07:18,600
Cette manière est peut être plus lisible.

102
00:07:18,600 --> 00:07:21,900
Cette manière a évidemment l'avantage de
prendre moins de

103
00:07:21,900 --> 00:07:25,780
lignes, et parfois c'est extrêmement
intéressant d'avoir moins de lignes.

104
00:07:25,780 --> 00:07:29,135
Nos écrans sont toujours limités en taille
et plus on arrive à voir

105
00:07:29,135 --> 00:07:31,555
de lignes, plus notre cerveau est capable

106
00:07:31,555 --> 00:07:35,730
d'appréhender un nombre important de
choses différentes.

107
00:07:35,730 --> 00:07:41,008
Donc la structure if est un test et
ensuite le programme se poursuit,

108
00:07:41,008 --> 00:07:43,220
il faut bien comprendre ça.

109
00:07:43,220 --> 00:07:49,840
Alors, cette instruction, elle peut
s'exécuter soit zéro fois soit une fois.

110
00:07:49,840 --> 00:07:55,208
Il n'y a pas d'autre possibilité.
On a une variante du if qui est un test

111
00:07:55,208 --> 00:08:01,020
plus complet, non seulement comme avec le
if, on va exécuter l'instruction,

112
00:08:01,020 --> 00:08:06,458
la première instruction si le test est
vrai, mais on a également

113
00:08:06,458 --> 00:08:12,490
une autre instruction qui elle, va
s'exécuter que si le test est faux.

114
00:08:12,490 --> 00:08:17,340
Et finalement, là aussi le programme
continue

115
00:08:17,340 --> 00:08:22,440
L'écriture on la comprend bien.
If, une condition.

116
00:08:22,440 --> 00:08:27,440
qui a été mise entre accolade, else, une
autre condition.

117
00:08:27,440 --> 00:08:31,164
également mise entre accolade,

118
00:08:31,164 --> 00:08:35,990
donc avec le if else, la condition fausse
donne aussi lieu à une instruction.

119
00:08:35,990 --> 00:08:41,680
On a exactement une instruction qui
s'exécute dans tous les cas.

120
00:08:41,680 --> 00:08:47,170
soit la première, soit la seconde.

121
00:08:47,170 --> 00:08:51,660
Un petit exemple, essayons de regarder ce
petit morceau de programme.

122
00:08:51,660 --> 00:08:55,450
On a un premier if avec une condition.

123
00:08:55,450 --> 00:08:56,638
Ici des instructions

124
00:08:56,638 --> 00:08:59,700
qui s'exécutent lorsque cette condition
est vraie.

125
00:08:59,700 --> 00:09:04,670
Et ici un else, suivi d'une instruction,
cette instruction if qui commence ici.

126
00:09:04,670 --> 00:09:10,690
Et qui va se terminer là.

127
00:09:10,690 --> 00:09:12,307
Alors je vais le représenter sous forme

128
00:09:12,307 --> 00:09:15,130
d'un organigramme, peut-être on arrivera
mieux à comprendre.

129
00:09:15,130 --> 00:09:18,090
On voit bien qu'on a un premier if qui est
marqué

130
00:09:18,090 --> 00:09:23,120
en noir avec la condition vraie qui donne
lieu à une instruction.

131
00:09:23,120 --> 00:09:29,794
Et puis le else entre dans une nouvelle
instruction if qui

132
00:09:29,794 --> 00:09:37,230
également a son test, sa condition vraie,
sa condition fausse.

133
00:09:37,230 --> 00:09:40,570
Et finalement le tout se retrouve à cet
endroit-là.

134
00:09:40,570 --> 00:09:44,997
C'est une structure de choix multiples qui
est assez fréquemment utilisée, qui

135
00:09:44,997 --> 00:09:48,133
est assez pratique, vous verrez qu'il y en
a une autre qui

136
00:09:48,133 --> 00:09:50,765
lui ressemble, qui n'est pas identique, on

137
00:09:50,765 --> 00:09:54,120
l'étudiera plus tard, qui s'appelle le
switch case.

138
00:09:54,120 --> 00:09:57,100
Parlons maintenant des boucles.

139
00:09:57,100 --> 00:10:01,323
Dans une boucle il y a fondamentalement ce
retour

140
00:10:01,323 --> 00:10:04,845
en arrière le fait que ça peut durer
longtemps.

141
00:10:04,845 --> 00:10:07,847
On va pouvoir rester dans cette boucle, et
ce

142
00:10:07,847 --> 00:10:11,140
mouvement rotatif que je suis en train de
faire maintenant.

143
00:10:11,140 --> 00:10:13,080
C'est ce qui explique ce mot, boucle.

144
00:10:13,080 --> 00:10:16,434
Ici un test, suivi d'une instruction, si
le

145
00:10:16,434 --> 00:10:19,625
test est faux, alors on termine la boucle.

146
00:10:19,625 --> 00:10:26,170
Voilà comme ça c'est écrit de nouveau avec
la syntaxe où on aligne les parenthèses,

147
00:10:26,170 --> 00:10:29,115
la syntaxe où on aligne la parenthèse

148
00:10:29,115 --> 00:10:32,630
fermée à la ligne de la parenthèse
ouverte.

149
00:10:32,630 --> 00:10:38,326
J'insiste sur le fait que la structure
while est une boucle et qu'elle peut

150
00:10:38,326 --> 00:10:40,020
durer indéfiniment.

151
00:10:40,020 --> 00:10:42,204
Il faut donc toujours être extrêmement
prudent.

152
00:10:42,204 --> 00:10:45,810
Parfois c'est ce qu'on recherche, parfois
ça n'est pas ce qu'on recherche.

153
00:10:45,810 --> 00:10:51,410
Et l'instruction qui se trouve ici, elle
peut ne pas s'exécuter, zéro fois.

154
00:10:51,410 --> 00:10:54,850
Elle peut s'exécuter une fois ou plusieurs
fois.

155
00:10:54,850 --> 00:10:57,585
Selon, bien entendu, la condition.

156
00:10:57,585 --> 00:11:03,520
Est-ce que vous voyez la différence entre
cette boucle, cette nouvelle boucle

157
00:11:03,520 --> 00:11:04,960
et la précédente?

158
00:11:04,960 --> 00:11:09,486
On a simplement une inversion de
l'instruction et du test.

159
00:11:09,486 --> 00:11:17,430
Dans le while, le test était au début,
dans le do while, le test est à la fin.

160
00:11:17,430 --> 00:11:24,195
Alors la syntaxe do suivi d'une
instruction qui, généralement,

161
00:11:24,195 --> 00:11:28,622
est notée entre accolades, avec de nouveau
les deux manières d'écrire.

162
00:11:28,622 --> 00:11:33,858
L'instruction qui va s'exécuter.
Et pour terminer, la condition

163
00:11:33,858 --> 00:11:39,370
suivi d'un point-virgule.
J'insiste là-dessus, c'est important.

164
00:11:39,370 --> 00:11:43,935
Donc la structure do while est une boucle.

165
00:11:43,935 --> 00:11:48,500
De nouveau, elle peut durer indéfiniment.
J'insiste là-dessus c'est important.

166
00:11:48,500 --> 00:11:52,650
Cette fois elle peut ne s'exécuter qu'une
fois ou plusieurs fois.

167
00:11:52,650 --> 00:11:53,940
Elle va forcément

168
00:11:53,940 --> 00:11:59,260
s'exécuter au moins une fois.
Et c'est important de s'en souvenir.

169
00:11:59,260 --> 00:12:05,254
Prenons un exemple tiré de nouveau de la
mécanique.

170
00:12:05,254 --> 00:12:07,772
On a un moteur qui entraîne une roue

171
00:12:07,772 --> 00:12:10,725
sans fin, qui permet de faire bouger un
chariot.

172
00:12:10,725 --> 00:12:14,289
On va décider par exemple ici que la
chariot

173
00:12:14,289 --> 00:12:19,510
avance dans cette direction et recule dans
cette direction.

174
00:12:19,510 --> 00:12:25,284
Le programme que nous avons écrit, vous y
voyez une boucle sans fin puis vous avez

175
00:12:25,284 --> 00:12:31,310
deux "if" qui permettent de faire avancer
et reculer le moteur.

176
00:12:31,310 --> 00:12:34,625
Alors, je vous laisse quelques instants
pour

177
00:12:34,625 --> 00:12:37,101
réfléchir à ce programme et vous posez

178
00:12:37,101 --> 00:12:39,175
la question : quel mouvement du chariot

179
00:12:39,175 --> 00:12:41,550
est effectué par cette partie de
programme?

180
00:12:47,960 --> 00:12:50,840
Alors la réponse effectivement, c'est que
le

181
00:12:50,840 --> 00:12:54,370
chariot fait un mouvement de va-et-vient
permanent.

182
00:12:54,370 --> 00:12:58,910
Le permanent est lié au fait qu'on a ce
"while (1)" qui est une boucle sans fin.

183
00:12:58,910 --> 00:13:04,068
Et effectivement, lorsqu'on termine la
course à droite, on va noter ici

184
00:13:04,068 --> 00:13:09,820
l'interrupteur de fin de course droite, et
bien on va se mettre en mode "avance".

185
00:13:09,820 --> 00:13:12,988
Alors que lorsqu'on est arrivé dans
l'interrupteur de

186
00:13:12,988 --> 00:13:15,164
fin de course gauche, on va reculer et

187
00:13:15,164 --> 00:13:19,660
on aura effectivement les mouvements
va-et-vient qui vont s'effectuer.

188
00:13:19,660 --> 00:13:25,490
Nous avons donc déjà vu la boucle "while"
et la boucle "do while".

189
00:13:25,490 --> 00:13:28,380
Il existe une troisième manière d'écrire
les,

190
00:13:28,380 --> 00:13:31,430
une boucle, c'est la structure qui
s'appelle "for".

191
00:13:31,430 --> 00:13:34,464
Alors, ça n'est rien de fondamentalement

192
00:13:34,464 --> 00:13:38,154
nouveau, c'est simplement une astuce
d'écriture

193
00:13:38,154 --> 00:13:43,084
qui permet des présentations relativement
compactes et souvent assez agréables.

194
00:13:43,084 --> 00:13:48,662
Si vous êtes d'accord, je vais commencer
par un exemple : ici, "for" on

195
00:13:48,662 --> 00:13:54,570
lui passe trois objets séparés par des
points-virgules.

196
00:13:54,570 --> 00:13:57,604
Ces paramètres en quelques sortes du, de
la

197
00:13:57,604 --> 00:14:02,540
boucle "for" sont les suivants : tout
d'abord, l'initialisation.

198
00:14:02,540 --> 00:14:03,377
C'est une

199
00:14:03,377 --> 00:14:08,040
instruction qui s'exécute une fois au
début de la boucle.

200
00:14:08,040 --> 00:14:11,406
Une seule fois et au début de la boucle.

201
00:14:11,406 --> 00:14:16,630
La deuxième, le deuxième paramètre, c'est
une condition.

202
00:14:16,630 --> 00:14:20,550
C'est la condition pour que la boucle
continue.

203
00:14:20,550 --> 00:14:25,060
Si cette condition est fausse, on va
sortir de la boucle.

204
00:14:25,060 --> 00:14:29,700
Et finalement, le troisième paramètre, on
l'appelle assez souvent l'incrémentation.

205
00:14:29,700 --> 00:14:34,524
En fait, c'est simplement une instruction
qui s'exécute à chaque itération

206
00:14:34,524 --> 00:14:37,799
de la boucle, à chaque reprise au début de
la boucle.

207
00:14:37,799 --> 00:14:44,049
Donc lorsqu'on a terminé ces instructions,
si la condition est vraie, on va revenir

208
00:14:44,049 --> 00:14:50,550
au début et ce troisième paramètre
s'exécute au moment de cette itération.

209
00:14:50,550 --> 00:14:54,918
Dans le cas particulier de cet exemple, on
comprend très bien

210
00:14:54,918 --> 00:14:59,481
"i" va aller de 0 jusqu'à 10 moins 1,
jusqu'à

211
00:14:59,481 --> 00:15:04,060
9 et il va prendre les valeurs successives
0, 1, 2, 3, 4, et cetera.

212
00:15:04,060 --> 00:15:09,890
Un autre exemple, cette fois plus complet
: "for i égal

213
00:15:09,890 --> 00:15:15,393
0, i inférieur ou égalà 5 ; i ++)" On

214
00:15:15,393 --> 00:15:20,740
utilise donc de nouveau cette boucle "for"
pour faire du comptage en quelque sorte.

215
00:15:20,740 --> 00:15:25,950
Et dans ce cas-là, on allume une LED, on
attend une demi-seconde,

216
00:15:25,950 --> 00:15:31,111
on éteint la LED et on attend de nouveau
500 millisecondes.

217
00:15:31,111 --> 00:15:36,190
Combien de fois la LED va-t-elle s'allumer
par ce programme?

218
00:15:40,660 --> 00:15:45,130
Alors la LED va effectivement s'allumer
six foix.

219
00:15:45,130 --> 00:15:48,655
Parce que, on est bien d'accord que chaque
fois qu'on

220
00:15:48,655 --> 00:15:53,070
exécute ces instructions, on va allumer
puis éteindre la LED.

221
00:15:53,070 --> 00:15:59,342
Et on va l'exécuter pour la valeur 0, pour
la valeur 1, pour la valeur 2, pour la

222
00:15:59,342 --> 00:16:06,020
valeur 3, la valeur 4 et pour la valeur 5
puisque lorsque "i" est égal à 5,

223
00:16:06,020 --> 00:16:08,720
on est encore inférieur ou égal à 5.

224
00:16:08,720 --> 00:16:13,840
La condition est encore vérifiée et la
boucle peut s'exécuter une dernière fois.

225
00:16:13,840 --> 00:16:16,090
Donc, la réponse, 6 fois.

226
00:16:16,090 --> 00:16:21,406
Avec la boucle "while", le test s'effectue
au début de la boucle.

227
00:16:21,406 --> 00:16:24,850
Avec le "do while", il s'exécute à la fin.

228
00:16:24,850 --> 00:16:28,460
Et il y a des cas où on serait peut-être
interessé à le faire au milieu.

229
00:16:28,460 --> 00:16:31,052
Alors il existe une instruction

230
00:16:31,052 --> 00:16:34,805
très générale qui s'appelle "break" et qui

231
00:16:34,805 --> 00:16:39,590
permet de terminer l'exécution de la
boucle englobante.

232
00:16:39,590 --> 00:16:44,870
Donc la première boucle dans laquelle ce
"break" est contenu.

233
00:16:44,870 --> 00:16:49,255
Cela peut être une boucle "while", "do
while" ou une boucle "for".

234
00:16:49,255 --> 00:16:51,004
On verra même que cela peut être aussi le

235
00:16:51,004 --> 00:16:53,640
cas dans la structure "switch" qu'on verra
plus tard.

236
00:16:53,640 --> 00:16:56,490
Voilà un exemple qui illustre cette

237
00:16:56,490 --> 00:16:58,340
boucle généralisée.

238
00:16:58,340 --> 00:17:00,782
On a une série d'instructions au début de
la

239
00:17:00,782 --> 00:17:03,422
boucle, on a une série d'instructions à la
fin

240
00:17:03,422 --> 00:17:06,732
de la boucle, et la condition est testée
au

241
00:17:06,732 --> 00:17:11,214
milieu de la boucle avec un "if" suivi
d'un "break".

242
00:17:11,214 --> 00:17:13,730
Je vais maintenant parler de la dernière

243
00:17:13,730 --> 00:17:16,810
structure de contrôle dont nous aurons
besoin.

244
00:17:16,810 --> 00:17:21,360
Elle est plus compliquée que les autres.
Elle est même, à certains égards,

245
00:17:21,360 --> 00:17:22,410
un peu bizarre.

246
00:17:22,410 --> 00:17:27,995
Voilà ce qu'elle fait : On a un test sur
une variable.

247
00:17:27,995 --> 00:17:32,077
On va donner donc euh, une expression qui
donne comme résultat des

248
00:17:32,077 --> 00:17:36,310
valeurs, des valeurs numériques, 0, 1, 2,
3, des valeurs euh, discrètes.

249
00:17:36,310 --> 00:17:40,395
Et on va pouvoir tester les différents
cas.

250
00:17:40,395 --> 00:17:42,875
Ici, j'ai testé le cas 1, le cas 2, le cas
3

251
00:17:42,875 --> 00:17:46,920
mais je peux évidemment aussi tester le
cas 1000 si je le souhaite.

252
00:17:46,920 --> 00:17:50,550
Et l'ordre n'a pas d'importance, c'est des
tests séparés.

253
00:17:50,550 --> 00:17:53,836
Il s'agit donc bien d'un branchement
conditionnel.

254
00:17:53,836 --> 00:17:59,098
En fonction de la valeur de la variable
qui a été donnée au départ, et bien, on va

255
00:17:59,098 --> 00:18:04,580
aller dans l'instruction 1, l'instruction
2 ou l'instruction 3, et cetera.

256
00:18:04,580 --> 00:18:08,640
Le problème c'est que, très curieusement,

257
00:18:08,640 --> 00:18:12,248
après avoir exécuté l'instruction 1, on
exécute

258
00:18:12,248 --> 00:18:15,830
l'instruction 2 et on exécute
l'instruction 3.

259
00:18:15,830 --> 00:18:19,934
Ce qui n'est absolument pas ce qu'on veut
la plupart du temps.

260
00:18:19,934 --> 00:18:23,460
Il se trouve que le C fonctionne de cette
manière-là.

261
00:18:23,460 --> 00:18:28,030
Notez aussi qu'il est possible d'apprendre
un cas qui est le cas par défaut.

262
00:18:28,030 --> 00:18:31,040
C'est-à-dire tous les cas qui ne sont pas
pris en

263
00:18:31,040 --> 00:18:34,830
compte par les valeurs qui ont été données
avec le "case".

264
00:18:34,830 --> 00:18:37,324
Ici, ça permet de faire une autre
instruction pour

265
00:18:37,324 --> 00:18:38,368
tous les autres cas.

266
00:18:38,368 --> 00:18:39,992
Mais comme je vous le disais tout à

267
00:18:39,992 --> 00:18:44,740
l'heure, cette structure ne correspond pas
aux besoins réels.

268
00:18:44,740 --> 00:18:48,210
La plupart du temps, pour le cas, le
premier cas

269
00:18:48,210 --> 00:18:53,090
qu'on a pris, on souhaite exécuter cette
instruction puis terminer.

270
00:18:53,090 --> 00:18:58,090
Et ne pas exécuter cette deuxième ou cette
troisième instruction.

271
00:18:58,090 --> 00:19:03,625
Alors, il est nécessaire dans ce cas-là
d'utiliser la commande "break".

272
00:19:03,625 --> 00:19:05,968
Certains estiment que cette manière de

273
00:19:05,968 --> 00:19:09,160
présenter le switch, c'est la manière
standard.

274
00:19:09,160 --> 00:19:14,230
Bon, alors dans ce cas-là il faut ne pas
oublier les "breaks".

275
00:19:14,230 --> 00:19:17,710
Ici, celui-là n'est pas nécessaire puisque
c'est le dernier.

276
00:19:17,710 --> 00:19:22,195
Dans certains cas, on peut avoir des
astuces particulières : si par exemple, on

277
00:19:22,195 --> 00:19:28,695
voulait utiliser euh, le même traitement
pour le cas 1 et le

278
00:19:28,695 --> 00:19:34,715
cas 2, et bien on pourrait effectivement
supprimer cette instruction, supprimer

279
00:19:34,715 --> 00:19:40,294
ce "break" et on aurait, pour le cas 1 et
le cas 2, la même

280
00:19:40,294 --> 00:19:46,930
instruction 2 qui s'exécuterait, suivie de
la sortie par le "break".

281
00:19:46,930 --> 00:19:51,170
Je terminerai ce chapitre en parlant de
procédures.

282
00:19:51,170 --> 00:19:54,272
Ce serait trop long d'en parler en détail
maintenant.

283
00:19:54,272 --> 00:19:56,990
On n'a pas besoin de savoir beaucoup de
choses.

284
00:19:56,990 --> 00:20:00,518
Je donnerai juste les points essentiels.

285
00:20:00,518 --> 00:20:02,396
Une procédure a un nom.

286
00:20:02,396 --> 00:20:09,730
Une procédure peut recevoir des paramètres
d'entrée.

287
00:20:09,730 --> 00:20:12,010
Un ou plusieurs.

288
00:20:12,010 --> 00:20:17,590
Une procédure peut rendre des paramètres
en sortie.

289
00:20:17,590 --> 00:20:19,414
Ici, on n'en rend pas alors

290
00:20:19,414 --> 00:20:22,870
que dans ce cas-là, on rend un paramètre
de sortie.

291
00:20:22,870 --> 00:20:26,950
Donc, une procédure c'est un certain
nombre d'instructions qu'on

292
00:20:26,950 --> 00:20:29,800
a regroupées et auxquelles on a attribué
un nom.

293
00:20:29,800 --> 00:20:35,880
Et donc la possibilité de passer des
paramètres en entrée et en sortie.

294
00:20:35,880 --> 00:20:41,030
Voilà un exemple très concret.
On va faire ici un clignotement.

295
00:20:41,030 --> 00:20:44,550
Ce clignotement, il va durer un certain
nombre

296
00:20:44,550 --> 00:20:46,800
de fois avec une structure "for".

297
00:20:46,800 --> 00:20:51,140
Et chaque fois, on allume, on attend, on
éteint, on attend.

298
00:20:51,140 --> 00:20:54,525
Un autre exemple : ici, on donne en entrée

299
00:20:54,525 --> 00:20:58,360
un nombre et on souhaite obtenir le carré
du nombre.

300
00:20:58,360 --> 00:21:03,730
Ce carré est calculé ici.
Le mot réservé "return" permet de

301
00:21:03,730 --> 00:21:09,660
rendre en sortie une valeur.
Ici, une valeur de type nombre entier.

302
00:21:09,660 --> 00:21:15,255
Il se trouve que, en C, le programme
principal est tout

303
00:21:15,255 --> 00:21:21,274
simplement une procédure particulière qui
a un nom réservé qui est le nom "main".

304
00:21:21,274 --> 00:21:24,175
Alors on a les deux manières de le noter :

305
00:21:24,175 --> 00:21:28,840
parfois on voit "void main", parfois on
voit "int main".

306
00:21:28,840 --> 00:21:32,140
Disons que sur un microcontrôleur, ce
serait plus logique

307
00:21:32,140 --> 00:21:34,978
de prendre le "void main" pour la raison
suivante

308
00:21:34,978 --> 00:21:38,410
: dans un microcontrôleur, le programme ne
se termine jamais.

309
00:21:38,410 --> 00:21:43,562
Par contre, sur un ordinateur, l'habitude
est de pouvoir euh,

310
00:21:43,562 --> 00:21:49,220
obtenir, lorsqu'un programme se termine,
un code d'erreur, d'où ce "int".

311
00:21:49,220 --> 00:21:51,524
Alors on peut utiliser les deux, certains

312
00:21:51,524 --> 00:21:54,360
compilateurs sont chatouilleux et aiment
bien voir ce

313
00:21:54,360 --> 00:21:56,505
"int", c'est la raison pour laquelle on va

314
00:21:56,505 --> 00:22:00,320
souvent l'utiliser mais les deux solutions
sont possibles.

315
00:22:00,320 --> 00:22:03,840
À noter que dans cet exemple ici, j'ai
écrit

316
00:22:03,840 --> 00:22:08,108
un programme principal, le programme
"main" qui, lui, ne

317
00:22:08,108 --> 00:22:11,580
fait que appeler deux procédures : la
procédure "setup"

318
00:22:11,580 --> 00:22:15,860
et, à l'intérieur d'une boucle "while", la
procédure "loop".

319
00:22:15,860 --> 00:22:19,682
Et vous avez reconnu que c'est le système
de l'Arduino.

320
00:22:19,682 --> 00:22:22,717
Lorsque vous n'écrivez pas le "main" dans

321
00:22:22,717 --> 00:22:25,795
un programme Arduino, mais que vous
écrivez

322
00:22:25,795 --> 00:22:29,486
"setup" d'une part et "loop" d'autre part,
le

323
00:22:29,486 --> 00:22:33,420
programme va, de lui-même, rajouter en
quelque sorte

324
00:22:33,420 --> 00:22:37,133
cette structure pour le programme
principal qui existe

325
00:22:37,133 --> 00:22:41,270
bel et bien évidemment, même dans une
application Arduino.

326
00:22:41,270 --> 00:22:44,690
Évidemment, nous n'avons pas parlé de
l'ensemble du langage C.

327
00:22:44,690 --> 00:22:47,150
C'est quand même un petit peu plus
compliqué que

328
00:22:47,150 --> 00:22:51,099
ça, mais on a un certain nombre de,
d'éléments importants

329
00:22:51,099 --> 00:22:56,730
: les variables et les assignations, les
structures de contrôle que nous avons euh,

330
00:22:56,730 --> 00:22:59,544
vues d'une manière exhaustive et une
petite

331
00:22:59,544 --> 00:23:02,330
approche des procédures dont on a souvent
besoin.

332
00:23:02,330 --> 00:23:04,531
Avec ce qu'on a à disposition, on va

333
00:23:04,531 --> 00:23:08,900
pouvoir déjà faire beaucoup de programmes
pour des microcontrôleurs.

334
00:23:08,900 --> 00:23:16,160
C'est un sous-ensemble du langage C qui
est déjà suffisant pour travailler.