1
00:00:04,227 --> 00:00:07,364
Bonjour!
On vous a déjà parlé de fonctions.

2
00:00:08,082 --> 00:00:10,280
Aujourd'hui, on va rentrer
dans les détails,

3
00:00:10,710 --> 00:00:17,452
mieux préciser les conventions d'écriture,
la différence entre <i>#define</i> et <i>fonctions</i>,

4
00:00:17,839 --> 00:00:21,659
parler de l’exécution interne
et voir les différents types de fonctions.

5
00:00:22,781 --> 00:00:24,596
Concernant les règles d'écritures,

6
00:00:24,596 --> 00:00:27,463
l'habitude est d'avoir les constantes
en majuscules.

7
00:00:27,722 --> 00:00:30,395
Et on a déjà vu <i>OUTPUT</i>, <i>HIGH</i>.

8
00:00:30,395 --> 00:00:33,045
Je ne respecte pas tellement
cette convention

9
00:00:33,045 --> 00:00:35,004
parce qu'avec des noms explicites,

10
00:00:36,044 --> 00:00:37,921
c'est assez lourd comme écriture.

11
00:00:38,503 --> 00:00:41,573
Les variables, la règle est
d'avoir les minuscules,

12
00:00:42,223 --> 00:00:43,683
on a déjà vu le <i>i</i>

13
00:00:43,683 --> 00:00:47,659
dans les boucles <i>FOR</i>, <i>compteur</i>,
<i>niveauMaximum</i>.

14
00:00:48,418 --> 00:00:51,571
Certains préfèrent mettre des soulignés,
à vous décider.

15
00:00:52,661 --> 00:00:54,182
Du côté des définitions,

16
00:00:55,312 --> 00:00:58,392
on a une première lettre qui est majuscule

17
00:01:00,022 --> 00:01:03,066
et les définitions
s'appliquent aux matériels.

18
00:01:03,693 --> 00:01:10,134
Du côté des fonctions, on a également
des majuscules en première position,

19
00:01:11,404 --> 00:01:16,221
mais une fonction va désigner une action.

20
00:01:16,873 --> 00:01:19,951
Donc là, j'insiste,
et je vais encore insister,

21
00:01:20,241 --> 00:01:24,091
les définitions
c'est concernant le matériel,

22
00:01:24,091 --> 00:01:28,484
les fonctions c'est concernant
la fonctionnalité.

23
00:01:29,505 --> 00:01:32,515
Dans certains langages,
on fait une différence subtile

24
00:01:32,515 --> 00:01:34,711
entre procédure et fonction.

25
00:01:35,274 --> 00:01:37,803
Le <i>C</i> ne fait pas cette différence.

26
00:01:38,467 --> 00:01:40,305
Je reviens encore la dessus

27
00:01:40,405 --> 00:01:43,682
<i>define</i> pour décrire le matériel,
<i>fonction</i> pour la fonctionnalité.

28
00:01:43,682 --> 00:01:47,011
Je prend un exemple avec un robot simple.

29
00:01:47,636 --> 00:01:50,792
Ce robot simple a deux moteurs.

30
00:01:51,502 --> 00:01:56,345
Si vous regardez l'arrière du moteur,
là où les fils partent,

31
00:01:56,845 --> 00:01:59,052
vous avez un plus et un moins.

32
00:01:59,557 --> 00:02:04,832
Et si vous envoyez le courant sur le plus,
tous les moteurs du même fabriquant

33
00:02:05,192 --> 00:02:06,820
vont tourner dans le même sens.

34
00:02:08,223 --> 00:02:14,491
Donc je définis ici, le plus de mon moteur
va être sur la pin <i>quatre</i>,

35
00:02:14,491 --> 00:02:16,407
le moins sur la pin <i>trois</i>.

36
00:02:16,670 --> 00:02:19,659
Et maintenant pour que le moteur avance,

37
00:02:21,029 --> 00:02:26,339
c'est-à-dire pour que ce moteur tourne
dans le sens qui fera avancer le robot,

38
00:02:27,239 --> 00:02:29,362
je dois mettre sur la pin <i>quatre</i> un <i>zéro</i>

39
00:02:29,362 --> 00:02:32,439
sur la pin <i>trois</i> un <i>un</i>.

40
00:02:33,205 --> 00:02:36,195
Et là, ça ne sera pas accepté
par le compilateur

41
00:02:36,195 --> 00:02:40,354
puisque je n'ai pas mis
des majuscules comme c'est reconnu.

42
00:02:40,822 --> 00:02:45,275
Alors maintenant, je vais définir
la même chose pour le moteur gauche

43
00:02:46,245 --> 00:02:48,864
mais le moteur gauche, pour qu'il avance,

44
00:02:49,744 --> 00:02:52,319
il faudra que je permute
ces deux définitions.

45
00:02:52,319 --> 00:02:56,782
Les moteurs sont symétriques
donc si le moteur droit,

46
00:02:57,652 --> 00:02:59,555
si la pin <i>plus</i> doit être à <i>zéro</i>,

47
00:02:59,555 --> 00:03:02,415
sur le moteur gauche,
la pin <i>plus</i> devra être à <i>un</i>.

48
00:03:03,055 --> 00:03:08,185
Alors on peut tâtonner et sortir
son fer à souder pour déplacer les fils

49
00:03:08,185 --> 00:03:14,705
mais vous voyez que si on réfléchit bien,
on aura quelque chose qui est correcte,

50
00:03:14,705 --> 00:03:18,397
qui réagira selon
la définition du matériel.

51
00:03:18,978 --> 00:03:22,935
Et là, si on veut faire avancer le robot,

52
00:03:23,505 --> 00:03:28,965
c'est une action qui nécessite
d'avoir les deux moteurs qui avancent.

53
00:03:29,151 --> 00:03:31,972
On a défini ce qui les faisait avancer.

54
00:03:32,342 --> 00:03:36,425
On a plus besoin de se préoccuper
du câblage et du matériel.

55
00:03:37,365 --> 00:03:41,643
Alors maintenant, on peut rajouter
une fonction qui va faire un aller-retour

56
00:03:41,643 --> 00:03:45,760
avec une certaine durée qui va fixer
la distance de déplacement.

57
00:03:46,251 --> 00:03:50,703
On avance, on attend,
on recule, on attend.

58
00:03:50,973 --> 00:03:54,863
La durée étant
un paramètre de cette fonction.

59
00:03:55,720 --> 00:04:00,755
Et dans le programme principal,
on va avoir <i>FaireAllerRetour</i>,

60
00:04:01,435 --> 00:04:03,681
la durée d'action

61
00:04:04,861 --> 00:04:08,141
et évidemment,
c'est un cas un petit peu simplifié

62
00:04:08,391 --> 00:04:12,534
qui montre bien
la hiérarchisation des fonctions.

63
00:04:13,042 --> 00:04:18,191
Ce que l'on vient de faire,
c'est une programmation descendante,

64
00:04:18,511 --> 00:04:22,374
on est parti du matériel
pour aller vers la complexité.

65
00:04:23,144 --> 00:04:29,736
Dans les cas réels,
on se préoccupe d'abord de l'application,

66
00:04:30,136 --> 00:04:35,164
de son cahier des charges,
de la structure du programme principal,

67
00:04:35,164 --> 00:04:38,904
des appels système que l'on va utiliser

68
00:04:38,904 --> 00:04:43,550
et qui eux-mêmes vont faire
des appels à des fonctions

69
00:04:43,741 --> 00:04:47,542
plus simples,
qui vont s'appuyer sur le matériel.

70
00:04:47,902 --> 00:04:53,069
Donc <i>top-down</i> ou <i>bottom-up</i>
ce sont les deux options.

71
00:04:53,823 --> 00:04:57,682
Alors, prenons des exemples
en commençant par les choses simples.

72
00:04:58,540 --> 00:05:05,320
Vous avez la fonction <i>ClignoteUneFois</i>,
vous l'appelez par <i>ClignoteUneFois</i>.

73
00:05:06,017 --> 00:05:10,716
Il n'y a pas de paramètre
qui vont être transférer sur la pile,

74
00:05:11,436 --> 00:05:12,837
la parenthèse est vide.

75
00:05:13,665 --> 00:05:18,482
Vous avez la fonction <i>ClignoteXFois</i>,
là vous avez un paramètre

76
00:05:19,672 --> 00:05:23,285
et il faut dire quel va être
le nom de ce paramètre,

77
00:05:23,285 --> 00:05:27,685
mais c'est un nom local,
c'est un nom uniquement utilisé là-dedans.

78
00:05:27,786 --> 00:05:30,680
Par contre, on a dû bien préciser

79
00:05:30,680 --> 00:05:35,510
quelle était la taille à réserver
sur la pile

80
00:05:36,030 --> 00:05:38,173
pour transférer ce paramètre.

81
00:05:38,880 --> 00:05:42,310
Et quand on appelle,
on a clignoté tant de fois,

82
00:05:42,650 --> 00:05:48,106
le paramètre, une constante
ou une variable, mais de type <i>byte</i>.

83
00:05:48,985 --> 00:05:52,704
Si on mettait un nombre trop grand ici,
le compilateur devrait rouspéter.

84
00:05:53,255 --> 00:05:58,873
Ensuite, on peut avoir deux paramètres
qui n'ont pas forcément le même type.

85
00:05:59,055 --> 00:06:01,673
On veut clignoter <i>X</i> fois avec
une certaine période.

86
00:06:02,303 --> 00:06:05,584
On va donner le type <i>byte</i>
pour le nombre de fois,

87
00:06:05,584 --> 00:06:07,555
le type <i>int</i> pour la période

88
00:06:08,125 --> 00:06:10,125
et on aura les deux paramètres

89
00:06:10,895 --> 00:06:13,599
et on pourra tester
maintenant ce programme.

90
00:06:13,698 --> 00:06:16,826
Il faut toujours tester les fonctions
quand on les a écrites

91
00:06:17,296 --> 00:06:18,676
avec une petite boucle:

92
00:06:19,274 --> 00:06:24,196
On clignote trois fois,
et puis, on ne fait plus rien.

93
00:06:25,908 --> 00:06:29,112
Si vous supprimez ce <i>while</i>,
qu'est ce qui se passe?

94
00:06:29,282 --> 00:06:31,841
Vous clignotez trois fois,
vous clignotez trois fois,

95
00:06:31,841 --> 00:06:33,116
vous clignotez trois fois.

96
00:06:34,642 --> 00:06:36,757
Vous avez l'impression
que votre programme est faux.

97
00:06:36,757 --> 00:06:38,609
Il faut rajouter un délai ici,

98
00:06:38,839 --> 00:06:41,549
pour qu'après
chaque <i>clignotement trois fois</i>,

99
00:06:42,269 --> 00:06:45,395
vous avez un espace
qui vous permet de vérifier

100
00:06:47,165 --> 00:06:49,946
quand se trouve
le début de l'appel de la fonction.

101
00:06:51,168 --> 00:06:53,368
Une fonction peut avoir
un paramètre de sortie.

102
00:06:53,368 --> 00:06:56,238
Prenons un exemple dans une application.

103
00:06:56,468 --> 00:07:00,458
Combien d'interrupteurs sont positionnés
à un moment donné ?

104
00:07:01,056 --> 00:07:05,237
On va le simuler avec le <i>lancer bot</i>
où on peut presser

105
00:07:05,237 --> 00:07:09,454
sur un/deux interrupteurs poussoirs
simultanément.

106
00:07:10,309 --> 00:07:12,129
Dans le programme,
ce qu'on aimerait écrire :

107
00:07:12,769 --> 00:07:16,494
le <i>NbPoussoirs</i>,
qui est la variable qui m'intéresse,

108
00:07:17,194 --> 00:07:19,688
est égale à une fonction

109
00:07:20,388 --> 00:07:24,638
qui va analyser
le nombre de poussoirs pressés.

110
00:07:25,448 --> 00:07:28,347
Cette fonction,
on va l'écrire comme d'habitude,

111
00:07:28,840 --> 00:07:30,682
lui donner un nom explicite.

112
00:07:31,710 --> 00:07:35,228
On n'a pas de paramètres d'entrée,
la parenthèse va être vide.

113
00:07:35,703 --> 00:07:41,789
Et l'accolade qui encadre les instructions
de la fonction.

114
00:07:42,158 --> 00:07:47,036
Alors la nouveauté maintenant,
c'est qu'on doit retourner une valeur.

115
00:07:48,127 --> 00:07:50,503
Vous voyez
que c'est l'équivalent d'une variable.

116
00:07:51,270 --> 00:07:57,638
Et on va retourner
cette variable avec l'instruction <i>return</i>,

117
00:07:57,696 --> 00:08:00,565
la variable qui a été calculée
dans le fond par la fonction.

118
00:08:00,975 --> 00:08:05,750
Ce qui est important pour le compilateur
qui doit générer du code,

119
00:08:06,510 --> 00:08:09,867
c'est de savoir quelle place
réserver en mémoire

120
00:08:09,867 --> 00:08:14,506
au moment on fait l'appel
<i>Combien De Fonction</i>.

121
00:08:14,928 --> 00:08:20,787
Et juste qu'à présent on mettait <i>void</i>,
on avait rien à mettre dans cette case.

122
00:08:21,033 --> 00:08:26,959
Et maintenant, on va dire
j'ai un certain nombre

123
00:08:26,959 --> 00:08:31,216
qui est inférieur à huit bits,
donc on va écrire <i>byte</i> ici.

124
00:08:32,376 --> 00:08:35,070
Et puis, on va retourner cette variable.

125
00:08:37,270 --> 00:08:39,154
Ici, il faudra déclarer un nom.

126
00:08:39,154 --> 00:08:42,028
Alors, écrivons la fonction
de façon un peu plus précise.

127
00:08:43,178 --> 00:08:45,448
<i>byte CombienDePoussoirs</i>

128
00:08:46,921 --> 00:08:51,771
Il nous faut un compteur,
ce compteur sera du même type.

129
00:08:52,424 --> 00:08:56,076
Et puis, on donne un nom

130
00:08:56,076 --> 00:09:00,396
qui est une variable locale <i>cp = 0</i>.

131
00:09:00,396 --> 00:09:02,690
Et maintenant,
les instructions sont triviales.

132
00:09:02,690 --> 00:09:08,576
Si le poussoir <i>un</i> est actif,
on incrémente le compteur.

133
00:09:09,026 --> 00:09:13,207
Si le poussoir <i>deux</i> est actif,
on incrémente le pointeur.

134
00:09:13,817 --> 00:09:16,091
Il faudrait pas mettre <i>cp</i> égale <i>1</i>,
<i>cp</i> égale <i>2</i>.

135
00:09:16,091 --> 00:09:19,476
Ça serait une autre fonctionnalité
dans le fond

136
00:09:19,476 --> 00:09:26,265
pour savoir avec une numérotation adéquate
quel est le poussoir qui a été pressé.

137
00:09:27,040 --> 00:09:31,527
Maintenant, on va retourner
la variable que l'on a défini.

138
00:09:31,784 --> 00:09:35,325
Donc, au niveau du programme,
on va avoir une variable globale,

139
00:09:35,325 --> 00:09:37,405
qui est le <i>nbPoussoirs</i>.

140
00:09:38,345 --> 00:09:45,391
On va avoir dans la boucle principale,
l'instruction qui nous intéresse.

141
00:09:45,530 --> 00:09:47,706
<i>nbPoussoirs = CombienDePoussoirs</i>

142
00:09:49,171 --> 00:09:52,599
Prenons un autre exemple
un peu plus traditionnel

143
00:09:52,800 --> 00:09:55,754
que l'on voit dans tous les livres :
la multiplication.

144
00:09:57,344 --> 00:10:04,138
Vous définissez une fonction
pour multiplier deux nombres <i>a</i> et <i>b</i>.

145
00:10:04,788 --> 00:10:10,486
Souvenez-vous
qu'il faut préciser les types de variable

146
00:10:10,511 --> 00:10:13,316
qui sont dans la parenthèse.

147
00:10:13,694 --> 00:10:17,952
Le résultat de cette multiplication
de seize bits par seize bits,

148
00:10:19,012 --> 00:10:21,267
c'est trente-deux bits.

149
00:10:21,654 --> 00:10:25,699
On peut déclarer seize bits ici,
mais il va y avoir un problème

150
00:10:25,699 --> 00:10:30,076
s'il y a dépassement de capacité
puisque le <i>C</i> ne va pas vous signaler

151
00:10:30,076 --> 00:10:31,593
qu'il y a dépassement de capacité.

152
00:10:32,566 --> 00:10:35,823
On a définit notre fonction,
on a réservé la place en mémoire.

153
00:10:37,782 --> 00:10:43,021
Il suffit d'écrire,
on retourne la valeur qui nous intéresse

154
00:10:43,221 --> 00:10:46,649
qui est dans ce cas-là immédiate,
<i>a</i> fois <i>b</i>.

155
00:10:47,099 --> 00:10:50,262
Donc c'est un exemple assez académique.

156
00:10:50,632 --> 00:10:55,119
Et puis, quand on va appelez maintenant
la multiplication, on dira <i>valeur</i>

157
00:10:55,119 --> 00:11:00,640
que l'on a déclaré de type <i>long</i>,
c'est la fonction multiplication

158
00:11:01,350 --> 00:11:04,337
avec deux nombres, deux variables, etc.

159
00:11:05,058 --> 00:11:09,895
Ce que j'aimerai mettre en évidence,
c'est que l'on a pas eu besoin de déclarer

160
00:11:10,197 --> 00:11:13,995
une variable locale,
mais vous pouvez très bien le faire

161
00:11:14,805 --> 00:11:19,813
et c'est clair que lors de fonctions
plus complexes qu'une bête multiplication

162
00:11:20,843 --> 00:11:26,978
on va devoir déclarer
une ou plusieurs variables locales.

163
00:11:27,159 --> 00:11:32,252
Ici, on a déclaré de type <i>int</i>..

164
00:11:33,252 --> 00:11:35,131
J'avais décidé avant de type <i>long</i>,

165
00:11:35,131 --> 00:11:38,609
maintenant j'ai décidé
que ça serait de type seize bits.

166
00:11:39,359 --> 00:11:45,338
Et puis, la variable c'est le produit
et on retourne la variable

167
00:11:46,548 --> 00:11:48,023
et c'est comme avant.

168
00:11:48,719 --> 00:11:51,336
Voilà ces fonctions
avec un paramètre d'entrée.

169
00:11:51,336 --> 00:11:54,304
Est-ce qu'on peut avoir
plusieurs paramètres en sortie?

170
00:11:54,304 --> 00:11:55,657
Non, c'est pas possible.

171
00:11:56,592 --> 00:12:02,611
On calcule une seule variable chaque fois
ou l'équivalent d'une variable.

172
00:12:03,113 --> 00:12:06,048
Mais on peut utiliser un pointeur
ou un tableau de données.

173
00:12:06,653 --> 00:12:10,600
Ce qui se fait abondamment
dans tous les <i>C</i> qui travaillent sur écran

174
00:12:10,874 --> 00:12:13,922
et qui gère vos fichiers d'adresses, etc.

175
00:12:15,357 --> 00:12:19,424
Il y a encore une solutions
qui est d'agir sur des variables globales.

176
00:12:19,859 --> 00:12:24,608
Ça nous permet de faire un petit rappel
sur les solutions qu'on a à disposition

177
00:12:24,608 --> 00:12:27,680
maintenant pour écrire des fonctions.

178
00:12:29,176 --> 00:12:33,293
La solution habituelle que l'on a vu,
c'est la solution de fonction

179
00:12:33,293 --> 00:12:34,606
avec des paramètres.

180
00:12:35,341 --> 00:12:40,175
Le paramètre est défini,
mais comme une variable locale

181
00:12:40,175 --> 00:12:41,755
dans la fonction.

182
00:12:42,385 --> 00:12:46,978
Et puis, au niveau de l'appel,
on veut clignoter trois fois.

183
00:12:47,622 --> 00:12:54,403
On va mettre <i>Cligno</i>, parenthèse,
le paramètre qui sera interprété

184
00:12:54,403 --> 00:13:00,139
dans le fond dans la fonction en faisant
des calculs avec cette variable locale.

185
00:13:00,568 --> 00:13:05,723
Alors, si on fait une variable globale,
ça veut dire que je définis ma variable

186
00:13:06,653 --> 00:13:11,848
au début du programme et qu'elle va être
valable dans tout le programme.

187
00:13:12,412 --> 00:13:19,369
Alors, la fonction clignotement
n'a plus de paramètre local explicite ici.

188
00:13:21,991 --> 00:13:25,878
Elle ne va pas changer,
si j'ai utilisé le même nom.

189
00:13:26,439 --> 00:13:29,039
Je vais trouver exactement
les mêmes instructions.

190
00:13:29,427 --> 00:13:34,038
Et au niveau de l'appel,
vous aurez un appel

191
00:13:34,038 --> 00:13:36,965
qui ne mentionne pas
cette variable globale.

192
00:13:37,337 --> 00:13:42,339
Il faudra la déclarer
avant comme étant <i>nbCli = 3</i>.

193
00:13:43,239 --> 00:13:45,946
Et on aime pas du tout programmer
de cette façon

194
00:13:45,946 --> 00:13:52,532
parce que vous savez
la définition de la variable globale

195
00:13:53,192 --> 00:13:56,432
peut avoir été faite
relativement longtemps

196
00:13:56,432 --> 00:13:58,969
avant le clignotement
ou peut être avoir été modifiée

197
00:13:58,969 --> 00:14:01,674
par une quelconque instruction.

198
00:14:03,443 --> 00:14:07,751
Alors, il y a encore une solution
qu'on a vu, qu'on a beaucoup utilisée,

199
00:14:07,751 --> 00:14:12,400
mais sur des cas plus simples,
c'est ce qu'on appel les macros,

200
00:14:12,400 --> 00:14:13,692
les <i>#define</i>.

201
00:14:13,997 --> 00:14:17,752
Vous pouvez très bien écrire
<i>#define Cligno</i>

202
00:14:18,122 --> 00:14:25,255
et aligner une suite d'instruction
qui correspond aux fonctions

203
00:14:25,255 --> 00:14:26,455
qu'on avait écrites.

204
00:14:28,115 --> 00:14:32,171
Il y a possibilité de mettre des paramètres,
mais ce n'est pas encouragé.

205
00:14:32,891 --> 00:14:37,562
On utilise ces macros
que dans des cas simples.

206
00:14:37,562 --> 00:14:39,389
On veut simplement économiser

207
00:14:39,389 --> 00:14:42,436
de recopier sans arrêt
un certain nombre d'instructions.

208
00:14:43,226 --> 00:14:47,681
La différence au niveau de l'appel,
c'est qu'on écrit <i>Cligno;</i>

209
00:14:49,371 --> 00:14:50,491
sans parenthèses.

210
00:14:51,351 --> 00:14:53,431
Donc, on avait déjà signalé
cette difficulté,

211
00:14:53,431 --> 00:14:57,490
il faut faire très attention de savoir
ce qu'on a écrit

212
00:14:58,900 --> 00:15:02,906
si c'est des <i>define</i>
qui n'ont pas de parenthèses

213
00:15:03,646 --> 00:15:08,489
ou une fonction avec la parenthèse.

214
00:15:09,583 --> 00:15:12,593
Et le <i>C</i>, malheureusement,
si vous oubliez la parenthèse

215
00:15:12,593 --> 00:15:13,664
dans un cas comme ça,

216
00:15:14,694 --> 00:15:17,707
il va accepter
et ne rien exécuter du tout.

217
00:15:18,631 --> 00:15:20,919
Regardons un petit peu plus précisément

218
00:15:21,969 --> 00:15:25,169
ce que fait le compilateur

219
00:15:27,079 --> 00:15:33,733
avec ces différentes expressions
d'une fonction ou d'une macro.

220
00:15:34,360 --> 00:15:41,513
Avec la macro, vous faites une définition
avec un texte quelconque,

221
00:15:43,553 --> 00:15:45,356
parfois on substitue une variable,

222
00:15:45,356 --> 00:15:48,776
parfois on peut écrire
un certain nombre d'instructions.

223
00:15:49,736 --> 00:15:53,660
Dans le programme,
chaque fois que vous avez écrit <i>Cli;</i>

224
00:15:55,320 --> 00:15:58,410
vous allez mettre
cette ensemble d'instructions

225
00:15:59,340 --> 00:16:00,460
dans la mémoire.

226
00:16:00,460 --> 00:16:04,045
Donc chaque fois, ça sera répété.

227
00:16:04,320 --> 00:16:10,222
Si vous avez beaucoup d'instructions,
vous voyez bien que ça perdra de la place.

228
00:16:11,231 --> 00:16:16,215
Si on écrit une fonction,
cette fonction va être mise en mémoire

229
00:16:17,155 --> 00:16:20,593
dans un coin séparé
dans le fond du programme.

230
00:16:21,025 --> 00:16:24,222
Et toutes les fois
que l'on appelle la fonction,

231
00:16:25,272 --> 00:16:31,175
on va voir beaucoup moins d'instructions
qui permettent de se référer

232
00:16:31,175 --> 00:16:36,533
à la position mémoire
où on a la fonction, pour l'exécuter.

233
00:16:37,373 --> 00:16:43,083
Et les variables auront été réservées 
dans un coin de la mémoire.

234
00:16:44,010 --> 00:16:45,973
Alors évidemment,
il y a un truc supplémentaire

235
00:16:45,973 --> 00:16:48,764
c'est qu'une fois
qu'on a appelé la fonction,

236
00:16:49,384 --> 00:16:53,961
il faut pouvoir revenir au programme
pour l'exécuter.

237
00:16:54,611 --> 00:17:00,807
Donc, c'est quelque chose de câblée
à l'intérieur du processeur.

238
00:17:02,221 --> 00:17:09,505
Au moment où vous appelez la fonction,
vous transmettez dans une zone mémoire

239
00:17:10,635 --> 00:17:14,760
l'adresse de retour
qui vous permettra de continuer.

240
00:17:15,039 --> 00:17:19,599
Donc, à la fin de la fonction,
quand vous avez cette accolade finale,

241
00:17:21,839 --> 00:17:26,011
le compilateur va vous rajouter
une instruction

242
00:17:26,081 --> 00:17:32,796
qui va prendre cette adresse de retour,
puis permettre de continuer l'exécution.

243
00:17:34,064 --> 00:17:35,430
Ça se complique un petit peu,

244
00:17:35,430 --> 00:17:41,586
car, si maintenant, dans cette fonction,
vous voulez appeler une autre fonction,

245
00:17:42,676 --> 00:17:49,004
il faudra aussi mettre
cette adresse de retour dans la mémoire,

246
00:17:49,004 --> 00:17:52,183
et puis, faut naturellement pas
la mettre au même endroit.

247
00:17:52,183 --> 00:17:59,350
Il faut l'empiler et comme ça
quand on revient, on peut dépiler,

248
00:17:59,350 --> 00:18:03,312
récupérer les adresses,
les unes aux autres.

249
00:18:03,472 --> 00:18:06,746
Cette pile pour les adresses de retour,

250
00:18:06,746 --> 00:18:09,174
sur laquelle on met aussi
beaucoup d'autres choses,

251
00:18:09,684 --> 00:18:11,580
est un concept extrêmement important.

252
00:18:11,580 --> 00:18:18,050
Et cette notion d'appel de routine,
d'appel de fonction,

253
00:18:18,590 --> 00:18:22,693
a été une des grandes inventions
de l'informatique dans les années 50

254
00:18:22,693 --> 00:18:27,256
quand il y a eu 
les premiers ordinateurs performants

255
00:18:28,136 --> 00:18:29,191
qui apparaissaient.

256
00:18:31,007 --> 00:18:34,033
On a souvent évoqué
les activités du compilateur.

257
00:18:34,796 --> 00:18:36,780
C'est très compliqué de savoir
ce qu'il fait

258
00:18:36,790 --> 00:18:39,902
mais je crois que c'est utile
d'avoir quand même un petit modèle.

259
00:18:40,202 --> 00:18:45,512
Vous avez préparé un petit programme
qui va clignoter une LED

260
00:18:46,832 --> 00:18:48,743
sur une pin de votre processeur.

261
00:18:49,930 --> 00:18:53,906
Vous lancez la compilation,
qu'est ce qui se passe ?

262
00:18:54,166 --> 00:18:57,730
Votre code source est copié,

263
00:18:57,730 --> 00:19:01,738
vous savez que vous pouvez continuer
à travailler pendant la compilation.

264
00:19:02,550 --> 00:19:06,143
Il est copié, donné à un préprocesseur.

265
00:19:06,183 --> 00:19:12,256
Ce préprocesseur va convertir
les <i>define</i> et les <i>include</i>

266
00:19:13,736 --> 00:19:15,549
pour simplement,

267
00:19:15,549 --> 00:19:22,669
que ça soit des instructions compatibles
avec le <i>C</i>.

268
00:19:23,579 --> 00:19:25,992
C'est le grand avantage de préprocesseur,

269
00:19:25,992 --> 00:19:31,517
c'est qu'on peut rajouter
une couche de définition, de programme.

270
00:19:31,517 --> 00:19:35,798
Mais les bons programmeurs exploitent
énormément ces facilités

271
00:19:35,798 --> 00:19:41,255
même pour faire
des compilations conditionnelles.

272
00:19:43,305 --> 00:19:47,330
Par exemple, pour changer la langue
dans des commentaires.

273
00:19:48,027 --> 00:19:55,486
Le compilateur, lui, va traduire tout ça
dans un langage assembleur

274
00:19:55,986 --> 00:19:57,979
qui dépend du processeur.

275
00:19:59,280 --> 00:20:03,060
Donc, là c'est effectivement
quelque chose d'assez futé

276
00:20:03,130 --> 00:20:08,645
pour convertir dans le fond
dans les instructions, qui --

277
00:20:09,955 --> 00:20:13,545
tous les processeurs sont construits
avec le même principe,

278
00:20:13,545 --> 00:20:16,525
on l'avait vu
à propos de la machine de <i>Fibonacci</i>

279
00:20:16,525 --> 00:20:18,725
pour simplement calculer <i>Fibonacci</i>.

280
00:20:19,525 --> 00:20:25,558
Ensuite, il y a un problème d'adresse
et ces adresses sont calculées

281
00:20:25,558 --> 00:20:26,800
au niveau d'un <i>linker</i>,

282
00:20:27,640 --> 00:20:28,640
qui s'appelle <i>linker</i>

283
00:20:28,640 --> 00:20:32,176
parce qu'en fait,
nous travaillons avec de petits programmes

284
00:20:32,176 --> 00:20:36,713
mais les professionnels préparent
des modules de programmes,

285
00:20:36,713 --> 00:20:37,869
ont une librairie

286
00:20:38,279 --> 00:20:42,898
et tous ces programmes préparés
séparément sont assemblés

287
00:20:44,198 --> 00:20:48,268
à ce moment pour générer le code

288
00:20:49,608 --> 00:20:52,818
qui va être compatible avec le processeur.

289
00:20:53,498 --> 00:20:58,824
Alors ce code, il faut le transporter
dans votre processeur,

290
00:20:59,164 --> 00:21:01,227
ce qui se fait avec un câble USB.

291
00:21:01,796 --> 00:21:06,135
Et vous avez un chargeur
qui est, en fait, d'une part un programme

292
00:21:08,085 --> 00:21:14,107
qui transfère le code par une ligne série
et puis, qui est le driver en fait

293
00:21:14,107 --> 00:21:15,806
qui dépend de beaucoup de choses.

294
00:21:16,727 --> 00:21:21,420
Et puis un chargeur,
qui est à l'intérieur du processeur,

295
00:21:21,930 --> 00:21:26,660
qui va prendre les bytes
et les mettre dans la mémoire,

296
00:21:26,660 --> 00:21:27,681
dans le bon endroit.

297
00:21:28,441 --> 00:21:31,085
Alors ensuite,
au moment où l'exécution démarre,

298
00:21:32,645 --> 00:21:34,851
vous avez une activité dans les registres.

299
00:21:35,383 --> 00:21:38,522
Certains de ces registres sont
en communication avec l'extérieur.

300
00:21:39,844 --> 00:21:43,804
Vous avez des variables globales
qui ont été mises dans une zone mémoire

301
00:21:43,804 --> 00:21:46,001
qui s'appelle le <i>Tas</i> : <i>heap</i>.

302
00:21:46,584 --> 00:21:52,665
Et vous avez les variables locales,
qui sont dans une zone plus élastique

303
00:21:52,665 --> 00:21:56,035
puisque les variables locales
vont apparaître

304
00:21:57,185 --> 00:22:01,460
quand on appelle une fonction,
et puis, elle vont disparaître

305
00:22:01,620 --> 00:22:05,011
pour faire la place
à des variables d'une autre fonction.

306
00:22:05,580 --> 00:22:09,030
Donc ça, il faudra parfois faire attention
avec ces variables locales

307
00:22:09,030 --> 00:22:10,111
et on en reparlera.

308
00:22:10,925 --> 00:22:13,622
Et puis, vous avez cette pile
qui se remplit, qui se vide

309
00:22:14,342 --> 00:22:17,763
en fonction des activités
et dans des gros programmes,

310
00:22:17,763 --> 00:22:21,340
il faut faire attention
qu'il y ait suffisament de mémoire vive

311
00:22:21,340 --> 00:22:22,400
à disposition.

312
00:22:22,942 --> 00:22:26,520
Bien, on a donc vu
comment s'exécute une fonction.

313
00:22:26,740 --> 00:22:31,356
Et on a mis en évidence
l'importance de définir des noms clairs

314
00:22:32,466 --> 00:22:33,166
en français,

315
00:22:33,166 --> 00:22:35,066
en anglais, en mélange.

316
00:22:35,946 --> 00:22:40,027
Je crois que c'est très difficile
de définir des noms clairs.

317
00:22:40,767 --> 00:22:43,868
Donc, on va pouvoir maintenant
utiliser des fonctions

318
00:22:44,488 --> 00:22:46,258
dans nos prochains exemples.