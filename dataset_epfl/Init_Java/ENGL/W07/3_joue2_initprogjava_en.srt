1
00:00:05,241 --> 00:00:06,675
In the previous video,

2
00:00:06,675 --> 00:00:10,206
we learned one way of programming
the <i>joue</i> method,

3
00:00:10,206 --> 00:00:15,474
whose job is to check whether a column
indicated by the player is a legal play

4
00:00:15,474 --> 00:00:19,529
and if so, to put the chip into
the grid.

5
00:00:19,529 --> 00:00:22,970
In this video, I suggest 2 ways

6
00:00:22,970 --> 00:00:25,718
of programming this <i>joue</i> method.

7
00:00:26,448 --> 00:00:29,015
Let's start with the header of
the <i>joue</i> method.

8
00:00:29,015 --> 00:00:30,967
Clearly, if we want to
change the algorithm,

9
00:00:30,967 --> 00:00:32,819
the body of the method,

10
00:00:32,819 --> 00:00:34,673
the header will remain the same.

11
00:00:34,673 --> 00:00:37,749
And so I will remind you
that we take a grid,

12
00:00:37,749 --> 00:00:41,357
an array of integers, which is the
game in which we want to play.

13
00:00:41,357 --> 00:00:45,414
Then an integer which indicates
in which column the player wants to play.

14
00:00:45,414 --> 00:00:48,588
And finally a third integer argument,

15
00:00:48,588 --> 00:00:51,709
which indicates the color of the chip
played in the column.

16
00:00:52,179 --> 00:00:54,429
The <i>joue</i> method returns a boolean,

17
00:00:54,429 --> 00:00:58,238
which returns <i>true</i> if the
play is legal,

18
00:00:58,238 --> 00:01:00,614
and <i>false</i> if the play
is illegal.

19
00:01:01,104 --> 00:01:05,327
Let's change the algorithm from the
last version of the <i>joue</i> method

20
00:01:05,327 --> 00:01:09,242
and let's start by testing the
legality of the play.

21
00:01:09,242 --> 00:01:14,814
The play is only legal if the
cell at position 0, at the row 0,

22
00:01:14,814 --> 00:01:16,001
is not occupied.

23
00:01:16,001 --> 00:01:19,809
Indeed, if the cell located at
position 0 in the column

24
00:01:19,809 --> 00:01:22,141
in which we want to play
is not empty,

25
00:01:22,141 --> 00:01:26,346
this means that there were chips
below and that the column is full.

26
00:01:26,776 --> 00:01:30,123
So, as usual, we will start
by writing the comment

27
00:01:30,123 --> 00:01:32,098
which explains what we will do.

28
00:01:32,098 --> 00:01:35,042
If the column is full,
then the play is illegal.

29
00:01:35,042 --> 00:01:37,265
And now, let's write it in Java.

30
00:01:37,265 --> 00:01:41,240
If the column is full, that is,
if the grid,

31
00:01:41,240 --> 00:01:47,394
at position 0 and in the column
we were given is not empty,

32
00:01:47,394 --> 00:01:50,987
in other words, is not equal to the
predefined value for <i>vide</i> (TN: <i>empty</i>),

33
00:01:50,987 --> 00:01:53,483
then the play is illegal

34
00:01:53,483 --> 00:01:57,959
and we simply have to leave
the method by returning <i>false</i>.

35
00:01:58,699 --> 00:02:02,699
This simplifies exploration of
the grid greatly

36
00:02:02,699 --> 00:02:05,001
to place the chip,
since at this point,

37
00:02:05,001 --> 00:02:06,503
either we left with <i>false</i>,

38
00:02:06,503 --> 00:02:09,593
or we know that the column
is not full

39
00:02:09,593 --> 00:02:11,581
and so we will necessarily
find an empty cell

40
00:02:12,111 --> 00:02:14,407
which we can now start
to look for.

41
00:02:14,407 --> 00:02:16,606
As usual, we put this
into a comment,

42
00:02:16,606 --> 00:02:21,942
we will search the column from
bottom to top to find the first empty cell.

43
00:02:21,942 --> 00:02:26,664
This is written in Java thus:
we start by naming a variable here,

44
00:02:26,664 --> 00:02:30,767
<i>ligne</i> (TN: <i>row</i>) to search
the different rows.

45
00:02:31,377 --> 00:02:38,327
We initialize this line to
the last line of the array,

46
00:02:38,327 --> 00:02:42,203
which is <i>size of grid -1 </i>.

47
00:02:42,203 --> 00:02:45,651
I remind you that arrays
have indices that go

48
00:02:45,651 --> 00:02:47,070
from 0 to size-1.

49
00:02:47,070 --> 00:02:51,142
So, we initialize <i>ligne</i>
to <i>size of grid - 1</i>

50
00:02:51,142 --> 00:02:55,364
and then we will search
this array upwards.

51
00:02:55,364 --> 00:03:00,315
So, while the cell
at the position of the

52
00:03:00,315 --> 00:03:02,223
current line

53
00:03:02,223 --> 00:03:04,486
and the indicated column

54
00:03:04,486 --> 00:03:05,923
is not empty,

55
00:03:06,553 --> 00:03:08,429
we decrement the line number,

56
00:03:08,429 --> 00:03:10,298
so <i>--ligne</i>.

57
00:03:10,628 --> 00:03:14,491
Now, we have found an empty cell
and we simply have to play there.

58
00:03:14,491 --> 00:03:17,907
As always, we write the comment, so we
write that <i>grille</i> (TN : <i>grid</i>),

59
00:03:17,907 --> 00:03:24,427
at position <i>row, column</i>
receives the color which we wish to play.

60
00:03:24,427 --> 00:03:28,302
So the first parameter we received, <i>couleur</i>.

61
00:03:28,302 --> 00:03:31,903
And we can end by returning the
information that we were able to play,

62
00:03:31,903 --> 00:03:33,287
by returning <i>true</i>.

63
00:03:34,017 --> 00:03:37,274
This is our new version of the
<i>joue</i> method.

64
00:03:37,614 --> 00:03:39,783
and I will let you appreciate

65
00:03:39,783 --> 00:03:42,027
the difference in size of these

66
00:03:42,027 --> 00:03:44,446
two methods, disregarding the size
of the comments.

67
00:03:48,996 --> 00:03:52,173
Let's end with yet another version of the
<i>joue</i> method

68
00:03:52,173 --> 00:03:55,921
which, this time, builds upon the
method from the previous video

69
00:03:55,921 --> 00:03:57,069
and improves it.

70
00:03:57,099 --> 00:04:00,889
So, here is the version from
the previous video

71
00:04:00,889 --> 00:04:06,539
and the idea is to use this <i>pleine</i>
(TN: <i>occupied</i>) boolean

72
00:04:06,539 --> 00:04:08,737
and to try to do things differently.

73
00:04:08,737 --> 00:04:13,012
So we will delete it, but with what
will we replace it?

74
00:04:13,012 --> 00:04:15,084
Let's go back to the initial problem,

75
00:04:15,084 --> 00:04:17,736
and I will remind you that we had
introduced this <i>pleine</i> boolean

76
00:04:17,736 --> 00:04:22,221
because we decremented the row

77
00:04:22,221 --> 00:04:28,978
in the first version, until it reached
the position 0.

78
00:04:28,978 --> 00:04:30,469
So when <i>ligne</i> was null,

79
00:04:30,469 --> 00:04:35,360
we continued, in the first version, to
decrement and thus to

80
00:04:35,360 --> 00:04:36,482
exceed the bounds of the array.

81
00:04:36,482 --> 00:04:39,196
All we have to do now is to
write this

82
00:04:39,196 --> 00:04:43,588
and to say that we want to stop
when <i>ligne</i> equals 0.

83
00:04:43,588 --> 00:04:47,011
We want to continue as long as <i>ligne</i>
is bigger than or equals 0.

84
00:04:47,011 --> 00:04:50,353
As soon as the row reaches 0,
we want to loop to stop.

85
00:04:50,353 --> 00:04:54,906
So we write this, while <i>ligne</i>
>= 0.

86
00:04:54,906 --> 00:04:56,954
0, of course,  must be considered,

87
00:04:56,954 --> 00:04:59,935
as long as <i>ligne</i> is bigger
than or equals to 0.

88
00:05:00,515 --> 00:05:06,478
So we can continue removing
all instances of <i>pleine</i>.

89
00:05:06,478 --> 00:05:09,553
There, this simplifies our
loop considerably.

90
00:05:09,553 --> 00:05:14,149
And we will do the same thing in the
last part, at the bottom, were we play,

91
00:05:14,519 --> 00:05:16,451
and we will put the test here too,
the same one.

92
00:05:16,451 --> 00:05:19,679
Namely "if <i>ligne</i> >= 0",

93
00:05:19,679 --> 00:05:24,705
indeed, at this point, the row is
bigger than or equals 0,

94
00:05:24,705 --> 00:05:30,137
it means that we are still within the grid
and that we can play.

95
00:05:30,137 --> 00:05:33,582
Otherwise, we are outside of
the grid.

96
00:05:33,582 --> 00:05:36,294
Here is then the final version,
with comments of course,

97
00:05:36,294 --> 00:05:40,102
which we do not hesitate to add to
make our code more legible.

98
00:05:40,102 --> 00:05:44,095
This ends our third version of the
<i>joue</i> method.

99
00:05:44,095 --> 00:05:47,421
That said, there is still
a potential error

100
00:05:47,421 --> 00:05:49,879
in all our versions of the
<i>joue</i> method.

101
00:05:49,879 --> 00:05:51,770
Do you see what it might be?

102
00:05:52,380 --> 00:05:56,151
I will let you implement this
correction as an exercise

103
00:05:56,151 --> 00:05:59,782
in the version of <i>joue</i> which you
choose to code.

104
00:05:59,782 --> 00:06:03,486
At this stage, you should have a
decent Java program

105
00:06:03,486 --> 00:06:06,977
where you can represent a game,
that is, a grid,

106
00:06:06,977 --> 00:06:09,145
and the colors of the two players' chips.

107
00:06:09,145 --> 00:06:12,173
You can thus initialize this
game and display it.

108
00:06:12,253 --> 00:06:16,643
And you can play with chips and
test the legality of plays in the grid.

109
00:06:16,643 --> 00:06:20,563
To have a complete game,
we still have to ask

110
00:06:20,563 --> 00:06:24,842
a player where he wishes to play
and to be able to alternate

111
00:06:24,842 --> 00:06:26,884
between players: ask red to play,
then yellow.

112
00:06:26,884 --> 00:06:29,228
And finally to check whether the game
has ended,

113
00:06:29,228 --> 00:06:32,106
that is, if one of the players has one or
if the grid is full.

114
00:06:32,106 --> 00:06:35,006
This will be discussed in the next
videos.
