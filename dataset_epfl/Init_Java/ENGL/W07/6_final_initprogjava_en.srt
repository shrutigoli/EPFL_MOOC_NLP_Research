1
00:00:05,160 --> 00:00:08,849
We have almost finished our case study
of our Connect Four game.

2
00:00:08,849 --> 00:00:11,087
We now have 2 players
playing alternately

3
00:00:11,087 --> 00:00:13,367
and we can determine if
one of them has won.

4
00:00:13,367 --> 00:00:15,647
We just need to refine
the main program

5
00:00:15,647 --> 00:00:17,969
so that it indicates which
of the 2 players has won

6
00:00:17,969 --> 00:00:20,115
and to take into account a
tie between the players.

7
00:00:20,115 --> 00:00:22,531
So this will be the topic of
this episode.

8
00:00:22,531 --> 00:00:25,499
As a reminder, our Connect 4 game
at this stage

9
00:00:25,499 --> 00:00:27,220
enables 2 players to play
alternately by placing disks:

10
00:00:27,219 --> 00:00:31,368
player 'X' places a yellow disk

11
00:00:31,368 --> 00:00:34,649
while player 'O' places
a red piece

12
00:00:34,649 --> 00:00:36,440
during one round or loop.

13
00:00:36,440 --> 00:00:38,730
This means that at the end
of each iteration of the loop

14
00:00:38,730 --> 00:00:42,400
we can guaranty that the player's
colors alternates between yellow and red.

15
00:00:42,399 --> 00:00:46,769
This continues until one of the two
players wins.

16
00:00:46,770 --> 00:00:49,260
This program nevertheless
needs to be improved.

17
00:00:49,259 --> 00:00:52,769
The first thing to do is that
when we exit the loop

18
00:00:52,770 --> 00:00:55,420
which means that one of the players
has won,

19
00:00:55,420 --> 00:00:59,350
to display which of the 2 is actually
the winner.

20
00:00:59,350 --> 00:01:00,829
The second thing to do

21
00:01:00,829 --> 00:01:02,619
is to consider the situation

22
00:01:02,619 --> 00:01:05,700
where the 2 players continue placing
their disks without anyone winning

23
00:01:05,700 --> 00:01:07,680
until the grid is filled

24
00:01:07,680 --> 00:01:09,919
and then no one will
have won.

25
00:01:09,919 --> 00:01:11,870
It is a tie.

26
00:01:11,870 --> 00:01:14,650
This scenario is not anticipated
in the present program

27
00:01:14,650 --> 00:01:18,239
which is not very good.

28
00:01:18,239 --> 00:01:19,949
Let's start modifying our program

29
00:01:19,949 --> 00:01:22,109
so that it displays
the winner.

30
00:01:22,109 --> 00:01:25,400
So naturally, we have to add
to the code after the loop,

31
00:01:25,400 --> 00:01:27,090
a certain number of instructions,

32
00:01:27,090 --> 00:01:29,969
which will determine
the color of the player whose turn it is

33
00:01:29,969 --> 00:01:31,789
when the loop is exited.

34
00:01:31,790 --> 00:01:33,590
So if the color is yellow

35
00:01:33,590 --> 00:01:39,550
this means that the winner
is the red player.

36
00:01:39,550 --> 00:01:42,700
Why the red player and
not the yellow?

37
00:01:42,700 --> 00:01:43,909
Well, if we examine

38
00:01:43,909 --> 00:01:47,420
the last instructions that
we execute when we leave the loop

39
00:01:47,420 --> 00:01:50,670
we see that they alternate the color
of the player.

40
00:01:50,670 --> 00:01:53,460
If the color is alternated so that

41
00:01:53,459 --> 00:01:56,060
the color at the end of the loop
is yellow,

42
00:01:56,060 --> 00:01:58,150
which is our case,

43
00:01:58,150 --> 00:02:02,120
this means that effectively, the
player who won is 

44
00:02:02,120 --> 00:02:04,109
the other color: red.

45
00:02:04,109 --> 00:02:07,159
This explains why

46
00:02:07,159 --> 00:02:10,469
we exit the loop with the color
yellow

47
00:02:10,469 --> 00:02:13,139
and indicates that
it is indeed the

48
00:02:13,139 --> 00:02:14,919
red player who has won.

49
00:02:14,919 --> 00:02:19,349
So here to cover each possibility

50
00:02:19,349 --> 00:02:21,259
in the other alternative case

51
00:02:21,259 --> 00:02:23,788
we simply need
to display the fact

52
00:02:23,788 --> 00:02:26,938
the winner is this time
the yellow player

53
00:02:26,938 --> 00:02:31,129
which is player 'X' in our
modification.

54
00:02:31,129 --> 00:02:35,339
So, now we have covered
each case.

55
00:02:35,339 --> 00:02:40,458
Here we take care to comment
this test that is rather counter-intuitive

56
00:02:40,458 --> 00:02:44,438
by indicating that beforehand we had
already changed the color of the player

57
00:02:44,438 --> 00:02:47,359
which explains the reason
for this test here.

58
00:02:48,729 --> 00:02:50,509
As we said in the beginnning
of this video,

59
00:02:50,509 --> 00:02:52,349
we can also encounter situations

60
00:02:52,349 --> 00:02:54,582
in which neither player wins

61
00:02:54,582 --> 00:02:56,815
because the players have
filled the grid

62
00:02:56,815 --> 00:02:59,049
without anyone getting 4 in a row.

63
00:02:59,049 --> 00:03:01,339
Therefore we will have to
complete our code

64
00:03:01,339 --> 00:03:04,429
so as to take into consideration
this situation as well.

65
00:03:04,429 --> 00:03:07,429
That is to say, we will have to
leave the loop

66
00:03:07,429 --> 00:03:11,739
not only when one party has
won (this is already done),

67
00:03:11,739 --> 00:03:15,528
but also when the grid
is entirely filled,

68
00:03:15,528 --> 00:03:19,209
which is not coded and which
corresponds to a tie.

69
00:03:19,209 --> 00:03:22,788
What would happen
if we do not consider

70
00:03:22,788 --> 00:03:24,799
the possibility of the gird to be full?

71
00:03:24,799 --> 00:03:29,139
Well, what could occur is
that once the grid is filled

72
00:03:29,139 --> 00:03:32,279
we ask a player to place
a token on a valid box of the grid,

73
00:03:32,279 --> 00:03:33,439
which would be impossible,

74
00:03:33,438 --> 00:03:35,608
and so we would enter an
infinite loop

75
00:03:35,608 --> 00:03:38,328
without any likelihood
of anyone winning.

76
00:03:38,328 --> 00:03:41,238
We wouldn't stop asking a player
to introduce a disk

77
00:03:41,238 --> 00:03:44,189
which would be impossible
as the grid is all full

78
00:03:44,189 --> 00:03:48,339
and so we could never
get out of the cycle.

79
00:03:48,339 --> 00:03:51,769
This is obviously faulty for
a program like this

80
00:03:51,769 --> 00:03:55,180
and we have to resolve this
error so that the program

81
00:03:55,180 --> 00:03:57,399
runs smoothly in any situation.

82
00:03:57,399 --> 00:03:59,219
The modifications to do to
our program

83
00:03:59,219 --> 00:04:02,219
to test if the grid is filled
are quite intuitive:

84
00:04:02,219 --> 00:04:04,659
we have to repeat this part

85
00:04:04,659 --> 00:04:06,799
allowing the 2 players
to play alternately,

86
00:04:06,799 --> 00:04:10,759
as long as neither has won,
which is already implemented,

87
00:04:10,759 --> 00:04:13,899
but also as long as the grid is not filled.

88
00:04:13,899 --> 00:04:16,728
This can be written easily
like this

89
00:04:16,728 --> 00:04:21,318
by anticipating a method
"plein" (TN: means "filled")

90
00:04:21,329 --> 00:04:25,098
which will let us test
if the grid is filled or not.

91
00:04:25,098 --> 00:04:29,558
This modification will change how
the rest of the program runs.

92
00:04:29,559 --> 00:04:32,829
Indeed, we will not be in
a one-track mode

93
00:04:32,829 --> 00:04:35,538
where there has to be a winner,

94
00:04:35,538 --> 00:04:38,699
but we also have a situation where
we exit the loop

95
00:04:38,699 --> 00:04:42,799
without there being a winner, which
we will indicate accordingly.

96
00:04:42,800 --> 00:04:45,278
Here, we will have to modify
our program

97
00:04:45,278 --> 00:04:49,759
so as to include this scenario,
so then we test:

98
00:04:49,759 --> 00:04:52,149
"Did we exit the loop because
 a player won?"

99
00:04:52,149 --> 00:04:55,010
and signal this duly,

100
00:04:55,010 --> 00:04:57,440
as we did before
if the answer is "yes".

101
00:04:57,440 --> 00:05:01,579
If the answer is "no", then
we have a tie

102
00:05:02,449 --> 00:05:05,958
and we have to let the user know
with a relevant message.

103
00:05:06,788 --> 00:05:09,820
So, now we have covered all the
possible situations.

104
00:05:11,050 --> 00:05:13,759
Here is the code for the
method "plein",

105
00:05:13,759 --> 00:05:17,330
so we will ask alternately the
red player and the yellow player

106
00:05:17,330 --> 00:05:19,329
into which colomn he wants
to place his piece.

107
00:05:19,329 --> 00:05:22,180
Suppose that it's yellow's turn,

108
00:05:22,180 --> 00:05:25,189
if he decides to play in
the first column

109
00:05:25,189 --> 00:05:27,240
then since it is filled
automatically

110
00:05:27,240 --> 00:05:28,588
from the bottom up,

111
00:05:28,588 --> 00:05:31,488
then this means we will
fill in this case

112
00:05:31,500 --> 00:05:33,860
the very first position
of the grid.

113
00:05:33,860 --> 00:05:37,090
This effects how the grid
is tested to see if it is full:

114
00:05:37,090 --> 00:05:41,479
indeed, it is not necessary to test
each box of the grid

115
00:05:41,479 --> 00:05:44,229
to see if they contain a color
or are empty

116
00:05:44,230 --> 00:05:49,249
but we can simply test the last
line of the grid (at the top).

117
00:05:49,249 --> 00:05:51,069
Indeed, if this row is filled,

118
00:05:51,069 --> 00:05:55,110
this means that each box of the grid
is also already allotted a color

119
00:05:55,110 --> 00:05:59,000
because the grid is filled
from the bottom up.

120
00:05:59,000 --> 00:06:02,074
Therefore the grid is filled.

121
00:06:02,074 --> 00:06:05,949
Let's examine how to
code this method "plein".

122
00:06:05,949 --> 00:06:08,269
We saw from a methodological
point of view

123
00:06:08,269 --> 00:06:10,918
that we we consider
coding a method,

124
00:06:10,918 --> 00:06:13,567
we have to always ask
ourselves the question "what?"

125
00:06:13,567 --> 00:06:16,838
"what does the method do?", "what
information does it need to work?"

126
00:06:16,838 --> 00:06:19,338
"what does it return?".

127
00:06:19,338 --> 00:06:22,329
These are elements that we have considered
quickly here

128
00:06:22,329 --> 00:06:24,549
because the function is so simple

129
00:06:24,550 --> 00:06:28,569
through how we anticipated
its utilization

130
00:06:28,569 --> 00:06:29,949
in the principal program.

131
00:06:29,949 --> 00:06:34,400
So we have anticipated that we will
invoke this method "plein" on the grid

132
00:06:34,400 --> 00:06:35,879
and that it returns obviously

133
00:06:35,879 --> 00:06:39,099
a boolean variable, no doubt.

134
00:06:39,099 --> 00:06:43,668
This boolean

135
00:06:43,668 --> 00:06:45,989
indicates whether the grid
is full or not.

136
00:06:45,990 --> 00:06:52,110
This corresponds naturally to
this header of the method "plein".

137
00:06:52,110 --> 00:06:54,899
Now that the "what" is clear,
we can now examine the question "how?".

138
00:06:54,899 --> 00:06:59,579
"How to program the body
of the method 'plein'?"

139
00:06:59,579 --> 00:07:03,429
We can use the algorithm that we
sketched earlier

140
00:07:03,429 --> 00:07:08,218
that is that if we find
in the first line,

141
00:07:08,218 --> 00:07:10,228
that is to say in the last line
according to how  the grid is filled,

142
00:07:10,228 --> 00:07:11,189
an empty slot,

143
00:07:11,189 --> 00:07:13,749
this means that the grid is not
full.

144
00:07:13,749 --> 00:07:16,009
It's this procedure we
will implement.

145
00:07:16,009 --> 00:07:19,369
First we will use a for-loop

146
00:07:19,369 --> 00:07:20,939
iterating on the values

147
00:07:20,939 --> 00:07:24,480
of the slots of the first line.

148
00:07:24,480 --> 00:07:26,068
which is written "grille[0]",

149
00:07:26,068 --> 00:07:29,269
and test if the cell considered
is empty

150
00:07:29,269 --> 00:07:31,898
which would mean that
the grid is not full

151
00:07:31,898 --> 00:07:34,759
and so we would exit the method "plein"

152
00:07:34,759 --> 00:07:39,050
by indicating that the grid is not full with "false".

153
00:07:39,050 --> 00:07:43,749
If we have to go through
all the cells of the first line

154
00:07:43,749 --> 00:07:45,938
without finding any empty slot

155
00:07:45,938 --> 00:07:47,849
then we leave the loop

156
00:07:47,850 --> 00:07:52,389
which means in this case that the
grid is full

157
00:07:52,389 --> 00:07:58,149
and "plein" has to return
the boolean "true".

158
00:07:58,149 --> 00:08:01,199
Note that a frequent error for beginners

159
00:08:01,199 --> 00:08:04,249
in this kind of situation

160
00:08:04,249 --> 00:08:07,299
is to implement the algorithm
but in a wrong manner

161
00:08:07,299 --> 00:08:11,088
by returning "false" if the cell is empty,

162
00:08:11,088 --> 00:08:13,188
which is correct,

163
00:08:13,189 --> 00:08:15,528
but then to return "true"
right afterwards,

164
00:08:15,528 --> 00:08:17,894
which is obviously not the
correct procedure

165
00:08:17,894 --> 00:08:19,520
that we want to implement.
Why?

166
00:08:19,520 --> 00:08:23,608
Because we have to have
tested all the cells

167
00:08:23,608 --> 00:08:24,798
of the first line of the grid

168
00:08:24,798 --> 00:08:28,668
before determining that the
grid is indeed full.

169
00:08:28,668 --> 00:08:32,279
And this cannot be known inside the
body of the loop

170
00:08:32,279 --> 00:08:35,079
so we have to finish the whole loop
before returning "true".

171
00:08:35,090 --> 00:08:37,600
We pay attention to these little details

172
00:08:37,600 --> 00:08:40,950
that beginners tend to forget
but that are important in the end.

173
00:08:40,950 --> 00:08:44,759
So, now we've finished programming
our application for "Connect 4",

174
00:08:44,759 --> 00:08:48,490
of course, there are many ways of
programming this game

175
00:08:48,490 --> 00:08:51,460
and we have only presented one
of them.

176
00:08:51,460 --> 00:08:54,569
The goal of this case study was
to essentially show

177
00:08:54,569 --> 00:08:57,050
how to take on programming
such an application

178
00:08:57,050 --> 00:08:59,149
when you do it for the
first time.

179
00:08:59,149 --> 00:09:00,249
Several key ideas:

180
00:09:00,249 --> 00:09:03,030
first, always proceed from bottom up

181
00:09:03,030 --> 00:09:06,418
start by identifying the essential types
of data needed,

182
00:09:06,418 --> 00:09:09,171
and the main functions
before going into small details.

183
00:09:09,171 --> 00:09:11,764
Each of the functionalities
and fundamental methods

184
00:09:11,764 --> 00:09:13,508
can in turn be modularized

185
00:09:13,508 --> 00:09:16,149
that is, can invoke other
more detailed methods

186
00:09:16,149 --> 00:09:18,830
that will help it
do the tasks needed.

187
00:09:18,830 --> 00:09:21,630
We saw that in coding

188
00:09:21,630 --> 00:09:22,740
each method

189
00:09:22,740 --> 00:09:25,558
it is preferable to have a certain
methodology,

190
00:09:25,558 --> 00:09:28,629
and always ask the question
"what does the method do?",

191
00:09:28,629 --> 00:09:31,610
"what information does it require?",

192
00:09:31,610 --> 00:09:34,023
"what information does it return?".

193
00:09:34,023 --> 00:09:36,436
An only then ask the question
"how?"

194
00:09:36,436 --> 00:09:40,790
and think of the algorithms that
will allow you to do the wanted manipulations.

195
00:09:40,790 --> 00:09:43,240
Finally we saw that it was fundamental
to work on the essential aspects

196
00:09:43,240 --> 00:09:46,240
before working
on the aesthetics.

197
00:09:46,240 --> 00:09:47,950
And an important point

198
00:09:47,950 --> 00:09:51,709
is to systematically test as

199
00:09:51,708 --> 00:09:53,739
you write your code and not
only at the end.

200
00:09:53,739 --> 00:09:56,870
So, that concludes what we wanted
to teach you

201
00:09:56,870 --> 00:09:58,389
in this case study

202
00:09:58,389 --> 00:10:00,140
and we hope it will be useful

203
00:10:00,140 --> 00:10:03,750
farther along when you will take on
similar programming challenges.
