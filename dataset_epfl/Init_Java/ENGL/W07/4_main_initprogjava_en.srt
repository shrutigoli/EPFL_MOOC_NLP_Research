1
00:00:04,979 --> 00:00:08,789
Let's continue programming our
famous Connect Four game.

2
00:00:08,789 --> 00:00:11,179
At this point, we know how
to represent the game,

3
00:00:11,179 --> 00:00:12,929
we know how to represent the colors,

4
00:00:12,929 --> 00:00:14,747
we know how to initialize the game,

5
00:00:14,747 --> 00:00:15,765
how to display it,

6
00:00:15,765 --> 00:00:18,925
and then we saw how to make
the core of the program,

7
00:00:18,925 --> 00:00:21,061
 the <i>joue</i> method,

8
00:00:21,061 --> 00:00:24,859
which allows us to get a column 
number from a user,

9
00:00:24,859 --> 00:00:27,269
verify if we can actually play in that
column,

10
00:00:27,269 --> 00:00:29,129
and if possible, make that play.

11
00:00:29,129 --> 00:00:32,539
But at this point, we still don't
really know how to play the game.

12
00:00:32,539 --> 00:00:34,365
So let's try to write a <i>main</i>
method

13
00:00:34,365 --> 00:00:36,621
that will handle the actual
gameplay.

14
00:00:36,621 --> 00:00:38,140
For this, what we will need to do

15
00:00:38,140 --> 00:00:40,949
is of course ask a user
for a move,

16
00:00:41,489 --> 00:00:43,008
make this move,

17
00:00:43,396 --> 00:00:46,536
display the game, then
alternate,

18
00:00:47,593 --> 00:00:50,123
change the player's color.

19
00:00:51,774 --> 00:00:56,824
Of course, we want to repeat this,
to play one turn after another

20
00:00:56,824 --> 00:00:59,514
until the game is over.

21
00:00:59,514 --> 00:01:02,964
So, now, we are clear with what the
method has to do, with the "what".

22
00:01:02,964 --> 00:01:05,184
As always, when we write
a method,

23
00:01:05,184 --> 00:01:08,514
we should first think about what it
has to do, the "what"

24
00:01:08,514 --> 00:01:11,334
Now that this is clear, we can
start to write

25
00:01:11,334 --> 00:01:13,944
and of course, we start
with the classic header

26
00:01:13,944 --> 00:01:17,944
then the body of the <i>main</i> method.

27
00:01:17,944 --> 00:01:20,714
Before entering this game loop which
we have just described,

28
00:01:20,714 --> 00:01:23,044
we must of course declare a game.

29
00:01:23,044 --> 00:01:24,750
So here, this is a two-dimensional
integer array,

30
00:01:24,750 --> 00:01:26,316
which we call "grille" (TN: means "grid").

31
00:01:26,316 --> 00:01:30,804
And we know that a Connect Four grid
has six rows and seven columns.

32
00:01:30,804 --> 00:01:33,504
Then we will of course initialize it.

33
00:01:33,504 --> 00:01:36,524
So we call our <i>initialise</i> method.

34
00:01:36,524 --> 00:01:41,274
And it is nice to display it to show that
we are starting with an empty grid.

35
00:01:41,674 --> 00:01:44,224
Now, we will define the color
of the first player.

36
00:01:44,224 --> 00:01:47,644
In Connect Four, we start with the
yellow player.

37
00:01:47,644 --> 00:01:51,644
So we initialize a variable defining the
color of the current player to yellow

38
00:01:51,644 --> 00:01:55,644
There, now we are ready to begin
our game loop,

39
00:01:55,644 --> 00:01:56,914
as we discussed earlier.

40
00:01:56,914 --> 00:01:58,434
The question we should ask
ourselves at this point is:

41
00:01:58,434 --> 00:02:01,164
should we use a <i>while</i> or
<i>do while</i> loop?

42
00:02:01,164 --> 00:02:03,484
Do we begin by testing something?

43
00:02:03,484 --> 00:02:05,624
Or do we begin by executing
something

44
00:02:05,624 --> 00:02:07,544
before testing a condition
and looping?

45
00:02:07,544 --> 00:02:09,744
Here, I can't really imagine what we
might want to test.

46
00:02:09,744 --> 00:02:11,154
We are in the initial situation,

47
00:02:11,154 --> 00:02:12,314
we control everything.

48
00:02:12,314 --> 00:02:14,714
So we will start by running
through our game sequence,

49
00:02:14,714 --> 00:02:17,234
then we will test whether
we should continue or not,

50
00:02:17,234 --> 00:02:18,914
if the game has ended,

51
00:02:18,914 --> 00:02:21,014
and if that is not the case then we
will of course loop

52
00:02:21,014 --> 00:02:22,264
So, this is a <i>do while</i> loop.

53
00:02:22,264 --> 00:02:24,214
We start by writing <i>do</i>.

54
00:02:24,214 --> 00:02:26,684
And what we want to do first
in our loop

55
00:02:26,684 --> 00:02:28,504
is to ask the player for a move.

56
00:02:28,504 --> 00:02:30,954
We could do this with a function,

57
00:02:30,954 --> 00:02:32,874
but here, I will write everything
in the <i>main</i>

58
00:02:32,874 --> 00:02:34,644
and we will come back to it
a little later on.

59
00:02:34,644 --> 00:02:36,957
That being said, even if we
don't make this into a function,

60
00:02:36,957 --> 00:02:39,004
we can adopt the same
methodology

61
00:02:39,004 --> 00:02:40,734
and decompose it into sub-tasks:

62
00:02:40,734 --> 00:02:42,754
to ask for a move, what
should we do?

63
00:02:42,754 --> 00:02:45,994
We must ask the question and
retrieve the answer.

64
00:02:45,994 --> 00:02:47,954
So we start by asking
the question

65
00:02:47,954 --> 00:02:51,224
To do so, we will display
a message to the user

66
00:02:51,224 --> 00:02:52,994
and we will display a different
message

67
00:02:52,994 --> 00:02:54,744
if the player is red or if
he is yellow

68
00:02:54,744 --> 00:02:57,374
since we will also use this
message to indicate their color.

69
00:02:57,374 --> 00:03:01,984
So if the players color is yellow,
we will display the following message:

70
00:03:02,184 --> 00:03:06,184
Of course, <i>system.out.println</i>.

71
00:03:07,440 --> 00:03:10,490
Here, we display "joueur" (TN: means "player")
and their color

72
00:03:10,490 --> 00:03:13,570
here we will display an X for the
color yellow,

73
00:03:13,570 --> 00:03:16,880
player X, and we will ask him
to enter a move.

74
00:03:18,280 --> 00:03:23,350
Otherwise, we display a message
for the red player.

75
00:03:24,439 --> 00:03:27,089
We use a capital O

76
00:03:27,089 --> 00:03:30,859
to display the color red, just like
for the disks.

77
00:03:31,459 --> 00:03:34,069
And we end here with
the same message

78
00:03:34,069 --> 00:03:36,449
Then, we want to input the reply.

79
00:03:36,449 --> 00:03:38,919
To do this, we introduce a new
<i>colonne</i> variable (TN: "colonne" means "column")

80
00:03:38,919 --> 00:03:41,249
which will be the column in which
the player wants to play.

81
00:03:41,249 --> 00:03:43,139
And we read with <i>nextInt</i>.

82
00:03:43,139 --> 00:03:48,589
Of course, we mustn't forget to
declare something to be able to read this, 

83
00:03:48,589 --> 00:03:52,377
so we declare a Scanner
as usual.

84
00:03:52,377 --> 00:03:55,767
And, following the suggestions we gave you
in the previous episodes,

85
00:03:55,767 --> 00:03:59,627
we declare this variable outside of
the <i>main</i> here

86
00:03:59,627 --> 00:04:02,467
to be able to access it in
the entire program.

87
00:04:02,467 --> 00:04:04,607
There, let's shift all of this
up a little

88
00:04:04,607 --> 00:04:07,487
to continue with our <i>main</i>.

89
00:04:07,487 --> 00:04:11,397
By the way, don't forget that the indices
we use for the grid in Java

90
00:04:11,397 --> 00:04:15,837
are shifted by one compared to the indices
that we humans use.

91
00:04:15,837 --> 00:04:17,767
Humans would count from
one to six,

92
00:04:17,767 --> 00:04:21,207
whereas we will begin
at zero.

93
00:04:21,207 --> 00:04:23,817
So we must shift by one
with "--colonne".

94
00:04:24,267 --> 00:04:27,187
Then we will be able to
actually make this move.

95
00:04:27,187 --> 00:04:28,857
Remember that the <i>joue</i>
method,

96
00:04:28,857 --> 00:04:31,547
as we wrote it in the
previous episode,

97
00:04:31,547 --> 00:04:35,067
returns a boolean that is true if
the move is valid 

98
00:04:35,067 --> 00:04:36,557
and false if it is not valid.

99
00:04:36,557 --> 00:04:40,507
So we get this return value and
store it in a boolean,

100
00:04:40,507 --> 00:04:45,637
in a <i>valide</i> variable which
we declared and initialized here,

101
00:04:47,140 --> 00:04:50,270
with a call to our <i>joue</i> method

102
00:04:50,270 --> 00:04:52,690
which takes the grid,

103
00:04:52,690 --> 00:04:56,280
the column number we just received
from the player

104
00:04:56,280 --> 00:04:58,560
and the color of the current player

105
00:04:58,560 --> 00:05:01,320
which we declared here.

106
00:05:01,580 --> 00:05:04,790
If the play is invalid, it is important
to let the player know

107
00:05:04,790 --> 00:05:06,730
and so if it is invalid,

108
00:05:06,730 --> 00:05:11,320
we display a message indicating that
the play was invalid:

109
00:05:11,320 --> 00:05:13,780
so, <i>println</i> the message.

110
00:05:14,678 --> 00:05:17,568
Now, third step in our loop:
displaying the game.

111
00:05:17,568 --> 00:05:20,518
And now, fourth step...

112
00:05:20,518 --> 00:05:23,148
... let's shift this all to have
a clearer picture...

113
00:05:23,148 --> 00:05:26,938
... fourth step of our loop: alternating
the colors,

114
00:05:26,938 --> 00:05:29,418
i.e changing the color of
the current player.

115
00:05:29,418 --> 00:05:32,888
As usual, we write comments to be
as clear as possible.

116
00:05:32,888 --> 00:05:35,018
So, we change the color
very easily.

117
00:05:35,018 --> 00:05:39,018
We could also write a method to do this,
actually this would be a good place to do so,

118
00:05:39,018 --> 00:05:43,018
but the method is simply: if the current
color is yellow,

119
00:05:43,018 --> 00:05:44,778
then we change it to red.

120
00:05:44,778 --> 00:05:46,508
Otherwise, we set it to yellow.

121
00:05:46,508 --> 00:05:49,758
So, <i>if</i> the current player's color
is yellow,

122
00:05:49,758 --> 00:05:51,538
we set it to red.

123
00:05:51,958 --> 00:05:56,698
So if the color of the player is
yellow, I set it to red.

124
00:05:56,698 --> 00:06:00,038
Otherwise, I set it to yellow.

125
00:06:00,038 --> 00:06:02,748
<i>couleur_joueur</i>, remember,
is the variable representing

126
00:06:02,748 --> 00:06:04,968
the color of the current player.

127
00:06:04,968 --> 00:06:06,908
There, we have finished our loop

128
00:06:06,908 --> 00:06:10,468
and all we need to add
is the condition.

129
00:06:10,468 --> 00:06:11,968
What condition?

130
00:06:11,968 --> 00:06:15,358
The game continuation condition.

131
00:06:15,358 --> 00:06:17,428
We continue playing while...

132
00:06:17,428 --> 00:06:20,048
Well, I will leave this to the next
episode,

133
00:06:20,048 --> 00:06:22,548
and leave this blank.

134
00:06:22,548 --> 00:06:26,548
This concludes our <i>main</i> method
that allows us to play.

135
00:06:26,548 --> 00:06:28,488
I encourage you to compile
and test it.

136
00:06:28,488 --> 00:06:31,358
Of course, you have to write
something here in the blank space.

137
00:06:31,358 --> 00:06:33,638
At first, you can write <i>while true</i>

138
00:06:33,638 --> 00:06:35,318
to have an infinite loop,

139
00:06:35,318 --> 00:06:38,858
and you can stop the program
with the environment.

140
00:06:38,858 --> 00:06:40,961
I encourage you to systematically

141
00:06:40,961 --> 00:06:42,304
make tests like this

142
00:06:42,304 --> 00:06:44,308
when you are at such a step.

143
00:06:44,308 --> 00:06:47,168
Personally, I would prefer to review this
code right now with you

144
00:06:47,168 --> 00:06:49,808
to organize it better, to modularize it,

145
00:06:49,808 --> 00:06:53,088
that is, to create methods to handle
the most important parts.

146
00:06:53,088 --> 00:06:56,038
We have already said that we
could write a display method here

147
00:06:56,038 --> 00:06:57,808
and we will come back to this
later on.

148
00:06:57,808 --> 00:07:02,478
We could write a method to alternate
between the players.

149
00:07:02,478 --> 00:07:04,918
And, on a larger scale,

150
00:07:04,918 --> 00:07:08,628
we could make a method of
all of this,

151
00:07:08,628 --> 00:07:10,258
since it is essentially the core
of the game.

152
00:07:10,258 --> 00:07:12,708
The <i>main</i> is way too large
here. As you can see,

153
00:07:12,708 --> 00:07:14,268
it doesn't fit on one slide

154
00:07:14,268 --> 00:07:16,118
which is a sign that it is not well written.

155
00:07:16,118 --> 00:07:17,948
A <i>main</i> must be very concise, very clear.

156
00:07:17,948 --> 00:07:21,528
So we will modularize it, we
will chop it up into methods.

157
00:07:21,528 --> 00:07:25,948
The easiest is to directly cut out the part
we want to make into a method,

158
00:07:25,948 --> 00:07:30,258
as we explained to you in the episode on
methodology for

159
00:07:30,258 --> 00:07:31,948
function and method development.

160
00:07:31,948 --> 00:07:35,643
Then we start to write the
method call as we envision it,

161
00:07:35,643 --> 00:07:39,763
so for example, let's say that this part
corresponds to asking and playing,

162
00:07:39,763 --> 00:07:42,163
so we will call it demandeEtJoue
(TN: means "askAndPlay").

163
00:07:42,163 --> 00:07:44,193
This will be the name of our method,
demandeEtJoue.

164
00:07:44,193 --> 00:07:46,553
And what does this method
need to receive?

165
00:07:46,553 --> 00:07:49,473
It needs the current game of
course, so the grid

166
00:07:49,473 --> 00:07:52,493
and the color of the current player.

167
00:07:52,493 --> 00:07:55,813
Those are the two arguments
we pass it.

168
00:07:55,813 --> 00:08:00,273
And now we can proceed to
writing this method.

169
00:08:00,273 --> 00:08:03,583
As a reminder, here is the call
in comment.

170
00:08:03,583 --> 00:08:07,583
So we pass the grid and the player's
color to demandeEtJoue

171
00:08:07,583 --> 00:08:09,584
This gives the following header:

172
00:08:09,584 --> 00:08:13,614
void demandeEtJoue
taking a grid

173
00:08:13,614 --> 00:08:16,084
and a color.

174
00:08:16,084 --> 00:08:20,744
Then, in the body of the method,
we will simply

175
00:08:20,744 --> 00:08:25,104
copy everything we had cut
out of the <i>main</i>

176
00:08:25,104 --> 00:08:28,514
to make it into a method.

177
00:08:28,514 --> 00:08:32,764
At this stage, one should be very careful
not to make any mistakes in the names.

178
00:08:32,764 --> 00:08:35,814
For example, here we used
<i>couleurJoueur</i> again

179
00:08:35,814 --> 00:08:40,204
and I strongly encourage you to
save, compile and verify

180
00:08:40,204 --> 00:08:42,734
that the code is correct
and that we haven't made any mistake.

181
00:08:42,734 --> 00:08:43,884
Of course, you should
proofread it,

182
00:08:43,884 --> 00:08:45,729
and possibly test it too

183
00:08:45,729 --> 00:08:48,494
with a small test method.

184
00:08:48,494 --> 00:08:51,629
In the spirit of modularizing,

185
00:08:51,629 --> 00:08:54,244
let's try to avoid copy-pasting
as much as possible.

186
00:08:54,244 --> 00:08:56,334
I see several copies of the
same thing here.

187
00:08:56,334 --> 00:08:59,294
I see that "Joueur" was repeated here.

188
00:08:59,294 --> 00:09:03,734
I see that here, we repeated the message
asking the user for a column number.

189
00:09:03,734 --> 00:09:08,074
This all is not right and we will
have to make it modular.

190
00:09:08,089 --> 00:09:11,039
To do so, we will find the
common parts

191
00:09:11,039 --> 00:09:15,039
and remove them from the
condition on the color.

192
00:09:15,039 --> 00:09:19,039
Because, which part of this depends
on the color?

193
00:09:19,039 --> 00:09:21,045
The only part that does is this
output here

194
00:09:21,045 --> 00:09:22,651
of the X and O.

195
00:09:22,651 --> 00:09:27,039
So we will put the common parts 
preceding the display of the X

196
00:09:27,039 --> 00:09:29,529
before the <i>if</i>,

197
00:09:29,529 --> 00:09:35,039
and we will put the common parts
following the display of the X and O

198
00:09:35,039 --> 00:09:38,079
after the <i>if</i>.

199
00:09:38,079 --> 00:09:40,809
This gives the following code:

200
00:09:40,809 --> 00:09:44,389
We start by displaying the common
message "Joueur "..

201
00:09:44,389 --> 00:09:47,389
and careful here, we are using <i>print</i>
and not <i>println</i>

202
00:09:47,389 --> 00:09:50,369
since the line is not finished and we
do not want to display a newline.

203
00:09:50,369 --> 00:09:53,819
Then we make our test on the
color and in this case,

204
00:09:53,819 --> 00:09:57,269
if the color is yellow, we display the X

205
00:09:57,269 --> 00:09:59,059
otherwise, we display the O.

206
00:09:59,059 --> 00:10:03,899
Then we have another common part which
is displayed using <i>println</i>

207
00:10:03,900 --> 00:10:07,320
thus displaying the end of the message.

208
00:10:07,320 --> 00:10:09,646
And now, we see again
that we could modularize

209
00:10:09,646 --> 00:10:11,032
a little bit more.

210
00:10:11,032 --> 00:10:13,840
And this little bit of code here,
these few lines,

211
00:10:13,840 --> 00:10:16,630
could be a color output

212
00:10:16,632 --> 00:10:19,512
which would be useful both in
displaying the game

213
00:10:19,512 --> 00:10:21,552
and displaying the player like we did here.

214
00:10:22,572 --> 00:10:25,832
Let's make the most of already being
in this demandeEtJoue method

215
00:10:25,832 --> 00:10:28,732
to improve the algorithm
part of it.

216
00:10:28,732 --> 00:10:32,522
What happens the player enters
a move that is invalid?

217
00:10:32,522 --> 00:10:36,022
In the previous version, we simply
passed to the other player,

218
00:10:36,022 --> 00:10:37,572
which is certainly not correct

219
00:10:37,572 --> 00:10:41,172
Here, we will have to ask again
while the move is invalid

220
00:10:41,172 --> 00:10:43,312
Asking again means having a loop.

221
00:10:43,312 --> 00:10:46,492
Once again, we ask ourselves the question:
should this be a <i>while</i> loop,

222
00:10:46,492 --> 00:10:48,502
or a <i>do while</i> loop?

223
00:10:48,502 --> 00:10:52,272
In other words, do we start by asking the
question, then checking the condition?

224
00:10:52,272 --> 00:10:57,092
Or do we start by verifying the condition,
then execute code?

225
00:10:57,092 --> 00:10:59,402
So here of course, we start
by executing,

226
00:10:59,402 --> 00:11:03,712
we start by asking for the move before
checking whether it is valid.

227
00:11:03,712 --> 00:11:06,622
So it is a <i>do while</i> loop. 
Let's write it.

228
00:11:06,622 --> 00:11:12,352
<i>do</i> the whole bloc of our method
here, then  <i>while</i>.

229
00:11:12,352 --> 00:11:13,712
<i>while</i> what?

230
00:11:13,712 --> 00:11:17,172
Remember, what we want to do if the
move is not valid,

231
00:11:17,172 --> 00:11:21,892
is to display the message, and we want
to repeat this entire interaction

232
00:11:21,892 --> 00:11:24,362
here while the move is not valid.

233
00:11:24,362 --> 00:11:27,802
So this is written <i>while not valide</i>.

234
00:11:27,802 --> 00:11:31,132
There, we're pretty sure we have
finished. We save, we compile

235
00:11:31,132 --> 00:11:32,732
and what happens?

236
00:11:32,732 --> 00:11:38,032
The code doesn't compile because
of the scope of the <i>valide</i> variable here.

237
00:11:38,032 --> 00:11:43,212
It is declared in this bloc here.

238
00:11:43,212 --> 00:11:47,732
And so the <i>valide</i> variable
is not defined here.

239
00:11:48,322 --> 00:11:51,452
So we must move the <i>valide</i> variable

240
00:11:51,452 --> 00:11:53,802
which is declared in the loop,

241
00:11:53,802 --> 00:11:55,932
and put it before the loop to
be able to use it

242
00:11:55,932 --> 00:11:58,112
in the condition of the <i>while</i>.

243
00:11:58,672 --> 00:12:02,492
Of course, if we do this, we must
be careful to note

244
00:12:02,492 --> 00:12:06,230
that we now have two declarations of
<i>valide</i>.

245
00:12:06,230 --> 00:12:08,398
One here, and one here.
So obviously, we should

246
00:12:08,398 --> 00:12:12,066
correct this one and delete it.

247
00:12:12,066 --> 00:12:15,616
Now, we just have one single assignment
in the loop.

248
00:12:15,616 --> 00:12:18,096
There, our demandeEtJoue
method is now finished,

249
00:12:18,096 --> 00:12:22,096
it compiles and should execute
correctly.

250
00:12:22,096 --> 00:12:26,296
Let's end this episode with a last look
at the joue method.

251
00:12:26,296 --> 00:12:31,146
To answer a quiz that was asked in a
previous episode

252
00:12:31,146 --> 00:12:35,226
let's look at what we have to do to
correct this joue method.

253
00:12:35,226 --> 00:12:39,756
The problem here is that we access
a row and column in an array

254
00:12:39,756 --> 00:12:44,506
without actually checking that the column
we received is correct.

255
00:12:44,506 --> 00:12:48,716
We could imagine that this test would
be done before the joue method.

256
00:12:48,716 --> 00:12:51,806
We could for example have done it
right after asking the player

257
00:12:51,806 --> 00:12:53,276
to enter a column number.

258
00:12:53,276 --> 00:12:55,986
If he enters a number that is
too large, such as 100,

259
00:12:55,986 --> 00:12:58,246
we could tell him that the move
is not valid.

260
00:12:58,246 --> 00:13:01,086
But it is best to put this
sort of test

261
00:13:01,086 --> 00:13:02,786
as close as possible to the danger
it protects against.

262
00:13:02,786 --> 00:13:05,566
Which would mean putting it
in the joue method here,

263
00:13:05,566 --> 00:13:08,826
as it receives a column number
as parameter.

264
00:13:08,826 --> 00:13:12,406
Checking here would guarantee
that this column is compatible

265
00:13:12,406 --> 00:13:16,036
with its use here as an
index in the grid.

266
00:13:16,036 --> 00:13:18,656
So we will simply start

267
00:13:18,656 --> 00:13:20,886
as usual, by writing the comment

268
00:13:20,886 --> 00:13:24,236
and saying that if the column number
is larger than the size of the array,

269
00:13:24,236 --> 00:13:26,536
then it means that the move
is invalid.

270
00:13:26,536 --> 00:13:28,286
In Java, this is written like so:

271
00:13:28,286 --> 00:13:30,516
If <i>colonne</i> (TN: means "column") that
we received as parameter

272
00:13:30,516 --> 00:13:33,276
is larger than the size
of the grid,

273
00:13:33,276 --> 00:13:37,686
so for example
<i>grille[0].length</i>,

274
00:13:37,686 --> 00:13:40,296
then at that moment, we simply
<i>return false</i>

275
00:13:40,296 --> 00:13:42,756
since the move is not valid.

276
00:13:43,926 --> 00:13:46,506
There, this concludes this
episode.

277
00:13:46,506 --> 00:13:47,562
All that is still needed,

278
00:13:47,562 --> 00:13:48,768
to have a complete game,

279
00:13:48,768 --> 00:13:50,737
is to implement the stopping
test

280
00:13:50,737 --> 00:13:53,006
in the game's loop.

281
00:13:53,006 --> 00:13:56,086
This will be the subject of
the next episode.
