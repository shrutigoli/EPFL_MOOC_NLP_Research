1
00:00:05,140 --> 00:00:07,945
Let's continue coding our
Connect Four game

2
00:00:07,945 --> 00:00:09,815
In the previous episodes,

3
00:00:09,815 --> 00:00:12,681
we covered the data structures that we
recommend

4
00:00:12,688 --> 00:00:15,287
you use to represent this game;

5
00:00:15,287 --> 00:00:17,706
how to represent the players' colors;

6
00:00:17,706 --> 00:00:20,195
and 2 basic features which are 

7
00:00:20,195 --> 00:00:23,655
the initialization of the grid
and its display.

8
00:00:23,655 --> 00:00:27,438
Now, let's look at the actual play.

9
00:00:27,438 --> 00:00:29,038
What do we need?

10
00:00:29,038 --> 00:00:33,955
For that, we must be able to ask
the user where he wants to play,

11
00:00:33,955 --> 00:00:36,391
as well as verify his play,

12
00:00:36,391 --> 00:00:38,797
validate both the answer

13
00:00:38,797 --> 00:00:40,633
and the data structures.

14
00:00:40,633 --> 00:00:44,132
That is, if the play is legal, make
sure that the structures are valid

15
00:00:44,132 --> 00:00:46,761
and put the disk into the grid.

16
00:00:46,761 --> 00:00:50,462
Then, we must ask the other player

17
00:00:50,462 --> 00:00:52,243
to play, and come back,

18
00:00:52,243 --> 00:00:54,975
and alternate between the two players.

19
00:00:54,975 --> 00:00:57,769
And we must decide if the game
has ended,

20
00:00:57,769 --> 00:01:01,173
either when one of the two players
has won, or when the grid is full.

21
00:01:01,173 --> 00:01:02,598
In this episode

22
00:01:02,598 --> 00:01:04,953
we will focus on the second point,

23
00:01:04,953 --> 00:01:08,329
that is, ask a user for a column

24
00:01:08,329 --> 00:01:11,099
and check if it is valid

25
00:01:11,099 --> 00:01:16,449
and then update the game
according to the play that was made.

26
00:01:17,374 --> 00:01:20,698
Now that we know what we want to do

27
00:01:20,698 --> 00:01:22,642
with the method that we will implement,

28
00:01:22,642 --> 00:01:27,346
let's give it a name. We will call
the method "joue" (TN: means "play").

29
00:01:27,358 --> 00:01:30,178
Now, let's look at how to program it.

30
00:01:30,178 --> 00:01:32,369
Let's start with its header.

31
00:01:32,369 --> 00:01:35,109
To have an idea of what to put in the
header, we should ask ourselves

32
00:01:35,109 --> 00:01:37,629
how the <i>joue</i> would be called
in the program.

33
00:01:37,630 --> 00:01:40,798
For example, when we want
to play in a certain

34
00:01:40,798 --> 00:01:44,456
column of the grid, for example number 3.

35
00:01:44,456 --> 00:01:47,283
Here, we are in the program,

36
00:01:47,283 --> 00:01:50,150
so the positions will correspond
to the positions in Java,

37
00:01:50,150 --> 00:01:53,601
where numbering begins with zero,

38
00:01:53,601 --> 00:01:57,492
and column number 3 would be...here.

39
00:01:58,083 --> 00:02:01,513
Then, we have to specify
the color of the player:

40
00:02:01,513 --> 00:02:05,023
is it a red player, or a yellow player?

41
00:02:05,023 --> 00:02:08,462
Here is a typical call that we could
make,

42
00:02:08,462 --> 00:02:11,792
which would give the following situation:

43
00:02:12,131 --> 00:02:15,647
in column 3, the player inserts a disk

44
00:02:15,647 --> 00:02:18,575
we would have a red disk which
would place itself here.

45
00:02:18,575 --> 00:02:21,285
After that, we would have
calls where, typically,

46
00:02:21,298 --> 00:02:24,488
we would have a disk, for example yellow,

47
00:02:24,488 --> 00:02:27,848
that would be placed in column
number 2,

48
00:02:27,848 --> 00:02:29,458
that is, the third column,

49
00:02:29,458 --> 00:02:34,295
and then the red player would play
again in the same column number 3,

50
00:02:34,295 --> 00:02:36,629
so the fourth column,

51
00:02:36,629 --> 00:02:39,003
which would result in this situation.

52
00:02:39,243 --> 00:02:41,719
There, now it is quite clear to us

53
00:02:41,719 --> 00:02:45,619
how to write the header of our
<i>joue</i> method.

54
00:02:45,619 --> 00:02:51,368
So <i>joue</i> will take as first
parameter the grid,

55
00:02:51,368 --> 00:02:54,898
which is, as we said, a two-dimensional
array of integers,

56
00:02:54,898 --> 00:02:58,638
then it will take a position which will
indicate the column,

57
00:02:58,638 --> 00:03:00,488
so another integer here,

58
00:03:00,488 --> 00:03:03,718
and finally we decided to represent
the player colors as integers,

59
00:03:03,718 --> 00:03:07,802
so the third argument here will
be the color.

60
00:03:07,802 --> 00:03:10,872
That's it for the header of the <i>joue</i> method.

61
00:03:10,875 --> 00:03:13,640
Now, concerning its return value,

62
00:03:13,640 --> 00:03:17,184
we will start with the keyword <i>static</i>

63
00:03:17,184 --> 00:03:19,524
But what is its return type?

64
00:03:19,806 --> 00:03:22,066
To answer this,

65
00:03:22,066 --> 00:03:26,941
note that we did not write "z = joue (...)"

66
00:03:26,941 --> 00:03:31,624
we simply made calls to <i>joue</i>
directly

67
00:03:31,624 --> 00:03:34,133
This means that <i>joue</i> returns nothing

68
00:03:34,133 --> 00:03:38,762
and its return type will thus be <i>void</i>.

69
00:03:38,762 --> 00:03:41,552
Now we have written its header,

70
00:03:41,552 --> 00:03:44,925
we can continue with the definition,

71
00:03:44,925 --> 00:03:47,198
with the body of the method.

72
00:03:47,198 --> 00:03:49,195
For that, let's start by asking ourselves

73
00:03:49,195 --> 00:03:51,192
what we really want to do

74
00:03:51,192 --> 00:03:53,191
if, for example, we have a valid play,

75
00:03:53,193 --> 00:03:57,500
where the player chooses column 3.
Let's imagine the general case,

76
00:03:57,500 --> 00:04:01,037
where we already had disks
in column 3

77
00:04:01,037 --> 00:04:05,717
and the player plays in column 3 again.

78
00:04:05,728 --> 00:04:07,936
What should we do?

79
00:04:07,936 --> 00:04:12,911
The disk should stop at the
first empty cell

80
00:04:12,911 --> 00:04:14,386
in that column.

81
00:04:14,386 --> 00:04:17,953
But, first from where? The first
from the bottom.

82
00:04:17,953 --> 00:04:20,497
The algorithm will thus search from the

83
00:04:20,497 --> 00:04:25,036
bottom for the first empty spot.

84
00:04:25,036 --> 00:04:29,186
Lines are numbered from zero

85
00:04:29,194 --> 00:04:33,400
up until (size of the grid) - 1:

86
00:04:33,400 --> 00:04:36,383
remember that an array is indexed
from zero

87
00:04:36,383 --> 00:04:38,206
to size-1.

88
00:04:38,206 --> 00:04:42,040
Let's start by declaring a variable

89
00:04:42,040 --> 00:04:45,250
which we will call, very creatively,
"ligne" (TN: means "line"),

90
00:04:45,250 --> 00:04:49,146
which will start at size of grid minus 1,

91
00:04:49,146 --> 00:04:55,562
and increment it one by one
until we find an empty spot.

92
00:04:55,562 --> 00:04:57,839
All we need to do now is write this.

93
00:04:57,839 --> 00:05:01,105
We start by writing a comment

94
00:05:01,105 --> 00:05:02,811
which explains what we want to do:

95
00:05:02,811 --> 00:05:04,806
we iterate over the column from the bottom,

96
00:05:04,806 --> 00:05:07,401
until we find an empty cell.

97
00:05:07,401 --> 00:05:10,258
For that, we will declare a counter variable,

98
00:05:10,263 --> 00:05:12,033
let's call it "ligne" (TN: means "row" or "line").

99
00:05:12,033 --> 00:05:16,127
We will initialize it to the last position
of the row array

100
00:05:16,127 --> 00:05:19,225
that is, "grille.length - 1".

101
00:05:19,225 --> 00:05:21,857
So it starts here,

102
00:05:21,857 --> 00:05:28,990
then we will go up as long as we
haven't found an empty cell,

103
00:05:28,990 --> 00:05:33,679
as long as the grid, at the position
of the row

104
00:05:33,679 --> 00:05:37,528
and column we selected, is not empty.

105
00:05:37,528 --> 00:05:41,452
For this purpose, we had defined
<i>VIDE</i>, a value defining an empty cell,

106
00:05:41,452 --> 00:05:44,426
which we can reuse here;

107
00:05:44,426 --> 00:05:47,130
as long as this column is not empty,

108
00:05:47,130 --> 00:05:51,223
we will go up one by one, which we
write as " -- ligne ".

109
00:05:51,232 --> 00:05:54,304
There, at this stage we have found an empty
cell,

110
00:05:54,304 --> 00:05:57,847
and we can fill it with the color we
received.

111
00:05:57,847 --> 00:06:00,985
For that, as usual, we start by writing
the comment,

112
00:06:00,985 --> 00:06:03,455
then, in Java, we simply write

113
00:06:03,455 --> 00:06:07,612
" grille[ligne][colonne] = couleur; ",
where couleur is the color we received.

114
00:06:08,227 --> 00:06:11,807
This ends our first version of the <i>joue</i>
method,

115
00:06:11,807 --> 00:06:14,838
and, as good programmers, we will
now test it.

116
00:06:14,838 --> 00:06:18,226
To do that, we write a <i>main</i> method

117
00:06:18,226 --> 00:06:20,534
which will test its workings.

118
00:06:20,534 --> 00:06:25,903
In the <i>main</i> method,

119
00:06:25,909 --> 00:06:28,016
we will declare a grid,

120
00:06:28,016 --> 00:06:30,576
a grid of 6 by 7.

121
00:06:30,576 --> 00:06:33,240
As you saw in a previous episode, we will

122
00:06:33,240 --> 00:06:36,075
initialize the grid. We can start
by diplaying it.

123
00:06:36,075 --> 00:06:39,034
Then, we directly test a play

124
00:06:39,034 --> 00:06:42,361
in the third column with the 
color red,

125
00:06:42,361 --> 00:06:46,414
then we display the grid, which
should give us

126
00:06:46,429 --> 00:06:49,543
an output reflecting the fact that we
have a red disk here,

127
00:06:49,543 --> 00:06:52,417
since, remember, the index we
receive here

128
00:06:52,417 --> 00:06:57,343
corresponds to Java numbering, which
begins with zero

129
00:06:57,813 --> 00:07:00,982
So, the output will be like this,

130
00:07:00,982 --> 00:07:06,221
then we continue by placing a
yellow disk

131
00:07:06,221 --> 00:07:10,579
in column number 2, that is, the
third column

132
00:07:10,579 --> 00:07:13,072
Then we continue to test

133
00:07:13,072 --> 00:07:16,085
by playing another red disk
and displaying the grid,

134
00:07:16,085 --> 00:07:18,838
by playing a red disk in the
fourth column,

135
00:07:18,838 --> 00:07:23,272
column number 3, which will result
in an output

136
00:07:23,272 --> 00:07:27,017
that will look like the grid here.

137
00:07:27,807 --> 00:07:32,107
Now, what happens if we continue
to play

138
00:07:32,107 --> 00:07:36,987
like this in column 3, if we add
disks,

139
00:07:36,987 --> 00:07:40,508
for example red disks, each time
in column 3,

140
00:07:40,508 --> 00:07:43,956
what will our <i>joue</i> method
do in this case?

141
00:07:44,262 --> 00:07:46,516
What happens when we play

142
00:07:46,516 --> 00:07:48,770
in a column that is already full?

143
00:07:48,770 --> 00:07:51,024
What will happen is that
we initialize

144
00:07:51,024 --> 00:07:56,184
our <i>ligne</i> variable as usual to the last
row of our array,

145
00:07:56,184 --> 00:08:01,253
then, while the row, at
the corresponding column,

146
00:08:01,253 --> 00:08:03,553
is not empty, i.e here, while

147
00:08:03,553 --> 00:08:07,369
the row is not equal to zero,

148
00:08:07,369 --> 00:08:10,375
this condition will be true, and
we will continue doing "-- ligne",

149
00:08:10,375 --> 00:08:13,116
and we will continue going up
to position zero.

150
00:08:13,116 --> 00:08:15,866
When <i>ligne</i> equals zero,
what happens?

151
00:08:15,874 --> 00:08:20,469
At that moment, this condition
will still be true,

152
00:08:20,469 --> 00:08:23,009
position zero is not empty,

153
00:08:23,009 --> 00:08:26,696
and we will do "-- ligne" again.

154
00:08:26,696 --> 00:08:29,584
This will make us go out of the
bounds

155
00:08:29,584 --> 00:08:32,094
of our array, outside of our game,

156
00:08:32,094 --> 00:08:34,267
which is at least a conception
error,

157
00:08:34,267 --> 00:08:38,037
since we have a loop which takes
us out of our array.

158
00:08:38,038 --> 00:08:40,653
So, we will have to correct this,

159
00:08:40,653 --> 00:08:44,146
and stop this <i>while</i> loop,

160
00:08:44,146 --> 00:08:47,387
as soon as we reach the end of
the array,

161
00:08:47,387 --> 00:08:50,232
that is, as soon as we reach index 0.

162
00:08:50,232 --> 00:08:52,242
Now we just need to write it.

163
00:08:52,242 --> 00:08:56,395
To do so, we will declare a boolean

164
00:08:56,395 --> 00:09:01,410
which will test whether we
have completely filled a column.

165
00:09:01,410 --> 00:09:04,090
We will call it "pleine" (TN: means "full").

166
00:09:04,090 --> 00:09:10,263
In the beginning, the column is
not supposed to be full,

167
00:09:10,263 --> 00:09:13,783
so we will declare this variable
as <i>false</i>.

168
00:09:13,789 --> 00:09:17,249
Then, in the loop which travels upwards

169
00:09:17,249 --> 00:09:19,770
to find an empty position,

170
00:09:19,770 --> 00:09:25,553
we will change the value of the
<i>pleine</i> boolean

171
00:09:25,553 --> 00:09:27,303
and switch it to true,

172
00:09:27,303 --> 00:09:30,182
as soon as we reach position 0.

173
00:09:30,182 --> 00:09:35,958
This is because if we reach position
zero in this loop,

174
00:09:35,958 --> 00:09:39,805
it means that position zero
was not empty,

175
00:09:39,805 --> 00:09:43,073
so position zero is not empty

176
00:09:43,073 --> 00:09:46,341
only if the rest of the column is also full

177
00:09:46,341 --> 00:09:49,611
So, let's continue writing this.
If the line reaches position zero,

178
00:09:49,631 --> 00:09:52,601
then we can say that the column
is full,

179
00:09:52,621 --> 00:09:54,551
so "pleine = true".

180
00:09:55,390 --> 00:09:58,227
In this case, we must stop
decrementing,

181
00:09:58,227 --> 00:10:00,314
we must not subtract 1 from the row,

182
00:10:00,314 --> 00:10:03,643
so we protect our "-- ligne"
instruction

183
00:10:03,643 --> 00:10:07,594
when the row is zero

184
00:10:07,594 --> 00:10:09,546
So we add an <i>else</i>

185
00:10:09,546 --> 00:10:12,748
which protects this decrementation,
this "-- ligne"

186
00:10:12,748 --> 00:10:16,541
from the condition, from the fact that
the row is empty.

187
00:10:17,481 --> 00:10:20,141
And now we'll correct our loop,

188
00:10:20,141 --> 00:10:22,827
by saying that we continue the loop

189
00:10:22,827 --> 00:10:25,840
as before, that is, we continue to
look for an empty cell,

190
00:10:25,840 --> 00:10:29,057
but only while the column is not full.

191
00:10:29,057 --> 00:10:31,525
This symbol, remember, means <i>not</i>,


192
00:10:31,525 --> 00:10:33,610
so while the column is not full,

193
00:10:33,610 --> 00:10:36,055
and we haven't found an empty cell,

194
00:10:36,055 --> 00:10:38,321
we continue as long as the
2 conditions are true.

195
00:10:38,321 --> 00:10:40,639
If it is not full

196
00:10:40,639 --> 00:10:44,216
and we haven't found an empty
cell, we go up.

197
00:10:44,216 --> 00:10:47,105
If one of the two conditions, either if
it is full,

198
00:10:47,105 --> 00:10:50,460
or we have found an empty cell,
are true,

199
00:10:50,460 --> 00:10:52,975
then the loop will stop.

200
00:10:52,985 --> 00:10:55,219
We can end by adding a pair of
parentheses here

201
00:10:55,219 --> 00:10:57,603
to make our code more legible.

202
00:10:57,603 --> 00:11:00,198
Finally, since we didn't do that
in the beginning, as we should have done,

203
00:11:00,198 --> 00:11:02,231
we will comment what we have just
coded.

204
00:11:02,231 --> 00:11:04,829
The idea is to iterate over the column from
the bottom

205
00:11:04,829 --> 00:11:07,979
until we find an empty cell, or until
we reach the top.

206
00:11:08,877 --> 00:11:13,760
Finally, we must not forget to correct the
end which is not valid anymore,

207
00:11:13,760 --> 00:11:17,400
since we cannot guarantee that it is
possible to play every time,

208
00:11:17,400 --> 00:11:20,000
since the disk will not be placed if
the column is full

209
00:11:20,000 --> 00:11:23,500
So we protect this with the
condition:

210
00:11:23,513 --> 00:11:26,143
if the column is not full, so,
"if (!pleine)".

211
00:11:26,189 --> 00:11:28,049
now, we can play,

212
00:11:28,049 --> 00:11:31,140
and we can also give an indication:

213
00:11:31,140 --> 00:11:33,454
we can add an instruction to our 
<i>joue</i> method

214
00:11:33,454 --> 00:11:37,337
so that it can indicate its status 
to the outside, for example by returning

215
00:11:37,337 --> 00:11:39,341
<i>true</i> to say "I was able to
play,

216
00:11:39,341 --> 00:11:41,335
the <i>joue</i> method was able to
do what we want".

217
00:11:41,335 --> 00:11:45,110
And conversely, it can return 
<i>false</i>, to say:

218
00:11:45,110 --> 00:11:47,830
"no, the column was full, the play
was not valid,

219
00:11:47,830 --> 00:11:52,456
I was not able to place this disk at
the right position".

220
00:11:53,061 --> 00:11:57,286
Finally, as usual, we comment
our code to explain,

221
00:11:57,286 --> 00:11:59,648
either to us, later, when we
go over the code again

222
00:11:59,648 --> 00:12:03,418
or to anyone else who would read it,
what our code does.

223
00:12:03,419 --> 00:12:06,712
Here, if we haven't reached the top,
"if (!pleine)",

224
00:12:06,712 --> 00:12:08,962
if we haven't reached the top
of the column, if it isn't full,

225
00:12:08,962 --> 00:12:11,940
then, we can play.

226
00:12:12,323 --> 00:12:15,472
Let's not forget, finally, to correct
our return type

227
00:12:15,472 --> 00:12:18,110
since we have now decide to return

228
00:12:18,110 --> 00:12:21,770
a boolean to indicate whether
the play was valid or not

229
00:12:21,770 --> 00:12:26,210
So we change the return type from
<i>void</i> to boolean

230
00:12:26,619 --> 00:12:28,653
There, now we are pretty sure

231
00:12:28,653 --> 00:12:31,187
that we have corrected our first version of
the <i>joue</i> method

232
00:12:31,187 --> 00:12:34,841
to have a robust version which accounts
for the case where the column is full,

233
00:12:34,841 --> 00:12:38,589
and now we must test this method
and for that,

234
00:12:38,589 --> 00:12:41,877
we will write a new <i>main</i> method,

235
00:12:41,877 --> 00:12:45,771
where we will specifically test
the case where we always play

236
00:12:45,771 --> 00:12:47,315
in the same column.

237
00:12:47,315 --> 00:12:50,959
As usual, we declare the grid,
we initialize it, we display it,

238
00:12:50,959 --> 00:12:53,803
and then here, we will write a loop
which will play

239
00:12:53,803 --> 00:12:56,785
10 times in the same column,

240
00:12:56,785 --> 00:12:59,537
in the fourth column here, i.e column
number 3.

241
00:12:59,537 --> 00:13:02,024
We write a loop that
repeats 10 times,

242
00:13:02,024 --> 00:13:05,351
playing in column 3.

243
00:13:05,351 --> 00:13:09,338
Note that now, since the <i>joue</i> function
returns a boolean

244
00:13:09,338 --> 00:13:11,548
indicating whether the play was
valide,

245
00:13:11,548 --> 00:13:14,930
we now call <i>joue</i> on the
right-hand side of an expression.

246
00:13:14,930 --> 00:13:18,299
So we fetch the return value by
writing "valide = joue(...)",

247
00:13:18,319 --> 00:13:21,947
and to see what is going on and
to test our program,

248
00:13:21,947 --> 00:13:24,647
in case the play was not valid,
we will display

249
00:13:24,652 --> 00:13:27,842
a message telling us that it
was not possible to play.

250
00:13:27,842 --> 00:13:31,711
In either case, we display the grid
to see what is happening.

251
00:13:32,090 --> 00:13:34,460
What will this give us?

252
00:13:34,461 --> 00:13:39,426
I copied the <i>main</i> here in the bottom,
and all of our <i>joue</i> method.

253
00:13:39,426 --> 00:13:44,888
Let's run the <i>main</i>. We start at
"i = 0" -- we don't use the <i>i</i>,

254
00:13:44,888 --> 00:13:48,322
it just serves to say that we are
executing the loop 10 times.

255
00:13:48,322 --> 00:13:51,416
So here we start at "i = 0",
and we always play

256
00:13:51,416 --> 00:13:53,690
in column 3 with red disks.

257
00:13:53,690 --> 00:13:56,768
This will start by placing a disk here,

258
00:13:56,768 --> 00:13:59,126
then another, and so on.

259
00:13:59,126 --> 00:14:02,564
All of these cases aren't
especially interesting,

260
00:14:02,575 --> 00:14:06,471
but what will happen when we
play the seventh disk?

261
00:14:06,471 --> 00:14:09,431
Once <i>i</i> has a value of 6, here,

262
00:14:09,431 --> 00:14:12,740
we want to play a seventh time

263
00:14:12,740 --> 00:14:17,708
in the same column, which is
already full,

264
00:14:17,708 --> 00:14:21,019
and so when <i>i</i> has a value
of 6, we will end up here again,

265
00:14:21,019 --> 00:14:26,523
with a value of 3 for the column and
the color red,

266
00:14:26,536 --> 00:14:30,556
and here, we will initialize the
row to

267
00:14:30,558 --> 00:14:33,618
the size of the grid minus 1.

268
00:14:33,618 --> 00:14:36,241
We will initialize the boolean to <i>false</i>,

269
00:14:36,241 --> 00:14:39,911
so of course, <i>pleine</i> is <i>true</i>, meaning

270
00:14:39,911 --> 00:14:44,515
that the grid, at the position [ligne][colonne],
is not empty,

271
00:14:44,515 --> 00:14:46,515
the row is not equal to zero,

272
00:14:46,515 --> 00:14:50,642
so here we jump into the <i>else</i> and
we decrement <i>ligne</i>,

273
00:14:50,642 --> 00:14:53,812
which will thus end up here (second row).

274
00:14:53,812 --> 00:14:57,203
Here, both conditions are verified,

275
00:14:57,203 --> 00:15:00,553
so <i>pleine</i> is still <i>true</i>,

276
00:15:00,556 --> 00:15:03,287
and we still have a grid here

277
00:15:03,287 --> 00:15:06,798
which is not empty, and so

278
00:15:06,798 --> 00:15:11,209
we will go up until we reach the
position <i>ligne==0</i>.

279
00:15:11,209 --> 00:15:14,569
So when <i>ligne == 0</i>,
what will happen?

280
00:15:14,569 --> 00:15:18,206
We always arrive here with
a true condition,

281
00:15:18,206 --> 00:15:22,489
and the grid at [0][column]
is not empty,

282
00:15:22,489 --> 00:15:26,383
we go in here, but this time
the <i>if</i> is true,

283
00:15:26,383 --> 00:15:31,000
the row is zero, and at that
moment we change

284
00:15:31,000 --> 00:15:35,757
the value of <i>pleine</i> to <i>true</i>.

285
00:15:35,757 --> 00:15:39,656
We are here, we are at the end of
the <i>if</i> bloc,

286
00:15:39,656 --> 00:15:41,822
we come back into our loop,

287
00:15:41,822 --> 00:15:45,387
but this time, the condition,
"!pleine",

288
00:15:45,387 --> 00:15:48,697
is false and so the 
<i>while</i> loop ends,

289
00:15:48,697 --> 00:15:51,597
and we exit the loop.

290
00:15:51,597 --> 00:15:54,670
Then we continue,
here, we reach this <i>if</i>,

291
00:15:54,670 --> 00:15:57,748
again, our <i>pleine</i> is not true,

292
00:15:57,748 --> 00:16:00,007
so this condition here is false.

293
00:16:00,007 --> 00:16:03,507
We jump into the <i>else</i>
and we return <i>false</i>.

294
00:16:03,782 --> 00:16:07,283
Which means that when we arrive 
here, when we have a value of 6,

295
00:16:07,283 --> 00:16:09,743
<i>valide</i> will be <i>false</i> and so,

296
00:16:09,743 --> 00:16:13,232
we will display the error message

297
00:16:13,232 --> 00:16:15,572
and this message will be displayed

298
00:16:15,575 --> 00:16:20,060
for <i>i</i> equals 6, 7, 8 and 9,
so the error message

299
00:16:20,060 --> 00:16:25,250
indicating it is impossible to play
will be displayed 4 times.

300
00:16:25,613 --> 00:16:27,915
That was the test which confirms

301
00:16:27,915 --> 00:16:30,217
that we cannot add disks to a column

302
00:16:30,217 --> 00:16:32,521
that was already full,
which is exactly what we wanted.

303
00:16:32,521 --> 00:16:35,303
There, I propose to end this episode here,

304
00:16:35,303 --> 00:16:37,773
and to discuss alternative ways of implementing

305
00:16:37,773 --> 00:16:40,243
the <i>joue</i> method

306
00:16:40,243 --> 00:16:42,715
in the next episodes.
