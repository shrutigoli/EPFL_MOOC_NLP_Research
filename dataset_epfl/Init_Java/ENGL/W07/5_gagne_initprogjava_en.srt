1
00:00:05,570 --> 00:00:08,280
In the previous video, you saw
how to write

2
00:00:08,280 --> 00:00:12,086
the main loop that allows the players
to play in turn.

3
00:00:12,086 --> 00:00:14,692
All that was missing was the
break condition,

4
00:00:14,692 --> 00:00:17,660
that is, what must be written here

5
00:00:18,080 --> 00:00:21,380
so that the loop stops when one of
the players has won,

6
00:00:21,380 --> 00:00:23,910
or when the grid is full.

7
00:00:23,910 --> 00:00:26,460
So for the moment, we'll concentrate
on the case

8
00:00:26,460 --> 00:00:28,440
where one of the two players
has won.

9
00:00:28,830 --> 00:00:31,560
I'll therefore introduce a new
method

10
00:00:31,560 --> 00:00:35,000
that I'll name 'estCeGagne' and
that I'll call like this:

11
00:00:35,070 --> 00:00:38,516
I'll put the return value of my
'estCeGagne' method

12
00:00:38,516 --> 00:00:39,472
in a variable

13
00:00:39,472 --> 00:00:42,210
that I'll name 'gagne', of
boolean type.

14
00:00:42,930 --> 00:00:46,710
To function, my 'estCeGagne' method needs
the grid


15
00:00:46,950 --> 00:00:49,300
and the color of the player that
has just played.

16
00:00:49,510 --> 00:00:51,990
I need to declare my 'gagne'
variable,

17
00:00:52,190 --> 00:00:55,070
and I need to declare it before
the loop,

18
00:00:55,220 --> 00:00:59,430
as I'm going to use it within the
loop's break condition.

19
00:01:00,285 --> 00:01:01,915
It's of boolean type

20
00:01:02,305 --> 00:01:06,385
and I can now use it to define
the break condition,

21
00:01:07,275 --> 00:01:11,125
and we'll repeat the loop until
the player hasn't won.

22
00:01:11,555 --> 00:01:14,485
We have to write this 'estCeGagne'
method,

23
00:01:14,485 --> 00:01:18,075
which is probably the most
difficult part of our program.

24
00:01:18,195 --> 00:01:21,245
There are many ways of writing
this 'estCeGagne' method,

25
00:01:21,455 --> 00:01:23,885
and we propose the following
one.

26
00:01:24,555 --> 00:01:26,131
We'll navigate through the grid

27
00:01:26,131 --> 00:01:29,327
line by line and column by column

28
00:01:29,677 --> 00:01:34,445
until we find a chip of the color
of the player that has just played.

29
00:01:34,535 --> 00:01:38,125
Let's say for example that the red
player has just played,

30
00:01:38,525 --> 00:01:40,965
and that we find this chip.

31
00:01:41,095 --> 00:01:45,163
We'll start from this chip and navigate through the grid

32
00:01:45,163 --> 00:01:46,811
in several directions,

33
00:01:47,741 --> 00:01:51,049
horizontally, vertically, and
diagonally,

34
00:01:51,639 --> 00:01:54,829
to count how many chips of the
same color

35
00:01:54,829 --> 00:01:58,009
there are starting from this chip.

36
00:01:58,009 --> 00:02:00,825
For example, if we consider
this direction,

37
00:02:01,245 --> 00:02:05,811
we can count one, two, three,
four red chips,

38
00:02:06,131 --> 00:02:08,499
we therefore know that the
player has won.

39
00:02:08,499 --> 00:02:11,225
Instead, if we navigated through
the whole grid

40
00:02:11,225 --> 00:02:13,761
and we've always counted less
than four chips,

41
00:02:14,021 --> 00:02:16,369
we know that the player hasn't
won.

42
00:02:16,469 --> 00:02:18,419
We can note that we
don't need

43
00:02:18,419 --> 00:02:20,209
to consider all the directions

44
00:02:20,209 --> 00:02:23,409
and in fact we'll content ourselves
to count the chips

45
00:02:23,409 --> 00:02:25,239
in four directions only,

46
00:02:25,839 --> 00:02:30,499
and we'll choose for example
upwards to the right,

47
00:02:31,089 --> 00:02:34,999
to the right, downwards to the right,
and straigth downwards.

48
00:02:34,999 --> 00:02:39,249
So why is it sufficient to consider
these four directions?

49
00:02:39,719 --> 00:02:42,105
I said that we'll browse the
grid

50
00:02:42,105 --> 00:02:45,401
line by line and column by
column.

51
00:02:45,751 --> 00:02:47,089
Let's suppose once again

52
00:02:47,139 --> 00:02:49,129
that the red player has
just played.

53
00:02:49,459 --> 00:02:52,359
The first chip we'll find is
this one.

54
00:02:52,859 --> 00:02:57,189
We'll first of all count the chips in
this directions,

55
00:02:57,769 --> 00:03:00,455
we'll count a single chip,
this one.

56
00:03:01,515 --> 00:03:05,181
The same goes for this direction,
and this direction,

57
00:03:05,181 --> 00:03:07,289
there's only one chip in these
three directions.

58
00:03:07,469 --> 00:03:10,722
In this direction, there are
two chips.

59
00:03:10,972 --> 00:03:12,575
This isn't sufficient to
win,

60
00:03:12,905 --> 00:03:15,849
so we'll continue navigating
the grid.

61
00:03:16,592 --> 00:03:20,432
The next red chip that we'll find
is this one.

62
00:03:20,997 --> 00:03:23,700
In this direction and this
direction

63
00:03:23,700 --> 00:03:26,093
we'll count only two chips,

64
00:03:26,093 --> 00:03:27,537
which isn't enough to win.

65
00:03:27,847 --> 00:03:30,551
In this direction and this
direction,

66
00:03:30,551 --> 00:03:32,237
we'll count only one chip,

67
00:03:32,287 --> 00:03:34,197
which still isn't enough
to win.

68
00:03:34,337 --> 00:03:39,957
We'll continue navigating the gris
until we reach this chip;

69
00:03:40,307 --> 00:03:43,413
we'll continue counting the chips
in this direction

70
00:03:43,673 --> 00:03:47,829
and this time we'll count one,
two,three, four chips

71
00:03:47,999 --> 00:03:50,287
and we know that the player
has won.

72
00:03:51,263 --> 00:03:55,033
To prove that the red player has just
aligned these four chips,

73
00:03:55,533 --> 00:04:00,673
we can either start from this chip here
and go in this direction,

74
00:04:01,023 --> 00:04:05,283
or start from this chip here and
go in this direction.

75
00:04:05,633 --> 00:04:09,369
Therefore, we aren't obliged to
consider these two directions,

76
00:04:09,809 --> 00:04:11,745
we can content ourselves of
only one,

77
00:04:12,105 --> 00:04:15,013
and the same goes for the six
other directions.

78
00:04:15,347 --> 00:04:17,647
We'll only look at this
direction

79
00:04:18,057 --> 00:04:19,807
and not this direction.

80
00:04:20,257 --> 00:04:25,387
In this direction and not this one,
in this direction and not this one.

81
00:04:25,955 --> 00:04:30,035
We are left with four directions
to consider.

82
00:04:30,455 --> 00:04:33,295
We now have to code this
strategy

83
00:04:33,675 --> 00:04:35,765
by writing the 'estCeGagne' method.

84
00:04:35,895 --> 00:04:38,795
Let me remind you that we call
the 'estCeGagne' method

85
00:04:39,065 --> 00:04:41,115
by the following way,
for example.

86
00:04:41,435 --> 00:04:44,895
We put the return value of the
'estCeGagne' method

87
00:04:45,035 --> 00:04:47,048
in a variable of boolean
type.

88
00:04:47,348 --> 00:04:50,311
And the method awaits a grid

89
00:04:50,541 --> 00:04:53,735
and the color of the player that has
just played as parameters.

90
00:04:54,105 --> 00:04:58,605
The method's header will simply
be the following.

91
00:05:00,005 --> 00:05:03,731
Other strategies consist of navigating
through the grid,

92
00:05:04,331 --> 00:05:07,117
which we'll do with the help
of these two for-loops.

93
00:05:08,017 --> 00:05:10,095
And as we need the chip's
coordinates,

94
00:05:10,345 --> 00:05:14,635
we'll use two standard for-loops
like this.

95
00:05:15,506 --> 00:05:20,086
The ligne (= line) and colonne (= column)
variables will contain the disc's coordinates

96
00:05:20,086 --> 00:05:23,666
from which we'll count the number
of aligned discs.

97
00:05:23,996 --> 00:05:26,186
To simplify a bit the code,

98
00:05:26,466 --> 00:05:32,716
I'll introduce a local variable that
I'll name 'couleurCase'

99
00:05:33,116 --> 00:05:38,796
to contain this chip's color, which
is grille[ligne] [colonne].

100
00:05:41,735 --> 00:05:46,445
If the cell's color is the same as
the player that has just played,

101
00:05:47,265 --> 00:05:49,455
then I must count the chips

102
00:05:49,455 --> 00:05:51,505
in the four directions in which
we are interested.

103
00:05:51,745 --> 00:05:53,835
So, as it's a bit difficult to count
the chips,

104
00:05:54,045 --> 00:05:57,635
well I'll introduce a method that
I'll simply name 'compte' (= count)

105
00:05:57,865 --> 00:05:59,435
and that will do this task.

106
00:05:59,905 --> 00:06:02,445
What arguments does the 'compte'
method need?

107
00:06:02,775 --> 00:06:07,145
Well first of all, of course, of the chip,
the coordinates of the disc

108
00:06:07,175 --> 00:06:10,705
from which we want to count the
aligned chips.

109
00:06:10,855 --> 00:06:14,045
These coordinates are contained in the
'ligne' and colonne' variables.

110
00:06:15,315 --> 00:06:20,055
And we need the direction in which
we want to count the aligned chips.

111
00:06:20,485 --> 00:06:23,125
So how can we define this
direction?

112
00:06:23,315 --> 00:06:25,795
Let's suppose for example that I want
to count the chips

113
00:06:25,975 --> 00:06:29,256
diagonally to the
top-right.

114
00:06:29,556 --> 00:06:33,147
In this case, to go from one
cell to another,

115
00:06:34,427 --> 00:06:40,160
we'll have to subtract one from the
line and add one to the column.

116
00:06:40,630 --> 00:06:43,325
Therefore, I'll use these two
values,

117
00:06:43,395 --> 00:06:45,680
this minus one and this
plus one,

118
00:06:46,370 --> 00:06:48,505
as the arguments for my
'compte' method,

119
00:06:49,005 --> 00:06:52,082
to say that I want to go
to the top-right.

120
00:06:53,298 --> 00:06:57,918
I'll send to my 'compte' method
the number of aligned chips

121
00:06:58,038 --> 00:07:01,518
and if this number of chips is greater
than or equal to four,

122
00:07:01,568 --> 00:07:03,488
then I know that the player
has won.

123
00:07:03,578 --> 00:07:08,558
So why greater than or equal to four,
and not simply equal to four?

124
00:07:08,558 --> 00:07:12,603
Well, that's simply because one can
win by aligning more than four discs.

125
00:07:13,423 --> 00:07:16,493
So of course, I need to consider
the three other directions

126
00:07:16,793 --> 00:07:18,953
and that will be written like this.

127
00:07:19,663 --> 00:07:24,333
To count the chips horizontally, I won't
change the line,

128
00:07:24,713 --> 00:07:27,983
and that's why I use zero as
argument here.

129
00:07:28,183 --> 00:07:32,613
But the column will change, and I'll
go to the next column,

130
00:07:32,613 --> 00:07:35,783
that's why I'll use the value plus
one as last argument.

131
00:07:35,963 --> 00:07:41,903
Then, to count the discs diagonally
to the bottom-right,

132
00:07:42,463 --> 00:07:48,509
to go from one cell to the other,
I'll add one to the line,

133
00:07:48,989 --> 00:07:51,195
that's why I use the value
plus one here,

134
00:07:51,545 --> 00:07:55,373
and I also add one to the column,

135
00:07:55,563 --> 00:07:58,333
and that's why I use the
value plus one here.

136
00:07:59,033 --> 00:08:01,523
Finally, there remains a
last direction.

137
00:08:02,761 --> 00:08:05,897
To count the chips vertically
downwards,

138
00:08:06,107 --> 00:08:08,743
I'll go from one cell to the other,

139
00:08:09,563 --> 00:08:13,399
By adding one to the line, that's
why I have the value plus one here,

140
00:08:13,705 --> 00:08:19,061
But the column won't change and I
use the value zero here.

141
00:08:20,078 --> 00:08:25,451
If one of these four conditions is true,
then I know that the player has won.

142
00:08:25,614 --> 00:08:28,888
It is sufficient that one of these
four conditions is true,

143
00:08:29,108 --> 00:08:31,528
that's why I use an 'or' here.

144
00:08:32,068 --> 00:08:33,448
And in this case,

145
00:08:33,448 --> 00:08:35,768
I'll return everything to my method,

146
00:08:36,828 --> 00:08:40,638
I'll close the curly braces I had
previously opened,

147
00:08:41,128 --> 00:08:44,724
and if I get to this point of my
method,

148
00:08:45,284 --> 00:08:48,020
it's because I've never passed
by here,

149
00:08:49,320 --> 00:08:53,368
that is, I never found at least
four aligned chips,

150
00:08:53,538 --> 00:08:56,638
and I know that in this case, the
player hasn't won yet.

151
00:08:56,758 --> 00:09:00,244
So I'll return 'false' from my
method,

152
00:09:00,734 --> 00:09:03,770
and as a good programmer, I'll
add comments

153
00:09:04,280 --> 00:09:09,178
to explain the difficult points
of my method.

154
00:09:12,130 --> 00:09:14,800
Of course, we still need to
write the 'compte' method.

155
00:09:14,900 --> 00:09:17,423
Let me remind you that we'll call
the 'compte' method

156
00:09:17,423 --> 00:09:19,486
like this, for example.

157
00:09:20,126 --> 00:09:23,630
That is, the method will return
a number of discs,

158
00:09:23,760 --> 00:09:25,890
that's why I'll use the 'int' type

159
00:09:26,150 --> 00:09:30,660
to define the type of the result
value of the method.

160
00:09:30,970 --> 00:09:33,516
The first parameter is the grid,

161
00:09:34,046 --> 00:09:37,312
the two next parameters are the line
and the column

162
00:09:37,312 --> 00:09:40,011
of the disc from which we'll count.

163
00:09:40,341 --> 00:09:42,400
They are both of 'int' type,

164
00:09:42,680 --> 00:09:48,330
and the two last parameters are the
direction for the line and the column

165
00:09:48,770 --> 00:09:51,920
that I'll call 'dirLigne' and 'dirColonne',

166
00:09:52,030 --> 00:09:54,000
as they are of the same nature,

167
00:09:54,100 --> 00:09:57,990
and one refers to the line and
the other to the column. 

168
00:09:58,440 --> 00:10:02,160
I'll declare a 'compteur' variable
initialized with zero

169
00:10:02,360 --> 00:10:04,540
to count the number of aligned
discs.

170
00:10:05,140 --> 00:10:07,350
What must the 'compte' method
do exactly?

171
00:10:07,600 --> 00:10:13,433
Well, it must start from the line
'ligneDepart colonneDepart',

172
00:10:14,463 --> 00:10:18,396
and must browse the grid in the
given direction

173
00:10:18,736 --> 00:10:21,380
starting from 'ligneDepart' 'colonneDepart'

174
00:10:21,380 --> 00:10:24,460
while we find chips of the same
color as

175
00:10:24,460 --> 00:10:27,430
the chip at 'ligneDepart'
'colonneDepart'.

176
00:10:27,790 --> 00:10:29,230
So how will we achieve this?

177
00:10:29,390 --> 00:10:33,760
Well, we'll use two variables that
I'll name 'ligne' and 'colonne',

178
00:10:34,280 --> 00:10:38,990
that we'll respectively initialize with
'ligneDepart' and 'colonneDepart'.

179
00:10:39,850 --> 00:10:43,370
And to go from one cell to the other,
at each loop cycle,

180
00:10:43,870 --> 00:10:48,850
we'll add the value of 'dirLigne'
to 'ligne',

181
00:10:49,140 --> 00:10:51,790
and the value of 'dirColonne'
to 'colonne'.

182
00:10:52,735 --> 00:10:54,408
As we'll browse the grid

183
00:10:54,818 --> 00:10:57,251
while we find discs of the
same color as the disc

184
00:10:57,251 --> 00:10:58,995
that is at 'ligneDepart colonneDepart',

185
00:10:59,075 --> 00:11:01,175
we'll use a while-loop.

186
00:11:01,295 --> 00:11:03,511
During each cycle of the
while-loop,

187
00:11:03,731 --> 00:11:07,067
we'll have found a new chip of
the same color

188
00:11:07,187 --> 00:11:09,705
and we'll increment the 'compteur'
variable.

189
00:11:10,295 --> 00:11:11,735
How will we write all this?

190
00:11:11,735 --> 00:11:16,335
Well, we'll begin by declaring the
'ligne' and 'colonne' variables,

191
00:11:17,285 --> 00:11:20,878
initialized with 'ligneDepart' and
'colonneDepart',

192
00:11:21,488 --> 00:11:23,171
we'll therefore use a while-loop

193
00:11:23,171 --> 00:11:27,055
with a break condition that depends on the
color of the disc at position 'ligne colonne',

194
00:11:27,535 --> 00:11:29,905
and we'll continue while the color
of this disc

195
00:11:30,205 --> 00:11:34,325
is the same as the color of the disc at
the position 'ligneDepart colonneDepart'.

196
00:11:34,545 --> 00:11:37,548
During each loop cycle,we'll increment
the 'compteur' variable,

197
00:11:37,548 --> 00:11:41,005
as we've found a new disc of the
same color as the first,

198
00:11:41,475 --> 00:11:46,525
and we'll add 'dirLigne' and 'dirColonne'
to 'ligne' and 'colonne'.

199
00:11:46,949 --> 00:11:50,329
By the way, note that I added
spaces here and here

200
00:11:50,529 --> 00:11:53,809
to align the equal and plus
characters on these two lines,

201
00:11:54,319 --> 00:11:56,189
that makes the code more
readable,

202
00:11:56,189 --> 00:12:01,099
it highlights the fact that the variables 'ligne'
and 'colonne' are of the same nature.

203
00:12:01,649 --> 00:12:04,462
When we exit the loop, it means
that we've found a disc

204
00:12:04,462 --> 00:12:05,735
that wasn't of the same
color,

205
00:12:05,925 --> 00:12:09,649
and we can return the value contained
in the 'compteur' variable.

206
00:12:09,969 --> 00:12:12,489
Except that our method isn't
totally correct,

207
00:12:12,559 --> 00:12:14,209
and maybe you see why.

208
00:12:14,979 --> 00:12:16,615
As with the 'joue' method,

209
00:12:16,705 --> 00:12:20,031
we could leave the grid,

210
00:12:20,031 --> 00:12:23,099
that is, the 'ligne' or 'colonne'
variables

211
00:12:23,309 --> 00:12:25,719
can take illicit values.

212
00:12:26,039 --> 00:12:29,169
So, to correct this, I'll add
a few tests

213
00:12:29,169 --> 00:12:31,529
to the while-loop condition.

214
00:12:31,939 --> 00:12:35,719
I'll verify that the line is indeed
greater than or equal to zero,

215
00:12:36,169 --> 00:12:39,739
and that it is less than the
number of lines,

216
00:12:40,759 --> 00:12:44,309
and I'll add the same tests for
the column.

217
00:12:44,689 --> 00:12:49,109
Finally, I'll add a comment

218
00:12:49,719 --> 00:12:51,899
to describe what the loop does.

219
00:12:53,726 --> 00:12:58,418
To conclude, I'll come back to my
'estCeGagne' method to note that

220
00:12:58,418 --> 00:13:03,149
if the starting cell's line has the
value zero, one, or two,

221
00:13:03,569 --> 00:13:07,416
it isn't necessary to look in this
direction, for example,

222
00:13:08,046 --> 00:13:09,139
as we already know

223
00:13:09,139 --> 00:13:12,532
that the player can't align
at least four discs.

224
00:13:12,842 --> 00:13:16,096
If we start from the line two,
we know

225
00:13:16,096 --> 00:13:19,256
that the player can align a
maximum of three discs.

226
00:13:19,906 --> 00:13:23,262
The same goes when we start from
the right-side of the grid.

227
00:13:23,572 --> 00:13:26,178
It isn't necessary to look in
this direction,

228
00:13:26,178 --> 00:13:29,696
and the same goes when we start form
the bottom of the grid,

229
00:13:29,946 --> 00:13:32,656
it isn't necessary to look
to the bottom.

230
00:13:33,362 --> 00:13:37,092
Our 'estCeGagne' method does
more than necessary,

231
00:13:37,362 --> 00:13:42,512
so I'll modify the code to avoid
counting the number of discs

232
00:13:42,512 --> 00:13:46,102
when we are sure that there won't
be at least four aligned discs.

233
00:13:46,362 --> 00:13:48,752
So, that will be written like this.

234
00:13:49,162 --> 00:13:53,362
When we consider the direction
diagonally to the top-right,

235
00:13:53,672 --> 00:13:57,222
to be able to align at least four
discs,

236
00:13:58,192 --> 00:14:01,068
the line must be greater than or
equal to three.

237
00:14:01,498 --> 00:14:04,124
And the column mustn't be
too big,

238
00:14:04,364 --> 00:14:06,202
and, I'll let you verify when
you do it,

239
00:14:06,202 --> 00:14:10,862
the column must be less than the
number of columns minus four.

240
00:14:11,023 --> 00:14:14,559
When we look to the right
horizontally,

241
00:14:14,979 --> 00:14:18,465
it is sufficient that the column
isn't great enough

242
00:14:18,935 --> 00:14:23,933
and that it is, similarly, less than 
the number of columns minus four.

243
00:14:24,463 --> 00:14:27,903
When we look diagonally to
the bottom-right,

244
00:14:28,283 --> 00:14:31,773
the line mustn't be too big, and as
with the column,

245
00:14:32,073 --> 00:14:35,063
the line must be less than the
number of lines minus four,

246
00:14:35,463 --> 00:14:37,173
and the column mustn't be too big.

247
00:14:37,463 --> 00:14:40,393
And when we count the number of
discs downwards,

248
00:14:40,753 --> 00:14:44,753
it is sufficient that the line is less
than the number of lines minus four.

249
00:14:45,685 --> 00:14:48,685
Now, you can observe that I've
introduced a few repetitions,

250
00:14:48,685 --> 00:14:54,215
as this expression appears
here and here,

251
00:14:55,255 --> 00:14:59,065
and this expression also
appears twice.

252
00:14:59,863 --> 00:15:05,273
I'll therefore introduce constants to
replace these repetitions,

253
00:15:05,793 --> 00:15:10,983
constants that I'll logically name
'ligneMax' and 'colonneMax',

254
00:15:11,563 --> 00:15:15,563
and which will avoid the repetitions.

255
00:15:18,645 --> 00:15:21,221
Voilà, this time was really
the final version

256
00:15:21,221 --> 00:15:24,077
of the 'estCeGagne' and 'compte'
methods.

257
00:15:24,587 --> 00:15:28,595
We still have to handle the case
where the grid is full

258
00:15:28,595 --> 00:15:30,665
without any of the players having
won,

259
00:15:31,005 --> 00:15:33,555
and that's what we'll see in
the last video.
