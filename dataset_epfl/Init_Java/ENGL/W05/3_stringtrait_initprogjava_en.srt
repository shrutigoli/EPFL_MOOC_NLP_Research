1
00:00:05,233 --> 00:00:08,118
In this video we'll conclude on
sequences of characters

2
00:00:08,516 --> 00:00:11,256
and see other computations that are
possible on sequences of characters.

3
00:00:11,797 --> 00:00:14,212
We can individually access the
characters

4
00:00:14,212 --> 00:00:17,097
of a sequence of characters.

5
00:00:17,097 --> 00:00:23,582
For example, the instruction line chaine.charAt(index),
with  index in argument,

6
00:00:23,582 --> 00:00:30,338
will return the character of index 'index'
of the sequence 'chaine'.

7
00:00:31,320 --> 00:00:37,798
The instruction line chaine.indexOf
with a character in argument

8
00:00:38,085 --> 00:00:44,815
returns the position of the first occurrence
of the character 'caractÃ¨re',

9
00:00:45,134 --> 00:00:49,530
that is the character passed as an
argument  in 'chaine'

10
00:00:51,530 --> 00:00:56,652
and will return -1 if 'caractere'
isn't in 'chaine'.

11
00:00:58,230 --> 00:01:00,178
We also have the function
length,

12
00:01:00,678 --> 00:01:07,833
which means that we can write
chaine1.length() with parenthesis

13
00:01:08,105 --> 00:01:10,317
and it will return the length of
the sequence,

14
00:01:10,585 --> 00:01:12,740
the number of characters in the
sequence.

15
00:01:13,065 --> 00:01:14,484
Careful, careful!

16
00:01:15,161 --> 00:01:19,680
There's a pair of parenthesis.

17
00:01:20,405 --> 00:01:23,887
So it's different than arrays,
in this case.

18
00:01:24,087 --> 00:01:29,867
For example, here I declare
a variable s1

19
00:01:29,867 --> 00:01:35,647
that will reference a sequence of
characters 'abcmbx'.

20
00:01:35,647 --> 00:01:41,428
When I execute this declaration and
initialization of the variable 'longueur',

21
00:01:41,885 --> 00:01:48,790
the variable 'longueur' will contain
the number of characters of s1,

22
00:01:48,966 --> 00:01:51,235
that is 6.

23
00:01:51,790 --> 00:02:01,236
This declaration declare a variable c1
that will be initialized

24
00:02:01,573 --> 00:02:09,222
to the character of index 0 of the
sequence s1, which is this 'a'.

25
00:02:10,107 --> 00:02:13,092
So c1 will contain the character 'a'.

26
00:02:13,369 --> 00:02:20,514
In this declaration of c2 I put the
character of s1

27
00:02:20,514 --> 00:02:24,736
that's at the index 'longueur - 1'.

28
00:02:24,736 --> 00:02:28,638
'longueur' contains 6, so 'longueur - 1' is 5.

29
00:02:29,601 --> 00:02:38,608
And the character of index 5 is
0, 1, 2, 3, 4, 5.

30
00:02:39,123 --> 00:02:42,309
That's the last character of the
sequence s1.

31
00:02:45,250 --> 00:02:54,111
And finally, the declaration of the
variable i will put in i

32
00:02:55,341 --> 00:03:01,668
the index of the character b starting
from the left in the sequence s1.

33
00:03:01,791 --> 00:03:03,970
So s1 is this sequence.

34
00:03:04,530 --> 00:03:08,140
'b', the first 'b' is at the index 1.

35
00:03:09,569 --> 00:03:11,927
And therefore i will be initialized
with the value 1.

36
00:03:12,296 --> 00:03:15,252
So be careful, the characters are
numbered

37
00:03:15,512 --> 00:03:17,130
like the elements of an array,

38
00:03:17,302 --> 00:03:19,801
they begin at zero.

39
00:03:20,351 --> 00:03:23,259
At this point, we can do a quiz.

40
00:03:24,241 --> 00:03:27,497
In your opinion, what does this code
print when we execute it?

41
00:03:27,932 --> 00:03:31,592
Take your time to execute the code
step by step.

42
00:03:32,091 --> 00:03:33,695
I'll let you think about it.

43
00:03:35,341 --> 00:03:42,341
So the variable 'essai' is initialized
with the sequence "essai".

44
00:03:44,655 --> 00:03:49,165
The variable 'test' is initialized
with the empty sequence.

45
00:03:49,723 --> 00:03:56,117
We enter this for-loop, where i
will vary from 1 to 3.

46
00:03:56,953 --> 00:04:02,609
During the first round of the loop,
we'll execute this assignment.

47
00:04:03,198 --> 00:04:09,694
For the moment test is the empty sequence
and we concatenate with it the character

48
00:04:10,027 --> 00:04:15,499
that is in 'essai' at the index of the
value of this expression.

49
00:04:15,784 --> 00:04:20,546
i has the value 1, so 6 minus 2
times i is 4.

50
00:04:21,173 --> 00:04:25,776
We'll therefore consider the character
of index 4 of 'essai'.

51
00:04:27,080 --> 00:04:33,783
That is 0, 1, 2, 3, 4, all have
the value 'i'.

52
00:04:34,245 --> 00:04:39,056
We'll concatenate this character 'i' with the
empty sequence and obtain i

53
00:04:39,056 --> 00:04:41,028
and put the result in 'test'.

54
00:04:41,753 --> 00:04:46,323
'test' will now point to the sequence "i".

55
00:04:47,162 --> 00:04:55,070
Let's then move on to this instruction line, that
will concatenate the character of index i

56
00:04:55,377 --> 00:04:56,777
of the sequence of characters
'essai'.

57
00:04:57,722 --> 00:05:03,275
i has the value 1, the character is
the character 's'.

58
00:05:03,582 --> 00:05:08,802
We'll concatenate it with the sequence of
characters contained in 'test',

59
00:05:09,083 --> 00:05:12,798
which is simply "i".

60
00:05:13,556 --> 00:05:18,446
The result of the concatenation is the
sequence "si",

61
00:05:18,716 --> 00:05:21,169
we'll put "si" here.

62
00:05:23,272 --> 00:05:25,959
We then come back to the start
of the for-loop.

63
00:05:26,789 --> 00:05:28,850
i now has the value 2.

64
00:05:29,013 --> 00:05:32,545
We execute this assignment.

65
00:05:33,625 --> 00:05:36,927
'test' now has the value "si".

66
00:05:37,146 --> 00:05:42,328
This character is the character
of index 2 in 'essai'.

67
00:05:42,778 --> 00:05:47,735
The character of index 2 is
(zero, one, two).

68
00:05:47,977 --> 00:05:49,712
It's an 's',

69
00:05:50,244 --> 00:05:53,444
that we'll concatenate with the
sequence "si"

70
00:05:53,943 --> 00:06:00,862
and we'll obtain "sis", that we'll
assign to the variable 'test'

71
00:06:00,862 --> 00:06:03,397
to obtain this.

72
00:06:04,227 --> 00:06:07,213
Let's move on to the second
assignment.

73
00:06:08,134 --> 00:06:13,949
essai.charAt(i). As i has the value 2,
it's this 's'

74
00:06:14,348 --> 00:06:18,442
that we'll concatenate with the sequence
that corresponds to 'test'.

75
00:06:18,601 --> 00:06:24,125
That is "sis", and we'll obtain
"ssis"

76
00:06:25,283 --> 00:06:27,961
which we'll put in 'test'.

77
00:06:28,976 --> 00:06:33,948
We'll now return a last time here,
with i that has the value 3.

78
00:06:34,220 --> 00:06:40,511
'test' has the value "ssis" and we'll
concatenate this character,

79
00:06:40,511 --> 00:06:45,704
so the character of index 0, in the
sequence 'essai',

80
00:06:45,788 --> 00:06:48,221
that's this 'e' here.

81
00:06:50,198 --> 00:06:53,156
We'll put the result in the
sequence 'test',

82
00:06:54,568 --> 00:06:58,966
so we'll put "ssise" in 'test'.

83
00:06:59,945 --> 00:07:01,990
We now move on to the
assignment.

84
00:07:02,446 --> 00:07:08,320
essai.charAt(i) : i has the value 3,

85
00:07:08,885 --> 00:07:11,932
it's the character of index 3
of 'essai',

86
00:07:12,464 --> 00:07:15,804
that's 0, 1, 2, 3,

87
00:07:16,016 --> 00:07:17,138
so 'a'.

88
00:07:17,526 --> 00:07:22,973
We'll concatenate that with what
'test' contains, that is "ssise",

89
00:07:25,091 --> 00:07:28,069
and get the sequence of characters
"assise".

90
00:07:29,427 --> 00:07:34,766
'test' will now therefore point
to the sequence "assise".

91
00:07:36,645 --> 00:07:38,697
We exit the loop, as i has
the value 3.

92
00:07:39,250 --> 00:07:43,931
We get to this print instruction that will
simply print assise.

93
00:07:46,462 --> 00:07:49,708
Just a word about inputs/outputs
with characters.

94
00:07:49,888 --> 00:07:55,552
It turns out that there doesn't exist a
function nextChar() in the Scanner class.

95
00:07:55,685 --> 00:07:58,498
To get a character

96
00:07:58,699 --> 00:08:00,240
using this class,

97
00:08:00,469 --> 00:08:06,438
you have to first declare a Scanner,
as usual.

98
00:08:06,898 --> 00:08:12,208
Then you have to read a line
by using the function nextLine()

99
00:08:12,661 --> 00:08:16,409
applied to the instance of
Scanner type

100
00:08:16,826 --> 00:08:20,238
and put the result in a variable of
String type that I named s.

101
00:08:20,495 --> 00:08:24,941
Then take the first character of this
sequence s

102
00:08:25,223 --> 00:08:30,892
with the function charAt(), passing it
the index 0 as an argument.

103
00:08:31,188 --> 00:08:34,815
So here in 'c', we'll obtain the first
character

104
00:08:34,980 --> 00:08:39,616
that the user will have input
at this moment.

105
00:08:39,616 --> 00:08:44,729
A String literal, entered by the user
during a read instruction line

106
00:08:44,928 --> 00:08:49,583
for example with a Scanner, doesn't
belong to the String literal pool.

107
00:08:50,161 --> 00:08:52,825
For it to be part of it, you have to
explicitly put it in,

108
00:08:53,072 --> 00:08:55,270
with the help of the <i>intern</i> function.

109
00:08:56,692 --> 00:09:01,768
Let's consider this example where I
begin by declaring a Scanner s

110
00:09:01,988 --> 00:09:06,393
that will allow me to read what the
user inputs on the keyboard.

111
00:09:06,393 --> 00:09:10,945
Here I declare a variable 'response'
of type sequence of characters

112
00:09:11,379 --> 00:09:14,008
and I have a do-while loop

113
00:09:14,314 --> 00:09:20,776
that will stop when the user enters
oui (= yes) as an answer.

114
00:09:21,068 --> 00:09:24,984
This 'oui' is a sequence of
characters

115
00:09:24,984 --> 00:09:27,260
that's in the String literal pool.

116
00:09:28,727 --> 00:09:30,732
Now let's continue with the code.

117
00:09:31,161 --> 00:09:37,168
Let's suppose that I read what the user
inputs on the keyboard,

118
00:09:37,780 --> 00:09:40,857
and that I put the result in the
variable 'response'.

119
00:09:41,498 --> 00:09:43,514
I'll get something like this.

120
00:09:43,968 --> 00:09:45,932
Let's suppose that he has already
input "oui",

121
00:09:46,261 --> 00:09:48,234
because he wants to exit
the loop.

122
00:09:48,544 --> 00:09:51,134
But if you followed what I've
just said,

123
00:09:51,394 --> 00:09:54,550
this "oui" isn't in the String
literal pool,

124
00:09:54,746 --> 00:09:58,803
which means that this "oui" is
different from this "oui".

125
00:09:59,269 --> 00:10:04,451
This print will indeed display 'oui'
for 'response'.

126
00:10:04,630 --> 00:10:08,598
On the other side, this test won't
do what I want,

127
00:10:08,850 --> 00:10:12,526
as here I'm testing the references.

128
00:10:12,526 --> 00:10:16,625
'response' contains a reference
to this "oui"

129
00:10:17,761 --> 00:10:22,694
and this "oui" isn't stored at the
same reference,

130
00:10:22,694 --> 00:10:25,044
as it's in the String literal pool.

131
00:10:25,116 --> 00:10:29,365
So in this test, the condition will
be false,

132
00:10:29,605 --> 00:10:31,895
even if 'response' contains "oui".

133
00:10:33,114 --> 00:10:36,689
I'll add the call to the 'intern'
function,

134
00:10:36,689 --> 00:10:38,954
that I had hidden here.

135
00:10:40,564 --> 00:10:42,979
What happens in this case?

136
00:10:43,416 --> 00:10:47,731
When we execute this new
instruction line,

137
00:10:49,204 --> 00:10:53,111
the 'oui' contained in 'response'

138
00:10:53,668 --> 00:10:56,477
will be put in the String literal
pool.

139
00:10:56,794 --> 00:10:59,361
It turns out that there already is
a "oui" in the String literal pool.

140
00:10:59,634 --> 00:11:02,248
What will happen is that now
'response'

141
00:11:02,514 --> 00:11:05,633
will contain a reference to this
"oui".

142
00:11:06,006 --> 00:11:08,235
And this link is lost.

143
00:11:08,684 --> 00:11:13,608
This print instruction line will display
a 'oui', like before.

144
00:11:14,132 --> 00:11:16,470
This is the 'oui' that will be printed.

145
00:11:16,642 --> 00:11:18,726
And now, when we do this test.

146
00:11:18,985 --> 00:11:21,600
We are still testing the references.

147
00:11:22,322 --> 00:11:26,085
That is the reference contained in
'response'

148
00:11:26,176 --> 00:11:27,792
with the reference of this "oui",

149
00:11:27,978 --> 00:11:29,442
which is in the String literal
pool.

150
00:11:29,654 --> 00:11:34,058
But as this reference points to the
"oui" of the String literal pool,

151
00:11:34,431 --> 00:11:39,729
it's the same reference and this test
will this time be true.

152
00:11:40,045 --> 00:11:43,572
This is due to the 'intern'
function.

153
00:11:45,309 --> 00:11:50,640
We saw there exists a number of
functions specific to String,

154
00:11:50,850 --> 00:11:54,257
like the 'equals' function, or the
'length' function.

155
00:11:54,619 --> 00:12:00,469
All these functions follow the
same syntax,

156
00:12:00,543 --> 00:12:05,501
we begin with the name of a variable
of String type.

157
00:12:05,924 --> 00:12:12,836
Then the function's name, with the
'point' character between them,

158
00:12:13,228 --> 00:12:19,166
and followed by the arguments that
the function needs.

159
00:12:19,506 --> 00:12:23,101
These functions are called
methods in Java.

160
00:12:23,462 --> 00:12:27,813
They always produce a new
sequence of characters.

161
00:12:27,976 --> 00:12:32,196
The sequences of characters
involved in this use

162
00:12:32,505 --> 00:12:34,420
aren't modified.

163
00:12:35,775 --> 00:12:40,786
For example, we have the function
'replace' that can be applied

164
00:12:41,030 --> 00:12:42,835
to a variable of String type,

165
00:12:42,935 --> 00:12:44,748
for example 'chaine' here.

166
00:12:45,006 --> 00:12:49,185
It awaits two characters to be able
to function.

167
00:12:49,552 --> 00:12:53,155
This 'replace' function will replace

168
00:12:53,325 --> 00:12:58,283
the character 'char1' of 'chaine' with
the character 'char2'.

169
00:12:58,651 --> 00:13:04,617
For example, if I have a sequence 'exemple'
initialized with 'abracadabra',

170
00:13:04,942 --> 00:13:09,320
and that I call the 'replace'
function

171
00:13:09,380 --> 00:13:13,417
by passing it the character 'a'
as first value,

172
00:13:13,680 --> 00:13:17,617
and the character '*' as
second value.

173
00:13:19,453 --> 00:13:23,852
This function will create a new
sequence of characters

174
00:13:23,852 --> 00:13:29,200
where it will have replaced the 'a's
of 'abracadabra' with a star.

175
00:13:29,623 --> 00:13:33,209
And that's exactly what I obtain here.

176
00:13:34,358 --> 00:13:42,217
Note that the sequence 'exemple' still contains
the original sequence 'abracadabra'.

177
00:13:43,642 --> 00:13:46,775
Another function is 'substring'.

178
00:13:47,278 --> 00:13:51,693
It's also applied on a variable of String
type, like the 'chaine' variable,

179
00:13:52,118 --> 00:13:55,539
and awaits two positions to
operate.

180
00:13:55,738 --> 00:13:57,588
The positions of two characters.

181
00:13:57,934 --> 00:14:00,700
This function will extract a
substring

182
00:14:01,080 --> 00:14:03,780
from the variable given here.

183
00:14:04,194 --> 00:14:06,572
So for example,

184
00:14:06,778 --> 00:14:12,743
here I declare a variable 'exemple' initialized
with the sequence "anticonstitutionnel".

185
00:14:13,151 --> 00:14:20,674
In this assignment, I execute the
function 'substring'

186
00:14:20,812 --> 00:14:26,867
on this sequence by passing it the
values 4 and 16.

187
00:14:27,197 --> 00:14:30,275
That means that I'll extract the
sequence of characters

188
00:14:30,651 --> 00:14:35,019
that begins at the characters of
index 4.

189
00:14:35,603 --> 00:14:38,726
'a' is the character of index 0.

190
00:14:38,999 --> 00:14:43,791
1, 2, 3, 4, so it's this 'c' here.

191
00:14:44,210 --> 00:14:55,024
The character of index 16 is
this 'n'.

192
00:14:55,535 --> 00:14:59,087
But the last character is
not included.

193
00:14:59,312 --> 00:15:01,771
So I'll stop here.

194
00:15:02,129 --> 00:15:11,932
And this function will return the sequence
that is here, "constitution",

195
00:15:12,745 --> 00:15:18,465
which will be used to initialize
the variable 'racineMot'.

196
00:15:20,041 --> 00:15:23,795
VoilÃ , that's all we'll see for the
String type.
