1
00:00:05,497 --> 00:00:07,516
In this episode, we'll focus

2
00:00:07,516 --> 00:00:09,825
on the comparison of sequence of
characters.

3
00:00:10,325 --> 00:00:14,376
Be careful, the operators "==" for
the equality

4
00:00:14,376 --> 00:00:17,046
and "!=" for the non-equality,

5
00:00:17,047 --> 00:00:20,567
when applied on two variables
of String type,

6
00:00:20,567 --> 00:00:26,147
test if the two variables have a reference
(or not) to the same memory addresses,

7
00:00:26,147 --> 00:00:28,511
which contains a sequence of characters.

8
00:00:28,775 --> 00:00:32,639
Additionally, with the use of the
String literal pool,

9
00:00:32,726 --> 00:00:36,692
this causes a number of
subtleties,

10
00:00:36,961 --> 00:00:38,828
that we are going to see
in this example.

11
00:00:39,428 --> 00:00:46,088
Here I have the declaration and the
initialization of a variable "s1"

12
00:00:46,088 --> 00:00:51,132
that will reference the sequence of
characters "abc".

13
00:00:52,168 --> 00:00:58,716
Here, "s2" is also initialized with the
sequence "abc".

14
00:00:58,716 --> 00:01:04,233
This sequence "abc" is part of the
String literal pool.

15
00:01:04,233 --> 00:01:06,743
That's why "s1" and "s2"

16
00:01:06,743 --> 00:01:09,753
have the same reference on the
same sequence of characters.

17
00:01:11,271 --> 00:01:16,091
Here, I declare a varialbe "s3"

18
00:01:16,875 --> 00:01:20,452
in which I copy the content
of "s2".

19
00:01:20,452 --> 00:01:25,279
"s2" contains a reference to
this sequence "abc"

20
00:01:25,289 --> 00:01:28,785
and therefore "s3" will now also
contain

21
00:01:28,785 --> 00:01:32,243
a reference to this same sequence
"abc".

22
00:01:32,623 --> 00:01:37,533
I now do this last assignment.

23
00:01:38,125 --> 00:01:41,625
To "s4", I'll assign

24
00:01:41,625 --> 00:01:45,355
the concatenation of the
variable "s1",

25
00:01:45,397 --> 00:01:49,037
which is "abc",

26
00:01:49,037 --> 00:01:53,557
and the empty sequence, which I'll
represent like this.

27
00:01:54,157 --> 00:01:57,917
I finally simply obtain the
sequence "abc".

28
00:01:58,524 --> 00:02:03,804
And "s4" will get a reference to
this sequence "abc".

29
00:02:04,059 --> 00:02:09,719
But note that this "abc" isn't the
same as this one.

30
00:02:10,100 --> 00:02:14,100
More precisely, they aren't in the
same memory location

31
00:02:14,122 --> 00:02:19,322
and this reference is different from
these references.

32
00:02:20,192 --> 00:02:21,842
So why exactly?

33
00:02:21,842 --> 00:02:23,922
That's because "s1", "s2" and "s3"

34
00:02:23,922 --> 00:02:27,388
were directly initialized from
String literals,

35
00:02:27,388 --> 00:02:29,508
while that isn't the case for "s4".

36
00:02:29,508 --> 00:02:33,508
We can verify that by executing
these instruction lines.

37
00:02:33,508 --> 00:02:37,758
This "println" prints the result
of this condition.

38
00:02:37,758 --> 00:02:41,868
This condition is true when
"s1" is equal to "s2",

39
00:02:41,868 --> 00:02:44,418
that is when the reference in "s1"

40
00:02:44,418 --> 00:02:47,938
is the same as the reference in "s2".

41
00:02:48,093 --> 00:02:50,543
And in the diagram we can see that
it is indeed the case.

42
00:02:50,543 --> 00:02:51,973
Therefore this condition is true.

43
00:02:52,214 --> 00:02:56,294
"s2" is indeed equal to "s3"

44
00:02:56,340 --> 00:02:59,753
as "s2" and "s3" both contain

45
00:02:59,753 --> 00:03:02,773
a reference to this same sequence
of characters "abc".

46
00:03:02,773 --> 00:03:04,243
This condition is true.

47
00:03:04,243 --> 00:03:08,243
And as here there's a "&",
this whole condition is true.

48
00:03:08,723 --> 00:03:13,423
We'll therefore print "true", as we
can verify it in practice.

49
00:03:14,856 --> 00:03:17,806
When I execute this instruction
line,

50
00:03:17,806 --> 00:03:20,476
which prints the sequence of
characters "s4",

51
00:03:20,631 --> 00:03:24,291
we'll get the sequence "abc"
printed,

52
00:03:24,291 --> 00:03:27,521
which is this sequence here.

53
00:03:27,521 --> 00:03:32,881
Let me remind you that when we
execute the function

54
00:03:32,969 --> 00:03:34,919
"print" or "println" on a String
variable,

55
00:03:35,283 --> 00:03:39,973
we don't print the reference, but the sequence
of characters that is referenced,

56
00:03:40,013 --> 00:03:42,613
which is useful.

57
00:03:42,745 --> 00:03:48,165
Now, if I print the value of
this condition,

58
00:03:48,165 --> 00:03:51,164
which is "s1" = "s4",

59
00:03:51,164 --> 00:03:55,956
"s1" contains this reference,
"s4" contains this reference,

60
00:03:55,956 --> 00:03:58,116
which are different references,

61
00:03:58,116 --> 00:04:00,806
so the conditon is false.

62
00:04:01,190 --> 00:04:04,150
And this "println" will print
"false",

63
00:04:04,150 --> 00:04:09,270
even if the two sequences corresponding
to "s1" and "s4"

64
00:04:09,270 --> 00:04:12,660
are the same, are both "abc".

65
00:04:12,853 --> 00:04:16,873
So it is indeed the references that
are compared.

66
00:04:17,272 --> 00:04:21,365
But in practice we want to compare the
sequences of characters themselves

67
00:04:21,365 --> 00:04:23,325
rather than their references.

68
00:04:23,325 --> 00:04:26,635
And to achieve this, there's a
specific process

69
00:04:26,635 --> 00:04:28,545
to compare Strings.

70
00:04:28,906 --> 00:04:32,746
To effectively compare two sequences
of characters,

71
00:04:32,746 --> 00:04:35,236
we have the function "equals".

72
00:04:35,310 --> 00:04:38,560
For example, to compare two variables

73
00:04:38,560 --> 00:04:40,510
"chaine1" and "chaine2",

74
00:04:40,510 --> 00:04:43,130
I'll call my function "equals"
like this.

75
00:04:43,207 --> 00:04:46,997
So, first the name of the first variable.

76
00:04:46,997 --> 00:04:51,207
followed by a point, followed by the
name of the function "equals",

77
00:04:51,207 --> 00:04:58,867
and followed by the second variable that we
want to compare, as an argument to "equals".

78
00:04:58,957 --> 00:05:02,044
This "equals" function will return

79
00:05:02,044 --> 00:05:07,538
either "true", if "chaine1" and "chaine2" correspond
to the same sequence of characters

80
00:05:07,538 --> 00:05:09,758
and don't necessarily have the same
reference;

81
00:05:09,758 --> 00:05:13,018
or "false", if the two sequences
are different.

82
00:05:13,577 --> 00:05:19,647
For example, here I declared
a variable "s1"

83
00:05:19,709 --> 00:05:24,909
that contains a reference to a sequence
of characters "abc",

84
00:05:25,234 --> 00:05:33,754
a variable "s2" that contains a reference to
a sequence "aBc",

85
00:05:34,225 --> 00:05:37,385
but with "b" in capital letter,

86
00:05:37,385 --> 00:05:41,165
and here a variable "s4"

87
00:05:41,713 --> 00:05:47,899
that is initialized to the result of the concatenation
of "s1" and the empty sequence.

88
00:05:48,089 --> 00:05:51,399
"s1" corresponds to the sequence
"abc".

89
00:05:51,399 --> 00:05:56,939
When I concatenate "abc" with the empty
sequence, I simply get the sequence "abc".

90
00:05:58,026 --> 00:06:04,236
And "s4" will contain a reference to
this sequence "abc".

91
00:06:04,655 --> 00:06:07,755
We saw in a previous slide that

92
00:06:07,755 --> 00:06:12,305
the references contained in "s1"
and "s4" were different,

93
00:06:12,477 --> 00:06:18,727
so I can't directly compare "s1" and "s4"
by using the character "==".

94
00:06:18,727 --> 00:06:22,275
However, I can use the function
"equals".

95
00:06:22,622 --> 00:06:28,983
That's what I'm doing here, I compare "s1" and
"s4" by calling the functrion "equals"

96
00:06:28,983 --> 00:06:32,133
and I can verify that this time
I do obtain "true".

97
00:06:32,133 --> 00:06:37,083
Because the sequence of characters are exactly
the same, the characters "abc" are the same.

98
00:06:37,083 --> 00:06:43,343
If I now test if "s1" is equal to "s2",

99
00:06:43,343 --> 00:06:46,129
it turns out that the function "equals"

100
00:06:46,129 --> 00:06:50,230
makes the difference between
lowercase and uppercase letters,

101
00:06:50,604 --> 00:06:54,584
and as 'b' is lowercase here,

102
00:06:54,584 --> 00:06:56,721
and this 'B' is uppercase,

103
00:06:56,721 --> 00:06:59,101
the function will return "false".

104
00:07:00,426 --> 00:07:02,986
That was the comparison of two
sequence of characters.

105
00:07:02,986 --> 00:07:07,436
In the last video, we'll see what else we can
do on sequences of characters.
