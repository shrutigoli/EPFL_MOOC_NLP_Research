1
00:00:05,840 --> 00:00:06,481
Hello!

2
00:00:06,544 --> 00:00:09,671
In this episode we're going to see
a new type, which is the type "String".

3
00:00:09,921 --> 00:00:12,772
This type let's us define variables
corresponding

4
00:00:12,992 --> 00:00:14,926
to a sequence of characters.

5
00:00:15,091 --> 00:00:18,172
Declaring such a variable is
done as usual:

6
00:00:18,399 --> 00:00:22,158
I begin by the name of the
type, which is "String",

7
00:00:22,562 --> 00:00:27,083
followed by the name of the variable
that we are declaring, ending with a semi-colon.

8
00:00:27,835 --> 00:00:30,811
For example, if I make this
declaration,

9
00:00:31,143 --> 00:00:36,912
I declare a variable of type "String"
named "unNom" [means "someName"] 

10
00:00:36,966 --> 00:00:39,690
and which is not initialized yet.

11
00:00:39,894 --> 00:00:43,574
In this declaration and initialization, 

12
00:00:44,845 --> 00:00:48,705
I declare a second variable also of
type String,

13
00:00:48,962 --> 00:00:53,864
named "Message" and which I can
represent like this...

14
00:00:57,789 --> 00:01:01,659
So be careful, the quotation marks here

15
00:01:02,368 --> 00:01:06,059
aren't part of the sequence of
characters,

16
00:01:06,180 --> 00:01:10,105
they just allow to define the beginning
and the end of the sequence.

17
00:01:10,673 --> 00:01:15,970
So my variable Message contains a
reference to the memory

18
00:01:16,091 --> 00:01:20,007
where my sequence of characters
"Bonjour tout le monde" is stored.

19
00:01:21,088 --> 00:01:24,724
The characters that make up the
sequence of characters

20
00:01:25,006 --> 00:01:29,850
have their own type, which is the type
"char", that means that I can declare

21
00:01:30,095 --> 00:01:35,106
variables of type "char" which will 
contain one single character each.

22
00:01:35,326 --> 00:01:41,774
For example, I declare a variable
c1 of type "char"

23
00:01:41,867 --> 00:01:44,717
and which will contain the
character "m".

24
00:01:45,020 --> 00:01:50,794
So, please note that to delimit the
character, we use this time

25
00:01:51,152 --> 00:01:55,409
what are called simple quotes,

26
00:01:55,838 --> 00:02:01,243
whereas to delimit a sequence
of characters,

27
00:02:01,465 --> 00:02:06,202
for example the sequence "mémoire",
we use quotation marks,

28
00:02:06,507 --> 00:02:10,469
also called "double quotes".

29
00:02:11,103 --> 00:02:15,331
A good mnemonic to remember the
difference between the two is

30
00:02:15,548 --> 00:02:19,828
that for a unique character we use
simple quotes,

31
00:02:19,981 --> 00:02:24,474
for a sequence of characters which
contains generally several characters,

32
00:02:24,666 --> 00:02:26,869
we use the double quotes.

33
00:02:27,612 --> 00:02:30,899
As for the arrays, a variable of
type String

34
00:02:30,956 --> 00:02:33,985
contains a reference to a
sequence of characters.

35
00:02:34,463 --> 00:02:41,238
The semantic use of the operators =
and == is then the same as with arrays.

36
00:02:41,690 --> 00:02:48,183
For example, here I declare a variable
"chaîne" which contains a reference

37
00:02:48,476 --> 00:02:51,795
to the empty String;

38
00:02:52,302 --> 00:02:59,127
here I declare a variable "chaine2"
which contains a reference

39
00:02:59,792 --> 00:03:02,268
to the String "foo".

40
00:03:03,186 --> 00:03:09,670
When I do this operation, this
instruction, I assign the value

41
00:03:10,058 --> 00:03:15,594
of chaine2 to the variable chaine,
chaine2 contains a reference to "foo",

42
00:03:15,702 --> 00:03:19,538
so I am copying this reference in my
variable chaine,

43
00:03:19,654 --> 00:03:23,768
the reference to the empty String
is lost,

44
00:03:23,999 --> 00:03:26,119
as it is overwritten by this new
reference,

45
00:03:26,319 --> 00:03:28,594
and "chaine" also points to
"foo".

46
00:03:29,265 --> 00:03:34,724
Now, if I do
"if (chaine == chaine2)",

47
00:03:35,002 --> 00:03:39,337
well this condition is true, as "chaine"
and "chaine2" contain

48
00:03:39,450 --> 00:03:43,214
the same reference, both
to "foo".

49
00:03:44,321 --> 00:03:49,461
The String literals occupy the same
unique memory addresses, which is called

50
00:03:49,627 --> 00:03:51,423
the "String pool" or "String literal pool".

51
00:03:52,056 --> 00:03:56,454
For example, when I do this
declaration and initialization,

52
00:03:57,690 --> 00:04:04,571
I declare chaine1 which will contain
a reference to "foo".

53
00:04:05,154 --> 00:04:11,963
In fact, this "foo" String will be put in
the String literal pool

54
00:04:12,390 --> 00:04:17,983
and when I do this second declaration
and initialzazion,

55
00:04:18,655 --> 00:04:23,434
chaine2 will also be initialized to
the "foo" String and it's

56
00:04:23,810 --> 00:04:29,701
this same reference, this same "foo"
String that will be used.

57
00:04:30,661 --> 00:04:35,834
Therefore, chaine1 and chaine2 will contain
the same reference, that means

58
00:04:36,181 --> 00:04:42,000
that when I use this condition
chaine1 == chaine2, this condition

59
00:04:42,372 --> 00:04:43,264
is true.

60
00:04:45,010 --> 00:04:47,918
Now let's move on to the printing
of a String type variable.

61
00:04:48,390 --> 00:04:53,199
I declare and initialize here
a variable named "chaine"

62
00:04:53,871 --> 00:04:58,475
with the sequence of characters "Welcome";
 "chaine" contains therefore

63
00:04:59,059 --> 00:05:01,108
a reference to "Welcome".

64
00:05:01,899 --> 00:05:05,975
Now when I call the function "print"
and pass it "chaine",

65
00:05:06,521 --> 00:05:12,997
I am entitled to expect that "print" prints
what is contained in "chaine",

66
00:05:13,389 --> 00:05:17,081
that is the reference to the memory
where is effectively stored

67
00:05:17,428 --> 00:05:18,964
the sequence of characters
"Welcome".

68
00:05:19,026 --> 00:05:24,402
Well that isn't the case and "print"
indeed prints "Welcome".

69
00:05:25,402 --> 00:05:28,844
At this stage of your learning, we can
consider this as

70
00:05:29,049 --> 00:05:32,229
an exception for Strings as opposed to
other non-primitive types.

71
00:05:32,614 --> 00:05:35,651
But it's a useful exception, as
when we

72
00:05:35,705 --> 00:05:39,052
print a sequence of characters, we
want to print

73
00:05:39,119 --> 00:05:42,587
the sequence of characters rather than
the reference to that sequence.

74
00:05:43,764 --> 00:05:46,323
We can concatenate a sequence of
characters,

75
00:05:46,396 --> 00:05:50,577
that is put them end to end, by
using the "+" sign.

76
00:05:50,812 --> 00:05:54,812
In this example chaine1 and chaine2
are variables of type

77
00:05:54,925 --> 00:05:58,363
"sequence of characters", and
chaine1 + chaine2

78
00:05:58,999 --> 00:06:03,882
is a new sequence of characters made
of chaine1

79
00:06:04,378 --> 00:06:07,066
followed by the characters of chaine2.

80
00:06:07,760 --> 00:06:11,546
For example, here I declare a variable
named "nom"

81
00:06:11,901 --> 00:06:13,863
of type "sequence of characters",

82
00:06:14,591 --> 00:06:17,121
and here a variable "prenom".
["prénom" means "firstName"]

83
00:06:17,486 --> 00:06:24,875
Let's suppose that I have put a value
for "nom", for example "Dupont",

84
00:06:25,281 --> 00:06:28,442
and for "prenom", another value,
"Jean" [means "John"].

85
00:06:28,731 --> 00:06:31,746
In this assignment here, I begin
by doing

86
00:06:32,014 --> 00:06:36,125
this first concatenation , that is I
put together

87
00:06:36,451 --> 00:06:41,984
"Dupont", and this sequence of characters,
that is formed of a single space.

88
00:06:42,453 --> 00:06:46,466
So for the moment I get a sequence
of characters that is

89
00:06:46,547 --> 00:06:51,490
"Dupont" followed by the space character,
and with this String, I am going to concatenate

90
00:06:51,564 --> 00:06:58,914
once again, by adding the value of
"prénom", that is "Jean", to it.

91
00:06:59,694 --> 00:07:04,266
All this constitutes a new sequence
of characters.

92
00:07:04,778 --> 00:07:09,928
As I am going to assign the result
to my variable "nom", "nom" will contain

93
00:07:10,428 --> 00:07:13,713
a reference to that new sequence
of characters,

94
00:07:13,713 --> 00:07:15,719
and that reference will be
lost.

95
00:07:15,957 --> 00:07:20,393
So be careful, concatenation
never modifies

96
00:07:20,816 --> 00:07:22,182
the concatenated Strings.

97
00:07:22,640 --> 00:07:27,204
It makes a copy of the Strings
into another memory location.

98
00:07:27,581 --> 00:07:30,128
That's what we can see on this diagram:
"Dupont" hasn't been modified.

99
00:07:31,294 --> 00:07:35,658
The following combinations are possible
for concatenating two Strings.

100
00:07:36,081 --> 00:07:39,922
I can simply concatenate two
variables of String type,

101
00:07:40,260 --> 00:07:43,281
but I can also begin with a variable
of String type

102
00:07:43,636 --> 00:07:47,237
followed by a variable of
a basic type,

103
00:07:47,519 --> 00:07:53,862
that is "int", "double", "char", etc.
Or the inverse: begin

104
00:07:53,994 --> 00:07:58,448
with a variable of one of the basic types
"int", "double". "char", etc.

105
00:07:58,681 --> 00:08:01,353
followed by a String-type variable.

106
00:08:02,598 --> 00:08:05,818
If I take the previous example, I had
used a sequence of characters

107
00:08:06,123 --> 00:08:10,028
to insert a space between "nom" and
"prénom", we could recognize

108
00:08:10,243 --> 00:08:13,817
that it was a sequence of characters
because I used quotation marks

109
00:08:14,022 --> 00:08:16,255
which are also called "double
quotes",

110
00:08:16,563 --> 00:08:19,428
but I can also use a simple
character,

111
00:08:19,438 --> 00:08:23,289
that's what we see with
this combination.

112
00:08:23,957 --> 00:08:26,505
So in this example I'll use

113
00:08:26,505 --> 00:08:28,303
this time a single character

114
00:08:28,303 --> 00:08:31,601
that is recognizable by the fact that

115
00:08:31,707 --> 00:08:33,183
I'm using simple quotes.

116
00:08:33,183 --> 00:08:35,289
This assignment will do

117
00:08:35,289 --> 00:08:38,297
the exact same thing as
the previous one.

118
00:08:39,664 --> 00:08:42,440
A concatenation of the form
"String + char"

119
00:08:42,440 --> 00:08:47,465
is a very useful way to add a
character at the end of a String,

120
00:08:47,810 --> 00:08:51,296
In the same way, the
concatenation "char + String"

121
00:08:51,540 --> 00:08:54,622
let us add a character at the
beginning of a String.

122
00:08:55,320 --> 00:09:00,348
Let's take this example, where we
declare a variable "reponse"

123
00:09:01,150 --> 00:09:04,503
that will contain a reference to
the String "solution"

124
00:09:05,256 --> 00:09:09,804
and let's suppose that I want to
change "solution" to the plural form

125
00:09:09,804 --> 00:09:13,157
if a variable "n" is greater than 1.

126
00:09:13,863 --> 00:09:17,588
I'll do the test and here I'll do
a concatenation.

127
00:09:18,065 --> 00:09:23,809
"reponse" still has the value "solution", and
with the concatenation I'll add "s" to it,

128
00:09:23,965 --> 00:09:27,149
and I'll put the result in my variable
"reponse".

129
00:09:27,745 --> 00:09:32,532
Therefore, "reponse" will now contain
a reference

130
00:09:32,532 --> 00:09:37,244
to the result of the concatenation,
and this link will be lost.

131
00:09:38,376 --> 00:09:41,309
So here we are! That's the end of
this first video about Strings.

132
00:09:41,426 --> 00:09:44,382
In the next episode, we'll focus
essentially on

133
00:09:44,539 --> 00:09:47,078
the comparison of sequence of
characters.
