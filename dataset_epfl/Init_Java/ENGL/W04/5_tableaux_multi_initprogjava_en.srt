1
00:00:03,672 --> 00:00:04,753
The fixed-size arrays

2
00:00:04,753 --> 00:00:06,562
we were interested by until now

3
00:00:06,562 --> 00:00:08,172
were uni-dimensional arrays.

4
00:00:08,172 --> 00:00:10,849
They allowed us to store simple
sequences of values.

5
00:00:10,849 --> 00:00:12,093
In some situations,

6
00:00:12,093 --> 00:00:15,114
it is necessary to resort to arrays
that have greater dimensions.

7
00:00:15,114 --> 00:00:17,013
Let's illustrate this with a concrete
example.

8
00:00:18,682 --> 00:00:20,620
Let's assume for example that
I want to store

9
00:00:20,620 --> 00:00:23,601
the different grades obtained at the
different written assignments

10
00:00:23,601 --> 00:00:25,979
in the context of this course for a
single student.

11
00:00:26,669 --> 00:00:32,092
So here, I can use a one-dimensional array that
I would name "notes" [= "grades"] and that would

12
00:00:32,092 --> 00:00:35,861
contain, for each of its entries, a grade
of one written assignment.

13
00:00:35,861 --> 00:00:40,586
So here we would have the grade of the
assignment 0, so the first assignment.

14
00:00:40,586 --> 00:00:44,852
here we would have the grade of the
assignment 1, etc.

15
00:00:45,940 --> 00:00:50,484
So here I manage to count in a
satisfactory way,

16
00:00:50,484 --> 00:00:54,193
the grades of a single student to the different
assignments that he accomplished

17
00:00:54,193 --> 00:00:55,644
in the context of this course.

18
00:00:56,894 --> 00:00:58,879
Now let's assume that I want to
take into account

19
00:00:58,879 --> 00:01:00,481
not only the grades of a single student

20
00:01:00,482 --> 00:01:02,307
but of all the students following
the course.

21
00:01:02,307 --> 00:01:06,396
At that moment, I would need to use a
two-dimensional array here,

22
00:01:06,396 --> 00:01:09,237
where the first dimension, which is the
lines here,

23
00:01:09,237 --> 00:01:11,692
would correspond to a student.

24
00:01:12,292 --> 00:01:14,746
So here I would have the first student
of the course.

25
00:01:14,746 --> 00:01:18,752
And every column would in fact
represent all the grades

26
00:01:18,752 --> 00:01:21,090
obtained for one given assignments by
all the students.

27
00:01:21,090 --> 00:01:24,966
So here for example, I would have
the grades for the first assignment,

28
00:01:24,966 --> 00:01:28,057
and here the grade of the
last assignment.

29
00:01:29,776 --> 00:01:32,778
So here I see that I need to resort to
a more complex

30
00:01:32,778 --> 00:01:35,056
data structure, a two-dimensional
array

31
00:01:35,056 --> 00:01:37,390
where the lines correspond to
the students

32
00:01:37,390 --> 00:01:40,321
and the columns correspond
to the assignments.

33
00:01:40,321 --> 00:01:43,010
Multidimensional arrays

34
00:01:43,010 --> 00:01:45,777
correspond exactly to this need.

35
00:01:47,971 --> 00:01:52,160
In Java, a two-dimensional fixed-size array
is no more than an array of arrays.

36
00:01:52,160 --> 00:01:54,444
In reality, it's a little more complex
than that

37
00:01:54,444 --> 00:01:55,701
because we know that in Java,

38
00:01:55,701 --> 00:01:58,399
arrays are manipulated through
references.

39
00:01:58,399 --> 00:02:00,308
So the more correct diagram
would be something

40
00:02:00,308 --> 00:02:02,721
looking like this: in every cell,

41
00:02:02,721 --> 00:02:06,841
we have a reference to an array.

42
00:02:07,846 --> 00:02:09,706
So the diagram you have here
in front of you

43
00:02:09,706 --> 00:02:14,690
corresponds in fact to a structure that
looks like this in Java.

44
00:02:14,690 --> 00:02:16,477
It's indeed an array of arrays.

45
00:02:17,050 --> 00:02:19,925
Concerning the syntax, adding a
supplenmntary dimension

46
00:02:19,925 --> 00:02:22,504
to an array in Java is simply
equivalent to adding

47
00:02:22,504 --> 00:02:24,677
another level of brackets.

48
00:02:24,677 --> 00:02:26,825
Here you have two concrete
examples.

49
00:02:27,225 --> 00:02:30,116
Now let's have a better look

50
00:02:30,116 --> 00:02:31,134
at one of these examples.

51
00:02:31,134 --> 00:02:34,632
Here, I declare a two-dimensional
array, I have two levels of brackets,

52
00:02:34,632 --> 00:02:39,381
which homogeneously contains integers
and which is named "score".

53
00:02:39,741 --> 00:02:41,948
It's a two-dimensional array,

54
00:02:41,948 --> 00:02:45,231
so I'll initialize it with a construction
that is analogous to

55
00:02:45,231 --> 00:02:47,278
what I know concerning one-
dimensional arrays.

56
00:02:47,278 --> 00:02:49,460
Here I have a number of lines,

57
00:02:49,460 --> 00:02:52,141
which corresponds to a number of players,
say for example

58
00:02:52,141 --> 00:02:55,017
that I have no more than 3 players
by which I am interested.

59
00:02:55,017 --> 00:02:57,437
And regarding columns; a given number
of columns

60
00:02:57,437 --> 00:03:00,630
which correspond to a number
of games played by the players.

61
00:03:00,630 --> 00:03:02,695
So let's say, for example, that I
have no more than 4.

62
00:03:03,089 --> 00:03:05,563
The purpose of the array "score"
is to count

63
00:03:05,563 --> 00:03:09,679
the score obtained at every game
by each player.

64
00:03:11,911 --> 00:03:14,132
So concretely, what structure
am I going to have

65
00:03:14,132 --> 00:03:16,467
after such a declaration?

66
00:03:16,467 --> 00:03:21,696
Well here I declared an array
with 3 entries,

67
00:03:22,866 --> 00:03:24,615
which translates into this,

68
00:03:26,065 --> 00:03:29,966
so every entry is itself an array with 4 entries;

69
00:03:30,662 --> 00:03:33,416
which can schematically translate
into this.

70
00:03:33,416 --> 00:03:38,169
So here, for the entry "i", I have
an array

71
00:03:39,039 --> 00:03:41,606
that can contain at most 4 entries,

72
00:03:41,606 --> 00:03:43,775
and each entry corresponds to
a score.

73
00:03:45,422 --> 00:03:47,810
So this allows me to record the
score obtained at every game

74
00:03:48,820 --> 00:03:51,938
for every player.

75
00:03:52,322 --> 00:03:56,388
So if I want to access the i-th player,
I iterate over the first dimension.

76
00:03:57,248 --> 00:03:59,679
Once I accessed this dimension,

77
00:03:59,679 --> 00:04:01,367
I can access the second dimension

78
00:04:01,367 --> 00:04:03,425
which will give me the different
scores obtained

79
00:04:03,425 --> 00:04:04,458
at the different games.

80
00:04:06,178 --> 00:04:10,326
So schematically, I can represent this
with a two-dimensional array,

81
00:04:10,326 --> 00:04:14,742
So here I'd have an array with 3 lines
and 4 columns.

82
00:04:16,004 --> 00:04:20,557
So every line "i" corresponds to
a player,

83
00:04:20,684 --> 00:04:23,067
and this would be the line of
the player i.

84
00:04:23,067 --> 00:04:26,068
And each column "j" corresponds
in reality

85
00:04:26,068 --> 00:04:28,429
to all the scores for the game j.

86
00:04:30,575 --> 00:04:34,706
So if I want to know the score
obtained by the player i

87
00:04:34,706 --> 00:04:36,953
when he played the game j,

88
00:04:36,953 --> 00:04:39,981
I need to access this cell of
the two-dimensional array.

89
00:04:42,068 --> 00:04:45,495
The score for each game are in
reality integers,

90
00:04:46,905 --> 00:04:50,654
which explains why I declared my
two-dimensional array

91
00:04:50,654 --> 00:04:52,133
as an array of integers.

92
00:04:54,433 --> 00:04:57,564
If I know all the array's values
when I'm declaring it,

93
00:04:57,564 --> 00:05:00,044
it's possible to initialize it

94
00:05:00,044 --> 00:05:02,802
at the time of declaration with a
trick of this nature

95
00:05:02,802 --> 00:05:06,749
that looks a lot like what we did
for unidimensional arrays.

96
00:05:06,749 --> 00:05:09,929
Of course, you need to specify as many
values a there are dimensions,

97
00:05:09,929 --> 00:05:12,528
and that is for each dimension.

98
00:05:12,528 --> 00:05:15,531
What you are looking at corresponds
to an array with 4 lines.

99
00:05:18,741 --> 00:05:21,711
And we can see that every line
corresponds to an array,

100
00:05:21,711 --> 00:05:23,470
and that the number of columns

101
00:05:23,470 --> 00:05:27,348
isn't necessarily the same, in Java,
for each line.

102
00:05:27,815 --> 00:05:30,876
So we can absolutely construct
an array that looks like this,

103
00:05:30,876 --> 00:05:34,530
where we have a different number of
columns for each line.

104
00:05:34,530 --> 00:05:36,873
We see indeed that we are
dealing with

105
00:05:36,873 --> 00:05:40,508
an array of arrays.

106
00:05:40,508 --> 00:05:43,078
Each individual entry of the
first array

107
00:05:43,918 --> 00:05:46,196
corresponds to an array.

108
00:05:47,791 --> 00:05:49,956
The indexation mechanism that
allows me to access

109
00:05:49,956 --> 00:05:51,914
the different values of the array

110
00:05:51,914 --> 00:05:55,780
has the exact same signification as
the uni-dimensional arrays.

111
00:05:56,215 --> 00:05:59,261
Here for example, if I access
"array of [2]",

112
00:05:59,261 --> 00:06:03,257
I'm trying to access the elements of
the first level of this array.

113
00:06:03,257 --> 00:06:09,009
So here, knowing that the elements
are numbered from 0 to "size - 1",

114
00:06:09,009 --> 00:06:12,785
here I have the element of index 0, of
index 1, of index 2,

115
00:06:12,785 --> 00:06:15,173
so when I access the element of
index 2,

116
00:06:15,173 --> 00:06:18,752
I'm precisely getting this array, which I
can find again here.

117
00:06:18,752 --> 00:06:21,797
So knowing that "array[2]" is itself and array,

118
00:06:21,797 --> 00:06:26,218
I can now access its j-th cell with
the second index.

119
00:06:26,218 --> 00:06:29,552
So here, knowing that the indexes
are once again numbered

120
00:06:29,552 --> 00:06:33,698
from 0 to "size - 1", the element
of index 1 will be this one;

121
00:06:33,698 --> 00:06:36,048
which corresponds to this in the
diagram,

122
00:06:36,048 --> 00:06:40,411
and to this element in my
declaration/initialization.

123
00:06:42,314 --> 00:06:44,317
So to sum up the discussion we
have just had,

124
00:06:44,317 --> 00:06:47,235
if we know what elements to put in
the array beforehand,

125
00:06:47,235 --> 00:06:48,521
when we declare it,

126
00:06:48,521 --> 00:06:51,595
it is possible to initialize it
like this.

127
00:06:51,595 --> 00:06:53,993
What we saw in the previous
example,

128
00:06:53,993 --> 00:06:56,791
is that the elements of the first
dimension

129
00:06:56,791 --> 00:06:59,808
are all arrays.

130
00:06:59,808 --> 00:07:04,044
In this instance, they're arrays
of integer values.

131
00:07:04,044 --> 00:07:07,056
So concretely, in the example you
are looking at,

132
00:07:07,056 --> 00:07:11,624
you have an array of 3 arrays:
y[0], y[1], y[2].

133
00:07:12,414 --> 00:07:14,713
The array y[0] is this array.

134
00:07:14,713 --> 00:07:18,196
The array y[2] is this last array.

135
00:07:20,159 --> 00:07:23,317
To access the elements of the
second dimension,

136
00:07:23,317 --> 00:07:24,836
I add a level of brackets,

137
00:07:24,836 --> 00:07:27,842
and obviously, at that moment, the
accessed value

138
00:07:27,842 --> 00:07:29,822
is an integer and not an array
anymore.

139
00:07:29,822 --> 00:07:33,874
For example, if I want to access
this element "y[1][1]",

140
00:07:33,874 --> 00:07:39,936
I first have to get the array y[1],
which is this one,

141
00:07:39,936 --> 00:07:43,841
then I access the element of
index 1, which is this one,

142
00:07:43,841 --> 00:07:46,199
so here I get the value 4.

143
00:07:48,774 --> 00:07:51,131
In the most general case, when we
know the

144
00:07:51,131 --> 00:07:53,078
values to put in the array
beforehand,

145
00:07:53,078 --> 00:07:56,397
we'll simply reserve the necessary
memory locations when initializing,

146
00:07:56,397 --> 00:08:00,462
like in the uni-dimensional array case.

147
00:08:00,462 --> 00:08:04,057
So concretely, here, we'll end up
with the construction of an array

148
00:08:04,057 --> 00:08:09,780
that contains 3 lines and each line
contains 2 elements,

149
00:08:09,780 --> 00:08:12,830
that's the structure we'll end up with
in memoery.

150
00:08:12,830 --> 00:08:15,233
And we saw that there exists
default values

151
00:08:15,233 --> 00:08:17,459
for the initialization of these
values in Java.

152
00:08:17,459 --> 00:08:20,052
So the values are the same as
for the uni-dimensional arrays,

153
00:08:20,052 --> 00:08:24,112
so here I'll have zeroes everywhere,
as they're integers.

154
00:08:24,112 --> 00:08:27,915
Then we need to proceed with an
ad-hoc, manual, filling.

155
00:08:27,915 --> 00:08:31,495
Here I do it very explicitly by
accessing cell by cell

156
00:08:31,495 --> 00:08:32,798
and by putting a value into it,

157
00:08:32,798 --> 00:08:36,670
so here I'll put 1 and I'll put 2
here, and so one.

158
00:08:36,670 --> 00:08:39,445
And we can of course imagine that
it's very fastidious

159
00:08:39,445 --> 00:08:43,460
to proceed like this if we have very
large arrays;

160
00:08:43,460 --> 00:08:45,909
which naturally makes us think
about loops

161
00:08:47,403 --> 00:08:49,221
and the notion of iteration.

162
00:08:49,221 --> 00:08:53,814
How would we proceed if we want to iterate
over a two-dimensional array, or more?

163
00:08:56,488 --> 00:08:59,522
The most natural way to iterate
over a two-dimensional array

164
00:08:59,522 --> 00:09:02,050
is to nest two for-loops.

165
00:09:02,050 --> 00:09:04,946
The first for-loop will allow us
to iterate over

166
00:09:06,766 --> 00:09:09,329
the entire set of lines of the array,

167
00:09:10,373 --> 00:09:12,640
so concretely, here, would allow
us to iterate

168
00:09:12,640 --> 00:09:14,560
over each of these lines, so
to iterate

169
00:09:14,560 --> 00:09:16,413
over each of these lines alterantely.

170
00:09:16,791 --> 00:09:18,903
The second index, the second
loop,

171
00:09:20,553 --> 00:09:23,943
will allow us to iterate over all the
colzumns of each line.

172
00:09:26,603 --> 00:09:28,545
So here, for each line,

173
00:09:28,545 --> 00:09:31,315
we want to iterate over each
column.

174
00:09:31,315 --> 00:09:33,877
That's why the two loops are
in reality nested.

175
00:09:33,877 --> 00:09:35,726
It's because for each "i",

176
00:09:35,726 --> 00:09:38,325
we want to iterate over all
the possible "j"s.

177
00:09:39,205 --> 00:09:41,630
Notice especialy the looping conditions.

178
00:09:41,630 --> 00:09:44,625
So the number of lines
obviously stops

179
00:09:44,625 --> 00:09:47,680
at "array's size - 1", which corresponds
to this notation.

180
00:09:50,320 --> 00:09:54,543
And the second loop condition
corresponds to the size of the entry "i"

181
00:09:55,833 --> 00:09:58,010
of the array, which correponds to
this notation.

182
00:10:00,667 --> 00:10:03,105
You now know the essential

183
00:10:03,105 --> 00:10:05,451
about fixed-size arrays in Java.

184
00:10:05,451 --> 00:10:08,609
We studied the cases of uni-dimensional
arrays, and two-dimenisonal arrays.

185
00:10:08,609 --> 00:10:10,811
It is of course possible to
go beyond

186
00:10:10,811 --> 00:10:12,649
and have arrays of even bigger
dimensions,

187
00:10:12,649 --> 00:10:15,432
even if we rarely go over 4 in practice.

188
00:10:15,432 --> 00:10:19,020
The use stays exactly the same as
for two-dimensional arrays.

189
00:10:19,800 --> 00:10:22,741
To complete our study of arrays, we still have to

190
00:10:22,741 --> 00:10:26,796
see, in a following episode,
the case of dynamic arrays,

191
00:10:27,106 --> 00:10:30,475
which we'll present shortly.
