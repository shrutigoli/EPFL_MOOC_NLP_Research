1
00:00:03,755 --> 00:00:06,714
So far, we saw that every program
manipulates data

2
00:00:06,730 --> 00:00:09,823
and that these data are stored in
so-called variables.

3
00:00:09,838 --> 00:00:12,420
We also saw that in Java, every
variable

4
00:00:12,420 --> 00:00:15,815
must be associated with a type,
which represents the kind of values

5
00:00:15,815 --> 00:00:17,832
that we want to store in the
variable.

6
00:00:17,832 --> 00:00:20,469
So far the types we had a
look at

7
00:00:20,469 --> 00:00:24,803
are simple types, for example integers,
doubles or booleans,

8
00:00:24,803 --> 00:00:28,430
that allow us to model data of
elementary types;

9
00:00:28,445 --> 00:00:31,955
for example, dimensions, logical
expressions,

10
00:00:31,955 --> 00:00:33,639
and similar things.

11
00:00:33,994 --> 00:00:36,074
In many situations, it is
necessary

12
00:00:36,074 --> 00:00:38,614
to represent more sophisticated data,

13
00:00:38,614 --> 00:00:41,196
to manipulate sets of data as a whole.

14
00:00:41,196 --> 00:00:43,334
This is the goal of this episode.

15
00:00:44,871 --> 00:00:47,859
The objective of today's lectures is
to go beyond

16
00:00:47,859 --> 00:00:49,680
simple types

17
00:00:49,680 --> 00:00:52,781
such as integers, double, characters
or booleans

18
00:00:52,781 --> 00:00:55,484
and to learn how to manipulate more
sophisticated data

19
00:00:55,484 --> 00:01:00,215
by combining data of elementary types.

20
00:01:02,305 --> 00:01:05,822
Generally speaking, in computer programming,
a structured, composed

21
00:01:05,822 --> 00:01:08,838
or advanced data type will
essentially allow

22
00:01:08,838 --> 00:01:11,594
to manipulate a set of data as
a whole.

23
00:01:11,594 --> 00:01:13,262
For example, in a program,

24
00:01:13,262 --> 00:01:15,649
if I need to model a set of
ages,

25
00:01:15,649 --> 00:01:18,763
which is a set of homogeneous
data, integers in this case,

26
00:01:18,763 --> 00:01:21,658
it is natural to think of something
that would look like

27
00:01:21,658 --> 00:01:24,793
a table, an array of data that I
can manipulate as a whole.

28
00:01:25,068 --> 00:01:28,789
I can also imagine sophisticated
representations of this nature

29
00:01:28,789 --> 00:01:31,891
wherever the nature of data is heterogeneous,
like here for example,

30
00:01:31,891 --> 00:01:34,731
a sequence of characters, a double
and an integer.

31
00:01:35,882 --> 00:01:38,392
More simply, we can also
consider

32
00:01:38,392 --> 00:01:41,080
that a sequence of characters is a
composed type,

33
00:01:41,080 --> 00:01:44,608
as a sequence of characters is a
set of characters,

34
00:01:45,608 --> 00:01:47,716
letting us manipulate a set of

35
00:01:47,716 --> 00:01:49,484
characters as a whole.

36
00:01:50,524 --> 00:01:53,584
Today, we are going to continue exploring
the building blocks

37
00:01:53,584 --> 00:01:56,017
that allow us to build a program
in terms

38
00:01:56,747 --> 00:01:58,577
of computations and data in Java.

39
00:01:58,577 --> 00:02:00,547
Today we are mostly going to have
a look at

40
00:02:00,547 --> 00:02:04,488
the data component and see how
it is possible to work

41
00:02:04,488 --> 00:02:06,957
with arrays of data,
more precisely,

42
00:02:06,957 --> 00:02:09,829
we'll work with fixed-size arrays

43
00:02:10,217 --> 00:02:12,359
in today's episode.

44
00:02:14,018 --> 00:02:16,325
To illustrate the use of arrays
in computer programming,

45
00:02:16,325 --> 00:02:18,262
here's a small introductory example.

46
00:02:18,576 --> 00:02:21,403
Imagine for example that you want to
write a small program

47
00:02:21,707 --> 00:02:24,317
that manipulates players' scores. 

48
00:02:24,317 --> 00:02:26,167
Here, the goal is simply

49
00:02:26,167 --> 00:02:29,397
to print the score of each player,

50
00:02:29,397 --> 00:02:31,939
to compute the mean
of all the scores,

51
00:02:31,939 --> 00:02:35,633
and to print the deviation from the mean
of every score.

52
00:02:36,102 --> 00:02:39,720
We'll initially try to write a
Java program

53
00:02:39,720 --> 00:02:43,509
capable of doing this computing, but
by using only

54
00:02:43,509 --> 00:02:45,939
what we have learned so far,

55
00:02:45,939 --> 00:02:48,088
that is data of elementary types.

56
00:02:48,239 --> 00:02:50,970
To begin with, we won't be too
ambitious.

57
00:02:50,970 --> 00:02:53,920
Let's imagine that we simply have

58
00:02:53,920 --> 00:02:56,420
to represent two players.

59
00:02:57,440 --> 00:03:00,812
So we have to model the scores of
two players,

60
00:03:00,812 --> 00:03:02,791
which can be done by the
existing means

61
00:03:02,791 --> 00:03:05,030
using two integer-type variables:

62
00:03:05,030 --> 00:03:07,440
the variable score1 and the variable
score2.

63
00:03:07,440 --> 00:03:10,520
We consider that in this program,
these values are obtained

64
00:03:10,520 --> 00:03:12,892
through some keyboard interaction,
like here.

65
00:03:13,250 --> 00:03:15,117
Once these values are obtained,

66
00:03:15,117 --> 00:03:17,654
the computation of the mean can
simply be done

67
00:03:17,654 --> 00:03:20,811
by summing the two scores and
dividing the sum by two.

68
00:03:21,068 --> 00:03:22,695
We can then proceed to

69
00:03:22,695 --> 00:03:26,003
printing the score and the deviation
from the mean

70
00:03:26,003 --> 00:03:28,816
for each score. We here print
score1

71
00:03:28,816 --> 00:03:33,657
and the deviation from the mean of
score1, and we do the same with score2.

72
00:03:35,130 --> 00:03:37,636
A question that will naturally arise is

73
00:03:37,636 --> 00:03:40,684
how do we proceed with more
players ?

74
00:03:41,092 --> 00:03:46,318
Obviously, we'll have to add as many
variable as there are players

75
00:03:46,547 --> 00:03:49,518
and typically, in the context of this
example with five players,

76
00:03:49,518 --> 00:03:51,349
we would be obliged to

77
00:03:51,349 --> 00:03:54,450
to declare five variables
"score",

78
00:03:54,450 --> 00:03:57,551
one for every player, which is already
relatively laborious.

79
00:03:58,621 --> 00:04:00,863
The computation of the mean becomes
more complex

80
00:04:00,863 --> 00:04:03,818
as we now have to sum up the values
of five variables,

81
00:04:03,818 --> 00:04:07,110
and also, how do we print the results?

82
00:04:07,381 --> 00:04:10,841
For every score, we must repeat

83
00:04:10,841 --> 00:04:12,966
the instruction line that prints

84
00:04:12,966 --> 00:04:14,678
the score and the deviation from
the mean.

85
00:04:14,678 --> 00:04:18,262
We'd like to get around this rather
laborious task,

86
00:04:18,262 --> 00:04:20,209
repeating every instruction

87
00:04:20,209 --> 00:04:22,636
and naturally we'll think of
using a loop.

88
00:04:22,636 --> 00:04:24,673
How would we proceed if we

89
00:04:24,673 --> 00:04:27,920
wanted to print the different 
scores

90
00:04:27,920 --> 00:04:30,636
and the deviations from the mean
using a loop?

91
00:04:32,226 --> 00:04:35,689
A natural solution would be to use
a for-loop,

92
00:04:35,689 --> 00:04:38,900
which would allow us to iterate
over every score

93
00:04:38,900 --> 00:04:41,184
and for every score to print what
is needed.

94
00:04:41,184 --> 00:04:44,086
We can therefore imagine writing
the loop in this spirit.

95
00:04:44,086 --> 00:04:47,207
We'd have a counter which would iterate
from the first score to the last one

96
00:04:47,207 --> 00:04:51,151
and for every score, we would print
what is needed.

97
00:04:51,151 --> 00:04:54,177
However, if we examine this program
in more detail,

98
00:04:54,177 --> 00:04:56,919
the for-loop and even the entire
program,

99
00:04:56,919 --> 00:04:58,430
we realize

100
00:04:58,430 --> 00:04:59,871
that this approach doesn't meet

101
00:04:59,871 --> 00:05:02,083
all the needs we can consider in
this context

102
00:05:02,083 --> 00:05:04,039
in a completely satisfactory way.

103
00:05:04,039 --> 00:05:08,609
Let's imagine fore example that
I want

104
00:05:08,609 --> 00:05:10,909
to have more than 5 players,

105
00:05:10,909 --> 00:05:12,359
like 100 or 1000.

106
00:05:12,359 --> 00:05:16,035
In this case the program would take
unmanageable dimensions,

107
00:05:16,035 --> 00:05:18,652
we'd for example have to introduce
thousands of variables,

108
00:05:18,652 --> 00:05:22,356
complicate the computation of the mean.
Furthermore, if we have a look at the way

109
00:05:22,356 --> 00:05:25,705
we wrote the score here

110
00:05:25,705 --> 00:05:28,274
to access the i-th score of the
sequence:

111
00:05:28,274 --> 00:05:32,404
in fact, this is not a valid Java syntax

112
00:05:32,404 --> 00:05:34,944
to designate the i-th element
of a sequence.

113
00:05:34,944 --> 00:05:39,151
And final point, our approach

114
00:05:39,151 --> 00:05:41,502
doesn't satisfactorily respond to

115
00:05:41,502 --> 00:05:45,703
the situation where the number of
players isn't initially known.

116
00:05:45,703 --> 00:05:49,205
So if we want to write a program
of this nature,

117
00:05:49,205 --> 00:05:51,334
the tools that we have at our disposal
so far

118
00:05:51,334 --> 00:05:54,355
don't satisfactorily respond to our
needs in this context.

119
00:05:54,355 --> 00:05:58,052
"Arrays" are the solution to this.

120
00:05:59,208 --> 00:06:01,951
To give you a concrete idea of what
the notion of array is,

121
00:06:01,951 --> 00:06:05,877
here's how the previous program would
be written using that concept.

122
00:06:05,877 --> 00:06:09,413
So the idea would be to use a new
type of data,

123
00:06:09,413 --> 00:06:12,435
the type "array of integers", of which
we'll see the syntax

124
00:06:12,435 --> 00:06:14,417
more in detail later in this video.

125
00:06:14,417 --> 00:06:17,219
Primarily, when declaring an
array,

126
00:06:17,219 --> 00:06:20,358
we can manipulate a sequence of data
as a whole,

127
00:06:20,358 --> 00:06:24,285
and access the i-th element of the
sequence by using indexation.

128
00:06:24,285 --> 00:06:26,718
So we can see that the previous
program

129
00:06:26,718 --> 00:06:28,453
can be written more concisely,

130
00:06:28,453 --> 00:06:31,967
in particular we can manage the
part that reads the scores

131
00:06:31,967 --> 00:06:34,474
in a unified way with a
for-loop.

132
00:06:34,474 --> 00:06:36,981
Then, whatever the number
of scores,

133
00:06:36,981 --> 00:06:39,618
we'll write the program the
same way,

134
00:06:39,618 --> 00:06:42,826
whether we have 5 or 1000
players

135
00:06:42,826 --> 00:06:45,599
and we can now also manage
the case

136
00:06:45,599 --> 00:06:48,098
when the number of players isn't
initially known

137
00:06:48,098 --> 00:06:52,617
and therefore read the number of scores
before executing the computation

138
00:06:52,617 --> 00:06:55,029
that we want to do on the scores.

139
00:06:56,052 --> 00:06:59,155
In computer programming, an array is
a type of data that allows us

140
00:06:59,155 --> 00:07:02,539
to manipulate a collection of homogeneous
values as a whole.

141
00:07:02,876 --> 00:07:05,691
In an array, values are all of the
same type.

142
00:07:05,691 --> 00:07:09,578
Here you have an example
representing an array of integers.

143
00:07:09,578 --> 00:07:12,723
All the values contained in the
array score are of 'int' type.

144
00:07:12,723 --> 00:07:15,676
Of course, in Java we can define
arrays

145
00:07:15,676 --> 00:07:19,406
of any known type, arrays of integers,
doubles, chars

146
00:07:19,406 --> 00:07:23,946
and any other known type, including
arrays of arrays.

147
00:07:25,650 --> 00:07:28,307
Generally, in computer programming,
we can consider

148
00:07:28,307 --> 00:07:31,654
that there exists four types of arrays,

149
00:07:31,654 --> 00:07:34,483
depending on the answers to the
following questions.

150
00:07:34,483 --> 00:07:38,412
First question: is the array's size
initially known?

151
00:07:38,412 --> 00:07:41,190
That is, when I begin writing my
program

152
00:07:41,190 --> 00:07:43,208
do I know which size the array has,

153
00:07:43,208 --> 00:07:45,608
or don't I (know which size the
array has)?

154
00:07:45,608 --> 00:07:48,310
We can have two possible answers to
that question.

155
00:07:48,310 --> 00:07:51,959
Then, second question: can the size
vary

156
00:07:51,959 --> 00:07:53,518
while using the array?

157
00:07:53,518 --> 00:07:55,907
That is, once I've set a size to
my array,

158
00:07:55,907 --> 00:07:57,927
can I vary that size

159
00:07:57,927 --> 00:07:59,648
while the program runs

160
00:07:59,648 --> 00:08:03,232
or will that size be fixed
once and for all?

161
00:08:04,903 --> 00:08:07,416
The type of array that is the more
flexible, the more general,

162
00:08:07,416 --> 00:08:10,138
and that responds to as many needs as
possible is certainly

163
00:08:10,138 --> 00:08:11,808
the one that has this configuration,

164
00:08:11,808 --> 00:08:15,246
an array whose initial size isn't
known

165
00:08:15,246 --> 00:08:17,036
when I write the program.

166
00:08:17,036 --> 00:08:18,756
We can set that size when

167
00:08:18,756 --> 00:08:20,618
the program executes, but I don't
know it

168
00:08:20,618 --> 00:08:23,698
when I'm writing the program and
this size can also vary

169
00:08:23,698 --> 00:08:25,469
while the program runs.

170
00:08:25,469 --> 00:08:28,445
For example, let's imagine that I
want to write a program

171
00:08:28,445 --> 00:08:30,919
that manages the ages of the people
registered to this course.

172
00:08:30,919 --> 00:08:33,973
That number isn't known when I
write the program

173
00:08:33,973 --> 00:08:36,428
but will be determined when I
start

174
00:08:36,428 --> 00:08:39,264
the execution of the program with the
effective number of registered people

175
00:08:39,264 --> 00:08:42,968
that I get at that moment, and we can
imagine that during the execution,

176
00:08:42,968 --> 00:08:46,199
I have new registrations, so the
array's size will grow.

177
00:08:46,199 --> 00:08:48,480
I can also imagine that people
will

178
00:08:48,480 --> 00:08:50,761
unsubscribe from the course,
in which case

179
00:08:50,761 --> 00:08:53,044
the array's size will decrease.

180
00:08:54,209 --> 00:08:56,688
At the other extreme, there exists
arrays

181
00:08:56,688 --> 00:08:59,167
the size of which is known when I
write the program

182
00:08:59,167 --> 00:09:01,648
and whose size isn't
going to change

183
00:09:01,648 --> 00:09:04,416
during the execution of the program;
so this configuration here.

184
00:09:04,661 --> 00:09:07,306
For example, if I want to write a program
that manipulates

185
00:09:07,306 --> 00:09:10,932
two-dimensional vectors,

186
00:09:13,032 --> 00:09:16,088
so I know that my vector has
2 dimensions;

187
00:09:16,088 --> 00:09:18,664
it has two components and no more.

188
00:09:18,678 --> 00:09:21,122
So, a component for X and
a component for Y

189
00:09:21,122 --> 00:09:25,095
and I know that a two-dimensional vector
will remain a two-dimensional vector

190
00:09:25,095 --> 00:09:27,346
during the whole program's
execution

191
00:09:27,346 --> 00:09:31,131
and therefore it's size won't change
while I run the program.

192
00:09:33,118 --> 00:09:36,339
Intermediate situation: the case where
an array has a size

193
00:09:36,339 --> 00:09:38,601
which isn't known when I write
the program,

194
00:09:38,601 --> 00:09:42,144
but once that size is set, it
doesn't change anymore

195
00:09:42,144 --> 00:09:44,769
during the program's execution, so
this case here.

196
00:09:45,106 --> 00:09:47,299
We can for example imagine that
I'm writing a game

197
00:09:47,299 --> 00:09:49,728
which is played by 2 to 7
players.

198
00:09:49,728 --> 00:09:52,248
When I execute the program, I
don't know

199
00:09:52,248 --> 00:09:54,965
exactly how many players are going to
be in the game.

200
00:09:54,965 --> 00:09:56,682
So when the program starts

201
00:09:56,682 --> 00:09:58,520
it will ask how many players
there are.

202
00:09:58,520 --> 00:10:00,207
For example, there're 5.

203
00:10:00,207 --> 00:10:02,633
Once these 5 players are in
the game,

204
00:10:02,633 --> 00:10:06,022
it must take place with the 5 players
and no more.

205
00:10:06,022 --> 00:10:08,689
The array's size isn't going to
evolve

206
00:10:08,689 --> 00:10:10,761
while the program runs.

207
00:10:11,958 --> 00:10:15,727
Last case finally, maybe more
difficult to illustrate,

208
00:10:15,727 --> 00:10:18,806
a bit less intuitive: the case where
the array's size

209
00:10:18,806 --> 00:10:21,407
is known when I write the
program

210
00:10:21,407 --> 00:10:24,310
and can vary while the program
executes.

211
00:10:24,310 --> 00:10:28,544
For example, I want to represent the number
of "cantons" [= districts, provinces] of a country.

212
00:10:29,503 --> 00:10:33,379
This number of cantons is set, it
is known a priori.

213
00:10:33,379 --> 00:10:34,847
So when I write the program,

214
00:10:34,847 --> 00:10:36,675
I know for example that there are 26 of them.
[TN: this is the case in Switzerland]

215
00:10:36,675 --> 00:10:39,314
We can also imagine that at a
given moment

216
00:10:39,314 --> 00:10:41,428
a new canton is created in the
country

217
00:10:42,946 --> 00:10:45,823
or that two cantons merge
into one.

218
00:10:45,823 --> 00:10:49,892
So the array's size will increase or
decrease

219
00:10:49,892 --> 00:10:51,900
while the program runs.

220
00:10:51,900 --> 00:10:54,997
This last case is probably the
least natural


221
00:10:54,997 --> 00:10:57,439
and the least frequent in practice.

222
00:10:58,473 --> 00:11:02,228
Most programming languages don't
offer any specific tools,

223
00:11:02,228 --> 00:11:06,400
dedicated to the management of each
case presented here.

224
00:11:06,400 --> 00:11:10,668
For example, in Java we mainly dispose
of two tools,

225
00:11:10,668 --> 00:11:13,419
the one that allows us to manage
dynamic size's arrays.

226
00:11:13,419 --> 00:11:15,815
Here for example, with the use of
a predefined type

227
00:11:15,815 --> 00:11:17,861
of Java called "ArrayList",

228
00:11:17,861 --> 00:11:20,587
which responds to the needs of
situations number 1 and 2.

229
00:11:20,587 --> 00:11:22,614
And then arrays of fixed size,

230
00:11:22,614 --> 00:11:25,684
on which we will focus in the context
of today's videos,

231
00:11:25,684 --> 00:11:29,781
and which respond to the needs of
situations number 3 and 4.
