1
00:00:03,749 --> 00:00:07,615
We saw what the notion of array conceptually
was in computer programming.

2
00:00:07,615 --> 00:00:11,334
We also saw that there exists
different types of arrays, depending

3
00:00:11,334 --> 00:00:16,567
on whether the array's size is initially
known, or whether the size can evolve

4
00:00:16,567 --> 00:00:18,187
or not during the program's
execution.

5
00:00:18,187 --> 00:00:20,830
It is now time to move to practical
things and see how

6
00:00:20,830 --> 00:00:23,712
we can manipulate a fixed-size
array in Java.

7
00:00:25,310 --> 00:00:28,556
When I want to manipulate data in
a program, we know that I must

8
00:00:28,556 --> 00:00:31,359
do it through a variable. For example,
if my program must

9
00:00:31,359 --> 00:00:35,545
use data of double type, I'll declare
a variable of double

10
00:00:35,545 --> 00:00:38,899
type and I'll give it a name. It's exactly
the same with an array,

11
00:00:38,899 --> 00:00:44,365
I must declare a variable of array type.
Here I must indicate the type

12
00:00:44,365 --> 00:00:47,418
of the elements contained in the array
and the fact that it's an array is

13
00:00:47,418 --> 00:00:52,873
indicated by this pair of brackets that
precedes the variable's declaration.

14
00:00:52,873 --> 00:00:58,816
So here we once again have a variable
name and a type that corresponds

15
00:00:58,816 --> 00:01:03,800
to the fixed-size array of integers type. In
Java, there exists an alternative syntax.

16
00:01:03,800 --> 00:01:07,826
So the instruction line we just saw can
also be written in this manner

17
00:01:07,826 --> 00:01:13,683
in Java. Just like this instruction line
corresponds to the declaration of

18
00:01:13,683 --> 00:01:17,877
a variable of double type, the instruction
lines you saw here correspond

19
00:01:17,877 --> 00:01:22,970
to the declaration of a variable "score"
of fixed-size array of integers type.

20
00:01:23,304 --> 00:01:26,646
We'll naturally ask ourselves how
we can initialize

21
00:01:26,646 --> 00:01:28,929
an array declared this way.

22
00:01:30,453 --> 00:01:33,527
Two methods are usually used
to put values

23
00:01:33,527 --> 00:01:36,732
in an array. I can put the values in
an array when

24
00:01:36,732 --> 00:01:40,672
I declare it, that's the first possible
solution. In the same manner as

25
00:01:40,672 --> 00:01:45,280
when I declare a variable of double
type, I can affect it an

26
00:01:45,280 --> 00:01:49,869
initial value, so that corresponds to
a declaration-initialization. I can do

27
00:01:49,869 --> 00:01:55,428
the same for an array, assuming

28
00:01:55,428 --> 00:01:59,353
that I initially know what elements I'm
putting into it, and I use a particular syntax:

29
00:01:59,353 --> 00:02:03,002
these curly braces that we'll see
in more detail

30
00:02:03,002 --> 00:02:07,077
later. So this corresponds to a
declaration-initializazion

31
00:02:07,077 --> 00:02:11,031
of an array that corresponds to the
situation 1. Second situation,

32
00:02:11,031 --> 00:02:16,412
exactly the same thing as for a
double, when I declare it

33
00:02:16,412 --> 00:02:23,483
and then assign it a value. I can do the
same for an  array.

34
00:02:23,483 --> 00:02:28,434
So I can simply declare it, and fill it
element by element

35
00:02:28,434 --> 00:02:31,598
in the instruction lines that follow.

36
00:02:33,454 --> 00:02:36,984
So, as we just saw, if I initially
know what elements

37
00:02:36,984 --> 00:02:40,025
I'll put in my array, when I declare it: I
can simply write a

38
00:02:40,025 --> 00:02:43,391
unique declaration-initialization
instruction line to

39
00:02:43,391 --> 00:02:48,461
declare an array and put values in it.
Concretely, here

40
00:02:48,461 --> 00:02:53,835
are the steps to observe. I must declare
an array, which I do

41
00:02:53,835 --> 00:02:58,913
like this. Then, I must indicate
the elements

42
00:02:58,913 --> 00:03:05,826
to put in the array, between curly
braces. And then I must put elements

43
00:03:05,826 --> 00:03:12,570
in this array, and every element
will be separated

44
00:03:12,570 --> 00:03:17,775
by a comma. So here are the different
syntactic rules that I

45
00:03:17,775 --> 00:03:22,947
must follow to declare-initialize a
fixed-size array in Java.

46
00:03:24,173 --> 00:03:26,728
Let's see what memory situation
this corresponds to.

47
00:03:26,728 --> 00:03:31,379
Before studying in detail the notion
of fixed-size arrays in Java,

48
00:03:31,379 --> 00:03:35,187
and as we are beginning to manipulate
advanced types of data, it is 

49
00:03:35,187 --> 00:03:38,994
important to understand that in Java,
the basic types of data and the

50
00:03:38,994 --> 00:03:42,867
composed, advanced types of data,
aren't stored the same way

51
00:03:42,867 --> 00:03:49,352
in memory. For example, if I declare
a variable "x" of elementary

52
00:03:49,384 --> 00:03:53,581
type, you must know that when I
manipulate a variable of a basic type,

53
00:03:53,581 --> 00:03:57,355
well, that variable will directly store
that value. What we can observe

54
00:03:57,355 --> 00:04:03,440
in this little diagram, the variable "x"
directly stores the value associated

55
00:04:03,440 --> 00:04:07,629
with it. This isn't the case when I
begin manipulating data

56
00:04:07,629 --> 00:04:09,074
of advanced types.

57
00:04:09,431 --> 00:04:12,401
Data of advanced types, like
arrays or strings of

58
00:04:12,401 --> 00:04:17,582
characters, which we'll see in
future episodes, are in fact

59
00:04:17,582 --> 00:04:21,137
stored by using references, indirections,
addresses.

60
00:04:21,316 --> 00:04:25,899
For example, if I declare a variable of
type "string of characters", we'll

61
00:04:25,899 --> 00:04:30,453
see that there exists a type for that,
called String, so the memory

62
00:04:30,453 --> 00:04:34,992
situation is the following: the variable "v"
doesn't directly store the associated

63
00:04:34,992 --> 00:04:40,822
sequence of characters value, but it stores
a reference, an address, to the

64
00:04:40,822 --> 00:04:46,267
sequence of characters in question. And
this has a strong incidence on

65
00:04:46,267 --> 00:04:50,557
the semantic of assignments in Java.
Imagine, for example, that I assign

66
00:04:50,557 --> 00:04:55,201
a variable "v2" to a variable "v1", what does
this concretely

67
00:04:55,201 --> 00:05:00,481
mean? Am I modifying the stored
reference in "v1"?

68
00:05:00,481 --> 00:05:04,239
Or am I modifying the object
referenced by "v1"?

69
00:05:04,239 --> 00:05:09,423
In the same way, the "==" operator's
semantic is also

70
00:05:09,423 --> 00:05:14,612
impacted. What does comparing "v1" and
"v2" mean? Am I comparing

71
00:05:14,612 --> 00:05:18,715
references? Am I comparing the pointed
sequences of characters?

72
00:05:18,715 --> 00:05:22,028
We'll see that there also exists an
incidence on the printing.

73
00:05:22,028 --> 00:05:27,853
For example, if I print an object of
composed type. What am I trying

74
00:05:27,853 --> 00:05:33,664
to print? An address? Or the [content of the]
referenced object? So all these questions

75
00:05:33,664 --> 00:05:37,131
will arise when I manipulate composed
type objects in a

76
00:05:37,131 --> 00:05:41,237
Java program.

77
00:05:41,237 --> 00:05:43,986
In Java, an array is an advanced type
data, it is therefore manipulated

78
00:05:43,986 --> 00:05:47,714
through an indirection, a reference. So
if I declare-initialize

79
00:05:47,714 --> 00:05:51,633
for example a variable "score" of
fixed-size array of

80
00:05:51,633 --> 00:05:55,913
integers type in this manner here, the
memory situation will be the following:

81
00:05:55,913 --> 00:06:00,812
the variable "score" doesn't directly
contain the array's values,

82
00:06:00,812 --> 00:06:04,893
it contains an indirection, a reference, an
address to the array.

83
00:06:04,893 --> 00:06:09,642
We suppose that the array's address
is here. In the variable "score"

84
00:06:09,642 --> 00:06:15,236
I only store the reference to this array.
In jargon terms,

85
00:06:15,236 --> 00:06:20,140
we'll say that the variable "score" "references"
or "points to" an array of int.

86
00:06:22,143 --> 00:06:24,940
We just saw how it is possible to
declare-initialize a fixed-size

87
00:06:24,940 --> 00:06:28,612
array in a single instruction line, in Java.
This presupposes that we initially

88
00:06:28,612 --> 00:06:31,396
know what values to put in the array.
In the most general case,

89
00:06:31,396 --> 00:06:35,287
we don't know these values and therefore
we must separate the declaration

90
00:06:35,287 --> 00:06:40,416
instruction from the effective fill of
the array. That's how we proceed

91
00:06:40,416 --> 00:06:45,514
in that case. So we begin by declaring
our variable of array type,

92
00:06:45,514 --> 00:06:52,343
here a fixed-size array of integers. Then,
we must allocate the memory

93
00:06:52,343 --> 00:06:56,651
locations, reserve memory locations for our
array. This is done in the

94
00:06:56,651 --> 00:07:01,943
following manner: we use the reserved word
"new"; we then indicate

95
00:07:01,943 --> 00:07:05,582
the type of the values that we want to
store in the array, then in

96
00:07:05,582 --> 00:07:10,845
brackets, the size of the array when
it was constructed.

97
00:07:10,845 --> 00:07:14,711
So what you must know is that once
the size is allocated,

98
00:07:14,711 --> 00:07:18,420
this size can't change during the
program's execution, that's why

99
00:07:18,420 --> 00:07:20,948
we call these arrays, fixed-size
arrays.

100
00:07:20,948 --> 00:07:27,737
So second step, we must allocate the
reserved memory locations

101
00:07:27,737 --> 00:07:33,034
for the array. At this stage, I'm in the
following situation:

102
00:07:33,034 --> 00:07:38,565
I have a variable "score" that contains a
reference, an indirection, to an

103
00:07:38,565 --> 00:07:44,199
array. This array contains four elements.
What will these elements' values

104
00:07:44,199 --> 00:07:45,866
be at this stage?

105
00:07:46,223 --> 00:07:48,899
What you should know is that in Java
there exists default

106
00:07:48,899 --> 00:07:52,599
values that are put in arrays when they
are constructed.

107
00:07:52,599 --> 00:07:57,964
So for the previous situation we
end up with an array

108
00:07:57,964 --> 00:08:04,777
that contains zeroes. The default values
are 0 for int and double types,

109
00:08:04,777 --> 00:08:10,323
False for boolean, and there exists other
dedicated values for other types

110
00:08:10,323 --> 00:08:11,917
of data.

111
00:08:12,302 --> 00:08:16,426
So concretely, when an instruction line
of this nature is executed,

112
00:08:16,426 --> 00:08:21,431
we have a situation in memory where
the array looks like this.

113
00:08:21,431 --> 00:08:25,605
The default values for each cell is
zero because I am

114
00:08:25,605 --> 00:08:28,523
working with an array of integers for
which the default value

115
00:08:28,523 --> 00:08:33,454
is indeed zero. Of course, these default
values won't satisfy us in

116
00:08:33,454 --> 00:08:37,832
most cases, so the third step will
consist in

117
00:08:37,832 --> 00:08:42,274
filling the array element by element, which
implies taking interest in how

118
00:08:42,274 --> 00:08:47,152
to access every cell of the array to
put a dedicated value into it.

119
00:08:49,132 --> 00:08:53,298
The mechanism by which I can access
the i-th cell of an array is the

120
00:08:53,298 --> 00:08:58,409
indexation mechanism. I use the
following syntax: I indicate the

121
00:08:58,409 --> 00:09:02,554
index, the number of the cell I want
to access. What you must

122
00:09:02,554 --> 00:09:06,668
know is that in Java, the index, the
cells' number, varies between 0

123
00:09:06,668 --> 00:09:11,120
and T - 1, where T is the size of the array.
For example, if I declare an array of

124
00:09:11,120 --> 00:09:17,028
integers "tab" in a program, and that I
allocate an initial size of 10 to it,

125
00:09:17,191 --> 00:09:24,411
as it is done here, then the
first element

126
00:09:24,411 --> 00:09:29,608
of the array corresponds to the index 0
and the last element of the array will

127
00:09:29,608 --> 00:09:35,002
correspond to the index 9. With
this notation, I can alter, modify

128
00:09:35,002 --> 00:09:39,882
the content of a given cell, for example
by writing this. It is

129
00:09:39,882 --> 00:09:44,793
important to note that if you overflow
the index of the intitially

130
00:09:44,793 --> 00:09:48,132
allocated size, "an exception will be thrown",
as we say.

131
00:09:48,132 --> 00:09:52,036
At this stage of your learning, this
will probably result in an

132
00:09:52,036 --> 00:09:57,190
abrupt stop of your program. So here
for example,

133
00:09:57,190 --> 00:10:03,994
if I try and access a cell that is outside
the licit indexes, given

134
00:10:03,994 --> 00:10:08,535
that the last licit index is 9 for an
array of size 10, we'll get an

135
00:10:08,535 --> 00:10:11,485
error during the program's execution.

136
00:10:14,115 --> 00:10:17,408
To come back to the initialization of arrays,
here's a small example showing

137
00:10:17,408 --> 00:10:20,686
how to fill an array element by element
using the indexation

138
00:10:20,686 --> 00:10:24,342
mechanism. This presupposes that we
have declared the array, that we

139
00:10:24,342 --> 00:10:28,338
constructed, beforehand. During the
construction, we indicate the array's

140
00:10:28,338 --> 00:10:31,923
size and that size can't change
during the program's

141
00:10:31,923 --> 00:10:34,051
execution, that's why we talk about
fixed-size arrays.

142
00:10:34,051 --> 00:10:38,176
Then, using indexation, it is possible
to fill the array cell

143
00:10:38,176 --> 00:10:41,386
by cell, like we do in this sequence
of instruction lines.

144
00:10:41,431 --> 00:10:46,111
Here, we'll finally reach this memory
situation: the variable

145
00:10:46,152 --> 00:10:50,078
"score" contains a reference to an
array that looks like this.

146
00:10:50,078 --> 00:10:55,429
The array is such that at the cell of index
0, there's the value 1000. It's what

147
00:10:55,429 --> 00:10:59,741
we initialized with this instruction line,
and at the cell of index 3,

148
00:10:59,741 --> 00:11:04,879
the last cell, we have the value 6450, it's
what we

149
00:11:04,879 --> 00:11:07,618
obtained through this instruction line.
