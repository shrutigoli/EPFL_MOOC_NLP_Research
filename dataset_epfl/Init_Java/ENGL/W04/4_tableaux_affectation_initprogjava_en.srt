1
00:00:03,913 --> 00:00:06,794
We'll now see what an assignment
means

2
00:00:06,966 --> 00:00:08,571
when used with arrays.

3
00:00:08,855 --> 00:00:11,838
To achieve this, it is necessary to
come back on our discussion

4
00:00:12,038 --> 00:00:14,702
comparing the basic types and the
advanced types in Java.

5
00:00:16,617 --> 00:00:19,219
Let's assume that we have two
variables a and b, of

6
00:00:19,693 --> 00:00:23,993
sometimes basic types,
for example here a and b are integers,

7
00:00:24,169 --> 00:00:27,001
and sometimes advanced
types; there we'll suppose

8
00:00:27,164 --> 00:00:28,697
that a and b are arrays.

9
00:00:30,267 --> 00:00:34,515
What will writing a = b mean in
both cases?

10
00:00:34,955 --> 00:00:38,641
Here we imagine, for example, that
b initially contains 2,

11
00:00:38,799 --> 00:00:41,961
and that there, b initially contains
a reference to an array.

12
00:00:42,786 --> 00:00:47,083
So if I execute an assignment
in the case of basic types,

13
00:00:47,392 --> 00:00:52,119
I find myself in the situation where a
eventually contains the same value as b.

14
00:00:53,632 --> 00:00:57,523
It's the same in this case there:
if I execute this instruction line,

15
00:00:57,540 --> 00:01:01,067
I'll copy in a the same value as b,

16
00:01:01,067 --> 00:01:04,475
that is a reference to the same array,
in our case.

17
00:01:05,301 --> 00:01:08,178
For a basic type, doing this
assignment

18
00:01:08,403 --> 00:01:11,390
doesn't introduce any particular
relation between "a" and "b".

19
00:01:11,729 --> 00:01:17,777
For example, if I decide afterwards to
modify "a" with an assignment

20
00:01:17,936 --> 00:01:21,672
such as this one, this obviously
doesn't have any incidence on "b".

21
00:01:22,687 --> 00:01:24,842
A different situation arises

22
00:01:24,842 --> 00:01:28,107
for arrays containing the referenced
object.

23
00:01:28,107 --> 00:01:32,062
When I achieve this kind of assignment,
it becomes possible to modify

24
00:01:32,227 --> 00:01:36,028
the array referenced both by
"a" and "b".

25
00:01:36,296 --> 00:01:41,572
Which means that if I write here
a[0] = 300,

26
00:01:41,572 --> 00:01:44,896
b[0] will also have the value 300.

27
00:01:47,891 --> 00:01:51,454
So, in the case of basic types, there's
a true autonomy

28
00:01:51,689 --> 00:01:55,329
between the two objects, the
modification of one of the objects

29
00:01:55,542 --> 00:01:57,852
has absolutely no incidence
on the other one.

30
00:01:58,156 --> 00:02:01,446
On the other side, when I do an
assignment on objects

31
00:02:01,446 --> 00:02:04,701
such as arrays, there'll be
a dependency

32
00:02:04,702 --> 00:02:06,789
relative to the referenced object.

33
00:02:07,630 --> 00:02:09,854
The message here is that, unlike
basic types,

34
00:02:10,089 --> 00:02:14,652
to do an assignment between two
variables of array type creates

35
00:02:14,652 --> 00:02:16,706
a dependancy between these
two objects.

36
00:02:16,756 --> 00:02:20,148
Here, we begin with a situation where
we initially have two completely

37
00:02:20,148 --> 00:02:23,848
distinct arrays, which are autonomous in
memory, so a first variable "a"

38
00:02:24,079 --> 00:02:26,620
that contains a reference to the
10-cell array,

39
00:02:28,533 --> 00:02:31,397
and a second variable "b" that
contains a reference

40
00:02:31,623 --> 00:02:35,092
to a second array with 10 cells,
initially completely autonmous.

41
00:02:35,741 --> 00:02:38,803
So we begin by filling the array "a",
simply

42
00:02:38,803 --> 00:02:41,663
with a for-loop, by putting in each
cell the same values

43
00:02:41,663 --> 00:02:44,463
as the indexes. So we end up with
this situation in memory;

44
00:02:45,855 --> 00:02:49,307
and we execute our much vaunted
assignment of "a" into "b".

45
00:02:49,690 --> 00:02:53,653
So with this assignment, we'll put
in "b" the same address

46
00:02:53,787 --> 00:02:58,654
than the one in "a", which means that
now on "b"

47
00:02:58,800 --> 00:02:59,687
will point to this array.

48
00:03:00,124 --> 00:03:03,394
This relation is broken, these memory
locations aren't accessible anymore.

49
00:03:03,914 --> 00:03:10,513
And here, if I modify the third entry
of the array via "a",

50
00:03:10,704 --> 00:03:14,225
I see that the same array's entry
accessed via "b" is also modified.

51
00:03:16,278 --> 00:03:19,254
We therefore see that the assignment
of two arrays with =

52
00:03:19,625 --> 00:03:21,734
only makes sense if we want
to have

53
00:03:21,858 --> 00:03:23,658
two different names for a
same array,

54
00:03:23,900 --> 00:03:24,980
which is relatevly rare.

55
00:03:25,536 --> 00:03:29,176
In the most general case, with an
assignment we want

56
00:03:29,301 --> 00:03:33,388
to ensure that each cell of the array "b"
is put in corresponding

57
00:03:33,510 --> 00:03:36,990
cells of the array "a", while
ensuring that

58
00:03:37,228 --> 00:03:39,124
both array keeps their autonomy.

59
00:03:39,353 --> 00:03:42,350
For such a situationt, it is better to
proceed with a loop,

60
00:03:42,559 --> 00:03:46,557
which will allow us to copy each
value from the first array's cells

61
00:03:46,712 --> 00:03:50,213
to the corresponding cells of the second
array,

62
00:03:50,513 --> 00:03:54,191
paying attention to stay between the
licit bounds!

63
00:03:55,151 --> 00:03:59,184
So if, for example, we choose as
break condition the size of the

64
00:03:59,310 --> 00:04:02,729
array "a", well, in order for this loop
to not commit any error,

65
00:04:02,944 --> 00:04:07,516
it will be necessary for the size of "b"
to be at least equal to the size of "a";

66
00:04:07,709 --> 00:04:10,343
otherwise we'd have to formulate
the break condition

67
00:04:10,442 --> 00:04:13,129
in a slightly different manner.

68
00:04:13,305 --> 00:04:15,941
You can now easily understand that
the fact that arrays in Java

69
00:04:16,068 --> 00:04:18,217
are manipulated through references
also has

70
00:04:18,417 --> 00:04:21,760
an impact on the semantic of the
'==' comparison operator.

71
00:04:22,136 --> 00:04:26,875
If "a" and "b" are two arrays,
comparing them with ==

72
00:04:27,047 --> 00:04:29,768
will, of course, compare the
references, and not

73
00:04:29,768 --> 00:04:31,862
the content of the arrays.

74
00:04:31,862 --> 00:04:36,018
So here I'm in the situation where
I have "a", which is an array,

75
00:04:36,018 --> 00:04:40,733
so it contains a reference to the
array, and same for "b";

76
00:04:45,231 --> 00:04:51,449
so a == b will return true only if
the same reference is effectively

77
00:04:51,449 --> 00:04:53,075
contained in the two objects "a" and "b";

78
00:04:53,461 --> 00:04:55,678
when they both point to the same
memory address,

79
00:04:55,940 --> 00:04:59,104
which is obviously the case when
I've done an assignment of this

80
00:04:59,104 --> 00:04:59,947
kind beforehand.

81
00:05:00,247 --> 00:05:05,992
So the == operator applied to arrays
doesn't test the equality

82
00:05:05,992 --> 00:05:08,674
of the content of the arrays pointed
by "a" and "b".

83
00:05:09,596 --> 00:05:12,312
If we want to compare the contents,
we must, like before

84
00:05:12,312 --> 00:05:15,766
for the assignment, proceed
with an iteration.

85
00:05:18,051 --> 00:05:20,840
So if we rather want to compare the
content of the two arrays,

86
00:05:20,840 --> 00:05:23,648
we'll have to write a number of
instruction lines to test

87
00:05:23,648 --> 00:05:24,645
if it's the case or not.

88
00:05:25,061 --> 00:05:28,561
We can for example begin by
testing if the arrays

89
00:05:28,561 --> 00:05:30,912
have the same size; if it's not
the case,

90
00:05:30,912 --> 00:05:33,263
we are sure that the content
isn't the same.

91
00:05:33,263 --> 00:05:35,615
We'll usually also take the
precaution

92
00:05:35,615 --> 00:05:38,931
of comparing the arrays with the
special reference,

93
00:05:38,931 --> 00:05:42,247
the reserved word

94
00:05:42,247 --> 00:05:45,564
"null". "null" is a special
value that can be assigned

95
00:05:45,564 --> 00:05:48,856
to an array and that indicates that the
array doesn't reference anything.

96
00:05:49,236 --> 00:05:51,326
We usually take this precaution too.

97
00:05:51,614 --> 00:05:56,279
So if the arrays don't reference anything,
or if they're of different sizes,

98
00:05:56,279 --> 00:05:59,907
then we can immediately say that
their content is different.

99
00:06:02,035 --> 00:06:05,994
Otherwise, we can suppose that their
content is possibly the same,

100
00:06:05,994 --> 00:06:10,124
but we'll have to test it, and we'll have
to iterate over the entire

101
00:06:10,124 --> 00:06:14,774
array and test cell by cell if the
content of the two are identic.

102
00:06:15,325 --> 00:06:19,045
If we exit the loop because of
the first condition,

103
00:06:19,045 --> 00:06:23,999
it means that we've iterated over
the entire array

104
00:06:23,999 --> 00:06:27,351
and that the condition was always
true cell by cell,

105
00:06:27,518 --> 00:06:30,728
so we can assert that the
contents were the same. 

106
00:06:31,081 --> 00:06:34,742
Otherwise, well we're in the situation
where the contents are different.

107
00:06:36,559 --> 00:06:39,485
To conclude this presentation about
fixed-size arrays in Java,

108
00:06:39,543 --> 00:06:42,003
here are a few simple examples of
standard routine manipulations,

109
00:06:42,028 --> 00:06:45,803
like for example printing the content
of an array or inputing

110
00:06:45,803 --> 00:06:46,895
the content of an array.

111
00:06:48,117 --> 00:06:51,896
We suppose here that we have initially
declared a variable "table" that can

112
00:06:51,896 --> 00:06:54,642
contain a number of double-type values.

113
00:06:54,882 --> 00:06:59,108
We also suppose that, later, the
program took care of filling

114
00:06:59,108 --> 00:07:02,534
the array with values that we consider
as appropriate, for example

115
00:07:02,534 --> 00:07:06,742
with assignments of this nature, and
we want to print

116
00:07:06,742 --> 00:07:08,207
the content of the array.

117
00:07:09,143 --> 00:07:12,273
To achieve that, it is necessary to
resort to iterations, for-loops,

118
00:07:12,273 --> 00:07:15,992
which will allow us to iterate over the entire
set of values of an array and print them

119
00:07:15,992 --> 00:07:20,544
one by one. The type of for-loop to choose,
we saw that there exists two of them,

120
00:07:20,544 --> 00:07:24,130
will in fact depend of the situation:
will we need to explicit

121
00:07:24,130 --> 00:07:27,573
the indexes or not. In the case where
it is not necessary

122
00:07:27,573 --> 00:07:30,403
to explicit the indexes, we can
use a for-loop

123
00:07:30,403 --> 00:07:33,233
of type "iteration on a set of values".

124
00:07:33,233 --> 00:07:36,064
We saw that for this kind of
for-loop, we must declare

125
00:07:36,080 --> 00:07:38,974
a variable of the same type as
the array's elements.

126
00:07:38,974 --> 00:07:42,873
This variable will alternately take
the different values of the array

127
00:07:42,873 --> 00:07:46,674
and we'll be able to print them
simply like this.

128
00:07:46,758 --> 00:07:50,698
Contrariwise, if we need to explicit
the indexes, then we'll resort to

129
00:07:50,753 --> 00:07:55,095
a standard for-loop, and at that moment
we have to declare an index

130
00:07:55,095 --> 00:07:58,356
that will vary from zero to the
array's size.

131
00:07:58,356 --> 00:08:00,226
We saw that the array's size
is expressed by

132
00:08:00,226 --> 00:08:03,776
this particular notation. Knowing
that the array's indexes

133
00:08:03,776 --> 00:08:07,738
go from zero to size-1, we'll have
to take the precaution

134
00:08:07,738 --> 00:08:12,296
of stopping just before the array's
size, and of course, we'll have

135
00:08:12,296 --> 00:08:16,599
to move the index forward while we
progress in the array.

136
00:08:16,883 --> 00:08:19,980
So at that moment, we can
print both the index,

137
00:08:19,980 --> 00:08:22,754
as it is explicit, and the corresponding
value.

138
00:08:24,409 --> 00:08:27,079
Second example, the input of the
array's elements

139
00:08:27,079 --> 00:08:31,744
with a keyboard interaction. We saw
that the range for-loop (iteration

140
00:08:31,744 --> 00:08:35,536
on a set of values) doesn't allow us
to modify the content of the array.

141
00:08:35,536 --> 00:08:37,262
So for this we don't have a choice,

142
00:08:37,262 --> 00:08:40,987
it is absolutely essential to explicit
the indexes in Java.

143
00:08:41,187 --> 00:08:44,221
Here, we'll therefore resort to a
standard for-loop,

144
00:08:44,221 --> 00:08:47,904
iterating, like before, from zero
to the array's size

145
00:08:47,904 --> 00:08:52,403
and stopping one index before, to
avoid overflow,

146
00:08:52,403 --> 00:08:55,991
and at that moment we can input
each value of the array separately

147
00:08:56,021 --> 00:09:00,040
with a standard keyboard input, as
we have already

148
00:09:00,157 --> 00:09:01,765
done previously.
