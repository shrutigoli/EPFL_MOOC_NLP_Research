1
00:00:03,557 --> 00:00:06,666
We now know how to declare and
initialize a fixed-size array.

2
00:00:06,666 --> 00:00:09,440
We'll have a look at the different
classical manipulations

3
00:00:09,440 --> 00:00:10,983
that we can do on such arrays.

4
00:00:10,983 --> 00:00:13,419
First manipulation: printing an array.

5
00:00:13,419 --> 00:00:17,407
Let's imagine for example that we
have declared and initialized

6
00:00:17,407 --> 00:00:20,190
an array t1 this way.

7
00:00:20,190 --> 00:00:23,405
We'll have the following situation
in memory:

8
00:00:23,405 --> 00:00:28,540
In the variable t1, we have a reference,
an address to the array.

9
00:00:28,540 --> 00:00:32,677
The array is initialized in this manner.

10
00:00:32,677 --> 00:00:35,672
Now let's suppose that I want to print
the array by simply using

11
00:00:35,672 --> 00:00:37,428
an instruction line like this one.

12
00:00:37,428 --> 00:00:40,822
I pass as argument to 
System.out.println,

13
00:00:40,822 --> 00:00:43,275
the array t1 that I want to print.

14
00:00:43,275 --> 00:00:46,305
Here, I'm going to print the
content of t1

15
00:00:46,305 --> 00:00:47,865
which is a reference.

16
00:00:47,865 --> 00:00:51,590
This will translate into printing
something a little strange

17
00:00:51,590 --> 00:00:53,004
which will look like this.

18
00:00:53,004 --> 00:00:59,450
Something like fe25235d, which will
correspond to something

19
00:00:59,450 --> 00:01:01,560
that is a reference to an array,

20
00:01:01,560 --> 00:01:03,407
something not very understandable.

21
00:01:03,427 --> 00:01:07,694
In reality, what we want to do is
printing the content of the array.

22
00:01:07,900 --> 00:01:12,849
To achieve this, we have no other choice
than to provide a loop to iterate

23
00:01:12,849 --> 00:01:16,442
over each element of the array, and
print them one by one.

24
00:01:18,267 --> 00:01:21,468
Let's suppose that we want to print
each element of an array.

25
00:01:21,468 --> 00:01:25,194
Let's imagine that this array has initially
been declared this way.

26
00:01:25,194 --> 00:01:27,397
It's an array of integers.

27
00:01:27,397 --> 00:01:30,984
How do we iterate over such an array
to print each cell?

28
00:01:30,984 --> 00:01:34,254
Well, we've got two conventional
solutions.

29
00:01:34,254 --> 00:01:38,708
The first is what is called "iteration over a set of values"

30
00:01:38,708 --> 00:01:40,181
and which will be written like this.

31
00:01:40,181 --> 00:01:46,760
The reserved word for and the array's
values's type in parenthesis,

32
00:01:46,760 --> 00:01:50,194
which obviously has to be of the same
type as what we specified here.

33
00:01:51,085 --> 00:01:53,147
We then have to give a variable
name

34
00:01:53,172 --> 00:01:56,204
that will allow us to designate
an array's cell.

35
00:01:57,708 --> 00:02:00,744
Then, after a colon, we must indicate
the array

36
00:02:00,744 --> 00:02:02,370
over which we want to iterate.

37
00:02:02,370 --> 00:02:06,435
After that, to print the current cell,
we just have to

38
00:02:06,435 --> 00:02:09,809
write this sort of instruction line.

39
00:02:09,809 --> 00:02:13,287
In fact, val will take each element of the
array turn by turn

40
00:02:13,287 --> 00:02:17,102
and we'll print them in sequence
one after the other

41
00:02:17,102 --> 00:02:19,613
with this iteration over the set
of values.

42
00:02:19,613 --> 00:02:23,951
The even more standard solution
is to use a for

43
00:02:23,951 --> 00:02:26,054
as we know it so far.

44
00:02:26,054 --> 00:02:31,033
A for that uses an index, which will
go from 0

45
00:02:31,033 --> 00:02:33,143
to the array's size.

46
00:02:33,143 --> 00:02:35,658
Here, this way of specifying the size
isn't great

47
00:02:35,658 --> 00:02:38,910
because it is uncorrelated to
the array itself.

48
00:02:38,910 --> 00:02:40,825
We have hard coded the value 3.

49
00:02:40,825 --> 00:02:43,203
The question of how to specify this size

50
00:02:43,203 --> 00:02:45,447
in a cleaner way will arise.

51
00:02:45,447 --> 00:02:46,752
We'll see that later.

52
00:02:46,752 --> 00:02:51,611
So we move on with our index to
iterate over every cell of the array.

53
00:02:51,611 --> 00:02:56,492
We access the arrays' cells with
the indexation mechanism.

54
00:02:58,232 --> 00:03:01,666
To sum up, if we wish to iterate over
each value of an array

55
00:03:01,666 --> 00:03:03,381
we dispose of tools such as

56
00:03:03,668 --> 00:03:05,965
the iterations over a set of values.

57
00:03:05,965 --> 00:03:09,069
We have just seen a concrete example
of it.

58
00:03:09,069 --> 00:03:12,403
We can also use a standard for
iteration.

59
00:03:12,472 --> 00:03:15,721
At that moment, the problem of
the computation of

60
00:03:15,736 --> 00:03:17,500
the array's size arises,

61
00:03:17,517 --> 00:03:19,484
which we'll see further.

62
00:03:19,484 --> 00:03:22,544
In reality there exists a third way
of iterating over an array,

63
00:03:22,544 --> 00:03:24,517
the one that uses the notion
of iterator.

64
00:03:24,517 --> 00:03:27,683
But this notion isn't presented in
the context of this course.

65
00:03:27,683 --> 00:03:31,861
Let's come back to the question at hand
concerning standard iterations:

66
00:03:31,861 --> 00:03:35,366
how can we specify the size of
a fixed-size array?

67
00:03:35,366 --> 00:03:36,990
How can we recover this size?

68
00:03:36,990 --> 00:03:39,699
In Java, it is possible to get get
the size of an array

69
00:03:39,699 --> 00:03:41,015
from it's name.

70
00:03:41,015 --> 00:03:43,181
To achieve this it is necessary to
resort to a particular notation.

71
00:03:43,181 --> 00:03:45,600
This notation is the following:

72
00:03:45,600 --> 00:03:49,142
I use the array's name, followed
by a point,

73
00:03:49,142 --> 00:03:50,877
followed by the reserved word
'length'.

74
00:03:50,877 --> 00:03:52,257
Here's a concrete example:

75
00:03:52,257 --> 00:03:56,002
I declare/initialize an array scores
that contains four elements.

76
00:03:56,002 --> 00:03:58,637
If I want to print the array's
size,

77
00:03:58,637 --> 00:04:01,258
I just have to resort to the notation
I've just described.

78
00:04:01,258 --> 00:04:04,789
So the array's name, followed by a
point, followed by 'length'

79
00:04:04,789 --> 00:04:07,211
which will, here, obviously, print 4.

80
00:04:07,211 --> 00:04:11,512
An analogous example here, with an array
of booleans with two entries.

81
00:04:12,950 --> 00:04:16,101
It is important to note here that length
will always give you

82
00:04:16,101 --> 00:04:17,648
the possible number of elements

83
00:04:17,648 --> 00:04:20,388
and that the effective number of
filled cells isn't important.

84
00:04:20,388 --> 00:04:24,124
The fact that you explicitly put values
or not

85
00:04:24,124 --> 00:04:25,572
isn't taken into account.

86
00:04:25,572 --> 00:04:27,101
Here's a concrete example:

87
00:04:27,101 --> 00:04:30,332
Here we declare an array without
initializing it

88
00:04:30,332 --> 00:04:32,736
with concrete, effective values.

89
00:04:32,736 --> 00:04:36,861
Neither with an assignment of
this type,

90
00:04:38,601 --> 00:04:43,577
nor with the assignment of a global
array with a certain number of elements.

91
00:04:45,427 --> 00:04:48,106
I haven't put any explicit values
in my array.

92
00:04:48,463 --> 00:04:51,257
However, if I print the
array's size,

93
00:04:51,257 --> 00:04:52,764
I get 2 indeed. Why?

94
00:04:52,764 --> 00:04:55,165
Because here, when I construct
the array,

95
00:04:55,165 --> 00:04:58,550
I allocate a size of 2 to it.

96
00:04:58,550 --> 00:05:01,956
Which means that I'll have this
situation in memory.

97
00:05:02,319 --> 00:05:05,854
The variable score is a reference to
an array with two entries.

98
00:05:05,854 --> 00:05:10,790
And we know that by default, these
entries are initialzed with 0 for integers.

99
00:05:10,790 --> 00:05:14,482
So we are effectively dealing with a
fixed-size array,

100
00:05:14,482 --> 00:05:15,915
containing two entries.

101
00:05:15,915 --> 00:05:17,960
length will give us this size.

102
00:05:17,960 --> 00:05:21,223
No matter whether we initialized it with
explicit values or not.

103
00:05:23,023 --> 00:05:26,519
We were interested in how to iterate
over the entire set of values of an array.

104
00:05:26,519 --> 00:05:29,353
We saw that it is possible to do it
with a standard for-loop

105
00:05:29,353 --> 00:05:31,283
which lead us to discuss about
the problem

106
00:05:31,283 --> 00:05:33,270
of the computation of the array's
size.

107
00:05:33,270 --> 00:05:35,799
But before concluding the chapter on
iterations

108
00:05:35,799 --> 00:05:38,414
let's come back to the other type
of iteration,

109
00:05:38,414 --> 00:05:41,372
the for-loops allow us to iterate
over a set of values.

110
00:05:42,512 --> 00:05:45,029
We saw that this kind of for-loops
are written like this.

111
00:05:45,406 --> 00:05:48,136
We can easily see that it's
a very simple and elegant

112
00:05:48,136 --> 00:05:49,685
way of iterating.

113
00:05:49,725 --> 00:05:51,935
We don't even have to worry about
the array's size.

114
00:05:51,935 --> 00:05:54,639
However, there exists a certain
number of limitations

115
00:05:54,639 --> 00:05:58,796
to this for-loop that we don't encounter
with the standard iteration

116
00:05:58,796 --> 00:06:01,183
and which are the following.

117
00:06:01,823 --> 00:06:03,653
First limitation:

118
00:06:03,653 --> 00:06:07,191
an iteration on a set of values won't
allow us to modify

119
00:06:07,432 --> 00:06:08,801
the content of the array.

120
00:06:08,925 --> 00:06:12,047
So here, if I have declared/initialized
an array this way

121
00:06:12,047 --> 00:06:13,774
and that I want to iterate over
this array

122
00:06:14,046 --> 00:06:16,166
with an iteration over a set
of values.

123
00:06:16,535 --> 00:06:18,980
The fact of writing something
like this,

124
00:06:18,980 --> 00:06:23,724
won't allow us to modify the content
of the array.

125
00:06:23,724 --> 00:06:25,628
I can't modify the array

126
00:06:25,782 --> 00:06:28,352
by using a notation of
this kind.

127
00:06:28,352 --> 00:06:32,518
Second limitation: I can iterate
over one array at a time.

128
00:06:32,518 --> 00:06:35,541
So I can iterate over only one
array.

129
00:06:35,541 --> 00:06:38,660
Here, a notation of this kind
doesn't exist.

130
00:06:38,660 --> 00:06:40,523
If we want, for example, to

131
00:06:40,523 --> 00:06:44,842
iterate over two arrays at the
same time,

132
00:06:44,842 --> 00:06:46,873
with such a notation.

133
00:06:49,460 --> 00:06:52,771
To compare the values of the
first array

134
00:06:52,938 --> 00:06:56,692
with the values of the second array,
this doesn't exist.

135
00:06:56,919 --> 00:07:00,410
We won't be able, with an iteration
over a set of values

136
00:07:00,410 --> 00:07:04,352
to proceed to the simultaneous
iteration of the two arrays.

137
00:07:06,466 --> 00:07:07,503
Third limitation:

138
00:07:08,222 --> 00:07:13,331
With the variable val, with the iteration
over a set of values, I can

139
00:07:13,331 --> 00:07:15,629
only access one element at a time.

140
00:07:15,629 --> 00:07:18,502
For example, it won't be possible
to compare

141
00:07:18,502 --> 00:07:20,906
an element of the array with the one
following it.

142
00:07:20,906 --> 00:07:24,211
With val, I can access one element
at a time.

143
00:07:24,211 --> 00:07:26,058
Finally, last limitation:

144
00:07:26,389 --> 00:07:29,324
I can iterate one step
at a time only.

145
00:07:29,324 --> 00:07:33,184
For example, if I want to jump
two by two in the array,

146
00:07:33,184 --> 00:07:36,609
this isn't possible with an iteration over
a set of values.

147
00:07:36,609 --> 00:07:42,325
Note that the standard iterations don't
have any of these limitations.

148
00:07:42,325 --> 00:07:44,991
It is possible to do everything with
a standard for iteration.

149
00:07:47,081 --> 00:07:50,049
Manipulating arrays requires taking
a number of precautions.

150
00:07:50,063 --> 00:07:52,110
You should pay attention to a
number of aspects

151
00:07:52,110 --> 00:07:53,334
to not cause any errors.

152
00:07:53,334 --> 00:07:56,132
Errors either during the compilation,
or during the program's execution.

153
00:07:56,132 --> 00:07:59,716
Errors we'll encounter while learning
about arrays,

154
00:07:59,716 --> 00:08:02,916
are errors on indexes or access
errors

155
00:08:02,916 --> 00:08:04,644
before the array's construction.

156
00:08:04,644 --> 00:08:06,850
There exists other types of errors
which are related

157
00:08:06,850 --> 00:08:09,099
to the object-oriented
programming aspect

158
00:08:09,099 --> 00:08:13,212
which will be presented in an upcoming
course on object-oriented Java.

159
00:08:14,712 --> 00:08:17,650
Concerning the index problems, there
are two things to be observed.

160
00:08:17,669 --> 00:08:22,216
The first is that the index of an array
must imperatively be of int type.

161
00:08:22,216 --> 00:08:23,773
That's an integer.

162
00:08:23,773 --> 00:08:27,117
You must absolutely respect the array's
bounds, which are between

163
00:08:27,117 --> 00:08:31,036
0 and T-1, where T is the
array's size.

164
00:08:31,036 --> 00:08:34,379
Here, I declare and construct an array
of size 250.

165
00:08:34,908 --> 00:08:37,662
I commit a first error here, by trying
to use an index

166
00:08:37,826 --> 00:08:40,000
that isn't of int type.

167
00:08:40,000 --> 00:08:42,297
So it's an error on the index type.

168
00:08:42,297 --> 00:08:45,921
Here I commit a second error by
trying to use an index

169
00:08:45,921 --> 00:08:51,387
that is outside the array's bounds.

170
00:08:51,387 --> 00:08:53,061
So it's an error on the bounds.

171
00:08:53,157 --> 00:08:54,975
Likewise, an error on the bounds, here.

172
00:08:54,975 --> 00:09:01,864
We know that an array of 250 element
has indexes going from 0 to 249.

173
00:09:01,864 --> 00:09:04,903
If I use the index 250, I overflow.

174
00:09:04,903 --> 00:09:07,663
I am not in the array's bounds.

175
00:09:07,663 --> 00:09:10,478
In this case, I also have a
error on the bounds.

176
00:09:10,478 --> 00:09:14,855
Note that the first type of error is
an error that will be detectable

177
00:09:14,855 --> 00:09:17,824
by the compiler, so when I compile
the program.

178
00:09:17,824 --> 00:09:21,887
Contrariwise, the other errors
are errors that will only be

179
00:09:21,887 --> 00:09:26,260
detected during the program's
execution.

180
00:09:26,260 --> 00:09:28,431
Of course in practice, we won't
commit

181
00:09:28,431 --> 00:09:30,995
this kind of error in such
explicit ways.

182
00:09:30,995 --> 00:09:34,540
Often, it's if we get the indexes
through a computation,

183
00:09:34,540 --> 00:09:38,069
and that our computation is wrong, that
we'll end up with this kind of error.

184
00:09:38,069 --> 00:09:40,870
In general, we won't commit them
in such explicit ways.

185
00:09:42,221 --> 00:09:45,345
Another classical error: the access
before construction.

186
00:09:45,500 --> 00:09:48,860
In Java, if we want to access an
array's element through indexation,

187
00:09:48,860 --> 00:09:52,224
it is imperative that the array has
been constructed beforehand.

188
00:09:52,224 --> 00:09:54,824
An array's construction can be done,
for example,

189
00:09:54,824 --> 00:10:00,155
by directly indicating the values when
declaring the array.

190
00:10:00,155 --> 00:10:01,849
What can be seen here, with
this instruction line.

191
00:10:01,849 --> 00:10:05,618
When I declare my array, I put a number
of values into it,

192
00:10:05,618 --> 00:10:08,362
explicitly, with an assignment of
this nature.

193
00:10:08,362 --> 00:10:13,624
So obviously, here, the element of index 0
really exists.

194
00:10:13,624 --> 00:10:17,462
It is possible to access it, it is entirely
licit to proceed to this kind of access

195
00:10:17,526 --> 00:10:19,600
with the array's cell of index 0.

196
00:10:20,273 --> 00:10:22,620
Contrariwise, here, I have a
slightly different situation.

197
00:10:22,620 --> 00:10:26,450
I declare the array but I don't
construct the array,

198
00:10:26,989 --> 00:10:32,038
I don't assign initial values with an
assignment of this nature to it,

199
00:10:32,268 --> 00:10:35,893
no more than I construct the array with
this second type of instruction lines,

200
00:10:35,893 --> 00:10:38,229
which allows me to give an initial
size to it and allocate

201
00:10:38,229 --> 00:10:40,049
a number of cells to this array.

202
00:10:40,049 --> 00:10:45,413
As I don't resort to this possibility, nor
this possibility, nor this one,

203
00:10:45,413 --> 00:10:47,832
the access to a cell of the array
is impossible.

204
00:10:47,832 --> 00:10:49,380
So here I would have an error.

205
00:10:49,380 --> 00:10:52,520
So what's missing with this
instruction line

206
00:10:52,520 --> 00:10:55,621
is having built the array beforehand,
which I can do

207
00:10:55,621 --> 00:10:57,758
with a trick of this nature.

208
00:10:57,758 --> 00:10:59,321
At that moment, the problem is
resolved

209
00:10:59,321 --> 00:11:03,635
and I don't have problems of access
before construction anymore.
