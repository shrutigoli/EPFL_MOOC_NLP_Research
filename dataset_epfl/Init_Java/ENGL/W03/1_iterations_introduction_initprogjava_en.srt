1
00:00:00,000 --> 00:00:03,162
In this episode, we will discuss

2
00:00:03,162 --> 00:00:08,000
a second contol structure, namely
the iteration statements

3
00:00:08,000 --> 00:00:11,550
So, what is the use of this new
control structure?

4
00:00:11,550 --> 00:00:14,902
Let's imagine, for example, that we wish
to print the square

5
00:00:14,902 --> 00:00:18,665
of the five first integers. Namely,
we wish to print

6
00:00:18,665 --> 00:00:21,461
"0 squared is 0", "1 squared is 1",

7
00:00:21,461 --> 00:00:24,530
"2 squared is 4" and so on,

8
00:00:24,530 --> 00:00:27,340
until "4 squared is 16".

9
00:00:27,340 --> 00:00:32,299
Naturally, we could use five printing
instructions.

10
00:00:32,299 --> 00:00:37,862
However, in such a case, we can
- we must! - 

11
00:00:37,862 --> 00:00:43,120
use an iteration, also known as
a "for loop".

12
00:00:43,120 --> 00:00:50,380
Such a code will result in the desired 
printing by

13
00:00:50,380 --> 00:00:54,505
looping, iterating, on a single printing
instruction.

14
00:00:54,505 --> 00:00:59,270
Now, let us probe this code for the 
hows and whys.

15
00:00:59,270 --> 00:01:02,546
An iteration, also known as
a "for loop",

16
00:01:02,546 --> 00:01:06,186
simpy begins with the keyword
"for".

17
00:01:06,186 --> 00:01:12,050
Then comes the declaration and
intialization

18
00:01:12,050 --> 00:01:15,699
of a variable. This variable will control
how many

19
00:01:15,699 --> 00:01:16,990
times we loop.

20
00:01:16,990 --> 00:01:21,890
This declaration and intialization is only

21
00:01:21,890 --> 00:01:24,972
executed once before entering the loop.

22
00:01:24,972 --> 00:01:30,237
Then comes something you're already
familiar with, for it is

23
00:01:30,237 --> 00:01:32,610
a condition. You encountered conditions

24
00:01:32,610 --> 00:01:35,050
during the lesson about
conditional branches.

25
00:01:35,050 --> 00:01:39,090
This condition will be tested before entering
the loop.

26
00:01:39,090 --> 00:01:41,493
If it is true, we will keep on

27
00:01:41,493 --> 00:01:46,190
executing the loop. If it is false,
we will exit the loop.

28
00:01:46,190 --> 00:01:50,840
Then comes an increment statement.

29
00:01:50,840 --> 00:01:53,550
In our example it is "++i".

30
00:01:53,550 --> 00:02:00,230
Please be reminded the increment operator
"++",

31
00:02:00,230 --> 00:02:07,255
used on a variable i, is strictly equivalent
to the instruction " i = i +1".

32
00:02:07,255 --> 00:02:09,525
That means we add 1 to the variable i.

33
00:02:09,525 --> 00:02:14,040
This increment statement will have
the variable i

34
00:02:14,040 --> 00:02:17,460
evolve, thus controlling the number
of iterations.

35
00:02:17,460 --> 00:02:24,030
It is executed once at the end
of every iteration.

36
00:02:24,030 --> 00:02:27,730
The declaration and initialization of the
controlling variable,

37
00:02:27,730 --> 00:02:32,858
the condition and the increment statement

38
00:02:32,858 --> 00:02:38,628
are written in parentheses and are
separated 

39
00:02:38,628 --> 00:02:43,642
by semicolons. Then comes

40
00:02:43,642 --> 00:02:48,618
the block of instructions;

41
00:02:48,618 --> 00:02:53,313
it is the loop's body and contains

42
00:02:53,313 --> 00:02:58,070
the instructions repeated at
every iteration.

43
00:02:58,070 --> 00:03:02,348
Similarly to the conditional statement "if",

44
00:03:02,348 --> 00:03:05,890
the braces are mandatory only

45
00:03:05,890 --> 00:03:09,977
when several instructions are to be repeated,

46
00:03:09,977 --> 00:03:13,149
namely, when the loop's body contains
several instructions.

47
00:03:13,149 --> 00:03:17,426
Therefore, if we only wish to have
instruction repeated -as we do here-

48
00:03:17,426 --> 00:03:22,580
we can discared the braces
here and here.

49
00:03:22,580 --> 00:03:23,690
However,

50
00:03:23,690 --> 00:03:28,994
even in such a case, we strongly advice 
to use braces. Namely,

51
00:03:28,994 --> 00:03:32,296
adding an oepning brace here, before
the instruction,

52
00:03:32,296 --> 00:03:35,640
and a closing brace here, after the
instruction.

53
00:03:35,640 --> 00:03:39,776
Now, let us detail step by step
the execution

54
00:03:39,776 --> 00:03:42,820
of our first "for loop" example.

55
00:03:42,820 --> 00:03:46,084
First of all, the loop 

56
00:03:46,084 --> 00:03:49,858
declares a variable i and 
initializes it

57
00:03:49,858 --> 00:03:51,691
to the value 0.

58
00:03:51,691 --> 00:03:59,755
Then, we test the condition. Here, the
condition is "i strictly less than 5".

59
00:03:59,755 --> 00:04:05,159
The condition is true. Indeed,
i is 0 and

60
00:04:05,159 --> 00:04:11,010
0 is strictly less than 5. Therefore,
we can enter the loop's body.

61
00:04:11,010 --> 00:04:15,420
Entering the loop's body means executing

62
00:04:15,420 --> 00:04:21,260
this instruction here. In our example,
it is the only instruction within the loop's body.

63
00:04:21,260 --> 00:04:25,590
This instruction will print "the square of"

64
00:04:25,590 --> 00:04:28,225
following by i's value, which is 0,

65
00:04:28,225 --> 00:04:32,059
followed by "vaut" (= "is"/"has value"), followed by the 
value of the expresion

66
00:04:32,059 --> 00:04:36,250
i*i, which is simply 0.

67
00:04:36,250 --> 00:04:40,772
Then, we reach the end of the loop's
body.

68
00:04:40,772 --> 00:04:45,693
So we jump back to this line,

69
00:04:45,693 --> 00:04:50,969
more precisely to the increment 
statement ++i.

70
00:04:50,969 --> 00:04:56,450
We will add 1 to i's value :
i is now 1.

71
00:04:56,450 --> 00:05:01,156
Now, we test the condition

72
00:05:01,156 --> 00:05:05,796
"i strictly less than 5", which is

73
00:05:05,796 --> 00:05:11,150
still true and we can thus enter the loop.

74
00:05:11,150 --> 00:05:16,450
Entering the loop means
repeating this

75
00:05:16,450 --> 00:05:21,862
printing instruction : "the square of",
then i, which is now 1,

76
00:05:21,862 --> 00:05:26,199
then "vaut" and, finally, the value

77
00:05:26,199 --> 00:05:30,300
of the expression i*i, which
is obviously 1.

78
00:05:30,300 --> 00:05:31,132
Now we reach

79
00:05:31,132 --> 00:05:37,338
the increment statement again: 
i will go

80
00:05:37,338 --> 00:05:43,380
from 1 to 2 and so on until

81
00:05:43,380 --> 00:05:48,665
i has the value 4 and we execute

82
00:05:48,665 --> 00:05:53,150
the increment statement, rising
i's value to 5.

83
00:05:53,150 --> 00:05:56,820
We will test the condition

84
00:05:56,820 --> 00:06:02,636
"i strictly less than 5".
This time,

85
00:06:02,636 --> 00:06:08,290
the condition is false, for 
5 is not strictly less than 5.

86
00:06:08,290 --> 00:06:16,520
Since the condition is false,
we will exit the loop.

87
00:06:16,520 --> 00:06:22,596
That means we will resume
right after the loop 

88
00:06:22,596 --> 00:06:25,497
and execute these instructions.

89
00:06:25,497 --> 00:06:30,975
By the way, the variable i, declared
here does not exist anymore.

90
00:06:30,975 --> 00:06:33,467
Therefore, we cannot use it anymore.

91
00:06:33,467 --> 00:06:36,730
i does only exist within the loop.

92
00:06:36,730 --> 00:06:42,590
Let us review, the "for loop"'s
syntax.

93
00:06:42,590 --> 00:06:44,312
First of all, the keyword "for".

94
00:06:44,312 --> 00:06:48,450
then, in parentheses, the declaration
and initialization of

95
00:06:48,450 --> 00:06:51,490
a variable -its type is not necessarly int,
by the way.

96
00:06:51,490 --> 00:06:54,971
Then the condition which should,
a priori, relate

97
00:06:54,971 --> 00:06:57,984
to this variable, though it is not
mandatory.

98
00:06:57,984 --> 00:07:03,355
Then an increment statement, which 
should relate to the variable aswell.

99
00:07:03,355 --> 00:07:05,995
Finally comes the block of instructions,

100
00:07:05,995 --> 00:07:08,910
constituting the instructions repeated
by the loop.

101
00:07:08,910 --> 00:07:10,860
Please remember that the three

102
00:07:10,860 --> 00:07:13,655
elements inside the parentheses of
the

103
00:07:13,655 --> 00:07:19,370
"for loop" are separated by semicolons but
that there is no semicolon here.

104
00:07:19,370 --> 00:07:23,455
The loop repeats the instructions inside

105
00:07:23,455 --> 00:07:26,716
the block as long as the 
condition is true.

106
00:07:26,716 --> 00:07:29,124
If the conditions does not even

107
00:07:29,124 --> 00:07:33,166
become false,  these instructions
will be repeated indefinitely.

108
00:07:33,166 --> 00:07:36,071
Let us move on to another example
a "for loop."

109
00:07:36,071 --> 00:07:38,681
Let us suppose that I wish to print

110
00:07:38,681 --> 00:07:43,578
the multiplication table of 5.
Without using a "for loop", I would have

111
00:07:43,578 --> 00:07:48,952
to repeat almost the same
instruction ten times.

112
00:07:48,952 --> 00:07:53,895
Namely this instruction, printing
"5 times 1 is 5*1",

113
00:07:53,895 --> 00:07:58,994
followed by "5 times 2 is 5*2",

114
00:07:58,994 --> 00:08:04,150
and so on until "5 times 10
is 5*10".

115
00:08:04,150 --> 00:08:08,623
Again, in such a case, one has 
to use a

116
00:08:08,623 --> 00:08:14,050
"for loop". The loop will be coded as follows.

117
00:08:14,050 --> 00:08:18,712
We will declare the variable
controlling

118
00:08:18,712 --> 00:08:21,994
the number of iterations and initialize
it to 1.

119
00:08:21,994 --> 00:08:29,170
Our condition will be "i less or 
equal to 10".

120
00:08:29,170 --> 00:08:34,506
By the way, remember that the
operator "less than or equal to" is formulated

121
00:08:34,506 --> 00:08:39,800
by the less-than sign (<) followed
by the equal-to sign (=).

122
00:08:39,800 --> 00:08:44,210
Finally, we will use the increment
statement ++i.

123
00:08:44,210 --> 00:08:49,520
The variable i, will thus take the
values from 1 to 10.

124
00:08:49,520 --> 00:08:54,830
This "for loop" is thus equivalent
to all

125
00:08:54,830 --> 00:08:57,390
the ten printing instructions

126
00:08:57,390 --> 00:09:00,560
and will print the multiplication
table of 5.

127
00:09:00,560 --> 00:09:05,125
The block of instructions of a
"for loop" can contain

128
00:09:05,125 --> 00:09:09,210
any instruction whatsoever, a conditional
statement, for example.

129
00:09:09,210 --> 00:09:10,827
Let us have a quiz regarding

130
00:09:10,827 --> 00:09:14,510
a conditional statement inside
a "for loop".

131
00:09:14,510 --> 00:09:17,710
In your opinion, what will this code print
upon execution?

132
00:09:17,710 --> 00:09:19,910
The correct answer is

133
00:09:19,910 --> 00:09:23,340
the answer A.
Let us explain why.

134
00:09:23,340 --> 00:09:32,050
The loop begins by declaring a variable i
and intializes it to 0.

135
00:09:32,050 --> 00:09:38,410
The condition is "i strictly
less than 5". The increment statement

136
00:09:38,410 --> 00:09:44,770
is ++i. Therefore, i will take
the values from 0 to 4.

137
00:09:44,770 --> 00:09:48,130
The first instruction within the loop's
body

138
00:09:48,130 --> 00:09:51,994
prints i's value: right now, 
the value 0.

139
00:09:51,994 --> 00:09:58,755
By the way, we used the instruction
"print" and not "println" which means

140
00:09:58,755 --> 00:10:00,965
that the next printed information

141
00:10:00,965 --> 00:10:03,484
will be printed right after the 0,
right here.

142
00:10:03,484 --> 00:10:09,784
Now we move to the conditional 
statement, testing if i modulo 2

143
00:10:09,784 --> 00:10:10,708
is equal to 0.

144
00:10:10,708 --> 00:10:13,905
To calculate i modulo 2, we start

145
00:10:13,905 --> 00:10:18,500
by dividing i by 2.
i is 0.

146
00:10:18,500 --> 00:10:23,620
0 is 0 times 2 plus 0 .

147
00:10:23,620 --> 00:10:29,736
Therefore, i modulo 2 is 0. All this is 0

148
00:10:29,736 --> 00:10:35,667
and the condition is true. We can thus
enter the conditional

149
00:10:35,667 --> 00:10:43,900
statement and execute this here instruction
printing the character "p".

150
00:10:43,900 --> 00:10:49,325
Finally, we move on to the last instruction
in the loop's body,

151
00:10:49,325 --> 00:10:54,850
printing a blank space which we will
represent this way.

152
00:10:54,850 --> 00:11:01,556
Now we reach the end of the loop's body
and jump back here.

153
00:11:01,556 --> 00:11:03,010
i goes from 0 to 1.

154
00:11:03,010 --> 00:11:09,615
We execute the loop's body again,
in other words we resume

155
00:11:09,615 --> 00:11:15,680
with this instruction printing's value,
which is now 1.

156
00:11:15,680 --> 00:11:21,619
We move on to the conditional statement,
testing if i modulo 2 is equal to 0.

157
00:11:21,619 --> 00:11:25,230
To calculate i modulo 2, we divide
i,

158
00:11:25,230 --> 00:11:30,612
that is 1, by 2. i can be written
0 times 2 plus 1.

159
00:11:30,612 --> 00:11:36,130
Therefore i modulo 2 is 1.

160
00:11:36,130 --> 00:11:41,670
We conclude that the condition is
false.

161
00:11:41,670 --> 00:11:45,960
We will thus skip this instruction
and

162
00:11:45,960 --> 00:11:50,100
move on to this instruction,
printing a blank space.

163
00:11:50,100 --> 00:11:56,450
Now we reach the end of the loop's
body and jump back here again.

164
00:11:56,450 --> 00:11:59,576
i goes from 1 to 2.

165
00:11:59,576 --> 00:12:03,336
And we resume inside the 
loop's body.

166
00:12:03,336 --> 00:12:06,680
We print the value of i, that is 2.

167
00:12:06,680 --> 00:12:13,450
We move on to the conditional
statement and calculate i modulo 2.

168
00:12:13,450 --> 00:12:15,597
i is 2 and
it so happens that

169
00:12:15,597 --> 00:12:19,527
2 can be written 1 times 2 plus 0.

170
00:12:19,527 --> 00:12:25,024
Therefore, i modulo 2, is equal to 0,
this 0 here.

171
00:12:25,024 --> 00:12:29,570
The condition is thus true.

172
00:12:29,570 --> 00:12:35,237
Thus we enter the conditional
branch, 

173
00:12:35,237 --> 00:12:40,132
executing this instruction, printing
the character "p".

174
00:12:40,132 --> 00:12:41,092
We move on to

175
00:12:41,092 --> 00:12:46,267
this instruction, printing a blank
space and so on.

176
00:12:46,267 --> 00:12:51,940
We now see that the end result is
none other than answer A.

177
00:12:51,940 --> 00:12:57,508
This condition with the "modulo" here
can be a bit complicated

178
00:12:57,508 --> 00:13:02,778
to understand for beginners but it
can be interpreted easily.

179
00:13:02,778 --> 00:13:06,177
Actually, it only tests the remainder

180
00:13:06,177 --> 00:13:09,531
of a number's division by 2

181
00:13:09,531 --> 00:13:12,552
In plain words, it means we are testing

182
00:13:12,552 --> 00:13:15,794
if this value - i's value - is even.

183
00:13:15,794 --> 00:13:22,360
This condition is thus equivalent to
"is i even"?

