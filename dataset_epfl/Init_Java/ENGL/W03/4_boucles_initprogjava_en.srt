1
00:00:00,000 --> 00:00:07,105
In previous episodes we have 
discussed

2
00:00:07,105 --> 00:00:09,980
the notion of control structures.
We have seen that

3
00:00:09,980 --> 00:00:12,070
they are particular instructions,

4
00:00:12,070 --> 00:00:13,995
making it possible to execute processing

5
00:00:13,995 --> 00:00:17,270
on the basis of conditions. Also, they
allow to repeat processing.

6
00:00:17,270 --> 00:00:20,735
Today, we will dig deeper in this
topic and tackle

7
00:00:20,735 --> 00:00:24,190
another way to repeat processing :
the conditional loops.

8
00:00:24,190 --> 00:00:25,532
If, in a program,

9
00:00:25,532 --> 00:00:28,338
we wish to repeat a processing
sequence

10
00:00:28,338 --> 00:00:31,632
and that the number of repetitions is
known a priori, namely

11
00:00:31,632 --> 00:00:33,856
before entering the loop, we have 
seen

12
00:00:33,856 --> 00:00:37,065
that it was possible to resort to
"for loops", via the concept of iteration.

13
00:00:37,065 --> 00:00:39,441
However, in certains situations,
we do not

14
00:00:39,441 --> 00:00:41,940
a priori how many times we wish
to repeat the processing.

15
00:00:41,940 --> 00:00:43,796
Typically, we could want

16
00:00:43,796 --> 00:00:46,580
to repeat a processing as
long as a condition is verified

17
00:00:46,580 --> 00:00:48,030
without knowing how many

18
00:00:48,030 --> 00:00:50,633
repetitions will be necessarily required
before

19
00:00:50,633 --> 00:00:52,460
the condition becomes false.

20
00:00:52,460 --> 00:00:56,205
In such a case, we need to resort
to another control structure:

21
00:00:56,205 --> 00:00:58,405
the conditional loops.

22
00:00:58,405 --> 00:01:01,074
They are repetitions which will

23
00:01:01,074 --> 00:01:05,291
depend on a condition. In Java, they
take the form

24
00:01:05,291 --> 00:01:06,763
of "while" loops or "do while" loops.

25
00:01:06,763 --> 00:01:09,380
Those are the subject of today's
episode.

26
00:01:09,380 --> 00:01:12,136
To help you get an idea, we will
go back to our example

27
00:01:12,136 --> 00:01:14,256
regarding the average of
a certain number of grades.

28
00:01:14,256 --> 00:01:15,899
We do not know à priori how many

29
00:01:15,899 --> 00:01:18,451
grades we will have to calculate the average of.

30
00:01:18,451 --> 00:01:22,270
Thus, we start by asking the user to fill
us up through keyboard interation.

31
00:01:22,270 --> 00:01:25,198
Once the number of grades has been
entered, if this number

32
00:01:25,198 --> 00:01:27,864
is strictly positive, we will initiate
a 

33
00:01:27,864 --> 00:01:30,096
repetitive process, a "for loop"
permitting

34
00:01:30,096 --> 00:01:32,330
the input of all these grades,

35
00:01:32,330 --> 00:01:34,867
still via keyboard interaction. We 
will

36
00:01:34,867 --> 00:01:38,954
add the newly typed grade to the sum
and calculate the average later.

37
00:01:38,954 --> 00:01:40,899
Once the number of grades has been
reached,

38
00:01:40,899 --> 00:01:44,249
once all grades have been entered,
we will 

39
00:01:44,249 --> 00:01:49,390
exit the "for loop", calculate and print
 the average of the grades.

40
00:01:49,390 --> 00:01:52,926
Upon closer inspection, we may
find it

41
00:01:52,926 --> 00:01:57,390
unnatural to let the user input
a number of grades equal to 0.

42
00:01:57,390 --> 00:01:58,655
Indeed, it doesn't make much sense.

43
00:01:58,655 --> 00:02:01,075
Thus, we are wondering

44
00:02:01,075 --> 00:02:03,520
how to compel the user to

45
00:02:03,520 --> 00:02:06,100
input a number of grades
greater

46
00:02:06,100 --> 00:02:06,410
than 0.

47
00:02:06,410 --> 00:02:11,587
The underlying idea is to repeat these
processing until

48
00:02:11,587 --> 00:02:15,158
the user inputs a number

49
00:02:15,158 --> 00:02:17,270
of grades strictly positive.

50
00:02:17,270 --> 00:02:20,636
The solution to repeat these
two lines of instruction

51
00:02:20,636 --> 00:02:23,540
as long as the user has not entered
a number of 

52
00:02:23,540 --> 00:02:26,590
grades strictly positive, is to resort

53
00:02:26,590 --> 00:02:30,515
to a particular instruction :
a "do while" conditional loop.

54
00:02:30,515 --> 00:02:31,391
So, how do

55
00:02:31,391 --> 00:02:34,019
we write such a control
structure ?

56
00:02:34,019 --> 00:02:37,729
We use the keyword "do", that 
is,

57
00:02:37,729 --> 00:02:43,730
repeat. And the kekyword "while".

58
00:02:43,730 --> 00:02:44,810
What do we wish to repeat ?

59
00:02:44,810 --> 00:02:47,030
Actually, we wish to repeat the 
execution

60
00:02:47,030 --> 00:02:49,670
of these two instructions,

61
00:02:49,670 --> 00:02:52,880
which are in braces. We will repeat

62
00:02:52,880 --> 00:02:56,740
these instructions as long as this 
condition is true.

63
00:02:56,740 --> 00:03:02,114
So, if the user were to input a
number of grades

64
00:03:02,114 --> 00:03:05,831
less or equal to 0, the evaluation
of this condition

65
00:03:05,831 --> 00:03:07,733
will return "true". Therefore,

66
00:03:07,733 --> 00:03:10,279
we will repeat these 
processing,

67
00:03:10,279 --> 00:03:14,730
entering a new cycle of the
loop.

68
00:03:14,730 --> 00:03:16,730
Let us examine step by step

69
00:03:16,730 --> 00:03:20,570
the execution of such a "do while"
instruction.

70
00:03:20,570 --> 00:03:21,956
First of all, we declare

71
00:03:21,956 --> 00:03:24,847
a variable storing the to-be-entered
number of grades.

72
00:03:24,847 --> 00:03:27,089
Then, we execute directly

73
00:03:27,089 --> 00:03:29,460
the instruction "do while".

74
00:03:29,460 --> 00:03:31,910
Here, nothing special, we 
will

75
00:03:31,910 --> 00:03:34,430
execute the so-called loop's body,

76
00:03:34,430 --> 00:03:37,300
namely the instructions which will

77
00:03:37,300 --> 00:03:40,159
be repeated if need be.

78
00:03:40,159 --> 00:03:43,818
Here, we will ask the user to
input the number

79
00:03:43,818 --> 00:03:47,539
of grades. Let us imagine that they
type the value 0.

80
00:03:47,539 --> 00:03:49,852
We now reach this line,

81
00:03:49,852 --> 00:03:53,625
where the continuation condition
will be evaluated.

82
00:03:53,625 --> 00:03:59,477
Here, since the number of grades is 
equal to 0, the condition will be evaluated

83
00:03:59,477 --> 00:04:02,402
"true". We will thus

84
00:04:02,402 --> 00:04:06,188
enter the loop again, repeating
the processing.

85
00:04:06,188 --> 00:04:09,362
We thus begin a new cycle of the loop.

86
00:04:09,362 --> 00:04:12,812
We ask the user to type a
number

87
00:04:12,812 --> 00:04:14,671
of grades again. Let us imagine

88
00:04:14,671 --> 00:04:17,431
that the user inputs this time,
the value minus one.

89
00:04:17,431 --> 00:04:21,014
We execute this instruction again,
evaluating the

90
00:04:21,014 --> 00:04:24,280
continuation condition. Again, since
the number of grades

91
00:04:24,280 --> 00:04:27,049
is less or equal to 0, the condition
will be evaluated

92
00:04:27,049 --> 00:04:31,040
as "true". Thus, we will repeat
the processing once more.

93
00:04:31,040 --> 00:04:34,680
At the third iteration, we will ask the
user to input

94
00:04:34,680 --> 00:04:38,125
another number of grades. This time,
the crestfallen user

95
00:04:38,125 --> 00:04:40,138
will understand what is expected of them

96
00:04:40,138 --> 00:04:42,517
and input a strictly positive number.

97
00:04:42,517 --> 00:04:44,781
Once we reach the instruction

98
00:04:44,781 --> 00:04:47,587
evaluating the continuation condition.

99
00:04:47,587 --> 00:04:49,790
This time, the  evaluation will 
return

100
00:04:49,790 --> 00:04:52,526
"false" since the number of grades

101
00:04:52,526 --> 00:04:55,190
is strictly positive. Therefore, we
will

102
00:04:55,190 --> 00:04:57,906
stop iterating and exit the

103
00:04:57,906 --> 00:04:59,704
"do while" loop.

104
00:04:59,704 --> 00:05:03,126
Concretely, we will resume with
the execution of these processing,

105
00:05:03,126 --> 00:05:06,913
at the end of the "do while" loop, signified
by this semicolon.

106
00:05:06,913 --> 00:05:09,686
Thus, we will execute possible
subsequent instructions

107
00:05:09,686 --> 00:05:12,270
after the "do while" loop.

108
00:05:12,270 --> 00:05:15,804
In this example, we clearly see that it
is not possible

109
00:05:15,804 --> 00:05:17,628
to forsee how many iterations will

110
00:05:17,628 --> 00:05:19,794
be necessary before we can exit
the loop.

111
00:05:19,794 --> 00:05:22,125
Indeed, the number of repetitions is
function

112
00:05:22,125 --> 00:05:24,669
of the user's will, which we cannot
guess à priori.

113
00:05:24,669 --> 00:05:28,258
A "for loop" would thus not have
been adapted to the

114
00:05:28,258 --> 00:05:30,170
processing we attempt to achieve.

115
00:05:30,170 --> 00:05:32,142
Now, let us examine thouroughly

116
00:05:32,142 --> 00:05:34,114
the syntax of the "do while" instruction
in Java.

117
00:05:34,114 --> 00:05:38,542
We have here the keywords "do" and
"while" framing the

118
00:05:38,542 --> 00:05:40,313
so-called loop's body :

119
00:05:40,313 --> 00:05:42,990
a block of instructions which we
will repeat.

120
00:05:42,990 --> 00:05:45,395
This block is in braces.

121
00:05:45,395 --> 00:05:47,159
Following the keyword "while" is the

122
00:05:47,159 --> 00:05:49,740
continuation condition. We will repeat
the instructions

123
00:05:49,740 --> 00:05:52,940
within the loop's body

124
00:05:52,940 --> 00:05:55,820
as long as the condition is evaluated
as "true".

125
00:05:55,820 --> 00:05:59,128
In Java, similarly to the "if" instruction,
the parentheses

126
00:05:59,128 --> 00:06:01,805
around the condition are mandatory. Also,

127
00:06:01,805 --> 00:06:06,190
the "do while" instruction is concluded
with our

128
00:06:06,190 --> 00:06:09,030
famous semicolon.

129
00:06:09,030 --> 00:06:12,916
Similarly to the "if" instruction, the
loop continuation condition

130
00:06:12,916 --> 00:06:15,730
can be formulated in a rather sophisticated
way,

131
00:06:15,730 --> 00:06:18,766
for example through logical connectives.

132
00:06:18,766 --> 00:06:23,609
We can imagine that we wish to repeat
processing

133
00:06:23,609 --> 00:06:29,166
as long as a variable x is equal to
y plus z

134
00:06:29,166 --> 00:06:35,046
and that z is not equal to 0 or that
y is less than 3 and so on.

135
00:06:35,046 --> 00:06:39,390
Thus, we see that we can formulate
conditions

136
00:06:39,390 --> 00:06:43,410
as complex as we wish thanks to logical
connectives

137
00:06:43,410 --> 00:06:43,980
.

138
00:06:43,980 --> 00:06:47,018
An important remark regarding
"do while"

139
00:06:47,018 --> 00:06:50,180
loops is that the body will always be
executed at least once.

140
00:06:50,180 --> 00:06:53,816
Indeed, in our step by step example,
we have seen

141
00:06:53,816 --> 00:06:56,774
that when we execute the "do while"
instruction

142
00:06:56,774 --> 00:07:00,420
we enter the loop's body right
away.

143
00:07:00,420 --> 00:07:04,105
Therefore, we will execute the block
of instructions

144
00:07:04,105 --> 00:07:06,195
the first time we enter the loop.

145
00:07:06,195 --> 00:07:08,835
From there, it will all depend on
the evaluation of the condition.

146
00:07:08,835 --> 00:07:12,195
The block of instructions will only
be executed once if,

147
00:07:12,195 --> 00:07:15,719
at the first iteration, the evaluation will
return false.

148
00:07:15,719 --> 00:07:18,056
In this case, we will indeed exit

149
00:07:18,056 --> 00:07:19,823
the "do while" loop and resume

150
00:07:19,823 --> 00:07:22,110
the processing thereafter. But, in
the meantime, we will have

151
00:07:22,110 --> 00:07:24,110
executed the block of instructions
at least once.

152
00:07:24,110 --> 00:07:26,769
This is a very important
characteristic

153
00:07:26,769 --> 00:07:29,840
of the "do while" conditional
loop.

154
00:07:29,840 --> 00:07:32,196
A last remark we can make

155
00:07:32,196 --> 00:07:33,994
regarding "do while" loops

156
00:07:33,994 --> 00:07:37,094
is that, if the condition is formulated
in such a way

157
00:07:37,094 --> 00:07:40,425
that it will not ever become "false",
the loop will be repeated indefinitely.

158
00:07:40,425 --> 00:07:43,863
Therefore, it is of the utmost importance
to formulate

159
00:07:43,863 --> 00:07:47,510
the condition so that we will
exit the loop at some time.

160
00:07:47,510 --> 00:07:50,638
The "do while" loop is a conditional
loop where

161
00:07:50,638 --> 00:07:55,194
the condition is evaluated a 
posteriori.

162
00:07:55,194 --> 00:07:56,966
The loop's body will always be

163
00:07:56,966 --> 00:07:59,046
executed once before we
decide

164
00:07:59,046 --> 00:08:00,245
if the processing will stop or be repeated.

165
00:08:00,245 --> 00:08:02,563
In certains situations, it is
necessary

166
00:08:02,563 --> 00:08:04,576
to test the continuation condition

167
00:08:04,576 --> 00:08:08,448
a priori before executing the loop's
body a single time.

168
00:08:08,448 --> 00:08:10,878
In such a case, we resort to another
form of

169
00:08:10,878 --> 00:08:13,640
conditional loops, the "while" loop which
we will discuss now.

170
00:08:13,640 --> 00:08:15,908
If we wish to write a "while" loop in
Java,

171
00:08:15,908 --> 00:08:17,987
we use the following syntax :

172
00:08:17,987 --> 00:08:20,885
the keyword "while", immediately 
followed by

173
00:08:20,885 --> 00:08:24,200
the loop continuation condtion,

174
00:08:24,200 --> 00:08:27,272
then, in braces, the loop's body,
that is

175
00:08:27,272 --> 00:08:30,355
the block of instructions which we
wish to repeat.

176
00:08:30,355 --> 00:08:33,670
The operating principle is similar
to the "do while" loop's :

177
00:08:33,670 --> 00:08:35,468
we repeat the processing as long

178
00:08:35,468 --> 00:08:38,090
as this condition returns the value
"true".

179
00:08:38,090 --> 00:08:42,776
The difference between the "while" and
"do while" loops is that,

180
00:08:42,776 --> 00:08:44,922
in "while" loops, the continuation condition
 is evaluted

181
00:08:44,922 --> 00:08:47,880
as soon we execute the "while"
instruction.

182
00:08:47,880 --> 00:08:49,305
If this condition is

183
00:08:49,305 --> 00:08:53,650
evaluated as "false" from the get-go, we will
never execute the block of instructions.

184
00:08:53,650 --> 00:08:57,355
Now, let us illustrate with two basic
examples, the critical

185
00:08:57,355 --> 00:09:00,148
difference between "while" and "do while"
loops.

186
00:09:00,148 --> 00:09:02,074
We have here two very similar loops.

187
00:09:02,074 --> 00:09:05,357
where the continuation condition
depends,

188
00:09:05,357 --> 00:09:07,903
in both cases, on a variable i,
initialized

189
00:09:07,903 --> 00:09:09,526
to the value 100.

190
00:09:09,526 --> 00:09:12,653
Let us start by examining what
happens in the "do while" loop.

191
00:09:12,653 --> 00:09:14,590
When we execute this line,

192
00:09:14,590 --> 00:09:18,000
nothing prevents us from entering
right away the loop's body.

193
00:09:18,000 --> 00:09:21,946
At this point, the message "bonjour"
will be printed on the terminal.

194
00:09:21,946 --> 00:09:24,913
Now we execute this line, where

195
00:09:24,913 --> 00:09:27,690
the continuation condition will
be evaluated.

196
00:09:27,690 --> 00:09:29,679
Since i is 100, obviously,

197
00:09:29,679 --> 00:09:31,260
this condition will be evaluated to
"false".

198
00:09:31,260 --> 00:09:34,154
We will exit the loop immediately

199
00:09:34,154 --> 00:09:38,018
and resume with the possible instructions
following the "do while" loop.

200
00:09:38,018 --> 00:09:39,881
In the meantime, the message "bonjour"

201
00:09:39,881 --> 00:09:40,940
will have been printed.

202
00:09:40,940 --> 00:09:43,724
Similar situation, this time with the
"while" loop.

203
00:09:43,724 --> 00:09:47,757
When we are to execute this line,
we will evaluate the

204
00:09:47,757 --> 00:09:51,706
continuation condition right away. As before,
it will evaluated to "false".

205
00:09:51,706 --> 00:09:53,780
Please note that in both cases,

206
00:09:53,780 --> 00:09:56,785
the continuation condition has been 
evaluated to "false".

207
00:09:56,785 --> 00:10:00,319
Here, since the condition is "false" we won't
even enter

208
00:10:00,319 --> 00:10:02,485
the loop's body and instead continue
the execution

209
00:10:02,485 --> 00:10:04,160
after the loop's body.

210
00:10:04,160 --> 00:10:04,940
Therefore,

211
00:10:04,940 --> 00:10:06,980
in this case, the loop will not
print anything.

212
00:10:06,980 --> 00:10:10,040
You can see that despite having two
very similar loops,

213
00:10:10,040 --> 00:10:13,729
one will print "bonjour", while the other
will not print anything.

214
00:10:13,729 --> 00:10:17,950
The most frequent mistakes regarding
conditional loops are

215
00:10:17,950 --> 00:10:20,328
often related to the formulation
of the continuation condition.

216
00:10:20,328 --> 00:10:21,984
The continuation condition is poorly
formulated

217
00:10:21,984 --> 00:10:23,601
and we will, for example, never
exit the loop or

218
00:10:23,601 --> 00:10:25,515
exit the loop too early, never 
executing

219
00:10:25,515 --> 00:10:28,390
the loop, which we wanted to 
do.

220
00:10:28,390 --> 00:10:29,950
However, there is a frequent

221
00:10:29,950 --> 00:10:31,870
syntactic mistake, which we will

222
00:10:31,870 --> 00:10:34,150
describe now. It is easy to fall
in this trap,

223
00:10:34,150 --> 00:10:37,890
especially if you're unfamiliar with "while"
and "do while" loops.

224
00:10:37,890 --> 00:10:41,051
The mistake is as follows : let us
imagine that, at the end,

225
00:10:41,051 --> 00:10:44,980
of the "while" condition, we inadvertently
add a semicolon.

226
00:10:44,980 --> 00:10:47,635
This mistake is made easier to commit
by the fact

227
00:10:47,635 --> 00:10:49,630
that there is a semicolon at the
end of

228
00:10:49,630 --> 00:10:51,412
the "do while" condition. However,

229
00:10:51,412 --> 00:10:54,280
this semicolon is there to conclude the
whole "do while" instruction.

230
00:10:54,280 --> 00:10:55,165
It really does not belong here,

231
00:10:55,165 --> 00:10:57,761
since after the "while" condition,
we expect

232
00:10:57,761 --> 00:11:00,534
to find a body of instructions.

233
00:11:00,534 --> 00:11:03,873
Here, we probably wished to put
" ++i " within the body.

234
00:11:03,873 --> 00:11:05,237
However, what will happen here

235
00:11:05,237 --> 00:11:08,213
is this : when we execute the

236
00:11:08,213 --> 00:11:10,405
"while" instruction, everything happens

237
00:11:10,405 --> 00:11:14,000
as if we had a body containing but
an empty instruction.

238
00:11:14,000 --> 00:11:17,480
So, let us imagined that we have
previously initialized

239
00:11:17,480 --> 00:11:19,933
our variable i to a value
less than 10,

240
00:11:19,933 --> 00:11:22,117
for example 1. Since here, the " ++1 "

241
00:11:22,117 --> 00:11:25,575
is outside, nothing inside the loop's
body

242
00:11:25,575 --> 00:11:28,175
will have i evolve

243
00:11:28,175 --> 00:11:30,170
so that it reaches a value which will
make us

244
00:11:30,170 --> 00:11:33,625
exit the loop. Therefore, the problem
is that we will cycle

245
00:11:33,625 --> 00:11:36,210
indefinitely within the loop, which is an
errie 

246
00:11:36,210 --> 00:11:39,230
 result to obtain, especially
 for beginners.

247
00:11:39,230 --> 00:11:41,895
Thus, be wary of these little details

248
00:11:41,895 --> 00:11:44,941
so that you do not fall in this trap while
you are still inexperienced

249
00:11:44,941 --> 00:11:47,690
with programming "while" and "do while"
loops.

250
00:11:47,690 --> 00:11:51,146
Now, you know several ways to carry out
repetitive processing.

251
00:11:51,146 --> 00:11:53,360
the "for loop", the "while" loop and
the "do while" loop.

252
00:11:53,360 --> 00:11:55,370
Now, you may wonder how to

253
00:11:55,370 --> 00:11:57,770
choose between these different forms.

254
00:11:57,770 --> 00:11:59,720
Actually, the choice depends on
relatively

255
00:11:59,720 --> 00:12:03,050
simple factors. Let us detail.

256
00:12:03,050 --> 00:12:06,414
As we have seen in this sequence's
introduction,

257
00:12:06,414 --> 00:12:10,126
if we do know the number of iterations,
we will naturally

258
00:12:10,126 --> 00:12:11,050
choose a "for" loop.

259
00:12:11,050 --> 00:12:13,450
Let us imagine for example, that 
we wish to calculate the average

260
00:12:13,450 --> 00:12:15,450
of the grades of all this course's
students.

261
00:12:15,450 --> 00:12:17,210
The number of students attending to
this courses is

262
00:12:17,210 --> 00:12:19,148
known a priori and is also the

263
00:12:19,148 --> 00:12:21,485
the number of iterations.
Therefore, we will

264
00:12:21,485 --> 00:12:23,370
choose a "for loop".

265
00:12:23,370 --> 00:12:27,374
If we do know the number of iterations,
we will have to resort

266
00:12:27,374 --> 00:12:29,779
to a conditional loop,

267
00:12:29,779 --> 00:12:32,340
either "while" or "do while".

268
00:12:32,340 --> 00:12:35,220
Then, if the instructions are to be repeated
at least once,

269
00:12:35,220 --> 00:12:36,756
as we have seen a few minutes ago,

270
00:12:36,756 --> 00:12:39,012
we will typically use a "do while"
loop.

271
00:12:39,012 --> 00:12:40,823
In what situations does this happen ?

272
00:12:40,823 --> 00:12:43,514
A very typical example is the

273
00:12:43,514 --> 00:12:46,459
regarding interaction with the 
user;

274
00:12:46,459 --> 00:12:48,125
we need to ask a value to the user

275
00:12:48,125 --> 00:12:50,134
and this value is limited by some
criteria.

276
00:12:50,134 --> 00:12:52,110
Therefore, we need to let the
user input

277
00:12:52,110 --> 00:12:53,910
at least one value before

278
00:12:53,910 --> 00:12:56,310
we can test if the criteria
are respected,

279
00:12:56,310 --> 00:12:58,170
whether or not the condition is fulfilled.

280
00:12:58,170 --> 00:13:00,316
In such a case, we will 
naturally

281
00:13:00,316 --> 00:13:02,164
use a "do while" loop.

282
00:13:02,164 --> 00:13:04,460
In all other cases, where we
execute

283
00:13:04,460 --> 00:13:06,820
the processing only if the
condition

284
00:13:06,820 --> 00:13:08,866
is verified, we will use

285
00:13:08,866 --> 00:13:11,836
a "while" loop, the condition being
evaluated a priori.

286
00:13:11,836 --> 00:13:15,375
Let us examine now how
to enrich

287
00:13:15,375 --> 00:13:19,351
our introductory example by
adding a few more functionalities.

288
00:13:19,351 --> 00:13:22,768
For example, if the user inputs
a number negative

289
00:13:22,768 --> 00:13:25,408
or null we would like to display
a message

290
00:13:25,408 --> 00:13:27,852
signifying that it is not what the program
is expecting.

291
00:13:27,852 --> 00:13:30,608
For example, if the user inputs
minus 2, we would like

292
00:13:30,608 --> 00:13:34,000
to print "please type a number greater
than 0".

293
00:13:34,000 --> 00:13:37,565
This would avoid the stubbornness
we have encountered earlier,

294
00:13:37,565 --> 00:13:41,370
where the user would keep on
entering undesired values.

295
00:13:41,370 --> 00:13:43,820
So, how do proceed from them ?

296
00:13:43,820 --> 00:13:46,711
Very clearly, this message will be

297
00:13:46,711 --> 00:13:50,675
printed as many times as the user
types

298
00:13:50,675 --> 00:13:55,550
an undesired number, which could potentially
be every time the user inputs a value.

299
00:13:55,550 --> 00:13:59,386
It is quite natural to think we should
write

300
00:13:59,386 --> 00:14:02,274
these instructions, tasked with
the printing of the message,

301
00:14:02,274 --> 00:14:04,245
inside the body of a loop.

302
00:14:04,245 --> 00:14:07,300
Therefore, we will proceed like this :
we will

303
00:14:07,300 --> 00:14:10,715
enrich the loop's body with new
instructions.

304
00:14:10,715 --> 00:14:13,235
So, once the user has entered the
number of grades,

305
00:14:13,235 --> 00:14:16,200
we will test if this number of grades 
matches with

306
00:14:16,200 --> 00:14:18,880
the desired criteria. If such is not
the case,

307
00:14:18,880 --> 00:14:23,200
we will print a message destined
to the user.

308
00:14:23,200 --> 00:14:27,824
One of the tricks beginners encounter
with "while" and "do while" loops

309
00:14:27,824 --> 00:14:31,880
is the formulation of an adequate
continuation condition.

310
00:14:31,880 --> 00:14:35,600
Let us examine how to proceed thanks
to a few examples.

311
00:14:35,600 --> 00:14:38,347
Still in our example regarding the input
of a number of grades,

312
00:14:38,347 --> 00:14:41,362
we compelled the user to
submitting a

313
00:14:41,362 --> 00:14:45,212
number greater than 0. Now, we
also wish that

314
00:14:45,212 --> 00:14:47,448
this number does not exceed
10 grades.

315
00:14:47,448 --> 00:14:50,726
Therefore, we do not want the user to
input a number greater than 10.

316
00:14:50,726 --> 00:14:55,000
So, how do we come up with this new
condition ?

317
00:14:55,000 --> 00:14:57,166
To formulate this condition,

318
00:14:57,166 --> 00:14:59,731
the easier is probably to do
so in plain  words.

319
00:14:59,731 --> 00:15:01,042
What do we want exactly ?

320
00:15:01,042 --> 00:15:03,427
We want to repeat the processing

321
00:15:03,427 --> 00:15:06,355
asking the user to input a number
of grades

322
00:15:06,355 --> 00:15:08,406
as long as this number is incorrect.

323
00:15:08,406 --> 00:15:10,726
When is this number incorrect here ?

324
00:15:10,726 --> 00:15:12,826
It can be in two situations.

325
00:15:12,826 --> 00:15:15,784
Either the user has entered a number
which does not satisfy

326
00:15:15,784 --> 00:15:18,220
this first criteria or he has entered a

327
00:15:18,220 --> 00:15:21,221
 number of grades which does not
fulfill this second criteria.

328
00:15:21,221 --> 00:15:26,416
So, we find ourselves in a situation
where the submitted number of grades

329
00:15:26,416 --> 00:15:31,561
is incorrect if the user inputs something
less or equal 

330
00:15:31,561 --> 00:15:36,160
to 0, or if they input something greater
than 10.

331
00:15:36,160 --> 00:15:39,715
This can be translated in Java
pretty easily.

332
00:15:39,715 --> 00:15:43,584
So, let us take back our first
sentence :

333
00:15:43,584 --> 00:15:47,362
"if it is less or equal to 0". This is exactly
what we are

334
00:15:47,362 --> 00:15:51,361
formulating here. OR - we can see the
"OR",here -

335
00:15:51,361 --> 00:15:54,862
if it is greater than 10, which we are
formulating here.

336
00:15:54,862 --> 00:15:56,776
We see here that the transition

337
00:15:56,776 --> 00:16:00,742
of a formulation in plain words
to Java can be done

338
00:16:00,742 --> 00:16:04,380
in a very natural way, once we have in
mind what we wish to test exactly.

339
00:16:04,380 --> 00:16:06,655
In a similar spirit, let us imagine

340
00:16:06,655 --> 00:16:08,995
that we wish to write
a brief program

341
00:16:08,995 --> 00:16:12,615
whose purpose is to have the user
guess an unknown number.

342
00:16:12,615 --> 00:16:15,085
To make things easier, we
will

343
00:16:15,085 --> 00:16:17,685
assume that they have to
guess the numer 5.

344
00:16:17,685 --> 00:16:21,898
The idea is to repeat the submission
as long as

345
00:16:21,898 --> 00:16:23,770
the user has not guessed the correct number.

346
00:16:23,770 --> 00:16:27,150
So how do we formulate the condition ?

347
00:16:27,150 --> 00:16:29,535
As we have done in the previous
example,

348
00:16:29,535 --> 00:16:32,655
we will start by formulating it
in plain words.

349
00:16:32,655 --> 00:16:35,592
The loop will be repeated as long
as

350
00:16:35,592 --> 00:16:38,850
the user has not guessed the secret
number.

351
00:16:38,850 --> 00:16:44,130
Concretely, as long as the entered number
if different from the secret number.

352
00:16:44,130 --> 00:16:46,950
Let us translate this formulation
into Java.

353
00:16:46,950 --> 00:16:48,510
As long as the entered number

354
00:16:48,510 --> 00:16:54,400
if different from the secret number, is
translated like this in Java.

355
00:16:54,400 --> 00:16:57,487
Yet another example where the transition
from plain words

356
00:16:57,487 --> 00:17:00,290
into Java is very natural.

357
00:17:00,290 --> 00:17:03,482
Now, let us enrich this here example
and imagine

358
00:17:03,482 --> 00:17:07,187
that we still wish to have the user guess
a number but that

359
00:17:07,187 --> 00:17:09,933
we are only granting them a limited number
of trials. If they have not guessed

360
00:17:09,933 --> 00:17:12,053
correctly after so many trials we stop
and inform

361
00:17:12,053 --> 00:17:12,645
them of their failure.

362
00:17:12,645 --> 00:17:15,725
So, how do we modify the condtion
so that the the loop

363
00:17:15,725 --> 00:17:19,232
stops after, for example, three
unsuccessfull trials

364
00:17:19,232 --> 00:17:21,030
How do we formulate this condition ?

365
00:17:21,030 --> 00:17:24,830
The idea here, is to resort to
a trial counter.

366
00:17:24,830 --> 00:17:28,820
We will count the number of trials;
this counter

367
00:17:28,820 --> 00:17:32,400
will be incremented at every iteration
of the loop.

368
00:17:32,400 --> 00:17:36,940
Now, let us formulate the condition so
that depends on this counter.

369
00:17:36,940 --> 00:17:39,260
We will keep our method and start
by formulating it

370
00:17:39,260 --> 00:17:42,300
in plain words : we want to
repeat the

371
00:17:42,300 --> 00:17:46,080
processing as long as the user
has not guessed

372
00:17:46,080 --> 00:17:49,512
the secret number and as long as
he still has trials.

373
00:17:49,512 --> 00:17:52,802
So, let us refine the description;

374
00:17:52,802 --> 00:17:55,820
what does this condition exactly mean ?

375
00:17:55,820 --> 00:17:58,628
We iterate, repeat the processing,

376
00:17:58,628 --> 00:18:01,870
as long the inputted number if differrent
from the secret number

377
00:18:01,870 --> 00:18:05,746
and as long as the trial counter is less
than 3.

378
00:18:05,746 --> 00:18:08,800
So, now we are to translate this into Java.

379
00:18:08,800 --> 00:18:11,542
The transcription here is still as natural.

380
00:18:11,542 --> 00:18:14,942
The first condition : as long as the entered
number is different 

381
00:18:14,942 --> 00:18:18,300
from the secret number will be written
like that, simply.

382
00:18:18,300 --> 00:18:21,360
The "and" is translated like this.
And the second condition

383
00:18:21,360 --> 00:18:26,080
will be written like this in Java.

384
00:18:26,080 --> 00:18:26,944
Our user has now 

385
00:18:26,944 --> 00:18:29,158
two possible ways to exit the loop :

386
00:18:29,158 --> 00:18:31,156
they can exit the loop because they
have

387
00:18:31,156 --> 00:18:33,100
guessed the correct number, that is
the inputted number

388
00:18:33,100 --> 00:18:35,432
has the same value as the secret
number.

389
00:18:35,432 --> 00:18:39,812
In this case, the evaluation of this
part of the condition will return "false".

390
00:18:39,812 --> 00:18:43,270
Since the global expression involves an "and",
only one argument

391
00:18:43,270 --> 00:18:46,924
of the "and" needs to be bo false so
that the global expression

392
00:18:46,924 --> 00:18:49,660
returns "false". In this case, we will
exit the loop.

393
00:18:49,660 --> 00:18:52,412
Other possible exit condition:

394
00:18:52,412 --> 00:18:54,780
the user used has a number of trials

395
00:18:54,780 --> 00:18:57,310
greater than or equal to 3.

396
00:18:57,310 --> 00:19:01,824
Now, we would like to enrich our program
a little bit more.

397
00:19:01,824 --> 00:19:04,831
We wish to inform the user of the reason
why they have exited the loop.

398
00:19:04,831 --> 00:19:07,232
Did they exit because they have guessed
the number, in which case

399
00:19:07,232 --> 00:19:10,780
we want to inform him of his success,
or did he exit in failure ?

400
00:19:10,780 --> 00:19:16,530
Failure meaning they have not guessed the number
before running out of trials.

401
00:19:16,530 --> 00:19:17,520
The trick is that

402
00:19:17,520 --> 00:19:19,050
it is only once we have exited

403
00:19:19,050 --> 00:19:20,805
the loop that we can know why
we exited.

404
00:19:20,805 --> 00:19:24,319
Therefore, we place the instruction testing
why we exited the loop

405
00:19:24,319 --> 00:19:27,214
at the end of the "do while" loop.

406
00:19:27,214 --> 00:19:30,520
So here, we will simply test

407
00:19:30,520 --> 00:19:32,332
if we exited the loop having guessed

408
00:19:32,332 --> 00:19:33,900
the secret number. In this case,

409
00:19:33,900 --> 00:19:35,958
we inform the user that they have won.

410
00:19:35,958 --> 00:19:39,370
In the other case, we will simply
tell them that they have lost.

411
00:19:39,370 --> 00:19:43,330
Please note that we evaluate the
condition

412
00:19:43,330 --> 00:19:46,537
"did we or not guess the correct number ?"

413
00:19:46,537 --> 00:19:48,916
at two different places in the program.

414
00:19:48,916 --> 00:19:52,890
Once in the "if", and another in the "while".

415
00:19:52,890 --> 00:19:57,168
It would have been smart, for good 
practice, to regroup

416
00:19:57,168 --> 00:20:01,609
these two condtions in a single variable.
For example, here we could declare

417
00:20:01,609 --> 00:20:08,692
a boolean variable, initialized to "false"
inside the loop.

418
00:20:08,692 --> 00:20:15,000
Then we store inside this variable, the value
"entered number = secret number",

419
00:20:15,000 --> 00:20:20,840
Now, we can replace this condition

420
00:20:20,840 --> 00:20:25,010
here using our new variable.

421
00:20:25,010 --> 00:20:26,726
As long as the secret number has not

422
00:20:26,726 --> 00:20:30,860
been guessed and that the trial
counter is less than 3, we will keep looping.

423
00:20:30,860 --> 00:20:34,400
Similarly, we could replace this condition

424
00:20:34,400 --> 00:20:35,960
by the evaluation "if (trouve)"
(TN : trouve means, found or guessed)

425
00:20:35,960 --> 00:20:39,835
Therefore, we have linked two identical

426
00:20:39,835 --> 00:20:43,850
conditions while initially this link
didn't exit : this is good practice.

427
00:20:43,850 --> 00:20:46,888
Now, one needs to be careful while
formulating these tests.

428
00:20:46,888 --> 00:20:48,376
We can formulate them clumsily,

429
00:20:48,376 --> 00:20:51,807
causing mistakes upon execution.

430
00:20:51,807 --> 00:20:56,047
Here, for example, let us suppose that the
 user has guessed the correct number.

431
00:20:56,047 --> 00:20:59,773
We're testing if they have not run of
trials like this.

432
00:20:59,773 --> 00:21:03,940
What will happen here, is that if the user
has guessed the number

433
00:21:03,940 --> 00:21:08,352
on his third trial, what was initially
a success will be

434
00:21:08,352 --> 00:21:12,141
interpreted as a failure. Indeed, this 
condition

435
00:21:12,141 --> 00:21:13,875
will not be verified while the secret
number

436
00:21:13,875 --> 00:21:16,017
has actually been guessed on the
third attempt.

437
00:21:16,017 --> 00:21:17,904
Therefore, we will unfairly inform
the user

438
00:21:17,904 --> 00:21:20,124
that they have lost the game!

439
00:21:20,124 --> 00:21:22,108
This should show how important

440
00:21:22,108 --> 00:21:24,808
it is to think carefully while formulating
the condition.

441
00:21:24,808 --> 00:21:26,304
Formulating the condition in an explicit

442
00:21:26,304 --> 00:21:29,050
way, as we did here previously,
related to the secret number,

443
00:21:29,050 --> 00:21:31,642
will make us dodge the trap

444
00:21:31,642 --> 00:21:37,465
we have just analyzed in the previous
example.

