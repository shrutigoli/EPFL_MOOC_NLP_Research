1
00:00:00,000 --> 00:00:05,850
In a previous episode,

2
00:00:05,850 --> 00:00:10,812
we have discussed control structures;
they are

3
00:00:10,812 --> 00:00:14,732
Java instructions making it possible
for data to influence,

4
00:00:14,732 --> 00:00:18,364
choose or repeat, different parts
of the program.

5
00:00:18,364 --> 00:00:20,568
We have seen that these control

6
00:00:20,568 --> 00:00:23,780
structures are closely related
to the block notion.

7
00:00:23,780 --> 00:00:25,220
This block notion will impact

8
00:00:25,220 --> 00:00:28,895
the use of variables. We call this

9
00:00:28,895 --> 00:00:30,812
the "scope of variables",

10
00:00:30,812 --> 00:00:34,010
and this will be the subject
of this episode.

11
00:00:34,010 --> 00:00:38,012
In Java, instructions can be regrouped

12
00:00:38,012 --> 00:00:41,193
in blocks, and this intependently
of any control structure.

13
00:00:41,193 --> 00:00:43,267
To this end, one simply needs to 
regroup

14
00:00:43,267 --> 00:00:47,710
the instructions in braces.

15
00:00:47,710 --> 00:00:50,325
For example, here, we have a 
block, starting with

16
00:00:50,325 --> 00:00:55,046
an opening brace and ending with a closing
brace. Inside, we have declared a Scanner-type

17
00:00:55,046 --> 00:01:00,842
variable keyb, an int-type variable i
and a double-type variable x. We can use

18
00:01:00,842 --> 00:01:06,127
them, for example, to read the value of i,
the value of x

19
00:01:06,127 --> 00:01:10,969
or to print the value of x, the value of i.

20
00:01:10,969 --> 00:01:15,380
These variables belong to the block where they
have been declared.

21
00:01:15,380 --> 00:01:18,332
You can see that, in Java,
blocks have great

22
00:01:18,332 --> 00:01:22,364
autonomy, meaning that they can
contain their own variables.

23
00:01:22,364 --> 00:01:27,570
Now to a simpler example: we have a
 block controlled by an "if" instruction.

24
00:01:27,570 --> 00:01:30,002
The block thus begins here and ends

25
00:01:30,002 --> 00:01:32,922
with the closing brace here. In this 
block, we

26
00:01:32,922 --> 00:01:35,744
declare an int-type variable j, which we

27
00:01:35,744 --> 00:01:38,722
can then use inside this block.

28
00:01:38,722 --> 00:01:40,618
Once we have exited the block,

29
00:01:40,618 --> 00:01:43,624
starting from this point,

30
00:01:43,624 --> 00:01:49,150
we cannot use the variable j 
anymore, since it belonged to the block.

31
00:01:49,150 --> 00:01:53,376
Variables declared in a block, like this,
are only accessible

32
00:01:53,376 --> 00:01:55,236
within this block, we say that they

33
00:01:55,236 --> 00:01:57,811
are variables local to this block.

34
00:01:57,811 --> 00:02:02,336
We can also declare variables outside
any block, inside the class

35
00:02:02,336 --> 00:02:03,818
we are currently working with.

36
00:02:03,818 --> 00:02:06,041
We call those, variables

37
00:02:06,041 --> 00:02:07,421
global to the class.

38
00:02:07,421 --> 00:02:10,490
In the object-oriented programming course

39
00:02:10,490 --> 00:02:13,277
we will differentiate "instance variables"
from

40
00:02:13,277 --> 00:02:16,712
"class variables". However, this would now
take us a little too far.

41
00:02:16,712 --> 00:02:19,679
One advice we can give you is
to declare

42
00:02:19,679 --> 00:02:23,188
your variables the closest possible
to their utilization.

43
00:02:23,188 --> 00:02:26,194
What does it mean?
Let us take an example.

44
00:02:26,194 --> 00:02:31,285
Let us reuse the previous example with
the block here controlled

45
00:02:31,285 --> 00:02:35,110
by an "if" instruction. Inside it, we use
the variable j and we 

46
00:02:35,110 --> 00:02:38,736
suppose that we have no use for the
variable j after this block.

47
00:02:38,736 --> 00:02:40,300
In this case, we will write

48
00:02:40,300 --> 00:02:43,156
the declaration the closest from
its utilization,

49
00:02:43,156 --> 00:02:45,314
namely just when we need it,

50
00:02:45,314 --> 00:02:48,560
just before the first line where we
will use the variable j.

51
00:02:48,560 --> 00:02:52,320
In this same situation where
we need here

52
00:02:52,320 --> 00:02:56,420
a variable j, which is not used 
anymore after the block

53
00:02:56,420 --> 00:02:59,020
controlled by the "if" instruction,

54
00:02:59,020 --> 00:03:01,425
if we declared this variable here, before
the block,

55
00:03:01,425 --> 00:03:04,787
it would be valid. However, it would not have
been

56
00:03:04,787 --> 00:03:09,410
in accordance with the principle of declaring
variables the closest to their utilization.

57
00:03:09,410 --> 00:03:14,140
Since this variable j, would have been
declared outside the block, it could

58
00:03:14,140 --> 00:03:18,336
still be used later. The idea is to declare it
as close as possible to the place where we use it.

59
00:03:18,336 --> 00:03:21,739
This notion of a place where we use
a variable

60
00:03:21,739 --> 00:03:25,346
or rather of a place where we can use
the variable,

61
00:03:25,346 --> 00:03:28,391
is what we called the "scope".

62
00:03:28,391 --> 00:03:31,904
The scope of a variable is all the
lines of code

63
00:03:31,904 --> 00:03:35,385
where this variable accessible,
where it can be used.

64
00:03:35,385 --> 00:03:41,082
Let us take an example. We have here a
first "if" instruction,

65
00:03:41,082 --> 00:03:46,958
controlling its own block of instructions.

66
00:03:46,958 --> 00:03:49,741
Then, we have a second "if" instruction

67
00:03:49,741 --> 00:03:53,100
controlling its block of instructions
aswell.

68
00:03:53,100 --> 00:03:58,554
In the higher level block, we will
declare a variable j.

69
00:03:58,554 --> 00:04:04,264
In the deeper block, we will declare a variable
k, which we will use.

70
00:04:04,264 --> 00:04:08,680
The scope of k, that is, all the lines
where k

71
00:04:08,680 --> 00:04:12,365
is defined will be the block of the
second

72
00:04:12,365 --> 00:04:13,613
"if" instruction.

73
00:04:13,613 --> 00:04:19,378
In the meantime, the scope of j, that is
all the lines of code

74
00:04:19,378 --> 00:04:24,886
where j is defined, usable, is this block
here, where j has been defined.

75
00:04:24,886 --> 00:04:27,819
Here, you can see that j and k

76
00:04:27,819 --> 00:04:31,820
have different scopes, indicated by these
two blocks.

77
00:04:31,820 --> 00:04:34,928
A question we could ask is,

78
00:04:34,928 --> 00:04:37,952
what would happen if we had declared
a variable

79
00:04:37,952 --> 00:04:40,550
j inside this block?

80
00:04:40,550 --> 00:04:45,765
In Java, such a thing is not
allowed; it is not valid

81
00:04:45,765 --> 00:04:50,840
to have two variables with the same
name in the same scope.

82
00:04:50,840 --> 00:04:53,652
For example, if we had declared,
in the second

83
00:04:53,652 --> 00:04:56,660
block, a variable j. we would
encounter

84
00:04:56,660 --> 00:04:59,648
a compiler error informing us
that

85
00:04:59,648 --> 00:05:02,600
it is forbidden, that there is name
ambuiguity.

86
00:05:02,600 --> 00:05:02,990
Therefore,

87
00:05:02,990 --> 00:05:04,225
in Java, it is forbidden.

88
00:05:04,225 --> 00:05:06,240
You cannot have, in the same scope.

89
00:05:06,240 --> 00:05:08,696
two different objects with the
same name.

90
00:05:08,696 --> 00:05:11,710
However, it is possible in other
programming languages.

91
00:05:11,710 --> 00:05:15,835
A particular scope case, which you should
definitely be familiar with,

92
00:05:15,835 --> 00:05:20,099
is the scope of variables in iterative loops,
"for" loops.

93
00:05:20,099 --> 00:05:24,106
Let us take an example. We have here
a "for" loop,

94
00:05:24,106 --> 00:05:28,288
declaring an int-type variable i. This variable
can of course be

95
00:05:28,288 --> 00:05:31,798
used inside the block. the scope
of i will indeed

96
00:05:31,798 --> 00:05:38,062
be the block controlled by the "for"
instruction, including the

97
00:05:38,062 --> 00:05:43,280
condition and the increment statement.
However, this variable i

98
00:05:43,280 --> 00:05:47,190
will be local to the "for" loop, to the
iterative loop.

99
00:05:47,190 --> 00:05:49,980
After the end of the block controlled by

100
00:05:49,980 --> 00:05:53,580
the "for" instruction, we won't be
allowed to use

101
00:05:53,580 --> 00:05:59,417
this variablle; it is local to the "for"
iteration.

