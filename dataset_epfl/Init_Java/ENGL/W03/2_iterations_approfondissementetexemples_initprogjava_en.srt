1
00:00:00,000 --> 00:00:05,704
Let's begin this episode with a
few more

2
00:00:05,704 --> 00:00:10,711
"for loops" examples.
This loop starts by

3
00:00:10,711 --> 00:00:15,406
declaring a variable p and
intializing it to 0.

4
00:00:15,406 --> 00:00:22,015
The condition is "p strictly less than 10"
and the increment statement

5
00:00:22,015 --> 00:00:25,015
is "p += 2 ". Be reminded that

6
00:00:25,015 --> 00:00:29,448
"p += 2" is strictly equivalent to
"p = p + 2 ".

7
00:00:29,448 --> 00:00:33,660
That means we add 2 to the variable
p at every iteration.

8
00:00:33,660 --> 00:00:35,633
p will initially have the value 0.

9
00:00:35,633 --> 00:00:37,580
At the end of the first iteration,
we will 

10
00:00:37,580 --> 00:00:40,460
add 2 to p; p will thus be 2.

11
00:00:40,460 --> 00:00:45,534
Then p will be 4 and so on until

12
00:00:45,534 --> 00:00:50,540
p will have the value 10. When this
happens, the condition will become false

13
00:00:50,540 --> 00:00:54,940
and we will exit the loop.
Therefore, p will have the

14
00:00:54,940 --> 00:01:01,426
values 0, 2, 4, 6 and 8.
In this second

15
00:01:01,426 --> 00:01:07,900
example, we declare a variable k
and initalize it to 10.

16
00:01:07,900 --> 00:01:09,964
The condition is "k strictly greater
than 0."

17
00:01:09,964 --> 00:01:12,985
Be careful, the sense of
comparison has been reversed here!

18
00:01:12,985 --> 00:01:15,823
The increment statement is

19
00:01:15,823 --> 00:01:19,908
" --k" which is strictly equivalent to
"k = k - 1 ".

20
00:01:19,908 --> 00:01:23,673
That means we will substract 1 from
the variable k

21
00:01:23,673 --> 00:01:28,595
at every iteration. k will initially
have the value 10.

22
00:01:28,595 --> 00:01:34,477
At the end of the first iteration,
k will be 9, then 8

23
00:01:34,477 --> 00:01:38,315
and so on until k will have
the value 0.

24
00:01:38,315 --> 00:01:41,460
When this happens, the condition
will become false

25
00:01:41,460 --> 00:01:46,412
and we will exit the loop. In this
example, k will have

26
00:01:46,412 --> 00:01:51,260
the values 10, 9, 8, ..., until 1.

27
00:01:51,260 --> 00:01:57,280
In this last example, we start
by declaring

28
00:01:57,280 --> 00:02:02,140
a variable i, initialized to 0.
The condition is

29
00:02:02,140 --> 00:02:06,946
"i greater or equal to 0".
The increment statement

30
00:02:06,946 --> 00:02:09,550
is " ++i " which means we will add
1 to i 

31
00:02:09,550 --> 00:02:13,202
at every iteration. i will initially have
the value 0.

32
00:02:13,202 --> 00:02:16,082
Then, i will have the value 1.

33
00:02:16,082 --> 00:02:18,390
The condition will remain true.

34
00:02:18,390 --> 00:02:21,968
Then i, will have the value 2.

35
00:02:21,968 --> 00:02:26,096
The condition will still be true.
Actually, in this

36
00:02:26,096 --> 00:02:30,248
case, the condition will always be
true, in principle at least.

37
00:02:30,248 --> 00:02:32,305
Therefore, we will never exit the loop.

38
00:02:32,305 --> 00:02:34,243
But why did we say "in principle" ?

39
00:02:34,243 --> 00:02:35,926
Because, for technical reasons

40
00:02:35,926 --> 00:02:38,775
we will not explain, it is not entierely true;

41
00:02:38,775 --> 00:02:43,820
but we will still repeat the instructions
many times.

42
00:02:43,820 --> 00:02:51,230
A "for loop" can thus keep looping
forever, if the condition is always true.

43
00:02:51,230 --> 00:02:53,487
A few reasons, can explain this.

44
00:02:53,487 --> 00:02:57,330
As in the last example, mayhaps we

45
00:02:57,330 --> 00:02:58,640
made a mistake in the condition.

46
00:02:58,640 --> 00:03:02,414
Once again though,

47
00:03:02,414 --> 00:03:06,195
in such a case, we will still exit
the loop

48
00:03:06,195 --> 00:03:08,725
for technical reasons which will not
be discussed here.

49
00:03:08,725 --> 00:03:11,330
But it will happen only after a large
number of iterations.

50
00:03:11,330 --> 00:03:17,472
Another possible mistake is to err in
the increment statement.

51
00:03:17,472 --> 00:03:21,277
For example, here, the condition is 
about the variable i.

52
00:03:21,277 --> 00:03:23,149
We made a mistake

53
00:03:23,149 --> 00:03:28,670
and incremented the variable j instead.
Since i is intialized to 0,

54
00:03:28,670 --> 00:03:33,650
the condition will always be true
and we won't ever exit the loop.

55
00:03:33,650 --> 00:03:38,450
Now, let us move on to a few mistakes,
frequent among beginners.

56
00:03:38,450 --> 00:03:41,798
First of all, please note that
there is no semicolon

57
00:03:41,798 --> 00:03:44,216
at the end of this line,
starting with the keyword "for".

58
00:03:44,216 --> 00:03:47,984
Namely, there is no semicolon

59
00:03:47,984 --> 00:03:48,419
here.

60
00:03:48,419 --> 00:03:51,950
However, it so happens that the
compiler will accept

61
00:03:51,950 --> 00:03:55,702
your program if you were to add
a semicolon here.

62
00:03:55,702 --> 00:03:59,812
Yet, your program would behave rather
strangely.

63
00:03:59,812 --> 00:04:03,508
More precisely, with the semicolon,
this code

64
00:04:03,508 --> 00:04:06,894
will only print the word "bonjour"
once. (TN: "bonjour" means "hello")

65
00:04:06,894 --> 00:04:08,016
Why is that?

66
00:04:08,016 --> 00:04:13,205
Because in fact, the semicolon here
will be 

67
00:04:13,205 --> 00:04:19,233
interpreted as an empty instruction,
an instruction doing nothing.

68
00:04:19,233 --> 00:04:23,440
Therefore, the code will be interpreted
like that :

69
00:04:23,440 --> 00:04:30,085
only the semicolon will be considered as
inside the loop's body.

70
00:04:30,085 --> 00:04:34,098
Consequently, the loop will repeat
the empty instruction 10 times.

71
00:04:34,098 --> 00:04:36,190
Namely, doing nothing ten times.

72
00:04:36,190 --> 00:04:38,236
On the other hand, the printing instruction

73
00:04:38,236 --> 00:04:41,074
here, will be considered as
being outisde

74
00:04:41,074 --> 00:04:44,693
the loop and will be thus be executed
but once.

75
00:04:44,693 --> 00:04:48,510
This is why, the code will only print
"bonjour" only once.

76
00:04:48,510 --> 00:04:53,110
One must also be wary regarding
braces.

77
00:04:53,110 --> 00:04:57,504
For example, this code will result
in this printing.

78
00:04:57,504 --> 00:05:01,800
This instruction will indeed be
repeted five times.

79
00:05:01,800 --> 00:05:03,640
However, this instruction

80
00:05:03,640 --> 00:05:07,945
will only be executed once?
Why is that?

81
00:05:07,945 --> 00:05:11,648
Because this code will be interpreted
like that:

82
00:05:11,648 --> 00:05:16,594
this instruction is indeed
 inside the loop,

83
00:05:16,594 --> 00:05:20,480
while this one is outisde the loop.

84
00:05:20,480 --> 00:05:25,856
Thus, pay attention! The indentation, that is

85
00:05:25,856 --> 00:05:29,349
moving these two lines to the right,

86
00:05:29,349 --> 00:05:33,520
won't be enough to have both
instructions to be inside the loop.

87
00:05:33,520 --> 00:05:39,280
If I want both instructions to be inside
the loop, the only way is to add

88
00:05:39,280 --> 00:05:43,369
an opening brace before the first 
instruction

89
00:05:43,369 --> 00:05:46,748
and a closing brace after the last
instruction.

90
00:05:46,748 --> 00:05:55,370
And then, we will obtain the desired
printing : " i égal 0, Bonjour, i égal 1...

91
00:05:55,370 --> 00:06:01,470
...Bonjour", et cetera.

92
00:06:01,470 --> 00:06:07,477
Also, please refrain from modifying the variable
controlling the

93
00:06:07,477 --> 00:06:12,426
number of iterations, inside the
loop's body.

94
00:06:12,426 --> 00:06:16,412
Namely, please refrain from doing as
in this example where

95
00:06:16,412 --> 00:06:20,642
we start by declaring a variable i 
intialized it to 0.

96
00:06:20,642 --> 00:06:26,750
This variable i is used in the condition
and in the increment statement.

97
00:06:26,750 --> 00:06:32,694
But the variable i is also 
modified inside the loop's body.

98
00:06:32,694 --> 00:06:37,001
Now, why should we avoid such a
practice?

99
00:06:37,001 --> 00:06:41,746
First of all, because it probably won't
do what you expect.

100
00:06:41,746 --> 00:06:47,000
Do not forget that the "for loop"
itself will modify

101
00:06:47,000 --> 00:06:50,440
the value of i through the increment statement.

102
00:06:50,440 --> 00:06:55,135
Also, doing such a thing will make it much
more difficult for a human reviewer

103
00:06:55,135 --> 00:06:57,838
to understand what your program is doing.
Indeed,

104
00:06:57,838 --> 00:07:01,846
they will probably not exepect the 
variable declared in 

105
00:07:01,846 --> 00:07:06,490
the "for loop" to be modified within
the loop's body.

106
00:07:06,490 --> 00:07:09,006
Now, let us move on to an example

107
00:07:09,006 --> 00:07:12,270
which should highlight the problems
we can encounter

108
00:07:12,270 --> 00:07:13,600
regarding "for loops".

109
00:07:13,600 --> 00:07:17,188
In this example, we are trying to write
a program asking 4 grades

110
00:07:17,188 --> 00:07:21,196
to the user and printing the average
of these 4 grades.

111
00:07:21,196 --> 00:07:26,310
Without resorting to "for loops", we could
write the program like that,

112
00:07:26,310 --> 00:07:31,770
repeating four times these two instructions
asking the user to input

113
00:07:31,770 --> 00:07:37,340
a value and storing the inputted
value in a variable.

114
00:07:37,340 --> 00:07:41,560
The first variable is called "note1".
(TN: "note" means "grade").

115
00:07:41,560 --> 00:07:45,304
Then "note2", "note3" and "note4".

116
00:07:45,304 --> 00:07:49,535
At this point, the variables "note"
1, 2, 3 and 4

117
00:07:49,535 --> 00:07:54,670
contain the four values inputted by
the user.

118
00:07:54,670 --> 00:07:59,289
Now, I can calculate the sum and

119
00:07:59,289 --> 00:08:02,237
store the result in a variable called
"somme".

120
00:08:02,237 --> 00:08:07,682
Finally, we only have to divide the sum by 4
in order to obtain the average.

121
00:08:07,682 --> 00:08:12,993
Now, the fact that we used a different
variable

122
00:08:12,993 --> 00:08:18,550
for every grade prevents us from directly
introducing a "for loop".

123
00:08:18,550 --> 00:08:22,906
Therefore, we will start  by rewriting
the code

124
00:08:22,906 --> 00:08:27,635
so that we only use one variable to
store the four grades.

125
00:08:27,635 --> 00:08:31,020
Therefore, the reworked code
will appear like this.

126
00:08:31,020 --> 00:08:35,275
We still have a variable "somme".

127
00:08:35,275 --> 00:08:40,138
We ask the user to input a first value

128
00:08:40,138 --> 00:08:44,740
which we store in the variable "note".

129
00:08:44,740 --> 00:08:50,050
Now, we have this assignment : 
"somme = somme + note",

130
00:08:50,050 --> 00:08:53,249
which we will explain soon,

131
00:08:53,249 --> 00:08:57,956
then, we will repeat this code,
using

132
00:08:57,956 --> 00:09:04,490
the same "note" variable to store the
values inputted by the user.

133
00:09:04,490 --> 00:09:07,160
We can see that, at this point,

134
00:09:07,160 --> 00:09:12,088
the variable "somme" does indeed
contain the sum

135
00:09:12,088 --> 00:09:14,949
of the four grades.

136
00:09:14,949 --> 00:09:18,399
As before, we only need to divide "somme"
by 4 to obtain the average.

137
00:09:18,399 --> 00:09:22,884
Now, let us detail this new version
of the code

138
00:09:22,884 --> 00:09:26,610
to make sure it is still doing
the same thing.

139
00:09:26,610 --> 00:09:31,470
To that end, let us suppose that
the user 

140
00:09:31,470 --> 00:09:35,005
is inputting the grades 
5, 4, 6 and 4.

141
00:09:35,005 --> 00:09:42,515
The program starts by declaring a variable
"somme" and initializes it to 0.

142
00:09:42,515 --> 00:09:43,730
We move on

143
00:09:43,730 --> 00:09:46,326
to this instruction, printing
a message

144
00:09:46,326 --> 00:09:49,950
inviting the user to type
a value.

145
00:09:49,950 --> 00:09:53,065
This value will be read through
keyboard interaction

146
00:09:53,065 --> 00:09:55,795
and stored in the variable "note",
declared here.

147
00:09:55,795 --> 00:09:58,770
We decided that the first value
would be 5.

148
00:09:58,770 --> 00:10:04,060
Now, we move to this assignment,

149
00:10:04,060 --> 00:10:08,854
first computing the value of "somme + note".

150
00:10:08,854 --> 00:10:12,170
"somme" is 0.
"note" is 5.

151
00:10:12,170 --> 00:10:16,850
Therefore, the value of this expression
is 5.

152
00:10:16,850 --> 00:10:23,500
This value will be stored inside
"somme".

153
00:10:23,500 --> 00:10:29,238
Now to the second grade inputted
by the user.

154
00:10:29,238 --> 00:10:32,240
We supposed that this value
was 4.

155
00:10:32,240 --> 00:10:33,968
This assignment

156
00:10:33,968 --> 00:10:39,622
will thus compute this
expression, namely

157
00:10:39,622 --> 00:10:45,497
"somme", which is 5, "+ note",
which is 4.

158
00:10:45,497 --> 00:10:52,150
We get the value 9, which will be stored
inside the variable "somme".

159
00:10:54,700 --> 00:10:59,208
Now to the third grade, which is
a 6.

160
00:10:59,208 --> 00:11:04,851
This expression will now be
"9 + 6", that is 15.

161
00:11:04,851 --> 00:11:10,970
We will store this result
inside "somme".

162
00:11:10,970 --> 00:11:14,922
At this point of the program,
you should see

163
00:11:14,922 --> 00:11:19,728
that the variable somme will
indeed contain

164
00:11:19,728 --> 00:11:24,936
5 + 4 + 6 + 4, which
is

165
00:11:24,936 --> 00:11:30,250
the sum of the four grades,
19.

166
00:11:30,250 --> 00:11:33,412
Therefore, this instruction here will

167
00:11:33,412 --> 00:11:37,350
print the average of the
four inputted grades.

168
00:11:37,350 --> 00:11:41,484
This new version will make it easier

169
00:11:41,484 --> 00:11:44,916
to introduce a "for loop", thus
skippping

170
00:11:44,916 --> 00:11:48,532
the unnecessary repetitions
of this three instructions,

171
00:11:48,532 --> 00:11:51,725
which will be repeated four times, once
for every grade.

172
00:11:51,725 --> 00:11:54,330
We will thus move these three
instructions

173
00:11:54,330 --> 00:11:57,522
inside a "for loop".

174
00:11:57,522 --> 00:11:59,585
Just like this.

175
00:11:59,585 --> 00:12:04,840
Our loop will use a variable going
from 1 to 4.

176
00:12:04,840 --> 00:12:11,032
And thus, this program is equivalent
to the former.

177
00:12:11,032 --> 00:12:14,540
We can verify this easily through 
an example.

178
00:12:14,540 --> 00:12:19,189
We should not forget to 
initialize the variable "somme" to 0.

179
00:12:19,189 --> 00:12:21,133
Which we did here.

180
00:12:21,133 --> 00:12:25,965
Now, at the first iteration, i is 1.
Let us suppose that

181
00:12:25,965 --> 00:12:30,943
the first grade inputted by the user
is the value 5.

182
00:12:30,943 --> 00:12:36,140
This instruction will thus store
the value 5 inside the variable "note".

183
00:12:36,140 --> 00:12:38,876
Moving to this assignment,

184
00:12:38,876 --> 00:12:42,857
we will calculate the value of this
expression,

185
00:12:42,857 --> 00:12:47,384
as before, " 0 + note",

186
00:12:47,384 --> 00:12:49,592
which is 5.

187
00:12:49,592 --> 00:12:53,689
We get the value 5 for this expression

188
00:12:53,689 --> 00:12:58,020
and the assignment will store this 
value inside "somme".

189
00:12:58,020 --> 00:13:00,990
Namely, we will replace the 0, here,

190
00:13:00,990 --> 00:13:04,789
by the value 5. The process is
identical to the previous version,

191
00:13:04,789 --> 00:13:09,510
only we have added a "for loop".

192
00:13:09,510 --> 00:13:14,725
Therefore, at this point of the program,
the variable "somme"

193
00:13:14,725 --> 00:13:19,520
will contain the sum of the four grades
inputted by the user.

194
00:13:19,520 --> 00:13:23,414
Now, let us suppose that we wish to
let the user choose

195
00:13:23,414 --> 00:13:25,955
how many grades he wants to
input.

196
00:13:25,955 --> 00:13:28,412
How should we modify the program?

197
00:13:28,412 --> 00:13:31,058
First of all, we will introduce
a variable

198
00:13:31,058 --> 00:13:33,692
called "nombre de notes"
(TN: "nombre de notes" means "number of grades").

199
00:13:33,692 --> 00:13:37,784
First of all, we have a message

200
00:13:37,784 --> 00:13:41,512
inviting the user to input the number
of grades.

201
00:13:41,512 --> 00:13:45,430
Via this instruction, we will read
the inputted value through

202
00:13:45,430 --> 00:13:50,920
keyboard interaction, and store it
inside the variable "nombre de notes".

203
00:13:50,920 --> 00:13:56,632
Now, all we have to do is to replace this
"4" by the variable "nombre de notes".

204
00:13:56,632 --> 00:14:02,684
Similarly, we will replace this 4, which
will allow us

205
00:14:02,684 --> 00:14:08,890
to calculate the average.
And we are done!

206
00:14:08,890 --> 00:14:12,410
We now have a generic program

207
00:14:12,410 --> 00:14:15,981
which will work for any number
of grades.

208
00:14:15,981 --> 00:14:21,020
However, we have just introduced
a bug. Where is it, in your opinion?

209
00:14:21,020 --> 00:14:27,656
The bug will occur if the user

210
00:14:27,656 --> 00:14:30,278
enters the value 0 for the number of
grades.

211
00:14:30,278 --> 00:14:35,168
Providing we're not careful, we will
divide by zero, here.

212
00:14:35,168 --> 00:14:39,012
To avoid this nuisance, there are
several solutions.

213
00:14:39,012 --> 00:14:40,984
An idea is to test, before we calculate

214
00:14:40,984 --> 00:14:43,918
the average, if the number

215
00:14:43,918 --> 00:14:46,162
of grades is equal to 0.

216
00:14:46,162 --> 00:14:49,740
Therefore, we can modify our program like
this.

217
00:14:49,740 --> 00:14:55,291
We simply added a conditional statement,

218
00:14:55,291 --> 00:14:58,635
testing if the number of grades is strictly
positive,

219
00:14:58,635 --> 00:15:01,387
that is, not equal to 0.

220
00:15:01,387 --> 00:15:06,480
Now, we can do the computations
as before.

221
00:15:06,480 --> 00:15:10,550
I just need to close the braces, here.

222
00:15:10,550 --> 00:15:13,878
And if the user inputs a number

223
00:15:13,878 --> 00:15:18,170
of grades equal to 0,
we won't execute the division.

224
00:15:18,170 --> 00:15:24,616
Let us conclude with the so-called
"nested loops".

225
00:15:24,616 --> 00:15:27,577
To that end, we will go back to the
example

226
00:15:27,577 --> 00:15:31,596
regarding the 5 times table,
which used a "for loop"

227
00:15:31,596 --> 00:15:36,974
to print the complete table.
Now, let us suppose

228
00:15:36,974 --> 00:15:42,970
that we wish to print all times tables
from 2 to 10.

229
00:15:42,970 --> 00:15:49,295
Easily enough, we simply need to move
this code inside another "for loop"

230
00:15:49,295 --> 00:15:55,182
and to modify it slighlty. Thus, we'll obtain
all multiplication tables from 2 to 10.

231
00:15:55,182 --> 00:15:56,678
First of all,

232
00:15:56,678 --> 00:16:00,480
we will move this code inside another
"for loop".

233
00:16:00,480 --> 00:16:02,775
Which we did here.

234
00:16:02,775 --> 00:16:05,499
Here is the previous code,

235
00:16:05,499 --> 00:16:10,905
namely the one printing the 5 times table,
which we

236
00:16:10,905 --> 00:16:16,418
moved inside another "for loop". This second 
loop has a variable j, varying

237
00:16:16,418 --> 00:16:22,015
from 2 to 10.
j will thus take nine values,

238
00:16:22,015 --> 00:16:23,460
from 2 to 10.

239
00:16:23,460 --> 00:16:27,700
This whole code here will print

240
00:16:27,700 --> 00:16:31,220
 9 times the multiplication table for 5.

241
00:16:31,220 --> 00:16:34,842
Since we would rather have all times tables

242
00:16:34,842 --> 00:16:37,947
from 2 to 10, we simply have to replace

243
00:16:37,947 --> 00:16:42,050
this 5 here, by the value of the variable
j,

244
00:16:42,050 --> 00:16:45,650
since j goes from 2 to 10.

245
00:16:45,650 --> 00:16:47,695
Also, we will replace

246
00:16:47,695 --> 00:16:52,532
this 5 aswell, by the value of j.

247
00:16:52,532 --> 00:16:57,853
We thus obtain this code here,

248
00:16:57,853 --> 00:17:03,130
with j appearing here and here.

249
00:17:03,130 --> 00:17:06,968
We are stating that this code

250
00:17:06,968 --> 00:17:11,095
will print all multiplication tables from 
2 to 10.

251
00:17:11,095 --> 00:17:13,110
We are now going to check this,

252
00:17:13,110 --> 00:17:15,690
by exploring the code step by step.

253
00:17:15,690 --> 00:17:19,218
We start with a first "for loop",

254
00:17:19,218 --> 00:17:23,626
declaring a variable j and initializing it to 2.

255
00:17:23,626 --> 00:17:26,820
The condition is "j less or equal to 10".

256
00:17:26,820 --> 00:17:30,530
The increment statement is "++j".

257
00:17:30,530 --> 00:17:35,190
Thus, j will take the values 2, 3, 4
and so on up to 10.

258
00:17:35,190 --> 00:17:39,040
For now, j will be initialized

259
00:17:39,040 --> 00:17:39,720
to 2.

260
00:17:39,720 --> 00:17:46,579
We now enter this "for loop" and
reach this new

261
00:17:46,579 --> 00:17:51,000
instruction, which we added to print
what table we're about to display.

262
00:17:51,000 --> 00:17:54,392
Namely, we will print "table de multiplication par ",
(TN: means "multiplication table for ")

263
00:17:54,392 --> 00:17:58,287
then we print the value of j, then a colon.

264
00:17:58,287 --> 00:18:02,725
Since j is 2, we will simply print 2, for now.

265
00:18:02,725 --> 00:18:03,310
We now enter another

266
00:18:03,310 --> 00:18:07,828
"for loop", declaring a variable i

267
00:18:07,828 --> 00:18:12,050
and initializing it to 1.

268
00:18:12,050 --> 00:18:15,693
The condition is "i less or equal to 10".

269
00:18:15,693 --> 00:18:19,300
The increment statement is "++i".

270
00:18:19,300 --> 00:18:24,110
i will thus take the values 1, 2 up to
10.

271
00:18:24,110 --> 00:18:27,420
For now, j has the value 1.

272
00:18:27,420 --> 00:18:28,185
We enter

273
00:18:28,185 --> 00:18:30,395
this "for loop",

274
00:18:30,395 --> 00:18:33,950
executing this printing
instruction,

275
00:18:33,950 --> 00:18:36,355
printing the value of j,

276
00:18:36,355 --> 00:18:38,314
that is, 2,

277
00:18:38,314 --> 00:18:45,946
then "multiplié par " (means "times"),
then the value of i, that is, 1,

278
00:18:45,946 --> 00:18:51,986
then "vaut" (means "is"), then the value
of this expression, which is 2 times 1,

279
00:18:51,986 --> 00:18:53,482
which is

280
00:18:53,482 --> 00:18:54,040
2.

281
00:18:54,040 --> 00:18:58,600
Since this is the only instruction
in the "i for loop",

282
00:18:58,600 --> 00:19:03,095
we'll jump back here and execute
this

283
00:19:03,095 --> 00:19:07,616
increment statement. Thus, i will go from
1 to 2.

284
00:19:07,616 --> 00:19:09,675
The condition is still true.

285
00:19:09,675 --> 00:19:12,941
Therefore we enter the "i for loop"
again,

286
00:19:12,941 --> 00:19:18,568
which means we'll execute this
instruction; this time with

287
00:19:18,568 --> 00:19:25,175
the value of i being 2. In the meantime, j
is still 2. We print "multiplié par",

288
00:19:25,175 --> 00:19:31,404
then the value of i, which is now 2.

289
00:19:31,404 --> 00:19:34,019
Then we print "vaut" and the value

290
00:19:34,019 --> 00:19:36,755
of this expression, which is 2 times 2,

291
00:19:36,755 --> 00:19:38,658
that is 4.

292
00:19:38,658 --> 00:19:44,342
And so on, until i will take the value
10.

293
00:19:44,342 --> 00:19:50,480
There, we will execute the increment
statement "++i".

294
00:19:50,480 --> 00:19:56,234
Thus i will take the value 11
and the condition will become false.

295
00:19:56,234 --> 00:19:58,776
So, we will exit the loop,

296
00:19:58,776 --> 00:20:04,692
reaching this point,

297
00:20:04,692 --> 00:20:09,385
at the end of the "for loop" j.

298
00:20:09,385 --> 00:20:16,890
Now, we execute the increment
statement,

299
00:20:16,890 --> 00:20:22,638
"++j". j will go from 2 to 3.

300
00:20:22,638 --> 00:20:25,540
The condition is still true.

301
00:20:25,540 --> 00:20:30,205
And we enter the (body of)
"j for loop" again.

302
00:20:30,205 --> 00:20:34,414
Thus, we will the execute body of the
"j for loop" again.

303
00:20:34,414 --> 00:20:39,325
We print this message with,
this time,

304
00:20:39,325 --> 00:20:44,561
the value of j being 3. And we
enter

305
00:20:44,561 --> 00:20:49,500
 this "for loop" again.

306
00:20:49,500 --> 00:20:54,571
We restart with i being 1.
Thus, we execute the instruction

307
00:20:54,571 --> 00:21:00,500
inside the body of the "i for loop",

308
00:21:00,500 --> 00:21:05,479
this time with the value of j being 3.
We get the printing

309
00:21:05,479 --> 00:21:11,630
"multiplié par" then the value of i, which 
is 1 again,

310
00:21:11,630 --> 00:21:17,249
then the value of this expression
j times i,

311
00:21:17,249 --> 00:21:21,540
that is, 3 times 1: simply 3.

312
00:21:21,540 --> 00:21:26,170
And so on until i takes the
value 10.

313
00:21:26,170 --> 00:21:29,014
We clearly see that for each

314
00:21:29,014 --> 00:21:32,813
value of j, we will unfold completely
the inside loop,

315
00:21:32,813 --> 00:21:35,500
the "i for loop".

316
00:21:35,500 --> 00:21:40,058
i will go from 1 to 10, thus printing
the complete multiplication

317
00:21:40,058 --> 00:21:45,783
table for the current value of j. This will
keep

318
00:21:45,783 --> 00:21:50,840
going until j takes the value 10.

