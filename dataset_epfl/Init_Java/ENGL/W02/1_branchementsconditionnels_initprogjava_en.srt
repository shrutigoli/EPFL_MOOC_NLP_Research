1
00:00:00,000 --> 00:00:05,175
In a previous episode, we saw that to
program consists of describing a

2
00:00:05,175 --> 00:00:11,110
task for the computer to execute.

3
00:00:11,110 --> 00:00:14,386
This task being decomposed on
one hand in

4
00:00:14,386 --> 00:00:18,670
a number of data, that is, physical
quantities of the real

5
00:00:18,670 --> 00:00:21,442
world which we want to represent in
the program; and

6
00:00:21,442 --> 00:00:22,394
a number of

7
00:00:22,394 --> 00:00:25,100
computations, that is, operations and
manipulations

8
00:00:25,100 --> 00:00:26,156
of these data.

9
00:00:26,156 --> 00:00:31,460
We have already seen how to manipulate
the data with operators.

10
00:00:31,460 --> 00:00:34,302
But in order to truly have a program,
the data should

11
00:00:34,302 --> 00:00:37,643
be able to influence on the computations
to be done.

12
00:00:37,643 --> 00:00:40,700
This is what we are going to study
in this episode.

13
00:00:40,700 --> 00:00:43,514
It's what are called "control structures".

14
00:00:43,514 --> 00:00:46,564
Indeed, until now, the programs
we executed

15
00:00:46,564 --> 00:00:48,790
were simply sequences of
instructions

16
00:00:48,790 --> 00:00:50,140
one behind the other.

17
00:00:50,140 --> 00:00:54,485
Theses computations weren't conditioned
by the values of the variables.

18
00:00:54,485 --> 00:00:58,225
Control structures precisely allow
to

19
00:00:58,225 --> 00:01:01,020
choose, for example, if we want
a certain

20
00:01:01,020 --> 00:01:04,875
sequence of instructions or another,

21
00:01:04,875 --> 00:01:07,815
depending for example on the value
of a variable.

22
00:01:07,815 --> 00:01:10,920
That is what we call a "conditional branch"
(or "conditional statement").

23
00:01:10,920 --> 00:01:15,408
There exists in fact three control
structures : the conditional branches,

24
00:01:15,408 --> 00:01:21,015
which allow to choose between the execution
of a piece of code or the execution

25
00:01:21,015 --> 00:01:25,881
of another piece of code, depending on
certain conditions on the data.

26
00:01:25,881 --> 00:01:29,249
There exists the iterations, which
are simply loops on

27
00:01:29,249 --> 00:01:33,067
a set of code snippets to be repeated
a number

28
00:01:33,067 --> 00:01:36,834
of times; and finally the conditional
loops, which also

29
00:01:36,834 --> 00:01:40,860
repeat instructions a number of times,
but depending on

30
00:01:40,860 --> 00:01:42,969
a condition which is evaluated every
time.

31
00:01:42,969 --> 00:01:45,363
In this episode, we are going to
have a look at

32
00:01:45,363 --> 00:01:49,665
the conditional branches, which allow
to

33
00:01:49,665 --> 00:01:52,607
skip certain parts or to choose

34
00:01:52,607 --> 00:01:57,321
certain parts if various conditions
are fulfilled.

35
00:01:57,321 --> 00:01:59,890
Now let's have a better look at
all this.

36
00:01:59,890 --> 00:02:03,006
Let's suppose, for example, that we want
to do this or

37
00:02:03,006 --> 00:02:05,970
that, depending on the value
of an integer

38
00:02:05,970 --> 00:02:10,280
that was entered on a keyboard, here
by using the "scanner".

39
00:02:10,280 --> 00:02:14,341
We are going to use what we call a
conditional branch, which

40
00:02:14,341 --> 00:02:16,879
I will detail in a moment, but for example
if the value

41
00:02:16,879 --> 00:02:19,466
is less than five, we are going to do
a certain thing, and

42
00:02:19,466 --> 00:02:22,185
if the value is greater than five, we
are going to do another thing.

43
00:02:22,185 --> 00:02:26,470
That's the idea of a conditional branch,
in which we choose, depending on

44
00:02:26,470 --> 00:02:30,954
the fact that n is greater than or less
than five,

45
00:02:30,954 --> 00:02:36,298
this or that piece of code to execute.
The lines in question are these

46
00:02:36,298 --> 00:02:41,728
three lines here, which are organized
according to the general following syntax.

47
00:02:41,728 --> 00:02:44,896
We begin with the keyword "if". Then in

48
00:02:44,896 --> 00:02:48,428
parentheses we here have a condition.
Then we

49
00:02:48,428 --> 00:02:52,212
have here in curly braces a block
of instructions

50
00:02:52,212 --> 00:02:56,272
which will be executed when the
condition is true.

51
00:02:56,272 --> 00:03:01,951
We'll then have, optionally, another
keyword,

52
00:03:01,951 --> 00:03:07,898
"else", which will itself monitor another
block of instructions, which will be

53
00:03:07,898 --> 00:03:13,500
executed if the condition we tested at
the beginning is false.

54
00:03:13,500 --> 00:03:16,848
Here we see that depending on

55
00:03:16,848 --> 00:03:21,453
the condition, we are  going to execute
either a block of instructions,

56
00:03:21,453 --> 00:03:23,280
or another.

57
00:03:23,280 --> 00:03:29,690
This is what we call a "conditional branch"
depending on the condition.

58
00:03:29,690 --> 00:03:33,290
The general structure of a conditional
statement is

59
00:03:33,290 --> 00:03:35,860
the following: we begin with the
keyword "if".

60
00:03:35,860 --> 00:03:39,808
Then, we put a condition in parentheses.

61
00:03:39,808 --> 00:03:46,514
We'll return later in the next episode on what
the conditions are and how to

62
00:03:46,514 --> 00:03:47,500
write them.

63
00:03:47,500 --> 00:03:49,705
We then have a block of instructions

64
00:03:49,705 --> 00:03:52,090
which executes when the condition is true.

65
00:03:52,090 --> 00:03:58,934
Then, we optionally have the reserved
word "else", followed by

66
00:03:58,934 --> 00:04:05,955
another block of instructions, which will
be executed when the condition is false.

67
00:04:05,955 --> 00:04:09,651
Let's have a look, on a concrete step-by-step
example, how this works.

68
00:04:09,651 --> 00:04:11,910
Let's suppose we have the following
code,

69
00:04:11,910 --> 00:04:15,110
with the conditional statement situated
here.

70
00:04:15,110 --> 00:04:17,970
But first, we begin by asking

71
00:04:17,970 --> 00:04:22,335
the user a question, to input
an integer.

72
00:04:22,335 --> 00:04:24,051
So let's suppose for example that

73
00:04:24,051 --> 00:04:26,700
the user inputs the integer 3.

74
00:04:26,700 --> 00:04:30,660
A this point, we'll get to this
conditional statement and

75
00:04:30,660 --> 00:04:34,560
ask ourselves:
is 3 less than 5?

76
00:04:34,560 --> 00:04:37,710
3 is indeed less than 5, so the
condition

77
00:04:37,710 --> 00:04:41,416
here is true and therefore the block
of instructions which will be

78
00:04:41,416 --> 00:04:45,410
executed, is the block that immediately 
follows the condition, which

79
00:04:45,410 --> 00:04:49,190
means that in the program, in this case,
in which the user has entered

80
00:04:49,190 --> 00:04:53,060
3, is going to print the message : "votre nombre
est plus petit que cinq." (= "your number is less than 5")

81
00:04:53,060 --> 00:04:58,228
Then, the program will continue after
the conditional

82
00:04:58,228 --> 00:05:03,552
statement here; it will continue
the normal progress and print

83
00:05:03,552 --> 00:05:07,355
here: "fin du programme."
(= "end of program")

84
00:05:07,355 --> 00:05:10,211
Now what happens in the case where

85
00:05:10,211 --> 00:05:13,050
the user enters a number
greater than 5?

86
00:05:13,050 --> 00:05:17,535
For example, if he enters the value 7,
we'll get to the condition

87
00:05:17,535 --> 00:05:20,373
in the conditional statement, and
evaluate the

88
00:05:20,373 --> 00:05:23,025
condition, is 7 less than 5?

89
00:05:23,025 --> 00:05:26,200
The condition is of course false,
which means that

90
00:05:26,200 --> 00:05:29,098
the branch will be made here on the
block monitored

91
00:05:29,098 --> 00:05:30,961
by the keyword "else", which is the

92
00:05:30,961 --> 00:05:33,970
block used when the condition
is false.

93
00:05:33,970 --> 00:05:41,740
We'll therefore print here : "votre nombre
est plus grand ou égal à cinq".

94
00:05:41,740 --> 00:05:48,615
We'll then continue the execution
after the conditional statement block,

95
00:05:48,615 --> 00:05:53,526
so here we'll once again end by
printing "fin du programme".

96
00:05:53,526 --> 00:05:54,750
The curly braces

97
00:05:54,750 --> 00:05:59,486
are used to control a set of
instructions, whether

98
00:05:59,486 --> 00:06:02,848
it's the block of instructions executed
when the

99
00:06:02,848 --> 00:06:05,356
condition is true, or whether it's
the

100
00:06:05,356 --> 00:06:09,570
block of instructions executed when the
condition is false.

101
00:06:09,570 --> 00:06:12,118
These curly braces are used to regroup
the instructions that we

102
00:06:12,118 --> 00:06:15,000
want to put together to execute in this
or that condition.

103
00:06:15,000 --> 00:06:19,876
We can of course add as much
instructions as we want in

104
00:06:19,876 --> 00:06:21,613
a block of instructions.

105
00:06:21,613 --> 00:06:26,357
Let's suppose for example that we want
to print a message which

106
00:06:26,357 --> 00:06:31,720
indicates the value of the number, when
the number is less than 5.

107
00:06:31,720 --> 00:06:33,489
So, what we are going to do, is,

108
00:06:33,489 --> 00:06:35,868
in the block conditioned by the
condition

109
00:06:35,868 --> 00:06:38,298
"n less than 5", add here a line

110
00:06:38,298 --> 00:06:43,290
which will let us print an additional
message.

111
00:06:43,290 --> 00:06:45,199
By the way, when a block

112
00:06:45,199 --> 00:06:48,270
contains a single instruction, it
isn't

113
00:06:48,270 --> 00:06:51,910
strictly necessary to use the curly
braces.

114
00:06:51,910 --> 00:06:55,960
However, I recommend you to always
use a

115
00:06:55,960 --> 00:06:59,608
block structure, that is, to always
use curly braces.

116
00:06:59,608 --> 00:07:01,880
This makes the code not only
more readable,

117
00:07:01,880 --> 00:07:04,502
but also more maintainable; it
facilitates

118
00:07:04,502 --> 00:07:07,172
adding instructions later on: if we
want to

119
00:07:07,172 --> 00:07:10,448
add an instruction here, we can do it

120
00:07:10,448 --> 00:07:13,880
without any other hassle, as the block
is already there.

121
00:07:13,880 --> 00:07:16,652
However, you could encounter here and
there, in

122
00:07:16,652 --> 00:07:18,962
external code, this kind of syntax without
curly braces.

123
00:07:18,962 --> 00:07:21,410
This is why it is useful to know it,

124
00:07:21,410 --> 00:07:24,222
even if I don't encourage you to
use it.

125
00:07:24,222 --> 00:07:27,557
I rather recommend you to
systematically use the

126
00:07:27,557 --> 00:07:30,400
block syntax, that is, with curly
braces.

127
00:07:30,400 --> 00:07:35,806
Furthermore, you must know that the
else-block is totally optional.

128
00:07:35,806 --> 00:07:38,219
We can absolutely write a block

129
00:07:38,219 --> 00:07:41,891
of conditional statement, here,
without any "else".

130
00:07:41,891 --> 00:07:45,963
Simply, what happens is that when the
condition is false, nothing

131
00:07:45,963 --> 00:07:47,559
in particular happens, and

132
00:07:47,559 --> 00:07:49,935
we continue to execute the program
normally.

133
00:07:49,935 --> 00:07:52,749
In such a case, something in particular
will be executed

134
00:07:52,749 --> 00:07:55,560
only when the condition is true.

135
00:07:55,560 --> 00:08:01,340
Let's have a look at an example.
Let me come back to the previous example

136
00:08:01,340 --> 00:08:04,078
with the value input.

137
00:08:04,078 --> 00:08:07,635
Let's assume that the user has entered
the value 3.

138
00:08:07,635 --> 00:08:10,170
We arrive here at the conditional
statement.

139
00:08:10,170 --> 00:08:14,002
We test the condition:
is 3 less than 5?

140
00:08:14,002 --> 00:08:17,085
This condition is, of course, true,
which means

141
00:08:17,085 --> 00:08:19,215
that we execute the block

142
00:08:19,215 --> 00:08:22,666
here monitored by the conditional
branch, and therefore

143
00:08:22,666 --> 00:08:27,087
we print here the message : "votre
nombre

144
00:08:27,087 --> 00:08:29,905
est plus petit que cinq."
(= "Your number is less than five")

145
00:08:29,905 --> 00:08:34,013
And then, we continue the execution
of the program

146
00:08:34,013 --> 00:08:38,880
as usual and we print the ending
message here.

147
00:08:38,880 --> 00:08:41,374
What if the user had entered
a value

148
00:08:41,374 --> 00:08:44,125
that is strictly greater than or
equal to 5,

149
00:08:44,125 --> 00:08:48,778
for example 7. It is greater than
or equal to 5,

150
00:08:48,778 --> 00:08:52,626
so the condition is false this time.

151
00:08:52,626 --> 00:08:55,468
In this case, nothing special
happens.

152
00:08:55,468 --> 00:08:57,446
We ignore the conditional statement
block and

153
00:08:57,446 --> 00:09:01,615
continue the execution after the
conditional statement block,

154
00:09:01,615 --> 00:09:06,990
which means that in this case, we only execute
the ending line, the ending message.

155
00:09:06,990 --> 00:09:11,654
In Java, conditional statements
follow the following

156
00:09:11,654 --> 00:09:14,340
general structure: we start by the
reserved word "if";

157
00:09:14,340 --> 00:09:18,265
then in parentheses, here, we write
the condition

158
00:09:18,265 --> 00:09:20,740
which we want to evaluate.

159
00:09:20,740 --> 00:09:25,208
Then we put here a block of instructions
which will be executed

160
00:09:25,208 --> 00:09:29,911
if the condition is evaluated to true.
Then

161
00:09:29,911 --> 00:09:36,023
we could put here an
optional else-block with a block

162
00:09:36,023 --> 00:09:41,966
of instructions which will be executed if
the condition is evaluated to false.

163
00:09:41,966 --> 00:09:43,830
These blocks of instructions

164
00:09:43,830 --> 00:09:47,985
can contain any part of a Java
program,

165
00:09:47,985 --> 00:09:52,140
and can, in particular, also contain other
if instructions.

166
00:09:52,140 --> 00:09:55,820
In this case, there are what are called
nested choices.

167
00:09:55,820 --> 00:09:57,120
Let's have a look at an example.

168
00:09:57,120 --> 00:10:00,432
Let's suppose that we have three variables
x, y, and

169
00:10:00,432 --> 00:10:04,177
z, of which we want to test the
equality. For example, is

170
00:10:04,177 --> 00:10:08,528
x equal to y, is y equal to z, or are
they the three equal to each other?

171
00:10:08,528 --> 00:10:08,924
What we

172
00:10:08,924 --> 00:10:11,762
can do here, is to begin by a block

173
00:10:11,762 --> 00:10:17,150
of instructions which will test if x is
equal to y.

174
00:10:17,150 --> 00:10:22,500
This block extends right to here, with its
associated else and the else-block,

175
00:10:22,500 --> 00:10:24,905
and in the block, for example, monitored
by

176
00:10:24,905 --> 00:10:27,510
the first test, when the first test
is true,

177
00:10:27,510 --> 00:10:33,430
we see here likewise a second if, which
is perfectly possible,

178
00:10:33,430 --> 00:10:35,814
with its own block for

179
00:10:35,814 --> 00:10:40,545
true conditions and its block for
false conditions.

180
00:10:40,545 --> 00:10:42,177
In the same way, in the first else,
we see here

181
00:10:42,177 --> 00:10:44,337
again an if with its block for true
conditions and its

182
00:10:44,337 --> 00:10:46,663
block for false conditions; and we see
that in the

183
00:10:46,663 --> 00:10:50,070
last block of conditions, we can even have
a last if.

184
00:10:50,070 --> 00:10:53,840
You know understand why you should not
abuse of this kind of construction.

185
00:10:53,840 --> 00:10:57,422
It quickly becomes a little difficult to
understand, difficult to read.

186
00:10:57,422 --> 00:10:58,745
Above three levels,

187
00:10:58,745 --> 00:11:00,005
I think that it becomes

188
00:11:00,005 --> 00:11:03,760
difficult to understand, if not even totally
unreadable.

189
00:11:03,760 --> 00:11:07,460
Now let's have a detailed step by step
look at the example.

190
00:11:07,460 --> 00:11:10,050
Let's suppose we have here three
variables, x, y,

191
00:11:10,050 --> 00:11:12,661
and z which each contain the value 1.

192
00:11:12,661 --> 00:11:17,528
We begin with the first if statement,
here, which will test : "is...

193
00:11:17,528 --> 00:11:23,295
...x equal to y?". We effectively have, here,
a 1 that is equal to a 1.

194
00:11:23,295 --> 00:11:25,066
The condition

195
00:11:25,066 --> 00:11:29,740
is true, which means that we arrive

196
00:11:29,740 --> 00:11:31,580
at this second if statement, here,

197
00:11:31,580 --> 00:11:33,926
which will evaluate whether the value of y
is equal to the value of z.

198
00:11:33,926 --> 00:11:36,395
We therefore ask ourselves again:
"is 1...

199
00:11:36,395 --> 00:11:38,635
equal to 1?", which is indeed true,
which

200
00:11:38,635 --> 00:11:41,355
means that we enter the block here
and

201
00:11:41,355 --> 00:11:45,110
we print the message : "les trois valeurs
sont égales." (= *the three values are equal")

202
00:11:45,110 --> 00:11:49,863
Then, we continue the execution at the
end of the block considered.

203
00:11:49,863 --> 00:11:52,936
Here, there isn't anything in
particular to do.

204
00:11:52,936 --> 00:11:57,233
Then, we also continue the execution
after this block here.

205
00:11:57,233 --> 00:12:00,630
That is, we arrive here at the end
of the program.

206
00:12:00,630 --> 00:12:03,290
Now, let's look at what happens when

207
00:12:03,290 --> 00:12:05,180
we have, for example, the values y and

208
00:12:05,180 --> 00:12:09,541
z which each have the value 2, and
which are different from x.

209
00:12:09,541 --> 00:12:12,427
The program begins, like before,

210
00:12:12,427 --> 00:12:14,900
by evaluating: "is the value of x...

211
00:12:14,900 --> 00:12:16,753
...equal to the value of y?",

212
00:12:16,753 --> 00:12:21,876
And in this case, of course, the answer
is no and therefore the

213
00:12:21,876 --> 00:12:27,408
condition here is false, so we execute
the corresponding else-block.

214
00:12:27,408 --> 00:12:30,440
We therefore enter here the
else-block at

215
00:12:30,440 --> 00:12:33,877
the bottom of the program, which means
that we enter

216
00:12:33,877 --> 00:12:37,496
here in the test of this second
condition: "is...

217
00:12:37,496 --> 00:12:39,960
...the value of x (1) equal to the
value...

218
00:12:39,960 --> 00:12:40,720
of z (2)?".

219
00:12:40,720 --> 00:12:47,065
Of course, this condition is false and
therefore this "if" will branch to

220
00:12:47,065 --> 00:12:52,822
its else-block, and we will find
ourselves evaluating this third

221
00:12:52,822 --> 00:12:58,508
condition: "does y have a value equal
to z?".

222
00:12:58,508 --> 00:13:01,718
2 is equal to 2: here, we have
of course a

223
00:13:01,718 --> 00:13:04,994
condition that is true, which means
that this condition, this if

224
00:13:04,994 --> 00:13:07,451
block, this conditional branch will
execute the

225
00:13:07,451 --> 00:13:10,176
block here conditioned
by the fact

226
00:13:10,176 --> 00:13:12,396
that the condition is true, and will
therefore

227
00:13:12,396 --> 00:13:16,587
print: "seules les deux dernières valeurs
sont égales" (= "only the last two values are equal").

228
00:13:16,587 --> 00:13:20,456
We will then continue the execution
from there, we

229
00:13:20,456 --> 00:13:24,170
will continue after this block here, that we
are executing.

230
00:13:24,170 --> 00:13:25,710
There isn't anything special.

231
00:13:25,710 --> 00:13:29,552
We then continue the execution after
this conditional branch.

232
00:13:29,552 --> 00:13:30,083
There isn't

233
00:13:30,083 --> 00:13:30,850
anything special.

234
00:13:30,850 --> 00:13:35,303
We then continue the execution after
this branch

235
00:13:35,303 --> 00:13:39,559
and we arrive at the end of this
example.

