1
00:00:00,000 --> 00:00:06,873
Now let's have a look at a few mistakes
often made by

2
00:00:06,873 --> 00:00:11,559
beginner programmers when it comes to
writing conditional branches.

3
00:00:11,559 --> 00:00:16,444
The first trap that awaits you is that the
equality test is written with two

4
00:00:16,444 --> 00:00:23,210
equal symbols, like here, and not a unique
equal symbol, which is used for assignment.

5
00:00:23,210 --> 00:00:26,920
This code

6
00:00:26,920 --> 00:00:30,105
is therefore incorrect, as there's only
one

7
00:00:30,105 --> 00:00:34,925
equal symbol, the correct version is
of course : if (a

8
00:00:34,925 --> 00:00:37,528
== 1), and this code which is incorrect

9
00:00:37,528 --> 00:00:41,540
is simply not allowed by the Java compiler.

10
00:00:41,540 --> 00:00:45,460
Here's a second mistake example,
do you see the problem ?

11
00:00:45,460 --> 00:00:48,232
In fact, there shouldn't be any

12
00:00:48,232 --> 00:00:52,036
semicolon here and if we execute this
code, it will

13
00:00:52,036 --> 00:00:55,820
be accepted by the compiler and the
message "a vaut 1" will

14
00:00:55,820 --> 00:01:00,220
get printed whatever the value of a is,
so it's a little

15
00:01:00,220 --> 00:01:04,631
mysterious, but to understand why
you must know that the

16
00:01:04,631 --> 00:01:08,873
semicolon is considered as an
instruction,

17
00:01:08,873 --> 00:01:11,654
an instruction that does nothing.

18
00:01:11,654 --> 00:01:14,168
I could have written this code in

19
00:01:14,168 --> 00:01:17,202
this way, which is easier to
interpret,

20
00:01:17,202 --> 00:01:20,472
because the semicolon, this
emtpy

21
00:01:20,472 --> 00:01:22,482
instruction, is considered inside the

22
00:01:22,482 --> 00:01:26,491
conditional branch, but this instruction
is

23
00:01:26,491 --> 00:01:30,150
considered outside the conditional
branch.

24
00:01:30,150 --> 00:01:31,645
If a has the value 1, we enter the

25
00:01:31,645 --> 00:01:35,870
conditional branch, execute the empty
instruction, that is, do

26
00:01:35,870 --> 00:01:38,110
nothing, and whatever the value of

27
00:01:38,110 --> 00:01:42,327
a is, skip to this instruction and
print the

28
00:01:42,327 --> 00:01:45,000
message "a vaut 11".

29
00:01:45,000 --> 00:01:47,412
Note that if we had used

30
00:01:47,412 --> 00:01:50,427
curly braces when there's only
one instruction

31
00:01:50,427 --> 00:01:53,730
in the conditional branch, the mistake
that we have just

32
00:01:53,730 --> 00:01:56,585
seen would have had less chance of
happening.

33
00:01:56,585 --> 00:02:01,120
It is therefore a good practice to
systematically use curly braces, even

34
00:02:01,120 --> 00:02:04,820
when there's only one instruction in
the block.

35
00:02:04,820 --> 00:02:06,980
A third mistake is, precisely,

36
00:02:06,980 --> 00:02:11,590
forgetting the curly braces when they are
necessary, like in this code.

37
00:02:11,590 --> 00:02:15,034
Having these lines indented,
that is, having

38
00:02:15,034 --> 00:02:17,653
them shifted a but to the right,

39
00:02:17,653 --> 00:02:19,585
isn't sufficient for them to be

40
00:02:19,585 --> 00:02:23,800
inside the conditional branch, unlike
other languages.

41
00:02:23,800 --> 00:02:27,310
In your opinion, what happens when I
try to compile this code ?

42
00:02:27,310 --> 00:02:32,008
Well, the compiler will print this
error message which tells me

43
00:02:32,008 --> 00:02:35,808
that there's an else without the
key-word if. So why ?

44
00:02:35,808 --> 00:02:42,168
Because in fact, I could have written
this code this way,

45
00:02:42,168 --> 00:02:44,208
the first instruction, which is the

46
00:02:44,208 --> 00:02:46,928
print instruction is indeed inside

47
00:02:46,928 --> 00:02:51,753
the conditional branch, but this second
instruction isn't, it is

48
00:02:51,753 --> 00:02:57,344
after the conditional branch and when the
compiler comes upon this else, it is

49
00:02:57,344 --> 00:03:02,304
already outside the conditional branch
which is

50
00:03:02,304 --> 00:03:07,603
here and this else is therefore not
attached to an if instruction.

51
00:03:07,603 --> 00:03:10,910
That's why it generates this
error message.

52
00:03:10,910 --> 00:03:14,501
Now let's take three quizzes.

53
00:03:14,501 --> 00:03:18,649
First of all, what does this code print
when it is

54
00:03:18,649 --> 00:03:22,985
executed and when the user inputs the
value 1 for the variable

55
00:03:22,985 --> 00:03:24,790
n and 2 for the variable p.

56
00:03:24,790 --> 00:03:28,420
So in your opinion, what's the
correct answer ?

57
00:03:28,420 --> 00:03:33,280
The correct answer is the answer C and
we are going to see why.

58
00:03:33,280 --> 00:03:38,140
If you think you've understood, you can
go directly to the next quiz.

59
00:03:38,140 --> 00:03:43,567
Let me remind you that in order for a
condition which uses the AND logical

60
00:03:43,567 --> 00:03:48,495
operator, written like this, to be true, the
two conditions must be true.

61
00:03:48,495 --> 00:03:52,395
In order for a condition which uses
the OR logical operator, written like

62
00:03:52,395 --> 00:03:56,940
this, to be true, it is sufficient for one
of the two conditions to be true.

63
00:03:56,940 --> 00:04:02,127
The user inputs the values 1 for the

64
00:04:02,127 --> 00:04:05,600
variable n and 2 for the variable p.

65
00:04:05,600 --> 00:04:11,085
This condition "n strictly less than p" is
true,

66
00:04:11,085 --> 00:04:13,866
as n is equal to 1 and p is equal

67
00:04:13,866 --> 00:04:17,270
to 2 and that 1 is strictly less than 2.

68
00:04:17,270 --> 00:04:21,443
This expression has the value two
times n, that is,

69
00:04:21,443 --> 00:04:24,200
two times 1, which is two, p has
the value

70
00:04:24,200 --> 00:04:30,200
2, therefore this entire condition is true,
as 2 is indeed greater than or equal to 2.

71
00:04:30,200 --> 00:04:38,922
This condition is therefore true, so we
enter the conditional

72
00:04:38,922 --> 00:04:41,946
branch and execute this instruction
which

73
00:04:41,946 --> 00:04:43,824
simply prints 1, 1.

74
00:04:43,824 --> 00:04:49,715
We then move on to this
conditional branch.

75
00:04:49,715 --> 00:04:52,720
This condition is still true, it's the
same

76
00:04:52,720 --> 00:04:56,310
as the one we had previously, as it's

77
00:04:56,310 --> 00:04:59,330
an OR here, I don't have to

78
00:04:59,330 --> 00:05:04,054
consider the value of this condition,
because I

79
00:05:04,054 --> 00:05:08,330
already know that this entire condition
is true.

80
00:05:08,330 --> 00:05:12,510
We therefore print 2 here.

81
00:05:12,510 --> 00:05:16,490
We then move on to this conditional
branch.

82
00:05:16,490 --> 00:05:21,026
This condition, which is the same as
above, is still true, so

83
00:05:21,026 --> 00:05:24,396
we enter this conditional branch

84
00:05:24,396 --> 00:05:27,840
and test this new condition.

85
00:05:27,840 --> 00:05:29,445
This expression

86
00:05:29,445 --> 00:05:35,063
has the value two times n, that is, 2.
p has the value 2, so this condition is

87
00:05:35,063 --> 00:05:40,558
true, as 2 is greater than or equal to 2,
we execute this part of

88
00:05:40,558 --> 00:05:44,680
the conditional branch, so we print 3,
skip this

89
00:05:44,680 --> 00:05:47,380
part, we arrive at the end of the
conditional

90
00:05:47,380 --> 00:05:54,776
branch here, we move on and simply
print a

91
00:05:54,776 --> 00:05:55,760
newline,

92
00:05:55,760 --> 00:06:02,015
Second exercise, same code, but this
time the user inputs the values

93
00:06:02,015 --> 00:06:04,939
1 for the variable n and 3 for the variable
p.

94
00:06:04,939 --> 00:06:08,270
So, in your opinion, what is the
correct answer ?

95
00:06:08,270 --> 00:06:13,850
The correct answer is the answer B,
let's see why.

96
00:06:13,850 --> 00:06:19,844
This time n has the value 1,

97
00:06:19,844 --> 00:06:27,126
p has the value 3, this condition is true
as 1 is strictly less than 3.

98
00:06:27,126 --> 00:06:34,665
This expression has the value 2 times 1,
that is 2, p has the value 3, so this

99
00:06:34,665 --> 00:06:41,759
condition is false, as 2 isn't greater than
or equal to 3.

100
00:06:41,759 --> 00:06:46,030
As it's an AND here, this condition

101
00:06:46,030 --> 00:06:50,350
is false and we go directly

102
00:06:50,350 --> 00:06:53,965
to the next instruction which is also a

103
00:06:53,965 --> 00:06:58,108
conditional branch. This condition
is the same as before,

104
00:06:58,108 --> 00:07:03,260
it is still true. As it's an OR here, I
know that

105
00:07:03,260 --> 00:07:11,175
this entire condition is true. We
therefore enter the conditional

106
00:07:11,175 --> 00:07:17,074
branch, print a 2, and move on to
this conditional branch.

107
00:07:17,074 --> 00:07:20,677
This condition is the same as before,
it is

108
00:07:20,677 --> 00:07:25,500
always true, so we enter the
conditional branch.

109
00:07:25,500 --> 00:07:31,740
This condition is false, like before, it's
the same as this one.

110
00:07:31,740 --> 00:07:36,440
We execute the second part of the
conditional branch,

111
00:07:36,440 --> 00:07:41,530
that is, be print 4, move on to this
instruction which

112
00:07:41,530 --> 00:07:46,560
simply prints a newline. This time,
the values

113
00:07:46,560 --> 00:07:51,213
entered by the user are 2 for n and 1 for p.

114
00:07:51,213 --> 00:07:56,219
In your opinion, what is the correct answer ?
The correct answer

115
00:07:56,219 --> 00:08:01,733
is the answer A. For this last

116
00:08:01,733 --> 00:08:07,861
exercise, n has the value 2 and p
has the

117
00:08:07,861 --> 00:08:13,798
value 1. This time, this condition
is therefore

118
00:08:13,798 --> 00:08:19,216
false, as 2 isn't strictly less than 1.

119
00:08:19,216 --> 00:08:22,380
As it is an AND here, I don't have to

120
00:08:22,380 --> 00:08:26,940
evaluate this condition, I already
know that this entire

121
00:08:26,940 --> 00:08:28,970
condition is necessarily false.

122
00:08:28,970 --> 00:08:32,570
I therefore move on to this
conditional branch.

123
00:08:32,570 --> 00:08:39,350
This condition is, well, the same as
before, I had said it was false,

124
00:08:39,350 --> 00:08:44,467
but here it's an OR, so I have to
evaluate this expression,

125
00:08:44,467 --> 00:08:51,380
this condition, 2 times n is 4, p
has the value 1,

126
00:08:51,380 --> 00:08:56,950
and because 4 is greater than or equal
to 1, this condition

127
00:08:56,950 --> 00:09:01,840
is true. As it's an OR, this

128
00:09:01,840 --> 00:09:06,630
condition is true, so we

129
00:09:06,630 --> 00:09:11,308
execute this instruction, that is,
print a 2.

130
00:09:11,308 --> 00:09:16,412
We then move on to here. This
condition is false,

131
00:09:16,412 --> 00:09:22,600
it's once again the same as before, so
we skip this conditional branch

132
00:09:22,600 --> 00:09:27,880
to reach this stage of the program
which simply prints a newline.

133
00:09:27,880 --> 00:09:32,092
Now let's turn to the boolean type,

134
00:09:32,092 --> 00:09:35,880
which is the type of the conditions.

135
00:09:35,880 --> 00:09:38,575
This type will let us declare

136
00:09:38,575 --> 00:09:41,903
variables which will contain the condition's
value.

137
00:09:41,903 --> 00:09:45,413
A variable of type boolean is often simply
called a

138
00:09:45,413 --> 00:09:49,057
a boolean and can only contain two
possible

139
00:09:49,057 --> 00:09:52,297
value, either true, or false, or more
exactly in

140
00:09:52,297 --> 00:09:56,866
Java, we'll use the literal values
true and false, as expressed in English.

141
00:09:56,866 --> 00:10:02,187
In this example, I begin by declaring
two variables

142
00:10:02,187 --> 00:10:07,088
a and b of type int, a is initialized

143
00:10:07,088 --> 00:10:11,341
to 1, b is initialized to 2.
This instruction

144
00:10:11,341 --> 00:10:15,191
is a boolean variable declaration,

145
00:10:15,191 --> 00:10:18,857
this variable is called test1, which will be,
indeed, of type

146
00:10:18,857 --> 00:10:23,208
boolean. Like with any variable,
I can

147
00:10:23,208 --> 00:10:33,280
represent it with a box. This variable
is initialized

148
00:10:33,280 --> 00:10:38,380
to the value of the condition a equal b,
a has the value 1,

149
00:10:38,380 --> 00:10:43,610
b has the value 2, so this condition is false
and test1 will

150
00:10:43,610 --> 00:10:48,664
be initialized to false.

151
00:10:48,664 --> 00:10:53,798
This following

152
00:10:53,798 --> 00:10:58,441
instruction declares a second variable
of type

153
00:10:58,441 --> 00:11:04,791
boolean, this time called test2, which

154
00:11:04,791 --> 00:11:11,490
will be initialized to the value of the
condition a strictly less than b.

155
00:11:11,490 --> 00:11:17,370
As a has the value 1 and b has the value 2,
this condition is true.

156
00:11:17,370 --> 00:11:23,475
Therefore, test2 will be initialized

157
00:11:23,475 --> 00:11:24,276
to true.

158
00:11:24,276 --> 00:11:27,667
Some students don't have any problems
with

159
00:11:27,667 --> 00:11:30,061
booleans, others sometimes have a
mental block.

160
00:11:30,061 --> 00:11:33,944
So, remember that a variable of
type boolean is a variable like

161
00:11:33,944 --> 00:11:38,160
another, that is, you can represent it
as a box.

162
00:11:38,160 --> 00:11:44,040
It turns out this box can only
contain two possible values,

163
00:11:44,040 --> 00:11:49,170
either true or false.

164
00:11:49,170 --> 00:11:53,642
It also turns out that we can use
logical operators

165
00:11:53,642 --> 00:11:57,512
between variables of type bool and that
we can use these

166
00:11:57,512 --> 00:12:01,356
variables like conditions, for example
inside a conditional

167
00:12:01,356 --> 00:12:04,490
branch, and that's what we're going
to see in this example.

168
00:12:04,490 --> 00:12:09,400
As in the previous example, I begin
by

169
00:12:09,400 --> 00:12:14,801
declaring a variable a of type int
initialized

170
00:12:14,801 --> 00:12:18,673
to 1, a variable b also of type int,

171
00:12:18,673 --> 00:12:23,557
initialized to 2. In the following
instruction, I this time

172
00:12:23,557 --> 00:12:28,906
declare a variable of type boolean
which is called c and which is

173
00:12:28,906 --> 00:12:35,240
initialized to the value true. In the
following instruction

174
00:12:35,240 --> 00:12:41,000
I declare a boolean which is called d,

175
00:12:41,000 --> 00:12:45,674
and which is initialized to the value of
the condition

176
00:12:45,674 --> 00:12:49,552
a equal b. a has the value 1, b has
the value 2, the condition is

177
00:12:49,552 --> 00:12:55,062
false, it therefore has the value false.
Thus d is

178
00:12:55,062 --> 00:12:59,770
initialized to false. In

179
00:12:59,770 --> 00:13:06,208
the following instruction, I declare a
variable of

180
00:13:06,208 --> 00:13:10,663
type boolean which is called e and
which is initialized to

181
00:13:10,663 --> 00:13:15,360
the value of the condition. d has
the value false.

182
00:13:15,360 --> 00:13:21,005
This condition, a less than

183
00:13:21,005 --> 00:13:25,905
b, is true, it therefore has the value true.
As the logical

184
00:13:25,905 --> 00:13:31,480
operator here is an OR, this entire
condition is true and

185
00:13:31,480 --> 00:13:36,750
it has the value true. So e is
initialized to true.

186
00:13:36,750 --> 00:13:41,943
We now move on to this conditional
branch

187
00:13:41,943 --> 00:13:47,384
which has as condition the value of
the boolean variable called e,

188
00:13:47,384 --> 00:13:51,816
which is true, so this condition is true,
and we

189
00:13:51,816 --> 00:13:53,127
enter the

190
00:13:53,127 --> 00:13:57,054
conditional branch to execute this
instruction

191
00:13:57,054 --> 00:13:59,710
and print the message "e vaut true" (TN which
means "e has the value true").

192
00:13:59,710 --> 00:14:04,641
Voilà ! That's all for the moment concerning
booleans, but be aware that they are

193
00:14:04,641 --> 00:14:06,315
helpful in many situations and

194
00:14:06,315 --> 00:14:08,583
we'll encounter them in many examples.

