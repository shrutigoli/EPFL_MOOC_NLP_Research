1
00:00:00,000 --> 00:00:03,276
In a previous episode, we

2
00:00:03,276 --> 00:00:07,240
introduced the conditional branch
instruction if, and

3
00:00:07,240 --> 00:00:09,400
we saw that in order to work,

4
00:00:09,400 --> 00:00:12,320
such an instruction needs to express
conditions.

5
00:00:12,320 --> 00:00:13,760
The condition examples which we

6
00:00:13,760 --> 00:00:15,872
saw until now were relatively simple,
they

7
00:00:15,872 --> 00:00:17,456
consisted for example in comparing
the

8
00:00:17,456 --> 00:00:19,195
value of a variable with another
value.

9
00:00:19,195 --> 00:00:22,555
We are now going to examine
the notion of condition in a

10
00:00:22,555 --> 00:00:25,435
more detailed way and see that, in Java,
it is possible

11
00:00:25,435 --> 00:00:27,760
to express relatively complex
conditions.

12
00:00:27,760 --> 00:00:30,768
So, you here have an example of
a conditional

13
00:00:30,768 --> 00:00:34,480
branching instruction, like we have already
seen

14
00:00:34,480 --> 00:00:39,070
previously, and we see that in order to
write this conditional statement,

15
00:00:39,070 --> 00:00:42,935
we need to express a condition, as we
can see here.

16
00:00:42,935 --> 00:00:46,235
Here the condition is a simple condition, which
consists in comparing

17
00:00:46,235 --> 00:00:49,295
the value of a variable n with a constant,
the constant 5.

18
00:00:49,295 --> 00:00:50,650
Small syntactic note :

19
00:00:50,650 --> 00:00:52,417
the conditions in a conditional

20
00:00:52,417 --> 00:00:54,754
statement are, in Java, always
enclosed

21
00:00:54,754 --> 00:00:59,460
in parentheses, which we concretely
see here, in this small example.

22
00:00:59,460 --> 00:01:02,100
Let's begin by examining in a more
exhaustive

23
00:01:02,100 --> 00:01:05,255
way how we can, in Java, express simple
conditions,

24
00:01:05,255 --> 00:01:10,185
The objective of simple conditions is
to compare two expressions,

25
00:01:10,185 --> 00:01:13,470
and for this effect we will use
comparison operators.

26
00:01:13,470 --> 00:01:16,055
We have already had the opportunity
to come upon them several

27
00:01:16,055 --> 00:01:18,700
times in examples, like less than
or greater than.

28
00:01:18,700 --> 00:01:21,760
Java, in fact, offers a whole
collection of predefined

29
00:01:21,760 --> 00:01:26,260
comparison operators, for example
the less than operator lets us

30
00:01:26,260 --> 00:01:30,620
compare if the value of an entity is
less than the value of another entity.

31
00:01:30,620 --> 00:01:35,040
Let's suppose for example that I have two
variables x and y, and that I want to

32
00:01:35,040 --> 00:01:37,148
know if the value of x is less than

33
00:01:37,148 --> 00:01:41,157
the value of y, I would use the comparison
operator less than

34
00:01:41,157 --> 00:01:44,610
to perform this test, to express this
condition.

35
00:01:44,610 --> 00:01:49,200
In a similar way, I can use the operator ==

36
00:01:49,200 --> 00:01:52,880
to verify if two entities have the
same value.

37
00:01:52,880 --> 00:01:55,932
For example, if I have once again two
variables x

38
00:01:55,932 --> 00:01:58,122
and y, if I want to test if the value of

39
00:01:58,122 --> 00:01:59,890
x is the same as the value of y,

40
00:01:59,890 --> 00:02:03,780
I would use == and would
express my condition this way.

41
00:02:03,780 --> 00:02:06,353
In a similar way, we also have the

42
00:02:06,353 --> 00:02:10,400
operators greater than or equal to, less
than or equal to, and different than.

43
00:02:10,400 --> 00:02:15,011
What you must know is that the
evaluation of such an expression

44
00:02:15,011 --> 00:02:20,226
returns a boolean result, that is, the
value "true"

45
00:02:20,226 --> 00:02:25,790
for true, and the value "false"

46
00:02:25,790 --> 00:02:31,710
for false. A small

47
00:02:31,710 --> 00:02:35,938
warning : the comparison operator
to test if

48
00:02:35,938 --> 00:02:39,360
two values are equal is defined by two
equal symbols.

49
00:02:39,360 --> 00:02:41,135
Do not confuse it with the

50
00:02:41,135 --> 00:02:44,300
unique = symbol, which represents
assignment.

51
00:02:44,300 --> 00:02:49,755
Here in this example, I test if the value
of n is 5.

52
00:02:49,755 --> 00:02:53,115
This isn't what I'm doing when I write
n

53
00:02:53,115 --> 00:02:56,848
= 5; n = 5 means that I assign
the value

54
00:02:56,848 --> 00:02:58,130
5 to the variable n.

55
00:02:58,130 --> 00:03:00,434
It should be noted that this kind of

56
00:03:00,434 --> 00:03:03,314
way of writing isn't tolerated
by the compiler, in

57
00:03:03,314 --> 00:03:05,837
Java, therefore here you'll have
a compilation

58
00:03:05,837 --> 00:03:11,750
failure, if you write this kind of
instruction.

59
00:03:11,750 --> 00:03:14,029
Now let's illustrate, with small concrete

60
00:03:14,029 --> 00:03:16,414
examples, the use of simple conditions
in Java.

61
00:03:16,414 --> 00:03:18,375
Here we have the case of a small
program which

62
00:03:18,375 --> 00:03:21,974
begins by declaring two variables a and
b, by

63
00:03:21,974 --> 00:03:26,370
assigning to them initial values,
respectively 1 and 2.

64
00:03:26,370 --> 00:03:29,385
We now want to compare the values
of a

65
00:03:29,385 --> 00:03:31,395
and b, to check if they're equal,

66
00:03:31,395 --> 00:03:34,301
and for this effect we have used
a simple

67
00:03:34,301 --> 00:03:37,920
condition which uses the comparison
operator ==.

68
00:03:37,920 --> 00:03:41,016
Here, the values of a and b are
different, which

69
00:03:41,016 --> 00:03:43,252
will has as a consequence that

70
00:03:43,252 --> 00:03:47,432
the evaluation of this expression
will return "false".

71
00:03:47,432 --> 00:03:50,765
We will therefore branch on the else

72
00:03:50,765 --> 00:03:54,849
part of the conditional statement, and
execute this

73
00:03:54,849 --> 00:03:58,237
instruction, which will have as a
consequence to print the

74
00:03:58,237 --> 00:04:00,034
message "Cas 2", as we see here.

75
00:04:00,034 --> 00:04:01,618
Then let's continue the step by
step execution,

76
00:04:01,618 --> 00:04:04,026
and we now want to compare

77
00:04:04,026 --> 00:04:07,330
the value of two times a with the value
of b.

78
00:04:07,330 --> 00:04:12,937
It should be noted that with simple
conditions, we can compare not only

79
00:04:12,937 --> 00:04:16,233
the value of two variables, as it is
the case

80
00:04:16,233 --> 00:04:19,830
here, but also the values of two expressions,
in a more general sense.

81
00:04:19,830 --> 00:04:27,051
If I evaluate two times a, I obviously
get the value

82
00:04:27,051 --> 00:04:29,483
2, the value 2 which is of course equal
to

83
00:04:29,483 --> 00:04:32,831
the value of b, so the evaluation of
this

84
00:04:32,831 --> 00:04:36,028
expression will return "true", this
instruction,

85
00:04:36,028 --> 00:04:37,978
the following instruction, will
therefore

86
00:04:37,978 --> 00:04:41,878
be executed, and "b est Ã©gal au

87
00:04:41,878 --> 00:04:45,686
double de a" will be printed. Note here
that we are dealing with an expression

88
00:04:45,686 --> 00:04:48,515
that is relatively simple, when the
expressions get more

89
00:04:48,515 --> 00:04:51,180
complex, to formulate conditions, it

90
00:04:51,180 --> 00:04:53,210
is recommended to use parentheses
on the terms

91
00:04:53,210 --> 00:04:55,472
of the expressions to make them
more readable.

92
00:04:55,472 --> 00:04:57,970
Here for example, we could have begun
to do it

93
00:04:57,970 --> 00:05:01,340
by adding a pair of parentheses
around this term.

94
00:05:01,340 --> 00:05:03,560
In another situation,

95
00:05:03,560 --> 00:05:06,816
we now want to compare the values
of a and

96
00:05:06,816 --> 00:05:08,980
b to know if a is different from b.

97
00:05:08,980 --> 00:05:11,732
As it is the case, the evaluation
of this

98
00:05:11,732 --> 00:05:15,105
expression will return "true", we
will therefore

99
00:05:15,105 --> 00:05:20,334
branch on the positive part of the if,
the true part, and print "Cas 2".

100
00:05:20,334 --> 00:05:25,908
If we continue in sequence, we now
want to compare the value

101
00:05:25,908 --> 00:05:28,848
of two times a with the value of b,
to test if two

102
00:05:28,848 --> 00:05:31,055
times a is different from b.

103
00:05:31,055 --> 00:05:34,580
It isn't the case, so the evaluation of

104
00:05:34,580 --> 00:05:38,900
this expression will return "false",
therefore we will

105
00:05:38,900 --> 00:05:42,515
branch the execution after the if
instruction, as there isn't

106
00:05:42,515 --> 00:05:44,630
any else block, so nothing gets
printed.

107
00:05:44,630 --> 00:05:48,875
We have just seen how it is
possible to express

108
00:05:48,875 --> 00:05:53,120
simple conditions in Java by using
comparison operators.

109
00:05:53,120 --> 00:05:53,750
In practice,

110
00:05:53,750 --> 00:05:56,585
it is often necessary to formulate
more complex

111
00:05:56,585 --> 00:05:59,760
conditions, and therefore to combine
simple conditions.

112
00:05:59,760 --> 00:06:03,040
This is done with the help of
logical operators.

113
00:06:03,040 --> 00:06:08,446
For example, the AND logical operator,
which in Java is defined

114
00:06:08,446 --> 00:06:13,485
by the double symbol &&, lets us
verify if two conditions are

115
00:06:13,485 --> 00:06:19,173
simultaneously verified. We note that
the logical operator

116
00:06:19,173 --> 00:06:23,267
requires two operands. The
evaluation

117
00:06:23,267 --> 00:06:26,232
of the expression with the AND
will return

118
00:06:26,232 --> 00:06:29,202
"true" if and only if the evaluation

119
00:06:29,202 --> 00:06:32,899
of each operand also returns
"true".

120
00:06:32,899 --> 00:06:34,953
Note that if suffices that one

121
00:06:34,953 --> 00:06:38,713
of the two operands returns "false",
for example this one,

122
00:06:38,713 --> 00:06:40,738
and a fortiori the two, of course,

123
00:06:40,738 --> 00:06:44,890
for the entire expression to also
return "false".

124
00:06:44,890 --> 00:06:50,705
Second concrete example on the
use of the logical operand AND.

125
00:06:50,705 --> 00:06:51,825
Here we have the case of

126
00:06:51,825 --> 00:06:54,513
a small program, which asks the user
to input

127
00:06:54,513 --> 00:06:58,200
a number, and we want this number
to be between 1 and 10.

128
00:06:58,200 --> 00:07:02,840
The number is read from the standard
input, and stored in a variable n.

129
00:07:02,840 --> 00:07:06,710
We want to verify that the number
that the user

130
00:07:06,710 --> 00:07:10,272
inputs is indeed in line with our
expectations,

131
00:07:10,272 --> 00:07:12,912
that is, that the number is between
1 and

132
00:07:12,912 --> 00:07:16,640
10, we will consequently express a
condition by

133
00:07:16,640 --> 00:07:20,960
imposing to the user that the entered
number is greater than

134
00:07:20,960 --> 00:07:23,200
or equal to 1, and less than or equal
to 10.

135
00:07:23,200 --> 00:07:26,088
As each of these conditions

136
00:07:26,088 --> 00:07:29,920
must be verified, we will use the
AND logical operator.

137
00:07:29,920 --> 00:07:34,550
Let's suppose initially that the user
inputs a zero.

138
00:07:34,550 --> 00:07:35,423
In this case,

139
00:07:35,423 --> 00:07:39,730
the evaluation of the first operand
will return "false".

140
00:07:39,730 --> 00:07:44,290
We have seen previously that it suffices that
one of the operands is "false"

141
00:07:44,290 --> 00:07:49,157
for the entire expression with the AND
logical operator to be "false",

142
00:07:49,157 --> 00:07:51,921
we will therefore branch on the

143
00:07:51,921 --> 00:07:55,220
else block of the conditional
statement and

144
00:07:55,220 --> 00:07:58,230
print "incorrect", to show the
user

145
00:07:58,230 --> 00:08:00,680
that the entered number doesn't
fullfill

146
00:08:00,680 --> 00:08:02,638
the requirement.

147
00:08:02,638 --> 00:08:07,266
Now let's suppose that the user
inputs the value

148
00:08:07,266 --> 00:08:09,668
5, in this case the evaluation of this
first

149
00:08:09,668 --> 00:08:12,369
operand will return "true", as 5 is indeed

150
00:08:12,369 --> 00:08:14,878
greater than or equal to 1, the
evaluation

151
00:08:14,878 --> 00:08:17,530
of this second operand will also return
"true",

152
00:08:17,530 --> 00:08:19,690
as 5 is indeed less than or

153
00:08:19,690 --> 00:08:22,070
equal to 10, consequently, as the two

154
00:08:22,070 --> 00:08:25,954
operands return "true", the entire
expression will also

155
00:08:25,954 --> 00:08:29,218
return "true", and in this case we
branch on

156
00:08:29,218 --> 00:08:32,700
the positive block, the true block
of the conditional statement, and

157
00:08:32,700 --> 00:08:35,816
print the message "correct", to
tell the user that the

158
00:08:35,816 --> 00:08:38,290
entered number fulfills our
requirements indeed.

159
00:08:38,290 --> 00:08:43,320
Other usual logical operator, the OR,
which is defined in Java

160
00:08:43,320 --> 00:08:49,314
by a double vertical bar.

161
00:08:49,314 --> 00:08:51,022
In the same way as the AND
logical operator,

162
00:08:51,022 --> 00:08:53,445
the OR operator awaits two operands,
which are

163
00:08:53,445 --> 00:08:56,435
two logical expressions returning "true"
or "false".

164
00:08:58,390 --> 00:09:02,310
For the entire expression to return "true",
one or

165
00:09:02,310 --> 00:09:06,150
the other operand must return "true",
a fortiori the two.

166
00:09:06,150 --> 00:09:10,427
We see that in this case, if we want the
logical expression

167
00:09:10,427 --> 00:09:15,540
to return "false", the two operands
must return "false".

168
00:09:15,540 --> 00:09:21,680
In all the other cases, the expression
will return "true".

169
00:09:21,680 --> 00:09:26,864
Now, here's a small concrete illustration of
the use of the OR logical operator,

170
00:09:26,864 --> 00:09:30,320
let's suppose here that we have a small
program which

171
00:09:30,320 --> 00:09:34,101
asks the user to enter two values, and
we want

172
00:09:34,101 --> 00:09:36,853
one or the other of these values, at least,
to be positive.

173
00:09:36,853 --> 00:09:40,622
The two values are read on the standard
input and

174
00:09:40,622 --> 00:09:43,440
are stored in two variables n and m.

175
00:09:43,440 --> 00:09:47,598
We want one or the other of the
entered values

176
00:09:47,598 --> 00:09:51,548
to be greater than zero, we shall
therefore express a condition,

177
00:09:51,548 --> 00:09:54,356
it is sufficient that either m is greater than
or equal

178
00:09:54,356 --> 00:09:56,645
to zero, or n is greater than or equal
to zero.

179
00:09:56,645 --> 00:09:59,420
As it is sufficient that one or the other
of these conditions

180
00:09:59,420 --> 00:10:04,080
is verified, we will naturally use
the OR logical operator.

181
00:10:04,080 --> 00:10:06,455
Let's suppose that the user

182
00:10:06,455 --> 00:10:10,321
inputs the values -1 and 1,
the evaluation

183
00:10:10,321 --> 00:10:14,292
of this first operand will return "true",
as

184
00:10:14,292 --> 00:10:18,666
the value 1 is indeed greater than or equal
to zero, and we have ween that it is

185
00:10:18,666 --> 00:10:21,114
sufficient that one or the other of the
operands is

186
00:10:21,114 --> 00:10:24,154
"true" for the entire expression to
also be "true",

187
00:10:24,154 --> 00:10:28,060
therefore, we branch here on

188
00:10:28,060 --> 00:10:31,500
the positive block of the if
instruction, and tell

189
00:10:31,500 --> 00:10:34,530
the user with a message, that indeed,

190
00:10:34,530 --> 00:10:37,370
at least one of the entered values
is positive.

191
00:10:37,370 --> 00:10:42,888
Now let's suppose that the user has
entered the values -1

192
00:10:42,888 --> 00:10:46,900
and -1, that is, two negative
values, in this case the evaluation

193
00:10:46,900 --> 00:10:51,846
of this operand will obviously return
"false", the evaluation of this second

194
00:10:51,846 --> 00:10:56,658
operand also returns "false", and in this
case, we're in the

195
00:10:56,658 --> 00:11:00,486
situation when the evaluation of the
global expression

196
00:11:00,486 --> 00:11:03,934
returns "false", as the two operands
are "false".

197
00:11:03,934 --> 00:11:06,042
In this particular case, we will
therefore

198
00:11:06,042 --> 00:11:09,080
branch on the else block of the
conditional statement,

199
00:11:09,080 --> 00:11:11,456
and tell the user with a message

200
00:11:11,456 --> 00:11:14,540
that none of the two entered values
are positive.

201
00:11:14,540 --> 00:11:18,640
Last usual logical operator, the
logical NOT, the negation,

202
00:11:18,640 --> 00:11:22,250
which in Java is defined by an
exclamation mark.

203
00:11:22,250 --> 00:11:26,652
Unlike the two other operators we have
just seen, the NOT operator,

204
00:11:26,652 --> 00:11:28,752
the negation, is a unary operator,

205
00:11:28,752 --> 00:11:31,390
that is, it awaits only one operand.

206
00:11:31,390 --> 00:11:35,815
It's purpose is to return the negation of
the value of this operand.

207
00:11:35,815 --> 00:11:40,985
For example, let's suppose that the evaluation
of this operand returns "false", which

208
00:11:40,985 --> 00:11:47,250
concretely means that a would be greater
than or equal to b, the negation

209
00:11:47,250 --> 00:11:52,100
of the value "false" will be "true".

210
00:11:52,100 --> 00:11:57,715
Now let's suppose that the evaluation of
this operand returns on the contrary

211
00:11:57,715 --> 00:12:03,720
"true", in this case, the negation of "true"
will be "false".

212
00:12:03,720 --> 00:12:08,400
We'll have the opportunity
to examine many examples

213
00:12:08,400 --> 00:12:12,352
of the use of the negation operator
in the

214
00:12:12,352 --> 00:12:13,600
next lessons.

