1
00:00:03,329 --> 00:00:07,111
Until now, we have learnt how
to declare, initialize

2
00:00:07,481 --> 00:00:09,224
and assign a variable.

3
00:00:09,660 --> 00:00:12,449
Today, we will learn how
to print a variable

4
00:00:12,708 --> 00:00:16,578
and read its value from the keyboard.

5
00:00:17,294 --> 00:00:19,154
Let us begin with the printing.

6
00:00:19,359 --> 00:00:21,624
Paying attention to this example,

7
00:00:21,937 --> 00:00:26,164
the printing lines are
these three lines here.

8
00:00:26,674 --> 00:00:28,912
Let us examine them thoroughly.

9
00:00:29,548 --> 00:00:32,288
The line interesting us
is the following.

10
00:00:32,608 --> 00:00:36,580
If we suppose that we have an
int-type variable n,

11
00:00:36,954 --> 00:00:40,313
containing the value 4, this line
will print the message :

12
00:00:40,503 --> 00:00:43,415
"La variable n contient 4."
(TN: meaning "the variable n contains 4.")

13
00:00:43,895 --> 00:00:46,535
This line is composed of two parts.

14
00:00:47,255 --> 00:00:51,663
First of all, the description,
in the Java language

15
00:00:51,833 --> 00:00:57,422
of the technically called 
"standard output" or terminal.

16
00:00:58,032 --> 00:01:03,031
The second part is the message
to be sent to the terminal.

17
00:01:03,571 --> 00:01:07,560
This message is split in
several pieces.

18
00:01:07,972 --> 00:01:14,240
Between quotation marks,
we have a literal string

19
00:01:14,743 --> 00:01:20,702
which will be written as such on the
output. Then comes a Java expression,

20
00:01:21,092 --> 00:01:25,620
that is, something which
will be evaluated before the printing.

21
00:01:27,221 --> 00:01:32,707
The evaluation picks up the value of n,
thus printing 4.

22
00:01:33,477 --> 00:01:37,611
Then comes the third and last
part :

23
00:01:38,000 --> 00:01:42,032
another literal string, reduced to a period
which will be written as such.

24
00:01:42,812 --> 00:01:47,503
These different parts are composed
with the sign '+' .

25
00:01:47,733 --> 00:01:53,934
Be careful though, the '+' sign, simply
assembles the messages one after the other (= concatenates).

26
00:01:54,224 --> 00:01:59,986
If we write "un", between quotation marks
followed by "message", this corresponds

27
00:02:00,306 --> 00:02:04,041
to the string "un message"
(TN: means "a message").

28
00:02:04,711 --> 00:02:09,030
'+' stands thus here for
message concatenation.

29
00:02:09,330 --> 00:02:11,496
It is a stacking of the messages,
one after the other

30
00:02:11,797 --> 00:02:14,213
and not at all an addition.

31
00:02:14,538 --> 00:02:17,004
On the other hand, we have
the terminal description :

32
00:02:17,284 --> 00:02:23,516
"system", period, "out", period and then
a function, a method, println()

33
00:02:23,746 --> 00:02:28,059
which means "print line". This instruction
will print the message

34
00:02:28,172 --> 00:02:31,928
and trigger a line break

35
00:02:32,098 --> 00:02:34,462
just after.

36
00:02:34,692 --> 00:02:36,638
If we do not want this
line break,

37
00:02:36,858 --> 00:02:40,766
we can use the method
"print() ", simply (without "ln"), which

38
00:02:41,056 --> 00:02:43,488
which will not trigger a line break.

39
00:02:43,845 --> 00:02:49,099
To sum up, if you wish to print
an expression, a message,

40
00:02:49,099 --> 00:02:53,720
type "system.out.println()" if you
want a line break;

41
00:02:53,994 --> 00:02:58,444
then, between quotation marks,
the literal messages

42
00:02:58,634 --> 00:03:01,480
which will be printed exactly as
you write them

43
00:03:01,680 --> 00:03:06,906
and expressions, concatenated,
combined with the '+' sign.

44
00:03:07,516 --> 00:03:09,896
If you have no desire
for a line break,

45
00:03:10,131 --> 00:03:15,051
use the function "print()"
instead of the function "println()";

46
00:03:15,051 --> 00:03:18,823
the different messages will then
be printed one after the other,

47
00:03:19,053 --> 00:03:23,003
glued together and not
line by line.

48
00:03:24,499 --> 00:03:27,530
We can use this system
to simply print

49
00:03:27,877 --> 00:03:33,668
the value of a variable, reduced
to the expression of this value.

50
00:03:33,868 --> 00:03:37,933
But we can also combine variables using
any Java expression.

51
00:03:38,123 --> 00:03:42,927
For example, we can print
a message starting with

52
00:03:43,057 --> 00:03:47,629
"Le double de", then evaluate the value of n
(TN: "Le double de" means "The double of" ),

53
00:03:47,799 --> 00:03:53,243
add the message "est" and evaluate
(TN: "est" means "is")

54
00:03:53,593 --> 00:03:59,247
an expression as complex as
you desire, which value will be printed.

55
00:04:00,192 --> 00:04:03,087
Previously, we insisted on the fact
that the sign used to glue,

56
00:04:03,357 --> 00:04:07,053
concatenate strings was not
an arithmetic addition.

57
00:04:07,313 --> 00:04:13,140
So, how do me make an addition?
For that, we absolutely need

58
00:04:13,390 --> 00:04:19,585
to resort to parentheses,
so that the expressions in parentheses

59
00:04:19,915 --> 00:04:25,372
will be evaluated in an arithmetic
way and not in the way

60
00:04:25,741 --> 00:04:27,752
of strings glued one
after the other.

61
00:04:27,752 --> 00:04:35,614
For example, if n is 4 and nCarre is 16,
this expression will evaluate

62
00:04:35,864 --> 00:04:41,843
n, which contains 4, +, in an arithmetic sense,
16; thus returning the value 20.

63
00:04:42,063 --> 00:04:48,070
This value will be printed
as such.

64
00:04:48,070 --> 00:04:54,077
The final printing will thus be 
"n plus nCarre = 20"

65
00:04:54,077 --> 00:05:00,085
However, if we
omit the parentheses,

66
00:05:00,205 --> 00:05:07,728
we will print "n plus nCarre =",
followed by the value 4,

67
00:05:07,928 --> 00:05:12,032
immediately followed by the value 16.
We thus get the message :

68
00:05:12,242 --> 00:05:17,041
"n plus nCarre = 416".
This is clearly not what we wanted.

69
00:05:17,411 --> 00:05:23,390
In order to make sure that the evaluation
of "n + nCarre" will be done in an arithmetic way,

70
00:05:23,550 --> 00:05:27,242
we need to protect it with parentheses.

71
00:05:28,570 --> 00:05:31,018
Now, let us unfold the course
example step by step.

72
00:05:31,236 --> 00:05:34,927
We begin by declaring a
variable n,

73
00:05:35,284 --> 00:05:40,791
intialized to the value 4.
Then we declare a variable nCarre

74
00:05:40,921 --> 00:05:45,618
which we do not initialize;
we do not know its initial value.

75
00:05:45,748 --> 00:05:52,415
Now, we execute an assignment,
evaluating the expression "n * n",

76
00:05:52,635 --> 00:05:58,122
that is, 4 times 4, returning 16.

77
00:05:58,262 --> 00:06:04,453
This value 16 will be copied
and stored inside nCarre. In the memory,

78
00:06:04,813 --> 00:06:07,847
we thus have the value 4 inside n
and 16 inside nCarre.

79
00:06:08,077 --> 00:06:12,426
Now, we will print the message
"La variable n contient", then

80
00:06:12,616 --> 00:06:18,778
evaluate the expression "n", that is,
replace it by the value of n.

81
00:06:19,038 --> 00:06:23,036
We will thus get the message"La variable n
contient 4" (TN: means "The variable n contains 4")

82
00:06:23,216 --> 00:06:27,214
Now, we move on to the next
line, printing the message :

83
00:06:27,354 --> 00:06:32,987
"Le carré de n", then evaluate the expression "n",
(TN: "le carré de n" means "the square of n")

84
00:06:33,177 --> 00:06:37,030
that is, replace it by its value 4
and add the literal string "est".

85
00:06:37,170 --> 00:06:42,008
Then, we evaluate the expression "nCarre",
thus replacing it by its value 16

86
00:06:42,152 --> 00:06:46,732
and concatenate, push back the literal
string containing the period.

87
00:06:46,872 --> 00:06:50,844
Therefore, the final message will be
"Le carré de 4 est 16."

88
00:06:51,094 --> 00:06:54,081
Finally, in the last line,
we will similarly

89
00:06:54,301 --> 00:06:57,097
print the message "Le double de n est".
(TN: "Le double de n est" means "the double of n is" )

90
00:06:57,465 --> 00:06:59,329
By the way, please note that it is the letter n

91
00:06:59,588 --> 00:07:05,058
that will be printed since it is 
included in the quotation marks.

92
00:07:05,738 --> 00:07:10,594
This is the word "n" and not an
expression such as here.

93
00:07:11,622 --> 00:07:15,853
"Le double de n est", followed
by the expression "2 * n".

94
00:07:16,166 --> 00:07:21,562
We will thus search for the value of n,
that is, 4 and multiply it by 2, returning 8.

95
00:07:21,786 --> 00:07:27,401
We thus get the message "8",
followed by the message "."

96
00:07:27,611 --> 00:07:31,491
and, finally, a line break
due to "println()"

97
00:07:32,477 --> 00:07:35,010
A little question now.

98
00:07:36,900 --> 00:07:40,882
Let us detail step by step
the execution of the question code.

99
00:07:41,106 --> 00:07:45,936
We begin by declaring an int-type
variable a, initialized to the value 2.

100
00:07:46,152 --> 00:07:51,306
Then, we declare an int-type variable
b, initialized to the value 1.

101
00:07:51,538 --> 00:07:58,045
Now, we move on to an assignment,
evaluating a, that is, 2 then

102
00:07:58,325 --> 00:08:03,386
evaluating "b + 2", that is "1 + 2" returning
the value 3.

103
00:08:03,516 --> 00:08:10,927
We thus get the value "2 * 3" which will
be stored inside b.

104
00:08:11,197 --> 00:08:15,476
To sum up, this expression will be evaluated to 6
and the value 6 will be stored inside b.

105
00:08:15,836 --> 00:08:20,649
Now, we move on to the last line
which will print the expression a, that is, 2,

106
00:08:20,979 --> 00:08:26,876
then the string "," then the value of
b, that is, 6.

107
00:08:28,816 --> 00:08:31,541
Another question now.

108
00:08:32,114 --> 00:08:34,984
Let us examine the step by step
unfolding of the question code.

109
00:08:35,185 --> 00:08:38,381
We begin by declaring an int-type
variable a,

110
00:08:38,653 --> 00:08:40,411
intialized to the value 1.

111
00:08:40,559 --> 00:08:45,826
Then, we declare an int-type variable b,
intialized to the value 2.

112
00:08:46,046 --> 00:08:50,856
Now, we move on to an assignment,
evaluating the expression b, thus returning 2.

113
00:08:50,986 --> 00:08:57,369
We will store this 2 inside a and
evaluate the next expression, a

114
00:08:57,589 --> 00:09:01,768
and copy this expression inside b.

115
00:09:02,028 --> 00:09:06,819
Therefore, during the printing, we will
evaluate the expression a, that is 2,

116
00:09:07,189 --> 00:09:10,985
then the literal string ","

117
00:09:11,149 --> 00:09:17,441
then the evaluation of the expression b,
that is, 2. The printing will thus be "2, 2".

118
00:09:17,658 --> 00:09:21,200
At this point, we could wonder how
to swap the value of two variables.

119
00:09:21,484 --> 00:09:25,941
Indeed, in the previous example,
we have not swapped the two variables,

120
00:09:26,090 --> 00:09:31,251
but simply copied the value of b
inside both variables a and b.

121
00:09:31,391 --> 00:09:39,114
Comparatively, we could wonder how
to swap the content of two glasses.

122
00:09:39,114 --> 00:09:45,156
Let us suppose that you have a glass
of grenadine and a glass of mint.

123
00:09:45,306 --> 00:09:49,627
The mint glass will be called b
and the grenadine glass, a.

124
00:09:49,777 --> 00:09:53,240
How to proceed in order to
swap the content of both glasses ?

125
00:09:53,460 --> 00:10:00,315
The correct solution is to introduce
a third glass called "tmp".

126
00:10:00,942 --> 00:10:03,139
It is not any more difficult
in programming.

127
00:10:03,649 --> 00:10:05,863
In order to swap the content
of two variables, we simply

128
00:10:06,081 --> 00:10:12,245
need to introduce a temporary variable,
making it possible to transfer the values.

129
00:10:12,445 --> 00:10:18,221
For example, a is initialized to 1
and b is initialized to 2.

130
00:10:18,502 --> 00:10:25,861
We introduce a temporary
variable "temp"

131
00:10:25,861 --> 00:10:32,570
in which we will copy the value of a.
Then we will copy the value of b inside a.

132
00:10:32,680 --> 00:10:35,912
Since the value of a is
saved inside "temp",

133
00:10:36,182 --> 00:10:40,313
we can now replace the initial
value of a by b's.

134
00:10:40,509 --> 00:10:45,954
And, finally, we will copy
the value saved in "temp"

135
00:10:46,144 --> 00:10:52,544
inside the variable b, namely we store
the value 1 inside the variable b.

136
00:10:52,714 --> 00:10:57,654
Initially, a contained 1 and b
contained 2;

137
00:10:57,895 --> 00:11:03,633
we have thus swapped the initial
content of the two variables a and b.

138
00:11:05,860 --> 00:11:10,297
Now, let us move on to the reading of the 
value of a variable from the keyboard.

139
00:11:10,447 --> 00:11:18,371
Let us reuse our example of the calculation
and printing of a number's square or double.

140
00:11:18,611 --> 00:11:23,304
Let us suppose that, this time, we do
not want the value of n to be 4,

141
00:11:23,484 --> 00:11:27,759
but instead ask the user to enter the value
of n through the keyboard.

142
00:11:27,889 --> 00:11:31,492
How should we proceed ? Well,
we will simply replace the line

143
00:11:31,642 --> 00:11:36,312
assigning the value 4 to n 
by a few lines

144
00:11:36,442 --> 00:11:40,848
which we are going to detail soon.
These lines will

145
00:11:41,048 --> 00:11:46,266
permit to assign a value, read from 
the keyboard, to the variable n.

146
00:11:46,506 --> 00:11:51,072
First of all, we need to import the
so-called "Scanner class"

147
00:11:51,262 --> 00:11:56,026
by adding this line once
at the beginning of the program :

148
00:11:56,246 --> 00:12:00,120
import java.util.Scanner;

149
00:12:00,300 --> 00:12:05,916
This line added,
you can declare a Scanner-type

150
00:12:06,216 --> 00:12:13,130
variable "keyb" and initialize it
by binding it to the keyboard.

151
00:12:13,370 --> 00:12:17,957
This is technically called the standad
input device.

152
00:12:18,353 --> 00:12:23,307
This input is represented by "System.in".
All you need to do 

153
00:12:23,682 --> 00:12:27,711
is to write this line : Scanner,
followed by a variable name (e.g, keyb)

154
00:12:27,953 --> 00:12:33,617
= new Scanner(System.in);
Thanks to that, you can use

155
00:12:33,941 --> 00:12:38,522
the variable "keyb" in order
to read variables from the keyboard.

156
00:12:38,522 --> 00:12:42,370
This line will be written once and
only once in the whole program.

157
00:12:42,460 --> 00:12:45,058
You only need to create the
link towards the keyboard once.

158
00:12:45,508 --> 00:12:48,097
At this point of the course,
you will write it in the "main".

159
00:12:48,385 --> 00:12:52,664
From this line, you can
use the variable keyb

160
00:12:52,808 --> 00:12:54,992
in order to read variables.

161
00:12:55,232 --> 00:13:00,903
We may want to read an integer from
the keyboard in order to initialize a variable

162
00:13:00,903 --> 00:13:06,017
like we do here: we declare an int-type
variable n and initialize it

163
00:13:06,207 --> 00:13:09,641
with a keyboard reading.
This is written as follows:

164
00:13:09,831 --> 00:13:13,318
keyb (the Scanner-type variable we
have previously declared),

165
00:13:13,729 --> 00:13:21,097
period, and the reading of an integer
nextInt() in order to read the next integer,

166
00:13:21,287 --> 00:13:24,746
parentheses and a semicolon to close the
initialization instruction

167
00:13:24,746 --> 00:13:28,205
of our variable.

168
00:13:28,205 --> 00:13:31,664
This might all seem technical but you
merely need to follow

169
00:13:31,814 --> 00:13:35,072
this three steps procedure which
we will go through once more.

170
00:13:35,292 --> 00:13:39,126
First of all, you add this line once at
the very beginning of your program.

171
00:13:39,426 --> 00:13:45,834
Then, you write this line once where
you need it; here, in the main

172
00:13:46,004 --> 00:13:49,557
in order to declare a Scanner-type
variable which you will use

173
00:13:49,767 --> 00:13:55,394
every time you need to read an
integer thanks to "nextInt()".

174
00:13:55,674 --> 00:14:01,391
The "nextInt()" method works as follows.

175
00:14:01,591 --> 00:14:05,700
It begins by momentarily
stopping the progess of the program.

176
00:14:05,900 --> 00:14:09,384
Then, it will wait until the user
types a value and

177
00:14:09,564 --> 00:14:13,227
hits the "enter" or "return"
key.

178
00:14:13,227 --> 00:14:16,890
Then, it will read the value as an integer,

179
00:14:16,890 --> 00:14:20,554
convert it into an integer.
This integer-type value, converted from what

180
00:14:20,774 --> 00:14:26,951
has been entered through the keyboard will 
be assigned to the variable n during the third step.

181
00:14:27,247 --> 00:14:29,871
The program will then resume.

182
00:14:30,131 --> 00:14:32,971
"nextInt()" is what we call a
method, a function,

183
00:14:33,293 --> 00:14:35,910
a processing, associated to the Scanner object.

184
00:14:35,983 --> 00:14:38,765
It is possible to read
many other things,

185
00:14:39,005 --> 00:14:40,829
many different types of values.

186
00:14:41,059 --> 00:14:43,861
For example, if we want to
read a decimal-type value,

187
00:14:43,861 --> 00:14:46,663
a double-type value,

188
00:14:46,663 --> 00:14:49,465
we will use the function "nextDouble()".

189
00:14:49,705 --> 00:14:57,005
In order to initialize a double-type variable
x to a value read from the keyboard,

190
00:14:57,185 --> 00:15:05,731
we will write the declaration double x
and the initialization = keyb.nextDouble();

191
00:15:05,811 --> 00:15:09,776
which will read a double-type
value from the keyboard.

192
00:15:11,517 --> 00:15:14,526
Let us take a step by step example.

193
00:15:14,774 --> 00:15:19,637
We start with the usual
declaration line,

194
00:15:19,931 --> 00:15:26,821
creating a Scanner which will associate
the keyboard to the Scanner "keyb".

195
00:15:27,266 --> 00:15:32,332
Then, we will warn the user that
we expect him to enter a value.

196
00:15:32,452 --> 00:15:37,748
We will print for him, with the way
we have just seen, a message :

197
00:15:37,888 --> 00:15:41,421
"Entrez une valeur pour n"
(TN: "Enter a value for n")

198
00:15:41,716 --> 00:15:46,350
We will read a value from the keyboard
thanks to the method nextInt()

199
00:15:46,350 --> 00:15:50,984
of the previously declared object "keyb".

200
00:15:50,984 --> 00:15:55,619
Let's assume that the user
types the value 2 on the keyboard.

201
00:15:55,839 --> 00:16:03,286
This method will be evaluated and
will read the value 2 from the keyboard.

202
00:16:03,486 --> 00:16:09,396
2 will then be stored as the initial
value of the variable n.

203
00:16:09,591 --> 00:16:15,872
At the next step, we will evaluate
"n * n", that is, 4.

204
00:16:15,982 --> 00:16:21,949
We will store this 4 inside the variable nCarre
and print the message

205
00:16:22,109 --> 00:16:25,816
"La variable contient" and
evaluate the expression n.

206
00:16:26,006 --> 00:16:33,559
Thus, we will print
the value of n.

207
00:16:33,749 --> 00:16:40,894
In addition to nextInt(), reading an integer
and nextDouble(), reading a decimal,

208
00:16:41,204 --> 00:16:44,835
a useful function is the
function nextLine()

209
00:16:44,965 --> 00:16:48,313
permitting to read a whole
line in one go.

210
00:16:48,451 --> 00:16:50,564
Let us take an example.
As usual,

211
00:16:50,872 --> 00:16:54,806
we declare a Scanner-type variable
keyb, associated to the keyboard.

212
00:16:54,956 --> 00:16:59,033
Once this declaration has been done,
we can call our function

213
00:16:59,203 --> 00:17:04,120
keyb.nextLine(); thus reading
a whole line.

214
00:17:04,310 --> 00:17:07,957
If the user has typed a message such as
"bonjour tout le monde !" (TN:"hello everyone!")

215
00:17:08,197 --> 00:17:14,415
the call to the function nextLine() will
read the whole line entered by the user,

216
00:17:14,575 --> 00:17:17,607
every character typed,
until the user has pressed

217
00:17:17,977 --> 00:17:20,869
the enter or return key.

218
00:17:21,099 --> 00:17:23,973
The question is, in what variable
will we store this message?

219
00:17:24,133 --> 00:17:26,878
What is its type?

220
00:17:27,018 --> 00:17:30,507
For now, anticipiting on forthcoming
material,

221
00:17:30,667 --> 00:17:39,487
we ask you to copy this line where
"String" is the type of the variable s,

222
00:17:39,781 --> 00:17:44,132
used in order to save the message.
s is the name of the variable.

223
00:17:44,401 --> 00:17:48,728
Once we have typed the  line
String s = keyb.nextLine();

224
00:17:48,968 --> 00:17:53,685
s will contain all the characters
entered by the user

225
00:17:53,865 --> 00:17:56,155
until they have pressed the return key.

226
00:17:57,612 --> 00:18:00,545
Be careful though when using

227
00:18:00,745 --> 00:18:05,091
the nextLine() method: it is not  very
compatible with nextInt() or nextDouble().

228
00:18:05,321 --> 00:18:09,782
For example, if we declare
an int-type variable i

229
00:18:09,985 --> 00:18:12,846
and initialize it through
keyboard reading

230
00:18:13,121 --> 00:18:17,934
with nextInt() and that, right away,
we wish to read a message,

231
00:18:18,137 --> 00:18:22,591
an entire line with nextLine() which we 
store in s1 and that we read another line

232
00:18:22,908 --> 00:18:28,496
similarly, and store it,
initializing a variable s2.

233
00:18:28,615 --> 00:18:34,822
The idea is to read an integer and then
to read the end of the line and then another line.

234
00:18:35,032 --> 00:18:38,161
If we type the message "25 francs",
line break,

235
00:18:38,161 --> 00:18:40,602
followed by "23 francs" what will happen

236
00:18:40,819 --> 00:18:43,850
is that we will start by reading an
integer. i will thus contain 25.

237
00:18:43,985 --> 00:18:48,983
Only then will we read the end of the
line until here, "francs".

238
00:18:48,989 --> 00:18:52,101
Thus, s1 will indeed contain
"francs".

239
00:18:52,191 --> 00:18:57,447
Finally, we will read a whole line,
that is, "23 francs".

240
00:18:57,447 --> 00:18:59,156
Until now, no problem.

241
00:18:59,420 --> 00:19:05,312
Now, if we type 14, line break, "euros",
line break,43 what will happen ?

242
00:19:05,612 --> 00:19:08,664
Let us analyze step by step.

243
00:19:08,937 --> 00:19:15,142
We want to read an
integer : i will thus contain 14.

244
00:19:15,485 --> 00:19:24,008
Then, we will read the end
of the line; it is empty here.

245
00:19:24,378 --> 00:19:33,083
s1 will be empty and we will read the next
line : "euros" will be stored inside s2.

246
00:19:33,083 --> 00:19:38,887
So, s2 will contain "euros".

247
00:19:38,887 --> 00:19:44,691
What we see here is
that the combination of

248
00:19:44,691 --> 00:19:50,495
nextInt() followed by nextLine() 
does not always work properly.

249
00:19:50,695 --> 00:19:53,761
Especially since, here, the user
has generated a line break

250
00:19:54,215 --> 00:20:03,566
right after the integer 14 and the reading
of nextLine() after nextInt(), typed on the keyboard

251
00:20:03,566 --> 00:20:06,793
will read the end of the line,
corresponding to the line break,

252
00:20:06,983 --> 00:20:10,441
the return key typed by the
user.

253
00:20:10,506 --> 00:20:14,638
This occurs because nextInt() ends its
reading just after the integer, here, 14

254
00:20:14,888 --> 00:20:22,086
and does not read the return character,
the return key.

255
00:20:22,473 --> 00:20:24,461
How should we proceed, then?

256
00:20:24,836 --> 00:20:27,618
Every time you wish to read a number

257
00:20:27,834 --> 00:20:31,700
with nextInt() or nextDouble() and that
the next reading is a line,

258
00:20:31,970 --> 00:20:36,252
you need to anticipate the non-reading
of the line break

259
00:20:36,652 --> 00:20:43,509
by nextInt() or nextDouble() by adding
a reading of the end of the line,

260
00:20:43,829 --> 00:20:53,374
a supplementary nextLine() inserted
between

261
00:20:53,374 --> 00:20:56,389
the integer/decimal reading

262
00:20:56,389 --> 00:20:59,145
and the reading of the next message,
which you really want to read.

263
00:20:59,375 --> 00:21:06,333
You add a reading in a variable, 
previously declared to that effect

264
00:21:06,333 --> 00:21:12,200
String s = keyb.nextline();

265
00:21:12,954 --> 00:21:16,374
Later, once you will be
familiar with

266
00:21:16,374 --> 00:21:18,599
control structures, especially with
conditional branches

267
00:21:18,850 --> 00:21:22,593
or conditional loops, you will be 
able to make sure that the reading of s

268
00:21:23,033 --> 00:21:27,547
is indeed an empty character string, or, if not,
you will take it as the message to read.

269
00:21:27,693 --> 00:21:35,240
If s is empty, you will take the next line
as the desired message.
