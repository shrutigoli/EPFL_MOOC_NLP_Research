1
00:00:03,643 --> 00:00:06,410
In our introduction, we have
discussed the different steps

2
00:00:06,410 --> 00:00:08,979
leading to the creation
of a program.

3
00:00:08,979 --> 00:00:12,146
We know that we should start
by thinking, conceptualizing,

4
00:00:12,146 --> 00:00:15,458
and planning the sequence of instructions
we aim to realize.

5
00:00:15,458 --> 00:00:18,831
Then, we will translate this conception

6
00:00:18,831 --> 00:00:21,027
into a known programming language,
such as Java.

7
00:00:21,027 --> 00:00:22,911
Then we will go through several steps,

8
00:00:22,911 --> 00:00:25,703
of compilings, testings 
until we finally reach

9
00:00:25,703 --> 00:00:28,912
the creation of program,
executable on a computer.

10
00:00:28,912 --> 00:00:30,998
Now, we will enter the heart of the matter

11
00:00:30,998 --> 00:00:33,567
and acquire the tools necessary

12
00:00:33,567 --> 00:00:35,620
to begin writling

13
00:00:35,620 --> 00:00:40,308
little Java programs.

14
00:00:40,308 --> 00:00:42,410
A program is simply

15
00:00:42,410 --> 00:00:45,395
a sequence of instructions
operating on data.

16
00:00:45,395 --> 00:00:49,613
The notion of "sequence of instructions",
is closely realted to the notion of processing.

17
00:00:49,613 --> 00:00:51,801
Processing operate on data,

18
00:00:51,801 --> 00:00:54,005
they can modify these data's values.

19
00:00:54,005 --> 00:00:57,228
In turn, the data impact
the processing,

20
00:00:57,228 --> 00:01:00,116
since, depending on
the nature of these data,

21
00:01:00,116 --> 00:01:04,147
different processing will
be performed.

22
00:01:04,152 --> 00:01:06,216
Let us suppose, for example,
that we wish to write

23
00:01:06,216 --> 00:01:07,763
a brief program able

24
00:01:07,763 --> 00:01:10,251
to solve a quadratic equation
of this kind.

25
00:01:10,251 --> 00:01:13,905
Let us think of the the adequate
 sequence of instructions.

26
00:01:13,905 --> 00:01:16,205
The first step is probably

27
00:01:16,205 --> 00:01:21,641
to ask the user to provide
us with the coefficients b and c,

28
00:01:21,641 --> 00:01:23,991
which will let us know
concretely

29
00:01:23,991 --> 00:01:26,146
what equation we're
going to solve.

30
00:01:26,146 --> 00:01:29,170
I now have the first data.

31
00:01:29,170 --> 00:01:32,231
Starting with these data,
we can perform other processing,

32
00:01:32,231 --> 00:01:35,064
such as, for example, calculating the delta.

33
00:01:36,384 --> 00:01:39,093
Then, depending on
the value of this delta,

34
00:01:39,093 --> 00:01:41,632
we will perform different processing.

35
00:01:41,632 --> 00:01:43,666
For example, if delta is negative,

36
00:01:43,666 --> 00:01:48,516
we will simply print that
there is no solution.

37
00:01:52,136 --> 00:01:55,461
Otherwise, we will treat the other cases.

38
00:01:55,461 --> 00:02:00,839
For example, if delta is 0,
we can calculate the unique solution

39
00:02:01,875 --> 00:02:03,620
and print this solution.

40
00:02:06,075 --> 00:02:08,364
Otherwise, we have the case
with two solutions,

41
00:02:08,364 --> 00:02:11,418
which we will not discuss
here explicitly.

42
00:02:12,550 --> 00:02:14,841
Here, we can clearly see that
processing

43
00:02:14,841 --> 00:02:16,528
impact data.

44
00:02:16,528 --> 00:02:18,756
For example, here, the processing held

45
00:02:18,756 --> 00:02:21,528
compute an arithmetic
expression.

46
00:02:21,528 --> 00:02:23,930
This processing indeed
impacts the data,

47
00:02:23,930 --> 00:02:27,113
for it will calculate a new
data, which is delta.

48
00:02:27,113 --> 00:02:28,603
The other way around, we can also see

49
00:02:28,603 --> 00:02:30,812
that data impact processing.

50
00:02:30,812 --> 00:02:33,843
Typically here, depending
on delta's value,

51
00:02:33,843 --> 00:02:36,991
we will perform different actions.

52
00:02:37,431 --> 00:02:41,035
We can draw two important
observations based on this example.

53
00:02:41,035 --> 00:02:44,978
The first one is the notion
of expression, which is fundamental

54
00:02:44,978 --> 00:02:48,078
in order to start
expressing processing.

55
00:02:48,078 --> 00:02:51,492
The notion of expression will
be a chapter

56
00:02:51,492 --> 00:02:53,341
later in this course.

57
00:02:53,341 --> 00:02:56,420
The second one is
bound to the notion of data.

58
00:02:56,420 --> 00:03:06,988
Here, the data "b² - 4c" is stored
in  a container, delta.

59
00:03:06,988 --> 00:03:09,726
We need to associate this data
to the name "delta"

60
00:03:09,726 --> 00:03:13,067
since we use delta several
times in the program.

61
00:03:13,067 --> 00:03:16,615
We want to be able to find
this data, whenever we need it.

62
00:03:16,615 --> 00:03:21,246
The fact to associate a name
to a data, delta to b² - 4c

63
00:03:21,246 --> 00:03:25,078
is what we call in programming,
the notion of variable.

64
00:03:25,078 --> 00:03:30,384
This will be the topic of
this episode.

65
00:03:31,864 --> 00:03:35,655
The goal of this introductory course
is to introduce the basic tools,

66
00:03:35,655 --> 00:03:38,464
permitting to formulate
basic processing

67
00:03:38,464 --> 00:03:41,214
and to manipulate data
in an adequate way.

68
00:03:41,214 --> 00:03:44,168
We have seen, in the
previous example,

69
00:03:44,168 --> 00:03:47,281
how important the notion of
expression was,

70
00:03:47,281 --> 00:03:49,529
to which the notion
of operator is related.

71
00:03:49,529 --> 00:03:51,963
We will discuss operators later
in this course, though.

72
00:03:51,963 --> 00:03:54,872
Today, we will discover

73
00:03:54,872 --> 00:03:57,988
the notion of variables,
associated with the notion of data.

74
00:03:57,988 --> 00:03:59,834
The notion of variable will let us

75
00:03:59,834 --> 00:04:02,901
associate data with a name
in a program.

76
00:04:02,901 --> 00:04:06,855
You have here a small glimpse
of the remaining fundamentals,

77
00:04:06,855 --> 00:04:11,438
which will be studied during
this introductory programming course.

78
00:04:12,858 --> 00:04:17,511
In programming, a variable is
a named memory area

79
00:04:17,511 --> 00:04:22,469
usually called the identifier,

80
00:04:22,469 --> 00:04:26,854
where we will store a value.

81
00:04:26,854 --> 00:04:28,397
We can see this here.

82
00:04:28,397 --> 00:04:30,038
A fundamental fact is that

83
00:04:30,038 --> 00:04:32,697
variables must be associated with a type.

84
00:04:32,697 --> 00:04:35,766
Java is a language demanding
that we specify

85
00:04:35,766 --> 00:04:38,506
the type of the data
we wish to manipulate.

86
00:04:38,506 --> 00:04:42,053
When we wish to
use a variable,

87
00:04:42,053 --> 00:04:43,680
a named area in the memory,

88
00:04:43,680 --> 00:04:46,667
it will be necessary
to specify its type,

89
00:04:46,667 --> 00:04:49,256
what type of data we want to use.

90
00:04:49,256 --> 00:04:53,295
For example, it may be necessary
to use data

91
00:04:53,295 --> 00:04:57,359
of the integer type,
of the character string type.

92
00:04:59,240 --> 00:05:01,049
Every time we wish to
manipulate data

93
00:05:01,049 --> 00:05:02,702
of a particular kind,

94
00:05:02,702 --> 00:05:05,959
we will have to specify it
through the type.

95
00:05:07,529 --> 00:05:09,649
How should we proceed, in a Java program

96
00:05:09,649 --> 00:05:12,658
if we wish to declare a variable,

97
00:05:12,658 --> 00:05:14,955
namely to memorize a data
through a variable ?

98
00:05:14,955 --> 00:05:17,643
You have here, a
little shell of a program

99
00:05:17,643 --> 00:05:20,403
ready to welcome your instructions.
Now, let us declare a variable.

100
00:05:20,403 --> 00:05:24,085
First of all, we should decide
the name of this variable;

101
00:05:24,085 --> 00:05:26,409
if possible, this name should be eloquent, 
somehow describing the role of the variable.

102
00:05:26,409 --> 00:05:28,317
Here, we will call this variable "nombre".
(TN: nombre means number )

103
00:05:28,317 --> 00:05:31,417
Now, we should come with an initial
value, for example, 4.

104
00:05:31,417 --> 00:05:35,245
And, of course, we should
specify its type.

105
00:05:35,245 --> 00:05:37,437
Here, I will precise
that the number is an integer.

106
00:05:37,437 --> 00:05:40,468
In Java, we write integer "int".

107
00:05:40,468 --> 00:05:42,447
This line of code, we have
just written in the editor

108
00:05:42,447 --> 00:05:45,428
corresponds to what we call,
the declaration of a variable.

109
00:05:45,428 --> 00:05:46,967
In a program, we have to declare

110
00:05:46,967 --> 00:05:50,063
that we wish to use a variable
of a given type.

111
00:05:50,063 --> 00:05:52,465
You have here two examples

112
00:05:52,465 --> 00:05:54,938
of valid variable
declarations in Java.

113
00:05:54,938 --> 00:05:57,009
In the first case, 
we give an initial value

114
00:05:57,009 --> 00:05:59,892
to the variable at the 
moment where we declare it.

115
00:05:59,892 --> 00:06:03,048
In the second case,
we simply declare a variable

116
00:06:03,048 --> 00:06:05,937
without giving it
an initial variable.

117
00:06:05,937 --> 00:06:08,657
We can see here the fundamental

118
00:06:08,657 --> 00:06:11,324
syntax elements we have
introduced earlier.

119
00:06:11,324 --> 00:06:15,071
The variable type must
necessarily be specified

120
00:06:15,071 --> 00:06:19,347
Same goes for its name,
its identifier.

121
00:06:20,993 --> 00:06:23,864
As we have seen, during
its declaration,

122
00:06:23,864 --> 00:06:26,479
a variable can be initialized,

123
00:06:26,479 --> 00:06:31,072
namely, we can give
it an initial value.

124
00:06:31,072 --> 00:06:34,277
This corresponds to this
situation in the memory.

125
00:06:34,277 --> 00:06:36,671
It is good practice;

126
00:06:36,671 --> 00:06:37,861
indeed, it is always desirable

127
00:06:37,861 --> 00:06:40,919
for a variable to have a known value.

128
00:06:42,619 --> 00:06:45,799
We have just seen that it
was entierely possible, in Java,

129
00:06:45,799 --> 00:06:49,890
for a variable to be declared
without any initial value.

130
00:06:49,890 --> 00:06:52,343
Here, we are declaring
a variable

131
00:06:52,343 --> 00:06:53,918
nCarré, of type int.
(TN: nCarré means nSquared).

132
00:06:53,918 --> 00:06:55,864
We are not giving it an initial value.

133
00:06:55,864 --> 00:06:59,008
This corresponds to this
situation in the memory.

134
00:06:59,008 --> 00:07:02,204
We have here a variable nCarré,
not storing anything known.

135
00:07:02,204 --> 00:07:03,652
What we should know

136
00:07:03,652 --> 00:07:05,727
is that Java does not permit,
in a program,

137
00:07:05,727 --> 00:07:08,681
to use a variable which
has not been initialized.

138
00:07:08,681 --> 00:07:12,267
For example, if, after having
declared this variable nCarré,

139
00:07:12,267 --> 00:07:14,227
We try to print its value

140
00:07:14,227 --> 00:07:17,035
(we are anticipating on
the next episodes,

141
00:07:17,035 --> 00:07:19,140
regarding the printing
of a value).

142
00:07:19,140 --> 00:07:21,438
So, the printing of the variable nCarré

143
00:07:21,438 --> 00:07:23,766
will be realized as follows.

144
00:07:23,766 --> 00:07:27,000
If we try, right after the
declaration of a variable,

145
00:07:27,000 --> 00:07:28,861
to print its value,

146
00:07:28,861 --> 00:07:31,496
we will obtain an error
upon compiling.

147
00:07:31,496 --> 00:07:33,581
The compiler will call us to order,

148
00:07:33,581 --> 00:07:36,465
signifying that nCarré has
not been initialized.

149
00:07:36,465 --> 00:07:38,455
Therefore, we cannot use it.

150
00:07:38,455 --> 00:07:42,659
However, this implies that,
after declaring a variable,

151
00:07:42,659 --> 00:07:44,205
without giving it a value,

152
00:07:44,205 --> 00:07:47,118
we have the possibility to give
it a value later in the program.

153
00:07:47,118 --> 00:07:50,269
This is what we will 
discuss now,

154
00:07:50,269 --> 00:07:52,923
introducing the assignment
notion.

155
00:07:52,923 --> 00:07:55,463
This will make it possible,
after this instruction,

156
00:07:55,463 --> 00:08:00,379
to modify, to store a value
inside the variable nCarré

157
00:08:00,379 --> 00:08:03,594
through the so-called assignment.

158
00:08:04,694 --> 00:08:06,722
Regarding types, we already
encountered,

159
00:08:06,722 --> 00:08:08,571
in the previous examples,

160
00:08:08,571 --> 00:08:11,123
the integer type,
spelt "int" in Java.

161
00:08:11,123 --> 00:08:13,847
Thus, if we wish to use a data
corresponding to an integer

162
00:08:13,847 --> 00:08:15,562
we will use the int type.

163
00:08:15,562 --> 00:08:18,244
Naturally, there are other
usable types.

164
00:08:18,244 --> 00:08:21,669
For example, if we wish to
use decimal numbers,

165
00:08:21,669 --> 00:08:24,185
we can use the predefined type double,

166
00:08:24,185 --> 00:08:28,129
which will allow us to work
with decimal-type

167
00:08:28,129 --> 00:08:29,719
variables.

168
00:08:29,719 --> 00:08:31,407
What you have to know,

169
00:08:31,407 --> 00:08:34,276
is that once we go through a
declaration such as this,

170
00:08:34,276 --> 00:08:36,878
each variable has its own type.

171
00:08:36,878 --> 00:08:40,498
This type, will remain unchanged
for the whole course of the program.

172
00:08:40,498 --> 00:08:42,462
We cannot change the type
of a variable

173
00:08:42,462 --> 00:08:43,880
once the declaration has been made.

174
00:08:43,880 --> 00:08:46,119
Concretely, this means that

175
00:08:46,119 --> 00:08:51,882
our variable n here, can only
contain integers.

176
00:08:51,882 --> 00:08:56,919
Similarly, the variable x can
only contain decimal numbers.

177
00:08:58,360 --> 00:08:59,978
let us review these essential points.

178
00:08:59,978 --> 00:09:03,871
In Java, the declaration of a variable,
follows this syntax.

179
00:09:03,871 --> 00:09:06,064
We specify the type of the variable,

180
00:09:06,064 --> 00:09:08,506
follow by its identifier, its name.

181
00:09:08,506 --> 00:09:10,950
And we do not forget the famous
semicolon

182
00:09:10,950 --> 00:09:13,139
which closes the declaration.

183
00:09:13,139 --> 00:09:15,596
We have also seen that it is
always recommanded

184
00:09:15,596 --> 00:09:18,570
to give an intial value to our
variable,

185
00:09:18,570 --> 00:09:20,070
during the declaration.

186
00:09:20,070 --> 00:09:21,926
We will generally adopt

187
00:09:21,926 --> 00:09:24,496
a declaration-initialization
instruction,

188
00:09:24,496 --> 00:09:26,007
which goes as follows :

189
00:09:26,007 --> 00:09:28,598
The variable type, followed by its name,

190
00:09:28,598 --> 00:09:31,769
then, after the =,  
the initial value

191
00:09:31,769 --> 00:09:33,636
and, of course, the semicolon at the end,

192
00:09:33,636 --> 00:09:37,202
closing the declaration-
initialization instruction.

193
00:09:37,202 --> 00:09:39,733
Once the variable type has been defined,

194
00:09:39,733 --> 00:09:44,091
it is clear that we can not
change it later.

195
00:09:45,224 --> 00:09:49,207
In Java, it is valid to declare
several variables on the same line.

196
00:09:49,207 --> 00:09:52,716
We will declare, on the same line,
variables of the same type.

197
00:09:52,716 --> 00:09:55,469
Therefore, we only specify
the type once.

198
00:09:55,469 --> 00:09:59,287
Here, we declare int-typed
variables p and q,

199
00:09:59,287 --> 00:10:02,047
separating the declaration of
the different variables

200
00:10:02,047 --> 00:10:04,201
with a comma.

201
00:10:04,201 --> 00:10:06,117
You have here a second example

202
00:10:06,117 --> 00:10:08,666
where we declare two
double-typed variables on the same line.

203
00:10:08,666 --> 00:10:11,485
The difference from the previous example,

204
00:10:11,485 --> 00:10:17,224
is that, for the variable y
we do not specify an initial value.

205
00:10:18,691 --> 00:10:21,038
This is also possible.

206
00:10:21,038 --> 00:10:22,795
Regarding methodology,

207
00:10:22,795 --> 00:10:26,133
keep in mind that it is not
recommanded to overuse these sorts

208
00:10:26,133 --> 00:10:29,700
of formulation, for they impede
the program's readability.

209
00:10:30,680 --> 00:10:33,053
There are a few rules,
by which you must abide

210
00:10:33,053 --> 00:10:35,316
when choosing a variable's
identifier.

211
00:10:35,316 --> 00:10:38,083
This identifier can only
be constituted

212
00:10:38,083 --> 00:10:40,444
of letters, digits

213
00:10:40,444 --> 00:10:44,412
or either of these specific characters :
underscore (_) or dollar ($).

214
00:10:44,412 --> 00:10:47,666
The first character has 
to be either a letter.

215
00:10:47,666 --> 00:10:49,793
It can also be one of the specific 
characters

216
00:10:49,793 --> 00:10:51,211
underscore (_) or dollar ($),

217
00:10:51,211 --> 00:10:53,929
however, this is not part
of the usual conventions

218
00:10:53,929 --> 00:10:56,890
of Java programmers, which
we will discuss later on.

219
00:10:56,890 --> 00:10:58,372
Naturally, the identifier

220
00:10:58,372 --> 00:11:01,408
cannot be one of the
Java reserved keywords.

221
00:11:01,408 --> 00:11:04,822
Capital letters are authorized,

222
00:11:04,822 --> 00:11:06,359
but they are not equivalent.

223
00:11:06,359 --> 00:11:11,327
For example, if we choose the identifier,
"ligne" with a lower case "l",

224
00:11:11,327 --> 00:11:14,452
it is not equivalent to the
identifier "Ligne",

225
00:11:14,452 --> 00:11:16,414
with an upper case "L".

226
00:11:16,414 --> 00:11:19,604
You can see here examples of
valid identifiers.

227
00:11:19,604 --> 00:11:23,320
Here constituted of
letters only,

228
00:11:23,320 --> 00:11:25,828
here constituted of
letters and digits.

229
00:11:25,828 --> 00:11:29,659
Here, you can see some
invalid identifiers.

230
00:11:29,659 --> 00:11:32,872
Here, an identifier can neither
contain a blank space.

231
00:11:32,872 --> 00:11:37,642
nor the symbol minus (-) and cannot
begin with a digit.

232
00:11:37,642 --> 00:11:41,406
In addition to the naming
rules imposed by the Java language,

233
00:11:41,406 --> 00:11:43,038
which are to be strictly respected,

234
00:11:43,038 --> 00:11:45,319
there are certain usual 
conventions,

235
00:11:45,319 --> 00:11:47,887
not required by the compiler

236
00:11:47,887 --> 00:11:51,761
but nonetheless respected
by most Java programmers.

237
00:11:51,761 --> 00:11:54,302
Typically, you will see the
variable naming

238
00:11:54,302 --> 00:11:55,728
with this form here.

239
00:11:55,728 --> 00:11:59,830
If the name of the variable, the identifier,
is constituted of several words,

240
00:11:59,830 --> 00:12:01,499
we will separate the words,

241
00:12:01,499 --> 00:12:05,361
starting every word with
a capital letter.

242
00:12:05,361 --> 00:12:08,342
Also, the convention is that
every variable's identifier

243
00:12:08,342 --> 00:12:10,314
is to start with a lower case letter.

244
00:12:10,314 --> 00:12:12,507
Thus, you will encounter this
type of formulation,

245
00:12:12,507 --> 00:12:15,276
rather than this one,
starting with a capital letter,

246
00:12:15,276 --> 00:12:19,135
or this one,
using underscores (_).

247
00:12:19,605 --> 00:12:21,892
We have already understood that the notion of type

248
00:12:21,892 --> 00:12:24,946
is essential for variable
declaration in Java.

249
00:12:24,946 --> 00:12:28,615
The two elementary types
for the manipulation of numerical data,

250
00:12:28,615 --> 00:12:31,489
that is, the declaration of numerical
variables,

251
00:12:31,489 --> 00:12:34,724
are int and double; we have already
encountered them

252
00:12:34,724 --> 00:12:36,703
in several of our previous examples.

253
00:12:36,703 --> 00:12:39,702
Naturally, there are many
another predefined type.

254
00:12:39,702 --> 00:12:41,742
For example, if, in a program,

255
00:12:41,742 --> 00:12:44,699
we wish to manipulate the usual
characters of the alphabet,

256
00:12:44,699 --> 00:12:46,543
for example A and Z,

257
00:12:46,543 --> 00:12:50,263
we can resort to the 
predefined type char.

258
00:12:50,263 --> 00:12:52,208
We will have the opportunity,
throughout this course,

259
00:12:52,208 --> 00:12:55,768
to expand on predefined
types in Java.

260
00:12:56,018 --> 00:12:58,583
Now, you know how to
declare a variable,

261
00:12:58,583 --> 00:13:00,991
making it possible to
memorize a data,

262
00:13:00,991 --> 00:13:02,875
usable in a program.

263
00:13:02,875 --> 00:13:05,614
Now, how should we proceed,
if we wish to change the value

264
00:13:05,614 --> 00:13:07,599
of a variable, previously declared ?

265
00:13:07,599 --> 00:13:10,263
To that end, we will resort
to the notion of assignment.

266
00:13:10,263 --> 00:13:12,345
We have already had
the opportunity to encounter

267
00:13:12,345 --> 00:13:14,402
a few informal examples.

268
00:13:14,402 --> 00:13:17,967
In order to realize an assignment,
we will use the symbol equals (=),

269
00:13:17,967 --> 00:13:20,228
respecting the following syntax :

270
00:13:20,228 --> 00:13:24,544
On the left side of the expression, we 
specify the variable's identifier.

271
00:13:24,544 --> 00:13:26,609
Then comes our equal 
symbol (=)

272
00:13:26,609 --> 00:13:28,720
and, finally, the new value

273
00:13:28,720 --> 00:13:31,890
that we wish to store inside
our variable.

274
00:13:31,890 --> 00:13:33,602
It is very important to understand -

275
00:13:33,602 --> 00:13:37,344
we will come back to this later -

276
00:13:37,344 --> 00:13:40,416
that an assignment is not a 
mathematical equality.

277
00:13:40,416 --> 00:13:43,282
its purpose is to modify
the value of a variable,

278
00:13:43,282 --> 00:13:45,794
in the course of the program's execution.

279
00:13:45,794 --> 00:13:50,011
Let us suppose that, in a program,
we declared two variables n and nCarré.

280
00:13:50,011 --> 00:13:52,864
n has been declared and initalized to 4

281
00:13:52,864 --> 00:13:55,251
while nCarré has not been initialized.

282
00:13:55,251 --> 00:13:58,757
We wish to store a value inside nCarré,
using the assignement notion.

283
00:13:58,757 --> 00:14:01,858
How will such an assignment
unfold ?

284
00:14:01,858 --> 00:14:05,123
You must understand that the
execution of such an instruction,

285
00:14:05,123 --> 00:14:07,194
will occur in two distinct steps.

286
00:14:07,194 --> 00:14:09,176
The first is the evaluation

287
00:14:09,176 --> 00:14:14,064
of the expression on the right-hand side of 
the =  symbol.

288
00:14:14,064 --> 00:14:16,955
Here, this evaluation will
give us the value 16.

289
00:14:16,955 --> 00:14:23,283
In a second time, we will store
the value thus computed

290
00:14:23,283 --> 00:14:26,348
in the  variable nCarré.

291
00:14:26,348 --> 00:14:27,812
As a result,

292
00:14:27,812 --> 00:14:31,433
the variable nCarré, will contain
the value 16.

293
00:14:33,493 --> 00:14:36,969
To sum up, the assignment syntax
in Java is as follows :

294
00:14:36,969 --> 00:14:39,549
we specify the name of the variable,
followed by the equals symbol (=),

295
00:14:39,549 --> 00:14:42,646
followed by an expression, valid in Java.

296
00:14:42,646 --> 00:14:45,566
This expression can be something
elementary,

297
00:14:45,566 --> 00:14:46,986
such as a literal value, like here.

298
00:14:46,986 --> 00:14:49,719
It can also be much more complex,
like here.

299
00:14:49,719 --> 00:14:53,549
We will come back to expressions and further
discuss them later.

300
00:14:53,549 --> 00:14:57,434
The critical point is that
the type of the value

301
00:14:57,434 --> 00:14:59,268
computed by the expression

302
00:14:59,268 --> 00:15:02,365
must be  the same as
the variable's one

303
00:15:02,365 --> 00:15:04,174
Another syntactic detail :

304
00:15:04,174 --> 00:15:09,222
do not forget the semicolon (;)
at the end of the assignment instruction.

305
00:15:09,222 --> 00:15:11,079
Now, let us go back

306
00:15:11,079 --> 00:15:14,253
to the comparison between the mathematical
equality and the assignment.

307
00:15:14,253 --> 00:15:16,693
Both use the equals sign (=)

308
00:15:16,693 --> 00:15:18,316
and the notion of variables.

309
00:15:18,316 --> 00:15:21,632
Self-evidently, if, in mathematics, we write
such an expression,

310
00:15:21,632 --> 00:15:23,666
we signify that the variables a and b

311
00:15:23,666 --> 00:15:26,133
will always have the same value over time.

312
00:15:26,133 --> 00:15:28,530
On the other hand, the assignment in programming

313
00:15:28,530 --> 00:15:31,044
is a different mechanism entierely;
it is dynamic

314
00:15:31,044 --> 00:15:32,874
and will thus depend on time.

315
00:15:32,874 --> 00:15:34,527
Let us take a concrete example.

316
00:15:34,527 --> 00:15:39,965
Let us imagine that a contains the value 1
and b contains the value 2.

317
00:15:39,965 --> 00:15:42,881
If we execute now this first instruction,

318
00:15:42,881 --> 00:15:44,603
we start by, as we have just seen,

319
00:15:44,603 --> 00:15:47,844
evaluating the expression on
the right-hand side of the assignment;

320
00:15:47,844 --> 00:15:49,830
this will give us the value 2.

321
00:15:49,830 --> 00:15:53,480
Then, we will store this value,
this 2, inside the variable a

322
00:15:53,480 --> 00:15:56,095
which leads us to this result.

323
00:15:56,095 --> 00:15:58,861
Now, let us analyze the
second instruction

324
00:15:58,861 --> 00:16:01,655
with the exact same starting
conditions,

325
00:16:01,655 --> 00:16:04,277
that is a containing 1
and b containing 2.

326
00:16:04,277 --> 00:16:06,641
Now, if we execute this instruction,

327
00:16:06,641 --> 00:16:10,611
as before, we start by evaluating what stands 
on the right side of the assignment,

328
00:16:10,611 --> 00:16:11,919
returning 1.

329
00:16:11,919 --> 00:16:16,418
Then, we store this 1 inside b,
which results in this situation.

330
00:16:16,418 --> 00:16:19,670
Thus, we see that in programming,
in both cases,

331
00:16:19,670 --> 00:16:23,990
a and b have the same value

332
00:16:23,990 --> 00:16:27,387
but these values are not the same
over time.

333
00:16:27,387 --> 00:16:30,521
Moreover, if, at some point,
one of the two variables is modified,

334
00:16:30,521 --> 00:16:31,909
the other remains unaffected.

335
00:16:31,909 --> 00:16:34,260
For example, if a is
then modified to 3,

336
00:16:34,260 --> 00:16:39,681
b will keep its value, for example 1,
in the second assignment.

337
00:16:39,681 --> 00:16:41,927
Another example : if, in mathematics,

338
00:16:41,927 --> 00:16:46,362
we write such a relation,
it means that a and b will awlays

339
00:16:46,362 --> 00:16:49,153
verify this relation, regardless of the time.

340
00:16:49,153 --> 00:16:52,633
However, if we write the exact
same thing in programming,

341
00:16:52,633 --> 00:16:55,818
we will see that the result for a
and b is decidedly different.

342
00:16:55,818 --> 00:16:58,489
Thus, here, we start by executing
this instruction,

343
00:16:58,489 --> 00:17:02,505
resulting in the variable
a contaning 5.

344
00:17:02,505 --> 00:17:05,961
Then, we execute this 
assignment instruction.

345
00:17:05,961 --> 00:17:08,179
As we have seen before, we
will start by evaluating "a + 1",

346
00:17:08,179 --> 00:17:11,602
returning 6 and storing this
6 inside the variable b,

347
00:17:11,602 --> 00:17:13,687
resulting in this situation.

348
00:17:13,687 --> 00:17:18,319
At this point, a and b indeed
verify this relation.

349
00:17:18,319 --> 00:17:20,502
However, if we move on
to the next instruction,

350
00:17:20,502 --> 00:17:23,615
we will modify a's value
to 2.

351
00:17:23,615 --> 00:17:27,614
We now see that the relation
is not verfied anymore.

352
00:17:27,614 --> 00:17:29,612
Due to what we have just seen,

353
00:17:29,612 --> 00:17:33,641
it is licit, in programing to resort
to similar formulations.

354
00:17:33,641 --> 00:17:36,343
By the way, this formulation,
which you will often encounter,

355
00:17:36,343 --> 00:17:38,078
along our examples
is particularly useful.

356
00:17:38,078 --> 00:17:41,167
Now, what happens if we execute
such an instruction ?

357
00:17:41,167 --> 00:17:44,021
Let us start with a concrete
example, with a initialized to 1.

358
00:17:44,021 --> 00:17:45,571
As we have just seen,

359
00:17:45,571 --> 00:17:49,829
we start by evaluating this part
of the assignement, returning 2.

360
00:17:49,829 --> 00:17:52,726
In a second time, we will
store this 2 inside a,

361
00:17:52,726 --> 00:17:54,348
leading to this result.

362
00:17:54,348 --> 00:17:56,952
Thus, when we write that
kind of things in programming,

363
00:17:56,952 --> 00:17:59,936
we do not signify, as is the
case in mathematics,

364
00:17:59,936 --> 00:18:03,653
that the relation "a = a + 1"
must always be respected,

365
00:18:03,653 --> 00:18:05,143
(in the context of mathematics, this particular expression
may lead to problems)

366
00:18:05,143 --> 00:18:07,277
In programming, 

367
00:18:07,277 --> 00:18:09,473
we simply signify that
we are adding

368
00:18:09,473 --> 00:18:12,555
1 to the value of a.

369
00:18:12,555 --> 00:18:15,697
Now to the last chapter regarding
variables :

370
00:18:15,697 --> 00:18:17,624
the notion of constant.

371
00:18:17,624 --> 00:18:20,903
We have seen that the assignment
permits to modify

372
00:18:20,903 --> 00:18:23,384
the value of a variable
after its declaration.

373
00:18:23,384 --> 00:18:26,279
There are situations, though,
where this is not desirable.

374
00:18:26,279 --> 00:18:29,501
Let us suppose that, in a program,
we need to work 

375
00:18:29,501 --> 00:18:31,138
with the speed of light.

376
00:18:31,138 --> 00:18:34,071
We all know that the speed of
light is a constant.

377
00:18:34,071 --> 00:18:37,170
Its value will thus not be modified
over the course of the program.

378
00:18:37,170 --> 00:18:40,058
Therefore, we will precise that this
data cannot change.

379
00:18:40,058 --> 00:18:43,669
In such a case, we proceed
by adding the reserved

380
00:18:43,669 --> 00:18:47,335
keyword "final" just before
the variable declaration.

381
00:18:47,335 --> 00:18:50,835
This means that, once an initial
value has been attributed,

382
00:18:50,835 --> 00:18:54,049
we cannot modify the value of the
variable anymore.

383
00:18:54,049 --> 00:18:58,094
Here, in this example, we declared
our constant as follows :

384
00:18:58,094 --> 00:18:59,807
the constant VITESSE_DE_LA_LUMIERE
(TN:vitesse de la lumière means speed of light)

385
00:18:59,807 --> 00:19:02,619
If, later on, we try to modify
the value

386
00:19:02,619 --> 00:19:07,092
through an assignment, this will
result in a compiling error.

387
00:19:08,092 --> 00:19:10,768
By the way, there are
certain conventions

388
00:19:10,768 --> 00:19:12,437
regarding the naming of constants in Java.

389
00:19:12,437 --> 00:19:15,878
Here, the identifier of our speed of
light constant

390
00:19:15,878 --> 00:19:19,386
is constituted by different words,
all written in capital letters

391
00:19:19,386 --> 00:19:21,695
and separated by underscores (_).

392
00:19:21,695 --> 00:19:24,494
This is a usual convention regarding
the naming of constants.

393
00:19:24,494 --> 00:19:26,615
We warmly recommand you to follow
these conventions.
