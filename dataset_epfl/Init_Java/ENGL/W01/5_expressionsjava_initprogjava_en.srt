1
00:00:05,793 --> 00:00:08,583
Let us now go back to
expressions and operators

2
00:00:08,583 --> 00:00:11,196
which we have already
seen in previous episodes.

3
00:00:11,196 --> 00:00:14,873
We can find expression in
assignments, for example.

4
00:00:15,983 --> 00:00:20,271
The expression is necessarily
on the right-hand side of the = sign

5
00:00:20,271 --> 00:00:23,268
and will calculate a value
of the same type

6
00:00:23,268 --> 00:00:27,116
as the variable on the left-hand
side of the = sign,

7
00:00:27,116 --> 00:00:31,700
since the assignment will give the value
calculated by the expression to the variable.

8
00:00:31,700 --> 00:00:35,481
So, an expression can simply be
a literal value,

9
00:00:36,102 --> 00:00:39,143
like 4 or 3.14

10
00:00:39,413 --> 00:00:46,290
 

11
00:00:47,100 --> 00:00:50,054
More generally, an expression

12
00:00:50,314 --> 00:00:54,054
is a mathematical formula

13
00:00:54,054 --> 00:00:57,224
implementing operators,
such as here.

14
00:00:57,234 --> 00:01:00,643
Here, we multiply the value of the
variable n by itself.

15
00:01:00,643 --> 00:01:03,962
By the way, the asterisk
is the multiplication symbol.

16
00:01:03,962 --> 00:01:07,452
Here, we thus simply obtain n².
More generally,

17
00:01:08,372 --> 00:01:11,959
an expression can be expressed using
several operators and parentheses;

18
00:01:11,959 --> 00:01:14,295
precisely like a 
mathematical formula.

19
00:01:15,665 --> 00:01:17,979
The type of the expressions is thus important.

20
00:01:17,979 --> 00:01:20,661
It is also essential to be
aware that

21
00:01:20,661 --> 00:01:23,360
literal values have their
own type

22
00:01:23,360 --> 00:01:25,056
exactly like variables.

23
00:01:25,056 --> 00:01:28,961
For example, if we write
the literal value 1,

24
00:01:28,961 --> 00:01:31,276
the type of this value is "int".

25
00:01:32,166 --> 00:01:37,276
However, if we write 1.0
the type of this value is double.

26
00:01:38,126 --> 00:01:42,225
By the way, please note that we can
write the shorter " 1. "

27
00:01:42,225 --> 00:01:47,359
which is strictly equivalent to 1.0,
thus of  type double.

28
00:01:47,359 --> 00:01:53,305
Thus, we can simply write,
for example, this declaration

29
00:01:53,305 --> 00:01:57,202
which is strictly equivalent
to this declaration here.

30
00:01:57,202 --> 00:02:00,857
However " 1.0 " is a lot
more readable than

31
00:02:00,857 --> 00:02:05,504
the short version " 1. "
Therefore, prefer " 1.0 "

32
00:02:06,705 --> 00:02:10,407
We may also use the so-called
scientific notation.

33
00:02:10,407 --> 00:02:14,356
For example, we can
write " 2e3 "

34
00:02:14,356 --> 00:02:19,636
which is strictly equivalent to 2x10³ (2x10^3),
that is 2000.

35
00:02:19,636 --> 00:02:27,240
In genere, " aeb " is
equivalent to ax10^b

36
00:02:27,678 --> 00:02:31,701
For example, in this declaration,

37
00:02:32,721 --> 00:02:34,772
we initialize the variable x

38
00:02:35,574 --> 00:02:39,504
to the value 1.3x10³

39
00:02:40,080 --> 00:02:42,015
that is, 1300.

40
00:02:43,755 --> 00:02:49,403
In this declaration here,
we initialize the variable y

41
00:02:50,020 --> 00:02:55,227
to the value 1.3x10^-3

42
00:02:55,739 --> 00:03:00,388
that is, 0.0013

43
00:03:02,228 --> 00:03:04,153
Regarding operators,

44
00:03:04,334 --> 00:03:06,413
we have at our disposal,
first of all, the four usual operators.

45
00:03:06,413 --> 00:03:10,480
For addition, we will simply
use the + symbol.

46
00:03:11,593 --> 00:03:13,946
For subtraction the - symbol.

47
00:03:13,946 --> 00:03:17,921
As we have said, we use
the * symbol for multiplication.

48
00:03:17,921 --> 00:03:21,712
And the division is written with
the / character.

49
00:03:22,100 --> 00:03:25,369
However, there is a trick
regarding the division.

50
00:03:25,369 --> 00:03:28,792
If both values involved in
the division

51
00:03:28,792 --> 00:03:33,043
are of  type int, it will be
the integer division.

52
00:03:33,666 --> 00:03:40,405
For example, in this division,
1 and 2 are both of  type int;

53
00:03:40,405 --> 00:03:43,195
this is thus the integer division.

54
00:03:43,195 --> 00:03:46,937
This means that we will obtain,
as the division's result,

55
00:03:46,937 --> 00:03:48,258
the value 0.

56
00:03:48,258 --> 00:03:49,208
Why is that ?

57
00:03:49,208 --> 00:03:53,588
Because 1 = 0*2 + 1

58
00:03:53,798 --> 00:03:56,570
and this 0 is the result
of the integer division.

59
00:03:57,450 --> 00:04:00,269
Another example : 5/2

60
00:04:00,675 --> 00:04:06,033
5 and 2 are both of  type int.
Therefore, the result will be 2,

61
00:04:06,033 --> 00:04:11,090
for 5 = 2*2 + 1

62
00:04:11,090 --> 00:04:14,036
and this 2 here is indeed the
result of the division.

63
00:04:14,036 --> 00:04:18,242
However, if at least one
of the two values

64
00:04:18,242 --> 00:04:21,462
involved in the division is
of  type double,

65
00:04:21,462 --> 00:04:24,873
it will be the standard division
we are familiar with.

66
00:04:24,873 --> 00:04:29,955
In this example, we will thus
obtain the result 0.5

67
00:04:29,955 --> 00:04:32,368
as we would have expected.

68
00:04:33,678 --> 00:04:36,353
In Java, we may also use
the operators

69
00:04:36,353 --> 00:04:37,788
+=

70
00:04:37,788 --> 00:04:38,916
-=

71
00:04:38,916 --> 00:04:40,247
*=

72
00:04:40,247 --> 00:04:41,476
/=

73
00:04:41,870 --> 00:04:48,248
For example, we may write "a += 5"
where a is a variable;

74
00:04:48,418 --> 00:04:53,126
this is stritly equivalent to writing "a = a + 5"

75
00:04:54,283 --> 00:04:59,816
Another example : we
may write "a *= b",

76
00:04:59,816 --> 00:05:01,631
where b is another variable;

77
00:05:01,631 --> 00:05:06,534
this is strictly equivalent to 
writing "a = a * b"

78
00:05:08,622 --> 00:05:10,924
In the case of int and
int only,

79
00:05:10,924 --> 00:05:14,267
we may also use an operator
called "modulo",

80
00:05:14,267 --> 00:05:16,887
written with the character %

81
00:05:16,887 --> 00:05:20,075
returning the remainder
of the integer division.

82
00:05:20,645 --> 00:05:27,263
For example, if we write "11 % 4",
that is, 11 modulo 4, we will obtain 3.

83
00:05:27,263 --> 00:05:33,927
Why so ?
Because 11 = 2 * 4 + 3

84
00:05:33,927 --> 00:05:38,243
This 3 is the remainder
of the division 11 by 4,

85
00:05:38,243 --> 00:05:41,229
and thus the result of "11 % 4".

86
00:05:41,699 --> 00:05:48,287
Now, if we calculate "12 % 4",

87
00:05:49,147 --> 00:05:50,834
what will we obtain, in your opinion ?

88
00:05:51,424 --> 00:05:52,143
0

89
00:05:52,903 --> 00:05:58,739
Why ?
Because 12 = 3 * 4 + 0

90
00:05:59,437 --> 00:06:03,126
The remainder of the division
12 by 4 is thus 0 .

91
00:06:03,126 --> 00:06:07,363
Therefore, the value of 12 modulo 4
is indeed 0.

92
00:06:08,443 --> 00:06:12,708
We may also use the
operators ++ and --

93
00:06:12,708 --> 00:06:17,426
called the increment and decrement
operators.

94
00:06:17,426 --> 00:06:21,337
Namely, they will add 1 to
or subtract 1 from

95
00:06:21,337 --> 00:06:22,753
the value of a variable.

96
00:06:23,373 --> 00:06:29,990
For example, we may write " ++i "
which is equivalent to "i = i + 1"

97
00:06:30,250 --> 00:06:33,720
In other words, we will add 1
to the value of the variable i.

98
00:06:34,840 --> 00:06:38,803
We could also have written " --a ",

99
00:06:38,803 --> 00:06:42,766
which is equivalent to "a = a - 1".

100
00:06:42,766 --> 00:06:46,729
Namely, we will subtract 1
from the value of the variable a.

101
00:06:46,729 --> 00:06:49,846
These two operators are
frequently used

102
00:06:49,846 --> 00:06:54,441
with "for loops", a notion we will
expand on,

103
00:06:54,441 --> 00:06:56,637
 in an upcoming lesson.

104
00:06:57,377 --> 00:06:59,062
Up until now, we have always considered

105
00:06:59,062 --> 00:07:02,593
decimal values -the double variables-

106
00:07:02,593 --> 00:07:06,842
and integer values -the int variable-
separately.

107
00:07:06,842 --> 00:07:11,341
Now, what will happen if we try
to assign a decimal value

108
00:07:11,341 --> 00:07:13,648
to an int-type variable.

109
00:07:13,898 --> 00:07:16,733
Actually,  in Java,
it is impossible to assign

110
00:07:16,733 --> 00:07:19,539
a decimal value, for
example of double typed value

111
00:07:19,539 --> 00:07:21,228
to an int-type variable.

112
00:07:21,228 --> 00:07:25,276
For example, we have declared 
here a double-type variable x.

113
00:07:25,276 --> 00:07:29,065
Now, we are trying to assign the value
of the expression "3 * x" 

114
00:07:29,065 --> 00:07:33,865
- which is of the type double -
to our int-type

115
00:07:33,865 --> 00:07:36,282
variable n.

116
00:07:36,282 --> 00:07:39,748
The compiler will simply refuse
to compile this code

117
00:07:39,748 --> 00:07:44,934
and will produce an error message
"possible loss of precision"

118
00:07:44,934 --> 00:07:48,335
informing us that through this assignment,

119
00:07:48,361 --> 00:07:51,931
we will use the value
after the period.

120
00:07:52,780 --> 00:07:56,403
On the other hand, it is possible
to assign an int-type value

121
00:07:56,403 --> 00:08:00,591
to a decimal-type value, for
example of the type double.

122
00:08:00,591 --> 00:08:04,502
Here, we have declared
an int-type variable n.

123
00:08:04,502 --> 00:08:09,274
Now, we're trying to assign
the value of the expression "2 * n"

124
00:08:09,274 --> 00:08:13,974
- which is of the type int"
to our double-type variable x.

125
00:08:13,974 --> 00:08:20,182
In this case, the compiler will
automatically convert

126
00:08:20,182 --> 00:08:23,967
from int to double, which is
perfectly possible.

127
00:08:23,967 --> 00:08:27,814
Indeed, in this case, there is
no loss of precision.

128
00:08:29,525 --> 00:08:32,250
Now, let us go back to the
trap of the integer division.

129
00:08:32,250 --> 00:08:37,609
Here, we have declared a double-type
variable x, represented here.

130
00:08:37,609 --> 00:08:39,929
Through this assignment,

131
00:08:39,929 --> 00:08:44,623
we assign the value of the
expression 1/2 to our variable x.

132
00:08:45,069 --> 00:08:49,333
In your opinion, what will x
contain after this assignment?

133
00:08:50,003 --> 00:08:55,758
1 and 2 are both int-type
literal values.

134
00:08:55,758 --> 00:08:59,130
This division is
therefore the integer division

135
00:08:59,130 --> 00:09:03,476
In the case of the integer division
1 / 2 is 0.

136
00:09:04,332 --> 00:09:08,945
We will therefore assign
the value 0 to the variable x.

137
00:09:09,265 --> 00:09:12,781
By the way, please note
that there is an automatic conversion from

138
00:09:12,904 --> 00:09:16,303
int to double since this
0 here is of the type int

139
00:09:16,303 --> 00:09:22,121
and the 0 assigned to x
is obviously of the type double.

140
00:09:22,500 --> 00:09:25,766
Therefore, the fact that x is of
 type double,

141
00:09:25,766 --> 00:09:29,322
has no influence of the evaluation
of the expression 1 / 2

142
00:09:30,835 --> 00:09:32,776
The problem will occur in practice

143
00:09:32,776 --> 00:09:36,513
when we try, for example, to calculate
the average of two integer values.

144
00:09:37,303 --> 00:09:41,826
In this example, we have an int-type
variable note1 (TN:"note" means "grade")

145
00:09:41,826 --> 00:09:43,135
initialized to 4.

146
00:09:43,135 --> 00:09:47,191
note2, also of the type int,
is initialized to 5.

147
00:09:47,892 --> 00:09:53,074
Now, what will happen if we try to
calculate their average through this declaration?

148
00:09:53,074 --> 00:09:57,971
In this expression,
note1 and note2 are of  type int.

149
00:09:58,551 --> 00:10:01,016
Their sum is therefore also of type int.

150
00:10:01,016 --> 00:10:05,573
So, their sum is 9,
an int-type value.

151
00:10:05,573 --> 00:10:10,305
This 2 here, to calculate the
average is an int-type literal value;

152
00:10:10,960 --> 00:10:13,326
this division is thus
the integer division.

153
00:10:13,326 --> 00:10:18,348
Therefore, we will calculate the
result of the integer division 9 by 2

154
00:10:19,417 --> 00:10:23,469
and obtain the value 4, assigned to our
variable moyenne (TN:"moyenne" means "average")

155
00:10:23,469 --> 00:10:27,586
This is problematic; we expected
the average to be 4.5

156
00:10:27,586 --> 00:10:31,444
A possible solution is to
start by calculating the sum

157
00:10:31,444 --> 00:10:34,544
of the two int-type variables.

158
00:10:34,544 --> 00:10:39,310
here, we have "note1 + note2"
assigned to the variable moyenne

159
00:10:39,430 --> 00:10:44,151
"note1 + note2" is 9, of the type int

160
00:10:45,431 --> 00:10:48,922
which will be assigned to the variable moyenne.

161
00:10:50,492 --> 00:10:56,025
Following this instruction, which is
equivalent to

162
00:10:56,025 --> 00:11:02,406
"moyenne = moyenne / 2 ".

163
00:11:02,418 --> 00:11:05,119
2 is an int-type literal value.

164
00:11:05,119 --> 00:11:10,052
However, moyenne is a double-type
literal value.

165
00:11:10,058 --> 00:11:14,110
Therefore, this division is the
standard division

166
00:11:14,780 --> 00:11:19,570
and we will, this time, obtain 4.5
in our variable moyenne.


167
00:11:21,681 --> 00:11:24,725
Let us conclude by saying
that we may use functions

168
00:11:24,725 --> 00:11:27,750
and mathematical constants
in Java expressions.

169
00:11:27,750 --> 00:11:30,555
To that end, you simply 
need to respect the following notations  :

170
00:11:31,126 --> 00:11:33,891
For example, if we wish
to use a function,

171
00:11:33,891 --> 00:11:38,364
we will start by writing "Math."
followed by the function's name,

172
00:11:38,364 --> 00:11:42,082
followed by the values
needed in the function.

173
00:11:42,082 --> 00:11:43,488
In the case of constants,

174
00:11:44,108 --> 00:11:46,304
we start, once again,
by writing "Math."

175
00:11:46,304 --> 00:11:48,836
followed by the constant's name.

176
00:11:49,696 --> 00:11:52,465
For example, if you we want to
calculate the sine of an angle,

177
00:11:52,465 --> 00:11:56,694
we will write "Math.sin()" in order
to use the sine function,

178
00:11:57,414 --> 00:12:01,307
followed by the angle which 
sine we want to calculate.

179
00:12:01,307 --> 00:12:06,498
In Java, the trigonometric functions
expect a value in radians.

180
00:12:06,498 --> 00:12:12,844
For example, if we have a 10
degrees angle, here,

181
00:12:12,854 --> 00:12:17,867
we first need to convert it into
radians before feeding it to the sine function.

182
00:12:18,858 --> 00:12:23,777
To that end, we simply need to multiply
it by "pi" and divide it by 180.

183
00:12:26,047 --> 00:12:27,340
We did just that here.

184
00:12:27,645 --> 00:12:32,134
In order to obtain the value pi,
we simply wrote "Math.PI"

185
00:12:32,134 --> 00:12:36,319
By the way, this is not an integer
division

186
00:12:36,319 --> 00:12:42,514
but the division we are familiar with
because Math.PI is of the type double.

187
00:12:44,501 --> 00:12:48,095
If you are interested, you will find
all the available Java functions

188
00:12:48,319 --> 00:12:50,919
by clicking this URL.
