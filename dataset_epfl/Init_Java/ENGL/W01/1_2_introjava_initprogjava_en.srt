1
00:00:05,161 --> 00:00:07,658
Programming means
writing programs.

2
00:00:07,658 --> 00:00:11,577
A program is a sequence of instructions,
which will be executed by the computer.

3
00:00:11,577 --> 00:00:14,493
For a given task, the programmer
will have to create a program

4
00:00:14,493 --> 00:00:16,268
well suited to accomplish this task.

5
00:00:16,268 --> 00:00:19,032
However, it is the computer's
microprocessor

6
00:00:19,043 --> 00:00:22,839
which will execute the instructions
constituting the program.

7
00:00:22,922 --> 00:00:27,168
Yet, the microprocessor can only
execute very simple instructions.

8
00:00:27,168 --> 00:00:28,906
These are too elementary

9
00:00:28,906 --> 00:00:31,188
to be efficiently used by
a human being.

10
00:00:31,646 --> 00:00:35,101
Fortunately, programmers
can write their programs

11
00:00:35,101 --> 00:00:39,063
in programming language, such as Java,
more accessible to a human being.

12
00:00:39,087 --> 00:00:42,377
This language will automatically be
translated into instructions

13
00:00:42,377 --> 00:00:45,804
the microprocessor
will understand and execute.

14
00:00:46,621 --> 00:00:51,267
More precisely, a program
in the Java language

15
00:00:51,267 --> 00:00:53,437
is made of one or several text files.

16
00:00:53,535 --> 00:00:57,476
In the case of the Java language,
a compiler will translate

17
00:00:57,476 --> 00:01:01,863
the text file(s) into a 
bytecode program,

18
00:01:01,867 --> 00:01:05,832
which is an intermediate representation
of the Java program.

19
00:01:05,956 --> 00:01:08,557
This representation is independant

20
00:01:08,557 --> 00:01:11,860
from the computer where
the program has been compiled.

21
00:01:11,989 --> 00:01:16,087
The bytecode program will then
be interpreted

22
00:01:16,087 --> 00:01:19,598
by a program called 
a virtual machine.

23
00:01:19,598 --> 00:01:23,437
The virtual machine will translate
the bytecode into instructions

24
00:01:23,437 --> 00:01:25,587
the microprocessor will be able to execute.

25
00:01:25,606 --> 00:01:29,288
Since the bytecode program is
independant from the computer

26
00:01:29,288 --> 00:01:31,214
where it has been created,

27
00:01:31,214 --> 00:01:34,310
it can be executed on
another computer.

28
00:01:34,720 --> 00:01:37,617
In this course, you will learn
to analyse a problem

29
00:01:37,617 --> 00:01:40,369
and write a program in a
high-level language.

30
00:01:40,369 --> 00:01:44,431
This language will thus be the Java language.
But we will endeavor to remain general

31
00:01:44,431 --> 00:01:47,129
and teach you principles valid

32
00:01:47,129 --> 00:01:49,293
for most programming languages.

33
00:01:49,293 --> 00:01:53,773
For a given problem, you will
first have to ponder

34
00:01:53,795 --> 00:01:57,990
the sequence of instructions
the computer will have to execute.

35
00:01:57,990 --> 00:02:01,790
You will then write the
Java program

36
00:02:01,790 --> 00:02:04,721
corresponding to this sequence
of instructions

37
00:02:04,721 --> 00:02:08,611
and compile your program to
generate a bytecode program.

38
00:02:09,028 --> 00:02:11,919
It is possible for the compiling to fail

39
00:02:11,919 --> 00:02:16,499
because your program does not respect
the rules of the Java language.

40
00:02:16,810 --> 00:02:20,572
You will then go back to your
program and correct it.

41
00:02:20,572 --> 00:02:24,246
Fortunately, the Java compiler
will provide error messages,

42
00:02:24,246 --> 00:02:26,646
which will guide you along this correction.

43
00:02:26,701 --> 00:02:31,541
Once compiled, you will be able to
test your program on the virtual machine.

44
00:02:31,728 --> 00:02:35,848
At this point, it is possible that your program
will not do what you expected

45
00:02:35,992 --> 00:02:39,995
because you have erred somewhere
in the initial sequence of instructions.

46
00:02:39,995 --> 00:02:46,015
You will then go back to the
analysis of the program you have done,

47
00:02:47,230 --> 00:02:49,830
correct this sequence of instructions

48
00:02:49,830 --> 00:02:52,813
and continue the cycle we have
just presented.

49
00:02:53,340 --> 00:02:55,908
Now, let us create 
our first Java program.

50
00:02:55,908 --> 00:02:58,416
First of all, we need to open
a development environment.

51
00:02:58,416 --> 00:03:01,023
There are several possible environments.

52
00:03:01,023 --> 00:03:03,998
You will find more details on this
course's website.

53
00:03:03,998 --> 00:03:06,703
For this episode, we
will use Eclipse.

54
00:03:06,703 --> 00:03:14,404
Our program starts like this :
"public class HelloWorld", opening brace

55
00:03:14,404 --> 00:03:17,021
Do not attempt to understand these
lines right now,

56
00:03:17,021 --> 00:03:18,570
just be aware that they are necessary

57
00:03:18,570 --> 00:03:20,480
for our program to compile.

58
00:03:20,524 --> 00:03:35,244
Then comes : "public static void main, 
opening parenthese, String, brackets, args,

59
00:03:35,244 --> 00:03:39,324
opening brace." This will make more sense
in the lectures dedicated to functions.

60
00:03:40,007 --> 00:03:43,402
The tradition, when learning
a new language

61
00:03:43,402 --> 00:03:46,718
is to create a program printing
the message "HelloWorld".

62
00:03:46,718 --> 00:03:49,246
We will follow
this custom.

63
00:03:49,246 --> 00:03:51,525
In Java, printing such a message
is done as follows.

64
00:03:51,525 --> 00:04:10,295
System.out.println("Hello, world");

65
00:04:10,919 --> 00:04:13,869
The braces opened by
the first lines 

66
00:04:15,323 --> 00:04:17,033
must now be closed.

67
00:04:18,683 --> 00:04:22,677
You may have noticed that Eclispe
has added them automatically,

68
00:04:22,677 --> 00:04:23,647
but this is not the case

69
00:04:23,647 --> 00:04:25,733
for all development
environments.

70
00:04:25,733 --> 00:04:28,663
Therefore, do not forget to add them
if need be.

71
00:04:29,516 --> 00:04:32,393
From now on, be careful to clearly
present your programs.

72
00:04:32,393 --> 00:04:35,717
Despite not being being mandatory for the
program to [compiler not to] perform correctly,

73
00:04:35,717 --> 00:04:38,476
it is important for readability.

74
00:04:38,476 --> 00:04:43,256
For example, we started these lines
on the first column.

75
00:04:43,470 --> 00:04:49,084
These two braces are aligned
and these lines in the braces

76
00:04:49,084 --> 00:04:51,904
are indented to the right.

77
00:04:52,261 --> 00:04:56,104
This line between these
two braces,

78
00:04:56,104 --> 00:05:01,466
also aligned, is indented
to the right aswell.

79
00:05:01,466 --> 00:05:05,996
Several rules are possible,
simply try to be coherent

80
00:05:06,014 --> 00:05:07,364
and readable.

81
00:05:08,451 --> 00:05:10,470
Now, let us compile
our program.

82
00:05:10,470 --> 00:05:13,950
On Eclipse, this is done
by clicking this button here,

83
00:05:14,409 --> 00:05:17,883
launching the compiling
and executing the program

84
00:05:17,883 --> 00:05:20,630
if the compiling has gone without problem.

85
00:05:20,630 --> 00:05:23,543
Since our program is correct,
the compiler has been able

86
00:05:23,543 --> 00:05:25,132
to create the bytecode program.

87
00:05:25,132 --> 00:05:29,719
Eclipe has then automatically
executed this bytecode program

88
00:05:29,719 --> 00:05:34,599
and you can see that our program
has indeed printed

89
00:05:35,201 --> 00:05:37,294
the "Helloworld" message.

90
00:05:37,294 --> 00:05:40,112
You can also see that the
compiling has created

91
00:05:40,112 --> 00:05:45,065
a file called "Helloworld.class" which
contains the bytecode program

92
00:05:45,065 --> 00:05:48,025
created at the compiling.

93
00:05:48,063 --> 00:05:50,883
Now, it is quite possible that,
while typing your first program,

94
00:05:50,883 --> 00:05:52,231
you have made a typo.

95
00:05:52,231 --> 00:05:55,141
What happens in such a case,
and what should we do?

96
00:05:55,182 --> 00:05:59,642
Let us suppose, for example,
that you have omitted the semicolon here.

97
00:06:00,113 --> 00:06:02,968
if we try to compile this program,

98
00:06:02,968 --> 00:06:07,168
you can see that the compiler
has printed an error message.

99
00:06:07,579 --> 00:06:12,509
This error message informs us
that a semicolon is missing

100
00:06:12,902 --> 00:06:16,982
and it gives us the line
where the semicolon is missing.

101
00:06:17,601 --> 00:06:21,761
Now, if we put back the semicolon
and recompile the program,

102
00:06:21,783 --> 00:06:24,008
we will obtain the "Helloworld"
message again,

103
00:06:24,008 --> 00:06:28,218
signifying that the compiling
and execution have gone without problem.

104
00:06:28,500 --> 00:06:30,718
Now, if you have forgotten the quotes,

105
00:06:30,718 --> 00:06:32,775
several error messages will
be printed.

106
00:06:32,775 --> 00:06:36,705
There is no need to panic, one should
always start with the first error;

107
00:06:36,717 --> 00:06:39,993
often an error is caused by
an another error,

108
00:06:39,993 --> 00:06:42,193
higher in the program.
This is the case here.

109
00:06:42,272 --> 00:06:46,062
If we put back the quotes,
all the mistakes will vanish.

110
00:06:47,413 --> 00:06:51,069
To sum up, be very rigorous
while typing your programs.

111
00:06:51,069 --> 00:06:53,865
Also, please mind the presentation.

112
00:06:53,865 --> 00:06:58,042
In case of errors, always
start with the first error and recompile.

113
00:06:58,042 --> 00:07:02,434
It will probably correct at least some
of the following errors.

114
00:07:02,434 --> 00:07:06,389
In order to find your error,
start by checking the line number

115
00:07:06,389 --> 00:07:09,181
and try to interpret the
error message

116
00:07:09,181 --> 00:07:12,202
displayed by the compiler,
so that you can solve the problem.

117
00:07:12,202 --> 00:07:16,127
If you have not done so already,
we encourage you to open

118
00:07:16,127 --> 00:07:18,013
your development
environment

119
00:07:18,013 --> 00:07:20,543
and to create your own
"helloworld" porgram.

120
00:07:20,605 --> 00:07:23,641
In the upcoming episodes, we will
see more complex examples,

121
00:07:23,641 --> 00:07:25,461
manipulating data.
