1
00:00:05,477 --> 00:00:09,303
Let's summarize the methodology that
we recommend you follow

2
00:00:09,303 --> 00:00:11,716
when you wish to create a method.

3
00:00:11,966 --> 00:00:15,071
The first aspect is to
focus first

4
00:00:15,071 --> 00:00:18,685
on "what" the method must do,
that is, on "what"

5
00:00:18,685 --> 00:00:22,364
and not on "how" the method
will do what it has to do.

6
00:00:22,364 --> 00:00:25,034
So think first of what
the method must do

7
00:00:25,034 --> 00:00:30,897
and especially, how to ensure that the
method has no undesirable effects,

8
00:00:30,897 --> 00:00:32,976
no "side effects",

9
00:00:32,976 --> 00:00:36,320
as we discussed in the episode about
method headers

10
00:00:36,320 --> 00:00:39,889
with the example of the "sqrt",
square-root, method.

11
00:00:39,889 --> 00:00:43,040
The first step is thus to
focus on "what"

12
00:00:43,040 --> 00:00:45,508
rather than on "how".

13
00:00:45,508 --> 00:00:50,459
Once this is clear, you can proceed to
the second step which is:

14
00:00:50,459 --> 00:00:54,234
what must the method receive from
the rest of the program

15
00:00:54,234 --> 00:00:56,838
to be able to work?
Think about what it has to do.

16
00:00:56,838 --> 00:00:59,955
For example, if the method is named
"f" and if I call it here,

17
00:00:59,955 --> 00:01:03,661
what should the rest of the program
pass to this method

18
00:01:03,661 --> 00:01:05,437
for it to work?

19
00:01:05,437 --> 00:01:07,018
Third step:

20
00:01:07,018 --> 00:01:08,997
you must determine the return type.

21
00:01:08,997 --> 00:01:11,907
What will the method return to
the rest of the program?

22
00:01:11,907 --> 00:01:13,351
And for this, you ask yourselves:

23
00:01:13,351 --> 00:01:18,246
does it make sense to write such a
function call: "z = f(...)",

24
00:01:18,246 --> 00:01:20,338
"f" being the name of the method,

25
00:01:20,808 --> 00:01:24,215
does it make sense to write
"z = f (something)"?

26
00:01:24,215 --> 00:01:29,470
If it makes sense, then the
return type will be the type of 'z'.

27
00:01:29,470 --> 00:01:35,650
For example, writing 
"z = sqrt(2.0)" makes sense,

28
00:01:35,650 --> 00:01:42,258
and so the return type of the "sqrt"
method should be the same type as "z"

29
00:01:42,258 --> 00:01:46,309
in this call; it would be a "double".

30
00:01:46,309 --> 00:01:50,515
If it doesn't make any sense to write
"z = function call",

31
00:01:50,515 --> 00:01:53,771
then the method must return nothing,

32
00:01:53,771 --> 00:01:58,660
and its return type must be "void".

33
00:01:59,410 --> 00:02:01,596
Then, fourth step:

34
00:02:01,596 --> 00:02:06,305
now and only now, should you
start thinking of the "how".

35
00:02:06,305 --> 00:02:08,687
How do I write the code?

36
00:02:08,687 --> 00:02:12,610
How do I build this
return value

37
00:02:12,610 --> 00:02:15,485
which the method must return
to the rest of the program?

38
00:02:16,815 --> 00:02:19,216
Let's look at a practical example.

39
00:02:19,216 --> 00:02:21,838
Suppose that we wish to
create a method

40
00:02:21,838 --> 00:02:24,570
which asks the user for a number,

41
00:02:24,570 --> 00:02:28,144
where this number will be
between two boundaries.

42
00:02:28,144 --> 00:02:31,824
So we would ask the user to
enter a number between 1 and 10.

43
00:02:31,824 --> 00:02:33,334
Following the methodology,

44
00:02:33,334 --> 00:02:37,480
we start by asking ourselves what
it is we want to do exactly,

45
00:02:37,480 --> 00:02:39,928
to design the method well.

46
00:02:39,928 --> 00:02:45,312
And here, I suggest you start by
writing comments

47
00:02:46,002 --> 00:02:48,997
which clearly specify what you
want to do.

48
00:02:48,997 --> 00:02:51,371
So for example here, we should
clearly specify 

49
00:02:51,371 --> 00:02:54,664
that it is a method which asks
the user for a number

50
00:02:54,664 --> 00:02:59,237
and that this number will be between
2 bounds that we will pass as parameters

51
00:03:00,077 --> 00:03:04,765
At this point, we can also decide
on a name for the method.

52
00:03:04,765 --> 00:03:09,455
which could be, for example, "demanderNombre"
[TN: means "askforNumber]".

53
00:03:10,335 --> 00:03:13,955
This step, which consists in clearly
specifying what the method must do,

54
00:03:13,955 --> 00:03:16,885
where we are interested 
in the "what",

55
00:03:16,885 --> 00:03:20,555
and not in the "how",
is essentially conceptual,

56
00:03:20,555 --> 00:03:24,172
but it is fundamental for a good
design of the method.

57
00:03:24,172 --> 00:03:26,450
You should not be careless about this step.

58
00:03:27,050 --> 00:03:31,998
We can now go on to the second step
which consists in asking ourselves

59
00:03:31,998 --> 00:03:36,335
which parameters the method
needs.

60
00:03:36,335 --> 00:03:39,616
Here, we decided that it would
receive two parameters:

61
00:03:39,616 --> 00:03:42,975
one parameters specifying
the lower bound,

62
00:03:42,975 --> 00:03:45,269
which we can call, for example, "minimum";

63
00:03:45,269 --> 00:03:49,042
and a parameter which specifies
the upper bound,

64
00:03:49,042 --> 00:03:52,668
which we can call "maximum".

65
00:03:53,698 --> 00:03:56,526
In our example of asking the user
for a number

66
00:03:56,526 --> 00:04:01,032
between 1 and 10, we would then pass
the value "1" as the first argument,

67
00:04:01,032 --> 00:04:03,712
and the value "10" as second argument.

68
00:04:03,712 --> 00:04:06,136
Once we are done with this
second step,

69
00:04:06,136 --> 00:04:09,105
which focused on parameters,
we can pass to the third step,

70
00:04:09,105 --> 00:04:13,820
which is to ask ourselves what the
return type of the method will be.

71
00:04:13,820 --> 00:04:18,290
What should the method return to
the rest of the program?

72
00:04:18,290 --> 00:04:22,652
To answer this, I suggest you write
an assignment like:

73
00:04:22,652 --> 00:04:28,193
"z = function call" so here,
"z = demanderNombre(1, 10);".

74
00:04:28,813 --> 00:04:34,689
with boundaries of, for example,
1 and 10.

75
00:04:34,689 --> 00:04:38,557
And we should determine whether such
a call makes sense.

76
00:04:38,947 --> 00:04:41,671
Here, it clearly does

77
00:04:41,671 --> 00:04:43,804
and the value to be stored in 'z' here

78
00:04:43,804 --> 00:04:47,439
would be the one that the
user gave us.

79
00:04:47,819 --> 00:04:50,466
So a call like this makes sense

80
00:04:50,466 --> 00:04:54,273
and so the return type of
this method

81
00:04:54,273 --> 00:04:57,034
will be the type of 'z'
in such an expression.

82
00:04:57,034 --> 00:04:59,716
So here, we expect to have a "double".

83
00:04:59,716 --> 00:05:02,453
Meaning the return type is "double".

84
00:05:03,173 --> 00:05:09,032
In this course, we should not forget
to add the "static" keyword.

85
00:05:09,642 --> 00:05:12,062
Once we have finished this
third step,

86
00:05:12,062 --> 00:05:14,518
which focused on the method's
return type,

87
00:05:15,108 --> 00:05:18,345
now and only now, we will attack
the "how".

88
00:05:18,345 --> 00:05:19,770
How the method must work.

89
00:05:19,770 --> 00:05:22,043
How will it do what it has to do?

90
00:05:22,043 --> 00:05:27,051
In other words, now we will start
working on the method's body

91
00:05:27,051 --> 00:05:30,919
and so we will add a block here,
that is, two braces,

92
00:05:30,919 --> 00:05:35,111
to write what the method must
do here,

93
00:05:35,111 --> 00:05:37,431
to ask the user for a number.
