1
00:00:05,526 --> 00:00:08,749
Let's end with a relatively simple concept,
method overloading.

2
00:00:08,749 --> 00:00:13,253
In Java, it is possible to define
several methods with the same name,

3
00:00:13,253 --> 00:00:16,802
provided that they don't have the
same list of parameters.

4
00:00:16,802 --> 00:00:19,836
That is, if the number of parameters

5
00:00:19,836 --> 00:00:21,978
or the types of these parameters,

6
00:00:21,978 --> 00:00:23,545
are different.

7
00:00:23,660 --> 00:00:26,697
This is known as method
overloading

8
00:00:26,697 --> 00:00:30,212
and is very useful when we need
to write methods

9
00:00:31,102 --> 00:00:33,607
which have similar tasks,

10
00:00:33,607 --> 00:00:38,114
but whose specific processes
depend on the type of these parameters.

11
00:00:38,464 --> 00:00:39,460
So in Java,

12
00:00:39,460 --> 00:00:42,742
what sets these methods apart
is not necessarily their names

13
00:00:42,742 --> 00:00:44,971
but also the types of their parameters,

14
00:00:44,971 --> 00:00:49,283
which is technically known as
the signature of the function.

15
00:00:50,203 --> 00:00:54,514
Note that the return type
is not part of this distinction.

16
00:00:54,994 --> 00:00:59,007
You cannot have two functions with the
same names and the same parameters

17
00:00:59,007 --> 00:01:02,822
and simply with different
return types.

18
00:01:03,532 --> 00:01:06,899
This means that I can declare
2 functions <i>f</i>

19
00:01:07,469 --> 00:01:12,445
where the first one has one
parameter of type <i>int</i>,

20
00:01:12,445 --> 00:01:16,450
and the second, a parameter
of type <i>double</i>.

21
00:01:17,940 --> 00:01:23,866
These two functions can have the
same return type

22
00:01:25,136 --> 00:01:28,999
However, I cannot have two
functions with identical names

23
00:01:30,159 --> 00:01:35,391
and which both have one
parameter of type <i>int</i>,

24
00:01:35,391 --> 00:01:38,527
but which vary only in
their return type.

25
00:01:38,527 --> 00:01:43,385
For example <i>int</i> for the first
and <i>double</i> for the second.

26
00:01:44,445 --> 00:01:48,126
So to summarize, in Java, one can 
have several functions with the same name,

27
00:01:48,126 --> 00:01:51,104
but with different sorts of parameters.

28
00:01:52,484 --> 00:01:56,852
For example, I can define these 3 methods
which are all named <i>affiche</i> (TN : <i>affiche</i> means <i>display</i>).

29
00:01:57,872 --> 00:02:00,211
These are indeed 3
different methods,

30
00:02:00,211 --> 00:02:03,103
since their lists of parameters
are different.

31
00:02:04,353 --> 00:02:07,295
The first method has one
parameter of type <i>int</i>;

32
00:02:07,295 --> 00:02:09,812
the second, one parameter of type
<i>double</i>;

33
00:02:09,812 --> 00:02:12,956
and the third, 2 parameters of
type <i>int</i>.

34
00:02:13,556 --> 00:02:18,674
When I call <i>affiche(1)</i>, since the
argument <i>1</i> is of type <i>int</i>,

35
00:02:18,674 --> 00:02:21,782
the first method will be called

36
00:02:21,782 --> 00:02:28,001
and will display <i>entier : 1</i>.

37
00:02:28,601 --> 00:02:35,022
When I call <i>affiche (1.0)</i>, the
argument is of type <i>double</i>

38
00:02:35,022 --> 00:02:37,809
and the second method will
be called,

39
00:02:38,679 --> 00:02:44,405
thus displaying <i>r√©el : 1.0</i>.

40
00:02:44,405 --> 00:02:47,375
And when I call <i>affiche (1,1)</i>,

41
00:02:47,845 --> 00:02:50,213
the third method will be called.

42
00:02:50,273 --> 00:02:53,645
<i>x1</i> will have a value of 1 
and <i>x2</i> also,

43
00:02:54,575 --> 00:02:56,330
meaning the method will display

44
00:02:57,520 --> 00:03:00,375
<i>couple : 1,1</i>.

45
00:03:01,435 --> 00:03:04,830
Let's end this lecture with an
overview of the final version

46
00:03:04,830 --> 00:03:08,029
of the example with which
we began this lecture.

47
00:03:08,029 --> 00:03:12,127
The goal is mostly to show you
how the program is structured,

48
00:03:12,127 --> 00:03:15,074
that is, where the different
methods are,

49
00:03:15,074 --> 00:03:18,304
and where the declaration of the <i>Scanner</i>-
type variable is placed, for example.

50
00:03:19,134 --> 00:03:23,195
At this stage of the course, a Java program
is made of one single class,

51
00:03:23,195 --> 00:03:26,605
which contains the <i>main</i> 
method here.

52
00:03:27,905 --> 00:03:30,528
The other methods serve to
modularize the <i>main</i> method.

53
00:03:30,528 --> 00:03:34,132
The idea is to have a main program,
a <i>main</i> method,

54
00:03:34,132 --> 00:03:38,480
that is as concise as possible, and
auxiliary methods to make it modular.

55
00:03:38,480 --> 00:03:41,284
Here, we have 3 auxiliary methods

56
00:03:41,284 --> 00:03:44,084
which we placed after
the <i>main</i> method

57
00:03:44,084 --> 00:03:46,783
but still within the only class

58
00:03:46,783 --> 00:03:48,788
which makes up our program.

59
00:03:49,688 --> 00:03:52,006
Actually, it could be made
more modular.

60
00:03:52,006 --> 00:03:55,294
The <i>saisieEtCalcul</i> method could
use an extra method

61
00:03:55,824 --> 00:03:58,419
which we could call <i>saisie</i> (TN: <i>saisie</i> means <i>input</i>)
and which would take as arguments

62
00:03:58,419 --> 00:04:02,054
the bounds within which the 
value should be input.

63
00:04:02,864 --> 00:04:05,713
<i>saisieEtCalcul</i> could then invoke
this <i>saisie</i> method,

64
00:04:05,713 --> 00:04:09,606
once to input the time and once
more to input the score,

65
00:04:09,606 --> 00:04:13,301
which would avoid code
duplication in the <i>while</i> loop.

66
00:04:13,741 --> 00:04:17,942
As you can see, we have only declared
one variable of <i>scanner</i> type,

67
00:04:17,942 --> 00:04:23,209
outside of the method, right at the
beginning of the class, right here.

68
00:04:23,859 --> 00:04:25,749
This variable is named <i>clavier</i>
(TN : <i>clavier</i> means <i>keyboard</i>)

69
00:04:25,749 --> 00:04:28,380
and is available to all
the methods

70
00:04:28,610 --> 00:04:31,064
defined between this
opening brace

71
00:04:32,174 --> 00:04:34,887
and this closing brace.

72
00:04:35,887 --> 00:04:37,793
In other words, this <i>clavier</i>
variable

73
00:04:37,793 --> 00:04:40,296
has a global scope in the
entire class.

74
00:04:40,676 --> 00:04:45,022
Indeed, this <i>clavier</i>
variable is used here and here,

75
00:04:45,022 --> 00:04:47,737
in the <i>saisieEtCalcul</i> method.

76
00:04:47,737 --> 00:04:50,547
But we can perfectly imagine
that it might be useful 

77
00:04:50,547 --> 00:04:53,006
to other methods of the program.

78
00:04:53,666 --> 00:04:56,100
Declaring a single <i>scanner</i>-
type variable

79
00:04:56,100 --> 00:04:58,767
is common practice for
simple programs

80
00:04:58,767 --> 00:05:01,713
with a single class containing
a <i>main</i> method, as we have here.

81
00:05:02,483 --> 00:05:04,815
Since this variable corresponds
to the computer's keyboard,

82
00:05:04,815 --> 00:05:08,653
this is quite logical, as a computer
only has one keyboard.

83
00:05:09,543 --> 00:05:12,689
This was the last video of our
lesson on methods in Java.

84
00:05:13,409 --> 00:05:16,622
I now invite you to answer the Quiz
and to do the exercises.

85
00:05:17,372 --> 00:05:18,703
Good luck!
