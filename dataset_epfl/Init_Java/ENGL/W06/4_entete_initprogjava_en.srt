1
00:00:05,321 --> 00:00:07,148
In a previous episode, we went over

2
00:00:07,198 --> 00:00:09,725
the three aspects
of methods.

3
00:00:09,816 --> 00:00:12,581
We also talked about
the call (of a method).

4
00:00:12,896 --> 00:00:13,922
Now, we will concentrate

5
00:00:13,922 --> 00:00:18,058
on the concept of "method header".

6
00:00:18,728 --> 00:00:21,644
Consider, for example,
the following complete example

7
00:00:21,644 --> 00:00:25,175
where we wanted to compute the
mean of two numbers.

8
00:00:25,356 --> 00:00:30,142
The header of the <i>moyenne</i> method
is this line here ("moyenne" means "mean").

9
00:00:30,562 --> 00:00:33,758
A method is characterized
by a header,

10
00:00:33,758 --> 00:00:37,848
that is, a description of its name;

11
00:00:37,947 --> 00:00:40,918
the set of parameters that the
method must receive from the rest

12
00:00:40,918 --> 00:00:44,846
of the program to be able to do the job;
and by the type of its return value

13
00:00:44,846 --> 00:00:48,110
which the method will send back
to the rest of the program.

14
00:00:48,110 --> 00:00:51,090
The syntax for the declaration
of a header is the following:

15
00:00:51,090 --> 00:00:54,598
we start by the return type
of the method,

16
00:00:54,598 --> 00:01:00,013
followed by the name we chose
for it and, between parentheses,

17
00:01:00,013 --> 00:01:02,927
its set of parameters, which
can be empty,

18
00:01:02,927 --> 00:01:06,591
parameters the method must receive from
the rest of the program in order to work.

19
00:01:06,591 --> 00:01:10,043
In this lesson, we will also add
the <i>static</i> keyword

20
00:01:10,043 --> 00:01:15,999
in front of the header;
here, in front of the return type.

21
00:01:15,999 --> 00:01:19,051
This is specific to this introductory
course,

22
00:01:19,051 --> 00:01:20,625
but will become an exception

23
00:01:20,625 --> 00:01:23,989
and will be explained in the
object-oriented programming course.

24
00:01:23,989 --> 00:01:26,409
Here are a few header examples.

25
00:01:26,409 --> 00:01:28,536
This is the header of the example

26
00:01:28,536 --> 00:01:31,981
mean-calculating method which
we went over in the previous slide.

27
00:01:31,981 --> 00:01:36,582
Here we can see the name of the
method, <i>moyenne</i>;

28
00:01:36,582 --> 00:01:42,727
the return type, <i>double</i>, preceded
by the <i>static</i> keyword here;

29
00:01:42,727 --> 00:01:45,771
and finally, between parentheses,
the two parameters

30
00:01:45,771 --> 00:01:48,601
which we pass to the <i>moyenne</i> 
method

31
00:01:48,601 --> 00:01:51,084
to compute the mean of these
two values.

32
00:01:51,084 --> 00:01:55,344
Another example here, with a method
which does not take any arguments:

33
00:01:55,348 --> 00:01:59,408
here, we simply give an empty set
of parameters to indicate

34
00:01:59,423 --> 00:02:03,229
that the method which draws
a random number

35
00:02:03,229 --> 00:02:07,709
does not require any information
from the rest of the program to do its job.

36
00:02:08,713 --> 00:02:11,062
Here are now a few tips
for good practices

37
00:02:11,062 --> 00:02:13,904
concerning writing method headers.

38
00:02:13,904 --> 00:02:16,894
First, choose relevant names,

39
00:02:16,894 --> 00:02:20,134
names which are descriptive, which
tell what the method actually does.

40
00:02:20,134 --> 00:02:24,159
This will make your code clear
and easily understandable

41
00:02:24,159 --> 00:02:25,959
and easier to maintain.

42
00:02:25,959 --> 00:02:27,630
But of course, this supposes

43
00:02:27,630 --> 00:02:31,606
that the method will do only what
it was designed to do.

44
00:02:31,606 --> 00:02:34,519
It must not have what is called
"side effects",

45
00:02:34,519 --> 00:02:37,030
that is, undesirable effects.

46
00:02:37,030 --> 00:02:42,944
For example, if you have a method
which calculates the square root of a number,

47
00:02:42,944 --> 00:02:48,613
which would be called "<i>sqrt</i>" and which
would take a parameter<i>x</i> of type <i>double</i>,

48
00:02:48,613 --> 00:02:52,357
and which would return the square
root of <i>x</i> in the form of a <i>double</i>,

49
00:02:52,357 --> 00:02:53,483
you would not expect

50
00:02:53,483 --> 00:02:57,427
this method to write the
value in the terminal,

51
00:02:57,427 --> 00:02:59,635
or to print error messages.

52
00:02:59,635 --> 00:03:02,115
You expect it to do only one thing:

53
00:03:02,115 --> 00:03:04,230
to calculate this value

54
00:03:04,230 --> 00:03:06,071
and to return it to the rest
of the program

55
00:03:06,071 --> 00:03:08,245
without polluting the outputs

56
00:03:08,245 --> 00:03:10,459
or doing anything unwanted,

57
00:03:10,459 --> 00:03:12,932
any "side effect".

58
00:03:12,932 --> 00:03:14,614
Finally, last tip,

59
00:03:14,614 --> 00:03:17,989
always start by writing the
header of your method

60
00:03:17,989 --> 00:03:20,160
before writing the body
of the method.

61
00:03:20,160 --> 00:03:24,001
Think first of the "what", that is,
the name,

62
00:03:24,001 --> 00:03:28,317
what the method needs as parameters
to work,

63
00:03:28,317 --> 00:03:30,490
and what it needs to return to
the rest of the program

64
00:03:30,490 --> 00:03:32,520
before thinking about the "how",

65
00:03:32,520 --> 00:03:35,258
that is, the specifics of the method's body.
