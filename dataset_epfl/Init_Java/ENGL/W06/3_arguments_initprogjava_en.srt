1
00:00:05,161 --> 00:00:08,911
In a previous episode,
we examined the different steps

2
00:00:08,911 --> 00:00:11,391
that follow when we call a method.

3
00:00:11,391 --> 00:00:15,261
In the examples we have seen up until now,
the arguments passed to the method were

4
00:00:15,261 --> 00:00:18,641
either simple values,
or expressions to evaluate.

5
00:00:18,641 --> 00:00:21,941
We will now go into more detail
and see what happens

6
00:00:21,941 --> 00:00:25,061
when the argument passed to the method
is a variable,

7
00:00:25,061 --> 00:00:30,540
especially in the situation where
the method modifies the parameter

8
00:00:30,540 --> 00:00:32,739
passed to it.

9
00:00:32,739 --> 00:00:36,337
So let's consider the following concrete situation.

10
00:00:37,036 --> 00:00:40,138
Suppose for example that we are
in a main program which declares

11
00:00:40,138 --> 00:00:44,138
a variable v1 of the same type as
the one expected by the method.

12
00:00:44,978 --> 00:00:50,058
When then invoke the method by passing
it an argument, the variable v1.

13
00:00:50,058 --> 00:00:55,708
We saw in the previous episode that v1 was
copied into v

14
00:00:55,708 --> 00:00:59,708
and [let's assume that] this method's purpose
is to modify v.

15
00:01:00,289 --> 00:01:03,579
So the question we now ask
ourselves is:

16
00:01:03,579 --> 00:01:07,808
when this method ends, is the
variable v1, declared in

17
00:01:07,808 --> 00:01:11,983
the main program, modified by
the method or not?

18
00:01:12,539 --> 00:01:18,369
In programming in general, we say that
v is "passed by value"

19
00:01:18,369 --> 00:01:21,409
if the answer to this question is no,

20
00:01:22,737 --> 00:01:27,217
and on the contrary, that v is
"passed by reference"

21
00:01:28,217 --> 00:01:29,667
if the answer to this question is yes.

22
00:01:30,764 --> 00:01:35,044
In the case of passing by value,
what happens is that the method

23
00:01:35,044 --> 00:01:39,864
will work on a local copy of the argument
it is passed, v1.

24
00:01:39,864 --> 00:01:45,214
So, when the method is called, when we
call it, the variable v1

25
00:01:49,030 --> 00:01:55,950
is simply copied into a local area v,
local to the function,

26
00:01:57,069 --> 00:02:01,069
and any modification of this local area
has no effect on

27
00:02:02,032 --> 00:02:03,832
the original variable

28
00:02:03,832 --> 00:02:07,682
In Java, let's first ask ourselves

29
00:02:07,682 --> 00:02:09,432
what does it means to "modify v", exactly.

30
00:02:09,432 --> 00:02:13,432
Because the answer to this question
will depend on the nature of the type [of v].

31
00:02:14,566 --> 00:02:18,096
During an earlier episode on types,
we learned that in Java,

32
00:02:18,096 --> 00:02:22,096
elementary data types were not
manipulated in the same way

33
00:02:22,096 --> 00:02:24,146
as advanced data types.

34
00:02:24,146 --> 00:02:27,886
By advanced data types, I mean for example
arrays

35
00:02:27,886 --> 00:02:29,106
or strings.

36
00:02:29,106 --> 00:02:34,316
Consequently, if I am manipulating
elementary-type data,

37
00:02:35,168 --> 00:02:39,168
modifying v has only one
possible interpretation

38
00:02:39,168 --> 00:02:43,168
If I try to modify v by assigning it
a different value,

39
00:02:43,168 --> 00:02:47,668
then the memory area named v will clearly
contain a value

40
00:02:47,668 --> 00:02:51,668
that is different from its previous
value, which actually is a value

41
00:02:51,668 --> 00:02:53,008
 of 10, here.

42
00:02:53,008 --> 00:02:55,998
On the other hand, if I am working
on advanced-type data,

43
00:02:55,998 --> 00:02:58,028
the situation is different.

44
00:02:58,028 --> 00:03:01,538
Indeed, we have seen that values of
advanced data types were manipulated

45
00:03:01,538 --> 00:03:03,968
via references, via indirections.

46
00:03:03,968 --> 00:03:07,968
For example, if I manipulate a String-type
variable, I am not manipulating

47
00:03:07,968 --> 00:03:13,668
the character striing directly,
I am manipulating a reference

48
00:03:13,668 --> 00:03:14,998
to the character string.

49
00:03:14,998 --> 00:03:18,483
Thus, when I speak of "modifying v",

50
00:03:19,268 --> 00:03:20,778
what do I mean exactly [in this case]?

51
00:03:20,778 --> 00:03:23,588
Am I modifying the reference?

52
00:03:23,588 --> 00:03:27,588
Or am I modifying the memory area
pointed to by the reference?

53
00:03:28,630 --> 00:03:32,630
Let's now place ourselves in the
situation where our method takes

54
00:03:32,630 --> 00:03:35,110
a parameter of advanced data type.

55
00:03:35,484 --> 00:03:39,484
For example, we can imagine that "type"
corresponds to an array of integers,

56
00:03:39,861 --> 00:03:45,351
and in this case the reference v is
an indirection, a reference

57
00:03:45,351 --> 00:03:48,561
to an array of integers that we can
represent in this way.

58
00:03:49,883 --> 00:03:53,771
There are thus two possibilities for
modification here.

59
00:03:54,750 --> 00:03:57,337
The one that comes most easily
to mind, perhaps,

60
00:03:57,337 --> 00:04:00,689
consists in putting a different
value into v.

61
00:04:00,689 --> 00:04:03,623
This would mean that we are
modifying the reference

62
00:04:03,623 --> 00:04:07,623
itself, which would result, since I
am modifying the reference itself,

63
00:04:07,623 --> 00:04:11,623
in making v point to another
array.

64
00:04:12,764 --> 00:04:19,134
Second possibility for modification:
through the reference, I can modify

65
00:04:19,134 --> 00:04:25,142
the referenced object, for example by
writing this, which would result in

66
00:04:25,142 --> 00:04:27,964
a modification of the second element
of the array, like this.

67
00:04:29,600 --> 00:04:33,375
So in Java, there are actually  two questions to
ask, rather than one.

68
00:04:34,456 --> 00:04:37,923
First question: if my method
modifies the reference,

69
00:04:40,429 --> 00:04:43,915
is the variable, the reference passed
as argument, modified

70
00:04:44,093 --> 00:04:46,139
at the end of the method?

71
00:04:47,309 --> 00:04:48,909
Second question:

72
00:04:50,232 --> 00:04:56,882
if I modify the object referenced by
v1 via v, is the object referenced

73
00:04:56,882 --> 00:04:59,181
by v1 modified?

74
00:05:00,803 --> 00:05:03,781
It is important to know that in Java,
there exists only passing

75
00:05:03,781 --> 00:05:07,051
by value, which means that a method
is always working

76
00:05:07,051 --> 00:05:11,051
with only a copy of the argument that
is passed to it

77
00:05:11,051 --> 00:05:12,651
when it is called.

78
00:05:12,651 --> 00:05:16,651
In the case of advanced data types, it is
indeed a reference that is copied.

79
00:05:16,651 --> 00:05:20,806
If I place myself in the situation where
I have a method "m",

80
00:05:20,806 --> 00:05:25,410
without a return type here,
which takes as parameter

81
00:05:25,964 --> 00:05:27,781
a variable of some undefined data
type named "x",

82
00:05:29,774 --> 00:05:33,774
suppose for example that in a main
program, I call this

83
00:05:33,774 --> 00:05:39,904
method in the following way, where I declare
a variable "val" of the correct type.

84
00:05:39,904 --> 00:05:44,351
I then call my method, passing it "val"
as argument.

85
00:05:45,234 --> 00:05:48,580
It is important to know that at
this moment, the value of val

86
00:05:48,580 --> 00:05:50,484
is copied into an area local to the method.

87
00:05:51,642 --> 00:05:56,442
So, let's go back to our original question,
by examining the case where "type"

88
00:05:56,442 --> 00:05:58,282
is an elementary type.

89
00:05:58,894 --> 00:06:02,604
For example, we can imagine that type
corresponds to the integer type, "int",

90
00:06:03,226 --> 00:06:08,006
and so the routine modifying v could
simply be an incrementation

91
00:06:08,006 --> 00:06:09,396
of this nature.

92
00:06:10,211 --> 00:06:16,201
In our main program, v1 would be
declared with an integer type

93
00:06:16,201 --> 00:06:20,931
and assigned an original value,
and we would invoke the method on v1.

94
00:06:21,619 --> 00:06:26,311
So in this case, we find ourselves with a
variable v1 which contains

95
00:06:27,159 --> 00:06:31,159
a value of 3 and at the moment
the method is called,

96
00:06:32,708 --> 00:06:38,288
v1 is in fact copied into an area local
to the method, named v.

97
00:06:38,288 --> 00:06:40,808
So here we would have a copy of the value.

98
00:06:40,808 --> 00:06:44,878
If we then execute the body of
the method,

99
00:06:46,513 --> 00:06:50,513
we would modify the content of v
since we are working on v

100
00:06:50,885 --> 00:06:56,293
and we see that at no time is the value
of v1 affected by this modification.

101
00:06:58,111 --> 00:07:03,517
So when the type is elementary,
the answer to this question

102
00:07:03,991 --> 00:07:06,771
is no because of the passage by value.

103
00:07:07,142 --> 00:07:10,482
So, let's now place ourselves in the
situation where our method is working

104
00:07:10,482 --> 00:07:12,692
with an advanced data type.

105
00:07:12,692 --> 00:07:16,271
As an example of advanced data type,
let's take an array of integers.

106
00:07:16,692 --> 00:07:20,052
So here, in our main program, we would
write something that

107
00:07:20,052 --> 00:07:21,672
looks like this.

108
00:07:21,672 --> 00:07:25,052
Here, we end up in the following memory
situation; so we have

109
00:07:25,052 --> 00:07:29,052
a variable v1 which contains a reference,
the address, in a way, to

110
00:07:31,696 --> 00:07:33,486
the array 1, 2, 3.

111
00:07:34,365 --> 00:07:39,195
So at the moment this method call is made,
we have seen that in Java,

112
00:07:39,195 --> 00:07:44,285
we know only passing by value, which
means that v1 will be copied

113
00:07:44,285 --> 00:07:48,285
into a local area v, local
to the method.

114
00:07:48,285 --> 00:07:53,465
So here we have a memory area v,
local to the method, and in which

115
00:07:53,465 --> 00:07:58,545
we will copy the contents of v1, i.e
the reference to the array.

116
00:07:58,545 --> 00:08:03,235
We clearly see here that both v and v1
point to the same array in memory.

117
00:08:03,922 --> 00:08:08,612
This means that for example, if I try
to modify the object

118
00:08:08,612 --> 00:08:12,612
referenced via v, so if I try to do
this in the method,

119
00:08:14,379 --> 00:08:17,434
if I modify the array
via this link,

120
00:08:19,955 --> 00:08:23,511
since both v and v1 point to the same
area,

121
00:08:23,875 --> 00:08:27,955
modifications done through
v are visible through v1.

122
00:08:28,622 --> 00:08:34,342
This means that in the case where I
carry out a routine in the method

123
00:08:34,342 --> 00:08:41,042
that modifies the referenced object, the
answer to this question is yes.

124
00:08:43,397 --> 00:08:47,397
Let's now look at the second situation,
let's try to write

125
00:08:47,397 --> 00:08:51,031
code which will modify, in the method,
the reference itself.

126
00:08:52,669 --> 00:08:56,669
So here, due to passing by value,
at the moment of the method call we

127
00:08:56,669 --> 00:09:01,609
have a copy of v1 in v, which means
that we are in this

128
00:09:01,609 --> 00:09:06,817
situation here, where we have copied
the reference in v,

129
00:09:06,817 --> 00:09:08,867
the reference to the array.

130
00:09:09,645 --> 00:09:12,925
Now, let's attempt to modify this reference.
This can be done

131
00:09:12,925 --> 00:09:18,078
for example like this: I declare another
array t, which has other

132
00:09:18,078 --> 00:09:23,305
values, and I modify the reference
itself so I am making

133
00:09:23,305 --> 00:09:25,536
this assignment here.

134
00:09:25,536 --> 00:09:30,796
So here, I am in this memory situation,
I have a variable t which

135
00:09:30,796 --> 00:09:37,671
contains a reference to another
array, so I have this link, and I make

136
00:09:37,886 --> 00:09:42,936
this assignment, meaning that I
modify the reference itself.

137
00:09:44,758 --> 00:09:48,528
This means that if I break this link,
this link doesn't exist anymore, and

138
00:09:48,528 --> 00:09:52,758
now my local variable points to
the array referenced by t.

139
00:09:53,557 --> 00:09:57,557
We thus see that with this manipulation,
since we modified the

140
00:09:57,557 --> 00:10:05,485
reference on a local copy, v1 is not
affected by this modification;

141
00:10:05,485 --> 00:10:09,835
when the execution of my method ends,
at that moment I still have

142
00:10:09,835 --> 00:10:13,835
the address value within v1.

143
00:10:14,674 --> 00:10:19,758
Which means, basically, that if I carry
out an instruction which modifies

144
00:10:19,758 --> 00:10:25,238
the reference itself, the answer to this
question is still no, still

145
00:10:25,250 --> 00:10:27,250
because of the passage by value.

146
00:10:28,471 --> 00:10:32,741
Let's illustrate this discussion with real
cases, with real examples.

147
00:10:32,741 --> 00:10:36,471
So, here we have a small main program
which begins

148
00:10:36,474 --> 00:10:41,837
by declaring a variable "val". This
variable has an elementary type,

149
00:10:41,837 --> 00:10:45,907
"int", which means that the value that
is associated to it is directly

150
00:10:45,907 --> 00:10:48,517
stored in val. There is no abstraction,
no reference.

151
00:10:48,801 --> 00:10:55,201
The second instruction invokes a method
m by passing it val as argument.

152
00:10:55,864 --> 00:10:59,864
We have seen that in Java, there exists
only passing by value, which means that

153
00:10:59,864 --> 00:11:05,474
the value of val is copied into an area
local to the method which is named x here.

154
00:11:05,474 --> 00:11:09,204
So we are in the situation where x contains
the same value

155
00:11:09,204 --> 00:11:11,894
as val, but in a different
memory area.

156
00:11:11,894 --> 00:11:16,562
Then, the first instruction of the body of
the method is executed, 

157
00:11:16,562 --> 00:11:20,338
resulting in an incrementation of x. We
thus end up with a value of 2

158
00:11:20,338 --> 00:11:24,738
for x, and when we display the value
of x, we can see that it does indeed

159
00:11:24,738 --> 00:11:26,263
contain a value of 2.

160
00:11:26,263 --> 00:11:30,187
Then, when the method ends,
if we want to display

161
00:11:30,187 --> 00:11:34,547
the value of val, we realize that this
value is left unchanged.

162
00:11:36,834 --> 00:11:40,534
It was not modified due to the passage
by value.

163
00:11:42,048 --> 00:11:45,283
All this to say that the modifications
in this case are

164
00:11:45,283 --> 00:11:49,643
effected inside the method and do
not affect the external

165
00:11:49,653 --> 00:11:50,993
variable val.

166
00:11:51,997 --> 00:11:55,217
Here is another situation, where 
we modify a reference in the body

167
00:11:55,222 --> 00:11:56,462
of a method.

168
00:11:57,434 --> 00:12:00,266
Here, we have a main program

169
00:12:00,266 --> 00:12:04,545
which declares a variable tab of
advanced type, an array of integer.

170
00:12:04,545 --> 00:12:09,532
Advanced types are manipulated via
interactions,

171
00:12:09,532 --> 00:12:12,032
we are thus in this memory
situation here,

172
00:12:14,073 --> 00:12:18,323
where tab points to an array which,
in this case, contains one single

173
00:12:18,323 --> 00:12:19,983
element containing 1.

174
00:12:21,065 --> 00:12:25,500
Then, there is the call to the method m
which is executed, and we have seen

175
00:12:25,500 --> 00:12:29,532
that there is only passing by value in 
Java, meaning that tab is copied

176
00:12:29,532 --> 00:12:31,992
into an area local to the method
which is x.

177
00:12:33,120 --> 00:12:35,900
So we are now in the situation where
we have

178
00:12:35,913 --> 00:12:40,620
copied the value of tab into x and so
x points to the same array in memory.

179
00:12:42,229 --> 00:12:44,579
When the body of the method
is executed,

180
00:12:46,587 --> 00:12:49,417
the first instruction encountered is the
one that creates a new array.

181
00:12:50,790 --> 00:12:55,697
It will thus point to the new array
in memory with another

182
00:12:55,697 --> 00:13:00,307
reference, which in this case contains
one single cell containing 100.

183
00:13:01,690 --> 00:13:06,194
The second instruction tries to modify
the reference itself, so we

184
00:13:06,226 --> 00:13:07,723
assign to x

185
00:13:10,214 --> 00:13:14,474
the address of the new array, which
results in breaking

186
00:13:14,474 --> 00:13:20,074
this link and creating a new
one to this array.

187
00:13:20,853 --> 00:13:26,823
If, now, we display the value of the
first cell of the array x,

188
00:13:28,229 --> 00:13:34,379
x[0], given the newly-created link,
obviously has a value of 100.

189
00:13:35,759 --> 00:13:42,279
Once the method has finished executing
and we display the value

190
00:13:42,285 --> 00:13:46,705
of the first cell of the tab array, we 
can see that the modification done

191
00:13:46,705 --> 00:13:52,005
on the reference itself is not
visible on the argument

192
00:13:52,020 --> 00:13:57,493
because of the passage by value and
thus the value of tab[0] remains

193
00:13:57,493 --> 00:14:00,533
unchanged and is still 1.

194
00:14:02,083 --> 00:14:06,083
So the result of the execution of this
program show us that

195
00:14:07,653 --> 00:14:14,232
modifications done within a method
on the reference itself are not

196
00:14:14,232 --> 00:14:18,732
visible outside of the method, still because
of the passage by value.

197
00:14:19,825 --> 00:14:23,825
Last situation: modification
of the referenced object in

198
00:14:23,825 --> 00:14:25,535
the body of a method.

199
00:14:25,535 --> 00:14:29,893
So we are now in the same situation
as in the previous example,

200
00:14:29,893 --> 00:14:35,686
where the main program creates an
array containing a single cell worth 1.

201
00:14:37,065 --> 00:14:43,334
When the method m is called by passing
it tab as argument, still because

202
00:14:43,334 --> 00:14:50,084
of passage by value, tab is copied into
x, where x is an area local to

203
00:14:51,876 --> 00:14:53,176
the method m.

204
00:14:53,176 --> 00:14:58,116
We can clearly see here that both tab
and x reference the same array

205
00:14:59,316 --> 00:15:04,300
So here, when we execute the body
of the method m, the first instruction

206
00:15:04,300 --> 00:15:08,660
encountered will alter the first cell of
the array pointed to by x

207
00:15:10,078 --> 00:15:16,708
which will modify this cell.

208
00:15:17,926 --> 00:15:23,128
And we can see that the modification made
on the first cell of the array x

209
00:15:24,146 --> 00:15:26,847
is also visible in tab.

210
00:15:27,286 --> 00:15:32,272
So the execution of this display instruction
will clearly display

211
00:15:32,272 --> 00:15:34,713
that x[0] has a value of 100.

212
00:15:35,913 --> 00:15:40,414
When the execution of the method ends
and we pass to the next display,

213
00:15:41,430 --> 00:15:45,430
since both tab and x point to the
same array,

214
00:15:45,430 --> 00:15:49,120
displaying the value of tab[0] will
also output 100.

215
00:15:50,481 --> 00:15:57,728
So the situation here is that the
modification made inside

216
00:15:57,728 --> 00:16:02,258
the method is also visible outside
of the method despite

217
00:16:02,258 --> 00:16:03,998
the passage by value.
Why?

218
00:16:03,998 --> 00:16:08,731
Because both the area local to the
method and the argument

219
00:16:08,731 --> 00:16:11,201
actually point to the same array.
