1
00:00:04,902 --> 00:00:08,902
In a previous episode, we learned
about the three aspects

2
00:00:08,902 --> 00:00:10,492
of methods.

3
00:00:10,498 --> 00:00:14,748
We discussed calling methods,
as well as

4
00:00:14,748 --> 00:00:17,228
what a method header is.

5
00:00:17,228 --> 00:00:19,388
In this episode, we will
concentrate specifically

6
00:00:19,388 --> 00:00:23,068
on the concept of method
definitions.

7
00:00:23,068 --> 00:00:28,198
If I go back to our usual example of
the mean calculation, the definition

8
00:00:28,198 --> 00:00:32,198
of the "moyenne" (TN: means "mean") method
is this group of lines beginning with

9
00:00:32,198 --> 00:00:36,478
the header, and comprising all the lines
here that follow the header, between braces.

10
00:00:37,175 --> 00:00:40,555
The definition of a method serves, as
its name implies,

11
00:00:40,555 --> 00:00:44,695
to define what the method must do,
that is, to specify the body

12
00:00:44,695 --> 00:00:48,405
of the method, i.e the set of instructions
which are the reason why

13
00:00:48,405 --> 00:00:52,405
we decided to isolate this method, to create
it in the first place.

14
00:00:52,809 --> 00:00:56,629
From a syntax point of view, we will
start by providing the header,

15
00:00:56,629 --> 00:01:00,529
-- as a reminder, this is the specification
of the return type followed by the name

16
00:01:00,529 --> 00:01:05,165
of the method, followed between parentheses
by the list of parameters --

17
00:01:05,165 --> 00:01:09,095
but in the definition, this header will
then be followed by a bloc which

18
00:01:09,095 --> 00:01:13,465
will contain the instructions that will
allow the method to work,

19
00:01:13,465 --> 00:01:16,465
which describe how the method will run.

20
00:01:16,465 --> 00:01:20,465
Among these instructions, we will have
one or more "return" instructions

21
00:01:20,465 --> 00:01:24,215
which will terminate the execution
of the body of the method

22
00:01:24,215 --> 00:01:29,125
If I go back to the example of the "moyenne" 
method, we can see the header

23
00:01:29,125 --> 00:01:34,445
of the method, as we have seen it in the
previous examples, followed here

24
00:01:34,445 --> 00:01:37,835
by the set of instructions which
allow the "moyenne" method to actually

25
00:01:37,835 --> 00:01:43,035
do what it is meant to do, which is reduced
here to a simple "return" statement

26
00:01:43,035 --> 00:01:47,835
which will calculate the sum of these
two parameters, x and y, and divide it by 2.

27
00:01:48,488 --> 00:01:52,718
The body of the method is thus simply
a bloc of Java code,

28
00:01:52,718 --> 00:01:57,528
that is a set of instructions between curly
braces which define

29
00:01:57,528 --> 00:02:03,298
what the method must do. And in this bloc,
we can use the parameters of

30
00:02:03,298 --> 00:02:06,828
the method as variables.

31
00:02:06,828 --> 00:02:10,828
The value returned by the method
is indicated by a particular expression,

32
00:02:10,828 --> 00:02:14,598
which is what we call a "return statement",
and which begins

33
00:02:14,598 --> 00:02:19,198
by the keyword "return" and is followed
by a Java expression that is 

34
00:02:19,198 --> 00:02:23,888
evaluated and that will define the
return value of the method.

35
00:02:23,888 --> 00:02:27,748
It must thus of course be of the same
type as the return type

36
00:02:27,748 --> 00:02:28,758
of the method.

37
00:02:28,758 --> 00:02:32,918
If I take the example of the mean calculation,
the return type we have here

38
00:02:32,918 --> 00:02:37,718
is "double", for the mean,
and so we will have,

39
00:02:37,718 --> 00:02:43,848
behind the "return" keyword, a Java
expression of type "double" which

40
00:02:43,848 --> 00:02:47,848
will be the value returned upon
calling the "moyenne" method.

41
00:02:48,688 --> 00:02:53,808
The return statement actually
does two things: it starts by defining

42
00:02:53,808 --> 00:02:58,958
the return type of the method and
then the first return statement

43
00:02:58,958 --> 00:03:04,528
ends the execution of the method
in which

44
00:03:04,528 --> 00:03:05,798
it is called.

45
00:03:06,142 --> 00:03:10,142
The return statement is sometimes
reduced to a single variable; for example

46
00:03:10,142 --> 00:03:15,772
we could come across expressions like
"return x;" or even simply

47
00:03:15,772 --> 00:03:21,102
a value, such as "return 3;".
These are only specific cases

48
00:03:21,102 --> 00:03:26,052
with simple expressions, a single
variable or a particular value,

49
00:03:26,052 --> 00:03:29,552
but it is by far not the general case and,
as we saw in the previous example,

50
00:03:29,552 --> 00:03:33,552
in the general case it is a full Java expression

51
00:03:33,552 --> 00:03:36,782
which is found after the "return" keyword.

52
00:03:38,094 --> 00:03:40,654
A few comments about return statements.

53
00:03:40,654 --> 00:03:44,618
First of all, it is easily possible to have
several return statements in the body

54
00:03:44,618 --> 00:03:49,668
of one method. For example if I have a
method here which will return 

55
00:03:49,668 --> 00:03:54,528
the maximum of two "doubles", 'a' and 'b'
received as parameters, I can write

56
00:03:54,528 --> 00:03:58,728
this method in the following way. I declare
a variable 'm' here that I will use

57
00:03:58,728 --> 00:04:02,048
to return the maximum of
'a' and 'b'.

58
00:04:02,048 --> 00:04:05,808
If 'a' is greater than 'b', then
I copy

59
00:04:05,808 --> 00:04:10,948
the value of 'a' into 'm'; otherwise,
if 'a' is lesser than or equal to 'b',

60
00:04:10,948 --> 00:04:14,948
this "if" statement jumps here and it
will of course be the value of 'b'

61
00:04:14,948 --> 00:04:16,938
which will be copied into 'm'.

62
00:04:16,938 --> 00:04:21,568
But we could absolutely have defined
this method in a more compact way,

63
00:04:21,568 --> 00:04:26,818
as "max2" here, with simply two
return statements. This works

64
00:04:26,818 --> 00:04:33,318
like that: if 'a' is greater than 'b', then we
will enter here and execute the

65
00:04:33,318 --> 00:04:37,648
"return a;" statement and so this
statement will end the execution

66
00:04:37,648 --> 00:04:42,388
of the body, and the maximum of 'a' and 'b'
in this case will be the value of 'a'.

67
00:04:42,388 --> 00:04:50,258
However, if 'a' is lesser than or equal to 'b',
the "if" statement here will jump

68
00:04:50,258 --> 00:04:56,258
to the "else" and so we will execute this
return statement here which will return to

69
00:04:56,258 --> 00:04:57,788
the rest of the program the value of 'b'.

70
00:04:58,354 --> 00:05:02,254
Second comment concerning the return
statement: as mentioned earlier,

71
00:05:02,254 --> 00:05:07,264
the return type following the "return"
keyword must be the same as the type

72
00:05:07,264 --> 00:05:09,384
declared in the header.

73
00:05:09,384 --> 00:05:14,351
For example here, if I consider a dummy
method which takes no parameter

74
00:05:14,351 --> 00:05:20,921
and which returns a "double". 
Then I cannot return

75
00:05:20,921 --> 00:05:24,921
an expression which would evaluate to
a type different from "double", for example

76
00:05:24,921 --> 00:05:29,781
here I cannot return a "boolean" value.
It would throw an error

77
00:05:29,781 --> 00:05:31,281
during compilation.

78
00:05:32,400 --> 00:05:37,040
Third comment concerning return statements:
a return statement

79
00:05:37,040 --> 00:05:42,250
must be the last instruction that the compiler
will encounter.

80
00:05:42,250 --> 00:05:45,860
There cannot be any statements beyound
the return statement.

81
00:05:45,860 --> 00:05:51,370
If we take, for example, this method whose
goal is to read a "double" [from the keyboard],

82
00:05:51,370 --> 00:05:56,930
this method does not receive any parameters;
it will first ask

83
00:05:56,930 --> 00:06:01,780
for a number, then read a number from the
standard input, the keyboard

84
00:06:01,780 --> 00:06:09,630
typically. It will then assign to a "double"
declared here as 'n' the value read

85
00:06:09,630 --> 00:06:18,420
from the keyboard, represented here as "keyb",
and will return this value 'n'.

86
00:06:18,420 --> 00:06:25,030
But we find here in the "lire" method
[TN: "lire* means "read"]


87
00:06:25,030 --> 00:06:25,910
 a display of a line break.

88
00:06:25,910 --> 00:06:30,800
This is absolutely impossible, we
cannot have such an instruction

89
00:06:30,800 --> 00:06:36,330
following a return statement.
The return statement must be the

90
00:06:36,330 --> 00:06:40,790
last statement to be executed,
otherwise the compiler will throw an error.

91
00:06:41,930 --> 00:06:45,010
Last comment concerning return statements.

92
00:06:45,010 --> 00:06:49,010
The compiler must guarantee that we can
always execute at least

93
00:06:49,010 --> 00:06:53,010
one return statement. So for example
if I take another version

94
00:06:53,010 --> 00:06:57,010
of the "lire" function that we have just
encountered, whose beginning is

95
00:06:57,010 --> 00:07:07,090
exactly the same -- we will read a "double"
from the keyboard --

96
00:07:07,090 --> 00:07:11,090
but assume that here, we only
want to return positive numbers.

97
00:07:11,090 --> 00:07:16,720
So we add a condition here,
if 'n' is strictly positive.

98
00:07:16,720 --> 00:07:22,240
If 'n' is strictly positive then we will
return 'n'. Up until now there

99
00:07:22,240 --> 00:07:27,100
is no problem. However, at this stage,
it is possible for the user

100
00:07:27,100 --> 00:07:31,580
to have entered a negative number,
for example they could easily

101
00:07:31,580 --> 00:07:36,080
have entered -1. This would cause
the "if" condition to be false

102
00:07:36,080 --> 00:07:41,790
and so we would jump over the "if" bloc,
and end up here

103
00:07:41,790 --> 00:07:46,710
by executing nothing. The compiler
will not always be able to execute

104
00:07:46,710 --> 00:07:50,110
the return statement.
It will thus throw an error.

105
00:07:50,110 --> 00:07:56,560
A possible correction for this code
would of course have been

106
00:07:56,560 --> 00:08:02,320
to bunch together the request for a number
and the return value into

107
00:08:02,320 --> 00:08:09,870
a "while" loop for example. While
'n' is lesser than or equal to 0,

108
00:08:09,870 --> 00:08:15,210
we would repeat the request for
a positive number, thus guaranteeing that

109
00:08:15,210 --> 00:08:19,440
we will always end with a "return"
when the number

110
00:08:19,440 --> 00:08:22,030
entered is strictly positive.

111
00:08:22,350 --> 00:08:26,350
More specifically, since we will start
by asking the user for the value

112
00:08:26,350 --> 00:08:30,350
before being able to test whether
this value is positive or null,

113
00:08:30,350 --> 00:08:35,080
it will actually be a "do while" loop,
which we will be able to write here.

114
00:08:35,080 --> 00:08:41,630
Then we can wonder about the condition,

115
00:08:41,630 --> 00:08:45,630
which is here to return, to stop
when we have a strictly positive

116
00:08:45,630 --> 00:08:50,700
number. This means that we will
want to loop, to repeat

117
00:08:50,700 --> 00:08:56,070
the question as long as the number
is negative or null.

118
00:08:56,070 --> 00:09:01,480
We will repeat this until we reach the condition
we wanted to have to return.

119
00:09:02,159 --> 00:09:08,729
OK, so here we will add the "return n;" and
while 'n' is not how we want it to be,

120
00:09:08,729 --> 00:09:15,949
while 'n' is negative or null, then
we will repeat, we will loop.

121
00:09:15,949 --> 00:09:24,919
We will first display the message, so, this line,
then we will read the answer,

122
00:09:24,919 --> 00:09:27,929
so we will add this line here.

123
00:09:27,929 --> 00:09:34,299
Concerning the variable declarations,
we have to declare the scanner

124
00:09:34,299 --> 00:09:41,849
and declare 'n', all these lines here,
outside the loop since

125
00:09:41,849 --> 00:09:47,579
we don't need to repeat the scanner in the
loop and we only need to

126
00:09:47,579 --> 00:09:48,919
declare 'n' once.

127
00:09:48,919 --> 00:09:53,569
So basically, this gives the following code:
we will start by declaring

128
00:09:53,569 --> 00:09:58,389
the scanner, once and for all, for the
keyboard input; then we will declare

129
00:09:58,389 --> 00:10:02,389
the variable 'n'. It must be declared
outside of the loop since we will 

130
00:10:02,389 --> 00:10:07,179
use it here to return it. We also use it in the test,
which is outside of the scope of the loop's body.

131
00:10:07,179 --> 00:10:10,809
So we declare this variable and
initialize it to a value which makes

132
00:10:10,809 --> 00:10:16,719
sense, let's say 0. Then, we write
the loop bloc here,

133
00:10:16,719 --> 00:10:20,179
the bloc which we want to repeat,
in which we will display

134
00:10:20,179 --> 00:10:24,179
the message which asks the user to enter
a number. Here, we can even 

135
00:10:24,179 --> 00:10:28,179
specify our intentions exactly so that
the user knows what to do, we can say

136
00:10:28,179 --> 00:10:32,179
that we want a strictly positive number.
Then, we read this number into 'n'

137
00:10:32,179 --> 00:10:36,179
from the keyboard and so we loop while
we haven't received the right answer,

138
00:10:36,179 --> 00:10:38,129
while 'n' is negative.

139
00:10:38,129 --> 00:10:42,129
This is how we could have corrected
the error of the missing "return"

140
00:10:42,129 --> 00:10:46,129
when 'n' was equal to or lesser than 0.

141
00:10:46,129 --> 00:10:49,489
Let's now present a few specific examples
of methods; starting with

142
00:10:49,489 --> 00:10:51,199
methods without return types.

143
00:10:51,199 --> 00:10:54,269
I must first remind you that a method
in the Java sense has nothing

144
00:10:54,269 --> 00:10:58,269
to do with a mathematical function.
A method in Java is simply a piece 

145
00:10:58,269 --> 00:11:02,269
of code that we reserved to be able to
use it, to avoid repetition,

146
00:11:02,269 --> 00:11:06,269
and in this sense, this piece of code does
not necessarily need to return

147
00:11:06,269 --> 00:11:08,119
anything to the rest of the program.

148
00:11:08,119 --> 00:11:13,029
If this is the case, then we will specify
the fact that the method returns nothing

149
00:11:13,029 --> 00:11:18,069
by using a specific return type,
the "void" type, to indicate

150
00:11:18,069 --> 00:11:20,999
that we will not return anything
to the rest of the program.

151
00:11:20,999 --> 00:11:24,999
In such a case, the "return" instruction is
now optional. We can absolutely

152
00:11:24,999 --> 00:11:30,659
include no return statement at all in the
method's body. If we really need one,

153
00:11:30,659 --> 00:11:35,509
for example in an "if" statement, in order
to stop the execution of the 

154
00:11:35,509 --> 00:11:40,219
body at a precise moment, then we
will be able to use a return statement.

155
00:11:40,219 --> 00:11:44,779
For example, let's take a method which I will 
call "afficheRacine" [TN: means "displaySquareRoot"]

156
00:11:44,779 --> 00:11:50,379
and whose job is to display the square
root of a double-type parameter received

157
00:11:50,379 --> 00:11:51,939
here and named "a".

158
00:11:51,939 --> 00:11:56,939
If 'a' is negative, then as you know, we
cannot compute the square root and thus

159
00:11:56,939 --> 00:12:00,359
there is nothing to display. So in this
case, if the condition for 'a' to be negative

160
00:12:00,359 --> 00:12:04,929
is true, then the "if" will go to this
return statement

161
00:12:04,929 --> 00:12:08,929
-- there is only a single "return" here -- and this
will thus end the execution of the method.

162
00:12:09,710 --> 00:12:15,130
Note that since the return type of the
"afficheRacine" method is "void",

163
00:12:15,130 --> 00:12:19,130
the "afficheRacine" method has nothing to
return to the rest of the program

164
00:12:19,130 --> 00:12:25,250
and you can see here that the "return"
keyword is not followed by any expression

165
00:12:25,250 --> 00:12:29,250
-- it would make no sense to have one,
we wouldn't know what to put after this "return".

166
00:12:29,250 --> 00:12:33,830
If however 'a' is positive or null, then
the "if" condition is of course false

167
00:12:33,830 --> 00:12:39,010
and at that moment, the "if" bloc
is simply ignored

168
00:12:39,010 --> 00:12:45,460
and the program will continue after
the "if" to execute the display of the

169
00:12:45,460 --> 00:12:51,830
square root of 'a'. And we then arrive to
the end of the method, where we

170
00:12:51,830 --> 00:12:56,500
did not write any return statement. The
method will end here, and it is not at all

171
00:12:56,500 --> 00:13:00,500
necessary to add any "return" here;
such a return statement is totally optional.

172
00:13:01,067 --> 00:13:05,067
Other specific example of methods:
methods without parameters.

173
00:13:05,067 --> 00:13:08,307
We already discussed these a little
but I would like to go over them again.

174
00:13:08,307 --> 00:13:12,307
These are methods to which we do not
need to supply values from the

175
00:13:12,307 --> 00:13:15,387
rest of the program in order for
these methods to work.

176
00:13:15,387 --> 00:13:18,617
And in that case, we simply need
to specify, in the header,

177
00:13:18,617 --> 00:13:22,617
the empty parameter list by writing
an opening parenthesis followed

178
00:13:22,617 --> 00:13:26,417
by a closing parenthesis with nothing
in between.

179
00:13:26,417 --> 00:13:31,577
Let's take an example of a method
whose only goal is to ask the user

180
00:13:31,577 --> 00:13:36,187
for an integer and return it
to the rest of the program.

181
00:13:36,187 --> 00:13:41,467
An example of a call to this method could
be as follows: here, we have a variable

182
00:13:41,467 --> 00:13:48,047
of integer type which we initialize with the
result of the call to

183
00:13:48,047 --> 00:13:52,707
"saisieEntier" [TN: means "inputInteger"].
This method doesn't need to receive anything

184
00:13:52,707 --> 00:13:58,087
from the rest of the program; it can work
completely autonomously by declaring

185
00:13:58,087 --> 00:14:01,847
a variable locally in which it will store
the user's answer.

186
00:14:01,847 --> 00:14:07,237
It will display the request to enter an integer
for the user,

187
00:14:07,237 --> 00:14:13,337
read the integer input by the user on the
keyboard, and put it into the temporary,

188
00:14:13,337 --> 00:14:18,027
local variable, named "i" here, and
return this variable 'i'

189
00:14:18,027 --> 00:14:19,697
to the rest of the program

190
00:14:20,558 --> 00:14:25,128
You can clearly see that to do all of this,
the method did not need to receive

191
00:14:25,128 --> 00:14:29,878
any information from the rest of the program,
it is thus a method without parameters.

192
00:14:31,231 --> 00:14:36,071
As a handy aside: up until now,
we only needed the scanner

193
00:14:36,071 --> 00:14:39,291
in the "main" method. We only had one method
up until now and we used

194
00:14:39,291 --> 00:14:42,401
the scanner in the "main" method.
That is why

195
00:14:42,401 --> 00:14:44,311
we declared it there, in the "main" method.

196
00:14:44,311 --> 00:14:49,661
Here, we need it in another method,
the "saisieEntier" method.

197
00:14:49,661 --> 00:14:54,691
So of course we could declare a scanner
like this in the

198
00:14:54,691 --> 00:14:58,691
"saisieEntier" method, but it is not really
a good idea because each time you

199
00:14:58,691 --> 00:15:02,481
call "saisieEntier" -- and the idea of this
function is that it will be called several times --

200
00:15:02,481 --> 00:15:07,201
every time you call it, every time you
use the "saisieEntier" method

201
00:15:07,201 --> 00:15:11,201
then this line which declares the
scanner will be executed every time

202
00:15:11,201 --> 00:15:16,191
and you will re-declare a keyboard
every time. However, we have only

203
00:15:16,191 --> 00:15:21,031
one keyboard, so the idea would be
to share this keyboard across the whole

204
00:15:21,031 --> 00:15:26,631
program and thus to put this line here outside
of the class, outside of the method here.

205
00:15:26,631 --> 00:15:33,381
So we find the declaration here, "static
scanner clavier etc.", with the link to

206
00:15:33,381 --> 00:15:37,791
the keyboard "System.in". We will add,
for reasons which will be explained

207
00:15:37,791 --> 00:15:42,541
in the object-oriented course, the
"private" keyword here,

208
00:15:42,541 --> 00:15:43,561
for good practice.

209
00:15:43,561 --> 00:15:48,781
At this stage, if you need a scanner in other
methods than the "main" method,

210
00:15:48,781 --> 00:15:52,341
I encourage you to follow
this syntax here.

211
00:15:53,250 --> 00:15:58,460
To finish, I would like to talk about the
"main" method. Yes, it is also a method!

212
00:15:58,460 --> 00:16:03,960
It is simply a method whose name and
header are imposed.

213
00:16:03,960 --> 00:16:08,820
It is the method with which any Java
program will start, 

214
00:16:08,820 --> 00:16:12,820
it will be the first method to be executed
when we start the program.

215
00:16:12,820 --> 00:16:16,820
The header imposed for the "main" method
is as follows where, without

216
00:16:16,820 --> 00:16:21,810
going too much into detail, we can see that "main"
takes, as an array of character arrays,

217
00:16:21,810 --> 00:16:27,520
a list of arguments that would come
from the outside,

218
00:16:27,520 --> 00:16:31,520
that would come from the program which
calls another program. But this

219
00:16:31,520 --> 00:16:35,520
would lead us a bit too far, and we will
not use it in this class.

220
00:16:35,520 --> 00:16:40,450
All that you need to know is that the
prototype of "main" must be

221
00:16:40,450 --> 00:16:41,780
the one indicated here.
