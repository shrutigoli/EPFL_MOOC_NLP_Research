1
00:00:05,141 --> 00:00:07,773
Hello and welcome to this new lesson

2
00:00:07,773 --> 00:00:10,428
of our course, introduction to
Java programming.

3
00:00:10,428 --> 00:00:13,454
The objective of this new lesson
is to teach you

4
00:00:13,454 --> 00:00:16,134
to organize your code by
modularizing it

5
00:00:16,134 --> 00:00:17,963
using your own functions.

6
00:00:17,963 --> 00:00:21,261
Functions are an aspect
of processing,

7
00:00:21,261 --> 00:00:23,972
just like expressions
and operators

8
00:00:23,972 --> 00:00:27,554
and control structures, which
we studied previously.

9
00:00:27,554 --> 00:00:32,471
Functions operate, in general,
on data,

10
00:00:32,471 --> 00:00:37,647
and the data will influence how these
functions work.

11
00:00:38,297 --> 00:00:40,709
Up until now, the programs
that you have written

12
00:00:40,709 --> 00:00:43,093
were made up of a linear sequence
of instructions

13
00:00:43,093 --> 00:00:44,957
with no global organization

14
00:00:44,957 --> 00:00:47,511
and with no sharing of repeated tasks.

15
00:00:47,511 --> 00:00:51,144
For example, if the task consisting
in asking the user for a number,

16
00:00:51,144 --> 00:00:53,750
as the following code does,

17
00:00:53,750 --> 00:00:56,591
had to be executed several times
in our program,

18
00:00:56,591 --> 00:00:59,593
for example, once to ask for a number
of points,

19
00:00:59,593 --> 00:01:03,634
once for a time, and once for an age,
what would you do?

20
00:01:04,514 --> 00:01:06,975
You might be tempted
to copy the code

21
00:01:06,975 --> 00:01:09,861
as many times as necessary to
the appropriate places,

22
00:01:09,861 --> 00:01:13,690
but of course, this is a very
bad solution.

23
00:01:13,690 --> 00:01:16,318
One must never duplicate
code when programming.

24
00:01:16,318 --> 00:01:18,498
Do not be tempted by the copy-paste.

25
00:01:18,498 --> 00:01:22,534
What you would like to copy should
be put into a function.

26
00:01:23,504 --> 00:01:25,702
Why must one never duplicate
code?

27
00:01:25,702 --> 00:01:29,054
It makes the program
unnecessarily long,

28
00:01:29,054 --> 00:01:34,206
hard to understand and,
especially, hard to maintain.

29
00:01:34,479 --> 00:01:38,215
One would have to apply every
modification to each of the copies.

30
00:01:38,215 --> 00:01:41,001
This is why every
good programming language

31
00:01:41,001 --> 00:01:43,785
provides means to allow

32
00:01:43,785 --> 00:01:45,483
reusing parts of a program.

33
00:01:45,483 --> 00:01:49,468
And in Java, this is done by using
what we call functions.

34
00:01:49,468 --> 00:01:51,803
Let's consider for example
the following program:

35
00:01:51,803 --> 00:01:54,432
This program starts by asking

36
00:01:54,432 --> 00:01:57,446
for the number of points obtained
by a first player,

37
00:01:57,446 --> 00:01:59,953
using, as you can see,
a <i>do..while</i> loop

38
00:01:59,953 --> 00:02:03,438
to force the user to input
a value between 0 and 100.

39
00:02:03,438 --> 00:02:07,832
Then, the program asks the user
for the time taken by the first player

40
00:02:07,832 --> 00:02:10,668
which will be, in this case,
a value between 1 and 60.

41
00:02:10,668 --> 00:02:13,689
And from this number of points
and this time,

42
00:02:13,689 --> 00:02:17,240
the program calculates the score
of the first player.

43
00:02:17,240 --> 00:02:22,165
Then, the program repeats these
operations for a second player.

44
00:02:22,165 --> 00:02:26,272
It asks for a number of points, a time,

45
00:02:26,272 --> 00:02:29,342
and calculates the score of the second player.

46
00:02:29,342 --> 00:02:35,339
Finally, the program compares

47
00:02:35,339 --> 00:02:38,141
the scores of the first and second
players,

48
00:02:38,141 --> 00:02:41,899
to display which of these players has won.

49
00:02:41,899 --> 00:02:43,963
You can see that in this
program,

50
00:02:43,963 --> 00:02:47,231
the code which consists in asking 
for a number of points, a time,

51
00:02:47,231 --> 00:02:50,536
and calculating a score from 
the number of points and the time

52
00:02:50,536 --> 00:02:52,748
is repeated twice in the program,

53
00:02:52,748 --> 00:02:54,768
once for each player.

54
00:02:54,768 --> 00:02:57,366
In such a case,
one must use a function

55
00:02:57,366 --> 00:03:00,124
to avoid code duplication.

56
00:03:00,124 --> 00:03:03,814
For this, I will first put to the side
the code that I am interested in,

57
00:03:03,814 --> 00:03:07,297
that is, the code which asks for
a number of points, a time

58
00:03:07,297 --> 00:03:09,431
and which calculates a score.

59
00:03:09,431 --> 00:03:12,280
I will put this code at the
end of the program,

60
00:03:12,280 --> 00:03:16,374
but before the last closing brace.

61
00:03:16,374 --> 00:03:19,254
I will put this code between
an opening brace

62
00:03:19,254 --> 00:03:21,369
and a closing brace.

63
00:03:21,369 --> 00:03:25,323
This code will constitute what
we call the body

64
00:03:25,323 --> 00:03:29,337
of my function-to-be.

65
00:03:29,337 --> 00:03:33,151
We will have to name this body.

66
00:03:33,151 --> 00:03:39,304
I will call it <i>saisieEtCalcul</i>
(<i>inputAndCalculate</i>).

67
00:03:39,304 --> 00:03:42,854
This will allow us to refer to it in
the rest of the program,

68
00:03:42,854 --> 00:03:48,916
and it will be the name
of my function-to-be.

69
00:03:50,069 --> 00:03:53,129
My function must give the score
that it will calculate

70
00:03:53,129 --> 00:03:54,708
to the rest of the program.

71
00:03:54,708 --> 00:03:59,130
For this, I will start by removing
any references to the first player,

72
00:03:59,130 --> 00:04:03,374
since my function will be
valid for any player.

73
00:04:03,374 --> 00:04:07,283
I will add the <i>return</i> keyword to
the end of my function,

74
00:04:07,283 --> 00:04:10,875
followed by the name of the
variable <i>scoreJoueur</i> (TN: <i>playerScore</i>)

75
00:04:10,875 --> 00:04:14,495
to indicate that my function
must return the value

76
00:04:14,495 --> 00:04:16,602
contained in the <i>scoreJoueur</i> variable.

77
00:04:16,602 --> 00:04:19,469
Don't worry, we will go over
this in detail

78
00:04:19,469 --> 00:04:21,152
in the rest of the lecture.

79
00:04:21,152 --> 00:04:26,144
The <i>scoreJoueur</i> variable was
defined with a <i>double</i> type,

80
00:04:26,144 --> 00:04:29,735
and so the function will return a
value of type double.

81
00:04:29,735 --> 00:04:32,526
We must indicate this to
the rest of the program,

82
00:04:32,526 --> 00:04:36,775
and this is done by adding <i>double</i>
before the name of the function.

83
00:04:37,623 --> 00:04:39,555
Another aspect of functions
is that they can use

84
00:04:39,555 --> 00:04:42,973
values given by the rest of the
program to work.

85
00:04:42,973 --> 00:04:46,174
Our function, <i>saisieEtCalcul</i>,
is relatively simple,

86
00:04:46,174 --> 00:04:48,278
it doesn't need any such values.

87
00:04:48,278 --> 00:04:52,758
To indicate this, we add,
after the name of the function,

88
00:04:52,758 --> 00:04:55,338
opening and closing parentheses.

89
00:04:55,338 --> 00:04:59,833
Now, all I need to do is add the <i>static</i>
keyword to the beginning of this line,

90
00:05:00,537 --> 00:05:03,967
for reasons we will see later on
in this course.

91
00:05:03,967 --> 00:05:07,187
That's it! We have created
our first function.

92
00:05:07,567 --> 00:05:10,093
I will now use
my <i>saisieEtCalcul</i> function 

93
00:05:10,093 --> 00:05:12,426
to ask for a number of points,
a time,

94
00:05:12,426 --> 00:05:14,703
and to calculate the score of the first player.

95
00:05:14,703 --> 00:05:17,883
For this, I will return to the place
where I had extracted the code

96
00:05:17,883 --> 00:05:21,547
that I used to create my function,
that is, here.

97
00:05:21,547 --> 00:05:26,928
I will declare a variable <i>scoreJoueur1</i>
(<i>player1Score</i>)

98
00:05:27,248 --> 00:05:30,341
which I will initialize
with the value given

99
00:05:30,341 --> 00:05:32,314
by the <i>saisieEtCalcul</i> function.

100
00:05:32,314 --> 00:05:36,559
To do this, I will indicate
the name of the function

101
00:05:37,768 --> 00:05:41,780
followed by opening and
closing parentheses.

102
00:05:41,780 --> 00:05:47,026
This instruction initializes the 
<i>scoreJoueur1</i> variable

103
00:05:47,026 --> 00:05:50,725
with the value given by the
<i>saisieEtCalcul</i> function.

104
00:05:50,725 --> 00:05:53,473
This use of the <i>saisieEtCalcul</i>
function

105
00:05:53,473 --> 00:05:57,888
is known as a <i>function call</i>.

106
00:06:00,035 --> 00:06:01,711
I can do exactly the same thing

107
00:06:01,711 --> 00:06:03,789
to initialize the second player's
score.

108
00:06:03,789 --> 00:06:06,248
I can replace all of this code

109
00:06:08,238 --> 00:06:12,847
by a simple call to my
<i>saisieEtCalcul</i> function.

110
00:06:20,281 --> 00:06:22,669
And you can see now
that the program

111
00:06:22,669 --> 00:06:24,494
is a lot more concise.

112
00:06:24,494 --> 00:06:26,951
Creating the <i>saisieEtCalcul</i>
function allowed me

113
00:06:26,951 --> 00:06:28,600
to avoid duplicating code.

114
00:06:28,600 --> 00:06:30,700
It is also interesting, however,
to create a function

115
00:06:30,700 --> 00:06:34,798
to be able to focus on a somewhat
difficult part of the program,

116
00:06:34,798 --> 00:06:37,725
such as, here, the calculation
of a player's score.

117
00:06:40,784 --> 00:06:45,148
As before, I will extract the
code I am interested in,

118
00:06:45,148 --> 00:06:48,540
put it in between braces,

119
00:06:50,778 --> 00:06:53,741
and my new function will return
the player's score,

120
00:06:53,741 --> 00:06:56,847
a value of type <i>double</i>.

121
00:06:56,847 --> 00:07:00,095
I will name my new function,
simply, <i>score</i>.

122
00:07:00,095 --> 00:07:03,092
For now I will put
opening and closing parentheses

123
00:07:03,092 --> 00:07:06,604
after the name of the function.

124
00:07:06,604 --> 00:07:12,087
As before, my function
will return the player's score,

125
00:07:12,087 --> 00:07:15,376
thanks to the <i>return</i>
keyword.

126
00:07:19,012 --> 00:07:21,819
But the difference, compared to what
we had before,

127
00:07:21,819 --> 00:07:25,253
is that this function now needs

128
00:07:25,253 --> 00:07:28,950
the variables <i>nbPoints</i>
and <i>temps</i> (TN : <i>time</i>).

129
00:07:29,540 --> 00:07:32,837
So in this case, I will
add these variables

130
00:07:32,837 --> 00:07:35,524
between these parentheses here,

131
00:07:36,443 --> 00:07:39,931
which will constitute what we call

132
00:07:39,931 --> 00:07:43,699
the parameters of the function.

133
00:07:43,699 --> 00:07:47,227
I will return, again, to the place
where I extracted the code

134
00:07:47,227 --> 00:07:51,413
to create my function, and
call my function there instead.

135
00:07:52,272 --> 00:07:55,222
I can do that here, for example,

136
00:07:56,794 --> 00:08:00,030
I will call my function by supplying
it the values

137
00:08:00,030 --> 00:08:02,656
of the variable <i>nbPoints</i>

138
00:08:06,302 --> 00:08:10,164
and of the variable <i>temps</i>.
This is how it's done.

139
00:08:11,625 --> 00:08:15,243
To sum up, I first identified the code

140
00:08:15,243 --> 00:08:17,846
that was to be put into a function.

141
00:08:17,846 --> 00:08:22,222
I extracted this code to create
my new function,

142
00:08:22,222 --> 00:08:24,918
which I named.

143
00:08:24,918 --> 00:08:28,456
I identified what we needed
as inputs to the function

144
00:08:28,456 --> 00:08:30,767
for the function to work.

145
00:08:30,767 --> 00:08:34,205
I also identified what my function had
to return

146
00:08:34,205 --> 00:08:36,583
to the rest of the program.

147
00:08:36,583 --> 00:08:41,780
Now I can replace the part
of code that I have extracted

148
00:08:41,780 --> 00:08:44,672
by a call to my function.

149
00:08:45,917 --> 00:08:48,860
A function is thus
a reusable fragment of a program,

150
00:08:48,860 --> 00:08:51,209
like the <i>saisieEtCalcul</i> function,

151
00:08:51,209 --> 00:08:53,613
or important as-is,
like the <i>score</i> function.

152
00:08:53,613 --> 00:08:57,863
It is characterized by a body,
which is the program fragment

153
00:08:57,863 --> 00:09:01,421
which is reused or emphasized.

154
00:09:01,421 --> 00:09:04,750
It is characterized also by its name

155
00:09:04,750 --> 00:09:07,832
which will allow us to refer
to that function.

156
00:09:07,832 --> 00:09:12,823
It can have parameters, which are the
set of variables

157
00:09:12,823 --> 00:09:17,945
external to the function and which the
body needs to work.

158
00:09:17,945 --> 00:09:21,632
The function can also
return a value,

159
00:09:21,632 --> 00:09:24,803
and this value must have a type.

160
00:09:25,793 --> 00:09:30,854
Finally, the use of a function
in the rest of the program

161
00:09:30,854 --> 00:09:34,303
is known as a function call.

162
00:09:34,876 --> 00:09:38,183
In  object-oriented languages
such as Java,

163
00:09:38,183 --> 00:09:41,011
the term <i>method</i>
is usually used

164
00:09:41,011 --> 00:09:42,961
in place of <i>function</i>.

165
00:09:42,961 --> 00:09:48,006
From now on, we will say
<i>method</i> rather than <i>function</i>.

166
00:09:48,006 --> 00:09:50,343
A method thus has three aspects.

167
00:09:50,343 --> 00:09:54,079
First, its header, which 
we can see as a summary

168
00:09:54,079 --> 00:09:55,623
of what the method does,

169
00:09:55,623 --> 00:09:58,207
since it is made of its name,

170
00:09:58,973 --> 00:10:03,408
of its parameters,
which correspond to the values

171
00:10:03,408 --> 00:10:07,162
which the method needs
to work,

172
00:10:07,162 --> 00:10:12,576
and of the type of value which
the method will return.

173
00:10:12,948 --> 00:10:15,872
The second aspect is the
definition of the method,

174
00:10:15,872 --> 00:10:18,026
which starts with the header,

175
00:10:18,026 --> 00:10:21,051
but which is also made up of the body

176
00:10:23,799 --> 00:10:26,797
of the method,
which contains the code

177
00:10:26,797 --> 00:10:30,242
which will be executed
when we use the method.

178
00:10:31,182 --> 00:10:35,838
The last aspect is the use
of the method,

179
00:10:35,838 --> 00:10:40,763
or its call,
where we will use the method

180
00:10:40,763 --> 00:10:44,722
by giving it actual values for its
parameters,

181
00:10:46,342 --> 00:10:50,020
and where the method will usually
return a value

182
00:10:51,180 --> 00:10:56,356
that we will be able to use, for example,
to initialize a variable.

183
00:10:56,726 --> 00:10:59,676
In practice, the developer,

184
00:11:00,286 --> 00:11:03,596
that is, the person who will write
the definition of the method,

185
00:11:03,596 --> 00:11:07,931
is not necessarily the same person as the
programmer

186
00:11:08,731 --> 00:11:11,826
who will use the method.

187
00:11:11,826 --> 00:11:16,895
The programmer using the method does 
not need to know its body.

188
00:11:16,895 --> 00:11:19,065
All that he needs to know

189
00:11:19,065 --> 00:11:22,243
is its header, to be able to call it.

190
00:11:22,643 --> 00:11:30,761
The header thus acts as a link between 
the programmer using a functionality

191
00:11:30,761 --> 00:11:32,523
and the developer of this functionality.

192
00:11:32,523 --> 00:11:38,760
In Java, we speak of APIs, for
<i>application progamming interfaces</i>

193
00:11:38,760 --> 00:11:42,835
which describe the interfaces for
using a set of data.

194
00:11:43,835 --> 00:11:48,751
The programmer must respect
the header of the method

195
00:11:48,751 --> 00:11:50,320
when he calls the method,

196
00:11:50,320 --> 00:11:53,020
and the developer will ensure

197
00:11:53,020 --> 00:11:56,988
that the header corresponds to the problem
that the user wishes to solve

198
00:11:56,988 --> 00:11:59,059
by calling the method.
