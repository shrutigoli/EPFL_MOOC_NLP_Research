1
00:00:05,539 --> 00:00:09,539
In a previous episode, we introduced
the notion of functions, of methods,

2
00:00:09,539 --> 00:00:12,029
and their use in programming.

3
00:00:12,029 --> 00:00:14,869
Today, we will focus on what happens

4
00:00:14,869 --> 00:00:17,129
when we use, when we call a method.

5
00:00:17,129 --> 00:00:20,759
Basically, at this stage, we know that
the concept of a method is

6
00:00:20,759 --> 00:00:25,389
associated to three aspects: the header,
the definition and the call.

7
00:00:25,389 --> 00:00:29,719
And today, we will look in detail
into what happens

8
00:00:29,719 --> 00:00:30,669
at the call.

9
00:00:31,157 --> 00:00:33,687
Let's go back to our example
on calculating means.

10
00:00:33,687 --> 00:00:37,467
Here, we have a little main program
which asks

11
00:00:37,467 --> 00:00:40,447
the user to input two grades.

12
00:00:40,447 --> 00:00:46,437
These two grades are input by the
user via the keyboard,

13
00:00:47,090 --> 00:00:50,380
and the mean of these two
grades is displayed.

14
00:00:50,797 --> 00:00:56,207
The calculation of the mean is done
here by calling a method,

15
00:00:56,207 --> 00:00:57,807
the "moyenne" method.
[TN: "moyenne" means "mean"]

16
00:00:57,807 --> 00:01:01,007
And we will now study the mechanisms
involved in such a call.

17
00:01:01,283 --> 00:01:05,073
Here, we have a real example of a method
call, where the method called

18
00:01:05,073 --> 00:01:09,073
is "moyenne", which we call by
passing two arguments to it,

19
00:01:09,073 --> 00:01:13,073
in the form of expressions which
will of course correspond

20
00:01:13,073 --> 00:01:18,293
respectively to the two parameters
of the method.

21
00:01:18,980 --> 00:01:22,720
Note that we usually name "parameters"
the data which

22
00:01:22,720 --> 00:01:26,380
the method needs to work as described
in the header of the method,

23
00:01:26,380 --> 00:01:31,250
and we name "arguments" the actual data
passed to the method

24
00:01:31,250 --> 00:01:34,060
at the moment it is called.

25
00:01:34,266 --> 00:01:39,496
So the goal here is to examine
what happens at the moment a call

26
00:01:39,496 --> 00:01:40,826
like this is made.

27
00:01:42,464 --> 00:01:47,604
The first step that is executed actually
consists in evaluating

28
00:01:48,840 --> 00:01:53,380
the different arguments and in Java, this
evaluation will systematically be done

29
00:01:53,380 --> 00:01:54,460
left-to-right.

30
00:01:54,460 --> 00:01:58,460
So here, the first argument
is evaluated.

31
00:01:59,090 --> 00:02:03,090
The expression is evaluated, which will
return a value of 2.3.

32
00:02:03,970 --> 00:02:04,840
Second expression.

33
00:02:05,570 --> 00:02:08,210
This will produce a value of 4.25.

34
00:02:09,099 --> 00:02:14,899
Then, second step, a link will
have to be established

35
00:02:14,899 --> 00:02:19,319
between these arguments and the
parameters of the method.

36
00:02:19,791 --> 00:02:22,321
This is what happens during the
second step.

37
00:02:22,321 --> 00:02:27,171
So, during the second step, the
parameter x will be matched with the result

38
00:02:27,171 --> 00:02:32,541
of the first expression. x will be worth 2.3.

39
00:02:32,541 --> 00:02:38,291
And y will be matched with the
evaluation of the second 

40
00:02:38,291 --> 00:02:40,461
expression: 4.25.

41
00:02:40,461 --> 00:02:45,701
We are thus in the situation where the
parameters x and y have

42
00:02:45,701 --> 00:02:49,701
actual values with which the method
will now be able

43
00:02:49,701 --> 00:02:52,051
to work and run.

44
00:02:53,529 --> 00:02:57,529
Third step: the body of the method
is executed.

45
00:02:57,529 --> 00:03:03,769
Here, the body consists in a single
instruction which is the return,

46
00:03:03,769 --> 00:03:06,789
the return statement right here.

47
00:03:07,777 --> 00:03:11,547
So here, the body doesn't actually
execute anything in particular other

48
00:03:11,547 --> 00:03:12,567
than the return statement.

49
00:03:14,483 --> 00:03:15,793
Fourth step,

50
00:03:18,142 --> 00:03:23,092
the expression which will serve as
a return value will now

51
00:03:23,092 --> 00:03:24,202
be evaluated.

52
00:03:24,610 --> 00:03:29,600
So basically, (x+y)/2 will be
calculated,

53
00:03:30,387 --> 00:03:33,287
producing the following result.

54
00:03:36,081 --> 00:03:40,081
And this value is now returned by
the method to make it

55
00:03:40,081 --> 00:03:42,521
available to the program
that called it.

56
00:03:42,521 --> 00:03:43,601
So actually,

57
00:03:45,310 --> 00:03:48,110
this whole method call is replaced

58
00:03:49,451 --> 00:03:55,301
by the result returned by the method.

59
00:03:56,266 --> 00:03:58,046
So last step,

60
00:04:00,500 --> 00:04:04,500
z takes a value of 3.275.

61
00:04:06,647 --> 00:04:10,087
We have thus seen the five steps
that usually occur

62
00:04:10,087 --> 00:04:11,697
when we call a method.

63
00:04:11,697 --> 00:04:15,235
First step: the expressions which
are passed as arguments

64
00:04:15,235 --> 00:04:17,025
to the method are evaluated.

65
00:04:17,025 --> 00:04:22,265
Second, the values of these expressions
are assigned to the parameters

66
00:04:22,265 --> 00:04:23,305
of the method.

67
00:04:23,305 --> 00:04:26,735
The method then has access to all
the information that

68
00:04:26,735 --> 00:04:30,355
it needs to work, and its body can be
executed.

69
00:04:30,355 --> 00:04:35,135
Fourth step: the expression which follows
the first return statement encountered

70
00:04:35,135 --> 00:04:39,135
during execution is evaluated and
the result of the evaluation of this

71
00:04:39,135 --> 00:04:43,135
expression is then returned as
the result of the call.

72
00:04:43,135 --> 00:04:47,135
These five steps occur in the most general
case; there are situations

73
00:04:47,135 --> 00:04:49,815
where the process is somewhat simplified.

74
00:04:49,815 --> 00:04:54,715
We know that in the most general case
a method needs

75
00:04:54,715 --> 00:04:58,225
parameters, input data, and produces
a result as output.

76
00:04:59,989 --> 00:05:04,809
However, there are some situations where
the method does not need any

77
00:05:04,809 --> 00:05:08,189
input data. In such a case, of course,
steps one and two,

78
00:05:08,189 --> 00:05:11,529
which consist in evaluating the expressions
passed as arguments and assigning

79
00:05:11,529 --> 00:05:15,179
them to the parameters, no longer apply
(for a method without arguments).

80
00:05:15,179 --> 00:05:20,229
Then, there are situations where there
is no output data, where the method

81
00:05:20,229 --> 00:05:24,229
returns no result. And in this case, the
steps which consist in

82
00:05:24,737 --> 00:05:29,217
evaluating the expression following the
return statement and returning this result,

83
00:05:29,217 --> 00:05:31,077
i.e. steps 4 and 5, do not occur.

84
00:05:32,271 --> 00:05:36,271
A method can easily call another method.
This is the case in this

85
00:05:36,271 --> 00:05:42,551
little example where you have a "afficheScore"
(TN: means "displayScore") method which

86
00:05:42,551 --> 00:05:48,291
takes as parameters a player, identified by
an integer, a number of points won

87
00:05:48,291 --> 00:05:53,721
by the player and the time he spent playing,
and which will display

88
00:05:53,721 --> 00:05:54,881
the player's score.

89
00:05:55,163 --> 00:05:59,773
Here, it so happens that the score is
calculated according to the number

90
00:05:59,773 --> 00:06:04,613
of points and the time spent, and the
calculation is done by a method.

91
00:06:05,077 --> 00:06:10,367
The method is defined elsewhere

92
00:06:10,367 --> 00:06:14,367
and takes as parameter the number of
points and the game time.

93
00:06:15,796 --> 00:06:19,176
You now know the different steps which
are executed

94
00:06:19,176 --> 00:06:22,486
when a method is called in a program, and you
now can see

95
00:06:22,486 --> 00:06:26,486
a little diagram which summarizes
these various steps.

96
00:06:26,486 --> 00:06:30,486
Here, we have a method "f"
called by a method "g".

97
00:06:30,975 --> 00:06:36,815
The match between the parameters
of the method and the calling arguments

98
00:06:36,815 --> 00:06:38,865
is done at the moment of the
method call.

99
00:06:38,865 --> 00:06:43,905
So here, when we call the method, the
argument is copied into the parameter

100
00:06:43,905 --> 00:06:47,905
of the method which uses this to
fulfill its job.

101
00:06:47,905 --> 00:06:52,735
In the most general case, the method
calculated a return value

102
00:06:52,735 --> 00:06:56,865
and this return value is transmitted to
the calling method which will be able

103
00:06:56,865 --> 00:06:59,435
to use it to carry out its instructions.

104
00:06:59,838 --> 00:07:02,878
You will no doubt have noticed all
along this episode that

105
00:07:02,878 --> 00:07:06,288
there is a certain jargon, a terminology
associated to a method call.

106
00:07:06,288 --> 00:07:08,838
Let's now summarize this jargon.

107
00:07:08,838 --> 00:07:13,388
You will have understood that when I
speak of "calling a method", I mean

108
00:07:13,388 --> 00:07:17,388
that I use the method; here, I am using
the method f to calculate

109
00:07:17,388 --> 00:07:20,678
a result that I then assign
to a variable x.

110
00:07:20,678 --> 00:07:25,238
When I speak of "passing a value"
as argument to a method, I mean

111
00:07:25,238 --> 00:07:30,108
that this value is simply copied into
a parameter of the method.

112
00:07:30,108 --> 00:07:34,108
And finally, when I say that a method
"returns" the value of y, for example,

113
00:07:34,108 --> 00:07:38,108
I mean that the expression of the function
call will simply be

114
00:07:38,108 --> 00:07:40,868
replaced by the returned value.

115
00:07:40,868 --> 00:07:44,308
So if we take a real example now,
suppose that we have a 

116
00:07:44,308 --> 00:07:47,618
method "f" whose last instruction
is this one

117
00:07:47,812 --> 00:07:52,732
Suppose that this method is called
like so, and that at the moment

118
00:07:52,732 --> 00:07:59,562
of the call, the value of y is 5.
To say that the method

119
00:07:59,562 --> 00:08:04,212
returns the value of y -- that is, 5 --
is the same as to say that we simply

120
00:08:04,212 --> 00:08:08,212
replace this call by the return value,
i.e. 5.

121
00:08:08,212 --> 00:08:13,232
And so, I can equally say "cos(0) returns
cosine of zero",

122
00:08:13,232 --> 00:08:17,232
or "cos(0) returns 1", for example.
