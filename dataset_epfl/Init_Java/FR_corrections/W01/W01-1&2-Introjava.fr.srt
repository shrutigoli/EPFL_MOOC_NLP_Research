1
00:00:05,161 --> 00:00:07,658
La programmation consiste
à écrire des programmes

2
00:00:07,658 --> 00:00:11,577
c'est-à-dire une séquence d'instructions
qui vont être exécutées par l'ordinateur.

3
00:00:11,577 --> 00:00:14,493
Pour une tâche donnée, 
un programmeur doit créer un programme

4
00:00:14,493 --> 00:00:16,268
qui va réaliser cette tâche.

5
00:00:16,268 --> 00:00:19,032
Mais c'est le microprocesseur 
de l'ordinateur

6
00:00:19,043 --> 00:00:22,839
qui va exécuter les instructions 
qui constituent le programme.

7
00:00:22,922 --> 00:00:27,168
Or, le microprocesseur ne peut exécuter 
que des instructions très simples

8
00:00:27,168 --> 00:00:28,906
qui sont trop élémentaires

9
00:00:28,906 --> 00:00:31,188
pour être utilisées efficacement 
par un humain.

10
00:00:31,646 --> 00:00:35,101
Heureusement un programmeur 
peut écrire un programme

11
00:00:35,101 --> 00:00:39,063
dans un langage de programmation 
accessible à un humain comme le Java

12
00:00:39,087 --> 00:00:42,377
et qui va pouvoir être traduit 
automatiquement en instructions

13
00:00:42,377 --> 00:00:45,804
que le microprocesseur
peut comprendre et exécuter.

14
00:00:46,621 --> 00:00:51,267
Plus précisément, 
un programme en langage Java

15
00:00:51,267 --> 00:00:53,437
est un ou plusieurs fichiers textes.

16
00:00:53,535 --> 00:00:57,476
Dans le cas du langage Java,
un compilateur traduit

17
00:00:57,476 --> 00:01:01,863
le ou les fichiers textes 
en un programme en bytecode

18
00:01:01,867 --> 00:01:05,832
qui est une représentation intermédiaire
du programme Java.

19
00:01:05,956 --> 00:01:08,557
Cette représentation est indépendante

20
00:01:08,557 --> 00:01:11,860
de l'ordinateur sur lequel
le programme a été compilé.

21
00:01:11,989 --> 00:01:16,087
Le programme en bytecode
peut alors être interprété

22
00:01:16,087 --> 00:01:19,598
par un programme 
qui s'appelle une machine virtuelle.

23
00:01:19,598 --> 00:01:23,437
La machine virtuelle
traduit le bytecode en instructions

24
00:01:23,437 --> 00:01:25,587
que le microprocesseur peut exécuter.

25
00:01:25,606 --> 00:01:29,288
Comme le programme en bytecode
est indépendant de l'ordinateur

26
00:01:29,288 --> 00:01:31,214
sur lequel il a été créé,

27
00:01:31,214 --> 00:01:34,310
il peut être exécuté 
sur un autre ordinateur.

28
00:01:34,720 --> 00:01:37,617
Dans ce cours, vous allez apprendre 
à analyser un problème

29
00:01:37,617 --> 00:01:40,369
pour pouvoir écrire un programme
dans un langage de haut niveau.

30
00:01:40,369 --> 00:01:44,431
Ce langage sera donc le langage Java,
mais nous resterons généraux

31
00:01:44,431 --> 00:01:47,129
et vous allez apprendre des principes
qui seront valables

32
00:01:47,129 --> 00:01:49,293
pour la plupart 
des langages de programmation.

33
00:01:49,293 --> 00:01:53,773
Pour un problème donné,
vous allez devoir d'abord réfléchir

34
00:01:53,795 --> 00:01:57,990
à la séquence d'instructions
que l'ordinateur devra exécuter.

35
00:01:57,990 --> 00:02:01,790
Vous pourrez ensuite écrire
le programme Java

36
00:02:01,790 --> 00:02:04,721
qui correspond à cette séquence
d'instructions

37
00:02:04,721 --> 00:02:08,611
et compiler votre programme
pour créer un programme en bytecode.

38
00:02:09,028 --> 00:02:11,919
Il se peut que la compilation échoue

39
00:02:11,919 --> 00:02:16,499
parce que votre programme ne respecte pas 
les règles du langage Java.

40
00:02:16,810 --> 00:02:20,572
Vous devrez alors revenir 
sur votre programme pour le corriger.

41
00:02:20,572 --> 00:02:24,246
Heureusement, le compilateur Java
fournit des messages d'erreurs

42
00:02:24,246 --> 00:02:26,646
qui vous guideront dans cette correction.

43
00:02:26,701 --> 00:02:31,541
Une fois compilé, vous pourrez tester 
votre programme sur la machine virtuelle

44
00:02:31,728 --> 00:02:35,848
et il se peut que votre programme 
ne fasse pas ce que vous souhaitiez

45
00:02:35,992 --> 00:02:39,995
parce que vous avez mal conçu
la séquence d'instructions au départ.

46
00:02:39,995 --> 00:02:46,015
Vous devrez alors revenir sur l'analyse
que vous avez faite du programme,

47
00:02:47,230 --> 00:02:49,830
corriger votre séquence d'instructions

48
00:02:49,830 --> 00:02:52,813
et continuer le cycle 
que nous venons de voir.

49
00:02:53,340 --> 00:02:55,908
Nous allons créer 
notre premier programme Java.

50
00:02:55,908 --> 00:02:58,416
Il faut tout d'abord ouvrir 
un environnement de développement,

51
00:02:58,416 --> 00:03:01,023
il y a plusieurs environnements possibles.

52
00:03:01,023 --> 00:03:03,998
Vous trouverez plus de détails 
sur le site du cours

53
00:03:03,998 --> 00:03:06,703
et pour cette vidéo,
je vais utiliser Eclipse.

54
00:03:06,703 --> 00:03:14,404
Notre programme commence ainsi
<i>public class HelloWorld</i> accolade ouvrante.

55
00:03:14,404 --> 00:03:17,021
Ne cherchez pas à comprendre ces lignes 
pour le moment,

56
00:03:17,021 --> 00:03:18,570
sachez juste qu'elles sont nécessaires

57
00:03:18,570 --> 00:03:20,480
pour que notre programme 
puisse fonctionner.

58
00:03:20,524 --> 00:03:35,244
La suite <i>public static void main, 
paranthèse ouvrante String crochets args</i>

59
00:03:35,244 --> 00:03:39,324
<i>accolade ouvrante</i> deviendra plus clair 
lors de la séance sur les fonctions.

60
00:03:40,007 --> 00:03:43,402
La tradition quand on apprend 
un nouveau langage

61
00:03:43,402 --> 00:03:46,718
est de créer un programme qui affiche 
le message <i>HelloWorld</i>

62
00:03:46,718 --> 00:03:49,246
et nous allons 
nous plier à cette tradition.

63
00:03:49,246 --> 00:03:51,525
En Java, afficher un tel message 
se fait ainsi :

64
00:03:51,525 --> 00:04:10,295
<i>System.out.println("Hello, world");</i>

65
00:04:10,919 --> 00:04:13,869
Les accolades ouvertes
par les premières lignes

66
00:04:15,323 --> 00:04:17,033
doivent être fermées.

67
00:04:18,683 --> 00:04:22,677
Vous avez peut-être constaté qu'Eclipse
les a ajoutées automatiquement,

68
00:04:22,677 --> 00:04:23,647
mais ce n'est pas le cas

69
00:04:23,647 --> 00:04:25,733
pour tous les environnements 
de développement.

70
00:04:25,733 --> 00:04:28,663
Faites donc attention à les ajouter 
si nécessaire.

71
00:04:29,516 --> 00:04:32,393
Dès maintenant, faites attention 
à présenter clairement votre programme,

72
00:04:32,393 --> 00:04:35,717
ce n'est pas nécessaire pour qu'il puisse
fonctionner correctement.

73
00:04:35,717 --> 00:04:38,476
Par contre, c'est important 
pour sa lisibilité.

74
00:04:38,476 --> 00:04:43,256
Par exemple, j'ai commencé ces lignes
sur la première colonne,

75
00:04:43,470 --> 00:04:49,084
ces deux accolades sont alignées
et les lignes entre ces deux accolades,

76
00:04:49,084 --> 00:04:51,904
je les ai décalées un peu vers la droite.

77
00:04:52,261 --> 00:04:56,104
Cette ligne qui est entre 
ces deux accolades

78
00:04:56,104 --> 00:05:01,466
qui sont également alignées,
je l'ai également décalée vers la droite.

79
00:05:01,466 --> 00:05:05,996
Plusieurs règles sont possibles
et forcez-vous d'être cohérent

80
00:05:06,014 --> 00:05:07,364
et lisible.

81
00:05:08,451 --> 00:05:10,470
Je vais maintenant compiler 
notre programme.

82
00:05:10,470 --> 00:05:13,950
Sur Eclipse, ça se fait en cliquant
sur ce bouton ci

83
00:05:14,409 --> 00:05:17,883
qui lance la compilation 
et qui exécute notre programme

84
00:05:17,883 --> 00:05:20,630
si la compilation s'est bien passée.

85
00:05:20,630 --> 00:05:23,543
Comme mon programme est correcte, 
le compilateur a pu créer

86
00:05:23,543 --> 00:05:25,132
le programme en bytecode.

87
00:05:25,132 --> 00:05:29,719
Eclipse a alors exécuté 
ce programme en bytecode automatiquement

88
00:05:29,719 --> 00:05:34,599
et vous pouvez constater 
que notre programme a bien affiché

89
00:05:35,201 --> 00:05:37,294
le message <i>Helloworld</i>.

90
00:05:37,294 --> 00:05:40,112
Vous pourrez également constater
que la compilation a créé

91
00:05:40,112 --> 00:05:45,065
un fichier qui s'appelle <i>Helloworld.class</i>
et qui contient le programme en bytecode

92
00:05:45,065 --> 00:05:48,025
qui a été créé à la compilation.

93
00:05:48,063 --> 00:05:50,883
Il est probable qu'en recopiant 
ce premier programme,

94
00:05:50,883 --> 00:05:52,231
vous fassiez une faute de frappe.

95
00:05:52,231 --> 00:05:55,141
Que se passe t-il 
et que faut-il faire dans ce cas là ?

96
00:05:55,182 --> 00:05:59,642
Supposons par exemple que 
vous ayez oublié le point virgule ici.

97
00:06:00,113 --> 00:06:02,968
Si j'essaye maintenant de compiler 
ce programme,

98
00:06:02,968 --> 00:06:07,168
vous pouvez constater que le compilateur
affiche un message d'erreur.

99
00:06:07,579 --> 00:06:12,509
Ce message d'erreur indique
qu'il manque un point virgule

100
00:06:12,902 --> 00:06:16,982
et il donne la ligne 
où le point virgule est manquant.

101
00:06:17,601 --> 00:06:21,761
Si maintenant je remets le point virgule
et que je recompile le programme

102
00:06:21,783 --> 00:06:24,008
j'ai de nouveau le message <i>Helloworld</i>

103
00:06:24,008 --> 00:06:28,218
qui indique que la compilation 
et l'exécution se sont bien passées.

104
00:06:28,500 --> 00:06:30,718
Si vous avez oublié les guillemets,

105
00:06:30,718 --> 00:06:32,775
dans ce cas, plusieurs messages 
d'erreur s'affichent.

106
00:06:32,775 --> 00:06:36,705
Pas de panique, il faut toujours commencer
par corriger la première erreur,

107
00:06:36,717 --> 00:06:39,993
souvent, une erreur est due 
à une autre erreur plus haut

108
00:06:39,993 --> 00:06:42,193
dans le programme,
comme c'est la cas ici.

109
00:06:42,272 --> 00:06:46,062
Si je remets les guillemets, 
toutes les erreurs disparaissent.

110
00:06:47,413 --> 00:06:51,069
En résumé, soyez très rigoureux
quand vous tapez vos programmes.

111
00:06:51,069 --> 00:06:53,865
Faites très attention à la présentation.

112
00:06:53,865 --> 00:06:58,042
En cas d'erreurs, corrigez toujours
la première erreur et recompilez.

113
00:06:58,042 --> 00:07:02,434
Il est très probable que cela corrigera 
au moins certaines des erreurs suivantes.

114
00:07:02,434 --> 00:07:06,389
Pour trouver votre erreur, commencez 
par regarder le numéro de ligne,

115
00:07:06,389 --> 00:07:09,181
et essayez d'interpréter
le message d'erreur

116
00:07:09,181 --> 00:07:12,202
fourni par le compilateur
pour comprendre le problème.

117
00:07:12,202 --> 00:07:16,127
Si vous n'avez pas encore fait,
je vous invite maintenant à ouvrir

118
00:07:16,127 --> 00:07:18,013
votre environnement 
de développement

119
00:07:18,013 --> 00:07:20,543
et à créer votre propre programme
<i>helloworld</i>

120
00:07:20,605 --> 00:07:23,641
et dans les vidéos suivantes, nous verrons
des exemples plus riches

121
00:07:23,641 --> 00:07:25,461
qui manipulent des données.
