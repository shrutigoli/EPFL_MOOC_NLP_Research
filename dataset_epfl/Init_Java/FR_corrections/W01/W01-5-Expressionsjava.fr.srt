1
00:00:05,793 --> 00:00:08,583
Revenons maintenant
sur les expressions et opérateurs

2
00:00:08,583 --> 00:00:11,196
que vous avez déjà vus
dans les vidéos précédentes.

3
00:00:11,196 --> 00:00:14,873
On trouve des expressions, par exemple,
dans des affectations comme ici.

4
00:00:15,983 --> 00:00:20,271
L'expression se trouve
forcément à droite du signe =

5
00:00:20,271 --> 00:00:23,268
et va calculer une valeur
qui doit être du même type

6
00:00:23,268 --> 00:00:27,116
que la variable qui se trouve
à gauche du signe =

7
00:00:27,116 --> 00:00:31,700
puisque l'affectation va donner la valeur,
calculée par l'expression, à la variable.

8
00:00:31,700 --> 00:00:35,481
Alors une expression peut être
tout simplement une valeur littérale

9
00:00:36,102 --> 00:00:39,143
comme par exemple 4 ou 3.14

10
00:00:39,413 --> 00:00:46,290
Alors notez au passage qu'en fait
on n'écrit pas 3,14 mais bien 3.14

11
00:00:47,100 --> 00:00:50,054
parce que le JAVA
utilise la notation anglo-saxonne.

12
00:00:50,314 --> 00:00:54,054
Mais plus généralement, une expression
est une formule mathématique

13
00:00:54,054 --> 00:00:57,224
qui met en œuvre
des opérateurs comme ici

14
00:00:57,234 --> 00:01:00,643
où je multiplie la valeur
de la variable <i>n</i> par elle-même.

15
00:01:00,643 --> 00:01:03,962
L'étoile est le symbole
pour la multiplication.

16
00:01:03,962 --> 00:01:07,452
J'obtiens donc ici tout simplement <i>n²</i>
et plus généralement,

17
00:01:08,372 --> 00:01:11,959
une expression peut mettre en œuvre
plusieurs opérateurs ou des parenthèses,

18
00:01:11,959 --> 00:01:14,295
donc, exactement comme
une formule mathématique.

19
00:01:15,665 --> 00:01:17,979
Le type des expressions est donc important

20
00:01:17,979 --> 00:01:20,661
et il est donc aussi important
d'être conscient

21
00:01:20,661 --> 00:01:23,360
que les valeurs littérales
ont leur propre type

22
00:01:23,360 --> 00:01:25,056
exactement comme les variables.

23
00:01:25,056 --> 00:01:28,961
Par exemple, si j'écris
la valeur littérale 1,

24
00:01:28,961 --> 00:01:31,276
cette valeur est de type "int".

25
00:01:32,166 --> 00:01:37,276
En revanche, si j'écris 1.0
cette valeur est de type "double"

26
00:01:38,126 --> 00:01:42,225
Notez au passage qu'on a le droit
d'écrire 1. tout court

27
00:01:42,225 --> 00:01:47,359
et c'est équivalent à écrire 1.0
et ce sera donc de type "double".

28
00:01:47,359 --> 00:01:53,305
C'est à dire que je peux écrire,
par exemple, cette déclaration

29
00:01:53,305 --> 00:01:57,202
et c'est équivalent
à écrire cette déclaration.

30
00:01:57,202 --> 00:02:00,857
Mais en revanche, écrire 1.0
sera toujours plus lisible

31
00:02:00,857 --> 00:02:05,504
que d'écrire 1. tout court. 
Donc préférez écrire 1.0

32
00:02:06,705 --> 00:02:10,407
On a le droit également d'utiliser
ce qu'on appelle la notation scientifique,

33
00:02:10,407 --> 00:02:14,356
c'est à dire, que par exemple
je peux écrire <i>2e3</i>

34
00:02:14,356 --> 00:02:19,636
et c'est équivalent à 2x10³
(2x10^3) c'est à dire 2000.

35
00:02:19,636 --> 00:02:27,240
Et de façon générale, <i>aeb</i>
est équivalent à ax10^b

36
00:02:27,678 --> 00:02:31,701
Par exemple dans cette déclaration,

37
00:02:32,721 --> 00:02:34,772
j'initialise la variable <i>x</i>

38
00:02:35,574 --> 00:02:39,504
à la valeur 1.3x10^3

39
00:02:40,080 --> 00:02:42,015
c'est à dire 1300

40
00:02:43,755 --> 00:02:49,403
Et dans cette déclaration-ci,
j'initialise la variable <i>y</i>

41
00:02:50,020 --> 00:02:55,227
à 1.3x10^-3

42
00:02:55,739 --> 00:03:00,388
c'est à dire 0.0013

43
00:03:02,228 --> 00:03:04,153
Du côté des opérateurs,

44
00:03:04,334 --> 00:03:06,413
on dispose tout d'abord
des quatre opérateurs usuels.

45
00:03:06,413 --> 00:03:10,480
Pour l'addition, on va utiliser
tout simplement le symbole +,

46
00:03:11,593 --> 00:03:13,946
pour la soustraction, le symbole -.

47
00:03:13,946 --> 00:03:17,921
J'ai dit que la multiplication
se notait avec le symbole *.

48
00:03:17,921 --> 00:03:21,712
Et la division se note avec le caractère /

49
00:03:22,100 --> 00:03:25,369
Mais attention il y a un piège
dans le cas de la division

50
00:03:25,369 --> 00:03:28,792
si les deux valeurs
qui interviennent dans la division

51
00:03:28,792 --> 00:03:33,043
sont toutes les deux de type "int",
il s'agit de la division entière.

52
00:03:33,666 --> 00:03:40,405
Par exemple, dans cette division,
1 et 2 sont tous les deux de types "int"

53
00:03:40,405 --> 00:03:43,195
et cette division est la division entière.

54
00:03:43,195 --> 00:03:46,937
Ça veut dire que je vais obtenir
comme résultat de cette division

55
00:03:46,937 --> 00:03:48,258
la valeur 0.

56
00:03:48,258 --> 00:03:49,208
Alors pourquoi ?

57
00:03:49,208 --> 00:03:53,588
Parce que 1 = 0 * 2 + 1

58
00:03:53,798 --> 00:03:56,570
et c'est ce 0 qui est le résultat
de la division entière.

59
00:03:57,450 --> 00:04:00,269
Un autre exemple : 5 / 2

60
00:04:00,675 --> 00:04:06,033
5 et 2 sont tous les deux de type "int"
et j'obtiendrai cette fois-ci 2

61
00:04:06,033 --> 00:04:11,090
parce que 5 = 2 * 2 + 1

62
00:04:11,090 --> 00:04:14,036
et c'est ce 2 là, qui est le résultat
de la division entière.

63
00:04:14,036 --> 00:04:18,242
Si en revanche au moins une
des deux valeurs

64
00:04:18,242 --> 00:04:21,462
qui interviennent dans la division
est de type "double"

65
00:04:21,462 --> 00:04:24,873
il s'agit de la division
dont on a l'habitude

66
00:04:24,873 --> 00:04:29,955
et dans cet exemple
j'obtiendrai bien la valeur de 0.5

67
00:04:29,955 --> 00:04:32,368
comme c'est logique de s'y attendre.

68
00:04:33,678 --> 00:04:36,353
En JAVA on dispose également
des opérateurs

69
00:04:36,353 --> 00:04:37,788
+=

70
00:04:37,788 --> 00:04:38,916
-=

71
00:04:38,916 --> 00:04:40,247
*=

72
00:04:40,247 --> 00:04:41,476
et /=

73
00:04:41,870 --> 00:04:48,248
Par exemple, j'ai le droit d'écrire <i>a += 5</i>
où <i>a</i> est une variable

74
00:04:48,418 --> 00:04:53,126
et c'est équivalent à écrire <i>a = a + 5</i>

75
00:04:54,283 --> 00:04:59,816
Un autre exemple :
j'ai le droit d'écrire <i>a</i>*<i>= b</i>

76
00:04:59,816 --> 00:05:01,631
où <i>b</i> est une seconde variable

77
00:05:01,631 --> 00:05:06,534
et c'est simplement équivalent
à écrire <i>a = a</i> *<i>b</i>

78
00:05:08,622 --> 00:05:10,924
Dans le cas des "int"
et dans le cas des "int" seulement,

79
00:05:10,924 --> 00:05:14,267
on dispose également d'un opérateur
qui s'appelle "modulo"

80
00:05:14,267 --> 00:05:16,887
qui se note avec le caractère %

81
00:05:16,887 --> 00:05:20,075
et qui renvoie le reste
de la division entière.

82
00:05:20,645 --> 00:05:27,263
Par exemple, si j'écris <i>11%4</i>,
c'est à dire "11 modulo 4", je vais obtenir 3

83
00:05:27,263 --> 00:05:33,927
Alors pourquoi ? 
Parce que 11 = 2 * 4 + 3

84
00:05:33,927 --> 00:05:38,243
Ce 3, c'est le reste
de la division de 11 par 4

85
00:05:38,243 --> 00:05:41,229
et c'est donc la valeur de <i>11%4</i>.

86
00:05:41,699 --> 00:05:48,287
Si maintenant je calcule <i>12%4</i>

87
00:05:49,147 --> 00:05:50,834
je vais obtenir à votre avis ?

88
00:05:51,424 --> 00:05:52,143
Un 0.

89
00:05:52,903 --> 00:05:58,739
Pourquoi ? 
Parce que 12 = 3 * 4 + 0

90
00:05:59,437 --> 00:06:03,126
Le reste de la division
de 12 par 4 c'est donc 0,

91
00:06:03,126 --> 00:06:07,363
et la valeur du modulo
de 12 par 4 est donc 0.

92
00:06:08,443 --> 00:06:12,708
On dispose également
des opérateurs ++ et - -

93
00:06:12,708 --> 00:06:17,426
qui sont ce qu'on appelle des opérateurs
d'incrémentation et de décrémentation,

94
00:06:17,426 --> 00:06:21,337
c'est à dire qu'ils vont permettre
d'ajouter 1 ou de retrancher 1

95
00:06:21,337 --> 00:06:22,753
à la valeur d'une variable.

96
00:06:23,373 --> 00:06:29,990
Par exemple, j'ai le droit d'écrire <i>++i</i>
et c'est équivalent à écrire <i>i = i + 1</i>

97
00:06:30,250 --> 00:06:33,720
C'est à dire que ça va ajouter 1
à la valeur de la variable <i>i</i>

98
00:06:34,840 --> 00:06:38,803
J'aurais pu aussi écrire par exemple <i>--a</i>

99
00:06:38,803 --> 00:06:42,766
et c'est équivalent à écrire <i>a = a - 1</i>

100
00:06:42,766 --> 00:06:46,729
C'est à dire que ça va retrancher 1
à la valeur de la variable a.

101
00:06:46,729 --> 00:06:49,846
Alors ces deux opérateurs
sont utilisés fréquemment

102
00:06:49,846 --> 00:06:54,441
avec des boucles "for"
qui est une notion que nous allons voir

103
00:06:54,441 --> 00:06:56,637
dans une prochaine leçon.

104
00:06:57,377 --> 00:06:59,062
Jusqu'ici nous avons toujours vu

105
00:06:59,062 --> 00:07:02,593
des valeurs décimales et des variables
de types "double" d'un côté,

106
00:07:02,593 --> 00:07:06,842
et d'un autre côté des valeurs entières
et des variables de type "int".

107
00:07:06,842 --> 00:07:11,341
Que se passe t-il quand on essaie
d'affecter par exemple une valeur décimale

108
00:07:11,341 --> 00:07:13,648
à une variable de type "int" ?

109
00:07:13,898 --> 00:07:16,733
Eh bien en JAVA,
il est impossible d'affecter

110
00:07:16,733 --> 00:07:19,539
une valeur décimale
par exemple de type "double"

111
00:07:19,539 --> 00:07:21,228
à une variable de type "int".

112
00:07:21,228 --> 00:07:25,276
Par exemple j'ai déclaré ici
une variable <i>x</i> de type "double"

113
00:07:25,276 --> 00:07:29,065
et j'essaie de mettre la valeur
de l'expression <i>3</i>*<i>x</i>,

114
00:07:29,065 --> 00:07:33,865
qui est donc de type "double",
dans ma variable <i>n</i>

115
00:07:33,865 --> 00:07:36,282
qui est déclarée de type "int"

116
00:07:36,282 --> 00:07:39,748
Eh bien, le compilateur va refuser
de compiler ce code

117
00:07:39,748 --> 00:07:44,934
et va produire le message d'erreur
"possible loss of precision"

118
00:07:44,934 --> 00:07:48,335
qui dit que si je fais cette affection,

119
00:07:48,361 --> 00:07:51,931
je perdrais la valeur
qui est après la virgule.

120
00:07:52,780 --> 00:07:56,403
En revanche, il est possible
d'affecter une valeur de type "int"

121
00:07:56,403 --> 00:08:00,591
à une variable de type décimale,
par exemple de type double.

122
00:08:00,591 --> 00:08:04,502
J'ai, ici, déclaré
une variable <i>n</i> de type "int"

123
00:08:04,502 --> 00:08:09,274
et j'essaie de mettre la valeur
de l'expression <i>2</i>*<i>n</i>

124
00:08:09,274 --> 00:08:13,974
qui est, elle, de type "int"
dans ma variable x de type double.

125
00:08:13,974 --> 00:08:20,182
Eh bien dans ce cas, le compilateur
va faire la conversion de lui-même,

126
00:08:20,182 --> 00:08:23,967
du type "int" vers le type "double",
ce qui est parfaitement possible

127
00:08:23,967 --> 00:08:27,814
puisque dans ce cas-là
je n'ai pas de perte de précision.

128
00:08:29,525 --> 00:08:32,250
Revenons maintenant
sur le piège de la division entière.

129
00:08:32,250 --> 00:08:37,609
Alors j'ai déclaré ici une variable <i>x</i>
de type "double" que j'ai représenté ici.

130
00:08:37,609 --> 00:08:39,929
Et dans cette affectation,

131
00:08:39,929 --> 00:08:44,623
j'affecte la valeur de l'expression
1 / 2 à ma variable <i>x</i>.

132
00:08:45,069 --> 00:08:49,333
Alors à votre avis, que va contenir <i>x</i>
après cette affectation ?

133
00:08:50,003 --> 00:08:55,758
1 et 2 sont deux valeurs littérales
toutes les deux de type "int".

134
00:08:55,758 --> 00:08:59,130
Cette division
est donc la division entière

135
00:08:59,130 --> 00:09:03,476
et 1 / 2 dans le cas
de la division entière vaut 0.

136
00:09:04,332 --> 00:09:08,945
On va donc affecter
la valeur 0 à la variable <i>x</i>

137
00:09:09,265 --> 00:09:12,781
Alors notez au passage
qu'il y a une conversion automatique

138
00:09:12,904 --> 00:09:16,303
de "int" vers "double",
puisque ce 0 ci est de type "int"

139
00:09:16,303 --> 00:09:22,121
et le 0 affecté à <i>x</i>
est évidemment de type "double".

140
00:09:22,500 --> 00:09:25,766
Donc le fait que x soit de type "double"

141
00:09:25,766 --> 00:09:29,322
n'influence pas l'évaluation
de l'expression 1 / 2.

142
00:09:30,835 --> 00:09:32,776
Le problème peut se poser en pratique

143
00:09:32,776 --> 00:09:36,513
quand on essaie, par exemple, de calculer
la moyenne de deux valeurs entières.

144
00:09:37,303 --> 00:09:41,826
Dans cet exemple j'ai <i>note1</i>
qui est une variable de type "int"

145
00:09:41,826 --> 00:09:43,135
initialisée à 4,

146
00:09:43,135 --> 00:09:47,191
<i>note2</i> est également
de type "int" et initialisée à 5.

147
00:09:47,892 --> 00:09:53,074
Si j'essaie de calculer leur moyenne
en faisant cette déclaration ;

148
00:09:53,074 --> 00:09:57,971
dans cette expression,
<i>note1</i> et <i>note2</i> sont de type "int"

149
00:09:58,551 --> 00:10:01,016
Leur somme est donc de type "int",

150
00:10:01,016 --> 00:10:05,573
alors leur somme vaut 9
mais c'est une valeur de type "int".

151
00:10:05,573 --> 00:10:10,305
Ce 2 ci pour calculer la moyenne
est une valeur littérale de type "int",

152
00:10:10,960 --> 00:10:13,326
donc cette division
est la division entière.

153
00:10:13,326 --> 00:10:18,348
on va donc calculer le résultat
de la division entière entre 9 et 2,

154
00:10:19,417 --> 00:10:23,469
obtenir la valeur 4
et l'affecter à ma variable <i>moyenne</i>

155
00:10:23,469 --> 00:10:27,586
alors que j'aurais voulu avoir
4,5 de moyenne.

156
00:10:27,586 --> 00:10:31,444
Une solution possible
est de calculer d'abord la somme

157
00:10:31,444 --> 00:10:34,544
des deux valeurs de type "int".

158
00:10:34,544 --> 00:10:39,310
Donc ici j'ai <i>note1 + note2</i>
qui est affecté à la variable <i>moyenne</i>

159
00:10:39,430 --> 00:10:44,151
<i>note1 + note2</i> et 9 de types "int"

160
00:10:45,431 --> 00:10:48,922
qui va être affecté à la variable <i>moyenne</i>

161
00:10:50,492 --> 00:10:56,025
Quand je fais cette instruction,
qui est équivalente à, je vous le rappelle,

162
00:10:56,025 --> 00:11:02,406
écrire <i>moyenne = moyenne / 2</i>

163
00:11:02,418 --> 00:11:05,119
2 est une valeur littérale de type "int"

164
00:11:05,119 --> 00:11:10,052
mais <i>moyenne</i> est une variable
de type "double"

165
00:11:10,058 --> 00:11:14,110
donc cette division est donc la division
dont on a l'habitude.

166
00:11:14,780 --> 00:11:19,570
Et cette fois-ci je vais bien obtenir 4,5
dans ma variable <i>moyenne</i>

167
00:11:21,681 --> 00:11:24,725
Terminons sur le fait
que l'on peut utiliser des fonctions

168
00:11:24,725 --> 00:11:27,750
et des constantes mathématiques
dans des expressions JAVA.

169
00:11:27,750 --> 00:11:30,555
Pour cela, il suffit
de respecter cette notation,

170
00:11:31,126 --> 00:11:33,891
c'est à dire, par exemple,
si je veux utiliser une fonction,

171
00:11:33,891 --> 00:11:38,364
je vais commencer par écrire <i>Math.</i>
suivi du nom de la fonction,

172
00:11:38,364 --> 00:11:42,082
suivi des valeurs
dont a besoin la fonction

173
00:11:42,082 --> 00:11:43,488
Dans le cas d'une constante,

174
00:11:44,108 --> 00:11:46,304
je vais commencer
encore une fois par <i>Math.</i>

175
00:11:46,304 --> 00:11:48,836
et suivi du nom de la constante.

176
00:11:49,696 --> 00:11:52,465
Par exemple, si je veux calculer
le sinus d'un angle,

177
00:11:52,465 --> 00:11:56,694
eh bien je vais écrire <i>Math.sin()</i>
pour utiliser la fonction sinus

178
00:11:57,414 --> 00:12:01,307
suivi de l'angle
dont je veux calculer le sinus.

179
00:12:01,307 --> 00:12:06,498
Les fonctions trigonométriques en JAVA,
attendent une valeur en radian.

180
00:12:06,498 --> 00:12:12,844
Si j'ai un angle en degré, par exemple,
j'ai un angle de 10° ici,

181
00:12:12,854 --> 00:12:17,867
il faut que je le convertisse en radian
avant de le donner à la fonction sinus.

182
00:12:18,858 --> 00:12:23,777
Pour cela, il me suffit de le multiplier
par <i>pi</i> et de diviser par 180.

183
00:12:26,047 --> 00:12:27,340
C'est ce que j'ai fait ici.

184
00:12:27,645 --> 00:12:32,134
Pour obtenir la valeur de <i>pi</i>
j'écris simplement <i>Math.PI</i>

185
00:12:32,134 --> 00:12:36,319
Alors notez au passage que cette division
n'est pas la division entière

186
00:12:36,319 --> 00:12:42,514
mais bien la division dont on a l'habitude
parce que <i>Math.PI</i> est de type "double".

187
00:12:44,501 --> 00:12:48,095
Vous trouverez l'ensemble
des fonctions disponibles en JAVA

188
00:12:48,319 --> 00:12:50,919
en suivant cet URL.
