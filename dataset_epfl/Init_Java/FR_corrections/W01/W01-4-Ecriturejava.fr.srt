1
00:00:03,329 --> 00:00:07,111
Jusqu'à présent, nous avions vu 
comment déclarer, initialiser

2
00:00:07,481 --> 00:00:09,224
et affecter une variable.

3
00:00:09,660 --> 00:00:12,449
Intéressons-nous ici à comment
afficher une variable

4
00:00:12,708 --> 00:00:16,578
et lire sa valeur depuis le clavier.

5
00:00:17,294 --> 00:00:19,154
Commençons par l'affichage.

6
00:00:19,359 --> 00:00:21,624
Si l'on regarde l'exemple suivant,

7
00:00:21,937 --> 00:00:26,164
les lignes d'affichage,
ce sont ces trois lignes là.

8
00:00:26,674 --> 00:00:28,912
Examinons-les plus en détail.

9
00:00:29,548 --> 00:00:32,288
La ligne qui nous intéresse 
est donc la suivante

10
00:00:32,608 --> 00:00:36,580
qui, si l'on suppose que l'on a
une variable <i>n</i> de type <i>entier</i>

11
00:00:36,954 --> 00:00:40,313
qui contient la valeur <i>4</i>,
va nous afficher le message

12
00:00:40,503 --> 00:00:43,415
"La variable n contient 4."

13
00:00:43,895 --> 00:00:46,535
Cette ligne est composée de deux parties.

14
00:00:47,255 --> 00:00:51,663
D'abord, la description
dans le langage Java

15
00:00:51,833 --> 00:00:57,422
de ce qu'on appelle techniquement
la «sortie standard» ou «terminal».

16
00:00:58,032 --> 00:01:03,031
La deuxième partie est le message
que l'on va envoyer sur le terminal.

17
00:01:03,571 --> 00:01:07,560
Ce message est composé
de plusieurs morceaux.

18
00:01:07,972 --> 00:01:14,240
Entre «<i>double quote</i>», 
on a une chaîne littérale

19
00:01:14,743 --> 00:01:20,702
qui va s'écrire telle quelle 
sur la sortie, et une expression Java,

20
00:01:21,092 --> 00:01:25,620
c'est à dire quelque-chose qui va
être évalué avant d'être affiché.

21
00:01:27,221 --> 00:01:32,707
Elle reprend la valeur de <i>n</i>
qui va afficher <i>4</i>.

22
00:01:33,477 --> 00:01:37,611
Puis on retrouve enfin une 3ème
et dernière partie,

23
00:01:38,000 --> 00:01:42,032
qui est de nouveau un message réduit au 
point, qui va permettre de l'afficher.

24
00:01:42,812 --> 00:01:47,503
Ces différentes parties sont composées
à l'aide du signe '+'.

25
00:01:47,733 --> 00:01:53,934
Attention, le signe '+' rajoute seulement 
des messages les uns derrière les autres.

26
00:01:54,224 --> 00:01:59,986
Si j'écris «<i>un</i>» entre «double quote», 
suivi de «<i>message</i>», ceci correspond

27
00:02:00,306 --> 00:02:04,041
à la chaîne "un message".

28
00:02:04,711 --> 00:02:09,030
C'est donc bien 
une concaténation de messages,

29
00:02:09,330 --> 00:02:11,496
un collage d'un message 
l'un derrière l'autre que l'on a

30
00:02:11,797 --> 00:02:14,213
et non pas du tout une addition.

31
00:02:14,538 --> 00:02:17,004
De l'autre côté, on a donc
la description du terminal ;

32
00:02:17,284 --> 00:02:23,516
en toute rigueur : <i>system</i> point <i>out</i> point
et une fonction, une méthode, <i>println()</i>

33
00:02:23,746 --> 00:02:28,059
qui veut dire «<i>print line</i>», c'est-à-dire
que le message en question

34
00:02:28,172 --> 00:02:31,928
va en fait retourner à la ligne,
va faire un saut de ligne,

35
00:02:32,098 --> 00:02:34,462
une fois qu'il s'est affiché.

36
00:02:34,692 --> 00:02:36,638
Si l'on ne souhaite pas
faire ce saut de ligne,

37
00:02:36,858 --> 00:02:40,766
on peut utiliser la méthode 
<i>print()</i> tout simplement

38
00:02:41,056 --> 00:02:43,488
qui ne fera pas de retour à la ligne.

39
00:02:43,845 --> 00:02:49,099
Donc, pour résumer, si vous voulez 
afficher une expression, un message

40
00:02:49,099 --> 00:02:53,720
tapez <i>system.out.println()</i>
si vous voulez un saut à la ligne

41
00:02:53,994 --> 00:02:58,444
et ensuite, entre guillemets,
les messages littéraux

42
00:02:58,634 --> 00:03:01,480
affichés tels que vous les écrivez

43
00:03:01,680 --> 00:03:06,906
et des expressions concaténées,
combinées avec ce signe '+'.

44
00:03:07,516 --> 00:03:09,896
Si vous ne souhaitez pas
faire de saut à la ligne

45
00:03:10,131 --> 00:03:15,051
utilisez la fonction <i>print()</i>
au lieu de la fonction <i>println()</i> ;

46
00:03:15,051 --> 00:03:18,823
ce qui fait que les différents messages
s'afficheront les uns derrière les autres,

47
00:03:19,053 --> 00:03:23,003
collés, et non pas les uns
à la suite des autres, ligne à ligne.

48
00:03:24,499 --> 00:03:27,530
On peut donc tout à fait utiliser 
ce système pour simplement afficher

49
00:03:27,877 --> 00:03:33,668
une simple valeur de variable réduite 
à l'expression de cette valeur.

50
00:03:33,868 --> 00:03:37,933
Mais vous pouvez aussi combiner avec 
n'importe quelle expression Java

51
00:03:38,123 --> 00:03:42,927
donc par exemple, vous pouvez 
afficher un message qui comporte

52
00:03:43,057 --> 00:03:47,629
le début de phrase "Le double de",
puis qui va évaluer la valeur de <i>n</i>,

53
00:03:47,799 --> 00:03:53,243
rajouter le message " est " et 
évaluer une expression Java

54
00:03:53,593 --> 00:03:59,247
aussi compliquée que vous voulez, 
dont la valeur sera affichée.

55
00:04:00,192 --> 00:04:03,087
Tout à l'heure, j'ai aussi insisté
sur le fait que le signe utilisé pour coller,

56
00:04:03,357 --> 00:04:07,053
concaténer les chaînes, n'était pas 
du tout une addition arithmétique.

57
00:04:07,313 --> 00:04:13,140
Comment faire une addition ?
Pour cela, il faudra absolument

58
00:04:13,390 --> 00:04:19,585
protéger par des parenthèses
de sorte que l'expression parenthésée

59
00:04:19,915 --> 00:04:25,372
soit évaluée dans un sens arithmétique
et non pas dans un sens de valeurs

60
00:04:25,741 --> 00:04:27,752
de chaînes collées 
les unes derrière les autres.

61
00:04:27,752 --> 00:04:35,614
Par exemple, si <i>n</i> vaut <i>4</i> et <i>nCarre</i> vaut <i>16</i>, 
alors cette expression va évaluer <i>n</i>,

62
00:04:35,864 --> 00:04:41,843
qui fait <i>4</i>, '+' au sens arithmétique, <i>16</i>,
ce qui va donner la valeur <i>20</i>.

63
00:04:42,063 --> 00:04:48,070
Cette valeur va être affichée 
en tant que telle,

64
00:04:48,070 --> 00:04:54,077
l'affichage sera "n plus nCarre = 20"

65
00:04:54,077 --> 00:05:00,085
Mais si on omet 
les parenthèses,

66
00:05:00,205 --> 00:05:07,728
alors on affiche "n plus nCarre = " 
suivi de la valeur <i>4</i>, suivie, collée

67
00:05:07,928 --> 00:05:12,032
directement derrière de la valeur <i>16</i>
et donc on a comme message

68
00:05:12,242 --> 00:05:17,041
"n plus nCarre = 416" 
ce qui n'est pas ce que l'on veut.

69
00:05:17,411 --> 00:05:23,390
Pour pouvoir garantir que l'évaluation
<i>n + nCarre</i> est évaluée au sens arithmétique

70
00:05:23,550 --> 00:05:27,242
il faut la protéger par des parenthèses.

71
00:05:28,570 --> 00:05:31,018
Déroulons maintenant pas à pas
l'exemple du cours.

72
00:05:31,236 --> 00:05:34,927
On commence pour cela 
par déclarer une variable <i>n</i>

73
00:05:35,284 --> 00:05:40,791
que l'on initialise à la valeur <i>4</i>.
Ensuite, on déclare une variable <i>nCarre</i>

74
00:05:40,921 --> 00:05:45,618
que l'on n'initialise pas, 
on ne connaît pas sa valeur initiale.

75
00:05:45,748 --> 00:05:52,415
Puis, on fait une affectation, 
avec l'évaluation de l'expression <i>n</i> *<i>n</i>

76
00:05:52,635 --> 00:05:58,122
qui va donner 4, fois <i>n</i> qui vaut 4,
donc qui va s'évaluer à 16.

77
00:05:58,262 --> 00:06:04,453
Puis cette valeur <i>16</i> va être recopiée
dans <i>nCarre</i> pour donner en mémoire

78
00:06:04,813 --> 00:06:07,847
<i>4</i> dans <i>n</i> et <i>16</i> dans <i>nCarre</i>.

79
00:06:08,077 --> 00:06:12,426
On va afficher tel quel le message 
"La variable n contient ", puis

80
00:06:12,616 --> 00:06:18,778
évaluation de l'expression <i>n</i>, 
c'est à dire remplacer par la valeur de <i>n</i>.

81
00:06:19,038 --> 00:06:23,036
On aura donc le message 
"La variable contient 4".

82
00:06:23,216 --> 00:06:27,214
Puis, on passe à la ligne suivante 
qui va afficher le message

83
00:06:27,354 --> 00:06:32,987
"Le carré de n ", puis évaluer 
l'expression <i>n</i> au sens Java,

84
00:06:33,177 --> 00:06:37,030
donc la remplacer par sa valeur <i>4</i>,
rajouter littéralement la chaîne " est ",

85
00:06:37,170 --> 00:06:42,008
évaluer l'expression <i>nCarre</i> donc 
la remplacer par sa valeur <i>16</i>,

86
00:06:42,152 --> 00:06:46,732
puis ensuite concaténer, rajouter 
la chaîne littérale qui contient le point.

87
00:06:46,872 --> 00:06:50,844
Ce qui fait que l'on va avoir le message
"Le carré de 4 est 16."

88
00:06:51,094 --> 00:06:54,081
Enfin, dans la dernière ligne,
on aura de la même façon

89
00:06:54,301 --> 00:06:57,097
affichage du message "Le double de n est ".

90
00:06:57,465 --> 00:06:59,329
Notez que c'est bien la lettre <i>n</i>

91
00:06:59,588 --> 00:07:05,058
puisqu'elle est comprise 
entre deux double-quote, qui est affichée.

92
00:07:05,738 --> 00:07:10,594
C'est le mot <i>n</i>, et non pas une expression
comme auparavant ou comme ici.

93
00:07:11,622 --> 00:07:15,853
"Le double de n est " suivi 
de l'expression <i>2 * n</i>.

94
00:07:16,166 --> 00:07:21,562
On va rechercher la valeur de <i>n</i>, <i>4</i>,
la multiplier par <i>2</i> et l'évaluer à <i>8</i>

95
00:07:21,786 --> 00:07:27,401
pour afficher ici le message "8" 
suivi du message "."

96
00:07:27,611 --> 00:07:31,491
et enfin le retour à la ligne 
à cause de <i>println()</i>.

97
00:07:32,477 --> 00:07:35,010
Une petite question maintenant.

98
00:07:36,900 --> 00:07:40,882
Détaillons pas-à-pas 
l'exécution du code de la question.

99
00:07:41,106 --> 00:07:45,936
On commence par déclarer une variable <i>a</i>
de type <i>entier</i> initialisée à la valeur <i>2</i>,

100
00:07:46,152 --> 00:07:51,306
puis on déclare une variable <i>b</i> de type
<i>entier</i> que l'on initialise à la valeur <i>1</i>,

101
00:07:51,538 --> 00:07:58,045
puis, on a une affectation, une expression
qui va évaluer <i>a</i> qui vaut <i>2</i> puis

102
00:07:58,325 --> 00:08:03,386
qui va évaluer <i>b + 2</i>, c'est-à-dire <i>1 + 2</i>, 
ce qui donne la valeur <i>3</i>

103
00:08:03,516 --> 00:08:10,927
on va donc avoir la valeur de <i>2 * 3</i> 
qui va être mise dans <i>b</i>.

104
00:08:11,197 --> 00:08:15,476
Pour résumer, l'expression s'évalue à <i>6</i>
et on met la valeur <i>6</i> dans <i>b</i>.

105
00:08:15,836 --> 00:08:20,649
Puis on arrive à la dernière ligne
qui va afficher l'expression de <i>a</i>, <i>2</i>,

106
00:08:20,979 --> 00:08:26,876
puis afficher la chaîne " , ", 
puis la valeur de <i>b</i>, c'est à dire <i>6</i>.

107
00:08:28,816 --> 00:08:31,541
Une deuxième question.

108
00:08:32,114 --> 00:08:34,984
Regardons le déroulement pas-à-pas 
du code de la question précédente.

109
00:08:35,185 --> 00:08:38,381
On commence par déclarer une variable <i>a</i>
de type <i>entier</i>,

110
00:08:38,653 --> 00:08:40,411
que l'on initialise à la valeur <i>1</i>.

111
00:08:40,559 --> 00:08:45,826
Puis on déclare une variable <i>b</i> de type 
entier que l'on initialise à la valeur <i>2</i>

112
00:08:46,046 --> 00:08:50,856
puis on arrive à une affectation où 
l'on évalue l'expression <i>b</i> qui retourne <i>2</i>,

113
00:08:50,986 --> 00:08:57,369
on va mettre <i>2</i> dans <i>a</i>, puis 
on évalue l'expression suivante, <i>a</i>

114
00:08:57,589 --> 00:09:01,768
et on va recopier cette expression dans <i>b</i>

115
00:09:02,028 --> 00:09:06,819
ce qui fait qu'au final, à l'affichage, 
on aura évaluation de l'expression <i>a</i>, <i>2</i>,

116
00:09:07,189 --> 00:09:10,985
évaluation telle quelle de la chaîne ", "

117
00:09:11,149 --> 00:09:17,441
puis évaluation de l'expression <i>b</i>
qui vaut <i>2</i> et l'affichage sera "2, 2".

118
00:09:17,658 --> 00:09:21,200
À ce stade, on peut se demander comment
échanger la valeur de deux variables

119
00:09:21,484 --> 00:09:25,941
puisque dans l'exemple précédent,
on n'a pas échangé les deux variables

120
00:09:26,090 --> 00:09:31,251
mais simplement recopié la valeur de <i>b</i>
dans les deux variables, <i>a</i> et <i>b</i>.

121
00:09:31,391 --> 00:09:39,114
On peut se demander comment procéder
pour échanger le contenu de deux verres.

122
00:09:39,114 --> 00:09:45,156
Supposons que vous ayez un verre 
de grenadine et un verre de menthe.

123
00:09:45,306 --> 00:09:49,627
Le verre de menthe va s'appeler <i>b</i>
le verre de grenadine, <i>a</i>.

124
00:09:49,777 --> 00:09:53,240
Comment faire pour échanger 
le contenu des deux verres ?

125
00:09:53,460 --> 00:10:00,315
La bonne solution est d'introduire
un troisième verre appelé <i>tmp</i>.

126
00:10:00,942 --> 00:10:03,139
Ce n'est pas plus difficile 
en programmation.

127
00:10:03,649 --> 00:10:05,863
Pour échanger le contenu 
de deux variables, il suffit

128
00:10:06,081 --> 00:10:12,245
d'introduire une variable temporaire <i>temp</i>
qui va permettre de transférer les valeurs.

129
00:10:12,445 --> 00:10:18,221
Par exemple, <i>a</i> est initialisée à <i>1</i> 
et <i>b</i> initialisé à <i>2</i>

130
00:10:18,502 --> 00:10:25,861
et on introduit 
une variable temporaire <i>temp</i>

131
00:10:25,861 --> 00:10:32,570
dans laquelle on recopie la valeur de <i>a</i>
puis on recopie la valeur de <i>b</i> dans <i>a</i>.

132
00:10:32,680 --> 00:10:35,912
Puisque la valeur de <i>a</i>
est sauvegardée dans <i>temp</i>,

133
00:10:36,182 --> 00:10:40,313
on peut remplacer dans <i>a</i>
la valeur initiale par celle de <i>b</i>

134
00:10:40,509 --> 00:10:45,954
Enfin, on recopie la valeur 
sauvegardée dans <i>temp</i>

135
00:10:46,144 --> 00:10:52,544
dans la variable <i>b</i>, ce qui met ici
la valeur <i>1</i> dans la variable <i>b</i>.

136
00:10:52,714 --> 00:10:57,654
Ce qui fait bien qu'au début 
on avait <i>1</i> dans <i>a</i> et <i>2</i> dans <i>b</i>,

137
00:10:57,895 --> 00:11:03,633
on a échangé le contenu initial 
des deux variables <i>a</i> et <i>b</i>.

138
00:11:05,860 --> 00:11:10,297
Passons maintenant à la lecture de la 
valeur d'une variable depuis le clavier.

139
00:11:10,447 --> 00:11:18,371
Prenons notre exemple favori du calcul et
de l'affichage du carré ou du double de <i>n</i>.

140
00:11:18,611 --> 00:11:23,304
Supposons qu'on veuille non pas 
ce programme pour <i>n = 4</i>

141
00:11:23,484 --> 00:11:27,759
mais plutôt demander la valeur de <i>n</i>
au clavier à l'utilisateur.

142
00:11:27,889 --> 00:11:31,492
Comment faire ? Pour cela, on va 
simplement remplacer la ligne

143
00:11:31,642 --> 00:11:36,312
qui affectait la valeur <i>4</i> à <i>n</i>
par un ensemble de lignes que

144
00:11:36,442 --> 00:11:40,848
l 'on va détailler dans la suite 
et qui vont permettre

145
00:11:41,048 --> 00:11:46,266
d'affecter une valeur lue
au clavier à la variable <i>n</i>.

146
00:11:46,506 --> 00:11:51,072
Il faut commencer par importer ce qui 
s'appelle techniquement «la classe <i>Scanner</i>».

147
00:11:51,262 --> 00:11:56,026
En ajoutant cette ligne
une fois au début du programme :

148
00:11:56,246 --> 00:12:00,120
<i>import java.util.Scanner;</i>

149
00:12:00,300 --> 00:12:05,916
Cette ligne ajoutée,
vous pouvez déclarer une variable <i>keyb</i>

150
00:12:06,216 --> 00:12:13,130
de type <i>Scanner</i> et de l'initialiser
en la liant au clavier,

151
00:12:13,370 --> 00:12:17,957
ce qu'on appelle techniquement
l'entrée standard, <i>in</i> comme <i>input</i>,

152
00:12:18,353 --> 00:12:23,307
entrée représentée par <i>System.in</i>.
Tout ce que vous avez à faire,

153
00:12:23,682 --> 00:12:27,711
c'est d'écrire cette ligne : <i>Scanner</i>
avec un nom de variable,

154
00:12:27,953 --> 00:12:33,617
<i>keyb</i>, <i>= new Scanner (System.in) ;</i>
et à partir de là, vous pouvez utiliser

155
00:12:33,941 --> 00:12:38,522
la variable <i>keyb</i> pour 
lire des variables au clavier.

156
00:12:38,522 --> 00:12:42,370
Cette ligne doit être écrite une fois 
et une seule pour tout le programme.

157
00:12:42,460 --> 00:12:45,058
Vous n'avez besoin que de faire 
une fois le lien vers le clavier.

158
00:12:45,508 --> 00:12:48,097
À ce stade du cours, 
vous l'écrirez dans le <i>main</i>

159
00:12:48,385 --> 00:12:52,664
et à partir de cette ligne, 
vous pourrez utiliser la variable <i>keyb</i>

160
00:12:52,808 --> 00:12:54,992
pour pouvoir lire les valeurs.

161
00:12:55,232 --> 00:13:00,903
On peut vouloir lire un entier au clavier
pour initialiser une variable

162
00:13:00,903 --> 00:13:06,017
comme ici : je déclare une variable <i>n</i>
de type <i>entier</i> que j'initialise

163
00:13:06,207 --> 00:13:09,641
avec une lecture au clavier 
qui s'écrit de la façon suivante :

164
00:13:09,831 --> 00:13:13,318
<i>keyb</i>, la variable <i>Scanner</i> que 
j'avais précédemment déclarée

165
00:13:13,729 --> 00:13:21,097
<i>keyb</i> point et une lecture d'un entier 
<i>nextInt()</i> pour lire le prochain entier

166
00:13:21,287 --> 00:13:24,746
et parenthèses et on termine l'instruction
d'initialisation de notre variable

167
00:13:24,746 --> 00:13:28,205
par un point virgule.

168
00:13:28,205 --> 00:13:31,664
Tout ceci est peut-être un peu technique,
mais il suffit de suivre la procédure

169
00:13:31,814 --> 00:13:35,072
expliquée ici en trois étapes
que je vous résume encore une fois.

170
00:13:35,292 --> 00:13:39,126
D'abord, vous ajoutez cette ligne une fois
au tout début de votre programme.

171
00:13:39,426 --> 00:13:45,834
Puis cette ligne, une seule fois là où vous
en avez besoin, ici dans le <i>main</i>

172
00:13:46,004 --> 00:13:49,557
pour déclarer une variable 
de type <i>Scanner</i>. Et vous utilisez

173
00:13:49,767 --> 00:13:55,394
autant de fois que nécessaire
la lecture d'un entier avec <i>nextInt()</i>.

174
00:13:55,674 --> 00:14:01,391
La méthode <i>nextInt()</i> fonctionne ainsi :

175
00:14:01,591 --> 00:14:05,700
elle commence par arrêter 
momentanément le programme

176
00:14:05,900 --> 00:14:09,384
et elle va ensuite attendre 
que l'utilisateur saisisse une valeur

177
00:14:09,564 --> 00:14:13,227
et appuie sur la touche 
<i>entrée</i> ou <i>return</i>

178
00:14:13,227 --> 00:14:16,890
puis elle lit la valeur comme un entier

179
00:14:16,890 --> 00:14:20,554
la convertit en entier et le résultat
sera la valeur de type entier

180
00:14:20,774 --> 00:14:26,951
de ce qui a été tapé au clavier
affectée à la variable <i>n</i> à l'étape n°3

181
00:14:27,247 --> 00:14:29,871
puis le programme va continuer.

182
00:14:30,131 --> 00:14:32,971
<i>nextInt()</i> est ce qu'on appelle 
une méthode, une fonction,

183
00:14:33,293 --> 00:14:35,910
un traitement associé à l'objet <i>Scanner</i>.

184
00:14:35,983 --> 00:14:38,765
Il est possible de lire
plein d'autres choses,

185
00:14:39,005 --> 00:14:40,829
plein de valeurs d'autres types.

186
00:14:41,059 --> 00:14:43,861
Par exemple, si l'on veut lire 
une valeur décimale,

187
00:14:43,861 --> 00:14:46,663
une valeur de type <i>double</i>,

188
00:14:46,663 --> 00:14:49,465
on va utiliser la fonction <i>nextDouble()</i>.

189
00:14:49,705 --> 00:14:57,005
Pour initialiser une variable <i>x</i> de type 
<i>double</i> avec une valeur lue au clavier

190
00:14:57,185 --> 00:15:05,731
on écrira la déclaration <i>double x</i> et 
l'initialisation <i>= keyb.nextDouble();</i>

191
00:15:05,811 --> 00:15:09,776
qui lira au clavier une valeur 
de type <i>double</i>, décimale.

192
00:15:11,517 --> 00:15:14,526
Prenons un exemple pas-à-pas :

193
00:15:14,774 --> 00:15:19,637
on commence avec la ligne 
de déclaration usuelle

194
00:15:19,931 --> 00:15:26,821
par créer un <i>Scanner</i> qui va 
associer le clavier au Scanner <i>keyb</i>.

195
00:15:27,266 --> 00:15:32,332
Ensuite, il faut avertir l'utilisateur 
qu'il doit entrer une valeur.

196
00:15:32,452 --> 00:15:37,748
On va lui afficher, avec la technique 
vue précédemment, un message :

197
00:15:37,888 --> 00:15:41,421
"Entrez une valeur pour n"

198
00:15:41,716 --> 00:15:46,350
On va lire la valeur au clavier avec 
la méthode <i>nextInt()</i>

199
00:15:46,350 --> 00:15:50,984
de l'objet que l'on a créé <i>keyb</i>

200
00:15:50,984 --> 00:15:55,619
Supposons qu'alors l'utilisateur
tape au clavier la valeur <i>2</i>.

201
00:15:55,839 --> 00:16:03,286
Cette méthode va s'évaluer 
et lire la valeur <i>2</i> au clavier.

202
00:16:03,486 --> 00:16:09,396
<i>2</i> va se mettre comme valeur
initiale dans la variable <i>n</i>.

203
00:16:09,591 --> 00:16:15,872
À l'étape suivante, on va évaluer 
<i>n</i>*<i>n</i> qui va faire <i>4</i>.

204
00:16:15,982 --> 00:16:21,949
On va mettre <i>4</i> dans la variable <i>nCarre</i>.
Puis on va afficher le message

205
00:16:22,109 --> 00:16:25,816
"La variable contient ", puis 
évaluation de l'expression <i>n</i> ;

206
00:16:26,006 --> 00:16:33,559
ce qui nous permettra 
d'afficher la valeur de <i>n</i>.

207
00:16:33,749 --> 00:16:40,894
En plus de <i>nextInt()</i> qui lit un entier et 
<i>nextDouble()</i> qui lit un nombre décimal,

208
00:16:41,204 --> 00:16:44,835
une fonction qui pourrait être 
utile est la fonction <i>nextLine()</i>

209
00:16:44,965 --> 00:16:48,313
qui permet de lire d'un seul coup
toute une ligne complète.

210
00:16:48,451 --> 00:16:50,564
Prenons un exemple,
comme d'habitude

211
00:16:50,872 --> 00:16:54,806
nous déclarons un <i>Scanner</i>, 
<i>keyb</i> associé au clavier.

212
00:16:54,956 --> 00:16:59,033
Une fois cette déclaration faite,
on peut faire un appel,

213
00:16:59,203 --> 00:17:04,120
<i>keyb.nextLine();</i> qui va permettre 
de lire toute une ligne entière.

214
00:17:04,310 --> 00:17:07,957
Si on a tapé un message comme 
"bonjour tout le monde !",

215
00:17:08,197 --> 00:17:14,415
l'appel à la fonction <i>nextLine()</i> va alors
lire toute la ligne tapée par l'utilisateur,

216
00:17:14,575 --> 00:17:17,607
tous les caractères rentrés 
jusqu'à ce qu'il ait tapé

217
00:17:17,977 --> 00:17:20,869
sur la touche «<i>entrée</i>» ou «<i>return</i>».

218
00:17:21,099 --> 00:17:23,973
La question est «dans quelle variable
stocker ce message ?»

219
00:17:24,133 --> 00:17:26,878
Quel doit être son type ?

220
00:17:27,018 --> 00:17:30,507
Pour l'instant, en anticipant sur ce qui 
sera présenté dans une vidéo ultérieure,

221
00:17:30,667 --> 00:17:39,487
je vous demande de recopier la ligne
où <i>String</i> est le type de la variable <i>s</i>

222
00:17:39,781 --> 00:17:44,132
utilisée pour sauvegarder 
le message et <i>s</i> son nom.

223
00:17:44,401 --> 00:17:48,728
Lorsqu'on a tapé la ligne 
<i>String s = keyb.nextLine();</i>

224
00:17:48,968 --> 00:17:53,685
<i>s</i> va contenir tous les caractères 
qui auront été tapés par l'utilisateur

225
00:17:53,865 --> 00:17:56,155
jusqu'à l'appui sur la touche <i>return</i>.

226
00:17:57,612 --> 00:18:00,545
Attention cependant avec l'utilisation de

227
00:18:00,745 --> 00:18:05,091
la méthode <i>nextLine()</i> peu compatible
avec <i>nextInt()</i> et <i>nextDouble()</i>

228
00:18:05,321 --> 00:18:09,782
Par exemple, si je déclare 
une variable <i>i</i> de type <i>entier</i>

229
00:18:09,985 --> 00:18:12,846
et que je l'initialise 
avec une lecture au clavier

230
00:18:13,121 --> 00:18:17,934
au travers de <i>nextInt()</i> et que 
juste après je veuille lire un message,

231
00:18:18,137 --> 00:18:22,591
une ligne entière <i>nextLine()</i>, que je mets
dans <i>s1</i> puis je lis une deuxième ligne

232
00:18:22,908 --> 00:18:28,496
de la même façon, que je mets 
dans l'initialisation d'une variable <i>s2</i>.

233
00:18:28,615 --> 00:18:34,822
L'idée est de lire un entier, puis de lire
la fin de la ligne et une autre ligne.

234
00:18:35,032 --> 00:18:38,161
Si on tape le message 25 francs
- retour à la ligne -

235
00:18:38,161 --> 00:18:40,602
suivi de 23 francs, ce qui va se passer,

236
00:18:40,819 --> 00:18:43,850
c'est qu'on va d'abord lire un entier, 
donc <i>i</i> contiendra 25,

237
00:18:43,985 --> 00:18:48,983
puis ensuite on va lire la fin de la ligne, 
ici jusqu'à <i>francs</i>

238
00:18:48,989 --> 00:18:52,101
donc <i>s1</i> contiendra
effectivement francs

239
00:18:52,191 --> 00:18:57,447
Puis enfin, on lira toute une ligne, 
donc on lira <i>23 Francs</i>

240
00:18:57,447 --> 00:18:59,156
Jusque là, pas de problème.

241
00:18:59,420 --> 00:19:05,312
Si on tape : 14 ; euros ; 43 ; 
que se passe-t-il ?

242
00:19:05,612 --> 00:19:08,664
Regardons pas à pas.

243
00:19:08,937 --> 00:19:15,142
On demande de lire
un entier : <i>i</i> contient <i>14</i>

244
00:19:15,485 --> 00:19:24,008
puis de lire la fin de la ligne : 
ici elle est vide.

245
00:19:24,378 --> 00:19:33,083
<i>s1</i> sera vide et on lira la ligne 
suivante, <i>euros</i> ira dans <i>s2</i>.

246
00:19:33,083 --> 00:19:38,887
Donc <i>s2</i> contiendra «euros».

247
00:19:38,887 --> 00:19:44,691
Ce qu'on voit ici,
c'est que la combinaison de

248
00:19:44,691 --> 00:19:50,495
<i>nextInt()</i> suivi de <i>nextLine()</i>
ne fonctionne pas toujours très bien.

249
00:19:50,695 --> 00:19:53,761
En particulier parce que 
l'utilisateur a tapé un retour à la ligne

250
00:19:54,215 --> 00:20:03,566
derrière le nombre entier <i>14</i> et la lecture 
de <i>nextLine()</i> après <i>nextInt()</i> tapé au clavier

251
00:20:03,566 --> 00:20:06,793
va aller lire la fin de la ligne 
qui correspond au retour à la ligne,

252
00:20:06,983 --> 00:20:10,441
à la touche <i>return</i>,
qu'a tapé l'utilisateur,

253
00:20:10,506 --> 00:20:14,638
parce que <i>nextInt()</i> arrête sa lecture 
juste après le nombre entier, ici <i>14</i>

254
00:20:14,888 --> 00:20:22,086
et ne lit pas lui-même
le caractère de retour, la touche <i>return</i>.

255
00:20:22,473 --> 00:20:24,461
Comment faire en pratique ?

256
00:20:24,836 --> 00:20:27,618
A chaque fois que vous devez lire un nombre

257
00:20:27,834 --> 00:20:31,700
avec <i>nextInt()</i> ou <i>nextDouble()</i> et 
que la lecture suivante est une ligne

258
00:20:31,970 --> 00:20:36,252
il faut anticiper la non lecture 
du retour à la ligne

259
00:20:36,652 --> 00:20:43,509
par <i>nextInt()</i> ou <i>nextDouble()</i> en 
rajoutant une lecture de cette fin de ligne

260
00:20:43,829 --> 00:20:53,374
un <i>nextLine()</i> supplémentaire inséré 
entre la lecture d'un entier

261
00:20:53,374 --> 00:20:56,389
ou d'un nombre décimal

262
00:20:56,389 --> 00:20:59,145
et celle du message suivant 
que vous voulez vraiment.

263
00:20:59,375 --> 00:21:06,333
Vous rajoutez une lecture dans 
une variable déclarée au préalable

264
00:21:06,333 --> 00:21:12,200
<i>String s = keyb.nextLine();</i>

265
00:21:12,954 --> 00:21:16,374
On pourra bien sûr, plus tard, 
lorsque l'on connaîtra

266
00:21:16,374 --> 00:21:18,599
les structures de contrôle et surtout 
les branchements conditionnels

267
00:21:18,850 --> 00:21:22,593
ou les boucles conditionnelles, 
on pourra vérifier que cette lecture de <i>s</i>

268
00:21:23,033 --> 00:21:27,547
est bien celle d'une chaîne vide et sinon,
la prendre comme message à lire

269
00:21:27,693 --> 00:21:35,240
ou si oui, prendre la lecture suivante
comme le message que l'on désire.
