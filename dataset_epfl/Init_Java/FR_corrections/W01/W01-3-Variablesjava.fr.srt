1
00:00:03,643 --> 00:00:06,410
Nous avons vu en guise d'introduction
les différentes étapes

2
00:00:06,410 --> 00:00:08,979
qui permettent d'aboutir 
à la création d'un programme.

3
00:00:08,979 --> 00:00:12,146
Nous savons qu'il faut commencer
par réfléchir, conceptualiser,

4
00:00:12,146 --> 00:00:15,458
imaginer la séquence d'instructions
que nous voulons mettre en oeuvre.

5
00:00:15,458 --> 00:00:18,831
Ensuite il va falloir traduire 
cette conception

6
00:00:18,831 --> 00:00:21,027
dans un langage de programmation,
comme java.

7
00:00:21,027 --> 00:00:22,911
On passera ensuite
par différentes phases,

8
00:00:22,911 --> 00:00:25,703
de compilations, de tests,
pour finalement aboutir

9
00:00:25,703 --> 00:00:28,912
à la création d'un programme 
exécutable sur un ordinateur.

10
00:00:28,912 --> 00:00:30,998
Nous allons maintenant entrer
dans le vif du sujet,

11
00:00:30,998 --> 00:00:33,567
et mettre en place
les briques de base

12
00:00:33,567 --> 00:00:35,620
qui nous permettront de commencer

13
00:00:35,620 --> 00:00:40,308
à écrire de petits programmes java
à partir d'une conception.

14
00:00:40,308 --> 00:00:42,410
Un programme n'est en fait rien d'autre

15
00:00:42,410 --> 00:00:45,395
qu'une séquence d'instructions 
opérant sur des données.

16
00:00:45,395 --> 00:00:49,613
La notion de séquence d'instruction
est assimilable à celle de traitement.

17
00:00:49,613 --> 00:00:51,801
Les traitement opèrent sur les données,

18
00:00:51,801 --> 00:00:54,005
ils peuvent en modifier les valeurs.

19
00:00:54,005 --> 00:00:57,228
A leur tour, les données 
ont une influence sur les traitements,

20
00:00:57,228 --> 00:01:00,116
puisque en fonction 
de la nature de ces données,

21
00:01:00,116 --> 00:01:04,147
différents types de traitement
vont être entrepris.

22
00:01:04,152 --> 00:01:06,216
Supposons par exemple
que je souhaite écrire

23
00:01:06,216 --> 00:01:07,763
un petit programme capable

24
00:01:07,763 --> 00:01:10,251
de résoudre une équation 
du second degré de cette nature.

25
00:01:10,251 --> 00:01:13,905
Je vais réfléchir à la séquence 
d'instructions à mettre en oeuvre.

26
00:01:13,905 --> 00:01:16,205
La première chose raisonnable 
à faire est sans doute

27
00:01:16,205 --> 00:01:21,641
de demander à l'utilisateur de fournir
les coefficients b et c,

28
00:01:21,641 --> 00:01:23,991
qui vont me permettre 
de savoir concrètement

29
00:01:23,991 --> 00:01:26,146
quelle équation 
je suis en train de résoudre.

30
00:01:26,146 --> 00:01:29,170
J'ai à disposition maintenant 
mes premières données.

31
00:01:29,170 --> 00:01:32,231
A partir de ces donnés, 
je peux faire d'autres traitements,

32
00:01:32,231 --> 00:01:35,064
comme par exemple le calcul du delta.

33
00:01:36,384 --> 00:01:39,093
Ensuite, en fonction 
de la valeur de ce delta,

34
00:01:39,093 --> 00:01:41,632
entreprendre différents traitements.

35
00:01:41,632 --> 00:01:43,666
Par exemple, si le delta est négatif,

36
00:01:43,666 --> 00:01:48,516
je vais simplement afficher
qu'il n'y a pas de solution.

37
00:01:52,136 --> 00:01:55,461
Sinon, il faudra traiter les autres cas.

38
00:01:55,461 --> 00:02:00,839
Par exemple, si le delta est nul,
je peux calculer la solution unique,

39
00:02:01,875 --> 00:02:03,620
et afficher cette solution.

40
00:02:06,075 --> 00:02:08,364
Et sinon, alors j'ai le cas 
des deux racines,

41
00:02:08,364 --> 00:02:11,418
que je ne vais pas traiter ici
de façon explicite.

42
00:02:12,550 --> 00:02:14,841
Ici, on peut voir très clairement
que les traitements

43
00:02:14,841 --> 00:02:16,528
ont une incidence sur les données.

44
00:02:16,528 --> 00:02:18,756
Par exemple ici,
je réalise un petit traitement

45
00:02:18,756 --> 00:02:21,528
qui consiste à calculer 
une expression arithmétique.

46
00:02:21,528 --> 00:02:23,930
Ce traitement a 
une incidence sur les données,

47
00:02:23,930 --> 00:02:27,113
puisque il va calculer 
une nouvelle donnée, qui est delta.

48
00:02:27,113 --> 00:02:28,603
Dans l'autre sens, on voit aussi

49
00:02:28,603 --> 00:02:30,812
que les données influent
sur les traitements.

50
00:02:30,812 --> 00:02:33,843
Typiquement ici, 
en fonction de la valeur du delta,

51
00:02:33,843 --> 00:02:36,991
je vais entreprendre différentes actions.

52
00:02:37,431 --> 00:02:41,035
Je peux faire sur cet exemple, 
deux observations importantes.

53
00:02:41,035 --> 00:02:44,978
La première est que la notion d'expression 
est tout à fait fondamentale

54
00:02:44,978 --> 00:02:48,078
pour commencer 
à exprimer des traitements.

55
00:02:48,078 --> 00:02:51,492
La notion d'expression va être un volet
que nous allons aborder

56
00:02:51,492 --> 00:02:53,341
dans le cadre de ce cours.

57
00:02:53,341 --> 00:02:56,420
Un deuxième aspect 
est lié à la notion de donnée.

58
00:02:56,420 --> 00:03:06,988
Ici, la donnée b² - 4c, est stockée 
dans un réceptacle qui est delta.

59
00:03:06,988 --> 00:03:09,726
J'ai besoin d'associer 
à cette donnée le nom delta

60
00:03:09,726 --> 00:03:13,067
car j'utilise ce delta à plusieurs 
endroits dans mon programme.

61
00:03:13,067 --> 00:03:16,615
Je veux pouvoir retrouver cette donnée
dès que j'en ai besoin.

62
00:03:16,615 --> 00:03:21,246
Le fait d'associer un nom à une donnée,
delta à b²-4c,

63
00:03:21,246 --> 00:03:25,078
est ce qu'on appelle en programmation, 
la notion de variable.

64
00:03:25,078 --> 00:03:30,384
C'est ce volet qui va nous occuper 
dans le cadre de cette vidéo.

65
00:03:31,864 --> 00:03:35,655
Le but de ce cours d'introduction
est d'introduire les briques de base,

66
00:03:35,655 --> 00:03:38,464
permettant de formuler 
des traitements de base

67
00:03:38,464 --> 00:03:41,214
et de manipuler des données 
de façon adéquate.

68
00:03:41,214 --> 00:03:44,168
Nous avons vu 
dans l'exemple qui précède,

69
00:03:44,168 --> 00:03:47,281
l'importance de la notion d'expression,

70
00:03:47,281 --> 00:03:49,529
à laquelle est associée 
la notion d'opérateur,

71
00:03:49,529 --> 00:03:51,963
que nous allons couvrir plus tard
dans le cours.

72
00:03:51,963 --> 00:03:54,872
Aujourd'hui, un des aspects 
que nous allons couvrir,

73
00:03:54,872 --> 00:03:57,988
est la notion de variables, 
qui est associée à la notion de données.

74
00:03:57,988 --> 00:03:59,834
La notion de variable va me permettre

75
00:03:59,834 --> 00:04:02,901
d'associer des données à un nom
dans un programme.

76
00:04:02,901 --> 00:04:06,855
Vous avez ici un petit aperçu 
du reste des fondamentaux,

77
00:04:06,855 --> 00:04:11,438
que nous étudierons le long de ce cours
d'introduction à la programmation.

78
00:04:12,858 --> 00:04:17,511
Une variable en programmation
est donc une zone en mémoire,

79
00:04:17,511 --> 00:04:22,469
qui possède un nom, que l'on va appeler 
usuellement un identificateur,

80
00:04:22,469 --> 00:04:26,854
dans laquelle on va pouvoir
stocker une valeur,

81
00:04:26,854 --> 00:04:28,397
ce que l'on peut voir ici.

82
00:04:28,397 --> 00:04:30,038
Et une chose tout à fait fondamentale,

83
00:04:30,038 --> 00:04:32,697
à laquelle on doit associer un type.

84
00:04:32,697 --> 00:04:35,766
Java est langage qui est exigeant 
sur le fait de spécifier

85
00:04:35,766 --> 00:04:38,506
le type des données 
que l'on souhaite manipuler.

86
00:04:38,506 --> 00:04:42,053
Dès l'instant où l'on souhaite 
utiliser une variable,

87
00:04:42,053 --> 00:04:43,680
une zone nommée en mémoire,

88
00:04:43,680 --> 00:04:46,667
il va être nécessaire 
de spécifier son type,

89
00:04:46,667 --> 00:04:49,256
quel genre de donnée on veut utiliser.

90
00:04:49,256 --> 00:04:53,295
Par exemple, il peut être nécessaire 
d'utiliser des données

91
00:04:53,295 --> 00:04:57,359
de type entier, 
de type chaîne de caractère.

92
00:04:59,240 --> 00:05:01,049
A chaque fois que je souhaite 
manipuler des données

93
00:05:01,049 --> 00:05:02,702
d'un genre particulier,

94
00:05:02,702 --> 00:05:05,959
je vais devoir le spécifier
au travers du type.

95
00:05:07,529 --> 00:05:09,649
Que faire ici dans un programme java,

96
00:05:09,649 --> 00:05:12,658
si je souhaite déclarer une variable,

97
00:05:12,658 --> 00:05:14,955
mémoriser une donnée 
au travers d'une variable ?

98
00:05:14,955 --> 00:05:17,643
Vous avez sous les yeux 
une petite coquille de programme

99
00:05:17,643 --> 00:05:20,403
prête à accueillir des instructions
et je vais déclarer une variable.

100
00:05:20,403 --> 00:05:24,085
Je dois d'abord décider du nom
qu'elle doit avoir,

101
00:05:24,085 --> 00:05:26,409
si possible un nom qui soit parlant,
qui dise quelque chose.

102
00:05:26,409 --> 00:05:28,317
Ici, j'appelle ce nom, nombre.

103
00:05:28,317 --> 00:05:31,417
Je dois décider d'une valeur initiale,
ici par exemple, quatre.

104
00:05:31,417 --> 00:05:35,245
Et bien sûr en java, 
je dois spécifier le type.

105
00:05:35,245 --> 00:05:37,437
Ici, je vais préciser 
que le nombre est un entier,

106
00:05:37,437 --> 00:05:40,468
et en java, on écrit entier int.

107
00:05:40,468 --> 00:05:42,447
La ligne de code 
que je viens d'écrire dans l'éditeur

108
00:05:42,447 --> 00:05:45,428
correspond à ce qu'on appelle
une déclaration de variable.

109
00:05:45,428 --> 00:05:46,967
On doit déclarer dans un programme

110
00:05:46,967 --> 00:05:50,063
le fait que l'on souhaite utiliser 
une variable d'un type donné.

111
00:05:50,063 --> 00:05:52,465
Vous avez ici deux exemples

112
00:05:52,465 --> 00:05:54,938
de déclarations valides 
de variables en java.

113
00:05:54,938 --> 00:05:57,009
Dans le premier cas, 
on donne une valeur initiale

114
00:05:57,009 --> 00:05:59,892
à la variable, 
au moment où on la déclare,

115
00:05:59,892 --> 00:06:03,048
et dans le second cas, 
on se contente de déclarer la variable

116
00:06:03,048 --> 00:06:05,937
sans pour autant lui donner
une valeur de départ.

117
00:06:05,937 --> 00:06:08,657
On retrouve ici les éléments fondamentaux

118
00:06:08,657 --> 00:06:11,324
de la syntaxe que j'ai introduite
tout à l'heure.

119
00:06:11,324 --> 00:06:15,071
Le type de la variable doit 
impérativement être spécifié,

120
00:06:15,071 --> 00:06:19,347
et évidemment, ce qu'on appelle son nom,
son identificateur.

121
00:06:20,993 --> 00:06:23,864
Comme nous venons de le voir,
au moment de sa déclaration,

122
00:06:23,864 --> 00:06:26,479
une variable peut être initialisée,

123
00:06:26,479 --> 00:06:31,072
c'est-à-dire qu'on peut
lui attribuer une valeur de départ,

124
00:06:31,072 --> 00:06:34,277
ce qui correspond 
à cette situation en mémoire,

125
00:06:34,277 --> 00:06:36,671
et qui correspond 
à quelque chose de souhaitable.

126
00:06:36,671 --> 00:06:37,861
Il est toujours souhaitable

127
00:06:37,861 --> 00:06:40,919
qu'une variable ait une valeur connue.

128
00:06:42,619 --> 00:06:45,799
Nous venons de voir 
qu'il est tout à fait possible en java,

129
00:06:45,799 --> 00:06:49,890
de déclarer une variable, sans 
pour autant lui donner de valeur initiale.

130
00:06:49,890 --> 00:06:52,343
Donc ici, je suis en train 
de déclarer une variable

131
00:06:52,343 --> 00:06:53,918
nCarré, de type int.

132
00:06:53,918 --> 00:06:55,864
Je ne lui donne pas de valeur de départ.

133
00:06:55,864 --> 00:06:59,008
Et donc ceci correspond 
à cette situation en mémoire.

134
00:06:59,008 --> 00:07:02,204
J'ai une variable nCarré,
qui ne stocke rien de connu.

135
00:07:02,204 --> 00:07:03,652
Ce qu'il faut savoir cependant,

136
00:07:03,652 --> 00:07:05,727
c'est que java ne permet pas, 
dans un programme,

137
00:07:05,727 --> 00:07:08,681
l'utilisation d'une variable 
non initialisée.

138
00:07:08,681 --> 00:07:12,267
Si l'on imagine, qu'après avoir déclaré 
cette variable nCarre,

139
00:07:12,267 --> 00:07:14,227
je souhaite en faire afficher la valeur,

140
00:07:14,227 --> 00:07:17,035
j'anticipe un peu 
sur une des séquence suivantes,

141
00:07:17,035 --> 00:07:19,140
qui va vous montrer comment 
afficher une valeur.

142
00:07:19,140 --> 00:07:21,438
Donc l'affichage de la variable nCarré,

143
00:07:21,438 --> 00:07:23,766
va se faire selon ce format là.

144
00:07:23,766 --> 00:07:27,000
Si j'essaye après la déclaration
de la variable directement,

145
00:07:27,000 --> 00:07:28,861
d'en faire afficher le contenu,

146
00:07:28,861 --> 00:07:31,496
je vais avoir une erreur 
à la compilation.

147
00:07:31,496 --> 00:07:33,581
Le compilateur va me rappeler à l'ordre,

148
00:07:33,581 --> 00:07:36,465
en me disant que nCarré 
n'est pas initialisé.

149
00:07:36,465 --> 00:07:38,455
Et du coup, je ne peux pas l'utiliser.

150
00:07:38,455 --> 00:07:42,659
Ceci présuppose toutefois,
que après avoir déclaré une variable

151
00:07:42,659 --> 00:07:44,205
sans lui donner de valeur,

152
00:07:44,205 --> 00:07:47,118
j'ai la possibilité de quand même 
lui donner une valeur plus tard.

153
00:07:47,118 --> 00:07:50,269
C'est ce que nous allons voir 
dans ce qui suit de la séquence,

154
00:07:50,269 --> 00:07:52,923
où nous allons voir 
la notion d'affectation,

155
00:07:52,923 --> 00:07:55,463
où il va être possible, 
après cette instruction,

156
00:07:55,463 --> 00:08:00,379
de modifier, de mettre une valeur
dans la variable nCarré,

157
00:08:00,379 --> 00:08:03,594
par ce qu'on appelle l'affectation.

158
00:08:04,694 --> 00:08:06,722
Concernant les types, nous avons 
déjà eu l'occasion

159
00:08:06,722 --> 00:08:08,571
de croiser dans les exemples précédents,

160
00:08:08,571 --> 00:08:11,123
le type entier, 
qui en java, s'écrit int.

161
00:08:11,123 --> 00:08:13,847
Donc si je veux utiliser une donnée
qui correspond à un entier,

162
00:08:13,847 --> 00:08:15,562
je vais utiliser le type int.

163
00:08:15,562 --> 00:08:18,244
Bien évidemment,
il existe d'autres types utilisables.

164
00:08:18,244 --> 00:08:21,669
Par exemple, si je souhaite utiliser 
des nombres décimaux,

165
00:08:21,669 --> 00:08:24,185
je peux utiliser le type prédéfini double,

166
00:08:24,185 --> 00:08:28,129
qui va justement me permettre 
de travailler avec des variables

167
00:08:28,129 --> 00:08:29,719
de type décimal.

168
00:08:29,719 --> 00:08:31,407
Ce qu'il faut absolument savoir,

169
00:08:31,407 --> 00:08:34,276
c'est qu'une fois qu'on fait
une déclaration de cette nature,

170
00:08:34,276 --> 00:08:36,878
chaque variable déclarée possède un type,

171
00:08:36,878 --> 00:08:40,498
et ce type va rester inchangé
tout au long du programme.

172
00:08:40,498 --> 00:08:42,462
On ne peut pas changer
le type de la variable,

173
00:08:42,462 --> 00:08:43,880
une fois la déclaration faite.

174
00:08:43,880 --> 00:08:46,119
Ce qui veut dire concrètement ici,

175
00:08:46,119 --> 00:08:51,882
que la variable n 
ne peut contenir que des entiers,

176
00:08:51,882 --> 00:08:56,919
la variable x ne peut contenir
que des nombres décimaux.

177
00:08:58,360 --> 00:08:59,978
Pour résumer ce que nous venons de voir,

178
00:08:59,978 --> 00:09:03,871
la déclaration d'une variable en java,
se fait selon la syntaxe suivante :

179
00:09:03,871 --> 00:09:06,064
il faut préciser le type de la variable,

180
00:09:06,064 --> 00:09:08,506
suivi de son identificateur,
de son nom,

181
00:09:08,506 --> 00:09:10,950
et ne pas oublier 
le fameux petit point virgule (;)

182
00:09:10,950 --> 00:09:13,139
qui clôt l'instruction de déclaration.

183
00:09:13,139 --> 00:09:15,596
Nous avons également vu
qu'il était toujours souhaitable

184
00:09:15,596 --> 00:09:18,570
de donner une valeur de départ
à notre variable

185
00:09:18,570 --> 00:09:20,070
au moment de sa déclaration.

186
00:09:20,070 --> 00:09:21,926
Nous allons plutôt privilégier

187
00:09:21,926 --> 00:09:24,496
une instruction 
de déclaration initialisation,

188
00:09:24,496 --> 00:09:26,007
qui prend l'allure suivante :

189
00:09:26,007 --> 00:09:28,598
type de la variable, suivi de son nom,

190
00:09:28,598 --> 00:09:31,769
et puis après le =, 
sa valeur de départ.

191
00:09:31,769 --> 00:09:33,636
Toujours le point virgule à la fin,

192
00:09:33,636 --> 00:09:37,202
pour clore l'instruction 
de déclaration initialisation.

193
00:09:37,202 --> 00:09:39,733
Une fois le type de la variable défini,

194
00:09:39,733 --> 00:09:44,091
il est clair qu'il ne peut plus
changer plus tard.

195
00:09:45,224 --> 00:09:49,207
Il est licite en java de déclarer
plusieurs variables sur une même ligne.

196
00:09:49,207 --> 00:09:52,716
On va déclarer sur une même ligne
des variables du même type,

197
00:09:52,716 --> 00:09:55,469
ce qui veut dire que l'on spécifie 
le type qu'une seule fois.

198
00:09:55,469 --> 00:09:59,287
Ici, on a la déclaration de
deux variables p et q, de type entier,

199
00:09:59,287 --> 00:10:02,047
et on sépare la déclaration
des différentes variables,

200
00:10:02,047 --> 00:10:04,201
au moyen de la virgule.

201
00:10:04,201 --> 00:10:06,117
Vous avez ici, un second exemple,

202
00:10:06,117 --> 00:10:08,666
où je déclare deux double 
sur la même ligne.

203
00:10:08,666 --> 00:10:11,485
La différence avec l'exemple précédent,

204
00:10:11,485 --> 00:10:17,224
est que pour y, 
je ne donne pas de valeur initiale,

205
00:10:18,691 --> 00:10:21,038
ce qui est aussi possible.

206
00:10:21,038 --> 00:10:22,795
En terme de méthodologie,

207
00:10:22,795 --> 00:10:26,133
gardez à l'esprit qu'il ne faut pas 
abuser de ce genre de tournure

208
00:10:26,133 --> 00:10:29,700
car elles peuvent nuire 
à la lisibilité du programme.

209
00:10:30,680 --> 00:10:33,053
Il existe un certain nombre 
de règles à respecter,

210
00:10:33,053 --> 00:10:35,316
lorsque l'on choisit un identificateur
pour une variable.

211
00:10:35,316 --> 00:10:38,083
Il faudra faire en sorte 
que cet identificateur

212
00:10:38,083 --> 00:10:40,444
soit constitué uniquement 
de lettres, de chiffres,

213
00:10:40,444 --> 00:10:44,412
ou de l'un des symboles spéciaux, 
souligné (_) ou dollar ($).

214
00:10:44,412 --> 00:10:47,666
Le premier caractère doit 
nécessairement être une lettre,

215
00:10:47,666 --> 00:10:49,793
il peut aussi être 
l'un des symboles spéciaux,

216
00:10:49,793 --> 00:10:51,211
souligné (_) ou dollar ($),

217
00:10:51,211 --> 00:10:53,929
mais cela ne fait pas partie
des conventions usuellement utilisées

218
00:10:53,929 --> 00:10:56,890
par les programmeurs java, 
dont nous reparlerons plus loin.

219
00:10:56,890 --> 00:10:58,372
Bien entendu, l'identificateur

220
00:10:58,372 --> 00:11:01,408
ne doit pas être un mot-clé 
réservé du langage java.

221
00:11:01,408 --> 00:11:04,822
Et les majuscules et minuscules
sont autorisées,

222
00:11:04,822 --> 00:11:06,359
mais elles ne sont pas équivalentes.

223
00:11:06,359 --> 00:11:11,327
Par exemple, si je choisis l'identificateur
ligne commençant par un petit l,

224
00:11:11,327 --> 00:11:14,452
il n'est pas équivalent
à l'identificateur Ligne,

225
00:11:14,452 --> 00:11:16,414
commençant avec un grand L.

226
00:11:16,414 --> 00:11:19,604
Vous avez donc ici des exemples
typiques d'identificateurs valides.

227
00:11:19,604 --> 00:11:23,320
Ici, constitués d'un ensemble 
de lettres uniquement,

228
00:11:23,320 --> 00:11:25,828
ici, constitués d'un ensemble 
de lettres et de chiffres,

229
00:11:25,828 --> 00:11:29,659
et ici, vous avez un certain nombre
d'identificateurs invalides.

230
00:11:29,659 --> 00:11:32,872
Ici, un identificateur ne peut pas 
contenir d'espace

231
00:11:32,872 --> 00:11:37,642
ni le symbole moins (-), et ne peut pas
commencer par un chiffre.

232
00:11:37,642 --> 00:11:41,406
En plus des règles de nommage
imposées par le langage java,

233
00:11:41,406 --> 00:11:43,038
et qu'il faut strictement respecter,

234
00:11:43,038 --> 00:11:45,319
il existe un certain nombre
de conventions usuelles,

235
00:11:45,319 --> 00:11:47,887
qui elles, ne sont pas requises 
par le compilateur

236
00:11:47,887 --> 00:11:51,761
mais que néanmoins, la plupart
des programmeurs java respectent.

237
00:11:51,761 --> 00:11:54,302
Typiquement, vous trouverez
le nommage des variables

238
00:11:54,302 --> 00:11:55,728
sous cette forme là.

239
00:11:55,728 --> 00:11:59,830
Si le nom de la variable, l'identificateur
est constitué de plusieurs mots,

240
00:11:59,830 --> 00:12:01,499
on va séparer les mots,

241
00:12:01,499 --> 00:12:05,361
en commençant chacun des mots
par une majuscule,

242
00:12:05,361 --> 00:12:08,342
et avec la convention 
que tout identificateur de variable

243
00:12:08,342 --> 00:12:10,314
commence plutôt par une minuscule.

244
00:12:10,314 --> 00:12:12,507
Donc vous allez trouver 
ce genre de tournure,

245
00:12:12,507 --> 00:12:15,276
plutôt que celle-ci, 
qui commence par une majuscule,

246
00:12:15,276 --> 00:12:19,135
ou celle-là, 
où on utilise des soulignés (_).

247
00:12:19,605 --> 00:12:21,892
Nous avons donc vu que la notion de type

248
00:12:21,892 --> 00:12:24,946
était essentielle pour déclarer
une variable en java.

249
00:12:24,946 --> 00:12:28,615
Les deux types élémentaires à disposition
pour manipuler des données numériques,

250
00:12:28,615 --> 00:12:31,489
c'est-à-dire pour déclarer 
des variables de type numérique,

251
00:12:31,489 --> 00:12:34,724
sont int et double, que nous avons eu
l'occasion de croiser,

252
00:12:34,724 --> 00:12:36,703
dans divers exemples précédemment.

253
00:12:36,703 --> 00:12:39,702
Bien évidemment, il existe 
de nombreux autres types prédéfinis.

254
00:12:39,702 --> 00:12:41,742
A titre d'exemple, si dans un programme,

255
00:12:41,742 --> 00:12:44,699
j'ai besoin de manipuler 
les caractères usuels de l'alphabet,

256
00:12:44,699 --> 00:12:46,543
comme par exemple A et Z,

257
00:12:46,543 --> 00:12:50,263
je peux avoir recours 
au type prédéfini char.

258
00:12:50,263 --> 00:12:52,208
Nous aurons l'occasion 
tout au long du cours

259
00:12:52,208 --> 00:12:55,768
de revenir sur les types 
prédéfinis en java.

260
00:12:56,018 --> 00:12:58,583
Vous savez maintenant 
déclarer une variable,

261
00:12:58,583 --> 00:13:00,991
ce qui va vous permettre 
de mémoriser une donnée,

262
00:13:00,991 --> 00:13:02,875
utilisable dans un programme.

263
00:13:02,875 --> 00:13:05,614
Que faire maintenant si l'on souhaite
changer la valeur d'une variable,

264
00:13:05,614 --> 00:13:07,599
qu'on a au préalable déclarée ?

265
00:13:07,599 --> 00:13:10,263
Pour cela, il faut utiliser
la notion d'affectation.

266
00:13:10,263 --> 00:13:12,345
Nous avons déjà eu 
l'occasion d'en croiser

267
00:13:12,345 --> 00:13:14,402
quelques exemples informels.

268
00:13:14,402 --> 00:13:17,967
Pour réaliser une affectation, 
je vais utiliser le symbole égal (=),

269
00:13:17,967 --> 00:13:20,228
en respectant la syntaxe suivante.

270
00:13:20,228 --> 00:13:24,544
A gauche de l'expression, je spécifie
l'identificateur de la variable,

271
00:13:24,544 --> 00:13:26,609
ensuite évidemment 
mon symbole égal (=),

272
00:13:26,609 --> 00:13:28,720
et finalement la nouvelle valeur

273
00:13:28,720 --> 00:13:31,890
que je veux désormais stocker
dans ma variable.

274
00:13:31,890 --> 00:13:33,602
Il est très important de comprendre,

275
00:13:33,602 --> 00:13:37,344
nous aurons l'occasion d'en discuter
un peu plus loin,

276
00:13:37,344 --> 00:13:40,416
qu'une affectation n'est pas 
une égalité mathématique.

277
00:13:40,416 --> 00:13:43,282
Son rôle est de changer 
la valeur d'une variable

278
00:13:43,282 --> 00:13:45,794
en cours d'exécution d'un programme.

279
00:13:45,794 --> 00:13:50,011
Supposons que dans un programme, 
j'ai déclaré deux variables n et nCarré.

280
00:13:50,011 --> 00:13:52,864
N a été déclaré et initialisé à 4,

281
00:13:52,864 --> 00:13:55,251
alors que nCarré n'a pas été initialisé.

282
00:13:55,251 --> 00:13:58,757
Je souhaite mettre une valeur dans nCarré,
en utilisant la notion d'affectation.

283
00:13:58,757 --> 00:14:01,858
Comment va se dérouler 
une affectation de cette nature ?

284
00:14:01,858 --> 00:14:05,123
Il faut savoir que l'exécution 
d'une telle instruction

285
00:14:05,123 --> 00:14:07,194
va se décomposer en deux temps.

286
00:14:07,194 --> 00:14:09,176
La première chose qui va être réalisée,

287
00:14:09,176 --> 00:14:14,064
c'est l'évaluation de l'expression,
qui est à droite du symbole =.

288
00:14:14,064 --> 00:14:16,955
Donc ici, cette évaluation
va me donner la valeur 16.

289
00:14:16,955 --> 00:14:23,283
Dans un second temps, 
je vais stocker la valeur ainsi évaluée

290
00:14:23,283 --> 00:14:26,348
dans la variable nCarré.

291
00:14:26,348 --> 00:14:27,812
Ce qui me donne ici, pour résultat,

292
00:14:27,812 --> 00:14:31,433
d'avoir dans la variable nCarré
la valeur 16.

293
00:14:33,493 --> 00:14:36,969
Pour résumer, la syntaxe de l'affectation 
en java est la suivante :

294
00:14:36,969 --> 00:14:39,549
on donne le nom de la variable,
suivi du symbole égal (=),

295
00:14:39,549 --> 00:14:42,646
et suivi d'une expression valide en java.

296
00:14:42,646 --> 00:14:45,566
L'expression peut être quelque chose
de tout à fait élémentaire,

297
00:14:45,566 --> 00:14:46,986
comme ici, une valeur littérale,

298
00:14:46,986 --> 00:14:49,719
comme ça peut être quelque chose 
de plus complexe, comme ici.

299
00:14:49,719 --> 00:14:53,549
Nous aurons l'occasion de revenir
plus en détails sur les expressions.

300
00:14:53,549 --> 00:14:57,434
La chose importante à respecter
est que l'expression

301
00:14:57,434 --> 00:14:59,268
doit calculer une valeur,

302
00:14:59,268 --> 00:15:02,365
qui doit être du même type 
que la variable.

303
00:15:02,365 --> 00:15:04,174
Petit détail syntaxique à nouveau,

304
00:15:04,174 --> 00:15:09,222
ne pas oublier le point virgule (;)
à la fin de l'instruction d'affectation.

305
00:15:09,222 --> 00:15:11,079
Revenons maintenant un peu

306
00:15:11,079 --> 00:15:14,253
sur la comparaison entre égalité
mathématique et affectation.

307
00:15:14,253 --> 00:15:16,693
Toutes les deux vont utiliser 
le signe égal (=)

308
00:15:16,693 --> 00:15:18,316
et la notion de variables.

309
00:15:18,316 --> 00:15:21,632
Simplement, si en mathématique je rédige
ce genre d'expressions,

310
00:15:21,632 --> 00:15:23,666
je signifie que les variables a et b,

311
00:15:23,666 --> 00:15:26,133
auront toujours les mêmes valeurs
au cours du temps.

312
00:15:26,133 --> 00:15:28,530
Par contre, l'affectation en programmation

313
00:15:28,530 --> 00:15:31,044
est un mécanisme différent
car il va être dynamique,

314
00:15:31,044 --> 00:15:32,874
donc va dépendre du temps.

315
00:15:32,874 --> 00:15:34,527
Prenons un cas concret.

316
00:15:34,527 --> 00:15:39,965
Imaginons ici que a stocke la valeur 1,
et b stocke la valeur 2.

317
00:15:39,965 --> 00:15:42,881
Si j'exécute maintenant 
cette première instruction,

318
00:15:42,881 --> 00:15:44,603
je commence, 
comme on l'a vu tout à l'heure,

319
00:15:44,603 --> 00:15:47,844
par évaluer l'expression,
qui est à droite de l'affectation,

320
00:15:47,844 --> 00:15:49,830
ce qui va me donner 2.

321
00:15:49,830 --> 00:15:53,480
Et ensuite je vais stocker cette valeur,
ce 2 dans la variable a,

322
00:15:53,480 --> 00:15:56,095
ce qui me produit le résultat suivant.

323
00:15:56,095 --> 00:15:58,861
Maintenant, prenons le cas 
de la seconde instruction,

324
00:15:58,861 --> 00:16:01,655
et plaçons-nous dans 
les mêmes conditions de départ,

325
00:16:01,655 --> 00:16:04,277
avec un a stockant 1, 
et un b stockant 2.

326
00:16:04,277 --> 00:16:06,641
Si j'exécute maintenant cette instruction,

327
00:16:06,641 --> 00:16:10,611
comme tout à l'heure, j'évalue
ce qui est à droite de l'affectation a,

328
00:16:10,611 --> 00:16:11,919
qui me retourne 1.

329
00:16:11,919 --> 00:16:16,418
Et ensuite, je stocke ce 1 dans b,
ce qui me donne cette situation.

330
00:16:16,418 --> 00:16:19,670
Donc on voit bien qu'en programmation,
dans les deux cas,

331
00:16:19,670 --> 00:16:23,990
a et b, ont les mêmes valeurs,

332
00:16:23,990 --> 00:16:27,387
mais ce ne sont pas les mêmes valeurs
au cours du temps.

333
00:16:27,387 --> 00:16:30,521
Qui plus est, si plus tard,
l'une des deux variables est modifiée,

334
00:16:30,521 --> 00:16:31,909
l'autre ne l'est pas.

335
00:16:31,909 --> 00:16:34,260
Par exemple, si a 
est ensuite modifié en 3,

336
00:16:34,260 --> 00:16:39,681
b garde sa propre valeur, par exemple 1,
dans la seconde affectation.

337
00:16:39,681 --> 00:16:41,927
Autre exemple, si en mathématiques,

338
00:16:41,927 --> 00:16:46,362
je rédige une relation de cette nature,
je signifie que a et b vont toujours

339
00:16:46,362 --> 00:16:49,153
vérifier cette relation au cours du temps.

340
00:16:49,153 --> 00:16:52,633
Par contre, si j'écris strictement
la même chose en programmation,

341
00:16:52,633 --> 00:16:55,818
on verra que l'incidence sur a et b
est différente.

342
00:16:55,818 --> 00:16:58,489
Donc ici, je commence par exécuter
cette instruction,

343
00:16:58,489 --> 00:17:02,505
ce qui aura pour issue 
de stocker 5 dans a.

344
00:17:02,505 --> 00:17:05,961
Ensuite j'exécute 
cette instruction d'affectation,

345
00:17:05,961 --> 00:17:08,179
comme on l'a vu tout à l'heure,
on va donc évaluer a + 1,

346
00:17:08,179 --> 00:17:11,602
qui nous produit 6,
puis ensuite stocker ce 6 dans b,

347
00:17:11,602 --> 00:17:13,687
ce qui me produit ce résultat.

348
00:17:13,687 --> 00:17:18,319
A ce stade, on a effectivement
que a et b respectent cette relation.

349
00:17:18,319 --> 00:17:20,502
Par contre, si je passe 
à l'instruction suivante,

350
00:17:20,502 --> 00:17:23,615
donc ici je vais modifier la valeur de a
pour y stocker un 2,

351
00:17:23,615 --> 00:17:27,614
et à ce moment, on voit que 
la relation n'est plus respectée.

352
00:17:27,614 --> 00:17:29,612
En raison de ce que nous venons de voir,

353
00:17:29,612 --> 00:17:33,641
il est licite en programmation,
d'écrire ce genre de tournure.

354
00:17:33,641 --> 00:17:36,343
C'est d'ailleurs une tournure très utile,
que vous allez rencontrer

355
00:17:36,343 --> 00:17:38,078
de façon récurrente dans des exemples.

356
00:17:38,078 --> 00:17:41,167
Que se passe-t-il si j'exécute 
ce genre d'instructions ?

357
00:17:41,167 --> 00:17:44,021
Partons d'un cas concret, 
avec un a initialisé à 1.

358
00:17:44,021 --> 00:17:45,571
Comme nous l'avons vu tout à l'heure,

359
00:17:45,571 --> 00:17:49,829
on commence par évaluer cette partie
de l'affectation, qui produit 2,

360
00:17:49,829 --> 00:17:52,726
et seulement dans un second temps,
on va mettre ce 2 dans a,

361
00:17:52,726 --> 00:17:54,348
ce qui produit ce résultat.

362
00:17:54,348 --> 00:17:56,952
Donc lorsque j'écris ce genre de choses
en programmation,

363
00:17:56,952 --> 00:17:59,936
je ne signifie pas que,
comme en mathématiques,

364
00:17:59,936 --> 00:18:03,653
que la relation a = a + 1
doit toujours être respectée,

365
00:18:03,653 --> 00:18:05,143
ce qui peut me poser des problèmes

366
00:18:05,143 --> 00:18:07,277
en mathématiques, ici en l'occurrence.

367
00:18:07,277 --> 00:18:09,473
Je signifie simplement 
que je suis en train

368
00:18:09,473 --> 00:18:12,555
d'augmenter de 1 la valeur de a.

369
00:18:12,555 --> 00:18:15,697
Dernier volet lié aux fondamentaux 
sur les variables,

370
00:18:15,697 --> 00:18:17,624
la notion de constante.

371
00:18:17,624 --> 00:18:20,903
Nous avons vu que l'affectation 
nous permet de modifier

372
00:18:20,903 --> 00:18:23,384
la valeur d'une variable
après sa déclaration.

373
00:18:23,384 --> 00:18:26,279
Il existe cependant des situations
où ceci n'est pas souhaitable.

374
00:18:26,279 --> 00:18:29,501
Par exemple, j'ai un programme
qui veut travailler

375
00:18:29,501 --> 00:18:31,138
avec la vitesse de la lumière.

376
00:18:31,138 --> 00:18:34,071
On sait que cette vitesse de la lumière
est constante,

377
00:18:34,071 --> 00:18:37,170
tout au long de l'exécution du programme,
ne va pas changer.

378
00:18:37,170 --> 00:18:40,058
Donc on va préciser que cette donnée
ne peut pas changer.

379
00:18:40,058 --> 00:18:43,669
Dans ce cas là, il faut le faire
en précédant la déclaration

380
00:18:43,669 --> 00:18:47,335
de la variable en question
par le mot réservé final,

381
00:18:47,335 --> 00:18:50,835
qui veut dire, qu'une fois 
une valeur de base attribuée,

382
00:18:50,835 --> 00:18:54,049
on ne peut plus modifier la valeur
de cette variable.

383
00:18:54,049 --> 00:18:58,094
Donc ici par exemple, si j'ai déclaré
ma constante comme ceci,

384
00:18:58,094 --> 00:18:59,807
la constante VITESSE_DE_LA_LUMIERE,

385
00:18:59,807 --> 00:19:02,619
si par la suite, j'essaie 
d'en altérer la valeur

386
00:19:02,619 --> 00:19:07,092
au moyen d'une affectation,
j'aurai une erreur de compilation.

387
00:19:08,092 --> 00:19:10,768
Vous noterez au passage qu'il existe
des conventions

388
00:19:10,768 --> 00:19:12,437
pour le nommage des constantes en java,

389
00:19:12,437 --> 00:19:15,878
ici l'identificateur de ma constante
VITESSE_DE_LA_LUMIERE

390
00:19:15,878 --> 00:19:19,386
est constitué de différents mots,
tout s'écrit en majuscule

391
00:19:19,386 --> 00:19:21,695
et séparé par des soulignés (_).

392
00:19:21,695 --> 00:19:24,494
Il s'agit là d'une convention usuelle
de nommage pour les constantes,

393
00:19:24,494 --> 00:19:26,615
à laquelle je vous recommande d'adhérer.
