1
00:00:03,749 --> 00:00:07,615
Nous avons vu ce qu'était conceptuellement
la notion de tableaux en programmation.

2
00:00:07,615 --> 00:00:11,334
Et nous avons également vu qu'il existe
différents types de tableaux, selon que

3
00:00:11,334 --> 00:00:16,567
la taille du tableau est connue a priori,
ou que cette taille peut évoluer ou pas

4
00:00:16,567 --> 00:00:18,187
pendant l'exécution du programme.

5
00:00:18,187 --> 00:00:20,830
Il est temps maintenant de passer
aux choses concrètes et de voir comment

6
00:00:20,830 --> 00:00:23,712
en Java on peut manipuler un tableau
de taille fixe.

7
00:00:25,310 --> 00:00:28,556
Lorsque je souhaite manipuler une donnée
dans un programme, je sais que je dois

8
00:00:28,556 --> 00:00:31,359
le faire au travers d'une variable.
Par exemple, si mon programme doit

9
00:00:31,359 --> 00:00:35,545
utiliser une donnée de type double,
je vais déclarer une variable de type

10
00:00:35,545 --> 00:00:38,899
double et lui donner un nom. C'est
exactement la même chose avec un tableau :

11
00:00:38,899 --> 00:00:44,365
je dois déclarer une variable de type
tableau. Ici je dois indiquer le type

12
00:00:44,365 --> 00:00:47,418
des éléments contenus dans le tableau ;
et le fait qu'il s'agisse d'un tableau est

13
00:00:47,418 --> 00:00:52,873
ici indiqué par cette paire de crochets
qui précède la déclaration de la variable.

14
00:00:52,873 --> 00:00:58,816
Donc ici nous avons à nouveau un nom de
variable et un type qui correspond ici

15
00:00:58,816 --> 00:01:03,800
au type « tableau de taille fixe d'entiers ».
Il existe en Java une syntaxe alternative ;

16
00:01:03,800 --> 00:01:07,826
donc la ligne que nous venons de voir ici,
peut également s'écrire de cette façon

17
00:01:07,826 --> 00:01:13,683
en Java. Donc au même titre que cette
ligne correspond à la déclaration

18
00:01:13,683 --> 00:01:17,877
d'une variable de type double, les lignes
que vous avez ici correspondent

19
00:01:17,877 --> 00:01:22,970
à la déclaration d'une variable « score »
de type tableau d'entiers de taille fixe.

20
00:01:23,304 --> 00:01:26,646
Et nous allons naturellement nous poser
la question de comment initialiser

21
00:01:26,646 --> 00:01:28,929
un tableau ainsi déclaré.

22
00:01:30,453 --> 00:01:33,527
Alors deux techniques sont classiquement
utilisées pour mettre des valeurs

23
00:01:33,527 --> 00:01:36,732
dans un tableau. Je peux mettre des
valeurs dans un tableau au moment

24
00:01:36,732 --> 00:01:40,672
où je le déclare ; donc première situation
possible. Donc, de la même façon que

25
00:01:40,672 --> 00:01:45,280
au moment où je déclare une variable
de type double, je peux lui affecter une

26
00:01:45,280 --> 00:01:49,869
valeur de départ -- donc ça correspond à une
déclaration-initialisation -- je peux faire

27
00:01:49,869 --> 00:01:55,428
la même chose pour un tableau. Donc
ceci présuppose que je connais

28
00:01:55,428 --> 00:01:59,353
les éléments que je veux y mettre a priori.
Et j'utilise une syntaxe particulière :

29
00:01:59,353 --> 00:02:03,002
ces accolades que nous allons voir
formellement un peu plus en détail

30
00:02:03,002 --> 00:02:07,077
plus loin. Donc ici, ceci correspond à une
situation de déclaration-initialisation

31
00:02:07,077 --> 00:02:11,031
d'un tableau qui correspond à
la situation 1. Deuxième situation,

32
00:02:11,031 --> 00:02:16,412
c'est exactement la même chose que
pour un double lorsque je le déclare

33
00:02:16,412 --> 00:02:23,483
puis ensuite lui mets une valeur ; je peux
faire la même chose pour un tableau.

34
00:02:23,483 --> 00:02:28,434
Donc je peux me contenter de le déclarer,
et puis dans des instructions qui suivent

35
00:02:28,434 --> 00:02:31,598
le remplir élément par élément.

36
00:02:33,454 --> 00:02:36,984
Donc comme nous venons de le voir,
si je connais a priori les éléments

37
00:02:36,984 --> 00:02:40,025
à mettre dans le tableau au moment où
je le déclare, je peux me contenter d'une

38
00:02:40,025 --> 00:02:43,391
seule et unique instruction de
déclaration-initialisation pour

39
00:02:43,391 --> 00:02:48,461
déclarer un tableau et mettre des valeurs
dedans. Donc très concrètement, voici

40
00:02:48,461 --> 00:02:53,835
les étapes à observer. Je dois
déclarer un tableau, ce que je fais

41
00:02:53,835 --> 00:02:58,913
de cette façon là.
Ensuite, je dois indiquer les éléments

42
00:02:58,913 --> 00:03:05,826
à mettre dans le tableau entre accolades.
Et ensuite, je dois mettre des éléments

43
00:03:05,826 --> 00:03:12,570
dans ce tableau, et chaque élément,
différents éléments vont être séparés

44
00:03:12,570 --> 00:03:17,775
par des virgules. Donc voici les
différents éléments de syntaxe que je

45
00:03:17,775 --> 00:03:22,947
dois observer pour déclarer-initialiser
un tableau de taille fixe en Java.

46
00:03:24,173 --> 00:03:26,728
Voyons maintenant à quelle situation
mémoire cela correspond.

47
00:03:26,728 --> 00:03:31,379
Avant d'étudier en détails la notion de
tableaux de taille fixe en Java,

48
00:03:31,379 --> 00:03:35,187
et puisque nous commençons à manipuler
des données de types évolués, il est

49
00:03:35,187 --> 00:03:38,994
important de comprendre qu'en Java,
les données de types de base et les

50
00:03:38,994 --> 00:03:42,867
données de types composés, évolués,
ne sont pas stockées en mémoire

51
00:03:42,867 --> 00:03:49,352
de la même façon. Par exemple, ici
si je déclare une variable « x » de type

52
00:03:49,384 --> 00:03:53,581
élémentaire, il faut savoir que lorsque
je manipule une variable de type de base

53
00:03:53,581 --> 00:03:57,355
et bien cette variable va directement
stocker la valeur. Ce qu'on peut

54
00:03:57,355 --> 00:04:03,440
voir ici dans ce petit schéma, la variable
« x » stocke directement la valeur qui lui

55
00:04:03,440 --> 00:04:07,629
est associée. Ceci n'est pas le cas quand
je commence à manipuler des données

56
00:04:07,629 --> 00:04:09,074
de types évolués.

57
00:04:09,431 --> 00:04:12,401
Les données de types évolués, comme par
exemple des tableaux ou des chaînes de

58
00:04:12,401 --> 00:04:17,582
caractères, que nous allons voir dans des
séquences ultérieures sont en fait

59
00:04:17,582 --> 00:04:21,137
stockées au moyen de références,
d'indirections, des adresses.

60
00:04:21,316 --> 00:04:25,899
Par exemple, si je déclare une variable de
type chaîne de caractères, nous allons

61
00:04:25,899 --> 00:04:30,453
voir qu'il existe un type pour cela qui
s'appelle <i>string</i>, alors la situation

62
00:04:30,453 --> 00:04:34,992
en mémoire est la suivante : la variable
« v » ne stocke pas directement la valeur

63
00:04:34,992 --> 00:04:40,822
chaîne de caractères associée, mais stocke
une référence, une adresse, vers

64
00:04:40,822 --> 00:04:46,267
la chaîne de caractères en question.
Et ceci a une grande incidence sur

65
00:04:46,267 --> 00:04:50,557
la sémantique de l'affectation en Java.
Par exemple, imaginez que j'affecte

66
00:04:50,557 --> 00:04:55,201
une variable « v2 » à une variable « v1 »,
qu'est-ce que cela signifie maintenant

67
00:04:55,201 --> 00:05:00,481
concrètement ? Suis-je en train de
modifier la référence stockée dans « v1 » ?

68
00:05:00,481 --> 00:05:04,239
Ou suis-je en train de modifier l'objet
qui est référencé par « v1 » ?

69
00:05:04,239 --> 00:05:09,423
De la même façon, la sémantique
de l'opérateur « == » est également

70
00:05:09,423 --> 00:05:14,612
impactée. Que veut dire comparer « v1 »
et « v2 » ? Suis-je en train de comparer des

71
00:05:14,612 --> 00:05:18,715
références ? Suis-je en train de comparer
les chaînes pointées ?

72
00:05:18,715 --> 00:05:22,028
Nous allons voir aussi qu'il existe une
incidence par rapport à l'affichage.

73
00:05:22,028 --> 00:05:27,853
Si par exemple j'affiche un objet de
type composé. Que suis-je en train

74
00:05:27,853 --> 00:05:33,664
d'afficher ? Une adresse ? Ou l'objet
référencé ? Donc toutes ces questions

75
00:05:33,664 --> 00:05:37,131
vont se poser lorsque je manipule des
objets de types composés dans un

76
00:05:37,131 --> 00:05:41,237
programme Java.

77
00:05:41,237 --> 00:05:43,986
En Java, un tableau est une donnée de
type évolué, il est donc manipulé

78
00:05:43,986 --> 00:05:47,714
au travers d'une indirection, d'une
référence. Donc par exemple

79
00:05:47,714 --> 00:05:51,633
si je déclare-initialise une variable
« score » de type tableau d'entiers

80
00:05:51,633 --> 00:05:55,913
de taille fixe de cette façon là.
La situation en mémoire va être la suivante

81
00:05:55,913 --> 00:06:00,812
la variable « score » ne contient pas
directement les valeurs du tableau,

82
00:06:00,812 --> 00:06:04,893
elle contient une indirection, une
référence, une adresse vers le tableau.

83
00:06:04,893 --> 00:06:09,642
On suppose que l'adresse du tableau
est ici. Et donc dans la variable « score »

84
00:06:09,642 --> 00:06:15,236
je stocke uniquement la référence
vers ce tableau. En terme de jargon,

85
00:06:15,236 --> 00:06:20,140
on va dire que la variable « score »
référence ou pointe vers un tableau de <i>int</i>

86
00:06:22,143 --> 00:06:24,940
Nous venons de voir comment il est
possible de déclarer-initialiser en une

87
00:06:24,940 --> 00:06:28,612
seule ligne un tableau de taille fixe
en Java. Ceci présuppose que l'on connaît

88
00:06:28,612 --> 00:06:31,396
a priori les valeurs à mettre dans
le tableau. Dans le cas le plus général,

89
00:06:31,396 --> 00:06:35,287
on ne connaît pas ces valeurs et donc
il faut séparer l'instruction

90
00:06:35,287 --> 00:06:40,416
de déclaration du remplissage effectif
du tableau. Voilà comment procéder

91
00:06:40,416 --> 00:06:45,514
dans ce cas. Donc on commence par
déclarer notre variable de type tableau,

92
00:06:45,514 --> 00:06:52,343
ici un tableau de taille fixe d'entiers.
Ensuite, il faut allouer les emplacements

93
00:06:52,343 --> 00:06:56,651
mémoire, réserver des emplacements mémoire
pour notre tableau. Ceci se fait au moyen

94
00:06:56,651 --> 00:07:01,943
de la tournure suivante : on utilise le
mot réservé « new », on indique ensuite

95
00:07:01,943 --> 00:07:05,582
le type des valeurs que l'on veut
stocker dans le tableau puis entre

96
00:07:05,582 --> 00:07:10,845
crochets, la taille donnée au tableau
au moment de sa construction.

97
00:07:10,845 --> 00:07:14,711
Alors ce qu'il faut savoir, c'est
qu'une fois la taille allouée,

98
00:07:14,711 --> 00:07:18,420
cette taille ne peut pas changer en cours
d'exécution du programme, c'est pourquoi

99
00:07:18,420 --> 00:07:20,948
nous appelons ces tableaux, des tableaux
de taille fixe.

100
00:07:20,948 --> 00:07:27,737
Donc deuxième étape, nous devons allouer
les emplacements mémoire réservés

101
00:07:27,737 --> 00:07:33,034
pour le tableau. A ce stade, je suis donc
dans la situation suivante :

102
00:07:33,034 --> 00:07:38,565
j'ai une variable « score » qui contient
une référence, une indirection, vers un

103
00:07:38,565 --> 00:07:44,199
tableau. Ce tableau contient quatre
éléments. Quelle va être la valeur de ces

104
00:07:44,199 --> 00:07:45,866
éléments à ce stade ?

105
00:07:46,223 --> 00:07:48,899
Alors ce qu'il faut savoir, c'est
qu'en Java il existe des valeurs

106
00:07:48,899 --> 00:07:52,599
par défaut qui sont mises dans les
tableaux au moment de sa construction

107
00:07:52,599 --> 00:07:57,964
Donc pour la situation qui a précédé
nous nous trouvons donc avec un tableau

108
00:07:57,964 --> 00:08:04,777
qui contient des zéros. Les valeurs par
défaut sont 0 pour les types <i>int</i> et <i>double</i>

109
00:08:04,777 --> 00:08:10,323
<i>False</i> pour booléen et il existe d'autres
valeurs dédiées pour d'autres types

110
00:08:10,323 --> 00:08:11,917
de données.

111
00:08:12,302 --> 00:08:16,426
Donc concrètement, lorsqu'une instruction
de cette nature est exécutée,

112
00:08:16,426 --> 00:08:21,431
nous nous retrouvons dans une situation
en mémoire où le tableau a cette allure.

113
00:08:21,431 --> 00:08:25,605
Les valeurs par défaut pour chacune des
cases sont zéro car je suis en train

114
00:08:25,605 --> 00:08:28,523
de travailler avec un tableau d'entiers
pour lesquels la valeur par défaut

115
00:08:28,523 --> 00:08:33,454
est effectivement zéro. Evidemment,
ces valeurs par défaut dans la majorité

116
00:08:33,454 --> 00:08:37,832
des cas ne vont pas nous satisfaire, et
donc la troisième étape va consister à

117
00:08:37,832 --> 00:08:42,274
remplir le tableau élément par élément ;
ce qui implique de s'intéresser à comment

118
00:08:42,274 --> 00:08:47,152
accéder à chacune des cases du tableau
pour y mettre une valeur dédiée.

119
00:08:49,132 --> 00:08:53,298
Le mécanisme par lequel je peux accéder
à la i-ème case d'un tableau est le

120
00:08:53,298 --> 00:08:58,409
mécanisme de l'indexation. J'utilise
la syntaxe suivante : entre crochets

121
00:08:58,409 --> 00:09:02,554
j'indique l'indice, le numéro de la case,
que je veux accéder. Ce qu'il faut

122
00:09:02,554 --> 00:09:06,668
savoir c'est qu'en Java, l'indice, le
numéro de la case, varie entre 0

123
00:09:06,668 --> 00:09:11,120
et T - 1, où T est la taille du tableau.
Si par exemple, je déclare dans un

124
00:09:11,120 --> 00:09:17,028
programme un tableau d'entiers « tab »
et que je lui alloue une taille de départ

125
00:09:17,191 --> 00:09:24,411
qui est de 10, comme ici, alors ce qu'il
faut savoir c'est que le premier élément

126
00:09:24,411 --> 00:09:29,608
du tableau correspond à l'indice 0 et que
le dernier élément du tableau va

127
00:09:29,608 --> 00:09:35,002
correspondre à l'indice 9. Je peux
par cette notation, altérer, modifier

128
00:09:35,002 --> 00:09:39,882
le contenu d'une case donnée, par exemple
en écrivant ceci. Alors il est

129
00:09:39,882 --> 00:09:44,793
important de savoir que si vous débordez
au niveau de l'indice du la taille

130
00:09:44,793 --> 00:09:48,132
initialement allouée, il y a ce qu'on
appelle le « lancement d'une exception »,

131
00:09:48,132 --> 00:09:52,036
qui à ce stade de votre apprentissage
va probablement se traduire dans un

132
00:09:52,036 --> 00:09:57,190
programme par l'arrêt abrupte de votre
programme. Donc ici par exemple,

133
00:09:57,190 --> 00:10:03,994
si j'essaye d'accéder à une case qui est
en dehors des indices licites, sachant

134
00:10:03,994 --> 00:10:08,535
que le dernier indice licite est 9 pour
un tableau de taille 10, on aura une

135
00:10:08,535 --> 00:10:11,485
erreur au niveau de l'exécution du
programme.

136
00:10:14,115 --> 00:10:17,408
Pour revenir à l'initialisation des
tableaux, voici un petit exemple montrant

137
00:10:17,408 --> 00:10:20,686
comment remplir un tableau élément
par élément en utilisant le mécanisme

138
00:10:20,686 --> 00:10:24,342
de l'indexation. Ceci présuppose qu'au
préalable on a déclaré le tableau,

139
00:10:24,342 --> 00:10:28,338
qu'on a construit. Au moment de
la construction, on indique la taille du

140
00:10:28,338 --> 00:10:31,923
tableau et cette taille ne peut pas
changer durant l'exécution du

141
00:10:31,923 --> 00:10:34,051
programme c'est pourquoi on parle
de tableaux de taille fixe.

142
00:10:34,051 --> 00:10:38,176
Ensuite, en utilisant l'indexation, il est
possible de remplir le tableau case

143
00:10:38,176 --> 00:10:41,386
par case comme on le fait dans cette
séquence d'instructions.

144
00:10:41,431 --> 00:10:46,111
Ici, au final nous allons aboutir à cette
situation en mémoire, la variable

145
00:10:46,152 --> 00:10:50,078
« score » contient une référence vers
un tableau qui a cette allure.

146
00:10:50,078 --> 00:10:55,429
Le tableau est tel que à la case d'indice
0, il y a la valeur 1000. C'est ce que

147
00:10:55,429 --> 00:10:59,741
nous avons initialisé au moyen de cette
instruction, et à la case d'indice 3,

148
00:10:59,741 --> 00:11:04,879
la dernière case, nous avons la valeur
6450, c'est ce que nous avons

149
00:11:04,879 --> 00:11:07,618
obtenu au travers de cette instruction là.
