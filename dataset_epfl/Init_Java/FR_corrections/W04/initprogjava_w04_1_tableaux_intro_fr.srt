1
00:00:03,755 --> 00:00:06,714
Nous avons vu jusqu'ici que tout
programme manipule des données

2
00:00:06,730 --> 00:00:09,823
et que ces données sont stockées 
dans ce qu'on appelle des variables.

3
00:00:09,838 --> 00:00:12,420
Nous avons également vu que
à toute variable en java

4
00:00:12,420 --> 00:00:15,815
doit être associé un type
qui représente le type de valeurs

5
00:00:15,815 --> 00:00:17,832
qu'on veut stocker dans la variable.

6
00:00:17,832 --> 00:00:20,469
Jusqu'à présent les types
que nous avons examinés

7
00:00:20,469 --> 00:00:24,803
sont des types simples, par exemple,
des entiers, des doubles ou des booléens

8
00:00:24,803 --> 00:00:28,430
qui permettent effectivement de modéliser
des données de type élémentaires

9
00:00:28,445 --> 00:00:31,955
comme par exemple, des dimensions,
des expressions logiques

10
00:00:31,955 --> 00:00:33,639
et des choses de cette nature.

11
00:00:33,994 --> 00:00:36,074
Dans de nombreuses situations,
il est nécessaire

12
00:00:36,074 --> 00:00:38,614
de représenter des données
de type plus sophistiqué,

13
00:00:38,614 --> 00:00:41,196
de manipuler des ensembles de données
comme un tout,

14
00:00:41,196 --> 00:00:43,334
et c'est l'objectif
de la vidéo d'aujourd'hui.

15
00:00:44,871 --> 00:00:47,859
L'objectif du cours d'aujourd'hui
est donc d'aller au delà

16
00:00:47,859 --> 00:00:49,680
de l'utilisation des types simples

17
00:00:49,680 --> 00:00:52,781
comme les entiers, les doubles,
les caractères ou les booléens

18
00:00:52,781 --> 00:00:55,484
et apprendre à manipuler des données

19
00:00:55,484 --> 00:01:00,215
plus sophistiquées en composant
des données de type élémentaire.

20
00:01:02,305 --> 00:01:05,822
En programmation, de façon générale,
un type de données structurées,

21
00:01:05,822 --> 00:01:08,838
composées ou évoluées
va permettre essentiellement

22
00:01:08,838 --> 00:01:11,594
de manipuler un ensemble
de données comme un tout.

23
00:01:11,594 --> 00:01:13,262
Par exemple, 
si dans un programme

24
00:01:13,262 --> 00:01:15,649
j'ai besoin de modéliser
un ensemble d'âge,

25
00:01:15,649 --> 00:01:18,763
qui est un ensemble de données
homogènes de type entiers ici,

26
00:01:18,763 --> 00:01:21,658
il est naturel de penser
à quelque chose qui ressemblerait

27
00:01:21,658 --> 00:01:24,793
à un tableau de données
que je peux manipuler comme un tout.

28
00:01:25,068 --> 00:01:28,789
Je peux imaginer des représentations
sophistiquées de cette nature également

29
00:01:28,789 --> 00:01:31,891
où la nature des données est hétérogène,
comme par exemple ici,

30
00:01:31,891 --> 00:01:34,731
une chaîne de caractères,
un double et un entier.

31
00:01:35,882 --> 00:01:38,392
De façon plus simple,
on peut aussi considérer

32
00:01:38,392 --> 00:01:41,080
qu'une chaîne de caractères
est un type composé

33
00:01:41,080 --> 00:01:44,608
puisqu'une chaîne de caractères
est un ensemble de caractères,

34
00:01:45,608 --> 00:01:47,716
donc permet de manipuler 
un ensemble de caractères

35
00:01:47,716 --> 00:01:49,484
comme un tout également.

36
00:01:50,524 --> 00:01:53,584
Nous allons donc aujourd'hui,
continuer à explorer les briques de base

37
00:01:53,584 --> 00:01:56,017
qui permettent en Java
de construire un programme

38
00:01:56,747 --> 00:01:58,577
en terme de traitement et de données.

39
00:01:58,577 --> 00:02:00,547
Aujourd'hui nous allons travailler plutôt

40
00:02:00,547 --> 00:02:04,488
sur le volet des données et examiner
comment on peut travailler

41
00:02:04,488 --> 00:02:06,957
avec des tableaux de données,
plus précisément,

42
00:02:06,957 --> 00:02:09,829
nous allons travailler
avec des tableaux de taille fixe

43
00:02:10,217 --> 00:02:12,359
pour la séquence 
qui nous occupe aujourd'hui.

44
00:02:14,018 --> 00:02:16,325
Pour illustrer l'utilité des tableaux
en programmation,

45
00:02:16,325 --> 00:02:18,262
voici un petit exemple d'introduction.

46
00:02:18,576 --> 00:02:21,403
Imaginez par exemple que vous
souhaitiez écrire un petit programme

47
00:02:21,707 --> 00:02:24,317
qui manipule des scores de joueurs.

48
00:02:24,317 --> 00:02:26,167
Le but est simplement ici,

49
00:02:26,167 --> 00:02:29,397
de permettre d'afficher le score 
de tous les joueurs,

50
00:02:29,397 --> 00:02:31,939
de calculer la moyenne
de l'ensemble de ces scores

51
00:02:31,939 --> 00:02:35,633
et d'afficher pour chacun
des scores, l'écart à la moyenne.

52
00:02:36,102 --> 00:02:39,720
Nous allons dans un premier temps
essayer d'écrire un programme Java

53
00:02:39,720 --> 00:02:43,509
capable de réaliser ces traitements
mais en utilisant uniquement

54
00:02:43,509 --> 00:02:45,939
les moyens dont 
nous disposons jusqu'ici,

55
00:02:45,939 --> 00:02:48,088
c'est à dire, des données
de type élémentaire.

56
00:02:48,239 --> 00:02:50,970
Nous n'allons pas être
très ambitieux pour commencer,

57
00:02:50,970 --> 00:02:53,920
nous allons imaginer que nous avons

58
00:02:53,920 --> 00:02:56,420
simplement deux joueurs
à représenter.

59
00:02:57,440 --> 00:03:00,812
Nous avons donc à modéliser
les scores de deux joueurs,

60
00:03:00,812 --> 00:03:02,791
ce que l'on peut faire
avec les moyens existants

61
00:03:02,791 --> 00:03:05,030
au travers de deux
variables de type entier :

62
00:03:05,030 --> 00:03:07,440
la variable score 1,
la variable score 2.

63
00:03:07,440 --> 00:03:10,520
On imagine que dans ce programme,
ces valeurs sont obtenues

64
00:03:10,520 --> 00:03:12,892
au travers d'une interaction clavier, 
comme ici.

65
00:03:13,250 --> 00:03:15,117
Une fois que ces valeurs sont obtenues,

66
00:03:15,117 --> 00:03:17,654
le calcul de la moyenne
peut se faire simplement

67
00:03:17,654 --> 00:03:20,811
en sommant les deux scores
et en divisant la somme par deux.

68
00:03:21,068 --> 00:03:22,695
Et ensuite nous pouvons procéder

69
00:03:22,695 --> 00:03:26,003
à l'affichage des scores
et de l'écart à la moyenne

70
00:03:26,003 --> 00:03:28,816
pour chacun des scores.
Ici nous affichons le score 1

71
00:03:28,816 --> 00:03:33,657
et l'écart à la moyenne du score 1
et nous faisons pareil pour le score 2.

72
00:03:35,130 --> 00:03:37,636
Une question qui va
naturellement se poser ici c'est,

73
00:03:37,636 --> 00:03:40,684
comment procéder si on se trouve
avec davantage de joueurs ?

74
00:03:41,092 --> 00:03:46,318
Bien évidement, il faudra ajouter
autant de variables que l'on a de joueurs

75
00:03:46,547 --> 00:03:49,518
et typiquement dans le cadre
de cet exemple où on a cinq joueurs,

76
00:03:49,518 --> 00:03:51,349
on se trouverait dans l'obligation

77
00:03:51,349 --> 00:03:54,450
de déclarer cinq variables 'score',

78
00:03:54,450 --> 00:03:57,551
une pour chaque joueur,
ce qui est déjà relativement laborieux.

79
00:03:58,621 --> 00:04:00,863
Le calcul de la moyenne se complexifie

80
00:04:00,863 --> 00:04:03,818
puisque désormais on doit sommer
les valeurs de cinq variables

81
00:04:03,818 --> 00:04:07,110
et puis, comment faire les affichages ?

82
00:04:07,381 --> 00:04:10,841
On se dit qu'on doit répéter
pour chacun des scores

83
00:04:10,841 --> 00:04:12,966
la ligne d'instruction
qui permet d'afficher

84
00:04:12,966 --> 00:04:14,678
le score et l'écart à la moyenne.

85
00:04:14,678 --> 00:04:18,262
On aimerait bien contourner
ce côté un peu laborieux

86
00:04:18,262 --> 00:04:20,209
de répéter chacune des instructions

87
00:04:20,209 --> 00:04:22,636
et donc on va penser naturellement
à utiliser une boucle.

88
00:04:22,636 --> 00:04:24,673
Comment faire si on souhaite

89
00:04:24,673 --> 00:04:27,920
procéder à l'affichage
des différents scores

90
00:04:27,920 --> 00:04:30,636
et des écarts à la moyenne
en utilisant une boucle ?

91
00:04:32,226 --> 00:04:35,689
Une solution naturelle ici serait
d'imaginer d' employer une boucle for,

92
00:04:35,689 --> 00:04:38,900
qui nous permettrait d'itérer
sur chacun des scores

93
00:04:38,900 --> 00:04:41,184
et pour chacun de ces scores
réaliser les affichages souhaités.

94
00:04:41,184 --> 00:04:44,086
On peut donc imaginer écrire
cette boucle for dans cet esprit.

95
00:04:44,086 --> 00:04:47,207
On aurait un compteur qui itérerait
du premier score jusqu'au dernier

96
00:04:47,207 --> 00:04:51,151
et pour chacun des scores,
on réaliserait les affichages souhaités.

97
00:04:51,151 --> 00:04:54,177
Si l'on examine cependant
ce programme un peu plus en détail,

98
00:04:54,177 --> 00:04:56,919
donc la boucle for et même
l'intégralité du programme,

99
00:04:56,919 --> 00:04:58,430
on se rend compte cependant,

100
00:04:58,430 --> 00:04:59,871
que cette approche ne répond pas

101
00:04:59,871 --> 00:05:02,083
de façon complètement satisfaisante
à tous les besoins

102
00:05:02,083 --> 00:05:04,039
qu'on peut envisager dans ce contexte.

103
00:05:04,039 --> 00:05:08,609
Imaginons par exemple, que je souhaite

104
00:05:08,609 --> 00:05:10,909
procéder avec plus de joueurs que 5,

105
00:05:10,909 --> 00:05:12,359
c'est à dire 100 ou 1000.

106
00:05:12,359 --> 00:05:16,035
Dans ce cas-là le programme prendrait
des dimensions ingérables,

107
00:05:16,035 --> 00:05:18,652
il faudrait introduire
un millier de variables par exemple,

108
00:05:18,652 --> 00:05:22,356
complexifier le calcul de la moyenne,
ensuite si on regarde la façon

109
00:05:22,356 --> 00:05:25,705
que nous avons eu d'écrire le score ici

110
00:05:25,705 --> 00:05:28,274
pour accéder au ième score de la séquence,

111
00:05:28,274 --> 00:05:32,404
en réalité cette syntaxe n'est pas
une syntaxe valable en Java

112
00:05:32,404 --> 00:05:34,944
pour désigner le ième élément
d'une séquence.

113
00:05:34,944 --> 00:05:39,151
Et puis, dernier point, 
l'approche que nous avons utilisée

114
00:05:39,151 --> 00:05:41,502
ne répond pas non plus
de façon satisfaisante

115
00:05:41,502 --> 00:05:45,703
à la situation où le nombre de joueurs
n'est pas connu au départ.

116
00:05:45,703 --> 00:05:49,205
Donc, si l'on veut écrire
un programme de cette nature

117
00:05:49,205 --> 00:05:51,334
l'outillage dont nous disposons jusqu'ici

118
00:05:51,334 --> 00:05:54,355
ne répond pas de façon satisfaisante
à nos besoins dans ce contexte

119
00:05:54,355 --> 00:05:58,052
et les tableaux sont le moyen
de remédier à cela.

120
00:05:59,208 --> 00:06:01,951
Pour vous donner une idée concrète
de ce que c'est que la notion de tableau

121
00:06:01,951 --> 00:06:05,877
voici comment s'écrirait le programme
précédant en utilisant ce concept.

122
00:06:05,877 --> 00:06:09,413
Donc l'idée serait d'utiliser
un nouveau type de données,

123
00:06:09,413 --> 00:06:12,435
le type ici "tableau d'entiers",
dont nous verrons la syntaxe

124
00:06:12,435 --> 00:06:14,417
plus en détails dans le cadre
de cette vidéo ;

125
00:06:14,417 --> 00:06:17,219
et, principalement, lorsque
l'on déclare un tableau,

126
00:06:17,219 --> 00:06:20,358
on peut manipuler une séquence
de données comme un tout

127
00:06:20,358 --> 00:06:24,285
et accéder au ième élément
de la séquence au moyen de l'indexation.

128
00:06:24,285 --> 00:06:26,718
Donc nous voyons
que le programme précédent

129
00:06:26,718 --> 00:06:28,453
s'écrit de façon beaucoup plus concise,

130
00:06:28,453 --> 00:06:31,967
nous pouvons notamment gérer
toute la partie qui lit les scores

131
00:06:31,967 --> 00:06:34,474
de façon unifiée au travers
d'une boucle for.

132
00:06:34,474 --> 00:06:36,981
Ensuite, peu importe 
le nombre de scores,

133
00:06:36,981 --> 00:06:39,618
nous écrirons le programme
de la même façon

134
00:06:39,618 --> 00:06:42,826
que nous aillons à faire
à 5 ou à 1000 joueurs

135
00:06:42,826 --> 00:06:45,599
et puis nous pouvons également
désormais gérer le fait

136
00:06:45,599 --> 00:06:48,098
que le nombre de joueurs
n'est pas connu au départ

137
00:06:48,098 --> 00:06:52,617
et donc lire le nombre de scores
avant d'exécuter le calcul

138
00:06:52,617 --> 00:06:55,029
que nous voulons réaliser sur les scores.

139
00:06:56,052 --> 00:06:59,155
Un tableau en programmation est donc
un type de données qui nous permet

140
00:06:59,155 --> 00:07:02,539
de manipuler une collection de valeurs
homogènes comme un tout.

141
00:07:02,876 --> 00:07:05,691
Les valeurs sont toutes du même
type dans un tableau,

142
00:07:05,691 --> 00:07:09,578
ici vous avez sous les yeux un exemple
représentant un tableau d'entiers.

143
00:07:09,578 --> 00:07:12,723
Toutes les valeurs contenues
dans le tableau score sont de type 'int'.

144
00:07:12,723 --> 00:07:15,676
On peut bien sûr définir
en Java des tableaux

145
00:07:15,676 --> 00:07:19,406
de n'importe quel type connu,
tableau d'entiers, de doubles, de char

146
00:07:19,406 --> 00:07:23,946
et de n'importe quel autre type connu
y compris des tableaux de tableaux.

147
00:07:25,650 --> 00:07:28,307
En programmation de façon
général on peut considérer

148
00:07:28,307 --> 00:07:31,654
qu'il existe a priori
quatre types de tableaux,

149
00:07:31,654 --> 00:07:34,483
ceci en fonction de la réponse
aux questions suivantes.

150
00:07:34,483 --> 00:07:38,412
Première question : est-ce que la taille
du tableau est connue a priori ?

151
00:07:38,412 --> 00:07:41,190
C'est à dire, au moment où je commence
à écrire le programme

152
00:07:41,190 --> 00:07:43,208
je sais quelle taille a le tableau,

153
00:07:43,208 --> 00:07:45,608
ou je ne sais pas
quelle taille a le tableau.

154
00:07:45,608 --> 00:07:48,310
Donc on peut avoir deux réponses
possibles à cette question,

155
00:07:48,310 --> 00:07:51,959
et, deuxième question :
est-ce que la taille peut varier

156
00:07:51,959 --> 00:07:53,518
lors de l'utilisation du tableau ?

157
00:07:53,518 --> 00:07:55,907
C'est à dire qu'une fois que
j'ai fixé une taille à mon tableau,

158
00:07:55,907 --> 00:07:57,927
est-ce que je peux 
faire varier cette taille

159
00:07:57,927 --> 00:07:59,648
pendant que
le programme s’exécute

160
00:07:59,648 --> 00:08:03,232
ou est-ce que cette taille va rester
fixée une fois pour toutes ?

161
00:08:04,903 --> 00:08:07,416
Le type de tableau 
le plus souple, le plus général

162
00:08:07,416 --> 00:08:10,138
qui répond au maximum de besoins
est sans aucun doute,

163
00:08:10,138 --> 00:08:11,808
celui qui se trouve
dans cette configuration,

164
00:08:11,808 --> 00:08:15,246
c'est à dire, un tableau dont la taille
initiale n'est pas connue

165
00:08:15,246 --> 00:08:17,036
au moment où je rédige le programme.

166
00:08:17,036 --> 00:08:18,756
On peut fixer cette taille au moment

167
00:08:18,756 --> 00:08:20,618
où le programme s'exécute
mais je ne la connais pas

168
00:08:20,618 --> 00:08:23,698
quand j'écris le programme
et cette taille peut également varier

169
00:08:23,698 --> 00:08:25,469
pendant que le programme s'exécute.

170
00:08:25,469 --> 00:08:28,445
Si l'on imagine par exemple que
je souhaite écrire un programme

171
00:08:28,445 --> 00:08:30,919
qui gère les âges des inscrits à ce cours.

172
00:08:30,919 --> 00:08:33,973
Donc ce nombre n'est pas connu
au moment où j'écris le programme

173
00:08:33,973 --> 00:08:36,428
mais va être déterminé
au moment où je lance

174
00:08:36,428 --> 00:08:39,264
l'exécution du programme
avec le nombre d'inscrits effectifs

175
00:08:39,264 --> 00:08:42,968
que j'ai à ce moment là, et 
on peut imaginer qu'en cours d'exécution,

176
00:08:42,968 --> 00:08:46,199
j'ai de nouveaux inscrits,
donc le tableau va augmenter de taille.

177
00:08:46,199 --> 00:08:48,480
Je peux également imaginer 
qu'il y ait eu des gens

178
00:08:48,480 --> 00:08:50,761
qui se désinscrivent aux cours,
et à ce moment là,

179
00:08:50,761 --> 00:08:53,044
la taille du tableau va diminuer.

180
00:08:54,209 --> 00:08:56,688
À l'autre extrême, il existe
des tableaux

181
00:08:56,688 --> 00:08:59,167
dont la taille est connue au moment
où j'écris le programme

182
00:08:59,167 --> 00:09:01,648
et dont la taille n'est pas
amenée à changer

183
00:09:01,648 --> 00:09:04,416
en cours d'exécution du programme,
donc cette configuration là.

184
00:09:04,661 --> 00:09:07,306
Par exemple, si je veux écrire
un programme qui manipule

185
00:09:07,306 --> 00:09:10,932
des vecteurs à 2 dimensions,

186
00:09:13,032 --> 00:09:16,088
donc je sais que mon vecteur
à 2 dimensions

187
00:09:16,088 --> 00:09:18,664
a deux composantes exactement et pas plus.

188
00:09:18,678 --> 00:09:21,122
Donc, une composante pour X
et une composante pour Y

189
00:09:21,122 --> 00:09:25,095
et je sais qu'un vecteur à 2 dimensions
va rester un vecteur à 2 dimensions

190
00:09:25,095 --> 00:09:27,346
pendant toute l'exécution du programme

191
00:09:27,346 --> 00:09:31,131
et donc sa taille ne va pas changer
pendant que j'exécute le programme.

192
00:09:33,118 --> 00:09:36,339
Situation intermédiaire,
le cas où un tableau a une taille

193
00:09:36,339 --> 00:09:38,601
qui n'est pas connue au moment
où je rédige le programme,

194
00:09:38,601 --> 00:09:42,144
mais une fois que cette taille
est fixée elle ne va plus évoluer

195
00:09:42,144 --> 00:09:44,769
pendant que le programme s'exécute,
donc ce cas de figure là.

196
00:09:45,106 --> 00:09:47,299
Par exemple on peut imaginer
que j'écris un jeu

197
00:09:47,299 --> 00:09:49,728
qui se joue de 2 à 7 joueurs.

198
00:09:49,728 --> 00:09:52,248
Au moment où j'exécute
le programme, je ne sais pas

199
00:09:52,248 --> 00:09:54,965
combien de joueurs vont intervenir
exactement dans le jeu.

200
00:09:54,965 --> 00:09:56,682
Donc, quand le programme s'exécute

201
00:09:56,682 --> 00:09:58,520
il va demander combien
de joueurs interviennent.

202
00:09:58,520 --> 00:10:00,207
Par example, il y en a 5.

203
00:10:00,207 --> 00:10:02,633
Une fois que ces 5 joueurs
interviennent dans la partie,

204
00:10:02,633 --> 00:10:06,022
la partie doit se dérouler
avec les 5 joueurs et pas plus.

205
00:10:06,022 --> 00:10:08,689
Donc la taille du tableau
n'est pas amenée à évoluer

206
00:10:08,689 --> 00:10:10,761
pendant que le programme s'exécute.

207
00:10:11,958 --> 00:10:15,727
Dernier cas de figure enfin,
peut-être plus difficile à illustrer,

208
00:10:15,727 --> 00:10:18,806
un peu moins intuitif,
celui où la taille du tableau

209
00:10:18,806 --> 00:10:21,407
est connue a priori au moment
où j'écris le programme

210
00:10:21,407 --> 00:10:24,310
et dont la taille peut varier
pendant que j'exécute le programme.

211
00:10:24,310 --> 00:10:28,544
Par exemple, je veux représenter
le nombre de cantons d'un pays.

212
00:10:29,503 --> 00:10:33,379
Donc, ce nombre de cantons
est fixé, connu a priori.

213
00:10:33,379 --> 00:10:34,847
Donc au moment 
où j'écris le programme,

214
00:10:34,847 --> 00:10:36,675
je sais, par exemple qu'il y en a 26.

215
00:10:36,675 --> 00:10:39,314
Et puis on peut imaginer que
à un moment donné

216
00:10:39,314 --> 00:10:41,428
un nouveau canton se crée dans le pays

217
00:10:42,946 --> 00:10:45,823
ou que deux cantons
fusionnent en un seul.

218
00:10:45,823 --> 00:10:49,892
Donc la taille du tableau va
être amenée à augmenter ou diminuer

219
00:10:49,892 --> 00:10:51,900
pendant que le programme s'exécute.

220
00:10:51,900 --> 00:10:54,997
Ce dernier cas de figure
est sans doute le moins naturel

221
00:10:54,997 --> 00:10:57,439
et le moins fréquent dans la pratique.

222
00:10:58,473 --> 00:11:02,228
La plupart des langages de programmation
ne vont pas offrir un outil spécifique,

223
00:11:02,228 --> 00:11:06,400
dédié pour la gestion de chacun
des cas qui se présentent ici.

224
00:11:06,400 --> 00:11:10,668
Par exemple, en Java nous disposons
principalement de 2 outillages,

225
00:11:10,668 --> 00:11:13,419
celui qui permet de gérer des tableaux
de taille dynamique.

226
00:11:13,419 --> 00:11:15,815
Ici par exemple, au moyen
d'un type prédéfini

227
00:11:15,815 --> 00:11:17,861
de Java qu'on appelle les «ArrayList»,

228
00:11:17,861 --> 00:11:20,587
et qui répond aux besoins
des situations 1 et 2.

229
00:11:20,587 --> 00:11:22,614
Et puis les tableaux de taille fixe,

230
00:11:22,614 --> 00:11:25,684
qui vont nous occuper dans le cadre
de la vidéo d'aujourd'hui,

231
00:11:25,684 --> 00:11:29,781
et qui répondent aux besoins
des situations 3 et 4.
