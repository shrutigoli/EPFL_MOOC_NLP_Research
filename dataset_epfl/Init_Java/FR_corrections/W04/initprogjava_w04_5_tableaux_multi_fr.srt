1
00:00:03,672 --> 00:00:04,753
Les tableaux de taille fixe

2
00:00:04,753 --> 00:00:06,562
auxquels nous nous sommes
intéressés jusqu'ici

3
00:00:06,562 --> 00:00:08,172
étaient des tableaux unidimensionnels.

4
00:00:08,172 --> 00:00:10,849
Ils nous permettaient de stocker
des séquences simples de valeurs.

5
00:00:10,849 --> 00:00:12,093
Dans certaines situations,

6
00:00:12,093 --> 00:00:15,114
il est nécessaire d'avoir recours
à des tableaux de plus grandes dimensions.

7
00:00:15,114 --> 00:00:17,013
Illustrons ceci par un exemple concret.

8
00:00:18,682 --> 00:00:20,620
Supposons par exemple
que je souhaite stocker

9
00:00:20,620 --> 00:00:23,601
les différentes notes obtenues
aux différents devoirs à rendre

10
00:00:23,601 --> 00:00:25,979
dans le cadre de ce cours
pour un étudiant, un seul.

11
00:00:26,669 --> 00:00:32,092
Donc ici, je peux utiliser un tableau à 1D
qui s'appellerait par exemple notes et qui,

12
00:00:32,092 --> 00:00:35,861
pour chacune de ses entrées,
contiendrait une note à un devoir.

13
00:00:35,861 --> 00:00:40,586
Donc ici ça serait la note du devoir 0,
donc du premier devoir.

14
00:00:40,586 --> 00:00:44,852
Ici ça serait la note du devoir 1
et ainsi de suite.

15
00:00:45,940 --> 00:00:50,484
Donc ici, je réussis à comptabiliser
de façon satisfaisante,

16
00:00:50,484 --> 00:00:54,193
les notes d'un seul étudiant
aux différents devoirs qu'il a accompli

17
00:00:54,193 --> 00:00:55,644
dans le cadre de ce cours.

18
00:00:56,894 --> 00:00:58,879
Supposons maintenant
que je souhaite comptabiliser

19
00:00:58,879 --> 00:01:00,481
non pas les notes d'un seul étudiant

20
00:01:00,482 --> 00:01:02,307
mais de tous les étudiants
suivant le cours.

21
00:01:02,307 --> 00:01:06,396
A ce moment-là, j'aurais besoin
plutôt d'utiliser un tableau à 2D ici,

22
00:01:06,396 --> 00:01:09,237
où la première dimension
qui correspond ici aux lignes,

23
00:01:09,237 --> 00:01:11,692
correspondrait à un étudiant.

24
00:01:12,292 --> 00:01:14,746
Donc ici j'aurais
le premier étudiant du cours.

25
00:01:14,746 --> 00:01:18,752
Et chacune des colonnes
représenterait en fait des notes

26
00:01:18,752 --> 00:01:21,090
obtenues aux devoirs par un étudiant.

27
00:01:21,090 --> 00:01:24,966
Donc ici par exemple,
j'aurais la note du premier devoir,

28
00:01:24,966 --> 00:01:28,057
et ici la note du dernier devoir.

29
00:01:29,776 --> 00:01:32,778
Donc ici je vois que j'ai besoin
d'avoir recours à une structure de données

30
00:01:32,778 --> 00:01:35,056
plus complexe, un tableau à 2D

31
00:01:35,056 --> 00:01:37,390
où j'ai des lignes
correspondant aux étudiants

32
00:01:37,390 --> 00:01:40,321
et des colonnes correspondant
aux devoirs rendus

33
00:01:40,321 --> 00:01:43,010
et les tableaux à plusieurs dimensions

34
00:01:43,010 --> 00:01:45,777
permettent de répondre
exactement à ce besoin.

35
00:01:47,971 --> 00:01:52,160
En JAVA, un tableau de taille fixe à 2D
n'est autre qu'un tableau de tableaux.

36
00:01:52,160 --> 00:01:54,444
En réalité, c'est un petit peu
plus complexe que ça

37
00:01:54,444 --> 00:01:55,701
puisque nous savons qu'en JAVA,

38
00:01:55,701 --> 00:01:58,399
les tableaux sont manipulés
au travers de références.

39
00:01:58,399 --> 00:02:00,308
Donc le schéma plus correct
serait quelque chose

40
00:02:00,308 --> 00:02:02,721
qui ressemblerait à ceci :
dans chaque case,

41
00:02:02,721 --> 00:02:06,841
nous avons une référence vers un tableau.

42
00:02:07,846 --> 00:02:09,706
Donc le schéma que vous avez
ici sous les yeux,

43
00:02:09,706 --> 00:02:14,690
correspond en fait à une structure
qui a cette allure en JAVA.

44
00:02:14,690 --> 00:02:16,477
Il s'agit bien d'un tableau de tableaux.

45
00:02:17,050 --> 00:02:19,925
Du point de vue de la syntaxe,
ajouter une dimension supplémentaire

46
00:02:19,925 --> 00:02:22,504
à un tableau en JAVA
revient simplement à ajouter

47
00:02:22,504 --> 00:02:24,677
un niveau de crochet supplémentaire.

48
00:02:24,677 --> 00:02:26,825
Vous en avez ici deux exemples
concrets sous les yeux.

49
00:02:27,225 --> 00:02:30,116
Et décortiquons maintenant
de façon un peu plus détaillée

50
00:02:30,116 --> 00:02:31,134
l'un de ces exemples.

51
00:02:31,134 --> 00:02:34,632
Ici, je déclare un tableau à 2D,
j'ai deux niveaux de crochets,

52
00:02:34,632 --> 00:02:39,381
qui contient de façon homogène
des entiers et qui s'appelle « score ».

53
00:02:39,741 --> 00:02:41,948
Donc il s'agit d'un tableau à 2D,

54
00:02:41,948 --> 00:02:45,231
je vais donc l'initialiser
par une construction analogue

55
00:02:45,231 --> 00:02:47,278
à ce que je connais
pour les tableaux à 1D.

56
00:02:47,278 --> 00:02:49,460
Ici j'ai un certain nombre de lignes,

57
00:02:49,460 --> 00:02:52,141
qui correspond à un certain nombre
de joueurs, j'imagine par exemple

58
00:02:52,141 --> 00:02:55,017
que j'ai au plus 3 joueurs
qui m'intéressent.

59
00:02:55,017 --> 00:02:57,437
Et des colonnes,
un certain nombre de colonnes

60
00:02:57,437 --> 00:03:00,630
qui correspondent à un nombre
de parties jouées par les joueurs,

61
00:03:00,630 --> 00:03:02,695
donc j'imagine que j'en ai
par exemple, au plus, 4.

62
00:03:03,089 --> 00:03:05,563
Le but du tableau « score »
est de comptabiliser

63
00:03:05,563 --> 00:03:09,679
pour chacun des joueurs,
les scores obtenus à chacune des parties.

64
00:03:11,911 --> 00:03:14,132
Donc concrètement,
à quelle structure je vais aboutir

65
00:03:14,132 --> 00:03:16,467
en mémoire suite à une telle déclaration ?

66
00:03:16,467 --> 00:03:21,696
Et bien ici j'ai déclaré
un tableau à 3 entrées,

67
00:03:22,866 --> 00:03:24,615
qui se traduit par ceci,

68
00:03:26,065 --> 00:03:29,966
dont chacune des entrées
est elle-même un tableau à 4 entrées,

69
00:03:30,662 --> 00:03:33,416
ce qui peut se traduire
schématiquement par ceci.

70
00:03:33,416 --> 00:03:38,169
Donc ici, pour l'entrée « i »,
j'ai en fait un tableau

71
00:03:39,039 --> 00:03:41,606
qui peut contenir au plus 4 entrées,

72
00:03:41,606 --> 00:03:43,775
et chacune des entrées
correspond en fait à un score.

73
00:03:45,422 --> 00:03:47,810
Donc ceci me permet de comptabiliser
pour chaque joueur,

74
00:03:48,820 --> 00:03:51,938
le score obtenu à chacune des parties.

75
00:03:52,322 --> 00:03:56,388
Donc si je veux accéder au i-ème joueur,
j'itère sur la première dimension.

76
00:03:57,248 --> 00:03:59,679
Une fois que j'ai accédé
à cette dimension,

77
00:03:59,679 --> 00:04:01,367
je peux accéder à la seconde dimension

78
00:04:01,367 --> 00:04:03,425
qui va me donner
les différents scores obtenus

79
00:04:03,425 --> 00:04:04,458
aux différentes parties.

80
00:04:06,178 --> 00:04:10,326
Donc schématiquement je peux tout à fait
représenter ceci par un tableau à 2D,

81
00:04:10,326 --> 00:04:14,742
donc ici j'aurais un tableau
à 3 lignes et à 4 colonnes.

82
00:04:16,004 --> 00:04:20,557
Donc chacune des lignes « i »
correspond à un joueur,

83
00:04:20,684 --> 00:04:23,067
donc ici ce serait la ligne du joueur i.

84
00:04:23,067 --> 00:04:26,068
Et chacune des colonnes « j »
correspond en réalité

85
00:04:26,068 --> 00:04:28,429
à un score pour la partie j.

86
00:04:30,575 --> 00:04:34,706
Donc si je veux connaître le score
obtenu par le joueur i

87
00:04:34,706 --> 00:04:36,953
lorsqu'il a joué à la partie j,

88
00:04:36,953 --> 00:04:39,981
et bien je dois accéder
à cette case du tableau à 2D.

89
00:04:42,068 --> 00:04:45,495
Les scores pour chaque partie
sont en réalité des entiers,

90
00:04:46,905 --> 00:04:50,654
ce qui explique la raison pour laquelle
j'ai déclaré mon tableau à 2D

91
00:04:50,654 --> 00:04:52,133
comme un tableau d'entiers.

92
00:04:54,433 --> 00:04:57,564
Si je connais toutes les valeurs
du tableau au moment de sa déclaration,

93
00:04:57,564 --> 00:05:00,044
il est tout à fait possible
de l'initialiser

94
00:05:00,044 --> 00:05:02,802
au moment de sa déclaration
par une tournure de cette nature

95
00:05:02,802 --> 00:05:06,749
qui ressemble beaucoup
à ce qu'on a fait pour les tableaux à 1D.

96
00:05:06,749 --> 00:05:09,929
Il faut bien sûr spécifier
autant de valeurs que de dimensions,

97
00:05:09,929 --> 00:05:12,528
et ceci pour chacune des dimensions.

98
00:05:12,528 --> 00:05:15,531
Ce que vous avez ici sous les yeux
correspond à un tableau de 4 lignes.

99
00:05:18,741 --> 00:05:21,711
Et nous voyons que chaque ligne
correspond à un tableau,

100
00:05:21,711 --> 00:05:23,470
et que le nombre de colonnes

101
00:05:23,470 --> 00:05:27,348
n'a pas à être forcément le même,
en JAVA, pour toutes les lignes.

102
00:05:27,815 --> 00:05:30,876
Donc nous pouvons parfaitement
construire un tableau qui a cette allure,

103
00:05:30,876 --> 00:05:34,530
où pour chaque ligne,
on a un nombre de colonnes différent.

104
00:05:34,530 --> 00:05:36,873
Donc ici nous voyons bien
que nous avons affaire

105
00:05:36,873 --> 00:05:40,508
à un tableau de tableaux.

106
00:05:40,508 --> 00:05:43,078
Chaque entrée individuelle
du premier tableau

107
00:05:43,918 --> 00:05:46,196
correspond à un tableau.

108
00:05:47,791 --> 00:05:49,956
Le mécanisme d'indexation
qui me permet d'accéder

109
00:05:49,956 --> 00:05:51,914
aux différentes valeurs du tableau

110
00:05:51,914 --> 00:05:55,780
a exactement la même signification
que pour les tableaux à 1D.

111
00:05:56,215 --> 00:05:59,261
Ici par exemple,
si j'accède à « tableau de [2] »,

112
00:05:59,261 --> 00:06:03,257
je suis en train d'accéder aux éléments
de ce premier niveau de tableau.

113
00:06:03,257 --> 00:06:09,009
Donc ici, sachant que les éléments
sont numérotés de 0 à « taille - 1 »,

114
00:06:09,009 --> 00:06:12,785
ici j'ai l'élément d'indice 0,
d'indice 1, d'indice 2,

115
00:06:12,785 --> 00:06:15,173
donc lorsque j'accède
à l'élément d'indice 2,

116
00:06:15,173 --> 00:06:18,752
je suis sur ce tableau là précisément,
ce que je retrouve ici.

117
00:06:18,752 --> 00:06:21,797
Donc sachant que « tableau [2] »
est lui-même un tableau,

118
00:06:21,797 --> 00:06:26,218
je peux accéder maintenant
à sa j-ème case par le second indice.

119
00:06:26,218 --> 00:06:29,552
Donc ici, sachant que les indices
sont toujours numérotés

120
00:06:29,552 --> 00:06:33,698
de 0 à « taille - 1 »,
l'élément d'indice 1 sera celui-ci ;

121
00:06:33,698 --> 00:06:36,048
ce qui correspond dans le schéma à cela,

122
00:06:36,048 --> 00:06:40,411
et dans ma déclaration
d'initialisation à cet élément-là.

123
00:06:42,314 --> 00:06:44,317
Donc pour résumer
la discussion qui a précédée,

124
00:06:44,317 --> 00:06:47,235
si on connaît à priori les éléments
à mettre dans le tableau

125
00:06:47,235 --> 00:06:48,521
au moment où on le déclare,

126
00:06:48,521 --> 00:06:51,595
il est possible de l'initialiser
par une tournure de cette nature.

127
00:06:51,595 --> 00:06:53,993
Ce que nous avons vu
dans l'exemple précédent,

128
00:06:53,993 --> 00:06:56,791
c'est que les éléments
de la première dimension

129
00:06:56,791 --> 00:06:59,808
sont chacun des tableaux.

130
00:06:59,808 --> 00:07:04,044
Ici en l'occurrence il s'agit
de tableaux de valeurs entières.

131
00:07:04,044 --> 00:07:07,056
Donc concrètement, dans l'exemple
que vous avez sous les yeux,

132
00:07:07,056 --> 00:07:11,624
vous avez un tableau
de 3 tableaux : y[0], y[1], y[2]

133
00:07:12,414 --> 00:07:14,713
Le tableau y[0] est ce tableau.

134
00:07:14,713 --> 00:07:18,196
Le tableau y[2] est ce dernier tableau.

135
00:07:20,159 --> 00:07:23,317
Pour accéder aux éléments
de la seconde dimension,

136
00:07:23,317 --> 00:07:24,836
j'ajoute un niveau de crochets,

137
00:07:24,836 --> 00:07:27,842
et bien évidemment la valeur
à ce moment-là qui est accédée

138
00:07:27,842 --> 00:07:29,822
est un entier et non plus un tableau.

139
00:07:29,822 --> 00:07:33,874
Par exemple si je veux accéder
à cet élément-là « y de [1][1] »,

140
00:07:33,874 --> 00:07:39,936
je dois d'abord aller
sur le tableau y[1], qui est celui-ci,

141
00:07:39,936 --> 00:07:43,841
ensuite j'accède à l'élément
d'indice 1, qui est celui-ci,

142
00:07:43,841 --> 00:07:46,199
donc ici je tombe sur la valeur 4.

143
00:07:48,774 --> 00:07:51,131
Dans le cas le plus général,
où on ne connaît pas à priori

144
00:07:51,131 --> 00:07:53,078
les valeurs à mettre dans le tableau,

145
00:07:53,078 --> 00:07:56,397
et bien on va se contenter
comme dans le cas du tableau à 1D,

146
00:07:56,397 --> 00:08:00,462
de réserver les emplacements nécessaires
au moment de l'initialisation.

147
00:08:00,462 --> 00:08:04,057
Donc ici concrètement, on va aboutir
à la construction d'un tableau

148
00:08:04,057 --> 00:08:09,780
qui contient 3 lignes
et chacune des lignes contient 2 éléments,

149
00:08:09,780 --> 00:08:12,830
donc c'est la structure
à laquelle nous allons aboutir en mémoire.

150
00:08:12,830 --> 00:08:15,233
Et nous avons vu
qu'il existait des valeurs par défaut

151
00:08:15,233 --> 00:08:17,459
pour l'initialisation
de ces valeurs en JAVA.

152
00:08:17,459 --> 00:08:20,052
Donc les valeurs sont les mêmes
que pour les tableaux à 1D,

153
00:08:20,052 --> 00:08:24,112
donc ici j'aurai des 0 partout
puisqu'il s'agit d'entiers.

154
00:08:24,112 --> 00:08:27,915
Donc ensuite il faut procéder
par un remplissage ad-hoc, donc à la main.

155
00:08:27,915 --> 00:08:31,495
Ici je le fais très explicitement
en accédant case par case

156
00:08:31,495 --> 00:08:32,798
et en y mettant une valeur,

157
00:08:32,798 --> 00:08:36,670
donc ici je vais mettre 1
et je vais mettre 2 ici et ainsi de suite.

158
00:08:36,670 --> 00:08:39,445
Et on peut bien évidemment s'imaginer
que c'est fastidieux

159
00:08:39,445 --> 00:08:43,460
de procéder de cette façon
si l'on a affaire à des grands tableaux,

160
00:08:43,460 --> 00:08:45,909
ce qui nous fait naturellement
penser à des boucles

161
00:08:47,403 --> 00:08:49,221
et à la notion de parcours.

162
00:08:49,221 --> 00:08:53,814
Comment procéder si l'on veut 
parcourir un tableau à 2D, voire plus.

163
00:08:56,488 --> 00:08:59,522
Le moyen le plus naturel
pour parcourir un tableau à 2D

164
00:08:59,522 --> 00:09:02,050
consiste à imbriquer deux boucles « for ».

165
00:09:02,050 --> 00:09:04,946
La première boucle « for »
va permettre d'itérer

166
00:09:06,766 --> 00:09:09,329
sur l'ensemble des lignes du tableau,

167
00:09:10,373 --> 00:09:12,640
donc concrètement ici,
nous permettra d'itérer

168
00:09:12,640 --> 00:09:14,560
sur chacune de ces lignes,
donc de parcourir

169
00:09:14,560 --> 00:09:16,413
chacune de ces lignes en séquences.

170
00:09:16,791 --> 00:09:18,903
Le second indice, la deuxième boucle,

171
00:09:20,553 --> 00:09:23,943
va nous permettre d'itérer
sur toutes les colonnes de chaque ligne.

172
00:09:26,603 --> 00:09:28,545
Donc ici, pour chacune des lignes,

173
00:09:28,545 --> 00:09:31,315
nous voulons itérer
sur chacune des colonnes.

174
00:09:31,315 --> 00:09:33,877
C'est pourquoi les deux boucles
sont en réalité imbriquées.

175
00:09:33,877 --> 00:09:35,726
C'est parce que pour chacun des « i »,

176
00:09:35,726 --> 00:09:38,325
nous voulons parcourir
tous les « j » possibles.

177
00:09:39,205 --> 00:09:41,630
Donc on notera ici en particulier
les conditions d'arrêt.

178
00:09:41,630 --> 00:09:44,625
Donc le nombre de ligne
s'arrête évidemment

179
00:09:44,625 --> 00:09:47,680
à « taille du tableau - 1 »,
ce qui correspond à cette notation.

180
00:09:50,320 --> 00:09:54,543
Et la seconde condition d'arrêt correspond
à la taille de l'entrée « i » du tableau,

181
00:09:55,833 --> 00:09:58,010
ce qui correspond à cette notation-là.

182
00:10:00,667 --> 00:10:03,105
Vous connaissez maintenant l'essentiel
de ce qu'il faut savoir

183
00:10:03,105 --> 00:10:05,451
au sujet des tableaux
de taille fixe en JAVA.

184
00:10:05,451 --> 00:10:08,609
Nous avons étudié
le cas des tableaux à 1D, à 2D.

185
00:10:08,609 --> 00:10:10,811
Bien évidemment 
il est possible d'aller au-delà

186
00:10:10,811 --> 00:10:12,649
et d'avoir des tableaux de plus grande dimension,

187
00:10:12,649 --> 00:10:15,432
même si en pratique on ira rarement au-delà de 4.

188
00:10:15,432 --> 00:10:19,020
Le principe d'utilisation reste exactement
le même que pour les tableaux en 2D.

189
00:10:19,800 --> 00:10:22,741
Il nous reste pour clore
sur le chapitre des tableaux,

190
00:10:22,741 --> 00:10:26,796
à étudier dans une séquence prochaine,
le cas des tableaux dynamiques,

191
00:10:27,106 --> 00:10:30,475
ce que nous verrons un peu plus loin,
dans une prochaine séquence.
