1
00:00:05,141 --> 00:00:07,773
Bonjour, bienvenue à cette nouvelle leçon

2
00:00:07,773 --> 00:00:10,428
de notre cours d'introduction
à la programmation Java.

3
00:00:10,428 --> 00:00:13,454
L'objectif de cette nouvelle leçon
est de vous apprendre

4
00:00:13,454 --> 00:00:16,134
à organiser votre code
en le modularisant

5
00:00:16,134 --> 00:00:17,963
à l'aide de vos propres fonctions.

6
00:00:17,963 --> 00:00:21,261
Les fonctions font partie 
des aspects de traitements,

7
00:00:21,261 --> 00:00:23,972
au même titre que
les expressions et opérateurs,

8
00:00:23,972 --> 00:00:27,554
et les structures de contrôle
que nous avons vues précédemment.

9
00:00:27,554 --> 00:00:32,471
Les fonctions opèrent donc,
en règle générale, sur des données,

10
00:00:32,471 --> 00:00:37,647
et en retour les données vont influencer
le déroulement de nos fonctions.

11
00:00:38,297 --> 00:00:40,709
Jusqu'à maintenant,
les programmes que vous avez écrits

12
00:00:40,709 --> 00:00:43,093
étaient constitués d'une séquence
linéaire d'instructions,

13
00:00:43,093 --> 00:00:44,957
sans organisation globale,

14
00:00:44,957 --> 00:00:47,511
et sans partage des tâches répétées.

15
00:00:47,511 --> 00:00:51,144
Par exemple, si la tâche consistant
à demander un nombre à l'utilisateur,

16
00:00:51,144 --> 00:00:53,750
comme le fait le code suivant,

17
00:00:53,750 --> 00:00:56,591
devait être exécutée plusieurs fois
dans notre programme,

18
00:00:56,591 --> 00:00:59,593
par exemple, pour demander une fois
un nombre de points,

19
00:00:59,593 --> 00:01:03,634
une fois un temps, une fois un âge,
que feriez-vous ?

20
00:01:04,514 --> 00:01:06,975
Vous pourriez être tentés 
de recopier le code

21
00:01:06,975 --> 00:01:09,861
autant de fois que nécessaire
aux endroits appropriés,

22
00:01:09,861 --> 00:01:13,690
mais évidemment, ceci est 
une très mauvaise solution.

23
00:01:13,690 --> 00:01:16,318
Il ne faut jamais dupliquer 
de code en programmant,

24
00:01:16,318 --> 00:01:18,498
ne soyez pas tentés par le copier-coller,

25
00:01:18,498 --> 00:01:22,534
ce que vous vous voudriez recopier 
doit être mis dans une fonction.

26
00:01:23,504 --> 00:01:25,702
Pourquoi ne faut-il jamais
dupliquer du code ?

27
00:01:25,702 --> 00:01:29,054
Cela rend le programme inutilement long,

28
00:01:29,054 --> 00:01:34,206
difficile à comprendre,
et surtout difficile à maintenir.

29
00:01:34,479 --> 00:01:38,215
Il faudrait reporter chaque modification
dans chacune des copies.

30
00:01:38,215 --> 00:01:41,001
C'est pour ça que tout bon 
langage de programmation

31
00:01:41,001 --> 00:01:43,785
fournit des moyens 
pour permettre la réutilisation

32
00:01:43,785 --> 00:01:45,483
de portions de programmes.

33
00:01:45,483 --> 00:01:49,468
Et en Java, ça se fait en utilisant
ce qu'on appelle des fonctions.

34
00:01:49,468 --> 00:01:51,803
Considérons par exemple
le programme suivant.

35
00:01:51,803 --> 00:01:54,432
Ce programme commence par demander

36
00:01:54,432 --> 00:01:57,446
le nombre de points obtenus 
par un premier joueur,

37
00:01:57,446 --> 00:01:59,953
et vous pouvez constater 
qu'il utiliser une boucle <i>do..while</i>

38
00:01:59,953 --> 00:02:03,438
pour forcer l'utilisateur à entrer
une valeur entre 0 et 100.

39
00:02:03,438 --> 00:02:07,832
Ensuite, le programme demande le temps
utilisé par le premier joueur,

40
00:02:07,832 --> 00:02:10,668
qui sera cette fois-ci
une valeur entre 1 et 60.

41
00:02:10,668 --> 00:02:13,689
Et à partir du nombre 
de points et du temps,

42
00:02:13,689 --> 00:02:17,240
le programme calcule le score
du premier joueur.

43
00:02:17,240 --> 00:02:22,165
Ensuite, le programme répète 
ces opérations pour un deuxième joueur,

44
00:02:22,165 --> 00:02:26,272
il demande un nombre de points, un temps,

45
00:02:26,272 --> 00:02:29,342
et calcule le score du deuxième joueur.

46
00:02:29,342 --> 00:02:35,339
Finalement, le programme compare

47
00:02:35,339 --> 00:02:38,141
le score du premier joueur
et le score du deuxième joueur,

48
00:02:38,141 --> 00:02:41,899
pour afficher si c'est le premier joueur
ou le deuxième qui a gagné.

49
00:02:41,899 --> 00:02:43,963
Vous pouvez constater 
que dans ce programme,

50
00:02:43,963 --> 00:02:47,231
le code qui consiste à demander
un nombre de points, un temps,

51
00:02:47,231 --> 00:02:50,536
et à calculer un score à partir
du nombre de points et du temps,

52
00:02:50,536 --> 00:02:52,748
est répété deux fois dans le programme,

53
00:02:52,748 --> 00:02:54,768
une fois pour chacun des deux joueurs.

54
00:02:54,768 --> 00:02:57,366
Dans un cas comme celui-là, 
il faut utiliser une fonction

55
00:02:57,366 --> 00:03:00,124
pour éviter la duplication du code.

56
00:03:00,124 --> 00:03:03,814
Pour ceci, je vais tout d'abord 
mettre de côté le code qui m'intéresse,

57
00:03:03,814 --> 00:03:07,297
c'est-à-dire le code qui demande
un nombre de points, un temps,

58
00:03:07,297 --> 00:03:09,431
et qui calcule un score.

59
00:03:09,431 --> 00:03:12,280
Je vais mettre ce code 
à la fin du programme,

60
00:03:12,280 --> 00:03:16,374
mais avant la dernière accolade fermante.

61
00:03:16,374 --> 00:03:19,254
Je vais mettre ce code 
entre une accolade ouvrante

62
00:03:19,254 --> 00:03:21,369
et une accolade fermante.

63
00:03:21,369 --> 00:03:25,323
Ce code va constituer
ce qu'on appelle le corps

64
00:03:25,323 --> 00:03:29,337
de ma future fonction.

65
00:03:29,337 --> 00:03:33,151
Ce corps, il va falloir le nommer.

66
00:03:33,151 --> 00:03:39,304
Je vais l'appeler ici, <i>saisieEtCalcul</i>,

67
00:03:39,304 --> 00:03:42,854
ce qui permettra d'y faire référence 
dans le reste du programme,

68
00:03:42,854 --> 00:03:48,916
et ça deviendra le nom 
de ma future fonction.

69
00:03:50,069 --> 00:03:53,129
Ma fonction doit fournir 
le score qu'elle aura calculé

70
00:03:53,129 --> 00:03:54,708
au reste du programme.

71
00:03:54,708 --> 00:03:59,130
Pour cela, je vais tout d'abord 
enlever les références au premier joueur,

72
00:03:59,130 --> 00:04:03,374
puisque ma fonction va être valable
pour n'importe quel joueur.

73
00:04:03,374 --> 00:04:07,283
Je vais rajouter à la fin de ma fonction,
le mot clé <i>return</i>,

74
00:04:07,283 --> 00:04:10,875
suivi de nom de la variable
<i>scoreJoueur</i>,

75
00:04:10,875 --> 00:04:14,495
pour indiquer que ma fonction
doit renvoyer la valeur

76
00:04:14,495 --> 00:04:16,602
contenue dans la variable <i>scoreJoueur</i>.

77
00:04:16,602 --> 00:04:19,469
Ne vous inquiétez pas, 
nous verrons tout cela en détails

78
00:04:19,469 --> 00:04:21,152
dans la suite du cours.

79
00:04:21,152 --> 00:04:26,144
La variable <i>scoreJoueur</i>
a été définie de type double,

80
00:04:26,144 --> 00:04:29,735
la fonction va donc fournir 
une valeur de type double,

81
00:04:29,735 --> 00:04:32,526
ce qu'il faut indiquer 
au reste du programme,

82
00:04:32,526 --> 00:04:36,775
et ça se fait en ajoutant <i>double</i>
avant le nom de la fonction.

83
00:04:37,623 --> 00:04:39,555
Un autre aspect des fonctions 
est qu'elles peuvent utiliser

84
00:04:39,555 --> 00:04:42,973
des valeurs fournies par le reste 
du programme pour pouvoir fonctionner.

85
00:04:42,973 --> 00:04:46,174
Notre fonction <i>saisieEtCalcul</i>
est relativement simple,

86
00:04:46,174 --> 00:04:48,278
elle n'a pas besoin de telles valeurs.

87
00:04:48,278 --> 00:04:52,758
Pour indiquer cela, il faut ajouter 
après le nom de la fonction,

88
00:04:52,758 --> 00:04:55,338
une parenthèse ouvrante
et une parenthèse fermante.

89
00:04:55,338 --> 00:04:59,833
Il me reste à rajouter le mot clé <i>static</i>
au début de cette ligne,

90
00:05:00,537 --> 00:05:03,967
pour une raison que nous verrons
dans la suite du cours.

91
00:05:03,967 --> 00:05:07,187
Et voilà, nous avons crée
notre première fonction.

92
00:05:07,567 --> 00:05:10,093
Je vais maintenant utiliser
ma fonction <i>saisieEtCalcul</i>

93
00:05:10,093 --> 00:05:12,426
pour demander un nombre 
de points, un temps,

94
00:05:12,426 --> 00:05:14,703
et calculer le score du premier joueur.

95
00:05:14,703 --> 00:05:17,883
Pour ceci, je vais retourner à l'endroit
où j'avais extrait le code

96
00:05:17,883 --> 00:05:21,547
que j'ai utilisé pour créer ma fonction,
c'est-à-dire, ici.

97
00:05:21,547 --> 00:05:26,928
Je vais déclarer
une variable <i>scoreJoueur1</i>,

98
00:05:27,248 --> 00:05:30,341
que je vais initialiser
en utilisant la valeur fournie

99
00:05:30,341 --> 00:05:32,314
par la fonction <i>saisieEtCalcul</i>.

100
00:05:32,314 --> 00:05:36,559
Pour cela, je vais indiquer
le nom de la fonction,

101
00:05:37,768 --> 00:05:41,780
suivi d'une parenthèse ouvrante,
et d'une parenthèse fermante.

102
00:05:41,780 --> 00:05:47,026
Cette instruction initialise donc
la variable <i>scoreJoueur1</i>

103
00:05:47,026 --> 00:05:50,725
à la valeur fournie par la fonction
<i>saisieEtCalcul</i>,

104
00:05:50,725 --> 00:05:53,473
et cette utilisation 
de la fonction <i>saisieEtCalcul</i>,

105
00:05:53,473 --> 00:05:57,888
s'appelle un <i>appel à la fonction</i>.

106
00:06:00,035 --> 00:06:01,711
Je peux faire exactement la même chose

107
00:06:01,711 --> 00:06:03,789
pour initialiser le score 
du deuxième joueur.

108
00:06:03,789 --> 00:06:06,248
Je peux remplacer tout ce code,

109
00:06:08,238 --> 00:06:12,847
par un simple appel 
à ma fonction <i>saisieEtCalcul</i>.

110
00:06:20,281 --> 00:06:22,669
Et vous pouvez constater 
que le programme

111
00:06:22,669 --> 00:06:24,494
est maintenant beaucoup plus concis.

112
00:06:24,494 --> 00:06:26,951
Créer la fonction <i>saisieEtCalcul</i>
m'avait permis

113
00:06:26,951 --> 00:06:28,600
d'éviter de dupliquer du code,

114
00:06:28,600 --> 00:06:30,700
mais c'est aussi intéressant 
de créer une fonction,

115
00:06:30,700 --> 00:06:34,798
pour pouvoir se concentrer sur un aspect
un peu difficile du programme,

116
00:06:34,798 --> 00:06:37,725
comme par exemple ici,
le calcul du score.

117
00:06:40,784 --> 00:06:45,148
Comme avant, je vais extraire
le code qui m'intéresse,

118
00:06:45,148 --> 00:06:48,540
le mettre entre accolades,

119
00:06:50,778 --> 00:06:53,741
ma nouvelle fonction va renvoyer
le score du joueur,

120
00:06:53,741 --> 00:06:56,847
donc une valeur de type <i>double</i>.

121
00:06:56,847 --> 00:07:00,095
Je vais appeler ma nouvelle fonction
tout simplement <i>score</i>,

122
00:07:00,095 --> 00:07:03,092
pour l'instant je vais faire suivre 
le nom de ma fonction

123
00:07:03,092 --> 00:07:06,604
par une parenthèse ouvrante
et une parenthèse fermante.

124
00:07:06,604 --> 00:07:12,087
Comme avant, ma fonction 
va renvoyer le score du joueur,

125
00:07:12,087 --> 00:07:15,376
donc pour cela je vais utiliser
le mot clé <i>return</i>.

126
00:07:19,012 --> 00:07:21,819
Mais la différence, par rapport à avant,

127
00:07:21,819 --> 00:07:25,253
est que cette fonction a besoin maintenant

128
00:07:25,253 --> 00:07:28,950
de la variable <i>nbPoints</i>
et de la variable <i>temps</i>.

129
00:07:29,540 --> 00:07:32,837
Donc dans ce cas, 
je vais rajouter ces variables

130
00:07:32,837 --> 00:07:35,524
entre les parenthèses ici,

131
00:07:36,443 --> 00:07:39,931
ce qui va constituer ce qu'on appelle

132
00:07:39,931 --> 00:07:43,699
les paramètres de la fonction.

133
00:07:43,699 --> 00:07:47,227
Comme avant, je vais retourner
là où j'ai extrait le code,

134
00:07:47,227 --> 00:07:51,413
pour créer ma fonction,
et appeler ma fonction à la place.

135
00:07:52,272 --> 00:07:55,222
Ça peut se faire par exemple ici,

136
00:07:56,794 --> 00:08:00,030
je vais appeler ma fonction 
en lui fournissant les valeurs

137
00:08:00,030 --> 00:08:02,656
de la variable <i>nbPoints</i>,

138
00:08:06,302 --> 00:08:10,164
et de la variable <i>temps</i>,
et ça se fait de cette façon là.

139
00:08:11,625 --> 00:08:15,243
En résumé, j'ai d'abord identifié le code

140
00:08:15,243 --> 00:08:17,846
qui devait être mis dans une fonction,

141
00:08:17,846 --> 00:08:22,222
j'ai extrait ce code pour pouvoir créer
ma nouvelle fonction,

142
00:08:22,222 --> 00:08:24,918
que j'ai nommée.

143
00:08:24,918 --> 00:08:28,456
J'ai identifié ce dont avait besoin
en entrée ma fonction

144
00:08:28,456 --> 00:08:30,767
pour pouvoir fonctionner.

145
00:08:30,767 --> 00:08:34,205
J'ai aussi identifié ce que devait
fournir ma fonction

146
00:08:34,205 --> 00:08:36,583
au reste du programme,

147
00:08:36,583 --> 00:08:41,780
et maintenant je peux remplacer 
la partie du code que j'ai extrait,

148
00:08:41,780 --> 00:08:44,672
par un appel à ma fonction.

149
00:08:45,917 --> 00:08:48,860
Une fonction est donc 
une portion de programme réutilisable,

150
00:08:48,860 --> 00:08:51,209
comme la fonction <i>saisieEtCalcul</i>,

151
00:08:51,209 --> 00:08:53,613
ou importante en soi, 
comme la fonction <i>score</i>.

152
00:08:53,613 --> 00:08:57,863
Elle est caractérisée par un corps,
qui est la portion de programme

153
00:08:57,863 --> 00:09:01,421
à réutiliser ou à mettre en évidence,

154
00:09:01,421 --> 00:09:04,750
elle est aussi caractérisée par son nom,

155
00:09:04,750 --> 00:09:07,832
qui va permettre de 
faire référence à cette fonction.

156
00:09:07,832 --> 00:09:12,823
Elle peut avoir des paramètres qui sont
l'ensemble des variables

157
00:09:12,823 --> 00:09:17,945
extérieures à la fonction dont le corps 
a besoin pour fonctionner.

158
00:09:17,945 --> 00:09:21,632
La fonction peut également 
renvoyer une valeur en retour,

159
00:09:21,632 --> 00:09:24,803
et cette valeur doit avoir un type.

160
00:09:25,793 --> 00:09:30,854
Finalement, l'utilisation d'une fonction
dans le reste du programme

161
00:09:30,854 --> 00:09:34,303
se nomme un appel à la fonction.

162
00:09:34,876 --> 00:09:38,183
Dans les langages uniquement orienté-objet,
comme c'est le cas de Java,

163
00:09:38,183 --> 00:09:41,011
le terme de <i>méthode</i>
est généralement utilisé

164
00:09:41,011 --> 00:09:42,961
à la place de celui de <i>fonction</i>.

165
00:09:42,961 --> 00:09:48,006
A partir de maintenant, nous allons 
donc dire <i>méthode</i> plutôt que <i>fonction</i>.

166
00:09:48,006 --> 00:09:50,343
Une méthode a donc trois facettes,

167
00:09:50,343 --> 00:09:54,079
tout d'abord, son entête,
qu'on peut voir comme un résumé

168
00:09:54,079 --> 00:09:55,623
de ce que fait la méthode,

169
00:09:55,623 --> 00:09:58,207
puisqu'elle est constituée de son nom,

170
00:09:58,973 --> 00:10:03,408
de ses paramètres, 
qui correspondent aux valeurs

171
00:10:03,408 --> 00:10:07,162
dont a besoin la méthode 
pour pouvoir fonctionner,

172
00:10:07,162 --> 00:10:12,576
ainsi que le type de la valeur 
que va fournir la méthode.

173
00:10:12,948 --> 00:10:15,872
Le deuxième aspect est 
la définition de la méthode,

174
00:10:15,872 --> 00:10:18,026
qui commence par l'entête,

175
00:10:18,026 --> 00:10:21,051
mais qui est constitué également du corps

176
00:10:23,799 --> 00:10:26,797
de la méthode,
et qui contient le code

177
00:10:26,797 --> 00:10:30,242
qui sera exécuté 
quand on utilise la méthode.

178
00:10:31,182 --> 00:10:35,838
Le dernier aspect est donc 
l'utilisation de la méthode,

179
00:10:35,838 --> 00:10:40,763
ou son appel,
où on va utiliser la méthode,

180
00:10:40,763 --> 00:10:44,722
en lui donnant des valeurs effectives 
pour ses paramètres,

181
00:10:46,342 --> 00:10:50,020
et la méthode va en règle générale 
fournir une valeur

182
00:10:51,180 --> 00:10:56,356
qu'on va pouvoir utiliser pour 
initialiser une variable par exemple.

183
00:10:56,726 --> 00:10:59,676
En pratique, le programmeur concepteur,

184
00:11:00,286 --> 00:11:03,596
c'est-à-dire la personne qui va écrire
la définition de la méthode,

185
00:11:03,596 --> 00:11:07,931
n'est pas forcément la même personne
que le programmeur utilisateur,

186
00:11:08,731 --> 00:11:11,826
c'est-à-dire la personne
qui va utiliser la méthode.

187
00:11:11,826 --> 00:11:16,895
Le programmeur utilisateur n'a pas 
à connaître le corps de la méthode,

188
00:11:16,895 --> 00:11:19,065
tout ce dont il a besoin de connaître,

189
00:11:19,065 --> 00:11:22,243
c'est son entête, pour pouvoir l'appeler.

190
00:11:22,643 --> 00:11:30,761
L'entête sert donc d'accord entre 
le programmeur utilisateur

191
00:11:30,761 --> 00:11:32,523
et le programmeur concepteur.

192
00:11:32,523 --> 00:11:38,760
En Java, on parle d'API, 
pour <i>application progamming interface</i>,

193
00:11:38,760 --> 00:11:42,835
qui décrit les interfaces d'utilisation
d'un ensemble de données.

194
00:11:43,835 --> 00:11:48,751
Le programmeur utilisateur doit respecter
l'entête de la méthode,

195
00:11:48,751 --> 00:11:50,320
quand il appelle la méthode,

196
00:11:50,320 --> 00:11:53,020
et le programmeur concepteur
va s'arranger

197
00:11:53,020 --> 00:11:56,988
pour que l'entête corresponde au problème
que l'utilisateur veut résoudre

198
00:11:56,988 --> 00:11:59,059
en appelant la méthode.
