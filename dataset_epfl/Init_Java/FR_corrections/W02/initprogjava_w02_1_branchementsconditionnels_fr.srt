1
00:00:00,000 --> 00:00:05,175
Dans une séquence précédente, nous avions
vu que programmer consiste à décrire une

2
00:00:05,175 --> 00:00:11,110
tâche à faire exécuter à l'ordinateur.

3
00:00:11,110 --> 00:00:14,386
Cette tâche étant décomposée d'un côté en
un

4
00:00:14,386 --> 00:00:18,670
certain nombre de données, c'est-à-dire
des grandeurs physiques du

5
00:00:18,670 --> 00:00:21,442
monde que l'on veut représenter dans le
programme et

6
00:00:21,442 --> 00:00:22,394
un certain nombre de

7
00:00:22,394 --> 00:00:25,100
traitements, c'est-à-dire d'opérations, de
manipulations

8
00:00:25,100 --> 00:00:26,156
de ces données.

9
00:00:26,156 --> 00:00:31,460
On a vu, justement, comment au travers
d'opérateurs, manipuler les données.

10
00:00:31,460 --> 00:00:34,302
Mais pour que soit véritablement un
programme, il faudrait

11
00:00:34,302 --> 00:00:37,643
que les données puissent influencer les
traitements à effectuer.

12
00:00:37,643 --> 00:00:40,700
C'est ce que nous allons étudier dans
cette séquence vidéo.

13
00:00:40,700 --> 00:00:43,514
C'est ce que l'on appelle les structures
de contrôle.

14
00:00:43,514 --> 00:00:46,564
En effet, jusqu'à maintenant, les
programmes que l'on exécutait

15
00:00:46,564 --> 00:00:48,790
étaient simplement des séquences
d'instructions

16
00:00:48,790 --> 00:00:50,140
les unes derrière les autres.

17
00:00:50,140 --> 00:00:54,485
Ces traitements n'étaient pas conditionnés
par les valeurs des variables.

18
00:00:54,485 --> 00:00:58,225
Les structures de contrôle permettent
justement de

19
00:00:58,225 --> 00:01:01,020
choisir, par exemple, si l'on veut une
certaine

20
00:01:01,020 --> 00:01:04,875
séquence d'instructions ou une autre
séquence d'instructions

21
00:01:04,875 --> 00:01:07,815
en fonction par exemple d'une valeur d'une
variable.

22
00:01:07,815 --> 00:01:10,920
C'est ce que l'on appelle un branchement
conditionnel.

23
00:01:10,920 --> 00:01:15,408
Il existe en fait trois structures de
contrôle : les branchements conditionnels

24
00:01:15,408 --> 00:01:21,015
qui permettent donc de choisir l'exécution
d'un bout de code ou l'exécution

25
00:01:21,015 --> 00:01:25,881
d'un autre bout de code en fonction de
certaines conditions sur les données.

26
00:01:25,881 --> 00:01:29,249
Il existe les itérations qui sont
simplement des boucles sur

27
00:01:29,249 --> 00:01:33,067
un ensemble de bouts de code à répéter un
certain nombre

28
00:01:33,067 --> 00:01:36,834
de fois ; et puis des boucles
conditionnelles qui, elles aussi,

29
00:01:36,834 --> 00:01:40,860
répètent un certain nombre de fois des
instructions mais en fonction

30
00:01:40,860 --> 00:01:42,969
d'une condition qui est évaluée à chaque
fois.

31
00:01:42,969 --> 00:01:45,363
Dans cette séquence-ci, nous allons
commencer par

32
00:01:45,363 --> 00:01:49,665
nous intéresser aux branchements
conditionnels qui permettent donc

33
00:01:49,665 --> 00:01:52,607
de sauter certaines parties
ou de choisir

34
00:01:52,607 --> 00:01:57,321
certaines parties si des différentes
conditions sont remplies.

35
00:01:57,321 --> 00:01:59,890
Regardons maintenant cela plus en détail.

36
00:01:59,890 --> 00:02:03,006
Suppons que, par exemple, on veuille faire
telle ou

37
00:02:03,006 --> 00:02:05,970
telle chose en fonction de la valeur
d'un entier

38
00:02:05,970 --> 00:02:10,280
qui a été lu sur le clavier, ici à l'aide
du «scanner».

39
00:02:10,280 --> 00:02:14,341
Alors, on va utiliser ce qu'on en appelle
un «branchement conditionnel» que

40
00:02:14,341 --> 00:02:16,879
je vais détailler dans un instant.
Par exemple, si la valeur

41
00:02:16,879 --> 00:02:19,466
est plus petite que 5, on va faire une
certaine chose et

42
00:02:19,466 --> 00:02:22,185
si la valeur est plus grande que 5, on
en fera une autre.

43
00:02:22,185 --> 00:02:26,470
Voilà l'idée d'un branchement conditionnel
où l'on choisit en fonction

44
00:02:26,470 --> 00:02:30,954
du fait que n est supérieur ou
inférieur à 5,

45
00:02:30,954 --> 00:02:36,298
tel ou tel bout de code à exécuter.
Donc les lignes en question sont ces

46
00:02:36,298 --> 00:02:41,728
trois lignes ici qui sont organisées
suivant une syntaxe générale suivante.

47
00:02:41,728 --> 00:02:44,896
On commence par le mot-clé «if»,
ensuite, entre

48
00:02:44,896 --> 00:02:48,428
parenthèses, on trouve ici une condition ;
puis on

49
00:02:48,428 --> 00:02:52,212
va avoir ici entre accolades un bloc
d'instructions

50
00:02:52,212 --> 00:02:56,272
qui va être exécuté lorsque la condition
est vraie.

51
00:02:56,272 --> 00:03:01,951
Et on aura ensuite, de façon optionnelle,
un autre mot-clé ici,

52
00:03:01,951 --> 00:03:07,898
«else», qui lui-même va contrôler ici un
autre bloc d'instructions qui seront

53
00:03:07,898 --> 00:03:13,500
exécutées si la condition que l'on a
testée au départ est fausse.

54
00:03:13,500 --> 00:03:16,848
On voit bien ici qu'en fonction, donc, de

55
00:03:16,848 --> 00:03:21,453
la condition on va soit exécuter un bloc
d'instructions,

56
00:03:21,453 --> 00:03:23,280
soit en exécuter un autre.

57
00:03:23,280 --> 00:03:29,690
C'est ce qu'on appelle donc un branchement
conditionnel en fonction de la condition.

58
00:03:29,690 --> 00:03:33,290
Le schéma général, donc, d'un branchement
conditionnel est

59
00:03:33,290 --> 00:03:35,860
le suivant : on commence par
le mot-clé «if» ;

60
00:03:35,860 --> 00:03:39,808
ensuite, on écrit entre parenthèses
une condition.

61
00:03:39,808 --> 00:03:46,514
On reviendra plus tard dans cette vidéo
sur ce que sont les conditions et comment

62
00:03:46,514 --> 00:03:47,500
les écrire.

63
00:03:47,500 --> 00:03:49,705
Ensuite, nous avons un bloc d'instructions

64
00:03:49,705 --> 00:03:52,090
qui s'exécute lorsque la condition est
vraie.

65
00:03:52,090 --> 00:03:58,934
Puis nous avons éventuellement le mot
réservé «else» suivi lui-même d'un

66
00:03:58,934 --> 00:04:05,955
autre bloc d'instructions qui sera exécuté
lorsque la condition est fausse.

67
00:04:05,955 --> 00:04:09,651
Regardons sur un exemple concret pas à pas
comment cela fonctionne.

68
00:04:09,651 --> 00:04:11,910
Supposons qu'on ait donc le code suivant

69
00:04:11,910 --> 00:04:15,110
où le branchement conditionnel va se
situer ici.

70
00:04:15,110 --> 00:04:17,970
Mais d'abord on commence par donc demander

71
00:04:17,970 --> 00:04:22,335
une question à l'utilisateur pour saisir
un entier.

72
00:04:22,335 --> 00:04:24,051
Donc supposons par exemple que

73
00:04:24,051 --> 00:04:26,700
l'utilisateur ait décidé d'entrer
l'entier 3.

74
00:04:26,700 --> 00:04:30,660
À ce moment-là, on va arriver donc à ce
branchement conditionnel et

75
00:04:30,660 --> 00:04:34,560
on va se poser la question : est-ce que
3 est inférieur à 5 ?

76
00:04:34,560 --> 00:04:37,710
3 étant inférieur à 5, la condition

77
00:04:37,710 --> 00:04:41,416
ici est vraie et donc le bloc
d'instructions qui va être

78
00:04:41,416 --> 00:04:45,410
exécuté, c'est le bloc qui suit
directement ici la condition, ce qui

79
00:04:45,410 --> 00:04:49,190
fait que donc le programme, dans ce
cas-là, si l'utilisateur a entré

80
00:04:49,190 --> 00:04:53,060
3, va afficher le message: "votre
nombre est plus petit que cinq".

81
00:04:53,060 --> 00:04:58,228
Puis ensuite, le programme continuera
après l'instruction de

82
00:04:58,228 --> 00:05:03,552
branchement conditionnel ici, continuera
le déroulement normal et affichera

83
00:05:03,552 --> 00:05:07,355
donc ici: "fin du programme".

84
00:05:07,355 --> 00:05:10,211
Que se passe-t-il maintenant dans la
situation où

85
00:05:10,211 --> 00:05:13,050
l'utilisateur entre un nombre plus grand
que 5?

86
00:05:13,050 --> 00:05:17,535
Par exemple, s'il rentre la valeur 7
alors on va arriver ici dans la condition

87
00:05:17,535 --> 00:05:20,373
dans le branchement conditionnel va
évaluer la

88
00:05:20,373 --> 00:05:23,025
condition : «est-ce que 7 est inférieur
à 5 ?»

89
00:05:23,025 --> 00:05:26,200
Cette condition est, bien entendu, fausse
ce qui fait que

90
00:05:26,200 --> 00:05:29,098
le branchement va se faire ici sur le bloc
contrôlé

91
00:05:29,098 --> 00:05:30,961
par le mot-clé else ici, qui est le

92
00:05:30,961 --> 00:05:33,970
bloc contrôlé donc lorsque la condition
est fausse.

93
00:05:33,970 --> 00:05:41,740
Et donc on va ici afficher: "votre nombre
est plus grand ou égal à cinq".

94
00:05:41,740 --> 00:05:48,615
Puis ensuite on continuera l'exécution
après le bloc de branchement conditionnel,

95
00:05:48,615 --> 00:05:53,526
donc ici on terminera de nouveau par
l'affichage de la fin du programme.

96
00:05:53,526 --> 00:05:54,750
Les accolades

97
00:05:54,750 --> 00:05:59,486
servent donc à contrôler un ensemble
d'instructions, que

98
00:05:59,486 --> 00:06:02,848
ce soit le bloc d'instructions exécuté
lorsque la

99
00:06:02,848 --> 00:06:05,356
condition est vraie ou que ce soit le

100
00:06:05,356 --> 00:06:09,570
bloc d'instructions exécuté lorsque la
condition est fausse.

101
00:06:09,570 --> 00:06:12,118
Ces accolades servent à regrouper les
instruction que l'on

102
00:06:12,118 --> 00:06:15,000
veut mettre ensemble pour exécuter dans
telle ou telle condition.

103
00:06:15,000 --> 00:06:19,876
On peut bien sur ajouter autant
d'instructions que l'on veut dans

104
00:06:19,876 --> 00:06:21,613
un bloc d'instructions.

105
00:06:21,613 --> 00:06:26,357
Supposons par exemple que l'on veuille
afficher un message qui

106
00:06:26,357 --> 00:06:31,720
indique la valeur du nombre lorsque le
nombre est plus petit que 5.

107
00:06:31,720 --> 00:06:33,489
Donc, ce que l'on va faire, c'est qu'on va

108
00:06:33,489 --> 00:06:35,868
dans le bloc ici conditionné par la
condition n

109
00:06:35,868 --> 00:06:38,298
inférieur à 5, on va rajouter ici la ligne

110
00:06:38,298 --> 00:06:43,290
de message qui va nous permettre
d'afficher un message supplémentaire.

111
00:06:43,290 --> 00:06:45,199
Par ailleurs, lorsqu'un bloc

112
00:06:45,199 --> 00:06:48,270
ne contient qu'une seule instruction, il
n'est

113
00:06:48,270 --> 00:06:51,910
pas strictement nécessaire de mettre les
accolades.

114
00:06:51,910 --> 00:06:55,960
Néanmoins, je vous encourage plutôt à
toujours utiliser une

115
00:06:55,960 --> 00:06:59,608
structure de blocs, c'est-à-dire à
toujours mettre des accolades.

116
00:06:59,608 --> 00:07:01,880
Cela rend le code non seulement plus
lisible

117
00:07:01,880 --> 00:07:04,502
mais en tout cas plus maintenable, ça
facilite

118
00:07:04,502 --> 00:07:07,172
l'ajout d'instructions si l'on veut à un
moment

119
00:07:07,172 --> 00:07:10,448
donné ajouter une instruction ici, on peut
le faire

120
00:07:10,448 --> 00:07:13,880
sans aucun autre souci puisque le bloc est
déjà prévu.

121
00:07:13,880 --> 00:07:16,652
Cependant, vous pourriez rencontrer ici ou
là dans

122
00:07:16,652 --> 00:07:18,962
du code ce genre de syntaxe sans
accolades.

123
00:07:18,962 --> 00:07:21,410
C'est donc pour ça qu'il est bon de la
connaitre

124
00:07:21,410 --> 00:07:24,222
même si je ne vous encourage pas à la
pratiquer.

125
00:07:24,222 --> 00:07:27,557
Je vous recommande plutôt de
systématiquement utiliser la

126
00:07:27,557 --> 00:07:30,400
syntaxe avec des blocs, c'est-à-dire
mettre les accolades.

127
00:07:30,400 --> 00:07:35,806
Ensuite, il faut savoir que le bloc else
est tout à fait optionnel.

128
00:07:35,806 --> 00:07:38,219
On peut tout à fait écrire un bloc

129
00:07:38,219 --> 00:07:41,891
d'instructions de branchement conditionnel
ici sans le else.

130
00:07:41,891 --> 00:07:45,963
Tout simplement ce qui se passe, c'est que
lorsque la condition est fausse, il

131
00:07:45,963 --> 00:07:47,559
ne se passe rien de particulier et

132
00:07:47,559 --> 00:07:49,935
on continue à exécuter le programme
normalement.

133
00:07:49,935 --> 00:07:52,749
Ici, il ne s'exécutera quelque chose de
particulier

134
00:07:52,749 --> 00:07:55,560
que et uniquement lorsque la condition est
vraie.

135
00:07:55,560 --> 00:08:01,340
Prenons un exemple.
Si je reprends l'exemple précédent

136
00:08:01,340 --> 00:08:04,078
avec la lecture au clavier ici d'une
valeur et

137
00:08:04,078 --> 00:08:07,635
supposons que donc l'utilisateur ait
rentré la valeur 3.

138
00:08:07,635 --> 00:08:10,170
On arrive ici sur le branchement
conditionnel.

139
00:08:10,170 --> 00:08:14,002
On teste la condition: est-ce que 3
est inférieur à 5 ?

140
00:08:14,002 --> 00:08:17,085
Cette condition est, bien entendu, vraie
ce qui

141
00:08:17,085 --> 00:08:19,215
fait que l'on va donc exécuter le bloc

142
00:08:19,215 --> 00:08:22,666
ici contrôlé par le branchement
conditionnel et donc

143
00:08:22,666 --> 00:08:27,087
on va afficher ici le message: "votre
nombre

144
00:08:27,087 --> 00:08:29,905
est plus petit que cinq".

145
00:08:29,905 --> 00:08:34,013
Et puis ensuite, on va continuer
l'exécution du programme tout à

146
00:08:34,013 --> 00:08:38,880
fait normalement et on va afficher le
message de fin ici.

147
00:08:38,880 --> 00:08:41,374
Qu'en est-il si l'utilisateur avait entré
une valeur

148
00:08:41,374 --> 00:08:44,125
qui est strictement supérieure ou égale à
5

149
00:08:44,125 --> 00:08:48,778
par exemple 7 est supérieur ou égal à

150
00:08:48,778 --> 00:08:52,626
5 donc la condition cette fois-ci est
fausse.

151
00:08:52,626 --> 00:08:55,468
À ce moment-là simplement il ne se passe
rien de particulier.

152
00:08:55,468 --> 00:08:57,446
On ignore le bloc de branchement
conditionnel et on

153
00:08:57,446 --> 00:09:01,615
continue donc l'exécution après le bloc de
branchemenet conditionnel

154
00:09:01,615 --> 00:09:06,990
ce qui fait que dans ce cas, on n'exécute
que la ligne de fin, le message de fin.

155
00:09:06,990 --> 00:09:11,654
Les branchements conditionnels en Java
suivent donc le schéma

156
00:09:11,654 --> 00:09:14,340
général suivant: on commence par le mot
réservé if.

157
00:09:14,340 --> 00:09:18,265
Ensuite entre accolades rondes ici, on
écrit une condition

158
00:09:18,265 --> 00:09:20,740
que l'on veut évaluer.

159
00:09:20,740 --> 00:09:25,208
Ensuite, on met un bloc d'instructions ici
qui sera évalué si la

160
00:09:25,208 --> 00:09:29,911
condition, qui sera exécuté si la
condition est évaluée à vrai, puis

161
00:09:29,911 --> 00:09:36,023
éventuellement on peut mettre ici un bloc
optionnel else ici avec un bloc

162
00:09:36,023 --> 00:09:41,966
d'instructions qui sera exécuté si la
condition est évaluée comme fausse.

163
00:09:41,966 --> 00:09:43,830
Ces blocs d'instructions

164
00:09:43,830 --> 00:09:47,985
peuvent contenir n'importe quel bout de
programme Java

165
00:09:47,985 --> 00:09:52,140
et en particulier peuvent aussi contenir
d'autres instructions if.

166
00:09:52,140 --> 00:09:55,820
C'est ce qu'on appelle à ce moment-là des
choix imbriqués.

167
00:09:55,820 --> 00:09:57,120
Prenons un exemple.

168
00:09:57,120 --> 00:10:00,432
Supposons que l'on ait trois variables x,
y et

169
00:10:00,432 --> 00:10:04,177
z dont on veuille tester l'égalité par
exemple est-ce que

170
00:10:04,177 --> 00:10:08,528
x est égal à y, est-ce que y est égal à z
ou est-ce qu'elles sont les trois égales?

171
00:10:08,528 --> 00:10:08,924
Ce qu'on

172
00:10:08,924 --> 00:10:11,762
va pouvoir faire, c'est donc commencer par
un bloc ici

173
00:10:11,762 --> 00:10:17,150
d'instructions qui va tester si x est égal
à y.

174
00:10:17,150 --> 00:10:22,500
Ce bloc s'étend jusqu'ici avec ici son
else associé et le bloc du else.

175
00:10:22,500 --> 00:10:24,905
Et donc dans le bloc par exemple, contrôlé
par

176
00:10:24,905 --> 00:10:27,510
le premier test, lorsque le premier test
est vrai,

177
00:10:27,510 --> 00:10:33,430
on voit ici, on a de même un deuxième if,
ce qui est tout à fait possible,

178
00:10:33,430 --> 00:10:35,814
lui-même donc avec ici son bloc de

179
00:10:35,814 --> 00:10:40,545
conditions vraies et son bloc de
conditions fausses.

180
00:10:40,545 --> 00:10:42,177
De même dans le premier else, on voit ici
de

181
00:10:42,177 --> 00:10:44,337
nouveau un if avec son bloc de conditions
vraies et son

182
00:10:44,337 --> 00:10:46,663
bloc de conditions fausses et on voit que
dans le

183
00:10:46,663 --> 00:10:50,070
dernier bloc de conditions, on peut même
avoir un dernier if.

184
00:10:50,070 --> 00:10:53,840
Alors vous comprenez bien que ce genre de
construction, il ne faut pas en abuser.

185
00:10:53,840 --> 00:10:57,422
Ça devient vite un petit peu difficile à
comprendre, difficile à lire.

186
00:10:57,422 --> 00:10:58,745
Au-delà de trois niveaux,

187
00:10:58,745 --> 00:11:00,005
je trouve que ça devient

188
00:11:00,005 --> 00:11:03,760
difficilement compréhensible, sinon bien
totalement illisible.

189
00:11:03,760 --> 00:11:07,460
Regardons maintenant l'exemple vraiment en
détail pas à pas.

190
00:11:07,460 --> 00:11:10,050
Supposons qu'on ait ici trois variables :
x, y

191
00:11:10,050 --> 00:11:12,661
et z, qui contiennent chacune
la valeur 1.

192
00:11:12,661 --> 00:11:17,528
Donc on commence par la première
instruction if ici qui va tester: "est-ce

193
00:11:17,528 --> 00:11:23,295
que x est égal à y?" On a ici
effectivement un 1 qui est égal à un 1.

194
00:11:23,295 --> 00:11:25,066
La condition

195
00:11:25,066 --> 00:11:29,740
est vraie, ce qui fait que l'on arrive

196
00:11:29,740 --> 00:11:31,580
à ce deuxième, cette deuxième instruction
if ici

197
00:11:31,580 --> 00:11:33,926
qui va évaluer est-ce que la valeur de y
est égal à la valeur de z.

198
00:11:33,926 --> 00:11:36,395
Donc on repose la question ici: est-ce que
un est

199
00:11:36,395 --> 00:11:38,635
égal à un, ce qui est en effet vrai ce

200
00:11:38,635 --> 00:11:41,355
qui fait qu'on va entrer dans le bloc ici
et

201
00:11:41,355 --> 00:11:45,110
afficher donc le message : "les trois
valeurs sont égales".

202
00:11:45,110 --> 00:11:49,863
Puis, on va continuer l'exécution à la fin
du bloc en question.

203
00:11:49,863 --> 00:11:52,936
Ici, il n'y a rien de particulier à faire.

204
00:11:52,936 --> 00:11:57,233
Puis, on va aussi continuer l'exécution
après ce bloc ici.

205
00:11:57,233 --> 00:12:00,630
C'est-à-dire qu'on arrive ici à la fin du
programme.

206
00:12:00,630 --> 00:12:03,290
Regardons maintenant ce qui se passe
lorsque

207
00:12:03,290 --> 00:12:05,180
l'on a, par exemple, les valeurs y et

208
00:12:05,180 --> 00:12:09,541
z qui valent toutes les deux 2 et qui
sont différentes de la valeur de x.

209
00:12:09,541 --> 00:12:12,427
Le programme commence donc comme tout à
l'heure

210
00:12:12,427 --> 00:12:14,900
par évaluer est-ce que la valeur de x est

211
00:12:14,900 --> 00:12:16,753
égale à la valeur de y.

212
00:12:16,753 --> 00:12:21,876
Et dans ce cas-ci, bien sur, la réponse
est fausse et donc la

213
00:12:21,876 --> 00:12:27,408
condition ici étant fausse, on va exécuter
le bloc else correspondant.

214
00:12:27,408 --> 00:12:30,440
Donc, on rentre ici dans le bloc else du

215
00:12:30,440 --> 00:12:33,877
bas du programme, ce qui fait que on va
rentrer

216
00:12:33,877 --> 00:12:37,496
ici dans le test de cette deuxième
condition : «est-ce que...

217
00:12:37,496 --> 00:12:39,960
...la valeur de x (1) est égale 
à la valeur...

218
00:12:39,960 --> 00:12:40,720
...de z (2) ?»

219
00:12:40,720 --> 00:12:47,065
Bien sur cette condition est fausse et
donc ce if ici va lui-même se brancher

220
00:12:47,065 --> 00:12:52,822
sur son bloc else et donc on va se
retrouver à évaluer cette troisième

221
00:12:52,822 --> 00:12:58,508
condition : est-ce que y a une valeur
qui est égale à z ?

222
00:12:58,508 --> 00:13:01,718
2 est égal à 2 : ici, on a
bien sûr une

223
00:13:01,718 --> 00:13:04,994
condition qui est vraie ; ce qui fait que
cette condition, ce bloc

224
00:13:04,994 --> 00:13:07,451
«if», ce branchement conditionnel va
exécuter la

225
00:13:07,451 --> 00:13:10,176
condition, le bloc ici conditionné
par le fait

226
00:13:10,176 --> 00:13:12,396
que la condition est vraie et va donc

227
00:13:12,396 --> 00:13:16,587
afficher : "seules les deux dernières
valeurs sont égales".

228
00:13:16,587 --> 00:13:20,456
Puis on va continuer l'exécution à partir
de là. On

229
00:13:20,456 --> 00:13:24,170
va continuer après ce bloc ici qu'on est
en train d'exécuter.

230
00:13:24,170 --> 00:13:25,710
Il n'y a rien de particulier.

231
00:13:25,710 --> 00:13:29,552
Puis on va continuer l'exécution après ce
branchement conditionnel ici.

232
00:13:29,552 --> 00:13:30,083
Il n'y a rien

233
00:13:30,083 --> 00:13:30,850
de particulier.

234
00:13:30,850 --> 00:13:35,303
Puis on va continuer l'exécution après ce
branchement ici

235
00:13:35,303 --> 00:13:39,559
et on arrive donc à la fin de cet exemple.

