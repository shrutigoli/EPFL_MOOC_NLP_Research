1
00:00:00,000 --> 00:00:03,276
Dans une séquence vidéo précédente, nous
avons

2
00:00:03,276 --> 00:00:07,240
introduit l'instruction de branchement
conditionnel de if, et

3
00:00:07,240 --> 00:00:09,400
nous avons vu que pour pouvoir
fonctionner,

4
00:00:09,400 --> 00:00:12,320
une telle instruction a besoin d'exprimer
des conditions.

5
00:00:12,320 --> 00:00:13,760
Les exemples de conditions que nous

6
00:00:13,760 --> 00:00:15,872
avons vu jusqu'ici étaient relativement
simples, ils

7
00:00:15,872 --> 00:00:17,456
consistaient par exemple à comparer la

8
00:00:17,456 --> 00:00:19,195
valeur d'une variable avec une autre
valeur.

9
00:00:19,195 --> 00:00:22,555
Nous allons maintenant examiner la notion
de condition de façon un

10
00:00:22,555 --> 00:00:25,435
petit peu plus détaillée et voir qu'en
Java, il est possible

11
00:00:25,435 --> 00:00:27,760
d'exprimer des conditions relativement
complexes.

12
00:00:27,760 --> 00:00:30,768
Vous avez donc ici sous les yeux un
exemple d'instruction

13
00:00:30,768 --> 00:00:34,480
de branchement conditionnel tel que nous
avons déjà eu l'occasion d'en

14
00:00:34,480 --> 00:00:39,070
rencontrer, et nous voyons que pour écrire
cette instruction conditionnelle,

15
00:00:39,070 --> 00:00:42,935
nous avons besoin d'exprimer une
condition, ce que nous voyons ici.

16
00:00:42,935 --> 00:00:46,235
La condition ici est une condition simple,
qui consiste à comparer

17
00:00:46,235 --> 00:00:49,295
la valeur d'une variable n avec une
constante, la constante 5.

18
00:00:49,295 --> 00:00:50,650
Petit détail syntaxique:

19
00:00:50,650 --> 00:00:52,417
les conditions dans une instruction

20
00:00:52,417 --> 00:00:54,754
conditionnelle sont toujours en Java
entourées

21
00:00:54,754 --> 00:00:59,460
de parenthèses, ce que nous voyons
concrètement ici, dans ce petit exemple.

22
00:00:59,460 --> 00:01:02,100
Commençons d'abord par examiner de façon
un petit peu plus

23
00:01:02,100 --> 00:01:05,255
exhaustive comment on peut, en Java,
exprimer des conditions simples.

24
00:01:05,255 --> 00:01:10,185
La vocation des conditions simples est de
comparer deux expressions,

25
00:01:10,185 --> 00:01:13,470
et pour cela nous allons utiliser des
opérateurs de comparaison.

26
00:01:13,470 --> 00:01:16,055
Nous avons déjà eu l'occasion d'en
rencontrer à plusieurs

27
00:01:16,055 --> 00:01:18,700
reprises dans des exemples, comme
inférieur ou supérieur.

28
00:01:18,700 --> 00:01:21,760
Java, en fait, offre une palette
d'opérateurs

29
00:01:21,760 --> 00:01:26,260
de comparaisons prédéfinis, par exemple
l'opérateur inférieur permet

30
00:01:26,260 --> 00:01:30,620
de comparer si la valeur d'une entité est
inférieure à la valeur d'une autre entité.

31
00:01:30,620 --> 00:01:35,040
Supposons par exemple que je dispose de
deux variables x et y, et que je souhaite

32
00:01:35,040 --> 00:01:37,148
savoir si la valeur de x est inférieure

33
00:01:37,148 --> 00:01:41,157
à celle de y, j'utiliserai l'opérateur de
comparaison inférieur

34
00:01:41,157 --> 00:01:44,610
pour réaliser ce test, pour exprimer cette
condition.

35
00:01:44,610 --> 00:01:49,200
De façon analogue, je peux utiliser
l'opérateur ==

36
00:01:49,200 --> 00:01:52,880
pour vérifier si deux entités ont la même
valeur.

37
00:01:52,880 --> 00:01:55,932
Par exemple, à nouveau si j'ai deux
variables x

38
00:01:55,932 --> 00:01:58,122
et y, si je veux tester que la valeur de

39
00:01:58,122 --> 00:01:59,890
x est la même que la valeur de y,

40
00:01:59,890 --> 00:02:03,780
j'utiliserai == et j'exprimerai ma
condition de cette façon.

41
00:02:03,780 --> 00:02:06,353
De façon analogue, nous disposons des

42
00:02:06,353 --> 00:02:10,400
tenants supérieur ou égal, inférieur ou
égal ou différent.

43
00:02:10,400 --> 00:02:15,011
Ce qu'il faut savoir, c'est que
l'évaluation d'une telle expression

44
00:02:15,011 --> 00:02:20,226
retourne à un résultat booléen, c'est-à-dire la
valeur "true"

45
00:02:20,226 --> 00:02:25,790
pour vrai ou encore la valeur "false"

46
00:02:25,790 --> 00:02:31,710
pour faux.
Petite mise

47
00:02:31,710 --> 00:02:35,938
en garde de rigueur: l'opérateur de
comparaison permettant de tester si

48
00:02:35,938 --> 00:02:39,360
deux valeurs sont égales s'exprime au
moyen de deux symboles égal.

49
00:02:39,360 --> 00:02:41,135
À ne pas confondre donc avec le

50
00:02:41,135 --> 00:02:44,300
symbole = unique, qui lui représente
l'affectation.

51
00:02:44,300 --> 00:02:49,755
Ici dans cet exemple, je teste si la
valeur de n vaut 5.

52
00:02:49,755 --> 00:02:53,115
Ce n'est pas ce que je fais quand j'écris
n = 5,

53
00:02:53,115 --> 00:02:56,848
qui signifie que j'affecte la
valeur

54
00:02:56,848 --> 00:02:58,130
5 à la variable n.

55
00:02:58,130 --> 00:03:00,434
Il faut toutefois noter que ce genre de

56
00:03:00,434 --> 00:03:03,314
tournure n'est pas tolérée par le
compilateur, en

57
00:03:03,314 --> 00:03:05,837
Java, et donc ici vous aurez un échec

58
00:03:05,837 --> 00:03:11,750
de compilation, si vous rédigez ce genre
d'instruction.

59
00:03:11,750 --> 00:03:14,029
Illustrons maintenant, au moyen de petits
exemples

60
00:03:14,029 --> 00:03:16,414
concrets, l'utilisation de conditions
simples en Java.

61
00:03:16,414 --> 00:03:18,375
Nous avons ici le cas d'un petit programme
qui

62
00:03:18,375 --> 00:03:21,974
commence par déclarer deux variables a et
b, en leur

63
00:03:21,974 --> 00:03:26,370
affectant des valeurs initiales,
respectivement 1 et 2.

64
00:03:26,370 --> 00:03:29,385
Nous souhaitons maintenant comparer les
valeurs de a

65
00:03:29,385 --> 00:03:31,395
et b, pour savoir si elles sont égales,

66
00:03:31,395 --> 00:03:34,301
et pour cela nous avons utilisé une
condition

67
00:03:34,301 --> 00:03:37,920
simple qui utilise l'opérateur de
comparaison ==.

68
00:03:37,920 --> 00:03:41,016
Ici les valeurs de a et b sont
différentes, ce

69
00:03:41,016 --> 00:03:43,252
qui auro comme conséquence que

70
00:03:43,252 --> 00:03:47,432
l'évaluation de cette expression
retournera "false".

71
00:03:47,432 --> 00:03:50,765
Nous allons donc brancher sur la partie

72
00:03:50,765 --> 00:03:54,849
else de l'instruction conditionnelle, et
donc exécuter cette

73
00:03:54,849 --> 00:03:58,237
instruction, qui aura pour conséquence
d'afficher le

74
00:03:58,237 --> 00:04:00,034
message "Cas 2", ce que nous voyons ici.

75
00:04:00,034 --> 00:04:01,618
Donc continuons ensuite l'exécution en

76
00:04:01,618 --> 00:04:04,026
séquence, et nous souhaitons maintenant
comparer

77
00:04:04,026 --> 00:04:07,330
la valeur de deux fois a avec la valeur de
b.

78
00:04:07,330 --> 00:04:12,937
Notons au passage que, au moyen de
conditions simples, nous pouvons comparer

79
00:04:12,937 --> 00:04:16,233
non seulement les valeurs de deux
variables, comme c'est le cas

80
00:04:16,233 --> 00:04:19,830
ici, mais également les valeurs de deux
expressions de façon plus générale.

81
00:04:19,830 --> 00:04:27,051
Si j'évalue deux fois a, j'obtiens
évidemment la valeur

82
00:04:27,051 --> 00:04:29,483
2, la valeur 2 qui est évidemment égale à

83
00:04:29,483 --> 00:04:32,831
la valeur de b, par conséquent
l'évaluation de cette

84
00:04:32,831 --> 00:04:36,028
expression retournera "true", cette
instruction,

85
00:04:36,028 --> 00:04:37,978
l'instruction qui suit, va donc

86
00:04:37,978 --> 00:04:41,878
être exécutée, et nous aurons donc
l'affichage de "b est égal au

87
00:04:41,878 --> 00:04:45,686
double de a." Notez ici nous avons affaire
à une expression qui est

88
00:04:45,686 --> 00:04:48,515
relativement simple, lorsque les
expressions se

89
00:04:48,515 --> 00:04:51,180
complexifient, pour formuler les
conditions, il

90
00:04:51,180 --> 00:04:53,210
est recommandé de parenthéser les termes

91
00:04:53,210 --> 00:04:55,472
des expressions pour les rendre plus
lisibles.

92
00:04:55,472 --> 00:04:57,970
Par exemple ici, nous aurions pu commencer
à le faire

93
00:04:57,970 --> 00:05:01,340
en ajoutant une paire de parenthèses
autour de ce terme.

94
00:05:01,340 --> 00:05:03,560
Variante de la situation précédente,

95
00:05:03,560 --> 00:05:06,816
nous voulons maintenant comparer les
valeurs de a et

96
00:05:06,816 --> 00:05:08,980
b pour savoir si a est différent de b.

97
00:05:08,980 --> 00:05:11,732
Comme c'est le cas, l'évaluation de cette

98
00:05:11,732 --> 00:05:15,105
expression va retourner "true", nous
allons donc

99
00:05:15,105 --> 00:05:20,334
brancher sur la partie positive du if, la
partie vraie, et afficher "Cas 2".

100
00:05:20,334 --> 00:05:25,908
Si l'on continue en séquence, nous voulons
maintenant comparer la valeur

101
00:05:25,908 --> 00:05:28,848
de deux a avec celle de b pour savoir si
deux

102
00:05:28,848 --> 00:05:31,055
fois a est différent de b.

103
00:05:31,055 --> 00:05:34,580
Ça n'est pas le cas, donc l'évaluation de

104
00:05:34,580 --> 00:05:38,900
cette expression va retourner "false", par
conséquent nous

105
00:05:38,900 --> 00:05:42,515
allons brancher l'exécution après
l'instruction if puisqu'il n'y

106
00:05:42,515 --> 00:05:44,630
a pas de bloc else, donc rien de
s'affiche.

107
00:05:44,630 --> 00:05:48,875
Nous venons donc de voir comment il est
possible d'exprimer

108
00:05:48,875 --> 00:05:53,120
en Java des conditions simples en
utilisant des opérateurs de comparaisons.

109
00:05:53,120 --> 00:05:53,750
En pratique,

110
00:05:53,750 --> 00:05:56,585
il est souvent nécessaire de formuler des
conditions

111
00:05:56,585 --> 00:05:59,760
plus complexes, et donc de combiner des
conditions simples.

112
00:05:59,760 --> 00:06:03,040
Ceci se fait au moyen d'opérateurs
logiques.

113
00:06:03,040 --> 00:06:08,446
Par exemple, l'opérateur logique ET, qui
en Java s'écrit au moyen

114
00:06:08,446 --> 00:06:13,485
du double symbole &&, permet de vérifier
si deux conditions sont

115
00:06:13,485 --> 00:06:19,173
simultanément vérifiées.
On voit donc que, l'opérateur logique

116
00:06:19,173 --> 00:06:23,267
requiert l'utilisation de deux opérandes,
l'évaluation

117
00:06:23,267 --> 00:06:26,232
de l'expression avec le ET retournera

118
00:06:26,232 --> 00:06:29,202
"true" si et seulement si l'évaluation

119
00:06:29,202 --> 00:06:32,899
de chacun des opérandes retourne également
"true".

120
00:06:32,899 --> 00:06:34,953
On voit donc qu'il suffit que l'un

121
00:06:34,953 --> 00:06:38,713
des deux opérandes retourne "false", par
exemple celui-ci,

122
00:06:38,713 --> 00:06:40,738
et a fortiori les deux, bien sûr,

123
00:06:40,738 --> 00:06:44,890
pour que l'ensemble de l'expression
retourne également "false".

124
00:06:44,890 --> 00:06:50,705
Deuxième exemple concret de l"utilisation
de l'opérateur logique ET.

125
00:06:50,705 --> 00:06:51,825
Nous avons ici le cas d'un

126
00:06:51,825 --> 00:06:54,513
petit programme, qui demande à
l'utilisateur d'introduire

127
00:06:54,513 --> 00:06:58,200
un nombre, et nous souhaitons que ce
nombre soit compris entre 1 et 10.

128
00:06:58,200 --> 00:07:02,840
Le nombre est lu depuis l'entrée standard,
et stocké dans une variable n.

129
00:07:02,840 --> 00:07:06,710
Nous souhaitons vérifier que le nombre
introduit par

130
00:07:06,710 --> 00:07:10,272
l'utilisateur est bel et bien conforme à
nos attentes,

131
00:07:10,272 --> 00:07:12,912
c'est-à-dire que le nombre est compris
entre 1 et

132
00:07:12,912 --> 00:07:16,640
10, par conséquent nous allons exprimer
une condition en

133
00:07:16,640 --> 00:07:20,960
imposant à l'utilisateur que le nombre
introduit soit supérieur

134
00:07:20,960 --> 00:07:23,200
ou égal à 1 et inférieur ou égal à 10.

135
00:07:23,200 --> 00:07:26,088
Comme ces conditions doivent toutes les
deux

136
00:07:26,088 --> 00:07:29,920
être vérifiées, nous allons utiliser
l'opérateur logique ET.

137
00:07:29,920 --> 00:07:34,550
Supposons dans un premier temps que
l'utilisateur introduise zéro.

138
00:07:34,550 --> 00:07:35,423
Dans ce cas

139
00:07:35,423 --> 00:07:39,730
l'évaluation du premier opérande va
retourner "false".

140
00:07:39,730 --> 00:07:44,290
Nous avons vu précédemment qu'il suffit
que l'un des opérandes soit "false"

141
00:07:44,290 --> 00:07:49,157
pour que l'ensemble de l'expression avec
l'opérateur logique ET soit "false", par

142
00:07:49,157 --> 00:07:51,921
conséquent, nous allons brancher sur le

143
00:07:51,921 --> 00:07:55,220
bloc else de l'instruction conditionnelle
et

144
00:07:55,220 --> 00:07:58,230
afficher "incorrect", pour signifier à
l'utilisateur

145
00:07:58,230 --> 00:08:00,680
que le nombre introduit n'est pas conforme

146
00:08:00,680 --> 00:08:02,638
aux conditions attendues.

147
00:08:02,638 --> 00:08:07,266
Supposons maintenant que l'utilisateur
introduise la valeur

148
00:08:07,266 --> 00:08:09,668
5, dans ce cas l'évaluation de ce premier

149
00:08:09,668 --> 00:08:12,369
opérande va retourner "true", puisque 5
est bel

150
00:08:12,369 --> 00:08:14,878
et bien supérieur ou égal à 1,
l'évaluation

151
00:08:14,878 --> 00:08:17,530
de ce second opérande retourne également
"true",

152
00:08:17,530 --> 00:08:19,690
puisque 5 est bel et bien inférieur ou

153
00:08:19,690 --> 00:08:22,070
égal à 10, par conséquent, puisque les
deux

154
00:08:22,070 --> 00:08:25,954
opérandes retournent "true" l'ensemble de
l'expression va également

155
00:08:25,954 --> 00:08:29,218
retourner "true", et dans ce cas-là nous
allons brancher sur

156
00:08:29,218 --> 00:08:32,700
le bloc positif, le bloc vrai de
l'instruction conditionnelle, et

157
00:08:32,700 --> 00:08:35,816
afficher le message "correct", pour
signifier à l'utilisateur que le

158
00:08:35,816 --> 00:08:38,290
nombre introduit est bel et bien conforme
à nos attentes.

159
00:08:38,290 --> 00:08:43,320
Autre opérateur logique usuel, le OU, qui
en Java s'exprime

160
00:08:43,320 --> 00:08:49,314
au moyen d'une double barre verticale.

161
00:08:49,314 --> 00:08:51,022
Comme pour l'opérateur logique ET,

162
00:08:51,022 --> 00:08:53,445
l'opérateur OU attend deux opérandes qui
sont

163
00:08:53,445 --> 00:08:56,435
deux expressions logiques retournées en
"true" ou "false".

164
00:08:58,390 --> 00:09:02,310
Pour que l'ensemble de l'expression
retourne "true", il que l'un

165
00:09:02,310 --> 00:09:06,150
ou l'autre des opérandes retourne "true",
a fortiori les deux.

166
00:09:06,150 --> 00:09:10,427
Nous voyons que dans ce cas, pour que
l'expression logique

167
00:09:10,427 --> 00:09:15,540
retourne "false" il faut que les deux
opérandes retournent "false".

168
00:09:15,540 --> 00:09:21,680
Pour tous les autres cas, l'expression
retournera "true".

169
00:09:21,680 --> 00:09:26,864
Une petite illustration concrète de
l'utilisation de l'opérateur logique OU,

170
00:09:26,864 --> 00:09:30,320
maintenant, supposons ici que nous ayons
un petit programme qui

171
00:09:30,320 --> 00:09:34,101
demande à l'utilisateur d'introduire deux
valeurs, et nous souhaitons que

172
00:09:34,101 --> 00:09:36,853
l'une ou l'autre au moins de ces valeurs
soit positive.

173
00:09:36,853 --> 00:09:40,622
Les deux valeurs sont lues depuis l'entrée
standard et

174
00:09:40,622 --> 00:09:43,440
stockées dans deux variables n et m.

175
00:09:43,440 --> 00:09:47,598
Nous souhaitons donc que l'une ou l'autre
des valeurs introduites

176
00:09:47,598 --> 00:09:51,548
soit supérieure à zéro, nous allons donc
exprimer une condition,

177
00:09:51,548 --> 00:09:54,356
il nous suffit que soit m soit supérieur
ou égal

178
00:09:54,356 --> 00:09:56,645
à zéro, soit n soit supérieur ou égal à
zéro.

179
00:09:56,645 --> 00:09:59,420
Puisqu'il suffit que l'une ou l'autre des
conditions

180
00:09:59,420 --> 00:10:04,080
soit vérifiées, nous allons naturellement
utiliser l'opérateur logique OU.

181
00:10:04,080 --> 00:10:06,455
Supposons que l’utilisateur

182
00:10:06,455 --> 00:10:10,321
introduise les valeurs -1 et 1,
l'évaluation

183
00:10:10,321 --> 00:10:14,292
de ce premier opérande va retourner "true"
puisque

184
00:10:14,292 --> 00:10:18,666
la valeur 1 est bel et bien supérieur ou
égale à zéro, et nous avons vu qu'il

185
00:10:18,666 --> 00:10:21,114
suffit que l'un ou l'autre des opérandes
soit

186
00:10:21,114 --> 00:10:24,154
"true" pour que l'ensemble de l'expression
soit "true"

187
00:10:24,154 --> 00:10:28,060
aussi, par conséquent, nous allons ici
brancher sur

188
00:10:28,060 --> 00:10:31,500
le bloc positif vrai de l'instruction if,
et indiquer

189
00:10:31,500 --> 00:10:34,530
à l'utilisateur par un message
qu'effectivement au

190
00:10:34,530 --> 00:10:37,370
moins une des valeurs introduites est
positive.

191
00:10:37,370 --> 00:10:42,888
Supposons maintenant que l'utilisateur ait
introduit les valeurs -1

192
00:10:42,888 --> 00:10:46,900
et -1, donc deux valeurs négatives.
Dans ce cas l'évaluation

193
00:10:46,900 --> 00:10:51,846
de cet opérande va retourner évidemment
"false", l'évaluation de ce second

194
00:10:51,846 --> 00:10:56,658
opérande retourne aussi "false", et dans
ce cas, nous sommes dans

195
00:10:56,658 --> 00:11:00,486
la situation où l'évaluation de
l'expression globale

196
00:11:00,486 --> 00:11:03,934
retourne "false" puisque les deux
opérandes valent "false".

197
00:11:03,934 --> 00:11:06,042
Dans ce cas particulier, nous allons donc

198
00:11:06,042 --> 00:11:09,080
brancher sur le bloc else de l'instruction
conditionnelle,

199
00:11:09,080 --> 00:11:11,456
et signifier à l'utilisateur par un
message

200
00:11:11,456 --> 00:11:14,540
que aucune des deux valeurs introduites
n'est positive.

201
00:11:14,540 --> 00:11:18,640
Dernier opérateur logique usuel, le NON
logique, la négation,

202
00:11:18,640 --> 00:11:22,250
qui en Java s'exprime au moyen du point
d'exclamation.

203
00:11:22,250 --> 00:11:26,652
Contrairement aux deux opérateurs que nous
venons de voir, l'opérateur NON,

204
00:11:26,652 --> 00:11:28,752
la négation, est un opérateur unaire,

205
00:11:28,752 --> 00:11:31,390
c'est-à-dire qu'il n'attend qu'un seul
opérande.

206
00:11:31,390 --> 00:11:35,815
Il a pour vocation de retourner la
négation de la valeur de cet opérande.

207
00:11:35,815 --> 00:11:40,985
Par exemple, supposons que l'évaluation de
cet opérande retourne "false", ce qui

208
00:11:40,985 --> 00:11:47,250
signifie ici concrètement que a serait
supérieur ou égal à b, la négation

209
00:11:47,250 --> 00:11:52,100
de la valeur "false" va être "true".

210
00:11:52,100 --> 00:11:57,715
Supposons maintenant que l'évaluation de
cet opérande retourne au contraire

211
00:11:57,715 --> 00:12:03,720
"true", dans ce cas, la négation de "true"
va être "false".

212
00:12:03,720 --> 00:12:08,400
Nous aurons l'occasion d'examiner
plusieurs exemples

213
00:12:08,400 --> 00:12:12,352
d'utilisation de l'opérateur négation dans
la

214
00:12:12,352 --> 00:12:13,600
suite du cours.

