1
00:00:05,160 --> 00:00:08,849
Nous sommes arrivés à ce stade presque au 
terme de notre étude de cas « Puissance 4 »;

2
00:00:08,849 --> 00:00:11,087
nous savons faire jouer en alternance 
les deux joueurs

3
00:00:11,087 --> 00:00:13,367
nous savons tester si un joueur a gagné.

4
00:00:13,367 --> 00:00:15,647
Il nous reste à peaufiner un peu
le programme principal

5
00:00:15,647 --> 00:00:17,969
pour indiquer lequel des
deux joueurs a gagné

6
00:00:17,969 --> 00:00:20,115
et pour faire face aux situations 
de match nul.

7
00:00:20,115 --> 00:00:22,531
C'est l'objet de la séquence d'aujourd'hui.

8
00:00:22,531 --> 00:00:25,499
Pour rappel notre jeu de puissance 4 tel
que prévu jusqu'ici

9
00:00:25,499 --> 00:00:27,220
fait jouer en boucle deux joueurs :

10
00:00:27,219 --> 00:00:31,368
le joueur 'X' qui joue les pions jaunes

11
00:00:31,368 --> 00:00:34,649
et le joueur 'O' qui joue les pions rouges,

12
00:00:34,649 --> 00:00:36,440
les deux joueurs jouent en alternance

13
00:00:36,440 --> 00:00:38,730
c'est-à-dire qu'à la fin de chaque
itération de la boucle

14
00:00:38,730 --> 00:00:42,400
on garantit que la couleur du joueur 
alterne entre le jaune et le rouge,

15
00:00:42,399 --> 00:00:46,769
et les deux joueurs continuent de jouer
jusqu'à ce que l'un des deux ait gagné.

16
00:00:46,770 --> 00:00:49,260
Ce programme mérite cependant 
d'être un peu peaufiné.

17
00:00:49,259 --> 00:00:52,769
La première chose naturelle à faire est
lorsque nous sortons de la boucle,

18
00:00:52,770 --> 00:00:55,420
ce qui signifie que l'un ou l'autre des
joueurs a gagné,

19
00:00:55,420 --> 00:00:59,350
de faire afficher au programme lequel
des deux est effectivement le vainqueur ;

20
00:00:59,350 --> 00:01:00,829
la seconde chose à faire

21
00:01:00,829 --> 00:01:02,619
est de faire face à la situation

22
00:01:02,619 --> 00:01:05,700
où les deux joueurs jouent 
en alternance sans gagner

23
00:01:05,700 --> 00:01:07,680
jusqu'à remplir complètement la grille

24
00:01:07,680 --> 00:01:09,919
et à ce moment-là 
il n'y a pas de gagnant,

25
00:01:09,919 --> 00:01:11,870
il s'agit d'une situation de match nul.

26
00:01:11,870 --> 00:01:14,650
Cette situation n'est pas couverte par
le programme actuel

27
00:01:14,650 --> 00:01:18,239
ce qui ne correspond pas
à une situation très réaliste.

28
00:01:18,239 --> 00:01:19,949
Commençons par modifier notre programme

29
00:01:19,949 --> 00:01:22,109
de sorte à ce qu'il affiche 
qui est le vainqueur

30
00:01:22,109 --> 00:01:25,400
donc il s'agit naturellement d'ajouter
au programme après la boucle

31
00:01:25,400 --> 00:01:27,090
un certain nombre d'instructions,

32
00:01:27,090 --> 00:01:29,969
ces dernières vont naturellement
tester la couleur du joueur

33
00:01:29,969 --> 00:01:31,789
lorsque l'on sort de la boucle

34
00:01:31,790 --> 00:01:33,590
et si cette couleur est jaune

35
00:01:33,590 --> 00:01:39,550
ceci signifie que le joueur vainqueur
est le joueur rouge.

36
00:01:39,550 --> 00:01:42,700
Pourquoi le joueur rouge ici
et non pas le jaune ?

37
00:01:42,700 --> 00:01:43,909
Et bien, pour rappel,

38
00:01:43,909 --> 00:01:47,420
les dernières instructions que nous
exécutons avant de sortir de la boucle

39
00:01:47,420 --> 00:01:50,670
sont celles qui consistent à faire
alterner la couleur du joueur.

40
00:01:50,670 --> 00:01:53,460
Si cette couleur a été alternée de
sorte à ce que

41
00:01:53,459 --> 00:01:56,060
la couleur en sortant de la boucle
soit la couleur jaune,

42
00:01:56,060 --> 00:01:58,150
ce qui correspondrait à cette situation,

43
00:01:58,150 --> 00:02:02,120
cela signifie que le joueur qui
effectivement gagne la partie

44
00:02:02,120 --> 00:02:04,109
est celui de la couleur alternative

45
00:02:04,109 --> 00:02:07,159
donc ici la couleur rouge
ce qui explique pourquoi

46
00:02:07,159 --> 00:02:10,469
lorsque nous sortons de la boucle
avec la couleur jaune

47
00:02:10,469 --> 00:02:13,139
cela signifie bien que
ce soit le joueur rouge

48
00:02:13,139 --> 00:02:14,919
qui a effectivement gagné.

49
00:02:14,919 --> 00:02:19,349
Donc ici il s'agit bien sûr de compléter
pour couvrir l'ensemble des cas

50
00:02:19,349 --> 00:02:21,259
et donc dans l'autre cas

51
00:02:21,259 --> 00:02:23,788
il faudra simplement
faire afficher le fait que

52
00:02:23,788 --> 00:02:26,938
le joueur gagnant est cette fois
bien le joueur jaune

53
00:02:26,938 --> 00:02:31,129
qui correspond au joueur 'X'
dans notre modification.

54
00:02:31,129 --> 00:02:35,339
Voilà nous avons ainsi couvert
l'ensemble des cas.

55
00:02:35,339 --> 00:02:40,458
Nous prenons ici le soin de commenter
ce test un petit peu contre intuitif

56
00:02:40,458 --> 00:02:44,438
en indiquant que au préalable on a 
effectivement changé la couleur du joueur

57
00:02:44,438 --> 00:02:47,359
ce qui explique la nature du
test que nous effectuons ici.

58
00:02:48,729 --> 00:02:50,509
Comme indiqué au début de cette séquence

59
00:02:50,509 --> 00:02:52,349
il peut aussi se présenter des situations

60
00:02:52,349 --> 00:02:54,582
où les deux joueurs vont jouer 
en alternance

61
00:02:54,582 --> 00:02:56,815
et vont remplir totalement la grille

62
00:02:56,815 --> 00:02:59,049
sans pour autant que l'un des deux 
ne remporte la partie ;

63
00:02:59,049 --> 00:03:01,339
il va falloir donc compléter notre code

64
00:03:01,339 --> 00:03:04,429
de sorte à pouvoir également
considérer cette situation

65
00:03:04,429 --> 00:03:07,429
c'est-à-dire qu'il va falloir sortir de
la boucle

66
00:03:07,429 --> 00:03:11,739
si l'un des deux a gagné, ce qui est
couvert par le test actuel

67
00:03:11,739 --> 00:03:15,528
mais également sortir de la boucle 
si la grille est complètement pleine,

68
00:03:15,528 --> 00:03:19,209
ce qui n'est pas couvert et qui correspond
à une situation de match nul.

69
00:03:19,209 --> 00:03:22,788
Que peut-il se produire dans le cas où
nous ne considérons pas

70
00:03:22,788 --> 00:03:24,799
le cas de la grille pleine.

71
00:03:24,799 --> 00:03:29,139
Et bien ce qui risque de se produire c'est 
qu'une fois que la grille est remplie

72
00:03:29,139 --> 00:03:32,279
nous allons demander à un joueur 
de jouer un coup valide sur la grille,

73
00:03:32,279 --> 00:03:33,439
ce qui sera impossible,

74
00:03:33,438 --> 00:03:35,608
et donc nous allons boucler indéfiniment

75
00:03:35,608 --> 00:03:38,328
sans qu'il ne puisse jamais y avoir 
de joueur gagnant,

76
00:03:38,328 --> 00:03:41,238
nous allons sans cesse demander 
à un joueur d'introduire un pion valide,

77
00:03:41,238 --> 00:03:44,189
ce qui lui est impossible, 
vu que la grille est complètement remplie

78
00:03:44,189 --> 00:03:48,339
et dans ce cas-là nous ne pourrons 
jamais sortir de la boucle.

79
00:03:48,339 --> 00:03:51,769
Ceci correspond bien évidemment à un
comportement erroné du programme

80
00:03:51,769 --> 00:03:55,180
auquel il faut remédier pour que le
programme puisse se dérouler correctement

81
00:03:55,180 --> 00:03:57,399
dans toutes les situations possibles.

82
00:03:57,399 --> 00:03:59,219
Les modifications a apporter
à notre programme

83
00:03:59,219 --> 00:04:02,219
pour tester le cas de la grille pleine
sont assez naturelles.

84
00:04:02,219 --> 00:04:04,659
Donc nous allons devoir répéter
les traitements

85
00:04:04,659 --> 00:04:06,799
« demander aux joueurs 
de jouer en alternance »

86
00:04:06,799 --> 00:04:10,759
tant qu'aucun des deux n'a gagné,
ce qui est déjà testé actuellement,

87
00:04:10,759 --> 00:04:13,899
et tant que la grille n'est pas pleine ;

88
00:04:13,899 --> 00:04:16,728
ce qui peut s'écrire assez
naturellement comme ceci.

89
00:04:16,728 --> 00:04:21,318
Et nous anticipons donc ici l'existence
d'une méthode « plein »

90
00:04:21,329 --> 00:04:25,098
qui va nous aider à tester si la
grille est déjà remplie ou non.

91
00:04:25,098 --> 00:04:29,558
Cette modification aura une incidence
sur le déroulement du reste du programme.

92
00:04:29,559 --> 00:04:32,829
En effet, désormais nous ne serons plus
dans la situation unique possible

93
00:04:32,829 --> 00:04:35,538
où il y a fatalement un gagnant,

94
00:04:35,538 --> 00:04:38,699
mais il y a également la situation où
nous sortons de la boucle

95
00:04:38,699 --> 00:04:42,799
sans qu'il ait de gagnant, ce qu'il faut
aussi signaler de façon appropriée.

96
00:04:42,800 --> 00:04:45,278
Ici, il faudrait modifier notre programme

97
00:04:45,278 --> 00:04:49,759
de sorte à couvrir également cette
situation, donc en testant :

98
00:04:49,759 --> 00:04:52,149
est-ce que l'on est sorti de la boucle
parce qu'il y a un gagnant

99
00:04:52,149 --> 00:04:55,010
et dans ce cas là effectivement 
nous devons signaler le gagnant

100
00:04:55,010 --> 00:04:57,440
comme nous le faisions tout à l'heure.

101
00:04:57,440 --> 00:05:01,579
Sinon, cela signifie qu'il y a une
situation désormais de match nul

102
00:05:02,449 --> 00:05:05,958
et nous devons également le signaler
par un message approprié.

103
00:05:06,788 --> 00:05:09,820
Voilà nous aurons ainsi couvert
tous les cas possibles.

104
00:05:11,050 --> 00:05:13,759
Voici l' encodage de la méthode « plein »,

105
00:05:13,759 --> 00:05:17,330
donc on a on va demander en alternance
au joueur rouge et au joueur jaune

106
00:05:17,330 --> 00:05:19,329
sur quelle colonne il veut
placer son jeton,

107
00:05:19,329 --> 00:05:22,180
supposons que la main soit au joueur jaune

108
00:05:22,180 --> 00:05:25,189
si ce dernier décide de jouer
sur la première colonne

109
00:05:25,189 --> 00:05:27,240
et bien le remplissage 
se fait automatiquement

110
00:05:27,240 --> 00:05:28,588
des bas en haut

111
00:05:28,588 --> 00:05:31,488
ce qui veut dire que nous allons
effectivement remplir dans le cas présent

112
00:05:31,500 --> 00:05:33,860
la toute première case de la grille ;

113
00:05:33,860 --> 00:05:37,090
ceci a une incidence sur la façon
de tester que la grille est pleine

114
00:05:37,090 --> 00:05:41,479
il n'est en effet plus nécessaire de tester
l'intégralité des cases de la grille

115
00:05:41,479 --> 00:05:44,229
pour savoir si elles sont d'une couleur 
donnée ou si elles sont vides

116
00:05:44,230 --> 00:05:49,249
il suffira de tester les cases de la
dernière ligne remplie de la grille de jeu.

117
00:05:49,249 --> 00:05:51,069
En effet dans cette situation

118
00:05:51,069 --> 00:05:55,110
si l'intégralité des cases de cette grille
ont déjà une couleur,

119
00:05:55,110 --> 00:05:59,000
cela signifie que l'on a déjà effectué 
tout le remplissage en partant du bas

120
00:05:59,000 --> 00:06:02,074
et cela signifie effectivement 
que la grille est déjà pleine.

121
00:06:02,074 --> 00:06:05,949
Intéressons-nous maintenant au codage
effectif de la méthode « plein ».

122
00:06:05,949 --> 00:06:08,269
Nous avons vu que du point de vue
de la méthodologie

123
00:06:08,269 --> 00:06:10,918
lorsque nous abordons le codage 
d'une méthode,

124
00:06:10,918 --> 00:06:13,567
il faut toujours d'abord se poser
la question du « quoi »,

125
00:06:13,567 --> 00:06:16,838
que fait la méthode, de quelles données
a-t-elle besoin pour pouvoir travailler

126
00:06:16,838 --> 00:06:19,338
que livre-t-elle 
comme informations assorties,

127
00:06:19,338 --> 00:06:22,329
ce sont des éléments que nous avons abordé
ici de façon très rapide

128
00:06:22,329 --> 00:06:24,549
parce qu'il s'agit là 
d'une fonction très simple

129
00:06:24,550 --> 00:06:28,569
au travers de notre façon de l'anticiper,
d'anticiper son utilisation,

130
00:06:28,569 --> 00:06:29,949
dans le programme principal ;

131
00:06:29,949 --> 00:06:34,400
donc nous avons anticipé que nous allions
invoquer cette méthode « plein » sur une grille

132
00:06:34,400 --> 00:06:35,879
et qu'en sortie évidemment

133
00:06:35,879 --> 00:06:39,099
elle allait nous sortir un résultat 
qui vraisemblablement

134
00:06:39,099 --> 00:06:43,668
allait être un booléan
c'est-à-dire une valeur booléenne

135
00:06:43,668 --> 00:06:45,989
nous indiquant si la grille est 
effectivement pleine.

136
00:06:45,990 --> 00:06:52,110
Ceci correspond assez naturellement à
cet entête-ci pour notre méthode « plein ».

137
00:06:52,110 --> 00:06:54,899
Le « quoi » étant clairement établi
nous pouvons nous intéresser au comment,

138
00:06:54,899 --> 00:06:59,579
comment effectivement programmer 
le corps de cette méthode « plein »,

139
00:06:59,579 --> 00:07:03,429
cet un algorithme que nous avons esquissé
dans notre discussion de tout à l'heure

140
00:07:03,429 --> 00:07:08,218
à savoir que si l'on trouve
sur la première ligne,

141
00:07:08,218 --> 00:07:10,228
c'est-à-dire la dernière 
dans le sens du remplissage,

142
00:07:10,228 --> 00:07:11,189
une case vide,

143
00:07:11,189 --> 00:07:13,749
cela signifie tout simplement que 
la grille n'est pas pleine.

144
00:07:13,749 --> 00:07:16,009
C'est ce traitement que nous allons 
mettre en œuvre,

145
00:07:16,009 --> 00:07:19,369
ceci peut naturellement se mettre
en œuvre au travers d'une « boucle for »,

146
00:07:19,369 --> 00:07:20,939
une itération sur un ensemble de valeurs,

147
00:07:20,939 --> 00:07:24,480
nous allons itérer sur l'ensemble
des cellules de la première ligne,

148
00:07:24,480 --> 00:07:26,068
ce qui s'écrit « grille[0] »,

149
00:07:26,068 --> 00:07:29,269
et tester si la cellule en question 
est vide

150
00:07:29,269 --> 00:07:31,898
cela signifie que 
la grille n'est pas pleine

151
00:07:31,898 --> 00:07:34,759
et donc nous devons sortir de notre
méthode « plein »

152
00:07:34,759 --> 00:07:39,050
en indiquant que la grille n'est pas pleine,
en retournant « false ».

153
00:07:39,050 --> 00:07:43,749
Si nous avons parcouru l'intégralité
des cellules de la première ligne

154
00:07:43,749 --> 00:07:45,938
sans jamais trouver de cellules vides

155
00:07:45,938 --> 00:07:47,849
alors nous sortons de la boucle

156
00:07:47,850 --> 00:07:52,389
et à ce moment-là nous pouvons signifier
que la grille est pleine

157
00:07:52,389 --> 00:07:58,149
et nous devons faire retourner à
notre méthode « plein » le résultat « true » ;

158
00:07:58,149 --> 00:08:01,199
à noter que parmi les erreurs fréquentes
chez les débutants

159
00:08:01,199 --> 00:08:04,249
dans ce genre de situations

160
00:08:04,249 --> 00:08:07,299
est d'écrire l'algorithme,
de le retranscrire de façon erronée,

161
00:08:07,299 --> 00:08:11,088
en testant si la cellule est vide alors
retourner « false »,

162
00:08:11,088 --> 00:08:13,188
ce qui correspond à quelque chose
de correct,

163
00:08:13,189 --> 00:08:15,528
mais de tout de suite après
retourner un « true »

164
00:08:15,528 --> 00:08:17,894
ce qui évidemment ne correspond pas
à l'algorithme

165
00:08:17,894 --> 00:08:19,520
que nous voulons mettre en œuvre.
Pourquoi ?

166
00:08:19,520 --> 00:08:23,608
Parce qu'il faut bien sûr avoir testé
l'intégralité des cases

167
00:08:23,608 --> 00:08:24,798
de la première ligne de la grille

168
00:08:24,798 --> 00:08:28,668
avant de pouvoir statuer sur le fait
que la grille est effectivement pleine ;

169
00:08:28,668 --> 00:08:32,279
et ceci ne peut pas être connu 
à l'intérieur du corps de la boucle

170
00:08:32,279 --> 00:08:35,079
mais on doit d'abord sortir de la boucle 
avant de pouvoir retourner « true ».

171
00:08:35,090 --> 00:08:37,600
On fait juste attention à ce genre 
de petits détails

172
00:08:37,600 --> 00:08:40,950
que l'on retrouve assez souvent dans
les copies des débutants.

173
00:08:40,950 --> 00:08:44,759
Voilà ceci termine le codage de
notre petite application de « Puissance 4 »,

174
00:08:44,759 --> 00:08:48,490
il y a bien évidemment de très nombreuses 
façons de programmer cette application

175
00:08:48,490 --> 00:08:51,460
et nous n'avons fait ici
qu'en présenter une parmi d'autres ;

176
00:08:51,460 --> 00:08:54,569
le but de cette petite étude de cas était
essentiellement de vous montrer

177
00:08:54,569 --> 00:08:57,050
comment on aborde la programmation 
d'une telle application

178
00:08:57,050 --> 00:08:59,149
lorsqu'on le fait pour la première fois.

179
00:08:59,149 --> 00:09:00,249
Plusieurs idées clé à retenir :

180
00:09:00,249 --> 00:09:03,030
la première, 
toujours procéder de bas en haut,

181
00:09:03,030 --> 00:09:06,418
commencer par identifier les types essentiels
les types de données essentielles,

182
00:09:06,418 --> 00:09:09,171
les fonctions fondamentales, 
avant d'affiner.

183
00:09:09,171 --> 00:09:11,764
Chacune des fonctionnalités et 
méthodes fondamentales

184
00:09:11,764 --> 00:09:13,508
peut à son tour être modularisée

185
00:09:13,508 --> 00:09:16,149
c'est-à-dire faire appel à d'autres
méthodes, plus de détails,

186
00:09:16,149 --> 00:09:18,830
qui vont l'aider à réaliser les
traitements souhaités.

187
00:09:18,830 --> 00:09:21,630
Nous avons vu que pour le codage de
chacune des fonctionnalités

188
00:09:21,630 --> 00:09:22,740
de chacune des méthodes

189
00:09:22,740 --> 00:09:25,558
il est souhaitable de procéder avec une
certaine méthodologie,

190
00:09:25,558 --> 00:09:28,629
se poser toujours la question du « quoi »,
que fait la méthode,

191
00:09:28,629 --> 00:09:31,610
de quelles informations elle a besoin
pour pouvoir travailler

192
00:09:31,610 --> 00:09:34,023
quelles sont les informations 
qu'elle livre un retour ;

193
00:09:34,023 --> 00:09:36,436
ensuite seulement se poser
la question du comment

194
00:09:36,436 --> 00:09:40,790
et réfléchir aux algorithmes qui permettront
d'implémenter les traitements souhaités.

195
00:09:40,790 --> 00:09:43,240
Enfin nous avons vu qu'il fallait
aller à l'essentiel

196
00:09:43,240 --> 00:09:46,240
avant de nous intéresser aux aspects 
de prospectique, de peaufinage,

197
00:09:46,240 --> 00:09:47,950
et point tout à fait fondamental,

198
00:09:47,950 --> 00:09:51,709
qu'il fallait systématiquement tester au
fur et à mesure que l'on progresse

199
00:09:51,708 --> 00:09:53,739
dans le codage de l'application.

200
00:09:53,739 --> 00:09:56,870
Voilà, c'était un certain nombre de messages
que nous souhaitions faire passer

201
00:09:56,870 --> 00:09:58,389
au travers de cette étude de cas

202
00:09:58,389 --> 00:10:00,140
et qui nous l'espérons vous seront utiles

203
00:10:00,140 --> 00:10:03,750
lorsque vous aborderez par vous mêmes
la programmation d'une telle application.
