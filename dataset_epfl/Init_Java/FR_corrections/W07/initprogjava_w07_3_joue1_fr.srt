1
00:00:05,140 --> 00:00:07,945
Continuons la programmation 
de notre jeux puissance 4.

2
00:00:07,945 --> 00:00:09,815
Dans les séquences vidéo précédentes,

3
00:00:09,815 --> 00:00:12,681
vous avez vu respectivement quelles sont 
les structures de données

4
00:00:12,688 --> 00:00:15,287
que nous vous proposons d'utiliser 
pour représenter ce jeu,

5
00:00:15,287 --> 00:00:17,706
représenter les couleurs des joueurs

6
00:00:17,706 --> 00:00:20,195
et 2 fonctionnalités de base que sont

7
00:00:20,195 --> 00:00:23,655
l'initialisation de la grille 
et son affichage.

8
00:00:23,655 --> 00:00:27,438
Intéressons-nous maintenant 
au fait même de jouer.

9
00:00:27,438 --> 00:00:29,038
De quoi avons-nous besoin ?

10
00:00:29,038 --> 00:00:33,955
Pour ça, il faut pouvoir demander 
au joueur l'endroit où il veut jouer

11
00:00:33,955 --> 00:00:36,391
il faut pouvoir valider son coup,

12
00:00:36,391 --> 00:00:38,797
valider aussi bien du point de vue
de la réponse

13
00:00:38,797 --> 00:00:40,633
que du point de vue 
des structures des données,

14
00:00:40,633 --> 00:00:44,132
c'est-à-dire si le coup est correct, 
rendre les structures valides,

15
00:00:44,132 --> 00:00:46,761
mettre le pion dans la grille,

16
00:00:46,761 --> 00:00:50,462
puis ensuite il faut tour à tour 
demander à l'autre joueur,

17
00:00:50,462 --> 00:00:52,243
de jouer un coup, puis revenir,

18
00:00:52,243 --> 00:00:54,975
alterner entre les 2 joueurs,

19
00:00:54,975 --> 00:00:57,769
et puis décider si la partie se termine,

20
00:00:57,769 --> 00:01:01,173
soit si un des 2 joueurs a gagné,
ou si la grille est pleine.

21
00:01:01,173 --> 00:01:02,598
Dans cette séquence vidéo-ci,

22
00:01:02,598 --> 00:01:04,953
nous allons nous intéresser 
au second point,

23
00:01:04,953 --> 00:01:08,329
c'est-à-dire, recevoir
une colonne d'un joueur

24
00:01:08,329 --> 00:01:11,099
et vérifier si elle est correcte

25
00:01:11,099 --> 00:01:16,449
et puis mettre à jour le jeu 
en fonction du coup joué.

26
00:01:17,374 --> 00:01:20,698
Nous sommes donc ici au clair 
sur ce que veut faire

27
00:01:20,698 --> 00:01:22,642
la méthode que l'on veut implémenter,

28
00:01:22,642 --> 00:01:27,346
donnons lui un nom, pour cela 
on va l'appeler la méthode " joue ".

29
00:01:27,358 --> 00:01:30,178
Regardons maintenant 
comment on va la programmer.

30
00:01:30,178 --> 00:01:32,369
Commençons pour cela par son en-tête,

31
00:01:32,369 --> 00:01:35,109
pour avoir une idée de son en-tête,
on va se demander comment

32
00:01:35,109 --> 00:01:37,629
on appellerait la méthode <i>joue</i> 
depuis le programme,

33
00:01:37,630 --> 00:01:40,798
par exemple on ferait 
de jouer sur la grille,

34
00:01:40,798 --> 00:01:44,456
à une certaine colonne, par exemple 3,

35
00:01:44,456 --> 00:01:47,283
Ici, on est dans le programme,

36
00:01:47,283 --> 00:01:50,150
les positions vont donc 
correspondre aux positions Java,

37
00:01:50,150 --> 00:01:53,601
la numérotation commence ici en zéro,

38
00:01:53,601 --> 00:01:57,492
et la colonne 3 serait donc...ici.

39
00:01:58,083 --> 00:02:01,513
Et puis il faut préciser 
la couleur du joueur :

40
00:02:01,513 --> 00:02:05,023
est-ce que c'est un joueur rouge ou 
est-ce que c'est un joueur jaune ?

41
00:02:05,023 --> 00:02:08,462
Voilà typiquement un appel 
que l'on pourrait faire,

42
00:02:08,462 --> 00:02:11,792
ça donnerait la situation suivante :

43
00:02:12,131 --> 00:02:15,647
en colonne 3, le joueur met un pion,

44
00:02:15,647 --> 00:02:18,575
on aurait un pion rouge 
qui viendrait se mettre ici.

45
00:02:18,575 --> 00:02:21,285
Puis on aurait après, 
typiquement des appels,

46
00:02:21,298 --> 00:02:24,488
où on aurait un pion, par exemple, jaune

47
00:02:24,488 --> 00:02:27,848
qui viendrait se mettre 
en colonne numérotée 2,

48
00:02:27,848 --> 00:02:29,458
donc en troisième colonne,

49
00:02:29,458 --> 00:02:34,295
et puis un joueur rouge qui rejoue 
dans la même colonne numéro 3,

50
00:02:34,295 --> 00:02:36,629
donc dans la quatrième colonne,

51
00:02:36,629 --> 00:02:39,003
ce qui correspond à cette situation-ci.

52
00:02:39,243 --> 00:02:41,719
Voilà, on est maintenant assez au clair

53
00:02:41,719 --> 00:02:45,619
pour pouvoir écrire l'en-tête 
de notre méthode <i>joue</i>.

54
00:02:45,619 --> 00:02:51,368
Donc <i>joue</i> va prendre 
comme premier paramètre la grille,

55
00:02:51,368 --> 00:02:54,898
donc on avait dit que c'était un tableau 
à 2 dimensions d'entiers,

56
00:02:54,898 --> 00:02:58,638
puis ensuite on va prendre une position
qui indiquera la colonne,

57
00:02:58,638 --> 00:03:00,488
donc ici de nouveau un entier,

58
00:03:00,488 --> 00:03:03,718
et enfin on avait décidé de coder 
les couleurs par des entiers,

59
00:03:03,718 --> 00:03:07,802
donc on va prendre ici comme 
troisième argument la couleur.

60
00:03:07,802 --> 00:03:10,872
Voilà pour l'en-tête de la méthode <i>joue</i>.

61
00:03:10,875 --> 00:03:13,640
Maintenant, en ce qui concerne 
sa valeur de retour,

62
00:03:13,640 --> 00:03:17,184
on va commencer par le mot clé, <i>static</i>.

63
00:03:17,184 --> 00:03:19,524
Mais quel est son type de retour ?

64
00:03:19,806 --> 00:03:22,066
Donc le type de retour,

65
00:03:22,066 --> 00:03:26,941
comme on n'a pas écrit " z=joue(...) ",

66
00:03:26,941 --> 00:03:31,624
on a simplement fait des appels, 
ici directement à <i>joue</i>,

67
00:03:31,624 --> 00:03:34,133
ça veut dire que la méthode <i>joue</i>
ne renvoie rien,

68
00:03:34,133 --> 00:03:38,762
son type de retour va donc être <i>void</i>.

69
00:03:38,762 --> 00:03:41,552
Ce qui termine l'écriture de son en-tête,

70
00:03:41,552 --> 00:03:44,925
et nous permet maintenant 
de passer à la définition,

71
00:03:44,925 --> 00:03:47,198
au corps de cette méthode.

72
00:03:47,198 --> 00:03:49,195
Pour cela, commençons par nous demander

73
00:03:49,195 --> 00:03:51,192
ce que l'on veut vraiment faire,

74
00:03:51,192 --> 00:03:53,191
si, par exemple, on a un coup valide,

75
00:03:53,193 --> 00:03:57,500
que le joueur joue en colonne 3, 
imaginons le cas général,

76
00:03:57,500 --> 00:04:01,037
où on avait par exemple, 
déjà des pions dans la colonne 3

77
00:04:01,037 --> 00:04:05,717
et le joueur va rejouer un pion
dans la colonne 3

78
00:04:05,728 --> 00:04:07,936
Que faut-il que l'on fasse ?

79
00:04:07,936 --> 00:04:12,911
Le pion va arriver 
sur la première case vide

80
00:04:12,911 --> 00:04:14,386
dans la même colonne.

81
00:04:14,386 --> 00:04:17,953
Alors, première, depuis où ? 
Première depuis le bas.

82
00:04:17,953 --> 00:04:20,497
L'algorithme va donc devoir rechercher

83
00:04:20,497 --> 00:04:25,036
depuis le bas, la première position vide.

84
00:04:25,036 --> 00:04:29,186
Les lignes sont numérotées depuis zéro,

85
00:04:29,194 --> 00:04:33,400
jusqu'à la taille de la grille moins 1 :

86
00:04:33,400 --> 00:04:36,383
je vous rappelle qu'un tableau 
est numéroté depuis zéro

87
00:04:36,383 --> 00:04:38,206
jusqu'à la taille moins 1.

88
00:04:38,206 --> 00:04:42,040
On va commencer par faire une variable,

89
00:04:42,040 --> 00:04:45,250
qu'on va appeler,
de façon très originale " ligne ",

90
00:04:45,250 --> 00:04:49,146
qui va partir de la taille
de la grille moins un,

91
00:04:49,146 --> 00:04:55,562
et remonter de un en un 
jusqu'à trouver une place vide.

92
00:04:55,562 --> 00:04:57,839
Il ne reste maintenant plus qu'à l'écrire,

93
00:04:57,839 --> 00:05:01,105
on commence par mettre un commentaire

94
00:05:01,105 --> 00:05:02,811
qui explique ce que l'on veut faire :

95
00:05:02,811 --> 00:05:04,806
on parcours la colonne en partant du bas,

96
00:05:04,806 --> 00:05:07,401
jusqu'à trouver une case vide.

97
00:05:07,401 --> 00:05:10,258
Pour ça, on va déclarer 
une variable pour le parcours,

98
00:05:10,263 --> 00:05:12,033
appelons-là donc " ligne ".

99
00:05:12,033 --> 00:05:16,127
On va l'initialiser à la dernière position
du tableau de ligne,

100
00:05:16,127 --> 00:05:19,225
c'est-à-dire à " grille.length - 1 ",

101
00:05:19,225 --> 00:05:21,857
donc elle part d'ici,

102
00:05:21,857 --> 00:05:28,990
puis, on va remonter tant 
qu'on a pas trouvé de case vide,

103
00:05:28,990 --> 00:05:33,679
tant que la grille 
à la position de la ligne

104
00:05:33,679 --> 00:05:37,528
et de la colonne que l'on veut 
n'est pas vide,

105
00:05:37,528 --> 00:05:41,452
on avait pour ça,
défini la valeur <i>VIDE</i>,

106
00:05:41,452 --> 00:05:44,426
qu'on va pouvoir réutiliser ici ;

107
00:05:44,426 --> 00:05:47,130
tant que cette colonne n'est pas vide,

108
00:05:47,130 --> 00:05:51,223
on va remonter de un en un, 
ce qui s'écrit "--ligne".

109
00:05:51,232 --> 00:05:54,304
Voilà, à ce stade on a trouvé 
une case vide,

110
00:05:54,304 --> 00:05:57,847
ce qui nous permet de la remplir 
avec la couleur que l'on a reçue.

111
00:05:57,847 --> 00:06:00,985
Pour ça, comme d'habitude, 
on écrit d'abord le commentaire,

112
00:06:00,985 --> 00:06:03,455
puis, on écrit simplement en Java

113
00:06:03,455 --> 00:06:07,612
" grille[ligne][colonne] = couleur; ", 
la couleur que l'on a reçue

114
00:06:08,227 --> 00:06:11,807
Ce qui termine notre première version
de la méthode <i>joue</i>,

115
00:06:11,807 --> 00:06:14,838
et en bon programmeurs, 
maintenant, nous allons la tester,

116
00:06:14,838 --> 00:06:18,226
pour ça on écrit une méthode <i>main</i>

117
00:06:18,226 --> 00:06:20,534
pour pouvoir tester ses fonctionnalités.

118
00:06:20,534 --> 00:06:25,903
Typiquement, on va écrire 
dans une méthode <i>main</i>,

119
00:06:25,909 --> 00:06:28,016
la déclaration d'une grille,

120
00:06:28,016 --> 00:06:30,576
on va déclarer une grille 
qui fait 6 par 7.

121
00:06:30,576 --> 00:06:33,240
On va, comme vous l'aviez vu dans 
la séquence vidéo précédente,

122
00:06:33,240 --> 00:06:36,075
initialiser la grille,
on peut commencer par l'afficher.

123
00:06:36,075 --> 00:06:39,034
Et puis on teste directement 
que l'on veut jouer

124
00:06:39,034 --> 00:06:42,361
en troisième colonne 
avec la couleur rouge,

125
00:06:42,361 --> 00:06:46,414
et puis on affiche la grille, 
ce qui devrait nous donner

126
00:06:46,429 --> 00:06:49,543
un affichage correspondant au fait 
d'avoir un pion rouge ici,

127
00:06:49,543 --> 00:06:52,417
puisque je vous rappelle 
que l'indice que l'on reçoit ici

128
00:06:52,417 --> 00:06:57,343
correspond à la numérotation Java, 
qui commence à zéro.

129
00:06:57,813 --> 00:07:00,982
Donc, l'affichage sera le suivant,

130
00:07:00,982 --> 00:07:06,221
puis on continue à tester 
en jouant un pion jaune

131
00:07:06,221 --> 00:07:10,579
dans la colonne numéro 2, 
c'est-à-dire la troisième colonne.

132
00:07:10,579 --> 00:07:13,072
Puis on continue à tester

133
00:07:13,072 --> 00:07:16,085
en remettant un pion rouge 
et en affichant la grille,

134
00:07:16,085 --> 00:07:18,838
en remettant un pion rouge 
dans la quatrième colonne,

135
00:07:18,838 --> 00:07:23,272
la colonne d'indice 3, 
ce qui va donc nous afficher

136
00:07:23,272 --> 00:07:27,017
quelque chose qui correspondrait 
à la grille ici.

137
00:07:27,807 --> 00:07:32,107
Maintenant, que se passe-t-il 
si on continue à jouer

138
00:07:32,107 --> 00:07:36,987
comme ceci dans la colonne 3,
et si on rajoute des pions,

139
00:07:36,987 --> 00:07:40,508
par exemple des pions rouges 
chaque fois dans la colonne 3,

140
00:07:40,508 --> 00:07:43,956
que va faire notre méthode <i>joue</i>
dans ce cas-là ?

141
00:07:44,262 --> 00:07:46,516
Que se passe-t-il quand on joue un pion

142
00:07:46,516 --> 00:07:48,770
dans une colonne qui est déjà remplie ?

143
00:07:48,770 --> 00:07:51,024
Ce qui va se passer 
c'est que l'on initialise

144
00:07:51,024 --> 00:07:56,184
comme d'habitude notre variable <i>ligne</i>
à la dernière ligne du tableau,

145
00:07:56,184 --> 00:08:01,253
puis tant que la ligne, 
à la colonne correspondante

146
00:08:01,253 --> 00:08:03,553
n'est pas vide, en l'occurrence, ici,

147
00:08:03,553 --> 00:08:07,369
jusqu'à ce que la ligne 
atteigne la position zéro,

148
00:08:07,369 --> 00:08:10,375
cette condition va être vraie, 
on va toujours faire "--ligne ",

149
00:08:10,375 --> 00:08:13,116
on va remonter comme ça 
jusqu'à la position zéro.

150
00:08:13,116 --> 00:08:15,866
Quand <i>ligne</i> vaut zéro, 
alors qu'est-ce qu'il se passe ?

151
00:08:15,874 --> 00:08:20,469
À ce moment là, on va avoir 
cette condition qui est toujours vraie,

152
00:08:20,469 --> 00:08:23,009
la position zéro n'est pas vide,

153
00:08:23,009 --> 00:08:26,696
et on recommence 
à faire un "--ligne ",

154
00:08:26,696 --> 00:08:29,584
ce qui fait qu'on va comme ça,
s'enfuir au-delà

155
00:08:29,584 --> 00:08:32,094
de notre tableau, au-delà de notre jeu,

156
00:08:32,094 --> 00:08:34,267
en tout cas c'est une erreur 
de conception,

157
00:08:34,267 --> 00:08:38,037
puisqu'on a ici une boucle qui 
nous fait sortir du tableau.

158
00:08:38,038 --> 00:08:40,653
Donc, il va falloir corriger ceci,

159
00:08:40,653 --> 00:08:44,146
et arrêter cette boucle <i>while</i>,

160
00:08:44,146 --> 00:08:47,387
dès que l'on dépasse la fin du tableau,

161
00:08:47,387 --> 00:08:50,232
c'est-à-dire dès qu'on atteint 
l'indice zéro.

162
00:08:50,232 --> 00:08:52,242
Il ne reste plus qu'à l'écrire,

163
00:08:52,242 --> 00:08:56,395
pour cela on va déclarer 
une variable booléenne

164
00:08:56,395 --> 00:09:01,410
qui va tester si on a remplit 
complètement une colonne,

165
00:09:01,410 --> 00:09:04,090
donc on va l'appeler
typiquement " pleine ".

166
00:09:04,090 --> 00:09:10,263
Au départ, à priori, la colonne 
n'est pas supposée être pleine,

167
00:09:10,263 --> 00:09:13,783
donc on va déclarer 
cette variable à <i>false</i>.

168
00:09:13,789 --> 00:09:17,249
Et puis, dans la boucle qui va remonter

169
00:09:17,249 --> 00:09:19,770
pour rechercher une position vide,

170
00:09:19,770 --> 00:09:25,553
on va changer la valeur 
de la variable booléenne <i>pleine</i>,

171
00:09:25,553 --> 00:09:27,303
et la faire passer à vraie,

172
00:09:27,303 --> 00:09:30,182
dès que l'on atteint la position zéro,

173
00:09:30,182 --> 00:09:35,958
puisque si dans cette boucle, 
on arrive jusqu'à la position zéro,

174
00:09:35,958 --> 00:09:39,805
c'est que la position zéro 
n'était pas vide,

175
00:09:39,805 --> 00:09:43,073
donc la position zéro n'est pas vide,

176
00:09:43,073 --> 00:09:46,341
que si le reste de la colonne est plein.

177
00:09:46,341 --> 00:09:49,611
Donc, continuons à l'écrire,
si la ligne atteint la position zéro,

178
00:09:49,631 --> 00:09:52,601
à ce moment-là, 
on dit que la colonne est pleine,

179
00:09:52,621 --> 00:09:54,551
donc " pleine = true ".

180
00:09:55,390 --> 00:09:58,227
Dans ce cas-là, en plus, 
il ne faut pas décrémenter,

181
00:09:58,227 --> 00:10:00,314
il ne faut pas soustraire un à la ligne,

182
00:10:00,314 --> 00:10:03,643
et donc on protège 
notre instruction "--ligne ",

183
00:10:03,643 --> 00:10:07,594
ici par le fait que la ligne 
n'est pas nulle,

184
00:10:07,594 --> 00:10:09,546
donc on met ici une partie <i>else</i>

185
00:10:09,546 --> 00:10:12,748
qui protège cette décrémentation, 
ce "--ligne "

186
00:10:12,748 --> 00:10:16,541
de la condition, 
du fait que la ligne soit nulle.

187
00:10:17,481 --> 00:10:20,141
Et on corrige maintenant notre boucle,

188
00:10:20,141 --> 00:10:22,827
en disant qu'on continue la boucle,

189
00:10:22,827 --> 00:10:25,840
comme tout à l'heure, c'est-à-dire 
à rechercher une position vide,

190
00:10:25,840 --> 00:10:29,057
mais tant que la colonne n'est pas pleine.

191
00:10:29,057 --> 00:10:31,525
Ce signe là, je vous rappelle 
que ça veut dire <i>not</i>,

192
00:10:31,525 --> 00:10:33,610
donc tant que la colonne n'est pas pleine,

193
00:10:33,610 --> 00:10:36,055
et qu'on a pas trouvé une case vide,

194
00:10:36,055 --> 00:10:38,321
on continue tant que 
les 2 conditions sont vraies.

195
00:10:38,321 --> 00:10:40,639
Si elle n'est pas pleine

196
00:10:40,639 --> 00:10:44,216
et si on a pas trouvé 
une position vide,on remonte.

197
00:10:44,216 --> 00:10:47,105
Si jamais l'une des deux conditions,
soit qu'elle est pleine,

198
00:10:47,105 --> 00:10:50,460
soit qu'on a trouvé une case vide,
était vraie,

199
00:10:50,460 --> 00:10:52,975
à ce moment là, la boucle s'arrêterait.

200
00:10:52,985 --> 00:10:55,219
On peut terminer en ajoutant ici 
une paire de parenthèses

201
00:10:55,219 --> 00:10:57,603
pour rendre notre code plus lisible.

202
00:10:57,603 --> 00:11:00,198
Enfin, puisqu'on ne l'a pas fait 
au début, ce qu'on aurait du faire,

203
00:11:00,198 --> 00:11:02,231
on commente ce que l'on vient de faire,

204
00:11:02,231 --> 00:11:04,829
L'idée c'est qu'on parcours la colonne 
en partant du bas

205
00:11:04,829 --> 00:11:07,979
jusqu'à trouver une case vide,
ou jusqu'en haut.

206
00:11:08,877 --> 00:11:13,760
Enfin, il faut ne pas oublier de corriger 
la fin qui n'est plus valide,

207
00:11:13,760 --> 00:11:17,400
puisqu'on ne peut plus à chaque fois 
garantir que l'on peut jouer le pion,

208
00:11:17,400 --> 00:11:20,000
puisque si la colonne est pleine, 
on ne joue pas le pion.

209
00:11:20,000 --> 00:11:23,500
Donc on protège 
le fait le jouer, par la condition :

210
00:11:23,513 --> 00:11:26,143
si la colonne n'est pas pleine, 
donc " if (!pleine) ",

211
00:11:26,189 --> 00:11:28,049
à ce moment là, on peut jouer,

212
00:11:28,049 --> 00:11:31,140
et on peut en même temps 
donner une indication :

213
00:11:31,140 --> 00:11:33,454
notre fonction <i>joue</i>, maintenant, 
on va pouvoir lui donner

214
00:11:33,454 --> 00:11:37,337
une indication à l'extérieur,
et par exemple, renvoyer <i>true</i>,

215
00:11:37,337 --> 00:11:39,341
pour dire : " oui j'ai bien pu jouer,

216
00:11:39,341 --> 00:11:41,335
la fonction <i>joue</i> a pu faire 
ce que l'on veut ".

217
00:11:41,335 --> 00:11:45,110
Et puis, sinon, par exemple, 
retourner <i>false</i>, pour dire :

218
00:11:45,110 --> 00:11:47,830
" non, la colonne était pleine, 
le coup n'était pas valide "

219
00:11:47,830 --> 00:11:52,456
" et je n'ai pas pu placer mon pion 
à la bonne position ".

220
00:11:53,061 --> 00:11:57,286
Enfin, comme d'habitude, 
on commente notre code pour expliquer,

221
00:11:57,286 --> 00:11:59,648
soit à nous plus tard, 
qui allons le reprendre,

222
00:11:59,648 --> 00:12:03,418
soit à d'autres personnes 
qui le liraient, ce que fait notre code.

223
00:12:03,419 --> 00:12:06,712
Ici si on n'est pas arrivés jusqu'en haut,
si " if (!pleine)",

224
00:12:06,712 --> 00:12:08,962
si on est pas arrivés 
jusqu'en haut de la colonne,

225
00:12:08,962 --> 00:12:11,940
à ce moment là, on peut jouer.

226
00:12:12,323 --> 00:12:15,472
N'oublions pas, enfin, de corriger 
notre type de retour,

227
00:12:15,472 --> 00:12:18,110
puisque nous avons maintenant 
décidé de renvoyer

228
00:12:18,110 --> 00:12:21,770
un booléen qui nous indique
si le coup était valide ou non,

229
00:12:21,770 --> 00:12:26,210
donc on change, ici le type de retour 
de <i>void</i> à un booléen.

230
00:12:26,619 --> 00:12:28,653
Voilà, nous pensons donc maintenant

231
00:12:28,653 --> 00:12:31,187
avoir corrigé notre première version
de la méthode <i>joue</i>

232
00:12:31,187 --> 00:12:34,841
en une version qui est robuste 
au fait que la colonne est pleine,

233
00:12:34,841 --> 00:12:38,589
et donc il faut maintenant tester
cette méthode, et pour ça,

234
00:12:38,589 --> 00:12:41,877
on va réécrire une nouvelle fonction <i>main</i>,

235
00:12:41,877 --> 00:12:45,771
où on va tester spécifiquement 
le fait de jouer tout le temps

236
00:12:45,771 --> 00:12:47,315
dans la même colonne,

237
00:12:47,315 --> 00:12:50,959
comme d'habitude, on déclare la grille, 
on l'initialise, on l'affiche,

238
00:12:50,959 --> 00:12:53,803
et puis ici, on va faire une boucle 
qui va jouer

239
00:12:53,803 --> 00:12:56,785
10 fois dans la même colonne,

240
00:12:56,785 --> 00:12:59,537
ici toujours dans la quatrième colonne, 
la colonne numéro 3,

241
00:12:59,537 --> 00:13:02,024
on fait une boucle 
qui fait 10 itérations,

242
00:13:02,024 --> 00:13:05,351
qui joue dans la colonne 3.

243
00:13:05,351 --> 00:13:09,338
Remarquez que maintenant, 
la fonction <i>joue</i> retournant un booléen

244
00:13:09,338 --> 00:13:11,548
qui indique si le coup était valide,

245
00:13:11,548 --> 00:13:14,930
on appelle maintenant <i>joue</i>
en partie droite d'une expression,

246
00:13:14,930 --> 00:13:18,299
on récupère donc la valeur,
on écrit " valide = joue(...)",

247
00:13:18,319 --> 00:13:21,947
et puis pour voir ce qui se passe 
et pour tester notre programme,

248
00:13:21,947 --> 00:13:24,647
si le coup n'était pas valide, 
alors on va afficher

249
00:13:24,652 --> 00:13:27,842
un message qui nous dit 
qu'il n'était pas possible de jouer.

250
00:13:27,842 --> 00:13:31,711
Dans tous les cas, on affiche la grille,
pour voir ce qui se passe.

251
00:13:32,090 --> 00:13:34,460
Qu'est-ce que ça va nous donner ?

252
00:13:34,461 --> 00:13:39,426
J'ai recopié ici le <i>main</i> en bas, 
et toute notre méthode <i>joue</i>.

253
00:13:39,426 --> 00:13:44,888
Exécutons le <i>main</i>, on part à partir 
de " i = 0 ", on n'utilise pas le <i>i</i>,

254
00:13:44,888 --> 00:13:48,322
c'est juste pour dire 
qu'on va faire 10 fois la boucle.

255
00:13:48,322 --> 00:13:51,416
Donc on part ici de " i = 0 ", 
on joue toujours

256
00:13:51,416 --> 00:13:53,690
dans la colonne 3 et en rouge,

257
00:13:53,690 --> 00:13:56,768
Ça va commencer à jouer ici un pion,

258
00:13:56,768 --> 00:13:59,126
puis ça va jouer un autre pion, etc.

259
00:13:59,126 --> 00:14:02,564
Tous ces cas là ne sont pas 
spécialement intéressants,

260
00:14:02,575 --> 00:14:06,471
mais que va-t-il se passer 
quand on va jouer le septième coup ?

261
00:14:06,471 --> 00:14:09,431
Une fois que <i>i</i> vaut 6, ici,

262
00:14:09,431 --> 00:14:12,740
on a envie de jouer ici un septième pion

263
00:14:12,740 --> 00:14:17,708
qu'on essaie de faire venir 
dans la colonne qui est pleine,

264
00:14:17,708 --> 00:14:21,019
et donc quand <i>i</i> vaut 6, 
on va rentrer à nouveau ici,

265
00:14:21,019 --> 00:14:26,523
avec la valeur 3 pour la colonne 
et puis la couleur rouge,

266
00:14:26,536 --> 00:14:30,556
et on va, ici, initialiser la ligne

267
00:14:30,558 --> 00:14:33,618
à la taille de la grille moins un.

268
00:14:33,618 --> 00:14:36,241
On va initialiser <i>booléen</i> à <i>faux</i>,

269
00:14:36,241 --> 00:14:39,911
donc évidemment, notre <i>pleine</i> est <i>vrai</i>,

270
00:14:39,911 --> 00:14:44,515
la grille, à la position 
[ligne][colonne], n'est pas vide,

271
00:14:44,515 --> 00:14:46,515
la ligne n'est pas égale à zéro,

272
00:14:46,515 --> 00:14:50,642
donc on saute ici dans le <i>else</i>, et 
on décrémente <i>ligne</i>,

273
00:14:50,642 --> 00:14:53,812
qui va donc passer ici (2ème ligne).

274
00:14:53,812 --> 00:14:57,203
Ici, on a toujours les 2 conditions 
qui sont vérifiées,

275
00:14:57,203 --> 00:15:00,553
donc on a toujours 
notre <i>pleine</i> qui est <i>vraie</i>,

276
00:15:00,556 --> 00:15:03,287
et on a toujours une grille, ici,

277
00:15:03,287 --> 00:15:06,798
qui n'est pas vide, et donc et cetera,

278
00:15:06,798 --> 00:15:11,209
on va monter jusqu'à arriver
à la position <i>ligne==0</i>.

279
00:15:11,209 --> 00:15:14,569
Donc quand <i>ligne==0</i>, 
que va-t-il se passer ?

280
00:15:14,569 --> 00:15:18,206
On arrive toujours ici 
avec une condition vraie,

281
00:15:18,206 --> 00:15:22,489
et la grille de [ligne], de zéro, 
de [colonne], n'est pas vide,

282
00:15:22,489 --> 00:15:26,383
on rentre, mais cette fois-ci, 
le <i>if</i> est vrai,

283
00:15:26,383 --> 00:15:31,000
la ligne vaut zéro,
à ce moment là on change

284
00:15:31,000 --> 00:15:35,757
et on met la valeur de <i>pleine</i> à <i>vraie</i>.

285
00:15:35,757 --> 00:15:39,656
On est ici, on a donc terminé 
le bloc du <i>if</i>,

286
00:15:39,656 --> 00:15:41,822
et on revient une nouvelle fois 
dans notre boucle,

287
00:15:41,822 --> 00:15:45,387
mais cette fois-ci, la condition, 
ici "!pleine "

288
00:15:45,387 --> 00:15:48,697
est fausse, et donc, 
le <i>while</i> s'arrête,

289
00:15:48,697 --> 00:15:51,597
et on termine, on sort de la boucle.

290
00:15:51,597 --> 00:15:54,670
Ensuite on continue, 
ici on arrive sur ce <i>if</i>,

291
00:15:54,670 --> 00:15:57,748
de nouveau, notre <i>pleine</i>, 
ici, n'est pas vrai,

292
00:15:57,748 --> 00:16:00,007
donc cette condition, ici, est fausse,

293
00:16:00,007 --> 00:16:03,507
on saute dans le <i>else</i>
et on retourne <i>false</i>.

294
00:16:03,782 --> 00:16:07,283
Ce qui fait que, arrivé, 
ici, quand <i>if</i> vaut 6,

295
00:16:07,283 --> 00:16:09,743
<i>valide</i> va valoir <i>faux</i>, et donc,

296
00:16:09,743 --> 00:16:13,232
on va afficher le message d'erreur,

297
00:16:13,232 --> 00:16:15,572
et donc ce message d'erreur s'affichera

298
00:16:15,575 --> 00:16:20,060
pour <i>i</i> égal 6, 7, 8 et 9, 
on aura donc 4 fois

299
00:16:20,060 --> 00:16:25,250
un affichage du message 
de l'impossibilité de jouer.

300
00:16:25,613 --> 00:16:27,915
Voilà donc le test qui nous confirme

301
00:16:27,915 --> 00:16:30,217
qu'on ne peut pas remplir une colonne

302
00:16:30,217 --> 00:16:32,521
qui était déjà pleine,
c'est exactement ce que nous voulions.

303
00:16:32,521 --> 00:16:35,303
Voilà, je propose de terminer ici 
cette séquence vidéo,

304
00:16:35,303 --> 00:16:37,773
et d'aborder dans une séquence suivante

305
00:16:37,773 --> 00:16:40,243
des versions alternatives 
qu'on aurait pu choisir

306
00:16:40,243 --> 00:16:42,715
pour implémenter la méthode <i>joue</i>.
