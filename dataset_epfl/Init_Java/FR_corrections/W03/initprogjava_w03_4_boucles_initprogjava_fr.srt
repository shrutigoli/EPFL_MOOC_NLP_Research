1
00:00:00,000 --> 00:00:07,105
Dans les séquences vidéo précédentes, nous
avons abordé la

2
00:00:07,105 --> 00:00:09,980
notion de structure de contrôle. Nous
avons vu, qu'il

3
00:00:09,980 --> 00:00:12,070
s'agissait d'instructions particulières
qui

4
00:00:12,070 --> 00:00:13,995
permettent d'exécuter des traitements en

5
00:00:13,995 --> 00:00:17,270
fonction de conditions, ou qui permettent
de répéter des traitements.

6
00:00:17,270 --> 00:00:20,735
Nous allons aujourd'hui continuer sur
cette lancée et aborder une nouvelle

7
00:00:20,735 --> 00:00:24,190
façon de répéter des traitements, que l'on
appelle les boucles conditionnelles.

8
00:00:24,190 --> 00:00:25,532
Lorsque dans un programme,

9
00:00:25,532 --> 00:00:28,338
on souhaite répéter une séquence de
traitements, et si le

10
00:00:28,338 --> 00:00:31,632
nombre de répétitions à exécuter, est
connu à priori, c'est-à-dire,

11
00:00:31,632 --> 00:00:33,856
avant même d'entrer dans la boucle, nous
avons vu qu'il

12
00:00:33,856 --> 00:00:37,065
était possible de recourir aux boucles
"for", c'est-à-dire la notion d'itération.

13
00:00:37,065 --> 00:00:39,441
Il existe cependant des situations où l'on
ne sait pas

14
00:00:39,441 --> 00:00:41,940
a priori, combien de fois on veut répéter
le traitement.

15
00:00:41,940 --> 00:00:43,796
Typiquement, on va pouvoir être amené à

16
00:00:43,796 --> 00:00:46,580
répéter un traitement, tant qu'une
condition est vérifiée,

17
00:00:46,580 --> 00:00:48,030
et on ne sait pas alors combien

18
00:00:48,030 --> 00:00:50,633
de répétitions vont être nécessaires,
jusqu'à ce que

19
00:00:50,633 --> 00:00:52,460
la condition cesse d'être vérifiée.

20
00:00:52,460 --> 00:00:56,205
Dans ce cas, il faut avoir recours à
d'autres types de structures de contrôle,

21
00:00:56,205 --> 00:00:58,405
ce que l'on appelle les boucles
conditionnelles,

22
00:00:58,405 --> 00:01:01,074
c'est-à-dire des répétitions dont l'arrêt
va dépendre

23
00:01:01,074 --> 00:01:05,291
d'une condition. Plus précisément, cela
va prendre la forme, en Java, de boucles

24
00:01:05,291 --> 00:01:06,763
de type "do while" ou "while" qui

25
00:01:06,763 --> 00:01:09,380
vont nous occuper dans la séquence
d'aujourd'hui.

26
00:01:09,380 --> 00:01:12,136
Pour illustrer notre propos, reprenons
notre petit exemple de

27
00:01:12,136 --> 00:01:14,256
calcul de la moyenne d'un certain nombre
de notes.

28
00:01:14,256 --> 00:01:15,899
Nous ne savons pas a priori de combien

29
00:01:15,899 --> 00:01:18,451
de notes nous devons calculer une moyenne,
et donc nous

30
00:01:18,451 --> 00:01:22,270
commençons par le demander à l'utilisateur
au travers d'une interaction clavier.

31
00:01:22,270 --> 00:01:25,198
Une fois le nombre de notes voulues saisi,
et si ce nombre de

32
00:01:25,198 --> 00:01:27,864
notes est strictement positif, nous
entamons alors

33
00:01:27,864 --> 00:01:30,096
un traitement répétitif, une boucle "for",
qui

34
00:01:30,096 --> 00:01:32,330
va permettre de saisir toutes ces notes;

35
00:01:32,330 --> 00:01:34,867
via toujours une interaction clavier, et
d'intégrer

36
00:01:34,867 --> 00:01:38,954
la note nouvellement saisie à la somme
afin d'en calculer la moyenne plus tard.

37
00:01:38,954 --> 00:01:40,899
Une fois le nombre de notes atteint,

38
00:01:40,899 --> 00:01:44,249
lorsque nous avons saisi toutes les notes,
nous sortons de la

39
00:01:44,249 --> 00:01:49,390
boucle "for", nous calculons la
moyenne des notes, et nous l'affichons.

40
00:01:49,390 --> 00:01:52,926
Si l'on observe cet exemple d'un peu plus
près, il peut sembler peu

41
00:01:52,926 --> 00:01:57,390
naturel de permettre à l'utilisateur de
saisir un nombre de notes qui soit zéro.

42
00:01:57,390 --> 00:01:58,655
Ça n'a pas beaucoup de sens, et

43
00:01:58,655 --> 00:02:01,075
donc la question que nous nous posons
naturellement,

44
00:02:01,075 --> 00:02:03,520
est la suivante : comment forcer
l'utilisateur, le

45
00:02:03,520 --> 00:02:06,100
contraindre à fournir un nombre de notes
supérieur

46
00:02:06,100 --> 00:02:06,410
à zéro?

47
00:02:06,410 --> 00:02:11,587
L'idée sous-jacente ici, serait donc de
répéter ces traitements, jusqu'à ce que

48
00:02:11,587 --> 00:02:15,158
l'utilisateur, consente à introduire, un
nombre

49
00:02:15,158 --> 00:02:17,270
de notes qui soit strictement positif.

50
00:02:17,270 --> 00:02:20,636
La solution pour répéter ces deux lignes
d'instructions, tant

51
00:02:20,636 --> 00:02:23,540
que l'utilisateur n'a pas introduit un nombre

52
00:02:23,540 --> 00:02:26,590
de notes strictement positif, est d'avoir
recours à une

53
00:02:26,590 --> 00:02:30,515
instruction particulière, une boucle
conditionnelle, de type "do while".

54
00:02:30,515 --> 00:02:31,391
Alors comment

55
00:02:31,391 --> 00:02:34,019
se rédige ce genre de structure de
contrôle?

56
00:02:34,019 --> 00:02:37,729
Nous avons le mot réservé "do", qui veut
dire

57
00:02:37,729 --> 00:02:43,730
répéter, le mot "while", qui veut dire
"tant que".

58
00:02:43,730 --> 00:02:44,810
Que veut-t'on répéter?

59
00:02:44,810 --> 00:02:47,030
Et bien nous voulons répéter 

60
00:02:47,030 --> 00:02:49,670
l'exécution de ces deux instructions, qui
se trouvent

61
00:02:49,670 --> 00:02:52,880
entre ces deux accolades, et nous voulons
répéter

62
00:02:52,880 --> 00:02:56,740
ce traitement, tant que cette condition
est vraie.

63
00:02:56,740 --> 00:03:02,114
Donc, si l'on imagine que l'utilisateur
saisisse ici, un nombre de notes qui

64
00:03:02,114 --> 00:03:05,831
soit inférieur ou égal à zéro, et bien
l'évaluation de cette condition va

65
00:03:05,831 --> 00:03:07,733
retourner, "true", vrai, ce qui voudra

66
00:03:07,733 --> 00:03:10,279
dire qu'on continue à répéter les
traitements,

67
00:03:10,279 --> 00:03:14,730
et donc nous allons repartir sur un
nouveau cycle, d'exécution de la boucle.

68
00:03:14,730 --> 00:03:16,730
Examinons pas à pas, comment se

69
00:03:16,730 --> 00:03:20,570
déroulerait l'exécution d'une telle
instruction "do while".

70
00:03:20,570 --> 00:03:21,956
Donc ici, nous commençons

71
00:03:21,956 --> 00:03:24,847
par déclarer une variable, qui contient le
nombre de notes à

72
00:03:24,847 --> 00:03:27,089
saisir, et ensuite nous abordons
directement

73
00:03:27,089 --> 00:03:29,460
l'exécution de notre instruction "do
while".

74
00:03:29,460 --> 00:03:31,910
Ici, rien de particulier, on va
directement

75
00:03:31,910 --> 00:03:34,430
entamer l'exécution de ce que l'on appelle
le

76
00:03:34,430 --> 00:03:37,300
corps de la boucle, c'est-à-dire les
instructions

77
00:03:37,300 --> 00:03:40,159
que l'on est censé pouvoir répéter si
nécessaire.

78
00:03:40,159 --> 00:03:43,818
Donc ici, on va demander à notre
utilisateur de saisir le nombre

79
00:03:43,818 --> 00:03:47,539
de notes, et imaginons dans le cas
présent, que l'utilisateur saisisse zéro.

80
00:03:47,539 --> 00:03:49,852
Nous abordons donc ici, cette ligne, où il
va

81
00:03:49,852 --> 00:03:53,625
être question d'évaluer la condition de
sortie de la boucle.

82
00:03:53,625 --> 00:03:59,477
Ici comme le nombre de notes est égal à
zéro, cette condition va être évaluée à

83
00:03:59,477 --> 00:04:02,402
"true", ce qui veut dire que l'on va

84
00:04:02,402 --> 00:04:06,188
itérer à nouveau, on va répéter le
traitement.

85
00:04:06,188 --> 00:04:09,362
Nous entamons alors une seconde itération
de la boucle,

86
00:04:09,362 --> 00:04:12,812
nous demandons à nouveau à l'utilisateur
de saisir un nombre

87
00:04:12,812 --> 00:04:14,671
de notes, et imaginons que notre

88
00:04:14,671 --> 00:04:17,431
utilisateur, cette fois-ci, saisisse un
-1.

89
00:04:17,431 --> 00:04:21,014
Nous abordons à nouveau l'instruction où
il faudra évaluer la

90
00:04:21,014 --> 00:04:24,280
condition de sortie; à nouveau, comme le
nombre de notes

91
00:04:24,280 --> 00:04:27,049
est inférieur ou égal à zéro, elle sera
évaluée à

92
00:04:27,049 --> 00:04:31,040
"true", et à nouveau, donc, nous allons
répéter le traitement.

93
00:04:31,040 --> 00:04:34,680
À la troisième itération de la boucle,
nous continuons à demander un

94
00:04:34,680 --> 00:04:38,125
nombre de notes à notre utilisateur, qui,
de guerre lasse, va finir

95
00:04:38,125 --> 00:04:40,138
par comprendre ce qu'on lui demande, et

96
00:04:40,138 --> 00:04:42,517
donner un nombre de notes strictement
positif.

97
00:04:42,517 --> 00:04:44,781
Lorsque nous abordons l'instruction où il
va

98
00:04:44,781 --> 00:04:47,587
être nécessaire d'évaluer la condition de
sortie, cette

99
00:04:47,587 --> 00:04:49,790
fois, l'évaluation de la condition de
sortie

100
00:04:49,790 --> 00:04:52,526
va retourner "false", puisque le nombre de
notes

101
00:04:52,526 --> 00:04:55,190
est strictement positif, dans ce cas-là,
nous

102
00:04:55,190 --> 00:04:57,906
cessons d'itérer, et nous allons donc
sortir de

103
00:04:57,906 --> 00:04:59,704
notre boucle "do while", ce qui veut dire

104
00:04:59,704 --> 00:05:03,126
concrètement, que nous allons poursuivre
l'exécution des traitements,

105
00:05:03,126 --> 00:05:06,913
après la fin de l'exécution de la boucle
"do while" signalée par ce point virgule,

106
00:05:06,913 --> 00:05:09,686
et donc entamer ici, l'exécution
d'éventuels traitements,

107
00:05:09,686 --> 00:05:12,270
qui se trouveraient après la boucle "do
while".

108
00:05:12,270 --> 00:05:15,804
Nous voyons dans le cas de cet exemple,
qu'il n'est pas possible d'anticiper le

109
00:05:15,804 --> 00:05:17,628
nombre de fois, le nombre d'itérations à

110
00:05:17,628 --> 00:05:19,794
exécuter, avant de pouvoir sortir de la
boucle.

111
00:05:19,794 --> 00:05:22,125
En effet, le nombre de répétitions doit
dépendre de

112
00:05:22,125 --> 00:05:24,669
la volonté de l'utilisateur, qu'on ne peut
pas anticiper ici.

113
00:05:24,669 --> 00:05:28,258
Une boucle "for" n'aurait donc pas été
adaptée au traitement que l'on veut

114
00:05:28,258 --> 00:05:30,170
mettre en oeuvre dans le cas présent.

115
00:05:30,170 --> 00:05:32,142
Un peu plus formellement maintenant : la

116
00:05:32,142 --> 00:05:34,114
syntaxe de l'instruction "do while" en
Java.

117
00:05:34,114 --> 00:05:38,542
Vous avez donc les mots réservés "do" et
"while", qui encadrent ce que l'on appelle

118
00:05:38,542 --> 00:05:40,313
le corps de la boucle, un bloc

119
00:05:40,313 --> 00:05:42,990
d'instructions que l'on va pouvoir
répéter, lequel se

120
00:05:42,990 --> 00:05:45,395
trouve entre deux accolades ouvrantes et
fermantes.

121
00:05:45,395 --> 00:05:47,159
Suivant le mot réservé "while", il y a

122
00:05:47,159 --> 00:05:49,740
la condition de continuation de la boucle,
nous

123
00:05:49,740 --> 00:05:52,940
allons répéter l'exécution du corps de la
boucle,

124
00:05:52,940 --> 00:05:55,820
tant que cette condition est évaluée à
"true".

125
00:05:55,820 --> 00:05:59,128
En Java, tout comme pour l'instruction
"if", les parenthèses

126
00:05:59,128 --> 00:06:01,805
autour de la condition sont des éléments
de syntaxe

127
00:06:01,805 --> 00:06:06,190
obligatoires, et vous devez clore votre
instruction "do while",

128
00:06:06,190 --> 00:06:09,030
par le fameux petit point-virgule, à la
fin de l'instruction.

129
00:06:09,030 --> 00:06:12,916
Tout comme pour l'instruction "if", la
condition d'arrêt de la boucle, peut

130
00:06:12,916 --> 00:06:15,730
se formuler de façon relativement
sophistiquée,

131
00:06:15,730 --> 00:06:18,766
notamment, en ayant recours aux opérateurs
logiques.

132
00:06:18,766 --> 00:06:23,609
Par exemple, on peut imaginer que l'on va
répéter les traitements tant qu'une

133
00:06:23,609 --> 00:06:29,166
variable x a la même valeur que y plus z,
et que z est

134
00:06:29,166 --> 00:06:35,046
différent de 0, ou que, y est inférieur à
3 et ainsi de suite.

135
00:06:35,046 --> 00:06:39,390
Donc, nous voyons que nous pouvons
formuler des conditions aussi

136
00:06:39,390 --> 00:06:43,410
sophistiquées que nous le souhaitons, en
ayant recours aux opérateurs logiques,

137
00:06:43,410 --> 00:06:43,980
notamment.

138
00:06:43,980 --> 00:06:47,018
Une observation importante à faire à
propos de la boucle "do

139
00:06:47,018 --> 00:06:50,180
while", est que son corps est toujours
exécuté au moins une fois.

140
00:06:50,180 --> 00:06:53,816
En effet, dans notre petit exemple pas à
pas de tout à l'heure, nous avons vu que,

141
00:06:53,816 --> 00:06:56,774
lorsque nous abordons l'exécution d'une
instruction "do while",

142
00:06:56,774 --> 00:07:00,420
nous rentrons directement dans le corps de
la boucle.

143
00:07:00,420 --> 00:07:04,105
Ce qui veut dire que nous allons exécuter,
la toute première fois que nous entrons

144
00:07:04,105 --> 00:07:06,195
dans la boucle, le bloc d'instructions,
ensuite

145
00:07:06,195 --> 00:07:08,835
tout va dépendre de l'évaluation de la
condition.

146
00:07:08,835 --> 00:07:12,195
Le bloc d'instructions ne sera exécuté
qu'une seule fois, si

147
00:07:12,195 --> 00:07:15,719
à la première itération, l'évaluation de
la condition retourne "false".

148
00:07:15,719 --> 00:07:18,056
Dans ce cas-là effectivement, nous allons
sortir

149
00:07:18,056 --> 00:07:19,823
de la boucle "do while" et continuer les

150
00:07:19,823 --> 00:07:22,110
traitements après, mais entre temps, nous
aurons,

151
00:07:22,110 --> 00:07:24,110
au moins une fois, exécuté le bloc
d'instructions.

152
00:07:24,110 --> 00:07:26,769
Ceci constitue une caractéristique
importante de

153
00:07:26,769 --> 00:07:29,840
la boucle conditionnelle de type "do
while".

154
00:07:29,840 --> 00:07:32,196
Une dernière observation que l'on peut
faire à

155
00:07:32,196 --> 00:07:33,994
propos de la boucle "do while" est que

156
00:07:33,994 --> 00:07:37,094
si, la condition est formulée de sorte à
ce qu'elle ne devienne

157
00:07:37,094 --> 00:07:40,425
jamais fausse, et bien, le corps de la
boucle va être répété indéfiniment.

158
00:07:40,425 --> 00:07:43,863
Donc il est important d'être rigoureux,
attentif à la façon de formuler

159
00:07:43,863 --> 00:07:47,510
la condition, de sorte à pouvoir sortir de
la boucle au moment voulu.

160
00:07:47,510 --> 00:07:50,638
La boucle "do while" que nous venons de
voir est une boucle

161
00:07:50,638 --> 00:07:55,194
conditionnelle dont l'évaluation de la
condition de sortie se fait a posteriori.

162
00:07:55,194 --> 00:07:56,966
On a, au moins une fois exécuté le corps

163
00:07:56,966 --> 00:07:59,046
de la boucle, avant de savoir s'il faut
arrêter les

164
00:07:59,046 --> 00:08:00,245
traitements, ou les répéter.

165
00:08:00,245 --> 00:08:02,563
Dans certaines situations, il est
nécessaire

166
00:08:02,563 --> 00:08:04,576
de pouvoir tester la condition d'arrêt a

167
00:08:04,576 --> 00:08:08,448
priori, avant même d'avoir exécuté une
seule fois le corps de la boucle.

168
00:08:08,448 --> 00:08:10,878
Dans ce cas-là, il faut avoir recours à
une variante de

169
00:08:10,878 --> 00:08:13,640
la boucle "do while", la boucle "while",
que nous allons voir maintenant.

170
00:08:13,640 --> 00:08:15,908
Si l'on veut décrire une boucle "while" en
Java,

171
00:08:15,908 --> 00:08:17,987
on a recours à la syntaxe suivante : donc,

172
00:08:17,987 --> 00:08:20,885
on utilise le mot réservé "while", suivi
immédiatement de

173
00:08:20,885 --> 00:08:24,200
la condition de continuation de la boucle;
ensuite, entre une

174
00:08:24,200 --> 00:08:27,272
paire d'accolades ouvrante et fermantes,
il y a toujours le

175
00:08:27,272 --> 00:08:30,355
corps de la boucle, le bloc d'instructions
que l'on souhaite répéter.

176
00:08:30,355 --> 00:08:33,670
Le principe de fonctionnement est analogue
à celui d'une boucle "do while",

177
00:08:33,670 --> 00:08:35,468
on répète les traitements tant que

178
00:08:35,468 --> 00:08:38,090
l'évaluation de cette condition retourne
"true", la

179
00:08:38,090 --> 00:08:42,776
différence avec la boucle "do while" est
que l'on va, évaluer la

180
00:08:42,776 --> 00:08:44,922
condition de sortie, au moment même

181
00:08:44,922 --> 00:08:47,880
où on aborde l'exécution de l'instruction
"while".

182
00:08:47,880 --> 00:08:49,305
Si cette condition est

183
00:08:49,305 --> 00:08:53,650
d'emblée évaluée à "false", on n'exécutera
jamais le bloc d'instructions.

184
00:08:53,650 --> 00:08:57,355
Donc, illustrons maintenant sur deux
petits exemples basiques, la différence

185
00:08:57,355 --> 00:09:00,148
fondamentale entre une boucle "do while"
et une boucle "while".

186
00:09:00,148 --> 00:09:02,074
Nous avons ici affaire à deux boucles

187
00:09:02,074 --> 00:09:05,357
très similaires, dont la condition de
continuation, dépend

188
00:09:05,357 --> 00:09:07,903
dans les deux cas, d'une variable i,
initialisée

189
00:09:07,903 --> 00:09:09,526
dans les deux cas, à la valeur 100.

190
00:09:09,526 --> 00:09:12,653
Commençons par examiner ce qui se passe
dans le cas de la boucle "do while".

191
00:09:12,653 --> 00:09:14,590
Lorsque nous abordons l'exécution de cette

192
00:09:14,590 --> 00:09:18,000
ligne, rien ne nous empêche d'entrer
directement dans le corps de la

193
00:09:18,000 --> 00:09:21,946
boucle, et à ce moment-là, le message
"bonjour", sera affiché sur le terminal.

194
00:09:21,946 --> 00:09:24,913
Nous abordons ensuite l'exécution de cette
ligne, où

195
00:09:24,913 --> 00:09:27,690
la condition de continuation de la boucle
est évaluée.

196
00:09:27,690 --> 00:09:29,679
Comme i vaut 100, évidement cette
condition est

197
00:09:29,679 --> 00:09:31,260
évaluée à "false", et dans ce cas-là, nous

198
00:09:31,260 --> 00:09:34,154
allons immédiatement sortir de la boucle,
et éventuellement

199
00:09:34,154 --> 00:09:38,018
continuer l'exécution des instructions qui
suivraient le "do while".

200
00:09:38,018 --> 00:09:39,881
Entre-temps, le message "bonjour"

201
00:09:39,881 --> 00:09:40,940
aura été affiché.

202
00:09:40,940 --> 00:09:43,724
Situation analogue, mais cette fois avec
une boucle "while".

203
00:09:43,724 --> 00:09:47,757
Lorsque nous abordons l'exécution de cette
ligne, nous allons d'emblée évaluer la

204
00:09:47,757 --> 00:09:51,706
condition de continuation, qui, comme dans
le premier cas est évaluée à "false".

205
00:09:51,706 --> 00:09:53,780
Donc vous noterez, que dans les deux cas,
la

206
00:09:53,780 --> 00:09:56,785
condition de continuation de la boucle,
est évaluée à "false".

207
00:09:56,785 --> 00:10:00,319
Ici, puisque la condition est fausse, nous
n'allons pas du tout entrer dans le

208
00:10:00,319 --> 00:10:02,485
corps de la boucle, mais continuer
l'exécution

209
00:10:02,485 --> 00:10:04,160
après le corps de la boucle "while".

210
00:10:04,160 --> 00:10:04,940
Ce qui signifie

211
00:10:04,940 --> 00:10:06,980
que dans ce cas, la boucle n'affichera
rien.

212
00:10:06,980 --> 00:10:10,040
Donc, vous voyez qu'on a affaire à deux
boucles très similaires,

213
00:10:10,040 --> 00:10:13,729
dont l'une, dans un cas affichera
"bonjour" et l'autre n'affichera rien.

214
00:10:13,729 --> 00:10:17,950
Les erreurs les plus communes, relatives
aux boucles conditionnelles sont

215
00:10:17,950 --> 00:10:20,328
sans doute liées à la formulation de la
condition d'arrêt.

216
00:10:20,328 --> 00:10:21,984
La condition d'arrêt est mal formulée et
l'on

217
00:10:21,984 --> 00:10:23,601
ne sort, par exemple, jamais de la boucle,
ou

218
00:10:23,601 --> 00:10:25,515
on en sort trop tôt, on n'exécute jamais
la

219
00:10:25,515 --> 00:10:28,390
boucle, alors qu'on souhaiterait le faire,
ce genre d'erreurs.

220
00:10:28,390 --> 00:10:29,950
Il existe cependant une erreur

221
00:10:29,950 --> 00:10:31,870
syntaxique commune de base, que je vais

222
00:10:31,870 --> 00:10:34,150
décrire maintenant, et dans laquelle on
tombe

223
00:10:34,150 --> 00:10:37,890
assez souvent, si on débute avec les
boucles de type "while" et "do while".

224
00:10:37,890 --> 00:10:41,051
Alors l'erreur est la suivante : imaginez
que, à la fin

225
00:10:41,051 --> 00:10:44,980
de la condition d'une boucle "while", je
tape par inadvertance un point-virgule.

226
00:10:44,980 --> 00:10:47,635
Cette erreur est d'autant plus facile à
commettre qu'il

227
00:10:47,635 --> 00:10:49,630
y a un point-virgule à la fin d'un "do
while",

228
00:10:49,630 --> 00:10:51,412
à la fin de la condition d'un "do while",
mais

229
00:10:51,412 --> 00:10:54,280
ce point-virgule est là pour clore toute
l'instruction "do while".

230
00:10:54,280 --> 00:10:55,165
Il n'a pas vraiment

231
00:10:55,165 --> 00:10:57,761
sa place ici, puisque après la condition
"do while", nous

232
00:10:57,761 --> 00:11:00,534
nous attendons à trouver un corps qui fait
quelque chose.

233
00:11:00,534 --> 00:11:03,873
Ici, vraisemblablement, nous voulions
mettre dans le corps le ++i.

234
00:11:03,873 --> 00:11:05,237
Or, ce qui va se passer est la

235
00:11:05,237 --> 00:11:08,213
chose suivante : donc au moment où
j'exécute l'instruction

236
00:11:08,213 --> 00:11:10,405
"while", tout se passe comme si j'avais un

237
00:11:10,405 --> 00:11:14,000
corps qui contient une instruction unique,
qui est vide.

238
00:11:14,000 --> 00:11:17,480
Donc, imaginons que j'aie, au préalable,
initialisé

239
00:11:17,480 --> 00:11:19,933
mon i, à une valeur inférieure à 10,

240
00:11:19,933 --> 00:11:22,117
par exemple 1, comme ici, le ++i,

241
00:11:22,117 --> 00:11:25,575
est à l'extérieur, rien à l'intérieur du
corps de

242
00:11:25,575 --> 00:11:28,175
la boucle, ne va permettre de faire
évoluer le

243
00:11:28,175 --> 00:11:30,170
i, de sorte à lui faire atteindre une
valeur

244
00:11:30,170 --> 00:11:33,625
qui lui permette de sortir de la boucle,
et du coup, le problème est que l'on va

245
00:11:33,625 --> 00:11:36,210
cycler indéfiniment dans cette boucle
"while", ce qui peut

246
00:11:36,210 --> 00:11:39,230
être un comportement un peu déconcertant,
lorsque l'on débute.

247
00:11:39,230 --> 00:11:41,895
Donc soyez attentifs à ce genre de petits
détails,

248
00:11:41,895 --> 00:11:44,941
pour ne pas tomber dans ce piège,
lorsqu'on débute avec

249
00:11:44,941 --> 00:11:47,690
la programmation des boucles "while" et
"do while".

250
00:11:47,690 --> 00:11:51,146
Vous connaissez désormais plusieurs façons
d'effectuer des traitements de

251
00:11:51,146 --> 00:11:53,360
façon répétitive, la boucle "for", la
boucle "do while",

252
00:11:53,360 --> 00:11:55,370
la boucle "while"; et la question va se
poser

253
00:11:55,370 --> 00:11:57,770
de savoir comment choisir entre l'une ou
l'autre des formes.

254
00:11:57,770 --> 00:11:59,720
En fait, le choix entre l'une ou l'autre
des formes,

255
00:11:59,720 --> 00:12:03,050
relève de principes relativement simple,
ce que nous allons voir maintenant.

256
00:12:03,050 --> 00:12:06,414
Comme nous l'avons vu dans l'introduction
de cette séquence, lorsque je

257
00:12:06,414 --> 00:12:10,126
connais mon nombre d'itérations, a priori,
le choix va naturellement se porter

258
00:12:10,126 --> 00:12:11,050
sur une boucle "for".

259
00:12:11,050 --> 00:12:13,450
Imaginez par exemple, que je souhaite
calculer, la moyenne

260
00:12:13,450 --> 00:12:15,450
des notes de tous les étudiants suivant ce
cours.

261
00:12:15,450 --> 00:12:17,210
Le nombre d'étudiants suivant ce cours est

262
00:12:17,210 --> 00:12:19,148
connu a priori, c'est lui qui va
constituer

263
00:12:19,148 --> 00:12:21,485
mon nombre d'itérations, et donc
naturellement, je

264
00:12:21,485 --> 00:12:23,370
vais porter mon choix sur une boucle
"for".

265
00:12:23,370 --> 00:12:27,374
Si je ne connais pas mon nombre
d'itérations, alors le choix va se

266
00:12:27,374 --> 00:12:29,779
porter sur une instruction, une boucle

267
00:12:29,779 --> 00:12:32,340
conditionnelle de type "while" ou "do
while".

268
00:12:32,340 --> 00:12:35,220
Alors, quand les instructions doivent être
effectuées au moins une fois,

269
00:12:35,220 --> 00:12:36,756
comme nous l'avons vu tout à l'heure, nous

270
00:12:36,756 --> 00:12:39,012
allons typiquement, utiliser plutôt une
boucle "do while".

271
00:12:39,012 --> 00:12:40,823
Alors dans quelles situations ça a lieu?

272
00:12:40,823 --> 00:12:43,514
Typiquement, un exemple très
fréquent, est

273
00:12:43,514 --> 00:12:46,459
celui de l'interaction avec l'utilisateur.
J'ai besoin

274
00:12:46,459 --> 00:12:48,125
de demander une valeur à l'utilisateur, et

275
00:12:48,125 --> 00:12:50,134
cette valeur doit répondre à certains
critères;

276
00:12:50,134 --> 00:12:52,110
et j'ai besoin que l'utilisateur
introduise au

277
00:12:52,110 --> 00:12:53,910
moins une fois cette valeur, avant de

278
00:12:53,910 --> 00:12:56,310
pouvoir tester si les critères sont
rencontrés,

279
00:12:56,310 --> 00:12:58,170
si la condition est satisfaite ou non.

280
00:12:58,170 --> 00:13:00,316
Et dans ce cas-là, je vais très
naturellement,

281
00:13:00,316 --> 00:13:02,164
porter mon choix sur une boucle "do
while".

282
00:13:02,164 --> 00:13:04,460
Dans toutes les autres situations, si je
n'exécute

283
00:13:04,460 --> 00:13:06,820
le traitement, que dans le cas où la
condition

284
00:13:06,820 --> 00:13:08,866
est vérifiée, et bien, j'ai recours à une

285
00:13:08,866 --> 00:13:11,836
boucle "while", avec évaluation de la
condition à priori.

286
00:13:11,836 --> 00:13:15,375
Examinons maintenant, comment il est
possible d'étoffer un petit

287
00:13:15,375 --> 00:13:19,351
peu notre exemple introductif en
améliorant un peu ses fonctionnalités.

288
00:13:19,351 --> 00:13:22,768
Par exemple ici, si l'utilisateur
introduit un nombre négatif

289
00:13:22,768 --> 00:13:25,408
ou nul, nous aimerions bien pouvoir lui
afficher un message

290
00:13:25,408 --> 00:13:27,852
lui signifiant que ce n'est pas ce que le
programme attend.

291
00:13:27,852 --> 00:13:30,608
Donc par exemple, si l'utilisateur
introduit -2, on aimerait

292
00:13:30,608 --> 00:13:34,000
pouvoir afficher : "il faut entrer un
nombre supérieur à 0".

293
00:13:34,000 --> 00:13:37,565
Cela éviterait l'entêtement qu'on a vu
dans le déroulement pas à pas,

294
00:13:37,565 --> 00:13:41,370
où l'utilisateur introduit plusieurs fois
des valeurs qui ne sont pas souhaitées.

295
00:13:41,370 --> 00:13:43,820
Donc comment procéder dans le cas présent?

296
00:13:43,820 --> 00:13:46,711
Alors ici, très clairement, ce message,
doit être

297
00:13:46,711 --> 00:13:50,675
affiché autant de fois que l'utilisateur
introduit un nombre

298
00:13:50,675 --> 00:13:55,550
non voulu, c'est-à-dire potentiellement,
autant de fois qu'il saisit une valeur.

299
00:13:55,550 --> 00:13:59,386
Donc il est assez naturel de penser tout
de suite à placer les

300
00:13:59,386 --> 00:14:02,274
instructions en charge d'afficher ce
message

301
00:14:02,274 --> 00:14:04,245
à l'intérieur du corps de la boucle.

302
00:14:04,245 --> 00:14:07,300
Donc typiquement, nous allons procéder
comme suit : nous

303
00:14:07,300 --> 00:14:10,715
allons enrichir le corps de la boucle de
nouvelles instructions.

304
00:14:10,715 --> 00:14:13,235
Donc une fois que l'utilisateur a saisi le
nombre de

305
00:14:13,235 --> 00:14:16,200
notes, nous allons tester si ce nombre de
notes correspond

306
00:14:16,200 --> 00:14:18,880
aux critères souhaités, et si cela n'est
pas le cas,

307
00:14:18,880 --> 00:14:23,200
il faudra afficher le message que nous
voulons transmettre à l'utilisateur.

308
00:14:23,200 --> 00:14:27,824
Une difficulté courante lorsqu'on commence
à écrire des boucles "while" et "do while"

309
00:14:27,824 --> 00:14:31,880
est sur comment formuler la condition
d'arrêt de la boucle de façon adéquate.

310
00:14:31,880 --> 00:14:35,600
Nous allons examiner sur quelques exemples
simples, comment procéder.

311
00:14:35,600 --> 00:14:38,347
Toujours dans notre exemple de saisie d'un
nombre

312
00:14:38,347 --> 00:14:41,362
de notes, nous imposions jusqu'ici à
l'utilisateur qu'il

313
00:14:41,362 --> 00:14:45,212
introduise un nombre supérieur à zéro, et
nous souhaitons maintenant faire

314
00:14:45,212 --> 00:14:47,448
en sorte que ce nombre aussi, ne dépasse
pas dix notes.

315
00:14:47,448 --> 00:14:50,726
Donc nous ne voulons pas qu'il introduise
un nombre plus grand que dix.

316
00:14:50,726 --> 00:14:55,000
Donc nous allons nous intéresser ici, à
comment trouver cette nouvelle condition.

317
00:14:55,000 --> 00:14:57,166
Le plus facile pour formuler la condition,
est

318
00:14:57,166 --> 00:14:59,731
sans doute d'essayer de l'exprimer en
langue naturelle.

319
00:14:59,731 --> 00:15:01,042
Que veut-on ici exactement?

320
00:15:01,042 --> 00:15:03,427
Nous voulons répéter les traitements,
donc, qui

321
00:15:03,427 --> 00:15:06,355
demandent à l'utilisateur d'introduire un
nombre de notes,

322
00:15:06,355 --> 00:15:08,406
tant que ce nombre de notes est incorrect.

323
00:15:08,406 --> 00:15:10,726
Or, ici, quand ce nombre de notes est-il
incorrect?

324
00:15:10,726 --> 00:15:12,826
Il peut l'être dans deux situations, soit
que

325
00:15:12,826 --> 00:15:15,784
l'utilisateur a introduit quelque chose
qui ne satisfait pas

326
00:15:15,784 --> 00:15:18,220
ce premier critère, soit qu'il a introduit
un nombre

327
00:15:18,220 --> 00:15:21,221
de notes, qui ne satisfait pas, ce second
critère.

328
00:15:21,221 --> 00:15:26,416
Donc, nous nous trouvons dans la situation
où le nombre de notes introduit est

329
00:15:26,416 --> 00:15:31,561
incorrect, dans le cas où l'utilisateur a
introduit quelque chose qui est inférieur

330
00:15:31,561 --> 00:15:36,160
ou égal à zéro, ou qu'il a introduit
quelque chose qui est supérieur à dix.

331
00:15:36,160 --> 00:15:39,715
Et ceci peut très naturellement se
transcrire en Java.

332
00:15:39,715 --> 00:15:43,584
Donc, nous allons reprendre notre première
phrase ici, s'il

333
00:15:43,584 --> 00:15:47,362
est inférieur ou égal à zéro, c'est
exactement ce que

334
00:15:47,362 --> 00:15:51,361
nous formulons là, OU, nous trouvons notre
OU ici, s'il

335
00:15:51,361 --> 00:15:54,862
est supérieur à dix, c'est ce que nous
formulons ici.

336
00:15:54,862 --> 00:15:56,776
Donc, nous voyons ici, que le passage

337
00:15:56,776 --> 00:16:00,742
d'une formulation en langue naturelle à
Java, peut se faire de façon très

338
00:16:00,742 --> 00:16:04,380
naturelle, une fois qu'on a clairement en
tête, ce que l'on veut tester.

339
00:16:04,380 --> 00:16:06,655
Dans le même esprit, imaginons maintenant,

340
00:16:06,655 --> 00:16:08,995
que l'on souhaite écrire un petit
programme

341
00:16:08,995 --> 00:16:12,615
qui a pour but de faire deviner un nombre
inconnu à un utilisateur.

342
00:16:12,615 --> 00:16:15,085
Donc, ici, pour simplifier la chose, nous
allons

343
00:16:15,085 --> 00:16:17,685
partir de l'idée qu'il doit deviner le
nombre cinq.

344
00:16:17,685 --> 00:16:21,898
Donc, l'idée est de répéter la saisie du
nombre, tant que l'utilisateur n'a

345
00:16:21,898 --> 00:16:23,770
pas trouvé le nombre à deviner.

346
00:16:23,770 --> 00:16:27,150
Donc la question que nous posons toujours
est: comment formuler la condition?

347
00:16:27,150 --> 00:16:29,535
Alors, comme nous avons fait dans
l'exemple précédent,

348
00:16:29,535 --> 00:16:32,655
nous allons commencer par le formuler en
langue

349
00:16:32,655 --> 00:16:35,592
naturelle : la boucle doit être répétée,
tant

350
00:16:35,592 --> 00:16:38,850
que l'utilisateur n'a pas trouvé le nombre
à deviner.

351
00:16:38,850 --> 00:16:44,130
Concrètement, tant que le nombre qu'il a
entré, est différent du nombre à deviner.

352
00:16:44,130 --> 00:16:46,950
Transcrivons maintenant cette formulation
en langage courant, en Java :

353
00:16:46,950 --> 00:16:48,510
tant que le nombre entré est différent

354
00:16:48,510 --> 00:16:54,400
du nombre à deviner, s'écrit en Java,
comme ceci.

355
00:16:54,400 --> 00:16:57,487
Encore un exemple où le passage de la
formulation en langue

356
00:16:57,487 --> 00:17:00,290
courante à Java, se fait de façon tout à
fait naturelle.

357
00:17:00,290 --> 00:17:03,482
Sophistiquons maintenant un peu ce même
exemple, imaginons que l'on

358
00:17:03,482 --> 00:17:07,187
souhaite toujours faire deviner un nombre
à l'utilisateur, mais qu'on souhaite

359
00:17:07,187 --> 00:17:09,933
lui donner un nombre limité d'essais, donc
s'il n'a pas trouvé

360
00:17:09,933 --> 00:17:12,053
au bout de tant de tentatives, on arrête,
on lui dit

361
00:17:12,053 --> 00:17:12,645
qu'il a perdu.

362
00:17:12,645 --> 00:17:15,725
Donc comment modifier la condition, pour,
par exemple

363
00:17:15,725 --> 00:17:19,232
que la boucle s'arrête si l'utilisateur
dépasse trois tentatives.

364
00:17:19,232 --> 00:17:21,030
Comment formuler cette condition?

365
00:17:21,030 --> 00:17:24,830
Alors ici, l'idée est d'avoir recours
naturellement, à un compteur d'essais,

366
00:17:24,830 --> 00:17:28,820
nous allons compter le nombre de
tentatives, ce compteur,

367
00:17:28,820 --> 00:17:32,400
va s'incrémenter à chaque itération de la
boucle, et donc nous

368
00:17:32,400 --> 00:17:36,940
allons essayer de formuler la condition,
aussi, dépendamment de ce compteur.

369
00:17:36,940 --> 00:17:39,260
Toujours le même principe, on essaie de
formuler

370
00:17:39,260 --> 00:17:42,300
cette condition en langue naturelle: on
veut répéter le

371
00:17:42,300 --> 00:17:46,080
traitement tant que l'utilisateur n'a pas
trouvé le

372
00:17:46,080 --> 00:17:49,512
nombre à deviner, et qu'il lui reste des
essais.

373
00:17:49,512 --> 00:17:52,802
Donc, on affine un petit peu la
description,

374
00:17:52,802 --> 00:17:55,820
donc en clair que veut dire cette
condition?

375
00:17:55,820 --> 00:17:58,628
On itère, on répète les traitements, tant
que

376
00:17:58,628 --> 00:18:01,870
le nombre entré est différent du nombre à
deviner,

377
00:18:01,870 --> 00:18:05,746
et que, le nombre d'essais est inférieur à
trois.

378
00:18:05,746 --> 00:18:08,800
Si j'essaye de transcrire en Java, cela 

379
00:18:08,800 --> 00:18:11,542
se fait de façon toujours aussi naturelle.
Donc ici, ma

380
00:18:11,542 --> 00:18:14,942
première condition: tant que le nombre
entré est différent

381
00:18:14,942 --> 00:18:18,300
du nombre à deviner, va s'écrire tout
simplement comme ceci.

382
00:18:18,300 --> 00:18:21,360
Mon "et", va s'écrire comme ceci, et ma
seconde

383
00:18:21,360 --> 00:18:26,080
condition va pouvoir être rédigée sous
cette forme-là, en Java.

384
00:18:26,080 --> 00:18:26,944
Notre utilisateur

385
00:18:26,944 --> 00:18:29,158
a désormais deux façons possibles de
sortir de la

386
00:18:29,158 --> 00:18:31,156
boucle, il peut sortir de la boucle parce
qu'il

387
00:18:31,156 --> 00:18:33,100
a trouvé le nombre à deviner, le nombre
entré

388
00:18:33,100 --> 00:18:35,432
a la même valeur que le nombre à
deviner.

389
00:18:35,432 --> 00:18:39,812
Dans ce cas-ci, l'évaluation de cette
condition va retourner "false", comme

390
00:18:39,812 --> 00:18:43,270
l'expression globale implique un "et", et
que, il suffit qu'un des

391
00:18:43,270 --> 00:18:46,924
arguments du "et" soit faux, pour que
l'ensemble de l'expression retourne

392
00:18:46,924 --> 00:18:49,660
"false", et bien, on va sortir à ce
moment-là de la boucle.

393
00:18:49,660 --> 00:18:52,412
Autre condition de sortie possible:
l'utilisateur

394
00:18:52,412 --> 00:18:54,780
a effectué un nombre d'essais pour deviner
le

395
00:18:54,780 --> 00:18:57,310
nombre, qui va dépasser ou devenir égal à
trois.

396
00:18:57,310 --> 00:19:01,824
Donc on aimerait bien maintenant,
sophistiquer un petit peu le programme,

397
00:19:01,824 --> 00:19:04,831
en lui indiquant, pour quelle raison il
est sorti de cette boucle.

398
00:19:04,831 --> 00:19:07,232
Est-il sorti parce qu'il a trouvé le
nombre, dans ce cas-là, on

399
00:19:07,232 --> 00:19:10,780
veut lui signifier qu'il a gagné, ou
est-il sorti en état d'échec?

400
00:19:10,780 --> 00:19:16,530
Il n'a pas trouvé le nombre en ayant
dépassé le nombre de tentatives permises.

401
00:19:16,530 --> 00:19:17,520
Ce n'est en fait qu'une

402
00:19:17,520 --> 00:19:19,050
fois qu'on est sorti de la boucle qu'on
peut

403
00:19:19,050 --> 00:19:20,805
essayer de voir pourquoi on en est sorti,
donc on

404
00:19:20,805 --> 00:19:24,319
va placer l'instruction qui teste pourquoi
on est sorti de

405
00:19:24,319 --> 00:19:27,214
la boucle, après la fin de la boucle "do
while".

406
00:19:27,214 --> 00:19:30,520
Donc ici, on va simplement tester est-on
sorti

407
00:19:30,520 --> 00:19:32,332
de la boucle, alors qu'on a trouvé le

408
00:19:32,332 --> 00:19:33,900
nombre à deviner, dans ce cas-là on peut

409
00:19:33,900 --> 00:19:35,958
signifier à l'utilisateur qu'il a bel et
bien trouvé.

410
00:19:35,958 --> 00:19:39,370
Et bien, dans l'autre cas, il faudra lui
dire simplement qu'il a perdu.

411
00:19:39,370 --> 00:19:43,330
Notez ici, que nous avons, à deux
reprises,

412
00:19:43,330 --> 00:19:46,537
l'évaluation de la même condition : est-ce
qu'on a

413
00:19:46,537 --> 00:19:48,916
trouvé le nombre ou est-ce qu'on ne l'a
pas trouvé?

414
00:19:48,916 --> 00:19:52,890
Dans deux situations différentes, une fois
dans le "if" et une fois dans le "while".

415
00:19:52,890 --> 00:19:57,168
Il aurait été judicieux, en guise de
bonnes pratiques, de regrouper ces deux

416
00:19:57,168 --> 00:20:01,609
conditions en une seule variable.
Par exemple ici, je pourrais déclarer, une

417
00:20:01,609 --> 00:20:08,692
variable booléenne "trouvee", initialisée à
l'origine à "false", à l'intérieur

418
00:20:08,692 --> 00:20:15,000
de la boucle, donner pour valeur à la
variable : "le nombre entré

419
00:20:15,000 --> 00:20:20,840
est le même que le nombre à deviner", et à
ce moment-là, je peux

420
00:20:20,840 --> 00:20:25,010
remplacer cette condition-là, simplement
par l'expression !trouvee.

421
00:20:25,010 --> 00:20:26,726
Tant que l'on n'a pas

422
00:20:26,726 --> 00:20:30,860
trouvé, et que le nombre d'essais est
inférieur à trois, on continue à boucler.

423
00:20:30,860 --> 00:20:34,400
De même, on pourrait remplacer ici, cette
condition,

424
00:20:34,400 --> 00:20:35,960
par l'évaluation de "if (trouve)".

425
00:20:35,960 --> 00:20:39,835
Et à ce moment-là on établit un lien entre
deux conditions qui sont les

426
00:20:39,835 --> 00:20:43,850
mêmes, alors que à l'origine, ce lien
n'existait pas, ce qui est moins bon.

427
00:20:43,850 --> 00:20:46,888
Alors il faut être attentif à la façon de
formuler ces tests.

428
00:20:46,888 --> 00:20:48,376
On peut les formuler de façon

429
00:20:48,376 --> 00:20:51,807
maladroite et rencontrer, donc des erreurs
d'exécution.

430
00:20:51,807 --> 00:20:56,047
Ici, par exemple, imaginez que pour tester
qu'on a bien deviné le nombre,

431
00:20:56,047 --> 00:20:59,773
on teste que l'on n'a pas dépassé le nombre
d'essais de cette façon-là,

432
00:20:59,773 --> 00:21:03,940
et bien, ce qui va se passer ici, c'est
que le cas où l'utilisateur a trouvé le

433
00:21:03,940 --> 00:21:08,352
nombre au bout de trois tentatives, va
simplement désormais

434
00:21:08,352 --> 00:21:12,141
passer pour un échec, puisque, cette
condition-ci ne va

435
00:21:12,141 --> 00:21:13,875
pas être vérifiée, alors qu'on a quand
même

436
00:21:13,875 --> 00:21:16,017
trouvé le nombre au bout de la troisième
tentative,

437
00:21:16,017 --> 00:21:17,904
et donc on va signifier à l'utilisateur
qu'il a

438
00:21:17,904 --> 00:21:20,124
perdu, alors qu'en réalité il a fini par
trouver.

439
00:21:20,124 --> 00:21:22,108
Donc ceci pour dire qu'il est important

440
00:21:22,108 --> 00:21:24,808
de bien réfléchir à comment formuler la
condition,

441
00:21:24,808 --> 00:21:26,304
et le fait de la formuler de

442
00:21:26,304 --> 00:21:29,050
façon explicite, comme tout à l'heure, par
rapport

443
00:21:29,050 --> 00:21:31,642
au nombre à deviner, permet d'éviter
l'écueil

444
00:21:31,642 --> 00:21:37,465
que nous venons de décrire dans l'exemple
précédent.

