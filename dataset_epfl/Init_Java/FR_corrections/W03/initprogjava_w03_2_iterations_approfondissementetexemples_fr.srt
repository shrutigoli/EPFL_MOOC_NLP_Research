1
00:00:00,000 --> 00:00:05,704
Commençons cette vidéo, avec des exemples
d'autres

2
00:00:05,704 --> 00:00:10,711
formes de «boucles for».
Cette «boucle for» commence par

3
00:00:10,711 --> 00:00:15,406
déclarer une variable p et l'initialise à
zéro.

4
00:00:15,406 --> 00:00:22,015
La condition est «p strictement inférieur
à 10» et l'instruction de l'incrémentaion

5
00:00:22,015 --> 00:00:25,015
est «p += 2». Et je vous rappelle
qu'écrire «p += 2»,

6
00:00:25,015 --> 00:00:29,448
c'est équivalent à écrire 
«p = p + 2», c'est-à-dire

7
00:00:29,448 --> 00:00:33,660
qu'on va ajouter 2 à la variable p, à
chaque tour de boucle.

8
00:00:33,660 --> 00:00:35,633
p va donc, commencer à la valeur 0.

9
00:00:35,633 --> 00:00:37,580
À la fin du premier tour de boucle, on va

10
00:00:37,580 --> 00:00:40,460
ajouter 2 à p ; p va, donc, prendre la
valeur 2.

11
00:00:40,460 --> 00:00:45,534
Ensuite, p va prendre la valeur 4.
Ainsi de suite, jusqu'à ce

12
00:00:45,534 --> 00:00:50,540
que p prenne la valeur 10.
Dans ce cas, la condition devient fausse,

13
00:00:50,540 --> 00:00:54,940
et on va sortir de la boucle.
Donc, dans ce cas, p va prendre les

14
00:00:54,940 --> 00:01:01,426
valeurs 0, 2, 4, 6 et 8.
Dans ce deuxième

15
00:01:01,426 --> 00:01:07,900
exemple, on commence par déclarer une
variable k initialisée à 10.

16
00:01:07,900 --> 00:01:09,964
La condition est «k > 0».

17
00:01:09,964 --> 00:01:12,985
Donc, faites attention, on a changé le
sens de comparaison, ici.

18
00:01:12,985 --> 00:01:15,823
Et l'instruction d'incrémentation

19
00:01:15,823 --> 00:01:19,908
est «--k», qui est équivalent à
écrire «k = k -1»,

20
00:01:19,908 --> 00:01:23,673
c'est-à-dire qu'on va retrancher 1 à la
variable k, à

21
00:01:23,673 --> 00:01:28,595
chaque tour de boucle.
k part donc, de la valeur 10.

22
00:01:28,595 --> 00:01:34,477
À la fin du premier tour de boucle, k vaut
9, ensuite 8,

23
00:01:34,477 --> 00:01:38,315
ainsi de suite, jusqu'à ce que k prenne la
valeur 0.

24
00:01:38,315 --> 00:01:41,460
Dans ce cas, la condition devient fausse,

25
00:01:41,460 --> 00:01:46,412
et on sort de la boucle.
Donc k, dans cet exemple, va prendre

26
00:01:46,412 --> 00:01:51,260
la valeur 10, 9, 8, ..., jusqu'à 1.

27
00:01:51,260 --> 00:01:57,280
Dans ce dernier exemple, on commence par
déclarer

28
00:01:57,280 --> 00:02:02,140
une variable i, initialisée à 0.
La condition est

29
00:02:02,140 --> 00:02:06,946
«i ≥ 0», et l'instruction d'incrémentation

30
00:02:06,946 --> 00:02:09,550
est «++i» qui va ajouter 1 à chaque

31
00:02:09,550 --> 00:02:13,202
tour de boucle.
i commence donc, à la valeur 0.

32
00:02:13,202 --> 00:02:16,082
Ensuite, i va prendre la valeur 1.

33
00:02:16,082 --> 00:02:18,390
La condition va être vraie.

34
00:02:18,390 --> 00:02:21,968
Et ensuite, i va donc prendre
la valeur 2.

35
00:02:21,968 --> 00:02:26,096
La condition va être toujours vraie.
Et en fait, dans ce

36
00:02:26,096 --> 00:02:30,248
cas, la condition sera toujours vraie, du
moins dans le principe.

37
00:02:30,248 --> 00:02:32,305
Et on ne va jamais sortir de la boucle.

38
00:02:32,305 --> 00:02:34,243
Alors, pourquoi «du moins dans le principe» ?

39
00:02:34,243 --> 00:02:35,926
Pour des raisons techniques, que je ne

40
00:02:35,926 --> 00:02:38,775
vais pas vous détailler, ce n'est pas
complètement vrai,

41
00:02:38,775 --> 00:02:43,820
mais on va tout de même répéter la
boucle un très grand nombre de fois.

42
00:02:43,820 --> 00:02:51,230
Une «boucle for» peut donc ne pas s'arrêter,
si la condition est toujours vraie.

43
00:02:51,230 --> 00:02:53,487
Alors, plusieures causes sont possibles.

44
00:02:53,487 --> 00:02:57,330
Comme dans l'exemple précédent, peut-être
qu'on s'est trompé sur la

45
00:02:57,330 --> 00:02:58,640
condition, comme ici.

46
00:02:58,640 --> 00:03:02,414
Alors, encore une fois, ce n'est pas
complètement vrai.

47
00:03:02,414 --> 00:03:06,195
Dans, dans un tel cas, on va tout de même
sortir de la boucle, pour

48
00:03:06,195 --> 00:03:08,725
des raisons techniques qu'on ne va pas
détailler ici,

49
00:03:08,725 --> 00:03:11,330
mais après un très grand nombre
d'itérations.

50
00:03:11,330 --> 00:03:17,472
Une deuxième erreur possible, est de se
tromper sur l'incrémentation.

51
00:03:17,472 --> 00:03:21,277
Par exemple, ici, ma condition est sur la
variable i.

52
00:03:21,277 --> 00:03:23,149
Et je me suis trompé,

53
00:03:23,149 --> 00:03:28,670
j'incrémente la variable j.
Comme i est initialisée à 0,

54
00:03:28,670 --> 00:03:33,650
cette condition va toujours être vraie, et
on ne va jamais sortir de la boucle.

55
00:03:33,650 --> 00:03:38,450
Passons, maintenant, à quelques erreurs
commises fréquemment par les débutants.

56
00:03:38,450 --> 00:03:41,798
Notez, tout d'abord, qu'il n'y a pas de
point-virgule à la

57
00:03:41,798 --> 00:03:44,216
fin de la ligne qui commence par le mot
clé «for»,

58
00:03:44,216 --> 00:03:47,984
c'est-à-dire qu'il n'y a pas de
point-virgule,

59
00:03:47,984 --> 00:03:48,419
ici.

60
00:03:48,419 --> 00:03:51,950
Mais il se trouve que le compilateur va
accepter

61
00:03:51,950 --> 00:03:55,702
votre programme, si vous mettez tout de
même un point-virgule.

62
00:03:55,702 --> 00:03:59,812
Mais votre programme va se comporter de
façon un peu surprenante.

63
00:03:59,812 --> 00:04:03,508
Plus exactement, avec le point-virgule, ce
code

64
00:04:03,508 --> 00:04:06,894
va n'afficher qu'une seule fois le mot
"bonjour".

65
00:04:06,894 --> 00:04:08,016
Alors, pourquoi ?

66
00:04:08,016 --> 00:04:13,205
C'est parce qu'en fait, le point-virgule
que j'ai mis, ici, va être

67
00:04:13,205 --> 00:04:19,233
considéré comme l'instruction vide, une
instruction qui ne fait rien.

68
00:04:19,233 --> 00:04:23,440
Et ce code va être interprété de la façon
suivante,

69
00:04:23,440 --> 00:04:30,085
c'est-à-dire que seul le point-virgule se
trouve à l'intérieur de la boucle.

70
00:04:30,085 --> 00:04:34,098
Cette boucle va donc répéter dix fois
l'instruction vide,

71
00:04:34,098 --> 00:04:36,190
c'est-à-dire ne rien faire.

72
00:04:36,190 --> 00:04:38,236
L'instruction de l'affichage qui

73
00:04:38,236 --> 00:04:41,074
est, ici, se trouve, en fait, à
l'extérieur de

74
00:04:41,074 --> 00:04:44,693
la boucle, et va donc n'être exécutée
qu'une seule fois.

75
00:04:44,693 --> 00:04:48,510
Et donc, ce code affiche une seule fois,
le mot "bonjour".

76
00:04:48,510 --> 00:04:53,110
Il faut, également, fait attention aux
accolades.

77
00:04:53,110 --> 00:04:57,504
Par exemple, ce code-ci peut produire cet
affichage ;

78
00:04:57,504 --> 00:05:01,800
c'est-à-dire que cette instruction va être
répétée cinq fois,

79
00:05:01,800 --> 00:05:03,640
mais cette instruction

80
00:05:03,640 --> 00:05:07,945
va n'être exécutée qu'une seule fois.
Alors, pourquoi ?

81
00:05:07,945 --> 00:05:11,648
Parce que ce code va être interprété de la
façon suivante ;

82
00:05:11,648 --> 00:05:16,594
c'est-à-dire que cette instruction est à
l'intérieur de la boucle,

83
00:05:16,594 --> 00:05:20,480
mais celle-ci est en dehors de la boucle.

84
00:05:20,480 --> 00:05:25,856
Attention, donc ! L'indentation,
c'est-à-dire le fait de déplacer

85
00:05:25,856 --> 00:05:29,349
ces deux lignes sur la droite, ici,
ne suffit pas

86
00:05:29,349 --> 00:05:33,520
à faire que les deux instructions
soient dans la boucle.

87
00:05:33,520 --> 00:05:39,280
Si je veux mettre les deux instructions
dans la boucle, il me faut mettre

88
00:05:39,280 --> 00:05:43,369
une accolade ouvrante avant la première
instruction,

89
00:05:43,369 --> 00:05:46,748
une accolade fermante après la dernière
instruction.

90
00:05:46,748 --> 00:05:55,370
Et dans ce cas-là, j'obtiendrai
l'affichage i égal zéro, Bonjour, i égal

91
00:05:55,370 --> 00:06:01,470
un, Bonjour, et cetera.

92
00:06:01,470 --> 00:06:07,477
Evitez, également, de modifier la valeur
de la variable qui permet

93
00:06:07,477 --> 00:06:12,426
de contrôler le nombre de tours de boucle,
à l'intérieur du corps de la boucle ;

94
00:06:12,426 --> 00:06:16,412
c'est-à-dire, évitez de faire comme dans
cet exemple, où j'ai

95
00:06:16,412 --> 00:06:20,642
commencé par déclarer une variable i, et
l'initialiser à zéro,

96
00:06:20,642 --> 00:06:26,750
que j'utilise dans la condition et dans
l'instruction d'incrémentation, et que

97
00:06:26,750 --> 00:06:32,694
je modifie également, cette variable i, à
l'intérieur du corps de la boucle.

98
00:06:32,694 --> 00:06:37,001
Alors, pourquoi il faut éviter de faire ce
genre de choses ?

99
00:06:37,001 --> 00:06:41,746
C'est parce que premièrement, ça ne fera
sans doute pas ce que vous voulez.

100
00:06:41,746 --> 00:06:47,000
N'oubliez-pas que la «boucle for», avec
l'instruction d'incrémentation,

101
00:06:47,000 --> 00:06:50,440
va de son côté, modifier la valeur de la
variable i.

102
00:06:50,440 --> 00:06:55,135
Et deuxièmement, ça va être difficile,
pour un relecteur humain,

103
00:06:55,135 --> 00:06:57,838
de comprendre ce que fait le programme,
puisqu'il ne va pas

104
00:06:57,838 --> 00:07:01,846
forcément s'attendre à ce que la variable
définie, déclarée dans

105
00:07:01,846 --> 00:07:06,490
la «boucle for», soit modifiée dans le corps
de la boucle.

106
00:07:06,490 --> 00:07:09,006
Passons, maintenant, à un exemple qui est

107
00:07:09,006 --> 00:07:12,270
très représentatif de problèmes qu'on peut
rencontrer

108
00:07:12,270 --> 00:07:13,600
avec des «boucles for».

109
00:07:13,600 --> 00:07:17,188
Cet exemple consiste à écrire un programme
qui demande quatre

110
00:07:17,188 --> 00:07:21,196
notes à l'utlisateur, et affiche la
moyenne de ces quatre notes.

111
00:07:21,196 --> 00:07:26,310
Sans utiliser de «boucle for», je pourrais
écrire mon programme de la façon suivante ;

112
00:07:26,310 --> 00:07:31,770
c'est-à-dire répéter quatre fois ces deux
instructions qui demandent à l'utilisateur

113
00:07:31,770 --> 00:07:37,340
d'entrer une valeur et mettre la valeur
entrée par l'utilisateur

114
00:07:37,340 --> 00:07:41,560
dans une variable.
Ma première variable s'appelle «note1».

115
00:07:41,560 --> 00:07:45,304
Ensuite, j'ai «note2», 3 et 4.

116
00:07:45,304 --> 00:07:49,535
Arrivés à ce stade du programme, les
variables «note1»,

117
00:07:49,535 --> 00:07:54,670
2, 3 et 4 contiennent les quatre valeurs
entrées par l'utilisateur.

118
00:07:54,670 --> 00:07:59,289
Je peux calculer leur somme, mettre le

119
00:07:59,289 --> 00:08:02,237
résultat dans une variable que j'ai appelé
«somme».

120
00:08:02,237 --> 00:08:07,682
Il ne me reste plus qu'à diviser somme
par 4 pour obtenir la moyenne.

121
00:08:07,682 --> 00:08:12,993
Maintenant, le fait que j'ai dû utiliser
quatre variables différentes

122
00:08:12,993 --> 00:08:18,550
pour chacune des quatre notes, m'empèche
d'introduire directement une «boucle for».

123
00:08:18,550 --> 00:08:22,906
Je vais, donc, commencer par réécrire ce
code, en

124
00:08:22,906 --> 00:08:27,635
utilisant qu'une seule variable pour
l'ensemble des quatre notes.

125
00:08:27,635 --> 00:08:31,020
Donc, ce nouveau code va s'écrire de la
façon suivante.

126
00:08:31,020 --> 00:08:35,275
J'ai, ici, toujours la variable «somme».

127
00:08:35,275 --> 00:08:40,138
Je demande à l'utilisateur d'entrer une
première valeur

128
00:08:40,138 --> 00:08:44,740
que je vais stocker dans la variable «note».

129
00:08:44,740 --> 00:08:50,050
J'ai maintenant, ensuite, cette
affectation «somme = somme...

130
00:08:50,050 --> 00:08:53,249
... + note», que je vais détailler
dans un instant.

131
00:08:53,249 --> 00:08:57,956
Et je vais répéter, cette fois-ci,
toujours ce code, en utilisant à chaque

132
00:08:57,956 --> 00:09:04,490
fois, la même variable note pour stocker
la valeur entrée par l'utilisateur.

133
00:09:04,490 --> 00:09:07,160
Et nous allons voir que, à ce stade

134
00:09:07,160 --> 00:09:12,088
du programme, la variable «somme» contient
effectivement la somme

135
00:09:12,088 --> 00:09:14,949
des quatre notes, et il me suffit de
diviser

136
00:09:14,949 --> 00:09:18,399
somme comme avant, par quatre, pour
obtenir la moyenne.

137
00:09:18,399 --> 00:09:22,884
Donc, je vais maintenant, détailler cette
nouvelle version du code, pour

138
00:09:22,884 --> 00:09:26,610
vérifier que je fais bien la même chose
que la première version.

139
00:09:26,610 --> 00:09:31,470
Pour vérifier cette nouvelle version,
supposons que l'utilisateur

140
00:09:31,470 --> 00:09:35,005
entre les notes 5, 4, 6 et 4.

141
00:09:35,005 --> 00:09:42,515
Le programme commence par déclarer une
variable «somme» et l'initialiser à 0.

142
00:09:42,515 --> 00:09:43,730
On passe,

143
00:09:43,730 --> 00:09:46,326
ensuite, à cette instruction-ci, qui
affiche un

144
00:09:46,326 --> 00:09:49,950
message invitant l'utilisateur à rentrer
une valeur.

145
00:09:49,950 --> 00:09:53,065
Cette valeur va être lue au clavier,

146
00:09:53,065 --> 00:09:55,795
et stockée dans la variable «note» déclarée,
ici.

147
00:09:55,795 --> 00:09:58,770
Et j'ai dit que la première valeur
serait 5.

148
00:09:58,770 --> 00:10:04,060
On passe, ensuite, à cette affectation qui
consiste

149
00:10:04,060 --> 00:10:08,854
à calculer d'abord la valeur de
«somme + note».

150
00:10:08,854 --> 00:10:12,170
Somme vaut 0.
Note vaut 5.

151
00:10:12,170 --> 00:10:16,850
Et la valeur de cette expression
est donc 5.

152
00:10:16,850 --> 00:10:23,500
Cette valeur va être mise dans la variable
«somme».

153
00:10:23,500 --> 00:10:29,238
On passe, ensuite, à la deuxième note
entrée par l'utilisateur.

154
00:10:29,238 --> 00:10:32,240
Et j'ai supposé que c'était la valeur 4.

155
00:10:32,240 --> 00:10:33,968
Cette affectation

156
00:10:33,968 --> 00:10:39,622
va, donc, calculer d'abord cette
expression, c'est-à-dire «somme»

157
00:10:39,622 --> 00:10:45,497
qui vaut maintenant 5, «+ note», qui
vaut 4,

158
00:10:45,497 --> 00:10:52,150
obtenir la valeur 9, et cette valeur va
être stockée dans la variable «somme».

159
00:10:54,700 --> 00:10:59,208
Passons à la troisième note qui vaut,
maintenant, 6.

160
00:10:59,208 --> 00:11:04,851
Cette expression va, donc maintenant,
valoir 9 plus 6,

161
00:11:04,851 --> 00:11:10,970
c'est-à-dire 15, et on va mettre le
résultat dans «somme».

162
00:11:10,970 --> 00:11:14,922
Et vous pouvez vous convaincre qu'à ce
stade

163
00:11:14,922 --> 00:11:19,728
du programme, «somme» va contenir 5
plus 4,

164
00:11:19,728 --> 00:11:24,936
plus 6, plus 4,
c'est-à-dire, bien la

165
00:11:24,936 --> 00:11:30,250
somme de toutes les notes, et on va
obtenir 19.

166
00:11:30,250 --> 00:11:33,412
Et cette instruction-là, va donc bien

167
00:11:33,412 --> 00:11:37,350
afficher la moyenne des quatre valeurs
entrées.

168
00:11:37,350 --> 00:11:41,484
Cette nouvelle version va rendre plus
facile l'introduction

169
00:11:41,484 --> 00:11:44,916
d'une «boucle for», pour éviter la
répétition de ces

170
00:11:44,916 --> 00:11:48,532
trois instructions qui sont donc, répétées
quatre fois

171
00:11:48,532 --> 00:11:51,725
dans le programme, une fois pour chacune
des notes.

172
00:11:51,725 --> 00:11:54,330
Je vais, donc, mettre ces trois
instructions

173
00:11:54,330 --> 00:11:57,522
à l'intérieur d'une «boucle for», comme
ainsi.

174
00:11:57,522 --> 00:11:59,585
C'est ce que j'ai fait, ici.

175
00:11:59,585 --> 00:12:04,840
Ma «boucle for» va utiliser une variable qui
va varier entre 1 et 4.

176
00:12:04,840 --> 00:12:11,032
Et donc, ce programme-ci est équivalent au
programme précédent.

177
00:12:11,032 --> 00:12:14,540
C'est ce que je peux vérifier, très
rapidement, sur un exemple.

178
00:12:14,540 --> 00:12:19,189
Il ne faut pas que j'oublie d'initialiser
la variable «somme» à 0.

179
00:12:19,189 --> 00:12:21,133
C'est ce que j'ai fait, ici.

180
00:12:21,133 --> 00:12:25,965
Au premier tour de boucle, i vaut 1.
Supposons, comme avant, que

181
00:12:25,965 --> 00:12:30,943
la première note entrée par l'utilisateur
soit la valeur 5.

182
00:12:30,943 --> 00:12:36,140
Cette instruction va, donc, mettre la
valeur 5 dans ma variable «note».

183
00:12:36,140 --> 00:12:38,876
Quand je passe à cette affectation, cette

184
00:12:38,876 --> 00:12:42,857
affectation va calculer la valeur de cette
expression,

185
00:12:42,857 --> 00:12:47,384
c'est-à-dire, comme avant, «somme», 0,
«+ note»,

186
00:12:47,384 --> 00:12:49,592
c'est-à-dire 5.

187
00:12:49,592 --> 00:12:53,689
On va obtenir la valeur 5 pour cette
expression.

188
00:12:53,689 --> 00:12:58,020
L'affectation va mettre cette valeur dans
la variable «somme» ;

189
00:12:58,020 --> 00:13:00,990
c'est-à-dire qu'on va remplacer le 0,
ici,

190
00:13:00,990 --> 00:13:04,789
par, par la valeur 5, et on obtient,
donc, exactement le même

191
00:13:04,789 --> 00:13:09,510
mécanisme que dans ma deuxième version,
mais cette fois-ci, avec une «boucle for».

192
00:13:09,510 --> 00:13:14,725
Et à ce stade du programme, la variable
somme contiendra

193
00:13:14,725 --> 00:13:19,520
la somme des quatre valeurs entrées par
l'utilisateur.

194
00:13:19,520 --> 00:13:23,414
Supposons, maintenant, qu'on veuille
laisser l'utilisateur choisir le

195
00:13:23,414 --> 00:13:25,955
nombre de notes dont il veut calculer la
moyenne.

196
00:13:25,955 --> 00:13:28,412
Comment faut-il modifier notre programme ?

197
00:13:28,412 --> 00:13:31,058
Alors, je vais d'abord introduire une
variable

198
00:13:31,058 --> 00:13:33,692
que j'ai appelé «nombre_de_notes», ici.

199
00:13:33,692 --> 00:13:37,784
J'ai d'abord, ici, un message d'invite,
pour

200
00:13:37,784 --> 00:13:41,512
inviter l'utilisateur à entrer le nombre
de notes.

201
00:13:41,512 --> 00:13:45,430
Et avec cette instruction, je vais lire au
clavier, la valeur qui

202
00:13:45,430 --> 00:13:50,920
était rentrée, et mettre la valeur rentrée
dans ma variable «nombre_de_notes».

203
00:13:50,920 --> 00:13:56,632
Je n'ai maintenant, plus qu'à modifier ce
4 par ma variable «nombre_de_notes», 

204
00:13:56,632 --> 00:14:02,684
ainsi que ce 4 ci, qui me
permet de calculer la moyenne

205
00:14:02,684 --> 00:14:08,890
des notes entrées.
Voilà, c'était assez facile.

206
00:14:08,890 --> 00:14:12,410
J'ai maintenant, un programme plus
générique qui

207
00:14:12,410 --> 00:14:15,981
va fonctionner pour n'importe quel nombre
de notes.

208
00:14:15,981 --> 00:14:21,020
Sauf que, je viens d'introduire un bug.
Alors, où est ce bug, à votre avis ?

209
00:14:21,020 --> 00:14:27,656
Le bug peut survenir, va survenir quand
l'utilisateur

210
00:14:27,656 --> 00:14:30,278
entre la valeur 0 pour le nombre de
notes.

211
00:14:30,278 --> 00:14:35,168
Donc, si je ne fais pas attention, ici, je
vais diviser par 0.

212
00:14:35,168 --> 00:14:39,012
Alors, pour éviter ça, il y a plusieurs
solutions.

213
00:14:39,012 --> 00:14:40,984
Une solution possible, c'est de

214
00:14:40,984 --> 00:14:43,918
tester, avant de faire le calcul de la
moyenne, si

215
00:14:43,918 --> 00:14:46,162
le nombre de notes est égal à 0 ou pas.

216
00:14:46,162 --> 00:14:49,740
Alors, je peux modifier mon programme, de
cette façon, ici,

217
00:14:49,740 --> 00:14:55,291
c'est-à-dire que j'ai ajouté un
branchement conditionnel, qui va

218
00:14:55,291 --> 00:14:58,635
tester si le nombre de notes est positif,
strictement,

219
00:14:58,635 --> 00:15:01,387
c'est-à-dire, qu'il n'est pas égal à 0.

220
00:15:01,387 --> 00:15:06,480
Dans ce cas-là, et bien je vais faire le
calcul, comme précédemment.

221
00:15:06,480 --> 00:15:10,550
Et puis je n'ai plus qu'à fermer
l'accolade, ici.

222
00:15:10,550 --> 00:15:13,878
Et donc, si le nombre de notes est égal

223
00:15:13,878 --> 00:15:18,170
à 0, je ne vais pas exécuter cette
division.

224
00:15:18,170 --> 00:15:24,616
Terminons par ce qu'on appelle les boucles
imbriquées.

225
00:15:24,616 --> 00:15:27,577
Alors, pour cela, je vais revenir sur
l'exemple de la

226
00:15:27,577 --> 00:15:31,596
table de multiplication par 5, qui a
utilisé cette «boucle for»

227
00:15:31,596 --> 00:15:36,974
pour afficher la table de 5.
Et je vais supposer, maintenant, que je

228
00:15:36,974 --> 00:15:42,970
veuille afficher toutes les tables de
multiplication de 2 jusqu'à 10.

229
00:15:42,970 --> 00:15:49,295
Et bien, il me suffit de mettre ce code à
l'intérieur d'une autre «boucle for»,

230
00:15:49,295 --> 00:15:55,182
et de le modifier légèrement pour obtenir
l'ensemble des tables de 2 jusqu'à 10.

231
00:15:55,182 --> 00:15:56,678
Alors, je vais commencer

232
00:15:56,678 --> 00:16:00,480
par mettre ce code, tout simplement, dans
une «boucle for».

233
00:16:00,480 --> 00:16:02,775
C'est ce que j'ai fait, ici.

234
00:16:02,775 --> 00:16:05,499
Ici, j'ai recopié le code précédent.

235
00:16:05,499 --> 00:16:10,905
Donc, celui qui m'affiche la table de
multiplication par 5, que j'ai

236
00:16:10,905 --> 00:16:16,418
mis dans une autre «boucle for», ici,
qui va faire varier une variable

237
00:16:16,418 --> 00:16:22,015
j de 2 jusqu'à 10.
Donc, j va prendre neuf valeurs,

238
00:16:22,015 --> 00:16:23,460
de 2 à 10.

239
00:16:23,460 --> 00:16:27,700
Donc, l'ensemble de ce code va m'afficher

240
00:16:27,700 --> 00:16:31,220
neuf fois la table de multiplication
par 5.

241
00:16:31,220 --> 00:16:34,842
Comme maintenant, je veux plutôt toutes
les tables de

242
00:16:34,842 --> 00:16:37,947
2 jusqu'à 10, et bien, je n'ai qu'à
modifier

243
00:16:37,947 --> 00:16:42,050
ce 5 ci, pour afficher plutôt la valeur
de la

244
00:16:42,050 --> 00:16:45,650
variable j, puisque j varie de 2 à 10.

245
00:16:45,650 --> 00:16:47,695
Et je vais aussi modifier

246
00:16:47,695 --> 00:16:52,532
ce 5, surtout, pour utiliser la
variable j, dans

247
00:16:52,532 --> 00:16:57,853
cette expression.
Je vais, donc, obtenir ce code-ci, où

248
00:16:57,853 --> 00:17:03,130
j'ai maintenant j, ici, ainsi que j dans
cette expression.

249
00:17:03,130 --> 00:17:06,968
Et je dis maintenant que l'ensemble de
ce

250
00:17:06,968 --> 00:17:11,095
code m'affiche les tables de 2 à 10.

251
00:17:11,095 --> 00:17:13,110
C'est ce que nous allons vérifier,

252
00:17:13,110 --> 00:17:15,690
maintenant, en détaillant ce code
pas à pas.

253
00:17:15,690 --> 00:17:19,218
On commence, donc, avec une première
«boucle for»

254
00:17:19,218 --> 00:17:23,626
qui déclare une variable j, qui l'initialise
à 2.

255
00:17:23,626 --> 00:17:26,820
La condition est «j ≤ 10»,

256
00:17:26,820 --> 00:17:30,530
et l'instruction d'incrémentation est
«++j».

257
00:17:30,530 --> 00:17:35,190
Donc, j va prendre les valeurs 2, 3
jusqu'à 10.

258
00:17:35,190 --> 00:17:39,040
Et pour l'instant, j va être initialisé

259
00:17:39,040 --> 00:17:39,720
à 2.

260
00:17:39,720 --> 00:17:46,579
On entre, maintenant, dans cette «boucle
for», qui commence par cette nouvelle

261
00:17:46,579 --> 00:17:51,000
instruction que j'ai ajoutée pour afficher
le nombre de la table, qu'on va afficher,

262
00:17:51,000 --> 00:17:54,392
c'est-à-dire que je vais afficher :
«table de multiplication par»,

263
00:17:54,392 --> 00:17:58,287
ensuite, la valeur de j, ensuite «:».

264
00:17:58,287 --> 00:18:02,725
Comme j vaut 2, je vais simplement
afficher 2, pour l'instant.

265
00:18:02,725 --> 00:18:03,310
On entre,

266
00:18:03,310 --> 00:18:07,828
maintenant, dans cette «boucle for» qui
utilise

267
00:18:07,828 --> 00:18:12,050
une variable i, et qui l'initialise à 1.

268
00:18:12,050 --> 00:18:15,693
La condition est «i ≤ 10».

269
00:18:15,693 --> 00:18:19,300
L'instruction d'incrémentation est 
«++i».

270
00:18:19,300 --> 00:18:24,110
i va donc, prendre les valeurs 1, 2,
jusqu'à 10.

271
00:18:24,110 --> 00:18:27,420
Et pour l'instant, i contient la
valeur 1.

272
00:18:27,420 --> 00:18:28,185
On entre

273
00:18:28,185 --> 00:18:30,395
donc dans cette «boucle for»,

274
00:18:30,395 --> 00:18:33,950
c'est-à-dire qu'on va exécuter cette
instruction

275
00:18:33,950 --> 00:18:36,355
d'affichage, qui affiche la valeur de j,

276
00:18:36,355 --> 00:18:38,314
c'est-à-dire 2.

277
00:18:38,314 --> 00:18:45,946
Ensuite «multiplié par», la valeur de i,
c'est-à-dire, pour l'instant,

278
00:18:45,946 --> 00:18:51,986
1, ensuite «vaut», ensuite, la valeur de
cette expression qui est 2 fois 1,

279
00:18:51,986 --> 00:18:53,482
C'est-à-dire

280
00:18:53,482 --> 00:18:54,040
2.

281
00:18:54,040 --> 00:18:58,600
C'est la seule instruction qui est dans la
boucle «for i».

282
00:18:58,600 --> 00:19:03,095
On va, donc, revenir, ici, pour exécuter
l'instruction

283
00:19:03,095 --> 00:19:07,616
d'incrémentation ; i va prendre
maintenant la valeur 2.

284
00:19:07,616 --> 00:19:09,675
La condition est toujours vraie.

285
00:19:09,675 --> 00:19:12,941
Donc, on entre une nouvelle fois dans la
boucle «for i»,

286
00:19:12,941 --> 00:19:18,568
c'est-à-dire qu'on va exécuter cette
instruction, cette fois-ci, avec i qui

287
00:19:18,568 --> 00:19:25,175
vaut 2 ; j vaut toujours 2.
On obtient l'affichage «multiplié par» ;

288
00:19:25,175 --> 00:19:31,404
on affiche la valeur de i, qui vaut, donc,
2 maintenant.

289
00:19:31,404 --> 00:19:34,019
On affiche «vaut» et la valeur de

290
00:19:34,019 --> 00:19:36,755
cette expression qui vaut maintenant,
2 fois 2,

291
00:19:36,755 --> 00:19:38,658
c'est-à-dire 4.

292
00:19:38,658 --> 00:19:44,342
Et ainsi de suite, jusqu'à ce que i prenne
la valeur 10.

293
00:19:44,342 --> 00:19:50,480
On va exécuter l'instruction
d'incrémentation «++i»,

294
00:19:50,480 --> 00:19:56,234
qui va faire que i prenne la valeur 11.
La condition va devenir fausse.

295
00:19:56,234 --> 00:19:58,776
Donc, on va sortir de cette boucle,

296
00:19:58,776 --> 00:20:04,692
c'est-à-dire arriver ici.
On arrive maintenant

297
00:20:04,692 --> 00:20:09,385
à la fin de la boucle «for j».
On revient

298
00:20:09,385 --> 00:20:16,890
donc maintenant ici, pour exécuter
l'instruction d'incrémentation

299
00:20:16,890 --> 00:20:22,638
«++j», qui va donner la valeur 3
à j, puisque j vaut 2.

300
00:20:22,638 --> 00:20:25,540
La condition est toujours vraie.

301
00:20:25,540 --> 00:20:30,205
Et on entre, une nouvelle fois, dans la
boucle «for j»,

302
00:20:30,205 --> 00:20:34,414
c'est-à-dire qu'on recommence par
exécuter, le corps de la boucle

303
00:20:34,414 --> 00:20:39,325
«for j».
On affiche ce message-ci, avec cette

304
00:20:39,325 --> 00:20:44,561
fois-ci, j qui vaut 3.
Et on rentre

305
00:20:44,561 --> 00:20:49,500
une nouvelle fois dans cette «boucle for».

306
00:20:49,500 --> 00:20:54,571
Et on recommence avec i, qui vaut 1.
L'instruction à

307
00:20:54,571 --> 00:21:00,500
l'intérieur du corps de la boucle
«for i» va être exécutée.

308
00:21:00,500 --> 00:21:05,479
Cette fois-ci avec j qui vaut 3.
On va obtenir

309
00:21:05,479 --> 00:21:11,630
l'affichage «multiplié par», i vaut 1 de
nouveau,

310
00:21:11,630 --> 00:21:17,249
et on va afficher la valeur de
l'expression «j * i»,

311
00:21:17,249 --> 00:21:21,540
c'est-à-dire 3 fois 1, donc,
simplement 3.

312
00:21:21,540 --> 00:21:26,170
Et ainsi de suite, jusqu'à ce que i prenne
la valeur 10.

313
00:21:26,170 --> 00:21:29,014
On va donc, pour chaque nouvelle
valeur de j,

314
00:21:29,014 --> 00:21:32,813
dérouler complètement la boucle la plus
interne,

315
00:21:32,813 --> 00:21:35,500
c'est-à-dire, la boucle «for i».

316
00:21:35,500 --> 00:21:40,058
i va varier de 1 à 10, pour afficher
l'ensemble de la table de

317
00:21:40,058 --> 00:21:45,783
multiplication, pour la valeur courante de
j, jusqu'à

318
00:21:45,783 --> 00:21:50,840
ce que j prenne la valeur 10.

