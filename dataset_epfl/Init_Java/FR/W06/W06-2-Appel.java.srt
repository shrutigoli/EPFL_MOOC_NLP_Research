1
00:00:05,539 --> 00:00:09,539
Dans une séquence précédente, nous avons
introduit la notion de fonction, méthode

2
00:00:09,539 --> 00:00:12,029
et son utilité en programmation.

3
00:00:12,029 --> 00:00:14,869
Nous allons aujourd'hui nous intéresser
à ce qui se passe lorsqu'on

4
00:00:14,869 --> 00:00:17,129
utilise, lorsqu'on appelle une méthode.

5
00:00:17,129 --> 00:00:20,759
Concrètement à ce stade, nous savons
qu'à la notion de méthode sont

6
00:00:20,759 --> 00:00:25,389
associées trois facettes : l'entête, la
définition et l'appel.

7
00:00:25,389 --> 00:00:29,719
Et nous allons aujourd'hui nous intéresser
en détail à ce qui se passe au moment

8
00:00:29,719 --> 00:00:30,669
de l'appel.

9
00:00:31,157 --> 00:00:33,687
Reprenons notre exemple du
calcul des moyennes.

10
00:00:33,687 --> 00:00:37,467
Nous avons ici à faire à un petit
programme principal, qui demande à

11
00:00:37,467 --> 00:00:40,447
l'utilisateur d'introduire deux notes.

12
00:00:40,447 --> 00:00:46,437
Ces deux notes sont introduites par
l'utilisateur par le biais du clavier,

13
00:00:47,090 --> 00:00:50,380
et enfin la moyenne de ces
deux notes est affichée.

14
00:00:50,797 --> 00:00:56,207
Le calcul de la moyenne est réalisé ici
par le biais d'un appel à une méthode,

15
00:00:56,207 --> 00:00:57,807
la méthode moyenne.

16
00:00:57,807 --> 00:01:01,007
Et nous allons maintenant étudier les
mécanismes impliqués par un tel appel.

17
00:01:01,283 --> 00:01:05,073
Nous avons ici un exemple concret d'appel
de méthode, qu'on appelle

18
00:01:05,073 --> 00:01:09,073
la méthode moyenne, et on l'appelle en
lui passant deux arguments, ici

19
00:01:09,073 --> 00:01:13,073
sous la forme d'expressions qui bien
évidemment vont correspondre

20
00:01:13,073 --> 00:01:18,293
respectivement aux deux
paramètres de la méthode.

21
00:01:18,980 --> 00:01:22,720
Vous noterez que l'on appelle
habituellement paramètre les données

22
00:01:22,720 --> 00:01:26,380
dont a besoin la méthode pour pouvoir
fonctionner telle que décrit dans l'entête

23
00:01:26,380 --> 00:01:31,250
de la méthode et par argument les données
effectives fournies à la méthode

24
00:01:31,250 --> 00:01:34,060
au moment de son invocation, de son appel.

25
00:01:34,266 --> 00:01:39,496
Donc le but ici est de décortiquer ce qui
se passe au moment où un tel appel

26
00:01:39,496 --> 00:01:40,826
est exécuté.

27
00:01:42,464 --> 00:01:47,604
La toute première étape qui est effectuée
consiste en fait à évaluer

28
00:01:48,840 --> 00:01:53,380
les différents arguments et en java cette
évaluation va se faire systèmatiquement

29
00:01:53,380 --> 00:01:54,460
de gauche à droite.

30
00:01:54,460 --> 00:01:58,460
Donc ici concrètement, le premier
argument est évalué.

31
00:01:59,090 --> 00:02:03,090
Donc l'expression est évaluée, qui va
retourner à une valeur de 2.3.

32
00:02:03,970 --> 00:02:04,840
La seconde.

33
00:02:05,570 --> 00:02:08,210
Ce qui va produire la valeur 4.25.

34
00:02:09,099 --> 00:02:14,899
Ensuite, seconde étape, il faudra
établir le lien entre, concrètement,

35
00:02:14,899 --> 00:02:19,319
ces arguments et les paramètres
de la méthode.

36
00:02:19,791 --> 00:02:22,321
C'est ce qui se passe au moment
de la seconde étape.

37
00:02:22,321 --> 00:02:27,171
Donc, lors de la seconde étape,
on va apparier le paramètre x avec

38
00:02:27,171 --> 00:02:32,541
le résultat de la première expression,
x vaudra 2.3.

39
00:02:32,541 --> 00:02:38,291
Et apparier y avec le résultat de
l'évaluation de la seconde

40
00:02:38,291 --> 00:02:40,461
expression : 4.25.

41
00:02:40,461 --> 00:02:45,701
Nous nous trouvons donc dans la situation
où les paramètres x et y ont des

42
00:02:45,701 --> 00:02:49,701
valeurs concrètes avec lesquelles la
méthode va pouvoir maintenant

43
00:02:49,701 --> 00:02:52,051
travailler et s'exécuter.

44
00:02:53,529 --> 00:02:57,529
Troisième étape, le corps de la
fonction est exécuté.

45
00:02:57,529 --> 00:03:03,769
Ici en l'occurrence, le corps consiste en
une instruction unique qui est le retour,

46
00:03:03,769 --> 00:03:06,789
donc ici l'expression de retour.

47
00:03:07,777 --> 00:03:11,547
Donc ici, le corps à proprement parler
avant l'expression de retour ne fait rien

48
00:03:11,547 --> 00:03:12,567
de particulier.

49
00:03:14,483 --> 00:03:15,793
Quatrième étape,

50
00:03:18,142 --> 00:03:23,092
c'est l'expression qui va servir de valeur
de retour qui maintenant va

51
00:03:23,092 --> 00:03:24,202
être évaluée.

52
00:03:24,610 --> 00:03:29,600
Donc concrètement, x plus y sur deux va
être calculé,

53
00:03:30,387 --> 00:03:33,287
ce qui produira le résultat suivant.

54
00:03:36,081 --> 00:03:40,081
Et cette valeur est maintenant retournée
par la méthode qui va la mettre

55
00:03:40,081 --> 00:03:42,521
à disposition du problème,
du programme appelant.

56
00:03:42,521 --> 00:03:43,601
Donc en fait,

57
00:03:45,310 --> 00:03:48,110
tout cet appel de méthode est remplacé

58
00:03:49,451 --> 00:03:55,301
par le résultat produit par la fonction.

59
00:03:56,266 --> 00:03:58,046
Donc ultime étape,

60
00:04:00,500 --> 00:04:04,500
z prend la valeur 3.275.

61
00:04:06,647 --> 00:04:10,087
Nous venons donc de voir les cinq étapes
qui se déroulent habituellement

62
00:04:10,087 --> 00:04:11,697
lorsque l'on appelle une méthode.

63
00:04:11,697 --> 00:04:15,235
Donc, première étape, les expressions
qui sont passées en guise d'arguments

64
00:04:15,235 --> 00:04:17,025
à la méthode sont évaluées.

65
00:04:17,025 --> 00:04:22,265
Deuxièmement, les valeurs correspondantes
sont ensuite affectées aux paramètres

66
00:04:22,265 --> 00:04:23,305
de la méthode.

67
00:04:23,305 --> 00:04:26,735
La méthode dispose à ce moment-là
de toutes les informations qui lui

68
00:04:26,735 --> 00:04:30,355
sont nécessaires pour pouvoir travailler,
son corps peut s’exécuter.

69
00:04:30,355 --> 00:04:35,135
Quatrième étape, l'expression qui suit
la première commande return rencontrée

70
00:04:35,135 --> 00:04:39,135
à l'exécution va être évaluée et le
résultat de l'évaluation de cette

71
00:04:39,135 --> 00:04:43,135
expression est ensuite retournée
comme résultat de l'appel.

72
00:04:43,135 --> 00:04:47,135
Ces cinq étapes se déroulent dans le cas
le plus général, il existe des situations

73
00:04:47,135 --> 00:04:49,815
où le déroulement est un peu simplifié.

74
00:04:49,815 --> 00:04:54,715
Donc, nous savons que dans le cas le
plus général une méthode a besoin de

75
00:04:54,715 --> 00:04:58,225
paramètres de données entrantes et
produit un résultat en sortie.

76
00:04:59,989 --> 00:05:04,809
Alors il existe des situations cependant,
où la méthode n'a pas besoin de

77
00:05:04,809 --> 00:05:08,189
données entrantes et à ce moment-là
évidemment les étapes un et deux,

78
00:05:08,189 --> 00:05:11,529
qui consistent à évaluer les expressions
passées en arguments et les affecter

79
00:05:11,529 --> 00:05:15,179
aux paramètres n'ont pas lieu pour
une méthode sans arguments.

80
00:05:15,179 --> 00:05:20,229
Et puis, il existe des situations où il
n'y a pas de données en sortie, la méthode

81
00:05:20,229 --> 00:05:24,229
ne fournit aucun résultat, et à ce
moment-là les étapes qui consistent à

82
00:05:24,737 --> 00:05:29,217
évaluer l'expression après le return et
retourner ce résultat, les quatre et cinq

83
00:05:29,217 --> 00:05:31,077
n'ont évidemment pas lieu.

84
00:05:32,271 --> 00:05:36,271
Une méthode peut parfaitement appeler
une autre méthode, c'est le cas de

85
00:05:36,271 --> 00:05:42,551
ce petit exemple-là où vous avez une
méthode afficheScore qui prend en

86
00:05:42,551 --> 00:05:48,291
paramètres un joueur identifié par un
entier, un nombre de point gagnés par

87
00:05:48,291 --> 00:05:53,721
le joueur, le temps qu'il a passé à jouer
et qui va afficher, pour le joueur,

88
00:05:53,721 --> 00:05:54,881
son score.

89
00:05:55,163 --> 00:05:59,773
Ici, il se trouve que le score est calculé
en fonction du nombre de points et

90
00:05:59,773 --> 00:06:04,613
du temps passé, et le calcul se fait
par le biais d'une méthode.

91
00:06:05,077 --> 00:06:10,367
La méthode est définie à un autre endroit

92
00:06:10,367 --> 00:06:14,367
et prend en entrée justement le nombre
de points et le temps de jeu.

93
00:06:15,796 --> 00:06:19,176
Vous connaissez maintenant les différentes
étapes qui s'exécutent lorsqu'une

94
00:06:19,176 --> 00:06:22,486
méthode est appelée dans un programme
et vous avez maintenant sous vos yeux

95
00:06:22,486 --> 00:06:26,486
un petit schéma récapitulatif qui
synthétise ces différentes étapes.

96
00:06:26,486 --> 00:06:30,486
Donc ici, on a une méthode f qui est
appelée par une méthode g.

97
00:06:30,975 --> 00:06:36,815
La correspondance entre les paramètres
de la méthode et les arguments d'appel

98
00:06:36,815 --> 00:06:38,865
se fait au moment de l'appel.

99
00:06:38,865 --> 00:06:43,905
Donc ici, au moment de l'appel, l'argument
est copié dans le paramètre de la méthode

100
00:06:43,905 --> 00:06:47,905
qui l'utilise pour exécuter les
traitements qu'elle doit faire.

101
00:06:47,905 --> 00:06:52,735
Dans le cas le plus général, la méthode
calcule une valeur de retour

102
00:06:52,735 --> 00:06:56,865
et cette valeur de retour est transmise à
la méthode appelante qui va pouvoir

103
00:06:56,865 --> 00:06:59,435
l'utiliser pour réaliser les traitements.

104
00:06:59,838 --> 00:07:02,878
Vous aurez sans doute constaté tout au
long de cette séquence qu'il existe

105
00:07:02,878 --> 00:07:06,288
un certain jargon, une terminologie
associée à l'appel de méthode,

106
00:07:06,288 --> 00:07:08,838
nous allons maintenant résumer
un petit peu ce jargon.

107
00:07:08,838 --> 00:07:13,388
Vous aurez compris que lorsque je parle
d'appeler une méthode, je signifie que

108
00:07:13,388 --> 00:07:17,388
j'utilise la méthode, ici je suis entrain
d'utiliser la méthode f pour calculer

109
00:07:17,388 --> 00:07:20,678
un résultat que j'affecte
ensuite à une variable x.

110
00:07:20,678 --> 00:07:25,238
Lorsque je parle de passer une valeur
en argument à une méthode, je

111
00:07:25,238 --> 00:07:30,108
signifie que cette valeur est simplement
copiée dans un paramètre de la méthode.

112
00:07:30,108 --> 00:07:34,108
Et enfin, lorsque je dis qu'une méthode
retourne la valeur de y par exemple,

113
00:07:34,108 --> 00:07:38,108
je signifie que l'expression de l'appel
de la méthode sera simplement

114
00:07:38,108 --> 00:07:40,868
remplacé par le valeur retournée.

115
00:07:40,868 --> 00:07:44,308
Donc si on prend un petit exemple concret
maintenant, supposons que nous ayons ici

116
00:07:44,308 --> 00:07:47,618
une méthode f dont la dernière
instruction soit celle-ci.

117
00:07:47,812 --> 00:07:52,732
Supposons que cette méthode soit
appelée de cette façon-là, et qu'au moment

118
00:07:52,732 --> 00:07:59,562
de cet appel la valeur de y soit
concrètement cinq, dire que la méthode

119
00:07:59,562 --> 00:08:04,212
retourne la valeur de y, c'est-à-dire
cinq, revient à dire que l'on remplace

120
00:08:04,212 --> 00:08:08,212
simplement cet appel-là par la valeur
retournée, c'est-à-dire cinq.

121
00:08:08,212 --> 00:08:13,232
Ainsi, je peux dire indifféremment cos de
zéro retourne le cosinus de zéro

122
00:08:13,232 --> 00:08:17,232
ou cos de zéro retourne un, par exemple.
