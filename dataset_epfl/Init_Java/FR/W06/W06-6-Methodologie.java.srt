1
00:00:05,477 --> 00:00:09,303
Résumons maintenant la méthodologie
que nous vous conseillons de suivre

2
00:00:09,303 --> 00:00:11,716
lorsque vous souhaitez créer une méthode.

3
00:00:11,966 --> 00:00:15,071
Le tout premier aspect est 
de se focaliser d'abord

4
00:00:15,071 --> 00:00:18,685
sur ce que doit faire la méthode,
c'est à dire sur le "quoi"

5
00:00:18,685 --> 00:00:22,364
et non pas sur "comment" faire
ce que doit faire la méthode.

6
00:00:22,364 --> 00:00:25,034
Donc bien se préoccuper sur
qu'est-ce que doit faire la méthode,

7
00:00:25,034 --> 00:00:30,897
et en particulier éviter que la méthode
fasse des effets qui ne sont pas désirés,

8
00:00:30,897 --> 00:00:32,976
ce que l'on appelle des "effets de bord",

9
00:00:32,976 --> 00:00:36,320
comme nous avions vu dans la vidéo
sur les en-têtes des méthodes

10
00:00:36,320 --> 00:00:39,889
avec l'exemple de la méthode
racine carrée <i>sqrt</i>.

11
00:00:39,889 --> 00:00:43,040
La première étape est donc
de se focaliser sur le "quoi"

12
00:00:43,040 --> 00:00:45,508
plutôt que de mettre
en avant le "comment".

13
00:00:45,508 --> 00:00:50,459
Une fois que ceci est clair, vous pouvez
alors passer à la deuxième étape qui est :

14
00:00:50,459 --> 00:00:54,234
qu'est-ce que doit recevoir la méthode
du reste du programme

15
00:00:54,234 --> 00:00:56,838
pour pouvoir fonctionner ?
Pour pouvoir faire ce qu'elle a à faire.

16
00:00:56,838 --> 00:00:59,955
Par exemple si la méthode s'appelle <i>f</i>
et que je fais un appel ici,

17
00:00:59,955 --> 00:01:03,661
qu'est-ce que le reste du programme
doit passer à cette méthode

18
00:01:03,661 --> 00:01:05,437
pour pouvoir fonctionner ?

19
00:01:05,437 --> 00:01:07,018
Troisième étape :

20
00:01:07,018 --> 00:01:08,997
vous demandez quel est le type de retour.

21
00:01:08,997 --> 00:01:11,907
Qu'est-ce que retourne la méthode
au reste du programme ?

22
00:01:11,907 --> 00:01:13,351
Et pour ça posez-vous la question :

23
00:01:13,351 --> 00:01:18,246
est-ce que ça a un sens d'écrire
un appel comme ceci <i>z = f</i>,

24
00:01:18,246 --> 00:01:20,338
f étant le nom de la méthode,

25
00:01:20,808 --> 00:01:24,215
est-ce que ça a un sens d'écrire
<i>z = f</i> de quelque chose ?

26
00:01:24,215 --> 00:01:29,470
Si ça a un sens, alors le type
de retour sera le type de <i>z</i>.

27
00:01:29,470 --> 00:01:35,650
Par exemple, écrire
<i>z = sqrt(2.0)</i> a un sens,

28
00:01:35,650 --> 00:01:42,258
et donc le type de retour de la méthode
<i>sqrt</i> doit être le même que le type de <i>z</i>.

29
00:01:42,258 --> 00:01:46,309
Dans cet appel, ça serait donc
typiquement un <i>double</i>.

30
00:01:46,309 --> 00:01:50,515
Si ça n'a pas de sens d'écrire
<i>z =</i> appel de méthode,

31
00:01:50,515 --> 00:01:53,771
alors la méthode ne doit rien retourner,

32
00:01:53,771 --> 00:01:58,660
et donc son type de retour,
entre guillemets, serait le type <i>void</i>.

33
00:01:59,410 --> 00:02:01,596
Ensuite quatrième étape :

34
00:02:01,596 --> 00:02:06,305
maintenant et seulement maintenant,
vous devez vous préoccuper du "comment".

35
00:02:06,305 --> 00:02:08,687
Comment j'écris le code ?

36
00:02:08,687 --> 00:02:12,610
Comment je construis
cette valeur de retour

37
00:02:12,610 --> 00:02:15,485
que la méthode doit retourner
au reste du programme ?

38
00:02:16,815 --> 00:02:19,216
Prenons maintenant un exemple concret.

39
00:02:19,216 --> 00:02:21,838
Supposons que l'on veuille
par exemple créer une méthode

40
00:02:21,838 --> 00:02:24,570
qui demande un nombre à l'utilisateur,

41
00:02:24,570 --> 00:02:28,144
et par exemple que ce nombre
soit compris entre deux bornes.

42
00:02:28,144 --> 00:02:31,824
Donc on demanderait à l'utilisateur
d'entrer un nombre entre 1 et 10.

43
00:02:31,824 --> 00:02:33,334
En suivant la méthodologie,

44
00:02:33,334 --> 00:02:37,480
on commence donc par bien se poser
la question de ce que l'on veut faire,

45
00:02:37,480 --> 00:02:39,928
et à ce stade-là donc
bien concevoir la méthode,

46
00:02:39,928 --> 00:02:45,312
et là je vous conseille par exemple
de commencer par taper des commentaires

47
00:02:46,002 --> 00:02:48,997
qui indiqueraient clairement
ce que ce que vous voulez faire.

48
00:02:48,997 --> 00:02:51,371
Donc par exemple ici, clairement indiquer

49
00:02:51,371 --> 00:02:54,664
que c'est une méthode
qui demande un nombre à l'utilisateur

50
00:02:54,664 --> 00:02:59,237
et que ce nombre doit être compris entre
2 bornes que l'on passera en paramètres.

51
00:03:00,077 --> 00:03:04,765
A ce stade-là on peut aussi commencer
par fixer le nom, choisir le nom,

52
00:03:04,765 --> 00:03:09,455
donc par exemple le nom de la méthode
pourrait être <i>demander_nombre</i>.

53
00:03:10,335 --> 00:03:13,955
Cette étape qui consiste à clairement
spécifier ce que doit faire la méthode,

54
00:03:13,955 --> 00:03:16,885
qui s'intéresse donc au "quoi",
ce que doit faire la méthode

55
00:03:16,885 --> 00:03:20,555
et non pas au "comment",
est essentiellement conceptuelle,

56
00:03:20,555 --> 00:03:24,172
mais elle est fondamentale pour le bon
développement de la méthode.

57
00:03:24,172 --> 00:03:26,450
Et donc elle n'est pas à négliger.

58
00:03:27,050 --> 00:03:31,998
On peut alors passer à la deuxième étape
qui consiste à se demander

59
00:03:31,998 --> 00:03:36,335
quels paramètres doit recevoir
la méthode en question.

60
00:03:36,335 --> 00:03:39,616
Donc ici on a décidé
qu'elle recevrait deux paramètres :

61
00:03:39,616 --> 00:03:42,975
un paramètre qui indiquera
la borne inférieure,

62
00:03:42,975 --> 00:03:45,269
donc par exemple on va l'appeler <i>minimum</i> ;

63
00:03:45,269 --> 00:03:49,042
et puis un paramètre qui reçoit
la borne supérieure,

64
00:03:49,042 --> 00:03:52,668
donc par exemple qu'on peut
appeler <i>maximum</i>.

65
00:03:53,698 --> 00:03:56,526
Dans notre exemple où nous voulions
demander un nombre à l'utilisateur

66
00:03:56,526 --> 00:04:01,032
compris entre 1 et 10, on passerait donc
la valeur "1" comme premier argument,

67
00:04:01,032 --> 00:04:03,712
et la valeur 10 comme deuxième argument.

68
00:04:03,712 --> 00:04:06,136
Une fois qu'on a terminé avec
cette deuxième étape,

69
00:04:06,136 --> 00:04:09,105
qui s'intéressait aux paramètres,
on passe à la troisième étape,

70
00:04:09,105 --> 00:04:13,820
qui se demande quel doit être le type
de la valeur de retour de la méthode.

71
00:04:13,820 --> 00:04:18,290
Qu'est-ce que la méthode doit renvoyer
au reste du programme ?

72
00:04:18,290 --> 00:04:22,652
Et pour cela je vous conseille donc
d'écrire une affectation du genre :

73
00:04:22,652 --> 00:04:28,193
<i>z =</i> "appel de la méthode" donc ici
<i>z = demander_nombre</i>

74
00:04:28,813 --> 00:04:34,689
dans le cas précédent, par exemple,
on va mettre entre les bornes 1 et 10.

75
00:04:34,689 --> 00:04:38,557
Et se demander si un tel appel a un sens.

76
00:04:38,947 --> 00:04:41,671
Ici pour nous clairement
un tel appel a un sens

77
00:04:41,671 --> 00:04:43,804
et la valeur ici stockée dans <i>z</i>,

78
00:04:43,804 --> 00:04:47,439
serait celle que l'utilisateur
nous aurait fournie.

79
00:04:47,819 --> 00:04:50,466
Et donc quand un tel appel a un sens,

80
00:04:50,466 --> 00:04:54,273
à ce moment-là le type de retour
de la méthode ici,

81
00:04:54,273 --> 00:04:57,034
est le type de <i>z</i>
dans une telle expression.

82
00:04:57,034 --> 00:04:59,716
Donc ici on s'attend à avoir un <i>double</i>.

83
00:04:59,716 --> 00:05:02,453
Donc le type de retour est <i>double</i>.

84
00:05:03,173 --> 00:05:09,032
Au niveau de ce cours on n'oubliera pas
de rajouter le mot clé <i>static</i>.

85
00:05:09,642 --> 00:05:12,062
Une fois qu'on a terminé avec
cette troisième étape,

86
00:05:12,062 --> 00:05:14,518
qui s'intéressait au type
de retour de la méthode,

87
00:05:15,108 --> 00:05:18,345
maintenant et seulement maintenant
on va s'intéresser au "comment".

88
00:05:18,345 --> 00:05:19,770
Comment la méthode doit travailler,

89
00:05:19,770 --> 00:05:22,043
comment elle doit faire
ce qu'elle a à faire ?

90
00:05:22,043 --> 00:05:27,051
C'est à dire uniquement maintenant,
on va se préoccuper du corps de la méthode

91
00:05:27,051 --> 00:05:30,919
et donc ajouter ici un bloc,
c'est à dire deux accolades,

92
00:05:30,919 --> 00:05:35,111
pour pouvoir y mettre ce que
la méthode doit faire ici,

93
00:05:35,111 --> 00:05:37,431
pour demander un nombre à l'utilisateur.
