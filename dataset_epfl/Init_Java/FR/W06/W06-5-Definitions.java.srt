1
00:00:04,902 --> 00:00:08,902
Dans une vidéo précédente, nous avions vu
ce que sont les trois facettes

2
00:00:08,902 --> 00:00:10,492
des méthodes.

3
00:00:10,498 --> 00:00:14,748
Nous avions vu ce qu'est l'appel d'une
méthode, nous avions aussi vu

4
00:00:14,748 --> 00:00:17,228
ce qu'est l'entête d'une méthode.

5
00:00:17,228 --> 00:00:19,388
Dans cette vidéo-ci, nous allons
plus particulièrement

6
00:00:19,388 --> 00:00:23,068
nous concentrer sur la notion
de définition des méthodes.

7
00:00:23,068 --> 00:00:28,198
Si je reprends l'exemple courant du
calcul de la moyenne, la définition

8
00:00:28,198 --> 00:00:32,198
de la méthode moyenne, ce sont toutes
ces lignes ici qui commencent par

9
00:00:32,198 --> 00:00:36,478
l'entête, ainsi que toutes ces lignes ici
qui suivent l'entête entre accolades.

10
00:00:37,175 --> 00:00:40,555
La définition d'une méthode sert donc,
comme son nom l'indique,

11
00:00:40,555 --> 00:00:44,695
à définir ce que doit faire la méthode,
c'est-à-dire à spécifier le corps

12
00:00:44,695 --> 00:00:48,405
de la méthode, c'est-à-dire l'ensemble
des instructions qui ont fait

13
00:00:48,405 --> 00:00:52,405
justement que l'on a décidé d'isoler cette
méthode, de créer cette méthode.

14
00:00:52,809 --> 00:00:56,629
Du point de vue de la syntaxe on va
donc commencer par donner l'entête,

15
00:00:56,629 --> 00:01:00,529
je vous rappelle c'est la spécification du
type de retour suivit du nom

16
00:01:00,529 --> 00:01:05,165
de la méthode, suivit entre parenthèses
rondes de la liste des paramètres,

17
00:01:05,165 --> 00:01:09,095
mais dans la définition cette entête va
être suivie donc ici d'un bloc qui va

18
00:01:09,095 --> 00:01:13,465
contenir les instructions qui font que
la méthode va pouvoir fonctionner,

19
00:01:13,465 --> 00:01:16,465
qui décrivent le déroulement
de la méthode.

20
00:01:16,465 --> 00:01:20,465
Parmi ces instructions, nous aurons une
ou plusieurs instructions <i>return</i>

21
00:01:20,465 --> 00:01:24,215
qui vont mettre fin à l'exécution
du corps de la méthode.

22
00:01:24,215 --> 00:01:29,125
Si je reprends ici l'exemple de la méthode
moyenne, on va retrouver l'entête

23
00:01:29,125 --> 00:01:34,445
de la méthode, comme on l'a déjà vu dans
les exemples précédents, suivi par ici

24
00:01:34,445 --> 00:01:37,835
l'ensemble des instructions qui
permettent à la moyenne d'effectivement

25
00:01:37,835 --> 00:01:43,035
effectuer ce qu'elle doit faire, ici
réduit à une simple instruction <i>return</i> qui

26
00:01:43,035 --> 00:01:47,835
va calculer la somme de ces deux
paramètres x et y et diviser par deux.

27
00:01:48,488 --> 00:01:52,718
Le corps de la méthode est donc
simplement un bloc au sens Java du terme,

28
00:01:52,718 --> 00:01:57,528
c'est-à-dire un ensemble d'instructions
comprises entre accolades qui permettent

29
00:01:57,528 --> 00:02:03,298
de définir ce que doit faire la méthode et
dans ce bloc ici on peut utiliser comme

30
00:02:03,298 --> 00:02:06,828
variables les paramètres
reçus par la méthode.

31
00:02:06,828 --> 00:02:10,828
La valeur retournée par la méthode
est indiquée par une expression

32
00:02:10,828 --> 00:02:14,598
particulière, qui est ce qu'on appelle une
expression <i>return</i>, qui commence

33
00:02:14,598 --> 00:02:19,198
par le mot-clé <i>return</i> et ensuite est
suivie d'une expression Java qui est

34
00:02:19,198 --> 00:02:23,888
évaluée et qui va définir donc la valeur
de retour de la méthode.

35
00:02:23,888 --> 00:02:27,748
Elle doit donc être naturellement de
même type que le type de retour

36
00:02:27,748 --> 00:02:28,758
de la méthode.

37
00:02:28,758 --> 00:02:32,918
Si je reprends l'exemple du calcul de la
moyenne, nous avons ici comme type

38
00:02:32,918 --> 00:02:37,718
de retour pour la moyenne un <i>double</i>
et donc nous verrons derrière

39
00:02:37,718 --> 00:02:43,848
l'instruction <i>return</i> ici une expression
Java de type <i>double</i>, qui sera la valeur

40
00:02:43,848 --> 00:02:47,848
retournée par l'appel
de la méthode moyenne.

41
00:02:48,688 --> 00:02:53,808
L'instruction <i>return</i> fait donc en fait
deux choses : elle commence par préciser

42
00:02:53,808 --> 00:02:58,958
la valeur de retour de la méthode et
ensuite la première instruction

43
00:02:58,958 --> 00:03:04,528
<i>return</i> rencontrée met fin à l'exécution
de la méthode dans laquelle

44
00:03:04,528 --> 00:03:05,798
elle se déroule.

45
00:03:06,142 --> 00:03:10,142
L'expression <i>return</i> est parfois réduite à
une seule variable, comme par exemple

46
00:03:10,142 --> 00:03:15,772
on pourrait rencontrer des expressions
du type <i>return x</i> ou même simplement

47
00:03:15,772 --> 00:03:21,102
une valeur, comme par exemple <i>return 3</i>,
ceci n'est qu'un cas très particulier

48
00:03:21,102 --> 00:03:26,052
d'expressions simples, une seule
variable ou une valeur particulière,

49
00:03:26,052 --> 00:03:29,552
mais ça n'est pas du tout le cas général,
on l'a vu dans l'exemple précédent,

50
00:03:29,552 --> 00:03:33,552
le cas général c'est une expression
complète au sens Java du terme

51
00:03:33,552 --> 00:03:36,782
qui se trouve derrière
l'instruction <i>return</i>.

52
00:03:38,094 --> 00:03:40,654
Quelques remarques concernant
l'instruction <i>return</i>.

53
00:03:40,654 --> 00:03:44,618
Tout d'abord, il est tout à fait possible
d'avoir plusieurs <i>return</i> dans le corps

54
00:03:44,618 --> 00:03:49,668
d'une même méthode, par exemple si j'ai
ici une méthode qui va retourner

55
00:03:49,668 --> 00:03:54,528
le maximum de deux <i>double</i> a et b reçus
comme paramètres, cette méthode

56
00:03:54,528 --> 00:03:58,728
je l'écris donc de la façon suivante, je
déclare ici une variable m que je vais

57
00:03:58,728 --> 00:04:02,048
utiliser pour retourner
le maximum de a et b.

58
00:04:02,048 --> 00:04:05,808
Si a est plus grand que b,
alors je recopie

59
00:04:05,808 --> 00:04:10,948
la valeur de a dans m, sinon,
si a est inférieur ou égal à b,

60
00:04:10,948 --> 00:04:14,948
ce <i>if</i> saute ici et ce sera
donc bien sûr la valeur de b

61
00:04:14,948 --> 00:04:16,938
qui va être recopiée dans m.

62
00:04:16,938 --> 00:04:21,568
Mais on aurait tout à fait pu définir de
façon un petit plus compacte la méthode

63
00:04:21,568 --> 00:04:26,818
<i>max2</i> ici avec simplement deux
instructions <i>return</i>, ça fonctionne

64
00:04:26,818 --> 00:04:33,318
de la façon suivante : si a est plus grand
que b, alors on va rentrer ici et exécuter

65
00:04:33,318 --> 00:04:37,648
l'instruction <i>return</i> a et donc cette
instruction mettra fin à l'exécution

66
00:04:37,648 --> 00:04:42,388
du corps et le maximum de a et b dans
ce cas-là retournera la valeur de a,

67
00:04:42,388 --> 00:04:50,258
par contre si a est inférieur ou égal à b,
l'instruction ici <i>if</i> va sauter dans

68
00:04:50,258 --> 00:04:56,258
le <i>else</i> et donc on exécutera ce <i>return</i>-ci
qui retournera au reste du programme

69
00:04:56,258 --> 00:04:57,788
la valeur de b.

70
00:04:58,354 --> 00:05:02,254
Deuxième remarque concernant l'instruction
<i>return</i>, comme dit précédemment,

71
00:05:02,254 --> 00:05:07,264
le type de retour qui suit le mot-clé 
<i>return</i> doit être le même type que celui

72
00:05:07,264 --> 00:05:09,384
qui a été annoncé dans l'entête.

73
00:05:09,384 --> 00:05:14,351
Par exemple ici, si je considère une
méthode bidon, qui ne prend pas

74
00:05:14,351 --> 00:05:20,921
de paramètres et qui retourne un <i>double</i>,
alors je ne peux pas retourner ici

75
00:05:20,921 --> 00:05:24,921
une expression qui s'évalue à un type
différent de <i>double</i>, par exemple ici

76
00:05:24,921 --> 00:05:29,781
je ne peux pas retourner une valeur
<i>boolean</i>, ceci va me donner une erreur

77
00:05:29,781 --> 00:05:31,281
lors de la compilation.

78
00:05:32,400 --> 00:05:37,040
Troisième remarque concernant
l'instruction <i>return</i>, l'instruction <i>return</i>

79
00:05:37,040 --> 00:05:42,250
doit être la dernière instruction que le
compilateur va rencontrer,

80
00:05:42,250 --> 00:05:45,860
il ne peut pas y avoir d'instructions
derrière l'instruction <i>return</i>.

81
00:05:45,860 --> 00:05:51,370
Si je prends par exemple la méthode ici
lire dont le but est de lire un <i>double</i>,

82
00:05:51,370 --> 00:05:56,930
elle ne reçoit donc pas de paramètres,
la méthode va d'abord demander

83
00:05:56,930 --> 00:06:01,780
un nombre, ensuite elle va lire un nombre
sur l'entrée standard, au clavier

84
00:06:01,780 --> 00:06:09,630
typiquement, ensuite elle va affecter un
<i>double</i> ici déclaré n à la valeur lue

85
00:06:09,630 --> 00:06:18,420
au clavier, ici stockée dans <i>keyb</i>, et puis
elle va retourner donc cette valeur n,

86
00:06:18,420 --> 00:06:25,030
et on trouve dans cette méthode lire ici,
un affichage par exemple d'un retour

87
00:06:25,030 --> 00:06:25,910
à la ligne.

88
00:06:25,910 --> 00:06:30,800
Ceci n'est absolument pas possible, on ne
peut pas avoir une instruction comme ça

89
00:06:30,800 --> 00:06:36,330
qui suit une instruction <i>return</i>,
l'instruction <i>return</i> doit être la dernière

90
00:06:36,330 --> 00:06:40,790
instruction sinon on reçoit
une erreur du compilateur.

91
00:06:41,930 --> 00:06:45,010
Dernière remarque enfin
concernant l'instruction <i>return</i>.

92
00:06:45,010 --> 00:06:49,010
Le compilateur doit garantir que l'on peut
toujours exécuter au moins

93
00:06:49,010 --> 00:06:53,010
une instruction <i>return</i>, donc par exemple
si je reprends une autre version de

94
00:06:53,010 --> 00:06:57,010
la méthode lire que nous avons vu juste
précédemment, donc le début est

95
00:06:57,010 --> 00:07:07,090
exactement le même, on va lire sur le
clavier un <i>double</i> que l'on aura saisi

96
00:07:07,090 --> 00:07:11,090
mais ici supposons que l'on veuille que
l'on retourne que des nombres positifs

97
00:07:11,090 --> 00:07:16,720
donc on rajoute une condition,
ici si n est strictement positif.

98
00:07:16,720 --> 00:07:22,240
Si n est strictement positif alors on va
retourner n, jusque là il n'y a pas

99
00:07:22,240 --> 00:07:27,100
de soucis, par contre à ce niveau-là, 
il se peut tout à fait que l'utilisateur

100
00:07:27,100 --> 00:07:31,580
est entré un nombre qui soit négatif,
il aurait pu rentrer moins un c'est

101
00:07:31,580 --> 00:07:36,080
tout à fait possible, ce qui fait que
l'instruction <i>if</i> ici va être fausse et

102
00:07:36,080 --> 00:07:41,790
donc qu'on va sauter après le bloc <i>if</i>
et on va se retrouver ici à ne rien

103
00:07:41,790 --> 00:07:46,710
pouvoir exécuter, le compilateur ne pourra
donc pas toujours pouvoir exécuter

104
00:07:46,710 --> 00:07:50,110
le <i>return</i> et donc 
il retournera une erreur.

105
00:07:50,110 --> 00:07:56,560
Une correction possible pour ce code
aurait été de bien sûr mettre la lecture,

106
00:07:56,560 --> 00:08:02,320
de mettre l'ensemble ici de la demande
de la lecture et de la valeur de retour

107
00:08:02,320 --> 00:08:09,870
dans une boucle <i>while</i> par exemple,
tant que n était inférieur ou égal à zéro

108
00:08:09,870 --> 00:08:15,210
on redemandait la lecture du nombre
ce qui fait que l'on garantissait donc

109
00:08:15,210 --> 00:08:19,440
à ce moment-là tout le temps de terminer
avec un <i>return</i> lorsque le nombre

110
00:08:19,440 --> 00:08:22,030
entré est strictement positif.

111
00:08:22,350 --> 00:08:26,350
Plus précisément, puisque l'on va
commencer par demander la valeur

112
00:08:26,350 --> 00:08:30,350
à l'utilisateur avant de pouvoir tester
si cette valeur est positive ou nulle,

113
00:08:30,350 --> 00:08:35,080
il s'agira concrètement d'une boucle
<i>do while</i>, donc on va pouvoir écrire ici

114
00:08:35,080 --> 00:08:41,630
la boucle <i>do while</i>, ensuite on va
s'intéresser à la condition,

115
00:08:41,630 --> 00:08:45,630
donc la condition était ici de retourner,
de s'arrêter quand on a un nombre

116
00:08:45,630 --> 00:08:50,700
strictement positif, ce qui fait que l'on
va donc vouloir boucler, répéter

117
00:08:50,700 --> 00:08:56,070
la question tant que le nombre est cette
fois-ci bien sûr négatif ou nul, on répète

118
00:08:56,070 --> 00:09:01,480
tant que l'on n'a pas atteint la condition
que l'on voulait pour faire notre <i>return</i>.

119
00:09:02,159 --> 00:09:08,729
Okay, donc on va ici rajouter le <i>return</i> n
et tant que n n'est pas celui qu'on veut,

120
00:09:08,729 --> 00:09:15,949
tant que n est négatif ou nul, on va
répéter, boucler sur donc ici bien sûr

121
00:09:15,949 --> 00:09:24,919
d'abord afficher le message, donc 
cette ligne, puis ensuite lire la réponse,

122
00:09:24,919 --> 00:09:27,929
donc on va mettre cette ligne ici.

123
00:09:27,929 --> 00:09:34,299
Au niveau des déclarations des variables,
il faudra déclarer le scanner et

124
00:09:34,299 --> 00:09:41,849
déclarer n, toutes ces lignes-là vont se
déplacer hors de la boucle puisque

125
00:09:41,849 --> 00:09:47,579
le scanner on n'a pas besoin de le répéter
dans la boucle et n on le déclare

126
00:09:47,579 --> 00:09:48,919
aussi qu'une seule fois.

127
00:09:48,919 --> 00:09:53,569
Donc plus concrètement ça donne le code
suivant : on va commencer par déclarer

128
00:09:53,569 --> 00:09:58,389
le scanner une fois pour toutes pour la
lecture sur clavier, ensuite on déclare

129
00:09:58,389 --> 00:10:02,389
la variable n, il faut la déclarer hors
de la boucle puisque on va l'utiliser

130
00:10:02,389 --> 00:10:07,179
ici pour la retourner, on l'utilise ici
dans le test qui est hors de la boucle

131
00:10:07,179 --> 00:10:10,809
en question, donc on déclare la variable
on l'initialise à une valeur qui fait

132
00:10:10,809 --> 00:10:16,719
sens, disons par exemple zéro, puis on
va ensuite écrire le bloc ici de

133
00:10:16,719 --> 00:10:20,179
répétition, le bloc sur lequel on veut
boucler, dans lequel on va afficher

134
00:10:20,179 --> 00:10:24,179
le message qui demande à l'utilisateur
d'entrer un nombre et là on peut même lui

135
00:10:24,179 --> 00:10:28,179
spécifier exactement nos intentions pour
qu'il sache quoi faire et dire

136
00:10:28,179 --> 00:10:32,179
que l'on entrer un nombre strictement
positif, puis on lit ce nombre dans

137
00:10:32,179 --> 00:10:36,179
n depuis le clavier et donc on boucle tant
que l'on n'a pas la bonne réponse,

138
00:10:36,179 --> 00:10:38,129
tant que n est négatif.

139
00:10:38,129 --> 00:10:42,129
Voilà donc comment on aurait pu corriger
l'erreur du <i>return</i> qui manquait

140
00:10:42,129 --> 00:10:46,129
en cas de n inférieur ou égal à zéro.

141
00:10:46,129 --> 00:10:49,489
Présentons maintenant quelques cas
particuliers de méthodes, en commançant

142
00:10:49,489 --> 00:10:51,199
par les méthodes sans valeur de retour.

143
00:10:51,199 --> 00:10:54,269
Je dois d'abord vous rappeler qu'une
méthode au sens java du terme n'a rien

144
00:10:54,269 --> 00:10:58,269
à voir avec une fonction mathématique, une
méthode en Java c'est simplement un bout

145
00:10:58,269 --> 00:11:02,269
de code que l'on a réservé pour pouvoir
l'utiliser, éviter la répétition,

146
00:11:02,269 --> 00:11:06,269
et en ce sens, ce bout de code n'a pas
forcément besoin de retourner quelque

147
00:11:06,269 --> 00:11:08,119
chose au reste du programme.

148
00:11:08,119 --> 00:11:13,029
Si c'est le cas, alors on va spécifier le
fait que la méthode ne retourne rien

149
00:11:13,029 --> 00:11:18,069
en utilisant comme type particulier de
retour, le type <i>void</i> pour indiquer

150
00:11:18,069 --> 00:11:20,999
que l'on ne retourne rien
au reste du programme.

151
00:11:20,999 --> 00:11:24,999
Dans ce cas-là, l'instruction <i>return</i> est
alors optionnelle, on peut tout à fait

152
00:11:24,999 --> 00:11:30,659
ne placer aucun <i>return</i> dans le corps de
la méthode, ou alors si vraiment on en a

153
00:11:30,659 --> 00:11:35,509
besoin, par exemple dans un <i>if</i>, d'arrêter
à un moment précis l'exécution

154
00:11:35,509 --> 00:11:40,219
du corps, alors on pourra à ce
moment-là utiliser l'instruction <i>return</i>.

155
00:11:40,219 --> 00:11:44,779
Prenons un exemple, avec une méthode
que je vais ici appeler <i>afficheRacine</i>

156
00:11:44,779 --> 00:11:50,379
et dont le but est d'afficher la racine
d'un paramètre de type <i>double</i> reçu ici et

157
00:11:50,379 --> 00:11:51,939
que j'appelle a.

158
00:11:51,939 --> 00:11:56,939
Si a est négatif, alors vous savez qu'on
ne peut pas calculer la racine et donc

159
00:11:56,939 --> 00:12:00,359
il n'y a rien à afficher, donc dans ce
cas-là, si la condition a négative

160
00:12:00,359 --> 00:12:04,929
est vraie, le <i>if</i> ici va se brancher sur
cette instruction <i>return</i>, il n'y a que

161
00:12:04,929 --> 00:12:08,929
l'instruction <i>return</i> ici qui va donc
mettre fin à l'exécution de cette méthode.

162
00:12:09,710 --> 00:12:15,130
Notez que comme le type de retour
ici de la méthode <i>afficheRacine</i> est <i>void</i>,

163
00:12:15,130 --> 00:12:19,130
ça veut dire que <i>afficheRacine</i> n'a rien à
renvoyer au reste du programme

164
00:12:19,130 --> 00:12:25,250
et vous voyez ici que le <i>return</i> n'a aucune
expression qui le suit, ça n'aurait pas

165
00:12:25,250 --> 00:12:29,250
de sens, on ne sait pas quoi
mettre derrière ce <i>return</i>.

166
00:12:29,250 --> 00:12:33,830
Si par contre, a est positif ou nul, à ce
moment-là la condition du <i>if</i> est

167
00:12:33,830 --> 00:12:39,010
fausse bien entendu et à ce moment-là
donc le bloc <i>if</i> est simplement ignoré

168
00:12:39,010 --> 00:12:45,460
et le programme va continuer après le
<i>if</i> par exécuter l'affichage de la racine

169
00:12:45,460 --> 00:12:51,830
carrée de a, et on arrive donc ensuite
à la fin de la méthode où on n'a pas mis

170
00:12:51,830 --> 00:12:56,500
de <i>return</i>, la méthode va se terminer,
il n'est ici pas du tout nécessaire

171
00:12:56,500 --> 00:13:00,500
de mettre un <i>return</i>, un tel <i>return</i>
est totalement optionnel.

172
00:13:01,067 --> 00:13:05,067
Autre cas particulier de méthodes,
les méthodes sans paramètres.

173
00:13:05,067 --> 00:13:08,307
Nous en avons déjà un petit peu parlé
mais je voudrais juste ici récapituler,

174
00:13:08,307 --> 00:13:12,307
ce sont des méthodes dont on n'a pas
besoin de fournir depuis le reste

175
00:13:12,307 --> 00:13:15,387
du programme de valeurs pour
qu'elles puissent fonctionner.

176
00:13:15,387 --> 00:13:18,617
Alors à ce moment-là, il suffit 
simplement dans l'entête d'indiquer

177
00:13:18,617 --> 00:13:22,617
la liste de paramètres vide par 
simplement une parenthèse ouvrante

178
00:13:22,617 --> 00:13:26,417
et une parenthèse fermante collées
sans rien au milieu.

179
00:13:26,417 --> 00:13:31,577
Prenons ici un exemple d'une méthode
dont le seul but est de demander un entier

180
00:13:31,577 --> 00:13:36,187
à l'utilisateur et donc qui doit retourner
un entier au reste du programme.

181
00:13:36,187 --> 00:13:41,467
Un exemple d'appel pourrait être le
suivant : ici on a une variable de type

182
00:13:41,467 --> 00:13:48,047
entier que l'on initialise avec le
résultat de l'appel à <i>saisieEntier</i>, et

183
00:13:48,047 --> 00:13:52,707
cette méthode <i>saisieEntier</i> n'a rien besoin
de recevoir du reste du programme,

184
00:13:52,707 --> 00:13:58,087
elle peut travailler simplement de façon
autonome en déclarant ici localement

185
00:13:58,087 --> 00:14:01,847
pour elle-même une variable dans laquelle
elle va stocker la réponse

186
00:14:01,847 --> 00:14:07,237
de l'utilisateur en affichant la question
entrer un entier à l'utilisateur,

187
00:14:07,237 --> 00:14:13,337
en lisant l'entier lu par l'utilisateur au
clavier et en le mettant dans la variable

188
00:14:13,337 --> 00:14:18,027
temporaire, locale, ici i, et en
retournant donc au reste du programme

189
00:14:18,027 --> 00:14:19,697
la variable i.

190
00:14:20,558 --> 00:14:25,128
Vous voyez bien que pour faire tout ceci,
elle n'a pas eu besoin de recevoir

191
00:14:25,128 --> 00:14:29,878
d'informations du reste du programme,
c'est une méthode sans paramètres.

192
00:14:31,231 --> 00:14:36,071
Une aparté pratique ici, le scanner
jusqu'à maintenant, nous en avions besoin

193
00:14:36,071 --> 00:14:39,291
que dans la méthode <i>main</i>, nous n'avions
qu'une seule méthode jusque là et

194
00:14:39,291 --> 00:14:42,401
nous utilisions le scanner dans la méthode
<i>main</i>, c'est pour ça que nous

195
00:14:42,401 --> 00:14:44,311
le déclarions dans cette méthode.

196
00:14:44,311 --> 00:14:49,661
Ici nous en avons besoin dans une autre
méthode, la méthode <i>saisieEntier</i>,

197
00:14:49,661 --> 00:14:54,691
alors bien sûr on pourrait avoir une
déclaration comme ça d'un scanner dans

198
00:14:54,691 --> 00:14:58,691
la méthode <i>saisieEntier</i>, mais c'est pas 
une bonne chose en soi parce que chaque

199
00:14:58,691 --> 00:15:02,481
fois que vous allez appeler <i>saisieEntier</i>,
l'idée de la fonction c'est quand même

200
00:15:02,481 --> 00:15:07,201
d'être appelée plusieurs fois, chaque fois
que vous allez comme ça faire un appel

201
00:15:07,201 --> 00:15:11,201
à <i>saisieEntier</i>, si cette ligne de
déclaration du scanner est dedans

202
00:15:11,201 --> 00:15:16,191
vous allez à chaque fois redéclarer
un clavier, or on a qu'un seul clavier,

203
00:15:16,191 --> 00:15:21,031
d'où l'idée c'est de partager ce clavier
pour tout le programme et donc de mettre

204
00:15:21,031 --> 00:15:26,631
cette ligne hors dans la classe, hors de
toute méthode ici, donc on retrouve

205
00:15:26,631 --> 00:15:33,381
la déclaration visuelle ici, static
scanner clavier etc avec le lien ici

206
00:15:33,381 --> 00:15:37,791
au clavier <i>System.in</i> mais on rajoutera 
ici pour des raisons qui seront exposées

207
00:15:37,791 --> 00:15:42,541
dans le cours programmation orientée
objet, le mot-clé <i>private</i> dedans pour

208
00:15:42,541 --> 00:15:43,561
les bonnes pratiques.

209
00:15:43,561 --> 00:15:48,781
En l'état, si vous avez besoin du scanner
plus largement que dans la méthode <i>main</i>,

210
00:15:48,781 --> 00:15:52,341
je vous encourage donc
à suivre cette syntaxe ici.

211
00:15:53,250 --> 00:15:58,460
Pour terminer, je voudrais parler de la
méthode <i>main</i>, c'est aussi une méthode,

212
00:15:58,460 --> 00:16:03,960
c'est simplement une méthode dont le nom
et l'entête ont été imposé,

213
00:16:03,960 --> 00:16:08,820
c'est la méthode avec laquelle tout 
programme Java va démarrer,

214
00:16:08,820 --> 00:16:12,820
c'est la première méthode qui sera
exécutée lorsqu'on démarre le programme.

215
00:16:12,820 --> 00:16:16,820
L'entête imposée pour <i>main</i> est le
suivant, où sans trop entrer dans

216
00:16:16,820 --> 00:16:21,810
les détails on voit ici que <i>main</i> reçoit 
sous forme d'un tableau de chaîne

217
00:16:21,810 --> 00:16:27,520
de caractères, une liste d'arguments qui
viendraient de l'extérieur,

218
00:16:27,520 --> 00:16:31,520
qui viendraient du programme qui appelle
un autre programme mais ceci

219
00:16:31,520 --> 00:16:35,520
nous emmènerait un petit peu trop loin,
nous ne l'utiliserons pas dans ce cours,

220
00:16:35,520 --> 00:16:40,450
tout ce qu'il faut savoir c'est que le
prototype de <i>main</i> doit être celui

221
00:16:40,450 --> 00:16:41,780
indiqué ici.
