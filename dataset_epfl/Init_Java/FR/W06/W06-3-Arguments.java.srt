1
00:00:05,161 --> 00:00:08,911
Dans une séquence précédente, 
nous avons examiné les différentes étapes

2
00:00:08,911 --> 00:00:11,391
qui se déroulent lorsqu'on
appelle une méthode.

3
00:00:11,391 --> 00:00:15,261
Dans les exemple vus jusqu'alors, 
les arguments passés à la méthode étaient

4
00:00:15,261 --> 00:00:18,641
soit de simples valeurs, 
soit des expressions à évaluer.

5
00:00:18,641 --> 00:00:21,941
Nous allons maintenant affiner un petit
peu le discours et voir ce qui se passe

6
00:00:21,941 --> 00:00:25,061
lorsque l'argument passé à la méthode
est une variable,

7
00:00:25,061 --> 00:00:30,540
et en particulier dans la situation 
où la méthode modifie le paramètre

8
00:00:30,540 --> 00:00:32,739
qui lui est passé.

9
00:00:32,739 --> 00:00:36,337
Donc nous allons nous placer dans une
situation concrète suivante.

10
00:00:37,036 --> 00:00:40,138
Supposons par exemple que nous soyons
dans un programme principal qui déclare

11
00:00:40,138 --> 00:00:44,138
une variable v1 du même type que
celui attendu par la méthode.

12
00:00:44,978 --> 00:00:50,058
Nous invoquons ensuite la méthode en
lui passant un argument, la variable v1.

13
00:00:50,058 --> 00:00:55,708
Nous avons vu lors de la dernière séquence
que v1 était copiée dans v

14
00:00:55,708 --> 00:00:59,708
et cette méthode a pour vocation
de modifier v.

15
00:01:00,289 --> 00:01:03,579
Donc la question que nous posons
concrètement maintenant

16
00:01:03,579 --> 00:01:07,808
c'est au sortir de cette méthode, 
est-ce que la variable v1 déclarée

17
00:01:07,808 --> 00:01:11,983
dans ce programme principal
sort modifiée ou pas de ce traitement ?

18
00:01:12,539 --> 00:01:18,369
En programmation de façon générale,
on dira que v est passé par valeur

19
00:01:18,369 --> 00:01:21,409
si la réponse à cette question est non,

20
00:01:22,737 --> 00:01:27,217
et on dira a contrario que v est passé
par référence

21
00:01:28,217 --> 00:01:29,667
si la réponse à la question est oui.

22
00:01:30,764 --> 00:01:35,044
Dans le cas du passage par valeur, 
ce qui se produit est que la méthode

23
00:01:35,044 --> 00:01:39,864
va travailler sur une copie locale de
l'argument qui lui est passé, v1.

24
00:01:39,864 --> 00:01:45,214
Donc, au moment de l'appel, lorsqu'on
réalise cet appel, la variable v1

25
00:01:49,030 --> 00:01:55,950
est tout simplement copiée dans une zone
locale v qui est locale à la fonction,

26
00:01:57,069 --> 00:02:01,069
et toute altération de cette zone locale
n'a aucune incidence sur

27
00:02:02,032 --> 00:02:03,832
la variable d'origine.

28
00:02:03,832 --> 00:02:07,682
En Java, nous allons nous poser
cependant la question de que signifie

29
00:02:07,682 --> 00:02:09,432
modifier v concrètement ?

30
00:02:09,432 --> 00:02:13,432
Car la réponse à cette question va
dépendre de la nature du type.

31
00:02:14,566 --> 00:02:18,096
Lors d'une séquence antérieure sur les
types, nous avons vu qu'en Java

32
00:02:18,096 --> 00:02:22,096
les données de types élémentaires
n'étaient pas manipulées de la même façon

33
00:02:22,096 --> 00:02:24,146
que les données de types évolués.

34
00:02:24,146 --> 00:02:27,886
Donc types évolués, on peut par exemple
penser aux tableaux ou aux chaînes

35
00:02:27,886 --> 00:02:29,106
de caractères.

36
00:02:29,106 --> 00:02:34,316
Par conséquent, si je suis en train de
manipuler une donnée de type élémentaire,

37
00:02:35,168 --> 00:02:39,168
modifier v n'a qu'une seule
interprétation possible.

38
00:02:39,168 --> 00:02:43,168
Si ici je tente de modifier v en lui
affectant une valeur différente,

39
00:02:43,168 --> 00:02:47,668
il est clair que désormais la zone mémoire
nommée v va contenir une valeur

40
00:02:47,668 --> 00:02:51,668
distincte de ce qui était sa valeur
précédente, la valeur dix

41
00:02:51,668 --> 00:02:53,008
en l'occurrence ici.

42
00:02:53,008 --> 00:02:55,998
Par contre, si je suis en train de
travailler avec des données de type évolué

43
00:02:55,998 --> 00:02:58,028
le discours est différent.

44
00:02:58,028 --> 00:03:01,538
Nous avons vu qu'en effet les valeurs de
type évolué étaient manipulées

45
00:03:01,538 --> 00:03:03,968
via des références, via des indirections.

46
00:03:03,968 --> 00:03:07,968
Si je manipule une donnée de type string
par exemple, je ne manipule pas

47
00:03:07,968 --> 00:03:13,668
directement la chaîne de caractères,
mais je manipule une référence

48
00:03:13,668 --> 00:03:14,998
vers la chaîne de caractères.

49
00:03:14,998 --> 00:03:18,483
Par conséquent, lorsque je parle de
modifier v,

50
00:03:19,268 --> 00:03:20,778
qu'est-ce que ça signifie exactement ?

51
00:03:20,778 --> 00:03:23,588
Suis-je en train de modifier la référence?

52
00:03:23,588 --> 00:03:27,588
Suis-je en train de modifier la zone
mémoire pointée par la référence ?

53
00:03:28,630 --> 00:03:32,630
Plaçons-nous maintenant dans la
situation où notre méthode prend en

54
00:03:32,630 --> 00:03:35,110
paramètre une donnée de type évolué.

55
00:03:35,484 --> 00:03:39,484
Par exemple, on peut imaginer que type
corresponde à un tableau d'entiers,

56
00:03:39,861 --> 00:03:45,351
dans ce cas la référence v est une
indirection, une référence

57
00:03:45,351 --> 00:03:48,561
vers un tableau d'entiers que l'on peut
schématiser de cette façon-là.

58
00:03:49,883 --> 00:03:53,771
Il y a donc deux possibilités de
modification ici.

59
00:03:54,750 --> 00:03:57,337
Celle qui vient peut-être 
le plus naturellement à l'esprit

60
00:03:57,337 --> 00:04:00,689
consiste à mettre une valeur
alternative dans v,

61
00:04:00,689 --> 00:04:03,623
ce qui veut dire qu'on
est en train de modifier la référence

62
00:04:03,623 --> 00:04:07,623
elle-même, ce qui aurait pour incidence,
puisqu'ici je change la référence

63
00:04:07,623 --> 00:04:11,623
elle-même, de faire pointer v
vers un autre tableau.

64
00:04:12,764 --> 00:04:19,134
Deuxième possibilité de modification,
je peux via la référence modifier l'objet

65
00:04:19,134 --> 00:04:25,142
référencé, par exemple écrire ceci,
ce qui aura pour conséquence d'altérer

66
00:04:25,142 --> 00:04:27,964
la seconde entrée du tableau
de cette façon-là.

67
00:04:29,600 --> 00:04:33,375
Il y a donc en Java deux questions
à se poser au lieu d'une.

68
00:04:34,456 --> 00:04:37,923
Première question : si ma
méthode altère la référence,

69
00:04:40,429 --> 00:04:43,915
est-ce que la variable, la référence,
passée en argument se trouve modifiée

70
00:04:44,093 --> 00:04:46,139
au sortir de la méthode ?

71
00:04:47,309 --> 00:04:48,909
Deuxième question :

72
00:04:50,232 --> 00:04:56,882
si je modifie l'objet référencé par v1
via v, est-ce que l'objet référencé

73
00:04:56,882 --> 00:04:59,181
par v1 est modifié ?

74
00:05:00,803 --> 00:05:03,781
Alors il faut savoir qu'en Java,
il n'existe en réalité que le passage

75
00:05:03,781 --> 00:05:07,051
par valeur, ce qui signifie concrètement
qu'une méthode travaille toujours

76
00:05:07,051 --> 00:05:11,051
systématiquement qu'avec une copie de
l'argument qui lui est passé

77
00:05:11,051 --> 00:05:12,651
au moment de l'appel.

78
00:05:12,651 --> 00:05:16,651
Dans le cas des types évolués c'est donc
bien une référence qui est copiée.

79
00:05:16,651 --> 00:05:20,806
Si je me place ici dans une situation
concrète où j'ai une méthode m,

80
00:05:20,806 --> 00:05:25,410
ici sans type de retour, 
qui prend en paramètre

81
00:05:25,964 --> 00:05:27,781
une donnée d'un type quelconque
nommée x,

82
00:05:29,774 --> 00:05:33,774
supposons par exemple que dans un
programme principal j'invoque cette

83
00:05:33,774 --> 00:05:39,904
méthode de la façon suivante où je déclare
une donnée val du bon type

84
00:05:39,904 --> 00:05:44,351
ensuite j'appelle ma méthode en lui
passant en argument val,

85
00:05:45,234 --> 00:05:48,580
il faut savoir qu'à ce moment-là, 
la valeur de val est copiée

86
00:05:48,580 --> 00:05:50,484
dans une zone locale à la méthode.

87
00:05:51,642 --> 00:05:56,442
Donc, reprenons notre question de départ,
en nous intéressant au cas où type

88
00:05:56,442 --> 00:05:58,282
est un type élémentaire.

89
00:05:58,894 --> 00:06:02,604
Par exemple, on peut imaginer que type
correspond au type entier, int,

90
00:06:03,226 --> 00:06:08,006
et donc le traitement modifiant v pourrait
être simplement ici une incrémentation

91
00:06:08,006 --> 00:06:09,396
de cette nature-là.

92
00:06:10,211 --> 00:06:16,201
Dans notre programme principal, 
v1 serait déclaré de type entier,

93
00:06:16,201 --> 00:06:20,931
en lui affectant une valeur d'origine,
et on invoquerait la méthode sur v1.

94
00:06:21,619 --> 00:06:26,311
Donc ici en l'occurrence, nous nous
trouvons avec une variable v1 qui contient

95
00:06:27,159 --> 00:06:31,159
la valeur trois et au moment
où cet appel est réalisé,

96
00:06:32,708 --> 00:06:38,288
v1 est en fait copié dans une zone
locale à la méthode qui s'appelle v,

97
00:06:38,288 --> 00:06:40,808
donc ici on aurait une copie de la valeur.

98
00:06:40,808 --> 00:06:44,878
Si on exécute ensuite le corps
de la méthode,

99
00:06:46,513 --> 00:06:50,513
on altérerait le contenu de v puisque
on est entrain de travailler sur v

100
00:06:50,885 --> 00:06:56,293
et on voit qu'à nul moment la valeur
v1 n'est concernée par cette modification.

101
00:06:58,111 --> 00:07:03,517
Donc dans le cas où le type est
élémentaire, la réponse à cette question

102
00:07:03,991 --> 00:07:06,771
est non en raison du passage par valeur.

103
00:07:07,142 --> 00:07:10,482
Donc, plaçons-nous maintenant dans
la situation où notre méthode travaille

104
00:07:10,482 --> 00:07:12,692
avec une donnée de type évolué.

105
00:07:12,692 --> 00:07:16,271
Prenons en guise de type évolué par
exemple un tableau d'entiers,

106
00:07:16,692 --> 00:07:20,052
donc ici dans notre programme principal
notre écririons quelque chose

107
00:07:20,052 --> 00:07:21,672
qui ressemble à ceci.

108
00:07:21,672 --> 00:07:25,052
Ici, nous nous trouvons en mémoire dans la
situation suivante ; donc nous avons une

109
00:07:25,052 --> 00:07:29,052
variable v1 qui contient une référence
en quelque sorte l'adresse vers

110
00:07:31,696 --> 00:07:33,486
le tableau un, deux, trois.

111
00:07:34,365 --> 00:07:39,195
Donc au moment où est réalisé cet appel
de méthode, nous avons vu qu'en Java

112
00:07:39,195 --> 00:07:44,285
on ne connaît que le passage par valeur,
ce qui signifie que v1 va être copié

113
00:07:44,285 --> 00:07:48,285
dans une zone locale v,
locale à la méthode.

114
00:07:48,285 --> 00:07:53,465
Donc ici nous avons une zone mémoire v,
locale à la méthode, et dans laquelle

115
00:07:53,465 --> 00:07:58,545
nous allons copier le contenu de v1,
c'est-à-dire la référence vers le tableau.

116
00:07:58,545 --> 00:08:03,235
On voit bien ici que autant v que v1
pointent vers le même tableau en mémoire.

117
00:08:03,922 --> 00:08:08,612
Ceci signifie que si par exemple, je tente
maintenant de modifier l'objet

118
00:08:08,612 --> 00:08:12,612
référencé via v, donc si j'essaie dans
la méthode de faire ceci,

119
00:08:14,379 --> 00:08:17,434
donc ici je modifie le
tableau via ce lien,

120
00:08:19,955 --> 00:08:23,511
mais puisque autant v que v1 pointent
vers le même emplacement,

121
00:08:23,875 --> 00:08:27,955
les modifications faites via
v sont visibles via v1.

122
00:08:28,622 --> 00:08:34,342
Ceci donc signifie que dans le cas où
je réalise un traitement dans la méthode

123
00:08:34,342 --> 00:08:41,042
qui modifie l'objet référencé, la réponse
à cette question est oui.

124
00:08:43,397 --> 00:08:47,397
Intéressons-nous maintenant à la seconde
situation, essayons de réaliser un

125
00:08:47,397 --> 00:08:51,031
traitement qui modifie, dans la méthode,
la référence elle-même.

126
00:08:52,669 --> 00:08:56,669
Donc ici, du fait du passage par valeur,
au moment de cet appel nous avons

127
00:08:56,669 --> 00:09:01,609
toujours une copie de v1 dans v, ce qui
signifie que nous sommes dans

128
00:09:01,609 --> 00:09:06,817
cette situation-là où nous avons copié
la référence dans v,

129
00:09:06,817 --> 00:09:08,867
la référence dans le tableau dans v.

130
00:09:09,645 --> 00:09:12,925
Maintenant, tentons de modifier cette
référence, donc ceci peut se faire

131
00:09:12,925 --> 00:09:18,078
par exemple de cette façon-là, je déclare
un autre tableau t, qui a d'autres

132
00:09:18,078 --> 00:09:23,305
valeurs, et je modifie la référence
elle-même donc je réalise

133
00:09:23,305 --> 00:09:25,536
cette affectation-là.

134
00:09:25,536 --> 00:09:30,796
Donc ici, je suis dans cette situation-là
en mémoire, j'ai donc une variable t qui

135
00:09:30,796 --> 00:09:37,671
contient une référence vers un autre
tableau, j'ai donc ce lien, et je fais

136
00:09:37,886 --> 00:09:42,936
cette affectation qui signifie que
j'altère la référence elle-même,

137
00:09:44,758 --> 00:09:48,528
ce qui veut dire que je casse ce lien,
ce lien n'existe plus, désormais ma

138
00:09:48,528 --> 00:09:52,758
variable locale pointe vers le
tableau référencé par t.

139
00:09:53,557 --> 00:09:57,557
On voit donc que par le biais de cette
manipulation, comme on a modifié la

140
00:09:57,557 --> 00:10:05,485
référence sur une copie locale, v1 n'est
nullement affecté par cette modification,

141
00:10:05,485 --> 00:10:09,835
lorsque je termine d'exécuter ma méthode,
donc à ce point-là j'ai toujours

142
00:10:09,835 --> 00:10:13,835
au sein de v1 la valeur adresse.

143
00:10:14,674 --> 00:10:19,758
Ce qui signifie concrètement que si je
réalise un traitement qui modifie

144
00:10:19,758 --> 00:10:25,238
la référence elle-même, la réponse à
cette question demeure non, toujours

145
00:10:25,250 --> 00:10:27,250
en raison du passage par valeur.

146
00:10:28,471 --> 00:10:32,741
Illustrons maintenant cette discussion sur
des cas concrets, des exemples concrets.

147
00:10:32,741 --> 00:10:36,471
Donc, nous avons ici à faire à un petit
programme principal qui commence

148
00:10:36,474 --> 00:10:41,837
par déclarer une variable val, cette
variable est de type élémentaire,

149
00:10:41,837 --> 00:10:45,907
de type int, ce qui signifie que la valeur
qui lui est associée est directement

150
00:10:45,907 --> 00:10:48,517
stockée dans val, il n'y a pas
d'indirection, pas de référence.

151
00:10:48,801 --> 00:10:55,201
La seconde instruction invoque une
méthode m en lui passant en argument val.

152
00:10:55,864 --> 00:10:59,864
Nous avons vu qu'en Java il n'existe que
le passage par valeur, ce qui signifie que

153
00:10:59,864 --> 00:11:05,474
la valeur de val est copiée dans une zone
locale à la méthode qui s'appelle ici x.

154
00:11:05,474 --> 00:11:09,204
Donc nous nous trouvons dans la situation
où x contient la même valeur

155
00:11:09,204 --> 00:11:11,894
que val, mais il s'agit d'une
autre zone en mémoire.

156
00:11:11,894 --> 00:11:16,562
Ensuite s'exécute la première instruction
du corps de la méthode qui a pour

157
00:11:16,562 --> 00:11:20,338
rôle d'incrémenter la valeur de x, nous
nous trouvons avec la valeur deux

158
00:11:20,338 --> 00:11:24,738
pour x, et lorsqu'on fait afficher la
valeur de x on voit bien qu'il s'agit

159
00:11:24,738 --> 00:11:26,263
bien de la valeur deux.

160
00:11:26,263 --> 00:11:30,187
Ensuite, lorsque la méthode a terminé son
exécution, si on veut faire afficher

161
00:11:30,187 --> 00:11:34,547
la valeur de val, on réalise bien que
cette valeur est demeurée inchangée.

162
00:11:36,834 --> 00:11:40,534
Elle n'a pas été modifiée en raison
du passage par valeur.

163
00:11:42,048 --> 00:11:45,283
Tout ceci pour dire que les modifications
dans ce cas de figure qui sont

164
00:11:45,283 --> 00:11:49,643
effectuées à l'intérieur de la méthode
ne se répercutent pas sur la variable

165
00:11:49,653 --> 00:11:50,993
extérieure val.

166
00:11:51,997 --> 00:11:55,217
Autre situation, celle de la modification
d'une référence dans le corps

167
00:11:55,222 --> 00:11:56,462
d'une méthode.

168
00:11:57,434 --> 00:12:00,266
ici, nous nous trouvons dans la situation
où nous avons un programme

169
00:12:00,266 --> 00:12:04,545
principal qui déclare une variable tab
qui est de type évolué, c'est un

170
00:12:04,545 --> 00:12:09,532
tableau d'entiers, donc les types évolués
sont manipulés via des interactions,

171
00:12:09,532 --> 00:12:12,032
nous nous trouvons donc en
mémoire dans cette situation-là,

172
00:12:14,073 --> 00:12:18,323
où tab pointe vers un tableau qui
en l'occurrence contient une seule

173
00:12:18,323 --> 00:12:19,983
cellule contenant un.

174
00:12:21,065 --> 00:12:25,500
Ensuite, il y a l'appel de la méthode m
qui était exécuté, et nous avons vu

175
00:12:25,500 --> 00:12:29,532
qu'il n'y a que du passage par valeur en
Java, ce qui signifie que tab est copié

176
00:12:29,532 --> 00:12:31,992
dans une zone locale à
la méthode qui est x.

177
00:12:33,120 --> 00:12:35,900
Donc nous nous trouvons maintenant
dans cette situation où nous avons

178
00:12:35,913 --> 00:12:40,620
copié la valeur de tab dans x et donc
x pointe vers le même tableau en mémoire.

179
00:12:42,229 --> 00:12:44,579
En exécutant le corps de la méthode,

180
00:12:46,587 --> 00:12:49,417
la première instruction rencontrée est
celle créer un nouveau tableau.

181
00:12:50,790 --> 00:12:55,697
Ce dernier va donc pointer vers le nouveau
tableau en mémoire avec une autre

182
00:12:55,697 --> 00:13:00,307
référence, qui en l'occurrence contient
une seule et unique cellule valant cent.

183
00:13:01,690 --> 00:13:06,194
Et la seconde instruction tente d'altérer
la référence elle-même, donc on

184
00:13:06,226 --> 00:13:07,723
affecte à x

185
00:13:10,214 --> 00:13:14,474
l'adresse du nouveau tableau, ce qui
a pour conséquence de casser

186
00:13:14,474 --> 00:13:20,074
ce lien et d'en créer un
nouveau vers ce tableau.

187
00:13:20,853 --> 00:13:26,823
Si maintenant on fait afficher la valeur
de la première cellule du tableau x,

188
00:13:28,229 --> 00:13:34,379
x de zéro étant donné le lien nouvellement
créé, vaut clairement cent.

189
00:13:35,759 --> 00:13:42,279
Lorsque la méthode a terminé son exécution
et qu'on fait afficher la valeur

190
00:13:42,285 --> 00:13:46,705
de la première cellule du tableau tab,
on voit que l'altération faite

191
00:13:46,705 --> 00:13:52,005
sur la référence elle-même n'est
nullement visible sur l'argument

192
00:13:52,020 --> 00:13:57,493
en raison du passage par valeur et du
coup la valeur de tab de zéro reste

193
00:13:57,493 --> 00:14:00,533
inchangée et vaut toujours donc un.

194
00:14:02,083 --> 00:14:06,083
Donc le résultat de l'exécution de ce
programme nous montre que

195
00:14:07,653 --> 00:14:14,232
les modifications faites dans la méthode
sur la référence elle-même ne sont pas

196
00:14:14,232 --> 00:14:18,732
visibles à l'extérieur de la méthode,
toujours en raison du passage par valeur.

197
00:14:19,825 --> 00:14:23,825
Dernière situation, celle de la
modification de l'objet référencé dans

198
00:14:23,825 --> 00:14:25,535
le corps d'une méthode.

199
00:14:25,535 --> 00:14:29,893
Donc nous nous trouvons dans la même
situation que l'exemple précédent

200
00:14:29,893 --> 00:14:35,686
où le programme principal crée un tableau
contenant une seule cellule valant un.

201
00:14:37,065 --> 00:14:43,334
Au moment de l'appel de la méthode m en
lui passant l'argument tab, en raison

202
00:14:43,334 --> 00:14:50,084
toujours du passage par valeur, tab est
copié dans x, x qui est une zone locale

203
00:14:51,876 --> 00:14:53,176
à la méthode m.

204
00:14:53,176 --> 00:14:58,116
Nous voyons bien qu'ici autant tab que x
référence le même tableau.

205
00:14:59,316 --> 00:15:04,300
Donc ici en exécutant le corps de la
méthode m, la première instruction

206
00:15:04,300 --> 00:15:08,660
rencontrée va altérer la première cellule
du tableau pointé par x,

207
00:15:10,078 --> 00:15:16,708
ce qui aura pour effet de
modifier cette cellule.

208
00:15:17,926 --> 00:15:23,128
Et nous voyons que la modification faite
sur la première cellule du tableau x

209
00:15:24,146 --> 00:15:26,847
est également visible dans tab.

210
00:15:27,286 --> 00:15:32,272
Donc l'exécution de cette instruction
d'affichage va clairement afficher

211
00:15:32,272 --> 00:15:34,713
que x zéro a pour valeur cent.

212
00:15:35,913 --> 00:15:40,414
Lorsque nous terminons l'exécution de la
méthode et passons à l'affichage suivant,

213
00:15:41,430 --> 00:15:45,430
étant donné que aussi bien tab que x
pointent vers le même tableau,

214
00:15:45,430 --> 00:15:49,120
l'affichage de la valeur de tab de
zéro sera également cent.

215
00:15:50,481 --> 00:15:57,728
Donc la situation ici est que la
modification faite à l'intérieur de

216
00:15:57,728 --> 00:16:02,258
la méthode est également visible à
l'extérieur de la méthode en dépit du

217
00:16:02,258 --> 00:16:03,998
passage par valeur.
Pourquoi ?

218
00:16:03,998 --> 00:16:08,731
Parce que aussi bien la zone locale à la
méthode que celle de l'argument

219
00:16:08,731 --> 00:16:11,201
pointe en réalité sur le même tableau.
