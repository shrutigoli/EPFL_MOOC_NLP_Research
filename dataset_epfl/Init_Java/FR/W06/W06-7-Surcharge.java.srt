1
00:00:05,526 --> 00:00:08,749
Terminons par une notion assez simple,
qu'est la surcharge de méthodes.

2
00:00:08,749 --> 00:00:13,253
En JAVA, il est possible de définir
plusieurs méthodes ayant le même nom,

3
00:00:13,253 --> 00:00:16,802
du moment qu'elles n'aient pas
les mêmes listes de paramètres.

4
00:00:16,802 --> 00:00:19,836
C'est à dire si les nombres
de leurs paramètres

5
00:00:19,836 --> 00:00:21,978
ou si les types de ces paramètres,

6
00:00:21,978 --> 00:00:23,545
sont différents.

7
00:00:23,660 --> 00:00:26,697
C'est donc ce qu'on appelle
la surcharge de méthodes

8
00:00:26,697 --> 00:00:30,212
et c'est très pratique quand on doit
écrire des méthodes

9
00:00:31,102 --> 00:00:33,607
qui doivent faire
des traitements de même nature,

10
00:00:33,607 --> 00:00:38,114
mais dont ces traitements
doivent dépendre du type des paramètres.

11
00:00:38,464 --> 00:00:39,460
Donc en JAVA,

12
00:00:39,460 --> 00:00:42,742
ce qui différencient deux méthodes,
ce n'est pas seulement leurs noms

13
00:00:42,742 --> 00:00:44,971
mais aussi le type de leurs paramètres,

14
00:00:44,971 --> 00:00:49,283
ce qu'on appelle techniquement
la signature de la fonction.

15
00:00:50,203 --> 00:00:54,514
A noter que le type de retour lui,
ne fait pas partie de cette distinction.

16
00:00:54,994 --> 00:00:59,007
On n'a pas le droit d'avoir deux fonctions
de mêmes noms et de mêmes paramètres

17
00:00:59,007 --> 00:01:02,822
qui ne différeraient
que par le type de retour.

18
00:01:03,532 --> 00:01:06,899
C'est à dire que je peux
déclarer 2 fonctions <i>f</i>

19
00:01:07,469 --> 00:01:12,445
ayant pour la première,
un paramètre de type <i>int</i>,

20
00:01:12,445 --> 00:01:16,450
pour la deuxième
un paramètre de type <i>double</i>.

21
00:01:17,940 --> 00:01:23,866
Et ces deux fonctions peuvent avoir
le même type de retour.

22
00:01:25,136 --> 00:01:28,999
Par contre, je ne peux pas avoir
deux fonctions de mêmes noms

23
00:01:30,159 --> 00:01:35,391
ayant toutes les deux
un paramètre de type <i>int</i>

24
00:01:35,391 --> 00:01:38,527
mais qui différeraient
par le type du résultat,

25
00:01:38,527 --> 00:01:43,385
par exemple <i>int</i> pour la première,
et <i>double</i> pour la seconde.

26
00:01:44,445 --> 00:01:48,126
Donc en résumé, en JAVA,
on peut avoir des fonctions de mêmes noms,

27
00:01:48,126 --> 00:01:51,104
mais qui diffèrent dans le type
de leurs paramètres.

28
00:01:52,484 --> 00:01:56,852
Par exemple je peux définir ces 3 méthodes
qui s'appellent toutes les 3 <i>affiche</i>,

29
00:01:57,872 --> 00:02:00,211
et qui sont bien 3 méthodes différentes

30
00:02:00,211 --> 00:02:03,103
puisque leur liste
de paramètres sont différentes.

31
00:02:04,353 --> 00:02:07,295
La première méthode
a un paramètre de type <i>int</i>.

32
00:02:07,295 --> 00:02:09,812
La deuxième un paramètre de type <i>double</i>.

33
00:02:09,812 --> 00:02:12,956
Et la troisième 2 paramètres de type <i>int</i>.

34
00:02:13,556 --> 00:02:18,674
Quand j'exécute <i>affiche(1)</i>,
comme l'argument <i>1</i> est de type <i>int</i>,

35
00:02:18,674 --> 00:02:21,782
c'est la première méthode
qui va être appelée

36
00:02:21,782 --> 00:02:28,001
et qui va m'afficher <i>entier : 1</i>

37
00:02:28,601 --> 00:02:35,022
Quand j'exécute <i>affiche (1.0)</i>,
l'argument est de type <i>double</i>

38
00:02:35,022 --> 00:02:37,809
et c'est la deuxième méthode
qui va être appelée ;

39
00:02:38,679 --> 00:02:44,405
qui va m'afficher <i>réel : 1.0</i>

40
00:02:44,405 --> 00:02:47,375
Et quand j'exécute <i>affiche (1,1)</i>

41
00:02:47,845 --> 00:02:50,213
c'est la troisième méthode
qui va être appelée.

42
00:02:50,273 --> 00:02:53,645
<i>x1</i> va valoir 1, <i>x2</i> : 1 également,

43
00:02:54,575 --> 00:02:56,330
et la méthode va m'afficher

44
00:02:57,520 --> 00:03:00,375
<i>couple : 1,1</i>

45
00:03:01,435 --> 00:03:04,830
Terminons cette vidéo par une vue
d'ensemble de la version finale,

46
00:03:04,830 --> 00:03:08,029
de l'exemple avec lequel
nous avions commencé cette leçon.

47
00:03:08,029 --> 00:03:12,127
Le but est principalement de vous montrer
comment se structure le programme,

48
00:03:12,127 --> 00:03:15,074
c'est-à-dire où se trouvent
les différentes méthodes,

49
00:03:15,074 --> 00:03:18,304
ou la déclaration de la variable
de type <i>scanner</i> par exemple.

50
00:03:19,134 --> 00:03:23,195
A ce stade du cours, un programme JAVA
est constitué d'une seule classe,

51
00:03:23,195 --> 00:03:26,605
qui contient la méthode
<i>main</i> qui se trouve ici.

52
00:03:27,905 --> 00:03:30,528
Les autres méthodes
servent à modulariser <i>main</i>.

53
00:03:30,528 --> 00:03:34,132
L'idée est d'avoir un programme principal,
c'est-à-dire une méthode <i>main</i>,

54
00:03:34,132 --> 00:03:38,480
concis et des méthodes auxiliaires
permettant sa modularisation.

55
00:03:38,480 --> 00:03:41,284
Ici nous avons 3 méthodes auxiliaires,

56
00:03:41,284 --> 00:03:44,084
que l'on a placées à la suite
de la méthode <i>main</i>,

57
00:03:44,084 --> 00:03:46,783
mais toujours à l'intérieur
de la classe unique,

58
00:03:46,783 --> 00:03:48,788
que constitue notre programme.

59
00:03:49,688 --> 00:03:52,006
La modularisation pourrait
être en fait améliorée.

60
00:03:52,006 --> 00:03:55,294
La méthode <i>saisie et calcul</i> pourrait
utiliser une méthode supplémentaire,

61
00:03:55,824 --> 00:03:58,419
qu'on pourrait appeler <i>saisie</i>,
et qui prendrait en arguments,

62
00:03:58,419 --> 00:04:02,054
les bornes de l'intervalle
dans lequel saisir une valeur.

63
00:04:02,864 --> 00:04:05,713
<i>Saisie et calcul</i> pourrait alors
invoquer cette méthode <i>saisir</i>,

64
00:04:05,713 --> 00:04:09,606
une fois pour la saisie du temps
et une fois pour le saisie du score,

65
00:04:09,606 --> 00:04:13,301
ce qui éviterait la duplication
de la boucle de <i>while</i>.

66
00:04:13,741 --> 00:04:17,942
Vous constaterez aussi que l'on a déclaré
une seule variable de type <i>scanner</i>,

67
00:04:17,942 --> 00:04:23,209
à l'extérieur de la méthode, tout au début
de la classe, plus exactement ici.

68
00:04:23,859 --> 00:04:25,749
Cette variable s'appelle <i>clavier</i>

69
00:04:25,749 --> 00:04:28,380
et elle est accessible
par toutes les méthodes

70
00:04:28,610 --> 00:04:31,064
qui sont définies
entre cette accolade ouvrante

71
00:04:32,174 --> 00:04:34,887
et cette accolade fermante.

72
00:04:35,887 --> 00:04:37,793
On dit que la variable <i>clavier</i>

73
00:04:37,793 --> 00:04:40,296
est de portée globale
dans toute la classe.

74
00:04:40,676 --> 00:04:45,022
En effet, cette variable <i>clavier</i>
est utilisée ici et ici,

75
00:04:45,022 --> 00:04:47,737
dans la méthode <i>saisie et calcul</i>.

76
00:04:47,737 --> 00:04:50,547
Mais l'on peut parfaitement
imaginer qu'elle soit utile

77
00:04:50,547 --> 00:04:53,006
à d'autres méthodes du programme.

78
00:04:53,666 --> 00:04:56,100
Déclarer qu'une seule variable
de type <i>scanner</i>,

79
00:04:56,100 --> 00:04:58,767
c'est ce qu on fait généralement
pour des programmes simples

80
00:04:58,767 --> 00:05:01,713
avec une seule classe
contenant la méthode <i>main</i> comme ici.

81
00:05:02,483 --> 00:05:04,815
Comme cette variable correspond
au clavier de l'ordinateur,

82
00:05:04,815 --> 00:05:08,653
c'est assez logique puisqu'un ordinateur
n'a qu'un seul clavier.

83
00:05:09,543 --> 00:05:12,689
C'était la dernière vidéo
de notre leçon sur la méthode en JAVA.

84
00:05:13,409 --> 00:05:16,622
Je vous invite maintenant à répondre
au Quizz et à faire les exercices.

85
00:05:17,372 --> 00:05:18,703
Bon courage !
