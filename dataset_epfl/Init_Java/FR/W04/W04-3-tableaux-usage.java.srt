1
00:00:03,557 --> 00:00:06,666
Nous savons à ce stade déclarer 
et initialiser un tableau de taille fixe

2
00:00:06,666 --> 00:00:09,440
Nous allons nous intéresser 
aux diverses manipulations classiques

3
00:00:09,440 --> 00:00:10,983
qu'on peut faire sur de tels tableaux.

4
00:00:10,983 --> 00:00:13,419
Première manipulation : l'affichage.

5
00:00:13,419 --> 00:00:17,407
Imaginons par exemple, 
que nous ayons déclaré et initialisé

6
00:00:17,407 --> 00:00:20,190
un tableau <i>t1</i> de cette façon-là.

7
00:00:20,190 --> 00:00:23,405
Nous allons aboutir 
à la situation suivante en mémoire,

8
00:00:23,405 --> 00:00:28,540
Dans la variable <i>t1</i>, nous avons une référence, 
une adresse vers le tableau.

9
00:00:28,540 --> 00:00:32,677
Le tableau est initialisé, ici, de cette façon.

10
00:00:32,677 --> 00:00:35,672
Supposons maintenant que je souhaite 
afficher le tableau en utilisant simplement

11
00:00:35,672 --> 00:00:37,428
une instruction telle que celle-ci.

12
00:00:37,428 --> 00:00:40,822
Je passe à l'instruction <i>System.out.println</i>,

13
00:00:40,822 --> 00:00:43,275
le tableau <i>t1</i>
que je souhaite faire afficher.

14
00:00:43,275 --> 00:00:46,305
Ici, ce que je vais afficher, 
c'est le contenu de <i>t1</i>

15
00:00:46,305 --> 00:00:47,865
qui se trouve être une référence.

16
00:00:47,865 --> 00:00:51,590
Ceci va se traduire par un affichage
un peu étrange

17
00:00:51,590 --> 00:00:53,004
qui aura cette allure-là.

18
00:00:53,004 --> 00:00:59,450
Quelque chose comme <i>fe25235d</i>
qui va correspondre à quelque chose

19
00:00:59,450 --> 00:01:01,560
qui est une référence vers le tableau,

20
00:01:01,560 --> 00:01:03,407
quelque chose de pas très compréhensible.

21
00:01:03,427 --> 00:01:07,694
En réalité, ce que l'on souhaite faire, 
c'est plutôt afficher le contenu du tableau.

22
00:01:07,900 --> 00:01:12,849
Pour ceci, nous n'avons pas d'autre choix
que de prévoir une boucle pour itérer

23
00:01:12,849 --> 00:01:16,442
sur chacun des éléments du tableau
et les afficher un par un.

24
00:01:18,267 --> 00:01:21,468
Supposons que nous souhaitions faire 
afficher chacun des éléments d'un tableau.

25
00:01:21,468 --> 00:01:25,194
Imaginons que ce tableau ait, 
au préalable, été déclaré de cette façon.

26
00:01:25,194 --> 00:01:27,397
Il s'agit ici d'un tableau d'entiers.

27
00:01:27,397 --> 00:01:30,984
Comment itérer sur un tel tableau 
pour afficher chacune des cases ici ?

28
00:01:30,984 --> 00:01:34,254
Eh bien, nous disposons 
de deux solutions classiques.

29
00:01:34,254 --> 00:01:38,708
La première est ce que l'on appelle 
"itération sur ensemble de valeurs"

30
00:01:38,708 --> 00:01:40,181
qui va s'écrire de cette façon.

31
00:01:40,181 --> 00:01:46,760
Le mot réservé <i>for</i> et entre parenthèses, 
il faudra indiquer le type des valeurs du tableau,

32
00:01:46,760 --> 00:01:50,194
ce qui doit être évidemment du même type
que ce que l'on a spécifié ici.

33
00:01:51,085 --> 00:01:53,147
Ensuite nous devons donner 
un nom de variable

34
00:01:53,172 --> 00:01:56,204
qui va permettre de désigner 
une des cases du tableau.

35
00:01:57,708 --> 00:02:00,744
Ensuite, après deux points, 
nous devons indiquer le tableau

36
00:02:00,744 --> 00:02:02,370
sur lequel nous voulons itérer.

37
00:02:02,370 --> 00:02:06,435
Ensuite, il suffit par exemple pour 
faire afficher la case courante,

38
00:02:06,435 --> 00:02:09,809
d'écrire ce genre d'instruction.

39
00:02:09,809 --> 00:02:13,287
En fait <i>val</i> va prendre tour à tour 
chacun des éléments du tableau

40
00:02:13,287 --> 00:02:17,102
et nous allons donc les afficher 
en séquences les uns après les autres

41
00:02:17,102 --> 00:02:19,613
au moyen de cette itération 
sur l'ensemble des valeurs.

42
00:02:19,613 --> 00:02:23,951
La solution encore plus classique
consiste à utiliser un <i>for</i>

43
00:02:23,951 --> 00:02:26,054
tel que nous les connaissons jusqu'ici.

44
00:02:26,054 --> 00:02:31,033
Un <i>for</i> qui utilise un indice, 
qui va se déplacer de 0

45
00:02:31,033 --> 00:02:33,143
jusqu'à la taille du tableau.

46
00:02:33,143 --> 00:02:35,658
Ici, cette façon de spécifier la taille 
n'est pas bonne

47
00:02:35,658 --> 00:02:38,910
parce qu'elle est décorrélée 
du tableau lui-même.

48
00:02:38,910 --> 00:02:40,825
On a mis en dur la valeur 3.

49
00:02:40,825 --> 00:02:43,203
Va se poser à nous, la question de

50
00:02:43,203 --> 00:02:45,447
comment spécifier cette taille 
un peu plus proprement.

51
00:02:45,447 --> 00:02:46,752
Nous allons le voir plus tard.

52
00:02:46,752 --> 00:02:51,611
Donc on avance sur notre indice pour 
itérer sur chacune des cases du tableau.

53
00:02:51,611 --> 00:02:56,492
Nous accédons aux cases du tableau
au moyen du mécanisme d'indexation.

54
00:02:58,232 --> 00:03:01,666
Pour résumer, si nous souhaitons itérer 
sur chacune des valeurs d'un tableau

55
00:03:01,666 --> 00:03:03,381
nous disposons d'outils tel que

56
00:03:03,668 --> 00:03:05,965
les itérations sur ensemble de valeurs.

57
00:03:05,965 --> 00:03:09,069
Nous venons d'en voir un exemple concret
juste précédemment.

58
00:03:09,069 --> 00:03:12,403
Nous pouvons également utiliser 
une itération <i>for</i> classique.

59
00:03:12,472 --> 00:03:15,721
A ce moment-là, ce pose à nous 
le problème du calcul de

60
00:03:15,736 --> 00:03:17,500
comment retrouver la taille du tableau,

61
00:03:17,517 --> 00:03:19,484
ce que nous allons voir 
juste un petit peu plus loin.

62
00:03:19,484 --> 00:03:22,544
Il existe en réalité une troisième façon 
d'itérer sur un tableau,

63
00:03:22,544 --> 00:03:24,517
celle qui utilise la notion d'itérateur.

64
00:03:24,517 --> 00:03:27,683
Mais cette notion n'est pas présentée 
dans le cadre de ce cours.

65
00:03:27,683 --> 00:03:31,861
Revenons à la question qui nous préoccupe 
pour les itérations classiques :

66
00:03:31,861 --> 00:03:35,366
comment spécifier la taille 
d'un tableau de taille fixe ?

67
00:03:35,366 --> 00:03:36,990
Comment retrouver cette taille ?

68
00:03:36,990 --> 00:03:39,699
En Java, il est possible de connaître 
la taille d'un tableau

69
00:03:39,699 --> 00:03:41,015
à partir de son nom.

70
00:03:41,015 --> 00:03:43,181
Il faut pour cela avoir recours 
à une notation particulière.

71
00:03:43,181 --> 00:03:45,600
Cette notation est la suivante :

72
00:03:45,600 --> 00:03:49,142
j'utilise le nom du tableau, 
suivi de <i>point</i>,

73
00:03:49,142 --> 00:03:50,877
suivi du mot réservé <i>length</i>.

74
00:03:50,877 --> 00:03:52,257
Un exemple concret :

75
00:03:52,257 --> 00:03:56,002
je déclare/initialise un tableau <i>scores</i>
contenant quatre éléments.

76
00:03:56,002 --> 00:03:58,637
Si je veux faire afficher 
la taille du tableau,

77
00:03:58,637 --> 00:04:01,258
il me suffit d'avoir recours à la notation
que je viens de décrire.

78
00:04:01,258 --> 00:04:04,789
Donc nom du tableau, suivi de "point",
suivi de <i>length</i>

79
00:04:04,789 --> 00:04:07,211
qui ici va, bien évidemment, afficher 4.

80
00:04:07,211 --> 00:04:11,512
Un exemple analogue ici, avec un tableau 
de booléen à deux entrées.

81
00:04:12,950 --> 00:04:16,101
Il est important de noter ici que <i>length</i>
va vous donner toujours

82
00:04:16,101 --> 00:04:17,648
le nombre possible d'éléments

83
00:04:17,648 --> 00:04:20,388
et que le remplissage effectif 
n'a pas d'importance.

84
00:04:20,388 --> 00:04:24,124
En clair, le fait que vous ayez explicitement 
mis des valeurs ou pas

85
00:04:24,124 --> 00:04:25,572
n'est pas pris en compte.

86
00:04:25,572 --> 00:04:27,101
Ici, un exemple concret:

87
00:04:27,101 --> 00:04:30,332
Ici, nous déclarons un tableau 
sans l'initialiser

88
00:04:30,332 --> 00:04:32,736
avec des valeurs concrètes, effectives.

89
00:04:32,736 --> 00:04:36,861
Ni par une affectation de ce type,

90
00:04:38,601 --> 00:04:43,577
ni par l'affectation d'un tableau global 
avec un certain nombre d'éléments dedans.

91
00:04:45,427 --> 00:04:48,106
Je n'ai pas mis de valeurs explicites
à l'intérieur de mon tableau.

92
00:04:48,463 --> 00:04:51,257
Pourtant, si je fait afficher 
la longueur du tableau,

93
00:04:51,257 --> 00:04:52,764
je retrouve effectivement 2.
Pourquoi ?

94
00:04:52,764 --> 00:04:55,165
Parce qu'ici, au moment 
de la construction du tableau,

95
00:04:55,165 --> 00:04:58,550
je lui ai alloué une taille de 2.

96
00:04:58,550 --> 00:05:01,956
Ce qui signifie que je vais avoir 
cette situation en mémoire.

97
00:05:02,319 --> 00:05:05,854
La variable <i>score</i> est une référence 
vers un tableau à deux entrées.

98
00:05:05,854 --> 00:05:10,790
Et l'on sait que par défaut, ces entrées 
sont initialisées avec 0 pour les entiers.

99
00:05:10,790 --> 00:05:14,482
Donc, effectivement, nous avons bel et 
bien affaire à un tableau de taille fixe,

100
00:05:14,482 --> 00:05:15,915
contenant deux entrées.

101
00:05:15,915 --> 00:05:17,960
<i>Length</i> va nous donner cette taille.

102
00:05:17,960 --> 00:05:21,223
Peu importe que nous l'ayons initialisé
avec des valeurs explicites ou pas.

103
00:05:23,023 --> 00:05:26,519
Nous nous sommes intéressés à comment 
itérer sur l'ensemble des valeurs d'un tableau.

104
00:05:26,519 --> 00:05:29,353
Nous avons vu qu'il était possible 
de le faire avec une boucle <i>for</i> classique

105
00:05:29,353 --> 00:05:31,283
ce qui nous a amené à discuter le problème

106
00:05:31,283 --> 00:05:33,270
du calcul de la taille du tableau.

107
00:05:33,270 --> 00:05:35,799
Mais avant de clore 
sur le chapitre des itérations

108
00:05:35,799 --> 00:05:38,414
revenons un petit peu 
sur l'autre type d'itération,

109
00:05:38,414 --> 00:05:41,372
les boucles <i>for</i> permettant d'itérer 
sur un ensemble de valeurs.

110
00:05:42,512 --> 00:05:45,029
Nous avons vu que 
ce genre de boucle <i>for</i> s'écrit ainsi.

111
00:05:45,406 --> 00:05:48,136
Nous pouvons constater aisément 
qu'il s'agit d'une façon très simple

112
00:05:48,136 --> 00:05:49,685
et très élégante d'itérer.

113
00:05:49,725 --> 00:05:51,935
Nous n'avons même pas ici 
à nous préoccuper de la taille du tableau.

114
00:05:51,935 --> 00:05:54,639
Cependant, il existe 
un certain nombre de limitations

115
00:05:54,639 --> 00:05:58,796
à cette boucle <i>for</i> que nous ne rencontrons
pas avec l'itération classique

116
00:05:58,796 --> 00:06:01,183
et qui sont les suivantes, 
que nous allons détailler maintenant.

117
00:06:01,823 --> 00:06:03,653
Première limitation :

118
00:06:03,653 --> 00:06:07,191
une itération sur ensemble de valeurs 
ne va pas nous permettre de modifier

119
00:06:07,432 --> 00:06:08,801
le contenu du tableau.

120
00:06:08,925 --> 00:06:12,047
Donc ici, si j'ai déclaré/initialisé 
un tableau de cette façon

121
00:06:12,047 --> 00:06:13,774
et que je souhaite itérer 
sur ce tableau

122
00:06:14,046 --> 00:06:16,166
au moyen d'une itération 
sur ensemble de valeurs.

123
00:06:16,535 --> 00:06:18,980
Le fait d'écrire 
quelque chose comme ceci,

124
00:06:18,980 --> 00:06:23,724
ne va pas permettre de modifier 
le contenu du tableau.

125
00:06:23,724 --> 00:06:25,628
Je ne peux pas modifier 
le tableau

126
00:06:25,782 --> 00:06:28,352
en ayant recours 
à une notation de ce genre là.

127
00:06:28,352 --> 00:06:32,518
Deuxième limitation : je ne peux 
parcourir qu'un seul tableau à la fois.

128
00:06:32,518 --> 00:06:35,541
Donc je ne peux itérer 
que sur un seul tableau.

129
00:06:35,541 --> 00:06:38,660
Ici, une notation de ce type 
n'existe pas.

130
00:06:38,660 --> 00:06:40,523
Si on imagine qu'on aimerait, 
par exemple,

131
00:06:40,523 --> 00:06:44,842
itérer sur deux tableaux en même temps,

132
00:06:44,842 --> 00:06:46,873
par une notation de ce genre.

133
00:06:49,460 --> 00:06:52,771
Pour comparer les valeurs 
du premier tableau

134
00:06:52,938 --> 00:06:56,692
avec les valeurs du deuxième tableau, 
ceci n'existe pas.

135
00:06:56,919 --> 00:07:00,410
Nous ne pourrons pas, avec une itération 
sur ensemble de valeurs

136
00:07:00,410 --> 00:07:04,352
procéder au parcours 
simultané de deux tableaux.

137
00:07:06,466 --> 00:07:07,503
Troisième limitation :

138
00:07:08,222 --> 00:07:13,331
Au travers de la variable <i>val</i>, je ne peux, 
avec une itération sur ensemble de valeurs,

139
00:07:13,331 --> 00:07:15,629
accéder qu'à un seul élément à la fois.

140
00:07:15,629 --> 00:07:18,502
Par exemple il ne va pas 
être possible de comparer

141
00:07:18,502 --> 00:07:20,906
un élément du tableau avec son suivant.

142
00:07:20,906 --> 00:07:24,211
Je ne peux accéder au travers de <i>val</i>
qu'à un seul élément à la fois.

143
00:07:24,211 --> 00:07:26,058
Enfin, dernière limitation :

144
00:07:26,389 --> 00:07:29,324
je ne peux itérer que 
d'un pas en avant seulement.

145
00:07:29,324 --> 00:07:33,184
Si par exemple, j'imagine de pouvoir 
sauter de deux en deux dans le tableau,

146
00:07:33,184 --> 00:07:36,609
ceci n'est pas possible avec 
une itération sur ensemble de valeurs.

147
00:07:36,609 --> 00:07:42,325
A noter que les itérations classiques 
ne présentent aucune de ces limitations.

148
00:07:42,325 --> 00:07:44,991
Il est possible de tout faire avec 
une itération <i>for</i> classique.

149
00:07:47,081 --> 00:07:50,049
Manipuler des tableaux exige de
prendre un certain nombre de précautions.

150
00:07:50,063 --> 00:07:52,110
Il faut être attentif à 
un certain nombre d'aspects

151
00:07:52,110 --> 00:07:53,334
pour ne pas causer des erreurs.

152
00:07:53,334 --> 00:07:56,132
Des erreurs soit à la compilation, 
soit à l'exécution du programme.

153
00:07:56,132 --> 00:07:59,716
Les erreurs que l'on va pouvoir rencontrer
en débutant avec les tableaux,

154
00:07:59,716 --> 00:08:02,916
sont des erreurs sur les indices ou 
des erreurs d'accès

155
00:08:02,916 --> 00:08:04,644
avant la construction du tableau.

156
00:08:04,644 --> 00:08:06,850
Il existe d'autres types d'erreurs 
qui sont liés

157
00:08:06,850 --> 00:08:09,099
à l'aspect 
programmation orientée objets

158
00:08:09,099 --> 00:08:13,212
qui seront présentés dans un cours 
prochain sur l'orientée objet en Java.

159
00:08:14,712 --> 00:08:17,650
Concernant les problèmes d'indice, 
il y a deux choses à respecter.

160
00:08:17,669 --> 00:08:22,216
La première est que l'indice d'un tableau
doit impérativement être de type <i>int</i>.

161
00:08:22,216 --> 00:08:23,773
Il s'agit d'un entier.

162
00:08:23,773 --> 00:08:27,117
Il faut absolument respecter les bornes 
du tableau lesquelles sont comprises

163
00:08:27,117 --> 00:08:31,036
entre 0 et T-1,
où T est la taille du tableau.

164
00:08:31,036 --> 00:08:34,379
Ici, je déclare et construit 
un tableau de taille 250.

165
00:08:34,908 --> 00:08:37,662
Je commets une première erreur ici, 
en essayant d'utiliser un indice

166
00:08:37,826 --> 00:08:40,000
qui n'est pas de type <i>int</i>.

167
00:08:40,000 --> 00:08:42,297
Donc une erreur sur le type de l'indice.

168
00:08:42,297 --> 00:08:45,921
Je commets une deuxième erreur ici
en essayant d'utiliser un indice

169
00:08:45,921 --> 00:08:51,387
qui est en dehors des limites possibles, 
des bornes possibles, pour le tableau.

170
00:08:51,387 --> 00:08:53,061
Donc une erreur sur la borne.

171
00:08:53,157 --> 00:08:54,975
Egalement, une erreur sur la borne, ici.

172
00:08:54,975 --> 00:09:01,864
Nous savons qu'un tableau de 250 éléments
a des indices compris entre 0 et 249.

173
00:09:01,864 --> 00:09:04,903
Si j'utilise l'indice 250, je déborde.

174
00:09:04,903 --> 00:09:07,663
Je ne suis pas dans les bornes du site.

175
00:09:07,663 --> 00:09:10,478
Dans ce cas là, j'ai également 
une erreur de bornes.

176
00:09:10,478 --> 00:09:14,855
A noter que le premier type d'erreur 
est une erreur qui va être détectable

177
00:09:14,855 --> 00:09:17,824
par le compilateur, donc au moment 
où je compile le programme.

178
00:09:17,824 --> 00:09:21,887
Par contre, les autres erreurs sont 
des erreurs qui ne se verront

179
00:09:21,887 --> 00:09:26,260
qu'au moment de l'exécution du programme.

180
00:09:26,260 --> 00:09:28,431
Evidemment dans la pratique, 
nous n'allons pas commettre

181
00:09:28,431 --> 00:09:30,995
ce genre d'erreurs de façon 
aussi explicite.

182
00:09:30,995 --> 00:09:34,540
Souvent c'est par calcul, 
si nous obtenons les indices par calcul

183
00:09:34,540 --> 00:09:38,069
et que notre calcul est erroné,
nous allons aboutir à ce genre d'erreurs.

184
00:09:38,069 --> 00:09:40,870
Nous n'allons pas les commettre 
en général, de façon aussi explicite.

185
00:09:42,221 --> 00:09:45,345
Autre erreur classique : 
l'accès avant construction.

186
00:09:45,500 --> 00:09:48,860
En Java, si on souhaite accéder 
par l'indexation à un élément du tableau,

187
00:09:48,860 --> 00:09:52,224
il est impératif que le tableau 
ait été, au préalable, construit.

188
00:09:52,224 --> 00:09:54,824
La construction d'un tableau 
peut se faire, par exemple,

189
00:09:54,824 --> 00:10:00,155
en indiquant directement les valeurs 
au moment de la déclaration du tableau.

190
00:10:00,155 --> 00:10:01,849
Ce que l'on voit ici 
au niveau de cette instruction.

191
00:10:01,849 --> 00:10:05,618
Au moment où je déclare mon tableau, 
j'y mets un certain nombre de valeurs,

192
00:10:05,618 --> 00:10:08,362
explicitement, au moyen 
d'une affectation de cette nature là.

193
00:10:08,362 --> 00:10:13,624
Donc évidemment ici, l'élément d'indice 0
existe bel et bien.

194
00:10:13,624 --> 00:10:17,462
Il est possible d'y accéder, c'est tout à fait 
licite de procéder à ce genre d'accès

195
00:10:17,526 --> 00:10:19,600
à la case d'indice 0 du tableau.

196
00:10:20,273 --> 00:10:22,620
Par contre, ici, j'ai une situation 
qui est un petit peu différente.

197
00:10:22,620 --> 00:10:26,450
Je déclare mon tableau mais 
je ne construis pas le tableau,

198
00:10:26,989 --> 00:10:32,038
je ne lui affecte pas de valeurs initiales
au moyen d'une affectation de cette nature,

199
00:10:32,268 --> 00:10:35,893
pas plus que je ne construis le tableau 
au moyen de ce second type d'instruction,

200
00:10:35,893 --> 00:10:38,229
qui me permet de lui donner 
une taille initiale et d'allouer

201
00:10:38,229 --> 00:10:40,049
un certain nombre de cases pour ce tableau.

202
00:10:40,049 --> 00:10:45,413
Etant donné que je n'ai recours, 
ni à cette possibilité, ni à celle-ci,

203
00:10:45,413 --> 00:10:47,832
l'accès à une case du tableau 
est impossible.

204
00:10:47,832 --> 00:10:49,380
Donc ici, j'aurai une erreur.

205
00:10:49,380 --> 00:10:52,520
Donc ce qui me manque 
au niveau de cette instruction

206
00:10:52,520 --> 00:10:55,621
est d'avoir construit le tableau 
au préalable ce que je peux faire

207
00:10:55,621 --> 00:10:57,758
par une tournure de cette nature là.

208
00:10:57,758 --> 00:10:59,321
A ce moment, le problème est résolu

209
00:10:59,321 --> 00:11:03,635
et je n'ai plus de problème 
d'accès avant construction.
