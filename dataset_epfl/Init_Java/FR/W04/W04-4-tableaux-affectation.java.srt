1
00:00:03,913 --> 00:00:06,794
Nous allons maintenant nous intéresser
à ce que signifie l'affectation

2
00:00:06,966 --> 00:00:08,571
lorsqu'on l'emploie avec des tableaux.

3
00:00:08,855 --> 00:00:11,838
Pour ceci, il va être nécessaire 
de revenir un peu sur notre discussion

4
00:00:12,038 --> 00:00:14,702
en comparant les types de base
et les types évolués en Java.

5
00:00:16,617 --> 00:00:19,219
Supposons que nous ayons affaire 
à deux variables a et b,

6
00:00:19,693 --> 00:00:23,993
tantôt dans le cas d'un type de base,
par exemple ici a et b sont des entiers,

7
00:00:24,169 --> 00:00:27,001
tantôt dans le cas de types évolués, 
ici nous supposerons

8
00:00:27,164 --> 00:00:28,697
que a et b sont des tableaux.

9
00:00:30,267 --> 00:00:34,515
Que va signifier d'écrire a = b 
dans l'un ou l'autre des cas ?

10
00:00:34,955 --> 00:00:38,641
Nous imaginons ici, par exemple,
qu'à l'origine b contient 2,

11
00:00:38,799 --> 00:00:41,961
et que ici, à l'origine, b contient
une référence vers un tableau.

12
00:00:42,786 --> 00:00:47,083
Donc si j'exécute une affectation 
dans le cas des types de base,

13
00:00:47,392 --> 00:00:52,119
je me trouve dans la situation où a 
contient au final la même valeur que b.

14
00:00:53,632 --> 00:00:57,523
Pareil dans ce cas de figure : 
si j'exécute cette instruction,

15
00:00:57,540 --> 00:01:01,067
je vais copier dans a 
la même valeur que b,

16
00:01:01,067 --> 00:01:04,475
c'est-à-dire une référence vers le même
tableau, ici en l'occurrence.

17
00:01:05,301 --> 00:01:08,178
Pour un type de base, le fait d'avoir
réalisé cette affectation

18
00:01:08,403 --> 00:01:11,390
n'introduit aucun lien particulier
entre a et b.

19
00:01:11,729 --> 00:01:17,777
Si par exemple ici je décide après coup
de modifier a par une affectation

20
00:01:17,936 --> 00:01:21,672
telle que celle-ci, cela n'a évidemment
aucune incidence sur b.

21
00:01:22,687 --> 00:01:24,842
Un discours différent a lieu

22
00:01:24,842 --> 00:01:28,107
pour les tableaux 
concernant l'objet référencé.

23
00:01:28,107 --> 00:01:32,062
Lorsque je réalise ce genre d'affectation,
il devient possible de modifier

24
00:01:32,227 --> 00:01:36,028
le tableau référencé aussi bien
par a que par b.

25
00:01:36,296 --> 00:01:41,572
Ce qui veut dire que, par exemple ici,
si j'écris a [0] = 300,

26
00:01:41,572 --> 00:01:44,896
b [0] vaudra aussi 300.

27
00:01:47,891 --> 00:01:51,454
Donc, dans le cas des types de base,
il y a une réelle autonomie

28
00:01:51,689 --> 00:01:55,329
entre les deux objets,
la modification d'un des objets

29
00:01:55,542 --> 00:01:57,852
n'a absolument aucune 
incidence sur l'autre,

30
00:01:58,156 --> 00:02:01,446
par contre, lorsque je réalise 
une affectation sur des objets

31
00:02:01,446 --> 00:02:04,701
comme des tableaux, il existera
une dépendance

32
00:02:04,702 --> 00:02:06,789
par rapport à l'objet référencé.

33
00:02:07,630 --> 00:02:09,854
Le message ici est que, 
contrairement au type de base,

34
00:02:10,089 --> 00:02:14,652
réaliser une affectation entre deux
variables de type tableau va créer

35
00:02:14,652 --> 00:02:16,706
une dépendance entre
ces deux objets.

36
00:02:16,756 --> 00:02:20,148
Ici, nous partons d'une situation 
où nous avons à l'origine deux tableaux

37
00:02:20,148 --> 00:02:23,848
complètement distincts, autonomes 
en mémoire, donc une première variable a

38
00:02:24,079 --> 00:02:26,620
qui contient une référence 
vers un tableau à 10 cases,

39
00:02:28,533 --> 00:02:31,397
et une seconde variable b 
qui contient une référence

40
00:02:31,623 --> 00:02:35,092
vers un second tableau à 10 cases,
à l'origine complètement autonome.

41
00:02:35,741 --> 00:02:38,803
Donc nous commençons par remplir 
le tableau a simplement

42
00:02:38,803 --> 00:02:41,663
au moyen d'une boucle "for", en mettant
dans chaque case les mêmes valeurs

43
00:02:41,663 --> 00:02:44,463
que les indices, donc nous aboutissons
à cette situation mémoire,

44
00:02:45,855 --> 00:02:49,307
et nous exécutons notre fameuse 
affectation de a dans b.

45
00:02:49,690 --> 00:02:53,653
Donc par l'affectation, 
nous allons mettre dans b la même adresse

46
00:02:53,787 --> 00:02:58,654
que celle contenue dans a, 
ce qui voudra dire que désormais b

47
00:02:58,800 --> 00:02:59,687
va pointer vers ce tableau.

48
00:03:00,124 --> 00:03:03,394
Ce lien est cassé, ces zones en mémoire
ne sont plus accessibles.

49
00:03:03,914 --> 00:03:10,513
Et ici, si je modifie la troisième entrée
du tableau via a,

50
00:03:10,704 --> 00:03:14,225
je vois que la même entrée du tableau 
accédée via b est également modifiée.

51
00:03:16,278 --> 00:03:19,254
On voit donc que l'affectation 
de deux tableaux au moyen de =

52
00:03:19,625 --> 00:03:21,734
n'a en réalité de sens 
que si l'on souhaite avoir

53
00:03:21,858 --> 00:03:23,658
deux noms différents 
pour un même tableau,

54
00:03:23,900 --> 00:03:24,980
ce qui est relativement rare.

55
00:03:25,536 --> 00:03:29,176
Dans le cas le plus général, 
par l'affectation on souhaiterait

56
00:03:29,301 --> 00:03:33,388
plutôt faire en sorte que chaque case
du tableau b soit mise dans des cases

57
00:03:33,510 --> 00:03:36,990
correspondantes du tableau a,
tout en garantissant que

58
00:03:37,228 --> 00:03:39,124
chacun des deux tableaux 
garde son autonomie.

59
00:03:39,353 --> 00:03:42,350
A ce moment-là, il faut procéder plutôt
au moyen d'une boucle,

60
00:03:42,559 --> 00:03:46,557
qui va permettre de copier chacune 
des cases des valeurs des cases

61
00:03:46,712 --> 00:03:50,213
du premier tableau dans la case
correspondante du second tableau.

62
00:03:50,513 --> 00:03:54,191
En étant attentif, bien sûr, à rester 
dans les bornes licites,

63
00:03:55,151 --> 00:03:59,184
donc si, par exemple, nous choisissons
comme condition d'arrêt la taille

64
00:03:59,310 --> 00:04:02,729
du tableau a, eh bien, pour que 
cette boucle ne provoque pas d'erreur,

65
00:04:02,944 --> 00:04:07,516
il va être nécessaire que la taille de b
soit au moins égale à celle de a,

66
00:04:07,709 --> 00:04:10,343
autrement il faudrait formuler
la condition d'arrêt

67
00:04:10,442 --> 00:04:13,129
de façon un peu différente.

68
00:04:13,305 --> 00:04:15,941
Il est maintenant aisé de comprendre
que le fait que les tableaux en Java

69
00:04:16,068 --> 00:04:18,217
soient manipulés au travers
de références a également

70
00:04:18,417 --> 00:04:21,760
un impact sur la sémantique de
l'opérateur de comparaison ==.

71
00:04:22,136 --> 00:04:26,875
Si a et b sont deux tableaux, le fait 
de les comparer au moyen de ==

72
00:04:27,047 --> 00:04:29,768
va, bien évidemment, comparer 
des références, et non pas

73
00:04:29,768 --> 00:04:31,862
les contenus des tableaux.

74
00:04:31,862 --> 00:04:36,018
Donc, ici je suis dans la situation où
j'ai a, qui est un tableau,

75
00:04:36,018 --> 00:04:40,733
donc qui contient une référence
vers le tableau, pareil pour b,

76
00:04:45,231 --> 00:04:51,449
donc a == b ne retournera trop que si
effectivement la même référence

77
00:04:51,449 --> 00:04:53,075
est contenue dans les objets a et b.

78
00:04:53,461 --> 00:04:55,678
Donc il pointe vers le même
emplacement en mémoire,

79
00:04:55,940 --> 00:04:59,104
ce qui est évidemment le cas lorsque,
au préalable, j'ai réalisé une affectation

80
00:04:59,104 --> 00:04:59,947
de cette nature.

81
00:05:00,247 --> 00:05:05,992
Donc l'opérateur == appliqué au tableau
ne teste en aucun cas l'égalité

82
00:05:05,992 --> 00:05:08,674
des contenus des tableaux pointés
par a et b.

83
00:05:09,596 --> 00:05:12,312
Si l'on veut comparer des contenus,
il faut comme tout à l'heure,

84
00:05:12,312 --> 00:05:15,766
pour l'affectation, procéder 
au moyen d'une itération.

85
00:05:18,051 --> 00:05:20,840
Donc si l'on veut plutôt comparer
le contenu de deux tableaux,

86
00:05:20,840 --> 00:05:23,648
il va falloir écrire un certain nombre
d'instructions pour tester

87
00:05:23,648 --> 00:05:24,645
si c'est le cas ou pas.

88
00:05:25,061 --> 00:05:28,561
On peut commencer, par exemple,
par tester si les tableaux

89
00:05:28,561 --> 00:05:30,912
sont de même longueur ; 
si ce n'est pas le cas,

90
00:05:30,912 --> 00:05:33,263
on est certain que les contenus
ne sont pas identiques.

91
00:05:33,263 --> 00:05:35,615
On prend habituellement 
également la précaution

92
00:05:35,615 --> 00:05:38,931
de comparer les tableaux
avec la référence particulière,

93
00:05:38,931 --> 00:05:42,247
le mot réservé particulier

94
00:05:42,247 --> 00:05:45,564
qui est "null"; "null" est une valeur
spéciale qui peut être affectée

95
00:05:45,564 --> 00:05:48,856
à un tableau et qui indique que le tableau
ne référence rien du tout.

96
00:05:49,236 --> 00:05:51,326
On prend habituellement cette
précaution aussi.

97
00:05:51,614 --> 00:05:56,279
Donc si les tableaux ne référencent rien,
ou s'ils sont de taille différente,

98
00:05:56,279 --> 00:05:59,907
alors nous pouvons d'emblée dire que 
les contenus sont différents.

99
00:06:02,035 --> 00:06:05,994
Sinon, on peut supposer qu'éventuellement
ils ont un même contenu,

100
00:06:05,994 --> 00:06:10,124
mais il va falloir le tester, et 
il va falloir parcourir l'intégralité

101
00:06:10,124 --> 00:06:14,774
du tableau et tester case à case
si les deux contenus sont identiques.

102
00:06:15,325 --> 00:06:19,045
Si l'on sort de la boucle en raison
de la première condition,

103
00:06:19,045 --> 00:06:23,999
ceci veut dire qu'on a parcouru
l'intégralité du tableau

104
00:06:23,999 --> 00:06:27,351
et que la condition était toujours
vérifiée case à case,

105
00:06:27,518 --> 00:06:30,728
et donc on peut affirmer que 
les contenus sont identiques.

106
00:06:31,081 --> 00:06:34,742
Sinon, eh bien, nous sommes dans la
situation où les contenus sont différents.

107
00:06:36,559 --> 00:06:39,485
Pour terminer cette présentation des 
tableaux de taille fixe en Java,

108
00:06:39,543 --> 00:06:42,003
voici quelques petits exemples 
de manipulation routinière classique,

109
00:06:42,028 --> 00:06:45,803
comme par exemple l'affichage du contenu 
d'un tableau ou la saisie

110
00:06:45,803 --> 00:06:46,895
du contenu d'un tableau.

111
00:06:48,117 --> 00:06:51,896
On suppose ici que l'on a au préalable
déclaré une variable table qui peut

112
00:06:51,896 --> 00:06:54,642
contenir un certain nombre de valeurs
de type "double".

113
00:06:54,882 --> 00:06:59,108
On suppose également que, plus tard,
le programme s'est chargé de remplir

114
00:06:59,108 --> 00:07:02,534
le tableau avec des valeurs 
que l'on estime adéquates, par exemple

115
00:07:02,534 --> 00:07:06,742
par des affectations de cette nature, 
et on s'intéresse à faire afficher

116
00:07:06,742 --> 00:07:08,207
le contenu du tableau.

117
00:07:09,143 --> 00:07:12,273
Il faut pour cela avoir recours à 
des itérations, des boucles "for",

118
00:07:12,273 --> 00:07:15,992
qui vont permettre d'itérer sur l'ensemble
des valeurs du tableau pour les afficher

119
00:07:15,992 --> 00:07:20,544
une à une. Le type de boucle "for" 
à choisir, on a vu qu'il en existait deux,

120
00:07:20,544 --> 00:07:24,130
va dépendre en fait de la situation :
est-ce qu'on aura besoin d'expliciter

121
00:07:24,130 --> 00:07:27,573
les indices ou pas. 
Dans le cas où il n'est pas nécessaire

122
00:07:27,573 --> 00:07:30,403
d'expliciter l'indice, 
on peut recourrir à une boucle "for"

123
00:07:30,403 --> 00:07:33,233
de type "itération 
sur un ensemble de valeurs".

124
00:07:33,233 --> 00:07:36,064
Nous avons vu que, pour ce
type de boucle "for", il faut déclarer

125
00:07:36,080 --> 00:07:38,974
une variable du même type 
que les éléments du tableau.

126
00:07:38,974 --> 00:07:42,873
Cette variable va prendre tour à tour
les différents éléments du tableau

127
00:07:42,873 --> 00:07:46,674
et on va pouvoir les afficher par
cette simple tournure-là.

128
00:07:46,758 --> 00:07:50,698
Si l'on a besoin, par contre, d'expliciter
les indices, alors on va avoir recours

129
00:07:50,753 --> 00:07:55,095
à une boucle "for" classique, où à 
ce moment-là il faut déclarer un indice,

130
00:07:55,095 --> 00:07:58,356
qui va varier de zéro jusqu'à 
la longueur du tableau,

131
00:07:58,356 --> 00:08:00,226
nous avons vu que la longueur 
du tableau s'exprime

132
00:08:00,226 --> 00:08:03,776
par cette notation particulière.
Sachant que les indices du tableau

133
00:08:03,776 --> 00:08:07,738
progressent entre zéro et taille -1,
il faudra prendre la précaution

134
00:08:07,738 --> 00:08:12,296
de s'arrêter juste avant la longueur
du tableau, et bien sûr, il faut faire

135
00:08:12,296 --> 00:08:16,599
progresser l'indice au fur et à mesure
que l'on avance dans le tableau.

136
00:08:16,883 --> 00:08:19,980
Donc, à ce moment-là, on peut 
faire afficher aussi bien l'indice,

137
00:08:19,980 --> 00:08:22,754
puisqu'il est explicite, que la valeur
qui lui correspond.

138
00:08:24,409 --> 00:08:27,079
Second exemple, celui de la saisie 
des éléments du tableau

139
00:08:27,079 --> 00:08:31,744
par une interaction clavier, nous avons
vu que la boucle "for" de type itération

140
00:08:31,744 --> 00:08:35,536
sur un ensemble de valeurs ne permet pas
de modifier le contenu du tableau,

141
00:08:35,536 --> 00:08:37,262
et donc à ce moment-là 
nous n'avons pas le choix,

142
00:08:37,262 --> 00:08:40,987
il est absolument indispensable 
d'expliciter les indices en Java.

143
00:08:41,187 --> 00:08:44,221
Donc, nous aurons recours ici à 
une boucle "for" classique,

144
00:08:44,221 --> 00:08:47,904
itérant, comme tout à l'heure, de zéro
jusqu'à la longueur du tableau

145
00:08:47,904 --> 00:08:52,403
en s'arrêtant à un indice juste avant,
pour éviter le débordement,

146
00:08:52,403 --> 00:08:55,991
et à ce moment-là nous pouvons saisir 
chaque valeur du tableau séparément

147
00:08:56,021 --> 00:09:00,040
par une saisie clavier classique, comme 
nous avons déjà eu l'occasion

148
00:09:00,157 --> 00:09:01,765
de les pratiquer précédemment.
