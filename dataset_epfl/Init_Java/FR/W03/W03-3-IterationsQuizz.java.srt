
1
00:00:00,000 --> 00:00:05,320
Nous allons faire deux quiz qui mettent en

2
00:00:05,320 --> 00:00:09,050
œuvre des boucles imbriquées, et des
branchements conditionnels.

3
00:00:09,050 --> 00:00:12,200
Alors, à votre avis, qu'affiche ce premier
code quand on l'exécute?

4
00:00:12,200 --> 00:00:15,464
Alors, la bonne réponse est la réponse D.

5
00:00:15,464 --> 00:00:17,950
Et, nous allons voir pourquoi.

6
00:00:17,950 --> 00:00:20,806
Le code commence par une première

7
00:00:20,806 --> 00:00:25,061
instruction for, qui déclare une variable
i,

8
00:00:25,061 --> 00:00:26,985
initialisée à 0.

9
00:00:26,985 --> 00:00:32,050
La condition est i strictement inférieur à
3.

10
00:00:32,050 --> 00:00:35,121
Et l'instruction de l'incrémentation est
++i.

11
00:00:35,121 --> 00:00:37,550
i va donc prendre les valeurs 0, 1, et 2.

12
00:00:37,550 --> 00:00:43,050
La première fois qu'on rentre dans la
boucle, i vaut 0.

13
00:00:43,050 --> 00:00:46,842
On passe, ensuite, à cette deuxième
instruction for, qui est

14
00:00:46,842 --> 00:00:50,350
à l'intérieur de la première, euh, de la
première boucle,

15
00:00:50,350 --> 00:00:54,655
qui déclare une variable j initialisée à
0.

16
00:00:54,655 --> 00:00:59,330
La condition est j inférieur strictement à

17
00:00:59,330 --> 00:01:04,665
4, et l'instruction de l'incrémentation
est ++j.

18
00:01:04,665 --> 00:01:06,945
j va donc prendre les valeurs 0, 1, 2 et
3.

19
00:01:06,945 --> 00:01:11,581
Et la première fois qu'on rentre dans la
boucle for j, c'est-à-dire, celle-ci.

20
00:01:11,581 --> 00:01:14,080
j vaut 0.

21
00:01:14,080 --> 00:01:16,449
Exécuter les instructions

22
00:01:16,449 --> 00:01:22,244
qui sont dans cette deuxième boucle for j,
ça veut dire, commencer par

23
00:01:22,244 --> 00:01:27,854
exécuter ce branchement conditionnel, et
tester la condition i = j.

24
00:01:27,854 --> 00:01:28,660
i vaut 0.

25
00:01:28,660 --> 00:01:30,760
j vaut 0 également.

26
00:01:30,760 --> 00:01:36,337
Cette condition est donc vraie.
Et on va exécuter cette instruction,

27
00:01:36,337 --> 00:01:41,400
ici, qui affiche une étoile.

28
00:01:41,400 --> 00:01:45,980
Alors, au passage, pour l'affichage, ici,
on n'utilise pas un

29
00:01:45,980 --> 00:01:50,560
println, mais un print tout court, qui ne
fait pas de retour à la ligne.

30
00:01:50,560 --> 00:01:55,595
On saute la partie else du branchement
conditionnel.

31
00:01:55,595 --> 00:02:00,630
On arrive à la fin de la boucle for j, et
on revient,

32
00:02:00,630 --> 00:02:06,580
ici.
j va prendre

33
00:02:06,580 --> 00:02:11,649
la valeur 1, et on continue dans la boucle
for j.

34
00:02:11,649 --> 00:02:17,795
C'est-à-dire, exécuter ce branchement
conditionnel, tester la condition i = j.

35
00:02:17,795 --> 00:02:20,411
i vaut 0.
Cette fois-ci, j vaut 1.

36
00:02:20,411 --> 00:02:25,710
La condition est donc, fausse.
On va exécuter cette partie du

37
00:02:25,710 --> 00:02:31,683
branchement conditonnel.
C'est-à dire afficher la valeur, la valeur

38
00:02:31,683 --> 00:02:35,577
de j.
C'est-à-dire 1, et on va l'afficher, ici.

39
00:02:35,577 --> 00:02:41,919
On finit dans la boucle for j.
Et, on revient,

40
00:02:41,919 --> 00:02:47,774
encore une fois, ici.
j va prendre, ensuite,

41
00:02:47,774 --> 00:02:53,220
la valeur 2.

42
00:02:53,220 --> 00:02:58,381
Et on va afficher 2.

43
00:02:58,381 --> 00:03:03,856
Ensuite, la valeur 3.
Et

44
00:03:03,856 --> 00:03:09,620
on va afficher 3.

45
00:03:09,620 --> 00:03:14,956
On sort, ensuite, de la boucle

46
00:03:14,956 --> 00:03:19,437
for j.
Et on arrive à cette instruction,

47
00:03:19,437 --> 00:03:24,186
ici, qui affiche, qui fait un retour à la
ligne.

48
00:03:24,186 --> 00:03:29,201
C'est-à-dire que la prochaine, le prochain
affichage

49
00:03:29,201 --> 00:03:33,982
se fera, ici.
On arrive à la fin de la boucle

50
00:03:33,982 --> 00:03:39,201
for i.
Et on revient, ici.

51
00:03:39,201 --> 00:03:44,290
i prend donc, maintenant, la valeur 1.
Et on

52
00:03:44,290 --> 00:03:49,810
réexécute les instructions qui sont dans
cette

53
00:03:49,810 --> 00:03:54,284
boucle for i.
C'est-à-dire qu'on va recommencer,

54
00:03:54,284 --> 00:03:58,530
ici, avec j qui va être de nouveau
initialisé à 0.

55
00:03:58,530 --> 00:04:05,255
On exécute les instructions qui sont dans
cette boucle

56
00:04:05,255 --> 00:04:12,205
for j, et on va tester cette condition,
est-ce que i est égal à j?

57
00:04:12,205 --> 00:04:15,360
i vaut 1, j vaut 0.
La condition est fausse.

58
00:04:15,360 --> 00:04:19,331
On va donc exé, afficher la valeur de j.
C'est-à-dire 0.

59
00:04:19,331 --> 00:04:28,620
Arrivée, ici, pour revenir là, avec j qui
va prendre la valeur 1.

60
00:04:28,620 --> 00:04:36,660
On continue dans la boucle for j, pour
exécuter ce branchement conditionnel,

61
00:04:36,660 --> 00:04:40,470
et tester la condition i = j.
Cette fois-ci, i vaut 1 et

62
00:04:40,470 --> 00:04:44,680
j vaut 1 également.
Donc, la condition est vraie.

63
00:04:44,680 --> 00:04:49,662
Et on va exécuter cette partie-ci du
branchement conditionnel.

64
00:04:49,662 --> 00:04:54,098
C'est-à-dire afficher une étoile.
On va revenir, ici.

65
00:04:54,098 --> 00:05:00,346
Continuer dans la boucle for j, et je vous
laisse voir que, on

66
00:05:00,346 --> 00:05:04,239
aura bien affiché, au final, cette chose-ci.

67
00:05:04,239 --> 00:05:04,240
.

68
00:05:04,240 --> 00:05:08,520
Ce deuxième quiz est un petit peu plus
difficile.

69
00:05:08,520 --> 00:05:12,846
Notez bien, qu'on utilise, ici, la valeur
de la variable

70
00:05:12,846 --> 00:05:16,332
i, qui aura été déclarée dans la première
boucle for.

71
00:05:16,332 --> 00:05:19,460
Donc, à votre avis, quelle est la bonne
réponse?

72
00:05:19,460 --> 00:05:22,565
La bonne réponse, est la réponse A.

73
00:05:22,565 --> 00:05:25,950
Et nous allons détailler pourquoi.

74
00:05:25,950 --> 00:05:33,950
Comme avant, la première boucle for
initialise une variable i à 0.

75
00:05:33,950 --> 00:05:36,873
La condition est i strictement inférieur à
3.

76
00:05:36,873 --> 00:05:39,832
Et l'instruction de l'incrémentation est
++i.

77
00:05:39,832 --> 00:05:45,060
Donc, encore une fois, comme avant, i va
prendre la valeur 0, 1 et 2.

78
00:05:45,060 --> 00:05:51,010
On commence par entrer dans la boucle for
i,

79
00:05:51,010 --> 00:05:56,103
avec i qui vaut 0.
Et on exécute cette instruction, ici, qui

80
00:05:56,103 --> 00:06:03,548
est une deuxième boucle for, qui
initialise une variable j à 0.

81
00:06:03,548 --> 00:06:08,290
Et la condition est j strictement
inférieure à i.

82
00:06:08,290 --> 00:06:11,062
i vaut 0.
j vaut 0 également.

83
00:06:11,062 --> 00:06:14,626
Donc, cette condition est fausse.

84
00:06:16,190 --> 00:06:21,572
Et on sort, tout de suite, donc, de cette
boucle for,

85
00:06:21,572 --> 00:06:26,774
pour arriver, ici.
Et arriver, ici, ça veut simplement dire

86
00:06:26,774 --> 00:06:32,358
qu'on fait un retour à la ligne, que je
vais représenter de cette façon-ci.

87
00:06:32,358 --> 00:06:40,447
Et on revient à cette instruction-ci, i va
donc, maintenant,

88
00:06:40,447 --> 00:06:45,950
prendre la valeur 1.
j va être initialisé à 0.

89
00:06:45,950 --> 00:06:54,150
La condition est, maintenant, j
strictement inférieur à i qui vaut 1.

90
00:06:54,150 --> 00:06:59,470
Donc, j va prendre les valeurs, ou plus
exactement la valeur 0.

91
00:06:59,470 --> 00:07:03,656
Et on va s'arrêter, tout de suite, dans la
boucle.

92
00:07:03,656 --> 00:07:05,944
Donc, pour l'instant,

93
00:07:05,944 --> 00:07:10,092
j à la valeur 0.
On va exécuter cette instruction, ici.

94
00:07:10,092 --> 00:07:13,160
C'est-à-dire, afficher la valeur de j qui
est 0.

95
00:07:13,160 --> 00:07:19,500
On sort de la boucle pour arriver à cette
instruction, ici,

96
00:07:19,500 --> 00:07:25,997
qui fait un retour à la ligne.
Et, on arrive à la fin de la boucle for i.

97
00:07:25,997 --> 00:07:27,510
Et on va revenir, donc,

98
00:07:27,510 --> 00:07:32,836
ici.
i va donc

99
00:07:32,836 --> 00:07:38,909
prendre la valeur 2.
On rentre dans cette boucle for i, pour

100
00:07:38,909 --> 00:07:44,654
exécuter cette instruction for qui, encore
une fois, initialise j à 0.

101
00:07:44,654 --> 00:07:49,832
La condition est, maintenant, j
strictement inférieur à 2.

102
00:07:49,832 --> 00:07:52,568
Donc, j va prendre la

103
00:07:52,568 --> 00:07:57,170
valeur 0 et 1.
On commence avec la

104
00:07:57,170 --> 00:08:02,590
valeur 0 dans j.
Et on exécute cette instruction print.

105
00:08:02,590 --> 00:08:07,690
C'est-à-dire qu'on va afficher la valeur
de 0, la valeur de j qui est 0.

106
00:08:07,690 --> 00:08:11,274
On arrive à la fin de la boucle for j,

107
00:08:11,274 --> 00:08:16,076
et on revient, ici, avec j qui va
maintenant valoir 1.

108
00:08:16,076 --> 00:08:16,932
On va donc,

109
00:08:16,932 --> 00:08:23,960
exécuter cette instruction qui affiche la
valeur de j, c'est-à-dire 1.

110
00:08:23,960 --> 00:08:26,886
Et on va sortir de la boucle.

111
00:08:26,886 --> 00:08:32,088
C'est-à-dire, exécuter cette
instruction-ci, qui fait un

112
00:08:32,088 --> 00:08:37,404
retour à la ligne.
On arrive à la fin de la boucle for i.

113
00:08:37,404 --> 00:08:41,667
i vaut maintenant 3.
Cette condition est fausse.

114
00:08:41,667 --> 00:08:42,023
Et on

115
00:08:42,023 --> 00:08:45,700
va sortir de la boucle pour arriver à la
fin du code.

116
00:08:45,700 --> 00:08:53,395
Et on va donc, bien afficher le résultat
qui était donné.

