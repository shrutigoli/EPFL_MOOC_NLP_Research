1
00:00:00,000 --> 00:00:05,850
Dans une séquence vidéo précédente,

2
00:00:05,850 --> 00:00:10,812
nous avons vu les structures de contrôle,
c'est-à-dire ces

3
00:00:10,812 --> 00:00:14,732
instructions Java qui permettent aux
données d'influencer,

4
00:00:14,732 --> 00:00:18,364
de choisir, de répéter, différentes
parties du programme.

5
00:00:18,364 --> 00:00:20,568
Et nous avons vu que ces structures

6
00:00:20,568 --> 00:00:23,780
de contrôle utilisent beaucoup la notion
de bloc.

7
00:00:23,780 --> 00:00:25,220
Cette notion de bloc va avoir

8
00:00:25,220 --> 00:00:28,895
une conséquence sur l'utilisation des
variables, c'est ce que l'on appelle

9
00:00:28,895 --> 00:00:30,812
la portée des variables que nous

10
00:00:30,812 --> 00:00:34,010
allons maintenant détailler dans cette
séquence-ci.

11
00:00:34,010 --> 00:00:38,012
En Java les instructions peuvent donc être
regroupées

12
00:00:38,012 --> 00:00:41,193
en bloc, et ceci indépendamment des
structures de contrôle.

13
00:00:41,193 --> 00:00:43,267
Il suffit pour cela de regrouper donc les

14
00:00:43,267 --> 00:00:47,710
instructions entre une accolade ouvrante
et une accolade fermante.

15
00:00:47,710 --> 00:00:50,325
Par exemple, ici, j'ai dans un bloc, donc
avec une

16
00:00:50,325 --> 00:00:55,046
accolade ouvrante et une accolade
fermante, déclaré une variable keyb de

17
00:00:55,046 --> 00:01:00,842
type scanner, une variable i de type int,
une variable x de type double et je peux

18
00:01:00,842 --> 00:01:06,127
par exemple, les utiliser pour lire la
valeur de i, lire la valeur

19
00:01:06,127 --> 00:01:10,969
de x ou par exemple pour afficher la
valeur de i, la valeur de x.

20
00:01:10,969 --> 00:01:15,380
Ces variables appartiennent au bloc dans
lequel elles ont été déclarées.

21
00:01:15,380 --> 00:01:18,332
Vous voyez donc qu'en Java, les blocs ont
une grande

22
00:01:18,332 --> 00:01:22,364
autonomie, au sens où ils peuvent contenir
leurs propres variables.

23
00:01:22,364 --> 00:01:27,570
Un deuxième ici, plus simple, où on a un
bloc contrôlé par une instruction if.

24
00:01:27,570 --> 00:01:30,002
Le bloc commence donc ici, et se termine

25
00:01:30,002 --> 00:01:32,922
par l'accolade fermante ici, et dans
lequel on

26
00:01:32,922 --> 00:01:35,744
déclare une variable j de type entier, que

27
00:01:35,744 --> 00:01:38,722
l'on peut donc ensuite utiliser dans ce
bloc.

28
00:01:38,722 --> 00:01:40,618
Mais une fois que l'on a quitté

29
00:01:40,618 --> 00:01:43,624
le bloc, à partir de cet endroit-là, on ne
peut

30
00:01:43,624 --> 00:01:49,150
plus utiliser cette variable j qui
appartenait au bloc en question.

31
00:01:49,150 --> 00:01:53,376
Des variables déclarées comme ceci dans un
bloc et qui ne sont accessibles donc que

32
00:01:53,376 --> 00:01:55,236
dans ce bloc, c'est ce qu'on appelle des

33
00:01:55,236 --> 00:01:57,811
variables locales, elles sont locales à ce
bloc.

34
00:01:57,811 --> 00:02:02,336
On peut aussi déclarer des variables hors
de tout bloc, dans la classe

35
00:02:02,336 --> 00:02:03,818
dans laquelle on est en train de

36
00:02:03,818 --> 00:02:06,041
travailler, c'est ce qu'on appelle les
variables

37
00:02:06,041 --> 00:02:07,421
globales à la classe.

38
00:02:07,421 --> 00:02:10,490
On distinguera dans le cours orienté

39
00:02:10,490 --> 00:02:13,277
objet, les variables d'instance, des
variables

40
00:02:13,277 --> 00:02:16,712
de classe, mais ça nous emmènerait ici, un
petit peu trop loin.

41
00:02:16,712 --> 00:02:19,679
Le conseil qu'on peut par contre vous
donner ici c'est

42
00:02:19,679 --> 00:02:23,188
de déclarer vos variables au plus proche
de leur utilisation.

43
00:02:23,188 --> 00:02:26,194
Qu'est-ce-que cela veut dire?
Prenons un exemple.

44
00:02:26,194 --> 00:02:31,285
Si je reprends l'exemple précédent avec le
bloc ici contrôlé par

45
00:02:31,285 --> 00:02:35,110
une instruction if, dans lequel j'utilise
la variable j, mais on

46
00:02:35,110 --> 00:02:38,736
suppose que je n'utilise donc plus la
variable j après ce bloc.

47
00:02:38,736 --> 00:02:40,300
A ce moment là, je mets donc la

48
00:02:40,300 --> 00:02:43,156
déclaration ici au plus proche de son
utilisation,

49
00:02:43,156 --> 00:02:45,314
donc dès que j'en ai besoin, avant la

50
00:02:45,314 --> 00:02:48,560
première ligne où je vais utiliser
l'instruction j.

51
00:02:48,560 --> 00:02:52,320
Par opposition, donc dans la même
situation où j'ai besoin

52
00:02:52,320 --> 00:02:56,420
ici d'une variable j qui n'est plus
utilisée après le bloc

53
00:02:56,420 --> 00:02:59,020
contrôlé par l'instruction if, si je

54
00:02:59,020 --> 00:03:01,425
déclarais ici savoir cette variable, je
peux

55
00:03:01,425 --> 00:03:04,787
tout à fait le faire, le déclarer avant le
bloc, ça ne serait pas

56
00:03:04,787 --> 00:03:09,410
déclarer la variable au plus proche de son
utilisation, puisque cette variable j

57
00:03:09,410 --> 00:03:14,140
serait déclarée hors du bloc et pourrait
donc être utilisée ensuite, par la suite.

58
00:03:14,140 --> 00:03:18,336
L'idée c'est de la déclarer le plus près
de l'endroit où on l'utilise.

59
00:03:18,336 --> 00:03:21,739
Cette notion d'endroit où l'on utilise la
variable,

60
00:03:21,739 --> 00:03:25,346
plus exactement d'endroit où l'on peut
utiliser une

61
00:03:25,346 --> 00:03:28,391
variable, c'est ce que l'on appelle la
portée.

62
00:03:28,391 --> 00:03:31,904
La portée d'une variable c'est l'ensemble
des lignes de code

63
00:03:31,904 --> 00:03:35,385
où cette variable est accessible,
utilisable, où on peut en parler.

64
00:03:35,385 --> 00:03:41,082
Si je prends un exemple, donc avec ici une
première instruction if qui a

65
00:03:41,082 --> 00:03:46,958
ici son bloc, donc qui contrôle ici un
bloc d'instruction, et puis

66
00:03:46,958 --> 00:03:49,741
une deuxième instruction if, ici, qui

67
00:03:49,741 --> 00:03:53,100
contrôle elle-même aussi son bloc
d'instructions.

68
00:03:53,100 --> 00:03:58,554
Dans le bloc de plus haut niveau, on va
déclarer ici, une variable j, et puis

69
00:03:58,554 --> 00:04:04,264
dans le bloc le plus profond on a déclaré
une variable k, que l'on utilise.

70
00:04:04,264 --> 00:04:08,680
La portée de k, c'est-à-dire l'ensemble
des lignes de code où

71
00:04:08,680 --> 00:04:12,365
k est défini, ça va être le bloc ici de la
deuxième

72
00:04:12,365 --> 00:04:13,613
instruction if.

73
00:04:13,613 --> 00:04:19,378
Alors que la portée de j, c'est-à-dire
l'ensemble des lignes dans lesquelles

74
00:04:19,378 --> 00:04:24,886
j est défini, utilisable, ça va être le
bloc ici dans lequel il a été défini.

75
00:04:24,886 --> 00:04:27,819
Donc vous voyez ici, k et j ont

76
00:04:27,819 --> 00:04:31,820
des portées différentes, indiquées par ces
deux blocs.

77
00:04:31,820 --> 00:04:34,928
Une question qu'on pourrait se poser,
c'est: et

78
00:04:34,928 --> 00:04:37,952
qu'est-ce qui se passe si j'avais ici
déclaré

79
00:04:37,952 --> 00:04:40,550
une variable j dans ce bloc?

80
00:04:40,550 --> 00:04:45,765
Bien, en Java on n'a pas le droit de faire
ce genre de choses, on n'a pas

81
00:04:45,765 --> 00:04:50,840
le droit d'avoir deux variables de même
nom dans une portée, dans une même portée.

82
00:04:50,840 --> 00:04:53,652
Donc par exemple, si j'avais ici déclaré
dans le

83
00:04:53,652 --> 00:04:56,660
deuxième bloc, une variable j, je vais
avoir une

84
00:04:56,660 --> 00:04:59,648
erreur de compilateur de Java qui va me
dire

85
00:04:59,648 --> 00:05:02,600
que c'est interdit, qu'il y a ambiguïté de
noms.

86
00:05:02,600 --> 00:05:02,990
Donc en

87
00:05:02,990 --> 00:05:04,225
Java, ceci est interdit.

88
00:05:04,225 --> 00:05:06,240
Vous ne pouvez pas avoir dans une même

89
00:05:06,240 --> 00:05:08,696
portée, deux objets différents qui ont le
même nom.

90
00:05:08,696 --> 00:05:11,710
Mais ceci est possible dans d'autres
langages de programmation.

91
00:05:11,710 --> 00:05:15,835
Un cas particulier de portée à bien
comprendre, à connaître, c'est le

92
00:05:15,835 --> 00:05:20,099
cas de la portée de variables de boucle
itérative, de boucle for.

93
00:05:20,099 --> 00:05:24,106
Si je prends donc un exemple ici, avec une
boucle for qui

94
00:05:24,106 --> 00:05:28,288
déclare une variable i de type entier, que
je peux bien sûr donc

95
00:05:28,288 --> 00:05:31,798
utiliser dans le bloc, la portée de ce i
va être

96
00:05:31,798 --> 00:05:38,062
donc, le bloc contrôlé par l'instruction
for, ainsi évidemment que la partie

97
00:05:38,062 --> 00:05:43,280
condition et la partie incrément de la
boucle for, mais cette variable

98
00:05:43,280 --> 00:05:47,190
i va être, donc, locale au for, locale, à
la boucle itérative.

99
00:05:47,190 --> 00:05:49,980
À partir de la fin du bloc contrôlé par

100
00:05:49,980 --> 00:05:53,580
le for, on ne pourra plus utiliser cette
variable

101
00:05:53,580 --> 00:05:59,417
i, elle est locale à l'itération for.

