1
00:00:00,000 --> 00:00:03,162
Dans cette vidéo, nous allons voir une

2
00:00:03,162 --> 00:00:08,000
deuxième structure de contrôle, qui sont
les itérations.

3
00:00:08,000 --> 00:00:11,550
Alors à quoi va servir cette nouvelle
structure de contrôle?

4
00:00:11,550 --> 00:00:14,902
Supposons par exemple que je veuille
afficher le carré

5
00:00:14,902 --> 00:00:18,665
des cinq premiers entiers, comme ici,
c'est-à-dire que je veuille

6
00:00:18,665 --> 00:00:21,461
afficher le carré de zéro vaut zéro, le
carré

7
00:00:21,461 --> 00:00:24,530
de un vaut un, le carré de deux vaut
quatre,

8
00:00:24,530 --> 00:00:27,340
jusque le carré de quatre vaut seize.

9
00:00:27,340 --> 00:00:32,299
On pourrait, pour obtenir cet affichage,
utiliser cinq instructions

10
00:00:32,299 --> 00:00:37,862
d'affichage, mais en fait, dans un tel
cas, on peut, je dirais même on doit,

11
00:00:37,862 --> 00:00:43,120
utiliser une itération ou ce qu'on appelle
aussi aussi une boucle for, c'est-à-dire

12
00:00:43,120 --> 00:00:50,380
qu'en fait ce code va permettre d'obtenir
l'ensemble de cet affichage

13
00:00:50,380 --> 00:00:54,505
en bouclant ou en itérant sur cette seule
instruction d'affichage.

14
00:00:54,505 --> 00:00:59,270
Et je vais maintenant détailler ce code
pour vous expliquer pourquoi.

15
00:00:59,270 --> 00:01:02,546
Une itération, ou ce qu'on appelle donc
aussi,

16
00:01:02,546 --> 00:01:06,186
une boucle for, commence tout simplement
avec le

17
00:01:06,186 --> 00:01:12,050
mot-clé for, vient ensuite la déclaration
et l'initialisation

18
00:01:12,050 --> 00:01:15,699
d'une variable qui va servir à contrôler
le nombre

19
00:01:15,699 --> 00:01:16,990
de tour de boucle.

20
00:01:16,990 --> 00:01:21,890
Cette déclaration et initialisation n'est
exécutée qu'une

21
00:01:21,890 --> 00:01:24,972
seule fois avant d'entrer dans la boucle.

22
00:01:24,972 --> 00:01:30,237
Vient ensuite quelque chose que vous
pouvez reconnaître, puisqu'il s'agit d'une

23
00:01:30,237 --> 00:01:32,610
condition, que vous avez rencontrée dans

24
00:01:32,610 --> 00:01:35,050
la vidéo sur les branchements
conditionnels.

25
00:01:35,050 --> 00:01:39,090
Cette condition sera testée avant d'entrer
dans la boucle.

26
00:01:39,090 --> 00:01:41,493
Si elle est vraie, on va continuer

27
00:01:41,493 --> 00:01:46,190
à exécuter la boucle, si elle est fausse,
on va sortir de la boucle.

28
00:01:46,190 --> 00:01:50,840
Vient ensuite une instruction
d'incrémentation,

29
00:01:50,840 --> 00:01:53,550
qui dans cet exemple s'écrit ++i.

30
00:01:53,550 --> 00:02:00,230
Je vous rappelle quand on utilise
l'opérateur d'incrémentation ++ sur la

31
00:02:00,230 --> 00:02:07,255
variable i, c'est équivalent à écrire i =
i +1, c'est-à-dire que cette instruction

32
00:02:07,255 --> 00:02:09,525
va ajouter un à la variable i.

33
00:02:09,525 --> 00:02:14,040
Cette instruction d'incrémentation va
permettre de faire évoluer

34
00:02:14,040 --> 00:02:17,460
la variable qui permet de contrôler le
nombre

35
00:02:17,460 --> 00:02:24,030
de tour de boucle, et elle n'est exécutée
qu'à la fin de chaque tour de boucle.

36
00:02:24,030 --> 00:02:27,730
La déclaration et l'initialisation de la
variable qui sert à

37
00:02:27,730 --> 00:02:32,858
contrôler le nombre de tour de boucle, la
condition et l'instruction

38
00:02:32,858 --> 00:02:38,628
d'incrémentation sont entourées par des
parenthèses et sont séparées

39
00:02:38,628 --> 00:02:43,642
par des points-virgule.
Vient ensuite

40
00:02:43,642 --> 00:02:48,618
un bloc d'instruction, qui

41
00:02:48,618 --> 00:02:53,313
constitue le corps de la boucle, et qui
est, qui contient

42
00:02:53,313 --> 00:02:58,070
les instructions qui vont être exécutées à
chaque tour de boucle.

43
00:02:58,070 --> 00:03:02,348
Comme pour le branchement conditionnel,
qui utilise le

44
00:03:02,348 --> 00:03:05,890
mot-clé if, les accolades ne sont
obligatoires que

45
00:03:05,890 --> 00:03:09,977
quand plusieurs instructions doivent être
répétées, c'est-à-dire quand

46
00:03:09,977 --> 00:03:13,149
le corps de la boucle contient plusieurs
instructions.

47
00:03:13,149 --> 00:03:17,426
C'est-à-dire que si je n'ai qu'une seule
instruction à répéter, comme ici,

48
00:03:17,426 --> 00:03:22,580
je ne suis pas obligé de mettre des
accolades ici et ici.

49
00:03:22,580 --> 00:03:23,690
En revanche,

50
00:03:23,690 --> 00:03:28,994
même dans ce cas, il est conseillé
d'utiliser des accolades, c'est-à-dire

51
00:03:28,994 --> 00:03:32,296
mettre une accolade ouvrante avant
l'instruction

52
00:03:32,296 --> 00:03:35,640
et une accolade fermante après
l'instruction.

53
00:03:35,640 --> 00:03:39,776
Je vais maintenant détailler pas-à-pas
l'exécution

54
00:03:39,776 --> 00:03:42,820
de notre premier exemple de boucle for.

55
00:03:42,820 --> 00:03:46,084
Tout d'abord, notre boucle for commence

56
00:03:46,084 --> 00:03:49,858
par déclarer une variable i et
l'initialiser

57
00:03:49,858 --> 00:03:51,691
à la valeur zéro.

58
00:03:51,691 --> 00:03:59,755
Ensuite, on va tester la condition, qui
est ici i strictement inférieur à cinq.

59
00:03:59,755 --> 00:04:05,159
La condition est vraie, puisque i vaut
zéro, et zéro est strictement

60
00:04:05,159 --> 00:04:11,010
inférieur à cinq, et donc on va entrer
dans le corps de la boucle.

61
00:04:11,010 --> 00:04:15,420
Entrer dans le corps de la boucle, ça veut
dire exécuter

62
00:04:15,420 --> 00:04:21,260
cette instruction-ci, qui est la seule
instruction dans le corps de la boucle.

63
00:04:21,260 --> 00:04:25,590
Et cette instruction va afficher le carré
de, qu'on retrouve

64
00:04:25,590 --> 00:04:28,225
ici, suivi de la valeur de i qui est, tout

65
00:04:28,225 --> 00:04:32,059
simplement zéro, suivi de vaut, et suivi
de la valeur

66
00:04:32,059 --> 00:04:36,250
de l'expression i fois i, qui vaut
simplement zéro ici.

67
00:04:36,250 --> 00:04:40,772
Ensuite on arrive à la fin du corps de la
boucle

68
00:04:40,772 --> 00:04:45,693
et on va revenir sur cette ligne-ci et
plus exactement, à

69
00:04:45,693 --> 00:04:50,969
l'instruction d'incrémentation, qui est
ici ++i, qui va donc

70
00:04:50,969 --> 00:04:56,450
ajouter un à la variable i et i va prendre
la valeur un.

71
00:04:56,450 --> 00:05:01,156
On teste ensuite de nouveau la condition i

72
00:05:01,156 --> 00:05:05,796
strictement inférieur à cinq, qui est
encore une

73
00:05:05,796 --> 00:05:11,150
fois vraie, et donc, on va entrer dans la
boucle.

74
00:05:11,150 --> 00:05:16,450
Entrer dans la boucle, ça veut dire
répéter cette

75
00:05:16,450 --> 00:05:21,862
nouvelle instruction d'affichage, avec
toujours le carré de, cette fois-ci i

76
00:05:21,862 --> 00:05:26,199
vaut un, ensuite on affiche vaut et on
affiche la

77
00:05:26,199 --> 00:05:30,300
valeur de l'expression i fois i qui vaut
simplement un ici.

78
00:05:30,300 --> 00:05:31,132
On arrive

79
00:05:31,132 --> 00:05:37,338
encore une fois à l'instruction
d'incrémentation qui va donner la

80
00:05:37,338 --> 00:05:43,380
valeur deux à la variable i et ainsi de
suite, jusqu'à ce que

81
00:05:43,380 --> 00:05:48,665
la variable i ait la valeur quatre et
qu'on exécute l'instruction

82
00:05:48,665 --> 00:05:53,150
d'incrémentation qui va faire que i va
passer de quatre à cinq.

83
00:05:53,150 --> 00:05:56,820
On va ensuite tester la condition

84
00:05:56,820 --> 00:06:02,636
i strictement inférieur à cinq.
Cette fois-ci, cette

85
00:06:02,636 --> 00:06:08,290
condition va être fausse, puisque cinq
n'est pas strictement inférieur à cinq.

86
00:06:08,290 --> 00:06:16,520
Et comme cette instruction est fausse, on
sort de la boucle.

87
00:06:16,520 --> 00:06:22,596
On va continuer après la boucle,
c'est-à-dire exécuter

88
00:06:22,596 --> 00:06:25,497
les instructions qui se trouvent ici.

89
00:06:25,497 --> 00:06:30,975
Au passage, la variable i, qu'on avait
déclarée ici, n'existe plus, c'est-à-dire

90
00:06:30,975 --> 00:06:33,467
qu'on ne peut plus l'utiliser, cette

91
00:06:33,467 --> 00:06:36,730
variable n'existe qu'à l'intérieur de
boucle.

92
00:06:36,730 --> 00:06:42,590
La boucle for suit donc la syntaxe
suivante.

93
00:06:42,590 --> 00:06:44,312
Tout d'abord, le mot clé for,

94
00:06:44,312 --> 00:06:48,450
puis entre parenthèses la déclaration et
l'initialisation

95
00:06:48,450 --> 00:06:51,490
d'une variable, qui n'est pas forcément de
type int,

96
00:06:51,490 --> 00:06:54,971
puis vient une condition qui à priori
devrait porter sur

97
00:06:54,971 --> 00:06:57,984
cette variable, même s'il n'y a aucune
obligation, et

98
00:06:57,984 --> 00:07:03,355
une incrémentation qui, elle aussi,
devrait porter sur cette variable.

99
00:07:03,355 --> 00:07:05,995
Puis vient un bloc d'instructions, qui
constitue

100
00:07:05,995 --> 00:07:08,910
les instructions qui seront répétées par
la boucle.

101
00:07:08,910 --> 00:07:10,860
Alors je vous rappelle que les trois

102
00:07:10,860 --> 00:07:13,655
éléments à l'intérieur des parenthèses de
la boucle

103
00:07:13,655 --> 00:07:19,370
for, sont séparés par des points-virgules,
et qu'il n'y a pas de point-virgules ici.

104
00:07:19,370 --> 00:07:23,455
La boucle for répète les instructions qui
sont dans

105
00:07:23,455 --> 00:07:26,716
le bloc tant que la condition ici est
vraie.

106
00:07:26,716 --> 00:07:29,124
Si la condition ne devient jamais

107
00:07:29,124 --> 00:07:33,166
fausse, ces instructions seront répétées
indéfiniment.

108
00:07:33,166 --> 00:07:36,071
Passons à un nouvel exemple de boucle
fort.

109
00:07:36,071 --> 00:07:38,681
Supposons que je veuille afficher la

110
00:07:38,681 --> 00:07:43,578
table de multiplication par cinq.
Sans utiliser de boucle for, je serais

111
00:07:43,578 --> 00:07:48,952
obligé de répéter dix fois quasiment, la
même instruction, c'est-à-dire

112
00:07:48,952 --> 00:07:53,895
cette instruction-ci, qui affiche cinq
multiplié par un vaut

113
00:07:53,895 --> 00:07:58,994
cinq fois un, suivi de cinq multiplié par
deux vaut cinq

114
00:07:58,994 --> 00:08:04,150
fois deux, jusque cinq multiplié par dix
vaut cinq fois dix.

115
00:08:04,150 --> 00:08:08,623
Dans un tel cas, encore une fois, il faut
utiliser une

116
00:08:08,623 --> 00:08:14,050
boucle for et cette boucle for va s'écrire
de la façon suivante.

117
00:08:14,050 --> 00:08:18,712
C'est-à-dire que je vais déclarer et
initialiser cette fois-ci ma variable

118
00:08:18,712 --> 00:08:21,994
qui sert à contrôler le nombre de tour de
boucle à un.

119
00:08:21,994 --> 00:08:29,170
Comme condition, je vais utiliser la
condition i inférieur ou égal à

120
00:08:29,170 --> 00:08:34,506
dix et je vous rappelle que le symbole
inférieur ou égal se note avec le

121
00:08:34,506 --> 00:08:39,800
caractère inférieur suivi du caractère
égal.

122
00:08:39,800 --> 00:08:44,210
Et je vais utiliser l'opération
d'incrémentation ++i.

123
00:08:44,210 --> 00:08:49,520
La variable i va donc prendre ici la
valeur de un à dix.

124
00:08:49,520 --> 00:08:54,830
Cette boucle for va donc être bien
équivalent à l'ensemble

125
00:08:54,830 --> 00:08:57,390
de ces dix instructions d'affichage, et

126
00:08:57,390 --> 00:09:00,560
m'afficher la table de multiplication par
cinq.

127
00:09:00,560 --> 00:09:05,125
Le bloc d'instructions répété par une
boucle for peut

128
00:09:05,125 --> 00:09:09,210
contenir n'importe quelle instruction, par
exemple un branchement conditionnel.

129
00:09:09,210 --> 00:09:10,827
Voici donc un quiz, avec un

130
00:09:10,827 --> 00:09:14,510
branchement conditionnel à l'intérieur
d'une boucle for.

131
00:09:14,510 --> 00:09:17,710
À votre avis, qu'affiche ce code quand on
l'exécute?

132
00:09:17,710 --> 00:09:19,910
Alors la bonne réponse est

133
00:09:19,910 --> 00:09:23,340
la réponse A, et nous allons voir
pourquoi.

134
00:09:23,340 --> 00:09:32,050
La boucle for commence par déclarer une
variable i et l'initialiser à zéro.

135
00:09:32,050 --> 00:09:38,410
La condition est i strictement inférieur à
cinq, l'instruction d'incrémentation

136
00:09:38,410 --> 00:09:44,770
est ++i, i va donc prendre les valeurs de
zéro à quatre.

137
00:09:44,770 --> 00:09:48,130
La première instruction dans le corps de
la boucle

138
00:09:48,130 --> 00:09:51,994
affiche la valeur de i, c'est-à-dire pour
l'instant zéro.

139
00:09:51,994 --> 00:09:58,755
Notez au passage qu'on a utilisé ici
print, non pas println, ce qui fait

140
00:09:58,755 --> 00:10:00,965
que la prochaine chose qui sera affichée

141
00:10:00,965 --> 00:10:03,484
va s'afficher après le zéro, c'est-à-dire
ici.

142
00:10:03,484 --> 00:10:09,784
On passe ensuite au branchement
conditionnel qui teste si i module o deux

143
00:10:09,784 --> 00:10:10,708
est égal à zéro.

144
00:10:10,708 --> 00:10:13,905
Alors pour trouver la valeur de i module o
deux,

145
00:10:13,905 --> 00:10:18,500
il faut commencer par diviser i par deux,
i vaut zéro.

146
00:10:18,500 --> 00:10:23,620
Zéro est égal à zéro fois deux plus zéro.

147
00:10:23,620 --> 00:10:29,736
Le module o de i par deux est ce zéro.
Tout ceci vaut zéro, cette

148
00:10:29,736 --> 00:10:35,667
condition-là est donc vraie.
On va entrer dans le branchement

149
00:10:35,667 --> 00:10:43,900
conditionnel c'est-à-dire exécuter cette
instruction-ci qui affiche le caractère p.

150
00:10:43,900 --> 00:10:49,325
On passe ensuite à la dernière instruction
dans le corps de

151
00:10:49,325 --> 00:10:54,850
la boucle, qui affiche un espace que je
vais noter de cette façon-ci.

152
00:10:54,850 --> 00:11:01,556
On arrive à la fin du corps de la boucle
et on va revenir ici, avec cette fois-ci

153
00:11:01,556 --> 00:11:03,010
i qui vaut un.

154
00:11:03,010 --> 00:11:09,615
On recommence à exécuter le corps de la
boucle, c'est-à-dire on recommence ici

155
00:11:09,615 --> 00:11:15,680
avec cette instruction qui va afficher la
valeur de i, c'est-à-dire maintenant un.

156
00:11:15,680 --> 00:11:21,619
On passe au branchement conditionnel qui
teste si i module o deux est égal à zéro.

157
00:11:21,619 --> 00:11:25,230
Pour trouver i module o deux, il faut
diviser i,

158
00:11:25,230 --> 00:11:30,612
c'est-à-dire un par deux.
Un va s'écrire zéro fois

159
00:11:30,612 --> 00:11:36,130
deux plus un, i module o deux vaut donc ce
un-là.

160
00:11:36,130 --> 00:11:41,670
Ceci vaut un et donc cette condition est
fausse.

161
00:11:41,670 --> 00:11:45,960
On va donc sauter cette instruction-ci,
passer

162
00:11:45,960 --> 00:11:50,100
à cette instruction- là, qui affiche un
espace.

163
00:11:50,100 --> 00:11:56,450
On arrive à la fin du corps de la boucle,
et on va revenir encore une fois ici.

164
00:11:56,450 --> 00:11:59,576
i va valoir maintenant deux.

165
00:11:59,576 --> 00:12:03,336
On recommence à l'intérieur du corps de la
boucle.

166
00:12:03,336 --> 00:12:06,680
On affiche la valeur de i, c'est-à-dire
deux.

167
00:12:06,680 --> 00:12:13,450
On passe au branchement conditionnel.
On va calculer i module o deux.

168
00:12:13,450 --> 00:12:15,597
i vaut deux.
Il se trouve

169
00:12:15,597 --> 00:12:19,527
que deux est égal à une fois deux plus
zéro.

170
00:12:19,527 --> 00:12:25,024
Donc i module o deux est égal à ce
zéro-ci, le zéro ici.

171
00:12:25,024 --> 00:12:29,570
Cette condition-là est donc vraie.

172
00:12:29,570 --> 00:12:35,237
On entre dans le branchement conditionnel,
c'est-à-dire qu'on va afficher,

173
00:12:35,237 --> 00:12:40,132
on va exécuter cet affichage-ci, qui
affiche le caractère p.

174
00:12:40,132 --> 00:12:41,092
On va passer

175
00:12:41,092 --> 00:12:46,267
ensuite à cette instruction-ci, qui va
afficher un espace, etc.

176
00:12:46,267 --> 00:12:51,940
etc., et on va bien obtenir l'affichage
donné par la réponse A.

177
00:12:51,940 --> 00:12:57,508
Alors cette condition-ci avec le module o
peut être un peu compliquée

178
00:12:57,508 --> 00:13:02,778
pour un débutant, mais en fait on peut
l’interpréter très simplement.

179
00:13:02,778 --> 00:13:06,177
Ça teste juste si le reste de la division
par

180
00:13:06,177 --> 00:13:09,531
deux d'un nombre est égale à zéro.

181
00:13:09,531 --> 00:13:12,552
Et, avec des mots, j'aurais pu dire: je
teste

182
00:13:12,552 --> 00:13:15,794
si cette valeur, donc la valeur de i, est
paire.

183
00:13:15,794 --> 00:13:22,360
Donc cette condition est équivalent à se
poser la question: est-ce que i est pair?

