1
00:00:04,979 --> 00:00:08,789
Continuons donc la programmation
de notre fameux jeu puissance 4.

2
00:00:08,789 --> 00:00:11,179
A ce stade nous savons
représenter le jeu,

3
00:00:11,179 --> 00:00:12,929
nous savons représenter les couleurs,

4
00:00:12,929 --> 00:00:14,747
nous savons initialiser le jeu,

5
00:00:14,747 --> 00:00:15,765
l'afficher,

6
00:00:15,765 --> 00:00:18,925
et puis nous avons vu comment
faire le cœur du programme

7
00:00:18,925 --> 00:00:21,061
qui est donc cette méthode joue

8
00:00:21,061 --> 00:00:24,859
qui permet de recevoir un numéro
de colonne de la part d'un joueur,

9
00:00:24,859 --> 00:00:27,269
vérifier si l'on peut effectivement
jouer dans cette colonne,

10
00:00:27,269 --> 00:00:29,129
et si l'on peut jouer le coup.

11
00:00:29,129 --> 00:00:32,539
Mais à ce stade-là, nous ne savons
toujours pas vraiment jouer au jeu.

12
00:00:32,539 --> 00:00:34,365
Donc essayons d'écrire
une méthode <i>main</i>

13
00:00:34,365 --> 00:00:36,621
qui va effectivement faire
que le jeu se déroule.

14
00:00:36,621 --> 00:00:38,140
Pour cela, ce qu'il va falloir faire

15
00:00:38,140 --> 00:00:40,949
c'est bien sûr demander
un coup à un joueur,

16
00:00:41,489 --> 00:00:43,008
jouer ce coup,

17
00:00:43,396 --> 00:00:46,536
afficher le jeu, et puis alterner,

18
00:00:47,593 --> 00:00:50,123
changer la couleur du joueur.

19
00:00:51,774 --> 00:00:56,824
Bien sûr, tout ceci, nous voulons
le répéter tour à tour

20
00:00:56,824 --> 00:00:59,514
tant que la partie n'est pas finie.

21
00:00:59,514 --> 00:01:02,964
Nous voici donc au clair sur ce que
doit faire la méthode, sur le « quoi ».

22
00:01:02,964 --> 00:01:05,184
Comme toujours, quand
on écrit une méthode,

23
00:01:05,184 --> 00:01:08,514
on doit d'abord se préoccuper
de ce qu'elle doit faire, du « quoi ».

24
00:01:08,514 --> 00:01:11,334
Ceci étant clair, on peut
maintenant commencer à écrire

25
00:01:11,334 --> 00:01:13,944
et on commence bien sûr
par l'en-tête classique

26
00:01:13,944 --> 00:01:17,944
et puis le corps de la méthode <i>main</i>.

27
00:01:17,944 --> 00:01:20,714
Avant d'entrer dans cette boucle de jeu
que l'on vient de décrire,

28
00:01:20,714 --> 00:01:23,044
il faut bien sûr déclarer un jeu.

29
00:01:23,044 --> 00:01:24,750
Donc ici c'est un tableau
de deux entiers,

30
00:01:24,750 --> 00:01:26,316
qu'on appelle grille.

31
00:01:26,316 --> 00:01:30,804
Et l'on sait qu'une grille de puissance 4
a six lignes et sept colonnes.

32
00:01:30,804 --> 00:01:33,504
Ensuite on va bien sûr l'initialiser.

33
00:01:33,504 --> 00:01:36,524
Donc on appelle
notre méthode initialise.

34
00:01:36,524 --> 00:01:41,274
Et il est bon de l'afficher pour montrer
qu'on démarre avec la grille vide.

35
00:01:41,674 --> 00:01:44,224
Voilà on va ensuite fixer
la couleur du premier joueur.

36
00:01:44,224 --> 00:01:47,644
Donc au puissance 4, on commence
avec un joueur jaune ici.

37
00:01:47,644 --> 00:01:51,644
Donc on initialise une variable
couleur du joueur courant à jaune.

38
00:01:51,644 --> 00:01:55,644
Voilà, nous sommes prêts maintenant
pour démarrer notre boucle de jeu

39
00:01:55,644 --> 00:01:56,914
dont on parlait tout à l'heure.

40
00:01:56,914 --> 00:01:58,434
La question qu'on se pose ici c'est :

41
00:01:58,434 --> 00:02:01,164
est-ce que c'est une boucle <i>while</i>
ou une boucle <i>do while</i> ?

42
00:02:01,164 --> 00:02:03,484
Est-ce qu'on commence
par tester quelque chose ?

43
00:02:03,484 --> 00:02:05,624
Ou est-ce qu'on commence
par exécuter quelque chose,

44
00:02:05,624 --> 00:02:07,544
avant de faire le test
et de boucler ?

45
00:02:07,544 --> 00:02:09,744
Ici, je ne vois pas très bien
ce qu'on pourrait tester.

46
00:02:09,744 --> 00:02:11,154
On est dans la situation initiale,

47
00:02:11,154 --> 00:02:12,314
on contrôle tout.

48
00:02:12,314 --> 00:02:14,714
Donc on va commencer par faire
notre séquence de jeu,

49
00:02:14,714 --> 00:02:17,234
puis ensuite on testera
si on doit continuer,

50
00:02:17,234 --> 00:02:18,914
si le jeu se termine,

51
00:02:18,914 --> 00:02:21,014
et sinon, bien sûr, donc on bouclera.

52
00:02:21,014 --> 00:02:22,264
C'est donc une boucle <i>do while</i>.

53
00:02:22,264 --> 00:02:24,214
Et on commence donc par écrire <i>do</i>.

54
00:02:24,214 --> 00:02:26,684
Et donc ce que l'on veut faire
en premier dans notre boucle

55
00:02:26,684 --> 00:02:28,504
c'est de demander un coup au joueur.

56
00:02:28,504 --> 00:02:30,954
Pour cela, on pourrait bien sûr
en faire une fonction,

57
00:02:30,954 --> 00:02:32,874
mais ici je vais tout
vous écrire dans le <i>main</i>

58
00:02:32,874 --> 00:02:34,644
et l'on reviendra sur cela
un peu plus tard.

59
00:02:34,644 --> 00:02:36,957
Ceci dit, même si on n'en
fait pas ici une fonction,

60
00:02:36,957 --> 00:02:39,004
on peut adopter
la même méthodologie

61
00:02:39,004 --> 00:02:40,734
et décomposer donc en sous-tâches :

62
00:02:40,734 --> 00:02:42,754
pour demander un coup,
qu'est-ce qu'il faut faire ?

63
00:02:42,754 --> 00:02:45,994
Il faut poser la question
et récupérer la réponse.

64
00:02:45,994 --> 00:02:47,954
Donc on commence
par poser la question.

65
00:02:47,954 --> 00:02:51,224
Pour cela, on va afficher
un message au joueur

66
00:02:51,224 --> 00:02:52,994
et on va afficher
un message différent

67
00:02:52,994 --> 00:02:54,744
si le joueur est rouge
ou s'il est jaune

68
00:02:54,744 --> 00:02:57,374
puisqu'on va en profiter
pour lui indiquer sa couleur.

69
00:02:57,374 --> 00:03:01,984
Donc si la couleur du joueur est jaune,
alors on affiche le message suivant :

70
00:03:02,184 --> 00:03:06,184
Bon bien sûr, <i>system
point out point println</i>

71
00:03:07,440 --> 00:03:10,490
Ici, joueur et on affiche sa couleur

72
00:03:10,490 --> 00:03:13,570
donc ici on va mettre un X
pour la couleur jaune,

73
00:03:13,570 --> 00:03:16,880
joueur X, et on lui demande
donc d'entrer un coup.

74
00:03:18,280 --> 00:03:23,350
Sinon, on affiche cette fois-ci
un message pour le joueur rouge

75
00:03:24,439 --> 00:03:27,089
On utilise ici la lettre O capitale

76
00:03:27,089 --> 00:03:30,859
pour afficher, comme pour les pions,
la couleur rouge disons.

77
00:03:31,459 --> 00:03:34,069
Et on termine avec
le même message.

78
00:03:34,069 --> 00:03:36,449
Ensuite on veut saisir la réponse.

79
00:03:36,449 --> 00:03:38,919
Donc pour cela, on introduit
une nouvelle variable colonne

80
00:03:38,919 --> 00:03:41,249
qui sera la colonne dans laquelle
le joueur veut jouer.

81
00:03:41,249 --> 00:03:43,139
Et on lit avec <i>nextInt</i>.

82
00:03:43,139 --> 00:03:48,589
Bien sûr, il ne faut pas oublier
de déclarer de quoi pouvoir lire,

83
00:03:48,589 --> 00:03:52,377
donc ici le Scanner
avec la déclaration usuelle.

84
00:03:52,377 --> 00:03:55,767
Et en suivant les conseils qu'on vous a donné
dans des vidéos précédentes,

85
00:03:55,767 --> 00:03:59,627
on déclare cette variable hors du <i>main</i> ici

86
00:03:59,627 --> 00:04:02,467
pour pouvoir en profiter
dans l'ensemble du programme.

87
00:04:02,467 --> 00:04:04,607
Voilà, décalons tout ceci
un petit peu vers le haut

88
00:04:04,607 --> 00:04:07,487
pour continuer donc dans notre <i>main</i>

89
00:04:07,487 --> 00:04:11,397
et ne pas oublier que donc les indices
qu'on utilise en java dans le tableau

90
00:04:11,397 --> 00:04:15,837
sont décalés de un par rapport aux indices
que l'on utilise avec les humains.

91
00:04:15,837 --> 00:04:17,767
Les humains notent de un à six,

92
00:04:17,767 --> 00:04:21,207
alors que nous, nous allons
commencer en zéro.

93
00:04:21,207 --> 00:04:23,817
Donc il faut décaler de un
avec un « moins moins colonne ».

94
00:04:24,267 --> 00:04:27,187
Puis ensuite on va pouvoir
effectivement jouer ce coup.

95
00:04:27,187 --> 00:04:28,857
Donc je vous rappelle
que la méthode joue,

96
00:04:28,857 --> 00:04:31,547
que nous avions écrite
dans la séquence vidéo précédente,

97
00:04:31,547 --> 00:04:35,067
renvoie un booléen qui indique
vrai si le coup est valide

98
00:04:35,067 --> 00:04:36,557
et faux si le coup n'est pas valide.

99
00:04:36,557 --> 00:04:40,507
Donc on récupère ici cette valeur
de retour dans un booléen,

100
00:04:40,507 --> 00:04:45,637
dans une variable valide
que l'on a ici initialisé et déclaré

101
00:04:47,140 --> 00:04:50,270
avec donc l'appel à notre méthode joue

102
00:04:50,270 --> 00:04:52,690
qui prend donc la grille,

103
00:04:52,690 --> 00:04:56,280
le numéro de colonne que l'on vient
de recevoir depuis le joueur

104
00:04:56,280 --> 00:04:58,560
et la couleur du joueur courant

105
00:04:58,560 --> 00:05:01,320
que l'on avait donc déclaré ici.

106
00:05:01,580 --> 00:05:04,790
Si le coup n'est pas valide, il faut
quand même prévenir le joueur

107
00:05:04,790 --> 00:05:06,730
et donc si le coup n'est pas valide,

108
00:05:06,730 --> 00:05:11,320
on affiche un message indiquant
que le coup n'est pas valide :

109
00:05:11,320 --> 00:05:13,780
donc <i>println</i> le message.

110
00:05:14,678 --> 00:05:17,568
Puis troisième étape de
notre boucle : afficher le jeu.

111
00:05:17,568 --> 00:05:20,518
Et ensuite, quatrième étape de...

112
00:05:20,518 --> 00:05:23,148
on décale un peu tout ça
pour qu'on y voit clair

113
00:05:23,148 --> 00:05:26,938
...quatrième étape de notre boucle :
alterner les couleurs,

114
00:05:26,938 --> 00:05:29,418
donc changer la couleur
du joueur courant.

115
00:05:29,418 --> 00:05:32,888
Comme d'habitude, on met des commentaires
pour être le plus clair possible.

116
00:05:32,888 --> 00:05:35,018
Donc comment changer
la couleur : tout simplement.

117
00:05:35,018 --> 00:05:39,018
On pourrait aussi écrire une fonction,
bien sûr ce serait une bonne occasion,

118
00:05:39,018 --> 00:05:43,018
mais la méthode c'est simplement : 
si on est couleur jaune,

119
00:05:43,018 --> 00:05:44,778
alors on change et on met couleur rouge.

120
00:05:44,778 --> 00:05:46,508
Et sinon, on met couleur jaune.

121
00:05:46,508 --> 00:05:49,758
Donc <i>if</i> la couleur du joueur
courant est jaune,

122
00:05:49,758 --> 00:05:51,538
on la met en rouge.

123
00:05:51,958 --> 00:05:56,698
Donc si la couleur du joueur
est jaune, je la mets en rouge.

124
00:05:56,698 --> 00:06:00,038
Et sinon, je la mets en jaune.

125
00:06:00,038 --> 00:06:02,748
Couleur joueur, je vous rappelle,
est la variable qui représente

126
00:06:02,748 --> 00:06:04,968
la couleur du joueur courant.

127
00:06:04,968 --> 00:06:06,908
Voilà, on a donc terminé notre boucle

128
00:06:06,908 --> 00:06:10,468
et il n'y a plus qu'à ici
mettre la condition.

129
00:06:10,468 --> 00:06:11,968
La condition de quoi ?

130
00:06:11,968 --> 00:06:15,358
La condition de continuation du jeu.

131
00:06:15,358 --> 00:06:17,428
Donc on continue à jouer tant que...

132
00:06:17,428 --> 00:06:20,048
Et bien, je laisse cela
pour la séquence vidéo suivante

133
00:06:20,048 --> 00:06:22,548
et laisse ici un blanc.

134
00:06:22,548 --> 00:06:26,548
Voilà, ceci termine notre méthode <i>main</i>
qui nous permet de jouer.

135
00:06:26,548 --> 00:06:28,488
Je vous encourage
à compiler et à tester.

136
00:06:28,488 --> 00:06:31,358
Bien sûr, il faut mettre
quelque chose ici dans le blanc.

137
00:06:31,358 --> 00:06:33,638
Dans un premier temps,
vous pouvez mettre <i>while true</i>

138
00:06:33,638 --> 00:06:35,318
qui va faire une boucle infinie,

139
00:06:35,318 --> 00:06:38,858
puis vous arrêtez le programme
avec l'environnement.

140
00:06:38,858 --> 00:06:40,961
Mais je vous encourage
donc systématiquement,

141
00:06:40,961 --> 00:06:42,304
quand on est à une étape,

142
00:06:42,304 --> 00:06:44,308
bien sûr de tester comme ceci.

143
00:06:44,308 --> 00:06:47,168
Pour ma part, je préférerais maintenant
reprendre ce code avec vous

144
00:06:47,168 --> 00:06:49,808
afin de mieux l'organiser, le modulariser,

145
00:06:49,808 --> 00:06:53,088
c'est-à-dire faire des méthodes
des parties les plus importantes.

146
00:06:53,088 --> 00:06:56,038
On a déjà dit qu'on pourrait faire
une méthode ici d'affichage,

147
00:06:56,038 --> 00:06:57,808
on va revenir sur
ce point tout à l'heure.

148
00:06:57,808 --> 00:07:02,478
On pourrait ici faire une méthode
qui alterne les joueurs.

149
00:07:02,478 --> 00:07:04,918
Et puis, de façon plus globale,

150
00:07:04,918 --> 00:07:08,628
tout ceci on pourrait, en fait,
en faire une méthode,

151
00:07:08,628 --> 00:07:10,258
puisque c'est un peu le cœur du jeu.

152
00:07:10,258 --> 00:07:12,708
Le <i>main</i> est beaucoup trop
gros ici, vous voyez d'ailleurs

153
00:07:12,708 --> 00:07:14,268
qu'il ne tient pas sur un transparent,

154
00:07:14,268 --> 00:07:16,118
c'est un signe qu'il n'est pas bien écrit.

155
00:07:16,118 --> 00:07:17,948
Un <i>main</i> doit être très court, très clair.

156
00:07:17,948 --> 00:07:21,528
Et donc on va le modulariser,
c'est-à-dire le découper en méthodes.

157
00:07:21,528 --> 00:07:25,948
Donc le plus simple c'est de couper directement
la partie qu'on veut mettre en méthode,

158
00:07:25,948 --> 00:07:30,258
comme on vous l'avait expliqué dans la vidéo
sur la méthodologie pour développer

159
00:07:30,258 --> 00:07:31,948
des fonctions et des méthodes.

160
00:07:31,948 --> 00:07:35,643
Et puis commençons par écrire
l'appel qu'on imagine,

161
00:07:35,643 --> 00:07:39,763
donc on va par exemple dire que cette
partie correspond à demander et jouer,

162
00:07:39,763 --> 00:07:42,163
donc on va l'appeler demandeEtJoue,

163
00:07:42,163 --> 00:07:44,193
ce sera le nom de notre
méthode, demandeEtJoue,

164
00:07:44,193 --> 00:07:46,553
et qu'est-ce que doit
recevoir cette méthode ?

165
00:07:46,553 --> 00:07:49,473
Elle doit recevoir, bien sûr,
le jeu donc la grille

166
00:07:49,473 --> 00:07:52,493
et puis la couleur du joueur courant.

167
00:07:52,493 --> 00:07:55,813
Voilà les deux arguments
qu'on lui passe.

168
00:07:55,813 --> 00:08:00,273
Et nous pouvons donc maintenant
passer à l'écriture de cette méthode.

169
00:08:00,273 --> 00:08:03,583
Donc pour cela je vous rappelle
ici en commentaires, l'appel.

170
00:08:03,583 --> 00:08:07,583
Donc demandeEtJoue, on passe la grille
et on passe la couleur du joueur.

171
00:08:07,583 --> 00:08:09,584
Ce qui va donc donner l'en-tête suivant :

172
00:08:09,584 --> 00:08:13,614
<i>void</i> demandeEtJoue
qui reçoit donc une grille

173
00:08:13,614 --> 00:08:16,084
et qui reçoit une couleur.

174
00:08:16,084 --> 00:08:20,744
Ensuite simplement on va, ici,
dans le corps de la méthode,

175
00:08:20,744 --> 00:08:25,104
recopier tout ce qu'on avait
couper depuis le <i>main</i>,

176
00:08:25,104 --> 00:08:28,514
pour justement en faire une méthode.

177
00:08:28,514 --> 00:08:32,764
A ce stade-là il faut bien faire attention
de ne pas s'être trompé dans les noms.

178
00:08:32,764 --> 00:08:35,814
Par exemple, ici on a bien
repris couleurJoueur

179
00:08:35,814 --> 00:08:40,204
et donc je vous encourage vraiment
à sauvegarder, à compiler et à vérifier

180
00:08:40,204 --> 00:08:42,734
que le code est correct,
qu'on n'a pas fait d'erreurs,

181
00:08:42,734 --> 00:08:43,884
bien sûr à le relire,

182
00:08:43,884 --> 00:08:45,729
et même, éventuellement, à le tester

183
00:08:45,729 --> 00:08:48,494
avec une petite méthode de test.

184
00:08:48,494 --> 00:08:51,629
Continuons dans ce même
esprit de modulariser

185
00:08:51,629 --> 00:08:54,244
et d'éviter au maximum
les copier-collers.

186
00:08:54,244 --> 00:08:56,334
Et moi je vois plusieurs
copier-collers ici.

187
00:08:56,334 --> 00:08:59,294
Je vois que Joueur
a été répété ici.

188
00:08:59,294 --> 00:09:03,734
Je vois que l'on a répété ici le message
« entrez le numéro de colonne ».

189
00:09:03,734 --> 00:09:08,074
Donc tout ceci n'est pas correct
et il va falloir modulariser.

190
00:09:08,089 --> 00:09:11,039
Pour cela, on va récupérer
les parties communes

191
00:09:11,039 --> 00:09:15,039
et les mettre hors de
la condition sur la couleur.

192
00:09:15,039 --> 00:09:19,039
Parce qu'au fond, quelle est 
la partie qui dépend de la couleur ?

193
00:09:19,039 --> 00:09:21,045
C'est uniquement cet affichage ici

194
00:09:21,045 --> 00:09:22,651
du X et du O.

195
00:09:22,651 --> 00:09:27,039
Donc les parties communes
qui précèdent l'affichage du X,

196
00:09:27,039 --> 00:09:29,529
on va les mettre avant le <i>if</i>,

197
00:09:29,529 --> 00:09:35,039
et les parties communes qui sont
après l'affichage du X et du O,

198
00:09:35,039 --> 00:09:38,079
nous allons les mettre après le <i>if</i>.

199
00:09:38,079 --> 00:09:40,809
Ce qui nous donne donc le code suivant :

200
00:09:40,809 --> 00:09:44,389
on commence par afficher ici
le message commun Joueur espace...

201
00:09:44,389 --> 00:09:47,389
et ici attention on ne fait pas
un <i>println</i>, on fait un <i>print</i>

202
00:09:47,389 --> 00:09:50,369
puisque la ligne n'est pas terminée,
la ligne que l'on veut afficher.

203
00:09:50,369 --> 00:09:53,819
Ensuite on fait notre test
sur la couleur et dans ce cas-là,

204
00:09:53,819 --> 00:09:57,269
si la couleur est jaune, on affiche le X

205
00:09:57,269 --> 00:09:59,059
sinon, on affiche le O.

206
00:09:59,059 --> 00:10:03,899
Puis on a donc ici de nouveau la partie
commune qui est affichée avec un <i>println</i>

207
00:10:03,900 --> 00:10:07,320
qui affiche donc la fin du message.

208
00:10:07,320 --> 00:10:09,646
Et là, on voit encore une fois
qu'on pourrait modulariser

209
00:10:09,646 --> 00:10:11,032
encore un petit peu plus

210
00:10:11,032 --> 00:10:13,840
et ce petit bout de code,
ici, ces quelques lignes,

211
00:10:13,840 --> 00:10:16,630
pourrait être un affichage de la couleur

212
00:10:16,632 --> 00:10:19,512
qui pourrait être utile à la fois
dans l'affichage du jeu

213
00:10:19,512 --> 00:10:21,552
et dans l'affichage du joueur comme ici.

214
00:10:22,572 --> 00:10:25,832
Profitons également qu'on est donc
dans cette méthode demandeEtJoue

215
00:10:25,832 --> 00:10:28,732
pour améliorer l'aspect
algorithmique cette fois-ci.

216
00:10:28,732 --> 00:10:32,522
Que se passe-t-il si le joueur a entré
un coup qui n'est pas valide ?

217
00:10:32,522 --> 00:10:36,022
Dans la version précédente, on passait
simplement à l'autre joueur,

218
00:10:36,022 --> 00:10:37,572
ce qui n'est certainement pas correct.

219
00:10:37,572 --> 00:10:41,172
Ici, on va devoir répéter
tant que le coup n'est pas valide.

220
00:10:41,172 --> 00:10:43,312
Donc répéter, c'est-à-dire une boucle.

221
00:10:43,312 --> 00:10:46,492
De nouveau, on se pose la question:
est-ce une boucle <i>while</i> ?

222
00:10:46,492 --> 00:10:48,502
Ou est-ce une boucle <i>do while</i> ?

223
00:10:48,502 --> 00:10:52,272
Donc est-ce qu'on commence par poser
la question, puis vérifier la condition ?

224
00:10:52,272 --> 00:10:57,092
Ou est-ce qu'on commence par vérifier
la condition, puis ensuite on exécute ?

225
00:10:57,092 --> 00:10:59,402
Donc ici, évidemment,
on commence par exécuter,

226
00:10:59,402 --> 00:11:03,712
on commence par demander le coup avant
de vérifier si c'était un coup valide.

227
00:11:03,712 --> 00:11:06,622
Donc c'est une boucle <i>do while</i>,
et donc on va l'écrire.

228
00:11:06,622 --> 00:11:12,352
Ici, <i>do</i>, tout le bloc de
notre méthode ici, et puis <i>while</i>.

229
00:11:12,352 --> 00:11:13,712
<i>While</i> quoi ?

230
00:11:13,712 --> 00:11:17,172
Je vous rappelle que ce qu'on veut faire
c'est que si le coup n'est pas valide,

231
00:11:17,172 --> 00:11:21,892
alors on affiche le message, et on veut
répéter l’entièreté de l'interaction

232
00:11:21,892 --> 00:11:24,362
ici tant que le coup n'est pas valide.

233
00:11:24,362 --> 00:11:27,802
Donc cela va s'écrire, <i>while not valide</i>.

234
00:11:27,802 --> 00:11:31,132
Voilà, on pense avoir terminé,
on sauvegarde, on compile,

235
00:11:31,132 --> 00:11:32,732
et qu'est-ce qu'il se passe ?

236
00:11:32,732 --> 00:11:38,032
Le code ne compile pas parce que
la portée de la variable valide ici,

237
00:11:38,032 --> 00:11:43,212
qui est déclarée dans ce bloc,
est justement tout ce bloc ici.

238
00:11:43,212 --> 00:11:47,732
Et donc la variable valide
ici n'est pas définie.

239
00:11:48,322 --> 00:11:51,452
Donc il faut sortir la variable valide,

240
00:11:51,452 --> 00:11:53,802
la déclaration de la variable
valide de la boucle,

241
00:11:53,802 --> 00:11:55,932
et la mettre avant la boucle
pour pouvoir l'utiliser

242
00:11:55,932 --> 00:11:58,112
dans la condition du <i>while</i>.

243
00:11:58,672 --> 00:12:02,492
Evidemment si l'on fait ceci, il faut
faire attention au fait que maintenant

244
00:12:02,492 --> 00:12:06,230
on a donc deux déclarations de valide,

245
00:12:06,230 --> 00:12:08,398
une ici, et une ici.
Donc il faut bien sûr

246
00:12:08,398 --> 00:12:12,066
corriger celle-ci et la supprimer

247
00:12:12,066 --> 00:12:15,616
et on a donc plus qu'une affectation
dans la boucle.

248
00:12:15,616 --> 00:12:18,096
Voilà, ce qui termine donc
notre méthode demandeEtJoue,

249
00:12:18,096 --> 00:12:22,096
cette fois-ci, elle compile et 
elle devrait s'exécuter correctement.

250
00:12:22,096 --> 00:12:26,296
Terminons cette séquence vidéo par 
un dernier retour à la méthode joue.

251
00:12:26,296 --> 00:12:31,146
En réponse à l'un des quizz posé 
dans une des séquences vidéos précédentes,

252
00:12:31,146 --> 00:12:35,226
et donc regardons ici ce qu'il fallait 
corriger à cette méthode joue.

253
00:12:35,226 --> 00:12:39,756
Le problème ici c'est qu'on accède
à un tableau ligne colonne,

254
00:12:39,756 --> 00:12:44,506
sans avoir vérifier effectivement que
la colonne que l'on reçoit est correcte.

255
00:12:44,506 --> 00:12:48,716
On aurait pu imaginer que ce test puisse
se faire avant d'appeler la méthode joue.

256
00:12:48,716 --> 00:12:51,806
On aurait par exemple pu le faire
lorsque l'on demande au joueur

257
00:12:51,806 --> 00:12:53,276
d'entrer un numéro de colonne.

258
00:12:53,276 --> 00:12:55,986
S'il entre un numéro qui est
trop grand, genre 100,

259
00:12:55,986 --> 00:12:58,246
on lui dit non ce coup
n'est pas valide.

260
00:12:58,246 --> 00:13:01,086
Mais il est préférable
de mettre ce genre de test

261
00:13:01,086 --> 00:13:02,786
au plus près de danger qu'il protège,

262
00:13:02,786 --> 00:13:05,566
et donc ici de le mettre
dans la méthode joue

263
00:13:05,566 --> 00:13:08,826
qui reçoit donc ici comme
paramètre une colonne,

264
00:13:08,826 --> 00:13:12,406
et donc de garantir et de vérifier
que cette colonne est compatible

265
00:13:12,406 --> 00:13:16,036
avec son utilisation ici
comme index de la grille.

266
00:13:16,036 --> 00:13:18,656
Et donc tout simplement,
on va commencer,

267
00:13:18,656 --> 00:13:20,886
par évidemment comme d'habitude,
mettre le commentaire

268
00:13:20,886 --> 00:13:24,236
et dire que si le numéro de colonne est
plus grand que la taille n'est pas valide

269
00:13:24,236 --> 00:13:26,536
alors cela veut dire
que le coup n'est pas valide.

270
00:13:26,536 --> 00:13:28,286
Ce qui s'écrit donc en java :

271
00:13:28,286 --> 00:13:30,516
Si colonne, que l'on a reçu
donc comme paramètre,

272
00:13:30,516 --> 00:13:33,276
est plus grand que
la taille de la grille,

273
00:13:33,276 --> 00:13:37,686
donc par exemple
grille de 0 point length,

274
00:13:37,686 --> 00:13:40,296
alors à ce moment-là,
tout simplement, on <i>return false</i>

275
00:13:40,296 --> 00:13:42,756
puisque le coup
n'est pas valide.

276
00:13:43,926 --> 00:13:46,506
Voilà, ce qui conclut
cette séquence vidéo.

277
00:13:46,506 --> 00:13:47,562
Il ne reste plus,

278
00:13:47,562 --> 00:13:48,768
pour avoir un jeu complet,

279
00:13:48,768 --> 00:13:50,737
qu'à implémenter le test d'arrêt

280
00:13:50,737 --> 00:13:53,006
de la boucle de répétition du jeu.

281
00:13:53,006 --> 00:13:56,086
Ce qui sera l'objet de
la séquence vidéo suivante.
