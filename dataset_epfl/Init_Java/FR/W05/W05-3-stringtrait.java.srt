1
00:00:05,233 --> 00:00:08,118
Dans cette vidéo, nous allons terminer 
sur les chaînes de caractères

2
00:00:08,516 --> 00:00:11,256
en voyant d'autres traitements
possibles sur les chaînes.

3
00:00:11,797 --> 00:00:14,212
On peut accéder aux caractères

4
00:00:14,212 --> 00:00:17,097
d'une chaîne de caractères 
individuellement.

5
00:00:17,097 --> 00:00:23,582
Par exemple, l'instruction, 
<i>chaine.charAt</i>, <i>index</i> en argument,

6
00:00:23,582 --> 00:00:30,338
va envoyer le caractère d'index 
<i>Index</i> de la chaîne <i>chaine</i>.

7
00:00:31,320 --> 00:00:37,798
L'instruction <i>chaine.indexOf</i>
avec un caractère en argument

8
00:00:38,085 --> 00:00:44,815
donne la position de la première 
occurrence du caractère <i>caractère</i>

9
00:00:45,134 --> 00:00:49,530
c'est à dire le caractère passé 
en argument dans <i>chaine</i>

10
00:00:51,530 --> 00:00:56,652
et va renvoyer -1 si <i>caractere</i>
n'est pas dans <i>chaine</i>.

11
00:00:58,230 --> 00:01:00,178
On dispose également 
de la fonction <i>length</i>

12
00:01:00,678 --> 00:01:07,833
c'est à dire qu'on peut écrire
<i>chaine1.Length</i> avec des parenthèses

13
00:01:08,105 --> 00:01:10,317
et ça va renvoyer 
la longueur de la chaîne,

14
00:01:10,585 --> 00:01:12,740
c'est à dire le nombre 
de caractères de la chaîne.

15
00:01:13,065 --> 00:01:14,484
Attention, attention !

16
00:01:15,161 --> 00:01:19,680
Il y a une paire de parenthèses.

17
00:01:20,405 --> 00:01:23,887
C'est donc, dans ce cas, 
différent des tableaux.

18
00:01:24,087 --> 00:01:29,867
Par exemple, je déclare ici 
une variable <i>s1</i>

19
00:01:29,867 --> 00:01:35,647
qui va faire référence 
à une chaîne <i>abcmbx</i>

20
00:01:35,647 --> 00:01:41,428
quand j'exécute cette déclaration
et initialisation de la variable <i>longueur</i>

21
00:01:41,885 --> 00:01:48,790
la variable <i>longueur</i> va contenir 
le nombre de caractère de <i>s1</i>

22
00:01:48,966 --> 00:01:51,235
c'est à dire 6.

23
00:01:51,790 --> 00:02:01,236
Cette déclaration, déclare une variable <i>c1</i>
qui va être initialisée

24
00:02:01,573 --> 00:02:09,222
au caractère d'indice 0 de la chaîne <i>s1</i>
c'est à dire ce <i>a</i>

25
00:02:10,107 --> 00:02:13,092
Donc <i>c1</i> va contenir 
le caractère <i>a</i>

26
00:02:13,369 --> 00:02:20,514
Dans cette déclaration de <i>c2</i>
je vais mettre le caractère de <i>s1</i>

27
00:02:20,514 --> 00:02:24,736
qui se trouve à l'indice longueur -1.

28
00:02:24,736 --> 00:02:28,638
<i>Longueur</i> contient 6, 
donc <i>longueur</i> moins un c'est cinq.

29
00:02:29,601 --> 00:02:38,608
Et le caractère d'indice 5 
c'est 0, 1, 2, 3, 4, 5.

30
00:02:39,123 --> 00:02:42,309
C'est à dire le dernier 
caractère de la chaîne <i>s1</i>.

31
00:02:45,250 --> 00:02:54,111
Et pour finir, cette déclaration 
de la variable <i>i</i> va mettre dans <i>i</i>

32
00:02:55,341 --> 00:03:01,668
l'indice du caractère b en partant 
de la gauche dans la chaîne <i>s1</i>.

33
00:03:01,791 --> 00:03:03,970
Alors <i>s1</i>, c'est cette chaîne-ci.

34
00:03:04,530 --> 00:03:08,140
<i>b</i>, le premier b 
se trouve à l'indice 1.

35
00:03:09,569 --> 00:03:11,927
Et donc <i>i</i> va être 
intialisé à la valeur 1.

36
00:03:12,296 --> 00:03:15,252
Donc faites attention, 
les caractères sont numérotés

37
00:03:15,512 --> 00:03:17,130
comme les éléments d'un tableau

38
00:03:17,302 --> 00:03:19,801
c'est à dire qu'on commence à zéro.

39
00:03:20,351 --> 00:03:23,259
A ce stade, nous pouvons faire un quiz.

40
00:03:24,241 --> 00:03:27,497
A votre avis, 
qu'affiche ce code quand on l'exécute ?

41
00:03:27,932 --> 00:03:31,592
Prenez le temps d'exécuter le code
pas à pas.

42
00:03:32,091 --> 00:03:33,695
Je vous laisse réfléchir.

43
00:03:35,341 --> 00:03:42,341
Alors, la variable <i>essai</i>
est initialisée à la chaîne <i>essai</i>

44
00:03:44,655 --> 00:03:49,165
La variable <i>test</i>
est initialisée à la chaîne vide.

45
00:03:49,723 --> 00:03:56,117
On entre dans cette boucle <i>for</i>, 
où <i>i</i> va varier de 1 à 3.

46
00:03:56,953 --> 00:04:02,609
Au premier tour de boucle, 
on va exécuter cette affectation.

47
00:04:03,198 --> 00:04:09,694
Pour l'instant <i>test</i> est la chaîne vide 
et on va lui concaténer le caractère

48
00:04:10,027 --> 00:04:15,499
qui se trouve dans <i>essai</i> à l'indice 
de la valeur de cette expression.

49
00:04:15,784 --> 00:04:20,546
<i>i</i> vaut 1, donc 
6 moins 2 fois <i>i</i> vaut 4.

50
00:04:21,173 --> 00:04:25,776
On va donc considérer 
le caractère d'indice 4 de <i>essai</i>.

51
00:04:27,080 --> 00:04:33,783
C'est à dire, 0,1, 2, 3, 4, 
donc tout ceci, vaut <i>i</i>.

52
00:04:34,245 --> 00:04:39,056
On va concaténer ce caractère <i>i</i>
avec la chaîne vide et donc obtenir <i>i</i>

53
00:04:39,056 --> 00:04:41,028
et mettre le résultat dans <i>test</i>

54
00:04:41,753 --> 00:04:46,323
<i>test</i> va donc pointer maintenant 
sur la chaîne <i>i</i>

55
00:04:47,162 --> 00:04:55,070
Passons ensuite à cette instruction, 
qui va concaténer le caractère d'indice <i>i</i>

56
00:04:55,377 --> 00:04:56,777
de la chaîne <i>essai</i>,

57
00:04:57,722 --> 00:05:03,275
<i>i</i> vaut 1, 
le caractère est le caractère <i>s</i>

58
00:05:03,582 --> 00:05:08,802
et le concaténer avec 
la chaîne contenue par <i>test</i>

59
00:05:09,083 --> 00:05:12,798
c'est à dire tout simplement <i>i</i>.

60
00:05:13,556 --> 00:05:18,446
Le résultat de la concaténation 
est la chaîne <i>si</i>,

61
00:05:18,716 --> 00:05:21,169
on va mettre <i>si</i> ici.

62
00:05:23,272 --> 00:05:25,959
On revient au début de la boucle for.

63
00:05:26,789 --> 00:05:28,850
<i>i</i> vaut maintenant 2.

64
00:05:29,013 --> 00:05:32,545
On exécute cette affectation.

65
00:05:33,625 --> 00:05:36,927
<i>test</i> vaut maintenant <i>si</i>.

66
00:05:37,146 --> 00:05:42,328
Ce caractère est le caractère 
d'indice 2 dans <i>essai</i>.

67
00:05:42,778 --> 00:05:47,735
Le caractère d'indice 2, 
c'est <i>(zéro, un, deux)</i>

68
00:05:47,977 --> 00:05:49,712
c'est un <i>s</i>,

69
00:05:50,244 --> 00:05:53,444
qu'on va concaténer 
avec la chaîne <i>si</i>

70
00:05:53,943 --> 00:06:00,862
donc on va obtenir <i>sis</i>
qu'on va affecter à la variable <i>test</i>

71
00:06:00,862 --> 00:06:03,397
Donc obtenir ici.

72
00:06:04,227 --> 00:06:07,213
Passons à la seconde affectation.

73
00:06:08,134 --> 00:06:13,949
<i>essai.charAt(i)</i> comme 
<i>i</i> vaut 2, c'est ce <i>s</i> ici

74
00:06:14,348 --> 00:06:18,442
qu'on va concaténer avec 
la chaîne qui correspond à <i>test</i>

75
00:06:18,601 --> 00:06:24,125
c'est à dire <i>sis</i> et 
on va obtenir <i>s - s - i - s</i>

76
00:06:25,283 --> 00:06:27,961
qu'on va mettre dans <i>test</i>.

77
00:06:28,976 --> 00:06:33,948
On va donc revenir maintenant 
une dernière fois ici, avec <i>i</i> qui vaut 3.

78
00:06:34,220 --> 00:06:40,511
<i>Test</i> vaut <i>s - s - i - s</i>
et on va lui concaténer ce caractère-ci

79
00:06:40,511 --> 00:06:45,704
donc le caractère d'indice 0 
dans la chaîne <i>essai</i>

80
00:06:45,788 --> 00:06:48,221
c'est à dire ce <i>e</i>, ici.

81
00:06:50,198 --> 00:06:53,156
On va mettre le résultat 
dans la chaîne <i>test</i>

82
00:06:54,568 --> 00:06:58,966
c'est à dire qu'on va mettre 
<i>ssise</i> dans <i>test</i>

83
00:06:59,945 --> 00:07:01,990
On passe à cette affectation.

84
00:07:02,446 --> 00:07:08,320
essai.charAt(i) vaut 3,

85
00:07:08,885 --> 00:07:11,932
c'est le caractère d'indice 3 
de <i>essai</i>

86
00:07:12,464 --> 00:07:15,804
c'est à dire, 0, 1, 2 , 3

87
00:07:16,016 --> 00:07:17,138
c'est à dire <i>a</i>

88
00:07:17,526 --> 00:07:22,973
qu'on va concaténer avec ce que contient 
<i>test</i> c'est à dire <i>ssise</i>,

89
00:07:25,091 --> 00:07:28,069
et obtenir la chaîne <i>assise</i>.

90
00:07:29,427 --> 00:07:34,766
<i>test</i> va donc pointer 
maintenant chaîne <i>assise</i>.

91
00:07:36,645 --> 00:07:38,697
On sort de la boucle 
puisque <i>i</i> valait 3.

92
00:07:39,250 --> 00:07:43,931
On arrive à cette instruction d'affichage
qui va afficher tout simplement assise.

93
00:07:46,462 --> 00:07:49,708
Un mot sur les entrées / sorties 
avec les caractères.

94
00:07:49,888 --> 00:07:55,552
Il se trouve qu'il n'y a pas de fonction 
<i>nextChar()</i> dans la classe Scanner

95
00:07:55,685 --> 00:07:58,498
et pour récupérer un caractère

96
00:07:58,699 --> 00:08:00,240
en utilisant cette classe,

97
00:08:00,469 --> 00:08:06,438
il faut faire d'abord comme d'habitude
la déclaration d'un scanner.

98
00:08:06,898 --> 00:08:12,208
Ensuite, lire une ligne 
en utilisant la fonction <i>nextline()</i>

99
00:08:12,661 --> 00:08:16,409
appliquée à l'instance 
du type <i>scanner</i>

100
00:08:16,826 --> 00:08:20,238
et mettre le résultat dans une variable
de type chaîne que j'ai appelée <i>s</i>

101
00:08:20,495 --> 00:08:24,941
et prendre le premier caractère 
de cette chaine <i>s</i>

102
00:08:25,223 --> 00:08:30,892
en utilisant la fonction charAt()
en lui passant comme argument l'indice 0.

103
00:08:31,188 --> 00:08:34,815
Donc dans <i>c</i> ici , 
on va obtenir le premier caractère

104
00:08:34,980 --> 00:08:39,616
qu'aura tapé l'utilisateur 
à ce moment-ci.

105
00:08:39,616 --> 00:08:44,729
Un littéral, introduit par l'utilisateur 
suite à une instruction de lecture

106
00:08:44,928 --> 00:08:49,583
avec un scanner par exemple,
n'est pas dans le pool des littéraux.

107
00:08:50,161 --> 00:08:52,825
Pour qu'il y soit, 
il faut l'y mettre explicitement

108
00:08:53,072 --> 00:08:55,270
au moyen de la fonction interne.

109
00:08:56,692 --> 00:09:01,768
Considérons cet exemple où je commence 
par déclarer un <i>scanner</i> s

110
00:09:01,988 --> 00:09:06,393
qui va me permettre de lire 
ce que l'utilisateur tape au clavier.

111
00:09:06,393 --> 00:09:10,945
Je déclare ici une variable <i>response</i>
de type chaine de caractère

112
00:09:11,379 --> 00:09:14,008
et j'ai une boucle <i>do</i><i>while</i>

113
00:09:14,314 --> 00:09:20,776
qui devrait s'arrêter quand l'utilisateur 
rentre <i>Oui</i> comme réponse.

114
00:09:21,068 --> 00:09:24,984
Alors ce <i>oui</i> est 
une chaîne de caractères

115
00:09:24,984 --> 00:09:27,260
qui est dans le pool de littéraux.

116
00:09:28,727 --> 00:09:30,732
Continuons maintenant le code.

117
00:09:31,161 --> 00:09:37,168
Supposons que je lise au clavier
ce qu'a tapé l'utilisateur

118
00:09:37,780 --> 00:09:40,857
et que je mette le résultat 
dans ma variable <i>response</i>.

119
00:09:41,498 --> 00:09:43,514
Je vais obtenir quelque chose comme ça.

120
00:09:43,968 --> 00:09:45,932
Supposons qu'il ait déjà tapé <i>Oui</i>.

121
00:09:46,261 --> 00:09:48,234
parce qu'il a envie 
de sortir de la boucle.

122
00:09:48,544 --> 00:09:51,134
Mais, si vous avez suivi 
ce que je viens de dire,

123
00:09:51,394 --> 00:09:54,550
ce <i>oui</i> n'est pas 
dans le pool des littéraux,

124
00:09:54,746 --> 00:09:58,803
c'est à dire que ce <i>oui</i>
est différent de ce <i>oui</i> ci.

125
00:09:59,269 --> 00:10:04,451
Cet affichage va bien m'afficher 
<i>Oui</i> pour <i>response</i>.

126
00:10:04,630 --> 00:10:08,598
Par contre ce test 
ne va pas faire ce que je veux,

127
00:10:08,850 --> 00:10:12,526
puisque je teste ici les références.

128
00:10:12,526 --> 00:10:16,625
<i>Response</i> contient 
une référence vers ce <i>oui</i>

129
00:10:17,761 --> 00:10:22,694
et ce <i>oui</i> ici n'est pas 
stocké à la même référence

130
00:10:22,694 --> 00:10:25,044
puisqu'il est 
dans le pool des littéraux.

131
00:10:25,116 --> 00:10:29,365
Donc dans ce test, 
cette condition va être fausse,

132
00:10:29,605 --> 00:10:31,895
même si response contient bien oui.

133
00:10:33,114 --> 00:10:36,689
Je vais rajouter 
l'appel à la fonction <i>Intern</i>,

134
00:10:36,689 --> 00:10:38,954
que j'avais caché ici.

135
00:10:40,564 --> 00:10:42,979
Que se passe-t-il dans ce cas là ?

136
00:10:43,416 --> 00:10:47,731
Quand on exécute 
cette nouvelle instruction,

137
00:10:49,204 --> 00:10:53,111
le <i>oui</i> qui est contenu par response

138
00:10:53,668 --> 00:10:56,477
va être mis dans le pool des littéraux.

139
00:10:56,794 --> 00:10:59,361
Il se trouve qu'il y a déjà 
un oui dans le pool des littéraux

140
00:10:59,634 --> 00:11:02,248
Ce qu'il va se passer, 
c'est que maintenant <i>response</i>.

141
00:11:02,514 --> 00:11:05,633
va contenir une référence
vers ce <i>oui</i> là.

142
00:11:06,006 --> 00:11:08,235
Et ce lien est perdu.

143
00:11:08,684 --> 00:11:13,608
Cette instruction d'affichage 
va afficher comme avant un <i>oui</i>.

144
00:11:14,132 --> 00:11:16,470
C'est ce <i>oui</i> ci qui va être affiché.

145
00:11:16,642 --> 00:11:18,726
Et maintenant, quand on fait ce test là.

146
00:11:18,985 --> 00:11:21,600
On va tester toujours les références.

147
00:11:22,322 --> 00:11:26,085
C'est à dire la référence 
contenu dans <i>response</i>

148
00:11:26,176 --> 00:11:27,792
avec la référence de ce oui.

149
00:11:27,978 --> 00:11:29,442
qui est dans le pool des littéraux.

150
00:11:29,654 --> 00:11:34,058
Mais comme cette référence 
va vers le oui du pool des littéraux,

151
00:11:34,431 --> 00:11:39,729
c'est la même référence et ce test
sera donc vrai cette fois-ci.

152
00:11:40,045 --> 00:11:43,572
Tout ceci grâce 
à la fonction <i>Intern</i>.

153
00:11:45,309 --> 00:11:50,640
Nous avons vu qu'il existe certains 
traitements spécifiques aux <i>String.</i>

154
00:11:50,850 --> 00:11:54,257
comme par exemple la fonction <i>equals</i>
ou la fonction <i>length</i>.

155
00:11:54,619 --> 00:12:00,469
Tous ces traitements 
suivent la même syntaxe,

156
00:12:00,543 --> 00:12:05,501
c'est à dire qu'on commence par le nom 
d'une variable de type <i>string</i>

157
00:12:05,924 --> 00:12:12,836
Ensuite le nom du traitement, avec 
entre les deux, le caractère <i>point</i>

158
00:12:13,228 --> 00:12:19,166
et suivi des arguments 
dont a besoin le traitement.

159
00:12:19,506 --> 00:12:23,101
Ces traitements s'appellent 
des méthodes en Java.

160
00:12:23,462 --> 00:12:27,813
Elles produisent toujours 
une nouvelle chaîne de caractères

161
00:12:27,976 --> 00:12:32,196
Les chaînes de caractères impliquées 
dans cette utilisation

162
00:12:32,505 --> 00:12:34,420
ne sont pas modifiées.

163
00:12:35,775 --> 00:12:40,786
Par exemple, on dispose du traitement 
<i>replace</i> qui peut s'appliquer

164
00:12:41,030 --> 00:12:42,835
sur une variable de type <i>string</i>

165
00:12:42,935 --> 00:12:44,748
comme par exemple <i>chaine</i> ici

166
00:12:45,006 --> 00:12:49,185
et qui attend deux caractères
pour pouvoir fonctionner.

167
00:12:49,552 --> 00:12:53,155
Ce traitement <i>replace</i> va remplacer

168
00:12:53,325 --> 00:12:58,283
le caractère <i>char1</i> de <i>chaine</i>
par le caractère <i>char2</i>.

169
00:12:58,651 --> 00:13:04,617
Par exemple, si j'ai une chaîne <i>exemple</i>
initialisée à <i>abracadabra</i>

170
00:13:04,942 --> 00:13:09,320
et que j'appelle 
ce traitement <i>replace</i>

171
00:13:09,380 --> 00:13:13,417
en lui passant le caractère <i>a</i>
pour première valeur,

172
00:13:13,680 --> 00:13:17,617
le caractère "étoile" en deuxième

173
00:13:19,453 --> 00:13:23,852
Ce traitement va me créer 
une nouvelle chaîne

174
00:13:23,852 --> 00:13:29,200
où il aura remplacé 
les <i>a</i> de abracadabra par une étoile.

175
00:13:29,623 --> 00:13:33,209
Et c'est exactemeent 
ce que j'obtiens ici.

176
00:13:34,358 --> 00:13:42,217
Notez bien que la chaîne <i>exemple</i> contient 
toujours la chaîne originale <i>abracadabra</i>.

177
00:13:43,642 --> 00:13:46,775
Un autre traitement 
s'appelle <i>substring</i>.

178
00:13:47,278 --> 00:13:51,693
Il s'applique aussi sur une variable 
de type string comme la variable chaine

179
00:13:52,118 --> 00:13:55,539
et attend pour fonctionner deux positions.

180
00:13:55,738 --> 00:13:57,588
La position de deux caractères.

181
00:13:57,934 --> 00:14:00,700
Ce traitement permet d'extraire 
une sous-chaîne

182
00:14:01,080 --> 00:14:03,780
de la variable placée ici.

183
00:14:04,194 --> 00:14:06,572
Alors par exemple,

184
00:14:06,778 --> 00:14:12,743
je déclare ici une variable <i>exemple</i>
initialisée à la chaîne <i>anticonstitutionnel</i>

185
00:14:13,151 --> 00:14:20,674
et dans cette affectation, 
j'exécute ce traitement <i>substring</i>

186
00:14:20,812 --> 00:14:26,867
sur cette chaîne 
en lui passant les valeurs 4 et 16.

187
00:14:27,197 --> 00:14:30,275
Ça veut dire que je vais 
extraire la chaîne de caractères

188
00:14:30,651 --> 00:14:35,019
qui commence au caractère d'indice 4

189
00:14:35,603 --> 00:14:38,726
<i>a</i> est le caractère d'indice 0.

190
00:14:38,999 --> 00:14:43,791
1, 2, 3, 4 c'est donc ce <i>c</i> ici.

191
00:14:44,210 --> 00:14:55,024
Le caractères d'indice 16
c'est ce <i>n</i> ci.

192
00:14:55,535 --> 00:14:59,087
Mais le dernier caractère 
n'est pas compris.

193
00:14:59,312 --> 00:15:01,771
C'est à dire que je vais m'arrêter ici.

194
00:15:02,129 --> 00:15:11,932
Et ce traitement va me fournir la chaîne 
qui est ici, c'est à dire <i>constitution</i>,

195
00:15:12,745 --> 00:15:18,465
qui va servir à initialiser 
la variable <i>racineMot</i>

196
00:15:20,041 --> 00:15:23,795
Voilà c'est tout ce que nous allons voir
sur le type <i>String</i>.
