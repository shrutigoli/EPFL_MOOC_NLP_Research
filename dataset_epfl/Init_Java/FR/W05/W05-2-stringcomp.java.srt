1
00:00:05,497 --> 00:00:07,516
Dans cette vidéo, nous allons nous concentrer

2
00:00:07,516 --> 00:00:09,825
sur la comparaison de chaînes de caractères.

3
00:00:10,325 --> 00:00:14,376
Attention, les opérateurs "= =" pour l'égalité

4
00:00:14,376 --> 00:00:17,046
et "! =" pour la non-égalité,

5
00:00:17,047 --> 00:00:20,567
quand ils sont appliqués sur 
deux variables de type string,

6
00:00:20,567 --> 00:00:26,147
ils testent si ces variables font référence 
(ou non) à la même zone mémoire,

7
00:00:26,147 --> 00:00:28,511
qui contiendrait une chaîne de caractères.

8
00:00:28,775 --> 00:00:32,639
Etant donné, en plus, 
l'utilisation du pool des littéraux,

9
00:00:32,726 --> 00:00:36,692
ceci entraîne un certain 
nombre de subtilités,

10
00:00:36,961 --> 00:00:38,828
que nous allons voir
sur cet exemple.

11
00:00:39,428 --> 00:00:46,088
J'ai ici la déclaration 
et l'initialisation d'une variable "s1"

12
00:00:46,088 --> 00:00:51,132
qui va faire référence 
à une chaîne "a b c".

13
00:00:52,168 --> 00:00:58,716
Ici, "s2" est initialisé
à la chaîne "abc" également.

14
00:00:58,716 --> 00:01:04,233
Cette chaîne "abc" 
appartient au pool des littéraux.

15
00:01:04,233 --> 00:01:06,743
C'est pour cela que "s1" et "s2"

16
00:01:06,743 --> 00:01:09,753
ont la même référence
sur la même chaîne.

17
00:01:11,271 --> 00:01:16,091
Ici, je déclare une variable "s3"

18
00:01:16,875 --> 00:01:20,452
dans lequel je copie 
le contenu de "s2".

19
00:01:20,452 --> 00:01:25,279
"s2" contient une référence 
vers cette chaîne "abc"

20
00:01:25,289 --> 00:01:28,785
et donc, "s3" va maintenant aussi contenir

21
00:01:28,785 --> 00:01:32,243
une référence sur cette même chaîne "abc".

22
00:01:32,623 --> 00:01:37,533
Je fais maintenant
cette dernière affectation.

23
00:01:38,125 --> 00:01:41,625
A "s4", je vais lui affecter

24
00:01:41,625 --> 00:01:45,355
la concaténation de la variable "s1"

25
00:01:45,397 --> 00:01:49,037
qui est, "abc".

26
00:01:49,037 --> 00:01:53,557
Et la chaîne vide, que je vais représenter ainsi.

27
00:01:54,157 --> 00:01:57,917
Et j'obtiens donc,
tout simplement, la chaîne "abc".

28
00:01:58,524 --> 00:02:03,804
Et "s4" va recevoir une référence
vers cette chaîne "abc".

29
00:02:04,059 --> 00:02:09,719
Mais attention, cet "abc"-ci
n'est pas le même que celui-ci.

30
00:02:10,100 --> 00:02:14,100
Plus exactement, elles ne sont pas 
au même endroit dans la mémoire

31
00:02:14,122 --> 00:02:19,322
et cette référence 
et ces références sont différentes.

32
00:02:20,192 --> 00:02:21,842
Alors, pourquoi exactement?

33
00:02:21,842 --> 00:02:23,922
C'est parce que "s1", "s2" et "s3"

34
00:02:23,922 --> 00:02:27,388
ont été initialisés directement à partir de littéraux,

35
00:02:27,388 --> 00:02:29,508
alors que ce n'est pas le cas pour "s4";

36
00:02:29,508 --> 00:02:33,508
et ce qu'on peut vérifier 
en exécutant ces instructions-ci.

37
00:02:33,508 --> 00:02:37,758
Ce "println" affiche 
le résultat de cette condition.

38
00:02:37,758 --> 00:02:41,868
Cette condition est vraie quand
"s1" est égal à "s2",

39
00:02:41,868 --> 00:02:44,418
c'est-à-dire quand la référence contenue par "s1"

40
00:02:44,418 --> 00:02:47,938
et la référence contenue par "s2"sont les mêmes.

41
00:02:48,093 --> 00:02:50,543
Et sur le schéma 
on constate que c'est bien le cas.

42
00:02:50,543 --> 00:02:51,973
Donc cette condition est vraie.

43
00:02:52,214 --> 00:02:56,294
"s2" est égal, effectivement, à "s3"

44
00:02:56,340 --> 00:02:59,753
puisque "s2" et "s3" contiennent toutes les deux

45
00:02:59,753 --> 00:03:02,773
une référence vers cette même chaîne "abc".

46
00:03:02,773 --> 00:03:04,243
Cette condition est vraie.

47
00:03:04,243 --> 00:03:08,243
Et comme ici c'est un "&", 
toute cette condition est vraie.

48
00:03:08,723 --> 00:03:13,423
On va donc afficher "true", 
puisqu'on peut le vérifier en pratique.

49
00:03:14,856 --> 00:03:17,806
Quand j'exécute cette instruction-ci,

50
00:03:17,806 --> 00:03:20,476
qui affiche la chaîne "s4";

51
00:03:20,631 --> 00:03:24,291
alors je vous rappelle, 
quand on exécute la fonction

52
00:03:24,291 --> 00:03:27,521
"print" ou "println" 
sur une variable de type string,

53
00:03:27,521 --> 00:03:32,881
on n'affiche pas la référence, 
mais bien la chaîne qui est référencée.

54
00:03:32,969 --> 00:03:34,919
Ce qui est pratique.

55
00:03:35,283 --> 00:03:39,973
Et on va obtenir, ici, l'affichage de "abc"

56
00:03:40,013 --> 00:03:42,613
qui est, cette chaîne-ci.

57
00:03:42,745 --> 00:03:48,165
Maintenant, si j'affiche 
la valeur de cette condition,

58
00:03:48,165 --> 00:03:51,164
qui est "s1" = "s4"

59
00:03:51,164 --> 00:03:55,956
"s1" contient cette référence, 
"s4" contient cette référence,

60
00:03:55,956 --> 00:03:58,116
qui sont des références différentes,

61
00:03:58,116 --> 00:04:00,806
et donc la condition est fausse.

62
00:04:01,190 --> 00:04:04,150
Et ce "println" va m'afficher "false",

63
00:04:04,150 --> 00:04:09,270
même si les deux chaînes qui 
correspondent à "s1" et "s4"

64
00:04:09,270 --> 00:04:12,660
sont les mêmes, 
sont toutes les deux "abc".

65
00:04:12,853 --> 00:04:16,873
Donc c'est bien les références 
qui sont comparées ici.

66
00:04:17,272 --> 00:04:21,365
Mais en pratique on a plus envie 
de comparer les chaînes elles-mêmes

67
00:04:21,365 --> 00:04:23,325
plutôt que leurs références.

68
00:04:23,325 --> 00:04:26,635
Et pour cela, il y a un traitement spécifique

69
00:04:26,635 --> 00:04:28,545
pour comparer les Strings.

70
00:04:28,906 --> 00:04:32,746
Pour comparer, effectivement, 
deux chaînes de caractères,

71
00:04:32,746 --> 00:04:35,236
on dispose de la fonction "equals".

72
00:04:35,310 --> 00:04:38,560
Par exemple, pour comparer deux variables

73
00:04:38,560 --> 00:04:40,510
"chaîne 1" et "chaîne 2",

74
00:04:40,510 --> 00:04:43,130
je peux appeler ma fonction 
"equals" de cette façon-ci.

75
00:04:43,207 --> 00:04:46,997
Donc tout d'abord, 
le nom de la première variable,

76
00:04:46,997 --> 00:04:51,207
suivi d'un point, suivi 
du nom de la fonction "equals",

77
00:04:51,207 --> 00:04:58,867
et suivi, en argument à la fonction "equals",
de la deuxième variable qu'on veut comparer.

78
00:04:58,957 --> 00:05:02,044
Cette fonction "equals" va renvoyer

79
00:05:02,044 --> 00:05:07,538
soit "true", si "chaîne 1" et "chaîne 2"
correspondent à la même chaîne de caractère,

80
00:05:07,538 --> 00:05:09,758
et n'ont pas forcément la même référence,

81
00:05:09,758 --> 00:05:13,018
et "false", si les deux chaînes sont différentes.

82
00:05:13,577 --> 00:05:19,647
Par exemple, j'ai ici, 
déclaré, une variable "s1"

83
00:05:19,709 --> 00:05:24,909
qui contient une référence vers une chaîne "abc",

84
00:05:25,234 --> 00:05:33,754
une variable "s2" qui contient
une référence vers une chaîne "abc",

85
00:05:34,225 --> 00:05:37,385
mais avec "b" en lettre capitale,

86
00:05:37,385 --> 00:05:41,165
et ici, une variable "s4",

87
00:05:41,713 --> 00:05:47,899
qui est initialisée au résultat de 
la concaténation de "s1" et de la chaîne vide.

88
00:05:48,089 --> 00:05:51,399
"s1" correspond à la chaîne "abc".

89
00:05:51,399 --> 00:05:56,939
Quand je concatène "abc" avec la chaîne vide,
j'obtiens la chaîne, tout simplement, "abc".

90
00:05:58,026 --> 00:06:04,236
Et "s4" va donc contenir 
une référence vers cette chaîne "abc".

91
00:06:04,655 --> 00:06:07,755
On avait vu dans un transparent précédent que

92
00:06:07,755 --> 00:06:12,305
les références contenues 
par "s1" et "s4" étaient différentes,

93
00:06:12,477 --> 00:06:18,727
donc je ne peux pas comparer "s1" et "s4" 
directement en utilisant le symbole "= =".

94
00:06:18,727 --> 00:06:22,275
Par contre, je peux utiliser la fonction "equals".

95
00:06:22,622 --> 00:06:28,983
C'est ce que je fais ici, je vais comparer 
"s1" et "s4" en appelant la fonction "equals"

96
00:06:28,983 --> 00:06:32,133
et je peux vérifier que 
cette fois-ci, j'obtiens bien "true"

97
00:06:32,133 --> 00:06:37,083
Parce que les chaînes sont exactement 
les mêmes, les caractères "abc" sont les mêmes.

98
00:06:37,083 --> 00:06:43,343
Si maintenant, je teste si "s1"est égal à "s2",

99
00:06:43,343 --> 00:06:46,129
et bien il se trouve que la fonction "equals"

100
00:06:46,129 --> 00:06:50,230
fait la différence entre 
lettres minuscules et majuscules,

101
00:06:50,604 --> 00:06:54,584
et comme le "b" ici est un b minuscule,

102
00:06:54,584 --> 00:06:56,721
et le "b" ici est un b majuscule,

103
00:06:56,721 --> 00:06:59,101
la fonction va renvoyer "false".

104
00:07:00,426 --> 00:07:02,986
C'était donc la comparaison 
de chaînes de caractères.

105
00:07:02,986 --> 00:07:07,436
Dans la dernière vidéo, nous verrons 
d'autres traitements portant sur les chaînes.
