1
00:00:05,840 --> 00:00:06,481
Bonjour.

2
00:00:06,544 --> 00:00:09,671
Dans cette leçon nous allons voir
un nouveau type qui est le type "String"

3
00:00:09,921 --> 00:00:12,772
et qui permet de définir 
des variables correspondant

4
00:00:12,992 --> 00:00:14,926
à des chaînes de caractères.

5
00:00:15,091 --> 00:00:18,172
Alors, déclarer une telle variable,
ça se fait comme d'habitude,

6
00:00:18,399 --> 00:00:22,158
c'est-à-dire que je vais commencer par
le nom du type, c'est-à-dire "String"

7
00:00:22,562 --> 00:00:27,083
suivi du nom de la variable qu'on va
déclarer avec un point virgule.

8
00:00:27,835 --> 00:00:30,811
Si par exemple je fais 
cette déclaration-ci,

9
00:00:31,143 --> 00:00:36,912
je déclare une variable de type "String" 
qui s'appelle "Un nom"

10
00:00:36,966 --> 00:00:39,690
et qui pour l'instant n'est pas initialisée.

11
00:00:39,894 --> 00:00:43,574
Dans cette déclaration 
et initialisation-ci,

12
00:00:44,845 --> 00:00:48,705
je déclare une deuxième variable
de type String également

13
00:00:48,962 --> 00:00:53,864
qui s'appelle "Message" et que je peux
représenter ainsi...

14
00:00:57,789 --> 00:01:01,659
Alors attention, les guillemets 
ou les doubles quotes ici

15
00:01:02,368 --> 00:01:06,059
ne font pas partie de la chaîne
de caractères,

16
00:01:06,180 --> 00:01:10,105
elles permettent juste de définir
le début et la fin de la chaîne.

17
00:01:10,673 --> 00:01:15,970
Et donc ma variable Message 
contient une référence vers la mémoire

18
00:01:16,091 --> 00:01:20,007
où est stockée ma chaîne de caractères 
"Bonjour tout le monde".

19
00:01:21,088 --> 00:01:24,724
Les caractères qui constituent donc
les chaînes de caractères

20
00:01:25,006 --> 00:01:29,850
ont leur propre type, qui est le type
"char", ça veut dire que je peux déclarer

21
00:01:30,095 --> 00:01:35,106
des variables de type "char" qui vont
contenir chacune un seul caractère.

22
00:01:35,326 --> 00:01:41,774
Par exemple ici, je déclare 
une variable c1 de type "char"

23
00:01:41,867 --> 00:01:44,717
et qui va contenir le caractère "m".

24
00:01:45,020 --> 00:01:50,794
Alors, notez bien que pour délimiter
le caractère, on utilise cette fois-ci

25
00:01:51,152 --> 00:01:55,409
ce qu'on appelle des guillemets simples
ou aussi des apostrophes

26
00:01:55,838 --> 00:02:01,243
ou des simples quotes, alors que pour
délimiter une chaîne de caractères,

27
00:02:01,465 --> 00:02:06,202
comme par exemple la chaîne "mémoire",
on utilise des guillemets

28
00:02:06,507 --> 00:02:10,469
ou ce qu'on appelle aussi
des "doubles quotes".

29
00:02:11,103 --> 00:02:15,331
Un bon moyen mnémotechnique pour 
retenir la différence, c'est que

30
00:02:15,548 --> 00:02:19,828
pour un seul caractère, on utilise 
des simples quotes,

31
00:02:19,981 --> 00:02:24,474
pour une chaîne de caractères qui contient
en général plusieurs caractères,

32
00:02:24,666 --> 00:02:26,869
on utilise des doubles quotes.

33
00:02:27,612 --> 00:02:30,899
Comme pour les tableaux, 
une variable de type String

34
00:02:30,956 --> 00:02:33,985
contient une référence vers 
une chaîne de caractères.

35
00:02:34,463 --> 00:02:41,238
La sémantique des opérateurs = et == 
est donc la même que pour les tableaux.

36
00:02:41,690 --> 00:02:48,183
Par exemple, je déclare ici une variable
"chaîne" qui contient une référence

37
00:02:48,476 --> 00:02:51,795
vers la chaîne vide;

38
00:02:52,302 --> 00:02:59,127
ici je déclare une variable "chaine2"
qui contient une référence

39
00:02:59,792 --> 00:03:02,268
vers la chaîne "foo".

40
00:03:03,186 --> 00:03:09,670
Quand je fais cette opération, 
cette instruction, j'affecte la valeur

41
00:03:10,058 --> 00:03:15,594
de chaine2 à la variable chaine,
chaine2 contient une référence vers "foo",

42
00:03:15,702 --> 00:03:19,538
donc je vais copier cette référence
dans ma variable chaîne,

43
00:03:19,654 --> 00:03:23,768
la référence qui faisait référence 
à la chaîne vide est perdue,

44
00:03:23,999 --> 00:03:26,119
puisqu'elle est écrasée par cette
nouvelle référence,

45
00:03:26,319 --> 00:03:28,594
et "chaîne" pointe donc 
également sur "foo".

46
00:03:29,265 --> 00:03:34,724
Si maintenant je fais 
"if (chaine == chaine2)",

47
00:03:35,002 --> 00:03:39,337
eh bien cette condition est vraie, 
puisque "chaine" et "chaine2" contiennent

48
00:03:39,450 --> 00:03:43,214
donc la même référence, 
toutes les deux vers "foo".

49
00:03:44,321 --> 00:03:49,461
Les littéraux de type String occupent 
une zone mémoire unique qui s'appelle

50
00:03:49,627 --> 00:03:51,423
le "Pool" des littéraux.

51
00:03:52,056 --> 00:03:56,454
Par exemple, quand je fais 
cette déclaration et initialisation,

52
00:03:57,690 --> 00:04:04,571
je déclare chaine1 qui va contenir
une référence vers "foo".

53
00:04:05,154 --> 00:04:11,963
En fait, cette chaîne "foo" va être mise
dans le pool des littéraux

54
00:04:12,390 --> 00:04:17,983
et quand je fais cette seconde 
déclaration et initialisation,

55
00:04:18,655 --> 00:04:23,434
chaine2 va être également initialisé
à la chaîne "foo" et c'est

56
00:04:23,810 --> 00:04:29,701
cette même référence, c'est cette même
chaîne "foo" qui va être réutilisée.

57
00:04:30,661 --> 00:04:35,834
Et donc chaine1 et chaine2 vont contenir
la même référence, ça veut dire

58
00:04:36,181 --> 00:04:42,000
que quand j'utilise cette condition
chaine1 == chaine2, cette condition

59
00:04:42,372 --> 00:04:43,264
est vraie.

60
00:04:45,010 --> 00:04:47,918
Passons maintenant à l'affichage 
d'une variable de type String.

61
00:04:48,390 --> 00:04:53,199
Je déclare et j'initialise ici 
une variable appelée "chaine"

62
00:04:53,871 --> 00:04:58,475
avec la chaîne de caractères "Welcome";
"chaine" contient donc

63
00:04:59,059 --> 00:05:01,108
une référence vers "Welcome".

64
00:05:01,899 --> 00:05:05,975
Quand maintenant j'appelle la fonction
"print" en lui passant "chaine",

65
00:05:06,521 --> 00:05:12,997
je serais en droit de m'attendre à ce que
"print" affiche ce que contient "chaine",

66
00:05:13,389 --> 00:05:17,081
c'est-à-dire la référence à la mémoire 
où est stockée effectivement

67
00:05:17,428 --> 00:05:18,964
la chaîne "Welcome".

68
00:05:19,026 --> 00:05:24,402
Eh bien, ce n'est pas le cas et "print"
affiche effectivement la chaîne "Welcome".

69
00:05:25,402 --> 00:05:28,844
A ce stade de votre apprentissage, 
on peut considérer ceci comme

70
00:05:29,049 --> 00:05:32,229
une exception pour les strings 
par rapport au type et au lieu,

71
00:05:32,614 --> 00:05:35,651
mais c'est une exception bien pratique,
puisque quand on fait

72
00:05:35,705 --> 00:05:39,052
un print d'une chaîne, on a plutôt envie
d'avoir l'affichage

73
00:05:39,119 --> 00:05:42,587
de la chaîne de caractères plutôt 
qu'une référence sur cette chaîne.

74
00:05:43,764 --> 00:05:46,323
On peut concaténer des chaînes 
de caractères,

75
00:05:46,396 --> 00:05:50,577
c'est-à-dire mettre bout à bout 
ces chaînes en utilisant le caractère "+";

76
00:05:50,812 --> 00:05:54,812
dans cet exemple la chaîne1 et chaine2
sont des variables de type

77
00:05:54,925 --> 00:05:58,363
"chaînes de caractères",
et chaine1 + chaine2

78
00:05:58,999 --> 00:06:03,882
est une nouvelle chaîne de caractères
constituée au début de chaine1

79
00:06:04,378 --> 00:06:07,066
et à la fin des caractères de chaine2.

80
00:06:07,760 --> 00:06:11,546
Par exemple, je déclare ici une variable
qui s'appelle "nom"

81
00:06:11,901 --> 00:06:13,863
de type "chaîne de caractères",

82
00:06:14,591 --> 00:06:17,121
ici une variable "prénom".

83
00:06:17,486 --> 00:06:24,875
Supposons qu'ici j'ai mis une valeur
pour "nom", par exemple "Dupont",

84
00:06:25,281 --> 00:06:28,442
et pour "prénom", 
une autre valeur, "Jean".

85
00:06:28,731 --> 00:06:31,746
Dans cette affectation ici,
je commence par faire

86
00:06:32,014 --> 00:06:36,125
cette première concaténation,
c'est-à-dire que je mets ensemble

87
00:06:36,451 --> 00:06:41,984
"Dupont", et cette chaîne de caractères,
qui est constituée d'un seul espace,

88
00:06:42,453 --> 00:06:46,466
c'est-à-dire que j'obtiens pour l'instant
une chaîne de caractères qui est

89
00:06:46,547 --> 00:06:51,490
"Dupont" suivi du caractère espace,
et à cette chaîne, je vais concaténer

90
00:06:51,564 --> 00:06:58,914
encore une fois, en lui ajoutant la valeur
de "prénom", c'est-à-dire "Jean".

91
00:06:59,694 --> 00:07:04,266
Et tout ceci me constitue une nouvelle
chaîne de caractères,

92
00:07:04,778 --> 00:07:09,928
et comme je vais affecter le résultat
à ma variable "nom", "nom" va contenir

93
00:07:10,428 --> 00:07:13,713
une référence vers 
cette chaîne de caractères,

94
00:07:13,713 --> 00:07:15,719
et cette référence sera perdue.

95
00:07:15,957 --> 00:07:20,393
Alors, attention, la concaténation
ne modifie jamais

96
00:07:20,816 --> 00:07:22,182
les chaînes concaténées.

97
00:07:22,640 --> 00:07:27,204
Elle effectue une copie de ces chaînes
dans une autre zone en mémoire.

98
00:07:27,581 --> 00:07:30,128
C'est ce qu'on voit sur le schéma : 
"Dupont" n'a pas été modifié.

99
00:07:31,294 --> 00:07:35,658
Les combinaisons suivantes sont possibles
pour la concaténation de deux chaînes.

100
00:07:36,081 --> 00:07:39,922
Je peux concaténer tout simplement
deux variables de type String,

101
00:07:40,260 --> 00:07:43,281
mais je peux aussi commencer 
par une variable de type String

102
00:07:43,636 --> 00:07:47,237
et la faire suivre par une variable
d'un des types de base,

103
00:07:47,519 --> 00:07:53,862
c'est-à-dire "int", "double", "char", etc,
ou faire l'inverse, c'est-à-dire commencer

104
00:07:53,994 --> 00:07:58,448
par une variable d'un des types de base
"int", "double", "char", etc,

105
00:07:58,681 --> 00:08:01,353
et la faire suivre par une variable
de type String.

106
00:08:02,598 --> 00:08:05,818
Si je reprends l'exemple précédent,
j'avais utilisé une chaîne de caractères

107
00:08:06,123 --> 00:08:10,028
pour insérer un espace entre le nom
et le prénom, on pouvait reconnaître

108
00:08:10,243 --> 00:08:13,817
que c'était une chaîne de caractères
parce que j'avais utilisé des guillemets

109
00:08:14,022 --> 00:08:16,255
qui sont appelés aussi 
des "doubles quotes",

110
00:08:16,563 --> 00:08:19,428
mais je peux utiliser aussi 
un simple caractère,

111
00:08:19,438 --> 00:08:23,289
c'est ce que nous voyons 
sur cette combinaison.

112
00:08:23,957 --> 00:08:26,505
Alors je vais utiliser, dans cet exemple,

113
00:08:26,505 --> 00:08:28,303
cette fois-ci un caractère

114
00:08:28,303 --> 00:08:31,601
qui est reconnaissable au fait
que j'utilise des apostrophes

115
00:08:31,707 --> 00:08:33,183
ou des simples quotes,

116
00:08:33,183 --> 00:08:35,289
et cette affectation va faire

117
00:08:35,289 --> 00:08:38,297
exactement la même chose
que l'affectation précédente.

118
00:08:39,664 --> 00:08:42,440
Une concaténation 
de la forme "String + char"

119
00:08:42,440 --> 00:08:47,465
est un moyen très pratique 
pour ajouter un caractère à la fin d'une chaîne,

120
00:08:47,810 --> 00:08:51,296
et de la même façon 
la concaténation "char + string"

121
00:08:51,540 --> 00:08:54,622
permet d'ajouter un caractère 
au début d'une chaîne.

122
00:08:55,320 --> 00:09:00,348
Prenons cet exemple, qui déclare
une variable "réponse"

123
00:09:01,150 --> 00:09:04,503
qui va contenir une référence
vers la chaîne "solution"

124
00:09:05,256 --> 00:09:09,804
et supposons que 
je veux mettre "solution" au pluriel

125
00:09:09,804 --> 00:09:13,157
si une variable "n" est supérieure à 1.

126
00:09:13,863 --> 00:09:17,588
Je vais faire le test et je vais
faire ici une concaténation.

127
00:09:18,065 --> 00:09:23,809
"réponse" vaut "solution", et avec
la concaténation je vais lui ajouter "s",

128
00:09:23,965 --> 00:09:27,149
et je vais mettre le résultat 
dans ma variable "réponse".

129
00:09:27,745 --> 00:09:32,532
Et c'est-à-dire que maintenant 
"réponse" va contenir une référence

130
00:09:32,532 --> 00:09:37,244
vers le résultat de la concaténation, 
et ce lien va donc être perdu.

131
00:09:38,376 --> 00:09:41,309
Voilà, c'est la fin de cette 
première vidéo sur les strings.

132
00:09:41,426 --> 00:09:44,382
Dans la vidéo suivante, nous
nous concentrerons essentiellement

133
00:09:44,539 --> 00:09:47,078
sur la comparaison de 
chaînes de caractères.
