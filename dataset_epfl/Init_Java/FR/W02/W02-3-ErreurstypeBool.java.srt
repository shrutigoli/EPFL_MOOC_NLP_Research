1
00:00:00,000 --> 00:00:06,873
Voyons maintenant plusieurs erreurs
commises fréquemment par

2
00:00:06,873 --> 00:00:11,559
des programmeurs débutants quand il s'agit
d'écrire des branchements conditionnels.

3
00:00:11,559 --> 00:00:16,444
Le premier piège qui vous guette est que
le test d'égalité s'écrit avec deux

4
00:00:16,444 --> 00:00:23,210
symboles égal comme ici et non pas un seul
symbole égal qui est pour l'affectation.

5
00:00:23,210 --> 00:00:26,920
Ce code-ci

6
00:00:26,920 --> 00:00:30,105
est donc incorrect puisqu'il n'y a qu'un
seul

7
00:00:30,105 --> 00:00:34,925
symbole égal, la version correcte est
évidemment: if (a

8
00:00:34,925 --> 00:00:37,528
= = 1), et ce code-ci qui est incorrect

9
00:00:37,528 --> 00:00:41,540
n'est tout simplement pas accepté par le
compilateur Java.

10
00:00:41,540 --> 00:00:45,460
Voici un deuxième exemple d'erreur,
peut-être voyez-vous le problème?

11
00:00:45,460 --> 00:00:48,232
En fait il ne devrait pas y avoir de

12
00:00:48,232 --> 00:00:52,036
point-virgule ici et si on exécute ce
code, il sera

13
00:00:52,036 --> 00:00:55,820
accepté par le compilateur et le message
"a vaut 1" sera

14
00:00:55,820 --> 00:01:00,220
affiché quelque soit la valeur de a, donc
c'est un petit

15
00:01:00,220 --> 00:01:04,631
peu mystérieux, mais pour comprendre
pourquoi il faut savoir que le

16
00:01:04,631 --> 00:01:08,873
point-virgule est considéré comme une
instruction,

17
00:01:08,873 --> 00:01:11,654
une instruction qui ne fait rien.

18
00:01:11,654 --> 00:01:14,168
Ce code ci, j'aurais pu donc l'écrire de

19
00:01:14,168 --> 00:01:17,202
cette façon-là, qui est plus facile à
interpréter,

20
00:01:17,202 --> 00:01:20,472
c'est-à-dire que le point-virgule, cette
instruction

21
00:01:20,472 --> 00:01:22,482
vide, est considérée à l'intérieur du

22
00:01:22,482 --> 00:01:26,491
branchement conditionnel, mais cette
instruction est

23
00:01:26,491 --> 00:01:30,150
considérée en dehors du branchement
conditionnel.

24
00:01:30,150 --> 00:01:31,645
Si a vaut 1, on va rentrer dans

25
00:01:31,645 --> 00:01:35,870
le branchement conditionnel, exécuter
l'instruction vide, c'est-à-dire ne

26
00:01:35,870 --> 00:01:38,110
rien faire et quelque soit la valeur de

27
00:01:38,110 --> 00:01:42,327
a sauter à cette instruction-ci et
afficher le

28
00:01:42,327 --> 00:01:45,000
message "a vaut 1".

29
00:01:45,000 --> 00:01:47,412
Notez au passage que si nous avions
utilisé

30
00:01:47,412 --> 00:01:50,427
des accolades alors qu'il n'y a qu'une
seule instruction

31
00:01:50,427 --> 00:01:53,730
dans le branchement conditionnel, l'erreur
que nous venons

32
00:01:53,730 --> 00:01:56,585
de voir aurait eu beaucoup moins de chance
d'arriver.

33
00:01:56,585 --> 00:02:01,120
C'est donc une bonne idée d'utiliser
systématiquement des accolades, même

34
00:02:01,120 --> 00:02:04,820
quand il n'y a qu'une seule instruction
dans le bloc.

35
00:02:04,820 --> 00:02:06,980
Une troisième erreur est, justement,

36
00:02:06,980 --> 00:02:11,590
d'oublier les accolades quand elles sont
nécessaires comme dans ce code-ci.

37
00:02:11,590 --> 00:02:15,034
Le fait d'avoir indenté ces lignes,
c'est-à-dire de

38
00:02:15,034 --> 00:02:17,653
les avoir décalées un peu vers la droite,

39
00:02:17,653 --> 00:02:19,585
ne suffit pas à ce qu'elles soient à

40
00:02:19,585 --> 00:02:23,800
l'intérieur du branchement conditionnel
contrairement à d'autres langages.

41
00:02:23,800 --> 00:02:27,310
Alors à votre avis que se passe-t-il quand
j'essaie de compiler ce code?

42
00:02:27,310 --> 00:02:32,008
Et bien, le compilateur va m'afficher ce
message d'erreur qui me dit

43
00:02:32,008 --> 00:02:35,808
qu'il y a un else sans le mot-clé if.
Alors pourquoi?

44
00:02:35,808 --> 00:02:42,168
Parce qu'en fait ce code, j'aurais pu
l'écrire de cette façon-ci, c'est-à-dire

45
00:02:42,168 --> 00:02:44,208
que la première instruction qui est

46
00:02:44,208 --> 00:02:46,928
l'instruction d'affichage est bien à
l'intérieur

47
00:02:46,928 --> 00:02:51,753
du branchement conditionnel mais cette
deuxième instruction n'y est pas, elle est

48
00:02:51,753 --> 00:02:57,344
après le branchement conditionnel et quand
le compilateur rencontre ce else, il est

49
00:02:57,344 --> 00:03:02,304
déjà sorti du branchement conditionnel qui
est

50
00:03:02,304 --> 00:03:07,603
ici et ce else n'est donc, pour lui, pas
rattaché à une instruction if.

51
00:03:07,603 --> 00:03:10,910
C'est pour ça qu'il génère ce message
d'erreur.

52
00:03:10,910 --> 00:03:14,501
Passons maintenant à trois quiz.

53
00:03:14,501 --> 00:03:18,649
Je vous demande tout d'abord ce qu'affiche
ce code quand on

54
00:03:18,649 --> 00:03:22,985
l'exécute et quand l'utilisateur rentre la
valeur 1 pour la variable

55
00:03:22,985 --> 00:03:24,790
n et 2 pour la variable p.

56
00:03:24,790 --> 00:03:28,420
Alors à votre avis, quelle est la bonne
réponse?

57
00:03:28,420 --> 00:03:33,280
La bonne réponse est la réponse C et nous
allons voir pourquoi.

58
00:03:33,280 --> 00:03:38,140
Si vous pensez avoir compris, vous pouvez
passer directement au quiz suivant.

59
00:03:38,140 --> 00:03:43,567
Alors je vous rappelle que pour qu'une
condition qui utilise l'opérateur logique

60
00:03:43,567 --> 00:03:48,495
ET qui se note ainsi, soit vraie, il faut
que les deux conditions soient vraies.

61
00:03:48,495 --> 00:03:52,395
Pour qu'une condition qui utilise
l'opérateur logique OU qui se

62
00:03:52,395 --> 00:03:56,940
note ainsi, il suffit qu'une des deux
conditions soit vraie.

63
00:03:56,940 --> 00:04:02,127
L'utilisateur rentre donc les valeurs 1
pour la

64
00:04:02,127 --> 00:04:05,600
variable n et 2 pour la variable p.

65
00:04:05,600 --> 00:04:11,085
Cette condition n strictement inférieur à
p est vraie

66
00:04:11,085 --> 00:04:13,866
puisque n est égal à 1 et p est égal

67
00:04:13,866 --> 00:04:17,270
à 2 et que 1 est strictement inférieur à
2.

68
00:04:17,270 --> 00:04:21,443
Cette expression vaut deux fois n,
c'est-à-dire

69
00:04:21,443 --> 00:04:24,200
deux fois 1, c'est- à-dire 2, p vaut

70
00:04:24,200 --> 00:04:30,200
2, donc toute cette condition est vraie
puisque 2 est bien supérieur ou égal à 2.

71
00:04:30,200 --> 00:04:38,922
Cette condition est donc vraie, on va donc
entrer dans le branchement

72
00:04:38,922 --> 00:04:41,946
conditionnel, exécuter cette
instruction-ci qui

73
00:04:41,946 --> 00:04:43,824
affiche tout simplement 1, 1.

74
00:04:43,824 --> 00:04:49,715
On passe ensuite à ce branchement
conditionnel-ci.

75
00:04:49,715 --> 00:04:52,720
Cette condition est toujours vraie, c'est
la même

76
00:04:52,720 --> 00:04:56,310
que celle qu'on avait eue précédemment,
comme il s'agit

77
00:04:56,310 --> 00:04:59,330
d'un OU ici, je ne suis pas obligé

78
00:04:59,330 --> 00:05:04,054
de considérer la valeur de cette condition
puisque je

79
00:05:04,054 --> 00:05:08,330
sais déjà que toute cette condition est
vraie.

80
00:05:08,330 --> 00:05:12,510
On va donc afficher 2 ici.

81
00:05:12,510 --> 00:05:16,490
On passe ensuite à ce branchement
conditionnel-là.

82
00:05:16,490 --> 00:05:21,026
Cette condition qui est la même que
précédemment, elle est toujours vraie, on

83
00:05:21,026 --> 00:05:24,396
entre donc dans le branchement
conditionnel

84
00:05:24,396 --> 00:05:27,840
ici, on va tester cette nouvelle
condition.

85
00:05:27,840 --> 00:05:29,445
Cette expression

86
00:05:29,445 --> 00:05:35,063
vaut deux fois n, c'est-à-dire 2, p vaut 2
donc cette condition est

87
00:05:35,063 --> 00:05:40,558
vraie puisque 2 est supérieur ou égale à
2, on va donc exécuter cette partie-ci du

88
00:05:40,558 --> 00:05:44,680
branchement conditionnel, c'est-à-dire
afficher 3, sauter cette

89
00:05:44,680 --> 00:05:47,380
partie-ci, on arrive à la fin du
branchement

90
00:05:47,380 --> 00:05:54,776
conditionnel ici, on passe donc à la suite
et la suite fait simplement un retour

91
00:05:54,776 --> 00:05:55,760
à la ligne.

92
00:05:55,760 --> 00:06:02,015
Deuxième exercice, même code, mais cette
fois-ci l'utilisateur rentre les valeurs

93
00:06:02,015 --> 00:06:04,939
1 pour la variable n et 3 pour la variable
p.

94
00:06:04,939 --> 00:06:08,270
Alors à votre avis quelle est la bonne
réponse?

95
00:06:08,270 --> 00:06:13,850
La bonne réponse est la réponse B et nous
allons voir pourquoi.

96
00:06:13,850 --> 00:06:19,844
Cette fois-ci n vaut 1,

97
00:06:19,844 --> 00:06:27,126
p vaut 3, cette condition est vraie
puisque 1 est strictement inférieur à 3.

98
00:06:27,126 --> 00:06:34,665
Cette expression vaut 2 fois 1,
c'est-à-dire 2, p vaut 3, donc cette

99
00:06:34,665 --> 00:06:41,759
condition est fausse, puisque 2 n'est pas
supérieur ou égal à 3.

100
00:06:41,759 --> 00:06:46,030
Comme il s'agit d'un ET ici, cette
condition

101
00:06:46,030 --> 00:06:50,350
est fausse et on va passer directement

102
00:06:50,350 --> 00:06:53,965
à l'instruction suivante qui est également
un

103
00:06:53,965 --> 00:06:58,108
branchement conditionnel.
Cette condition, c'est la même qu'avant,

104
00:06:58,108 --> 00:07:03,260
elle est toujours vraie.
Comme il s'agit d'un OU ici, je sais que

105
00:07:03,260 --> 00:07:11,175
toute cette condition est vraie.
On va donc entrer dans le branchement

106
00:07:11,175 --> 00:07:17,074
conditionnel, afficher un 2, on passe
ensuite à ce branchement conditionnel-ci.

107
00:07:17,074 --> 00:07:20,677
Cette condition, c'est la même qu'avant,
elle est

108
00:07:20,677 --> 00:07:25,500
toujours vraie, on entre donc dans le
branchement conditionnel.

109
00:07:25,500 --> 00:07:31,740
Cette condition est fausse, comme avant,
c'est la même que celle-ci.

110
00:07:31,740 --> 00:07:36,440
On exécute la deuxième partie du
branchement conditionnel,

111
00:07:36,440 --> 00:07:41,530
c'est-à-dire qu'on affiche 4, on passe
ensuite à cette instruction-ci qui

112
00:07:41,530 --> 00:07:46,560
fait simplement un retour à la ligne.
Cette fois-ci, les valeurs

113
00:07:46,560 --> 00:07:51,213
entrées par l'utilisateur sont 2 pour n et
1 pour p.

114
00:07:51,213 --> 00:07:56,219
A votre avis, quelle est la bonne réponse?
La bonne

115
00:07:56,219 --> 00:08:01,733
réponse est la réponse A.
Pour ce dernier

116
00:08:01,733 --> 00:08:07,861
exercice, n a la valeur 2 et p a la

117
00:08:07,861 --> 00:08:13,798
valeur 1.
Cette condition est donc cette

118
00:08:13,798 --> 00:08:19,216
fois-ci fausse puisque 2 n'est pas
strictement inférieur à 1.

119
00:08:19,216 --> 00:08:22,380
Comme il s'agit d'un ET ici, je n'ai pas

120
00:08:22,380 --> 00:08:26,940
besoin d'évaluer cette condition-ci, je
sais déjà que toute cette

121
00:08:26,940 --> 00:08:28,970
condition est forcément fausse.

122
00:08:28,970 --> 00:08:32,570
Je passe donc à ce branchement
conditionnel-ci.

123
00:08:32,570 --> 00:08:39,350
Cette condition, et bien c'est la même
qu'avant, j'ai dit qu'elle était fausse,

124
00:08:39,350 --> 00:08:44,467
mais il s'agit d'un OU ici, donc je suis
obligé d'évaluer cette expression-ci,

125
00:08:44,467 --> 00:08:51,380
cette condition-ci, 2 fois n vaut 4, p
vaut 1,

126
00:08:51,380 --> 00:08:56,950
comme 4 est supérieur ou égal à 1, et bien
cette condition-ci

127
00:08:56,950 --> 00:09:01,840
est vraie.
Comme il s'agit d'un OU, cette

128
00:09:01,840 --> 00:09:06,630
condition est vraie, on va

129
00:09:06,630 --> 00:09:11,308
donc exécuter cette instruction,
c'est-à-dire afficher un 2.

130
00:09:11,308 --> 00:09:16,412
On passe ensuite ici.
Cette condition est fausse,

131
00:09:16,412 --> 00:09:22,600
c'est encore une fois la même qu'avant, on
saute donc ce branchement conditionnel

132
00:09:22,600 --> 00:09:27,880
pour arriver à ce stade du programme qui
fait simplement un retour à la ligne.

133
00:09:27,880 --> 00:09:32,092
Passons maintenant au type boolean ou
booléen

134
00:09:32,092 --> 00:09:35,880
en français, qui est le type des
conditions.

135
00:09:35,880 --> 00:09:38,575
Cet type va nous permettre de déclarer des

136
00:09:38,575 --> 00:09:41,903
variables qui vont contenir la valeur de
condition.

137
00:09:41,903 --> 00:09:45,413
Une variable de type booléen est souvent
appelée tout

138
00:09:45,413 --> 00:09:49,057
simplement un booléen et ne peut contenir
que deux valeurs

139
00:09:49,057 --> 00:09:52,297
possibles, soit vrai, soit faux, ou plus
exactement en

140
00:09:52,297 --> 00:09:56,866
Java, on va utiliser les valeurs
littérales true et false.

141
00:09:56,866 --> 00:10:02,187
Dans cet exemple je commence par déclarer
deux variables

142
00:10:02,187 --> 00:10:07,088
a et b de type int, a est initialisé

143
00:10:07,088 --> 00:10:11,341
à 1, b, est initialisé à 2.
Cette instruction

144
00:10:11,341 --> 00:10:15,191
est une déclaration de variable booléenne,

145
00:10:15,191 --> 00:10:18,857
cette variable s'appelle test1 qui sera de
type

146
00:10:18,857 --> 00:10:23,208
effectivement booléen.
Comme toute variable, je peux la

147
00:10:23,208 --> 00:10:33,280
représenter par une boite.
Cette variable est initialisée

148
00:10:33,280 --> 00:10:38,380
à la valeur de la condition a égal b, a
vaut 1,

149
00:10:38,380 --> 00:10:43,610
b vaut 2 donc cette condition est fausse
et test1 va

150
00:10:43,610 --> 00:10:48,664
être initialisé à faux ou plus exactement
false qui

151
00:10:48,664 --> 00:10:53,798
veut dire faux en anglais.
Cette instruction

152
00:10:53,798 --> 00:10:58,441
suivante déclare une deuxième variable de
type

153
00:10:58,441 --> 00:11:04,791
booléen qui s'appelle cette fois-ci test2
qui

154
00:11:04,791 --> 00:11:11,490
va être initialisée à la valeur de la
condition, a strictement inférieur à b.

155
00:11:11,490 --> 00:11:17,370
Comme a vaut 1 b vaut 2, cette condition
est vraie.

156
00:11:17,370 --> 00:11:23,475
Donc test2 va être initialisé à vrai ou
plus exactement à true qui veut dire vrai

157
00:11:23,475 --> 00:11:24,276
en anglais.

158
00:11:24,276 --> 00:11:27,667
Certains étudiants n'ont pas de problèmes
avec

159
00:11:27,667 --> 00:11:30,061
les booléens, d'autres font parfois un
blocage.

160
00:11:30,061 --> 00:11:33,944
Alors rappelez-vous qu'une variable de
type bool est une variable comme

161
00:11:33,944 --> 00:11:38,160
les autres, c'est-à-dire que vous pouvez
vous la représenter comme une boîte.

162
00:11:38,160 --> 00:11:44,040
Il se trouve simplement que cette boîte ne
peut contenir que deux valeurs possibles,

163
00:11:44,040 --> 00:11:49,170
soit true soit false.

164
00:11:49,170 --> 00:11:53,642
Il se trouve aussi qu'on peut utiliser des
opérateurs logiques

165
00:11:53,642 --> 00:11:57,512
entre les variables de type bool et qu'on
peut utiliser ces

166
00:11:57,512 --> 00:12:01,356
variables comme des conditions, par
exemple à l'intérieur d'un branchement

167
00:12:01,356 --> 00:12:04,490
conditionnel et c'est ce que nous allons
voir sur cet exemple.

168
00:12:04,490 --> 00:12:09,400
Comme dans l'exemple précédent, je
commence ici par

169
00:12:09,400 --> 00:12:14,801
déclarer une variable a de type int
initialisée

170
00:12:14,801 --> 00:12:18,673
à 1, une variable b de type int également,

171
00:12:18,673 --> 00:12:23,557
initialisée à 2.
Dans l'instruction suivante, je déclare

172
00:12:23,557 --> 00:12:28,906
cette fois-ci une variable de type booléen
qui s'appelle c et qui est

173
00:12:28,906 --> 00:12:35,240
initialisée à la valeur true.
Dans l'instruction suivante

174
00:12:35,240 --> 00:12:41,000
je déclare un booléen qui s'appelle d,

175
00:12:41,000 --> 00:12:45,674
et qui est initialisée à la valeur de la
condition

176
00:12:45,674 --> 00:12:49,552
a égal b.
A vaut 1, b vaut 2, la condition est

177
00:12:49,552 --> 00:12:55,062
fausse, elle vaut donc false.
d est donc

178
00:12:55,062 --> 00:12:59,770
initialisé à false.
Dans

179
00:12:59,770 --> 00:13:06,208
l'instruction suivante, je déclare une
variable de

180
00:13:06,208 --> 00:13:10,663
type booléen qui s'appelle e et qui est
initialisée à la

181
00:13:10,663 --> 00:13:15,360
valeur de cette condition.
d vaut false.

182
00:13:15,360 --> 00:13:21,005
Cette condition, a inférieur

183
00:13:21,005 --> 00:13:25,905
à b est vraie, elle vaut donc true.
Comme l'opérateur

184
00:13:25,905 --> 00:13:31,480
logique ici est un OU, toute cette
condition est vraie et

185
00:13:31,480 --> 00:13:36,750
elle vaut true.
Donc e est initialisée à true.

186
00:13:36,750 --> 00:13:41,943
On passe maintenant à ce branchement
conditionnel-ci

187
00:13:41,943 --> 00:13:47,384
qui a pour condition la valeur de la
variable booléenne qui s'appelle e,

188
00:13:47,384 --> 00:13:51,816
qui vaut true, donc cette condition est
vraie, et on

189
00:13:51,816 --> 00:13:53,127
va donc rentrer dans le

190
00:13:53,127 --> 00:13:57,054
branchement conditionnel pour exécuter
cette instruction

191
00:13:57,054 --> 00:13:59,710
et donc afficher le message "e vaut true".

192
00:13:59,710 --> 00:14:04,641
Voilà, c'est tout pour le moment pour les
booléens mais sachez qu'ils sont

193
00:14:04,641 --> 00:14:06,315
utiles pour beaucoup de problèmes et

194
00:14:06,315 --> 00:14:08,583
nous les rencontrerons dans de nombreux
exemples.

