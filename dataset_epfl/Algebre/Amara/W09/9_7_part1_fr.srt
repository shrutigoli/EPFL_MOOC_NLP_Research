1
00:00:04,005 --> 00:00:06,175
Maintenant, comme promis,

2
00:00:06,175 --> 00:00:10,785
nous allons voir comment
on commence dans un espace vectoriel

3
00:00:10,785 --> 00:00:13,685
de dimension finie donné

4
00:00:13,685 --> 00:00:17,075
dans lequel il y a un produit scalaire

5
00:00:17,075 --> 00:00:21,075
et puis on cherche une base orthogonale
de cet espace.

6
00:00:21,724 --> 00:00:23,384
Je n'ai pas fait la remarque,

7
00:00:23,384 --> 00:00:25,594
dès le moment où
on a une base orthogonale,

8
00:00:25,594 --> 00:00:28,654
il est facile de trouver
une base orthonormale

9
00:00:28,654 --> 00:00:32,654
car il suffit de diviser chacun
des vecteurs dans la base orthogonale

10
00:00:32,654 --> 00:00:35,344
par sa norme.

11
00:00:36,284 --> 00:00:40,594
Ça je ferai après, mais pour le moment
on cherche une base orthogonale

12
00:00:40,594 --> 00:00:42,404
d'un espace vectoriel donné.

13
00:00:43,609 --> 00:00:46,859
Malheureusement, c'est un procédé long.

14
00:00:46,859 --> 00:00:48,469
Ce n'est pas compliqué,

15
00:00:48,469 --> 00:00:50,979
c'est juste beaucoup
d'étapes calculatoires.

16
00:00:50,979 --> 00:00:54,109
Je donnerai déjà le procédé,

17
00:00:54,109 --> 00:00:56,389
qui s'appelle le procédé de Gram-Schmidt,

18
00:00:56,389 --> 00:00:58,549
ensuite, je vais faire
une esquisse de preuve

19
00:00:58,549 --> 00:01:01,879
que ça marche à chaque coup,

20
00:01:01,879 --> 00:01:03,679
et puis ensuite, je ferai un exemple.

21
00:01:03,973 --> 00:01:08,383
Alors, je me donne un <i>ℝ</i>-espace vectoriel
muni d'un produit scalaire

22
00:01:08,383 --> 00:01:12,383
et puis je me donne des vecteurs
<i>x_1</i> jusqu'à <i>x_k</i> dans <i>V</i>.

23
00:01:13,030 --> 00:01:17,450
Ensuite, je définis une nouvelle suite
de vecteurs <i>v_1</i> jusqu'à <i>v_k</i>

24
00:01:17,450 --> 00:01:19,370
et la définition est comme suit.

25
00:01:19,805 --> 00:01:22,845
Et ça, c'est la partie
qui est longue et calculatoire.

26
00:01:22,845 --> 00:01:25,715
Je pose <i>v_1</i> simplement égal à <i>x_1</i>.

27
00:01:26,366 --> 00:01:33,456
Et ensuite, <i>v_2</i> c'est <i>x_2</i> et je soustrais
la projection de <i>x_2</i> sur <i>v_1</i>.

28
00:01:34,201 --> 00:01:38,791
Ensuite, pour <i>v_3</i>,
je prends le troisième vecteur <i>x_3</i>

29
00:01:38,791 --> 00:01:42,791
et je soustrais les projections
de vecteur déjà trouvés.

30
00:01:43,198 --> 00:01:44,358
Et puis ainsi de suite.

31
00:01:44,358 --> 00:01:47,468
Donc quand on arrive au k-ème vecteur,

32
00:01:47,468 --> 00:01:53,978
je prends <i>x_k</i> et ensuite je soustrais
toutes les projections de <i>x_k</i>

33
00:01:53,978 --> 00:01:57,788
sur les <i>k - 1</i> vecteurs précédents
que nous avons déjà calculés.

34
00:01:57,818 --> 00:01:59,938
Donc on ne peut pas
le faire tout d'un coup,

35
00:01:59,938 --> 00:02:01,259
on ne peut pas calculer lui

36
00:02:01,259 --> 00:02:04,289
sans avoir calculer
tous ceux qui viennent avant.

37
00:02:04,289 --> 00:02:07,829
Mais bon, c'est une procédure récursive,
il faut y aller quoi.

38
00:02:08,756 --> 00:02:10,156
Je ferai un exemple.

39
00:02:10,583 --> 00:02:13,763
Et puis la proposition,
c'est qu'en faisant comme ça,

40
00:02:13,763 --> 00:02:16,243
on a une famille orthogonale de vecteurs.

41
00:02:16,718 --> 00:02:18,548
C'est en fait très beau

42
00:02:18,548 --> 00:02:21,378
mais ça va seulement être long à calculer.

43
00:02:21,881 --> 00:02:24,241
On a déjà vu dans la vidéo précédente

44
00:02:24,241 --> 00:02:26,751
que si je me donne
deux vecteurs <i>x_1</i> et <i>x_2</i>

45
00:02:26,751 --> 00:02:29,261
et puis je garde le premier vecteur,

46
00:02:29,261 --> 00:02:31,781
donc je garde <i>x_1</i>,

47
00:02:31,781 --> 00:02:37,831
et ensuite, je remplace <i>x_2</i> par <i>x_2</i>
moins la projection sur le premier,

48
00:02:37,831 --> 00:02:39,511
donc ça c'est le deuxième vecteur,

49
00:02:39,511 --> 00:02:42,221
alors ces deux vecteurs sont orthogonaux

50
00:02:42,221 --> 00:02:45,481
et puis en plus, engendrent le même espace
que ce qu'on avait avant.

51
00:02:45,481 --> 00:02:47,531
Donc ça, ça fait partie de l'énoncé

52
00:02:47,531 --> 00:02:49,951
mais pour le moment,
je veux juste vous convaincre

53
00:02:49,951 --> 00:02:51,211
de l'orthogonalité.

54
00:02:51,720 --> 00:02:53,460
Le début, on a déjà vu.

55
00:02:53,963 --> 00:02:56,993
Maintenant, je fais une esquisse de preuve
de cette proposition.

56
00:03:00,625 --> 00:03:04,625
D'abord, je vais vous montrer
que <i>v_1</i> est orthogonal

57
00:03:04,625 --> 00:03:06,005
à tous les autres vecteurs.

58
00:03:10,418 --> 00:03:12,748
Dans la vidéo précédente, on a déjà montré

59
00:03:12,748 --> 00:03:17,388
que si je fais <i>⟨v_1, v_2⟩</i>
ça ça donne zéro.

60
00:03:17,918 --> 00:03:19,358
Donc vidéo précédente.

61
00:03:19,901 --> 00:03:24,571
C'est pour ça que j'avais dit
que c'était le début de l’algorithme.

62
00:03:25,065 --> 00:03:29,065
Maintenant, si je fais <i>⟨v_1, v_3⟩</i>,

63
00:03:29,844 --> 00:03:33,194
donc ça, c'est <i>⟨v_1,</i>...

64
00:03:33,628 --> 00:03:36,008
Et puis, donc je rappelle ici
la définition de <i>v_3</i>,

65
00:03:36,008 --> 00:03:38,478
c'est que je prends
le troisième vecteur <i>x_3</i>

66
00:03:38,478 --> 00:03:43,688
et je soustrais sa projection sur <i>v_1</i>,

67
00:03:43,688 --> 00:03:46,092
donc le <i>v_1</i> qu'on a déjà trouvé,

68
00:03:46,092 --> 00:03:51,282
et ensuite, je soustrais
sa projection sur le <i>v_2</i>,

69
00:03:51,282 --> 00:03:52,492
qu'on a déjà trouvé.

70
00:03:55,384 --> 00:04:02,284
Maintenant, le <i>v_1</i> est orthogonal
à <i>x_3</i> moins la projection sur <i>v_1</i> de <i>x_3</i>.

71
00:04:02,951 --> 00:04:04,351
Donc <i>v_1</i>...

72
00:04:06,954 --> 00:04:09,914
Ça c'est la propriété que j'ai montrée
dans la vidéo précédente

73
00:04:09,914 --> 00:04:11,304
pour deux vecteurs <i>u</i> et <i>v</i>.

74
00:04:11,833 --> 00:04:13,203
Donc ça c'est une chose.

75
00:04:13,608 --> 00:04:17,198
Donc quand je fais le produit scalaire
de ça avec ça, j'aurai zéro.

76
00:04:17,848 --> 00:04:18,788
Et l'autre chose,

77
00:04:18,788 --> 00:04:23,918
c'est que la projection de <i>x_3</i> sur <i>v_2</i>
est dans la direction de <i>v_2</i>

78
00:04:23,918 --> 00:04:25,978
donc c'est un multiple scalaire de <i>v_2</i>.

79
00:04:26,364 --> 00:04:32,034
De plus, la projection sur <i>v_2</i> de <i>x_3</i>

80
00:04:32,034 --> 00:04:37,474
est un multiple scalaire de <i>v_2</i>,

81
00:04:37,474 --> 00:04:42,754
et donc aussi orthogonal à <i>v_1</i>,

82
00:04:42,754 --> 00:04:45,404
car on sait déjà
que <i>v_1</i> est orthogonal à <i>v_2</i>.

83
00:04:45,828 --> 00:04:49,028
Donc du coup, si je sépare ici,
j'aurai <i>v_1</i> avec ça,

84
00:04:49,028 --> 00:04:50,258
ça ça donne zéro.

85
00:04:50,258 --> 00:04:52,518
Et <i>v_1</i> avec ça, ça donne zéro.

86
00:04:52,518 --> 00:04:55,998
Comme c'est additif à droite,
le tout est égal à zéro.

87
00:04:57,050 --> 00:04:58,040
Très bien.

88
00:04:58,399 --> 00:05:01,179
Et puis, je vais juste faire
encore une étape.

89
00:05:01,782 --> 00:05:04,442
Une étape et puis après
je dis ainsi de suite.

90
00:05:04,442 --> 00:05:06,742
C'est pour ça que je dis
que c'est une esquisse.

91
00:05:07,473 --> 00:05:09,193
Donc ici, j'ai <i>v_1</i>.

92
00:05:09,635 --> 00:05:12,315
Ensuite, le <i>v_4</i> c'est <i>x_4</i>

93
00:05:12,315 --> 00:05:16,315
moins sa projection sur <i>v_1</i>

94
00:05:18,405 --> 00:05:21,785
moins sa projection sur <i>v_2</i>

95
00:05:23,469 --> 00:05:26,359
moins sa projection sur <i>v_3</i>.

96
00:05:28,960 --> 00:05:32,070
Et puis comme avant,
le <i>v_1</i> est orthogonal à <i>x_4</i>

97
00:05:32,070 --> 00:05:33,560
moins la projection sur <i>v_1</i>,

98
00:05:33,560 --> 00:05:35,780
ça c'est ce qu'on a vu
dans la vidéo précédente.

99
00:05:35,780 --> 00:05:38,430
Donc ce premier produit scalaire,
ça donne zéro.

100
00:05:39,166 --> 00:05:43,166
Et ensuite, la projection de <i>x_4</i> sur <i>v_2</i>
c'est un vecteur

101
00:05:43,166 --> 00:05:45,016
qui est un multiple scalaire de <i>v_2</i>,

102
00:05:45,016 --> 00:05:47,146
et on sait que <i>v_1</i> est orthogonal à <i>v_2</i>

103
00:05:47,146 --> 00:05:49,556
donc ce produit scalaire-là,
ça donne zéro.

104
00:05:50,217 --> 00:05:55,927
Et puis enfin,
la projection de <i>x_4</i> sur <i>v_3</i>

105
00:05:55,927 --> 00:05:58,967
c'est un vecteur
qui est un multiple scalaire de <i>v_3</i>.

106
00:05:58,967 --> 00:06:02,257
Et puis on sait déjà que <i>⟨v_1, v_3⟩</i>,
le produit scalaire est nul.

107
00:06:02,257 --> 00:06:05,407
Donc <i>v_1</i> avec ce vecteur-là,
c'est aussi zéro.

108
00:06:05,733 --> 00:06:07,493
Donc j'écris un peu ça.

109
00:06:07,985 --> 00:06:14,105
Donc on a que <i>v_1, x_4</i>

110
00:06:14,105 --> 00:06:18,809
moins la projection sur <i>v_1</i> de <i>x_4</i>

111
00:06:18,809 --> 00:06:19,803
est égal à zéro.

112
00:06:19,803 --> 00:06:23,033
Ça c'est la vidéo précédente,

113
00:06:24,933 --> 00:06:27,663
paragraphe 9.6.

114
00:06:28,013 --> 00:06:35,003
On a que <i>⟨v_1, v_2⟩ = 0</i>

115
00:06:36,334 --> 00:06:43,904
et donc ça ça implique que <i>v_1</i>,
la projection de <i>x_4</i> sur <i>v_2</i>

116
00:06:43,904 --> 00:06:45,194
est égal à zéro.

117
00:06:45,871 --> 00:06:51,901
Et on a que <i>⟨v_1, v_3⟩ = 0</i>
et ça ça implique

118
00:06:51,901 --> 00:06:58,031
que <i>v_1</i> avec la projection
de <i>x_4</i> sur <i>v_3</i>

119
00:06:58,031 --> 00:06:59,261
est égal à zéro.

120
00:06:59,261 --> 00:07:01,171
Donc du coup, je trouve zéro.

121
00:07:01,689 --> 00:07:03,439
Et puis, ainsi de suite, et cetera.

122
00:07:03,852 --> 00:07:09,192
Donc là, je me suis occupée
du vecteur <i>v_1</i>.

123
00:07:09,227 --> 00:07:12,077
Et maintenant, qu'en est-il de <i>v_2</i>
et des autres ?

124
00:07:12,077 --> 00:07:14,827
C'est quand même une esquisse,
je ne vais pas faire tout.

125
00:07:15,175 --> 00:07:16,685
Pour le vecteur <i>v_2</i>,

126
00:07:18,215 --> 00:07:22,705
on montre que <i>v_2</i> est orthogonal à <i>v_i</i>

127
00:07:22,906 --> 00:07:24,026
pour <i>i</i>,

128
00:07:24,026 --> 00:07:26,466
je n'ai pas besoin de faire un
parce qu'on a déjà fait,

129
00:07:26,466 --> 00:07:30,016
donc disons pour trois jusqu'à <i>k</i>.

130
00:07:30,206 --> 00:07:33,736
De nouveau, je ne vais pas tout faire,
mais c'est pour vous donner l'idée.

131
00:07:33,736 --> 00:07:37,086
Je n'ai pas besoin de faire <i>v_2</i> avec <i>v_1</i>
parce que c'est déjà fait.

132
00:07:37,086 --> 00:07:40,946
Donc si je fais <i>v_2</i> avec <i>v_3</i>,

133
00:07:40,946 --> 00:07:43,986
alors ça c'est <i>v_2</i>

134
00:07:43,989 --> 00:07:47,698
et <i>v_3</i> c'était <i>x_3</i>

135
00:07:47,698 --> 00:07:53,568
moins la projection sur <i>v_2</i> de <i>x_3</i>

136
00:07:54,628 --> 00:08:00,218
moins la projection sur <i>v_1</i> de <i>x_3</i>.

137
00:08:00,218 --> 00:08:02,238
Je les écris
dans un autre sens cette fois.

138
00:08:02,587 --> 00:08:06,587
Et puis, alors maintenant,
comme avec deux vecteurs,

139
00:08:06,587 --> 00:08:11,027
si je prends <i>v_2</i> et un autre <i>x_3</i>
moins la projection sur <i>v_2</i>,

140
00:08:11,027 --> 00:08:13,837
ce produit scalaire-là est égal à zéro.

141
00:08:14,471 --> 00:08:19,191
Et puis, ce vecteur est un vecteur
qui est un multiple scalaire de <i>v_1</i>

142
00:08:19,191 --> 00:08:22,261
et on sait déjà
que <i>v_2</i> est orthogonal à <i>v_1</i>

143
00:08:22,261 --> 00:08:23,861
donc ceci donne zéro.

144
00:08:24,039 --> 00:08:29,199
J'écris car <i>v_2</i> avec <i>x_3</i>

145
00:08:29,199 --> 00:08:33,729
moins la projection sur <i>v_2</i> de <i>x_3</i>,

146
00:08:33,729 --> 00:08:35,089
ça, ça donne zéro.

147
00:08:36,631 --> 00:08:42,321
Et <i>⟨v_2, v_1⟩ = 0</i> implique

148
00:08:42,321 --> 00:08:48,311
que <i>v_2</i> avec la projection sur <i>v_1</i> de <i>x_3</i>

149
00:08:49,401 --> 00:08:50,561
est égal à zéro.

150
00:08:51,607 --> 00:08:56,297
Et puis maintenant,
si je fais <i>v_2</i> avec <i>v_4</i>.

151
00:08:56,671 --> 00:09:01,561
Donc ça, c'est <i>v_2</i> avec <i>x_4</i> moins...

152
00:09:02,742 --> 00:09:06,742
Maintenant, je vais les écrire
dans un autre sens.

153
00:09:06,742 --> 00:09:10,742
J'ai moins la projection sur <i>v_2</i> de <i>x_4</i>

154
00:09:11,446 --> 00:09:15,446
moins la projection sur <i>v_1</i> de <i>x_4</i>

155
00:09:16,323 --> 00:09:19,723
moins la projection sur <i>v_3</i> de <i>x_4</i>.

156
00:09:19,723 --> 00:09:22,013
Donc je les ai permutés un petit peu.

157
00:09:22,647 --> 00:09:23,837
Et puis comme avant,

158
00:09:23,837 --> 00:09:27,977
je sais que si je fais <i>v_2</i> et <i>x_4</i>
moins la projection sur <i>v_2</i>,

159
00:09:27,977 --> 00:09:30,037
ça c'est un produit scalaire
qui donne zéro.

160
00:09:30,856 --> 00:09:32,736
Ça c'est un multiple de <i>v_1</i>.

161
00:09:34,452 --> 00:09:36,652
Et donc <i>v_2</i> avec ce vecteur,
c'est zéro.

162
00:09:36,848 --> 00:09:39,798
Et puis ça,
c'est un multiple scalaire de <i>v_3</i>,

163
00:09:40,816 --> 00:09:43,216
et on sait déjà
que <i>v_2</i> avec <i>v_3</i>, c'est zéro,

164
00:09:43,216 --> 00:09:44,866
et donc ça c'est zéro.

165
00:09:44,866 --> 00:09:46,476
Et j'ai dit et cetera.

166
00:09:47,456 --> 00:09:50,006
Donc c'est vraiment une esquisse,
je n'ai pas fait tout.

167
00:09:50,006 --> 00:09:51,536
Il faudrait une récurrence

168
00:09:51,536 --> 00:09:55,536
et puis je trouve que ça n'aide pas
de faire une démonstration formelle ici,

169
00:09:55,536 --> 00:09:57,566
j'espère que vous en êtes convaincus.

170
00:09:58,526 --> 00:10:00,736
Et puis maintenant,
je vais faire un exemple.

171
00:10:01,562 --> 00:10:06,502
Je prends <i>V</i> l'espace vectoriel <i>ℝ^4</i>,
muni du produit scalaire usuel

172
00:10:07,435 --> 00:10:10,515
et je me donne trois vecteurs
<i>x_1, x_2, x_3</i>,

173
00:10:10,515 --> 00:10:11,715
comme vous voyez.

174
00:10:12,665 --> 00:10:17,255
Et puis, je vais appliquer le procédé
de Gram-Schmidt à ces vecteurs-là.

175
00:10:18,503 --> 00:10:19,633
Donc appliquons.

176
00:10:25,759 --> 00:10:29,759
Alors <i>v_1</i> c'est facile,
c'est juste <i>x_1</i>.

177
00:10:30,880 --> 00:10:32,370
Donc ça je ne change pas.

178
00:10:32,798 --> 00:10:37,000
Ensuite, <i>v_2</i> c'est <i>x_2 </i>

179
00:10:37,000 --> 00:10:41,260
moins la projection de <i>x_2</i> sur <i>v_1</i>.

180
00:10:41,730 --> 00:10:44,480
Donc ça c'est <i>x_2</i> moins...

181
00:10:44,670 --> 00:10:47,050
Maintenant, cette projection,
je vous rappelle ici,

182
00:10:47,050 --> 00:10:48,530
c'est le produit scalaire usuel,

183
00:10:48,530 --> 00:10:50,250
donc je vais tout écrire au début.

184
00:10:50,250 --> 00:10:57,240
Donc ça c'est <i>(x_2 . v_1) / (v_1 . v_1)</i>

185
00:10:58,180 --> 00:10:59,480
qui multiplie <i>v_1</i>.

186
00:10:59,538 --> 00:11:01,678
Donc ça de toute façon, c'est un vecteur

187
00:11:01,678 --> 00:11:05,348
qui est un multiple scalaire de <i>v_1</i>
et ça c'est le multiple.

188
00:11:05,348 --> 00:11:10,548
Donc ça c'est égal à <i>(0, 1, 1, 0)</i> moins...

189
00:11:10,772 --> 00:11:14,232
Maintenant, je fais le produit scalaire
de <i>x_2</i> avec <i>v_1</i>,

190
00:11:14,232 --> 00:11:15,942
ça c'est <i>x_1</i> avec <i>v_1</i>.

191
00:11:15,942 --> 00:11:20,462
Donc ça, ça me donne
<i>0 + 1 + 0</i>

192
00:11:20,462 --> 00:11:22,152
donc ça c'est 1,

193
00:11:22,152 --> 00:11:25,751
divisé par le produit scalaire
de <i>v_1</i> avec lui-même,

194
00:11:25,751 --> 00:11:29,121
c'est 2,
qui multiplie <i>v_1</i>.

195
00:11:29,121 --> 00:11:32,070
Donc ça, ça donne -1/2,

196
00:11:32,070 --> 00:11:34,330
1 - 1/2, 1/2,

197
00:11:36,120 --> 00:11:37,760
1, 0.

198
00:11:37,760 --> 00:11:40,090
Bon maintenant, vous pouvez déjà
vous arrêter ici

199
00:11:40,090 --> 00:11:42,900
pour vérifier que nous avons fait
cette étape correctement.

200
00:11:42,900 --> 00:11:46,900
Je devrais avoir ici un vecteur
qui est orthogonal,

201
00:11:46,900 --> 00:11:49,720
d'une part au moins,
orthogonal à ce vecteur-là.

202
00:11:49,720 --> 00:11:53,240
Donc j'ai <i>-1/2 + 1/2 + 0</i>,
donc au moins ça.

203
00:11:54,126 --> 00:11:57,836
Il peut y avoir d'autres erreurs,
mais ça c'est une petite vérification

204
00:11:57,836 --> 00:11:58,746
qu'on peut faire.

205
00:11:59,397 --> 00:12:04,247
Et ensuite, <i>v_3</i> est égal à,
par le procédé,

206
00:12:04,247 --> 00:12:09,197
<i>x_3</i> moins la projection sur <i>v_1</i> de <i>x_3</i>

207
00:12:09,458 --> 00:12:14,728
moins la projection sur <i>v_2</i> de <i>x_3</i>.

208
00:12:16,092 --> 00:12:20,962
Donc j'ai <i>x_3</i> qui est ce vecteur moins...

209
00:12:21,567 --> 00:12:25,597
Et maintenant, j'écris tout,
comme c'est un premier exemple.

210
00:12:25,597 --> 00:12:31,977
Donc après,
j'ai <i>(x_3 . v_1) / (v_1 . v_1)</i>,

211
00:12:31,977 --> 00:12:34,347
c'est ça qui multiplie <i>v_1</i>,

212
00:12:34,347 --> 00:12:41,537
moins <i>(x_3 . v_2) / (v_2 . v_2)</i>,

213
00:12:41,537 --> 00:12:43,067
qui multiplie <i>v_2</i>.

214
00:12:43,147 --> 00:12:47,147
Et maintenant, j'effectue
tous ces produits scalaires moins...

215
00:12:48,113 --> 00:12:51,813
<i>x_3</i> avec <i>v_1</i> ça donne 0, 0,
ça c'est 0.

216
00:12:52,766 --> 00:12:54,916
Bon après, le reste n'est pas important.

217
00:12:55,134 --> 00:12:56,104
Moins...

218
00:12:56,104 --> 00:12:58,834
Ensuite, <i>x_3</i> avec <i>v_2</i>.

219
00:12:58,834 --> 00:13:00,284
Maintenant, le <i>v_2</i> c'est ici.

220
00:13:00,284 --> 00:13:03,894
Donc j'ai <i>0 + 0 + 1,</i>

221
00:13:03,894 --> 00:13:06,304
donc <i>- 1</i> divisé par...

222
00:13:06,385 --> 00:13:09,165
Et puis maintenant, je dois diviser
par le produit scalaire

223
00:13:09,165 --> 00:13:10,645
de <i>v_2</i> avec lui-même.

224
00:13:10,645 --> 00:13:14,645
Donc j'ai <i>1/4 + 1/4 + 1.</i>

225
00:13:15,012 --> 00:13:17,392
Et tout ça, ça multiplie <i>v_2</i>.

226
00:13:17,527 --> 00:13:21,527
Donc j'ai<i> (-1/2, 1/2, 1, 0).</i>

227
00:13:21,914 --> 00:13:23,424
Maintenant, je vais simplifier.

228
00:13:23,424 --> 00:13:25,324
Vous voyez pourquoi ça devient pénible.

229
00:13:25,324 --> 00:13:31,434
Donc ici j'ai égal à <i>(0, 0, 1, 1) -</i>

230
00:13:31,434 --> 00:13:35,744
Donc ici en bas, j'ai 3/2,
donc ça me fait 2/3,

231
00:13:35,744 --> 00:13:40,779
qui multiplie <i>(-1/2, 1/2,1, 0).</i>

232
00:13:41,286 --> 00:13:43,566
Et quand je mets tout ça ensemble,

233
00:13:43,566 --> 00:13:49,296
ici j'ai <i>1/3, -1/3,</i>

234
00:13:50,663 --> 00:13:54,253
après j'ai <i>1 - 2/3</i> donc 1/3,

235
00:13:55,253 --> 00:13:56,643
1.

236
00:13:58,193 --> 00:14:02,631
Et puis de nouveau, je peux vérifier
que ce vecteur est effectivement

237
00:14:02,631 --> 00:14:04,881
orthogonal aux deux précédents.

238
00:14:05,138 --> 00:14:08,678
Donc là, j'ai <i>1/3 -1/3 + 0</i>,
donc ça c'est zéro.

239
00:14:09,082 --> 00:14:15,412
Et ensuite ici, j'ai <i>-1/6 -1/6</i>,
ça fait - 1/3,

240
00:14:15,412 --> 00:14:18,312
<i>+ 1/3 + 0</i>,
donc ça c'est zéro.

241
00:14:18,312 --> 00:14:19,972
Donc on vérifie

242
00:14:21,508 --> 00:14:26,568
que <i>v_1 . v_2 = 0</i>,

243
00:14:26,568 --> 00:14:29,298
<i>v_1 . v_3 = 0</i>

244
00:14:29,298 --> 00:14:32,348
et <i>v_2 . v_3 = 0</i>.

245
00:14:32,537 --> 00:14:33,627
Magnifique.

246
00:14:33,627 --> 00:14:36,727
Donc voilà, on a commencé
avec trois vecteurs un peu quelconques.

247
00:14:36,930 --> 00:14:41,330
Et puis après, on fait le procédé
de Gram-Schmidt

248
00:14:41,330 --> 00:14:45,330
et puis on fabrique trois vecteurs
qui sont orthogonaux deux à deux.

249
00:14:45,816 --> 00:14:48,036
Maintenant,
ce que je n'ai pas encore remarqué

250
00:14:48,036 --> 00:14:50,226
mais que je vais remarquer ici
dans cet exemple

251
00:14:50,226 --> 00:14:53,426
et puis je vais le reprendre
dans la prochaine vidéo,

252
00:14:53,426 --> 00:14:57,976
c'est que, ici, si on regarde le Vect,

253
00:14:57,976 --> 00:15:01,976
donc le sous-espace vectoriel engendré
par ces trois vecteurs-là,

254
00:15:01,976 --> 00:15:07,916
ou bien le sous-espace vectoriel
engendré par les vecteurs <i>v_1, v_2, v_3</i>,

255
00:15:07,916 --> 00:15:09,156
des nouveaux vecteurs,

256
00:15:09,156 --> 00:15:10,846
alors c'est le même sous-espace.

257
00:15:10,846 --> 00:15:12,966
Alors ici, j'aimerais juste
vous convaincre.

258
00:15:13,085 --> 00:15:16,445
Donc comme d'habitude,
- peut-être j'écris -

259
00:15:17,489 --> 00:15:24,439
donc, <i>Vect(x_1, x_2,x_3)</i>

260
00:15:25,289 --> 00:15:31,169
est égal au <i>Vect(v_1, v_2, v_3)</i>.

261
00:15:31,935 --> 00:15:34,375
Et puis maintenant, pour voir ça,

262
00:15:34,375 --> 00:15:38,375
je vais vous convaincre
des deux inclusions.

263
00:15:38,926 --> 00:15:42,736
Donc d'abord, il y a une des inclusions
qui est tout à fait banale,

264
00:15:42,736 --> 00:15:45,086
donc ça c'est l'inclusion comme ça,

265
00:15:45,086 --> 00:15:51,466
parce que pour ça je dois juste vous dire
que le <i>v_1</i> est clairement égal à <i>x_1</i>

266
00:15:51,466 --> 00:15:52,866
donc il est là-dedans.

267
00:15:52,866 --> 00:15:58,336
Le <i>v_2</i> maintenant,
c'est une combinaison linéaire de <i>x_2</i>,

268
00:15:58,336 --> 00:15:59,806
qui est ici,

269
00:15:59,806 --> 00:16:03,476
et la projection de <i>x_2</i> sur <i>v_1</i>,
mais <i>v_1</i> c'est juste <i>x_1</i>.

270
00:16:03,841 --> 00:16:06,681
Donc ça c'est une combinaison linéaire
de <i>x_1</i> et <i>x_2</i>.

271
00:16:07,536 --> 00:16:13,486
<i>v_3</i> est une combinaison linéaire de <i>x_3</i>

272
00:16:15,040 --> 00:16:17,860
et les projections sur <i>v_1</i> et <i>v_2</i>

273
00:16:17,860 --> 00:16:21,400
mais je me suis déjà convaincue
que <i>v_1</i> et <i>v_2</i> sont là-dedans,

274
00:16:21,400 --> 00:16:23,590
donc ce sont les multiples de <i>v_1</i> et <i>v_2</i>,

275
00:16:23,590 --> 00:16:26,140
donc <i>v_3</i> est aussi là ici dedans.

276
00:16:26,291 --> 00:16:28,461
Donc ça c'est celui qui est facile à voir.

277
00:16:28,991 --> 00:16:33,831
Maintenant, est-ce qu'on peut aussi voir
que <i>x_1, 2, 3</i> sont inclus ici ?

278
00:16:34,575 --> 00:16:37,035
Le <i>x_1</i>, c'est clair
parce que c'est égal à <i>v_1</i>.

279
00:16:37,703 --> 00:16:43,143
Le <i>x_2</i>, vous n'avez qu'à voir
que <i>x_2</i> est égal à <i>v_2</i>

280
00:16:43,143 --> 00:16:44,563
plus cette projection.

281
00:16:45,140 --> 00:16:48,430
Et donc le <i>X_2</i>, on l'écrit
comme une combinaison linéaire

282
00:16:48,430 --> 00:16:50,330
de <i>v_2</i> et un multiple de <i>v_1</i>.

283
00:16:50,330 --> 00:16:51,530
Bon ça c'est bien.

284
00:16:51,627 --> 00:16:57,987
Donc ça c'est dans le <i>Vect(v_1, v_2, v_3)</i>.

285
00:16:58,570 --> 00:17:02,760
Et le <i>x_3</i> est égal à <i>v_3</i>

286
00:17:02,760 --> 00:17:06,591
plus la projection sur <i>v_1</i>

287
00:17:07,856 --> 00:17:11,496
plus la projection sur <i>v_2</i>.

288
00:17:13,267 --> 00:17:14,587
Donc ça c'est <i>v_3</i>.

289
00:17:14,587 --> 00:17:15,957
Ça c'est un multiple de <i>v_1</i>.

290
00:17:15,957 --> 00:17:17,327
Ça c'est un multiple de <i>v_2</i>.

291
00:17:17,327 --> 00:17:19,417
Donc ça c'est aussi dans le Vect.

292
00:17:19,417 --> 00:17:21,527
En fait, les deux inclusions sont faciles.

293
00:17:22,073 --> 00:17:24,133
Donc on a l'autre inclusion aussi,

294
00:17:24,133 --> 00:17:26,363
donc les deux espaces sont égaux.

295
00:17:27,014 --> 00:17:29,761
Et c'est ça qui nous donnera
cette méthode pour chercher

296
00:17:29,761 --> 00:17:31,371
une base orthogonale.
