1
00:00:05,752 --> 00:00:10,577
In this part we are going to focus
on designing a provenance entity.

2
00:00:10,763 --> 00:00:14,413
So we've seen that the platform does
allow you to do these kind of things

3
00:00:14,605 --> 00:00:16,955
now, how do you do it in practice?

4
00:00:17,170 --> 00:00:19,720
Again, I will not get into
the technical details

5
00:00:19,891 --> 00:00:22,491
of actually writing
an entity in this lecture

6
00:00:22,689 --> 00:00:26,114
but just: how does
an entity look like.

7
00:00:27,439 --> 00:00:29,976
The most important
thing is to give it a name.

8
00:00:30,169 --> 00:00:33,282
It sounds like a very
simple thing to say

9
00:00:33,464 --> 00:00:38,064
but naming things appropriately
and meaningfully so that

10
00:00:38,247 --> 00:00:42,997
the community can refer to it
and understand very easily

11
00:00:43,233 --> 00:00:47,121
what your entity is
is extremely important.

12
00:00:47,312 --> 00:00:53,637
So naming your entity something that
is understood by everyone around

13
00:00:53,839 --> 00:00:56,839
is going to help a lot.

14
00:00:57,110 --> 00:01:01,085
So, like I said, you're going
to define it through a schema

15
00:01:01,286 --> 00:01:05,936
and you have the ability to
extend entities from one and other.

16
00:01:06,183 --> 00:01:08,108
So, I already gave an example

17
00:01:08,291 --> 00:01:12,204
which is extending
the generic provenance entity

18
00:01:12,395 --> 00:01:17,570
defined by the W3C prov
to define your own

19
00:01:17,773 --> 00:01:20,773
but for instance,
I'll think of an example

20
00:01:21,159 --> 00:01:28,034
you have defined a data set entity

21
00:01:31,713 --> 00:01:38,188
and say, the data set has a category
which is an ontology term

22
00:01:38,380 --> 00:01:41,380
and it has a name.

23
00:01:42,120 --> 00:01:47,358
This is fine, now, earlier I took
an example of an electrophysiology

24
00:01:47,537 --> 00:01:51,949
data set and we have briefly
discussed that this type of data set

25
00:01:52,157 --> 00:01:57,920
also has another piece of
information that is the stimuli

26
00:01:58,222 --> 00:02:03,597
that was used to stimulate
the specific neuron

27
00:02:03,809 --> 00:02:06,809
in order to observe
its electrical response.

28
00:02:07,287 --> 00:02:09,462
So, this is also
a data set.

29
00:02:09,684 --> 00:02:12,646
It is an electrophysiology data set.

30
00:02:12,857 --> 00:02:18,207
And so on this stage what you
can do is to extend the data set.

31
00:02:20,150 --> 00:02:24,825
And we'll write it if it is,
for the sake of writing it short

32
00:02:25,833 --> 00:02:28,483
and at this stage I could define

33
00:02:30,352 --> 00:02:32,677
a stimuli property.

34
00:02:32,865 --> 00:02:37,727
And what this means is,
we have the data set defined

35
00:02:37,925 --> 00:02:41,475
with its own fields,
and the electrophysiology data set

36
00:02:41,684 --> 00:02:45,308
extends the data set,
that means it inherits

37
00:02:45,616 --> 00:02:48,604
the category fields,
the name fields

38
00:02:48,809 --> 00:02:52,834
and in addition
it brings a stimuli field.

39
00:02:53,036 --> 00:02:57,136
So that allows you to build
a hierarchy of entities

40
00:02:57,342 --> 00:03:01,467
that borrow information
from one and other

41
00:03:01,665 --> 00:03:05,890
and organize your domain
in a very logical way.

42
00:03:06,637 --> 00:03:10,362
So, that's my second point,
entities can extend each other.

43
00:03:10,587 --> 00:03:14,075
All entities can be used
in provenance, however

44
00:03:14,271 --> 00:03:19,446
it is not mandatory if all you
wanted was to create a few

45
00:03:19,658 --> 00:03:22,658
electrophysiology data sets
and save them into the system

46
00:03:22,881 --> 00:03:26,393
without referring to any
provenance information

47
00:03:26,589 --> 00:03:29,939
you could do it, we do not force
you to save the provenance.

48
00:03:30,173 --> 00:03:33,435
Now, we do believe that
adding provenance information

49
00:03:33,628 --> 00:03:36,390
does increase the value
of your data sets

50
00:03:36,566 --> 00:03:41,279
does give a lot of context
to potential users of your data sets

51
00:03:41,492 --> 00:03:43,654
and allows them to build trust

52
00:03:43,870 --> 00:03:46,507
in what you're generating
by being transparent

53
00:03:46,716 --> 00:03:48,503
about the protocols you have used

54
00:03:48,685 --> 00:03:52,660
what specific mouse
or rat you have been using

55
00:03:52,889 --> 00:03:56,226
how have you extracted your slices,
and so on and so forth.

56
00:03:56,436 --> 00:04:00,586
So you can push your
entities into the platform

57
00:04:00,792 --> 00:04:05,292
and at a later stage you can also
involve them in provenance.

58
00:04:05,477 --> 00:04:10,789
There's no constrain there,
you can do it at a later stage.

59
00:04:12,393 --> 00:04:14,668
So, the second thing
you have to do

60
00:04:14,892 --> 00:04:17,355
and I guess I want to
be ahead of myself by

61
00:04:17,614 --> 00:04:21,414
designing this example
is to define the properties

62
00:04:21,718 --> 00:04:24,093
of your entity.

63
00:04:24,346 --> 00:04:30,121
And you really have to think of it
as what questions do you want to ask

64
00:04:30,340 --> 00:04:33,678
the system, the platform,
about your entities. 

65
00:04:33,998 --> 00:04:40,848
And thinking of it in this way
the listing of all the properties

66
00:04:41,041 --> 00:04:46,216
necessary in your entities are going
to become a lot more intuitive

67
00:04:46,457 --> 00:04:50,070
because, in order to ask
a question about:

68
00:04:50,255 --> 00:04:55,855
"Give me all electrophysiology
recording that has a stimuli

69
00:04:56,043 --> 00:05:03,781
called IDrest", which is a type
of stimuli or a square ,

70
00:05:04,050 --> 00:05:06,450
and obviously you need
to capture this information

71
00:05:06,632 --> 00:05:08,782
in the meta data of your entities,

72
00:05:08,975 --> 00:05:13,100
it becomes obvious that you need
to create a property that is stimuli

73
00:05:13,305 --> 00:05:18,317
and if the community has already
defined an ontology that described

74
00:05:18,510 --> 00:05:20,323
this stimuli,
let's import it

75
00:05:20,517 --> 00:05:22,367
because let's speak
the same language

76
00:05:22,557 --> 00:05:25,295
it makes everybody's job
a lot simpler

77
00:05:25,573 --> 00:05:30,785
and maybe if the specific property
you want to use doesn't have

78
00:05:30,971 --> 00:05:33,671
a well-known vocabulary defined

79
00:05:33,875 --> 00:05:36,850
then let's define it
and import it into the platform.

80
00:05:37,311 --> 00:05:42,649
So, that's the way we like
to approach the property definition

81
00:05:42,836 --> 00:05:45,836
of entities, and we find that
it works really well.

82
00:05:46,018 --> 00:05:49,268
So, what can you put
into a property?

83
00:05:49,504 --> 00:05:52,379
What can this be,
what types can we give them?

84
00:05:52,585 --> 00:05:56,297
We can have literal types,
and by literal we mean

85
00:05:56,504 --> 00:06:01,417
simply integers,
floating point values, strings.

86
00:06:01,612 --> 00:06:06,699
We can have structured objects,
which themselves can be defined

87
00:06:06,929 --> 00:06:12,054
with their own schemas
and registered into the platform

88
00:06:12,261 --> 00:06:15,511
we're going to look at
specific examples of that later

89
00:06:15,719 --> 00:06:18,931
and finally,
this is an important one

90
00:06:19,158 --> 00:06:21,608
we can use ontology terms.

91
00:06:21,835 --> 00:06:25,460
And we're going to expand
a little bit in a later slide

92
00:06:25,649 --> 00:06:28,649
on ontologies and why
are they so useful there.

93
00:06:30,132 --> 00:06:33,132
Finally, you can define
Semantic constrains.

94
00:06:34,394 --> 00:06:37,331
So this is really what
you want to enforce

95
00:06:37,540 --> 00:06:41,152
when someone submits an entity,
one of such entities 

96
00:06:41,341 --> 00:06:44,653
into the system,
so an instance of that entity,

97
00:06:44,892 --> 00:06:48,104
what do you want
the platform to check for you?

98
00:06:48,285 --> 00:06:52,260
and maybe complain if
one of these rules is broken

99
00:06:52,453 --> 00:06:53,703
so that the user knows:

100
00:06:53,913 --> 00:06:56,575
"We were expecting you to define it
in this way and not in that way."

101
00:06:56,772 --> 00:06:58,334
"Please, fix it."

102
00:06:58,537 --> 00:07:02,862
So it is really your gatekeeper when
registering data into the platform.

103
00:07:03,074 --> 00:07:05,836
What is at your disposal here?

104
00:07:06,032 --> 00:07:11,307
You can use enumerations,
so sets of strict values

105
00:07:11,492 --> 00:07:17,242
that you must use to fill
one of these properties.

106
00:07:17,435 --> 00:07:20,435
You can have numerical ranges, like

107
00:07:20,642 --> 00:07:23,817
it has to be a value between
zero and ten and nothing else.

108
00:07:24,010 --> 00:07:26,297
If someone submits
an instance with a value eleven

109
00:07:26,487 --> 00:07:27,375
the system will say:

110
00:07:27,551 --> 00:07:32,314
"Sorry, you broke that rule, fix it,
then you will be able to save it."

111
00:07:33,185 --> 00:07:37,310
And finally you can
give specific entity types.

112
00:07:37,535 --> 00:07:42,048
So when I said you can use
structured objects

113
00:07:42,541 --> 00:07:49,478
this semantic constrain can then
show that the value you've provided

114
00:07:49,670 --> 00:07:52,720
to this kind of structured
object properties

115
00:07:52,950 --> 00:07:55,300
does match the expected types.

116
00:07:55,479 --> 00:07:59,716
Also, if you use ontology terms,
it can make sure that you use

117
00:07:59,926 --> 00:08:04,913
the term that really belongs
to the defined ontology.

118
00:08:05,757 --> 00:08:10,657
And finally, it may, and I say may,
because some entities will have

119
00:08:10,861 --> 00:08:13,861
raw data attached,
like an electrophysiology recording

120
00:08:14,081 --> 00:08:17,081
but some other entities
will not have any raw data

121
00:08:17,287 --> 00:08:19,462
directly attached,
for instance, a neuron.

122
00:08:19,665 --> 00:08:22,665
A neuron by itself
is a logical entity

123
00:08:22,897 --> 00:08:25,285
it doesn't have raw data.

124
00:08:25,470 --> 00:08:29,232
It can be derived into a data set
that itself has raw data.

125
00:08:29,452 --> 00:08:35,427
So you have to make this decision,
as to whether your entity has

126
00:08:35,620 --> 00:08:38,870
or has no raw data attached.

127
00:08:39,221 --> 00:08:45,609
But it is just a simple tick box,
you have to tick or not.

