1
00:00:05,706 --> 00:00:09,844
In this part, we're going to
focus on designing a provenance

2
00:00:10,042 --> 00:00:10,879
entity.

3
00:00:11,079 --> 00:00:13,542
So we've seen that
the platform does allow you

4
00:00:13,758 --> 00:00:15,071
to do these kinds of things.

5
00:00:15,265 --> 00:00:17,128
Now, how do you do it in practice?

6
00:00:17,323 --> 00:00:20,748
And again, I will not get into
technical detail of actually writing

7
00:00:20,967 --> 00:00:26,167
an entity in this lecture, but
just how does an entity look like.

8
00:00:27,493 --> 00:00:30,055
The most important thing
is to give it a name

9
00:00:30,265 --> 00:00:33,552
and it sounds like a very
simple thing to say but

10
00:00:33,743 --> 00:00:37,268
naming things appropriately,
meaningfully,

11
00:00:37,472 --> 00:00:42,559
so that the community can
refer to it and understand very

12
00:00:42,768 --> 00:00:47,193
easily what your entity is
is extremely important.

13
00:00:47,408 --> 00:00:53,595
So naming your entity something that
is understood by everyone around

14
00:00:53,806 --> 00:00:56,806
is going to help a lot.

15
00:00:57,059 --> 00:01:01,159
So, like I said, you're going
to define it through a schema

16
00:01:01,422 --> 00:01:05,885
and you have the ability to extend
entities from one and other.

17
00:01:06,079 --> 00:01:10,979
So I gave already an example,
which is extending the generic

18
00:01:11,177 --> 00:01:17,590
provenance entity defined by
the W3C Prov to define your own

19
00:01:17,812 --> 00:01:21,124
but for instance,
I'll take an example

20
00:01:21,357 --> 00:01:29,007
you have defined a data set entity

21
00:01:31,530 --> 00:01:36,667
and say that the data set
has a category which is

22
00:01:36,899 --> 00:01:40,324
an ontology term, it has a name.

23
00:01:41,995 --> 00:01:43,207
This is fine.

24
00:01:43,460 --> 00:01:47,248
Now I took earlier an example
of an electro physiology

25
00:01:47,458 --> 00:01:52,258
data set and we have briefly
discussed that this type of data set

26
00:01:52,458 --> 00:01:56,645
has also another piece
of information that is

27
00:01:56,854 --> 00:02:03,554
the Stimuli that was used to
stimulate the specific neuron

28
00:02:03,779 --> 00:02:06,779
in order to observe
it's electrical response.

29
00:02:07,145 --> 00:02:09,282
So, this is also a data set.

30
00:02:09,497 --> 00:02:12,498
It is an electro-physiology
data set.

31
00:02:12,702 --> 00:02:15,702
And so at this stage what
you could do is to extend

32
00:02:16,051 --> 00:02:19,051
the data set

33
00:02:20,292 --> 00:02:25,542
and we'll write it if is,
for the sake of writing it showed

34
00:02:25,971 --> 00:02:28,971
and at this stage I could define


35
00:02:30,351 --> 00:02:34,313
a stimuli property,
and what this means is

36
00:02:34,755 --> 00:02:39,417
we have the data set
defined with it's own fields

37
00:02:39,696 --> 00:02:43,771
and the electro-physiology data set
extends the data set, that means

38
00:02:43,989 --> 00:02:49,902
it inherits the category fields,
the name fields, and in addition

39
00:02:50,120 --> 00:02:52,657
it brings a stimuli field.

40
00:02:52,864 --> 00:02:57,139
So that allows you to
build a hierarchy of entities

41
00:02:57,355 --> 00:03:02,517
that borrow information from
one and other and organize

42
00:03:02,712 --> 00:03:06,074
your domain in a very logical way.

43
00:03:06,804 --> 00:03:10,204
So, that's my second point,
entities can extend each other.

44
00:03:10,438 --> 00:03:14,325
All entities can be used
in provenance, however

45
00:03:14,565 --> 00:03:19,577
it is not mandatory if all you
wanted was to create a few

46
00:03:19,761 --> 00:03:22,724
electro-physiology data sets
and save them into the system

47
00:03:22,939 --> 00:03:26,489
without referring to any
provenance information

48
00:03:26,678 --> 00:03:29,815
you could do it, we do not force
you to save provenance.

49
00:03:30,052 --> 00:03:33,614
Now we do believe that
adding provenance information

50
00:03:33,815 --> 00:03:36,377
does increase
the value of the data sets,

51
00:03:36,558 --> 00:03:41,246
does give a lot of context to
potential users of your data sets,

52
00:03:41,443 --> 00:03:44,318
and allows them to
build trust in what

53
00:03:44,518 --> 00:03:46,393
you're generating
by being transparent

54
00:03:46,589 --> 00:03:51,827
about the protocoles you have used,
what specific mouse or rat you have

55
00:03:52,084 --> 00:03:54,622
been using, how you
have extracted your slices

56
00:03:54,882 --> 00:03:56,519
and so on, and so forth.

57
00:03:56,731 --> 00:04:00,394
So, you can push your
entities into the platform

58
00:04:00,592 --> 00:04:05,317
and at the later stage you can
also involve them in provenance

59
00:04:05,517 --> 00:04:10,767
there's no constrain there,
you can do it at the later stage.

60
00:04:11,939 --> 00:04:15,064
So the second thing
you have to do, and I guess

61
00:04:15,250 --> 00:04:18,650
I want to be ahead of myself
by designing this example

62
00:04:18,833 --> 00:04:23,933
is to define the properties
of your entity.

63
00:04:24,209 --> 00:04:30,009
And really you have to think of it
as what questions do you want to ask

64
00:04:30,219 --> 00:04:33,831
the system, the platform,
about your entities

65
00:04:34,030 --> 00:04:40,767
and thinking of it in this way
the listing of all the properties

66
00:04:40,956 --> 00:04:45,656
necessary in your entities
is going to become a lot more

67
00:04:45,877 --> 00:04:49,302
intuitive, because, okay,
in order to as a question

68
00:04:49,519 --> 00:04:53,719
about:"Give me all
electro-physiology recording"

69
00:04:53,938 --> 00:04:57,475
"that have a stimuli
called ID Rest"

70
00:04:57,661 --> 00:05:03,124
which is a type of stimuli
or a square simulation...

71
00:05:03,342 --> 00:05:07,505
and obviously you need to capture
this information in the meta data

72
00:05:07,711 --> 00:05:08,736
of your entities.

73
00:05:08,943 --> 00:05:11,168
It becomes obvious that
you need to create

74
00:05:11,349 --> 00:05:15,261
a property that is stimuli,
and if the community

75
00:05:15,517 --> 00:05:18,517
has already defined
an ontology that's described

76
00:05:18,742 --> 00:05:20,304
this stimuli,
let's import it

77
00:05:20,514 --> 00:05:22,389
because let's speak
the same language

78
00:05:22,577 --> 00:05:25,489
it makes everybody's
job a lot simpler.

79
00:05:25,704 --> 00:05:29,992
And maybe if the specific
property you want to use

80
00:05:30,182 --> 00:05:33,294
doesn't have a well know
vocabulary defined,

81
00:05:33,506 --> 00:05:36,993
then let's define it
and import it into the platform !

82
00:05:37,529 --> 00:05:42,492
So, that's the way we like
to approach property definition

83
00:05:42,697 --> 00:05:45,697
of entities,
and it works really well.

84
00:05:46,033 --> 00:05:49,033
So what can you put into a property?

85
00:05:49,399 --> 00:05:52,399
What can this be,
what types can we give them?

86
00:05:52,637 --> 00:05:56,062
We can have literal types,
and by literal we mean

87
00:05:56,268 --> 00:05:59,880
simply integers,
floating point values

88
00:06:00,086 --> 00:06:05,161
strings, we can have structured
objects which themselves

89
00:06:05,355 --> 00:06:10,305
can be defined with
their own schemas

90
00:06:10,486 --> 00:06:12,248
and registered into the platform

91
00:06:12,441 --> 00:06:15,441
we're going to look at some
specific examples of that later

92
00:06:15,670 --> 00:06:18,920
and finally, and this
is an important one

93
00:06:19,158 --> 00:06:21,571
we can use ontology terms.

94
00:06:21,802 --> 00:06:25,277
And we're going to expand
a little bit in a later slide

95
00:06:25,481 --> 00:06:29,743
on ontologies and why
they are so useful there.

96
00:06:30,234 --> 00:06:33,009
Finally you can define
semantic constrains

97
00:06:33,203 --> 00:06:37,428
so this is really what
you want to enforce.

98
00:06:37,651 --> 00:06:41,114
When someone submits
an entity, one of such entity

99
00:06:41,303 --> 00:06:44,641
into the system,
so an instance of that entity.

100
00:06:44,961 --> 00:06:48,148
What do you want
the platform to check for you?

101
00:06:49,167 --> 00:06:52,167
Maybe complain if one
of these is broken

102
00:06:52,440 --> 00:06:54,752
so that the user knows,
where we were expecting you

103
00:06:54,945 --> 00:06:56,795
to define it in this way
and not in that way.

104
00:06:56,995 --> 00:07:00,245
Please, fix it, it is
your gate-keeper really

105
00:07:00,436 --> 00:07:02,911
when registering
data into the platform.

106
00:07:03,116 --> 00:07:06,816
So, what is at your
disposal here: you can use

107
00:07:07,002 --> 00:07:19,015
enumerations, so sets of
strict values that you must use

108
00:07:19,228 --> 00:07:22,078
to fill one of these property 
you can have numerical ranges like


109
00:07:22,266 --> 00:07:23,716
it has to be a value between 
zero and ten, and nothing else.

110
00:07:23,921 --> 00:07:26,383
If someone submits
an instance with the value 11

111
00:07:26,593 --> 00:07:29,180
the system will say:
"I'm sorry, you broke that rule."

112
00:07:29,381 --> 00:07:32,381
"Fix it and then you
will be able to save it."

113
00:07:33,110 --> 00:07:37,235
And finally you can
give specific entity types

114
00:07:37,473 --> 00:07:42,036
so when I said you can use
structured object

115
00:07:42,948 --> 00:07:49,311
this semantic constraint can
show the value you have provided

116
00:07:49,491 --> 00:07:51,279
to this kind of structured object

117
00:07:51,464 --> 00:07:55,389
properties does match
the expected types.

118
00:07:55,628 --> 00:08:00,065
Also if you use ontology terms it
can make sure that you use a term

119
00:08:00,271 --> 00:08:05,258
that is really belonging
to the defined ontology.

120
00:08:05,935 --> 00:08:11,898
And finally... Because some
entities will have raw data attached

121
00:08:12,091 --> 00:08:13,966
like an electro physiology recording

122
00:08:14,153 --> 00:08:17,266
but some of the entities
will not have any raw data

123
00:08:17,484 --> 00:08:19,434
directly attached,
for instance, a neuron.

124
00:08:19,643 --> 00:08:24,956
A neuron by itself is a logical
entity, it doesn't have raw data,

125
00:08:25,160 --> 00:08:28,372
now, it can be derived
into a data set itself

126
00:08:28,643 --> 00:08:32,768
as raw data, so you also have
to make this decision

127
00:08:32,956 --> 00:08:37,156
as to whether your
entity has or has not

128
00:08:37,353 --> 00:08:39,191
raw data attached.

129
00:08:39,382 --> 00:08:44,882
But it is just a simple check box,
you have to click or not.

