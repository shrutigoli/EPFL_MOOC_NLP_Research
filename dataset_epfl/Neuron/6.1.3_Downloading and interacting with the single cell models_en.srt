1
00:00:05,363 --> 00:00:08,363
So now, let's switch
back to the Jupyter notebook

2
00:00:08,581 --> 00:00:10,681
provided for this tutorial.

3
00:00:10,872 --> 00:00:13,009
Like I said we will
actually download

4
00:00:13,196 --> 00:00:15,433
the model from the MNC portal

5
00:00:15,649 --> 00:00:18,649
and we can actually do
this from inside this notebook

6
00:00:19,006 --> 00:00:22,006
but first we will import
some useful Python modules

7
00:00:22,235 --> 00:00:27,222
like "matplotlib", "urllib",
"zipfile", so we can download

8
00:00:27,427 --> 00:00:31,265
the model file from the MNC portal

9
00:00:31,480 --> 00:00:34,417
and also do some
plotting and things like that.

10
00:00:34,631 --> 00:00:37,731
So we can you
the "urllib" to download

11
00:00:37,934 --> 00:00:40,772
the model from
the MNC portal website.

12
00:00:40,961 --> 00:00:47,449
This is the URL provided by
the MNC portal and we tell "urllib"

13
00:00:47,669 --> 00:00:50,569
to save it in a zip file
on our local disk.

14
00:00:50,812 --> 00:00:54,062
So when we execute this line
the zip file will be saved

15
00:00:54,255 --> 00:00:59,755
and then we can use the "zipfile"
module of Python to actually

16
00:00:59,968 --> 00:01:03,393
extract this zip file
also to the disk.

17
00:01:03,595 --> 00:01:07,020
So we say here, open the zip file

18
00:01:07,207 --> 00:01:10,919
and extract everything
to the current directory.

19
00:01:11,809 --> 00:01:14,209
Now that we have
downloaded the electrical model

20
00:01:14,399 --> 00:01:17,436
we change the directory
of our simulator to

21
00:01:17,627 --> 00:01:21,152
the particular directory provided
by the model packages.

22
00:01:21,348 --> 00:01:24,036
Which is this one here,
and so be careful

23
00:01:24,220 --> 00:01:26,020
once you execute this line here

24
00:01:26,191 --> 00:01:28,153
don't execute
the lines above anymore

25
00:01:28,333 --> 00:01:32,808
because it will create a new
sub-sub-directory of the filed

26
00:01:33,010 --> 00:01:36,247
we have created, so that's not
a good idea because it will

27
00:01:36,487 --> 00:01:38,975
use lots of disk space.

28
00:01:39,622 --> 00:01:41,422
So the model
contains some MOD files

29
00:01:41,615 --> 00:01:44,678
we describe the extensions
to the NEURON simulator

30
00:01:44,852 --> 00:01:47,852
mechanisms that
are used in this model.

31
00:01:48,493 --> 00:01:50,381
As you have seen in
the previous tutorial

32
00:01:50,572 --> 00:01:55,384
you can run the NRNIV model command
to compile all these MOD files.

33
00:01:56,373 --> 00:01:59,373
And you can see if there was
a success if you go to the bottom

34
00:01:59,564 --> 00:02:06,014
of this page, and it successfully
created the special file.

35
00:02:07,782 --> 00:02:10,045
So now, let's also visualize
the morphology.

36
00:02:10,244 --> 00:02:13,669
Just as in other tutorials
we will use the Neuron M package

37
00:02:13,866 --> 00:02:16,866
to show an image of
the morphology.

38
00:02:17,092 --> 00:02:21,492
So we just pick the file where
this morphology is stored

39
00:02:21,688 --> 00:02:24,688
with these specific package,
so that's this one here

40
00:02:24,867 --> 00:02:27,867
and we load it in the Neuron M.

41
00:02:28,172 --> 00:02:30,709
Now we're going to
initialize the model.

42
00:02:30,906 --> 00:02:34,068
This package contains some
custom code that is

43
00:02:34,276 --> 00:02:37,313
very specific for this model,
and it can be loaded 

44
00:02:37,512 --> 00:02:40,512
by the loading
the "init.hoc" file in NEURON

45
00:02:40,766 --> 00:02:44,766
So NEURON has this command
"Load File" which basically

46
00:02:44,977 --> 00:02:48,377
allows you to load a custom
HOC file.

47
00:02:49,983 --> 00:02:52,795
So now we're going
to initialize the model.

48
00:02:52,985 --> 00:02:59,697
There is a specific custom code
made for this model that contains

49
00:02:59,877 --> 00:03:04,740
all kind of useful functions,
they all start in the HOC file

50
00:03:04,930 --> 00:03:06,718
The "init.hoc".

51
00:03:06,919 --> 00:03:10,919
So NEURON provides a mechanism
to load one of these files with

52
00:03:11,124 --> 00:03:13,549
a "load_file" command.

53
00:03:13,727 --> 00:03:16,089
So let's do that first.

54
00:03:17,028 --> 00:03:20,028
So one of the functions this
"init.hoc" file has created is

55
00:03:20,234 --> 00:03:23,234
the "create_cell" function.

56
00:03:23,947 --> 00:03:29,785
It takes as argument of one or zero,
give one as arguments you will

57
00:03:29,987 --> 00:03:32,987
load all the synapses.

58
00:03:34,217 --> 00:03:37,217
So we also execute this command.

59
00:03:37,882 --> 00:03:39,995
So once this function
has been called

60
00:03:40,180 --> 00:03:43,442
there is a new global object
generated inside of NEURON

61
00:03:43,663 --> 00:03:47,113
which is called "cell",
so you can access this

62
00:03:47,392 --> 00:03:51,004
by calling "nrn.h.cell"

63
00:03:52,467 --> 00:03:56,904
and we'll assign this to
a Python variables, again "cell"

64
00:03:57,123 --> 00:04:00,411
and we also create a Python
variable for the soma.

65
00:04:00,618 --> 00:04:02,530
So the soma in this case
is a little array

66
00:04:02,714 --> 00:04:05,601
there is only one element
inside this array

67
00:04:05,784 --> 00:04:09,922
so we take the first element
and assign it to the soma variable.

