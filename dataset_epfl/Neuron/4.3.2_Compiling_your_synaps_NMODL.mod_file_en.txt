Now that we've defined our "MOD" file it needs to be compiled such that it can be used in NEURON.
NEURON provides a tool called "nrnivmodl" which has the following syntax.
"Nrnivmodl" and then a directory.
Invocation will compile all
MOD files found in the directory if specified, otherwise it will compile
MOD files in the current directory.
Our MOD file is located in the "mechanisms" so we will compile it as follows.
Note, the exclamation mark is used to invoke system call outside Python, as this application is external to the Jupyter framework.
Let's execute this statement.
Here's the output of the statement, as you can see it is executing a series of compilation steps, note the successful completion of the compilation.
It's important to verify that the compilation is successfully completed if any error messages are generated, then something may be wrong in your MOD file program, double-check your MOD file and try again, in such a case.
Now, let's try our new synapse model out.
If your mod files are compiled before you import NEURON
NEURON will load your compiled models automatically if they are in your local directory.
In our case, because we invoked "Nrnivmodl" in the current directory, they will be found automatically.
Let's proceed with the initialization steps as seen here.
More explicitly, we're importing
NEURON which will trigger the loading of the MOD files as compiled above we're importing "numpy" and "matplotlib" for a numerical analysis and plotting and we're initializing the neuron environment as you have seen in the previous tutorials.
It's important to know that, if you forget to compile your
MOD files before importing NEURON, you can trigger NEURON to load them as follows.
Note, this command can only be executed once for a given directory of MOD files.
Executing it a second time will will crash your Jupyter kernel.
As seen here.
As we execute the statement the kernel will crash.
To recover from this we don't have to recompile this step.
But we do have to re-execute this line.
Let's comment that line out to ensure we don't crash our kernel again.
