1
00:00:05,274 --> 00:00:06,836
So in the previous part,

2
00:00:07,024 --> 00:00:09,162
we extracted some basic morphometrics

3
00:00:09,337 --> 00:00:10,512
from the neuron.

4
00:00:10,712 --> 00:00:11,637
What we’re gonna do

5
00:00:11,824 --> 00:00:13,425
in this part is perform

6
00:00:13,625 --> 00:00:15,562
some statistics on the morphometrics

7
00:00:15,737 --> 00:00:17,224
that we extracted before,

8
00:00:17,836 --> 00:00:19,812
and those can be basic statistics

9
00:00:20,012 --> 00:00:20,875
such as the average

10
00:00:21,075 --> 00:00:22,949
or the variance within a feature

11
00:00:23,536 --> 00:00:25,599
but that is not always sufficient.

12
00:00:25,787 --> 00:00:27,175
So what we want to do

13
00:00:27,375 --> 00:00:28,900
is also to draw the distribution

14
00:00:29,100 --> 00:00:31,562
to get an idea about the whole say.

15
00:00:32,212 --> 00:00:33,737
In order to do that,

16
00:00:33,925 --> 00:00:36,612
we will use some basic Python modules.

17
00:00:37,325 --> 00:00:38,737
After that, we will be able

18
00:00:38,924 --> 00:00:40,024
to compute features

19
00:00:40,224 --> 00:00:41,312
between different neurons

20
00:00:41,512 --> 00:00:44,187
or either different types of trees.

21
00:00:44,387 --> 00:00:45,336
So now that we have

22
00:00:45,523 --> 00:00:46,837
extracted our features,

23
00:00:47,037 --> 00:00:48,087
we can perform

24
00:00:48,287 --> 00:00:49,674
some statistics on them.

25
00:00:50,162 --> 00:00:52,262
What we’re gonna need for that

26
00:00:52,462 --> 00:00:55,787
is "numpy" which is a

27
00:00:56,524 --> 00:00:58,762
mathematical module of Python.

28
00:01:01,224 --> 00:01:02,999
So numpy has available

29
00:01:03,199 --> 00:01:06,562
a lot of the basic statistical functions

30
00:01:06,762 --> 00:01:08,124
that you might want to perform

31
00:01:08,324 --> 00:01:09,199
on your features,

32
00:01:09,937 --> 00:01:11,799
so that would be the sum

33
00:01:12,724 --> 00:01:13,912
and then you can compute

34
00:01:14,112 --> 00:01:14,674
the total length

35
00:01:14,874 --> 00:01:15,949
that we've seen before,

36
00:01:17,187 --> 00:01:18,999
or the mean volume,  

37
00:01:19,436 --> 00:01:21,062
or the standard deviation,

38
00:01:21,674 --> 00:01:23,374
minimum or maximum.

39
00:01:25,549 --> 00:01:27,912
So just by using numpy dot

40
00:01:28,112 --> 00:01:31,024
and then minimum, maximum

41
00:01:31,949 --> 00:01:33,274
standard deviation,

42
00:01:34,449 --> 00:01:36,362
you can get all the values

43
00:01:36,912 --> 00:01:39,087
that might be interesting.

44
00:01:40,411 --> 00:01:42,512
So now that you’ve extracted

45
00:01:43,087 --> 00:01:45,262
your feature, we can perform

46
00:01:45,462 --> 00:01:46,937
some statistical analysis.

47
00:01:48,037 --> 00:01:50,212
To do so, we will use numpy,

48
00:01:50,412 --> 00:01:53,412
a module that is available in Python.

49
00:01:54,524 --> 00:01:57,824
So we import numpy and then,

50
00:01:59,024 --> 00:02:01,087
we can start performing

51
00:02:01,287 --> 00:02:03,587
some statistics on our section lengths.

52
00:02:04,224 --> 00:02:06,049
So the first one is the sum,

53
00:02:06,924 --> 00:02:09,037
this will sum up all the section lengths

54
00:02:09,237 --> 00:02:10,449
so we can get the total length

55
00:02:10,649 --> 00:02:11,462
of the neuron.

56
00:02:12,949 --> 00:02:15,499
Same way, we can get the mean volume

57
00:02:15,699 --> 00:02:17,311
or the standard deviation,

58
00:02:17,511 --> 00:02:20,124
or the minimum, and maximum

59
00:02:20,587 --> 00:02:21,937
of the section lengths,

60
00:02:22,837 --> 00:02:24,886
and if we run this command,

61
00:02:26,086 --> 00:02:28,449
we can print all those

62
00:02:28,649 --> 00:02:30,374
interesting statistics

63
00:02:30,574 --> 00:02:32,024
on the section lengths

64
00:02:32,224 --> 00:02:33,637
that we’ve computed before.

65
00:02:34,362 --> 00:02:36,399
So now you might wanna go

66
00:02:36,599 --> 00:02:37,774
into more details

67
00:02:37,974 --> 00:02:39,274
and perform statistics

68
00:02:40,662 --> 00:02:42,899
on the individual parts of the neuron.

69
00:02:43,699 --> 00:02:46,224
So before we have been working

70
00:02:46,424 --> 00:02:47,449
with a whole neuron,

71
00:02:48,274 --> 00:02:49,899
now we’re concentrating

72
00:02:50,099 --> 00:02:51,349
on the individual parts

73
00:02:51,549 --> 00:02:52,987
which is basal dendrites,

74
00:02:53,187 --> 00:02:55,062
apical dendrites, and axons.

75
00:02:56,412 --> 00:02:59,087
To do so, we have to select

76
00:02:59,287 --> 00:03:00,412
the neurite type.

77
00:03:01,062 --> 00:03:02,700
So it’s exactly what we did before

78
00:03:03,412 --> 00:03:06,387
but we add an option neurite type

79
00:03:06,587 --> 00:03:10,100
equals neuron dot basal dendrite.

80
00:03:11,975 --> 00:03:13,162
So that will give you

81
00:03:14,287 --> 00:03:15,150
the section length

82
00:03:15,350 --> 00:03:17,000
of the basal dendrites.

83
00:03:19,825 --> 00:03:20,962
And then you can do exactly

84
00:03:21,162 --> 00:03:23,350
the same for the apical dendrites

85
00:03:26,187 --> 00:03:27,287
and the axons.

86
00:03:28,175 --> 00:03:29,675
So you just have to choose

87
00:03:29,875 --> 00:03:32,075
the correct neuron type

88
00:03:34,175 --> 00:03:36,225
and you can play with the morphometrics

89
00:03:36,425 --> 00:03:38,250
of individual parts of the neuron.

90
00:03:39,200 --> 00:03:40,612
So now we can compare

91
00:03:41,587 --> 00:03:42,825
the morphometrics

92
00:03:43,025 --> 00:03:44,175
that we have extracted

93
00:03:44,375 --> 00:03:46,250
for the three different types of trees.

94
00:03:48,237 --> 00:03:49,912
So exactly as we did before,

95
00:03:50,112 --> 00:03:52,699
we can use numpy dot sum

96
00:03:53,786 --> 00:03:56,375
to get the values of the total length

97
00:03:56,575 --> 00:03:58,287
of the three different tree types.

98
00:03:59,975 --> 00:04:01,425
And as you can see,

99
00:04:01,625 --> 00:04:03,612
the axons are much longer

100
00:04:03,812 --> 00:04:04,962
than both the apical

101
00:04:05,162 --> 00:04:06,200
and the basal dendrites.

102
00:04:07,262 --> 00:04:09,236
Even though the basal dendrites

103
00:04:09,736 --> 00:04:10,850
are many more,

104
00:04:11,050 --> 00:04:13,175
you only have one apical dendrite

105
00:04:13,375 --> 00:04:14,574
and one axon,

106
00:04:14,924 --> 00:04:16,487
but still the total length

107
00:04:16,687 --> 00:04:19,737
of the basal dendrites is much lower

108
00:04:20,325 --> 00:04:22,362
because they just stay locally.

109
00:04:22,562 --> 00:04:23,837
The axons are reaching

110
00:04:24,037 --> 00:04:26,412
much further regions

111
00:04:26,612 --> 00:04:28,587
and so are the apical dendrites.

112
00:04:30,025 --> 00:04:31,125
So now we can compute

113
00:04:31,325 --> 00:04:33,725
the average length of each tree type.

114
00:04:34,925 --> 00:04:37,399
We do that using numpy once again

115
00:04:37,987 --> 00:04:39,175
but now we’re gonna use

116
00:04:39,375 --> 00:04:41,099
numpy dot average.

117
00:04:43,525 --> 00:04:47,212
So if we do this, we get three values

118
00:04:48,800 --> 00:04:50,962
for the different tree types.

119
00:04:51,700 --> 00:04:53,487
As you can see, the differences 

120
00:04:53,687 --> 00:04:55,400
are not as large

121
00:04:55,600 --> 00:04:58,174
as the total length differences.

122
00:04:58,925 --> 00:05:00,425
So now we are going to compute

123
00:05:00,625 --> 00:05:03,012
the averages of the section lengths

124
00:05:03,212 --> 00:05:05,025
for those three tree types.

125
00:05:05,950 --> 00:05:08,624
We do so using numpy once again,

126
00:05:08,974 --> 00:05:10,212
but now we’re gonna do

127
00:05:10,412 --> 00:05:13,875
numpy dot average. So if we do so,

128
00:05:15,362 --> 00:05:17,362
we get the average value

129
00:05:17,562 --> 00:05:18,737
of the section length

130
00:05:18,937 --> 00:05:21,137
for those three different tree types.

131
00:05:22,736 --> 00:05:23,850
As you can see,

132
00:05:24,050 --> 00:05:27,050
the differences are not as large

133
00:05:27,250 --> 00:05:28,875
as the total length differences

134
00:05:29,775 --> 00:05:31,625
which indicates that even though

135
00:05:31,825 --> 00:05:34,825
the extend, the total extend

136
00:05:35,025 --> 00:05:36,650
of the trees is so different,

137
00:05:36,850 --> 00:05:39,850
the individual sections are comparable.

138
00:05:43,712 --> 00:05:45,275
So now that we have extracted

139
00:05:45,475 --> 00:05:47,162
our morphological feature,

140
00:05:48,162 --> 00:05:49,237
we might wanna go

141
00:05:49,437 --> 00:05:50,875
and plot the distribution.

142
00:05:52,000 --> 00:05:54,075
This will give us a much better picture

143
00:05:54,275 --> 00:05:56,400
of the overall profile of the feature.

144
00:05:57,637 --> 00:05:59,100
It is also very useful

145
00:05:59,300 --> 00:06:01,087
if we want to compare features:

146
00:06:01,287 --> 00:06:03,550
so if you want to compare

147
00:06:03,750 --> 00:06:05,675
a neuron to a different neuron,

148
00:06:05,875 --> 00:06:08,200
or a tree type to a different tree type.

149
00:06:09,612 --> 00:06:12,187
So the first function we’re gonna use

150
00:06:12,387 --> 00:06:16,024
is a histogram. To do that,

151
00:06:16,562 --> 00:06:19,100
we will use the hist from Pylab

152
00:06:19,300 --> 00:06:20,862
that we have imported before.

153
00:06:22,875 --> 00:06:25,037
So we do "pylab dot hist"

154
00:06:25,912 --> 00:06:27,162
of our section lengths

155
00:06:27,362 --> 00:06:28,362
that we have extracted,

156
00:06:31,062 --> 00:06:33,225
and this gives us this distribution.

157
00:06:34,937 --> 00:06:36,537
However, as you can see,

158
00:06:36,737 --> 00:06:38,661
the tail of the distribution

159
00:06:38,874 --> 00:06:40,837
is not very well defined

160
00:06:41,274 --> 00:06:42,487
and that is because

161
00:06:42,687 --> 00:06:44,762
of the small number of bins.

162
00:06:45,662 --> 00:06:47,000
So we might wanna go

163
00:06:47,200 --> 00:06:49,075
and add more bins,

164
00:06:49,275 --> 00:06:50,961
so here we have only 10,

165
00:06:51,599 --> 00:06:53,412
let’s do 25.

166
00:06:55,612 --> 00:06:57,412
Here you get a much better picture

167
00:06:57,612 --> 00:06:58,900
of the distribution.

168
00:07:00,275 --> 00:07:01,637
Another way of presenting

169
00:07:01,837 --> 00:07:03,100
the same distribution

170
00:07:04,062 --> 00:07:06,300
is to do the cumulative plot.

171
00:07:08,337 --> 00:07:11,374
So we do "pylab dot hist" once again,

172
00:07:11,861 --> 00:07:13,500
but now we activate

173
00:07:13,700 --> 00:07:15,112
the cumulative option,

174
00:07:16,962 --> 00:07:18,237
and by doing that,

175
00:07:18,437 --> 00:07:20,462
we get a distribution that extends

176
00:07:20,662 --> 00:07:21,525
from the minimum

177
00:07:21,725 --> 00:07:23,262
to the maximum number.

178
00:07:24,750 --> 00:07:26,000
So now, we might want

179
00:07:26,200 --> 00:07:28,100
to normalize the distribution.

180
00:07:29,862 --> 00:07:31,300
As you can see here,

181
00:07:31,500 --> 00:07:33,300
you just have numbers.

182
00:07:33,500 --> 00:07:34,937
So, if you want to compare

183
00:07:35,137 --> 00:07:36,587
two different distributions

184
00:07:36,787 --> 00:07:37,850
for two different neurons,

185
00:07:38,050 --> 00:07:39,712
that’s not gonna be very helpful.

186
00:07:40,387 --> 00:07:41,912
What we want instead

187
00:07:42,111 --> 00:07:43,587
is to have percentages,

188
00:07:43,787 --> 00:07:45,249
so which percentage

189
00:07:45,462 --> 00:07:47,537
of the section lengths

190
00:07:47,737 --> 00:07:50,211
falls into each of those bins? 

191
00:07:51,549 --> 00:07:52,975
And in order to do that,

192
00:07:53,175 --> 00:07:54,362
we need to activate

193
00:07:54,562 --> 00:07:56,112
the normed function,

194
00:07:56,474 --> 00:07:58,137
the normed option

195
00:07:58,687 --> 00:08:01,012
of the histogram of pylab.

196
00:08:03,824 --> 00:08:05,375
And in order to do that,

197
00:08:05,575 --> 00:08:08,399
we wanna activate the normed option 

198
00:08:09,512 --> 00:08:12,437
of the histogram function of pylab.

199
00:08:13,612 --> 00:08:16,575
So we just select normed equals true,

200
00:08:19,375 --> 00:08:20,762
and we get the percentage

201
00:08:20,962 --> 00:08:23,262
as opposed to the absolute values

202
00:08:23,437 --> 00:08:24,400
that we got before.

203
00:08:25,787 --> 00:08:26,762
We can use that

204
00:08:26,962 --> 00:08:28,812
to compare different distributions.

205
00:08:29,600 --> 00:08:31,487
So another way of representing

206
00:08:31,687 --> 00:08:35,137
the same distribution is the boxplot,

207
00:08:35,975 --> 00:08:38,337
so we can use the boxplot function

208
00:08:38,537 --> 00:08:42,987
of pylab to generate

209
00:08:43,162 --> 00:08:44,562
an equivalent figure

210
00:08:45,087 --> 00:08:46,350
to the previous one.

211
00:08:47,175 --> 00:08:48,275
The difference here

212
00:08:48,700 --> 00:08:50,887
is that you get the medium value,

213
00:08:51,225 --> 00:08:53,524
the 50% of the data,

214
00:08:54,862 --> 00:08:58,362
then 75%, and 25%,

215
00:08:59,362 --> 00:09:01,562
and then you can see the outliers

216
00:09:01,762 --> 00:09:02,737
of the distribution.

217
00:09:03,787 --> 00:09:05,599
So this is an important feature

218
00:09:05,987 --> 00:09:08,075
to see how many outliers you have.

219
00:09:10,687 --> 00:09:12,125
Now, that we have analyzed

220
00:09:12,325 --> 00:09:13,987
our feature with a histogram,

221
00:09:14,562 --> 00:09:15,762
we wanna go and check 

222
00:09:15,962 --> 00:09:17,062
another representation

223
00:09:17,262 --> 00:09:18,275
which is a boxplot.

224
00:09:19,562 --> 00:09:22,025
So we’re gonna use "pylab dot boxplot"

225
00:09:24,100 --> 00:09:26,187
to generate the overall distribution

226
00:09:26,387 --> 00:09:28,437
of the same feature section lengths.

227
00:09:29,462 --> 00:09:31,512
The advantage of this representation

228
00:09:32,050 --> 00:09:35,225
is you don’t have to choose the bin size

229
00:09:36,362 --> 00:09:38,200
and you can get the outliers.

230
00:09:39,162 --> 00:09:40,725
So what does the boxplot means?

231
00:09:42,750 --> 00:09:44,650
This line is the medium value

232
00:09:44,850 --> 00:09:45,925
of the distribution.

233
00:09:47,200 --> 00:09:52,012
This box annotates 50% of the data.

234
00:09:52,212 --> 00:09:54,987
So 50% of the sections

235
00:09:55,187 --> 00:09:56,450
have a length that lies

236
00:09:56,650 --> 00:09:58,725
within those values.

237
00:10:00,187 --> 00:10:02,475
Then 75% of the data

238
00:10:02,675 --> 00:10:04,337
allocated in here,

239
00:10:05,375 --> 00:10:08,025
and then with the small circles

240
00:10:08,225 --> 00:10:11,012
you see the outliers of the distributions

241
00:10:11,212 --> 00:10:13,137
so this is anything that is outside

242
00:10:13,337 --> 00:10:16,337
the 75% of the distribution.

243
00:10:18,962 --> 00:10:20,762
So using the previous plots,

244
00:10:21,225 --> 00:10:22,700
the histogram and the boxplot,

245
00:10:22,900 --> 00:10:25,325
we can start comparing morphometrics

246
00:10:25,525 --> 00:10:27,187
between different tree types

247
00:10:27,387 --> 00:10:28,700
or between different neurons.

248
00:10:31,475 --> 00:10:33,287
Here, we will try to see

249
00:10:33,487 --> 00:10:34,800
what are the differences between

250
00:10:34,975 --> 00:10:36,812
the distribution of section lengths

251
00:10:37,012 --> 00:10:39,537
of basal, apicals, and axons.

252
00:10:40,312 --> 00:10:41,787
So we create a list

253
00:10:41,975 --> 00:10:45,250
with those three tree type features

254
00:10:46,249 --> 00:10:48,099
and we call once again,

255
00:10:48,299 --> 00:10:51,612
"pylab dot hist" with the same bin size

256
00:10:51,812 --> 00:10:54,112
and a normalized distribution.

257
00:10:55,074 --> 00:10:57,374
We also select the labels

258
00:10:59,074 --> 00:11:00,912
so that we can annotate

259
00:11:01,112 --> 00:11:04,112
the color of the distributions.

260
00:11:05,674 --> 00:11:06,862
In order to do that,

261
00:11:07,062 --> 00:11:08,687
we call "pylab dot legend".

262
00:11:11,074 --> 00:11:13,387
So this legend is generated

263
00:11:13,587 --> 00:11:15,424
with the labels we’ve selected,

264
00:11:17,574 --> 00:11:18,674
and then you can see

265
00:11:18,861 --> 00:11:19,999
the three different colors

266
00:11:20,199 --> 00:11:22,474
for the three different tree types.

267
00:11:23,199 --> 00:11:24,087
This is not consistent

268
00:11:24,287 --> 00:11:25,287
with the colors we chose

269
00:11:25,487 --> 00:11:27,087
because those are the colors

270
00:11:27,287 --> 00:11:29,474
of Pylab, not of NeuroM.

271
00:11:31,411 --> 00:11:33,224
So once you’ve plotted

272
00:11:33,424 --> 00:11:36,312
your distribution for the three tree types,

273
00:11:38,799 --> 00:11:39,962
you can understand more

274
00:11:40,162 --> 00:11:44,237
about the behavior of those tree types.

275
00:11:45,499 --> 00:11:46,274
For example,

276
00:11:46,474 --> 00:11:48,899
you see that you have a high peak

277
00:11:49,099 --> 00:11:50,249
for the apicals here,

278
00:11:51,412 --> 00:11:54,237
indicating that there is a high percentage

279
00:11:54,437 --> 00:11:56,724
of sections with this length.

280
00:11:58,387 --> 00:12:00,812
Similarly, you can see that sections

281
00:12:01,012 --> 00:12:05,249
of large length are merely axonal sections,

282
00:12:06,212 --> 00:12:08,899
so you were not able to get that

283
00:12:09,899 --> 00:12:11,936
just by the statistical comparison

284
00:12:12,112 --> 00:12:13,074
that we did before

285
00:12:13,899 --> 00:12:15,349
because we just computed

286
00:12:15,549 --> 00:12:16,886
the average section length.

287
00:12:17,349 --> 00:12:19,037
Now, with the distributions,

288
00:12:19,337 --> 00:12:21,037
you can get the full picture,

289
00:12:21,237 --> 00:12:24,712
and you can see at which section length

290
00:12:24,912 --> 00:12:26,711
you have the highest concentration

291
00:12:27,411 --> 00:12:28,474
for each tree type.

292
00:12:29,762 --> 00:12:30,986
Another way to compare

293
00:12:31,211 --> 00:12:33,149
the same distributions

294
00:12:33,361 --> 00:12:34,811
is to use the boxplot.

295
00:12:35,873 --> 00:12:38,173
So we do these by creating

296
00:12:38,811 --> 00:12:41,086
the same list that we did before

297
00:12:41,673 --> 00:12:43,474
for basal, apical,

298
00:12:43,674 --> 00:12:45,336
and axonal section lengths,

299
00:12:46,111 --> 00:12:48,136
but here, you have to notice yet

300
00:12:48,348 --> 00:12:50,649
that the option is labels.

301
00:12:52,236 --> 00:12:54,161
So we label once again the basal,

302
00:12:54,361 --> 00:12:56,173
the apical, and the axon trees.

303
00:12:58,186 --> 00:13:00,024
And if we do that,

304
00:13:01,286 --> 00:13:03,823
we get three different boxplots.

305
00:13:05,723 --> 00:13:08,799
What is interesting here is that

306
00:13:08,999 --> 00:13:11,586
you can see the axons

307
00:13:11,786 --> 00:13:13,711
have way many more outliers

308
00:13:13,911 --> 00:13:16,911
than the basal or the apical dendrites

309
00:13:17,561 --> 00:13:19,624
which means that the distribution

310
00:13:19,824 --> 00:13:23,924
of the dendrites is much more constrained.

311
00:13:24,474 --> 00:13:26,786
So the section lengths of the dendrites

312
00:13:26,986 --> 00:13:30,211
are much more uniform than the axonal ones.

